// starting begin ResetFog ;
   0: CALL_OW 335
// MC_Init ( ) ;
   4: CALL 542 0 0
// PrepareTestBase ;
   8: CALL 123 0 0
// PlaceDepositsArea ( mat_oil , Area03 ) ;
  12: LD_INT 2
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: CALL 268 0 2
// mc_debug := true ;
  22: LD_ADDR_EXP 5
  26: PUSH
  27: LD_INT 1
  29: ST_TO_ADDR
// MC_Start ( ) ;
  30: CALL 566 0 0
// end ;
  34: END
// export function MC_CustomMacro ( ) ; begin
  35: LD_INT 0
  37: PPUSH
// MC_Add ( 1 , FilterAllUnits ( [ f_side , 1 ] ) ) ;
  38: LD_INT 1
  40: PPUSH
  41: LD_INT 22
  43: PUSH
  44: LD_INT 1
  46: PUSH
  47: EMPTY
  48: LIST
  49: LIST
  50: PPUSH
  51: CALL_OW 69
  55: PPUSH
  56: CALL 621 0 2
// MC_SetParkingArea ( 1 , parkingArea1 ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 4
  65: PPUSH
  66: CALL 2441 0 2
// MC_SetCratesArea ( 1 , cratesArea1 ) ;
  70: LD_INT 1
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: CALL 2018 0 2
// MC_SetScanArea ( 1 , baseArea1 ) ;
  80: LD_INT 1
  82: PPUSH
  83: LD_INT 1
  85: PPUSH
  86: CALL 2490 0 2
// MC_SetBuildingList ( 1 , [ [ b_barracks , 37 , 33 , 5 ] ] ) ;
  90: LD_INT 1
  92: PPUSH
  93: LD_INT 5
  95: PUSH
  96: LD_INT 37
  98: PUSH
  99: LD_INT 33
 101: PUSH
 102: LD_INT 5
 104: PUSH
 105: EMPTY
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: PUSH
 111: EMPTY
 112: LIST
 113: PPUSH
 114: CALL 1118 0 2
// end ;
 118: LD_VAR 0 1
 122: RET
// export function PrepareTestBase ; var i , un ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
// InitHc_All ;
 128: CALL_OW 584
// uc_side := 1 ;
 132: LD_ADDR_OWVAR 20
 136: PUSH
 137: LD_INT 1
 139: ST_TO_ADDR
// uc_nation := 1 ;
 140: LD_ADDR_OWVAR 21
 144: PUSH
 145: LD_INT 1
 147: ST_TO_ADDR
// for i := 1 to 12 do
 148: LD_ADDR_VAR 0 2
 152: PUSH
 153: DOUBLE
 154: LD_INT 1
 156: DEC
 157: ST_TO_ADDR
 158: LD_INT 12
 160: PUSH
 161: FOR_TO
 162: IFFALSE 229
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
 164: LD_INT 0
 166: PPUSH
 167: LD_VAR 0 2
 171: PUSH
 172: LD_INT 4
 174: MOD
 175: PUSH
 176: LD_INT 1
 178: PLUS
 179: PPUSH
 180: LD_INT 3
 182: PPUSH
 183: CALL_OW 380
// un := CreateHuman ;
 187: LD_ADDR_VAR 0 3
 191: PUSH
 192: CALL_OW 44
 196: ST_TO_ADDR
// PlaceUnitXYR ( un , 21 , 16 , 8 , false ) ;
 197: LD_VAR 0 3
 201: PPUSH
 202: LD_INT 21
 204: PPUSH
 205: LD_INT 16
 207: PPUSH
 208: LD_INT 8
 210: PPUSH
 211: LD_INT 0
 213: PPUSH
 214: CALL_OW 50
// ComHold ( un ) ;
 218: LD_VAR 0 3
 222: PPUSH
 223: CALL_OW 140
// end ;
 227: GO 161
 229: POP
 230: POP
// end ;
 231: LD_VAR 0 1
 235: RET
// every 0 0$50 trigger mc_debug do
 236: LD_EXP 5
 240: IFFALSE 267
 242: GO 244
 244: DISABLE
// begin enable ;
 245: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea1 , true ) ;
 246: LD_INT 1
 248: PPUSH
 249: LD_INT 5
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: LD_INT 2
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: CALL_OW 55
// end ;
 267: END
// export function PlaceDepositsArea ( type , area ) ; var xy , i ; begin
 268: LD_INT 0
 270: PPUSH
 271: PPUSH
 272: PPUSH
// if not type in [ mat_oil , mat_siberit ] then
 273: LD_VAR 0 1
 277: PUSH
 278: LD_INT 2
 280: PUSH
 281: LD_INT 3
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: IN
 288: NOT
 289: IFFALSE 293
// exit ;
 291: GO 407
// xy := AreaToList ( area , 0 ) ;
 293: LD_ADDR_VAR 0 4
 297: PUSH
 298: LD_VAR 0 2
 302: PPUSH
 303: LD_INT 0
 305: PPUSH
 306: CALL_OW 517
 310: ST_TO_ADDR
// if not xy then
 311: LD_VAR 0 4
 315: NOT
 316: IFFALSE 320
// exit ;
 318: GO 407
// result := 0 ;
 320: LD_ADDR_VAR 0 3
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
 328: LD_ADDR_VAR 0 5
 332: PUSH
 333: DOUBLE
 334: LD_INT 1
 336: DEC
 337: ST_TO_ADDR
 338: LD_VAR 0 4
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: FOR_TO
 348: IFFALSE 405
// begin result := result + 1 ;
 350: LD_ADDR_VAR 0 3
 354: PUSH
 355: LD_VAR 0 3
 359: PUSH
 360: LD_INT 1
 362: PLUS
 363: ST_TO_ADDR
// CreateDepositXY ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , type ) ;
 364: LD_VAR 0 4
 368: PUSH
 369: LD_INT 1
 371: ARRAY
 372: PUSH
 373: LD_VAR 0 5
 377: ARRAY
 378: PPUSH
 379: LD_VAR 0 4
 383: PUSH
 384: LD_INT 2
 386: ARRAY
 387: PUSH
 388: LD_VAR 0 5
 392: ARRAY
 393: PPUSH
 394: LD_VAR 0 1
 398: PPUSH
 399: CALL_OW 62
// end ;
 403: GO 347
 405: POP
 406: POP
// end ; end_of_file
 407: LD_VAR 0 3
 411: RET
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ;
 412: LD_VAR 0 1
 416: PPUSH
 417: LD_VAR 0 2
 421: PPUSH
 422: LD_VAR 0 3
 426: PPUSH
 427: LD_VAR 0 4
 431: PPUSH
 432: LD_VAR 0 5
 436: PPUSH
 437: LD_VAR 0 6
 441: PPUSH
 442: LD_VAR 0 7
 446: PPUSH
 447: CALL 4869 0 7
// end ;
 451: PPOPN 7
 453: END
// on ClassChanged ( unit , old_class , new_class ) do begin MCE_ClassChanged ( unit , old_class , new_class ) ;
 454: LD_VAR 0 1
 458: PPUSH
 459: LD_VAR 0 2
 463: PPUSH
 464: LD_VAR 0 3
 468: PPUSH
 469: CALL 4922 0 3
// end ;
 473: PPOPN 3
 475: END
// on UnitDestroyed ( unit ) do begin MCE_UnitDestroyed ( unit ) ;
 476: LD_VAR 0 1
 480: PPUSH
 481: CALL 4944 0 1
// end ;
 485: PPOPN 1
 487: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ;
 488: LD_VAR 0 1
 492: PPUSH
 493: LD_VAR 0 2
 497: PPUSH
 498: LD_VAR 0 3
 502: PPUSH
 503: LD_VAR 0 4
 507: PPUSH
 508: CALL 5089 0 4
// end ;
 512: PPOPN 4
 514: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 515: LD_VAR 0 1
 519: PPUSH
 520: CALL 5162 0 1
// end ;
 524: PPOPN 1
 526: END
// on UpgradeComplete ( building ) do begin MCE_BuildingUpgradeComplete ( building ) ;
 527: LD_VAR 0 1
 531: PPUSH
 532: CALL 5881 0 1
// end ;
 536: PPOPN 1
 538: END
// on CommandUnitXY ( comand , unit , x , y , z ) do begin end ; end_of_file
 539: PPOPN 5
 541: END
// export function MC_Init ( ) ; begin
 542: LD_INT 0
 544: PPUSH
// MC_InitVariables ( ) ;
 545: CALL 6142 0 0
// MCE_InitEvents ( ) ;
 549: CALL 4845 0 0
// MCT_InitTags ( ) ;
 553: CALL 6318 0 0
// MCTM_InitTaskManager ( ) end ;
 557: CALL 7905 0 0
 561: LD_VAR 0 1
 565: RET
// export function MC_Start ( ) ; begin
 566: LD_INT 0
 568: PPUSH
// mc_active := true ;
 569: LD_ADDR_EXP 4
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// MC_CustomMacro ( ) ;
 577: CALL 35 0 0
// MCE_SailEventCustom ( mce_start , 0 , 0 , 0 , 0 , 0 , 0 ) ;
 581: LD_EXP 1
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: LD_INT 0
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_INT 0
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL 4869 0 7
// end ;
 608: LD_VAR 0 1
 612: RET
// export function MC_Kill ( base ) ; begin
 613: LD_INT 0
 615: PPUSH
// end ;
 616: LD_VAR 0 2
 620: RET
// export function MC_Add ( side , units ) ; begin
 621: LD_INT 0
 623: PPUSH
// mc_bases := Replace ( mc_bases , mc_bases + 1 , side ) ;
 624: LD_ADDR_EXP 6
 628: PUSH
 629: LD_EXP 6
 633: PPUSH
 634: LD_EXP 6
 638: PUSH
 639: LD_INT 1
 641: PLUS
 642: PPUSH
 643: LD_VAR 0 1
 647: PPUSH
 648: CALL_OW 1
 652: ST_TO_ADDR
// mc_task := Replace ( mc_task , mc_task + 1 , [ ] ) ;
 653: LD_ADDR_EXP 8
 657: PUSH
 658: LD_EXP 8
 662: PPUSH
 663: LD_EXP 8
 667: PUSH
 668: LD_INT 1
 670: PLUS
 671: PPUSH
 672: EMPTY
 673: PPUSH
 674: CALL_OW 1
 678: ST_TO_ADDR
// mc_people := Replace ( mc_people , mc_people + 1 , UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
 679: LD_ADDR_EXP 9
 683: PUSH
 684: LD_EXP 9
 688: PPUSH
 689: LD_EXP 9
 693: PUSH
 694: LD_INT 1
 696: PLUS
 697: PPUSH
 698: LD_VAR 0 2
 702: PPUSH
 703: LD_INT 21
 705: PUSH
 706: LD_INT 1
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 23
 718: PUSH
 719: LD_INT 0
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PPUSH
 734: CALL_OW 72
 738: PPUSH
 739: CALL_OW 1
 743: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , mc_ape + 1 , UnitFilter ( units , [ f_nation , 0 ] ) ) ;
 744: LD_ADDR_EXP 19
 748: PUSH
 749: LD_EXP 19
 753: PPUSH
 754: LD_EXP 19
 758: PUSH
 759: LD_INT 1
 761: PLUS
 762: PPUSH
 763: LD_VAR 0 2
 767: PPUSH
 768: LD_INT 23
 770: PUSH
 771: LD_INT 0
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PPUSH
 778: CALL_OW 72
 782: PPUSH
 783: CALL_OW 1
 787: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , mc_vehicles + 1 , UnitFilter ( units , [ f_type , unit_vehicle ] ) ) ;
 788: LD_ADDR_EXP 11
 792: PUSH
 793: LD_EXP 11
 797: PPUSH
 798: LD_EXP 11
 802: PUSH
 803: LD_INT 1
 805: PLUS
 806: PPUSH
 807: LD_VAR 0 2
 811: PPUSH
 812: LD_INT 21
 814: PUSH
 815: LD_INT 2
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PPUSH
 822: CALL_OW 72
 826: PPUSH
 827: CALL_OW 1
 831: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , mc_buildings + 1 , UnitFilter ( units , [ f_type , unit_building ] ) ) ;
 832: LD_ADDR_EXP 10
 836: PUSH
 837: LD_EXP 10
 841: PPUSH
 842: LD_EXP 10
 846: PUSH
 847: LD_INT 1
 849: PLUS
 850: PPUSH
 851: LD_VAR 0 2
 855: PPUSH
 856: LD_INT 21
 858: PUSH
 859: LD_INT 3
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PPUSH
 866: CALL_OW 72
 870: PPUSH
 871: CALL_OW 1
 875: ST_TO_ADDR
// mc_defense_status := Replace ( mc_defense_status , mc_defense_status + 1 , false ) ;
 876: LD_ADDR_EXP 16
 880: PUSH
 881: LD_EXP 16
 885: PPUSH
 886: LD_EXP 16
 890: PUSH
 891: LD_INT 1
 893: PLUS
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 1
 902: ST_TO_ADDR
// end ;
 903: LD_VAR 0 3
 907: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
 908: LD_INT 0
 910: PPUSH
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
// if not mc_bases [ base ] then
 916: LD_EXP 6
 920: PUSH
 921: LD_VAR 0 1
 925: ARRAY
 926: NOT
 927: IFFALSE 931
// exit ;
 929: GO 1113
// tmp := [ ] ;
 931: LD_ADDR_VAR 0 6
 935: PUSH
 936: EMPTY
 937: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
 938: LD_ADDR_VAR 0 7
 942: PUSH
 943: LD_VAR 0 3
 947: PPUSH
 948: LD_INT 0
 950: PPUSH
 951: CALL_OW 517
 955: ST_TO_ADDR
// if not list then
 956: LD_VAR 0 7
 960: NOT
 961: IFFALSE 965
// exit ;
 963: GO 1113
// for i = 1 to amount do
 965: LD_ADDR_VAR 0 5
 969: PUSH
 970: DOUBLE
 971: LD_INT 1
 973: DEC
 974: ST_TO_ADDR
 975: LD_VAR 0 2
 979: PUSH
 980: FOR_TO
 981: IFFALSE 1061
// begin x := rand ( 1 , list [ 1 ] ) ;
 983: LD_ADDR_VAR 0 8
 987: PUSH
 988: LD_INT 1
 990: PPUSH
 991: LD_VAR 0 7
 995: PUSH
 996: LD_INT 1
 998: ARRAY
 999: PPUSH
1000: CALL_OW 12
1004: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
1005: LD_ADDR_VAR 0 6
1009: PUSH
1010: LD_VAR 0 6
1014: PPUSH
1015: LD_VAR 0 5
1019: PPUSH
1020: LD_VAR 0 7
1024: PUSH
1025: LD_INT 1
1027: ARRAY
1028: PUSH
1029: LD_VAR 0 8
1033: ARRAY
1034: PUSH
1035: LD_VAR 0 7
1039: PUSH
1040: LD_INT 2
1042: ARRAY
1043: PUSH
1044: LD_VAR 0 8
1048: ARRAY
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: PPUSH
1054: CALL_OW 1
1058: ST_TO_ADDR
// end ;
1059: GO 980
1061: POP
1062: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
1063: LD_ADDR_EXP 12
1067: PUSH
1068: LD_EXP 12
1072: PPUSH
1073: LD_VAR 0 1
1077: PPUSH
1078: LD_VAR 0 6
1082: PPUSH
1083: CALL_OW 1
1087: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
1088: LD_ADDR_EXP 13
1092: PUSH
1093: LD_EXP 13
1097: PPUSH
1098: LD_VAR 0 1
1102: PPUSH
1103: LD_VAR 0 3
1107: PPUSH
1108: CALL_OW 1
1112: ST_TO_ADDR
// end ;
1113: LD_VAR 0 4
1117: RET
// export function MC_SetBuildingList ( base , construct_list ) ; var i , btype ; begin
1118: LD_INT 0
1120: PPUSH
1121: PPUSH
1122: PPUSH
// if not construct_list then
1123: LD_VAR 0 2
1127: NOT
1128: IFFALSE 1132
// exit ;
1130: GO 1358
// for i := 1 to construct_list do
1132: LD_ADDR_VAR 0 4
1136: PUSH
1137: DOUBLE
1138: LD_INT 1
1140: DEC
1141: ST_TO_ADDR
1142: LD_VAR 0 2
1146: PUSH
1147: FOR_TO
1148: IFFALSE 1331
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1150: LD_VAR 0 2
1154: PUSH
1155: LD_VAR 0 4
1159: ARRAY
1160: PUSH
1161: LD_INT 1
1163: ARRAY
1164: PUSH
1165: LD_INT 3
1167: PUSH
1168: LD_INT 5
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: IN
1175: IFFALSE 1329
// begin case construct_list [ i ] [ 1 ] of b_factory :
1177: LD_VAR 0 2
1181: PUSH
1182: LD_VAR 0 4
1186: ARRAY
1187: PUSH
1188: LD_INT 1
1190: ARRAY
1191: PUSH
1192: LD_INT 3
1194: DOUBLE
1195: EQUAL
1196: IFTRUE 1200
1198: GO 1211
1200: POP
// btype := b_workshop ; b_barracks :
1201: LD_ADDR_VAR 0 5
1205: PUSH
1206: LD_INT 2
1208: ST_TO_ADDR
1209: GO 1231
1211: LD_INT 5
1213: DOUBLE
1214: EQUAL
1215: IFTRUE 1219
1217: GO 1230
1219: POP
// btype := b_armoury ; end ;
1220: LD_ADDR_VAR 0 5
1224: PUSH
1225: LD_INT 4
1227: ST_TO_ADDR
1228: GO 1231
1230: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: LD_VAR 0 2
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: LD_VAR 0 2
1250: PUSH
1251: LD_VAR 0 4
1255: ARRAY
1256: PPUSH
1257: LD_INT 5
1259: PPUSH
1260: LD_VAR 0 2
1264: PUSH
1265: LD_VAR 0 4
1269: ARRAY
1270: PUSH
1271: LD_INT 1
1273: ARRAY
1274: PPUSH
1275: CALL_OW 1
1279: PPUSH
1280: CALL_OW 1
1284: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1285: LD_ADDR_VAR 0 2
1289: PUSH
1290: LD_VAR 0 2
1294: PPUSH
1295: LD_VAR 0 4
1299: PPUSH
1300: LD_VAR 0 2
1304: PUSH
1305: LD_VAR 0 4
1309: ARRAY
1310: PPUSH
1311: LD_INT 1
1313: PPUSH
1314: LD_VAR 0 5
1318: PPUSH
1319: CALL_OW 1
1323: PPUSH
1324: CALL_OW 1
1328: ST_TO_ADDR
// end ;
1329: GO 1147
1331: POP
1332: POP
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
1333: LD_ADDR_EXP 14
1337: PUSH
1338: LD_EXP 14
1342: PPUSH
1343: LD_VAR 0 1
1347: PPUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: CALL_OW 1
1357: ST_TO_ADDR
// end ;
1358: LD_VAR 0 3
1362: RET
// export function MC_InsertBuildingList ( base , construct_list ) ; var i , btype ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
// if not construct_list then
1368: LD_VAR 0 2
1372: NOT
1373: IFFALSE 1377
// exit ;
1375: GO 1615
// for i := 1 to construct_list do
1377: LD_ADDR_VAR 0 4
1381: PUSH
1382: DOUBLE
1383: LD_INT 1
1385: DEC
1386: ST_TO_ADDR
1387: LD_VAR 0 2
1391: PUSH
1392: FOR_TO
1393: IFFALSE 1576
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1395: LD_VAR 0 2
1399: PUSH
1400: LD_VAR 0 4
1404: ARRAY
1405: PUSH
1406: LD_INT 1
1408: ARRAY
1409: PUSH
1410: LD_INT 3
1412: PUSH
1413: LD_INT 5
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: IN
1420: IFFALSE 1574
// begin case construct_list [ i ] [ 1 ] of b_factory :
1422: LD_VAR 0 2
1426: PUSH
1427: LD_VAR 0 4
1431: ARRAY
1432: PUSH
1433: LD_INT 1
1435: ARRAY
1436: PUSH
1437: LD_INT 3
1439: DOUBLE
1440: EQUAL
1441: IFTRUE 1445
1443: GO 1456
1445: POP
// btype := b_workshop ; b_barracks :
1446: LD_ADDR_VAR 0 5
1450: PUSH
1451: LD_INT 2
1453: ST_TO_ADDR
1454: GO 1476
1456: LD_INT 5
1458: DOUBLE
1459: EQUAL
1460: IFTRUE 1464
1462: GO 1475
1464: POP
// btype := b_armoury ; end ;
1465: LD_ADDR_VAR 0 5
1469: PUSH
1470: LD_INT 4
1472: ST_TO_ADDR
1473: GO 1476
1475: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1476: LD_ADDR_VAR 0 2
1480: PUSH
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_VAR 0 4
1490: PPUSH
1491: LD_VAR 0 2
1495: PUSH
1496: LD_VAR 0 4
1500: ARRAY
1501: PPUSH
1502: LD_INT 5
1504: PPUSH
1505: LD_VAR 0 2
1509: PUSH
1510: LD_VAR 0 4
1514: ARRAY
1515: PUSH
1516: LD_INT 1
1518: ARRAY
1519: PPUSH
1520: CALL_OW 1
1524: PPUSH
1525: CALL_OW 1
1529: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1530: LD_ADDR_VAR 0 2
1534: PUSH
1535: LD_VAR 0 2
1539: PPUSH
1540: LD_VAR 0 4
1544: PPUSH
1545: LD_VAR 0 2
1549: PUSH
1550: LD_VAR 0 4
1554: ARRAY
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_VAR 0 5
1563: PPUSH
1564: CALL_OW 1
1568: PPUSH
1569: CALL_OW 1
1573: ST_TO_ADDR
// end ;
1574: GO 1392
1576: POP
1577: POP
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union construct_list ) ;
1578: LD_ADDR_EXP 14
1582: PUSH
1583: LD_EXP 14
1587: PPUSH
1588: LD_VAR 0 1
1592: PPUSH
1593: LD_EXP 14
1597: PUSH
1598: LD_VAR 0 1
1602: ARRAY
1603: PUSH
1604: LD_VAR 0 2
1608: UNION
1609: PPUSH
1610: CALL_OW 1
1614: ST_TO_ADDR
// end ;
1615: LD_VAR 0 3
1619: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
1620: LD_INT 0
1622: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , produce_list ) ;
1623: LD_ADDR_EXP 15
1627: PUSH
1628: LD_EXP 15
1632: PPUSH
1633: LD_VAR 0 1
1637: PPUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 1
1647: ST_TO_ADDR
// end ;
1648: LD_VAR 0 3
1652: RET
// export function MC_InsertProduceList ( base , components ) ; begin
1653: LD_INT 0
1655: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , mc_produce_list [ base ] ^ components ) ;
1656: LD_ADDR_EXP 15
1660: PUSH
1661: LD_EXP 15
1665: PPUSH
1666: LD_VAR 0 1
1670: PPUSH
1671: LD_EXP 15
1675: PUSH
1676: LD_VAR 0 1
1680: ARRAY
1681: PUSH
1682: LD_VAR 0 2
1686: ADD
1687: PPUSH
1688: CALL_OW 1
1692: ST_TO_ADDR
// end ;
1693: LD_VAR 0 3
1697: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
1698: LD_INT 0
1700: PPUSH
// mc_defender := Replace ( mc_defender , base , deflist ) ;
1701: LD_ADDR_EXP 17
1705: PUSH
1706: LD_EXP 17
1710: PPUSH
1711: LD_VAR 0 1
1715: PPUSH
1716: LD_VAR 0 2
1720: PPUSH
1721: CALL_OW 1
1725: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
1726: LD_ADDR_EXP 18
1730: PUSH
1731: LD_EXP 18
1735: PPUSH
1736: LD_VAR 0 1
1740: PPUSH
1741: LD_VAR 0 2
1745: PUSH
1746: LD_INT 0
1748: PLUS
1749: PPUSH
1750: CALL_OW 1
1754: ST_TO_ADDR
// end ;
1755: LD_VAR 0 3
1759: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
1760: LD_INT 0
1762: PPUSH
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
1763: LD_ADDR_EXP 18
1767: PUSH
1768: LD_EXP 18
1772: PPUSH
1773: LD_VAR 0 1
1777: PPUSH
1778: LD_VAR 0 2
1782: PPUSH
1783: CALL_OW 1
1787: ST_TO_ADDR
// end ;
1788: LD_VAR 0 3
1792: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; begin
1793: LD_INT 0
1795: PPUSH
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
1796: LD_ADDR_EXP 21
1800: PUSH
1801: LD_EXP 21
1805: PPUSH
1806: LD_VAR 0 1
1810: PUSH
1811: LD_EXP 21
1815: PUSH
1816: LD_VAR 0 1
1820: ARRAY
1821: PUSH
1822: LD_INT 1
1824: PLUS
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PPUSH
1830: LD_VAR 0 1
1834: PUSH
1835: LD_VAR 0 2
1839: PUSH
1840: LD_VAR 0 3
1844: PUSH
1845: LD_VAR 0 4
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL 13014 0 3
1860: ST_TO_ADDR
// end ;
1861: LD_VAR 0 5
1865: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
1866: LD_INT 0
1868: PPUSH
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
1869: LD_ADDR_EXP 22
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_VAR 0 1
1883: PPUSH
1884: LD_VAR 0 2
1888: PPUSH
1889: CALL_OW 1
1893: ST_TO_ADDR
// end ;
1894: LD_VAR 0 3
1898: RET
// export function MC_SetTame ( base , area ) ; begin
1899: LD_INT 0
1901: PPUSH
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
1902: LD_ADDR_EXP 23
1906: PUSH
1907: LD_EXP 23
1911: PPUSH
1912: LD_VAR 0 1
1916: PPUSH
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 1
1926: ST_TO_ADDR
// end ;
1927: LD_VAR 0 3
1931: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
1932: LD_INT 0
1934: PPUSH
1935: PPUSH
// if not base or not kinds then
1936: LD_VAR 0 1
1940: NOT
1941: PUSH
1942: LD_VAR 0 2
1946: NOT
1947: OR
1948: IFFALSE 1952
// exit ;
1950: GO 2013
// for i in kinds do
1952: LD_ADDR_VAR 0 4
1956: PUSH
1957: LD_VAR 0 2
1961: PUSH
1962: FOR_IN
1963: IFFALSE 2011
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
1965: LD_ADDR_EXP 24
1969: PUSH
1970: LD_EXP 24
1974: PPUSH
1975: LD_VAR 0 1
1979: PUSH
1980: LD_EXP 24
1984: PUSH
1985: LD_VAR 0 1
1989: ARRAY
1990: PUSH
1991: LD_INT 1
1993: PLUS
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 13014 0 3
2008: ST_TO_ADDR
2009: GO 1962
2011: POP
2012: POP
// end ;
2013: LD_VAR 0 3
2017: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
2018: LD_INT 0
2020: PPUSH
// if not mc_bases or not base or not areas then
2021: LD_EXP 6
2025: NOT
2026: PUSH
2027: LD_VAR 0 1
2031: NOT
2032: OR
2033: PUSH
2034: LD_VAR 0 2
2038: NOT
2039: OR
2040: IFFALSE 2044
// exit ;
2042: GO 2069
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
2044: LD_ADDR_EXP 25
2048: PUSH
2049: LD_EXP 25
2053: PPUSH
2054: LD_VAR 0 1
2058: PPUSH
2059: LD_VAR 0 2
2063: PPUSH
2064: CALL_OW 1
2068: ST_TO_ADDR
// end ;
2069: LD_VAR 0 3
2073: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
2074: LD_INT 0
2076: PPUSH
// if not mc_bases or not base or not teleports_exit then
2077: LD_EXP 6
2081: NOT
2082: PUSH
2083: LD_VAR 0 1
2087: NOT
2088: OR
2089: PUSH
2090: LD_VAR 0 2
2094: NOT
2095: OR
2096: IFFALSE 2100
// exit ;
2098: GO 2125
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
2100: LD_ADDR_EXP 26
2104: PUSH
2105: LD_EXP 26
2109: PPUSH
2110: LD_VAR 0 1
2114: PPUSH
2115: LD_VAR 0 2
2119: PPUSH
2120: CALL_OW 1
2124: ST_TO_ADDR
// end ;
2125: LD_VAR 0 3
2129: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
2130: LD_INT 0
2132: PPUSH
2133: PPUSH
2134: PPUSH
// if not base or not ext_list then
2135: LD_VAR 0 1
2139: NOT
2140: PUSH
2141: LD_VAR 0 5
2145: NOT
2146: OR
2147: IFFALSE 2151
// exit ;
2149: GO 2324
// tmp := GetFacExtXYD ( x , y , d ) ;
2151: LD_ADDR_VAR 0 8
2155: PUSH
2156: LD_VAR 0 2
2160: PPUSH
2161: LD_VAR 0 3
2165: PPUSH
2166: LD_VAR 0 4
2170: PPUSH
2171: CALL 42013 0 3
2175: ST_TO_ADDR
// if not tmp then
2176: LD_VAR 0 8
2180: NOT
2181: IFFALSE 2185
// exit ;
2183: GO 2324
// for i in tmp do
2185: LD_ADDR_VAR 0 7
2189: PUSH
2190: LD_VAR 0 8
2194: PUSH
2195: FOR_IN
2196: IFFALSE 2322
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
2198: LD_ADDR_EXP 14
2202: PUSH
2203: LD_EXP 14
2207: PPUSH
2208: LD_VAR 0 1
2212: PPUSH
2213: LD_EXP 14
2217: PUSH
2218: LD_VAR 0 1
2222: ARRAY
2223: PPUSH
2224: LD_EXP 14
2228: PUSH
2229: LD_VAR 0 1
2233: ARRAY
2234: PUSH
2235: LD_INT 1
2237: PLUS
2238: PPUSH
2239: LD_VAR 0 5
2243: PUSH
2244: LD_INT 1
2246: ARRAY
2247: PUSH
2248: LD_VAR 0 7
2252: PUSH
2253: LD_INT 1
2255: ARRAY
2256: PUSH
2257: LD_VAR 0 7
2261: PUSH
2262: LD_INT 2
2264: ARRAY
2265: PUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_INT 3
2273: ARRAY
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: PPUSH
2281: CALL_OW 2
2285: PPUSH
2286: CALL_OW 1
2290: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
2291: LD_ADDR_VAR 0 5
2295: PUSH
2296: LD_VAR 0 5
2300: PPUSH
2301: LD_INT 1
2303: PPUSH
2304: CALL_OW 3
2308: ST_TO_ADDR
// if not ext_list then
2309: LD_VAR 0 5
2313: NOT
2314: IFFALSE 2320
// exit ;
2316: POP
2317: POP
2318: GO 2324
// end ;
2320: GO 2195
2322: POP
2323: POP
// end ;
2324: LD_VAR 0 6
2328: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
2329: LD_INT 0
2331: PPUSH
// if not mc_bases or not base or not weapon_list then
2332: LD_EXP 6
2336: NOT
2337: PUSH
2338: LD_VAR 0 1
2342: NOT
2343: OR
2344: PUSH
2345: LD_VAR 0 2
2349: NOT
2350: OR
2351: IFFALSE 2355
// exit ;
2353: GO 2380
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
2355: LD_ADDR_EXP 27
2359: PUSH
2360: LD_EXP 27
2364: PPUSH
2365: LD_VAR 0 1
2369: PPUSH
2370: LD_VAR 0 2
2374: PPUSH
2375: CALL_OW 1
2379: ST_TO_ADDR
// end ;
2380: LD_VAR 0 3
2384: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
2385: LD_INT 0
2387: PPUSH
// if not mc_bases or not base or not tech_list then
2388: LD_EXP 6
2392: NOT
2393: PUSH
2394: LD_VAR 0 1
2398: NOT
2399: OR
2400: PUSH
2401: LD_VAR 0 2
2405: NOT
2406: OR
2407: IFFALSE 2411
// exit ;
2409: GO 2436
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
2411: LD_ADDR_EXP 20
2415: PUSH
2416: LD_EXP 20
2420: PPUSH
2421: LD_VAR 0 1
2425: PPUSH
2426: LD_VAR 0 2
2430: PPUSH
2431: CALL_OW 1
2435: ST_TO_ADDR
// end ;
2436: LD_VAR 0 3
2440: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
2441: LD_INT 0
2443: PPUSH
// if not parking_area or not base then
2444: LD_VAR 0 2
2448: NOT
2449: PUSH
2450: LD_VAR 0 1
2454: NOT
2455: OR
2456: IFFALSE 2460
// exit ;
2458: GO 2485
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
2460: LD_ADDR_EXP 28
2464: PUSH
2465: LD_EXP 28
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: LD_VAR 0 2
2479: PPUSH
2480: CALL_OW 1
2484: ST_TO_ADDR
// end ;
2485: LD_VAR 0 3
2489: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
2490: LD_INT 0
2492: PPUSH
// if not base or not scan_area then
2493: LD_VAR 0 1
2497: NOT
2498: PUSH
2499: LD_VAR 0 2
2503: NOT
2504: OR
2505: IFFALSE 2509
// exit ;
2507: GO 2534
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
2509: LD_ADDR_EXP 29
2513: PUSH
2514: LD_EXP 29
2518: PPUSH
2519: LD_VAR 0 1
2523: PPUSH
2524: LD_VAR 0 2
2528: PPUSH
2529: CALL_OW 1
2533: ST_TO_ADDR
// end ; end_of_file
2534: LD_VAR 0 3
2538: RET
// export function MC_Monitor ( ) ; var i , active_players ; begin
2539: LD_INT 0
2541: PPUSH
2542: PPUSH
2543: PPUSH
// while mc_active do
2544: LD_EXP 4
2548: IFFALSE 2658
// begin wait ( 0 0$1 ) ;
2550: LD_INT 35
2552: PPUSH
2553: CALL_OW 67
// active_players := 0 ;
2557: LD_ADDR_VAR 0 3
2561: PUSH
2562: LD_INT 0
2564: ST_TO_ADDR
// for i := 1 to mc_bases do
2565: LD_ADDR_VAR 0 2
2569: PUSH
2570: DOUBLE
2571: LD_INT 1
2573: DEC
2574: ST_TO_ADDR
2575: LD_EXP 6
2579: PUSH
2580: FOR_TO
2581: IFFALSE 2639
// begin if MC_Exist ( i ) then
2583: LD_VAR 0 2
2587: PPUSH
2588: CALL 6575 0 1
2592: IFFALSE 2637
// begin MCE_SailEventCustom ( mce_monitor_base , i , 0 , 0 , 0 , 0 , 0 ) ;
2594: LD_EXP 2
2598: PPUSH
2599: LD_VAR 0 2
2603: PPUSH
2604: LD_INT 0
2606: PPUSH
2607: LD_INT 0
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: LD_INT 0
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: CALL 4869 0 7
// active_players := active_players + 1 ;
2623: LD_ADDR_VAR 0 3
2627: PUSH
2628: LD_VAR 0 3
2632: PUSH
2633: LD_INT 1
2635: PLUS
2636: ST_TO_ADDR
// end ; end ;
2637: GO 2580
2639: POP
2640: POP
// if not active_players then
2641: LD_VAR 0 3
2645: NOT
2646: IFFALSE 2656
// mc_active := false ;
2648: LD_ADDR_EXP 4
2652: PUSH
2653: LD_INT 0
2655: ST_TO_ADDR
// end ;
2656: GO 2544
// end ;
2658: LD_VAR 0 1
2662: RET
// export function MC_MonitorBase ( base ) ; begin
2663: LD_INT 0
2665: PPUSH
// if not mc_people [ base ] then
2666: LD_EXP 9
2670: PUSH
2671: LD_VAR 0 1
2675: ARRAY
2676: NOT
2677: IFFALSE 2702
// mc_bases := Replace ( mc_bases , base , 0 ) ;
2679: LD_ADDR_EXP 6
2683: PUSH
2684: LD_EXP 6
2688: PPUSH
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_INT 0
2696: PPUSH
2697: CALL_OW 1
2701: ST_TO_ADDR
// mc_danger := Replace ( mc_danger , base , DangerInArea ( mc_bases [ base ] , mc_scan_area [ base ] ) ) ;
2702: LD_ADDR_EXP 30
2706: PUSH
2707: LD_EXP 30
2711: PPUSH
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_EXP 6
2721: PUSH
2722: LD_VAR 0 1
2726: ARRAY
2727: PPUSH
2728: LD_EXP 29
2732: PUSH
2733: LD_VAR 0 1
2737: ARRAY
2738: PPUSH
2739: CALL 15660 0 2
2743: PPUSH
2744: CALL_OW 1
2748: ST_TO_ADDR
// if mc_danger [ base ] then
2749: LD_EXP 30
2753: PUSH
2754: LD_VAR 0 1
2758: ARRAY
2759: IFFALSE 2772
// MC_Defend ( base ) else
2761: LD_VAR 0 1
2765: PPUSH
2766: CALL 2786 0 1
2770: GO 2781
// MC_TaskManager ( base ) ;
2772: LD_VAR 0 1
2776: PPUSH
2777: CALL 2848 0 1
// end ;
2781: LD_VAR 0 2
2785: RET
// export function MC_Defend ( base ) ; var defender_vehicles ; begin
2786: LD_INT 0
2788: PPUSH
2789: PPUSH
// if mc_defense_status [ base ] then
2790: LD_EXP 16
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: IFFALSE 2804
// exit ;
2802: GO 2843
// mc_defense_status := Replace ( mc_defense_status , base , true ) ;
2804: LD_ADDR_EXP 16
2808: PUSH
2809: LD_EXP 16
2813: PPUSH
2814: LD_VAR 0 1
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: CALL_OW 1
2826: ST_TO_ADDR
// defender_vehicles := mc_defender [ base ] ;
2827: LD_ADDR_VAR 0 3
2831: PUSH
2832: LD_EXP 17
2836: PUSH
2837: LD_VAR 0 1
2841: ARRAY
2842: ST_TO_ADDR
// end ;
2843: LD_VAR 0 2
2847: RET
// export function MC_TaskManager ( base ) ; var crates_list ; begin
2848: LD_INT 0
2850: PPUSH
2851: PPUSH
// MC_CollectCrates ( base , GetListOfCratesInArea ( mc_crates_area [ base ] ) ) ;
2852: LD_VAR 0 1
2856: PPUSH
2857: LD_EXP 25
2861: PUSH
2862: LD_VAR 0 1
2866: ARRAY
2867: PPUSH
2868: CALL_OW 435
2872: PPUSH
2873: CALL 2891 0 2
// MC_Build ( base ) ;
2877: LD_VAR 0 1
2881: PPUSH
2882: CALL 4237 0 1
// end ;
2886: LD_VAR 0 2
2890: RET
// export function MC_CollectCrates ( base , crates ) ; var i , j , amount , cargo_bays , apes , engs , collectors , number_of_crates , driver , drivers , depot , mechanic_used ; begin
2891: LD_INT 0
2893: PPUSH
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
2898: PPUSH
2899: PPUSH
2900: PPUSH
2901: PPUSH
2902: PPUSH
2903: PPUSH
2904: PPUSH
2905: PPUSH
// if MCTM_HasActiveTask ( base , mctm_collect_crates ) or not crates or not MC_GetDepot ( base ) then
2906: LD_VAR 0 1
2910: PPUSH
2911: LD_EXP 36
2915: PPUSH
2916: CALL 7929 0 2
2920: PUSH
2921: LD_VAR 0 2
2925: NOT
2926: OR
2927: PUSH
2928: LD_VAR 0 1
2932: PPUSH
2933: CALL 7550 0 1
2937: NOT
2938: OR
2939: IFFALSE 2943
// exit ;
2941: GO 4232
// MCTM_SetActiveTask ( base , mctm_collect_crates ) ;
2943: LD_VAR 0 1
2947: PPUSH
2948: LD_EXP 36
2952: PPUSH
2953: CALL 7959 0 2
// collectors := [ ] ;
2957: LD_ADDR_VAR 0 10
2961: PUSH
2962: EMPTY
2963: ST_TO_ADDR
// cargo_bays := GetCargoBay ( mc_vehicles [ base ] ) ;
2964: LD_ADDR_VAR 0 7
2968: PUSH
2969: LD_EXP 11
2973: PUSH
2974: LD_VAR 0 1
2978: ARRAY
2979: PPUSH
2980: CALL 45636 0 1
2984: ST_TO_ADDR
// if cargo_bays then
2985: LD_VAR 0 7
2989: IFFALSE 3670
// begin collectors := collectors union cargo_bays ;
2991: LD_ADDR_VAR 0 10
2995: PUSH
2996: LD_VAR 0 10
3000: PUSH
3001: LD_VAR 0 7
3005: UNION
3006: ST_TO_ADDR
// while crates and collectors do
3007: LD_VAR 0 2
3011: PUSH
3012: LD_VAR 0 10
3016: AND
3017: IFFALSE 3567
// begin wait ( 0 0$1 ) ;
3019: LD_INT 35
3021: PPUSH
3022: CALL_OW 67
// for i in collectors do
3026: LD_ADDR_VAR 0 4
3030: PUSH
3031: LD_VAR 0 10
3035: PUSH
3036: FOR_IN
3037: IFFALSE 3563
// begin driver := 0 ;
3039: LD_ADDR_VAR 0 12
3043: PUSH
3044: LD_INT 0
3046: ST_TO_ADDR
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
3047: LD_VAR 0 4
3051: PPUSH
3052: CALL_OW 263
3056: PUSH
3057: LD_INT 1
3059: EQUAL
3060: PUSH
3061: LD_VAR 0 4
3065: PPUSH
3066: CALL_OW 311
3070: NOT
3071: AND
3072: IFFALSE 3256
// begin driver := MC_GetOneByClass ( base , 3 , mct_none ) ;
3074: LD_ADDR_VAR 0 12
3078: PUSH
3079: LD_VAR 0 1
3083: PPUSH
3084: LD_INT 3
3086: PPUSH
3087: LD_EXP 31
3091: PPUSH
3092: CALL 7456 0 3
3096: ST_TO_ADDR
// if not driver then
3097: LD_VAR 0 12
3101: NOT
3102: IFFALSE 3171
// begin driver := MC_GetBestForClass ( base , 3 , 1 ) ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 1
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 1
3119: PPUSH
3120: CALL 6615 0 3
3124: ST_TO_ADDR
// if driver then
3125: LD_VAR 0 12
3129: IFFALSE 3171
// begin driver := driver [ 1 ] ;
3131: LD_ADDR_VAR 0 12
3135: PUSH
3136: LD_VAR 0 12
3140: PUSH
3141: LD_INT 1
3143: ARRAY
3144: ST_TO_ADDR
// MC_ChangeClass ( base , 3 , driver ) ;
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: LD_VAR 0 12
3157: PPUSH
3158: CALL 6845 0 3
// AddComExitBuilding ( driver ) ;
3162: LD_VAR 0 12
3166: PPUSH
3167: CALL_OW 182
// end ; end ; if IsInUnit ( driver ) then
3171: LD_VAR 0 12
3175: PPUSH
3176: CALL_OW 310
3180: IFFALSE 3191
// ComExit ( driver ) ;
3182: LD_VAR 0 12
3186: PPUSH
3187: CALL 44765 0 1
// SetTag ( driver , mct_collect_crates ) ;
3191: LD_VAR 0 12
3195: PPUSH
3196: LD_EXP 34
3200: PPUSH
3201: CALL_OW 109
// if GetLives ( i ) < 1000 then
3205: LD_VAR 0 4
3209: PPUSH
3210: CALL_OW 256
3214: PUSH
3215: LD_INT 1000
3217: LESS
3218: IFFALSE 3234
// AddComRepairVehicle ( driver , i ) ;
3220: LD_VAR 0 12
3224: PPUSH
3225: LD_VAR 0 4
3229: PPUSH
3230: CALL_OW 189
// AddComEnterUnit ( driver , i ) ;
3234: LD_VAR 0 12
3238: PPUSH
3239: LD_VAR 0 4
3243: PPUSH
3244: CALL_OW 180
// mechanic_used := true ;
3248: LD_ADDR_VAR 0 15
3252: PUSH
3253: LD_INT 1
3255: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) ;
3256: LD_INT 35
3258: PPUSH
3259: CALL_OW 67
// if IsDead ( i ) then
3263: LD_VAR 0 4
3267: PPUSH
3268: CALL_OW 301
3272: IFFALSE 3292
// begin collectors := collectors diff i ;
3274: LD_ADDR_VAR 0 10
3278: PUSH
3279: LD_VAR 0 10
3283: PUSH
3284: LD_VAR 0 4
3288: DIFF
3289: ST_TO_ADDR
// continue ;
3290: GO 3256
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 20 then
3292: LD_VAR 0 4
3296: PPUSH
3297: CALL_OW 262
3301: PUSH
3302: LD_INT 1
3304: EQUAL
3305: PUSH
3306: LD_VAR 0 4
3310: PPUSH
3311: CALL_OW 261
3315: PUSH
3316: LD_INT 20
3318: LESS
3319: AND
3320: IFFALSE 3381
// begin depot := NearestUnitToUnit ( MC_GetDepot ( base ) , i ) ;
3322: LD_ADDR_VAR 0 14
3326: PUSH
3327: LD_VAR 0 1
3331: PPUSH
3332: CALL 7550 0 1
3336: PPUSH
3337: LD_VAR 0 4
3341: PPUSH
3342: CALL_OW 74
3346: ST_TO_ADDR
// if GetDistUnits ( i , depot ) < 6 then
3347: LD_VAR 0 4
3351: PPUSH
3352: LD_VAR 0 14
3356: PPUSH
3357: CALL_OW 296
3361: PUSH
3362: LD_INT 6
3364: LESS
3365: IFFALSE 3381
// ComMoveUnit ( i , depot ) ;
3367: LD_VAR 0 4
3371: PPUSH
3372: LD_VAR 0 14
3376: PPUSH
3377: CALL_OW 112
// end ; if GetControl ( i ) = control_manual then
3381: LD_VAR 0 4
3385: PPUSH
3386: CALL_OW 263
3390: PUSH
3391: LD_INT 1
3393: EQUAL
3394: IFFALSE 3459
// begin if not driver then
3396: LD_VAR 0 12
3400: NOT
3401: IFFALSE 3418
// driver := IsDrivenBy ( i ) ;
3403: LD_ADDR_VAR 0 12
3407: PUSH
3408: LD_VAR 0 4
3412: PPUSH
3413: CALL_OW 311
3417: ST_TO_ADDR
// if not HasTask ( driver ) then
3418: LD_VAR 0 12
3422: PPUSH
3423: CALL_OW 314
3427: NOT
3428: IFFALSE 3457
// ComCollect ( driver , crates [ 1 ] , crates [ 2 ] ) ;
3430: LD_VAR 0 12
3434: PPUSH
3435: LD_VAR 0 2
3439: PUSH
3440: LD_INT 1
3442: ARRAY
3443: PPUSH
3444: LD_VAR 0 2
3448: PUSH
3449: LD_INT 2
3451: ARRAY
3452: PPUSH
3453: CALL_OW 117
// end else
3457: GO 3498
// if not HasTask ( i ) then
3459: LD_VAR 0 4
3463: PPUSH
3464: CALL_OW 314
3468: NOT
3469: IFFALSE 3498
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3471: LD_VAR 0 4
3475: PPUSH
3476: LD_VAR 0 2
3480: PUSH
3481: LD_INT 1
3483: ARRAY
3484: PPUSH
3485: LD_VAR 0 2
3489: PUSH
3490: LD_INT 2
3492: ARRAY
3493: PPUSH
3494: CALL_OW 117
// until not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3498: LD_VAR 0 2
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: PPUSH
3507: LD_VAR 0 2
3511: PUSH
3512: LD_INT 2
3514: ARRAY
3515: PPUSH
3516: CALL_OW 284
3520: NOT
3521: IFFALSE 3256
// for j := 1 to 2 do
3523: LD_ADDR_VAR 0 5
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_INT 2
3535: PUSH
3536: FOR_TO
3537: IFFALSE 3559
// crates := Delete ( crates , 1 ) ;
3539: LD_ADDR_VAR 0 2
3543: PUSH
3544: LD_VAR 0 2
3548: PPUSH
3549: LD_INT 1
3551: PPUSH
3552: CALL_OW 3
3556: ST_TO_ADDR
3557: GO 3536
3559: POP
3560: POP
// end ;
3561: GO 3036
3563: POP
3564: POP
// end ;
3565: GO 3007
// if mechanic_used then
3567: LD_VAR 0 15
3571: IFFALSE 3668
// begin repeat wait ( 0 0$1 ) ;
3573: LD_INT 35
3575: PPUSH
3576: CALL_OW 67
// until not GetCargo ( collectors , mat_cans ) or not collectors ;
3580: LD_VAR 0 10
3584: PPUSH
3585: LD_INT 1
3587: PPUSH
3588: CALL_OW 289
3592: NOT
3593: PUSH
3594: LD_VAR 0 10
3598: NOT
3599: OR
3600: IFFALSE 3573
// drivers := MCT_ResetTag ( base , mct_collect_crates ) ;
3602: LD_ADDR_VAR 0 13
3606: PUSH
3607: LD_VAR 0 1
3611: PPUSH
3612: LD_EXP 34
3616: PPUSH
3617: CALL 6460 0 2
3621: ST_TO_ADDR
// if drivers then
3622: LD_VAR 0 13
3626: IFFALSE 3654
// for i in drivers do
3628: LD_ADDR_VAR 0 4
3632: PUSH
3633: LD_VAR 0 13
3637: PUSH
3638: FOR_IN
3639: IFFALSE 3652
// ComExit ( i ) ;
3641: LD_VAR 0 4
3645: PPUSH
3646: CALL 44765 0 1
3650: GO 3638
3652: POP
3653: POP
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3654: LD_VAR 0 1
3658: PPUSH
3659: LD_EXP 36
3663: PPUSH
3664: CALL 8023 0 2
// end ; end else
3668: GO 4232
// begin apes := MC_GetByClass ( base , class_apeman_engineer , mct_none ) ;
3670: LD_ADDR_VAR 0 8
3674: PUSH
3675: LD_VAR 0 1
3679: PPUSH
3680: LD_INT 16
3682: PPUSH
3683: LD_EXP 31
3687: PPUSH
3688: CALL 7353 0 3
3692: ST_TO_ADDR
// if apes then
3693: LD_VAR 0 8
3697: IFFALSE 3715
// collectors := collectors union apes ;
3699: LD_ADDR_VAR 0 10
3703: PUSH
3704: LD_VAR 0 10
3708: PUSH
3709: LD_VAR 0 8
3713: UNION
3714: ST_TO_ADDR
// engs := MC_GetByClass ( base , class_engineer , mct_none ) ;
3715: LD_ADDR_VAR 0 9
3719: PUSH
3720: LD_VAR 0 1
3724: PPUSH
3725: LD_INT 2
3727: PPUSH
3728: LD_EXP 31
3732: PPUSH
3733: CALL 7353 0 3
3737: ST_TO_ADDR
// if engs then
3738: LD_VAR 0 9
3742: IFFALSE 3760
// collectors := collectors union engs ;
3744: LD_ADDR_VAR 0 10
3748: PUSH
3749: LD_VAR 0 10
3753: PUSH
3754: LD_VAR 0 9
3758: UNION
3759: ST_TO_ADDR
// if not collectors then
3760: LD_VAR 0 10
3764: NOT
3765: IFFALSE 3865
// begin engs := MC_GetBestForClass ( base , 2 , 3 ) ;
3767: LD_ADDR_VAR 0 9
3771: PUSH
3772: LD_VAR 0 1
3776: PPUSH
3777: LD_INT 2
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL 6615 0 3
3787: ST_TO_ADDR
// if engs then
3788: LD_VAR 0 9
3792: IFFALSE 3811
// MC_ChangeClass ( base , 2 , engs ) ;
3794: LD_VAR 0 1
3798: PPUSH
3799: LD_INT 2
3801: PPUSH
3802: LD_VAR 0 9
3806: PPUSH
3807: CALL 6845 0 3
// repeat wait ( 0 0$1 ) ;
3811: LD_INT 35
3813: PPUSH
3814: CALL_OW 67
// if not UnitFilter ( engs , [ f_ok ] ) then
3818: LD_VAR 0 9
3822: PPUSH
3823: LD_INT 50
3825: PUSH
3826: EMPTY
3827: LIST
3828: PPUSH
3829: CALL_OW 72
3833: NOT
3834: IFFALSE 3838
// break ;
3836: GO 3865
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
3838: LD_VAR 0 9
3842: PPUSH
3843: LD_INT 25
3845: PUSH
3846: LD_INT 2
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PPUSH
3853: CALL_OW 72
3857: PUSH
3858: LD_VAR 0 9
3862: EQUAL
3863: IFFALSE 3811
// end ; if not collectors then
3865: LD_VAR 0 10
3869: NOT
3870: IFFALSE 3888
// begin MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3872: LD_VAR 0 1
3876: PPUSH
3877: LD_EXP 36
3881: PPUSH
3882: CALL 8023 0 2
// exit ;
3886: GO 4232
// end ; if collectors > 5 then
3888: LD_VAR 0 10
3892: PUSH
3893: LD_INT 5
3895: GREATER
3896: IFFALSE 3952
// for i := collectors downto 5 do
3898: LD_ADDR_VAR 0 4
3902: PUSH
3903: DOUBLE
3904: LD_VAR 0 10
3908: INC
3909: ST_TO_ADDR
3910: LD_INT 5
3912: PUSH
3913: FOR_DOWNTO
3914: IFFALSE 3950
// begin SetTag ( i , 0 ) ;
3916: LD_VAR 0 4
3920: PPUSH
3921: LD_INT 0
3923: PPUSH
3924: CALL_OW 109
// collectors := Delete ( collectors , i ) ;
3928: LD_ADDR_VAR 0 10
3932: PUSH
3933: LD_VAR 0 10
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: CALL_OW 3
3947: ST_TO_ADDR
// end ;
3948: GO 3913
3950: POP
3951: POP
// ComExitAll ( collectors ) ;
3952: LD_VAR 0 10
3956: PPUSH
3957: CALL 44848 0 1
// MCT_SetTag ( collectors , mct_collect_crates ) ;
3961: LD_VAR 0 10
3965: PPUSH
3966: LD_EXP 34
3970: PPUSH
3971: CALL 6526 0 2
// while crates and collectors do
3975: LD_VAR 0 2
3979: PUSH
3980: LD_VAR 0 10
3984: AND
3985: IFFALSE 4204
// begin wait ( 0 0$1 ) ;
3987: LD_INT 35
3989: PPUSH
3990: CALL_OW 67
// amount := GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3994: LD_ADDR_VAR 0 6
3998: PUSH
3999: LD_VAR 0 2
4003: PUSH
4004: LD_INT 1
4006: ARRAY
4007: PPUSH
4008: LD_VAR 0 2
4012: PUSH
4013: LD_INT 2
4015: ARRAY
4016: PPUSH
4017: CALL_OW 284
4021: ST_TO_ADDR
// j := 0 ;
4022: LD_ADDR_VAR 0 5
4026: PUSH
4027: LD_INT 0
4029: ST_TO_ADDR
// for i in collectors do
4030: LD_ADDR_VAR 0 4
4034: PUSH
4035: LD_VAR 0 10
4039: PUSH
4040: FOR_IN
4041: IFFALSE 4137
// begin if IsDead ( i ) then
4043: LD_VAR 0 4
4047: PPUSH
4048: CALL_OW 301
4052: IFFALSE 4070
// collectors := collectors diff i ;
4054: LD_ADDR_VAR 0 10
4058: PUSH
4059: LD_VAR 0 10
4063: PUSH
4064: LD_VAR 0 4
4068: DIFF
4069: ST_TO_ADDR
// if j < amount and not HasTask ( i ) then
4070: LD_VAR 0 5
4074: PUSH
4075: LD_VAR 0 6
4079: LESS
4080: PUSH
4081: LD_VAR 0 4
4085: PPUSH
4086: CALL_OW 314
4090: NOT
4091: AND
4092: IFFALSE 4135
// begin j := j + 1 ;
4094: LD_ADDR_VAR 0 5
4098: PUSH
4099: LD_VAR 0 5
4103: PUSH
4104: LD_INT 1
4106: PLUS
4107: ST_TO_ADDR
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
4108: LD_VAR 0 4
4112: PPUSH
4113: LD_VAR 0 2
4117: PUSH
4118: LD_INT 1
4120: ARRAY
4121: PPUSH
4122: LD_VAR 0 2
4126: PUSH
4127: LD_INT 2
4129: ARRAY
4130: PPUSH
4131: CALL_OW 117
// end ; end ;
4135: GO 4040
4137: POP
4138: POP
// if not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) then
4139: LD_VAR 0 2
4143: PUSH
4144: LD_INT 1
4146: ARRAY
4147: PPUSH
4148: LD_VAR 0 2
4152: PUSH
4153: LD_INT 2
4155: ARRAY
4156: PPUSH
4157: CALL_OW 284
4161: NOT
4162: IFFALSE 4202
// for j := 1 to 2 do
4164: LD_ADDR_VAR 0 5
4168: PUSH
4169: DOUBLE
4170: LD_INT 1
4172: DEC
4173: ST_TO_ADDR
4174: LD_INT 2
4176: PUSH
4177: FOR_TO
4178: IFFALSE 4200
// crates := Delete ( crates , 1 ) ;
4180: LD_ADDR_VAR 0 2
4184: PUSH
4185: LD_VAR 0 2
4189: PPUSH
4190: LD_INT 1
4192: PPUSH
4193: CALL_OW 3
4197: ST_TO_ADDR
4198: GO 4177
4200: POP
4201: POP
// end ;
4202: GO 3975
// MCT_ResetTag ( base , mct_collect_crates ) ;
4204: LD_VAR 0 1
4208: PPUSH
4209: LD_EXP 34
4213: PPUSH
4214: CALL 6460 0 2
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
4218: LD_VAR 0 1
4222: PPUSH
4223: LD_EXP 36
4227: PPUSH
4228: CALL 8023 0 2
// end ; end ;
4232: LD_VAR 0 3
4236: RET
// export function MC_Build ( base ) ; var depot , btype , x , y , d , engs ; begin
4237: LD_INT 0
4239: PPUSH
4240: PPUSH
4241: PPUSH
4242: PPUSH
4243: PPUSH
4244: PPUSH
4245: PPUSH
// if MCTM_HasActiveTask ( base , mctm_build ) or not mc_build_list [ base ] or not MC_GetDepot ( base ) then
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_EXP 37
4255: PPUSH
4256: CALL 7929 0 2
4260: PUSH
4261: LD_EXP 14
4265: PUSH
4266: LD_VAR 0 1
4270: ARRAY
4271: NOT
4272: OR
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL 7550 0 1
4283: NOT
4284: OR
4285: IFFALSE 4289
// exit ;
4287: GO 4840
// MCTM_SetActiveTask ( base , mctm_build ) ;
4289: LD_VAR 0 1
4293: PPUSH
4294: LD_EXP 37
4298: PPUSH
4299: CALL 7959 0 2
// engs := MC_GetByClass ( base , 2 , mct_none ) ;
4303: LD_ADDR_VAR 0 8
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_INT 2
4315: PPUSH
4316: LD_EXP 31
4320: PPUSH
4321: CALL 7353 0 3
4325: ST_TO_ADDR
// if not engs then
4326: LD_VAR 0 8
4330: NOT
4331: IFFALSE 4443
// begin engs := MC_GetBestForClass ( base , 2 , 6 ) ;
4333: LD_ADDR_VAR 0 8
4337: PUSH
4338: LD_VAR 0 1
4342: PPUSH
4343: LD_INT 2
4345: PPUSH
4346: LD_INT 6
4348: PPUSH
4349: CALL 6615 0 3
4353: ST_TO_ADDR
// if not engs then
4354: LD_VAR 0 8
4358: NOT
4359: IFFALSE 4377
// begin MCTM_DeleteActiveTask ( base , mctm_build ) ;
4361: LD_VAR 0 1
4365: PPUSH
4366: LD_EXP 37
4370: PPUSH
4371: CALL 8023 0 2
// exit ;
4375: GO 4840
// end ; MC_ChangeClass ( base , 2 , engs ) ;
4377: LD_VAR 0 1
4381: PPUSH
4382: LD_INT 2
4384: PPUSH
4385: LD_VAR 0 8
4389: PPUSH
4390: CALL 6845 0 3
// repeat wait ( 0 0$1 ) ;
4394: LD_INT 35
4396: PPUSH
4397: CALL_OW 67
// if not mc_people [ base ] then
4401: LD_EXP 9
4405: PUSH
4406: LD_VAR 0 1
4410: ARRAY
4411: NOT
4412: IFFALSE 4416
// exit ;
4414: GO 4840
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
4416: LD_VAR 0 8
4420: PPUSH
4421: LD_INT 25
4423: PUSH
4424: LD_INT 2
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 72
4435: PUSH
4436: LD_VAR 0 8
4440: EQUAL
4441: IFFALSE 4394
// end ; ComExitAll ( engs ) ;
4443: LD_VAR 0 8
4447: PPUSH
4448: CALL 44848 0 1
// MCT_SetTag ( engs , mct_build ) ;
4452: LD_VAR 0 8
4456: PPUSH
4457: LD_EXP 33
4461: PPUSH
4462: CALL 6526 0 2
// btype := mc_build_list [ base ] [ 1 ] [ 1 ] ;
4466: LD_ADDR_VAR 0 4
4470: PUSH
4471: LD_EXP 14
4475: PUSH
4476: LD_VAR 0 1
4480: ARRAY
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PUSH
4486: LD_INT 1
4488: ARRAY
4489: ST_TO_ADDR
// x := mc_build_list [ base ] [ 1 ] [ 2 ] ;
4490: LD_ADDR_VAR 0 5
4494: PUSH
4495: LD_EXP 14
4499: PUSH
4500: LD_VAR 0 1
4504: ARRAY
4505: PUSH
4506: LD_INT 1
4508: ARRAY
4509: PUSH
4510: LD_INT 2
4512: ARRAY
4513: ST_TO_ADDR
// y := mc_build_list [ base ] [ 1 ] [ 3 ] ;
4514: LD_ADDR_VAR 0 6
4518: PUSH
4519: LD_EXP 14
4523: PUSH
4524: LD_VAR 0 1
4528: ARRAY
4529: PUSH
4530: LD_INT 1
4532: ARRAY
4533: PUSH
4534: LD_INT 3
4536: ARRAY
4537: ST_TO_ADDR
// d := mc_build_list [ base ] [ 1 ] [ 4 ] ;
4538: LD_ADDR_VAR 0 7
4542: PUSH
4543: LD_EXP 14
4547: PUSH
4548: LD_VAR 0 1
4552: ARRAY
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: PUSH
4558: LD_INT 4
4560: ARRAY
4561: ST_TO_ADDR
// if GetType ( HexInfo ( x , y ) ) = unit_building then
4562: LD_VAR 0 5
4566: PPUSH
4567: LD_VAR 0 6
4571: PPUSH
4572: CALL_OW 428
4576: PPUSH
4577: CALL_OW 247
4581: PUSH
4582: LD_INT 3
4584: EQUAL
4585: IFFALSE 4620
// begin wait ( 0 0$1 ) ;
4587: LD_INT 35
4589: PPUSH
4590: CALL_OW 67
// ComComplete ( engs , HexInfo ( x , y ) ) ;
4594: LD_VAR 0 8
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: LD_VAR 0 6
4608: PPUSH
4609: CALL_OW 428
4613: PPUSH
4614: CALL 15871 0 2
// end else
4618: GO 4840
// begin depot := NearestUnitToXY ( MC_GetDepot ( base ) , x , y ) ;
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: LD_VAR 0 1
4629: PPUSH
4630: CALL 7550 0 1
4634: PPUSH
4635: LD_VAR 0 5
4639: PPUSH
4640: LD_VAR 0 6
4644: PPUSH
4645: CALL_OW 73
4649: ST_TO_ADDR
// if not HexInfo ( x , y ) and CanBeBuilt ( depot , btype , x , y , d ) then
4650: LD_VAR 0 5
4654: PPUSH
4655: LD_VAR 0 6
4659: PPUSH
4660: CALL_OW 428
4664: NOT
4665: PUSH
4666: LD_VAR 0 3
4670: PPUSH
4671: LD_VAR 0 4
4675: PPUSH
4676: LD_VAR 0 5
4680: PPUSH
4681: LD_VAR 0 6
4685: PPUSH
4686: LD_VAR 0 7
4690: PPUSH
4691: CALL 20749 0 5
4695: AND
4696: IFFALSE 4729
// ComBuild ( engs , btype , x , y , d ) else
4698: LD_VAR 0 8
4702: PPUSH
4703: LD_VAR 0 4
4707: PPUSH
4708: LD_VAR 0 5
4712: PPUSH
4713: LD_VAR 0 6
4717: PPUSH
4718: LD_VAR 0 7
4722: PPUSH
4723: CALL_OW 145
4727: GO 4840
// begin if GetType ( HexInfo ( x , y ) ) <> unit_building then
4729: LD_VAR 0 5
4733: PPUSH
4734: LD_VAR 0 6
4738: PPUSH
4739: CALL_OW 428
4743: PPUSH
4744: CALL_OW 247
4748: PUSH
4749: LD_INT 3
4751: NONEQUAL
4752: IFFALSE 4812
// begin TryClearPlaceForBuilding ( btype , x , y , d , mc_buildings [ base ] , engs , mc_parking [ base ] ) ;
4754: LD_VAR 0 4
4758: PPUSH
4759: LD_VAR 0 5
4763: PPUSH
4764: LD_VAR 0 6
4768: PPUSH
4769: LD_VAR 0 7
4773: PPUSH
4774: LD_EXP 10
4778: PUSH
4779: LD_VAR 0 1
4783: ARRAY
4784: PPUSH
4785: LD_VAR 0 8
4789: PPUSH
4790: LD_EXP 28
4794: PUSH
4795: LD_VAR 0 1
4799: ARRAY
4800: PPUSH
4801: CALL 19892 0 7
// wait ( 0 0$10 ) ;
4805: LD_INT 350
4807: PPUSH
4808: CALL_OW 67
// end ; MCTM_DeleteActiveTask ( base , mctm_build ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_EXP 37
4821: PPUSH
4822: CALL 8023 0 2
// MCT_ResetTag ( base , mctm_build ) ;
4826: LD_VAR 0 1
4830: PPUSH
4831: LD_EXP 37
4835: PPUSH
4836: CALL 6460 0 2
// end ; end ; end ; end_of_file
4840: LD_VAR 0 2
4844: RET
// export mce_start , mce_monitor_base , mce_ ; export function MCE_InitEvents ( ) ; begin
4845: LD_INT 0
4847: PPUSH
// mce_start := 1 ;
4848: LD_ADDR_EXP 1
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// mce_monitor_base := 2 ;
4856: LD_ADDR_EXP 2
4860: PUSH
4861: LD_INT 2
4863: ST_TO_ADDR
// end ;
4864: LD_VAR 0 1
4868: RET
// export function MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4869: LD_INT 0
4871: PPUSH
// case event of mce_start :
4872: LD_VAR 0 1
4876: PUSH
4877: LD_EXP 1
4881: DOUBLE
4882: EQUAL
4883: IFTRUE 4887
4885: GO 4894
4887: POP
// MC_Monitor ( ) ; mce_monitor_base :
4888: CALL 2539 0 0
4892: GO 4917
4894: LD_EXP 2
4898: DOUBLE
4899: EQUAL
4900: IFTRUE 4904
4902: GO 4916
4904: POP
// MC_MonitorBase ( p1 ) ; end ;
4905: LD_VAR 0 2
4909: PPUSH
4910: CALL 2663 0 1
4914: GO 4917
4916: POP
// end ;
4917: LD_VAR 0 8
4921: RET
// export function MCE_ClassChanged ( unit , old_class , new_class ) ; begin
4922: LD_INT 0
4924: PPUSH
// SetTag ( unit , mct_none ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: LD_EXP 31
4934: PPUSH
4935: CALL_OW 109
// end ;
4939: LD_VAR 0 4
4943: RET
// export function MCE_UnitDestroyed ( un ) ; begin
4944: LD_INT 0
4946: PPUSH
// case GetType ( un ) of unit_human :
4947: LD_VAR 0 1
4951: PPUSH
4952: CALL_OW 247
4956: PUSH
4957: LD_INT 1
4959: DOUBLE
4960: EQUAL
4961: IFTRUE 4965
4963: GO 4977
4965: POP
// MCE_HumanKilled ( un ) ; unit_building :
4966: LD_VAR 0 1
4970: PPUSH
4971: CALL 5003 0 1
4975: GO 4998
4977: LD_INT 3
4979: DOUBLE
4980: EQUAL
4981: IFTRUE 4985
4983: GO 4997
4985: POP
// MCE_BuildingDestroyed ( un ) ; end ;
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL 5560 0 1
4995: GO 4998
4997: POP
// end ;
4998: LD_VAR 0 2
5002: RET
// export function MCE_HumanKilled ( un ) ; var i ; begin
5003: LD_INT 0
5005: PPUSH
5006: PPUSH
// for i := 1 to mc_people do
5007: LD_ADDR_VAR 0 3
5011: PUSH
5012: DOUBLE
5013: LD_INT 1
5015: DEC
5016: ST_TO_ADDR
5017: LD_EXP 9
5021: PUSH
5022: FOR_TO
5023: IFFALSE 5082
// if un in mc_people [ i ] then
5025: LD_VAR 0 1
5029: PUSH
5030: LD_EXP 9
5034: PUSH
5035: LD_VAR 0 3
5039: ARRAY
5040: IN
5041: IFFALSE 5080
// mc_people := Replace ( mc_people , i , mc_people [ i ] diff un ) ;
5043: LD_ADDR_EXP 9
5047: PUSH
5048: LD_EXP 9
5052: PPUSH
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_EXP 9
5062: PUSH
5063: LD_VAR 0 3
5067: ARRAY
5068: PUSH
5069: LD_VAR 0 1
5073: DIFF
5074: PPUSH
5075: CALL_OW 1
5079: ST_TO_ADDR
5080: GO 5022
5082: POP
5083: POP
// end ;
5084: LD_VAR 0 2
5088: RET
// export function MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ; var base ; begin
5089: LD_INT 0
5091: PPUSH
5092: PPUSH
// if GetTag ( driver ) = mct_collect_crates then
5093: LD_VAR 0 1
5097: PPUSH
5098: CALL_OW 110
5102: PUSH
5103: LD_EXP 34
5107: EQUAL
5108: IFFALSE 5157
// begin base := MC_GetHumanBase ( driver ) ;
5110: LD_ADDR_VAR 0 6
5114: PUSH
5115: LD_VAR 0 1
5119: PPUSH
5120: CALL 6782 0 1
5124: ST_TO_ADDR
// if base then
5125: LD_VAR 0 6
5129: IFFALSE 5157
// begin SetTag ( driver , 0 ) ;
5131: LD_VAR 0 1
5135: PPUSH
5136: LD_INT 0
5138: PPUSH
5139: CALL_OW 109
// MC_Retreat ( base , driver ) ;
5143: LD_VAR 0 6
5147: PPUSH
5148: LD_VAR 0 1
5152: PPUSH
5153: CALL 7813 0 2
// end ; end ; end ;
5157: LD_VAR 0 5
5161: RET
// export function MCE_BuildingComplete ( building ) ; var base , btype , x , y , d ; begin
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
5168: PPUSH
5169: PPUSH
// btype := GetBType ( building ) ;
5170: LD_ADDR_VAR 0 4
5174: PUSH
5175: LD_VAR 0 1
5179: PPUSH
5180: CALL_OW 266
5184: ST_TO_ADDR
// x := GetX ( building ) ;
5185: LD_ADDR_VAR 0 5
5189: PUSH
5190: LD_VAR 0 1
5194: PPUSH
5195: CALL_OW 250
5199: ST_TO_ADDR
// y := GetY ( building ) ;
5200: LD_ADDR_VAR 0 6
5204: PUSH
5205: LD_VAR 0 1
5209: PPUSH
5210: CALL_OW 251
5214: ST_TO_ADDR
// d := GetDir ( building ) ;
5215: LD_ADDR_VAR 0 7
5219: PUSH
5220: LD_VAR 0 1
5224: PPUSH
5225: CALL_OW 254
5229: ST_TO_ADDR
// for base = 1 to mc_build_list do
5230: LD_ADDR_VAR 0 3
5234: PUSH
5235: DOUBLE
5236: LD_INT 1
5238: DEC
5239: ST_TO_ADDR
5240: LD_EXP 14
5244: PUSH
5245: FOR_TO
5246: IFFALSE 5553
// begin if not mc_build_list [ base ] then
5248: LD_EXP 14
5252: PUSH
5253: LD_VAR 0 3
5257: ARRAY
5258: NOT
5259: IFFALSE 5263
// continue ;
5261: GO 5245
// if CompareArrayValues ( [ btype , x , y , d ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5263: LD_VAR 0 4
5267: PUSH
5268: LD_VAR 0 5
5272: PUSH
5273: LD_VAR 0 6
5277: PUSH
5278: LD_VAR 0 7
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: PPUSH
5289: LD_EXP 14
5293: PUSH
5294: LD_VAR 0 3
5298: ARRAY
5299: PUSH
5300: LD_INT 1
5302: ARRAY
5303: PPUSH
5304: CALL 19316 0 2
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 255
5318: PUSH
5319: LD_EXP 6
5323: PUSH
5324: LD_VAR 0 3
5328: ARRAY
5329: EQUAL
5330: AND
5331: IFFALSE 5551
// begin if mc_build_list [ base ] [ 1 ] > 4 then
5333: LD_EXP 14
5337: PUSH
5338: LD_VAR 0 3
5342: ARRAY
5343: PUSH
5344: LD_INT 1
5346: ARRAY
5347: PUSH
5348: LD_INT 4
5350: GREATER
5351: IFFALSE 5424
// begin repeat wait ( 0 0$1 ) ;
5353: LD_INT 35
5355: PPUSH
5356: CALL_OW 67
// until not UpgradeCost ( mc_build_list [ base ] [ 1 ] [ 5 ] ) or not IsDead ( building ) ;
5360: LD_EXP 14
5364: PUSH
5365: LD_VAR 0 3
5369: ARRAY
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: PUSH
5375: LD_INT 5
5377: ARRAY
5378: PPUSH
5379: CALL 19552 0 1
5383: NOT
5384: PUSH
5385: LD_VAR 0 1
5389: PPUSH
5390: CALL_OW 301
5394: NOT
5395: OR
5396: IFFALSE 5353
// if IsDead ( building ) then
5398: LD_VAR 0 1
5402: PPUSH
5403: CALL_OW 301
5407: IFFALSE 5413
// exit ;
5409: POP
5410: POP
5411: GO 5555
// ComUpgrade ( building ) ;
5413: LD_VAR 0 1
5417: PPUSH
5418: CALL_OW 146
// end else
5422: GO 5463
// mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5424: LD_ADDR_EXP 14
5428: PUSH
5429: LD_EXP 14
5433: PPUSH
5434: LD_VAR 0 3
5438: PPUSH
5439: LD_EXP 14
5443: PUSH
5444: LD_VAR 0 3
5448: ARRAY
5449: PPUSH
5450: LD_INT 1
5452: PPUSH
5453: CALL_OW 3
5457: PPUSH
5458: CALL_OW 1
5462: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , base , Replace ( mc_buildings [ base ] , mc_buildings [ base ] + 1 , building ) ) ;
5463: LD_ADDR_EXP 10
5467: PUSH
5468: LD_EXP 10
5472: PPUSH
5473: LD_VAR 0 3
5477: PPUSH
5478: LD_EXP 10
5482: PUSH
5483: LD_VAR 0 3
5487: ARRAY
5488: PPUSH
5489: LD_EXP 10
5493: PUSH
5494: LD_VAR 0 3
5498: ARRAY
5499: PUSH
5500: LD_INT 1
5502: PLUS
5503: PPUSH
5504: LD_VAR 0 1
5508: PPUSH
5509: CALL_OW 1
5513: PPUSH
5514: CALL_OW 1
5518: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_EXP 37
5528: PPUSH
5529: CALL 8023 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5533: LD_VAR 0 3
5537: PPUSH
5538: LD_EXP 37
5542: PPUSH
5543: CALL 6460 0 2
// exit ;
5547: POP
5548: POP
5549: GO 5555
// end ; end ;
5551: GO 5245
5553: POP
5554: POP
// end ;
5555: LD_VAR 0 2
5559: RET
// export function MCE_BuildingDestroyed ( building ) ; var base , x , y , d , btype ; begin
5560: LD_INT 0
5562: PPUSH
5563: PPUSH
5564: PPUSH
5565: PPUSH
5566: PPUSH
5567: PPUSH
// btype := GetBType ( building ) ;
5568: LD_ADDR_VAR 0 7
5572: PUSH
5573: LD_VAR 0 1
5577: PPUSH
5578: CALL_OW 266
5582: ST_TO_ADDR
// x := GetX ( building ) ;
5583: LD_ADDR_VAR 0 4
5587: PUSH
5588: LD_VAR 0 1
5592: PPUSH
5593: CALL_OW 250
5597: ST_TO_ADDR
// y := GetY ( building ) ;
5598: LD_ADDR_VAR 0 5
5602: PUSH
5603: LD_VAR 0 1
5607: PPUSH
5608: CALL_OW 251
5612: ST_TO_ADDR
// d := GetDir ( building ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 1
5622: PPUSH
5623: CALL_OW 254
5627: ST_TO_ADDR
// for base := 1 to mc_buildings do
5628: LD_ADDR_VAR 0 3
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_EXP 10
5642: PUSH
5643: FOR_TO
5644: IFFALSE 5874
// begin if not mc_buildings [ base ] then
5646: LD_EXP 10
5650: PUSH
5651: LD_VAR 0 3
5655: ARRAY
5656: NOT
5657: IFFALSE 5661
// continue ;
5659: GO 5643
// if building in mc_buildings [ base ] then
5661: LD_VAR 0 1
5665: PUSH
5666: LD_EXP 10
5670: PUSH
5671: LD_VAR 0 3
5675: ARRAY
5676: IN
5677: IFFALSE 5872
// begin mc_buildings := Replace ( mc_buildings , base , mc_buildings [ base ] diff building ) ;
5679: LD_ADDR_EXP 10
5683: PUSH
5684: LD_EXP 10
5688: PPUSH
5689: LD_VAR 0 3
5693: PPUSH
5694: LD_EXP 10
5698: PUSH
5699: LD_VAR 0 3
5703: ARRAY
5704: PUSH
5705: LD_VAR 0 1
5709: DIFF
5710: PPUSH
5711: CALL_OW 1
5715: ST_TO_ADDR
// if mc_build_list [ base ] then
5716: LD_EXP 14
5720: PUSH
5721: LD_VAR 0 3
5725: ARRAY
5726: IFFALSE 5810
// if mc_build_list [ base ] [ 1 ] [ 1 ] = btype and mc_build_list [ base ] [ 1 ] [ 2 ] = x and mc_build_list [ base ] [ 1 ] [ 3 ] = y then
5728: LD_EXP 14
5732: PUSH
5733: LD_VAR 0 3
5737: ARRAY
5738: PUSH
5739: LD_INT 1
5741: ARRAY
5742: PUSH
5743: LD_INT 1
5745: ARRAY
5746: PUSH
5747: LD_VAR 0 7
5751: EQUAL
5752: PUSH
5753: LD_EXP 14
5757: PUSH
5758: LD_VAR 0 3
5762: ARRAY
5763: PUSH
5764: LD_INT 1
5766: ARRAY
5767: PUSH
5768: LD_INT 2
5770: ARRAY
5771: PUSH
5772: LD_VAR 0 4
5776: EQUAL
5777: AND
5778: PUSH
5779: LD_EXP 14
5783: PUSH
5784: LD_VAR 0 3
5788: ARRAY
5789: PUSH
5790: LD_INT 1
5792: ARRAY
5793: PUSH
5794: LD_INT 3
5796: ARRAY
5797: PUSH
5798: LD_VAR 0 5
5802: EQUAL
5803: AND
5804: IFFALSE 5810
// exit ;
5806: POP
5807: POP
5808: GO 5876
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] ^ [ btype , x , y , d ] ) ;
5810: LD_ADDR_EXP 14
5814: PUSH
5815: LD_EXP 14
5819: PPUSH
5820: LD_VAR 0 3
5824: PPUSH
5825: LD_EXP 14
5829: PUSH
5830: LD_VAR 0 3
5834: ARRAY
5835: PUSH
5836: LD_VAR 0 7
5840: PUSH
5841: LD_VAR 0 4
5845: PUSH
5846: LD_VAR 0 5
5850: PUSH
5851: LD_VAR 0 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: ADD
5862: PPUSH
5863: CALL_OW 1
5867: ST_TO_ADDR
// exit ;
5868: POP
5869: POP
5870: GO 5876
// end ; end ;
5872: GO 5643
5874: POP
5875: POP
// end ;
5876: LD_VAR 0 2
5880: RET
// export function MCE_BuildingUpgradeComplete ( building ) ; var base , btype , x , y , d ; begin
5881: LD_INT 0
5883: PPUSH
5884: PPUSH
5885: PPUSH
5886: PPUSH
5887: PPUSH
5888: PPUSH
// btype := GetBType ( building ) ;
5889: LD_ADDR_VAR 0 4
5893: PUSH
5894: LD_VAR 0 1
5898: PPUSH
5899: CALL_OW 266
5903: ST_TO_ADDR
// x := GetX ( building ) ;
5904: LD_ADDR_VAR 0 5
5908: PUSH
5909: LD_VAR 0 1
5913: PPUSH
5914: CALL_OW 250
5918: ST_TO_ADDR
// y := GetY ( building ) ;
5919: LD_ADDR_VAR 0 6
5923: PUSH
5924: LD_VAR 0 1
5928: PPUSH
5929: CALL_OW 251
5933: ST_TO_ADDR
// d := GetDir ( building ) ;
5934: LD_ADDR_VAR 0 7
5938: PUSH
5939: LD_VAR 0 1
5943: PPUSH
5944: CALL_OW 254
5948: ST_TO_ADDR
// for base = 1 to mc_build_list do
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: DOUBLE
5955: LD_INT 1
5957: DEC
5958: ST_TO_ADDR
5959: LD_EXP 14
5963: PUSH
5964: FOR_TO
5965: IFFALSE 6135
// begin if not mc_build_list [ base ] then
5967: LD_EXP 14
5971: PUSH
5972: LD_VAR 0 3
5976: ARRAY
5977: NOT
5978: IFFALSE 5982
// continue ;
5980: GO 5964
// if CompareArrayValues ( [ btype - 1 , x , y , d , btype ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5982: LD_VAR 0 4
5986: PUSH
5987: LD_INT 1
5989: MINUS
5990: PUSH
5991: LD_VAR 0 5
5995: PUSH
5996: LD_VAR 0 6
6000: PUSH
6001: LD_VAR 0 7
6005: PUSH
6006: LD_VAR 0 4
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: PPUSH
6018: LD_EXP 14
6022: PUSH
6023: LD_VAR 0 3
6027: ARRAY
6028: PUSH
6029: LD_INT 1
6031: ARRAY
6032: PPUSH
6033: CALL 19316 0 2
6037: PUSH
6038: LD_VAR 0 1
6042: PPUSH
6043: CALL_OW 255
6047: PUSH
6048: LD_EXP 6
6052: PUSH
6053: LD_VAR 0 3
6057: ARRAY
6058: EQUAL
6059: AND
6060: IFFALSE 6133
// begin mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
6062: LD_ADDR_EXP 14
6066: PUSH
6067: LD_EXP 14
6071: PPUSH
6072: LD_VAR 0 3
6076: PPUSH
6077: LD_EXP 14
6081: PUSH
6082: LD_VAR 0 3
6086: ARRAY
6087: PPUSH
6088: LD_INT 1
6090: PPUSH
6091: CALL_OW 3
6095: PPUSH
6096: CALL_OW 1
6100: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
6101: LD_VAR 0 3
6105: PPUSH
6106: LD_EXP 37
6110: PPUSH
6111: CALL 8023 0 2
// MCT_ResetTag ( base , mctm_build ) ;
6115: LD_VAR 0 3
6119: PPUSH
6120: LD_EXP 37
6124: PPUSH
6125: CALL 6460 0 2
// exit ;
6129: POP
6130: POP
6131: GO 6137
// end ; end ;
6133: GO 5964
6135: POP
6136: POP
// end ; end_of_file
6137: LD_VAR 0 2
6141: RET
// export mc_active , mc_debug , mc_bases , mc_tag , mc_task , mc_people , mc_buildings , mc_vehicles , mc_mines , mc_minefields , mc_build_list , mc_produce_list , mc_defense_status , mc_defender , mc_defender_limit , mc_ape , mc_tech , mc_attack , mc_deposits_xy , mc_can_tame , mc_lab_upgrade , mc_crates_area , mc_teleport_exit , mc_allowed_tower_weapons , mc_parking , mc_scan_area , mc_danger ; export function MC_InitVariables ( ) ; begin
6142: LD_INT 0
6144: PPUSH
// mc_bases := [ ] ;
6145: LD_ADDR_EXP 6
6149: PUSH
6150: EMPTY
6151: ST_TO_ADDR
// mc_tag := [ ] ;
6152: LD_ADDR_EXP 7
6156: PUSH
6157: EMPTY
6158: ST_TO_ADDR
// mc_task := [ ] ;
6159: LD_ADDR_EXP 8
6163: PUSH
6164: EMPTY
6165: ST_TO_ADDR
// mc_people := [ ] ;
6166: LD_ADDR_EXP 9
6170: PUSH
6171: EMPTY
6172: ST_TO_ADDR
// mc_buildings := [ ] ;
6173: LD_ADDR_EXP 10
6177: PUSH
6178: EMPTY
6179: ST_TO_ADDR
// mc_vehicles := [ ] ;
6180: LD_ADDR_EXP 11
6184: PUSH
6185: EMPTY
6186: ST_TO_ADDR
// mc_mines := [ ] ;
6187: LD_ADDR_EXP 12
6191: PUSH
6192: EMPTY
6193: ST_TO_ADDR
// mc_minefields := [ ] ;
6194: LD_ADDR_EXP 13
6198: PUSH
6199: EMPTY
6200: ST_TO_ADDR
// mc_build_list := [ ] ;
6201: LD_ADDR_EXP 14
6205: PUSH
6206: EMPTY
6207: ST_TO_ADDR
// mc_produce_list := [ ] ;
6208: LD_ADDR_EXP 15
6212: PUSH
6213: EMPTY
6214: ST_TO_ADDR
// mc_defense_status := [ ] ;
6215: LD_ADDR_EXP 16
6219: PUSH
6220: EMPTY
6221: ST_TO_ADDR
// mc_defender := [ ] ;
6222: LD_ADDR_EXP 17
6226: PUSH
6227: EMPTY
6228: ST_TO_ADDR
// mc_defender_limit := [ ] ;
6229: LD_ADDR_EXP 18
6233: PUSH
6234: EMPTY
6235: ST_TO_ADDR
// mc_ape := [ ] ;
6236: LD_ADDR_EXP 19
6240: PUSH
6241: EMPTY
6242: ST_TO_ADDR
// mc_tech := [ ] ;
6243: LD_ADDR_EXP 20
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// mc_attack := [ ] ;
6250: LD_ADDR_EXP 21
6254: PUSH
6255: EMPTY
6256: ST_TO_ADDR
// mc_deposits_xy := [ ] ;
6257: LD_ADDR_EXP 22
6261: PUSH
6262: EMPTY
6263: ST_TO_ADDR
// mc_can_tame := [ ] ;
6264: LD_ADDR_EXP 23
6268: PUSH
6269: EMPTY
6270: ST_TO_ADDR
// mc_crates_area := [ ] ;
6271: LD_ADDR_EXP 25
6275: PUSH
6276: EMPTY
6277: ST_TO_ADDR
// mc_teleport_exit := [ ] ;
6278: LD_ADDR_EXP 26
6282: PUSH
6283: EMPTY
6284: ST_TO_ADDR
// mc_allowed_tower_weapons := [ ] ;
6285: LD_ADDR_EXP 27
6289: PUSH
6290: EMPTY
6291: ST_TO_ADDR
// mc_parking := [ ] ;
6292: LD_ADDR_EXP 28
6296: PUSH
6297: EMPTY
6298: ST_TO_ADDR
// mc_scan_area := [ ] ;
6299: LD_ADDR_EXP 29
6303: PUSH
6304: EMPTY
6305: ST_TO_ADDR
// mc_danger := [ ] ;
6306: LD_ADDR_EXP 30
6310: PUSH
6311: EMPTY
6312: ST_TO_ADDR
// end ; end_of_file
6313: LD_VAR 0 1
6317: RET
// export mct_none , mct_change_class , mct_build , mct_collect_crates , mct_heal ; export function MCT_InitTags ; begin
6318: LD_INT 0
6320: PPUSH
// mct_none := 0 ;
6321: LD_ADDR_EXP 31
6325: PUSH
6326: LD_INT 0
6328: ST_TO_ADDR
// mct_change_class := 1 ;
6329: LD_ADDR_EXP 32
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// mct_build := 2 ;
6337: LD_ADDR_EXP 33
6341: PUSH
6342: LD_INT 2
6344: ST_TO_ADDR
// mct_collect_crates := 3 ;
6345: LD_ADDR_EXP 34
6349: PUSH
6350: LD_INT 3
6352: ST_TO_ADDR
// mct_heal := 4 ;
6353: LD_ADDR_EXP 35
6357: PUSH
6358: LD_INT 4
6360: ST_TO_ADDR
// end ;
6361: LD_VAR 0 1
6365: RET
// export function MCT_GetByTag ( base , tag ) ; var i ; begin
6366: LD_INT 0
6368: PPUSH
6369: PPUSH
// result := [ ] ;
6370: LD_ADDR_VAR 0 3
6374: PUSH
6375: EMPTY
6376: ST_TO_ADDR
// if not base then
6377: LD_VAR 0 1
6381: NOT
6382: IFFALSE 6386
// exit ;
6384: GO 6455
// for i in mc_people [ base ] do
6386: LD_ADDR_VAR 0 4
6390: PUSH
6391: LD_EXP 9
6395: PUSH
6396: LD_VAR 0 1
6400: ARRAY
6401: PUSH
6402: FOR_IN
6403: IFFALSE 6453
// if GetTag ( i ) = tag then
6405: LD_VAR 0 4
6409: PPUSH
6410: CALL_OW 110
6414: PUSH
6415: LD_VAR 0 2
6419: EQUAL
6420: IFFALSE 6451
// result := Replace ( result , result + 1 , i ) ;
6422: LD_ADDR_VAR 0 3
6426: PUSH
6427: LD_VAR 0 3
6431: PPUSH
6432: LD_VAR 0 3
6436: PUSH
6437: LD_INT 1
6439: PLUS
6440: PPUSH
6441: LD_VAR 0 4
6445: PPUSH
6446: CALL_OW 1
6450: ST_TO_ADDR
6451: GO 6402
6453: POP
6454: POP
// end ;
6455: LD_VAR 0 3
6459: RET
// export function MCT_ResetTag ( base , tag ) ; var i ; begin
6460: LD_INT 0
6462: PPUSH
6463: PPUSH
// result := MCT_GetByTag ( base , tag ) ;
6464: LD_ADDR_VAR 0 3
6468: PUSH
6469: LD_VAR 0 1
6473: PPUSH
6474: LD_VAR 0 2
6478: PPUSH
6479: CALL 6366 0 2
6483: ST_TO_ADDR
// if result then
6484: LD_VAR 0 3
6488: IFFALSE 6521
// for i in result do
6490: LD_ADDR_VAR 0 4
6494: PUSH
6495: LD_VAR 0 3
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6519
// SetTag ( i , mct_none ) ;
6503: LD_VAR 0 4
6507: PPUSH
6508: LD_EXP 31
6512: PPUSH
6513: CALL_OW 109
6517: GO 6500
6519: POP
6520: POP
// end ;
6521: LD_VAR 0 3
6525: RET
// export function MCT_SetTag ( units , tag ) ; var i ; begin
6526: LD_INT 0
6528: PPUSH
6529: PPUSH
// if not units then
6530: LD_VAR 0 1
6534: NOT
6535: IFFALSE 6539
// exit ;
6537: GO 6570
// for i in units do
6539: LD_ADDR_VAR 0 4
6543: PUSH
6544: LD_VAR 0 1
6548: PUSH
6549: FOR_IN
6550: IFFALSE 6568
// SetTag ( i , tag ) ;
6552: LD_VAR 0 4
6556: PPUSH
6557: LD_VAR 0 2
6561: PPUSH
6562: CALL_OW 109
6566: GO 6549
6568: POP
6569: POP
// end ; end_of_file
6570: LD_VAR 0 3
6574: RET
// export function MC_Exist ( base ) ; begin
6575: LD_INT 0
6577: PPUSH
// result := mc_bases >= base and mc_bases [ base ] > 0 ;
6578: LD_ADDR_VAR 0 2
6582: PUSH
6583: LD_EXP 6
6587: PUSH
6588: LD_VAR 0 1
6592: GREATEREQUAL
6593: PUSH
6594: LD_EXP 6
6598: PUSH
6599: LD_VAR 0 1
6603: ARRAY
6604: PUSH
6605: LD_INT 0
6607: GREATER
6608: AND
6609: ST_TO_ADDR
// end ;
6610: LD_VAR 0 2
6614: RET
// export function MC_GetBestForClass ( base , class , amount ) ; var i , units ; begin
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
6619: PPUSH
// result := [ ] ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: EMPTY
6626: ST_TO_ADDR
// units := SortBySkill ( UnitFilter ( mc_people [ base ] , [ f_not , [ f_class , class ] ] ) , class ) ;
6627: LD_ADDR_VAR 0 6
6631: PUSH
6632: LD_EXP 9
6636: PUSH
6637: LD_VAR 0 1
6641: ARRAY
6642: PPUSH
6643: LD_INT 3
6645: PUSH
6646: LD_INT 25
6648: PUSH
6649: LD_VAR 0 2
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 72
6666: PPUSH
6667: LD_VAR 0 2
6671: PPUSH
6672: CALL 42883 0 2
6676: ST_TO_ADDR
// if not units then
6677: LD_VAR 0 6
6681: NOT
6682: IFFALSE 6686
// exit ;
6684: GO 6777
// for i := 1 to amount do
6686: LD_ADDR_VAR 0 5
6690: PUSH
6691: DOUBLE
6692: LD_INT 1
6694: DEC
6695: ST_TO_ADDR
6696: LD_VAR 0 3
6700: PUSH
6701: FOR_TO
6702: IFFALSE 6775
// begin if i > units then
6704: LD_VAR 0 5
6708: PUSH
6709: LD_VAR 0 6
6713: GREATER
6714: IFFALSE 6720
// exit ;
6716: POP
6717: POP
6718: GO 6777
// if not GetTag ( units [ i ] ) then
6720: LD_VAR 0 6
6724: PUSH
6725: LD_VAR 0 5
6729: ARRAY
6730: PPUSH
6731: CALL_OW 110
6735: NOT
6736: IFFALSE 6773
// result := Replace ( result , result + 1 , units [ i ] ) ;
6738: LD_ADDR_VAR 0 4
6742: PUSH
6743: LD_VAR 0 4
6747: PPUSH
6748: LD_VAR 0 4
6752: PUSH
6753: LD_INT 1
6755: PLUS
6756: PPUSH
6757: LD_VAR 0 6
6761: PUSH
6762: LD_VAR 0 5
6766: ARRAY
6767: PPUSH
6768: CALL_OW 1
6772: ST_TO_ADDR
// end ;
6773: GO 6701
6775: POP
6776: POP
// end ;
6777: LD_VAR 0 4
6781: RET
// export function MC_GetHumanBase ( human ) ; var i ; begin
6782: LD_INT 0
6784: PPUSH
6785: PPUSH
// for i := 1 to mc_people do
6786: LD_ADDR_VAR 0 3
6790: PUSH
6791: DOUBLE
6792: LD_INT 1
6794: DEC
6795: ST_TO_ADDR
6796: LD_EXP 9
6800: PUSH
6801: FOR_TO
6802: IFFALSE 6838
// if human in mc_people [ i ] then
6804: LD_VAR 0 1
6808: PUSH
6809: LD_EXP 9
6813: PUSH
6814: LD_VAR 0 3
6818: ARRAY
6819: IN
6820: IFFALSE 6836
// begin result := i ;
6822: LD_ADDR_VAR 0 2
6826: PUSH
6827: LD_VAR 0 3
6831: ST_TO_ADDR
// exit ;
6832: POP
6833: POP
6834: GO 6840
// end ;
6836: GO 6801
6838: POP
6839: POP
// end ;
6840: LD_VAR 0 2
6844: RET
// export function MC_ChangeClass ( base , class , units ) ; var i , buildings , b ; begin
6845: LD_INT 0
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
// if not base or not units then
6851: LD_VAR 0 1
6855: NOT
6856: PUSH
6857: LD_VAR 0 3
6861: NOT
6862: OR
6863: IFFALSE 6867
// exit ;
6865: GO 7348
// case class of 1 , 5 , 6 , 7 , 8 :
6867: LD_VAR 0 2
6871: PUSH
6872: LD_INT 1
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6904
6878: LD_INT 5
6880: DOUBLE
6881: EQUAL
6882: IFTRUE 6904
6884: LD_INT 6
6886: DOUBLE
6887: EQUAL
6888: IFTRUE 6904
6890: LD_INT 7
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6904
6896: LD_INT 8
6898: DOUBLE
6899: EQUAL
6900: IFTRUE 6904
6902: GO 6956
6904: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
6905: LD_ADDR_VAR 0 6
6909: PUSH
6910: LD_EXP 10
6914: PUSH
6915: LD_VAR 0 1
6919: ARRAY
6920: PPUSH
6921: LD_INT 2
6923: PUSH
6924: LD_INT 30
6926: PUSH
6927: LD_INT 4
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 30
6936: PUSH
6937: LD_INT 5
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 72
6953: ST_TO_ADDR
6954: GO 7148
6956: LD_INT 2
6958: DOUBLE
6959: EQUAL
6960: IFTRUE 6964
6962: GO 7016
6964: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
6965: LD_ADDR_VAR 0 6
6969: PUSH
6970: LD_EXP 10
6974: PUSH
6975: LD_VAR 0 1
6979: ARRAY
6980: PPUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 0
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 30
6996: PUSH
6997: LD_INT 1
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: PPUSH
7009: CALL_OW 72
7013: ST_TO_ADDR
7014: GO 7148
7016: LD_INT 3
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7076
7024: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
7025: LD_ADDR_VAR 0 6
7029: PUSH
7030: LD_EXP 10
7034: PUSH
7035: LD_VAR 0 1
7039: ARRAY
7040: PPUSH
7041: LD_INT 2
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 30
7056: PUSH
7057: LD_INT 3
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: LIST
7068: PPUSH
7069: CALL_OW 72
7073: ST_TO_ADDR
7074: GO 7148
7076: LD_INT 4
7078: DOUBLE
7079: EQUAL
7080: IFTRUE 7084
7082: GO 7147
7084: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
7085: LD_ADDR_VAR 0 6
7089: PUSH
7090: LD_EXP 10
7094: PUSH
7095: LD_VAR 0 1
7099: ARRAY
7100: PPUSH
7101: LD_INT 2
7103: PUSH
7104: LD_INT 30
7106: PUSH
7107: LD_INT 6
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 7
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 30
7126: PUSH
7127: LD_INT 8
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 72
7144: ST_TO_ADDR
7145: GO 7148
7147: POP
// if not buildings then
7148: LD_VAR 0 6
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 7348
// for i := 1 to units do
7157: LD_ADDR_VAR 0 5
7161: PUSH
7162: DOUBLE
7163: LD_INT 1
7165: DEC
7166: ST_TO_ADDR
7167: LD_VAR 0 3
7171: PUSH
7172: FOR_TO
7173: IFFALSE 7346
// begin if GetClass ( units [ i ] ) = class then
7175: LD_VAR 0 3
7179: PUSH
7180: LD_VAR 0 5
7184: ARRAY
7185: PPUSH
7186: CALL_OW 257
7190: PUSH
7191: LD_VAR 0 2
7195: EQUAL
7196: IFFALSE 7200
// continue ;
7198: GO 7172
// SetTag ( units [ i ] , mct_change_class ) ;
7200: LD_VAR 0 3
7204: PUSH
7205: LD_VAR 0 5
7209: ARRAY
7210: PPUSH
7211: LD_EXP 32
7215: PPUSH
7216: CALL_OW 109
// if buildings > i div 6 then
7220: LD_VAR 0 6
7224: PUSH
7225: LD_VAR 0 5
7229: PUSH
7230: LD_INT 6
7232: DIV
7233: GREATER
7234: IFFALSE 7258
// b := buildings [ i div 6 ] else
7236: LD_ADDR_VAR 0 7
7240: PUSH
7241: LD_VAR 0 6
7245: PUSH
7246: LD_VAR 0 5
7250: PUSH
7251: LD_INT 6
7253: DIV
7254: ARRAY
7255: ST_TO_ADDR
7256: GO 7272
// b := buildings [ 1 ] ;
7258: LD_ADDR_VAR 0 7
7262: PUSH
7263: LD_VAR 0 6
7267: PUSH
7268: LD_INT 1
7270: ARRAY
7271: ST_TO_ADDR
// if IsInUnit ( units [ i ] ) then
7272: LD_VAR 0 3
7276: PUSH
7277: LD_VAR 0 5
7281: ARRAY
7282: PPUSH
7283: CALL_OW 310
7287: IFFALSE 7304
// ComExit ( units [ i ] ) ;
7289: LD_VAR 0 3
7293: PUSH
7294: LD_VAR 0 5
7298: ARRAY
7299: PPUSH
7300: CALL 44765 0 1
// AddComEnterUnit ( units [ i ] , b ) ;
7304: LD_VAR 0 3
7308: PUSH
7309: LD_VAR 0 5
7313: ARRAY
7314: PPUSH
7315: LD_VAR 0 7
7319: PPUSH
7320: CALL_OW 180
// AddComChangeProfession ( units [ i ] , class ) ;
7324: LD_VAR 0 3
7328: PUSH
7329: LD_VAR 0 5
7333: ARRAY
7334: PPUSH
7335: LD_VAR 0 2
7339: PPUSH
7340: CALL_OW 183
// end ;
7344: GO 7172
7346: POP
7347: POP
// end ;
7348: LD_VAR 0 4
7352: RET
// export function MC_GetByClass ( base , class , tag ) ; var i ; begin
7353: LD_INT 0
7355: PPUSH
7356: PPUSH
// result := UnitFilter ( mc_people [ base ] , [ f_class , class ] ) ;
7357: LD_ADDR_VAR 0 4
7361: PUSH
7362: LD_EXP 9
7366: PUSH
7367: LD_VAR 0 1
7371: ARRAY
7372: PPUSH
7373: LD_INT 25
7375: PUSH
7376: LD_VAR 0 2
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 72
7389: ST_TO_ADDR
// if tag > - 1 then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: NEG
7398: GREATER
7399: IFFALSE 7451
// for i in result do
7401: LD_ADDR_VAR 0 5
7405: PUSH
7406: LD_VAR 0 4
7410: PUSH
7411: FOR_IN
7412: IFFALSE 7449
// if GetTag ( i ) <> tag then
7414: LD_VAR 0 5
7418: PPUSH
7419: CALL_OW 110
7423: PUSH
7424: LD_VAR 0 3
7428: NONEQUAL
7429: IFFALSE 7447
// result := result diff i ;
7431: LD_ADDR_VAR 0 4
7435: PUSH
7436: LD_VAR 0 4
7440: PUSH
7441: LD_VAR 0 5
7445: DIFF
7446: ST_TO_ADDR
7447: GO 7411
7449: POP
7450: POP
// end ;
7451: LD_VAR 0 4
7455: RET
// export function MC_GetOneByClass ( base , class , tag ) ; begin
7456: LD_INT 0
7458: PPUSH
// result := MC_GetByClass ( base , class , tag ) ;
7459: LD_ADDR_VAR 0 4
7463: PUSH
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_VAR 0 2
7473: PPUSH
7474: LD_VAR 0 3
7478: PPUSH
7479: CALL 7353 0 3
7483: ST_TO_ADDR
// if result then
7484: LD_VAR 0 4
7488: IFFALSE 7504
// result := result [ 1 ] ;
7490: LD_ADDR_VAR 0 4
7494: PUSH
7495: LD_VAR 0 4
7499: PUSH
7500: LD_INT 1
7502: ARRAY
7503: ST_TO_ADDR
// end ;
7504: LD_VAR 0 4
7508: RET
// export function MC_GetBuilding ( base , btype ) ; begin
7509: LD_INT 0
7511: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_btype , btype ] ) ;
7512: LD_ADDR_VAR 0 3
7516: PUSH
7517: LD_EXP 10
7521: PUSH
7522: LD_VAR 0 1
7526: ARRAY
7527: PPUSH
7528: LD_INT 30
7530: PUSH
7531: LD_VAR 0 2
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PPUSH
7540: CALL_OW 72
7544: ST_TO_ADDR
// end ;
7545: LD_VAR 0 3
7549: RET
// export function MC_GetDepot ( base ) ; begin
7550: LD_INT 0
7552: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
7553: LD_ADDR_VAR 0 2
7557: PUSH
7558: LD_EXP 10
7562: PUSH
7563: LD_VAR 0 1
7567: ARRAY
7568: PPUSH
7569: LD_INT 2
7571: PUSH
7572: LD_INT 30
7574: PUSH
7575: LD_INT 0
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 30
7584: PUSH
7585: LD_INT 1
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: PPUSH
7597: CALL_OW 72
7601: ST_TO_ADDR
// end ;
7602: LD_VAR 0 2
7606: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
7607: LD_INT 0
7609: PPUSH
// result := mc_vehicles [ base ] ;
7610: LD_ADDR_VAR 0 3
7614: PUSH
7615: LD_EXP 11
7619: PUSH
7620: LD_VAR 0 1
7624: ARRAY
7625: ST_TO_ADDR
// if onlyCombat then
7626: LD_VAR 0 2
7630: IFFALSE 7808
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
7632: LD_ADDR_VAR 0 3
7636: PUSH
7637: LD_VAR 0 3
7641: PUSH
7642: LD_VAR 0 3
7646: PPUSH
7647: LD_INT 2
7649: PUSH
7650: LD_INT 34
7652: PUSH
7653: LD_INT 12
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: LD_INT 34
7662: PUSH
7663: LD_INT 51
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 34
7672: PUSH
7673: LD_EXP 40
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 34
7684: PUSH
7685: LD_INT 32
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 34
7694: PUSH
7695: LD_INT 13
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 34
7704: PUSH
7705: LD_INT 52
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 34
7714: PUSH
7715: LD_EXP 45
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 34
7726: PUSH
7727: LD_INT 14
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 34
7736: PUSH
7737: LD_INT 53
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 34
7746: PUSH
7747: LD_EXP 39
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 34
7758: PUSH
7759: LD_INT 31
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 34
7768: PUSH
7769: LD_INT 48
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 34
7778: PUSH
7779: LD_INT 8
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 72
7806: DIFF
7807: ST_TO_ADDR
// end ;
7808: LD_VAR 0 3
7812: RET
// export function MC_Retreat ( base , unit ) ; var depot ; begin
7813: LD_INT 0
7815: PPUSH
7816: PPUSH
// if not base or not unit then
7817: LD_VAR 0 1
7821: NOT
7822: PUSH
7823: LD_VAR 0 2
7827: NOT
7828: OR
7829: IFFALSE 7833
// exit ;
7831: GO 7900
// depot := NearestUnitToUnit ( MC_GetDepot ( base ) , unit ) ;
7833: LD_ADDR_VAR 0 4
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: CALL 7550 0 1
7847: PPUSH
7848: LD_VAR 0 2
7852: PPUSH
7853: CALL_OW 74
7857: ST_TO_ADDR
// if depot then
7858: LD_VAR 0 4
7862: IFFALSE 7880
// ComStandNearbyBuilding ( unit , depot ) else
7864: LD_VAR 0 2
7868: PPUSH
7869: LD_VAR 0 4
7873: PPUSH
7874: CALL 9628 0 2
7878: GO 7900
// ComMoveToArea ( unit , mc_scan_area [ base ] ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_EXP 29
7889: PUSH
7890: LD_VAR 0 1
7894: ARRAY
7895: PPUSH
7896: CALL_OW 113
// end ; end_of_file
7900: LD_VAR 0 3
7904: RET
// export mctm_collect_crates , mctm_build , mctm_ ; export function MCTM_InitTaskManager ( ) ; begin
7905: LD_INT 0
7907: PPUSH
// mctm_collect_crates := 1 ;
7908: LD_ADDR_EXP 36
7912: PUSH
7913: LD_INT 1
7915: ST_TO_ADDR
// mctm_build := 2 ;
7916: LD_ADDR_EXP 37
7920: PUSH
7921: LD_INT 2
7923: ST_TO_ADDR
// end ;
7924: LD_VAR 0 1
7928: RET
// export function MCTM_HasActiveTask ( base , task ) ; begin
7929: LD_INT 0
7931: PPUSH
// result := task in mc_task [ base ] ;
7932: LD_ADDR_VAR 0 3
7936: PUSH
7937: LD_VAR 0 2
7941: PUSH
7942: LD_EXP 8
7946: PUSH
7947: LD_VAR 0 1
7951: ARRAY
7952: IN
7953: ST_TO_ADDR
// end ;
7954: LD_VAR 0 3
7958: RET
// export function MCTM_SetActiveTask ( base , task ) ; begin
7959: LD_INT 0
7961: PPUSH
// mc_task := Replace ( mc_task , base , Replace ( mc_task [ base ] , mc_task [ base ] + 1 , task ) ) ;
7962: LD_ADDR_EXP 8
7966: PUSH
7967: LD_EXP 8
7971: PPUSH
7972: LD_VAR 0 1
7976: PPUSH
7977: LD_EXP 8
7981: PUSH
7982: LD_VAR 0 1
7986: ARRAY
7987: PPUSH
7988: LD_EXP 8
7992: PUSH
7993: LD_VAR 0 1
7997: ARRAY
7998: PUSH
7999: LD_INT 1
8001: PLUS
8002: PPUSH
8003: LD_VAR 0 2
8007: PPUSH
8008: CALL_OW 1
8012: PPUSH
8013: CALL_OW 1
8017: ST_TO_ADDR
// end ;
8018: LD_VAR 0 3
8022: RET
// export function MCTM_DeleteActiveTask ( base , task ) ; begin
8023: LD_INT 0
8025: PPUSH
// mc_task := Replace ( mc_task , base , mc_task [ base ] diff task ) ;
8026: LD_ADDR_EXP 8
8030: PUSH
8031: LD_EXP 8
8035: PPUSH
8036: LD_VAR 0 1
8040: PPUSH
8041: LD_EXP 8
8045: PUSH
8046: LD_VAR 0 1
8050: ARRAY
8051: PUSH
8052: LD_VAR 0 2
8056: DIFF
8057: PPUSH
8058: CALL_OW 1
8062: ST_TO_ADDR
// end ; end_of_file
8063: LD_VAR 0 3
8067: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8068: LD_INT 0
8070: PPUSH
8071: PPUSH
// if exist_mode then
8072: LD_VAR 0 2
8076: IFFALSE 8101
// unit := CreateCharacter ( prefix & ident ) else
8078: LD_ADDR_VAR 0 5
8082: PUSH
8083: LD_VAR 0 3
8087: PUSH
8088: LD_VAR 0 1
8092: STR
8093: PPUSH
8094: CALL_OW 34
8098: ST_TO_ADDR
8099: GO 8116
// unit := NewCharacter ( ident ) ;
8101: LD_ADDR_VAR 0 5
8105: PUSH
8106: LD_VAR 0 1
8110: PPUSH
8111: CALL_OW 25
8115: ST_TO_ADDR
// result := unit ;
8116: LD_ADDR_VAR 0 4
8120: PUSH
8121: LD_VAR 0 5
8125: ST_TO_ADDR
// end ;
8126: LD_VAR 0 4
8130: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8131: LD_INT 0
8133: PPUSH
8134: PPUSH
// if not side or not nation then
8135: LD_VAR 0 1
8139: NOT
8140: PUSH
8141: LD_VAR 0 2
8145: NOT
8146: OR
8147: IFFALSE 8151
// exit ;
8149: GO 8915
// case nation of nation_american :
8151: LD_VAR 0 2
8155: PUSH
8156: LD_INT 1
8158: DOUBLE
8159: EQUAL
8160: IFTRUE 8164
8162: GO 8378
8164: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8165: LD_ADDR_VAR 0 4
8169: PUSH
8170: LD_INT 35
8172: PUSH
8173: LD_INT 45
8175: PUSH
8176: LD_INT 46
8178: PUSH
8179: LD_INT 47
8181: PUSH
8182: LD_INT 82
8184: PUSH
8185: LD_INT 83
8187: PUSH
8188: LD_INT 84
8190: PUSH
8191: LD_INT 85
8193: PUSH
8194: LD_INT 86
8196: PUSH
8197: LD_INT 1
8199: PUSH
8200: LD_INT 2
8202: PUSH
8203: LD_INT 6
8205: PUSH
8206: LD_INT 15
8208: PUSH
8209: LD_INT 16
8211: PUSH
8212: LD_INT 7
8214: PUSH
8215: LD_INT 12
8217: PUSH
8218: LD_INT 13
8220: PUSH
8221: LD_INT 10
8223: PUSH
8224: LD_INT 14
8226: PUSH
8227: LD_INT 20
8229: PUSH
8230: LD_INT 21
8232: PUSH
8233: LD_INT 22
8235: PUSH
8236: LD_INT 25
8238: PUSH
8239: LD_INT 32
8241: PUSH
8242: LD_INT 27
8244: PUSH
8245: LD_INT 36
8247: PUSH
8248: LD_INT 69
8250: PUSH
8251: LD_INT 39
8253: PUSH
8254: LD_INT 34
8256: PUSH
8257: LD_INT 40
8259: PUSH
8260: LD_INT 48
8262: PUSH
8263: LD_INT 49
8265: PUSH
8266: LD_INT 50
8268: PUSH
8269: LD_INT 51
8271: PUSH
8272: LD_INT 52
8274: PUSH
8275: LD_INT 53
8277: PUSH
8278: LD_INT 54
8280: PUSH
8281: LD_INT 55
8283: PUSH
8284: LD_INT 56
8286: PUSH
8287: LD_INT 57
8289: PUSH
8290: LD_INT 58
8292: PUSH
8293: LD_INT 59
8295: PUSH
8296: LD_INT 60
8298: PUSH
8299: LD_INT 61
8301: PUSH
8302: LD_INT 62
8304: PUSH
8305: LD_INT 80
8307: PUSH
8308: LD_INT 82
8310: PUSH
8311: LD_INT 83
8313: PUSH
8314: LD_INT 84
8316: PUSH
8317: LD_INT 85
8319: PUSH
8320: LD_INT 86
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: ST_TO_ADDR
8376: GO 8839
8378: LD_INT 2
8380: DOUBLE
8381: EQUAL
8382: IFTRUE 8386
8384: GO 8608
8386: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
8387: LD_ADDR_VAR 0 4
8391: PUSH
8392: LD_INT 35
8394: PUSH
8395: LD_INT 45
8397: PUSH
8398: LD_INT 46
8400: PUSH
8401: LD_INT 47
8403: PUSH
8404: LD_INT 82
8406: PUSH
8407: LD_INT 83
8409: PUSH
8410: LD_INT 84
8412: PUSH
8413: LD_INT 85
8415: PUSH
8416: LD_INT 87
8418: PUSH
8419: LD_INT 70
8421: PUSH
8422: LD_INT 1
8424: PUSH
8425: LD_INT 11
8427: PUSH
8428: LD_INT 3
8430: PUSH
8431: LD_INT 4
8433: PUSH
8434: LD_INT 5
8436: PUSH
8437: LD_INT 6
8439: PUSH
8440: LD_INT 15
8442: PUSH
8443: LD_INT 18
8445: PUSH
8446: LD_INT 7
8448: PUSH
8449: LD_INT 17
8451: PUSH
8452: LD_INT 8
8454: PUSH
8455: LD_INT 20
8457: PUSH
8458: LD_INT 21
8460: PUSH
8461: LD_INT 22
8463: PUSH
8464: LD_INT 72
8466: PUSH
8467: LD_INT 26
8469: PUSH
8470: LD_INT 69
8472: PUSH
8473: LD_INT 39
8475: PUSH
8476: LD_INT 40
8478: PUSH
8479: LD_INT 41
8481: PUSH
8482: LD_INT 42
8484: PUSH
8485: LD_INT 43
8487: PUSH
8488: LD_INT 48
8490: PUSH
8491: LD_INT 49
8493: PUSH
8494: LD_INT 50
8496: PUSH
8497: LD_INT 51
8499: PUSH
8500: LD_INT 52
8502: PUSH
8503: LD_INT 53
8505: PUSH
8506: LD_INT 54
8508: PUSH
8509: LD_INT 55
8511: PUSH
8512: LD_INT 56
8514: PUSH
8515: LD_INT 60
8517: PUSH
8518: LD_INT 61
8520: PUSH
8521: LD_INT 62
8523: PUSH
8524: LD_INT 66
8526: PUSH
8527: LD_INT 67
8529: PUSH
8530: LD_INT 68
8532: PUSH
8533: LD_INT 81
8535: PUSH
8536: LD_INT 82
8538: PUSH
8539: LD_INT 83
8541: PUSH
8542: LD_INT 84
8544: PUSH
8545: LD_INT 85
8547: PUSH
8548: LD_INT 87
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: ST_TO_ADDR
8606: GO 8839
8608: LD_INT 3
8610: DOUBLE
8611: EQUAL
8612: IFTRUE 8616
8614: GO 8838
8616: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8617: LD_ADDR_VAR 0 4
8621: PUSH
8622: LD_INT 46
8624: PUSH
8625: LD_INT 47
8627: PUSH
8628: LD_INT 1
8630: PUSH
8631: LD_INT 2
8633: PUSH
8634: LD_INT 82
8636: PUSH
8637: LD_INT 83
8639: PUSH
8640: LD_INT 84
8642: PUSH
8643: LD_INT 85
8645: PUSH
8646: LD_INT 86
8648: PUSH
8649: LD_INT 11
8651: PUSH
8652: LD_INT 9
8654: PUSH
8655: LD_INT 20
8657: PUSH
8658: LD_INT 19
8660: PUSH
8661: LD_INT 21
8663: PUSH
8664: LD_INT 24
8666: PUSH
8667: LD_INT 22
8669: PUSH
8670: LD_INT 25
8672: PUSH
8673: LD_INT 28
8675: PUSH
8676: LD_INT 29
8678: PUSH
8679: LD_INT 30
8681: PUSH
8682: LD_INT 31
8684: PUSH
8685: LD_INT 37
8687: PUSH
8688: LD_INT 38
8690: PUSH
8691: LD_INT 32
8693: PUSH
8694: LD_INT 27
8696: PUSH
8697: LD_INT 33
8699: PUSH
8700: LD_INT 69
8702: PUSH
8703: LD_INT 39
8705: PUSH
8706: LD_INT 34
8708: PUSH
8709: LD_INT 40
8711: PUSH
8712: LD_INT 71
8714: PUSH
8715: LD_INT 23
8717: PUSH
8718: LD_INT 44
8720: PUSH
8721: LD_INT 48
8723: PUSH
8724: LD_INT 49
8726: PUSH
8727: LD_INT 50
8729: PUSH
8730: LD_INT 51
8732: PUSH
8733: LD_INT 52
8735: PUSH
8736: LD_INT 53
8738: PUSH
8739: LD_INT 54
8741: PUSH
8742: LD_INT 55
8744: PUSH
8745: LD_INT 56
8747: PUSH
8748: LD_INT 57
8750: PUSH
8751: LD_INT 58
8753: PUSH
8754: LD_INT 59
8756: PUSH
8757: LD_INT 63
8759: PUSH
8760: LD_INT 64
8762: PUSH
8763: LD_INT 65
8765: PUSH
8766: LD_INT 82
8768: PUSH
8769: LD_INT 83
8771: PUSH
8772: LD_INT 84
8774: PUSH
8775: LD_INT 85
8777: PUSH
8778: LD_INT 86
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: ST_TO_ADDR
8836: GO 8839
8838: POP
// if state > - 1 and state < 3 then
8839: LD_VAR 0 3
8843: PUSH
8844: LD_INT 1
8846: NEG
8847: GREATER
8848: PUSH
8849: LD_VAR 0 3
8853: PUSH
8854: LD_INT 3
8856: LESS
8857: AND
8858: IFFALSE 8915
// for i in result do
8860: LD_ADDR_VAR 0 5
8864: PUSH
8865: LD_VAR 0 4
8869: PUSH
8870: FOR_IN
8871: IFFALSE 8913
// if GetTech ( i , side ) <> state then
8873: LD_VAR 0 5
8877: PPUSH
8878: LD_VAR 0 1
8882: PPUSH
8883: CALL_OW 321
8887: PUSH
8888: LD_VAR 0 3
8892: NONEQUAL
8893: IFFALSE 8911
// result := result diff i ;
8895: LD_ADDR_VAR 0 4
8899: PUSH
8900: LD_VAR 0 4
8904: PUSH
8905: LD_VAR 0 5
8909: DIFF
8910: ST_TO_ADDR
8911: GO 8870
8913: POP
8914: POP
// end ;
8915: LD_VAR 0 4
8919: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8920: LD_INT 0
8922: PPUSH
8923: PPUSH
8924: PPUSH
// result := true ;
8925: LD_ADDR_VAR 0 3
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8933: LD_ADDR_VAR 0 5
8937: PUSH
8938: LD_VAR 0 2
8942: PPUSH
8943: CALL_OW 480
8947: ST_TO_ADDR
// if not tmp then
8948: LD_VAR 0 5
8952: NOT
8953: IFFALSE 8957
// exit ;
8955: GO 9006
// for i in tmp do
8957: LD_ADDR_VAR 0 4
8961: PUSH
8962: LD_VAR 0 5
8966: PUSH
8967: FOR_IN
8968: IFFALSE 9004
// if GetTech ( i , side ) <> state_researched then
8970: LD_VAR 0 4
8974: PPUSH
8975: LD_VAR 0 1
8979: PPUSH
8980: CALL_OW 321
8984: PUSH
8985: LD_INT 2
8987: NONEQUAL
8988: IFFALSE 9002
// begin result := false ;
8990: LD_ADDR_VAR 0 3
8994: PUSH
8995: LD_INT 0
8997: ST_TO_ADDR
// exit ;
8998: POP
8999: POP
9000: GO 9006
// end ;
9002: GO 8967
9004: POP
9005: POP
// end ;
9006: LD_VAR 0 3
9010: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9011: LD_INT 0
9013: PPUSH
9014: PPUSH
9015: PPUSH
9016: PPUSH
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9026: LD_VAR 0 1
9030: NOT
9031: PUSH
9032: LD_VAR 0 1
9036: PPUSH
9037: CALL_OW 257
9041: PUSH
9042: LD_INT 9
9044: NONEQUAL
9045: OR
9046: IFFALSE 9050
// exit ;
9048: GO 9623
// side := GetSide ( unit ) ;
9050: LD_ADDR_VAR 0 9
9054: PUSH
9055: LD_VAR 0 1
9059: PPUSH
9060: CALL_OW 255
9064: ST_TO_ADDR
// tech_space := tech_spacanom ;
9065: LD_ADDR_VAR 0 12
9069: PUSH
9070: LD_INT 29
9072: ST_TO_ADDR
// tech_time := tech_taurad ;
9073: LD_ADDR_VAR 0 13
9077: PUSH
9078: LD_INT 28
9080: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9081: LD_ADDR_VAR 0 11
9085: PUSH
9086: LD_VAR 0 1
9090: PPUSH
9091: CALL_OW 310
9095: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9096: LD_VAR 0 11
9100: PPUSH
9101: CALL_OW 247
9105: PUSH
9106: LD_INT 2
9108: EQUAL
9109: IFFALSE 9113
// exit ;
9111: GO 9623
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9113: LD_ADDR_VAR 0 8
9117: PUSH
9118: LD_INT 81
9120: PUSH
9121: LD_VAR 0 9
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 3
9132: PUSH
9133: LD_INT 21
9135: PUSH
9136: LD_INT 3
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PPUSH
9151: CALL_OW 69
9155: ST_TO_ADDR
// if not tmp then
9156: LD_VAR 0 8
9160: NOT
9161: IFFALSE 9165
// exit ;
9163: GO 9623
// if in_unit then
9165: LD_VAR 0 11
9169: IFFALSE 9193
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9171: LD_ADDR_VAR 0 10
9175: PUSH
9176: LD_VAR 0 8
9180: PPUSH
9181: LD_VAR 0 11
9185: PPUSH
9186: CALL_OW 74
9190: ST_TO_ADDR
9191: GO 9213
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9193: LD_ADDR_VAR 0 10
9197: PUSH
9198: LD_VAR 0 8
9202: PPUSH
9203: LD_VAR 0 1
9207: PPUSH
9208: CALL_OW 74
9212: ST_TO_ADDR
// if not enemy then
9213: LD_VAR 0 10
9217: NOT
9218: IFFALSE 9222
// exit ;
9220: GO 9623
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9222: LD_VAR 0 11
9226: PUSH
9227: LD_VAR 0 11
9231: PPUSH
9232: LD_VAR 0 10
9236: PPUSH
9237: CALL_OW 296
9241: PUSH
9242: LD_INT 13
9244: GREATER
9245: AND
9246: PUSH
9247: LD_VAR 0 1
9251: PPUSH
9252: LD_VAR 0 10
9256: PPUSH
9257: CALL_OW 296
9261: PUSH
9262: LD_INT 12
9264: GREATER
9265: OR
9266: IFFALSE 9270
// exit ;
9268: GO 9623
// missile := [ 1 ] ;
9270: LD_ADDR_VAR 0 14
9274: PUSH
9275: LD_INT 1
9277: PUSH
9278: EMPTY
9279: LIST
9280: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9281: LD_VAR 0 9
9285: PPUSH
9286: LD_VAR 0 12
9290: PPUSH
9291: CALL_OW 325
9295: IFFALSE 9324
// missile := Insert ( missile , missile + 1 , 2 ) ;
9297: LD_ADDR_VAR 0 14
9301: PUSH
9302: LD_VAR 0 14
9306: PPUSH
9307: LD_VAR 0 14
9311: PUSH
9312: LD_INT 1
9314: PLUS
9315: PPUSH
9316: LD_INT 2
9318: PPUSH
9319: CALL_OW 2
9323: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9324: LD_VAR 0 9
9328: PPUSH
9329: LD_VAR 0 13
9333: PPUSH
9334: CALL_OW 325
9338: PUSH
9339: LD_VAR 0 10
9343: PPUSH
9344: CALL_OW 255
9348: PPUSH
9349: LD_VAR 0 13
9353: PPUSH
9354: CALL_OW 325
9358: NOT
9359: AND
9360: IFFALSE 9389
// missile := Insert ( missile , missile + 1 , 3 ) ;
9362: LD_ADDR_VAR 0 14
9366: PUSH
9367: LD_VAR 0 14
9371: PPUSH
9372: LD_VAR 0 14
9376: PUSH
9377: LD_INT 1
9379: PLUS
9380: PPUSH
9381: LD_INT 3
9383: PPUSH
9384: CALL_OW 2
9388: ST_TO_ADDR
// if missile < 2 then
9389: LD_VAR 0 14
9393: PUSH
9394: LD_INT 2
9396: LESS
9397: IFFALSE 9401
// exit ;
9399: GO 9623
// x := GetX ( enemy ) ;
9401: LD_ADDR_VAR 0 4
9405: PUSH
9406: LD_VAR 0 10
9410: PPUSH
9411: CALL_OW 250
9415: ST_TO_ADDR
// y := GetY ( enemy ) ;
9416: LD_ADDR_VAR 0 5
9420: PUSH
9421: LD_VAR 0 10
9425: PPUSH
9426: CALL_OW 251
9430: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9431: LD_ADDR_VAR 0 6
9435: PUSH
9436: LD_VAR 0 4
9440: PUSH
9441: LD_INT 1
9443: NEG
9444: PPUSH
9445: LD_INT 1
9447: PPUSH
9448: CALL_OW 12
9452: PLUS
9453: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9454: LD_ADDR_VAR 0 7
9458: PUSH
9459: LD_VAR 0 5
9463: PUSH
9464: LD_INT 1
9466: NEG
9467: PPUSH
9468: LD_INT 1
9470: PPUSH
9471: CALL_OW 12
9475: PLUS
9476: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9477: LD_VAR 0 6
9481: PPUSH
9482: LD_VAR 0 7
9486: PPUSH
9487: CALL_OW 488
9491: NOT
9492: IFFALSE 9514
// begin _x := x ;
9494: LD_ADDR_VAR 0 6
9498: PUSH
9499: LD_VAR 0 4
9503: ST_TO_ADDR
// _y := y ;
9504: LD_ADDR_VAR 0 7
9508: PUSH
9509: LD_VAR 0 5
9513: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9514: LD_ADDR_VAR 0 3
9518: PUSH
9519: LD_INT 1
9521: PPUSH
9522: LD_VAR 0 14
9526: PPUSH
9527: CALL_OW 12
9531: ST_TO_ADDR
// case i of 1 :
9532: LD_VAR 0 3
9536: PUSH
9537: LD_INT 1
9539: DOUBLE
9540: EQUAL
9541: IFTRUE 9545
9543: GO 9562
9545: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9546: LD_VAR 0 1
9550: PPUSH
9551: LD_VAR 0 10
9555: PPUSH
9556: CALL_OW 115
9560: GO 9623
9562: LD_INT 2
9564: DOUBLE
9565: EQUAL
9566: IFTRUE 9570
9568: GO 9592
9570: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9571: LD_VAR 0 1
9575: PPUSH
9576: LD_VAR 0 6
9580: PPUSH
9581: LD_VAR 0 7
9585: PPUSH
9586: CALL_OW 153
9590: GO 9623
9592: LD_INT 3
9594: DOUBLE
9595: EQUAL
9596: IFTRUE 9600
9598: GO 9622
9600: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9601: LD_VAR 0 1
9605: PPUSH
9606: LD_VAR 0 6
9610: PPUSH
9611: LD_VAR 0 7
9615: PPUSH
9616: CALL_OW 154
9620: GO 9623
9622: POP
// end ;
9623: LD_VAR 0 2
9627: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9628: LD_INT 0
9630: PPUSH
9631: PPUSH
9632: PPUSH
9633: PPUSH
9634: PPUSH
9635: PPUSH
// if not unit or not building then
9636: LD_VAR 0 1
9640: NOT
9641: PUSH
9642: LD_VAR 0 2
9646: NOT
9647: OR
9648: IFFALSE 9652
// exit ;
9650: GO 9810
// x := GetX ( building ) ;
9652: LD_ADDR_VAR 0 5
9656: PUSH
9657: LD_VAR 0 2
9661: PPUSH
9662: CALL_OW 250
9666: ST_TO_ADDR
// y := GetY ( building ) ;
9667: LD_ADDR_VAR 0 6
9671: PUSH
9672: LD_VAR 0 2
9676: PPUSH
9677: CALL_OW 251
9681: ST_TO_ADDR
// for i = 0 to 5 do
9682: LD_ADDR_VAR 0 4
9686: PUSH
9687: DOUBLE
9688: LD_INT 0
9690: DEC
9691: ST_TO_ADDR
9692: LD_INT 5
9694: PUSH
9695: FOR_TO
9696: IFFALSE 9808
// begin _x := ShiftX ( x , i , 3 ) ;
9698: LD_ADDR_VAR 0 7
9702: PUSH
9703: LD_VAR 0 5
9707: PPUSH
9708: LD_VAR 0 4
9712: PPUSH
9713: LD_INT 3
9715: PPUSH
9716: CALL_OW 272
9720: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9721: LD_ADDR_VAR 0 8
9725: PUSH
9726: LD_VAR 0 6
9730: PPUSH
9731: LD_VAR 0 4
9735: PPUSH
9736: LD_INT 3
9738: PPUSH
9739: CALL_OW 273
9743: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9744: LD_VAR 0 7
9748: PPUSH
9749: LD_VAR 0 8
9753: PPUSH
9754: CALL_OW 488
9758: NOT
9759: IFFALSE 9763
// continue ;
9761: GO 9695
// if HexInfo ( _x , _y ) = 0 then
9763: LD_VAR 0 7
9767: PPUSH
9768: LD_VAR 0 8
9772: PPUSH
9773: CALL_OW 428
9777: PUSH
9778: LD_INT 0
9780: EQUAL
9781: IFFALSE 9806
// begin ComMoveXY ( unit , _x , _y ) ;
9783: LD_VAR 0 1
9787: PPUSH
9788: LD_VAR 0 7
9792: PPUSH
9793: LD_VAR 0 8
9797: PPUSH
9798: CALL_OW 111
// exit ;
9802: POP
9803: POP
9804: GO 9810
// end ; end ;
9806: GO 9695
9808: POP
9809: POP
// end ;
9810: LD_VAR 0 3
9814: RET
// export function ScanBase ( side , base_area ) ; begin
9815: LD_INT 0
9817: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9818: LD_ADDR_VAR 0 3
9822: PUSH
9823: LD_VAR 0 2
9827: PPUSH
9828: LD_INT 81
9830: PUSH
9831: LD_VAR 0 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PPUSH
9840: CALL_OW 70
9844: ST_TO_ADDR
// end ;
9845: LD_VAR 0 3
9849: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9850: LD_INT 0
9852: PPUSH
9853: PPUSH
9854: PPUSH
9855: PPUSH
// result := false ;
9856: LD_ADDR_VAR 0 2
9860: PUSH
9861: LD_INT 0
9863: ST_TO_ADDR
// side := GetSide ( unit ) ;
9864: LD_ADDR_VAR 0 3
9868: PUSH
9869: LD_VAR 0 1
9873: PPUSH
9874: CALL_OW 255
9878: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9879: LD_ADDR_VAR 0 4
9883: PUSH
9884: LD_VAR 0 1
9888: PPUSH
9889: CALL_OW 248
9893: ST_TO_ADDR
// case nat of 1 :
9894: LD_VAR 0 4
9898: PUSH
9899: LD_INT 1
9901: DOUBLE
9902: EQUAL
9903: IFTRUE 9907
9905: GO 9918
9907: POP
// tech := tech_lassight ; 2 :
9908: LD_ADDR_VAR 0 5
9912: PUSH
9913: LD_INT 12
9915: ST_TO_ADDR
9916: GO 9957
9918: LD_INT 2
9920: DOUBLE
9921: EQUAL
9922: IFTRUE 9926
9924: GO 9937
9926: POP
// tech := tech_mortar ; 3 :
9927: LD_ADDR_VAR 0 5
9931: PUSH
9932: LD_INT 41
9934: ST_TO_ADDR
9935: GO 9957
9937: LD_INT 3
9939: DOUBLE
9940: EQUAL
9941: IFTRUE 9945
9943: GO 9956
9945: POP
// tech := tech_bazooka ; end ;
9946: LD_ADDR_VAR 0 5
9950: PUSH
9951: LD_INT 44
9953: ST_TO_ADDR
9954: GO 9957
9956: POP
// if Researched ( side , tech ) then
9957: LD_VAR 0 3
9961: PPUSH
9962: LD_VAR 0 5
9966: PPUSH
9967: CALL_OW 325
9971: IFFALSE 9998
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9973: LD_ADDR_VAR 0 2
9977: PUSH
9978: LD_INT 5
9980: PUSH
9981: LD_INT 8
9983: PUSH
9984: LD_INT 9
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: LD_VAR 0 4
9996: ARRAY
9997: ST_TO_ADDR
// end ;
9998: LD_VAR 0 2
10002: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10003: LD_INT 0
10005: PPUSH
10006: PPUSH
10007: PPUSH
// if not mines then
10008: LD_VAR 0 2
10012: NOT
10013: IFFALSE 10017
// exit ;
10015: GO 10161
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10017: LD_ADDR_VAR 0 5
10021: PUSH
10022: LD_INT 81
10024: PUSH
10025: LD_VAR 0 1
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 3
10036: PUSH
10037: LD_INT 21
10039: PUSH
10040: LD_INT 3
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: ST_TO_ADDR
// for i in mines do
10060: LD_ADDR_VAR 0 4
10064: PUSH
10065: LD_VAR 0 2
10069: PUSH
10070: FOR_IN
10071: IFFALSE 10159
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 1
10080: ARRAY
10081: PPUSH
10082: LD_VAR 0 4
10086: PUSH
10087: LD_INT 2
10089: ARRAY
10090: PPUSH
10091: CALL_OW 458
10095: NOT
10096: IFFALSE 10100
// continue ;
10098: GO 10070
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10100: LD_VAR 0 4
10104: PUSH
10105: LD_INT 1
10107: ARRAY
10108: PPUSH
10109: LD_VAR 0 4
10113: PUSH
10114: LD_INT 2
10116: ARRAY
10117: PPUSH
10118: CALL_OW 428
10122: PUSH
10123: LD_VAR 0 5
10127: IN
10128: IFFALSE 10157
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10130: LD_VAR 0 4
10134: PUSH
10135: LD_INT 1
10137: ARRAY
10138: PPUSH
10139: LD_VAR 0 4
10143: PUSH
10144: LD_INT 2
10146: ARRAY
10147: PPUSH
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 456
// end ;
10157: GO 10070
10159: POP
10160: POP
// end ;
10161: LD_VAR 0 3
10165: RET
// export function Count ( array ) ; var i ; begin
10166: LD_INT 0
10168: PPUSH
10169: PPUSH
// result := 0 ;
10170: LD_ADDR_VAR 0 2
10174: PUSH
10175: LD_INT 0
10177: ST_TO_ADDR
// for i in array do
10178: LD_ADDR_VAR 0 3
10182: PUSH
10183: LD_VAR 0 1
10187: PUSH
10188: FOR_IN
10189: IFFALSE 10213
// if i then
10191: LD_VAR 0 3
10195: IFFALSE 10211
// result := result + 1 ;
10197: LD_ADDR_VAR 0 2
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: LD_INT 1
10209: PLUS
10210: ST_TO_ADDR
10211: GO 10188
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function IsEmpty ( building ) ; begin
10220: LD_INT 0
10222: PPUSH
// if not building then
10223: LD_VAR 0 1
10227: NOT
10228: IFFALSE 10232
// exit ;
10230: GO 10275
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10232: LD_ADDR_VAR 0 2
10236: PUSH
10237: LD_VAR 0 1
10241: PUSH
10242: LD_INT 22
10244: PUSH
10245: LD_VAR 0 1
10249: PPUSH
10250: CALL_OW 255
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 58
10261: PUSH
10262: EMPTY
10263: LIST
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PPUSH
10269: CALL_OW 69
10273: IN
10274: ST_TO_ADDR
// end ;
10275: LD_VAR 0 2
10279: RET
// export function IsNotFull ( building ) ; begin
10280: LD_INT 0
10282: PPUSH
// if not building then
10283: LD_VAR 0 1
10287: NOT
10288: IFFALSE 10292
// exit ;
10290: GO 10311
// result := UnitsInside ( building ) < 6 ;
10292: LD_ADDR_VAR 0 2
10296: PUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 313
10306: PUSH
10307: LD_INT 6
10309: LESS
10310: ST_TO_ADDR
// end ;
10311: LD_VAR 0 2
10315: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10316: LD_INT 0
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
// tmp := [ ] ;
10322: LD_ADDR_VAR 0 3
10326: PUSH
10327: EMPTY
10328: ST_TO_ADDR
// list := [ ] ;
10329: LD_ADDR_VAR 0 5
10333: PUSH
10334: EMPTY
10335: ST_TO_ADDR
// for i = 16 to 25 do
10336: LD_ADDR_VAR 0 4
10340: PUSH
10341: DOUBLE
10342: LD_INT 16
10344: DEC
10345: ST_TO_ADDR
10346: LD_INT 25
10348: PUSH
10349: FOR_TO
10350: IFFALSE 10423
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10352: LD_ADDR_VAR 0 3
10356: PUSH
10357: LD_VAR 0 3
10361: PUSH
10362: LD_INT 22
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 91
10381: PUSH
10382: LD_VAR 0 1
10386: PUSH
10387: LD_INT 6
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 30
10397: PUSH
10398: LD_VAR 0 4
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: LIST
10411: PUSH
10412: EMPTY
10413: LIST
10414: PPUSH
10415: CALL_OW 69
10419: ADD
10420: ST_TO_ADDR
10421: GO 10349
10423: POP
10424: POP
// for i = 1 to tmp do
10425: LD_ADDR_VAR 0 4
10429: PUSH
10430: DOUBLE
10431: LD_INT 1
10433: DEC
10434: ST_TO_ADDR
10435: LD_VAR 0 3
10439: PUSH
10440: FOR_TO
10441: IFFALSE 10529
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10443: LD_ADDR_VAR 0 5
10447: PUSH
10448: LD_VAR 0 5
10452: PUSH
10453: LD_VAR 0 3
10457: PUSH
10458: LD_VAR 0 4
10462: ARRAY
10463: PPUSH
10464: CALL_OW 266
10468: PUSH
10469: LD_VAR 0 3
10473: PUSH
10474: LD_VAR 0 4
10478: ARRAY
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 3
10489: PUSH
10490: LD_VAR 0 4
10494: ARRAY
10495: PPUSH
10496: CALL_OW 251
10500: PUSH
10501: LD_VAR 0 3
10505: PUSH
10506: LD_VAR 0 4
10510: ARRAY
10511: PPUSH
10512: CALL_OW 254
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: ADD
10526: ST_TO_ADDR
10527: GO 10440
10529: POP
10530: POP
// result := list ;
10531: LD_ADDR_VAR 0 2
10535: PUSH
10536: LD_VAR 0 5
10540: ST_TO_ADDR
// end ;
10541: LD_VAR 0 2
10545: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10546: LD_INT 0
10548: PPUSH
10549: PPUSH
10550: PPUSH
10551: PPUSH
10552: PPUSH
10553: PPUSH
10554: PPUSH
// if not factory then
10555: LD_VAR 0 1
10559: NOT
10560: IFFALSE 10564
// exit ;
10562: GO 11157
// if control = control_apeman then
10564: LD_VAR 0 4
10568: PUSH
10569: LD_INT 5
10571: EQUAL
10572: IFFALSE 10681
// begin tmp := UnitsInside ( factory ) ;
10574: LD_ADDR_VAR 0 8
10578: PUSH
10579: LD_VAR 0 1
10583: PPUSH
10584: CALL_OW 313
10588: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10589: LD_VAR 0 8
10593: PPUSH
10594: LD_INT 25
10596: PUSH
10597: LD_INT 12
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PPUSH
10604: CALL_OW 72
10608: NOT
10609: IFFALSE 10619
// control := control_manual ;
10611: LD_ADDR_VAR 0 4
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10619: LD_ADDR_VAR 0 8
10623: PUSH
10624: LD_VAR 0 1
10628: PPUSH
10629: CALL 10316 0 1
10633: ST_TO_ADDR
// if tmp then
10634: LD_VAR 0 8
10638: IFFALSE 10681
// begin for i in tmp do
10640: LD_ADDR_VAR 0 7
10644: PUSH
10645: LD_VAR 0 8
10649: PUSH
10650: FOR_IN
10651: IFFALSE 10679
// if i [ 1 ] = b_ext_radio then
10653: LD_VAR 0 7
10657: PUSH
10658: LD_INT 1
10660: ARRAY
10661: PUSH
10662: LD_INT 22
10664: EQUAL
10665: IFFALSE 10677
// begin control := control_remote ;
10667: LD_ADDR_VAR 0 4
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// break ;
10675: GO 10679
// end ;
10677: GO 10650
10679: POP
10680: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: LD_VAR 0 3
10695: PPUSH
10696: LD_VAR 0 4
10700: PPUSH
10701: LD_VAR 0 5
10705: PPUSH
10706: CALL_OW 448
10710: IFFALSE 10745
// begin result := [ chassis , engine , control , weapon ] ;
10712: LD_ADDR_VAR 0 6
10716: PUSH
10717: LD_VAR 0 2
10721: PUSH
10722: LD_VAR 0 3
10726: PUSH
10727: LD_VAR 0 4
10731: PUSH
10732: LD_VAR 0 5
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: ST_TO_ADDR
// exit ;
10743: GO 11157
// end ; _chassis := AvailableChassisList ( factory ) ;
10745: LD_ADDR_VAR 0 9
10749: PUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 475
10759: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10760: LD_ADDR_VAR 0 11
10764: PUSH
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 476
10774: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10775: LD_ADDR_VAR 0 12
10779: PUSH
10780: LD_VAR 0 1
10784: PPUSH
10785: CALL_OW 477
10789: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10790: LD_ADDR_VAR 0 10
10794: PUSH
10795: LD_VAR 0 1
10799: PPUSH
10800: CALL_OW 478
10804: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10805: LD_VAR 0 9
10809: NOT
10810: PUSH
10811: LD_VAR 0 11
10815: NOT
10816: OR
10817: PUSH
10818: LD_VAR 0 12
10822: NOT
10823: OR
10824: PUSH
10825: LD_VAR 0 10
10829: NOT
10830: OR
10831: IFFALSE 10866
// begin result := [ chassis , engine , control , weapon ] ;
10833: LD_ADDR_VAR 0 6
10837: PUSH
10838: LD_VAR 0 2
10842: PUSH
10843: LD_VAR 0 3
10847: PUSH
10848: LD_VAR 0 4
10852: PUSH
10853: LD_VAR 0 5
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: ST_TO_ADDR
// exit ;
10864: GO 11157
// end ; if not chassis in _chassis then
10866: LD_VAR 0 2
10870: PUSH
10871: LD_VAR 0 9
10875: IN
10876: NOT
10877: IFFALSE 10903
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10879: LD_ADDR_VAR 0 2
10883: PUSH
10884: LD_VAR 0 9
10888: PUSH
10889: LD_INT 1
10891: PPUSH
10892: LD_VAR 0 9
10896: PPUSH
10897: CALL_OW 12
10901: ARRAY
10902: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10903: LD_VAR 0 2
10907: PPUSH
10908: LD_VAR 0 3
10912: PPUSH
10913: CALL 11162 0 2
10917: NOT
10918: IFFALSE 10977
// repeat engine := _engine [ 1 ] ;
10920: LD_ADDR_VAR 0 3
10924: PUSH
10925: LD_VAR 0 11
10929: PUSH
10930: LD_INT 1
10932: ARRAY
10933: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10934: LD_ADDR_VAR 0 11
10938: PUSH
10939: LD_VAR 0 11
10943: PPUSH
10944: LD_INT 1
10946: PPUSH
10947: CALL_OW 3
10951: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10952: LD_VAR 0 2
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 11162 0 2
10966: PUSH
10967: LD_VAR 0 11
10971: PUSH
10972: EMPTY
10973: EQUAL
10974: OR
10975: IFFALSE 10920
// if not control in _control then
10977: LD_VAR 0 4
10981: PUSH
10982: LD_VAR 0 12
10986: IN
10987: NOT
10988: IFFALSE 11014
// control := _control [ rand ( 1 , _control ) ] ;
10990: LD_ADDR_VAR 0 4
10994: PUSH
10995: LD_VAR 0 12
10999: PUSH
11000: LD_INT 1
11002: PPUSH
11003: LD_VAR 0 12
11007: PPUSH
11008: CALL_OW 12
11012: ARRAY
11013: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11014: LD_VAR 0 2
11018: PPUSH
11019: LD_VAR 0 5
11023: PPUSH
11024: CALL 11382 0 2
11028: NOT
11029: IFFALSE 11088
// repeat weapon := _weapon [ 1 ] ;
11031: LD_ADDR_VAR 0 5
11035: PUSH
11036: LD_VAR 0 10
11040: PUSH
11041: LD_INT 1
11043: ARRAY
11044: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11045: LD_ADDR_VAR 0 10
11049: PUSH
11050: LD_VAR 0 10
11054: PPUSH
11055: LD_INT 1
11057: PPUSH
11058: CALL_OW 3
11062: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11063: LD_VAR 0 2
11067: PPUSH
11068: LD_VAR 0 5
11072: PPUSH
11073: CALL 11382 0 2
11077: PUSH
11078: LD_VAR 0 10
11082: PUSH
11083: EMPTY
11084: EQUAL
11085: OR
11086: IFFALSE 11031
// result := [ ] ;
11088: LD_ADDR_VAR 0 6
11092: PUSH
11093: EMPTY
11094: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11095: LD_VAR 0 1
11099: PPUSH
11100: LD_VAR 0 2
11104: PPUSH
11105: LD_VAR 0 3
11109: PPUSH
11110: LD_VAR 0 4
11114: PPUSH
11115: LD_VAR 0 5
11119: PPUSH
11120: CALL_OW 448
11124: IFFALSE 11157
// result := [ chassis , engine , control , weapon ] ;
11126: LD_ADDR_VAR 0 6
11130: PUSH
11131: LD_VAR 0 2
11135: PUSH
11136: LD_VAR 0 3
11140: PUSH
11141: LD_VAR 0 4
11145: PUSH
11146: LD_VAR 0 5
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: ST_TO_ADDR
// end ;
11157: LD_VAR 0 6
11161: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11162: LD_INT 0
11164: PPUSH
// if not chassis or not engine then
11165: LD_VAR 0 1
11169: NOT
11170: PUSH
11171: LD_VAR 0 2
11175: NOT
11176: OR
11177: IFFALSE 11181
// exit ;
11179: GO 11377
// case engine of engine_solar :
11181: LD_VAR 0 2
11185: PUSH
11186: LD_INT 2
11188: DOUBLE
11189: EQUAL
11190: IFTRUE 11194
11192: GO 11232
11194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11195: LD_ADDR_VAR 0 3
11199: PUSH
11200: LD_INT 11
11202: PUSH
11203: LD_INT 12
11205: PUSH
11206: LD_INT 13
11208: PUSH
11209: LD_INT 14
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: LD_INT 2
11217: PUSH
11218: LD_INT 3
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: ST_TO_ADDR
11230: GO 11361
11232: LD_INT 1
11234: DOUBLE
11235: EQUAL
11236: IFTRUE 11240
11238: GO 11302
11240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11241: LD_ADDR_VAR 0 3
11245: PUSH
11246: LD_INT 11
11248: PUSH
11249: LD_INT 12
11251: PUSH
11252: LD_INT 13
11254: PUSH
11255: LD_INT 14
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: LD_INT 2
11263: PUSH
11264: LD_INT 3
11266: PUSH
11267: LD_INT 4
11269: PUSH
11270: LD_INT 5
11272: PUSH
11273: LD_INT 21
11275: PUSH
11276: LD_INT 23
11278: PUSH
11279: LD_INT 22
11281: PUSH
11282: LD_INT 24
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: ST_TO_ADDR
11300: GO 11361
11302: LD_INT 3
11304: DOUBLE
11305: EQUAL
11306: IFTRUE 11310
11308: GO 11360
11310: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11311: LD_ADDR_VAR 0 3
11315: PUSH
11316: LD_INT 13
11318: PUSH
11319: LD_INT 14
11321: PUSH
11322: LD_INT 2
11324: PUSH
11325: LD_INT 3
11327: PUSH
11328: LD_INT 4
11330: PUSH
11331: LD_INT 5
11333: PUSH
11334: LD_INT 21
11336: PUSH
11337: LD_INT 22
11339: PUSH
11340: LD_INT 23
11342: PUSH
11343: LD_INT 24
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: ST_TO_ADDR
11358: GO 11361
11360: POP
// result := ( chassis in result ) ;
11361: LD_ADDR_VAR 0 3
11365: PUSH
11366: LD_VAR 0 1
11370: PUSH
11371: LD_VAR 0 3
11375: IN
11376: ST_TO_ADDR
// end ;
11377: LD_VAR 0 3
11381: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11382: LD_INT 0
11384: PPUSH
// if not chassis or not weapon then
11385: LD_VAR 0 1
11389: NOT
11390: PUSH
11391: LD_VAR 0 2
11395: NOT
11396: OR
11397: IFFALSE 11401
// exit ;
11399: GO 12427
// case weapon of us_machine_gun :
11401: LD_VAR 0 2
11405: PUSH
11406: LD_INT 2
11408: DOUBLE
11409: EQUAL
11410: IFTRUE 11414
11412: GO 11444
11414: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11415: LD_ADDR_VAR 0 3
11419: PUSH
11420: LD_INT 1
11422: PUSH
11423: LD_INT 2
11425: PUSH
11426: LD_INT 3
11428: PUSH
11429: LD_INT 4
11431: PUSH
11432: LD_INT 5
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: ST_TO_ADDR
11442: GO 12411
11444: LD_INT 3
11446: DOUBLE
11447: EQUAL
11448: IFTRUE 11452
11450: GO 11482
11452: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11453: LD_ADDR_VAR 0 3
11457: PUSH
11458: LD_INT 1
11460: PUSH
11461: LD_INT 2
11463: PUSH
11464: LD_INT 3
11466: PUSH
11467: LD_INT 4
11469: PUSH
11470: LD_INT 5
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: ST_TO_ADDR
11480: GO 12411
11482: LD_INT 11
11484: DOUBLE
11485: EQUAL
11486: IFTRUE 11490
11488: GO 11520
11490: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11491: LD_ADDR_VAR 0 3
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: LD_INT 3
11504: PUSH
11505: LD_INT 4
11507: PUSH
11508: LD_INT 5
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: ST_TO_ADDR
11518: GO 12411
11520: LD_INT 4
11522: DOUBLE
11523: EQUAL
11524: IFTRUE 11528
11526: GO 11554
11528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11529: LD_ADDR_VAR 0 3
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: LD_INT 3
11539: PUSH
11540: LD_INT 4
11542: PUSH
11543: LD_INT 5
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: ST_TO_ADDR
11552: GO 12411
11554: LD_INT 5
11556: DOUBLE
11557: EQUAL
11558: IFTRUE 11562
11560: GO 11588
11562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11563: LD_ADDR_VAR 0 3
11567: PUSH
11568: LD_INT 2
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: LD_INT 4
11576: PUSH
11577: LD_INT 5
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: ST_TO_ADDR
11586: GO 12411
11588: LD_INT 9
11590: DOUBLE
11591: EQUAL
11592: IFTRUE 11596
11594: GO 11622
11596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11597: LD_ADDR_VAR 0 3
11601: PUSH
11602: LD_INT 2
11604: PUSH
11605: LD_INT 3
11607: PUSH
11608: LD_INT 4
11610: PUSH
11611: LD_INT 5
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: ST_TO_ADDR
11620: GO 12411
11622: LD_INT 7
11624: DOUBLE
11625: EQUAL
11626: IFTRUE 11630
11628: GO 11656
11630: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11631: LD_ADDR_VAR 0 3
11635: PUSH
11636: LD_INT 2
11638: PUSH
11639: LD_INT 3
11641: PUSH
11642: LD_INT 4
11644: PUSH
11645: LD_INT 5
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: ST_TO_ADDR
11654: GO 12411
11656: LD_INT 12
11658: DOUBLE
11659: EQUAL
11660: IFTRUE 11664
11662: GO 11690
11664: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11665: LD_ADDR_VAR 0 3
11669: PUSH
11670: LD_INT 2
11672: PUSH
11673: LD_INT 3
11675: PUSH
11676: LD_INT 4
11678: PUSH
11679: LD_INT 5
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: ST_TO_ADDR
11688: GO 12411
11690: LD_INT 13
11692: DOUBLE
11693: EQUAL
11694: IFTRUE 11698
11696: GO 11724
11698: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11699: LD_ADDR_VAR 0 3
11703: PUSH
11704: LD_INT 2
11706: PUSH
11707: LD_INT 3
11709: PUSH
11710: LD_INT 4
11712: PUSH
11713: LD_INT 5
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: ST_TO_ADDR
11722: GO 12411
11724: LD_INT 14
11726: DOUBLE
11727: EQUAL
11728: IFTRUE 11732
11730: GO 11750
11732: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11733: LD_ADDR_VAR 0 3
11737: PUSH
11738: LD_INT 4
11740: PUSH
11741: LD_INT 5
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: ST_TO_ADDR
11748: GO 12411
11750: LD_INT 6
11752: DOUBLE
11753: EQUAL
11754: IFTRUE 11758
11756: GO 11776
11758: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11759: LD_ADDR_VAR 0 3
11763: PUSH
11764: LD_INT 4
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: ST_TO_ADDR
11774: GO 12411
11776: LD_INT 10
11778: DOUBLE
11779: EQUAL
11780: IFTRUE 11784
11782: GO 11802
11784: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11785: LD_ADDR_VAR 0 3
11789: PUSH
11790: LD_INT 4
11792: PUSH
11793: LD_INT 5
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: ST_TO_ADDR
11800: GO 12411
11802: LD_INT 22
11804: DOUBLE
11805: EQUAL
11806: IFTRUE 11810
11808: GO 11836
11810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11811: LD_ADDR_VAR 0 3
11815: PUSH
11816: LD_INT 11
11818: PUSH
11819: LD_INT 12
11821: PUSH
11822: LD_INT 13
11824: PUSH
11825: LD_INT 14
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: ST_TO_ADDR
11834: GO 12411
11836: LD_INT 23
11838: DOUBLE
11839: EQUAL
11840: IFTRUE 11844
11842: GO 11870
11844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11845: LD_ADDR_VAR 0 3
11849: PUSH
11850: LD_INT 11
11852: PUSH
11853: LD_INT 12
11855: PUSH
11856: LD_INT 13
11858: PUSH
11859: LD_INT 14
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: ST_TO_ADDR
11868: GO 12411
11870: LD_INT 24
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11904
11878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11879: LD_ADDR_VAR 0 3
11883: PUSH
11884: LD_INT 11
11886: PUSH
11887: LD_INT 12
11889: PUSH
11890: LD_INT 13
11892: PUSH
11893: LD_INT 14
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: ST_TO_ADDR
11902: GO 12411
11904: LD_INT 30
11906: DOUBLE
11907: EQUAL
11908: IFTRUE 11912
11910: GO 11938
11912: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11913: LD_ADDR_VAR 0 3
11917: PUSH
11918: LD_INT 11
11920: PUSH
11921: LD_INT 12
11923: PUSH
11924: LD_INT 13
11926: PUSH
11927: LD_INT 14
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: ST_TO_ADDR
11936: GO 12411
11938: LD_INT 25
11940: DOUBLE
11941: EQUAL
11942: IFTRUE 11946
11944: GO 11964
11946: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11947: LD_ADDR_VAR 0 3
11951: PUSH
11952: LD_INT 13
11954: PUSH
11955: LD_INT 14
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: ST_TO_ADDR
11962: GO 12411
11964: LD_INT 27
11966: DOUBLE
11967: EQUAL
11968: IFTRUE 11972
11970: GO 11990
11972: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
11973: LD_ADDR_VAR 0 3
11977: PUSH
11978: LD_INT 13
11980: PUSH
11981: LD_INT 14
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: ST_TO_ADDR
11988: GO 12411
11990: LD_INT 28
11992: DOUBLE
11993: EQUAL
11994: IFTRUE 11998
11996: GO 12016
11998: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
11999: LD_ADDR_VAR 0 3
12003: PUSH
12004: LD_INT 13
12006: PUSH
12007: LD_INT 14
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: ST_TO_ADDR
12014: GO 12411
12016: LD_INT 29
12018: DOUBLE
12019: EQUAL
12020: IFTRUE 12024
12022: GO 12042
12024: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12025: LD_ADDR_VAR 0 3
12029: PUSH
12030: LD_INT 13
12032: PUSH
12033: LD_INT 14
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: ST_TO_ADDR
12040: GO 12411
12042: LD_INT 31
12044: DOUBLE
12045: EQUAL
12046: IFTRUE 12050
12048: GO 12068
12050: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12051: LD_ADDR_VAR 0 3
12055: PUSH
12056: LD_INT 13
12058: PUSH
12059: LD_INT 14
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: ST_TO_ADDR
12066: GO 12411
12068: LD_INT 26
12070: DOUBLE
12071: EQUAL
12072: IFTRUE 12076
12074: GO 12094
12076: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12077: LD_ADDR_VAR 0 3
12081: PUSH
12082: LD_INT 13
12084: PUSH
12085: LD_INT 14
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: ST_TO_ADDR
12092: GO 12411
12094: LD_INT 42
12096: DOUBLE
12097: EQUAL
12098: IFTRUE 12102
12100: GO 12128
12102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12103: LD_ADDR_VAR 0 3
12107: PUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 22
12113: PUSH
12114: LD_INT 23
12116: PUSH
12117: LD_INT 24
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: ST_TO_ADDR
12126: GO 12411
12128: LD_INT 43
12130: DOUBLE
12131: EQUAL
12132: IFTRUE 12136
12134: GO 12162
12136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12137: LD_ADDR_VAR 0 3
12141: PUSH
12142: LD_INT 21
12144: PUSH
12145: LD_INT 22
12147: PUSH
12148: LD_INT 23
12150: PUSH
12151: LD_INT 24
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: ST_TO_ADDR
12160: GO 12411
12162: LD_INT 44
12164: DOUBLE
12165: EQUAL
12166: IFTRUE 12170
12168: GO 12196
12170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12171: LD_ADDR_VAR 0 3
12175: PUSH
12176: LD_INT 21
12178: PUSH
12179: LD_INT 22
12181: PUSH
12182: LD_INT 23
12184: PUSH
12185: LD_INT 24
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: ST_TO_ADDR
12194: GO 12411
12196: LD_INT 45
12198: DOUBLE
12199: EQUAL
12200: IFTRUE 12204
12202: GO 12230
12204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 22
12215: PUSH
12216: LD_INT 23
12218: PUSH
12219: LD_INT 24
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: ST_TO_ADDR
12228: GO 12411
12230: LD_INT 49
12232: DOUBLE
12233: EQUAL
12234: IFTRUE 12238
12236: GO 12264
12238: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12239: LD_ADDR_VAR 0 3
12243: PUSH
12244: LD_INT 21
12246: PUSH
12247: LD_INT 22
12249: PUSH
12250: LD_INT 23
12252: PUSH
12253: LD_INT 24
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: ST_TO_ADDR
12262: GO 12411
12264: LD_INT 51
12266: DOUBLE
12267: EQUAL
12268: IFTRUE 12272
12270: GO 12298
12272: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12273: LD_ADDR_VAR 0 3
12277: PUSH
12278: LD_INT 21
12280: PUSH
12281: LD_INT 22
12283: PUSH
12284: LD_INT 23
12286: PUSH
12287: LD_INT 24
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: ST_TO_ADDR
12296: GO 12411
12298: LD_INT 52
12300: DOUBLE
12301: EQUAL
12302: IFTRUE 12306
12304: GO 12332
12306: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12307: LD_ADDR_VAR 0 3
12311: PUSH
12312: LD_INT 21
12314: PUSH
12315: LD_INT 22
12317: PUSH
12318: LD_INT 23
12320: PUSH
12321: LD_INT 24
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: ST_TO_ADDR
12330: GO 12411
12332: LD_INT 53
12334: DOUBLE
12335: EQUAL
12336: IFTRUE 12340
12338: GO 12358
12340: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12341: LD_ADDR_VAR 0 3
12345: PUSH
12346: LD_INT 23
12348: PUSH
12349: LD_INT 24
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: ST_TO_ADDR
12356: GO 12411
12358: LD_INT 46
12360: DOUBLE
12361: EQUAL
12362: IFTRUE 12366
12364: GO 12384
12366: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12367: LD_ADDR_VAR 0 3
12371: PUSH
12372: LD_INT 23
12374: PUSH
12375: LD_INT 24
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: ST_TO_ADDR
12382: GO 12411
12384: LD_INT 47
12386: DOUBLE
12387: EQUAL
12388: IFTRUE 12392
12390: GO 12410
12392: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12393: LD_ADDR_VAR 0 3
12397: PUSH
12398: LD_INT 23
12400: PUSH
12401: LD_INT 24
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: ST_TO_ADDR
12408: GO 12411
12410: POP
// result := ( chassis in result ) ;
12411: LD_ADDR_VAR 0 3
12415: PUSH
12416: LD_VAR 0 1
12420: PUSH
12421: LD_VAR 0 3
12425: IN
12426: ST_TO_ADDR
// end ;
12427: LD_VAR 0 3
12431: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12432: LD_INT 0
12434: PPUSH
12435: PPUSH
12436: PPUSH
12437: PPUSH
12438: PPUSH
12439: PPUSH
12440: PPUSH
// result := array ;
12441: LD_ADDR_VAR 0 5
12445: PUSH
12446: LD_VAR 0 1
12450: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12451: LD_VAR 0 1
12455: NOT
12456: PUSH
12457: LD_VAR 0 2
12461: NOT
12462: OR
12463: PUSH
12464: LD_VAR 0 3
12468: NOT
12469: OR
12470: PUSH
12471: LD_VAR 0 2
12475: PUSH
12476: LD_VAR 0 1
12480: GREATER
12481: OR
12482: PUSH
12483: LD_VAR 0 3
12487: PUSH
12488: LD_VAR 0 1
12492: GREATER
12493: OR
12494: IFFALSE 12498
// exit ;
12496: GO 12794
// if direction then
12498: LD_VAR 0 4
12502: IFFALSE 12566
// begin d := 1 ;
12504: LD_ADDR_VAR 0 9
12508: PUSH
12509: LD_INT 1
12511: ST_TO_ADDR
// if i_from > i_to then
12512: LD_VAR 0 2
12516: PUSH
12517: LD_VAR 0 3
12521: GREATER
12522: IFFALSE 12548
// length := ( array - i_from ) + i_to else
12524: LD_ADDR_VAR 0 11
12528: PUSH
12529: LD_VAR 0 1
12533: PUSH
12534: LD_VAR 0 2
12538: MINUS
12539: PUSH
12540: LD_VAR 0 3
12544: PLUS
12545: ST_TO_ADDR
12546: GO 12564
// length := i_to - i_from ;
12548: LD_ADDR_VAR 0 11
12552: PUSH
12553: LD_VAR 0 3
12557: PUSH
12558: LD_VAR 0 2
12562: MINUS
12563: ST_TO_ADDR
// end else
12564: GO 12627
// begin d := - 1 ;
12566: LD_ADDR_VAR 0 9
12570: PUSH
12571: LD_INT 1
12573: NEG
12574: ST_TO_ADDR
// if i_from > i_to then
12575: LD_VAR 0 2
12579: PUSH
12580: LD_VAR 0 3
12584: GREATER
12585: IFFALSE 12605
// length := i_from - i_to else
12587: LD_ADDR_VAR 0 11
12591: PUSH
12592: LD_VAR 0 2
12596: PUSH
12597: LD_VAR 0 3
12601: MINUS
12602: ST_TO_ADDR
12603: GO 12627
// length := ( array - i_to ) + i_from ;
12605: LD_ADDR_VAR 0 11
12609: PUSH
12610: LD_VAR 0 1
12614: PUSH
12615: LD_VAR 0 3
12619: MINUS
12620: PUSH
12621: LD_VAR 0 2
12625: PLUS
12626: ST_TO_ADDR
// end ; if not length then
12627: LD_VAR 0 11
12631: NOT
12632: IFFALSE 12636
// exit ;
12634: GO 12794
// tmp := array ;
12636: LD_ADDR_VAR 0 10
12640: PUSH
12641: LD_VAR 0 1
12645: ST_TO_ADDR
// for i = 1 to length do
12646: LD_ADDR_VAR 0 6
12650: PUSH
12651: DOUBLE
12652: LD_INT 1
12654: DEC
12655: ST_TO_ADDR
12656: LD_VAR 0 11
12660: PUSH
12661: FOR_TO
12662: IFFALSE 12782
// begin for j = 1 to array do
12664: LD_ADDR_VAR 0 7
12668: PUSH
12669: DOUBLE
12670: LD_INT 1
12672: DEC
12673: ST_TO_ADDR
12674: LD_VAR 0 1
12678: PUSH
12679: FOR_TO
12680: IFFALSE 12768
// begin k := j + d ;
12682: LD_ADDR_VAR 0 8
12686: PUSH
12687: LD_VAR 0 7
12691: PUSH
12692: LD_VAR 0 9
12696: PLUS
12697: ST_TO_ADDR
// if k > array then
12698: LD_VAR 0 8
12702: PUSH
12703: LD_VAR 0 1
12707: GREATER
12708: IFFALSE 12718
// k := 1 ;
12710: LD_ADDR_VAR 0 8
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// if not k then
12718: LD_VAR 0 8
12722: NOT
12723: IFFALSE 12735
// k := array ;
12725: LD_ADDR_VAR 0 8
12729: PUSH
12730: LD_VAR 0 1
12734: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12735: LD_ADDR_VAR 0 10
12739: PUSH
12740: LD_VAR 0 10
12744: PPUSH
12745: LD_VAR 0 8
12749: PPUSH
12750: LD_VAR 0 1
12754: PUSH
12755: LD_VAR 0 7
12759: ARRAY
12760: PPUSH
12761: CALL_OW 1
12765: ST_TO_ADDR
// end ;
12766: GO 12679
12768: POP
12769: POP
// array := tmp ;
12770: LD_ADDR_VAR 0 1
12774: PUSH
12775: LD_VAR 0 10
12779: ST_TO_ADDR
// end ;
12780: GO 12661
12782: POP
12783: POP
// result := array ;
12784: LD_ADDR_VAR 0 5
12788: PUSH
12789: LD_VAR 0 1
12793: ST_TO_ADDR
// end ;
12794: LD_VAR 0 5
12798: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12799: LD_INT 0
12801: PPUSH
12802: PPUSH
// result := 0 ;
12803: LD_ADDR_VAR 0 3
12807: PUSH
12808: LD_INT 0
12810: ST_TO_ADDR
// if not array or not value in array then
12811: LD_VAR 0 1
12815: NOT
12816: PUSH
12817: LD_VAR 0 2
12821: PUSH
12822: LD_VAR 0 1
12826: IN
12827: NOT
12828: OR
12829: IFFALSE 12833
// exit ;
12831: GO 12887
// for i = 1 to array do
12833: LD_ADDR_VAR 0 4
12837: PUSH
12838: DOUBLE
12839: LD_INT 1
12841: DEC
12842: ST_TO_ADDR
12843: LD_VAR 0 1
12847: PUSH
12848: FOR_TO
12849: IFFALSE 12885
// if value = array [ i ] then
12851: LD_VAR 0 2
12855: PUSH
12856: LD_VAR 0 1
12860: PUSH
12861: LD_VAR 0 4
12865: ARRAY
12866: EQUAL
12867: IFFALSE 12883
// begin result := i ;
12869: LD_ADDR_VAR 0 3
12873: PUSH
12874: LD_VAR 0 4
12878: ST_TO_ADDR
// exit ;
12879: POP
12880: POP
12881: GO 12887
// end ;
12883: GO 12848
12885: POP
12886: POP
// end ;
12887: LD_VAR 0 3
12891: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12892: LD_INT 0
12894: PPUSH
// vc_chassis := chassis ;
12895: LD_ADDR_OWVAR 37
12899: PUSH
12900: LD_VAR 0 1
12904: ST_TO_ADDR
// vc_engine := engine ;
12905: LD_ADDR_OWVAR 39
12909: PUSH
12910: LD_VAR 0 2
12914: ST_TO_ADDR
// vc_control := control ;
12915: LD_ADDR_OWVAR 38
12919: PUSH
12920: LD_VAR 0 3
12924: ST_TO_ADDR
// vc_weapon := weapon ;
12925: LD_ADDR_OWVAR 40
12929: PUSH
12930: LD_VAR 0 4
12934: ST_TO_ADDR
// vc_fuel_battery := fuel ;
12935: LD_ADDR_OWVAR 41
12939: PUSH
12940: LD_VAR 0 5
12944: ST_TO_ADDR
// end ;
12945: LD_VAR 0 6
12949: RET
// export function WantPlant ( unit ) ; var task ; begin
12950: LD_INT 0
12952: PPUSH
12953: PPUSH
// result := false ;
12954: LD_ADDR_VAR 0 2
12958: PUSH
12959: LD_INT 0
12961: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
12962: LD_ADDR_VAR 0 3
12966: PUSH
12967: LD_VAR 0 1
12971: PPUSH
12972: CALL_OW 437
12976: ST_TO_ADDR
// if task then
12977: LD_VAR 0 3
12981: IFFALSE 13009
// if task [ 1 ] [ 1 ] = p then
12983: LD_VAR 0 3
12987: PUSH
12988: LD_INT 1
12990: ARRAY
12991: PUSH
12992: LD_INT 1
12994: ARRAY
12995: PUSH
12996: LD_STRING p
12998: EQUAL
12999: IFFALSE 13009
// result := true ;
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 1
13008: ST_TO_ADDR
// end ;
13009: LD_VAR 0 2
13013: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13014: LD_INT 0
13016: PPUSH
13017: PPUSH
13018: PPUSH
13019: PPUSH
// if pos < 1 then
13020: LD_VAR 0 2
13024: PUSH
13025: LD_INT 1
13027: LESS
13028: IFFALSE 13032
// exit ;
13030: GO 13335
// if pos = 1 then
13032: LD_VAR 0 2
13036: PUSH
13037: LD_INT 1
13039: EQUAL
13040: IFFALSE 13073
// result := Replace ( arr , pos [ 1 ] , value ) else
13042: LD_ADDR_VAR 0 4
13046: PUSH
13047: LD_VAR 0 1
13051: PPUSH
13052: LD_VAR 0 2
13056: PUSH
13057: LD_INT 1
13059: ARRAY
13060: PPUSH
13061: LD_VAR 0 3
13065: PPUSH
13066: CALL_OW 1
13070: ST_TO_ADDR
13071: GO 13335
// begin tmp := arr ;
13073: LD_ADDR_VAR 0 6
13077: PUSH
13078: LD_VAR 0 1
13082: ST_TO_ADDR
// s_arr := [ tmp ] ;
13083: LD_ADDR_VAR 0 7
13087: PUSH
13088: LD_VAR 0 6
13092: PUSH
13093: EMPTY
13094: LIST
13095: ST_TO_ADDR
// for i = 1 to pos - 1 do
13096: LD_ADDR_VAR 0 5
13100: PUSH
13101: DOUBLE
13102: LD_INT 1
13104: DEC
13105: ST_TO_ADDR
13106: LD_VAR 0 2
13110: PUSH
13111: LD_INT 1
13113: MINUS
13114: PUSH
13115: FOR_TO
13116: IFFALSE 13161
// begin tmp := tmp [ pos [ i ] ] ;
13118: LD_ADDR_VAR 0 6
13122: PUSH
13123: LD_VAR 0 6
13127: PUSH
13128: LD_VAR 0 2
13132: PUSH
13133: LD_VAR 0 5
13137: ARRAY
13138: ARRAY
13139: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13140: LD_ADDR_VAR 0 7
13144: PUSH
13145: LD_VAR 0 7
13149: PUSH
13150: LD_VAR 0 6
13154: PUSH
13155: EMPTY
13156: LIST
13157: ADD
13158: ST_TO_ADDR
// end ;
13159: GO 13115
13161: POP
13162: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13163: LD_ADDR_VAR 0 6
13167: PUSH
13168: LD_VAR 0 6
13172: PPUSH
13173: LD_VAR 0 2
13177: PUSH
13178: LD_VAR 0 2
13182: ARRAY
13183: PPUSH
13184: LD_VAR 0 3
13188: PPUSH
13189: CALL_OW 1
13193: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13194: LD_ADDR_VAR 0 7
13198: PUSH
13199: LD_VAR 0 7
13203: PPUSH
13204: LD_VAR 0 7
13208: PPUSH
13209: LD_VAR 0 6
13213: PPUSH
13214: CALL_OW 1
13218: ST_TO_ADDR
// for i = s_arr downto 2 do
13219: LD_ADDR_VAR 0 5
13223: PUSH
13224: DOUBLE
13225: LD_VAR 0 7
13229: INC
13230: ST_TO_ADDR
13231: LD_INT 2
13233: PUSH
13234: FOR_DOWNTO
13235: IFFALSE 13319
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13237: LD_ADDR_VAR 0 6
13241: PUSH
13242: LD_VAR 0 7
13246: PUSH
13247: LD_VAR 0 5
13251: PUSH
13252: LD_INT 1
13254: MINUS
13255: ARRAY
13256: PPUSH
13257: LD_VAR 0 2
13261: PUSH
13262: LD_VAR 0 5
13266: PUSH
13267: LD_INT 1
13269: MINUS
13270: ARRAY
13271: PPUSH
13272: LD_VAR 0 7
13276: PUSH
13277: LD_VAR 0 5
13281: ARRAY
13282: PPUSH
13283: CALL_OW 1
13287: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13288: LD_ADDR_VAR 0 7
13292: PUSH
13293: LD_VAR 0 7
13297: PPUSH
13298: LD_VAR 0 5
13302: PUSH
13303: LD_INT 1
13305: MINUS
13306: PPUSH
13307: LD_VAR 0 6
13311: PPUSH
13312: CALL_OW 1
13316: ST_TO_ADDR
// end ;
13317: GO 13234
13319: POP
13320: POP
// result := s_arr [ 1 ] ;
13321: LD_ADDR_VAR 0 4
13325: PUSH
13326: LD_VAR 0 7
13330: PUSH
13331: LD_INT 1
13333: ARRAY
13334: ST_TO_ADDR
// end ; end ;
13335: LD_VAR 0 4
13339: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13340: LD_INT 0
13342: PPUSH
13343: PPUSH
// if not list then
13344: LD_VAR 0 1
13348: NOT
13349: IFFALSE 13353
// exit ;
13351: GO 13444
// i := list [ pos1 ] ;
13353: LD_ADDR_VAR 0 5
13357: PUSH
13358: LD_VAR 0 1
13362: PUSH
13363: LD_VAR 0 2
13367: ARRAY
13368: ST_TO_ADDR
// if not i then
13369: LD_VAR 0 5
13373: NOT
13374: IFFALSE 13378
// exit ;
13376: GO 13444
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13378: LD_ADDR_VAR 0 1
13382: PUSH
13383: LD_VAR 0 1
13387: PPUSH
13388: LD_VAR 0 2
13392: PPUSH
13393: LD_VAR 0 1
13397: PUSH
13398: LD_VAR 0 3
13402: ARRAY
13403: PPUSH
13404: CALL_OW 1
13408: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13409: LD_ADDR_VAR 0 1
13413: PUSH
13414: LD_VAR 0 1
13418: PPUSH
13419: LD_VAR 0 3
13423: PPUSH
13424: LD_VAR 0 5
13428: PPUSH
13429: CALL_OW 1
13433: ST_TO_ADDR
// result := list ;
13434: LD_ADDR_VAR 0 4
13438: PUSH
13439: LD_VAR 0 1
13443: ST_TO_ADDR
// end ;
13444: LD_VAR 0 4
13448: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13449: LD_INT 0
13451: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13452: LD_ADDR_VAR 0 5
13456: PUSH
13457: LD_VAR 0 1
13461: PPUSH
13462: CALL_OW 250
13466: PPUSH
13467: LD_VAR 0 1
13471: PPUSH
13472: CALL_OW 251
13476: PPUSH
13477: LD_VAR 0 2
13481: PPUSH
13482: LD_VAR 0 3
13486: PPUSH
13487: LD_VAR 0 4
13491: PPUSH
13492: CALL 13502 0 5
13496: ST_TO_ADDR
// end ;
13497: LD_VAR 0 5
13501: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13502: LD_INT 0
13504: PPUSH
13505: PPUSH
13506: PPUSH
13507: PPUSH
// if not list then
13508: LD_VAR 0 3
13512: NOT
13513: IFFALSE 13517
// exit ;
13515: GO 13905
// result := [ ] ;
13517: LD_ADDR_VAR 0 6
13521: PUSH
13522: EMPTY
13523: ST_TO_ADDR
// for i in list do
13524: LD_ADDR_VAR 0 7
13528: PUSH
13529: LD_VAR 0 3
13533: PUSH
13534: FOR_IN
13535: IFFALSE 13737
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13537: LD_ADDR_VAR 0 9
13541: PUSH
13542: LD_VAR 0 7
13546: PPUSH
13547: LD_VAR 0 1
13551: PPUSH
13552: LD_VAR 0 2
13556: PPUSH
13557: CALL_OW 297
13561: ST_TO_ADDR
// if not result then
13562: LD_VAR 0 6
13566: NOT
13567: IFFALSE 13593
// result := [ [ i , tmp ] ] else
13569: LD_ADDR_VAR 0 6
13573: PUSH
13574: LD_VAR 0 7
13578: PUSH
13579: LD_VAR 0 9
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: ST_TO_ADDR
13591: GO 13735
// begin if result [ result ] [ 2 ] < tmp then
13593: LD_VAR 0 6
13597: PUSH
13598: LD_VAR 0 6
13602: ARRAY
13603: PUSH
13604: LD_INT 2
13606: ARRAY
13607: PUSH
13608: LD_VAR 0 9
13612: LESS
13613: IFFALSE 13655
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13615: LD_ADDR_VAR 0 6
13619: PUSH
13620: LD_VAR 0 6
13624: PPUSH
13625: LD_VAR 0 6
13629: PUSH
13630: LD_INT 1
13632: PLUS
13633: PPUSH
13634: LD_VAR 0 7
13638: PUSH
13639: LD_VAR 0 9
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 2
13652: ST_TO_ADDR
13653: GO 13735
// for j = 1 to result do
13655: LD_ADDR_VAR 0 8
13659: PUSH
13660: DOUBLE
13661: LD_INT 1
13663: DEC
13664: ST_TO_ADDR
13665: LD_VAR 0 6
13669: PUSH
13670: FOR_TO
13671: IFFALSE 13733
// begin if tmp < result [ j ] [ 2 ] then
13673: LD_VAR 0 9
13677: PUSH
13678: LD_VAR 0 6
13682: PUSH
13683: LD_VAR 0 8
13687: ARRAY
13688: PUSH
13689: LD_INT 2
13691: ARRAY
13692: LESS
13693: IFFALSE 13731
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13695: LD_ADDR_VAR 0 6
13699: PUSH
13700: LD_VAR 0 6
13704: PPUSH
13705: LD_VAR 0 8
13709: PPUSH
13710: LD_VAR 0 7
13714: PUSH
13715: LD_VAR 0 9
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PPUSH
13724: CALL_OW 2
13728: ST_TO_ADDR
// break ;
13729: GO 13733
// end ; end ;
13731: GO 13670
13733: POP
13734: POP
// end ; end ;
13735: GO 13534
13737: POP
13738: POP
// if result and not asc then
13739: LD_VAR 0 6
13743: PUSH
13744: LD_VAR 0 4
13748: NOT
13749: AND
13750: IFFALSE 13825
// begin tmp := result ;
13752: LD_ADDR_VAR 0 9
13756: PUSH
13757: LD_VAR 0 6
13761: ST_TO_ADDR
// for i = tmp downto 1 do
13762: LD_ADDR_VAR 0 7
13766: PUSH
13767: DOUBLE
13768: LD_VAR 0 9
13772: INC
13773: ST_TO_ADDR
13774: LD_INT 1
13776: PUSH
13777: FOR_DOWNTO
13778: IFFALSE 13823
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13780: LD_ADDR_VAR 0 6
13784: PUSH
13785: LD_VAR 0 6
13789: PPUSH
13790: LD_VAR 0 9
13794: PUSH
13795: LD_VAR 0 7
13799: MINUS
13800: PUSH
13801: LD_INT 1
13803: PLUS
13804: PPUSH
13805: LD_VAR 0 9
13809: PUSH
13810: LD_VAR 0 7
13814: ARRAY
13815: PPUSH
13816: CALL_OW 1
13820: ST_TO_ADDR
13821: GO 13777
13823: POP
13824: POP
// end ; tmp := [ ] ;
13825: LD_ADDR_VAR 0 9
13829: PUSH
13830: EMPTY
13831: ST_TO_ADDR
// if mode then
13832: LD_VAR 0 5
13836: IFFALSE 13905
// begin for i = 1 to result do
13838: LD_ADDR_VAR 0 7
13842: PUSH
13843: DOUBLE
13844: LD_INT 1
13846: DEC
13847: ST_TO_ADDR
13848: LD_VAR 0 6
13852: PUSH
13853: FOR_TO
13854: IFFALSE 13893
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13856: LD_ADDR_VAR 0 9
13860: PUSH
13861: LD_VAR 0 9
13865: PPUSH
13866: LD_VAR 0 7
13870: PPUSH
13871: LD_VAR 0 6
13875: PUSH
13876: LD_VAR 0 7
13880: ARRAY
13881: PUSH
13882: LD_INT 1
13884: ARRAY
13885: PPUSH
13886: CALL_OW 1
13890: ST_TO_ADDR
13891: GO 13853
13893: POP
13894: POP
// result := tmp ;
13895: LD_ADDR_VAR 0 6
13899: PUSH
13900: LD_VAR 0 9
13904: ST_TO_ADDR
// end ; end ;
13905: LD_VAR 0 6
13909: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13910: LD_INT 0
13912: PPUSH
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13918: LD_ADDR_VAR 0 5
13922: PUSH
13923: LD_INT 0
13925: PUSH
13926: LD_INT 0
13928: PUSH
13929: LD_INT 0
13931: PUSH
13932: EMPTY
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: ST_TO_ADDR
// if not x or not y then
13940: LD_VAR 0 2
13944: NOT
13945: PUSH
13946: LD_VAR 0 3
13950: NOT
13951: OR
13952: IFFALSE 13956
// exit ;
13954: GO 15602
// if not range then
13956: LD_VAR 0 4
13960: NOT
13961: IFFALSE 13971
// range := 10 ;
13963: LD_ADDR_VAR 0 4
13967: PUSH
13968: LD_INT 10
13970: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13971: LD_ADDR_VAR 0 8
13975: PUSH
13976: LD_INT 81
13978: PUSH
13979: LD_VAR 0 1
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 92
13990: PUSH
13991: LD_VAR 0 2
13995: PUSH
13996: LD_VAR 0 3
14000: PUSH
14001: LD_VAR 0 4
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 3
14014: PUSH
14015: LD_INT 21
14017: PUSH
14018: LD_INT 3
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: ST_TO_ADDR
// if not tmp then
14039: LD_VAR 0 8
14043: NOT
14044: IFFALSE 14048
// exit ;
14046: GO 15602
// for i in tmp do
14048: LD_ADDR_VAR 0 6
14052: PUSH
14053: LD_VAR 0 8
14057: PUSH
14058: FOR_IN
14059: IFFALSE 15577
// begin points := [ 0 , 0 , 0 ] ;
14061: LD_ADDR_VAR 0 9
14065: PUSH
14066: LD_INT 0
14068: PUSH
14069: LD_INT 0
14071: PUSH
14072: LD_INT 0
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: LIST
14079: ST_TO_ADDR
// bpoints := 1 ;
14080: LD_ADDR_VAR 0 10
14084: PUSH
14085: LD_INT 1
14087: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14088: LD_VAR 0 6
14092: PPUSH
14093: CALL_OW 247
14097: PUSH
14098: LD_INT 1
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14684
14106: POP
// begin if GetClass ( i ) = 1 then
14107: LD_VAR 0 6
14111: PPUSH
14112: CALL_OW 257
14116: PUSH
14117: LD_INT 1
14119: EQUAL
14120: IFFALSE 14141
// points := [ 10 , 5 , 3 ] ;
14122: LD_ADDR_VAR 0 9
14126: PUSH
14127: LD_INT 10
14129: PUSH
14130: LD_INT 5
14132: PUSH
14133: LD_INT 3
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14141: LD_VAR 0 6
14145: PPUSH
14146: CALL_OW 257
14150: PUSH
14151: LD_INT 2
14153: PUSH
14154: LD_INT 3
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: IN
14165: IFFALSE 14186
// points := [ 3 , 2 , 1 ] ;
14167: LD_ADDR_VAR 0 9
14171: PUSH
14172: LD_INT 3
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: LD_INT 1
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14186: LD_VAR 0 6
14190: PPUSH
14191: CALL_OW 257
14195: PUSH
14196: LD_INT 5
14198: EQUAL
14199: IFFALSE 14220
// points := [ 130 , 5 , 2 ] ;
14201: LD_ADDR_VAR 0 9
14205: PUSH
14206: LD_INT 130
14208: PUSH
14209: LD_INT 5
14211: PUSH
14212: LD_INT 2
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: LIST
14219: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14220: LD_VAR 0 6
14224: PPUSH
14225: CALL_OW 257
14229: PUSH
14230: LD_INT 8
14232: EQUAL
14233: IFFALSE 14254
// points := [ 35 , 35 , 30 ] ;
14235: LD_ADDR_VAR 0 9
14239: PUSH
14240: LD_INT 35
14242: PUSH
14243: LD_INT 35
14245: PUSH
14246: LD_INT 30
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14254: LD_VAR 0 6
14258: PPUSH
14259: CALL_OW 257
14263: PUSH
14264: LD_INT 9
14266: EQUAL
14267: IFFALSE 14288
// points := [ 20 , 55 , 40 ] ;
14269: LD_ADDR_VAR 0 9
14273: PUSH
14274: LD_INT 20
14276: PUSH
14277: LD_INT 55
14279: PUSH
14280: LD_INT 40
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14288: LD_VAR 0 6
14292: PPUSH
14293: CALL_OW 257
14297: PUSH
14298: LD_INT 12
14300: PUSH
14301: LD_INT 16
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: IN
14308: IFFALSE 14329
// points := [ 5 , 3 , 2 ] ;
14310: LD_ADDR_VAR 0 9
14314: PUSH
14315: LD_INT 5
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: LD_INT 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14329: LD_VAR 0 6
14333: PPUSH
14334: CALL_OW 257
14338: PUSH
14339: LD_INT 17
14341: EQUAL
14342: IFFALSE 14363
// points := [ 100 , 50 , 75 ] ;
14344: LD_ADDR_VAR 0 9
14348: PUSH
14349: LD_INT 100
14351: PUSH
14352: LD_INT 50
14354: PUSH
14355: LD_INT 75
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: LIST
14362: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14363: LD_VAR 0 6
14367: PPUSH
14368: CALL_OW 257
14372: PUSH
14373: LD_INT 15
14375: EQUAL
14376: IFFALSE 14397
// points := [ 10 , 5 , 3 ] ;
14378: LD_ADDR_VAR 0 9
14382: PUSH
14383: LD_INT 10
14385: PUSH
14386: LD_INT 5
14388: PUSH
14389: LD_INT 3
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14397: LD_VAR 0 6
14401: PPUSH
14402: CALL_OW 257
14406: PUSH
14407: LD_INT 14
14409: EQUAL
14410: IFFALSE 14431
// points := [ 10 , 0 , 0 ] ;
14412: LD_ADDR_VAR 0 9
14416: PUSH
14417: LD_INT 10
14419: PUSH
14420: LD_INT 0
14422: PUSH
14423: LD_INT 0
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14431: LD_VAR 0 6
14435: PPUSH
14436: CALL_OW 257
14440: PUSH
14441: LD_INT 11
14443: EQUAL
14444: IFFALSE 14465
// points := [ 30 , 10 , 5 ] ;
14446: LD_ADDR_VAR 0 9
14450: PUSH
14451: LD_INT 30
14453: PUSH
14454: LD_INT 10
14456: PUSH
14457: LD_INT 5
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: LIST
14464: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14465: LD_VAR 0 1
14469: PPUSH
14470: LD_INT 5
14472: PPUSH
14473: CALL_OW 321
14477: PUSH
14478: LD_INT 2
14480: EQUAL
14481: IFFALSE 14498
// bpoints := bpoints * 1.8 ;
14483: LD_ADDR_VAR 0 10
14487: PUSH
14488: LD_VAR 0 10
14492: PUSH
14493: LD_REAL  1.80000000000000E+0000
14496: MUL
14497: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14498: LD_VAR 0 6
14502: PPUSH
14503: CALL_OW 257
14507: PUSH
14508: LD_INT 1
14510: PUSH
14511: LD_INT 2
14513: PUSH
14514: LD_INT 3
14516: PUSH
14517: LD_INT 4
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: IN
14526: PUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: LD_INT 51
14534: PPUSH
14535: CALL_OW 321
14539: PUSH
14540: LD_INT 2
14542: EQUAL
14543: AND
14544: IFFALSE 14561
// bpoints := bpoints * 1.2 ;
14546: LD_ADDR_VAR 0 10
14550: PUSH
14551: LD_VAR 0 10
14555: PUSH
14556: LD_REAL  1.20000000000000E+0000
14559: MUL
14560: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14561: LD_VAR 0 6
14565: PPUSH
14566: CALL_OW 257
14570: PUSH
14571: LD_INT 5
14573: PUSH
14574: LD_INT 7
14576: PUSH
14577: LD_INT 9
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: IN
14585: PUSH
14586: LD_VAR 0 1
14590: PPUSH
14591: LD_INT 52
14593: PPUSH
14594: CALL_OW 321
14598: PUSH
14599: LD_INT 2
14601: EQUAL
14602: AND
14603: IFFALSE 14620
// bpoints := bpoints * 1.5 ;
14605: LD_ADDR_VAR 0 10
14609: PUSH
14610: LD_VAR 0 10
14614: PUSH
14615: LD_REAL  1.50000000000000E+0000
14618: MUL
14619: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14620: LD_VAR 0 1
14624: PPUSH
14625: LD_INT 66
14627: PPUSH
14628: CALL_OW 321
14632: PUSH
14633: LD_INT 2
14635: EQUAL
14636: IFFALSE 14653
// bpoints := bpoints * 1.1 ;
14638: LD_ADDR_VAR 0 10
14642: PUSH
14643: LD_VAR 0 10
14647: PUSH
14648: LD_REAL  1.10000000000000E+0000
14651: MUL
14652: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14653: LD_ADDR_VAR 0 10
14657: PUSH
14658: LD_VAR 0 10
14662: PUSH
14663: LD_VAR 0 6
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 259
14675: PUSH
14676: LD_REAL  1.15000000000000E+0000
14679: MUL
14680: MUL
14681: ST_TO_ADDR
// end ; unit_vehicle :
14682: GO 15506
14684: LD_INT 2
14686: DOUBLE
14687: EQUAL
14688: IFTRUE 14692
14690: GO 15494
14692: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14693: LD_VAR 0 6
14697: PPUSH
14698: CALL_OW 264
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 42
14708: PUSH
14709: LD_INT 24
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: IN
14717: IFFALSE 14738
// points := [ 25 , 5 , 3 ] ;
14719: LD_ADDR_VAR 0 9
14723: PUSH
14724: LD_INT 25
14726: PUSH
14727: LD_INT 5
14729: PUSH
14730: LD_INT 3
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14738: LD_VAR 0 6
14742: PPUSH
14743: CALL_OW 264
14747: PUSH
14748: LD_INT 4
14750: PUSH
14751: LD_INT 43
14753: PUSH
14754: LD_INT 25
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: IN
14762: IFFALSE 14783
// points := [ 40 , 15 , 5 ] ;
14764: LD_ADDR_VAR 0 9
14768: PUSH
14769: LD_INT 40
14771: PUSH
14772: LD_INT 15
14774: PUSH
14775: LD_INT 5
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: LIST
14782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14783: LD_VAR 0 6
14787: PPUSH
14788: CALL_OW 264
14792: PUSH
14793: LD_INT 3
14795: PUSH
14796: LD_INT 23
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: IN
14803: IFFALSE 14824
// points := [ 7 , 25 , 8 ] ;
14805: LD_ADDR_VAR 0 9
14809: PUSH
14810: LD_INT 7
14812: PUSH
14813: LD_INT 25
14815: PUSH
14816: LD_INT 8
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: LIST
14823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14824: LD_VAR 0 6
14828: PPUSH
14829: CALL_OW 264
14833: PUSH
14834: LD_INT 5
14836: PUSH
14837: LD_INT 27
14839: PUSH
14840: LD_INT 44
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: IN
14848: IFFALSE 14869
// points := [ 14 , 50 , 16 ] ;
14850: LD_ADDR_VAR 0 9
14854: PUSH
14855: LD_INT 14
14857: PUSH
14858: LD_INT 50
14860: PUSH
14861: LD_INT 16
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: LIST
14868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14869: LD_VAR 0 6
14873: PPUSH
14874: CALL_OW 264
14878: PUSH
14879: LD_INT 6
14881: PUSH
14882: LD_INT 46
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: IN
14889: IFFALSE 14910
// points := [ 32 , 120 , 70 ] ;
14891: LD_ADDR_VAR 0 9
14895: PUSH
14896: LD_INT 32
14898: PUSH
14899: LD_INT 120
14901: PUSH
14902: LD_INT 70
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
14910: LD_VAR 0 6
14914: PPUSH
14915: CALL_OW 264
14919: PUSH
14920: LD_INT 7
14922: PUSH
14923: LD_INT 28
14925: PUSH
14926: LD_INT 45
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: LIST
14933: IN
14934: IFFALSE 14955
// points := [ 35 , 20 , 45 ] ;
14936: LD_ADDR_VAR 0 9
14940: PUSH
14941: LD_INT 35
14943: PUSH
14944: LD_INT 20
14946: PUSH
14947: LD_INT 45
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: LIST
14954: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
14955: LD_VAR 0 6
14959: PPUSH
14960: CALL_OW 264
14964: PUSH
14965: LD_INT 47
14967: PUSH
14968: EMPTY
14969: LIST
14970: IN
14971: IFFALSE 14992
// points := [ 67 , 45 , 75 ] ;
14973: LD_ADDR_VAR 0 9
14977: PUSH
14978: LD_INT 67
14980: PUSH
14981: LD_INT 45
14983: PUSH
14984: LD_INT 75
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
14992: LD_VAR 0 6
14996: PPUSH
14997: CALL_OW 264
15001: PUSH
15002: LD_INT 26
15004: PUSH
15005: EMPTY
15006: LIST
15007: IN
15008: IFFALSE 15029
// points := [ 120 , 30 , 80 ] ;
15010: LD_ADDR_VAR 0 9
15014: PUSH
15015: LD_INT 120
15017: PUSH
15018: LD_INT 30
15020: PUSH
15021: LD_INT 80
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: LIST
15028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15029: LD_VAR 0 6
15033: PPUSH
15034: CALL_OW 264
15038: PUSH
15039: LD_INT 22
15041: PUSH
15042: EMPTY
15043: LIST
15044: IN
15045: IFFALSE 15066
// points := [ 40 , 1 , 1 ] ;
15047: LD_ADDR_VAR 0 9
15051: PUSH
15052: LD_INT 40
15054: PUSH
15055: LD_INT 1
15057: PUSH
15058: LD_INT 1
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15066: LD_VAR 0 6
15070: PPUSH
15071: CALL_OW 264
15075: PUSH
15076: LD_INT 29
15078: PUSH
15079: EMPTY
15080: LIST
15081: IN
15082: IFFALSE 15103
// points := [ 70 , 200 , 400 ] ;
15084: LD_ADDR_VAR 0 9
15088: PUSH
15089: LD_INT 70
15091: PUSH
15092: LD_INT 200
15094: PUSH
15095: LD_INT 400
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15103: LD_VAR 0 6
15107: PPUSH
15108: CALL_OW 264
15112: PUSH
15113: LD_INT 14
15115: PUSH
15116: LD_INT 53
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: IN
15123: IFFALSE 15144
// points := [ 40 , 10 , 20 ] ;
15125: LD_ADDR_VAR 0 9
15129: PUSH
15130: LD_INT 40
15132: PUSH
15133: LD_INT 10
15135: PUSH
15136: LD_INT 20
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15144: LD_VAR 0 6
15148: PPUSH
15149: CALL_OW 264
15153: PUSH
15154: LD_INT 9
15156: PUSH
15157: EMPTY
15158: LIST
15159: IN
15160: IFFALSE 15181
// points := [ 5 , 70 , 20 ] ;
15162: LD_ADDR_VAR 0 9
15166: PUSH
15167: LD_INT 5
15169: PUSH
15170: LD_INT 70
15172: PUSH
15173: LD_INT 20
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15181: LD_VAR 0 6
15185: PPUSH
15186: CALL_OW 264
15190: PUSH
15191: LD_INT 10
15193: PUSH
15194: EMPTY
15195: LIST
15196: IN
15197: IFFALSE 15218
// points := [ 35 , 110 , 70 ] ;
15199: LD_ADDR_VAR 0 9
15203: PUSH
15204: LD_INT 35
15206: PUSH
15207: LD_INT 110
15209: PUSH
15210: LD_INT 70
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: LIST
15217: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15218: LD_VAR 0 6
15222: PPUSH
15223: CALL_OW 265
15227: PUSH
15228: LD_INT 25
15230: EQUAL
15231: IFFALSE 15252
// points := [ 80 , 65 , 100 ] ;
15233: LD_ADDR_VAR 0 9
15237: PUSH
15238: LD_INT 80
15240: PUSH
15241: LD_INT 65
15243: PUSH
15244: LD_INT 100
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: LIST
15251: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15252: LD_VAR 0 6
15256: PPUSH
15257: CALL_OW 263
15261: PUSH
15262: LD_INT 1
15264: EQUAL
15265: IFFALSE 15300
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15267: LD_ADDR_VAR 0 10
15271: PUSH
15272: LD_VAR 0 10
15276: PUSH
15277: LD_VAR 0 6
15281: PPUSH
15282: CALL_OW 311
15286: PPUSH
15287: LD_INT 3
15289: PPUSH
15290: CALL_OW 259
15294: PUSH
15295: LD_INT 4
15297: MUL
15298: MUL
15299: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15300: LD_VAR 0 6
15304: PPUSH
15305: CALL_OW 263
15309: PUSH
15310: LD_INT 2
15312: EQUAL
15313: IFFALSE 15364
// begin j := IsControledBy ( i ) ;
15315: LD_ADDR_VAR 0 7
15319: PUSH
15320: LD_VAR 0 6
15324: PPUSH
15325: CALL_OW 312
15329: ST_TO_ADDR
// if j then
15330: LD_VAR 0 7
15334: IFFALSE 15364
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15336: LD_ADDR_VAR 0 10
15340: PUSH
15341: LD_VAR 0 10
15345: PUSH
15346: LD_VAR 0 7
15350: PPUSH
15351: LD_INT 3
15353: PPUSH
15354: CALL_OW 259
15358: PUSH
15359: LD_INT 3
15361: MUL
15362: MUL
15363: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15364: LD_VAR 0 6
15368: PPUSH
15369: CALL_OW 264
15373: PUSH
15374: LD_INT 5
15376: PUSH
15377: LD_INT 6
15379: PUSH
15380: LD_INT 46
15382: PUSH
15383: LD_INT 44
15385: PUSH
15386: LD_INT 47
15388: PUSH
15389: LD_INT 45
15391: PUSH
15392: LD_INT 28
15394: PUSH
15395: LD_INT 7
15397: PUSH
15398: LD_INT 27
15400: PUSH
15401: LD_INT 29
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: IN
15416: PUSH
15417: LD_VAR 0 1
15421: PPUSH
15422: LD_INT 52
15424: PPUSH
15425: CALL_OW 321
15429: PUSH
15430: LD_INT 2
15432: EQUAL
15433: AND
15434: IFFALSE 15451
// bpoints := bpoints * 1.2 ;
15436: LD_ADDR_VAR 0 10
15440: PUSH
15441: LD_VAR 0 10
15445: PUSH
15446: LD_REAL  1.20000000000000E+0000
15449: MUL
15450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15451: LD_VAR 0 6
15455: PPUSH
15456: CALL_OW 264
15460: PUSH
15461: LD_INT 6
15463: PUSH
15464: LD_INT 46
15466: PUSH
15467: LD_INT 47
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: LIST
15474: IN
15475: IFFALSE 15492
// bpoints := bpoints * 1.2 ;
15477: LD_ADDR_VAR 0 10
15481: PUSH
15482: LD_VAR 0 10
15486: PUSH
15487: LD_REAL  1.20000000000000E+0000
15490: MUL
15491: ST_TO_ADDR
// end ; unit_building :
15492: GO 15506
15494: LD_INT 3
15496: DOUBLE
15497: EQUAL
15498: IFTRUE 15502
15500: GO 15505
15502: POP
// ; end ;
15503: GO 15506
15505: POP
// for j = 1 to 3 do
15506: LD_ADDR_VAR 0 7
15510: PUSH
15511: DOUBLE
15512: LD_INT 1
15514: DEC
15515: ST_TO_ADDR
15516: LD_INT 3
15518: PUSH
15519: FOR_TO
15520: IFFALSE 15573
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15522: LD_ADDR_VAR 0 5
15526: PUSH
15527: LD_VAR 0 5
15531: PPUSH
15532: LD_VAR 0 7
15536: PPUSH
15537: LD_VAR 0 5
15541: PUSH
15542: LD_VAR 0 7
15546: ARRAY
15547: PUSH
15548: LD_VAR 0 9
15552: PUSH
15553: LD_VAR 0 7
15557: ARRAY
15558: PUSH
15559: LD_VAR 0 10
15563: MUL
15564: PLUS
15565: PPUSH
15566: CALL_OW 1
15570: ST_TO_ADDR
15571: GO 15519
15573: POP
15574: POP
// end ;
15575: GO 14058
15577: POP
15578: POP
// result := Replace ( result , 4 , tmp ) ;
15579: LD_ADDR_VAR 0 5
15583: PUSH
15584: LD_VAR 0 5
15588: PPUSH
15589: LD_INT 4
15591: PPUSH
15592: LD_VAR 0 8
15596: PPUSH
15597: CALL_OW 1
15601: ST_TO_ADDR
// end ;
15602: LD_VAR 0 5
15606: RET
// export function DangerAtRange ( unit , range ) ; begin
15607: LD_INT 0
15609: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15610: LD_ADDR_VAR 0 3
15614: PUSH
15615: LD_VAR 0 1
15619: PPUSH
15620: CALL_OW 255
15624: PPUSH
15625: LD_VAR 0 1
15629: PPUSH
15630: CALL_OW 250
15634: PPUSH
15635: LD_VAR 0 1
15639: PPUSH
15640: CALL_OW 251
15644: PPUSH
15645: LD_VAR 0 2
15649: PPUSH
15650: CALL 13910 0 4
15654: ST_TO_ADDR
// end ;
15655: LD_VAR 0 3
15659: RET
// export function DangerInArea ( side , area ) ; begin
15660: LD_INT 0
15662: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15663: LD_ADDR_VAR 0 3
15667: PUSH
15668: LD_VAR 0 2
15672: PPUSH
15673: LD_INT 81
15675: PUSH
15676: LD_VAR 0 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PPUSH
15685: CALL_OW 70
15689: ST_TO_ADDR
// end ;
15690: LD_VAR 0 3
15694: RET
// export function IsExtension ( b ) ; begin
15695: LD_INT 0
15697: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15698: LD_ADDR_VAR 0 2
15702: PUSH
15703: LD_VAR 0 1
15707: PUSH
15708: LD_INT 23
15710: PUSH
15711: LD_INT 20
15713: PUSH
15714: LD_INT 22
15716: PUSH
15717: LD_INT 17
15719: PUSH
15720: LD_INT 24
15722: PUSH
15723: LD_INT 21
15725: PUSH
15726: LD_INT 19
15728: PUSH
15729: LD_INT 16
15731: PUSH
15732: LD_INT 25
15734: PUSH
15735: LD_INT 18
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: IN
15750: ST_TO_ADDR
// end ;
15751: LD_VAR 0 2
15755: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15756: LD_INT 0
15758: PPUSH
15759: PPUSH
15760: PPUSH
// result := [ ] ;
15761: LD_ADDR_VAR 0 4
15765: PUSH
15766: EMPTY
15767: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15768: LD_ADDR_VAR 0 5
15772: PUSH
15773: LD_VAR 0 2
15777: PPUSH
15778: LD_INT 21
15780: PUSH
15781: LD_INT 3
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PPUSH
15788: CALL_OW 70
15792: ST_TO_ADDR
// if not tmp then
15793: LD_VAR 0 5
15797: NOT
15798: IFFALSE 15802
// exit ;
15800: GO 15866
// if checkLink then
15802: LD_VAR 0 3
15806: IFFALSE 15856
// begin for i in tmp do
15808: LD_ADDR_VAR 0 6
15812: PUSH
15813: LD_VAR 0 5
15817: PUSH
15818: FOR_IN
15819: IFFALSE 15854
// if GetBase ( i ) <> base then
15821: LD_VAR 0 6
15825: PPUSH
15826: CALL_OW 274
15830: PUSH
15831: LD_VAR 0 1
15835: NONEQUAL
15836: IFFALSE 15852
// ComLinkToBase ( base , i ) ;
15838: LD_VAR 0 1
15842: PPUSH
15843: LD_VAR 0 6
15847: PPUSH
15848: CALL_OW 169
15852: GO 15818
15854: POP
15855: POP
// end ; result := tmp ;
15856: LD_ADDR_VAR 0 4
15860: PUSH
15861: LD_VAR 0 5
15865: ST_TO_ADDR
// end ;
15866: LD_VAR 0 4
15870: RET
// export function ComComplete ( units , b ) ; var i ; begin
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
// if not units then
15875: LD_VAR 0 1
15879: NOT
15880: IFFALSE 15884
// exit ;
15882: GO 15974
// for i in units do
15884: LD_ADDR_VAR 0 4
15888: PUSH
15889: LD_VAR 0 1
15893: PUSH
15894: FOR_IN
15895: IFFALSE 15972
// if BuildingStatus ( b ) = bs_build then
15897: LD_VAR 0 2
15901: PPUSH
15902: CALL_OW 461
15906: PUSH
15907: LD_INT 1
15909: EQUAL
15910: IFFALSE 15970
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15912: LD_VAR 0 4
15916: PPUSH
15917: LD_STRING h
15919: PUSH
15920: LD_VAR 0 2
15924: PPUSH
15925: CALL_OW 250
15929: PUSH
15930: LD_VAR 0 2
15934: PPUSH
15935: CALL_OW 251
15939: PUSH
15940: LD_VAR 0 2
15944: PUSH
15945: LD_INT 0
15947: PUSH
15948: LD_INT 0
15950: PUSH
15951: LD_INT 0
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: PPUSH
15966: CALL_OW 446
15970: GO 15894
15972: POP
15973: POP
// end ;
15974: LD_VAR 0 3
15978: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
15979: LD_INT 0
15981: PPUSH
15982: PPUSH
15983: PPUSH
15984: PPUSH
15985: PPUSH
15986: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
15987: LD_VAR 0 1
15991: NOT
15992: PUSH
15993: LD_VAR 0 1
15997: PPUSH
15998: CALL_OW 263
16002: PUSH
16003: LD_INT 2
16005: EQUAL
16006: NOT
16007: OR
16008: IFFALSE 16012
// exit ;
16010: GO 16328
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16012: LD_ADDR_VAR 0 6
16016: PUSH
16017: LD_INT 22
16019: PUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 255
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 2
16036: PUSH
16037: LD_INT 30
16039: PUSH
16040: LD_INT 36
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 34
16049: PUSH
16050: LD_INT 31
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PPUSH
16066: CALL_OW 69
16070: ST_TO_ADDR
// if not tmp then
16071: LD_VAR 0 6
16075: NOT
16076: IFFALSE 16080
// exit ;
16078: GO 16328
// result := [ ] ;
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: EMPTY
16086: ST_TO_ADDR
// for i in tmp do
16087: LD_ADDR_VAR 0 3
16091: PUSH
16092: LD_VAR 0 6
16096: PUSH
16097: FOR_IN
16098: IFFALSE 16169
// begin t := UnitsInside ( i ) ;
16100: LD_ADDR_VAR 0 4
16104: PUSH
16105: LD_VAR 0 3
16109: PPUSH
16110: CALL_OW 313
16114: ST_TO_ADDR
// if t then
16115: LD_VAR 0 4
16119: IFFALSE 16167
// for j in t do
16121: LD_ADDR_VAR 0 7
16125: PUSH
16126: LD_VAR 0 4
16130: PUSH
16131: FOR_IN
16132: IFFALSE 16165
// result := Insert ( result , result + 1 , j ) ;
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: LD_VAR 0 2
16143: PPUSH
16144: LD_VAR 0 2
16148: PUSH
16149: LD_INT 1
16151: PLUS
16152: PPUSH
16153: LD_VAR 0 7
16157: PPUSH
16158: CALL_OW 2
16162: ST_TO_ADDR
16163: GO 16131
16165: POP
16166: POP
// end ;
16167: GO 16097
16169: POP
16170: POP
// if not result then
16171: LD_VAR 0 2
16175: NOT
16176: IFFALSE 16180
// exit ;
16178: GO 16328
// mech := result [ 1 ] ;
16180: LD_ADDR_VAR 0 5
16184: PUSH
16185: LD_VAR 0 2
16189: PUSH
16190: LD_INT 1
16192: ARRAY
16193: ST_TO_ADDR
// if result > 1 then
16194: LD_VAR 0 2
16198: PUSH
16199: LD_INT 1
16201: GREATER
16202: IFFALSE 16314
// for i = 2 to result do
16204: LD_ADDR_VAR 0 3
16208: PUSH
16209: DOUBLE
16210: LD_INT 2
16212: DEC
16213: ST_TO_ADDR
16214: LD_VAR 0 2
16218: PUSH
16219: FOR_TO
16220: IFFALSE 16312
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16222: LD_ADDR_VAR 0 4
16226: PUSH
16227: LD_VAR 0 2
16231: PUSH
16232: LD_VAR 0 3
16236: ARRAY
16237: PPUSH
16238: LD_INT 3
16240: PPUSH
16241: CALL_OW 259
16245: PUSH
16246: LD_VAR 0 2
16250: PUSH
16251: LD_VAR 0 3
16255: ARRAY
16256: PPUSH
16257: CALL_OW 432
16261: MINUS
16262: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16263: LD_VAR 0 4
16267: PUSH
16268: LD_VAR 0 5
16272: PPUSH
16273: LD_INT 3
16275: PPUSH
16276: CALL_OW 259
16280: PUSH
16281: LD_VAR 0 5
16285: PPUSH
16286: CALL_OW 432
16290: MINUS
16291: GREATEREQUAL
16292: IFFALSE 16310
// mech := result [ i ] ;
16294: LD_ADDR_VAR 0 5
16298: PUSH
16299: LD_VAR 0 2
16303: PUSH
16304: LD_VAR 0 3
16308: ARRAY
16309: ST_TO_ADDR
// end ;
16310: GO 16219
16312: POP
16313: POP
// ComLinkTo ( vehicle , mech ) ;
16314: LD_VAR 0 1
16318: PPUSH
16319: LD_VAR 0 5
16323: PPUSH
16324: CALL_OW 135
// end ;
16328: LD_VAR 0 2
16332: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16333: LD_INT 0
16335: PPUSH
16336: PPUSH
16337: PPUSH
16338: PPUSH
16339: PPUSH
16340: PPUSH
16341: PPUSH
16342: PPUSH
16343: PPUSH
16344: PPUSH
16345: PPUSH
16346: PPUSH
16347: PPUSH
// result := [ ] ;
16348: LD_ADDR_VAR 0 7
16352: PUSH
16353: EMPTY
16354: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16355: LD_VAR 0 1
16359: PPUSH
16360: CALL_OW 266
16364: PUSH
16365: LD_INT 0
16367: PUSH
16368: LD_INT 1
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: IN
16375: NOT
16376: IFFALSE 16380
// exit ;
16378: GO 18014
// if name then
16380: LD_VAR 0 3
16384: IFFALSE 16400
// SetBName ( base_dep , name ) ;
16386: LD_VAR 0 1
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: CALL_OW 500
// base := GetBase ( base_dep ) ;
16400: LD_ADDR_VAR 0 15
16404: PUSH
16405: LD_VAR 0 1
16409: PPUSH
16410: CALL_OW 274
16414: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16415: LD_ADDR_VAR 0 16
16419: PUSH
16420: LD_VAR 0 1
16424: PPUSH
16425: CALL_OW 255
16429: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16430: LD_ADDR_VAR 0 17
16434: PUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 248
16444: ST_TO_ADDR
// if sources then
16445: LD_VAR 0 5
16449: IFFALSE 16496
// for i = 1 to 3 do
16451: LD_ADDR_VAR 0 8
16455: PUSH
16456: DOUBLE
16457: LD_INT 1
16459: DEC
16460: ST_TO_ADDR
16461: LD_INT 3
16463: PUSH
16464: FOR_TO
16465: IFFALSE 16494
// AddResourceType ( base , i , sources [ i ] ) ;
16467: LD_VAR 0 15
16471: PPUSH
16472: LD_VAR 0 8
16476: PPUSH
16477: LD_VAR 0 5
16481: PUSH
16482: LD_VAR 0 8
16486: ARRAY
16487: PPUSH
16488: CALL_OW 276
16492: GO 16464
16494: POP
16495: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16496: LD_ADDR_VAR 0 18
16500: PUSH
16501: LD_VAR 0 15
16505: PPUSH
16506: LD_VAR 0 2
16510: PPUSH
16511: LD_INT 1
16513: PPUSH
16514: CALL 15756 0 3
16518: ST_TO_ADDR
// InitHc ;
16519: CALL_OW 19
// InitUc ;
16523: CALL_OW 18
// uc_side := side ;
16527: LD_ADDR_OWVAR 20
16531: PUSH
16532: LD_VAR 0 16
16536: ST_TO_ADDR
// uc_nation := nation ;
16537: LD_ADDR_OWVAR 21
16541: PUSH
16542: LD_VAR 0 17
16546: ST_TO_ADDR
// if buildings then
16547: LD_VAR 0 18
16551: IFFALSE 17873
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16553: LD_ADDR_VAR 0 19
16557: PUSH
16558: LD_VAR 0 18
16562: PPUSH
16563: LD_INT 2
16565: PUSH
16566: LD_INT 30
16568: PUSH
16569: LD_INT 29
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 30
16578: PUSH
16579: LD_INT 30
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: PPUSH
16591: CALL_OW 72
16595: ST_TO_ADDR
// if tmp then
16596: LD_VAR 0 19
16600: IFFALSE 16648
// for i in tmp do
16602: LD_ADDR_VAR 0 8
16606: PUSH
16607: LD_VAR 0 19
16611: PUSH
16612: FOR_IN
16613: IFFALSE 16646
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16615: LD_VAR 0 8
16619: PPUSH
16620: CALL_OW 250
16624: PPUSH
16625: LD_VAR 0 8
16629: PPUSH
16630: CALL_OW 251
16634: PPUSH
16635: LD_VAR 0 16
16639: PPUSH
16640: CALL_OW 441
16644: GO 16612
16646: POP
16647: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16648: LD_VAR 0 18
16652: PPUSH
16653: LD_INT 2
16655: PUSH
16656: LD_INT 30
16658: PUSH
16659: LD_INT 32
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 30
16668: PUSH
16669: LD_INT 33
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 72
16685: IFFALSE 16773
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16687: LD_ADDR_VAR 0 8
16691: PUSH
16692: LD_VAR 0 18
16696: PPUSH
16697: LD_INT 2
16699: PUSH
16700: LD_INT 30
16702: PUSH
16703: LD_INT 32
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 33
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: LIST
16724: PPUSH
16725: CALL_OW 72
16729: PUSH
16730: FOR_IN
16731: IFFALSE 16771
// begin if not GetBWeapon ( i ) then
16733: LD_VAR 0 8
16737: PPUSH
16738: CALL_OW 269
16742: NOT
16743: IFFALSE 16769
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16745: LD_VAR 0 8
16749: PPUSH
16750: LD_VAR 0 8
16754: PPUSH
16755: LD_VAR 0 2
16759: PPUSH
16760: CALL 18019 0 2
16764: PPUSH
16765: CALL_OW 431
// end ;
16769: GO 16730
16771: POP
16772: POP
// end ; for i = 1 to personel do
16773: LD_ADDR_VAR 0 8
16777: PUSH
16778: DOUBLE
16779: LD_INT 1
16781: DEC
16782: ST_TO_ADDR
16783: LD_VAR 0 6
16787: PUSH
16788: FOR_TO
16789: IFFALSE 17853
// begin if i > 4 then
16791: LD_VAR 0 8
16795: PUSH
16796: LD_INT 4
16798: GREATER
16799: IFFALSE 16803
// break ;
16801: GO 17853
// case i of 1 :
16803: LD_VAR 0 8
16807: PUSH
16808: LD_INT 1
16810: DOUBLE
16811: EQUAL
16812: IFTRUE 16816
16814: GO 16896
16816: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16817: LD_ADDR_VAR 0 12
16821: PUSH
16822: LD_VAR 0 18
16826: PPUSH
16827: LD_INT 22
16829: PUSH
16830: LD_VAR 0 16
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 58
16841: PUSH
16842: EMPTY
16843: LIST
16844: PUSH
16845: LD_INT 2
16847: PUSH
16848: LD_INT 30
16850: PUSH
16851: LD_INT 32
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 30
16860: PUSH
16861: LD_INT 4
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 30
16870: PUSH
16871: LD_INT 5
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: LIST
16888: PPUSH
16889: CALL_OW 72
16893: ST_TO_ADDR
16894: GO 17118
16896: LD_INT 2
16898: DOUBLE
16899: EQUAL
16900: IFTRUE 16904
16902: GO 16966
16904: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16905: LD_ADDR_VAR 0 12
16909: PUSH
16910: LD_VAR 0 18
16914: PPUSH
16915: LD_INT 22
16917: PUSH
16918: LD_VAR 0 16
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 2
16929: PUSH
16930: LD_INT 30
16932: PUSH
16933: LD_INT 0
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 30
16942: PUSH
16943: LD_INT 1
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PPUSH
16959: CALL_OW 72
16963: ST_TO_ADDR
16964: GO 17118
16966: LD_INT 3
16968: DOUBLE
16969: EQUAL
16970: IFTRUE 16974
16972: GO 17036
16974: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
16975: LD_ADDR_VAR 0 12
16979: PUSH
16980: LD_VAR 0 18
16984: PPUSH
16985: LD_INT 22
16987: PUSH
16988: LD_VAR 0 16
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: LD_INT 30
17002: PUSH
17003: LD_INT 2
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 30
17012: PUSH
17013: LD_INT 3
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PPUSH
17029: CALL_OW 72
17033: ST_TO_ADDR
17034: GO 17118
17036: LD_INT 4
17038: DOUBLE
17039: EQUAL
17040: IFTRUE 17044
17042: GO 17117
17044: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17045: LD_ADDR_VAR 0 12
17049: PUSH
17050: LD_VAR 0 18
17054: PPUSH
17055: LD_INT 22
17057: PUSH
17058: LD_VAR 0 16
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: LD_INT 30
17072: PUSH
17073: LD_INT 6
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 30
17082: PUSH
17083: LD_INT 7
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 30
17092: PUSH
17093: LD_INT 8
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 72
17114: ST_TO_ADDR
17115: GO 17118
17117: POP
// if i = 1 then
17118: LD_VAR 0 8
17122: PUSH
17123: LD_INT 1
17125: EQUAL
17126: IFFALSE 17237
// begin tmp := [ ] ;
17128: LD_ADDR_VAR 0 19
17132: PUSH
17133: EMPTY
17134: ST_TO_ADDR
// for j in f do
17135: LD_ADDR_VAR 0 9
17139: PUSH
17140: LD_VAR 0 12
17144: PUSH
17145: FOR_IN
17146: IFFALSE 17219
// if GetBType ( j ) = b_bunker then
17148: LD_VAR 0 9
17152: PPUSH
17153: CALL_OW 266
17157: PUSH
17158: LD_INT 32
17160: EQUAL
17161: IFFALSE 17188
// tmp := Insert ( tmp , 1 , j ) else
17163: LD_ADDR_VAR 0 19
17167: PUSH
17168: LD_VAR 0 19
17172: PPUSH
17173: LD_INT 1
17175: PPUSH
17176: LD_VAR 0 9
17180: PPUSH
17181: CALL_OW 2
17185: ST_TO_ADDR
17186: GO 17217
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17188: LD_ADDR_VAR 0 19
17192: PUSH
17193: LD_VAR 0 19
17197: PPUSH
17198: LD_VAR 0 19
17202: PUSH
17203: LD_INT 1
17205: PLUS
17206: PPUSH
17207: LD_VAR 0 9
17211: PPUSH
17212: CALL_OW 2
17216: ST_TO_ADDR
17217: GO 17145
17219: POP
17220: POP
// if tmp then
17221: LD_VAR 0 19
17225: IFFALSE 17237
// f := tmp ;
17227: LD_ADDR_VAR 0 12
17231: PUSH
17232: LD_VAR 0 19
17236: ST_TO_ADDR
// end ; x := personel [ i ] ;
17237: LD_ADDR_VAR 0 13
17241: PUSH
17242: LD_VAR 0 6
17246: PUSH
17247: LD_VAR 0 8
17251: ARRAY
17252: ST_TO_ADDR
// if x = - 1 then
17253: LD_VAR 0 13
17257: PUSH
17258: LD_INT 1
17260: NEG
17261: EQUAL
17262: IFFALSE 17471
// begin for j in f do
17264: LD_ADDR_VAR 0 9
17268: PUSH
17269: LD_VAR 0 12
17273: PUSH
17274: FOR_IN
17275: IFFALSE 17467
// repeat InitHc ;
17277: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17281: LD_VAR 0 9
17285: PPUSH
17286: CALL_OW 266
17290: PUSH
17291: LD_INT 5
17293: EQUAL
17294: IFFALSE 17364
// begin if UnitsInside ( j ) < 3 then
17296: LD_VAR 0 9
17300: PPUSH
17301: CALL_OW 313
17305: PUSH
17306: LD_INT 3
17308: LESS
17309: IFFALSE 17345
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17311: LD_INT 0
17313: PPUSH
17314: LD_INT 5
17316: PUSH
17317: LD_INT 8
17319: PUSH
17320: LD_INT 9
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: PUSH
17328: LD_VAR 0 17
17332: ARRAY
17333: PPUSH
17334: LD_VAR 0 4
17338: PPUSH
17339: CALL_OW 380
17343: GO 17362
// PrepareHuman ( false , i , skill ) ;
17345: LD_INT 0
17347: PPUSH
17348: LD_VAR 0 8
17352: PPUSH
17353: LD_VAR 0 4
17357: PPUSH
17358: CALL_OW 380
// end else
17362: GO 17381
// PrepareHuman ( false , i , skill ) ;
17364: LD_INT 0
17366: PPUSH
17367: LD_VAR 0 8
17371: PPUSH
17372: LD_VAR 0 4
17376: PPUSH
17377: CALL_OW 380
// un := CreateHuman ;
17381: LD_ADDR_VAR 0 14
17385: PUSH
17386: CALL_OW 44
17390: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17391: LD_ADDR_VAR 0 7
17395: PUSH
17396: LD_VAR 0 7
17400: PPUSH
17401: LD_INT 1
17403: PPUSH
17404: LD_VAR 0 14
17408: PPUSH
17409: CALL_OW 2
17413: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17414: LD_VAR 0 14
17418: PPUSH
17419: LD_VAR 0 9
17423: PPUSH
17424: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17428: LD_VAR 0 9
17432: PPUSH
17433: CALL_OW 313
17437: PUSH
17438: LD_INT 6
17440: EQUAL
17441: PUSH
17442: LD_VAR 0 9
17446: PPUSH
17447: CALL_OW 266
17451: PUSH
17452: LD_INT 32
17454: PUSH
17455: LD_INT 31
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: IN
17462: OR
17463: IFFALSE 17277
17465: GO 17274
17467: POP
17468: POP
// end else
17469: GO 17851
// for j = 1 to x do
17471: LD_ADDR_VAR 0 9
17475: PUSH
17476: DOUBLE
17477: LD_INT 1
17479: DEC
17480: ST_TO_ADDR
17481: LD_VAR 0 13
17485: PUSH
17486: FOR_TO
17487: IFFALSE 17849
// begin InitHc ;
17489: CALL_OW 19
// if not f then
17493: LD_VAR 0 12
17497: NOT
17498: IFFALSE 17587
// begin PrepareHuman ( false , i , skill ) ;
17500: LD_INT 0
17502: PPUSH
17503: LD_VAR 0 8
17507: PPUSH
17508: LD_VAR 0 4
17512: PPUSH
17513: CALL_OW 380
// un := CreateHuman ;
17517: LD_ADDR_VAR 0 14
17521: PUSH
17522: CALL_OW 44
17526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17527: LD_ADDR_VAR 0 7
17531: PUSH
17532: LD_VAR 0 7
17536: PPUSH
17537: LD_INT 1
17539: PPUSH
17540: LD_VAR 0 14
17544: PPUSH
17545: CALL_OW 2
17549: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17550: LD_VAR 0 14
17554: PPUSH
17555: LD_VAR 0 1
17559: PPUSH
17560: CALL_OW 250
17564: PPUSH
17565: LD_VAR 0 1
17569: PPUSH
17570: CALL_OW 251
17574: PPUSH
17575: LD_INT 10
17577: PPUSH
17578: LD_INT 0
17580: PPUSH
17581: CALL_OW 50
// continue ;
17585: GO 17486
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17587: LD_VAR 0 12
17591: PUSH
17592: LD_INT 1
17594: ARRAY
17595: PPUSH
17596: CALL_OW 313
17600: PUSH
17601: LD_VAR 0 12
17605: PUSH
17606: LD_INT 1
17608: ARRAY
17609: PPUSH
17610: CALL_OW 266
17614: PUSH
17615: LD_INT 32
17617: PUSH
17618: LD_INT 31
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: IN
17625: AND
17626: PUSH
17627: LD_VAR 0 12
17631: PUSH
17632: LD_INT 1
17634: ARRAY
17635: PPUSH
17636: CALL_OW 313
17640: PUSH
17641: LD_INT 6
17643: EQUAL
17644: OR
17645: IFFALSE 17665
// f := Delete ( f , 1 ) ;
17647: LD_ADDR_VAR 0 12
17651: PUSH
17652: LD_VAR 0 12
17656: PPUSH
17657: LD_INT 1
17659: PPUSH
17660: CALL_OW 3
17664: ST_TO_ADDR
// if not f then
17665: LD_VAR 0 12
17669: NOT
17670: IFFALSE 17688
// begin x := x + 2 ;
17672: LD_ADDR_VAR 0 13
17676: PUSH
17677: LD_VAR 0 13
17681: PUSH
17682: LD_INT 2
17684: PLUS
17685: ST_TO_ADDR
// continue ;
17686: GO 17486
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17688: LD_VAR 0 12
17692: PUSH
17693: LD_INT 1
17695: ARRAY
17696: PPUSH
17697: CALL_OW 266
17701: PUSH
17702: LD_INT 5
17704: EQUAL
17705: IFFALSE 17779
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17707: LD_VAR 0 12
17711: PUSH
17712: LD_INT 1
17714: ARRAY
17715: PPUSH
17716: CALL_OW 313
17720: PUSH
17721: LD_INT 3
17723: LESS
17724: IFFALSE 17760
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17726: LD_INT 0
17728: PPUSH
17729: LD_INT 5
17731: PUSH
17732: LD_INT 8
17734: PUSH
17735: LD_INT 9
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: PUSH
17743: LD_VAR 0 17
17747: ARRAY
17748: PPUSH
17749: LD_VAR 0 4
17753: PPUSH
17754: CALL_OW 380
17758: GO 17777
// PrepareHuman ( false , i , skill ) ;
17760: LD_INT 0
17762: PPUSH
17763: LD_VAR 0 8
17767: PPUSH
17768: LD_VAR 0 4
17772: PPUSH
17773: CALL_OW 380
// end else
17777: GO 17796
// PrepareHuman ( false , i , skill ) ;
17779: LD_INT 0
17781: PPUSH
17782: LD_VAR 0 8
17786: PPUSH
17787: LD_VAR 0 4
17791: PPUSH
17792: CALL_OW 380
// un := CreateHuman ;
17796: LD_ADDR_VAR 0 14
17800: PUSH
17801: CALL_OW 44
17805: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17806: LD_ADDR_VAR 0 7
17810: PUSH
17811: LD_VAR 0 7
17815: PPUSH
17816: LD_INT 1
17818: PPUSH
17819: LD_VAR 0 14
17823: PPUSH
17824: CALL_OW 2
17828: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17829: LD_VAR 0 14
17833: PPUSH
17834: LD_VAR 0 12
17838: PUSH
17839: LD_INT 1
17841: ARRAY
17842: PPUSH
17843: CALL_OW 52
// end ;
17847: GO 17486
17849: POP
17850: POP
// end ;
17851: GO 16788
17853: POP
17854: POP
// result := result ^ buildings ;
17855: LD_ADDR_VAR 0 7
17859: PUSH
17860: LD_VAR 0 7
17864: PUSH
17865: LD_VAR 0 18
17869: ADD
17870: ST_TO_ADDR
// end else
17871: GO 18014
// begin for i = 1 to personel do
17873: LD_ADDR_VAR 0 8
17877: PUSH
17878: DOUBLE
17879: LD_INT 1
17881: DEC
17882: ST_TO_ADDR
17883: LD_VAR 0 6
17887: PUSH
17888: FOR_TO
17889: IFFALSE 18012
// begin if i > 4 then
17891: LD_VAR 0 8
17895: PUSH
17896: LD_INT 4
17898: GREATER
17899: IFFALSE 17903
// break ;
17901: GO 18012
// x := personel [ i ] ;
17903: LD_ADDR_VAR 0 13
17907: PUSH
17908: LD_VAR 0 6
17912: PUSH
17913: LD_VAR 0 8
17917: ARRAY
17918: ST_TO_ADDR
// if x = - 1 then
17919: LD_VAR 0 13
17923: PUSH
17924: LD_INT 1
17926: NEG
17927: EQUAL
17928: IFFALSE 17932
// continue ;
17930: GO 17888
// PrepareHuman ( false , i , skill ) ;
17932: LD_INT 0
17934: PPUSH
17935: LD_VAR 0 8
17939: PPUSH
17940: LD_VAR 0 4
17944: PPUSH
17945: CALL_OW 380
// un := CreateHuman ;
17949: LD_ADDR_VAR 0 14
17953: PUSH
17954: CALL_OW 44
17958: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17959: LD_VAR 0 14
17963: PPUSH
17964: LD_VAR 0 1
17968: PPUSH
17969: CALL_OW 250
17973: PPUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 251
17983: PPUSH
17984: LD_INT 10
17986: PPUSH
17987: LD_INT 0
17989: PPUSH
17990: CALL_OW 50
// result := result ^ un ;
17994: LD_ADDR_VAR 0 7
17998: PUSH
17999: LD_VAR 0 7
18003: PUSH
18004: LD_VAR 0 14
18008: ADD
18009: ST_TO_ADDR
// end ;
18010: GO 17888
18012: POP
18013: POP
// end ; end ;
18014: LD_VAR 0 7
18018: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18019: LD_INT 0
18021: PPUSH
18022: PPUSH
18023: PPUSH
18024: PPUSH
18025: PPUSH
18026: PPUSH
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
18031: PPUSH
18032: PPUSH
18033: PPUSH
18034: PPUSH
18035: PPUSH
18036: PPUSH
// result := false ;
18037: LD_ADDR_VAR 0 3
18041: PUSH
18042: LD_INT 0
18044: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18045: LD_VAR 0 1
18049: NOT
18050: PUSH
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 266
18060: PUSH
18061: LD_INT 32
18063: PUSH
18064: LD_INT 33
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: IN
18071: NOT
18072: OR
18073: IFFALSE 18077
// exit ;
18075: GO 19216
// nat := GetNation ( tower ) ;
18077: LD_ADDR_VAR 0 12
18081: PUSH
18082: LD_VAR 0 1
18086: PPUSH
18087: CALL_OW 248
18091: ST_TO_ADDR
// side := GetSide ( tower ) ;
18092: LD_ADDR_VAR 0 16
18096: PUSH
18097: LD_VAR 0 1
18101: PPUSH
18102: CALL_OW 255
18106: ST_TO_ADDR
// x := GetX ( tower ) ;
18107: LD_ADDR_VAR 0 10
18111: PUSH
18112: LD_VAR 0 1
18116: PPUSH
18117: CALL_OW 250
18121: ST_TO_ADDR
// y := GetY ( tower ) ;
18122: LD_ADDR_VAR 0 11
18126: PUSH
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 251
18136: ST_TO_ADDR
// if not x or not y then
18137: LD_VAR 0 10
18141: NOT
18142: PUSH
18143: LD_VAR 0 11
18147: NOT
18148: OR
18149: IFFALSE 18153
// exit ;
18151: GO 19216
// weapon := 0 ;
18153: LD_ADDR_VAR 0 18
18157: PUSH
18158: LD_INT 0
18160: ST_TO_ADDR
// fac_list := [ ] ;
18161: LD_ADDR_VAR 0 17
18165: PUSH
18166: EMPTY
18167: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18168: LD_ADDR_VAR 0 6
18172: PUSH
18173: LD_VAR 0 1
18177: PPUSH
18178: CALL_OW 274
18182: PPUSH
18183: LD_VAR 0 2
18187: PPUSH
18188: LD_INT 0
18190: PPUSH
18191: CALL 15756 0 3
18195: PPUSH
18196: LD_INT 30
18198: PUSH
18199: LD_INT 3
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 72
18210: ST_TO_ADDR
// if not factories then
18211: LD_VAR 0 6
18215: NOT
18216: IFFALSE 18220
// exit ;
18218: GO 19216
// for i in factories do
18220: LD_ADDR_VAR 0 8
18224: PUSH
18225: LD_VAR 0 6
18229: PUSH
18230: FOR_IN
18231: IFFALSE 18256
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18233: LD_ADDR_VAR 0 17
18237: PUSH
18238: LD_VAR 0 17
18242: PUSH
18243: LD_VAR 0 8
18247: PPUSH
18248: CALL_OW 478
18252: UNION
18253: ST_TO_ADDR
18254: GO 18230
18256: POP
18257: POP
// if not fac_list then
18258: LD_VAR 0 17
18262: NOT
18263: IFFALSE 18267
// exit ;
18265: GO 19216
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18267: LD_ADDR_VAR 0 5
18271: PUSH
18272: LD_INT 4
18274: PUSH
18275: LD_INT 5
18277: PUSH
18278: LD_INT 9
18280: PUSH
18281: LD_INT 10
18283: PUSH
18284: LD_INT 6
18286: PUSH
18287: LD_INT 7
18289: PUSH
18290: LD_INT 11
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 27
18304: PUSH
18305: LD_INT 28
18307: PUSH
18308: LD_INT 26
18310: PUSH
18311: LD_INT 30
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 43
18322: PUSH
18323: LD_INT 44
18325: PUSH
18326: LD_INT 46
18328: PUSH
18329: LD_INT 45
18331: PUSH
18332: LD_INT 47
18334: PUSH
18335: LD_INT 49
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: LIST
18350: PUSH
18351: LD_VAR 0 12
18355: ARRAY
18356: ST_TO_ADDR
// for i in list do
18357: LD_ADDR_VAR 0 8
18361: PUSH
18362: LD_VAR 0 5
18366: PUSH
18367: FOR_IN
18368: IFFALSE 18401
// if not i in fac_list then
18370: LD_VAR 0 8
18374: PUSH
18375: LD_VAR 0 17
18379: IN
18380: NOT
18381: IFFALSE 18399
// list := list diff i ;
18383: LD_ADDR_VAR 0 5
18387: PUSH
18388: LD_VAR 0 5
18392: PUSH
18393: LD_VAR 0 8
18397: DIFF
18398: ST_TO_ADDR
18399: GO 18367
18401: POP
18402: POP
// if not list then
18403: LD_VAR 0 5
18407: NOT
18408: IFFALSE 18412
// exit ;
18410: GO 19216
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18412: LD_VAR 0 12
18416: PUSH
18417: LD_INT 3
18419: EQUAL
18420: PUSH
18421: LD_INT 49
18423: PUSH
18424: LD_VAR 0 5
18428: IN
18429: AND
18430: PUSH
18431: LD_INT 31
18433: PPUSH
18434: LD_VAR 0 16
18438: PPUSH
18439: CALL_OW 321
18443: PUSH
18444: LD_INT 2
18446: EQUAL
18447: AND
18448: IFFALSE 18508
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18450: LD_INT 22
18452: PUSH
18453: LD_VAR 0 16
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 35
18464: PUSH
18465: LD_INT 49
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 91
18474: PUSH
18475: LD_VAR 0 1
18479: PUSH
18480: LD_INT 10
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: LIST
18492: PPUSH
18493: CALL_OW 69
18497: NOT
18498: IFFALSE 18508
// weapon := ru_time_lapser ;
18500: LD_ADDR_VAR 0 18
18504: PUSH
18505: LD_INT 49
18507: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18508: LD_VAR 0 12
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: LD_INT 2
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: IN
18523: PUSH
18524: LD_INT 11
18526: PUSH
18527: LD_VAR 0 5
18531: IN
18532: PUSH
18533: LD_INT 30
18535: PUSH
18536: LD_VAR 0 5
18540: IN
18541: OR
18542: AND
18543: PUSH
18544: LD_INT 6
18546: PPUSH
18547: LD_VAR 0 16
18551: PPUSH
18552: CALL_OW 321
18556: PUSH
18557: LD_INT 2
18559: EQUAL
18560: AND
18561: IFFALSE 18726
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18563: LD_INT 22
18565: PUSH
18566: LD_VAR 0 16
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 2
18577: PUSH
18578: LD_INT 35
18580: PUSH
18581: LD_INT 11
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 35
18590: PUSH
18591: LD_INT 30
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 91
18605: PUSH
18606: LD_VAR 0 1
18610: PUSH
18611: LD_INT 18
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: LIST
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: LIST
18623: PPUSH
18624: CALL_OW 69
18628: NOT
18629: PUSH
18630: LD_INT 22
18632: PUSH
18633: LD_VAR 0 16
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 2
18644: PUSH
18645: LD_INT 30
18647: PUSH
18648: LD_INT 32
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 30
18657: PUSH
18658: LD_INT 33
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 91
18672: PUSH
18673: LD_VAR 0 1
18677: PUSH
18678: LD_INT 12
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: LIST
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: PUSH
18691: EMPTY
18692: LIST
18693: PPUSH
18694: CALL_OW 69
18698: PUSH
18699: LD_INT 2
18701: GREATER
18702: AND
18703: IFFALSE 18726
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18705: LD_ADDR_VAR 0 18
18709: PUSH
18710: LD_INT 11
18712: PUSH
18713: LD_INT 30
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_VAR 0 12
18724: ARRAY
18725: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18726: LD_VAR 0 18
18730: NOT
18731: PUSH
18732: LD_INT 40
18734: PPUSH
18735: LD_VAR 0 16
18739: PPUSH
18740: CALL_OW 321
18744: PUSH
18745: LD_INT 2
18747: EQUAL
18748: AND
18749: PUSH
18750: LD_INT 7
18752: PUSH
18753: LD_VAR 0 5
18757: IN
18758: PUSH
18759: LD_INT 28
18761: PUSH
18762: LD_VAR 0 5
18766: IN
18767: OR
18768: PUSH
18769: LD_INT 45
18771: PUSH
18772: LD_VAR 0 5
18776: IN
18777: OR
18778: AND
18779: IFFALSE 19033
// begin hex := GetHexInfo ( x , y ) ;
18781: LD_ADDR_VAR 0 4
18785: PUSH
18786: LD_VAR 0 10
18790: PPUSH
18791: LD_VAR 0 11
18795: PPUSH
18796: CALL_OW 546
18800: ST_TO_ADDR
// if hex [ 1 ] then
18801: LD_VAR 0 4
18805: PUSH
18806: LD_INT 1
18808: ARRAY
18809: IFFALSE 18813
// exit ;
18811: GO 19216
// height := hex [ 2 ] ;
18813: LD_ADDR_VAR 0 15
18817: PUSH
18818: LD_VAR 0 4
18822: PUSH
18823: LD_INT 2
18825: ARRAY
18826: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18827: LD_ADDR_VAR 0 14
18831: PUSH
18832: LD_INT 0
18834: PUSH
18835: LD_INT 2
18837: PUSH
18838: LD_INT 3
18840: PUSH
18841: LD_INT 5
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: ST_TO_ADDR
// for i in tmp do
18850: LD_ADDR_VAR 0 8
18854: PUSH
18855: LD_VAR 0 14
18859: PUSH
18860: FOR_IN
18861: IFFALSE 19031
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18863: LD_ADDR_VAR 0 9
18867: PUSH
18868: LD_VAR 0 10
18872: PPUSH
18873: LD_VAR 0 8
18877: PPUSH
18878: LD_INT 5
18880: PPUSH
18881: CALL_OW 272
18885: PUSH
18886: LD_VAR 0 11
18890: PPUSH
18891: LD_VAR 0 8
18895: PPUSH
18896: LD_INT 5
18898: PPUSH
18899: CALL_OW 273
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18908: LD_VAR 0 9
18912: PUSH
18913: LD_INT 1
18915: ARRAY
18916: PPUSH
18917: LD_VAR 0 9
18921: PUSH
18922: LD_INT 2
18924: ARRAY
18925: PPUSH
18926: CALL_OW 488
18930: IFFALSE 19029
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18932: LD_ADDR_VAR 0 4
18936: PUSH
18937: LD_VAR 0 9
18941: PUSH
18942: LD_INT 1
18944: ARRAY
18945: PPUSH
18946: LD_VAR 0 9
18950: PUSH
18951: LD_INT 2
18953: ARRAY
18954: PPUSH
18955: CALL_OW 546
18959: ST_TO_ADDR
// if hex [ 1 ] then
18960: LD_VAR 0 4
18964: PUSH
18965: LD_INT 1
18967: ARRAY
18968: IFFALSE 18972
// continue ;
18970: GO 18860
// h := hex [ 2 ] ;
18972: LD_ADDR_VAR 0 13
18976: PUSH
18977: LD_VAR 0 4
18981: PUSH
18982: LD_INT 2
18984: ARRAY
18985: ST_TO_ADDR
// if h + 7 < height then
18986: LD_VAR 0 13
18990: PUSH
18991: LD_INT 7
18993: PLUS
18994: PUSH
18995: LD_VAR 0 15
18999: LESS
19000: IFFALSE 19029
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19002: LD_ADDR_VAR 0 18
19006: PUSH
19007: LD_INT 7
19009: PUSH
19010: LD_INT 28
19012: PUSH
19013: LD_INT 45
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: PUSH
19021: LD_VAR 0 12
19025: ARRAY
19026: ST_TO_ADDR
// break ;
19027: GO 19031
// end ; end ; end ;
19029: GO 18860
19031: POP
19032: POP
// end ; if not weapon then
19033: LD_VAR 0 18
19037: NOT
19038: IFFALSE 19098
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19040: LD_ADDR_VAR 0 5
19044: PUSH
19045: LD_VAR 0 5
19049: PUSH
19050: LD_INT 11
19052: PUSH
19053: LD_INT 30
19055: PUSH
19056: LD_INT 49
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: DIFF
19064: ST_TO_ADDR
// if not list then
19065: LD_VAR 0 5
19069: NOT
19070: IFFALSE 19074
// exit ;
19072: GO 19216
// weapon := list [ rand ( 1 , list ) ] ;
19074: LD_ADDR_VAR 0 18
19078: PUSH
19079: LD_VAR 0 5
19083: PUSH
19084: LD_INT 1
19086: PPUSH
19087: LD_VAR 0 5
19091: PPUSH
19092: CALL_OW 12
19096: ARRAY
19097: ST_TO_ADDR
// end ; if weapon then
19098: LD_VAR 0 18
19102: IFFALSE 19216
// begin tmp := CostOfWeapon ( weapon ) ;
19104: LD_ADDR_VAR 0 14
19108: PUSH
19109: LD_VAR 0 18
19113: PPUSH
19114: CALL_OW 451
19118: ST_TO_ADDR
// j := GetBase ( tower ) ;
19119: LD_ADDR_VAR 0 9
19123: PUSH
19124: LD_VAR 0 1
19128: PPUSH
19129: CALL_OW 274
19133: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19134: LD_VAR 0 9
19138: PPUSH
19139: LD_INT 1
19141: PPUSH
19142: CALL_OW 275
19146: PUSH
19147: LD_VAR 0 14
19151: PUSH
19152: LD_INT 1
19154: ARRAY
19155: GREATEREQUAL
19156: PUSH
19157: LD_VAR 0 9
19161: PPUSH
19162: LD_INT 2
19164: PPUSH
19165: CALL_OW 275
19169: PUSH
19170: LD_VAR 0 14
19174: PUSH
19175: LD_INT 2
19177: ARRAY
19178: GREATEREQUAL
19179: AND
19180: PUSH
19181: LD_VAR 0 9
19185: PPUSH
19186: LD_INT 3
19188: PPUSH
19189: CALL_OW 275
19193: PUSH
19194: LD_VAR 0 14
19198: PUSH
19199: LD_INT 3
19201: ARRAY
19202: GREATEREQUAL
19203: AND
19204: IFFALSE 19216
// result := weapon ;
19206: LD_ADDR_VAR 0 3
19210: PUSH
19211: LD_VAR 0 18
19215: ST_TO_ADDR
// end ; end ;
19216: LD_VAR 0 3
19220: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19221: LD_INT 0
19223: PPUSH
19224: PPUSH
// result := true ;
19225: LD_ADDR_VAR 0 3
19229: PUSH
19230: LD_INT 1
19232: ST_TO_ADDR
// if array1 = array2 then
19233: LD_VAR 0 1
19237: PUSH
19238: LD_VAR 0 2
19242: EQUAL
19243: IFFALSE 19303
// begin for i = 1 to array1 do
19245: LD_ADDR_VAR 0 4
19249: PUSH
19250: DOUBLE
19251: LD_INT 1
19253: DEC
19254: ST_TO_ADDR
19255: LD_VAR 0 1
19259: PUSH
19260: FOR_TO
19261: IFFALSE 19299
// if array1 [ i ] <> array2 [ i ] then
19263: LD_VAR 0 1
19267: PUSH
19268: LD_VAR 0 4
19272: ARRAY
19273: PUSH
19274: LD_VAR 0 2
19278: PUSH
19279: LD_VAR 0 4
19283: ARRAY
19284: NONEQUAL
19285: IFFALSE 19297
// begin result := false ;
19287: LD_ADDR_VAR 0 3
19291: PUSH
19292: LD_INT 0
19294: ST_TO_ADDR
// break ;
19295: GO 19299
// end ;
19297: GO 19260
19299: POP
19300: POP
// end else
19301: GO 19311
// result := false ;
19303: LD_ADDR_VAR 0 3
19307: PUSH
19308: LD_INT 0
19310: ST_TO_ADDR
// end ;
19311: LD_VAR 0 3
19315: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19316: LD_INT 0
19318: PPUSH
19319: PPUSH
// if not array1 or not array2 then
19320: LD_VAR 0 1
19324: NOT
19325: PUSH
19326: LD_VAR 0 2
19330: NOT
19331: OR
19332: IFFALSE 19336
// exit ;
19334: GO 19400
// result := true ;
19336: LD_ADDR_VAR 0 3
19340: PUSH
19341: LD_INT 1
19343: ST_TO_ADDR
// for i = 1 to array1 do
19344: LD_ADDR_VAR 0 4
19348: PUSH
19349: DOUBLE
19350: LD_INT 1
19352: DEC
19353: ST_TO_ADDR
19354: LD_VAR 0 1
19358: PUSH
19359: FOR_TO
19360: IFFALSE 19398
// if array1 [ i ] <> array2 [ i ] then
19362: LD_VAR 0 1
19366: PUSH
19367: LD_VAR 0 4
19371: ARRAY
19372: PUSH
19373: LD_VAR 0 2
19377: PUSH
19378: LD_VAR 0 4
19382: ARRAY
19383: NONEQUAL
19384: IFFALSE 19396
// begin result := false ;
19386: LD_ADDR_VAR 0 3
19390: PUSH
19391: LD_INT 0
19393: ST_TO_ADDR
// break ;
19394: GO 19398
// end ;
19396: GO 19359
19398: POP
19399: POP
// end ;
19400: LD_VAR 0 3
19404: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19405: LD_INT 0
19407: PPUSH
19408: PPUSH
19409: PPUSH
// pom := GetBase ( fac ) ;
19410: LD_ADDR_VAR 0 5
19414: PUSH
19415: LD_VAR 0 1
19419: PPUSH
19420: CALL_OW 274
19424: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19425: LD_ADDR_VAR 0 4
19429: PUSH
19430: LD_VAR 0 2
19434: PUSH
19435: LD_INT 1
19437: ARRAY
19438: PPUSH
19439: LD_VAR 0 2
19443: PUSH
19444: LD_INT 2
19446: ARRAY
19447: PPUSH
19448: LD_VAR 0 2
19452: PUSH
19453: LD_INT 3
19455: ARRAY
19456: PPUSH
19457: LD_VAR 0 2
19461: PUSH
19462: LD_INT 4
19464: ARRAY
19465: PPUSH
19466: CALL_OW 449
19470: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19471: LD_ADDR_VAR 0 3
19475: PUSH
19476: LD_VAR 0 5
19480: PPUSH
19481: LD_INT 1
19483: PPUSH
19484: CALL_OW 275
19488: PUSH
19489: LD_VAR 0 4
19493: PUSH
19494: LD_INT 1
19496: ARRAY
19497: GREATEREQUAL
19498: PUSH
19499: LD_VAR 0 5
19503: PPUSH
19504: LD_INT 2
19506: PPUSH
19507: CALL_OW 275
19511: PUSH
19512: LD_VAR 0 4
19516: PUSH
19517: LD_INT 2
19519: ARRAY
19520: GREATEREQUAL
19521: AND
19522: PUSH
19523: LD_VAR 0 5
19527: PPUSH
19528: LD_INT 3
19530: PPUSH
19531: CALL_OW 275
19535: PUSH
19536: LD_VAR 0 4
19540: PUSH
19541: LD_INT 3
19543: ARRAY
19544: GREATEREQUAL
19545: AND
19546: ST_TO_ADDR
// end ;
19547: LD_VAR 0 3
19551: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19552: LD_INT 0
19554: PPUSH
19555: PPUSH
19556: PPUSH
19557: PPUSH
// pom := GetBase ( building ) ;
19558: LD_ADDR_VAR 0 3
19562: PUSH
19563: LD_VAR 0 1
19567: PPUSH
19568: CALL_OW 274
19572: ST_TO_ADDR
// if not pom then
19573: LD_VAR 0 3
19577: NOT
19578: IFFALSE 19582
// exit ;
19580: GO 19752
// btype := GetBType ( building ) ;
19582: LD_ADDR_VAR 0 5
19586: PUSH
19587: LD_VAR 0 1
19591: PPUSH
19592: CALL_OW 266
19596: ST_TO_ADDR
// if btype = b_armoury then
19597: LD_VAR 0 5
19601: PUSH
19602: LD_INT 4
19604: EQUAL
19605: IFFALSE 19615
// btype := b_barracks ;
19607: LD_ADDR_VAR 0 5
19611: PUSH
19612: LD_INT 5
19614: ST_TO_ADDR
// if btype = b_depot then
19615: LD_VAR 0 5
19619: PUSH
19620: LD_INT 0
19622: EQUAL
19623: IFFALSE 19633
// btype := b_warehouse ;
19625: LD_ADDR_VAR 0 5
19629: PUSH
19630: LD_INT 1
19632: ST_TO_ADDR
// if btype = b_workshop then
19633: LD_VAR 0 5
19637: PUSH
19638: LD_INT 2
19640: EQUAL
19641: IFFALSE 19651
// btype := b_factory ;
19643: LD_ADDR_VAR 0 5
19647: PUSH
19648: LD_INT 3
19650: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19651: LD_ADDR_VAR 0 4
19655: PUSH
19656: LD_VAR 0 5
19660: PPUSH
19661: LD_VAR 0 1
19665: PPUSH
19666: CALL_OW 248
19670: PPUSH
19671: CALL_OW 450
19675: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19676: LD_ADDR_VAR 0 2
19680: PUSH
19681: LD_VAR 0 3
19685: PPUSH
19686: LD_INT 1
19688: PPUSH
19689: CALL_OW 275
19693: PUSH
19694: LD_VAR 0 4
19698: PUSH
19699: LD_INT 1
19701: ARRAY
19702: GREATEREQUAL
19703: PUSH
19704: LD_VAR 0 3
19708: PPUSH
19709: LD_INT 2
19711: PPUSH
19712: CALL_OW 275
19716: PUSH
19717: LD_VAR 0 4
19721: PUSH
19722: LD_INT 2
19724: ARRAY
19725: GREATEREQUAL
19726: AND
19727: PUSH
19728: LD_VAR 0 3
19732: PPUSH
19733: LD_INT 3
19735: PPUSH
19736: CALL_OW 275
19740: PUSH
19741: LD_VAR 0 4
19745: PUSH
19746: LD_INT 3
19748: ARRAY
19749: GREATEREQUAL
19750: AND
19751: ST_TO_ADDR
// end ;
19752: LD_VAR 0 2
19756: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19757: LD_INT 0
19759: PPUSH
19760: PPUSH
19761: PPUSH
// pom := GetBase ( building ) ;
19762: LD_ADDR_VAR 0 4
19766: PUSH
19767: LD_VAR 0 1
19771: PPUSH
19772: CALL_OW 274
19776: ST_TO_ADDR
// if not pom then
19777: LD_VAR 0 4
19781: NOT
19782: IFFALSE 19786
// exit ;
19784: GO 19887
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19786: LD_ADDR_VAR 0 5
19790: PUSH
19791: LD_VAR 0 2
19795: PPUSH
19796: LD_VAR 0 1
19800: PPUSH
19801: CALL_OW 248
19805: PPUSH
19806: CALL_OW 450
19810: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19811: LD_ADDR_VAR 0 3
19815: PUSH
19816: LD_VAR 0 4
19820: PPUSH
19821: LD_INT 1
19823: PPUSH
19824: CALL_OW 275
19828: PUSH
19829: LD_VAR 0 5
19833: PUSH
19834: LD_INT 1
19836: ARRAY
19837: GREATEREQUAL
19838: PUSH
19839: LD_VAR 0 4
19843: PPUSH
19844: LD_INT 2
19846: PPUSH
19847: CALL_OW 275
19851: PUSH
19852: LD_VAR 0 5
19856: PUSH
19857: LD_INT 2
19859: ARRAY
19860: GREATEREQUAL
19861: AND
19862: PUSH
19863: LD_VAR 0 4
19867: PPUSH
19868: LD_INT 3
19870: PPUSH
19871: CALL_OW 275
19875: PUSH
19876: LD_VAR 0 5
19880: PUSH
19881: LD_INT 3
19883: ARRAY
19884: GREATEREQUAL
19885: AND
19886: ST_TO_ADDR
// end ;
19887: LD_VAR 0 3
19891: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19892: LD_INT 0
19894: PPUSH
19895: PPUSH
19896: PPUSH
19897: PPUSH
19898: PPUSH
19899: PPUSH
19900: PPUSH
19901: PPUSH
19902: PPUSH
19903: PPUSH
19904: PPUSH
// result := false ;
19905: LD_ADDR_VAR 0 8
19909: PUSH
19910: LD_INT 0
19912: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19913: LD_VAR 0 5
19917: NOT
19918: PUSH
19919: LD_VAR 0 1
19923: NOT
19924: OR
19925: PUSH
19926: LD_VAR 0 2
19930: NOT
19931: OR
19932: PUSH
19933: LD_VAR 0 3
19937: NOT
19938: OR
19939: IFFALSE 19943
// exit ;
19941: GO 20744
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19943: LD_ADDR_VAR 0 14
19947: PUSH
19948: LD_VAR 0 1
19952: PPUSH
19953: LD_VAR 0 2
19957: PPUSH
19958: LD_VAR 0 3
19962: PPUSH
19963: LD_VAR 0 4
19967: PPUSH
19968: LD_VAR 0 5
19972: PUSH
19973: LD_INT 1
19975: ARRAY
19976: PPUSH
19977: CALL_OW 248
19981: PPUSH
19982: LD_INT 0
19984: PPUSH
19985: CALL 21581 0 6
19989: ST_TO_ADDR
// if not hexes then
19990: LD_VAR 0 14
19994: NOT
19995: IFFALSE 19999
// exit ;
19997: GO 20744
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19999: LD_ADDR_VAR 0 17
20003: PUSH
20004: LD_VAR 0 5
20008: PPUSH
20009: LD_INT 22
20011: PUSH
20012: LD_VAR 0 13
20016: PPUSH
20017: CALL_OW 255
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 2
20028: PUSH
20029: LD_INT 30
20031: PUSH
20032: LD_INT 0
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 30
20041: PUSH
20042: LD_INT 1
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: LIST
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PPUSH
20058: CALL_OW 72
20062: ST_TO_ADDR
// for i = 1 to hexes do
20063: LD_ADDR_VAR 0 9
20067: PUSH
20068: DOUBLE
20069: LD_INT 1
20071: DEC
20072: ST_TO_ADDR
20073: LD_VAR 0 14
20077: PUSH
20078: FOR_TO
20079: IFFALSE 20742
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20081: LD_ADDR_VAR 0 13
20085: PUSH
20086: LD_VAR 0 14
20090: PUSH
20091: LD_VAR 0 9
20095: ARRAY
20096: PUSH
20097: LD_INT 1
20099: ARRAY
20100: PPUSH
20101: LD_VAR 0 14
20105: PUSH
20106: LD_VAR 0 9
20110: ARRAY
20111: PUSH
20112: LD_INT 2
20114: ARRAY
20115: PPUSH
20116: CALL_OW 428
20120: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20121: LD_VAR 0 14
20125: PUSH
20126: LD_VAR 0 9
20130: ARRAY
20131: PUSH
20132: LD_INT 1
20134: ARRAY
20135: PPUSH
20136: LD_VAR 0 14
20140: PUSH
20141: LD_VAR 0 9
20145: ARRAY
20146: PUSH
20147: LD_INT 2
20149: ARRAY
20150: PPUSH
20151: CALL_OW 351
20155: PUSH
20156: LD_VAR 0 14
20160: PUSH
20161: LD_VAR 0 9
20165: ARRAY
20166: PUSH
20167: LD_INT 1
20169: ARRAY
20170: PPUSH
20171: LD_VAR 0 14
20175: PUSH
20176: LD_VAR 0 9
20180: ARRAY
20181: PUSH
20182: LD_INT 2
20184: ARRAY
20185: PPUSH
20186: CALL_OW 488
20190: NOT
20191: OR
20192: PUSH
20193: LD_VAR 0 13
20197: PPUSH
20198: CALL_OW 247
20202: PUSH
20203: LD_INT 3
20205: EQUAL
20206: OR
20207: IFFALSE 20213
// exit ;
20209: POP
20210: POP
20211: GO 20744
// if not tmp then
20213: LD_VAR 0 13
20217: NOT
20218: IFFALSE 20222
// continue ;
20220: GO 20078
// result := true ;
20222: LD_ADDR_VAR 0 8
20226: PUSH
20227: LD_INT 1
20229: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20230: LD_VAR 0 13
20234: PPUSH
20235: CALL_OW 247
20239: PUSH
20240: LD_INT 2
20242: EQUAL
20243: PUSH
20244: LD_VAR 0 13
20248: PPUSH
20249: CALL_OW 263
20253: PUSH
20254: LD_INT 1
20256: EQUAL
20257: AND
20258: IFFALSE 20422
// begin if IsDrivenBy ( tmp ) then
20260: LD_VAR 0 13
20264: PPUSH
20265: CALL_OW 311
20269: IFFALSE 20273
// continue ;
20271: GO 20078
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20273: LD_VAR 0 6
20277: PPUSH
20278: LD_INT 3
20280: PUSH
20281: LD_INT 60
20283: PUSH
20284: EMPTY
20285: LIST
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 3
20293: PUSH
20294: LD_INT 55
20296: PUSH
20297: EMPTY
20298: LIST
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PPUSH
20308: CALL_OW 72
20312: IFFALSE 20420
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20314: LD_ADDR_VAR 0 18
20318: PUSH
20319: LD_VAR 0 6
20323: PPUSH
20324: LD_INT 3
20326: PUSH
20327: LD_INT 60
20329: PUSH
20330: EMPTY
20331: LIST
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 3
20339: PUSH
20340: LD_INT 55
20342: PUSH
20343: EMPTY
20344: LIST
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PPUSH
20354: CALL_OW 72
20358: PUSH
20359: LD_INT 1
20361: ARRAY
20362: ST_TO_ADDR
// if IsInUnit ( driver ) then
20363: LD_VAR 0 18
20367: PPUSH
20368: CALL_OW 310
20372: IFFALSE 20383
// ComExit ( driver ) ;
20374: LD_VAR 0 18
20378: PPUSH
20379: CALL 44765 0 1
// AddComEnterUnit ( driver , tmp ) ;
20383: LD_VAR 0 18
20387: PPUSH
20388: LD_VAR 0 13
20392: PPUSH
20393: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20397: LD_VAR 0 18
20401: PPUSH
20402: LD_VAR 0 7
20406: PPUSH
20407: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20411: LD_VAR 0 18
20415: PPUSH
20416: CALL_OW 181
// end ; continue ;
20420: GO 20078
// end ; if not tmp in cleaners then
20422: LD_VAR 0 13
20426: PUSH
20427: LD_VAR 0 6
20431: IN
20432: NOT
20433: IFFALSE 20740
// begin if dep then
20435: LD_VAR 0 17
20439: IFFALSE 20575
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20441: LD_ADDR_VAR 0 16
20445: PUSH
20446: LD_VAR 0 17
20450: PUSH
20451: LD_INT 1
20453: ARRAY
20454: PPUSH
20455: CALL_OW 250
20459: PPUSH
20460: LD_VAR 0 17
20464: PUSH
20465: LD_INT 1
20467: ARRAY
20468: PPUSH
20469: CALL_OW 254
20473: PPUSH
20474: LD_INT 5
20476: PPUSH
20477: CALL_OW 272
20481: PUSH
20482: LD_VAR 0 17
20486: PUSH
20487: LD_INT 1
20489: ARRAY
20490: PPUSH
20491: CALL_OW 251
20495: PPUSH
20496: LD_VAR 0 17
20500: PUSH
20501: LD_INT 1
20503: ARRAY
20504: PPUSH
20505: CALL_OW 254
20509: PPUSH
20510: LD_INT 5
20512: PPUSH
20513: CALL_OW 273
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20522: LD_VAR 0 16
20526: PUSH
20527: LD_INT 1
20529: ARRAY
20530: PPUSH
20531: LD_VAR 0 16
20535: PUSH
20536: LD_INT 2
20538: ARRAY
20539: PPUSH
20540: CALL_OW 488
20544: IFFALSE 20575
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20546: LD_VAR 0 13
20550: PPUSH
20551: LD_VAR 0 16
20555: PUSH
20556: LD_INT 1
20558: ARRAY
20559: PPUSH
20560: LD_VAR 0 16
20564: PUSH
20565: LD_INT 2
20567: ARRAY
20568: PPUSH
20569: CALL_OW 111
// continue ;
20573: GO 20078
// end ; end ; r := GetDir ( tmp ) ;
20575: LD_ADDR_VAR 0 15
20579: PUSH
20580: LD_VAR 0 13
20584: PPUSH
20585: CALL_OW 254
20589: ST_TO_ADDR
// if r = 5 then
20590: LD_VAR 0 15
20594: PUSH
20595: LD_INT 5
20597: EQUAL
20598: IFFALSE 20608
// r := 0 ;
20600: LD_ADDR_VAR 0 15
20604: PUSH
20605: LD_INT 0
20607: ST_TO_ADDR
// for j = r to 5 do
20608: LD_ADDR_VAR 0 10
20612: PUSH
20613: DOUBLE
20614: LD_VAR 0 15
20618: DEC
20619: ST_TO_ADDR
20620: LD_INT 5
20622: PUSH
20623: FOR_TO
20624: IFFALSE 20738
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20626: LD_ADDR_VAR 0 11
20630: PUSH
20631: LD_VAR 0 13
20635: PPUSH
20636: CALL_OW 250
20640: PPUSH
20641: LD_VAR 0 10
20645: PPUSH
20646: LD_INT 2
20648: PPUSH
20649: CALL_OW 272
20653: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20654: LD_ADDR_VAR 0 12
20658: PUSH
20659: LD_VAR 0 13
20663: PPUSH
20664: CALL_OW 251
20668: PPUSH
20669: LD_VAR 0 10
20673: PPUSH
20674: LD_INT 2
20676: PPUSH
20677: CALL_OW 273
20681: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20682: LD_VAR 0 11
20686: PPUSH
20687: LD_VAR 0 12
20691: PPUSH
20692: CALL_OW 488
20696: PUSH
20697: LD_VAR 0 11
20701: PPUSH
20702: LD_VAR 0 12
20706: PPUSH
20707: CALL_OW 428
20711: NOT
20712: AND
20713: IFFALSE 20736
// begin ComMoveXY ( tmp , _x , _y ) ;
20715: LD_VAR 0 13
20719: PPUSH
20720: LD_VAR 0 11
20724: PPUSH
20725: LD_VAR 0 12
20729: PPUSH
20730: CALL_OW 111
// break ;
20734: GO 20738
// end ; end ;
20736: GO 20623
20738: POP
20739: POP
// end ; end ;
20740: GO 20078
20742: POP
20743: POP
// end ;
20744: LD_VAR 0 8
20748: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
20749: LD_INT 0
20751: PPUSH
20752: PPUSH
20753: PPUSH
20754: PPUSH
20755: PPUSH
20756: PPUSH
20757: PPUSH
20758: PPUSH
20759: PPUSH
20760: PPUSH
// result := false ;
20761: LD_ADDR_VAR 0 6
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
20769: LD_VAR 0 1
20773: NOT
20774: PUSH
20775: LD_VAR 0 1
20779: PPUSH
20780: CALL_OW 266
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: IN
20795: NOT
20796: OR
20797: PUSH
20798: LD_VAR 0 2
20802: NOT
20803: OR
20804: PUSH
20805: LD_VAR 0 5
20809: PUSH
20810: LD_INT 0
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: LD_INT 3
20821: PUSH
20822: LD_INT 4
20824: PUSH
20825: LD_INT 5
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: IN
20836: NOT
20837: OR
20838: PUSH
20839: LD_VAR 0 3
20843: PPUSH
20844: LD_VAR 0 4
20848: PPUSH
20849: CALL_OW 488
20853: NOT
20854: OR
20855: IFFALSE 20859
// exit ;
20857: GO 21576
// pom := GetBase ( depot ) ;
20859: LD_ADDR_VAR 0 10
20863: PUSH
20864: LD_VAR 0 1
20868: PPUSH
20869: CALL_OW 274
20873: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
20874: LD_ADDR_VAR 0 11
20878: PUSH
20879: LD_VAR 0 2
20883: PPUSH
20884: LD_VAR 0 1
20888: PPUSH
20889: CALL_OW 248
20893: PPUSH
20894: CALL_OW 450
20898: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
20899: LD_VAR 0 10
20903: PPUSH
20904: LD_INT 1
20906: PPUSH
20907: CALL_OW 275
20911: PUSH
20912: LD_VAR 0 11
20916: PUSH
20917: LD_INT 1
20919: ARRAY
20920: GREATEREQUAL
20921: PUSH
20922: LD_VAR 0 10
20926: PPUSH
20927: LD_INT 2
20929: PPUSH
20930: CALL_OW 275
20934: PUSH
20935: LD_VAR 0 11
20939: PUSH
20940: LD_INT 2
20942: ARRAY
20943: GREATEREQUAL
20944: AND
20945: PUSH
20946: LD_VAR 0 10
20950: PPUSH
20951: LD_INT 3
20953: PPUSH
20954: CALL_OW 275
20958: PUSH
20959: LD_VAR 0 11
20963: PUSH
20964: LD_INT 3
20966: ARRAY
20967: GREATEREQUAL
20968: AND
20969: NOT
20970: IFFALSE 20974
// exit ;
20972: GO 21576
// if GetBType ( depot ) = b_depot then
20974: LD_VAR 0 1
20978: PPUSH
20979: CALL_OW 266
20983: PUSH
20984: LD_INT 0
20986: EQUAL
20987: IFFALSE 20999
// dist := 28 else
20989: LD_ADDR_VAR 0 14
20993: PUSH
20994: LD_INT 28
20996: ST_TO_ADDR
20997: GO 21007
// dist := 36 ;
20999: LD_ADDR_VAR 0 14
21003: PUSH
21004: LD_INT 36
21006: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21007: LD_VAR 0 1
21011: PPUSH
21012: LD_VAR 0 3
21016: PPUSH
21017: LD_VAR 0 4
21021: PPUSH
21022: CALL_OW 297
21026: PUSH
21027: LD_VAR 0 14
21031: GREATER
21032: IFFALSE 21036
// exit ;
21034: GO 21576
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21036: LD_ADDR_VAR 0 12
21040: PUSH
21041: LD_VAR 0 2
21045: PPUSH
21046: LD_VAR 0 3
21050: PPUSH
21051: LD_VAR 0 4
21055: PPUSH
21056: LD_VAR 0 5
21060: PPUSH
21061: LD_VAR 0 1
21065: PPUSH
21066: CALL_OW 248
21070: PPUSH
21071: LD_INT 0
21073: PPUSH
21074: CALL 21581 0 6
21078: ST_TO_ADDR
// if not hexes then
21079: LD_VAR 0 12
21083: NOT
21084: IFFALSE 21088
// exit ;
21086: GO 21576
// hex := GetHexInfo ( x , y ) ;
21088: LD_ADDR_VAR 0 15
21092: PUSH
21093: LD_VAR 0 3
21097: PPUSH
21098: LD_VAR 0 4
21102: PPUSH
21103: CALL_OW 546
21107: ST_TO_ADDR
// if hex [ 1 ] then
21108: LD_VAR 0 15
21112: PUSH
21113: LD_INT 1
21115: ARRAY
21116: IFFALSE 21120
// exit ;
21118: GO 21576
// height := hex [ 2 ] ;
21120: LD_ADDR_VAR 0 13
21124: PUSH
21125: LD_VAR 0 15
21129: PUSH
21130: LD_INT 2
21132: ARRAY
21133: ST_TO_ADDR
// for i = 1 to hexes do
21134: LD_ADDR_VAR 0 7
21138: PUSH
21139: DOUBLE
21140: LD_INT 1
21142: DEC
21143: ST_TO_ADDR
21144: LD_VAR 0 12
21148: PUSH
21149: FOR_TO
21150: IFFALSE 21480
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21152: LD_VAR 0 12
21156: PUSH
21157: LD_VAR 0 7
21161: ARRAY
21162: PUSH
21163: LD_INT 1
21165: ARRAY
21166: PPUSH
21167: LD_VAR 0 12
21171: PUSH
21172: LD_VAR 0 7
21176: ARRAY
21177: PUSH
21178: LD_INT 2
21180: ARRAY
21181: PPUSH
21182: CALL_OW 488
21186: NOT
21187: PUSH
21188: LD_VAR 0 12
21192: PUSH
21193: LD_VAR 0 7
21197: ARRAY
21198: PUSH
21199: LD_INT 1
21201: ARRAY
21202: PPUSH
21203: LD_VAR 0 12
21207: PUSH
21208: LD_VAR 0 7
21212: ARRAY
21213: PUSH
21214: LD_INT 2
21216: ARRAY
21217: PPUSH
21218: CALL_OW 428
21222: PUSH
21223: LD_INT 0
21225: GREATER
21226: OR
21227: PUSH
21228: LD_VAR 0 12
21232: PUSH
21233: LD_VAR 0 7
21237: ARRAY
21238: PUSH
21239: LD_INT 1
21241: ARRAY
21242: PPUSH
21243: LD_VAR 0 12
21247: PUSH
21248: LD_VAR 0 7
21252: ARRAY
21253: PUSH
21254: LD_INT 2
21256: ARRAY
21257: PPUSH
21258: CALL_OW 351
21262: OR
21263: IFFALSE 21269
// exit ;
21265: POP
21266: POP
21267: GO 21576
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21269: LD_ADDR_VAR 0 8
21273: PUSH
21274: LD_VAR 0 12
21278: PUSH
21279: LD_VAR 0 7
21283: ARRAY
21284: PUSH
21285: LD_INT 1
21287: ARRAY
21288: PPUSH
21289: LD_VAR 0 12
21293: PUSH
21294: LD_VAR 0 7
21298: ARRAY
21299: PUSH
21300: LD_INT 2
21302: ARRAY
21303: PPUSH
21304: CALL_OW 546
21308: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21309: LD_VAR 0 8
21313: PUSH
21314: LD_INT 1
21316: ARRAY
21317: PUSH
21318: LD_VAR 0 8
21322: PUSH
21323: LD_INT 2
21325: ARRAY
21326: PUSH
21327: LD_VAR 0 13
21331: PUSH
21332: LD_INT 2
21334: PLUS
21335: GREATER
21336: OR
21337: PUSH
21338: LD_VAR 0 8
21342: PUSH
21343: LD_INT 2
21345: ARRAY
21346: PUSH
21347: LD_VAR 0 13
21351: PUSH
21352: LD_INT 2
21354: MINUS
21355: LESS
21356: OR
21357: PUSH
21358: LD_VAR 0 8
21362: PUSH
21363: LD_INT 3
21365: ARRAY
21366: PUSH
21367: LD_INT 0
21369: PUSH
21370: LD_INT 8
21372: PUSH
21373: LD_INT 9
21375: PUSH
21376: LD_INT 10
21378: PUSH
21379: LD_INT 11
21381: PUSH
21382: LD_INT 12
21384: PUSH
21385: LD_INT 13
21387: PUSH
21388: LD_INT 16
21390: PUSH
21391: LD_INT 17
21393: PUSH
21394: LD_INT 18
21396: PUSH
21397: LD_INT 19
21399: PUSH
21400: LD_INT 20
21402: PUSH
21403: LD_INT 21
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: IN
21421: NOT
21422: OR
21423: PUSH
21424: LD_VAR 0 8
21428: PUSH
21429: LD_INT 5
21431: ARRAY
21432: NOT
21433: OR
21434: PUSH
21435: LD_VAR 0 8
21439: PUSH
21440: LD_INT 6
21442: ARRAY
21443: PUSH
21444: LD_INT 1
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 7
21452: PUSH
21453: LD_INT 9
21455: PUSH
21456: LD_INT 10
21458: PUSH
21459: LD_INT 11
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: IN
21470: NOT
21471: OR
21472: IFFALSE 21478
// exit ;
21474: POP
21475: POP
21476: GO 21576
// end ;
21478: GO 21149
21480: POP
21481: POP
// side := GetSide ( depot ) ;
21482: LD_ADDR_VAR 0 9
21486: PUSH
21487: LD_VAR 0 1
21491: PPUSH
21492: CALL_OW 255
21496: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21497: LD_VAR 0 9
21501: PPUSH
21502: LD_VAR 0 3
21506: PPUSH
21507: LD_VAR 0 4
21511: PPUSH
21512: LD_INT 20
21514: PPUSH
21515: CALL 13910 0 4
21519: PUSH
21520: LD_INT 4
21522: ARRAY
21523: IFFALSE 21527
// exit ;
21525: GO 21576
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21527: LD_VAR 0 2
21531: PUSH
21532: LD_INT 29
21534: PUSH
21535: LD_INT 30
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: IN
21542: PUSH
21543: LD_VAR 0 3
21547: PPUSH
21548: LD_VAR 0 4
21552: PPUSH
21553: LD_VAR 0 9
21557: PPUSH
21558: CALL_OW 440
21562: NOT
21563: AND
21564: IFFALSE 21568
// exit ;
21566: GO 21576
// result := true ;
21568: LD_ADDR_VAR 0 6
21572: PUSH
21573: LD_INT 1
21575: ST_TO_ADDR
// end ;
21576: LD_VAR 0 6
21580: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21581: LD_INT 0
21583: PPUSH
21584: PPUSH
21585: PPUSH
21586: PPUSH
21587: PPUSH
21588: PPUSH
21589: PPUSH
21590: PPUSH
21591: PPUSH
21592: PPUSH
21593: PPUSH
21594: PPUSH
21595: PPUSH
21596: PPUSH
21597: PPUSH
21598: PPUSH
21599: PPUSH
21600: PPUSH
21601: PPUSH
21602: PPUSH
21603: PPUSH
21604: PPUSH
21605: PPUSH
21606: PPUSH
21607: PPUSH
21608: PPUSH
21609: PPUSH
21610: PPUSH
21611: PPUSH
21612: PPUSH
21613: PPUSH
21614: PPUSH
21615: PPUSH
21616: PPUSH
21617: PPUSH
21618: PPUSH
21619: PPUSH
21620: PPUSH
21621: PPUSH
21622: PPUSH
21623: PPUSH
21624: PPUSH
21625: PPUSH
21626: PPUSH
21627: PPUSH
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
21632: PPUSH
21633: PPUSH
21634: PPUSH
21635: PPUSH
21636: PPUSH
21637: PPUSH
21638: PPUSH
21639: PPUSH
21640: PPUSH
// result = [ ] ;
21641: LD_ADDR_VAR 0 7
21645: PUSH
21646: EMPTY
21647: ST_TO_ADDR
// temp_list = [ ] ;
21648: LD_ADDR_VAR 0 9
21652: PUSH
21653: EMPTY
21654: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
21655: LD_VAR 0 4
21659: PUSH
21660: LD_INT 0
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: LD_INT 2
21668: PUSH
21669: LD_INT 3
21671: PUSH
21672: LD_INT 4
21674: PUSH
21675: LD_INT 5
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: IN
21686: NOT
21687: PUSH
21688: LD_VAR 0 1
21692: PUSH
21693: LD_INT 0
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: IN
21703: PUSH
21704: LD_VAR 0 5
21708: PUSH
21709: LD_INT 1
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: LD_INT 3
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: LIST
21722: IN
21723: NOT
21724: AND
21725: OR
21726: IFFALSE 21730
// exit ;
21728: GO 40121
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
21730: LD_VAR 0 1
21734: PUSH
21735: LD_INT 6
21737: PUSH
21738: LD_INT 7
21740: PUSH
21741: LD_INT 8
21743: PUSH
21744: LD_INT 13
21746: PUSH
21747: LD_INT 12
21749: PUSH
21750: LD_INT 15
21752: PUSH
21753: LD_INT 11
21755: PUSH
21756: LD_INT 14
21758: PUSH
21759: LD_INT 10
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: IN
21773: IFFALSE 21783
// btype = b_lab ;
21775: LD_ADDR_VAR 0 1
21779: PUSH
21780: LD_INT 6
21782: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
21783: LD_VAR 0 6
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: LD_INT 1
21793: PUSH
21794: LD_INT 2
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: IN
21802: NOT
21803: PUSH
21804: LD_VAR 0 1
21808: PUSH
21809: LD_INT 0
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: LD_INT 2
21817: PUSH
21818: LD_INT 3
21820: PUSH
21821: LD_INT 6
21823: PUSH
21824: LD_INT 36
21826: PUSH
21827: LD_INT 4
21829: PUSH
21830: LD_INT 5
21832: PUSH
21833: LD_INT 31
21835: PUSH
21836: LD_INT 32
21838: PUSH
21839: LD_INT 33
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: IN
21855: NOT
21856: PUSH
21857: LD_VAR 0 6
21861: PUSH
21862: LD_INT 1
21864: EQUAL
21865: AND
21866: OR
21867: PUSH
21868: LD_VAR 0 1
21872: PUSH
21873: LD_INT 2
21875: PUSH
21876: LD_INT 3
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: IN
21883: NOT
21884: PUSH
21885: LD_VAR 0 6
21889: PUSH
21890: LD_INT 2
21892: EQUAL
21893: AND
21894: OR
21895: IFFALSE 21905
// mode = 0 ;
21897: LD_ADDR_VAR 0 6
21901: PUSH
21902: LD_INT 0
21904: ST_TO_ADDR
// case mode of 0 :
21905: LD_VAR 0 6
21909: PUSH
21910: LD_INT 0
21912: DOUBLE
21913: EQUAL
21914: IFTRUE 21918
21916: GO 33371
21918: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21919: LD_ADDR_VAR 0 11
21923: PUSH
21924: LD_INT 0
21926: PUSH
21927: LD_INT 0
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 0
21936: PUSH
21937: LD_INT 1
21939: NEG
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 1
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 0
21967: PUSH
21968: LD_INT 1
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 1
21977: NEG
21978: PUSH
21979: LD_INT 0
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 1
21988: NEG
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: LD_INT 2
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 0
22012: PUSH
22013: LD_INT 2
22015: NEG
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: PUSH
22024: LD_INT 1
22026: NEG
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: LD_INT 2
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 1
22054: NEG
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: LD_INT 3
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 0
22075: PUSH
22076: LD_INT 3
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 1
22085: NEG
22086: PUSH
22087: LD_INT 2
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22112: LD_ADDR_VAR 0 12
22116: PUSH
22117: LD_INT 0
22119: PUSH
22120: LD_INT 0
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 0
22129: PUSH
22130: LD_INT 1
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 1
22150: PUSH
22151: LD_INT 1
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 0
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 1
22170: NEG
22171: PUSH
22172: LD_INT 0
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: NEG
22182: PUSH
22183: LD_INT 1
22185: NEG
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 1
22193: PUSH
22194: LD_INT 1
22196: NEG
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: PUSH
22205: LD_INT 0
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 2
22214: PUSH
22215: LD_INT 1
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 2
22235: NEG
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 2
22246: NEG
22247: PUSH
22248: LD_INT 1
22250: NEG
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 2
22258: NEG
22259: PUSH
22260: LD_INT 1
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 3
22269: NEG
22270: PUSH
22271: LD_INT 0
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 3
22280: NEG
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22308: LD_ADDR_VAR 0 13
22312: PUSH
22313: LD_INT 0
22315: PUSH
22316: LD_INT 0
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 1
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: LD_INT 1
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 1
22366: NEG
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 1
22377: NEG
22378: PUSH
22379: LD_INT 1
22381: NEG
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 1
22389: NEG
22390: PUSH
22391: LD_INT 2
22393: NEG
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 2
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 1
22421: PUSH
22422: LD_INT 2
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 2
22431: NEG
22432: PUSH
22433: LD_INT 1
22435: NEG
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 2
22443: NEG
22444: PUSH
22445: LD_INT 2
22447: NEG
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 2
22455: NEG
22456: PUSH
22457: LD_INT 3
22459: NEG
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 3
22467: NEG
22468: PUSH
22469: LD_INT 2
22471: NEG
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 3
22479: NEG
22480: PUSH
22481: LD_INT 3
22483: NEG
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22507: LD_ADDR_VAR 0 14
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: LD_INT 1
22580: NEG
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 1
22588: NEG
22589: PUSH
22590: LD_INT 2
22592: NEG
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: LD_INT 2
22603: NEG
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 1
22614: NEG
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: LD_INT 2
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 1
22642: NEG
22643: PUSH
22644: LD_INT 1
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: NEG
22654: PUSH
22655: LD_INT 3
22657: NEG
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 0
22665: PUSH
22666: LD_INT 3
22668: NEG
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: LD_INT 2
22679: NEG
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22703: LD_ADDR_VAR 0 15
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: LD_INT 0
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 0
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 1
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: LD_INT 0
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 1
22772: NEG
22773: PUSH
22774: LD_INT 1
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: LD_INT 1
22787: NEG
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 2
22795: PUSH
22796: LD_INT 0
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 2
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: NEG
22816: PUSH
22817: LD_INT 1
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 2
22826: NEG
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 2
22837: NEG
22838: PUSH
22839: LD_INT 1
22841: NEG
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 2
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 3
22860: PUSH
22861: LD_INT 0
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 3
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22896: LD_ADDR_VAR 0 16
22900: PUSH
22901: LD_INT 0
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 1
22934: PUSH
22935: LD_INT 1
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 1
22954: NEG
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 1
22965: NEG
22966: PUSH
22967: LD_INT 1
22969: NEG
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 1
22977: NEG
22978: PUSH
22979: LD_INT 2
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 2
22989: PUSH
22990: LD_INT 1
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 2
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 1
23009: PUSH
23010: LD_INT 2
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 2
23019: NEG
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 2
23031: NEG
23032: PUSH
23033: LD_INT 2
23035: NEG
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 3
23053: PUSH
23054: LD_INT 3
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 2
23063: PUSH
23064: LD_INT 3
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23089: LD_ADDR_VAR 0 17
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: LD_INT 1
23109: NEG
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 1
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: LD_INT 1
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: PUSH
23149: LD_INT 0
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: LD_INT 1
23162: NEG
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 1
23170: NEG
23171: PUSH
23172: LD_INT 2
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 0
23182: PUSH
23183: LD_INT 2
23185: NEG
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 2
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 2
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 2
23224: PUSH
23225: LD_INT 2
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: LD_INT 2
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: LD_INT 1
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 2
23265: NEG
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: NEG
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: NEG
23289: PUSH
23290: LD_INT 2
23292: NEG
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23319: LD_ADDR_VAR 0 18
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: LD_INT 1
23339: NEG
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: NEG
23378: PUSH
23379: LD_INT 0
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: NEG
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 1
23400: NEG
23401: PUSH
23402: LD_INT 2
23404: NEG
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 0
23412: PUSH
23413: LD_INT 2
23415: NEG
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 1
23423: PUSH
23424: LD_INT 1
23426: NEG
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 2
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 2
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: LD_INT 2
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: LD_INT 2
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: LD_INT 1
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 2
23495: NEG
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: NEG
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 2
23518: NEG
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23549: LD_ADDR_VAR 0 19
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: LD_INT 1
23569: NEG
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: LD_INT 0
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: NEG
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: LD_INT 1
23622: NEG
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: NEG
23631: PUSH
23632: LD_INT 2
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 2
23645: NEG
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 1
23653: PUSH
23654: LD_INT 1
23656: NEG
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 2
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 2
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 2
23684: PUSH
23685: LD_INT 2
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: LD_INT 2
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: NEG
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 2
23725: NEG
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 2
23736: NEG
23737: PUSH
23738: LD_INT 1
23740: NEG
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 2
23748: NEG
23749: PUSH
23750: LD_INT 2
23752: NEG
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23779: LD_ADDR_VAR 0 20
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: LD_INT 0
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: LD_INT 1
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: LD_INT 0
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: LD_INT 0
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: NEG
23849: PUSH
23850: LD_INT 1
23852: NEG
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: PUSH
23862: LD_INT 2
23864: NEG
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 0
23872: PUSH
23873: LD_INT 2
23875: NEG
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 2
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 2
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 2
23914: PUSH
23915: LD_INT 2
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: LD_INT 2
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 2
23955: NEG
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 2
23966: NEG
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 2
23978: NEG
23979: PUSH
23980: LD_INT 2
23982: NEG
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24009: LD_ADDR_VAR 0 21
24013: PUSH
24014: LD_INT 0
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 0
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 1
24067: NEG
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: NEG
24091: PUSH
24092: LD_INT 2
24094: NEG
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: LD_INT 2
24105: NEG
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 2
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 2
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: LD_INT 2
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 2
24185: NEG
24186: PUSH
24187: LD_INT 0
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 2
24196: NEG
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 2
24208: NEG
24209: PUSH
24210: LD_INT 2
24212: NEG
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24239: LD_ADDR_VAR 0 22
24243: PUSH
24244: LD_INT 0
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: LD_INT 1
24259: NEG
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 1
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 1
24297: NEG
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: LD_INT 1
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: NEG
24321: PUSH
24322: LD_INT 2
24324: NEG
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: LD_INT 2
24335: NEG
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 1
24343: PUSH
24344: LD_INT 1
24346: NEG
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 2
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 2
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 0
24394: PUSH
24395: LD_INT 2
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 2
24415: NEG
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 2
24426: NEG
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: NEG
24439: PUSH
24440: LD_INT 2
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24469: LD_ADDR_VAR 0 23
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: LD_INT 1
24489: NEG
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 1
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 0
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 1
24527: NEG
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 1
24538: NEG
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 1
24550: NEG
24551: PUSH
24552: LD_INT 2
24554: NEG
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: LD_INT 2
24565: NEG
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: LD_INT 1
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: NEG
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 2
24645: NEG
24646: PUSH
24647: LD_INT 0
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 2
24656: NEG
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 2
24668: NEG
24669: PUSH
24670: LD_INT 2
24672: NEG
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 2
24680: NEG
24681: PUSH
24682: LD_INT 3
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: NEG
24693: PUSH
24694: LD_INT 3
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 1
24704: PUSH
24705: LD_INT 2
24707: NEG
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 2
24715: PUSH
24716: LD_INT 1
24718: NEG
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
24749: LD_ADDR_VAR 0 24
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: LD_INT 1
24769: NEG
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 1
24777: PUSH
24778: LD_INT 0
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: NEG
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: NEG
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: LD_INT 2
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 0
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: LD_INT 1
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 2
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 2
24884: PUSH
24885: LD_INT 2
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: LD_INT 2
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 0
24904: PUSH
24905: LD_INT 2
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: NEG
24915: PUSH
24916: LD_INT 1
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 2
24925: NEG
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 2
24936: NEG
24937: PUSH
24938: LD_INT 1
24940: NEG
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 2
24948: NEG
24949: PUSH
24950: LD_INT 2
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: PUSH
24961: LD_INT 2
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 2
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 3
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 3
24992: PUSH
24993: LD_INT 2
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25025: LD_ADDR_VAR 0 25
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 1
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 0
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 1
25083: NEG
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 1
25094: NEG
25095: PUSH
25096: LD_INT 1
25098: NEG
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: LD_INT 2
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: LD_INT 1
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 2
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: LD_INT 2
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 0
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 1
25190: NEG
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 2
25201: NEG
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 2
25212: NEG
25213: PUSH
25214: LD_INT 1
25216: NEG
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 2
25224: NEG
25225: PUSH
25226: LD_INT 2
25228: NEG
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 3
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 3
25246: PUSH
25247: LD_INT 2
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 2
25256: PUSH
25257: LD_INT 3
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 1
25266: PUSH
25267: LD_INT 3
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25299: LD_ADDR_VAR 0 26
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: LD_INT 1
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: LD_INT 2
25384: NEG
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 0
25392: PUSH
25393: LD_INT 2
25395: NEG
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: LD_INT 1
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 2
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: LD_INT 2
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 2
25475: NEG
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: NEG
25499: PUSH
25500: LD_INT 2
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 2
25510: PUSH
25511: LD_INT 3
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 1
25520: PUSH
25521: LD_INT 3
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: LD_INT 2
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 2
25541: NEG
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25575: LD_ADDR_VAR 0 27
25579: PUSH
25580: LD_INT 0
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: LD_INT 1
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: LD_INT 1
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 1
25656: NEG
25657: PUSH
25658: LD_INT 2
25660: NEG
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: LD_INT 2
25671: NEG
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 2
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 2
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 2
25710: PUSH
25711: LD_INT 2
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: LD_INT 2
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 1
25740: NEG
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 2
25751: NEG
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 2
25762: NEG
25763: PUSH
25764: LD_INT 1
25766: NEG
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 2
25774: NEG
25775: PUSH
25776: LD_INT 2
25778: NEG
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 2
25797: NEG
25798: PUSH
25799: LD_INT 1
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 3
25808: NEG
25809: PUSH
25810: LD_INT 1
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 3
25820: NEG
25821: PUSH
25822: LD_INT 2
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25855: LD_ADDR_VAR 0 28
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: LD_INT 1
25875: NEG
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 1
25924: NEG
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: NEG
25937: PUSH
25938: LD_INT 2
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: LD_INT 2
25951: NEG
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: LD_INT 1
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 0
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 2
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 1
26020: NEG
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: NEG
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 2
26042: NEG
26043: PUSH
26044: LD_INT 1
26046: NEG
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 2
26054: NEG
26055: PUSH
26056: LD_INT 2
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: LD_INT 3
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 3
26082: NEG
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 3
26090: NEG
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 3
26102: NEG
26103: PUSH
26104: LD_INT 2
26106: NEG
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26137: LD_ADDR_VAR 0 29
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: LD_INT 0
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: LD_INT 1
26210: NEG
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: NEG
26219: PUSH
26220: LD_INT 2
26222: NEG
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 0
26230: PUSH
26231: LD_INT 2
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: LD_INT 1
26244: NEG
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: LD_INT 2
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 1
26292: NEG
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 2
26315: NEG
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: LD_INT 3
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 2
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 3
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 3
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: LD_INT 2
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 3
26381: NEG
26382: PUSH
26383: LD_INT 2
26385: NEG
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26416: LD_ADDR_VAR 0 30
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: LD_INT 0
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 1
26474: NEG
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: NEG
26486: PUSH
26487: LD_INT 1
26489: NEG
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: PUSH
26499: LD_INT 2
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: LD_INT 2
26512: NEG
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 1
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 2
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 2
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: LD_INT 2
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 2
26582: NEG
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 2
26593: NEG
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 1
26605: NEG
26606: PUSH
26607: LD_INT 3
26609: NEG
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: LD_INT 2
26620: NEG
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 3
26628: PUSH
26629: LD_INT 2
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 2
26638: PUSH
26639: LD_INT 3
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 2
26648: NEG
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 3
26659: NEG
26660: PUSH
26661: LD_INT 1
26663: NEG
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26694: LD_ADDR_VAR 0 31
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: LD_INT 1
26714: NEG
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 1
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: NEG
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 1
26763: NEG
26764: PUSH
26765: LD_INT 1
26767: NEG
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: NEG
26776: PUSH
26777: LD_INT 2
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: LD_INT 1
26790: NEG
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 2
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: LD_INT 2
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 2
26859: NEG
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: NEG
26872: PUSH
26873: LD_INT 2
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: NEG
26884: PUSH
26885: LD_INT 3
26887: NEG
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 2
26895: PUSH
26896: LD_INT 1
26898: NEG
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 3
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: LD_INT 3
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: LD_INT 2
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 3
26937: NEG
26938: PUSH
26939: LD_INT 2
26941: NEG
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26972: LD_ADDR_VAR 0 32
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: NEG
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: LD_INT 2
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 2
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 2
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 2
27138: NEG
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 2
27149: NEG
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: LD_INT 3
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: LD_INT 2
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 3
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 2
27194: PUSH
27195: LD_INT 3
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 2
27204: NEG
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 3
27215: NEG
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27250: LD_ADDR_VAR 0 33
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 2
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: LD_INT 2
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 1
27394: NEG
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 2
27405: NEG
27406: PUSH
27407: LD_INT 0
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 2
27416: NEG
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 2
27428: NEG
27429: PUSH
27430: LD_INT 2
27432: NEG
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 2
27440: NEG
27441: PUSH
27442: LD_INT 3
27444: NEG
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 2
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 3
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: LD_INT 3
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 1
27483: NEG
27484: PUSH
27485: LD_INT 2
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 3
27494: NEG
27495: PUSH
27496: LD_INT 2
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27529: LD_ADDR_VAR 0 34
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 0
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: LD_INT 1
27602: NEG
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: LD_INT 2
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: LD_INT 2
27625: NEG
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: LD_INT 1
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: LD_INT 2
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: NEG
27675: PUSH
27676: LD_INT 1
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 2
27685: NEG
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 2
27696: NEG
27697: PUSH
27698: LD_INT 1
27700: NEG
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 2
27708: NEG
27709: PUSH
27710: LD_INT 2
27712: NEG
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: LD_INT 3
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: LD_INT 2
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 3
27743: PUSH
27744: LD_INT 2
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 2
27753: PUSH
27754: LD_INT 3
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 2
27763: NEG
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 3
27774: NEG
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27809: LD_ADDR_VAR 0 35
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 0
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 1
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 0
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 1
27867: NEG
27868: PUSH
27869: LD_INT 0
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 1
27878: NEG
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 2
27900: NEG
27901: PUSH
27902: LD_INT 1
27904: NEG
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27921: LD_ADDR_VAR 0 36
27925: PUSH
27926: LD_INT 0
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: LD_INT 1
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 1
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: LD_INT 2
28006: NEG
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: LD_INT 2
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28033: LD_ADDR_VAR 0 37
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: LD_INT 1
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28145: LD_ADDR_VAR 0 38
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: LD_INT 1
28165: NEG
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 1
28173: PUSH
28174: LD_INT 0
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: LD_INT 1
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: LD_INT 0
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 1
28214: NEG
28215: PUSH
28216: LD_INT 1
28218: NEG
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 2
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 2
28236: NEG
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28257: LD_ADDR_VAR 0 39
28261: PUSH
28262: LD_INT 0
28264: PUSH
28265: LD_INT 0
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 0
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 1
28285: PUSH
28286: LD_INT 0
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 1
28295: PUSH
28296: LD_INT 1
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 0
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: LD_INT 0
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: NEG
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: LD_INT 2
28342: NEG
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: LD_INT 2
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28369: LD_ADDR_VAR 0 40
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: NEG
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 1
28461: NEG
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28481: LD_ADDR_VAR 0 41
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 0
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 1
28539: NEG
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 2
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 2
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 2
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 2
28605: PUSH
28606: LD_INT 2
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 1
28615: PUSH
28616: LD_INT 2
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 2
28636: NEG
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: NEG
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: NEG
28660: PUSH
28661: LD_INT 2
28663: NEG
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: NEG
28672: PUSH
28673: LD_INT 3
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: LD_INT 1
28686: NEG
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 3
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 3
28714: PUSH
28715: LD_INT 2
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 3
28724: PUSH
28725: LD_INT 3
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 2
28734: PUSH
28735: LD_INT 3
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 2
28744: NEG
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 3
28755: NEG
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 3
28766: NEG
28767: PUSH
28768: LD_INT 1
28770: NEG
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 3
28778: NEG
28779: PUSH
28780: LD_INT 2
28782: NEG
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 3
28790: NEG
28791: PUSH
28792: LD_INT 3
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28831: LD_ADDR_VAR 0 42
28835: PUSH
28836: LD_INT 0
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 1
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: LD_INT 1
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: NEG
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: NEG
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: NEG
28913: PUSH
28914: LD_INT 2
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 2
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 2
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 2
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: LD_INT 2
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 2
28997: NEG
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 2
29009: NEG
29010: PUSH
29011: LD_INT 2
29013: NEG
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 2
29021: NEG
29022: PUSH
29023: LD_INT 3
29025: NEG
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: NEG
29034: PUSH
29035: LD_INT 3
29037: NEG
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: LD_INT 3
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: LD_INT 2
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 3
29067: PUSH
29068: LD_INT 2
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 3
29077: PUSH
29078: LD_INT 3
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 2
29087: PUSH
29088: LD_INT 3
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 1
29097: PUSH
29098: LD_INT 3
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: LD_INT 3
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 3
29128: NEG
29129: PUSH
29130: LD_INT 2
29132: NEG
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 3
29140: NEG
29141: PUSH
29142: LD_INT 3
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29181: LD_ADDR_VAR 0 43
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 1
29250: NEG
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 1
29262: NEG
29263: PUSH
29264: LD_INT 2
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 2
29277: NEG
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: PUSH
29286: LD_INT 1
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 2
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 2
29306: PUSH
29307: LD_INT 1
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 0
29326: PUSH
29327: LD_INT 2
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 2
29347: NEG
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 1
29370: NEG
29371: PUSH
29372: LD_INT 3
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 0
29382: PUSH
29383: LD_INT 3
29385: NEG
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 1
29393: PUSH
29394: LD_INT 2
29396: NEG
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 2
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 3
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 3
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: LD_INT 3
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 2
29466: NEG
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 3
29477: NEG
29478: PUSH
29479: LD_INT 0
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 3
29488: NEG
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29529: LD_ADDR_VAR 0 44
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: LD_INT 0
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: LD_INT 1
29549: NEG
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 1
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: LD_INT 1
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 1
29587: NEG
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: NEG
29599: PUSH
29600: LD_INT 1
29602: NEG
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: LD_INT 2
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 2
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: LD_INT 1
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 2
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: LD_INT 2
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 1
29673: NEG
29674: PUSH
29675: LD_INT 1
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 2
29684: NEG
29685: PUSH
29686: LD_INT 0
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 2
29695: NEG
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 2
29707: NEG
29708: PUSH
29709: LD_INT 2
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 2
29719: NEG
29720: PUSH
29721: LD_INT 3
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: LD_INT 1
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 3
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 3
29752: PUSH
29753: LD_INT 1
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 3
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 3
29772: PUSH
29773: LD_INT 3
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 2
29782: PUSH
29783: LD_INT 3
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 2
29792: NEG
29793: PUSH
29794: LD_INT 1
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 3
29803: NEG
29804: PUSH
29805: LD_INT 0
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 3
29814: NEG
29815: PUSH
29816: LD_INT 1
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 3
29826: NEG
29827: PUSH
29828: LD_INT 2
29830: NEG
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 3
29838: NEG
29839: PUSH
29840: LD_INT 3
29842: NEG
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29879: LD_ADDR_VAR 0 45
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 0
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: LD_INT 0
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: LD_INT 1
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: LD_INT 2
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 0
29972: PUSH
29973: LD_INT 2
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: LD_INT 2
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: LD_INT 2
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: LD_INT 2
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 2
30045: NEG
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 2
30057: NEG
30058: PUSH
30059: LD_INT 2
30061: NEG
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 2
30069: NEG
30070: PUSH
30071: LD_INT 3
30073: NEG
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 1
30081: NEG
30082: PUSH
30083: LD_INT 3
30085: NEG
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: LD_INT 3
30096: NEG
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: LD_INT 2
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 3
30115: PUSH
30116: LD_INT 2
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 3
30125: PUSH
30126: LD_INT 3
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 2
30135: PUSH
30136: LD_INT 3
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 1
30145: PUSH
30146: LD_INT 3
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: LD_INT 3
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: NEG
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 3
30176: NEG
30177: PUSH
30178: LD_INT 2
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 3
30188: NEG
30189: PUSH
30190: LD_INT 3
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30229: LD_ADDR_VAR 0 46
30233: PUSH
30234: LD_INT 0
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 0
30246: PUSH
30247: LD_INT 1
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 1
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 0
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 1
30298: NEG
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: LD_INT 2
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 0
30322: PUSH
30323: LD_INT 2
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: LD_INT 1
30336: NEG
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 2
30344: PUSH
30345: LD_INT 0
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 2
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: NEG
30385: PUSH
30386: LD_INT 1
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 2
30395: NEG
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 2
30406: NEG
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 1
30418: NEG
30419: PUSH
30420: LD_INT 3
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 0
30430: PUSH
30431: LD_INT 3
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: LD_INT 2
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: LD_INT 1
30455: NEG
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 3
30463: PUSH
30464: LD_INT 0
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 3
30473: PUSH
30474: LD_INT 1
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: LD_INT 3
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: LD_INT 3
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 1
30503: NEG
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 2
30514: NEG
30515: PUSH
30516: LD_INT 1
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 3
30525: NEG
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 3
30536: NEG
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30577: LD_ADDR_VAR 0 47
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 1
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 0
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: LD_INT 0
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 1
30646: NEG
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: LD_INT 2
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: LD_INT 2
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 2
30692: NEG
30693: PUSH
30694: LD_INT 1
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 2
30704: NEG
30705: PUSH
30706: LD_INT 2
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30728: LD_ADDR_VAR 0 48
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: LD_INT 1
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 0
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 1
30786: NEG
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: LD_INT 1
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: LD_INT 2
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 2
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 1
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 2
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 2
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30875: LD_ADDR_VAR 0 49
30879: PUSH
30880: LD_INT 0
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 1
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 1
30944: NEG
30945: PUSH
30946: LD_INT 1
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 2
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 2
30987: PUSH
30988: LD_INT 2
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31019: LD_ADDR_VAR 0 50
31023: PUSH
31024: LD_INT 0
31026: PUSH
31027: LD_INT 0
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 1
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 1
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: LD_INT 1
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: LD_INT 0
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 1
31088: NEG
31089: PUSH
31090: LD_INT 1
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 2
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 2
31110: PUSH
31111: LD_INT 2
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 0
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31163: LD_ADDR_VAR 0 51
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: LD_INT 1
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: LD_INT 2
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 2
31275: NEG
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 2
31286: NEG
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31310: LD_ADDR_VAR 0 52
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: NEG
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: LD_INT 2
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: NEG
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 2
31414: NEG
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 2
31425: NEG
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 2
31437: NEG
31438: PUSH
31439: LD_INT 2
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31461: LD_ADDR_VAR 0 53
31465: PUSH
31466: LD_INT 0
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: LD_INT 1
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 1
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 1
31519: NEG
31520: PUSH
31521: LD_INT 0
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: LD_INT 2
31546: NEG
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 0
31554: PUSH
31555: LD_INT 2
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 2
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: LD_INT 1
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 2
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: NEG
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 2
31637: NEG
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 2
31648: NEG
31649: PUSH
31650: LD_INT 1
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 2
31660: NEG
31661: PUSH
31662: LD_INT 2
31664: NEG
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31691: LD_ADDR_VAR 0 54
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: LD_INT 0
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: LD_INT 2
31776: NEG
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: LD_INT 2
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: LD_INT 2
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: LD_INT 2
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 2
31867: NEG
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: NEG
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 2
31890: NEG
31891: PUSH
31892: LD_INT 2
31894: NEG
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31921: LD_ADDR_VAR 0 55
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 1
31979: NEG
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 1
31990: NEG
31991: PUSH
31992: LD_INT 1
31994: NEG
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 2
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 2
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 2
32120: NEG
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32151: LD_ADDR_VAR 0 56
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 1
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: LD_INT 2
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: LD_INT 2
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 2
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 2
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: NEG
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: NEG
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32381: LD_ADDR_VAR 0 57
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 1
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 1
32462: NEG
32463: PUSH
32464: LD_INT 2
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: LD_INT 2
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 1
32485: PUSH
32486: LD_INT 1
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 2
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 2
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: PUSH
32517: LD_INT 2
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 1
32546: NEG
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: NEG
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 2
32568: NEG
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 2
32580: NEG
32581: PUSH
32582: LD_INT 2
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32611: LD_ADDR_VAR 0 58
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: NEG
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: NEG
32693: PUSH
32694: LD_INT 2
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: LD_INT 2
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: LD_INT 1
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 2
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 2
32787: NEG
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 2
32798: NEG
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: NEG
32811: PUSH
32812: LD_INT 2
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32841: LD_ADDR_VAR 0 59
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 1
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PUSH
32912: LD_INT 1
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32929: LD_ADDR_VAR 0 60
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: LD_INT 0
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 1
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33017: LD_ADDR_VAR 0 61
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 1
33075: NEG
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: NEG
33087: PUSH
33088: LD_INT 1
33090: NEG
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33105: LD_ADDR_VAR 0 62
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: LD_INT 1
33125: NEG
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 1
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: LD_INT 1
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33193: LD_ADDR_VAR 0 63
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: NEG
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: LD_INT 1
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33281: LD_ADDR_VAR 0 64
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 1
33339: NEG
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: ST_TO_ADDR
// end ; 1 :
33369: GO 39266
33371: LD_INT 1
33373: DOUBLE
33374: EQUAL
33375: IFTRUE 33379
33377: GO 36002
33379: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33380: LD_ADDR_VAR 0 11
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: LD_INT 3
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: LD_INT 3
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: LD_INT 2
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: LIST
33423: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33424: LD_ADDR_VAR 0 12
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: LD_INT 1
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 3
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: LIST
33464: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33465: LD_ADDR_VAR 0 13
33469: PUSH
33470: LD_INT 3
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: LD_INT 3
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 2
33492: PUSH
33493: LD_INT 3
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: LIST
33504: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33505: LD_ADDR_VAR 0 14
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: LD_INT 3
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: LD_INT 2
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: LIST
33545: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33546: LD_ADDR_VAR 0 15
33550: PUSH
33551: LD_INT 2
33553: NEG
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 3
33564: NEG
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 3
33575: NEG
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33590: LD_ADDR_VAR 0 16
33594: PUSH
33595: LD_INT 2
33597: NEG
33598: PUSH
33599: LD_INT 3
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 3
33609: NEG
33610: PUSH
33611: LD_INT 2
33613: NEG
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 3
33621: NEG
33622: PUSH
33623: LD_INT 3
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: LIST
33635: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33636: LD_ADDR_VAR 0 17
33640: PUSH
33641: LD_INT 1
33643: NEG
33644: PUSH
33645: LD_INT 3
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: LD_INT 3
33658: NEG
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: LD_INT 2
33669: NEG
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: LIST
33679: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33680: LD_ADDR_VAR 0 18
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: LD_INT 1
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 3
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 3
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33721: LD_ADDR_VAR 0 19
33725: PUSH
33726: LD_INT 3
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 3
33738: PUSH
33739: LD_INT 3
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 2
33748: PUSH
33749: LD_INT 3
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: LIST
33760: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33761: LD_ADDR_VAR 0 20
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: LD_INT 3
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: LD_INT 3
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: LD_INT 2
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: LIST
33801: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33802: LD_ADDR_VAR 0 21
33806: PUSH
33807: LD_INT 2
33809: NEG
33810: PUSH
33811: LD_INT 1
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 3
33820: NEG
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 3
33831: NEG
33832: PUSH
33833: LD_INT 1
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33846: LD_ADDR_VAR 0 22
33850: PUSH
33851: LD_INT 2
33853: NEG
33854: PUSH
33855: LD_INT 3
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 3
33865: NEG
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 3
33877: NEG
33878: PUSH
33879: LD_INT 3
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
33892: LD_ADDR_VAR 0 23
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: LD_INT 3
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: LD_INT 4
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: LD_INT 3
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
33936: LD_ADDR_VAR 0 24
33940: PUSH
33941: LD_INT 3
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 3
33953: PUSH
33954: LD_INT 1
33956: NEG
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 4
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
33977: LD_ADDR_VAR 0 25
33981: PUSH
33982: LD_INT 3
33984: PUSH
33985: LD_INT 3
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 4
33994: PUSH
33995: LD_INT 3
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 3
34004: PUSH
34005: LD_INT 4
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: LIST
34016: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34017: LD_ADDR_VAR 0 26
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: LD_INT 3
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: LD_INT 4
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 3
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34058: LD_ADDR_VAR 0 27
34062: PUSH
34063: LD_INT 3
34065: NEG
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 3
34076: NEG
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 4
34087: NEG
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34102: LD_ADDR_VAR 0 28
34106: PUSH
34107: LD_INT 3
34109: NEG
34110: PUSH
34111: LD_INT 3
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 3
34121: NEG
34122: PUSH
34123: LD_INT 4
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 4
34133: NEG
34134: PUSH
34135: LD_INT 3
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: LIST
34147: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34148: LD_ADDR_VAR 0 29
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: LD_INT 3
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 3
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: LD_INT 2
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 4
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: LD_INT 4
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 3
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: LD_INT 5
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: LD_INT 5
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: LD_INT 4
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: LD_INT 6
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 6
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 5
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34303: LD_ADDR_VAR 0 30
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 3
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 3
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 3
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 4
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 4
34362: PUSH
34363: LD_INT 1
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 4
34372: PUSH
34373: LD_INT 1
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 5
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 5
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 5
34403: PUSH
34404: LD_INT 1
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 6
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 6
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34446: LD_ADDR_VAR 0 31
34450: PUSH
34451: LD_INT 3
34453: PUSH
34454: LD_INT 2
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 3
34463: PUSH
34464: LD_INT 3
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 2
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 4
34483: PUSH
34484: LD_INT 3
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 4
34493: PUSH
34494: LD_INT 4
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: LD_INT 4
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 5
34513: PUSH
34514: LD_INT 4
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 5
34523: PUSH
34524: LD_INT 5
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 4
34533: PUSH
34534: LD_INT 5
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 6
34543: PUSH
34544: LD_INT 5
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 6
34553: PUSH
34554: LD_INT 6
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 5
34563: PUSH
34564: LD_INT 6
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34585: LD_ADDR_VAR 0 32
34589: PUSH
34590: LD_INT 1
34592: PUSH
34593: LD_INT 3
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 3
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: NEG
34613: PUSH
34614: LD_INT 2
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: LD_INT 4
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: LD_INT 4
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: PUSH
34645: LD_INT 3
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 5
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 5
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 4
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 6
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 6
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: NEG
34706: PUSH
34707: LD_INT 5
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
34728: LD_ADDR_VAR 0 33
34732: PUSH
34733: LD_INT 2
34735: NEG
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 3
34746: NEG
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 3
34757: NEG
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 3
34769: NEG
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 4
34780: NEG
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 4
34791: NEG
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 4
34803: NEG
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 5
34814: NEG
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 5
34825: NEG
34826: PUSH
34827: LD_INT 1
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 5
34837: NEG
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 6
34848: NEG
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 6
34859: NEG
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
34883: LD_ADDR_VAR 0 34
34887: PUSH
34888: LD_INT 2
34890: NEG
34891: PUSH
34892: LD_INT 3
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 3
34902: NEG
34903: PUSH
34904: LD_INT 2
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 3
34914: NEG
34915: PUSH
34916: LD_INT 3
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 3
34926: NEG
34927: PUSH
34928: LD_INT 4
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 4
34938: NEG
34939: PUSH
34940: LD_INT 3
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 4
34950: NEG
34951: PUSH
34952: LD_INT 4
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 4
34962: NEG
34963: PUSH
34964: LD_INT 5
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 5
34974: NEG
34975: PUSH
34976: LD_INT 4
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 5
34986: NEG
34987: PUSH
34988: LD_INT 5
34990: NEG
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 5
34998: NEG
34999: PUSH
35000: LD_INT 6
35002: NEG
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 6
35010: NEG
35011: PUSH
35012: LD_INT 5
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 6
35022: NEG
35023: PUSH
35024: LD_INT 6
35026: NEG
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35046: LD_ADDR_VAR 0 41
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: LD_INT 2
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 1
35064: NEG
35065: PUSH
35066: LD_INT 3
35068: NEG
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: LD_INT 2
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: LIST
35089: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35090: LD_ADDR_VAR 0 42
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 3
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35131: LD_ADDR_VAR 0 43
35135: PUSH
35136: LD_INT 2
35138: PUSH
35139: LD_INT 2
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 3
35148: PUSH
35149: LD_INT 2
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: LD_INT 3
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35171: LD_ADDR_VAR 0 44
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: LD_INT 3
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35212: LD_ADDR_VAR 0 45
35216: PUSH
35217: LD_INT 2
35219: NEG
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 2
35230: NEG
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 3
35241: NEG
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: LIST
35255: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35256: LD_ADDR_VAR 0 46
35260: PUSH
35261: LD_INT 2
35263: NEG
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 2
35275: NEG
35276: PUSH
35277: LD_INT 3
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 3
35287: NEG
35288: PUSH
35289: LD_INT 2
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: LIST
35301: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35302: LD_ADDR_VAR 0 47
35306: PUSH
35307: LD_INT 2
35309: NEG
35310: PUSH
35311: LD_INT 3
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: LD_INT 3
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35335: LD_ADDR_VAR 0 48
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: LD_INT 2
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 2
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35366: LD_ADDR_VAR 0 49
35370: PUSH
35371: LD_INT 3
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 3
35383: PUSH
35384: LD_INT 2
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35395: LD_ADDR_VAR 0 50
35399: PUSH
35400: LD_INT 2
35402: PUSH
35403: LD_INT 3
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 3
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35424: LD_ADDR_VAR 0 51
35428: PUSH
35429: LD_INT 1
35431: NEG
35432: PUSH
35433: LD_INT 2
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 2
35442: NEG
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35455: LD_ADDR_VAR 0 52
35459: PUSH
35460: LD_INT 3
35462: NEG
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 3
35474: NEG
35475: PUSH
35476: LD_INT 2
35478: NEG
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35488: LD_ADDR_VAR 0 53
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: LD_INT 3
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: LD_INT 3
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35532: LD_ADDR_VAR 0 54
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: LD_INT 1
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 3
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 3
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35573: LD_ADDR_VAR 0 55
35577: PUSH
35578: LD_INT 3
35580: PUSH
35581: LD_INT 2
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 3
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: LD_INT 3
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35613: LD_ADDR_VAR 0 56
35617: PUSH
35618: LD_INT 1
35620: PUSH
35621: LD_INT 3
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: LD_INT 3
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: LIST
35653: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35654: LD_ADDR_VAR 0 57
35658: PUSH
35659: LD_INT 2
35661: NEG
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 3
35672: NEG
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 3
35683: NEG
35684: PUSH
35685: LD_INT 1
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35698: LD_ADDR_VAR 0 58
35702: PUSH
35703: LD_INT 2
35705: NEG
35706: PUSH
35707: LD_INT 3
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 3
35717: NEG
35718: PUSH
35719: LD_INT 2
35721: NEG
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 3
35729: NEG
35730: PUSH
35731: LD_INT 3
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: LIST
35743: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
35744: LD_ADDR_VAR 0 59
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: LD_INT 2
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 2
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: LD_INT 1
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35788: LD_ADDR_VAR 0 60
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: LD_INT 1
35798: NEG
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 2
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 2
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35829: LD_ADDR_VAR 0 61
35833: PUSH
35834: LD_INT 2
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 2
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35869: LD_ADDR_VAR 0 62
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: NEG
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35910: LD_ADDR_VAR 0 63
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 2
35928: NEG
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 2
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: LIST
35953: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35954: LD_ADDR_VAR 0 64
35958: PUSH
35959: LD_INT 1
35961: NEG
35962: PUSH
35963: LD_INT 2
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 2
35973: NEG
35974: PUSH
35975: LD_INT 1
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 2
35985: NEG
35986: PUSH
35987: LD_INT 2
35989: NEG
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: ST_TO_ADDR
// end ; 2 :
36000: GO 39266
36002: LD_INT 2
36004: DOUBLE
36005: EQUAL
36006: IFTRUE 36010
36008: GO 39265
36010: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36011: LD_ADDR_VAR 0 29
36015: PUSH
36016: LD_INT 4
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 4
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 5
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 5
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 4
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 3
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 3
36079: PUSH
36080: LD_INT 1
36082: NEG
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 3
36090: PUSH
36091: LD_INT 2
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 5
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 3
36111: PUSH
36112: LD_INT 3
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 3
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 4
36131: PUSH
36132: LD_INT 3
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 4
36141: PUSH
36142: LD_INT 4
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 3
36151: PUSH
36152: LD_INT 4
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 2
36161: PUSH
36162: LD_INT 3
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 4
36181: PUSH
36182: LD_INT 2
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: LD_INT 4
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: LD_INT 4
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 3
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 1
36221: PUSH
36222: LD_INT 4
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: LD_INT 5
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: LD_INT 5
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: PUSH
36253: LD_INT 4
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: LD_INT 3
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: LD_INT 5
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 2
36283: NEG
36284: PUSH
36285: LD_INT 3
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 3
36294: NEG
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 3
36305: NEG
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 2
36317: NEG
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 2
36328: NEG
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 3
36339: NEG
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 4
36350: NEG
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 4
36361: NEG
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 4
36373: NEG
36374: PUSH
36375: LD_INT 2
36377: NEG
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 2
36385: NEG
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 4
36396: NEG
36397: PUSH
36398: LD_INT 4
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 4
36408: NEG
36409: PUSH
36410: LD_INT 5
36412: NEG
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 3
36420: NEG
36421: PUSH
36422: LD_INT 4
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 3
36432: NEG
36433: PUSH
36434: LD_INT 3
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 4
36444: NEG
36445: PUSH
36446: LD_INT 3
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 5
36456: NEG
36457: PUSH
36458: LD_INT 4
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 5
36468: NEG
36469: PUSH
36470: LD_INT 5
36472: NEG
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 3
36480: NEG
36481: PUSH
36482: LD_INT 5
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 5
36492: NEG
36493: PUSH
36494: LD_INT 3
36496: NEG
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
36549: LD_ADDR_VAR 0 30
36553: PUSH
36554: LD_INT 4
36556: PUSH
36557: LD_INT 4
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 4
36566: PUSH
36567: LD_INT 3
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 5
36576: PUSH
36577: LD_INT 4
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 5
36586: PUSH
36587: LD_INT 5
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 4
36596: PUSH
36597: LD_INT 5
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 3
36606: PUSH
36607: LD_INT 4
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 3
36616: PUSH
36617: LD_INT 3
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 5
36626: PUSH
36627: LD_INT 3
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 3
36636: PUSH
36637: LD_INT 5
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 3
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: LD_INT 2
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: LD_INT 3
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: LD_INT 4
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: LD_INT 4
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: LD_INT 3
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: LD_INT 2
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 2
36718: PUSH
36719: LD_INT 4
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 2
36728: NEG
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 4
36739: NEG
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 4
36750: NEG
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 3
36762: NEG
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 3
36773: NEG
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 4
36784: NEG
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 5
36795: NEG
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 5
36806: NEG
36807: PUSH
36808: LD_INT 1
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 5
36818: NEG
36819: PUSH
36820: LD_INT 2
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 3
36830: NEG
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 3
36841: NEG
36842: PUSH
36843: LD_INT 3
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 3
36853: NEG
36854: PUSH
36855: LD_INT 4
36857: NEG
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: LD_INT 3
36869: NEG
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: LD_INT 2
36881: NEG
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 3
36889: NEG
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 4
36901: NEG
36902: PUSH
36903: LD_INT 3
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 4
36913: NEG
36914: PUSH
36915: LD_INT 4
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 2
36925: NEG
36926: PUSH
36927: LD_INT 4
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 4
36937: NEG
36938: PUSH
36939: LD_INT 2
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: LD_INT 4
36952: NEG
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 5
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: LD_INT 4
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: LD_INT 3
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: LD_INT 3
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: LD_INT 4
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: LD_INT 5
37020: NEG
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: LD_INT 3
37031: NEG
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 2
37039: NEG
37040: PUSH
37041: LD_INT 5
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37096: LD_ADDR_VAR 0 31
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 4
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 3
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 4
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: LD_INT 5
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: LD_INT 5
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 4
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 3
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: PUSH
37176: LD_INT 5
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: NEG
37186: PUSH
37187: LD_INT 3
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 3
37196: NEG
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 3
37207: NEG
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 2
37219: NEG
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 2
37230: NEG
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 3
37241: NEG
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 4
37252: NEG
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 4
37263: NEG
37264: PUSH
37265: LD_INT 1
37267: NEG
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 4
37275: NEG
37276: PUSH
37277: LD_INT 2
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: NEG
37288: PUSH
37289: LD_INT 2
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 4
37298: NEG
37299: PUSH
37300: LD_INT 4
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 4
37310: NEG
37311: PUSH
37312: LD_INT 5
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 3
37322: NEG
37323: PUSH
37324: LD_INT 4
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 3
37334: NEG
37335: PUSH
37336: LD_INT 3
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 4
37346: NEG
37347: PUSH
37348: LD_INT 3
37350: NEG
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 5
37358: NEG
37359: PUSH
37360: LD_INT 4
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 5
37370: NEG
37371: PUSH
37372: LD_INT 5
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 3
37382: NEG
37383: PUSH
37384: LD_INT 5
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 5
37394: NEG
37395: PUSH
37396: LD_INT 3
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: LD_INT 3
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: LD_INT 4
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: LD_INT 3
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 2
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: LD_INT 3
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: LD_INT 4
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 2
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 2
37496: NEG
37497: PUSH
37498: LD_INT 4
37500: NEG
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 4
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 4
37518: PUSH
37519: LD_INT 1
37521: NEG
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 5
37529: PUSH
37530: LD_INT 0
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 5
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 4
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 3
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 3
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 3
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 5
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
37646: LD_ADDR_VAR 0 32
37650: PUSH
37651: LD_INT 4
37653: NEG
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 4
37664: NEG
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 3
37676: NEG
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 3
37687: NEG
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 4
37698: NEG
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 5
37709: NEG
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 5
37720: NEG
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 5
37732: NEG
37733: PUSH
37734: LD_INT 2
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 3
37744: NEG
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 3
37755: NEG
37756: PUSH
37757: LD_INT 3
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 3
37767: NEG
37768: PUSH
37769: LD_INT 4
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 2
37779: NEG
37780: PUSH
37781: LD_INT 3
37783: NEG
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 2
37791: NEG
37792: PUSH
37793: LD_INT 2
37795: NEG
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 3
37803: NEG
37804: PUSH
37805: LD_INT 2
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 4
37815: NEG
37816: PUSH
37817: LD_INT 3
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 4
37827: NEG
37828: PUSH
37829: LD_INT 4
37831: NEG
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 2
37839: NEG
37840: PUSH
37841: LD_INT 4
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 4
37851: NEG
37852: PUSH
37853: LD_INT 2
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: LD_INT 4
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 5
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 4
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: PUSH
37897: LD_INT 3
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: LD_INT 3
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: LD_INT 4
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: LD_INT 5
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 2
37942: PUSH
37943: LD_INT 3
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 2
37953: NEG
37954: PUSH
37955: LD_INT 5
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 3
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 3
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 4
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 4
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 3
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 2
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 4
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 4
38058: PUSH
38059: LD_INT 4
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 4
38068: PUSH
38069: LD_INT 3
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 5
38078: PUSH
38079: LD_INT 4
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 5
38088: PUSH
38089: LD_INT 5
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 4
38098: PUSH
38099: LD_INT 5
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 3
38108: PUSH
38109: LD_INT 4
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 3
38118: PUSH
38119: LD_INT 3
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 5
38128: PUSH
38129: LD_INT 3
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 3
38138: PUSH
38139: LD_INT 5
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38193: LD_ADDR_VAR 0 33
38197: PUSH
38198: LD_INT 4
38200: NEG
38201: PUSH
38202: LD_INT 4
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 4
38212: NEG
38213: PUSH
38214: LD_INT 5
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 3
38224: NEG
38225: PUSH
38226: LD_INT 4
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 3
38236: NEG
38237: PUSH
38238: LD_INT 3
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 4
38248: NEG
38249: PUSH
38250: LD_INT 3
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 5
38260: NEG
38261: PUSH
38262: LD_INT 4
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 5
38272: NEG
38273: PUSH
38274: LD_INT 5
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 3
38284: NEG
38285: PUSH
38286: LD_INT 5
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 5
38296: NEG
38297: PUSH
38298: LD_INT 3
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: LD_INT 3
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 4
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 3
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: LD_INT 2
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: LD_INT 2
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: NEG
38364: PUSH
38365: LD_INT 3
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: LD_INT 4
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 2
38387: PUSH
38388: LD_INT 2
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: LD_INT 4
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 4
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 4
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 5
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 5
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 4
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 3
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 3
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 3
38482: PUSH
38483: LD_INT 2
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 5
38493: PUSH
38494: LD_INT 2
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 3
38503: PUSH
38504: LD_INT 3
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 3
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 4
38523: PUSH
38524: LD_INT 3
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 4
38533: PUSH
38534: LD_INT 4
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 3
38543: PUSH
38544: LD_INT 4
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 2
38553: PUSH
38554: LD_INT 3
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 4
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: LD_INT 4
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: LD_INT 4
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 3
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: LD_INT 4
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: LD_INT 5
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 5
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: LD_INT 4
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: LD_INT 3
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 2
38665: PUSH
38666: LD_INT 5
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: LD_INT 3
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
38731: LD_ADDR_VAR 0 34
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: LD_INT 4
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 5
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: LD_INT 4
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 3
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: LD_INT 3
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: LD_INT 4
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: LD_INT 5
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: LD_INT 3
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: LD_INT 5
38832: NEG
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 3
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 4
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 4
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 3
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 2
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 2
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: LD_INT 2
38915: NEG
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 4
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 4
38933: PUSH
38934: LD_INT 4
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 4
38943: PUSH
38944: LD_INT 3
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 5
38953: PUSH
38954: LD_INT 4
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 5
38963: PUSH
38964: LD_INT 5
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 4
38973: PUSH
38974: LD_INT 5
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 3
38983: PUSH
38984: LD_INT 4
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 3
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 5
39003: PUSH
39004: LD_INT 3
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 3
39013: PUSH
39014: LD_INT 5
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: LD_INT 3
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: LD_INT 3
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: LD_INT 4
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: LD_INT 4
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: LD_INT 3
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: LD_INT 4
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: LD_INT 2
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 4
39116: NEG
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 4
39127: NEG
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 3
39139: NEG
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 3
39150: NEG
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 4
39161: NEG
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 5
39172: NEG
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 5
39183: NEG
39184: PUSH
39185: LD_INT 1
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 5
39195: NEG
39196: PUSH
39197: LD_INT 2
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 3
39207: NEG
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: ST_TO_ADDR
// end ; end ;
39263: GO 39266
39265: POP
// case btype of b_depot , b_warehouse :
39266: LD_VAR 0 1
39270: PUSH
39271: LD_INT 0
39273: DOUBLE
39274: EQUAL
39275: IFTRUE 39285
39277: LD_INT 1
39279: DOUBLE
39280: EQUAL
39281: IFTRUE 39285
39283: GO 39486
39285: POP
// case nation of nation_american :
39286: LD_VAR 0 5
39290: PUSH
39291: LD_INT 1
39293: DOUBLE
39294: EQUAL
39295: IFTRUE 39299
39297: GO 39355
39299: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39300: LD_ADDR_VAR 0 9
39304: PUSH
39305: LD_VAR 0 11
39309: PUSH
39310: LD_VAR 0 12
39314: PUSH
39315: LD_VAR 0 13
39319: PUSH
39320: LD_VAR 0 14
39324: PUSH
39325: LD_VAR 0 15
39329: PUSH
39330: LD_VAR 0 16
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: PUSH
39343: LD_VAR 0 4
39347: PUSH
39348: LD_INT 1
39350: PLUS
39351: ARRAY
39352: ST_TO_ADDR
39353: GO 39484
39355: LD_INT 2
39357: DOUBLE
39358: EQUAL
39359: IFTRUE 39363
39361: GO 39419
39363: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39364: LD_ADDR_VAR 0 9
39368: PUSH
39369: LD_VAR 0 17
39373: PUSH
39374: LD_VAR 0 18
39378: PUSH
39379: LD_VAR 0 19
39383: PUSH
39384: LD_VAR 0 20
39388: PUSH
39389: LD_VAR 0 21
39393: PUSH
39394: LD_VAR 0 22
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: PUSH
39407: LD_VAR 0 4
39411: PUSH
39412: LD_INT 1
39414: PLUS
39415: ARRAY
39416: ST_TO_ADDR
39417: GO 39484
39419: LD_INT 3
39421: DOUBLE
39422: EQUAL
39423: IFTRUE 39427
39425: GO 39483
39427: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39428: LD_ADDR_VAR 0 9
39432: PUSH
39433: LD_VAR 0 23
39437: PUSH
39438: LD_VAR 0 24
39442: PUSH
39443: LD_VAR 0 25
39447: PUSH
39448: LD_VAR 0 26
39452: PUSH
39453: LD_VAR 0 27
39457: PUSH
39458: LD_VAR 0 28
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: PUSH
39471: LD_VAR 0 4
39475: PUSH
39476: LD_INT 1
39478: PLUS
39479: ARRAY
39480: ST_TO_ADDR
39481: GO 39484
39483: POP
39484: GO 40039
39486: LD_INT 2
39488: DOUBLE
39489: EQUAL
39490: IFTRUE 39500
39492: LD_INT 3
39494: DOUBLE
39495: EQUAL
39496: IFTRUE 39500
39498: GO 39556
39500: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39501: LD_ADDR_VAR 0 9
39505: PUSH
39506: LD_VAR 0 29
39510: PUSH
39511: LD_VAR 0 30
39515: PUSH
39516: LD_VAR 0 31
39520: PUSH
39521: LD_VAR 0 32
39525: PUSH
39526: LD_VAR 0 33
39530: PUSH
39531: LD_VAR 0 34
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: PUSH
39544: LD_VAR 0 4
39548: PUSH
39549: LD_INT 1
39551: PLUS
39552: ARRAY
39553: ST_TO_ADDR
39554: GO 40039
39556: LD_INT 16
39558: DOUBLE
39559: EQUAL
39560: IFTRUE 39618
39562: LD_INT 17
39564: DOUBLE
39565: EQUAL
39566: IFTRUE 39618
39568: LD_INT 18
39570: DOUBLE
39571: EQUAL
39572: IFTRUE 39618
39574: LD_INT 19
39576: DOUBLE
39577: EQUAL
39578: IFTRUE 39618
39580: LD_INT 22
39582: DOUBLE
39583: EQUAL
39584: IFTRUE 39618
39586: LD_INT 20
39588: DOUBLE
39589: EQUAL
39590: IFTRUE 39618
39592: LD_INT 21
39594: DOUBLE
39595: EQUAL
39596: IFTRUE 39618
39598: LD_INT 23
39600: DOUBLE
39601: EQUAL
39602: IFTRUE 39618
39604: LD_INT 24
39606: DOUBLE
39607: EQUAL
39608: IFTRUE 39618
39610: LD_INT 25
39612: DOUBLE
39613: EQUAL
39614: IFTRUE 39618
39616: GO 39674
39618: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39619: LD_ADDR_VAR 0 9
39623: PUSH
39624: LD_VAR 0 35
39628: PUSH
39629: LD_VAR 0 36
39633: PUSH
39634: LD_VAR 0 37
39638: PUSH
39639: LD_VAR 0 38
39643: PUSH
39644: LD_VAR 0 39
39648: PUSH
39649: LD_VAR 0 40
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: PUSH
39662: LD_VAR 0 4
39666: PUSH
39667: LD_INT 1
39669: PLUS
39670: ARRAY
39671: ST_TO_ADDR
39672: GO 40039
39674: LD_INT 6
39676: DOUBLE
39677: EQUAL
39678: IFTRUE 39730
39680: LD_INT 7
39682: DOUBLE
39683: EQUAL
39684: IFTRUE 39730
39686: LD_INT 8
39688: DOUBLE
39689: EQUAL
39690: IFTRUE 39730
39692: LD_INT 13
39694: DOUBLE
39695: EQUAL
39696: IFTRUE 39730
39698: LD_INT 12
39700: DOUBLE
39701: EQUAL
39702: IFTRUE 39730
39704: LD_INT 15
39706: DOUBLE
39707: EQUAL
39708: IFTRUE 39730
39710: LD_INT 11
39712: DOUBLE
39713: EQUAL
39714: IFTRUE 39730
39716: LD_INT 14
39718: DOUBLE
39719: EQUAL
39720: IFTRUE 39730
39722: LD_INT 10
39724: DOUBLE
39725: EQUAL
39726: IFTRUE 39730
39728: GO 39786
39730: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
39731: LD_ADDR_VAR 0 9
39735: PUSH
39736: LD_VAR 0 41
39740: PUSH
39741: LD_VAR 0 42
39745: PUSH
39746: LD_VAR 0 43
39750: PUSH
39751: LD_VAR 0 44
39755: PUSH
39756: LD_VAR 0 45
39760: PUSH
39761: LD_VAR 0 46
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: PUSH
39774: LD_VAR 0 4
39778: PUSH
39779: LD_INT 1
39781: PLUS
39782: ARRAY
39783: ST_TO_ADDR
39784: GO 40039
39786: LD_INT 36
39788: DOUBLE
39789: EQUAL
39790: IFTRUE 39794
39792: GO 39850
39794: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
39795: LD_ADDR_VAR 0 9
39799: PUSH
39800: LD_VAR 0 47
39804: PUSH
39805: LD_VAR 0 48
39809: PUSH
39810: LD_VAR 0 49
39814: PUSH
39815: LD_VAR 0 50
39819: PUSH
39820: LD_VAR 0 51
39824: PUSH
39825: LD_VAR 0 52
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: PUSH
39838: LD_VAR 0 4
39842: PUSH
39843: LD_INT 1
39845: PLUS
39846: ARRAY
39847: ST_TO_ADDR
39848: GO 40039
39850: LD_INT 4
39852: DOUBLE
39853: EQUAL
39854: IFTRUE 39876
39856: LD_INT 5
39858: DOUBLE
39859: EQUAL
39860: IFTRUE 39876
39862: LD_INT 34
39864: DOUBLE
39865: EQUAL
39866: IFTRUE 39876
39868: LD_INT 37
39870: DOUBLE
39871: EQUAL
39872: IFTRUE 39876
39874: GO 39932
39876: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
39877: LD_ADDR_VAR 0 9
39881: PUSH
39882: LD_VAR 0 53
39886: PUSH
39887: LD_VAR 0 54
39891: PUSH
39892: LD_VAR 0 55
39896: PUSH
39897: LD_VAR 0 56
39901: PUSH
39902: LD_VAR 0 57
39906: PUSH
39907: LD_VAR 0 58
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: PUSH
39920: LD_VAR 0 4
39924: PUSH
39925: LD_INT 1
39927: PLUS
39928: ARRAY
39929: ST_TO_ADDR
39930: GO 40039
39932: LD_INT 31
39934: DOUBLE
39935: EQUAL
39936: IFTRUE 39982
39938: LD_INT 32
39940: DOUBLE
39941: EQUAL
39942: IFTRUE 39982
39944: LD_INT 33
39946: DOUBLE
39947: EQUAL
39948: IFTRUE 39982
39950: LD_INT 27
39952: DOUBLE
39953: EQUAL
39954: IFTRUE 39982
39956: LD_INT 26
39958: DOUBLE
39959: EQUAL
39960: IFTRUE 39982
39962: LD_INT 28
39964: DOUBLE
39965: EQUAL
39966: IFTRUE 39982
39968: LD_INT 29
39970: DOUBLE
39971: EQUAL
39972: IFTRUE 39982
39974: LD_INT 30
39976: DOUBLE
39977: EQUAL
39978: IFTRUE 39982
39980: GO 40038
39982: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
39983: LD_ADDR_VAR 0 9
39987: PUSH
39988: LD_VAR 0 59
39992: PUSH
39993: LD_VAR 0 60
39997: PUSH
39998: LD_VAR 0 61
40002: PUSH
40003: LD_VAR 0 62
40007: PUSH
40008: LD_VAR 0 63
40012: PUSH
40013: LD_VAR 0 64
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: PUSH
40026: LD_VAR 0 4
40030: PUSH
40031: LD_INT 1
40033: PLUS
40034: ARRAY
40035: ST_TO_ADDR
40036: GO 40039
40038: POP
// temp_list2 = [ ] ;
40039: LD_ADDR_VAR 0 10
40043: PUSH
40044: EMPTY
40045: ST_TO_ADDR
// for i in temp_list do
40046: LD_ADDR_VAR 0 8
40050: PUSH
40051: LD_VAR 0 9
40055: PUSH
40056: FOR_IN
40057: IFFALSE 40109
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40059: LD_ADDR_VAR 0 10
40063: PUSH
40064: LD_VAR 0 10
40068: PUSH
40069: LD_VAR 0 8
40073: PUSH
40074: LD_INT 1
40076: ARRAY
40077: PUSH
40078: LD_VAR 0 2
40082: PLUS
40083: PUSH
40084: LD_VAR 0 8
40088: PUSH
40089: LD_INT 2
40091: ARRAY
40092: PUSH
40093: LD_VAR 0 3
40097: PLUS
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: EMPTY
40104: LIST
40105: ADD
40106: ST_TO_ADDR
40107: GO 40056
40109: POP
40110: POP
// result = temp_list2 ;
40111: LD_ADDR_VAR 0 7
40115: PUSH
40116: LD_VAR 0 10
40120: ST_TO_ADDR
// end ;
40121: LD_VAR 0 7
40125: RET
// export function EnemyInRange ( unit , dist ) ; begin
40126: LD_INT 0
40128: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40129: LD_ADDR_VAR 0 3
40133: PUSH
40134: LD_VAR 0 1
40138: PPUSH
40139: CALL_OW 255
40143: PPUSH
40144: LD_VAR 0 1
40148: PPUSH
40149: CALL_OW 250
40153: PPUSH
40154: LD_VAR 0 1
40158: PPUSH
40159: CALL_OW 251
40163: PPUSH
40164: LD_VAR 0 2
40168: PPUSH
40169: CALL 13910 0 4
40173: PUSH
40174: LD_INT 4
40176: ARRAY
40177: ST_TO_ADDR
// end ;
40178: LD_VAR 0 3
40182: RET
// export function PlayerSeeMe ( unit ) ; begin
40183: LD_INT 0
40185: PPUSH
// result := See ( your_side , unit ) ;
40186: LD_ADDR_VAR 0 2
40190: PUSH
40191: LD_OWVAR 2
40195: PPUSH
40196: LD_VAR 0 1
40200: PPUSH
40201: CALL_OW 292
40205: ST_TO_ADDR
// end ;
40206: LD_VAR 0 2
40210: RET
// export function ReverseDir ( unit ) ; begin
40211: LD_INT 0
40213: PPUSH
// if not unit then
40214: LD_VAR 0 1
40218: NOT
40219: IFFALSE 40223
// exit ;
40221: GO 40246
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40223: LD_ADDR_VAR 0 2
40227: PUSH
40228: LD_VAR 0 1
40232: PPUSH
40233: CALL_OW 254
40237: PUSH
40238: LD_INT 3
40240: PLUS
40241: PUSH
40242: LD_INT 6
40244: MOD
40245: ST_TO_ADDR
// end ;
40246: LD_VAR 0 2
40250: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
40251: LD_INT 0
40253: PPUSH
40254: PPUSH
40255: PPUSH
40256: PPUSH
40257: PPUSH
// if not hexes then
40258: LD_VAR 0 2
40262: NOT
40263: IFFALSE 40267
// exit ;
40265: GO 40415
// dist := 9999 ;
40267: LD_ADDR_VAR 0 5
40271: PUSH
40272: LD_INT 9999
40274: ST_TO_ADDR
// for i = 1 to hexes do
40275: LD_ADDR_VAR 0 4
40279: PUSH
40280: DOUBLE
40281: LD_INT 1
40283: DEC
40284: ST_TO_ADDR
40285: LD_VAR 0 2
40289: PUSH
40290: FOR_TO
40291: IFFALSE 40403
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
40293: LD_VAR 0 1
40297: PPUSH
40298: LD_VAR 0 2
40302: PUSH
40303: LD_VAR 0 4
40307: ARRAY
40308: PUSH
40309: LD_INT 1
40311: ARRAY
40312: PPUSH
40313: LD_VAR 0 2
40317: PUSH
40318: LD_VAR 0 4
40322: ARRAY
40323: PUSH
40324: LD_INT 2
40326: ARRAY
40327: PPUSH
40328: CALL_OW 297
40332: PUSH
40333: LD_VAR 0 5
40337: LESS
40338: IFFALSE 40401
// begin hex := hexes [ i ] ;
40340: LD_ADDR_VAR 0 7
40344: PUSH
40345: LD_VAR 0 2
40349: PUSH
40350: LD_VAR 0 4
40354: ARRAY
40355: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40356: LD_ADDR_VAR 0 5
40360: PUSH
40361: LD_VAR 0 1
40365: PPUSH
40366: LD_VAR 0 2
40370: PUSH
40371: LD_VAR 0 4
40375: ARRAY
40376: PUSH
40377: LD_INT 1
40379: ARRAY
40380: PPUSH
40381: LD_VAR 0 2
40385: PUSH
40386: LD_VAR 0 4
40390: ARRAY
40391: PUSH
40392: LD_INT 2
40394: ARRAY
40395: PPUSH
40396: CALL_OW 297
40400: ST_TO_ADDR
// end ; end ;
40401: GO 40290
40403: POP
40404: POP
// result := hex ;
40405: LD_ADDR_VAR 0 3
40409: PUSH
40410: LD_VAR 0 7
40414: ST_TO_ADDR
// end ;
40415: LD_VAR 0 3
40419: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40420: LD_INT 0
40422: PPUSH
40423: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40424: LD_VAR 0 1
40428: NOT
40429: PUSH
40430: LD_VAR 0 1
40434: PUSH
40435: LD_INT 21
40437: PUSH
40438: LD_INT 2
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 23
40447: PUSH
40448: LD_INT 2
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PPUSH
40459: CALL_OW 69
40463: IN
40464: NOT
40465: OR
40466: IFFALSE 40470
// exit ;
40468: GO 40517
// for i = 1 to 3 do
40470: LD_ADDR_VAR 0 3
40474: PUSH
40475: DOUBLE
40476: LD_INT 1
40478: DEC
40479: ST_TO_ADDR
40480: LD_INT 3
40482: PUSH
40483: FOR_TO
40484: IFFALSE 40515
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40486: LD_VAR 0 1
40490: PPUSH
40491: CALL_OW 250
40495: PPUSH
40496: LD_VAR 0 1
40500: PPUSH
40501: CALL_OW 251
40505: PPUSH
40506: LD_INT 1
40508: PPUSH
40509: CALL_OW 453
40513: GO 40483
40515: POP
40516: POP
// end ;
40517: LD_VAR 0 2
40521: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40522: LD_INT 0
40524: PPUSH
40525: PPUSH
40526: PPUSH
40527: PPUSH
40528: PPUSH
40529: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40530: LD_VAR 0 1
40534: NOT
40535: PUSH
40536: LD_VAR 0 2
40540: NOT
40541: OR
40542: PUSH
40543: LD_VAR 0 1
40547: PPUSH
40548: CALL_OW 314
40552: OR
40553: IFFALSE 40557
// exit ;
40555: GO 40998
// x := GetX ( enemy_unit ) ;
40557: LD_ADDR_VAR 0 7
40561: PUSH
40562: LD_VAR 0 2
40566: PPUSH
40567: CALL_OW 250
40571: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40572: LD_ADDR_VAR 0 8
40576: PUSH
40577: LD_VAR 0 2
40581: PPUSH
40582: CALL_OW 251
40586: ST_TO_ADDR
// if not x or not y then
40587: LD_VAR 0 7
40591: NOT
40592: PUSH
40593: LD_VAR 0 8
40597: NOT
40598: OR
40599: IFFALSE 40603
// exit ;
40601: GO 40998
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
40603: LD_ADDR_VAR 0 6
40607: PUSH
40608: LD_VAR 0 7
40612: PPUSH
40613: LD_INT 0
40615: PPUSH
40616: LD_INT 4
40618: PPUSH
40619: CALL_OW 272
40623: PUSH
40624: LD_VAR 0 8
40628: PPUSH
40629: LD_INT 0
40631: PPUSH
40632: LD_INT 4
40634: PPUSH
40635: CALL_OW 273
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_VAR 0 7
40648: PPUSH
40649: LD_INT 1
40651: PPUSH
40652: LD_INT 4
40654: PPUSH
40655: CALL_OW 272
40659: PUSH
40660: LD_VAR 0 8
40664: PPUSH
40665: LD_INT 1
40667: PPUSH
40668: LD_INT 4
40670: PPUSH
40671: CALL_OW 273
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_VAR 0 7
40684: PPUSH
40685: LD_INT 2
40687: PPUSH
40688: LD_INT 4
40690: PPUSH
40691: CALL_OW 272
40695: PUSH
40696: LD_VAR 0 8
40700: PPUSH
40701: LD_INT 2
40703: PPUSH
40704: LD_INT 4
40706: PPUSH
40707: CALL_OW 273
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_VAR 0 7
40720: PPUSH
40721: LD_INT 3
40723: PPUSH
40724: LD_INT 4
40726: PPUSH
40727: CALL_OW 272
40731: PUSH
40732: LD_VAR 0 8
40736: PPUSH
40737: LD_INT 3
40739: PPUSH
40740: LD_INT 4
40742: PPUSH
40743: CALL_OW 273
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_VAR 0 7
40756: PPUSH
40757: LD_INT 4
40759: PPUSH
40760: LD_INT 4
40762: PPUSH
40763: CALL_OW 272
40767: PUSH
40768: LD_VAR 0 8
40772: PPUSH
40773: LD_INT 4
40775: PPUSH
40776: LD_INT 4
40778: PPUSH
40779: CALL_OW 273
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_VAR 0 7
40792: PPUSH
40793: LD_INT 5
40795: PPUSH
40796: LD_INT 4
40798: PPUSH
40799: CALL_OW 272
40803: PUSH
40804: LD_VAR 0 8
40808: PPUSH
40809: LD_INT 5
40811: PPUSH
40812: LD_INT 4
40814: PPUSH
40815: CALL_OW 273
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: ST_TO_ADDR
// for i = tmp downto 1 do
40832: LD_ADDR_VAR 0 4
40836: PUSH
40837: DOUBLE
40838: LD_VAR 0 6
40842: INC
40843: ST_TO_ADDR
40844: LD_INT 1
40846: PUSH
40847: FOR_DOWNTO
40848: IFFALSE 40949
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
40850: LD_VAR 0 6
40854: PUSH
40855: LD_VAR 0 4
40859: ARRAY
40860: PUSH
40861: LD_INT 1
40863: ARRAY
40864: PPUSH
40865: LD_VAR 0 6
40869: PUSH
40870: LD_VAR 0 4
40874: ARRAY
40875: PUSH
40876: LD_INT 2
40878: ARRAY
40879: PPUSH
40880: CALL_OW 488
40884: NOT
40885: PUSH
40886: LD_VAR 0 6
40890: PUSH
40891: LD_VAR 0 4
40895: ARRAY
40896: PUSH
40897: LD_INT 1
40899: ARRAY
40900: PPUSH
40901: LD_VAR 0 6
40905: PUSH
40906: LD_VAR 0 4
40910: ARRAY
40911: PUSH
40912: LD_INT 2
40914: ARRAY
40915: PPUSH
40916: CALL_OW 428
40920: PUSH
40921: LD_INT 0
40923: NONEQUAL
40924: OR
40925: IFFALSE 40947
// tmp := Delete ( tmp , i ) ;
40927: LD_ADDR_VAR 0 6
40931: PUSH
40932: LD_VAR 0 6
40936: PPUSH
40937: LD_VAR 0 4
40941: PPUSH
40942: CALL_OW 3
40946: ST_TO_ADDR
40947: GO 40847
40949: POP
40950: POP
// j := GetClosestHex ( unit , tmp ) ;
40951: LD_ADDR_VAR 0 5
40955: PUSH
40956: LD_VAR 0 1
40960: PPUSH
40961: LD_VAR 0 6
40965: PPUSH
40966: CALL 40251 0 2
40970: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
40971: LD_VAR 0 1
40975: PPUSH
40976: LD_VAR 0 5
40980: PUSH
40981: LD_INT 1
40983: ARRAY
40984: PPUSH
40985: LD_VAR 0 5
40989: PUSH
40990: LD_INT 2
40992: ARRAY
40993: PPUSH
40994: CALL_OW 111
// end ;
40998: LD_VAR 0 3
41002: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41003: LD_INT 0
41005: PPUSH
41006: PPUSH
41007: PPUSH
// uc_side = 0 ;
41008: LD_ADDR_OWVAR 20
41012: PUSH
41013: LD_INT 0
41015: ST_TO_ADDR
// uc_nation = 0 ;
41016: LD_ADDR_OWVAR 21
41020: PUSH
41021: LD_INT 0
41023: ST_TO_ADDR
// InitHc_All ( ) ;
41024: CALL_OW 584
// InitVc ;
41028: CALL_OW 20
// if mastodonts then
41032: LD_VAR 0 6
41036: IFFALSE 41103
// for i = 1 to mastodonts do
41038: LD_ADDR_VAR 0 11
41042: PUSH
41043: DOUBLE
41044: LD_INT 1
41046: DEC
41047: ST_TO_ADDR
41048: LD_VAR 0 6
41052: PUSH
41053: FOR_TO
41054: IFFALSE 41101
// begin vc_chassis := 31 ;
41056: LD_ADDR_OWVAR 37
41060: PUSH
41061: LD_INT 31
41063: ST_TO_ADDR
// vc_control := control_rider ;
41064: LD_ADDR_OWVAR 38
41068: PUSH
41069: LD_INT 4
41071: ST_TO_ADDR
// animal := CreateVehicle ;
41072: LD_ADDR_VAR 0 12
41076: PUSH
41077: CALL_OW 45
41081: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41082: LD_VAR 0 12
41086: PPUSH
41087: LD_VAR 0 8
41091: PPUSH
41092: LD_INT 0
41094: PPUSH
41095: CALL 43291 0 3
// end ;
41099: GO 41053
41101: POP
41102: POP
// if horses then
41103: LD_VAR 0 5
41107: IFFALSE 41174
// for i = 1 to horses do
41109: LD_ADDR_VAR 0 11
41113: PUSH
41114: DOUBLE
41115: LD_INT 1
41117: DEC
41118: ST_TO_ADDR
41119: LD_VAR 0 5
41123: PUSH
41124: FOR_TO
41125: IFFALSE 41172
// begin hc_class := 21 ;
41127: LD_ADDR_OWVAR 28
41131: PUSH
41132: LD_INT 21
41134: ST_TO_ADDR
// hc_gallery :=  ;
41135: LD_ADDR_OWVAR 33
41139: PUSH
41140: LD_STRING 
41142: ST_TO_ADDR
// animal := CreateHuman ;
41143: LD_ADDR_VAR 0 12
41147: PUSH
41148: CALL_OW 44
41152: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41153: LD_VAR 0 12
41157: PPUSH
41158: LD_VAR 0 8
41162: PPUSH
41163: LD_INT 0
41165: PPUSH
41166: CALL 43291 0 3
// end ;
41170: GO 41124
41172: POP
41173: POP
// if birds then
41174: LD_VAR 0 1
41178: IFFALSE 41245
// for i = 1 to birds do
41180: LD_ADDR_VAR 0 11
41184: PUSH
41185: DOUBLE
41186: LD_INT 1
41188: DEC
41189: ST_TO_ADDR
41190: LD_VAR 0 1
41194: PUSH
41195: FOR_TO
41196: IFFALSE 41243
// begin hc_class = 18 ;
41198: LD_ADDR_OWVAR 28
41202: PUSH
41203: LD_INT 18
41205: ST_TO_ADDR
// hc_gallery =  ;
41206: LD_ADDR_OWVAR 33
41210: PUSH
41211: LD_STRING 
41213: ST_TO_ADDR
// animal := CreateHuman ;
41214: LD_ADDR_VAR 0 12
41218: PUSH
41219: CALL_OW 44
41223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41224: LD_VAR 0 12
41228: PPUSH
41229: LD_VAR 0 8
41233: PPUSH
41234: LD_INT 0
41236: PPUSH
41237: CALL 43291 0 3
// end ;
41241: GO 41195
41243: POP
41244: POP
// if tigers then
41245: LD_VAR 0 2
41249: IFFALSE 41333
// for i = 1 to tigers do
41251: LD_ADDR_VAR 0 11
41255: PUSH
41256: DOUBLE
41257: LD_INT 1
41259: DEC
41260: ST_TO_ADDR
41261: LD_VAR 0 2
41265: PUSH
41266: FOR_TO
41267: IFFALSE 41331
// begin hc_class = class_tiger ;
41269: LD_ADDR_OWVAR 28
41273: PUSH
41274: LD_INT 14
41276: ST_TO_ADDR
// hc_gallery =  ;
41277: LD_ADDR_OWVAR 33
41281: PUSH
41282: LD_STRING 
41284: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41285: LD_ADDR_OWVAR 35
41289: PUSH
41290: LD_INT 7
41292: NEG
41293: PPUSH
41294: LD_INT 7
41296: PPUSH
41297: CALL_OW 12
41301: ST_TO_ADDR
// animal := CreateHuman ;
41302: LD_ADDR_VAR 0 12
41306: PUSH
41307: CALL_OW 44
41311: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41312: LD_VAR 0 12
41316: PPUSH
41317: LD_VAR 0 8
41321: PPUSH
41322: LD_INT 0
41324: PPUSH
41325: CALL 43291 0 3
// end ;
41329: GO 41266
41331: POP
41332: POP
// if apemans then
41333: LD_VAR 0 3
41337: IFFALSE 41460
// for i = 1 to apemans do
41339: LD_ADDR_VAR 0 11
41343: PUSH
41344: DOUBLE
41345: LD_INT 1
41347: DEC
41348: ST_TO_ADDR
41349: LD_VAR 0 3
41353: PUSH
41354: FOR_TO
41355: IFFALSE 41458
// begin hc_class = class_apeman ;
41357: LD_ADDR_OWVAR 28
41361: PUSH
41362: LD_INT 12
41364: ST_TO_ADDR
// hc_gallery =  ;
41365: LD_ADDR_OWVAR 33
41369: PUSH
41370: LD_STRING 
41372: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
41373: LD_ADDR_OWVAR 35
41377: PUSH
41378: LD_INT 5
41380: NEG
41381: PPUSH
41382: LD_INT 5
41384: PPUSH
41385: CALL_OW 12
41389: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41390: LD_ADDR_OWVAR 31
41394: PUSH
41395: LD_INT 1
41397: PPUSH
41398: LD_INT 3
41400: PPUSH
41401: CALL_OW 12
41405: PUSH
41406: LD_INT 1
41408: PPUSH
41409: LD_INT 3
41411: PPUSH
41412: CALL_OW 12
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: ST_TO_ADDR
// animal := CreateHuman ;
41429: LD_ADDR_VAR 0 12
41433: PUSH
41434: CALL_OW 44
41438: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41439: LD_VAR 0 12
41443: PPUSH
41444: LD_VAR 0 8
41448: PPUSH
41449: LD_INT 0
41451: PPUSH
41452: CALL 43291 0 3
// end ;
41456: GO 41354
41458: POP
41459: POP
// if enchidnas then
41460: LD_VAR 0 4
41464: IFFALSE 41531
// for i = 1 to enchidnas do
41466: LD_ADDR_VAR 0 11
41470: PUSH
41471: DOUBLE
41472: LD_INT 1
41474: DEC
41475: ST_TO_ADDR
41476: LD_VAR 0 4
41480: PUSH
41481: FOR_TO
41482: IFFALSE 41529
// begin hc_class = 13 ;
41484: LD_ADDR_OWVAR 28
41488: PUSH
41489: LD_INT 13
41491: ST_TO_ADDR
// hc_gallery =  ;
41492: LD_ADDR_OWVAR 33
41496: PUSH
41497: LD_STRING 
41499: ST_TO_ADDR
// animal := CreateHuman ;
41500: LD_ADDR_VAR 0 12
41504: PUSH
41505: CALL_OW 44
41509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41510: LD_VAR 0 12
41514: PPUSH
41515: LD_VAR 0 8
41519: PPUSH
41520: LD_INT 0
41522: PPUSH
41523: CALL 43291 0 3
// end ;
41527: GO 41481
41529: POP
41530: POP
// if fishes then
41531: LD_VAR 0 7
41535: IFFALSE 41602
// for i = 1 to fishes do
41537: LD_ADDR_VAR 0 11
41541: PUSH
41542: DOUBLE
41543: LD_INT 1
41545: DEC
41546: ST_TO_ADDR
41547: LD_VAR 0 7
41551: PUSH
41552: FOR_TO
41553: IFFALSE 41600
// begin hc_class = 20 ;
41555: LD_ADDR_OWVAR 28
41559: PUSH
41560: LD_INT 20
41562: ST_TO_ADDR
// hc_gallery =  ;
41563: LD_ADDR_OWVAR 33
41567: PUSH
41568: LD_STRING 
41570: ST_TO_ADDR
// animal := CreateHuman ;
41571: LD_ADDR_VAR 0 12
41575: PUSH
41576: CALL_OW 44
41580: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41581: LD_VAR 0 12
41585: PPUSH
41586: LD_VAR 0 9
41590: PPUSH
41591: LD_INT 0
41593: PPUSH
41594: CALL 43291 0 3
// end ;
41598: GO 41552
41600: POP
41601: POP
// end ;
41602: LD_VAR 0 10
41606: RET
// export function WantHeal ( sci , unit ) ; begin
41607: LD_INT 0
41609: PPUSH
// if GetTaskList ( sci ) > 0 then
41610: LD_VAR 0 1
41614: PPUSH
41615: CALL_OW 437
41619: PUSH
41620: LD_INT 0
41622: GREATER
41623: IFFALSE 41693
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41625: LD_VAR 0 1
41629: PPUSH
41630: CALL_OW 437
41634: PUSH
41635: LD_INT 1
41637: ARRAY
41638: PUSH
41639: LD_INT 1
41641: ARRAY
41642: PUSH
41643: LD_STRING l
41645: EQUAL
41646: PUSH
41647: LD_VAR 0 1
41651: PPUSH
41652: CALL_OW 437
41656: PUSH
41657: LD_INT 1
41659: ARRAY
41660: PUSH
41661: LD_INT 4
41663: ARRAY
41664: PUSH
41665: LD_VAR 0 2
41669: EQUAL
41670: AND
41671: IFFALSE 41683
// result := true else
41673: LD_ADDR_VAR 0 3
41677: PUSH
41678: LD_INT 1
41680: ST_TO_ADDR
41681: GO 41691
// result := false ;
41683: LD_ADDR_VAR 0 3
41687: PUSH
41688: LD_INT 0
41690: ST_TO_ADDR
// end else
41691: GO 41701
// result := false ;
41693: LD_ADDR_VAR 0 3
41697: PUSH
41698: LD_INT 0
41700: ST_TO_ADDR
// end ;
41701: LD_VAR 0 3
41705: RET
// export function HealTarget ( sci ) ; begin
41706: LD_INT 0
41708: PPUSH
// if not sci then
41709: LD_VAR 0 1
41713: NOT
41714: IFFALSE 41718
// exit ;
41716: GO 41783
// result := 0 ;
41718: LD_ADDR_VAR 0 2
41722: PUSH
41723: LD_INT 0
41725: ST_TO_ADDR
// if GetTaskList ( sci ) then
41726: LD_VAR 0 1
41730: PPUSH
41731: CALL_OW 437
41735: IFFALSE 41783
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41737: LD_VAR 0 1
41741: PPUSH
41742: CALL_OW 437
41746: PUSH
41747: LD_INT 1
41749: ARRAY
41750: PUSH
41751: LD_INT 1
41753: ARRAY
41754: PUSH
41755: LD_STRING l
41757: EQUAL
41758: IFFALSE 41783
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41760: LD_ADDR_VAR 0 2
41764: PUSH
41765: LD_VAR 0 1
41769: PPUSH
41770: CALL_OW 437
41774: PUSH
41775: LD_INT 1
41777: ARRAY
41778: PUSH
41779: LD_INT 4
41781: ARRAY
41782: ST_TO_ADDR
// end ;
41783: LD_VAR 0 2
41787: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41788: LD_INT 0
41790: PPUSH
41791: PPUSH
41792: PPUSH
41793: PPUSH
// if not base_units then
41794: LD_VAR 0 1
41798: NOT
41799: IFFALSE 41803
// exit ;
41801: GO 41890
// result := false ;
41803: LD_ADDR_VAR 0 2
41807: PUSH
41808: LD_INT 0
41810: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41811: LD_ADDR_VAR 0 5
41815: PUSH
41816: LD_VAR 0 1
41820: PPUSH
41821: LD_INT 21
41823: PUSH
41824: LD_INT 3
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PPUSH
41831: CALL_OW 72
41835: ST_TO_ADDR
// if not tmp then
41836: LD_VAR 0 5
41840: NOT
41841: IFFALSE 41845
// exit ;
41843: GO 41890
// for i in tmp do
41845: LD_ADDR_VAR 0 3
41849: PUSH
41850: LD_VAR 0 5
41854: PUSH
41855: FOR_IN
41856: IFFALSE 41888
// begin result := EnemyInRange ( i , 22 ) ;
41858: LD_ADDR_VAR 0 2
41862: PUSH
41863: LD_VAR 0 3
41867: PPUSH
41868: LD_INT 22
41870: PPUSH
41871: CALL 40126 0 2
41875: ST_TO_ADDR
// if result then
41876: LD_VAR 0 2
41880: IFFALSE 41886
// exit ;
41882: POP
41883: POP
41884: GO 41890
// end ;
41886: GO 41855
41888: POP
41889: POP
// end ;
41890: LD_VAR 0 2
41894: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
41895: LD_INT 0
41897: PPUSH
41898: PPUSH
// if not units then
41899: LD_VAR 0 1
41903: NOT
41904: IFFALSE 41908
// exit ;
41906: GO 41978
// result := [ ] ;
41908: LD_ADDR_VAR 0 3
41912: PUSH
41913: EMPTY
41914: ST_TO_ADDR
// for i in units do
41915: LD_ADDR_VAR 0 4
41919: PUSH
41920: LD_VAR 0 1
41924: PUSH
41925: FOR_IN
41926: IFFALSE 41976
// if GetTag ( i ) = tag then
41928: LD_VAR 0 4
41932: PPUSH
41933: CALL_OW 110
41937: PUSH
41938: LD_VAR 0 2
41942: EQUAL
41943: IFFALSE 41974
// result := Insert ( result , result + 1 , i ) ;
41945: LD_ADDR_VAR 0 3
41949: PUSH
41950: LD_VAR 0 3
41954: PPUSH
41955: LD_VAR 0 3
41959: PUSH
41960: LD_INT 1
41962: PLUS
41963: PPUSH
41964: LD_VAR 0 4
41968: PPUSH
41969: CALL_OW 2
41973: ST_TO_ADDR
41974: GO 41925
41976: POP
41977: POP
// end ;
41978: LD_VAR 0 3
41982: RET
// export function IsDriver ( un ) ; begin
41983: LD_INT 0
41985: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41986: LD_ADDR_VAR 0 2
41990: PUSH
41991: LD_VAR 0 1
41995: PUSH
41996: LD_INT 55
41998: PUSH
41999: EMPTY
42000: LIST
42001: PPUSH
42002: CALL_OW 69
42006: IN
42007: ST_TO_ADDR
// end ;
42008: LD_VAR 0 2
42012: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42013: LD_INT 0
42015: PPUSH
42016: PPUSH
// list := [ ] ;
42017: LD_ADDR_VAR 0 5
42021: PUSH
42022: EMPTY
42023: ST_TO_ADDR
// case d of 0 :
42024: LD_VAR 0 3
42028: PUSH
42029: LD_INT 0
42031: DOUBLE
42032: EQUAL
42033: IFTRUE 42037
42035: GO 42170
42037: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42038: LD_ADDR_VAR 0 5
42042: PUSH
42043: LD_VAR 0 1
42047: PUSH
42048: LD_INT 4
42050: MINUS
42051: PUSH
42052: LD_VAR 0 2
42056: PUSH
42057: LD_INT 4
42059: MINUS
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: PUSH
42069: LD_VAR 0 1
42073: PUSH
42074: LD_INT 3
42076: MINUS
42077: PUSH
42078: LD_VAR 0 2
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: PUSH
42091: LD_VAR 0 1
42095: PUSH
42096: LD_INT 4
42098: PLUS
42099: PUSH
42100: LD_VAR 0 2
42104: PUSH
42105: LD_INT 4
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: LIST
42112: PUSH
42113: LD_VAR 0 1
42117: PUSH
42118: LD_INT 3
42120: PLUS
42121: PUSH
42122: LD_VAR 0 2
42126: PUSH
42127: LD_INT 3
42129: PLUS
42130: PUSH
42131: LD_INT 5
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: PUSH
42139: LD_VAR 0 1
42143: PUSH
42144: LD_VAR 0 2
42148: PUSH
42149: LD_INT 4
42151: PLUS
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: ST_TO_ADDR
// end ; 1 :
42168: GO 42868
42170: LD_INT 1
42172: DOUBLE
42173: EQUAL
42174: IFTRUE 42178
42176: GO 42311
42178: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42179: LD_ADDR_VAR 0 5
42183: PUSH
42184: LD_VAR 0 1
42188: PUSH
42189: LD_VAR 0 2
42193: PUSH
42194: LD_INT 4
42196: MINUS
42197: PUSH
42198: LD_INT 3
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: PUSH
42206: LD_VAR 0 1
42210: PUSH
42211: LD_INT 3
42213: MINUS
42214: PUSH
42215: LD_VAR 0 2
42219: PUSH
42220: LD_INT 3
42222: MINUS
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: LIST
42231: PUSH
42232: LD_VAR 0 1
42236: PUSH
42237: LD_INT 4
42239: MINUS
42240: PUSH
42241: LD_VAR 0 2
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: LIST
42253: PUSH
42254: LD_VAR 0 1
42258: PUSH
42259: LD_VAR 0 2
42263: PUSH
42264: LD_INT 3
42266: PLUS
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: LIST
42275: PUSH
42276: LD_VAR 0 1
42280: PUSH
42281: LD_INT 4
42283: PLUS
42284: PUSH
42285: LD_VAR 0 2
42289: PUSH
42290: LD_INT 4
42292: PLUS
42293: PUSH
42294: LD_INT 5
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: ST_TO_ADDR
// end ; 2 :
42309: GO 42868
42311: LD_INT 2
42313: DOUBLE
42314: EQUAL
42315: IFTRUE 42319
42317: GO 42448
42319: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42320: LD_ADDR_VAR 0 5
42324: PUSH
42325: LD_VAR 0 1
42329: PUSH
42330: LD_VAR 0 2
42334: PUSH
42335: LD_INT 3
42337: MINUS
42338: PUSH
42339: LD_INT 3
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: LIST
42346: PUSH
42347: LD_VAR 0 1
42351: PUSH
42352: LD_INT 4
42354: PLUS
42355: PUSH
42356: LD_VAR 0 2
42360: PUSH
42361: LD_INT 4
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: LIST
42368: PUSH
42369: LD_VAR 0 1
42373: PUSH
42374: LD_VAR 0 2
42378: PUSH
42379: LD_INT 4
42381: PLUS
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: LIST
42390: PUSH
42391: LD_VAR 0 1
42395: PUSH
42396: LD_INT 3
42398: MINUS
42399: PUSH
42400: LD_VAR 0 2
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: LIST
42412: PUSH
42413: LD_VAR 0 1
42417: PUSH
42418: LD_INT 4
42420: MINUS
42421: PUSH
42422: LD_VAR 0 2
42426: PUSH
42427: LD_INT 4
42429: MINUS
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: LIST
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: ST_TO_ADDR
// end ; 3 :
42446: GO 42868
42448: LD_INT 3
42450: DOUBLE
42451: EQUAL
42452: IFTRUE 42456
42454: GO 42589
42456: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42457: LD_ADDR_VAR 0 5
42461: PUSH
42462: LD_VAR 0 1
42466: PUSH
42467: LD_INT 3
42469: PLUS
42470: PUSH
42471: LD_VAR 0 2
42475: PUSH
42476: LD_INT 4
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: LIST
42483: PUSH
42484: LD_VAR 0 1
42488: PUSH
42489: LD_INT 4
42491: PLUS
42492: PUSH
42493: LD_VAR 0 2
42497: PUSH
42498: LD_INT 4
42500: PLUS
42501: PUSH
42502: LD_INT 5
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: LIST
42509: PUSH
42510: LD_VAR 0 1
42514: PUSH
42515: LD_INT 4
42517: MINUS
42518: PUSH
42519: LD_VAR 0 2
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: LIST
42531: PUSH
42532: LD_VAR 0 1
42536: PUSH
42537: LD_VAR 0 2
42541: PUSH
42542: LD_INT 4
42544: MINUS
42545: PUSH
42546: LD_INT 3
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: PUSH
42554: LD_VAR 0 1
42558: PUSH
42559: LD_INT 3
42561: MINUS
42562: PUSH
42563: LD_VAR 0 2
42567: PUSH
42568: LD_INT 3
42570: MINUS
42571: PUSH
42572: LD_INT 2
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: ST_TO_ADDR
// end ; 4 :
42587: GO 42868
42589: LD_INT 4
42591: DOUBLE
42592: EQUAL
42593: IFTRUE 42597
42595: GO 42730
42597: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42598: LD_ADDR_VAR 0 5
42602: PUSH
42603: LD_VAR 0 1
42607: PUSH
42608: LD_VAR 0 2
42612: PUSH
42613: LD_INT 4
42615: PLUS
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: LIST
42624: PUSH
42625: LD_VAR 0 1
42629: PUSH
42630: LD_INT 3
42632: PLUS
42633: PUSH
42634: LD_VAR 0 2
42638: PUSH
42639: LD_INT 3
42641: PLUS
42642: PUSH
42643: LD_INT 5
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: PUSH
42651: LD_VAR 0 1
42655: PUSH
42656: LD_INT 4
42658: PLUS
42659: PUSH
42660: LD_VAR 0 2
42664: PUSH
42665: LD_INT 4
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: PUSH
42673: LD_VAR 0 1
42677: PUSH
42678: LD_VAR 0 2
42682: PUSH
42683: LD_INT 3
42685: MINUS
42686: PUSH
42687: LD_INT 3
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: LIST
42694: PUSH
42695: LD_VAR 0 1
42699: PUSH
42700: LD_INT 4
42702: MINUS
42703: PUSH
42704: LD_VAR 0 2
42708: PUSH
42709: LD_INT 4
42711: MINUS
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: LIST
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: ST_TO_ADDR
// end ; 5 :
42728: GO 42868
42730: LD_INT 5
42732: DOUBLE
42733: EQUAL
42734: IFTRUE 42738
42736: GO 42867
42738: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42739: LD_ADDR_VAR 0 5
42743: PUSH
42744: LD_VAR 0 1
42748: PUSH
42749: LD_INT 4
42751: MINUS
42752: PUSH
42753: LD_VAR 0 2
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: PUSH
42766: LD_VAR 0 1
42770: PUSH
42771: LD_VAR 0 2
42775: PUSH
42776: LD_INT 4
42778: MINUS
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: PUSH
42788: LD_VAR 0 1
42792: PUSH
42793: LD_INT 4
42795: PLUS
42796: PUSH
42797: LD_VAR 0 2
42801: PUSH
42802: LD_INT 4
42804: PLUS
42805: PUSH
42806: LD_INT 5
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: LIST
42813: PUSH
42814: LD_VAR 0 1
42818: PUSH
42819: LD_INT 3
42821: PLUS
42822: PUSH
42823: LD_VAR 0 2
42827: PUSH
42828: LD_INT 4
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: LIST
42835: PUSH
42836: LD_VAR 0 1
42840: PUSH
42841: LD_VAR 0 2
42845: PUSH
42846: LD_INT 3
42848: PLUS
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: LIST
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: ST_TO_ADDR
// end ; end ;
42865: GO 42868
42867: POP
// result := list ;
42868: LD_ADDR_VAR 0 4
42872: PUSH
42873: LD_VAR 0 5
42877: ST_TO_ADDR
// end ;
42878: LD_VAR 0 4
42882: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42883: LD_INT 0
42885: PPUSH
42886: PPUSH
42887: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42888: LD_VAR 0 1
42892: NOT
42893: PUSH
42894: LD_VAR 0 2
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: LD_INT 3
42907: PUSH
42908: LD_INT 4
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: IN
42917: NOT
42918: OR
42919: IFFALSE 42923
// exit ;
42921: GO 43015
// tmp := [ ] ;
42923: LD_ADDR_VAR 0 5
42927: PUSH
42928: EMPTY
42929: ST_TO_ADDR
// for i in units do
42930: LD_ADDR_VAR 0 4
42934: PUSH
42935: LD_VAR 0 1
42939: PUSH
42940: FOR_IN
42941: IFFALSE 42984
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
42943: LD_ADDR_VAR 0 5
42947: PUSH
42948: LD_VAR 0 5
42952: PPUSH
42953: LD_VAR 0 5
42957: PUSH
42958: LD_INT 1
42960: PLUS
42961: PPUSH
42962: LD_VAR 0 4
42966: PPUSH
42967: LD_VAR 0 2
42971: PPUSH
42972: CALL_OW 259
42976: PPUSH
42977: CALL_OW 2
42981: ST_TO_ADDR
42982: GO 42940
42984: POP
42985: POP
// if not tmp then
42986: LD_VAR 0 5
42990: NOT
42991: IFFALSE 42995
// exit ;
42993: GO 43015
// result := SortListByListDesc ( units , tmp ) ;
42995: LD_ADDR_VAR 0 3
42999: PUSH
43000: LD_VAR 0 1
43004: PPUSH
43005: LD_VAR 0 5
43009: PPUSH
43010: CALL_OW 77
43014: ST_TO_ADDR
// end ;
43015: LD_VAR 0 3
43019: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43020: LD_INT 0
43022: PPUSH
43023: PPUSH
43024: PPUSH
// result := false ;
43025: LD_ADDR_VAR 0 3
43029: PUSH
43030: LD_INT 0
43032: ST_TO_ADDR
// x := GetX ( building ) ;
43033: LD_ADDR_VAR 0 4
43037: PUSH
43038: LD_VAR 0 2
43042: PPUSH
43043: CALL_OW 250
43047: ST_TO_ADDR
// y := GetY ( building ) ;
43048: LD_ADDR_VAR 0 5
43052: PUSH
43053: LD_VAR 0 2
43057: PPUSH
43058: CALL_OW 251
43062: ST_TO_ADDR
// if not building or not x or not y then
43063: LD_VAR 0 2
43067: NOT
43068: PUSH
43069: LD_VAR 0 4
43073: NOT
43074: OR
43075: PUSH
43076: LD_VAR 0 5
43080: NOT
43081: OR
43082: IFFALSE 43086
// exit ;
43084: GO 43178
// if GetTaskList ( unit ) then
43086: LD_VAR 0 1
43090: PPUSH
43091: CALL_OW 437
43095: IFFALSE 43178
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43097: LD_STRING e
43099: PUSH
43100: LD_VAR 0 1
43104: PPUSH
43105: CALL_OW 437
43109: PUSH
43110: LD_INT 1
43112: ARRAY
43113: PUSH
43114: LD_INT 1
43116: ARRAY
43117: EQUAL
43118: PUSH
43119: LD_VAR 0 4
43123: PUSH
43124: LD_VAR 0 1
43128: PPUSH
43129: CALL_OW 437
43133: PUSH
43134: LD_INT 1
43136: ARRAY
43137: PUSH
43138: LD_INT 2
43140: ARRAY
43141: EQUAL
43142: AND
43143: PUSH
43144: LD_VAR 0 5
43148: PUSH
43149: LD_VAR 0 1
43153: PPUSH
43154: CALL_OW 437
43158: PUSH
43159: LD_INT 1
43161: ARRAY
43162: PUSH
43163: LD_INT 3
43165: ARRAY
43166: EQUAL
43167: AND
43168: IFFALSE 43178
// result := true end ;
43170: LD_ADDR_VAR 0 3
43174: PUSH
43175: LD_INT 1
43177: ST_TO_ADDR
// end ;
43178: LD_VAR 0 3
43182: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43183: LD_INT 0
43185: PPUSH
// result := false ;
43186: LD_ADDR_VAR 0 4
43190: PUSH
43191: LD_INT 0
43193: ST_TO_ADDR
// if GetTaskList ( unit ) then
43194: LD_VAR 0 1
43198: PPUSH
43199: CALL_OW 437
43203: IFFALSE 43286
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43205: LD_STRING M
43207: PUSH
43208: LD_VAR 0 1
43212: PPUSH
43213: CALL_OW 437
43217: PUSH
43218: LD_INT 1
43220: ARRAY
43221: PUSH
43222: LD_INT 1
43224: ARRAY
43225: EQUAL
43226: PUSH
43227: LD_VAR 0 2
43231: PUSH
43232: LD_VAR 0 1
43236: PPUSH
43237: CALL_OW 437
43241: PUSH
43242: LD_INT 1
43244: ARRAY
43245: PUSH
43246: LD_INT 2
43248: ARRAY
43249: EQUAL
43250: AND
43251: PUSH
43252: LD_VAR 0 3
43256: PUSH
43257: LD_VAR 0 1
43261: PPUSH
43262: CALL_OW 437
43266: PUSH
43267: LD_INT 1
43269: ARRAY
43270: PUSH
43271: LD_INT 3
43273: ARRAY
43274: EQUAL
43275: AND
43276: IFFALSE 43286
// result := true ;
43278: LD_ADDR_VAR 0 4
43282: PUSH
43283: LD_INT 1
43285: ST_TO_ADDR
// end ; end ;
43286: LD_VAR 0 4
43290: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43291: LD_INT 0
43293: PPUSH
43294: PPUSH
43295: PPUSH
43296: PPUSH
// if not unit or not area then
43297: LD_VAR 0 1
43301: NOT
43302: PUSH
43303: LD_VAR 0 2
43307: NOT
43308: OR
43309: IFFALSE 43313
// exit ;
43311: GO 43477
// tmp := AreaToList ( area , i ) ;
43313: LD_ADDR_VAR 0 6
43317: PUSH
43318: LD_VAR 0 2
43322: PPUSH
43323: LD_VAR 0 5
43327: PPUSH
43328: CALL_OW 517
43332: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43333: LD_ADDR_VAR 0 5
43337: PUSH
43338: DOUBLE
43339: LD_INT 1
43341: DEC
43342: ST_TO_ADDR
43343: LD_VAR 0 6
43347: PUSH
43348: LD_INT 1
43350: ARRAY
43351: PUSH
43352: FOR_TO
43353: IFFALSE 43475
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43355: LD_ADDR_VAR 0 7
43359: PUSH
43360: LD_VAR 0 6
43364: PUSH
43365: LD_INT 1
43367: ARRAY
43368: PUSH
43369: LD_VAR 0 5
43373: ARRAY
43374: PUSH
43375: LD_VAR 0 6
43379: PUSH
43380: LD_INT 2
43382: ARRAY
43383: PUSH
43384: LD_VAR 0 5
43388: ARRAY
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
43394: LD_VAR 0 7
43398: PUSH
43399: LD_INT 1
43401: ARRAY
43402: PPUSH
43403: LD_VAR 0 7
43407: PUSH
43408: LD_INT 2
43410: ARRAY
43411: PPUSH
43412: CALL_OW 428
43416: PUSH
43417: LD_INT 0
43419: EQUAL
43420: IFFALSE 43473
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43422: LD_VAR 0 1
43426: PPUSH
43427: LD_VAR 0 7
43431: PUSH
43432: LD_INT 1
43434: ARRAY
43435: PPUSH
43436: LD_VAR 0 7
43440: PUSH
43441: LD_INT 2
43443: ARRAY
43444: PPUSH
43445: LD_VAR 0 3
43449: PPUSH
43450: CALL_OW 48
// result := IsPlaced ( unit ) ;
43454: LD_ADDR_VAR 0 4
43458: PUSH
43459: LD_VAR 0 1
43463: PPUSH
43464: CALL_OW 305
43468: ST_TO_ADDR
// exit ;
43469: POP
43470: POP
43471: GO 43477
// end ; end ;
43473: GO 43352
43475: POP
43476: POP
// end ;
43477: LD_VAR 0 4
43481: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43482: LD_INT 0
43484: PPUSH
43485: PPUSH
43486: PPUSH
// if not side or side > 8 then
43487: LD_VAR 0 1
43491: NOT
43492: PUSH
43493: LD_VAR 0 1
43497: PUSH
43498: LD_INT 8
43500: GREATER
43501: OR
43502: IFFALSE 43506
// exit ;
43504: GO 43693
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43506: LD_ADDR_VAR 0 4
43510: PUSH
43511: LD_INT 22
43513: PUSH
43514: LD_VAR 0 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 21
43525: PUSH
43526: LD_INT 3
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PPUSH
43537: CALL_OW 69
43541: ST_TO_ADDR
// if not tmp then
43542: LD_VAR 0 4
43546: NOT
43547: IFFALSE 43551
// exit ;
43549: GO 43693
// enable_addtolog := true ;
43551: LD_ADDR_OWVAR 81
43555: PUSH
43556: LD_INT 1
43558: ST_TO_ADDR
// AddToLog ( [ ) ;
43559: LD_STRING [
43561: PPUSH
43562: CALL_OW 561
// for i in tmp do
43566: LD_ADDR_VAR 0 3
43570: PUSH
43571: LD_VAR 0 4
43575: PUSH
43576: FOR_IN
43577: IFFALSE 43684
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43579: LD_STRING [
43581: PUSH
43582: LD_VAR 0 3
43586: PPUSH
43587: CALL_OW 266
43591: STR
43592: PUSH
43593: LD_STRING , 
43595: STR
43596: PUSH
43597: LD_VAR 0 3
43601: PPUSH
43602: CALL_OW 250
43606: STR
43607: PUSH
43608: LD_STRING , 
43610: STR
43611: PUSH
43612: LD_VAR 0 3
43616: PPUSH
43617: CALL_OW 251
43621: STR
43622: PUSH
43623: LD_STRING , 
43625: STR
43626: PUSH
43627: LD_VAR 0 3
43631: PPUSH
43632: CALL_OW 254
43636: STR
43637: PUSH
43638: LD_STRING , 
43640: STR
43641: PUSH
43642: LD_VAR 0 3
43646: PPUSH
43647: LD_INT 1
43649: PPUSH
43650: CALL_OW 268
43654: STR
43655: PUSH
43656: LD_STRING , 
43658: STR
43659: PUSH
43660: LD_VAR 0 3
43664: PPUSH
43665: LD_INT 2
43667: PPUSH
43668: CALL_OW 268
43672: STR
43673: PUSH
43674: LD_STRING ],
43676: STR
43677: PPUSH
43678: CALL_OW 561
// end ;
43682: GO 43576
43684: POP
43685: POP
// AddToLog ( ]; ) ;
43686: LD_STRING ];
43688: PPUSH
43689: CALL_OW 561
// end ;
43693: LD_VAR 0 2
43697: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43698: LD_INT 0
43700: PPUSH
43701: PPUSH
43702: PPUSH
43703: PPUSH
43704: PPUSH
// if not area or not rate or not max then
43705: LD_VAR 0 1
43709: NOT
43710: PUSH
43711: LD_VAR 0 2
43715: NOT
43716: OR
43717: PUSH
43718: LD_VAR 0 4
43722: NOT
43723: OR
43724: IFFALSE 43728
// exit ;
43726: GO 43920
// while 1 do
43728: LD_INT 1
43730: IFFALSE 43920
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43732: LD_ADDR_VAR 0 9
43736: PUSH
43737: LD_VAR 0 1
43741: PPUSH
43742: LD_INT 1
43744: PPUSH
43745: CALL_OW 287
43749: PUSH
43750: LD_INT 10
43752: MUL
43753: ST_TO_ADDR
// r := rate / 10 ;
43754: LD_ADDR_VAR 0 7
43758: PUSH
43759: LD_VAR 0 2
43763: PUSH
43764: LD_INT 10
43766: DIVREAL
43767: ST_TO_ADDR
// time := 1 1$00 ;
43768: LD_ADDR_VAR 0 8
43772: PUSH
43773: LD_INT 2100
43775: ST_TO_ADDR
// if amount < min then
43776: LD_VAR 0 9
43780: PUSH
43781: LD_VAR 0 3
43785: LESS
43786: IFFALSE 43804
// r := r * 2 else
43788: LD_ADDR_VAR 0 7
43792: PUSH
43793: LD_VAR 0 7
43797: PUSH
43798: LD_INT 2
43800: MUL
43801: ST_TO_ADDR
43802: GO 43830
// if amount > max then
43804: LD_VAR 0 9
43808: PUSH
43809: LD_VAR 0 4
43813: GREATER
43814: IFFALSE 43830
// r := r / 2 ;
43816: LD_ADDR_VAR 0 7
43820: PUSH
43821: LD_VAR 0 7
43825: PUSH
43826: LD_INT 2
43828: DIVREAL
43829: ST_TO_ADDR
// time := time / r ;
43830: LD_ADDR_VAR 0 8
43834: PUSH
43835: LD_VAR 0 8
43839: PUSH
43840: LD_VAR 0 7
43844: DIVREAL
43845: ST_TO_ADDR
// if time < 0 then
43846: LD_VAR 0 8
43850: PUSH
43851: LD_INT 0
43853: LESS
43854: IFFALSE 43871
// time := time * - 1 ;
43856: LD_ADDR_VAR 0 8
43860: PUSH
43861: LD_VAR 0 8
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: MUL
43870: ST_TO_ADDR
// wait ( time ) ;
43871: LD_VAR 0 8
43875: PPUSH
43876: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
43880: LD_INT 35
43882: PPUSH
43883: LD_INT 875
43885: PPUSH
43886: CALL_OW 12
43890: PPUSH
43891: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43895: LD_INT 1
43897: PPUSH
43898: LD_INT 5
43900: PPUSH
43901: CALL_OW 12
43905: PPUSH
43906: LD_VAR 0 1
43910: PPUSH
43911: LD_INT 1
43913: PPUSH
43914: CALL_OW 55
// end ;
43918: GO 43728
// end ;
43920: LD_VAR 0 5
43924: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43925: LD_INT 0
43927: PPUSH
43928: PPUSH
43929: PPUSH
43930: PPUSH
43931: PPUSH
43932: PPUSH
43933: PPUSH
43934: PPUSH
// if not turrets or not factories then
43935: LD_VAR 0 1
43939: NOT
43940: PUSH
43941: LD_VAR 0 2
43945: NOT
43946: OR
43947: IFFALSE 43951
// exit ;
43949: GO 44258
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43951: LD_ADDR_VAR 0 10
43955: PUSH
43956: LD_INT 5
43958: PUSH
43959: LD_INT 6
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 2
43968: PUSH
43969: LD_INT 4
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 3
43978: PUSH
43979: LD_INT 5
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 24
43993: PUSH
43994: LD_INT 25
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 23
44003: PUSH
44004: LD_INT 27
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 42
44017: PUSH
44018: LD_INT 43
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 44
44027: PUSH
44028: LD_INT 46
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 45
44037: PUSH
44038: LD_INT 47
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: LIST
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: LIST
44054: ST_TO_ADDR
// result := [ ] ;
44055: LD_ADDR_VAR 0 3
44059: PUSH
44060: EMPTY
44061: ST_TO_ADDR
// for i in turrets do
44062: LD_ADDR_VAR 0 4
44066: PUSH
44067: LD_VAR 0 1
44071: PUSH
44072: FOR_IN
44073: IFFALSE 44256
// begin nat := GetNation ( i ) ;
44075: LD_ADDR_VAR 0 7
44079: PUSH
44080: LD_VAR 0 4
44084: PPUSH
44085: CALL_OW 248
44089: ST_TO_ADDR
// weapon := 0 ;
44090: LD_ADDR_VAR 0 8
44094: PUSH
44095: LD_INT 0
44097: ST_TO_ADDR
// if not nat then
44098: LD_VAR 0 7
44102: NOT
44103: IFFALSE 44107
// continue ;
44105: GO 44072
// for j in list [ nat ] do
44107: LD_ADDR_VAR 0 5
44111: PUSH
44112: LD_VAR 0 10
44116: PUSH
44117: LD_VAR 0 7
44121: ARRAY
44122: PUSH
44123: FOR_IN
44124: IFFALSE 44165
// if GetBWeapon ( i ) = j [ 1 ] then
44126: LD_VAR 0 4
44130: PPUSH
44131: CALL_OW 269
44135: PUSH
44136: LD_VAR 0 5
44140: PUSH
44141: LD_INT 1
44143: ARRAY
44144: EQUAL
44145: IFFALSE 44163
// begin weapon := j [ 2 ] ;
44147: LD_ADDR_VAR 0 8
44151: PUSH
44152: LD_VAR 0 5
44156: PUSH
44157: LD_INT 2
44159: ARRAY
44160: ST_TO_ADDR
// break ;
44161: GO 44165
// end ;
44163: GO 44123
44165: POP
44166: POP
// if not weapon then
44167: LD_VAR 0 8
44171: NOT
44172: IFFALSE 44176
// continue ;
44174: GO 44072
// for k in factories do
44176: LD_ADDR_VAR 0 6
44180: PUSH
44181: LD_VAR 0 2
44185: PUSH
44186: FOR_IN
44187: IFFALSE 44252
// begin weapons := AvailableWeaponList ( k ) ;
44189: LD_ADDR_VAR 0 9
44193: PUSH
44194: LD_VAR 0 6
44198: PPUSH
44199: CALL_OW 478
44203: ST_TO_ADDR
// if not weapons then
44204: LD_VAR 0 9
44208: NOT
44209: IFFALSE 44213
// continue ;
44211: GO 44186
// if weapon in weapons then
44213: LD_VAR 0 8
44217: PUSH
44218: LD_VAR 0 9
44222: IN
44223: IFFALSE 44250
// begin result := [ i , weapon ] ;
44225: LD_ADDR_VAR 0 3
44229: PUSH
44230: LD_VAR 0 4
44234: PUSH
44235: LD_VAR 0 8
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: ST_TO_ADDR
// exit ;
44244: POP
44245: POP
44246: POP
44247: POP
44248: GO 44258
// end ; end ;
44250: GO 44186
44252: POP
44253: POP
// end ;
44254: GO 44072
44256: POP
44257: POP
// end ;
44258: LD_VAR 0 3
44262: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44263: LD_INT 0
44265: PPUSH
// if not side or side > 8 then
44266: LD_VAR 0 3
44270: NOT
44271: PUSH
44272: LD_VAR 0 3
44276: PUSH
44277: LD_INT 8
44279: GREATER
44280: OR
44281: IFFALSE 44285
// exit ;
44283: GO 44344
// if not range then
44285: LD_VAR 0 4
44289: NOT
44290: IFFALSE 44301
// range := - 12 ;
44292: LD_ADDR_VAR 0 4
44296: PUSH
44297: LD_INT 12
44299: NEG
44300: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44301: LD_VAR 0 1
44305: PPUSH
44306: LD_VAR 0 2
44310: PPUSH
44311: LD_VAR 0 3
44315: PPUSH
44316: LD_VAR 0 4
44320: PPUSH
44321: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44325: LD_VAR 0 1
44329: PPUSH
44330: LD_VAR 0 2
44334: PPUSH
44335: LD_VAR 0 3
44339: PPUSH
44340: CALL_OW 331
// end ;
44344: LD_VAR 0 5
44348: RET
// export function Video ( mode ) ; begin
44349: LD_INT 0
44351: PPUSH
// ingame_video = mode ;
44352: LD_ADDR_OWVAR 52
44356: PUSH
44357: LD_VAR 0 1
44361: ST_TO_ADDR
// interface_hidden = mode ;
44362: LD_ADDR_OWVAR 54
44366: PUSH
44367: LD_VAR 0 1
44371: ST_TO_ADDR
// end ;
44372: LD_VAR 0 2
44376: RET
// export function Join ( array , element ) ; begin
44377: LD_INT 0
44379: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44380: LD_ADDR_VAR 0 3
44384: PUSH
44385: LD_VAR 0 1
44389: PPUSH
44390: LD_VAR 0 1
44394: PUSH
44395: LD_INT 1
44397: PLUS
44398: PPUSH
44399: LD_VAR 0 2
44403: PPUSH
44404: CALL_OW 1
44408: ST_TO_ADDR
// end ;
44409: LD_VAR 0 3
44413: RET
// export function JoinUnion ( array , element ) ; begin
44414: LD_INT 0
44416: PPUSH
// result := array union element ;
44417: LD_ADDR_VAR 0 3
44421: PUSH
44422: LD_VAR 0 1
44426: PUSH
44427: LD_VAR 0 2
44431: UNION
44432: ST_TO_ADDR
// end ;
44433: LD_VAR 0 3
44437: RET
// export function GetBehemoths ( side ) ; begin
44438: LD_INT 0
44440: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
44441: LD_ADDR_VAR 0 2
44445: PUSH
44446: LD_INT 22
44448: PUSH
44449: LD_VAR 0 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 31
44460: PUSH
44461: LD_INT 25
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PPUSH
44472: CALL_OW 69
44476: ST_TO_ADDR
// end ;
44477: LD_VAR 0 2
44481: RET
// export function Shuffle ( array ) ; var i , index ; begin
44482: LD_INT 0
44484: PPUSH
44485: PPUSH
44486: PPUSH
// result := [ ] ;
44487: LD_ADDR_VAR 0 2
44491: PUSH
44492: EMPTY
44493: ST_TO_ADDR
// if not array then
44494: LD_VAR 0 1
44498: NOT
44499: IFFALSE 44503
// exit ;
44501: GO 44602
// Randomize ;
44503: CALL_OW 10
// for i = array downto 1 do
44507: LD_ADDR_VAR 0 3
44511: PUSH
44512: DOUBLE
44513: LD_VAR 0 1
44517: INC
44518: ST_TO_ADDR
44519: LD_INT 1
44521: PUSH
44522: FOR_DOWNTO
44523: IFFALSE 44600
// begin index := rand ( 1 , array ) ;
44525: LD_ADDR_VAR 0 4
44529: PUSH
44530: LD_INT 1
44532: PPUSH
44533: LD_VAR 0 1
44537: PPUSH
44538: CALL_OW 12
44542: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44543: LD_ADDR_VAR 0 2
44547: PUSH
44548: LD_VAR 0 2
44552: PPUSH
44553: LD_VAR 0 2
44557: PUSH
44558: LD_INT 1
44560: PLUS
44561: PPUSH
44562: LD_VAR 0 1
44566: PUSH
44567: LD_VAR 0 4
44571: ARRAY
44572: PPUSH
44573: CALL_OW 2
44577: ST_TO_ADDR
// array := Delete ( array , index ) ;
44578: LD_ADDR_VAR 0 1
44582: PUSH
44583: LD_VAR 0 1
44587: PPUSH
44588: LD_VAR 0 4
44592: PPUSH
44593: CALL_OW 3
44597: ST_TO_ADDR
// end ;
44598: GO 44522
44600: POP
44601: POP
// end ;
44602: LD_VAR 0 2
44606: RET
// export function GetBaseMaterials ( base ) ; begin
44607: LD_INT 0
44609: PPUSH
// result := [ 0 , 0 , 0 ] ;
44610: LD_ADDR_VAR 0 2
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: LIST
44628: ST_TO_ADDR
// if not base then
44629: LD_VAR 0 1
44633: NOT
44634: IFFALSE 44638
// exit ;
44636: GO 44687
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44638: LD_ADDR_VAR 0 2
44642: PUSH
44643: LD_VAR 0 1
44647: PPUSH
44648: LD_INT 1
44650: PPUSH
44651: CALL_OW 275
44655: PUSH
44656: LD_VAR 0 1
44660: PPUSH
44661: LD_INT 2
44663: PPUSH
44664: CALL_OW 275
44668: PUSH
44669: LD_VAR 0 1
44673: PPUSH
44674: LD_INT 3
44676: PPUSH
44677: CALL_OW 275
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: LIST
44686: ST_TO_ADDR
// end ;
44687: LD_VAR 0 2
44691: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44692: LD_INT 0
44694: PPUSH
44695: PPUSH
// result := array ;
44696: LD_ADDR_VAR 0 3
44700: PUSH
44701: LD_VAR 0 1
44705: ST_TO_ADDR
// if size > 0 then
44706: LD_VAR 0 2
44710: PUSH
44711: LD_INT 0
44713: GREATER
44714: IFFALSE 44760
// for i := array downto size do
44716: LD_ADDR_VAR 0 4
44720: PUSH
44721: DOUBLE
44722: LD_VAR 0 1
44726: INC
44727: ST_TO_ADDR
44728: LD_VAR 0 2
44732: PUSH
44733: FOR_DOWNTO
44734: IFFALSE 44758
// result := Delete ( result , result ) ;
44736: LD_ADDR_VAR 0 3
44740: PUSH
44741: LD_VAR 0 3
44745: PPUSH
44746: LD_VAR 0 3
44750: PPUSH
44751: CALL_OW 3
44755: ST_TO_ADDR
44756: GO 44733
44758: POP
44759: POP
// end ;
44760: LD_VAR 0 3
44764: RET
// export function ComExit ( unit ) ; var tmp ; begin
44765: LD_INT 0
44767: PPUSH
44768: PPUSH
// if not IsInUnit ( unit ) then
44769: LD_VAR 0 1
44773: PPUSH
44774: CALL_OW 310
44778: NOT
44779: IFFALSE 44783
// exit ;
44781: GO 44843
// tmp := IsInUnit ( unit ) ;
44783: LD_ADDR_VAR 0 3
44787: PUSH
44788: LD_VAR 0 1
44792: PPUSH
44793: CALL_OW 310
44797: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44798: LD_VAR 0 3
44802: PPUSH
44803: CALL_OW 247
44807: PUSH
44808: LD_INT 2
44810: EQUAL
44811: IFFALSE 44824
// ComExitVehicle ( unit ) else
44813: LD_VAR 0 1
44817: PPUSH
44818: CALL_OW 121
44822: GO 44833
// ComExitBuilding ( unit ) ;
44824: LD_VAR 0 1
44828: PPUSH
44829: CALL_OW 122
// result := tmp ;
44833: LD_ADDR_VAR 0 2
44837: PUSH
44838: LD_VAR 0 3
44842: ST_TO_ADDR
// end ;
44843: LD_VAR 0 2
44847: RET
// export function ComExitAll ( units ) ; var i ; begin
44848: LD_INT 0
44850: PPUSH
44851: PPUSH
// if not units then
44852: LD_VAR 0 1
44856: NOT
44857: IFFALSE 44861
// exit ;
44859: GO 44887
// for i in units do
44861: LD_ADDR_VAR 0 3
44865: PUSH
44866: LD_VAR 0 1
44870: PUSH
44871: FOR_IN
44872: IFFALSE 44885
// ComExit ( i ) ;
44874: LD_VAR 0 3
44878: PPUSH
44879: CALL 44765 0 1
44883: GO 44871
44885: POP
44886: POP
// end ;
44887: LD_VAR 0 2
44891: RET
// export function ResetHc ; begin
44892: LD_INT 0
44894: PPUSH
// InitHc ;
44895: CALL_OW 19
// hc_importance := 0 ;
44899: LD_ADDR_OWVAR 32
44903: PUSH
44904: LD_INT 0
44906: ST_TO_ADDR
// end ;
44907: LD_VAR 0 1
44911: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44912: LD_INT 0
44914: PPUSH
44915: PPUSH
44916: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44917: LD_ADDR_VAR 0 6
44921: PUSH
44922: LD_VAR 0 1
44926: PUSH
44927: LD_VAR 0 3
44931: PLUS
44932: PUSH
44933: LD_INT 2
44935: DIV
44936: ST_TO_ADDR
// if _x < 0 then
44937: LD_VAR 0 6
44941: PUSH
44942: LD_INT 0
44944: LESS
44945: IFFALSE 44962
// _x := _x * - 1 ;
44947: LD_ADDR_VAR 0 6
44951: PUSH
44952: LD_VAR 0 6
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: MUL
44961: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44962: LD_ADDR_VAR 0 7
44966: PUSH
44967: LD_VAR 0 2
44971: PUSH
44972: LD_VAR 0 4
44976: PLUS
44977: PUSH
44978: LD_INT 2
44980: DIV
44981: ST_TO_ADDR
// if _y < 0 then
44982: LD_VAR 0 7
44986: PUSH
44987: LD_INT 0
44989: LESS
44990: IFFALSE 45007
// _y := _y * - 1 ;
44992: LD_ADDR_VAR 0 7
44996: PUSH
44997: LD_VAR 0 7
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: MUL
45006: ST_TO_ADDR
// result := [ _x , _y ] ;
45007: LD_ADDR_VAR 0 5
45011: PUSH
45012: LD_VAR 0 6
45016: PUSH
45017: LD_VAR 0 7
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: ST_TO_ADDR
// end ;
45026: LD_VAR 0 5
45030: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45031: LD_INT 0
45033: PPUSH
45034: PPUSH
45035: PPUSH
45036: PPUSH
// task := GetTaskList ( unit ) ;
45037: LD_ADDR_VAR 0 7
45041: PUSH
45042: LD_VAR 0 1
45046: PPUSH
45047: CALL_OW 437
45051: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45052: LD_VAR 0 7
45056: NOT
45057: PUSH
45058: LD_VAR 0 1
45062: PPUSH
45063: LD_VAR 0 2
45067: PPUSH
45068: CALL_OW 308
45072: NOT
45073: AND
45074: IFFALSE 45078
// exit ;
45076: GO 45196
// if IsInArea ( unit , area ) then
45078: LD_VAR 0 1
45082: PPUSH
45083: LD_VAR 0 2
45087: PPUSH
45088: CALL_OW 308
45092: IFFALSE 45110
// begin ComMoveToArea ( unit , goAway ) ;
45094: LD_VAR 0 1
45098: PPUSH
45099: LD_VAR 0 3
45103: PPUSH
45104: CALL_OW 113
// exit ;
45108: GO 45196
// end ; if task [ 1 ] [ 1 ] <> M then
45110: LD_VAR 0 7
45114: PUSH
45115: LD_INT 1
45117: ARRAY
45118: PUSH
45119: LD_INT 1
45121: ARRAY
45122: PUSH
45123: LD_STRING M
45125: NONEQUAL
45126: IFFALSE 45130
// exit ;
45128: GO 45196
// x := task [ 1 ] [ 2 ] ;
45130: LD_ADDR_VAR 0 5
45134: PUSH
45135: LD_VAR 0 7
45139: PUSH
45140: LD_INT 1
45142: ARRAY
45143: PUSH
45144: LD_INT 2
45146: ARRAY
45147: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45148: LD_ADDR_VAR 0 6
45152: PUSH
45153: LD_VAR 0 7
45157: PUSH
45158: LD_INT 1
45160: ARRAY
45161: PUSH
45162: LD_INT 3
45164: ARRAY
45165: ST_TO_ADDR
// if InArea ( x , y , area ) then
45166: LD_VAR 0 5
45170: PPUSH
45171: LD_VAR 0 6
45175: PPUSH
45176: LD_VAR 0 2
45180: PPUSH
45181: CALL_OW 309
45185: IFFALSE 45196
// ComStop ( unit ) ;
45187: LD_VAR 0 1
45191: PPUSH
45192: CALL_OW 141
// end ;
45196: LD_VAR 0 4
45200: RET
// export function Abs ( value ) ; begin
45201: LD_INT 0
45203: PPUSH
// result := value ;
45204: LD_ADDR_VAR 0 2
45208: PUSH
45209: LD_VAR 0 1
45213: ST_TO_ADDR
// if value < 0 then
45214: LD_VAR 0 1
45218: PUSH
45219: LD_INT 0
45221: LESS
45222: IFFALSE 45239
// result := value * - 1 ;
45224: LD_ADDR_VAR 0 2
45228: PUSH
45229: LD_VAR 0 1
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: MUL
45238: ST_TO_ADDR
// end ;
45239: LD_VAR 0 2
45243: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45244: LD_INT 0
45246: PPUSH
45247: PPUSH
45248: PPUSH
45249: PPUSH
45250: PPUSH
45251: PPUSH
45252: PPUSH
45253: PPUSH
// if not unit or not building then
45254: LD_VAR 0 1
45258: NOT
45259: PUSH
45260: LD_VAR 0 2
45264: NOT
45265: OR
45266: IFFALSE 45270
// exit ;
45268: GO 45496
// x := GetX ( building ) ;
45270: LD_ADDR_VAR 0 4
45274: PUSH
45275: LD_VAR 0 2
45279: PPUSH
45280: CALL_OW 250
45284: ST_TO_ADDR
// y := GetY ( building ) ;
45285: LD_ADDR_VAR 0 6
45289: PUSH
45290: LD_VAR 0 2
45294: PPUSH
45295: CALL_OW 251
45299: ST_TO_ADDR
// d := GetDir ( building ) ;
45300: LD_ADDR_VAR 0 8
45304: PUSH
45305: LD_VAR 0 2
45309: PPUSH
45310: CALL_OW 254
45314: ST_TO_ADDR
// r := 4 ;
45315: LD_ADDR_VAR 0 9
45319: PUSH
45320: LD_INT 4
45322: ST_TO_ADDR
// for i := 1 to 5 do
45323: LD_ADDR_VAR 0 10
45327: PUSH
45328: DOUBLE
45329: LD_INT 1
45331: DEC
45332: ST_TO_ADDR
45333: LD_INT 5
45335: PUSH
45336: FOR_TO
45337: IFFALSE 45494
// begin _x := ShiftX ( x , d , r + i ) ;
45339: LD_ADDR_VAR 0 5
45343: PUSH
45344: LD_VAR 0 4
45348: PPUSH
45349: LD_VAR 0 8
45353: PPUSH
45354: LD_VAR 0 9
45358: PUSH
45359: LD_VAR 0 10
45363: PLUS
45364: PPUSH
45365: CALL_OW 272
45369: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45370: LD_ADDR_VAR 0 7
45374: PUSH
45375: LD_VAR 0 6
45379: PPUSH
45380: LD_VAR 0 8
45384: PPUSH
45385: LD_VAR 0 9
45389: PUSH
45390: LD_VAR 0 10
45394: PLUS
45395: PPUSH
45396: CALL_OW 273
45400: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45401: LD_VAR 0 5
45405: PPUSH
45406: LD_VAR 0 7
45410: PPUSH
45411: CALL_OW 488
45415: PUSH
45416: LD_VAR 0 5
45420: PPUSH
45421: LD_VAR 0 7
45425: PPUSH
45426: CALL_OW 428
45430: PPUSH
45431: CALL_OW 247
45435: PUSH
45436: LD_INT 3
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: IN
45446: NOT
45447: AND
45448: IFFALSE 45492
// begin ComMoveXY ( unit , _x , _y ) ;
45450: LD_VAR 0 1
45454: PPUSH
45455: LD_VAR 0 5
45459: PPUSH
45460: LD_VAR 0 7
45464: PPUSH
45465: CALL_OW 111
// result := [ _x , _y ] ;
45469: LD_ADDR_VAR 0 3
45473: PUSH
45474: LD_VAR 0 5
45478: PUSH
45479: LD_VAR 0 7
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: ST_TO_ADDR
// exit ;
45488: POP
45489: POP
45490: GO 45496
// end ; end ;
45492: GO 45336
45494: POP
45495: POP
// end ;
45496: LD_VAR 0 3
45500: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45501: LD_INT 0
45503: PPUSH
45504: PPUSH
45505: PPUSH
// result := 0 ;
45506: LD_ADDR_VAR 0 3
45510: PUSH
45511: LD_INT 0
45513: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45514: LD_VAR 0 1
45518: PUSH
45519: LD_INT 0
45521: LESS
45522: PUSH
45523: LD_VAR 0 1
45527: PUSH
45528: LD_INT 8
45530: GREATER
45531: OR
45532: PUSH
45533: LD_VAR 0 2
45537: PUSH
45538: LD_INT 0
45540: LESS
45541: OR
45542: PUSH
45543: LD_VAR 0 2
45547: PUSH
45548: LD_INT 8
45550: GREATER
45551: OR
45552: IFFALSE 45556
// exit ;
45554: GO 45631
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45556: LD_ADDR_VAR 0 4
45560: PUSH
45561: LD_INT 22
45563: PUSH
45564: LD_VAR 0 2
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PPUSH
45573: CALL_OW 69
45577: PUSH
45578: FOR_IN
45579: IFFALSE 45629
// begin un := UnitShoot ( i ) ;
45581: LD_ADDR_VAR 0 5
45585: PUSH
45586: LD_VAR 0 4
45590: PPUSH
45591: CALL_OW 504
45595: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45596: LD_VAR 0 5
45600: PPUSH
45601: CALL_OW 255
45605: PUSH
45606: LD_VAR 0 1
45610: EQUAL
45611: IFFALSE 45627
// begin result := un ;
45613: LD_ADDR_VAR 0 3
45617: PUSH
45618: LD_VAR 0 5
45622: ST_TO_ADDR
// exit ;
45623: POP
45624: POP
45625: GO 45631
// end ; end ;
45627: GO 45578
45629: POP
45630: POP
// end ;
45631: LD_VAR 0 3
45635: RET
// export function GetCargoBay ( units ) ; begin
45636: LD_INT 0
45638: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45639: LD_ADDR_VAR 0 2
45643: PUSH
45644: LD_VAR 0 1
45648: PPUSH
45649: LD_INT 2
45651: PUSH
45652: LD_INT 34
45654: PUSH
45655: LD_INT 12
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 34
45664: PUSH
45665: LD_INT 51
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 34
45674: PUSH
45675: LD_INT 32
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 34
45684: PUSH
45685: LD_EXP 40
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: PPUSH
45701: CALL_OW 72
45705: ST_TO_ADDR
// end ; end_of_file
45706: LD_VAR 0 2
45710: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
45711: LD_INT 0
45713: PPUSH
// ar_miner := 81 ;
45714: LD_ADDR_EXP 46
45718: PUSH
45719: LD_INT 81
45721: ST_TO_ADDR
// ar_crane := 88 ;
45722: LD_ADDR_EXP 45
45726: PUSH
45727: LD_INT 88
45729: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
45730: LD_ADDR_EXP 40
45734: PUSH
45735: LD_INT 89
45737: ST_TO_ADDR
// us_hack := 99 ;
45738: LD_ADDR_EXP 41
45742: PUSH
45743: LD_INT 99
45745: ST_TO_ADDR
// us_artillery := 97 ;
45746: LD_ADDR_EXP 42
45750: PUSH
45751: LD_INT 97
45753: ST_TO_ADDR
// ar_bio_bomb := 91 ;
45754: LD_ADDR_EXP 43
45758: PUSH
45759: LD_INT 91
45761: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
45762: LD_ADDR_EXP 44
45766: PUSH
45767: LD_INT 92
45769: ST_TO_ADDR
// ru_radar := 98 ;
45770: LD_ADDR_EXP 39
45774: PUSH
45775: LD_INT 98
45777: ST_TO_ADDR
// tech_Artillery := 80 ;
45778: LD_ADDR_EXP 47
45782: PUSH
45783: LD_INT 80
45785: ST_TO_ADDR
// tech_RadMat := 81 ;
45786: LD_ADDR_EXP 48
45790: PUSH
45791: LD_INT 81
45793: ST_TO_ADDR
// tech_BasicTools := 82 ;
45794: LD_ADDR_EXP 49
45798: PUSH
45799: LD_INT 82
45801: ST_TO_ADDR
// tech_Cargo := 83 ;
45802: LD_ADDR_EXP 50
45806: PUSH
45807: LD_INT 83
45809: ST_TO_ADDR
// tech_Track := 84 ;
45810: LD_ADDR_EXP 51
45814: PUSH
45815: LD_INT 84
45817: ST_TO_ADDR
// tech_Crane := 85 ;
45818: LD_ADDR_EXP 52
45822: PUSH
45823: LD_INT 85
45825: ST_TO_ADDR
// tech_Bulldozer := 86 ;
45826: LD_ADDR_EXP 53
45830: PUSH
45831: LD_INT 86
45833: ST_TO_ADDR
// tech_Hovercraft := 87 ;
45834: LD_ADDR_EXP 54
45838: PUSH
45839: LD_INT 87
45841: ST_TO_ADDR
// end ;
45842: LD_VAR 0 1
45846: RET
// every 1 do
45847: GO 45849
45849: DISABLE
// InitGlobalVariables ;
45850: CALL 45711 0 0
45854: END
