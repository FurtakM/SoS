// starting begin ResetFog ;
   0: CALL_OW 335
// MC_Init ( ) ;
   4: CALL 438 0 0
// PrepareTestBase ;
   8: CALL 132 0 0
// mc_debug := true ;
  12: LD_ADDR_EXP 5
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// MC_Start ( ) ;
  20: CALL 462 0 0
// end ;
  24: END
// export function MC_CustomMacro ( ) ; begin
  25: LD_INT 0
  27: PPUSH
// MC_Add ( 1 , FilterAllUnits ( [ f_side , 1 ] ) ) ;
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 22
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: EMPTY
  38: LIST
  39: LIST
  40: PPUSH
  41: CALL_OW 69
  45: PPUSH
  46: CALL 517 0 2
// MC_SetParkingArea ( 1 , parkingArea1 ) ;
  50: LD_INT 1
  52: PPUSH
  53: LD_INT 4
  55: PPUSH
  56: CALL 2337 0 2
// MC_SetCratesArea ( 1 , cratesArea1 ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 2
  65: PPUSH
  66: CALL 1914 0 2
// MC_SetScanArea ( 1 , baseArea1 ) ;
  70: LD_INT 1
  72: PPUSH
  73: LD_INT 1
  75: PPUSH
  76: CALL 2386 0 2
// MC_SetBuildingList ( 1 , [ [ b_barracks , 37 , 33 , 5 ] , [ b_lab , 12 , 17 , 1 ] ] ) ;
  80: LD_INT 1
  82: PPUSH
  83: LD_INT 5
  85: PUSH
  86: LD_INT 37
  88: PUSH
  89: LD_INT 33
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_INT 6
 103: PUSH
 104: LD_INT 12
 106: PUSH
 107: LD_INT 17
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: LIST
 117: LIST
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: PPUSH
 123: CALL 1014 0 2
// end ;
 127: LD_VAR 0 1
 131: RET
// export function PrepareTestBase ; var i , un ; begin
 132: LD_INT 0
 134: PPUSH
 135: PPUSH
 136: PPUSH
// InitHc_All ;
 137: CALL_OW 584
// uc_side := 1 ;
 141: LD_ADDR_OWVAR 20
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// uc_nation := 1 ;
 149: LD_ADDR_OWVAR 21
 153: PUSH
 154: LD_INT 1
 156: ST_TO_ADDR
// for i := 1 to 12 do
 157: LD_ADDR_VAR 0 2
 161: PUSH
 162: DOUBLE
 163: LD_INT 1
 165: DEC
 166: ST_TO_ADDR
 167: LD_INT 12
 169: PUSH
 170: FOR_TO
 171: IFFALSE 238
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
 173: LD_INT 0
 175: PPUSH
 176: LD_VAR 0 2
 180: PUSH
 181: LD_INT 4
 183: MOD
 184: PUSH
 185: LD_INT 1
 187: PLUS
 188: PPUSH
 189: LD_INT 3
 191: PPUSH
 192: CALL_OW 380
// un := CreateHuman ;
 196: LD_ADDR_VAR 0 3
 200: PUSH
 201: CALL_OW 44
 205: ST_TO_ADDR
// PlaceUnitXYR ( un , 21 , 16 , 8 , false ) ;
 206: LD_VAR 0 3
 210: PPUSH
 211: LD_INT 21
 213: PPUSH
 214: LD_INT 16
 216: PPUSH
 217: LD_INT 8
 219: PPUSH
 220: LD_INT 0
 222: PPUSH
 223: CALL_OW 50
// ComHold ( un ) ;
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL_OW 140
// end ;
 236: GO 170
 238: POP
 239: POP
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$50 trigger mc_debug do
 245: LD_EXP 5
 249: IFFALSE 276
 251: GO 253
 253: DISABLE
// begin enable ;
 254: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea1 , true ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 5
 260: PPUSH
 261: CALL_OW 12
 265: PPUSH
 266: LD_INT 2
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: CALL_OW 55
// end ;
 276: END
// every 0 0$1 trigger mc_debug do
 277: LD_EXP 5
 281: IFFALSE 307
 283: GO 285
 285: DISABLE
// begin enable ;
 286: ENABLE
// display_strings := FilterAllUnits ( [ f_tag , 3 ] ) ;
 287: LD_ADDR_OWVAR 47
 291: PUSH
 292: LD_INT 120
 294: PUSH
 295: LD_INT 3
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: ST_TO_ADDR
// end ; end_of_file
 307: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ;
 308: LD_VAR 0 1
 312: PPUSH
 313: LD_VAR 0 2
 317: PPUSH
 318: LD_VAR 0 3
 322: PPUSH
 323: LD_VAR 0 4
 327: PPUSH
 328: LD_VAR 0 5
 332: PPUSH
 333: LD_VAR 0 6
 337: PPUSH
 338: LD_VAR 0 7
 342: PPUSH
 343: CALL 4765 0 7
// end ;
 347: PPOPN 7
 349: END
// on ClassChanged ( unit , old_class , new_class ) do begin MCE_ClassChanged ( unit , old_class , new_class ) ;
 350: LD_VAR 0 1
 354: PPUSH
 355: LD_VAR 0 2
 359: PPUSH
 360: LD_VAR 0 3
 364: PPUSH
 365: CALL 4818 0 3
// end ;
 369: PPOPN 3
 371: END
// on UnitDestroyed ( unit ) do begin MCE_UnitDestroyed ( unit ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL 4840 0 1
// end ;
 381: PPOPN 1
 383: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ;
 384: LD_VAR 0 1
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_VAR 0 3
 398: PPUSH
 399: LD_VAR 0 4
 403: PPUSH
 404: CALL 4985 0 4
// end ;
 408: PPOPN 4
 410: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL 5058 0 1
// end ;
 420: PPOPN 1
 422: END
// on UpgradeComplete ( building ) do begin MCE_BuildingUpgradeComplete ( building ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL 5777 0 1
// end ;
 432: PPOPN 1
 434: END
// on CommandUnitXY ( comand , unit , x , y , z ) do begin end ; end_of_file
 435: PPOPN 5
 437: END
// export function MC_Init ( ) ; begin
 438: LD_INT 0
 440: PPUSH
// MC_InitVariables ( ) ;
 441: CALL 6038 0 0
// MCE_InitEvents ( ) ;
 445: CALL 4741 0 0
// MCT_InitTags ( ) ;
 449: CALL 6214 0 0
// MCTM_InitTaskManager ( ) end ;
 453: CALL 7801 0 0
 457: LD_VAR 0 1
 461: RET
// export function MC_Start ( ) ; begin
 462: LD_INT 0
 464: PPUSH
// mc_active := true ;
 465: LD_ADDR_EXP 4
 469: PUSH
 470: LD_INT 1
 472: ST_TO_ADDR
// MC_CustomMacro ( ) ;
 473: CALL 25 0 0
// MCE_SailEventCustom ( mce_start , 0 , 0 , 0 , 0 , 0 , 0 ) ;
 477: LD_EXP 1
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: LD_INT 0
 487: PPUSH
 488: LD_INT 0
 490: PPUSH
 491: LD_INT 0
 493: PPUSH
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 0
 499: PPUSH
 500: CALL 4765 0 7
// end ;
 504: LD_VAR 0 1
 508: RET
// export function MC_Kill ( base ) ; begin
 509: LD_INT 0
 511: PPUSH
// end ;
 512: LD_VAR 0 2
 516: RET
// export function MC_Add ( side , units ) ; begin
 517: LD_INT 0
 519: PPUSH
// mc_bases := Replace ( mc_bases , mc_bases + 1 , side ) ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: LD_EXP 6
 529: PPUSH
 530: LD_EXP 6
 534: PUSH
 535: LD_INT 1
 537: PLUS
 538: PPUSH
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 1
 548: ST_TO_ADDR
// mc_task := Replace ( mc_task , mc_task + 1 , [ ] ) ;
 549: LD_ADDR_EXP 8
 553: PUSH
 554: LD_EXP 8
 558: PPUSH
 559: LD_EXP 8
 563: PUSH
 564: LD_INT 1
 566: PLUS
 567: PPUSH
 568: EMPTY
 569: PPUSH
 570: CALL_OW 1
 574: ST_TO_ADDR
// mc_people := Replace ( mc_people , mc_people + 1 , UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
 575: LD_ADDR_EXP 9
 579: PUSH
 580: LD_EXP 9
 584: PPUSH
 585: LD_EXP 9
 589: PUSH
 590: LD_INT 1
 592: PLUS
 593: PPUSH
 594: LD_VAR 0 2
 598: PPUSH
 599: LD_INT 21
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 3
 611: PUSH
 612: LD_INT 23
 614: PUSH
 615: LD_INT 0
 617: PUSH
 618: EMPTY
 619: LIST
 620: LIST
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PPUSH
 630: CALL_OW 72
 634: PPUSH
 635: CALL_OW 1
 639: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , mc_ape + 1 , UnitFilter ( units , [ f_nation , 0 ] ) ) ;
 640: LD_ADDR_EXP 19
 644: PUSH
 645: LD_EXP 19
 649: PPUSH
 650: LD_EXP 19
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: PPUSH
 659: LD_VAR 0 2
 663: PPUSH
 664: LD_INT 23
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PPUSH
 674: CALL_OW 72
 678: PPUSH
 679: CALL_OW 1
 683: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , mc_vehicles + 1 , UnitFilter ( units , [ f_type , unit_vehicle ] ) ) ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_EXP 11
 693: PPUSH
 694: LD_EXP 11
 698: PUSH
 699: LD_INT 1
 701: PLUS
 702: PPUSH
 703: LD_VAR 0 2
 707: PPUSH
 708: LD_INT 21
 710: PUSH
 711: LD_INT 2
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: PPUSH
 718: CALL_OW 72
 722: PPUSH
 723: CALL_OW 1
 727: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , mc_buildings + 1 , UnitFilter ( units , [ f_type , unit_building ] ) ) ;
 728: LD_ADDR_EXP 10
 732: PUSH
 733: LD_EXP 10
 737: PPUSH
 738: LD_EXP 10
 742: PUSH
 743: LD_INT 1
 745: PLUS
 746: PPUSH
 747: LD_VAR 0 2
 751: PPUSH
 752: LD_INT 21
 754: PUSH
 755: LD_INT 3
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PPUSH
 762: CALL_OW 72
 766: PPUSH
 767: CALL_OW 1
 771: ST_TO_ADDR
// mc_defense_status := Replace ( mc_defense_status , mc_defense_status + 1 , false ) ;
 772: LD_ADDR_EXP 16
 776: PUSH
 777: LD_EXP 16
 781: PPUSH
 782: LD_EXP 16
 786: PUSH
 787: LD_INT 1
 789: PLUS
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 1
 798: ST_TO_ADDR
// end ;
 799: LD_VAR 0 3
 803: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
 808: PPUSH
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not mc_bases [ base ] then
 812: LD_EXP 6
 816: PUSH
 817: LD_VAR 0 1
 821: ARRAY
 822: NOT
 823: IFFALSE 827
// exit ;
 825: GO 1009
// tmp := [ ] ;
 827: LD_ADDR_VAR 0 6
 831: PUSH
 832: EMPTY
 833: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
 834: LD_ADDR_VAR 0 7
 838: PUSH
 839: LD_VAR 0 3
 843: PPUSH
 844: LD_INT 0
 846: PPUSH
 847: CALL_OW 517
 851: ST_TO_ADDR
// if not list then
 852: LD_VAR 0 7
 856: NOT
 857: IFFALSE 861
// exit ;
 859: GO 1009
// for i = 1 to amount do
 861: LD_ADDR_VAR 0 5
 865: PUSH
 866: DOUBLE
 867: LD_INT 1
 869: DEC
 870: ST_TO_ADDR
 871: LD_VAR 0 2
 875: PUSH
 876: FOR_TO
 877: IFFALSE 957
// begin x := rand ( 1 , list [ 1 ] ) ;
 879: LD_ADDR_VAR 0 8
 883: PUSH
 884: LD_INT 1
 886: PPUSH
 887: LD_VAR 0 7
 891: PUSH
 892: LD_INT 1
 894: ARRAY
 895: PPUSH
 896: CALL_OW 12
 900: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
 901: LD_ADDR_VAR 0 6
 905: PUSH
 906: LD_VAR 0 6
 910: PPUSH
 911: LD_VAR 0 5
 915: PPUSH
 916: LD_VAR 0 7
 920: PUSH
 921: LD_INT 1
 923: ARRAY
 924: PUSH
 925: LD_VAR 0 8
 929: ARRAY
 930: PUSH
 931: LD_VAR 0 7
 935: PUSH
 936: LD_INT 2
 938: ARRAY
 939: PUSH
 940: LD_VAR 0 8
 944: ARRAY
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL_OW 1
 954: ST_TO_ADDR
// end ;
 955: GO 876
 957: POP
 958: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
 959: LD_ADDR_EXP 12
 963: PUSH
 964: LD_EXP 12
 968: PPUSH
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_VAR 0 6
 978: PPUSH
 979: CALL_OW 1
 983: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
 984: LD_ADDR_EXP 13
 988: PUSH
 989: LD_EXP 13
 993: PPUSH
 994: LD_VAR 0 1
 998: PPUSH
 999: LD_VAR 0 3
1003: PPUSH
1004: CALL_OW 1
1008: ST_TO_ADDR
// end ;
1009: LD_VAR 0 4
1013: RET
// export function MC_SetBuildingList ( base , construct_list ) ; var i , btype ; begin
1014: LD_INT 0
1016: PPUSH
1017: PPUSH
1018: PPUSH
// if not construct_list then
1019: LD_VAR 0 2
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1254
// for i := 1 to construct_list do
1028: LD_ADDR_VAR 0 4
1032: PUSH
1033: DOUBLE
1034: LD_INT 1
1036: DEC
1037: ST_TO_ADDR
1038: LD_VAR 0 2
1042: PUSH
1043: FOR_TO
1044: IFFALSE 1227
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1046: LD_VAR 0 2
1050: PUSH
1051: LD_VAR 0 4
1055: ARRAY
1056: PUSH
1057: LD_INT 1
1059: ARRAY
1060: PUSH
1061: LD_INT 3
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: IN
1071: IFFALSE 1225
// begin case construct_list [ i ] [ 1 ] of b_factory :
1073: LD_VAR 0 2
1077: PUSH
1078: LD_VAR 0 4
1082: ARRAY
1083: PUSH
1084: LD_INT 1
1086: ARRAY
1087: PUSH
1088: LD_INT 3
1090: DOUBLE
1091: EQUAL
1092: IFTRUE 1096
1094: GO 1107
1096: POP
// btype := b_workshop ; b_barracks :
1097: LD_ADDR_VAR 0 5
1101: PUSH
1102: LD_INT 2
1104: ST_TO_ADDR
1105: GO 1127
1107: LD_INT 5
1109: DOUBLE
1110: EQUAL
1111: IFTRUE 1115
1113: GO 1126
1115: POP
// btype := b_armoury ; end ;
1116: LD_ADDR_VAR 0 5
1120: PUSH
1121: LD_INT 4
1123: ST_TO_ADDR
1124: GO 1127
1126: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1127: LD_ADDR_VAR 0 2
1131: PUSH
1132: LD_VAR 0 2
1136: PPUSH
1137: LD_VAR 0 4
1141: PPUSH
1142: LD_VAR 0 2
1146: PUSH
1147: LD_VAR 0 4
1151: ARRAY
1152: PPUSH
1153: LD_INT 5
1155: PPUSH
1156: LD_VAR 0 2
1160: PUSH
1161: LD_VAR 0 4
1165: ARRAY
1166: PUSH
1167: LD_INT 1
1169: ARRAY
1170: PPUSH
1171: CALL_OW 1
1175: PPUSH
1176: CALL_OW 1
1180: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1181: LD_ADDR_VAR 0 2
1185: PUSH
1186: LD_VAR 0 2
1190: PPUSH
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_VAR 0 2
1200: PUSH
1201: LD_VAR 0 4
1205: ARRAY
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_VAR 0 5
1214: PPUSH
1215: CALL_OW 1
1219: PPUSH
1220: CALL_OW 1
1224: ST_TO_ADDR
// end ;
1225: GO 1043
1227: POP
1228: POP
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
1229: LD_ADDR_EXP 14
1233: PUSH
1234: LD_EXP 14
1238: PPUSH
1239: LD_VAR 0 1
1243: PPUSH
1244: LD_VAR 0 2
1248: PPUSH
1249: CALL_OW 1
1253: ST_TO_ADDR
// end ;
1254: LD_VAR 0 3
1258: RET
// export function MC_InsertBuildingList ( base , construct_list ) ; var i , btype ; begin
1259: LD_INT 0
1261: PPUSH
1262: PPUSH
1263: PPUSH
// if not construct_list then
1264: LD_VAR 0 2
1268: NOT
1269: IFFALSE 1273
// exit ;
1271: GO 1511
// for i := 1 to construct_list do
1273: LD_ADDR_VAR 0 4
1277: PUSH
1278: DOUBLE
1279: LD_INT 1
1281: DEC
1282: ST_TO_ADDR
1283: LD_VAR 0 2
1287: PUSH
1288: FOR_TO
1289: IFFALSE 1472
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1291: LD_VAR 0 2
1295: PUSH
1296: LD_VAR 0 4
1300: ARRAY
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 5
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: IN
1316: IFFALSE 1470
// begin case construct_list [ i ] [ 1 ] of b_factory :
1318: LD_VAR 0 2
1322: PUSH
1323: LD_VAR 0 4
1327: ARRAY
1328: PUSH
1329: LD_INT 1
1331: ARRAY
1332: PUSH
1333: LD_INT 3
1335: DOUBLE
1336: EQUAL
1337: IFTRUE 1341
1339: GO 1352
1341: POP
// btype := b_workshop ; b_barracks :
1342: LD_ADDR_VAR 0 5
1346: PUSH
1347: LD_INT 2
1349: ST_TO_ADDR
1350: GO 1372
1352: LD_INT 5
1354: DOUBLE
1355: EQUAL
1356: IFTRUE 1360
1358: GO 1371
1360: POP
// btype := b_armoury ; end ;
1361: LD_ADDR_VAR 0 5
1365: PUSH
1366: LD_INT 4
1368: ST_TO_ADDR
1369: GO 1372
1371: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1372: LD_ADDR_VAR 0 2
1376: PUSH
1377: LD_VAR 0 2
1381: PPUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: LD_VAR 0 2
1391: PUSH
1392: LD_VAR 0 4
1396: ARRAY
1397: PPUSH
1398: LD_INT 5
1400: PPUSH
1401: LD_VAR 0 2
1405: PUSH
1406: LD_VAR 0 4
1410: ARRAY
1411: PUSH
1412: LD_INT 1
1414: ARRAY
1415: PPUSH
1416: CALL_OW 1
1420: PPUSH
1421: CALL_OW 1
1425: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: LD_VAR 0 2
1435: PPUSH
1436: LD_VAR 0 4
1440: PPUSH
1441: LD_VAR 0 2
1445: PUSH
1446: LD_VAR 0 4
1450: ARRAY
1451: PPUSH
1452: LD_INT 1
1454: PPUSH
1455: LD_VAR 0 5
1459: PPUSH
1460: CALL_OW 1
1464: PPUSH
1465: CALL_OW 1
1469: ST_TO_ADDR
// end ;
1470: GO 1288
1472: POP
1473: POP
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union construct_list ) ;
1474: LD_ADDR_EXP 14
1478: PUSH
1479: LD_EXP 14
1483: PPUSH
1484: LD_VAR 0 1
1488: PPUSH
1489: LD_EXP 14
1493: PUSH
1494: LD_VAR 0 1
1498: ARRAY
1499: PUSH
1500: LD_VAR 0 2
1504: UNION
1505: PPUSH
1506: CALL_OW 1
1510: ST_TO_ADDR
// end ;
1511: LD_VAR 0 3
1515: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
1516: LD_INT 0
1518: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , produce_list ) ;
1519: LD_ADDR_EXP 15
1523: PUSH
1524: LD_EXP 15
1528: PPUSH
1529: LD_VAR 0 1
1533: PPUSH
1534: LD_VAR 0 2
1538: PPUSH
1539: CALL_OW 1
1543: ST_TO_ADDR
// end ;
1544: LD_VAR 0 3
1548: RET
// export function MC_InsertProduceList ( base , components ) ; begin
1549: LD_INT 0
1551: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , mc_produce_list [ base ] ^ components ) ;
1552: LD_ADDR_EXP 15
1556: PUSH
1557: LD_EXP 15
1561: PPUSH
1562: LD_VAR 0 1
1566: PPUSH
1567: LD_EXP 15
1571: PUSH
1572: LD_VAR 0 1
1576: ARRAY
1577: PUSH
1578: LD_VAR 0 2
1582: ADD
1583: PPUSH
1584: CALL_OW 1
1588: ST_TO_ADDR
// end ;
1589: LD_VAR 0 3
1593: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
1594: LD_INT 0
1596: PPUSH
// mc_defender := Replace ( mc_defender , base , deflist ) ;
1597: LD_ADDR_EXP 17
1601: PUSH
1602: LD_EXP 17
1606: PPUSH
1607: LD_VAR 0 1
1611: PPUSH
1612: LD_VAR 0 2
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
1622: LD_ADDR_EXP 18
1626: PUSH
1627: LD_EXP 18
1631: PPUSH
1632: LD_VAR 0 1
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 0
1644: PLUS
1645: PPUSH
1646: CALL_OW 1
1650: ST_TO_ADDR
// end ;
1651: LD_VAR 0 3
1655: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
1656: LD_INT 0
1658: PPUSH
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
1659: LD_ADDR_EXP 18
1663: PUSH
1664: LD_EXP 18
1668: PPUSH
1669: LD_VAR 0 1
1673: PPUSH
1674: LD_VAR 0 2
1678: PPUSH
1679: CALL_OW 1
1683: ST_TO_ADDR
// end ;
1684: LD_VAR 0 3
1688: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; begin
1689: LD_INT 0
1691: PPUSH
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
1692: LD_ADDR_EXP 21
1696: PUSH
1697: LD_EXP 21
1701: PPUSH
1702: LD_VAR 0 1
1706: PUSH
1707: LD_EXP 21
1711: PUSH
1712: LD_VAR 0 1
1716: ARRAY
1717: PUSH
1718: LD_INT 1
1720: PLUS
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PPUSH
1726: LD_VAR 0 1
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_VAR 0 3
1740: PUSH
1741: LD_VAR 0 4
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: PPUSH
1752: CALL 13103 0 3
1756: ST_TO_ADDR
// end ;
1757: LD_VAR 0 5
1761: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
1762: LD_INT 0
1764: PPUSH
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
1765: LD_ADDR_EXP 22
1769: PUSH
1770: LD_EXP 22
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: LD_VAR 0 2
1784: PPUSH
1785: CALL_OW 1
1789: ST_TO_ADDR
// end ;
1790: LD_VAR 0 3
1794: RET
// export function MC_SetTame ( base , area ) ; begin
1795: LD_INT 0
1797: PPUSH
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
1798: LD_ADDR_EXP 23
1802: PUSH
1803: LD_EXP 23
1807: PPUSH
1808: LD_VAR 0 1
1812: PPUSH
1813: LD_VAR 0 2
1817: PPUSH
1818: CALL_OW 1
1822: ST_TO_ADDR
// end ;
1823: LD_VAR 0 3
1827: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
1828: LD_INT 0
1830: PPUSH
1831: PPUSH
// if not base or not kinds then
1832: LD_VAR 0 1
1836: NOT
1837: PUSH
1838: LD_VAR 0 2
1842: NOT
1843: OR
1844: IFFALSE 1848
// exit ;
1846: GO 1909
// for i in kinds do
1848: LD_ADDR_VAR 0 4
1852: PUSH
1853: LD_VAR 0 2
1857: PUSH
1858: FOR_IN
1859: IFFALSE 1907
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
1861: LD_ADDR_EXP 24
1865: PUSH
1866: LD_EXP 24
1870: PPUSH
1871: LD_VAR 0 1
1875: PUSH
1876: LD_EXP 24
1880: PUSH
1881: LD_VAR 0 1
1885: ARRAY
1886: PUSH
1887: LD_INT 1
1889: PLUS
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 13103 0 3
1904: ST_TO_ADDR
1905: GO 1858
1907: POP
1908: POP
// end ;
1909: LD_VAR 0 3
1913: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
1914: LD_INT 0
1916: PPUSH
// if not mc_bases or not base or not areas then
1917: LD_EXP 6
1921: NOT
1922: PUSH
1923: LD_VAR 0 1
1927: NOT
1928: OR
1929: PUSH
1930: LD_VAR 0 2
1934: NOT
1935: OR
1936: IFFALSE 1940
// exit ;
1938: GO 1965
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
1940: LD_ADDR_EXP 25
1944: PUSH
1945: LD_EXP 25
1949: PPUSH
1950: LD_VAR 0 1
1954: PPUSH
1955: LD_VAR 0 2
1959: PPUSH
1960: CALL_OW 1
1964: ST_TO_ADDR
// end ;
1965: LD_VAR 0 3
1969: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
1970: LD_INT 0
1972: PPUSH
// if not mc_bases or not base or not teleports_exit then
1973: LD_EXP 6
1977: NOT
1978: PUSH
1979: LD_VAR 0 1
1983: NOT
1984: OR
1985: PUSH
1986: LD_VAR 0 2
1990: NOT
1991: OR
1992: IFFALSE 1996
// exit ;
1994: GO 2021
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
1996: LD_ADDR_EXP 26
2000: PUSH
2001: LD_EXP 26
2005: PPUSH
2006: LD_VAR 0 1
2010: PPUSH
2011: LD_VAR 0 2
2015: PPUSH
2016: CALL_OW 1
2020: ST_TO_ADDR
// end ;
2021: LD_VAR 0 3
2025: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// if not base or not ext_list then
2031: LD_VAR 0 1
2035: NOT
2036: PUSH
2037: LD_VAR 0 5
2041: NOT
2042: OR
2043: IFFALSE 2047
// exit ;
2045: GO 2220
// tmp := GetFacExtXYD ( x , y , d ) ;
2047: LD_ADDR_VAR 0 8
2051: PUSH
2052: LD_VAR 0 2
2056: PPUSH
2057: LD_VAR 0 3
2061: PPUSH
2062: LD_VAR 0 4
2066: PPUSH
2067: CALL 42987 0 3
2071: ST_TO_ADDR
// if not tmp then
2072: LD_VAR 0 8
2076: NOT
2077: IFFALSE 2081
// exit ;
2079: GO 2220
// for i in tmp do
2081: LD_ADDR_VAR 0 7
2085: PUSH
2086: LD_VAR 0 8
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2218
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
2094: LD_ADDR_EXP 14
2098: PUSH
2099: LD_EXP 14
2103: PPUSH
2104: LD_VAR 0 1
2108: PPUSH
2109: LD_EXP 14
2113: PUSH
2114: LD_VAR 0 1
2118: ARRAY
2119: PPUSH
2120: LD_EXP 14
2124: PUSH
2125: LD_VAR 0 1
2129: ARRAY
2130: PUSH
2131: LD_INT 1
2133: PLUS
2134: PPUSH
2135: LD_VAR 0 5
2139: PUSH
2140: LD_INT 1
2142: ARRAY
2143: PUSH
2144: LD_VAR 0 7
2148: PUSH
2149: LD_INT 1
2151: ARRAY
2152: PUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 3
2169: ARRAY
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: PPUSH
2177: CALL_OW 2
2181: PPUSH
2182: CALL_OW 1
2186: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
2187: LD_ADDR_VAR 0 5
2191: PUSH
2192: LD_VAR 0 5
2196: PPUSH
2197: LD_INT 1
2199: PPUSH
2200: CALL_OW 3
2204: ST_TO_ADDR
// if not ext_list then
2205: LD_VAR 0 5
2209: NOT
2210: IFFALSE 2216
// exit ;
2212: POP
2213: POP
2214: GO 2220
// end ;
2216: GO 2091
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 6
2224: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
2225: LD_INT 0
2227: PPUSH
// if not mc_bases or not base or not weapon_list then
2228: LD_EXP 6
2232: NOT
2233: PUSH
2234: LD_VAR 0 1
2238: NOT
2239: OR
2240: PUSH
2241: LD_VAR 0 2
2245: NOT
2246: OR
2247: IFFALSE 2251
// exit ;
2249: GO 2276
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
2251: LD_ADDR_EXP 27
2255: PUSH
2256: LD_EXP 27
2260: PPUSH
2261: LD_VAR 0 1
2265: PPUSH
2266: LD_VAR 0 2
2270: PPUSH
2271: CALL_OW 1
2275: ST_TO_ADDR
// end ;
2276: LD_VAR 0 3
2280: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
2281: LD_INT 0
2283: PPUSH
// if not mc_bases or not base or not tech_list then
2284: LD_EXP 6
2288: NOT
2289: PUSH
2290: LD_VAR 0 1
2294: NOT
2295: OR
2296: PUSH
2297: LD_VAR 0 2
2301: NOT
2302: OR
2303: IFFALSE 2307
// exit ;
2305: GO 2332
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
2307: LD_ADDR_EXP 20
2311: PUSH
2312: LD_EXP 20
2316: PPUSH
2317: LD_VAR 0 1
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL_OW 1
2331: ST_TO_ADDR
// end ;
2332: LD_VAR 0 3
2336: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
2337: LD_INT 0
2339: PPUSH
// if not parking_area or not base then
2340: LD_VAR 0 2
2344: NOT
2345: PUSH
2346: LD_VAR 0 1
2350: NOT
2351: OR
2352: IFFALSE 2356
// exit ;
2354: GO 2381
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
2356: LD_ADDR_EXP 28
2360: PUSH
2361: LD_EXP 28
2365: PPUSH
2366: LD_VAR 0 1
2370: PPUSH
2371: LD_VAR 0 2
2375: PPUSH
2376: CALL_OW 1
2380: ST_TO_ADDR
// end ;
2381: LD_VAR 0 3
2385: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
2386: LD_INT 0
2388: PPUSH
// if not base or not scan_area then
2389: LD_VAR 0 1
2393: NOT
2394: PUSH
2395: LD_VAR 0 2
2399: NOT
2400: OR
2401: IFFALSE 2405
// exit ;
2403: GO 2430
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
2405: LD_ADDR_EXP 29
2409: PUSH
2410: LD_EXP 29
2414: PPUSH
2415: LD_VAR 0 1
2419: PPUSH
2420: LD_VAR 0 2
2424: PPUSH
2425: CALL_OW 1
2429: ST_TO_ADDR
// end ; end_of_file
2430: LD_VAR 0 3
2434: RET
// export function MC_Monitor ( ) ; var i , active_players ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
// while mc_active do
2440: LD_EXP 4
2444: IFFALSE 2554
// begin wait ( 0 0$1 ) ;
2446: LD_INT 35
2448: PPUSH
2449: CALL_OW 67
// active_players := 0 ;
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_INT 0
2460: ST_TO_ADDR
// for i := 1 to mc_bases do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_EXP 6
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2535
// begin if MC_Exist ( i ) then
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 6471 0 1
2488: IFFALSE 2533
// begin MCE_SailEventCustom ( mce_monitor_base , i , 0 , 0 , 0 , 0 , 0 ) ;
2490: LD_EXP 2
2494: PPUSH
2495: LD_VAR 0 2
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 0
2514: PPUSH
2515: CALL 4765 0 7
// active_players := active_players + 1 ;
2519: LD_ADDR_VAR 0 3
2523: PUSH
2524: LD_VAR 0 3
2528: PUSH
2529: LD_INT 1
2531: PLUS
2532: ST_TO_ADDR
// end ; end ;
2533: GO 2476
2535: POP
2536: POP
// if not active_players then
2537: LD_VAR 0 3
2541: NOT
2542: IFFALSE 2552
// mc_active := false ;
2544: LD_ADDR_EXP 4
2548: PUSH
2549: LD_INT 0
2551: ST_TO_ADDR
// end ;
2552: GO 2440
// end ;
2554: LD_VAR 0 1
2558: RET
// export function MC_MonitorBase ( base ) ; begin
2559: LD_INT 0
2561: PPUSH
// if not mc_people [ base ] then
2562: LD_EXP 9
2566: PUSH
2567: LD_VAR 0 1
2571: ARRAY
2572: NOT
2573: IFFALSE 2598
// mc_bases := Replace ( mc_bases , base , 0 ) ;
2575: LD_ADDR_EXP 6
2579: PUSH
2580: LD_EXP 6
2584: PPUSH
2585: LD_VAR 0 1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 1
2597: ST_TO_ADDR
// mc_danger := Replace ( mc_danger , base , DangerInArea ( mc_bases [ base ] , mc_scan_area [ base ] ) ) ;
2598: LD_ADDR_EXP 30
2602: PUSH
2603: LD_EXP 30
2607: PPUSH
2608: LD_VAR 0 1
2612: PPUSH
2613: LD_EXP 6
2617: PUSH
2618: LD_VAR 0 1
2622: ARRAY
2623: PPUSH
2624: LD_EXP 29
2628: PUSH
2629: LD_VAR 0 1
2633: ARRAY
2634: PPUSH
2635: CALL 15755 0 2
2639: PPUSH
2640: CALL_OW 1
2644: ST_TO_ADDR
// if mc_danger [ base ] then
2645: LD_EXP 30
2649: PUSH
2650: LD_VAR 0 1
2654: ARRAY
2655: IFFALSE 2668
// MC_Defend ( base ) else
2657: LD_VAR 0 1
2661: PPUSH
2662: CALL 2682 0 1
2666: GO 2677
// MC_TaskManager ( base ) ;
2668: LD_VAR 0 1
2672: PPUSH
2673: CALL 2744 0 1
// end ;
2677: LD_VAR 0 2
2681: RET
// export function MC_Defend ( base ) ; var defender_vehicles ; begin
2682: LD_INT 0
2684: PPUSH
2685: PPUSH
// if mc_defense_status [ base ] then
2686: LD_EXP 16
2690: PUSH
2691: LD_VAR 0 1
2695: ARRAY
2696: IFFALSE 2700
// exit ;
2698: GO 2739
// mc_defense_status := Replace ( mc_defense_status , base , true ) ;
2700: LD_ADDR_EXP 16
2704: PUSH
2705: LD_EXP 16
2709: PPUSH
2710: LD_VAR 0 1
2714: PPUSH
2715: LD_INT 1
2717: PPUSH
2718: CALL_OW 1
2722: ST_TO_ADDR
// defender_vehicles := mc_defender [ base ] ;
2723: LD_ADDR_VAR 0 3
2727: PUSH
2728: LD_EXP 17
2732: PUSH
2733: LD_VAR 0 1
2737: ARRAY
2738: ST_TO_ADDR
// end ;
2739: LD_VAR 0 2
2743: RET
// export function MC_TaskManager ( base ) ; var crates_list ; begin
2744: LD_INT 0
2746: PPUSH
2747: PPUSH
// MC_CollectCrates ( base , GetListOfCratesInArea ( mc_crates_area [ base ] ) ) ;
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_EXP 25
2757: PUSH
2758: LD_VAR 0 1
2762: ARRAY
2763: PPUSH
2764: CALL_OW 435
2768: PPUSH
2769: CALL 2787 0 2
// MC_Build ( base ) ;
2773: LD_VAR 0 1
2777: PPUSH
2778: CALL 4133 0 1
// end ;
2782: LD_VAR 0 2
2786: RET
// export function MC_CollectCrates ( base , crates ) ; var i , j , amount , cargo_bays , apes , engs , collectors , number_of_crates , driver , drivers , depot , mechanic_used ; begin
2787: LD_INT 0
2789: PPUSH
2790: PPUSH
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
2800: PPUSH
2801: PPUSH
// if MCTM_HasActiveTask ( base , mctm_collect_crates ) or not crates or not MC_GetDepot ( base ) then
2802: LD_VAR 0 1
2806: PPUSH
2807: LD_EXP 36
2811: PPUSH
2812: CALL 7825 0 2
2816: PUSH
2817: LD_VAR 0 2
2821: NOT
2822: OR
2823: PUSH
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 7446 0 1
2833: NOT
2834: OR
2835: IFFALSE 2839
// exit ;
2837: GO 4128
// MCTM_SetActiveTask ( base , mctm_collect_crates ) ;
2839: LD_VAR 0 1
2843: PPUSH
2844: LD_EXP 36
2848: PPUSH
2849: CALL 7855 0 2
// collectors := [ ] ;
2853: LD_ADDR_VAR 0 10
2857: PUSH
2858: EMPTY
2859: ST_TO_ADDR
// cargo_bays := GetCargoBay ( mc_vehicles [ base ] ) ;
2860: LD_ADDR_VAR 0 7
2864: PUSH
2865: LD_EXP 11
2869: PUSH
2870: LD_VAR 0 1
2874: ARRAY
2875: PPUSH
2876: CALL 46617 0 1
2880: ST_TO_ADDR
// if cargo_bays then
2881: LD_VAR 0 7
2885: IFFALSE 3566
// begin collectors := collectors union cargo_bays ;
2887: LD_ADDR_VAR 0 10
2891: PUSH
2892: LD_VAR 0 10
2896: PUSH
2897: LD_VAR 0 7
2901: UNION
2902: ST_TO_ADDR
// while crates and collectors do
2903: LD_VAR 0 2
2907: PUSH
2908: LD_VAR 0 10
2912: AND
2913: IFFALSE 3463
// begin wait ( 0 0$1 ) ;
2915: LD_INT 35
2917: PPUSH
2918: CALL_OW 67
// for i in collectors do
2922: LD_ADDR_VAR 0 4
2926: PUSH
2927: LD_VAR 0 10
2931: PUSH
2932: FOR_IN
2933: IFFALSE 3459
// begin driver := 0 ;
2935: LD_ADDR_VAR 0 12
2939: PUSH
2940: LD_INT 0
2942: ST_TO_ADDR
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
2943: LD_VAR 0 4
2947: PPUSH
2948: CALL_OW 263
2952: PUSH
2953: LD_INT 1
2955: EQUAL
2956: PUSH
2957: LD_VAR 0 4
2961: PPUSH
2962: CALL_OW 311
2966: NOT
2967: AND
2968: IFFALSE 3152
// begin driver := MC_GetOneByClass ( base , 3 , mct_none ) ;
2970: LD_ADDR_VAR 0 12
2974: PUSH
2975: LD_VAR 0 1
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: LD_EXP 31
2987: PPUSH
2988: CALL 7352 0 3
2992: ST_TO_ADDR
// if not driver then
2993: LD_VAR 0 12
2997: NOT
2998: IFFALSE 3067
// begin driver := MC_GetBestForClass ( base , 3 , 1 ) ;
3000: LD_ADDR_VAR 0 12
3004: PUSH
3005: LD_VAR 0 1
3009: PPUSH
3010: LD_INT 3
3012: PPUSH
3013: LD_INT 1
3015: PPUSH
3016: CALL 6511 0 3
3020: ST_TO_ADDR
// if driver then
3021: LD_VAR 0 12
3025: IFFALSE 3067
// begin driver := driver [ 1 ] ;
3027: LD_ADDR_VAR 0 12
3031: PUSH
3032: LD_VAR 0 12
3036: PUSH
3037: LD_INT 1
3039: ARRAY
3040: ST_TO_ADDR
// MC_ChangeClass ( base , 3 , driver ) ;
3041: LD_VAR 0 1
3045: PPUSH
3046: LD_INT 3
3048: PPUSH
3049: LD_VAR 0 12
3053: PPUSH
3054: CALL 6741 0 3
// AddComExitBuilding ( driver ) ;
3058: LD_VAR 0 12
3062: PPUSH
3063: CALL_OW 182
// end ; end ; if IsInUnit ( driver ) then
3067: LD_VAR 0 12
3071: PPUSH
3072: CALL_OW 310
3076: IFFALSE 3087
// ComExit ( driver ) ;
3078: LD_VAR 0 12
3082: PPUSH
3083: CALL 45746 0 1
// SetTag ( driver , mct_collect_crates ) ;
3087: LD_VAR 0 12
3091: PPUSH
3092: LD_EXP 34
3096: PPUSH
3097: CALL_OW 109
// if GetLives ( i ) < 1000 then
3101: LD_VAR 0 4
3105: PPUSH
3106: CALL_OW 256
3110: PUSH
3111: LD_INT 1000
3113: LESS
3114: IFFALSE 3130
// AddComRepairVehicle ( driver , i ) ;
3116: LD_VAR 0 12
3120: PPUSH
3121: LD_VAR 0 4
3125: PPUSH
3126: CALL_OW 189
// AddComEnterUnit ( driver , i ) ;
3130: LD_VAR 0 12
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: CALL_OW 180
// mechanic_used := true ;
3144: LD_ADDR_VAR 0 15
3148: PUSH
3149: LD_INT 1
3151: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) ;
3152: LD_INT 35
3154: PPUSH
3155: CALL_OW 67
// if IsDead ( i ) then
3159: LD_VAR 0 4
3163: PPUSH
3164: CALL_OW 301
3168: IFFALSE 3188
// begin collectors := collectors diff i ;
3170: LD_ADDR_VAR 0 10
3174: PUSH
3175: LD_VAR 0 10
3179: PUSH
3180: LD_VAR 0 4
3184: DIFF
3185: ST_TO_ADDR
// continue ;
3186: GO 3152
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 20 then
3188: LD_VAR 0 4
3192: PPUSH
3193: CALL_OW 262
3197: PUSH
3198: LD_INT 1
3200: EQUAL
3201: PUSH
3202: LD_VAR 0 4
3206: PPUSH
3207: CALL_OW 261
3211: PUSH
3212: LD_INT 20
3214: LESS
3215: AND
3216: IFFALSE 3277
// begin depot := NearestUnitToUnit ( MC_GetDepot ( base ) , i ) ;
3218: LD_ADDR_VAR 0 14
3222: PUSH
3223: LD_VAR 0 1
3227: PPUSH
3228: CALL 7446 0 1
3232: PPUSH
3233: LD_VAR 0 4
3237: PPUSH
3238: CALL_OW 74
3242: ST_TO_ADDR
// if GetDistUnits ( i , depot ) < 6 then
3243: LD_VAR 0 4
3247: PPUSH
3248: LD_VAR 0 14
3252: PPUSH
3253: CALL_OW 296
3257: PUSH
3258: LD_INT 6
3260: LESS
3261: IFFALSE 3277
// ComMoveUnit ( i , depot ) ;
3263: LD_VAR 0 4
3267: PPUSH
3268: LD_VAR 0 14
3272: PPUSH
3273: CALL_OW 112
// end ; if GetControl ( i ) = control_manual then
3277: LD_VAR 0 4
3281: PPUSH
3282: CALL_OW 263
3286: PUSH
3287: LD_INT 1
3289: EQUAL
3290: IFFALSE 3355
// begin if not driver then
3292: LD_VAR 0 12
3296: NOT
3297: IFFALSE 3314
// driver := IsDrivenBy ( i ) ;
3299: LD_ADDR_VAR 0 12
3303: PUSH
3304: LD_VAR 0 4
3308: PPUSH
3309: CALL_OW 311
3313: ST_TO_ADDR
// if not HasTask ( driver ) then
3314: LD_VAR 0 12
3318: PPUSH
3319: CALL_OW 314
3323: NOT
3324: IFFALSE 3353
// ComCollect ( driver , crates [ 1 ] , crates [ 2 ] ) ;
3326: LD_VAR 0 12
3330: PPUSH
3331: LD_VAR 0 2
3335: PUSH
3336: LD_INT 1
3338: ARRAY
3339: PPUSH
3340: LD_VAR 0 2
3344: PUSH
3345: LD_INT 2
3347: ARRAY
3348: PPUSH
3349: CALL_OW 117
// end else
3353: GO 3394
// if not HasTask ( i ) then
3355: LD_VAR 0 4
3359: PPUSH
3360: CALL_OW 314
3364: NOT
3365: IFFALSE 3394
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3367: LD_VAR 0 4
3371: PPUSH
3372: LD_VAR 0 2
3376: PUSH
3377: LD_INT 1
3379: ARRAY
3380: PPUSH
3381: LD_VAR 0 2
3385: PUSH
3386: LD_INT 2
3388: ARRAY
3389: PPUSH
3390: CALL_OW 117
// until not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3394: LD_VAR 0 2
3398: PUSH
3399: LD_INT 1
3401: ARRAY
3402: PPUSH
3403: LD_VAR 0 2
3407: PUSH
3408: LD_INT 2
3410: ARRAY
3411: PPUSH
3412: CALL_OW 284
3416: NOT
3417: IFFALSE 3152
// for j := 1 to 2 do
3419: LD_ADDR_VAR 0 5
3423: PUSH
3424: DOUBLE
3425: LD_INT 1
3427: DEC
3428: ST_TO_ADDR
3429: LD_INT 2
3431: PUSH
3432: FOR_TO
3433: IFFALSE 3455
// crates := Delete ( crates , 1 ) ;
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: LD_VAR 0 2
3444: PPUSH
3445: LD_INT 1
3447: PPUSH
3448: CALL_OW 3
3452: ST_TO_ADDR
3453: GO 3432
3455: POP
3456: POP
// end ;
3457: GO 2932
3459: POP
3460: POP
// end ;
3461: GO 2903
// if mechanic_used then
3463: LD_VAR 0 15
3467: IFFALSE 3564
// begin repeat wait ( 0 0$1 ) ;
3469: LD_INT 35
3471: PPUSH
3472: CALL_OW 67
// until not GetCargo ( collectors , mat_cans ) or not collectors ;
3476: LD_VAR 0 10
3480: PPUSH
3481: LD_INT 1
3483: PPUSH
3484: CALL_OW 289
3488: NOT
3489: PUSH
3490: LD_VAR 0 10
3494: NOT
3495: OR
3496: IFFALSE 3469
// drivers := MCT_ResetTag ( base , mct_collect_crates ) ;
3498: LD_ADDR_VAR 0 13
3502: PUSH
3503: LD_VAR 0 1
3507: PPUSH
3508: LD_EXP 34
3512: PPUSH
3513: CALL 6356 0 2
3517: ST_TO_ADDR
// if drivers then
3518: LD_VAR 0 13
3522: IFFALSE 3550
// for i in drivers do
3524: LD_ADDR_VAR 0 4
3528: PUSH
3529: LD_VAR 0 13
3533: PUSH
3534: FOR_IN
3535: IFFALSE 3548
// ComExit ( i ) ;
3537: LD_VAR 0 4
3541: PPUSH
3542: CALL 45746 0 1
3546: GO 3534
3548: POP
3549: POP
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3550: LD_VAR 0 1
3554: PPUSH
3555: LD_EXP 36
3559: PPUSH
3560: CALL 7919 0 2
// end ; end else
3564: GO 4128
// begin apes := MC_GetByClass ( base , class_apeman_engineer , mct_none ) ;
3566: LD_ADDR_VAR 0 8
3570: PUSH
3571: LD_VAR 0 1
3575: PPUSH
3576: LD_INT 16
3578: PPUSH
3579: LD_EXP 31
3583: PPUSH
3584: CALL 7249 0 3
3588: ST_TO_ADDR
// if apes then
3589: LD_VAR 0 8
3593: IFFALSE 3611
// collectors := collectors union apes ;
3595: LD_ADDR_VAR 0 10
3599: PUSH
3600: LD_VAR 0 10
3604: PUSH
3605: LD_VAR 0 8
3609: UNION
3610: ST_TO_ADDR
// engs := MC_GetByClass ( base , class_engineer , mct_none ) ;
3611: LD_ADDR_VAR 0 9
3615: PUSH
3616: LD_VAR 0 1
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: LD_EXP 31
3628: PPUSH
3629: CALL 7249 0 3
3633: ST_TO_ADDR
// if engs then
3634: LD_VAR 0 9
3638: IFFALSE 3656
// collectors := collectors union engs ;
3640: LD_ADDR_VAR 0 10
3644: PUSH
3645: LD_VAR 0 10
3649: PUSH
3650: LD_VAR 0 9
3654: UNION
3655: ST_TO_ADDR
// if not collectors then
3656: LD_VAR 0 10
3660: NOT
3661: IFFALSE 3761
// begin engs := MC_GetBestForClass ( base , 2 , 3 ) ;
3663: LD_ADDR_VAR 0 9
3667: PUSH
3668: LD_VAR 0 1
3672: PPUSH
3673: LD_INT 2
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: CALL 6511 0 3
3683: ST_TO_ADDR
// if engs then
3684: LD_VAR 0 9
3688: IFFALSE 3707
// MC_ChangeClass ( base , 2 , engs ) ;
3690: LD_VAR 0 1
3694: PPUSH
3695: LD_INT 2
3697: PPUSH
3698: LD_VAR 0 9
3702: PPUSH
3703: CALL 6741 0 3
// repeat wait ( 0 0$1 ) ;
3707: LD_INT 35
3709: PPUSH
3710: CALL_OW 67
// if not UnitFilter ( engs , [ f_ok ] ) then
3714: LD_VAR 0 9
3718: PPUSH
3719: LD_INT 50
3721: PUSH
3722: EMPTY
3723: LIST
3724: PPUSH
3725: CALL_OW 72
3729: NOT
3730: IFFALSE 3734
// break ;
3732: GO 3761
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
3734: LD_VAR 0 9
3738: PPUSH
3739: LD_INT 25
3741: PUSH
3742: LD_INT 2
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: PPUSH
3749: CALL_OW 72
3753: PUSH
3754: LD_VAR 0 9
3758: EQUAL
3759: IFFALSE 3707
// end ; if not collectors then
3761: LD_VAR 0 10
3765: NOT
3766: IFFALSE 3784
// begin MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3768: LD_VAR 0 1
3772: PPUSH
3773: LD_EXP 36
3777: PPUSH
3778: CALL 7919 0 2
// exit ;
3782: GO 4128
// end ; if collectors > 5 then
3784: LD_VAR 0 10
3788: PUSH
3789: LD_INT 5
3791: GREATER
3792: IFFALSE 3848
// for i := collectors downto 5 do
3794: LD_ADDR_VAR 0 4
3798: PUSH
3799: DOUBLE
3800: LD_VAR 0 10
3804: INC
3805: ST_TO_ADDR
3806: LD_INT 5
3808: PUSH
3809: FOR_DOWNTO
3810: IFFALSE 3846
// begin SetTag ( i , 0 ) ;
3812: LD_VAR 0 4
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 109
// collectors := Delete ( collectors , i ) ;
3824: LD_ADDR_VAR 0 10
3828: PUSH
3829: LD_VAR 0 10
3833: PPUSH
3834: LD_VAR 0 4
3838: PPUSH
3839: CALL_OW 3
3843: ST_TO_ADDR
// end ;
3844: GO 3809
3846: POP
3847: POP
// ComExitAll ( collectors ) ;
3848: LD_VAR 0 10
3852: PPUSH
3853: CALL 45829 0 1
// MCT_SetTag ( collectors , mct_collect_crates ) ;
3857: LD_VAR 0 10
3861: PPUSH
3862: LD_EXP 34
3866: PPUSH
3867: CALL 6422 0 2
// while crates and collectors do
3871: LD_VAR 0 2
3875: PUSH
3876: LD_VAR 0 10
3880: AND
3881: IFFALSE 4100
// begin wait ( 0 0$1 ) ;
3883: LD_INT 35
3885: PPUSH
3886: CALL_OW 67
// amount := GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3890: LD_ADDR_VAR 0 6
3894: PUSH
3895: LD_VAR 0 2
3899: PUSH
3900: LD_INT 1
3902: ARRAY
3903: PPUSH
3904: LD_VAR 0 2
3908: PUSH
3909: LD_INT 2
3911: ARRAY
3912: PPUSH
3913: CALL_OW 284
3917: ST_TO_ADDR
// j := 0 ;
3918: LD_ADDR_VAR 0 5
3922: PUSH
3923: LD_INT 0
3925: ST_TO_ADDR
// for i in collectors do
3926: LD_ADDR_VAR 0 4
3930: PUSH
3931: LD_VAR 0 10
3935: PUSH
3936: FOR_IN
3937: IFFALSE 4033
// begin if IsDead ( i ) then
3939: LD_VAR 0 4
3943: PPUSH
3944: CALL_OW 301
3948: IFFALSE 3966
// collectors := collectors diff i ;
3950: LD_ADDR_VAR 0 10
3954: PUSH
3955: LD_VAR 0 10
3959: PUSH
3960: LD_VAR 0 4
3964: DIFF
3965: ST_TO_ADDR
// if j < amount and not HasTask ( i ) then
3966: LD_VAR 0 5
3970: PUSH
3971: LD_VAR 0 6
3975: LESS
3976: PUSH
3977: LD_VAR 0 4
3981: PPUSH
3982: CALL_OW 314
3986: NOT
3987: AND
3988: IFFALSE 4031
// begin j := j + 1 ;
3990: LD_ADDR_VAR 0 5
3994: PUSH
3995: LD_VAR 0 5
3999: PUSH
4000: LD_INT 1
4002: PLUS
4003: ST_TO_ADDR
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
4004: LD_VAR 0 4
4008: PPUSH
4009: LD_VAR 0 2
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 2
4025: ARRAY
4026: PPUSH
4027: CALL_OW 117
// end ; end ;
4031: GO 3936
4033: POP
4034: POP
// if not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) then
4035: LD_VAR 0 2
4039: PUSH
4040: LD_INT 1
4042: ARRAY
4043: PPUSH
4044: LD_VAR 0 2
4048: PUSH
4049: LD_INT 2
4051: ARRAY
4052: PPUSH
4053: CALL_OW 284
4057: NOT
4058: IFFALSE 4098
// for j := 1 to 2 do
4060: LD_ADDR_VAR 0 5
4064: PUSH
4065: DOUBLE
4066: LD_INT 1
4068: DEC
4069: ST_TO_ADDR
4070: LD_INT 2
4072: PUSH
4073: FOR_TO
4074: IFFALSE 4096
// crates := Delete ( crates , 1 ) ;
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: LD_VAR 0 2
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 3
4093: ST_TO_ADDR
4094: GO 4073
4096: POP
4097: POP
// end ;
4098: GO 3871
// MCT_ResetTag ( base , mct_collect_crates ) ;
4100: LD_VAR 0 1
4104: PPUSH
4105: LD_EXP 34
4109: PPUSH
4110: CALL 6356 0 2
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
4114: LD_VAR 0 1
4118: PPUSH
4119: LD_EXP 36
4123: PPUSH
4124: CALL 7919 0 2
// end ; end ;
4128: LD_VAR 0 3
4132: RET
// export function MC_Build ( base ) ; var depot , btype , x , y , d , engs ; begin
4133: LD_INT 0
4135: PPUSH
4136: PPUSH
4137: PPUSH
4138: PPUSH
4139: PPUSH
4140: PPUSH
4141: PPUSH
// if MCTM_HasActiveTask ( base , mctm_build ) or not mc_build_list [ base ] or not MC_GetDepot ( base ) then
4142: LD_VAR 0 1
4146: PPUSH
4147: LD_EXP 37
4151: PPUSH
4152: CALL 7825 0 2
4156: PUSH
4157: LD_EXP 14
4161: PUSH
4162: LD_VAR 0 1
4166: ARRAY
4167: NOT
4168: OR
4169: PUSH
4170: LD_VAR 0 1
4174: PPUSH
4175: CALL 7446 0 1
4179: NOT
4180: OR
4181: IFFALSE 4185
// exit ;
4183: GO 4736
// MCTM_SetActiveTask ( base , mctm_build ) ;
4185: LD_VAR 0 1
4189: PPUSH
4190: LD_EXP 37
4194: PPUSH
4195: CALL 7855 0 2
// engs := MC_GetByClass ( base , 2 , mct_none ) ;
4199: LD_ADDR_VAR 0 8
4203: PUSH
4204: LD_VAR 0 1
4208: PPUSH
4209: LD_INT 2
4211: PPUSH
4212: LD_EXP 31
4216: PPUSH
4217: CALL 7249 0 3
4221: ST_TO_ADDR
// if not engs then
4222: LD_VAR 0 8
4226: NOT
4227: IFFALSE 4339
// begin engs := MC_GetBestForClass ( base , 2 , 6 ) ;
4229: LD_ADDR_VAR 0 8
4233: PUSH
4234: LD_VAR 0 1
4238: PPUSH
4239: LD_INT 2
4241: PPUSH
4242: LD_INT 6
4244: PPUSH
4245: CALL 6511 0 3
4249: ST_TO_ADDR
// if not engs then
4250: LD_VAR 0 8
4254: NOT
4255: IFFALSE 4273
// begin MCTM_DeleteActiveTask ( base , mctm_build ) ;
4257: LD_VAR 0 1
4261: PPUSH
4262: LD_EXP 37
4266: PPUSH
4267: CALL 7919 0 2
// exit ;
4271: GO 4736
// end ; MC_ChangeClass ( base , 2 , engs ) ;
4273: LD_VAR 0 1
4277: PPUSH
4278: LD_INT 2
4280: PPUSH
4281: LD_VAR 0 8
4285: PPUSH
4286: CALL 6741 0 3
// repeat wait ( 0 0$1 ) ;
4290: LD_INT 35
4292: PPUSH
4293: CALL_OW 67
// if not mc_people [ base ] then
4297: LD_EXP 9
4301: PUSH
4302: LD_VAR 0 1
4306: ARRAY
4307: NOT
4308: IFFALSE 4312
// exit ;
4310: GO 4736
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
4312: LD_VAR 0 8
4316: PPUSH
4317: LD_INT 25
4319: PUSH
4320: LD_INT 2
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PPUSH
4327: CALL_OW 72
4331: PUSH
4332: LD_VAR 0 8
4336: EQUAL
4337: IFFALSE 4290
// end ; ComExitAll ( engs ) ;
4339: LD_VAR 0 8
4343: PPUSH
4344: CALL 45829 0 1
// MCT_SetTag ( engs , mct_build ) ;
4348: LD_VAR 0 8
4352: PPUSH
4353: LD_EXP 33
4357: PPUSH
4358: CALL 6422 0 2
// btype := mc_build_list [ base ] [ 1 ] [ 1 ] ;
4362: LD_ADDR_VAR 0 4
4366: PUSH
4367: LD_EXP 14
4371: PUSH
4372: LD_VAR 0 1
4376: ARRAY
4377: PUSH
4378: LD_INT 1
4380: ARRAY
4381: PUSH
4382: LD_INT 1
4384: ARRAY
4385: ST_TO_ADDR
// x := mc_build_list [ base ] [ 1 ] [ 2 ] ;
4386: LD_ADDR_VAR 0 5
4390: PUSH
4391: LD_EXP 14
4395: PUSH
4396: LD_VAR 0 1
4400: ARRAY
4401: PUSH
4402: LD_INT 1
4404: ARRAY
4405: PUSH
4406: LD_INT 2
4408: ARRAY
4409: ST_TO_ADDR
// y := mc_build_list [ base ] [ 1 ] [ 3 ] ;
4410: LD_ADDR_VAR 0 6
4414: PUSH
4415: LD_EXP 14
4419: PUSH
4420: LD_VAR 0 1
4424: ARRAY
4425: PUSH
4426: LD_INT 1
4428: ARRAY
4429: PUSH
4430: LD_INT 3
4432: ARRAY
4433: ST_TO_ADDR
// d := mc_build_list [ base ] [ 1 ] [ 4 ] ;
4434: LD_ADDR_VAR 0 7
4438: PUSH
4439: LD_EXP 14
4443: PUSH
4444: LD_VAR 0 1
4448: ARRAY
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PUSH
4454: LD_INT 4
4456: ARRAY
4457: ST_TO_ADDR
// if GetType ( HexInfo ( x , y ) ) = unit_building then
4458: LD_VAR 0 5
4462: PPUSH
4463: LD_VAR 0 6
4467: PPUSH
4468: CALL_OW 428
4472: PPUSH
4473: CALL_OW 247
4477: PUSH
4478: LD_INT 3
4480: EQUAL
4481: IFFALSE 4516
// begin wait ( 0 0$1 ) ;
4483: LD_INT 35
4485: PPUSH
4486: CALL_OW 67
// ComComplete ( engs , HexInfo ( x , y ) ) ;
4490: LD_VAR 0 8
4494: PPUSH
4495: LD_VAR 0 5
4499: PPUSH
4500: LD_VAR 0 6
4504: PPUSH
4505: CALL_OW 428
4509: PPUSH
4510: CALL 15966 0 2
// end else
4514: GO 4736
// begin depot := NearestUnitToXY ( MC_GetDepot ( base ) , x , y ) ;
4516: LD_ADDR_VAR 0 3
4520: PUSH
4521: LD_VAR 0 1
4525: PPUSH
4526: CALL 7446 0 1
4530: PPUSH
4531: LD_VAR 0 5
4535: PPUSH
4536: LD_VAR 0 6
4540: PPUSH
4541: CALL_OW 73
4545: ST_TO_ADDR
// if not HexInfo ( x , y ) and CanBeBuilt ( depot , btype , x , y , d ) then
4546: LD_VAR 0 5
4550: PPUSH
4551: LD_VAR 0 6
4555: PPUSH
4556: CALL_OW 428
4560: NOT
4561: PUSH
4562: LD_VAR 0 3
4566: PPUSH
4567: LD_VAR 0 4
4571: PPUSH
4572: LD_VAR 0 5
4576: PPUSH
4577: LD_VAR 0 6
4581: PPUSH
4582: LD_VAR 0 7
4586: PPUSH
4587: CALL 21206 0 5
4591: AND
4592: IFFALSE 4625
// ComBuild ( engs , btype , x , y , d ) else
4594: LD_VAR 0 8
4598: PPUSH
4599: LD_VAR 0 4
4603: PPUSH
4604: LD_VAR 0 5
4608: PPUSH
4609: LD_VAR 0 6
4613: PPUSH
4614: LD_VAR 0 7
4618: PPUSH
4619: CALL_OW 145
4623: GO 4736
// begin if GetType ( HexInfo ( x , y ) ) <> unit_building then
4625: LD_VAR 0 5
4629: PPUSH
4630: LD_VAR 0 6
4634: PPUSH
4635: CALL_OW 428
4639: PPUSH
4640: CALL_OW 247
4644: PUSH
4645: LD_INT 3
4647: NONEQUAL
4648: IFFALSE 4708
// begin TryClearPlaceForBuilding ( btype , x , y , d , mc_buildings [ base ] , engs , mc_parking [ base ] ) ;
4650: LD_VAR 0 4
4654: PPUSH
4655: LD_VAR 0 5
4659: PPUSH
4660: LD_VAR 0 6
4664: PPUSH
4665: LD_VAR 0 7
4669: PPUSH
4670: LD_EXP 10
4674: PUSH
4675: LD_VAR 0 1
4679: ARRAY
4680: PPUSH
4681: LD_VAR 0 8
4685: PPUSH
4686: LD_EXP 28
4690: PUSH
4691: LD_VAR 0 1
4695: ARRAY
4696: PPUSH
4697: CALL 19956 0 7
// wait ( 0 0$10 ) ;
4701: LD_INT 350
4703: PPUSH
4704: CALL_OW 67
// end ; MCTM_DeleteActiveTask ( base , mctm_build ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_EXP 37
4717: PPUSH
4718: CALL 7919 0 2
// MCT_ResetTag ( base , mctm_build ) ;
4722: LD_VAR 0 1
4726: PPUSH
4727: LD_EXP 37
4731: PPUSH
4732: CALL 6356 0 2
// end ; end ; end ; end_of_file
4736: LD_VAR 0 2
4740: RET
// export mce_start , mce_monitor_base , mce_ ; export function MCE_InitEvents ( ) ; begin
4741: LD_INT 0
4743: PPUSH
// mce_start := 1 ;
4744: LD_ADDR_EXP 1
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// mce_monitor_base := 2 ;
4752: LD_ADDR_EXP 2
4756: PUSH
4757: LD_INT 2
4759: ST_TO_ADDR
// end ;
4760: LD_VAR 0 1
4764: RET
// export function MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4765: LD_INT 0
4767: PPUSH
// case event of mce_start :
4768: LD_VAR 0 1
4772: PUSH
4773: LD_EXP 1
4777: DOUBLE
4778: EQUAL
4779: IFTRUE 4783
4781: GO 4790
4783: POP
// MC_Monitor ( ) ; mce_monitor_base :
4784: CALL 2435 0 0
4788: GO 4813
4790: LD_EXP 2
4794: DOUBLE
4795: EQUAL
4796: IFTRUE 4800
4798: GO 4812
4800: POP
// MC_MonitorBase ( p1 ) ; end ;
4801: LD_VAR 0 2
4805: PPUSH
4806: CALL 2559 0 1
4810: GO 4813
4812: POP
// end ;
4813: LD_VAR 0 8
4817: RET
// export function MCE_ClassChanged ( unit , old_class , new_class ) ; begin
4818: LD_INT 0
4820: PPUSH
// SetTag ( unit , mct_none ) ;
4821: LD_VAR 0 1
4825: PPUSH
4826: LD_EXP 31
4830: PPUSH
4831: CALL_OW 109
// end ;
4835: LD_VAR 0 4
4839: RET
// export function MCE_UnitDestroyed ( un ) ; begin
4840: LD_INT 0
4842: PPUSH
// case GetType ( un ) of unit_human :
4843: LD_VAR 0 1
4847: PPUSH
4848: CALL_OW 247
4852: PUSH
4853: LD_INT 1
4855: DOUBLE
4856: EQUAL
4857: IFTRUE 4861
4859: GO 4873
4861: POP
// MCE_HumanKilled ( un ) ; unit_building :
4862: LD_VAR 0 1
4866: PPUSH
4867: CALL 4899 0 1
4871: GO 4894
4873: LD_INT 3
4875: DOUBLE
4876: EQUAL
4877: IFTRUE 4881
4879: GO 4893
4881: POP
// MCE_BuildingDestroyed ( un ) ; end ;
4882: LD_VAR 0 1
4886: PPUSH
4887: CALL 5456 0 1
4891: GO 4894
4893: POP
// end ;
4894: LD_VAR 0 2
4898: RET
// export function MCE_HumanKilled ( un ) ; var i ; begin
4899: LD_INT 0
4901: PPUSH
4902: PPUSH
// for i := 1 to mc_people do
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: DOUBLE
4909: LD_INT 1
4911: DEC
4912: ST_TO_ADDR
4913: LD_EXP 9
4917: PUSH
4918: FOR_TO
4919: IFFALSE 4978
// if un in mc_people [ i ] then
4921: LD_VAR 0 1
4925: PUSH
4926: LD_EXP 9
4930: PUSH
4931: LD_VAR 0 3
4935: ARRAY
4936: IN
4937: IFFALSE 4976
// mc_people := Replace ( mc_people , i , mc_people [ i ] diff un ) ;
4939: LD_ADDR_EXP 9
4943: PUSH
4944: LD_EXP 9
4948: PPUSH
4949: LD_VAR 0 3
4953: PPUSH
4954: LD_EXP 9
4958: PUSH
4959: LD_VAR 0 3
4963: ARRAY
4964: PUSH
4965: LD_VAR 0 1
4969: DIFF
4970: PPUSH
4971: CALL_OW 1
4975: ST_TO_ADDR
4976: GO 4918
4978: POP
4979: POP
// end ;
4980: LD_VAR 0 2
4984: RET
// export function MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ; var base ; begin
4985: LD_INT 0
4987: PPUSH
4988: PPUSH
// if GetTag ( driver ) = mct_collect_crates then
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 110
4998: PUSH
4999: LD_EXP 34
5003: EQUAL
5004: IFFALSE 5053
// begin base := MC_GetHumanBase ( driver ) ;
5006: LD_ADDR_VAR 0 6
5010: PUSH
5011: LD_VAR 0 1
5015: PPUSH
5016: CALL 6678 0 1
5020: ST_TO_ADDR
// if base then
5021: LD_VAR 0 6
5025: IFFALSE 5053
// begin SetTag ( driver , 0 ) ;
5027: LD_VAR 0 1
5031: PPUSH
5032: LD_INT 0
5034: PPUSH
5035: CALL_OW 109
// MC_Retreat ( base , driver ) ;
5039: LD_VAR 0 6
5043: PPUSH
5044: LD_VAR 0 1
5048: PPUSH
5049: CALL 7709 0 2
// end ; end ; end ;
5053: LD_VAR 0 5
5057: RET
// export function MCE_BuildingComplete ( building ) ; var base , btype , x , y , d ; begin
5058: LD_INT 0
5060: PPUSH
5061: PPUSH
5062: PPUSH
5063: PPUSH
5064: PPUSH
5065: PPUSH
// btype := GetBType ( building ) ;
5066: LD_ADDR_VAR 0 4
5070: PUSH
5071: LD_VAR 0 1
5075: PPUSH
5076: CALL_OW 266
5080: ST_TO_ADDR
// x := GetX ( building ) ;
5081: LD_ADDR_VAR 0 5
5085: PUSH
5086: LD_VAR 0 1
5090: PPUSH
5091: CALL_OW 250
5095: ST_TO_ADDR
// y := GetY ( building ) ;
5096: LD_ADDR_VAR 0 6
5100: PUSH
5101: LD_VAR 0 1
5105: PPUSH
5106: CALL_OW 251
5110: ST_TO_ADDR
// d := GetDir ( building ) ;
5111: LD_ADDR_VAR 0 7
5115: PUSH
5116: LD_VAR 0 1
5120: PPUSH
5121: CALL_OW 254
5125: ST_TO_ADDR
// for base := 1 to mc_build_list do
5126: LD_ADDR_VAR 0 3
5130: PUSH
5131: DOUBLE
5132: LD_INT 1
5134: DEC
5135: ST_TO_ADDR
5136: LD_EXP 14
5140: PUSH
5141: FOR_TO
5142: IFFALSE 5449
// begin if not mc_build_list [ base ] then
5144: LD_EXP 14
5148: PUSH
5149: LD_VAR 0 3
5153: ARRAY
5154: NOT
5155: IFFALSE 5159
// continue ;
5157: GO 5141
// if CompareArrayValues ( [ btype , x , y , d ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5159: LD_VAR 0 4
5163: PUSH
5164: LD_VAR 0 5
5168: PUSH
5169: LD_VAR 0 6
5173: PUSH
5174: LD_VAR 0 7
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PPUSH
5185: LD_EXP 14
5189: PUSH
5190: LD_VAR 0 3
5194: ARRAY
5195: PUSH
5196: LD_INT 1
5198: ARRAY
5199: PPUSH
5200: CALL 19380 0 2
5204: PUSH
5205: LD_VAR 0 1
5209: PPUSH
5210: CALL_OW 255
5214: PUSH
5215: LD_EXP 6
5219: PUSH
5220: LD_VAR 0 3
5224: ARRAY
5225: EQUAL
5226: AND
5227: IFFALSE 5447
// begin if mc_build_list [ base ] [ 1 ] > 4 then
5229: LD_EXP 14
5233: PUSH
5234: LD_VAR 0 3
5238: ARRAY
5239: PUSH
5240: LD_INT 1
5242: ARRAY
5243: PUSH
5244: LD_INT 4
5246: GREATER
5247: IFFALSE 5320
// begin repeat wait ( 0 0$1 ) ;
5249: LD_INT 35
5251: PPUSH
5252: CALL_OW 67
// until not UpgradeCost ( mc_build_list [ base ] [ 1 ] [ 5 ] ) or not IsDead ( building ) ;
5256: LD_EXP 14
5260: PUSH
5261: LD_VAR 0 3
5265: ARRAY
5266: PUSH
5267: LD_INT 1
5269: ARRAY
5270: PUSH
5271: LD_INT 5
5273: ARRAY
5274: PPUSH
5275: CALL 19616 0 1
5279: NOT
5280: PUSH
5281: LD_VAR 0 1
5285: PPUSH
5286: CALL_OW 301
5290: NOT
5291: OR
5292: IFFALSE 5249
// if IsDead ( building ) then
5294: LD_VAR 0 1
5298: PPUSH
5299: CALL_OW 301
5303: IFFALSE 5309
// exit ;
5305: POP
5306: POP
5307: GO 5451
// ComUpgrade ( building ) ;
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 146
// end else
5318: GO 5359
// mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5320: LD_ADDR_EXP 14
5324: PUSH
5325: LD_EXP 14
5329: PPUSH
5330: LD_VAR 0 3
5334: PPUSH
5335: LD_EXP 14
5339: PUSH
5340: LD_VAR 0 3
5344: ARRAY
5345: PPUSH
5346: LD_INT 1
5348: PPUSH
5349: CALL_OW 3
5353: PPUSH
5354: CALL_OW 1
5358: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , base , Replace ( mc_buildings [ base ] , mc_buildings [ base ] + 1 , building ) ) ;
5359: LD_ADDR_EXP 10
5363: PUSH
5364: LD_EXP 10
5368: PPUSH
5369: LD_VAR 0 3
5373: PPUSH
5374: LD_EXP 10
5378: PUSH
5379: LD_VAR 0 3
5383: ARRAY
5384: PPUSH
5385: LD_EXP 10
5389: PUSH
5390: LD_VAR 0 3
5394: ARRAY
5395: PUSH
5396: LD_INT 1
5398: PLUS
5399: PPUSH
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 1
5409: PPUSH
5410: CALL_OW 1
5414: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5415: LD_VAR 0 3
5419: PPUSH
5420: LD_EXP 37
5424: PPUSH
5425: CALL 7919 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5429: LD_VAR 0 3
5433: PPUSH
5434: LD_EXP 37
5438: PPUSH
5439: CALL 6356 0 2
// exit ;
5443: POP
5444: POP
5445: GO 5451
// end ; end ;
5447: GO 5141
5449: POP
5450: POP
// end ;
5451: LD_VAR 0 2
5455: RET
// export function MCE_BuildingDestroyed ( building ) ; var base , x , y , d , btype ; begin
5456: LD_INT 0
5458: PPUSH
5459: PPUSH
5460: PPUSH
5461: PPUSH
5462: PPUSH
5463: PPUSH
// btype := GetBType ( building ) ;
5464: LD_ADDR_VAR 0 7
5468: PUSH
5469: LD_VAR 0 1
5473: PPUSH
5474: CALL_OW 266
5478: ST_TO_ADDR
// x := GetX ( building ) ;
5479: LD_ADDR_VAR 0 4
5483: PUSH
5484: LD_VAR 0 1
5488: PPUSH
5489: CALL_OW 250
5493: ST_TO_ADDR
// y := GetY ( building ) ;
5494: LD_ADDR_VAR 0 5
5498: PUSH
5499: LD_VAR 0 1
5503: PPUSH
5504: CALL_OW 251
5508: ST_TO_ADDR
// d := GetDir ( building ) ;
5509: LD_ADDR_VAR 0 6
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 254
5523: ST_TO_ADDR
// for base := 1 to mc_buildings do
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: DOUBLE
5530: LD_INT 1
5532: DEC
5533: ST_TO_ADDR
5534: LD_EXP 10
5538: PUSH
5539: FOR_TO
5540: IFFALSE 5770
// begin if not mc_buildings [ base ] then
5542: LD_EXP 10
5546: PUSH
5547: LD_VAR 0 3
5551: ARRAY
5552: NOT
5553: IFFALSE 5557
// continue ;
5555: GO 5539
// if building in mc_buildings [ base ] then
5557: LD_VAR 0 1
5561: PUSH
5562: LD_EXP 10
5566: PUSH
5567: LD_VAR 0 3
5571: ARRAY
5572: IN
5573: IFFALSE 5768
// begin mc_buildings := Replace ( mc_buildings , base , mc_buildings [ base ] diff building ) ;
5575: LD_ADDR_EXP 10
5579: PUSH
5580: LD_EXP 10
5584: PPUSH
5585: LD_VAR 0 3
5589: PPUSH
5590: LD_EXP 10
5594: PUSH
5595: LD_VAR 0 3
5599: ARRAY
5600: PUSH
5601: LD_VAR 0 1
5605: DIFF
5606: PPUSH
5607: CALL_OW 1
5611: ST_TO_ADDR
// if mc_build_list [ base ] then
5612: LD_EXP 14
5616: PUSH
5617: LD_VAR 0 3
5621: ARRAY
5622: IFFALSE 5706
// if mc_build_list [ base ] [ 1 ] [ 1 ] = btype and mc_build_list [ base ] [ 1 ] [ 2 ] = x and mc_build_list [ base ] [ 1 ] [ 3 ] = y then
5624: LD_EXP 14
5628: PUSH
5629: LD_VAR 0 3
5633: ARRAY
5634: PUSH
5635: LD_INT 1
5637: ARRAY
5638: PUSH
5639: LD_INT 1
5641: ARRAY
5642: PUSH
5643: LD_VAR 0 7
5647: EQUAL
5648: PUSH
5649: LD_EXP 14
5653: PUSH
5654: LD_VAR 0 3
5658: ARRAY
5659: PUSH
5660: LD_INT 1
5662: ARRAY
5663: PUSH
5664: LD_INT 2
5666: ARRAY
5667: PUSH
5668: LD_VAR 0 4
5672: EQUAL
5673: AND
5674: PUSH
5675: LD_EXP 14
5679: PUSH
5680: LD_VAR 0 3
5684: ARRAY
5685: PUSH
5686: LD_INT 1
5688: ARRAY
5689: PUSH
5690: LD_INT 3
5692: ARRAY
5693: PUSH
5694: LD_VAR 0 5
5698: EQUAL
5699: AND
5700: IFFALSE 5706
// exit ;
5702: POP
5703: POP
5704: GO 5772
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] ^ [ btype , x , y , d ] ) ;
5706: LD_ADDR_EXP 14
5710: PUSH
5711: LD_EXP 14
5715: PPUSH
5716: LD_VAR 0 3
5720: PPUSH
5721: LD_EXP 14
5725: PUSH
5726: LD_VAR 0 3
5730: ARRAY
5731: PUSH
5732: LD_VAR 0 7
5736: PUSH
5737: LD_VAR 0 4
5741: PUSH
5742: LD_VAR 0 5
5746: PUSH
5747: LD_VAR 0 6
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: ADD
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// exit ;
5764: POP
5765: POP
5766: GO 5772
// end ; end ;
5768: GO 5539
5770: POP
5771: POP
// end ;
5772: LD_VAR 0 2
5776: RET
// export function MCE_BuildingUpgradeComplete ( building ) ; var base , btype , x , y , d ; begin
5777: LD_INT 0
5779: PPUSH
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
5784: PPUSH
// btype := GetBType ( building ) ;
5785: LD_ADDR_VAR 0 4
5789: PUSH
5790: LD_VAR 0 1
5794: PPUSH
5795: CALL_OW 266
5799: ST_TO_ADDR
// x := GetX ( building ) ;
5800: LD_ADDR_VAR 0 5
5804: PUSH
5805: LD_VAR 0 1
5809: PPUSH
5810: CALL_OW 250
5814: ST_TO_ADDR
// y := GetY ( building ) ;
5815: LD_ADDR_VAR 0 6
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 251
5829: ST_TO_ADDR
// d := GetDir ( building ) ;
5830: LD_ADDR_VAR 0 7
5834: PUSH
5835: LD_VAR 0 1
5839: PPUSH
5840: CALL_OW 254
5844: ST_TO_ADDR
// for base = 1 to mc_build_list do
5845: LD_ADDR_VAR 0 3
5849: PUSH
5850: DOUBLE
5851: LD_INT 1
5853: DEC
5854: ST_TO_ADDR
5855: LD_EXP 14
5859: PUSH
5860: FOR_TO
5861: IFFALSE 6031
// begin if not mc_build_list [ base ] then
5863: LD_EXP 14
5867: PUSH
5868: LD_VAR 0 3
5872: ARRAY
5873: NOT
5874: IFFALSE 5878
// continue ;
5876: GO 5860
// if CompareArrayValues ( [ btype - 1 , x , y , d , btype ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5878: LD_VAR 0 4
5882: PUSH
5883: LD_INT 1
5885: MINUS
5886: PUSH
5887: LD_VAR 0 5
5891: PUSH
5892: LD_VAR 0 6
5896: PUSH
5897: LD_VAR 0 7
5901: PUSH
5902: LD_VAR 0 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: PPUSH
5914: LD_EXP 14
5918: PUSH
5919: LD_VAR 0 3
5923: ARRAY
5924: PUSH
5925: LD_INT 1
5927: ARRAY
5928: PPUSH
5929: CALL 19380 0 2
5933: PUSH
5934: LD_VAR 0 1
5938: PPUSH
5939: CALL_OW 255
5943: PUSH
5944: LD_EXP 6
5948: PUSH
5949: LD_VAR 0 3
5953: ARRAY
5954: EQUAL
5955: AND
5956: IFFALSE 6029
// begin mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5958: LD_ADDR_EXP 14
5962: PUSH
5963: LD_EXP 14
5967: PPUSH
5968: LD_VAR 0 3
5972: PPUSH
5973: LD_EXP 14
5977: PUSH
5978: LD_VAR 0 3
5982: ARRAY
5983: PPUSH
5984: LD_INT 1
5986: PPUSH
5987: CALL_OW 3
5991: PPUSH
5992: CALL_OW 1
5996: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_EXP 37
6006: PPUSH
6007: CALL 7919 0 2
// MCT_ResetTag ( base , mctm_build ) ;
6011: LD_VAR 0 3
6015: PPUSH
6016: LD_EXP 37
6020: PPUSH
6021: CALL 6356 0 2
// exit ;
6025: POP
6026: POP
6027: GO 6033
// end ; end ;
6029: GO 5860
6031: POP
6032: POP
// end ; end_of_file
6033: LD_VAR 0 2
6037: RET
// export mc_active , mc_debug , mc_bases , mc_tag , mc_task , mc_people , mc_buildings , mc_vehicles , mc_mines , mc_minefields , mc_build_list , mc_produce_list , mc_defense_status , mc_defender , mc_defender_limit , mc_ape , mc_tech , mc_attack , mc_deposits_xy , mc_can_tame , mc_lab_upgrade , mc_crates_area , mc_teleport_exit , mc_allowed_tower_weapons , mc_parking , mc_scan_area , mc_danger ; export function MC_InitVariables ( ) ; begin
6038: LD_INT 0
6040: PPUSH
// mc_bases := [ ] ;
6041: LD_ADDR_EXP 6
6045: PUSH
6046: EMPTY
6047: ST_TO_ADDR
// mc_tag := [ ] ;
6048: LD_ADDR_EXP 7
6052: PUSH
6053: EMPTY
6054: ST_TO_ADDR
// mc_task := [ ] ;
6055: LD_ADDR_EXP 8
6059: PUSH
6060: EMPTY
6061: ST_TO_ADDR
// mc_people := [ ] ;
6062: LD_ADDR_EXP 9
6066: PUSH
6067: EMPTY
6068: ST_TO_ADDR
// mc_buildings := [ ] ;
6069: LD_ADDR_EXP 10
6073: PUSH
6074: EMPTY
6075: ST_TO_ADDR
// mc_vehicles := [ ] ;
6076: LD_ADDR_EXP 11
6080: PUSH
6081: EMPTY
6082: ST_TO_ADDR
// mc_mines := [ ] ;
6083: LD_ADDR_EXP 12
6087: PUSH
6088: EMPTY
6089: ST_TO_ADDR
// mc_minefields := [ ] ;
6090: LD_ADDR_EXP 13
6094: PUSH
6095: EMPTY
6096: ST_TO_ADDR
// mc_build_list := [ ] ;
6097: LD_ADDR_EXP 14
6101: PUSH
6102: EMPTY
6103: ST_TO_ADDR
// mc_produce_list := [ ] ;
6104: LD_ADDR_EXP 15
6108: PUSH
6109: EMPTY
6110: ST_TO_ADDR
// mc_defense_status := [ ] ;
6111: LD_ADDR_EXP 16
6115: PUSH
6116: EMPTY
6117: ST_TO_ADDR
// mc_defender := [ ] ;
6118: LD_ADDR_EXP 17
6122: PUSH
6123: EMPTY
6124: ST_TO_ADDR
// mc_defender_limit := [ ] ;
6125: LD_ADDR_EXP 18
6129: PUSH
6130: EMPTY
6131: ST_TO_ADDR
// mc_ape := [ ] ;
6132: LD_ADDR_EXP 19
6136: PUSH
6137: EMPTY
6138: ST_TO_ADDR
// mc_tech := [ ] ;
6139: LD_ADDR_EXP 20
6143: PUSH
6144: EMPTY
6145: ST_TO_ADDR
// mc_attack := [ ] ;
6146: LD_ADDR_EXP 21
6150: PUSH
6151: EMPTY
6152: ST_TO_ADDR
// mc_deposits_xy := [ ] ;
6153: LD_ADDR_EXP 22
6157: PUSH
6158: EMPTY
6159: ST_TO_ADDR
// mc_can_tame := [ ] ;
6160: LD_ADDR_EXP 23
6164: PUSH
6165: EMPTY
6166: ST_TO_ADDR
// mc_crates_area := [ ] ;
6167: LD_ADDR_EXP 25
6171: PUSH
6172: EMPTY
6173: ST_TO_ADDR
// mc_teleport_exit := [ ] ;
6174: LD_ADDR_EXP 26
6178: PUSH
6179: EMPTY
6180: ST_TO_ADDR
// mc_allowed_tower_weapons := [ ] ;
6181: LD_ADDR_EXP 27
6185: PUSH
6186: EMPTY
6187: ST_TO_ADDR
// mc_parking := [ ] ;
6188: LD_ADDR_EXP 28
6192: PUSH
6193: EMPTY
6194: ST_TO_ADDR
// mc_scan_area := [ ] ;
6195: LD_ADDR_EXP 29
6199: PUSH
6200: EMPTY
6201: ST_TO_ADDR
// mc_danger := [ ] ;
6202: LD_ADDR_EXP 30
6206: PUSH
6207: EMPTY
6208: ST_TO_ADDR
// end ; end_of_file
6209: LD_VAR 0 1
6213: RET
// export mct_none , mct_change_class , mct_build , mct_collect_crates , mct_heal ; export function MCT_InitTags ; begin
6214: LD_INT 0
6216: PPUSH
// mct_none := 0 ;
6217: LD_ADDR_EXP 31
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// mct_change_class := 1 ;
6225: LD_ADDR_EXP 32
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// mct_build := 2 ;
6233: LD_ADDR_EXP 33
6237: PUSH
6238: LD_INT 2
6240: ST_TO_ADDR
// mct_collect_crates := 3 ;
6241: LD_ADDR_EXP 34
6245: PUSH
6246: LD_INT 3
6248: ST_TO_ADDR
// mct_heal := 4 ;
6249: LD_ADDR_EXP 35
6253: PUSH
6254: LD_INT 4
6256: ST_TO_ADDR
// end ;
6257: LD_VAR 0 1
6261: RET
// export function MCT_GetByTag ( base , tag ) ; var i ; begin
6262: LD_INT 0
6264: PPUSH
6265: PPUSH
// result := [ ] ;
6266: LD_ADDR_VAR 0 3
6270: PUSH
6271: EMPTY
6272: ST_TO_ADDR
// if not base then
6273: LD_VAR 0 1
6277: NOT
6278: IFFALSE 6282
// exit ;
6280: GO 6351
// for i in mc_people [ base ] do
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_EXP 9
6291: PUSH
6292: LD_VAR 0 1
6296: ARRAY
6297: PUSH
6298: FOR_IN
6299: IFFALSE 6349
// if GetTag ( i ) = tag then
6301: LD_VAR 0 4
6305: PPUSH
6306: CALL_OW 110
6310: PUSH
6311: LD_VAR 0 2
6315: EQUAL
6316: IFFALSE 6347
// result := Replace ( result , result + 1 , i ) ;
6318: LD_ADDR_VAR 0 3
6322: PUSH
6323: LD_VAR 0 3
6327: PPUSH
6328: LD_VAR 0 3
6332: PUSH
6333: LD_INT 1
6335: PLUS
6336: PPUSH
6337: LD_VAR 0 4
6341: PPUSH
6342: CALL_OW 1
6346: ST_TO_ADDR
6347: GO 6298
6349: POP
6350: POP
// end ;
6351: LD_VAR 0 3
6355: RET
// export function MCT_ResetTag ( base , tag ) ; var i ; begin
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
// result := MCT_GetByTag ( base , tag ) ;
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_VAR 0 1
6369: PPUSH
6370: LD_VAR 0 2
6374: PPUSH
6375: CALL 6262 0 2
6379: ST_TO_ADDR
// if result then
6380: LD_VAR 0 3
6384: IFFALSE 6417
// for i in result do
6386: LD_ADDR_VAR 0 4
6390: PUSH
6391: LD_VAR 0 3
6395: PUSH
6396: FOR_IN
6397: IFFALSE 6415
// SetTag ( i , mct_none ) ;
6399: LD_VAR 0 4
6403: PPUSH
6404: LD_EXP 31
6408: PPUSH
6409: CALL_OW 109
6413: GO 6396
6415: POP
6416: POP
// end ;
6417: LD_VAR 0 3
6421: RET
// export function MCT_SetTag ( units , tag ) ; var i ; begin
6422: LD_INT 0
6424: PPUSH
6425: PPUSH
// if not units then
6426: LD_VAR 0 1
6430: NOT
6431: IFFALSE 6435
// exit ;
6433: GO 6466
// for i in units do
6435: LD_ADDR_VAR 0 4
6439: PUSH
6440: LD_VAR 0 1
6444: PUSH
6445: FOR_IN
6446: IFFALSE 6464
// SetTag ( i , tag ) ;
6448: LD_VAR 0 4
6452: PPUSH
6453: LD_VAR 0 2
6457: PPUSH
6458: CALL_OW 109
6462: GO 6445
6464: POP
6465: POP
// end ; end_of_file
6466: LD_VAR 0 3
6470: RET
// export function MC_Exist ( base ) ; begin
6471: LD_INT 0
6473: PPUSH
// result := mc_bases >= base and mc_bases [ base ] > 0 ;
6474: LD_ADDR_VAR 0 2
6478: PUSH
6479: LD_EXP 6
6483: PUSH
6484: LD_VAR 0 1
6488: GREATEREQUAL
6489: PUSH
6490: LD_EXP 6
6494: PUSH
6495: LD_VAR 0 1
6499: ARRAY
6500: PUSH
6501: LD_INT 0
6503: GREATER
6504: AND
6505: ST_TO_ADDR
// end ;
6506: LD_VAR 0 2
6510: RET
// export function MC_GetBestForClass ( base , class , amount ) ; var i , units ; begin
6511: LD_INT 0
6513: PPUSH
6514: PPUSH
6515: PPUSH
// result := [ ] ;
6516: LD_ADDR_VAR 0 4
6520: PUSH
6521: EMPTY
6522: ST_TO_ADDR
// units := SortBySkill ( UnitFilter ( mc_people [ base ] , [ f_not , [ f_class , class ] ] ) , class ) ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_EXP 9
6532: PUSH
6533: LD_VAR 0 1
6537: ARRAY
6538: PPUSH
6539: LD_INT 3
6541: PUSH
6542: LD_INT 25
6544: PUSH
6545: LD_VAR 0 2
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PPUSH
6558: CALL_OW 72
6562: PPUSH
6563: LD_VAR 0 2
6567: PPUSH
6568: CALL 43857 0 2
6572: ST_TO_ADDR
// if not units then
6573: LD_VAR 0 6
6577: NOT
6578: IFFALSE 6582
// exit ;
6580: GO 6673
// for i := 1 to amount do
6582: LD_ADDR_VAR 0 5
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_VAR 0 3
6596: PUSH
6597: FOR_TO
6598: IFFALSE 6671
// begin if i > units then
6600: LD_VAR 0 5
6604: PUSH
6605: LD_VAR 0 6
6609: GREATER
6610: IFFALSE 6616
// exit ;
6612: POP
6613: POP
6614: GO 6673
// if not GetTag ( units [ i ] ) then
6616: LD_VAR 0 6
6620: PUSH
6621: LD_VAR 0 5
6625: ARRAY
6626: PPUSH
6627: CALL_OW 110
6631: NOT
6632: IFFALSE 6669
// result := Replace ( result , result + 1 , units [ i ] ) ;
6634: LD_ADDR_VAR 0 4
6638: PUSH
6639: LD_VAR 0 4
6643: PPUSH
6644: LD_VAR 0 4
6648: PUSH
6649: LD_INT 1
6651: PLUS
6652: PPUSH
6653: LD_VAR 0 6
6657: PUSH
6658: LD_VAR 0 5
6662: ARRAY
6663: PPUSH
6664: CALL_OW 1
6668: ST_TO_ADDR
// end ;
6669: GO 6597
6671: POP
6672: POP
// end ;
6673: LD_VAR 0 4
6677: RET
// export function MC_GetHumanBase ( human ) ; var i ; begin
6678: LD_INT 0
6680: PPUSH
6681: PPUSH
// for i := 1 to mc_people do
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: DOUBLE
6688: LD_INT 1
6690: DEC
6691: ST_TO_ADDR
6692: LD_EXP 9
6696: PUSH
6697: FOR_TO
6698: IFFALSE 6734
// if human in mc_people [ i ] then
6700: LD_VAR 0 1
6704: PUSH
6705: LD_EXP 9
6709: PUSH
6710: LD_VAR 0 3
6714: ARRAY
6715: IN
6716: IFFALSE 6732
// begin result := i ;
6718: LD_ADDR_VAR 0 2
6722: PUSH
6723: LD_VAR 0 3
6727: ST_TO_ADDR
// exit ;
6728: POP
6729: POP
6730: GO 6736
// end ;
6732: GO 6697
6734: POP
6735: POP
// end ;
6736: LD_VAR 0 2
6740: RET
// export function MC_ChangeClass ( base , class , units ) ; var i , buildings , b ; begin
6741: LD_INT 0
6743: PPUSH
6744: PPUSH
6745: PPUSH
6746: PPUSH
// if not base or not units then
6747: LD_VAR 0 1
6751: NOT
6752: PUSH
6753: LD_VAR 0 3
6757: NOT
6758: OR
6759: IFFALSE 6763
// exit ;
6761: GO 7244
// case class of 1 , 5 , 6 , 7 , 8 :
6763: LD_VAR 0 2
6767: PUSH
6768: LD_INT 1
6770: DOUBLE
6771: EQUAL
6772: IFTRUE 6800
6774: LD_INT 5
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6800
6780: LD_INT 6
6782: DOUBLE
6783: EQUAL
6784: IFTRUE 6800
6786: LD_INT 7
6788: DOUBLE
6789: EQUAL
6790: IFTRUE 6800
6792: LD_INT 8
6794: DOUBLE
6795: EQUAL
6796: IFTRUE 6800
6798: GO 6852
6800: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
6801: LD_ADDR_VAR 0 6
6805: PUSH
6806: LD_EXP 10
6810: PUSH
6811: LD_VAR 0 1
6815: ARRAY
6816: PPUSH
6817: LD_INT 2
6819: PUSH
6820: LD_INT 30
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 30
6832: PUSH
6833: LD_INT 5
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 72
6849: ST_TO_ADDR
6850: GO 7044
6852: LD_INT 2
6854: DOUBLE
6855: EQUAL
6856: IFTRUE 6860
6858: GO 6912
6860: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
6861: LD_ADDR_VAR 0 6
6865: PUSH
6866: LD_EXP 10
6870: PUSH
6871: LD_VAR 0 1
6875: ARRAY
6876: PPUSH
6877: LD_INT 2
6879: PUSH
6880: LD_INT 30
6882: PUSH
6883: LD_INT 0
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 1
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: PPUSH
6905: CALL_OW 72
6909: ST_TO_ADDR
6910: GO 7044
6912: LD_INT 3
6914: DOUBLE
6915: EQUAL
6916: IFTRUE 6920
6918: GO 6972
6920: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
6921: LD_ADDR_VAR 0 6
6925: PUSH
6926: LD_EXP 10
6930: PUSH
6931: LD_VAR 0 1
6935: ARRAY
6936: PPUSH
6937: LD_INT 2
6939: PUSH
6940: LD_INT 30
6942: PUSH
6943: LD_INT 2
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 30
6952: PUSH
6953: LD_INT 3
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 72
6969: ST_TO_ADDR
6970: GO 7044
6972: LD_INT 4
6974: DOUBLE
6975: EQUAL
6976: IFTRUE 6980
6978: GO 7043
6980: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
6981: LD_ADDR_VAR 0 6
6985: PUSH
6986: LD_EXP 10
6990: PUSH
6991: LD_VAR 0 1
6995: ARRAY
6996: PPUSH
6997: LD_INT 2
6999: PUSH
7000: LD_INT 30
7002: PUSH
7003: LD_INT 6
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 30
7012: PUSH
7013: LD_INT 7
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 30
7022: PUSH
7023: LD_INT 8
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 72
7040: ST_TO_ADDR
7041: GO 7044
7043: POP
// if not buildings then
7044: LD_VAR 0 6
7048: NOT
7049: IFFALSE 7053
// exit ;
7051: GO 7244
// for i := 1 to units do
7053: LD_ADDR_VAR 0 5
7057: PUSH
7058: DOUBLE
7059: LD_INT 1
7061: DEC
7062: ST_TO_ADDR
7063: LD_VAR 0 3
7067: PUSH
7068: FOR_TO
7069: IFFALSE 7242
// begin if GetClass ( units [ i ] ) = class then
7071: LD_VAR 0 3
7075: PUSH
7076: LD_VAR 0 5
7080: ARRAY
7081: PPUSH
7082: CALL_OW 257
7086: PUSH
7087: LD_VAR 0 2
7091: EQUAL
7092: IFFALSE 7096
// continue ;
7094: GO 7068
// SetTag ( units [ i ] , mct_change_class ) ;
7096: LD_VAR 0 3
7100: PUSH
7101: LD_VAR 0 5
7105: ARRAY
7106: PPUSH
7107: LD_EXP 32
7111: PPUSH
7112: CALL_OW 109
// if buildings > i div 6 then
7116: LD_VAR 0 6
7120: PUSH
7121: LD_VAR 0 5
7125: PUSH
7126: LD_INT 6
7128: DIV
7129: GREATER
7130: IFFALSE 7154
// b := buildings [ i div 6 ] else
7132: LD_ADDR_VAR 0 7
7136: PUSH
7137: LD_VAR 0 6
7141: PUSH
7142: LD_VAR 0 5
7146: PUSH
7147: LD_INT 6
7149: DIV
7150: ARRAY
7151: ST_TO_ADDR
7152: GO 7168
// b := buildings [ 1 ] ;
7154: LD_ADDR_VAR 0 7
7158: PUSH
7159: LD_VAR 0 6
7163: PUSH
7164: LD_INT 1
7166: ARRAY
7167: ST_TO_ADDR
// if IsInUnit ( units [ i ] ) then
7168: LD_VAR 0 3
7172: PUSH
7173: LD_VAR 0 5
7177: ARRAY
7178: PPUSH
7179: CALL_OW 310
7183: IFFALSE 7200
// ComExit ( units [ i ] ) ;
7185: LD_VAR 0 3
7189: PUSH
7190: LD_VAR 0 5
7194: ARRAY
7195: PPUSH
7196: CALL 45746 0 1
// AddComEnterUnit ( units [ i ] , b ) ;
7200: LD_VAR 0 3
7204: PUSH
7205: LD_VAR 0 5
7209: ARRAY
7210: PPUSH
7211: LD_VAR 0 7
7215: PPUSH
7216: CALL_OW 180
// AddComChangeProfession ( units [ i ] , class ) ;
7220: LD_VAR 0 3
7224: PUSH
7225: LD_VAR 0 5
7229: ARRAY
7230: PPUSH
7231: LD_VAR 0 2
7235: PPUSH
7236: CALL_OW 183
// end ;
7240: GO 7068
7242: POP
7243: POP
// end ;
7244: LD_VAR 0 4
7248: RET
// export function MC_GetByClass ( base , class , tag ) ; var i ; begin
7249: LD_INT 0
7251: PPUSH
7252: PPUSH
// result := UnitFilter ( mc_people [ base ] , [ f_class , class ] ) ;
7253: LD_ADDR_VAR 0 4
7257: PUSH
7258: LD_EXP 9
7262: PUSH
7263: LD_VAR 0 1
7267: ARRAY
7268: PPUSH
7269: LD_INT 25
7271: PUSH
7272: LD_VAR 0 2
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 72
7285: ST_TO_ADDR
// if tag > - 1 then
7286: LD_VAR 0 3
7290: PUSH
7291: LD_INT 1
7293: NEG
7294: GREATER
7295: IFFALSE 7347
// for i in result do
7297: LD_ADDR_VAR 0 5
7301: PUSH
7302: LD_VAR 0 4
7306: PUSH
7307: FOR_IN
7308: IFFALSE 7345
// if GetTag ( i ) <> tag then
7310: LD_VAR 0 5
7314: PPUSH
7315: CALL_OW 110
7319: PUSH
7320: LD_VAR 0 3
7324: NONEQUAL
7325: IFFALSE 7343
// result := result diff i ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: LD_VAR 0 4
7336: PUSH
7337: LD_VAR 0 5
7341: DIFF
7342: ST_TO_ADDR
7343: GO 7307
7345: POP
7346: POP
// end ;
7347: LD_VAR 0 4
7351: RET
// export function MC_GetOneByClass ( base , class , tag ) ; begin
7352: LD_INT 0
7354: PPUSH
// result := MC_GetByClass ( base , class , tag ) ;
7355: LD_ADDR_VAR 0 4
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: LD_VAR 0 2
7369: PPUSH
7370: LD_VAR 0 3
7374: PPUSH
7375: CALL 7249 0 3
7379: ST_TO_ADDR
// if result then
7380: LD_VAR 0 4
7384: IFFALSE 7400
// result := result [ 1 ] ;
7386: LD_ADDR_VAR 0 4
7390: PUSH
7391: LD_VAR 0 4
7395: PUSH
7396: LD_INT 1
7398: ARRAY
7399: ST_TO_ADDR
// end ;
7400: LD_VAR 0 4
7404: RET
// export function MC_GetBuilding ( base , btype ) ; begin
7405: LD_INT 0
7407: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_btype , btype ] ) ;
7408: LD_ADDR_VAR 0 3
7412: PUSH
7413: LD_EXP 10
7417: PUSH
7418: LD_VAR 0 1
7422: ARRAY
7423: PPUSH
7424: LD_INT 30
7426: PUSH
7427: LD_VAR 0 2
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PPUSH
7436: CALL_OW 72
7440: ST_TO_ADDR
// end ;
7441: LD_VAR 0 3
7445: RET
// export function MC_GetDepot ( base ) ; begin
7446: LD_INT 0
7448: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
7449: LD_ADDR_VAR 0 2
7453: PUSH
7454: LD_EXP 10
7458: PUSH
7459: LD_VAR 0 1
7463: ARRAY
7464: PPUSH
7465: LD_INT 2
7467: PUSH
7468: LD_INT 30
7470: PUSH
7471: LD_INT 0
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 30
7480: PUSH
7481: LD_INT 1
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 72
7497: ST_TO_ADDR
// end ;
7498: LD_VAR 0 2
7502: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
7503: LD_INT 0
7505: PPUSH
// result := mc_vehicles [ base ] ;
7506: LD_ADDR_VAR 0 3
7510: PUSH
7511: LD_EXP 11
7515: PUSH
7516: LD_VAR 0 1
7520: ARRAY
7521: ST_TO_ADDR
// if onlyCombat then
7522: LD_VAR 0 2
7526: IFFALSE 7704
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: LD_VAR 0 3
7537: PUSH
7538: LD_VAR 0 3
7542: PPUSH
7543: LD_INT 2
7545: PUSH
7546: LD_INT 34
7548: PUSH
7549: LD_INT 12
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 34
7558: PUSH
7559: LD_INT 51
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 34
7568: PUSH
7569: LD_EXP 40
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PUSH
7578: LD_INT 34
7580: PUSH
7581: LD_INT 32
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: LD_INT 34
7590: PUSH
7591: LD_INT 13
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 34
7600: PUSH
7601: LD_INT 52
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 34
7610: PUSH
7611: LD_EXP 45
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 34
7622: PUSH
7623: LD_INT 14
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: LD_INT 34
7632: PUSH
7633: LD_INT 53
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 34
7642: PUSH
7643: LD_EXP 39
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: LD_INT 34
7654: PUSH
7655: LD_INT 31
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 34
7664: PUSH
7665: LD_INT 48
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 8
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: PPUSH
7698: CALL_OW 72
7702: DIFF
7703: ST_TO_ADDR
// end ;
7704: LD_VAR 0 3
7708: RET
// export function MC_Retreat ( base , unit ) ; var depot ; begin
7709: LD_INT 0
7711: PPUSH
7712: PPUSH
// if not base or not unit then
7713: LD_VAR 0 1
7717: NOT
7718: PUSH
7719: LD_VAR 0 2
7723: NOT
7724: OR
7725: IFFALSE 7729
// exit ;
7727: GO 7796
// depot := NearestUnitToUnit ( MC_GetDepot ( base ) , unit ) ;
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: LD_VAR 0 1
7738: PPUSH
7739: CALL 7446 0 1
7743: PPUSH
7744: LD_VAR 0 2
7748: PPUSH
7749: CALL_OW 74
7753: ST_TO_ADDR
// if depot then
7754: LD_VAR 0 4
7758: IFFALSE 7776
// ComStandNearbyBuilding ( unit , depot ) else
7760: LD_VAR 0 2
7764: PPUSH
7765: LD_VAR 0 4
7769: PPUSH
7770: CALL 9528 0 2
7774: GO 7796
// ComMoveToArea ( unit , mc_scan_area [ base ] ) ;
7776: LD_VAR 0 2
7780: PPUSH
7781: LD_EXP 29
7785: PUSH
7786: LD_VAR 0 1
7790: ARRAY
7791: PPUSH
7792: CALL_OW 113
// end ; end_of_file
7796: LD_VAR 0 3
7800: RET
// export mctm_collect_crates , mctm_build , mctm_ ; export function MCTM_InitTaskManager ( ) ; begin
7801: LD_INT 0
7803: PPUSH
// mctm_collect_crates := 1 ;
7804: LD_ADDR_EXP 36
7808: PUSH
7809: LD_INT 1
7811: ST_TO_ADDR
// mctm_build := 2 ;
7812: LD_ADDR_EXP 37
7816: PUSH
7817: LD_INT 2
7819: ST_TO_ADDR
// end ;
7820: LD_VAR 0 1
7824: RET
// export function MCTM_HasActiveTask ( base , task ) ; begin
7825: LD_INT 0
7827: PPUSH
// result := task in mc_task [ base ] ;
7828: LD_ADDR_VAR 0 3
7832: PUSH
7833: LD_VAR 0 2
7837: PUSH
7838: LD_EXP 8
7842: PUSH
7843: LD_VAR 0 1
7847: ARRAY
7848: IN
7849: ST_TO_ADDR
// end ;
7850: LD_VAR 0 3
7854: RET
// export function MCTM_SetActiveTask ( base , task ) ; begin
7855: LD_INT 0
7857: PPUSH
// mc_task := Replace ( mc_task , base , Replace ( mc_task [ base ] , mc_task [ base ] + 1 , task ) ) ;
7858: LD_ADDR_EXP 8
7862: PUSH
7863: LD_EXP 8
7867: PPUSH
7868: LD_VAR 0 1
7872: PPUSH
7873: LD_EXP 8
7877: PUSH
7878: LD_VAR 0 1
7882: ARRAY
7883: PPUSH
7884: LD_EXP 8
7888: PUSH
7889: LD_VAR 0 1
7893: ARRAY
7894: PUSH
7895: LD_INT 1
7897: PLUS
7898: PPUSH
7899: LD_VAR 0 2
7903: PPUSH
7904: CALL_OW 1
7908: PPUSH
7909: CALL_OW 1
7913: ST_TO_ADDR
// end ;
7914: LD_VAR 0 3
7918: RET
// export function MCTM_DeleteActiveTask ( base , task ) ; begin
7919: LD_INT 0
7921: PPUSH
// mc_task := Replace ( mc_task , base , mc_task [ base ] diff task ) ;
7922: LD_ADDR_EXP 8
7926: PUSH
7927: LD_EXP 8
7931: PPUSH
7932: LD_VAR 0 1
7936: PPUSH
7937: LD_EXP 8
7941: PUSH
7942: LD_VAR 0 1
7946: ARRAY
7947: PUSH
7948: LD_VAR 0 2
7952: DIFF
7953: PPUSH
7954: CALL_OW 1
7958: ST_TO_ADDR
// end ; end_of_file
7959: LD_VAR 0 3
7963: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
7964: LD_INT 0
7966: PPUSH
7967: PPUSH
// if exist_mode then
7968: LD_VAR 0 2
7972: IFFALSE 7997
// unit := CreateCharacter ( prefix & ident ) else
7974: LD_ADDR_VAR 0 5
7978: PUSH
7979: LD_VAR 0 3
7983: PUSH
7984: LD_VAR 0 1
7988: STR
7989: PPUSH
7990: CALL_OW 34
7994: ST_TO_ADDR
7995: GO 8012
// unit := NewCharacter ( ident ) ;
7997: LD_ADDR_VAR 0 5
8001: PUSH
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 25
8011: ST_TO_ADDR
// result := unit ;
8012: LD_ADDR_VAR 0 4
8016: PUSH
8017: LD_VAR 0 5
8021: ST_TO_ADDR
// end ;
8022: LD_VAR 0 4
8026: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8027: LD_INT 0
8029: PPUSH
8030: PPUSH
// if not side or not nation then
8031: LD_VAR 0 1
8035: NOT
8036: PUSH
8037: LD_VAR 0 2
8041: NOT
8042: OR
8043: IFFALSE 8047
// exit ;
8045: GO 8815
// case nation of nation_american :
8047: LD_VAR 0 2
8051: PUSH
8052: LD_INT 1
8054: DOUBLE
8055: EQUAL
8056: IFTRUE 8060
8058: GO 8274
8060: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8061: LD_ADDR_VAR 0 4
8065: PUSH
8066: LD_INT 35
8068: PUSH
8069: LD_INT 45
8071: PUSH
8072: LD_INT 46
8074: PUSH
8075: LD_INT 47
8077: PUSH
8078: LD_INT 82
8080: PUSH
8081: LD_INT 83
8083: PUSH
8084: LD_INT 84
8086: PUSH
8087: LD_INT 85
8089: PUSH
8090: LD_INT 86
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 6
8101: PUSH
8102: LD_INT 15
8104: PUSH
8105: LD_INT 16
8107: PUSH
8108: LD_INT 7
8110: PUSH
8111: LD_INT 12
8113: PUSH
8114: LD_INT 13
8116: PUSH
8117: LD_INT 10
8119: PUSH
8120: LD_INT 14
8122: PUSH
8123: LD_INT 20
8125: PUSH
8126: LD_INT 21
8128: PUSH
8129: LD_INT 22
8131: PUSH
8132: LD_INT 25
8134: PUSH
8135: LD_INT 32
8137: PUSH
8138: LD_INT 27
8140: PUSH
8141: LD_INT 36
8143: PUSH
8144: LD_INT 69
8146: PUSH
8147: LD_INT 39
8149: PUSH
8150: LD_INT 34
8152: PUSH
8153: LD_INT 40
8155: PUSH
8156: LD_INT 48
8158: PUSH
8159: LD_INT 49
8161: PUSH
8162: LD_INT 50
8164: PUSH
8165: LD_INT 51
8167: PUSH
8168: LD_INT 52
8170: PUSH
8171: LD_INT 53
8173: PUSH
8174: LD_INT 54
8176: PUSH
8177: LD_INT 55
8179: PUSH
8180: LD_INT 56
8182: PUSH
8183: LD_INT 57
8185: PUSH
8186: LD_INT 58
8188: PUSH
8189: LD_INT 59
8191: PUSH
8192: LD_INT 60
8194: PUSH
8195: LD_INT 61
8197: PUSH
8198: LD_INT 62
8200: PUSH
8201: LD_INT 80
8203: PUSH
8204: LD_INT 82
8206: PUSH
8207: LD_INT 83
8209: PUSH
8210: LD_INT 84
8212: PUSH
8213: LD_INT 85
8215: PUSH
8216: LD_INT 86
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: ST_TO_ADDR
8272: GO 8739
8274: LD_INT 2
8276: DOUBLE
8277: EQUAL
8278: IFTRUE 8282
8280: GO 8508
8282: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8283: LD_ADDR_VAR 0 4
8287: PUSH
8288: LD_INT 35
8290: PUSH
8291: LD_INT 45
8293: PUSH
8294: LD_INT 46
8296: PUSH
8297: LD_INT 47
8299: PUSH
8300: LD_INT 82
8302: PUSH
8303: LD_INT 83
8305: PUSH
8306: LD_INT 84
8308: PUSH
8309: LD_INT 85
8311: PUSH
8312: LD_INT 87
8314: PUSH
8315: LD_INT 70
8317: PUSH
8318: LD_INT 1
8320: PUSH
8321: LD_INT 11
8323: PUSH
8324: LD_INT 3
8326: PUSH
8327: LD_INT 4
8329: PUSH
8330: LD_INT 5
8332: PUSH
8333: LD_INT 6
8335: PUSH
8336: LD_INT 15
8338: PUSH
8339: LD_INT 18
8341: PUSH
8342: LD_INT 7
8344: PUSH
8345: LD_INT 17
8347: PUSH
8348: LD_INT 8
8350: PUSH
8351: LD_INT 20
8353: PUSH
8354: LD_INT 21
8356: PUSH
8357: LD_INT 22
8359: PUSH
8360: LD_INT 72
8362: PUSH
8363: LD_INT 26
8365: PUSH
8366: LD_INT 69
8368: PUSH
8369: LD_INT 39
8371: PUSH
8372: LD_INT 40
8374: PUSH
8375: LD_INT 41
8377: PUSH
8378: LD_INT 42
8380: PUSH
8381: LD_INT 43
8383: PUSH
8384: LD_INT 48
8386: PUSH
8387: LD_INT 49
8389: PUSH
8390: LD_INT 50
8392: PUSH
8393: LD_INT 51
8395: PUSH
8396: LD_INT 52
8398: PUSH
8399: LD_INT 53
8401: PUSH
8402: LD_INT 54
8404: PUSH
8405: LD_INT 55
8407: PUSH
8408: LD_INT 56
8410: PUSH
8411: LD_INT 60
8413: PUSH
8414: LD_INT 61
8416: PUSH
8417: LD_INT 62
8419: PUSH
8420: LD_INT 66
8422: PUSH
8423: LD_INT 67
8425: PUSH
8426: LD_INT 68
8428: PUSH
8429: LD_INT 81
8431: PUSH
8432: LD_INT 82
8434: PUSH
8435: LD_INT 83
8437: PUSH
8438: LD_INT 84
8440: PUSH
8441: LD_INT 85
8443: PUSH
8444: LD_INT 87
8446: PUSH
8447: LD_INT 88
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: ST_TO_ADDR
8506: GO 8739
8508: LD_INT 3
8510: DOUBLE
8511: EQUAL
8512: IFTRUE 8516
8514: GO 8738
8516: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8517: LD_ADDR_VAR 0 4
8521: PUSH
8522: LD_INT 46
8524: PUSH
8525: LD_INT 47
8527: PUSH
8528: LD_INT 1
8530: PUSH
8531: LD_INT 2
8533: PUSH
8534: LD_INT 82
8536: PUSH
8537: LD_INT 83
8539: PUSH
8540: LD_INT 84
8542: PUSH
8543: LD_INT 85
8545: PUSH
8546: LD_INT 86
8548: PUSH
8549: LD_INT 11
8551: PUSH
8552: LD_INT 9
8554: PUSH
8555: LD_INT 20
8557: PUSH
8558: LD_INT 19
8560: PUSH
8561: LD_INT 21
8563: PUSH
8564: LD_INT 24
8566: PUSH
8567: LD_INT 22
8569: PUSH
8570: LD_INT 25
8572: PUSH
8573: LD_INT 28
8575: PUSH
8576: LD_INT 29
8578: PUSH
8579: LD_INT 30
8581: PUSH
8582: LD_INT 31
8584: PUSH
8585: LD_INT 37
8587: PUSH
8588: LD_INT 38
8590: PUSH
8591: LD_INT 32
8593: PUSH
8594: LD_INT 27
8596: PUSH
8597: LD_INT 33
8599: PUSH
8600: LD_INT 69
8602: PUSH
8603: LD_INT 39
8605: PUSH
8606: LD_INT 34
8608: PUSH
8609: LD_INT 40
8611: PUSH
8612: LD_INT 71
8614: PUSH
8615: LD_INT 23
8617: PUSH
8618: LD_INT 44
8620: PUSH
8621: LD_INT 48
8623: PUSH
8624: LD_INT 49
8626: PUSH
8627: LD_INT 50
8629: PUSH
8630: LD_INT 51
8632: PUSH
8633: LD_INT 52
8635: PUSH
8636: LD_INT 53
8638: PUSH
8639: LD_INT 54
8641: PUSH
8642: LD_INT 55
8644: PUSH
8645: LD_INT 56
8647: PUSH
8648: LD_INT 57
8650: PUSH
8651: LD_INT 58
8653: PUSH
8654: LD_INT 59
8656: PUSH
8657: LD_INT 63
8659: PUSH
8660: LD_INT 64
8662: PUSH
8663: LD_INT 65
8665: PUSH
8666: LD_INT 82
8668: PUSH
8669: LD_INT 83
8671: PUSH
8672: LD_INT 84
8674: PUSH
8675: LD_INT 85
8677: PUSH
8678: LD_INT 86
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: ST_TO_ADDR
8736: GO 8739
8738: POP
// if state > - 1 and state < 3 then
8739: LD_VAR 0 3
8743: PUSH
8744: LD_INT 1
8746: NEG
8747: GREATER
8748: PUSH
8749: LD_VAR 0 3
8753: PUSH
8754: LD_INT 3
8756: LESS
8757: AND
8758: IFFALSE 8815
// for i in result do
8760: LD_ADDR_VAR 0 5
8764: PUSH
8765: LD_VAR 0 4
8769: PUSH
8770: FOR_IN
8771: IFFALSE 8813
// if GetTech ( i , side ) <> state then
8773: LD_VAR 0 5
8777: PPUSH
8778: LD_VAR 0 1
8782: PPUSH
8783: CALL_OW 321
8787: PUSH
8788: LD_VAR 0 3
8792: NONEQUAL
8793: IFFALSE 8811
// result := result diff i ;
8795: LD_ADDR_VAR 0 4
8799: PUSH
8800: LD_VAR 0 4
8804: PUSH
8805: LD_VAR 0 5
8809: DIFF
8810: ST_TO_ADDR
8811: GO 8770
8813: POP
8814: POP
// end ;
8815: LD_VAR 0 4
8819: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
8824: PPUSH
// result := true ;
8825: LD_ADDR_VAR 0 3
8829: PUSH
8830: LD_INT 1
8832: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8833: LD_ADDR_VAR 0 5
8837: PUSH
8838: LD_VAR 0 2
8842: PPUSH
8843: CALL_OW 480
8847: ST_TO_ADDR
// if not tmp then
8848: LD_VAR 0 5
8852: NOT
8853: IFFALSE 8857
// exit ;
8855: GO 8906
// for i in tmp do
8857: LD_ADDR_VAR 0 4
8861: PUSH
8862: LD_VAR 0 5
8866: PUSH
8867: FOR_IN
8868: IFFALSE 8904
// if GetTech ( i , side ) <> state_researched then
8870: LD_VAR 0 4
8874: PPUSH
8875: LD_VAR 0 1
8879: PPUSH
8880: CALL_OW 321
8884: PUSH
8885: LD_INT 2
8887: NONEQUAL
8888: IFFALSE 8902
// begin result := false ;
8890: LD_ADDR_VAR 0 3
8894: PUSH
8895: LD_INT 0
8897: ST_TO_ADDR
// exit ;
8898: POP
8899: POP
8900: GO 8906
// end ;
8902: GO 8867
8904: POP
8905: POP
// end ;
8906: LD_VAR 0 3
8910: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
8911: LD_INT 0
8913: PPUSH
8914: PPUSH
8915: PPUSH
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
8920: PPUSH
8921: PPUSH
8922: PPUSH
8923: PPUSH
8924: PPUSH
8925: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
8926: LD_VAR 0 1
8930: NOT
8931: PUSH
8932: LD_VAR 0 1
8936: PPUSH
8937: CALL_OW 257
8941: PUSH
8942: LD_INT 9
8944: NONEQUAL
8945: OR
8946: IFFALSE 8950
// exit ;
8948: GO 9523
// side := GetSide ( unit ) ;
8950: LD_ADDR_VAR 0 9
8954: PUSH
8955: LD_VAR 0 1
8959: PPUSH
8960: CALL_OW 255
8964: ST_TO_ADDR
// tech_space := tech_spacanom ;
8965: LD_ADDR_VAR 0 12
8969: PUSH
8970: LD_INT 29
8972: ST_TO_ADDR
// tech_time := tech_taurad ;
8973: LD_ADDR_VAR 0 13
8977: PUSH
8978: LD_INT 28
8980: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
8981: LD_ADDR_VAR 0 11
8985: PUSH
8986: LD_VAR 0 1
8990: PPUSH
8991: CALL_OW 310
8995: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
8996: LD_VAR 0 11
9000: PPUSH
9001: CALL_OW 247
9005: PUSH
9006: LD_INT 2
9008: EQUAL
9009: IFFALSE 9013
// exit ;
9011: GO 9523
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9013: LD_ADDR_VAR 0 8
9017: PUSH
9018: LD_INT 81
9020: PUSH
9021: LD_VAR 0 9
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 3
9032: PUSH
9033: LD_INT 21
9035: PUSH
9036: LD_INT 3
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 69
9055: ST_TO_ADDR
// if not tmp then
9056: LD_VAR 0 8
9060: NOT
9061: IFFALSE 9065
// exit ;
9063: GO 9523
// if in_unit then
9065: LD_VAR 0 11
9069: IFFALSE 9093
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9071: LD_ADDR_VAR 0 10
9075: PUSH
9076: LD_VAR 0 8
9080: PPUSH
9081: LD_VAR 0 11
9085: PPUSH
9086: CALL_OW 74
9090: ST_TO_ADDR
9091: GO 9113
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9093: LD_ADDR_VAR 0 10
9097: PUSH
9098: LD_VAR 0 8
9102: PPUSH
9103: LD_VAR 0 1
9107: PPUSH
9108: CALL_OW 74
9112: ST_TO_ADDR
// if not enemy then
9113: LD_VAR 0 10
9117: NOT
9118: IFFALSE 9122
// exit ;
9120: GO 9523
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9122: LD_VAR 0 11
9126: PUSH
9127: LD_VAR 0 11
9131: PPUSH
9132: LD_VAR 0 10
9136: PPUSH
9137: CALL_OW 296
9141: PUSH
9142: LD_INT 13
9144: GREATER
9145: AND
9146: PUSH
9147: LD_VAR 0 1
9151: PPUSH
9152: LD_VAR 0 10
9156: PPUSH
9157: CALL_OW 296
9161: PUSH
9162: LD_INT 12
9164: GREATER
9165: OR
9166: IFFALSE 9170
// exit ;
9168: GO 9523
// missile := [ 1 ] ;
9170: LD_ADDR_VAR 0 14
9174: PUSH
9175: LD_INT 1
9177: PUSH
9178: EMPTY
9179: LIST
9180: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9181: LD_VAR 0 9
9185: PPUSH
9186: LD_VAR 0 12
9190: PPUSH
9191: CALL_OW 325
9195: IFFALSE 9224
// missile := Replace ( missile , missile + 1 , 2 ) ;
9197: LD_ADDR_VAR 0 14
9201: PUSH
9202: LD_VAR 0 14
9206: PPUSH
9207: LD_VAR 0 14
9211: PUSH
9212: LD_INT 1
9214: PLUS
9215: PPUSH
9216: LD_INT 2
9218: PPUSH
9219: CALL_OW 1
9223: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9224: LD_VAR 0 9
9228: PPUSH
9229: LD_VAR 0 13
9233: PPUSH
9234: CALL_OW 325
9238: PUSH
9239: LD_VAR 0 10
9243: PPUSH
9244: CALL_OW 255
9248: PPUSH
9249: LD_VAR 0 13
9253: PPUSH
9254: CALL_OW 325
9258: NOT
9259: AND
9260: IFFALSE 9289
// missile := Replace ( missile , missile + 1 , 3 ) ;
9262: LD_ADDR_VAR 0 14
9266: PUSH
9267: LD_VAR 0 14
9271: PPUSH
9272: LD_VAR 0 14
9276: PUSH
9277: LD_INT 1
9279: PLUS
9280: PPUSH
9281: LD_INT 3
9283: PPUSH
9284: CALL_OW 1
9288: ST_TO_ADDR
// if missile < 2 then
9289: LD_VAR 0 14
9293: PUSH
9294: LD_INT 2
9296: LESS
9297: IFFALSE 9301
// exit ;
9299: GO 9523
// x := GetX ( enemy ) ;
9301: LD_ADDR_VAR 0 4
9305: PUSH
9306: LD_VAR 0 10
9310: PPUSH
9311: CALL_OW 250
9315: ST_TO_ADDR
// y := GetY ( enemy ) ;
9316: LD_ADDR_VAR 0 5
9320: PUSH
9321: LD_VAR 0 10
9325: PPUSH
9326: CALL_OW 251
9330: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9331: LD_ADDR_VAR 0 6
9335: PUSH
9336: LD_VAR 0 4
9340: PUSH
9341: LD_INT 1
9343: NEG
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 12
9352: PLUS
9353: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9354: LD_ADDR_VAR 0 7
9358: PUSH
9359: LD_VAR 0 5
9363: PUSH
9364: LD_INT 1
9366: NEG
9367: PPUSH
9368: LD_INT 1
9370: PPUSH
9371: CALL_OW 12
9375: PLUS
9376: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9377: LD_VAR 0 6
9381: PPUSH
9382: LD_VAR 0 7
9386: PPUSH
9387: CALL_OW 488
9391: NOT
9392: IFFALSE 9414
// begin _x := x ;
9394: LD_ADDR_VAR 0 6
9398: PUSH
9399: LD_VAR 0 4
9403: ST_TO_ADDR
// _y := y ;
9404: LD_ADDR_VAR 0 7
9408: PUSH
9409: LD_VAR 0 5
9413: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9414: LD_ADDR_VAR 0 3
9418: PUSH
9419: LD_INT 1
9421: PPUSH
9422: LD_VAR 0 14
9426: PPUSH
9427: CALL_OW 12
9431: ST_TO_ADDR
// case i of 1 :
9432: LD_VAR 0 3
9436: PUSH
9437: LD_INT 1
9439: DOUBLE
9440: EQUAL
9441: IFTRUE 9445
9443: GO 9462
9445: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9446: LD_VAR 0 1
9450: PPUSH
9451: LD_VAR 0 10
9455: PPUSH
9456: CALL_OW 115
9460: GO 9523
9462: LD_INT 2
9464: DOUBLE
9465: EQUAL
9466: IFTRUE 9470
9468: GO 9492
9470: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9471: LD_VAR 0 1
9475: PPUSH
9476: LD_VAR 0 6
9480: PPUSH
9481: LD_VAR 0 7
9485: PPUSH
9486: CALL_OW 153
9490: GO 9523
9492: LD_INT 3
9494: DOUBLE
9495: EQUAL
9496: IFTRUE 9500
9498: GO 9522
9500: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9501: LD_VAR 0 1
9505: PPUSH
9506: LD_VAR 0 6
9510: PPUSH
9511: LD_VAR 0 7
9515: PPUSH
9516: CALL_OW 154
9520: GO 9523
9522: POP
// end ;
9523: LD_VAR 0 2
9527: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
// if not unit or not building then
9536: LD_VAR 0 1
9540: NOT
9541: PUSH
9542: LD_VAR 0 2
9546: NOT
9547: OR
9548: IFFALSE 9552
// exit ;
9550: GO 9710
// x := GetX ( building ) ;
9552: LD_ADDR_VAR 0 5
9556: PUSH
9557: LD_VAR 0 2
9561: PPUSH
9562: CALL_OW 250
9566: ST_TO_ADDR
// y := GetY ( building ) ;
9567: LD_ADDR_VAR 0 6
9571: PUSH
9572: LD_VAR 0 2
9576: PPUSH
9577: CALL_OW 251
9581: ST_TO_ADDR
// for i = 0 to 5 do
9582: LD_ADDR_VAR 0 4
9586: PUSH
9587: DOUBLE
9588: LD_INT 0
9590: DEC
9591: ST_TO_ADDR
9592: LD_INT 5
9594: PUSH
9595: FOR_TO
9596: IFFALSE 9708
// begin _x := ShiftX ( x , i , 3 ) ;
9598: LD_ADDR_VAR 0 7
9602: PUSH
9603: LD_VAR 0 5
9607: PPUSH
9608: LD_VAR 0 4
9612: PPUSH
9613: LD_INT 3
9615: PPUSH
9616: CALL_OW 272
9620: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9621: LD_ADDR_VAR 0 8
9625: PUSH
9626: LD_VAR 0 6
9630: PPUSH
9631: LD_VAR 0 4
9635: PPUSH
9636: LD_INT 3
9638: PPUSH
9639: CALL_OW 273
9643: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9644: LD_VAR 0 7
9648: PPUSH
9649: LD_VAR 0 8
9653: PPUSH
9654: CALL_OW 488
9658: NOT
9659: IFFALSE 9663
// continue ;
9661: GO 9595
// if HexInfo ( _x , _y ) = 0 then
9663: LD_VAR 0 7
9667: PPUSH
9668: LD_VAR 0 8
9672: PPUSH
9673: CALL_OW 428
9677: PUSH
9678: LD_INT 0
9680: EQUAL
9681: IFFALSE 9706
// begin ComMoveXY ( unit , _x , _y ) ;
9683: LD_VAR 0 1
9687: PPUSH
9688: LD_VAR 0 7
9692: PPUSH
9693: LD_VAR 0 8
9697: PPUSH
9698: CALL_OW 111
// exit ;
9702: POP
9703: POP
9704: GO 9710
// end ; end ;
9706: GO 9595
9708: POP
9709: POP
// end ;
9710: LD_VAR 0 3
9714: RET
// export function ScanBase ( side , base_area ) ; begin
9715: LD_INT 0
9717: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9718: LD_ADDR_VAR 0 3
9722: PUSH
9723: LD_VAR 0 2
9727: PPUSH
9728: LD_INT 81
9730: PUSH
9731: LD_VAR 0 1
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: PPUSH
9740: CALL_OW 70
9744: ST_TO_ADDR
// end ;
9745: LD_VAR 0 3
9749: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9750: LD_INT 0
9752: PPUSH
9753: PPUSH
9754: PPUSH
9755: PPUSH
// result := false ;
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: LD_INT 0
9763: ST_TO_ADDR
// side := GetSide ( unit ) ;
9764: LD_ADDR_VAR 0 3
9768: PUSH
9769: LD_VAR 0 1
9773: PPUSH
9774: CALL_OW 255
9778: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9779: LD_ADDR_VAR 0 4
9783: PUSH
9784: LD_VAR 0 1
9788: PPUSH
9789: CALL_OW 248
9793: ST_TO_ADDR
// case nat of 1 :
9794: LD_VAR 0 4
9798: PUSH
9799: LD_INT 1
9801: DOUBLE
9802: EQUAL
9803: IFTRUE 9807
9805: GO 9818
9807: POP
// tech := tech_lassight ; 2 :
9808: LD_ADDR_VAR 0 5
9812: PUSH
9813: LD_INT 12
9815: ST_TO_ADDR
9816: GO 9857
9818: LD_INT 2
9820: DOUBLE
9821: EQUAL
9822: IFTRUE 9826
9824: GO 9837
9826: POP
// tech := tech_mortar ; 3 :
9827: LD_ADDR_VAR 0 5
9831: PUSH
9832: LD_INT 41
9834: ST_TO_ADDR
9835: GO 9857
9837: LD_INT 3
9839: DOUBLE
9840: EQUAL
9841: IFTRUE 9845
9843: GO 9856
9845: POP
// tech := tech_bazooka ; end ;
9846: LD_ADDR_VAR 0 5
9850: PUSH
9851: LD_INT 44
9853: ST_TO_ADDR
9854: GO 9857
9856: POP
// if Researched ( side , tech ) then
9857: LD_VAR 0 3
9861: PPUSH
9862: LD_VAR 0 5
9866: PPUSH
9867: CALL_OW 325
9871: IFFALSE 9898
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9873: LD_ADDR_VAR 0 2
9877: PUSH
9878: LD_INT 5
9880: PUSH
9881: LD_INT 8
9883: PUSH
9884: LD_INT 9
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: PUSH
9892: LD_VAR 0 4
9896: ARRAY
9897: ST_TO_ADDR
// end ;
9898: LD_VAR 0 2
9902: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
9903: LD_INT 0
9905: PPUSH
9906: PPUSH
9907: PPUSH
// if not mines then
9908: LD_VAR 0 2
9912: NOT
9913: IFFALSE 9917
// exit ;
9915: GO 10061
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9917: LD_ADDR_VAR 0 5
9921: PUSH
9922: LD_INT 81
9924: PUSH
9925: LD_VAR 0 1
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 3
9936: PUSH
9937: LD_INT 21
9939: PUSH
9940: LD_INT 3
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PPUSH
9955: CALL_OW 69
9959: ST_TO_ADDR
// for i in mines do
9960: LD_ADDR_VAR 0 4
9964: PUSH
9965: LD_VAR 0 2
9969: PUSH
9970: FOR_IN
9971: IFFALSE 10059
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
9973: LD_VAR 0 4
9977: PUSH
9978: LD_INT 1
9980: ARRAY
9981: PPUSH
9982: LD_VAR 0 4
9986: PUSH
9987: LD_INT 2
9989: ARRAY
9990: PPUSH
9991: CALL_OW 458
9995: NOT
9996: IFFALSE 10000
// continue ;
9998: GO 9970
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10000: LD_VAR 0 4
10004: PUSH
10005: LD_INT 1
10007: ARRAY
10008: PPUSH
10009: LD_VAR 0 4
10013: PUSH
10014: LD_INT 2
10016: ARRAY
10017: PPUSH
10018: CALL_OW 428
10022: PUSH
10023: LD_VAR 0 5
10027: IN
10028: IFFALSE 10057
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10030: LD_VAR 0 4
10034: PUSH
10035: LD_INT 1
10037: ARRAY
10038: PPUSH
10039: LD_VAR 0 4
10043: PUSH
10044: LD_INT 2
10046: ARRAY
10047: PPUSH
10048: LD_VAR 0 1
10052: PPUSH
10053: CALL_OW 456
// end ;
10057: GO 9970
10059: POP
10060: POP
// end ;
10061: LD_VAR 0 3
10065: RET
// export function Count ( array ) ; var i ; begin
10066: LD_INT 0
10068: PPUSH
10069: PPUSH
// result := 0 ;
10070: LD_ADDR_VAR 0 2
10074: PUSH
10075: LD_INT 0
10077: ST_TO_ADDR
// for i in array do
10078: LD_ADDR_VAR 0 3
10082: PUSH
10083: LD_VAR 0 1
10087: PUSH
10088: FOR_IN
10089: IFFALSE 10113
// if i then
10091: LD_VAR 0 3
10095: IFFALSE 10111
// result := result + 1 ;
10097: LD_ADDR_VAR 0 2
10101: PUSH
10102: LD_VAR 0 2
10106: PUSH
10107: LD_INT 1
10109: PLUS
10110: ST_TO_ADDR
10111: GO 10088
10113: POP
10114: POP
// end ;
10115: LD_VAR 0 2
10119: RET
// export function IsEmpty ( building ) ; begin
10120: LD_INT 0
10122: PPUSH
// if not building then
10123: LD_VAR 0 1
10127: NOT
10128: IFFALSE 10132
// exit ;
10130: GO 10175
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10132: LD_ADDR_VAR 0 2
10136: PUSH
10137: LD_VAR 0 1
10141: PUSH
10142: LD_INT 22
10144: PUSH
10145: LD_VAR 0 1
10149: PPUSH
10150: CALL_OW 255
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 58
10161: PUSH
10162: EMPTY
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PPUSH
10169: CALL_OW 69
10173: IN
10174: ST_TO_ADDR
// end ;
10175: LD_VAR 0 2
10179: RET
// export function IsNotFull ( building ) ; var places ; begin
10180: LD_INT 0
10182: PPUSH
10183: PPUSH
// if not building then
10184: LD_VAR 0 1
10188: NOT
10189: IFFALSE 10193
// exit ;
10191: GO 10364
// result := false ;
10193: LD_ADDR_VAR 0 2
10197: PUSH
10198: LD_INT 0
10200: ST_TO_ADDR
// places := 0 ;
10201: LD_ADDR_VAR 0 3
10205: PUSH
10206: LD_INT 0
10208: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
10209: LD_VAR 0 1
10213: PPUSH
10214: CALL_OW 266
10218: PUSH
10219: LD_INT 0
10221: DOUBLE
10222: EQUAL
10223: IFTRUE 10281
10225: LD_INT 1
10227: DOUBLE
10228: EQUAL
10229: IFTRUE 10281
10231: LD_INT 6
10233: DOUBLE
10234: EQUAL
10235: IFTRUE 10281
10237: LD_INT 7
10239: DOUBLE
10240: EQUAL
10241: IFTRUE 10281
10243: LD_INT 8
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10281
10249: LD_INT 4
10251: DOUBLE
10252: EQUAL
10253: IFTRUE 10281
10255: LD_INT 5
10257: DOUBLE
10258: EQUAL
10259: IFTRUE 10281
10261: LD_INT 2
10263: DOUBLE
10264: EQUAL
10265: IFTRUE 10281
10267: LD_INT 3
10269: DOUBLE
10270: EQUAL
10271: IFTRUE 10281
10273: LD_INT 35
10275: DOUBLE
10276: EQUAL
10277: IFTRUE 10281
10279: GO 10292
10281: POP
// places := 6 ; b_bunker , b_breastwork :
10282: LD_ADDR_VAR 0 3
10286: PUSH
10287: LD_INT 6
10289: ST_TO_ADDR
10290: GO 10337
10292: LD_INT 32
10294: DOUBLE
10295: EQUAL
10296: IFTRUE 10306
10298: LD_INT 31
10300: DOUBLE
10301: EQUAL
10302: IFTRUE 10306
10304: GO 10317
10306: POP
// places := 1 ; b_control_tower :
10307: LD_ADDR_VAR 0 3
10311: PUSH
10312: LD_INT 1
10314: ST_TO_ADDR
10315: GO 10337
10317: LD_INT 36
10319: DOUBLE
10320: EQUAL
10321: IFTRUE 10325
10323: GO 10336
10325: POP
// places := 3 ; end ;
10326: LD_ADDR_VAR 0 3
10330: PUSH
10331: LD_INT 3
10333: ST_TO_ADDR
10334: GO 10337
10336: POP
// if places then
10337: LD_VAR 0 3
10341: IFFALSE 10364
// result := UnitsInside ( building ) < places ;
10343: LD_ADDR_VAR 0 2
10347: PUSH
10348: LD_VAR 0 1
10352: PPUSH
10353: CALL_OW 313
10357: PUSH
10358: LD_VAR 0 3
10362: LESS
10363: ST_TO_ADDR
// end ;
10364: LD_VAR 0 2
10368: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10369: LD_INT 0
10371: PPUSH
10372: PPUSH
10373: PPUSH
10374: PPUSH
// tmp := [ ] ;
10375: LD_ADDR_VAR 0 3
10379: PUSH
10380: EMPTY
10381: ST_TO_ADDR
// list := [ ] ;
10382: LD_ADDR_VAR 0 5
10386: PUSH
10387: EMPTY
10388: ST_TO_ADDR
// for i = 16 to 25 do
10389: LD_ADDR_VAR 0 4
10393: PUSH
10394: DOUBLE
10395: LD_INT 16
10397: DEC
10398: ST_TO_ADDR
10399: LD_INT 25
10401: PUSH
10402: FOR_TO
10403: IFFALSE 10476
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10405: LD_ADDR_VAR 0 3
10409: PUSH
10410: LD_VAR 0 3
10414: PUSH
10415: LD_INT 22
10417: PUSH
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 255
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 91
10434: PUSH
10435: LD_VAR 0 1
10439: PUSH
10440: LD_INT 6
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 30
10450: PUSH
10451: LD_VAR 0 4
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: LIST
10464: PUSH
10465: EMPTY
10466: LIST
10467: PPUSH
10468: CALL_OW 69
10472: ADD
10473: ST_TO_ADDR
10474: GO 10402
10476: POP
10477: POP
// for i = 1 to tmp do
10478: LD_ADDR_VAR 0 4
10482: PUSH
10483: DOUBLE
10484: LD_INT 1
10486: DEC
10487: ST_TO_ADDR
10488: LD_VAR 0 3
10492: PUSH
10493: FOR_TO
10494: IFFALSE 10582
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10496: LD_ADDR_VAR 0 5
10500: PUSH
10501: LD_VAR 0 5
10505: PUSH
10506: LD_VAR 0 3
10510: PUSH
10511: LD_VAR 0 4
10515: ARRAY
10516: PPUSH
10517: CALL_OW 266
10521: PUSH
10522: LD_VAR 0 3
10526: PUSH
10527: LD_VAR 0 4
10531: ARRAY
10532: PPUSH
10533: CALL_OW 250
10537: PUSH
10538: LD_VAR 0 3
10542: PUSH
10543: LD_VAR 0 4
10547: ARRAY
10548: PPUSH
10549: CALL_OW 251
10553: PUSH
10554: LD_VAR 0 3
10558: PUSH
10559: LD_VAR 0 4
10563: ARRAY
10564: PPUSH
10565: CALL_OW 254
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: PUSH
10576: EMPTY
10577: LIST
10578: ADD
10579: ST_TO_ADDR
10580: GO 10493
10582: POP
10583: POP
// result := list ;
10584: LD_ADDR_VAR 0 2
10588: PUSH
10589: LD_VAR 0 5
10593: ST_TO_ADDR
// end ;
10594: LD_VAR 0 2
10598: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10599: LD_INT 0
10601: PPUSH
10602: PPUSH
10603: PPUSH
10604: PPUSH
10605: PPUSH
10606: PPUSH
10607: PPUSH
// if not factory then
10608: LD_VAR 0 1
10612: NOT
10613: IFFALSE 10617
// exit ;
10615: GO 11210
// if control = control_apeman then
10617: LD_VAR 0 4
10621: PUSH
10622: LD_INT 5
10624: EQUAL
10625: IFFALSE 10734
// begin tmp := UnitsInside ( factory ) ;
10627: LD_ADDR_VAR 0 8
10631: PUSH
10632: LD_VAR 0 1
10636: PPUSH
10637: CALL_OW 313
10641: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10642: LD_VAR 0 8
10646: PPUSH
10647: LD_INT 25
10649: PUSH
10650: LD_INT 12
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PPUSH
10657: CALL_OW 72
10661: NOT
10662: IFFALSE 10672
// control := control_manual ;
10664: LD_ADDR_VAR 0 4
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10672: LD_ADDR_VAR 0 8
10676: PUSH
10677: LD_VAR 0 1
10681: PPUSH
10682: CALL 10369 0 1
10686: ST_TO_ADDR
// if tmp then
10687: LD_VAR 0 8
10691: IFFALSE 10734
// begin for i in tmp do
10693: LD_ADDR_VAR 0 7
10697: PUSH
10698: LD_VAR 0 8
10702: PUSH
10703: FOR_IN
10704: IFFALSE 10732
// if i [ 1 ] = b_ext_radio then
10706: LD_VAR 0 7
10710: PUSH
10711: LD_INT 1
10713: ARRAY
10714: PUSH
10715: LD_INT 22
10717: EQUAL
10718: IFFALSE 10730
// begin control := control_remote ;
10720: LD_ADDR_VAR 0 4
10724: PUSH
10725: LD_INT 2
10727: ST_TO_ADDR
// break ;
10728: GO 10732
// end ;
10730: GO 10703
10732: POP
10733: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10734: LD_VAR 0 1
10738: PPUSH
10739: LD_VAR 0 2
10743: PPUSH
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_VAR 0 4
10753: PPUSH
10754: LD_VAR 0 5
10758: PPUSH
10759: CALL_OW 448
10763: IFFALSE 10798
// begin result := [ chassis , engine , control , weapon ] ;
10765: LD_ADDR_VAR 0 6
10769: PUSH
10770: LD_VAR 0 2
10774: PUSH
10775: LD_VAR 0 3
10779: PUSH
10780: LD_VAR 0 4
10784: PUSH
10785: LD_VAR 0 5
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: ST_TO_ADDR
// exit ;
10796: GO 11210
// end ; _chassis := AvailableChassisList ( factory ) ;
10798: LD_ADDR_VAR 0 9
10802: PUSH
10803: LD_VAR 0 1
10807: PPUSH
10808: CALL_OW 475
10812: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10813: LD_ADDR_VAR 0 11
10817: PUSH
10818: LD_VAR 0 1
10822: PPUSH
10823: CALL_OW 476
10827: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10828: LD_ADDR_VAR 0 12
10832: PUSH
10833: LD_VAR 0 1
10837: PPUSH
10838: CALL_OW 477
10842: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10843: LD_ADDR_VAR 0 10
10847: PUSH
10848: LD_VAR 0 1
10852: PPUSH
10853: CALL_OW 478
10857: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10858: LD_VAR 0 9
10862: NOT
10863: PUSH
10864: LD_VAR 0 11
10868: NOT
10869: OR
10870: PUSH
10871: LD_VAR 0 12
10875: NOT
10876: OR
10877: PUSH
10878: LD_VAR 0 10
10882: NOT
10883: OR
10884: IFFALSE 10919
// begin result := [ chassis , engine , control , weapon ] ;
10886: LD_ADDR_VAR 0 6
10890: PUSH
10891: LD_VAR 0 2
10895: PUSH
10896: LD_VAR 0 3
10900: PUSH
10901: LD_VAR 0 4
10905: PUSH
10906: LD_VAR 0 5
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: ST_TO_ADDR
// exit ;
10917: GO 11210
// end ; if not chassis in _chassis then
10919: LD_VAR 0 2
10923: PUSH
10924: LD_VAR 0 9
10928: IN
10929: NOT
10930: IFFALSE 10956
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10932: LD_ADDR_VAR 0 2
10936: PUSH
10937: LD_VAR 0 9
10941: PUSH
10942: LD_INT 1
10944: PPUSH
10945: LD_VAR 0 9
10949: PPUSH
10950: CALL_OW 12
10954: ARRAY
10955: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10956: LD_VAR 0 2
10960: PPUSH
10961: LD_VAR 0 3
10965: PPUSH
10966: CALL 11215 0 2
10970: NOT
10971: IFFALSE 11030
// repeat engine := _engine [ 1 ] ;
10973: LD_ADDR_VAR 0 3
10977: PUSH
10978: LD_VAR 0 11
10982: PUSH
10983: LD_INT 1
10985: ARRAY
10986: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10987: LD_ADDR_VAR 0 11
10991: PUSH
10992: LD_VAR 0 11
10996: PPUSH
10997: LD_INT 1
10999: PPUSH
11000: CALL_OW 3
11004: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11005: LD_VAR 0 2
11009: PPUSH
11010: LD_VAR 0 3
11014: PPUSH
11015: CALL 11215 0 2
11019: PUSH
11020: LD_VAR 0 11
11024: PUSH
11025: EMPTY
11026: EQUAL
11027: OR
11028: IFFALSE 10973
// if not control in _control then
11030: LD_VAR 0 4
11034: PUSH
11035: LD_VAR 0 12
11039: IN
11040: NOT
11041: IFFALSE 11067
// control := _control [ rand ( 1 , _control ) ] ;
11043: LD_ADDR_VAR 0 4
11047: PUSH
11048: LD_VAR 0 12
11052: PUSH
11053: LD_INT 1
11055: PPUSH
11056: LD_VAR 0 12
11060: PPUSH
11061: CALL_OW 12
11065: ARRAY
11066: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11067: LD_VAR 0 2
11071: PPUSH
11072: LD_VAR 0 5
11076: PPUSH
11077: CALL 11435 0 2
11081: NOT
11082: IFFALSE 11141
// repeat weapon := _weapon [ 1 ] ;
11084: LD_ADDR_VAR 0 5
11088: PUSH
11089: LD_VAR 0 10
11093: PUSH
11094: LD_INT 1
11096: ARRAY
11097: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11098: LD_ADDR_VAR 0 10
11102: PUSH
11103: LD_VAR 0 10
11107: PPUSH
11108: LD_INT 1
11110: PPUSH
11111: CALL_OW 3
11115: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11116: LD_VAR 0 2
11120: PPUSH
11121: LD_VAR 0 5
11125: PPUSH
11126: CALL 11435 0 2
11130: PUSH
11131: LD_VAR 0 10
11135: PUSH
11136: EMPTY
11137: EQUAL
11138: OR
11139: IFFALSE 11084
// result := [ ] ;
11141: LD_ADDR_VAR 0 6
11145: PUSH
11146: EMPTY
11147: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11148: LD_VAR 0 1
11152: PPUSH
11153: LD_VAR 0 2
11157: PPUSH
11158: LD_VAR 0 3
11162: PPUSH
11163: LD_VAR 0 4
11167: PPUSH
11168: LD_VAR 0 5
11172: PPUSH
11173: CALL_OW 448
11177: IFFALSE 11210
// result := [ chassis , engine , control , weapon ] ;
11179: LD_ADDR_VAR 0 6
11183: PUSH
11184: LD_VAR 0 2
11188: PUSH
11189: LD_VAR 0 3
11193: PUSH
11194: LD_VAR 0 4
11198: PUSH
11199: LD_VAR 0 5
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: ST_TO_ADDR
// end ;
11210: LD_VAR 0 6
11214: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11215: LD_INT 0
11217: PPUSH
// if not chassis or not engine then
11218: LD_VAR 0 1
11222: NOT
11223: PUSH
11224: LD_VAR 0 2
11228: NOT
11229: OR
11230: IFFALSE 11234
// exit ;
11232: GO 11430
// case engine of engine_solar :
11234: LD_VAR 0 2
11238: PUSH
11239: LD_INT 2
11241: DOUBLE
11242: EQUAL
11243: IFTRUE 11247
11245: GO 11285
11247: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11248: LD_ADDR_VAR 0 3
11252: PUSH
11253: LD_INT 11
11255: PUSH
11256: LD_INT 12
11258: PUSH
11259: LD_INT 13
11261: PUSH
11262: LD_INT 14
11264: PUSH
11265: LD_INT 1
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: LD_INT 3
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
11283: GO 11414
11285: LD_INT 1
11287: DOUBLE
11288: EQUAL
11289: IFTRUE 11293
11291: GO 11355
11293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11294: LD_ADDR_VAR 0 3
11298: PUSH
11299: LD_INT 11
11301: PUSH
11302: LD_INT 12
11304: PUSH
11305: LD_INT 13
11307: PUSH
11308: LD_INT 14
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: LD_INT 2
11316: PUSH
11317: LD_INT 3
11319: PUSH
11320: LD_INT 4
11322: PUSH
11323: LD_INT 5
11325: PUSH
11326: LD_INT 21
11328: PUSH
11329: LD_INT 23
11331: PUSH
11332: LD_INT 22
11334: PUSH
11335: LD_INT 24
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: ST_TO_ADDR
11353: GO 11414
11355: LD_INT 3
11357: DOUBLE
11358: EQUAL
11359: IFTRUE 11363
11361: GO 11413
11363: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11364: LD_ADDR_VAR 0 3
11368: PUSH
11369: LD_INT 13
11371: PUSH
11372: LD_INT 14
11374: PUSH
11375: LD_INT 2
11377: PUSH
11378: LD_INT 3
11380: PUSH
11381: LD_INT 4
11383: PUSH
11384: LD_INT 5
11386: PUSH
11387: LD_INT 21
11389: PUSH
11390: LD_INT 22
11392: PUSH
11393: LD_INT 23
11395: PUSH
11396: LD_INT 24
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: ST_TO_ADDR
11411: GO 11414
11413: POP
// result := ( chassis in result ) ;
11414: LD_ADDR_VAR 0 3
11418: PUSH
11419: LD_VAR 0 1
11423: PUSH
11424: LD_VAR 0 3
11428: IN
11429: ST_TO_ADDR
// end ;
11430: LD_VAR 0 3
11434: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11435: LD_INT 0
11437: PPUSH
// if not chassis or not weapon then
11438: LD_VAR 0 1
11442: NOT
11443: PUSH
11444: LD_VAR 0 2
11448: NOT
11449: OR
11450: IFFALSE 11454
// exit ;
11452: GO 12516
// case weapon of us_machine_gun :
11454: LD_VAR 0 2
11458: PUSH
11459: LD_INT 2
11461: DOUBLE
11462: EQUAL
11463: IFTRUE 11467
11465: GO 11497
11467: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11468: LD_ADDR_VAR 0 3
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: LD_INT 2
11478: PUSH
11479: LD_INT 3
11481: PUSH
11482: LD_INT 4
11484: PUSH
11485: LD_INT 5
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: ST_TO_ADDR
11495: GO 12500
11497: LD_INT 3
11499: DOUBLE
11500: EQUAL
11501: IFTRUE 11505
11503: GO 11535
11505: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11506: LD_ADDR_VAR 0 3
11510: PUSH
11511: LD_INT 1
11513: PUSH
11514: LD_INT 2
11516: PUSH
11517: LD_INT 3
11519: PUSH
11520: LD_INT 4
11522: PUSH
11523: LD_INT 5
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: ST_TO_ADDR
11533: GO 12500
11535: LD_INT 11
11537: DOUBLE
11538: EQUAL
11539: IFTRUE 11543
11541: GO 11573
11543: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11544: LD_ADDR_VAR 0 3
11548: PUSH
11549: LD_INT 1
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 3
11557: PUSH
11558: LD_INT 4
11560: PUSH
11561: LD_INT 5
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: ST_TO_ADDR
11571: GO 12500
11573: LD_INT 4
11575: DOUBLE
11576: EQUAL
11577: IFTRUE 11581
11579: GO 11607
11581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11582: LD_ADDR_VAR 0 3
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: LD_INT 3
11592: PUSH
11593: LD_INT 4
11595: PUSH
11596: LD_INT 5
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: ST_TO_ADDR
11605: GO 12500
11607: LD_INT 5
11609: DOUBLE
11610: EQUAL
11611: IFTRUE 11615
11613: GO 11641
11615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11616: LD_ADDR_VAR 0 3
11620: PUSH
11621: LD_INT 2
11623: PUSH
11624: LD_INT 3
11626: PUSH
11627: LD_INT 4
11629: PUSH
11630: LD_INT 5
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: ST_TO_ADDR
11639: GO 12500
11641: LD_INT 9
11643: DOUBLE
11644: EQUAL
11645: IFTRUE 11649
11647: GO 11675
11649: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11650: LD_ADDR_VAR 0 3
11654: PUSH
11655: LD_INT 2
11657: PUSH
11658: LD_INT 3
11660: PUSH
11661: LD_INT 4
11663: PUSH
11664: LD_INT 5
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: ST_TO_ADDR
11673: GO 12500
11675: LD_INT 7
11677: DOUBLE
11678: EQUAL
11679: IFTRUE 11683
11681: GO 11709
11683: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11684: LD_ADDR_VAR 0 3
11688: PUSH
11689: LD_INT 2
11691: PUSH
11692: LD_INT 3
11694: PUSH
11695: LD_INT 4
11697: PUSH
11698: LD_INT 5
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: ST_TO_ADDR
11707: GO 12500
11709: LD_INT 12
11711: DOUBLE
11712: EQUAL
11713: IFTRUE 11717
11715: GO 11743
11717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11718: LD_ADDR_VAR 0 3
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: LD_INT 3
11728: PUSH
11729: LD_INT 4
11731: PUSH
11732: LD_INT 5
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: ST_TO_ADDR
11741: GO 12500
11743: LD_INT 13
11745: DOUBLE
11746: EQUAL
11747: IFTRUE 11751
11749: GO 11777
11751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11752: LD_ADDR_VAR 0 3
11756: PUSH
11757: LD_INT 2
11759: PUSH
11760: LD_INT 3
11762: PUSH
11763: LD_INT 4
11765: PUSH
11766: LD_INT 5
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: ST_TO_ADDR
11775: GO 12500
11777: LD_INT 14
11779: DOUBLE
11780: EQUAL
11781: IFTRUE 11785
11783: GO 11803
11785: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11786: LD_ADDR_VAR 0 3
11790: PUSH
11791: LD_INT 4
11793: PUSH
11794: LD_INT 5
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: ST_TO_ADDR
11801: GO 12500
11803: LD_INT 6
11805: DOUBLE
11806: EQUAL
11807: IFTRUE 11811
11809: GO 11829
11811: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11812: LD_ADDR_VAR 0 3
11816: PUSH
11817: LD_INT 4
11819: PUSH
11820: LD_INT 5
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: ST_TO_ADDR
11827: GO 12500
11829: LD_INT 10
11831: DOUBLE
11832: EQUAL
11833: IFTRUE 11837
11835: GO 11855
11837: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11838: LD_ADDR_VAR 0 3
11842: PUSH
11843: LD_INT 4
11845: PUSH
11846: LD_INT 5
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: ST_TO_ADDR
11853: GO 12500
11855: LD_INT 22
11857: DOUBLE
11858: EQUAL
11859: IFTRUE 11863
11861: GO 11889
11863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11864: LD_ADDR_VAR 0 3
11868: PUSH
11869: LD_INT 11
11871: PUSH
11872: LD_INT 12
11874: PUSH
11875: LD_INT 13
11877: PUSH
11878: LD_INT 14
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: ST_TO_ADDR
11887: GO 12500
11889: LD_INT 23
11891: DOUBLE
11892: EQUAL
11893: IFTRUE 11897
11895: GO 11923
11897: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11898: LD_ADDR_VAR 0 3
11902: PUSH
11903: LD_INT 11
11905: PUSH
11906: LD_INT 12
11908: PUSH
11909: LD_INT 13
11911: PUSH
11912: LD_INT 14
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: ST_TO_ADDR
11921: GO 12500
11923: LD_INT 24
11925: DOUBLE
11926: EQUAL
11927: IFTRUE 11931
11929: GO 11957
11931: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11932: LD_ADDR_VAR 0 3
11936: PUSH
11937: LD_INT 11
11939: PUSH
11940: LD_INT 12
11942: PUSH
11943: LD_INT 13
11945: PUSH
11946: LD_INT 14
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: ST_TO_ADDR
11955: GO 12500
11957: LD_INT 30
11959: DOUBLE
11960: EQUAL
11961: IFTRUE 11965
11963: GO 11991
11965: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11966: LD_ADDR_VAR 0 3
11970: PUSH
11971: LD_INT 11
11973: PUSH
11974: LD_INT 12
11976: PUSH
11977: LD_INT 13
11979: PUSH
11980: LD_INT 14
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: ST_TO_ADDR
11989: GO 12500
11991: LD_INT 25
11993: DOUBLE
11994: EQUAL
11995: IFTRUE 11999
11997: GO 12017
11999: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12000: LD_ADDR_VAR 0 3
12004: PUSH
12005: LD_INT 13
12007: PUSH
12008: LD_INT 14
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: ST_TO_ADDR
12015: GO 12500
12017: LD_INT 27
12019: DOUBLE
12020: EQUAL
12021: IFTRUE 12025
12023: GO 12043
12025: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12026: LD_ADDR_VAR 0 3
12030: PUSH
12031: LD_INT 13
12033: PUSH
12034: LD_INT 14
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: ST_TO_ADDR
12041: GO 12500
12043: LD_EXP 44
12047: DOUBLE
12048: EQUAL
12049: IFTRUE 12053
12051: GO 12079
12053: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12054: LD_ADDR_VAR 0 3
12058: PUSH
12059: LD_INT 11
12061: PUSH
12062: LD_INT 12
12064: PUSH
12065: LD_INT 13
12067: PUSH
12068: LD_INT 14
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: ST_TO_ADDR
12077: GO 12500
12079: LD_INT 28
12081: DOUBLE
12082: EQUAL
12083: IFTRUE 12087
12085: GO 12105
12087: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12088: LD_ADDR_VAR 0 3
12092: PUSH
12093: LD_INT 13
12095: PUSH
12096: LD_INT 14
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: ST_TO_ADDR
12103: GO 12500
12105: LD_INT 29
12107: DOUBLE
12108: EQUAL
12109: IFTRUE 12113
12111: GO 12131
12113: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: LD_INT 13
12121: PUSH
12122: LD_INT 14
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: ST_TO_ADDR
12129: GO 12500
12131: LD_INT 31
12133: DOUBLE
12134: EQUAL
12135: IFTRUE 12139
12137: GO 12157
12139: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12140: LD_ADDR_VAR 0 3
12144: PUSH
12145: LD_INT 13
12147: PUSH
12148: LD_INT 14
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: ST_TO_ADDR
12155: GO 12500
12157: LD_INT 26
12159: DOUBLE
12160: EQUAL
12161: IFTRUE 12165
12163: GO 12183
12165: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12166: LD_ADDR_VAR 0 3
12170: PUSH
12171: LD_INT 13
12173: PUSH
12174: LD_INT 14
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: ST_TO_ADDR
12181: GO 12500
12183: LD_INT 42
12185: DOUBLE
12186: EQUAL
12187: IFTRUE 12191
12189: GO 12217
12191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12192: LD_ADDR_VAR 0 3
12196: PUSH
12197: LD_INT 21
12199: PUSH
12200: LD_INT 22
12202: PUSH
12203: LD_INT 23
12205: PUSH
12206: LD_INT 24
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: ST_TO_ADDR
12215: GO 12500
12217: LD_INT 43
12219: DOUBLE
12220: EQUAL
12221: IFTRUE 12225
12223: GO 12251
12225: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12226: LD_ADDR_VAR 0 3
12230: PUSH
12231: LD_INT 21
12233: PUSH
12234: LD_INT 22
12236: PUSH
12237: LD_INT 23
12239: PUSH
12240: LD_INT 24
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: ST_TO_ADDR
12249: GO 12500
12251: LD_INT 44
12253: DOUBLE
12254: EQUAL
12255: IFTRUE 12259
12257: GO 12285
12259: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 21
12267: PUSH
12268: LD_INT 22
12270: PUSH
12271: LD_INT 23
12273: PUSH
12274: LD_INT 24
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: ST_TO_ADDR
12283: GO 12500
12285: LD_INT 45
12287: DOUBLE
12288: EQUAL
12289: IFTRUE 12293
12291: GO 12319
12293: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12294: LD_ADDR_VAR 0 3
12298: PUSH
12299: LD_INT 21
12301: PUSH
12302: LD_INT 22
12304: PUSH
12305: LD_INT 23
12307: PUSH
12308: LD_INT 24
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: ST_TO_ADDR
12317: GO 12500
12319: LD_INT 49
12321: DOUBLE
12322: EQUAL
12323: IFTRUE 12327
12325: GO 12353
12327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12328: LD_ADDR_VAR 0 3
12332: PUSH
12333: LD_INT 21
12335: PUSH
12336: LD_INT 22
12338: PUSH
12339: LD_INT 23
12341: PUSH
12342: LD_INT 24
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: ST_TO_ADDR
12351: GO 12500
12353: LD_INT 51
12355: DOUBLE
12356: EQUAL
12357: IFTRUE 12361
12359: GO 12387
12361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12362: LD_ADDR_VAR 0 3
12366: PUSH
12367: LD_INT 21
12369: PUSH
12370: LD_INT 22
12372: PUSH
12373: LD_INT 23
12375: PUSH
12376: LD_INT 24
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: ST_TO_ADDR
12385: GO 12500
12387: LD_INT 52
12389: DOUBLE
12390: EQUAL
12391: IFTRUE 12395
12393: GO 12421
12395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12396: LD_ADDR_VAR 0 3
12400: PUSH
12401: LD_INT 21
12403: PUSH
12404: LD_INT 22
12406: PUSH
12407: LD_INT 23
12409: PUSH
12410: LD_INT 24
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: ST_TO_ADDR
12419: GO 12500
12421: LD_INT 53
12423: DOUBLE
12424: EQUAL
12425: IFTRUE 12429
12427: GO 12447
12429: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12430: LD_ADDR_VAR 0 3
12434: PUSH
12435: LD_INT 23
12437: PUSH
12438: LD_INT 24
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: ST_TO_ADDR
12445: GO 12500
12447: LD_INT 46
12449: DOUBLE
12450: EQUAL
12451: IFTRUE 12455
12453: GO 12473
12455: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 23
12463: PUSH
12464: LD_INT 24
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: ST_TO_ADDR
12471: GO 12500
12473: LD_INT 47
12475: DOUBLE
12476: EQUAL
12477: IFTRUE 12481
12479: GO 12499
12481: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12482: LD_ADDR_VAR 0 3
12486: PUSH
12487: LD_INT 23
12489: PUSH
12490: LD_INT 24
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: ST_TO_ADDR
12497: GO 12500
12499: POP
// result := ( chassis in result ) ;
12500: LD_ADDR_VAR 0 3
12504: PUSH
12505: LD_VAR 0 1
12509: PUSH
12510: LD_VAR 0 3
12514: IN
12515: ST_TO_ADDR
// end ;
12516: LD_VAR 0 3
12520: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12521: LD_INT 0
12523: PPUSH
12524: PPUSH
12525: PPUSH
12526: PPUSH
12527: PPUSH
12528: PPUSH
12529: PPUSH
// result := array ;
12530: LD_ADDR_VAR 0 5
12534: PUSH
12535: LD_VAR 0 1
12539: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12540: LD_VAR 0 1
12544: NOT
12545: PUSH
12546: LD_VAR 0 2
12550: NOT
12551: OR
12552: PUSH
12553: LD_VAR 0 3
12557: NOT
12558: OR
12559: PUSH
12560: LD_VAR 0 2
12564: PUSH
12565: LD_VAR 0 1
12569: GREATER
12570: OR
12571: PUSH
12572: LD_VAR 0 3
12576: PUSH
12577: LD_VAR 0 1
12581: GREATER
12582: OR
12583: IFFALSE 12587
// exit ;
12585: GO 12883
// if direction then
12587: LD_VAR 0 4
12591: IFFALSE 12655
// begin d := 1 ;
12593: LD_ADDR_VAR 0 9
12597: PUSH
12598: LD_INT 1
12600: ST_TO_ADDR
// if i_from > i_to then
12601: LD_VAR 0 2
12605: PUSH
12606: LD_VAR 0 3
12610: GREATER
12611: IFFALSE 12637
// length := ( array - i_from ) + i_to else
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_VAR 0 1
12622: PUSH
12623: LD_VAR 0 2
12627: MINUS
12628: PUSH
12629: LD_VAR 0 3
12633: PLUS
12634: ST_TO_ADDR
12635: GO 12653
// length := i_to - i_from ;
12637: LD_ADDR_VAR 0 11
12641: PUSH
12642: LD_VAR 0 3
12646: PUSH
12647: LD_VAR 0 2
12651: MINUS
12652: ST_TO_ADDR
// end else
12653: GO 12716
// begin d := - 1 ;
12655: LD_ADDR_VAR 0 9
12659: PUSH
12660: LD_INT 1
12662: NEG
12663: ST_TO_ADDR
// if i_from > i_to then
12664: LD_VAR 0 2
12668: PUSH
12669: LD_VAR 0 3
12673: GREATER
12674: IFFALSE 12694
// length := i_from - i_to else
12676: LD_ADDR_VAR 0 11
12680: PUSH
12681: LD_VAR 0 2
12685: PUSH
12686: LD_VAR 0 3
12690: MINUS
12691: ST_TO_ADDR
12692: GO 12716
// length := ( array - i_to ) + i_from ;
12694: LD_ADDR_VAR 0 11
12698: PUSH
12699: LD_VAR 0 1
12703: PUSH
12704: LD_VAR 0 3
12708: MINUS
12709: PUSH
12710: LD_VAR 0 2
12714: PLUS
12715: ST_TO_ADDR
// end ; if not length then
12716: LD_VAR 0 11
12720: NOT
12721: IFFALSE 12725
// exit ;
12723: GO 12883
// tmp := array ;
12725: LD_ADDR_VAR 0 10
12729: PUSH
12730: LD_VAR 0 1
12734: ST_TO_ADDR
// for i = 1 to length do
12735: LD_ADDR_VAR 0 6
12739: PUSH
12740: DOUBLE
12741: LD_INT 1
12743: DEC
12744: ST_TO_ADDR
12745: LD_VAR 0 11
12749: PUSH
12750: FOR_TO
12751: IFFALSE 12871
// begin for j = 1 to array do
12753: LD_ADDR_VAR 0 7
12757: PUSH
12758: DOUBLE
12759: LD_INT 1
12761: DEC
12762: ST_TO_ADDR
12763: LD_VAR 0 1
12767: PUSH
12768: FOR_TO
12769: IFFALSE 12857
// begin k := j + d ;
12771: LD_ADDR_VAR 0 8
12775: PUSH
12776: LD_VAR 0 7
12780: PUSH
12781: LD_VAR 0 9
12785: PLUS
12786: ST_TO_ADDR
// if k > array then
12787: LD_VAR 0 8
12791: PUSH
12792: LD_VAR 0 1
12796: GREATER
12797: IFFALSE 12807
// k := 1 ;
12799: LD_ADDR_VAR 0 8
12803: PUSH
12804: LD_INT 1
12806: ST_TO_ADDR
// if not k then
12807: LD_VAR 0 8
12811: NOT
12812: IFFALSE 12824
// k := array ;
12814: LD_ADDR_VAR 0 8
12818: PUSH
12819: LD_VAR 0 1
12823: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12824: LD_ADDR_VAR 0 10
12828: PUSH
12829: LD_VAR 0 10
12833: PPUSH
12834: LD_VAR 0 8
12838: PPUSH
12839: LD_VAR 0 1
12843: PUSH
12844: LD_VAR 0 7
12848: ARRAY
12849: PPUSH
12850: CALL_OW 1
12854: ST_TO_ADDR
// end ;
12855: GO 12768
12857: POP
12858: POP
// array := tmp ;
12859: LD_ADDR_VAR 0 1
12863: PUSH
12864: LD_VAR 0 10
12868: ST_TO_ADDR
// end ;
12869: GO 12750
12871: POP
12872: POP
// result := array ;
12873: LD_ADDR_VAR 0 5
12877: PUSH
12878: LD_VAR 0 1
12882: ST_TO_ADDR
// end ;
12883: LD_VAR 0 5
12887: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12888: LD_INT 0
12890: PPUSH
12891: PPUSH
// result := 0 ;
12892: LD_ADDR_VAR 0 3
12896: PUSH
12897: LD_INT 0
12899: ST_TO_ADDR
// if not array or not value in array then
12900: LD_VAR 0 1
12904: NOT
12905: PUSH
12906: LD_VAR 0 2
12910: PUSH
12911: LD_VAR 0 1
12915: IN
12916: NOT
12917: OR
12918: IFFALSE 12922
// exit ;
12920: GO 12976
// for i = 1 to array do
12922: LD_ADDR_VAR 0 4
12926: PUSH
12927: DOUBLE
12928: LD_INT 1
12930: DEC
12931: ST_TO_ADDR
12932: LD_VAR 0 1
12936: PUSH
12937: FOR_TO
12938: IFFALSE 12974
// if value = array [ i ] then
12940: LD_VAR 0 2
12944: PUSH
12945: LD_VAR 0 1
12949: PUSH
12950: LD_VAR 0 4
12954: ARRAY
12955: EQUAL
12956: IFFALSE 12972
// begin result := i ;
12958: LD_ADDR_VAR 0 3
12962: PUSH
12963: LD_VAR 0 4
12967: ST_TO_ADDR
// exit ;
12968: POP
12969: POP
12970: GO 12976
// end ;
12972: GO 12937
12974: POP
12975: POP
// end ;
12976: LD_VAR 0 3
12980: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12981: LD_INT 0
12983: PPUSH
// vc_chassis := chassis ;
12984: LD_ADDR_OWVAR 37
12988: PUSH
12989: LD_VAR 0 1
12993: ST_TO_ADDR
// vc_engine := engine ;
12994: LD_ADDR_OWVAR 39
12998: PUSH
12999: LD_VAR 0 2
13003: ST_TO_ADDR
// vc_control := control ;
13004: LD_ADDR_OWVAR 38
13008: PUSH
13009: LD_VAR 0 3
13013: ST_TO_ADDR
// vc_weapon := weapon ;
13014: LD_ADDR_OWVAR 40
13018: PUSH
13019: LD_VAR 0 4
13023: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13024: LD_ADDR_OWVAR 41
13028: PUSH
13029: LD_VAR 0 5
13033: ST_TO_ADDR
// end ;
13034: LD_VAR 0 6
13038: RET
// export function WantPlant ( unit ) ; var task ; begin
13039: LD_INT 0
13041: PPUSH
13042: PPUSH
// result := false ;
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: LD_INT 0
13050: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13051: LD_ADDR_VAR 0 3
13055: PUSH
13056: LD_VAR 0 1
13060: PPUSH
13061: CALL_OW 437
13065: ST_TO_ADDR
// if task then
13066: LD_VAR 0 3
13070: IFFALSE 13098
// if task [ 1 ] [ 1 ] = p then
13072: LD_VAR 0 3
13076: PUSH
13077: LD_INT 1
13079: ARRAY
13080: PUSH
13081: LD_INT 1
13083: ARRAY
13084: PUSH
13085: LD_STRING p
13087: EQUAL
13088: IFFALSE 13098
// result := true ;
13090: LD_ADDR_VAR 0 2
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// end ;
13098: LD_VAR 0 2
13102: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13103: LD_INT 0
13105: PPUSH
13106: PPUSH
13107: PPUSH
13108: PPUSH
// if pos < 1 then
13109: LD_VAR 0 2
13113: PUSH
13114: LD_INT 1
13116: LESS
13117: IFFALSE 13121
// exit ;
13119: GO 13424
// if pos = 1 then
13121: LD_VAR 0 2
13125: PUSH
13126: LD_INT 1
13128: EQUAL
13129: IFFALSE 13162
// result := Replace ( arr , pos [ 1 ] , value ) else
13131: LD_ADDR_VAR 0 4
13135: PUSH
13136: LD_VAR 0 1
13140: PPUSH
13141: LD_VAR 0 2
13145: PUSH
13146: LD_INT 1
13148: ARRAY
13149: PPUSH
13150: LD_VAR 0 3
13154: PPUSH
13155: CALL_OW 1
13159: ST_TO_ADDR
13160: GO 13424
// begin tmp := arr ;
13162: LD_ADDR_VAR 0 6
13166: PUSH
13167: LD_VAR 0 1
13171: ST_TO_ADDR
// s_arr := [ tmp ] ;
13172: LD_ADDR_VAR 0 7
13176: PUSH
13177: LD_VAR 0 6
13181: PUSH
13182: EMPTY
13183: LIST
13184: ST_TO_ADDR
// for i = 1 to pos - 1 do
13185: LD_ADDR_VAR 0 5
13189: PUSH
13190: DOUBLE
13191: LD_INT 1
13193: DEC
13194: ST_TO_ADDR
13195: LD_VAR 0 2
13199: PUSH
13200: LD_INT 1
13202: MINUS
13203: PUSH
13204: FOR_TO
13205: IFFALSE 13250
// begin tmp := tmp [ pos [ i ] ] ;
13207: LD_ADDR_VAR 0 6
13211: PUSH
13212: LD_VAR 0 6
13216: PUSH
13217: LD_VAR 0 2
13221: PUSH
13222: LD_VAR 0 5
13226: ARRAY
13227: ARRAY
13228: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13229: LD_ADDR_VAR 0 7
13233: PUSH
13234: LD_VAR 0 7
13238: PUSH
13239: LD_VAR 0 6
13243: PUSH
13244: EMPTY
13245: LIST
13246: ADD
13247: ST_TO_ADDR
// end ;
13248: GO 13204
13250: POP
13251: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13252: LD_ADDR_VAR 0 6
13256: PUSH
13257: LD_VAR 0 6
13261: PPUSH
13262: LD_VAR 0 2
13266: PUSH
13267: LD_VAR 0 2
13271: ARRAY
13272: PPUSH
13273: LD_VAR 0 3
13277: PPUSH
13278: CALL_OW 1
13282: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13283: LD_ADDR_VAR 0 7
13287: PUSH
13288: LD_VAR 0 7
13292: PPUSH
13293: LD_VAR 0 7
13297: PPUSH
13298: LD_VAR 0 6
13302: PPUSH
13303: CALL_OW 1
13307: ST_TO_ADDR
// for i = s_arr downto 2 do
13308: LD_ADDR_VAR 0 5
13312: PUSH
13313: DOUBLE
13314: LD_VAR 0 7
13318: INC
13319: ST_TO_ADDR
13320: LD_INT 2
13322: PUSH
13323: FOR_DOWNTO
13324: IFFALSE 13408
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13326: LD_ADDR_VAR 0 6
13330: PUSH
13331: LD_VAR 0 7
13335: PUSH
13336: LD_VAR 0 5
13340: PUSH
13341: LD_INT 1
13343: MINUS
13344: ARRAY
13345: PPUSH
13346: LD_VAR 0 2
13350: PUSH
13351: LD_VAR 0 5
13355: PUSH
13356: LD_INT 1
13358: MINUS
13359: ARRAY
13360: PPUSH
13361: LD_VAR 0 7
13365: PUSH
13366: LD_VAR 0 5
13370: ARRAY
13371: PPUSH
13372: CALL_OW 1
13376: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13377: LD_ADDR_VAR 0 7
13381: PUSH
13382: LD_VAR 0 7
13386: PPUSH
13387: LD_VAR 0 5
13391: PUSH
13392: LD_INT 1
13394: MINUS
13395: PPUSH
13396: LD_VAR 0 6
13400: PPUSH
13401: CALL_OW 1
13405: ST_TO_ADDR
// end ;
13406: GO 13323
13408: POP
13409: POP
// result := s_arr [ 1 ] ;
13410: LD_ADDR_VAR 0 4
13414: PUSH
13415: LD_VAR 0 7
13419: PUSH
13420: LD_INT 1
13422: ARRAY
13423: ST_TO_ADDR
// end ; end ;
13424: LD_VAR 0 4
13428: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13429: LD_INT 0
13431: PPUSH
13432: PPUSH
// if not list then
13433: LD_VAR 0 1
13437: NOT
13438: IFFALSE 13442
// exit ;
13440: GO 13533
// i := list [ pos1 ] ;
13442: LD_ADDR_VAR 0 5
13446: PUSH
13447: LD_VAR 0 1
13451: PUSH
13452: LD_VAR 0 2
13456: ARRAY
13457: ST_TO_ADDR
// if not i then
13458: LD_VAR 0 5
13462: NOT
13463: IFFALSE 13467
// exit ;
13465: GO 13533
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13467: LD_ADDR_VAR 0 1
13471: PUSH
13472: LD_VAR 0 1
13476: PPUSH
13477: LD_VAR 0 2
13481: PPUSH
13482: LD_VAR 0 1
13486: PUSH
13487: LD_VAR 0 3
13491: ARRAY
13492: PPUSH
13493: CALL_OW 1
13497: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13498: LD_ADDR_VAR 0 1
13502: PUSH
13503: LD_VAR 0 1
13507: PPUSH
13508: LD_VAR 0 3
13512: PPUSH
13513: LD_VAR 0 5
13517: PPUSH
13518: CALL_OW 1
13522: ST_TO_ADDR
// result := list ;
13523: LD_ADDR_VAR 0 4
13527: PUSH
13528: LD_VAR 0 1
13532: ST_TO_ADDR
// end ;
13533: LD_VAR 0 4
13537: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13538: LD_INT 0
13540: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13541: LD_ADDR_VAR 0 5
13545: PUSH
13546: LD_VAR 0 1
13550: PPUSH
13551: CALL_OW 250
13555: PPUSH
13556: LD_VAR 0 1
13560: PPUSH
13561: CALL_OW 251
13565: PPUSH
13566: LD_VAR 0 2
13570: PPUSH
13571: LD_VAR 0 3
13575: PPUSH
13576: LD_VAR 0 4
13580: PPUSH
13581: CALL 13591 0 5
13585: ST_TO_ADDR
// end ;
13586: LD_VAR 0 5
13590: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13591: LD_INT 0
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
// if not list then
13597: LD_VAR 0 3
13601: NOT
13602: IFFALSE 13606
// exit ;
13604: GO 13994
// result := [ ] ;
13606: LD_ADDR_VAR 0 6
13610: PUSH
13611: EMPTY
13612: ST_TO_ADDR
// for i in list do
13613: LD_ADDR_VAR 0 7
13617: PUSH
13618: LD_VAR 0 3
13622: PUSH
13623: FOR_IN
13624: IFFALSE 13826
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13626: LD_ADDR_VAR 0 9
13630: PUSH
13631: LD_VAR 0 7
13635: PPUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: LD_VAR 0 2
13645: PPUSH
13646: CALL_OW 297
13650: ST_TO_ADDR
// if not result then
13651: LD_VAR 0 6
13655: NOT
13656: IFFALSE 13682
// result := [ [ i , tmp ] ] else
13658: LD_ADDR_VAR 0 6
13662: PUSH
13663: LD_VAR 0 7
13667: PUSH
13668: LD_VAR 0 9
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: EMPTY
13678: LIST
13679: ST_TO_ADDR
13680: GO 13824
// begin if result [ result ] [ 2 ] < tmp then
13682: LD_VAR 0 6
13686: PUSH
13687: LD_VAR 0 6
13691: ARRAY
13692: PUSH
13693: LD_INT 2
13695: ARRAY
13696: PUSH
13697: LD_VAR 0 9
13701: LESS
13702: IFFALSE 13744
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13704: LD_ADDR_VAR 0 6
13708: PUSH
13709: LD_VAR 0 6
13713: PPUSH
13714: LD_VAR 0 6
13718: PUSH
13719: LD_INT 1
13721: PLUS
13722: PPUSH
13723: LD_VAR 0 7
13727: PUSH
13728: LD_VAR 0 9
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PPUSH
13737: CALL_OW 2
13741: ST_TO_ADDR
13742: GO 13824
// for j = 1 to result do
13744: LD_ADDR_VAR 0 8
13748: PUSH
13749: DOUBLE
13750: LD_INT 1
13752: DEC
13753: ST_TO_ADDR
13754: LD_VAR 0 6
13758: PUSH
13759: FOR_TO
13760: IFFALSE 13822
// begin if tmp < result [ j ] [ 2 ] then
13762: LD_VAR 0 9
13766: PUSH
13767: LD_VAR 0 6
13771: PUSH
13772: LD_VAR 0 8
13776: ARRAY
13777: PUSH
13778: LD_INT 2
13780: ARRAY
13781: LESS
13782: IFFALSE 13820
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13784: LD_ADDR_VAR 0 6
13788: PUSH
13789: LD_VAR 0 6
13793: PPUSH
13794: LD_VAR 0 8
13798: PPUSH
13799: LD_VAR 0 7
13803: PUSH
13804: LD_VAR 0 9
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PPUSH
13813: CALL_OW 2
13817: ST_TO_ADDR
// break ;
13818: GO 13822
// end ; end ;
13820: GO 13759
13822: POP
13823: POP
// end ; end ;
13824: GO 13623
13826: POP
13827: POP
// if result and not asc then
13828: LD_VAR 0 6
13832: PUSH
13833: LD_VAR 0 4
13837: NOT
13838: AND
13839: IFFALSE 13914
// begin tmp := result ;
13841: LD_ADDR_VAR 0 9
13845: PUSH
13846: LD_VAR 0 6
13850: ST_TO_ADDR
// for i = tmp downto 1 do
13851: LD_ADDR_VAR 0 7
13855: PUSH
13856: DOUBLE
13857: LD_VAR 0 9
13861: INC
13862: ST_TO_ADDR
13863: LD_INT 1
13865: PUSH
13866: FOR_DOWNTO
13867: IFFALSE 13912
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13869: LD_ADDR_VAR 0 6
13873: PUSH
13874: LD_VAR 0 6
13878: PPUSH
13879: LD_VAR 0 9
13883: PUSH
13884: LD_VAR 0 7
13888: MINUS
13889: PUSH
13890: LD_INT 1
13892: PLUS
13893: PPUSH
13894: LD_VAR 0 9
13898: PUSH
13899: LD_VAR 0 7
13903: ARRAY
13904: PPUSH
13905: CALL_OW 1
13909: ST_TO_ADDR
13910: GO 13866
13912: POP
13913: POP
// end ; tmp := [ ] ;
13914: LD_ADDR_VAR 0 9
13918: PUSH
13919: EMPTY
13920: ST_TO_ADDR
// if mode then
13921: LD_VAR 0 5
13925: IFFALSE 13994
// begin for i = 1 to result do
13927: LD_ADDR_VAR 0 7
13931: PUSH
13932: DOUBLE
13933: LD_INT 1
13935: DEC
13936: ST_TO_ADDR
13937: LD_VAR 0 6
13941: PUSH
13942: FOR_TO
13943: IFFALSE 13982
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13945: LD_ADDR_VAR 0 9
13949: PUSH
13950: LD_VAR 0 9
13954: PPUSH
13955: LD_VAR 0 7
13959: PPUSH
13960: LD_VAR 0 6
13964: PUSH
13965: LD_VAR 0 7
13969: ARRAY
13970: PUSH
13971: LD_INT 1
13973: ARRAY
13974: PPUSH
13975: CALL_OW 1
13979: ST_TO_ADDR
13980: GO 13942
13982: POP
13983: POP
// result := tmp ;
13984: LD_ADDR_VAR 0 6
13988: PUSH
13989: LD_VAR 0 9
13993: ST_TO_ADDR
// end ; end ;
13994: LD_VAR 0 6
13998: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13999: LD_INT 0
14001: PPUSH
14002: PPUSH
14003: PPUSH
14004: PPUSH
14005: PPUSH
14006: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14007: LD_ADDR_VAR 0 5
14011: PUSH
14012: LD_INT 0
14014: PUSH
14015: LD_INT 0
14017: PUSH
14018: LD_INT 0
14020: PUSH
14021: EMPTY
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: ST_TO_ADDR
// if not x or not y then
14029: LD_VAR 0 2
14033: NOT
14034: PUSH
14035: LD_VAR 0 3
14039: NOT
14040: OR
14041: IFFALSE 14045
// exit ;
14043: GO 15697
// if not range then
14045: LD_VAR 0 4
14049: NOT
14050: IFFALSE 14060
// range := 10 ;
14052: LD_ADDR_VAR 0 4
14056: PUSH
14057: LD_INT 10
14059: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14060: LD_ADDR_VAR 0 8
14064: PUSH
14065: LD_INT 81
14067: PUSH
14068: LD_VAR 0 1
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 92
14079: PUSH
14080: LD_VAR 0 2
14084: PUSH
14085: LD_VAR 0 3
14089: PUSH
14090: LD_VAR 0 4
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 3
14103: PUSH
14104: LD_INT 21
14106: PUSH
14107: LD_INT 3
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: PPUSH
14123: CALL_OW 69
14127: ST_TO_ADDR
// if not tmp then
14128: LD_VAR 0 8
14132: NOT
14133: IFFALSE 14137
// exit ;
14135: GO 15697
// for i in tmp do
14137: LD_ADDR_VAR 0 6
14141: PUSH
14142: LD_VAR 0 8
14146: PUSH
14147: FOR_IN
14148: IFFALSE 15672
// begin points := [ 0 , 0 , 0 ] ;
14150: LD_ADDR_VAR 0 9
14154: PUSH
14155: LD_INT 0
14157: PUSH
14158: LD_INT 0
14160: PUSH
14161: LD_INT 0
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: ST_TO_ADDR
// bpoints := 1 ;
14169: LD_ADDR_VAR 0 10
14173: PUSH
14174: LD_INT 1
14176: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14177: LD_VAR 0 6
14181: PPUSH
14182: CALL_OW 247
14186: PUSH
14187: LD_INT 1
14189: DOUBLE
14190: EQUAL
14191: IFTRUE 14195
14193: GO 14773
14195: POP
// begin if GetClass ( i ) = 1 then
14196: LD_VAR 0 6
14200: PPUSH
14201: CALL_OW 257
14205: PUSH
14206: LD_INT 1
14208: EQUAL
14209: IFFALSE 14230
// points := [ 10 , 5 , 3 ] ;
14211: LD_ADDR_VAR 0 9
14215: PUSH
14216: LD_INT 10
14218: PUSH
14219: LD_INT 5
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14230: LD_VAR 0 6
14234: PPUSH
14235: CALL_OW 257
14239: PUSH
14240: LD_INT 2
14242: PUSH
14243: LD_INT 3
14245: PUSH
14246: LD_INT 4
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: IN
14254: IFFALSE 14275
// points := [ 3 , 2 , 1 ] ;
14256: LD_ADDR_VAR 0 9
14260: PUSH
14261: LD_INT 3
14263: PUSH
14264: LD_INT 2
14266: PUSH
14267: LD_INT 1
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14275: LD_VAR 0 6
14279: PPUSH
14280: CALL_OW 257
14284: PUSH
14285: LD_INT 5
14287: EQUAL
14288: IFFALSE 14309
// points := [ 130 , 5 , 2 ] ;
14290: LD_ADDR_VAR 0 9
14294: PUSH
14295: LD_INT 130
14297: PUSH
14298: LD_INT 5
14300: PUSH
14301: LD_INT 2
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14309: LD_VAR 0 6
14313: PPUSH
14314: CALL_OW 257
14318: PUSH
14319: LD_INT 8
14321: EQUAL
14322: IFFALSE 14343
// points := [ 35 , 35 , 30 ] ;
14324: LD_ADDR_VAR 0 9
14328: PUSH
14329: LD_INT 35
14331: PUSH
14332: LD_INT 35
14334: PUSH
14335: LD_INT 30
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: LIST
14342: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14343: LD_VAR 0 6
14347: PPUSH
14348: CALL_OW 257
14352: PUSH
14353: LD_INT 9
14355: EQUAL
14356: IFFALSE 14377
// points := [ 20 , 55 , 40 ] ;
14358: LD_ADDR_VAR 0 9
14362: PUSH
14363: LD_INT 20
14365: PUSH
14366: LD_INT 55
14368: PUSH
14369: LD_INT 40
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: LIST
14376: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14377: LD_VAR 0 6
14381: PPUSH
14382: CALL_OW 257
14386: PUSH
14387: LD_INT 12
14389: PUSH
14390: LD_INT 16
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: IN
14397: IFFALSE 14418
// points := [ 5 , 3 , 2 ] ;
14399: LD_ADDR_VAR 0 9
14403: PUSH
14404: LD_INT 5
14406: PUSH
14407: LD_INT 3
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14418: LD_VAR 0 6
14422: PPUSH
14423: CALL_OW 257
14427: PUSH
14428: LD_INT 17
14430: EQUAL
14431: IFFALSE 14452
// points := [ 100 , 50 , 75 ] ;
14433: LD_ADDR_VAR 0 9
14437: PUSH
14438: LD_INT 100
14440: PUSH
14441: LD_INT 50
14443: PUSH
14444: LD_INT 75
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: LIST
14451: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14452: LD_VAR 0 6
14456: PPUSH
14457: CALL_OW 257
14461: PUSH
14462: LD_INT 15
14464: EQUAL
14465: IFFALSE 14486
// points := [ 10 , 5 , 3 ] ;
14467: LD_ADDR_VAR 0 9
14471: PUSH
14472: LD_INT 10
14474: PUSH
14475: LD_INT 5
14477: PUSH
14478: LD_INT 3
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14486: LD_VAR 0 6
14490: PPUSH
14491: CALL_OW 257
14495: PUSH
14496: LD_INT 14
14498: EQUAL
14499: IFFALSE 14520
// points := [ 10 , 0 , 0 ] ;
14501: LD_ADDR_VAR 0 9
14505: PUSH
14506: LD_INT 10
14508: PUSH
14509: LD_INT 0
14511: PUSH
14512: LD_INT 0
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14520: LD_VAR 0 6
14524: PPUSH
14525: CALL_OW 257
14529: PUSH
14530: LD_INT 11
14532: EQUAL
14533: IFFALSE 14554
// points := [ 30 , 10 , 5 ] ;
14535: LD_ADDR_VAR 0 9
14539: PUSH
14540: LD_INT 30
14542: PUSH
14543: LD_INT 10
14545: PUSH
14546: LD_INT 5
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14554: LD_VAR 0 1
14558: PPUSH
14559: LD_INT 5
14561: PPUSH
14562: CALL_OW 321
14566: PUSH
14567: LD_INT 2
14569: EQUAL
14570: IFFALSE 14587
// bpoints := bpoints * 1.8 ;
14572: LD_ADDR_VAR 0 10
14576: PUSH
14577: LD_VAR 0 10
14581: PUSH
14582: LD_REAL  1.80000000000000E+0000
14585: MUL
14586: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14587: LD_VAR 0 6
14591: PPUSH
14592: CALL_OW 257
14596: PUSH
14597: LD_INT 1
14599: PUSH
14600: LD_INT 2
14602: PUSH
14603: LD_INT 3
14605: PUSH
14606: LD_INT 4
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: IN
14615: PUSH
14616: LD_VAR 0 1
14620: PPUSH
14621: LD_INT 51
14623: PPUSH
14624: CALL_OW 321
14628: PUSH
14629: LD_INT 2
14631: EQUAL
14632: AND
14633: IFFALSE 14650
// bpoints := bpoints * 1.2 ;
14635: LD_ADDR_VAR 0 10
14639: PUSH
14640: LD_VAR 0 10
14644: PUSH
14645: LD_REAL  1.20000000000000E+0000
14648: MUL
14649: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14650: LD_VAR 0 6
14654: PPUSH
14655: CALL_OW 257
14659: PUSH
14660: LD_INT 5
14662: PUSH
14663: LD_INT 7
14665: PUSH
14666: LD_INT 9
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: IN
14674: PUSH
14675: LD_VAR 0 1
14679: PPUSH
14680: LD_INT 52
14682: PPUSH
14683: CALL_OW 321
14687: PUSH
14688: LD_INT 2
14690: EQUAL
14691: AND
14692: IFFALSE 14709
// bpoints := bpoints * 1.5 ;
14694: LD_ADDR_VAR 0 10
14698: PUSH
14699: LD_VAR 0 10
14703: PUSH
14704: LD_REAL  1.50000000000000E+0000
14707: MUL
14708: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14709: LD_VAR 0 1
14713: PPUSH
14714: LD_INT 66
14716: PPUSH
14717: CALL_OW 321
14721: PUSH
14722: LD_INT 2
14724: EQUAL
14725: IFFALSE 14742
// bpoints := bpoints * 1.1 ;
14727: LD_ADDR_VAR 0 10
14731: PUSH
14732: LD_VAR 0 10
14736: PUSH
14737: LD_REAL  1.10000000000000E+0000
14740: MUL
14741: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14742: LD_ADDR_VAR 0 10
14746: PUSH
14747: LD_VAR 0 10
14751: PUSH
14752: LD_VAR 0 6
14756: PPUSH
14757: LD_INT 1
14759: PPUSH
14760: CALL_OW 259
14764: PUSH
14765: LD_REAL  1.15000000000000E+0000
14768: MUL
14769: MUL
14770: ST_TO_ADDR
// end ; unit_vehicle :
14771: GO 15601
14773: LD_INT 2
14775: DOUBLE
14776: EQUAL
14777: IFTRUE 14781
14779: GO 15589
14781: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14782: LD_VAR 0 6
14786: PPUSH
14787: CALL_OW 264
14791: PUSH
14792: LD_INT 2
14794: PUSH
14795: LD_INT 42
14797: PUSH
14798: LD_INT 24
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: IN
14806: IFFALSE 14827
// points := [ 25 , 5 , 3 ] ;
14808: LD_ADDR_VAR 0 9
14812: PUSH
14813: LD_INT 25
14815: PUSH
14816: LD_INT 5
14818: PUSH
14819: LD_INT 3
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14827: LD_VAR 0 6
14831: PPUSH
14832: CALL_OW 264
14836: PUSH
14837: LD_INT 4
14839: PUSH
14840: LD_INT 43
14842: PUSH
14843: LD_INT 25
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: IN
14851: IFFALSE 14872
// points := [ 40 , 15 , 5 ] ;
14853: LD_ADDR_VAR 0 9
14857: PUSH
14858: LD_INT 40
14860: PUSH
14861: LD_INT 15
14863: PUSH
14864: LD_INT 5
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: LIST
14871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14872: LD_VAR 0 6
14876: PPUSH
14877: CALL_OW 264
14881: PUSH
14882: LD_INT 3
14884: PUSH
14885: LD_INT 23
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: IN
14892: IFFALSE 14913
// points := [ 7 , 25 , 8 ] ;
14894: LD_ADDR_VAR 0 9
14898: PUSH
14899: LD_INT 7
14901: PUSH
14902: LD_INT 25
14904: PUSH
14905: LD_INT 8
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14913: LD_VAR 0 6
14917: PPUSH
14918: CALL_OW 264
14922: PUSH
14923: LD_INT 5
14925: PUSH
14926: LD_INT 27
14928: PUSH
14929: LD_INT 44
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: LIST
14936: IN
14937: IFFALSE 14958
// points := [ 14 , 50 , 16 ] ;
14939: LD_ADDR_VAR 0 9
14943: PUSH
14944: LD_INT 14
14946: PUSH
14947: LD_INT 50
14949: PUSH
14950: LD_INT 16
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: LIST
14957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14958: LD_VAR 0 6
14962: PPUSH
14963: CALL_OW 264
14967: PUSH
14968: LD_INT 6
14970: PUSH
14971: LD_INT 46
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: IN
14978: IFFALSE 14999
// points := [ 32 , 120 , 70 ] ;
14980: LD_ADDR_VAR 0 9
14984: PUSH
14985: LD_INT 32
14987: PUSH
14988: LD_INT 120
14990: PUSH
14991: LD_INT 70
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
14999: LD_VAR 0 6
15003: PPUSH
15004: CALL_OW 264
15008: PUSH
15009: LD_INT 7
15011: PUSH
15012: LD_INT 28
15014: PUSH
15015: LD_INT 45
15017: PUSH
15018: LD_EXP 44
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: IN
15029: IFFALSE 15050
// points := [ 35 , 20 , 45 ] ;
15031: LD_ADDR_VAR 0 9
15035: PUSH
15036: LD_INT 35
15038: PUSH
15039: LD_INT 20
15041: PUSH
15042: LD_INT 45
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: LIST
15049: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15050: LD_VAR 0 6
15054: PPUSH
15055: CALL_OW 264
15059: PUSH
15060: LD_INT 47
15062: PUSH
15063: EMPTY
15064: LIST
15065: IN
15066: IFFALSE 15087
// points := [ 67 , 45 , 75 ] ;
15068: LD_ADDR_VAR 0 9
15072: PUSH
15073: LD_INT 67
15075: PUSH
15076: LD_INT 45
15078: PUSH
15079: LD_INT 75
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: LIST
15086: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15087: LD_VAR 0 6
15091: PPUSH
15092: CALL_OW 264
15096: PUSH
15097: LD_INT 26
15099: PUSH
15100: EMPTY
15101: LIST
15102: IN
15103: IFFALSE 15124
// points := [ 120 , 30 , 80 ] ;
15105: LD_ADDR_VAR 0 9
15109: PUSH
15110: LD_INT 120
15112: PUSH
15113: LD_INT 30
15115: PUSH
15116: LD_INT 80
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: LIST
15123: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15124: LD_VAR 0 6
15128: PPUSH
15129: CALL_OW 264
15133: PUSH
15134: LD_INT 22
15136: PUSH
15137: EMPTY
15138: LIST
15139: IN
15140: IFFALSE 15161
// points := [ 40 , 1 , 1 ] ;
15142: LD_ADDR_VAR 0 9
15146: PUSH
15147: LD_INT 40
15149: PUSH
15150: LD_INT 1
15152: PUSH
15153: LD_INT 1
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15161: LD_VAR 0 6
15165: PPUSH
15166: CALL_OW 264
15170: PUSH
15171: LD_INT 29
15173: PUSH
15174: EMPTY
15175: LIST
15176: IN
15177: IFFALSE 15198
// points := [ 70 , 200 , 400 ] ;
15179: LD_ADDR_VAR 0 9
15183: PUSH
15184: LD_INT 70
15186: PUSH
15187: LD_INT 200
15189: PUSH
15190: LD_INT 400
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: LIST
15197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15198: LD_VAR 0 6
15202: PPUSH
15203: CALL_OW 264
15207: PUSH
15208: LD_INT 14
15210: PUSH
15211: LD_INT 53
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: IN
15218: IFFALSE 15239
// points := [ 40 , 10 , 20 ] ;
15220: LD_ADDR_VAR 0 9
15224: PUSH
15225: LD_INT 40
15227: PUSH
15228: LD_INT 10
15230: PUSH
15231: LD_INT 20
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15239: LD_VAR 0 6
15243: PPUSH
15244: CALL_OW 264
15248: PUSH
15249: LD_INT 9
15251: PUSH
15252: EMPTY
15253: LIST
15254: IN
15255: IFFALSE 15276
// points := [ 5 , 70 , 20 ] ;
15257: LD_ADDR_VAR 0 9
15261: PUSH
15262: LD_INT 5
15264: PUSH
15265: LD_INT 70
15267: PUSH
15268: LD_INT 20
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: LIST
15275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15276: LD_VAR 0 6
15280: PPUSH
15281: CALL_OW 264
15285: PUSH
15286: LD_INT 10
15288: PUSH
15289: EMPTY
15290: LIST
15291: IN
15292: IFFALSE 15313
// points := [ 35 , 110 , 70 ] ;
15294: LD_ADDR_VAR 0 9
15298: PUSH
15299: LD_INT 35
15301: PUSH
15302: LD_INT 110
15304: PUSH
15305: LD_INT 70
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: LIST
15312: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15313: LD_VAR 0 6
15317: PPUSH
15318: CALL_OW 265
15322: PUSH
15323: LD_INT 25
15325: EQUAL
15326: IFFALSE 15347
// points := [ 80 , 65 , 100 ] ;
15328: LD_ADDR_VAR 0 9
15332: PUSH
15333: LD_INT 80
15335: PUSH
15336: LD_INT 65
15338: PUSH
15339: LD_INT 100
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15347: LD_VAR 0 6
15351: PPUSH
15352: CALL_OW 263
15356: PUSH
15357: LD_INT 1
15359: EQUAL
15360: IFFALSE 15395
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15362: LD_ADDR_VAR 0 10
15366: PUSH
15367: LD_VAR 0 10
15371: PUSH
15372: LD_VAR 0 6
15376: PPUSH
15377: CALL_OW 311
15381: PPUSH
15382: LD_INT 3
15384: PPUSH
15385: CALL_OW 259
15389: PUSH
15390: LD_INT 4
15392: MUL
15393: MUL
15394: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15395: LD_VAR 0 6
15399: PPUSH
15400: CALL_OW 263
15404: PUSH
15405: LD_INT 2
15407: EQUAL
15408: IFFALSE 15459
// begin j := IsControledBy ( i ) ;
15410: LD_ADDR_VAR 0 7
15414: PUSH
15415: LD_VAR 0 6
15419: PPUSH
15420: CALL_OW 312
15424: ST_TO_ADDR
// if j then
15425: LD_VAR 0 7
15429: IFFALSE 15459
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15431: LD_ADDR_VAR 0 10
15435: PUSH
15436: LD_VAR 0 10
15440: PUSH
15441: LD_VAR 0 7
15445: PPUSH
15446: LD_INT 3
15448: PPUSH
15449: CALL_OW 259
15453: PUSH
15454: LD_INT 3
15456: MUL
15457: MUL
15458: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15459: LD_VAR 0 6
15463: PPUSH
15464: CALL_OW 264
15468: PUSH
15469: LD_INT 5
15471: PUSH
15472: LD_INT 6
15474: PUSH
15475: LD_INT 46
15477: PUSH
15478: LD_INT 44
15480: PUSH
15481: LD_INT 47
15483: PUSH
15484: LD_INT 45
15486: PUSH
15487: LD_INT 28
15489: PUSH
15490: LD_INT 7
15492: PUSH
15493: LD_INT 27
15495: PUSH
15496: LD_INT 29
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: IN
15511: PUSH
15512: LD_VAR 0 1
15516: PPUSH
15517: LD_INT 52
15519: PPUSH
15520: CALL_OW 321
15524: PUSH
15525: LD_INT 2
15527: EQUAL
15528: AND
15529: IFFALSE 15546
// bpoints := bpoints * 1.2 ;
15531: LD_ADDR_VAR 0 10
15535: PUSH
15536: LD_VAR 0 10
15540: PUSH
15541: LD_REAL  1.20000000000000E+0000
15544: MUL
15545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15546: LD_VAR 0 6
15550: PPUSH
15551: CALL_OW 264
15555: PUSH
15556: LD_INT 6
15558: PUSH
15559: LD_INT 46
15561: PUSH
15562: LD_INT 47
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: LIST
15569: IN
15570: IFFALSE 15587
// bpoints := bpoints * 1.2 ;
15572: LD_ADDR_VAR 0 10
15576: PUSH
15577: LD_VAR 0 10
15581: PUSH
15582: LD_REAL  1.20000000000000E+0000
15585: MUL
15586: ST_TO_ADDR
// end ; unit_building :
15587: GO 15601
15589: LD_INT 3
15591: DOUBLE
15592: EQUAL
15593: IFTRUE 15597
15595: GO 15600
15597: POP
// ; end ;
15598: GO 15601
15600: POP
// for j = 1 to 3 do
15601: LD_ADDR_VAR 0 7
15605: PUSH
15606: DOUBLE
15607: LD_INT 1
15609: DEC
15610: ST_TO_ADDR
15611: LD_INT 3
15613: PUSH
15614: FOR_TO
15615: IFFALSE 15668
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15617: LD_ADDR_VAR 0 5
15621: PUSH
15622: LD_VAR 0 5
15626: PPUSH
15627: LD_VAR 0 7
15631: PPUSH
15632: LD_VAR 0 5
15636: PUSH
15637: LD_VAR 0 7
15641: ARRAY
15642: PUSH
15643: LD_VAR 0 9
15647: PUSH
15648: LD_VAR 0 7
15652: ARRAY
15653: PUSH
15654: LD_VAR 0 10
15658: MUL
15659: PLUS
15660: PPUSH
15661: CALL_OW 1
15665: ST_TO_ADDR
15666: GO 15614
15668: POP
15669: POP
// end ;
15670: GO 14147
15672: POP
15673: POP
// result := Replace ( result , 4 , tmp ) ;
15674: LD_ADDR_VAR 0 5
15678: PUSH
15679: LD_VAR 0 5
15683: PPUSH
15684: LD_INT 4
15686: PPUSH
15687: LD_VAR 0 8
15691: PPUSH
15692: CALL_OW 1
15696: ST_TO_ADDR
// end ;
15697: LD_VAR 0 5
15701: RET
// export function DangerAtRange ( unit , range ) ; begin
15702: LD_INT 0
15704: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15705: LD_ADDR_VAR 0 3
15709: PUSH
15710: LD_VAR 0 1
15714: PPUSH
15715: CALL_OW 255
15719: PPUSH
15720: LD_VAR 0 1
15724: PPUSH
15725: CALL_OW 250
15729: PPUSH
15730: LD_VAR 0 1
15734: PPUSH
15735: CALL_OW 251
15739: PPUSH
15740: LD_VAR 0 2
15744: PPUSH
15745: CALL 13999 0 4
15749: ST_TO_ADDR
// end ;
15750: LD_VAR 0 3
15754: RET
// export function DangerInArea ( side , area ) ; begin
15755: LD_INT 0
15757: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15758: LD_ADDR_VAR 0 3
15762: PUSH
15763: LD_VAR 0 2
15767: PPUSH
15768: LD_INT 81
15770: PUSH
15771: LD_VAR 0 1
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PPUSH
15780: CALL_OW 70
15784: ST_TO_ADDR
// end ;
15785: LD_VAR 0 3
15789: RET
// export function IsExtension ( b ) ; begin
15790: LD_INT 0
15792: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15793: LD_ADDR_VAR 0 2
15797: PUSH
15798: LD_VAR 0 1
15802: PUSH
15803: LD_INT 23
15805: PUSH
15806: LD_INT 20
15808: PUSH
15809: LD_INT 22
15811: PUSH
15812: LD_INT 17
15814: PUSH
15815: LD_INT 24
15817: PUSH
15818: LD_INT 21
15820: PUSH
15821: LD_INT 19
15823: PUSH
15824: LD_INT 16
15826: PUSH
15827: LD_INT 25
15829: PUSH
15830: LD_INT 18
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: IN
15845: ST_TO_ADDR
// end ;
15846: LD_VAR 0 2
15850: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15851: LD_INT 0
15853: PPUSH
15854: PPUSH
15855: PPUSH
// result := [ ] ;
15856: LD_ADDR_VAR 0 4
15860: PUSH
15861: EMPTY
15862: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15863: LD_ADDR_VAR 0 5
15867: PUSH
15868: LD_VAR 0 2
15872: PPUSH
15873: LD_INT 21
15875: PUSH
15876: LD_INT 3
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PPUSH
15883: CALL_OW 70
15887: ST_TO_ADDR
// if not tmp then
15888: LD_VAR 0 5
15892: NOT
15893: IFFALSE 15897
// exit ;
15895: GO 15961
// if checkLink then
15897: LD_VAR 0 3
15901: IFFALSE 15951
// begin for i in tmp do
15903: LD_ADDR_VAR 0 6
15907: PUSH
15908: LD_VAR 0 5
15912: PUSH
15913: FOR_IN
15914: IFFALSE 15949
// if GetBase ( i ) <> base then
15916: LD_VAR 0 6
15920: PPUSH
15921: CALL_OW 274
15925: PUSH
15926: LD_VAR 0 1
15930: NONEQUAL
15931: IFFALSE 15947
// ComLinkToBase ( base , i ) ;
15933: LD_VAR 0 1
15937: PPUSH
15938: LD_VAR 0 6
15942: PPUSH
15943: CALL_OW 169
15947: GO 15913
15949: POP
15950: POP
// end ; result := tmp ;
15951: LD_ADDR_VAR 0 4
15955: PUSH
15956: LD_VAR 0 5
15960: ST_TO_ADDR
// end ;
15961: LD_VAR 0 4
15965: RET
// export function ComComplete ( units , b ) ; var i ; begin
15966: LD_INT 0
15968: PPUSH
15969: PPUSH
// if not units then
15970: LD_VAR 0 1
15974: NOT
15975: IFFALSE 15979
// exit ;
15977: GO 16069
// for i in units do
15979: LD_ADDR_VAR 0 4
15983: PUSH
15984: LD_VAR 0 1
15988: PUSH
15989: FOR_IN
15990: IFFALSE 16067
// if BuildingStatus ( b ) = bs_build then
15992: LD_VAR 0 2
15996: PPUSH
15997: CALL_OW 461
16001: PUSH
16002: LD_INT 1
16004: EQUAL
16005: IFFALSE 16065
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16007: LD_VAR 0 4
16011: PPUSH
16012: LD_STRING h
16014: PUSH
16015: LD_VAR 0 2
16019: PPUSH
16020: CALL_OW 250
16024: PUSH
16025: LD_VAR 0 2
16029: PPUSH
16030: CALL_OW 251
16034: PUSH
16035: LD_VAR 0 2
16039: PUSH
16040: LD_INT 0
16042: PUSH
16043: LD_INT 0
16045: PUSH
16046: LD_INT 0
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: PUSH
16058: EMPTY
16059: LIST
16060: PPUSH
16061: CALL_OW 446
16065: GO 15989
16067: POP
16068: POP
// end ;
16069: LD_VAR 0 3
16073: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16074: LD_INT 0
16076: PPUSH
16077: PPUSH
16078: PPUSH
16079: PPUSH
16080: PPUSH
16081: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16082: LD_VAR 0 1
16086: NOT
16087: PUSH
16088: LD_VAR 0 1
16092: PPUSH
16093: CALL_OW 263
16097: PUSH
16098: LD_INT 2
16100: NONEQUAL
16101: OR
16102: IFFALSE 16106
// exit ;
16104: GO 16422
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16106: LD_ADDR_VAR 0 6
16110: PUSH
16111: LD_INT 22
16113: PUSH
16114: LD_VAR 0 1
16118: PPUSH
16119: CALL_OW 255
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 2
16130: PUSH
16131: LD_INT 30
16133: PUSH
16134: LD_INT 36
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 34
16143: PUSH
16144: LD_INT 31
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: LIST
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PPUSH
16160: CALL_OW 69
16164: ST_TO_ADDR
// if not tmp then
16165: LD_VAR 0 6
16169: NOT
16170: IFFALSE 16174
// exit ;
16172: GO 16422
// result := [ ] ;
16174: LD_ADDR_VAR 0 2
16178: PUSH
16179: EMPTY
16180: ST_TO_ADDR
// for i in tmp do
16181: LD_ADDR_VAR 0 3
16185: PUSH
16186: LD_VAR 0 6
16190: PUSH
16191: FOR_IN
16192: IFFALSE 16263
// begin t := UnitsInside ( i ) ;
16194: LD_ADDR_VAR 0 4
16198: PUSH
16199: LD_VAR 0 3
16203: PPUSH
16204: CALL_OW 313
16208: ST_TO_ADDR
// if t then
16209: LD_VAR 0 4
16213: IFFALSE 16261
// for j in t do
16215: LD_ADDR_VAR 0 7
16219: PUSH
16220: LD_VAR 0 4
16224: PUSH
16225: FOR_IN
16226: IFFALSE 16259
// result := Replace ( result , result + 1 , j ) ;
16228: LD_ADDR_VAR 0 2
16232: PUSH
16233: LD_VAR 0 2
16237: PPUSH
16238: LD_VAR 0 2
16242: PUSH
16243: LD_INT 1
16245: PLUS
16246: PPUSH
16247: LD_VAR 0 7
16251: PPUSH
16252: CALL_OW 1
16256: ST_TO_ADDR
16257: GO 16225
16259: POP
16260: POP
// end ;
16261: GO 16191
16263: POP
16264: POP
// if not result then
16265: LD_VAR 0 2
16269: NOT
16270: IFFALSE 16274
// exit ;
16272: GO 16422
// mech := result [ 1 ] ;
16274: LD_ADDR_VAR 0 5
16278: PUSH
16279: LD_VAR 0 2
16283: PUSH
16284: LD_INT 1
16286: ARRAY
16287: ST_TO_ADDR
// if result > 1 then
16288: LD_VAR 0 2
16292: PUSH
16293: LD_INT 1
16295: GREATER
16296: IFFALSE 16408
// begin for i = 2 to result do
16298: LD_ADDR_VAR 0 3
16302: PUSH
16303: DOUBLE
16304: LD_INT 2
16306: DEC
16307: ST_TO_ADDR
16308: LD_VAR 0 2
16312: PUSH
16313: FOR_TO
16314: IFFALSE 16406
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16316: LD_ADDR_VAR 0 4
16320: PUSH
16321: LD_VAR 0 2
16325: PUSH
16326: LD_VAR 0 3
16330: ARRAY
16331: PPUSH
16332: LD_INT 3
16334: PPUSH
16335: CALL_OW 259
16339: PUSH
16340: LD_VAR 0 2
16344: PUSH
16345: LD_VAR 0 3
16349: ARRAY
16350: PPUSH
16351: CALL_OW 432
16355: MINUS
16356: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16357: LD_VAR 0 4
16361: PUSH
16362: LD_VAR 0 5
16366: PPUSH
16367: LD_INT 3
16369: PPUSH
16370: CALL_OW 259
16374: PUSH
16375: LD_VAR 0 5
16379: PPUSH
16380: CALL_OW 432
16384: MINUS
16385: GREATEREQUAL
16386: IFFALSE 16404
// mech := result [ i ] ;
16388: LD_ADDR_VAR 0 5
16392: PUSH
16393: LD_VAR 0 2
16397: PUSH
16398: LD_VAR 0 3
16402: ARRAY
16403: ST_TO_ADDR
// end ;
16404: GO 16313
16406: POP
16407: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16408: LD_VAR 0 1
16412: PPUSH
16413: LD_VAR 0 5
16417: PPUSH
16418: CALL_OW 135
// end ;
16422: LD_VAR 0 2
16426: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16427: LD_INT 0
16429: PPUSH
16430: PPUSH
16431: PPUSH
16432: PPUSH
16433: PPUSH
16434: PPUSH
16435: PPUSH
16436: PPUSH
16437: PPUSH
16438: PPUSH
16439: PPUSH
16440: PPUSH
16441: PPUSH
// result := [ ] ;
16442: LD_ADDR_VAR 0 7
16446: PUSH
16447: EMPTY
16448: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16449: LD_VAR 0 1
16453: PPUSH
16454: CALL_OW 266
16458: PUSH
16459: LD_INT 0
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: IN
16469: NOT
16470: IFFALSE 16474
// exit ;
16472: GO 18108
// if name then
16474: LD_VAR 0 3
16478: IFFALSE 16494
// SetBName ( base_dep , name ) ;
16480: LD_VAR 0 1
16484: PPUSH
16485: LD_VAR 0 3
16489: PPUSH
16490: CALL_OW 500
// base := GetBase ( base_dep ) ;
16494: LD_ADDR_VAR 0 15
16498: PUSH
16499: LD_VAR 0 1
16503: PPUSH
16504: CALL_OW 274
16508: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16509: LD_ADDR_VAR 0 16
16513: PUSH
16514: LD_VAR 0 1
16518: PPUSH
16519: CALL_OW 255
16523: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16524: LD_ADDR_VAR 0 17
16528: PUSH
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 248
16538: ST_TO_ADDR
// if sources then
16539: LD_VAR 0 5
16543: IFFALSE 16590
// for i = 1 to 3 do
16545: LD_ADDR_VAR 0 8
16549: PUSH
16550: DOUBLE
16551: LD_INT 1
16553: DEC
16554: ST_TO_ADDR
16555: LD_INT 3
16557: PUSH
16558: FOR_TO
16559: IFFALSE 16588
// AddResourceType ( base , i , sources [ i ] ) ;
16561: LD_VAR 0 15
16565: PPUSH
16566: LD_VAR 0 8
16570: PPUSH
16571: LD_VAR 0 5
16575: PUSH
16576: LD_VAR 0 8
16580: ARRAY
16581: PPUSH
16582: CALL_OW 276
16586: GO 16558
16588: POP
16589: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16590: LD_ADDR_VAR 0 18
16594: PUSH
16595: LD_VAR 0 15
16599: PPUSH
16600: LD_VAR 0 2
16604: PPUSH
16605: LD_INT 1
16607: PPUSH
16608: CALL 15851 0 3
16612: ST_TO_ADDR
// InitHc ;
16613: CALL_OW 19
// InitUc ;
16617: CALL_OW 18
// uc_side := side ;
16621: LD_ADDR_OWVAR 20
16625: PUSH
16626: LD_VAR 0 16
16630: ST_TO_ADDR
// uc_nation := nation ;
16631: LD_ADDR_OWVAR 21
16635: PUSH
16636: LD_VAR 0 17
16640: ST_TO_ADDR
// if buildings then
16641: LD_VAR 0 18
16645: IFFALSE 17967
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16647: LD_ADDR_VAR 0 19
16651: PUSH
16652: LD_VAR 0 18
16656: PPUSH
16657: LD_INT 2
16659: PUSH
16660: LD_INT 30
16662: PUSH
16663: LD_INT 29
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 30
16672: PUSH
16673: LD_INT 30
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: LIST
16684: PPUSH
16685: CALL_OW 72
16689: ST_TO_ADDR
// if tmp then
16690: LD_VAR 0 19
16694: IFFALSE 16742
// for i in tmp do
16696: LD_ADDR_VAR 0 8
16700: PUSH
16701: LD_VAR 0 19
16705: PUSH
16706: FOR_IN
16707: IFFALSE 16740
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16709: LD_VAR 0 8
16713: PPUSH
16714: CALL_OW 250
16718: PPUSH
16719: LD_VAR 0 8
16723: PPUSH
16724: CALL_OW 251
16728: PPUSH
16729: LD_VAR 0 16
16733: PPUSH
16734: CALL_OW 441
16738: GO 16706
16740: POP
16741: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16742: LD_VAR 0 18
16746: PPUSH
16747: LD_INT 2
16749: PUSH
16750: LD_INT 30
16752: PUSH
16753: LD_INT 32
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 30
16762: PUSH
16763: LD_INT 33
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: LIST
16774: PPUSH
16775: CALL_OW 72
16779: IFFALSE 16867
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16781: LD_ADDR_VAR 0 8
16785: PUSH
16786: LD_VAR 0 18
16790: PPUSH
16791: LD_INT 2
16793: PUSH
16794: LD_INT 30
16796: PUSH
16797: LD_INT 32
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 30
16806: PUSH
16807: LD_INT 33
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: PPUSH
16819: CALL_OW 72
16823: PUSH
16824: FOR_IN
16825: IFFALSE 16865
// begin if not GetBWeapon ( i ) then
16827: LD_VAR 0 8
16831: PPUSH
16832: CALL_OW 269
16836: NOT
16837: IFFALSE 16863
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16839: LD_VAR 0 8
16843: PPUSH
16844: LD_VAR 0 8
16848: PPUSH
16849: LD_VAR 0 2
16853: PPUSH
16854: CALL 18113 0 2
16858: PPUSH
16859: CALL_OW 431
// end ;
16863: GO 16824
16865: POP
16866: POP
// end ; for i = 1 to personel do
16867: LD_ADDR_VAR 0 8
16871: PUSH
16872: DOUBLE
16873: LD_INT 1
16875: DEC
16876: ST_TO_ADDR
16877: LD_VAR 0 6
16881: PUSH
16882: FOR_TO
16883: IFFALSE 17947
// begin if i > 4 then
16885: LD_VAR 0 8
16889: PUSH
16890: LD_INT 4
16892: GREATER
16893: IFFALSE 16897
// break ;
16895: GO 17947
// case i of 1 :
16897: LD_VAR 0 8
16901: PUSH
16902: LD_INT 1
16904: DOUBLE
16905: EQUAL
16906: IFTRUE 16910
16908: GO 16990
16910: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16911: LD_ADDR_VAR 0 12
16915: PUSH
16916: LD_VAR 0 18
16920: PPUSH
16921: LD_INT 22
16923: PUSH
16924: LD_VAR 0 16
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 58
16935: PUSH
16936: EMPTY
16937: LIST
16938: PUSH
16939: LD_INT 2
16941: PUSH
16942: LD_INT 30
16944: PUSH
16945: LD_INT 32
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 30
16954: PUSH
16955: LD_INT 4
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 30
16964: PUSH
16965: LD_INT 5
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: LIST
16982: PPUSH
16983: CALL_OW 72
16987: ST_TO_ADDR
16988: GO 17212
16990: LD_INT 2
16992: DOUBLE
16993: EQUAL
16994: IFTRUE 16998
16996: GO 17060
16998: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16999: LD_ADDR_VAR 0 12
17003: PUSH
17004: LD_VAR 0 18
17008: PPUSH
17009: LD_INT 22
17011: PUSH
17012: LD_VAR 0 16
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 2
17023: PUSH
17024: LD_INT 30
17026: PUSH
17027: LD_INT 0
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 30
17036: PUSH
17037: LD_INT 1
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 72
17057: ST_TO_ADDR
17058: GO 17212
17060: LD_INT 3
17062: DOUBLE
17063: EQUAL
17064: IFTRUE 17068
17066: GO 17130
17068: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17069: LD_ADDR_VAR 0 12
17073: PUSH
17074: LD_VAR 0 18
17078: PPUSH
17079: LD_INT 22
17081: PUSH
17082: LD_VAR 0 16
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 2
17093: PUSH
17094: LD_INT 30
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 30
17106: PUSH
17107: LD_INT 3
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 72
17127: ST_TO_ADDR
17128: GO 17212
17130: LD_INT 4
17132: DOUBLE
17133: EQUAL
17134: IFTRUE 17138
17136: GO 17211
17138: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17139: LD_ADDR_VAR 0 12
17143: PUSH
17144: LD_VAR 0 18
17148: PPUSH
17149: LD_INT 22
17151: PUSH
17152: LD_VAR 0 16
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 2
17163: PUSH
17164: LD_INT 30
17166: PUSH
17167: LD_INT 6
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 30
17176: PUSH
17177: LD_INT 7
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 30
17186: PUSH
17187: LD_INT 8
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PPUSH
17204: CALL_OW 72
17208: ST_TO_ADDR
17209: GO 17212
17211: POP
// if i = 1 then
17212: LD_VAR 0 8
17216: PUSH
17217: LD_INT 1
17219: EQUAL
17220: IFFALSE 17331
// begin tmp := [ ] ;
17222: LD_ADDR_VAR 0 19
17226: PUSH
17227: EMPTY
17228: ST_TO_ADDR
// for j in f do
17229: LD_ADDR_VAR 0 9
17233: PUSH
17234: LD_VAR 0 12
17238: PUSH
17239: FOR_IN
17240: IFFALSE 17313
// if GetBType ( j ) = b_bunker then
17242: LD_VAR 0 9
17246: PPUSH
17247: CALL_OW 266
17251: PUSH
17252: LD_INT 32
17254: EQUAL
17255: IFFALSE 17282
// tmp := Insert ( tmp , 1 , j ) else
17257: LD_ADDR_VAR 0 19
17261: PUSH
17262: LD_VAR 0 19
17266: PPUSH
17267: LD_INT 1
17269: PPUSH
17270: LD_VAR 0 9
17274: PPUSH
17275: CALL_OW 2
17279: ST_TO_ADDR
17280: GO 17311
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17282: LD_ADDR_VAR 0 19
17286: PUSH
17287: LD_VAR 0 19
17291: PPUSH
17292: LD_VAR 0 19
17296: PUSH
17297: LD_INT 1
17299: PLUS
17300: PPUSH
17301: LD_VAR 0 9
17305: PPUSH
17306: CALL_OW 2
17310: ST_TO_ADDR
17311: GO 17239
17313: POP
17314: POP
// if tmp then
17315: LD_VAR 0 19
17319: IFFALSE 17331
// f := tmp ;
17321: LD_ADDR_VAR 0 12
17325: PUSH
17326: LD_VAR 0 19
17330: ST_TO_ADDR
// end ; x := personel [ i ] ;
17331: LD_ADDR_VAR 0 13
17335: PUSH
17336: LD_VAR 0 6
17340: PUSH
17341: LD_VAR 0 8
17345: ARRAY
17346: ST_TO_ADDR
// if x = - 1 then
17347: LD_VAR 0 13
17351: PUSH
17352: LD_INT 1
17354: NEG
17355: EQUAL
17356: IFFALSE 17565
// begin for j in f do
17358: LD_ADDR_VAR 0 9
17362: PUSH
17363: LD_VAR 0 12
17367: PUSH
17368: FOR_IN
17369: IFFALSE 17561
// repeat InitHc ;
17371: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17375: LD_VAR 0 9
17379: PPUSH
17380: CALL_OW 266
17384: PUSH
17385: LD_INT 5
17387: EQUAL
17388: IFFALSE 17458
// begin if UnitsInside ( j ) < 3 then
17390: LD_VAR 0 9
17394: PPUSH
17395: CALL_OW 313
17399: PUSH
17400: LD_INT 3
17402: LESS
17403: IFFALSE 17439
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17405: LD_INT 0
17407: PPUSH
17408: LD_INT 5
17410: PUSH
17411: LD_INT 8
17413: PUSH
17414: LD_INT 9
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: PUSH
17422: LD_VAR 0 17
17426: ARRAY
17427: PPUSH
17428: LD_VAR 0 4
17432: PPUSH
17433: CALL_OW 380
17437: GO 17456
// PrepareHuman ( false , i , skill ) ;
17439: LD_INT 0
17441: PPUSH
17442: LD_VAR 0 8
17446: PPUSH
17447: LD_VAR 0 4
17451: PPUSH
17452: CALL_OW 380
// end else
17456: GO 17475
// PrepareHuman ( false , i , skill ) ;
17458: LD_INT 0
17460: PPUSH
17461: LD_VAR 0 8
17465: PPUSH
17466: LD_VAR 0 4
17470: PPUSH
17471: CALL_OW 380
// un := CreateHuman ;
17475: LD_ADDR_VAR 0 14
17479: PUSH
17480: CALL_OW 44
17484: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17485: LD_ADDR_VAR 0 7
17489: PUSH
17490: LD_VAR 0 7
17494: PPUSH
17495: LD_INT 1
17497: PPUSH
17498: LD_VAR 0 14
17502: PPUSH
17503: CALL_OW 2
17507: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17508: LD_VAR 0 14
17512: PPUSH
17513: LD_VAR 0 9
17517: PPUSH
17518: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17522: LD_VAR 0 9
17526: PPUSH
17527: CALL_OW 313
17531: PUSH
17532: LD_INT 6
17534: EQUAL
17535: PUSH
17536: LD_VAR 0 9
17540: PPUSH
17541: CALL_OW 266
17545: PUSH
17546: LD_INT 32
17548: PUSH
17549: LD_INT 31
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: IN
17556: OR
17557: IFFALSE 17371
17559: GO 17368
17561: POP
17562: POP
// end else
17563: GO 17945
// for j = 1 to x do
17565: LD_ADDR_VAR 0 9
17569: PUSH
17570: DOUBLE
17571: LD_INT 1
17573: DEC
17574: ST_TO_ADDR
17575: LD_VAR 0 13
17579: PUSH
17580: FOR_TO
17581: IFFALSE 17943
// begin InitHc ;
17583: CALL_OW 19
// if not f then
17587: LD_VAR 0 12
17591: NOT
17592: IFFALSE 17681
// begin PrepareHuman ( false , i , skill ) ;
17594: LD_INT 0
17596: PPUSH
17597: LD_VAR 0 8
17601: PPUSH
17602: LD_VAR 0 4
17606: PPUSH
17607: CALL_OW 380
// un := CreateHuman ;
17611: LD_ADDR_VAR 0 14
17615: PUSH
17616: CALL_OW 44
17620: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17621: LD_ADDR_VAR 0 7
17625: PUSH
17626: LD_VAR 0 7
17630: PPUSH
17631: LD_INT 1
17633: PPUSH
17634: LD_VAR 0 14
17638: PPUSH
17639: CALL_OW 2
17643: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17644: LD_VAR 0 14
17648: PPUSH
17649: LD_VAR 0 1
17653: PPUSH
17654: CALL_OW 250
17658: PPUSH
17659: LD_VAR 0 1
17663: PPUSH
17664: CALL_OW 251
17668: PPUSH
17669: LD_INT 10
17671: PPUSH
17672: LD_INT 0
17674: PPUSH
17675: CALL_OW 50
// continue ;
17679: GO 17580
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17681: LD_VAR 0 12
17685: PUSH
17686: LD_INT 1
17688: ARRAY
17689: PPUSH
17690: CALL_OW 313
17694: PUSH
17695: LD_VAR 0 12
17699: PUSH
17700: LD_INT 1
17702: ARRAY
17703: PPUSH
17704: CALL_OW 266
17708: PUSH
17709: LD_INT 32
17711: PUSH
17712: LD_INT 31
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: IN
17719: AND
17720: PUSH
17721: LD_VAR 0 12
17725: PUSH
17726: LD_INT 1
17728: ARRAY
17729: PPUSH
17730: CALL_OW 313
17734: PUSH
17735: LD_INT 6
17737: EQUAL
17738: OR
17739: IFFALSE 17759
// f := Delete ( f , 1 ) ;
17741: LD_ADDR_VAR 0 12
17745: PUSH
17746: LD_VAR 0 12
17750: PPUSH
17751: LD_INT 1
17753: PPUSH
17754: CALL_OW 3
17758: ST_TO_ADDR
// if not f then
17759: LD_VAR 0 12
17763: NOT
17764: IFFALSE 17782
// begin x := x + 2 ;
17766: LD_ADDR_VAR 0 13
17770: PUSH
17771: LD_VAR 0 13
17775: PUSH
17776: LD_INT 2
17778: PLUS
17779: ST_TO_ADDR
// continue ;
17780: GO 17580
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17782: LD_VAR 0 12
17786: PUSH
17787: LD_INT 1
17789: ARRAY
17790: PPUSH
17791: CALL_OW 266
17795: PUSH
17796: LD_INT 5
17798: EQUAL
17799: IFFALSE 17873
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17801: LD_VAR 0 12
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PPUSH
17810: CALL_OW 313
17814: PUSH
17815: LD_INT 3
17817: LESS
17818: IFFALSE 17854
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17820: LD_INT 0
17822: PPUSH
17823: LD_INT 5
17825: PUSH
17826: LD_INT 8
17828: PUSH
17829: LD_INT 9
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: LIST
17836: PUSH
17837: LD_VAR 0 17
17841: ARRAY
17842: PPUSH
17843: LD_VAR 0 4
17847: PPUSH
17848: CALL_OW 380
17852: GO 17871
// PrepareHuman ( false , i , skill ) ;
17854: LD_INT 0
17856: PPUSH
17857: LD_VAR 0 8
17861: PPUSH
17862: LD_VAR 0 4
17866: PPUSH
17867: CALL_OW 380
// end else
17871: GO 17890
// PrepareHuman ( false , i , skill ) ;
17873: LD_INT 0
17875: PPUSH
17876: LD_VAR 0 8
17880: PPUSH
17881: LD_VAR 0 4
17885: PPUSH
17886: CALL_OW 380
// un := CreateHuman ;
17890: LD_ADDR_VAR 0 14
17894: PUSH
17895: CALL_OW 44
17899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17900: LD_ADDR_VAR 0 7
17904: PUSH
17905: LD_VAR 0 7
17909: PPUSH
17910: LD_INT 1
17912: PPUSH
17913: LD_VAR 0 14
17917: PPUSH
17918: CALL_OW 2
17922: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17923: LD_VAR 0 14
17927: PPUSH
17928: LD_VAR 0 12
17932: PUSH
17933: LD_INT 1
17935: ARRAY
17936: PPUSH
17937: CALL_OW 52
// end ;
17941: GO 17580
17943: POP
17944: POP
// end ;
17945: GO 16882
17947: POP
17948: POP
// result := result ^ buildings ;
17949: LD_ADDR_VAR 0 7
17953: PUSH
17954: LD_VAR 0 7
17958: PUSH
17959: LD_VAR 0 18
17963: ADD
17964: ST_TO_ADDR
// end else
17965: GO 18108
// begin for i = 1 to personel do
17967: LD_ADDR_VAR 0 8
17971: PUSH
17972: DOUBLE
17973: LD_INT 1
17975: DEC
17976: ST_TO_ADDR
17977: LD_VAR 0 6
17981: PUSH
17982: FOR_TO
17983: IFFALSE 18106
// begin if i > 4 then
17985: LD_VAR 0 8
17989: PUSH
17990: LD_INT 4
17992: GREATER
17993: IFFALSE 17997
// break ;
17995: GO 18106
// x := personel [ i ] ;
17997: LD_ADDR_VAR 0 13
18001: PUSH
18002: LD_VAR 0 6
18006: PUSH
18007: LD_VAR 0 8
18011: ARRAY
18012: ST_TO_ADDR
// if x = - 1 then
18013: LD_VAR 0 13
18017: PUSH
18018: LD_INT 1
18020: NEG
18021: EQUAL
18022: IFFALSE 18026
// continue ;
18024: GO 17982
// PrepareHuman ( false , i , skill ) ;
18026: LD_INT 0
18028: PPUSH
18029: LD_VAR 0 8
18033: PPUSH
18034: LD_VAR 0 4
18038: PPUSH
18039: CALL_OW 380
// un := CreateHuman ;
18043: LD_ADDR_VAR 0 14
18047: PUSH
18048: CALL_OW 44
18052: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18053: LD_VAR 0 14
18057: PPUSH
18058: LD_VAR 0 1
18062: PPUSH
18063: CALL_OW 250
18067: PPUSH
18068: LD_VAR 0 1
18072: PPUSH
18073: CALL_OW 251
18077: PPUSH
18078: LD_INT 10
18080: PPUSH
18081: LD_INT 0
18083: PPUSH
18084: CALL_OW 50
// result := result ^ un ;
18088: LD_ADDR_VAR 0 7
18092: PUSH
18093: LD_VAR 0 7
18097: PUSH
18098: LD_VAR 0 14
18102: ADD
18103: ST_TO_ADDR
// end ;
18104: GO 17982
18106: POP
18107: POP
// end ; end ;
18108: LD_VAR 0 7
18112: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18113: LD_INT 0
18115: PPUSH
18116: PPUSH
18117: PPUSH
18118: PPUSH
18119: PPUSH
18120: PPUSH
18121: PPUSH
18122: PPUSH
18123: PPUSH
18124: PPUSH
18125: PPUSH
18126: PPUSH
18127: PPUSH
18128: PPUSH
18129: PPUSH
18130: PPUSH
// result := false ;
18131: LD_ADDR_VAR 0 3
18135: PUSH
18136: LD_INT 0
18138: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18139: LD_VAR 0 1
18143: NOT
18144: PUSH
18145: LD_VAR 0 1
18149: PPUSH
18150: CALL_OW 266
18154: PUSH
18155: LD_INT 32
18157: PUSH
18158: LD_INT 33
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: IN
18165: NOT
18166: OR
18167: IFFALSE 18171
// exit ;
18169: GO 19280
// nat := GetNation ( tower ) ;
18171: LD_ADDR_VAR 0 12
18175: PUSH
18176: LD_VAR 0 1
18180: PPUSH
18181: CALL_OW 248
18185: ST_TO_ADDR
// side := GetSide ( tower ) ;
18186: LD_ADDR_VAR 0 16
18190: PUSH
18191: LD_VAR 0 1
18195: PPUSH
18196: CALL_OW 255
18200: ST_TO_ADDR
// x := GetX ( tower ) ;
18201: LD_ADDR_VAR 0 10
18205: PUSH
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 250
18215: ST_TO_ADDR
// y := GetY ( tower ) ;
18216: LD_ADDR_VAR 0 11
18220: PUSH
18221: LD_VAR 0 1
18225: PPUSH
18226: CALL_OW 251
18230: ST_TO_ADDR
// if not x or not y then
18231: LD_VAR 0 10
18235: NOT
18236: PUSH
18237: LD_VAR 0 11
18241: NOT
18242: OR
18243: IFFALSE 18247
// exit ;
18245: GO 19280
// weapon := 0 ;
18247: LD_ADDR_VAR 0 18
18251: PUSH
18252: LD_INT 0
18254: ST_TO_ADDR
// fac_list := [ ] ;
18255: LD_ADDR_VAR 0 17
18259: PUSH
18260: EMPTY
18261: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18262: LD_ADDR_VAR 0 6
18266: PUSH
18267: LD_VAR 0 1
18271: PPUSH
18272: CALL_OW 274
18276: PPUSH
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_INT 0
18284: PPUSH
18285: CALL 15851 0 3
18289: PPUSH
18290: LD_INT 30
18292: PUSH
18293: LD_INT 3
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PPUSH
18300: CALL_OW 72
18304: ST_TO_ADDR
// if not factories then
18305: LD_VAR 0 6
18309: NOT
18310: IFFALSE 18314
// exit ;
18312: GO 19280
// for i in factories do
18314: LD_ADDR_VAR 0 8
18318: PUSH
18319: LD_VAR 0 6
18323: PUSH
18324: FOR_IN
18325: IFFALSE 18350
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18327: LD_ADDR_VAR 0 17
18331: PUSH
18332: LD_VAR 0 17
18336: PUSH
18337: LD_VAR 0 8
18341: PPUSH
18342: CALL_OW 478
18346: UNION
18347: ST_TO_ADDR
18348: GO 18324
18350: POP
18351: POP
// if not fac_list then
18352: LD_VAR 0 17
18356: NOT
18357: IFFALSE 18361
// exit ;
18359: GO 19280
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18361: LD_ADDR_VAR 0 5
18365: PUSH
18366: LD_INT 4
18368: PUSH
18369: LD_INT 5
18371: PUSH
18372: LD_INT 9
18374: PUSH
18375: LD_INT 10
18377: PUSH
18378: LD_INT 6
18380: PUSH
18381: LD_INT 7
18383: PUSH
18384: LD_INT 11
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 27
18398: PUSH
18399: LD_INT 28
18401: PUSH
18402: LD_INT 26
18404: PUSH
18405: LD_INT 30
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 43
18416: PUSH
18417: LD_INT 44
18419: PUSH
18420: LD_INT 46
18422: PUSH
18423: LD_INT 45
18425: PUSH
18426: LD_INT 47
18428: PUSH
18429: LD_INT 49
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_VAR 0 12
18449: ARRAY
18450: ST_TO_ADDR
// list := list isect fac_list ;
18451: LD_ADDR_VAR 0 5
18455: PUSH
18456: LD_VAR 0 5
18460: PUSH
18461: LD_VAR 0 17
18465: ISECT
18466: ST_TO_ADDR
// if not list then
18467: LD_VAR 0 5
18471: NOT
18472: IFFALSE 18476
// exit ;
18474: GO 19280
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18476: LD_VAR 0 12
18480: PUSH
18481: LD_INT 3
18483: EQUAL
18484: PUSH
18485: LD_INT 49
18487: PUSH
18488: LD_VAR 0 5
18492: IN
18493: AND
18494: PUSH
18495: LD_INT 31
18497: PPUSH
18498: LD_VAR 0 16
18502: PPUSH
18503: CALL_OW 321
18507: PUSH
18508: LD_INT 2
18510: EQUAL
18511: AND
18512: IFFALSE 18572
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18514: LD_INT 22
18516: PUSH
18517: LD_VAR 0 16
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 35
18528: PUSH
18529: LD_INT 49
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 91
18538: PUSH
18539: LD_VAR 0 1
18543: PUSH
18544: LD_INT 10
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: PPUSH
18557: CALL_OW 69
18561: NOT
18562: IFFALSE 18572
// weapon := ru_time_lapser ;
18564: LD_ADDR_VAR 0 18
18568: PUSH
18569: LD_INT 49
18571: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18572: LD_VAR 0 12
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: LD_INT 2
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: IN
18587: PUSH
18588: LD_INT 11
18590: PUSH
18591: LD_VAR 0 5
18595: IN
18596: PUSH
18597: LD_INT 30
18599: PUSH
18600: LD_VAR 0 5
18604: IN
18605: OR
18606: AND
18607: PUSH
18608: LD_INT 6
18610: PPUSH
18611: LD_VAR 0 16
18615: PPUSH
18616: CALL_OW 321
18620: PUSH
18621: LD_INT 2
18623: EQUAL
18624: AND
18625: IFFALSE 18790
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18627: LD_INT 22
18629: PUSH
18630: LD_VAR 0 16
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 2
18641: PUSH
18642: LD_INT 35
18644: PUSH
18645: LD_INT 11
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 35
18654: PUSH
18655: LD_INT 30
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 91
18669: PUSH
18670: LD_VAR 0 1
18674: PUSH
18675: LD_INT 18
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: PPUSH
18688: CALL_OW 69
18692: NOT
18693: PUSH
18694: LD_INT 22
18696: PUSH
18697: LD_VAR 0 16
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 2
18708: PUSH
18709: LD_INT 30
18711: PUSH
18712: LD_INT 32
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 30
18721: PUSH
18722: LD_INT 33
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 91
18736: PUSH
18737: LD_VAR 0 1
18741: PUSH
18742: LD_INT 12
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: LIST
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: LIST
18754: PUSH
18755: EMPTY
18756: LIST
18757: PPUSH
18758: CALL_OW 69
18762: PUSH
18763: LD_INT 2
18765: GREATER
18766: AND
18767: IFFALSE 18790
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18769: LD_ADDR_VAR 0 18
18773: PUSH
18774: LD_INT 11
18776: PUSH
18777: LD_INT 30
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_VAR 0 12
18788: ARRAY
18789: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18790: LD_VAR 0 18
18794: NOT
18795: PUSH
18796: LD_INT 40
18798: PPUSH
18799: LD_VAR 0 16
18803: PPUSH
18804: CALL_OW 321
18808: PUSH
18809: LD_INT 2
18811: EQUAL
18812: AND
18813: PUSH
18814: LD_INT 7
18816: PUSH
18817: LD_VAR 0 5
18821: IN
18822: PUSH
18823: LD_INT 28
18825: PUSH
18826: LD_VAR 0 5
18830: IN
18831: OR
18832: PUSH
18833: LD_INT 45
18835: PUSH
18836: LD_VAR 0 5
18840: IN
18841: OR
18842: AND
18843: IFFALSE 19097
// begin hex := GetHexInfo ( x , y ) ;
18845: LD_ADDR_VAR 0 4
18849: PUSH
18850: LD_VAR 0 10
18854: PPUSH
18855: LD_VAR 0 11
18859: PPUSH
18860: CALL_OW 546
18864: ST_TO_ADDR
// if hex [ 1 ] then
18865: LD_VAR 0 4
18869: PUSH
18870: LD_INT 1
18872: ARRAY
18873: IFFALSE 18877
// exit ;
18875: GO 19280
// height := hex [ 2 ] ;
18877: LD_ADDR_VAR 0 15
18881: PUSH
18882: LD_VAR 0 4
18886: PUSH
18887: LD_INT 2
18889: ARRAY
18890: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18891: LD_ADDR_VAR 0 14
18895: PUSH
18896: LD_INT 0
18898: PUSH
18899: LD_INT 2
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: LD_INT 5
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: ST_TO_ADDR
// for i in tmp do
18914: LD_ADDR_VAR 0 8
18918: PUSH
18919: LD_VAR 0 14
18923: PUSH
18924: FOR_IN
18925: IFFALSE 19095
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18927: LD_ADDR_VAR 0 9
18931: PUSH
18932: LD_VAR 0 10
18936: PPUSH
18937: LD_VAR 0 8
18941: PPUSH
18942: LD_INT 5
18944: PPUSH
18945: CALL_OW 272
18949: PUSH
18950: LD_VAR 0 11
18954: PPUSH
18955: LD_VAR 0 8
18959: PPUSH
18960: LD_INT 5
18962: PPUSH
18963: CALL_OW 273
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18972: LD_VAR 0 9
18976: PUSH
18977: LD_INT 1
18979: ARRAY
18980: PPUSH
18981: LD_VAR 0 9
18985: PUSH
18986: LD_INT 2
18988: ARRAY
18989: PPUSH
18990: CALL_OW 488
18994: IFFALSE 19093
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18996: LD_ADDR_VAR 0 4
19000: PUSH
19001: LD_VAR 0 9
19005: PUSH
19006: LD_INT 1
19008: ARRAY
19009: PPUSH
19010: LD_VAR 0 9
19014: PUSH
19015: LD_INT 2
19017: ARRAY
19018: PPUSH
19019: CALL_OW 546
19023: ST_TO_ADDR
// if hex [ 1 ] then
19024: LD_VAR 0 4
19028: PUSH
19029: LD_INT 1
19031: ARRAY
19032: IFFALSE 19036
// continue ;
19034: GO 18924
// h := hex [ 2 ] ;
19036: LD_ADDR_VAR 0 13
19040: PUSH
19041: LD_VAR 0 4
19045: PUSH
19046: LD_INT 2
19048: ARRAY
19049: ST_TO_ADDR
// if h + 7 < height then
19050: LD_VAR 0 13
19054: PUSH
19055: LD_INT 7
19057: PLUS
19058: PUSH
19059: LD_VAR 0 15
19063: LESS
19064: IFFALSE 19093
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19066: LD_ADDR_VAR 0 18
19070: PUSH
19071: LD_INT 7
19073: PUSH
19074: LD_INT 28
19076: PUSH
19077: LD_INT 45
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: PUSH
19085: LD_VAR 0 12
19089: ARRAY
19090: ST_TO_ADDR
// break ;
19091: GO 19095
// end ; end ; end ;
19093: GO 18924
19095: POP
19096: POP
// end ; if not weapon then
19097: LD_VAR 0 18
19101: NOT
19102: IFFALSE 19162
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19104: LD_ADDR_VAR 0 5
19108: PUSH
19109: LD_VAR 0 5
19113: PUSH
19114: LD_INT 11
19116: PUSH
19117: LD_INT 30
19119: PUSH
19120: LD_INT 49
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: LIST
19127: DIFF
19128: ST_TO_ADDR
// if not list then
19129: LD_VAR 0 5
19133: NOT
19134: IFFALSE 19138
// exit ;
19136: GO 19280
// weapon := list [ rand ( 1 , list ) ] ;
19138: LD_ADDR_VAR 0 18
19142: PUSH
19143: LD_VAR 0 5
19147: PUSH
19148: LD_INT 1
19150: PPUSH
19151: LD_VAR 0 5
19155: PPUSH
19156: CALL_OW 12
19160: ARRAY
19161: ST_TO_ADDR
// end ; if weapon then
19162: LD_VAR 0 18
19166: IFFALSE 19280
// begin tmp := CostOfWeapon ( weapon ) ;
19168: LD_ADDR_VAR 0 14
19172: PUSH
19173: LD_VAR 0 18
19177: PPUSH
19178: CALL_OW 451
19182: ST_TO_ADDR
// j := GetBase ( tower ) ;
19183: LD_ADDR_VAR 0 9
19187: PUSH
19188: LD_VAR 0 1
19192: PPUSH
19193: CALL_OW 274
19197: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19198: LD_VAR 0 9
19202: PPUSH
19203: LD_INT 1
19205: PPUSH
19206: CALL_OW 275
19210: PUSH
19211: LD_VAR 0 14
19215: PUSH
19216: LD_INT 1
19218: ARRAY
19219: GREATEREQUAL
19220: PUSH
19221: LD_VAR 0 9
19225: PPUSH
19226: LD_INT 2
19228: PPUSH
19229: CALL_OW 275
19233: PUSH
19234: LD_VAR 0 14
19238: PUSH
19239: LD_INT 2
19241: ARRAY
19242: GREATEREQUAL
19243: AND
19244: PUSH
19245: LD_VAR 0 9
19249: PPUSH
19250: LD_INT 3
19252: PPUSH
19253: CALL_OW 275
19257: PUSH
19258: LD_VAR 0 14
19262: PUSH
19263: LD_INT 3
19265: ARRAY
19266: GREATEREQUAL
19267: AND
19268: IFFALSE 19280
// result := weapon ;
19270: LD_ADDR_VAR 0 3
19274: PUSH
19275: LD_VAR 0 18
19279: ST_TO_ADDR
// end ; end ;
19280: LD_VAR 0 3
19284: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19285: LD_INT 0
19287: PPUSH
19288: PPUSH
// result := true ;
19289: LD_ADDR_VAR 0 3
19293: PUSH
19294: LD_INT 1
19296: ST_TO_ADDR
// if array1 = array2 then
19297: LD_VAR 0 1
19301: PUSH
19302: LD_VAR 0 2
19306: EQUAL
19307: IFFALSE 19367
// begin for i = 1 to array1 do
19309: LD_ADDR_VAR 0 4
19313: PUSH
19314: DOUBLE
19315: LD_INT 1
19317: DEC
19318: ST_TO_ADDR
19319: LD_VAR 0 1
19323: PUSH
19324: FOR_TO
19325: IFFALSE 19363
// if array1 [ i ] <> array2 [ i ] then
19327: LD_VAR 0 1
19331: PUSH
19332: LD_VAR 0 4
19336: ARRAY
19337: PUSH
19338: LD_VAR 0 2
19342: PUSH
19343: LD_VAR 0 4
19347: ARRAY
19348: NONEQUAL
19349: IFFALSE 19361
// begin result := false ;
19351: LD_ADDR_VAR 0 3
19355: PUSH
19356: LD_INT 0
19358: ST_TO_ADDR
// break ;
19359: GO 19363
// end ;
19361: GO 19324
19363: POP
19364: POP
// end else
19365: GO 19375
// result := false ;
19367: LD_ADDR_VAR 0 3
19371: PUSH
19372: LD_INT 0
19374: ST_TO_ADDR
// end ;
19375: LD_VAR 0 3
19379: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19380: LD_INT 0
19382: PPUSH
19383: PPUSH
// if not array1 or not array2 then
19384: LD_VAR 0 1
19388: NOT
19389: PUSH
19390: LD_VAR 0 2
19394: NOT
19395: OR
19396: IFFALSE 19400
// exit ;
19398: GO 19464
// result := true ;
19400: LD_ADDR_VAR 0 3
19404: PUSH
19405: LD_INT 1
19407: ST_TO_ADDR
// for i = 1 to array1 do
19408: LD_ADDR_VAR 0 4
19412: PUSH
19413: DOUBLE
19414: LD_INT 1
19416: DEC
19417: ST_TO_ADDR
19418: LD_VAR 0 1
19422: PUSH
19423: FOR_TO
19424: IFFALSE 19462
// if array1 [ i ] <> array2 [ i ] then
19426: LD_VAR 0 1
19430: PUSH
19431: LD_VAR 0 4
19435: ARRAY
19436: PUSH
19437: LD_VAR 0 2
19441: PUSH
19442: LD_VAR 0 4
19446: ARRAY
19447: NONEQUAL
19448: IFFALSE 19460
// begin result := false ;
19450: LD_ADDR_VAR 0 3
19454: PUSH
19455: LD_INT 0
19457: ST_TO_ADDR
// break ;
19458: GO 19462
// end ;
19460: GO 19423
19462: POP
19463: POP
// end ;
19464: LD_VAR 0 3
19468: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19469: LD_INT 0
19471: PPUSH
19472: PPUSH
19473: PPUSH
// pom := GetBase ( fac ) ;
19474: LD_ADDR_VAR 0 5
19478: PUSH
19479: LD_VAR 0 1
19483: PPUSH
19484: CALL_OW 274
19488: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19489: LD_ADDR_VAR 0 4
19493: PUSH
19494: LD_VAR 0 2
19498: PUSH
19499: LD_INT 1
19501: ARRAY
19502: PPUSH
19503: LD_VAR 0 2
19507: PUSH
19508: LD_INT 2
19510: ARRAY
19511: PPUSH
19512: LD_VAR 0 2
19516: PUSH
19517: LD_INT 3
19519: ARRAY
19520: PPUSH
19521: LD_VAR 0 2
19525: PUSH
19526: LD_INT 4
19528: ARRAY
19529: PPUSH
19530: CALL_OW 449
19534: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19535: LD_ADDR_VAR 0 3
19539: PUSH
19540: LD_VAR 0 5
19544: PPUSH
19545: LD_INT 1
19547: PPUSH
19548: CALL_OW 275
19552: PUSH
19553: LD_VAR 0 4
19557: PUSH
19558: LD_INT 1
19560: ARRAY
19561: GREATEREQUAL
19562: PUSH
19563: LD_VAR 0 5
19567: PPUSH
19568: LD_INT 2
19570: PPUSH
19571: CALL_OW 275
19575: PUSH
19576: LD_VAR 0 4
19580: PUSH
19581: LD_INT 2
19583: ARRAY
19584: GREATEREQUAL
19585: AND
19586: PUSH
19587: LD_VAR 0 5
19591: PPUSH
19592: LD_INT 3
19594: PPUSH
19595: CALL_OW 275
19599: PUSH
19600: LD_VAR 0 4
19604: PUSH
19605: LD_INT 3
19607: ARRAY
19608: GREATEREQUAL
19609: AND
19610: ST_TO_ADDR
// end ;
19611: LD_VAR 0 3
19615: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19616: LD_INT 0
19618: PPUSH
19619: PPUSH
19620: PPUSH
19621: PPUSH
// pom := GetBase ( building ) ;
19622: LD_ADDR_VAR 0 3
19626: PUSH
19627: LD_VAR 0 1
19631: PPUSH
19632: CALL_OW 274
19636: ST_TO_ADDR
// if not pom then
19637: LD_VAR 0 3
19641: NOT
19642: IFFALSE 19646
// exit ;
19644: GO 19816
// btype := GetBType ( building ) ;
19646: LD_ADDR_VAR 0 5
19650: PUSH
19651: LD_VAR 0 1
19655: PPUSH
19656: CALL_OW 266
19660: ST_TO_ADDR
// if btype = b_armoury then
19661: LD_VAR 0 5
19665: PUSH
19666: LD_INT 4
19668: EQUAL
19669: IFFALSE 19679
// btype := b_barracks ;
19671: LD_ADDR_VAR 0 5
19675: PUSH
19676: LD_INT 5
19678: ST_TO_ADDR
// if btype = b_depot then
19679: LD_VAR 0 5
19683: PUSH
19684: LD_INT 0
19686: EQUAL
19687: IFFALSE 19697
// btype := b_warehouse ;
19689: LD_ADDR_VAR 0 5
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if btype = b_workshop then
19697: LD_VAR 0 5
19701: PUSH
19702: LD_INT 2
19704: EQUAL
19705: IFFALSE 19715
// btype := b_factory ;
19707: LD_ADDR_VAR 0 5
19711: PUSH
19712: LD_INT 3
19714: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19715: LD_ADDR_VAR 0 4
19719: PUSH
19720: LD_VAR 0 5
19724: PPUSH
19725: LD_VAR 0 1
19729: PPUSH
19730: CALL_OW 248
19734: PPUSH
19735: CALL_OW 450
19739: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19740: LD_ADDR_VAR 0 2
19744: PUSH
19745: LD_VAR 0 3
19749: PPUSH
19750: LD_INT 1
19752: PPUSH
19753: CALL_OW 275
19757: PUSH
19758: LD_VAR 0 4
19762: PUSH
19763: LD_INT 1
19765: ARRAY
19766: GREATEREQUAL
19767: PUSH
19768: LD_VAR 0 3
19772: PPUSH
19773: LD_INT 2
19775: PPUSH
19776: CALL_OW 275
19780: PUSH
19781: LD_VAR 0 4
19785: PUSH
19786: LD_INT 2
19788: ARRAY
19789: GREATEREQUAL
19790: AND
19791: PUSH
19792: LD_VAR 0 3
19796: PPUSH
19797: LD_INT 3
19799: PPUSH
19800: CALL_OW 275
19804: PUSH
19805: LD_VAR 0 4
19809: PUSH
19810: LD_INT 3
19812: ARRAY
19813: GREATEREQUAL
19814: AND
19815: ST_TO_ADDR
// end ;
19816: LD_VAR 0 2
19820: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19821: LD_INT 0
19823: PPUSH
19824: PPUSH
19825: PPUSH
// pom := GetBase ( building ) ;
19826: LD_ADDR_VAR 0 4
19830: PUSH
19831: LD_VAR 0 1
19835: PPUSH
19836: CALL_OW 274
19840: ST_TO_ADDR
// if not pom then
19841: LD_VAR 0 4
19845: NOT
19846: IFFALSE 19850
// exit ;
19848: GO 19951
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19850: LD_ADDR_VAR 0 5
19854: PUSH
19855: LD_VAR 0 2
19859: PPUSH
19860: LD_VAR 0 1
19864: PPUSH
19865: CALL_OW 248
19869: PPUSH
19870: CALL_OW 450
19874: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19875: LD_ADDR_VAR 0 3
19879: PUSH
19880: LD_VAR 0 4
19884: PPUSH
19885: LD_INT 1
19887: PPUSH
19888: CALL_OW 275
19892: PUSH
19893: LD_VAR 0 5
19897: PUSH
19898: LD_INT 1
19900: ARRAY
19901: GREATEREQUAL
19902: PUSH
19903: LD_VAR 0 4
19907: PPUSH
19908: LD_INT 2
19910: PPUSH
19911: CALL_OW 275
19915: PUSH
19916: LD_VAR 0 5
19920: PUSH
19921: LD_INT 2
19923: ARRAY
19924: GREATEREQUAL
19925: AND
19926: PUSH
19927: LD_VAR 0 4
19931: PPUSH
19932: LD_INT 3
19934: PPUSH
19935: CALL_OW 275
19939: PUSH
19940: LD_VAR 0 5
19944: PUSH
19945: LD_INT 3
19947: ARRAY
19948: GREATEREQUAL
19949: AND
19950: ST_TO_ADDR
// end ;
19951: LD_VAR 0 3
19955: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19956: LD_INT 0
19958: PPUSH
19959: PPUSH
19960: PPUSH
19961: PPUSH
19962: PPUSH
19963: PPUSH
19964: PPUSH
19965: PPUSH
19966: PPUSH
19967: PPUSH
19968: PPUSH
// result := false ;
19969: LD_ADDR_VAR 0 8
19973: PUSH
19974: LD_INT 0
19976: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19977: LD_VAR 0 5
19981: NOT
19982: PUSH
19983: LD_VAR 0 1
19987: NOT
19988: OR
19989: PUSH
19990: LD_VAR 0 2
19994: NOT
19995: OR
19996: PUSH
19997: LD_VAR 0 3
20001: NOT
20002: OR
20003: IFFALSE 20007
// exit ;
20005: GO 20821
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20007: LD_ADDR_VAR 0 14
20011: PUSH
20012: LD_VAR 0 1
20016: PPUSH
20017: LD_VAR 0 2
20021: PPUSH
20022: LD_VAR 0 3
20026: PPUSH
20027: LD_VAR 0 4
20031: PPUSH
20032: LD_VAR 0 5
20036: PUSH
20037: LD_INT 1
20039: ARRAY
20040: PPUSH
20041: CALL_OW 248
20045: PPUSH
20046: LD_INT 0
20048: PPUSH
20049: CALL 22058 0 6
20053: ST_TO_ADDR
// if not hexes then
20054: LD_VAR 0 14
20058: NOT
20059: IFFALSE 20063
// exit ;
20061: GO 20821
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20063: LD_ADDR_VAR 0 17
20067: PUSH
20068: LD_VAR 0 5
20072: PPUSH
20073: LD_INT 22
20075: PUSH
20076: LD_VAR 0 13
20080: PPUSH
20081: CALL_OW 255
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 2
20092: PUSH
20093: LD_INT 30
20095: PUSH
20096: LD_INT 0
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 30
20105: PUSH
20106: LD_INT 1
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: LIST
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PPUSH
20122: CALL_OW 72
20126: ST_TO_ADDR
// for i = 1 to hexes do
20127: LD_ADDR_VAR 0 9
20131: PUSH
20132: DOUBLE
20133: LD_INT 1
20135: DEC
20136: ST_TO_ADDR
20137: LD_VAR 0 14
20141: PUSH
20142: FOR_TO
20143: IFFALSE 20819
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20145: LD_ADDR_VAR 0 13
20149: PUSH
20150: LD_VAR 0 14
20154: PUSH
20155: LD_VAR 0 9
20159: ARRAY
20160: PUSH
20161: LD_INT 1
20163: ARRAY
20164: PPUSH
20165: LD_VAR 0 14
20169: PUSH
20170: LD_VAR 0 9
20174: ARRAY
20175: PUSH
20176: LD_INT 2
20178: ARRAY
20179: PPUSH
20180: CALL_OW 428
20184: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20185: LD_VAR 0 14
20189: PUSH
20190: LD_VAR 0 9
20194: ARRAY
20195: PUSH
20196: LD_INT 1
20198: ARRAY
20199: PPUSH
20200: LD_VAR 0 14
20204: PUSH
20205: LD_VAR 0 9
20209: ARRAY
20210: PUSH
20211: LD_INT 2
20213: ARRAY
20214: PPUSH
20215: CALL_OW 351
20219: PUSH
20220: LD_VAR 0 14
20224: PUSH
20225: LD_VAR 0 9
20229: ARRAY
20230: PUSH
20231: LD_INT 1
20233: ARRAY
20234: PPUSH
20235: LD_VAR 0 14
20239: PUSH
20240: LD_VAR 0 9
20244: ARRAY
20245: PUSH
20246: LD_INT 2
20248: ARRAY
20249: PPUSH
20250: CALL_OW 488
20254: NOT
20255: OR
20256: PUSH
20257: LD_VAR 0 13
20261: PPUSH
20262: CALL_OW 247
20266: PUSH
20267: LD_INT 3
20269: EQUAL
20270: OR
20271: IFFALSE 20277
// exit ;
20273: POP
20274: POP
20275: GO 20821
// if not tmp then
20277: LD_VAR 0 13
20281: NOT
20282: IFFALSE 20286
// continue ;
20284: GO 20142
// result := true ;
20286: LD_ADDR_VAR 0 8
20290: PUSH
20291: LD_INT 1
20293: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20294: LD_VAR 0 6
20298: PUSH
20299: LD_VAR 0 13
20303: PPUSH
20304: CALL_OW 247
20308: PUSH
20309: LD_INT 2
20311: EQUAL
20312: AND
20313: PUSH
20314: LD_VAR 0 13
20318: PPUSH
20319: CALL_OW 263
20323: PUSH
20324: LD_INT 1
20326: EQUAL
20327: AND
20328: IFFALSE 20492
// begin if IsDrivenBy ( tmp ) then
20330: LD_VAR 0 13
20334: PPUSH
20335: CALL_OW 311
20339: IFFALSE 20343
// continue ;
20341: GO 20142
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20343: LD_VAR 0 6
20347: PPUSH
20348: LD_INT 3
20350: PUSH
20351: LD_INT 60
20353: PUSH
20354: EMPTY
20355: LIST
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 3
20363: PUSH
20364: LD_INT 55
20366: PUSH
20367: EMPTY
20368: LIST
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PPUSH
20378: CALL_OW 72
20382: IFFALSE 20490
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20384: LD_ADDR_VAR 0 18
20388: PUSH
20389: LD_VAR 0 6
20393: PPUSH
20394: LD_INT 3
20396: PUSH
20397: LD_INT 60
20399: PUSH
20400: EMPTY
20401: LIST
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 3
20409: PUSH
20410: LD_INT 55
20412: PUSH
20413: EMPTY
20414: LIST
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PPUSH
20424: CALL_OW 72
20428: PUSH
20429: LD_INT 1
20431: ARRAY
20432: ST_TO_ADDR
// if IsInUnit ( driver ) then
20433: LD_VAR 0 18
20437: PPUSH
20438: CALL_OW 310
20442: IFFALSE 20453
// ComExit ( driver ) ;
20444: LD_VAR 0 18
20448: PPUSH
20449: CALL 45746 0 1
// AddComEnterUnit ( driver , tmp ) ;
20453: LD_VAR 0 18
20457: PPUSH
20458: LD_VAR 0 13
20462: PPUSH
20463: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20467: LD_VAR 0 18
20471: PPUSH
20472: LD_VAR 0 7
20476: PPUSH
20477: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20481: LD_VAR 0 18
20485: PPUSH
20486: CALL_OW 181
// end ; continue ;
20490: GO 20142
// end ; if not cleaners or not tmp in cleaners then
20492: LD_VAR 0 6
20496: NOT
20497: PUSH
20498: LD_VAR 0 13
20502: PUSH
20503: LD_VAR 0 6
20507: IN
20508: NOT
20509: OR
20510: IFFALSE 20817
// begin if dep then
20512: LD_VAR 0 17
20516: IFFALSE 20652
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20518: LD_ADDR_VAR 0 16
20522: PUSH
20523: LD_VAR 0 17
20527: PUSH
20528: LD_INT 1
20530: ARRAY
20531: PPUSH
20532: CALL_OW 250
20536: PPUSH
20537: LD_VAR 0 17
20541: PUSH
20542: LD_INT 1
20544: ARRAY
20545: PPUSH
20546: CALL_OW 254
20550: PPUSH
20551: LD_INT 5
20553: PPUSH
20554: CALL_OW 272
20558: PUSH
20559: LD_VAR 0 17
20563: PUSH
20564: LD_INT 1
20566: ARRAY
20567: PPUSH
20568: CALL_OW 251
20572: PPUSH
20573: LD_VAR 0 17
20577: PUSH
20578: LD_INT 1
20580: ARRAY
20581: PPUSH
20582: CALL_OW 254
20586: PPUSH
20587: LD_INT 5
20589: PPUSH
20590: CALL_OW 273
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20599: LD_VAR 0 16
20603: PUSH
20604: LD_INT 1
20606: ARRAY
20607: PPUSH
20608: LD_VAR 0 16
20612: PUSH
20613: LD_INT 2
20615: ARRAY
20616: PPUSH
20617: CALL_OW 488
20621: IFFALSE 20652
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20623: LD_VAR 0 13
20627: PPUSH
20628: LD_VAR 0 16
20632: PUSH
20633: LD_INT 1
20635: ARRAY
20636: PPUSH
20637: LD_VAR 0 16
20641: PUSH
20642: LD_INT 2
20644: ARRAY
20645: PPUSH
20646: CALL_OW 111
// continue ;
20650: GO 20142
// end ; end ; r := GetDir ( tmp ) ;
20652: LD_ADDR_VAR 0 15
20656: PUSH
20657: LD_VAR 0 13
20661: PPUSH
20662: CALL_OW 254
20666: ST_TO_ADDR
// if r = 5 then
20667: LD_VAR 0 15
20671: PUSH
20672: LD_INT 5
20674: EQUAL
20675: IFFALSE 20685
// r := 0 ;
20677: LD_ADDR_VAR 0 15
20681: PUSH
20682: LD_INT 0
20684: ST_TO_ADDR
// for j = r to 5 do
20685: LD_ADDR_VAR 0 10
20689: PUSH
20690: DOUBLE
20691: LD_VAR 0 15
20695: DEC
20696: ST_TO_ADDR
20697: LD_INT 5
20699: PUSH
20700: FOR_TO
20701: IFFALSE 20815
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20703: LD_ADDR_VAR 0 11
20707: PUSH
20708: LD_VAR 0 13
20712: PPUSH
20713: CALL_OW 250
20717: PPUSH
20718: LD_VAR 0 10
20722: PPUSH
20723: LD_INT 2
20725: PPUSH
20726: CALL_OW 272
20730: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20731: LD_ADDR_VAR 0 12
20735: PUSH
20736: LD_VAR 0 13
20740: PPUSH
20741: CALL_OW 251
20745: PPUSH
20746: LD_VAR 0 10
20750: PPUSH
20751: LD_INT 2
20753: PPUSH
20754: CALL_OW 273
20758: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20759: LD_VAR 0 11
20763: PPUSH
20764: LD_VAR 0 12
20768: PPUSH
20769: CALL_OW 488
20773: PUSH
20774: LD_VAR 0 11
20778: PPUSH
20779: LD_VAR 0 12
20783: PPUSH
20784: CALL_OW 428
20788: NOT
20789: AND
20790: IFFALSE 20813
// begin ComMoveXY ( tmp , _x , _y ) ;
20792: LD_VAR 0 13
20796: PPUSH
20797: LD_VAR 0 11
20801: PPUSH
20802: LD_VAR 0 12
20806: PPUSH
20807: CALL_OW 111
// break ;
20811: GO 20815
// end ; end ;
20813: GO 20700
20815: POP
20816: POP
// end ; end ;
20817: GO 20142
20819: POP
20820: POP
// end ;
20821: LD_VAR 0 8
20825: RET
// export function BuildingTechInvented ( side , btype ) ; begin
20826: LD_INT 0
20828: PPUSH
// result := true ;
20829: LD_ADDR_VAR 0 3
20833: PUSH
20834: LD_INT 1
20836: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
20837: LD_VAR 0 2
20841: PUSH
20842: LD_INT 24
20844: DOUBLE
20845: EQUAL
20846: IFTRUE 20856
20848: LD_INT 33
20850: DOUBLE
20851: EQUAL
20852: IFTRUE 20856
20854: GO 20881
20856: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
20857: LD_ADDR_VAR 0 3
20861: PUSH
20862: LD_INT 32
20864: PPUSH
20865: LD_VAR 0 1
20869: PPUSH
20870: CALL_OW 321
20874: PUSH
20875: LD_INT 2
20877: EQUAL
20878: ST_TO_ADDR
20879: GO 21201
20881: LD_INT 20
20883: DOUBLE
20884: EQUAL
20885: IFTRUE 20889
20887: GO 20914
20889: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
20890: LD_ADDR_VAR 0 3
20894: PUSH
20895: LD_INT 6
20897: PPUSH
20898: LD_VAR 0 1
20902: PPUSH
20903: CALL_OW 321
20907: PUSH
20908: LD_INT 2
20910: EQUAL
20911: ST_TO_ADDR
20912: GO 21201
20914: LD_INT 22
20916: DOUBLE
20917: EQUAL
20918: IFTRUE 20928
20920: LD_INT 36
20922: DOUBLE
20923: EQUAL
20924: IFTRUE 20928
20926: GO 20953
20928: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
20929: LD_ADDR_VAR 0 3
20933: PUSH
20934: LD_INT 15
20936: PPUSH
20937: LD_VAR 0 1
20941: PPUSH
20942: CALL_OW 321
20946: PUSH
20947: LD_INT 2
20949: EQUAL
20950: ST_TO_ADDR
20951: GO 21201
20953: LD_INT 30
20955: DOUBLE
20956: EQUAL
20957: IFTRUE 20961
20959: GO 20986
20961: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
20962: LD_ADDR_VAR 0 3
20966: PUSH
20967: LD_INT 20
20969: PPUSH
20970: LD_VAR 0 1
20974: PPUSH
20975: CALL_OW 321
20979: PUSH
20980: LD_INT 2
20982: EQUAL
20983: ST_TO_ADDR
20984: GO 21201
20986: LD_INT 28
20988: DOUBLE
20989: EQUAL
20990: IFTRUE 21000
20992: LD_INT 21
20994: DOUBLE
20995: EQUAL
20996: IFTRUE 21000
20998: GO 21025
21000: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21001: LD_ADDR_VAR 0 3
21005: PUSH
21006: LD_INT 21
21008: PPUSH
21009: LD_VAR 0 1
21013: PPUSH
21014: CALL_OW 321
21018: PUSH
21019: LD_INT 2
21021: EQUAL
21022: ST_TO_ADDR
21023: GO 21201
21025: LD_INT 16
21027: DOUBLE
21028: EQUAL
21029: IFTRUE 21033
21031: GO 21060
21033: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21034: LD_ADDR_VAR 0 3
21038: PUSH
21039: LD_EXP 52
21043: PPUSH
21044: LD_VAR 0 1
21048: PPUSH
21049: CALL_OW 321
21053: PUSH
21054: LD_INT 2
21056: EQUAL
21057: ST_TO_ADDR
21058: GO 21201
21060: LD_INT 19
21062: DOUBLE
21063: EQUAL
21064: IFTRUE 21074
21066: LD_INT 23
21068: DOUBLE
21069: EQUAL
21070: IFTRUE 21074
21072: GO 21101
21074: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21075: LD_ADDR_VAR 0 3
21079: PUSH
21080: LD_EXP 51
21084: PPUSH
21085: LD_VAR 0 1
21089: PPUSH
21090: CALL_OW 321
21094: PUSH
21095: LD_INT 2
21097: EQUAL
21098: ST_TO_ADDR
21099: GO 21201
21101: LD_INT 17
21103: DOUBLE
21104: EQUAL
21105: IFTRUE 21109
21107: GO 21134
21109: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21110: LD_ADDR_VAR 0 3
21114: PUSH
21115: LD_INT 39
21117: PPUSH
21118: LD_VAR 0 1
21122: PPUSH
21123: CALL_OW 321
21127: PUSH
21128: LD_INT 2
21130: EQUAL
21131: ST_TO_ADDR
21132: GO 21201
21134: LD_INT 18
21136: DOUBLE
21137: EQUAL
21138: IFTRUE 21142
21140: GO 21167
21142: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
21143: LD_ADDR_VAR 0 3
21147: PUSH
21148: LD_INT 40
21150: PPUSH
21151: LD_VAR 0 1
21155: PPUSH
21156: CALL_OW 321
21160: PUSH
21161: LD_INT 2
21163: EQUAL
21164: ST_TO_ADDR
21165: GO 21201
21167: LD_INT 27
21169: DOUBLE
21170: EQUAL
21171: IFTRUE 21175
21173: GO 21200
21175: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
21176: LD_ADDR_VAR 0 3
21180: PUSH
21181: LD_INT 35
21183: PPUSH
21184: LD_VAR 0 1
21188: PPUSH
21189: CALL_OW 321
21193: PUSH
21194: LD_INT 2
21196: EQUAL
21197: ST_TO_ADDR
21198: GO 21201
21200: POP
// end ;
21201: LD_VAR 0 3
21205: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21206: LD_INT 0
21208: PPUSH
21209: PPUSH
21210: PPUSH
21211: PPUSH
21212: PPUSH
21213: PPUSH
21214: PPUSH
21215: PPUSH
21216: PPUSH
21217: PPUSH
21218: PPUSH
// result := false ;
21219: LD_ADDR_VAR 0 6
21223: PUSH
21224: LD_INT 0
21226: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21227: LD_VAR 0 1
21231: NOT
21232: PUSH
21233: LD_VAR 0 1
21237: PPUSH
21238: CALL_OW 266
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: LD_INT 1
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: IN
21253: NOT
21254: OR
21255: PUSH
21256: LD_VAR 0 2
21260: NOT
21261: OR
21262: PUSH
21263: LD_VAR 0 5
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: LD_INT 2
21276: PUSH
21277: LD_INT 3
21279: PUSH
21280: LD_INT 4
21282: PUSH
21283: LD_INT 5
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: IN
21294: NOT
21295: OR
21296: PUSH
21297: LD_VAR 0 3
21301: PPUSH
21302: LD_VAR 0 4
21306: PPUSH
21307: CALL_OW 488
21311: NOT
21312: OR
21313: IFFALSE 21317
// exit ;
21315: GO 22053
// side := GetSide ( depot ) ;
21317: LD_ADDR_VAR 0 9
21321: PUSH
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 255
21331: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21332: LD_VAR 0 9
21336: PPUSH
21337: LD_VAR 0 2
21341: PPUSH
21342: CALL 20826 0 2
21346: NOT
21347: IFFALSE 21351
// exit ;
21349: GO 22053
// pom := GetBase ( depot ) ;
21351: LD_ADDR_VAR 0 10
21355: PUSH
21356: LD_VAR 0 1
21360: PPUSH
21361: CALL_OW 274
21365: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21366: LD_ADDR_VAR 0 11
21370: PUSH
21371: LD_VAR 0 2
21375: PPUSH
21376: LD_VAR 0 1
21380: PPUSH
21381: CALL_OW 248
21385: PPUSH
21386: CALL_OW 450
21390: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21391: LD_VAR 0 10
21395: PPUSH
21396: LD_INT 1
21398: PPUSH
21399: CALL_OW 275
21403: PUSH
21404: LD_VAR 0 11
21408: PUSH
21409: LD_INT 1
21411: ARRAY
21412: GREATEREQUAL
21413: PUSH
21414: LD_VAR 0 10
21418: PPUSH
21419: LD_INT 2
21421: PPUSH
21422: CALL_OW 275
21426: PUSH
21427: LD_VAR 0 11
21431: PUSH
21432: LD_INT 2
21434: ARRAY
21435: GREATEREQUAL
21436: AND
21437: PUSH
21438: LD_VAR 0 10
21442: PPUSH
21443: LD_INT 3
21445: PPUSH
21446: CALL_OW 275
21450: PUSH
21451: LD_VAR 0 11
21455: PUSH
21456: LD_INT 3
21458: ARRAY
21459: GREATEREQUAL
21460: AND
21461: NOT
21462: IFFALSE 21466
// exit ;
21464: GO 22053
// if GetBType ( depot ) = b_depot then
21466: LD_VAR 0 1
21470: PPUSH
21471: CALL_OW 266
21475: PUSH
21476: LD_INT 0
21478: EQUAL
21479: IFFALSE 21491
// dist := 28 else
21481: LD_ADDR_VAR 0 14
21485: PUSH
21486: LD_INT 28
21488: ST_TO_ADDR
21489: GO 21499
// dist := 36 ;
21491: LD_ADDR_VAR 0 14
21495: PUSH
21496: LD_INT 36
21498: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21499: LD_VAR 0 1
21503: PPUSH
21504: LD_VAR 0 3
21508: PPUSH
21509: LD_VAR 0 4
21513: PPUSH
21514: CALL_OW 297
21518: PUSH
21519: LD_VAR 0 14
21523: GREATER
21524: IFFALSE 21528
// exit ;
21526: GO 22053
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21528: LD_ADDR_VAR 0 12
21532: PUSH
21533: LD_VAR 0 2
21537: PPUSH
21538: LD_VAR 0 3
21542: PPUSH
21543: LD_VAR 0 4
21547: PPUSH
21548: LD_VAR 0 5
21552: PPUSH
21553: LD_VAR 0 1
21557: PPUSH
21558: CALL_OW 248
21562: PPUSH
21563: LD_INT 0
21565: PPUSH
21566: CALL 22058 0 6
21570: ST_TO_ADDR
// if not hexes then
21571: LD_VAR 0 12
21575: NOT
21576: IFFALSE 21580
// exit ;
21578: GO 22053
// hex := GetHexInfo ( x , y ) ;
21580: LD_ADDR_VAR 0 15
21584: PUSH
21585: LD_VAR 0 3
21589: PPUSH
21590: LD_VAR 0 4
21594: PPUSH
21595: CALL_OW 546
21599: ST_TO_ADDR
// if hex [ 1 ] then
21600: LD_VAR 0 15
21604: PUSH
21605: LD_INT 1
21607: ARRAY
21608: IFFALSE 21612
// exit ;
21610: GO 22053
// height := hex [ 2 ] ;
21612: LD_ADDR_VAR 0 13
21616: PUSH
21617: LD_VAR 0 15
21621: PUSH
21622: LD_INT 2
21624: ARRAY
21625: ST_TO_ADDR
// for i = 1 to hexes do
21626: LD_ADDR_VAR 0 7
21630: PUSH
21631: DOUBLE
21632: LD_INT 1
21634: DEC
21635: ST_TO_ADDR
21636: LD_VAR 0 12
21640: PUSH
21641: FOR_TO
21642: IFFALSE 21972
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21644: LD_VAR 0 12
21648: PUSH
21649: LD_VAR 0 7
21653: ARRAY
21654: PUSH
21655: LD_INT 1
21657: ARRAY
21658: PPUSH
21659: LD_VAR 0 12
21663: PUSH
21664: LD_VAR 0 7
21668: ARRAY
21669: PUSH
21670: LD_INT 2
21672: ARRAY
21673: PPUSH
21674: CALL_OW 488
21678: NOT
21679: PUSH
21680: LD_VAR 0 12
21684: PUSH
21685: LD_VAR 0 7
21689: ARRAY
21690: PUSH
21691: LD_INT 1
21693: ARRAY
21694: PPUSH
21695: LD_VAR 0 12
21699: PUSH
21700: LD_VAR 0 7
21704: ARRAY
21705: PUSH
21706: LD_INT 2
21708: ARRAY
21709: PPUSH
21710: CALL_OW 428
21714: PUSH
21715: LD_INT 0
21717: GREATER
21718: OR
21719: PUSH
21720: LD_VAR 0 12
21724: PUSH
21725: LD_VAR 0 7
21729: ARRAY
21730: PUSH
21731: LD_INT 1
21733: ARRAY
21734: PPUSH
21735: LD_VAR 0 12
21739: PUSH
21740: LD_VAR 0 7
21744: ARRAY
21745: PUSH
21746: LD_INT 2
21748: ARRAY
21749: PPUSH
21750: CALL_OW 351
21754: OR
21755: IFFALSE 21761
// exit ;
21757: POP
21758: POP
21759: GO 22053
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21761: LD_ADDR_VAR 0 8
21765: PUSH
21766: LD_VAR 0 12
21770: PUSH
21771: LD_VAR 0 7
21775: ARRAY
21776: PUSH
21777: LD_INT 1
21779: ARRAY
21780: PPUSH
21781: LD_VAR 0 12
21785: PUSH
21786: LD_VAR 0 7
21790: ARRAY
21791: PUSH
21792: LD_INT 2
21794: ARRAY
21795: PPUSH
21796: CALL_OW 546
21800: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21801: LD_VAR 0 8
21805: PUSH
21806: LD_INT 1
21808: ARRAY
21809: PUSH
21810: LD_VAR 0 8
21814: PUSH
21815: LD_INT 2
21817: ARRAY
21818: PUSH
21819: LD_VAR 0 13
21823: PUSH
21824: LD_INT 2
21826: PLUS
21827: GREATER
21828: OR
21829: PUSH
21830: LD_VAR 0 8
21834: PUSH
21835: LD_INT 2
21837: ARRAY
21838: PUSH
21839: LD_VAR 0 13
21843: PUSH
21844: LD_INT 2
21846: MINUS
21847: LESS
21848: OR
21849: PUSH
21850: LD_VAR 0 8
21854: PUSH
21855: LD_INT 3
21857: ARRAY
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: LD_INT 8
21864: PUSH
21865: LD_INT 9
21867: PUSH
21868: LD_INT 10
21870: PUSH
21871: LD_INT 11
21873: PUSH
21874: LD_INT 12
21876: PUSH
21877: LD_INT 13
21879: PUSH
21880: LD_INT 16
21882: PUSH
21883: LD_INT 17
21885: PUSH
21886: LD_INT 18
21888: PUSH
21889: LD_INT 19
21891: PUSH
21892: LD_INT 20
21894: PUSH
21895: LD_INT 21
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: IN
21913: NOT
21914: OR
21915: PUSH
21916: LD_VAR 0 8
21920: PUSH
21921: LD_INT 5
21923: ARRAY
21924: NOT
21925: OR
21926: PUSH
21927: LD_VAR 0 8
21931: PUSH
21932: LD_INT 6
21934: ARRAY
21935: PUSH
21936: LD_INT 1
21938: PUSH
21939: LD_INT 2
21941: PUSH
21942: LD_INT 7
21944: PUSH
21945: LD_INT 9
21947: PUSH
21948: LD_INT 10
21950: PUSH
21951: LD_INT 11
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: IN
21962: NOT
21963: OR
21964: IFFALSE 21970
// exit ;
21966: POP
21967: POP
21968: GO 22053
// end ;
21970: GO 21641
21972: POP
21973: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21974: LD_VAR 0 9
21978: PPUSH
21979: LD_VAR 0 3
21983: PPUSH
21984: LD_VAR 0 4
21988: PPUSH
21989: LD_INT 20
21991: PPUSH
21992: CALL 13999 0 4
21996: PUSH
21997: LD_INT 4
21999: ARRAY
22000: IFFALSE 22004
// exit ;
22002: GO 22053
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22004: LD_VAR 0 2
22008: PUSH
22009: LD_INT 29
22011: PUSH
22012: LD_INT 30
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: IN
22019: PUSH
22020: LD_VAR 0 3
22024: PPUSH
22025: LD_VAR 0 4
22029: PPUSH
22030: LD_VAR 0 9
22034: PPUSH
22035: CALL_OW 440
22039: NOT
22040: AND
22041: IFFALSE 22045
// exit ;
22043: GO 22053
// result := true ;
22045: LD_ADDR_VAR 0 6
22049: PUSH
22050: LD_INT 1
22052: ST_TO_ADDR
// end ;
22053: LD_VAR 0 6
22057: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22058: LD_INT 0
22060: PPUSH
22061: PPUSH
22062: PPUSH
22063: PPUSH
22064: PPUSH
22065: PPUSH
22066: PPUSH
22067: PPUSH
22068: PPUSH
22069: PPUSH
22070: PPUSH
22071: PPUSH
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
22076: PPUSH
22077: PPUSH
22078: PPUSH
22079: PPUSH
22080: PPUSH
22081: PPUSH
22082: PPUSH
22083: PPUSH
22084: PPUSH
22085: PPUSH
22086: PPUSH
22087: PPUSH
22088: PPUSH
22089: PPUSH
22090: PPUSH
22091: PPUSH
22092: PPUSH
22093: PPUSH
22094: PPUSH
22095: PPUSH
22096: PPUSH
22097: PPUSH
22098: PPUSH
22099: PPUSH
22100: PPUSH
22101: PPUSH
22102: PPUSH
22103: PPUSH
22104: PPUSH
22105: PPUSH
22106: PPUSH
22107: PPUSH
22108: PPUSH
22109: PPUSH
22110: PPUSH
22111: PPUSH
22112: PPUSH
22113: PPUSH
22114: PPUSH
22115: PPUSH
22116: PPUSH
22117: PPUSH
// result = [ ] ;
22118: LD_ADDR_VAR 0 7
22122: PUSH
22123: EMPTY
22124: ST_TO_ADDR
// temp_list = [ ] ;
22125: LD_ADDR_VAR 0 9
22129: PUSH
22130: EMPTY
22131: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22132: LD_VAR 0 4
22136: PUSH
22137: LD_INT 0
22139: PUSH
22140: LD_INT 1
22142: PUSH
22143: LD_INT 2
22145: PUSH
22146: LD_INT 3
22148: PUSH
22149: LD_INT 4
22151: PUSH
22152: LD_INT 5
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: IN
22163: NOT
22164: PUSH
22165: LD_VAR 0 1
22169: PUSH
22170: LD_INT 0
22172: PUSH
22173: LD_INT 1
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: IN
22180: PUSH
22181: LD_VAR 0 5
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: LD_INT 2
22191: PUSH
22192: LD_INT 3
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: LIST
22199: IN
22200: NOT
22201: AND
22202: OR
22203: IFFALSE 22207
// exit ;
22205: GO 40598
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22207: LD_VAR 0 1
22211: PUSH
22212: LD_INT 6
22214: PUSH
22215: LD_INT 7
22217: PUSH
22218: LD_INT 8
22220: PUSH
22221: LD_INT 13
22223: PUSH
22224: LD_INT 12
22226: PUSH
22227: LD_INT 15
22229: PUSH
22230: LD_INT 11
22232: PUSH
22233: LD_INT 14
22235: PUSH
22236: LD_INT 10
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: IN
22250: IFFALSE 22260
// btype = b_lab ;
22252: LD_ADDR_VAR 0 1
22256: PUSH
22257: LD_INT 6
22259: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22260: LD_VAR 0 6
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: LD_INT 2
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: LIST
22278: IN
22279: NOT
22280: PUSH
22281: LD_VAR 0 1
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: LD_INT 3
22297: PUSH
22298: LD_INT 6
22300: PUSH
22301: LD_INT 36
22303: PUSH
22304: LD_INT 4
22306: PUSH
22307: LD_INT 5
22309: PUSH
22310: LD_INT 31
22312: PUSH
22313: LD_INT 32
22315: PUSH
22316: LD_INT 33
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: IN
22332: NOT
22333: PUSH
22334: LD_VAR 0 6
22338: PUSH
22339: LD_INT 1
22341: EQUAL
22342: AND
22343: OR
22344: PUSH
22345: LD_VAR 0 1
22349: PUSH
22350: LD_INT 2
22352: PUSH
22353: LD_INT 3
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: IN
22360: NOT
22361: PUSH
22362: LD_VAR 0 6
22366: PUSH
22367: LD_INT 2
22369: EQUAL
22370: AND
22371: OR
22372: IFFALSE 22382
// mode = 0 ;
22374: LD_ADDR_VAR 0 6
22378: PUSH
22379: LD_INT 0
22381: ST_TO_ADDR
// case mode of 0 :
22382: LD_VAR 0 6
22386: PUSH
22387: LD_INT 0
22389: DOUBLE
22390: EQUAL
22391: IFTRUE 22395
22393: GO 33848
22395: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22396: LD_ADDR_VAR 0 11
22400: PUSH
22401: LD_INT 0
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: LD_INT 0
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 1
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: LD_INT 0
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: NEG
22478: PUSH
22479: LD_INT 2
22481: NEG
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: LD_INT 2
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 1
22511: PUSH
22512: LD_INT 2
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: LD_INT 2
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: NEG
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: LD_INT 3
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: LD_INT 3
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: LD_INT 2
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22589: LD_ADDR_VAR 0 12
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: LD_INT 0
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 0
22606: PUSH
22607: LD_INT 1
22609: NEG
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: LD_INT 0
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 1
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 0
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 1
22647: NEG
22648: PUSH
22649: LD_INT 0
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 1
22658: NEG
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 1
22670: PUSH
22671: LD_INT 1
22673: NEG
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 2
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 1
22701: NEG
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 2
22712: NEG
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 2
22723: NEG
22724: PUSH
22725: LD_INT 1
22727: NEG
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 2
22735: NEG
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 3
22746: NEG
22747: PUSH
22748: LD_INT 0
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 3
22757: NEG
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22785: LD_ADDR_VAR 0 13
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: LD_INT 0
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: LD_INT 1
22858: NEG
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 1
22866: NEG
22867: PUSH
22868: LD_INT 2
22870: NEG
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 2
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 2
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: LD_INT 2
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 2
22908: NEG
22909: PUSH
22910: LD_INT 1
22912: NEG
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 2
22920: NEG
22921: PUSH
22922: LD_INT 2
22924: NEG
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 2
22932: NEG
22933: PUSH
22934: LD_INT 3
22936: NEG
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 3
22944: NEG
22945: PUSH
22946: LD_INT 2
22948: NEG
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 3
22956: NEG
22957: PUSH
22958: LD_INT 3
22960: NEG
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22984: LD_ADDR_VAR 0 14
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: LD_INT 1
23004: NEG
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: LD_INT 0
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: LD_INT 1
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 0
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 1
23042: NEG
23043: PUSH
23044: LD_INT 0
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 1
23053: NEG
23054: PUSH
23055: LD_INT 1
23057: NEG
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 1
23065: NEG
23066: PUSH
23067: LD_INT 2
23069: NEG
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 0
23077: PUSH
23078: LD_INT 2
23080: NEG
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 1
23088: PUSH
23089: LD_INT 1
23091: NEG
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: LD_INT 2
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: LD_INT 2
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 1
23119: NEG
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: NEG
23131: PUSH
23132: LD_INT 3
23134: NEG
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 0
23142: PUSH
23143: LD_INT 3
23145: NEG
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: LD_INT 2
23156: NEG
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23180: LD_ADDR_VAR 0 15
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: LD_INT 0
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: LD_INT 1
23200: NEG
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: LD_INT 0
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 1
23218: PUSH
23219: LD_INT 1
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: LD_INT 1
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 1
23238: NEG
23239: PUSH
23240: LD_INT 0
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: NEG
23250: PUSH
23251: LD_INT 1
23253: NEG
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: LD_INT 1
23264: NEG
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 2
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 1
23292: NEG
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 2
23303: NEG
23304: PUSH
23305: LD_INT 0
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 2
23314: NEG
23315: PUSH
23316: LD_INT 1
23318: NEG
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: LD_INT 1
23329: NEG
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 3
23337: PUSH
23338: LD_INT 0
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23373: LD_ADDR_VAR 0 16
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 0
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: LD_INT 0
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 1
23442: NEG
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 1
23454: NEG
23455: PUSH
23456: LD_INT 2
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 2
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: LD_INT 2
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 2
23496: NEG
23497: PUSH
23498: LD_INT 1
23500: NEG
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 2
23508: NEG
23509: PUSH
23510: LD_INT 2
23512: NEG
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 3
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 3
23530: PUSH
23531: LD_INT 3
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: LD_INT 3
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23566: LD_ADDR_VAR 0 17
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: LD_INT 0
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 0
23583: PUSH
23584: LD_INT 1
23586: NEG
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 1
23624: NEG
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 1
23635: NEG
23636: PUSH
23637: LD_INT 1
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: NEG
23648: PUSH
23649: LD_INT 2
23651: NEG
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 2
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 2
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 2
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: LD_INT 2
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: LD_INT 2
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 2
23742: NEG
23743: PUSH
23744: LD_INT 0
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 2
23753: NEG
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 2
23765: NEG
23766: PUSH
23767: LD_INT 2
23769: NEG
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23796: LD_ADDR_VAR 0 18
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: LD_INT 0
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: LD_INT 1
23816: NEG
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: LD_INT 1
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 1
23854: NEG
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: LD_INT 1
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: NEG
23878: PUSH
23879: LD_INT 2
23881: NEG
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 0
23889: PUSH
23890: LD_INT 2
23892: NEG
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 1
23900: PUSH
23901: LD_INT 1
23903: NEG
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 2
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 2
23931: PUSH
23932: LD_INT 2
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: LD_INT 2
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 0
23951: PUSH
23952: LD_INT 2
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 1
23961: NEG
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 2
23972: NEG
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 2
23983: NEG
23984: PUSH
23985: LD_INT 1
23987: NEG
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 2
23995: NEG
23996: PUSH
23997: LD_INT 2
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24026: LD_ADDR_VAR 0 19
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: LD_INT 0
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: LD_INT 1
24046: NEG
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: LD_INT 0
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: LD_INT 1
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 1
24084: NEG
24085: PUSH
24086: LD_INT 0
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: LD_INT 1
24099: NEG
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 1
24107: NEG
24108: PUSH
24109: LD_INT 2
24111: NEG
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 0
24119: PUSH
24120: LD_INT 2
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 2
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: LD_INT 2
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: LD_INT 2
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: LD_INT 2
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 2
24202: NEG
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: NEG
24214: PUSH
24215: LD_INT 1
24217: NEG
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 2
24225: NEG
24226: PUSH
24227: LD_INT 2
24229: NEG
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24256: LD_ADDR_VAR 0 20
24260: PUSH
24261: LD_INT 0
24263: PUSH
24264: LD_INT 0
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: LD_INT 1
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 1
24337: NEG
24338: PUSH
24339: LD_INT 2
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 0
24349: PUSH
24350: LD_INT 2
24352: NEG
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 2
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: LD_INT 2
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: LD_INT 2
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: LD_INT 2
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 1
24421: NEG
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 2
24432: NEG
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 2
24443: NEG
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 2
24455: NEG
24456: PUSH
24457: LD_INT 2
24459: NEG
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24486: LD_ADDR_VAR 0 21
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: LD_INT 0
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: LD_INT 1
24506: NEG
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: PUSH
24515: LD_INT 0
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 1
24524: PUSH
24525: LD_INT 1
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 0
24534: PUSH
24535: LD_INT 1
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 1
24544: NEG
24545: PUSH
24546: LD_INT 0
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 1
24555: NEG
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 1
24567: NEG
24568: PUSH
24569: LD_INT 2
24571: NEG
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 0
24579: PUSH
24580: LD_INT 2
24582: NEG
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: LD_INT 1
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 2
24601: PUSH
24602: LD_INT 0
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 2
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 1
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: LD_INT 2
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: NEG
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: NEG
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 2
24673: NEG
24674: PUSH
24675: LD_INT 1
24677: NEG
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24716: LD_ADDR_VAR 0 22
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 0
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 1
24774: NEG
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: NEG
24798: PUSH
24799: LD_INT 2
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 2
24851: PUSH
24852: LD_INT 2
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: LD_INT 2
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: LD_INT 1
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 2
24892: NEG
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: LD_INT 1
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: NEG
24916: PUSH
24917: LD_INT 2
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24946: LD_ADDR_VAR 0 23
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 0
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: LD_INT 0
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: LD_INT 2
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: LD_INT 2
25042: NEG
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 1
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 2
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 2
25081: PUSH
25082: LD_INT 2
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 1
25091: PUSH
25092: LD_INT 2
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: LD_INT 2
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: NEG
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 2
25122: NEG
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 2
25133: NEG
25134: PUSH
25135: LD_INT 1
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 2
25145: NEG
25146: PUSH
25147: LD_INT 2
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 2
25157: NEG
25158: PUSH
25159: LD_INT 3
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: NEG
25170: PUSH
25171: LD_INT 3
25173: NEG
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: LD_INT 2
25184: NEG
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 2
25192: PUSH
25193: LD_INT 1
25195: NEG
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25226: LD_ADDR_VAR 0 24
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: LD_INT 1
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 1
25284: NEG
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: NEG
25296: PUSH
25297: LD_INT 1
25299: NEG
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 1
25307: NEG
25308: PUSH
25309: LD_INT 2
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 2
25322: NEG
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: LD_INT 1
25333: NEG
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 2
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 2
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: LD_INT 2
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 1
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 0
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: LD_INT 1
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 2
25402: NEG
25403: PUSH
25404: LD_INT 0
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 2
25413: NEG
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 2
25425: NEG
25426: PUSH
25427: LD_INT 2
25429: NEG
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: LD_INT 2
25440: NEG
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 2
25448: PUSH
25449: LD_INT 1
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 3
25459: PUSH
25460: LD_INT 1
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 3
25469: PUSH
25470: LD_INT 2
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25502: LD_ADDR_VAR 0 25
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: LD_INT 1
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: LD_INT 1
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: LD_INT 2
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 0
25595: PUSH
25596: LD_INT 2
25598: NEG
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: LD_INT 1
25609: NEG
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 2
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 2
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 2
25637: PUSH
25638: LD_INT 2
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 1
25647: PUSH
25648: LD_INT 2
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: LD_INT 2
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 1
25667: NEG
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 2
25678: NEG
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 2
25689: NEG
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 2
25701: NEG
25702: PUSH
25703: LD_INT 2
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 3
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 3
25723: PUSH
25724: LD_INT 2
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: LD_INT 3
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: LD_INT 3
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25776: LD_ADDR_VAR 0 26
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: LD_INT 1
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 1
25834: NEG
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: LD_INT 1
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 1
25857: NEG
25858: PUSH
25859: LD_INT 2
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: LD_INT 2
25872: NEG
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 1
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 2
25911: PUSH
25912: LD_INT 2
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: LD_INT 2
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 2
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 2
25952: NEG
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 2
25963: NEG
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 2
25975: NEG
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 3
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: LD_INT 3
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 2
26018: NEG
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26052: LD_ADDR_VAR 0 27
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: LD_INT 1
26072: NEG
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 1
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: LD_INT 1
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 1
26110: NEG
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 1
26121: NEG
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: LD_INT 2
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 2
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 2
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 2
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 2
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 1
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 0
26207: PUSH
26208: LD_INT 2
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: NEG
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 2
26228: NEG
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: NEG
26240: PUSH
26241: LD_INT 1
26243: NEG
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 2
26251: NEG
26252: PUSH
26253: LD_INT 2
26255: NEG
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 1
26263: NEG
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 2
26274: NEG
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 3
26285: NEG
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 3
26297: NEG
26298: PUSH
26299: LD_INT 2
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26332: LD_ADDR_VAR 0 28
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 0
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 1
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: LD_INT 0
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PUSH
26403: LD_INT 1
26405: NEG
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: LD_INT 2
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: LD_INT 2
26428: NEG
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 1
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 2
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 2
26467: PUSH
26468: LD_INT 2
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 0
26487: PUSH
26488: LD_INT 2
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 2
26508: NEG
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 2
26519: NEG
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: NEG
26532: PUSH
26533: LD_INT 2
26535: NEG
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: NEG
26544: PUSH
26545: LD_INT 3
26547: NEG
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: LD_INT 3
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 3
26567: NEG
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 3
26579: NEG
26580: PUSH
26581: LD_INT 2
26583: NEG
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26614: LD_ADDR_VAR 0 29
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 1
26634: NEG
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: LD_INT 2
26699: NEG
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: LD_INT 2
26710: NEG
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 2
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 2
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: LD_INT 2
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 1
26769: NEG
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 2
26780: NEG
26781: PUSH
26782: LD_INT 1
26784: NEG
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 2
26792: NEG
26793: PUSH
26794: LD_INT 2
26796: NEG
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 2
26804: NEG
26805: PUSH
26806: LD_INT 3
26808: NEG
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 2
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 3
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: LD_INT 3
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 3
26858: NEG
26859: PUSH
26860: LD_INT 2
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26893: LD_ADDR_VAR 0 30
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: LD_INT 1
26966: NEG
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: LD_INT 2
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: LD_INT 2
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 2
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 2
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 2
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 2
27059: NEG
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 2
27070: NEG
27071: PUSH
27072: LD_INT 1
27074: NEG
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: LD_INT 3
27086: NEG
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 1
27094: PUSH
27095: LD_INT 2
27097: NEG
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 3
27105: PUSH
27106: LD_INT 2
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 2
27115: PUSH
27116: LD_INT 3
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: NEG
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 3
27136: NEG
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27171: LD_ADDR_VAR 0 31
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: LD_INT 0
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: NEG
27241: PUSH
27242: LD_INT 1
27244: NEG
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 1
27252: NEG
27253: PUSH
27254: LD_INT 2
27256: NEG
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 2
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 2
27295: PUSH
27296: LD_INT 2
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: LD_INT 2
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: LD_INT 2
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 2
27336: NEG
27337: PUSH
27338: LD_INT 1
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 2
27348: NEG
27349: PUSH
27350: LD_INT 2
27352: NEG
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 2
27360: NEG
27361: PUSH
27362: LD_INT 3
27364: NEG
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 2
27372: PUSH
27373: LD_INT 1
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 3
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: NEG
27404: PUSH
27405: LD_INT 2
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 3
27414: NEG
27415: PUSH
27416: LD_INT 2
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27449: LD_ADDR_VAR 0 32
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 1
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 1
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: NEG
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: NEG
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 1
27530: NEG
27531: PUSH
27532: LD_INT 2
27534: NEG
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: LD_INT 2
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 2
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 2
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: LD_INT 2
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 2
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: NEG
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 2
27626: NEG
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 1
27638: NEG
27639: PUSH
27640: LD_INT 3
27642: NEG
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: LD_INT 2
27653: NEG
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 3
27661: PUSH
27662: LD_INT 2
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 2
27671: PUSH
27672: LD_INT 3
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 2
27681: NEG
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 3
27692: NEG
27693: PUSH
27694: LD_INT 1
27696: NEG
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27727: LD_ADDR_VAR 0 33
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: PUSH
27810: LD_INT 2
27812: NEG
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 2
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 2
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: LD_INT 2
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 2
27882: NEG
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 2
27893: NEG
27894: PUSH
27895: LD_INT 1
27897: NEG
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: NEG
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: NEG
27918: PUSH
27919: LD_INT 3
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 3
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: LD_INT 3
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: LD_INT 2
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 3
27971: NEG
27972: PUSH
27973: LD_INT 2
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28006: LD_ADDR_VAR 0 34
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: LD_INT 0
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: LD_INT 1
28026: NEG
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: LD_INT 0
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: NEG
28076: PUSH
28077: LD_INT 1
28079: NEG
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: NEG
28088: PUSH
28089: LD_INT 2
28091: NEG
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 0
28099: PUSH
28100: LD_INT 2
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 1
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 2
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: LD_INT 2
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 2
28162: NEG
28163: PUSH
28164: LD_INT 0
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: NEG
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 2
28185: NEG
28186: PUSH
28187: LD_INT 2
28189: NEG
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 1
28197: NEG
28198: PUSH
28199: LD_INT 3
28201: NEG
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: LD_INT 2
28212: NEG
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 3
28220: PUSH
28221: LD_INT 2
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: LD_INT 3
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: NEG
28241: PUSH
28242: LD_INT 1
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 3
28251: NEG
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28286: LD_ADDR_VAR 0 35
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: LD_INT 1
28306: NEG
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 1
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 0
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 1
28344: NEG
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: LD_INT 1
28359: NEG
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 2
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 2
28377: NEG
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28398: LD_ADDR_VAR 0 36
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 1
28456: NEG
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: LD_INT 2
28483: NEG
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 1
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28510: LD_ADDR_VAR 0 37
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: LD_INT 0
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 1
28568: NEG
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: LD_INT 1
28594: NEG
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 1
28602: NEG
28603: PUSH
28604: LD_INT 1
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28622: LD_ADDR_VAR 0 38
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 1
28691: NEG
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 2
28713: NEG
28714: PUSH
28715: LD_INT 1
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28734: LD_ADDR_VAR 0 39
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: LD_INT 2
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: LD_INT 2
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28846: LD_ADDR_VAR 0 40
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28958: LD_ADDR_VAR 0 41
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: LD_INT 0
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: LD_INT 1
28978: NEG
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: LD_INT 1
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 1
29016: NEG
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 1
29027: NEG
29028: PUSH
29029: LD_INT 1
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: PUSH
29052: LD_INT 1
29054: NEG
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 2
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 2
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 2
29082: PUSH
29083: LD_INT 2
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: LD_INT 2
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: NEG
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 2
29113: NEG
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 2
29124: NEG
29125: PUSH
29126: LD_INT 1
29128: NEG
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 2
29136: NEG
29137: PUSH
29138: LD_INT 2
29140: NEG
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 2
29148: NEG
29149: PUSH
29150: LD_INT 3
29152: NEG
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 2
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 3
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 3
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 3
29191: PUSH
29192: LD_INT 2
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 3
29201: PUSH
29202: LD_INT 3
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 2
29211: PUSH
29212: LD_INT 3
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 2
29221: NEG
29222: PUSH
29223: LD_INT 1
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 3
29232: NEG
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 3
29243: NEG
29244: PUSH
29245: LD_INT 1
29247: NEG
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 3
29255: NEG
29256: PUSH
29257: LD_INT 2
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 3
29267: NEG
29268: PUSH
29269: LD_INT 3
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29308: LD_ADDR_VAR 0 42
29312: PUSH
29313: LD_INT 0
29315: PUSH
29316: LD_INT 0
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: LD_INT 1
29328: NEG
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: LD_INT 1
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: LD_INT 1
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 1
29366: NEG
29367: PUSH
29368: LD_INT 0
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 1
29389: NEG
29390: PUSH
29391: LD_INT 2
29393: NEG
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: PUSH
29413: LD_INT 1
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 2
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 2
29433: PUSH
29434: LD_INT 2
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: LD_INT 2
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: LD_INT 2
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 2
29474: NEG
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 2
29486: NEG
29487: PUSH
29488: LD_INT 2
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 2
29498: NEG
29499: PUSH
29500: LD_INT 3
29502: NEG
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: LD_INT 3
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: LD_INT 3
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: LD_INT 2
29536: NEG
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 3
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 3
29554: PUSH
29555: LD_INT 3
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 2
29564: PUSH
29565: LD_INT 3
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: LD_INT 3
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: LD_INT 3
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: LD_INT 2
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 3
29605: NEG
29606: PUSH
29607: LD_INT 2
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 3
29617: NEG
29618: PUSH
29619: LD_INT 3
29621: NEG
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29658: LD_ADDR_VAR 0 43
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: LD_INT 0
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: LD_INT 1
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 1
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: NEG
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 1
29739: NEG
29740: PUSH
29741: LD_INT 2
29743: NEG
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: LD_INT 2
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: PUSH
29763: LD_INT 1
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 2
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: LD_INT 1
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: LD_INT 2
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 0
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 2
29824: NEG
29825: PUSH
29826: LD_INT 0
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 2
29835: NEG
29836: PUSH
29837: LD_INT 1
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: NEG
29848: PUSH
29849: LD_INT 3
29851: NEG
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 0
29859: PUSH
29860: LD_INT 3
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: LD_INT 2
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 2
29881: PUSH
29882: LD_INT 1
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 3
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: LD_INT 3
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: LD_INT 3
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 1
29932: NEG
29933: PUSH
29934: LD_INT 2
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 3
29954: NEG
29955: PUSH
29956: LD_INT 0
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 3
29965: NEG
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30006: LD_ADDR_VAR 0 44
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: LD_INT 1
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: LD_INT 1
30079: NEG
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: LD_INT 2
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 2
30130: PUSH
30131: LD_INT 2
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: LD_INT 2
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 1
30150: NEG
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: NEG
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 2
30196: NEG
30197: PUSH
30198: LD_INT 3
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 2
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 3
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 3
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 3
30239: PUSH
30240: LD_INT 2
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 3
30249: PUSH
30250: LD_INT 3
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 2
30259: PUSH
30260: LD_INT 3
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 2
30269: NEG
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 3
30280: NEG
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 3
30291: NEG
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 3
30303: NEG
30304: PUSH
30305: LD_INT 2
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 3
30315: NEG
30316: PUSH
30317: LD_INT 3
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30356: LD_ADDR_VAR 0 45
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 1
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 2
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 1
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 0
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 2
30534: NEG
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 2
30546: NEG
30547: PUSH
30548: LD_INT 3
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 1
30558: NEG
30559: PUSH
30560: LD_INT 3
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: LD_INT 3
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 2
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 3
30592: PUSH
30593: LD_INT 2
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 3
30602: PUSH
30603: LD_INT 3
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 2
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: LD_INT 3
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 3
30653: NEG
30654: PUSH
30655: LD_INT 2
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 3
30665: NEG
30666: PUSH
30667: LD_INT 3
30669: NEG
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30706: LD_ADDR_VAR 0 46
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: LD_INT 2
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: LD_INT 2
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 1
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 2
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: LD_INT 2
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 0
30851: PUSH
30852: LD_INT 2
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 1
30861: NEG
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 2
30872: NEG
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 2
30883: NEG
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: LD_INT 3
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: LD_INT 3
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: LD_INT 2
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 3
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 3
30950: PUSH
30951: LD_INT 1
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: LD_INT 3
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: LD_INT 3
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: NEG
30981: PUSH
30982: LD_INT 2
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 3
31002: NEG
31003: PUSH
31004: LD_INT 0
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 3
31013: NEG
31014: PUSH
31015: LD_INT 1
31017: NEG
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31054: LD_ADDR_VAR 0 47
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: LD_INT 1
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: LD_INT 1
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: LD_INT 2
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 2
31169: NEG
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: NEG
31182: PUSH
31183: LD_INT 2
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31205: LD_ADDR_VAR 0 48
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 0
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: LD_INT 1
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: PUSH
31288: LD_INT 2
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: LD_INT 2
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31352: LD_ADDR_VAR 0 49
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 2
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: LD_INT 2
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31496: LD_ADDR_VAR 0 50
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: LD_INT 0
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: LD_INT 1
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: LD_INT 1
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: LD_INT 1
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31640: LD_ADDR_VAR 0 51
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: LD_INT 2
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 1
31741: NEG
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 2
31752: NEG
31753: PUSH
31754: LD_INT 0
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 2
31763: NEG
31764: PUSH
31765: LD_INT 1
31767: NEG
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31787: LD_ADDR_VAR 0 52
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: LD_INT 1
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 1
31868: NEG
31869: PUSH
31870: LD_INT 2
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 2
31902: NEG
31903: PUSH
31904: LD_INT 1
31906: NEG
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 2
31914: NEG
31915: PUSH
31916: LD_INT 2
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31938: LD_ADDR_VAR 0 53
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 1
31996: NEG
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: LD_INT 2
32023: NEG
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: LD_INT 2
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: LD_INT 2
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: LD_INT 1
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 2
32114: NEG
32115: PUSH
32116: LD_INT 0
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 2
32125: NEG
32126: PUSH
32127: LD_INT 1
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: LD_INT 2
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32168: LD_ADDR_VAR 0 54
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 0
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: LD_INT 1
32188: NEG
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 0
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: LD_INT 2
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 0
32261: PUSH
32262: LD_INT 2
32264: NEG
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: LD_INT 1
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 2
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: LD_INT 2
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 1
32333: NEG
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: NEG
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 2
32367: NEG
32368: PUSH
32369: LD_INT 2
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32398: LD_ADDR_VAR 0 55
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 0
32415: PUSH
32416: LD_INT 1
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: LD_INT 1
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 1
32456: NEG
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: LD_INT 2
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 2
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 2
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 2
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 1
32543: PUSH
32544: LD_INT 2
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: LD_INT 2
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 2
32574: NEG
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 2
32585: NEG
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: LD_INT 2
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32628: LD_ADDR_VAR 0 56
32632: PUSH
32633: LD_INT 0
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 0
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 1
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: LD_INT 1
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: LD_INT 0
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 1
32709: NEG
32710: PUSH
32711: LD_INT 2
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: LD_INT 2
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 1
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 2
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: LD_INT 2
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: PUSH
32774: LD_INT 2
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: LD_INT 2
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 1
32793: NEG
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 2
32804: NEG
32805: PUSH
32806: LD_INT 0
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: LD_INT 1
32819: NEG
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 2
32827: NEG
32828: PUSH
32829: LD_INT 2
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32858: LD_ADDR_VAR 0 57
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: LD_INT 0
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: LD_INT 1
32878: NEG
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: LD_INT 0
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: NEG
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: LD_INT 2
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 0
32951: PUSH
32952: LD_INT 2
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: LD_INT 2
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 2
33034: NEG
33035: PUSH
33036: LD_INT 0
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 2
33057: NEG
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33088: LD_ADDR_VAR 0 58
33092: PUSH
33093: LD_INT 0
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 0
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 1
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: NEG
33147: PUSH
33148: LD_INT 0
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: LD_INT 1
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 1
33169: NEG
33170: PUSH
33171: LD_INT 2
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 2
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 2
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: LD_INT 2
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 2
33264: NEG
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: NEG
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 2
33287: NEG
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33318: LD_ADDR_VAR 0 59
33322: PUSH
33323: LD_INT 0
33325: PUSH
33326: LD_INT 0
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: LD_INT 1
33338: NEG
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: LD_INT 0
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: LD_INT 1
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33406: LD_ADDR_VAR 0 60
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: LD_INT 0
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 0
33423: PUSH
33424: LD_INT 1
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: LD_INT 1
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 1
33464: NEG
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: LD_INT 1
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33494: LD_ADDR_VAR 0 61
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 1
33563: NEG
33564: PUSH
33565: LD_INT 1
33567: NEG
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33582: LD_ADDR_VAR 0 62
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33670: LD_ADDR_VAR 0 63
33674: PUSH
33675: LD_INT 0
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 1
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PUSH
33730: LD_INT 0
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33758: LD_ADDR_VAR 0 64
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: NEG
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 1
33827: NEG
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: ST_TO_ADDR
// end ; 1 :
33846: GO 39743
33848: LD_INT 1
33850: DOUBLE
33851: EQUAL
33852: IFTRUE 33856
33854: GO 36479
33856: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33857: LD_ADDR_VAR 0 11
33861: PUSH
33862: LD_INT 1
33864: NEG
33865: PUSH
33866: LD_INT 3
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: LD_INT 3
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: PUSH
33888: LD_INT 2
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33901: LD_ADDR_VAR 0 12
33905: PUSH
33906: LD_INT 2
33908: PUSH
33909: LD_INT 1
33911: NEG
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 3
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 3
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: LIST
33941: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33942: LD_ADDR_VAR 0 13
33946: PUSH
33947: LD_INT 3
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 3
33959: PUSH
33960: LD_INT 3
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 2
33969: PUSH
33970: LD_INT 3
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: LIST
33981: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33982: LD_ADDR_VAR 0 14
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: LD_INT 3
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: LD_INT 3
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: LIST
34022: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34023: LD_ADDR_VAR 0 15
34027: PUSH
34028: LD_INT 2
34030: NEG
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 3
34041: NEG
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 3
34052: NEG
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: LIST
34066: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34067: LD_ADDR_VAR 0 16
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 3
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 3
34086: NEG
34087: PUSH
34088: LD_INT 2
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 3
34098: NEG
34099: PUSH
34100: LD_INT 3
34102: NEG
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: LIST
34112: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34113: LD_ADDR_VAR 0 17
34117: PUSH
34118: LD_INT 1
34120: NEG
34121: PUSH
34122: LD_INT 3
34124: NEG
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: LD_INT 3
34135: NEG
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: LD_INT 2
34146: NEG
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34157: LD_ADDR_VAR 0 18
34161: PUSH
34162: LD_INT 2
34164: PUSH
34165: LD_INT 1
34167: NEG
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 3
34175: PUSH
34176: LD_INT 0
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 3
34185: PUSH
34186: LD_INT 1
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34198: LD_ADDR_VAR 0 19
34202: PUSH
34203: LD_INT 3
34205: PUSH
34206: LD_INT 2
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 3
34215: PUSH
34216: LD_INT 3
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: LD_INT 3
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: LIST
34237: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34238: LD_ADDR_VAR 0 20
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: LD_INT 3
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: LIST
34278: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34279: LD_ADDR_VAR 0 21
34283: PUSH
34284: LD_INT 2
34286: NEG
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 3
34297: NEG
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 3
34308: NEG
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34323: LD_ADDR_VAR 0 22
34327: PUSH
34328: LD_INT 2
34330: NEG
34331: PUSH
34332: LD_INT 3
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 3
34342: NEG
34343: PUSH
34344: LD_INT 2
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 3
34354: NEG
34355: PUSH
34356: LD_INT 3
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: LIST
34368: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34369: LD_ADDR_VAR 0 23
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: LD_INT 3
34379: NEG
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: LD_INT 4
34391: NEG
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: LD_INT 3
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: LIST
34412: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34413: LD_ADDR_VAR 0 24
34417: PUSH
34418: LD_INT 3
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 3
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 4
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34454: LD_ADDR_VAR 0 25
34458: PUSH
34459: LD_INT 3
34461: PUSH
34462: LD_INT 3
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 4
34471: PUSH
34472: LD_INT 3
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 3
34481: PUSH
34482: LD_INT 4
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: LIST
34493: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34494: LD_ADDR_VAR 0 26
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: LD_INT 3
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: LD_INT 4
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: LD_INT 3
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: LIST
34534: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34535: LD_ADDR_VAR 0 27
34539: PUSH
34540: LD_INT 3
34542: NEG
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 3
34553: NEG
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 4
34564: NEG
34565: PUSH
34566: LD_INT 1
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: LIST
34578: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34579: LD_ADDR_VAR 0 28
34583: PUSH
34584: LD_INT 3
34586: NEG
34587: PUSH
34588: LD_INT 3
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 3
34598: NEG
34599: PUSH
34600: LD_INT 4
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 4
34610: NEG
34611: PUSH
34612: LD_INT 3
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34625: LD_ADDR_VAR 0 29
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: LD_INT 3
34636: NEG
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: LD_INT 3
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: LD_INT 2
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: LD_INT 4
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: LD_INT 4
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: LD_INT 3
34692: NEG
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: LD_INT 5
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: LD_INT 5
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: LD_INT 4
34726: NEG
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: LD_INT 6
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 6
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: LD_INT 5
34760: NEG
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34780: LD_ADDR_VAR 0 30
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 3
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 3
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 3
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 4
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 4
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 4
34849: PUSH
34850: LD_INT 1
34852: NEG
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 5
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 5
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 5
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 6
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 6
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34923: LD_ADDR_VAR 0 31
34927: PUSH
34928: LD_INT 3
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 3
34940: PUSH
34941: LD_INT 3
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: LD_INT 3
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 4
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 4
34970: PUSH
34971: LD_INT 4
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 3
34980: PUSH
34981: LD_INT 4
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 5
34990: PUSH
34991: LD_INT 4
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 5
35000: PUSH
35001: LD_INT 5
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 4
35010: PUSH
35011: LD_INT 5
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 6
35020: PUSH
35021: LD_INT 5
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 6
35030: PUSH
35031: LD_INT 6
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 5
35040: PUSH
35041: LD_INT 6
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35062: LD_ADDR_VAR 0 32
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: LD_INT 3
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: LD_INT 3
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 1
35100: PUSH
35101: LD_INT 4
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: LD_INT 4
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: LD_INT 3
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: LD_INT 5
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: LD_INT 5
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: LD_INT 4
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: PUSH
35163: LD_INT 6
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: LD_INT 6
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: LD_INT 5
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35205: LD_ADDR_VAR 0 33
35209: PUSH
35210: LD_INT 2
35212: NEG
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 3
35223: NEG
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 3
35234: NEG
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 3
35246: NEG
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 4
35257: NEG
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 4
35268: NEG
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 4
35280: NEG
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 5
35291: NEG
35292: PUSH
35293: LD_INT 0
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 5
35302: NEG
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 5
35314: NEG
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 6
35325: NEG
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 6
35336: NEG
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35360: LD_ADDR_VAR 0 34
35364: PUSH
35365: LD_INT 2
35367: NEG
35368: PUSH
35369: LD_INT 3
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 3
35379: NEG
35380: PUSH
35381: LD_INT 2
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 3
35391: NEG
35392: PUSH
35393: LD_INT 3
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 3
35403: NEG
35404: PUSH
35405: LD_INT 4
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 4
35415: NEG
35416: PUSH
35417: LD_INT 3
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 4
35427: NEG
35428: PUSH
35429: LD_INT 4
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 4
35439: NEG
35440: PUSH
35441: LD_INT 5
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 5
35451: NEG
35452: PUSH
35453: LD_INT 4
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 5
35463: NEG
35464: PUSH
35465: LD_INT 5
35467: NEG
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 5
35475: NEG
35476: PUSH
35477: LD_INT 6
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 6
35487: NEG
35488: PUSH
35489: LD_INT 5
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 6
35499: NEG
35500: PUSH
35501: LD_INT 6
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35523: LD_ADDR_VAR 0 41
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: LD_INT 2
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: LD_INT 3
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: LD_INT 2
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35567: LD_ADDR_VAR 0 42
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 3
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35608: LD_ADDR_VAR 0 43
35612: PUSH
35613: LD_INT 2
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 3
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: LD_INT 3
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: LIST
35647: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35648: LD_ADDR_VAR 0 44
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: LD_INT 3
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35689: LD_ADDR_VAR 0 45
35693: PUSH
35694: LD_INT 2
35696: NEG
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 2
35707: NEG
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 3
35718: NEG
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: LIST
35732: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35733: LD_ADDR_VAR 0 46
35737: PUSH
35738: LD_INT 2
35740: NEG
35741: PUSH
35742: LD_INT 2
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 2
35752: NEG
35753: PUSH
35754: LD_INT 3
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 3
35764: NEG
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35779: LD_ADDR_VAR 0 47
35783: PUSH
35784: LD_INT 2
35786: NEG
35787: PUSH
35788: LD_INT 3
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 1
35798: NEG
35799: PUSH
35800: LD_INT 3
35802: NEG
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35812: LD_ADDR_VAR 0 48
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: LD_INT 2
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35843: LD_ADDR_VAR 0 49
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 3
35860: PUSH
35861: LD_INT 2
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35872: LD_ADDR_VAR 0 50
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 3
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35901: LD_ADDR_VAR 0 51
35905: PUSH
35906: LD_INT 1
35908: NEG
35909: PUSH
35910: LD_INT 2
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 2
35919: NEG
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35932: LD_ADDR_VAR 0 52
35936: PUSH
35937: LD_INT 3
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 3
35951: NEG
35952: PUSH
35953: LD_INT 2
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35965: LD_ADDR_VAR 0 53
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: LD_INT 3
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: LD_INT 3
35987: NEG
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36009: LD_ADDR_VAR 0 54
36013: PUSH
36014: LD_INT 2
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 3
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 3
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36050: LD_ADDR_VAR 0 55
36054: PUSH
36055: LD_INT 3
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 3
36067: PUSH
36068: LD_INT 3
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 2
36077: PUSH
36078: LD_INT 3
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36090: LD_ADDR_VAR 0 56
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: LD_INT 3
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: LD_INT 3
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: LIST
36130: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36131: LD_ADDR_VAR 0 57
36135: PUSH
36136: LD_INT 2
36138: NEG
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 3
36149: NEG
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 3
36160: NEG
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36175: LD_ADDR_VAR 0 58
36179: PUSH
36180: LD_INT 2
36182: NEG
36183: PUSH
36184: LD_INT 3
36186: NEG
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 3
36194: NEG
36195: PUSH
36196: LD_INT 2
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 3
36206: NEG
36207: PUSH
36208: LD_INT 3
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: LIST
36220: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36221: LD_ADDR_VAR 0 59
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: LIST
36264: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36265: LD_ADDR_VAR 0 60
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: LD_INT 0
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36306: LD_ADDR_VAR 0 61
36310: PUSH
36311: LD_INT 2
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 2
36323: PUSH
36324: LD_INT 2
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: LIST
36345: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36346: LD_ADDR_VAR 0 62
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: LD_INT 2
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: LIST
36386: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36387: LD_ADDR_VAR 0 63
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: LD_INT 1
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 2
36405: NEG
36406: PUSH
36407: LD_INT 0
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 2
36416: NEG
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: LIST
36430: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36431: LD_ADDR_VAR 0 64
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: LD_INT 2
36442: NEG
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 2
36450: NEG
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 2
36462: NEG
36463: PUSH
36464: LD_INT 2
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: ST_TO_ADDR
// end ; 2 :
36477: GO 39743
36479: LD_INT 2
36481: DOUBLE
36482: EQUAL
36483: IFTRUE 36487
36485: GO 39742
36487: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36488: LD_ADDR_VAR 0 29
36492: PUSH
36493: LD_INT 4
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 4
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 5
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 5
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 4
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 3
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 3
36567: PUSH
36568: LD_INT 2
36570: NEG
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 5
36578: PUSH
36579: LD_INT 2
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 3
36588: PUSH
36589: LD_INT 3
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 3
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 4
36608: PUSH
36609: LD_INT 3
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 4
36618: PUSH
36619: LD_INT 4
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 3
36628: PUSH
36629: LD_INT 4
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: LD_INT 3
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 4
36658: PUSH
36659: LD_INT 2
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: LD_INT 4
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: LD_INT 4
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: LD_INT 3
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: LD_INT 4
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 5
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 5
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: LD_INT 4
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: LD_INT 3
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: LD_INT 5
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 2
36760: NEG
36761: PUSH
36762: LD_INT 3
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 3
36771: NEG
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 3
36782: NEG
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: NEG
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 2
36805: NEG
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 3
36816: NEG
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 4
36827: NEG
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 4
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 4
36850: NEG
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 4
36873: NEG
36874: PUSH
36875: LD_INT 4
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 4
36885: NEG
36886: PUSH
36887: LD_INT 5
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 3
36897: NEG
36898: PUSH
36899: LD_INT 4
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 3
36909: NEG
36910: PUSH
36911: LD_INT 3
36913: NEG
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 4
36921: NEG
36922: PUSH
36923: LD_INT 3
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 5
36933: NEG
36934: PUSH
36935: LD_INT 4
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 5
36945: NEG
36946: PUSH
36947: LD_INT 5
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 3
36957: NEG
36958: PUSH
36959: LD_INT 5
36961: NEG
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 5
36969: NEG
36970: PUSH
36971: LD_INT 3
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37026: LD_ADDR_VAR 0 30
37030: PUSH
37031: LD_INT 4
37033: PUSH
37034: LD_INT 4
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 4
37043: PUSH
37044: LD_INT 3
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 5
37053: PUSH
37054: LD_INT 4
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 5
37063: PUSH
37064: LD_INT 5
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 4
37073: PUSH
37074: LD_INT 5
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 3
37083: PUSH
37084: LD_INT 4
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 3
37093: PUSH
37094: LD_INT 3
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 5
37103: PUSH
37104: LD_INT 3
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 3
37113: PUSH
37114: LD_INT 5
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 3
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: LD_INT 3
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: LD_INT 4
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: LD_INT 4
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: LD_INT 3
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: LD_INT 2
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: LD_INT 4
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: NEG
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 4
37216: NEG
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 4
37227: NEG
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 3
37239: NEG
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 3
37250: NEG
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 4
37261: NEG
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 5
37272: NEG
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 5
37283: NEG
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 5
37295: NEG
37296: PUSH
37297: LD_INT 2
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 3
37307: NEG
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 3
37318: NEG
37319: PUSH
37320: LD_INT 3
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 3
37330: NEG
37331: PUSH
37332: LD_INT 4
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 2
37342: NEG
37343: PUSH
37344: LD_INT 3
37346: NEG
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 2
37354: NEG
37355: PUSH
37356: LD_INT 2
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 3
37366: NEG
37367: PUSH
37368: LD_INT 2
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 4
37378: NEG
37379: PUSH
37380: LD_INT 3
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 4
37390: NEG
37391: PUSH
37392: LD_INT 4
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 2
37402: NEG
37403: PUSH
37404: LD_INT 4
37406: NEG
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 4
37414: NEG
37415: PUSH
37416: LD_INT 2
37418: NEG
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: LD_INT 4
37429: NEG
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: LD_INT 5
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: LD_INT 4
37451: NEG
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: LD_INT 3
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: LD_INT 3
37473: NEG
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: LD_INT 4
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: LD_INT 5
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 3
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 2
37516: NEG
37517: PUSH
37518: LD_INT 5
37520: NEG
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37573: LD_ADDR_VAR 0 31
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: LD_INT 4
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 3
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 4
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: LD_INT 5
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: LD_INT 5
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: LD_INT 4
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: LD_INT 3
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: LD_INT 5
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 2
37662: NEG
37663: PUSH
37664: LD_INT 3
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 3
37673: NEG
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 3
37684: NEG
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 2
37696: NEG
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 3
37718: NEG
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 4
37729: NEG
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 4
37740: NEG
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 4
37752: NEG
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 2
37764: NEG
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 4
37775: NEG
37776: PUSH
37777: LD_INT 4
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 4
37787: NEG
37788: PUSH
37789: LD_INT 5
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 3
37799: NEG
37800: PUSH
37801: LD_INT 4
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 3
37811: NEG
37812: PUSH
37813: LD_INT 3
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 4
37823: NEG
37824: PUSH
37825: LD_INT 3
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 5
37835: NEG
37836: PUSH
37837: LD_INT 4
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 5
37847: NEG
37848: PUSH
37849: LD_INT 5
37851: NEG
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 3
37859: NEG
37860: PUSH
37861: LD_INT 5
37863: NEG
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 5
37871: NEG
37872: PUSH
37873: LD_INT 3
37875: NEG
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: LD_INT 3
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: LD_INT 4
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: LD_INT 3
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 1
37916: PUSH
37917: LD_INT 2
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 3
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: LD_INT 4
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 2
37962: PUSH
37963: LD_INT 2
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 2
37973: NEG
37974: PUSH
37975: LD_INT 4
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 4
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 4
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 5
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 5
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 4
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 3
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 3
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 3
38057: PUSH
38058: LD_INT 2
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 5
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38123: LD_ADDR_VAR 0 32
38127: PUSH
38128: LD_INT 4
38130: NEG
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 4
38141: NEG
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 3
38153: NEG
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 3
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 4
38175: NEG
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 5
38186: NEG
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 5
38197: NEG
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 5
38209: NEG
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 3
38221: NEG
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 3
38232: NEG
38233: PUSH
38234: LD_INT 3
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 3
38244: NEG
38245: PUSH
38246: LD_INT 4
38248: NEG
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 2
38256: NEG
38257: PUSH
38258: LD_INT 3
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 2
38268: NEG
38269: PUSH
38270: LD_INT 2
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 3
38280: NEG
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 4
38292: NEG
38293: PUSH
38294: LD_INT 3
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 4
38304: NEG
38305: PUSH
38306: LD_INT 4
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: NEG
38317: PUSH
38318: LD_INT 4
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 4
38328: NEG
38329: PUSH
38330: LD_INT 2
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 4
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: LD_INT 5
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: LD_INT 4
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 3
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: LD_INT 3
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 1
38395: NEG
38396: PUSH
38397: LD_INT 4
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: LD_INT 5
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: LD_INT 3
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 2
38430: NEG
38431: PUSH
38432: LD_INT 5
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 3
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 3
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 4
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 4
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 3
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 2
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 2
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: LD_INT 2
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 4
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 4
38535: PUSH
38536: LD_INT 4
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 4
38545: PUSH
38546: LD_INT 3
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 5
38555: PUSH
38556: LD_INT 4
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 5
38565: PUSH
38566: LD_INT 5
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 4
38575: PUSH
38576: LD_INT 5
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 3
38585: PUSH
38586: LD_INT 4
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 3
38595: PUSH
38596: LD_INT 3
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 5
38605: PUSH
38606: LD_INT 3
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 3
38615: PUSH
38616: LD_INT 5
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38670: LD_ADDR_VAR 0 33
38674: PUSH
38675: LD_INT 4
38677: NEG
38678: PUSH
38679: LD_INT 4
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 4
38689: NEG
38690: PUSH
38691: LD_INT 5
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 3
38701: NEG
38702: PUSH
38703: LD_INT 4
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 3
38713: NEG
38714: PUSH
38715: LD_INT 3
38717: NEG
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 4
38725: NEG
38726: PUSH
38727: LD_INT 3
38729: NEG
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 5
38737: NEG
38738: PUSH
38739: LD_INT 4
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 5
38749: NEG
38750: PUSH
38751: LD_INT 5
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 3
38761: NEG
38762: PUSH
38763: LD_INT 5
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 5
38773: NEG
38774: PUSH
38775: LD_INT 3
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: LD_INT 3
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 0
38796: PUSH
38797: LD_INT 4
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: LD_INT 3
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: LD_INT 2
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: LD_INT 2
38832: NEG
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: LD_INT 3
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: LD_INT 4
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 2
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 2
38875: NEG
38876: PUSH
38877: LD_INT 4
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 4
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 4
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 5
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 5
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 4
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 3
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 3
38948: PUSH
38949: LD_INT 1
38951: NEG
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 3
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 5
38970: PUSH
38971: LD_INT 2
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 3
38980: PUSH
38981: LD_INT 3
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 3
38990: PUSH
38991: LD_INT 2
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 4
39000: PUSH
39001: LD_INT 3
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 4
39010: PUSH
39011: LD_INT 4
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 3
39020: PUSH
39021: LD_INT 4
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 3
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: LD_INT 2
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 4
39050: PUSH
39051: LD_INT 2
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: LD_INT 4
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 4
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: LD_INT 3
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: LD_INT 4
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: LD_INT 5
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: LD_INT 5
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: LD_INT 4
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: LD_INT 3
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 5
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: LD_INT 3
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39208: LD_ADDR_VAR 0 34
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 4
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: LD_INT 5
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: LD_INT 4
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: LD_INT 3
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 3
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: LD_INT 4
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 5
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: LD_INT 3
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 2
39305: NEG
39306: PUSH
39307: LD_INT 5
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 3
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 3
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 4
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 4
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 3
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 2
39389: PUSH
39390: LD_INT 2
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 4
39400: PUSH
39401: LD_INT 2
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 4
39410: PUSH
39411: LD_INT 4
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 4
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 5
39430: PUSH
39431: LD_INT 4
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 5
39440: PUSH
39441: LD_INT 5
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 4
39450: PUSH
39451: LD_INT 5
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 3
39460: PUSH
39461: LD_INT 4
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: LD_INT 3
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 5
39480: PUSH
39481: LD_INT 3
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 3
39490: PUSH
39491: LD_INT 5
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: LD_INT 3
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: LD_INT 3
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 1
39530: PUSH
39531: LD_INT 4
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 4
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: LD_INT 3
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: LD_INT 4
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 2
39582: NEG
39583: PUSH
39584: LD_INT 2
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 4
39593: NEG
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 4
39604: NEG
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 3
39616: NEG
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 3
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 4
39638: NEG
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 5
39649: NEG
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 5
39660: NEG
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 5
39672: NEG
39673: PUSH
39674: LD_INT 2
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 3
39684: NEG
39685: PUSH
39686: LD_INT 2
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: ST_TO_ADDR
// end ; end ;
39740: GO 39743
39742: POP
// case btype of b_depot , b_warehouse :
39743: LD_VAR 0 1
39747: PUSH
39748: LD_INT 0
39750: DOUBLE
39751: EQUAL
39752: IFTRUE 39762
39754: LD_INT 1
39756: DOUBLE
39757: EQUAL
39758: IFTRUE 39762
39760: GO 39963
39762: POP
// case nation of nation_american :
39763: LD_VAR 0 5
39767: PUSH
39768: LD_INT 1
39770: DOUBLE
39771: EQUAL
39772: IFTRUE 39776
39774: GO 39832
39776: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39777: LD_ADDR_VAR 0 9
39781: PUSH
39782: LD_VAR 0 11
39786: PUSH
39787: LD_VAR 0 12
39791: PUSH
39792: LD_VAR 0 13
39796: PUSH
39797: LD_VAR 0 14
39801: PUSH
39802: LD_VAR 0 15
39806: PUSH
39807: LD_VAR 0 16
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: PUSH
39820: LD_VAR 0 4
39824: PUSH
39825: LD_INT 1
39827: PLUS
39828: ARRAY
39829: ST_TO_ADDR
39830: GO 39961
39832: LD_INT 2
39834: DOUBLE
39835: EQUAL
39836: IFTRUE 39840
39838: GO 39896
39840: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39841: LD_ADDR_VAR 0 9
39845: PUSH
39846: LD_VAR 0 17
39850: PUSH
39851: LD_VAR 0 18
39855: PUSH
39856: LD_VAR 0 19
39860: PUSH
39861: LD_VAR 0 20
39865: PUSH
39866: LD_VAR 0 21
39870: PUSH
39871: LD_VAR 0 22
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: PUSH
39884: LD_VAR 0 4
39888: PUSH
39889: LD_INT 1
39891: PLUS
39892: ARRAY
39893: ST_TO_ADDR
39894: GO 39961
39896: LD_INT 3
39898: DOUBLE
39899: EQUAL
39900: IFTRUE 39904
39902: GO 39960
39904: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39905: LD_ADDR_VAR 0 9
39909: PUSH
39910: LD_VAR 0 23
39914: PUSH
39915: LD_VAR 0 24
39919: PUSH
39920: LD_VAR 0 25
39924: PUSH
39925: LD_VAR 0 26
39929: PUSH
39930: LD_VAR 0 27
39934: PUSH
39935: LD_VAR 0 28
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: PUSH
39948: LD_VAR 0 4
39952: PUSH
39953: LD_INT 1
39955: PLUS
39956: ARRAY
39957: ST_TO_ADDR
39958: GO 39961
39960: POP
39961: GO 40516
39963: LD_INT 2
39965: DOUBLE
39966: EQUAL
39967: IFTRUE 39977
39969: LD_INT 3
39971: DOUBLE
39972: EQUAL
39973: IFTRUE 39977
39975: GO 40033
39977: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39978: LD_ADDR_VAR 0 9
39982: PUSH
39983: LD_VAR 0 29
39987: PUSH
39988: LD_VAR 0 30
39992: PUSH
39993: LD_VAR 0 31
39997: PUSH
39998: LD_VAR 0 32
40002: PUSH
40003: LD_VAR 0 33
40007: PUSH
40008: LD_VAR 0 34
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: PUSH
40021: LD_VAR 0 4
40025: PUSH
40026: LD_INT 1
40028: PLUS
40029: ARRAY
40030: ST_TO_ADDR
40031: GO 40516
40033: LD_INT 16
40035: DOUBLE
40036: EQUAL
40037: IFTRUE 40095
40039: LD_INT 17
40041: DOUBLE
40042: EQUAL
40043: IFTRUE 40095
40045: LD_INT 18
40047: DOUBLE
40048: EQUAL
40049: IFTRUE 40095
40051: LD_INT 19
40053: DOUBLE
40054: EQUAL
40055: IFTRUE 40095
40057: LD_INT 22
40059: DOUBLE
40060: EQUAL
40061: IFTRUE 40095
40063: LD_INT 20
40065: DOUBLE
40066: EQUAL
40067: IFTRUE 40095
40069: LD_INT 21
40071: DOUBLE
40072: EQUAL
40073: IFTRUE 40095
40075: LD_INT 23
40077: DOUBLE
40078: EQUAL
40079: IFTRUE 40095
40081: LD_INT 24
40083: DOUBLE
40084: EQUAL
40085: IFTRUE 40095
40087: LD_INT 25
40089: DOUBLE
40090: EQUAL
40091: IFTRUE 40095
40093: GO 40151
40095: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40096: LD_ADDR_VAR 0 9
40100: PUSH
40101: LD_VAR 0 35
40105: PUSH
40106: LD_VAR 0 36
40110: PUSH
40111: LD_VAR 0 37
40115: PUSH
40116: LD_VAR 0 38
40120: PUSH
40121: LD_VAR 0 39
40125: PUSH
40126: LD_VAR 0 40
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: PUSH
40139: LD_VAR 0 4
40143: PUSH
40144: LD_INT 1
40146: PLUS
40147: ARRAY
40148: ST_TO_ADDR
40149: GO 40516
40151: LD_INT 6
40153: DOUBLE
40154: EQUAL
40155: IFTRUE 40207
40157: LD_INT 7
40159: DOUBLE
40160: EQUAL
40161: IFTRUE 40207
40163: LD_INT 8
40165: DOUBLE
40166: EQUAL
40167: IFTRUE 40207
40169: LD_INT 13
40171: DOUBLE
40172: EQUAL
40173: IFTRUE 40207
40175: LD_INT 12
40177: DOUBLE
40178: EQUAL
40179: IFTRUE 40207
40181: LD_INT 15
40183: DOUBLE
40184: EQUAL
40185: IFTRUE 40207
40187: LD_INT 11
40189: DOUBLE
40190: EQUAL
40191: IFTRUE 40207
40193: LD_INT 14
40195: DOUBLE
40196: EQUAL
40197: IFTRUE 40207
40199: LD_INT 10
40201: DOUBLE
40202: EQUAL
40203: IFTRUE 40207
40205: GO 40263
40207: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40208: LD_ADDR_VAR 0 9
40212: PUSH
40213: LD_VAR 0 41
40217: PUSH
40218: LD_VAR 0 42
40222: PUSH
40223: LD_VAR 0 43
40227: PUSH
40228: LD_VAR 0 44
40232: PUSH
40233: LD_VAR 0 45
40237: PUSH
40238: LD_VAR 0 46
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: PUSH
40251: LD_VAR 0 4
40255: PUSH
40256: LD_INT 1
40258: PLUS
40259: ARRAY
40260: ST_TO_ADDR
40261: GO 40516
40263: LD_INT 36
40265: DOUBLE
40266: EQUAL
40267: IFTRUE 40271
40269: GO 40327
40271: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40272: LD_ADDR_VAR 0 9
40276: PUSH
40277: LD_VAR 0 47
40281: PUSH
40282: LD_VAR 0 48
40286: PUSH
40287: LD_VAR 0 49
40291: PUSH
40292: LD_VAR 0 50
40296: PUSH
40297: LD_VAR 0 51
40301: PUSH
40302: LD_VAR 0 52
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: PUSH
40315: LD_VAR 0 4
40319: PUSH
40320: LD_INT 1
40322: PLUS
40323: ARRAY
40324: ST_TO_ADDR
40325: GO 40516
40327: LD_INT 4
40329: DOUBLE
40330: EQUAL
40331: IFTRUE 40353
40333: LD_INT 5
40335: DOUBLE
40336: EQUAL
40337: IFTRUE 40353
40339: LD_INT 34
40341: DOUBLE
40342: EQUAL
40343: IFTRUE 40353
40345: LD_INT 37
40347: DOUBLE
40348: EQUAL
40349: IFTRUE 40353
40351: GO 40409
40353: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40354: LD_ADDR_VAR 0 9
40358: PUSH
40359: LD_VAR 0 53
40363: PUSH
40364: LD_VAR 0 54
40368: PUSH
40369: LD_VAR 0 55
40373: PUSH
40374: LD_VAR 0 56
40378: PUSH
40379: LD_VAR 0 57
40383: PUSH
40384: LD_VAR 0 58
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: PUSH
40397: LD_VAR 0 4
40401: PUSH
40402: LD_INT 1
40404: PLUS
40405: ARRAY
40406: ST_TO_ADDR
40407: GO 40516
40409: LD_INT 31
40411: DOUBLE
40412: EQUAL
40413: IFTRUE 40459
40415: LD_INT 32
40417: DOUBLE
40418: EQUAL
40419: IFTRUE 40459
40421: LD_INT 33
40423: DOUBLE
40424: EQUAL
40425: IFTRUE 40459
40427: LD_INT 27
40429: DOUBLE
40430: EQUAL
40431: IFTRUE 40459
40433: LD_INT 26
40435: DOUBLE
40436: EQUAL
40437: IFTRUE 40459
40439: LD_INT 28
40441: DOUBLE
40442: EQUAL
40443: IFTRUE 40459
40445: LD_INT 29
40447: DOUBLE
40448: EQUAL
40449: IFTRUE 40459
40451: LD_INT 30
40453: DOUBLE
40454: EQUAL
40455: IFTRUE 40459
40457: GO 40515
40459: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40460: LD_ADDR_VAR 0 9
40464: PUSH
40465: LD_VAR 0 59
40469: PUSH
40470: LD_VAR 0 60
40474: PUSH
40475: LD_VAR 0 61
40479: PUSH
40480: LD_VAR 0 62
40484: PUSH
40485: LD_VAR 0 63
40489: PUSH
40490: LD_VAR 0 64
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: PUSH
40503: LD_VAR 0 4
40507: PUSH
40508: LD_INT 1
40510: PLUS
40511: ARRAY
40512: ST_TO_ADDR
40513: GO 40516
40515: POP
// temp_list2 = [ ] ;
40516: LD_ADDR_VAR 0 10
40520: PUSH
40521: EMPTY
40522: ST_TO_ADDR
// for i in temp_list do
40523: LD_ADDR_VAR 0 8
40527: PUSH
40528: LD_VAR 0 9
40532: PUSH
40533: FOR_IN
40534: IFFALSE 40586
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40536: LD_ADDR_VAR 0 10
40540: PUSH
40541: LD_VAR 0 10
40545: PUSH
40546: LD_VAR 0 8
40550: PUSH
40551: LD_INT 1
40553: ARRAY
40554: PUSH
40555: LD_VAR 0 2
40559: PLUS
40560: PUSH
40561: LD_VAR 0 8
40565: PUSH
40566: LD_INT 2
40568: ARRAY
40569: PUSH
40570: LD_VAR 0 3
40574: PLUS
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: ADD
40583: ST_TO_ADDR
40584: GO 40533
40586: POP
40587: POP
// result = temp_list2 ;
40588: LD_ADDR_VAR 0 7
40592: PUSH
40593: LD_VAR 0 10
40597: ST_TO_ADDR
// end ;
40598: LD_VAR 0 7
40602: RET
// export function EnemyInRange ( unit , dist ) ; begin
40603: LD_INT 0
40605: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40606: LD_ADDR_VAR 0 3
40610: PUSH
40611: LD_VAR 0 1
40615: PPUSH
40616: CALL_OW 255
40620: PPUSH
40621: LD_VAR 0 1
40625: PPUSH
40626: CALL_OW 250
40630: PPUSH
40631: LD_VAR 0 1
40635: PPUSH
40636: CALL_OW 251
40640: PPUSH
40641: LD_VAR 0 2
40645: PPUSH
40646: CALL 13999 0 4
40650: PUSH
40651: LD_INT 4
40653: ARRAY
40654: ST_TO_ADDR
// end ;
40655: LD_VAR 0 3
40659: RET
// export function PlayerSeeMe ( unit ) ; begin
40660: LD_INT 0
40662: PPUSH
// result := See ( your_side , unit ) ;
40663: LD_ADDR_VAR 0 2
40667: PUSH
40668: LD_OWVAR 2
40672: PPUSH
40673: LD_VAR 0 1
40677: PPUSH
40678: CALL_OW 292
40682: ST_TO_ADDR
// end ;
40683: LD_VAR 0 2
40687: RET
// export function ReverseDir ( unit ) ; begin
40688: LD_INT 0
40690: PPUSH
// if not unit then
40691: LD_VAR 0 1
40695: NOT
40696: IFFALSE 40700
// exit ;
40698: GO 40723
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40700: LD_ADDR_VAR 0 2
40704: PUSH
40705: LD_VAR 0 1
40709: PPUSH
40710: CALL_OW 254
40714: PUSH
40715: LD_INT 3
40717: PLUS
40718: PUSH
40719: LD_INT 6
40721: MOD
40722: ST_TO_ADDR
// end ;
40723: LD_VAR 0 2
40727: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
40728: LD_INT 0
40730: PPUSH
40731: PPUSH
40732: PPUSH
40733: PPUSH
40734: PPUSH
40735: PPUSH
// if not unit or not hexes then
40736: LD_VAR 0 1
40740: NOT
40741: PUSH
40742: LD_VAR 0 2
40746: NOT
40747: OR
40748: IFFALSE 40752
// exit ;
40750: GO 40875
// dist := 9999 ;
40752: LD_ADDR_VAR 0 5
40756: PUSH
40757: LD_INT 9999
40759: ST_TO_ADDR
// for i = 1 to hexes do
40760: LD_ADDR_VAR 0 4
40764: PUSH
40765: DOUBLE
40766: LD_INT 1
40768: DEC
40769: ST_TO_ADDR
40770: LD_VAR 0 2
40774: PUSH
40775: FOR_TO
40776: IFFALSE 40863
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40778: LD_ADDR_VAR 0 6
40782: PUSH
40783: LD_VAR 0 1
40787: PPUSH
40788: LD_VAR 0 2
40792: PUSH
40793: LD_VAR 0 4
40797: ARRAY
40798: PUSH
40799: LD_INT 1
40801: ARRAY
40802: PPUSH
40803: LD_VAR 0 2
40807: PUSH
40808: LD_VAR 0 4
40812: ARRAY
40813: PUSH
40814: LD_INT 2
40816: ARRAY
40817: PPUSH
40818: CALL_OW 297
40822: ST_TO_ADDR
// if tdist < dist then
40823: LD_VAR 0 6
40827: PUSH
40828: LD_VAR 0 5
40832: LESS
40833: IFFALSE 40861
// begin hex := hexes [ i ] ;
40835: LD_ADDR_VAR 0 8
40839: PUSH
40840: LD_VAR 0 2
40844: PUSH
40845: LD_VAR 0 4
40849: ARRAY
40850: ST_TO_ADDR
// dist := tdist ;
40851: LD_ADDR_VAR 0 5
40855: PUSH
40856: LD_VAR 0 6
40860: ST_TO_ADDR
// end ; end ;
40861: GO 40775
40863: POP
40864: POP
// result := hex ;
40865: LD_ADDR_VAR 0 3
40869: PUSH
40870: LD_VAR 0 8
40874: ST_TO_ADDR
// end ;
40875: LD_VAR 0 3
40879: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40880: LD_INT 0
40882: PPUSH
40883: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40884: LD_VAR 0 1
40888: NOT
40889: PUSH
40890: LD_VAR 0 1
40894: PUSH
40895: LD_INT 21
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 23
40907: PUSH
40908: LD_INT 2
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PPUSH
40919: CALL_OW 69
40923: IN
40924: NOT
40925: OR
40926: IFFALSE 40930
// exit ;
40928: GO 40977
// for i = 1 to 3 do
40930: LD_ADDR_VAR 0 3
40934: PUSH
40935: DOUBLE
40936: LD_INT 1
40938: DEC
40939: ST_TO_ADDR
40940: LD_INT 3
40942: PUSH
40943: FOR_TO
40944: IFFALSE 40975
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40946: LD_VAR 0 1
40950: PPUSH
40951: CALL_OW 250
40955: PPUSH
40956: LD_VAR 0 1
40960: PPUSH
40961: CALL_OW 251
40965: PPUSH
40966: LD_INT 1
40968: PPUSH
40969: CALL_OW 453
40973: GO 40943
40975: POP
40976: POP
// end ;
40977: LD_VAR 0 2
40981: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40982: LD_INT 0
40984: PPUSH
40985: PPUSH
40986: PPUSH
40987: PPUSH
40988: PPUSH
40989: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40990: LD_VAR 0 1
40994: NOT
40995: PUSH
40996: LD_VAR 0 2
41000: NOT
41001: OR
41002: PUSH
41003: LD_VAR 0 1
41007: PPUSH
41008: CALL_OW 314
41012: OR
41013: IFFALSE 41017
// exit ;
41015: GO 41458
// x := GetX ( enemy_unit ) ;
41017: LD_ADDR_VAR 0 7
41021: PUSH
41022: LD_VAR 0 2
41026: PPUSH
41027: CALL_OW 250
41031: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41032: LD_ADDR_VAR 0 8
41036: PUSH
41037: LD_VAR 0 2
41041: PPUSH
41042: CALL_OW 251
41046: ST_TO_ADDR
// if not x or not y then
41047: LD_VAR 0 7
41051: NOT
41052: PUSH
41053: LD_VAR 0 8
41057: NOT
41058: OR
41059: IFFALSE 41063
// exit ;
41061: GO 41458
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41063: LD_ADDR_VAR 0 6
41067: PUSH
41068: LD_VAR 0 7
41072: PPUSH
41073: LD_INT 0
41075: PPUSH
41076: LD_INT 4
41078: PPUSH
41079: CALL_OW 272
41083: PUSH
41084: LD_VAR 0 8
41088: PPUSH
41089: LD_INT 0
41091: PPUSH
41092: LD_INT 4
41094: PPUSH
41095: CALL_OW 273
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_VAR 0 7
41108: PPUSH
41109: LD_INT 1
41111: PPUSH
41112: LD_INT 4
41114: PPUSH
41115: CALL_OW 272
41119: PUSH
41120: LD_VAR 0 8
41124: PPUSH
41125: LD_INT 1
41127: PPUSH
41128: LD_INT 4
41130: PPUSH
41131: CALL_OW 273
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_VAR 0 7
41144: PPUSH
41145: LD_INT 2
41147: PPUSH
41148: LD_INT 4
41150: PPUSH
41151: CALL_OW 272
41155: PUSH
41156: LD_VAR 0 8
41160: PPUSH
41161: LD_INT 2
41163: PPUSH
41164: LD_INT 4
41166: PPUSH
41167: CALL_OW 273
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_VAR 0 7
41180: PPUSH
41181: LD_INT 3
41183: PPUSH
41184: LD_INT 4
41186: PPUSH
41187: CALL_OW 272
41191: PUSH
41192: LD_VAR 0 8
41196: PPUSH
41197: LD_INT 3
41199: PPUSH
41200: LD_INT 4
41202: PPUSH
41203: CALL_OW 273
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_VAR 0 7
41216: PPUSH
41217: LD_INT 4
41219: PPUSH
41220: LD_INT 4
41222: PPUSH
41223: CALL_OW 272
41227: PUSH
41228: LD_VAR 0 8
41232: PPUSH
41233: LD_INT 4
41235: PPUSH
41236: LD_INT 4
41238: PPUSH
41239: CALL_OW 273
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_VAR 0 7
41252: PPUSH
41253: LD_INT 5
41255: PPUSH
41256: LD_INT 4
41258: PPUSH
41259: CALL_OW 272
41263: PUSH
41264: LD_VAR 0 8
41268: PPUSH
41269: LD_INT 5
41271: PPUSH
41272: LD_INT 4
41274: PPUSH
41275: CALL_OW 273
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: ST_TO_ADDR
// for i = tmp downto 1 do
41292: LD_ADDR_VAR 0 4
41296: PUSH
41297: DOUBLE
41298: LD_VAR 0 6
41302: INC
41303: ST_TO_ADDR
41304: LD_INT 1
41306: PUSH
41307: FOR_DOWNTO
41308: IFFALSE 41409
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41310: LD_VAR 0 6
41314: PUSH
41315: LD_VAR 0 4
41319: ARRAY
41320: PUSH
41321: LD_INT 1
41323: ARRAY
41324: PPUSH
41325: LD_VAR 0 6
41329: PUSH
41330: LD_VAR 0 4
41334: ARRAY
41335: PUSH
41336: LD_INT 2
41338: ARRAY
41339: PPUSH
41340: CALL_OW 488
41344: NOT
41345: PUSH
41346: LD_VAR 0 6
41350: PUSH
41351: LD_VAR 0 4
41355: ARRAY
41356: PUSH
41357: LD_INT 1
41359: ARRAY
41360: PPUSH
41361: LD_VAR 0 6
41365: PUSH
41366: LD_VAR 0 4
41370: ARRAY
41371: PUSH
41372: LD_INT 2
41374: ARRAY
41375: PPUSH
41376: CALL_OW 428
41380: PUSH
41381: LD_INT 0
41383: NONEQUAL
41384: OR
41385: IFFALSE 41407
// tmp := Delete ( tmp , i ) ;
41387: LD_ADDR_VAR 0 6
41391: PUSH
41392: LD_VAR 0 6
41396: PPUSH
41397: LD_VAR 0 4
41401: PPUSH
41402: CALL_OW 3
41406: ST_TO_ADDR
41407: GO 41307
41409: POP
41410: POP
// j := GetClosestHex ( unit , tmp ) ;
41411: LD_ADDR_VAR 0 5
41415: PUSH
41416: LD_VAR 0 1
41420: PPUSH
41421: LD_VAR 0 6
41425: PPUSH
41426: CALL 40728 0 2
41430: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41431: LD_VAR 0 1
41435: PPUSH
41436: LD_VAR 0 5
41440: PUSH
41441: LD_INT 1
41443: ARRAY
41444: PPUSH
41445: LD_VAR 0 5
41449: PUSH
41450: LD_INT 2
41452: ARRAY
41453: PPUSH
41454: CALL_OW 111
// end ;
41458: LD_VAR 0 3
41462: RET
// export function PrepareApemanSoldier ( ) ; begin
41463: LD_INT 0
41465: PPUSH
// uc_nation := 0 ;
41466: LD_ADDR_OWVAR 21
41470: PUSH
41471: LD_INT 0
41473: ST_TO_ADDR
// hc_sex := sex_male ;
41474: LD_ADDR_OWVAR 27
41478: PUSH
41479: LD_INT 1
41481: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
41482: LD_ADDR_OWVAR 28
41486: PUSH
41487: LD_INT 15
41489: ST_TO_ADDR
// hc_gallery :=  ;
41490: LD_ADDR_OWVAR 33
41494: PUSH
41495: LD_STRING 
41497: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41498: LD_ADDR_OWVAR 31
41502: PUSH
41503: LD_INT 0
41505: PPUSH
41506: LD_INT 3
41508: PPUSH
41509: CALL_OW 12
41513: PUSH
41514: LD_INT 0
41516: PPUSH
41517: LD_INT 3
41519: PPUSH
41520: CALL_OW 12
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: ST_TO_ADDR
// end ;
41537: LD_VAR 0 1
41541: RET
// export function PrepareApemanEngineer ( ) ; begin
41542: LD_INT 0
41544: PPUSH
// uc_nation := 0 ;
41545: LD_ADDR_OWVAR 21
41549: PUSH
41550: LD_INT 0
41552: ST_TO_ADDR
// hc_sex := sex_male ;
41553: LD_ADDR_OWVAR 27
41557: PUSH
41558: LD_INT 1
41560: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
41561: LD_ADDR_OWVAR 28
41565: PUSH
41566: LD_INT 16
41568: ST_TO_ADDR
// hc_gallery :=  ;
41569: LD_ADDR_OWVAR 33
41573: PUSH
41574: LD_STRING 
41576: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41577: LD_ADDR_OWVAR 31
41581: PUSH
41582: LD_INT 0
41584: PPUSH
41585: LD_INT 3
41587: PPUSH
41588: CALL_OW 12
41592: PUSH
41593: LD_INT 0
41595: PPUSH
41596: LD_INT 3
41598: PPUSH
41599: CALL_OW 12
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: ST_TO_ADDR
// end ;
41616: LD_VAR 0 1
41620: RET
// export function PrepareApeman ( agressivity ) ; begin
41621: LD_INT 0
41623: PPUSH
// uc_side := 0 ;
41624: LD_ADDR_OWVAR 20
41628: PUSH
41629: LD_INT 0
41631: ST_TO_ADDR
// uc_nation := 0 ;
41632: LD_ADDR_OWVAR 21
41636: PUSH
41637: LD_INT 0
41639: ST_TO_ADDR
// hc_sex := sex_male ;
41640: LD_ADDR_OWVAR 27
41644: PUSH
41645: LD_INT 1
41647: ST_TO_ADDR
// hc_class := class_apeman ;
41648: LD_ADDR_OWVAR 28
41652: PUSH
41653: LD_INT 12
41655: ST_TO_ADDR
// hc_gallery :=  ;
41656: LD_ADDR_OWVAR 33
41660: PUSH
41661: LD_STRING 
41663: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
41664: LD_ADDR_OWVAR 35
41668: PUSH
41669: LD_VAR 0 1
41673: NEG
41674: PPUSH
41675: LD_VAR 0 1
41679: PPUSH
41680: CALL_OW 12
41684: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41685: LD_ADDR_OWVAR 31
41689: PUSH
41690: LD_INT 0
41692: PPUSH
41693: LD_INT 3
41695: PPUSH
41696: CALL_OW 12
41700: PUSH
41701: LD_INT 0
41703: PPUSH
41704: LD_INT 3
41706: PPUSH
41707: CALL_OW 12
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: ST_TO_ADDR
// end ;
41724: LD_VAR 0 2
41728: RET
// export function PrepareTiger ( agressivity ) ; begin
41729: LD_INT 0
41731: PPUSH
// uc_side := 0 ;
41732: LD_ADDR_OWVAR 20
41736: PUSH
41737: LD_INT 0
41739: ST_TO_ADDR
// uc_nation := 0 ;
41740: LD_ADDR_OWVAR 21
41744: PUSH
41745: LD_INT 0
41747: ST_TO_ADDR
// hc_class := class_tiger ;
41748: LD_ADDR_OWVAR 28
41752: PUSH
41753: LD_INT 14
41755: ST_TO_ADDR
// hc_gallery :=  ;
41756: LD_ADDR_OWVAR 33
41760: PUSH
41761: LD_STRING 
41763: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
41764: LD_ADDR_OWVAR 35
41768: PUSH
41769: LD_VAR 0 1
41773: NEG
41774: PPUSH
41775: LD_VAR 0 1
41779: PPUSH
41780: CALL_OW 12
41784: ST_TO_ADDR
// end ;
41785: LD_VAR 0 2
41789: RET
// export function PrepareEnchidna ( ) ; begin
41790: LD_INT 0
41792: PPUSH
// uc_side := 0 ;
41793: LD_ADDR_OWVAR 20
41797: PUSH
41798: LD_INT 0
41800: ST_TO_ADDR
// uc_nation := 0 ;
41801: LD_ADDR_OWVAR 21
41805: PUSH
41806: LD_INT 0
41808: ST_TO_ADDR
// hc_class := class_baggie ;
41809: LD_ADDR_OWVAR 28
41813: PUSH
41814: LD_INT 13
41816: ST_TO_ADDR
// hc_gallery :=  ;
41817: LD_ADDR_OWVAR 33
41821: PUSH
41822: LD_STRING 
41824: ST_TO_ADDR
// end ;
41825: LD_VAR 0 1
41829: RET
// export function PrepareFrog ( ) ; begin
41830: LD_INT 0
41832: PPUSH
// uc_side := 0 ;
41833: LD_ADDR_OWVAR 20
41837: PUSH
41838: LD_INT 0
41840: ST_TO_ADDR
// uc_nation := 0 ;
41841: LD_ADDR_OWVAR 21
41845: PUSH
41846: LD_INT 0
41848: ST_TO_ADDR
// hc_class := class_frog ;
41849: LD_ADDR_OWVAR 28
41853: PUSH
41854: LD_INT 19
41856: ST_TO_ADDR
// hc_gallery :=  ;
41857: LD_ADDR_OWVAR 33
41861: PUSH
41862: LD_STRING 
41864: ST_TO_ADDR
// end ;
41865: LD_VAR 0 1
41869: RET
// export function PrepareFish ( ) ; begin
41870: LD_INT 0
41872: PPUSH
// uc_side := 0 ;
41873: LD_ADDR_OWVAR 20
41877: PUSH
41878: LD_INT 0
41880: ST_TO_ADDR
// uc_nation := 0 ;
41881: LD_ADDR_OWVAR 21
41885: PUSH
41886: LD_INT 0
41888: ST_TO_ADDR
// hc_class := class_fish ;
41889: LD_ADDR_OWVAR 28
41893: PUSH
41894: LD_INT 20
41896: ST_TO_ADDR
// hc_gallery :=  ;
41897: LD_ADDR_OWVAR 33
41901: PUSH
41902: LD_STRING 
41904: ST_TO_ADDR
// end ;
41905: LD_VAR 0 1
41909: RET
// export function PrepareBird ( ) ; begin
41910: LD_INT 0
41912: PPUSH
// uc_side := 0 ;
41913: LD_ADDR_OWVAR 20
41917: PUSH
41918: LD_INT 0
41920: ST_TO_ADDR
// uc_nation := 0 ;
41921: LD_ADDR_OWVAR 21
41925: PUSH
41926: LD_INT 0
41928: ST_TO_ADDR
// hc_class := class_phororhacos ;
41929: LD_ADDR_OWVAR 28
41933: PUSH
41934: LD_INT 18
41936: ST_TO_ADDR
// hc_gallery :=  ;
41937: LD_ADDR_OWVAR 33
41941: PUSH
41942: LD_STRING 
41944: ST_TO_ADDR
// end ;
41945: LD_VAR 0 1
41949: RET
// export function PrepareHorse ( ) ; begin
41950: LD_INT 0
41952: PPUSH
// uc_side := 0 ;
41953: LD_ADDR_OWVAR 20
41957: PUSH
41958: LD_INT 0
41960: ST_TO_ADDR
// uc_nation := 0 ;
41961: LD_ADDR_OWVAR 21
41965: PUSH
41966: LD_INT 0
41968: ST_TO_ADDR
// hc_class := class_horse ;
41969: LD_ADDR_OWVAR 28
41973: PUSH
41974: LD_INT 21
41976: ST_TO_ADDR
// hc_gallery :=  ;
41977: LD_ADDR_OWVAR 33
41981: PUSH
41982: LD_STRING 
41984: ST_TO_ADDR
// end ;
41985: LD_VAR 0 1
41989: RET
// export function PrepareMastodont ( ) ; begin
41990: LD_INT 0
41992: PPUSH
// uc_side := 0 ;
41993: LD_ADDR_OWVAR 20
41997: PUSH
41998: LD_INT 0
42000: ST_TO_ADDR
// uc_nation := 0 ;
42001: LD_ADDR_OWVAR 21
42005: PUSH
42006: LD_INT 0
42008: ST_TO_ADDR
// vc_chassis := class_mastodont ;
42009: LD_ADDR_OWVAR 37
42013: PUSH
42014: LD_INT 31
42016: ST_TO_ADDR
// vc_control := control_rider ;
42017: LD_ADDR_OWVAR 38
42021: PUSH
42022: LD_INT 4
42024: ST_TO_ADDR
// end ;
42025: LD_VAR 0 1
42029: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42030: LD_INT 0
42032: PPUSH
42033: PPUSH
42034: PPUSH
// uc_side = 0 ;
42035: LD_ADDR_OWVAR 20
42039: PUSH
42040: LD_INT 0
42042: ST_TO_ADDR
// uc_nation = 0 ;
42043: LD_ADDR_OWVAR 21
42047: PUSH
42048: LD_INT 0
42050: ST_TO_ADDR
// InitHc_All ( ) ;
42051: CALL_OW 584
// InitVc ;
42055: CALL_OW 20
// if mastodonts then
42059: LD_VAR 0 6
42063: IFFALSE 42130
// for i = 1 to mastodonts do
42065: LD_ADDR_VAR 0 11
42069: PUSH
42070: DOUBLE
42071: LD_INT 1
42073: DEC
42074: ST_TO_ADDR
42075: LD_VAR 0 6
42079: PUSH
42080: FOR_TO
42081: IFFALSE 42128
// begin vc_chassis := 31 ;
42083: LD_ADDR_OWVAR 37
42087: PUSH
42088: LD_INT 31
42090: ST_TO_ADDR
// vc_control := control_rider ;
42091: LD_ADDR_OWVAR 38
42095: PUSH
42096: LD_INT 4
42098: ST_TO_ADDR
// animal := CreateVehicle ;
42099: LD_ADDR_VAR 0 12
42103: PUSH
42104: CALL_OW 45
42108: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42109: LD_VAR 0 12
42113: PPUSH
42114: LD_VAR 0 8
42118: PPUSH
42119: LD_INT 0
42121: PPUSH
42122: CALL 44265 0 3
// end ;
42126: GO 42080
42128: POP
42129: POP
// if horses then
42130: LD_VAR 0 5
42134: IFFALSE 42201
// for i = 1 to horses do
42136: LD_ADDR_VAR 0 11
42140: PUSH
42141: DOUBLE
42142: LD_INT 1
42144: DEC
42145: ST_TO_ADDR
42146: LD_VAR 0 5
42150: PUSH
42151: FOR_TO
42152: IFFALSE 42199
// begin hc_class := 21 ;
42154: LD_ADDR_OWVAR 28
42158: PUSH
42159: LD_INT 21
42161: ST_TO_ADDR
// hc_gallery :=  ;
42162: LD_ADDR_OWVAR 33
42166: PUSH
42167: LD_STRING 
42169: ST_TO_ADDR
// animal := CreateHuman ;
42170: LD_ADDR_VAR 0 12
42174: PUSH
42175: CALL_OW 44
42179: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42180: LD_VAR 0 12
42184: PPUSH
42185: LD_VAR 0 8
42189: PPUSH
42190: LD_INT 0
42192: PPUSH
42193: CALL 44265 0 3
// end ;
42197: GO 42151
42199: POP
42200: POP
// if birds then
42201: LD_VAR 0 1
42205: IFFALSE 42272
// for i = 1 to birds do
42207: LD_ADDR_VAR 0 11
42211: PUSH
42212: DOUBLE
42213: LD_INT 1
42215: DEC
42216: ST_TO_ADDR
42217: LD_VAR 0 1
42221: PUSH
42222: FOR_TO
42223: IFFALSE 42270
// begin hc_class = 18 ;
42225: LD_ADDR_OWVAR 28
42229: PUSH
42230: LD_INT 18
42232: ST_TO_ADDR
// hc_gallery =  ;
42233: LD_ADDR_OWVAR 33
42237: PUSH
42238: LD_STRING 
42240: ST_TO_ADDR
// animal := CreateHuman ;
42241: LD_ADDR_VAR 0 12
42245: PUSH
42246: CALL_OW 44
42250: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42251: LD_VAR 0 12
42255: PPUSH
42256: LD_VAR 0 8
42260: PPUSH
42261: LD_INT 0
42263: PPUSH
42264: CALL 44265 0 3
// end ;
42268: GO 42222
42270: POP
42271: POP
// if tigers then
42272: LD_VAR 0 2
42276: IFFALSE 42360
// for i = 1 to tigers do
42278: LD_ADDR_VAR 0 11
42282: PUSH
42283: DOUBLE
42284: LD_INT 1
42286: DEC
42287: ST_TO_ADDR
42288: LD_VAR 0 2
42292: PUSH
42293: FOR_TO
42294: IFFALSE 42358
// begin hc_class = class_tiger ;
42296: LD_ADDR_OWVAR 28
42300: PUSH
42301: LD_INT 14
42303: ST_TO_ADDR
// hc_gallery =  ;
42304: LD_ADDR_OWVAR 33
42308: PUSH
42309: LD_STRING 
42311: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42312: LD_ADDR_OWVAR 35
42316: PUSH
42317: LD_INT 7
42319: NEG
42320: PPUSH
42321: LD_INT 7
42323: PPUSH
42324: CALL_OW 12
42328: ST_TO_ADDR
// animal := CreateHuman ;
42329: LD_ADDR_VAR 0 12
42333: PUSH
42334: CALL_OW 44
42338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42339: LD_VAR 0 12
42343: PPUSH
42344: LD_VAR 0 8
42348: PPUSH
42349: LD_INT 0
42351: PPUSH
42352: CALL 44265 0 3
// end ;
42356: GO 42293
42358: POP
42359: POP
// if apemans then
42360: LD_VAR 0 3
42364: IFFALSE 42487
// for i = 1 to apemans do
42366: LD_ADDR_VAR 0 11
42370: PUSH
42371: DOUBLE
42372: LD_INT 1
42374: DEC
42375: ST_TO_ADDR
42376: LD_VAR 0 3
42380: PUSH
42381: FOR_TO
42382: IFFALSE 42485
// begin hc_class = class_apeman ;
42384: LD_ADDR_OWVAR 28
42388: PUSH
42389: LD_INT 12
42391: ST_TO_ADDR
// hc_gallery =  ;
42392: LD_ADDR_OWVAR 33
42396: PUSH
42397: LD_STRING 
42399: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
42400: LD_ADDR_OWVAR 35
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PPUSH
42409: LD_INT 2
42411: PPUSH
42412: CALL_OW 12
42416: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
42417: LD_ADDR_OWVAR 31
42421: PUSH
42422: LD_INT 1
42424: PPUSH
42425: LD_INT 3
42427: PPUSH
42428: CALL_OW 12
42432: PUSH
42433: LD_INT 1
42435: PPUSH
42436: LD_INT 3
42438: PPUSH
42439: CALL_OW 12
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: ST_TO_ADDR
// animal := CreateHuman ;
42456: LD_ADDR_VAR 0 12
42460: PUSH
42461: CALL_OW 44
42465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42466: LD_VAR 0 12
42470: PPUSH
42471: LD_VAR 0 8
42475: PPUSH
42476: LD_INT 0
42478: PPUSH
42479: CALL 44265 0 3
// end ;
42483: GO 42381
42485: POP
42486: POP
// if enchidnas then
42487: LD_VAR 0 4
42491: IFFALSE 42558
// for i = 1 to enchidnas do
42493: LD_ADDR_VAR 0 11
42497: PUSH
42498: DOUBLE
42499: LD_INT 1
42501: DEC
42502: ST_TO_ADDR
42503: LD_VAR 0 4
42507: PUSH
42508: FOR_TO
42509: IFFALSE 42556
// begin hc_class = 13 ;
42511: LD_ADDR_OWVAR 28
42515: PUSH
42516: LD_INT 13
42518: ST_TO_ADDR
// hc_gallery =  ;
42519: LD_ADDR_OWVAR 33
42523: PUSH
42524: LD_STRING 
42526: ST_TO_ADDR
// animal := CreateHuman ;
42527: LD_ADDR_VAR 0 12
42531: PUSH
42532: CALL_OW 44
42536: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42537: LD_VAR 0 12
42541: PPUSH
42542: LD_VAR 0 8
42546: PPUSH
42547: LD_INT 0
42549: PPUSH
42550: CALL 44265 0 3
// end ;
42554: GO 42508
42556: POP
42557: POP
// if fishes then
42558: LD_VAR 0 7
42562: IFFALSE 42629
// for i = 1 to fishes do
42564: LD_ADDR_VAR 0 11
42568: PUSH
42569: DOUBLE
42570: LD_INT 1
42572: DEC
42573: ST_TO_ADDR
42574: LD_VAR 0 7
42578: PUSH
42579: FOR_TO
42580: IFFALSE 42627
// begin hc_class = 20 ;
42582: LD_ADDR_OWVAR 28
42586: PUSH
42587: LD_INT 20
42589: ST_TO_ADDR
// hc_gallery =  ;
42590: LD_ADDR_OWVAR 33
42594: PUSH
42595: LD_STRING 
42597: ST_TO_ADDR
// animal := CreateHuman ;
42598: LD_ADDR_VAR 0 12
42602: PUSH
42603: CALL_OW 44
42607: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
42608: LD_VAR 0 12
42612: PPUSH
42613: LD_VAR 0 9
42617: PPUSH
42618: LD_INT 0
42620: PPUSH
42621: CALL 44265 0 3
// end ;
42625: GO 42579
42627: POP
42628: POP
// end ;
42629: LD_VAR 0 10
42633: RET
// export function WantHeal ( sci , unit ) ; begin
42634: LD_INT 0
42636: PPUSH
// if GetTaskList ( sci ) > 0 then
42637: LD_VAR 0 1
42641: PPUSH
42642: CALL_OW 437
42646: PUSH
42647: LD_INT 0
42649: GREATER
42650: IFFALSE 42720
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
42652: LD_VAR 0 1
42656: PPUSH
42657: CALL_OW 437
42661: PUSH
42662: LD_INT 1
42664: ARRAY
42665: PUSH
42666: LD_INT 1
42668: ARRAY
42669: PUSH
42670: LD_STRING l
42672: EQUAL
42673: PUSH
42674: LD_VAR 0 1
42678: PPUSH
42679: CALL_OW 437
42683: PUSH
42684: LD_INT 1
42686: ARRAY
42687: PUSH
42688: LD_INT 4
42690: ARRAY
42691: PUSH
42692: LD_VAR 0 2
42696: EQUAL
42697: AND
42698: IFFALSE 42710
// result := true else
42700: LD_ADDR_VAR 0 3
42704: PUSH
42705: LD_INT 1
42707: ST_TO_ADDR
42708: GO 42718
// result := false ;
42710: LD_ADDR_VAR 0 3
42714: PUSH
42715: LD_INT 0
42717: ST_TO_ADDR
// end else
42718: GO 42728
// result := false ;
42720: LD_ADDR_VAR 0 3
42724: PUSH
42725: LD_INT 0
42727: ST_TO_ADDR
// end ;
42728: LD_VAR 0 3
42732: RET
// export function HealTarget ( sci ) ; begin
42733: LD_INT 0
42735: PPUSH
// if not sci then
42736: LD_VAR 0 1
42740: NOT
42741: IFFALSE 42745
// exit ;
42743: GO 42810
// result := 0 ;
42745: LD_ADDR_VAR 0 2
42749: PUSH
42750: LD_INT 0
42752: ST_TO_ADDR
// if GetTaskList ( sci ) then
42753: LD_VAR 0 1
42757: PPUSH
42758: CALL_OW 437
42762: IFFALSE 42810
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42764: LD_VAR 0 1
42768: PPUSH
42769: CALL_OW 437
42773: PUSH
42774: LD_INT 1
42776: ARRAY
42777: PUSH
42778: LD_INT 1
42780: ARRAY
42781: PUSH
42782: LD_STRING l
42784: EQUAL
42785: IFFALSE 42810
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42787: LD_ADDR_VAR 0 2
42791: PUSH
42792: LD_VAR 0 1
42796: PPUSH
42797: CALL_OW 437
42801: PUSH
42802: LD_INT 1
42804: ARRAY
42805: PUSH
42806: LD_INT 4
42808: ARRAY
42809: ST_TO_ADDR
// end ;
42810: LD_VAR 0 2
42814: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42815: LD_INT 0
42817: PPUSH
42818: PPUSH
42819: PPUSH
42820: PPUSH
// if not base_units then
42821: LD_VAR 0 1
42825: NOT
42826: IFFALSE 42830
// exit ;
42828: GO 42917
// result := false ;
42830: LD_ADDR_VAR 0 2
42834: PUSH
42835: LD_INT 0
42837: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42838: LD_ADDR_VAR 0 5
42842: PUSH
42843: LD_VAR 0 1
42847: PPUSH
42848: LD_INT 21
42850: PUSH
42851: LD_INT 3
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PPUSH
42858: CALL_OW 72
42862: ST_TO_ADDR
// if not tmp then
42863: LD_VAR 0 5
42867: NOT
42868: IFFALSE 42872
// exit ;
42870: GO 42917
// for i in tmp do
42872: LD_ADDR_VAR 0 3
42876: PUSH
42877: LD_VAR 0 5
42881: PUSH
42882: FOR_IN
42883: IFFALSE 42915
// begin result := EnemyInRange ( i , 22 ) ;
42885: LD_ADDR_VAR 0 2
42889: PUSH
42890: LD_VAR 0 3
42894: PPUSH
42895: LD_INT 22
42897: PPUSH
42898: CALL 40603 0 2
42902: ST_TO_ADDR
// if result then
42903: LD_VAR 0 2
42907: IFFALSE 42913
// exit ;
42909: POP
42910: POP
42911: GO 42917
// end ;
42913: GO 42882
42915: POP
42916: POP
// end ;
42917: LD_VAR 0 2
42921: RET
// export function FilterByTag ( units , tag ) ; begin
42922: LD_INT 0
42924: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
42925: LD_ADDR_VAR 0 3
42929: PUSH
42930: LD_VAR 0 1
42934: PPUSH
42935: LD_INT 120
42937: PUSH
42938: LD_VAR 0 2
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PPUSH
42947: CALL_OW 72
42951: ST_TO_ADDR
// end ;
42952: LD_VAR 0 3
42956: RET
// export function IsDriver ( un ) ; begin
42957: LD_INT 0
42959: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42960: LD_ADDR_VAR 0 2
42964: PUSH
42965: LD_VAR 0 1
42969: PUSH
42970: LD_INT 55
42972: PUSH
42973: EMPTY
42974: LIST
42975: PPUSH
42976: CALL_OW 69
42980: IN
42981: ST_TO_ADDR
// end ;
42982: LD_VAR 0 2
42986: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42987: LD_INT 0
42989: PPUSH
42990: PPUSH
// list := [ ] ;
42991: LD_ADDR_VAR 0 5
42995: PUSH
42996: EMPTY
42997: ST_TO_ADDR
// case d of 0 :
42998: LD_VAR 0 3
43002: PUSH
43003: LD_INT 0
43005: DOUBLE
43006: EQUAL
43007: IFTRUE 43011
43009: GO 43144
43011: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43012: LD_ADDR_VAR 0 5
43016: PUSH
43017: LD_VAR 0 1
43021: PUSH
43022: LD_INT 4
43024: MINUS
43025: PUSH
43026: LD_VAR 0 2
43030: PUSH
43031: LD_INT 4
43033: MINUS
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: PUSH
43043: LD_VAR 0 1
43047: PUSH
43048: LD_INT 3
43050: MINUS
43051: PUSH
43052: LD_VAR 0 2
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: LIST
43064: PUSH
43065: LD_VAR 0 1
43069: PUSH
43070: LD_INT 4
43072: PLUS
43073: PUSH
43074: LD_VAR 0 2
43078: PUSH
43079: LD_INT 4
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: LIST
43086: PUSH
43087: LD_VAR 0 1
43091: PUSH
43092: LD_INT 3
43094: PLUS
43095: PUSH
43096: LD_VAR 0 2
43100: PUSH
43101: LD_INT 3
43103: PLUS
43104: PUSH
43105: LD_INT 5
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: PUSH
43113: LD_VAR 0 1
43117: PUSH
43118: LD_VAR 0 2
43122: PUSH
43123: LD_INT 4
43125: PLUS
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: ST_TO_ADDR
// end ; 1 :
43142: GO 43842
43144: LD_INT 1
43146: DOUBLE
43147: EQUAL
43148: IFTRUE 43152
43150: GO 43285
43152: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
43153: LD_ADDR_VAR 0 5
43157: PUSH
43158: LD_VAR 0 1
43162: PUSH
43163: LD_VAR 0 2
43167: PUSH
43168: LD_INT 4
43170: MINUS
43171: PUSH
43172: LD_INT 3
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: LIST
43179: PUSH
43180: LD_VAR 0 1
43184: PUSH
43185: LD_INT 3
43187: MINUS
43188: PUSH
43189: LD_VAR 0 2
43193: PUSH
43194: LD_INT 3
43196: MINUS
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: PUSH
43206: LD_VAR 0 1
43210: PUSH
43211: LD_INT 4
43213: MINUS
43214: PUSH
43215: LD_VAR 0 2
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: LIST
43227: PUSH
43228: LD_VAR 0 1
43232: PUSH
43233: LD_VAR 0 2
43237: PUSH
43238: LD_INT 3
43240: PLUS
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: LIST
43249: PUSH
43250: LD_VAR 0 1
43254: PUSH
43255: LD_INT 4
43257: PLUS
43258: PUSH
43259: LD_VAR 0 2
43263: PUSH
43264: LD_INT 4
43266: PLUS
43267: PUSH
43268: LD_INT 5
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: ST_TO_ADDR
// end ; 2 :
43283: GO 43842
43285: LD_INT 2
43287: DOUBLE
43288: EQUAL
43289: IFTRUE 43293
43291: GO 43422
43293: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43294: LD_ADDR_VAR 0 5
43298: PUSH
43299: LD_VAR 0 1
43303: PUSH
43304: LD_VAR 0 2
43308: PUSH
43309: LD_INT 3
43311: MINUS
43312: PUSH
43313: LD_INT 3
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: LIST
43320: PUSH
43321: LD_VAR 0 1
43325: PUSH
43326: LD_INT 4
43328: PLUS
43329: PUSH
43330: LD_VAR 0 2
43334: PUSH
43335: LD_INT 4
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: LIST
43342: PUSH
43343: LD_VAR 0 1
43347: PUSH
43348: LD_VAR 0 2
43352: PUSH
43353: LD_INT 4
43355: PLUS
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: PUSH
43365: LD_VAR 0 1
43369: PUSH
43370: LD_INT 3
43372: MINUS
43373: PUSH
43374: LD_VAR 0 2
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: LIST
43386: PUSH
43387: LD_VAR 0 1
43391: PUSH
43392: LD_INT 4
43394: MINUS
43395: PUSH
43396: LD_VAR 0 2
43400: PUSH
43401: LD_INT 4
43403: MINUS
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: LIST
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: ST_TO_ADDR
// end ; 3 :
43420: GO 43842
43422: LD_INT 3
43424: DOUBLE
43425: EQUAL
43426: IFTRUE 43430
43428: GO 43563
43430: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
43431: LD_ADDR_VAR 0 5
43435: PUSH
43436: LD_VAR 0 1
43440: PUSH
43441: LD_INT 3
43443: PLUS
43444: PUSH
43445: LD_VAR 0 2
43449: PUSH
43450: LD_INT 4
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: LIST
43457: PUSH
43458: LD_VAR 0 1
43462: PUSH
43463: LD_INT 4
43465: PLUS
43466: PUSH
43467: LD_VAR 0 2
43471: PUSH
43472: LD_INT 4
43474: PLUS
43475: PUSH
43476: LD_INT 5
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: LIST
43483: PUSH
43484: LD_VAR 0 1
43488: PUSH
43489: LD_INT 4
43491: MINUS
43492: PUSH
43493: LD_VAR 0 2
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: PUSH
43506: LD_VAR 0 1
43510: PUSH
43511: LD_VAR 0 2
43515: PUSH
43516: LD_INT 4
43518: MINUS
43519: PUSH
43520: LD_INT 3
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: PUSH
43528: LD_VAR 0 1
43532: PUSH
43533: LD_INT 3
43535: MINUS
43536: PUSH
43537: LD_VAR 0 2
43541: PUSH
43542: LD_INT 3
43544: MINUS
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: ST_TO_ADDR
// end ; 4 :
43561: GO 43842
43563: LD_INT 4
43565: DOUBLE
43566: EQUAL
43567: IFTRUE 43571
43569: GO 43704
43571: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
43572: LD_ADDR_VAR 0 5
43576: PUSH
43577: LD_VAR 0 1
43581: PUSH
43582: LD_VAR 0 2
43586: PUSH
43587: LD_INT 4
43589: PLUS
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: LIST
43598: PUSH
43599: LD_VAR 0 1
43603: PUSH
43604: LD_INT 3
43606: PLUS
43607: PUSH
43608: LD_VAR 0 2
43612: PUSH
43613: LD_INT 3
43615: PLUS
43616: PUSH
43617: LD_INT 5
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: PUSH
43625: LD_VAR 0 1
43629: PUSH
43630: LD_INT 4
43632: PLUS
43633: PUSH
43634: LD_VAR 0 2
43638: PUSH
43639: LD_INT 4
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: PUSH
43647: LD_VAR 0 1
43651: PUSH
43652: LD_VAR 0 2
43656: PUSH
43657: LD_INT 3
43659: MINUS
43660: PUSH
43661: LD_INT 3
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: LIST
43668: PUSH
43669: LD_VAR 0 1
43673: PUSH
43674: LD_INT 4
43676: MINUS
43677: PUSH
43678: LD_VAR 0 2
43682: PUSH
43683: LD_INT 4
43685: MINUS
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: ST_TO_ADDR
// end ; 5 :
43702: GO 43842
43704: LD_INT 5
43706: DOUBLE
43707: EQUAL
43708: IFTRUE 43712
43710: GO 43841
43712: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43713: LD_ADDR_VAR 0 5
43717: PUSH
43718: LD_VAR 0 1
43722: PUSH
43723: LD_INT 4
43725: MINUS
43726: PUSH
43727: LD_VAR 0 2
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: PUSH
43740: LD_VAR 0 1
43744: PUSH
43745: LD_VAR 0 2
43749: PUSH
43750: LD_INT 4
43752: MINUS
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: PUSH
43762: LD_VAR 0 1
43766: PUSH
43767: LD_INT 4
43769: PLUS
43770: PUSH
43771: LD_VAR 0 2
43775: PUSH
43776: LD_INT 4
43778: PLUS
43779: PUSH
43780: LD_INT 5
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: PUSH
43788: LD_VAR 0 1
43792: PUSH
43793: LD_INT 3
43795: PLUS
43796: PUSH
43797: LD_VAR 0 2
43801: PUSH
43802: LD_INT 4
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: PUSH
43810: LD_VAR 0 1
43814: PUSH
43815: LD_VAR 0 2
43819: PUSH
43820: LD_INT 3
43822: PLUS
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: LIST
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: ST_TO_ADDR
// end ; end ;
43839: GO 43842
43841: POP
// result := list ;
43842: LD_ADDR_VAR 0 4
43846: PUSH
43847: LD_VAR 0 5
43851: ST_TO_ADDR
// end ;
43852: LD_VAR 0 4
43856: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43857: LD_INT 0
43859: PPUSH
43860: PPUSH
43861: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43862: LD_VAR 0 1
43866: NOT
43867: PUSH
43868: LD_VAR 0 2
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 2
43878: PUSH
43879: LD_INT 3
43881: PUSH
43882: LD_INT 4
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: IN
43891: NOT
43892: OR
43893: IFFALSE 43897
// exit ;
43895: GO 43989
// tmp := [ ] ;
43897: LD_ADDR_VAR 0 5
43901: PUSH
43902: EMPTY
43903: ST_TO_ADDR
// for i in units do
43904: LD_ADDR_VAR 0 4
43908: PUSH
43909: LD_VAR 0 1
43913: PUSH
43914: FOR_IN
43915: IFFALSE 43958
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
43917: LD_ADDR_VAR 0 5
43921: PUSH
43922: LD_VAR 0 5
43926: PPUSH
43927: LD_VAR 0 5
43931: PUSH
43932: LD_INT 1
43934: PLUS
43935: PPUSH
43936: LD_VAR 0 4
43940: PPUSH
43941: LD_VAR 0 2
43945: PPUSH
43946: CALL_OW 259
43950: PPUSH
43951: CALL_OW 2
43955: ST_TO_ADDR
43956: GO 43914
43958: POP
43959: POP
// if not tmp then
43960: LD_VAR 0 5
43964: NOT
43965: IFFALSE 43969
// exit ;
43967: GO 43989
// result := SortListByListDesc ( units , tmp ) ;
43969: LD_ADDR_VAR 0 3
43973: PUSH
43974: LD_VAR 0 1
43978: PPUSH
43979: LD_VAR 0 5
43983: PPUSH
43984: CALL_OW 77
43988: ST_TO_ADDR
// end ;
43989: LD_VAR 0 3
43993: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43994: LD_INT 0
43996: PPUSH
43997: PPUSH
43998: PPUSH
// result := false ;
43999: LD_ADDR_VAR 0 3
44003: PUSH
44004: LD_INT 0
44006: ST_TO_ADDR
// x := GetX ( building ) ;
44007: LD_ADDR_VAR 0 4
44011: PUSH
44012: LD_VAR 0 2
44016: PPUSH
44017: CALL_OW 250
44021: ST_TO_ADDR
// y := GetY ( building ) ;
44022: LD_ADDR_VAR 0 5
44026: PUSH
44027: LD_VAR 0 2
44031: PPUSH
44032: CALL_OW 251
44036: ST_TO_ADDR
// if not building or not x or not y then
44037: LD_VAR 0 2
44041: NOT
44042: PUSH
44043: LD_VAR 0 4
44047: NOT
44048: OR
44049: PUSH
44050: LD_VAR 0 5
44054: NOT
44055: OR
44056: IFFALSE 44060
// exit ;
44058: GO 44152
// if GetTaskList ( unit ) then
44060: LD_VAR 0 1
44064: PPUSH
44065: CALL_OW 437
44069: IFFALSE 44152
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44071: LD_STRING e
44073: PUSH
44074: LD_VAR 0 1
44078: PPUSH
44079: CALL_OW 437
44083: PUSH
44084: LD_INT 1
44086: ARRAY
44087: PUSH
44088: LD_INT 1
44090: ARRAY
44091: EQUAL
44092: PUSH
44093: LD_VAR 0 4
44097: PUSH
44098: LD_VAR 0 1
44102: PPUSH
44103: CALL_OW 437
44107: PUSH
44108: LD_INT 1
44110: ARRAY
44111: PUSH
44112: LD_INT 2
44114: ARRAY
44115: EQUAL
44116: AND
44117: PUSH
44118: LD_VAR 0 5
44122: PUSH
44123: LD_VAR 0 1
44127: PPUSH
44128: CALL_OW 437
44132: PUSH
44133: LD_INT 1
44135: ARRAY
44136: PUSH
44137: LD_INT 3
44139: ARRAY
44140: EQUAL
44141: AND
44142: IFFALSE 44152
// result := true end ;
44144: LD_ADDR_VAR 0 3
44148: PUSH
44149: LD_INT 1
44151: ST_TO_ADDR
// end ;
44152: LD_VAR 0 3
44156: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
44157: LD_INT 0
44159: PPUSH
// result := false ;
44160: LD_ADDR_VAR 0 4
44164: PUSH
44165: LD_INT 0
44167: ST_TO_ADDR
// if GetTaskList ( unit ) then
44168: LD_VAR 0 1
44172: PPUSH
44173: CALL_OW 437
44177: IFFALSE 44260
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44179: LD_STRING M
44181: PUSH
44182: LD_VAR 0 1
44186: PPUSH
44187: CALL_OW 437
44191: PUSH
44192: LD_INT 1
44194: ARRAY
44195: PUSH
44196: LD_INT 1
44198: ARRAY
44199: EQUAL
44200: PUSH
44201: LD_VAR 0 2
44205: PUSH
44206: LD_VAR 0 1
44210: PPUSH
44211: CALL_OW 437
44215: PUSH
44216: LD_INT 1
44218: ARRAY
44219: PUSH
44220: LD_INT 2
44222: ARRAY
44223: EQUAL
44224: AND
44225: PUSH
44226: LD_VAR 0 3
44230: PUSH
44231: LD_VAR 0 1
44235: PPUSH
44236: CALL_OW 437
44240: PUSH
44241: LD_INT 1
44243: ARRAY
44244: PUSH
44245: LD_INT 3
44247: ARRAY
44248: EQUAL
44249: AND
44250: IFFALSE 44260
// result := true ;
44252: LD_ADDR_VAR 0 4
44256: PUSH
44257: LD_INT 1
44259: ST_TO_ADDR
// end ; end ;
44260: LD_VAR 0 4
44264: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
44265: LD_INT 0
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
// if not unit or not area then
44271: LD_VAR 0 1
44275: NOT
44276: PUSH
44277: LD_VAR 0 2
44281: NOT
44282: OR
44283: IFFALSE 44287
// exit ;
44285: GO 44451
// tmp := AreaToList ( area , i ) ;
44287: LD_ADDR_VAR 0 6
44291: PUSH
44292: LD_VAR 0 2
44296: PPUSH
44297: LD_VAR 0 5
44301: PPUSH
44302: CALL_OW 517
44306: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44307: LD_ADDR_VAR 0 5
44311: PUSH
44312: DOUBLE
44313: LD_INT 1
44315: DEC
44316: ST_TO_ADDR
44317: LD_VAR 0 6
44321: PUSH
44322: LD_INT 1
44324: ARRAY
44325: PUSH
44326: FOR_TO
44327: IFFALSE 44449
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44329: LD_ADDR_VAR 0 7
44333: PUSH
44334: LD_VAR 0 6
44338: PUSH
44339: LD_INT 1
44341: ARRAY
44342: PUSH
44343: LD_VAR 0 5
44347: ARRAY
44348: PUSH
44349: LD_VAR 0 6
44353: PUSH
44354: LD_INT 2
44356: ARRAY
44357: PUSH
44358: LD_VAR 0 5
44362: ARRAY
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
44368: LD_VAR 0 7
44372: PUSH
44373: LD_INT 1
44375: ARRAY
44376: PPUSH
44377: LD_VAR 0 7
44381: PUSH
44382: LD_INT 2
44384: ARRAY
44385: PPUSH
44386: CALL_OW 428
44390: PUSH
44391: LD_INT 0
44393: EQUAL
44394: IFFALSE 44447
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
44396: LD_VAR 0 1
44400: PPUSH
44401: LD_VAR 0 7
44405: PUSH
44406: LD_INT 1
44408: ARRAY
44409: PPUSH
44410: LD_VAR 0 7
44414: PUSH
44415: LD_INT 2
44417: ARRAY
44418: PPUSH
44419: LD_VAR 0 3
44423: PPUSH
44424: CALL_OW 48
// result := IsPlaced ( unit ) ;
44428: LD_ADDR_VAR 0 4
44432: PUSH
44433: LD_VAR 0 1
44437: PPUSH
44438: CALL_OW 305
44442: ST_TO_ADDR
// exit ;
44443: POP
44444: POP
44445: GO 44451
// end ; end ;
44447: GO 44326
44449: POP
44450: POP
// end ;
44451: LD_VAR 0 4
44455: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
44456: LD_INT 0
44458: PPUSH
44459: PPUSH
44460: PPUSH
// if not side or side > 8 then
44461: LD_VAR 0 1
44465: NOT
44466: PUSH
44467: LD_VAR 0 1
44471: PUSH
44472: LD_INT 8
44474: GREATER
44475: OR
44476: IFFALSE 44480
// exit ;
44478: GO 44667
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
44480: LD_ADDR_VAR 0 4
44484: PUSH
44485: LD_INT 22
44487: PUSH
44488: LD_VAR 0 1
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 21
44499: PUSH
44500: LD_INT 3
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PPUSH
44511: CALL_OW 69
44515: ST_TO_ADDR
// if not tmp then
44516: LD_VAR 0 4
44520: NOT
44521: IFFALSE 44525
// exit ;
44523: GO 44667
// enable_addtolog := true ;
44525: LD_ADDR_OWVAR 81
44529: PUSH
44530: LD_INT 1
44532: ST_TO_ADDR
// AddToLog ( [ ) ;
44533: LD_STRING [
44535: PPUSH
44536: CALL_OW 561
// for i in tmp do
44540: LD_ADDR_VAR 0 3
44544: PUSH
44545: LD_VAR 0 4
44549: PUSH
44550: FOR_IN
44551: IFFALSE 44658
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
44553: LD_STRING [
44555: PUSH
44556: LD_VAR 0 3
44560: PPUSH
44561: CALL_OW 266
44565: STR
44566: PUSH
44567: LD_STRING , 
44569: STR
44570: PUSH
44571: LD_VAR 0 3
44575: PPUSH
44576: CALL_OW 250
44580: STR
44581: PUSH
44582: LD_STRING , 
44584: STR
44585: PUSH
44586: LD_VAR 0 3
44590: PPUSH
44591: CALL_OW 251
44595: STR
44596: PUSH
44597: LD_STRING , 
44599: STR
44600: PUSH
44601: LD_VAR 0 3
44605: PPUSH
44606: CALL_OW 254
44610: STR
44611: PUSH
44612: LD_STRING , 
44614: STR
44615: PUSH
44616: LD_VAR 0 3
44620: PPUSH
44621: LD_INT 1
44623: PPUSH
44624: CALL_OW 268
44628: STR
44629: PUSH
44630: LD_STRING , 
44632: STR
44633: PUSH
44634: LD_VAR 0 3
44638: PPUSH
44639: LD_INT 2
44641: PPUSH
44642: CALL_OW 268
44646: STR
44647: PUSH
44648: LD_STRING ],
44650: STR
44651: PPUSH
44652: CALL_OW 561
// end ;
44656: GO 44550
44658: POP
44659: POP
// AddToLog ( ]; ) ;
44660: LD_STRING ];
44662: PPUSH
44663: CALL_OW 561
// end ;
44667: LD_VAR 0 2
44671: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
44672: LD_INT 0
44674: PPUSH
44675: PPUSH
44676: PPUSH
44677: PPUSH
44678: PPUSH
// if not area or not rate or not max then
44679: LD_VAR 0 1
44683: NOT
44684: PUSH
44685: LD_VAR 0 2
44689: NOT
44690: OR
44691: PUSH
44692: LD_VAR 0 4
44696: NOT
44697: OR
44698: IFFALSE 44702
// exit ;
44700: GO 44891
// while 1 do
44702: LD_INT 1
44704: IFFALSE 44891
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44706: LD_ADDR_VAR 0 9
44710: PUSH
44711: LD_VAR 0 1
44715: PPUSH
44716: LD_INT 1
44718: PPUSH
44719: CALL_OW 287
44723: PUSH
44724: LD_INT 10
44726: MUL
44727: ST_TO_ADDR
// r := rate / 10 ;
44728: LD_ADDR_VAR 0 7
44732: PUSH
44733: LD_VAR 0 2
44737: PUSH
44738: LD_INT 10
44740: DIVREAL
44741: ST_TO_ADDR
// time := 1 1$00 ;
44742: LD_ADDR_VAR 0 8
44746: PUSH
44747: LD_INT 2100
44749: ST_TO_ADDR
// if amount < min then
44750: LD_VAR 0 9
44754: PUSH
44755: LD_VAR 0 3
44759: LESS
44760: IFFALSE 44778
// r := r * 2 else
44762: LD_ADDR_VAR 0 7
44766: PUSH
44767: LD_VAR 0 7
44771: PUSH
44772: LD_INT 2
44774: MUL
44775: ST_TO_ADDR
44776: GO 44804
// if amount > max then
44778: LD_VAR 0 9
44782: PUSH
44783: LD_VAR 0 4
44787: GREATER
44788: IFFALSE 44804
// r := r / 2 ;
44790: LD_ADDR_VAR 0 7
44794: PUSH
44795: LD_VAR 0 7
44799: PUSH
44800: LD_INT 2
44802: DIVREAL
44803: ST_TO_ADDR
// time := time / r ;
44804: LD_ADDR_VAR 0 8
44808: PUSH
44809: LD_VAR 0 8
44813: PUSH
44814: LD_VAR 0 7
44818: DIVREAL
44819: ST_TO_ADDR
// if time < 0 then
44820: LD_VAR 0 8
44824: PUSH
44825: LD_INT 0
44827: LESS
44828: IFFALSE 44845
// time := time * - 1 ;
44830: LD_ADDR_VAR 0 8
44834: PUSH
44835: LD_VAR 0 8
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: MUL
44844: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
44845: LD_VAR 0 8
44849: PUSH
44850: LD_INT 35
44852: PPUSH
44853: LD_INT 875
44855: PPUSH
44856: CALL_OW 12
44860: PLUS
44861: PPUSH
44862: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44866: LD_INT 1
44868: PPUSH
44869: LD_INT 5
44871: PPUSH
44872: CALL_OW 12
44876: PPUSH
44877: LD_VAR 0 1
44881: PPUSH
44882: LD_INT 1
44884: PPUSH
44885: CALL_OW 55
// end ;
44889: GO 44702
// end ;
44891: LD_VAR 0 5
44895: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44896: LD_INT 0
44898: PPUSH
44899: PPUSH
44900: PPUSH
44901: PPUSH
44902: PPUSH
44903: PPUSH
44904: PPUSH
44905: PPUSH
// if not turrets or not factories then
44906: LD_VAR 0 1
44910: NOT
44911: PUSH
44912: LD_VAR 0 2
44916: NOT
44917: OR
44918: IFFALSE 44922
// exit ;
44920: GO 45229
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44922: LD_ADDR_VAR 0 10
44926: PUSH
44927: LD_INT 5
44929: PUSH
44930: LD_INT 6
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: LD_INT 4
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 3
44949: PUSH
44950: LD_INT 5
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 24
44964: PUSH
44965: LD_INT 25
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 23
44974: PUSH
44975: LD_INT 27
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 42
44988: PUSH
44989: LD_INT 43
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 44
44998: PUSH
44999: LD_INT 46
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 45
45008: PUSH
45009: LD_INT 47
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: LIST
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: ST_TO_ADDR
// result := [ ] ;
45026: LD_ADDR_VAR 0 3
45030: PUSH
45031: EMPTY
45032: ST_TO_ADDR
// for i in turrets do
45033: LD_ADDR_VAR 0 4
45037: PUSH
45038: LD_VAR 0 1
45042: PUSH
45043: FOR_IN
45044: IFFALSE 45227
// begin nat := GetNation ( i ) ;
45046: LD_ADDR_VAR 0 7
45050: PUSH
45051: LD_VAR 0 4
45055: PPUSH
45056: CALL_OW 248
45060: ST_TO_ADDR
// weapon := 0 ;
45061: LD_ADDR_VAR 0 8
45065: PUSH
45066: LD_INT 0
45068: ST_TO_ADDR
// if not nat then
45069: LD_VAR 0 7
45073: NOT
45074: IFFALSE 45078
// continue ;
45076: GO 45043
// for j in list [ nat ] do
45078: LD_ADDR_VAR 0 5
45082: PUSH
45083: LD_VAR 0 10
45087: PUSH
45088: LD_VAR 0 7
45092: ARRAY
45093: PUSH
45094: FOR_IN
45095: IFFALSE 45136
// if GetBWeapon ( i ) = j [ 1 ] then
45097: LD_VAR 0 4
45101: PPUSH
45102: CALL_OW 269
45106: PUSH
45107: LD_VAR 0 5
45111: PUSH
45112: LD_INT 1
45114: ARRAY
45115: EQUAL
45116: IFFALSE 45134
// begin weapon := j [ 2 ] ;
45118: LD_ADDR_VAR 0 8
45122: PUSH
45123: LD_VAR 0 5
45127: PUSH
45128: LD_INT 2
45130: ARRAY
45131: ST_TO_ADDR
// break ;
45132: GO 45136
// end ;
45134: GO 45094
45136: POP
45137: POP
// if not weapon then
45138: LD_VAR 0 8
45142: NOT
45143: IFFALSE 45147
// continue ;
45145: GO 45043
// for k in factories do
45147: LD_ADDR_VAR 0 6
45151: PUSH
45152: LD_VAR 0 2
45156: PUSH
45157: FOR_IN
45158: IFFALSE 45223
// begin weapons := AvailableWeaponList ( k ) ;
45160: LD_ADDR_VAR 0 9
45164: PUSH
45165: LD_VAR 0 6
45169: PPUSH
45170: CALL_OW 478
45174: ST_TO_ADDR
// if not weapons then
45175: LD_VAR 0 9
45179: NOT
45180: IFFALSE 45184
// continue ;
45182: GO 45157
// if weapon in weapons then
45184: LD_VAR 0 8
45188: PUSH
45189: LD_VAR 0 9
45193: IN
45194: IFFALSE 45221
// begin result := [ i , weapon ] ;
45196: LD_ADDR_VAR 0 3
45200: PUSH
45201: LD_VAR 0 4
45205: PUSH
45206: LD_VAR 0 8
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: ST_TO_ADDR
// exit ;
45215: POP
45216: POP
45217: POP
45218: POP
45219: GO 45229
// end ; end ;
45221: GO 45157
45223: POP
45224: POP
// end ;
45225: GO 45043
45227: POP
45228: POP
// end ;
45229: LD_VAR 0 3
45233: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
45234: LD_INT 0
45236: PPUSH
// if not side or side > 8 then
45237: LD_VAR 0 3
45241: NOT
45242: PUSH
45243: LD_VAR 0 3
45247: PUSH
45248: LD_INT 8
45250: GREATER
45251: OR
45252: IFFALSE 45256
// exit ;
45254: GO 45315
// if not range then
45256: LD_VAR 0 4
45260: NOT
45261: IFFALSE 45272
// range := - 12 ;
45263: LD_ADDR_VAR 0 4
45267: PUSH
45268: LD_INT 12
45270: NEG
45271: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
45272: LD_VAR 0 1
45276: PPUSH
45277: LD_VAR 0 2
45281: PPUSH
45282: LD_VAR 0 3
45286: PPUSH
45287: LD_VAR 0 4
45291: PPUSH
45292: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
45296: LD_VAR 0 1
45300: PPUSH
45301: LD_VAR 0 2
45305: PPUSH
45306: LD_VAR 0 3
45310: PPUSH
45311: CALL_OW 331
// end ;
45315: LD_VAR 0 5
45319: RET
// export function Video ( mode ) ; begin
45320: LD_INT 0
45322: PPUSH
// ingame_video = mode ;
45323: LD_ADDR_OWVAR 52
45327: PUSH
45328: LD_VAR 0 1
45332: ST_TO_ADDR
// interface_hidden = mode ;
45333: LD_ADDR_OWVAR 54
45337: PUSH
45338: LD_VAR 0 1
45342: ST_TO_ADDR
// end ;
45343: LD_VAR 0 2
45347: RET
// export function Join ( array , element ) ; begin
45348: LD_INT 0
45350: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45351: LD_ADDR_VAR 0 3
45355: PUSH
45356: LD_VAR 0 1
45360: PPUSH
45361: LD_VAR 0 1
45365: PUSH
45366: LD_INT 1
45368: PLUS
45369: PPUSH
45370: LD_VAR 0 2
45374: PPUSH
45375: CALL_OW 1
45379: ST_TO_ADDR
// end ;
45380: LD_VAR 0 3
45384: RET
// export function JoinUnion ( array , element ) ; begin
45385: LD_INT 0
45387: PPUSH
// result := array union element ;
45388: LD_ADDR_VAR 0 3
45392: PUSH
45393: LD_VAR 0 1
45397: PUSH
45398: LD_VAR 0 2
45402: UNION
45403: ST_TO_ADDR
// end ;
45404: LD_VAR 0 3
45408: RET
// export function GetBehemoths ( side ) ; begin
45409: LD_INT 0
45411: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
45412: LD_ADDR_VAR 0 2
45416: PUSH
45417: LD_INT 22
45419: PUSH
45420: LD_VAR 0 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 31
45431: PUSH
45432: LD_INT 25
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PPUSH
45443: CALL_OW 69
45447: ST_TO_ADDR
// end ;
45448: LD_VAR 0 2
45452: RET
// export function Shuffle ( array ) ; var i , index ; begin
45453: LD_INT 0
45455: PPUSH
45456: PPUSH
45457: PPUSH
// result := [ ] ;
45458: LD_ADDR_VAR 0 2
45462: PUSH
45463: EMPTY
45464: ST_TO_ADDR
// if not array then
45465: LD_VAR 0 1
45469: NOT
45470: IFFALSE 45474
// exit ;
45472: GO 45573
// Randomize ;
45474: CALL_OW 10
// for i = array downto 1 do
45478: LD_ADDR_VAR 0 3
45482: PUSH
45483: DOUBLE
45484: LD_VAR 0 1
45488: INC
45489: ST_TO_ADDR
45490: LD_INT 1
45492: PUSH
45493: FOR_DOWNTO
45494: IFFALSE 45571
// begin index := rand ( 1 , array ) ;
45496: LD_ADDR_VAR 0 4
45500: PUSH
45501: LD_INT 1
45503: PPUSH
45504: LD_VAR 0 1
45508: PPUSH
45509: CALL_OW 12
45513: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
45514: LD_ADDR_VAR 0 2
45518: PUSH
45519: LD_VAR 0 2
45523: PPUSH
45524: LD_VAR 0 2
45528: PUSH
45529: LD_INT 1
45531: PLUS
45532: PPUSH
45533: LD_VAR 0 1
45537: PUSH
45538: LD_VAR 0 4
45542: ARRAY
45543: PPUSH
45544: CALL_OW 2
45548: ST_TO_ADDR
// array := Delete ( array , index ) ;
45549: LD_ADDR_VAR 0 1
45553: PUSH
45554: LD_VAR 0 1
45558: PPUSH
45559: LD_VAR 0 4
45563: PPUSH
45564: CALL_OW 3
45568: ST_TO_ADDR
// end ;
45569: GO 45493
45571: POP
45572: POP
// end ;
45573: LD_VAR 0 2
45577: RET
// export function GetBaseMaterials ( base ) ; begin
45578: LD_INT 0
45580: PPUSH
// result := [ 0 , 0 , 0 ] ;
45581: LD_ADDR_VAR 0 2
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: LIST
45599: ST_TO_ADDR
// if not base then
45600: LD_VAR 0 1
45604: NOT
45605: IFFALSE 45609
// exit ;
45607: GO 45658
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
45609: LD_ADDR_VAR 0 2
45613: PUSH
45614: LD_VAR 0 1
45618: PPUSH
45619: LD_INT 1
45621: PPUSH
45622: CALL_OW 275
45626: PUSH
45627: LD_VAR 0 1
45631: PPUSH
45632: LD_INT 2
45634: PPUSH
45635: CALL_OW 275
45639: PUSH
45640: LD_VAR 0 1
45644: PPUSH
45645: LD_INT 3
45647: PPUSH
45648: CALL_OW 275
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: ST_TO_ADDR
// end ;
45658: LD_VAR 0 2
45662: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
45663: LD_INT 0
45665: PPUSH
45666: PPUSH
// result := array ;
45667: LD_ADDR_VAR 0 3
45671: PUSH
45672: LD_VAR 0 1
45676: ST_TO_ADDR
// if size >= result then
45677: LD_VAR 0 2
45681: PUSH
45682: LD_VAR 0 3
45686: GREATEREQUAL
45687: IFFALSE 45691
// exit ;
45689: GO 45741
// if size then
45691: LD_VAR 0 2
45695: IFFALSE 45741
// for i := array downto size do
45697: LD_ADDR_VAR 0 4
45701: PUSH
45702: DOUBLE
45703: LD_VAR 0 1
45707: INC
45708: ST_TO_ADDR
45709: LD_VAR 0 2
45713: PUSH
45714: FOR_DOWNTO
45715: IFFALSE 45739
// result := Delete ( result , result ) ;
45717: LD_ADDR_VAR 0 3
45721: PUSH
45722: LD_VAR 0 3
45726: PPUSH
45727: LD_VAR 0 3
45731: PPUSH
45732: CALL_OW 3
45736: ST_TO_ADDR
45737: GO 45714
45739: POP
45740: POP
// end ;
45741: LD_VAR 0 3
45745: RET
// export function ComExit ( unit ) ; var tmp ; begin
45746: LD_INT 0
45748: PPUSH
45749: PPUSH
// if not IsInUnit ( unit ) then
45750: LD_VAR 0 1
45754: PPUSH
45755: CALL_OW 310
45759: NOT
45760: IFFALSE 45764
// exit ;
45762: GO 45824
// tmp := IsInUnit ( unit ) ;
45764: LD_ADDR_VAR 0 3
45768: PUSH
45769: LD_VAR 0 1
45773: PPUSH
45774: CALL_OW 310
45778: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45779: LD_VAR 0 3
45783: PPUSH
45784: CALL_OW 247
45788: PUSH
45789: LD_INT 2
45791: EQUAL
45792: IFFALSE 45805
// ComExitVehicle ( unit ) else
45794: LD_VAR 0 1
45798: PPUSH
45799: CALL_OW 121
45803: GO 45814
// ComExitBuilding ( unit ) ;
45805: LD_VAR 0 1
45809: PPUSH
45810: CALL_OW 122
// result := tmp ;
45814: LD_ADDR_VAR 0 2
45818: PUSH
45819: LD_VAR 0 3
45823: ST_TO_ADDR
// end ;
45824: LD_VAR 0 2
45828: RET
// export function ComExitAll ( units ) ; var i ; begin
45829: LD_INT 0
45831: PPUSH
45832: PPUSH
// if not units then
45833: LD_VAR 0 1
45837: NOT
45838: IFFALSE 45842
// exit ;
45840: GO 45868
// for i in units do
45842: LD_ADDR_VAR 0 3
45846: PUSH
45847: LD_VAR 0 1
45851: PUSH
45852: FOR_IN
45853: IFFALSE 45866
// ComExit ( i ) ;
45855: LD_VAR 0 3
45859: PPUSH
45860: CALL 45746 0 1
45864: GO 45852
45866: POP
45867: POP
// end ;
45868: LD_VAR 0 2
45872: RET
// export function ResetHc ; begin
45873: LD_INT 0
45875: PPUSH
// InitHc ;
45876: CALL_OW 19
// hc_importance := 0 ;
45880: LD_ADDR_OWVAR 32
45884: PUSH
45885: LD_INT 0
45887: ST_TO_ADDR
// end ;
45888: LD_VAR 0 1
45892: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45893: LD_INT 0
45895: PPUSH
45896: PPUSH
45897: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45898: LD_ADDR_VAR 0 6
45902: PUSH
45903: LD_VAR 0 1
45907: PUSH
45908: LD_VAR 0 3
45912: PLUS
45913: PUSH
45914: LD_INT 2
45916: DIV
45917: ST_TO_ADDR
// if _x < 0 then
45918: LD_VAR 0 6
45922: PUSH
45923: LD_INT 0
45925: LESS
45926: IFFALSE 45943
// _x := _x * - 1 ;
45928: LD_ADDR_VAR 0 6
45932: PUSH
45933: LD_VAR 0 6
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: MUL
45942: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45943: LD_ADDR_VAR 0 7
45947: PUSH
45948: LD_VAR 0 2
45952: PUSH
45953: LD_VAR 0 4
45957: PLUS
45958: PUSH
45959: LD_INT 2
45961: DIV
45962: ST_TO_ADDR
// if _y < 0 then
45963: LD_VAR 0 7
45967: PUSH
45968: LD_INT 0
45970: LESS
45971: IFFALSE 45988
// _y := _y * - 1 ;
45973: LD_ADDR_VAR 0 7
45977: PUSH
45978: LD_VAR 0 7
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: MUL
45987: ST_TO_ADDR
// result := [ _x , _y ] ;
45988: LD_ADDR_VAR 0 5
45992: PUSH
45993: LD_VAR 0 6
45997: PUSH
45998: LD_VAR 0 7
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// end ;
46007: LD_VAR 0 5
46011: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46012: LD_INT 0
46014: PPUSH
46015: PPUSH
46016: PPUSH
46017: PPUSH
// task := GetTaskList ( unit ) ;
46018: LD_ADDR_VAR 0 7
46022: PUSH
46023: LD_VAR 0 1
46027: PPUSH
46028: CALL_OW 437
46032: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
46033: LD_VAR 0 7
46037: NOT
46038: PUSH
46039: LD_VAR 0 1
46043: PPUSH
46044: LD_VAR 0 2
46048: PPUSH
46049: CALL_OW 308
46053: NOT
46054: AND
46055: IFFALSE 46059
// exit ;
46057: GO 46177
// if IsInArea ( unit , area ) then
46059: LD_VAR 0 1
46063: PPUSH
46064: LD_VAR 0 2
46068: PPUSH
46069: CALL_OW 308
46073: IFFALSE 46091
// begin ComMoveToArea ( unit , goAway ) ;
46075: LD_VAR 0 1
46079: PPUSH
46080: LD_VAR 0 3
46084: PPUSH
46085: CALL_OW 113
// exit ;
46089: GO 46177
// end ; if task [ 1 ] [ 1 ] <> M then
46091: LD_VAR 0 7
46095: PUSH
46096: LD_INT 1
46098: ARRAY
46099: PUSH
46100: LD_INT 1
46102: ARRAY
46103: PUSH
46104: LD_STRING M
46106: NONEQUAL
46107: IFFALSE 46111
// exit ;
46109: GO 46177
// x := task [ 1 ] [ 2 ] ;
46111: LD_ADDR_VAR 0 5
46115: PUSH
46116: LD_VAR 0 7
46120: PUSH
46121: LD_INT 1
46123: ARRAY
46124: PUSH
46125: LD_INT 2
46127: ARRAY
46128: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
46129: LD_ADDR_VAR 0 6
46133: PUSH
46134: LD_VAR 0 7
46138: PUSH
46139: LD_INT 1
46141: ARRAY
46142: PUSH
46143: LD_INT 3
46145: ARRAY
46146: ST_TO_ADDR
// if InArea ( x , y , area ) then
46147: LD_VAR 0 5
46151: PPUSH
46152: LD_VAR 0 6
46156: PPUSH
46157: LD_VAR 0 2
46161: PPUSH
46162: CALL_OW 309
46166: IFFALSE 46177
// ComStop ( unit ) ;
46168: LD_VAR 0 1
46172: PPUSH
46173: CALL_OW 141
// end ;
46177: LD_VAR 0 4
46181: RET
// export function Abs ( value ) ; begin
46182: LD_INT 0
46184: PPUSH
// result := value ;
46185: LD_ADDR_VAR 0 2
46189: PUSH
46190: LD_VAR 0 1
46194: ST_TO_ADDR
// if value < 0 then
46195: LD_VAR 0 1
46199: PUSH
46200: LD_INT 0
46202: LESS
46203: IFFALSE 46220
// result := value * - 1 ;
46205: LD_ADDR_VAR 0 2
46209: PUSH
46210: LD_VAR 0 1
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: MUL
46219: ST_TO_ADDR
// end ;
46220: LD_VAR 0 2
46224: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
46225: LD_INT 0
46227: PPUSH
46228: PPUSH
46229: PPUSH
46230: PPUSH
46231: PPUSH
46232: PPUSH
46233: PPUSH
46234: PPUSH
// if not unit or not building then
46235: LD_VAR 0 1
46239: NOT
46240: PUSH
46241: LD_VAR 0 2
46245: NOT
46246: OR
46247: IFFALSE 46251
// exit ;
46249: GO 46477
// x := GetX ( building ) ;
46251: LD_ADDR_VAR 0 4
46255: PUSH
46256: LD_VAR 0 2
46260: PPUSH
46261: CALL_OW 250
46265: ST_TO_ADDR
// y := GetY ( building ) ;
46266: LD_ADDR_VAR 0 6
46270: PUSH
46271: LD_VAR 0 2
46275: PPUSH
46276: CALL_OW 251
46280: ST_TO_ADDR
// d := GetDir ( building ) ;
46281: LD_ADDR_VAR 0 8
46285: PUSH
46286: LD_VAR 0 2
46290: PPUSH
46291: CALL_OW 254
46295: ST_TO_ADDR
// r := 4 ;
46296: LD_ADDR_VAR 0 9
46300: PUSH
46301: LD_INT 4
46303: ST_TO_ADDR
// for i := 1 to 5 do
46304: LD_ADDR_VAR 0 10
46308: PUSH
46309: DOUBLE
46310: LD_INT 1
46312: DEC
46313: ST_TO_ADDR
46314: LD_INT 5
46316: PUSH
46317: FOR_TO
46318: IFFALSE 46475
// begin _x := ShiftX ( x , d , r + i ) ;
46320: LD_ADDR_VAR 0 5
46324: PUSH
46325: LD_VAR 0 4
46329: PPUSH
46330: LD_VAR 0 8
46334: PPUSH
46335: LD_VAR 0 9
46339: PUSH
46340: LD_VAR 0 10
46344: PLUS
46345: PPUSH
46346: CALL_OW 272
46350: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46351: LD_ADDR_VAR 0 7
46355: PUSH
46356: LD_VAR 0 6
46360: PPUSH
46361: LD_VAR 0 8
46365: PPUSH
46366: LD_VAR 0 9
46370: PUSH
46371: LD_VAR 0 10
46375: PLUS
46376: PPUSH
46377: CALL_OW 273
46381: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
46382: LD_VAR 0 5
46386: PPUSH
46387: LD_VAR 0 7
46391: PPUSH
46392: CALL_OW 488
46396: PUSH
46397: LD_VAR 0 5
46401: PPUSH
46402: LD_VAR 0 7
46406: PPUSH
46407: CALL_OW 428
46411: PPUSH
46412: CALL_OW 247
46416: PUSH
46417: LD_INT 3
46419: PUSH
46420: LD_INT 2
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: IN
46427: NOT
46428: AND
46429: IFFALSE 46473
// begin ComMoveXY ( unit , _x , _y ) ;
46431: LD_VAR 0 1
46435: PPUSH
46436: LD_VAR 0 5
46440: PPUSH
46441: LD_VAR 0 7
46445: PPUSH
46446: CALL_OW 111
// result := [ _x , _y ] ;
46450: LD_ADDR_VAR 0 3
46454: PUSH
46455: LD_VAR 0 5
46459: PUSH
46460: LD_VAR 0 7
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: ST_TO_ADDR
// exit ;
46469: POP
46470: POP
46471: GO 46477
// end ; end ;
46473: GO 46317
46475: POP
46476: POP
// end ;
46477: LD_VAR 0 3
46481: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
46482: LD_INT 0
46484: PPUSH
46485: PPUSH
46486: PPUSH
// result := 0 ;
46487: LD_ADDR_VAR 0 3
46491: PUSH
46492: LD_INT 0
46494: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
46495: LD_VAR 0 1
46499: PUSH
46500: LD_INT 0
46502: LESS
46503: PUSH
46504: LD_VAR 0 1
46508: PUSH
46509: LD_INT 8
46511: GREATER
46512: OR
46513: PUSH
46514: LD_VAR 0 2
46518: PUSH
46519: LD_INT 0
46521: LESS
46522: OR
46523: PUSH
46524: LD_VAR 0 2
46528: PUSH
46529: LD_INT 8
46531: GREATER
46532: OR
46533: IFFALSE 46537
// exit ;
46535: GO 46612
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
46537: LD_ADDR_VAR 0 4
46541: PUSH
46542: LD_INT 22
46544: PUSH
46545: LD_VAR 0 2
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PPUSH
46554: CALL_OW 69
46558: PUSH
46559: FOR_IN
46560: IFFALSE 46610
// begin un := UnitShoot ( i ) ;
46562: LD_ADDR_VAR 0 5
46566: PUSH
46567: LD_VAR 0 4
46571: PPUSH
46572: CALL_OW 504
46576: ST_TO_ADDR
// if GetSide ( un ) = side1 then
46577: LD_VAR 0 5
46581: PPUSH
46582: CALL_OW 255
46586: PUSH
46587: LD_VAR 0 1
46591: EQUAL
46592: IFFALSE 46608
// begin result := un ;
46594: LD_ADDR_VAR 0 3
46598: PUSH
46599: LD_VAR 0 5
46603: ST_TO_ADDR
// exit ;
46604: POP
46605: POP
46606: GO 46612
// end ; end ;
46608: GO 46559
46610: POP
46611: POP
// end ;
46612: LD_VAR 0 3
46616: RET
// export function GetCargoBay ( units ) ; begin
46617: LD_INT 0
46619: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
46620: LD_ADDR_VAR 0 2
46624: PUSH
46625: LD_VAR 0 1
46629: PPUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 34
46635: PUSH
46636: LD_INT 12
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 34
46645: PUSH
46646: LD_INT 51
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 34
46655: PUSH
46656: LD_INT 32
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 34
46665: PUSH
46666: LD_EXP 40
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: PPUSH
46682: CALL_OW 72
46686: ST_TO_ADDR
// end ;
46687: LD_VAR 0 2
46691: RET
// export function Negate ( value ) ; begin
46692: LD_INT 0
46694: PPUSH
// result := not value ;
46695: LD_ADDR_VAR 0 2
46699: PUSH
46700: LD_VAR 0 1
46704: NOT
46705: ST_TO_ADDR
// end ;
46706: LD_VAR 0 2
46710: RET
// export function Inc ( value ) ; begin
46711: LD_INT 0
46713: PPUSH
// result := value + 1 ;
46714: LD_ADDR_VAR 0 2
46718: PUSH
46719: LD_VAR 0 1
46723: PUSH
46724: LD_INT 1
46726: PLUS
46727: ST_TO_ADDR
// end ;
46728: LD_VAR 0 2
46732: RET
// export function Dec ( value ) ; begin
46733: LD_INT 0
46735: PPUSH
// result := value - 1 ;
46736: LD_ADDR_VAR 0 2
46740: PUSH
46741: LD_VAR 0 1
46745: PUSH
46746: LD_INT 1
46748: MINUS
46749: ST_TO_ADDR
// end ;
46750: LD_VAR 0 2
46754: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46755: LD_INT 0
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46765: LD_VAR 0 1
46769: PPUSH
46770: LD_VAR 0 2
46774: PPUSH
46775: CALL_OW 488
46779: NOT
46780: PUSH
46781: LD_VAR 0 3
46785: PPUSH
46786: LD_VAR 0 4
46790: PPUSH
46791: CALL_OW 488
46795: NOT
46796: OR
46797: IFFALSE 46810
// begin result := - 1 ;
46799: LD_ADDR_VAR 0 5
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: ST_TO_ADDR
// exit ;
46808: GO 47045
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46810: LD_ADDR_VAR 0 12
46814: PUSH
46815: LD_VAR 0 1
46819: PPUSH
46820: LD_VAR 0 2
46824: PPUSH
46825: LD_VAR 0 3
46829: PPUSH
46830: LD_VAR 0 4
46834: PPUSH
46835: CALL 45893 0 4
46839: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46840: LD_ADDR_VAR 0 11
46844: PUSH
46845: LD_VAR 0 1
46849: PPUSH
46850: LD_VAR 0 2
46854: PPUSH
46855: LD_VAR 0 12
46859: PUSH
46860: LD_INT 1
46862: ARRAY
46863: PPUSH
46864: LD_VAR 0 12
46868: PUSH
46869: LD_INT 2
46871: ARRAY
46872: PPUSH
46873: CALL_OW 298
46877: ST_TO_ADDR
// distance := 9999 ;
46878: LD_ADDR_VAR 0 10
46882: PUSH
46883: LD_INT 9999
46885: ST_TO_ADDR
// for i := 0 to 5 do
46886: LD_ADDR_VAR 0 6
46890: PUSH
46891: DOUBLE
46892: LD_INT 0
46894: DEC
46895: ST_TO_ADDR
46896: LD_INT 5
46898: PUSH
46899: FOR_TO
46900: IFFALSE 47043
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46902: LD_ADDR_VAR 0 7
46906: PUSH
46907: LD_VAR 0 1
46911: PPUSH
46912: LD_VAR 0 6
46916: PPUSH
46917: LD_VAR 0 11
46921: PPUSH
46922: CALL_OW 272
46926: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46927: LD_ADDR_VAR 0 8
46931: PUSH
46932: LD_VAR 0 2
46936: PPUSH
46937: LD_VAR 0 6
46941: PPUSH
46942: LD_VAR 0 11
46946: PPUSH
46947: CALL_OW 273
46951: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46952: LD_VAR 0 7
46956: PPUSH
46957: LD_VAR 0 8
46961: PPUSH
46962: CALL_OW 488
46966: NOT
46967: IFFALSE 46971
// continue ;
46969: GO 46899
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
46971: LD_ADDR_VAR 0 9
46975: PUSH
46976: LD_VAR 0 12
46980: PUSH
46981: LD_INT 1
46983: ARRAY
46984: PPUSH
46985: LD_VAR 0 12
46989: PUSH
46990: LD_INT 2
46992: ARRAY
46993: PPUSH
46994: LD_VAR 0 7
46998: PPUSH
46999: LD_VAR 0 8
47003: PPUSH
47004: CALL_OW 298
47008: ST_TO_ADDR
// if tmp < distance then
47009: LD_VAR 0 9
47013: PUSH
47014: LD_VAR 0 10
47018: LESS
47019: IFFALSE 47041
// begin result := i ;
47021: LD_ADDR_VAR 0 5
47025: PUSH
47026: LD_VAR 0 6
47030: ST_TO_ADDR
// distance := tmp ;
47031: LD_ADDR_VAR 0 10
47035: PUSH
47036: LD_VAR 0 9
47040: ST_TO_ADDR
// end ; end ;
47041: GO 46899
47043: POP
47044: POP
// end ;
47045: LD_VAR 0 5
47049: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47050: LD_INT 0
47052: PPUSH
47053: PPUSH
// if not driver or not IsInUnit ( driver ) then
47054: LD_VAR 0 1
47058: NOT
47059: PUSH
47060: LD_VAR 0 1
47064: PPUSH
47065: CALL_OW 310
47069: NOT
47070: OR
47071: IFFALSE 47075
// exit ;
47073: GO 47165
// vehicle := IsInUnit ( driver ) ;
47075: LD_ADDR_VAR 0 3
47079: PUSH
47080: LD_VAR 0 1
47084: PPUSH
47085: CALL_OW 310
47089: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47090: LD_VAR 0 1
47094: PPUSH
47095: LD_STRING \
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: PUSH
47125: LD_STRING E
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_VAR 0 3
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PPUSH
47161: CALL_OW 446
// end ;
47165: LD_VAR 0 2
47169: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47170: LD_INT 0
47172: PPUSH
47173: PPUSH
// if not driver or not IsInUnit ( driver ) then
47174: LD_VAR 0 1
47178: NOT
47179: PUSH
47180: LD_VAR 0 1
47184: PPUSH
47185: CALL_OW 310
47189: NOT
47190: OR
47191: IFFALSE 47195
// exit ;
47193: GO 47285
// vehicle := IsInUnit ( driver ) ;
47195: LD_ADDR_VAR 0 3
47199: PUSH
47200: LD_VAR 0 1
47204: PPUSH
47205: CALL_OW 310
47209: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47210: LD_VAR 0 1
47214: PPUSH
47215: LD_STRING \
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: PUSH
47245: LD_STRING E
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: LD_VAR 0 3
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PPUSH
47281: CALL_OW 447
// end ;
47285: LD_VAR 0 2
47289: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
47290: LD_INT 0
47292: PPUSH
47293: PPUSH
47294: PPUSH
// tmp := [ ] ;
47295: LD_ADDR_VAR 0 5
47299: PUSH
47300: EMPTY
47301: ST_TO_ADDR
// for i in units do
47302: LD_ADDR_VAR 0 4
47306: PUSH
47307: LD_VAR 0 1
47311: PUSH
47312: FOR_IN
47313: IFFALSE 47351
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
47315: LD_ADDR_VAR 0 5
47319: PUSH
47320: LD_VAR 0 5
47324: PPUSH
47325: LD_VAR 0 5
47329: PUSH
47330: LD_INT 1
47332: PLUS
47333: PPUSH
47334: LD_VAR 0 4
47338: PPUSH
47339: CALL_OW 256
47343: PPUSH
47344: CALL_OW 2
47348: ST_TO_ADDR
47349: GO 47312
47351: POP
47352: POP
// if not tmp then
47353: LD_VAR 0 5
47357: NOT
47358: IFFALSE 47362
// exit ;
47360: GO 47410
// if asc then
47362: LD_VAR 0 2
47366: IFFALSE 47390
// result := SortListByListAsc ( units , tmp ) else
47368: LD_ADDR_VAR 0 3
47372: PUSH
47373: LD_VAR 0 1
47377: PPUSH
47378: LD_VAR 0 5
47382: PPUSH
47383: CALL_OW 76
47387: ST_TO_ADDR
47388: GO 47410
// result := SortListByListDesc ( units , tmp ) ;
47390: LD_ADDR_VAR 0 3
47394: PUSH
47395: LD_VAR 0 1
47399: PPUSH
47400: LD_VAR 0 5
47404: PPUSH
47405: CALL_OW 77
47409: ST_TO_ADDR
// end ;
47410: LD_VAR 0 3
47414: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
47415: LD_INT 0
47417: PPUSH
47418: PPUSH
// task := GetTaskList ( mech ) ;
47419: LD_ADDR_VAR 0 4
47423: PUSH
47424: LD_VAR 0 1
47428: PPUSH
47429: CALL_OW 437
47433: ST_TO_ADDR
// if not task then
47434: LD_VAR 0 4
47438: NOT
47439: IFFALSE 47443
// exit ;
47441: GO 47485
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
47443: LD_ADDR_VAR 0 3
47447: PUSH
47448: LD_VAR 0 4
47452: PUSH
47453: LD_INT 1
47455: ARRAY
47456: PUSH
47457: LD_INT 1
47459: ARRAY
47460: PUSH
47461: LD_STRING r
47463: EQUAL
47464: PUSH
47465: LD_VAR 0 4
47469: PUSH
47470: LD_INT 1
47472: ARRAY
47473: PUSH
47474: LD_INT 4
47476: ARRAY
47477: PUSH
47478: LD_VAR 0 2
47482: EQUAL
47483: AND
47484: ST_TO_ADDR
// end ;
47485: LD_VAR 0 3
47489: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
47490: LD_INT 0
47492: PPUSH
// SetDir ( unit , d ) ;
47493: LD_VAR 0 1
47497: PPUSH
47498: LD_VAR 0 4
47502: PPUSH
47503: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
47507: LD_VAR 0 1
47511: PPUSH
47512: LD_VAR 0 2
47516: PPUSH
47517: LD_VAR 0 3
47521: PPUSH
47522: LD_VAR 0 5
47526: PPUSH
47527: CALL_OW 48
// end ;
47531: LD_VAR 0 6
47535: RET
// export function ToNaturalNumber ( number ) ; begin
47536: LD_INT 0
47538: PPUSH
// result := number div 1 ;
47539: LD_ADDR_VAR 0 2
47543: PUSH
47544: LD_VAR 0 1
47548: PUSH
47549: LD_INT 1
47551: DIV
47552: ST_TO_ADDR
// if number < 0 then
47553: LD_VAR 0 1
47557: PUSH
47558: LD_INT 0
47560: LESS
47561: IFFALSE 47571
// result := 0 ;
47563: LD_ADDR_VAR 0 2
47567: PUSH
47568: LD_INT 0
47570: ST_TO_ADDR
// end ;
47571: LD_VAR 0 2
47575: RET
// export function SortByClass ( units , class ) ; var un ; begin
47576: LD_INT 0
47578: PPUSH
47579: PPUSH
// if not units or not class then
47580: LD_VAR 0 1
47584: NOT
47585: PUSH
47586: LD_VAR 0 2
47590: NOT
47591: OR
47592: IFFALSE 47596
// exit ;
47594: GO 47691
// result := [ ] ;
47596: LD_ADDR_VAR 0 3
47600: PUSH
47601: EMPTY
47602: ST_TO_ADDR
// for un in units do
47603: LD_ADDR_VAR 0 4
47607: PUSH
47608: LD_VAR 0 1
47612: PUSH
47613: FOR_IN
47614: IFFALSE 47689
// if GetClass ( un ) = class then
47616: LD_VAR 0 4
47620: PPUSH
47621: CALL_OW 257
47625: PUSH
47626: LD_VAR 0 2
47630: EQUAL
47631: IFFALSE 47658
// result := Insert ( result , 1 , un ) else
47633: LD_ADDR_VAR 0 3
47637: PUSH
47638: LD_VAR 0 3
47642: PPUSH
47643: LD_INT 1
47645: PPUSH
47646: LD_VAR 0 4
47650: PPUSH
47651: CALL_OW 2
47655: ST_TO_ADDR
47656: GO 47687
// result := Replace ( result , result + 1 , un ) ;
47658: LD_ADDR_VAR 0 3
47662: PUSH
47663: LD_VAR 0 3
47667: PPUSH
47668: LD_VAR 0 3
47672: PUSH
47673: LD_INT 1
47675: PLUS
47676: PPUSH
47677: LD_VAR 0 4
47681: PPUSH
47682: CALL_OW 1
47686: ST_TO_ADDR
47687: GO 47613
47689: POP
47690: POP
// end ;
47691: LD_VAR 0 3
47695: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
47696: LD_INT 0
47698: PPUSH
47699: PPUSH
47700: PPUSH
47701: PPUSH
47702: PPUSH
47703: PPUSH
47704: PPUSH
// result := [ ] ;
47705: LD_ADDR_VAR 0 4
47709: PUSH
47710: EMPTY
47711: ST_TO_ADDR
// if x - r < 0 then
47712: LD_VAR 0 1
47716: PUSH
47717: LD_VAR 0 3
47721: MINUS
47722: PUSH
47723: LD_INT 0
47725: LESS
47726: IFFALSE 47738
// min_x := 0 else
47728: LD_ADDR_VAR 0 8
47732: PUSH
47733: LD_INT 0
47735: ST_TO_ADDR
47736: GO 47754
// min_x := x - r ;
47738: LD_ADDR_VAR 0 8
47742: PUSH
47743: LD_VAR 0 1
47747: PUSH
47748: LD_VAR 0 3
47752: MINUS
47753: ST_TO_ADDR
// if y - r < 0 then
47754: LD_VAR 0 2
47758: PUSH
47759: LD_VAR 0 3
47763: MINUS
47764: PUSH
47765: LD_INT 0
47767: LESS
47768: IFFALSE 47780
// min_y := 0 else
47770: LD_ADDR_VAR 0 7
47774: PUSH
47775: LD_INT 0
47777: ST_TO_ADDR
47778: GO 47796
// min_y := y - r ;
47780: LD_ADDR_VAR 0 7
47784: PUSH
47785: LD_VAR 0 2
47789: PUSH
47790: LD_VAR 0 3
47794: MINUS
47795: ST_TO_ADDR
// max_x := x + r ;
47796: LD_ADDR_VAR 0 9
47800: PUSH
47801: LD_VAR 0 1
47805: PUSH
47806: LD_VAR 0 3
47810: PLUS
47811: ST_TO_ADDR
// max_y := y + r ;
47812: LD_ADDR_VAR 0 10
47816: PUSH
47817: LD_VAR 0 2
47821: PUSH
47822: LD_VAR 0 3
47826: PLUS
47827: ST_TO_ADDR
// for _x = min_x to max_x do
47828: LD_ADDR_VAR 0 5
47832: PUSH
47833: DOUBLE
47834: LD_VAR 0 8
47838: DEC
47839: ST_TO_ADDR
47840: LD_VAR 0 9
47844: PUSH
47845: FOR_TO
47846: IFFALSE 47947
// for _y = min_y to max_y do
47848: LD_ADDR_VAR 0 6
47852: PUSH
47853: DOUBLE
47854: LD_VAR 0 7
47858: DEC
47859: ST_TO_ADDR
47860: LD_VAR 0 10
47864: PUSH
47865: FOR_TO
47866: IFFALSE 47943
// begin if not ValidHex ( _x , _y ) then
47868: LD_VAR 0 5
47872: PPUSH
47873: LD_VAR 0 6
47877: PPUSH
47878: CALL_OW 488
47882: NOT
47883: IFFALSE 47887
// continue ;
47885: GO 47865
// if GetResourceTypeXY ( _x , _y ) then
47887: LD_VAR 0 5
47891: PPUSH
47892: LD_VAR 0 6
47896: PPUSH
47897: CALL_OW 283
47901: IFFALSE 47941
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47903: LD_ADDR_VAR 0 4
47907: PUSH
47908: LD_VAR 0 4
47912: PPUSH
47913: LD_VAR 0 4
47917: PUSH
47918: LD_INT 1
47920: PLUS
47921: PPUSH
47922: LD_VAR 0 5
47926: PUSH
47927: LD_VAR 0 6
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PPUSH
47936: CALL_OW 1
47940: ST_TO_ADDR
// end ;
47941: GO 47865
47943: POP
47944: POP
47945: GO 47845
47947: POP
47948: POP
// end ;
47949: LD_VAR 0 4
47953: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47954: LD_INT 0
47956: PPUSH
47957: PPUSH
47958: PPUSH
47959: PPUSH
47960: PPUSH
47961: PPUSH
47962: PPUSH
47963: PPUSH
// if not units then
47964: LD_VAR 0 1
47968: NOT
47969: IFFALSE 47973
// exit ;
47971: GO 48499
// result := UnitFilter ( units , [ f_ok ] ) ;
47973: LD_ADDR_VAR 0 3
47977: PUSH
47978: LD_VAR 0 1
47982: PPUSH
47983: LD_INT 50
47985: PUSH
47986: EMPTY
47987: LIST
47988: PPUSH
47989: CALL_OW 72
47993: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
47994: LD_ADDR_VAR 0 8
47998: PUSH
47999: LD_VAR 0 1
48003: PUSH
48004: LD_INT 1
48006: ARRAY
48007: PPUSH
48008: CALL_OW 255
48012: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
48013: LD_ADDR_VAR 0 10
48017: PUSH
48018: LD_INT 29
48020: PUSH
48021: LD_EXP 43
48025: PUSH
48026: LD_INT 49
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: LIST
48033: ST_TO_ADDR
// if not result then
48034: LD_VAR 0 3
48038: NOT
48039: IFFALSE 48043
// exit ;
48041: GO 48499
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
48043: LD_ADDR_VAR 0 5
48047: PUSH
48048: LD_INT 81
48050: PUSH
48051: LD_VAR 0 8
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PPUSH
48060: CALL_OW 69
48064: ST_TO_ADDR
// for i in result do
48065: LD_ADDR_VAR 0 4
48069: PUSH
48070: LD_VAR 0 3
48074: PUSH
48075: FOR_IN
48076: IFFALSE 48497
// begin tag := GetTag ( i ) + 1 ;
48078: LD_ADDR_VAR 0 9
48082: PUSH
48083: LD_VAR 0 4
48087: PPUSH
48088: CALL_OW 110
48092: PUSH
48093: LD_INT 1
48095: PLUS
48096: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
48097: LD_ADDR_VAR 0 7
48101: PUSH
48102: LD_VAR 0 4
48106: PPUSH
48107: CALL_OW 250
48111: PPUSH
48112: LD_VAR 0 4
48116: PPUSH
48117: CALL_OW 251
48121: PPUSH
48122: LD_INT 6
48124: PPUSH
48125: CALL 47696 0 3
48129: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
48130: LD_VAR 0 4
48134: PPUSH
48135: CALL_OW 247
48139: PUSH
48140: LD_INT 2
48142: EQUAL
48143: PUSH
48144: LD_VAR 0 7
48148: AND
48149: PUSH
48150: LD_VAR 0 4
48154: PPUSH
48155: CALL_OW 264
48159: PUSH
48160: LD_VAR 0 10
48164: IN
48165: NOT
48166: AND
48167: IFFALSE 48206
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
48169: LD_VAR 0 4
48173: PPUSH
48174: LD_VAR 0 7
48178: PUSH
48179: LD_INT 1
48181: ARRAY
48182: PUSH
48183: LD_INT 1
48185: ARRAY
48186: PPUSH
48187: LD_VAR 0 7
48191: PUSH
48192: LD_INT 1
48194: ARRAY
48195: PUSH
48196: LD_INT 2
48198: ARRAY
48199: PPUSH
48200: CALL_OW 116
48204: GO 48495
// if path > tag then
48206: LD_VAR 0 2
48210: PUSH
48211: LD_VAR 0 9
48215: GREATER
48216: IFFALSE 48424
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
48218: LD_ADDR_VAR 0 6
48222: PUSH
48223: LD_VAR 0 5
48227: PPUSH
48228: LD_INT 91
48230: PUSH
48231: LD_VAR 0 4
48235: PUSH
48236: LD_INT 8
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: PPUSH
48244: CALL_OW 72
48248: ST_TO_ADDR
// if nearEnemy then
48249: LD_VAR 0 6
48253: IFFALSE 48322
// begin if GetWeapon ( i ) = ru_time_lapser then
48255: LD_VAR 0 4
48259: PPUSH
48260: CALL_OW 264
48264: PUSH
48265: LD_INT 49
48267: EQUAL
48268: IFFALSE 48296
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
48270: LD_VAR 0 4
48274: PPUSH
48275: LD_VAR 0 6
48279: PPUSH
48280: LD_VAR 0 4
48284: PPUSH
48285: CALL_OW 74
48289: PPUSH
48290: CALL_OW 112
48294: GO 48320
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
48296: LD_VAR 0 4
48300: PPUSH
48301: LD_VAR 0 6
48305: PPUSH
48306: LD_VAR 0 4
48310: PPUSH
48311: CALL_OW 74
48315: PPUSH
48316: CALL_OW 115
// end else
48320: GO 48422
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
48322: LD_VAR 0 4
48326: PPUSH
48327: LD_VAR 0 2
48331: PUSH
48332: LD_VAR 0 9
48336: ARRAY
48337: PUSH
48338: LD_INT 1
48340: ARRAY
48341: PPUSH
48342: LD_VAR 0 2
48346: PUSH
48347: LD_VAR 0 9
48351: ARRAY
48352: PUSH
48353: LD_INT 2
48355: ARRAY
48356: PPUSH
48357: CALL_OW 297
48361: PUSH
48362: LD_INT 6
48364: GREATER
48365: IFFALSE 48408
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
48367: LD_VAR 0 4
48371: PPUSH
48372: LD_VAR 0 2
48376: PUSH
48377: LD_VAR 0 9
48381: ARRAY
48382: PUSH
48383: LD_INT 1
48385: ARRAY
48386: PPUSH
48387: LD_VAR 0 2
48391: PUSH
48392: LD_VAR 0 9
48396: ARRAY
48397: PUSH
48398: LD_INT 2
48400: ARRAY
48401: PPUSH
48402: CALL_OW 114
48406: GO 48422
// SetTag ( i , tag ) ;
48408: LD_VAR 0 4
48412: PPUSH
48413: LD_VAR 0 9
48417: PPUSH
48418: CALL_OW 109
// end else
48422: GO 48495
// if enemy then
48424: LD_VAR 0 5
48428: IFFALSE 48495
// begin if GetWeapon ( i ) = ru_time_lapser then
48430: LD_VAR 0 4
48434: PPUSH
48435: CALL_OW 264
48439: PUSH
48440: LD_INT 49
48442: EQUAL
48443: IFFALSE 48471
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
48445: LD_VAR 0 4
48449: PPUSH
48450: LD_VAR 0 5
48454: PPUSH
48455: LD_VAR 0 4
48459: PPUSH
48460: CALL_OW 74
48464: PPUSH
48465: CALL_OW 112
48469: GO 48495
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
48471: LD_VAR 0 4
48475: PPUSH
48476: LD_VAR 0 5
48480: PPUSH
48481: LD_VAR 0 4
48485: PPUSH
48486: CALL_OW 74
48490: PPUSH
48491: CALL_OW 115
// end ; end ;
48495: GO 48075
48497: POP
48498: POP
// end ;
48499: LD_VAR 0 3
48503: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
48504: LD_INT 0
48506: PPUSH
48507: PPUSH
48508: PPUSH
// if not unit or IsInUnit ( unit ) then
48509: LD_VAR 0 1
48513: NOT
48514: PUSH
48515: LD_VAR 0 1
48519: PPUSH
48520: CALL_OW 310
48524: OR
48525: IFFALSE 48529
// exit ;
48527: GO 48620
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
48529: LD_ADDR_VAR 0 4
48533: PUSH
48534: LD_VAR 0 1
48538: PPUSH
48539: CALL_OW 250
48543: PPUSH
48544: LD_VAR 0 2
48548: PPUSH
48549: LD_INT 1
48551: PPUSH
48552: CALL_OW 272
48556: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
48557: LD_ADDR_VAR 0 5
48561: PUSH
48562: LD_VAR 0 1
48566: PPUSH
48567: CALL_OW 251
48571: PPUSH
48572: LD_VAR 0 2
48576: PPUSH
48577: LD_INT 1
48579: PPUSH
48580: CALL_OW 273
48584: ST_TO_ADDR
// if ValidHex ( x , y ) then
48585: LD_VAR 0 4
48589: PPUSH
48590: LD_VAR 0 5
48594: PPUSH
48595: CALL_OW 488
48599: IFFALSE 48620
// ComTurnXY ( unit , x , y ) ;
48601: LD_VAR 0 1
48605: PPUSH
48606: LD_VAR 0 4
48610: PPUSH
48611: LD_VAR 0 5
48615: PPUSH
48616: CALL_OW 118
// end ;
48620: LD_VAR 0 3
48624: RET
// export function SeeUnits ( side , units ) ; var i ; begin
48625: LD_INT 0
48627: PPUSH
48628: PPUSH
// result := false ;
48629: LD_ADDR_VAR 0 3
48633: PUSH
48634: LD_INT 0
48636: ST_TO_ADDR
// if not units then
48637: LD_VAR 0 2
48641: NOT
48642: IFFALSE 48646
// exit ;
48644: GO 48691
// for i in units do
48646: LD_ADDR_VAR 0 4
48650: PUSH
48651: LD_VAR 0 2
48655: PUSH
48656: FOR_IN
48657: IFFALSE 48689
// if See ( side , i ) then
48659: LD_VAR 0 1
48663: PPUSH
48664: LD_VAR 0 4
48668: PPUSH
48669: CALL_OW 292
48673: IFFALSE 48687
// begin result := true ;
48675: LD_ADDR_VAR 0 3
48679: PUSH
48680: LD_INT 1
48682: ST_TO_ADDR
// exit ;
48683: POP
48684: POP
48685: GO 48691
// end ;
48687: GO 48656
48689: POP
48690: POP
// end ;
48691: LD_VAR 0 3
48695: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
48696: LD_INT 0
48698: PPUSH
48699: PPUSH
48700: PPUSH
48701: PPUSH
// if not unit or not points then
48702: LD_VAR 0 1
48706: NOT
48707: PUSH
48708: LD_VAR 0 2
48712: NOT
48713: OR
48714: IFFALSE 48718
// exit ;
48716: GO 48808
// dist := 99999 ;
48718: LD_ADDR_VAR 0 5
48722: PUSH
48723: LD_INT 99999
48725: ST_TO_ADDR
// for i in points do
48726: LD_ADDR_VAR 0 4
48730: PUSH
48731: LD_VAR 0 2
48735: PUSH
48736: FOR_IN
48737: IFFALSE 48806
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48739: LD_ADDR_VAR 0 6
48743: PUSH
48744: LD_VAR 0 1
48748: PPUSH
48749: LD_VAR 0 4
48753: PUSH
48754: LD_INT 1
48756: ARRAY
48757: PPUSH
48758: LD_VAR 0 4
48762: PUSH
48763: LD_INT 2
48765: ARRAY
48766: PPUSH
48767: CALL_OW 297
48771: ST_TO_ADDR
// if tmpDist < dist then
48772: LD_VAR 0 6
48776: PUSH
48777: LD_VAR 0 5
48781: LESS
48782: IFFALSE 48804
// begin result := i ;
48784: LD_ADDR_VAR 0 3
48788: PUSH
48789: LD_VAR 0 4
48793: ST_TO_ADDR
// dist := tmpDist ;
48794: LD_ADDR_VAR 0 5
48798: PUSH
48799: LD_VAR 0 6
48803: ST_TO_ADDR
// end ; end ;
48804: GO 48736
48806: POP
48807: POP
// end ;
48808: LD_VAR 0 3
48812: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
48813: LD_INT 0
48815: PPUSH
// uc_side := side ;
48816: LD_ADDR_OWVAR 20
48820: PUSH
48821: LD_VAR 0 1
48825: ST_TO_ADDR
// uc_nation := 3 ;
48826: LD_ADDR_OWVAR 21
48830: PUSH
48831: LD_INT 3
48833: ST_TO_ADDR
// vc_chassis := 25 ;
48834: LD_ADDR_OWVAR 37
48838: PUSH
48839: LD_INT 25
48841: ST_TO_ADDR
// vc_engine := engine_siberite ;
48842: LD_ADDR_OWVAR 39
48846: PUSH
48847: LD_INT 3
48849: ST_TO_ADDR
// vc_control := control_computer ;
48850: LD_ADDR_OWVAR 38
48854: PUSH
48855: LD_INT 3
48857: ST_TO_ADDR
// vc_weapon := 59 ;
48858: LD_ADDR_OWVAR 40
48862: PUSH
48863: LD_INT 59
48865: ST_TO_ADDR
// result := CreateVehicle ;
48866: LD_ADDR_VAR 0 5
48870: PUSH
48871: CALL_OW 45
48875: ST_TO_ADDR
// SetDir ( result , d ) ;
48876: LD_VAR 0 5
48880: PPUSH
48881: LD_VAR 0 4
48885: PPUSH
48886: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
48890: LD_VAR 0 5
48894: PPUSH
48895: LD_VAR 0 2
48899: PPUSH
48900: LD_VAR 0 3
48904: PPUSH
48905: LD_INT 0
48907: PPUSH
48908: CALL_OW 48
// end ;
48912: LD_VAR 0 5
48916: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
48917: LD_INT 0
48919: PPUSH
48920: PPUSH
48921: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
48922: LD_ADDR_VAR 0 2
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
48945: LD_VAR 0 1
48949: NOT
48950: PUSH
48951: LD_VAR 0 1
48955: PPUSH
48956: CALL_OW 264
48960: PUSH
48961: LD_INT 12
48963: PUSH
48964: LD_INT 51
48966: PUSH
48967: LD_INT 32
48969: PUSH
48970: LD_EXP 40
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: IN
48981: NOT
48982: OR
48983: IFFALSE 48987
// exit ;
48985: GO 49085
// for i := 1 to 3 do
48987: LD_ADDR_VAR 0 3
48991: PUSH
48992: DOUBLE
48993: LD_INT 1
48995: DEC
48996: ST_TO_ADDR
48997: LD_INT 3
48999: PUSH
49000: FOR_TO
49001: IFFALSE 49083
// begin tmp := GetCargo ( cargo , i ) ;
49003: LD_ADDR_VAR 0 4
49007: PUSH
49008: LD_VAR 0 1
49012: PPUSH
49013: LD_VAR 0 3
49017: PPUSH
49018: CALL_OW 289
49022: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
49023: LD_ADDR_VAR 0 2
49027: PUSH
49028: LD_VAR 0 2
49032: PPUSH
49033: LD_VAR 0 3
49037: PPUSH
49038: LD_VAR 0 4
49042: PPUSH
49043: CALL_OW 1
49047: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
49048: LD_ADDR_VAR 0 2
49052: PUSH
49053: LD_VAR 0 2
49057: PPUSH
49058: LD_INT 4
49060: PPUSH
49061: LD_VAR 0 2
49065: PUSH
49066: LD_INT 4
49068: ARRAY
49069: PUSH
49070: LD_VAR 0 4
49074: PLUS
49075: PPUSH
49076: CALL_OW 1
49080: ST_TO_ADDR
// end ;
49081: GO 49000
49083: POP
49084: POP
// end ;
49085: LD_VAR 0 2
49089: RET
// export function Length ( array ) ; begin
49090: LD_INT 0
49092: PPUSH
// result := array + 0 ;
49093: LD_ADDR_VAR 0 2
49097: PUSH
49098: LD_VAR 0 1
49102: PUSH
49103: LD_INT 0
49105: PLUS
49106: ST_TO_ADDR
// end ;
49107: LD_VAR 0 2
49111: RET
// export function PrepareArray ( array ) ; begin
49112: LD_INT 0
49114: PPUSH
// result := array diff 0 ;
49115: LD_ADDR_VAR 0 2
49119: PUSH
49120: LD_VAR 0 1
49124: PUSH
49125: LD_INT 0
49127: DIFF
49128: ST_TO_ADDR
// if not result [ 1 ] then
49129: LD_VAR 0 2
49133: PUSH
49134: LD_INT 1
49136: ARRAY
49137: NOT
49138: IFFALSE 49158
// result := Delete ( result , 1 ) ;
49140: LD_ADDR_VAR 0 2
49144: PUSH
49145: LD_VAR 0 2
49149: PPUSH
49150: LD_INT 1
49152: PPUSH
49153: CALL_OW 3
49157: ST_TO_ADDR
// end ; end_of_file
49158: LD_VAR 0 2
49162: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
49163: LD_INT 0
49165: PPUSH
// ar_miner := 81 ;
49166: LD_ADDR_EXP 46
49170: PUSH
49171: LD_INT 81
49173: ST_TO_ADDR
// ar_crane := 88 ;
49174: LD_ADDR_EXP 45
49178: PUSH
49179: LD_INT 88
49181: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
49182: LD_ADDR_EXP 40
49186: PUSH
49187: LD_INT 89
49189: ST_TO_ADDR
// us_hack := 99 ;
49190: LD_ADDR_EXP 41
49194: PUSH
49195: LD_INT 99
49197: ST_TO_ADDR
// us_artillery := 97 ;
49198: LD_ADDR_EXP 42
49202: PUSH
49203: LD_INT 97
49205: ST_TO_ADDR
// ar_bio_bomb := 91 ;
49206: LD_ADDR_EXP 43
49210: PUSH
49211: LD_INT 91
49213: ST_TO_ADDR
// ar_mortar := 92 ;
49214: LD_ADDR_EXP 44
49218: PUSH
49219: LD_INT 92
49221: ST_TO_ADDR
// ru_flamethrower := 93 ;
49222: LD_ADDR_EXP 47
49226: PUSH
49227: LD_INT 93
49229: ST_TO_ADDR
// ru_radar := 98 ;
49230: LD_ADDR_EXP 39
49234: PUSH
49235: LD_INT 98
49237: ST_TO_ADDR
// tech_Artillery := 80 ;
49238: LD_ADDR_EXP 48
49242: PUSH
49243: LD_INT 80
49245: ST_TO_ADDR
// tech_RadMat := 81 ;
49246: LD_ADDR_EXP 49
49250: PUSH
49251: LD_INT 81
49253: ST_TO_ADDR
// tech_BasicTools := 82 ;
49254: LD_ADDR_EXP 50
49258: PUSH
49259: LD_INT 82
49261: ST_TO_ADDR
// tech_Cargo := 83 ;
49262: LD_ADDR_EXP 51
49266: PUSH
49267: LD_INT 83
49269: ST_TO_ADDR
// tech_Track := 84 ;
49270: LD_ADDR_EXP 52
49274: PUSH
49275: LD_INT 84
49277: ST_TO_ADDR
// tech_Crane := 85 ;
49278: LD_ADDR_EXP 53
49282: PUSH
49283: LD_INT 85
49285: ST_TO_ADDR
// tech_Bulldozer := 86 ;
49286: LD_ADDR_EXP 54
49290: PUSH
49291: LD_INT 86
49293: ST_TO_ADDR
// tech_Hovercraft := 87 ;
49294: LD_ADDR_EXP 55
49298: PUSH
49299: LD_INT 87
49301: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
49302: LD_ADDR_EXP 56
49306: PUSH
49307: LD_INT 88
49309: ST_TO_ADDR
// end ;
49310: LD_VAR 0 1
49314: RET
// every 1 do
49315: GO 49317
49317: DISABLE
// InitGlobalVariables ;
49318: CALL 49163 0 0
49322: END
