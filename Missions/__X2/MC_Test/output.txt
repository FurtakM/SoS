// starting begin ResetFog ;
   0: CALL_OW 335
// MC_Init ( ) ;
   4: CALL 438 0 0
// PrepareTestBase ;
   8: CALL 132 0 0
// mc_debug := true ;
  12: LD_ADDR_EXP 5
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// MC_Start ( ) ;
  20: CALL 462 0 0
// end ;
  24: END
// export function MC_CustomMacro ( ) ; begin
  25: LD_INT 0
  27: PPUSH
// MC_Add ( 1 , FilterAllUnits ( [ f_side , 1 ] ) ) ;
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 22
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: EMPTY
  38: LIST
  39: LIST
  40: PPUSH
  41: CALL_OW 69
  45: PPUSH
  46: CALL 517 0 2
// MC_SetParkingArea ( 1 , parkingArea1 ) ;
  50: LD_INT 1
  52: PPUSH
  53: LD_INT 4
  55: PPUSH
  56: CALL 2337 0 2
// MC_SetCratesArea ( 1 , cratesArea1 ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 2
  65: PPUSH
  66: CALL 1914 0 2
// MC_SetScanArea ( 1 , baseArea1 ) ;
  70: LD_INT 1
  72: PPUSH
  73: LD_INT 1
  75: PPUSH
  76: CALL 2386 0 2
// MC_SetBuildingList ( 1 , [ [ b_barracks , 37 , 33 , 5 ] , [ b_lab , 12 , 17 , 1 ] ] ) ;
  80: LD_INT 1
  82: PPUSH
  83: LD_INT 5
  85: PUSH
  86: LD_INT 37
  88: PUSH
  89: LD_INT 33
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_INT 6
 103: PUSH
 104: LD_INT 12
 106: PUSH
 107: LD_INT 17
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: LIST
 117: LIST
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: PPUSH
 123: CALL 1014 0 2
// end ;
 127: LD_VAR 0 1
 131: RET
// export function PrepareTestBase ; var i , un ; begin
 132: LD_INT 0
 134: PPUSH
 135: PPUSH
 136: PPUSH
// InitHc_All ;
 137: CALL_OW 584
// uc_side := 1 ;
 141: LD_ADDR_OWVAR 20
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// uc_nation := 1 ;
 149: LD_ADDR_OWVAR 21
 153: PUSH
 154: LD_INT 1
 156: ST_TO_ADDR
// for i := 1 to 12 do
 157: LD_ADDR_VAR 0 2
 161: PUSH
 162: DOUBLE
 163: LD_INT 1
 165: DEC
 166: ST_TO_ADDR
 167: LD_INT 12
 169: PUSH
 170: FOR_TO
 171: IFFALSE 238
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
 173: LD_INT 0
 175: PPUSH
 176: LD_VAR 0 2
 180: PUSH
 181: LD_INT 4
 183: MOD
 184: PUSH
 185: LD_INT 1
 187: PLUS
 188: PPUSH
 189: LD_INT 3
 191: PPUSH
 192: CALL_OW 380
// un := CreateHuman ;
 196: LD_ADDR_VAR 0 3
 200: PUSH
 201: CALL_OW 44
 205: ST_TO_ADDR
// PlaceUnitXYR ( un , 21 , 16 , 8 , false ) ;
 206: LD_VAR 0 3
 210: PPUSH
 211: LD_INT 21
 213: PPUSH
 214: LD_INT 16
 216: PPUSH
 217: LD_INT 8
 219: PPUSH
 220: LD_INT 0
 222: PPUSH
 223: CALL_OW 50
// ComHold ( un ) ;
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL_OW 140
// end ;
 236: GO 170
 238: POP
 239: POP
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$50 trigger mc_debug do
 245: LD_EXP 5
 249: IFFALSE 276
 251: GO 253
 253: DISABLE
// begin enable ;
 254: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea1 , true ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 5
 260: PPUSH
 261: CALL_OW 12
 265: PPUSH
 266: LD_INT 2
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: CALL_OW 55
// end ;
 276: END
// every 0 0$1 trigger mc_debug do
 277: LD_EXP 5
 281: IFFALSE 307
 283: GO 285
 285: DISABLE
// begin enable ;
 286: ENABLE
// display_strings := FilterAllUnits ( [ f_tag , 3 ] ) ;
 287: LD_ADDR_OWVAR 47
 291: PUSH
 292: LD_INT 120
 294: PUSH
 295: LD_INT 3
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: ST_TO_ADDR
// end ; end_of_file
 307: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ;
 308: LD_VAR 0 1
 312: PPUSH
 313: LD_VAR 0 2
 317: PPUSH
 318: LD_VAR 0 3
 322: PPUSH
 323: LD_VAR 0 4
 327: PPUSH
 328: LD_VAR 0 5
 332: PPUSH
 333: LD_VAR 0 6
 337: PPUSH
 338: LD_VAR 0 7
 342: PPUSH
 343: CALL 4765 0 7
// end ;
 347: PPOPN 7
 349: END
// on ClassChanged ( unit , old_class , new_class ) do begin MCE_ClassChanged ( unit , old_class , new_class ) ;
 350: LD_VAR 0 1
 354: PPUSH
 355: LD_VAR 0 2
 359: PPUSH
 360: LD_VAR 0 3
 364: PPUSH
 365: CALL 4818 0 3
// end ;
 369: PPOPN 3
 371: END
// on UnitDestroyed ( unit ) do begin MCE_UnitDestroyed ( unit ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL 4840 0 1
// end ;
 381: PPOPN 1
 383: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ;
 384: LD_VAR 0 1
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_VAR 0 3
 398: PPUSH
 399: LD_VAR 0 4
 403: PPUSH
 404: CALL 4985 0 4
// end ;
 408: PPOPN 4
 410: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL 5058 0 1
// end ;
 420: PPOPN 1
 422: END
// on UpgradeComplete ( building ) do begin MCE_BuildingUpgradeComplete ( building ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL 5777 0 1
// end ;
 432: PPOPN 1
 434: END
// on CommandUnitXY ( comand , unit , x , y , z ) do begin end ; end_of_file
 435: PPOPN 5
 437: END
// export function MC_Init ( ) ; begin
 438: LD_INT 0
 440: PPUSH
// MC_InitVariables ( ) ;
 441: CALL 6038 0 0
// MCE_InitEvents ( ) ;
 445: CALL 4741 0 0
// MCT_InitTags ( ) ;
 449: CALL 6214 0 0
// MCTM_InitTaskManager ( ) end ;
 453: CALL 7801 0 0
 457: LD_VAR 0 1
 461: RET
// export function MC_Start ( ) ; begin
 462: LD_INT 0
 464: PPUSH
// mc_active := true ;
 465: LD_ADDR_EXP 4
 469: PUSH
 470: LD_INT 1
 472: ST_TO_ADDR
// MC_CustomMacro ( ) ;
 473: CALL 25 0 0
// MCE_SailEventCustom ( mce_start , 0 , 0 , 0 , 0 , 0 , 0 ) ;
 477: LD_EXP 1
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: LD_INT 0
 487: PPUSH
 488: LD_INT 0
 490: PPUSH
 491: LD_INT 0
 493: PPUSH
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 0
 499: PPUSH
 500: CALL 4765 0 7
// end ;
 504: LD_VAR 0 1
 508: RET
// export function MC_Kill ( base ) ; begin
 509: LD_INT 0
 511: PPUSH
// end ;
 512: LD_VAR 0 2
 516: RET
// export function MC_Add ( side , units ) ; begin
 517: LD_INT 0
 519: PPUSH
// mc_bases := Replace ( mc_bases , mc_bases + 1 , side ) ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: LD_EXP 6
 529: PPUSH
 530: LD_EXP 6
 534: PUSH
 535: LD_INT 1
 537: PLUS
 538: PPUSH
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 1
 548: ST_TO_ADDR
// mc_task := Replace ( mc_task , mc_task + 1 , [ ] ) ;
 549: LD_ADDR_EXP 8
 553: PUSH
 554: LD_EXP 8
 558: PPUSH
 559: LD_EXP 8
 563: PUSH
 564: LD_INT 1
 566: PLUS
 567: PPUSH
 568: EMPTY
 569: PPUSH
 570: CALL_OW 1
 574: ST_TO_ADDR
// mc_people := Replace ( mc_people , mc_people + 1 , UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
 575: LD_ADDR_EXP 9
 579: PUSH
 580: LD_EXP 9
 584: PPUSH
 585: LD_EXP 9
 589: PUSH
 590: LD_INT 1
 592: PLUS
 593: PPUSH
 594: LD_VAR 0 2
 598: PPUSH
 599: LD_INT 21
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 3
 611: PUSH
 612: LD_INT 23
 614: PUSH
 615: LD_INT 0
 617: PUSH
 618: EMPTY
 619: LIST
 620: LIST
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PPUSH
 630: CALL_OW 72
 634: PPUSH
 635: CALL_OW 1
 639: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , mc_ape + 1 , UnitFilter ( units , [ f_nation , 0 ] ) ) ;
 640: LD_ADDR_EXP 19
 644: PUSH
 645: LD_EXP 19
 649: PPUSH
 650: LD_EXP 19
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: PPUSH
 659: LD_VAR 0 2
 663: PPUSH
 664: LD_INT 23
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PPUSH
 674: CALL_OW 72
 678: PPUSH
 679: CALL_OW 1
 683: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , mc_vehicles + 1 , UnitFilter ( units , [ f_type , unit_vehicle ] ) ) ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_EXP 11
 693: PPUSH
 694: LD_EXP 11
 698: PUSH
 699: LD_INT 1
 701: PLUS
 702: PPUSH
 703: LD_VAR 0 2
 707: PPUSH
 708: LD_INT 21
 710: PUSH
 711: LD_INT 2
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: PPUSH
 718: CALL_OW 72
 722: PPUSH
 723: CALL_OW 1
 727: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , mc_buildings + 1 , UnitFilter ( units , [ f_type , unit_building ] ) ) ;
 728: LD_ADDR_EXP 10
 732: PUSH
 733: LD_EXP 10
 737: PPUSH
 738: LD_EXP 10
 742: PUSH
 743: LD_INT 1
 745: PLUS
 746: PPUSH
 747: LD_VAR 0 2
 751: PPUSH
 752: LD_INT 21
 754: PUSH
 755: LD_INT 3
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PPUSH
 762: CALL_OW 72
 766: PPUSH
 767: CALL_OW 1
 771: ST_TO_ADDR
// mc_defense_status := Replace ( mc_defense_status , mc_defense_status + 1 , false ) ;
 772: LD_ADDR_EXP 16
 776: PUSH
 777: LD_EXP 16
 781: PPUSH
 782: LD_EXP 16
 786: PUSH
 787: LD_INT 1
 789: PLUS
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 1
 798: ST_TO_ADDR
// end ;
 799: LD_VAR 0 3
 803: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
 808: PPUSH
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not mc_bases [ base ] then
 812: LD_EXP 6
 816: PUSH
 817: LD_VAR 0 1
 821: ARRAY
 822: NOT
 823: IFFALSE 827
// exit ;
 825: GO 1009
// tmp := [ ] ;
 827: LD_ADDR_VAR 0 6
 831: PUSH
 832: EMPTY
 833: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
 834: LD_ADDR_VAR 0 7
 838: PUSH
 839: LD_VAR 0 3
 843: PPUSH
 844: LD_INT 0
 846: PPUSH
 847: CALL_OW 517
 851: ST_TO_ADDR
// if not list then
 852: LD_VAR 0 7
 856: NOT
 857: IFFALSE 861
// exit ;
 859: GO 1009
// for i = 1 to amount do
 861: LD_ADDR_VAR 0 5
 865: PUSH
 866: DOUBLE
 867: LD_INT 1
 869: DEC
 870: ST_TO_ADDR
 871: LD_VAR 0 2
 875: PUSH
 876: FOR_TO
 877: IFFALSE 957
// begin x := rand ( 1 , list [ 1 ] ) ;
 879: LD_ADDR_VAR 0 8
 883: PUSH
 884: LD_INT 1
 886: PPUSH
 887: LD_VAR 0 7
 891: PUSH
 892: LD_INT 1
 894: ARRAY
 895: PPUSH
 896: CALL_OW 12
 900: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
 901: LD_ADDR_VAR 0 6
 905: PUSH
 906: LD_VAR 0 6
 910: PPUSH
 911: LD_VAR 0 5
 915: PPUSH
 916: LD_VAR 0 7
 920: PUSH
 921: LD_INT 1
 923: ARRAY
 924: PUSH
 925: LD_VAR 0 8
 929: ARRAY
 930: PUSH
 931: LD_VAR 0 7
 935: PUSH
 936: LD_INT 2
 938: ARRAY
 939: PUSH
 940: LD_VAR 0 8
 944: ARRAY
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL_OW 1
 954: ST_TO_ADDR
// end ;
 955: GO 876
 957: POP
 958: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
 959: LD_ADDR_EXP 12
 963: PUSH
 964: LD_EXP 12
 968: PPUSH
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_VAR 0 6
 978: PPUSH
 979: CALL_OW 1
 983: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
 984: LD_ADDR_EXP 13
 988: PUSH
 989: LD_EXP 13
 993: PPUSH
 994: LD_VAR 0 1
 998: PPUSH
 999: LD_VAR 0 3
1003: PPUSH
1004: CALL_OW 1
1008: ST_TO_ADDR
// end ;
1009: LD_VAR 0 4
1013: RET
// export function MC_SetBuildingList ( base , construct_list ) ; var i , btype ; begin
1014: LD_INT 0
1016: PPUSH
1017: PPUSH
1018: PPUSH
// if not construct_list then
1019: LD_VAR 0 2
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1254
// for i := 1 to construct_list do
1028: LD_ADDR_VAR 0 4
1032: PUSH
1033: DOUBLE
1034: LD_INT 1
1036: DEC
1037: ST_TO_ADDR
1038: LD_VAR 0 2
1042: PUSH
1043: FOR_TO
1044: IFFALSE 1227
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1046: LD_VAR 0 2
1050: PUSH
1051: LD_VAR 0 4
1055: ARRAY
1056: PUSH
1057: LD_INT 1
1059: ARRAY
1060: PUSH
1061: LD_INT 3
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: IN
1071: IFFALSE 1225
// begin case construct_list [ i ] [ 1 ] of b_factory :
1073: LD_VAR 0 2
1077: PUSH
1078: LD_VAR 0 4
1082: ARRAY
1083: PUSH
1084: LD_INT 1
1086: ARRAY
1087: PUSH
1088: LD_INT 3
1090: DOUBLE
1091: EQUAL
1092: IFTRUE 1096
1094: GO 1107
1096: POP
// btype := b_workshop ; b_barracks :
1097: LD_ADDR_VAR 0 5
1101: PUSH
1102: LD_INT 2
1104: ST_TO_ADDR
1105: GO 1127
1107: LD_INT 5
1109: DOUBLE
1110: EQUAL
1111: IFTRUE 1115
1113: GO 1126
1115: POP
// btype := b_armoury ; end ;
1116: LD_ADDR_VAR 0 5
1120: PUSH
1121: LD_INT 4
1123: ST_TO_ADDR
1124: GO 1127
1126: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1127: LD_ADDR_VAR 0 2
1131: PUSH
1132: LD_VAR 0 2
1136: PPUSH
1137: LD_VAR 0 4
1141: PPUSH
1142: LD_VAR 0 2
1146: PUSH
1147: LD_VAR 0 4
1151: ARRAY
1152: PPUSH
1153: LD_INT 5
1155: PPUSH
1156: LD_VAR 0 2
1160: PUSH
1161: LD_VAR 0 4
1165: ARRAY
1166: PUSH
1167: LD_INT 1
1169: ARRAY
1170: PPUSH
1171: CALL_OW 1
1175: PPUSH
1176: CALL_OW 1
1180: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1181: LD_ADDR_VAR 0 2
1185: PUSH
1186: LD_VAR 0 2
1190: PPUSH
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_VAR 0 2
1200: PUSH
1201: LD_VAR 0 4
1205: ARRAY
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_VAR 0 5
1214: PPUSH
1215: CALL_OW 1
1219: PPUSH
1220: CALL_OW 1
1224: ST_TO_ADDR
// end ;
1225: GO 1043
1227: POP
1228: POP
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
1229: LD_ADDR_EXP 14
1233: PUSH
1234: LD_EXP 14
1238: PPUSH
1239: LD_VAR 0 1
1243: PPUSH
1244: LD_VAR 0 2
1248: PPUSH
1249: CALL_OW 1
1253: ST_TO_ADDR
// end ;
1254: LD_VAR 0 3
1258: RET
// export function MC_InsertBuildingList ( base , construct_list ) ; var i , btype ; begin
1259: LD_INT 0
1261: PPUSH
1262: PPUSH
1263: PPUSH
// if not construct_list then
1264: LD_VAR 0 2
1268: NOT
1269: IFFALSE 1273
// exit ;
1271: GO 1511
// for i := 1 to construct_list do
1273: LD_ADDR_VAR 0 4
1277: PUSH
1278: DOUBLE
1279: LD_INT 1
1281: DEC
1282: ST_TO_ADDR
1283: LD_VAR 0 2
1287: PUSH
1288: FOR_TO
1289: IFFALSE 1472
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1291: LD_VAR 0 2
1295: PUSH
1296: LD_VAR 0 4
1300: ARRAY
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 5
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: IN
1316: IFFALSE 1470
// begin case construct_list [ i ] [ 1 ] of b_factory :
1318: LD_VAR 0 2
1322: PUSH
1323: LD_VAR 0 4
1327: ARRAY
1328: PUSH
1329: LD_INT 1
1331: ARRAY
1332: PUSH
1333: LD_INT 3
1335: DOUBLE
1336: EQUAL
1337: IFTRUE 1341
1339: GO 1352
1341: POP
// btype := b_workshop ; b_barracks :
1342: LD_ADDR_VAR 0 5
1346: PUSH
1347: LD_INT 2
1349: ST_TO_ADDR
1350: GO 1372
1352: LD_INT 5
1354: DOUBLE
1355: EQUAL
1356: IFTRUE 1360
1358: GO 1371
1360: POP
// btype := b_armoury ; end ;
1361: LD_ADDR_VAR 0 5
1365: PUSH
1366: LD_INT 4
1368: ST_TO_ADDR
1369: GO 1372
1371: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1372: LD_ADDR_VAR 0 2
1376: PUSH
1377: LD_VAR 0 2
1381: PPUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: LD_VAR 0 2
1391: PUSH
1392: LD_VAR 0 4
1396: ARRAY
1397: PPUSH
1398: LD_INT 5
1400: PPUSH
1401: LD_VAR 0 2
1405: PUSH
1406: LD_VAR 0 4
1410: ARRAY
1411: PUSH
1412: LD_INT 1
1414: ARRAY
1415: PPUSH
1416: CALL_OW 1
1420: PPUSH
1421: CALL_OW 1
1425: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: LD_VAR 0 2
1435: PPUSH
1436: LD_VAR 0 4
1440: PPUSH
1441: LD_VAR 0 2
1445: PUSH
1446: LD_VAR 0 4
1450: ARRAY
1451: PPUSH
1452: LD_INT 1
1454: PPUSH
1455: LD_VAR 0 5
1459: PPUSH
1460: CALL_OW 1
1464: PPUSH
1465: CALL_OW 1
1469: ST_TO_ADDR
// end ;
1470: GO 1288
1472: POP
1473: POP
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union construct_list ) ;
1474: LD_ADDR_EXP 14
1478: PUSH
1479: LD_EXP 14
1483: PPUSH
1484: LD_VAR 0 1
1488: PPUSH
1489: LD_EXP 14
1493: PUSH
1494: LD_VAR 0 1
1498: ARRAY
1499: PUSH
1500: LD_VAR 0 2
1504: UNION
1505: PPUSH
1506: CALL_OW 1
1510: ST_TO_ADDR
// end ;
1511: LD_VAR 0 3
1515: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
1516: LD_INT 0
1518: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , produce_list ) ;
1519: LD_ADDR_EXP 15
1523: PUSH
1524: LD_EXP 15
1528: PPUSH
1529: LD_VAR 0 1
1533: PPUSH
1534: LD_VAR 0 2
1538: PPUSH
1539: CALL_OW 1
1543: ST_TO_ADDR
// end ;
1544: LD_VAR 0 3
1548: RET
// export function MC_InsertProduceList ( base , components ) ; begin
1549: LD_INT 0
1551: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , mc_produce_list [ base ] ^ components ) ;
1552: LD_ADDR_EXP 15
1556: PUSH
1557: LD_EXP 15
1561: PPUSH
1562: LD_VAR 0 1
1566: PPUSH
1567: LD_EXP 15
1571: PUSH
1572: LD_VAR 0 1
1576: ARRAY
1577: PUSH
1578: LD_VAR 0 2
1582: ADD
1583: PPUSH
1584: CALL_OW 1
1588: ST_TO_ADDR
// end ;
1589: LD_VAR 0 3
1593: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
1594: LD_INT 0
1596: PPUSH
// mc_defender := Replace ( mc_defender , base , deflist ) ;
1597: LD_ADDR_EXP 17
1601: PUSH
1602: LD_EXP 17
1606: PPUSH
1607: LD_VAR 0 1
1611: PPUSH
1612: LD_VAR 0 2
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
1622: LD_ADDR_EXP 18
1626: PUSH
1627: LD_EXP 18
1631: PPUSH
1632: LD_VAR 0 1
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 0
1644: PLUS
1645: PPUSH
1646: CALL_OW 1
1650: ST_TO_ADDR
// end ;
1651: LD_VAR 0 3
1655: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
1656: LD_INT 0
1658: PPUSH
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
1659: LD_ADDR_EXP 18
1663: PUSH
1664: LD_EXP 18
1668: PPUSH
1669: LD_VAR 0 1
1673: PPUSH
1674: LD_VAR 0 2
1678: PPUSH
1679: CALL_OW 1
1683: ST_TO_ADDR
// end ;
1684: LD_VAR 0 3
1688: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; begin
1689: LD_INT 0
1691: PPUSH
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
1692: LD_ADDR_EXP 21
1696: PUSH
1697: LD_EXP 21
1701: PPUSH
1702: LD_VAR 0 1
1706: PUSH
1707: LD_EXP 21
1711: PUSH
1712: LD_VAR 0 1
1716: ARRAY
1717: PUSH
1718: LD_INT 1
1720: PLUS
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PPUSH
1726: LD_VAR 0 1
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_VAR 0 3
1740: PUSH
1741: LD_VAR 0 4
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: PPUSH
1752: CALL 12950 0 3
1756: ST_TO_ADDR
// end ;
1757: LD_VAR 0 5
1761: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
1762: LD_INT 0
1764: PPUSH
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
1765: LD_ADDR_EXP 22
1769: PUSH
1770: LD_EXP 22
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: LD_VAR 0 2
1784: PPUSH
1785: CALL_OW 1
1789: ST_TO_ADDR
// end ;
1790: LD_VAR 0 3
1794: RET
// export function MC_SetTame ( base , area ) ; begin
1795: LD_INT 0
1797: PPUSH
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
1798: LD_ADDR_EXP 23
1802: PUSH
1803: LD_EXP 23
1807: PPUSH
1808: LD_VAR 0 1
1812: PPUSH
1813: LD_VAR 0 2
1817: PPUSH
1818: CALL_OW 1
1822: ST_TO_ADDR
// end ;
1823: LD_VAR 0 3
1827: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
1828: LD_INT 0
1830: PPUSH
1831: PPUSH
// if not base or not kinds then
1832: LD_VAR 0 1
1836: NOT
1837: PUSH
1838: LD_VAR 0 2
1842: NOT
1843: OR
1844: IFFALSE 1848
// exit ;
1846: GO 1909
// for i in kinds do
1848: LD_ADDR_VAR 0 4
1852: PUSH
1853: LD_VAR 0 2
1857: PUSH
1858: FOR_IN
1859: IFFALSE 1907
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
1861: LD_ADDR_EXP 24
1865: PUSH
1866: LD_EXP 24
1870: PPUSH
1871: LD_VAR 0 1
1875: PUSH
1876: LD_EXP 24
1880: PUSH
1881: LD_VAR 0 1
1885: ARRAY
1886: PUSH
1887: LD_INT 1
1889: PLUS
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 12950 0 3
1904: ST_TO_ADDR
1905: GO 1858
1907: POP
1908: POP
// end ;
1909: LD_VAR 0 3
1913: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
1914: LD_INT 0
1916: PPUSH
// if not mc_bases or not base or not areas then
1917: LD_EXP 6
1921: NOT
1922: PUSH
1923: LD_VAR 0 1
1927: NOT
1928: OR
1929: PUSH
1930: LD_VAR 0 2
1934: NOT
1935: OR
1936: IFFALSE 1940
// exit ;
1938: GO 1965
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
1940: LD_ADDR_EXP 25
1944: PUSH
1945: LD_EXP 25
1949: PPUSH
1950: LD_VAR 0 1
1954: PPUSH
1955: LD_VAR 0 2
1959: PPUSH
1960: CALL_OW 1
1964: ST_TO_ADDR
// end ;
1965: LD_VAR 0 3
1969: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
1970: LD_INT 0
1972: PPUSH
// if not mc_bases or not base or not teleports_exit then
1973: LD_EXP 6
1977: NOT
1978: PUSH
1979: LD_VAR 0 1
1983: NOT
1984: OR
1985: PUSH
1986: LD_VAR 0 2
1990: NOT
1991: OR
1992: IFFALSE 1996
// exit ;
1994: GO 2021
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
1996: LD_ADDR_EXP 26
2000: PUSH
2001: LD_EXP 26
2005: PPUSH
2006: LD_VAR 0 1
2010: PPUSH
2011: LD_VAR 0 2
2015: PPUSH
2016: CALL_OW 1
2020: ST_TO_ADDR
// end ;
2021: LD_VAR 0 3
2025: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// if not base or not ext_list then
2031: LD_VAR 0 1
2035: NOT
2036: PUSH
2037: LD_VAR 0 5
2041: NOT
2042: OR
2043: IFFALSE 2047
// exit ;
2045: GO 2220
// tmp := GetFacExtXYD ( x , y , d ) ;
2047: LD_ADDR_VAR 0 8
2051: PUSH
2052: LD_VAR 0 2
2056: PPUSH
2057: LD_VAR 0 3
2061: PPUSH
2062: LD_VAR 0 4
2066: PPUSH
2067: CALL 42284 0 3
2071: ST_TO_ADDR
// if not tmp then
2072: LD_VAR 0 8
2076: NOT
2077: IFFALSE 2081
// exit ;
2079: GO 2220
// for i in tmp do
2081: LD_ADDR_VAR 0 7
2085: PUSH
2086: LD_VAR 0 8
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2218
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
2094: LD_ADDR_EXP 14
2098: PUSH
2099: LD_EXP 14
2103: PPUSH
2104: LD_VAR 0 1
2108: PPUSH
2109: LD_EXP 14
2113: PUSH
2114: LD_VAR 0 1
2118: ARRAY
2119: PPUSH
2120: LD_EXP 14
2124: PUSH
2125: LD_VAR 0 1
2129: ARRAY
2130: PUSH
2131: LD_INT 1
2133: PLUS
2134: PPUSH
2135: LD_VAR 0 5
2139: PUSH
2140: LD_INT 1
2142: ARRAY
2143: PUSH
2144: LD_VAR 0 7
2148: PUSH
2149: LD_INT 1
2151: ARRAY
2152: PUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 3
2169: ARRAY
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: PPUSH
2177: CALL_OW 2
2181: PPUSH
2182: CALL_OW 1
2186: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
2187: LD_ADDR_VAR 0 5
2191: PUSH
2192: LD_VAR 0 5
2196: PPUSH
2197: LD_INT 1
2199: PPUSH
2200: CALL_OW 3
2204: ST_TO_ADDR
// if not ext_list then
2205: LD_VAR 0 5
2209: NOT
2210: IFFALSE 2216
// exit ;
2212: POP
2213: POP
2214: GO 2220
// end ;
2216: GO 2091
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 6
2224: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
2225: LD_INT 0
2227: PPUSH
// if not mc_bases or not base or not weapon_list then
2228: LD_EXP 6
2232: NOT
2233: PUSH
2234: LD_VAR 0 1
2238: NOT
2239: OR
2240: PUSH
2241: LD_VAR 0 2
2245: NOT
2246: OR
2247: IFFALSE 2251
// exit ;
2249: GO 2276
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
2251: LD_ADDR_EXP 27
2255: PUSH
2256: LD_EXP 27
2260: PPUSH
2261: LD_VAR 0 1
2265: PPUSH
2266: LD_VAR 0 2
2270: PPUSH
2271: CALL_OW 1
2275: ST_TO_ADDR
// end ;
2276: LD_VAR 0 3
2280: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
2281: LD_INT 0
2283: PPUSH
// if not mc_bases or not base or not tech_list then
2284: LD_EXP 6
2288: NOT
2289: PUSH
2290: LD_VAR 0 1
2294: NOT
2295: OR
2296: PUSH
2297: LD_VAR 0 2
2301: NOT
2302: OR
2303: IFFALSE 2307
// exit ;
2305: GO 2332
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
2307: LD_ADDR_EXP 20
2311: PUSH
2312: LD_EXP 20
2316: PPUSH
2317: LD_VAR 0 1
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL_OW 1
2331: ST_TO_ADDR
// end ;
2332: LD_VAR 0 3
2336: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
2337: LD_INT 0
2339: PPUSH
// if not parking_area or not base then
2340: LD_VAR 0 2
2344: NOT
2345: PUSH
2346: LD_VAR 0 1
2350: NOT
2351: OR
2352: IFFALSE 2356
// exit ;
2354: GO 2381
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
2356: LD_ADDR_EXP 28
2360: PUSH
2361: LD_EXP 28
2365: PPUSH
2366: LD_VAR 0 1
2370: PPUSH
2371: LD_VAR 0 2
2375: PPUSH
2376: CALL_OW 1
2380: ST_TO_ADDR
// end ;
2381: LD_VAR 0 3
2385: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
2386: LD_INT 0
2388: PPUSH
// if not base or not scan_area then
2389: LD_VAR 0 1
2393: NOT
2394: PUSH
2395: LD_VAR 0 2
2399: NOT
2400: OR
2401: IFFALSE 2405
// exit ;
2403: GO 2430
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
2405: LD_ADDR_EXP 29
2409: PUSH
2410: LD_EXP 29
2414: PPUSH
2415: LD_VAR 0 1
2419: PPUSH
2420: LD_VAR 0 2
2424: PPUSH
2425: CALL_OW 1
2429: ST_TO_ADDR
// end ; end_of_file
2430: LD_VAR 0 3
2434: RET
// export function MC_Monitor ( ) ; var i , active_players ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
// while mc_active do
2440: LD_EXP 4
2444: IFFALSE 2554
// begin wait ( 0 0$1 ) ;
2446: LD_INT 35
2448: PPUSH
2449: CALL_OW 67
// active_players := 0 ;
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_INT 0
2460: ST_TO_ADDR
// for i := 1 to mc_bases do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_EXP 6
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2535
// begin if MC_Exist ( i ) then
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 6471 0 1
2488: IFFALSE 2533
// begin MCE_SailEventCustom ( mce_monitor_base , i , 0 , 0 , 0 , 0 , 0 ) ;
2490: LD_EXP 2
2494: PPUSH
2495: LD_VAR 0 2
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 0
2514: PPUSH
2515: CALL 4765 0 7
// active_players := active_players + 1 ;
2519: LD_ADDR_VAR 0 3
2523: PUSH
2524: LD_VAR 0 3
2528: PUSH
2529: LD_INT 1
2531: PLUS
2532: ST_TO_ADDR
// end ; end ;
2533: GO 2476
2535: POP
2536: POP
// if not active_players then
2537: LD_VAR 0 3
2541: NOT
2542: IFFALSE 2552
// mc_active := false ;
2544: LD_ADDR_EXP 4
2548: PUSH
2549: LD_INT 0
2551: ST_TO_ADDR
// end ;
2552: GO 2440
// end ;
2554: LD_VAR 0 1
2558: RET
// export function MC_MonitorBase ( base ) ; begin
2559: LD_INT 0
2561: PPUSH
// if not mc_people [ base ] then
2562: LD_EXP 9
2566: PUSH
2567: LD_VAR 0 1
2571: ARRAY
2572: NOT
2573: IFFALSE 2598
// mc_bases := Replace ( mc_bases , base , 0 ) ;
2575: LD_ADDR_EXP 6
2579: PUSH
2580: LD_EXP 6
2584: PPUSH
2585: LD_VAR 0 1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 1
2597: ST_TO_ADDR
// mc_danger := Replace ( mc_danger , base , DangerInArea ( mc_bases [ base ] , mc_scan_area [ base ] ) ) ;
2598: LD_ADDR_EXP 30
2602: PUSH
2603: LD_EXP 30
2607: PPUSH
2608: LD_VAR 0 1
2612: PPUSH
2613: LD_EXP 6
2617: PUSH
2618: LD_VAR 0 1
2622: ARRAY
2623: PPUSH
2624: LD_EXP 29
2628: PUSH
2629: LD_VAR 0 1
2633: ARRAY
2634: PPUSH
2635: CALL 15602 0 2
2639: PPUSH
2640: CALL_OW 1
2644: ST_TO_ADDR
// if mc_danger [ base ] then
2645: LD_EXP 30
2649: PUSH
2650: LD_VAR 0 1
2654: ARRAY
2655: IFFALSE 2668
// MC_Defend ( base ) else
2657: LD_VAR 0 1
2661: PPUSH
2662: CALL 2682 0 1
2666: GO 2677
// MC_TaskManager ( base ) ;
2668: LD_VAR 0 1
2672: PPUSH
2673: CALL 2744 0 1
// end ;
2677: LD_VAR 0 2
2681: RET
// export function MC_Defend ( base ) ; var defender_vehicles ; begin
2682: LD_INT 0
2684: PPUSH
2685: PPUSH
// if mc_defense_status [ base ] then
2686: LD_EXP 16
2690: PUSH
2691: LD_VAR 0 1
2695: ARRAY
2696: IFFALSE 2700
// exit ;
2698: GO 2739
// mc_defense_status := Replace ( mc_defense_status , base , true ) ;
2700: LD_ADDR_EXP 16
2704: PUSH
2705: LD_EXP 16
2709: PPUSH
2710: LD_VAR 0 1
2714: PPUSH
2715: LD_INT 1
2717: PPUSH
2718: CALL_OW 1
2722: ST_TO_ADDR
// defender_vehicles := mc_defender [ base ] ;
2723: LD_ADDR_VAR 0 3
2727: PUSH
2728: LD_EXP 17
2732: PUSH
2733: LD_VAR 0 1
2737: ARRAY
2738: ST_TO_ADDR
// end ;
2739: LD_VAR 0 2
2743: RET
// export function MC_TaskManager ( base ) ; var crates_list ; begin
2744: LD_INT 0
2746: PPUSH
2747: PPUSH
// MC_CollectCrates ( base , GetListOfCratesInArea ( mc_crates_area [ base ] ) ) ;
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_EXP 25
2757: PUSH
2758: LD_VAR 0 1
2762: ARRAY
2763: PPUSH
2764: CALL_OW 435
2768: PPUSH
2769: CALL 2787 0 2
// MC_Build ( base ) ;
2773: LD_VAR 0 1
2777: PPUSH
2778: CALL 4133 0 1
// end ;
2782: LD_VAR 0 2
2786: RET
// export function MC_CollectCrates ( base , crates ) ; var i , j , amount , cargo_bays , apes , engs , collectors , number_of_crates , driver , drivers , depot , mechanic_used ; begin
2787: LD_INT 0
2789: PPUSH
2790: PPUSH
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
2800: PPUSH
2801: PPUSH
// if MCTM_HasActiveTask ( base , mctm_collect_crates ) or not crates or not MC_GetDepot ( base ) then
2802: LD_VAR 0 1
2806: PPUSH
2807: LD_EXP 36
2811: PPUSH
2812: CALL 7825 0 2
2816: PUSH
2817: LD_VAR 0 2
2821: NOT
2822: OR
2823: PUSH
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 7446 0 1
2833: NOT
2834: OR
2835: IFFALSE 2839
// exit ;
2837: GO 4128
// MCTM_SetActiveTask ( base , mctm_collect_crates ) ;
2839: LD_VAR 0 1
2843: PPUSH
2844: LD_EXP 36
2848: PPUSH
2849: CALL 7855 0 2
// collectors := [ ] ;
2853: LD_ADDR_VAR 0 10
2857: PUSH
2858: EMPTY
2859: ST_TO_ADDR
// cargo_bays := GetCargoBay ( mc_vehicles [ base ] ) ;
2860: LD_ADDR_VAR 0 7
2864: PUSH
2865: LD_EXP 11
2869: PUSH
2870: LD_VAR 0 1
2874: ARRAY
2875: PPUSH
2876: CALL 45904 0 1
2880: ST_TO_ADDR
// if cargo_bays then
2881: LD_VAR 0 7
2885: IFFALSE 3566
// begin collectors := collectors union cargo_bays ;
2887: LD_ADDR_VAR 0 10
2891: PUSH
2892: LD_VAR 0 10
2896: PUSH
2897: LD_VAR 0 7
2901: UNION
2902: ST_TO_ADDR
// while crates and collectors do
2903: LD_VAR 0 2
2907: PUSH
2908: LD_VAR 0 10
2912: AND
2913: IFFALSE 3463
// begin wait ( 0 0$1 ) ;
2915: LD_INT 35
2917: PPUSH
2918: CALL_OW 67
// for i in collectors do
2922: LD_ADDR_VAR 0 4
2926: PUSH
2927: LD_VAR 0 10
2931: PUSH
2932: FOR_IN
2933: IFFALSE 3459
// begin driver := 0 ;
2935: LD_ADDR_VAR 0 12
2939: PUSH
2940: LD_INT 0
2942: ST_TO_ADDR
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
2943: LD_VAR 0 4
2947: PPUSH
2948: CALL_OW 263
2952: PUSH
2953: LD_INT 1
2955: EQUAL
2956: PUSH
2957: LD_VAR 0 4
2961: PPUSH
2962: CALL_OW 311
2966: NOT
2967: AND
2968: IFFALSE 3152
// begin driver := MC_GetOneByClass ( base , 3 , mct_none ) ;
2970: LD_ADDR_VAR 0 12
2974: PUSH
2975: LD_VAR 0 1
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: LD_EXP 31
2987: PPUSH
2988: CALL 7352 0 3
2992: ST_TO_ADDR
// if not driver then
2993: LD_VAR 0 12
2997: NOT
2998: IFFALSE 3067
// begin driver := MC_GetBestForClass ( base , 3 , 1 ) ;
3000: LD_ADDR_VAR 0 12
3004: PUSH
3005: LD_VAR 0 1
3009: PPUSH
3010: LD_INT 3
3012: PPUSH
3013: LD_INT 1
3015: PPUSH
3016: CALL 6511 0 3
3020: ST_TO_ADDR
// if driver then
3021: LD_VAR 0 12
3025: IFFALSE 3067
// begin driver := driver [ 1 ] ;
3027: LD_ADDR_VAR 0 12
3031: PUSH
3032: LD_VAR 0 12
3036: PUSH
3037: LD_INT 1
3039: ARRAY
3040: ST_TO_ADDR
// MC_ChangeClass ( base , 3 , driver ) ;
3041: LD_VAR 0 1
3045: PPUSH
3046: LD_INT 3
3048: PPUSH
3049: LD_VAR 0 12
3053: PPUSH
3054: CALL 6741 0 3
// AddComExitBuilding ( driver ) ;
3058: LD_VAR 0 12
3062: PPUSH
3063: CALL_OW 182
// end ; end ; if IsInUnit ( driver ) then
3067: LD_VAR 0 12
3071: PPUSH
3072: CALL_OW 310
3076: IFFALSE 3087
// ComExit ( driver ) ;
3078: LD_VAR 0 12
3082: PPUSH
3083: CALL 45033 0 1
// SetTag ( driver , mct_collect_crates ) ;
3087: LD_VAR 0 12
3091: PPUSH
3092: LD_EXP 34
3096: PPUSH
3097: CALL_OW 109
// if GetLives ( i ) < 1000 then
3101: LD_VAR 0 4
3105: PPUSH
3106: CALL_OW 256
3110: PUSH
3111: LD_INT 1000
3113: LESS
3114: IFFALSE 3130
// AddComRepairVehicle ( driver , i ) ;
3116: LD_VAR 0 12
3120: PPUSH
3121: LD_VAR 0 4
3125: PPUSH
3126: CALL_OW 189
// AddComEnterUnit ( driver , i ) ;
3130: LD_VAR 0 12
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: CALL_OW 180
// mechanic_used := true ;
3144: LD_ADDR_VAR 0 15
3148: PUSH
3149: LD_INT 1
3151: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) ;
3152: LD_INT 35
3154: PPUSH
3155: CALL_OW 67
// if IsDead ( i ) then
3159: LD_VAR 0 4
3163: PPUSH
3164: CALL_OW 301
3168: IFFALSE 3188
// begin collectors := collectors diff i ;
3170: LD_ADDR_VAR 0 10
3174: PUSH
3175: LD_VAR 0 10
3179: PUSH
3180: LD_VAR 0 4
3184: DIFF
3185: ST_TO_ADDR
// continue ;
3186: GO 3152
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 20 then
3188: LD_VAR 0 4
3192: PPUSH
3193: CALL_OW 262
3197: PUSH
3198: LD_INT 1
3200: EQUAL
3201: PUSH
3202: LD_VAR 0 4
3206: PPUSH
3207: CALL_OW 261
3211: PUSH
3212: LD_INT 20
3214: LESS
3215: AND
3216: IFFALSE 3277
// begin depot := NearestUnitToUnit ( MC_GetDepot ( base ) , i ) ;
3218: LD_ADDR_VAR 0 14
3222: PUSH
3223: LD_VAR 0 1
3227: PPUSH
3228: CALL 7446 0 1
3232: PPUSH
3233: LD_VAR 0 4
3237: PPUSH
3238: CALL_OW 74
3242: ST_TO_ADDR
// if GetDistUnits ( i , depot ) < 6 then
3243: LD_VAR 0 4
3247: PPUSH
3248: LD_VAR 0 14
3252: PPUSH
3253: CALL_OW 296
3257: PUSH
3258: LD_INT 6
3260: LESS
3261: IFFALSE 3277
// ComMoveUnit ( i , depot ) ;
3263: LD_VAR 0 4
3267: PPUSH
3268: LD_VAR 0 14
3272: PPUSH
3273: CALL_OW 112
// end ; if GetControl ( i ) = control_manual then
3277: LD_VAR 0 4
3281: PPUSH
3282: CALL_OW 263
3286: PUSH
3287: LD_INT 1
3289: EQUAL
3290: IFFALSE 3355
// begin if not driver then
3292: LD_VAR 0 12
3296: NOT
3297: IFFALSE 3314
// driver := IsDrivenBy ( i ) ;
3299: LD_ADDR_VAR 0 12
3303: PUSH
3304: LD_VAR 0 4
3308: PPUSH
3309: CALL_OW 311
3313: ST_TO_ADDR
// if not HasTask ( driver ) then
3314: LD_VAR 0 12
3318: PPUSH
3319: CALL_OW 314
3323: NOT
3324: IFFALSE 3353
// ComCollect ( driver , crates [ 1 ] , crates [ 2 ] ) ;
3326: LD_VAR 0 12
3330: PPUSH
3331: LD_VAR 0 2
3335: PUSH
3336: LD_INT 1
3338: ARRAY
3339: PPUSH
3340: LD_VAR 0 2
3344: PUSH
3345: LD_INT 2
3347: ARRAY
3348: PPUSH
3349: CALL_OW 117
// end else
3353: GO 3394
// if not HasTask ( i ) then
3355: LD_VAR 0 4
3359: PPUSH
3360: CALL_OW 314
3364: NOT
3365: IFFALSE 3394
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3367: LD_VAR 0 4
3371: PPUSH
3372: LD_VAR 0 2
3376: PUSH
3377: LD_INT 1
3379: ARRAY
3380: PPUSH
3381: LD_VAR 0 2
3385: PUSH
3386: LD_INT 2
3388: ARRAY
3389: PPUSH
3390: CALL_OW 117
// until not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3394: LD_VAR 0 2
3398: PUSH
3399: LD_INT 1
3401: ARRAY
3402: PPUSH
3403: LD_VAR 0 2
3407: PUSH
3408: LD_INT 2
3410: ARRAY
3411: PPUSH
3412: CALL_OW 284
3416: NOT
3417: IFFALSE 3152
// for j := 1 to 2 do
3419: LD_ADDR_VAR 0 5
3423: PUSH
3424: DOUBLE
3425: LD_INT 1
3427: DEC
3428: ST_TO_ADDR
3429: LD_INT 2
3431: PUSH
3432: FOR_TO
3433: IFFALSE 3455
// crates := Delete ( crates , 1 ) ;
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: LD_VAR 0 2
3444: PPUSH
3445: LD_INT 1
3447: PPUSH
3448: CALL_OW 3
3452: ST_TO_ADDR
3453: GO 3432
3455: POP
3456: POP
// end ;
3457: GO 2932
3459: POP
3460: POP
// end ;
3461: GO 2903
// if mechanic_used then
3463: LD_VAR 0 15
3467: IFFALSE 3564
// begin repeat wait ( 0 0$1 ) ;
3469: LD_INT 35
3471: PPUSH
3472: CALL_OW 67
// until not GetCargo ( collectors , mat_cans ) or not collectors ;
3476: LD_VAR 0 10
3480: PPUSH
3481: LD_INT 1
3483: PPUSH
3484: CALL_OW 289
3488: NOT
3489: PUSH
3490: LD_VAR 0 10
3494: NOT
3495: OR
3496: IFFALSE 3469
// drivers := MCT_ResetTag ( base , mct_collect_crates ) ;
3498: LD_ADDR_VAR 0 13
3502: PUSH
3503: LD_VAR 0 1
3507: PPUSH
3508: LD_EXP 34
3512: PPUSH
3513: CALL 6356 0 2
3517: ST_TO_ADDR
// if drivers then
3518: LD_VAR 0 13
3522: IFFALSE 3550
// for i in drivers do
3524: LD_ADDR_VAR 0 4
3528: PUSH
3529: LD_VAR 0 13
3533: PUSH
3534: FOR_IN
3535: IFFALSE 3548
// ComExit ( i ) ;
3537: LD_VAR 0 4
3541: PPUSH
3542: CALL 45033 0 1
3546: GO 3534
3548: POP
3549: POP
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3550: LD_VAR 0 1
3554: PPUSH
3555: LD_EXP 36
3559: PPUSH
3560: CALL 7919 0 2
// end ; end else
3564: GO 4128
// begin apes := MC_GetByClass ( base , class_apeman_engineer , mct_none ) ;
3566: LD_ADDR_VAR 0 8
3570: PUSH
3571: LD_VAR 0 1
3575: PPUSH
3576: LD_INT 16
3578: PPUSH
3579: LD_EXP 31
3583: PPUSH
3584: CALL 7249 0 3
3588: ST_TO_ADDR
// if apes then
3589: LD_VAR 0 8
3593: IFFALSE 3611
// collectors := collectors union apes ;
3595: LD_ADDR_VAR 0 10
3599: PUSH
3600: LD_VAR 0 10
3604: PUSH
3605: LD_VAR 0 8
3609: UNION
3610: ST_TO_ADDR
// engs := MC_GetByClass ( base , class_engineer , mct_none ) ;
3611: LD_ADDR_VAR 0 9
3615: PUSH
3616: LD_VAR 0 1
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: LD_EXP 31
3628: PPUSH
3629: CALL 7249 0 3
3633: ST_TO_ADDR
// if engs then
3634: LD_VAR 0 9
3638: IFFALSE 3656
// collectors := collectors union engs ;
3640: LD_ADDR_VAR 0 10
3644: PUSH
3645: LD_VAR 0 10
3649: PUSH
3650: LD_VAR 0 9
3654: UNION
3655: ST_TO_ADDR
// if not collectors then
3656: LD_VAR 0 10
3660: NOT
3661: IFFALSE 3761
// begin engs := MC_GetBestForClass ( base , 2 , 3 ) ;
3663: LD_ADDR_VAR 0 9
3667: PUSH
3668: LD_VAR 0 1
3672: PPUSH
3673: LD_INT 2
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: CALL 6511 0 3
3683: ST_TO_ADDR
// if engs then
3684: LD_VAR 0 9
3688: IFFALSE 3707
// MC_ChangeClass ( base , 2 , engs ) ;
3690: LD_VAR 0 1
3694: PPUSH
3695: LD_INT 2
3697: PPUSH
3698: LD_VAR 0 9
3702: PPUSH
3703: CALL 6741 0 3
// repeat wait ( 0 0$1 ) ;
3707: LD_INT 35
3709: PPUSH
3710: CALL_OW 67
// if not UnitFilter ( engs , [ f_ok ] ) then
3714: LD_VAR 0 9
3718: PPUSH
3719: LD_INT 50
3721: PUSH
3722: EMPTY
3723: LIST
3724: PPUSH
3725: CALL_OW 72
3729: NOT
3730: IFFALSE 3734
// break ;
3732: GO 3761
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
3734: LD_VAR 0 9
3738: PPUSH
3739: LD_INT 25
3741: PUSH
3742: LD_INT 2
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: PPUSH
3749: CALL_OW 72
3753: PUSH
3754: LD_VAR 0 9
3758: EQUAL
3759: IFFALSE 3707
// end ; if not collectors then
3761: LD_VAR 0 10
3765: NOT
3766: IFFALSE 3784
// begin MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3768: LD_VAR 0 1
3772: PPUSH
3773: LD_EXP 36
3777: PPUSH
3778: CALL 7919 0 2
// exit ;
3782: GO 4128
// end ; if collectors > 5 then
3784: LD_VAR 0 10
3788: PUSH
3789: LD_INT 5
3791: GREATER
3792: IFFALSE 3848
// for i := collectors downto 5 do
3794: LD_ADDR_VAR 0 4
3798: PUSH
3799: DOUBLE
3800: LD_VAR 0 10
3804: INC
3805: ST_TO_ADDR
3806: LD_INT 5
3808: PUSH
3809: FOR_DOWNTO
3810: IFFALSE 3846
// begin SetTag ( i , 0 ) ;
3812: LD_VAR 0 4
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 109
// collectors := Delete ( collectors , i ) ;
3824: LD_ADDR_VAR 0 10
3828: PUSH
3829: LD_VAR 0 10
3833: PPUSH
3834: LD_VAR 0 4
3838: PPUSH
3839: CALL_OW 3
3843: ST_TO_ADDR
// end ;
3844: GO 3809
3846: POP
3847: POP
// ComExitAll ( collectors ) ;
3848: LD_VAR 0 10
3852: PPUSH
3853: CALL 45116 0 1
// MCT_SetTag ( collectors , mct_collect_crates ) ;
3857: LD_VAR 0 10
3861: PPUSH
3862: LD_EXP 34
3866: PPUSH
3867: CALL 6422 0 2
// while crates and collectors do
3871: LD_VAR 0 2
3875: PUSH
3876: LD_VAR 0 10
3880: AND
3881: IFFALSE 4100
// begin wait ( 0 0$1 ) ;
3883: LD_INT 35
3885: PPUSH
3886: CALL_OW 67
// amount := GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3890: LD_ADDR_VAR 0 6
3894: PUSH
3895: LD_VAR 0 2
3899: PUSH
3900: LD_INT 1
3902: ARRAY
3903: PPUSH
3904: LD_VAR 0 2
3908: PUSH
3909: LD_INT 2
3911: ARRAY
3912: PPUSH
3913: CALL_OW 284
3917: ST_TO_ADDR
// j := 0 ;
3918: LD_ADDR_VAR 0 5
3922: PUSH
3923: LD_INT 0
3925: ST_TO_ADDR
// for i in collectors do
3926: LD_ADDR_VAR 0 4
3930: PUSH
3931: LD_VAR 0 10
3935: PUSH
3936: FOR_IN
3937: IFFALSE 4033
// begin if IsDead ( i ) then
3939: LD_VAR 0 4
3943: PPUSH
3944: CALL_OW 301
3948: IFFALSE 3966
// collectors := collectors diff i ;
3950: LD_ADDR_VAR 0 10
3954: PUSH
3955: LD_VAR 0 10
3959: PUSH
3960: LD_VAR 0 4
3964: DIFF
3965: ST_TO_ADDR
// if j < amount and not HasTask ( i ) then
3966: LD_VAR 0 5
3970: PUSH
3971: LD_VAR 0 6
3975: LESS
3976: PUSH
3977: LD_VAR 0 4
3981: PPUSH
3982: CALL_OW 314
3986: NOT
3987: AND
3988: IFFALSE 4031
// begin j := j + 1 ;
3990: LD_ADDR_VAR 0 5
3994: PUSH
3995: LD_VAR 0 5
3999: PUSH
4000: LD_INT 1
4002: PLUS
4003: ST_TO_ADDR
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
4004: LD_VAR 0 4
4008: PPUSH
4009: LD_VAR 0 2
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 2
4025: ARRAY
4026: PPUSH
4027: CALL_OW 117
// end ; end ;
4031: GO 3936
4033: POP
4034: POP
// if not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) then
4035: LD_VAR 0 2
4039: PUSH
4040: LD_INT 1
4042: ARRAY
4043: PPUSH
4044: LD_VAR 0 2
4048: PUSH
4049: LD_INT 2
4051: ARRAY
4052: PPUSH
4053: CALL_OW 284
4057: NOT
4058: IFFALSE 4098
// for j := 1 to 2 do
4060: LD_ADDR_VAR 0 5
4064: PUSH
4065: DOUBLE
4066: LD_INT 1
4068: DEC
4069: ST_TO_ADDR
4070: LD_INT 2
4072: PUSH
4073: FOR_TO
4074: IFFALSE 4096
// crates := Delete ( crates , 1 ) ;
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: LD_VAR 0 2
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 3
4093: ST_TO_ADDR
4094: GO 4073
4096: POP
4097: POP
// end ;
4098: GO 3871
// MCT_ResetTag ( base , mct_collect_crates ) ;
4100: LD_VAR 0 1
4104: PPUSH
4105: LD_EXP 34
4109: PPUSH
4110: CALL 6356 0 2
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
4114: LD_VAR 0 1
4118: PPUSH
4119: LD_EXP 36
4123: PPUSH
4124: CALL 7919 0 2
// end ; end ;
4128: LD_VAR 0 3
4132: RET
// export function MC_Build ( base ) ; var depot , btype , x , y , d , engs ; begin
4133: LD_INT 0
4135: PPUSH
4136: PPUSH
4137: PPUSH
4138: PPUSH
4139: PPUSH
4140: PPUSH
4141: PPUSH
// if MCTM_HasActiveTask ( base , mctm_build ) or not mc_build_list [ base ] or not MC_GetDepot ( base ) then
4142: LD_VAR 0 1
4146: PPUSH
4147: LD_EXP 37
4151: PPUSH
4152: CALL 7825 0 2
4156: PUSH
4157: LD_EXP 14
4161: PUSH
4162: LD_VAR 0 1
4166: ARRAY
4167: NOT
4168: OR
4169: PUSH
4170: LD_VAR 0 1
4174: PPUSH
4175: CALL 7446 0 1
4179: NOT
4180: OR
4181: IFFALSE 4185
// exit ;
4183: GO 4736
// MCTM_SetActiveTask ( base , mctm_build ) ;
4185: LD_VAR 0 1
4189: PPUSH
4190: LD_EXP 37
4194: PPUSH
4195: CALL 7855 0 2
// engs := MC_GetByClass ( base , 2 , mct_none ) ;
4199: LD_ADDR_VAR 0 8
4203: PUSH
4204: LD_VAR 0 1
4208: PPUSH
4209: LD_INT 2
4211: PPUSH
4212: LD_EXP 31
4216: PPUSH
4217: CALL 7249 0 3
4221: ST_TO_ADDR
// if not engs then
4222: LD_VAR 0 8
4226: NOT
4227: IFFALSE 4339
// begin engs := MC_GetBestForClass ( base , 2 , 6 ) ;
4229: LD_ADDR_VAR 0 8
4233: PUSH
4234: LD_VAR 0 1
4238: PPUSH
4239: LD_INT 2
4241: PPUSH
4242: LD_INT 6
4244: PPUSH
4245: CALL 6511 0 3
4249: ST_TO_ADDR
// if not engs then
4250: LD_VAR 0 8
4254: NOT
4255: IFFALSE 4273
// begin MCTM_DeleteActiveTask ( base , mctm_build ) ;
4257: LD_VAR 0 1
4261: PPUSH
4262: LD_EXP 37
4266: PPUSH
4267: CALL 7919 0 2
// exit ;
4271: GO 4736
// end ; MC_ChangeClass ( base , 2 , engs ) ;
4273: LD_VAR 0 1
4277: PPUSH
4278: LD_INT 2
4280: PPUSH
4281: LD_VAR 0 8
4285: PPUSH
4286: CALL 6741 0 3
// repeat wait ( 0 0$1 ) ;
4290: LD_INT 35
4292: PPUSH
4293: CALL_OW 67
// if not mc_people [ base ] then
4297: LD_EXP 9
4301: PUSH
4302: LD_VAR 0 1
4306: ARRAY
4307: NOT
4308: IFFALSE 4312
// exit ;
4310: GO 4736
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
4312: LD_VAR 0 8
4316: PPUSH
4317: LD_INT 25
4319: PUSH
4320: LD_INT 2
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PPUSH
4327: CALL_OW 72
4331: PUSH
4332: LD_VAR 0 8
4336: EQUAL
4337: IFFALSE 4290
// end ; ComExitAll ( engs ) ;
4339: LD_VAR 0 8
4343: PPUSH
4344: CALL 45116 0 1
// MCT_SetTag ( engs , mct_build ) ;
4348: LD_VAR 0 8
4352: PPUSH
4353: LD_EXP 33
4357: PPUSH
4358: CALL 6422 0 2
// btype := mc_build_list [ base ] [ 1 ] [ 1 ] ;
4362: LD_ADDR_VAR 0 4
4366: PUSH
4367: LD_EXP 14
4371: PUSH
4372: LD_VAR 0 1
4376: ARRAY
4377: PUSH
4378: LD_INT 1
4380: ARRAY
4381: PUSH
4382: LD_INT 1
4384: ARRAY
4385: ST_TO_ADDR
// x := mc_build_list [ base ] [ 1 ] [ 2 ] ;
4386: LD_ADDR_VAR 0 5
4390: PUSH
4391: LD_EXP 14
4395: PUSH
4396: LD_VAR 0 1
4400: ARRAY
4401: PUSH
4402: LD_INT 1
4404: ARRAY
4405: PUSH
4406: LD_INT 2
4408: ARRAY
4409: ST_TO_ADDR
// y := mc_build_list [ base ] [ 1 ] [ 3 ] ;
4410: LD_ADDR_VAR 0 6
4414: PUSH
4415: LD_EXP 14
4419: PUSH
4420: LD_VAR 0 1
4424: ARRAY
4425: PUSH
4426: LD_INT 1
4428: ARRAY
4429: PUSH
4430: LD_INT 3
4432: ARRAY
4433: ST_TO_ADDR
// d := mc_build_list [ base ] [ 1 ] [ 4 ] ;
4434: LD_ADDR_VAR 0 7
4438: PUSH
4439: LD_EXP 14
4443: PUSH
4444: LD_VAR 0 1
4448: ARRAY
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PUSH
4454: LD_INT 4
4456: ARRAY
4457: ST_TO_ADDR
// if GetType ( HexInfo ( x , y ) ) = unit_building then
4458: LD_VAR 0 5
4462: PPUSH
4463: LD_VAR 0 6
4467: PPUSH
4468: CALL_OW 428
4472: PPUSH
4473: CALL_OW 247
4477: PUSH
4478: LD_INT 3
4480: EQUAL
4481: IFFALSE 4516
// begin wait ( 0 0$1 ) ;
4483: LD_INT 35
4485: PPUSH
4486: CALL_OW 67
// ComComplete ( engs , HexInfo ( x , y ) ) ;
4490: LD_VAR 0 8
4494: PPUSH
4495: LD_VAR 0 5
4499: PPUSH
4500: LD_VAR 0 6
4504: PPUSH
4505: CALL_OW 428
4509: PPUSH
4510: CALL 15813 0 2
// end else
4514: GO 4736
// begin depot := NearestUnitToXY ( MC_GetDepot ( base ) , x , y ) ;
4516: LD_ADDR_VAR 0 3
4520: PUSH
4521: LD_VAR 0 1
4525: PPUSH
4526: CALL 7446 0 1
4530: PPUSH
4531: LD_VAR 0 5
4535: PPUSH
4536: LD_VAR 0 6
4540: PPUSH
4541: CALL_OW 73
4545: ST_TO_ADDR
// if not HexInfo ( x , y ) and CanBeBuilt ( depot , btype , x , y , d ) then
4546: LD_VAR 0 5
4550: PPUSH
4551: LD_VAR 0 6
4555: PPUSH
4556: CALL_OW 428
4560: NOT
4561: PUSH
4562: LD_VAR 0 3
4566: PPUSH
4567: LD_VAR 0 4
4571: PPUSH
4572: LD_VAR 0 5
4576: PPUSH
4577: LD_VAR 0 6
4581: PPUSH
4582: LD_VAR 0 7
4586: PPUSH
4587: CALL 21053 0 5
4591: AND
4592: IFFALSE 4625
// ComBuild ( engs , btype , x , y , d ) else
4594: LD_VAR 0 8
4598: PPUSH
4599: LD_VAR 0 4
4603: PPUSH
4604: LD_VAR 0 5
4608: PPUSH
4609: LD_VAR 0 6
4613: PPUSH
4614: LD_VAR 0 7
4618: PPUSH
4619: CALL_OW 145
4623: GO 4736
// begin if GetType ( HexInfo ( x , y ) ) <> unit_building then
4625: LD_VAR 0 5
4629: PPUSH
4630: LD_VAR 0 6
4634: PPUSH
4635: CALL_OW 428
4639: PPUSH
4640: CALL_OW 247
4644: PUSH
4645: LD_INT 3
4647: NONEQUAL
4648: IFFALSE 4708
// begin TryClearPlaceForBuilding ( btype , x , y , d , mc_buildings [ base ] , engs , mc_parking [ base ] ) ;
4650: LD_VAR 0 4
4654: PPUSH
4655: LD_VAR 0 5
4659: PPUSH
4660: LD_VAR 0 6
4664: PPUSH
4665: LD_VAR 0 7
4669: PPUSH
4670: LD_EXP 10
4674: PUSH
4675: LD_VAR 0 1
4679: ARRAY
4680: PPUSH
4681: LD_VAR 0 8
4685: PPUSH
4686: LD_EXP 28
4690: PUSH
4691: LD_VAR 0 1
4695: ARRAY
4696: PPUSH
4697: CALL 19803 0 7
// wait ( 0 0$10 ) ;
4701: LD_INT 350
4703: PPUSH
4704: CALL_OW 67
// end ; MCTM_DeleteActiveTask ( base , mctm_build ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_EXP 37
4717: PPUSH
4718: CALL 7919 0 2
// MCT_ResetTag ( base , mctm_build ) ;
4722: LD_VAR 0 1
4726: PPUSH
4727: LD_EXP 37
4731: PPUSH
4732: CALL 6356 0 2
// end ; end ; end ; end_of_file
4736: LD_VAR 0 2
4740: RET
// export mce_start , mce_monitor_base , mce_ ; export function MCE_InitEvents ( ) ; begin
4741: LD_INT 0
4743: PPUSH
// mce_start := 1 ;
4744: LD_ADDR_EXP 1
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// mce_monitor_base := 2 ;
4752: LD_ADDR_EXP 2
4756: PUSH
4757: LD_INT 2
4759: ST_TO_ADDR
// end ;
4760: LD_VAR 0 1
4764: RET
// export function MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4765: LD_INT 0
4767: PPUSH
// case event of mce_start :
4768: LD_VAR 0 1
4772: PUSH
4773: LD_EXP 1
4777: DOUBLE
4778: EQUAL
4779: IFTRUE 4783
4781: GO 4790
4783: POP
// MC_Monitor ( ) ; mce_monitor_base :
4784: CALL 2435 0 0
4788: GO 4813
4790: LD_EXP 2
4794: DOUBLE
4795: EQUAL
4796: IFTRUE 4800
4798: GO 4812
4800: POP
// MC_MonitorBase ( p1 ) ; end ;
4801: LD_VAR 0 2
4805: PPUSH
4806: CALL 2559 0 1
4810: GO 4813
4812: POP
// end ;
4813: LD_VAR 0 8
4817: RET
// export function MCE_ClassChanged ( unit , old_class , new_class ) ; begin
4818: LD_INT 0
4820: PPUSH
// SetTag ( unit , mct_none ) ;
4821: LD_VAR 0 1
4825: PPUSH
4826: LD_EXP 31
4830: PPUSH
4831: CALL_OW 109
// end ;
4835: LD_VAR 0 4
4839: RET
// export function MCE_UnitDestroyed ( un ) ; begin
4840: LD_INT 0
4842: PPUSH
// case GetType ( un ) of unit_human :
4843: LD_VAR 0 1
4847: PPUSH
4848: CALL_OW 247
4852: PUSH
4853: LD_INT 1
4855: DOUBLE
4856: EQUAL
4857: IFTRUE 4861
4859: GO 4873
4861: POP
// MCE_HumanKilled ( un ) ; unit_building :
4862: LD_VAR 0 1
4866: PPUSH
4867: CALL 4899 0 1
4871: GO 4894
4873: LD_INT 3
4875: DOUBLE
4876: EQUAL
4877: IFTRUE 4881
4879: GO 4893
4881: POP
// MCE_BuildingDestroyed ( un ) ; end ;
4882: LD_VAR 0 1
4886: PPUSH
4887: CALL 5456 0 1
4891: GO 4894
4893: POP
// end ;
4894: LD_VAR 0 2
4898: RET
// export function MCE_HumanKilled ( un ) ; var i ; begin
4899: LD_INT 0
4901: PPUSH
4902: PPUSH
// for i := 1 to mc_people do
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: DOUBLE
4909: LD_INT 1
4911: DEC
4912: ST_TO_ADDR
4913: LD_EXP 9
4917: PUSH
4918: FOR_TO
4919: IFFALSE 4978
// if un in mc_people [ i ] then
4921: LD_VAR 0 1
4925: PUSH
4926: LD_EXP 9
4930: PUSH
4931: LD_VAR 0 3
4935: ARRAY
4936: IN
4937: IFFALSE 4976
// mc_people := Replace ( mc_people , i , mc_people [ i ] diff un ) ;
4939: LD_ADDR_EXP 9
4943: PUSH
4944: LD_EXP 9
4948: PPUSH
4949: LD_VAR 0 3
4953: PPUSH
4954: LD_EXP 9
4958: PUSH
4959: LD_VAR 0 3
4963: ARRAY
4964: PUSH
4965: LD_VAR 0 1
4969: DIFF
4970: PPUSH
4971: CALL_OW 1
4975: ST_TO_ADDR
4976: GO 4918
4978: POP
4979: POP
// end ;
4980: LD_VAR 0 2
4984: RET
// export function MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ; var base ; begin
4985: LD_INT 0
4987: PPUSH
4988: PPUSH
// if GetTag ( driver ) = mct_collect_crates then
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 110
4998: PUSH
4999: LD_EXP 34
5003: EQUAL
5004: IFFALSE 5053
// begin base := MC_GetHumanBase ( driver ) ;
5006: LD_ADDR_VAR 0 6
5010: PUSH
5011: LD_VAR 0 1
5015: PPUSH
5016: CALL 6678 0 1
5020: ST_TO_ADDR
// if base then
5021: LD_VAR 0 6
5025: IFFALSE 5053
// begin SetTag ( driver , 0 ) ;
5027: LD_VAR 0 1
5031: PPUSH
5032: LD_INT 0
5034: PPUSH
5035: CALL_OW 109
// MC_Retreat ( base , driver ) ;
5039: LD_VAR 0 6
5043: PPUSH
5044: LD_VAR 0 1
5048: PPUSH
5049: CALL 7709 0 2
// end ; end ; end ;
5053: LD_VAR 0 5
5057: RET
// export function MCE_BuildingComplete ( building ) ; var base , btype , x , y , d ; begin
5058: LD_INT 0
5060: PPUSH
5061: PPUSH
5062: PPUSH
5063: PPUSH
5064: PPUSH
5065: PPUSH
// btype := GetBType ( building ) ;
5066: LD_ADDR_VAR 0 4
5070: PUSH
5071: LD_VAR 0 1
5075: PPUSH
5076: CALL_OW 266
5080: ST_TO_ADDR
// x := GetX ( building ) ;
5081: LD_ADDR_VAR 0 5
5085: PUSH
5086: LD_VAR 0 1
5090: PPUSH
5091: CALL_OW 250
5095: ST_TO_ADDR
// y := GetY ( building ) ;
5096: LD_ADDR_VAR 0 6
5100: PUSH
5101: LD_VAR 0 1
5105: PPUSH
5106: CALL_OW 251
5110: ST_TO_ADDR
// d := GetDir ( building ) ;
5111: LD_ADDR_VAR 0 7
5115: PUSH
5116: LD_VAR 0 1
5120: PPUSH
5121: CALL_OW 254
5125: ST_TO_ADDR
// for base := 1 to mc_build_list do
5126: LD_ADDR_VAR 0 3
5130: PUSH
5131: DOUBLE
5132: LD_INT 1
5134: DEC
5135: ST_TO_ADDR
5136: LD_EXP 14
5140: PUSH
5141: FOR_TO
5142: IFFALSE 5449
// begin if not mc_build_list [ base ] then
5144: LD_EXP 14
5148: PUSH
5149: LD_VAR 0 3
5153: ARRAY
5154: NOT
5155: IFFALSE 5159
// continue ;
5157: GO 5141
// if CompareArrayValues ( [ btype , x , y , d ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5159: LD_VAR 0 4
5163: PUSH
5164: LD_VAR 0 5
5168: PUSH
5169: LD_VAR 0 6
5173: PUSH
5174: LD_VAR 0 7
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PPUSH
5185: LD_EXP 14
5189: PUSH
5190: LD_VAR 0 3
5194: ARRAY
5195: PUSH
5196: LD_INT 1
5198: ARRAY
5199: PPUSH
5200: CALL 19227 0 2
5204: PUSH
5205: LD_VAR 0 1
5209: PPUSH
5210: CALL_OW 255
5214: PUSH
5215: LD_EXP 6
5219: PUSH
5220: LD_VAR 0 3
5224: ARRAY
5225: EQUAL
5226: AND
5227: IFFALSE 5447
// begin if mc_build_list [ base ] [ 1 ] > 4 then
5229: LD_EXP 14
5233: PUSH
5234: LD_VAR 0 3
5238: ARRAY
5239: PUSH
5240: LD_INT 1
5242: ARRAY
5243: PUSH
5244: LD_INT 4
5246: GREATER
5247: IFFALSE 5320
// begin repeat wait ( 0 0$1 ) ;
5249: LD_INT 35
5251: PPUSH
5252: CALL_OW 67
// until not UpgradeCost ( mc_build_list [ base ] [ 1 ] [ 5 ] ) or not IsDead ( building ) ;
5256: LD_EXP 14
5260: PUSH
5261: LD_VAR 0 3
5265: ARRAY
5266: PUSH
5267: LD_INT 1
5269: ARRAY
5270: PUSH
5271: LD_INT 5
5273: ARRAY
5274: PPUSH
5275: CALL 19463 0 1
5279: NOT
5280: PUSH
5281: LD_VAR 0 1
5285: PPUSH
5286: CALL_OW 301
5290: NOT
5291: OR
5292: IFFALSE 5249
// if IsDead ( building ) then
5294: LD_VAR 0 1
5298: PPUSH
5299: CALL_OW 301
5303: IFFALSE 5309
// exit ;
5305: POP
5306: POP
5307: GO 5451
// ComUpgrade ( building ) ;
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 146
// end else
5318: GO 5359
// mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5320: LD_ADDR_EXP 14
5324: PUSH
5325: LD_EXP 14
5329: PPUSH
5330: LD_VAR 0 3
5334: PPUSH
5335: LD_EXP 14
5339: PUSH
5340: LD_VAR 0 3
5344: ARRAY
5345: PPUSH
5346: LD_INT 1
5348: PPUSH
5349: CALL_OW 3
5353: PPUSH
5354: CALL_OW 1
5358: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , base , Replace ( mc_buildings [ base ] , mc_buildings [ base ] + 1 , building ) ) ;
5359: LD_ADDR_EXP 10
5363: PUSH
5364: LD_EXP 10
5368: PPUSH
5369: LD_VAR 0 3
5373: PPUSH
5374: LD_EXP 10
5378: PUSH
5379: LD_VAR 0 3
5383: ARRAY
5384: PPUSH
5385: LD_EXP 10
5389: PUSH
5390: LD_VAR 0 3
5394: ARRAY
5395: PUSH
5396: LD_INT 1
5398: PLUS
5399: PPUSH
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 1
5409: PPUSH
5410: CALL_OW 1
5414: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5415: LD_VAR 0 3
5419: PPUSH
5420: LD_EXP 37
5424: PPUSH
5425: CALL 7919 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5429: LD_VAR 0 3
5433: PPUSH
5434: LD_EXP 37
5438: PPUSH
5439: CALL 6356 0 2
// exit ;
5443: POP
5444: POP
5445: GO 5451
// end ; end ;
5447: GO 5141
5449: POP
5450: POP
// end ;
5451: LD_VAR 0 2
5455: RET
// export function MCE_BuildingDestroyed ( building ) ; var base , x , y , d , btype ; begin
5456: LD_INT 0
5458: PPUSH
5459: PPUSH
5460: PPUSH
5461: PPUSH
5462: PPUSH
5463: PPUSH
// btype := GetBType ( building ) ;
5464: LD_ADDR_VAR 0 7
5468: PUSH
5469: LD_VAR 0 1
5473: PPUSH
5474: CALL_OW 266
5478: ST_TO_ADDR
// x := GetX ( building ) ;
5479: LD_ADDR_VAR 0 4
5483: PUSH
5484: LD_VAR 0 1
5488: PPUSH
5489: CALL_OW 250
5493: ST_TO_ADDR
// y := GetY ( building ) ;
5494: LD_ADDR_VAR 0 5
5498: PUSH
5499: LD_VAR 0 1
5503: PPUSH
5504: CALL_OW 251
5508: ST_TO_ADDR
// d := GetDir ( building ) ;
5509: LD_ADDR_VAR 0 6
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 254
5523: ST_TO_ADDR
// for base := 1 to mc_buildings do
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: DOUBLE
5530: LD_INT 1
5532: DEC
5533: ST_TO_ADDR
5534: LD_EXP 10
5538: PUSH
5539: FOR_TO
5540: IFFALSE 5770
// begin if not mc_buildings [ base ] then
5542: LD_EXP 10
5546: PUSH
5547: LD_VAR 0 3
5551: ARRAY
5552: NOT
5553: IFFALSE 5557
// continue ;
5555: GO 5539
// if building in mc_buildings [ base ] then
5557: LD_VAR 0 1
5561: PUSH
5562: LD_EXP 10
5566: PUSH
5567: LD_VAR 0 3
5571: ARRAY
5572: IN
5573: IFFALSE 5768
// begin mc_buildings := Replace ( mc_buildings , base , mc_buildings [ base ] diff building ) ;
5575: LD_ADDR_EXP 10
5579: PUSH
5580: LD_EXP 10
5584: PPUSH
5585: LD_VAR 0 3
5589: PPUSH
5590: LD_EXP 10
5594: PUSH
5595: LD_VAR 0 3
5599: ARRAY
5600: PUSH
5601: LD_VAR 0 1
5605: DIFF
5606: PPUSH
5607: CALL_OW 1
5611: ST_TO_ADDR
// if mc_build_list [ base ] then
5612: LD_EXP 14
5616: PUSH
5617: LD_VAR 0 3
5621: ARRAY
5622: IFFALSE 5706
// if mc_build_list [ base ] [ 1 ] [ 1 ] = btype and mc_build_list [ base ] [ 1 ] [ 2 ] = x and mc_build_list [ base ] [ 1 ] [ 3 ] = y then
5624: LD_EXP 14
5628: PUSH
5629: LD_VAR 0 3
5633: ARRAY
5634: PUSH
5635: LD_INT 1
5637: ARRAY
5638: PUSH
5639: LD_INT 1
5641: ARRAY
5642: PUSH
5643: LD_VAR 0 7
5647: EQUAL
5648: PUSH
5649: LD_EXP 14
5653: PUSH
5654: LD_VAR 0 3
5658: ARRAY
5659: PUSH
5660: LD_INT 1
5662: ARRAY
5663: PUSH
5664: LD_INT 2
5666: ARRAY
5667: PUSH
5668: LD_VAR 0 4
5672: EQUAL
5673: AND
5674: PUSH
5675: LD_EXP 14
5679: PUSH
5680: LD_VAR 0 3
5684: ARRAY
5685: PUSH
5686: LD_INT 1
5688: ARRAY
5689: PUSH
5690: LD_INT 3
5692: ARRAY
5693: PUSH
5694: LD_VAR 0 5
5698: EQUAL
5699: AND
5700: IFFALSE 5706
// exit ;
5702: POP
5703: POP
5704: GO 5772
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] ^ [ btype , x , y , d ] ) ;
5706: LD_ADDR_EXP 14
5710: PUSH
5711: LD_EXP 14
5715: PPUSH
5716: LD_VAR 0 3
5720: PPUSH
5721: LD_EXP 14
5725: PUSH
5726: LD_VAR 0 3
5730: ARRAY
5731: PUSH
5732: LD_VAR 0 7
5736: PUSH
5737: LD_VAR 0 4
5741: PUSH
5742: LD_VAR 0 5
5746: PUSH
5747: LD_VAR 0 6
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: ADD
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// exit ;
5764: POP
5765: POP
5766: GO 5772
// end ; end ;
5768: GO 5539
5770: POP
5771: POP
// end ;
5772: LD_VAR 0 2
5776: RET
// export function MCE_BuildingUpgradeComplete ( building ) ; var base , btype , x , y , d ; begin
5777: LD_INT 0
5779: PPUSH
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
5784: PPUSH
// btype := GetBType ( building ) ;
5785: LD_ADDR_VAR 0 4
5789: PUSH
5790: LD_VAR 0 1
5794: PPUSH
5795: CALL_OW 266
5799: ST_TO_ADDR
// x := GetX ( building ) ;
5800: LD_ADDR_VAR 0 5
5804: PUSH
5805: LD_VAR 0 1
5809: PPUSH
5810: CALL_OW 250
5814: ST_TO_ADDR
// y := GetY ( building ) ;
5815: LD_ADDR_VAR 0 6
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 251
5829: ST_TO_ADDR
// d := GetDir ( building ) ;
5830: LD_ADDR_VAR 0 7
5834: PUSH
5835: LD_VAR 0 1
5839: PPUSH
5840: CALL_OW 254
5844: ST_TO_ADDR
// for base = 1 to mc_build_list do
5845: LD_ADDR_VAR 0 3
5849: PUSH
5850: DOUBLE
5851: LD_INT 1
5853: DEC
5854: ST_TO_ADDR
5855: LD_EXP 14
5859: PUSH
5860: FOR_TO
5861: IFFALSE 6031
// begin if not mc_build_list [ base ] then
5863: LD_EXP 14
5867: PUSH
5868: LD_VAR 0 3
5872: ARRAY
5873: NOT
5874: IFFALSE 5878
// continue ;
5876: GO 5860
// if CompareArrayValues ( [ btype - 1 , x , y , d , btype ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5878: LD_VAR 0 4
5882: PUSH
5883: LD_INT 1
5885: MINUS
5886: PUSH
5887: LD_VAR 0 5
5891: PUSH
5892: LD_VAR 0 6
5896: PUSH
5897: LD_VAR 0 7
5901: PUSH
5902: LD_VAR 0 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: PPUSH
5914: LD_EXP 14
5918: PUSH
5919: LD_VAR 0 3
5923: ARRAY
5924: PUSH
5925: LD_INT 1
5927: ARRAY
5928: PPUSH
5929: CALL 19227 0 2
5933: PUSH
5934: LD_VAR 0 1
5938: PPUSH
5939: CALL_OW 255
5943: PUSH
5944: LD_EXP 6
5948: PUSH
5949: LD_VAR 0 3
5953: ARRAY
5954: EQUAL
5955: AND
5956: IFFALSE 6029
// begin mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5958: LD_ADDR_EXP 14
5962: PUSH
5963: LD_EXP 14
5967: PPUSH
5968: LD_VAR 0 3
5972: PPUSH
5973: LD_EXP 14
5977: PUSH
5978: LD_VAR 0 3
5982: ARRAY
5983: PPUSH
5984: LD_INT 1
5986: PPUSH
5987: CALL_OW 3
5991: PPUSH
5992: CALL_OW 1
5996: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_EXP 37
6006: PPUSH
6007: CALL 7919 0 2
// MCT_ResetTag ( base , mctm_build ) ;
6011: LD_VAR 0 3
6015: PPUSH
6016: LD_EXP 37
6020: PPUSH
6021: CALL 6356 0 2
// exit ;
6025: POP
6026: POP
6027: GO 6033
// end ; end ;
6029: GO 5860
6031: POP
6032: POP
// end ; end_of_file
6033: LD_VAR 0 2
6037: RET
// export mc_active , mc_debug , mc_bases , mc_tag , mc_task , mc_people , mc_buildings , mc_vehicles , mc_mines , mc_minefields , mc_build_list , mc_produce_list , mc_defense_status , mc_defender , mc_defender_limit , mc_ape , mc_tech , mc_attack , mc_deposits_xy , mc_can_tame , mc_lab_upgrade , mc_crates_area , mc_teleport_exit , mc_allowed_tower_weapons , mc_parking , mc_scan_area , mc_danger ; export function MC_InitVariables ( ) ; begin
6038: LD_INT 0
6040: PPUSH
// mc_bases := [ ] ;
6041: LD_ADDR_EXP 6
6045: PUSH
6046: EMPTY
6047: ST_TO_ADDR
// mc_tag := [ ] ;
6048: LD_ADDR_EXP 7
6052: PUSH
6053: EMPTY
6054: ST_TO_ADDR
// mc_task := [ ] ;
6055: LD_ADDR_EXP 8
6059: PUSH
6060: EMPTY
6061: ST_TO_ADDR
// mc_people := [ ] ;
6062: LD_ADDR_EXP 9
6066: PUSH
6067: EMPTY
6068: ST_TO_ADDR
// mc_buildings := [ ] ;
6069: LD_ADDR_EXP 10
6073: PUSH
6074: EMPTY
6075: ST_TO_ADDR
// mc_vehicles := [ ] ;
6076: LD_ADDR_EXP 11
6080: PUSH
6081: EMPTY
6082: ST_TO_ADDR
// mc_mines := [ ] ;
6083: LD_ADDR_EXP 12
6087: PUSH
6088: EMPTY
6089: ST_TO_ADDR
// mc_minefields := [ ] ;
6090: LD_ADDR_EXP 13
6094: PUSH
6095: EMPTY
6096: ST_TO_ADDR
// mc_build_list := [ ] ;
6097: LD_ADDR_EXP 14
6101: PUSH
6102: EMPTY
6103: ST_TO_ADDR
// mc_produce_list := [ ] ;
6104: LD_ADDR_EXP 15
6108: PUSH
6109: EMPTY
6110: ST_TO_ADDR
// mc_defense_status := [ ] ;
6111: LD_ADDR_EXP 16
6115: PUSH
6116: EMPTY
6117: ST_TO_ADDR
// mc_defender := [ ] ;
6118: LD_ADDR_EXP 17
6122: PUSH
6123: EMPTY
6124: ST_TO_ADDR
// mc_defender_limit := [ ] ;
6125: LD_ADDR_EXP 18
6129: PUSH
6130: EMPTY
6131: ST_TO_ADDR
// mc_ape := [ ] ;
6132: LD_ADDR_EXP 19
6136: PUSH
6137: EMPTY
6138: ST_TO_ADDR
// mc_tech := [ ] ;
6139: LD_ADDR_EXP 20
6143: PUSH
6144: EMPTY
6145: ST_TO_ADDR
// mc_attack := [ ] ;
6146: LD_ADDR_EXP 21
6150: PUSH
6151: EMPTY
6152: ST_TO_ADDR
// mc_deposits_xy := [ ] ;
6153: LD_ADDR_EXP 22
6157: PUSH
6158: EMPTY
6159: ST_TO_ADDR
// mc_can_tame := [ ] ;
6160: LD_ADDR_EXP 23
6164: PUSH
6165: EMPTY
6166: ST_TO_ADDR
// mc_crates_area := [ ] ;
6167: LD_ADDR_EXP 25
6171: PUSH
6172: EMPTY
6173: ST_TO_ADDR
// mc_teleport_exit := [ ] ;
6174: LD_ADDR_EXP 26
6178: PUSH
6179: EMPTY
6180: ST_TO_ADDR
// mc_allowed_tower_weapons := [ ] ;
6181: LD_ADDR_EXP 27
6185: PUSH
6186: EMPTY
6187: ST_TO_ADDR
// mc_parking := [ ] ;
6188: LD_ADDR_EXP 28
6192: PUSH
6193: EMPTY
6194: ST_TO_ADDR
// mc_scan_area := [ ] ;
6195: LD_ADDR_EXP 29
6199: PUSH
6200: EMPTY
6201: ST_TO_ADDR
// mc_danger := [ ] ;
6202: LD_ADDR_EXP 30
6206: PUSH
6207: EMPTY
6208: ST_TO_ADDR
// end ; end_of_file
6209: LD_VAR 0 1
6213: RET
// export mct_none , mct_change_class , mct_build , mct_collect_crates , mct_heal ; export function MCT_InitTags ; begin
6214: LD_INT 0
6216: PPUSH
// mct_none := 0 ;
6217: LD_ADDR_EXP 31
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// mct_change_class := 1 ;
6225: LD_ADDR_EXP 32
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// mct_build := 2 ;
6233: LD_ADDR_EXP 33
6237: PUSH
6238: LD_INT 2
6240: ST_TO_ADDR
// mct_collect_crates := 3 ;
6241: LD_ADDR_EXP 34
6245: PUSH
6246: LD_INT 3
6248: ST_TO_ADDR
// mct_heal := 4 ;
6249: LD_ADDR_EXP 35
6253: PUSH
6254: LD_INT 4
6256: ST_TO_ADDR
// end ;
6257: LD_VAR 0 1
6261: RET
// export function MCT_GetByTag ( base , tag ) ; var i ; begin
6262: LD_INT 0
6264: PPUSH
6265: PPUSH
// result := [ ] ;
6266: LD_ADDR_VAR 0 3
6270: PUSH
6271: EMPTY
6272: ST_TO_ADDR
// if not base then
6273: LD_VAR 0 1
6277: NOT
6278: IFFALSE 6282
// exit ;
6280: GO 6351
// for i in mc_people [ base ] do
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_EXP 9
6291: PUSH
6292: LD_VAR 0 1
6296: ARRAY
6297: PUSH
6298: FOR_IN
6299: IFFALSE 6349
// if GetTag ( i ) = tag then
6301: LD_VAR 0 4
6305: PPUSH
6306: CALL_OW 110
6310: PUSH
6311: LD_VAR 0 2
6315: EQUAL
6316: IFFALSE 6347
// result := Replace ( result , result + 1 , i ) ;
6318: LD_ADDR_VAR 0 3
6322: PUSH
6323: LD_VAR 0 3
6327: PPUSH
6328: LD_VAR 0 3
6332: PUSH
6333: LD_INT 1
6335: PLUS
6336: PPUSH
6337: LD_VAR 0 4
6341: PPUSH
6342: CALL_OW 1
6346: ST_TO_ADDR
6347: GO 6298
6349: POP
6350: POP
// end ;
6351: LD_VAR 0 3
6355: RET
// export function MCT_ResetTag ( base , tag ) ; var i ; begin
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
// result := MCT_GetByTag ( base , tag ) ;
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_VAR 0 1
6369: PPUSH
6370: LD_VAR 0 2
6374: PPUSH
6375: CALL 6262 0 2
6379: ST_TO_ADDR
// if result then
6380: LD_VAR 0 3
6384: IFFALSE 6417
// for i in result do
6386: LD_ADDR_VAR 0 4
6390: PUSH
6391: LD_VAR 0 3
6395: PUSH
6396: FOR_IN
6397: IFFALSE 6415
// SetTag ( i , mct_none ) ;
6399: LD_VAR 0 4
6403: PPUSH
6404: LD_EXP 31
6408: PPUSH
6409: CALL_OW 109
6413: GO 6396
6415: POP
6416: POP
// end ;
6417: LD_VAR 0 3
6421: RET
// export function MCT_SetTag ( units , tag ) ; var i ; begin
6422: LD_INT 0
6424: PPUSH
6425: PPUSH
// if not units then
6426: LD_VAR 0 1
6430: NOT
6431: IFFALSE 6435
// exit ;
6433: GO 6466
// for i in units do
6435: LD_ADDR_VAR 0 4
6439: PUSH
6440: LD_VAR 0 1
6444: PUSH
6445: FOR_IN
6446: IFFALSE 6464
// SetTag ( i , tag ) ;
6448: LD_VAR 0 4
6452: PPUSH
6453: LD_VAR 0 2
6457: PPUSH
6458: CALL_OW 109
6462: GO 6445
6464: POP
6465: POP
// end ; end_of_file
6466: LD_VAR 0 3
6470: RET
// export function MC_Exist ( base ) ; begin
6471: LD_INT 0
6473: PPUSH
// result := mc_bases >= base and mc_bases [ base ] > 0 ;
6474: LD_ADDR_VAR 0 2
6478: PUSH
6479: LD_EXP 6
6483: PUSH
6484: LD_VAR 0 1
6488: GREATEREQUAL
6489: PUSH
6490: LD_EXP 6
6494: PUSH
6495: LD_VAR 0 1
6499: ARRAY
6500: PUSH
6501: LD_INT 0
6503: GREATER
6504: AND
6505: ST_TO_ADDR
// end ;
6506: LD_VAR 0 2
6510: RET
// export function MC_GetBestForClass ( base , class , amount ) ; var i , units ; begin
6511: LD_INT 0
6513: PPUSH
6514: PPUSH
6515: PPUSH
// result := [ ] ;
6516: LD_ADDR_VAR 0 4
6520: PUSH
6521: EMPTY
6522: ST_TO_ADDR
// units := SortBySkill ( UnitFilter ( mc_people [ base ] , [ f_not , [ f_class , class ] ] ) , class ) ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_EXP 9
6532: PUSH
6533: LD_VAR 0 1
6537: ARRAY
6538: PPUSH
6539: LD_INT 3
6541: PUSH
6542: LD_INT 25
6544: PUSH
6545: LD_VAR 0 2
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PPUSH
6558: CALL_OW 72
6562: PPUSH
6563: LD_VAR 0 2
6567: PPUSH
6568: CALL 43154 0 2
6572: ST_TO_ADDR
// if not units then
6573: LD_VAR 0 6
6577: NOT
6578: IFFALSE 6582
// exit ;
6580: GO 6673
// for i := 1 to amount do
6582: LD_ADDR_VAR 0 5
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_VAR 0 3
6596: PUSH
6597: FOR_TO
6598: IFFALSE 6671
// begin if i > units then
6600: LD_VAR 0 5
6604: PUSH
6605: LD_VAR 0 6
6609: GREATER
6610: IFFALSE 6616
// exit ;
6612: POP
6613: POP
6614: GO 6673
// if not GetTag ( units [ i ] ) then
6616: LD_VAR 0 6
6620: PUSH
6621: LD_VAR 0 5
6625: ARRAY
6626: PPUSH
6627: CALL_OW 110
6631: NOT
6632: IFFALSE 6669
// result := Replace ( result , result + 1 , units [ i ] ) ;
6634: LD_ADDR_VAR 0 4
6638: PUSH
6639: LD_VAR 0 4
6643: PPUSH
6644: LD_VAR 0 4
6648: PUSH
6649: LD_INT 1
6651: PLUS
6652: PPUSH
6653: LD_VAR 0 6
6657: PUSH
6658: LD_VAR 0 5
6662: ARRAY
6663: PPUSH
6664: CALL_OW 1
6668: ST_TO_ADDR
// end ;
6669: GO 6597
6671: POP
6672: POP
// end ;
6673: LD_VAR 0 4
6677: RET
// export function MC_GetHumanBase ( human ) ; var i ; begin
6678: LD_INT 0
6680: PPUSH
6681: PPUSH
// for i := 1 to mc_people do
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: DOUBLE
6688: LD_INT 1
6690: DEC
6691: ST_TO_ADDR
6692: LD_EXP 9
6696: PUSH
6697: FOR_TO
6698: IFFALSE 6734
// if human in mc_people [ i ] then
6700: LD_VAR 0 1
6704: PUSH
6705: LD_EXP 9
6709: PUSH
6710: LD_VAR 0 3
6714: ARRAY
6715: IN
6716: IFFALSE 6732
// begin result := i ;
6718: LD_ADDR_VAR 0 2
6722: PUSH
6723: LD_VAR 0 3
6727: ST_TO_ADDR
// exit ;
6728: POP
6729: POP
6730: GO 6736
// end ;
6732: GO 6697
6734: POP
6735: POP
// end ;
6736: LD_VAR 0 2
6740: RET
// export function MC_ChangeClass ( base , class , units ) ; var i , buildings , b ; begin
6741: LD_INT 0
6743: PPUSH
6744: PPUSH
6745: PPUSH
6746: PPUSH
// if not base or not units then
6747: LD_VAR 0 1
6751: NOT
6752: PUSH
6753: LD_VAR 0 3
6757: NOT
6758: OR
6759: IFFALSE 6763
// exit ;
6761: GO 7244
// case class of 1 , 5 , 6 , 7 , 8 :
6763: LD_VAR 0 2
6767: PUSH
6768: LD_INT 1
6770: DOUBLE
6771: EQUAL
6772: IFTRUE 6800
6774: LD_INT 5
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6800
6780: LD_INT 6
6782: DOUBLE
6783: EQUAL
6784: IFTRUE 6800
6786: LD_INT 7
6788: DOUBLE
6789: EQUAL
6790: IFTRUE 6800
6792: LD_INT 8
6794: DOUBLE
6795: EQUAL
6796: IFTRUE 6800
6798: GO 6852
6800: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
6801: LD_ADDR_VAR 0 6
6805: PUSH
6806: LD_EXP 10
6810: PUSH
6811: LD_VAR 0 1
6815: ARRAY
6816: PPUSH
6817: LD_INT 2
6819: PUSH
6820: LD_INT 30
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 30
6832: PUSH
6833: LD_INT 5
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 72
6849: ST_TO_ADDR
6850: GO 7044
6852: LD_INT 2
6854: DOUBLE
6855: EQUAL
6856: IFTRUE 6860
6858: GO 6912
6860: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
6861: LD_ADDR_VAR 0 6
6865: PUSH
6866: LD_EXP 10
6870: PUSH
6871: LD_VAR 0 1
6875: ARRAY
6876: PPUSH
6877: LD_INT 2
6879: PUSH
6880: LD_INT 30
6882: PUSH
6883: LD_INT 0
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 1
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: PPUSH
6905: CALL_OW 72
6909: ST_TO_ADDR
6910: GO 7044
6912: LD_INT 3
6914: DOUBLE
6915: EQUAL
6916: IFTRUE 6920
6918: GO 6972
6920: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
6921: LD_ADDR_VAR 0 6
6925: PUSH
6926: LD_EXP 10
6930: PUSH
6931: LD_VAR 0 1
6935: ARRAY
6936: PPUSH
6937: LD_INT 2
6939: PUSH
6940: LD_INT 30
6942: PUSH
6943: LD_INT 2
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 30
6952: PUSH
6953: LD_INT 3
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 72
6969: ST_TO_ADDR
6970: GO 7044
6972: LD_INT 4
6974: DOUBLE
6975: EQUAL
6976: IFTRUE 6980
6978: GO 7043
6980: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
6981: LD_ADDR_VAR 0 6
6985: PUSH
6986: LD_EXP 10
6990: PUSH
6991: LD_VAR 0 1
6995: ARRAY
6996: PPUSH
6997: LD_INT 2
6999: PUSH
7000: LD_INT 30
7002: PUSH
7003: LD_INT 6
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 30
7012: PUSH
7013: LD_INT 7
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 30
7022: PUSH
7023: LD_INT 8
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 72
7040: ST_TO_ADDR
7041: GO 7044
7043: POP
// if not buildings then
7044: LD_VAR 0 6
7048: NOT
7049: IFFALSE 7053
// exit ;
7051: GO 7244
// for i := 1 to units do
7053: LD_ADDR_VAR 0 5
7057: PUSH
7058: DOUBLE
7059: LD_INT 1
7061: DEC
7062: ST_TO_ADDR
7063: LD_VAR 0 3
7067: PUSH
7068: FOR_TO
7069: IFFALSE 7242
// begin if GetClass ( units [ i ] ) = class then
7071: LD_VAR 0 3
7075: PUSH
7076: LD_VAR 0 5
7080: ARRAY
7081: PPUSH
7082: CALL_OW 257
7086: PUSH
7087: LD_VAR 0 2
7091: EQUAL
7092: IFFALSE 7096
// continue ;
7094: GO 7068
// SetTag ( units [ i ] , mct_change_class ) ;
7096: LD_VAR 0 3
7100: PUSH
7101: LD_VAR 0 5
7105: ARRAY
7106: PPUSH
7107: LD_EXP 32
7111: PPUSH
7112: CALL_OW 109
// if buildings > i div 6 then
7116: LD_VAR 0 6
7120: PUSH
7121: LD_VAR 0 5
7125: PUSH
7126: LD_INT 6
7128: DIV
7129: GREATER
7130: IFFALSE 7154
// b := buildings [ i div 6 ] else
7132: LD_ADDR_VAR 0 7
7136: PUSH
7137: LD_VAR 0 6
7141: PUSH
7142: LD_VAR 0 5
7146: PUSH
7147: LD_INT 6
7149: DIV
7150: ARRAY
7151: ST_TO_ADDR
7152: GO 7168
// b := buildings [ 1 ] ;
7154: LD_ADDR_VAR 0 7
7158: PUSH
7159: LD_VAR 0 6
7163: PUSH
7164: LD_INT 1
7166: ARRAY
7167: ST_TO_ADDR
// if IsInUnit ( units [ i ] ) then
7168: LD_VAR 0 3
7172: PUSH
7173: LD_VAR 0 5
7177: ARRAY
7178: PPUSH
7179: CALL_OW 310
7183: IFFALSE 7200
// ComExit ( units [ i ] ) ;
7185: LD_VAR 0 3
7189: PUSH
7190: LD_VAR 0 5
7194: ARRAY
7195: PPUSH
7196: CALL 45033 0 1
// AddComEnterUnit ( units [ i ] , b ) ;
7200: LD_VAR 0 3
7204: PUSH
7205: LD_VAR 0 5
7209: ARRAY
7210: PPUSH
7211: LD_VAR 0 7
7215: PPUSH
7216: CALL_OW 180
// AddComChangeProfession ( units [ i ] , class ) ;
7220: LD_VAR 0 3
7224: PUSH
7225: LD_VAR 0 5
7229: ARRAY
7230: PPUSH
7231: LD_VAR 0 2
7235: PPUSH
7236: CALL_OW 183
// end ;
7240: GO 7068
7242: POP
7243: POP
// end ;
7244: LD_VAR 0 4
7248: RET
// export function MC_GetByClass ( base , class , tag ) ; var i ; begin
7249: LD_INT 0
7251: PPUSH
7252: PPUSH
// result := UnitFilter ( mc_people [ base ] , [ f_class , class ] ) ;
7253: LD_ADDR_VAR 0 4
7257: PUSH
7258: LD_EXP 9
7262: PUSH
7263: LD_VAR 0 1
7267: ARRAY
7268: PPUSH
7269: LD_INT 25
7271: PUSH
7272: LD_VAR 0 2
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 72
7285: ST_TO_ADDR
// if tag > - 1 then
7286: LD_VAR 0 3
7290: PUSH
7291: LD_INT 1
7293: NEG
7294: GREATER
7295: IFFALSE 7347
// for i in result do
7297: LD_ADDR_VAR 0 5
7301: PUSH
7302: LD_VAR 0 4
7306: PUSH
7307: FOR_IN
7308: IFFALSE 7345
// if GetTag ( i ) <> tag then
7310: LD_VAR 0 5
7314: PPUSH
7315: CALL_OW 110
7319: PUSH
7320: LD_VAR 0 3
7324: NONEQUAL
7325: IFFALSE 7343
// result := result diff i ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: LD_VAR 0 4
7336: PUSH
7337: LD_VAR 0 5
7341: DIFF
7342: ST_TO_ADDR
7343: GO 7307
7345: POP
7346: POP
// end ;
7347: LD_VAR 0 4
7351: RET
// export function MC_GetOneByClass ( base , class , tag ) ; begin
7352: LD_INT 0
7354: PPUSH
// result := MC_GetByClass ( base , class , tag ) ;
7355: LD_ADDR_VAR 0 4
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: LD_VAR 0 2
7369: PPUSH
7370: LD_VAR 0 3
7374: PPUSH
7375: CALL 7249 0 3
7379: ST_TO_ADDR
// if result then
7380: LD_VAR 0 4
7384: IFFALSE 7400
// result := result [ 1 ] ;
7386: LD_ADDR_VAR 0 4
7390: PUSH
7391: LD_VAR 0 4
7395: PUSH
7396: LD_INT 1
7398: ARRAY
7399: ST_TO_ADDR
// end ;
7400: LD_VAR 0 4
7404: RET
// export function MC_GetBuilding ( base , btype ) ; begin
7405: LD_INT 0
7407: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_btype , btype ] ) ;
7408: LD_ADDR_VAR 0 3
7412: PUSH
7413: LD_EXP 10
7417: PUSH
7418: LD_VAR 0 1
7422: ARRAY
7423: PPUSH
7424: LD_INT 30
7426: PUSH
7427: LD_VAR 0 2
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PPUSH
7436: CALL_OW 72
7440: ST_TO_ADDR
// end ;
7441: LD_VAR 0 3
7445: RET
// export function MC_GetDepot ( base ) ; begin
7446: LD_INT 0
7448: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
7449: LD_ADDR_VAR 0 2
7453: PUSH
7454: LD_EXP 10
7458: PUSH
7459: LD_VAR 0 1
7463: ARRAY
7464: PPUSH
7465: LD_INT 2
7467: PUSH
7468: LD_INT 30
7470: PUSH
7471: LD_INT 0
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 30
7480: PUSH
7481: LD_INT 1
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 72
7497: ST_TO_ADDR
// end ;
7498: LD_VAR 0 2
7502: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
7503: LD_INT 0
7505: PPUSH
// result := mc_vehicles [ base ] ;
7506: LD_ADDR_VAR 0 3
7510: PUSH
7511: LD_EXP 11
7515: PUSH
7516: LD_VAR 0 1
7520: ARRAY
7521: ST_TO_ADDR
// if onlyCombat then
7522: LD_VAR 0 2
7526: IFFALSE 7704
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: LD_VAR 0 3
7537: PUSH
7538: LD_VAR 0 3
7542: PPUSH
7543: LD_INT 2
7545: PUSH
7546: LD_INT 34
7548: PUSH
7549: LD_INT 12
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 34
7558: PUSH
7559: LD_INT 51
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 34
7568: PUSH
7569: LD_EXP 40
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PUSH
7578: LD_INT 34
7580: PUSH
7581: LD_INT 32
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: LD_INT 34
7590: PUSH
7591: LD_INT 13
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 34
7600: PUSH
7601: LD_INT 52
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 34
7610: PUSH
7611: LD_EXP 45
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 34
7622: PUSH
7623: LD_INT 14
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: LD_INT 34
7632: PUSH
7633: LD_INT 53
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 34
7642: PUSH
7643: LD_EXP 39
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: LD_INT 34
7654: PUSH
7655: LD_INT 31
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 34
7664: PUSH
7665: LD_INT 48
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 34
7674: PUSH
7675: LD_INT 8
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: PPUSH
7698: CALL_OW 72
7702: DIFF
7703: ST_TO_ADDR
// end ;
7704: LD_VAR 0 3
7708: RET
// export function MC_Retreat ( base , unit ) ; var depot ; begin
7709: LD_INT 0
7711: PPUSH
7712: PPUSH
// if not base or not unit then
7713: LD_VAR 0 1
7717: NOT
7718: PUSH
7719: LD_VAR 0 2
7723: NOT
7724: OR
7725: IFFALSE 7729
// exit ;
7727: GO 7796
// depot := NearestUnitToUnit ( MC_GetDepot ( base ) , unit ) ;
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: LD_VAR 0 1
7738: PPUSH
7739: CALL 7446 0 1
7743: PPUSH
7744: LD_VAR 0 2
7748: PPUSH
7749: CALL_OW 74
7753: ST_TO_ADDR
// if depot then
7754: LD_VAR 0 4
7758: IFFALSE 7776
// ComStandNearbyBuilding ( unit , depot ) else
7760: LD_VAR 0 2
7764: PPUSH
7765: LD_VAR 0 4
7769: PPUSH
7770: CALL 9528 0 2
7774: GO 7796
// ComMoveToArea ( unit , mc_scan_area [ base ] ) ;
7776: LD_VAR 0 2
7780: PPUSH
7781: LD_EXP 29
7785: PUSH
7786: LD_VAR 0 1
7790: ARRAY
7791: PPUSH
7792: CALL_OW 113
// end ; end_of_file
7796: LD_VAR 0 3
7800: RET
// export mctm_collect_crates , mctm_build , mctm_ ; export function MCTM_InitTaskManager ( ) ; begin
7801: LD_INT 0
7803: PPUSH
// mctm_collect_crates := 1 ;
7804: LD_ADDR_EXP 36
7808: PUSH
7809: LD_INT 1
7811: ST_TO_ADDR
// mctm_build := 2 ;
7812: LD_ADDR_EXP 37
7816: PUSH
7817: LD_INT 2
7819: ST_TO_ADDR
// end ;
7820: LD_VAR 0 1
7824: RET
// export function MCTM_HasActiveTask ( base , task ) ; begin
7825: LD_INT 0
7827: PPUSH
// result := task in mc_task [ base ] ;
7828: LD_ADDR_VAR 0 3
7832: PUSH
7833: LD_VAR 0 2
7837: PUSH
7838: LD_EXP 8
7842: PUSH
7843: LD_VAR 0 1
7847: ARRAY
7848: IN
7849: ST_TO_ADDR
// end ;
7850: LD_VAR 0 3
7854: RET
// export function MCTM_SetActiveTask ( base , task ) ; begin
7855: LD_INT 0
7857: PPUSH
// mc_task := Replace ( mc_task , base , Replace ( mc_task [ base ] , mc_task [ base ] + 1 , task ) ) ;
7858: LD_ADDR_EXP 8
7862: PUSH
7863: LD_EXP 8
7867: PPUSH
7868: LD_VAR 0 1
7872: PPUSH
7873: LD_EXP 8
7877: PUSH
7878: LD_VAR 0 1
7882: ARRAY
7883: PPUSH
7884: LD_EXP 8
7888: PUSH
7889: LD_VAR 0 1
7893: ARRAY
7894: PUSH
7895: LD_INT 1
7897: PLUS
7898: PPUSH
7899: LD_VAR 0 2
7903: PPUSH
7904: CALL_OW 1
7908: PPUSH
7909: CALL_OW 1
7913: ST_TO_ADDR
// end ;
7914: LD_VAR 0 3
7918: RET
// export function MCTM_DeleteActiveTask ( base , task ) ; begin
7919: LD_INT 0
7921: PPUSH
// mc_task := Replace ( mc_task , base , mc_task [ base ] diff task ) ;
7922: LD_ADDR_EXP 8
7926: PUSH
7927: LD_EXP 8
7931: PPUSH
7932: LD_VAR 0 1
7936: PPUSH
7937: LD_EXP 8
7941: PUSH
7942: LD_VAR 0 1
7946: ARRAY
7947: PUSH
7948: LD_VAR 0 2
7952: DIFF
7953: PPUSH
7954: CALL_OW 1
7958: ST_TO_ADDR
// end ; end_of_file
7959: LD_VAR 0 3
7963: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
7964: LD_INT 0
7966: PPUSH
7967: PPUSH
// if exist_mode then
7968: LD_VAR 0 2
7972: IFFALSE 7997
// unit := CreateCharacter ( prefix & ident ) else
7974: LD_ADDR_VAR 0 5
7978: PUSH
7979: LD_VAR 0 3
7983: PUSH
7984: LD_VAR 0 1
7988: STR
7989: PPUSH
7990: CALL_OW 34
7994: ST_TO_ADDR
7995: GO 8012
// unit := NewCharacter ( ident ) ;
7997: LD_ADDR_VAR 0 5
8001: PUSH
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 25
8011: ST_TO_ADDR
// result := unit ;
8012: LD_ADDR_VAR 0 4
8016: PUSH
8017: LD_VAR 0 5
8021: ST_TO_ADDR
// end ;
8022: LD_VAR 0 4
8026: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8027: LD_INT 0
8029: PPUSH
8030: PPUSH
// if not side or not nation then
8031: LD_VAR 0 1
8035: NOT
8036: PUSH
8037: LD_VAR 0 2
8041: NOT
8042: OR
8043: IFFALSE 8047
// exit ;
8045: GO 8815
// case nation of nation_american :
8047: LD_VAR 0 2
8051: PUSH
8052: LD_INT 1
8054: DOUBLE
8055: EQUAL
8056: IFTRUE 8060
8058: GO 8274
8060: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8061: LD_ADDR_VAR 0 4
8065: PUSH
8066: LD_INT 35
8068: PUSH
8069: LD_INT 45
8071: PUSH
8072: LD_INT 46
8074: PUSH
8075: LD_INT 47
8077: PUSH
8078: LD_INT 82
8080: PUSH
8081: LD_INT 83
8083: PUSH
8084: LD_INT 84
8086: PUSH
8087: LD_INT 85
8089: PUSH
8090: LD_INT 86
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 6
8101: PUSH
8102: LD_INT 15
8104: PUSH
8105: LD_INT 16
8107: PUSH
8108: LD_INT 7
8110: PUSH
8111: LD_INT 12
8113: PUSH
8114: LD_INT 13
8116: PUSH
8117: LD_INT 10
8119: PUSH
8120: LD_INT 14
8122: PUSH
8123: LD_INT 20
8125: PUSH
8126: LD_INT 21
8128: PUSH
8129: LD_INT 22
8131: PUSH
8132: LD_INT 25
8134: PUSH
8135: LD_INT 32
8137: PUSH
8138: LD_INT 27
8140: PUSH
8141: LD_INT 36
8143: PUSH
8144: LD_INT 69
8146: PUSH
8147: LD_INT 39
8149: PUSH
8150: LD_INT 34
8152: PUSH
8153: LD_INT 40
8155: PUSH
8156: LD_INT 48
8158: PUSH
8159: LD_INT 49
8161: PUSH
8162: LD_INT 50
8164: PUSH
8165: LD_INT 51
8167: PUSH
8168: LD_INT 52
8170: PUSH
8171: LD_INT 53
8173: PUSH
8174: LD_INT 54
8176: PUSH
8177: LD_INT 55
8179: PUSH
8180: LD_INT 56
8182: PUSH
8183: LD_INT 57
8185: PUSH
8186: LD_INT 58
8188: PUSH
8189: LD_INT 59
8191: PUSH
8192: LD_INT 60
8194: PUSH
8195: LD_INT 61
8197: PUSH
8198: LD_INT 62
8200: PUSH
8201: LD_INT 80
8203: PUSH
8204: LD_INT 82
8206: PUSH
8207: LD_INT 83
8209: PUSH
8210: LD_INT 84
8212: PUSH
8213: LD_INT 85
8215: PUSH
8216: LD_INT 86
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: ST_TO_ADDR
8272: GO 8739
8274: LD_INT 2
8276: DOUBLE
8277: EQUAL
8278: IFTRUE 8282
8280: GO 8508
8282: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8283: LD_ADDR_VAR 0 4
8287: PUSH
8288: LD_INT 35
8290: PUSH
8291: LD_INT 45
8293: PUSH
8294: LD_INT 46
8296: PUSH
8297: LD_INT 47
8299: PUSH
8300: LD_INT 82
8302: PUSH
8303: LD_INT 83
8305: PUSH
8306: LD_INT 84
8308: PUSH
8309: LD_INT 85
8311: PUSH
8312: LD_INT 87
8314: PUSH
8315: LD_INT 70
8317: PUSH
8318: LD_INT 1
8320: PUSH
8321: LD_INT 11
8323: PUSH
8324: LD_INT 3
8326: PUSH
8327: LD_INT 4
8329: PUSH
8330: LD_INT 5
8332: PUSH
8333: LD_INT 6
8335: PUSH
8336: LD_INT 15
8338: PUSH
8339: LD_INT 18
8341: PUSH
8342: LD_INT 7
8344: PUSH
8345: LD_INT 17
8347: PUSH
8348: LD_INT 8
8350: PUSH
8351: LD_INT 20
8353: PUSH
8354: LD_INT 21
8356: PUSH
8357: LD_INT 22
8359: PUSH
8360: LD_INT 72
8362: PUSH
8363: LD_INT 26
8365: PUSH
8366: LD_INT 69
8368: PUSH
8369: LD_INT 39
8371: PUSH
8372: LD_INT 40
8374: PUSH
8375: LD_INT 41
8377: PUSH
8378: LD_INT 42
8380: PUSH
8381: LD_INT 43
8383: PUSH
8384: LD_INT 48
8386: PUSH
8387: LD_INT 49
8389: PUSH
8390: LD_INT 50
8392: PUSH
8393: LD_INT 51
8395: PUSH
8396: LD_INT 52
8398: PUSH
8399: LD_INT 53
8401: PUSH
8402: LD_INT 54
8404: PUSH
8405: LD_INT 55
8407: PUSH
8408: LD_INT 56
8410: PUSH
8411: LD_INT 60
8413: PUSH
8414: LD_INT 61
8416: PUSH
8417: LD_INT 62
8419: PUSH
8420: LD_INT 66
8422: PUSH
8423: LD_INT 67
8425: PUSH
8426: LD_INT 68
8428: PUSH
8429: LD_INT 81
8431: PUSH
8432: LD_INT 82
8434: PUSH
8435: LD_INT 83
8437: PUSH
8438: LD_INT 84
8440: PUSH
8441: LD_INT 85
8443: PUSH
8444: LD_INT 87
8446: PUSH
8447: LD_INT 88
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: ST_TO_ADDR
8506: GO 8739
8508: LD_INT 3
8510: DOUBLE
8511: EQUAL
8512: IFTRUE 8516
8514: GO 8738
8516: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8517: LD_ADDR_VAR 0 4
8521: PUSH
8522: LD_INT 46
8524: PUSH
8525: LD_INT 47
8527: PUSH
8528: LD_INT 1
8530: PUSH
8531: LD_INT 2
8533: PUSH
8534: LD_INT 82
8536: PUSH
8537: LD_INT 83
8539: PUSH
8540: LD_INT 84
8542: PUSH
8543: LD_INT 85
8545: PUSH
8546: LD_INT 86
8548: PUSH
8549: LD_INT 11
8551: PUSH
8552: LD_INT 9
8554: PUSH
8555: LD_INT 20
8557: PUSH
8558: LD_INT 19
8560: PUSH
8561: LD_INT 21
8563: PUSH
8564: LD_INT 24
8566: PUSH
8567: LD_INT 22
8569: PUSH
8570: LD_INT 25
8572: PUSH
8573: LD_INT 28
8575: PUSH
8576: LD_INT 29
8578: PUSH
8579: LD_INT 30
8581: PUSH
8582: LD_INT 31
8584: PUSH
8585: LD_INT 37
8587: PUSH
8588: LD_INT 38
8590: PUSH
8591: LD_INT 32
8593: PUSH
8594: LD_INT 27
8596: PUSH
8597: LD_INT 33
8599: PUSH
8600: LD_INT 69
8602: PUSH
8603: LD_INT 39
8605: PUSH
8606: LD_INT 34
8608: PUSH
8609: LD_INT 40
8611: PUSH
8612: LD_INT 71
8614: PUSH
8615: LD_INT 23
8617: PUSH
8618: LD_INT 44
8620: PUSH
8621: LD_INT 48
8623: PUSH
8624: LD_INT 49
8626: PUSH
8627: LD_INT 50
8629: PUSH
8630: LD_INT 51
8632: PUSH
8633: LD_INT 52
8635: PUSH
8636: LD_INT 53
8638: PUSH
8639: LD_INT 54
8641: PUSH
8642: LD_INT 55
8644: PUSH
8645: LD_INT 56
8647: PUSH
8648: LD_INT 57
8650: PUSH
8651: LD_INT 58
8653: PUSH
8654: LD_INT 59
8656: PUSH
8657: LD_INT 63
8659: PUSH
8660: LD_INT 64
8662: PUSH
8663: LD_INT 65
8665: PUSH
8666: LD_INT 82
8668: PUSH
8669: LD_INT 83
8671: PUSH
8672: LD_INT 84
8674: PUSH
8675: LD_INT 85
8677: PUSH
8678: LD_INT 86
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: ST_TO_ADDR
8736: GO 8739
8738: POP
// if state > - 1 and state < 3 then
8739: LD_VAR 0 3
8743: PUSH
8744: LD_INT 1
8746: NEG
8747: GREATER
8748: PUSH
8749: LD_VAR 0 3
8753: PUSH
8754: LD_INT 3
8756: LESS
8757: AND
8758: IFFALSE 8815
// for i in result do
8760: LD_ADDR_VAR 0 5
8764: PUSH
8765: LD_VAR 0 4
8769: PUSH
8770: FOR_IN
8771: IFFALSE 8813
// if GetTech ( i , side ) <> state then
8773: LD_VAR 0 5
8777: PPUSH
8778: LD_VAR 0 1
8782: PPUSH
8783: CALL_OW 321
8787: PUSH
8788: LD_VAR 0 3
8792: NONEQUAL
8793: IFFALSE 8811
// result := result diff i ;
8795: LD_ADDR_VAR 0 4
8799: PUSH
8800: LD_VAR 0 4
8804: PUSH
8805: LD_VAR 0 5
8809: DIFF
8810: ST_TO_ADDR
8811: GO 8770
8813: POP
8814: POP
// end ;
8815: LD_VAR 0 4
8819: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8820: LD_INT 0
8822: PPUSH
8823: PPUSH
8824: PPUSH
// result := true ;
8825: LD_ADDR_VAR 0 3
8829: PUSH
8830: LD_INT 1
8832: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8833: LD_ADDR_VAR 0 5
8837: PUSH
8838: LD_VAR 0 2
8842: PPUSH
8843: CALL_OW 480
8847: ST_TO_ADDR
// if not tmp then
8848: LD_VAR 0 5
8852: NOT
8853: IFFALSE 8857
// exit ;
8855: GO 8906
// for i in tmp do
8857: LD_ADDR_VAR 0 4
8861: PUSH
8862: LD_VAR 0 5
8866: PUSH
8867: FOR_IN
8868: IFFALSE 8904
// if GetTech ( i , side ) <> state_researched then
8870: LD_VAR 0 4
8874: PPUSH
8875: LD_VAR 0 1
8879: PPUSH
8880: CALL_OW 321
8884: PUSH
8885: LD_INT 2
8887: NONEQUAL
8888: IFFALSE 8902
// begin result := false ;
8890: LD_ADDR_VAR 0 3
8894: PUSH
8895: LD_INT 0
8897: ST_TO_ADDR
// exit ;
8898: POP
8899: POP
8900: GO 8906
// end ;
8902: GO 8867
8904: POP
8905: POP
// end ;
8906: LD_VAR 0 3
8910: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
8911: LD_INT 0
8913: PPUSH
8914: PPUSH
8915: PPUSH
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
8920: PPUSH
8921: PPUSH
8922: PPUSH
8923: PPUSH
8924: PPUSH
8925: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
8926: LD_VAR 0 1
8930: NOT
8931: PUSH
8932: LD_VAR 0 1
8936: PPUSH
8937: CALL_OW 257
8941: PUSH
8942: LD_INT 9
8944: NONEQUAL
8945: OR
8946: IFFALSE 8950
// exit ;
8948: GO 9523
// side := GetSide ( unit ) ;
8950: LD_ADDR_VAR 0 9
8954: PUSH
8955: LD_VAR 0 1
8959: PPUSH
8960: CALL_OW 255
8964: ST_TO_ADDR
// tech_space := tech_spacanom ;
8965: LD_ADDR_VAR 0 12
8969: PUSH
8970: LD_INT 29
8972: ST_TO_ADDR
// tech_time := tech_taurad ;
8973: LD_ADDR_VAR 0 13
8977: PUSH
8978: LD_INT 28
8980: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
8981: LD_ADDR_VAR 0 11
8985: PUSH
8986: LD_VAR 0 1
8990: PPUSH
8991: CALL_OW 310
8995: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
8996: LD_VAR 0 11
9000: PPUSH
9001: CALL_OW 247
9005: PUSH
9006: LD_INT 2
9008: EQUAL
9009: IFFALSE 9013
// exit ;
9011: GO 9523
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9013: LD_ADDR_VAR 0 8
9017: PUSH
9018: LD_INT 81
9020: PUSH
9021: LD_VAR 0 9
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 3
9032: PUSH
9033: LD_INT 21
9035: PUSH
9036: LD_INT 3
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 69
9055: ST_TO_ADDR
// if not tmp then
9056: LD_VAR 0 8
9060: NOT
9061: IFFALSE 9065
// exit ;
9063: GO 9523
// if in_unit then
9065: LD_VAR 0 11
9069: IFFALSE 9093
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9071: LD_ADDR_VAR 0 10
9075: PUSH
9076: LD_VAR 0 8
9080: PPUSH
9081: LD_VAR 0 11
9085: PPUSH
9086: CALL_OW 74
9090: ST_TO_ADDR
9091: GO 9113
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9093: LD_ADDR_VAR 0 10
9097: PUSH
9098: LD_VAR 0 8
9102: PPUSH
9103: LD_VAR 0 1
9107: PPUSH
9108: CALL_OW 74
9112: ST_TO_ADDR
// if not enemy then
9113: LD_VAR 0 10
9117: NOT
9118: IFFALSE 9122
// exit ;
9120: GO 9523
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9122: LD_VAR 0 11
9126: PUSH
9127: LD_VAR 0 11
9131: PPUSH
9132: LD_VAR 0 10
9136: PPUSH
9137: CALL_OW 296
9141: PUSH
9142: LD_INT 13
9144: GREATER
9145: AND
9146: PUSH
9147: LD_VAR 0 1
9151: PPUSH
9152: LD_VAR 0 10
9156: PPUSH
9157: CALL_OW 296
9161: PUSH
9162: LD_INT 12
9164: GREATER
9165: OR
9166: IFFALSE 9170
// exit ;
9168: GO 9523
// missile := [ 1 ] ;
9170: LD_ADDR_VAR 0 14
9174: PUSH
9175: LD_INT 1
9177: PUSH
9178: EMPTY
9179: LIST
9180: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9181: LD_VAR 0 9
9185: PPUSH
9186: LD_VAR 0 12
9190: PPUSH
9191: CALL_OW 325
9195: IFFALSE 9224
// missile := Replace ( missile , missile + 1 , 2 ) ;
9197: LD_ADDR_VAR 0 14
9201: PUSH
9202: LD_VAR 0 14
9206: PPUSH
9207: LD_VAR 0 14
9211: PUSH
9212: LD_INT 1
9214: PLUS
9215: PPUSH
9216: LD_INT 2
9218: PPUSH
9219: CALL_OW 1
9223: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9224: LD_VAR 0 9
9228: PPUSH
9229: LD_VAR 0 13
9233: PPUSH
9234: CALL_OW 325
9238: PUSH
9239: LD_VAR 0 10
9243: PPUSH
9244: CALL_OW 255
9248: PPUSH
9249: LD_VAR 0 13
9253: PPUSH
9254: CALL_OW 325
9258: NOT
9259: AND
9260: IFFALSE 9289
// missile := Replace ( missile , missile + 1 , 3 ) ;
9262: LD_ADDR_VAR 0 14
9266: PUSH
9267: LD_VAR 0 14
9271: PPUSH
9272: LD_VAR 0 14
9276: PUSH
9277: LD_INT 1
9279: PLUS
9280: PPUSH
9281: LD_INT 3
9283: PPUSH
9284: CALL_OW 1
9288: ST_TO_ADDR
// if missile < 2 then
9289: LD_VAR 0 14
9293: PUSH
9294: LD_INT 2
9296: LESS
9297: IFFALSE 9301
// exit ;
9299: GO 9523
// x := GetX ( enemy ) ;
9301: LD_ADDR_VAR 0 4
9305: PUSH
9306: LD_VAR 0 10
9310: PPUSH
9311: CALL_OW 250
9315: ST_TO_ADDR
// y := GetY ( enemy ) ;
9316: LD_ADDR_VAR 0 5
9320: PUSH
9321: LD_VAR 0 10
9325: PPUSH
9326: CALL_OW 251
9330: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9331: LD_ADDR_VAR 0 6
9335: PUSH
9336: LD_VAR 0 4
9340: PUSH
9341: LD_INT 1
9343: NEG
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 12
9352: PLUS
9353: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9354: LD_ADDR_VAR 0 7
9358: PUSH
9359: LD_VAR 0 5
9363: PUSH
9364: LD_INT 1
9366: NEG
9367: PPUSH
9368: LD_INT 1
9370: PPUSH
9371: CALL_OW 12
9375: PLUS
9376: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9377: LD_VAR 0 6
9381: PPUSH
9382: LD_VAR 0 7
9386: PPUSH
9387: CALL_OW 488
9391: NOT
9392: IFFALSE 9414
// begin _x := x ;
9394: LD_ADDR_VAR 0 6
9398: PUSH
9399: LD_VAR 0 4
9403: ST_TO_ADDR
// _y := y ;
9404: LD_ADDR_VAR 0 7
9408: PUSH
9409: LD_VAR 0 5
9413: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9414: LD_ADDR_VAR 0 3
9418: PUSH
9419: LD_INT 1
9421: PPUSH
9422: LD_VAR 0 14
9426: PPUSH
9427: CALL_OW 12
9431: ST_TO_ADDR
// case i of 1 :
9432: LD_VAR 0 3
9436: PUSH
9437: LD_INT 1
9439: DOUBLE
9440: EQUAL
9441: IFTRUE 9445
9443: GO 9462
9445: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9446: LD_VAR 0 1
9450: PPUSH
9451: LD_VAR 0 10
9455: PPUSH
9456: CALL_OW 115
9460: GO 9523
9462: LD_INT 2
9464: DOUBLE
9465: EQUAL
9466: IFTRUE 9470
9468: GO 9492
9470: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9471: LD_VAR 0 1
9475: PPUSH
9476: LD_VAR 0 6
9480: PPUSH
9481: LD_VAR 0 7
9485: PPUSH
9486: CALL_OW 153
9490: GO 9523
9492: LD_INT 3
9494: DOUBLE
9495: EQUAL
9496: IFTRUE 9500
9498: GO 9522
9500: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9501: LD_VAR 0 1
9505: PPUSH
9506: LD_VAR 0 6
9510: PPUSH
9511: LD_VAR 0 7
9515: PPUSH
9516: CALL_OW 154
9520: GO 9523
9522: POP
// end ;
9523: LD_VAR 0 2
9527: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
// if not unit or not building then
9536: LD_VAR 0 1
9540: NOT
9541: PUSH
9542: LD_VAR 0 2
9546: NOT
9547: OR
9548: IFFALSE 9552
// exit ;
9550: GO 9710
// x := GetX ( building ) ;
9552: LD_ADDR_VAR 0 5
9556: PUSH
9557: LD_VAR 0 2
9561: PPUSH
9562: CALL_OW 250
9566: ST_TO_ADDR
// y := GetY ( building ) ;
9567: LD_ADDR_VAR 0 6
9571: PUSH
9572: LD_VAR 0 2
9576: PPUSH
9577: CALL_OW 251
9581: ST_TO_ADDR
// for i = 0 to 5 do
9582: LD_ADDR_VAR 0 4
9586: PUSH
9587: DOUBLE
9588: LD_INT 0
9590: DEC
9591: ST_TO_ADDR
9592: LD_INT 5
9594: PUSH
9595: FOR_TO
9596: IFFALSE 9708
// begin _x := ShiftX ( x , i , 3 ) ;
9598: LD_ADDR_VAR 0 7
9602: PUSH
9603: LD_VAR 0 5
9607: PPUSH
9608: LD_VAR 0 4
9612: PPUSH
9613: LD_INT 3
9615: PPUSH
9616: CALL_OW 272
9620: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9621: LD_ADDR_VAR 0 8
9625: PUSH
9626: LD_VAR 0 6
9630: PPUSH
9631: LD_VAR 0 4
9635: PPUSH
9636: LD_INT 3
9638: PPUSH
9639: CALL_OW 273
9643: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9644: LD_VAR 0 7
9648: PPUSH
9649: LD_VAR 0 8
9653: PPUSH
9654: CALL_OW 488
9658: NOT
9659: IFFALSE 9663
// continue ;
9661: GO 9595
// if HexInfo ( _x , _y ) = 0 then
9663: LD_VAR 0 7
9667: PPUSH
9668: LD_VAR 0 8
9672: PPUSH
9673: CALL_OW 428
9677: PUSH
9678: LD_INT 0
9680: EQUAL
9681: IFFALSE 9706
// begin ComMoveXY ( unit , _x , _y ) ;
9683: LD_VAR 0 1
9687: PPUSH
9688: LD_VAR 0 7
9692: PPUSH
9693: LD_VAR 0 8
9697: PPUSH
9698: CALL_OW 111
// exit ;
9702: POP
9703: POP
9704: GO 9710
// end ; end ;
9706: GO 9595
9708: POP
9709: POP
// end ;
9710: LD_VAR 0 3
9714: RET
// export function ScanBase ( side , base_area ) ; begin
9715: LD_INT 0
9717: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9718: LD_ADDR_VAR 0 3
9722: PUSH
9723: LD_VAR 0 2
9727: PPUSH
9728: LD_INT 81
9730: PUSH
9731: LD_VAR 0 1
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: PPUSH
9740: CALL_OW 70
9744: ST_TO_ADDR
// end ;
9745: LD_VAR 0 3
9749: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9750: LD_INT 0
9752: PPUSH
9753: PPUSH
9754: PPUSH
9755: PPUSH
// result := false ;
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: LD_INT 0
9763: ST_TO_ADDR
// side := GetSide ( unit ) ;
9764: LD_ADDR_VAR 0 3
9768: PUSH
9769: LD_VAR 0 1
9773: PPUSH
9774: CALL_OW 255
9778: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9779: LD_ADDR_VAR 0 4
9783: PUSH
9784: LD_VAR 0 1
9788: PPUSH
9789: CALL_OW 248
9793: ST_TO_ADDR
// case nat of 1 :
9794: LD_VAR 0 4
9798: PUSH
9799: LD_INT 1
9801: DOUBLE
9802: EQUAL
9803: IFTRUE 9807
9805: GO 9818
9807: POP
// tech := tech_lassight ; 2 :
9808: LD_ADDR_VAR 0 5
9812: PUSH
9813: LD_INT 12
9815: ST_TO_ADDR
9816: GO 9857
9818: LD_INT 2
9820: DOUBLE
9821: EQUAL
9822: IFTRUE 9826
9824: GO 9837
9826: POP
// tech := tech_mortar ; 3 :
9827: LD_ADDR_VAR 0 5
9831: PUSH
9832: LD_INT 41
9834: ST_TO_ADDR
9835: GO 9857
9837: LD_INT 3
9839: DOUBLE
9840: EQUAL
9841: IFTRUE 9845
9843: GO 9856
9845: POP
// tech := tech_bazooka ; end ;
9846: LD_ADDR_VAR 0 5
9850: PUSH
9851: LD_INT 44
9853: ST_TO_ADDR
9854: GO 9857
9856: POP
// if Researched ( side , tech ) then
9857: LD_VAR 0 3
9861: PPUSH
9862: LD_VAR 0 5
9866: PPUSH
9867: CALL_OW 325
9871: IFFALSE 9898
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9873: LD_ADDR_VAR 0 2
9877: PUSH
9878: LD_INT 5
9880: PUSH
9881: LD_INT 8
9883: PUSH
9884: LD_INT 9
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: PUSH
9892: LD_VAR 0 4
9896: ARRAY
9897: ST_TO_ADDR
// end ;
9898: LD_VAR 0 2
9902: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
9903: LD_INT 0
9905: PPUSH
9906: PPUSH
9907: PPUSH
// if not mines then
9908: LD_VAR 0 2
9912: NOT
9913: IFFALSE 9917
// exit ;
9915: GO 10061
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9917: LD_ADDR_VAR 0 5
9921: PUSH
9922: LD_INT 81
9924: PUSH
9925: LD_VAR 0 1
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 3
9936: PUSH
9937: LD_INT 21
9939: PUSH
9940: LD_INT 3
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PPUSH
9955: CALL_OW 69
9959: ST_TO_ADDR
// for i in mines do
9960: LD_ADDR_VAR 0 4
9964: PUSH
9965: LD_VAR 0 2
9969: PUSH
9970: FOR_IN
9971: IFFALSE 10059
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
9973: LD_VAR 0 4
9977: PUSH
9978: LD_INT 1
9980: ARRAY
9981: PPUSH
9982: LD_VAR 0 4
9986: PUSH
9987: LD_INT 2
9989: ARRAY
9990: PPUSH
9991: CALL_OW 458
9995: NOT
9996: IFFALSE 10000
// continue ;
9998: GO 9970
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10000: LD_VAR 0 4
10004: PUSH
10005: LD_INT 1
10007: ARRAY
10008: PPUSH
10009: LD_VAR 0 4
10013: PUSH
10014: LD_INT 2
10016: ARRAY
10017: PPUSH
10018: CALL_OW 428
10022: PUSH
10023: LD_VAR 0 5
10027: IN
10028: IFFALSE 10057
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10030: LD_VAR 0 4
10034: PUSH
10035: LD_INT 1
10037: ARRAY
10038: PPUSH
10039: LD_VAR 0 4
10043: PUSH
10044: LD_INT 2
10046: ARRAY
10047: PPUSH
10048: LD_VAR 0 1
10052: PPUSH
10053: CALL_OW 456
// end ;
10057: GO 9970
10059: POP
10060: POP
// end ;
10061: LD_VAR 0 3
10065: RET
// export function Count ( array ) ; var i ; begin
10066: LD_INT 0
10068: PPUSH
10069: PPUSH
// result := 0 ;
10070: LD_ADDR_VAR 0 2
10074: PUSH
10075: LD_INT 0
10077: ST_TO_ADDR
// for i in array do
10078: LD_ADDR_VAR 0 3
10082: PUSH
10083: LD_VAR 0 1
10087: PUSH
10088: FOR_IN
10089: IFFALSE 10113
// if i then
10091: LD_VAR 0 3
10095: IFFALSE 10111
// result := result + 1 ;
10097: LD_ADDR_VAR 0 2
10101: PUSH
10102: LD_VAR 0 2
10106: PUSH
10107: LD_INT 1
10109: PLUS
10110: ST_TO_ADDR
10111: GO 10088
10113: POP
10114: POP
// end ;
10115: LD_VAR 0 2
10119: RET
// export function IsEmpty ( building ) ; begin
10120: LD_INT 0
10122: PPUSH
// if not building then
10123: LD_VAR 0 1
10127: NOT
10128: IFFALSE 10132
// exit ;
10130: GO 10175
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10132: LD_ADDR_VAR 0 2
10136: PUSH
10137: LD_VAR 0 1
10141: PUSH
10142: LD_INT 22
10144: PUSH
10145: LD_VAR 0 1
10149: PPUSH
10150: CALL_OW 255
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 58
10161: PUSH
10162: EMPTY
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PPUSH
10169: CALL_OW 69
10173: IN
10174: ST_TO_ADDR
// end ;
10175: LD_VAR 0 2
10179: RET
// export function IsNotFull ( building ) ; begin
10180: LD_INT 0
10182: PPUSH
// if not building then
10183: LD_VAR 0 1
10187: NOT
10188: IFFALSE 10192
// exit ;
10190: GO 10211
// result := UnitsInside ( building ) < 6 ;
10192: LD_ADDR_VAR 0 2
10196: PUSH
10197: LD_VAR 0 1
10201: PPUSH
10202: CALL_OW 313
10206: PUSH
10207: LD_INT 6
10209: LESS
10210: ST_TO_ADDR
// end ;
10211: LD_VAR 0 2
10215: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10216: LD_INT 0
10218: PPUSH
10219: PPUSH
10220: PPUSH
10221: PPUSH
// tmp := [ ] ;
10222: LD_ADDR_VAR 0 3
10226: PUSH
10227: EMPTY
10228: ST_TO_ADDR
// list := [ ] ;
10229: LD_ADDR_VAR 0 5
10233: PUSH
10234: EMPTY
10235: ST_TO_ADDR
// for i = 16 to 25 do
10236: LD_ADDR_VAR 0 4
10240: PUSH
10241: DOUBLE
10242: LD_INT 16
10244: DEC
10245: ST_TO_ADDR
10246: LD_INT 25
10248: PUSH
10249: FOR_TO
10250: IFFALSE 10323
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10252: LD_ADDR_VAR 0 3
10256: PUSH
10257: LD_VAR 0 3
10261: PUSH
10262: LD_INT 22
10264: PUSH
10265: LD_VAR 0 1
10269: PPUSH
10270: CALL_OW 255
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 91
10281: PUSH
10282: LD_VAR 0 1
10286: PUSH
10287: LD_INT 6
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 30
10297: PUSH
10298: LD_VAR 0 4
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: PPUSH
10315: CALL_OW 69
10319: ADD
10320: ST_TO_ADDR
10321: GO 10249
10323: POP
10324: POP
// for i = 1 to tmp do
10325: LD_ADDR_VAR 0 4
10329: PUSH
10330: DOUBLE
10331: LD_INT 1
10333: DEC
10334: ST_TO_ADDR
10335: LD_VAR 0 3
10339: PUSH
10340: FOR_TO
10341: IFFALSE 10429
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10343: LD_ADDR_VAR 0 5
10347: PUSH
10348: LD_VAR 0 5
10352: PUSH
10353: LD_VAR 0 3
10357: PUSH
10358: LD_VAR 0 4
10362: ARRAY
10363: PPUSH
10364: CALL_OW 266
10368: PUSH
10369: LD_VAR 0 3
10373: PUSH
10374: LD_VAR 0 4
10378: ARRAY
10379: PPUSH
10380: CALL_OW 250
10384: PUSH
10385: LD_VAR 0 3
10389: PUSH
10390: LD_VAR 0 4
10394: ARRAY
10395: PPUSH
10396: CALL_OW 251
10400: PUSH
10401: LD_VAR 0 3
10405: PUSH
10406: LD_VAR 0 4
10410: ARRAY
10411: PPUSH
10412: CALL_OW 254
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PUSH
10423: EMPTY
10424: LIST
10425: ADD
10426: ST_TO_ADDR
10427: GO 10340
10429: POP
10430: POP
// result := list ;
10431: LD_ADDR_VAR 0 2
10435: PUSH
10436: LD_VAR 0 5
10440: ST_TO_ADDR
// end ;
10441: LD_VAR 0 2
10445: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10446: LD_INT 0
10448: PPUSH
10449: PPUSH
10450: PPUSH
10451: PPUSH
10452: PPUSH
10453: PPUSH
10454: PPUSH
// if not factory then
10455: LD_VAR 0 1
10459: NOT
10460: IFFALSE 10464
// exit ;
10462: GO 11057
// if control = control_apeman then
10464: LD_VAR 0 4
10468: PUSH
10469: LD_INT 5
10471: EQUAL
10472: IFFALSE 10581
// begin tmp := UnitsInside ( factory ) ;
10474: LD_ADDR_VAR 0 8
10478: PUSH
10479: LD_VAR 0 1
10483: PPUSH
10484: CALL_OW 313
10488: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10489: LD_VAR 0 8
10493: PPUSH
10494: LD_INT 25
10496: PUSH
10497: LD_INT 12
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PPUSH
10504: CALL_OW 72
10508: NOT
10509: IFFALSE 10519
// control := control_manual ;
10511: LD_ADDR_VAR 0 4
10515: PUSH
10516: LD_INT 1
10518: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10519: LD_ADDR_VAR 0 8
10523: PUSH
10524: LD_VAR 0 1
10528: PPUSH
10529: CALL 10216 0 1
10533: ST_TO_ADDR
// if tmp then
10534: LD_VAR 0 8
10538: IFFALSE 10581
// begin for i in tmp do
10540: LD_ADDR_VAR 0 7
10544: PUSH
10545: LD_VAR 0 8
10549: PUSH
10550: FOR_IN
10551: IFFALSE 10579
// if i [ 1 ] = b_ext_radio then
10553: LD_VAR 0 7
10557: PUSH
10558: LD_INT 1
10560: ARRAY
10561: PUSH
10562: LD_INT 22
10564: EQUAL
10565: IFFALSE 10577
// begin control := control_remote ;
10567: LD_ADDR_VAR 0 4
10571: PUSH
10572: LD_INT 2
10574: ST_TO_ADDR
// break ;
10575: GO 10579
// end ;
10577: GO 10550
10579: POP
10580: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10581: LD_VAR 0 1
10585: PPUSH
10586: LD_VAR 0 2
10590: PPUSH
10591: LD_VAR 0 3
10595: PPUSH
10596: LD_VAR 0 4
10600: PPUSH
10601: LD_VAR 0 5
10605: PPUSH
10606: CALL_OW 448
10610: IFFALSE 10645
// begin result := [ chassis , engine , control , weapon ] ;
10612: LD_ADDR_VAR 0 6
10616: PUSH
10617: LD_VAR 0 2
10621: PUSH
10622: LD_VAR 0 3
10626: PUSH
10627: LD_VAR 0 4
10631: PUSH
10632: LD_VAR 0 5
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: ST_TO_ADDR
// exit ;
10643: GO 11057
// end ; _chassis := AvailableChassisList ( factory ) ;
10645: LD_ADDR_VAR 0 9
10649: PUSH
10650: LD_VAR 0 1
10654: PPUSH
10655: CALL_OW 475
10659: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10660: LD_ADDR_VAR 0 11
10664: PUSH
10665: LD_VAR 0 1
10669: PPUSH
10670: CALL_OW 476
10674: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10675: LD_ADDR_VAR 0 12
10679: PUSH
10680: LD_VAR 0 1
10684: PPUSH
10685: CALL_OW 477
10689: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10690: LD_ADDR_VAR 0 10
10694: PUSH
10695: LD_VAR 0 1
10699: PPUSH
10700: CALL_OW 478
10704: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10705: LD_VAR 0 9
10709: NOT
10710: PUSH
10711: LD_VAR 0 11
10715: NOT
10716: OR
10717: PUSH
10718: LD_VAR 0 12
10722: NOT
10723: OR
10724: PUSH
10725: LD_VAR 0 10
10729: NOT
10730: OR
10731: IFFALSE 10766
// begin result := [ chassis , engine , control , weapon ] ;
10733: LD_ADDR_VAR 0 6
10737: PUSH
10738: LD_VAR 0 2
10742: PUSH
10743: LD_VAR 0 3
10747: PUSH
10748: LD_VAR 0 4
10752: PUSH
10753: LD_VAR 0 5
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: ST_TO_ADDR
// exit ;
10764: GO 11057
// end ; if not chassis in _chassis then
10766: LD_VAR 0 2
10770: PUSH
10771: LD_VAR 0 9
10775: IN
10776: NOT
10777: IFFALSE 10803
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10779: LD_ADDR_VAR 0 2
10783: PUSH
10784: LD_VAR 0 9
10788: PUSH
10789: LD_INT 1
10791: PPUSH
10792: LD_VAR 0 9
10796: PPUSH
10797: CALL_OW 12
10801: ARRAY
10802: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10803: LD_VAR 0 2
10807: PPUSH
10808: LD_VAR 0 3
10812: PPUSH
10813: CALL 11062 0 2
10817: NOT
10818: IFFALSE 10877
// repeat engine := _engine [ 1 ] ;
10820: LD_ADDR_VAR 0 3
10824: PUSH
10825: LD_VAR 0 11
10829: PUSH
10830: LD_INT 1
10832: ARRAY
10833: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10834: LD_ADDR_VAR 0 11
10838: PUSH
10839: LD_VAR 0 11
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: CALL_OW 3
10851: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10852: LD_VAR 0 2
10856: PPUSH
10857: LD_VAR 0 3
10861: PPUSH
10862: CALL 11062 0 2
10866: PUSH
10867: LD_VAR 0 11
10871: PUSH
10872: EMPTY
10873: EQUAL
10874: OR
10875: IFFALSE 10820
// if not control in _control then
10877: LD_VAR 0 4
10881: PUSH
10882: LD_VAR 0 12
10886: IN
10887: NOT
10888: IFFALSE 10914
// control := _control [ rand ( 1 , _control ) ] ;
10890: LD_ADDR_VAR 0 4
10894: PUSH
10895: LD_VAR 0 12
10899: PUSH
10900: LD_INT 1
10902: PPUSH
10903: LD_VAR 0 12
10907: PPUSH
10908: CALL_OW 12
10912: ARRAY
10913: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
10914: LD_VAR 0 2
10918: PPUSH
10919: LD_VAR 0 5
10923: PPUSH
10924: CALL 11282 0 2
10928: NOT
10929: IFFALSE 10988
// repeat weapon := _weapon [ 1 ] ;
10931: LD_ADDR_VAR 0 5
10935: PUSH
10936: LD_VAR 0 10
10940: PUSH
10941: LD_INT 1
10943: ARRAY
10944: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
10945: LD_ADDR_VAR 0 10
10949: PUSH
10950: LD_VAR 0 10
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 3
10962: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
10963: LD_VAR 0 2
10967: PPUSH
10968: LD_VAR 0 5
10972: PPUSH
10973: CALL 11282 0 2
10977: PUSH
10978: LD_VAR 0 10
10982: PUSH
10983: EMPTY
10984: EQUAL
10985: OR
10986: IFFALSE 10931
// result := [ ] ;
10988: LD_ADDR_VAR 0 6
10992: PUSH
10993: EMPTY
10994: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10995: LD_VAR 0 1
10999: PPUSH
11000: LD_VAR 0 2
11004: PPUSH
11005: LD_VAR 0 3
11009: PPUSH
11010: LD_VAR 0 4
11014: PPUSH
11015: LD_VAR 0 5
11019: PPUSH
11020: CALL_OW 448
11024: IFFALSE 11057
// result := [ chassis , engine , control , weapon ] ;
11026: LD_ADDR_VAR 0 6
11030: PUSH
11031: LD_VAR 0 2
11035: PUSH
11036: LD_VAR 0 3
11040: PUSH
11041: LD_VAR 0 4
11045: PUSH
11046: LD_VAR 0 5
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: ST_TO_ADDR
// end ;
11057: LD_VAR 0 6
11061: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11062: LD_INT 0
11064: PPUSH
// if not chassis or not engine then
11065: LD_VAR 0 1
11069: NOT
11070: PUSH
11071: LD_VAR 0 2
11075: NOT
11076: OR
11077: IFFALSE 11081
// exit ;
11079: GO 11277
// case engine of engine_solar :
11081: LD_VAR 0 2
11085: PUSH
11086: LD_INT 2
11088: DOUBLE
11089: EQUAL
11090: IFTRUE 11094
11092: GO 11132
11094: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11095: LD_ADDR_VAR 0 3
11099: PUSH
11100: LD_INT 11
11102: PUSH
11103: LD_INT 12
11105: PUSH
11106: LD_INT 13
11108: PUSH
11109: LD_INT 14
11111: PUSH
11112: LD_INT 1
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: LD_INT 3
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: ST_TO_ADDR
11130: GO 11261
11132: LD_INT 1
11134: DOUBLE
11135: EQUAL
11136: IFTRUE 11140
11138: GO 11202
11140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11141: LD_ADDR_VAR 0 3
11145: PUSH
11146: LD_INT 11
11148: PUSH
11149: LD_INT 12
11151: PUSH
11152: LD_INT 13
11154: PUSH
11155: LD_INT 14
11157: PUSH
11158: LD_INT 1
11160: PUSH
11161: LD_INT 2
11163: PUSH
11164: LD_INT 3
11166: PUSH
11167: LD_INT 4
11169: PUSH
11170: LD_INT 5
11172: PUSH
11173: LD_INT 21
11175: PUSH
11176: LD_INT 23
11178: PUSH
11179: LD_INT 22
11181: PUSH
11182: LD_INT 24
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: ST_TO_ADDR
11200: GO 11261
11202: LD_INT 3
11204: DOUBLE
11205: EQUAL
11206: IFTRUE 11210
11208: GO 11260
11210: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11211: LD_ADDR_VAR 0 3
11215: PUSH
11216: LD_INT 13
11218: PUSH
11219: LD_INT 14
11221: PUSH
11222: LD_INT 2
11224: PUSH
11225: LD_INT 3
11227: PUSH
11228: LD_INT 4
11230: PUSH
11231: LD_INT 5
11233: PUSH
11234: LD_INT 21
11236: PUSH
11237: LD_INT 22
11239: PUSH
11240: LD_INT 23
11242: PUSH
11243: LD_INT 24
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: ST_TO_ADDR
11258: GO 11261
11260: POP
// result := ( chassis in result ) ;
11261: LD_ADDR_VAR 0 3
11265: PUSH
11266: LD_VAR 0 1
11270: PUSH
11271: LD_VAR 0 3
11275: IN
11276: ST_TO_ADDR
// end ;
11277: LD_VAR 0 3
11281: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11282: LD_INT 0
11284: PPUSH
// if not chassis or not weapon then
11285: LD_VAR 0 1
11289: NOT
11290: PUSH
11291: LD_VAR 0 2
11295: NOT
11296: OR
11297: IFFALSE 11301
// exit ;
11299: GO 12363
// case weapon of us_machine_gun :
11301: LD_VAR 0 2
11305: PUSH
11306: LD_INT 2
11308: DOUBLE
11309: EQUAL
11310: IFTRUE 11314
11312: GO 11344
11314: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11315: LD_ADDR_VAR 0 3
11319: PUSH
11320: LD_INT 1
11322: PUSH
11323: LD_INT 2
11325: PUSH
11326: LD_INT 3
11328: PUSH
11329: LD_INT 4
11331: PUSH
11332: LD_INT 5
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: ST_TO_ADDR
11342: GO 12347
11344: LD_INT 3
11346: DOUBLE
11347: EQUAL
11348: IFTRUE 11352
11350: GO 11382
11352: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11353: LD_ADDR_VAR 0 3
11357: PUSH
11358: LD_INT 1
11360: PUSH
11361: LD_INT 2
11363: PUSH
11364: LD_INT 3
11366: PUSH
11367: LD_INT 4
11369: PUSH
11370: LD_INT 5
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: ST_TO_ADDR
11380: GO 12347
11382: LD_INT 11
11384: DOUBLE
11385: EQUAL
11386: IFTRUE 11390
11388: GO 11420
11390: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11391: LD_ADDR_VAR 0 3
11395: PUSH
11396: LD_INT 1
11398: PUSH
11399: LD_INT 2
11401: PUSH
11402: LD_INT 3
11404: PUSH
11405: LD_INT 4
11407: PUSH
11408: LD_INT 5
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: ST_TO_ADDR
11418: GO 12347
11420: LD_INT 4
11422: DOUBLE
11423: EQUAL
11424: IFTRUE 11428
11426: GO 11454
11428: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11429: LD_ADDR_VAR 0 3
11433: PUSH
11434: LD_INT 2
11436: PUSH
11437: LD_INT 3
11439: PUSH
11440: LD_INT 4
11442: PUSH
11443: LD_INT 5
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: ST_TO_ADDR
11452: GO 12347
11454: LD_INT 5
11456: DOUBLE
11457: EQUAL
11458: IFTRUE 11462
11460: GO 11488
11462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11463: LD_ADDR_VAR 0 3
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 4
11476: PUSH
11477: LD_INT 5
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: ST_TO_ADDR
11486: GO 12347
11488: LD_INT 9
11490: DOUBLE
11491: EQUAL
11492: IFTRUE 11496
11494: GO 11522
11496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11497: LD_ADDR_VAR 0 3
11501: PUSH
11502: LD_INT 2
11504: PUSH
11505: LD_INT 3
11507: PUSH
11508: LD_INT 4
11510: PUSH
11511: LD_INT 5
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: ST_TO_ADDR
11520: GO 12347
11522: LD_INT 7
11524: DOUBLE
11525: EQUAL
11526: IFTRUE 11530
11528: GO 11556
11530: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11531: LD_ADDR_VAR 0 3
11535: PUSH
11536: LD_INT 2
11538: PUSH
11539: LD_INT 3
11541: PUSH
11542: LD_INT 4
11544: PUSH
11545: LD_INT 5
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: ST_TO_ADDR
11554: GO 12347
11556: LD_INT 12
11558: DOUBLE
11559: EQUAL
11560: IFTRUE 11564
11562: GO 11590
11564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11565: LD_ADDR_VAR 0 3
11569: PUSH
11570: LD_INT 2
11572: PUSH
11573: LD_INT 3
11575: PUSH
11576: LD_INT 4
11578: PUSH
11579: LD_INT 5
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: ST_TO_ADDR
11588: GO 12347
11590: LD_INT 13
11592: DOUBLE
11593: EQUAL
11594: IFTRUE 11598
11596: GO 11624
11598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11599: LD_ADDR_VAR 0 3
11603: PUSH
11604: LD_INT 2
11606: PUSH
11607: LD_INT 3
11609: PUSH
11610: LD_INT 4
11612: PUSH
11613: LD_INT 5
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: ST_TO_ADDR
11622: GO 12347
11624: LD_INT 14
11626: DOUBLE
11627: EQUAL
11628: IFTRUE 11632
11630: GO 11650
11632: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11633: LD_ADDR_VAR 0 3
11637: PUSH
11638: LD_INT 4
11640: PUSH
11641: LD_INT 5
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: ST_TO_ADDR
11648: GO 12347
11650: LD_INT 6
11652: DOUBLE
11653: EQUAL
11654: IFTRUE 11658
11656: GO 11676
11658: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11659: LD_ADDR_VAR 0 3
11663: PUSH
11664: LD_INT 4
11666: PUSH
11667: LD_INT 5
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: ST_TO_ADDR
11674: GO 12347
11676: LD_INT 10
11678: DOUBLE
11679: EQUAL
11680: IFTRUE 11684
11682: GO 11702
11684: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11685: LD_ADDR_VAR 0 3
11689: PUSH
11690: LD_INT 4
11692: PUSH
11693: LD_INT 5
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: ST_TO_ADDR
11700: GO 12347
11702: LD_INT 22
11704: DOUBLE
11705: EQUAL
11706: IFTRUE 11710
11708: GO 11736
11710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11711: LD_ADDR_VAR 0 3
11715: PUSH
11716: LD_INT 11
11718: PUSH
11719: LD_INT 12
11721: PUSH
11722: LD_INT 13
11724: PUSH
11725: LD_INT 14
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: ST_TO_ADDR
11734: GO 12347
11736: LD_INT 23
11738: DOUBLE
11739: EQUAL
11740: IFTRUE 11744
11742: GO 11770
11744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11745: LD_ADDR_VAR 0 3
11749: PUSH
11750: LD_INT 11
11752: PUSH
11753: LD_INT 12
11755: PUSH
11756: LD_INT 13
11758: PUSH
11759: LD_INT 14
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: ST_TO_ADDR
11768: GO 12347
11770: LD_INT 24
11772: DOUBLE
11773: EQUAL
11774: IFTRUE 11778
11776: GO 11804
11778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11779: LD_ADDR_VAR 0 3
11783: PUSH
11784: LD_INT 11
11786: PUSH
11787: LD_INT 12
11789: PUSH
11790: LD_INT 13
11792: PUSH
11793: LD_INT 14
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: ST_TO_ADDR
11802: GO 12347
11804: LD_INT 30
11806: DOUBLE
11807: EQUAL
11808: IFTRUE 11812
11810: GO 11838
11812: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11813: LD_ADDR_VAR 0 3
11817: PUSH
11818: LD_INT 11
11820: PUSH
11821: LD_INT 12
11823: PUSH
11824: LD_INT 13
11826: PUSH
11827: LD_INT 14
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: ST_TO_ADDR
11836: GO 12347
11838: LD_INT 25
11840: DOUBLE
11841: EQUAL
11842: IFTRUE 11846
11844: GO 11864
11846: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11847: LD_ADDR_VAR 0 3
11851: PUSH
11852: LD_INT 13
11854: PUSH
11855: LD_INT 14
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: ST_TO_ADDR
11862: GO 12347
11864: LD_INT 27
11866: DOUBLE
11867: EQUAL
11868: IFTRUE 11872
11870: GO 11890
11872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
11873: LD_ADDR_VAR 0 3
11877: PUSH
11878: LD_INT 13
11880: PUSH
11881: LD_INT 14
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: ST_TO_ADDR
11888: GO 12347
11890: LD_EXP 44
11894: DOUBLE
11895: EQUAL
11896: IFTRUE 11900
11898: GO 11926
11900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
11901: LD_ADDR_VAR 0 3
11905: PUSH
11906: LD_INT 11
11908: PUSH
11909: LD_INT 12
11911: PUSH
11912: LD_INT 13
11914: PUSH
11915: LD_INT 14
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: ST_TO_ADDR
11924: GO 12347
11926: LD_INT 28
11928: DOUBLE
11929: EQUAL
11930: IFTRUE 11934
11932: GO 11952
11934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
11935: LD_ADDR_VAR 0 3
11939: PUSH
11940: LD_INT 13
11942: PUSH
11943: LD_INT 14
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: ST_TO_ADDR
11950: GO 12347
11952: LD_INT 29
11954: DOUBLE
11955: EQUAL
11956: IFTRUE 11960
11958: GO 11978
11960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
11961: LD_ADDR_VAR 0 3
11965: PUSH
11966: LD_INT 13
11968: PUSH
11969: LD_INT 14
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: ST_TO_ADDR
11976: GO 12347
11978: LD_INT 31
11980: DOUBLE
11981: EQUAL
11982: IFTRUE 11986
11984: GO 12004
11986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
11987: LD_ADDR_VAR 0 3
11991: PUSH
11992: LD_INT 13
11994: PUSH
11995: LD_INT 14
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: ST_TO_ADDR
12002: GO 12347
12004: LD_INT 26
12006: DOUBLE
12007: EQUAL
12008: IFTRUE 12012
12010: GO 12030
12012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12013: LD_ADDR_VAR 0 3
12017: PUSH
12018: LD_INT 13
12020: PUSH
12021: LD_INT 14
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: ST_TO_ADDR
12028: GO 12347
12030: LD_INT 42
12032: DOUBLE
12033: EQUAL
12034: IFTRUE 12038
12036: GO 12064
12038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12039: LD_ADDR_VAR 0 3
12043: PUSH
12044: LD_INT 21
12046: PUSH
12047: LD_INT 22
12049: PUSH
12050: LD_INT 23
12052: PUSH
12053: LD_INT 24
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: ST_TO_ADDR
12062: GO 12347
12064: LD_INT 43
12066: DOUBLE
12067: EQUAL
12068: IFTRUE 12072
12070: GO 12098
12072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12073: LD_ADDR_VAR 0 3
12077: PUSH
12078: LD_INT 21
12080: PUSH
12081: LD_INT 22
12083: PUSH
12084: LD_INT 23
12086: PUSH
12087: LD_INT 24
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: ST_TO_ADDR
12096: GO 12347
12098: LD_INT 44
12100: DOUBLE
12101: EQUAL
12102: IFTRUE 12106
12104: GO 12132
12106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12107: LD_ADDR_VAR 0 3
12111: PUSH
12112: LD_INT 21
12114: PUSH
12115: LD_INT 22
12117: PUSH
12118: LD_INT 23
12120: PUSH
12121: LD_INT 24
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: ST_TO_ADDR
12130: GO 12347
12132: LD_INT 45
12134: DOUBLE
12135: EQUAL
12136: IFTRUE 12140
12138: GO 12166
12140: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12141: LD_ADDR_VAR 0 3
12145: PUSH
12146: LD_INT 21
12148: PUSH
12149: LD_INT 22
12151: PUSH
12152: LD_INT 23
12154: PUSH
12155: LD_INT 24
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: ST_TO_ADDR
12164: GO 12347
12166: LD_INT 49
12168: DOUBLE
12169: EQUAL
12170: IFTRUE 12174
12172: GO 12200
12174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12175: LD_ADDR_VAR 0 3
12179: PUSH
12180: LD_INT 21
12182: PUSH
12183: LD_INT 22
12185: PUSH
12186: LD_INT 23
12188: PUSH
12189: LD_INT 24
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: ST_TO_ADDR
12198: GO 12347
12200: LD_INT 51
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12234
12208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_INT 21
12216: PUSH
12217: LD_INT 22
12219: PUSH
12220: LD_INT 23
12222: PUSH
12223: LD_INT 24
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: ST_TO_ADDR
12232: GO 12347
12234: LD_INT 52
12236: DOUBLE
12237: EQUAL
12238: IFTRUE 12242
12240: GO 12268
12242: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12243: LD_ADDR_VAR 0 3
12247: PUSH
12248: LD_INT 21
12250: PUSH
12251: LD_INT 22
12253: PUSH
12254: LD_INT 23
12256: PUSH
12257: LD_INT 24
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: ST_TO_ADDR
12266: GO 12347
12268: LD_INT 53
12270: DOUBLE
12271: EQUAL
12272: IFTRUE 12276
12274: GO 12294
12276: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12277: LD_ADDR_VAR 0 3
12281: PUSH
12282: LD_INT 23
12284: PUSH
12285: LD_INT 24
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: ST_TO_ADDR
12292: GO 12347
12294: LD_INT 46
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12320
12302: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12303: LD_ADDR_VAR 0 3
12307: PUSH
12308: LD_INT 23
12310: PUSH
12311: LD_INT 24
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: ST_TO_ADDR
12318: GO 12347
12320: LD_INT 47
12322: DOUBLE
12323: EQUAL
12324: IFTRUE 12328
12326: GO 12346
12328: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12329: LD_ADDR_VAR 0 3
12333: PUSH
12334: LD_INT 23
12336: PUSH
12337: LD_INT 24
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: ST_TO_ADDR
12344: GO 12347
12346: POP
// result := ( chassis in result ) ;
12347: LD_ADDR_VAR 0 3
12351: PUSH
12352: LD_VAR 0 1
12356: PUSH
12357: LD_VAR 0 3
12361: IN
12362: ST_TO_ADDR
// end ;
12363: LD_VAR 0 3
12367: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12368: LD_INT 0
12370: PPUSH
12371: PPUSH
12372: PPUSH
12373: PPUSH
12374: PPUSH
12375: PPUSH
12376: PPUSH
// result := array ;
12377: LD_ADDR_VAR 0 5
12381: PUSH
12382: LD_VAR 0 1
12386: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12387: LD_VAR 0 1
12391: NOT
12392: PUSH
12393: LD_VAR 0 2
12397: NOT
12398: OR
12399: PUSH
12400: LD_VAR 0 3
12404: NOT
12405: OR
12406: PUSH
12407: LD_VAR 0 2
12411: PUSH
12412: LD_VAR 0 1
12416: GREATER
12417: OR
12418: PUSH
12419: LD_VAR 0 3
12423: PUSH
12424: LD_VAR 0 1
12428: GREATER
12429: OR
12430: IFFALSE 12434
// exit ;
12432: GO 12730
// if direction then
12434: LD_VAR 0 4
12438: IFFALSE 12502
// begin d := 1 ;
12440: LD_ADDR_VAR 0 9
12444: PUSH
12445: LD_INT 1
12447: ST_TO_ADDR
// if i_from > i_to then
12448: LD_VAR 0 2
12452: PUSH
12453: LD_VAR 0 3
12457: GREATER
12458: IFFALSE 12484
// length := ( array - i_from ) + i_to else
12460: LD_ADDR_VAR 0 11
12464: PUSH
12465: LD_VAR 0 1
12469: PUSH
12470: LD_VAR 0 2
12474: MINUS
12475: PUSH
12476: LD_VAR 0 3
12480: PLUS
12481: ST_TO_ADDR
12482: GO 12500
// length := i_to - i_from ;
12484: LD_ADDR_VAR 0 11
12488: PUSH
12489: LD_VAR 0 3
12493: PUSH
12494: LD_VAR 0 2
12498: MINUS
12499: ST_TO_ADDR
// end else
12500: GO 12563
// begin d := - 1 ;
12502: LD_ADDR_VAR 0 9
12506: PUSH
12507: LD_INT 1
12509: NEG
12510: ST_TO_ADDR
// if i_from > i_to then
12511: LD_VAR 0 2
12515: PUSH
12516: LD_VAR 0 3
12520: GREATER
12521: IFFALSE 12541
// length := i_from - i_to else
12523: LD_ADDR_VAR 0 11
12527: PUSH
12528: LD_VAR 0 2
12532: PUSH
12533: LD_VAR 0 3
12537: MINUS
12538: ST_TO_ADDR
12539: GO 12563
// length := ( array - i_to ) + i_from ;
12541: LD_ADDR_VAR 0 11
12545: PUSH
12546: LD_VAR 0 1
12550: PUSH
12551: LD_VAR 0 3
12555: MINUS
12556: PUSH
12557: LD_VAR 0 2
12561: PLUS
12562: ST_TO_ADDR
// end ; if not length then
12563: LD_VAR 0 11
12567: NOT
12568: IFFALSE 12572
// exit ;
12570: GO 12730
// tmp := array ;
12572: LD_ADDR_VAR 0 10
12576: PUSH
12577: LD_VAR 0 1
12581: ST_TO_ADDR
// for i = 1 to length do
12582: LD_ADDR_VAR 0 6
12586: PUSH
12587: DOUBLE
12588: LD_INT 1
12590: DEC
12591: ST_TO_ADDR
12592: LD_VAR 0 11
12596: PUSH
12597: FOR_TO
12598: IFFALSE 12718
// begin for j = 1 to array do
12600: LD_ADDR_VAR 0 7
12604: PUSH
12605: DOUBLE
12606: LD_INT 1
12608: DEC
12609: ST_TO_ADDR
12610: LD_VAR 0 1
12614: PUSH
12615: FOR_TO
12616: IFFALSE 12704
// begin k := j + d ;
12618: LD_ADDR_VAR 0 8
12622: PUSH
12623: LD_VAR 0 7
12627: PUSH
12628: LD_VAR 0 9
12632: PLUS
12633: ST_TO_ADDR
// if k > array then
12634: LD_VAR 0 8
12638: PUSH
12639: LD_VAR 0 1
12643: GREATER
12644: IFFALSE 12654
// k := 1 ;
12646: LD_ADDR_VAR 0 8
12650: PUSH
12651: LD_INT 1
12653: ST_TO_ADDR
// if not k then
12654: LD_VAR 0 8
12658: NOT
12659: IFFALSE 12671
// k := array ;
12661: LD_ADDR_VAR 0 8
12665: PUSH
12666: LD_VAR 0 1
12670: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12671: LD_ADDR_VAR 0 10
12675: PUSH
12676: LD_VAR 0 10
12680: PPUSH
12681: LD_VAR 0 8
12685: PPUSH
12686: LD_VAR 0 1
12690: PUSH
12691: LD_VAR 0 7
12695: ARRAY
12696: PPUSH
12697: CALL_OW 1
12701: ST_TO_ADDR
// end ;
12702: GO 12615
12704: POP
12705: POP
// array := tmp ;
12706: LD_ADDR_VAR 0 1
12710: PUSH
12711: LD_VAR 0 10
12715: ST_TO_ADDR
// end ;
12716: GO 12597
12718: POP
12719: POP
// result := array ;
12720: LD_ADDR_VAR 0 5
12724: PUSH
12725: LD_VAR 0 1
12729: ST_TO_ADDR
// end ;
12730: LD_VAR 0 5
12734: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12735: LD_INT 0
12737: PPUSH
12738: PPUSH
// result := 0 ;
12739: LD_ADDR_VAR 0 3
12743: PUSH
12744: LD_INT 0
12746: ST_TO_ADDR
// if not array or not value in array then
12747: LD_VAR 0 1
12751: NOT
12752: PUSH
12753: LD_VAR 0 2
12757: PUSH
12758: LD_VAR 0 1
12762: IN
12763: NOT
12764: OR
12765: IFFALSE 12769
// exit ;
12767: GO 12823
// for i = 1 to array do
12769: LD_ADDR_VAR 0 4
12773: PUSH
12774: DOUBLE
12775: LD_INT 1
12777: DEC
12778: ST_TO_ADDR
12779: LD_VAR 0 1
12783: PUSH
12784: FOR_TO
12785: IFFALSE 12821
// if value = array [ i ] then
12787: LD_VAR 0 2
12791: PUSH
12792: LD_VAR 0 1
12796: PUSH
12797: LD_VAR 0 4
12801: ARRAY
12802: EQUAL
12803: IFFALSE 12819
// begin result := i ;
12805: LD_ADDR_VAR 0 3
12809: PUSH
12810: LD_VAR 0 4
12814: ST_TO_ADDR
// exit ;
12815: POP
12816: POP
12817: GO 12823
// end ;
12819: GO 12784
12821: POP
12822: POP
// end ;
12823: LD_VAR 0 3
12827: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12828: LD_INT 0
12830: PPUSH
// vc_chassis := chassis ;
12831: LD_ADDR_OWVAR 37
12835: PUSH
12836: LD_VAR 0 1
12840: ST_TO_ADDR
// vc_engine := engine ;
12841: LD_ADDR_OWVAR 39
12845: PUSH
12846: LD_VAR 0 2
12850: ST_TO_ADDR
// vc_control := control ;
12851: LD_ADDR_OWVAR 38
12855: PUSH
12856: LD_VAR 0 3
12860: ST_TO_ADDR
// vc_weapon := weapon ;
12861: LD_ADDR_OWVAR 40
12865: PUSH
12866: LD_VAR 0 4
12870: ST_TO_ADDR
// vc_fuel_battery := fuel ;
12871: LD_ADDR_OWVAR 41
12875: PUSH
12876: LD_VAR 0 5
12880: ST_TO_ADDR
// end ;
12881: LD_VAR 0 6
12885: RET
// export function WantPlant ( unit ) ; var task ; begin
12886: LD_INT 0
12888: PPUSH
12889: PPUSH
// result := false ;
12890: LD_ADDR_VAR 0 2
12894: PUSH
12895: LD_INT 0
12897: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
12898: LD_ADDR_VAR 0 3
12902: PUSH
12903: LD_VAR 0 1
12907: PPUSH
12908: CALL_OW 437
12912: ST_TO_ADDR
// if task then
12913: LD_VAR 0 3
12917: IFFALSE 12945
// if task [ 1 ] [ 1 ] = p then
12919: LD_VAR 0 3
12923: PUSH
12924: LD_INT 1
12926: ARRAY
12927: PUSH
12928: LD_INT 1
12930: ARRAY
12931: PUSH
12932: LD_STRING p
12934: EQUAL
12935: IFFALSE 12945
// result := true ;
12937: LD_ADDR_VAR 0 2
12941: PUSH
12942: LD_INT 1
12944: ST_TO_ADDR
// end ;
12945: LD_VAR 0 2
12949: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
12950: LD_INT 0
12952: PPUSH
12953: PPUSH
12954: PPUSH
12955: PPUSH
// if pos < 1 then
12956: LD_VAR 0 2
12960: PUSH
12961: LD_INT 1
12963: LESS
12964: IFFALSE 12968
// exit ;
12966: GO 13271
// if pos = 1 then
12968: LD_VAR 0 2
12972: PUSH
12973: LD_INT 1
12975: EQUAL
12976: IFFALSE 13009
// result := Replace ( arr , pos [ 1 ] , value ) else
12978: LD_ADDR_VAR 0 4
12982: PUSH
12983: LD_VAR 0 1
12987: PPUSH
12988: LD_VAR 0 2
12992: PUSH
12993: LD_INT 1
12995: ARRAY
12996: PPUSH
12997: LD_VAR 0 3
13001: PPUSH
13002: CALL_OW 1
13006: ST_TO_ADDR
13007: GO 13271
// begin tmp := arr ;
13009: LD_ADDR_VAR 0 6
13013: PUSH
13014: LD_VAR 0 1
13018: ST_TO_ADDR
// s_arr := [ tmp ] ;
13019: LD_ADDR_VAR 0 7
13023: PUSH
13024: LD_VAR 0 6
13028: PUSH
13029: EMPTY
13030: LIST
13031: ST_TO_ADDR
// for i = 1 to pos - 1 do
13032: LD_ADDR_VAR 0 5
13036: PUSH
13037: DOUBLE
13038: LD_INT 1
13040: DEC
13041: ST_TO_ADDR
13042: LD_VAR 0 2
13046: PUSH
13047: LD_INT 1
13049: MINUS
13050: PUSH
13051: FOR_TO
13052: IFFALSE 13097
// begin tmp := tmp [ pos [ i ] ] ;
13054: LD_ADDR_VAR 0 6
13058: PUSH
13059: LD_VAR 0 6
13063: PUSH
13064: LD_VAR 0 2
13068: PUSH
13069: LD_VAR 0 5
13073: ARRAY
13074: ARRAY
13075: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13076: LD_ADDR_VAR 0 7
13080: PUSH
13081: LD_VAR 0 7
13085: PUSH
13086: LD_VAR 0 6
13090: PUSH
13091: EMPTY
13092: LIST
13093: ADD
13094: ST_TO_ADDR
// end ;
13095: GO 13051
13097: POP
13098: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13099: LD_ADDR_VAR 0 6
13103: PUSH
13104: LD_VAR 0 6
13108: PPUSH
13109: LD_VAR 0 2
13113: PUSH
13114: LD_VAR 0 2
13118: ARRAY
13119: PPUSH
13120: LD_VAR 0 3
13124: PPUSH
13125: CALL_OW 1
13129: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13130: LD_ADDR_VAR 0 7
13134: PUSH
13135: LD_VAR 0 7
13139: PPUSH
13140: LD_VAR 0 7
13144: PPUSH
13145: LD_VAR 0 6
13149: PPUSH
13150: CALL_OW 1
13154: ST_TO_ADDR
// for i = s_arr downto 2 do
13155: LD_ADDR_VAR 0 5
13159: PUSH
13160: DOUBLE
13161: LD_VAR 0 7
13165: INC
13166: ST_TO_ADDR
13167: LD_INT 2
13169: PUSH
13170: FOR_DOWNTO
13171: IFFALSE 13255
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13173: LD_ADDR_VAR 0 6
13177: PUSH
13178: LD_VAR 0 7
13182: PUSH
13183: LD_VAR 0 5
13187: PUSH
13188: LD_INT 1
13190: MINUS
13191: ARRAY
13192: PPUSH
13193: LD_VAR 0 2
13197: PUSH
13198: LD_VAR 0 5
13202: PUSH
13203: LD_INT 1
13205: MINUS
13206: ARRAY
13207: PPUSH
13208: LD_VAR 0 7
13212: PUSH
13213: LD_VAR 0 5
13217: ARRAY
13218: PPUSH
13219: CALL_OW 1
13223: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13224: LD_ADDR_VAR 0 7
13228: PUSH
13229: LD_VAR 0 7
13233: PPUSH
13234: LD_VAR 0 5
13238: PUSH
13239: LD_INT 1
13241: MINUS
13242: PPUSH
13243: LD_VAR 0 6
13247: PPUSH
13248: CALL_OW 1
13252: ST_TO_ADDR
// end ;
13253: GO 13170
13255: POP
13256: POP
// result := s_arr [ 1 ] ;
13257: LD_ADDR_VAR 0 4
13261: PUSH
13262: LD_VAR 0 7
13266: PUSH
13267: LD_INT 1
13269: ARRAY
13270: ST_TO_ADDR
// end ; end ;
13271: LD_VAR 0 4
13275: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13276: LD_INT 0
13278: PPUSH
13279: PPUSH
// if not list then
13280: LD_VAR 0 1
13284: NOT
13285: IFFALSE 13289
// exit ;
13287: GO 13380
// i := list [ pos1 ] ;
13289: LD_ADDR_VAR 0 5
13293: PUSH
13294: LD_VAR 0 1
13298: PUSH
13299: LD_VAR 0 2
13303: ARRAY
13304: ST_TO_ADDR
// if not i then
13305: LD_VAR 0 5
13309: NOT
13310: IFFALSE 13314
// exit ;
13312: GO 13380
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13314: LD_ADDR_VAR 0 1
13318: PUSH
13319: LD_VAR 0 1
13323: PPUSH
13324: LD_VAR 0 2
13328: PPUSH
13329: LD_VAR 0 1
13333: PUSH
13334: LD_VAR 0 3
13338: ARRAY
13339: PPUSH
13340: CALL_OW 1
13344: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13345: LD_ADDR_VAR 0 1
13349: PUSH
13350: LD_VAR 0 1
13354: PPUSH
13355: LD_VAR 0 3
13359: PPUSH
13360: LD_VAR 0 5
13364: PPUSH
13365: CALL_OW 1
13369: ST_TO_ADDR
// result := list ;
13370: LD_ADDR_VAR 0 4
13374: PUSH
13375: LD_VAR 0 1
13379: ST_TO_ADDR
// end ;
13380: LD_VAR 0 4
13384: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13385: LD_INT 0
13387: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13388: LD_ADDR_VAR 0 5
13392: PUSH
13393: LD_VAR 0 1
13397: PPUSH
13398: CALL_OW 250
13402: PPUSH
13403: LD_VAR 0 1
13407: PPUSH
13408: CALL_OW 251
13412: PPUSH
13413: LD_VAR 0 2
13417: PPUSH
13418: LD_VAR 0 3
13422: PPUSH
13423: LD_VAR 0 4
13427: PPUSH
13428: CALL 13438 0 5
13432: ST_TO_ADDR
// end ;
13433: LD_VAR 0 5
13437: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13438: LD_INT 0
13440: PPUSH
13441: PPUSH
13442: PPUSH
13443: PPUSH
// if not list then
13444: LD_VAR 0 3
13448: NOT
13449: IFFALSE 13453
// exit ;
13451: GO 13841
// result := [ ] ;
13453: LD_ADDR_VAR 0 6
13457: PUSH
13458: EMPTY
13459: ST_TO_ADDR
// for i in list do
13460: LD_ADDR_VAR 0 7
13464: PUSH
13465: LD_VAR 0 3
13469: PUSH
13470: FOR_IN
13471: IFFALSE 13673
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13473: LD_ADDR_VAR 0 9
13477: PUSH
13478: LD_VAR 0 7
13482: PPUSH
13483: LD_VAR 0 1
13487: PPUSH
13488: LD_VAR 0 2
13492: PPUSH
13493: CALL_OW 297
13497: ST_TO_ADDR
// if not result then
13498: LD_VAR 0 6
13502: NOT
13503: IFFALSE 13529
// result := [ [ i , tmp ] ] else
13505: LD_ADDR_VAR 0 6
13509: PUSH
13510: LD_VAR 0 7
13514: PUSH
13515: LD_VAR 0 9
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: EMPTY
13525: LIST
13526: ST_TO_ADDR
13527: GO 13671
// begin if result [ result ] [ 2 ] < tmp then
13529: LD_VAR 0 6
13533: PUSH
13534: LD_VAR 0 6
13538: ARRAY
13539: PUSH
13540: LD_INT 2
13542: ARRAY
13543: PUSH
13544: LD_VAR 0 9
13548: LESS
13549: IFFALSE 13591
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13551: LD_ADDR_VAR 0 6
13555: PUSH
13556: LD_VAR 0 6
13560: PPUSH
13561: LD_VAR 0 6
13565: PUSH
13566: LD_INT 1
13568: PLUS
13569: PPUSH
13570: LD_VAR 0 7
13574: PUSH
13575: LD_VAR 0 9
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PPUSH
13584: CALL_OW 2
13588: ST_TO_ADDR
13589: GO 13671
// for j = 1 to result do
13591: LD_ADDR_VAR 0 8
13595: PUSH
13596: DOUBLE
13597: LD_INT 1
13599: DEC
13600: ST_TO_ADDR
13601: LD_VAR 0 6
13605: PUSH
13606: FOR_TO
13607: IFFALSE 13669
// begin if tmp < result [ j ] [ 2 ] then
13609: LD_VAR 0 9
13613: PUSH
13614: LD_VAR 0 6
13618: PUSH
13619: LD_VAR 0 8
13623: ARRAY
13624: PUSH
13625: LD_INT 2
13627: ARRAY
13628: LESS
13629: IFFALSE 13667
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13631: LD_ADDR_VAR 0 6
13635: PUSH
13636: LD_VAR 0 6
13640: PPUSH
13641: LD_VAR 0 8
13645: PPUSH
13646: LD_VAR 0 7
13650: PUSH
13651: LD_VAR 0 9
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PPUSH
13660: CALL_OW 2
13664: ST_TO_ADDR
// break ;
13665: GO 13669
// end ; end ;
13667: GO 13606
13669: POP
13670: POP
// end ; end ;
13671: GO 13470
13673: POP
13674: POP
// if result and not asc then
13675: LD_VAR 0 6
13679: PUSH
13680: LD_VAR 0 4
13684: NOT
13685: AND
13686: IFFALSE 13761
// begin tmp := result ;
13688: LD_ADDR_VAR 0 9
13692: PUSH
13693: LD_VAR 0 6
13697: ST_TO_ADDR
// for i = tmp downto 1 do
13698: LD_ADDR_VAR 0 7
13702: PUSH
13703: DOUBLE
13704: LD_VAR 0 9
13708: INC
13709: ST_TO_ADDR
13710: LD_INT 1
13712: PUSH
13713: FOR_DOWNTO
13714: IFFALSE 13759
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13716: LD_ADDR_VAR 0 6
13720: PUSH
13721: LD_VAR 0 6
13725: PPUSH
13726: LD_VAR 0 9
13730: PUSH
13731: LD_VAR 0 7
13735: MINUS
13736: PUSH
13737: LD_INT 1
13739: PLUS
13740: PPUSH
13741: LD_VAR 0 9
13745: PUSH
13746: LD_VAR 0 7
13750: ARRAY
13751: PPUSH
13752: CALL_OW 1
13756: ST_TO_ADDR
13757: GO 13713
13759: POP
13760: POP
// end ; tmp := [ ] ;
13761: LD_ADDR_VAR 0 9
13765: PUSH
13766: EMPTY
13767: ST_TO_ADDR
// if mode then
13768: LD_VAR 0 5
13772: IFFALSE 13841
// begin for i = 1 to result do
13774: LD_ADDR_VAR 0 7
13778: PUSH
13779: DOUBLE
13780: LD_INT 1
13782: DEC
13783: ST_TO_ADDR
13784: LD_VAR 0 6
13788: PUSH
13789: FOR_TO
13790: IFFALSE 13829
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13792: LD_ADDR_VAR 0 9
13796: PUSH
13797: LD_VAR 0 9
13801: PPUSH
13802: LD_VAR 0 7
13806: PPUSH
13807: LD_VAR 0 6
13811: PUSH
13812: LD_VAR 0 7
13816: ARRAY
13817: PUSH
13818: LD_INT 1
13820: ARRAY
13821: PPUSH
13822: CALL_OW 1
13826: ST_TO_ADDR
13827: GO 13789
13829: POP
13830: POP
// result := tmp ;
13831: LD_ADDR_VAR 0 6
13835: PUSH
13836: LD_VAR 0 9
13840: ST_TO_ADDR
// end ; end ;
13841: LD_VAR 0 6
13845: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13846: LD_INT 0
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13854: LD_ADDR_VAR 0 5
13858: PUSH
13859: LD_INT 0
13861: PUSH
13862: LD_INT 0
13864: PUSH
13865: LD_INT 0
13867: PUSH
13868: EMPTY
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: ST_TO_ADDR
// if not x or not y then
13876: LD_VAR 0 2
13880: NOT
13881: PUSH
13882: LD_VAR 0 3
13886: NOT
13887: OR
13888: IFFALSE 13892
// exit ;
13890: GO 15544
// if not range then
13892: LD_VAR 0 4
13896: NOT
13897: IFFALSE 13907
// range := 10 ;
13899: LD_ADDR_VAR 0 4
13903: PUSH
13904: LD_INT 10
13906: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13907: LD_ADDR_VAR 0 8
13911: PUSH
13912: LD_INT 81
13914: PUSH
13915: LD_VAR 0 1
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 92
13926: PUSH
13927: LD_VAR 0 2
13931: PUSH
13932: LD_VAR 0 3
13936: PUSH
13937: LD_VAR 0 4
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 3
13950: PUSH
13951: LD_INT 21
13953: PUSH
13954: LD_INT 3
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: LIST
13969: PPUSH
13970: CALL_OW 69
13974: ST_TO_ADDR
// if not tmp then
13975: LD_VAR 0 8
13979: NOT
13980: IFFALSE 13984
// exit ;
13982: GO 15544
// for i in tmp do
13984: LD_ADDR_VAR 0 6
13988: PUSH
13989: LD_VAR 0 8
13993: PUSH
13994: FOR_IN
13995: IFFALSE 15519
// begin points := [ 0 , 0 , 0 ] ;
13997: LD_ADDR_VAR 0 9
14001: PUSH
14002: LD_INT 0
14004: PUSH
14005: LD_INT 0
14007: PUSH
14008: LD_INT 0
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: ST_TO_ADDR
// bpoints := 1 ;
14016: LD_ADDR_VAR 0 10
14020: PUSH
14021: LD_INT 1
14023: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14024: LD_VAR 0 6
14028: PPUSH
14029: CALL_OW 247
14033: PUSH
14034: LD_INT 1
14036: DOUBLE
14037: EQUAL
14038: IFTRUE 14042
14040: GO 14620
14042: POP
// begin if GetClass ( i ) = 1 then
14043: LD_VAR 0 6
14047: PPUSH
14048: CALL_OW 257
14052: PUSH
14053: LD_INT 1
14055: EQUAL
14056: IFFALSE 14077
// points := [ 10 , 5 , 3 ] ;
14058: LD_ADDR_VAR 0 9
14062: PUSH
14063: LD_INT 10
14065: PUSH
14066: LD_INT 5
14068: PUSH
14069: LD_INT 3
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14077: LD_VAR 0 6
14081: PPUSH
14082: CALL_OW 257
14086: PUSH
14087: LD_INT 2
14089: PUSH
14090: LD_INT 3
14092: PUSH
14093: LD_INT 4
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: LIST
14100: IN
14101: IFFALSE 14122
// points := [ 3 , 2 , 1 ] ;
14103: LD_ADDR_VAR 0 9
14107: PUSH
14108: LD_INT 3
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 1
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14122: LD_VAR 0 6
14126: PPUSH
14127: CALL_OW 257
14131: PUSH
14132: LD_INT 5
14134: EQUAL
14135: IFFALSE 14156
// points := [ 130 , 5 , 2 ] ;
14137: LD_ADDR_VAR 0 9
14141: PUSH
14142: LD_INT 130
14144: PUSH
14145: LD_INT 5
14147: PUSH
14148: LD_INT 2
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14156: LD_VAR 0 6
14160: PPUSH
14161: CALL_OW 257
14165: PUSH
14166: LD_INT 8
14168: EQUAL
14169: IFFALSE 14190
// points := [ 35 , 35 , 30 ] ;
14171: LD_ADDR_VAR 0 9
14175: PUSH
14176: LD_INT 35
14178: PUSH
14179: LD_INT 35
14181: PUSH
14182: LD_INT 30
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14190: LD_VAR 0 6
14194: PPUSH
14195: CALL_OW 257
14199: PUSH
14200: LD_INT 9
14202: EQUAL
14203: IFFALSE 14224
// points := [ 20 , 55 , 40 ] ;
14205: LD_ADDR_VAR 0 9
14209: PUSH
14210: LD_INT 20
14212: PUSH
14213: LD_INT 55
14215: PUSH
14216: LD_INT 40
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14224: LD_VAR 0 6
14228: PPUSH
14229: CALL_OW 257
14233: PUSH
14234: LD_INT 12
14236: PUSH
14237: LD_INT 16
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: IN
14244: IFFALSE 14265
// points := [ 5 , 3 , 2 ] ;
14246: LD_ADDR_VAR 0 9
14250: PUSH
14251: LD_INT 5
14253: PUSH
14254: LD_INT 3
14256: PUSH
14257: LD_INT 2
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: LIST
14264: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14265: LD_VAR 0 6
14269: PPUSH
14270: CALL_OW 257
14274: PUSH
14275: LD_INT 17
14277: EQUAL
14278: IFFALSE 14299
// points := [ 100 , 50 , 75 ] ;
14280: LD_ADDR_VAR 0 9
14284: PUSH
14285: LD_INT 100
14287: PUSH
14288: LD_INT 50
14290: PUSH
14291: LD_INT 75
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14299: LD_VAR 0 6
14303: PPUSH
14304: CALL_OW 257
14308: PUSH
14309: LD_INT 15
14311: EQUAL
14312: IFFALSE 14333
// points := [ 10 , 5 , 3 ] ;
14314: LD_ADDR_VAR 0 9
14318: PUSH
14319: LD_INT 10
14321: PUSH
14322: LD_INT 5
14324: PUSH
14325: LD_INT 3
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14333: LD_VAR 0 6
14337: PPUSH
14338: CALL_OW 257
14342: PUSH
14343: LD_INT 14
14345: EQUAL
14346: IFFALSE 14367
// points := [ 10 , 0 , 0 ] ;
14348: LD_ADDR_VAR 0 9
14352: PUSH
14353: LD_INT 10
14355: PUSH
14356: LD_INT 0
14358: PUSH
14359: LD_INT 0
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14367: LD_VAR 0 6
14371: PPUSH
14372: CALL_OW 257
14376: PUSH
14377: LD_INT 11
14379: EQUAL
14380: IFFALSE 14401
// points := [ 30 , 10 , 5 ] ;
14382: LD_ADDR_VAR 0 9
14386: PUSH
14387: LD_INT 30
14389: PUSH
14390: LD_INT 10
14392: PUSH
14393: LD_INT 5
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: LIST
14400: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14401: LD_VAR 0 1
14405: PPUSH
14406: LD_INT 5
14408: PPUSH
14409: CALL_OW 321
14413: PUSH
14414: LD_INT 2
14416: EQUAL
14417: IFFALSE 14434
// bpoints := bpoints * 1.8 ;
14419: LD_ADDR_VAR 0 10
14423: PUSH
14424: LD_VAR 0 10
14428: PUSH
14429: LD_REAL  1.80000000000000E+0000
14432: MUL
14433: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14434: LD_VAR 0 6
14438: PPUSH
14439: CALL_OW 257
14443: PUSH
14444: LD_INT 1
14446: PUSH
14447: LD_INT 2
14449: PUSH
14450: LD_INT 3
14452: PUSH
14453: LD_INT 4
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: IN
14462: PUSH
14463: LD_VAR 0 1
14467: PPUSH
14468: LD_INT 51
14470: PPUSH
14471: CALL_OW 321
14475: PUSH
14476: LD_INT 2
14478: EQUAL
14479: AND
14480: IFFALSE 14497
// bpoints := bpoints * 1.2 ;
14482: LD_ADDR_VAR 0 10
14486: PUSH
14487: LD_VAR 0 10
14491: PUSH
14492: LD_REAL  1.20000000000000E+0000
14495: MUL
14496: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14497: LD_VAR 0 6
14501: PPUSH
14502: CALL_OW 257
14506: PUSH
14507: LD_INT 5
14509: PUSH
14510: LD_INT 7
14512: PUSH
14513: LD_INT 9
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: LIST
14520: IN
14521: PUSH
14522: LD_VAR 0 1
14526: PPUSH
14527: LD_INT 52
14529: PPUSH
14530: CALL_OW 321
14534: PUSH
14535: LD_INT 2
14537: EQUAL
14538: AND
14539: IFFALSE 14556
// bpoints := bpoints * 1.5 ;
14541: LD_ADDR_VAR 0 10
14545: PUSH
14546: LD_VAR 0 10
14550: PUSH
14551: LD_REAL  1.50000000000000E+0000
14554: MUL
14555: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14556: LD_VAR 0 1
14560: PPUSH
14561: LD_INT 66
14563: PPUSH
14564: CALL_OW 321
14568: PUSH
14569: LD_INT 2
14571: EQUAL
14572: IFFALSE 14589
// bpoints := bpoints * 1.1 ;
14574: LD_ADDR_VAR 0 10
14578: PUSH
14579: LD_VAR 0 10
14583: PUSH
14584: LD_REAL  1.10000000000000E+0000
14587: MUL
14588: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14589: LD_ADDR_VAR 0 10
14593: PUSH
14594: LD_VAR 0 10
14598: PUSH
14599: LD_VAR 0 6
14603: PPUSH
14604: LD_INT 1
14606: PPUSH
14607: CALL_OW 259
14611: PUSH
14612: LD_REAL  1.15000000000000E+0000
14615: MUL
14616: MUL
14617: ST_TO_ADDR
// end ; unit_vehicle :
14618: GO 15448
14620: LD_INT 2
14622: DOUBLE
14623: EQUAL
14624: IFTRUE 14628
14626: GO 15436
14628: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14629: LD_VAR 0 6
14633: PPUSH
14634: CALL_OW 264
14638: PUSH
14639: LD_INT 2
14641: PUSH
14642: LD_INT 42
14644: PUSH
14645: LD_INT 24
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: LIST
14652: IN
14653: IFFALSE 14674
// points := [ 25 , 5 , 3 ] ;
14655: LD_ADDR_VAR 0 9
14659: PUSH
14660: LD_INT 25
14662: PUSH
14663: LD_INT 5
14665: PUSH
14666: LD_INT 3
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14674: LD_VAR 0 6
14678: PPUSH
14679: CALL_OW 264
14683: PUSH
14684: LD_INT 4
14686: PUSH
14687: LD_INT 43
14689: PUSH
14690: LD_INT 25
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: IN
14698: IFFALSE 14719
// points := [ 40 , 15 , 5 ] ;
14700: LD_ADDR_VAR 0 9
14704: PUSH
14705: LD_INT 40
14707: PUSH
14708: LD_INT 15
14710: PUSH
14711: LD_INT 5
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14719: LD_VAR 0 6
14723: PPUSH
14724: CALL_OW 264
14728: PUSH
14729: LD_INT 3
14731: PUSH
14732: LD_INT 23
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: IN
14739: IFFALSE 14760
// points := [ 7 , 25 , 8 ] ;
14741: LD_ADDR_VAR 0 9
14745: PUSH
14746: LD_INT 7
14748: PUSH
14749: LD_INT 25
14751: PUSH
14752: LD_INT 8
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14760: LD_VAR 0 6
14764: PPUSH
14765: CALL_OW 264
14769: PUSH
14770: LD_INT 5
14772: PUSH
14773: LD_INT 27
14775: PUSH
14776: LD_INT 44
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: IN
14784: IFFALSE 14805
// points := [ 14 , 50 , 16 ] ;
14786: LD_ADDR_VAR 0 9
14790: PUSH
14791: LD_INT 14
14793: PUSH
14794: LD_INT 50
14796: PUSH
14797: LD_INT 16
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: LIST
14804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14805: LD_VAR 0 6
14809: PPUSH
14810: CALL_OW 264
14814: PUSH
14815: LD_INT 6
14817: PUSH
14818: LD_INT 46
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: IN
14825: IFFALSE 14846
// points := [ 32 , 120 , 70 ] ;
14827: LD_ADDR_VAR 0 9
14831: PUSH
14832: LD_INT 32
14834: PUSH
14835: LD_INT 120
14837: PUSH
14838: LD_INT 70
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: LIST
14845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
14846: LD_VAR 0 6
14850: PPUSH
14851: CALL_OW 264
14855: PUSH
14856: LD_INT 7
14858: PUSH
14859: LD_INT 28
14861: PUSH
14862: LD_INT 45
14864: PUSH
14865: LD_EXP 44
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: IN
14876: IFFALSE 14897
// points := [ 35 , 20 , 45 ] ;
14878: LD_ADDR_VAR 0 9
14882: PUSH
14883: LD_INT 35
14885: PUSH
14886: LD_INT 20
14888: PUSH
14889: LD_INT 45
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
14897: LD_VAR 0 6
14901: PPUSH
14902: CALL_OW 264
14906: PUSH
14907: LD_INT 47
14909: PUSH
14910: EMPTY
14911: LIST
14912: IN
14913: IFFALSE 14934
// points := [ 67 , 45 , 75 ] ;
14915: LD_ADDR_VAR 0 9
14919: PUSH
14920: LD_INT 67
14922: PUSH
14923: LD_INT 45
14925: PUSH
14926: LD_INT 75
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: LIST
14933: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
14934: LD_VAR 0 6
14938: PPUSH
14939: CALL_OW 264
14943: PUSH
14944: LD_INT 26
14946: PUSH
14947: EMPTY
14948: LIST
14949: IN
14950: IFFALSE 14971
// points := [ 120 , 30 , 80 ] ;
14952: LD_ADDR_VAR 0 9
14956: PUSH
14957: LD_INT 120
14959: PUSH
14960: LD_INT 30
14962: PUSH
14963: LD_INT 80
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: LIST
14970: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
14971: LD_VAR 0 6
14975: PPUSH
14976: CALL_OW 264
14980: PUSH
14981: LD_INT 22
14983: PUSH
14984: EMPTY
14985: LIST
14986: IN
14987: IFFALSE 15008
// points := [ 40 , 1 , 1 ] ;
14989: LD_ADDR_VAR 0 9
14993: PUSH
14994: LD_INT 40
14996: PUSH
14997: LD_INT 1
14999: PUSH
15000: LD_INT 1
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15008: LD_VAR 0 6
15012: PPUSH
15013: CALL_OW 264
15017: PUSH
15018: LD_INT 29
15020: PUSH
15021: EMPTY
15022: LIST
15023: IN
15024: IFFALSE 15045
// points := [ 70 , 200 , 400 ] ;
15026: LD_ADDR_VAR 0 9
15030: PUSH
15031: LD_INT 70
15033: PUSH
15034: LD_INT 200
15036: PUSH
15037: LD_INT 400
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: LIST
15044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15045: LD_VAR 0 6
15049: PPUSH
15050: CALL_OW 264
15054: PUSH
15055: LD_INT 14
15057: PUSH
15058: LD_INT 53
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: IN
15065: IFFALSE 15086
// points := [ 40 , 10 , 20 ] ;
15067: LD_ADDR_VAR 0 9
15071: PUSH
15072: LD_INT 40
15074: PUSH
15075: LD_INT 10
15077: PUSH
15078: LD_INT 20
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: LIST
15085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15086: LD_VAR 0 6
15090: PPUSH
15091: CALL_OW 264
15095: PUSH
15096: LD_INT 9
15098: PUSH
15099: EMPTY
15100: LIST
15101: IN
15102: IFFALSE 15123
// points := [ 5 , 70 , 20 ] ;
15104: LD_ADDR_VAR 0 9
15108: PUSH
15109: LD_INT 5
15111: PUSH
15112: LD_INT 70
15114: PUSH
15115: LD_INT 20
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15123: LD_VAR 0 6
15127: PPUSH
15128: CALL_OW 264
15132: PUSH
15133: LD_INT 10
15135: PUSH
15136: EMPTY
15137: LIST
15138: IN
15139: IFFALSE 15160
// points := [ 35 , 110 , 70 ] ;
15141: LD_ADDR_VAR 0 9
15145: PUSH
15146: LD_INT 35
15148: PUSH
15149: LD_INT 110
15151: PUSH
15152: LD_INT 70
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: LIST
15159: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15160: LD_VAR 0 6
15164: PPUSH
15165: CALL_OW 265
15169: PUSH
15170: LD_INT 25
15172: EQUAL
15173: IFFALSE 15194
// points := [ 80 , 65 , 100 ] ;
15175: LD_ADDR_VAR 0 9
15179: PUSH
15180: LD_INT 80
15182: PUSH
15183: LD_INT 65
15185: PUSH
15186: LD_INT 100
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: LIST
15193: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15194: LD_VAR 0 6
15198: PPUSH
15199: CALL_OW 263
15203: PUSH
15204: LD_INT 1
15206: EQUAL
15207: IFFALSE 15242
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15209: LD_ADDR_VAR 0 10
15213: PUSH
15214: LD_VAR 0 10
15218: PUSH
15219: LD_VAR 0 6
15223: PPUSH
15224: CALL_OW 311
15228: PPUSH
15229: LD_INT 3
15231: PPUSH
15232: CALL_OW 259
15236: PUSH
15237: LD_INT 4
15239: MUL
15240: MUL
15241: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15242: LD_VAR 0 6
15246: PPUSH
15247: CALL_OW 263
15251: PUSH
15252: LD_INT 2
15254: EQUAL
15255: IFFALSE 15306
// begin j := IsControledBy ( i ) ;
15257: LD_ADDR_VAR 0 7
15261: PUSH
15262: LD_VAR 0 6
15266: PPUSH
15267: CALL_OW 312
15271: ST_TO_ADDR
// if j then
15272: LD_VAR 0 7
15276: IFFALSE 15306
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15278: LD_ADDR_VAR 0 10
15282: PUSH
15283: LD_VAR 0 10
15287: PUSH
15288: LD_VAR 0 7
15292: PPUSH
15293: LD_INT 3
15295: PPUSH
15296: CALL_OW 259
15300: PUSH
15301: LD_INT 3
15303: MUL
15304: MUL
15305: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15306: LD_VAR 0 6
15310: PPUSH
15311: CALL_OW 264
15315: PUSH
15316: LD_INT 5
15318: PUSH
15319: LD_INT 6
15321: PUSH
15322: LD_INT 46
15324: PUSH
15325: LD_INT 44
15327: PUSH
15328: LD_INT 47
15330: PUSH
15331: LD_INT 45
15333: PUSH
15334: LD_INT 28
15336: PUSH
15337: LD_INT 7
15339: PUSH
15340: LD_INT 27
15342: PUSH
15343: LD_INT 29
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: IN
15358: PUSH
15359: LD_VAR 0 1
15363: PPUSH
15364: LD_INT 52
15366: PPUSH
15367: CALL_OW 321
15371: PUSH
15372: LD_INT 2
15374: EQUAL
15375: AND
15376: IFFALSE 15393
// bpoints := bpoints * 1.2 ;
15378: LD_ADDR_VAR 0 10
15382: PUSH
15383: LD_VAR 0 10
15387: PUSH
15388: LD_REAL  1.20000000000000E+0000
15391: MUL
15392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15393: LD_VAR 0 6
15397: PPUSH
15398: CALL_OW 264
15402: PUSH
15403: LD_INT 6
15405: PUSH
15406: LD_INT 46
15408: PUSH
15409: LD_INT 47
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: LIST
15416: IN
15417: IFFALSE 15434
// bpoints := bpoints * 1.2 ;
15419: LD_ADDR_VAR 0 10
15423: PUSH
15424: LD_VAR 0 10
15428: PUSH
15429: LD_REAL  1.20000000000000E+0000
15432: MUL
15433: ST_TO_ADDR
// end ; unit_building :
15434: GO 15448
15436: LD_INT 3
15438: DOUBLE
15439: EQUAL
15440: IFTRUE 15444
15442: GO 15447
15444: POP
// ; end ;
15445: GO 15448
15447: POP
// for j = 1 to 3 do
15448: LD_ADDR_VAR 0 7
15452: PUSH
15453: DOUBLE
15454: LD_INT 1
15456: DEC
15457: ST_TO_ADDR
15458: LD_INT 3
15460: PUSH
15461: FOR_TO
15462: IFFALSE 15515
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15464: LD_ADDR_VAR 0 5
15468: PUSH
15469: LD_VAR 0 5
15473: PPUSH
15474: LD_VAR 0 7
15478: PPUSH
15479: LD_VAR 0 5
15483: PUSH
15484: LD_VAR 0 7
15488: ARRAY
15489: PUSH
15490: LD_VAR 0 9
15494: PUSH
15495: LD_VAR 0 7
15499: ARRAY
15500: PUSH
15501: LD_VAR 0 10
15505: MUL
15506: PLUS
15507: PPUSH
15508: CALL_OW 1
15512: ST_TO_ADDR
15513: GO 15461
15515: POP
15516: POP
// end ;
15517: GO 13994
15519: POP
15520: POP
// result := Replace ( result , 4 , tmp ) ;
15521: LD_ADDR_VAR 0 5
15525: PUSH
15526: LD_VAR 0 5
15530: PPUSH
15531: LD_INT 4
15533: PPUSH
15534: LD_VAR 0 8
15538: PPUSH
15539: CALL_OW 1
15543: ST_TO_ADDR
// end ;
15544: LD_VAR 0 5
15548: RET
// export function DangerAtRange ( unit , range ) ; begin
15549: LD_INT 0
15551: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15552: LD_ADDR_VAR 0 3
15556: PUSH
15557: LD_VAR 0 1
15561: PPUSH
15562: CALL_OW 255
15566: PPUSH
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 250
15576: PPUSH
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 251
15586: PPUSH
15587: LD_VAR 0 2
15591: PPUSH
15592: CALL 13846 0 4
15596: ST_TO_ADDR
// end ;
15597: LD_VAR 0 3
15601: RET
// export function DangerInArea ( side , area ) ; begin
15602: LD_INT 0
15604: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_VAR 0 2
15614: PPUSH
15615: LD_INT 81
15617: PUSH
15618: LD_VAR 0 1
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PPUSH
15627: CALL_OW 70
15631: ST_TO_ADDR
// end ;
15632: LD_VAR 0 3
15636: RET
// export function IsExtension ( b ) ; begin
15637: LD_INT 0
15639: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15640: LD_ADDR_VAR 0 2
15644: PUSH
15645: LD_VAR 0 1
15649: PUSH
15650: LD_INT 23
15652: PUSH
15653: LD_INT 20
15655: PUSH
15656: LD_INT 22
15658: PUSH
15659: LD_INT 17
15661: PUSH
15662: LD_INT 24
15664: PUSH
15665: LD_INT 21
15667: PUSH
15668: LD_INT 19
15670: PUSH
15671: LD_INT 16
15673: PUSH
15674: LD_INT 25
15676: PUSH
15677: LD_INT 18
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: IN
15692: ST_TO_ADDR
// end ;
15693: LD_VAR 0 2
15697: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15698: LD_INT 0
15700: PPUSH
15701: PPUSH
15702: PPUSH
// result := [ ] ;
15703: LD_ADDR_VAR 0 4
15707: PUSH
15708: EMPTY
15709: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15710: LD_ADDR_VAR 0 5
15714: PUSH
15715: LD_VAR 0 2
15719: PPUSH
15720: LD_INT 21
15722: PUSH
15723: LD_INT 3
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PPUSH
15730: CALL_OW 70
15734: ST_TO_ADDR
// if not tmp then
15735: LD_VAR 0 5
15739: NOT
15740: IFFALSE 15744
// exit ;
15742: GO 15808
// if checkLink then
15744: LD_VAR 0 3
15748: IFFALSE 15798
// begin for i in tmp do
15750: LD_ADDR_VAR 0 6
15754: PUSH
15755: LD_VAR 0 5
15759: PUSH
15760: FOR_IN
15761: IFFALSE 15796
// if GetBase ( i ) <> base then
15763: LD_VAR 0 6
15767: PPUSH
15768: CALL_OW 274
15772: PUSH
15773: LD_VAR 0 1
15777: NONEQUAL
15778: IFFALSE 15794
// ComLinkToBase ( base , i ) ;
15780: LD_VAR 0 1
15784: PPUSH
15785: LD_VAR 0 6
15789: PPUSH
15790: CALL_OW 169
15794: GO 15760
15796: POP
15797: POP
// end ; result := tmp ;
15798: LD_ADDR_VAR 0 4
15802: PUSH
15803: LD_VAR 0 5
15807: ST_TO_ADDR
// end ;
15808: LD_VAR 0 4
15812: RET
// export function ComComplete ( units , b ) ; var i ; begin
15813: LD_INT 0
15815: PPUSH
15816: PPUSH
// if not units then
15817: LD_VAR 0 1
15821: NOT
15822: IFFALSE 15826
// exit ;
15824: GO 15916
// for i in units do
15826: LD_ADDR_VAR 0 4
15830: PUSH
15831: LD_VAR 0 1
15835: PUSH
15836: FOR_IN
15837: IFFALSE 15914
// if BuildingStatus ( b ) = bs_build then
15839: LD_VAR 0 2
15843: PPUSH
15844: CALL_OW 461
15848: PUSH
15849: LD_INT 1
15851: EQUAL
15852: IFFALSE 15912
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15854: LD_VAR 0 4
15858: PPUSH
15859: LD_STRING h
15861: PUSH
15862: LD_VAR 0 2
15866: PPUSH
15867: CALL_OW 250
15871: PUSH
15872: LD_VAR 0 2
15876: PPUSH
15877: CALL_OW 251
15881: PUSH
15882: LD_VAR 0 2
15886: PUSH
15887: LD_INT 0
15889: PUSH
15890: LD_INT 0
15892: PUSH
15893: LD_INT 0
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: PUSH
15905: EMPTY
15906: LIST
15907: PPUSH
15908: CALL_OW 446
15912: GO 15836
15914: POP
15915: POP
// end ;
15916: LD_VAR 0 3
15920: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
15921: LD_INT 0
15923: PPUSH
15924: PPUSH
15925: PPUSH
15926: PPUSH
15927: PPUSH
15928: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
15929: LD_VAR 0 1
15933: NOT
15934: PUSH
15935: LD_VAR 0 1
15939: PPUSH
15940: CALL_OW 263
15944: PUSH
15945: LD_INT 2
15947: NONEQUAL
15948: OR
15949: IFFALSE 15953
// exit ;
15951: GO 16269
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
15953: LD_ADDR_VAR 0 6
15957: PUSH
15958: LD_INT 22
15960: PUSH
15961: LD_VAR 0 1
15965: PPUSH
15966: CALL_OW 255
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 2
15977: PUSH
15978: LD_INT 30
15980: PUSH
15981: LD_INT 36
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 34
15990: PUSH
15991: LD_INT 31
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: LIST
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PPUSH
16007: CALL_OW 69
16011: ST_TO_ADDR
// if not tmp then
16012: LD_VAR 0 6
16016: NOT
16017: IFFALSE 16021
// exit ;
16019: GO 16269
// result := [ ] ;
16021: LD_ADDR_VAR 0 2
16025: PUSH
16026: EMPTY
16027: ST_TO_ADDR
// for i in tmp do
16028: LD_ADDR_VAR 0 3
16032: PUSH
16033: LD_VAR 0 6
16037: PUSH
16038: FOR_IN
16039: IFFALSE 16110
// begin t := UnitsInside ( i ) ;
16041: LD_ADDR_VAR 0 4
16045: PUSH
16046: LD_VAR 0 3
16050: PPUSH
16051: CALL_OW 313
16055: ST_TO_ADDR
// if t then
16056: LD_VAR 0 4
16060: IFFALSE 16108
// for j in t do
16062: LD_ADDR_VAR 0 7
16066: PUSH
16067: LD_VAR 0 4
16071: PUSH
16072: FOR_IN
16073: IFFALSE 16106
// result := Replace ( result , result + 1 , j ) ;
16075: LD_ADDR_VAR 0 2
16079: PUSH
16080: LD_VAR 0 2
16084: PPUSH
16085: LD_VAR 0 2
16089: PUSH
16090: LD_INT 1
16092: PLUS
16093: PPUSH
16094: LD_VAR 0 7
16098: PPUSH
16099: CALL_OW 1
16103: ST_TO_ADDR
16104: GO 16072
16106: POP
16107: POP
// end ;
16108: GO 16038
16110: POP
16111: POP
// if not result then
16112: LD_VAR 0 2
16116: NOT
16117: IFFALSE 16121
// exit ;
16119: GO 16269
// mech := result [ 1 ] ;
16121: LD_ADDR_VAR 0 5
16125: PUSH
16126: LD_VAR 0 2
16130: PUSH
16131: LD_INT 1
16133: ARRAY
16134: ST_TO_ADDR
// if result > 1 then
16135: LD_VAR 0 2
16139: PUSH
16140: LD_INT 1
16142: GREATER
16143: IFFALSE 16255
// begin for i = 2 to result do
16145: LD_ADDR_VAR 0 3
16149: PUSH
16150: DOUBLE
16151: LD_INT 2
16153: DEC
16154: ST_TO_ADDR
16155: LD_VAR 0 2
16159: PUSH
16160: FOR_TO
16161: IFFALSE 16253
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16163: LD_ADDR_VAR 0 4
16167: PUSH
16168: LD_VAR 0 2
16172: PUSH
16173: LD_VAR 0 3
16177: ARRAY
16178: PPUSH
16179: LD_INT 3
16181: PPUSH
16182: CALL_OW 259
16186: PUSH
16187: LD_VAR 0 2
16191: PUSH
16192: LD_VAR 0 3
16196: ARRAY
16197: PPUSH
16198: CALL_OW 432
16202: MINUS
16203: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16204: LD_VAR 0 4
16208: PUSH
16209: LD_VAR 0 5
16213: PPUSH
16214: LD_INT 3
16216: PPUSH
16217: CALL_OW 259
16221: PUSH
16222: LD_VAR 0 5
16226: PPUSH
16227: CALL_OW 432
16231: MINUS
16232: GREATEREQUAL
16233: IFFALSE 16251
// mech := result [ i ] ;
16235: LD_ADDR_VAR 0 5
16239: PUSH
16240: LD_VAR 0 2
16244: PUSH
16245: LD_VAR 0 3
16249: ARRAY
16250: ST_TO_ADDR
// end ;
16251: GO 16160
16253: POP
16254: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16255: LD_VAR 0 1
16259: PPUSH
16260: LD_VAR 0 5
16264: PPUSH
16265: CALL_OW 135
// end ;
16269: LD_VAR 0 2
16273: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16274: LD_INT 0
16276: PPUSH
16277: PPUSH
16278: PPUSH
16279: PPUSH
16280: PPUSH
16281: PPUSH
16282: PPUSH
16283: PPUSH
16284: PPUSH
16285: PPUSH
16286: PPUSH
16287: PPUSH
16288: PPUSH
// result := [ ] ;
16289: LD_ADDR_VAR 0 7
16293: PUSH
16294: EMPTY
16295: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16296: LD_VAR 0 1
16300: PPUSH
16301: CALL_OW 266
16305: PUSH
16306: LD_INT 0
16308: PUSH
16309: LD_INT 1
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: IN
16316: NOT
16317: IFFALSE 16321
// exit ;
16319: GO 17955
// if name then
16321: LD_VAR 0 3
16325: IFFALSE 16341
// SetBName ( base_dep , name ) ;
16327: LD_VAR 0 1
16331: PPUSH
16332: LD_VAR 0 3
16336: PPUSH
16337: CALL_OW 500
// base := GetBase ( base_dep ) ;
16341: LD_ADDR_VAR 0 15
16345: PUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 274
16355: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16356: LD_ADDR_VAR 0 16
16360: PUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 255
16370: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16371: LD_ADDR_VAR 0 17
16375: PUSH
16376: LD_VAR 0 1
16380: PPUSH
16381: CALL_OW 248
16385: ST_TO_ADDR
// if sources then
16386: LD_VAR 0 5
16390: IFFALSE 16437
// for i = 1 to 3 do
16392: LD_ADDR_VAR 0 8
16396: PUSH
16397: DOUBLE
16398: LD_INT 1
16400: DEC
16401: ST_TO_ADDR
16402: LD_INT 3
16404: PUSH
16405: FOR_TO
16406: IFFALSE 16435
// AddResourceType ( base , i , sources [ i ] ) ;
16408: LD_VAR 0 15
16412: PPUSH
16413: LD_VAR 0 8
16417: PPUSH
16418: LD_VAR 0 5
16422: PUSH
16423: LD_VAR 0 8
16427: ARRAY
16428: PPUSH
16429: CALL_OW 276
16433: GO 16405
16435: POP
16436: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16437: LD_ADDR_VAR 0 18
16441: PUSH
16442: LD_VAR 0 15
16446: PPUSH
16447: LD_VAR 0 2
16451: PPUSH
16452: LD_INT 1
16454: PPUSH
16455: CALL 15698 0 3
16459: ST_TO_ADDR
// InitHc ;
16460: CALL_OW 19
// InitUc ;
16464: CALL_OW 18
// uc_side := side ;
16468: LD_ADDR_OWVAR 20
16472: PUSH
16473: LD_VAR 0 16
16477: ST_TO_ADDR
// uc_nation := nation ;
16478: LD_ADDR_OWVAR 21
16482: PUSH
16483: LD_VAR 0 17
16487: ST_TO_ADDR
// if buildings then
16488: LD_VAR 0 18
16492: IFFALSE 17814
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16494: LD_ADDR_VAR 0 19
16498: PUSH
16499: LD_VAR 0 18
16503: PPUSH
16504: LD_INT 2
16506: PUSH
16507: LD_INT 30
16509: PUSH
16510: LD_INT 29
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 30
16519: PUSH
16520: LD_INT 30
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PPUSH
16532: CALL_OW 72
16536: ST_TO_ADDR
// if tmp then
16537: LD_VAR 0 19
16541: IFFALSE 16589
// for i in tmp do
16543: LD_ADDR_VAR 0 8
16547: PUSH
16548: LD_VAR 0 19
16552: PUSH
16553: FOR_IN
16554: IFFALSE 16587
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16556: LD_VAR 0 8
16560: PPUSH
16561: CALL_OW 250
16565: PPUSH
16566: LD_VAR 0 8
16570: PPUSH
16571: CALL_OW 251
16575: PPUSH
16576: LD_VAR 0 16
16580: PPUSH
16581: CALL_OW 441
16585: GO 16553
16587: POP
16588: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16589: LD_VAR 0 18
16593: PPUSH
16594: LD_INT 2
16596: PUSH
16597: LD_INT 30
16599: PUSH
16600: LD_INT 32
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 30
16609: PUSH
16610: LD_INT 33
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: PPUSH
16622: CALL_OW 72
16626: IFFALSE 16714
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16628: LD_ADDR_VAR 0 8
16632: PUSH
16633: LD_VAR 0 18
16637: PPUSH
16638: LD_INT 2
16640: PUSH
16641: LD_INT 30
16643: PUSH
16644: LD_INT 32
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 30
16653: PUSH
16654: LD_INT 33
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: LIST
16665: PPUSH
16666: CALL_OW 72
16670: PUSH
16671: FOR_IN
16672: IFFALSE 16712
// begin if not GetBWeapon ( i ) then
16674: LD_VAR 0 8
16678: PPUSH
16679: CALL_OW 269
16683: NOT
16684: IFFALSE 16710
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16686: LD_VAR 0 8
16690: PPUSH
16691: LD_VAR 0 8
16695: PPUSH
16696: LD_VAR 0 2
16700: PPUSH
16701: CALL 17960 0 2
16705: PPUSH
16706: CALL_OW 431
// end ;
16710: GO 16671
16712: POP
16713: POP
// end ; for i = 1 to personel do
16714: LD_ADDR_VAR 0 8
16718: PUSH
16719: DOUBLE
16720: LD_INT 1
16722: DEC
16723: ST_TO_ADDR
16724: LD_VAR 0 6
16728: PUSH
16729: FOR_TO
16730: IFFALSE 17794
// begin if i > 4 then
16732: LD_VAR 0 8
16736: PUSH
16737: LD_INT 4
16739: GREATER
16740: IFFALSE 16744
// break ;
16742: GO 17794
// case i of 1 :
16744: LD_VAR 0 8
16748: PUSH
16749: LD_INT 1
16751: DOUBLE
16752: EQUAL
16753: IFTRUE 16757
16755: GO 16837
16757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16758: LD_ADDR_VAR 0 12
16762: PUSH
16763: LD_VAR 0 18
16767: PPUSH
16768: LD_INT 22
16770: PUSH
16771: LD_VAR 0 16
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 58
16782: PUSH
16783: EMPTY
16784: LIST
16785: PUSH
16786: LD_INT 2
16788: PUSH
16789: LD_INT 30
16791: PUSH
16792: LD_INT 32
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: LD_INT 30
16801: PUSH
16802: LD_INT 4
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 30
16811: PUSH
16812: LD_INT 5
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: PPUSH
16830: CALL_OW 72
16834: ST_TO_ADDR
16835: GO 17059
16837: LD_INT 2
16839: DOUBLE
16840: EQUAL
16841: IFTRUE 16845
16843: GO 16907
16845: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16846: LD_ADDR_VAR 0 12
16850: PUSH
16851: LD_VAR 0 18
16855: PPUSH
16856: LD_INT 22
16858: PUSH
16859: LD_VAR 0 16
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 2
16870: PUSH
16871: LD_INT 30
16873: PUSH
16874: LD_INT 0
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 30
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PPUSH
16900: CALL_OW 72
16904: ST_TO_ADDR
16905: GO 17059
16907: LD_INT 3
16909: DOUBLE
16910: EQUAL
16911: IFTRUE 16915
16913: GO 16977
16915: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
16916: LD_ADDR_VAR 0 12
16920: PUSH
16921: LD_VAR 0 18
16925: PPUSH
16926: LD_INT 22
16928: PUSH
16929: LD_VAR 0 16
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 2
16940: PUSH
16941: LD_INT 30
16943: PUSH
16944: LD_INT 2
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 30
16953: PUSH
16954: LD_INT 3
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PPUSH
16970: CALL_OW 72
16974: ST_TO_ADDR
16975: GO 17059
16977: LD_INT 4
16979: DOUBLE
16980: EQUAL
16981: IFTRUE 16985
16983: GO 17058
16985: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
16986: LD_ADDR_VAR 0 12
16990: PUSH
16991: LD_VAR 0 18
16995: PPUSH
16996: LD_INT 22
16998: PUSH
16999: LD_VAR 0 16
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 2
17010: PUSH
17011: LD_INT 30
17013: PUSH
17014: LD_INT 6
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 30
17023: PUSH
17024: LD_INT 7
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 30
17033: PUSH
17034: LD_INT 8
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PPUSH
17051: CALL_OW 72
17055: ST_TO_ADDR
17056: GO 17059
17058: POP
// if i = 1 then
17059: LD_VAR 0 8
17063: PUSH
17064: LD_INT 1
17066: EQUAL
17067: IFFALSE 17178
// begin tmp := [ ] ;
17069: LD_ADDR_VAR 0 19
17073: PUSH
17074: EMPTY
17075: ST_TO_ADDR
// for j in f do
17076: LD_ADDR_VAR 0 9
17080: PUSH
17081: LD_VAR 0 12
17085: PUSH
17086: FOR_IN
17087: IFFALSE 17160
// if GetBType ( j ) = b_bunker then
17089: LD_VAR 0 9
17093: PPUSH
17094: CALL_OW 266
17098: PUSH
17099: LD_INT 32
17101: EQUAL
17102: IFFALSE 17129
// tmp := Insert ( tmp , 1 , j ) else
17104: LD_ADDR_VAR 0 19
17108: PUSH
17109: LD_VAR 0 19
17113: PPUSH
17114: LD_INT 1
17116: PPUSH
17117: LD_VAR 0 9
17121: PPUSH
17122: CALL_OW 2
17126: ST_TO_ADDR
17127: GO 17158
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17129: LD_ADDR_VAR 0 19
17133: PUSH
17134: LD_VAR 0 19
17138: PPUSH
17139: LD_VAR 0 19
17143: PUSH
17144: LD_INT 1
17146: PLUS
17147: PPUSH
17148: LD_VAR 0 9
17152: PPUSH
17153: CALL_OW 2
17157: ST_TO_ADDR
17158: GO 17086
17160: POP
17161: POP
// if tmp then
17162: LD_VAR 0 19
17166: IFFALSE 17178
// f := tmp ;
17168: LD_ADDR_VAR 0 12
17172: PUSH
17173: LD_VAR 0 19
17177: ST_TO_ADDR
// end ; x := personel [ i ] ;
17178: LD_ADDR_VAR 0 13
17182: PUSH
17183: LD_VAR 0 6
17187: PUSH
17188: LD_VAR 0 8
17192: ARRAY
17193: ST_TO_ADDR
// if x = - 1 then
17194: LD_VAR 0 13
17198: PUSH
17199: LD_INT 1
17201: NEG
17202: EQUAL
17203: IFFALSE 17412
// begin for j in f do
17205: LD_ADDR_VAR 0 9
17209: PUSH
17210: LD_VAR 0 12
17214: PUSH
17215: FOR_IN
17216: IFFALSE 17408
// repeat InitHc ;
17218: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17222: LD_VAR 0 9
17226: PPUSH
17227: CALL_OW 266
17231: PUSH
17232: LD_INT 5
17234: EQUAL
17235: IFFALSE 17305
// begin if UnitsInside ( j ) < 3 then
17237: LD_VAR 0 9
17241: PPUSH
17242: CALL_OW 313
17246: PUSH
17247: LD_INT 3
17249: LESS
17250: IFFALSE 17286
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17252: LD_INT 0
17254: PPUSH
17255: LD_INT 5
17257: PUSH
17258: LD_INT 8
17260: PUSH
17261: LD_INT 9
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: LIST
17268: PUSH
17269: LD_VAR 0 17
17273: ARRAY
17274: PPUSH
17275: LD_VAR 0 4
17279: PPUSH
17280: CALL_OW 380
17284: GO 17303
// PrepareHuman ( false , i , skill ) ;
17286: LD_INT 0
17288: PPUSH
17289: LD_VAR 0 8
17293: PPUSH
17294: LD_VAR 0 4
17298: PPUSH
17299: CALL_OW 380
// end else
17303: GO 17322
// PrepareHuman ( false , i , skill ) ;
17305: LD_INT 0
17307: PPUSH
17308: LD_VAR 0 8
17312: PPUSH
17313: LD_VAR 0 4
17317: PPUSH
17318: CALL_OW 380
// un := CreateHuman ;
17322: LD_ADDR_VAR 0 14
17326: PUSH
17327: CALL_OW 44
17331: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17332: LD_ADDR_VAR 0 7
17336: PUSH
17337: LD_VAR 0 7
17341: PPUSH
17342: LD_INT 1
17344: PPUSH
17345: LD_VAR 0 14
17349: PPUSH
17350: CALL_OW 2
17354: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17355: LD_VAR 0 14
17359: PPUSH
17360: LD_VAR 0 9
17364: PPUSH
17365: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17369: LD_VAR 0 9
17373: PPUSH
17374: CALL_OW 313
17378: PUSH
17379: LD_INT 6
17381: EQUAL
17382: PUSH
17383: LD_VAR 0 9
17387: PPUSH
17388: CALL_OW 266
17392: PUSH
17393: LD_INT 32
17395: PUSH
17396: LD_INT 31
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: IN
17403: OR
17404: IFFALSE 17218
17406: GO 17215
17408: POP
17409: POP
// end else
17410: GO 17792
// for j = 1 to x do
17412: LD_ADDR_VAR 0 9
17416: PUSH
17417: DOUBLE
17418: LD_INT 1
17420: DEC
17421: ST_TO_ADDR
17422: LD_VAR 0 13
17426: PUSH
17427: FOR_TO
17428: IFFALSE 17790
// begin InitHc ;
17430: CALL_OW 19
// if not f then
17434: LD_VAR 0 12
17438: NOT
17439: IFFALSE 17528
// begin PrepareHuman ( false , i , skill ) ;
17441: LD_INT 0
17443: PPUSH
17444: LD_VAR 0 8
17448: PPUSH
17449: LD_VAR 0 4
17453: PPUSH
17454: CALL_OW 380
// un := CreateHuman ;
17458: LD_ADDR_VAR 0 14
17462: PUSH
17463: CALL_OW 44
17467: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17468: LD_ADDR_VAR 0 7
17472: PUSH
17473: LD_VAR 0 7
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: LD_VAR 0 14
17485: PPUSH
17486: CALL_OW 2
17490: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17491: LD_VAR 0 14
17495: PPUSH
17496: LD_VAR 0 1
17500: PPUSH
17501: CALL_OW 250
17505: PPUSH
17506: LD_VAR 0 1
17510: PPUSH
17511: CALL_OW 251
17515: PPUSH
17516: LD_INT 10
17518: PPUSH
17519: LD_INT 0
17521: PPUSH
17522: CALL_OW 50
// continue ;
17526: GO 17427
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17528: LD_VAR 0 12
17532: PUSH
17533: LD_INT 1
17535: ARRAY
17536: PPUSH
17537: CALL_OW 313
17541: PUSH
17542: LD_VAR 0 12
17546: PUSH
17547: LD_INT 1
17549: ARRAY
17550: PPUSH
17551: CALL_OW 266
17555: PUSH
17556: LD_INT 32
17558: PUSH
17559: LD_INT 31
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: IN
17566: AND
17567: PUSH
17568: LD_VAR 0 12
17572: PUSH
17573: LD_INT 1
17575: ARRAY
17576: PPUSH
17577: CALL_OW 313
17581: PUSH
17582: LD_INT 6
17584: EQUAL
17585: OR
17586: IFFALSE 17606
// f := Delete ( f , 1 ) ;
17588: LD_ADDR_VAR 0 12
17592: PUSH
17593: LD_VAR 0 12
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: CALL_OW 3
17605: ST_TO_ADDR
// if not f then
17606: LD_VAR 0 12
17610: NOT
17611: IFFALSE 17629
// begin x := x + 2 ;
17613: LD_ADDR_VAR 0 13
17617: PUSH
17618: LD_VAR 0 13
17622: PUSH
17623: LD_INT 2
17625: PLUS
17626: ST_TO_ADDR
// continue ;
17627: GO 17427
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17629: LD_VAR 0 12
17633: PUSH
17634: LD_INT 1
17636: ARRAY
17637: PPUSH
17638: CALL_OW 266
17642: PUSH
17643: LD_INT 5
17645: EQUAL
17646: IFFALSE 17720
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17648: LD_VAR 0 12
17652: PUSH
17653: LD_INT 1
17655: ARRAY
17656: PPUSH
17657: CALL_OW 313
17661: PUSH
17662: LD_INT 3
17664: LESS
17665: IFFALSE 17701
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17667: LD_INT 0
17669: PPUSH
17670: LD_INT 5
17672: PUSH
17673: LD_INT 8
17675: PUSH
17676: LD_INT 9
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: LIST
17683: PUSH
17684: LD_VAR 0 17
17688: ARRAY
17689: PPUSH
17690: LD_VAR 0 4
17694: PPUSH
17695: CALL_OW 380
17699: GO 17718
// PrepareHuman ( false , i , skill ) ;
17701: LD_INT 0
17703: PPUSH
17704: LD_VAR 0 8
17708: PPUSH
17709: LD_VAR 0 4
17713: PPUSH
17714: CALL_OW 380
// end else
17718: GO 17737
// PrepareHuman ( false , i , skill ) ;
17720: LD_INT 0
17722: PPUSH
17723: LD_VAR 0 8
17727: PPUSH
17728: LD_VAR 0 4
17732: PPUSH
17733: CALL_OW 380
// un := CreateHuman ;
17737: LD_ADDR_VAR 0 14
17741: PUSH
17742: CALL_OW 44
17746: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17747: LD_ADDR_VAR 0 7
17751: PUSH
17752: LD_VAR 0 7
17756: PPUSH
17757: LD_INT 1
17759: PPUSH
17760: LD_VAR 0 14
17764: PPUSH
17765: CALL_OW 2
17769: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17770: LD_VAR 0 14
17774: PPUSH
17775: LD_VAR 0 12
17779: PUSH
17780: LD_INT 1
17782: ARRAY
17783: PPUSH
17784: CALL_OW 52
// end ;
17788: GO 17427
17790: POP
17791: POP
// end ;
17792: GO 16729
17794: POP
17795: POP
// result := result ^ buildings ;
17796: LD_ADDR_VAR 0 7
17800: PUSH
17801: LD_VAR 0 7
17805: PUSH
17806: LD_VAR 0 18
17810: ADD
17811: ST_TO_ADDR
// end else
17812: GO 17955
// begin for i = 1 to personel do
17814: LD_ADDR_VAR 0 8
17818: PUSH
17819: DOUBLE
17820: LD_INT 1
17822: DEC
17823: ST_TO_ADDR
17824: LD_VAR 0 6
17828: PUSH
17829: FOR_TO
17830: IFFALSE 17953
// begin if i > 4 then
17832: LD_VAR 0 8
17836: PUSH
17837: LD_INT 4
17839: GREATER
17840: IFFALSE 17844
// break ;
17842: GO 17953
// x := personel [ i ] ;
17844: LD_ADDR_VAR 0 13
17848: PUSH
17849: LD_VAR 0 6
17853: PUSH
17854: LD_VAR 0 8
17858: ARRAY
17859: ST_TO_ADDR
// if x = - 1 then
17860: LD_VAR 0 13
17864: PUSH
17865: LD_INT 1
17867: NEG
17868: EQUAL
17869: IFFALSE 17873
// continue ;
17871: GO 17829
// PrepareHuman ( false , i , skill ) ;
17873: LD_INT 0
17875: PPUSH
17876: LD_VAR 0 8
17880: PPUSH
17881: LD_VAR 0 4
17885: PPUSH
17886: CALL_OW 380
// un := CreateHuman ;
17890: LD_ADDR_VAR 0 14
17894: PUSH
17895: CALL_OW 44
17899: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17900: LD_VAR 0 14
17904: PPUSH
17905: LD_VAR 0 1
17909: PPUSH
17910: CALL_OW 250
17914: PPUSH
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL_OW 251
17924: PPUSH
17925: LD_INT 10
17927: PPUSH
17928: LD_INT 0
17930: PPUSH
17931: CALL_OW 50
// result := result ^ un ;
17935: LD_ADDR_VAR 0 7
17939: PUSH
17940: LD_VAR 0 7
17944: PUSH
17945: LD_VAR 0 14
17949: ADD
17950: ST_TO_ADDR
// end ;
17951: GO 17829
17953: POP
17954: POP
// end ; end ;
17955: LD_VAR 0 7
17959: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
17960: LD_INT 0
17962: PPUSH
17963: PPUSH
17964: PPUSH
17965: PPUSH
17966: PPUSH
17967: PPUSH
17968: PPUSH
17969: PPUSH
17970: PPUSH
17971: PPUSH
17972: PPUSH
17973: PPUSH
17974: PPUSH
17975: PPUSH
17976: PPUSH
17977: PPUSH
// result := false ;
17978: LD_ADDR_VAR 0 3
17982: PUSH
17983: LD_INT 0
17985: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
17986: LD_VAR 0 1
17990: NOT
17991: PUSH
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 266
18001: PUSH
18002: LD_INT 32
18004: PUSH
18005: LD_INT 33
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: IN
18012: NOT
18013: OR
18014: IFFALSE 18018
// exit ;
18016: GO 19127
// nat := GetNation ( tower ) ;
18018: LD_ADDR_VAR 0 12
18022: PUSH
18023: LD_VAR 0 1
18027: PPUSH
18028: CALL_OW 248
18032: ST_TO_ADDR
// side := GetSide ( tower ) ;
18033: LD_ADDR_VAR 0 16
18037: PUSH
18038: LD_VAR 0 1
18042: PPUSH
18043: CALL_OW 255
18047: ST_TO_ADDR
// x := GetX ( tower ) ;
18048: LD_ADDR_VAR 0 10
18052: PUSH
18053: LD_VAR 0 1
18057: PPUSH
18058: CALL_OW 250
18062: ST_TO_ADDR
// y := GetY ( tower ) ;
18063: LD_ADDR_VAR 0 11
18067: PUSH
18068: LD_VAR 0 1
18072: PPUSH
18073: CALL_OW 251
18077: ST_TO_ADDR
// if not x or not y then
18078: LD_VAR 0 10
18082: NOT
18083: PUSH
18084: LD_VAR 0 11
18088: NOT
18089: OR
18090: IFFALSE 18094
// exit ;
18092: GO 19127
// weapon := 0 ;
18094: LD_ADDR_VAR 0 18
18098: PUSH
18099: LD_INT 0
18101: ST_TO_ADDR
// fac_list := [ ] ;
18102: LD_ADDR_VAR 0 17
18106: PUSH
18107: EMPTY
18108: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18109: LD_ADDR_VAR 0 6
18113: PUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 274
18123: PPUSH
18124: LD_VAR 0 2
18128: PPUSH
18129: LD_INT 0
18131: PPUSH
18132: CALL 15698 0 3
18136: PPUSH
18137: LD_INT 30
18139: PUSH
18140: LD_INT 3
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PPUSH
18147: CALL_OW 72
18151: ST_TO_ADDR
// if not factories then
18152: LD_VAR 0 6
18156: NOT
18157: IFFALSE 18161
// exit ;
18159: GO 19127
// for i in factories do
18161: LD_ADDR_VAR 0 8
18165: PUSH
18166: LD_VAR 0 6
18170: PUSH
18171: FOR_IN
18172: IFFALSE 18197
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18174: LD_ADDR_VAR 0 17
18178: PUSH
18179: LD_VAR 0 17
18183: PUSH
18184: LD_VAR 0 8
18188: PPUSH
18189: CALL_OW 478
18193: UNION
18194: ST_TO_ADDR
18195: GO 18171
18197: POP
18198: POP
// if not fac_list then
18199: LD_VAR 0 17
18203: NOT
18204: IFFALSE 18208
// exit ;
18206: GO 19127
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18208: LD_ADDR_VAR 0 5
18212: PUSH
18213: LD_INT 4
18215: PUSH
18216: LD_INT 5
18218: PUSH
18219: LD_INT 9
18221: PUSH
18222: LD_INT 10
18224: PUSH
18225: LD_INT 6
18227: PUSH
18228: LD_INT 7
18230: PUSH
18231: LD_INT 11
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 27
18245: PUSH
18246: LD_INT 28
18248: PUSH
18249: LD_INT 26
18251: PUSH
18252: LD_INT 30
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 43
18263: PUSH
18264: LD_INT 44
18266: PUSH
18267: LD_INT 46
18269: PUSH
18270: LD_INT 45
18272: PUSH
18273: LD_INT 47
18275: PUSH
18276: LD_INT 49
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: LIST
18291: PUSH
18292: LD_VAR 0 12
18296: ARRAY
18297: ST_TO_ADDR
// list := list isect fac_list ;
18298: LD_ADDR_VAR 0 5
18302: PUSH
18303: LD_VAR 0 5
18307: PUSH
18308: LD_VAR 0 17
18312: ISECT
18313: ST_TO_ADDR
// if not list then
18314: LD_VAR 0 5
18318: NOT
18319: IFFALSE 18323
// exit ;
18321: GO 19127
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18323: LD_VAR 0 12
18327: PUSH
18328: LD_INT 3
18330: EQUAL
18331: PUSH
18332: LD_INT 49
18334: PUSH
18335: LD_VAR 0 5
18339: IN
18340: AND
18341: PUSH
18342: LD_INT 31
18344: PPUSH
18345: LD_VAR 0 16
18349: PPUSH
18350: CALL_OW 321
18354: PUSH
18355: LD_INT 2
18357: EQUAL
18358: AND
18359: IFFALSE 18419
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18361: LD_INT 22
18363: PUSH
18364: LD_VAR 0 16
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 35
18375: PUSH
18376: LD_INT 49
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 91
18385: PUSH
18386: LD_VAR 0 1
18390: PUSH
18391: LD_INT 10
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: LIST
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: LIST
18403: PPUSH
18404: CALL_OW 69
18408: NOT
18409: IFFALSE 18419
// weapon := ru_time_lapser ;
18411: LD_ADDR_VAR 0 18
18415: PUSH
18416: LD_INT 49
18418: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18419: LD_VAR 0 12
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: LD_INT 2
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: IN
18434: PUSH
18435: LD_INT 11
18437: PUSH
18438: LD_VAR 0 5
18442: IN
18443: PUSH
18444: LD_INT 30
18446: PUSH
18447: LD_VAR 0 5
18451: IN
18452: OR
18453: AND
18454: PUSH
18455: LD_INT 6
18457: PPUSH
18458: LD_VAR 0 16
18462: PPUSH
18463: CALL_OW 321
18467: PUSH
18468: LD_INT 2
18470: EQUAL
18471: AND
18472: IFFALSE 18637
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18474: LD_INT 22
18476: PUSH
18477: LD_VAR 0 16
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 2
18488: PUSH
18489: LD_INT 35
18491: PUSH
18492: LD_INT 11
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 35
18501: PUSH
18502: LD_INT 30
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 91
18516: PUSH
18517: LD_VAR 0 1
18521: PUSH
18522: LD_INT 18
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: LIST
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: LIST
18534: PPUSH
18535: CALL_OW 69
18539: NOT
18540: PUSH
18541: LD_INT 22
18543: PUSH
18544: LD_VAR 0 16
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 2
18555: PUSH
18556: LD_INT 30
18558: PUSH
18559: LD_INT 32
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 30
18568: PUSH
18569: LD_INT 33
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 91
18583: PUSH
18584: LD_VAR 0 1
18588: PUSH
18589: LD_INT 12
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: LIST
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: LIST
18601: PUSH
18602: EMPTY
18603: LIST
18604: PPUSH
18605: CALL_OW 69
18609: PUSH
18610: LD_INT 2
18612: GREATER
18613: AND
18614: IFFALSE 18637
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18616: LD_ADDR_VAR 0 18
18620: PUSH
18621: LD_INT 11
18623: PUSH
18624: LD_INT 30
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_VAR 0 12
18635: ARRAY
18636: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18637: LD_VAR 0 18
18641: NOT
18642: PUSH
18643: LD_INT 40
18645: PPUSH
18646: LD_VAR 0 16
18650: PPUSH
18651: CALL_OW 321
18655: PUSH
18656: LD_INT 2
18658: EQUAL
18659: AND
18660: PUSH
18661: LD_INT 7
18663: PUSH
18664: LD_VAR 0 5
18668: IN
18669: PUSH
18670: LD_INT 28
18672: PUSH
18673: LD_VAR 0 5
18677: IN
18678: OR
18679: PUSH
18680: LD_INT 45
18682: PUSH
18683: LD_VAR 0 5
18687: IN
18688: OR
18689: AND
18690: IFFALSE 18944
// begin hex := GetHexInfo ( x , y ) ;
18692: LD_ADDR_VAR 0 4
18696: PUSH
18697: LD_VAR 0 10
18701: PPUSH
18702: LD_VAR 0 11
18706: PPUSH
18707: CALL_OW 546
18711: ST_TO_ADDR
// if hex [ 1 ] then
18712: LD_VAR 0 4
18716: PUSH
18717: LD_INT 1
18719: ARRAY
18720: IFFALSE 18724
// exit ;
18722: GO 19127
// height := hex [ 2 ] ;
18724: LD_ADDR_VAR 0 15
18728: PUSH
18729: LD_VAR 0 4
18733: PUSH
18734: LD_INT 2
18736: ARRAY
18737: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18738: LD_ADDR_VAR 0 14
18742: PUSH
18743: LD_INT 0
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: LD_INT 3
18751: PUSH
18752: LD_INT 5
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: ST_TO_ADDR
// for i in tmp do
18761: LD_ADDR_VAR 0 8
18765: PUSH
18766: LD_VAR 0 14
18770: PUSH
18771: FOR_IN
18772: IFFALSE 18942
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18774: LD_ADDR_VAR 0 9
18778: PUSH
18779: LD_VAR 0 10
18783: PPUSH
18784: LD_VAR 0 8
18788: PPUSH
18789: LD_INT 5
18791: PPUSH
18792: CALL_OW 272
18796: PUSH
18797: LD_VAR 0 11
18801: PPUSH
18802: LD_VAR 0 8
18806: PPUSH
18807: LD_INT 5
18809: PPUSH
18810: CALL_OW 273
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18819: LD_VAR 0 9
18823: PUSH
18824: LD_INT 1
18826: ARRAY
18827: PPUSH
18828: LD_VAR 0 9
18832: PUSH
18833: LD_INT 2
18835: ARRAY
18836: PPUSH
18837: CALL_OW 488
18841: IFFALSE 18940
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18843: LD_ADDR_VAR 0 4
18847: PUSH
18848: LD_VAR 0 9
18852: PUSH
18853: LD_INT 1
18855: ARRAY
18856: PPUSH
18857: LD_VAR 0 9
18861: PUSH
18862: LD_INT 2
18864: ARRAY
18865: PPUSH
18866: CALL_OW 546
18870: ST_TO_ADDR
// if hex [ 1 ] then
18871: LD_VAR 0 4
18875: PUSH
18876: LD_INT 1
18878: ARRAY
18879: IFFALSE 18883
// continue ;
18881: GO 18771
// h := hex [ 2 ] ;
18883: LD_ADDR_VAR 0 13
18887: PUSH
18888: LD_VAR 0 4
18892: PUSH
18893: LD_INT 2
18895: ARRAY
18896: ST_TO_ADDR
// if h + 7 < height then
18897: LD_VAR 0 13
18901: PUSH
18902: LD_INT 7
18904: PLUS
18905: PUSH
18906: LD_VAR 0 15
18910: LESS
18911: IFFALSE 18940
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
18913: LD_ADDR_VAR 0 18
18917: PUSH
18918: LD_INT 7
18920: PUSH
18921: LD_INT 28
18923: PUSH
18924: LD_INT 45
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: LIST
18931: PUSH
18932: LD_VAR 0 12
18936: ARRAY
18937: ST_TO_ADDR
// break ;
18938: GO 18942
// end ; end ; end ;
18940: GO 18771
18942: POP
18943: POP
// end ; if not weapon then
18944: LD_VAR 0 18
18948: NOT
18949: IFFALSE 19009
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
18951: LD_ADDR_VAR 0 5
18955: PUSH
18956: LD_VAR 0 5
18960: PUSH
18961: LD_INT 11
18963: PUSH
18964: LD_INT 30
18966: PUSH
18967: LD_INT 49
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: LIST
18974: DIFF
18975: ST_TO_ADDR
// if not list then
18976: LD_VAR 0 5
18980: NOT
18981: IFFALSE 18985
// exit ;
18983: GO 19127
// weapon := list [ rand ( 1 , list ) ] ;
18985: LD_ADDR_VAR 0 18
18989: PUSH
18990: LD_VAR 0 5
18994: PUSH
18995: LD_INT 1
18997: PPUSH
18998: LD_VAR 0 5
19002: PPUSH
19003: CALL_OW 12
19007: ARRAY
19008: ST_TO_ADDR
// end ; if weapon then
19009: LD_VAR 0 18
19013: IFFALSE 19127
// begin tmp := CostOfWeapon ( weapon ) ;
19015: LD_ADDR_VAR 0 14
19019: PUSH
19020: LD_VAR 0 18
19024: PPUSH
19025: CALL_OW 451
19029: ST_TO_ADDR
// j := GetBase ( tower ) ;
19030: LD_ADDR_VAR 0 9
19034: PUSH
19035: LD_VAR 0 1
19039: PPUSH
19040: CALL_OW 274
19044: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19045: LD_VAR 0 9
19049: PPUSH
19050: LD_INT 1
19052: PPUSH
19053: CALL_OW 275
19057: PUSH
19058: LD_VAR 0 14
19062: PUSH
19063: LD_INT 1
19065: ARRAY
19066: GREATEREQUAL
19067: PUSH
19068: LD_VAR 0 9
19072: PPUSH
19073: LD_INT 2
19075: PPUSH
19076: CALL_OW 275
19080: PUSH
19081: LD_VAR 0 14
19085: PUSH
19086: LD_INT 2
19088: ARRAY
19089: GREATEREQUAL
19090: AND
19091: PUSH
19092: LD_VAR 0 9
19096: PPUSH
19097: LD_INT 3
19099: PPUSH
19100: CALL_OW 275
19104: PUSH
19105: LD_VAR 0 14
19109: PUSH
19110: LD_INT 3
19112: ARRAY
19113: GREATEREQUAL
19114: AND
19115: IFFALSE 19127
// result := weapon ;
19117: LD_ADDR_VAR 0 3
19121: PUSH
19122: LD_VAR 0 18
19126: ST_TO_ADDR
// end ; end ;
19127: LD_VAR 0 3
19131: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19132: LD_INT 0
19134: PPUSH
19135: PPUSH
// result := true ;
19136: LD_ADDR_VAR 0 3
19140: PUSH
19141: LD_INT 1
19143: ST_TO_ADDR
// if array1 = array2 then
19144: LD_VAR 0 1
19148: PUSH
19149: LD_VAR 0 2
19153: EQUAL
19154: IFFALSE 19214
// begin for i = 1 to array1 do
19156: LD_ADDR_VAR 0 4
19160: PUSH
19161: DOUBLE
19162: LD_INT 1
19164: DEC
19165: ST_TO_ADDR
19166: LD_VAR 0 1
19170: PUSH
19171: FOR_TO
19172: IFFALSE 19210
// if array1 [ i ] <> array2 [ i ] then
19174: LD_VAR 0 1
19178: PUSH
19179: LD_VAR 0 4
19183: ARRAY
19184: PUSH
19185: LD_VAR 0 2
19189: PUSH
19190: LD_VAR 0 4
19194: ARRAY
19195: NONEQUAL
19196: IFFALSE 19208
// begin result := false ;
19198: LD_ADDR_VAR 0 3
19202: PUSH
19203: LD_INT 0
19205: ST_TO_ADDR
// break ;
19206: GO 19210
// end ;
19208: GO 19171
19210: POP
19211: POP
// end else
19212: GO 19222
// result := false ;
19214: LD_ADDR_VAR 0 3
19218: PUSH
19219: LD_INT 0
19221: ST_TO_ADDR
// end ;
19222: LD_VAR 0 3
19226: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19227: LD_INT 0
19229: PPUSH
19230: PPUSH
// if not array1 or not array2 then
19231: LD_VAR 0 1
19235: NOT
19236: PUSH
19237: LD_VAR 0 2
19241: NOT
19242: OR
19243: IFFALSE 19247
// exit ;
19245: GO 19311
// result := true ;
19247: LD_ADDR_VAR 0 3
19251: PUSH
19252: LD_INT 1
19254: ST_TO_ADDR
// for i = 1 to array1 do
19255: LD_ADDR_VAR 0 4
19259: PUSH
19260: DOUBLE
19261: LD_INT 1
19263: DEC
19264: ST_TO_ADDR
19265: LD_VAR 0 1
19269: PUSH
19270: FOR_TO
19271: IFFALSE 19309
// if array1 [ i ] <> array2 [ i ] then
19273: LD_VAR 0 1
19277: PUSH
19278: LD_VAR 0 4
19282: ARRAY
19283: PUSH
19284: LD_VAR 0 2
19288: PUSH
19289: LD_VAR 0 4
19293: ARRAY
19294: NONEQUAL
19295: IFFALSE 19307
// begin result := false ;
19297: LD_ADDR_VAR 0 3
19301: PUSH
19302: LD_INT 0
19304: ST_TO_ADDR
// break ;
19305: GO 19309
// end ;
19307: GO 19270
19309: POP
19310: POP
// end ;
19311: LD_VAR 0 3
19315: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19316: LD_INT 0
19318: PPUSH
19319: PPUSH
19320: PPUSH
// pom := GetBase ( fac ) ;
19321: LD_ADDR_VAR 0 5
19325: PUSH
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL_OW 274
19335: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19336: LD_ADDR_VAR 0 4
19340: PUSH
19341: LD_VAR 0 2
19345: PUSH
19346: LD_INT 1
19348: ARRAY
19349: PPUSH
19350: LD_VAR 0 2
19354: PUSH
19355: LD_INT 2
19357: ARRAY
19358: PPUSH
19359: LD_VAR 0 2
19363: PUSH
19364: LD_INT 3
19366: ARRAY
19367: PPUSH
19368: LD_VAR 0 2
19372: PUSH
19373: LD_INT 4
19375: ARRAY
19376: PPUSH
19377: CALL_OW 449
19381: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19382: LD_ADDR_VAR 0 3
19386: PUSH
19387: LD_VAR 0 5
19391: PPUSH
19392: LD_INT 1
19394: PPUSH
19395: CALL_OW 275
19399: PUSH
19400: LD_VAR 0 4
19404: PUSH
19405: LD_INT 1
19407: ARRAY
19408: GREATEREQUAL
19409: PUSH
19410: LD_VAR 0 5
19414: PPUSH
19415: LD_INT 2
19417: PPUSH
19418: CALL_OW 275
19422: PUSH
19423: LD_VAR 0 4
19427: PUSH
19428: LD_INT 2
19430: ARRAY
19431: GREATEREQUAL
19432: AND
19433: PUSH
19434: LD_VAR 0 5
19438: PPUSH
19439: LD_INT 3
19441: PPUSH
19442: CALL_OW 275
19446: PUSH
19447: LD_VAR 0 4
19451: PUSH
19452: LD_INT 3
19454: ARRAY
19455: GREATEREQUAL
19456: AND
19457: ST_TO_ADDR
// end ;
19458: LD_VAR 0 3
19462: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19463: LD_INT 0
19465: PPUSH
19466: PPUSH
19467: PPUSH
19468: PPUSH
// pom := GetBase ( building ) ;
19469: LD_ADDR_VAR 0 3
19473: PUSH
19474: LD_VAR 0 1
19478: PPUSH
19479: CALL_OW 274
19483: ST_TO_ADDR
// if not pom then
19484: LD_VAR 0 3
19488: NOT
19489: IFFALSE 19493
// exit ;
19491: GO 19663
// btype := GetBType ( building ) ;
19493: LD_ADDR_VAR 0 5
19497: PUSH
19498: LD_VAR 0 1
19502: PPUSH
19503: CALL_OW 266
19507: ST_TO_ADDR
// if btype = b_armoury then
19508: LD_VAR 0 5
19512: PUSH
19513: LD_INT 4
19515: EQUAL
19516: IFFALSE 19526
// btype := b_barracks ;
19518: LD_ADDR_VAR 0 5
19522: PUSH
19523: LD_INT 5
19525: ST_TO_ADDR
// if btype = b_depot then
19526: LD_VAR 0 5
19530: PUSH
19531: LD_INT 0
19533: EQUAL
19534: IFFALSE 19544
// btype := b_warehouse ;
19536: LD_ADDR_VAR 0 5
19540: PUSH
19541: LD_INT 1
19543: ST_TO_ADDR
// if btype = b_workshop then
19544: LD_VAR 0 5
19548: PUSH
19549: LD_INT 2
19551: EQUAL
19552: IFFALSE 19562
// btype := b_factory ;
19554: LD_ADDR_VAR 0 5
19558: PUSH
19559: LD_INT 3
19561: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19562: LD_ADDR_VAR 0 4
19566: PUSH
19567: LD_VAR 0 5
19571: PPUSH
19572: LD_VAR 0 1
19576: PPUSH
19577: CALL_OW 248
19581: PPUSH
19582: CALL_OW 450
19586: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19587: LD_ADDR_VAR 0 2
19591: PUSH
19592: LD_VAR 0 3
19596: PPUSH
19597: LD_INT 1
19599: PPUSH
19600: CALL_OW 275
19604: PUSH
19605: LD_VAR 0 4
19609: PUSH
19610: LD_INT 1
19612: ARRAY
19613: GREATEREQUAL
19614: PUSH
19615: LD_VAR 0 3
19619: PPUSH
19620: LD_INT 2
19622: PPUSH
19623: CALL_OW 275
19627: PUSH
19628: LD_VAR 0 4
19632: PUSH
19633: LD_INT 2
19635: ARRAY
19636: GREATEREQUAL
19637: AND
19638: PUSH
19639: LD_VAR 0 3
19643: PPUSH
19644: LD_INT 3
19646: PPUSH
19647: CALL_OW 275
19651: PUSH
19652: LD_VAR 0 4
19656: PUSH
19657: LD_INT 3
19659: ARRAY
19660: GREATEREQUAL
19661: AND
19662: ST_TO_ADDR
// end ;
19663: LD_VAR 0 2
19667: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19668: LD_INT 0
19670: PPUSH
19671: PPUSH
19672: PPUSH
// pom := GetBase ( building ) ;
19673: LD_ADDR_VAR 0 4
19677: PUSH
19678: LD_VAR 0 1
19682: PPUSH
19683: CALL_OW 274
19687: ST_TO_ADDR
// if not pom then
19688: LD_VAR 0 4
19692: NOT
19693: IFFALSE 19697
// exit ;
19695: GO 19798
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19697: LD_ADDR_VAR 0 5
19701: PUSH
19702: LD_VAR 0 2
19706: PPUSH
19707: LD_VAR 0 1
19711: PPUSH
19712: CALL_OW 248
19716: PPUSH
19717: CALL_OW 450
19721: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19722: LD_ADDR_VAR 0 3
19726: PUSH
19727: LD_VAR 0 4
19731: PPUSH
19732: LD_INT 1
19734: PPUSH
19735: CALL_OW 275
19739: PUSH
19740: LD_VAR 0 5
19744: PUSH
19745: LD_INT 1
19747: ARRAY
19748: GREATEREQUAL
19749: PUSH
19750: LD_VAR 0 4
19754: PPUSH
19755: LD_INT 2
19757: PPUSH
19758: CALL_OW 275
19762: PUSH
19763: LD_VAR 0 5
19767: PUSH
19768: LD_INT 2
19770: ARRAY
19771: GREATEREQUAL
19772: AND
19773: PUSH
19774: LD_VAR 0 4
19778: PPUSH
19779: LD_INT 3
19781: PPUSH
19782: CALL_OW 275
19786: PUSH
19787: LD_VAR 0 5
19791: PUSH
19792: LD_INT 3
19794: ARRAY
19795: GREATEREQUAL
19796: AND
19797: ST_TO_ADDR
// end ;
19798: LD_VAR 0 3
19802: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19803: LD_INT 0
19805: PPUSH
19806: PPUSH
19807: PPUSH
19808: PPUSH
19809: PPUSH
19810: PPUSH
19811: PPUSH
19812: PPUSH
19813: PPUSH
19814: PPUSH
19815: PPUSH
// result := false ;
19816: LD_ADDR_VAR 0 8
19820: PUSH
19821: LD_INT 0
19823: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19824: LD_VAR 0 5
19828: NOT
19829: PUSH
19830: LD_VAR 0 1
19834: NOT
19835: OR
19836: PUSH
19837: LD_VAR 0 2
19841: NOT
19842: OR
19843: PUSH
19844: LD_VAR 0 3
19848: NOT
19849: OR
19850: IFFALSE 19854
// exit ;
19852: GO 20668
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19854: LD_ADDR_VAR 0 14
19858: PUSH
19859: LD_VAR 0 1
19863: PPUSH
19864: LD_VAR 0 2
19868: PPUSH
19869: LD_VAR 0 3
19873: PPUSH
19874: LD_VAR 0 4
19878: PPUSH
19879: LD_VAR 0 5
19883: PUSH
19884: LD_INT 1
19886: ARRAY
19887: PPUSH
19888: CALL_OW 248
19892: PPUSH
19893: LD_INT 0
19895: PPUSH
19896: CALL 21905 0 6
19900: ST_TO_ADDR
// if not hexes then
19901: LD_VAR 0 14
19905: NOT
19906: IFFALSE 19910
// exit ;
19908: GO 20668
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19910: LD_ADDR_VAR 0 17
19914: PUSH
19915: LD_VAR 0 5
19919: PPUSH
19920: LD_INT 22
19922: PUSH
19923: LD_VAR 0 13
19927: PPUSH
19928: CALL_OW 255
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 2
19939: PUSH
19940: LD_INT 30
19942: PUSH
19943: LD_INT 0
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 30
19952: PUSH
19953: LD_INT 1
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PPUSH
19969: CALL_OW 72
19973: ST_TO_ADDR
// for i = 1 to hexes do
19974: LD_ADDR_VAR 0 9
19978: PUSH
19979: DOUBLE
19980: LD_INT 1
19982: DEC
19983: ST_TO_ADDR
19984: LD_VAR 0 14
19988: PUSH
19989: FOR_TO
19990: IFFALSE 20666
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19992: LD_ADDR_VAR 0 13
19996: PUSH
19997: LD_VAR 0 14
20001: PUSH
20002: LD_VAR 0 9
20006: ARRAY
20007: PUSH
20008: LD_INT 1
20010: ARRAY
20011: PPUSH
20012: LD_VAR 0 14
20016: PUSH
20017: LD_VAR 0 9
20021: ARRAY
20022: PUSH
20023: LD_INT 2
20025: ARRAY
20026: PPUSH
20027: CALL_OW 428
20031: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20032: LD_VAR 0 14
20036: PUSH
20037: LD_VAR 0 9
20041: ARRAY
20042: PUSH
20043: LD_INT 1
20045: ARRAY
20046: PPUSH
20047: LD_VAR 0 14
20051: PUSH
20052: LD_VAR 0 9
20056: ARRAY
20057: PUSH
20058: LD_INT 2
20060: ARRAY
20061: PPUSH
20062: CALL_OW 351
20066: PUSH
20067: LD_VAR 0 14
20071: PUSH
20072: LD_VAR 0 9
20076: ARRAY
20077: PUSH
20078: LD_INT 1
20080: ARRAY
20081: PPUSH
20082: LD_VAR 0 14
20086: PUSH
20087: LD_VAR 0 9
20091: ARRAY
20092: PUSH
20093: LD_INT 2
20095: ARRAY
20096: PPUSH
20097: CALL_OW 488
20101: NOT
20102: OR
20103: PUSH
20104: LD_VAR 0 13
20108: PPUSH
20109: CALL_OW 247
20113: PUSH
20114: LD_INT 3
20116: EQUAL
20117: OR
20118: IFFALSE 20124
// exit ;
20120: POP
20121: POP
20122: GO 20668
// if not tmp then
20124: LD_VAR 0 13
20128: NOT
20129: IFFALSE 20133
// continue ;
20131: GO 19989
// result := true ;
20133: LD_ADDR_VAR 0 8
20137: PUSH
20138: LD_INT 1
20140: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20141: LD_VAR 0 6
20145: PUSH
20146: LD_VAR 0 13
20150: PPUSH
20151: CALL_OW 247
20155: PUSH
20156: LD_INT 2
20158: EQUAL
20159: AND
20160: PUSH
20161: LD_VAR 0 13
20165: PPUSH
20166: CALL_OW 263
20170: PUSH
20171: LD_INT 1
20173: EQUAL
20174: AND
20175: IFFALSE 20339
// begin if IsDrivenBy ( tmp ) then
20177: LD_VAR 0 13
20181: PPUSH
20182: CALL_OW 311
20186: IFFALSE 20190
// continue ;
20188: GO 19989
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20190: LD_VAR 0 6
20194: PPUSH
20195: LD_INT 3
20197: PUSH
20198: LD_INT 60
20200: PUSH
20201: EMPTY
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 3
20210: PUSH
20211: LD_INT 55
20213: PUSH
20214: EMPTY
20215: LIST
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PPUSH
20225: CALL_OW 72
20229: IFFALSE 20337
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20231: LD_ADDR_VAR 0 18
20235: PUSH
20236: LD_VAR 0 6
20240: PPUSH
20241: LD_INT 3
20243: PUSH
20244: LD_INT 60
20246: PUSH
20247: EMPTY
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 3
20256: PUSH
20257: LD_INT 55
20259: PUSH
20260: EMPTY
20261: LIST
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PPUSH
20271: CALL_OW 72
20275: PUSH
20276: LD_INT 1
20278: ARRAY
20279: ST_TO_ADDR
// if IsInUnit ( driver ) then
20280: LD_VAR 0 18
20284: PPUSH
20285: CALL_OW 310
20289: IFFALSE 20300
// ComExit ( driver ) ;
20291: LD_VAR 0 18
20295: PPUSH
20296: CALL 45033 0 1
// AddComEnterUnit ( driver , tmp ) ;
20300: LD_VAR 0 18
20304: PPUSH
20305: LD_VAR 0 13
20309: PPUSH
20310: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20314: LD_VAR 0 18
20318: PPUSH
20319: LD_VAR 0 7
20323: PPUSH
20324: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20328: LD_VAR 0 18
20332: PPUSH
20333: CALL_OW 181
// end ; continue ;
20337: GO 19989
// end ; if not cleaners or not tmp in cleaners then
20339: LD_VAR 0 6
20343: NOT
20344: PUSH
20345: LD_VAR 0 13
20349: PUSH
20350: LD_VAR 0 6
20354: IN
20355: NOT
20356: OR
20357: IFFALSE 20664
// begin if dep then
20359: LD_VAR 0 17
20363: IFFALSE 20499
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20365: LD_ADDR_VAR 0 16
20369: PUSH
20370: LD_VAR 0 17
20374: PUSH
20375: LD_INT 1
20377: ARRAY
20378: PPUSH
20379: CALL_OW 250
20383: PPUSH
20384: LD_VAR 0 17
20388: PUSH
20389: LD_INT 1
20391: ARRAY
20392: PPUSH
20393: CALL_OW 254
20397: PPUSH
20398: LD_INT 5
20400: PPUSH
20401: CALL_OW 272
20405: PUSH
20406: LD_VAR 0 17
20410: PUSH
20411: LD_INT 1
20413: ARRAY
20414: PPUSH
20415: CALL_OW 251
20419: PPUSH
20420: LD_VAR 0 17
20424: PUSH
20425: LD_INT 1
20427: ARRAY
20428: PPUSH
20429: CALL_OW 254
20433: PPUSH
20434: LD_INT 5
20436: PPUSH
20437: CALL_OW 273
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20446: LD_VAR 0 16
20450: PUSH
20451: LD_INT 1
20453: ARRAY
20454: PPUSH
20455: LD_VAR 0 16
20459: PUSH
20460: LD_INT 2
20462: ARRAY
20463: PPUSH
20464: CALL_OW 488
20468: IFFALSE 20499
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20470: LD_VAR 0 13
20474: PPUSH
20475: LD_VAR 0 16
20479: PUSH
20480: LD_INT 1
20482: ARRAY
20483: PPUSH
20484: LD_VAR 0 16
20488: PUSH
20489: LD_INT 2
20491: ARRAY
20492: PPUSH
20493: CALL_OW 111
// continue ;
20497: GO 19989
// end ; end ; r := GetDir ( tmp ) ;
20499: LD_ADDR_VAR 0 15
20503: PUSH
20504: LD_VAR 0 13
20508: PPUSH
20509: CALL_OW 254
20513: ST_TO_ADDR
// if r = 5 then
20514: LD_VAR 0 15
20518: PUSH
20519: LD_INT 5
20521: EQUAL
20522: IFFALSE 20532
// r := 0 ;
20524: LD_ADDR_VAR 0 15
20528: PUSH
20529: LD_INT 0
20531: ST_TO_ADDR
// for j = r to 5 do
20532: LD_ADDR_VAR 0 10
20536: PUSH
20537: DOUBLE
20538: LD_VAR 0 15
20542: DEC
20543: ST_TO_ADDR
20544: LD_INT 5
20546: PUSH
20547: FOR_TO
20548: IFFALSE 20662
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20550: LD_ADDR_VAR 0 11
20554: PUSH
20555: LD_VAR 0 13
20559: PPUSH
20560: CALL_OW 250
20564: PPUSH
20565: LD_VAR 0 10
20569: PPUSH
20570: LD_INT 2
20572: PPUSH
20573: CALL_OW 272
20577: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20578: LD_ADDR_VAR 0 12
20582: PUSH
20583: LD_VAR 0 13
20587: PPUSH
20588: CALL_OW 251
20592: PPUSH
20593: LD_VAR 0 10
20597: PPUSH
20598: LD_INT 2
20600: PPUSH
20601: CALL_OW 273
20605: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20606: LD_VAR 0 11
20610: PPUSH
20611: LD_VAR 0 12
20615: PPUSH
20616: CALL_OW 488
20620: PUSH
20621: LD_VAR 0 11
20625: PPUSH
20626: LD_VAR 0 12
20630: PPUSH
20631: CALL_OW 428
20635: NOT
20636: AND
20637: IFFALSE 20660
// begin ComMoveXY ( tmp , _x , _y ) ;
20639: LD_VAR 0 13
20643: PPUSH
20644: LD_VAR 0 11
20648: PPUSH
20649: LD_VAR 0 12
20653: PPUSH
20654: CALL_OW 111
// break ;
20658: GO 20662
// end ; end ;
20660: GO 20547
20662: POP
20663: POP
// end ; end ;
20664: GO 19989
20666: POP
20667: POP
// end ;
20668: LD_VAR 0 8
20672: RET
// export function BuildingTechInvented ( side , btype ) ; begin
20673: LD_INT 0
20675: PPUSH
// result := true ;
20676: LD_ADDR_VAR 0 3
20680: PUSH
20681: LD_INT 1
20683: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
20684: LD_VAR 0 2
20688: PUSH
20689: LD_INT 24
20691: DOUBLE
20692: EQUAL
20693: IFTRUE 20703
20695: LD_INT 33
20697: DOUBLE
20698: EQUAL
20699: IFTRUE 20703
20701: GO 20728
20703: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
20704: LD_ADDR_VAR 0 3
20708: PUSH
20709: LD_INT 32
20711: PPUSH
20712: LD_VAR 0 1
20716: PPUSH
20717: CALL_OW 321
20721: PUSH
20722: LD_INT 2
20724: EQUAL
20725: ST_TO_ADDR
20726: GO 21048
20728: LD_INT 20
20730: DOUBLE
20731: EQUAL
20732: IFTRUE 20736
20734: GO 20761
20736: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
20737: LD_ADDR_VAR 0 3
20741: PUSH
20742: LD_INT 6
20744: PPUSH
20745: LD_VAR 0 1
20749: PPUSH
20750: CALL_OW 321
20754: PUSH
20755: LD_INT 2
20757: EQUAL
20758: ST_TO_ADDR
20759: GO 21048
20761: LD_INT 22
20763: DOUBLE
20764: EQUAL
20765: IFTRUE 20775
20767: LD_INT 36
20769: DOUBLE
20770: EQUAL
20771: IFTRUE 20775
20773: GO 20800
20775: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
20776: LD_ADDR_VAR 0 3
20780: PUSH
20781: LD_INT 15
20783: PPUSH
20784: LD_VAR 0 1
20788: PPUSH
20789: CALL_OW 321
20793: PUSH
20794: LD_INT 2
20796: EQUAL
20797: ST_TO_ADDR
20798: GO 21048
20800: LD_INT 30
20802: DOUBLE
20803: EQUAL
20804: IFTRUE 20808
20806: GO 20833
20808: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
20809: LD_ADDR_VAR 0 3
20813: PUSH
20814: LD_INT 20
20816: PPUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL_OW 321
20826: PUSH
20827: LD_INT 2
20829: EQUAL
20830: ST_TO_ADDR
20831: GO 21048
20833: LD_INT 28
20835: DOUBLE
20836: EQUAL
20837: IFTRUE 20847
20839: LD_INT 21
20841: DOUBLE
20842: EQUAL
20843: IFTRUE 20847
20845: GO 20872
20847: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
20848: LD_ADDR_VAR 0 3
20852: PUSH
20853: LD_INT 21
20855: PPUSH
20856: LD_VAR 0 1
20860: PPUSH
20861: CALL_OW 321
20865: PUSH
20866: LD_INT 2
20868: EQUAL
20869: ST_TO_ADDR
20870: GO 21048
20872: LD_INT 16
20874: DOUBLE
20875: EQUAL
20876: IFTRUE 20880
20878: GO 20907
20880: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
20881: LD_ADDR_VAR 0 3
20885: PUSH
20886: LD_EXP 52
20890: PPUSH
20891: LD_VAR 0 1
20895: PPUSH
20896: CALL_OW 321
20900: PUSH
20901: LD_INT 2
20903: EQUAL
20904: ST_TO_ADDR
20905: GO 21048
20907: LD_INT 19
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20921
20913: LD_INT 23
20915: DOUBLE
20916: EQUAL
20917: IFTRUE 20921
20919: GO 20948
20921: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
20922: LD_ADDR_VAR 0 3
20926: PUSH
20927: LD_EXP 51
20931: PPUSH
20932: LD_VAR 0 1
20936: PPUSH
20937: CALL_OW 321
20941: PUSH
20942: LD_INT 2
20944: EQUAL
20945: ST_TO_ADDR
20946: GO 21048
20948: LD_INT 17
20950: DOUBLE
20951: EQUAL
20952: IFTRUE 20956
20954: GO 20981
20956: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
20957: LD_ADDR_VAR 0 3
20961: PUSH
20962: LD_INT 39
20964: PPUSH
20965: LD_VAR 0 1
20969: PPUSH
20970: CALL_OW 321
20974: PUSH
20975: LD_INT 2
20977: EQUAL
20978: ST_TO_ADDR
20979: GO 21048
20981: LD_INT 18
20983: DOUBLE
20984: EQUAL
20985: IFTRUE 20989
20987: GO 21014
20989: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
20990: LD_ADDR_VAR 0 3
20994: PUSH
20995: LD_INT 40
20997: PPUSH
20998: LD_VAR 0 1
21002: PPUSH
21003: CALL_OW 321
21007: PUSH
21008: LD_INT 2
21010: EQUAL
21011: ST_TO_ADDR
21012: GO 21048
21014: LD_INT 27
21016: DOUBLE
21017: EQUAL
21018: IFTRUE 21022
21020: GO 21047
21022: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
21023: LD_ADDR_VAR 0 3
21027: PUSH
21028: LD_INT 35
21030: PPUSH
21031: LD_VAR 0 1
21035: PPUSH
21036: CALL_OW 321
21040: PUSH
21041: LD_INT 2
21043: EQUAL
21044: ST_TO_ADDR
21045: GO 21048
21047: POP
// end ;
21048: LD_VAR 0 3
21052: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21053: LD_INT 0
21055: PPUSH
21056: PPUSH
21057: PPUSH
21058: PPUSH
21059: PPUSH
21060: PPUSH
21061: PPUSH
21062: PPUSH
21063: PPUSH
21064: PPUSH
21065: PPUSH
// result := false ;
21066: LD_ADDR_VAR 0 6
21070: PUSH
21071: LD_INT 0
21073: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21074: LD_VAR 0 1
21078: NOT
21079: PUSH
21080: LD_VAR 0 1
21084: PPUSH
21085: CALL_OW 266
21089: PUSH
21090: LD_INT 0
21092: PUSH
21093: LD_INT 1
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: IN
21100: NOT
21101: OR
21102: PUSH
21103: LD_VAR 0 2
21107: NOT
21108: OR
21109: PUSH
21110: LD_VAR 0 5
21114: PUSH
21115: LD_INT 0
21117: PUSH
21118: LD_INT 1
21120: PUSH
21121: LD_INT 2
21123: PUSH
21124: LD_INT 3
21126: PUSH
21127: LD_INT 4
21129: PUSH
21130: LD_INT 5
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: IN
21141: NOT
21142: OR
21143: PUSH
21144: LD_VAR 0 3
21148: PPUSH
21149: LD_VAR 0 4
21153: PPUSH
21154: CALL_OW 488
21158: NOT
21159: OR
21160: IFFALSE 21164
// exit ;
21162: GO 21900
// side := GetSide ( depot ) ;
21164: LD_ADDR_VAR 0 9
21168: PUSH
21169: LD_VAR 0 1
21173: PPUSH
21174: CALL_OW 255
21178: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21179: LD_VAR 0 9
21183: PPUSH
21184: LD_VAR 0 2
21188: PPUSH
21189: CALL 20673 0 2
21193: NOT
21194: IFFALSE 21198
// exit ;
21196: GO 21900
// pom := GetBase ( depot ) ;
21198: LD_ADDR_VAR 0 10
21202: PUSH
21203: LD_VAR 0 1
21207: PPUSH
21208: CALL_OW 274
21212: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21213: LD_ADDR_VAR 0 11
21217: PUSH
21218: LD_VAR 0 2
21222: PPUSH
21223: LD_VAR 0 1
21227: PPUSH
21228: CALL_OW 248
21232: PPUSH
21233: CALL_OW 450
21237: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21238: LD_VAR 0 10
21242: PPUSH
21243: LD_INT 1
21245: PPUSH
21246: CALL_OW 275
21250: PUSH
21251: LD_VAR 0 11
21255: PUSH
21256: LD_INT 1
21258: ARRAY
21259: GREATEREQUAL
21260: PUSH
21261: LD_VAR 0 10
21265: PPUSH
21266: LD_INT 2
21268: PPUSH
21269: CALL_OW 275
21273: PUSH
21274: LD_VAR 0 11
21278: PUSH
21279: LD_INT 2
21281: ARRAY
21282: GREATEREQUAL
21283: AND
21284: PUSH
21285: LD_VAR 0 10
21289: PPUSH
21290: LD_INT 3
21292: PPUSH
21293: CALL_OW 275
21297: PUSH
21298: LD_VAR 0 11
21302: PUSH
21303: LD_INT 3
21305: ARRAY
21306: GREATEREQUAL
21307: AND
21308: NOT
21309: IFFALSE 21313
// exit ;
21311: GO 21900
// if GetBType ( depot ) = b_depot then
21313: LD_VAR 0 1
21317: PPUSH
21318: CALL_OW 266
21322: PUSH
21323: LD_INT 0
21325: EQUAL
21326: IFFALSE 21338
// dist := 28 else
21328: LD_ADDR_VAR 0 14
21332: PUSH
21333: LD_INT 28
21335: ST_TO_ADDR
21336: GO 21346
// dist := 36 ;
21338: LD_ADDR_VAR 0 14
21342: PUSH
21343: LD_INT 36
21345: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21346: LD_VAR 0 1
21350: PPUSH
21351: LD_VAR 0 3
21355: PPUSH
21356: LD_VAR 0 4
21360: PPUSH
21361: CALL_OW 297
21365: PUSH
21366: LD_VAR 0 14
21370: GREATER
21371: IFFALSE 21375
// exit ;
21373: GO 21900
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21375: LD_ADDR_VAR 0 12
21379: PUSH
21380: LD_VAR 0 2
21384: PPUSH
21385: LD_VAR 0 3
21389: PPUSH
21390: LD_VAR 0 4
21394: PPUSH
21395: LD_VAR 0 5
21399: PPUSH
21400: LD_VAR 0 1
21404: PPUSH
21405: CALL_OW 248
21409: PPUSH
21410: LD_INT 0
21412: PPUSH
21413: CALL 21905 0 6
21417: ST_TO_ADDR
// if not hexes then
21418: LD_VAR 0 12
21422: NOT
21423: IFFALSE 21427
// exit ;
21425: GO 21900
// hex := GetHexInfo ( x , y ) ;
21427: LD_ADDR_VAR 0 15
21431: PUSH
21432: LD_VAR 0 3
21436: PPUSH
21437: LD_VAR 0 4
21441: PPUSH
21442: CALL_OW 546
21446: ST_TO_ADDR
// if hex [ 1 ] then
21447: LD_VAR 0 15
21451: PUSH
21452: LD_INT 1
21454: ARRAY
21455: IFFALSE 21459
// exit ;
21457: GO 21900
// height := hex [ 2 ] ;
21459: LD_ADDR_VAR 0 13
21463: PUSH
21464: LD_VAR 0 15
21468: PUSH
21469: LD_INT 2
21471: ARRAY
21472: ST_TO_ADDR
// for i = 1 to hexes do
21473: LD_ADDR_VAR 0 7
21477: PUSH
21478: DOUBLE
21479: LD_INT 1
21481: DEC
21482: ST_TO_ADDR
21483: LD_VAR 0 12
21487: PUSH
21488: FOR_TO
21489: IFFALSE 21819
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21491: LD_VAR 0 12
21495: PUSH
21496: LD_VAR 0 7
21500: ARRAY
21501: PUSH
21502: LD_INT 1
21504: ARRAY
21505: PPUSH
21506: LD_VAR 0 12
21510: PUSH
21511: LD_VAR 0 7
21515: ARRAY
21516: PUSH
21517: LD_INT 2
21519: ARRAY
21520: PPUSH
21521: CALL_OW 488
21525: NOT
21526: PUSH
21527: LD_VAR 0 12
21531: PUSH
21532: LD_VAR 0 7
21536: ARRAY
21537: PUSH
21538: LD_INT 1
21540: ARRAY
21541: PPUSH
21542: LD_VAR 0 12
21546: PUSH
21547: LD_VAR 0 7
21551: ARRAY
21552: PUSH
21553: LD_INT 2
21555: ARRAY
21556: PPUSH
21557: CALL_OW 428
21561: PUSH
21562: LD_INT 0
21564: GREATER
21565: OR
21566: PUSH
21567: LD_VAR 0 12
21571: PUSH
21572: LD_VAR 0 7
21576: ARRAY
21577: PUSH
21578: LD_INT 1
21580: ARRAY
21581: PPUSH
21582: LD_VAR 0 12
21586: PUSH
21587: LD_VAR 0 7
21591: ARRAY
21592: PUSH
21593: LD_INT 2
21595: ARRAY
21596: PPUSH
21597: CALL_OW 351
21601: OR
21602: IFFALSE 21608
// exit ;
21604: POP
21605: POP
21606: GO 21900
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21608: LD_ADDR_VAR 0 8
21612: PUSH
21613: LD_VAR 0 12
21617: PUSH
21618: LD_VAR 0 7
21622: ARRAY
21623: PUSH
21624: LD_INT 1
21626: ARRAY
21627: PPUSH
21628: LD_VAR 0 12
21632: PUSH
21633: LD_VAR 0 7
21637: ARRAY
21638: PUSH
21639: LD_INT 2
21641: ARRAY
21642: PPUSH
21643: CALL_OW 546
21647: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21648: LD_VAR 0 8
21652: PUSH
21653: LD_INT 1
21655: ARRAY
21656: PUSH
21657: LD_VAR 0 8
21661: PUSH
21662: LD_INT 2
21664: ARRAY
21665: PUSH
21666: LD_VAR 0 13
21670: PUSH
21671: LD_INT 2
21673: PLUS
21674: GREATER
21675: OR
21676: PUSH
21677: LD_VAR 0 8
21681: PUSH
21682: LD_INT 2
21684: ARRAY
21685: PUSH
21686: LD_VAR 0 13
21690: PUSH
21691: LD_INT 2
21693: MINUS
21694: LESS
21695: OR
21696: PUSH
21697: LD_VAR 0 8
21701: PUSH
21702: LD_INT 3
21704: ARRAY
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: LD_INT 8
21711: PUSH
21712: LD_INT 9
21714: PUSH
21715: LD_INT 10
21717: PUSH
21718: LD_INT 11
21720: PUSH
21721: LD_INT 12
21723: PUSH
21724: LD_INT 13
21726: PUSH
21727: LD_INT 16
21729: PUSH
21730: LD_INT 17
21732: PUSH
21733: LD_INT 18
21735: PUSH
21736: LD_INT 19
21738: PUSH
21739: LD_INT 20
21741: PUSH
21742: LD_INT 21
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: IN
21760: NOT
21761: OR
21762: PUSH
21763: LD_VAR 0 8
21767: PUSH
21768: LD_INT 5
21770: ARRAY
21771: NOT
21772: OR
21773: PUSH
21774: LD_VAR 0 8
21778: PUSH
21779: LD_INT 6
21781: ARRAY
21782: PUSH
21783: LD_INT 1
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: LD_INT 7
21791: PUSH
21792: LD_INT 9
21794: PUSH
21795: LD_INT 10
21797: PUSH
21798: LD_INT 11
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: IN
21809: NOT
21810: OR
21811: IFFALSE 21817
// exit ;
21813: POP
21814: POP
21815: GO 21900
// end ;
21817: GO 21488
21819: POP
21820: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21821: LD_VAR 0 9
21825: PPUSH
21826: LD_VAR 0 3
21830: PPUSH
21831: LD_VAR 0 4
21835: PPUSH
21836: LD_INT 20
21838: PPUSH
21839: CALL 13846 0 4
21843: PUSH
21844: LD_INT 4
21846: ARRAY
21847: IFFALSE 21851
// exit ;
21849: GO 21900
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21851: LD_VAR 0 2
21855: PUSH
21856: LD_INT 29
21858: PUSH
21859: LD_INT 30
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: IN
21866: PUSH
21867: LD_VAR 0 3
21871: PPUSH
21872: LD_VAR 0 4
21876: PPUSH
21877: LD_VAR 0 9
21881: PPUSH
21882: CALL_OW 440
21886: NOT
21887: AND
21888: IFFALSE 21892
// exit ;
21890: GO 21900
// result := true ;
21892: LD_ADDR_VAR 0 6
21896: PUSH
21897: LD_INT 1
21899: ST_TO_ADDR
// end ;
21900: LD_VAR 0 6
21904: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21905: LD_INT 0
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
21916: PPUSH
21917: PPUSH
21918: PPUSH
21919: PPUSH
21920: PPUSH
21921: PPUSH
21922: PPUSH
21923: PPUSH
21924: PPUSH
21925: PPUSH
21926: PPUSH
21927: PPUSH
21928: PPUSH
21929: PPUSH
21930: PPUSH
21931: PPUSH
21932: PPUSH
21933: PPUSH
21934: PPUSH
21935: PPUSH
21936: PPUSH
21937: PPUSH
21938: PPUSH
21939: PPUSH
21940: PPUSH
21941: PPUSH
21942: PPUSH
21943: PPUSH
21944: PPUSH
21945: PPUSH
21946: PPUSH
21947: PPUSH
21948: PPUSH
21949: PPUSH
21950: PPUSH
21951: PPUSH
21952: PPUSH
21953: PPUSH
21954: PPUSH
21955: PPUSH
21956: PPUSH
21957: PPUSH
21958: PPUSH
21959: PPUSH
21960: PPUSH
21961: PPUSH
21962: PPUSH
21963: PPUSH
21964: PPUSH
// result = [ ] ;
21965: LD_ADDR_VAR 0 7
21969: PUSH
21970: EMPTY
21971: ST_TO_ADDR
// temp_list = [ ] ;
21972: LD_ADDR_VAR 0 9
21976: PUSH
21977: EMPTY
21978: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
21979: LD_VAR 0 4
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: LD_INT 2
21992: PUSH
21993: LD_INT 3
21995: PUSH
21996: LD_INT 4
21998: PUSH
21999: LD_INT 5
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: IN
22010: NOT
22011: PUSH
22012: LD_VAR 0 1
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: LD_INT 1
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: IN
22027: PUSH
22028: LD_VAR 0 5
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 3
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: LIST
22046: IN
22047: NOT
22048: AND
22049: OR
22050: IFFALSE 22054
// exit ;
22052: GO 40445
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22054: LD_VAR 0 1
22058: PUSH
22059: LD_INT 6
22061: PUSH
22062: LD_INT 7
22064: PUSH
22065: LD_INT 8
22067: PUSH
22068: LD_INT 13
22070: PUSH
22071: LD_INT 12
22073: PUSH
22074: LD_INT 15
22076: PUSH
22077: LD_INT 11
22079: PUSH
22080: LD_INT 14
22082: PUSH
22083: LD_INT 10
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: IN
22097: IFFALSE 22107
// btype = b_lab ;
22099: LD_ADDR_VAR 0 1
22103: PUSH
22104: LD_INT 6
22106: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22107: LD_VAR 0 6
22111: PUSH
22112: LD_INT 0
22114: PUSH
22115: LD_INT 1
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: IN
22126: NOT
22127: PUSH
22128: LD_VAR 0 1
22132: PUSH
22133: LD_INT 0
22135: PUSH
22136: LD_INT 1
22138: PUSH
22139: LD_INT 2
22141: PUSH
22142: LD_INT 3
22144: PUSH
22145: LD_INT 6
22147: PUSH
22148: LD_INT 36
22150: PUSH
22151: LD_INT 4
22153: PUSH
22154: LD_INT 5
22156: PUSH
22157: LD_INT 31
22159: PUSH
22160: LD_INT 32
22162: PUSH
22163: LD_INT 33
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: IN
22179: NOT
22180: PUSH
22181: LD_VAR 0 6
22185: PUSH
22186: LD_INT 1
22188: EQUAL
22189: AND
22190: OR
22191: PUSH
22192: LD_VAR 0 1
22196: PUSH
22197: LD_INT 2
22199: PUSH
22200: LD_INT 3
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: IN
22207: NOT
22208: PUSH
22209: LD_VAR 0 6
22213: PUSH
22214: LD_INT 2
22216: EQUAL
22217: AND
22218: OR
22219: IFFALSE 22229
// mode = 0 ;
22221: LD_ADDR_VAR 0 6
22225: PUSH
22226: LD_INT 0
22228: ST_TO_ADDR
// case mode of 0 :
22229: LD_VAR 0 6
22233: PUSH
22234: LD_INT 0
22236: DOUBLE
22237: EQUAL
22238: IFTRUE 22242
22240: GO 33695
22242: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22243: LD_ADDR_VAR 0 11
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: LD_INT 1
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: LD_INT 0
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 1
22312: NEG
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: LD_INT 2
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: LD_INT 2
22339: NEG
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 1
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: LD_INT 2
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 1
22378: NEG
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: LD_INT 3
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: LD_INT 3
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 1
22409: NEG
22410: PUSH
22411: LD_INT 2
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22436: LD_ADDR_VAR 0 12
22440: PUSH
22441: LD_INT 0
22443: PUSH
22444: LD_INT 0
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 0
22453: PUSH
22454: LD_INT 1
22456: NEG
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 1
22464: PUSH
22465: LD_INT 0
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 0
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 1
22505: NEG
22506: PUSH
22507: LD_INT 1
22509: NEG
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: LD_INT 1
22520: NEG
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 2
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 2
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 1
22548: NEG
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 2
22559: NEG
22560: PUSH
22561: LD_INT 0
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 2
22570: NEG
22571: PUSH
22572: LD_INT 1
22574: NEG
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 2
22582: NEG
22583: PUSH
22584: LD_INT 1
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 3
22593: NEG
22594: PUSH
22595: LD_INT 0
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 3
22604: NEG
22605: PUSH
22606: LD_INT 1
22608: NEG
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22632: LD_ADDR_VAR 0 13
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 0
22649: PUSH
22650: LD_INT 1
22652: NEG
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 1
22660: PUSH
22661: LD_INT 0
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 1
22670: PUSH
22671: LD_INT 1
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 0
22680: PUSH
22681: LD_INT 1
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 1
22690: NEG
22691: PUSH
22692: LD_INT 0
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 1
22701: NEG
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 1
22713: NEG
22714: PUSH
22715: LD_INT 2
22717: NEG
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 2
22725: PUSH
22726: LD_INT 1
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 2
22735: PUSH
22736: LD_INT 2
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 1
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 2
22755: NEG
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 2
22767: NEG
22768: PUSH
22769: LD_INT 2
22771: NEG
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 2
22779: NEG
22780: PUSH
22781: LD_INT 3
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 3
22791: NEG
22792: PUSH
22793: LD_INT 2
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 3
22803: NEG
22804: PUSH
22805: LD_INT 3
22807: NEG
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22831: LD_ADDR_VAR 0 14
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: LD_INT 0
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 0
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: LD_INT 0
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: LD_INT 1
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 1
22912: NEG
22913: PUSH
22914: LD_INT 2
22916: NEG
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: LD_INT 2
22927: NEG
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 1
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 1
22946: PUSH
22947: LD_INT 2
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 0
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 1
22966: NEG
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 1
22977: NEG
22978: PUSH
22979: LD_INT 3
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: LD_INT 3
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: PUSH
23001: LD_INT 2
23003: NEG
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23027: LD_ADDR_VAR 0 15
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 1
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 0
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 1
23085: NEG
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: NEG
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 1
23108: PUSH
23109: LD_INT 1
23111: NEG
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: LD_INT 0
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: LD_INT 1
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 1
23139: NEG
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 2
23150: NEG
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 2
23161: NEG
23162: PUSH
23163: LD_INT 1
23165: NEG
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 3
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 3
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23220: LD_ADDR_VAR 0 16
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 1
23248: PUSH
23249: LD_INT 0
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 1
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 0
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: LD_INT 0
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 1
23289: NEG
23290: PUSH
23291: LD_INT 1
23293: NEG
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 1
23301: NEG
23302: PUSH
23303: LD_INT 2
23305: NEG
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 2
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 2
23343: NEG
23344: PUSH
23345: LD_INT 1
23347: NEG
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 2
23355: NEG
23356: PUSH
23357: LD_INT 2
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 3
23367: PUSH
23368: LD_INT 2
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 3
23377: PUSH
23378: LD_INT 3
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 2
23387: PUSH
23388: LD_INT 3
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23413: LD_ADDR_VAR 0 17
23417: PUSH
23418: LD_INT 0
23420: PUSH
23421: LD_INT 0
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: LD_INT 1
23433: NEG
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: LD_INT 0
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: PUSH
23452: LD_INT 1
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 1
23471: NEG
23472: PUSH
23473: LD_INT 0
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 1
23482: NEG
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: LD_INT 2
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 0
23506: PUSH
23507: LD_INT 2
23509: NEG
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 1
23517: PUSH
23518: LD_INT 1
23520: NEG
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 2
23528: PUSH
23529: LD_INT 0
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 2
23538: PUSH
23539: LD_INT 1
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 2
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 2
23600: NEG
23601: PUSH
23602: LD_INT 1
23604: NEG
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 2
23612: NEG
23613: PUSH
23614: LD_INT 2
23616: NEG
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23643: LD_ADDR_VAR 0 18
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 1
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 1
23701: NEG
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: NEG
23713: PUSH
23714: LD_INT 1
23716: NEG
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 1
23724: NEG
23725: PUSH
23726: LD_INT 2
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: LD_INT 2
23739: NEG
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 2
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 2
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 2
23778: PUSH
23779: LD_INT 2
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 1
23788: PUSH
23789: LD_INT 2
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 0
23798: PUSH
23799: LD_INT 2
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 1
23808: NEG
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 2
23819: NEG
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 2
23830: NEG
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 2
23842: NEG
23843: PUSH
23844: LD_INT 2
23846: NEG
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23873: LD_ADDR_VAR 0 19
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: LD_INT 0
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 1
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 1
23931: NEG
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: LD_INT 2
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: LD_INT 2
23969: NEG
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: LD_INT 1
23980: NEG
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 2
23988: PUSH
23989: LD_INT 0
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 2
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 2
24008: PUSH
24009: LD_INT 2
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 1
24018: PUSH
24019: LD_INT 2
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: LD_INT 2
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 1
24038: NEG
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 2
24049: NEG
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 2
24060: NEG
24061: PUSH
24062: LD_INT 1
24064: NEG
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 2
24072: NEG
24073: PUSH
24074: LD_INT 2
24076: NEG
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24103: LD_ADDR_VAR 0 20
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: LD_INT 0
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: LD_INT 0
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 0
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 1
24161: NEG
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 1
24172: NEG
24173: PUSH
24174: LD_INT 1
24176: NEG
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: LD_INT 2
24188: NEG
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: LD_INT 2
24199: NEG
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: LD_INT 1
24210: NEG
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 2
24218: PUSH
24219: LD_INT 0
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 2
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 2
24238: PUSH
24239: LD_INT 2
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: LD_INT 2
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 0
24258: PUSH
24259: LD_INT 2
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: NEG
24269: PUSH
24270: LD_INT 1
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 2
24279: NEG
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 2
24290: NEG
24291: PUSH
24292: LD_INT 1
24294: NEG
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 2
24302: NEG
24303: PUSH
24304: LD_INT 2
24306: NEG
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24333: LD_ADDR_VAR 0 21
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: LD_INT 0
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: LD_INT 1
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 1
24391: NEG
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 1
24402: NEG
24403: PUSH
24404: LD_INT 1
24406: NEG
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 1
24414: NEG
24415: PUSH
24416: LD_INT 2
24418: NEG
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: LD_INT 2
24429: NEG
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 1
24437: PUSH
24438: LD_INT 1
24440: NEG
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 2
24458: PUSH
24459: LD_INT 1
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 2
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: LD_INT 2
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 1
24498: NEG
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 2
24509: NEG
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 2
24520: NEG
24521: PUSH
24522: LD_INT 1
24524: NEG
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 2
24532: NEG
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24563: LD_ADDR_VAR 0 22
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 0
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 1
24621: NEG
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: NEG
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 1
24644: NEG
24645: PUSH
24646: LD_INT 2
24648: NEG
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: LD_INT 2
24659: NEG
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 1
24667: PUSH
24668: LD_INT 1
24670: NEG
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 2
24678: PUSH
24679: LD_INT 0
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 2
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 2
24698: PUSH
24699: LD_INT 2
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: LD_INT 2
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: LD_INT 2
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 1
24728: NEG
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 2
24739: NEG
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 2
24750: NEG
24751: PUSH
24752: LD_INT 1
24754: NEG
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 2
24762: NEG
24763: PUSH
24764: LD_INT 2
24766: NEG
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24793: LD_ADDR_VAR 0 23
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: NEG
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 1
24874: NEG
24875: PUSH
24876: LD_INT 2
24878: NEG
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: LD_INT 2
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 1
24900: NEG
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 2
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: LD_INT 2
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: LD_INT 2
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 1
24958: NEG
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 2
24969: NEG
24970: PUSH
24971: LD_INT 0
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: NEG
24981: PUSH
24982: LD_INT 1
24984: NEG
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 2
24992: NEG
24993: PUSH
24994: LD_INT 2
24996: NEG
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 2
25004: NEG
25005: PUSH
25006: LD_INT 3
25008: NEG
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: NEG
25017: PUSH
25018: LD_INT 3
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: LD_INT 2
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 2
25039: PUSH
25040: LD_INT 1
25042: NEG
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25073: LD_ADDR_VAR 0 24
25077: PUSH
25078: LD_INT 0
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: NEG
25132: PUSH
25133: LD_INT 0
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 1
25142: NEG
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: NEG
25155: PUSH
25156: LD_INT 2
25158: NEG
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: LD_INT 2
25169: NEG
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 1
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 2
25198: PUSH
25199: LD_INT 1
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 2
25208: PUSH
25209: LD_INT 2
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: NEG
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 2
25249: NEG
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 2
25272: NEG
25273: PUSH
25274: LD_INT 2
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: LD_INT 2
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: LD_INT 1
25298: NEG
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 3
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 3
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25349: LD_ADDR_VAR 0 25
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: LD_INT 1
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: LD_INT 1
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: LD_INT 1
25422: NEG
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 2
25445: NEG
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 2
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 2
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: LD_INT 2
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: LD_INT 2
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: LD_INT 2
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 2
25525: NEG
25526: PUSH
25527: LD_INT 0
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 2
25536: NEG
25537: PUSH
25538: LD_INT 1
25540: NEG
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 2
25548: NEG
25549: PUSH
25550: LD_INT 2
25552: NEG
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 3
25560: PUSH
25561: LD_INT 1
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 3
25570: PUSH
25571: LD_INT 2
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: LD_INT 3
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: LD_INT 3
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25623: LD_ADDR_VAR 0 26
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 0
25640: PUSH
25641: LD_INT 1
25643: NEG
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 1
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: NEG
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: PUSH
25706: LD_INT 2
25708: NEG
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: LD_INT 2
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: LD_INT 1
25730: NEG
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 2
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 2
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: LD_INT 2
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: LD_INT 2
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 1
25788: NEG
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 2
25799: NEG
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 2
25810: NEG
25811: PUSH
25812: LD_INT 1
25814: NEG
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 2
25822: NEG
25823: PUSH
25824: LD_INT 2
25826: NEG
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: LD_INT 3
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 1
25844: PUSH
25845: LD_INT 3
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 1
25854: NEG
25855: PUSH
25856: LD_INT 2
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 2
25865: NEG
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25899: LD_ADDR_VAR 0 27
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: LD_INT 1
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: LD_INT 0
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 1
25968: NEG
25969: PUSH
25970: LD_INT 1
25972: NEG
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: NEG
25981: PUSH
25982: LD_INT 2
25984: NEG
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 0
25992: PUSH
25993: LD_INT 2
25995: NEG
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 1
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 2
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: LD_INT 2
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: LD_INT 2
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 0
26054: PUSH
26055: LD_INT 2
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: NEG
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 2
26075: NEG
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 2
26086: NEG
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 2
26098: NEG
26099: PUSH
26100: LD_INT 2
26102: NEG
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 1
26110: NEG
26111: PUSH
26112: LD_INT 2
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 2
26121: NEG
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 3
26132: NEG
26133: PUSH
26134: LD_INT 1
26136: NEG
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 3
26144: NEG
26145: PUSH
26146: LD_INT 2
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26179: LD_ADDR_VAR 0 28
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: NEG
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 1
26248: NEG
26249: PUSH
26250: LD_INT 1
26252: NEG
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 1
26260: NEG
26261: PUSH
26262: LD_INT 2
26264: NEG
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: LD_INT 2
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: LD_INT 1
26286: NEG
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 2
26294: PUSH
26295: LD_INT 0
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 2
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 2
26314: PUSH
26315: LD_INT 2
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: LD_INT 2
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: LD_INT 2
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: LD_INT 1
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 2
26355: NEG
26356: PUSH
26357: LD_INT 0
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 2
26366: NEG
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 2
26378: NEG
26379: PUSH
26380: LD_INT 2
26382: NEG
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 2
26390: NEG
26391: PUSH
26392: LD_INT 3
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: NEG
26403: PUSH
26404: LD_INT 3
26406: NEG
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 3
26414: NEG
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 3
26426: NEG
26427: PUSH
26428: LD_INT 2
26430: NEG
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26461: LD_ADDR_VAR 0 29
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: LD_INT 1
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 1
26530: NEG
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: LD_INT 2
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: LD_INT 1
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: LD_INT 2
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: LD_INT 2
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: PUSH
26618: LD_INT 1
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 2
26627: NEG
26628: PUSH
26629: LD_INT 1
26631: NEG
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 2
26639: NEG
26640: PUSH
26641: LD_INT 2
26643: NEG
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 2
26651: NEG
26652: PUSH
26653: LD_INT 3
26655: NEG
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 2
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 3
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: LD_INT 3
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 3
26705: NEG
26706: PUSH
26707: LD_INT 2
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26740: LD_ADDR_VAR 0 30
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 1
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: LD_INT 1
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 0
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: NEG
26822: PUSH
26823: LD_INT 2
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: LD_INT 2
26836: NEG
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 2
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 2
26875: PUSH
26876: LD_INT 2
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: PUSH
26886: LD_INT 2
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: NEG
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 2
26906: NEG
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 2
26917: NEG
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: LD_INT 3
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: LD_INT 2
26944: NEG
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 3
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 2
26962: PUSH
26963: LD_INT 3
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 2
26972: NEG
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 3
26983: NEG
26984: PUSH
26985: LD_INT 1
26987: NEG
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27018: LD_ADDR_VAR 0 31
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: NEG
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: NEG
27088: PUSH
27089: LD_INT 1
27091: NEG
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: LD_INT 2
27103: NEG
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: LD_INT 1
27114: NEG
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 2
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: LD_INT 2
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: LD_INT 1
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 2
27183: NEG
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: NEG
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 2
27207: NEG
27208: PUSH
27209: LD_INT 3
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 2
27219: PUSH
27220: LD_INT 1
27222: NEG
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 3
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: LD_INT 3
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 1
27250: NEG
27251: PUSH
27252: LD_INT 2
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 3
27261: NEG
27262: PUSH
27263: LD_INT 2
27265: NEG
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27296: LD_ADDR_VAR 0 32
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 0
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: LD_INT 1
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: LD_INT 2
27381: NEG
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 2
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 1
27403: NEG
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 2
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 2
27421: PUSH
27422: LD_INT 2
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: LD_INT 2
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 0
27441: PUSH
27442: LD_INT 2
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 2
27462: NEG
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 2
27473: NEG
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 1
27485: NEG
27486: PUSH
27487: LD_INT 3
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: LD_INT 2
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 3
27508: PUSH
27509: LD_INT 2
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: LD_INT 3
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 2
27528: NEG
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 3
27539: NEG
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27574: LD_ADDR_VAR 0 33
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 1
27594: NEG
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: LD_INT 1
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: LD_INT 2
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: LD_INT 1
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 2
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 2
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: LD_INT 2
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: LD_INT 2
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 1
27718: NEG
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: NEG
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 2
27740: NEG
27741: PUSH
27742: LD_INT 1
27744: NEG
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 2
27752: NEG
27753: PUSH
27754: LD_INT 2
27756: NEG
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 2
27764: NEG
27765: PUSH
27766: LD_INT 3
27768: NEG
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 3
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: PUSH
27798: LD_INT 3
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: LD_INT 2
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 3
27818: NEG
27819: PUSH
27820: LD_INT 2
27822: NEG
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27853: LD_ADDR_VAR 0 34
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: LD_INT 1
27873: NEG
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: LD_INT 0
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: LD_INT 1
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 0
27901: PUSH
27902: LD_INT 1
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: PUSH
27924: LD_INT 1
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: NEG
27935: PUSH
27936: LD_INT 2
27938: NEG
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 0
27946: PUSH
27947: LD_INT 2
27949: NEG
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 2
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: LD_INT 2
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: LD_INT 2
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 1
27998: NEG
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 2
28009: NEG
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 2
28032: NEG
28033: PUSH
28034: LD_INT 2
28036: NEG
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 1
28044: NEG
28045: PUSH
28046: LD_INT 3
28048: NEG
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: LD_INT 2
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 3
28067: PUSH
28068: LD_INT 2
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: LD_INT 3
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 2
28087: NEG
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 3
28098: NEG
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28133: LD_ADDR_VAR 0 35
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 1
28191: NEG
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: PUSH
28204: LD_INT 1
28206: NEG
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 2
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 2
28224: NEG
28225: PUSH
28226: LD_INT 1
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28245: LD_ADDR_VAR 0 36
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: LD_INT 0
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 0
28262: PUSH
28263: LD_INT 1
28265: NEG
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 1
28273: PUSH
28274: LD_INT 0
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: LD_INT 1
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: LD_INT 1
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 1
28326: NEG
28327: PUSH
28328: LD_INT 2
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: LD_INT 2
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28357: LD_ADDR_VAR 0 37
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 0
28374: PUSH
28375: LD_INT 1
28377: NEG
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: LD_INT 0
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 1
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: NEG
28427: PUSH
28428: LD_INT 1
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28469: LD_ADDR_VAR 0 38
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 1
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 1
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 1
28527: NEG
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: NEG
28539: PUSH
28540: LD_INT 1
28542: NEG
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 2
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28581: LD_ADDR_VAR 0 39
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: LD_INT 0
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: LD_INT 1
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: LD_INT 2
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: LD_INT 2
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28693: LD_ADDR_VAR 0 40
28697: PUSH
28698: LD_INT 0
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: LD_INT 1
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 1
28751: NEG
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: NEG
28763: PUSH
28764: LD_INT 1
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28805: LD_ADDR_VAR 0 41
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: LD_INT 0
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: NEG
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: NEG
28875: PUSH
28876: LD_INT 1
28878: NEG
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: LD_INT 2
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 2
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 2
28929: PUSH
28930: LD_INT 2
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: PUSH
28940: LD_INT 2
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: LD_INT 1
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 2
28960: NEG
28961: PUSH
28962: LD_INT 0
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: NEG
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 2
28983: NEG
28984: PUSH
28985: LD_INT 2
28987: NEG
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 2
28995: NEG
28996: PUSH
28997: LD_INT 3
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 2
29007: PUSH
29008: LD_INT 1
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 3
29018: PUSH
29019: LD_INT 0
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 3
29038: PUSH
29039: LD_INT 2
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 3
29048: PUSH
29049: LD_INT 3
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 2
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 2
29068: NEG
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 3
29079: NEG
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 3
29090: NEG
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 3
29102: NEG
29103: PUSH
29104: LD_INT 2
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 3
29114: NEG
29115: PUSH
29116: LD_INT 3
29118: NEG
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29155: LD_ADDR_VAR 0 42
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: LD_INT 1
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 1
29224: NEG
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 1
29236: NEG
29237: PUSH
29238: LD_INT 2
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: LD_INT 2
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 1
29262: NEG
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 2
29280: PUSH
29281: LD_INT 2
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: LD_INT 2
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: LD_INT 2
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 2
29333: NEG
29334: PUSH
29335: LD_INT 2
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 2
29345: NEG
29346: PUSH
29347: LD_INT 3
29349: NEG
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: NEG
29358: PUSH
29359: LD_INT 3
29361: NEG
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: LD_INT 3
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: LD_INT 2
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 3
29391: PUSH
29392: LD_INT 2
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 3
29401: PUSH
29402: LD_INT 3
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: LD_INT 3
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: LD_INT 3
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 1
29441: NEG
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 3
29452: NEG
29453: PUSH
29454: LD_INT 2
29456: NEG
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 3
29464: NEG
29465: PUSH
29466: LD_INT 3
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29505: LD_ADDR_VAR 0 43
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: LD_INT 1
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: LD_INT 1
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: NEG
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: NEG
29575: PUSH
29576: LD_INT 1
29578: NEG
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: PUSH
29588: LD_INT 2
29590: NEG
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: LD_INT 2
29601: NEG
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 1
29609: PUSH
29610: LD_INT 1
29612: NEG
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 2
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 0
29650: PUSH
29651: LD_INT 2
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 2
29671: NEG
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 2
29682: NEG
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: LD_INT 3
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: LD_INT 3
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: LD_INT 2
29720: NEG
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 2
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 3
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 3
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 1
29759: PUSH
29760: LD_INT 3
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 0
29769: PUSH
29770: LD_INT 3
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 2
29790: NEG
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 3
29801: NEG
29802: PUSH
29803: LD_INT 0
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 3
29812: NEG
29813: PUSH
29814: LD_INT 1
29816: NEG
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29853: LD_ADDR_VAR 0 44
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 1
29881: PUSH
29882: LD_INT 0
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: LD_INT 2
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 2
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 2
29977: PUSH
29978: LD_INT 2
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: LD_INT 2
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: NEG
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 2
30031: NEG
30032: PUSH
30033: LD_INT 2
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 2
30043: NEG
30044: PUSH
30045: LD_INT 3
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 2
30055: PUSH
30056: LD_INT 1
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: LD_INT 0
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 3
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 3
30086: PUSH
30087: LD_INT 2
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: LD_INT 3
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 2
30106: PUSH
30107: LD_INT 3
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 2
30116: NEG
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 3
30127: NEG
30128: PUSH
30129: LD_INT 0
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 3
30138: NEG
30139: PUSH
30140: LD_INT 1
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 3
30150: NEG
30151: PUSH
30152: LD_INT 2
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 3
30162: NEG
30163: PUSH
30164: LD_INT 3
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30203: LD_ADDR_VAR 0 45
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 0
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: NEG
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: LD_INT 2
30288: NEG
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: LD_INT 2
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 2
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 2
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: LD_INT 1
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: NEG
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: NEG
30382: PUSH
30383: LD_INT 2
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 2
30393: NEG
30394: PUSH
30395: LD_INT 3
30397: NEG
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: LD_INT 3
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: LD_INT 3
30420: NEG
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: LD_INT 2
30431: NEG
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 3
30439: PUSH
30440: LD_INT 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 3
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: LD_INT 3
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: LD_INT 3
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: NEG
30490: PUSH
30491: LD_INT 2
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 3
30500: NEG
30501: PUSH
30502: LD_INT 2
30504: NEG
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 3
30512: NEG
30513: PUSH
30514: LD_INT 3
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30553: LD_ADDR_VAR 0 46
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: LD_INT 1
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: LD_INT 1
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 1
30611: NEG
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: NEG
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: PUSH
30636: LD_INT 2
30638: NEG
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: LD_INT 2
30649: NEG
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: LD_INT 1
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 0
30698: PUSH
30699: LD_INT 2
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 2
30719: NEG
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 2
30730: NEG
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: LD_INT 3
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 3
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: LD_INT 2
30768: NEG
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 3
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 3
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: LD_INT 3
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: LD_INT 3
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 1
30827: NEG
30828: PUSH
30829: LD_INT 2
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 2
30838: NEG
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 3
30849: NEG
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 3
30860: NEG
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30901: LD_ADDR_VAR 0 47
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: LD_INT 0
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 0
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 0
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 1
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: LD_INT 0
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: NEG
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 0
30994: PUSH
30995: LD_INT 2
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: LD_INT 1
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 2
31016: NEG
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 2
31028: NEG
31029: PUSH
31030: LD_INT 2
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31052: LD_ADDR_VAR 0 48
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: LD_INT 0
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 1
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 1
31133: NEG
31134: PUSH
31135: LD_INT 2
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 0
31145: PUSH
31146: LD_INT 2
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 2
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 2
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31199: LD_ADDR_VAR 0 49
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: LD_INT 1
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: LD_INT 1
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 1
31257: NEG
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 2
31291: PUSH
31292: LD_INT 0
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31343: LD_ADDR_VAR 0 50
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 1
31371: PUSH
31372: LD_INT 0
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: PUSH
31382: LD_INT 1
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 0
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 1
31412: NEG
31413: PUSH
31414: LD_INT 1
31416: NEG
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: LD_INT 2
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: LD_INT 2
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: NEG
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31487: LD_ADDR_VAR 0 51
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 1
31568: PUSH
31569: LD_INT 2
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: LD_INT 2
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 1
31588: NEG
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 2
31599: NEG
31600: PUSH
31601: LD_INT 0
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 2
31610: NEG
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31634: LD_ADDR_VAR 0 52
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 0
31682: PUSH
31683: LD_INT 1
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: LD_INT 1
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: LD_INT 2
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: LD_INT 1
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: NEG
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 2
31749: NEG
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 2
31761: NEG
31762: PUSH
31763: LD_INT 2
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31785: LD_ADDR_VAR 0 53
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: LD_INT 2
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: LD_INT 2
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: LD_INT 2
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: LD_INT 2
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: NEG
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 2
31984: NEG
31985: PUSH
31986: LD_INT 2
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32015: LD_ADDR_VAR 0 54
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: LD_INT 1
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: LD_INT 2
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 0
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 2
32150: PUSH
32151: LD_INT 2
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: LD_INT 2
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: LD_INT 2
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 2
32202: NEG
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: NEG
32215: PUSH
32216: LD_INT 2
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32245: LD_ADDR_VAR 0 55
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: LD_INT 1
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: LD_INT 2
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: LD_INT 1
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: LD_INT 2
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 2
32421: NEG
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 2
32432: NEG
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 2
32444: NEG
32445: PUSH
32446: LD_INT 2
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32475: LD_ADDR_VAR 0 56
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: LD_INT 2
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 2
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 2
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: LD_INT 2
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: LD_INT 2
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 2
32651: NEG
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 2
32662: NEG
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: LD_INT 2
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32705: LD_ADDR_VAR 0 57
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: LD_INT 1
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 1
32774: NEG
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: NEG
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 2
32840: PUSH
32841: LD_INT 2
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: LD_INT 2
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 2
32881: NEG
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 2
32892: NEG
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 2
32904: NEG
32905: PUSH
32906: LD_INT 2
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32935: LD_ADDR_VAR 0 58
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: NEG
33005: PUSH
33006: LD_INT 1
33008: NEG
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: LD_INT 2
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: LD_INT 2
33031: NEG
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: LD_INT 1
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: PUSH
33061: LD_INT 1
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: NEG
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 2
33122: NEG
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: LD_INT 2
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33165: LD_ADDR_VAR 0 59
33169: PUSH
33170: LD_INT 0
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: LD_INT 1
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 1
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: LD_INT 1
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33253: LD_ADDR_VAR 0 60
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: LD_INT 0
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: LD_INT 1
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: LD_INT 1
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 1
33311: NEG
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33341: LD_ADDR_VAR 0 61
33345: PUSH
33346: LD_INT 0
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33429: LD_ADDR_VAR 0 62
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 1
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33517: LD_ADDR_VAR 0 63
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: LD_INT 1
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 0
33565: PUSH
33566: LD_INT 1
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 1
33575: NEG
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: LD_INT 1
33590: NEG
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33605: LD_ADDR_VAR 0 64
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: LD_INT 1
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 1
33663: NEG
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: NEG
33675: PUSH
33676: LD_INT 1
33678: NEG
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: ST_TO_ADDR
// end ; 1 :
33693: GO 39590
33695: LD_INT 1
33697: DOUBLE
33698: EQUAL
33699: IFTRUE 33703
33701: GO 36326
33703: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33704: LD_ADDR_VAR 0 11
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: LD_INT 3
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: LD_INT 3
33726: NEG
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: LD_INT 2
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: LIST
33747: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33748: LD_ADDR_VAR 0 12
33752: PUSH
33753: LD_INT 2
33755: PUSH
33756: LD_INT 1
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 3
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 3
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: LIST
33788: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33789: LD_ADDR_VAR 0 13
33793: PUSH
33794: LD_INT 3
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 3
33806: PUSH
33807: LD_INT 3
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 3
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: LIST
33828: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33829: LD_ADDR_VAR 0 14
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: LD_INT 3
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: LD_INT 3
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 1
33856: NEG
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: LIST
33869: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33870: LD_ADDR_VAR 0 15
33874: PUSH
33875: LD_INT 2
33877: NEG
33878: PUSH
33879: LD_INT 1
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 3
33888: NEG
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 3
33899: NEG
33900: PUSH
33901: LD_INT 1
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33914: LD_ADDR_VAR 0 16
33918: PUSH
33919: LD_INT 2
33921: NEG
33922: PUSH
33923: LD_INT 3
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 3
33933: NEG
33934: PUSH
33935: LD_INT 2
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 3
33945: NEG
33946: PUSH
33947: LD_INT 3
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: LIST
33959: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33960: LD_ADDR_VAR 0 17
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 3
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: LD_INT 3
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: LD_INT 2
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34004: LD_ADDR_VAR 0 18
34008: PUSH
34009: LD_INT 2
34011: PUSH
34012: LD_INT 1
34014: NEG
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 3
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 3
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: LIST
34044: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34045: LD_ADDR_VAR 0 19
34049: PUSH
34050: LD_INT 3
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 3
34062: PUSH
34063: LD_INT 3
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 2
34072: PUSH
34073: LD_INT 3
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34085: LD_ADDR_VAR 0 20
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: LD_INT 3
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: LD_INT 3
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 1
34112: NEG
34113: PUSH
34114: LD_INT 2
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: LIST
34125: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34126: LD_ADDR_VAR 0 21
34130: PUSH
34131: LD_INT 2
34133: NEG
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 3
34144: NEG
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 3
34155: NEG
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: LIST
34169: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34170: LD_ADDR_VAR 0 22
34174: PUSH
34175: LD_INT 2
34177: NEG
34178: PUSH
34179: LD_INT 3
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 3
34189: NEG
34190: PUSH
34191: LD_INT 2
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 3
34201: NEG
34202: PUSH
34203: LD_INT 3
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: LIST
34215: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34216: LD_ADDR_VAR 0 23
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: LD_INT 3
34226: NEG
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: LD_INT 4
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: LD_INT 3
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34260: LD_ADDR_VAR 0 24
34264: PUSH
34265: LD_INT 3
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 3
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 4
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34301: LD_ADDR_VAR 0 25
34305: PUSH
34306: LD_INT 3
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 4
34318: PUSH
34319: LD_INT 3
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 3
34328: PUSH
34329: LD_INT 4
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: LIST
34340: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34341: LD_ADDR_VAR 0 26
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: LD_INT 3
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: LD_INT 4
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: LD_INT 3
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: LIST
34381: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34382: LD_ADDR_VAR 0 27
34386: PUSH
34387: LD_INT 3
34389: NEG
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 3
34400: NEG
34401: PUSH
34402: LD_INT 1
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 4
34411: NEG
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34426: LD_ADDR_VAR 0 28
34430: PUSH
34431: LD_INT 3
34433: NEG
34434: PUSH
34435: LD_INT 3
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 3
34445: NEG
34446: PUSH
34447: LD_INT 4
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 4
34457: NEG
34458: PUSH
34459: LD_INT 3
34461: NEG
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: LIST
34471: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34472: LD_ADDR_VAR 0 29
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: LD_INT 3
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 3
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 2
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: LD_INT 4
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: LD_INT 4
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: LD_INT 3
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: LD_INT 5
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: LD_INT 5
34562: NEG
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: LD_INT 4
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: LD_INT 6
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 6
34596: NEG
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: LD_INT 5
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34627: LD_ADDR_VAR 0 30
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 3
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 3
34655: PUSH
34656: LD_INT 1
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 3
34665: PUSH
34666: LD_INT 1
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 4
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 4
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 4
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 5
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 5
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 5
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 6
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 6
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34770: LD_ADDR_VAR 0 31
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: LD_INT 2
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 3
34787: PUSH
34788: LD_INT 3
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 3
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 4
34807: PUSH
34808: LD_INT 3
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 4
34817: PUSH
34818: LD_INT 4
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 3
34827: PUSH
34828: LD_INT 4
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 5
34837: PUSH
34838: LD_INT 4
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 5
34847: PUSH
34848: LD_INT 5
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 4
34857: PUSH
34858: LD_INT 5
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 6
34867: PUSH
34868: LD_INT 5
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 6
34877: PUSH
34878: LD_INT 6
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 5
34887: PUSH
34888: LD_INT 6
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34909: LD_ADDR_VAR 0 32
34913: PUSH
34914: LD_INT 1
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: LD_INT 3
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: LD_INT 4
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 4
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 1
34967: NEG
34968: PUSH
34969: LD_INT 3
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: LD_INT 5
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: LD_INT 5
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: LD_INT 4
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: LD_INT 6
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: LD_INT 6
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: LD_INT 5
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35052: LD_ADDR_VAR 0 33
35056: PUSH
35057: LD_INT 2
35059: NEG
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 3
35070: NEG
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 3
35081: NEG
35082: PUSH
35083: LD_INT 1
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 3
35093: NEG
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 4
35104: NEG
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 4
35115: NEG
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 4
35127: NEG
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 5
35138: NEG
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 5
35149: NEG
35150: PUSH
35151: LD_INT 1
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 5
35161: NEG
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 6
35172: NEG
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 6
35183: NEG
35184: PUSH
35185: LD_INT 1
35187: NEG
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35207: LD_ADDR_VAR 0 34
35211: PUSH
35212: LD_INT 2
35214: NEG
35215: PUSH
35216: LD_INT 3
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 3
35226: NEG
35227: PUSH
35228: LD_INT 2
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 3
35238: NEG
35239: PUSH
35240: LD_INT 3
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 3
35250: NEG
35251: PUSH
35252: LD_INT 4
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 4
35262: NEG
35263: PUSH
35264: LD_INT 3
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 4
35274: NEG
35275: PUSH
35276: LD_INT 4
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 4
35286: NEG
35287: PUSH
35288: LD_INT 5
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 5
35298: NEG
35299: PUSH
35300: LD_INT 4
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 5
35310: NEG
35311: PUSH
35312: LD_INT 5
35314: NEG
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 5
35322: NEG
35323: PUSH
35324: LD_INT 6
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 6
35334: NEG
35335: PUSH
35336: LD_INT 5
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 6
35346: NEG
35347: PUSH
35348: LD_INT 6
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35370: LD_ADDR_VAR 0 41
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: LD_INT 2
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: LD_INT 3
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 1
35400: PUSH
35401: LD_INT 2
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: LIST
35413: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35414: LD_ADDR_VAR 0 42
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 2
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 3
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35455: LD_ADDR_VAR 0 43
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 3
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 3
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35495: LD_ADDR_VAR 0 44
35499: PUSH
35500: LD_INT 0
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 3
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 1
35522: NEG
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: LIST
35535: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35536: LD_ADDR_VAR 0 45
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 2
35554: NEG
35555: PUSH
35556: LD_INT 1
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 3
35565: NEG
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: LIST
35579: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35580: LD_ADDR_VAR 0 46
35584: PUSH
35585: LD_INT 2
35587: NEG
35588: PUSH
35589: LD_INT 2
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: LD_INT 3
35603: NEG
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 3
35611: NEG
35612: PUSH
35613: LD_INT 2
35615: NEG
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35626: LD_ADDR_VAR 0 47
35630: PUSH
35631: LD_INT 2
35633: NEG
35634: PUSH
35635: LD_INT 3
35637: NEG
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: NEG
35646: PUSH
35647: LD_INT 3
35649: NEG
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35659: LD_ADDR_VAR 0 48
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: LD_INT 2
35669: NEG
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 2
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35690: LD_ADDR_VAR 0 49
35694: PUSH
35695: LD_INT 3
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 3
35707: PUSH
35708: LD_INT 2
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35719: LD_ADDR_VAR 0 50
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: LD_INT 3
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: LD_INT 3
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35748: LD_ADDR_VAR 0 51
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: LD_INT 2
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 2
35766: NEG
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35779: LD_ADDR_VAR 0 52
35783: PUSH
35784: LD_INT 3
35786: NEG
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 3
35798: NEG
35799: PUSH
35800: LD_INT 2
35802: NEG
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35812: LD_ADDR_VAR 0 53
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: LD_INT 3
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: LD_INT 3
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: LD_INT 2
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: LIST
35855: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35856: LD_ADDR_VAR 0 54
35860: PUSH
35861: LD_INT 2
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 3
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 3
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35897: LD_ADDR_VAR 0 55
35901: PUSH
35902: LD_INT 3
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 3
35914: PUSH
35915: LD_INT 3
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 2
35924: PUSH
35925: LD_INT 3
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: LIST
35936: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35937: LD_ADDR_VAR 0 56
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: LD_INT 3
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: LD_INT 3
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: LIST
35977: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35978: LD_ADDR_VAR 0 57
35982: PUSH
35983: LD_INT 2
35985: NEG
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 3
35996: NEG
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 3
36007: NEG
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: LIST
36021: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36022: LD_ADDR_VAR 0 58
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: LD_INT 3
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 3
36041: NEG
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 3
36053: NEG
36054: PUSH
36055: LD_INT 3
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36068: LD_ADDR_VAR 0 59
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: LD_INT 2
36079: NEG
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: LD_INT 2
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36112: LD_ADDR_VAR 0 60
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: LIST
36152: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36153: LD_ADDR_VAR 0 61
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: LIST
36192: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36193: LD_ADDR_VAR 0 62
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: LD_INT 2
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36234: LD_ADDR_VAR 0 63
36238: PUSH
36239: LD_INT 1
36241: NEG
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 2
36263: NEG
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: LIST
36277: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36278: LD_ADDR_VAR 0 64
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: LD_INT 2
36289: NEG
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 2
36309: NEG
36310: PUSH
36311: LD_INT 2
36313: NEG
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: ST_TO_ADDR
// end ; 2 :
36324: GO 39590
36326: LD_INT 2
36328: DOUBLE
36329: EQUAL
36330: IFTRUE 36334
36332: GO 39589
36334: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36335: LD_ADDR_VAR 0 29
36339: PUSH
36340: LD_INT 4
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 4
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 5
36363: PUSH
36364: LD_INT 0
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 5
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 4
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 3
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 3
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 3
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 5
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 3
36435: PUSH
36436: LD_INT 3
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 3
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 4
36455: PUSH
36456: LD_INT 3
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 4
36465: PUSH
36466: LD_INT 4
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 3
36475: PUSH
36476: LD_INT 4
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 2
36485: PUSH
36486: LD_INT 3
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 4
36505: PUSH
36506: LD_INT 2
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: LD_INT 4
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: LD_INT 4
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 3
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: LD_INT 4
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: LD_INT 5
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: LD_INT 5
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: NEG
36576: PUSH
36577: LD_INT 4
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: LD_INT 3
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 2
36597: PUSH
36598: LD_INT 5
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: NEG
36608: PUSH
36609: LD_INT 3
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 3
36618: NEG
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 3
36629: NEG
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 2
36641: NEG
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 3
36663: NEG
36664: PUSH
36665: LD_INT 1
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 4
36674: NEG
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 4
36685: NEG
36686: PUSH
36687: LD_INT 1
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 4
36697: NEG
36698: PUSH
36699: LD_INT 2
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 2
36709: NEG
36710: PUSH
36711: LD_INT 2
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 4
36720: NEG
36721: PUSH
36722: LD_INT 4
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 4
36732: NEG
36733: PUSH
36734: LD_INT 5
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 3
36744: NEG
36745: PUSH
36746: LD_INT 4
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 3
36756: NEG
36757: PUSH
36758: LD_INT 3
36760: NEG
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 4
36768: NEG
36769: PUSH
36770: LD_INT 3
36772: NEG
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 5
36780: NEG
36781: PUSH
36782: LD_INT 4
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 5
36792: NEG
36793: PUSH
36794: LD_INT 5
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 3
36804: NEG
36805: PUSH
36806: LD_INT 5
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 5
36816: NEG
36817: PUSH
36818: LD_INT 3
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
36873: LD_ADDR_VAR 0 30
36877: PUSH
36878: LD_INT 4
36880: PUSH
36881: LD_INT 4
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 4
36890: PUSH
36891: LD_INT 3
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 5
36900: PUSH
36901: LD_INT 4
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 5
36910: PUSH
36911: LD_INT 5
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 4
36920: PUSH
36921: LD_INT 5
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 3
36930: PUSH
36931: LD_INT 4
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 3
36940: PUSH
36941: LD_INT 3
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 5
36950: PUSH
36951: LD_INT 3
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 3
36960: PUSH
36961: LD_INT 5
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 3
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: LD_INT 3
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: LD_INT 4
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: LD_INT 4
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: LD_INT 3
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: LD_INT 4
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: NEG
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 4
37063: NEG
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 4
37074: NEG
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 3
37086: NEG
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 3
37097: NEG
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 4
37108: NEG
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 5
37119: NEG
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 5
37130: NEG
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 5
37142: NEG
37143: PUSH
37144: LD_INT 2
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 3
37154: NEG
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 3
37165: NEG
37166: PUSH
37167: LD_INT 3
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 3
37177: NEG
37178: PUSH
37179: LD_INT 4
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: LD_INT 3
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 2
37201: NEG
37202: PUSH
37203: LD_INT 2
37205: NEG
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 3
37213: NEG
37214: PUSH
37215: LD_INT 2
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 4
37225: NEG
37226: PUSH
37227: LD_INT 3
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 4
37237: NEG
37238: PUSH
37239: LD_INT 4
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 2
37249: NEG
37250: PUSH
37251: LD_INT 4
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 4
37261: NEG
37262: PUSH
37263: LD_INT 2
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: LD_INT 4
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: LD_INT 5
37287: NEG
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: LD_INT 4
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: LD_INT 3
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: LD_INT 3
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: LD_INT 4
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: PUSH
37342: LD_INT 5
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 2
37352: PUSH
37353: LD_INT 3
37355: NEG
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 2
37363: NEG
37364: PUSH
37365: LD_INT 5
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37420: LD_ADDR_VAR 0 31
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: LD_INT 4
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: LD_INT 3
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: LD_INT 4
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: PUSH
37458: LD_INT 5
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: LD_INT 5
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: LD_INT 4
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: LD_INT 3
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 2
37499: PUSH
37500: LD_INT 5
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 2
37509: NEG
37510: PUSH
37511: LD_INT 3
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 3
37520: NEG
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 3
37531: NEG
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 2
37543: NEG
37544: PUSH
37545: LD_INT 0
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 3
37565: NEG
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 4
37576: NEG
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 4
37587: NEG
37588: PUSH
37589: LD_INT 1
37591: NEG
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 4
37599: NEG
37600: PUSH
37601: LD_INT 2
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: NEG
37612: PUSH
37613: LD_INT 2
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 4
37622: NEG
37623: PUSH
37624: LD_INT 4
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 4
37634: NEG
37635: PUSH
37636: LD_INT 5
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 3
37646: NEG
37647: PUSH
37648: LD_INT 4
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 3
37658: NEG
37659: PUSH
37660: LD_INT 3
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 4
37670: NEG
37671: PUSH
37672: LD_INT 3
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 5
37682: NEG
37683: PUSH
37684: LD_INT 4
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 5
37694: NEG
37695: PUSH
37696: LD_INT 5
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 3
37706: NEG
37707: PUSH
37708: LD_INT 5
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 5
37718: NEG
37719: PUSH
37720: LD_INT 3
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 3
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: LD_INT 4
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: LD_INT 3
37755: NEG
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: LD_INT 2
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: LD_INT 3
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: LD_INT 4
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: LD_INT 2
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: LD_INT 4
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 4
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 4
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 5
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 5
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 4
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 3
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 3
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 3
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 5
37915: PUSH
37916: LD_INT 2
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
37970: LD_ADDR_VAR 0 32
37974: PUSH
37975: LD_INT 4
37977: NEG
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 4
37988: NEG
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 3
38000: NEG
38001: PUSH
38002: LD_INT 0
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 3
38011: NEG
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 4
38022: NEG
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 5
38033: NEG
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 5
38044: NEG
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 5
38056: NEG
38057: PUSH
38058: LD_INT 2
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 3
38068: NEG
38069: PUSH
38070: LD_INT 2
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 3
38079: NEG
38080: PUSH
38081: LD_INT 3
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 3
38091: NEG
38092: PUSH
38093: LD_INT 4
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 3
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 2
38115: NEG
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 3
38127: NEG
38128: PUSH
38129: LD_INT 2
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 4
38139: NEG
38140: PUSH
38141: LD_INT 3
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 4
38151: NEG
38152: PUSH
38153: LD_INT 4
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: NEG
38164: PUSH
38165: LD_INT 4
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 4
38175: NEG
38176: PUSH
38177: LD_INT 2
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: LD_INT 4
38190: NEG
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: LD_INT 5
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: LD_INT 4
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: LD_INT 3
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: LD_INT 3
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: LD_INT 4
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: NEG
38255: PUSH
38256: LD_INT 5
38258: NEG
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 2
38266: PUSH
38267: LD_INT 3
38269: NEG
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 2
38277: NEG
38278: PUSH
38279: LD_INT 5
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 3
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 3
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 4
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 4
38320: PUSH
38321: LD_INT 1
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 2
38340: PUSH
38341: LD_INT 0
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 2
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 2
38361: PUSH
38362: LD_INT 2
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 4
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 4
38382: PUSH
38383: LD_INT 4
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 4
38392: PUSH
38393: LD_INT 3
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 5
38402: PUSH
38403: LD_INT 4
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 5
38412: PUSH
38413: LD_INT 5
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 4
38422: PUSH
38423: LD_INT 5
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 3
38432: PUSH
38433: LD_INT 4
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 3
38442: PUSH
38443: LD_INT 3
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 5
38452: PUSH
38453: LD_INT 3
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 3
38462: PUSH
38463: LD_INT 5
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38517: LD_ADDR_VAR 0 33
38521: PUSH
38522: LD_INT 4
38524: NEG
38525: PUSH
38526: LD_INT 4
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 4
38536: NEG
38537: PUSH
38538: LD_INT 5
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 3
38548: NEG
38549: PUSH
38550: LD_INT 4
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 3
38560: NEG
38561: PUSH
38562: LD_INT 3
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 4
38572: NEG
38573: PUSH
38574: LD_INT 3
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 5
38584: NEG
38585: PUSH
38586: LD_INT 4
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 5
38596: NEG
38597: PUSH
38598: LD_INT 5
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 3
38608: NEG
38609: PUSH
38610: LD_INT 5
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 5
38620: NEG
38621: PUSH
38622: LD_INT 3
38624: NEG
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: LD_INT 3
38635: NEG
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 0
38643: PUSH
38644: LD_INT 4
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: LD_INT 3
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: LD_INT 2
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: LD_INT 3
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: LD_INT 4
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 2
38711: PUSH
38712: LD_INT 2
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 2
38722: NEG
38723: PUSH
38724: LD_INT 4
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 4
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 4
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 5
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 5
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 4
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 3
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 3
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: LD_INT 2
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 5
38817: PUSH
38818: LD_INT 2
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 3
38827: PUSH
38828: LD_INT 3
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 3
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 4
38847: PUSH
38848: LD_INT 3
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 4
38857: PUSH
38858: LD_INT 4
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 3
38867: PUSH
38868: LD_INT 4
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: LD_INT 3
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 2
38887: PUSH
38888: LD_INT 2
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 4
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: LD_INT 4
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 4
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: LD_INT 3
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: LD_INT 4
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: LD_INT 5
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: LD_INT 5
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: LD_INT 4
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: LD_INT 3
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: LD_INT 5
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 2
38999: NEG
39000: PUSH
39001: LD_INT 3
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39055: LD_ADDR_VAR 0 34
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 4
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 5
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: LD_INT 4
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 3
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 3
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: LD_INT 4
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: LD_INT 5
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: LD_INT 3
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: LD_INT 5
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 3
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 3
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 4
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 4
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 3
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 2
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: LD_INT 2
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 4
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 4
39257: PUSH
39258: LD_INT 4
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 4
39267: PUSH
39268: LD_INT 3
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 5
39277: PUSH
39278: LD_INT 4
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 5
39287: PUSH
39288: LD_INT 5
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 4
39297: PUSH
39298: LD_INT 5
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 3
39307: PUSH
39308: LD_INT 4
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 3
39317: PUSH
39318: LD_INT 3
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 5
39327: PUSH
39328: LD_INT 3
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 3
39337: PUSH
39338: LD_INT 5
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 3
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: LD_INT 2
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 3
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: LD_INT 4
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: LD_INT 4
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 3
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: LD_INT 4
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 2
39429: NEG
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 4
39440: NEG
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 4
39451: NEG
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 3
39463: NEG
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 3
39474: NEG
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 4
39485: NEG
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 5
39496: NEG
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 5
39507: NEG
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 5
39519: NEG
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 3
39531: NEG
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: ST_TO_ADDR
// end ; end ;
39587: GO 39590
39589: POP
// case btype of b_depot , b_warehouse :
39590: LD_VAR 0 1
39594: PUSH
39595: LD_INT 0
39597: DOUBLE
39598: EQUAL
39599: IFTRUE 39609
39601: LD_INT 1
39603: DOUBLE
39604: EQUAL
39605: IFTRUE 39609
39607: GO 39810
39609: POP
// case nation of nation_american :
39610: LD_VAR 0 5
39614: PUSH
39615: LD_INT 1
39617: DOUBLE
39618: EQUAL
39619: IFTRUE 39623
39621: GO 39679
39623: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39624: LD_ADDR_VAR 0 9
39628: PUSH
39629: LD_VAR 0 11
39633: PUSH
39634: LD_VAR 0 12
39638: PUSH
39639: LD_VAR 0 13
39643: PUSH
39644: LD_VAR 0 14
39648: PUSH
39649: LD_VAR 0 15
39653: PUSH
39654: LD_VAR 0 16
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: PUSH
39667: LD_VAR 0 4
39671: PUSH
39672: LD_INT 1
39674: PLUS
39675: ARRAY
39676: ST_TO_ADDR
39677: GO 39808
39679: LD_INT 2
39681: DOUBLE
39682: EQUAL
39683: IFTRUE 39687
39685: GO 39743
39687: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39688: LD_ADDR_VAR 0 9
39692: PUSH
39693: LD_VAR 0 17
39697: PUSH
39698: LD_VAR 0 18
39702: PUSH
39703: LD_VAR 0 19
39707: PUSH
39708: LD_VAR 0 20
39712: PUSH
39713: LD_VAR 0 21
39717: PUSH
39718: LD_VAR 0 22
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: PUSH
39731: LD_VAR 0 4
39735: PUSH
39736: LD_INT 1
39738: PLUS
39739: ARRAY
39740: ST_TO_ADDR
39741: GO 39808
39743: LD_INT 3
39745: DOUBLE
39746: EQUAL
39747: IFTRUE 39751
39749: GO 39807
39751: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39752: LD_ADDR_VAR 0 9
39756: PUSH
39757: LD_VAR 0 23
39761: PUSH
39762: LD_VAR 0 24
39766: PUSH
39767: LD_VAR 0 25
39771: PUSH
39772: LD_VAR 0 26
39776: PUSH
39777: LD_VAR 0 27
39781: PUSH
39782: LD_VAR 0 28
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: PUSH
39795: LD_VAR 0 4
39799: PUSH
39800: LD_INT 1
39802: PLUS
39803: ARRAY
39804: ST_TO_ADDR
39805: GO 39808
39807: POP
39808: GO 40363
39810: LD_INT 2
39812: DOUBLE
39813: EQUAL
39814: IFTRUE 39824
39816: LD_INT 3
39818: DOUBLE
39819: EQUAL
39820: IFTRUE 39824
39822: GO 39880
39824: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39825: LD_ADDR_VAR 0 9
39829: PUSH
39830: LD_VAR 0 29
39834: PUSH
39835: LD_VAR 0 30
39839: PUSH
39840: LD_VAR 0 31
39844: PUSH
39845: LD_VAR 0 32
39849: PUSH
39850: LD_VAR 0 33
39854: PUSH
39855: LD_VAR 0 34
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: PUSH
39868: LD_VAR 0 4
39872: PUSH
39873: LD_INT 1
39875: PLUS
39876: ARRAY
39877: ST_TO_ADDR
39878: GO 40363
39880: LD_INT 16
39882: DOUBLE
39883: EQUAL
39884: IFTRUE 39942
39886: LD_INT 17
39888: DOUBLE
39889: EQUAL
39890: IFTRUE 39942
39892: LD_INT 18
39894: DOUBLE
39895: EQUAL
39896: IFTRUE 39942
39898: LD_INT 19
39900: DOUBLE
39901: EQUAL
39902: IFTRUE 39942
39904: LD_INT 22
39906: DOUBLE
39907: EQUAL
39908: IFTRUE 39942
39910: LD_INT 20
39912: DOUBLE
39913: EQUAL
39914: IFTRUE 39942
39916: LD_INT 21
39918: DOUBLE
39919: EQUAL
39920: IFTRUE 39942
39922: LD_INT 23
39924: DOUBLE
39925: EQUAL
39926: IFTRUE 39942
39928: LD_INT 24
39930: DOUBLE
39931: EQUAL
39932: IFTRUE 39942
39934: LD_INT 25
39936: DOUBLE
39937: EQUAL
39938: IFTRUE 39942
39940: GO 39998
39942: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39943: LD_ADDR_VAR 0 9
39947: PUSH
39948: LD_VAR 0 35
39952: PUSH
39953: LD_VAR 0 36
39957: PUSH
39958: LD_VAR 0 37
39962: PUSH
39963: LD_VAR 0 38
39967: PUSH
39968: LD_VAR 0 39
39972: PUSH
39973: LD_VAR 0 40
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: PUSH
39986: LD_VAR 0 4
39990: PUSH
39991: LD_INT 1
39993: PLUS
39994: ARRAY
39995: ST_TO_ADDR
39996: GO 40363
39998: LD_INT 6
40000: DOUBLE
40001: EQUAL
40002: IFTRUE 40054
40004: LD_INT 7
40006: DOUBLE
40007: EQUAL
40008: IFTRUE 40054
40010: LD_INT 8
40012: DOUBLE
40013: EQUAL
40014: IFTRUE 40054
40016: LD_INT 13
40018: DOUBLE
40019: EQUAL
40020: IFTRUE 40054
40022: LD_INT 12
40024: DOUBLE
40025: EQUAL
40026: IFTRUE 40054
40028: LD_INT 15
40030: DOUBLE
40031: EQUAL
40032: IFTRUE 40054
40034: LD_INT 11
40036: DOUBLE
40037: EQUAL
40038: IFTRUE 40054
40040: LD_INT 14
40042: DOUBLE
40043: EQUAL
40044: IFTRUE 40054
40046: LD_INT 10
40048: DOUBLE
40049: EQUAL
40050: IFTRUE 40054
40052: GO 40110
40054: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40055: LD_ADDR_VAR 0 9
40059: PUSH
40060: LD_VAR 0 41
40064: PUSH
40065: LD_VAR 0 42
40069: PUSH
40070: LD_VAR 0 43
40074: PUSH
40075: LD_VAR 0 44
40079: PUSH
40080: LD_VAR 0 45
40084: PUSH
40085: LD_VAR 0 46
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: PUSH
40098: LD_VAR 0 4
40102: PUSH
40103: LD_INT 1
40105: PLUS
40106: ARRAY
40107: ST_TO_ADDR
40108: GO 40363
40110: LD_INT 36
40112: DOUBLE
40113: EQUAL
40114: IFTRUE 40118
40116: GO 40174
40118: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40119: LD_ADDR_VAR 0 9
40123: PUSH
40124: LD_VAR 0 47
40128: PUSH
40129: LD_VAR 0 48
40133: PUSH
40134: LD_VAR 0 49
40138: PUSH
40139: LD_VAR 0 50
40143: PUSH
40144: LD_VAR 0 51
40148: PUSH
40149: LD_VAR 0 52
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: PUSH
40162: LD_VAR 0 4
40166: PUSH
40167: LD_INT 1
40169: PLUS
40170: ARRAY
40171: ST_TO_ADDR
40172: GO 40363
40174: LD_INT 4
40176: DOUBLE
40177: EQUAL
40178: IFTRUE 40200
40180: LD_INT 5
40182: DOUBLE
40183: EQUAL
40184: IFTRUE 40200
40186: LD_INT 34
40188: DOUBLE
40189: EQUAL
40190: IFTRUE 40200
40192: LD_INT 37
40194: DOUBLE
40195: EQUAL
40196: IFTRUE 40200
40198: GO 40256
40200: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40201: LD_ADDR_VAR 0 9
40205: PUSH
40206: LD_VAR 0 53
40210: PUSH
40211: LD_VAR 0 54
40215: PUSH
40216: LD_VAR 0 55
40220: PUSH
40221: LD_VAR 0 56
40225: PUSH
40226: LD_VAR 0 57
40230: PUSH
40231: LD_VAR 0 58
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: PUSH
40244: LD_VAR 0 4
40248: PUSH
40249: LD_INT 1
40251: PLUS
40252: ARRAY
40253: ST_TO_ADDR
40254: GO 40363
40256: LD_INT 31
40258: DOUBLE
40259: EQUAL
40260: IFTRUE 40306
40262: LD_INT 32
40264: DOUBLE
40265: EQUAL
40266: IFTRUE 40306
40268: LD_INT 33
40270: DOUBLE
40271: EQUAL
40272: IFTRUE 40306
40274: LD_INT 27
40276: DOUBLE
40277: EQUAL
40278: IFTRUE 40306
40280: LD_INT 26
40282: DOUBLE
40283: EQUAL
40284: IFTRUE 40306
40286: LD_INT 28
40288: DOUBLE
40289: EQUAL
40290: IFTRUE 40306
40292: LD_INT 29
40294: DOUBLE
40295: EQUAL
40296: IFTRUE 40306
40298: LD_INT 30
40300: DOUBLE
40301: EQUAL
40302: IFTRUE 40306
40304: GO 40362
40306: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40307: LD_ADDR_VAR 0 9
40311: PUSH
40312: LD_VAR 0 59
40316: PUSH
40317: LD_VAR 0 60
40321: PUSH
40322: LD_VAR 0 61
40326: PUSH
40327: LD_VAR 0 62
40331: PUSH
40332: LD_VAR 0 63
40336: PUSH
40337: LD_VAR 0 64
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: PUSH
40350: LD_VAR 0 4
40354: PUSH
40355: LD_INT 1
40357: PLUS
40358: ARRAY
40359: ST_TO_ADDR
40360: GO 40363
40362: POP
// temp_list2 = [ ] ;
40363: LD_ADDR_VAR 0 10
40367: PUSH
40368: EMPTY
40369: ST_TO_ADDR
// for i in temp_list do
40370: LD_ADDR_VAR 0 8
40374: PUSH
40375: LD_VAR 0 9
40379: PUSH
40380: FOR_IN
40381: IFFALSE 40433
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40383: LD_ADDR_VAR 0 10
40387: PUSH
40388: LD_VAR 0 10
40392: PUSH
40393: LD_VAR 0 8
40397: PUSH
40398: LD_INT 1
40400: ARRAY
40401: PUSH
40402: LD_VAR 0 2
40406: PLUS
40407: PUSH
40408: LD_VAR 0 8
40412: PUSH
40413: LD_INT 2
40415: ARRAY
40416: PUSH
40417: LD_VAR 0 3
40421: PLUS
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: EMPTY
40428: LIST
40429: ADD
40430: ST_TO_ADDR
40431: GO 40380
40433: POP
40434: POP
// result = temp_list2 ;
40435: LD_ADDR_VAR 0 7
40439: PUSH
40440: LD_VAR 0 10
40444: ST_TO_ADDR
// end ;
40445: LD_VAR 0 7
40449: RET
// export function EnemyInRange ( unit , dist ) ; begin
40450: LD_INT 0
40452: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40453: LD_ADDR_VAR 0 3
40457: PUSH
40458: LD_VAR 0 1
40462: PPUSH
40463: CALL_OW 255
40467: PPUSH
40468: LD_VAR 0 1
40472: PPUSH
40473: CALL_OW 250
40477: PPUSH
40478: LD_VAR 0 1
40482: PPUSH
40483: CALL_OW 251
40487: PPUSH
40488: LD_VAR 0 2
40492: PPUSH
40493: CALL 13846 0 4
40497: PUSH
40498: LD_INT 4
40500: ARRAY
40501: ST_TO_ADDR
// end ;
40502: LD_VAR 0 3
40506: RET
// export function PlayerSeeMe ( unit ) ; begin
40507: LD_INT 0
40509: PPUSH
// result := See ( your_side , unit ) ;
40510: LD_ADDR_VAR 0 2
40514: PUSH
40515: LD_OWVAR 2
40519: PPUSH
40520: LD_VAR 0 1
40524: PPUSH
40525: CALL_OW 292
40529: ST_TO_ADDR
// end ;
40530: LD_VAR 0 2
40534: RET
// export function ReverseDir ( unit ) ; begin
40535: LD_INT 0
40537: PPUSH
// if not unit then
40538: LD_VAR 0 1
40542: NOT
40543: IFFALSE 40547
// exit ;
40545: GO 40570
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40547: LD_ADDR_VAR 0 2
40551: PUSH
40552: LD_VAR 0 1
40556: PPUSH
40557: CALL_OW 254
40561: PUSH
40562: LD_INT 3
40564: PLUS
40565: PUSH
40566: LD_INT 6
40568: MOD
40569: ST_TO_ADDR
// end ;
40570: LD_VAR 0 2
40574: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
40575: LD_INT 0
40577: PPUSH
40578: PPUSH
40579: PPUSH
40580: PPUSH
40581: PPUSH
// if not hexes then
40582: LD_VAR 0 2
40586: NOT
40587: IFFALSE 40591
// exit ;
40589: GO 40739
// dist := 9999 ;
40591: LD_ADDR_VAR 0 5
40595: PUSH
40596: LD_INT 9999
40598: ST_TO_ADDR
// for i = 1 to hexes do
40599: LD_ADDR_VAR 0 4
40603: PUSH
40604: DOUBLE
40605: LD_INT 1
40607: DEC
40608: ST_TO_ADDR
40609: LD_VAR 0 2
40613: PUSH
40614: FOR_TO
40615: IFFALSE 40727
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
40617: LD_VAR 0 1
40621: PPUSH
40622: LD_VAR 0 2
40626: PUSH
40627: LD_VAR 0 4
40631: ARRAY
40632: PUSH
40633: LD_INT 1
40635: ARRAY
40636: PPUSH
40637: LD_VAR 0 2
40641: PUSH
40642: LD_VAR 0 4
40646: ARRAY
40647: PUSH
40648: LD_INT 2
40650: ARRAY
40651: PPUSH
40652: CALL_OW 297
40656: PUSH
40657: LD_VAR 0 5
40661: LESS
40662: IFFALSE 40725
// begin hex := hexes [ i ] ;
40664: LD_ADDR_VAR 0 7
40668: PUSH
40669: LD_VAR 0 2
40673: PUSH
40674: LD_VAR 0 4
40678: ARRAY
40679: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40680: LD_ADDR_VAR 0 5
40684: PUSH
40685: LD_VAR 0 1
40689: PPUSH
40690: LD_VAR 0 2
40694: PUSH
40695: LD_VAR 0 4
40699: ARRAY
40700: PUSH
40701: LD_INT 1
40703: ARRAY
40704: PPUSH
40705: LD_VAR 0 2
40709: PUSH
40710: LD_VAR 0 4
40714: ARRAY
40715: PUSH
40716: LD_INT 2
40718: ARRAY
40719: PPUSH
40720: CALL_OW 297
40724: ST_TO_ADDR
// end ; end ;
40725: GO 40614
40727: POP
40728: POP
// result := hex ;
40729: LD_ADDR_VAR 0 3
40733: PUSH
40734: LD_VAR 0 7
40738: ST_TO_ADDR
// end ;
40739: LD_VAR 0 3
40743: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40744: LD_INT 0
40746: PPUSH
40747: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40748: LD_VAR 0 1
40752: NOT
40753: PUSH
40754: LD_VAR 0 1
40758: PUSH
40759: LD_INT 21
40761: PUSH
40762: LD_INT 2
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 23
40771: PUSH
40772: LD_INT 2
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PPUSH
40783: CALL_OW 69
40787: IN
40788: NOT
40789: OR
40790: IFFALSE 40794
// exit ;
40792: GO 40841
// for i = 1 to 3 do
40794: LD_ADDR_VAR 0 3
40798: PUSH
40799: DOUBLE
40800: LD_INT 1
40802: DEC
40803: ST_TO_ADDR
40804: LD_INT 3
40806: PUSH
40807: FOR_TO
40808: IFFALSE 40839
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40810: LD_VAR 0 1
40814: PPUSH
40815: CALL_OW 250
40819: PPUSH
40820: LD_VAR 0 1
40824: PPUSH
40825: CALL_OW 251
40829: PPUSH
40830: LD_INT 1
40832: PPUSH
40833: CALL_OW 453
40837: GO 40807
40839: POP
40840: POP
// end ;
40841: LD_VAR 0 2
40845: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40846: LD_INT 0
40848: PPUSH
40849: PPUSH
40850: PPUSH
40851: PPUSH
40852: PPUSH
40853: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40854: LD_VAR 0 1
40858: NOT
40859: PUSH
40860: LD_VAR 0 2
40864: NOT
40865: OR
40866: PUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: CALL_OW 314
40876: OR
40877: IFFALSE 40881
// exit ;
40879: GO 41322
// x := GetX ( enemy_unit ) ;
40881: LD_ADDR_VAR 0 7
40885: PUSH
40886: LD_VAR 0 2
40890: PPUSH
40891: CALL_OW 250
40895: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40896: LD_ADDR_VAR 0 8
40900: PUSH
40901: LD_VAR 0 2
40905: PPUSH
40906: CALL_OW 251
40910: ST_TO_ADDR
// if not x or not y then
40911: LD_VAR 0 7
40915: NOT
40916: PUSH
40917: LD_VAR 0 8
40921: NOT
40922: OR
40923: IFFALSE 40927
// exit ;
40925: GO 41322
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
40927: LD_ADDR_VAR 0 6
40931: PUSH
40932: LD_VAR 0 7
40936: PPUSH
40937: LD_INT 0
40939: PPUSH
40940: LD_INT 4
40942: PPUSH
40943: CALL_OW 272
40947: PUSH
40948: LD_VAR 0 8
40952: PPUSH
40953: LD_INT 0
40955: PPUSH
40956: LD_INT 4
40958: PPUSH
40959: CALL_OW 273
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_VAR 0 7
40972: PPUSH
40973: LD_INT 1
40975: PPUSH
40976: LD_INT 4
40978: PPUSH
40979: CALL_OW 272
40983: PUSH
40984: LD_VAR 0 8
40988: PPUSH
40989: LD_INT 1
40991: PPUSH
40992: LD_INT 4
40994: PPUSH
40995: CALL_OW 273
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_VAR 0 7
41008: PPUSH
41009: LD_INT 2
41011: PPUSH
41012: LD_INT 4
41014: PPUSH
41015: CALL_OW 272
41019: PUSH
41020: LD_VAR 0 8
41024: PPUSH
41025: LD_INT 2
41027: PPUSH
41028: LD_INT 4
41030: PPUSH
41031: CALL_OW 273
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_VAR 0 7
41044: PPUSH
41045: LD_INT 3
41047: PPUSH
41048: LD_INT 4
41050: PPUSH
41051: CALL_OW 272
41055: PUSH
41056: LD_VAR 0 8
41060: PPUSH
41061: LD_INT 3
41063: PPUSH
41064: LD_INT 4
41066: PPUSH
41067: CALL_OW 273
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_VAR 0 7
41080: PPUSH
41081: LD_INT 4
41083: PPUSH
41084: LD_INT 4
41086: PPUSH
41087: CALL_OW 272
41091: PUSH
41092: LD_VAR 0 8
41096: PPUSH
41097: LD_INT 4
41099: PPUSH
41100: LD_INT 4
41102: PPUSH
41103: CALL_OW 273
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_VAR 0 7
41116: PPUSH
41117: LD_INT 5
41119: PPUSH
41120: LD_INT 4
41122: PPUSH
41123: CALL_OW 272
41127: PUSH
41128: LD_VAR 0 8
41132: PPUSH
41133: LD_INT 5
41135: PPUSH
41136: LD_INT 4
41138: PPUSH
41139: CALL_OW 273
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: ST_TO_ADDR
// for i = tmp downto 1 do
41156: LD_ADDR_VAR 0 4
41160: PUSH
41161: DOUBLE
41162: LD_VAR 0 6
41166: INC
41167: ST_TO_ADDR
41168: LD_INT 1
41170: PUSH
41171: FOR_DOWNTO
41172: IFFALSE 41273
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41174: LD_VAR 0 6
41178: PUSH
41179: LD_VAR 0 4
41183: ARRAY
41184: PUSH
41185: LD_INT 1
41187: ARRAY
41188: PPUSH
41189: LD_VAR 0 6
41193: PUSH
41194: LD_VAR 0 4
41198: ARRAY
41199: PUSH
41200: LD_INT 2
41202: ARRAY
41203: PPUSH
41204: CALL_OW 488
41208: NOT
41209: PUSH
41210: LD_VAR 0 6
41214: PUSH
41215: LD_VAR 0 4
41219: ARRAY
41220: PUSH
41221: LD_INT 1
41223: ARRAY
41224: PPUSH
41225: LD_VAR 0 6
41229: PUSH
41230: LD_VAR 0 4
41234: ARRAY
41235: PUSH
41236: LD_INT 2
41238: ARRAY
41239: PPUSH
41240: CALL_OW 428
41244: PUSH
41245: LD_INT 0
41247: NONEQUAL
41248: OR
41249: IFFALSE 41271
// tmp := Delete ( tmp , i ) ;
41251: LD_ADDR_VAR 0 6
41255: PUSH
41256: LD_VAR 0 6
41260: PPUSH
41261: LD_VAR 0 4
41265: PPUSH
41266: CALL_OW 3
41270: ST_TO_ADDR
41271: GO 41171
41273: POP
41274: POP
// j := GetClosestHex ( unit , tmp ) ;
41275: LD_ADDR_VAR 0 5
41279: PUSH
41280: LD_VAR 0 1
41284: PPUSH
41285: LD_VAR 0 6
41289: PPUSH
41290: CALL 40575 0 2
41294: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41295: LD_VAR 0 1
41299: PPUSH
41300: LD_VAR 0 5
41304: PUSH
41305: LD_INT 1
41307: ARRAY
41308: PPUSH
41309: LD_VAR 0 5
41313: PUSH
41314: LD_INT 2
41316: ARRAY
41317: PPUSH
41318: CALL_OW 111
// end ;
41322: LD_VAR 0 3
41326: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41327: LD_INT 0
41329: PPUSH
41330: PPUSH
41331: PPUSH
// uc_side = 0 ;
41332: LD_ADDR_OWVAR 20
41336: PUSH
41337: LD_INT 0
41339: ST_TO_ADDR
// uc_nation = 0 ;
41340: LD_ADDR_OWVAR 21
41344: PUSH
41345: LD_INT 0
41347: ST_TO_ADDR
// InitHc_All ( ) ;
41348: CALL_OW 584
// InitVc ;
41352: CALL_OW 20
// if mastodonts then
41356: LD_VAR 0 6
41360: IFFALSE 41427
// for i = 1 to mastodonts do
41362: LD_ADDR_VAR 0 11
41366: PUSH
41367: DOUBLE
41368: LD_INT 1
41370: DEC
41371: ST_TO_ADDR
41372: LD_VAR 0 6
41376: PUSH
41377: FOR_TO
41378: IFFALSE 41425
// begin vc_chassis := 31 ;
41380: LD_ADDR_OWVAR 37
41384: PUSH
41385: LD_INT 31
41387: ST_TO_ADDR
// vc_control := control_rider ;
41388: LD_ADDR_OWVAR 38
41392: PUSH
41393: LD_INT 4
41395: ST_TO_ADDR
// animal := CreateVehicle ;
41396: LD_ADDR_VAR 0 12
41400: PUSH
41401: CALL_OW 45
41405: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41406: LD_VAR 0 12
41410: PPUSH
41411: LD_VAR 0 8
41415: PPUSH
41416: LD_INT 0
41418: PPUSH
41419: CALL 43562 0 3
// end ;
41423: GO 41377
41425: POP
41426: POP
// if horses then
41427: LD_VAR 0 5
41431: IFFALSE 41498
// for i = 1 to horses do
41433: LD_ADDR_VAR 0 11
41437: PUSH
41438: DOUBLE
41439: LD_INT 1
41441: DEC
41442: ST_TO_ADDR
41443: LD_VAR 0 5
41447: PUSH
41448: FOR_TO
41449: IFFALSE 41496
// begin hc_class := 21 ;
41451: LD_ADDR_OWVAR 28
41455: PUSH
41456: LD_INT 21
41458: ST_TO_ADDR
// hc_gallery :=  ;
41459: LD_ADDR_OWVAR 33
41463: PUSH
41464: LD_STRING 
41466: ST_TO_ADDR
// animal := CreateHuman ;
41467: LD_ADDR_VAR 0 12
41471: PUSH
41472: CALL_OW 44
41476: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41477: LD_VAR 0 12
41481: PPUSH
41482: LD_VAR 0 8
41486: PPUSH
41487: LD_INT 0
41489: PPUSH
41490: CALL 43562 0 3
// end ;
41494: GO 41448
41496: POP
41497: POP
// if birds then
41498: LD_VAR 0 1
41502: IFFALSE 41569
// for i = 1 to birds do
41504: LD_ADDR_VAR 0 11
41508: PUSH
41509: DOUBLE
41510: LD_INT 1
41512: DEC
41513: ST_TO_ADDR
41514: LD_VAR 0 1
41518: PUSH
41519: FOR_TO
41520: IFFALSE 41567
// begin hc_class = 18 ;
41522: LD_ADDR_OWVAR 28
41526: PUSH
41527: LD_INT 18
41529: ST_TO_ADDR
// hc_gallery =  ;
41530: LD_ADDR_OWVAR 33
41534: PUSH
41535: LD_STRING 
41537: ST_TO_ADDR
// animal := CreateHuman ;
41538: LD_ADDR_VAR 0 12
41542: PUSH
41543: CALL_OW 44
41547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41548: LD_VAR 0 12
41552: PPUSH
41553: LD_VAR 0 8
41557: PPUSH
41558: LD_INT 0
41560: PPUSH
41561: CALL 43562 0 3
// end ;
41565: GO 41519
41567: POP
41568: POP
// if tigers then
41569: LD_VAR 0 2
41573: IFFALSE 41657
// for i = 1 to tigers do
41575: LD_ADDR_VAR 0 11
41579: PUSH
41580: DOUBLE
41581: LD_INT 1
41583: DEC
41584: ST_TO_ADDR
41585: LD_VAR 0 2
41589: PUSH
41590: FOR_TO
41591: IFFALSE 41655
// begin hc_class = class_tiger ;
41593: LD_ADDR_OWVAR 28
41597: PUSH
41598: LD_INT 14
41600: ST_TO_ADDR
// hc_gallery =  ;
41601: LD_ADDR_OWVAR 33
41605: PUSH
41606: LD_STRING 
41608: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41609: LD_ADDR_OWVAR 35
41613: PUSH
41614: LD_INT 7
41616: NEG
41617: PPUSH
41618: LD_INT 7
41620: PPUSH
41621: CALL_OW 12
41625: ST_TO_ADDR
// animal := CreateHuman ;
41626: LD_ADDR_VAR 0 12
41630: PUSH
41631: CALL_OW 44
41635: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41636: LD_VAR 0 12
41640: PPUSH
41641: LD_VAR 0 8
41645: PPUSH
41646: LD_INT 0
41648: PPUSH
41649: CALL 43562 0 3
// end ;
41653: GO 41590
41655: POP
41656: POP
// if apemans then
41657: LD_VAR 0 3
41661: IFFALSE 41784
// for i = 1 to apemans do
41663: LD_ADDR_VAR 0 11
41667: PUSH
41668: DOUBLE
41669: LD_INT 1
41671: DEC
41672: ST_TO_ADDR
41673: LD_VAR 0 3
41677: PUSH
41678: FOR_TO
41679: IFFALSE 41782
// begin hc_class = class_apeman ;
41681: LD_ADDR_OWVAR 28
41685: PUSH
41686: LD_INT 12
41688: ST_TO_ADDR
// hc_gallery =  ;
41689: LD_ADDR_OWVAR 33
41693: PUSH
41694: LD_STRING 
41696: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
41697: LD_ADDR_OWVAR 35
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PPUSH
41706: LD_INT 2
41708: PPUSH
41709: CALL_OW 12
41713: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41714: LD_ADDR_OWVAR 31
41718: PUSH
41719: LD_INT 1
41721: PPUSH
41722: LD_INT 3
41724: PPUSH
41725: CALL_OW 12
41729: PUSH
41730: LD_INT 1
41732: PPUSH
41733: LD_INT 3
41735: PPUSH
41736: CALL_OW 12
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: ST_TO_ADDR
// animal := CreateHuman ;
41753: LD_ADDR_VAR 0 12
41757: PUSH
41758: CALL_OW 44
41762: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41763: LD_VAR 0 12
41767: PPUSH
41768: LD_VAR 0 8
41772: PPUSH
41773: LD_INT 0
41775: PPUSH
41776: CALL 43562 0 3
// end ;
41780: GO 41678
41782: POP
41783: POP
// if enchidnas then
41784: LD_VAR 0 4
41788: IFFALSE 41855
// for i = 1 to enchidnas do
41790: LD_ADDR_VAR 0 11
41794: PUSH
41795: DOUBLE
41796: LD_INT 1
41798: DEC
41799: ST_TO_ADDR
41800: LD_VAR 0 4
41804: PUSH
41805: FOR_TO
41806: IFFALSE 41853
// begin hc_class = 13 ;
41808: LD_ADDR_OWVAR 28
41812: PUSH
41813: LD_INT 13
41815: ST_TO_ADDR
// hc_gallery =  ;
41816: LD_ADDR_OWVAR 33
41820: PUSH
41821: LD_STRING 
41823: ST_TO_ADDR
// animal := CreateHuman ;
41824: LD_ADDR_VAR 0 12
41828: PUSH
41829: CALL_OW 44
41833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41834: LD_VAR 0 12
41838: PPUSH
41839: LD_VAR 0 8
41843: PPUSH
41844: LD_INT 0
41846: PPUSH
41847: CALL 43562 0 3
// end ;
41851: GO 41805
41853: POP
41854: POP
// if fishes then
41855: LD_VAR 0 7
41859: IFFALSE 41926
// for i = 1 to fishes do
41861: LD_ADDR_VAR 0 11
41865: PUSH
41866: DOUBLE
41867: LD_INT 1
41869: DEC
41870: ST_TO_ADDR
41871: LD_VAR 0 7
41875: PUSH
41876: FOR_TO
41877: IFFALSE 41924
// begin hc_class = 20 ;
41879: LD_ADDR_OWVAR 28
41883: PUSH
41884: LD_INT 20
41886: ST_TO_ADDR
// hc_gallery =  ;
41887: LD_ADDR_OWVAR 33
41891: PUSH
41892: LD_STRING 
41894: ST_TO_ADDR
// animal := CreateHuman ;
41895: LD_ADDR_VAR 0 12
41899: PUSH
41900: CALL_OW 44
41904: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41905: LD_VAR 0 12
41909: PPUSH
41910: LD_VAR 0 9
41914: PPUSH
41915: LD_INT 0
41917: PPUSH
41918: CALL 43562 0 3
// end ;
41922: GO 41876
41924: POP
41925: POP
// end ;
41926: LD_VAR 0 10
41930: RET
// export function WantHeal ( sci , unit ) ; begin
41931: LD_INT 0
41933: PPUSH
// if GetTaskList ( sci ) > 0 then
41934: LD_VAR 0 1
41938: PPUSH
41939: CALL_OW 437
41943: PUSH
41944: LD_INT 0
41946: GREATER
41947: IFFALSE 42017
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41949: LD_VAR 0 1
41953: PPUSH
41954: CALL_OW 437
41958: PUSH
41959: LD_INT 1
41961: ARRAY
41962: PUSH
41963: LD_INT 1
41965: ARRAY
41966: PUSH
41967: LD_STRING l
41969: EQUAL
41970: PUSH
41971: LD_VAR 0 1
41975: PPUSH
41976: CALL_OW 437
41980: PUSH
41981: LD_INT 1
41983: ARRAY
41984: PUSH
41985: LD_INT 4
41987: ARRAY
41988: PUSH
41989: LD_VAR 0 2
41993: EQUAL
41994: AND
41995: IFFALSE 42007
// result := true else
41997: LD_ADDR_VAR 0 3
42001: PUSH
42002: LD_INT 1
42004: ST_TO_ADDR
42005: GO 42015
// result := false ;
42007: LD_ADDR_VAR 0 3
42011: PUSH
42012: LD_INT 0
42014: ST_TO_ADDR
// end else
42015: GO 42025
// result := false ;
42017: LD_ADDR_VAR 0 3
42021: PUSH
42022: LD_INT 0
42024: ST_TO_ADDR
// end ;
42025: LD_VAR 0 3
42029: RET
// export function HealTarget ( sci ) ; begin
42030: LD_INT 0
42032: PPUSH
// if not sci then
42033: LD_VAR 0 1
42037: NOT
42038: IFFALSE 42042
// exit ;
42040: GO 42107
// result := 0 ;
42042: LD_ADDR_VAR 0 2
42046: PUSH
42047: LD_INT 0
42049: ST_TO_ADDR
// if GetTaskList ( sci ) then
42050: LD_VAR 0 1
42054: PPUSH
42055: CALL_OW 437
42059: IFFALSE 42107
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42061: LD_VAR 0 1
42065: PPUSH
42066: CALL_OW 437
42070: PUSH
42071: LD_INT 1
42073: ARRAY
42074: PUSH
42075: LD_INT 1
42077: ARRAY
42078: PUSH
42079: LD_STRING l
42081: EQUAL
42082: IFFALSE 42107
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42084: LD_ADDR_VAR 0 2
42088: PUSH
42089: LD_VAR 0 1
42093: PPUSH
42094: CALL_OW 437
42098: PUSH
42099: LD_INT 1
42101: ARRAY
42102: PUSH
42103: LD_INT 4
42105: ARRAY
42106: ST_TO_ADDR
// end ;
42107: LD_VAR 0 2
42111: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42112: LD_INT 0
42114: PPUSH
42115: PPUSH
42116: PPUSH
42117: PPUSH
// if not base_units then
42118: LD_VAR 0 1
42122: NOT
42123: IFFALSE 42127
// exit ;
42125: GO 42214
// result := false ;
42127: LD_ADDR_VAR 0 2
42131: PUSH
42132: LD_INT 0
42134: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42135: LD_ADDR_VAR 0 5
42139: PUSH
42140: LD_VAR 0 1
42144: PPUSH
42145: LD_INT 21
42147: PUSH
42148: LD_INT 3
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PPUSH
42155: CALL_OW 72
42159: ST_TO_ADDR
// if not tmp then
42160: LD_VAR 0 5
42164: NOT
42165: IFFALSE 42169
// exit ;
42167: GO 42214
// for i in tmp do
42169: LD_ADDR_VAR 0 3
42173: PUSH
42174: LD_VAR 0 5
42178: PUSH
42179: FOR_IN
42180: IFFALSE 42212
// begin result := EnemyInRange ( i , 22 ) ;
42182: LD_ADDR_VAR 0 2
42186: PUSH
42187: LD_VAR 0 3
42191: PPUSH
42192: LD_INT 22
42194: PPUSH
42195: CALL 40450 0 2
42199: ST_TO_ADDR
// if result then
42200: LD_VAR 0 2
42204: IFFALSE 42210
// exit ;
42206: POP
42207: POP
42208: GO 42214
// end ;
42210: GO 42179
42212: POP
42213: POP
// end ;
42214: LD_VAR 0 2
42218: RET
// export function FilterByTag ( units , tag ) ; begin
42219: LD_INT 0
42221: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
42222: LD_ADDR_VAR 0 3
42226: PUSH
42227: LD_VAR 0 1
42231: PPUSH
42232: LD_INT 120
42234: PUSH
42235: LD_VAR 0 2
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PPUSH
42244: CALL_OW 72
42248: ST_TO_ADDR
// end ;
42249: LD_VAR 0 3
42253: RET
// export function IsDriver ( un ) ; begin
42254: LD_INT 0
42256: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42257: LD_ADDR_VAR 0 2
42261: PUSH
42262: LD_VAR 0 1
42266: PUSH
42267: LD_INT 55
42269: PUSH
42270: EMPTY
42271: LIST
42272: PPUSH
42273: CALL_OW 69
42277: IN
42278: ST_TO_ADDR
// end ;
42279: LD_VAR 0 2
42283: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42284: LD_INT 0
42286: PPUSH
42287: PPUSH
// list := [ ] ;
42288: LD_ADDR_VAR 0 5
42292: PUSH
42293: EMPTY
42294: ST_TO_ADDR
// case d of 0 :
42295: LD_VAR 0 3
42299: PUSH
42300: LD_INT 0
42302: DOUBLE
42303: EQUAL
42304: IFTRUE 42308
42306: GO 42441
42308: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42309: LD_ADDR_VAR 0 5
42313: PUSH
42314: LD_VAR 0 1
42318: PUSH
42319: LD_INT 4
42321: MINUS
42322: PUSH
42323: LD_VAR 0 2
42327: PUSH
42328: LD_INT 4
42330: MINUS
42331: PUSH
42332: LD_INT 2
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: PUSH
42340: LD_VAR 0 1
42344: PUSH
42345: LD_INT 3
42347: MINUS
42348: PUSH
42349: LD_VAR 0 2
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: PUSH
42362: LD_VAR 0 1
42366: PUSH
42367: LD_INT 4
42369: PLUS
42370: PUSH
42371: LD_VAR 0 2
42375: PUSH
42376: LD_INT 4
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: LIST
42383: PUSH
42384: LD_VAR 0 1
42388: PUSH
42389: LD_INT 3
42391: PLUS
42392: PUSH
42393: LD_VAR 0 2
42397: PUSH
42398: LD_INT 3
42400: PLUS
42401: PUSH
42402: LD_INT 5
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: LIST
42409: PUSH
42410: LD_VAR 0 1
42414: PUSH
42415: LD_VAR 0 2
42419: PUSH
42420: LD_INT 4
42422: PLUS
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: LIST
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: ST_TO_ADDR
// end ; 1 :
42439: GO 43139
42441: LD_INT 1
42443: DOUBLE
42444: EQUAL
42445: IFTRUE 42449
42447: GO 42582
42449: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42450: LD_ADDR_VAR 0 5
42454: PUSH
42455: LD_VAR 0 1
42459: PUSH
42460: LD_VAR 0 2
42464: PUSH
42465: LD_INT 4
42467: MINUS
42468: PUSH
42469: LD_INT 3
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: LIST
42476: PUSH
42477: LD_VAR 0 1
42481: PUSH
42482: LD_INT 3
42484: MINUS
42485: PUSH
42486: LD_VAR 0 2
42490: PUSH
42491: LD_INT 3
42493: MINUS
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: PUSH
42503: LD_VAR 0 1
42507: PUSH
42508: LD_INT 4
42510: MINUS
42511: PUSH
42512: LD_VAR 0 2
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: LIST
42524: PUSH
42525: LD_VAR 0 1
42529: PUSH
42530: LD_VAR 0 2
42534: PUSH
42535: LD_INT 3
42537: PLUS
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: PUSH
42547: LD_VAR 0 1
42551: PUSH
42552: LD_INT 4
42554: PLUS
42555: PUSH
42556: LD_VAR 0 2
42560: PUSH
42561: LD_INT 4
42563: PLUS
42564: PUSH
42565: LD_INT 5
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: ST_TO_ADDR
// end ; 2 :
42580: GO 43139
42582: LD_INT 2
42584: DOUBLE
42585: EQUAL
42586: IFTRUE 42590
42588: GO 42719
42590: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42591: LD_ADDR_VAR 0 5
42595: PUSH
42596: LD_VAR 0 1
42600: PUSH
42601: LD_VAR 0 2
42605: PUSH
42606: LD_INT 3
42608: MINUS
42609: PUSH
42610: LD_INT 3
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: LIST
42617: PUSH
42618: LD_VAR 0 1
42622: PUSH
42623: LD_INT 4
42625: PLUS
42626: PUSH
42627: LD_VAR 0 2
42631: PUSH
42632: LD_INT 4
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: LIST
42639: PUSH
42640: LD_VAR 0 1
42644: PUSH
42645: LD_VAR 0 2
42649: PUSH
42650: LD_INT 4
42652: PLUS
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: PUSH
42662: LD_VAR 0 1
42666: PUSH
42667: LD_INT 3
42669: MINUS
42670: PUSH
42671: LD_VAR 0 2
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: LIST
42683: PUSH
42684: LD_VAR 0 1
42688: PUSH
42689: LD_INT 4
42691: MINUS
42692: PUSH
42693: LD_VAR 0 2
42697: PUSH
42698: LD_INT 4
42700: MINUS
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: ST_TO_ADDR
// end ; 3 :
42717: GO 43139
42719: LD_INT 3
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42727
42725: GO 42860
42727: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42728: LD_ADDR_VAR 0 5
42732: PUSH
42733: LD_VAR 0 1
42737: PUSH
42738: LD_INT 3
42740: PLUS
42741: PUSH
42742: LD_VAR 0 2
42746: PUSH
42747: LD_INT 4
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: LIST
42754: PUSH
42755: LD_VAR 0 1
42759: PUSH
42760: LD_INT 4
42762: PLUS
42763: PUSH
42764: LD_VAR 0 2
42768: PUSH
42769: LD_INT 4
42771: PLUS
42772: PUSH
42773: LD_INT 5
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: PUSH
42781: LD_VAR 0 1
42785: PUSH
42786: LD_INT 4
42788: MINUS
42789: PUSH
42790: LD_VAR 0 2
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: PUSH
42803: LD_VAR 0 1
42807: PUSH
42808: LD_VAR 0 2
42812: PUSH
42813: LD_INT 4
42815: MINUS
42816: PUSH
42817: LD_INT 3
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: LIST
42824: PUSH
42825: LD_VAR 0 1
42829: PUSH
42830: LD_INT 3
42832: MINUS
42833: PUSH
42834: LD_VAR 0 2
42838: PUSH
42839: LD_INT 3
42841: MINUS
42842: PUSH
42843: LD_INT 2
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: ST_TO_ADDR
// end ; 4 :
42858: GO 43139
42860: LD_INT 4
42862: DOUBLE
42863: EQUAL
42864: IFTRUE 42868
42866: GO 43001
42868: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42869: LD_ADDR_VAR 0 5
42873: PUSH
42874: LD_VAR 0 1
42878: PUSH
42879: LD_VAR 0 2
42883: PUSH
42884: LD_INT 4
42886: PLUS
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: LIST
42895: PUSH
42896: LD_VAR 0 1
42900: PUSH
42901: LD_INT 3
42903: PLUS
42904: PUSH
42905: LD_VAR 0 2
42909: PUSH
42910: LD_INT 3
42912: PLUS
42913: PUSH
42914: LD_INT 5
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: PUSH
42922: LD_VAR 0 1
42926: PUSH
42927: LD_INT 4
42929: PLUS
42930: PUSH
42931: LD_VAR 0 2
42935: PUSH
42936: LD_INT 4
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: PUSH
42944: LD_VAR 0 1
42948: PUSH
42949: LD_VAR 0 2
42953: PUSH
42954: LD_INT 3
42956: MINUS
42957: PUSH
42958: LD_INT 3
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: PUSH
42966: LD_VAR 0 1
42970: PUSH
42971: LD_INT 4
42973: MINUS
42974: PUSH
42975: LD_VAR 0 2
42979: PUSH
42980: LD_INT 4
42982: MINUS
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
// end ; 5 :
42999: GO 43139
43001: LD_INT 5
43003: DOUBLE
43004: EQUAL
43005: IFTRUE 43009
43007: GO 43138
43009: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43010: LD_ADDR_VAR 0 5
43014: PUSH
43015: LD_VAR 0 1
43019: PUSH
43020: LD_INT 4
43022: MINUS
43023: PUSH
43024: LD_VAR 0 2
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: PUSH
43037: LD_VAR 0 1
43041: PUSH
43042: LD_VAR 0 2
43046: PUSH
43047: LD_INT 4
43049: MINUS
43050: PUSH
43051: LD_INT 3
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: LIST
43058: PUSH
43059: LD_VAR 0 1
43063: PUSH
43064: LD_INT 4
43066: PLUS
43067: PUSH
43068: LD_VAR 0 2
43072: PUSH
43073: LD_INT 4
43075: PLUS
43076: PUSH
43077: LD_INT 5
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: LIST
43084: PUSH
43085: LD_VAR 0 1
43089: PUSH
43090: LD_INT 3
43092: PLUS
43093: PUSH
43094: LD_VAR 0 2
43098: PUSH
43099: LD_INT 4
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: LIST
43106: PUSH
43107: LD_VAR 0 1
43111: PUSH
43112: LD_VAR 0 2
43116: PUSH
43117: LD_INT 3
43119: PLUS
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: ST_TO_ADDR
// end ; end ;
43136: GO 43139
43138: POP
// result := list ;
43139: LD_ADDR_VAR 0 4
43143: PUSH
43144: LD_VAR 0 5
43148: ST_TO_ADDR
// end ;
43149: LD_VAR 0 4
43153: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43154: LD_INT 0
43156: PPUSH
43157: PPUSH
43158: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43159: LD_VAR 0 1
43163: NOT
43164: PUSH
43165: LD_VAR 0 2
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: LD_INT 4
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: IN
43188: NOT
43189: OR
43190: IFFALSE 43194
// exit ;
43192: GO 43286
// tmp := [ ] ;
43194: LD_ADDR_VAR 0 5
43198: PUSH
43199: EMPTY
43200: ST_TO_ADDR
// for i in units do
43201: LD_ADDR_VAR 0 4
43205: PUSH
43206: LD_VAR 0 1
43210: PUSH
43211: FOR_IN
43212: IFFALSE 43255
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
43214: LD_ADDR_VAR 0 5
43218: PUSH
43219: LD_VAR 0 5
43223: PPUSH
43224: LD_VAR 0 5
43228: PUSH
43229: LD_INT 1
43231: PLUS
43232: PPUSH
43233: LD_VAR 0 4
43237: PPUSH
43238: LD_VAR 0 2
43242: PPUSH
43243: CALL_OW 259
43247: PPUSH
43248: CALL_OW 2
43252: ST_TO_ADDR
43253: GO 43211
43255: POP
43256: POP
// if not tmp then
43257: LD_VAR 0 5
43261: NOT
43262: IFFALSE 43266
// exit ;
43264: GO 43286
// result := SortListByListDesc ( units , tmp ) ;
43266: LD_ADDR_VAR 0 3
43270: PUSH
43271: LD_VAR 0 1
43275: PPUSH
43276: LD_VAR 0 5
43280: PPUSH
43281: CALL_OW 77
43285: ST_TO_ADDR
// end ;
43286: LD_VAR 0 3
43290: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43291: LD_INT 0
43293: PPUSH
43294: PPUSH
43295: PPUSH
// result := false ;
43296: LD_ADDR_VAR 0 3
43300: PUSH
43301: LD_INT 0
43303: ST_TO_ADDR
// x := GetX ( building ) ;
43304: LD_ADDR_VAR 0 4
43308: PUSH
43309: LD_VAR 0 2
43313: PPUSH
43314: CALL_OW 250
43318: ST_TO_ADDR
// y := GetY ( building ) ;
43319: LD_ADDR_VAR 0 5
43323: PUSH
43324: LD_VAR 0 2
43328: PPUSH
43329: CALL_OW 251
43333: ST_TO_ADDR
// if not building or not x or not y then
43334: LD_VAR 0 2
43338: NOT
43339: PUSH
43340: LD_VAR 0 4
43344: NOT
43345: OR
43346: PUSH
43347: LD_VAR 0 5
43351: NOT
43352: OR
43353: IFFALSE 43357
// exit ;
43355: GO 43449
// if GetTaskList ( unit ) then
43357: LD_VAR 0 1
43361: PPUSH
43362: CALL_OW 437
43366: IFFALSE 43449
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43368: LD_STRING e
43370: PUSH
43371: LD_VAR 0 1
43375: PPUSH
43376: CALL_OW 437
43380: PUSH
43381: LD_INT 1
43383: ARRAY
43384: PUSH
43385: LD_INT 1
43387: ARRAY
43388: EQUAL
43389: PUSH
43390: LD_VAR 0 4
43394: PUSH
43395: LD_VAR 0 1
43399: PPUSH
43400: CALL_OW 437
43404: PUSH
43405: LD_INT 1
43407: ARRAY
43408: PUSH
43409: LD_INT 2
43411: ARRAY
43412: EQUAL
43413: AND
43414: PUSH
43415: LD_VAR 0 5
43419: PUSH
43420: LD_VAR 0 1
43424: PPUSH
43425: CALL_OW 437
43429: PUSH
43430: LD_INT 1
43432: ARRAY
43433: PUSH
43434: LD_INT 3
43436: ARRAY
43437: EQUAL
43438: AND
43439: IFFALSE 43449
// result := true end ;
43441: LD_ADDR_VAR 0 3
43445: PUSH
43446: LD_INT 1
43448: ST_TO_ADDR
// end ;
43449: LD_VAR 0 3
43453: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43454: LD_INT 0
43456: PPUSH
// result := false ;
43457: LD_ADDR_VAR 0 4
43461: PUSH
43462: LD_INT 0
43464: ST_TO_ADDR
// if GetTaskList ( unit ) then
43465: LD_VAR 0 1
43469: PPUSH
43470: CALL_OW 437
43474: IFFALSE 43557
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43476: LD_STRING M
43478: PUSH
43479: LD_VAR 0 1
43483: PPUSH
43484: CALL_OW 437
43488: PUSH
43489: LD_INT 1
43491: ARRAY
43492: PUSH
43493: LD_INT 1
43495: ARRAY
43496: EQUAL
43497: PUSH
43498: LD_VAR 0 2
43502: PUSH
43503: LD_VAR 0 1
43507: PPUSH
43508: CALL_OW 437
43512: PUSH
43513: LD_INT 1
43515: ARRAY
43516: PUSH
43517: LD_INT 2
43519: ARRAY
43520: EQUAL
43521: AND
43522: PUSH
43523: LD_VAR 0 3
43527: PUSH
43528: LD_VAR 0 1
43532: PPUSH
43533: CALL_OW 437
43537: PUSH
43538: LD_INT 1
43540: ARRAY
43541: PUSH
43542: LD_INT 3
43544: ARRAY
43545: EQUAL
43546: AND
43547: IFFALSE 43557
// result := true ;
43549: LD_ADDR_VAR 0 4
43553: PUSH
43554: LD_INT 1
43556: ST_TO_ADDR
// end ; end ;
43557: LD_VAR 0 4
43561: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43562: LD_INT 0
43564: PPUSH
43565: PPUSH
43566: PPUSH
43567: PPUSH
// if not unit or not area then
43568: LD_VAR 0 1
43572: NOT
43573: PUSH
43574: LD_VAR 0 2
43578: NOT
43579: OR
43580: IFFALSE 43584
// exit ;
43582: GO 43748
// tmp := AreaToList ( area , i ) ;
43584: LD_ADDR_VAR 0 6
43588: PUSH
43589: LD_VAR 0 2
43593: PPUSH
43594: LD_VAR 0 5
43598: PPUSH
43599: CALL_OW 517
43603: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43604: LD_ADDR_VAR 0 5
43608: PUSH
43609: DOUBLE
43610: LD_INT 1
43612: DEC
43613: ST_TO_ADDR
43614: LD_VAR 0 6
43618: PUSH
43619: LD_INT 1
43621: ARRAY
43622: PUSH
43623: FOR_TO
43624: IFFALSE 43746
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43626: LD_ADDR_VAR 0 7
43630: PUSH
43631: LD_VAR 0 6
43635: PUSH
43636: LD_INT 1
43638: ARRAY
43639: PUSH
43640: LD_VAR 0 5
43644: ARRAY
43645: PUSH
43646: LD_VAR 0 6
43650: PUSH
43651: LD_INT 2
43653: ARRAY
43654: PUSH
43655: LD_VAR 0 5
43659: ARRAY
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
43665: LD_VAR 0 7
43669: PUSH
43670: LD_INT 1
43672: ARRAY
43673: PPUSH
43674: LD_VAR 0 7
43678: PUSH
43679: LD_INT 2
43681: ARRAY
43682: PPUSH
43683: CALL_OW 428
43687: PUSH
43688: LD_INT 0
43690: EQUAL
43691: IFFALSE 43744
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43693: LD_VAR 0 1
43697: PPUSH
43698: LD_VAR 0 7
43702: PUSH
43703: LD_INT 1
43705: ARRAY
43706: PPUSH
43707: LD_VAR 0 7
43711: PUSH
43712: LD_INT 2
43714: ARRAY
43715: PPUSH
43716: LD_VAR 0 3
43720: PPUSH
43721: CALL_OW 48
// result := IsPlaced ( unit ) ;
43725: LD_ADDR_VAR 0 4
43729: PUSH
43730: LD_VAR 0 1
43734: PPUSH
43735: CALL_OW 305
43739: ST_TO_ADDR
// exit ;
43740: POP
43741: POP
43742: GO 43748
// end ; end ;
43744: GO 43623
43746: POP
43747: POP
// end ;
43748: LD_VAR 0 4
43752: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43753: LD_INT 0
43755: PPUSH
43756: PPUSH
43757: PPUSH
// if not side or side > 8 then
43758: LD_VAR 0 1
43762: NOT
43763: PUSH
43764: LD_VAR 0 1
43768: PUSH
43769: LD_INT 8
43771: GREATER
43772: OR
43773: IFFALSE 43777
// exit ;
43775: GO 43964
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43777: LD_ADDR_VAR 0 4
43781: PUSH
43782: LD_INT 22
43784: PUSH
43785: LD_VAR 0 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 21
43796: PUSH
43797: LD_INT 3
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PPUSH
43808: CALL_OW 69
43812: ST_TO_ADDR
// if not tmp then
43813: LD_VAR 0 4
43817: NOT
43818: IFFALSE 43822
// exit ;
43820: GO 43964
// enable_addtolog := true ;
43822: LD_ADDR_OWVAR 81
43826: PUSH
43827: LD_INT 1
43829: ST_TO_ADDR
// AddToLog ( [ ) ;
43830: LD_STRING [
43832: PPUSH
43833: CALL_OW 561
// for i in tmp do
43837: LD_ADDR_VAR 0 3
43841: PUSH
43842: LD_VAR 0 4
43846: PUSH
43847: FOR_IN
43848: IFFALSE 43955
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43850: LD_STRING [
43852: PUSH
43853: LD_VAR 0 3
43857: PPUSH
43858: CALL_OW 266
43862: STR
43863: PUSH
43864: LD_STRING , 
43866: STR
43867: PUSH
43868: LD_VAR 0 3
43872: PPUSH
43873: CALL_OW 250
43877: STR
43878: PUSH
43879: LD_STRING , 
43881: STR
43882: PUSH
43883: LD_VAR 0 3
43887: PPUSH
43888: CALL_OW 251
43892: STR
43893: PUSH
43894: LD_STRING , 
43896: STR
43897: PUSH
43898: LD_VAR 0 3
43902: PPUSH
43903: CALL_OW 254
43907: STR
43908: PUSH
43909: LD_STRING , 
43911: STR
43912: PUSH
43913: LD_VAR 0 3
43917: PPUSH
43918: LD_INT 1
43920: PPUSH
43921: CALL_OW 268
43925: STR
43926: PUSH
43927: LD_STRING , 
43929: STR
43930: PUSH
43931: LD_VAR 0 3
43935: PPUSH
43936: LD_INT 2
43938: PPUSH
43939: CALL_OW 268
43943: STR
43944: PUSH
43945: LD_STRING ],
43947: STR
43948: PPUSH
43949: CALL_OW 561
// end ;
43953: GO 43847
43955: POP
43956: POP
// AddToLog ( ]; ) ;
43957: LD_STRING ];
43959: PPUSH
43960: CALL_OW 561
// end ;
43964: LD_VAR 0 2
43968: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43969: LD_INT 0
43971: PPUSH
43972: PPUSH
43973: PPUSH
43974: PPUSH
43975: PPUSH
// if not area or not rate or not max then
43976: LD_VAR 0 1
43980: NOT
43981: PUSH
43982: LD_VAR 0 2
43986: NOT
43987: OR
43988: PUSH
43989: LD_VAR 0 4
43993: NOT
43994: OR
43995: IFFALSE 43999
// exit ;
43997: GO 44188
// while 1 do
43999: LD_INT 1
44001: IFFALSE 44188
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44003: LD_ADDR_VAR 0 9
44007: PUSH
44008: LD_VAR 0 1
44012: PPUSH
44013: LD_INT 1
44015: PPUSH
44016: CALL_OW 287
44020: PUSH
44021: LD_INT 10
44023: MUL
44024: ST_TO_ADDR
// r := rate / 10 ;
44025: LD_ADDR_VAR 0 7
44029: PUSH
44030: LD_VAR 0 2
44034: PUSH
44035: LD_INT 10
44037: DIVREAL
44038: ST_TO_ADDR
// time := 1 1$00 ;
44039: LD_ADDR_VAR 0 8
44043: PUSH
44044: LD_INT 2100
44046: ST_TO_ADDR
// if amount < min then
44047: LD_VAR 0 9
44051: PUSH
44052: LD_VAR 0 3
44056: LESS
44057: IFFALSE 44075
// r := r * 2 else
44059: LD_ADDR_VAR 0 7
44063: PUSH
44064: LD_VAR 0 7
44068: PUSH
44069: LD_INT 2
44071: MUL
44072: ST_TO_ADDR
44073: GO 44101
// if amount > max then
44075: LD_VAR 0 9
44079: PUSH
44080: LD_VAR 0 4
44084: GREATER
44085: IFFALSE 44101
// r := r / 2 ;
44087: LD_ADDR_VAR 0 7
44091: PUSH
44092: LD_VAR 0 7
44096: PUSH
44097: LD_INT 2
44099: DIVREAL
44100: ST_TO_ADDR
// time := time / r ;
44101: LD_ADDR_VAR 0 8
44105: PUSH
44106: LD_VAR 0 8
44110: PUSH
44111: LD_VAR 0 7
44115: DIVREAL
44116: ST_TO_ADDR
// if time < 0 then
44117: LD_VAR 0 8
44121: PUSH
44122: LD_INT 0
44124: LESS
44125: IFFALSE 44142
// time := time * - 1 ;
44127: LD_ADDR_VAR 0 8
44131: PUSH
44132: LD_VAR 0 8
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: MUL
44141: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
44142: LD_VAR 0 8
44146: PUSH
44147: LD_INT 35
44149: PPUSH
44150: LD_INT 875
44152: PPUSH
44153: CALL_OW 12
44157: PLUS
44158: PPUSH
44159: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44163: LD_INT 1
44165: PPUSH
44166: LD_INT 5
44168: PPUSH
44169: CALL_OW 12
44173: PPUSH
44174: LD_VAR 0 1
44178: PPUSH
44179: LD_INT 1
44181: PPUSH
44182: CALL_OW 55
// end ;
44186: GO 43999
// end ;
44188: LD_VAR 0 5
44192: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44193: LD_INT 0
44195: PPUSH
44196: PPUSH
44197: PPUSH
44198: PPUSH
44199: PPUSH
44200: PPUSH
44201: PPUSH
44202: PPUSH
// if not turrets or not factories then
44203: LD_VAR 0 1
44207: NOT
44208: PUSH
44209: LD_VAR 0 2
44213: NOT
44214: OR
44215: IFFALSE 44219
// exit ;
44217: GO 44526
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44219: LD_ADDR_VAR 0 10
44223: PUSH
44224: LD_INT 5
44226: PUSH
44227: LD_INT 6
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 4
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 3
44246: PUSH
44247: LD_INT 5
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 24
44261: PUSH
44262: LD_INT 25
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 23
44271: PUSH
44272: LD_INT 27
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 42
44285: PUSH
44286: LD_INT 43
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 44
44295: PUSH
44296: LD_INT 46
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 45
44305: PUSH
44306: LD_INT 47
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: LIST
44322: ST_TO_ADDR
// result := [ ] ;
44323: LD_ADDR_VAR 0 3
44327: PUSH
44328: EMPTY
44329: ST_TO_ADDR
// for i in turrets do
44330: LD_ADDR_VAR 0 4
44334: PUSH
44335: LD_VAR 0 1
44339: PUSH
44340: FOR_IN
44341: IFFALSE 44524
// begin nat := GetNation ( i ) ;
44343: LD_ADDR_VAR 0 7
44347: PUSH
44348: LD_VAR 0 4
44352: PPUSH
44353: CALL_OW 248
44357: ST_TO_ADDR
// weapon := 0 ;
44358: LD_ADDR_VAR 0 8
44362: PUSH
44363: LD_INT 0
44365: ST_TO_ADDR
// if not nat then
44366: LD_VAR 0 7
44370: NOT
44371: IFFALSE 44375
// continue ;
44373: GO 44340
// for j in list [ nat ] do
44375: LD_ADDR_VAR 0 5
44379: PUSH
44380: LD_VAR 0 10
44384: PUSH
44385: LD_VAR 0 7
44389: ARRAY
44390: PUSH
44391: FOR_IN
44392: IFFALSE 44433
// if GetBWeapon ( i ) = j [ 1 ] then
44394: LD_VAR 0 4
44398: PPUSH
44399: CALL_OW 269
44403: PUSH
44404: LD_VAR 0 5
44408: PUSH
44409: LD_INT 1
44411: ARRAY
44412: EQUAL
44413: IFFALSE 44431
// begin weapon := j [ 2 ] ;
44415: LD_ADDR_VAR 0 8
44419: PUSH
44420: LD_VAR 0 5
44424: PUSH
44425: LD_INT 2
44427: ARRAY
44428: ST_TO_ADDR
// break ;
44429: GO 44433
// end ;
44431: GO 44391
44433: POP
44434: POP
// if not weapon then
44435: LD_VAR 0 8
44439: NOT
44440: IFFALSE 44444
// continue ;
44442: GO 44340
// for k in factories do
44444: LD_ADDR_VAR 0 6
44448: PUSH
44449: LD_VAR 0 2
44453: PUSH
44454: FOR_IN
44455: IFFALSE 44520
// begin weapons := AvailableWeaponList ( k ) ;
44457: LD_ADDR_VAR 0 9
44461: PUSH
44462: LD_VAR 0 6
44466: PPUSH
44467: CALL_OW 478
44471: ST_TO_ADDR
// if not weapons then
44472: LD_VAR 0 9
44476: NOT
44477: IFFALSE 44481
// continue ;
44479: GO 44454
// if weapon in weapons then
44481: LD_VAR 0 8
44485: PUSH
44486: LD_VAR 0 9
44490: IN
44491: IFFALSE 44518
// begin result := [ i , weapon ] ;
44493: LD_ADDR_VAR 0 3
44497: PUSH
44498: LD_VAR 0 4
44502: PUSH
44503: LD_VAR 0 8
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: ST_TO_ADDR
// exit ;
44512: POP
44513: POP
44514: POP
44515: POP
44516: GO 44526
// end ; end ;
44518: GO 44454
44520: POP
44521: POP
// end ;
44522: GO 44340
44524: POP
44525: POP
// end ;
44526: LD_VAR 0 3
44530: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44531: LD_INT 0
44533: PPUSH
// if not side or side > 8 then
44534: LD_VAR 0 3
44538: NOT
44539: PUSH
44540: LD_VAR 0 3
44544: PUSH
44545: LD_INT 8
44547: GREATER
44548: OR
44549: IFFALSE 44553
// exit ;
44551: GO 44612
// if not range then
44553: LD_VAR 0 4
44557: NOT
44558: IFFALSE 44569
// range := - 12 ;
44560: LD_ADDR_VAR 0 4
44564: PUSH
44565: LD_INT 12
44567: NEG
44568: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44569: LD_VAR 0 1
44573: PPUSH
44574: LD_VAR 0 2
44578: PPUSH
44579: LD_VAR 0 3
44583: PPUSH
44584: LD_VAR 0 4
44588: PPUSH
44589: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44593: LD_VAR 0 1
44597: PPUSH
44598: LD_VAR 0 2
44602: PPUSH
44603: LD_VAR 0 3
44607: PPUSH
44608: CALL_OW 331
// end ;
44612: LD_VAR 0 5
44616: RET
// export function Video ( mode ) ; begin
44617: LD_INT 0
44619: PPUSH
// ingame_video = mode ;
44620: LD_ADDR_OWVAR 52
44624: PUSH
44625: LD_VAR 0 1
44629: ST_TO_ADDR
// interface_hidden = mode ;
44630: LD_ADDR_OWVAR 54
44634: PUSH
44635: LD_VAR 0 1
44639: ST_TO_ADDR
// end ;
44640: LD_VAR 0 2
44644: RET
// export function Join ( array , element ) ; begin
44645: LD_INT 0
44647: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44648: LD_ADDR_VAR 0 3
44652: PUSH
44653: LD_VAR 0 1
44657: PPUSH
44658: LD_VAR 0 1
44662: PUSH
44663: LD_INT 1
44665: PLUS
44666: PPUSH
44667: LD_VAR 0 2
44671: PPUSH
44672: CALL_OW 1
44676: ST_TO_ADDR
// end ;
44677: LD_VAR 0 3
44681: RET
// export function JoinUnion ( array , element ) ; begin
44682: LD_INT 0
44684: PPUSH
// result := array union element ;
44685: LD_ADDR_VAR 0 3
44689: PUSH
44690: LD_VAR 0 1
44694: PUSH
44695: LD_VAR 0 2
44699: UNION
44700: ST_TO_ADDR
// end ;
44701: LD_VAR 0 3
44705: RET
// export function GetBehemoths ( side ) ; begin
44706: LD_INT 0
44708: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
44709: LD_ADDR_VAR 0 2
44713: PUSH
44714: LD_INT 22
44716: PUSH
44717: LD_VAR 0 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 31
44728: PUSH
44729: LD_INT 25
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PPUSH
44740: CALL_OW 69
44744: ST_TO_ADDR
// end ;
44745: LD_VAR 0 2
44749: RET
// export function Shuffle ( array ) ; var i , index ; begin
44750: LD_INT 0
44752: PPUSH
44753: PPUSH
44754: PPUSH
// result := [ ] ;
44755: LD_ADDR_VAR 0 2
44759: PUSH
44760: EMPTY
44761: ST_TO_ADDR
// if not array then
44762: LD_VAR 0 1
44766: NOT
44767: IFFALSE 44771
// exit ;
44769: GO 44870
// Randomize ;
44771: CALL_OW 10
// for i = array downto 1 do
44775: LD_ADDR_VAR 0 3
44779: PUSH
44780: DOUBLE
44781: LD_VAR 0 1
44785: INC
44786: ST_TO_ADDR
44787: LD_INT 1
44789: PUSH
44790: FOR_DOWNTO
44791: IFFALSE 44868
// begin index := rand ( 1 , array ) ;
44793: LD_ADDR_VAR 0 4
44797: PUSH
44798: LD_INT 1
44800: PPUSH
44801: LD_VAR 0 1
44805: PPUSH
44806: CALL_OW 12
44810: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44811: LD_ADDR_VAR 0 2
44815: PUSH
44816: LD_VAR 0 2
44820: PPUSH
44821: LD_VAR 0 2
44825: PUSH
44826: LD_INT 1
44828: PLUS
44829: PPUSH
44830: LD_VAR 0 1
44834: PUSH
44835: LD_VAR 0 4
44839: ARRAY
44840: PPUSH
44841: CALL_OW 2
44845: ST_TO_ADDR
// array := Delete ( array , index ) ;
44846: LD_ADDR_VAR 0 1
44850: PUSH
44851: LD_VAR 0 1
44855: PPUSH
44856: LD_VAR 0 4
44860: PPUSH
44861: CALL_OW 3
44865: ST_TO_ADDR
// end ;
44866: GO 44790
44868: POP
44869: POP
// end ;
44870: LD_VAR 0 2
44874: RET
// export function GetBaseMaterials ( base ) ; begin
44875: LD_INT 0
44877: PPUSH
// result := [ 0 , 0 , 0 ] ;
44878: LD_ADDR_VAR 0 2
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: LIST
44896: ST_TO_ADDR
// if not base then
44897: LD_VAR 0 1
44901: NOT
44902: IFFALSE 44906
// exit ;
44904: GO 44955
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44906: LD_ADDR_VAR 0 2
44910: PUSH
44911: LD_VAR 0 1
44915: PPUSH
44916: LD_INT 1
44918: PPUSH
44919: CALL_OW 275
44923: PUSH
44924: LD_VAR 0 1
44928: PPUSH
44929: LD_INT 2
44931: PPUSH
44932: CALL_OW 275
44936: PUSH
44937: LD_VAR 0 1
44941: PPUSH
44942: LD_INT 3
44944: PPUSH
44945: CALL_OW 275
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: LIST
44954: ST_TO_ADDR
// end ;
44955: LD_VAR 0 2
44959: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44960: LD_INT 0
44962: PPUSH
44963: PPUSH
// result := array ;
44964: LD_ADDR_VAR 0 3
44968: PUSH
44969: LD_VAR 0 1
44973: ST_TO_ADDR
// if size > 0 then
44974: LD_VAR 0 2
44978: PUSH
44979: LD_INT 0
44981: GREATER
44982: IFFALSE 45028
// for i := array downto size do
44984: LD_ADDR_VAR 0 4
44988: PUSH
44989: DOUBLE
44990: LD_VAR 0 1
44994: INC
44995: ST_TO_ADDR
44996: LD_VAR 0 2
45000: PUSH
45001: FOR_DOWNTO
45002: IFFALSE 45026
// result := Delete ( result , result ) ;
45004: LD_ADDR_VAR 0 3
45008: PUSH
45009: LD_VAR 0 3
45013: PPUSH
45014: LD_VAR 0 3
45018: PPUSH
45019: CALL_OW 3
45023: ST_TO_ADDR
45024: GO 45001
45026: POP
45027: POP
// end ;
45028: LD_VAR 0 3
45032: RET
// export function ComExit ( unit ) ; var tmp ; begin
45033: LD_INT 0
45035: PPUSH
45036: PPUSH
// if not IsInUnit ( unit ) then
45037: LD_VAR 0 1
45041: PPUSH
45042: CALL_OW 310
45046: NOT
45047: IFFALSE 45051
// exit ;
45049: GO 45111
// tmp := IsInUnit ( unit ) ;
45051: LD_ADDR_VAR 0 3
45055: PUSH
45056: LD_VAR 0 1
45060: PPUSH
45061: CALL_OW 310
45065: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45066: LD_VAR 0 3
45070: PPUSH
45071: CALL_OW 247
45075: PUSH
45076: LD_INT 2
45078: EQUAL
45079: IFFALSE 45092
// ComExitVehicle ( unit ) else
45081: LD_VAR 0 1
45085: PPUSH
45086: CALL_OW 121
45090: GO 45101
// ComExitBuilding ( unit ) ;
45092: LD_VAR 0 1
45096: PPUSH
45097: CALL_OW 122
// result := tmp ;
45101: LD_ADDR_VAR 0 2
45105: PUSH
45106: LD_VAR 0 3
45110: ST_TO_ADDR
// end ;
45111: LD_VAR 0 2
45115: RET
// export function ComExitAll ( units ) ; var i ; begin
45116: LD_INT 0
45118: PPUSH
45119: PPUSH
// if not units then
45120: LD_VAR 0 1
45124: NOT
45125: IFFALSE 45129
// exit ;
45127: GO 45155
// for i in units do
45129: LD_ADDR_VAR 0 3
45133: PUSH
45134: LD_VAR 0 1
45138: PUSH
45139: FOR_IN
45140: IFFALSE 45153
// ComExit ( i ) ;
45142: LD_VAR 0 3
45146: PPUSH
45147: CALL 45033 0 1
45151: GO 45139
45153: POP
45154: POP
// end ;
45155: LD_VAR 0 2
45159: RET
// export function ResetHc ; begin
45160: LD_INT 0
45162: PPUSH
// InitHc ;
45163: CALL_OW 19
// hc_importance := 0 ;
45167: LD_ADDR_OWVAR 32
45171: PUSH
45172: LD_INT 0
45174: ST_TO_ADDR
// end ;
45175: LD_VAR 0 1
45179: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45180: LD_INT 0
45182: PPUSH
45183: PPUSH
45184: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45185: LD_ADDR_VAR 0 6
45189: PUSH
45190: LD_VAR 0 1
45194: PUSH
45195: LD_VAR 0 3
45199: PLUS
45200: PUSH
45201: LD_INT 2
45203: DIV
45204: ST_TO_ADDR
// if _x < 0 then
45205: LD_VAR 0 6
45209: PUSH
45210: LD_INT 0
45212: LESS
45213: IFFALSE 45230
// _x := _x * - 1 ;
45215: LD_ADDR_VAR 0 6
45219: PUSH
45220: LD_VAR 0 6
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: MUL
45229: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45230: LD_ADDR_VAR 0 7
45234: PUSH
45235: LD_VAR 0 2
45239: PUSH
45240: LD_VAR 0 4
45244: PLUS
45245: PUSH
45246: LD_INT 2
45248: DIV
45249: ST_TO_ADDR
// if _y < 0 then
45250: LD_VAR 0 7
45254: PUSH
45255: LD_INT 0
45257: LESS
45258: IFFALSE 45275
// _y := _y * - 1 ;
45260: LD_ADDR_VAR 0 7
45264: PUSH
45265: LD_VAR 0 7
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: MUL
45274: ST_TO_ADDR
// result := [ _x , _y ] ;
45275: LD_ADDR_VAR 0 5
45279: PUSH
45280: LD_VAR 0 6
45284: PUSH
45285: LD_VAR 0 7
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: ST_TO_ADDR
// end ;
45294: LD_VAR 0 5
45298: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45299: LD_INT 0
45301: PPUSH
45302: PPUSH
45303: PPUSH
45304: PPUSH
// task := GetTaskList ( unit ) ;
45305: LD_ADDR_VAR 0 7
45309: PUSH
45310: LD_VAR 0 1
45314: PPUSH
45315: CALL_OW 437
45319: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45320: LD_VAR 0 7
45324: NOT
45325: PUSH
45326: LD_VAR 0 1
45330: PPUSH
45331: LD_VAR 0 2
45335: PPUSH
45336: CALL_OW 308
45340: NOT
45341: AND
45342: IFFALSE 45346
// exit ;
45344: GO 45464
// if IsInArea ( unit , area ) then
45346: LD_VAR 0 1
45350: PPUSH
45351: LD_VAR 0 2
45355: PPUSH
45356: CALL_OW 308
45360: IFFALSE 45378
// begin ComMoveToArea ( unit , goAway ) ;
45362: LD_VAR 0 1
45366: PPUSH
45367: LD_VAR 0 3
45371: PPUSH
45372: CALL_OW 113
// exit ;
45376: GO 45464
// end ; if task [ 1 ] [ 1 ] <> M then
45378: LD_VAR 0 7
45382: PUSH
45383: LD_INT 1
45385: ARRAY
45386: PUSH
45387: LD_INT 1
45389: ARRAY
45390: PUSH
45391: LD_STRING M
45393: NONEQUAL
45394: IFFALSE 45398
// exit ;
45396: GO 45464
// x := task [ 1 ] [ 2 ] ;
45398: LD_ADDR_VAR 0 5
45402: PUSH
45403: LD_VAR 0 7
45407: PUSH
45408: LD_INT 1
45410: ARRAY
45411: PUSH
45412: LD_INT 2
45414: ARRAY
45415: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45416: LD_ADDR_VAR 0 6
45420: PUSH
45421: LD_VAR 0 7
45425: PUSH
45426: LD_INT 1
45428: ARRAY
45429: PUSH
45430: LD_INT 3
45432: ARRAY
45433: ST_TO_ADDR
// if InArea ( x , y , area ) then
45434: LD_VAR 0 5
45438: PPUSH
45439: LD_VAR 0 6
45443: PPUSH
45444: LD_VAR 0 2
45448: PPUSH
45449: CALL_OW 309
45453: IFFALSE 45464
// ComStop ( unit ) ;
45455: LD_VAR 0 1
45459: PPUSH
45460: CALL_OW 141
// end ;
45464: LD_VAR 0 4
45468: RET
// export function Abs ( value ) ; begin
45469: LD_INT 0
45471: PPUSH
// result := value ;
45472: LD_ADDR_VAR 0 2
45476: PUSH
45477: LD_VAR 0 1
45481: ST_TO_ADDR
// if value < 0 then
45482: LD_VAR 0 1
45486: PUSH
45487: LD_INT 0
45489: LESS
45490: IFFALSE 45507
// result := value * - 1 ;
45492: LD_ADDR_VAR 0 2
45496: PUSH
45497: LD_VAR 0 1
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: MUL
45506: ST_TO_ADDR
// end ;
45507: LD_VAR 0 2
45511: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45512: LD_INT 0
45514: PPUSH
45515: PPUSH
45516: PPUSH
45517: PPUSH
45518: PPUSH
45519: PPUSH
45520: PPUSH
45521: PPUSH
// if not unit or not building then
45522: LD_VAR 0 1
45526: NOT
45527: PUSH
45528: LD_VAR 0 2
45532: NOT
45533: OR
45534: IFFALSE 45538
// exit ;
45536: GO 45764
// x := GetX ( building ) ;
45538: LD_ADDR_VAR 0 4
45542: PUSH
45543: LD_VAR 0 2
45547: PPUSH
45548: CALL_OW 250
45552: ST_TO_ADDR
// y := GetY ( building ) ;
45553: LD_ADDR_VAR 0 6
45557: PUSH
45558: LD_VAR 0 2
45562: PPUSH
45563: CALL_OW 251
45567: ST_TO_ADDR
// d := GetDir ( building ) ;
45568: LD_ADDR_VAR 0 8
45572: PUSH
45573: LD_VAR 0 2
45577: PPUSH
45578: CALL_OW 254
45582: ST_TO_ADDR
// r := 4 ;
45583: LD_ADDR_VAR 0 9
45587: PUSH
45588: LD_INT 4
45590: ST_TO_ADDR
// for i := 1 to 5 do
45591: LD_ADDR_VAR 0 10
45595: PUSH
45596: DOUBLE
45597: LD_INT 1
45599: DEC
45600: ST_TO_ADDR
45601: LD_INT 5
45603: PUSH
45604: FOR_TO
45605: IFFALSE 45762
// begin _x := ShiftX ( x , d , r + i ) ;
45607: LD_ADDR_VAR 0 5
45611: PUSH
45612: LD_VAR 0 4
45616: PPUSH
45617: LD_VAR 0 8
45621: PPUSH
45622: LD_VAR 0 9
45626: PUSH
45627: LD_VAR 0 10
45631: PLUS
45632: PPUSH
45633: CALL_OW 272
45637: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45638: LD_ADDR_VAR 0 7
45642: PUSH
45643: LD_VAR 0 6
45647: PPUSH
45648: LD_VAR 0 8
45652: PPUSH
45653: LD_VAR 0 9
45657: PUSH
45658: LD_VAR 0 10
45662: PLUS
45663: PPUSH
45664: CALL_OW 273
45668: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45669: LD_VAR 0 5
45673: PPUSH
45674: LD_VAR 0 7
45678: PPUSH
45679: CALL_OW 488
45683: PUSH
45684: LD_VAR 0 5
45688: PPUSH
45689: LD_VAR 0 7
45693: PPUSH
45694: CALL_OW 428
45698: PPUSH
45699: CALL_OW 247
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: IN
45714: NOT
45715: AND
45716: IFFALSE 45760
// begin ComMoveXY ( unit , _x , _y ) ;
45718: LD_VAR 0 1
45722: PPUSH
45723: LD_VAR 0 5
45727: PPUSH
45728: LD_VAR 0 7
45732: PPUSH
45733: CALL_OW 111
// result := [ _x , _y ] ;
45737: LD_ADDR_VAR 0 3
45741: PUSH
45742: LD_VAR 0 5
45746: PUSH
45747: LD_VAR 0 7
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: ST_TO_ADDR
// exit ;
45756: POP
45757: POP
45758: GO 45764
// end ; end ;
45760: GO 45604
45762: POP
45763: POP
// end ;
45764: LD_VAR 0 3
45768: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45769: LD_INT 0
45771: PPUSH
45772: PPUSH
45773: PPUSH
// result := 0 ;
45774: LD_ADDR_VAR 0 3
45778: PUSH
45779: LD_INT 0
45781: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45782: LD_VAR 0 1
45786: PUSH
45787: LD_INT 0
45789: LESS
45790: PUSH
45791: LD_VAR 0 1
45795: PUSH
45796: LD_INT 8
45798: GREATER
45799: OR
45800: PUSH
45801: LD_VAR 0 2
45805: PUSH
45806: LD_INT 0
45808: LESS
45809: OR
45810: PUSH
45811: LD_VAR 0 2
45815: PUSH
45816: LD_INT 8
45818: GREATER
45819: OR
45820: IFFALSE 45824
// exit ;
45822: GO 45899
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45824: LD_ADDR_VAR 0 4
45828: PUSH
45829: LD_INT 22
45831: PUSH
45832: LD_VAR 0 2
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PPUSH
45841: CALL_OW 69
45845: PUSH
45846: FOR_IN
45847: IFFALSE 45897
// begin un := UnitShoot ( i ) ;
45849: LD_ADDR_VAR 0 5
45853: PUSH
45854: LD_VAR 0 4
45858: PPUSH
45859: CALL_OW 504
45863: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45864: LD_VAR 0 5
45868: PPUSH
45869: CALL_OW 255
45873: PUSH
45874: LD_VAR 0 1
45878: EQUAL
45879: IFFALSE 45895
// begin result := un ;
45881: LD_ADDR_VAR 0 3
45885: PUSH
45886: LD_VAR 0 5
45890: ST_TO_ADDR
// exit ;
45891: POP
45892: POP
45893: GO 45899
// end ; end ;
45895: GO 45846
45897: POP
45898: POP
// end ;
45899: LD_VAR 0 3
45903: RET
// export function GetCargoBay ( units ) ; begin
45904: LD_INT 0
45906: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45907: LD_ADDR_VAR 0 2
45911: PUSH
45912: LD_VAR 0 1
45916: PPUSH
45917: LD_INT 2
45919: PUSH
45920: LD_INT 34
45922: PUSH
45923: LD_INT 12
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 34
45932: PUSH
45933: LD_INT 51
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 34
45942: PUSH
45943: LD_INT 32
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 34
45952: PUSH
45953: LD_EXP 40
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: PPUSH
45969: CALL_OW 72
45973: ST_TO_ADDR
// end ;
45974: LD_VAR 0 2
45978: RET
// export function Negate ( value ) ; begin
45979: LD_INT 0
45981: PPUSH
// result := not value ;
45982: LD_ADDR_VAR 0 2
45986: PUSH
45987: LD_VAR 0 1
45991: NOT
45992: ST_TO_ADDR
// end ;
45993: LD_VAR 0 2
45997: RET
// export function Inc ( value ) ; begin
45998: LD_INT 0
46000: PPUSH
// result := value + 1 ;
46001: LD_ADDR_VAR 0 2
46005: PUSH
46006: LD_VAR 0 1
46010: PUSH
46011: LD_INT 1
46013: PLUS
46014: ST_TO_ADDR
// end ;
46015: LD_VAR 0 2
46019: RET
// export function Dec ( value ) ; begin
46020: LD_INT 0
46022: PPUSH
// result := value - 1 ;
46023: LD_ADDR_VAR 0 2
46027: PUSH
46028: LD_VAR 0 1
46032: PUSH
46033: LD_INT 1
46035: MINUS
46036: ST_TO_ADDR
// end ;
46037: LD_VAR 0 2
46041: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46042: LD_INT 0
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
46048: PPUSH
46049: PPUSH
46050: PPUSH
46051: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46052: LD_VAR 0 1
46056: PPUSH
46057: LD_VAR 0 2
46061: PPUSH
46062: CALL_OW 488
46066: NOT
46067: PUSH
46068: LD_VAR 0 3
46072: PPUSH
46073: LD_VAR 0 4
46077: PPUSH
46078: CALL_OW 488
46082: NOT
46083: OR
46084: IFFALSE 46097
// begin result := - 1 ;
46086: LD_ADDR_VAR 0 5
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: ST_TO_ADDR
// exit ;
46095: GO 46332
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46097: LD_ADDR_VAR 0 12
46101: PUSH
46102: LD_VAR 0 1
46106: PPUSH
46107: LD_VAR 0 2
46111: PPUSH
46112: LD_VAR 0 3
46116: PPUSH
46117: LD_VAR 0 4
46121: PPUSH
46122: CALL 45180 0 4
46126: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46127: LD_ADDR_VAR 0 11
46131: PUSH
46132: LD_VAR 0 1
46136: PPUSH
46137: LD_VAR 0 2
46141: PPUSH
46142: LD_VAR 0 12
46146: PUSH
46147: LD_INT 1
46149: ARRAY
46150: PPUSH
46151: LD_VAR 0 12
46155: PUSH
46156: LD_INT 2
46158: ARRAY
46159: PPUSH
46160: CALL_OW 298
46164: ST_TO_ADDR
// distance := 9999 ;
46165: LD_ADDR_VAR 0 10
46169: PUSH
46170: LD_INT 9999
46172: ST_TO_ADDR
// for i := 0 to 5 do
46173: LD_ADDR_VAR 0 6
46177: PUSH
46178: DOUBLE
46179: LD_INT 0
46181: DEC
46182: ST_TO_ADDR
46183: LD_INT 5
46185: PUSH
46186: FOR_TO
46187: IFFALSE 46330
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46189: LD_ADDR_VAR 0 7
46193: PUSH
46194: LD_VAR 0 1
46198: PPUSH
46199: LD_VAR 0 6
46203: PPUSH
46204: LD_VAR 0 11
46208: PPUSH
46209: CALL_OW 272
46213: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46214: LD_ADDR_VAR 0 8
46218: PUSH
46219: LD_VAR 0 2
46223: PPUSH
46224: LD_VAR 0 6
46228: PPUSH
46229: LD_VAR 0 11
46233: PPUSH
46234: CALL_OW 273
46238: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46239: LD_VAR 0 7
46243: PPUSH
46244: LD_VAR 0 8
46248: PPUSH
46249: CALL_OW 488
46253: NOT
46254: IFFALSE 46258
// continue ;
46256: GO 46186
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
46258: LD_ADDR_VAR 0 9
46262: PUSH
46263: LD_VAR 0 12
46267: PUSH
46268: LD_INT 1
46270: ARRAY
46271: PPUSH
46272: LD_VAR 0 12
46276: PUSH
46277: LD_INT 2
46279: ARRAY
46280: PPUSH
46281: LD_VAR 0 7
46285: PPUSH
46286: LD_VAR 0 8
46290: PPUSH
46291: CALL_OW 298
46295: ST_TO_ADDR
// if tmp < distance then
46296: LD_VAR 0 9
46300: PUSH
46301: LD_VAR 0 10
46305: LESS
46306: IFFALSE 46328
// begin result := i ;
46308: LD_ADDR_VAR 0 5
46312: PUSH
46313: LD_VAR 0 6
46317: ST_TO_ADDR
// distance := tmp ;
46318: LD_ADDR_VAR 0 10
46322: PUSH
46323: LD_VAR 0 9
46327: ST_TO_ADDR
// end ; end ;
46328: GO 46186
46330: POP
46331: POP
// end ;
46332: LD_VAR 0 5
46336: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46337: LD_INT 0
46339: PPUSH
46340: PPUSH
// if not driver or not IsInUnit ( driver ) then
46341: LD_VAR 0 1
46345: NOT
46346: PUSH
46347: LD_VAR 0 1
46351: PPUSH
46352: CALL_OW 310
46356: NOT
46357: OR
46358: IFFALSE 46362
// exit ;
46360: GO 46452
// vehicle := IsInUnit ( driver ) ;
46362: LD_ADDR_VAR 0 3
46366: PUSH
46367: LD_VAR 0 1
46371: PPUSH
46372: CALL_OW 310
46376: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46377: LD_VAR 0 1
46381: PPUSH
46382: LD_STRING \
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: PUSH
46412: LD_STRING E
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: LD_VAR 0 3
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PPUSH
46448: CALL_OW 446
// end ;
46452: LD_VAR 0 2
46456: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46457: LD_INT 0
46459: PPUSH
46460: PPUSH
// if not driver or not IsInUnit ( driver ) then
46461: LD_VAR 0 1
46465: NOT
46466: PUSH
46467: LD_VAR 0 1
46471: PPUSH
46472: CALL_OW 310
46476: NOT
46477: OR
46478: IFFALSE 46482
// exit ;
46480: GO 46572
// vehicle := IsInUnit ( driver ) ;
46482: LD_ADDR_VAR 0 3
46486: PUSH
46487: LD_VAR 0 1
46491: PPUSH
46492: CALL_OW 310
46496: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46497: LD_VAR 0 1
46501: PPUSH
46502: LD_STRING \
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: PUSH
46532: LD_STRING E
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_VAR 0 3
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PPUSH
46568: CALL_OW 447
// end ;
46572: LD_VAR 0 2
46576: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
46577: LD_INT 0
46579: PPUSH
46580: PPUSH
46581: PPUSH
// tmp := [ ] ;
46582: LD_ADDR_VAR 0 5
46586: PUSH
46587: EMPTY
46588: ST_TO_ADDR
// for i in units do
46589: LD_ADDR_VAR 0 4
46593: PUSH
46594: LD_VAR 0 1
46598: PUSH
46599: FOR_IN
46600: IFFALSE 46638
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
46602: LD_ADDR_VAR 0 5
46606: PUSH
46607: LD_VAR 0 5
46611: PPUSH
46612: LD_VAR 0 5
46616: PUSH
46617: LD_INT 1
46619: PLUS
46620: PPUSH
46621: LD_VAR 0 4
46625: PPUSH
46626: CALL_OW 256
46630: PPUSH
46631: CALL_OW 2
46635: ST_TO_ADDR
46636: GO 46599
46638: POP
46639: POP
// if not tmp then
46640: LD_VAR 0 5
46644: NOT
46645: IFFALSE 46649
// exit ;
46647: GO 46697
// if asc then
46649: LD_VAR 0 2
46653: IFFALSE 46677
// result := SortListByListAsc ( units , tmp ) else
46655: LD_ADDR_VAR 0 3
46659: PUSH
46660: LD_VAR 0 1
46664: PPUSH
46665: LD_VAR 0 5
46669: PPUSH
46670: CALL_OW 76
46674: ST_TO_ADDR
46675: GO 46697
// result := SortListByListDesc ( units , tmp ) ;
46677: LD_ADDR_VAR 0 3
46681: PUSH
46682: LD_VAR 0 1
46686: PPUSH
46687: LD_VAR 0 5
46691: PPUSH
46692: CALL_OW 77
46696: ST_TO_ADDR
// end ;
46697: LD_VAR 0 3
46701: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
46702: LD_INT 0
46704: PPUSH
46705: PPUSH
// task := GetTaskList ( mech ) ;
46706: LD_ADDR_VAR 0 4
46710: PUSH
46711: LD_VAR 0 1
46715: PPUSH
46716: CALL_OW 437
46720: ST_TO_ADDR
// if not task then
46721: LD_VAR 0 4
46725: NOT
46726: IFFALSE 46730
// exit ;
46728: GO 46772
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
46730: LD_ADDR_VAR 0 3
46734: PUSH
46735: LD_VAR 0 4
46739: PUSH
46740: LD_INT 1
46742: ARRAY
46743: PUSH
46744: LD_INT 1
46746: ARRAY
46747: PUSH
46748: LD_STRING r
46750: EQUAL
46751: PUSH
46752: LD_VAR 0 4
46756: PUSH
46757: LD_INT 1
46759: ARRAY
46760: PUSH
46761: LD_INT 4
46763: ARRAY
46764: PUSH
46765: LD_VAR 0 2
46769: EQUAL
46770: AND
46771: ST_TO_ADDR
// end ;
46772: LD_VAR 0 3
46776: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
46777: LD_INT 0
46779: PPUSH
// SetDir ( unit , d ) ;
46780: LD_VAR 0 1
46784: PPUSH
46785: LD_VAR 0 4
46789: PPUSH
46790: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
46794: LD_VAR 0 1
46798: PPUSH
46799: LD_VAR 0 2
46803: PPUSH
46804: LD_VAR 0 3
46808: PPUSH
46809: LD_VAR 0 5
46813: PPUSH
46814: CALL_OW 48
// end ;
46818: LD_VAR 0 6
46822: RET
// export function ToNaturalNumber ( number ) ; begin
46823: LD_INT 0
46825: PPUSH
// result := number div 1 ;
46826: LD_ADDR_VAR 0 2
46830: PUSH
46831: LD_VAR 0 1
46835: PUSH
46836: LD_INT 1
46838: DIV
46839: ST_TO_ADDR
// if number < 0 then
46840: LD_VAR 0 1
46844: PUSH
46845: LD_INT 0
46847: LESS
46848: IFFALSE 46858
// result := 0 ;
46850: LD_ADDR_VAR 0 2
46854: PUSH
46855: LD_INT 0
46857: ST_TO_ADDR
// end ;
46858: LD_VAR 0 2
46862: RET
// export function SortByClass ( units , class ) ; var un ; begin
46863: LD_INT 0
46865: PPUSH
46866: PPUSH
// if not units or not class then
46867: LD_VAR 0 1
46871: NOT
46872: PUSH
46873: LD_VAR 0 2
46877: NOT
46878: OR
46879: IFFALSE 46883
// exit ;
46881: GO 46978
// result := [ ] ;
46883: LD_ADDR_VAR 0 3
46887: PUSH
46888: EMPTY
46889: ST_TO_ADDR
// for un in units do
46890: LD_ADDR_VAR 0 4
46894: PUSH
46895: LD_VAR 0 1
46899: PUSH
46900: FOR_IN
46901: IFFALSE 46976
// if GetClass ( un ) = class then
46903: LD_VAR 0 4
46907: PPUSH
46908: CALL_OW 257
46912: PUSH
46913: LD_VAR 0 2
46917: EQUAL
46918: IFFALSE 46945
// result := Insert ( result , 1 , un ) else
46920: LD_ADDR_VAR 0 3
46924: PUSH
46925: LD_VAR 0 3
46929: PPUSH
46930: LD_INT 1
46932: PPUSH
46933: LD_VAR 0 4
46937: PPUSH
46938: CALL_OW 2
46942: ST_TO_ADDR
46943: GO 46974
// result := Replace ( result , result + 1 , un ) ;
46945: LD_ADDR_VAR 0 3
46949: PUSH
46950: LD_VAR 0 3
46954: PPUSH
46955: LD_VAR 0 3
46959: PUSH
46960: LD_INT 1
46962: PLUS
46963: PPUSH
46964: LD_VAR 0 4
46968: PPUSH
46969: CALL_OW 1
46973: ST_TO_ADDR
46974: GO 46900
46976: POP
46977: POP
// end ;
46978: LD_VAR 0 3
46982: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46983: LD_INT 0
46985: PPUSH
46986: PPUSH
46987: PPUSH
46988: PPUSH
46989: PPUSH
46990: PPUSH
46991: PPUSH
// result := [ ] ;
46992: LD_ADDR_VAR 0 4
46996: PUSH
46997: EMPTY
46998: ST_TO_ADDR
// if x - r < 0 then
46999: LD_VAR 0 1
47003: PUSH
47004: LD_VAR 0 3
47008: MINUS
47009: PUSH
47010: LD_INT 0
47012: LESS
47013: IFFALSE 47025
// min_x := 0 else
47015: LD_ADDR_VAR 0 8
47019: PUSH
47020: LD_INT 0
47022: ST_TO_ADDR
47023: GO 47041
// min_x := x - r ;
47025: LD_ADDR_VAR 0 8
47029: PUSH
47030: LD_VAR 0 1
47034: PUSH
47035: LD_VAR 0 3
47039: MINUS
47040: ST_TO_ADDR
// if y - r < 0 then
47041: LD_VAR 0 2
47045: PUSH
47046: LD_VAR 0 3
47050: MINUS
47051: PUSH
47052: LD_INT 0
47054: LESS
47055: IFFALSE 47067
// min_y := 0 else
47057: LD_ADDR_VAR 0 7
47061: PUSH
47062: LD_INT 0
47064: ST_TO_ADDR
47065: GO 47083
// min_y := y - r ;
47067: LD_ADDR_VAR 0 7
47071: PUSH
47072: LD_VAR 0 2
47076: PUSH
47077: LD_VAR 0 3
47081: MINUS
47082: ST_TO_ADDR
// max_x := x + r ;
47083: LD_ADDR_VAR 0 9
47087: PUSH
47088: LD_VAR 0 1
47092: PUSH
47093: LD_VAR 0 3
47097: PLUS
47098: ST_TO_ADDR
// max_y := y + r ;
47099: LD_ADDR_VAR 0 10
47103: PUSH
47104: LD_VAR 0 2
47108: PUSH
47109: LD_VAR 0 3
47113: PLUS
47114: ST_TO_ADDR
// for _x = min_x to max_x do
47115: LD_ADDR_VAR 0 5
47119: PUSH
47120: DOUBLE
47121: LD_VAR 0 8
47125: DEC
47126: ST_TO_ADDR
47127: LD_VAR 0 9
47131: PUSH
47132: FOR_TO
47133: IFFALSE 47234
// for _y = min_y to max_y do
47135: LD_ADDR_VAR 0 6
47139: PUSH
47140: DOUBLE
47141: LD_VAR 0 7
47145: DEC
47146: ST_TO_ADDR
47147: LD_VAR 0 10
47151: PUSH
47152: FOR_TO
47153: IFFALSE 47230
// begin if not ValidHex ( _x , _y ) then
47155: LD_VAR 0 5
47159: PPUSH
47160: LD_VAR 0 6
47164: PPUSH
47165: CALL_OW 488
47169: NOT
47170: IFFALSE 47174
// continue ;
47172: GO 47152
// if GetResourceTypeXY ( _x , _y ) then
47174: LD_VAR 0 5
47178: PPUSH
47179: LD_VAR 0 6
47183: PPUSH
47184: CALL_OW 283
47188: IFFALSE 47228
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47190: LD_ADDR_VAR 0 4
47194: PUSH
47195: LD_VAR 0 4
47199: PPUSH
47200: LD_VAR 0 4
47204: PUSH
47205: LD_INT 1
47207: PLUS
47208: PPUSH
47209: LD_VAR 0 5
47213: PUSH
47214: LD_VAR 0 6
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PPUSH
47223: CALL_OW 1
47227: ST_TO_ADDR
// end ;
47228: GO 47152
47230: POP
47231: POP
47232: GO 47132
47234: POP
47235: POP
// end ;
47236: LD_VAR 0 4
47240: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47241: LD_INT 0
47243: PPUSH
47244: PPUSH
47245: PPUSH
47246: PPUSH
47247: PPUSH
47248: PPUSH
47249: PPUSH
47250: PPUSH
// if not units then
47251: LD_VAR 0 1
47255: NOT
47256: IFFALSE 47260
// exit ;
47258: GO 47771
// result := UnitFilter ( units , [ f_ok ] ) ;
47260: LD_ADDR_VAR 0 3
47264: PUSH
47265: LD_VAR 0 1
47269: PPUSH
47270: LD_INT 50
47272: PUSH
47273: EMPTY
47274: LIST
47275: PPUSH
47276: CALL_OW 72
47280: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
47281: LD_ADDR_VAR 0 8
47285: PUSH
47286: LD_VAR 0 1
47290: PUSH
47291: LD_INT 1
47293: ARRAY
47294: PPUSH
47295: CALL_OW 255
47299: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
47300: LD_ADDR_VAR 0 10
47304: PUSH
47305: LD_INT 29
47307: PUSH
47308: LD_EXP 43
47312: PUSH
47313: LD_INT 49
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: LIST
47320: ST_TO_ADDR
// if not result then
47321: LD_VAR 0 3
47325: NOT
47326: IFFALSE 47330
// exit ;
47328: GO 47771
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
47330: LD_ADDR_VAR 0 5
47334: PUSH
47335: LD_INT 81
47337: PUSH
47338: LD_VAR 0 8
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PPUSH
47347: CALL_OW 69
47351: ST_TO_ADDR
// for i in result do
47352: LD_ADDR_VAR 0 4
47356: PUSH
47357: LD_VAR 0 3
47361: PUSH
47362: FOR_IN
47363: IFFALSE 47769
// begin tag := GetTag ( i ) + 1 ;
47365: LD_ADDR_VAR 0 9
47369: PUSH
47370: LD_VAR 0 4
47374: PPUSH
47375: CALL_OW 110
47379: PUSH
47380: LD_INT 1
47382: PLUS
47383: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
47384: LD_ADDR_VAR 0 7
47388: PUSH
47389: LD_VAR 0 4
47393: PPUSH
47394: CALL_OW 250
47398: PPUSH
47399: LD_VAR 0 4
47403: PPUSH
47404: CALL_OW 251
47408: PPUSH
47409: LD_INT 6
47411: PPUSH
47412: CALL 46983 0 3
47416: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
47417: LD_VAR 0 7
47421: PUSH
47422: LD_VAR 0 4
47426: PPUSH
47427: CALL_OW 264
47431: PUSH
47432: LD_VAR 0 10
47436: IN
47437: NOT
47438: AND
47439: IFFALSE 47478
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
47441: LD_VAR 0 4
47445: PPUSH
47446: LD_VAR 0 7
47450: PUSH
47451: LD_INT 1
47453: ARRAY
47454: PUSH
47455: LD_INT 1
47457: ARRAY
47458: PPUSH
47459: LD_VAR 0 7
47463: PUSH
47464: LD_INT 1
47466: ARRAY
47467: PUSH
47468: LD_INT 2
47470: ARRAY
47471: PPUSH
47472: CALL_OW 116
47476: GO 47767
// if path > tag then
47478: LD_VAR 0 2
47482: PUSH
47483: LD_VAR 0 9
47487: GREATER
47488: IFFALSE 47696
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
47490: LD_ADDR_VAR 0 6
47494: PUSH
47495: LD_VAR 0 5
47499: PPUSH
47500: LD_INT 91
47502: PUSH
47503: LD_VAR 0 4
47507: PUSH
47508: LD_INT 12
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: PPUSH
47516: CALL_OW 72
47520: ST_TO_ADDR
// if nearEnemy then
47521: LD_VAR 0 6
47525: IFFALSE 47594
// begin if GetWeapon ( i ) = ru_time_lapser then
47527: LD_VAR 0 4
47531: PPUSH
47532: CALL_OW 264
47536: PUSH
47537: LD_INT 49
47539: EQUAL
47540: IFFALSE 47568
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
47542: LD_VAR 0 4
47546: PPUSH
47547: LD_VAR 0 6
47551: PPUSH
47552: LD_VAR 0 4
47556: PPUSH
47557: CALL_OW 74
47561: PPUSH
47562: CALL_OW 112
47566: GO 47592
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
47568: LD_VAR 0 4
47572: PPUSH
47573: LD_VAR 0 6
47577: PPUSH
47578: LD_VAR 0 4
47582: PPUSH
47583: CALL_OW 74
47587: PPUSH
47588: CALL_OW 115
// end else
47592: GO 47694
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
47594: LD_VAR 0 4
47598: PPUSH
47599: LD_VAR 0 2
47603: PUSH
47604: LD_VAR 0 9
47608: ARRAY
47609: PUSH
47610: LD_INT 1
47612: ARRAY
47613: PPUSH
47614: LD_VAR 0 2
47618: PUSH
47619: LD_VAR 0 9
47623: ARRAY
47624: PUSH
47625: LD_INT 2
47627: ARRAY
47628: PPUSH
47629: CALL_OW 297
47633: PUSH
47634: LD_INT 6
47636: GREATER
47637: IFFALSE 47680
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
47639: LD_VAR 0 4
47643: PPUSH
47644: LD_VAR 0 2
47648: PUSH
47649: LD_VAR 0 9
47653: ARRAY
47654: PUSH
47655: LD_INT 1
47657: ARRAY
47658: PPUSH
47659: LD_VAR 0 2
47663: PUSH
47664: LD_VAR 0 9
47668: ARRAY
47669: PUSH
47670: LD_INT 2
47672: ARRAY
47673: PPUSH
47674: CALL_OW 114
47678: GO 47694
// SetTag ( i , tag ) ;
47680: LD_VAR 0 4
47684: PPUSH
47685: LD_VAR 0 9
47689: PPUSH
47690: CALL_OW 109
// end else
47694: GO 47767
// if enemy then
47696: LD_VAR 0 5
47700: IFFALSE 47767
// begin if GetWeapon ( i ) = ru_time_lapser then
47702: LD_VAR 0 4
47706: PPUSH
47707: CALL_OW 264
47711: PUSH
47712: LD_INT 49
47714: EQUAL
47715: IFFALSE 47743
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
47717: LD_VAR 0 4
47721: PPUSH
47722: LD_VAR 0 5
47726: PPUSH
47727: LD_VAR 0 4
47731: PPUSH
47732: CALL_OW 74
47736: PPUSH
47737: CALL_OW 112
47741: GO 47767
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
47743: LD_VAR 0 4
47747: PPUSH
47748: LD_VAR 0 5
47752: PPUSH
47753: LD_VAR 0 4
47757: PPUSH
47758: CALL_OW 74
47762: PPUSH
47763: CALL_OW 115
// end ; end ;
47767: GO 47362
47769: POP
47770: POP
// end ;
47771: LD_VAR 0 3
47775: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
47776: LD_INT 0
47778: PPUSH
47779: PPUSH
47780: PPUSH
// if not unit or IsInUnit ( unit ) then
47781: LD_VAR 0 1
47785: NOT
47786: PUSH
47787: LD_VAR 0 1
47791: PPUSH
47792: CALL_OW 310
47796: OR
47797: IFFALSE 47801
// exit ;
47799: GO 47892
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
47801: LD_ADDR_VAR 0 4
47805: PUSH
47806: LD_VAR 0 1
47810: PPUSH
47811: CALL_OW 250
47815: PPUSH
47816: LD_VAR 0 2
47820: PPUSH
47821: LD_INT 1
47823: PPUSH
47824: CALL_OW 272
47828: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
47829: LD_ADDR_VAR 0 5
47833: PUSH
47834: LD_VAR 0 1
47838: PPUSH
47839: CALL_OW 251
47843: PPUSH
47844: LD_VAR 0 2
47848: PPUSH
47849: LD_INT 1
47851: PPUSH
47852: CALL_OW 273
47856: ST_TO_ADDR
// if ValidHex ( x , y ) then
47857: LD_VAR 0 4
47861: PPUSH
47862: LD_VAR 0 5
47866: PPUSH
47867: CALL_OW 488
47871: IFFALSE 47892
// ComTurnXY ( unit , x , y ) ;
47873: LD_VAR 0 1
47877: PPUSH
47878: LD_VAR 0 4
47882: PPUSH
47883: LD_VAR 0 5
47887: PPUSH
47888: CALL_OW 118
// end ;
47892: LD_VAR 0 3
47896: RET
// export function SeeUnits ( side , units ) ; var i ; begin
47897: LD_INT 0
47899: PPUSH
47900: PPUSH
// result := false ;
47901: LD_ADDR_VAR 0 3
47905: PUSH
47906: LD_INT 0
47908: ST_TO_ADDR
// if not units then
47909: LD_VAR 0 2
47913: NOT
47914: IFFALSE 47918
// exit ;
47916: GO 47963
// for i in units do
47918: LD_ADDR_VAR 0 4
47922: PUSH
47923: LD_VAR 0 2
47927: PUSH
47928: FOR_IN
47929: IFFALSE 47961
// if See ( side , i ) then
47931: LD_VAR 0 1
47935: PPUSH
47936: LD_VAR 0 4
47940: PPUSH
47941: CALL_OW 292
47945: IFFALSE 47959
// begin result := true ;
47947: LD_ADDR_VAR 0 3
47951: PUSH
47952: LD_INT 1
47954: ST_TO_ADDR
// exit ;
47955: POP
47956: POP
47957: GO 47963
// end ;
47959: GO 47928
47961: POP
47962: POP
// end ;
47963: LD_VAR 0 3
47967: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47968: LD_INT 0
47970: PPUSH
47971: PPUSH
47972: PPUSH
47973: PPUSH
// if not unit or not points then
47974: LD_VAR 0 1
47978: NOT
47979: PUSH
47980: LD_VAR 0 2
47984: NOT
47985: OR
47986: IFFALSE 47990
// exit ;
47988: GO 48080
// dist := 99999 ;
47990: LD_ADDR_VAR 0 5
47994: PUSH
47995: LD_INT 99999
47997: ST_TO_ADDR
// for i in points do
47998: LD_ADDR_VAR 0 4
48002: PUSH
48003: LD_VAR 0 2
48007: PUSH
48008: FOR_IN
48009: IFFALSE 48078
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48011: LD_ADDR_VAR 0 6
48015: PUSH
48016: LD_VAR 0 1
48020: PPUSH
48021: LD_VAR 0 4
48025: PUSH
48026: LD_INT 1
48028: ARRAY
48029: PPUSH
48030: LD_VAR 0 4
48034: PUSH
48035: LD_INT 2
48037: ARRAY
48038: PPUSH
48039: CALL_OW 297
48043: ST_TO_ADDR
// if tmpDist < dist then
48044: LD_VAR 0 6
48048: PUSH
48049: LD_VAR 0 5
48053: LESS
48054: IFFALSE 48076
// begin result := i ;
48056: LD_ADDR_VAR 0 3
48060: PUSH
48061: LD_VAR 0 4
48065: ST_TO_ADDR
// dist := tmpDist ;
48066: LD_ADDR_VAR 0 5
48070: PUSH
48071: LD_VAR 0 6
48075: ST_TO_ADDR
// end ; end ;
48076: GO 48008
48078: POP
48079: POP
// end ;
48080: LD_VAR 0 3
48084: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
48085: LD_INT 0
48087: PPUSH
// uc_side := side ;
48088: LD_ADDR_OWVAR 20
48092: PUSH
48093: LD_VAR 0 1
48097: ST_TO_ADDR
// uc_nation := 3 ;
48098: LD_ADDR_OWVAR 21
48102: PUSH
48103: LD_INT 3
48105: ST_TO_ADDR
// vc_chassis := 25 ;
48106: LD_ADDR_OWVAR 37
48110: PUSH
48111: LD_INT 25
48113: ST_TO_ADDR
// vc_engine := engine_siberite ;
48114: LD_ADDR_OWVAR 39
48118: PUSH
48119: LD_INT 3
48121: ST_TO_ADDR
// vc_control := control_computer ;
48122: LD_ADDR_OWVAR 38
48126: PUSH
48127: LD_INT 3
48129: ST_TO_ADDR
// vc_weapon := 59 ;
48130: LD_ADDR_OWVAR 40
48134: PUSH
48135: LD_INT 59
48137: ST_TO_ADDR
// result := CreateVehicle ;
48138: LD_ADDR_VAR 0 5
48142: PUSH
48143: CALL_OW 45
48147: ST_TO_ADDR
// SetDir ( result , d ) ;
48148: LD_VAR 0 5
48152: PPUSH
48153: LD_VAR 0 4
48157: PPUSH
48158: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
48162: LD_VAR 0 5
48166: PPUSH
48167: LD_VAR 0 2
48171: PPUSH
48172: LD_VAR 0 3
48176: PPUSH
48177: LD_INT 0
48179: PPUSH
48180: CALL_OW 48
// end ;
48184: LD_VAR 0 5
48188: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
48189: LD_INT 0
48191: PPUSH
48192: PPUSH
48193: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
48194: LD_ADDR_VAR 0 2
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
48217: LD_VAR 0 1
48221: NOT
48222: PUSH
48223: LD_VAR 0 1
48227: PPUSH
48228: CALL_OW 264
48232: PUSH
48233: LD_INT 12
48235: PUSH
48236: LD_INT 51
48238: PUSH
48239: LD_INT 32
48241: PUSH
48242: LD_EXP 40
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: IN
48253: NOT
48254: OR
48255: IFFALSE 48259
// exit ;
48257: GO 48357
// for i := 1 to 3 do
48259: LD_ADDR_VAR 0 3
48263: PUSH
48264: DOUBLE
48265: LD_INT 1
48267: DEC
48268: ST_TO_ADDR
48269: LD_INT 3
48271: PUSH
48272: FOR_TO
48273: IFFALSE 48355
// begin tmp := GetCargo ( cargo , i ) ;
48275: LD_ADDR_VAR 0 4
48279: PUSH
48280: LD_VAR 0 1
48284: PPUSH
48285: LD_VAR 0 3
48289: PPUSH
48290: CALL_OW 289
48294: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
48295: LD_ADDR_VAR 0 2
48299: PUSH
48300: LD_VAR 0 2
48304: PPUSH
48305: LD_VAR 0 3
48309: PPUSH
48310: LD_VAR 0 4
48314: PPUSH
48315: CALL_OW 1
48319: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
48320: LD_ADDR_VAR 0 2
48324: PUSH
48325: LD_VAR 0 2
48329: PPUSH
48330: LD_INT 4
48332: PPUSH
48333: LD_VAR 0 2
48337: PUSH
48338: LD_INT 4
48340: ARRAY
48341: PUSH
48342: LD_VAR 0 4
48346: PLUS
48347: PPUSH
48348: CALL_OW 1
48352: ST_TO_ADDR
// end ;
48353: GO 48272
48355: POP
48356: POP
// end ; end_of_file
48357: LD_VAR 0 2
48361: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
48362: LD_INT 0
48364: PPUSH
// ar_miner := 81 ;
48365: LD_ADDR_EXP 46
48369: PUSH
48370: LD_INT 81
48372: ST_TO_ADDR
// ar_crane := 88 ;
48373: LD_ADDR_EXP 45
48377: PUSH
48378: LD_INT 88
48380: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
48381: LD_ADDR_EXP 40
48385: PUSH
48386: LD_INT 89
48388: ST_TO_ADDR
// us_hack := 99 ;
48389: LD_ADDR_EXP 41
48393: PUSH
48394: LD_INT 99
48396: ST_TO_ADDR
// us_artillery := 97 ;
48397: LD_ADDR_EXP 42
48401: PUSH
48402: LD_INT 97
48404: ST_TO_ADDR
// ar_bio_bomb := 91 ;
48405: LD_ADDR_EXP 43
48409: PUSH
48410: LD_INT 91
48412: ST_TO_ADDR
// ar_mortar := 92 ;
48413: LD_ADDR_EXP 44
48417: PUSH
48418: LD_INT 92
48420: ST_TO_ADDR
// ru_flamethrower := 93 ;
48421: LD_ADDR_EXP 47
48425: PUSH
48426: LD_INT 93
48428: ST_TO_ADDR
// ru_radar := 98 ;
48429: LD_ADDR_EXP 39
48433: PUSH
48434: LD_INT 98
48436: ST_TO_ADDR
// tech_Artillery := 80 ;
48437: LD_ADDR_EXP 48
48441: PUSH
48442: LD_INT 80
48444: ST_TO_ADDR
// tech_RadMat := 81 ;
48445: LD_ADDR_EXP 49
48449: PUSH
48450: LD_INT 81
48452: ST_TO_ADDR
// tech_BasicTools := 82 ;
48453: LD_ADDR_EXP 50
48457: PUSH
48458: LD_INT 82
48460: ST_TO_ADDR
// tech_Cargo := 83 ;
48461: LD_ADDR_EXP 51
48465: PUSH
48466: LD_INT 83
48468: ST_TO_ADDR
// tech_Track := 84 ;
48469: LD_ADDR_EXP 52
48473: PUSH
48474: LD_INT 84
48476: ST_TO_ADDR
// tech_Crane := 85 ;
48477: LD_ADDR_EXP 53
48481: PUSH
48482: LD_INT 85
48484: ST_TO_ADDR
// tech_Bulldozer := 86 ;
48485: LD_ADDR_EXP 54
48489: PUSH
48490: LD_INT 86
48492: ST_TO_ADDR
// tech_Hovercraft := 87 ;
48493: LD_ADDR_EXP 55
48497: PUSH
48498: LD_INT 87
48500: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
48501: LD_ADDR_EXP 56
48505: PUSH
48506: LD_INT 88
48508: ST_TO_ADDR
// class_mastodont := 31 ;
48509: LD_ADDR_EXP 57
48513: PUSH
48514: LD_INT 31
48516: ST_TO_ADDR
// class_horse := 21 ;
48517: LD_ADDR_EXP 58
48521: PUSH
48522: LD_INT 21
48524: ST_TO_ADDR
// end ;
48525: LD_VAR 0 1
48529: RET
// every 1 do
48530: GO 48532
48532: DISABLE
// InitGlobalVariables ;
48533: CALL 48362 0 0
48537: END
