// starting begin ResetFog ;
   0: CALL_OW 335
// MC_Init ( ) ;
   4: CALL 542 0 0
// PrepareTestBase ;
   8: CALL 123 0 0
// PlaceDepositsArea ( mat_oil , Area03 ) ;
  12: LD_INT 2
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: CALL 268 0 2
// mc_debug := true ;
  22: LD_ADDR_EXP 5
  26: PUSH
  27: LD_INT 1
  29: ST_TO_ADDR
// MC_Start ( ) ;
  30: CALL 566 0 0
// end ;
  34: END
// export function MC_CustomMacro ( ) ; begin
  35: LD_INT 0
  37: PPUSH
// MC_Add ( 1 , FilterAllUnits ( [ f_side , 1 ] ) ) ;
  38: LD_INT 1
  40: PPUSH
  41: LD_INT 22
  43: PUSH
  44: LD_INT 1
  46: PUSH
  47: EMPTY
  48: LIST
  49: LIST
  50: PPUSH
  51: CALL_OW 69
  55: PPUSH
  56: CALL 621 0 2
// MC_SetParkingArea ( 1 , parkingArea1 ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 4
  65: PPUSH
  66: CALL 2441 0 2
// MC_SetCratesArea ( 1 , cratesArea1 ) ;
  70: LD_INT 1
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: CALL 2018 0 2
// MC_SetScanArea ( 1 , baseArea1 ) ;
  80: LD_INT 1
  82: PPUSH
  83: LD_INT 1
  85: PPUSH
  86: CALL 2490 0 2
// MC_SetBuildingList ( 1 , [ [ b_barracks , 37 , 33 , 5 ] ] ) ;
  90: LD_INT 1
  92: PPUSH
  93: LD_INT 5
  95: PUSH
  96: LD_INT 37
  98: PUSH
  99: LD_INT 33
 101: PUSH
 102: LD_INT 5
 104: PUSH
 105: EMPTY
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: PUSH
 111: EMPTY
 112: LIST
 113: PPUSH
 114: CALL 1118 0 2
// end ;
 118: LD_VAR 0 1
 122: RET
// export function PrepareTestBase ; var i , un ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
// InitHc_All ;
 128: CALL_OW 584
// uc_side := 1 ;
 132: LD_ADDR_OWVAR 20
 136: PUSH
 137: LD_INT 1
 139: ST_TO_ADDR
// uc_nation := 1 ;
 140: LD_ADDR_OWVAR 21
 144: PUSH
 145: LD_INT 1
 147: ST_TO_ADDR
// for i := 1 to 12 do
 148: LD_ADDR_VAR 0 2
 152: PUSH
 153: DOUBLE
 154: LD_INT 1
 156: DEC
 157: ST_TO_ADDR
 158: LD_INT 12
 160: PUSH
 161: FOR_TO
 162: IFFALSE 229
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
 164: LD_INT 0
 166: PPUSH
 167: LD_VAR 0 2
 171: PUSH
 172: LD_INT 4
 174: MOD
 175: PUSH
 176: LD_INT 1
 178: PLUS
 179: PPUSH
 180: LD_INT 3
 182: PPUSH
 183: CALL_OW 380
// un := CreateHuman ;
 187: LD_ADDR_VAR 0 3
 191: PUSH
 192: CALL_OW 44
 196: ST_TO_ADDR
// PlaceUnitXYR ( un , 21 , 16 , 8 , false ) ;
 197: LD_VAR 0 3
 201: PPUSH
 202: LD_INT 21
 204: PPUSH
 205: LD_INT 16
 207: PPUSH
 208: LD_INT 8
 210: PPUSH
 211: LD_INT 0
 213: PPUSH
 214: CALL_OW 50
// ComHold ( un ) ;
 218: LD_VAR 0 3
 222: PPUSH
 223: CALL_OW 140
// end ;
 227: GO 161
 229: POP
 230: POP
// end ;
 231: LD_VAR 0 1
 235: RET
// every 0 0$50 trigger mc_debug do
 236: LD_EXP 5
 240: IFFALSE 267
 242: GO 244
 244: DISABLE
// begin enable ;
 245: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea1 , true ) ;
 246: LD_INT 1
 248: PPUSH
 249: LD_INT 5
 251: PPUSH
 252: CALL_OW 12
 256: PPUSH
 257: LD_INT 2
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: CALL_OW 55
// end ;
 267: END
// export function PlaceDepositsArea ( type , area ) ; var xy , i ; begin
 268: LD_INT 0
 270: PPUSH
 271: PPUSH
 272: PPUSH
// if not type in [ mat_oil , mat_siberit ] then
 273: LD_VAR 0 1
 277: PUSH
 278: LD_INT 2
 280: PUSH
 281: LD_INT 3
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: IN
 288: NOT
 289: IFFALSE 293
// exit ;
 291: GO 407
// xy := AreaToList ( area , 0 ) ;
 293: LD_ADDR_VAR 0 4
 297: PUSH
 298: LD_VAR 0 2
 302: PPUSH
 303: LD_INT 0
 305: PPUSH
 306: CALL_OW 517
 310: ST_TO_ADDR
// if not xy then
 311: LD_VAR 0 4
 315: NOT
 316: IFFALSE 320
// exit ;
 318: GO 407
// result := 0 ;
 320: LD_ADDR_VAR 0 3
 324: PUSH
 325: LD_INT 0
 327: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
 328: LD_ADDR_VAR 0 5
 332: PUSH
 333: DOUBLE
 334: LD_INT 1
 336: DEC
 337: ST_TO_ADDR
 338: LD_VAR 0 4
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: FOR_TO
 348: IFFALSE 405
// begin result := result + 1 ;
 350: LD_ADDR_VAR 0 3
 354: PUSH
 355: LD_VAR 0 3
 359: PUSH
 360: LD_INT 1
 362: PLUS
 363: ST_TO_ADDR
// CreateDepositXY ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , type ) ;
 364: LD_VAR 0 4
 368: PUSH
 369: LD_INT 1
 371: ARRAY
 372: PUSH
 373: LD_VAR 0 5
 377: ARRAY
 378: PPUSH
 379: LD_VAR 0 4
 383: PUSH
 384: LD_INT 2
 386: ARRAY
 387: PUSH
 388: LD_VAR 0 5
 392: ARRAY
 393: PPUSH
 394: LD_VAR 0 1
 398: PPUSH
 399: CALL_OW 62
// end ;
 403: GO 347
 405: POP
 406: POP
// end ; end_of_file
 407: LD_VAR 0 3
 411: RET
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ;
 412: LD_VAR 0 1
 416: PPUSH
 417: LD_VAR 0 2
 421: PPUSH
 422: LD_VAR 0 3
 426: PPUSH
 427: LD_VAR 0 4
 431: PPUSH
 432: LD_VAR 0 5
 436: PPUSH
 437: LD_VAR 0 6
 441: PPUSH
 442: LD_VAR 0 7
 446: PPUSH
 447: CALL 4869 0 7
// end ;
 451: PPOPN 7
 453: END
// on ClassChanged ( unit , old_class , new_class ) do begin MCE_ClassChanged ( unit , old_class , new_class ) ;
 454: LD_VAR 0 1
 458: PPUSH
 459: LD_VAR 0 2
 463: PPUSH
 464: LD_VAR 0 3
 468: PPUSH
 469: CALL 4922 0 3
// end ;
 473: PPOPN 3
 475: END
// on UnitDestroyed ( unit ) do begin MCE_UnitDestroyed ( unit ) ;
 476: LD_VAR 0 1
 480: PPUSH
 481: CALL 4944 0 1
// end ;
 485: PPOPN 1
 487: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ;
 488: LD_VAR 0 1
 492: PPUSH
 493: LD_VAR 0 2
 497: PPUSH
 498: LD_VAR 0 3
 502: PPUSH
 503: LD_VAR 0 4
 507: PPUSH
 508: CALL 5089 0 4
// end ;
 512: PPOPN 4
 514: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 515: LD_VAR 0 1
 519: PPUSH
 520: CALL 5162 0 1
// end ;
 524: PPOPN 1
 526: END
// on UpgradeComplete ( building ) do begin MCE_BuildingUpgradeComplete ( building ) ;
 527: LD_VAR 0 1
 531: PPUSH
 532: CALL 5881 0 1
// end ;
 536: PPOPN 1
 538: END
// on CommandUnitXY ( comand , unit , x , y , z ) do begin end ; end_of_file
 539: PPOPN 5
 541: END
// export function MC_Init ( ) ; begin
 542: LD_INT 0
 544: PPUSH
// MC_InitVariables ( ) ;
 545: CALL 6142 0 0
// MCE_InitEvents ( ) ;
 549: CALL 4845 0 0
// MCT_InitTags ( ) ;
 553: CALL 6318 0 0
// MCTM_InitTaskManager ( ) end ;
 557: CALL 7905 0 0
 561: LD_VAR 0 1
 565: RET
// export function MC_Start ( ) ; begin
 566: LD_INT 0
 568: PPUSH
// mc_active := true ;
 569: LD_ADDR_EXP 4
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// MC_CustomMacro ( ) ;
 577: CALL 35 0 0
// MCE_SailEventCustom ( mce_start , 0 , 0 , 0 , 0 , 0 , 0 ) ;
 581: LD_EXP 1
 585: PPUSH
 586: LD_INT 0
 588: PPUSH
 589: LD_INT 0
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_INT 0
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL 4869 0 7
// end ;
 608: LD_VAR 0 1
 612: RET
// export function MC_Kill ( base ) ; begin
 613: LD_INT 0
 615: PPUSH
// end ;
 616: LD_VAR 0 2
 620: RET
// export function MC_Add ( side , units ) ; begin
 621: LD_INT 0
 623: PPUSH
// mc_bases := Replace ( mc_bases , mc_bases + 1 , side ) ;
 624: LD_ADDR_EXP 6
 628: PUSH
 629: LD_EXP 6
 633: PPUSH
 634: LD_EXP 6
 638: PUSH
 639: LD_INT 1
 641: PLUS
 642: PPUSH
 643: LD_VAR 0 1
 647: PPUSH
 648: CALL_OW 1
 652: ST_TO_ADDR
// mc_task := Replace ( mc_task , mc_task + 1 , [ ] ) ;
 653: LD_ADDR_EXP 8
 657: PUSH
 658: LD_EXP 8
 662: PPUSH
 663: LD_EXP 8
 667: PUSH
 668: LD_INT 1
 670: PLUS
 671: PPUSH
 672: EMPTY
 673: PPUSH
 674: CALL_OW 1
 678: ST_TO_ADDR
// mc_people := Replace ( mc_people , mc_people + 1 , UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
 679: LD_ADDR_EXP 9
 683: PUSH
 684: LD_EXP 9
 688: PPUSH
 689: LD_EXP 9
 693: PUSH
 694: LD_INT 1
 696: PLUS
 697: PPUSH
 698: LD_VAR 0 2
 702: PPUSH
 703: LD_INT 21
 705: PUSH
 706: LD_INT 1
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 23
 718: PUSH
 719: LD_INT 0
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PPUSH
 734: CALL_OW 72
 738: PPUSH
 739: CALL_OW 1
 743: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , mc_ape + 1 , UnitFilter ( units , [ f_nation , 0 ] ) ) ;
 744: LD_ADDR_EXP 19
 748: PUSH
 749: LD_EXP 19
 753: PPUSH
 754: LD_EXP 19
 758: PUSH
 759: LD_INT 1
 761: PLUS
 762: PPUSH
 763: LD_VAR 0 2
 767: PPUSH
 768: LD_INT 23
 770: PUSH
 771: LD_INT 0
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PPUSH
 778: CALL_OW 72
 782: PPUSH
 783: CALL_OW 1
 787: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , mc_vehicles + 1 , UnitFilter ( units , [ f_type , unit_vehicle ] ) ) ;
 788: LD_ADDR_EXP 11
 792: PUSH
 793: LD_EXP 11
 797: PPUSH
 798: LD_EXP 11
 802: PUSH
 803: LD_INT 1
 805: PLUS
 806: PPUSH
 807: LD_VAR 0 2
 811: PPUSH
 812: LD_INT 21
 814: PUSH
 815: LD_INT 2
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PPUSH
 822: CALL_OW 72
 826: PPUSH
 827: CALL_OW 1
 831: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , mc_buildings + 1 , UnitFilter ( units , [ f_type , unit_building ] ) ) ;
 832: LD_ADDR_EXP 10
 836: PUSH
 837: LD_EXP 10
 841: PPUSH
 842: LD_EXP 10
 846: PUSH
 847: LD_INT 1
 849: PLUS
 850: PPUSH
 851: LD_VAR 0 2
 855: PPUSH
 856: LD_INT 21
 858: PUSH
 859: LD_INT 3
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PPUSH
 866: CALL_OW 72
 870: PPUSH
 871: CALL_OW 1
 875: ST_TO_ADDR
// mc_defense_status := Replace ( mc_defense_status , mc_defense_status + 1 , false ) ;
 876: LD_ADDR_EXP 16
 880: PUSH
 881: LD_EXP 16
 885: PPUSH
 886: LD_EXP 16
 890: PUSH
 891: LD_INT 1
 893: PLUS
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 1
 902: ST_TO_ADDR
// end ;
 903: LD_VAR 0 3
 907: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
 908: LD_INT 0
 910: PPUSH
 911: PPUSH
 912: PPUSH
 913: PPUSH
 914: PPUSH
 915: PPUSH
// if not mc_bases [ base ] then
 916: LD_EXP 6
 920: PUSH
 921: LD_VAR 0 1
 925: ARRAY
 926: NOT
 927: IFFALSE 931
// exit ;
 929: GO 1113
// tmp := [ ] ;
 931: LD_ADDR_VAR 0 6
 935: PUSH
 936: EMPTY
 937: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
 938: LD_ADDR_VAR 0 7
 942: PUSH
 943: LD_VAR 0 3
 947: PPUSH
 948: LD_INT 0
 950: PPUSH
 951: CALL_OW 517
 955: ST_TO_ADDR
// if not list then
 956: LD_VAR 0 7
 960: NOT
 961: IFFALSE 965
// exit ;
 963: GO 1113
// for i = 1 to amount do
 965: LD_ADDR_VAR 0 5
 969: PUSH
 970: DOUBLE
 971: LD_INT 1
 973: DEC
 974: ST_TO_ADDR
 975: LD_VAR 0 2
 979: PUSH
 980: FOR_TO
 981: IFFALSE 1061
// begin x := rand ( 1 , list [ 1 ] ) ;
 983: LD_ADDR_VAR 0 8
 987: PUSH
 988: LD_INT 1
 990: PPUSH
 991: LD_VAR 0 7
 995: PUSH
 996: LD_INT 1
 998: ARRAY
 999: PPUSH
1000: CALL_OW 12
1004: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
1005: LD_ADDR_VAR 0 6
1009: PUSH
1010: LD_VAR 0 6
1014: PPUSH
1015: LD_VAR 0 5
1019: PPUSH
1020: LD_VAR 0 7
1024: PUSH
1025: LD_INT 1
1027: ARRAY
1028: PUSH
1029: LD_VAR 0 8
1033: ARRAY
1034: PUSH
1035: LD_VAR 0 7
1039: PUSH
1040: LD_INT 2
1042: ARRAY
1043: PUSH
1044: LD_VAR 0 8
1048: ARRAY
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: PPUSH
1054: CALL_OW 1
1058: ST_TO_ADDR
// end ;
1059: GO 980
1061: POP
1062: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
1063: LD_ADDR_EXP 12
1067: PUSH
1068: LD_EXP 12
1072: PPUSH
1073: LD_VAR 0 1
1077: PPUSH
1078: LD_VAR 0 6
1082: PPUSH
1083: CALL_OW 1
1087: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
1088: LD_ADDR_EXP 13
1092: PUSH
1093: LD_EXP 13
1097: PPUSH
1098: LD_VAR 0 1
1102: PPUSH
1103: LD_VAR 0 3
1107: PPUSH
1108: CALL_OW 1
1112: ST_TO_ADDR
// end ;
1113: LD_VAR 0 4
1117: RET
// export function MC_SetBuildingList ( base , construct_list ) ; var i , btype ; begin
1118: LD_INT 0
1120: PPUSH
1121: PPUSH
1122: PPUSH
// if not construct_list then
1123: LD_VAR 0 2
1127: NOT
1128: IFFALSE 1132
// exit ;
1130: GO 1358
// for i := 1 to construct_list do
1132: LD_ADDR_VAR 0 4
1136: PUSH
1137: DOUBLE
1138: LD_INT 1
1140: DEC
1141: ST_TO_ADDR
1142: LD_VAR 0 2
1146: PUSH
1147: FOR_TO
1148: IFFALSE 1331
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1150: LD_VAR 0 2
1154: PUSH
1155: LD_VAR 0 4
1159: ARRAY
1160: PUSH
1161: LD_INT 1
1163: ARRAY
1164: PUSH
1165: LD_INT 3
1167: PUSH
1168: LD_INT 5
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: IN
1175: IFFALSE 1329
// begin case construct_list [ i ] [ 1 ] of b_factory :
1177: LD_VAR 0 2
1181: PUSH
1182: LD_VAR 0 4
1186: ARRAY
1187: PUSH
1188: LD_INT 1
1190: ARRAY
1191: PUSH
1192: LD_INT 3
1194: DOUBLE
1195: EQUAL
1196: IFTRUE 1200
1198: GO 1211
1200: POP
// btype := b_workshop ; b_barracks :
1201: LD_ADDR_VAR 0 5
1205: PUSH
1206: LD_INT 2
1208: ST_TO_ADDR
1209: GO 1231
1211: LD_INT 5
1213: DOUBLE
1214: EQUAL
1215: IFTRUE 1219
1217: GO 1230
1219: POP
// btype := b_armoury ; end ;
1220: LD_ADDR_VAR 0 5
1224: PUSH
1225: LD_INT 4
1227: ST_TO_ADDR
1228: GO 1231
1230: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: LD_VAR 0 2
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: LD_VAR 0 2
1250: PUSH
1251: LD_VAR 0 4
1255: ARRAY
1256: PPUSH
1257: LD_INT 5
1259: PPUSH
1260: LD_VAR 0 2
1264: PUSH
1265: LD_VAR 0 4
1269: ARRAY
1270: PUSH
1271: LD_INT 1
1273: ARRAY
1274: PPUSH
1275: CALL_OW 1
1279: PPUSH
1280: CALL_OW 1
1284: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1285: LD_ADDR_VAR 0 2
1289: PUSH
1290: LD_VAR 0 2
1294: PPUSH
1295: LD_VAR 0 4
1299: PPUSH
1300: LD_VAR 0 2
1304: PUSH
1305: LD_VAR 0 4
1309: ARRAY
1310: PPUSH
1311: LD_INT 1
1313: PPUSH
1314: LD_VAR 0 5
1318: PPUSH
1319: CALL_OW 1
1323: PPUSH
1324: CALL_OW 1
1328: ST_TO_ADDR
// end ;
1329: GO 1147
1331: POP
1332: POP
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
1333: LD_ADDR_EXP 14
1337: PUSH
1338: LD_EXP 14
1342: PPUSH
1343: LD_VAR 0 1
1347: PPUSH
1348: LD_VAR 0 2
1352: PPUSH
1353: CALL_OW 1
1357: ST_TO_ADDR
// end ;
1358: LD_VAR 0 3
1362: RET
// export function MC_InsertBuildingList ( base , construct_list ) ; var i , btype ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
// if not construct_list then
1368: LD_VAR 0 2
1372: NOT
1373: IFFALSE 1377
// exit ;
1375: GO 1615
// for i := 1 to construct_list do
1377: LD_ADDR_VAR 0 4
1381: PUSH
1382: DOUBLE
1383: LD_INT 1
1385: DEC
1386: ST_TO_ADDR
1387: LD_VAR 0 2
1391: PUSH
1392: FOR_TO
1393: IFFALSE 1576
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1395: LD_VAR 0 2
1399: PUSH
1400: LD_VAR 0 4
1404: ARRAY
1405: PUSH
1406: LD_INT 1
1408: ARRAY
1409: PUSH
1410: LD_INT 3
1412: PUSH
1413: LD_INT 5
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: IN
1420: IFFALSE 1574
// begin case construct_list [ i ] [ 1 ] of b_factory :
1422: LD_VAR 0 2
1426: PUSH
1427: LD_VAR 0 4
1431: ARRAY
1432: PUSH
1433: LD_INT 1
1435: ARRAY
1436: PUSH
1437: LD_INT 3
1439: DOUBLE
1440: EQUAL
1441: IFTRUE 1445
1443: GO 1456
1445: POP
// btype := b_workshop ; b_barracks :
1446: LD_ADDR_VAR 0 5
1450: PUSH
1451: LD_INT 2
1453: ST_TO_ADDR
1454: GO 1476
1456: LD_INT 5
1458: DOUBLE
1459: EQUAL
1460: IFTRUE 1464
1462: GO 1475
1464: POP
// btype := b_armoury ; end ;
1465: LD_ADDR_VAR 0 5
1469: PUSH
1470: LD_INT 4
1472: ST_TO_ADDR
1473: GO 1476
1475: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1476: LD_ADDR_VAR 0 2
1480: PUSH
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_VAR 0 4
1490: PPUSH
1491: LD_VAR 0 2
1495: PUSH
1496: LD_VAR 0 4
1500: ARRAY
1501: PPUSH
1502: LD_INT 5
1504: PPUSH
1505: LD_VAR 0 2
1509: PUSH
1510: LD_VAR 0 4
1514: ARRAY
1515: PUSH
1516: LD_INT 1
1518: ARRAY
1519: PPUSH
1520: CALL_OW 1
1524: PPUSH
1525: CALL_OW 1
1529: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1530: LD_ADDR_VAR 0 2
1534: PUSH
1535: LD_VAR 0 2
1539: PPUSH
1540: LD_VAR 0 4
1544: PPUSH
1545: LD_VAR 0 2
1549: PUSH
1550: LD_VAR 0 4
1554: ARRAY
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_VAR 0 5
1563: PPUSH
1564: CALL_OW 1
1568: PPUSH
1569: CALL_OW 1
1573: ST_TO_ADDR
// end ;
1574: GO 1392
1576: POP
1577: POP
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union construct_list ) ;
1578: LD_ADDR_EXP 14
1582: PUSH
1583: LD_EXP 14
1587: PPUSH
1588: LD_VAR 0 1
1592: PPUSH
1593: LD_EXP 14
1597: PUSH
1598: LD_VAR 0 1
1602: ARRAY
1603: PUSH
1604: LD_VAR 0 2
1608: UNION
1609: PPUSH
1610: CALL_OW 1
1614: ST_TO_ADDR
// end ;
1615: LD_VAR 0 3
1619: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
1620: LD_INT 0
1622: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , produce_list ) ;
1623: LD_ADDR_EXP 15
1627: PUSH
1628: LD_EXP 15
1632: PPUSH
1633: LD_VAR 0 1
1637: PPUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 1
1647: ST_TO_ADDR
// end ;
1648: LD_VAR 0 3
1652: RET
// export function MC_InsertProduceList ( base , components ) ; begin
1653: LD_INT 0
1655: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , mc_produce_list [ base ] ^ components ) ;
1656: LD_ADDR_EXP 15
1660: PUSH
1661: LD_EXP 15
1665: PPUSH
1666: LD_VAR 0 1
1670: PPUSH
1671: LD_EXP 15
1675: PUSH
1676: LD_VAR 0 1
1680: ARRAY
1681: PUSH
1682: LD_VAR 0 2
1686: ADD
1687: PPUSH
1688: CALL_OW 1
1692: ST_TO_ADDR
// end ;
1693: LD_VAR 0 3
1697: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
1698: LD_INT 0
1700: PPUSH
// mc_defender := Replace ( mc_defender , base , deflist ) ;
1701: LD_ADDR_EXP 17
1705: PUSH
1706: LD_EXP 17
1710: PPUSH
1711: LD_VAR 0 1
1715: PPUSH
1716: LD_VAR 0 2
1720: PPUSH
1721: CALL_OW 1
1725: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
1726: LD_ADDR_EXP 18
1730: PUSH
1731: LD_EXP 18
1735: PPUSH
1736: LD_VAR 0 1
1740: PPUSH
1741: LD_VAR 0 2
1745: PUSH
1746: LD_INT 0
1748: PLUS
1749: PPUSH
1750: CALL_OW 1
1754: ST_TO_ADDR
// end ;
1755: LD_VAR 0 3
1759: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
1760: LD_INT 0
1762: PPUSH
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
1763: LD_ADDR_EXP 18
1767: PUSH
1768: LD_EXP 18
1772: PPUSH
1773: LD_VAR 0 1
1777: PPUSH
1778: LD_VAR 0 2
1782: PPUSH
1783: CALL_OW 1
1787: ST_TO_ADDR
// end ;
1788: LD_VAR 0 3
1792: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; begin
1793: LD_INT 0
1795: PPUSH
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
1796: LD_ADDR_EXP 21
1800: PUSH
1801: LD_EXP 21
1805: PPUSH
1806: LD_VAR 0 1
1810: PUSH
1811: LD_EXP 21
1815: PUSH
1816: LD_VAR 0 1
1820: ARRAY
1821: PUSH
1822: LD_INT 1
1824: PLUS
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PPUSH
1830: LD_VAR 0 1
1834: PUSH
1835: LD_VAR 0 2
1839: PUSH
1840: LD_VAR 0 3
1844: PUSH
1845: LD_VAR 0 4
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL 13014 0 3
1860: ST_TO_ADDR
// end ;
1861: LD_VAR 0 5
1865: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
1866: LD_INT 0
1868: PPUSH
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
1869: LD_ADDR_EXP 22
1873: PUSH
1874: LD_EXP 22
1878: PPUSH
1879: LD_VAR 0 1
1883: PPUSH
1884: LD_VAR 0 2
1888: PPUSH
1889: CALL_OW 1
1893: ST_TO_ADDR
// end ;
1894: LD_VAR 0 3
1898: RET
// export function MC_SetTame ( base , area ) ; begin
1899: LD_INT 0
1901: PPUSH
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
1902: LD_ADDR_EXP 23
1906: PUSH
1907: LD_EXP 23
1911: PPUSH
1912: LD_VAR 0 1
1916: PPUSH
1917: LD_VAR 0 2
1921: PPUSH
1922: CALL_OW 1
1926: ST_TO_ADDR
// end ;
1927: LD_VAR 0 3
1931: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
1932: LD_INT 0
1934: PPUSH
1935: PPUSH
// if not base or not kinds then
1936: LD_VAR 0 1
1940: NOT
1941: PUSH
1942: LD_VAR 0 2
1946: NOT
1947: OR
1948: IFFALSE 1952
// exit ;
1950: GO 2013
// for i in kinds do
1952: LD_ADDR_VAR 0 4
1956: PUSH
1957: LD_VAR 0 2
1961: PUSH
1962: FOR_IN
1963: IFFALSE 2011
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
1965: LD_ADDR_EXP 24
1969: PUSH
1970: LD_EXP 24
1974: PPUSH
1975: LD_VAR 0 1
1979: PUSH
1980: LD_EXP 24
1984: PUSH
1985: LD_VAR 0 1
1989: ARRAY
1990: PUSH
1991: LD_INT 1
1993: PLUS
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 13014 0 3
2008: ST_TO_ADDR
2009: GO 1962
2011: POP
2012: POP
// end ;
2013: LD_VAR 0 3
2017: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
2018: LD_INT 0
2020: PPUSH
// if not mc_bases or not base or not areas then
2021: LD_EXP 6
2025: NOT
2026: PUSH
2027: LD_VAR 0 1
2031: NOT
2032: OR
2033: PUSH
2034: LD_VAR 0 2
2038: NOT
2039: OR
2040: IFFALSE 2044
// exit ;
2042: GO 2069
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
2044: LD_ADDR_EXP 25
2048: PUSH
2049: LD_EXP 25
2053: PPUSH
2054: LD_VAR 0 1
2058: PPUSH
2059: LD_VAR 0 2
2063: PPUSH
2064: CALL_OW 1
2068: ST_TO_ADDR
// end ;
2069: LD_VAR 0 3
2073: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
2074: LD_INT 0
2076: PPUSH
// if not mc_bases or not base or not teleports_exit then
2077: LD_EXP 6
2081: NOT
2082: PUSH
2083: LD_VAR 0 1
2087: NOT
2088: OR
2089: PUSH
2090: LD_VAR 0 2
2094: NOT
2095: OR
2096: IFFALSE 2100
// exit ;
2098: GO 2125
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
2100: LD_ADDR_EXP 26
2104: PUSH
2105: LD_EXP 26
2109: PPUSH
2110: LD_VAR 0 1
2114: PPUSH
2115: LD_VAR 0 2
2119: PPUSH
2120: CALL_OW 1
2124: ST_TO_ADDR
// end ;
2125: LD_VAR 0 3
2129: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
2130: LD_INT 0
2132: PPUSH
2133: PPUSH
2134: PPUSH
// if not base or not ext_list then
2135: LD_VAR 0 1
2139: NOT
2140: PUSH
2141: LD_VAR 0 5
2145: NOT
2146: OR
2147: IFFALSE 2151
// exit ;
2149: GO 2324
// tmp := GetFacExtXYD ( x , y , d ) ;
2151: LD_ADDR_VAR 0 8
2155: PUSH
2156: LD_VAR 0 2
2160: PPUSH
2161: LD_VAR 0 3
2165: PPUSH
2166: LD_VAR 0 4
2170: PPUSH
2171: CALL 42026 0 3
2175: ST_TO_ADDR
// if not tmp then
2176: LD_VAR 0 8
2180: NOT
2181: IFFALSE 2185
// exit ;
2183: GO 2324
// for i in tmp do
2185: LD_ADDR_VAR 0 7
2189: PUSH
2190: LD_VAR 0 8
2194: PUSH
2195: FOR_IN
2196: IFFALSE 2322
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
2198: LD_ADDR_EXP 14
2202: PUSH
2203: LD_EXP 14
2207: PPUSH
2208: LD_VAR 0 1
2212: PPUSH
2213: LD_EXP 14
2217: PUSH
2218: LD_VAR 0 1
2222: ARRAY
2223: PPUSH
2224: LD_EXP 14
2228: PUSH
2229: LD_VAR 0 1
2233: ARRAY
2234: PUSH
2235: LD_INT 1
2237: PLUS
2238: PPUSH
2239: LD_VAR 0 5
2243: PUSH
2244: LD_INT 1
2246: ARRAY
2247: PUSH
2248: LD_VAR 0 7
2252: PUSH
2253: LD_INT 1
2255: ARRAY
2256: PUSH
2257: LD_VAR 0 7
2261: PUSH
2262: LD_INT 2
2264: ARRAY
2265: PUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_INT 3
2273: ARRAY
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: PPUSH
2281: CALL_OW 2
2285: PPUSH
2286: CALL_OW 1
2290: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
2291: LD_ADDR_VAR 0 5
2295: PUSH
2296: LD_VAR 0 5
2300: PPUSH
2301: LD_INT 1
2303: PPUSH
2304: CALL_OW 3
2308: ST_TO_ADDR
// if not ext_list then
2309: LD_VAR 0 5
2313: NOT
2314: IFFALSE 2320
// exit ;
2316: POP
2317: POP
2318: GO 2324
// end ;
2320: GO 2195
2322: POP
2323: POP
// end ;
2324: LD_VAR 0 6
2328: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
2329: LD_INT 0
2331: PPUSH
// if not mc_bases or not base or not weapon_list then
2332: LD_EXP 6
2336: NOT
2337: PUSH
2338: LD_VAR 0 1
2342: NOT
2343: OR
2344: PUSH
2345: LD_VAR 0 2
2349: NOT
2350: OR
2351: IFFALSE 2355
// exit ;
2353: GO 2380
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
2355: LD_ADDR_EXP 27
2359: PUSH
2360: LD_EXP 27
2364: PPUSH
2365: LD_VAR 0 1
2369: PPUSH
2370: LD_VAR 0 2
2374: PPUSH
2375: CALL_OW 1
2379: ST_TO_ADDR
// end ;
2380: LD_VAR 0 3
2384: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
2385: LD_INT 0
2387: PPUSH
// if not mc_bases or not base or not tech_list then
2388: LD_EXP 6
2392: NOT
2393: PUSH
2394: LD_VAR 0 1
2398: NOT
2399: OR
2400: PUSH
2401: LD_VAR 0 2
2405: NOT
2406: OR
2407: IFFALSE 2411
// exit ;
2409: GO 2436
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
2411: LD_ADDR_EXP 20
2415: PUSH
2416: LD_EXP 20
2420: PPUSH
2421: LD_VAR 0 1
2425: PPUSH
2426: LD_VAR 0 2
2430: PPUSH
2431: CALL_OW 1
2435: ST_TO_ADDR
// end ;
2436: LD_VAR 0 3
2440: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
2441: LD_INT 0
2443: PPUSH
// if not parking_area or not base then
2444: LD_VAR 0 2
2448: NOT
2449: PUSH
2450: LD_VAR 0 1
2454: NOT
2455: OR
2456: IFFALSE 2460
// exit ;
2458: GO 2485
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
2460: LD_ADDR_EXP 28
2464: PUSH
2465: LD_EXP 28
2469: PPUSH
2470: LD_VAR 0 1
2474: PPUSH
2475: LD_VAR 0 2
2479: PPUSH
2480: CALL_OW 1
2484: ST_TO_ADDR
// end ;
2485: LD_VAR 0 3
2489: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
2490: LD_INT 0
2492: PPUSH
// if not base or not scan_area then
2493: LD_VAR 0 1
2497: NOT
2498: PUSH
2499: LD_VAR 0 2
2503: NOT
2504: OR
2505: IFFALSE 2509
// exit ;
2507: GO 2534
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
2509: LD_ADDR_EXP 29
2513: PUSH
2514: LD_EXP 29
2518: PPUSH
2519: LD_VAR 0 1
2523: PPUSH
2524: LD_VAR 0 2
2528: PPUSH
2529: CALL_OW 1
2533: ST_TO_ADDR
// end ; end_of_file
2534: LD_VAR 0 3
2538: RET
// export function MC_Monitor ( ) ; var i , active_players ; begin
2539: LD_INT 0
2541: PPUSH
2542: PPUSH
2543: PPUSH
// while mc_active do
2544: LD_EXP 4
2548: IFFALSE 2658
// begin wait ( 0 0$1 ) ;
2550: LD_INT 35
2552: PPUSH
2553: CALL_OW 67
// active_players := 0 ;
2557: LD_ADDR_VAR 0 3
2561: PUSH
2562: LD_INT 0
2564: ST_TO_ADDR
// for i := 1 to mc_bases do
2565: LD_ADDR_VAR 0 2
2569: PUSH
2570: DOUBLE
2571: LD_INT 1
2573: DEC
2574: ST_TO_ADDR
2575: LD_EXP 6
2579: PUSH
2580: FOR_TO
2581: IFFALSE 2639
// begin if MC_Exist ( i ) then
2583: LD_VAR 0 2
2587: PPUSH
2588: CALL 6575 0 1
2592: IFFALSE 2637
// begin MCE_SailEventCustom ( mce_monitor_base , i , 0 , 0 , 0 , 0 , 0 ) ;
2594: LD_EXP 2
2598: PPUSH
2599: LD_VAR 0 2
2603: PPUSH
2604: LD_INT 0
2606: PPUSH
2607: LD_INT 0
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: LD_INT 0
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: CALL 4869 0 7
// active_players := active_players + 1 ;
2623: LD_ADDR_VAR 0 3
2627: PUSH
2628: LD_VAR 0 3
2632: PUSH
2633: LD_INT 1
2635: PLUS
2636: ST_TO_ADDR
// end ; end ;
2637: GO 2580
2639: POP
2640: POP
// if not active_players then
2641: LD_VAR 0 3
2645: NOT
2646: IFFALSE 2656
// mc_active := false ;
2648: LD_ADDR_EXP 4
2652: PUSH
2653: LD_INT 0
2655: ST_TO_ADDR
// end ;
2656: GO 2544
// end ;
2658: LD_VAR 0 1
2662: RET
// export function MC_MonitorBase ( base ) ; begin
2663: LD_INT 0
2665: PPUSH
// if not mc_people [ base ] then
2666: LD_EXP 9
2670: PUSH
2671: LD_VAR 0 1
2675: ARRAY
2676: NOT
2677: IFFALSE 2702
// mc_bases := Replace ( mc_bases , base , 0 ) ;
2679: LD_ADDR_EXP 6
2683: PUSH
2684: LD_EXP 6
2688: PPUSH
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_INT 0
2696: PPUSH
2697: CALL_OW 1
2701: ST_TO_ADDR
// mc_danger := Replace ( mc_danger , base , DangerInArea ( mc_bases [ base ] , mc_scan_area [ base ] ) ) ;
2702: LD_ADDR_EXP 30
2706: PUSH
2707: LD_EXP 30
2711: PPUSH
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_EXP 6
2721: PUSH
2722: LD_VAR 0 1
2726: ARRAY
2727: PPUSH
2728: LD_EXP 29
2732: PUSH
2733: LD_VAR 0 1
2737: ARRAY
2738: PPUSH
2739: CALL 15660 0 2
2743: PPUSH
2744: CALL_OW 1
2748: ST_TO_ADDR
// if mc_danger [ base ] then
2749: LD_EXP 30
2753: PUSH
2754: LD_VAR 0 1
2758: ARRAY
2759: IFFALSE 2772
// MC_Defend ( base ) else
2761: LD_VAR 0 1
2765: PPUSH
2766: CALL 2786 0 1
2770: GO 2781
// MC_TaskManager ( base ) ;
2772: LD_VAR 0 1
2776: PPUSH
2777: CALL 2848 0 1
// end ;
2781: LD_VAR 0 2
2785: RET
// export function MC_Defend ( base ) ; var defender_vehicles ; begin
2786: LD_INT 0
2788: PPUSH
2789: PPUSH
// if mc_defense_status [ base ] then
2790: LD_EXP 16
2794: PUSH
2795: LD_VAR 0 1
2799: ARRAY
2800: IFFALSE 2804
// exit ;
2802: GO 2843
// mc_defense_status := Replace ( mc_defense_status , base , true ) ;
2804: LD_ADDR_EXP 16
2808: PUSH
2809: LD_EXP 16
2813: PPUSH
2814: LD_VAR 0 1
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: CALL_OW 1
2826: ST_TO_ADDR
// defender_vehicles := mc_defender [ base ] ;
2827: LD_ADDR_VAR 0 3
2831: PUSH
2832: LD_EXP 17
2836: PUSH
2837: LD_VAR 0 1
2841: ARRAY
2842: ST_TO_ADDR
// end ;
2843: LD_VAR 0 2
2847: RET
// export function MC_TaskManager ( base ) ; var crates_list ; begin
2848: LD_INT 0
2850: PPUSH
2851: PPUSH
// MC_CollectCrates ( base , GetListOfCratesInArea ( mc_crates_area [ base ] ) ) ;
2852: LD_VAR 0 1
2856: PPUSH
2857: LD_EXP 25
2861: PUSH
2862: LD_VAR 0 1
2866: ARRAY
2867: PPUSH
2868: CALL_OW 435
2872: PPUSH
2873: CALL 2891 0 2
// MC_Build ( base ) ;
2877: LD_VAR 0 1
2881: PPUSH
2882: CALL 4237 0 1
// end ;
2886: LD_VAR 0 2
2890: RET
// export function MC_CollectCrates ( base , crates ) ; var i , j , amount , cargo_bays , apes , engs , collectors , number_of_crates , driver , drivers , depot , mechanic_used ; begin
2891: LD_INT 0
2893: PPUSH
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
2898: PPUSH
2899: PPUSH
2900: PPUSH
2901: PPUSH
2902: PPUSH
2903: PPUSH
2904: PPUSH
2905: PPUSH
// if MCTM_HasActiveTask ( base , mctm_collect_crates ) or not crates or not MC_GetDepot ( base ) then
2906: LD_VAR 0 1
2910: PPUSH
2911: LD_EXP 36
2915: PPUSH
2916: CALL 7929 0 2
2920: PUSH
2921: LD_VAR 0 2
2925: NOT
2926: OR
2927: PUSH
2928: LD_VAR 0 1
2932: PPUSH
2933: CALL 7550 0 1
2937: NOT
2938: OR
2939: IFFALSE 2943
// exit ;
2941: GO 4232
// MCTM_SetActiveTask ( base , mctm_collect_crates ) ;
2943: LD_VAR 0 1
2947: PPUSH
2948: LD_EXP 36
2952: PPUSH
2953: CALL 7959 0 2
// collectors := [ ] ;
2957: LD_ADDR_VAR 0 10
2961: PUSH
2962: EMPTY
2963: ST_TO_ADDR
// cargo_bays := GetCargoBay ( mc_vehicles [ base ] ) ;
2964: LD_ADDR_VAR 0 7
2968: PUSH
2969: LD_EXP 11
2973: PUSH
2974: LD_VAR 0 1
2978: ARRAY
2979: PPUSH
2980: CALL 45649 0 1
2984: ST_TO_ADDR
// if cargo_bays then
2985: LD_VAR 0 7
2989: IFFALSE 3670
// begin collectors := collectors union cargo_bays ;
2991: LD_ADDR_VAR 0 10
2995: PUSH
2996: LD_VAR 0 10
3000: PUSH
3001: LD_VAR 0 7
3005: UNION
3006: ST_TO_ADDR
// while crates and collectors do
3007: LD_VAR 0 2
3011: PUSH
3012: LD_VAR 0 10
3016: AND
3017: IFFALSE 3567
// begin wait ( 0 0$1 ) ;
3019: LD_INT 35
3021: PPUSH
3022: CALL_OW 67
// for i in collectors do
3026: LD_ADDR_VAR 0 4
3030: PUSH
3031: LD_VAR 0 10
3035: PUSH
3036: FOR_IN
3037: IFFALSE 3563
// begin driver := 0 ;
3039: LD_ADDR_VAR 0 12
3043: PUSH
3044: LD_INT 0
3046: ST_TO_ADDR
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
3047: LD_VAR 0 4
3051: PPUSH
3052: CALL_OW 263
3056: PUSH
3057: LD_INT 1
3059: EQUAL
3060: PUSH
3061: LD_VAR 0 4
3065: PPUSH
3066: CALL_OW 311
3070: NOT
3071: AND
3072: IFFALSE 3256
// begin driver := MC_GetOneByClass ( base , 3 , mct_none ) ;
3074: LD_ADDR_VAR 0 12
3078: PUSH
3079: LD_VAR 0 1
3083: PPUSH
3084: LD_INT 3
3086: PPUSH
3087: LD_EXP 31
3091: PPUSH
3092: CALL 7456 0 3
3096: ST_TO_ADDR
// if not driver then
3097: LD_VAR 0 12
3101: NOT
3102: IFFALSE 3171
// begin driver := MC_GetBestForClass ( base , 3 , 1 ) ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 1
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 1
3119: PPUSH
3120: CALL 6615 0 3
3124: ST_TO_ADDR
// if driver then
3125: LD_VAR 0 12
3129: IFFALSE 3171
// begin driver := driver [ 1 ] ;
3131: LD_ADDR_VAR 0 12
3135: PUSH
3136: LD_VAR 0 12
3140: PUSH
3141: LD_INT 1
3143: ARRAY
3144: ST_TO_ADDR
// MC_ChangeClass ( base , 3 , driver ) ;
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: LD_VAR 0 12
3157: PPUSH
3158: CALL 6845 0 3
// AddComExitBuilding ( driver ) ;
3162: LD_VAR 0 12
3166: PPUSH
3167: CALL_OW 182
// end ; end ; if IsInUnit ( driver ) then
3171: LD_VAR 0 12
3175: PPUSH
3176: CALL_OW 310
3180: IFFALSE 3191
// ComExit ( driver ) ;
3182: LD_VAR 0 12
3186: PPUSH
3187: CALL 44778 0 1
// SetTag ( driver , mct_collect_crates ) ;
3191: LD_VAR 0 12
3195: PPUSH
3196: LD_EXP 34
3200: PPUSH
3201: CALL_OW 109
// if GetLives ( i ) < 1000 then
3205: LD_VAR 0 4
3209: PPUSH
3210: CALL_OW 256
3214: PUSH
3215: LD_INT 1000
3217: LESS
3218: IFFALSE 3234
// AddComRepairVehicle ( driver , i ) ;
3220: LD_VAR 0 12
3224: PPUSH
3225: LD_VAR 0 4
3229: PPUSH
3230: CALL_OW 189
// AddComEnterUnit ( driver , i ) ;
3234: LD_VAR 0 12
3238: PPUSH
3239: LD_VAR 0 4
3243: PPUSH
3244: CALL_OW 180
// mechanic_used := true ;
3248: LD_ADDR_VAR 0 15
3252: PUSH
3253: LD_INT 1
3255: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) ;
3256: LD_INT 35
3258: PPUSH
3259: CALL_OW 67
// if IsDead ( i ) then
3263: LD_VAR 0 4
3267: PPUSH
3268: CALL_OW 301
3272: IFFALSE 3292
// begin collectors := collectors diff i ;
3274: LD_ADDR_VAR 0 10
3278: PUSH
3279: LD_VAR 0 10
3283: PUSH
3284: LD_VAR 0 4
3288: DIFF
3289: ST_TO_ADDR
// continue ;
3290: GO 3256
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 20 then
3292: LD_VAR 0 4
3296: PPUSH
3297: CALL_OW 262
3301: PUSH
3302: LD_INT 1
3304: EQUAL
3305: PUSH
3306: LD_VAR 0 4
3310: PPUSH
3311: CALL_OW 261
3315: PUSH
3316: LD_INT 20
3318: LESS
3319: AND
3320: IFFALSE 3381
// begin depot := NearestUnitToUnit ( MC_GetDepot ( base ) , i ) ;
3322: LD_ADDR_VAR 0 14
3326: PUSH
3327: LD_VAR 0 1
3331: PPUSH
3332: CALL 7550 0 1
3336: PPUSH
3337: LD_VAR 0 4
3341: PPUSH
3342: CALL_OW 74
3346: ST_TO_ADDR
// if GetDistUnits ( i , depot ) < 6 then
3347: LD_VAR 0 4
3351: PPUSH
3352: LD_VAR 0 14
3356: PPUSH
3357: CALL_OW 296
3361: PUSH
3362: LD_INT 6
3364: LESS
3365: IFFALSE 3381
// ComMoveUnit ( i , depot ) ;
3367: LD_VAR 0 4
3371: PPUSH
3372: LD_VAR 0 14
3376: PPUSH
3377: CALL_OW 112
// end ; if GetControl ( i ) = control_manual then
3381: LD_VAR 0 4
3385: PPUSH
3386: CALL_OW 263
3390: PUSH
3391: LD_INT 1
3393: EQUAL
3394: IFFALSE 3459
// begin if not driver then
3396: LD_VAR 0 12
3400: NOT
3401: IFFALSE 3418
// driver := IsDrivenBy ( i ) ;
3403: LD_ADDR_VAR 0 12
3407: PUSH
3408: LD_VAR 0 4
3412: PPUSH
3413: CALL_OW 311
3417: ST_TO_ADDR
// if not HasTask ( driver ) then
3418: LD_VAR 0 12
3422: PPUSH
3423: CALL_OW 314
3427: NOT
3428: IFFALSE 3457
// ComCollect ( driver , crates [ 1 ] , crates [ 2 ] ) ;
3430: LD_VAR 0 12
3434: PPUSH
3435: LD_VAR 0 2
3439: PUSH
3440: LD_INT 1
3442: ARRAY
3443: PPUSH
3444: LD_VAR 0 2
3448: PUSH
3449: LD_INT 2
3451: ARRAY
3452: PPUSH
3453: CALL_OW 117
// end else
3457: GO 3498
// if not HasTask ( i ) then
3459: LD_VAR 0 4
3463: PPUSH
3464: CALL_OW 314
3468: NOT
3469: IFFALSE 3498
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3471: LD_VAR 0 4
3475: PPUSH
3476: LD_VAR 0 2
3480: PUSH
3481: LD_INT 1
3483: ARRAY
3484: PPUSH
3485: LD_VAR 0 2
3489: PUSH
3490: LD_INT 2
3492: ARRAY
3493: PPUSH
3494: CALL_OW 117
// until not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3498: LD_VAR 0 2
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: PPUSH
3507: LD_VAR 0 2
3511: PUSH
3512: LD_INT 2
3514: ARRAY
3515: PPUSH
3516: CALL_OW 284
3520: NOT
3521: IFFALSE 3256
// for j := 1 to 2 do
3523: LD_ADDR_VAR 0 5
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_INT 2
3535: PUSH
3536: FOR_TO
3537: IFFALSE 3559
// crates := Delete ( crates , 1 ) ;
3539: LD_ADDR_VAR 0 2
3543: PUSH
3544: LD_VAR 0 2
3548: PPUSH
3549: LD_INT 1
3551: PPUSH
3552: CALL_OW 3
3556: ST_TO_ADDR
3557: GO 3536
3559: POP
3560: POP
// end ;
3561: GO 3036
3563: POP
3564: POP
// end ;
3565: GO 3007
// if mechanic_used then
3567: LD_VAR 0 15
3571: IFFALSE 3668
// begin repeat wait ( 0 0$1 ) ;
3573: LD_INT 35
3575: PPUSH
3576: CALL_OW 67
// until not GetCargo ( collectors , mat_cans ) or not collectors ;
3580: LD_VAR 0 10
3584: PPUSH
3585: LD_INT 1
3587: PPUSH
3588: CALL_OW 289
3592: NOT
3593: PUSH
3594: LD_VAR 0 10
3598: NOT
3599: OR
3600: IFFALSE 3573
// drivers := MCT_ResetTag ( base , mct_collect_crates ) ;
3602: LD_ADDR_VAR 0 13
3606: PUSH
3607: LD_VAR 0 1
3611: PPUSH
3612: LD_EXP 34
3616: PPUSH
3617: CALL 6460 0 2
3621: ST_TO_ADDR
// if drivers then
3622: LD_VAR 0 13
3626: IFFALSE 3654
// for i in drivers do
3628: LD_ADDR_VAR 0 4
3632: PUSH
3633: LD_VAR 0 13
3637: PUSH
3638: FOR_IN
3639: IFFALSE 3652
// ComExit ( i ) ;
3641: LD_VAR 0 4
3645: PPUSH
3646: CALL 44778 0 1
3650: GO 3638
3652: POP
3653: POP
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3654: LD_VAR 0 1
3658: PPUSH
3659: LD_EXP 36
3663: PPUSH
3664: CALL 8023 0 2
// end ; end else
3668: GO 4232
// begin apes := MC_GetByClass ( base , class_apeman_engineer , mct_none ) ;
3670: LD_ADDR_VAR 0 8
3674: PUSH
3675: LD_VAR 0 1
3679: PPUSH
3680: LD_INT 16
3682: PPUSH
3683: LD_EXP 31
3687: PPUSH
3688: CALL 7353 0 3
3692: ST_TO_ADDR
// if apes then
3693: LD_VAR 0 8
3697: IFFALSE 3715
// collectors := collectors union apes ;
3699: LD_ADDR_VAR 0 10
3703: PUSH
3704: LD_VAR 0 10
3708: PUSH
3709: LD_VAR 0 8
3713: UNION
3714: ST_TO_ADDR
// engs := MC_GetByClass ( base , class_engineer , mct_none ) ;
3715: LD_ADDR_VAR 0 9
3719: PUSH
3720: LD_VAR 0 1
3724: PPUSH
3725: LD_INT 2
3727: PPUSH
3728: LD_EXP 31
3732: PPUSH
3733: CALL 7353 0 3
3737: ST_TO_ADDR
// if engs then
3738: LD_VAR 0 9
3742: IFFALSE 3760
// collectors := collectors union engs ;
3744: LD_ADDR_VAR 0 10
3748: PUSH
3749: LD_VAR 0 10
3753: PUSH
3754: LD_VAR 0 9
3758: UNION
3759: ST_TO_ADDR
// if not collectors then
3760: LD_VAR 0 10
3764: NOT
3765: IFFALSE 3865
// begin engs := MC_GetBestForClass ( base , 2 , 3 ) ;
3767: LD_ADDR_VAR 0 9
3771: PUSH
3772: LD_VAR 0 1
3776: PPUSH
3777: LD_INT 2
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL 6615 0 3
3787: ST_TO_ADDR
// if engs then
3788: LD_VAR 0 9
3792: IFFALSE 3811
// MC_ChangeClass ( base , 2 , engs ) ;
3794: LD_VAR 0 1
3798: PPUSH
3799: LD_INT 2
3801: PPUSH
3802: LD_VAR 0 9
3806: PPUSH
3807: CALL 6845 0 3
// repeat wait ( 0 0$1 ) ;
3811: LD_INT 35
3813: PPUSH
3814: CALL_OW 67
// if not UnitFilter ( engs , [ f_ok ] ) then
3818: LD_VAR 0 9
3822: PPUSH
3823: LD_INT 50
3825: PUSH
3826: EMPTY
3827: LIST
3828: PPUSH
3829: CALL_OW 72
3833: NOT
3834: IFFALSE 3838
// break ;
3836: GO 3865
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
3838: LD_VAR 0 9
3842: PPUSH
3843: LD_INT 25
3845: PUSH
3846: LD_INT 2
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PPUSH
3853: CALL_OW 72
3857: PUSH
3858: LD_VAR 0 9
3862: EQUAL
3863: IFFALSE 3811
// end ; if not collectors then
3865: LD_VAR 0 10
3869: NOT
3870: IFFALSE 3888
// begin MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3872: LD_VAR 0 1
3876: PPUSH
3877: LD_EXP 36
3881: PPUSH
3882: CALL 8023 0 2
// exit ;
3886: GO 4232
// end ; if collectors > 5 then
3888: LD_VAR 0 10
3892: PUSH
3893: LD_INT 5
3895: GREATER
3896: IFFALSE 3952
// for i := collectors downto 5 do
3898: LD_ADDR_VAR 0 4
3902: PUSH
3903: DOUBLE
3904: LD_VAR 0 10
3908: INC
3909: ST_TO_ADDR
3910: LD_INT 5
3912: PUSH
3913: FOR_DOWNTO
3914: IFFALSE 3950
// begin SetTag ( i , 0 ) ;
3916: LD_VAR 0 4
3920: PPUSH
3921: LD_INT 0
3923: PPUSH
3924: CALL_OW 109
// collectors := Delete ( collectors , i ) ;
3928: LD_ADDR_VAR 0 10
3932: PUSH
3933: LD_VAR 0 10
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: CALL_OW 3
3947: ST_TO_ADDR
// end ;
3948: GO 3913
3950: POP
3951: POP
// ComExitAll ( collectors ) ;
3952: LD_VAR 0 10
3956: PPUSH
3957: CALL 44861 0 1
// MCT_SetTag ( collectors , mct_collect_crates ) ;
3961: LD_VAR 0 10
3965: PPUSH
3966: LD_EXP 34
3970: PPUSH
3971: CALL 6526 0 2
// while crates and collectors do
3975: LD_VAR 0 2
3979: PUSH
3980: LD_VAR 0 10
3984: AND
3985: IFFALSE 4204
// begin wait ( 0 0$1 ) ;
3987: LD_INT 35
3989: PPUSH
3990: CALL_OW 67
// amount := GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3994: LD_ADDR_VAR 0 6
3998: PUSH
3999: LD_VAR 0 2
4003: PUSH
4004: LD_INT 1
4006: ARRAY
4007: PPUSH
4008: LD_VAR 0 2
4012: PUSH
4013: LD_INT 2
4015: ARRAY
4016: PPUSH
4017: CALL_OW 284
4021: ST_TO_ADDR
// j := 0 ;
4022: LD_ADDR_VAR 0 5
4026: PUSH
4027: LD_INT 0
4029: ST_TO_ADDR
// for i in collectors do
4030: LD_ADDR_VAR 0 4
4034: PUSH
4035: LD_VAR 0 10
4039: PUSH
4040: FOR_IN
4041: IFFALSE 4137
// begin if IsDead ( i ) then
4043: LD_VAR 0 4
4047: PPUSH
4048: CALL_OW 301
4052: IFFALSE 4070
// collectors := collectors diff i ;
4054: LD_ADDR_VAR 0 10
4058: PUSH
4059: LD_VAR 0 10
4063: PUSH
4064: LD_VAR 0 4
4068: DIFF
4069: ST_TO_ADDR
// if j < amount and not HasTask ( i ) then
4070: LD_VAR 0 5
4074: PUSH
4075: LD_VAR 0 6
4079: LESS
4080: PUSH
4081: LD_VAR 0 4
4085: PPUSH
4086: CALL_OW 314
4090: NOT
4091: AND
4092: IFFALSE 4135
// begin j := j + 1 ;
4094: LD_ADDR_VAR 0 5
4098: PUSH
4099: LD_VAR 0 5
4103: PUSH
4104: LD_INT 1
4106: PLUS
4107: ST_TO_ADDR
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
4108: LD_VAR 0 4
4112: PPUSH
4113: LD_VAR 0 2
4117: PUSH
4118: LD_INT 1
4120: ARRAY
4121: PPUSH
4122: LD_VAR 0 2
4126: PUSH
4127: LD_INT 2
4129: ARRAY
4130: PPUSH
4131: CALL_OW 117
// end ; end ;
4135: GO 4040
4137: POP
4138: POP
// if not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) then
4139: LD_VAR 0 2
4143: PUSH
4144: LD_INT 1
4146: ARRAY
4147: PPUSH
4148: LD_VAR 0 2
4152: PUSH
4153: LD_INT 2
4155: ARRAY
4156: PPUSH
4157: CALL_OW 284
4161: NOT
4162: IFFALSE 4202
// for j := 1 to 2 do
4164: LD_ADDR_VAR 0 5
4168: PUSH
4169: DOUBLE
4170: LD_INT 1
4172: DEC
4173: ST_TO_ADDR
4174: LD_INT 2
4176: PUSH
4177: FOR_TO
4178: IFFALSE 4200
// crates := Delete ( crates , 1 ) ;
4180: LD_ADDR_VAR 0 2
4184: PUSH
4185: LD_VAR 0 2
4189: PPUSH
4190: LD_INT 1
4192: PPUSH
4193: CALL_OW 3
4197: ST_TO_ADDR
4198: GO 4177
4200: POP
4201: POP
// end ;
4202: GO 3975
// MCT_ResetTag ( base , mct_collect_crates ) ;
4204: LD_VAR 0 1
4208: PPUSH
4209: LD_EXP 34
4213: PPUSH
4214: CALL 6460 0 2
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
4218: LD_VAR 0 1
4222: PPUSH
4223: LD_EXP 36
4227: PPUSH
4228: CALL 8023 0 2
// end ; end ;
4232: LD_VAR 0 3
4236: RET
// export function MC_Build ( base ) ; var depot , btype , x , y , d , engs ; begin
4237: LD_INT 0
4239: PPUSH
4240: PPUSH
4241: PPUSH
4242: PPUSH
4243: PPUSH
4244: PPUSH
4245: PPUSH
// if MCTM_HasActiveTask ( base , mctm_build ) or not mc_build_list [ base ] or not MC_GetDepot ( base ) then
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_EXP 37
4255: PPUSH
4256: CALL 7929 0 2
4260: PUSH
4261: LD_EXP 14
4265: PUSH
4266: LD_VAR 0 1
4270: ARRAY
4271: NOT
4272: OR
4273: PUSH
4274: LD_VAR 0 1
4278: PPUSH
4279: CALL 7550 0 1
4283: NOT
4284: OR
4285: IFFALSE 4289
// exit ;
4287: GO 4840
// MCTM_SetActiveTask ( base , mctm_build ) ;
4289: LD_VAR 0 1
4293: PPUSH
4294: LD_EXP 37
4298: PPUSH
4299: CALL 7959 0 2
// engs := MC_GetByClass ( base , 2 , mct_none ) ;
4303: LD_ADDR_VAR 0 8
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_INT 2
4315: PPUSH
4316: LD_EXP 31
4320: PPUSH
4321: CALL 7353 0 3
4325: ST_TO_ADDR
// if not engs then
4326: LD_VAR 0 8
4330: NOT
4331: IFFALSE 4443
// begin engs := MC_GetBestForClass ( base , 2 , 6 ) ;
4333: LD_ADDR_VAR 0 8
4337: PUSH
4338: LD_VAR 0 1
4342: PPUSH
4343: LD_INT 2
4345: PPUSH
4346: LD_INT 6
4348: PPUSH
4349: CALL 6615 0 3
4353: ST_TO_ADDR
// if not engs then
4354: LD_VAR 0 8
4358: NOT
4359: IFFALSE 4377
// begin MCTM_DeleteActiveTask ( base , mctm_build ) ;
4361: LD_VAR 0 1
4365: PPUSH
4366: LD_EXP 37
4370: PPUSH
4371: CALL 8023 0 2
// exit ;
4375: GO 4840
// end ; MC_ChangeClass ( base , 2 , engs ) ;
4377: LD_VAR 0 1
4381: PPUSH
4382: LD_INT 2
4384: PPUSH
4385: LD_VAR 0 8
4389: PPUSH
4390: CALL 6845 0 3
// repeat wait ( 0 0$1 ) ;
4394: LD_INT 35
4396: PPUSH
4397: CALL_OW 67
// if not mc_people [ base ] then
4401: LD_EXP 9
4405: PUSH
4406: LD_VAR 0 1
4410: ARRAY
4411: NOT
4412: IFFALSE 4416
// exit ;
4414: GO 4840
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
4416: LD_VAR 0 8
4420: PPUSH
4421: LD_INT 25
4423: PUSH
4424: LD_INT 2
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 72
4435: PUSH
4436: LD_VAR 0 8
4440: EQUAL
4441: IFFALSE 4394
// end ; ComExitAll ( engs ) ;
4443: LD_VAR 0 8
4447: PPUSH
4448: CALL 44861 0 1
// MCT_SetTag ( engs , mct_build ) ;
4452: LD_VAR 0 8
4456: PPUSH
4457: LD_EXP 33
4461: PPUSH
4462: CALL 6526 0 2
// btype := mc_build_list [ base ] [ 1 ] [ 1 ] ;
4466: LD_ADDR_VAR 0 4
4470: PUSH
4471: LD_EXP 14
4475: PUSH
4476: LD_VAR 0 1
4480: ARRAY
4481: PUSH
4482: LD_INT 1
4484: ARRAY
4485: PUSH
4486: LD_INT 1
4488: ARRAY
4489: ST_TO_ADDR
// x := mc_build_list [ base ] [ 1 ] [ 2 ] ;
4490: LD_ADDR_VAR 0 5
4494: PUSH
4495: LD_EXP 14
4499: PUSH
4500: LD_VAR 0 1
4504: ARRAY
4505: PUSH
4506: LD_INT 1
4508: ARRAY
4509: PUSH
4510: LD_INT 2
4512: ARRAY
4513: ST_TO_ADDR
// y := mc_build_list [ base ] [ 1 ] [ 3 ] ;
4514: LD_ADDR_VAR 0 6
4518: PUSH
4519: LD_EXP 14
4523: PUSH
4524: LD_VAR 0 1
4528: ARRAY
4529: PUSH
4530: LD_INT 1
4532: ARRAY
4533: PUSH
4534: LD_INT 3
4536: ARRAY
4537: ST_TO_ADDR
// d := mc_build_list [ base ] [ 1 ] [ 4 ] ;
4538: LD_ADDR_VAR 0 7
4542: PUSH
4543: LD_EXP 14
4547: PUSH
4548: LD_VAR 0 1
4552: ARRAY
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: PUSH
4558: LD_INT 4
4560: ARRAY
4561: ST_TO_ADDR
// if GetType ( HexInfo ( x , y ) ) = unit_building then
4562: LD_VAR 0 5
4566: PPUSH
4567: LD_VAR 0 6
4571: PPUSH
4572: CALL_OW 428
4576: PPUSH
4577: CALL_OW 247
4581: PUSH
4582: LD_INT 3
4584: EQUAL
4585: IFFALSE 4620
// begin wait ( 0 0$1 ) ;
4587: LD_INT 35
4589: PPUSH
4590: CALL_OW 67
// ComComplete ( engs , HexInfo ( x , y ) ) ;
4594: LD_VAR 0 8
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: LD_VAR 0 6
4608: PPUSH
4609: CALL_OW 428
4613: PPUSH
4614: CALL 15871 0 2
// end else
4618: GO 4840
// begin depot := NearestUnitToXY ( MC_GetDepot ( base ) , x , y ) ;
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: LD_VAR 0 1
4629: PPUSH
4630: CALL 7550 0 1
4634: PPUSH
4635: LD_VAR 0 5
4639: PPUSH
4640: LD_VAR 0 6
4644: PPUSH
4645: CALL_OW 73
4649: ST_TO_ADDR
// if not HexInfo ( x , y ) and CanBeBuilt ( depot , btype , x , y , d ) then
4650: LD_VAR 0 5
4654: PPUSH
4655: LD_VAR 0 6
4659: PPUSH
4660: CALL_OW 428
4664: NOT
4665: PUSH
4666: LD_VAR 0 3
4670: PPUSH
4671: LD_VAR 0 4
4675: PPUSH
4676: LD_VAR 0 5
4680: PPUSH
4681: LD_VAR 0 6
4685: PPUSH
4686: LD_VAR 0 7
4690: PPUSH
4691: CALL 20762 0 5
4695: AND
4696: IFFALSE 4729
// ComBuild ( engs , btype , x , y , d ) else
4698: LD_VAR 0 8
4702: PPUSH
4703: LD_VAR 0 4
4707: PPUSH
4708: LD_VAR 0 5
4712: PPUSH
4713: LD_VAR 0 6
4717: PPUSH
4718: LD_VAR 0 7
4722: PPUSH
4723: CALL_OW 145
4727: GO 4840
// begin if GetType ( HexInfo ( x , y ) ) <> unit_building then
4729: LD_VAR 0 5
4733: PPUSH
4734: LD_VAR 0 6
4738: PPUSH
4739: CALL_OW 428
4743: PPUSH
4744: CALL_OW 247
4748: PUSH
4749: LD_INT 3
4751: NONEQUAL
4752: IFFALSE 4812
// begin TryClearPlaceForBuilding ( btype , x , y , d , mc_buildings [ base ] , engs , mc_parking [ base ] ) ;
4754: LD_VAR 0 4
4758: PPUSH
4759: LD_VAR 0 5
4763: PPUSH
4764: LD_VAR 0 6
4768: PPUSH
4769: LD_VAR 0 7
4773: PPUSH
4774: LD_EXP 10
4778: PUSH
4779: LD_VAR 0 1
4783: ARRAY
4784: PPUSH
4785: LD_VAR 0 8
4789: PPUSH
4790: LD_EXP 28
4794: PUSH
4795: LD_VAR 0 1
4799: ARRAY
4800: PPUSH
4801: CALL 19892 0 7
// wait ( 0 0$10 ) ;
4805: LD_INT 350
4807: PPUSH
4808: CALL_OW 67
// end ; MCTM_DeleteActiveTask ( base , mctm_build ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_EXP 37
4821: PPUSH
4822: CALL 8023 0 2
// MCT_ResetTag ( base , mctm_build ) ;
4826: LD_VAR 0 1
4830: PPUSH
4831: LD_EXP 37
4835: PPUSH
4836: CALL 6460 0 2
// end ; end ; end ; end_of_file
4840: LD_VAR 0 2
4844: RET
// export mce_start , mce_monitor_base , mce_ ; export function MCE_InitEvents ( ) ; begin
4845: LD_INT 0
4847: PPUSH
// mce_start := 1 ;
4848: LD_ADDR_EXP 1
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// mce_monitor_base := 2 ;
4856: LD_ADDR_EXP 2
4860: PUSH
4861: LD_INT 2
4863: ST_TO_ADDR
// end ;
4864: LD_VAR 0 1
4868: RET
// export function MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4869: LD_INT 0
4871: PPUSH
// case event of mce_start :
4872: LD_VAR 0 1
4876: PUSH
4877: LD_EXP 1
4881: DOUBLE
4882: EQUAL
4883: IFTRUE 4887
4885: GO 4894
4887: POP
// MC_Monitor ( ) ; mce_monitor_base :
4888: CALL 2539 0 0
4892: GO 4917
4894: LD_EXP 2
4898: DOUBLE
4899: EQUAL
4900: IFTRUE 4904
4902: GO 4916
4904: POP
// MC_MonitorBase ( p1 ) ; end ;
4905: LD_VAR 0 2
4909: PPUSH
4910: CALL 2663 0 1
4914: GO 4917
4916: POP
// end ;
4917: LD_VAR 0 8
4921: RET
// export function MCE_ClassChanged ( unit , old_class , new_class ) ; begin
4922: LD_INT 0
4924: PPUSH
// SetTag ( unit , mct_none ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: LD_EXP 31
4934: PPUSH
4935: CALL_OW 109
// end ;
4939: LD_VAR 0 4
4943: RET
// export function MCE_UnitDestroyed ( un ) ; begin
4944: LD_INT 0
4946: PPUSH
// case GetType ( un ) of unit_human :
4947: LD_VAR 0 1
4951: PPUSH
4952: CALL_OW 247
4956: PUSH
4957: LD_INT 1
4959: DOUBLE
4960: EQUAL
4961: IFTRUE 4965
4963: GO 4977
4965: POP
// MCE_HumanKilled ( un ) ; unit_building :
4966: LD_VAR 0 1
4970: PPUSH
4971: CALL 5003 0 1
4975: GO 4998
4977: LD_INT 3
4979: DOUBLE
4980: EQUAL
4981: IFTRUE 4985
4983: GO 4997
4985: POP
// MCE_BuildingDestroyed ( un ) ; end ;
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL 5560 0 1
4995: GO 4998
4997: POP
// end ;
4998: LD_VAR 0 2
5002: RET
// export function MCE_HumanKilled ( un ) ; var i ; begin
5003: LD_INT 0
5005: PPUSH
5006: PPUSH
// for i := 1 to mc_people do
5007: LD_ADDR_VAR 0 3
5011: PUSH
5012: DOUBLE
5013: LD_INT 1
5015: DEC
5016: ST_TO_ADDR
5017: LD_EXP 9
5021: PUSH
5022: FOR_TO
5023: IFFALSE 5082
// if un in mc_people [ i ] then
5025: LD_VAR 0 1
5029: PUSH
5030: LD_EXP 9
5034: PUSH
5035: LD_VAR 0 3
5039: ARRAY
5040: IN
5041: IFFALSE 5080
// mc_people := Replace ( mc_people , i , mc_people [ i ] diff un ) ;
5043: LD_ADDR_EXP 9
5047: PUSH
5048: LD_EXP 9
5052: PPUSH
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_EXP 9
5062: PUSH
5063: LD_VAR 0 3
5067: ARRAY
5068: PUSH
5069: LD_VAR 0 1
5073: DIFF
5074: PPUSH
5075: CALL_OW 1
5079: ST_TO_ADDR
5080: GO 5022
5082: POP
5083: POP
// end ;
5084: LD_VAR 0 2
5088: RET
// export function MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ; var base ; begin
5089: LD_INT 0
5091: PPUSH
5092: PPUSH
// if GetTag ( driver ) = mct_collect_crates then
5093: LD_VAR 0 1
5097: PPUSH
5098: CALL_OW 110
5102: PUSH
5103: LD_EXP 34
5107: EQUAL
5108: IFFALSE 5157
// begin base := MC_GetHumanBase ( driver ) ;
5110: LD_ADDR_VAR 0 6
5114: PUSH
5115: LD_VAR 0 1
5119: PPUSH
5120: CALL 6782 0 1
5124: ST_TO_ADDR
// if base then
5125: LD_VAR 0 6
5129: IFFALSE 5157
// begin SetTag ( driver , 0 ) ;
5131: LD_VAR 0 1
5135: PPUSH
5136: LD_INT 0
5138: PPUSH
5139: CALL_OW 109
// MC_Retreat ( base , driver ) ;
5143: LD_VAR 0 6
5147: PPUSH
5148: LD_VAR 0 1
5152: PPUSH
5153: CALL 7813 0 2
// end ; end ; end ;
5157: LD_VAR 0 5
5161: RET
// export function MCE_BuildingComplete ( building ) ; var base , btype , x , y , d ; begin
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
5168: PPUSH
5169: PPUSH
// btype := GetBType ( building ) ;
5170: LD_ADDR_VAR 0 4
5174: PUSH
5175: LD_VAR 0 1
5179: PPUSH
5180: CALL_OW 266
5184: ST_TO_ADDR
// x := GetX ( building ) ;
5185: LD_ADDR_VAR 0 5
5189: PUSH
5190: LD_VAR 0 1
5194: PPUSH
5195: CALL_OW 250
5199: ST_TO_ADDR
// y := GetY ( building ) ;
5200: LD_ADDR_VAR 0 6
5204: PUSH
5205: LD_VAR 0 1
5209: PPUSH
5210: CALL_OW 251
5214: ST_TO_ADDR
// d := GetDir ( building ) ;
5215: LD_ADDR_VAR 0 7
5219: PUSH
5220: LD_VAR 0 1
5224: PPUSH
5225: CALL_OW 254
5229: ST_TO_ADDR
// for base = 1 to mc_build_list do
5230: LD_ADDR_VAR 0 3
5234: PUSH
5235: DOUBLE
5236: LD_INT 1
5238: DEC
5239: ST_TO_ADDR
5240: LD_EXP 14
5244: PUSH
5245: FOR_TO
5246: IFFALSE 5553
// begin if not mc_build_list [ base ] then
5248: LD_EXP 14
5252: PUSH
5253: LD_VAR 0 3
5257: ARRAY
5258: NOT
5259: IFFALSE 5263
// continue ;
5261: GO 5245
// if CompareArrayValues ( [ btype , x , y , d ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5263: LD_VAR 0 4
5267: PUSH
5268: LD_VAR 0 5
5272: PUSH
5273: LD_VAR 0 6
5277: PUSH
5278: LD_VAR 0 7
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: PPUSH
5289: LD_EXP 14
5293: PUSH
5294: LD_VAR 0 3
5298: ARRAY
5299: PUSH
5300: LD_INT 1
5302: ARRAY
5303: PPUSH
5304: CALL 19316 0 2
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 255
5318: PUSH
5319: LD_EXP 6
5323: PUSH
5324: LD_VAR 0 3
5328: ARRAY
5329: EQUAL
5330: AND
5331: IFFALSE 5551
// begin if mc_build_list [ base ] [ 1 ] > 4 then
5333: LD_EXP 14
5337: PUSH
5338: LD_VAR 0 3
5342: ARRAY
5343: PUSH
5344: LD_INT 1
5346: ARRAY
5347: PUSH
5348: LD_INT 4
5350: GREATER
5351: IFFALSE 5424
// begin repeat wait ( 0 0$1 ) ;
5353: LD_INT 35
5355: PPUSH
5356: CALL_OW 67
// until not UpgradeCost ( mc_build_list [ base ] [ 1 ] [ 5 ] ) or not IsDead ( building ) ;
5360: LD_EXP 14
5364: PUSH
5365: LD_VAR 0 3
5369: ARRAY
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: PUSH
5375: LD_INT 5
5377: ARRAY
5378: PPUSH
5379: CALL 19552 0 1
5383: NOT
5384: PUSH
5385: LD_VAR 0 1
5389: PPUSH
5390: CALL_OW 301
5394: NOT
5395: OR
5396: IFFALSE 5353
// if IsDead ( building ) then
5398: LD_VAR 0 1
5402: PPUSH
5403: CALL_OW 301
5407: IFFALSE 5413
// exit ;
5409: POP
5410: POP
5411: GO 5555
// ComUpgrade ( building ) ;
5413: LD_VAR 0 1
5417: PPUSH
5418: CALL_OW 146
// end else
5422: GO 5463
// mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5424: LD_ADDR_EXP 14
5428: PUSH
5429: LD_EXP 14
5433: PPUSH
5434: LD_VAR 0 3
5438: PPUSH
5439: LD_EXP 14
5443: PUSH
5444: LD_VAR 0 3
5448: ARRAY
5449: PPUSH
5450: LD_INT 1
5452: PPUSH
5453: CALL_OW 3
5457: PPUSH
5458: CALL_OW 1
5462: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , base , Replace ( mc_buildings [ base ] , mc_buildings [ base ] + 1 , building ) ) ;
5463: LD_ADDR_EXP 10
5467: PUSH
5468: LD_EXP 10
5472: PPUSH
5473: LD_VAR 0 3
5477: PPUSH
5478: LD_EXP 10
5482: PUSH
5483: LD_VAR 0 3
5487: ARRAY
5488: PPUSH
5489: LD_EXP 10
5493: PUSH
5494: LD_VAR 0 3
5498: ARRAY
5499: PUSH
5500: LD_INT 1
5502: PLUS
5503: PPUSH
5504: LD_VAR 0 1
5508: PPUSH
5509: CALL_OW 1
5513: PPUSH
5514: CALL_OW 1
5518: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_EXP 37
5528: PPUSH
5529: CALL 8023 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5533: LD_VAR 0 3
5537: PPUSH
5538: LD_EXP 37
5542: PPUSH
5543: CALL 6460 0 2
// exit ;
5547: POP
5548: POP
5549: GO 5555
// end ; end ;
5551: GO 5245
5553: POP
5554: POP
// end ;
5555: LD_VAR 0 2
5559: RET
// export function MCE_BuildingDestroyed ( building ) ; var base , x , y , d , btype ; begin
5560: LD_INT 0
5562: PPUSH
5563: PPUSH
5564: PPUSH
5565: PPUSH
5566: PPUSH
5567: PPUSH
// btype := GetBType ( building ) ;
5568: LD_ADDR_VAR 0 7
5572: PUSH
5573: LD_VAR 0 1
5577: PPUSH
5578: CALL_OW 266
5582: ST_TO_ADDR
// x := GetX ( building ) ;
5583: LD_ADDR_VAR 0 4
5587: PUSH
5588: LD_VAR 0 1
5592: PPUSH
5593: CALL_OW 250
5597: ST_TO_ADDR
// y := GetY ( building ) ;
5598: LD_ADDR_VAR 0 5
5602: PUSH
5603: LD_VAR 0 1
5607: PPUSH
5608: CALL_OW 251
5612: ST_TO_ADDR
// d := GetDir ( building ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 1
5622: PPUSH
5623: CALL_OW 254
5627: ST_TO_ADDR
// for base := 1 to mc_buildings do
5628: LD_ADDR_VAR 0 3
5632: PUSH
5633: DOUBLE
5634: LD_INT 1
5636: DEC
5637: ST_TO_ADDR
5638: LD_EXP 10
5642: PUSH
5643: FOR_TO
5644: IFFALSE 5874
// begin if not mc_buildings [ base ] then
5646: LD_EXP 10
5650: PUSH
5651: LD_VAR 0 3
5655: ARRAY
5656: NOT
5657: IFFALSE 5661
// continue ;
5659: GO 5643
// if building in mc_buildings [ base ] then
5661: LD_VAR 0 1
5665: PUSH
5666: LD_EXP 10
5670: PUSH
5671: LD_VAR 0 3
5675: ARRAY
5676: IN
5677: IFFALSE 5872
// begin mc_buildings := Replace ( mc_buildings , base , mc_buildings [ base ] diff building ) ;
5679: LD_ADDR_EXP 10
5683: PUSH
5684: LD_EXP 10
5688: PPUSH
5689: LD_VAR 0 3
5693: PPUSH
5694: LD_EXP 10
5698: PUSH
5699: LD_VAR 0 3
5703: ARRAY
5704: PUSH
5705: LD_VAR 0 1
5709: DIFF
5710: PPUSH
5711: CALL_OW 1
5715: ST_TO_ADDR
// if mc_build_list [ base ] then
5716: LD_EXP 14
5720: PUSH
5721: LD_VAR 0 3
5725: ARRAY
5726: IFFALSE 5810
// if mc_build_list [ base ] [ 1 ] [ 1 ] = btype and mc_build_list [ base ] [ 1 ] [ 2 ] = x and mc_build_list [ base ] [ 1 ] [ 3 ] = y then
5728: LD_EXP 14
5732: PUSH
5733: LD_VAR 0 3
5737: ARRAY
5738: PUSH
5739: LD_INT 1
5741: ARRAY
5742: PUSH
5743: LD_INT 1
5745: ARRAY
5746: PUSH
5747: LD_VAR 0 7
5751: EQUAL
5752: PUSH
5753: LD_EXP 14
5757: PUSH
5758: LD_VAR 0 3
5762: ARRAY
5763: PUSH
5764: LD_INT 1
5766: ARRAY
5767: PUSH
5768: LD_INT 2
5770: ARRAY
5771: PUSH
5772: LD_VAR 0 4
5776: EQUAL
5777: AND
5778: PUSH
5779: LD_EXP 14
5783: PUSH
5784: LD_VAR 0 3
5788: ARRAY
5789: PUSH
5790: LD_INT 1
5792: ARRAY
5793: PUSH
5794: LD_INT 3
5796: ARRAY
5797: PUSH
5798: LD_VAR 0 5
5802: EQUAL
5803: AND
5804: IFFALSE 5810
// exit ;
5806: POP
5807: POP
5808: GO 5876
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] ^ [ btype , x , y , d ] ) ;
5810: LD_ADDR_EXP 14
5814: PUSH
5815: LD_EXP 14
5819: PPUSH
5820: LD_VAR 0 3
5824: PPUSH
5825: LD_EXP 14
5829: PUSH
5830: LD_VAR 0 3
5834: ARRAY
5835: PUSH
5836: LD_VAR 0 7
5840: PUSH
5841: LD_VAR 0 4
5845: PUSH
5846: LD_VAR 0 5
5850: PUSH
5851: LD_VAR 0 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: ADD
5862: PPUSH
5863: CALL_OW 1
5867: ST_TO_ADDR
// exit ;
5868: POP
5869: POP
5870: GO 5876
// end ; end ;
5872: GO 5643
5874: POP
5875: POP
// end ;
5876: LD_VAR 0 2
5880: RET
// export function MCE_BuildingUpgradeComplete ( building ) ; var base , btype , x , y , d ; begin
5881: LD_INT 0
5883: PPUSH
5884: PPUSH
5885: PPUSH
5886: PPUSH
5887: PPUSH
5888: PPUSH
// btype := GetBType ( building ) ;
5889: LD_ADDR_VAR 0 4
5893: PUSH
5894: LD_VAR 0 1
5898: PPUSH
5899: CALL_OW 266
5903: ST_TO_ADDR
// x := GetX ( building ) ;
5904: LD_ADDR_VAR 0 5
5908: PUSH
5909: LD_VAR 0 1
5913: PPUSH
5914: CALL_OW 250
5918: ST_TO_ADDR
// y := GetY ( building ) ;
5919: LD_ADDR_VAR 0 6
5923: PUSH
5924: LD_VAR 0 1
5928: PPUSH
5929: CALL_OW 251
5933: ST_TO_ADDR
// d := GetDir ( building ) ;
5934: LD_ADDR_VAR 0 7
5938: PUSH
5939: LD_VAR 0 1
5943: PPUSH
5944: CALL_OW 254
5948: ST_TO_ADDR
// for base = 1 to mc_build_list do
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: DOUBLE
5955: LD_INT 1
5957: DEC
5958: ST_TO_ADDR
5959: LD_EXP 14
5963: PUSH
5964: FOR_TO
5965: IFFALSE 6135
// begin if not mc_build_list [ base ] then
5967: LD_EXP 14
5971: PUSH
5972: LD_VAR 0 3
5976: ARRAY
5977: NOT
5978: IFFALSE 5982
// continue ;
5980: GO 5964
// if CompareArrayValues ( [ btype - 1 , x , y , d , btype ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5982: LD_VAR 0 4
5986: PUSH
5987: LD_INT 1
5989: MINUS
5990: PUSH
5991: LD_VAR 0 5
5995: PUSH
5996: LD_VAR 0 6
6000: PUSH
6001: LD_VAR 0 7
6005: PUSH
6006: LD_VAR 0 4
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: PPUSH
6018: LD_EXP 14
6022: PUSH
6023: LD_VAR 0 3
6027: ARRAY
6028: PUSH
6029: LD_INT 1
6031: ARRAY
6032: PPUSH
6033: CALL 19316 0 2
6037: PUSH
6038: LD_VAR 0 1
6042: PPUSH
6043: CALL_OW 255
6047: PUSH
6048: LD_EXP 6
6052: PUSH
6053: LD_VAR 0 3
6057: ARRAY
6058: EQUAL
6059: AND
6060: IFFALSE 6133
// begin mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
6062: LD_ADDR_EXP 14
6066: PUSH
6067: LD_EXP 14
6071: PPUSH
6072: LD_VAR 0 3
6076: PPUSH
6077: LD_EXP 14
6081: PUSH
6082: LD_VAR 0 3
6086: ARRAY
6087: PPUSH
6088: LD_INT 1
6090: PPUSH
6091: CALL_OW 3
6095: PPUSH
6096: CALL_OW 1
6100: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
6101: LD_VAR 0 3
6105: PPUSH
6106: LD_EXP 37
6110: PPUSH
6111: CALL 8023 0 2
// MCT_ResetTag ( base , mctm_build ) ;
6115: LD_VAR 0 3
6119: PPUSH
6120: LD_EXP 37
6124: PPUSH
6125: CALL 6460 0 2
// exit ;
6129: POP
6130: POP
6131: GO 6137
// end ; end ;
6133: GO 5964
6135: POP
6136: POP
// end ; end_of_file
6137: LD_VAR 0 2
6141: RET
// export mc_active , mc_debug , mc_bases , mc_tag , mc_task , mc_people , mc_buildings , mc_vehicles , mc_mines , mc_minefields , mc_build_list , mc_produce_list , mc_defense_status , mc_defender , mc_defender_limit , mc_ape , mc_tech , mc_attack , mc_deposits_xy , mc_can_tame , mc_lab_upgrade , mc_crates_area , mc_teleport_exit , mc_allowed_tower_weapons , mc_parking , mc_scan_area , mc_danger ; export function MC_InitVariables ( ) ; begin
6142: LD_INT 0
6144: PPUSH
// mc_bases := [ ] ;
6145: LD_ADDR_EXP 6
6149: PUSH
6150: EMPTY
6151: ST_TO_ADDR
// mc_tag := [ ] ;
6152: LD_ADDR_EXP 7
6156: PUSH
6157: EMPTY
6158: ST_TO_ADDR
// mc_task := [ ] ;
6159: LD_ADDR_EXP 8
6163: PUSH
6164: EMPTY
6165: ST_TO_ADDR
// mc_people := [ ] ;
6166: LD_ADDR_EXP 9
6170: PUSH
6171: EMPTY
6172: ST_TO_ADDR
// mc_buildings := [ ] ;
6173: LD_ADDR_EXP 10
6177: PUSH
6178: EMPTY
6179: ST_TO_ADDR
// mc_vehicles := [ ] ;
6180: LD_ADDR_EXP 11
6184: PUSH
6185: EMPTY
6186: ST_TO_ADDR
// mc_mines := [ ] ;
6187: LD_ADDR_EXP 12
6191: PUSH
6192: EMPTY
6193: ST_TO_ADDR
// mc_minefields := [ ] ;
6194: LD_ADDR_EXP 13
6198: PUSH
6199: EMPTY
6200: ST_TO_ADDR
// mc_build_list := [ ] ;
6201: LD_ADDR_EXP 14
6205: PUSH
6206: EMPTY
6207: ST_TO_ADDR
// mc_produce_list := [ ] ;
6208: LD_ADDR_EXP 15
6212: PUSH
6213: EMPTY
6214: ST_TO_ADDR
// mc_defense_status := [ ] ;
6215: LD_ADDR_EXP 16
6219: PUSH
6220: EMPTY
6221: ST_TO_ADDR
// mc_defender := [ ] ;
6222: LD_ADDR_EXP 17
6226: PUSH
6227: EMPTY
6228: ST_TO_ADDR
// mc_defender_limit := [ ] ;
6229: LD_ADDR_EXP 18
6233: PUSH
6234: EMPTY
6235: ST_TO_ADDR
// mc_ape := [ ] ;
6236: LD_ADDR_EXP 19
6240: PUSH
6241: EMPTY
6242: ST_TO_ADDR
// mc_tech := [ ] ;
6243: LD_ADDR_EXP 20
6247: PUSH
6248: EMPTY
6249: ST_TO_ADDR
// mc_attack := [ ] ;
6250: LD_ADDR_EXP 21
6254: PUSH
6255: EMPTY
6256: ST_TO_ADDR
// mc_deposits_xy := [ ] ;
6257: LD_ADDR_EXP 22
6261: PUSH
6262: EMPTY
6263: ST_TO_ADDR
// mc_can_tame := [ ] ;
6264: LD_ADDR_EXP 23
6268: PUSH
6269: EMPTY
6270: ST_TO_ADDR
// mc_crates_area := [ ] ;
6271: LD_ADDR_EXP 25
6275: PUSH
6276: EMPTY
6277: ST_TO_ADDR
// mc_teleport_exit := [ ] ;
6278: LD_ADDR_EXP 26
6282: PUSH
6283: EMPTY
6284: ST_TO_ADDR
// mc_allowed_tower_weapons := [ ] ;
6285: LD_ADDR_EXP 27
6289: PUSH
6290: EMPTY
6291: ST_TO_ADDR
// mc_parking := [ ] ;
6292: LD_ADDR_EXP 28
6296: PUSH
6297: EMPTY
6298: ST_TO_ADDR
// mc_scan_area := [ ] ;
6299: LD_ADDR_EXP 29
6303: PUSH
6304: EMPTY
6305: ST_TO_ADDR
// mc_danger := [ ] ;
6306: LD_ADDR_EXP 30
6310: PUSH
6311: EMPTY
6312: ST_TO_ADDR
// end ; end_of_file
6313: LD_VAR 0 1
6317: RET
// export mct_none , mct_change_class , mct_build , mct_collect_crates , mct_heal ; export function MCT_InitTags ; begin
6318: LD_INT 0
6320: PPUSH
// mct_none := 0 ;
6321: LD_ADDR_EXP 31
6325: PUSH
6326: LD_INT 0
6328: ST_TO_ADDR
// mct_change_class := 1 ;
6329: LD_ADDR_EXP 32
6333: PUSH
6334: LD_INT 1
6336: ST_TO_ADDR
// mct_build := 2 ;
6337: LD_ADDR_EXP 33
6341: PUSH
6342: LD_INT 2
6344: ST_TO_ADDR
// mct_collect_crates := 3 ;
6345: LD_ADDR_EXP 34
6349: PUSH
6350: LD_INT 3
6352: ST_TO_ADDR
// mct_heal := 4 ;
6353: LD_ADDR_EXP 35
6357: PUSH
6358: LD_INT 4
6360: ST_TO_ADDR
// end ;
6361: LD_VAR 0 1
6365: RET
// export function MCT_GetByTag ( base , tag ) ; var i ; begin
6366: LD_INT 0
6368: PPUSH
6369: PPUSH
// result := [ ] ;
6370: LD_ADDR_VAR 0 3
6374: PUSH
6375: EMPTY
6376: ST_TO_ADDR
// if not base then
6377: LD_VAR 0 1
6381: NOT
6382: IFFALSE 6386
// exit ;
6384: GO 6455
// for i in mc_people [ base ] do
6386: LD_ADDR_VAR 0 4
6390: PUSH
6391: LD_EXP 9
6395: PUSH
6396: LD_VAR 0 1
6400: ARRAY
6401: PUSH
6402: FOR_IN
6403: IFFALSE 6453
// if GetTag ( i ) = tag then
6405: LD_VAR 0 4
6409: PPUSH
6410: CALL_OW 110
6414: PUSH
6415: LD_VAR 0 2
6419: EQUAL
6420: IFFALSE 6451
// result := Replace ( result , result + 1 , i ) ;
6422: LD_ADDR_VAR 0 3
6426: PUSH
6427: LD_VAR 0 3
6431: PPUSH
6432: LD_VAR 0 3
6436: PUSH
6437: LD_INT 1
6439: PLUS
6440: PPUSH
6441: LD_VAR 0 4
6445: PPUSH
6446: CALL_OW 1
6450: ST_TO_ADDR
6451: GO 6402
6453: POP
6454: POP
// end ;
6455: LD_VAR 0 3
6459: RET
// export function MCT_ResetTag ( base , tag ) ; var i ; begin
6460: LD_INT 0
6462: PPUSH
6463: PPUSH
// result := MCT_GetByTag ( base , tag ) ;
6464: LD_ADDR_VAR 0 3
6468: PUSH
6469: LD_VAR 0 1
6473: PPUSH
6474: LD_VAR 0 2
6478: PPUSH
6479: CALL 6366 0 2
6483: ST_TO_ADDR
// if result then
6484: LD_VAR 0 3
6488: IFFALSE 6521
// for i in result do
6490: LD_ADDR_VAR 0 4
6494: PUSH
6495: LD_VAR 0 3
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6519
// SetTag ( i , mct_none ) ;
6503: LD_VAR 0 4
6507: PPUSH
6508: LD_EXP 31
6512: PPUSH
6513: CALL_OW 109
6517: GO 6500
6519: POP
6520: POP
// end ;
6521: LD_VAR 0 3
6525: RET
// export function MCT_SetTag ( units , tag ) ; var i ; begin
6526: LD_INT 0
6528: PPUSH
6529: PPUSH
// if not units then
6530: LD_VAR 0 1
6534: NOT
6535: IFFALSE 6539
// exit ;
6537: GO 6570
// for i in units do
6539: LD_ADDR_VAR 0 4
6543: PUSH
6544: LD_VAR 0 1
6548: PUSH
6549: FOR_IN
6550: IFFALSE 6568
// SetTag ( i , tag ) ;
6552: LD_VAR 0 4
6556: PPUSH
6557: LD_VAR 0 2
6561: PPUSH
6562: CALL_OW 109
6566: GO 6549
6568: POP
6569: POP
// end ; end_of_file
6570: LD_VAR 0 3
6574: RET
// export function MC_Exist ( base ) ; begin
6575: LD_INT 0
6577: PPUSH
// result := mc_bases >= base and mc_bases [ base ] > 0 ;
6578: LD_ADDR_VAR 0 2
6582: PUSH
6583: LD_EXP 6
6587: PUSH
6588: LD_VAR 0 1
6592: GREATEREQUAL
6593: PUSH
6594: LD_EXP 6
6598: PUSH
6599: LD_VAR 0 1
6603: ARRAY
6604: PUSH
6605: LD_INT 0
6607: GREATER
6608: AND
6609: ST_TO_ADDR
// end ;
6610: LD_VAR 0 2
6614: RET
// export function MC_GetBestForClass ( base , class , amount ) ; var i , units ; begin
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
6619: PPUSH
// result := [ ] ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: EMPTY
6626: ST_TO_ADDR
// units := SortBySkill ( UnitFilter ( mc_people [ base ] , [ f_not , [ f_class , class ] ] ) , class ) ;
6627: LD_ADDR_VAR 0 6
6631: PUSH
6632: LD_EXP 9
6636: PUSH
6637: LD_VAR 0 1
6641: ARRAY
6642: PPUSH
6643: LD_INT 3
6645: PUSH
6646: LD_INT 25
6648: PUSH
6649: LD_VAR 0 2
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 72
6666: PPUSH
6667: LD_VAR 0 2
6671: PPUSH
6672: CALL 42896 0 2
6676: ST_TO_ADDR
// if not units then
6677: LD_VAR 0 6
6681: NOT
6682: IFFALSE 6686
// exit ;
6684: GO 6777
// for i := 1 to amount do
6686: LD_ADDR_VAR 0 5
6690: PUSH
6691: DOUBLE
6692: LD_INT 1
6694: DEC
6695: ST_TO_ADDR
6696: LD_VAR 0 3
6700: PUSH
6701: FOR_TO
6702: IFFALSE 6775
// begin if i > units then
6704: LD_VAR 0 5
6708: PUSH
6709: LD_VAR 0 6
6713: GREATER
6714: IFFALSE 6720
// exit ;
6716: POP
6717: POP
6718: GO 6777
// if not GetTag ( units [ i ] ) then
6720: LD_VAR 0 6
6724: PUSH
6725: LD_VAR 0 5
6729: ARRAY
6730: PPUSH
6731: CALL_OW 110
6735: NOT
6736: IFFALSE 6773
// result := Replace ( result , result + 1 , units [ i ] ) ;
6738: LD_ADDR_VAR 0 4
6742: PUSH
6743: LD_VAR 0 4
6747: PPUSH
6748: LD_VAR 0 4
6752: PUSH
6753: LD_INT 1
6755: PLUS
6756: PPUSH
6757: LD_VAR 0 6
6761: PUSH
6762: LD_VAR 0 5
6766: ARRAY
6767: PPUSH
6768: CALL_OW 1
6772: ST_TO_ADDR
// end ;
6773: GO 6701
6775: POP
6776: POP
// end ;
6777: LD_VAR 0 4
6781: RET
// export function MC_GetHumanBase ( human ) ; var i ; begin
6782: LD_INT 0
6784: PPUSH
6785: PPUSH
// for i := 1 to mc_people do
6786: LD_ADDR_VAR 0 3
6790: PUSH
6791: DOUBLE
6792: LD_INT 1
6794: DEC
6795: ST_TO_ADDR
6796: LD_EXP 9
6800: PUSH
6801: FOR_TO
6802: IFFALSE 6838
// if human in mc_people [ i ] then
6804: LD_VAR 0 1
6808: PUSH
6809: LD_EXP 9
6813: PUSH
6814: LD_VAR 0 3
6818: ARRAY
6819: IN
6820: IFFALSE 6836
// begin result := i ;
6822: LD_ADDR_VAR 0 2
6826: PUSH
6827: LD_VAR 0 3
6831: ST_TO_ADDR
// exit ;
6832: POP
6833: POP
6834: GO 6840
// end ;
6836: GO 6801
6838: POP
6839: POP
// end ;
6840: LD_VAR 0 2
6844: RET
// export function MC_ChangeClass ( base , class , units ) ; var i , buildings , b ; begin
6845: LD_INT 0
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
// if not base or not units then
6851: LD_VAR 0 1
6855: NOT
6856: PUSH
6857: LD_VAR 0 3
6861: NOT
6862: OR
6863: IFFALSE 6867
// exit ;
6865: GO 7348
// case class of 1 , 5 , 6 , 7 , 8 :
6867: LD_VAR 0 2
6871: PUSH
6872: LD_INT 1
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6904
6878: LD_INT 5
6880: DOUBLE
6881: EQUAL
6882: IFTRUE 6904
6884: LD_INT 6
6886: DOUBLE
6887: EQUAL
6888: IFTRUE 6904
6890: LD_INT 7
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6904
6896: LD_INT 8
6898: DOUBLE
6899: EQUAL
6900: IFTRUE 6904
6902: GO 6956
6904: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
6905: LD_ADDR_VAR 0 6
6909: PUSH
6910: LD_EXP 10
6914: PUSH
6915: LD_VAR 0 1
6919: ARRAY
6920: PPUSH
6921: LD_INT 2
6923: PUSH
6924: LD_INT 30
6926: PUSH
6927: LD_INT 4
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 30
6936: PUSH
6937: LD_INT 5
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 72
6953: ST_TO_ADDR
6954: GO 7148
6956: LD_INT 2
6958: DOUBLE
6959: EQUAL
6960: IFTRUE 6964
6962: GO 7016
6964: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
6965: LD_ADDR_VAR 0 6
6969: PUSH
6970: LD_EXP 10
6974: PUSH
6975: LD_VAR 0 1
6979: ARRAY
6980: PPUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 0
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 30
6996: PUSH
6997: LD_INT 1
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: PPUSH
7009: CALL_OW 72
7013: ST_TO_ADDR
7014: GO 7148
7016: LD_INT 3
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7076
7024: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
7025: LD_ADDR_VAR 0 6
7029: PUSH
7030: LD_EXP 10
7034: PUSH
7035: LD_VAR 0 1
7039: ARRAY
7040: PPUSH
7041: LD_INT 2
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 30
7056: PUSH
7057: LD_INT 3
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: LIST
7068: PPUSH
7069: CALL_OW 72
7073: ST_TO_ADDR
7074: GO 7148
7076: LD_INT 4
7078: DOUBLE
7079: EQUAL
7080: IFTRUE 7084
7082: GO 7147
7084: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
7085: LD_ADDR_VAR 0 6
7089: PUSH
7090: LD_EXP 10
7094: PUSH
7095: LD_VAR 0 1
7099: ARRAY
7100: PPUSH
7101: LD_INT 2
7103: PUSH
7104: LD_INT 30
7106: PUSH
7107: LD_INT 6
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 7
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 30
7126: PUSH
7127: LD_INT 8
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 72
7144: ST_TO_ADDR
7145: GO 7148
7147: POP
// if not buildings then
7148: LD_VAR 0 6
7152: NOT
7153: IFFALSE 7157
// exit ;
7155: GO 7348
// for i := 1 to units do
7157: LD_ADDR_VAR 0 5
7161: PUSH
7162: DOUBLE
7163: LD_INT 1
7165: DEC
7166: ST_TO_ADDR
7167: LD_VAR 0 3
7171: PUSH
7172: FOR_TO
7173: IFFALSE 7346
// begin if GetClass ( units [ i ] ) = class then
7175: LD_VAR 0 3
7179: PUSH
7180: LD_VAR 0 5
7184: ARRAY
7185: PPUSH
7186: CALL_OW 257
7190: PUSH
7191: LD_VAR 0 2
7195: EQUAL
7196: IFFALSE 7200
// continue ;
7198: GO 7172
// SetTag ( units [ i ] , mct_change_class ) ;
7200: LD_VAR 0 3
7204: PUSH
7205: LD_VAR 0 5
7209: ARRAY
7210: PPUSH
7211: LD_EXP 32
7215: PPUSH
7216: CALL_OW 109
// if buildings > i div 6 then
7220: LD_VAR 0 6
7224: PUSH
7225: LD_VAR 0 5
7229: PUSH
7230: LD_INT 6
7232: DIV
7233: GREATER
7234: IFFALSE 7258
// b := buildings [ i div 6 ] else
7236: LD_ADDR_VAR 0 7
7240: PUSH
7241: LD_VAR 0 6
7245: PUSH
7246: LD_VAR 0 5
7250: PUSH
7251: LD_INT 6
7253: DIV
7254: ARRAY
7255: ST_TO_ADDR
7256: GO 7272
// b := buildings [ 1 ] ;
7258: LD_ADDR_VAR 0 7
7262: PUSH
7263: LD_VAR 0 6
7267: PUSH
7268: LD_INT 1
7270: ARRAY
7271: ST_TO_ADDR
// if IsInUnit ( units [ i ] ) then
7272: LD_VAR 0 3
7276: PUSH
7277: LD_VAR 0 5
7281: ARRAY
7282: PPUSH
7283: CALL_OW 310
7287: IFFALSE 7304
// ComExit ( units [ i ] ) ;
7289: LD_VAR 0 3
7293: PUSH
7294: LD_VAR 0 5
7298: ARRAY
7299: PPUSH
7300: CALL 44778 0 1
// AddComEnterUnit ( units [ i ] , b ) ;
7304: LD_VAR 0 3
7308: PUSH
7309: LD_VAR 0 5
7313: ARRAY
7314: PPUSH
7315: LD_VAR 0 7
7319: PPUSH
7320: CALL_OW 180
// AddComChangeProfession ( units [ i ] , class ) ;
7324: LD_VAR 0 3
7328: PUSH
7329: LD_VAR 0 5
7333: ARRAY
7334: PPUSH
7335: LD_VAR 0 2
7339: PPUSH
7340: CALL_OW 183
// end ;
7344: GO 7172
7346: POP
7347: POP
// end ;
7348: LD_VAR 0 4
7352: RET
// export function MC_GetByClass ( base , class , tag ) ; var i ; begin
7353: LD_INT 0
7355: PPUSH
7356: PPUSH
// result := UnitFilter ( mc_people [ base ] , [ f_class , class ] ) ;
7357: LD_ADDR_VAR 0 4
7361: PUSH
7362: LD_EXP 9
7366: PUSH
7367: LD_VAR 0 1
7371: ARRAY
7372: PPUSH
7373: LD_INT 25
7375: PUSH
7376: LD_VAR 0 2
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 72
7389: ST_TO_ADDR
// if tag > - 1 then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: NEG
7398: GREATER
7399: IFFALSE 7451
// for i in result do
7401: LD_ADDR_VAR 0 5
7405: PUSH
7406: LD_VAR 0 4
7410: PUSH
7411: FOR_IN
7412: IFFALSE 7449
// if GetTag ( i ) <> tag then
7414: LD_VAR 0 5
7418: PPUSH
7419: CALL_OW 110
7423: PUSH
7424: LD_VAR 0 3
7428: NONEQUAL
7429: IFFALSE 7447
// result := result diff i ;
7431: LD_ADDR_VAR 0 4
7435: PUSH
7436: LD_VAR 0 4
7440: PUSH
7441: LD_VAR 0 5
7445: DIFF
7446: ST_TO_ADDR
7447: GO 7411
7449: POP
7450: POP
// end ;
7451: LD_VAR 0 4
7455: RET
// export function MC_GetOneByClass ( base , class , tag ) ; begin
7456: LD_INT 0
7458: PPUSH
// result := MC_GetByClass ( base , class , tag ) ;
7459: LD_ADDR_VAR 0 4
7463: PUSH
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_VAR 0 2
7473: PPUSH
7474: LD_VAR 0 3
7478: PPUSH
7479: CALL 7353 0 3
7483: ST_TO_ADDR
// if result then
7484: LD_VAR 0 4
7488: IFFALSE 7504
// result := result [ 1 ] ;
7490: LD_ADDR_VAR 0 4
7494: PUSH
7495: LD_VAR 0 4
7499: PUSH
7500: LD_INT 1
7502: ARRAY
7503: ST_TO_ADDR
// end ;
7504: LD_VAR 0 4
7508: RET
// export function MC_GetBuilding ( base , btype ) ; begin
7509: LD_INT 0
7511: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_btype , btype ] ) ;
7512: LD_ADDR_VAR 0 3
7516: PUSH
7517: LD_EXP 10
7521: PUSH
7522: LD_VAR 0 1
7526: ARRAY
7527: PPUSH
7528: LD_INT 30
7530: PUSH
7531: LD_VAR 0 2
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PPUSH
7540: CALL_OW 72
7544: ST_TO_ADDR
// end ;
7545: LD_VAR 0 3
7549: RET
// export function MC_GetDepot ( base ) ; begin
7550: LD_INT 0
7552: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
7553: LD_ADDR_VAR 0 2
7557: PUSH
7558: LD_EXP 10
7562: PUSH
7563: LD_VAR 0 1
7567: ARRAY
7568: PPUSH
7569: LD_INT 2
7571: PUSH
7572: LD_INT 30
7574: PUSH
7575: LD_INT 0
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 30
7584: PUSH
7585: LD_INT 1
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: PPUSH
7597: CALL_OW 72
7601: ST_TO_ADDR
// end ;
7602: LD_VAR 0 2
7606: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
7607: LD_INT 0
7609: PPUSH
// result := mc_vehicles [ base ] ;
7610: LD_ADDR_VAR 0 3
7614: PUSH
7615: LD_EXP 11
7619: PUSH
7620: LD_VAR 0 1
7624: ARRAY
7625: ST_TO_ADDR
// if onlyCombat then
7626: LD_VAR 0 2
7630: IFFALSE 7808
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
7632: LD_ADDR_VAR 0 3
7636: PUSH
7637: LD_VAR 0 3
7641: PUSH
7642: LD_VAR 0 3
7646: PPUSH
7647: LD_INT 2
7649: PUSH
7650: LD_INT 34
7652: PUSH
7653: LD_INT 12
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: LD_INT 34
7662: PUSH
7663: LD_INT 51
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 34
7672: PUSH
7673: LD_EXP 40
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 34
7684: PUSH
7685: LD_INT 32
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 34
7694: PUSH
7695: LD_INT 13
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 34
7704: PUSH
7705: LD_INT 52
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 34
7714: PUSH
7715: LD_EXP 45
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 34
7726: PUSH
7727: LD_INT 14
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 34
7736: PUSH
7737: LD_INT 53
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 34
7746: PUSH
7747: LD_EXP 39
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 34
7758: PUSH
7759: LD_INT 31
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 34
7768: PUSH
7769: LD_INT 48
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 34
7778: PUSH
7779: LD_INT 8
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 72
7806: DIFF
7807: ST_TO_ADDR
// end ;
7808: LD_VAR 0 3
7812: RET
// export function MC_Retreat ( base , unit ) ; var depot ; begin
7813: LD_INT 0
7815: PPUSH
7816: PPUSH
// if not base or not unit then
7817: LD_VAR 0 1
7821: NOT
7822: PUSH
7823: LD_VAR 0 2
7827: NOT
7828: OR
7829: IFFALSE 7833
// exit ;
7831: GO 7900
// depot := NearestUnitToUnit ( MC_GetDepot ( base ) , unit ) ;
7833: LD_ADDR_VAR 0 4
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: CALL 7550 0 1
7847: PPUSH
7848: LD_VAR 0 2
7852: PPUSH
7853: CALL_OW 74
7857: ST_TO_ADDR
// if depot then
7858: LD_VAR 0 4
7862: IFFALSE 7880
// ComStandNearbyBuilding ( unit , depot ) else
7864: LD_VAR 0 2
7868: PPUSH
7869: LD_VAR 0 4
7873: PPUSH
7874: CALL 9628 0 2
7878: GO 7900
// ComMoveToArea ( unit , mc_scan_area [ base ] ) ;
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_EXP 29
7889: PUSH
7890: LD_VAR 0 1
7894: ARRAY
7895: PPUSH
7896: CALL_OW 113
// end ; end_of_file
7900: LD_VAR 0 3
7904: RET
// export mctm_collect_crates , mctm_build , mctm_ ; export function MCTM_InitTaskManager ( ) ; begin
7905: LD_INT 0
7907: PPUSH
// mctm_collect_crates := 1 ;
7908: LD_ADDR_EXP 36
7912: PUSH
7913: LD_INT 1
7915: ST_TO_ADDR
// mctm_build := 2 ;
7916: LD_ADDR_EXP 37
7920: PUSH
7921: LD_INT 2
7923: ST_TO_ADDR
// end ;
7924: LD_VAR 0 1
7928: RET
// export function MCTM_HasActiveTask ( base , task ) ; begin
7929: LD_INT 0
7931: PPUSH
// result := task in mc_task [ base ] ;
7932: LD_ADDR_VAR 0 3
7936: PUSH
7937: LD_VAR 0 2
7941: PUSH
7942: LD_EXP 8
7946: PUSH
7947: LD_VAR 0 1
7951: ARRAY
7952: IN
7953: ST_TO_ADDR
// end ;
7954: LD_VAR 0 3
7958: RET
// export function MCTM_SetActiveTask ( base , task ) ; begin
7959: LD_INT 0
7961: PPUSH
// mc_task := Replace ( mc_task , base , Replace ( mc_task [ base ] , mc_task [ base ] + 1 , task ) ) ;
7962: LD_ADDR_EXP 8
7966: PUSH
7967: LD_EXP 8
7971: PPUSH
7972: LD_VAR 0 1
7976: PPUSH
7977: LD_EXP 8
7981: PUSH
7982: LD_VAR 0 1
7986: ARRAY
7987: PPUSH
7988: LD_EXP 8
7992: PUSH
7993: LD_VAR 0 1
7997: ARRAY
7998: PUSH
7999: LD_INT 1
8001: PLUS
8002: PPUSH
8003: LD_VAR 0 2
8007: PPUSH
8008: CALL_OW 1
8012: PPUSH
8013: CALL_OW 1
8017: ST_TO_ADDR
// end ;
8018: LD_VAR 0 3
8022: RET
// export function MCTM_DeleteActiveTask ( base , task ) ; begin
8023: LD_INT 0
8025: PPUSH
// mc_task := Replace ( mc_task , base , mc_task [ base ] diff task ) ;
8026: LD_ADDR_EXP 8
8030: PUSH
8031: LD_EXP 8
8035: PPUSH
8036: LD_VAR 0 1
8040: PPUSH
8041: LD_EXP 8
8045: PUSH
8046: LD_VAR 0 1
8050: ARRAY
8051: PUSH
8052: LD_VAR 0 2
8056: DIFF
8057: PPUSH
8058: CALL_OW 1
8062: ST_TO_ADDR
// end ; end_of_file
8063: LD_VAR 0 3
8067: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8068: LD_INT 0
8070: PPUSH
8071: PPUSH
// if exist_mode then
8072: LD_VAR 0 2
8076: IFFALSE 8101
// unit := CreateCharacter ( prefix & ident ) else
8078: LD_ADDR_VAR 0 5
8082: PUSH
8083: LD_VAR 0 3
8087: PUSH
8088: LD_VAR 0 1
8092: STR
8093: PPUSH
8094: CALL_OW 34
8098: ST_TO_ADDR
8099: GO 8116
// unit := NewCharacter ( ident ) ;
8101: LD_ADDR_VAR 0 5
8105: PUSH
8106: LD_VAR 0 1
8110: PPUSH
8111: CALL_OW 25
8115: ST_TO_ADDR
// result := unit ;
8116: LD_ADDR_VAR 0 4
8120: PUSH
8121: LD_VAR 0 5
8125: ST_TO_ADDR
// end ;
8126: LD_VAR 0 4
8130: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8131: LD_INT 0
8133: PPUSH
8134: PPUSH
// if not side or not nation then
8135: LD_VAR 0 1
8139: NOT
8140: PUSH
8141: LD_VAR 0 2
8145: NOT
8146: OR
8147: IFFALSE 8151
// exit ;
8149: GO 8915
// case nation of nation_american :
8151: LD_VAR 0 2
8155: PUSH
8156: LD_INT 1
8158: DOUBLE
8159: EQUAL
8160: IFTRUE 8164
8162: GO 8378
8164: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8165: LD_ADDR_VAR 0 4
8169: PUSH
8170: LD_INT 35
8172: PUSH
8173: LD_INT 45
8175: PUSH
8176: LD_INT 46
8178: PUSH
8179: LD_INT 47
8181: PUSH
8182: LD_INT 82
8184: PUSH
8185: LD_INT 83
8187: PUSH
8188: LD_INT 84
8190: PUSH
8191: LD_INT 85
8193: PUSH
8194: LD_INT 86
8196: PUSH
8197: LD_INT 1
8199: PUSH
8200: LD_INT 2
8202: PUSH
8203: LD_INT 6
8205: PUSH
8206: LD_INT 15
8208: PUSH
8209: LD_INT 16
8211: PUSH
8212: LD_INT 7
8214: PUSH
8215: LD_INT 12
8217: PUSH
8218: LD_INT 13
8220: PUSH
8221: LD_INT 10
8223: PUSH
8224: LD_INT 14
8226: PUSH
8227: LD_INT 20
8229: PUSH
8230: LD_INT 21
8232: PUSH
8233: LD_INT 22
8235: PUSH
8236: LD_INT 25
8238: PUSH
8239: LD_INT 32
8241: PUSH
8242: LD_INT 27
8244: PUSH
8245: LD_INT 36
8247: PUSH
8248: LD_INT 69
8250: PUSH
8251: LD_INT 39
8253: PUSH
8254: LD_INT 34
8256: PUSH
8257: LD_INT 40
8259: PUSH
8260: LD_INT 48
8262: PUSH
8263: LD_INT 49
8265: PUSH
8266: LD_INT 50
8268: PUSH
8269: LD_INT 51
8271: PUSH
8272: LD_INT 52
8274: PUSH
8275: LD_INT 53
8277: PUSH
8278: LD_INT 54
8280: PUSH
8281: LD_INT 55
8283: PUSH
8284: LD_INT 56
8286: PUSH
8287: LD_INT 57
8289: PUSH
8290: LD_INT 58
8292: PUSH
8293: LD_INT 59
8295: PUSH
8296: LD_INT 60
8298: PUSH
8299: LD_INT 61
8301: PUSH
8302: LD_INT 62
8304: PUSH
8305: LD_INT 80
8307: PUSH
8308: LD_INT 82
8310: PUSH
8311: LD_INT 83
8313: PUSH
8314: LD_INT 84
8316: PUSH
8317: LD_INT 85
8319: PUSH
8320: LD_INT 86
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: ST_TO_ADDR
8376: GO 8839
8378: LD_INT 2
8380: DOUBLE
8381: EQUAL
8382: IFTRUE 8386
8384: GO 8608
8386: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
8387: LD_ADDR_VAR 0 4
8391: PUSH
8392: LD_INT 35
8394: PUSH
8395: LD_INT 45
8397: PUSH
8398: LD_INT 46
8400: PUSH
8401: LD_INT 47
8403: PUSH
8404: LD_INT 82
8406: PUSH
8407: LD_INT 83
8409: PUSH
8410: LD_INT 84
8412: PUSH
8413: LD_INT 85
8415: PUSH
8416: LD_INT 87
8418: PUSH
8419: LD_INT 70
8421: PUSH
8422: LD_INT 1
8424: PUSH
8425: LD_INT 11
8427: PUSH
8428: LD_INT 3
8430: PUSH
8431: LD_INT 4
8433: PUSH
8434: LD_INT 5
8436: PUSH
8437: LD_INT 6
8439: PUSH
8440: LD_INT 15
8442: PUSH
8443: LD_INT 18
8445: PUSH
8446: LD_INT 7
8448: PUSH
8449: LD_INT 17
8451: PUSH
8452: LD_INT 8
8454: PUSH
8455: LD_INT 20
8457: PUSH
8458: LD_INT 21
8460: PUSH
8461: LD_INT 22
8463: PUSH
8464: LD_INT 72
8466: PUSH
8467: LD_INT 26
8469: PUSH
8470: LD_INT 69
8472: PUSH
8473: LD_INT 39
8475: PUSH
8476: LD_INT 40
8478: PUSH
8479: LD_INT 41
8481: PUSH
8482: LD_INT 42
8484: PUSH
8485: LD_INT 43
8487: PUSH
8488: LD_INT 48
8490: PUSH
8491: LD_INT 49
8493: PUSH
8494: LD_INT 50
8496: PUSH
8497: LD_INT 51
8499: PUSH
8500: LD_INT 52
8502: PUSH
8503: LD_INT 53
8505: PUSH
8506: LD_INT 54
8508: PUSH
8509: LD_INT 55
8511: PUSH
8512: LD_INT 56
8514: PUSH
8515: LD_INT 60
8517: PUSH
8518: LD_INT 61
8520: PUSH
8521: LD_INT 62
8523: PUSH
8524: LD_INT 66
8526: PUSH
8527: LD_INT 67
8529: PUSH
8530: LD_INT 68
8532: PUSH
8533: LD_INT 81
8535: PUSH
8536: LD_INT 82
8538: PUSH
8539: LD_INT 83
8541: PUSH
8542: LD_INT 84
8544: PUSH
8545: LD_INT 85
8547: PUSH
8548: LD_INT 87
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: ST_TO_ADDR
8606: GO 8839
8608: LD_INT 3
8610: DOUBLE
8611: EQUAL
8612: IFTRUE 8616
8614: GO 8838
8616: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8617: LD_ADDR_VAR 0 4
8621: PUSH
8622: LD_INT 46
8624: PUSH
8625: LD_INT 47
8627: PUSH
8628: LD_INT 1
8630: PUSH
8631: LD_INT 2
8633: PUSH
8634: LD_INT 82
8636: PUSH
8637: LD_INT 83
8639: PUSH
8640: LD_INT 84
8642: PUSH
8643: LD_INT 85
8645: PUSH
8646: LD_INT 86
8648: PUSH
8649: LD_INT 11
8651: PUSH
8652: LD_INT 9
8654: PUSH
8655: LD_INT 20
8657: PUSH
8658: LD_INT 19
8660: PUSH
8661: LD_INT 21
8663: PUSH
8664: LD_INT 24
8666: PUSH
8667: LD_INT 22
8669: PUSH
8670: LD_INT 25
8672: PUSH
8673: LD_INT 28
8675: PUSH
8676: LD_INT 29
8678: PUSH
8679: LD_INT 30
8681: PUSH
8682: LD_INT 31
8684: PUSH
8685: LD_INT 37
8687: PUSH
8688: LD_INT 38
8690: PUSH
8691: LD_INT 32
8693: PUSH
8694: LD_INT 27
8696: PUSH
8697: LD_INT 33
8699: PUSH
8700: LD_INT 69
8702: PUSH
8703: LD_INT 39
8705: PUSH
8706: LD_INT 34
8708: PUSH
8709: LD_INT 40
8711: PUSH
8712: LD_INT 71
8714: PUSH
8715: LD_INT 23
8717: PUSH
8718: LD_INT 44
8720: PUSH
8721: LD_INT 48
8723: PUSH
8724: LD_INT 49
8726: PUSH
8727: LD_INT 50
8729: PUSH
8730: LD_INT 51
8732: PUSH
8733: LD_INT 52
8735: PUSH
8736: LD_INT 53
8738: PUSH
8739: LD_INT 54
8741: PUSH
8742: LD_INT 55
8744: PUSH
8745: LD_INT 56
8747: PUSH
8748: LD_INT 57
8750: PUSH
8751: LD_INT 58
8753: PUSH
8754: LD_INT 59
8756: PUSH
8757: LD_INT 63
8759: PUSH
8760: LD_INT 64
8762: PUSH
8763: LD_INT 65
8765: PUSH
8766: LD_INT 82
8768: PUSH
8769: LD_INT 83
8771: PUSH
8772: LD_INT 84
8774: PUSH
8775: LD_INT 85
8777: PUSH
8778: LD_INT 86
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: ST_TO_ADDR
8836: GO 8839
8838: POP
// if state > - 1 and state < 3 then
8839: LD_VAR 0 3
8843: PUSH
8844: LD_INT 1
8846: NEG
8847: GREATER
8848: PUSH
8849: LD_VAR 0 3
8853: PUSH
8854: LD_INT 3
8856: LESS
8857: AND
8858: IFFALSE 8915
// for i in result do
8860: LD_ADDR_VAR 0 5
8864: PUSH
8865: LD_VAR 0 4
8869: PUSH
8870: FOR_IN
8871: IFFALSE 8913
// if GetTech ( i , side ) <> state then
8873: LD_VAR 0 5
8877: PPUSH
8878: LD_VAR 0 1
8882: PPUSH
8883: CALL_OW 321
8887: PUSH
8888: LD_VAR 0 3
8892: NONEQUAL
8893: IFFALSE 8911
// result := result diff i ;
8895: LD_ADDR_VAR 0 4
8899: PUSH
8900: LD_VAR 0 4
8904: PUSH
8905: LD_VAR 0 5
8909: DIFF
8910: ST_TO_ADDR
8911: GO 8870
8913: POP
8914: POP
// end ;
8915: LD_VAR 0 4
8919: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8920: LD_INT 0
8922: PPUSH
8923: PPUSH
8924: PPUSH
// result := true ;
8925: LD_ADDR_VAR 0 3
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8933: LD_ADDR_VAR 0 5
8937: PUSH
8938: LD_VAR 0 2
8942: PPUSH
8943: CALL_OW 480
8947: ST_TO_ADDR
// if not tmp then
8948: LD_VAR 0 5
8952: NOT
8953: IFFALSE 8957
// exit ;
8955: GO 9006
// for i in tmp do
8957: LD_ADDR_VAR 0 4
8961: PUSH
8962: LD_VAR 0 5
8966: PUSH
8967: FOR_IN
8968: IFFALSE 9004
// if GetTech ( i , side ) <> state_researched then
8970: LD_VAR 0 4
8974: PPUSH
8975: LD_VAR 0 1
8979: PPUSH
8980: CALL_OW 321
8984: PUSH
8985: LD_INT 2
8987: NONEQUAL
8988: IFFALSE 9002
// begin result := false ;
8990: LD_ADDR_VAR 0 3
8994: PUSH
8995: LD_INT 0
8997: ST_TO_ADDR
// exit ;
8998: POP
8999: POP
9000: GO 9006
// end ;
9002: GO 8967
9004: POP
9005: POP
// end ;
9006: LD_VAR 0 3
9010: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9011: LD_INT 0
9013: PPUSH
9014: PPUSH
9015: PPUSH
9016: PPUSH
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9026: LD_VAR 0 1
9030: NOT
9031: PUSH
9032: LD_VAR 0 1
9036: PPUSH
9037: CALL_OW 257
9041: PUSH
9042: LD_INT 9
9044: NONEQUAL
9045: OR
9046: IFFALSE 9050
// exit ;
9048: GO 9623
// side := GetSide ( unit ) ;
9050: LD_ADDR_VAR 0 9
9054: PUSH
9055: LD_VAR 0 1
9059: PPUSH
9060: CALL_OW 255
9064: ST_TO_ADDR
// tech_space := tech_spacanom ;
9065: LD_ADDR_VAR 0 12
9069: PUSH
9070: LD_INT 29
9072: ST_TO_ADDR
// tech_time := tech_taurad ;
9073: LD_ADDR_VAR 0 13
9077: PUSH
9078: LD_INT 28
9080: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9081: LD_ADDR_VAR 0 11
9085: PUSH
9086: LD_VAR 0 1
9090: PPUSH
9091: CALL_OW 310
9095: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9096: LD_VAR 0 11
9100: PPUSH
9101: CALL_OW 247
9105: PUSH
9106: LD_INT 2
9108: EQUAL
9109: IFFALSE 9113
// exit ;
9111: GO 9623
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9113: LD_ADDR_VAR 0 8
9117: PUSH
9118: LD_INT 81
9120: PUSH
9121: LD_VAR 0 9
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 3
9132: PUSH
9133: LD_INT 21
9135: PUSH
9136: LD_INT 3
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PPUSH
9151: CALL_OW 69
9155: ST_TO_ADDR
// if not tmp then
9156: LD_VAR 0 8
9160: NOT
9161: IFFALSE 9165
// exit ;
9163: GO 9623
// if in_unit then
9165: LD_VAR 0 11
9169: IFFALSE 9193
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9171: LD_ADDR_VAR 0 10
9175: PUSH
9176: LD_VAR 0 8
9180: PPUSH
9181: LD_VAR 0 11
9185: PPUSH
9186: CALL_OW 74
9190: ST_TO_ADDR
9191: GO 9213
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9193: LD_ADDR_VAR 0 10
9197: PUSH
9198: LD_VAR 0 8
9202: PPUSH
9203: LD_VAR 0 1
9207: PPUSH
9208: CALL_OW 74
9212: ST_TO_ADDR
// if not enemy then
9213: LD_VAR 0 10
9217: NOT
9218: IFFALSE 9222
// exit ;
9220: GO 9623
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9222: LD_VAR 0 11
9226: PUSH
9227: LD_VAR 0 11
9231: PPUSH
9232: LD_VAR 0 10
9236: PPUSH
9237: CALL_OW 296
9241: PUSH
9242: LD_INT 13
9244: GREATER
9245: AND
9246: PUSH
9247: LD_VAR 0 1
9251: PPUSH
9252: LD_VAR 0 10
9256: PPUSH
9257: CALL_OW 296
9261: PUSH
9262: LD_INT 12
9264: GREATER
9265: OR
9266: IFFALSE 9270
// exit ;
9268: GO 9623
// missile := [ 1 ] ;
9270: LD_ADDR_VAR 0 14
9274: PUSH
9275: LD_INT 1
9277: PUSH
9278: EMPTY
9279: LIST
9280: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9281: LD_VAR 0 9
9285: PPUSH
9286: LD_VAR 0 12
9290: PPUSH
9291: CALL_OW 325
9295: IFFALSE 9324
// missile := Insert ( missile , missile + 1 , 2 ) ;
9297: LD_ADDR_VAR 0 14
9301: PUSH
9302: LD_VAR 0 14
9306: PPUSH
9307: LD_VAR 0 14
9311: PUSH
9312: LD_INT 1
9314: PLUS
9315: PPUSH
9316: LD_INT 2
9318: PPUSH
9319: CALL_OW 2
9323: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9324: LD_VAR 0 9
9328: PPUSH
9329: LD_VAR 0 13
9333: PPUSH
9334: CALL_OW 325
9338: PUSH
9339: LD_VAR 0 10
9343: PPUSH
9344: CALL_OW 255
9348: PPUSH
9349: LD_VAR 0 13
9353: PPUSH
9354: CALL_OW 325
9358: NOT
9359: AND
9360: IFFALSE 9389
// missile := Insert ( missile , missile + 1 , 3 ) ;
9362: LD_ADDR_VAR 0 14
9366: PUSH
9367: LD_VAR 0 14
9371: PPUSH
9372: LD_VAR 0 14
9376: PUSH
9377: LD_INT 1
9379: PLUS
9380: PPUSH
9381: LD_INT 3
9383: PPUSH
9384: CALL_OW 2
9388: ST_TO_ADDR
// if missile < 2 then
9389: LD_VAR 0 14
9393: PUSH
9394: LD_INT 2
9396: LESS
9397: IFFALSE 9401
// exit ;
9399: GO 9623
// x := GetX ( enemy ) ;
9401: LD_ADDR_VAR 0 4
9405: PUSH
9406: LD_VAR 0 10
9410: PPUSH
9411: CALL_OW 250
9415: ST_TO_ADDR
// y := GetY ( enemy ) ;
9416: LD_ADDR_VAR 0 5
9420: PUSH
9421: LD_VAR 0 10
9425: PPUSH
9426: CALL_OW 251
9430: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9431: LD_ADDR_VAR 0 6
9435: PUSH
9436: LD_VAR 0 4
9440: PUSH
9441: LD_INT 1
9443: NEG
9444: PPUSH
9445: LD_INT 1
9447: PPUSH
9448: CALL_OW 12
9452: PLUS
9453: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9454: LD_ADDR_VAR 0 7
9458: PUSH
9459: LD_VAR 0 5
9463: PUSH
9464: LD_INT 1
9466: NEG
9467: PPUSH
9468: LD_INT 1
9470: PPUSH
9471: CALL_OW 12
9475: PLUS
9476: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9477: LD_VAR 0 6
9481: PPUSH
9482: LD_VAR 0 7
9486: PPUSH
9487: CALL_OW 488
9491: NOT
9492: IFFALSE 9514
// begin _x := x ;
9494: LD_ADDR_VAR 0 6
9498: PUSH
9499: LD_VAR 0 4
9503: ST_TO_ADDR
// _y := y ;
9504: LD_ADDR_VAR 0 7
9508: PUSH
9509: LD_VAR 0 5
9513: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9514: LD_ADDR_VAR 0 3
9518: PUSH
9519: LD_INT 1
9521: PPUSH
9522: LD_VAR 0 14
9526: PPUSH
9527: CALL_OW 12
9531: ST_TO_ADDR
// case i of 1 :
9532: LD_VAR 0 3
9536: PUSH
9537: LD_INT 1
9539: DOUBLE
9540: EQUAL
9541: IFTRUE 9545
9543: GO 9562
9545: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9546: LD_VAR 0 1
9550: PPUSH
9551: LD_VAR 0 10
9555: PPUSH
9556: CALL_OW 115
9560: GO 9623
9562: LD_INT 2
9564: DOUBLE
9565: EQUAL
9566: IFTRUE 9570
9568: GO 9592
9570: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9571: LD_VAR 0 1
9575: PPUSH
9576: LD_VAR 0 6
9580: PPUSH
9581: LD_VAR 0 7
9585: PPUSH
9586: CALL_OW 153
9590: GO 9623
9592: LD_INT 3
9594: DOUBLE
9595: EQUAL
9596: IFTRUE 9600
9598: GO 9622
9600: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9601: LD_VAR 0 1
9605: PPUSH
9606: LD_VAR 0 6
9610: PPUSH
9611: LD_VAR 0 7
9615: PPUSH
9616: CALL_OW 154
9620: GO 9623
9622: POP
// end ;
9623: LD_VAR 0 2
9627: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9628: LD_INT 0
9630: PPUSH
9631: PPUSH
9632: PPUSH
9633: PPUSH
9634: PPUSH
9635: PPUSH
// if not unit or not building then
9636: LD_VAR 0 1
9640: NOT
9641: PUSH
9642: LD_VAR 0 2
9646: NOT
9647: OR
9648: IFFALSE 9652
// exit ;
9650: GO 9810
// x := GetX ( building ) ;
9652: LD_ADDR_VAR 0 5
9656: PUSH
9657: LD_VAR 0 2
9661: PPUSH
9662: CALL_OW 250
9666: ST_TO_ADDR
// y := GetY ( building ) ;
9667: LD_ADDR_VAR 0 6
9671: PUSH
9672: LD_VAR 0 2
9676: PPUSH
9677: CALL_OW 251
9681: ST_TO_ADDR
// for i = 0 to 5 do
9682: LD_ADDR_VAR 0 4
9686: PUSH
9687: DOUBLE
9688: LD_INT 0
9690: DEC
9691: ST_TO_ADDR
9692: LD_INT 5
9694: PUSH
9695: FOR_TO
9696: IFFALSE 9808
// begin _x := ShiftX ( x , i , 3 ) ;
9698: LD_ADDR_VAR 0 7
9702: PUSH
9703: LD_VAR 0 5
9707: PPUSH
9708: LD_VAR 0 4
9712: PPUSH
9713: LD_INT 3
9715: PPUSH
9716: CALL_OW 272
9720: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9721: LD_ADDR_VAR 0 8
9725: PUSH
9726: LD_VAR 0 6
9730: PPUSH
9731: LD_VAR 0 4
9735: PPUSH
9736: LD_INT 3
9738: PPUSH
9739: CALL_OW 273
9743: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9744: LD_VAR 0 7
9748: PPUSH
9749: LD_VAR 0 8
9753: PPUSH
9754: CALL_OW 488
9758: NOT
9759: IFFALSE 9763
// continue ;
9761: GO 9695
// if HexInfo ( _x , _y ) = 0 then
9763: LD_VAR 0 7
9767: PPUSH
9768: LD_VAR 0 8
9772: PPUSH
9773: CALL_OW 428
9777: PUSH
9778: LD_INT 0
9780: EQUAL
9781: IFFALSE 9806
// begin ComMoveXY ( unit , _x , _y ) ;
9783: LD_VAR 0 1
9787: PPUSH
9788: LD_VAR 0 7
9792: PPUSH
9793: LD_VAR 0 8
9797: PPUSH
9798: CALL_OW 111
// exit ;
9802: POP
9803: POP
9804: GO 9810
// end ; end ;
9806: GO 9695
9808: POP
9809: POP
// end ;
9810: LD_VAR 0 3
9814: RET
// export function ScanBase ( side , base_area ) ; begin
9815: LD_INT 0
9817: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9818: LD_ADDR_VAR 0 3
9822: PUSH
9823: LD_VAR 0 2
9827: PPUSH
9828: LD_INT 81
9830: PUSH
9831: LD_VAR 0 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PPUSH
9840: CALL_OW 70
9844: ST_TO_ADDR
// end ;
9845: LD_VAR 0 3
9849: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9850: LD_INT 0
9852: PPUSH
9853: PPUSH
9854: PPUSH
9855: PPUSH
// result := false ;
9856: LD_ADDR_VAR 0 2
9860: PUSH
9861: LD_INT 0
9863: ST_TO_ADDR
// side := GetSide ( unit ) ;
9864: LD_ADDR_VAR 0 3
9868: PUSH
9869: LD_VAR 0 1
9873: PPUSH
9874: CALL_OW 255
9878: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9879: LD_ADDR_VAR 0 4
9883: PUSH
9884: LD_VAR 0 1
9888: PPUSH
9889: CALL_OW 248
9893: ST_TO_ADDR
// case nat of 1 :
9894: LD_VAR 0 4
9898: PUSH
9899: LD_INT 1
9901: DOUBLE
9902: EQUAL
9903: IFTRUE 9907
9905: GO 9918
9907: POP
// tech := tech_lassight ; 2 :
9908: LD_ADDR_VAR 0 5
9912: PUSH
9913: LD_INT 12
9915: ST_TO_ADDR
9916: GO 9957
9918: LD_INT 2
9920: DOUBLE
9921: EQUAL
9922: IFTRUE 9926
9924: GO 9937
9926: POP
// tech := tech_mortar ; 3 :
9927: LD_ADDR_VAR 0 5
9931: PUSH
9932: LD_INT 41
9934: ST_TO_ADDR
9935: GO 9957
9937: LD_INT 3
9939: DOUBLE
9940: EQUAL
9941: IFTRUE 9945
9943: GO 9956
9945: POP
// tech := tech_bazooka ; end ;
9946: LD_ADDR_VAR 0 5
9950: PUSH
9951: LD_INT 44
9953: ST_TO_ADDR
9954: GO 9957
9956: POP
// if Researched ( side , tech ) then
9957: LD_VAR 0 3
9961: PPUSH
9962: LD_VAR 0 5
9966: PPUSH
9967: CALL_OW 325
9971: IFFALSE 9998
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9973: LD_ADDR_VAR 0 2
9977: PUSH
9978: LD_INT 5
9980: PUSH
9981: LD_INT 8
9983: PUSH
9984: LD_INT 9
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: LD_VAR 0 4
9996: ARRAY
9997: ST_TO_ADDR
// end ;
9998: LD_VAR 0 2
10002: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10003: LD_INT 0
10005: PPUSH
10006: PPUSH
10007: PPUSH
// if not mines then
10008: LD_VAR 0 2
10012: NOT
10013: IFFALSE 10017
// exit ;
10015: GO 10161
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10017: LD_ADDR_VAR 0 5
10021: PUSH
10022: LD_INT 81
10024: PUSH
10025: LD_VAR 0 1
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 3
10036: PUSH
10037: LD_INT 21
10039: PUSH
10040: LD_INT 3
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: ST_TO_ADDR
// for i in mines do
10060: LD_ADDR_VAR 0 4
10064: PUSH
10065: LD_VAR 0 2
10069: PUSH
10070: FOR_IN
10071: IFFALSE 10159
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10073: LD_VAR 0 4
10077: PUSH
10078: LD_INT 1
10080: ARRAY
10081: PPUSH
10082: LD_VAR 0 4
10086: PUSH
10087: LD_INT 2
10089: ARRAY
10090: PPUSH
10091: CALL_OW 458
10095: NOT
10096: IFFALSE 10100
// continue ;
10098: GO 10070
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10100: LD_VAR 0 4
10104: PUSH
10105: LD_INT 1
10107: ARRAY
10108: PPUSH
10109: LD_VAR 0 4
10113: PUSH
10114: LD_INT 2
10116: ARRAY
10117: PPUSH
10118: CALL_OW 428
10122: PUSH
10123: LD_VAR 0 5
10127: IN
10128: IFFALSE 10157
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10130: LD_VAR 0 4
10134: PUSH
10135: LD_INT 1
10137: ARRAY
10138: PPUSH
10139: LD_VAR 0 4
10143: PUSH
10144: LD_INT 2
10146: ARRAY
10147: PPUSH
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 456
// end ;
10157: GO 10070
10159: POP
10160: POP
// end ;
10161: LD_VAR 0 3
10165: RET
// export function Count ( array ) ; var i ; begin
10166: LD_INT 0
10168: PPUSH
10169: PPUSH
// result := 0 ;
10170: LD_ADDR_VAR 0 2
10174: PUSH
10175: LD_INT 0
10177: ST_TO_ADDR
// for i in array do
10178: LD_ADDR_VAR 0 3
10182: PUSH
10183: LD_VAR 0 1
10187: PUSH
10188: FOR_IN
10189: IFFALSE 10213
// if i then
10191: LD_VAR 0 3
10195: IFFALSE 10211
// result := result + 1 ;
10197: LD_ADDR_VAR 0 2
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: LD_INT 1
10209: PLUS
10210: ST_TO_ADDR
10211: GO 10188
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function IsEmpty ( building ) ; begin
10220: LD_INT 0
10222: PPUSH
// if not building then
10223: LD_VAR 0 1
10227: NOT
10228: IFFALSE 10232
// exit ;
10230: GO 10275
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10232: LD_ADDR_VAR 0 2
10236: PUSH
10237: LD_VAR 0 1
10241: PUSH
10242: LD_INT 22
10244: PUSH
10245: LD_VAR 0 1
10249: PPUSH
10250: CALL_OW 255
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 58
10261: PUSH
10262: EMPTY
10263: LIST
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PPUSH
10269: CALL_OW 69
10273: IN
10274: ST_TO_ADDR
// end ;
10275: LD_VAR 0 2
10279: RET
// export function IsNotFull ( building ) ; begin
10280: LD_INT 0
10282: PPUSH
// if not building then
10283: LD_VAR 0 1
10287: NOT
10288: IFFALSE 10292
// exit ;
10290: GO 10311
// result := UnitsInside ( building ) < 6 ;
10292: LD_ADDR_VAR 0 2
10296: PUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 313
10306: PUSH
10307: LD_INT 6
10309: LESS
10310: ST_TO_ADDR
// end ;
10311: LD_VAR 0 2
10315: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10316: LD_INT 0
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
// tmp := [ ] ;
10322: LD_ADDR_VAR 0 3
10326: PUSH
10327: EMPTY
10328: ST_TO_ADDR
// list := [ ] ;
10329: LD_ADDR_VAR 0 5
10333: PUSH
10334: EMPTY
10335: ST_TO_ADDR
// for i = 16 to 25 do
10336: LD_ADDR_VAR 0 4
10340: PUSH
10341: DOUBLE
10342: LD_INT 16
10344: DEC
10345: ST_TO_ADDR
10346: LD_INT 25
10348: PUSH
10349: FOR_TO
10350: IFFALSE 10423
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10352: LD_ADDR_VAR 0 3
10356: PUSH
10357: LD_VAR 0 3
10361: PUSH
10362: LD_INT 22
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 91
10381: PUSH
10382: LD_VAR 0 1
10386: PUSH
10387: LD_INT 6
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 30
10397: PUSH
10398: LD_VAR 0 4
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: LIST
10411: PUSH
10412: EMPTY
10413: LIST
10414: PPUSH
10415: CALL_OW 69
10419: ADD
10420: ST_TO_ADDR
10421: GO 10349
10423: POP
10424: POP
// for i = 1 to tmp do
10425: LD_ADDR_VAR 0 4
10429: PUSH
10430: DOUBLE
10431: LD_INT 1
10433: DEC
10434: ST_TO_ADDR
10435: LD_VAR 0 3
10439: PUSH
10440: FOR_TO
10441: IFFALSE 10529
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10443: LD_ADDR_VAR 0 5
10447: PUSH
10448: LD_VAR 0 5
10452: PUSH
10453: LD_VAR 0 3
10457: PUSH
10458: LD_VAR 0 4
10462: ARRAY
10463: PPUSH
10464: CALL_OW 266
10468: PUSH
10469: LD_VAR 0 3
10473: PUSH
10474: LD_VAR 0 4
10478: ARRAY
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 3
10489: PUSH
10490: LD_VAR 0 4
10494: ARRAY
10495: PPUSH
10496: CALL_OW 251
10500: PUSH
10501: LD_VAR 0 3
10505: PUSH
10506: LD_VAR 0 4
10510: ARRAY
10511: PPUSH
10512: CALL_OW 254
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: ADD
10526: ST_TO_ADDR
10527: GO 10440
10529: POP
10530: POP
// result := list ;
10531: LD_ADDR_VAR 0 2
10535: PUSH
10536: LD_VAR 0 5
10540: ST_TO_ADDR
// end ;
10541: LD_VAR 0 2
10545: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10546: LD_INT 0
10548: PPUSH
10549: PPUSH
10550: PPUSH
10551: PPUSH
10552: PPUSH
10553: PPUSH
10554: PPUSH
// if not factory then
10555: LD_VAR 0 1
10559: NOT
10560: IFFALSE 10564
// exit ;
10562: GO 11157
// if control = control_apeman then
10564: LD_VAR 0 4
10568: PUSH
10569: LD_INT 5
10571: EQUAL
10572: IFFALSE 10681
// begin tmp := UnitsInside ( factory ) ;
10574: LD_ADDR_VAR 0 8
10578: PUSH
10579: LD_VAR 0 1
10583: PPUSH
10584: CALL_OW 313
10588: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10589: LD_VAR 0 8
10593: PPUSH
10594: LD_INT 25
10596: PUSH
10597: LD_INT 12
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PPUSH
10604: CALL_OW 72
10608: NOT
10609: IFFALSE 10619
// control := control_manual ;
10611: LD_ADDR_VAR 0 4
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10619: LD_ADDR_VAR 0 8
10623: PUSH
10624: LD_VAR 0 1
10628: PPUSH
10629: CALL 10316 0 1
10633: ST_TO_ADDR
// if tmp then
10634: LD_VAR 0 8
10638: IFFALSE 10681
// begin for i in tmp do
10640: LD_ADDR_VAR 0 7
10644: PUSH
10645: LD_VAR 0 8
10649: PUSH
10650: FOR_IN
10651: IFFALSE 10679
// if i [ 1 ] = b_ext_radio then
10653: LD_VAR 0 7
10657: PUSH
10658: LD_INT 1
10660: ARRAY
10661: PUSH
10662: LD_INT 22
10664: EQUAL
10665: IFFALSE 10677
// begin control := control_remote ;
10667: LD_ADDR_VAR 0 4
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// break ;
10675: GO 10679
// end ;
10677: GO 10650
10679: POP
10680: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: LD_VAR 0 3
10695: PPUSH
10696: LD_VAR 0 4
10700: PPUSH
10701: LD_VAR 0 5
10705: PPUSH
10706: CALL_OW 448
10710: IFFALSE 10745
// begin result := [ chassis , engine , control , weapon ] ;
10712: LD_ADDR_VAR 0 6
10716: PUSH
10717: LD_VAR 0 2
10721: PUSH
10722: LD_VAR 0 3
10726: PUSH
10727: LD_VAR 0 4
10731: PUSH
10732: LD_VAR 0 5
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: ST_TO_ADDR
// exit ;
10743: GO 11157
// end ; _chassis := AvailableChassisList ( factory ) ;
10745: LD_ADDR_VAR 0 9
10749: PUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 475
10759: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10760: LD_ADDR_VAR 0 11
10764: PUSH
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 476
10774: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10775: LD_ADDR_VAR 0 12
10779: PUSH
10780: LD_VAR 0 1
10784: PPUSH
10785: CALL_OW 477
10789: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10790: LD_ADDR_VAR 0 10
10794: PUSH
10795: LD_VAR 0 1
10799: PPUSH
10800: CALL_OW 478
10804: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10805: LD_VAR 0 9
10809: NOT
10810: PUSH
10811: LD_VAR 0 11
10815: NOT
10816: OR
10817: PUSH
10818: LD_VAR 0 12
10822: NOT
10823: OR
10824: PUSH
10825: LD_VAR 0 10
10829: NOT
10830: OR
10831: IFFALSE 10866
// begin result := [ chassis , engine , control , weapon ] ;
10833: LD_ADDR_VAR 0 6
10837: PUSH
10838: LD_VAR 0 2
10842: PUSH
10843: LD_VAR 0 3
10847: PUSH
10848: LD_VAR 0 4
10852: PUSH
10853: LD_VAR 0 5
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: ST_TO_ADDR
// exit ;
10864: GO 11157
// end ; if not chassis in _chassis then
10866: LD_VAR 0 2
10870: PUSH
10871: LD_VAR 0 9
10875: IN
10876: NOT
10877: IFFALSE 10903
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10879: LD_ADDR_VAR 0 2
10883: PUSH
10884: LD_VAR 0 9
10888: PUSH
10889: LD_INT 1
10891: PPUSH
10892: LD_VAR 0 9
10896: PPUSH
10897: CALL_OW 12
10901: ARRAY
10902: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10903: LD_VAR 0 2
10907: PPUSH
10908: LD_VAR 0 3
10912: PPUSH
10913: CALL 11162 0 2
10917: NOT
10918: IFFALSE 10977
// repeat engine := _engine [ 1 ] ;
10920: LD_ADDR_VAR 0 3
10924: PUSH
10925: LD_VAR 0 11
10929: PUSH
10930: LD_INT 1
10932: ARRAY
10933: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10934: LD_ADDR_VAR 0 11
10938: PUSH
10939: LD_VAR 0 11
10943: PPUSH
10944: LD_INT 1
10946: PPUSH
10947: CALL_OW 3
10951: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10952: LD_VAR 0 2
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: CALL 11162 0 2
10966: PUSH
10967: LD_VAR 0 11
10971: PUSH
10972: EMPTY
10973: EQUAL
10974: OR
10975: IFFALSE 10920
// if not control in _control then
10977: LD_VAR 0 4
10981: PUSH
10982: LD_VAR 0 12
10986: IN
10987: NOT
10988: IFFALSE 11014
// control := _control [ rand ( 1 , _control ) ] ;
10990: LD_ADDR_VAR 0 4
10994: PUSH
10995: LD_VAR 0 12
10999: PUSH
11000: LD_INT 1
11002: PPUSH
11003: LD_VAR 0 12
11007: PPUSH
11008: CALL_OW 12
11012: ARRAY
11013: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11014: LD_VAR 0 2
11018: PPUSH
11019: LD_VAR 0 5
11023: PPUSH
11024: CALL 11382 0 2
11028: NOT
11029: IFFALSE 11088
// repeat weapon := _weapon [ 1 ] ;
11031: LD_ADDR_VAR 0 5
11035: PUSH
11036: LD_VAR 0 10
11040: PUSH
11041: LD_INT 1
11043: ARRAY
11044: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11045: LD_ADDR_VAR 0 10
11049: PUSH
11050: LD_VAR 0 10
11054: PPUSH
11055: LD_INT 1
11057: PPUSH
11058: CALL_OW 3
11062: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11063: LD_VAR 0 2
11067: PPUSH
11068: LD_VAR 0 5
11072: PPUSH
11073: CALL 11382 0 2
11077: PUSH
11078: LD_VAR 0 10
11082: PUSH
11083: EMPTY
11084: EQUAL
11085: OR
11086: IFFALSE 11031
// result := [ ] ;
11088: LD_ADDR_VAR 0 6
11092: PUSH
11093: EMPTY
11094: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11095: LD_VAR 0 1
11099: PPUSH
11100: LD_VAR 0 2
11104: PPUSH
11105: LD_VAR 0 3
11109: PPUSH
11110: LD_VAR 0 4
11114: PPUSH
11115: LD_VAR 0 5
11119: PPUSH
11120: CALL_OW 448
11124: IFFALSE 11157
// result := [ chassis , engine , control , weapon ] ;
11126: LD_ADDR_VAR 0 6
11130: PUSH
11131: LD_VAR 0 2
11135: PUSH
11136: LD_VAR 0 3
11140: PUSH
11141: LD_VAR 0 4
11145: PUSH
11146: LD_VAR 0 5
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: ST_TO_ADDR
// end ;
11157: LD_VAR 0 6
11161: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11162: LD_INT 0
11164: PPUSH
// if not chassis or not engine then
11165: LD_VAR 0 1
11169: NOT
11170: PUSH
11171: LD_VAR 0 2
11175: NOT
11176: OR
11177: IFFALSE 11181
// exit ;
11179: GO 11377
// case engine of engine_solar :
11181: LD_VAR 0 2
11185: PUSH
11186: LD_INT 2
11188: DOUBLE
11189: EQUAL
11190: IFTRUE 11194
11192: GO 11232
11194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11195: LD_ADDR_VAR 0 3
11199: PUSH
11200: LD_INT 11
11202: PUSH
11203: LD_INT 12
11205: PUSH
11206: LD_INT 13
11208: PUSH
11209: LD_INT 14
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: LD_INT 2
11217: PUSH
11218: LD_INT 3
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: ST_TO_ADDR
11230: GO 11361
11232: LD_INT 1
11234: DOUBLE
11235: EQUAL
11236: IFTRUE 11240
11238: GO 11302
11240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11241: LD_ADDR_VAR 0 3
11245: PUSH
11246: LD_INT 11
11248: PUSH
11249: LD_INT 12
11251: PUSH
11252: LD_INT 13
11254: PUSH
11255: LD_INT 14
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: LD_INT 2
11263: PUSH
11264: LD_INT 3
11266: PUSH
11267: LD_INT 4
11269: PUSH
11270: LD_INT 5
11272: PUSH
11273: LD_INT 21
11275: PUSH
11276: LD_INT 23
11278: PUSH
11279: LD_INT 22
11281: PUSH
11282: LD_INT 24
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: ST_TO_ADDR
11300: GO 11361
11302: LD_INT 3
11304: DOUBLE
11305: EQUAL
11306: IFTRUE 11310
11308: GO 11360
11310: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11311: LD_ADDR_VAR 0 3
11315: PUSH
11316: LD_INT 13
11318: PUSH
11319: LD_INT 14
11321: PUSH
11322: LD_INT 2
11324: PUSH
11325: LD_INT 3
11327: PUSH
11328: LD_INT 4
11330: PUSH
11331: LD_INT 5
11333: PUSH
11334: LD_INT 21
11336: PUSH
11337: LD_INT 22
11339: PUSH
11340: LD_INT 23
11342: PUSH
11343: LD_INT 24
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: ST_TO_ADDR
11358: GO 11361
11360: POP
// result := ( chassis in result ) ;
11361: LD_ADDR_VAR 0 3
11365: PUSH
11366: LD_VAR 0 1
11370: PUSH
11371: LD_VAR 0 3
11375: IN
11376: ST_TO_ADDR
// end ;
11377: LD_VAR 0 3
11381: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11382: LD_INT 0
11384: PPUSH
// if not chassis or not weapon then
11385: LD_VAR 0 1
11389: NOT
11390: PUSH
11391: LD_VAR 0 2
11395: NOT
11396: OR
11397: IFFALSE 11401
// exit ;
11399: GO 12427
// case weapon of us_machine_gun :
11401: LD_VAR 0 2
11405: PUSH
11406: LD_INT 2
11408: DOUBLE
11409: EQUAL
11410: IFTRUE 11414
11412: GO 11444
11414: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11415: LD_ADDR_VAR 0 3
11419: PUSH
11420: LD_INT 1
11422: PUSH
11423: LD_INT 2
11425: PUSH
11426: LD_INT 3
11428: PUSH
11429: LD_INT 4
11431: PUSH
11432: LD_INT 5
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: ST_TO_ADDR
11442: GO 12411
11444: LD_INT 3
11446: DOUBLE
11447: EQUAL
11448: IFTRUE 11452
11450: GO 11482
11452: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11453: LD_ADDR_VAR 0 3
11457: PUSH
11458: LD_INT 1
11460: PUSH
11461: LD_INT 2
11463: PUSH
11464: LD_INT 3
11466: PUSH
11467: LD_INT 4
11469: PUSH
11470: LD_INT 5
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: ST_TO_ADDR
11480: GO 12411
11482: LD_INT 11
11484: DOUBLE
11485: EQUAL
11486: IFTRUE 11490
11488: GO 11520
11490: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11491: LD_ADDR_VAR 0 3
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: LD_INT 3
11504: PUSH
11505: LD_INT 4
11507: PUSH
11508: LD_INT 5
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: ST_TO_ADDR
11518: GO 12411
11520: LD_INT 4
11522: DOUBLE
11523: EQUAL
11524: IFTRUE 11528
11526: GO 11554
11528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11529: LD_ADDR_VAR 0 3
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: LD_INT 3
11539: PUSH
11540: LD_INT 4
11542: PUSH
11543: LD_INT 5
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: ST_TO_ADDR
11552: GO 12411
11554: LD_INT 5
11556: DOUBLE
11557: EQUAL
11558: IFTRUE 11562
11560: GO 11588
11562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11563: LD_ADDR_VAR 0 3
11567: PUSH
11568: LD_INT 2
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: LD_INT 4
11576: PUSH
11577: LD_INT 5
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: ST_TO_ADDR
11586: GO 12411
11588: LD_INT 9
11590: DOUBLE
11591: EQUAL
11592: IFTRUE 11596
11594: GO 11622
11596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11597: LD_ADDR_VAR 0 3
11601: PUSH
11602: LD_INT 2
11604: PUSH
11605: LD_INT 3
11607: PUSH
11608: LD_INT 4
11610: PUSH
11611: LD_INT 5
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: ST_TO_ADDR
11620: GO 12411
11622: LD_INT 7
11624: DOUBLE
11625: EQUAL
11626: IFTRUE 11630
11628: GO 11656
11630: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11631: LD_ADDR_VAR 0 3
11635: PUSH
11636: LD_INT 2
11638: PUSH
11639: LD_INT 3
11641: PUSH
11642: LD_INT 4
11644: PUSH
11645: LD_INT 5
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: ST_TO_ADDR
11654: GO 12411
11656: LD_INT 12
11658: DOUBLE
11659: EQUAL
11660: IFTRUE 11664
11662: GO 11690
11664: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11665: LD_ADDR_VAR 0 3
11669: PUSH
11670: LD_INT 2
11672: PUSH
11673: LD_INT 3
11675: PUSH
11676: LD_INT 4
11678: PUSH
11679: LD_INT 5
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: ST_TO_ADDR
11688: GO 12411
11690: LD_INT 13
11692: DOUBLE
11693: EQUAL
11694: IFTRUE 11698
11696: GO 11724
11698: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11699: LD_ADDR_VAR 0 3
11703: PUSH
11704: LD_INT 2
11706: PUSH
11707: LD_INT 3
11709: PUSH
11710: LD_INT 4
11712: PUSH
11713: LD_INT 5
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: ST_TO_ADDR
11722: GO 12411
11724: LD_INT 14
11726: DOUBLE
11727: EQUAL
11728: IFTRUE 11732
11730: GO 11750
11732: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11733: LD_ADDR_VAR 0 3
11737: PUSH
11738: LD_INT 4
11740: PUSH
11741: LD_INT 5
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: ST_TO_ADDR
11748: GO 12411
11750: LD_INT 6
11752: DOUBLE
11753: EQUAL
11754: IFTRUE 11758
11756: GO 11776
11758: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11759: LD_ADDR_VAR 0 3
11763: PUSH
11764: LD_INT 4
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: ST_TO_ADDR
11774: GO 12411
11776: LD_INT 10
11778: DOUBLE
11779: EQUAL
11780: IFTRUE 11784
11782: GO 11802
11784: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11785: LD_ADDR_VAR 0 3
11789: PUSH
11790: LD_INT 4
11792: PUSH
11793: LD_INT 5
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: ST_TO_ADDR
11800: GO 12411
11802: LD_INT 22
11804: DOUBLE
11805: EQUAL
11806: IFTRUE 11810
11808: GO 11836
11810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11811: LD_ADDR_VAR 0 3
11815: PUSH
11816: LD_INT 11
11818: PUSH
11819: LD_INT 12
11821: PUSH
11822: LD_INT 13
11824: PUSH
11825: LD_INT 14
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: ST_TO_ADDR
11834: GO 12411
11836: LD_INT 23
11838: DOUBLE
11839: EQUAL
11840: IFTRUE 11844
11842: GO 11870
11844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11845: LD_ADDR_VAR 0 3
11849: PUSH
11850: LD_INT 11
11852: PUSH
11853: LD_INT 12
11855: PUSH
11856: LD_INT 13
11858: PUSH
11859: LD_INT 14
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: ST_TO_ADDR
11868: GO 12411
11870: LD_INT 24
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11904
11878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11879: LD_ADDR_VAR 0 3
11883: PUSH
11884: LD_INT 11
11886: PUSH
11887: LD_INT 12
11889: PUSH
11890: LD_INT 13
11892: PUSH
11893: LD_INT 14
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: ST_TO_ADDR
11902: GO 12411
11904: LD_INT 30
11906: DOUBLE
11907: EQUAL
11908: IFTRUE 11912
11910: GO 11938
11912: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11913: LD_ADDR_VAR 0 3
11917: PUSH
11918: LD_INT 11
11920: PUSH
11921: LD_INT 12
11923: PUSH
11924: LD_INT 13
11926: PUSH
11927: LD_INT 14
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: ST_TO_ADDR
11936: GO 12411
11938: LD_INT 25
11940: DOUBLE
11941: EQUAL
11942: IFTRUE 11946
11944: GO 11964
11946: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11947: LD_ADDR_VAR 0 3
11951: PUSH
11952: LD_INT 13
11954: PUSH
11955: LD_INT 14
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: ST_TO_ADDR
11962: GO 12411
11964: LD_INT 27
11966: DOUBLE
11967: EQUAL
11968: IFTRUE 11972
11970: GO 11990
11972: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
11973: LD_ADDR_VAR 0 3
11977: PUSH
11978: LD_INT 13
11980: PUSH
11981: LD_INT 14
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: ST_TO_ADDR
11988: GO 12411
11990: LD_INT 28
11992: DOUBLE
11993: EQUAL
11994: IFTRUE 11998
11996: GO 12016
11998: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
11999: LD_ADDR_VAR 0 3
12003: PUSH
12004: LD_INT 13
12006: PUSH
12007: LD_INT 14
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: ST_TO_ADDR
12014: GO 12411
12016: LD_INT 29
12018: DOUBLE
12019: EQUAL
12020: IFTRUE 12024
12022: GO 12042
12024: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12025: LD_ADDR_VAR 0 3
12029: PUSH
12030: LD_INT 13
12032: PUSH
12033: LD_INT 14
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: ST_TO_ADDR
12040: GO 12411
12042: LD_INT 31
12044: DOUBLE
12045: EQUAL
12046: IFTRUE 12050
12048: GO 12068
12050: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12051: LD_ADDR_VAR 0 3
12055: PUSH
12056: LD_INT 13
12058: PUSH
12059: LD_INT 14
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: ST_TO_ADDR
12066: GO 12411
12068: LD_INT 26
12070: DOUBLE
12071: EQUAL
12072: IFTRUE 12076
12074: GO 12094
12076: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12077: LD_ADDR_VAR 0 3
12081: PUSH
12082: LD_INT 13
12084: PUSH
12085: LD_INT 14
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: ST_TO_ADDR
12092: GO 12411
12094: LD_INT 42
12096: DOUBLE
12097: EQUAL
12098: IFTRUE 12102
12100: GO 12128
12102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12103: LD_ADDR_VAR 0 3
12107: PUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 22
12113: PUSH
12114: LD_INT 23
12116: PUSH
12117: LD_INT 24
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: ST_TO_ADDR
12126: GO 12411
12128: LD_INT 43
12130: DOUBLE
12131: EQUAL
12132: IFTRUE 12136
12134: GO 12162
12136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12137: LD_ADDR_VAR 0 3
12141: PUSH
12142: LD_INT 21
12144: PUSH
12145: LD_INT 22
12147: PUSH
12148: LD_INT 23
12150: PUSH
12151: LD_INT 24
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: ST_TO_ADDR
12160: GO 12411
12162: LD_INT 44
12164: DOUBLE
12165: EQUAL
12166: IFTRUE 12170
12168: GO 12196
12170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12171: LD_ADDR_VAR 0 3
12175: PUSH
12176: LD_INT 21
12178: PUSH
12179: LD_INT 22
12181: PUSH
12182: LD_INT 23
12184: PUSH
12185: LD_INT 24
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: ST_TO_ADDR
12194: GO 12411
12196: LD_INT 45
12198: DOUBLE
12199: EQUAL
12200: IFTRUE 12204
12202: GO 12230
12204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 22
12215: PUSH
12216: LD_INT 23
12218: PUSH
12219: LD_INT 24
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: ST_TO_ADDR
12228: GO 12411
12230: LD_INT 49
12232: DOUBLE
12233: EQUAL
12234: IFTRUE 12238
12236: GO 12264
12238: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12239: LD_ADDR_VAR 0 3
12243: PUSH
12244: LD_INT 21
12246: PUSH
12247: LD_INT 22
12249: PUSH
12250: LD_INT 23
12252: PUSH
12253: LD_INT 24
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: ST_TO_ADDR
12262: GO 12411
12264: LD_INT 51
12266: DOUBLE
12267: EQUAL
12268: IFTRUE 12272
12270: GO 12298
12272: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12273: LD_ADDR_VAR 0 3
12277: PUSH
12278: LD_INT 21
12280: PUSH
12281: LD_INT 22
12283: PUSH
12284: LD_INT 23
12286: PUSH
12287: LD_INT 24
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: ST_TO_ADDR
12296: GO 12411
12298: LD_INT 52
12300: DOUBLE
12301: EQUAL
12302: IFTRUE 12306
12304: GO 12332
12306: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12307: LD_ADDR_VAR 0 3
12311: PUSH
12312: LD_INT 21
12314: PUSH
12315: LD_INT 22
12317: PUSH
12318: LD_INT 23
12320: PUSH
12321: LD_INT 24
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: ST_TO_ADDR
12330: GO 12411
12332: LD_INT 53
12334: DOUBLE
12335: EQUAL
12336: IFTRUE 12340
12338: GO 12358
12340: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12341: LD_ADDR_VAR 0 3
12345: PUSH
12346: LD_INT 23
12348: PUSH
12349: LD_INT 24
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: ST_TO_ADDR
12356: GO 12411
12358: LD_INT 46
12360: DOUBLE
12361: EQUAL
12362: IFTRUE 12366
12364: GO 12384
12366: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12367: LD_ADDR_VAR 0 3
12371: PUSH
12372: LD_INT 23
12374: PUSH
12375: LD_INT 24
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: ST_TO_ADDR
12382: GO 12411
12384: LD_INT 47
12386: DOUBLE
12387: EQUAL
12388: IFTRUE 12392
12390: GO 12410
12392: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12393: LD_ADDR_VAR 0 3
12397: PUSH
12398: LD_INT 23
12400: PUSH
12401: LD_INT 24
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: ST_TO_ADDR
12408: GO 12411
12410: POP
// result := ( chassis in result ) ;
12411: LD_ADDR_VAR 0 3
12415: PUSH
12416: LD_VAR 0 1
12420: PUSH
12421: LD_VAR 0 3
12425: IN
12426: ST_TO_ADDR
// end ;
12427: LD_VAR 0 3
12431: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12432: LD_INT 0
12434: PPUSH
12435: PPUSH
12436: PPUSH
12437: PPUSH
12438: PPUSH
12439: PPUSH
12440: PPUSH
// result := array ;
12441: LD_ADDR_VAR 0 5
12445: PUSH
12446: LD_VAR 0 1
12450: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12451: LD_VAR 0 1
12455: NOT
12456: PUSH
12457: LD_VAR 0 2
12461: NOT
12462: OR
12463: PUSH
12464: LD_VAR 0 3
12468: NOT
12469: OR
12470: PUSH
12471: LD_VAR 0 2
12475: PUSH
12476: LD_VAR 0 1
12480: GREATER
12481: OR
12482: PUSH
12483: LD_VAR 0 3
12487: PUSH
12488: LD_VAR 0 1
12492: GREATER
12493: OR
12494: IFFALSE 12498
// exit ;
12496: GO 12794
// if direction then
12498: LD_VAR 0 4
12502: IFFALSE 12566
// begin d := 1 ;
12504: LD_ADDR_VAR 0 9
12508: PUSH
12509: LD_INT 1
12511: ST_TO_ADDR
// if i_from > i_to then
12512: LD_VAR 0 2
12516: PUSH
12517: LD_VAR 0 3
12521: GREATER
12522: IFFALSE 12548
// length := ( array - i_from ) + i_to else
12524: LD_ADDR_VAR 0 11
12528: PUSH
12529: LD_VAR 0 1
12533: PUSH
12534: LD_VAR 0 2
12538: MINUS
12539: PUSH
12540: LD_VAR 0 3
12544: PLUS
12545: ST_TO_ADDR
12546: GO 12564
// length := i_to - i_from ;
12548: LD_ADDR_VAR 0 11
12552: PUSH
12553: LD_VAR 0 3
12557: PUSH
12558: LD_VAR 0 2
12562: MINUS
12563: ST_TO_ADDR
// end else
12564: GO 12627
// begin d := - 1 ;
12566: LD_ADDR_VAR 0 9
12570: PUSH
12571: LD_INT 1
12573: NEG
12574: ST_TO_ADDR
// if i_from > i_to then
12575: LD_VAR 0 2
12579: PUSH
12580: LD_VAR 0 3
12584: GREATER
12585: IFFALSE 12605
// length := i_from - i_to else
12587: LD_ADDR_VAR 0 11
12591: PUSH
12592: LD_VAR 0 2
12596: PUSH
12597: LD_VAR 0 3
12601: MINUS
12602: ST_TO_ADDR
12603: GO 12627
// length := ( array - i_to ) + i_from ;
12605: LD_ADDR_VAR 0 11
12609: PUSH
12610: LD_VAR 0 1
12614: PUSH
12615: LD_VAR 0 3
12619: MINUS
12620: PUSH
12621: LD_VAR 0 2
12625: PLUS
12626: ST_TO_ADDR
// end ; if not length then
12627: LD_VAR 0 11
12631: NOT
12632: IFFALSE 12636
// exit ;
12634: GO 12794
// tmp := array ;
12636: LD_ADDR_VAR 0 10
12640: PUSH
12641: LD_VAR 0 1
12645: ST_TO_ADDR
// for i = 1 to length do
12646: LD_ADDR_VAR 0 6
12650: PUSH
12651: DOUBLE
12652: LD_INT 1
12654: DEC
12655: ST_TO_ADDR
12656: LD_VAR 0 11
12660: PUSH
12661: FOR_TO
12662: IFFALSE 12782
// begin for j = 1 to array do
12664: LD_ADDR_VAR 0 7
12668: PUSH
12669: DOUBLE
12670: LD_INT 1
12672: DEC
12673: ST_TO_ADDR
12674: LD_VAR 0 1
12678: PUSH
12679: FOR_TO
12680: IFFALSE 12768
// begin k := j + d ;
12682: LD_ADDR_VAR 0 8
12686: PUSH
12687: LD_VAR 0 7
12691: PUSH
12692: LD_VAR 0 9
12696: PLUS
12697: ST_TO_ADDR
// if k > array then
12698: LD_VAR 0 8
12702: PUSH
12703: LD_VAR 0 1
12707: GREATER
12708: IFFALSE 12718
// k := 1 ;
12710: LD_ADDR_VAR 0 8
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// if not k then
12718: LD_VAR 0 8
12722: NOT
12723: IFFALSE 12735
// k := array ;
12725: LD_ADDR_VAR 0 8
12729: PUSH
12730: LD_VAR 0 1
12734: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12735: LD_ADDR_VAR 0 10
12739: PUSH
12740: LD_VAR 0 10
12744: PPUSH
12745: LD_VAR 0 8
12749: PPUSH
12750: LD_VAR 0 1
12754: PUSH
12755: LD_VAR 0 7
12759: ARRAY
12760: PPUSH
12761: CALL_OW 1
12765: ST_TO_ADDR
// end ;
12766: GO 12679
12768: POP
12769: POP
// array := tmp ;
12770: LD_ADDR_VAR 0 1
12774: PUSH
12775: LD_VAR 0 10
12779: ST_TO_ADDR
// end ;
12780: GO 12661
12782: POP
12783: POP
// result := array ;
12784: LD_ADDR_VAR 0 5
12788: PUSH
12789: LD_VAR 0 1
12793: ST_TO_ADDR
// end ;
12794: LD_VAR 0 5
12798: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12799: LD_INT 0
12801: PPUSH
12802: PPUSH
// result := 0 ;
12803: LD_ADDR_VAR 0 3
12807: PUSH
12808: LD_INT 0
12810: ST_TO_ADDR
// if not array or not value in array then
12811: LD_VAR 0 1
12815: NOT
12816: PUSH
12817: LD_VAR 0 2
12821: PUSH
12822: LD_VAR 0 1
12826: IN
12827: NOT
12828: OR
12829: IFFALSE 12833
// exit ;
12831: GO 12887
// for i = 1 to array do
12833: LD_ADDR_VAR 0 4
12837: PUSH
12838: DOUBLE
12839: LD_INT 1
12841: DEC
12842: ST_TO_ADDR
12843: LD_VAR 0 1
12847: PUSH
12848: FOR_TO
12849: IFFALSE 12885
// if value = array [ i ] then
12851: LD_VAR 0 2
12855: PUSH
12856: LD_VAR 0 1
12860: PUSH
12861: LD_VAR 0 4
12865: ARRAY
12866: EQUAL
12867: IFFALSE 12883
// begin result := i ;
12869: LD_ADDR_VAR 0 3
12873: PUSH
12874: LD_VAR 0 4
12878: ST_TO_ADDR
// exit ;
12879: POP
12880: POP
12881: GO 12887
// end ;
12883: GO 12848
12885: POP
12886: POP
// end ;
12887: LD_VAR 0 3
12891: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12892: LD_INT 0
12894: PPUSH
// vc_chassis := chassis ;
12895: LD_ADDR_OWVAR 37
12899: PUSH
12900: LD_VAR 0 1
12904: ST_TO_ADDR
// vc_engine := engine ;
12905: LD_ADDR_OWVAR 39
12909: PUSH
12910: LD_VAR 0 2
12914: ST_TO_ADDR
// vc_control := control ;
12915: LD_ADDR_OWVAR 38
12919: PUSH
12920: LD_VAR 0 3
12924: ST_TO_ADDR
// vc_weapon := weapon ;
12925: LD_ADDR_OWVAR 40
12929: PUSH
12930: LD_VAR 0 4
12934: ST_TO_ADDR
// vc_fuel_battery := fuel ;
12935: LD_ADDR_OWVAR 41
12939: PUSH
12940: LD_VAR 0 5
12944: ST_TO_ADDR
// end ;
12945: LD_VAR 0 6
12949: RET
// export function WantPlant ( unit ) ; var task ; begin
12950: LD_INT 0
12952: PPUSH
12953: PPUSH
// result := false ;
12954: LD_ADDR_VAR 0 2
12958: PUSH
12959: LD_INT 0
12961: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
12962: LD_ADDR_VAR 0 3
12966: PUSH
12967: LD_VAR 0 1
12971: PPUSH
12972: CALL_OW 437
12976: ST_TO_ADDR
// if task then
12977: LD_VAR 0 3
12981: IFFALSE 13009
// if task [ 1 ] [ 1 ] = p then
12983: LD_VAR 0 3
12987: PUSH
12988: LD_INT 1
12990: ARRAY
12991: PUSH
12992: LD_INT 1
12994: ARRAY
12995: PUSH
12996: LD_STRING p
12998: EQUAL
12999: IFFALSE 13009
// result := true ;
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 1
13008: ST_TO_ADDR
// end ;
13009: LD_VAR 0 2
13013: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13014: LD_INT 0
13016: PPUSH
13017: PPUSH
13018: PPUSH
13019: PPUSH
// if pos < 1 then
13020: LD_VAR 0 2
13024: PUSH
13025: LD_INT 1
13027: LESS
13028: IFFALSE 13032
// exit ;
13030: GO 13335
// if pos = 1 then
13032: LD_VAR 0 2
13036: PUSH
13037: LD_INT 1
13039: EQUAL
13040: IFFALSE 13073
// result := Replace ( arr , pos [ 1 ] , value ) else
13042: LD_ADDR_VAR 0 4
13046: PUSH
13047: LD_VAR 0 1
13051: PPUSH
13052: LD_VAR 0 2
13056: PUSH
13057: LD_INT 1
13059: ARRAY
13060: PPUSH
13061: LD_VAR 0 3
13065: PPUSH
13066: CALL_OW 1
13070: ST_TO_ADDR
13071: GO 13335
// begin tmp := arr ;
13073: LD_ADDR_VAR 0 6
13077: PUSH
13078: LD_VAR 0 1
13082: ST_TO_ADDR
// s_arr := [ tmp ] ;
13083: LD_ADDR_VAR 0 7
13087: PUSH
13088: LD_VAR 0 6
13092: PUSH
13093: EMPTY
13094: LIST
13095: ST_TO_ADDR
// for i = 1 to pos - 1 do
13096: LD_ADDR_VAR 0 5
13100: PUSH
13101: DOUBLE
13102: LD_INT 1
13104: DEC
13105: ST_TO_ADDR
13106: LD_VAR 0 2
13110: PUSH
13111: LD_INT 1
13113: MINUS
13114: PUSH
13115: FOR_TO
13116: IFFALSE 13161
// begin tmp := tmp [ pos [ i ] ] ;
13118: LD_ADDR_VAR 0 6
13122: PUSH
13123: LD_VAR 0 6
13127: PUSH
13128: LD_VAR 0 2
13132: PUSH
13133: LD_VAR 0 5
13137: ARRAY
13138: ARRAY
13139: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13140: LD_ADDR_VAR 0 7
13144: PUSH
13145: LD_VAR 0 7
13149: PUSH
13150: LD_VAR 0 6
13154: PUSH
13155: EMPTY
13156: LIST
13157: ADD
13158: ST_TO_ADDR
// end ;
13159: GO 13115
13161: POP
13162: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13163: LD_ADDR_VAR 0 6
13167: PUSH
13168: LD_VAR 0 6
13172: PPUSH
13173: LD_VAR 0 2
13177: PUSH
13178: LD_VAR 0 2
13182: ARRAY
13183: PPUSH
13184: LD_VAR 0 3
13188: PPUSH
13189: CALL_OW 1
13193: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13194: LD_ADDR_VAR 0 7
13198: PUSH
13199: LD_VAR 0 7
13203: PPUSH
13204: LD_VAR 0 7
13208: PPUSH
13209: LD_VAR 0 6
13213: PPUSH
13214: CALL_OW 1
13218: ST_TO_ADDR
// for i = s_arr downto 2 do
13219: LD_ADDR_VAR 0 5
13223: PUSH
13224: DOUBLE
13225: LD_VAR 0 7
13229: INC
13230: ST_TO_ADDR
13231: LD_INT 2
13233: PUSH
13234: FOR_DOWNTO
13235: IFFALSE 13319
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13237: LD_ADDR_VAR 0 6
13241: PUSH
13242: LD_VAR 0 7
13246: PUSH
13247: LD_VAR 0 5
13251: PUSH
13252: LD_INT 1
13254: MINUS
13255: ARRAY
13256: PPUSH
13257: LD_VAR 0 2
13261: PUSH
13262: LD_VAR 0 5
13266: PUSH
13267: LD_INT 1
13269: MINUS
13270: ARRAY
13271: PPUSH
13272: LD_VAR 0 7
13276: PUSH
13277: LD_VAR 0 5
13281: ARRAY
13282: PPUSH
13283: CALL_OW 1
13287: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13288: LD_ADDR_VAR 0 7
13292: PUSH
13293: LD_VAR 0 7
13297: PPUSH
13298: LD_VAR 0 5
13302: PUSH
13303: LD_INT 1
13305: MINUS
13306: PPUSH
13307: LD_VAR 0 6
13311: PPUSH
13312: CALL_OW 1
13316: ST_TO_ADDR
// end ;
13317: GO 13234
13319: POP
13320: POP
// result := s_arr [ 1 ] ;
13321: LD_ADDR_VAR 0 4
13325: PUSH
13326: LD_VAR 0 7
13330: PUSH
13331: LD_INT 1
13333: ARRAY
13334: ST_TO_ADDR
// end ; end ;
13335: LD_VAR 0 4
13339: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13340: LD_INT 0
13342: PPUSH
13343: PPUSH
// if not list then
13344: LD_VAR 0 1
13348: NOT
13349: IFFALSE 13353
// exit ;
13351: GO 13444
// i := list [ pos1 ] ;
13353: LD_ADDR_VAR 0 5
13357: PUSH
13358: LD_VAR 0 1
13362: PUSH
13363: LD_VAR 0 2
13367: ARRAY
13368: ST_TO_ADDR
// if not i then
13369: LD_VAR 0 5
13373: NOT
13374: IFFALSE 13378
// exit ;
13376: GO 13444
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13378: LD_ADDR_VAR 0 1
13382: PUSH
13383: LD_VAR 0 1
13387: PPUSH
13388: LD_VAR 0 2
13392: PPUSH
13393: LD_VAR 0 1
13397: PUSH
13398: LD_VAR 0 3
13402: ARRAY
13403: PPUSH
13404: CALL_OW 1
13408: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13409: LD_ADDR_VAR 0 1
13413: PUSH
13414: LD_VAR 0 1
13418: PPUSH
13419: LD_VAR 0 3
13423: PPUSH
13424: LD_VAR 0 5
13428: PPUSH
13429: CALL_OW 1
13433: ST_TO_ADDR
// result := list ;
13434: LD_ADDR_VAR 0 4
13438: PUSH
13439: LD_VAR 0 1
13443: ST_TO_ADDR
// end ;
13444: LD_VAR 0 4
13448: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13449: LD_INT 0
13451: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13452: LD_ADDR_VAR 0 5
13456: PUSH
13457: LD_VAR 0 1
13461: PPUSH
13462: CALL_OW 250
13466: PPUSH
13467: LD_VAR 0 1
13471: PPUSH
13472: CALL_OW 251
13476: PPUSH
13477: LD_VAR 0 2
13481: PPUSH
13482: LD_VAR 0 3
13486: PPUSH
13487: LD_VAR 0 4
13491: PPUSH
13492: CALL 13502 0 5
13496: ST_TO_ADDR
// end ;
13497: LD_VAR 0 5
13501: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13502: LD_INT 0
13504: PPUSH
13505: PPUSH
13506: PPUSH
13507: PPUSH
// if not list then
13508: LD_VAR 0 3
13512: NOT
13513: IFFALSE 13517
// exit ;
13515: GO 13905
// result := [ ] ;
13517: LD_ADDR_VAR 0 6
13521: PUSH
13522: EMPTY
13523: ST_TO_ADDR
// for i in list do
13524: LD_ADDR_VAR 0 7
13528: PUSH
13529: LD_VAR 0 3
13533: PUSH
13534: FOR_IN
13535: IFFALSE 13737
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13537: LD_ADDR_VAR 0 9
13541: PUSH
13542: LD_VAR 0 7
13546: PPUSH
13547: LD_VAR 0 1
13551: PPUSH
13552: LD_VAR 0 2
13556: PPUSH
13557: CALL_OW 297
13561: ST_TO_ADDR
// if not result then
13562: LD_VAR 0 6
13566: NOT
13567: IFFALSE 13593
// result := [ [ i , tmp ] ] else
13569: LD_ADDR_VAR 0 6
13573: PUSH
13574: LD_VAR 0 7
13578: PUSH
13579: LD_VAR 0 9
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: ST_TO_ADDR
13591: GO 13735
// begin if result [ result ] [ 2 ] < tmp then
13593: LD_VAR 0 6
13597: PUSH
13598: LD_VAR 0 6
13602: ARRAY
13603: PUSH
13604: LD_INT 2
13606: ARRAY
13607: PUSH
13608: LD_VAR 0 9
13612: LESS
13613: IFFALSE 13655
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13615: LD_ADDR_VAR 0 6
13619: PUSH
13620: LD_VAR 0 6
13624: PPUSH
13625: LD_VAR 0 6
13629: PUSH
13630: LD_INT 1
13632: PLUS
13633: PPUSH
13634: LD_VAR 0 7
13638: PUSH
13639: LD_VAR 0 9
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 2
13652: ST_TO_ADDR
13653: GO 13735
// for j = 1 to result do
13655: LD_ADDR_VAR 0 8
13659: PUSH
13660: DOUBLE
13661: LD_INT 1
13663: DEC
13664: ST_TO_ADDR
13665: LD_VAR 0 6
13669: PUSH
13670: FOR_TO
13671: IFFALSE 13733
// begin if tmp < result [ j ] [ 2 ] then
13673: LD_VAR 0 9
13677: PUSH
13678: LD_VAR 0 6
13682: PUSH
13683: LD_VAR 0 8
13687: ARRAY
13688: PUSH
13689: LD_INT 2
13691: ARRAY
13692: LESS
13693: IFFALSE 13731
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13695: LD_ADDR_VAR 0 6
13699: PUSH
13700: LD_VAR 0 6
13704: PPUSH
13705: LD_VAR 0 8
13709: PPUSH
13710: LD_VAR 0 7
13714: PUSH
13715: LD_VAR 0 9
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PPUSH
13724: CALL_OW 2
13728: ST_TO_ADDR
// break ;
13729: GO 13733
// end ; end ;
13731: GO 13670
13733: POP
13734: POP
// end ; end ;
13735: GO 13534
13737: POP
13738: POP
// if result and not asc then
13739: LD_VAR 0 6
13743: PUSH
13744: LD_VAR 0 4
13748: NOT
13749: AND
13750: IFFALSE 13825
// begin tmp := result ;
13752: LD_ADDR_VAR 0 9
13756: PUSH
13757: LD_VAR 0 6
13761: ST_TO_ADDR
// for i = tmp downto 1 do
13762: LD_ADDR_VAR 0 7
13766: PUSH
13767: DOUBLE
13768: LD_VAR 0 9
13772: INC
13773: ST_TO_ADDR
13774: LD_INT 1
13776: PUSH
13777: FOR_DOWNTO
13778: IFFALSE 13823
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13780: LD_ADDR_VAR 0 6
13784: PUSH
13785: LD_VAR 0 6
13789: PPUSH
13790: LD_VAR 0 9
13794: PUSH
13795: LD_VAR 0 7
13799: MINUS
13800: PUSH
13801: LD_INT 1
13803: PLUS
13804: PPUSH
13805: LD_VAR 0 9
13809: PUSH
13810: LD_VAR 0 7
13814: ARRAY
13815: PPUSH
13816: CALL_OW 1
13820: ST_TO_ADDR
13821: GO 13777
13823: POP
13824: POP
// end ; tmp := [ ] ;
13825: LD_ADDR_VAR 0 9
13829: PUSH
13830: EMPTY
13831: ST_TO_ADDR
// if mode then
13832: LD_VAR 0 5
13836: IFFALSE 13905
// begin for i = 1 to result do
13838: LD_ADDR_VAR 0 7
13842: PUSH
13843: DOUBLE
13844: LD_INT 1
13846: DEC
13847: ST_TO_ADDR
13848: LD_VAR 0 6
13852: PUSH
13853: FOR_TO
13854: IFFALSE 13893
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13856: LD_ADDR_VAR 0 9
13860: PUSH
13861: LD_VAR 0 9
13865: PPUSH
13866: LD_VAR 0 7
13870: PPUSH
13871: LD_VAR 0 6
13875: PUSH
13876: LD_VAR 0 7
13880: ARRAY
13881: PUSH
13882: LD_INT 1
13884: ARRAY
13885: PPUSH
13886: CALL_OW 1
13890: ST_TO_ADDR
13891: GO 13853
13893: POP
13894: POP
// result := tmp ;
13895: LD_ADDR_VAR 0 6
13899: PUSH
13900: LD_VAR 0 9
13904: ST_TO_ADDR
// end ; end ;
13905: LD_VAR 0 6
13909: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13910: LD_INT 0
13912: PPUSH
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13918: LD_ADDR_VAR 0 5
13922: PUSH
13923: LD_INT 0
13925: PUSH
13926: LD_INT 0
13928: PUSH
13929: LD_INT 0
13931: PUSH
13932: EMPTY
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: ST_TO_ADDR
// if not x or not y then
13940: LD_VAR 0 2
13944: NOT
13945: PUSH
13946: LD_VAR 0 3
13950: NOT
13951: OR
13952: IFFALSE 13956
// exit ;
13954: GO 15602
// if not range then
13956: LD_VAR 0 4
13960: NOT
13961: IFFALSE 13971
// range := 10 ;
13963: LD_ADDR_VAR 0 4
13967: PUSH
13968: LD_INT 10
13970: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13971: LD_ADDR_VAR 0 8
13975: PUSH
13976: LD_INT 81
13978: PUSH
13979: LD_VAR 0 1
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 92
13990: PUSH
13991: LD_VAR 0 2
13995: PUSH
13996: LD_VAR 0 3
14000: PUSH
14001: LD_VAR 0 4
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 3
14014: PUSH
14015: LD_INT 21
14017: PUSH
14018: LD_INT 3
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: ST_TO_ADDR
// if not tmp then
14039: LD_VAR 0 8
14043: NOT
14044: IFFALSE 14048
// exit ;
14046: GO 15602
// for i in tmp do
14048: LD_ADDR_VAR 0 6
14052: PUSH
14053: LD_VAR 0 8
14057: PUSH
14058: FOR_IN
14059: IFFALSE 15577
// begin points := [ 0 , 0 , 0 ] ;
14061: LD_ADDR_VAR 0 9
14065: PUSH
14066: LD_INT 0
14068: PUSH
14069: LD_INT 0
14071: PUSH
14072: LD_INT 0
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: LIST
14079: ST_TO_ADDR
// bpoints := 1 ;
14080: LD_ADDR_VAR 0 10
14084: PUSH
14085: LD_INT 1
14087: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14088: LD_VAR 0 6
14092: PPUSH
14093: CALL_OW 247
14097: PUSH
14098: LD_INT 1
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14684
14106: POP
// begin if GetClass ( i ) = 1 then
14107: LD_VAR 0 6
14111: PPUSH
14112: CALL_OW 257
14116: PUSH
14117: LD_INT 1
14119: EQUAL
14120: IFFALSE 14141
// points := [ 10 , 5 , 3 ] ;
14122: LD_ADDR_VAR 0 9
14126: PUSH
14127: LD_INT 10
14129: PUSH
14130: LD_INT 5
14132: PUSH
14133: LD_INT 3
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14141: LD_VAR 0 6
14145: PPUSH
14146: CALL_OW 257
14150: PUSH
14151: LD_INT 2
14153: PUSH
14154: LD_INT 3
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: IN
14165: IFFALSE 14186
// points := [ 3 , 2 , 1 ] ;
14167: LD_ADDR_VAR 0 9
14171: PUSH
14172: LD_INT 3
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: LD_INT 1
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14186: LD_VAR 0 6
14190: PPUSH
14191: CALL_OW 257
14195: PUSH
14196: LD_INT 5
14198: EQUAL
14199: IFFALSE 14220
// points := [ 130 , 5 , 2 ] ;
14201: LD_ADDR_VAR 0 9
14205: PUSH
14206: LD_INT 130
14208: PUSH
14209: LD_INT 5
14211: PUSH
14212: LD_INT 2
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: LIST
14219: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14220: LD_VAR 0 6
14224: PPUSH
14225: CALL_OW 257
14229: PUSH
14230: LD_INT 8
14232: EQUAL
14233: IFFALSE 14254
// points := [ 35 , 35 , 30 ] ;
14235: LD_ADDR_VAR 0 9
14239: PUSH
14240: LD_INT 35
14242: PUSH
14243: LD_INT 35
14245: PUSH
14246: LD_INT 30
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14254: LD_VAR 0 6
14258: PPUSH
14259: CALL_OW 257
14263: PUSH
14264: LD_INT 9
14266: EQUAL
14267: IFFALSE 14288
// points := [ 20 , 55 , 40 ] ;
14269: LD_ADDR_VAR 0 9
14273: PUSH
14274: LD_INT 20
14276: PUSH
14277: LD_INT 55
14279: PUSH
14280: LD_INT 40
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14288: LD_VAR 0 6
14292: PPUSH
14293: CALL_OW 257
14297: PUSH
14298: LD_INT 12
14300: PUSH
14301: LD_INT 16
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: IN
14308: IFFALSE 14329
// points := [ 5 , 3 , 2 ] ;
14310: LD_ADDR_VAR 0 9
14314: PUSH
14315: LD_INT 5
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: LD_INT 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14329: LD_VAR 0 6
14333: PPUSH
14334: CALL_OW 257
14338: PUSH
14339: LD_INT 17
14341: EQUAL
14342: IFFALSE 14363
// points := [ 100 , 50 , 75 ] ;
14344: LD_ADDR_VAR 0 9
14348: PUSH
14349: LD_INT 100
14351: PUSH
14352: LD_INT 50
14354: PUSH
14355: LD_INT 75
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: LIST
14362: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14363: LD_VAR 0 6
14367: PPUSH
14368: CALL_OW 257
14372: PUSH
14373: LD_INT 15
14375: EQUAL
14376: IFFALSE 14397
// points := [ 10 , 5 , 3 ] ;
14378: LD_ADDR_VAR 0 9
14382: PUSH
14383: LD_INT 10
14385: PUSH
14386: LD_INT 5
14388: PUSH
14389: LD_INT 3
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14397: LD_VAR 0 6
14401: PPUSH
14402: CALL_OW 257
14406: PUSH
14407: LD_INT 14
14409: EQUAL
14410: IFFALSE 14431
// points := [ 10 , 0 , 0 ] ;
14412: LD_ADDR_VAR 0 9
14416: PUSH
14417: LD_INT 10
14419: PUSH
14420: LD_INT 0
14422: PUSH
14423: LD_INT 0
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14431: LD_VAR 0 6
14435: PPUSH
14436: CALL_OW 257
14440: PUSH
14441: LD_INT 11
14443: EQUAL
14444: IFFALSE 14465
// points := [ 30 , 10 , 5 ] ;
14446: LD_ADDR_VAR 0 9
14450: PUSH
14451: LD_INT 30
14453: PUSH
14454: LD_INT 10
14456: PUSH
14457: LD_INT 5
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: LIST
14464: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14465: LD_VAR 0 1
14469: PPUSH
14470: LD_INT 5
14472: PPUSH
14473: CALL_OW 321
14477: PUSH
14478: LD_INT 2
14480: EQUAL
14481: IFFALSE 14498
// bpoints := bpoints * 1.8 ;
14483: LD_ADDR_VAR 0 10
14487: PUSH
14488: LD_VAR 0 10
14492: PUSH
14493: LD_REAL  1.80000000000000E+0000
14496: MUL
14497: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14498: LD_VAR 0 6
14502: PPUSH
14503: CALL_OW 257
14507: PUSH
14508: LD_INT 1
14510: PUSH
14511: LD_INT 2
14513: PUSH
14514: LD_INT 3
14516: PUSH
14517: LD_INT 4
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: IN
14526: PUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: LD_INT 51
14534: PPUSH
14535: CALL_OW 321
14539: PUSH
14540: LD_INT 2
14542: EQUAL
14543: AND
14544: IFFALSE 14561
// bpoints := bpoints * 1.2 ;
14546: LD_ADDR_VAR 0 10
14550: PUSH
14551: LD_VAR 0 10
14555: PUSH
14556: LD_REAL  1.20000000000000E+0000
14559: MUL
14560: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14561: LD_VAR 0 6
14565: PPUSH
14566: CALL_OW 257
14570: PUSH
14571: LD_INT 5
14573: PUSH
14574: LD_INT 7
14576: PUSH
14577: LD_INT 9
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: IN
14585: PUSH
14586: LD_VAR 0 1
14590: PPUSH
14591: LD_INT 52
14593: PPUSH
14594: CALL_OW 321
14598: PUSH
14599: LD_INT 2
14601: EQUAL
14602: AND
14603: IFFALSE 14620
// bpoints := bpoints * 1.5 ;
14605: LD_ADDR_VAR 0 10
14609: PUSH
14610: LD_VAR 0 10
14614: PUSH
14615: LD_REAL  1.50000000000000E+0000
14618: MUL
14619: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14620: LD_VAR 0 1
14624: PPUSH
14625: LD_INT 66
14627: PPUSH
14628: CALL_OW 321
14632: PUSH
14633: LD_INT 2
14635: EQUAL
14636: IFFALSE 14653
// bpoints := bpoints * 1.1 ;
14638: LD_ADDR_VAR 0 10
14642: PUSH
14643: LD_VAR 0 10
14647: PUSH
14648: LD_REAL  1.10000000000000E+0000
14651: MUL
14652: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14653: LD_ADDR_VAR 0 10
14657: PUSH
14658: LD_VAR 0 10
14662: PUSH
14663: LD_VAR 0 6
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 259
14675: PUSH
14676: LD_REAL  1.15000000000000E+0000
14679: MUL
14680: MUL
14681: ST_TO_ADDR
// end ; unit_vehicle :
14682: GO 15506
14684: LD_INT 2
14686: DOUBLE
14687: EQUAL
14688: IFTRUE 14692
14690: GO 15494
14692: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14693: LD_VAR 0 6
14697: PPUSH
14698: CALL_OW 264
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 42
14708: PUSH
14709: LD_INT 24
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: IN
14717: IFFALSE 14738
// points := [ 25 , 5 , 3 ] ;
14719: LD_ADDR_VAR 0 9
14723: PUSH
14724: LD_INT 25
14726: PUSH
14727: LD_INT 5
14729: PUSH
14730: LD_INT 3
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14738: LD_VAR 0 6
14742: PPUSH
14743: CALL_OW 264
14747: PUSH
14748: LD_INT 4
14750: PUSH
14751: LD_INT 43
14753: PUSH
14754: LD_INT 25
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: IN
14762: IFFALSE 14783
// points := [ 40 , 15 , 5 ] ;
14764: LD_ADDR_VAR 0 9
14768: PUSH
14769: LD_INT 40
14771: PUSH
14772: LD_INT 15
14774: PUSH
14775: LD_INT 5
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: LIST
14782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14783: LD_VAR 0 6
14787: PPUSH
14788: CALL_OW 264
14792: PUSH
14793: LD_INT 3
14795: PUSH
14796: LD_INT 23
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: IN
14803: IFFALSE 14824
// points := [ 7 , 25 , 8 ] ;
14805: LD_ADDR_VAR 0 9
14809: PUSH
14810: LD_INT 7
14812: PUSH
14813: LD_INT 25
14815: PUSH
14816: LD_INT 8
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: LIST
14823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14824: LD_VAR 0 6
14828: PPUSH
14829: CALL_OW 264
14833: PUSH
14834: LD_INT 5
14836: PUSH
14837: LD_INT 27
14839: PUSH
14840: LD_INT 44
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: IN
14848: IFFALSE 14869
// points := [ 14 , 50 , 16 ] ;
14850: LD_ADDR_VAR 0 9
14854: PUSH
14855: LD_INT 14
14857: PUSH
14858: LD_INT 50
14860: PUSH
14861: LD_INT 16
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: LIST
14868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14869: LD_VAR 0 6
14873: PPUSH
14874: CALL_OW 264
14878: PUSH
14879: LD_INT 6
14881: PUSH
14882: LD_INT 46
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: IN
14889: IFFALSE 14910
// points := [ 32 , 120 , 70 ] ;
14891: LD_ADDR_VAR 0 9
14895: PUSH
14896: LD_INT 32
14898: PUSH
14899: LD_INT 120
14901: PUSH
14902: LD_INT 70
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
14910: LD_VAR 0 6
14914: PPUSH
14915: CALL_OW 264
14919: PUSH
14920: LD_INT 7
14922: PUSH
14923: LD_INT 28
14925: PUSH
14926: LD_INT 45
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: LIST
14933: IN
14934: IFFALSE 14955
// points := [ 35 , 20 , 45 ] ;
14936: LD_ADDR_VAR 0 9
14940: PUSH
14941: LD_INT 35
14943: PUSH
14944: LD_INT 20
14946: PUSH
14947: LD_INT 45
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: LIST
14954: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
14955: LD_VAR 0 6
14959: PPUSH
14960: CALL_OW 264
14964: PUSH
14965: LD_INT 47
14967: PUSH
14968: EMPTY
14969: LIST
14970: IN
14971: IFFALSE 14992
// points := [ 67 , 45 , 75 ] ;
14973: LD_ADDR_VAR 0 9
14977: PUSH
14978: LD_INT 67
14980: PUSH
14981: LD_INT 45
14983: PUSH
14984: LD_INT 75
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
14992: LD_VAR 0 6
14996: PPUSH
14997: CALL_OW 264
15001: PUSH
15002: LD_INT 26
15004: PUSH
15005: EMPTY
15006: LIST
15007: IN
15008: IFFALSE 15029
// points := [ 120 , 30 , 80 ] ;
15010: LD_ADDR_VAR 0 9
15014: PUSH
15015: LD_INT 120
15017: PUSH
15018: LD_INT 30
15020: PUSH
15021: LD_INT 80
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: LIST
15028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15029: LD_VAR 0 6
15033: PPUSH
15034: CALL_OW 264
15038: PUSH
15039: LD_INT 22
15041: PUSH
15042: EMPTY
15043: LIST
15044: IN
15045: IFFALSE 15066
// points := [ 40 , 1 , 1 ] ;
15047: LD_ADDR_VAR 0 9
15051: PUSH
15052: LD_INT 40
15054: PUSH
15055: LD_INT 1
15057: PUSH
15058: LD_INT 1
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15066: LD_VAR 0 6
15070: PPUSH
15071: CALL_OW 264
15075: PUSH
15076: LD_INT 29
15078: PUSH
15079: EMPTY
15080: LIST
15081: IN
15082: IFFALSE 15103
// points := [ 70 , 200 , 400 ] ;
15084: LD_ADDR_VAR 0 9
15088: PUSH
15089: LD_INT 70
15091: PUSH
15092: LD_INT 200
15094: PUSH
15095: LD_INT 400
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15103: LD_VAR 0 6
15107: PPUSH
15108: CALL_OW 264
15112: PUSH
15113: LD_INT 14
15115: PUSH
15116: LD_INT 53
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: IN
15123: IFFALSE 15144
// points := [ 40 , 10 , 20 ] ;
15125: LD_ADDR_VAR 0 9
15129: PUSH
15130: LD_INT 40
15132: PUSH
15133: LD_INT 10
15135: PUSH
15136: LD_INT 20
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15144: LD_VAR 0 6
15148: PPUSH
15149: CALL_OW 264
15153: PUSH
15154: LD_INT 9
15156: PUSH
15157: EMPTY
15158: LIST
15159: IN
15160: IFFALSE 15181
// points := [ 5 , 70 , 20 ] ;
15162: LD_ADDR_VAR 0 9
15166: PUSH
15167: LD_INT 5
15169: PUSH
15170: LD_INT 70
15172: PUSH
15173: LD_INT 20
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: LIST
15180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15181: LD_VAR 0 6
15185: PPUSH
15186: CALL_OW 264
15190: PUSH
15191: LD_INT 10
15193: PUSH
15194: EMPTY
15195: LIST
15196: IN
15197: IFFALSE 15218
// points := [ 35 , 110 , 70 ] ;
15199: LD_ADDR_VAR 0 9
15203: PUSH
15204: LD_INT 35
15206: PUSH
15207: LD_INT 110
15209: PUSH
15210: LD_INT 70
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: LIST
15217: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15218: LD_VAR 0 6
15222: PPUSH
15223: CALL_OW 265
15227: PUSH
15228: LD_INT 25
15230: EQUAL
15231: IFFALSE 15252
// points := [ 80 , 65 , 100 ] ;
15233: LD_ADDR_VAR 0 9
15237: PUSH
15238: LD_INT 80
15240: PUSH
15241: LD_INT 65
15243: PUSH
15244: LD_INT 100
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: LIST
15251: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15252: LD_VAR 0 6
15256: PPUSH
15257: CALL_OW 263
15261: PUSH
15262: LD_INT 1
15264: EQUAL
15265: IFFALSE 15300
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15267: LD_ADDR_VAR 0 10
15271: PUSH
15272: LD_VAR 0 10
15276: PUSH
15277: LD_VAR 0 6
15281: PPUSH
15282: CALL_OW 311
15286: PPUSH
15287: LD_INT 3
15289: PPUSH
15290: CALL_OW 259
15294: PUSH
15295: LD_INT 4
15297: MUL
15298: MUL
15299: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15300: LD_VAR 0 6
15304: PPUSH
15305: CALL_OW 263
15309: PUSH
15310: LD_INT 2
15312: EQUAL
15313: IFFALSE 15364
// begin j := IsControledBy ( i ) ;
15315: LD_ADDR_VAR 0 7
15319: PUSH
15320: LD_VAR 0 6
15324: PPUSH
15325: CALL_OW 312
15329: ST_TO_ADDR
// if j then
15330: LD_VAR 0 7
15334: IFFALSE 15364
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15336: LD_ADDR_VAR 0 10
15340: PUSH
15341: LD_VAR 0 10
15345: PUSH
15346: LD_VAR 0 7
15350: PPUSH
15351: LD_INT 3
15353: PPUSH
15354: CALL_OW 259
15358: PUSH
15359: LD_INT 3
15361: MUL
15362: MUL
15363: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15364: LD_VAR 0 6
15368: PPUSH
15369: CALL_OW 264
15373: PUSH
15374: LD_INT 5
15376: PUSH
15377: LD_INT 6
15379: PUSH
15380: LD_INT 46
15382: PUSH
15383: LD_INT 44
15385: PUSH
15386: LD_INT 47
15388: PUSH
15389: LD_INT 45
15391: PUSH
15392: LD_INT 28
15394: PUSH
15395: LD_INT 7
15397: PUSH
15398: LD_INT 27
15400: PUSH
15401: LD_INT 29
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: IN
15416: PUSH
15417: LD_VAR 0 1
15421: PPUSH
15422: LD_INT 52
15424: PPUSH
15425: CALL_OW 321
15429: PUSH
15430: LD_INT 2
15432: EQUAL
15433: AND
15434: IFFALSE 15451
// bpoints := bpoints * 1.2 ;
15436: LD_ADDR_VAR 0 10
15440: PUSH
15441: LD_VAR 0 10
15445: PUSH
15446: LD_REAL  1.20000000000000E+0000
15449: MUL
15450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15451: LD_VAR 0 6
15455: PPUSH
15456: CALL_OW 264
15460: PUSH
15461: LD_INT 6
15463: PUSH
15464: LD_INT 46
15466: PUSH
15467: LD_INT 47
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: LIST
15474: IN
15475: IFFALSE 15492
// bpoints := bpoints * 1.2 ;
15477: LD_ADDR_VAR 0 10
15481: PUSH
15482: LD_VAR 0 10
15486: PUSH
15487: LD_REAL  1.20000000000000E+0000
15490: MUL
15491: ST_TO_ADDR
// end ; unit_building :
15492: GO 15506
15494: LD_INT 3
15496: DOUBLE
15497: EQUAL
15498: IFTRUE 15502
15500: GO 15505
15502: POP
// ; end ;
15503: GO 15506
15505: POP
// for j = 1 to 3 do
15506: LD_ADDR_VAR 0 7
15510: PUSH
15511: DOUBLE
15512: LD_INT 1
15514: DEC
15515: ST_TO_ADDR
15516: LD_INT 3
15518: PUSH
15519: FOR_TO
15520: IFFALSE 15573
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15522: LD_ADDR_VAR 0 5
15526: PUSH
15527: LD_VAR 0 5
15531: PPUSH
15532: LD_VAR 0 7
15536: PPUSH
15537: LD_VAR 0 5
15541: PUSH
15542: LD_VAR 0 7
15546: ARRAY
15547: PUSH
15548: LD_VAR 0 9
15552: PUSH
15553: LD_VAR 0 7
15557: ARRAY
15558: PUSH
15559: LD_VAR 0 10
15563: MUL
15564: PLUS
15565: PPUSH
15566: CALL_OW 1
15570: ST_TO_ADDR
15571: GO 15519
15573: POP
15574: POP
// end ;
15575: GO 14058
15577: POP
15578: POP
// result := Replace ( result , 4 , tmp ) ;
15579: LD_ADDR_VAR 0 5
15583: PUSH
15584: LD_VAR 0 5
15588: PPUSH
15589: LD_INT 4
15591: PPUSH
15592: LD_VAR 0 8
15596: PPUSH
15597: CALL_OW 1
15601: ST_TO_ADDR
// end ;
15602: LD_VAR 0 5
15606: RET
// export function DangerAtRange ( unit , range ) ; begin
15607: LD_INT 0
15609: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15610: LD_ADDR_VAR 0 3
15614: PUSH
15615: LD_VAR 0 1
15619: PPUSH
15620: CALL_OW 255
15624: PPUSH
15625: LD_VAR 0 1
15629: PPUSH
15630: CALL_OW 250
15634: PPUSH
15635: LD_VAR 0 1
15639: PPUSH
15640: CALL_OW 251
15644: PPUSH
15645: LD_VAR 0 2
15649: PPUSH
15650: CALL 13910 0 4
15654: ST_TO_ADDR
// end ;
15655: LD_VAR 0 3
15659: RET
// export function DangerInArea ( side , area ) ; begin
15660: LD_INT 0
15662: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15663: LD_ADDR_VAR 0 3
15667: PUSH
15668: LD_VAR 0 2
15672: PPUSH
15673: LD_INT 81
15675: PUSH
15676: LD_VAR 0 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PPUSH
15685: CALL_OW 70
15689: ST_TO_ADDR
// end ;
15690: LD_VAR 0 3
15694: RET
// export function IsExtension ( b ) ; begin
15695: LD_INT 0
15697: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15698: LD_ADDR_VAR 0 2
15702: PUSH
15703: LD_VAR 0 1
15707: PUSH
15708: LD_INT 23
15710: PUSH
15711: LD_INT 20
15713: PUSH
15714: LD_INT 22
15716: PUSH
15717: LD_INT 17
15719: PUSH
15720: LD_INT 24
15722: PUSH
15723: LD_INT 21
15725: PUSH
15726: LD_INT 19
15728: PUSH
15729: LD_INT 16
15731: PUSH
15732: LD_INT 25
15734: PUSH
15735: LD_INT 18
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: IN
15750: ST_TO_ADDR
// end ;
15751: LD_VAR 0 2
15755: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15756: LD_INT 0
15758: PPUSH
15759: PPUSH
15760: PPUSH
// result := [ ] ;
15761: LD_ADDR_VAR 0 4
15765: PUSH
15766: EMPTY
15767: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15768: LD_ADDR_VAR 0 5
15772: PUSH
15773: LD_VAR 0 2
15777: PPUSH
15778: LD_INT 21
15780: PUSH
15781: LD_INT 3
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PPUSH
15788: CALL_OW 70
15792: ST_TO_ADDR
// if not tmp then
15793: LD_VAR 0 5
15797: NOT
15798: IFFALSE 15802
// exit ;
15800: GO 15866
// if checkLink then
15802: LD_VAR 0 3
15806: IFFALSE 15856
// begin for i in tmp do
15808: LD_ADDR_VAR 0 6
15812: PUSH
15813: LD_VAR 0 5
15817: PUSH
15818: FOR_IN
15819: IFFALSE 15854
// if GetBase ( i ) <> base then
15821: LD_VAR 0 6
15825: PPUSH
15826: CALL_OW 274
15830: PUSH
15831: LD_VAR 0 1
15835: NONEQUAL
15836: IFFALSE 15852
// ComLinkToBase ( base , i ) ;
15838: LD_VAR 0 1
15842: PPUSH
15843: LD_VAR 0 6
15847: PPUSH
15848: CALL_OW 169
15852: GO 15818
15854: POP
15855: POP
// end ; result := tmp ;
15856: LD_ADDR_VAR 0 4
15860: PUSH
15861: LD_VAR 0 5
15865: ST_TO_ADDR
// end ;
15866: LD_VAR 0 4
15870: RET
// export function ComComplete ( units , b ) ; var i ; begin
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
// if not units then
15875: LD_VAR 0 1
15879: NOT
15880: IFFALSE 15884
// exit ;
15882: GO 15974
// for i in units do
15884: LD_ADDR_VAR 0 4
15888: PUSH
15889: LD_VAR 0 1
15893: PUSH
15894: FOR_IN
15895: IFFALSE 15972
// if BuildingStatus ( b ) = bs_build then
15897: LD_VAR 0 2
15901: PPUSH
15902: CALL_OW 461
15906: PUSH
15907: LD_INT 1
15909: EQUAL
15910: IFFALSE 15970
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15912: LD_VAR 0 4
15916: PPUSH
15917: LD_STRING h
15919: PUSH
15920: LD_VAR 0 2
15924: PPUSH
15925: CALL_OW 250
15929: PUSH
15930: LD_VAR 0 2
15934: PPUSH
15935: CALL_OW 251
15939: PUSH
15940: LD_VAR 0 2
15944: PUSH
15945: LD_INT 0
15947: PUSH
15948: LD_INT 0
15950: PUSH
15951: LD_INT 0
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: PPUSH
15966: CALL_OW 446
15970: GO 15894
15972: POP
15973: POP
// end ;
15974: LD_VAR 0 3
15978: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
15979: LD_INT 0
15981: PPUSH
15982: PPUSH
15983: PPUSH
15984: PPUSH
15985: PPUSH
15986: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
15987: LD_VAR 0 1
15991: NOT
15992: PUSH
15993: LD_VAR 0 1
15997: PPUSH
15998: CALL_OW 263
16002: PUSH
16003: LD_INT 2
16005: EQUAL
16006: NOT
16007: OR
16008: IFFALSE 16012
// exit ;
16010: GO 16328
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16012: LD_ADDR_VAR 0 6
16016: PUSH
16017: LD_INT 22
16019: PUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 255
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 2
16036: PUSH
16037: LD_INT 30
16039: PUSH
16040: LD_INT 36
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 34
16049: PUSH
16050: LD_INT 31
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PPUSH
16066: CALL_OW 69
16070: ST_TO_ADDR
// if not tmp then
16071: LD_VAR 0 6
16075: NOT
16076: IFFALSE 16080
// exit ;
16078: GO 16328
// result := [ ] ;
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: EMPTY
16086: ST_TO_ADDR
// for i in tmp do
16087: LD_ADDR_VAR 0 3
16091: PUSH
16092: LD_VAR 0 6
16096: PUSH
16097: FOR_IN
16098: IFFALSE 16169
// begin t := UnitsInside ( i ) ;
16100: LD_ADDR_VAR 0 4
16104: PUSH
16105: LD_VAR 0 3
16109: PPUSH
16110: CALL_OW 313
16114: ST_TO_ADDR
// if t then
16115: LD_VAR 0 4
16119: IFFALSE 16167
// for j in t do
16121: LD_ADDR_VAR 0 7
16125: PUSH
16126: LD_VAR 0 4
16130: PUSH
16131: FOR_IN
16132: IFFALSE 16165
// result := Insert ( result , result + 1 , j ) ;
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: LD_VAR 0 2
16143: PPUSH
16144: LD_VAR 0 2
16148: PUSH
16149: LD_INT 1
16151: PLUS
16152: PPUSH
16153: LD_VAR 0 7
16157: PPUSH
16158: CALL_OW 2
16162: ST_TO_ADDR
16163: GO 16131
16165: POP
16166: POP
// end ;
16167: GO 16097
16169: POP
16170: POP
// if not result then
16171: LD_VAR 0 2
16175: NOT
16176: IFFALSE 16180
// exit ;
16178: GO 16328
// mech := result [ 1 ] ;
16180: LD_ADDR_VAR 0 5
16184: PUSH
16185: LD_VAR 0 2
16189: PUSH
16190: LD_INT 1
16192: ARRAY
16193: ST_TO_ADDR
// if result > 1 then
16194: LD_VAR 0 2
16198: PUSH
16199: LD_INT 1
16201: GREATER
16202: IFFALSE 16314
// for i = 2 to result do
16204: LD_ADDR_VAR 0 3
16208: PUSH
16209: DOUBLE
16210: LD_INT 2
16212: DEC
16213: ST_TO_ADDR
16214: LD_VAR 0 2
16218: PUSH
16219: FOR_TO
16220: IFFALSE 16312
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16222: LD_ADDR_VAR 0 4
16226: PUSH
16227: LD_VAR 0 2
16231: PUSH
16232: LD_VAR 0 3
16236: ARRAY
16237: PPUSH
16238: LD_INT 3
16240: PPUSH
16241: CALL_OW 259
16245: PUSH
16246: LD_VAR 0 2
16250: PUSH
16251: LD_VAR 0 3
16255: ARRAY
16256: PPUSH
16257: CALL_OW 432
16261: MINUS
16262: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16263: LD_VAR 0 4
16267: PUSH
16268: LD_VAR 0 5
16272: PPUSH
16273: LD_INT 3
16275: PPUSH
16276: CALL_OW 259
16280: PUSH
16281: LD_VAR 0 5
16285: PPUSH
16286: CALL_OW 432
16290: MINUS
16291: GREATEREQUAL
16292: IFFALSE 16310
// mech := result [ i ] ;
16294: LD_ADDR_VAR 0 5
16298: PUSH
16299: LD_VAR 0 2
16303: PUSH
16304: LD_VAR 0 3
16308: ARRAY
16309: ST_TO_ADDR
// end ;
16310: GO 16219
16312: POP
16313: POP
// ComLinkTo ( vehicle , mech ) ;
16314: LD_VAR 0 1
16318: PPUSH
16319: LD_VAR 0 5
16323: PPUSH
16324: CALL_OW 135
// end ;
16328: LD_VAR 0 2
16332: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16333: LD_INT 0
16335: PPUSH
16336: PPUSH
16337: PPUSH
16338: PPUSH
16339: PPUSH
16340: PPUSH
16341: PPUSH
16342: PPUSH
16343: PPUSH
16344: PPUSH
16345: PPUSH
16346: PPUSH
16347: PPUSH
// result := [ ] ;
16348: LD_ADDR_VAR 0 7
16352: PUSH
16353: EMPTY
16354: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16355: LD_VAR 0 1
16359: PPUSH
16360: CALL_OW 266
16364: PUSH
16365: LD_INT 0
16367: PUSH
16368: LD_INT 1
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: IN
16375: NOT
16376: IFFALSE 16380
// exit ;
16378: GO 18014
// if name then
16380: LD_VAR 0 3
16384: IFFALSE 16400
// SetBName ( base_dep , name ) ;
16386: LD_VAR 0 1
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: CALL_OW 500
// base := GetBase ( base_dep ) ;
16400: LD_ADDR_VAR 0 15
16404: PUSH
16405: LD_VAR 0 1
16409: PPUSH
16410: CALL_OW 274
16414: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16415: LD_ADDR_VAR 0 16
16419: PUSH
16420: LD_VAR 0 1
16424: PPUSH
16425: CALL_OW 255
16429: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16430: LD_ADDR_VAR 0 17
16434: PUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 248
16444: ST_TO_ADDR
// if sources then
16445: LD_VAR 0 5
16449: IFFALSE 16496
// for i = 1 to 3 do
16451: LD_ADDR_VAR 0 8
16455: PUSH
16456: DOUBLE
16457: LD_INT 1
16459: DEC
16460: ST_TO_ADDR
16461: LD_INT 3
16463: PUSH
16464: FOR_TO
16465: IFFALSE 16494
// AddResourceType ( base , i , sources [ i ] ) ;
16467: LD_VAR 0 15
16471: PPUSH
16472: LD_VAR 0 8
16476: PPUSH
16477: LD_VAR 0 5
16481: PUSH
16482: LD_VAR 0 8
16486: ARRAY
16487: PPUSH
16488: CALL_OW 276
16492: GO 16464
16494: POP
16495: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16496: LD_ADDR_VAR 0 18
16500: PUSH
16501: LD_VAR 0 15
16505: PPUSH
16506: LD_VAR 0 2
16510: PPUSH
16511: LD_INT 1
16513: PPUSH
16514: CALL 15756 0 3
16518: ST_TO_ADDR
// InitHc ;
16519: CALL_OW 19
// InitUc ;
16523: CALL_OW 18
// uc_side := side ;
16527: LD_ADDR_OWVAR 20
16531: PUSH
16532: LD_VAR 0 16
16536: ST_TO_ADDR
// uc_nation := nation ;
16537: LD_ADDR_OWVAR 21
16541: PUSH
16542: LD_VAR 0 17
16546: ST_TO_ADDR
// if buildings then
16547: LD_VAR 0 18
16551: IFFALSE 17873
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16553: LD_ADDR_VAR 0 19
16557: PUSH
16558: LD_VAR 0 18
16562: PPUSH
16563: LD_INT 2
16565: PUSH
16566: LD_INT 30
16568: PUSH
16569: LD_INT 29
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 30
16578: PUSH
16579: LD_INT 30
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: PPUSH
16591: CALL_OW 72
16595: ST_TO_ADDR
// if tmp then
16596: LD_VAR 0 19
16600: IFFALSE 16648
// for i in tmp do
16602: LD_ADDR_VAR 0 8
16606: PUSH
16607: LD_VAR 0 19
16611: PUSH
16612: FOR_IN
16613: IFFALSE 16646
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16615: LD_VAR 0 8
16619: PPUSH
16620: CALL_OW 250
16624: PPUSH
16625: LD_VAR 0 8
16629: PPUSH
16630: CALL_OW 251
16634: PPUSH
16635: LD_VAR 0 16
16639: PPUSH
16640: CALL_OW 441
16644: GO 16612
16646: POP
16647: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16648: LD_VAR 0 18
16652: PPUSH
16653: LD_INT 2
16655: PUSH
16656: LD_INT 30
16658: PUSH
16659: LD_INT 32
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 30
16668: PUSH
16669: LD_INT 33
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 72
16685: IFFALSE 16773
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16687: LD_ADDR_VAR 0 8
16691: PUSH
16692: LD_VAR 0 18
16696: PPUSH
16697: LD_INT 2
16699: PUSH
16700: LD_INT 30
16702: PUSH
16703: LD_INT 32
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 33
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: LIST
16724: PPUSH
16725: CALL_OW 72
16729: PUSH
16730: FOR_IN
16731: IFFALSE 16771
// begin if not GetBWeapon ( i ) then
16733: LD_VAR 0 8
16737: PPUSH
16738: CALL_OW 269
16742: NOT
16743: IFFALSE 16769
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16745: LD_VAR 0 8
16749: PPUSH
16750: LD_VAR 0 8
16754: PPUSH
16755: LD_VAR 0 2
16759: PPUSH
16760: CALL 18019 0 2
16764: PPUSH
16765: CALL_OW 431
// end ;
16769: GO 16730
16771: POP
16772: POP
// end ; for i = 1 to personel do
16773: LD_ADDR_VAR 0 8
16777: PUSH
16778: DOUBLE
16779: LD_INT 1
16781: DEC
16782: ST_TO_ADDR
16783: LD_VAR 0 6
16787: PUSH
16788: FOR_TO
16789: IFFALSE 17853
// begin if i > 4 then
16791: LD_VAR 0 8
16795: PUSH
16796: LD_INT 4
16798: GREATER
16799: IFFALSE 16803
// break ;
16801: GO 17853
// case i of 1 :
16803: LD_VAR 0 8
16807: PUSH
16808: LD_INT 1
16810: DOUBLE
16811: EQUAL
16812: IFTRUE 16816
16814: GO 16896
16816: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16817: LD_ADDR_VAR 0 12
16821: PUSH
16822: LD_VAR 0 18
16826: PPUSH
16827: LD_INT 22
16829: PUSH
16830: LD_VAR 0 16
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 58
16841: PUSH
16842: EMPTY
16843: LIST
16844: PUSH
16845: LD_INT 2
16847: PUSH
16848: LD_INT 30
16850: PUSH
16851: LD_INT 32
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 30
16860: PUSH
16861: LD_INT 4
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 30
16870: PUSH
16871: LD_INT 5
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: LIST
16888: PPUSH
16889: CALL_OW 72
16893: ST_TO_ADDR
16894: GO 17118
16896: LD_INT 2
16898: DOUBLE
16899: EQUAL
16900: IFTRUE 16904
16902: GO 16966
16904: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16905: LD_ADDR_VAR 0 12
16909: PUSH
16910: LD_VAR 0 18
16914: PPUSH
16915: LD_INT 22
16917: PUSH
16918: LD_VAR 0 16
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 2
16929: PUSH
16930: LD_INT 30
16932: PUSH
16933: LD_INT 0
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 30
16942: PUSH
16943: LD_INT 1
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PPUSH
16959: CALL_OW 72
16963: ST_TO_ADDR
16964: GO 17118
16966: LD_INT 3
16968: DOUBLE
16969: EQUAL
16970: IFTRUE 16974
16972: GO 17036
16974: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
16975: LD_ADDR_VAR 0 12
16979: PUSH
16980: LD_VAR 0 18
16984: PPUSH
16985: LD_INT 22
16987: PUSH
16988: LD_VAR 0 16
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: LD_INT 30
17002: PUSH
17003: LD_INT 2
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 30
17012: PUSH
17013: LD_INT 3
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PPUSH
17029: CALL_OW 72
17033: ST_TO_ADDR
17034: GO 17118
17036: LD_INT 4
17038: DOUBLE
17039: EQUAL
17040: IFTRUE 17044
17042: GO 17117
17044: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17045: LD_ADDR_VAR 0 12
17049: PUSH
17050: LD_VAR 0 18
17054: PPUSH
17055: LD_INT 22
17057: PUSH
17058: LD_VAR 0 16
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: LD_INT 30
17072: PUSH
17073: LD_INT 6
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 30
17082: PUSH
17083: LD_INT 7
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 30
17092: PUSH
17093: LD_INT 8
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 72
17114: ST_TO_ADDR
17115: GO 17118
17117: POP
// if i = 1 then
17118: LD_VAR 0 8
17122: PUSH
17123: LD_INT 1
17125: EQUAL
17126: IFFALSE 17237
// begin tmp := [ ] ;
17128: LD_ADDR_VAR 0 19
17132: PUSH
17133: EMPTY
17134: ST_TO_ADDR
// for j in f do
17135: LD_ADDR_VAR 0 9
17139: PUSH
17140: LD_VAR 0 12
17144: PUSH
17145: FOR_IN
17146: IFFALSE 17219
// if GetBType ( j ) = b_bunker then
17148: LD_VAR 0 9
17152: PPUSH
17153: CALL_OW 266
17157: PUSH
17158: LD_INT 32
17160: EQUAL
17161: IFFALSE 17188
// tmp := Insert ( tmp , 1 , j ) else
17163: LD_ADDR_VAR 0 19
17167: PUSH
17168: LD_VAR 0 19
17172: PPUSH
17173: LD_INT 1
17175: PPUSH
17176: LD_VAR 0 9
17180: PPUSH
17181: CALL_OW 2
17185: ST_TO_ADDR
17186: GO 17217
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17188: LD_ADDR_VAR 0 19
17192: PUSH
17193: LD_VAR 0 19
17197: PPUSH
17198: LD_VAR 0 19
17202: PUSH
17203: LD_INT 1
17205: PLUS
17206: PPUSH
17207: LD_VAR 0 9
17211: PPUSH
17212: CALL_OW 2
17216: ST_TO_ADDR
17217: GO 17145
17219: POP
17220: POP
// if tmp then
17221: LD_VAR 0 19
17225: IFFALSE 17237
// f := tmp ;
17227: LD_ADDR_VAR 0 12
17231: PUSH
17232: LD_VAR 0 19
17236: ST_TO_ADDR
// end ; x := personel [ i ] ;
17237: LD_ADDR_VAR 0 13
17241: PUSH
17242: LD_VAR 0 6
17246: PUSH
17247: LD_VAR 0 8
17251: ARRAY
17252: ST_TO_ADDR
// if x = - 1 then
17253: LD_VAR 0 13
17257: PUSH
17258: LD_INT 1
17260: NEG
17261: EQUAL
17262: IFFALSE 17471
// begin for j in f do
17264: LD_ADDR_VAR 0 9
17268: PUSH
17269: LD_VAR 0 12
17273: PUSH
17274: FOR_IN
17275: IFFALSE 17467
// repeat InitHc ;
17277: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17281: LD_VAR 0 9
17285: PPUSH
17286: CALL_OW 266
17290: PUSH
17291: LD_INT 5
17293: EQUAL
17294: IFFALSE 17364
// begin if UnitsInside ( j ) < 3 then
17296: LD_VAR 0 9
17300: PPUSH
17301: CALL_OW 313
17305: PUSH
17306: LD_INT 3
17308: LESS
17309: IFFALSE 17345
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17311: LD_INT 0
17313: PPUSH
17314: LD_INT 5
17316: PUSH
17317: LD_INT 8
17319: PUSH
17320: LD_INT 9
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: PUSH
17328: LD_VAR 0 17
17332: ARRAY
17333: PPUSH
17334: LD_VAR 0 4
17338: PPUSH
17339: CALL_OW 380
17343: GO 17362
// PrepareHuman ( false , i , skill ) ;
17345: LD_INT 0
17347: PPUSH
17348: LD_VAR 0 8
17352: PPUSH
17353: LD_VAR 0 4
17357: PPUSH
17358: CALL_OW 380
// end else
17362: GO 17381
// PrepareHuman ( false , i , skill ) ;
17364: LD_INT 0
17366: PPUSH
17367: LD_VAR 0 8
17371: PPUSH
17372: LD_VAR 0 4
17376: PPUSH
17377: CALL_OW 380
// un := CreateHuman ;
17381: LD_ADDR_VAR 0 14
17385: PUSH
17386: CALL_OW 44
17390: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17391: LD_ADDR_VAR 0 7
17395: PUSH
17396: LD_VAR 0 7
17400: PPUSH
17401: LD_INT 1
17403: PPUSH
17404: LD_VAR 0 14
17408: PPUSH
17409: CALL_OW 2
17413: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17414: LD_VAR 0 14
17418: PPUSH
17419: LD_VAR 0 9
17423: PPUSH
17424: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17428: LD_VAR 0 9
17432: PPUSH
17433: CALL_OW 313
17437: PUSH
17438: LD_INT 6
17440: EQUAL
17441: PUSH
17442: LD_VAR 0 9
17446: PPUSH
17447: CALL_OW 266
17451: PUSH
17452: LD_INT 32
17454: PUSH
17455: LD_INT 31
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: IN
17462: OR
17463: IFFALSE 17277
17465: GO 17274
17467: POP
17468: POP
// end else
17469: GO 17851
// for j = 1 to x do
17471: LD_ADDR_VAR 0 9
17475: PUSH
17476: DOUBLE
17477: LD_INT 1
17479: DEC
17480: ST_TO_ADDR
17481: LD_VAR 0 13
17485: PUSH
17486: FOR_TO
17487: IFFALSE 17849
// begin InitHc ;
17489: CALL_OW 19
// if not f then
17493: LD_VAR 0 12
17497: NOT
17498: IFFALSE 17587
// begin PrepareHuman ( false , i , skill ) ;
17500: LD_INT 0
17502: PPUSH
17503: LD_VAR 0 8
17507: PPUSH
17508: LD_VAR 0 4
17512: PPUSH
17513: CALL_OW 380
// un := CreateHuman ;
17517: LD_ADDR_VAR 0 14
17521: PUSH
17522: CALL_OW 44
17526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17527: LD_ADDR_VAR 0 7
17531: PUSH
17532: LD_VAR 0 7
17536: PPUSH
17537: LD_INT 1
17539: PPUSH
17540: LD_VAR 0 14
17544: PPUSH
17545: CALL_OW 2
17549: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17550: LD_VAR 0 14
17554: PPUSH
17555: LD_VAR 0 1
17559: PPUSH
17560: CALL_OW 250
17564: PPUSH
17565: LD_VAR 0 1
17569: PPUSH
17570: CALL_OW 251
17574: PPUSH
17575: LD_INT 10
17577: PPUSH
17578: LD_INT 0
17580: PPUSH
17581: CALL_OW 50
// continue ;
17585: GO 17486
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17587: LD_VAR 0 12
17591: PUSH
17592: LD_INT 1
17594: ARRAY
17595: PPUSH
17596: CALL_OW 313
17600: PUSH
17601: LD_VAR 0 12
17605: PUSH
17606: LD_INT 1
17608: ARRAY
17609: PPUSH
17610: CALL_OW 266
17614: PUSH
17615: LD_INT 32
17617: PUSH
17618: LD_INT 31
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: IN
17625: AND
17626: PUSH
17627: LD_VAR 0 12
17631: PUSH
17632: LD_INT 1
17634: ARRAY
17635: PPUSH
17636: CALL_OW 313
17640: PUSH
17641: LD_INT 6
17643: EQUAL
17644: OR
17645: IFFALSE 17665
// f := Delete ( f , 1 ) ;
17647: LD_ADDR_VAR 0 12
17651: PUSH
17652: LD_VAR 0 12
17656: PPUSH
17657: LD_INT 1
17659: PPUSH
17660: CALL_OW 3
17664: ST_TO_ADDR
// if not f then
17665: LD_VAR 0 12
17669: NOT
17670: IFFALSE 17688
// begin x := x + 2 ;
17672: LD_ADDR_VAR 0 13
17676: PUSH
17677: LD_VAR 0 13
17681: PUSH
17682: LD_INT 2
17684: PLUS
17685: ST_TO_ADDR
// continue ;
17686: GO 17486
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17688: LD_VAR 0 12
17692: PUSH
17693: LD_INT 1
17695: ARRAY
17696: PPUSH
17697: CALL_OW 266
17701: PUSH
17702: LD_INT 5
17704: EQUAL
17705: IFFALSE 17779
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17707: LD_VAR 0 12
17711: PUSH
17712: LD_INT 1
17714: ARRAY
17715: PPUSH
17716: CALL_OW 313
17720: PUSH
17721: LD_INT 3
17723: LESS
17724: IFFALSE 17760
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17726: LD_INT 0
17728: PPUSH
17729: LD_INT 5
17731: PUSH
17732: LD_INT 8
17734: PUSH
17735: LD_INT 9
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: PUSH
17743: LD_VAR 0 17
17747: ARRAY
17748: PPUSH
17749: LD_VAR 0 4
17753: PPUSH
17754: CALL_OW 380
17758: GO 17777
// PrepareHuman ( false , i , skill ) ;
17760: LD_INT 0
17762: PPUSH
17763: LD_VAR 0 8
17767: PPUSH
17768: LD_VAR 0 4
17772: PPUSH
17773: CALL_OW 380
// end else
17777: GO 17796
// PrepareHuman ( false , i , skill ) ;
17779: LD_INT 0
17781: PPUSH
17782: LD_VAR 0 8
17786: PPUSH
17787: LD_VAR 0 4
17791: PPUSH
17792: CALL_OW 380
// un := CreateHuman ;
17796: LD_ADDR_VAR 0 14
17800: PUSH
17801: CALL_OW 44
17805: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17806: LD_ADDR_VAR 0 7
17810: PUSH
17811: LD_VAR 0 7
17815: PPUSH
17816: LD_INT 1
17818: PPUSH
17819: LD_VAR 0 14
17823: PPUSH
17824: CALL_OW 2
17828: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17829: LD_VAR 0 14
17833: PPUSH
17834: LD_VAR 0 12
17838: PUSH
17839: LD_INT 1
17841: ARRAY
17842: PPUSH
17843: CALL_OW 52
// end ;
17847: GO 17486
17849: POP
17850: POP
// end ;
17851: GO 16788
17853: POP
17854: POP
// result := result ^ buildings ;
17855: LD_ADDR_VAR 0 7
17859: PUSH
17860: LD_VAR 0 7
17864: PUSH
17865: LD_VAR 0 18
17869: ADD
17870: ST_TO_ADDR
// end else
17871: GO 18014
// begin for i = 1 to personel do
17873: LD_ADDR_VAR 0 8
17877: PUSH
17878: DOUBLE
17879: LD_INT 1
17881: DEC
17882: ST_TO_ADDR
17883: LD_VAR 0 6
17887: PUSH
17888: FOR_TO
17889: IFFALSE 18012
// begin if i > 4 then
17891: LD_VAR 0 8
17895: PUSH
17896: LD_INT 4
17898: GREATER
17899: IFFALSE 17903
// break ;
17901: GO 18012
// x := personel [ i ] ;
17903: LD_ADDR_VAR 0 13
17907: PUSH
17908: LD_VAR 0 6
17912: PUSH
17913: LD_VAR 0 8
17917: ARRAY
17918: ST_TO_ADDR
// if x = - 1 then
17919: LD_VAR 0 13
17923: PUSH
17924: LD_INT 1
17926: NEG
17927: EQUAL
17928: IFFALSE 17932
// continue ;
17930: GO 17888
// PrepareHuman ( false , i , skill ) ;
17932: LD_INT 0
17934: PPUSH
17935: LD_VAR 0 8
17939: PPUSH
17940: LD_VAR 0 4
17944: PPUSH
17945: CALL_OW 380
// un := CreateHuman ;
17949: LD_ADDR_VAR 0 14
17953: PUSH
17954: CALL_OW 44
17958: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17959: LD_VAR 0 14
17963: PPUSH
17964: LD_VAR 0 1
17968: PPUSH
17969: CALL_OW 250
17973: PPUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 251
17983: PPUSH
17984: LD_INT 10
17986: PPUSH
17987: LD_INT 0
17989: PPUSH
17990: CALL_OW 50
// result := result ^ un ;
17994: LD_ADDR_VAR 0 7
17998: PUSH
17999: LD_VAR 0 7
18003: PUSH
18004: LD_VAR 0 14
18008: ADD
18009: ST_TO_ADDR
// end ;
18010: GO 17888
18012: POP
18013: POP
// end ; end ;
18014: LD_VAR 0 7
18018: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18019: LD_INT 0
18021: PPUSH
18022: PPUSH
18023: PPUSH
18024: PPUSH
18025: PPUSH
18026: PPUSH
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
18031: PPUSH
18032: PPUSH
18033: PPUSH
18034: PPUSH
18035: PPUSH
18036: PPUSH
// result := false ;
18037: LD_ADDR_VAR 0 3
18041: PUSH
18042: LD_INT 0
18044: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18045: LD_VAR 0 1
18049: NOT
18050: PUSH
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 266
18060: PUSH
18061: LD_INT 32
18063: PUSH
18064: LD_INT 33
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: IN
18071: NOT
18072: OR
18073: IFFALSE 18077
// exit ;
18075: GO 19216
// nat := GetNation ( tower ) ;
18077: LD_ADDR_VAR 0 12
18081: PUSH
18082: LD_VAR 0 1
18086: PPUSH
18087: CALL_OW 248
18091: ST_TO_ADDR
// side := GetSide ( tower ) ;
18092: LD_ADDR_VAR 0 16
18096: PUSH
18097: LD_VAR 0 1
18101: PPUSH
18102: CALL_OW 255
18106: ST_TO_ADDR
// x := GetX ( tower ) ;
18107: LD_ADDR_VAR 0 10
18111: PUSH
18112: LD_VAR 0 1
18116: PPUSH
18117: CALL_OW 250
18121: ST_TO_ADDR
// y := GetY ( tower ) ;
18122: LD_ADDR_VAR 0 11
18126: PUSH
18127: LD_VAR 0 1
18131: PPUSH
18132: CALL_OW 251
18136: ST_TO_ADDR
// if not x or not y then
18137: LD_VAR 0 10
18141: NOT
18142: PUSH
18143: LD_VAR 0 11
18147: NOT
18148: OR
18149: IFFALSE 18153
// exit ;
18151: GO 19216
// weapon := 0 ;
18153: LD_ADDR_VAR 0 18
18157: PUSH
18158: LD_INT 0
18160: ST_TO_ADDR
// fac_list := [ ] ;
18161: LD_ADDR_VAR 0 17
18165: PUSH
18166: EMPTY
18167: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18168: LD_ADDR_VAR 0 6
18172: PUSH
18173: LD_VAR 0 1
18177: PPUSH
18178: CALL_OW 274
18182: PPUSH
18183: LD_VAR 0 2
18187: PPUSH
18188: LD_INT 0
18190: PPUSH
18191: CALL 15756 0 3
18195: PPUSH
18196: LD_INT 30
18198: PUSH
18199: LD_INT 3
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 72
18210: ST_TO_ADDR
// if not factories then
18211: LD_VAR 0 6
18215: NOT
18216: IFFALSE 18220
// exit ;
18218: GO 19216
// for i in factories do
18220: LD_ADDR_VAR 0 8
18224: PUSH
18225: LD_VAR 0 6
18229: PUSH
18230: FOR_IN
18231: IFFALSE 18256
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18233: LD_ADDR_VAR 0 17
18237: PUSH
18238: LD_VAR 0 17
18242: PUSH
18243: LD_VAR 0 8
18247: PPUSH
18248: CALL_OW 478
18252: UNION
18253: ST_TO_ADDR
18254: GO 18230
18256: POP
18257: POP
// if not fac_list then
18258: LD_VAR 0 17
18262: NOT
18263: IFFALSE 18267
// exit ;
18265: GO 19216
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18267: LD_ADDR_VAR 0 5
18271: PUSH
18272: LD_INT 4
18274: PUSH
18275: LD_INT 5
18277: PUSH
18278: LD_INT 9
18280: PUSH
18281: LD_INT 10
18283: PUSH
18284: LD_INT 6
18286: PUSH
18287: LD_INT 7
18289: PUSH
18290: LD_INT 11
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 27
18304: PUSH
18305: LD_INT 28
18307: PUSH
18308: LD_INT 26
18310: PUSH
18311: LD_INT 30
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 43
18322: PUSH
18323: LD_INT 44
18325: PUSH
18326: LD_INT 46
18328: PUSH
18329: LD_INT 45
18331: PUSH
18332: LD_INT 47
18334: PUSH
18335: LD_INT 49
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: LIST
18350: PUSH
18351: LD_VAR 0 12
18355: ARRAY
18356: ST_TO_ADDR
// for i in list do
18357: LD_ADDR_VAR 0 8
18361: PUSH
18362: LD_VAR 0 5
18366: PUSH
18367: FOR_IN
18368: IFFALSE 18401
// if not i in fac_list then
18370: LD_VAR 0 8
18374: PUSH
18375: LD_VAR 0 17
18379: IN
18380: NOT
18381: IFFALSE 18399
// list := list diff i ;
18383: LD_ADDR_VAR 0 5
18387: PUSH
18388: LD_VAR 0 5
18392: PUSH
18393: LD_VAR 0 8
18397: DIFF
18398: ST_TO_ADDR
18399: GO 18367
18401: POP
18402: POP
// if not list then
18403: LD_VAR 0 5
18407: NOT
18408: IFFALSE 18412
// exit ;
18410: GO 19216
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18412: LD_VAR 0 12
18416: PUSH
18417: LD_INT 3
18419: EQUAL
18420: PUSH
18421: LD_INT 49
18423: PUSH
18424: LD_VAR 0 5
18428: IN
18429: AND
18430: PUSH
18431: LD_INT 31
18433: PPUSH
18434: LD_VAR 0 16
18438: PPUSH
18439: CALL_OW 321
18443: PUSH
18444: LD_INT 2
18446: EQUAL
18447: AND
18448: IFFALSE 18508
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18450: LD_INT 22
18452: PUSH
18453: LD_VAR 0 16
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 35
18464: PUSH
18465: LD_INT 49
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 91
18474: PUSH
18475: LD_VAR 0 1
18479: PUSH
18480: LD_INT 10
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: LIST
18492: PPUSH
18493: CALL_OW 69
18497: NOT
18498: IFFALSE 18508
// weapon := ru_time_lapser ;
18500: LD_ADDR_VAR 0 18
18504: PUSH
18505: LD_INT 49
18507: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18508: LD_VAR 0 12
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: LD_INT 2
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: IN
18523: PUSH
18524: LD_INT 11
18526: PUSH
18527: LD_VAR 0 5
18531: IN
18532: PUSH
18533: LD_INT 30
18535: PUSH
18536: LD_VAR 0 5
18540: IN
18541: OR
18542: AND
18543: PUSH
18544: LD_INT 6
18546: PPUSH
18547: LD_VAR 0 16
18551: PPUSH
18552: CALL_OW 321
18556: PUSH
18557: LD_INT 2
18559: EQUAL
18560: AND
18561: IFFALSE 18726
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18563: LD_INT 22
18565: PUSH
18566: LD_VAR 0 16
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 2
18577: PUSH
18578: LD_INT 35
18580: PUSH
18581: LD_INT 11
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 35
18590: PUSH
18591: LD_INT 30
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 91
18605: PUSH
18606: LD_VAR 0 1
18610: PUSH
18611: LD_INT 18
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: LIST
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: LIST
18623: PPUSH
18624: CALL_OW 69
18628: NOT
18629: PUSH
18630: LD_INT 22
18632: PUSH
18633: LD_VAR 0 16
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 2
18644: PUSH
18645: LD_INT 30
18647: PUSH
18648: LD_INT 32
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 30
18657: PUSH
18658: LD_INT 33
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 91
18672: PUSH
18673: LD_VAR 0 1
18677: PUSH
18678: LD_INT 12
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: LIST
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: PUSH
18691: EMPTY
18692: LIST
18693: PPUSH
18694: CALL_OW 69
18698: PUSH
18699: LD_INT 2
18701: GREATER
18702: AND
18703: IFFALSE 18726
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18705: LD_ADDR_VAR 0 18
18709: PUSH
18710: LD_INT 11
18712: PUSH
18713: LD_INT 30
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_VAR 0 12
18724: ARRAY
18725: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18726: LD_VAR 0 18
18730: NOT
18731: PUSH
18732: LD_INT 40
18734: PPUSH
18735: LD_VAR 0 16
18739: PPUSH
18740: CALL_OW 321
18744: PUSH
18745: LD_INT 2
18747: EQUAL
18748: AND
18749: PUSH
18750: LD_INT 7
18752: PUSH
18753: LD_VAR 0 5
18757: IN
18758: PUSH
18759: LD_INT 28
18761: PUSH
18762: LD_VAR 0 5
18766: IN
18767: OR
18768: PUSH
18769: LD_INT 45
18771: PUSH
18772: LD_VAR 0 5
18776: IN
18777: OR
18778: AND
18779: IFFALSE 19033
// begin hex := GetHexInfo ( x , y ) ;
18781: LD_ADDR_VAR 0 4
18785: PUSH
18786: LD_VAR 0 10
18790: PPUSH
18791: LD_VAR 0 11
18795: PPUSH
18796: CALL_OW 546
18800: ST_TO_ADDR
// if hex [ 1 ] then
18801: LD_VAR 0 4
18805: PUSH
18806: LD_INT 1
18808: ARRAY
18809: IFFALSE 18813
// exit ;
18811: GO 19216
// height := hex [ 2 ] ;
18813: LD_ADDR_VAR 0 15
18817: PUSH
18818: LD_VAR 0 4
18822: PUSH
18823: LD_INT 2
18825: ARRAY
18826: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18827: LD_ADDR_VAR 0 14
18831: PUSH
18832: LD_INT 0
18834: PUSH
18835: LD_INT 2
18837: PUSH
18838: LD_INT 3
18840: PUSH
18841: LD_INT 5
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: ST_TO_ADDR
// for i in tmp do
18850: LD_ADDR_VAR 0 8
18854: PUSH
18855: LD_VAR 0 14
18859: PUSH
18860: FOR_IN
18861: IFFALSE 19031
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18863: LD_ADDR_VAR 0 9
18867: PUSH
18868: LD_VAR 0 10
18872: PPUSH
18873: LD_VAR 0 8
18877: PPUSH
18878: LD_INT 5
18880: PPUSH
18881: CALL_OW 272
18885: PUSH
18886: LD_VAR 0 11
18890: PPUSH
18891: LD_VAR 0 8
18895: PPUSH
18896: LD_INT 5
18898: PPUSH
18899: CALL_OW 273
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18908: LD_VAR 0 9
18912: PUSH
18913: LD_INT 1
18915: ARRAY
18916: PPUSH
18917: LD_VAR 0 9
18921: PUSH
18922: LD_INT 2
18924: ARRAY
18925: PPUSH
18926: CALL_OW 488
18930: IFFALSE 19029
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18932: LD_ADDR_VAR 0 4
18936: PUSH
18937: LD_VAR 0 9
18941: PUSH
18942: LD_INT 1
18944: ARRAY
18945: PPUSH
18946: LD_VAR 0 9
18950: PUSH
18951: LD_INT 2
18953: ARRAY
18954: PPUSH
18955: CALL_OW 546
18959: ST_TO_ADDR
// if hex [ 1 ] then
18960: LD_VAR 0 4
18964: PUSH
18965: LD_INT 1
18967: ARRAY
18968: IFFALSE 18972
// continue ;
18970: GO 18860
// h := hex [ 2 ] ;
18972: LD_ADDR_VAR 0 13
18976: PUSH
18977: LD_VAR 0 4
18981: PUSH
18982: LD_INT 2
18984: ARRAY
18985: ST_TO_ADDR
// if h + 7 < height then
18986: LD_VAR 0 13
18990: PUSH
18991: LD_INT 7
18993: PLUS
18994: PUSH
18995: LD_VAR 0 15
18999: LESS
19000: IFFALSE 19029
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19002: LD_ADDR_VAR 0 18
19006: PUSH
19007: LD_INT 7
19009: PUSH
19010: LD_INT 28
19012: PUSH
19013: LD_INT 45
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: PUSH
19021: LD_VAR 0 12
19025: ARRAY
19026: ST_TO_ADDR
// break ;
19027: GO 19031
// end ; end ; end ;
19029: GO 18860
19031: POP
19032: POP
// end ; if not weapon then
19033: LD_VAR 0 18
19037: NOT
19038: IFFALSE 19098
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19040: LD_ADDR_VAR 0 5
19044: PUSH
19045: LD_VAR 0 5
19049: PUSH
19050: LD_INT 11
19052: PUSH
19053: LD_INT 30
19055: PUSH
19056: LD_INT 49
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: DIFF
19064: ST_TO_ADDR
// if not list then
19065: LD_VAR 0 5
19069: NOT
19070: IFFALSE 19074
// exit ;
19072: GO 19216
// weapon := list [ rand ( 1 , list ) ] ;
19074: LD_ADDR_VAR 0 18
19078: PUSH
19079: LD_VAR 0 5
19083: PUSH
19084: LD_INT 1
19086: PPUSH
19087: LD_VAR 0 5
19091: PPUSH
19092: CALL_OW 12
19096: ARRAY
19097: ST_TO_ADDR
// end ; if weapon then
19098: LD_VAR 0 18
19102: IFFALSE 19216
// begin tmp := CostOfWeapon ( weapon ) ;
19104: LD_ADDR_VAR 0 14
19108: PUSH
19109: LD_VAR 0 18
19113: PPUSH
19114: CALL_OW 451
19118: ST_TO_ADDR
// j := GetBase ( tower ) ;
19119: LD_ADDR_VAR 0 9
19123: PUSH
19124: LD_VAR 0 1
19128: PPUSH
19129: CALL_OW 274
19133: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19134: LD_VAR 0 9
19138: PPUSH
19139: LD_INT 1
19141: PPUSH
19142: CALL_OW 275
19146: PUSH
19147: LD_VAR 0 14
19151: PUSH
19152: LD_INT 1
19154: ARRAY
19155: GREATEREQUAL
19156: PUSH
19157: LD_VAR 0 9
19161: PPUSH
19162: LD_INT 2
19164: PPUSH
19165: CALL_OW 275
19169: PUSH
19170: LD_VAR 0 14
19174: PUSH
19175: LD_INT 2
19177: ARRAY
19178: GREATEREQUAL
19179: AND
19180: PUSH
19181: LD_VAR 0 9
19185: PPUSH
19186: LD_INT 3
19188: PPUSH
19189: CALL_OW 275
19193: PUSH
19194: LD_VAR 0 14
19198: PUSH
19199: LD_INT 3
19201: ARRAY
19202: GREATEREQUAL
19203: AND
19204: IFFALSE 19216
// result := weapon ;
19206: LD_ADDR_VAR 0 3
19210: PUSH
19211: LD_VAR 0 18
19215: ST_TO_ADDR
// end ; end ;
19216: LD_VAR 0 3
19220: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19221: LD_INT 0
19223: PPUSH
19224: PPUSH
// result := true ;
19225: LD_ADDR_VAR 0 3
19229: PUSH
19230: LD_INT 1
19232: ST_TO_ADDR
// if array1 = array2 then
19233: LD_VAR 0 1
19237: PUSH
19238: LD_VAR 0 2
19242: EQUAL
19243: IFFALSE 19303
// begin for i = 1 to array1 do
19245: LD_ADDR_VAR 0 4
19249: PUSH
19250: DOUBLE
19251: LD_INT 1
19253: DEC
19254: ST_TO_ADDR
19255: LD_VAR 0 1
19259: PUSH
19260: FOR_TO
19261: IFFALSE 19299
// if array1 [ i ] <> array2 [ i ] then
19263: LD_VAR 0 1
19267: PUSH
19268: LD_VAR 0 4
19272: ARRAY
19273: PUSH
19274: LD_VAR 0 2
19278: PUSH
19279: LD_VAR 0 4
19283: ARRAY
19284: NONEQUAL
19285: IFFALSE 19297
// begin result := false ;
19287: LD_ADDR_VAR 0 3
19291: PUSH
19292: LD_INT 0
19294: ST_TO_ADDR
// break ;
19295: GO 19299
// end ;
19297: GO 19260
19299: POP
19300: POP
// end else
19301: GO 19311
// result := false ;
19303: LD_ADDR_VAR 0 3
19307: PUSH
19308: LD_INT 0
19310: ST_TO_ADDR
// end ;
19311: LD_VAR 0 3
19315: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19316: LD_INT 0
19318: PPUSH
19319: PPUSH
// if not array1 or not array2 then
19320: LD_VAR 0 1
19324: NOT
19325: PUSH
19326: LD_VAR 0 2
19330: NOT
19331: OR
19332: IFFALSE 19336
// exit ;
19334: GO 19400
// result := true ;
19336: LD_ADDR_VAR 0 3
19340: PUSH
19341: LD_INT 1
19343: ST_TO_ADDR
// for i = 1 to array1 do
19344: LD_ADDR_VAR 0 4
19348: PUSH
19349: DOUBLE
19350: LD_INT 1
19352: DEC
19353: ST_TO_ADDR
19354: LD_VAR 0 1
19358: PUSH
19359: FOR_TO
19360: IFFALSE 19398
// if array1 [ i ] <> array2 [ i ] then
19362: LD_VAR 0 1
19366: PUSH
19367: LD_VAR 0 4
19371: ARRAY
19372: PUSH
19373: LD_VAR 0 2
19377: PUSH
19378: LD_VAR 0 4
19382: ARRAY
19383: NONEQUAL
19384: IFFALSE 19396
// begin result := false ;
19386: LD_ADDR_VAR 0 3
19390: PUSH
19391: LD_INT 0
19393: ST_TO_ADDR
// break ;
19394: GO 19398
// end ;
19396: GO 19359
19398: POP
19399: POP
// end ;
19400: LD_VAR 0 3
19404: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19405: LD_INT 0
19407: PPUSH
19408: PPUSH
19409: PPUSH
// pom := GetBase ( fac ) ;
19410: LD_ADDR_VAR 0 5
19414: PUSH
19415: LD_VAR 0 1
19419: PPUSH
19420: CALL_OW 274
19424: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19425: LD_ADDR_VAR 0 4
19429: PUSH
19430: LD_VAR 0 2
19434: PUSH
19435: LD_INT 1
19437: ARRAY
19438: PPUSH
19439: LD_VAR 0 2
19443: PUSH
19444: LD_INT 2
19446: ARRAY
19447: PPUSH
19448: LD_VAR 0 2
19452: PUSH
19453: LD_INT 3
19455: ARRAY
19456: PPUSH
19457: LD_VAR 0 2
19461: PUSH
19462: LD_INT 4
19464: ARRAY
19465: PPUSH
19466: CALL_OW 449
19470: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19471: LD_ADDR_VAR 0 3
19475: PUSH
19476: LD_VAR 0 5
19480: PPUSH
19481: LD_INT 1
19483: PPUSH
19484: CALL_OW 275
19488: PUSH
19489: LD_VAR 0 4
19493: PUSH
19494: LD_INT 1
19496: ARRAY
19497: GREATEREQUAL
19498: PUSH
19499: LD_VAR 0 5
19503: PPUSH
19504: LD_INT 2
19506: PPUSH
19507: CALL_OW 275
19511: PUSH
19512: LD_VAR 0 4
19516: PUSH
19517: LD_INT 2
19519: ARRAY
19520: GREATEREQUAL
19521: AND
19522: PUSH
19523: LD_VAR 0 5
19527: PPUSH
19528: LD_INT 3
19530: PPUSH
19531: CALL_OW 275
19535: PUSH
19536: LD_VAR 0 4
19540: PUSH
19541: LD_INT 3
19543: ARRAY
19544: GREATEREQUAL
19545: AND
19546: ST_TO_ADDR
// end ;
19547: LD_VAR 0 3
19551: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19552: LD_INT 0
19554: PPUSH
19555: PPUSH
19556: PPUSH
19557: PPUSH
// pom := GetBase ( building ) ;
19558: LD_ADDR_VAR 0 3
19562: PUSH
19563: LD_VAR 0 1
19567: PPUSH
19568: CALL_OW 274
19572: ST_TO_ADDR
// if not pom then
19573: LD_VAR 0 3
19577: NOT
19578: IFFALSE 19582
// exit ;
19580: GO 19752
// btype := GetBType ( building ) ;
19582: LD_ADDR_VAR 0 5
19586: PUSH
19587: LD_VAR 0 1
19591: PPUSH
19592: CALL_OW 266
19596: ST_TO_ADDR
// if btype = b_armoury then
19597: LD_VAR 0 5
19601: PUSH
19602: LD_INT 4
19604: EQUAL
19605: IFFALSE 19615
// btype := b_barracks ;
19607: LD_ADDR_VAR 0 5
19611: PUSH
19612: LD_INT 5
19614: ST_TO_ADDR
// if btype = b_depot then
19615: LD_VAR 0 5
19619: PUSH
19620: LD_INT 0
19622: EQUAL
19623: IFFALSE 19633
// btype := b_warehouse ;
19625: LD_ADDR_VAR 0 5
19629: PUSH
19630: LD_INT 1
19632: ST_TO_ADDR
// if btype = b_workshop then
19633: LD_VAR 0 5
19637: PUSH
19638: LD_INT 2
19640: EQUAL
19641: IFFALSE 19651
// btype := b_factory ;
19643: LD_ADDR_VAR 0 5
19647: PUSH
19648: LD_INT 3
19650: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19651: LD_ADDR_VAR 0 4
19655: PUSH
19656: LD_VAR 0 5
19660: PPUSH
19661: LD_VAR 0 1
19665: PPUSH
19666: CALL_OW 248
19670: PPUSH
19671: CALL_OW 450
19675: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19676: LD_ADDR_VAR 0 2
19680: PUSH
19681: LD_VAR 0 3
19685: PPUSH
19686: LD_INT 1
19688: PPUSH
19689: CALL_OW 275
19693: PUSH
19694: LD_VAR 0 4
19698: PUSH
19699: LD_INT 1
19701: ARRAY
19702: GREATEREQUAL
19703: PUSH
19704: LD_VAR 0 3
19708: PPUSH
19709: LD_INT 2
19711: PPUSH
19712: CALL_OW 275
19716: PUSH
19717: LD_VAR 0 4
19721: PUSH
19722: LD_INT 2
19724: ARRAY
19725: GREATEREQUAL
19726: AND
19727: PUSH
19728: LD_VAR 0 3
19732: PPUSH
19733: LD_INT 3
19735: PPUSH
19736: CALL_OW 275
19740: PUSH
19741: LD_VAR 0 4
19745: PUSH
19746: LD_INT 3
19748: ARRAY
19749: GREATEREQUAL
19750: AND
19751: ST_TO_ADDR
// end ;
19752: LD_VAR 0 2
19756: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19757: LD_INT 0
19759: PPUSH
19760: PPUSH
19761: PPUSH
// pom := GetBase ( building ) ;
19762: LD_ADDR_VAR 0 4
19766: PUSH
19767: LD_VAR 0 1
19771: PPUSH
19772: CALL_OW 274
19776: ST_TO_ADDR
// if not pom then
19777: LD_VAR 0 4
19781: NOT
19782: IFFALSE 19786
// exit ;
19784: GO 19887
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19786: LD_ADDR_VAR 0 5
19790: PUSH
19791: LD_VAR 0 2
19795: PPUSH
19796: LD_VAR 0 1
19800: PPUSH
19801: CALL_OW 248
19805: PPUSH
19806: CALL_OW 450
19810: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19811: LD_ADDR_VAR 0 3
19815: PUSH
19816: LD_VAR 0 4
19820: PPUSH
19821: LD_INT 1
19823: PPUSH
19824: CALL_OW 275
19828: PUSH
19829: LD_VAR 0 5
19833: PUSH
19834: LD_INT 1
19836: ARRAY
19837: GREATEREQUAL
19838: PUSH
19839: LD_VAR 0 4
19843: PPUSH
19844: LD_INT 2
19846: PPUSH
19847: CALL_OW 275
19851: PUSH
19852: LD_VAR 0 5
19856: PUSH
19857: LD_INT 2
19859: ARRAY
19860: GREATEREQUAL
19861: AND
19862: PUSH
19863: LD_VAR 0 4
19867: PPUSH
19868: LD_INT 3
19870: PPUSH
19871: CALL_OW 275
19875: PUSH
19876: LD_VAR 0 5
19880: PUSH
19881: LD_INT 3
19883: ARRAY
19884: GREATEREQUAL
19885: AND
19886: ST_TO_ADDR
// end ;
19887: LD_VAR 0 3
19891: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19892: LD_INT 0
19894: PPUSH
19895: PPUSH
19896: PPUSH
19897: PPUSH
19898: PPUSH
19899: PPUSH
19900: PPUSH
19901: PPUSH
19902: PPUSH
19903: PPUSH
19904: PPUSH
// result := false ;
19905: LD_ADDR_VAR 0 8
19909: PUSH
19910: LD_INT 0
19912: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19913: LD_VAR 0 5
19917: NOT
19918: PUSH
19919: LD_VAR 0 1
19923: NOT
19924: OR
19925: PUSH
19926: LD_VAR 0 2
19930: NOT
19931: OR
19932: PUSH
19933: LD_VAR 0 3
19937: NOT
19938: OR
19939: IFFALSE 19943
// exit ;
19941: GO 20757
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19943: LD_ADDR_VAR 0 14
19947: PUSH
19948: LD_VAR 0 1
19952: PPUSH
19953: LD_VAR 0 2
19957: PPUSH
19958: LD_VAR 0 3
19962: PPUSH
19963: LD_VAR 0 4
19967: PPUSH
19968: LD_VAR 0 5
19972: PUSH
19973: LD_INT 1
19975: ARRAY
19976: PPUSH
19977: CALL_OW 248
19981: PPUSH
19982: LD_INT 0
19984: PPUSH
19985: CALL 21594 0 6
19989: ST_TO_ADDR
// if not hexes then
19990: LD_VAR 0 14
19994: NOT
19995: IFFALSE 19999
// exit ;
19997: GO 20757
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19999: LD_ADDR_VAR 0 17
20003: PUSH
20004: LD_VAR 0 5
20008: PPUSH
20009: LD_INT 22
20011: PUSH
20012: LD_VAR 0 13
20016: PPUSH
20017: CALL_OW 255
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 2
20028: PUSH
20029: LD_INT 30
20031: PUSH
20032: LD_INT 0
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 30
20041: PUSH
20042: LD_INT 1
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: LIST
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PPUSH
20058: CALL_OW 72
20062: ST_TO_ADDR
// for i = 1 to hexes do
20063: LD_ADDR_VAR 0 9
20067: PUSH
20068: DOUBLE
20069: LD_INT 1
20071: DEC
20072: ST_TO_ADDR
20073: LD_VAR 0 14
20077: PUSH
20078: FOR_TO
20079: IFFALSE 20755
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20081: LD_ADDR_VAR 0 13
20085: PUSH
20086: LD_VAR 0 14
20090: PUSH
20091: LD_VAR 0 9
20095: ARRAY
20096: PUSH
20097: LD_INT 1
20099: ARRAY
20100: PPUSH
20101: LD_VAR 0 14
20105: PUSH
20106: LD_VAR 0 9
20110: ARRAY
20111: PUSH
20112: LD_INT 2
20114: ARRAY
20115: PPUSH
20116: CALL_OW 428
20120: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20121: LD_VAR 0 14
20125: PUSH
20126: LD_VAR 0 9
20130: ARRAY
20131: PUSH
20132: LD_INT 1
20134: ARRAY
20135: PPUSH
20136: LD_VAR 0 14
20140: PUSH
20141: LD_VAR 0 9
20145: ARRAY
20146: PUSH
20147: LD_INT 2
20149: ARRAY
20150: PPUSH
20151: CALL_OW 351
20155: PUSH
20156: LD_VAR 0 14
20160: PUSH
20161: LD_VAR 0 9
20165: ARRAY
20166: PUSH
20167: LD_INT 1
20169: ARRAY
20170: PPUSH
20171: LD_VAR 0 14
20175: PUSH
20176: LD_VAR 0 9
20180: ARRAY
20181: PUSH
20182: LD_INT 2
20184: ARRAY
20185: PPUSH
20186: CALL_OW 488
20190: NOT
20191: OR
20192: PUSH
20193: LD_VAR 0 13
20197: PPUSH
20198: CALL_OW 247
20202: PUSH
20203: LD_INT 3
20205: EQUAL
20206: OR
20207: IFFALSE 20213
// exit ;
20209: POP
20210: POP
20211: GO 20757
// if not tmp then
20213: LD_VAR 0 13
20217: NOT
20218: IFFALSE 20222
// continue ;
20220: GO 20078
// result := true ;
20222: LD_ADDR_VAR 0 8
20226: PUSH
20227: LD_INT 1
20229: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20230: LD_VAR 0 6
20234: PUSH
20235: LD_VAR 0 13
20239: PPUSH
20240: CALL_OW 247
20244: PUSH
20245: LD_INT 2
20247: EQUAL
20248: AND
20249: PUSH
20250: LD_VAR 0 13
20254: PPUSH
20255: CALL_OW 263
20259: PUSH
20260: LD_INT 1
20262: EQUAL
20263: AND
20264: IFFALSE 20428
// begin if IsDrivenBy ( tmp ) then
20266: LD_VAR 0 13
20270: PPUSH
20271: CALL_OW 311
20275: IFFALSE 20279
// continue ;
20277: GO 20078
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20279: LD_VAR 0 6
20283: PPUSH
20284: LD_INT 3
20286: PUSH
20287: LD_INT 60
20289: PUSH
20290: EMPTY
20291: LIST
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 3
20299: PUSH
20300: LD_INT 55
20302: PUSH
20303: EMPTY
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PPUSH
20314: CALL_OW 72
20318: IFFALSE 20426
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20320: LD_ADDR_VAR 0 18
20324: PUSH
20325: LD_VAR 0 6
20329: PPUSH
20330: LD_INT 3
20332: PUSH
20333: LD_INT 60
20335: PUSH
20336: EMPTY
20337: LIST
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 3
20345: PUSH
20346: LD_INT 55
20348: PUSH
20349: EMPTY
20350: LIST
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PPUSH
20360: CALL_OW 72
20364: PUSH
20365: LD_INT 1
20367: ARRAY
20368: ST_TO_ADDR
// if IsInUnit ( driver ) then
20369: LD_VAR 0 18
20373: PPUSH
20374: CALL_OW 310
20378: IFFALSE 20389
// ComExit ( driver ) ;
20380: LD_VAR 0 18
20384: PPUSH
20385: CALL 44778 0 1
// AddComEnterUnit ( driver , tmp ) ;
20389: LD_VAR 0 18
20393: PPUSH
20394: LD_VAR 0 13
20398: PPUSH
20399: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20403: LD_VAR 0 18
20407: PPUSH
20408: LD_VAR 0 7
20412: PPUSH
20413: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20417: LD_VAR 0 18
20421: PPUSH
20422: CALL_OW 181
// end ; continue ;
20426: GO 20078
// end ; if not cleaners or not tmp in cleaners then
20428: LD_VAR 0 6
20432: NOT
20433: PUSH
20434: LD_VAR 0 13
20438: PUSH
20439: LD_VAR 0 6
20443: IN
20444: NOT
20445: OR
20446: IFFALSE 20753
// begin if dep then
20448: LD_VAR 0 17
20452: IFFALSE 20588
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20454: LD_ADDR_VAR 0 16
20458: PUSH
20459: LD_VAR 0 17
20463: PUSH
20464: LD_INT 1
20466: ARRAY
20467: PPUSH
20468: CALL_OW 250
20472: PPUSH
20473: LD_VAR 0 17
20477: PUSH
20478: LD_INT 1
20480: ARRAY
20481: PPUSH
20482: CALL_OW 254
20486: PPUSH
20487: LD_INT 5
20489: PPUSH
20490: CALL_OW 272
20494: PUSH
20495: LD_VAR 0 17
20499: PUSH
20500: LD_INT 1
20502: ARRAY
20503: PPUSH
20504: CALL_OW 251
20508: PPUSH
20509: LD_VAR 0 17
20513: PUSH
20514: LD_INT 1
20516: ARRAY
20517: PPUSH
20518: CALL_OW 254
20522: PPUSH
20523: LD_INT 5
20525: PPUSH
20526: CALL_OW 273
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20535: LD_VAR 0 16
20539: PUSH
20540: LD_INT 1
20542: ARRAY
20543: PPUSH
20544: LD_VAR 0 16
20548: PUSH
20549: LD_INT 2
20551: ARRAY
20552: PPUSH
20553: CALL_OW 488
20557: IFFALSE 20588
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20559: LD_VAR 0 13
20563: PPUSH
20564: LD_VAR 0 16
20568: PUSH
20569: LD_INT 1
20571: ARRAY
20572: PPUSH
20573: LD_VAR 0 16
20577: PUSH
20578: LD_INT 2
20580: ARRAY
20581: PPUSH
20582: CALL_OW 111
// continue ;
20586: GO 20078
// end ; end ; r := GetDir ( tmp ) ;
20588: LD_ADDR_VAR 0 15
20592: PUSH
20593: LD_VAR 0 13
20597: PPUSH
20598: CALL_OW 254
20602: ST_TO_ADDR
// if r = 5 then
20603: LD_VAR 0 15
20607: PUSH
20608: LD_INT 5
20610: EQUAL
20611: IFFALSE 20621
// r := 0 ;
20613: LD_ADDR_VAR 0 15
20617: PUSH
20618: LD_INT 0
20620: ST_TO_ADDR
// for j = r to 5 do
20621: LD_ADDR_VAR 0 10
20625: PUSH
20626: DOUBLE
20627: LD_VAR 0 15
20631: DEC
20632: ST_TO_ADDR
20633: LD_INT 5
20635: PUSH
20636: FOR_TO
20637: IFFALSE 20751
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20639: LD_ADDR_VAR 0 11
20643: PUSH
20644: LD_VAR 0 13
20648: PPUSH
20649: CALL_OW 250
20653: PPUSH
20654: LD_VAR 0 10
20658: PPUSH
20659: LD_INT 2
20661: PPUSH
20662: CALL_OW 272
20666: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20667: LD_ADDR_VAR 0 12
20671: PUSH
20672: LD_VAR 0 13
20676: PPUSH
20677: CALL_OW 251
20681: PPUSH
20682: LD_VAR 0 10
20686: PPUSH
20687: LD_INT 2
20689: PPUSH
20690: CALL_OW 273
20694: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20695: LD_VAR 0 11
20699: PPUSH
20700: LD_VAR 0 12
20704: PPUSH
20705: CALL_OW 488
20709: PUSH
20710: LD_VAR 0 11
20714: PPUSH
20715: LD_VAR 0 12
20719: PPUSH
20720: CALL_OW 428
20724: NOT
20725: AND
20726: IFFALSE 20749
// begin ComMoveXY ( tmp , _x , _y ) ;
20728: LD_VAR 0 13
20732: PPUSH
20733: LD_VAR 0 11
20737: PPUSH
20738: LD_VAR 0 12
20742: PPUSH
20743: CALL_OW 111
// break ;
20747: GO 20751
// end ; end ;
20749: GO 20636
20751: POP
20752: POP
// end ; end ;
20753: GO 20078
20755: POP
20756: POP
// end ;
20757: LD_VAR 0 8
20761: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
20762: LD_INT 0
20764: PPUSH
20765: PPUSH
20766: PPUSH
20767: PPUSH
20768: PPUSH
20769: PPUSH
20770: PPUSH
20771: PPUSH
20772: PPUSH
20773: PPUSH
// result := false ;
20774: LD_ADDR_VAR 0 6
20778: PUSH
20779: LD_INT 0
20781: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
20782: LD_VAR 0 1
20786: NOT
20787: PUSH
20788: LD_VAR 0 1
20792: PPUSH
20793: CALL_OW 266
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: IN
20808: NOT
20809: OR
20810: PUSH
20811: LD_VAR 0 2
20815: NOT
20816: OR
20817: PUSH
20818: LD_VAR 0 5
20822: PUSH
20823: LD_INT 0
20825: PUSH
20826: LD_INT 1
20828: PUSH
20829: LD_INT 2
20831: PUSH
20832: LD_INT 3
20834: PUSH
20835: LD_INT 4
20837: PUSH
20838: LD_INT 5
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: IN
20849: NOT
20850: OR
20851: PUSH
20852: LD_VAR 0 3
20856: PPUSH
20857: LD_VAR 0 4
20861: PPUSH
20862: CALL_OW 488
20866: NOT
20867: OR
20868: IFFALSE 20872
// exit ;
20870: GO 21589
// pom := GetBase ( depot ) ;
20872: LD_ADDR_VAR 0 10
20876: PUSH
20877: LD_VAR 0 1
20881: PPUSH
20882: CALL_OW 274
20886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
20887: LD_ADDR_VAR 0 11
20891: PUSH
20892: LD_VAR 0 2
20896: PPUSH
20897: LD_VAR 0 1
20901: PPUSH
20902: CALL_OW 248
20906: PPUSH
20907: CALL_OW 450
20911: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
20912: LD_VAR 0 10
20916: PPUSH
20917: LD_INT 1
20919: PPUSH
20920: CALL_OW 275
20924: PUSH
20925: LD_VAR 0 11
20929: PUSH
20930: LD_INT 1
20932: ARRAY
20933: GREATEREQUAL
20934: PUSH
20935: LD_VAR 0 10
20939: PPUSH
20940: LD_INT 2
20942: PPUSH
20943: CALL_OW 275
20947: PUSH
20948: LD_VAR 0 11
20952: PUSH
20953: LD_INT 2
20955: ARRAY
20956: GREATEREQUAL
20957: AND
20958: PUSH
20959: LD_VAR 0 10
20963: PPUSH
20964: LD_INT 3
20966: PPUSH
20967: CALL_OW 275
20971: PUSH
20972: LD_VAR 0 11
20976: PUSH
20977: LD_INT 3
20979: ARRAY
20980: GREATEREQUAL
20981: AND
20982: NOT
20983: IFFALSE 20987
// exit ;
20985: GO 21589
// if GetBType ( depot ) = b_depot then
20987: LD_VAR 0 1
20991: PPUSH
20992: CALL_OW 266
20996: PUSH
20997: LD_INT 0
20999: EQUAL
21000: IFFALSE 21012
// dist := 28 else
21002: LD_ADDR_VAR 0 14
21006: PUSH
21007: LD_INT 28
21009: ST_TO_ADDR
21010: GO 21020
// dist := 36 ;
21012: LD_ADDR_VAR 0 14
21016: PUSH
21017: LD_INT 36
21019: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21020: LD_VAR 0 1
21024: PPUSH
21025: LD_VAR 0 3
21029: PPUSH
21030: LD_VAR 0 4
21034: PPUSH
21035: CALL_OW 297
21039: PUSH
21040: LD_VAR 0 14
21044: GREATER
21045: IFFALSE 21049
// exit ;
21047: GO 21589
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21049: LD_ADDR_VAR 0 12
21053: PUSH
21054: LD_VAR 0 2
21058: PPUSH
21059: LD_VAR 0 3
21063: PPUSH
21064: LD_VAR 0 4
21068: PPUSH
21069: LD_VAR 0 5
21073: PPUSH
21074: LD_VAR 0 1
21078: PPUSH
21079: CALL_OW 248
21083: PPUSH
21084: LD_INT 0
21086: PPUSH
21087: CALL 21594 0 6
21091: ST_TO_ADDR
// if not hexes then
21092: LD_VAR 0 12
21096: NOT
21097: IFFALSE 21101
// exit ;
21099: GO 21589
// hex := GetHexInfo ( x , y ) ;
21101: LD_ADDR_VAR 0 15
21105: PUSH
21106: LD_VAR 0 3
21110: PPUSH
21111: LD_VAR 0 4
21115: PPUSH
21116: CALL_OW 546
21120: ST_TO_ADDR
// if hex [ 1 ] then
21121: LD_VAR 0 15
21125: PUSH
21126: LD_INT 1
21128: ARRAY
21129: IFFALSE 21133
// exit ;
21131: GO 21589
// height := hex [ 2 ] ;
21133: LD_ADDR_VAR 0 13
21137: PUSH
21138: LD_VAR 0 15
21142: PUSH
21143: LD_INT 2
21145: ARRAY
21146: ST_TO_ADDR
// for i = 1 to hexes do
21147: LD_ADDR_VAR 0 7
21151: PUSH
21152: DOUBLE
21153: LD_INT 1
21155: DEC
21156: ST_TO_ADDR
21157: LD_VAR 0 12
21161: PUSH
21162: FOR_TO
21163: IFFALSE 21493
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21165: LD_VAR 0 12
21169: PUSH
21170: LD_VAR 0 7
21174: ARRAY
21175: PUSH
21176: LD_INT 1
21178: ARRAY
21179: PPUSH
21180: LD_VAR 0 12
21184: PUSH
21185: LD_VAR 0 7
21189: ARRAY
21190: PUSH
21191: LD_INT 2
21193: ARRAY
21194: PPUSH
21195: CALL_OW 488
21199: NOT
21200: PUSH
21201: LD_VAR 0 12
21205: PUSH
21206: LD_VAR 0 7
21210: ARRAY
21211: PUSH
21212: LD_INT 1
21214: ARRAY
21215: PPUSH
21216: LD_VAR 0 12
21220: PUSH
21221: LD_VAR 0 7
21225: ARRAY
21226: PUSH
21227: LD_INT 2
21229: ARRAY
21230: PPUSH
21231: CALL_OW 428
21235: PUSH
21236: LD_INT 0
21238: GREATER
21239: OR
21240: PUSH
21241: LD_VAR 0 12
21245: PUSH
21246: LD_VAR 0 7
21250: ARRAY
21251: PUSH
21252: LD_INT 1
21254: ARRAY
21255: PPUSH
21256: LD_VAR 0 12
21260: PUSH
21261: LD_VAR 0 7
21265: ARRAY
21266: PUSH
21267: LD_INT 2
21269: ARRAY
21270: PPUSH
21271: CALL_OW 351
21275: OR
21276: IFFALSE 21282
// exit ;
21278: POP
21279: POP
21280: GO 21589
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21282: LD_ADDR_VAR 0 8
21286: PUSH
21287: LD_VAR 0 12
21291: PUSH
21292: LD_VAR 0 7
21296: ARRAY
21297: PUSH
21298: LD_INT 1
21300: ARRAY
21301: PPUSH
21302: LD_VAR 0 12
21306: PUSH
21307: LD_VAR 0 7
21311: ARRAY
21312: PUSH
21313: LD_INT 2
21315: ARRAY
21316: PPUSH
21317: CALL_OW 546
21321: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21322: LD_VAR 0 8
21326: PUSH
21327: LD_INT 1
21329: ARRAY
21330: PUSH
21331: LD_VAR 0 8
21335: PUSH
21336: LD_INT 2
21338: ARRAY
21339: PUSH
21340: LD_VAR 0 13
21344: PUSH
21345: LD_INT 2
21347: PLUS
21348: GREATER
21349: OR
21350: PUSH
21351: LD_VAR 0 8
21355: PUSH
21356: LD_INT 2
21358: ARRAY
21359: PUSH
21360: LD_VAR 0 13
21364: PUSH
21365: LD_INT 2
21367: MINUS
21368: LESS
21369: OR
21370: PUSH
21371: LD_VAR 0 8
21375: PUSH
21376: LD_INT 3
21378: ARRAY
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: LD_INT 8
21385: PUSH
21386: LD_INT 9
21388: PUSH
21389: LD_INT 10
21391: PUSH
21392: LD_INT 11
21394: PUSH
21395: LD_INT 12
21397: PUSH
21398: LD_INT 13
21400: PUSH
21401: LD_INT 16
21403: PUSH
21404: LD_INT 17
21406: PUSH
21407: LD_INT 18
21409: PUSH
21410: LD_INT 19
21412: PUSH
21413: LD_INT 20
21415: PUSH
21416: LD_INT 21
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: IN
21434: NOT
21435: OR
21436: PUSH
21437: LD_VAR 0 8
21441: PUSH
21442: LD_INT 5
21444: ARRAY
21445: NOT
21446: OR
21447: PUSH
21448: LD_VAR 0 8
21452: PUSH
21453: LD_INT 6
21455: ARRAY
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: LD_INT 2
21462: PUSH
21463: LD_INT 7
21465: PUSH
21466: LD_INT 9
21468: PUSH
21469: LD_INT 10
21471: PUSH
21472: LD_INT 11
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: IN
21483: NOT
21484: OR
21485: IFFALSE 21491
// exit ;
21487: POP
21488: POP
21489: GO 21589
// end ;
21491: GO 21162
21493: POP
21494: POP
// side := GetSide ( depot ) ;
21495: LD_ADDR_VAR 0 9
21499: PUSH
21500: LD_VAR 0 1
21504: PPUSH
21505: CALL_OW 255
21509: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21510: LD_VAR 0 9
21514: PPUSH
21515: LD_VAR 0 3
21519: PPUSH
21520: LD_VAR 0 4
21524: PPUSH
21525: LD_INT 20
21527: PPUSH
21528: CALL 13910 0 4
21532: PUSH
21533: LD_INT 4
21535: ARRAY
21536: IFFALSE 21540
// exit ;
21538: GO 21589
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21540: LD_VAR 0 2
21544: PUSH
21545: LD_INT 29
21547: PUSH
21548: LD_INT 30
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: IN
21555: PUSH
21556: LD_VAR 0 3
21560: PPUSH
21561: LD_VAR 0 4
21565: PPUSH
21566: LD_VAR 0 9
21570: PPUSH
21571: CALL_OW 440
21575: NOT
21576: AND
21577: IFFALSE 21581
// exit ;
21579: GO 21589
// result := true ;
21581: LD_ADDR_VAR 0 6
21585: PUSH
21586: LD_INT 1
21588: ST_TO_ADDR
// end ;
21589: LD_VAR 0 6
21593: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21594: LD_INT 0
21596: PPUSH
21597: PPUSH
21598: PPUSH
21599: PPUSH
21600: PPUSH
21601: PPUSH
21602: PPUSH
21603: PPUSH
21604: PPUSH
21605: PPUSH
21606: PPUSH
21607: PPUSH
21608: PPUSH
21609: PPUSH
21610: PPUSH
21611: PPUSH
21612: PPUSH
21613: PPUSH
21614: PPUSH
21615: PPUSH
21616: PPUSH
21617: PPUSH
21618: PPUSH
21619: PPUSH
21620: PPUSH
21621: PPUSH
21622: PPUSH
21623: PPUSH
21624: PPUSH
21625: PPUSH
21626: PPUSH
21627: PPUSH
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
21632: PPUSH
21633: PPUSH
21634: PPUSH
21635: PPUSH
21636: PPUSH
21637: PPUSH
21638: PPUSH
21639: PPUSH
21640: PPUSH
21641: PPUSH
21642: PPUSH
21643: PPUSH
21644: PPUSH
21645: PPUSH
21646: PPUSH
21647: PPUSH
21648: PPUSH
21649: PPUSH
21650: PPUSH
21651: PPUSH
21652: PPUSH
21653: PPUSH
// result = [ ] ;
21654: LD_ADDR_VAR 0 7
21658: PUSH
21659: EMPTY
21660: ST_TO_ADDR
// temp_list = [ ] ;
21661: LD_ADDR_VAR 0 9
21665: PUSH
21666: EMPTY
21667: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
21668: LD_VAR 0 4
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: LD_INT 1
21678: PUSH
21679: LD_INT 2
21681: PUSH
21682: LD_INT 3
21684: PUSH
21685: LD_INT 4
21687: PUSH
21688: LD_INT 5
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: IN
21699: NOT
21700: PUSH
21701: LD_VAR 0 1
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: LD_INT 1
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: IN
21716: PUSH
21717: LD_VAR 0 5
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: LD_INT 2
21727: PUSH
21728: LD_INT 3
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: IN
21736: NOT
21737: AND
21738: OR
21739: IFFALSE 21743
// exit ;
21741: GO 40134
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
21743: LD_VAR 0 1
21747: PUSH
21748: LD_INT 6
21750: PUSH
21751: LD_INT 7
21753: PUSH
21754: LD_INT 8
21756: PUSH
21757: LD_INT 13
21759: PUSH
21760: LD_INT 12
21762: PUSH
21763: LD_INT 15
21765: PUSH
21766: LD_INT 11
21768: PUSH
21769: LD_INT 14
21771: PUSH
21772: LD_INT 10
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: IN
21786: IFFALSE 21796
// btype = b_lab ;
21788: LD_ADDR_VAR 0 1
21792: PUSH
21793: LD_INT 6
21795: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
21796: LD_VAR 0 6
21800: PUSH
21801: LD_INT 0
21803: PUSH
21804: LD_INT 1
21806: PUSH
21807: LD_INT 2
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: IN
21815: NOT
21816: PUSH
21817: LD_VAR 0 1
21821: PUSH
21822: LD_INT 0
21824: PUSH
21825: LD_INT 1
21827: PUSH
21828: LD_INT 2
21830: PUSH
21831: LD_INT 3
21833: PUSH
21834: LD_INT 6
21836: PUSH
21837: LD_INT 36
21839: PUSH
21840: LD_INT 4
21842: PUSH
21843: LD_INT 5
21845: PUSH
21846: LD_INT 31
21848: PUSH
21849: LD_INT 32
21851: PUSH
21852: LD_INT 33
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: IN
21868: NOT
21869: PUSH
21870: LD_VAR 0 6
21874: PUSH
21875: LD_INT 1
21877: EQUAL
21878: AND
21879: OR
21880: PUSH
21881: LD_VAR 0 1
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: LD_INT 3
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: IN
21896: NOT
21897: PUSH
21898: LD_VAR 0 6
21902: PUSH
21903: LD_INT 2
21905: EQUAL
21906: AND
21907: OR
21908: IFFALSE 21918
// mode = 0 ;
21910: LD_ADDR_VAR 0 6
21914: PUSH
21915: LD_INT 0
21917: ST_TO_ADDR
// case mode of 0 :
21918: LD_VAR 0 6
21922: PUSH
21923: LD_INT 0
21925: DOUBLE
21926: EQUAL
21927: IFTRUE 21931
21929: GO 33384
21931: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21932: LD_ADDR_VAR 0 11
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: LD_INT 0
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 0
21949: PUSH
21950: LD_INT 1
21952: NEG
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 1
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 0
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 1
21990: NEG
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 1
22001: NEG
22002: PUSH
22003: LD_INT 1
22005: NEG
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: NEG
22014: PUSH
22015: LD_INT 2
22017: NEG
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 0
22025: PUSH
22026: LD_INT 2
22028: NEG
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: LD_INT 1
22039: NEG
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 1
22047: PUSH
22048: LD_INT 2
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: LD_INT 3
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 0
22088: PUSH
22089: LD_INT 3
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22125: LD_ADDR_VAR 0 12
22129: PUSH
22130: LD_INT 0
22132: PUSH
22133: LD_INT 0
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 0
22142: PUSH
22143: LD_INT 1
22145: NEG
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: PUSH
22154: LD_INT 0
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: LD_INT 1
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 0
22173: PUSH
22174: LD_INT 1
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 1
22183: NEG
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 1
22194: NEG
22195: PUSH
22196: LD_INT 1
22198: NEG
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: LD_INT 1
22209: NEG
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 2
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 2
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 2
22248: NEG
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 2
22259: NEG
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 2
22271: NEG
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 3
22282: NEG
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 3
22293: NEG
22294: PUSH
22295: LD_INT 1
22297: NEG
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22321: LD_ADDR_VAR 0 13
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: LD_INT 1
22341: NEG
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: LD_INT 0
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 1
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 0
22369: PUSH
22370: LD_INT 1
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 1
22379: NEG
22380: PUSH
22381: LD_INT 0
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 1
22390: NEG
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: LD_INT 2
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 2
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 1
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 2
22444: NEG
22445: PUSH
22446: LD_INT 1
22448: NEG
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 2
22456: NEG
22457: PUSH
22458: LD_INT 2
22460: NEG
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 2
22468: NEG
22469: PUSH
22470: LD_INT 3
22472: NEG
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 3
22480: NEG
22481: PUSH
22482: LD_INT 2
22484: NEG
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 3
22492: NEG
22493: PUSH
22494: LD_INT 3
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22520: LD_ADDR_VAR 0 14
22524: PUSH
22525: LD_INT 0
22527: PUSH
22528: LD_INT 0
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 0
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: LD_INT 0
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 0
22568: PUSH
22569: LD_INT 1
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: PUSH
22580: LD_INT 0
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 1
22589: NEG
22590: PUSH
22591: LD_INT 1
22593: NEG
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: LD_INT 2
22605: NEG
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 0
22613: PUSH
22614: LD_INT 2
22616: NEG
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: LD_INT 2
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 0
22645: PUSH
22646: LD_INT 2
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 1
22655: NEG
22656: PUSH
22657: LD_INT 1
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 1
22666: NEG
22667: PUSH
22668: LD_INT 3
22670: NEG
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 0
22678: PUSH
22679: LD_INT 3
22681: NEG
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 1
22689: PUSH
22690: LD_INT 2
22692: NEG
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22716: LD_ADDR_VAR 0 15
22720: PUSH
22721: LD_INT 0
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 0
22733: PUSH
22734: LD_INT 1
22736: NEG
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: LD_INT 1
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 0
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 1
22774: NEG
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 1
22785: NEG
22786: PUSH
22787: LD_INT 1
22789: NEG
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 1
22797: PUSH
22798: LD_INT 1
22800: NEG
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 2
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 2
22839: NEG
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 2
22850: NEG
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 1
22865: NEG
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 3
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 3
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22909: LD_ADDR_VAR 0 16
22913: PUSH
22914: LD_INT 0
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 1
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 1
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 0
22957: PUSH
22958: LD_INT 1
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: NEG
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 1
22978: NEG
22979: PUSH
22980: LD_INT 1
22982: NEG
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 1
22990: NEG
22991: PUSH
22992: LD_INT 2
22994: NEG
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 2
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 2
23032: NEG
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 2
23044: NEG
23045: PUSH
23046: LD_INT 2
23048: NEG
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 3
23056: PUSH
23057: LD_INT 2
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 3
23066: PUSH
23067: LD_INT 3
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 2
23076: PUSH
23077: LD_INT 3
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23102: LD_ADDR_VAR 0 17
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 0
23119: PUSH
23120: LD_INT 1
23122: NEG
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 0
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 1
23160: NEG
23161: PUSH
23162: LD_INT 0
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 1
23171: NEG
23172: PUSH
23173: LD_INT 1
23175: NEG
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 1
23183: NEG
23184: PUSH
23185: LD_INT 2
23187: NEG
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 0
23195: PUSH
23196: LD_INT 2
23198: NEG
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 1
23206: PUSH
23207: LD_INT 1
23209: NEG
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: LD_INT 0
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 2
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 2
23237: PUSH
23238: LD_INT 2
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: LD_INT 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: NEG
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 2
23278: NEG
23279: PUSH
23280: LD_INT 0
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: NEG
23290: PUSH
23291: LD_INT 1
23293: NEG
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 2
23301: NEG
23302: PUSH
23303: LD_INT 2
23305: NEG
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23332: LD_ADDR_VAR 0 18
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: LD_INT 0
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 1
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PUSH
23392: LD_INT 0
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: LD_INT 1
23405: NEG
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 1
23413: NEG
23414: PUSH
23415: LD_INT 2
23417: NEG
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: LD_INT 2
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: LD_INT 1
23439: NEG
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 2
23447: PUSH
23448: LD_INT 0
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 2
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 2
23467: PUSH
23468: LD_INT 2
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: LD_INT 1
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 2
23508: NEG
23509: PUSH
23510: LD_INT 0
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 2
23519: NEG
23520: PUSH
23521: LD_INT 1
23523: NEG
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 2
23531: NEG
23532: PUSH
23533: LD_INT 2
23535: NEG
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23562: LD_ADDR_VAR 0 19
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 0
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 0
23610: PUSH
23611: LD_INT 1
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 1
23620: NEG
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: LD_INT 1
23635: NEG
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 1
23643: NEG
23644: PUSH
23645: LD_INT 2
23647: NEG
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: LD_INT 2
23658: NEG
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: LD_INT 1
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 2
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 2
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: LD_INT 2
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 1
23707: PUSH
23708: LD_INT 2
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: LD_INT 2
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 1
23727: NEG
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: NEG
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 2
23749: NEG
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 2
23761: NEG
23762: PUSH
23763: LD_INT 2
23765: NEG
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23792: LD_ADDR_VAR 0 20
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: NEG
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 1
23873: NEG
23874: PUSH
23875: LD_INT 2
23877: NEG
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: LD_INT 2
23888: NEG
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: LD_INT 1
23899: NEG
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 2
23907: PUSH
23908: LD_INT 0
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 2
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 2
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: LD_INT 2
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: LD_INT 2
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 1
23957: NEG
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 2
23968: NEG
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 2
23979: NEG
23980: PUSH
23981: LD_INT 1
23983: NEG
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 2
23991: NEG
23992: PUSH
23993: LD_INT 2
23995: NEG
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24022: LD_ADDR_VAR 0 21
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: LD_INT 0
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: LD_INT 1
24042: NEG
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: NEG
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 1
24103: NEG
24104: PUSH
24105: LD_INT 2
24107: NEG
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 0
24115: PUSH
24116: LD_INT 2
24118: NEG
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: LD_INT 1
24129: NEG
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: LD_INT 2
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: LD_INT 2
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: LD_INT 2
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 2
24198: NEG
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 2
24209: NEG
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 2
24221: NEG
24222: PUSH
24223: LD_INT 2
24225: NEG
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24252: LD_ADDR_VAR 0 22
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: LD_INT 1
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: NEG
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: LD_INT 2
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 1
24356: PUSH
24357: LD_INT 1
24359: NEG
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: LD_INT 0
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: LD_INT 1
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: LD_INT 2
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 0
24407: PUSH
24408: LD_INT 2
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 1
24417: NEG
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 2
24428: NEG
24429: PUSH
24430: LD_INT 0
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 2
24439: NEG
24440: PUSH
24441: LD_INT 1
24443: NEG
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 2
24451: NEG
24452: PUSH
24453: LD_INT 2
24455: NEG
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24482: LD_ADDR_VAR 0 23
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: LD_INT 0
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: LD_INT 1
24502: NEG
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: NEG
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: NEG
24552: PUSH
24553: LD_INT 1
24555: NEG
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: LD_INT 2
24567: NEG
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 0
24575: PUSH
24576: LD_INT 2
24578: NEG
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 1
24586: PUSH
24587: LD_INT 1
24589: NEG
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 2
24597: PUSH
24598: LD_INT 0
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: LD_INT 1
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: LD_INT 2
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 1
24627: PUSH
24628: LD_INT 2
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: LD_INT 2
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: NEG
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 2
24658: NEG
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 2
24669: NEG
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 2
24681: NEG
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 2
24693: NEG
24694: PUSH
24695: LD_INT 3
24697: NEG
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 1
24705: NEG
24706: PUSH
24707: LD_INT 3
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: PUSH
24718: LD_INT 2
24720: NEG
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: LD_INT 1
24731: NEG
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
24762: LD_ADDR_VAR 0 24
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: LD_INT 1
24782: NEG
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: NEG
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: NEG
24832: PUSH
24833: LD_INT 1
24835: NEG
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 1
24843: NEG
24844: PUSH
24845: LD_INT 2
24847: NEG
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: LD_INT 2
24858: NEG
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 2
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 2
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 2
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: LD_INT 2
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 2
24938: NEG
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 2
24949: NEG
24950: PUSH
24951: LD_INT 1
24953: NEG
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 2
24961: NEG
24962: PUSH
24963: LD_INT 2
24965: NEG
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: LD_INT 2
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 2
24984: PUSH
24985: LD_INT 1
24987: NEG
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 3
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25038: LD_ADDR_VAR 0 25
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 0
25055: PUSH
25056: LD_INT 1
25058: NEG
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: LD_INT 0
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: LD_INT 1
25111: NEG
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 1
25119: NEG
25120: PUSH
25121: LD_INT 2
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: LD_INT 2
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 2
25153: PUSH
25154: LD_INT 0
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: LD_INT 1
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 2
25173: PUSH
25174: LD_INT 2
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: LD_INT 2
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 0
25193: PUSH
25194: LD_INT 2
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 1
25203: NEG
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 2
25214: NEG
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 2
25225: NEG
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: NEG
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 3
25249: PUSH
25250: LD_INT 1
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 3
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 2
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 1
25279: PUSH
25280: LD_INT 3
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25312: LD_ADDR_VAR 0 26
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: LD_INT 1
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: LD_INT 2
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: LD_INT 2
25408: NEG
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: LD_INT 1
25419: NEG
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: LD_INT 2
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: LD_INT 2
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: LD_INT 2
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 1
25477: NEG
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 2
25488: NEG
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 2
25499: NEG
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 2
25511: NEG
25512: PUSH
25513: LD_INT 2
25515: NEG
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 2
25523: PUSH
25524: LD_INT 3
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 1
25533: PUSH
25534: LD_INT 3
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 2
25554: NEG
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25588: LD_ADDR_VAR 0 27
25592: PUSH
25593: LD_INT 0
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: LD_INT 1
25608: NEG
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 1
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 1
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 0
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 1
25646: NEG
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: LD_INT 1
25661: NEG
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: LD_INT 2
25673: NEG
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: LD_INT 2
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 2
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 2
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 2
25723: PUSH
25724: LD_INT 2
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: LD_INT 2
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: LD_INT 2
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 1
25753: NEG
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 2
25764: NEG
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 2
25775: NEG
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 2
25787: NEG
25788: PUSH
25789: LD_INT 2
25791: NEG
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 1
25799: NEG
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 2
25810: NEG
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 3
25821: NEG
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 3
25833: NEG
25834: PUSH
25835: LD_INT 2
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25868: LD_ADDR_VAR 0 28
25872: PUSH
25873: LD_INT 0
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: LD_INT 2
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 0
25961: PUSH
25962: LD_INT 2
25964: NEG
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: LD_INT 2
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: LD_INT 2
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: LD_INT 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: NEG
26045: PUSH
26046: LD_INT 0
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 2
26055: NEG
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 2
26067: NEG
26068: PUSH
26069: LD_INT 2
26071: NEG
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 2
26079: NEG
26080: PUSH
26081: LD_INT 3
26083: NEG
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 1
26091: NEG
26092: PUSH
26093: LD_INT 3
26095: NEG
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 3
26103: NEG
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 3
26115: NEG
26116: PUSH
26117: LD_INT 2
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26150: LD_ADDR_VAR 0 29
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PUSH
26210: LD_INT 0
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: LD_INT 2
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: LD_INT 2
26246: NEG
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 2
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: LD_INT 2
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 2
26328: NEG
26329: PUSH
26330: LD_INT 2
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: LD_INT 3
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: PUSH
26353: LD_INT 1
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 3
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: LD_INT 2
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 3
26394: NEG
26395: PUSH
26396: LD_INT 2
26398: NEG
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26429: LD_ADDR_VAR 0 30
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: LD_INT 1
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: LD_INT 1
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: LD_INT 2
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 1
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 2
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 1
26574: PUSH
26575: LD_INT 2
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: LD_INT 1
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 2
26595: NEG
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 2
26606: NEG
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: LD_INT 3
26622: NEG
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: LD_INT 2
26633: NEG
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 3
26641: PUSH
26642: LD_INT 2
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 2
26651: PUSH
26652: LD_INT 3
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 2
26661: NEG
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 3
26672: NEG
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26707: LD_ADDR_VAR 0 31
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 1
26776: NEG
26777: PUSH
26778: LD_INT 1
26780: NEG
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 1
26788: NEG
26789: PUSH
26790: LD_INT 2
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 2
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 2
26872: NEG
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 2
26884: NEG
26885: PUSH
26886: LD_INT 2
26888: NEG
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 2
26896: NEG
26897: PUSH
26898: LD_INT 3
26900: NEG
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 2
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 3
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: LD_INT 3
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 3
26950: NEG
26951: PUSH
26952: LD_INT 2
26954: NEG
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26985: LD_ADDR_VAR 0 32
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: LD_INT 2
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 0
27078: PUSH
27079: LD_INT 2
27081: NEG
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: LD_INT 1
27092: NEG
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: LD_INT 2
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: LD_INT 2
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 2
27151: NEG
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 2
27162: NEG
27163: PUSH
27164: LD_INT 1
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: LD_INT 3
27178: NEG
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: LD_INT 2
27189: NEG
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 3
27197: PUSH
27198: LD_INT 2
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 2
27207: PUSH
27208: LD_INT 3
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 2
27217: NEG
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 3
27228: NEG
27229: PUSH
27230: LD_INT 1
27232: NEG
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27263: LD_ADDR_VAR 0 33
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: NEG
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: LD_INT 2
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: LD_INT 1
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: LD_INT 0
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 1
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: LD_INT 2
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: NEG
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 2
27418: NEG
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 2
27429: NEG
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 2
27441: NEG
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 2
27453: NEG
27454: PUSH
27455: LD_INT 3
27457: NEG
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 2
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 3
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: LD_INT 3
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: NEG
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 3
27507: NEG
27508: PUSH
27509: LD_INT 2
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27542: LD_ADDR_VAR 0 34
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: LD_INT 1
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: LD_INT 1
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: LD_INT 1
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: NEG
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: NEG
27624: PUSH
27625: LD_INT 2
27627: NEG
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 2
27638: NEG
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 1
27646: PUSH
27647: LD_INT 1
27649: NEG
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 2
27667: PUSH
27668: LD_INT 2
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: LD_INT 2
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 2
27698: NEG
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: LD_INT 1
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 2
27721: NEG
27722: PUSH
27723: LD_INT 2
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: LD_INT 3
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 2
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 3
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 2
27766: PUSH
27767: LD_INT 3
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 2
27776: NEG
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 3
27787: NEG
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27822: LD_ADDR_VAR 0 35
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: LD_INT 0
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: LD_INT 1
27842: NEG
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: PUSH
27882: LD_INT 0
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: LD_INT 1
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 2
27913: NEG
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27934: LD_ADDR_VAR 0 36
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: LD_INT 0
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: NEG
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: LD_INT 2
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28046: LD_ADDR_VAR 0 37
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: LD_INT 1
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: LD_INT 1
28130: NEG
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28158: LD_ADDR_VAR 0 38
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: LD_INT 1
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 2
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: NEG
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28270: LD_ADDR_VAR 0 39
28274: PUSH
28275: LD_INT 0
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 1
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: LD_INT 1
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 0
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 1
28328: NEG
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 1
28339: NEG
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: LD_INT 2
28355: NEG
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: LD_INT 2
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28382: LD_ADDR_VAR 0 40
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: LD_INT 0
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: NEG
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28494: LD_ADDR_VAR 0 41
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: LD_INT 0
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 0
28511: PUSH
28512: LD_INT 1
28514: NEG
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: LD_INT 2
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 2
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 2
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 2
28618: PUSH
28619: LD_INT 2
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: LD_INT 2
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 1
28638: NEG
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 2
28649: NEG
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 2
28660: NEG
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 2
28672: NEG
28673: PUSH
28674: LD_INT 2
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 2
28684: NEG
28685: PUSH
28686: LD_INT 3
28688: NEG
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 3
28707: PUSH
28708: LD_INT 0
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 3
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 3
28727: PUSH
28728: LD_INT 2
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 3
28737: PUSH
28738: LD_INT 3
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: LD_INT 3
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 2
28757: NEG
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 3
28768: NEG
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 3
28779: NEG
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 3
28791: NEG
28792: PUSH
28793: LD_INT 2
28795: NEG
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 3
28803: NEG
28804: PUSH
28805: LD_INT 3
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28844: LD_ADDR_VAR 0 42
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 1
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 2
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: LD_INT 2
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 2
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 1
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 2
29010: NEG
29011: PUSH
29012: LD_INT 1
29014: NEG
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 2
29022: NEG
29023: PUSH
29024: LD_INT 2
29026: NEG
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 2
29034: NEG
29035: PUSH
29036: LD_INT 3
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: NEG
29047: PUSH
29048: LD_INT 3
29050: NEG
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 0
29058: PUSH
29059: LD_INT 3
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: LD_INT 2
29072: NEG
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 3
29080: PUSH
29081: LD_INT 2
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 3
29090: PUSH
29091: LD_INT 3
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 2
29100: PUSH
29101: LD_INT 3
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: PUSH
29111: LD_INT 3
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: LD_INT 3
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: NEG
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 3
29141: NEG
29142: PUSH
29143: LD_INT 2
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 3
29153: NEG
29154: PUSH
29155: LD_INT 3
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29194: LD_ADDR_VAR 0 43
29198: PUSH
29199: LD_INT 0
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: NEG
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: LD_INT 2
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 2
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: LD_INT 2
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: LD_INT 2
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 1
29349: NEG
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 2
29360: NEG
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 2
29371: NEG
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: LD_INT 3
29387: NEG
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: LD_INT 3
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 1
29406: PUSH
29407: LD_INT 2
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 2
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 3
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: LD_INT 1
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: LD_INT 3
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: LD_INT 3
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: LD_INT 2
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 2
29479: NEG
29480: PUSH
29481: LD_INT 1
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 3
29490: NEG
29491: PUSH
29492: LD_INT 0
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 3
29501: NEG
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29542: LD_ADDR_VAR 0 44
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 1
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 0
29590: PUSH
29591: LD_INT 1
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: LD_INT 1
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 1
29623: NEG
29624: PUSH
29625: LD_INT 2
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: LD_INT 1
29638: NEG
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: LD_INT 0
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 2
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: PUSH
29677: LD_INT 2
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 2
29697: NEG
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 2
29708: NEG
29709: PUSH
29710: LD_INT 1
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 2
29720: NEG
29721: PUSH
29722: LD_INT 2
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: NEG
29733: PUSH
29734: LD_INT 3
29736: NEG
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 2
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 3
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 3
29765: PUSH
29766: LD_INT 1
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 3
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 3
29785: PUSH
29786: LD_INT 3
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 2
29795: PUSH
29796: LD_INT 3
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 2
29805: NEG
29806: PUSH
29807: LD_INT 1
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 3
29816: NEG
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 3
29827: NEG
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 3
29839: NEG
29840: PUSH
29841: LD_INT 2
29843: NEG
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 3
29851: NEG
29852: PUSH
29853: LD_INT 3
29855: NEG
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29892: LD_ADDR_VAR 0 45
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: LD_INT 0
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: LD_INT 1
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: LD_INT 0
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: LD_INT 1
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: NEG
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: NEG
29962: PUSH
29963: LD_INT 1
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 1
29973: NEG
29974: PUSH
29975: LD_INT 2
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: LD_INT 2
29988: NEG
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: LD_INT 1
29999: NEG
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 2
30007: PUSH
30008: LD_INT 1
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 2
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: LD_INT 2
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: LD_INT 1
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 2
30058: NEG
30059: PUSH
30060: LD_INT 1
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 2
30070: NEG
30071: PUSH
30072: LD_INT 2
30074: NEG
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 2
30082: NEG
30083: PUSH
30084: LD_INT 3
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: NEG
30095: PUSH
30096: LD_INT 3
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: LD_INT 3
30109: NEG
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: LD_INT 2
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 3
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 3
30138: PUSH
30139: LD_INT 3
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 2
30148: PUSH
30149: LD_INT 3
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: LD_INT 3
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: LD_INT 3
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 3
30189: NEG
30190: PUSH
30191: LD_INT 2
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 3
30201: NEG
30202: PUSH
30203: LD_INT 3
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30242: LD_ADDR_VAR 0 46
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: LD_INT 1
30315: NEG
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: LD_INT 2
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: LD_INT 2
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: LD_INT 1
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: LD_INT 2
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: LD_INT 1
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 2
30408: NEG
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 2
30419: NEG
30420: PUSH
30421: LD_INT 1
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 1
30431: NEG
30432: PUSH
30433: LD_INT 3
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: LD_INT 3
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: LD_INT 2
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 2
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 3
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 3
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: LD_INT 3
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 0
30506: PUSH
30507: LD_INT 3
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 2
30527: NEG
30528: PUSH
30529: LD_INT 1
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 3
30538: NEG
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 3
30549: NEG
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30590: LD_ADDR_VAR 0 47
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: LD_INT 0
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: LD_INT 1
30610: NEG
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: LD_INT 0
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 0
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 1
30648: NEG
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 1
30659: NEG
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 1
30671: NEG
30672: PUSH
30673: LD_INT 2
30675: NEG
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: LD_INT 2
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: LD_INT 1
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 2
30705: NEG
30706: PUSH
30707: LD_INT 1
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 2
30717: NEG
30718: PUSH
30719: LD_INT 2
30721: NEG
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30741: LD_ADDR_VAR 0 48
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: NEG
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: LD_INT 1
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 2
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 2
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30888: LD_ADDR_VAR 0 49
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: LD_INT 1
30908: NEG
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 1
30916: PUSH
30917: LD_INT 0
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 0
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: NEG
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 1
30957: NEG
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 2
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 2
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: LD_INT 2
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: LD_INT 2
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31032: LD_ADDR_VAR 0 50
31036: PUSH
31037: LD_INT 0
31039: PUSH
31040: LD_INT 0
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: LD_INT 1
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 1
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: LD_INT 1
31105: NEG
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 2
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: LD_INT 2
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: LD_INT 2
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 1
31153: NEG
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31176: LD_ADDR_VAR 0 51
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 1
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 0
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: LD_INT 2
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 1
31277: NEG
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 2
31288: NEG
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 2
31299: NEG
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31323: LD_ADDR_VAR 0 52
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 0
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: NEG
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 1
31416: NEG
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 2
31427: NEG
31428: PUSH
31429: LD_INT 0
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 2
31438: NEG
31439: PUSH
31440: LD_INT 1
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 2
31450: NEG
31451: PUSH
31452: LD_INT 2
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31474: LD_ADDR_VAR 0 53
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: LD_INT 1
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: NEG
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 1
31555: NEG
31556: PUSH
31557: LD_INT 2
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 0
31567: PUSH
31568: LD_INT 2
31570: NEG
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 1
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: LD_INT 2
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: LD_INT 2
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: LD_INT 1
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: NEG
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 2
31673: NEG
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31704: LD_ADDR_VAR 0 54
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 0
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: LD_INT 1
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: NEG
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 1
31773: NEG
31774: PUSH
31775: LD_INT 1
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 1
31785: NEG
31786: PUSH
31787: LD_INT 2
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: LD_INT 2
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 1
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 2
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 2
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 2
31839: PUSH
31840: LD_INT 2
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: LD_INT 2
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: LD_INT 2
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 2
31880: NEG
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 2
31903: NEG
31904: PUSH
31905: LD_INT 2
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31934: LD_ADDR_VAR 0 55
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 1
31992: NEG
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: LD_INT 2
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: LD_INT 2
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 2
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: LD_INT 2
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 2
32110: NEG
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 2
32121: NEG
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 2
32133: NEG
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32164: LD_ADDR_VAR 0 56
32168: PUSH
32169: LD_INT 0
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 1
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 2
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 2
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 1
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 1
32329: NEG
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 2
32340: NEG
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 2
32351: NEG
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 2
32363: NEG
32364: PUSH
32365: LD_INT 2
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32394: LD_ADDR_VAR 0 57
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 1
32475: NEG
32476: PUSH
32477: LD_INT 2
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: LD_INT 2
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 1
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 2
32519: PUSH
32520: LD_INT 1
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 1
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: LD_INT 2
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 1
32559: NEG
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 2
32570: NEG
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 2
32581: NEG
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 2
32593: NEG
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32624: LD_ADDR_VAR 0 58
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: NEG
32706: PUSH
32707: LD_INT 2
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: LD_INT 2
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 1
32789: NEG
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 2
32800: NEG
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 2
32811: NEG
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: LD_INT 2
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32854: LD_ADDR_VAR 0 59
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: LD_INT 1
32874: NEG
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: LD_INT 1
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: LD_INT 1
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32942: LD_ADDR_VAR 0 60
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: LD_INT 1
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33030: LD_ADDR_VAR 0 61
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: LD_INT 0
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: LD_INT 0
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33118: LD_ADDR_VAR 0 62
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33206: LD_ADDR_VAR 0 63
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33294: LD_ADDR_VAR 0 64
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: LD_INT 0
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: ST_TO_ADDR
// end ; 1 :
33382: GO 39279
33384: LD_INT 1
33386: DOUBLE
33387: EQUAL
33388: IFTRUE 33392
33390: GO 36015
33392: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33393: LD_ADDR_VAR 0 11
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: LD_INT 3
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: LD_INT 3
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: LIST
33436: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33437: LD_ADDR_VAR 0 12
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: LD_INT 1
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 3
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33478: LD_ADDR_VAR 0 13
33482: PUSH
33483: LD_INT 3
33485: PUSH
33486: LD_INT 2
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 3
33495: PUSH
33496: LD_INT 3
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 2
33505: PUSH
33506: LD_INT 3
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33518: LD_ADDR_VAR 0 14
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: LD_INT 3
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 0
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: NEG
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: LIST
33558: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33559: LD_ADDR_VAR 0 15
33563: PUSH
33564: LD_INT 2
33566: NEG
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 3
33577: NEG
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 3
33588: NEG
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: LIST
33602: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33603: LD_ADDR_VAR 0 16
33607: PUSH
33608: LD_INT 2
33610: NEG
33611: PUSH
33612: LD_INT 3
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 3
33622: NEG
33623: PUSH
33624: LD_INT 2
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 3
33634: NEG
33635: PUSH
33636: LD_INT 3
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: LIST
33648: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33649: LD_ADDR_VAR 0 17
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: LD_INT 3
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 3
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: LD_INT 2
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: LIST
33692: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33693: LD_ADDR_VAR 0 18
33697: PUSH
33698: LD_INT 2
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 3
33711: PUSH
33712: LD_INT 0
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 3
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: LIST
33733: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33734: LD_ADDR_VAR 0 19
33738: PUSH
33739: LD_INT 3
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 3
33751: PUSH
33752: LD_INT 3
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33774: LD_ADDR_VAR 0 20
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: LD_INT 3
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 3
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: LD_INT 2
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: LIST
33814: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33815: LD_ADDR_VAR 0 21
33819: PUSH
33820: LD_INT 2
33822: NEG
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 3
33833: NEG
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 3
33844: NEG
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33859: LD_ADDR_VAR 0 22
33863: PUSH
33864: LD_INT 2
33866: NEG
33867: PUSH
33868: LD_INT 3
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 3
33878: NEG
33879: PUSH
33880: LD_INT 2
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 3
33890: NEG
33891: PUSH
33892: LD_INT 3
33894: NEG
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: LIST
33904: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
33905: LD_ADDR_VAR 0 23
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: LD_INT 3
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: LD_INT 4
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: LD_INT 3
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
33949: LD_ADDR_VAR 0 24
33953: PUSH
33954: LD_INT 3
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 3
33966: PUSH
33967: LD_INT 1
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 4
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: LIST
33989: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
33990: LD_ADDR_VAR 0 25
33994: PUSH
33995: LD_INT 3
33997: PUSH
33998: LD_INT 3
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 4
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 3
34017: PUSH
34018: LD_INT 4
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: LIST
34029: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34030: LD_ADDR_VAR 0 26
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: LD_INT 3
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: LD_INT 4
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: LD_INT 3
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: LIST
34070: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34071: LD_ADDR_VAR 0 27
34075: PUSH
34076: LD_INT 3
34078: NEG
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 3
34089: NEG
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 4
34100: NEG
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34115: LD_ADDR_VAR 0 28
34119: PUSH
34120: LD_INT 3
34122: NEG
34123: PUSH
34124: LD_INT 3
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 3
34134: NEG
34135: PUSH
34136: LD_INT 4
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 4
34146: NEG
34147: PUSH
34148: LD_INT 3
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: LIST
34160: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34161: LD_ADDR_VAR 0 29
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: LD_INT 3
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 0
34180: PUSH
34181: LD_INT 3
34183: NEG
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 1
34191: PUSH
34192: LD_INT 2
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: LD_INT 4
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: LD_INT 4
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: LD_INT 3
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: LD_INT 5
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: LD_INT 5
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: LD_INT 4
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: LD_INT 6
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: LD_INT 6
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 5
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34316: LD_ADDR_VAR 0 30
34320: PUSH
34321: LD_INT 2
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 3
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 3
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 3
34354: PUSH
34355: LD_INT 1
34357: NEG
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 4
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 4
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 4
34385: PUSH
34386: LD_INT 1
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 5
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 5
34406: PUSH
34407: LD_INT 1
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 5
34416: PUSH
34417: LD_INT 1
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 6
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 6
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34459: LD_ADDR_VAR 0 31
34463: PUSH
34464: LD_INT 3
34466: PUSH
34467: LD_INT 2
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: LD_INT 3
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 2
34486: PUSH
34487: LD_INT 3
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 4
34496: PUSH
34497: LD_INT 3
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 4
34506: PUSH
34507: LD_INT 4
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 3
34516: PUSH
34517: LD_INT 4
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 5
34526: PUSH
34527: LD_INT 4
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 5
34536: PUSH
34537: LD_INT 5
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 4
34546: PUSH
34547: LD_INT 5
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 6
34556: PUSH
34557: LD_INT 5
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 6
34566: PUSH
34567: LD_INT 6
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 5
34576: PUSH
34577: LD_INT 6
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34598: LD_ADDR_VAR 0 32
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: LD_INT 3
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 0
34615: PUSH
34616: LD_INT 3
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: LD_INT 2
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: LD_INT 4
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: LD_INT 4
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: LD_INT 3
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: LD_INT 5
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: LD_INT 5
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: PUSH
34689: LD_INT 4
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 1
34698: PUSH
34699: LD_INT 6
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: LD_INT 6
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: LD_INT 5
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
34741: LD_ADDR_VAR 0 33
34745: PUSH
34746: LD_INT 2
34748: NEG
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 3
34759: NEG
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 3
34770: NEG
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 3
34782: NEG
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 4
34793: NEG
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 4
34804: NEG
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 4
34816: NEG
34817: PUSH
34818: LD_INT 1
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 5
34827: NEG
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 5
34838: NEG
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 5
34850: NEG
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 6
34861: NEG
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 6
34872: NEG
34873: PUSH
34874: LD_INT 1
34876: NEG
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
34896: LD_ADDR_VAR 0 34
34900: PUSH
34901: LD_INT 2
34903: NEG
34904: PUSH
34905: LD_INT 3
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 3
34915: NEG
34916: PUSH
34917: LD_INT 2
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 3
34927: NEG
34928: PUSH
34929: LD_INT 3
34931: NEG
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 3
34939: NEG
34940: PUSH
34941: LD_INT 4
34943: NEG
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 4
34951: NEG
34952: PUSH
34953: LD_INT 3
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 4
34963: NEG
34964: PUSH
34965: LD_INT 4
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 4
34975: NEG
34976: PUSH
34977: LD_INT 5
34979: NEG
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 5
34987: NEG
34988: PUSH
34989: LD_INT 4
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 5
34999: NEG
35000: PUSH
35001: LD_INT 5
35003: NEG
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 5
35011: NEG
35012: PUSH
35013: LD_INT 6
35015: NEG
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 6
35023: NEG
35024: PUSH
35025: LD_INT 5
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 6
35035: NEG
35036: PUSH
35037: LD_INT 6
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35059: LD_ADDR_VAR 0 41
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: LD_INT 2
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: LD_INT 3
35081: NEG
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 1
35089: PUSH
35090: LD_INT 2
35092: NEG
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: LIST
35102: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35103: LD_ADDR_VAR 0 42
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 2
35120: PUSH
35121: LD_INT 1
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 3
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: LIST
35143: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35144: LD_ADDR_VAR 0 43
35148: PUSH
35149: LD_INT 2
35151: PUSH
35152: LD_INT 2
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 3
35161: PUSH
35162: LD_INT 2
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: LD_INT 3
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: LIST
35183: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35184: LD_ADDR_VAR 0 44
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: LD_INT 3
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: LD_INT 2
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35225: LD_ADDR_VAR 0 45
35229: PUSH
35230: LD_INT 2
35232: NEG
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 2
35243: NEG
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 3
35254: NEG
35255: PUSH
35256: LD_INT 1
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: LIST
35268: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35269: LD_ADDR_VAR 0 46
35273: PUSH
35274: LD_INT 2
35276: NEG
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 2
35288: NEG
35289: PUSH
35290: LD_INT 3
35292: NEG
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 3
35300: NEG
35301: PUSH
35302: LD_INT 2
35304: NEG
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: LIST
35314: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35315: LD_ADDR_VAR 0 47
35319: PUSH
35320: LD_INT 2
35322: NEG
35323: PUSH
35324: LD_INT 3
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: LD_INT 3
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35348: LD_ADDR_VAR 0 48
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: LD_INT 2
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 2
35366: PUSH
35367: LD_INT 1
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35379: LD_ADDR_VAR 0 49
35383: PUSH
35384: LD_INT 3
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 3
35396: PUSH
35397: LD_INT 2
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35408: LD_ADDR_VAR 0 50
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: LD_INT 3
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 3
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35437: LD_ADDR_VAR 0 51
35441: PUSH
35442: LD_INT 1
35444: NEG
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 2
35455: NEG
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35468: LD_ADDR_VAR 0 52
35472: PUSH
35473: LD_INT 3
35475: NEG
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 3
35487: NEG
35488: PUSH
35489: LD_INT 2
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35501: LD_ADDR_VAR 0 53
35505: PUSH
35506: LD_INT 1
35508: NEG
35509: PUSH
35510: LD_INT 3
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: LD_INT 3
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: LD_INT 2
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35545: LD_ADDR_VAR 0 54
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 3
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 3
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35586: LD_ADDR_VAR 0 55
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: LD_INT 2
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 3
35603: PUSH
35604: LD_INT 3
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 2
35613: PUSH
35614: LD_INT 3
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35626: LD_ADDR_VAR 0 56
35630: PUSH
35631: LD_INT 1
35633: PUSH
35634: LD_INT 3
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: LD_INT 3
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: LD_INT 2
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35667: LD_ADDR_VAR 0 57
35671: PUSH
35672: LD_INT 2
35674: NEG
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 3
35685: NEG
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 3
35696: NEG
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: LIST
35710: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35711: LD_ADDR_VAR 0 58
35715: PUSH
35716: LD_INT 2
35718: NEG
35719: PUSH
35720: LD_INT 3
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 3
35730: NEG
35731: PUSH
35732: LD_INT 2
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 3
35742: NEG
35743: PUSH
35744: LD_INT 3
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: LIST
35756: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
35757: LD_ADDR_VAR 0 59
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 0
35776: PUSH
35777: LD_INT 2
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35801: LD_ADDR_VAR 0 60
35805: PUSH
35806: LD_INT 1
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 2
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35842: LD_ADDR_VAR 0 61
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35882: LD_ADDR_VAR 0 62
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 2
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 2
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: LIST
35922: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35923: LD_ADDR_VAR 0 63
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 2
35952: NEG
35953: PUSH
35954: LD_INT 1
35956: NEG
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: LIST
35966: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35967: LD_ADDR_VAR 0 64
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: PUSH
35976: LD_INT 2
35978: NEG
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 2
35986: NEG
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: LD_INT 2
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: LIST
36012: ST_TO_ADDR
// end ; 2 :
36013: GO 39279
36015: LD_INT 2
36017: DOUBLE
36018: EQUAL
36019: IFTRUE 36023
36021: GO 39278
36023: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36024: LD_ADDR_VAR 0 29
36028: PUSH
36029: LD_INT 4
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 4
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 5
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 5
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 4
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 3
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 3
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: LD_INT 2
36106: NEG
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 5
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 3
36124: PUSH
36125: LD_INT 3
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 3
36134: PUSH
36135: LD_INT 2
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 4
36144: PUSH
36145: LD_INT 3
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 4
36154: PUSH
36155: LD_INT 4
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 3
36164: PUSH
36165: LD_INT 4
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: LD_INT 3
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 2
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 4
36194: PUSH
36195: LD_INT 2
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 2
36204: PUSH
36205: LD_INT 4
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: LD_INT 4
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: LD_INT 3
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: LD_INT 4
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: LD_INT 5
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: LD_INT 5
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: LD_INT 4
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: LD_INT 3
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 2
36286: PUSH
36287: LD_INT 5
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 2
36296: NEG
36297: PUSH
36298: LD_INT 3
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 3
36307: NEG
36308: PUSH
36309: LD_INT 0
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 3
36318: NEG
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 2
36330: NEG
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 2
36341: NEG
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 3
36352: NEG
36353: PUSH
36354: LD_INT 1
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 4
36363: NEG
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 4
36374: NEG
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 4
36386: NEG
36387: PUSH
36388: LD_INT 2
36390: NEG
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 2
36398: NEG
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 4
36409: NEG
36410: PUSH
36411: LD_INT 4
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 4
36421: NEG
36422: PUSH
36423: LD_INT 5
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 3
36433: NEG
36434: PUSH
36435: LD_INT 4
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 3
36445: NEG
36446: PUSH
36447: LD_INT 3
36449: NEG
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 4
36457: NEG
36458: PUSH
36459: LD_INT 3
36461: NEG
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 5
36469: NEG
36470: PUSH
36471: LD_INT 4
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 5
36481: NEG
36482: PUSH
36483: LD_INT 5
36485: NEG
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 3
36493: NEG
36494: PUSH
36495: LD_INT 5
36497: NEG
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 5
36505: NEG
36506: PUSH
36507: LD_INT 3
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
36562: LD_ADDR_VAR 0 30
36566: PUSH
36567: LD_INT 4
36569: PUSH
36570: LD_INT 4
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 4
36579: PUSH
36580: LD_INT 3
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 5
36589: PUSH
36590: LD_INT 4
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 5
36599: PUSH
36600: LD_INT 5
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 4
36609: PUSH
36610: LD_INT 5
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 3
36619: PUSH
36620: LD_INT 4
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 3
36629: PUSH
36630: LD_INT 3
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 5
36639: PUSH
36640: LD_INT 3
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 3
36649: PUSH
36650: LD_INT 5
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: LD_INT 3
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: LD_INT 2
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: LD_INT 3
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: LD_INT 4
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: LD_INT 4
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: LD_INT 3
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PUSH
36722: LD_INT 2
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 2
36731: PUSH
36732: LD_INT 4
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 2
36741: NEG
36742: PUSH
36743: LD_INT 2
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 4
36752: NEG
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 4
36763: NEG
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 3
36775: NEG
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 3
36786: NEG
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 4
36797: NEG
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 5
36808: NEG
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 5
36819: NEG
36820: PUSH
36821: LD_INT 1
36823: NEG
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 5
36831: NEG
36832: PUSH
36833: LD_INT 2
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 3
36843: NEG
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 3
36854: NEG
36855: PUSH
36856: LD_INT 3
36858: NEG
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 3
36866: NEG
36867: PUSH
36868: LD_INT 4
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: LD_INT 3
36882: NEG
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 2
36890: NEG
36891: PUSH
36892: LD_INT 2
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 3
36902: NEG
36903: PUSH
36904: LD_INT 2
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 4
36914: NEG
36915: PUSH
36916: LD_INT 3
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 4
36926: NEG
36927: PUSH
36928: LD_INT 4
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: LD_INT 4
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 4
36950: NEG
36951: PUSH
36952: LD_INT 2
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: LD_INT 4
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 5
36976: NEG
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: LD_INT 4
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: LD_INT 3
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: LD_INT 3
37009: NEG
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: LD_INT 4
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: LD_INT 5
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 2
37041: PUSH
37042: LD_INT 3
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: NEG
37053: PUSH
37054: LD_INT 5
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37109: LD_ADDR_VAR 0 31
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: LD_INT 4
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: LD_INT 3
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: LD_INT 4
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: LD_INT 5
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: LD_INT 5
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: LD_INT 4
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: LD_INT 3
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 2
37188: PUSH
37189: LD_INT 5
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: LD_INT 3
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 3
37209: NEG
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 3
37220: NEG
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: NEG
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 2
37243: NEG
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 3
37254: NEG
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 4
37265: NEG
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 4
37276: NEG
37277: PUSH
37278: LD_INT 1
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 4
37288: NEG
37289: PUSH
37290: LD_INT 2
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: LD_INT 2
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 4
37311: NEG
37312: PUSH
37313: LD_INT 4
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 4
37323: NEG
37324: PUSH
37325: LD_INT 5
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 3
37335: NEG
37336: PUSH
37337: LD_INT 4
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 3
37347: NEG
37348: PUSH
37349: LD_INT 3
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 4
37359: NEG
37360: PUSH
37361: LD_INT 3
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 5
37371: NEG
37372: PUSH
37373: LD_INT 4
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 5
37383: NEG
37384: PUSH
37385: LD_INT 5
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 3
37395: NEG
37396: PUSH
37397: LD_INT 5
37399: NEG
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 5
37407: NEG
37408: PUSH
37409: LD_INT 3
37411: NEG
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: LD_INT 3
37422: NEG
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: LD_INT 4
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: LD_INT 3
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: NEG
37475: PUSH
37476: LD_INT 3
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: LD_INT 4
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: LD_INT 2
37501: NEG
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 2
37509: NEG
37510: PUSH
37511: LD_INT 4
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 4
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 4
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 5
37542: PUSH
37543: LD_INT 0
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 5
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 4
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 3
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 3
37582: PUSH
37583: LD_INT 1
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 3
37593: PUSH
37594: LD_INT 2
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 5
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
37659: LD_ADDR_VAR 0 32
37663: PUSH
37664: LD_INT 4
37666: NEG
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 4
37677: NEG
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 3
37689: NEG
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 3
37700: NEG
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 4
37711: NEG
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 5
37722: NEG
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 5
37733: NEG
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 5
37745: NEG
37746: PUSH
37747: LD_INT 2
37749: NEG
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 3
37757: NEG
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 3
37768: NEG
37769: PUSH
37770: LD_INT 3
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 3
37780: NEG
37781: PUSH
37782: LD_INT 4
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: LD_INT 3
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: LD_INT 2
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 3
37816: NEG
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 4
37828: NEG
37829: PUSH
37830: LD_INT 3
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 4
37840: NEG
37841: PUSH
37842: LD_INT 4
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: NEG
37853: PUSH
37854: LD_INT 4
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 4
37864: NEG
37865: PUSH
37866: LD_INT 2
37868: NEG
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: LD_INT 4
37879: NEG
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: LD_INT 5
37890: NEG
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: LD_INT 4
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: LD_INT 3
37912: NEG
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 0
37920: PUSH
37921: LD_INT 3
37923: NEG
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 1
37931: NEG
37932: PUSH
37933: LD_INT 4
37935: NEG
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: LD_INT 5
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: LD_INT 3
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: NEG
37967: PUSH
37968: LD_INT 5
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 3
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 3
37988: PUSH
37989: LD_INT 1
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 4
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 4
38009: PUSH
38010: LD_INT 1
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 3
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 2
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 2
38039: PUSH
38040: LD_INT 1
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 4
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 4
38071: PUSH
38072: LD_INT 4
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 4
38081: PUSH
38082: LD_INT 3
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 5
38091: PUSH
38092: LD_INT 4
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 5
38101: PUSH
38102: LD_INT 5
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 4
38111: PUSH
38112: LD_INT 5
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 3
38121: PUSH
38122: LD_INT 4
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 3
38131: PUSH
38132: LD_INT 3
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 5
38141: PUSH
38142: LD_INT 3
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: LD_INT 5
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38206: LD_ADDR_VAR 0 33
38210: PUSH
38211: LD_INT 4
38213: NEG
38214: PUSH
38215: LD_INT 4
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 4
38225: NEG
38226: PUSH
38227: LD_INT 5
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 3
38237: NEG
38238: PUSH
38239: LD_INT 4
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 3
38249: NEG
38250: PUSH
38251: LD_INT 3
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 4
38261: NEG
38262: PUSH
38263: LD_INT 3
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 5
38273: NEG
38274: PUSH
38275: LD_INT 4
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 5
38285: NEG
38286: PUSH
38287: LD_INT 5
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 3
38297: NEG
38298: PUSH
38299: LD_INT 5
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 5
38309: NEG
38310: PUSH
38311: LD_INT 3
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: LD_INT 3
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 4
38335: NEG
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: LD_INT 3
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: NEG
38377: PUSH
38378: LD_INT 3
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 1
38388: NEG
38389: PUSH
38390: LD_INT 4
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: LD_INT 2
38403: NEG
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 2
38411: NEG
38412: PUSH
38413: LD_INT 4
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 4
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 4
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 5
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 5
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 4
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 3
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 3
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 3
38495: PUSH
38496: LD_INT 2
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 5
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 3
38516: PUSH
38517: LD_INT 3
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 3
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 4
38536: PUSH
38537: LD_INT 3
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 4
38546: PUSH
38547: LD_INT 4
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 3
38556: PUSH
38557: LD_INT 4
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 3
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 4
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: LD_INT 4
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: LD_INT 4
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: LD_INT 3
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: LD_INT 4
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: LD_INT 5
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: LD_INT 5
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: LD_INT 4
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: LD_INT 3
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 2
38678: PUSH
38679: LD_INT 5
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: LD_INT 3
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
38744: LD_ADDR_VAR 0 34
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: LD_INT 4
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: LD_INT 5
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: LD_INT 4
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: LD_INT 3
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: LD_INT 3
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: PUSH
38808: LD_INT 4
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: LD_INT 5
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 2
38830: PUSH
38831: LD_INT 3
38833: NEG
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 2
38841: NEG
38842: PUSH
38843: LD_INT 5
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 3
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 3
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 4
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 4
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 3
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 2
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: LD_INT 2
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 4
38936: PUSH
38937: LD_INT 2
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 4
38946: PUSH
38947: LD_INT 4
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 4
38956: PUSH
38957: LD_INT 3
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 5
38966: PUSH
38967: LD_INT 4
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 5
38976: PUSH
38977: LD_INT 5
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 4
38986: PUSH
38987: LD_INT 5
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: LD_INT 4
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 3
39006: PUSH
39007: LD_INT 3
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 5
39016: PUSH
39017: LD_INT 3
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 3
39026: PUSH
39027: LD_INT 5
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 3
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: LD_INT 3
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: LD_INT 4
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: LD_INT 4
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: LD_INT 3
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: LD_INT 4
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: LD_INT 2
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 4
39129: NEG
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 4
39140: NEG
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 3
39152: NEG
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 3
39163: NEG
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 4
39174: NEG
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 5
39185: NEG
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 5
39196: NEG
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 5
39208: NEG
39209: PUSH
39210: LD_INT 2
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 3
39220: NEG
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: ST_TO_ADDR
// end ; end ;
39276: GO 39279
39278: POP
// case btype of b_depot , b_warehouse :
39279: LD_VAR 0 1
39283: PUSH
39284: LD_INT 0
39286: DOUBLE
39287: EQUAL
39288: IFTRUE 39298
39290: LD_INT 1
39292: DOUBLE
39293: EQUAL
39294: IFTRUE 39298
39296: GO 39499
39298: POP
// case nation of nation_american :
39299: LD_VAR 0 5
39303: PUSH
39304: LD_INT 1
39306: DOUBLE
39307: EQUAL
39308: IFTRUE 39312
39310: GO 39368
39312: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39313: LD_ADDR_VAR 0 9
39317: PUSH
39318: LD_VAR 0 11
39322: PUSH
39323: LD_VAR 0 12
39327: PUSH
39328: LD_VAR 0 13
39332: PUSH
39333: LD_VAR 0 14
39337: PUSH
39338: LD_VAR 0 15
39342: PUSH
39343: LD_VAR 0 16
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: PUSH
39356: LD_VAR 0 4
39360: PUSH
39361: LD_INT 1
39363: PLUS
39364: ARRAY
39365: ST_TO_ADDR
39366: GO 39497
39368: LD_INT 2
39370: DOUBLE
39371: EQUAL
39372: IFTRUE 39376
39374: GO 39432
39376: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39377: LD_ADDR_VAR 0 9
39381: PUSH
39382: LD_VAR 0 17
39386: PUSH
39387: LD_VAR 0 18
39391: PUSH
39392: LD_VAR 0 19
39396: PUSH
39397: LD_VAR 0 20
39401: PUSH
39402: LD_VAR 0 21
39406: PUSH
39407: LD_VAR 0 22
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: PUSH
39420: LD_VAR 0 4
39424: PUSH
39425: LD_INT 1
39427: PLUS
39428: ARRAY
39429: ST_TO_ADDR
39430: GO 39497
39432: LD_INT 3
39434: DOUBLE
39435: EQUAL
39436: IFTRUE 39440
39438: GO 39496
39440: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39441: LD_ADDR_VAR 0 9
39445: PUSH
39446: LD_VAR 0 23
39450: PUSH
39451: LD_VAR 0 24
39455: PUSH
39456: LD_VAR 0 25
39460: PUSH
39461: LD_VAR 0 26
39465: PUSH
39466: LD_VAR 0 27
39470: PUSH
39471: LD_VAR 0 28
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: PUSH
39484: LD_VAR 0 4
39488: PUSH
39489: LD_INT 1
39491: PLUS
39492: ARRAY
39493: ST_TO_ADDR
39494: GO 39497
39496: POP
39497: GO 40052
39499: LD_INT 2
39501: DOUBLE
39502: EQUAL
39503: IFTRUE 39513
39505: LD_INT 3
39507: DOUBLE
39508: EQUAL
39509: IFTRUE 39513
39511: GO 39569
39513: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39514: LD_ADDR_VAR 0 9
39518: PUSH
39519: LD_VAR 0 29
39523: PUSH
39524: LD_VAR 0 30
39528: PUSH
39529: LD_VAR 0 31
39533: PUSH
39534: LD_VAR 0 32
39538: PUSH
39539: LD_VAR 0 33
39543: PUSH
39544: LD_VAR 0 34
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: PUSH
39557: LD_VAR 0 4
39561: PUSH
39562: LD_INT 1
39564: PLUS
39565: ARRAY
39566: ST_TO_ADDR
39567: GO 40052
39569: LD_INT 16
39571: DOUBLE
39572: EQUAL
39573: IFTRUE 39631
39575: LD_INT 17
39577: DOUBLE
39578: EQUAL
39579: IFTRUE 39631
39581: LD_INT 18
39583: DOUBLE
39584: EQUAL
39585: IFTRUE 39631
39587: LD_INT 19
39589: DOUBLE
39590: EQUAL
39591: IFTRUE 39631
39593: LD_INT 22
39595: DOUBLE
39596: EQUAL
39597: IFTRUE 39631
39599: LD_INT 20
39601: DOUBLE
39602: EQUAL
39603: IFTRUE 39631
39605: LD_INT 21
39607: DOUBLE
39608: EQUAL
39609: IFTRUE 39631
39611: LD_INT 23
39613: DOUBLE
39614: EQUAL
39615: IFTRUE 39631
39617: LD_INT 24
39619: DOUBLE
39620: EQUAL
39621: IFTRUE 39631
39623: LD_INT 25
39625: DOUBLE
39626: EQUAL
39627: IFTRUE 39631
39629: GO 39687
39631: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39632: LD_ADDR_VAR 0 9
39636: PUSH
39637: LD_VAR 0 35
39641: PUSH
39642: LD_VAR 0 36
39646: PUSH
39647: LD_VAR 0 37
39651: PUSH
39652: LD_VAR 0 38
39656: PUSH
39657: LD_VAR 0 39
39661: PUSH
39662: LD_VAR 0 40
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: PUSH
39675: LD_VAR 0 4
39679: PUSH
39680: LD_INT 1
39682: PLUS
39683: ARRAY
39684: ST_TO_ADDR
39685: GO 40052
39687: LD_INT 6
39689: DOUBLE
39690: EQUAL
39691: IFTRUE 39743
39693: LD_INT 7
39695: DOUBLE
39696: EQUAL
39697: IFTRUE 39743
39699: LD_INT 8
39701: DOUBLE
39702: EQUAL
39703: IFTRUE 39743
39705: LD_INT 13
39707: DOUBLE
39708: EQUAL
39709: IFTRUE 39743
39711: LD_INT 12
39713: DOUBLE
39714: EQUAL
39715: IFTRUE 39743
39717: LD_INT 15
39719: DOUBLE
39720: EQUAL
39721: IFTRUE 39743
39723: LD_INT 11
39725: DOUBLE
39726: EQUAL
39727: IFTRUE 39743
39729: LD_INT 14
39731: DOUBLE
39732: EQUAL
39733: IFTRUE 39743
39735: LD_INT 10
39737: DOUBLE
39738: EQUAL
39739: IFTRUE 39743
39741: GO 39799
39743: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
39744: LD_ADDR_VAR 0 9
39748: PUSH
39749: LD_VAR 0 41
39753: PUSH
39754: LD_VAR 0 42
39758: PUSH
39759: LD_VAR 0 43
39763: PUSH
39764: LD_VAR 0 44
39768: PUSH
39769: LD_VAR 0 45
39773: PUSH
39774: LD_VAR 0 46
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: PUSH
39787: LD_VAR 0 4
39791: PUSH
39792: LD_INT 1
39794: PLUS
39795: ARRAY
39796: ST_TO_ADDR
39797: GO 40052
39799: LD_INT 36
39801: DOUBLE
39802: EQUAL
39803: IFTRUE 39807
39805: GO 39863
39807: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
39808: LD_ADDR_VAR 0 9
39812: PUSH
39813: LD_VAR 0 47
39817: PUSH
39818: LD_VAR 0 48
39822: PUSH
39823: LD_VAR 0 49
39827: PUSH
39828: LD_VAR 0 50
39832: PUSH
39833: LD_VAR 0 51
39837: PUSH
39838: LD_VAR 0 52
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: PUSH
39851: LD_VAR 0 4
39855: PUSH
39856: LD_INT 1
39858: PLUS
39859: ARRAY
39860: ST_TO_ADDR
39861: GO 40052
39863: LD_INT 4
39865: DOUBLE
39866: EQUAL
39867: IFTRUE 39889
39869: LD_INT 5
39871: DOUBLE
39872: EQUAL
39873: IFTRUE 39889
39875: LD_INT 34
39877: DOUBLE
39878: EQUAL
39879: IFTRUE 39889
39881: LD_INT 37
39883: DOUBLE
39884: EQUAL
39885: IFTRUE 39889
39887: GO 39945
39889: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
39890: LD_ADDR_VAR 0 9
39894: PUSH
39895: LD_VAR 0 53
39899: PUSH
39900: LD_VAR 0 54
39904: PUSH
39905: LD_VAR 0 55
39909: PUSH
39910: LD_VAR 0 56
39914: PUSH
39915: LD_VAR 0 57
39919: PUSH
39920: LD_VAR 0 58
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: PUSH
39933: LD_VAR 0 4
39937: PUSH
39938: LD_INT 1
39940: PLUS
39941: ARRAY
39942: ST_TO_ADDR
39943: GO 40052
39945: LD_INT 31
39947: DOUBLE
39948: EQUAL
39949: IFTRUE 39995
39951: LD_INT 32
39953: DOUBLE
39954: EQUAL
39955: IFTRUE 39995
39957: LD_INT 33
39959: DOUBLE
39960: EQUAL
39961: IFTRUE 39995
39963: LD_INT 27
39965: DOUBLE
39966: EQUAL
39967: IFTRUE 39995
39969: LD_INT 26
39971: DOUBLE
39972: EQUAL
39973: IFTRUE 39995
39975: LD_INT 28
39977: DOUBLE
39978: EQUAL
39979: IFTRUE 39995
39981: LD_INT 29
39983: DOUBLE
39984: EQUAL
39985: IFTRUE 39995
39987: LD_INT 30
39989: DOUBLE
39990: EQUAL
39991: IFTRUE 39995
39993: GO 40051
39995: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
39996: LD_ADDR_VAR 0 9
40000: PUSH
40001: LD_VAR 0 59
40005: PUSH
40006: LD_VAR 0 60
40010: PUSH
40011: LD_VAR 0 61
40015: PUSH
40016: LD_VAR 0 62
40020: PUSH
40021: LD_VAR 0 63
40025: PUSH
40026: LD_VAR 0 64
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: PUSH
40039: LD_VAR 0 4
40043: PUSH
40044: LD_INT 1
40046: PLUS
40047: ARRAY
40048: ST_TO_ADDR
40049: GO 40052
40051: POP
// temp_list2 = [ ] ;
40052: LD_ADDR_VAR 0 10
40056: PUSH
40057: EMPTY
40058: ST_TO_ADDR
// for i in temp_list do
40059: LD_ADDR_VAR 0 8
40063: PUSH
40064: LD_VAR 0 9
40068: PUSH
40069: FOR_IN
40070: IFFALSE 40122
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40072: LD_ADDR_VAR 0 10
40076: PUSH
40077: LD_VAR 0 10
40081: PUSH
40082: LD_VAR 0 8
40086: PUSH
40087: LD_INT 1
40089: ARRAY
40090: PUSH
40091: LD_VAR 0 2
40095: PLUS
40096: PUSH
40097: LD_VAR 0 8
40101: PUSH
40102: LD_INT 2
40104: ARRAY
40105: PUSH
40106: LD_VAR 0 3
40110: PLUS
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: EMPTY
40117: LIST
40118: ADD
40119: ST_TO_ADDR
40120: GO 40069
40122: POP
40123: POP
// result = temp_list2 ;
40124: LD_ADDR_VAR 0 7
40128: PUSH
40129: LD_VAR 0 10
40133: ST_TO_ADDR
// end ;
40134: LD_VAR 0 7
40138: RET
// export function EnemyInRange ( unit , dist ) ; begin
40139: LD_INT 0
40141: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40142: LD_ADDR_VAR 0 3
40146: PUSH
40147: LD_VAR 0 1
40151: PPUSH
40152: CALL_OW 255
40156: PPUSH
40157: LD_VAR 0 1
40161: PPUSH
40162: CALL_OW 250
40166: PPUSH
40167: LD_VAR 0 1
40171: PPUSH
40172: CALL_OW 251
40176: PPUSH
40177: LD_VAR 0 2
40181: PPUSH
40182: CALL 13910 0 4
40186: PUSH
40187: LD_INT 4
40189: ARRAY
40190: ST_TO_ADDR
// end ;
40191: LD_VAR 0 3
40195: RET
// export function PlayerSeeMe ( unit ) ; begin
40196: LD_INT 0
40198: PPUSH
// result := See ( your_side , unit ) ;
40199: LD_ADDR_VAR 0 2
40203: PUSH
40204: LD_OWVAR 2
40208: PPUSH
40209: LD_VAR 0 1
40213: PPUSH
40214: CALL_OW 292
40218: ST_TO_ADDR
// end ;
40219: LD_VAR 0 2
40223: RET
// export function ReverseDir ( unit ) ; begin
40224: LD_INT 0
40226: PPUSH
// if not unit then
40227: LD_VAR 0 1
40231: NOT
40232: IFFALSE 40236
// exit ;
40234: GO 40259
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40236: LD_ADDR_VAR 0 2
40240: PUSH
40241: LD_VAR 0 1
40245: PPUSH
40246: CALL_OW 254
40250: PUSH
40251: LD_INT 3
40253: PLUS
40254: PUSH
40255: LD_INT 6
40257: MOD
40258: ST_TO_ADDR
// end ;
40259: LD_VAR 0 2
40263: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
40264: LD_INT 0
40266: PPUSH
40267: PPUSH
40268: PPUSH
40269: PPUSH
40270: PPUSH
// if not hexes then
40271: LD_VAR 0 2
40275: NOT
40276: IFFALSE 40280
// exit ;
40278: GO 40428
// dist := 9999 ;
40280: LD_ADDR_VAR 0 5
40284: PUSH
40285: LD_INT 9999
40287: ST_TO_ADDR
// for i = 1 to hexes do
40288: LD_ADDR_VAR 0 4
40292: PUSH
40293: DOUBLE
40294: LD_INT 1
40296: DEC
40297: ST_TO_ADDR
40298: LD_VAR 0 2
40302: PUSH
40303: FOR_TO
40304: IFFALSE 40416
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
40306: LD_VAR 0 1
40310: PPUSH
40311: LD_VAR 0 2
40315: PUSH
40316: LD_VAR 0 4
40320: ARRAY
40321: PUSH
40322: LD_INT 1
40324: ARRAY
40325: PPUSH
40326: LD_VAR 0 2
40330: PUSH
40331: LD_VAR 0 4
40335: ARRAY
40336: PUSH
40337: LD_INT 2
40339: ARRAY
40340: PPUSH
40341: CALL_OW 297
40345: PUSH
40346: LD_VAR 0 5
40350: LESS
40351: IFFALSE 40414
// begin hex := hexes [ i ] ;
40353: LD_ADDR_VAR 0 7
40357: PUSH
40358: LD_VAR 0 2
40362: PUSH
40363: LD_VAR 0 4
40367: ARRAY
40368: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40369: LD_ADDR_VAR 0 5
40373: PUSH
40374: LD_VAR 0 1
40378: PPUSH
40379: LD_VAR 0 2
40383: PUSH
40384: LD_VAR 0 4
40388: ARRAY
40389: PUSH
40390: LD_INT 1
40392: ARRAY
40393: PPUSH
40394: LD_VAR 0 2
40398: PUSH
40399: LD_VAR 0 4
40403: ARRAY
40404: PUSH
40405: LD_INT 2
40407: ARRAY
40408: PPUSH
40409: CALL_OW 297
40413: ST_TO_ADDR
// end ; end ;
40414: GO 40303
40416: POP
40417: POP
// result := hex ;
40418: LD_ADDR_VAR 0 3
40422: PUSH
40423: LD_VAR 0 7
40427: ST_TO_ADDR
// end ;
40428: LD_VAR 0 3
40432: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40433: LD_INT 0
40435: PPUSH
40436: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40437: LD_VAR 0 1
40441: NOT
40442: PUSH
40443: LD_VAR 0 1
40447: PUSH
40448: LD_INT 21
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 23
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PPUSH
40472: CALL_OW 69
40476: IN
40477: NOT
40478: OR
40479: IFFALSE 40483
// exit ;
40481: GO 40530
// for i = 1 to 3 do
40483: LD_ADDR_VAR 0 3
40487: PUSH
40488: DOUBLE
40489: LD_INT 1
40491: DEC
40492: ST_TO_ADDR
40493: LD_INT 3
40495: PUSH
40496: FOR_TO
40497: IFFALSE 40528
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40499: LD_VAR 0 1
40503: PPUSH
40504: CALL_OW 250
40508: PPUSH
40509: LD_VAR 0 1
40513: PPUSH
40514: CALL_OW 251
40518: PPUSH
40519: LD_INT 1
40521: PPUSH
40522: CALL_OW 453
40526: GO 40496
40528: POP
40529: POP
// end ;
40530: LD_VAR 0 2
40534: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40535: LD_INT 0
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40543: LD_VAR 0 1
40547: NOT
40548: PUSH
40549: LD_VAR 0 2
40553: NOT
40554: OR
40555: PUSH
40556: LD_VAR 0 1
40560: PPUSH
40561: CALL_OW 314
40565: OR
40566: IFFALSE 40570
// exit ;
40568: GO 41011
// x := GetX ( enemy_unit ) ;
40570: LD_ADDR_VAR 0 7
40574: PUSH
40575: LD_VAR 0 2
40579: PPUSH
40580: CALL_OW 250
40584: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40585: LD_ADDR_VAR 0 8
40589: PUSH
40590: LD_VAR 0 2
40594: PPUSH
40595: CALL_OW 251
40599: ST_TO_ADDR
// if not x or not y then
40600: LD_VAR 0 7
40604: NOT
40605: PUSH
40606: LD_VAR 0 8
40610: NOT
40611: OR
40612: IFFALSE 40616
// exit ;
40614: GO 41011
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
40616: LD_ADDR_VAR 0 6
40620: PUSH
40621: LD_VAR 0 7
40625: PPUSH
40626: LD_INT 0
40628: PPUSH
40629: LD_INT 4
40631: PPUSH
40632: CALL_OW 272
40636: PUSH
40637: LD_VAR 0 8
40641: PPUSH
40642: LD_INT 0
40644: PPUSH
40645: LD_INT 4
40647: PPUSH
40648: CALL_OW 273
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_VAR 0 7
40661: PPUSH
40662: LD_INT 1
40664: PPUSH
40665: LD_INT 4
40667: PPUSH
40668: CALL_OW 272
40672: PUSH
40673: LD_VAR 0 8
40677: PPUSH
40678: LD_INT 1
40680: PPUSH
40681: LD_INT 4
40683: PPUSH
40684: CALL_OW 273
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_VAR 0 7
40697: PPUSH
40698: LD_INT 2
40700: PPUSH
40701: LD_INT 4
40703: PPUSH
40704: CALL_OW 272
40708: PUSH
40709: LD_VAR 0 8
40713: PPUSH
40714: LD_INT 2
40716: PPUSH
40717: LD_INT 4
40719: PPUSH
40720: CALL_OW 273
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_VAR 0 7
40733: PPUSH
40734: LD_INT 3
40736: PPUSH
40737: LD_INT 4
40739: PPUSH
40740: CALL_OW 272
40744: PUSH
40745: LD_VAR 0 8
40749: PPUSH
40750: LD_INT 3
40752: PPUSH
40753: LD_INT 4
40755: PPUSH
40756: CALL_OW 273
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_VAR 0 7
40769: PPUSH
40770: LD_INT 4
40772: PPUSH
40773: LD_INT 4
40775: PPUSH
40776: CALL_OW 272
40780: PUSH
40781: LD_VAR 0 8
40785: PPUSH
40786: LD_INT 4
40788: PPUSH
40789: LD_INT 4
40791: PPUSH
40792: CALL_OW 273
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_VAR 0 7
40805: PPUSH
40806: LD_INT 5
40808: PPUSH
40809: LD_INT 4
40811: PPUSH
40812: CALL_OW 272
40816: PUSH
40817: LD_VAR 0 8
40821: PPUSH
40822: LD_INT 5
40824: PPUSH
40825: LD_INT 4
40827: PPUSH
40828: CALL_OW 273
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: ST_TO_ADDR
// for i = tmp downto 1 do
40845: LD_ADDR_VAR 0 4
40849: PUSH
40850: DOUBLE
40851: LD_VAR 0 6
40855: INC
40856: ST_TO_ADDR
40857: LD_INT 1
40859: PUSH
40860: FOR_DOWNTO
40861: IFFALSE 40962
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
40863: LD_VAR 0 6
40867: PUSH
40868: LD_VAR 0 4
40872: ARRAY
40873: PUSH
40874: LD_INT 1
40876: ARRAY
40877: PPUSH
40878: LD_VAR 0 6
40882: PUSH
40883: LD_VAR 0 4
40887: ARRAY
40888: PUSH
40889: LD_INT 2
40891: ARRAY
40892: PPUSH
40893: CALL_OW 488
40897: NOT
40898: PUSH
40899: LD_VAR 0 6
40903: PUSH
40904: LD_VAR 0 4
40908: ARRAY
40909: PUSH
40910: LD_INT 1
40912: ARRAY
40913: PPUSH
40914: LD_VAR 0 6
40918: PUSH
40919: LD_VAR 0 4
40923: ARRAY
40924: PUSH
40925: LD_INT 2
40927: ARRAY
40928: PPUSH
40929: CALL_OW 428
40933: PUSH
40934: LD_INT 0
40936: NONEQUAL
40937: OR
40938: IFFALSE 40960
// tmp := Delete ( tmp , i ) ;
40940: LD_ADDR_VAR 0 6
40944: PUSH
40945: LD_VAR 0 6
40949: PPUSH
40950: LD_VAR 0 4
40954: PPUSH
40955: CALL_OW 3
40959: ST_TO_ADDR
40960: GO 40860
40962: POP
40963: POP
// j := GetClosestHex ( unit , tmp ) ;
40964: LD_ADDR_VAR 0 5
40968: PUSH
40969: LD_VAR 0 1
40973: PPUSH
40974: LD_VAR 0 6
40978: PPUSH
40979: CALL 40264 0 2
40983: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
40984: LD_VAR 0 1
40988: PPUSH
40989: LD_VAR 0 5
40993: PUSH
40994: LD_INT 1
40996: ARRAY
40997: PPUSH
40998: LD_VAR 0 5
41002: PUSH
41003: LD_INT 2
41005: ARRAY
41006: PPUSH
41007: CALL_OW 111
// end ;
41011: LD_VAR 0 3
41015: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41016: LD_INT 0
41018: PPUSH
41019: PPUSH
41020: PPUSH
// uc_side = 0 ;
41021: LD_ADDR_OWVAR 20
41025: PUSH
41026: LD_INT 0
41028: ST_TO_ADDR
// uc_nation = 0 ;
41029: LD_ADDR_OWVAR 21
41033: PUSH
41034: LD_INT 0
41036: ST_TO_ADDR
// InitHc_All ( ) ;
41037: CALL_OW 584
// InitVc ;
41041: CALL_OW 20
// if mastodonts then
41045: LD_VAR 0 6
41049: IFFALSE 41116
// for i = 1 to mastodonts do
41051: LD_ADDR_VAR 0 11
41055: PUSH
41056: DOUBLE
41057: LD_INT 1
41059: DEC
41060: ST_TO_ADDR
41061: LD_VAR 0 6
41065: PUSH
41066: FOR_TO
41067: IFFALSE 41114
// begin vc_chassis := 31 ;
41069: LD_ADDR_OWVAR 37
41073: PUSH
41074: LD_INT 31
41076: ST_TO_ADDR
// vc_control := control_rider ;
41077: LD_ADDR_OWVAR 38
41081: PUSH
41082: LD_INT 4
41084: ST_TO_ADDR
// animal := CreateVehicle ;
41085: LD_ADDR_VAR 0 12
41089: PUSH
41090: CALL_OW 45
41094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41095: LD_VAR 0 12
41099: PPUSH
41100: LD_VAR 0 8
41104: PPUSH
41105: LD_INT 0
41107: PPUSH
41108: CALL 43304 0 3
// end ;
41112: GO 41066
41114: POP
41115: POP
// if horses then
41116: LD_VAR 0 5
41120: IFFALSE 41187
// for i = 1 to horses do
41122: LD_ADDR_VAR 0 11
41126: PUSH
41127: DOUBLE
41128: LD_INT 1
41130: DEC
41131: ST_TO_ADDR
41132: LD_VAR 0 5
41136: PUSH
41137: FOR_TO
41138: IFFALSE 41185
// begin hc_class := 21 ;
41140: LD_ADDR_OWVAR 28
41144: PUSH
41145: LD_INT 21
41147: ST_TO_ADDR
// hc_gallery :=  ;
41148: LD_ADDR_OWVAR 33
41152: PUSH
41153: LD_STRING 
41155: ST_TO_ADDR
// animal := CreateHuman ;
41156: LD_ADDR_VAR 0 12
41160: PUSH
41161: CALL_OW 44
41165: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41166: LD_VAR 0 12
41170: PPUSH
41171: LD_VAR 0 8
41175: PPUSH
41176: LD_INT 0
41178: PPUSH
41179: CALL 43304 0 3
// end ;
41183: GO 41137
41185: POP
41186: POP
// if birds then
41187: LD_VAR 0 1
41191: IFFALSE 41258
// for i = 1 to birds do
41193: LD_ADDR_VAR 0 11
41197: PUSH
41198: DOUBLE
41199: LD_INT 1
41201: DEC
41202: ST_TO_ADDR
41203: LD_VAR 0 1
41207: PUSH
41208: FOR_TO
41209: IFFALSE 41256
// begin hc_class = 18 ;
41211: LD_ADDR_OWVAR 28
41215: PUSH
41216: LD_INT 18
41218: ST_TO_ADDR
// hc_gallery =  ;
41219: LD_ADDR_OWVAR 33
41223: PUSH
41224: LD_STRING 
41226: ST_TO_ADDR
// animal := CreateHuman ;
41227: LD_ADDR_VAR 0 12
41231: PUSH
41232: CALL_OW 44
41236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41237: LD_VAR 0 12
41241: PPUSH
41242: LD_VAR 0 8
41246: PPUSH
41247: LD_INT 0
41249: PPUSH
41250: CALL 43304 0 3
// end ;
41254: GO 41208
41256: POP
41257: POP
// if tigers then
41258: LD_VAR 0 2
41262: IFFALSE 41346
// for i = 1 to tigers do
41264: LD_ADDR_VAR 0 11
41268: PUSH
41269: DOUBLE
41270: LD_INT 1
41272: DEC
41273: ST_TO_ADDR
41274: LD_VAR 0 2
41278: PUSH
41279: FOR_TO
41280: IFFALSE 41344
// begin hc_class = class_tiger ;
41282: LD_ADDR_OWVAR 28
41286: PUSH
41287: LD_INT 14
41289: ST_TO_ADDR
// hc_gallery =  ;
41290: LD_ADDR_OWVAR 33
41294: PUSH
41295: LD_STRING 
41297: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41298: LD_ADDR_OWVAR 35
41302: PUSH
41303: LD_INT 7
41305: NEG
41306: PPUSH
41307: LD_INT 7
41309: PPUSH
41310: CALL_OW 12
41314: ST_TO_ADDR
// animal := CreateHuman ;
41315: LD_ADDR_VAR 0 12
41319: PUSH
41320: CALL_OW 44
41324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41325: LD_VAR 0 12
41329: PPUSH
41330: LD_VAR 0 8
41334: PPUSH
41335: LD_INT 0
41337: PPUSH
41338: CALL 43304 0 3
// end ;
41342: GO 41279
41344: POP
41345: POP
// if apemans then
41346: LD_VAR 0 3
41350: IFFALSE 41473
// for i = 1 to apemans do
41352: LD_ADDR_VAR 0 11
41356: PUSH
41357: DOUBLE
41358: LD_INT 1
41360: DEC
41361: ST_TO_ADDR
41362: LD_VAR 0 3
41366: PUSH
41367: FOR_TO
41368: IFFALSE 41471
// begin hc_class = class_apeman ;
41370: LD_ADDR_OWVAR 28
41374: PUSH
41375: LD_INT 12
41377: ST_TO_ADDR
// hc_gallery =  ;
41378: LD_ADDR_OWVAR 33
41382: PUSH
41383: LD_STRING 
41385: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
41386: LD_ADDR_OWVAR 35
41390: PUSH
41391: LD_INT 5
41393: NEG
41394: PPUSH
41395: LD_INT 5
41397: PPUSH
41398: CALL_OW 12
41402: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41403: LD_ADDR_OWVAR 31
41407: PUSH
41408: LD_INT 1
41410: PPUSH
41411: LD_INT 3
41413: PPUSH
41414: CALL_OW 12
41418: PUSH
41419: LD_INT 1
41421: PPUSH
41422: LD_INT 3
41424: PPUSH
41425: CALL_OW 12
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: ST_TO_ADDR
// animal := CreateHuman ;
41442: LD_ADDR_VAR 0 12
41446: PUSH
41447: CALL_OW 44
41451: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41452: LD_VAR 0 12
41456: PPUSH
41457: LD_VAR 0 8
41461: PPUSH
41462: LD_INT 0
41464: PPUSH
41465: CALL 43304 0 3
// end ;
41469: GO 41367
41471: POP
41472: POP
// if enchidnas then
41473: LD_VAR 0 4
41477: IFFALSE 41544
// for i = 1 to enchidnas do
41479: LD_ADDR_VAR 0 11
41483: PUSH
41484: DOUBLE
41485: LD_INT 1
41487: DEC
41488: ST_TO_ADDR
41489: LD_VAR 0 4
41493: PUSH
41494: FOR_TO
41495: IFFALSE 41542
// begin hc_class = 13 ;
41497: LD_ADDR_OWVAR 28
41501: PUSH
41502: LD_INT 13
41504: ST_TO_ADDR
// hc_gallery =  ;
41505: LD_ADDR_OWVAR 33
41509: PUSH
41510: LD_STRING 
41512: ST_TO_ADDR
// animal := CreateHuman ;
41513: LD_ADDR_VAR 0 12
41517: PUSH
41518: CALL_OW 44
41522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41523: LD_VAR 0 12
41527: PPUSH
41528: LD_VAR 0 8
41532: PPUSH
41533: LD_INT 0
41535: PPUSH
41536: CALL 43304 0 3
// end ;
41540: GO 41494
41542: POP
41543: POP
// if fishes then
41544: LD_VAR 0 7
41548: IFFALSE 41615
// for i = 1 to fishes do
41550: LD_ADDR_VAR 0 11
41554: PUSH
41555: DOUBLE
41556: LD_INT 1
41558: DEC
41559: ST_TO_ADDR
41560: LD_VAR 0 7
41564: PUSH
41565: FOR_TO
41566: IFFALSE 41613
// begin hc_class = 20 ;
41568: LD_ADDR_OWVAR 28
41572: PUSH
41573: LD_INT 20
41575: ST_TO_ADDR
// hc_gallery =  ;
41576: LD_ADDR_OWVAR 33
41580: PUSH
41581: LD_STRING 
41583: ST_TO_ADDR
// animal := CreateHuman ;
41584: LD_ADDR_VAR 0 12
41588: PUSH
41589: CALL_OW 44
41593: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41594: LD_VAR 0 12
41598: PPUSH
41599: LD_VAR 0 9
41603: PPUSH
41604: LD_INT 0
41606: PPUSH
41607: CALL 43304 0 3
// end ;
41611: GO 41565
41613: POP
41614: POP
// end ;
41615: LD_VAR 0 10
41619: RET
// export function WantHeal ( sci , unit ) ; begin
41620: LD_INT 0
41622: PPUSH
// if GetTaskList ( sci ) > 0 then
41623: LD_VAR 0 1
41627: PPUSH
41628: CALL_OW 437
41632: PUSH
41633: LD_INT 0
41635: GREATER
41636: IFFALSE 41706
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41638: LD_VAR 0 1
41642: PPUSH
41643: CALL_OW 437
41647: PUSH
41648: LD_INT 1
41650: ARRAY
41651: PUSH
41652: LD_INT 1
41654: ARRAY
41655: PUSH
41656: LD_STRING l
41658: EQUAL
41659: PUSH
41660: LD_VAR 0 1
41664: PPUSH
41665: CALL_OW 437
41669: PUSH
41670: LD_INT 1
41672: ARRAY
41673: PUSH
41674: LD_INT 4
41676: ARRAY
41677: PUSH
41678: LD_VAR 0 2
41682: EQUAL
41683: AND
41684: IFFALSE 41696
// result := true else
41686: LD_ADDR_VAR 0 3
41690: PUSH
41691: LD_INT 1
41693: ST_TO_ADDR
41694: GO 41704
// result := false ;
41696: LD_ADDR_VAR 0 3
41700: PUSH
41701: LD_INT 0
41703: ST_TO_ADDR
// end else
41704: GO 41714
// result := false ;
41706: LD_ADDR_VAR 0 3
41710: PUSH
41711: LD_INT 0
41713: ST_TO_ADDR
// end ;
41714: LD_VAR 0 3
41718: RET
// export function HealTarget ( sci ) ; begin
41719: LD_INT 0
41721: PPUSH
// if not sci then
41722: LD_VAR 0 1
41726: NOT
41727: IFFALSE 41731
// exit ;
41729: GO 41796
// result := 0 ;
41731: LD_ADDR_VAR 0 2
41735: PUSH
41736: LD_INT 0
41738: ST_TO_ADDR
// if GetTaskList ( sci ) then
41739: LD_VAR 0 1
41743: PPUSH
41744: CALL_OW 437
41748: IFFALSE 41796
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41750: LD_VAR 0 1
41754: PPUSH
41755: CALL_OW 437
41759: PUSH
41760: LD_INT 1
41762: ARRAY
41763: PUSH
41764: LD_INT 1
41766: ARRAY
41767: PUSH
41768: LD_STRING l
41770: EQUAL
41771: IFFALSE 41796
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41773: LD_ADDR_VAR 0 2
41777: PUSH
41778: LD_VAR 0 1
41782: PPUSH
41783: CALL_OW 437
41787: PUSH
41788: LD_INT 1
41790: ARRAY
41791: PUSH
41792: LD_INT 4
41794: ARRAY
41795: ST_TO_ADDR
// end ;
41796: LD_VAR 0 2
41800: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41801: LD_INT 0
41803: PPUSH
41804: PPUSH
41805: PPUSH
41806: PPUSH
// if not base_units then
41807: LD_VAR 0 1
41811: NOT
41812: IFFALSE 41816
// exit ;
41814: GO 41903
// result := false ;
41816: LD_ADDR_VAR 0 2
41820: PUSH
41821: LD_INT 0
41823: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41824: LD_ADDR_VAR 0 5
41828: PUSH
41829: LD_VAR 0 1
41833: PPUSH
41834: LD_INT 21
41836: PUSH
41837: LD_INT 3
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PPUSH
41844: CALL_OW 72
41848: ST_TO_ADDR
// if not tmp then
41849: LD_VAR 0 5
41853: NOT
41854: IFFALSE 41858
// exit ;
41856: GO 41903
// for i in tmp do
41858: LD_ADDR_VAR 0 3
41862: PUSH
41863: LD_VAR 0 5
41867: PUSH
41868: FOR_IN
41869: IFFALSE 41901
// begin result := EnemyInRange ( i , 22 ) ;
41871: LD_ADDR_VAR 0 2
41875: PUSH
41876: LD_VAR 0 3
41880: PPUSH
41881: LD_INT 22
41883: PPUSH
41884: CALL 40139 0 2
41888: ST_TO_ADDR
// if result then
41889: LD_VAR 0 2
41893: IFFALSE 41899
// exit ;
41895: POP
41896: POP
41897: GO 41903
// end ;
41899: GO 41868
41901: POP
41902: POP
// end ;
41903: LD_VAR 0 2
41907: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
41908: LD_INT 0
41910: PPUSH
41911: PPUSH
// if not units then
41912: LD_VAR 0 1
41916: NOT
41917: IFFALSE 41921
// exit ;
41919: GO 41991
// result := [ ] ;
41921: LD_ADDR_VAR 0 3
41925: PUSH
41926: EMPTY
41927: ST_TO_ADDR
// for i in units do
41928: LD_ADDR_VAR 0 4
41932: PUSH
41933: LD_VAR 0 1
41937: PUSH
41938: FOR_IN
41939: IFFALSE 41989
// if GetTag ( i ) = tag then
41941: LD_VAR 0 4
41945: PPUSH
41946: CALL_OW 110
41950: PUSH
41951: LD_VAR 0 2
41955: EQUAL
41956: IFFALSE 41987
// result := Insert ( result , result + 1 , i ) ;
41958: LD_ADDR_VAR 0 3
41962: PUSH
41963: LD_VAR 0 3
41967: PPUSH
41968: LD_VAR 0 3
41972: PUSH
41973: LD_INT 1
41975: PLUS
41976: PPUSH
41977: LD_VAR 0 4
41981: PPUSH
41982: CALL_OW 2
41986: ST_TO_ADDR
41987: GO 41938
41989: POP
41990: POP
// end ;
41991: LD_VAR 0 3
41995: RET
// export function IsDriver ( un ) ; begin
41996: LD_INT 0
41998: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41999: LD_ADDR_VAR 0 2
42003: PUSH
42004: LD_VAR 0 1
42008: PUSH
42009: LD_INT 55
42011: PUSH
42012: EMPTY
42013: LIST
42014: PPUSH
42015: CALL_OW 69
42019: IN
42020: ST_TO_ADDR
// end ;
42021: LD_VAR 0 2
42025: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42026: LD_INT 0
42028: PPUSH
42029: PPUSH
// list := [ ] ;
42030: LD_ADDR_VAR 0 5
42034: PUSH
42035: EMPTY
42036: ST_TO_ADDR
// case d of 0 :
42037: LD_VAR 0 3
42041: PUSH
42042: LD_INT 0
42044: DOUBLE
42045: EQUAL
42046: IFTRUE 42050
42048: GO 42183
42050: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42051: LD_ADDR_VAR 0 5
42055: PUSH
42056: LD_VAR 0 1
42060: PUSH
42061: LD_INT 4
42063: MINUS
42064: PUSH
42065: LD_VAR 0 2
42069: PUSH
42070: LD_INT 4
42072: MINUS
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: PUSH
42082: LD_VAR 0 1
42086: PUSH
42087: LD_INT 3
42089: MINUS
42090: PUSH
42091: LD_VAR 0 2
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: PUSH
42104: LD_VAR 0 1
42108: PUSH
42109: LD_INT 4
42111: PLUS
42112: PUSH
42113: LD_VAR 0 2
42117: PUSH
42118: LD_INT 4
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: PUSH
42126: LD_VAR 0 1
42130: PUSH
42131: LD_INT 3
42133: PLUS
42134: PUSH
42135: LD_VAR 0 2
42139: PUSH
42140: LD_INT 3
42142: PLUS
42143: PUSH
42144: LD_INT 5
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: PUSH
42152: LD_VAR 0 1
42156: PUSH
42157: LD_VAR 0 2
42161: PUSH
42162: LD_INT 4
42164: PLUS
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: LIST
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: ST_TO_ADDR
// end ; 1 :
42181: GO 42881
42183: LD_INT 1
42185: DOUBLE
42186: EQUAL
42187: IFTRUE 42191
42189: GO 42324
42191: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42192: LD_ADDR_VAR 0 5
42196: PUSH
42197: LD_VAR 0 1
42201: PUSH
42202: LD_VAR 0 2
42206: PUSH
42207: LD_INT 4
42209: MINUS
42210: PUSH
42211: LD_INT 3
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: LIST
42218: PUSH
42219: LD_VAR 0 1
42223: PUSH
42224: LD_INT 3
42226: MINUS
42227: PUSH
42228: LD_VAR 0 2
42232: PUSH
42233: LD_INT 3
42235: MINUS
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: LIST
42244: PUSH
42245: LD_VAR 0 1
42249: PUSH
42250: LD_INT 4
42252: MINUS
42253: PUSH
42254: LD_VAR 0 2
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: LIST
42266: PUSH
42267: LD_VAR 0 1
42271: PUSH
42272: LD_VAR 0 2
42276: PUSH
42277: LD_INT 3
42279: PLUS
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: PUSH
42289: LD_VAR 0 1
42293: PUSH
42294: LD_INT 4
42296: PLUS
42297: PUSH
42298: LD_VAR 0 2
42302: PUSH
42303: LD_INT 4
42305: PLUS
42306: PUSH
42307: LD_INT 5
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: LIST
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: ST_TO_ADDR
// end ; 2 :
42322: GO 42881
42324: LD_INT 2
42326: DOUBLE
42327: EQUAL
42328: IFTRUE 42332
42330: GO 42461
42332: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42333: LD_ADDR_VAR 0 5
42337: PUSH
42338: LD_VAR 0 1
42342: PUSH
42343: LD_VAR 0 2
42347: PUSH
42348: LD_INT 3
42350: MINUS
42351: PUSH
42352: LD_INT 3
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: LIST
42359: PUSH
42360: LD_VAR 0 1
42364: PUSH
42365: LD_INT 4
42367: PLUS
42368: PUSH
42369: LD_VAR 0 2
42373: PUSH
42374: LD_INT 4
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: LIST
42381: PUSH
42382: LD_VAR 0 1
42386: PUSH
42387: LD_VAR 0 2
42391: PUSH
42392: LD_INT 4
42394: PLUS
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: PUSH
42404: LD_VAR 0 1
42408: PUSH
42409: LD_INT 3
42411: MINUS
42412: PUSH
42413: LD_VAR 0 2
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: LIST
42425: PUSH
42426: LD_VAR 0 1
42430: PUSH
42431: LD_INT 4
42433: MINUS
42434: PUSH
42435: LD_VAR 0 2
42439: PUSH
42440: LD_INT 4
42442: MINUS
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: LIST
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: ST_TO_ADDR
// end ; 3 :
42459: GO 42881
42461: LD_INT 3
42463: DOUBLE
42464: EQUAL
42465: IFTRUE 42469
42467: GO 42602
42469: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42470: LD_ADDR_VAR 0 5
42474: PUSH
42475: LD_VAR 0 1
42479: PUSH
42480: LD_INT 3
42482: PLUS
42483: PUSH
42484: LD_VAR 0 2
42488: PUSH
42489: LD_INT 4
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: PUSH
42497: LD_VAR 0 1
42501: PUSH
42502: LD_INT 4
42504: PLUS
42505: PUSH
42506: LD_VAR 0 2
42510: PUSH
42511: LD_INT 4
42513: PLUS
42514: PUSH
42515: LD_INT 5
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: LIST
42522: PUSH
42523: LD_VAR 0 1
42527: PUSH
42528: LD_INT 4
42530: MINUS
42531: PUSH
42532: LD_VAR 0 2
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: LIST
42544: PUSH
42545: LD_VAR 0 1
42549: PUSH
42550: LD_VAR 0 2
42554: PUSH
42555: LD_INT 4
42557: MINUS
42558: PUSH
42559: LD_INT 3
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: LIST
42566: PUSH
42567: LD_VAR 0 1
42571: PUSH
42572: LD_INT 3
42574: MINUS
42575: PUSH
42576: LD_VAR 0 2
42580: PUSH
42581: LD_INT 3
42583: MINUS
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: LIST
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: ST_TO_ADDR
// end ; 4 :
42600: GO 42881
42602: LD_INT 4
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42743
42610: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42611: LD_ADDR_VAR 0 5
42615: PUSH
42616: LD_VAR 0 1
42620: PUSH
42621: LD_VAR 0 2
42625: PUSH
42626: LD_INT 4
42628: PLUS
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: PUSH
42638: LD_VAR 0 1
42642: PUSH
42643: LD_INT 3
42645: PLUS
42646: PUSH
42647: LD_VAR 0 2
42651: PUSH
42652: LD_INT 3
42654: PLUS
42655: PUSH
42656: LD_INT 5
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: PUSH
42664: LD_VAR 0 1
42668: PUSH
42669: LD_INT 4
42671: PLUS
42672: PUSH
42673: LD_VAR 0 2
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: LIST
42685: PUSH
42686: LD_VAR 0 1
42690: PUSH
42691: LD_VAR 0 2
42695: PUSH
42696: LD_INT 3
42698: MINUS
42699: PUSH
42700: LD_INT 3
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: LIST
42707: PUSH
42708: LD_VAR 0 1
42712: PUSH
42713: LD_INT 4
42715: MINUS
42716: PUSH
42717: LD_VAR 0 2
42721: PUSH
42722: LD_INT 4
42724: MINUS
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: LIST
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: ST_TO_ADDR
// end ; 5 :
42741: GO 42881
42743: LD_INT 5
42745: DOUBLE
42746: EQUAL
42747: IFTRUE 42751
42749: GO 42880
42751: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42752: LD_ADDR_VAR 0 5
42756: PUSH
42757: LD_VAR 0 1
42761: PUSH
42762: LD_INT 4
42764: MINUS
42765: PUSH
42766: LD_VAR 0 2
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: PUSH
42779: LD_VAR 0 1
42783: PUSH
42784: LD_VAR 0 2
42788: PUSH
42789: LD_INT 4
42791: MINUS
42792: PUSH
42793: LD_INT 3
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: PUSH
42801: LD_VAR 0 1
42805: PUSH
42806: LD_INT 4
42808: PLUS
42809: PUSH
42810: LD_VAR 0 2
42814: PUSH
42815: LD_INT 4
42817: PLUS
42818: PUSH
42819: LD_INT 5
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: PUSH
42827: LD_VAR 0 1
42831: PUSH
42832: LD_INT 3
42834: PLUS
42835: PUSH
42836: LD_VAR 0 2
42840: PUSH
42841: LD_INT 4
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: PUSH
42849: LD_VAR 0 1
42853: PUSH
42854: LD_VAR 0 2
42858: PUSH
42859: LD_INT 3
42861: PLUS
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: LIST
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: ST_TO_ADDR
// end ; end ;
42878: GO 42881
42880: POP
// result := list ;
42881: LD_ADDR_VAR 0 4
42885: PUSH
42886: LD_VAR 0 5
42890: ST_TO_ADDR
// end ;
42891: LD_VAR 0 4
42895: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42896: LD_INT 0
42898: PPUSH
42899: PPUSH
42900: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42901: LD_VAR 0 1
42905: NOT
42906: PUSH
42907: LD_VAR 0 2
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: LD_INT 3
42920: PUSH
42921: LD_INT 4
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: IN
42930: NOT
42931: OR
42932: IFFALSE 42936
// exit ;
42934: GO 43028
// tmp := [ ] ;
42936: LD_ADDR_VAR 0 5
42940: PUSH
42941: EMPTY
42942: ST_TO_ADDR
// for i in units do
42943: LD_ADDR_VAR 0 4
42947: PUSH
42948: LD_VAR 0 1
42952: PUSH
42953: FOR_IN
42954: IFFALSE 42997
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
42956: LD_ADDR_VAR 0 5
42960: PUSH
42961: LD_VAR 0 5
42965: PPUSH
42966: LD_VAR 0 5
42970: PUSH
42971: LD_INT 1
42973: PLUS
42974: PPUSH
42975: LD_VAR 0 4
42979: PPUSH
42980: LD_VAR 0 2
42984: PPUSH
42985: CALL_OW 259
42989: PPUSH
42990: CALL_OW 2
42994: ST_TO_ADDR
42995: GO 42953
42997: POP
42998: POP
// if not tmp then
42999: LD_VAR 0 5
43003: NOT
43004: IFFALSE 43008
// exit ;
43006: GO 43028
// result := SortListByListDesc ( units , tmp ) ;
43008: LD_ADDR_VAR 0 3
43012: PUSH
43013: LD_VAR 0 1
43017: PPUSH
43018: LD_VAR 0 5
43022: PPUSH
43023: CALL_OW 77
43027: ST_TO_ADDR
// end ;
43028: LD_VAR 0 3
43032: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43033: LD_INT 0
43035: PPUSH
43036: PPUSH
43037: PPUSH
// result := false ;
43038: LD_ADDR_VAR 0 3
43042: PUSH
43043: LD_INT 0
43045: ST_TO_ADDR
// x := GetX ( building ) ;
43046: LD_ADDR_VAR 0 4
43050: PUSH
43051: LD_VAR 0 2
43055: PPUSH
43056: CALL_OW 250
43060: ST_TO_ADDR
// y := GetY ( building ) ;
43061: LD_ADDR_VAR 0 5
43065: PUSH
43066: LD_VAR 0 2
43070: PPUSH
43071: CALL_OW 251
43075: ST_TO_ADDR
// if not building or not x or not y then
43076: LD_VAR 0 2
43080: NOT
43081: PUSH
43082: LD_VAR 0 4
43086: NOT
43087: OR
43088: PUSH
43089: LD_VAR 0 5
43093: NOT
43094: OR
43095: IFFALSE 43099
// exit ;
43097: GO 43191
// if GetTaskList ( unit ) then
43099: LD_VAR 0 1
43103: PPUSH
43104: CALL_OW 437
43108: IFFALSE 43191
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43110: LD_STRING e
43112: PUSH
43113: LD_VAR 0 1
43117: PPUSH
43118: CALL_OW 437
43122: PUSH
43123: LD_INT 1
43125: ARRAY
43126: PUSH
43127: LD_INT 1
43129: ARRAY
43130: EQUAL
43131: PUSH
43132: LD_VAR 0 4
43136: PUSH
43137: LD_VAR 0 1
43141: PPUSH
43142: CALL_OW 437
43146: PUSH
43147: LD_INT 1
43149: ARRAY
43150: PUSH
43151: LD_INT 2
43153: ARRAY
43154: EQUAL
43155: AND
43156: PUSH
43157: LD_VAR 0 5
43161: PUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: CALL_OW 437
43171: PUSH
43172: LD_INT 1
43174: ARRAY
43175: PUSH
43176: LD_INT 3
43178: ARRAY
43179: EQUAL
43180: AND
43181: IFFALSE 43191
// result := true end ;
43183: LD_ADDR_VAR 0 3
43187: PUSH
43188: LD_INT 1
43190: ST_TO_ADDR
// end ;
43191: LD_VAR 0 3
43195: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43196: LD_INT 0
43198: PPUSH
// result := false ;
43199: LD_ADDR_VAR 0 4
43203: PUSH
43204: LD_INT 0
43206: ST_TO_ADDR
// if GetTaskList ( unit ) then
43207: LD_VAR 0 1
43211: PPUSH
43212: CALL_OW 437
43216: IFFALSE 43299
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43218: LD_STRING M
43220: PUSH
43221: LD_VAR 0 1
43225: PPUSH
43226: CALL_OW 437
43230: PUSH
43231: LD_INT 1
43233: ARRAY
43234: PUSH
43235: LD_INT 1
43237: ARRAY
43238: EQUAL
43239: PUSH
43240: LD_VAR 0 2
43244: PUSH
43245: LD_VAR 0 1
43249: PPUSH
43250: CALL_OW 437
43254: PUSH
43255: LD_INT 1
43257: ARRAY
43258: PUSH
43259: LD_INT 2
43261: ARRAY
43262: EQUAL
43263: AND
43264: PUSH
43265: LD_VAR 0 3
43269: PUSH
43270: LD_VAR 0 1
43274: PPUSH
43275: CALL_OW 437
43279: PUSH
43280: LD_INT 1
43282: ARRAY
43283: PUSH
43284: LD_INT 3
43286: ARRAY
43287: EQUAL
43288: AND
43289: IFFALSE 43299
// result := true ;
43291: LD_ADDR_VAR 0 4
43295: PUSH
43296: LD_INT 1
43298: ST_TO_ADDR
// end ; end ;
43299: LD_VAR 0 4
43303: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43304: LD_INT 0
43306: PPUSH
43307: PPUSH
43308: PPUSH
43309: PPUSH
// if not unit or not area then
43310: LD_VAR 0 1
43314: NOT
43315: PUSH
43316: LD_VAR 0 2
43320: NOT
43321: OR
43322: IFFALSE 43326
// exit ;
43324: GO 43490
// tmp := AreaToList ( area , i ) ;
43326: LD_ADDR_VAR 0 6
43330: PUSH
43331: LD_VAR 0 2
43335: PPUSH
43336: LD_VAR 0 5
43340: PPUSH
43341: CALL_OW 517
43345: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43346: LD_ADDR_VAR 0 5
43350: PUSH
43351: DOUBLE
43352: LD_INT 1
43354: DEC
43355: ST_TO_ADDR
43356: LD_VAR 0 6
43360: PUSH
43361: LD_INT 1
43363: ARRAY
43364: PUSH
43365: FOR_TO
43366: IFFALSE 43488
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43368: LD_ADDR_VAR 0 7
43372: PUSH
43373: LD_VAR 0 6
43377: PUSH
43378: LD_INT 1
43380: ARRAY
43381: PUSH
43382: LD_VAR 0 5
43386: ARRAY
43387: PUSH
43388: LD_VAR 0 6
43392: PUSH
43393: LD_INT 2
43395: ARRAY
43396: PUSH
43397: LD_VAR 0 5
43401: ARRAY
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
43407: LD_VAR 0 7
43411: PUSH
43412: LD_INT 1
43414: ARRAY
43415: PPUSH
43416: LD_VAR 0 7
43420: PUSH
43421: LD_INT 2
43423: ARRAY
43424: PPUSH
43425: CALL_OW 428
43429: PUSH
43430: LD_INT 0
43432: EQUAL
43433: IFFALSE 43486
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43435: LD_VAR 0 1
43439: PPUSH
43440: LD_VAR 0 7
43444: PUSH
43445: LD_INT 1
43447: ARRAY
43448: PPUSH
43449: LD_VAR 0 7
43453: PUSH
43454: LD_INT 2
43456: ARRAY
43457: PPUSH
43458: LD_VAR 0 3
43462: PPUSH
43463: CALL_OW 48
// result := IsPlaced ( unit ) ;
43467: LD_ADDR_VAR 0 4
43471: PUSH
43472: LD_VAR 0 1
43476: PPUSH
43477: CALL_OW 305
43481: ST_TO_ADDR
// exit ;
43482: POP
43483: POP
43484: GO 43490
// end ; end ;
43486: GO 43365
43488: POP
43489: POP
// end ;
43490: LD_VAR 0 4
43494: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43495: LD_INT 0
43497: PPUSH
43498: PPUSH
43499: PPUSH
// if not side or side > 8 then
43500: LD_VAR 0 1
43504: NOT
43505: PUSH
43506: LD_VAR 0 1
43510: PUSH
43511: LD_INT 8
43513: GREATER
43514: OR
43515: IFFALSE 43519
// exit ;
43517: GO 43706
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43519: LD_ADDR_VAR 0 4
43523: PUSH
43524: LD_INT 22
43526: PUSH
43527: LD_VAR 0 1
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 21
43538: PUSH
43539: LD_INT 3
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PPUSH
43550: CALL_OW 69
43554: ST_TO_ADDR
// if not tmp then
43555: LD_VAR 0 4
43559: NOT
43560: IFFALSE 43564
// exit ;
43562: GO 43706
// enable_addtolog := true ;
43564: LD_ADDR_OWVAR 81
43568: PUSH
43569: LD_INT 1
43571: ST_TO_ADDR
// AddToLog ( [ ) ;
43572: LD_STRING [
43574: PPUSH
43575: CALL_OW 561
// for i in tmp do
43579: LD_ADDR_VAR 0 3
43583: PUSH
43584: LD_VAR 0 4
43588: PUSH
43589: FOR_IN
43590: IFFALSE 43697
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43592: LD_STRING [
43594: PUSH
43595: LD_VAR 0 3
43599: PPUSH
43600: CALL_OW 266
43604: STR
43605: PUSH
43606: LD_STRING , 
43608: STR
43609: PUSH
43610: LD_VAR 0 3
43614: PPUSH
43615: CALL_OW 250
43619: STR
43620: PUSH
43621: LD_STRING , 
43623: STR
43624: PUSH
43625: LD_VAR 0 3
43629: PPUSH
43630: CALL_OW 251
43634: STR
43635: PUSH
43636: LD_STRING , 
43638: STR
43639: PUSH
43640: LD_VAR 0 3
43644: PPUSH
43645: CALL_OW 254
43649: STR
43650: PUSH
43651: LD_STRING , 
43653: STR
43654: PUSH
43655: LD_VAR 0 3
43659: PPUSH
43660: LD_INT 1
43662: PPUSH
43663: CALL_OW 268
43667: STR
43668: PUSH
43669: LD_STRING , 
43671: STR
43672: PUSH
43673: LD_VAR 0 3
43677: PPUSH
43678: LD_INT 2
43680: PPUSH
43681: CALL_OW 268
43685: STR
43686: PUSH
43687: LD_STRING ],
43689: STR
43690: PPUSH
43691: CALL_OW 561
// end ;
43695: GO 43589
43697: POP
43698: POP
// AddToLog ( ]; ) ;
43699: LD_STRING ];
43701: PPUSH
43702: CALL_OW 561
// end ;
43706: LD_VAR 0 2
43710: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43711: LD_INT 0
43713: PPUSH
43714: PPUSH
43715: PPUSH
43716: PPUSH
43717: PPUSH
// if not area or not rate or not max then
43718: LD_VAR 0 1
43722: NOT
43723: PUSH
43724: LD_VAR 0 2
43728: NOT
43729: OR
43730: PUSH
43731: LD_VAR 0 4
43735: NOT
43736: OR
43737: IFFALSE 43741
// exit ;
43739: GO 43933
// while 1 do
43741: LD_INT 1
43743: IFFALSE 43933
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43745: LD_ADDR_VAR 0 9
43749: PUSH
43750: LD_VAR 0 1
43754: PPUSH
43755: LD_INT 1
43757: PPUSH
43758: CALL_OW 287
43762: PUSH
43763: LD_INT 10
43765: MUL
43766: ST_TO_ADDR
// r := rate / 10 ;
43767: LD_ADDR_VAR 0 7
43771: PUSH
43772: LD_VAR 0 2
43776: PUSH
43777: LD_INT 10
43779: DIVREAL
43780: ST_TO_ADDR
// time := 1 1$00 ;
43781: LD_ADDR_VAR 0 8
43785: PUSH
43786: LD_INT 2100
43788: ST_TO_ADDR
// if amount < min then
43789: LD_VAR 0 9
43793: PUSH
43794: LD_VAR 0 3
43798: LESS
43799: IFFALSE 43817
// r := r * 2 else
43801: LD_ADDR_VAR 0 7
43805: PUSH
43806: LD_VAR 0 7
43810: PUSH
43811: LD_INT 2
43813: MUL
43814: ST_TO_ADDR
43815: GO 43843
// if amount > max then
43817: LD_VAR 0 9
43821: PUSH
43822: LD_VAR 0 4
43826: GREATER
43827: IFFALSE 43843
// r := r / 2 ;
43829: LD_ADDR_VAR 0 7
43833: PUSH
43834: LD_VAR 0 7
43838: PUSH
43839: LD_INT 2
43841: DIVREAL
43842: ST_TO_ADDR
// time := time / r ;
43843: LD_ADDR_VAR 0 8
43847: PUSH
43848: LD_VAR 0 8
43852: PUSH
43853: LD_VAR 0 7
43857: DIVREAL
43858: ST_TO_ADDR
// if time < 0 then
43859: LD_VAR 0 8
43863: PUSH
43864: LD_INT 0
43866: LESS
43867: IFFALSE 43884
// time := time * - 1 ;
43869: LD_ADDR_VAR 0 8
43873: PUSH
43874: LD_VAR 0 8
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: MUL
43883: ST_TO_ADDR
// wait ( time ) ;
43884: LD_VAR 0 8
43888: PPUSH
43889: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
43893: LD_INT 35
43895: PPUSH
43896: LD_INT 875
43898: PPUSH
43899: CALL_OW 12
43903: PPUSH
43904: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43908: LD_INT 1
43910: PPUSH
43911: LD_INT 5
43913: PPUSH
43914: CALL_OW 12
43918: PPUSH
43919: LD_VAR 0 1
43923: PPUSH
43924: LD_INT 1
43926: PPUSH
43927: CALL_OW 55
// end ;
43931: GO 43741
// end ;
43933: LD_VAR 0 5
43937: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43938: LD_INT 0
43940: PPUSH
43941: PPUSH
43942: PPUSH
43943: PPUSH
43944: PPUSH
43945: PPUSH
43946: PPUSH
43947: PPUSH
// if not turrets or not factories then
43948: LD_VAR 0 1
43952: NOT
43953: PUSH
43954: LD_VAR 0 2
43958: NOT
43959: OR
43960: IFFALSE 43964
// exit ;
43962: GO 44271
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43964: LD_ADDR_VAR 0 10
43968: PUSH
43969: LD_INT 5
43971: PUSH
43972: LD_INT 6
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: LD_INT 4
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 3
43991: PUSH
43992: LD_INT 5
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 24
44006: PUSH
44007: LD_INT 25
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 23
44016: PUSH
44017: LD_INT 27
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 42
44030: PUSH
44031: LD_INT 43
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 44
44040: PUSH
44041: LD_INT 46
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 45
44050: PUSH
44051: LD_INT 47
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: LIST
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: ST_TO_ADDR
// result := [ ] ;
44068: LD_ADDR_VAR 0 3
44072: PUSH
44073: EMPTY
44074: ST_TO_ADDR
// for i in turrets do
44075: LD_ADDR_VAR 0 4
44079: PUSH
44080: LD_VAR 0 1
44084: PUSH
44085: FOR_IN
44086: IFFALSE 44269
// begin nat := GetNation ( i ) ;
44088: LD_ADDR_VAR 0 7
44092: PUSH
44093: LD_VAR 0 4
44097: PPUSH
44098: CALL_OW 248
44102: ST_TO_ADDR
// weapon := 0 ;
44103: LD_ADDR_VAR 0 8
44107: PUSH
44108: LD_INT 0
44110: ST_TO_ADDR
// if not nat then
44111: LD_VAR 0 7
44115: NOT
44116: IFFALSE 44120
// continue ;
44118: GO 44085
// for j in list [ nat ] do
44120: LD_ADDR_VAR 0 5
44124: PUSH
44125: LD_VAR 0 10
44129: PUSH
44130: LD_VAR 0 7
44134: ARRAY
44135: PUSH
44136: FOR_IN
44137: IFFALSE 44178
// if GetBWeapon ( i ) = j [ 1 ] then
44139: LD_VAR 0 4
44143: PPUSH
44144: CALL_OW 269
44148: PUSH
44149: LD_VAR 0 5
44153: PUSH
44154: LD_INT 1
44156: ARRAY
44157: EQUAL
44158: IFFALSE 44176
// begin weapon := j [ 2 ] ;
44160: LD_ADDR_VAR 0 8
44164: PUSH
44165: LD_VAR 0 5
44169: PUSH
44170: LD_INT 2
44172: ARRAY
44173: ST_TO_ADDR
// break ;
44174: GO 44178
// end ;
44176: GO 44136
44178: POP
44179: POP
// if not weapon then
44180: LD_VAR 0 8
44184: NOT
44185: IFFALSE 44189
// continue ;
44187: GO 44085
// for k in factories do
44189: LD_ADDR_VAR 0 6
44193: PUSH
44194: LD_VAR 0 2
44198: PUSH
44199: FOR_IN
44200: IFFALSE 44265
// begin weapons := AvailableWeaponList ( k ) ;
44202: LD_ADDR_VAR 0 9
44206: PUSH
44207: LD_VAR 0 6
44211: PPUSH
44212: CALL_OW 478
44216: ST_TO_ADDR
// if not weapons then
44217: LD_VAR 0 9
44221: NOT
44222: IFFALSE 44226
// continue ;
44224: GO 44199
// if weapon in weapons then
44226: LD_VAR 0 8
44230: PUSH
44231: LD_VAR 0 9
44235: IN
44236: IFFALSE 44263
// begin result := [ i , weapon ] ;
44238: LD_ADDR_VAR 0 3
44242: PUSH
44243: LD_VAR 0 4
44247: PUSH
44248: LD_VAR 0 8
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: ST_TO_ADDR
// exit ;
44257: POP
44258: POP
44259: POP
44260: POP
44261: GO 44271
// end ; end ;
44263: GO 44199
44265: POP
44266: POP
// end ;
44267: GO 44085
44269: POP
44270: POP
// end ;
44271: LD_VAR 0 3
44275: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44276: LD_INT 0
44278: PPUSH
// if not side or side > 8 then
44279: LD_VAR 0 3
44283: NOT
44284: PUSH
44285: LD_VAR 0 3
44289: PUSH
44290: LD_INT 8
44292: GREATER
44293: OR
44294: IFFALSE 44298
// exit ;
44296: GO 44357
// if not range then
44298: LD_VAR 0 4
44302: NOT
44303: IFFALSE 44314
// range := - 12 ;
44305: LD_ADDR_VAR 0 4
44309: PUSH
44310: LD_INT 12
44312: NEG
44313: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44314: LD_VAR 0 1
44318: PPUSH
44319: LD_VAR 0 2
44323: PPUSH
44324: LD_VAR 0 3
44328: PPUSH
44329: LD_VAR 0 4
44333: PPUSH
44334: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44338: LD_VAR 0 1
44342: PPUSH
44343: LD_VAR 0 2
44347: PPUSH
44348: LD_VAR 0 3
44352: PPUSH
44353: CALL_OW 331
// end ;
44357: LD_VAR 0 5
44361: RET
// export function Video ( mode ) ; begin
44362: LD_INT 0
44364: PPUSH
// ingame_video = mode ;
44365: LD_ADDR_OWVAR 52
44369: PUSH
44370: LD_VAR 0 1
44374: ST_TO_ADDR
// interface_hidden = mode ;
44375: LD_ADDR_OWVAR 54
44379: PUSH
44380: LD_VAR 0 1
44384: ST_TO_ADDR
// end ;
44385: LD_VAR 0 2
44389: RET
// export function Join ( array , element ) ; begin
44390: LD_INT 0
44392: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44393: LD_ADDR_VAR 0 3
44397: PUSH
44398: LD_VAR 0 1
44402: PPUSH
44403: LD_VAR 0 1
44407: PUSH
44408: LD_INT 1
44410: PLUS
44411: PPUSH
44412: LD_VAR 0 2
44416: PPUSH
44417: CALL_OW 1
44421: ST_TO_ADDR
// end ;
44422: LD_VAR 0 3
44426: RET
// export function JoinUnion ( array , element ) ; begin
44427: LD_INT 0
44429: PPUSH
// result := array union element ;
44430: LD_ADDR_VAR 0 3
44434: PUSH
44435: LD_VAR 0 1
44439: PUSH
44440: LD_VAR 0 2
44444: UNION
44445: ST_TO_ADDR
// end ;
44446: LD_VAR 0 3
44450: RET
// export function GetBehemoths ( side ) ; begin
44451: LD_INT 0
44453: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
44454: LD_ADDR_VAR 0 2
44458: PUSH
44459: LD_INT 22
44461: PUSH
44462: LD_VAR 0 1
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 31
44473: PUSH
44474: LD_INT 25
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PPUSH
44485: CALL_OW 69
44489: ST_TO_ADDR
// end ;
44490: LD_VAR 0 2
44494: RET
// export function Shuffle ( array ) ; var i , index ; begin
44495: LD_INT 0
44497: PPUSH
44498: PPUSH
44499: PPUSH
// result := [ ] ;
44500: LD_ADDR_VAR 0 2
44504: PUSH
44505: EMPTY
44506: ST_TO_ADDR
// if not array then
44507: LD_VAR 0 1
44511: NOT
44512: IFFALSE 44516
// exit ;
44514: GO 44615
// Randomize ;
44516: CALL_OW 10
// for i = array downto 1 do
44520: LD_ADDR_VAR 0 3
44524: PUSH
44525: DOUBLE
44526: LD_VAR 0 1
44530: INC
44531: ST_TO_ADDR
44532: LD_INT 1
44534: PUSH
44535: FOR_DOWNTO
44536: IFFALSE 44613
// begin index := rand ( 1 , array ) ;
44538: LD_ADDR_VAR 0 4
44542: PUSH
44543: LD_INT 1
44545: PPUSH
44546: LD_VAR 0 1
44550: PPUSH
44551: CALL_OW 12
44555: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44556: LD_ADDR_VAR 0 2
44560: PUSH
44561: LD_VAR 0 2
44565: PPUSH
44566: LD_VAR 0 2
44570: PUSH
44571: LD_INT 1
44573: PLUS
44574: PPUSH
44575: LD_VAR 0 1
44579: PUSH
44580: LD_VAR 0 4
44584: ARRAY
44585: PPUSH
44586: CALL_OW 2
44590: ST_TO_ADDR
// array := Delete ( array , index ) ;
44591: LD_ADDR_VAR 0 1
44595: PUSH
44596: LD_VAR 0 1
44600: PPUSH
44601: LD_VAR 0 4
44605: PPUSH
44606: CALL_OW 3
44610: ST_TO_ADDR
// end ;
44611: GO 44535
44613: POP
44614: POP
// end ;
44615: LD_VAR 0 2
44619: RET
// export function GetBaseMaterials ( base ) ; begin
44620: LD_INT 0
44622: PPUSH
// result := [ 0 , 0 , 0 ] ;
44623: LD_ADDR_VAR 0 2
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: ST_TO_ADDR
// if not base then
44642: LD_VAR 0 1
44646: NOT
44647: IFFALSE 44651
// exit ;
44649: GO 44700
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44651: LD_ADDR_VAR 0 2
44655: PUSH
44656: LD_VAR 0 1
44660: PPUSH
44661: LD_INT 1
44663: PPUSH
44664: CALL_OW 275
44668: PUSH
44669: LD_VAR 0 1
44673: PPUSH
44674: LD_INT 2
44676: PPUSH
44677: CALL_OW 275
44681: PUSH
44682: LD_VAR 0 1
44686: PPUSH
44687: LD_INT 3
44689: PPUSH
44690: CALL_OW 275
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: LIST
44699: ST_TO_ADDR
// end ;
44700: LD_VAR 0 2
44704: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44705: LD_INT 0
44707: PPUSH
44708: PPUSH
// result := array ;
44709: LD_ADDR_VAR 0 3
44713: PUSH
44714: LD_VAR 0 1
44718: ST_TO_ADDR
// if size > 0 then
44719: LD_VAR 0 2
44723: PUSH
44724: LD_INT 0
44726: GREATER
44727: IFFALSE 44773
// for i := array downto size do
44729: LD_ADDR_VAR 0 4
44733: PUSH
44734: DOUBLE
44735: LD_VAR 0 1
44739: INC
44740: ST_TO_ADDR
44741: LD_VAR 0 2
44745: PUSH
44746: FOR_DOWNTO
44747: IFFALSE 44771
// result := Delete ( result , result ) ;
44749: LD_ADDR_VAR 0 3
44753: PUSH
44754: LD_VAR 0 3
44758: PPUSH
44759: LD_VAR 0 3
44763: PPUSH
44764: CALL_OW 3
44768: ST_TO_ADDR
44769: GO 44746
44771: POP
44772: POP
// end ;
44773: LD_VAR 0 3
44777: RET
// export function ComExit ( unit ) ; var tmp ; begin
44778: LD_INT 0
44780: PPUSH
44781: PPUSH
// if not IsInUnit ( unit ) then
44782: LD_VAR 0 1
44786: PPUSH
44787: CALL_OW 310
44791: NOT
44792: IFFALSE 44796
// exit ;
44794: GO 44856
// tmp := IsInUnit ( unit ) ;
44796: LD_ADDR_VAR 0 3
44800: PUSH
44801: LD_VAR 0 1
44805: PPUSH
44806: CALL_OW 310
44810: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44811: LD_VAR 0 3
44815: PPUSH
44816: CALL_OW 247
44820: PUSH
44821: LD_INT 2
44823: EQUAL
44824: IFFALSE 44837
// ComExitVehicle ( unit ) else
44826: LD_VAR 0 1
44830: PPUSH
44831: CALL_OW 121
44835: GO 44846
// ComExitBuilding ( unit ) ;
44837: LD_VAR 0 1
44841: PPUSH
44842: CALL_OW 122
// result := tmp ;
44846: LD_ADDR_VAR 0 2
44850: PUSH
44851: LD_VAR 0 3
44855: ST_TO_ADDR
// end ;
44856: LD_VAR 0 2
44860: RET
// export function ComExitAll ( units ) ; var i ; begin
44861: LD_INT 0
44863: PPUSH
44864: PPUSH
// if not units then
44865: LD_VAR 0 1
44869: NOT
44870: IFFALSE 44874
// exit ;
44872: GO 44900
// for i in units do
44874: LD_ADDR_VAR 0 3
44878: PUSH
44879: LD_VAR 0 1
44883: PUSH
44884: FOR_IN
44885: IFFALSE 44898
// ComExit ( i ) ;
44887: LD_VAR 0 3
44891: PPUSH
44892: CALL 44778 0 1
44896: GO 44884
44898: POP
44899: POP
// end ;
44900: LD_VAR 0 2
44904: RET
// export function ResetHc ; begin
44905: LD_INT 0
44907: PPUSH
// InitHc ;
44908: CALL_OW 19
// hc_importance := 0 ;
44912: LD_ADDR_OWVAR 32
44916: PUSH
44917: LD_INT 0
44919: ST_TO_ADDR
// end ;
44920: LD_VAR 0 1
44924: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44925: LD_INT 0
44927: PPUSH
44928: PPUSH
44929: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44930: LD_ADDR_VAR 0 6
44934: PUSH
44935: LD_VAR 0 1
44939: PUSH
44940: LD_VAR 0 3
44944: PLUS
44945: PUSH
44946: LD_INT 2
44948: DIV
44949: ST_TO_ADDR
// if _x < 0 then
44950: LD_VAR 0 6
44954: PUSH
44955: LD_INT 0
44957: LESS
44958: IFFALSE 44975
// _x := _x * - 1 ;
44960: LD_ADDR_VAR 0 6
44964: PUSH
44965: LD_VAR 0 6
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: MUL
44974: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44975: LD_ADDR_VAR 0 7
44979: PUSH
44980: LD_VAR 0 2
44984: PUSH
44985: LD_VAR 0 4
44989: PLUS
44990: PUSH
44991: LD_INT 2
44993: DIV
44994: ST_TO_ADDR
// if _y < 0 then
44995: LD_VAR 0 7
44999: PUSH
45000: LD_INT 0
45002: LESS
45003: IFFALSE 45020
// _y := _y * - 1 ;
45005: LD_ADDR_VAR 0 7
45009: PUSH
45010: LD_VAR 0 7
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: MUL
45019: ST_TO_ADDR
// result := [ _x , _y ] ;
45020: LD_ADDR_VAR 0 5
45024: PUSH
45025: LD_VAR 0 6
45029: PUSH
45030: LD_VAR 0 7
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: ST_TO_ADDR
// end ;
45039: LD_VAR 0 5
45043: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45044: LD_INT 0
45046: PPUSH
45047: PPUSH
45048: PPUSH
45049: PPUSH
// task := GetTaskList ( unit ) ;
45050: LD_ADDR_VAR 0 7
45054: PUSH
45055: LD_VAR 0 1
45059: PPUSH
45060: CALL_OW 437
45064: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45065: LD_VAR 0 7
45069: NOT
45070: PUSH
45071: LD_VAR 0 1
45075: PPUSH
45076: LD_VAR 0 2
45080: PPUSH
45081: CALL_OW 308
45085: NOT
45086: AND
45087: IFFALSE 45091
// exit ;
45089: GO 45209
// if IsInArea ( unit , area ) then
45091: LD_VAR 0 1
45095: PPUSH
45096: LD_VAR 0 2
45100: PPUSH
45101: CALL_OW 308
45105: IFFALSE 45123
// begin ComMoveToArea ( unit , goAway ) ;
45107: LD_VAR 0 1
45111: PPUSH
45112: LD_VAR 0 3
45116: PPUSH
45117: CALL_OW 113
// exit ;
45121: GO 45209
// end ; if task [ 1 ] [ 1 ] <> M then
45123: LD_VAR 0 7
45127: PUSH
45128: LD_INT 1
45130: ARRAY
45131: PUSH
45132: LD_INT 1
45134: ARRAY
45135: PUSH
45136: LD_STRING M
45138: NONEQUAL
45139: IFFALSE 45143
// exit ;
45141: GO 45209
// x := task [ 1 ] [ 2 ] ;
45143: LD_ADDR_VAR 0 5
45147: PUSH
45148: LD_VAR 0 7
45152: PUSH
45153: LD_INT 1
45155: ARRAY
45156: PUSH
45157: LD_INT 2
45159: ARRAY
45160: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45161: LD_ADDR_VAR 0 6
45165: PUSH
45166: LD_VAR 0 7
45170: PUSH
45171: LD_INT 1
45173: ARRAY
45174: PUSH
45175: LD_INT 3
45177: ARRAY
45178: ST_TO_ADDR
// if InArea ( x , y , area ) then
45179: LD_VAR 0 5
45183: PPUSH
45184: LD_VAR 0 6
45188: PPUSH
45189: LD_VAR 0 2
45193: PPUSH
45194: CALL_OW 309
45198: IFFALSE 45209
// ComStop ( unit ) ;
45200: LD_VAR 0 1
45204: PPUSH
45205: CALL_OW 141
// end ;
45209: LD_VAR 0 4
45213: RET
// export function Abs ( value ) ; begin
45214: LD_INT 0
45216: PPUSH
// result := value ;
45217: LD_ADDR_VAR 0 2
45221: PUSH
45222: LD_VAR 0 1
45226: ST_TO_ADDR
// if value < 0 then
45227: LD_VAR 0 1
45231: PUSH
45232: LD_INT 0
45234: LESS
45235: IFFALSE 45252
// result := value * - 1 ;
45237: LD_ADDR_VAR 0 2
45241: PUSH
45242: LD_VAR 0 1
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: MUL
45251: ST_TO_ADDR
// end ;
45252: LD_VAR 0 2
45256: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45257: LD_INT 0
45259: PPUSH
45260: PPUSH
45261: PPUSH
45262: PPUSH
45263: PPUSH
45264: PPUSH
45265: PPUSH
45266: PPUSH
// if not unit or not building then
45267: LD_VAR 0 1
45271: NOT
45272: PUSH
45273: LD_VAR 0 2
45277: NOT
45278: OR
45279: IFFALSE 45283
// exit ;
45281: GO 45509
// x := GetX ( building ) ;
45283: LD_ADDR_VAR 0 4
45287: PUSH
45288: LD_VAR 0 2
45292: PPUSH
45293: CALL_OW 250
45297: ST_TO_ADDR
// y := GetY ( building ) ;
45298: LD_ADDR_VAR 0 6
45302: PUSH
45303: LD_VAR 0 2
45307: PPUSH
45308: CALL_OW 251
45312: ST_TO_ADDR
// d := GetDir ( building ) ;
45313: LD_ADDR_VAR 0 8
45317: PUSH
45318: LD_VAR 0 2
45322: PPUSH
45323: CALL_OW 254
45327: ST_TO_ADDR
// r := 4 ;
45328: LD_ADDR_VAR 0 9
45332: PUSH
45333: LD_INT 4
45335: ST_TO_ADDR
// for i := 1 to 5 do
45336: LD_ADDR_VAR 0 10
45340: PUSH
45341: DOUBLE
45342: LD_INT 1
45344: DEC
45345: ST_TO_ADDR
45346: LD_INT 5
45348: PUSH
45349: FOR_TO
45350: IFFALSE 45507
// begin _x := ShiftX ( x , d , r + i ) ;
45352: LD_ADDR_VAR 0 5
45356: PUSH
45357: LD_VAR 0 4
45361: PPUSH
45362: LD_VAR 0 8
45366: PPUSH
45367: LD_VAR 0 9
45371: PUSH
45372: LD_VAR 0 10
45376: PLUS
45377: PPUSH
45378: CALL_OW 272
45382: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45383: LD_ADDR_VAR 0 7
45387: PUSH
45388: LD_VAR 0 6
45392: PPUSH
45393: LD_VAR 0 8
45397: PPUSH
45398: LD_VAR 0 9
45402: PUSH
45403: LD_VAR 0 10
45407: PLUS
45408: PPUSH
45409: CALL_OW 273
45413: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45414: LD_VAR 0 5
45418: PPUSH
45419: LD_VAR 0 7
45423: PPUSH
45424: CALL_OW 488
45428: PUSH
45429: LD_VAR 0 5
45433: PPUSH
45434: LD_VAR 0 7
45438: PPUSH
45439: CALL_OW 428
45443: PPUSH
45444: CALL_OW 247
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: IN
45459: NOT
45460: AND
45461: IFFALSE 45505
// begin ComMoveXY ( unit , _x , _y ) ;
45463: LD_VAR 0 1
45467: PPUSH
45468: LD_VAR 0 5
45472: PPUSH
45473: LD_VAR 0 7
45477: PPUSH
45478: CALL_OW 111
// result := [ _x , _y ] ;
45482: LD_ADDR_VAR 0 3
45486: PUSH
45487: LD_VAR 0 5
45491: PUSH
45492: LD_VAR 0 7
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: ST_TO_ADDR
// exit ;
45501: POP
45502: POP
45503: GO 45509
// end ; end ;
45505: GO 45349
45507: POP
45508: POP
// end ;
45509: LD_VAR 0 3
45513: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45514: LD_INT 0
45516: PPUSH
45517: PPUSH
45518: PPUSH
// result := 0 ;
45519: LD_ADDR_VAR 0 3
45523: PUSH
45524: LD_INT 0
45526: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45527: LD_VAR 0 1
45531: PUSH
45532: LD_INT 0
45534: LESS
45535: PUSH
45536: LD_VAR 0 1
45540: PUSH
45541: LD_INT 8
45543: GREATER
45544: OR
45545: PUSH
45546: LD_VAR 0 2
45550: PUSH
45551: LD_INT 0
45553: LESS
45554: OR
45555: PUSH
45556: LD_VAR 0 2
45560: PUSH
45561: LD_INT 8
45563: GREATER
45564: OR
45565: IFFALSE 45569
// exit ;
45567: GO 45644
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45569: LD_ADDR_VAR 0 4
45573: PUSH
45574: LD_INT 22
45576: PUSH
45577: LD_VAR 0 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PPUSH
45586: CALL_OW 69
45590: PUSH
45591: FOR_IN
45592: IFFALSE 45642
// begin un := UnitShoot ( i ) ;
45594: LD_ADDR_VAR 0 5
45598: PUSH
45599: LD_VAR 0 4
45603: PPUSH
45604: CALL_OW 504
45608: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45609: LD_VAR 0 5
45613: PPUSH
45614: CALL_OW 255
45618: PUSH
45619: LD_VAR 0 1
45623: EQUAL
45624: IFFALSE 45640
// begin result := un ;
45626: LD_ADDR_VAR 0 3
45630: PUSH
45631: LD_VAR 0 5
45635: ST_TO_ADDR
// exit ;
45636: POP
45637: POP
45638: GO 45644
// end ; end ;
45640: GO 45591
45642: POP
45643: POP
// end ;
45644: LD_VAR 0 3
45648: RET
// export function GetCargoBay ( units ) ; begin
45649: LD_INT 0
45651: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45652: LD_ADDR_VAR 0 2
45656: PUSH
45657: LD_VAR 0 1
45661: PPUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 34
45667: PUSH
45668: LD_INT 12
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 34
45677: PUSH
45678: LD_INT 51
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 34
45687: PUSH
45688: LD_INT 32
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 34
45697: PUSH
45698: LD_EXP 40
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: PPUSH
45714: CALL_OW 72
45718: ST_TO_ADDR
// end ; end_of_file
45719: LD_VAR 0 2
45723: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
45724: LD_INT 0
45726: PPUSH
// ar_miner := 81 ;
45727: LD_ADDR_EXP 46
45731: PUSH
45732: LD_INT 81
45734: ST_TO_ADDR
// ar_crane := 88 ;
45735: LD_ADDR_EXP 45
45739: PUSH
45740: LD_INT 88
45742: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
45743: LD_ADDR_EXP 40
45747: PUSH
45748: LD_INT 89
45750: ST_TO_ADDR
// us_hack := 99 ;
45751: LD_ADDR_EXP 41
45755: PUSH
45756: LD_INT 99
45758: ST_TO_ADDR
// us_artillery := 97 ;
45759: LD_ADDR_EXP 42
45763: PUSH
45764: LD_INT 97
45766: ST_TO_ADDR
// ar_bio_bomb := 91 ;
45767: LD_ADDR_EXP 43
45771: PUSH
45772: LD_INT 91
45774: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
45775: LD_ADDR_EXP 44
45779: PUSH
45780: LD_INT 92
45782: ST_TO_ADDR
// ru_radar := 98 ;
45783: LD_ADDR_EXP 39
45787: PUSH
45788: LD_INT 98
45790: ST_TO_ADDR
// tech_Artillery := 80 ;
45791: LD_ADDR_EXP 47
45795: PUSH
45796: LD_INT 80
45798: ST_TO_ADDR
// tech_RadMat := 81 ;
45799: LD_ADDR_EXP 48
45803: PUSH
45804: LD_INT 81
45806: ST_TO_ADDR
// tech_BasicTools := 82 ;
45807: LD_ADDR_EXP 49
45811: PUSH
45812: LD_INT 82
45814: ST_TO_ADDR
// tech_Cargo := 83 ;
45815: LD_ADDR_EXP 50
45819: PUSH
45820: LD_INT 83
45822: ST_TO_ADDR
// tech_Track := 84 ;
45823: LD_ADDR_EXP 51
45827: PUSH
45828: LD_INT 84
45830: ST_TO_ADDR
// tech_Crane := 85 ;
45831: LD_ADDR_EXP 52
45835: PUSH
45836: LD_INT 85
45838: ST_TO_ADDR
// tech_Bulldozer := 86 ;
45839: LD_ADDR_EXP 53
45843: PUSH
45844: LD_INT 86
45846: ST_TO_ADDR
// tech_Hovercraft := 87 ;
45847: LD_ADDR_EXP 54
45851: PUSH
45852: LD_INT 87
45854: ST_TO_ADDR
// end ;
45855: LD_VAR 0 1
45859: RET
// every 1 do
45860: GO 45862
45862: DISABLE
// InitGlobalVariables ;
45863: CALL 45724 0 0
45867: END
