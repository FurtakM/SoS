// starting begin ResetFog ;
   0: CALL_OW 335
// MC_Init ( ) ;
   4: CALL 438 0 0
// PrepareTestBase ;
   8: CALL 132 0 0
// mc_debug := true ;
  12: LD_ADDR_EXP 5
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// MC_Start ( ) ;
  20: CALL 462 0 0
// end ;
  24: END
// export function MC_CustomMacro ( ) ; begin
  25: LD_INT 0
  27: PPUSH
// MC_Add ( 1 , FilterAllUnits ( [ f_side , 1 ] ) ) ;
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 22
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: EMPTY
  38: LIST
  39: LIST
  40: PPUSH
  41: CALL_OW 69
  45: PPUSH
  46: CALL 517 0 2
// MC_SetParkingArea ( 1 , parkingArea1 ) ;
  50: LD_INT 1
  52: PPUSH
  53: LD_INT 4
  55: PPUSH
  56: CALL 2337 0 2
// MC_SetCratesArea ( 1 , cratesArea1 ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 2
  65: PPUSH
  66: CALL 1914 0 2
// MC_SetScanArea ( 1 , baseArea1 ) ;
  70: LD_INT 1
  72: PPUSH
  73: LD_INT 1
  75: PPUSH
  76: CALL 2386 0 2
// MC_SetBuildingList ( 1 , [ [ b_barracks , 37 , 33 , 5 ] , [ b_lab , 12 , 17 , 1 ] ] ) ;
  80: LD_INT 1
  82: PPUSH
  83: LD_INT 5
  85: PUSH
  86: LD_INT 37
  88: PUSH
  89: LD_INT 33
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_INT 6
 103: PUSH
 104: LD_INT 12
 106: PUSH
 107: LD_INT 17
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: LIST
 117: LIST
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: PPUSH
 123: CALL 1014 0 2
// end ;
 127: LD_VAR 0 1
 131: RET
// export function PrepareTestBase ; var i , un ; begin
 132: LD_INT 0
 134: PPUSH
 135: PPUSH
 136: PPUSH
// InitHc_All ;
 137: CALL_OW 584
// uc_side := 1 ;
 141: LD_ADDR_OWVAR 20
 145: PUSH
 146: LD_INT 1
 148: ST_TO_ADDR
// uc_nation := 1 ;
 149: LD_ADDR_OWVAR 21
 153: PUSH
 154: LD_INT 1
 156: ST_TO_ADDR
// for i := 1 to 12 do
 157: LD_ADDR_VAR 0 2
 161: PUSH
 162: DOUBLE
 163: LD_INT 1
 165: DEC
 166: ST_TO_ADDR
 167: LD_INT 12
 169: PUSH
 170: FOR_TO
 171: IFFALSE 238
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
 173: LD_INT 0
 175: PPUSH
 176: LD_VAR 0 2
 180: PUSH
 181: LD_INT 4
 183: MOD
 184: PUSH
 185: LD_INT 1
 187: PLUS
 188: PPUSH
 189: LD_INT 3
 191: PPUSH
 192: CALL_OW 380
// un := CreateHuman ;
 196: LD_ADDR_VAR 0 3
 200: PUSH
 201: CALL_OW 44
 205: ST_TO_ADDR
// PlaceUnitXYR ( un , 21 , 16 , 8 , false ) ;
 206: LD_VAR 0 3
 210: PPUSH
 211: LD_INT 21
 213: PPUSH
 214: LD_INT 16
 216: PPUSH
 217: LD_INT 8
 219: PPUSH
 220: LD_INT 0
 222: PPUSH
 223: CALL_OW 50
// ComHold ( un ) ;
 227: LD_VAR 0 3
 231: PPUSH
 232: CALL_OW 140
// end ;
 236: GO 170
 238: POP
 239: POP
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$50 trigger mc_debug do
 245: LD_EXP 5
 249: IFFALSE 276
 251: GO 253
 253: DISABLE
// begin enable ;
 254: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea1 , true ) ;
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 5
 260: PPUSH
 261: CALL_OW 12
 265: PPUSH
 266: LD_INT 2
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: CALL_OW 55
// end ;
 276: END
// every 0 0$1 trigger mc_debug do
 277: LD_EXP 5
 281: IFFALSE 307
 283: GO 285
 285: DISABLE
// begin enable ;
 286: ENABLE
// display_strings := FilterAllUnits ( [ f_tag , 3 ] ) ;
 287: LD_ADDR_OWVAR 47
 291: PUSH
 292: LD_INT 120
 294: PUSH
 295: LD_INT 3
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: ST_TO_ADDR
// end ; end_of_file
 307: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ;
 308: LD_VAR 0 1
 312: PPUSH
 313: LD_VAR 0 2
 317: PPUSH
 318: LD_VAR 0 3
 322: PPUSH
 323: LD_VAR 0 4
 327: PPUSH
 328: LD_VAR 0 5
 332: PPUSH
 333: LD_VAR 0 6
 337: PPUSH
 338: LD_VAR 0 7
 342: PPUSH
 343: CALL 4765 0 7
// end ;
 347: PPOPN 7
 349: END
// on ClassChanged ( unit , old_class , new_class ) do begin MCE_ClassChanged ( unit , old_class , new_class ) ;
 350: LD_VAR 0 1
 354: PPUSH
 355: LD_VAR 0 2
 359: PPUSH
 360: LD_VAR 0 3
 364: PPUSH
 365: CALL 4818 0 3
// end ;
 369: PPOPN 3
 371: END
// on UnitDestroyed ( unit ) do begin MCE_UnitDestroyed ( unit ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL 4840 0 1
// end ;
 381: PPOPN 1
 383: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ;
 384: LD_VAR 0 1
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_VAR 0 3
 398: PPUSH
 399: LD_VAR 0 4
 403: PPUSH
 404: CALL 4985 0 4
// end ;
 408: PPOPN 4
 410: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL 5058 0 1
// end ;
 420: PPOPN 1
 422: END
// on UpgradeComplete ( building ) do begin MCE_BuildingUpgradeComplete ( building ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL 5777 0 1
// end ;
 432: PPOPN 1
 434: END
// on CommandUnitXY ( comand , unit , x , y , z ) do begin end ; end_of_file
 435: PPOPN 5
 437: END
// export function MC_Init ( ) ; begin
 438: LD_INT 0
 440: PPUSH
// MC_InitVariables ( ) ;
 441: CALL 6038 0 0
// MCE_InitEvents ( ) ;
 445: CALL 4741 0 0
// MCT_InitTags ( ) ;
 449: CALL 6214 0 0
// MCTM_InitTaskManager ( ) end ;
 453: CALL 7795 0 0
 457: LD_VAR 0 1
 461: RET
// export function MC_Start ( ) ; begin
 462: LD_INT 0
 464: PPUSH
// mc_active := true ;
 465: LD_ADDR_EXP 4
 469: PUSH
 470: LD_INT 1
 472: ST_TO_ADDR
// MC_CustomMacro ( ) ;
 473: CALL 25 0 0
// MCE_SailEventCustom ( mce_start , 0 , 0 , 0 , 0 , 0 , 0 ) ;
 477: LD_EXP 1
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: LD_INT 0
 487: PPUSH
 488: LD_INT 0
 490: PPUSH
 491: LD_INT 0
 493: PPUSH
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 0
 499: PPUSH
 500: CALL 4765 0 7
// end ;
 504: LD_VAR 0 1
 508: RET
// export function MC_Kill ( base ) ; begin
 509: LD_INT 0
 511: PPUSH
// end ;
 512: LD_VAR 0 2
 516: RET
// export function MC_Add ( side , units ) ; begin
 517: LD_INT 0
 519: PPUSH
// mc_bases := Replace ( mc_bases , mc_bases + 1 , side ) ;
 520: LD_ADDR_EXP 6
 524: PUSH
 525: LD_EXP 6
 529: PPUSH
 530: LD_EXP 6
 534: PUSH
 535: LD_INT 1
 537: PLUS
 538: PPUSH
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 1
 548: ST_TO_ADDR
// mc_task := Replace ( mc_task , mc_task + 1 , [ ] ) ;
 549: LD_ADDR_EXP 8
 553: PUSH
 554: LD_EXP 8
 558: PPUSH
 559: LD_EXP 8
 563: PUSH
 564: LD_INT 1
 566: PLUS
 567: PPUSH
 568: EMPTY
 569: PPUSH
 570: CALL_OW 1
 574: ST_TO_ADDR
// mc_people := Replace ( mc_people , mc_people + 1 , UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
 575: LD_ADDR_EXP 9
 579: PUSH
 580: LD_EXP 9
 584: PPUSH
 585: LD_EXP 9
 589: PUSH
 590: LD_INT 1
 592: PLUS
 593: PPUSH
 594: LD_VAR 0 2
 598: PPUSH
 599: LD_INT 21
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 3
 611: PUSH
 612: LD_INT 23
 614: PUSH
 615: LD_INT 0
 617: PUSH
 618: EMPTY
 619: LIST
 620: LIST
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PPUSH
 630: CALL_OW 72
 634: PPUSH
 635: CALL_OW 1
 639: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , mc_ape + 1 , UnitFilter ( units , [ f_nation , 0 ] ) ) ;
 640: LD_ADDR_EXP 19
 644: PUSH
 645: LD_EXP 19
 649: PPUSH
 650: LD_EXP 19
 654: PUSH
 655: LD_INT 1
 657: PLUS
 658: PPUSH
 659: LD_VAR 0 2
 663: PPUSH
 664: LD_INT 23
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PPUSH
 674: CALL_OW 72
 678: PPUSH
 679: CALL_OW 1
 683: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , mc_vehicles + 1 , UnitFilter ( units , [ f_type , unit_vehicle ] ) ) ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_EXP 11
 693: PPUSH
 694: LD_EXP 11
 698: PUSH
 699: LD_INT 1
 701: PLUS
 702: PPUSH
 703: LD_VAR 0 2
 707: PPUSH
 708: LD_INT 21
 710: PUSH
 711: LD_INT 2
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: PPUSH
 718: CALL_OW 72
 722: PPUSH
 723: CALL_OW 1
 727: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , mc_buildings + 1 , UnitFilter ( units , [ f_type , unit_building ] ) ) ;
 728: LD_ADDR_EXP 10
 732: PUSH
 733: LD_EXP 10
 737: PPUSH
 738: LD_EXP 10
 742: PUSH
 743: LD_INT 1
 745: PLUS
 746: PPUSH
 747: LD_VAR 0 2
 751: PPUSH
 752: LD_INT 21
 754: PUSH
 755: LD_INT 3
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PPUSH
 762: CALL_OW 72
 766: PPUSH
 767: CALL_OW 1
 771: ST_TO_ADDR
// mc_defense_status := Replace ( mc_defense_status , mc_defense_status + 1 , false ) ;
 772: LD_ADDR_EXP 16
 776: PUSH
 777: LD_EXP 16
 781: PPUSH
 782: LD_EXP 16
 786: PUSH
 787: LD_INT 1
 789: PLUS
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: CALL_OW 1
 798: ST_TO_ADDR
// end ;
 799: LD_VAR 0 3
 803: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
 808: PPUSH
 809: PPUSH
 810: PPUSH
 811: PPUSH
// if not mc_bases [ base ] then
 812: LD_EXP 6
 816: PUSH
 817: LD_VAR 0 1
 821: ARRAY
 822: NOT
 823: IFFALSE 827
// exit ;
 825: GO 1009
// tmp := [ ] ;
 827: LD_ADDR_VAR 0 6
 831: PUSH
 832: EMPTY
 833: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
 834: LD_ADDR_VAR 0 7
 838: PUSH
 839: LD_VAR 0 3
 843: PPUSH
 844: LD_INT 0
 846: PPUSH
 847: CALL_OW 517
 851: ST_TO_ADDR
// if not list then
 852: LD_VAR 0 7
 856: NOT
 857: IFFALSE 861
// exit ;
 859: GO 1009
// for i = 1 to amount do
 861: LD_ADDR_VAR 0 5
 865: PUSH
 866: DOUBLE
 867: LD_INT 1
 869: DEC
 870: ST_TO_ADDR
 871: LD_VAR 0 2
 875: PUSH
 876: FOR_TO
 877: IFFALSE 957
// begin x := rand ( 1 , list [ 1 ] ) ;
 879: LD_ADDR_VAR 0 8
 883: PUSH
 884: LD_INT 1
 886: PPUSH
 887: LD_VAR 0 7
 891: PUSH
 892: LD_INT 1
 894: ARRAY
 895: PPUSH
 896: CALL_OW 12
 900: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
 901: LD_ADDR_VAR 0 6
 905: PUSH
 906: LD_VAR 0 6
 910: PPUSH
 911: LD_VAR 0 5
 915: PPUSH
 916: LD_VAR 0 7
 920: PUSH
 921: LD_INT 1
 923: ARRAY
 924: PUSH
 925: LD_VAR 0 8
 929: ARRAY
 930: PUSH
 931: LD_VAR 0 7
 935: PUSH
 936: LD_INT 2
 938: ARRAY
 939: PUSH
 940: LD_VAR 0 8
 944: ARRAY
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL_OW 1
 954: ST_TO_ADDR
// end ;
 955: GO 876
 957: POP
 958: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
 959: LD_ADDR_EXP 12
 963: PUSH
 964: LD_EXP 12
 968: PPUSH
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_VAR 0 6
 978: PPUSH
 979: CALL_OW 1
 983: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
 984: LD_ADDR_EXP 13
 988: PUSH
 989: LD_EXP 13
 993: PPUSH
 994: LD_VAR 0 1
 998: PPUSH
 999: LD_VAR 0 3
1003: PPUSH
1004: CALL_OW 1
1008: ST_TO_ADDR
// end ;
1009: LD_VAR 0 4
1013: RET
// export function MC_SetBuildingList ( base , construct_list ) ; var i , btype ; begin
1014: LD_INT 0
1016: PPUSH
1017: PPUSH
1018: PPUSH
// if not construct_list then
1019: LD_VAR 0 2
1023: NOT
1024: IFFALSE 1028
// exit ;
1026: GO 1254
// for i := 1 to construct_list do
1028: LD_ADDR_VAR 0 4
1032: PUSH
1033: DOUBLE
1034: LD_INT 1
1036: DEC
1037: ST_TO_ADDR
1038: LD_VAR 0 2
1042: PUSH
1043: FOR_TO
1044: IFFALSE 1227
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1046: LD_VAR 0 2
1050: PUSH
1051: LD_VAR 0 4
1055: ARRAY
1056: PUSH
1057: LD_INT 1
1059: ARRAY
1060: PUSH
1061: LD_INT 3
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: IN
1071: IFFALSE 1225
// begin case construct_list [ i ] [ 1 ] of b_factory :
1073: LD_VAR 0 2
1077: PUSH
1078: LD_VAR 0 4
1082: ARRAY
1083: PUSH
1084: LD_INT 1
1086: ARRAY
1087: PUSH
1088: LD_INT 3
1090: DOUBLE
1091: EQUAL
1092: IFTRUE 1096
1094: GO 1107
1096: POP
// btype := b_workshop ; b_barracks :
1097: LD_ADDR_VAR 0 5
1101: PUSH
1102: LD_INT 2
1104: ST_TO_ADDR
1105: GO 1127
1107: LD_INT 5
1109: DOUBLE
1110: EQUAL
1111: IFTRUE 1115
1113: GO 1126
1115: POP
// btype := b_armoury ; end ;
1116: LD_ADDR_VAR 0 5
1120: PUSH
1121: LD_INT 4
1123: ST_TO_ADDR
1124: GO 1127
1126: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1127: LD_ADDR_VAR 0 2
1131: PUSH
1132: LD_VAR 0 2
1136: PPUSH
1137: LD_VAR 0 4
1141: PPUSH
1142: LD_VAR 0 2
1146: PUSH
1147: LD_VAR 0 4
1151: ARRAY
1152: PPUSH
1153: LD_INT 5
1155: PPUSH
1156: LD_VAR 0 2
1160: PUSH
1161: LD_VAR 0 4
1165: ARRAY
1166: PUSH
1167: LD_INT 1
1169: ARRAY
1170: PPUSH
1171: CALL_OW 1
1175: PPUSH
1176: CALL_OW 1
1180: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1181: LD_ADDR_VAR 0 2
1185: PUSH
1186: LD_VAR 0 2
1190: PPUSH
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_VAR 0 2
1200: PUSH
1201: LD_VAR 0 4
1205: ARRAY
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_VAR 0 5
1214: PPUSH
1215: CALL_OW 1
1219: PPUSH
1220: CALL_OW 1
1224: ST_TO_ADDR
// end ;
1225: GO 1043
1227: POP
1228: POP
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
1229: LD_ADDR_EXP 14
1233: PUSH
1234: LD_EXP 14
1238: PPUSH
1239: LD_VAR 0 1
1243: PPUSH
1244: LD_VAR 0 2
1248: PPUSH
1249: CALL_OW 1
1253: ST_TO_ADDR
// end ;
1254: LD_VAR 0 3
1258: RET
// export function MC_InsertBuildingList ( base , construct_list ) ; var i , btype ; begin
1259: LD_INT 0
1261: PPUSH
1262: PPUSH
1263: PPUSH
// if not construct_list then
1264: LD_VAR 0 2
1268: NOT
1269: IFFALSE 1273
// exit ;
1271: GO 1511
// for i := 1 to construct_list do
1273: LD_ADDR_VAR 0 4
1277: PUSH
1278: DOUBLE
1279: LD_INT 1
1281: DEC
1282: ST_TO_ADDR
1283: LD_VAR 0 2
1287: PUSH
1288: FOR_TO
1289: IFFALSE 1472
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1291: LD_VAR 0 2
1295: PUSH
1296: LD_VAR 0 4
1300: ARRAY
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 5
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: IN
1316: IFFALSE 1470
// begin case construct_list [ i ] [ 1 ] of b_factory :
1318: LD_VAR 0 2
1322: PUSH
1323: LD_VAR 0 4
1327: ARRAY
1328: PUSH
1329: LD_INT 1
1331: ARRAY
1332: PUSH
1333: LD_INT 3
1335: DOUBLE
1336: EQUAL
1337: IFTRUE 1341
1339: GO 1352
1341: POP
// btype := b_workshop ; b_barracks :
1342: LD_ADDR_VAR 0 5
1346: PUSH
1347: LD_INT 2
1349: ST_TO_ADDR
1350: GO 1372
1352: LD_INT 5
1354: DOUBLE
1355: EQUAL
1356: IFTRUE 1360
1358: GO 1371
1360: POP
// btype := b_armoury ; end ;
1361: LD_ADDR_VAR 0 5
1365: PUSH
1366: LD_INT 4
1368: ST_TO_ADDR
1369: GO 1372
1371: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1372: LD_ADDR_VAR 0 2
1376: PUSH
1377: LD_VAR 0 2
1381: PPUSH
1382: LD_VAR 0 4
1386: PPUSH
1387: LD_VAR 0 2
1391: PUSH
1392: LD_VAR 0 4
1396: ARRAY
1397: PPUSH
1398: LD_INT 5
1400: PPUSH
1401: LD_VAR 0 2
1405: PUSH
1406: LD_VAR 0 4
1410: ARRAY
1411: PUSH
1412: LD_INT 1
1414: ARRAY
1415: PPUSH
1416: CALL_OW 1
1420: PPUSH
1421: CALL_OW 1
1425: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: LD_VAR 0 2
1435: PPUSH
1436: LD_VAR 0 4
1440: PPUSH
1441: LD_VAR 0 2
1445: PUSH
1446: LD_VAR 0 4
1450: ARRAY
1451: PPUSH
1452: LD_INT 1
1454: PPUSH
1455: LD_VAR 0 5
1459: PPUSH
1460: CALL_OW 1
1464: PPUSH
1465: CALL_OW 1
1469: ST_TO_ADDR
// end ;
1470: GO 1288
1472: POP
1473: POP
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union construct_list ) ;
1474: LD_ADDR_EXP 14
1478: PUSH
1479: LD_EXP 14
1483: PPUSH
1484: LD_VAR 0 1
1488: PPUSH
1489: LD_EXP 14
1493: PUSH
1494: LD_VAR 0 1
1498: ARRAY
1499: PUSH
1500: LD_VAR 0 2
1504: UNION
1505: PPUSH
1506: CALL_OW 1
1510: ST_TO_ADDR
// end ;
1511: LD_VAR 0 3
1515: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
1516: LD_INT 0
1518: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , produce_list ) ;
1519: LD_ADDR_EXP 15
1523: PUSH
1524: LD_EXP 15
1528: PPUSH
1529: LD_VAR 0 1
1533: PPUSH
1534: LD_VAR 0 2
1538: PPUSH
1539: CALL_OW 1
1543: ST_TO_ADDR
// end ;
1544: LD_VAR 0 3
1548: RET
// export function MC_InsertProduceList ( base , components ) ; begin
1549: LD_INT 0
1551: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , mc_produce_list [ base ] ^ components ) ;
1552: LD_ADDR_EXP 15
1556: PUSH
1557: LD_EXP 15
1561: PPUSH
1562: LD_VAR 0 1
1566: PPUSH
1567: LD_EXP 15
1571: PUSH
1572: LD_VAR 0 1
1576: ARRAY
1577: PUSH
1578: LD_VAR 0 2
1582: ADD
1583: PPUSH
1584: CALL_OW 1
1588: ST_TO_ADDR
// end ;
1589: LD_VAR 0 3
1593: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
1594: LD_INT 0
1596: PPUSH
// mc_defender := Replace ( mc_defender , base , deflist ) ;
1597: LD_ADDR_EXP 17
1601: PUSH
1602: LD_EXP 17
1606: PPUSH
1607: LD_VAR 0 1
1611: PPUSH
1612: LD_VAR 0 2
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
1622: LD_ADDR_EXP 18
1626: PUSH
1627: LD_EXP 18
1631: PPUSH
1632: LD_VAR 0 1
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 0
1644: PLUS
1645: PPUSH
1646: CALL_OW 1
1650: ST_TO_ADDR
// end ;
1651: LD_VAR 0 3
1655: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
1656: LD_INT 0
1658: PPUSH
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
1659: LD_ADDR_EXP 18
1663: PUSH
1664: LD_EXP 18
1668: PPUSH
1669: LD_VAR 0 1
1673: PPUSH
1674: LD_VAR 0 2
1678: PPUSH
1679: CALL_OW 1
1683: ST_TO_ADDR
// end ;
1684: LD_VAR 0 3
1688: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; begin
1689: LD_INT 0
1691: PPUSH
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
1692: LD_ADDR_EXP 21
1696: PUSH
1697: LD_EXP 21
1701: PPUSH
1702: LD_VAR 0 1
1706: PUSH
1707: LD_EXP 21
1711: PUSH
1712: LD_VAR 0 1
1716: ARRAY
1717: PUSH
1718: LD_INT 1
1720: PLUS
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PPUSH
1726: LD_VAR 0 1
1730: PUSH
1731: LD_VAR 0 2
1735: PUSH
1736: LD_VAR 0 3
1740: PUSH
1741: LD_VAR 0 4
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: PPUSH
1752: CALL 12920 0 3
1756: ST_TO_ADDR
// end ;
1757: LD_VAR 0 5
1761: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
1762: LD_INT 0
1764: PPUSH
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
1765: LD_ADDR_EXP 22
1769: PUSH
1770: LD_EXP 22
1774: PPUSH
1775: LD_VAR 0 1
1779: PPUSH
1780: LD_VAR 0 2
1784: PPUSH
1785: CALL_OW 1
1789: ST_TO_ADDR
// end ;
1790: LD_VAR 0 3
1794: RET
// export function MC_SetTame ( base , area ) ; begin
1795: LD_INT 0
1797: PPUSH
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
1798: LD_ADDR_EXP 23
1802: PUSH
1803: LD_EXP 23
1807: PPUSH
1808: LD_VAR 0 1
1812: PPUSH
1813: LD_VAR 0 2
1817: PPUSH
1818: CALL_OW 1
1822: ST_TO_ADDR
// end ;
1823: LD_VAR 0 3
1827: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
1828: LD_INT 0
1830: PPUSH
1831: PPUSH
// if not base or not kinds then
1832: LD_VAR 0 1
1836: NOT
1837: PUSH
1838: LD_VAR 0 2
1842: NOT
1843: OR
1844: IFFALSE 1848
// exit ;
1846: GO 1909
// for i in kinds do
1848: LD_ADDR_VAR 0 4
1852: PUSH
1853: LD_VAR 0 2
1857: PUSH
1858: FOR_IN
1859: IFFALSE 1907
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
1861: LD_ADDR_EXP 24
1865: PUSH
1866: LD_EXP 24
1870: PPUSH
1871: LD_VAR 0 1
1875: PUSH
1876: LD_EXP 24
1880: PUSH
1881: LD_VAR 0 1
1885: ARRAY
1886: PUSH
1887: LD_INT 1
1889: PLUS
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 12920 0 3
1904: ST_TO_ADDR
1905: GO 1858
1907: POP
1908: POP
// end ;
1909: LD_VAR 0 3
1913: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
1914: LD_INT 0
1916: PPUSH
// if not mc_bases or not base or not areas then
1917: LD_EXP 6
1921: NOT
1922: PUSH
1923: LD_VAR 0 1
1927: NOT
1928: OR
1929: PUSH
1930: LD_VAR 0 2
1934: NOT
1935: OR
1936: IFFALSE 1940
// exit ;
1938: GO 1965
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
1940: LD_ADDR_EXP 25
1944: PUSH
1945: LD_EXP 25
1949: PPUSH
1950: LD_VAR 0 1
1954: PPUSH
1955: LD_VAR 0 2
1959: PPUSH
1960: CALL_OW 1
1964: ST_TO_ADDR
// end ;
1965: LD_VAR 0 3
1969: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
1970: LD_INT 0
1972: PPUSH
// if not mc_bases or not base or not teleports_exit then
1973: LD_EXP 6
1977: NOT
1978: PUSH
1979: LD_VAR 0 1
1983: NOT
1984: OR
1985: PUSH
1986: LD_VAR 0 2
1990: NOT
1991: OR
1992: IFFALSE 1996
// exit ;
1994: GO 2021
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
1996: LD_ADDR_EXP 26
2000: PUSH
2001: LD_EXP 26
2005: PPUSH
2006: LD_VAR 0 1
2010: PPUSH
2011: LD_VAR 0 2
2015: PPUSH
2016: CALL_OW 1
2020: ST_TO_ADDR
// end ;
2021: LD_VAR 0 3
2025: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
// if not base or not ext_list then
2031: LD_VAR 0 1
2035: NOT
2036: PUSH
2037: LD_VAR 0 5
2041: NOT
2042: OR
2043: IFFALSE 2047
// exit ;
2045: GO 2220
// tmp := GetFacExtXYD ( x , y , d ) ;
2047: LD_ADDR_VAR 0 8
2051: PUSH
2052: LD_VAR 0 2
2056: PPUSH
2057: LD_VAR 0 3
2061: PPUSH
2062: LD_VAR 0 4
2066: PPUSH
2067: CALL 42926 0 3
2071: ST_TO_ADDR
// if not tmp then
2072: LD_VAR 0 8
2076: NOT
2077: IFFALSE 2081
// exit ;
2079: GO 2220
// for i in tmp do
2081: LD_ADDR_VAR 0 7
2085: PUSH
2086: LD_VAR 0 8
2090: PUSH
2091: FOR_IN
2092: IFFALSE 2218
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
2094: LD_ADDR_EXP 14
2098: PUSH
2099: LD_EXP 14
2103: PPUSH
2104: LD_VAR 0 1
2108: PPUSH
2109: LD_EXP 14
2113: PUSH
2114: LD_VAR 0 1
2118: ARRAY
2119: PPUSH
2120: LD_EXP 14
2124: PUSH
2125: LD_VAR 0 1
2129: ARRAY
2130: PUSH
2131: LD_INT 1
2133: PLUS
2134: PPUSH
2135: LD_VAR 0 5
2139: PUSH
2140: LD_INT 1
2142: ARRAY
2143: PUSH
2144: LD_VAR 0 7
2148: PUSH
2149: LD_INT 1
2151: ARRAY
2152: PUSH
2153: LD_VAR 0 7
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PUSH
2162: LD_VAR 0 7
2166: PUSH
2167: LD_INT 3
2169: ARRAY
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: PPUSH
2177: CALL_OW 2
2181: PPUSH
2182: CALL_OW 1
2186: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
2187: LD_ADDR_VAR 0 5
2191: PUSH
2192: LD_VAR 0 5
2196: PPUSH
2197: LD_INT 1
2199: PPUSH
2200: CALL_OW 3
2204: ST_TO_ADDR
// if not ext_list then
2205: LD_VAR 0 5
2209: NOT
2210: IFFALSE 2216
// exit ;
2212: POP
2213: POP
2214: GO 2220
// end ;
2216: GO 2091
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 6
2224: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
2225: LD_INT 0
2227: PPUSH
// if not mc_bases or not base or not weapon_list then
2228: LD_EXP 6
2232: NOT
2233: PUSH
2234: LD_VAR 0 1
2238: NOT
2239: OR
2240: PUSH
2241: LD_VAR 0 2
2245: NOT
2246: OR
2247: IFFALSE 2251
// exit ;
2249: GO 2276
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
2251: LD_ADDR_EXP 27
2255: PUSH
2256: LD_EXP 27
2260: PPUSH
2261: LD_VAR 0 1
2265: PPUSH
2266: LD_VAR 0 2
2270: PPUSH
2271: CALL_OW 1
2275: ST_TO_ADDR
// end ;
2276: LD_VAR 0 3
2280: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
2281: LD_INT 0
2283: PPUSH
// if not mc_bases or not base or not tech_list then
2284: LD_EXP 6
2288: NOT
2289: PUSH
2290: LD_VAR 0 1
2294: NOT
2295: OR
2296: PUSH
2297: LD_VAR 0 2
2301: NOT
2302: OR
2303: IFFALSE 2307
// exit ;
2305: GO 2332
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
2307: LD_ADDR_EXP 20
2311: PUSH
2312: LD_EXP 20
2316: PPUSH
2317: LD_VAR 0 1
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL_OW 1
2331: ST_TO_ADDR
// end ;
2332: LD_VAR 0 3
2336: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
2337: LD_INT 0
2339: PPUSH
// if not parking_area or not base then
2340: LD_VAR 0 2
2344: NOT
2345: PUSH
2346: LD_VAR 0 1
2350: NOT
2351: OR
2352: IFFALSE 2356
// exit ;
2354: GO 2381
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
2356: LD_ADDR_EXP 28
2360: PUSH
2361: LD_EXP 28
2365: PPUSH
2366: LD_VAR 0 1
2370: PPUSH
2371: LD_VAR 0 2
2375: PPUSH
2376: CALL_OW 1
2380: ST_TO_ADDR
// end ;
2381: LD_VAR 0 3
2385: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
2386: LD_INT 0
2388: PPUSH
// if not base or not scan_area then
2389: LD_VAR 0 1
2393: NOT
2394: PUSH
2395: LD_VAR 0 2
2399: NOT
2400: OR
2401: IFFALSE 2405
// exit ;
2403: GO 2430
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
2405: LD_ADDR_EXP 29
2409: PUSH
2410: LD_EXP 29
2414: PPUSH
2415: LD_VAR 0 1
2419: PPUSH
2420: LD_VAR 0 2
2424: PPUSH
2425: CALL_OW 1
2429: ST_TO_ADDR
// end ; end_of_file
2430: LD_VAR 0 3
2434: RET
// export function MC_Monitor ( ) ; var i , active_players ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
// while mc_active do
2440: LD_EXP 4
2444: IFFALSE 2554
// begin wait ( 0 0$1 ) ;
2446: LD_INT 35
2448: PPUSH
2449: CALL_OW 67
// active_players := 0 ;
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_INT 0
2460: ST_TO_ADDR
// for i := 1 to mc_bases do
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: DOUBLE
2467: LD_INT 1
2469: DEC
2470: ST_TO_ADDR
2471: LD_EXP 6
2475: PUSH
2476: FOR_TO
2477: IFFALSE 2535
// begin if MC_Exist ( i ) then
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 6471 0 1
2488: IFFALSE 2533
// begin MCE_SailEventCustom ( mce_monitor_base , i , 0 , 0 , 0 , 0 , 0 ) ;
2490: LD_EXP 2
2494: PPUSH
2495: LD_VAR 0 2
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 0
2514: PPUSH
2515: CALL 4765 0 7
// active_players := active_players + 1 ;
2519: LD_ADDR_VAR 0 3
2523: PUSH
2524: LD_VAR 0 3
2528: PUSH
2529: LD_INT 1
2531: PLUS
2532: ST_TO_ADDR
// end ; end ;
2533: GO 2476
2535: POP
2536: POP
// if not active_players then
2537: LD_VAR 0 3
2541: NOT
2542: IFFALSE 2552
// mc_active := false ;
2544: LD_ADDR_EXP 4
2548: PUSH
2549: LD_INT 0
2551: ST_TO_ADDR
// end ;
2552: GO 2440
// end ;
2554: LD_VAR 0 1
2558: RET
// export function MC_MonitorBase ( base ) ; begin
2559: LD_INT 0
2561: PPUSH
// if not mc_people [ base ] then
2562: LD_EXP 9
2566: PUSH
2567: LD_VAR 0 1
2571: ARRAY
2572: NOT
2573: IFFALSE 2598
// mc_bases := Replace ( mc_bases , base , 0 ) ;
2575: LD_ADDR_EXP 6
2579: PUSH
2580: LD_EXP 6
2584: PPUSH
2585: LD_VAR 0 1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 1
2597: ST_TO_ADDR
// mc_danger := Replace ( mc_danger , base , DangerInArea ( mc_bases [ base ] , mc_scan_area [ base ] ) ) ;
2598: LD_ADDR_EXP 30
2602: PUSH
2603: LD_EXP 30
2607: PPUSH
2608: LD_VAR 0 1
2612: PPUSH
2613: LD_EXP 6
2617: PUSH
2618: LD_VAR 0 1
2622: ARRAY
2623: PPUSH
2624: LD_EXP 29
2628: PUSH
2629: LD_VAR 0 1
2633: ARRAY
2634: PPUSH
2635: CALL 15579 0 2
2639: PPUSH
2640: CALL_OW 1
2644: ST_TO_ADDR
// if mc_danger [ base ] then
2645: LD_EXP 30
2649: PUSH
2650: LD_VAR 0 1
2654: ARRAY
2655: IFFALSE 2668
// MC_Defend ( base ) else
2657: LD_VAR 0 1
2661: PPUSH
2662: CALL 2682 0 1
2666: GO 2677
// MC_TaskManager ( base ) ;
2668: LD_VAR 0 1
2672: PPUSH
2673: CALL 2744 0 1
// end ;
2677: LD_VAR 0 2
2681: RET
// export function MC_Defend ( base ) ; var defender_vehicles ; begin
2682: LD_INT 0
2684: PPUSH
2685: PPUSH
// if mc_defense_status [ base ] then
2686: LD_EXP 16
2690: PUSH
2691: LD_VAR 0 1
2695: ARRAY
2696: IFFALSE 2700
// exit ;
2698: GO 2739
// mc_defense_status := Replace ( mc_defense_status , base , true ) ;
2700: LD_ADDR_EXP 16
2704: PUSH
2705: LD_EXP 16
2709: PPUSH
2710: LD_VAR 0 1
2714: PPUSH
2715: LD_INT 1
2717: PPUSH
2718: CALL_OW 1
2722: ST_TO_ADDR
// defender_vehicles := mc_defender [ base ] ;
2723: LD_ADDR_VAR 0 3
2727: PUSH
2728: LD_EXP 17
2732: PUSH
2733: LD_VAR 0 1
2737: ARRAY
2738: ST_TO_ADDR
// end ;
2739: LD_VAR 0 2
2743: RET
// export function MC_TaskManager ( base ) ; var crates_list ; begin
2744: LD_INT 0
2746: PPUSH
2747: PPUSH
// MC_CollectCrates ( base , GetListOfCratesInArea ( mc_crates_area [ base ] ) ) ;
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_EXP 25
2757: PUSH
2758: LD_VAR 0 1
2762: ARRAY
2763: PPUSH
2764: CALL_OW 435
2768: PPUSH
2769: CALL 2787 0 2
// MC_Build ( base ) ;
2773: LD_VAR 0 1
2777: PPUSH
2778: CALL 4133 0 1
// end ;
2782: LD_VAR 0 2
2786: RET
// export function MC_CollectCrates ( base , crates ) ; var i , j , amount , cargo_bays , apes , engs , collectors , number_of_crates , driver , drivers , depot , mechanic_used ; begin
2787: LD_INT 0
2789: PPUSH
2790: PPUSH
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
2800: PPUSH
2801: PPUSH
// if MCTM_HasActiveTask ( base , mctm_collect_crates ) or not crates or not MC_GetDepot ( base ) then
2802: LD_VAR 0 1
2806: PPUSH
2807: LD_EXP 36
2811: PPUSH
2812: CALL 7819 0 2
2816: PUSH
2817: LD_VAR 0 2
2821: NOT
2822: OR
2823: PUSH
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL 7446 0 1
2833: NOT
2834: OR
2835: IFFALSE 2839
// exit ;
2837: GO 4128
// MCTM_SetActiveTask ( base , mctm_collect_crates ) ;
2839: LD_VAR 0 1
2843: PPUSH
2844: LD_EXP 36
2848: PPUSH
2849: CALL 7849 0 2
// collectors := [ ] ;
2853: LD_ADDR_VAR 0 10
2857: PUSH
2858: EMPTY
2859: ST_TO_ADDR
// cargo_bays := GetCargoBay ( mc_vehicles [ base ] ) ;
2860: LD_ADDR_VAR 0 7
2864: PUSH
2865: LD_EXP 11
2869: PUSH
2870: LD_VAR 0 1
2874: ARRAY
2875: PPUSH
2876: CALL 46548 0 1
2880: ST_TO_ADDR
// if cargo_bays then
2881: LD_VAR 0 7
2885: IFFALSE 3566
// begin collectors := collectors union cargo_bays ;
2887: LD_ADDR_VAR 0 10
2891: PUSH
2892: LD_VAR 0 10
2896: PUSH
2897: LD_VAR 0 7
2901: UNION
2902: ST_TO_ADDR
// while crates and collectors do
2903: LD_VAR 0 2
2907: PUSH
2908: LD_VAR 0 10
2912: AND
2913: IFFALSE 3463
// begin wait ( 0 0$1 ) ;
2915: LD_INT 35
2917: PPUSH
2918: CALL_OW 67
// for i in collectors do
2922: LD_ADDR_VAR 0 4
2926: PUSH
2927: LD_VAR 0 10
2931: PUSH
2932: FOR_IN
2933: IFFALSE 3459
// begin driver := 0 ;
2935: LD_ADDR_VAR 0 12
2939: PUSH
2940: LD_INT 0
2942: ST_TO_ADDR
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
2943: LD_VAR 0 4
2947: PPUSH
2948: CALL_OW 263
2952: PUSH
2953: LD_INT 1
2955: EQUAL
2956: PUSH
2957: LD_VAR 0 4
2961: PPUSH
2962: CALL_OW 311
2966: NOT
2967: AND
2968: IFFALSE 3152
// begin driver := MC_GetOneByClass ( base , 3 , mct_none ) ;
2970: LD_ADDR_VAR 0 12
2974: PUSH
2975: LD_VAR 0 1
2979: PPUSH
2980: LD_INT 3
2982: PPUSH
2983: LD_EXP 31
2987: PPUSH
2988: CALL 7352 0 3
2992: ST_TO_ADDR
// if not driver then
2993: LD_VAR 0 12
2997: NOT
2998: IFFALSE 3067
// begin driver := MC_GetBestForClass ( base , 3 , 1 ) ;
3000: LD_ADDR_VAR 0 12
3004: PUSH
3005: LD_VAR 0 1
3009: PPUSH
3010: LD_INT 3
3012: PPUSH
3013: LD_INT 1
3015: PPUSH
3016: CALL 6511 0 3
3020: ST_TO_ADDR
// if driver then
3021: LD_VAR 0 12
3025: IFFALSE 3067
// begin driver := driver [ 1 ] ;
3027: LD_ADDR_VAR 0 12
3031: PUSH
3032: LD_VAR 0 12
3036: PUSH
3037: LD_INT 1
3039: ARRAY
3040: ST_TO_ADDR
// MC_ChangeClass ( base , 3 , driver ) ;
3041: LD_VAR 0 1
3045: PPUSH
3046: LD_INT 3
3048: PPUSH
3049: LD_VAR 0 12
3053: PPUSH
3054: CALL 6741 0 3
// AddComExitBuilding ( driver ) ;
3058: LD_VAR 0 12
3062: PPUSH
3063: CALL_OW 182
// end ; end ; if IsInUnit ( driver ) then
3067: LD_VAR 0 12
3071: PPUSH
3072: CALL_OW 310
3076: IFFALSE 3087
// ComExit ( driver ) ;
3078: LD_VAR 0 12
3082: PPUSH
3083: CALL 45677 0 1
// SetTag ( driver , mct_collect_crates ) ;
3087: LD_VAR 0 12
3091: PPUSH
3092: LD_EXP 34
3096: PPUSH
3097: CALL_OW 109
// if GetLives ( i ) < 1000 then
3101: LD_VAR 0 4
3105: PPUSH
3106: CALL_OW 256
3110: PUSH
3111: LD_INT 1000
3113: LESS
3114: IFFALSE 3130
// AddComRepairVehicle ( driver , i ) ;
3116: LD_VAR 0 12
3120: PPUSH
3121: LD_VAR 0 4
3125: PPUSH
3126: CALL_OW 189
// AddComEnterUnit ( driver , i ) ;
3130: LD_VAR 0 12
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: CALL_OW 180
// mechanic_used := true ;
3144: LD_ADDR_VAR 0 15
3148: PUSH
3149: LD_INT 1
3151: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) ;
3152: LD_INT 35
3154: PPUSH
3155: CALL_OW 67
// if IsDead ( i ) then
3159: LD_VAR 0 4
3163: PPUSH
3164: CALL_OW 301
3168: IFFALSE 3188
// begin collectors := collectors diff i ;
3170: LD_ADDR_VAR 0 10
3174: PUSH
3175: LD_VAR 0 10
3179: PUSH
3180: LD_VAR 0 4
3184: DIFF
3185: ST_TO_ADDR
// continue ;
3186: GO 3152
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 20 then
3188: LD_VAR 0 4
3192: PPUSH
3193: CALL_OW 262
3197: PUSH
3198: LD_INT 1
3200: EQUAL
3201: PUSH
3202: LD_VAR 0 4
3206: PPUSH
3207: CALL_OW 261
3211: PUSH
3212: LD_INT 20
3214: LESS
3215: AND
3216: IFFALSE 3277
// begin depot := NearestUnitToUnit ( MC_GetDepot ( base ) , i ) ;
3218: LD_ADDR_VAR 0 14
3222: PUSH
3223: LD_VAR 0 1
3227: PPUSH
3228: CALL 7446 0 1
3232: PPUSH
3233: LD_VAR 0 4
3237: PPUSH
3238: CALL_OW 74
3242: ST_TO_ADDR
// if GetDistUnits ( i , depot ) < 6 then
3243: LD_VAR 0 4
3247: PPUSH
3248: LD_VAR 0 14
3252: PPUSH
3253: CALL_OW 296
3257: PUSH
3258: LD_INT 6
3260: LESS
3261: IFFALSE 3277
// ComMoveUnit ( i , depot ) ;
3263: LD_VAR 0 4
3267: PPUSH
3268: LD_VAR 0 14
3272: PPUSH
3273: CALL_OW 112
// end ; if GetControl ( i ) = control_manual then
3277: LD_VAR 0 4
3281: PPUSH
3282: CALL_OW 263
3286: PUSH
3287: LD_INT 1
3289: EQUAL
3290: IFFALSE 3355
// begin if not driver then
3292: LD_VAR 0 12
3296: NOT
3297: IFFALSE 3314
// driver := IsDrivenBy ( i ) ;
3299: LD_ADDR_VAR 0 12
3303: PUSH
3304: LD_VAR 0 4
3308: PPUSH
3309: CALL_OW 311
3313: ST_TO_ADDR
// if not HasTask ( driver ) then
3314: LD_VAR 0 12
3318: PPUSH
3319: CALL_OW 314
3323: NOT
3324: IFFALSE 3353
// ComCollect ( driver , crates [ 1 ] , crates [ 2 ] ) ;
3326: LD_VAR 0 12
3330: PPUSH
3331: LD_VAR 0 2
3335: PUSH
3336: LD_INT 1
3338: ARRAY
3339: PPUSH
3340: LD_VAR 0 2
3344: PUSH
3345: LD_INT 2
3347: ARRAY
3348: PPUSH
3349: CALL_OW 117
// end else
3353: GO 3394
// if not HasTask ( i ) then
3355: LD_VAR 0 4
3359: PPUSH
3360: CALL_OW 314
3364: NOT
3365: IFFALSE 3394
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3367: LD_VAR 0 4
3371: PPUSH
3372: LD_VAR 0 2
3376: PUSH
3377: LD_INT 1
3379: ARRAY
3380: PPUSH
3381: LD_VAR 0 2
3385: PUSH
3386: LD_INT 2
3388: ARRAY
3389: PPUSH
3390: CALL_OW 117
// until not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3394: LD_VAR 0 2
3398: PUSH
3399: LD_INT 1
3401: ARRAY
3402: PPUSH
3403: LD_VAR 0 2
3407: PUSH
3408: LD_INT 2
3410: ARRAY
3411: PPUSH
3412: CALL_OW 284
3416: NOT
3417: IFFALSE 3152
// for j := 1 to 2 do
3419: LD_ADDR_VAR 0 5
3423: PUSH
3424: DOUBLE
3425: LD_INT 1
3427: DEC
3428: ST_TO_ADDR
3429: LD_INT 2
3431: PUSH
3432: FOR_TO
3433: IFFALSE 3455
// crates := Delete ( crates , 1 ) ;
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: LD_VAR 0 2
3444: PPUSH
3445: LD_INT 1
3447: PPUSH
3448: CALL_OW 3
3452: ST_TO_ADDR
3453: GO 3432
3455: POP
3456: POP
// end ;
3457: GO 2932
3459: POP
3460: POP
// end ;
3461: GO 2903
// if mechanic_used then
3463: LD_VAR 0 15
3467: IFFALSE 3564
// begin repeat wait ( 0 0$1 ) ;
3469: LD_INT 35
3471: PPUSH
3472: CALL_OW 67
// until not GetCargo ( collectors , mat_cans ) or not collectors ;
3476: LD_VAR 0 10
3480: PPUSH
3481: LD_INT 1
3483: PPUSH
3484: CALL_OW 289
3488: NOT
3489: PUSH
3490: LD_VAR 0 10
3494: NOT
3495: OR
3496: IFFALSE 3469
// drivers := MCT_ResetTag ( base , mct_collect_crates ) ;
3498: LD_ADDR_VAR 0 13
3502: PUSH
3503: LD_VAR 0 1
3507: PPUSH
3508: LD_EXP 34
3512: PPUSH
3513: CALL 6356 0 2
3517: ST_TO_ADDR
// if drivers then
3518: LD_VAR 0 13
3522: IFFALSE 3550
// for i in drivers do
3524: LD_ADDR_VAR 0 4
3528: PUSH
3529: LD_VAR 0 13
3533: PUSH
3534: FOR_IN
3535: IFFALSE 3548
// ComExit ( i ) ;
3537: LD_VAR 0 4
3541: PPUSH
3542: CALL 45677 0 1
3546: GO 3534
3548: POP
3549: POP
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3550: LD_VAR 0 1
3554: PPUSH
3555: LD_EXP 36
3559: PPUSH
3560: CALL 7913 0 2
// end ; end else
3564: GO 4128
// begin apes := MC_GetByClass ( base , class_apeman_engineer , mct_none ) ;
3566: LD_ADDR_VAR 0 8
3570: PUSH
3571: LD_VAR 0 1
3575: PPUSH
3576: LD_INT 16
3578: PPUSH
3579: LD_EXP 31
3583: PPUSH
3584: CALL 7249 0 3
3588: ST_TO_ADDR
// if apes then
3589: LD_VAR 0 8
3593: IFFALSE 3611
// collectors := collectors union apes ;
3595: LD_ADDR_VAR 0 10
3599: PUSH
3600: LD_VAR 0 10
3604: PUSH
3605: LD_VAR 0 8
3609: UNION
3610: ST_TO_ADDR
// engs := MC_GetByClass ( base , class_engineer , mct_none ) ;
3611: LD_ADDR_VAR 0 9
3615: PUSH
3616: LD_VAR 0 1
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: LD_EXP 31
3628: PPUSH
3629: CALL 7249 0 3
3633: ST_TO_ADDR
// if engs then
3634: LD_VAR 0 9
3638: IFFALSE 3656
// collectors := collectors union engs ;
3640: LD_ADDR_VAR 0 10
3644: PUSH
3645: LD_VAR 0 10
3649: PUSH
3650: LD_VAR 0 9
3654: UNION
3655: ST_TO_ADDR
// if not collectors then
3656: LD_VAR 0 10
3660: NOT
3661: IFFALSE 3761
// begin engs := MC_GetBestForClass ( base , 2 , 3 ) ;
3663: LD_ADDR_VAR 0 9
3667: PUSH
3668: LD_VAR 0 1
3672: PPUSH
3673: LD_INT 2
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: CALL 6511 0 3
3683: ST_TO_ADDR
// if engs then
3684: LD_VAR 0 9
3688: IFFALSE 3707
// MC_ChangeClass ( base , 2 , engs ) ;
3690: LD_VAR 0 1
3694: PPUSH
3695: LD_INT 2
3697: PPUSH
3698: LD_VAR 0 9
3702: PPUSH
3703: CALL 6741 0 3
// repeat wait ( 0 0$1 ) ;
3707: LD_INT 35
3709: PPUSH
3710: CALL_OW 67
// if not UnitFilter ( engs , [ f_ok ] ) then
3714: LD_VAR 0 9
3718: PPUSH
3719: LD_INT 50
3721: PUSH
3722: EMPTY
3723: LIST
3724: PPUSH
3725: CALL_OW 72
3729: NOT
3730: IFFALSE 3734
// break ;
3732: GO 3761
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
3734: LD_VAR 0 9
3738: PPUSH
3739: LD_INT 25
3741: PUSH
3742: LD_INT 2
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: PPUSH
3749: CALL_OW 72
3753: PUSH
3754: LD_VAR 0 9
3758: EQUAL
3759: IFFALSE 3707
// end ; if not collectors then
3761: LD_VAR 0 10
3765: NOT
3766: IFFALSE 3784
// begin MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3768: LD_VAR 0 1
3772: PPUSH
3773: LD_EXP 36
3777: PPUSH
3778: CALL 7913 0 2
// exit ;
3782: GO 4128
// end ; if collectors > 5 then
3784: LD_VAR 0 10
3788: PUSH
3789: LD_INT 5
3791: GREATER
3792: IFFALSE 3848
// for i := collectors downto 5 do
3794: LD_ADDR_VAR 0 4
3798: PUSH
3799: DOUBLE
3800: LD_VAR 0 10
3804: INC
3805: ST_TO_ADDR
3806: LD_INT 5
3808: PUSH
3809: FOR_DOWNTO
3810: IFFALSE 3846
// begin SetTag ( i , 0 ) ;
3812: LD_VAR 0 4
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 109
// collectors := Delete ( collectors , i ) ;
3824: LD_ADDR_VAR 0 10
3828: PUSH
3829: LD_VAR 0 10
3833: PPUSH
3834: LD_VAR 0 4
3838: PPUSH
3839: CALL_OW 3
3843: ST_TO_ADDR
// end ;
3844: GO 3809
3846: POP
3847: POP
// ComExitAll ( collectors ) ;
3848: LD_VAR 0 10
3852: PPUSH
3853: CALL 45760 0 1
// MCT_SetTag ( collectors , mct_collect_crates ) ;
3857: LD_VAR 0 10
3861: PPUSH
3862: LD_EXP 34
3866: PPUSH
3867: CALL 6422 0 2
// while crates and collectors do
3871: LD_VAR 0 2
3875: PUSH
3876: LD_VAR 0 10
3880: AND
3881: IFFALSE 4100
// begin wait ( 0 0$1 ) ;
3883: LD_INT 35
3885: PPUSH
3886: CALL_OW 67
// amount := GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3890: LD_ADDR_VAR 0 6
3894: PUSH
3895: LD_VAR 0 2
3899: PUSH
3900: LD_INT 1
3902: ARRAY
3903: PPUSH
3904: LD_VAR 0 2
3908: PUSH
3909: LD_INT 2
3911: ARRAY
3912: PPUSH
3913: CALL_OW 284
3917: ST_TO_ADDR
// j := 0 ;
3918: LD_ADDR_VAR 0 5
3922: PUSH
3923: LD_INT 0
3925: ST_TO_ADDR
// for i in collectors do
3926: LD_ADDR_VAR 0 4
3930: PUSH
3931: LD_VAR 0 10
3935: PUSH
3936: FOR_IN
3937: IFFALSE 4033
// begin if IsDead ( i ) then
3939: LD_VAR 0 4
3943: PPUSH
3944: CALL_OW 301
3948: IFFALSE 3966
// collectors := collectors diff i ;
3950: LD_ADDR_VAR 0 10
3954: PUSH
3955: LD_VAR 0 10
3959: PUSH
3960: LD_VAR 0 4
3964: DIFF
3965: ST_TO_ADDR
// if j < amount and not HasTask ( i ) then
3966: LD_VAR 0 5
3970: PUSH
3971: LD_VAR 0 6
3975: LESS
3976: PUSH
3977: LD_VAR 0 4
3981: PPUSH
3982: CALL_OW 314
3986: NOT
3987: AND
3988: IFFALSE 4031
// begin j := j + 1 ;
3990: LD_ADDR_VAR 0 5
3994: PUSH
3995: LD_VAR 0 5
3999: PUSH
4000: LD_INT 1
4002: PLUS
4003: ST_TO_ADDR
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
4004: LD_VAR 0 4
4008: PPUSH
4009: LD_VAR 0 2
4013: PUSH
4014: LD_INT 1
4016: ARRAY
4017: PPUSH
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 2
4025: ARRAY
4026: PPUSH
4027: CALL_OW 117
// end ; end ;
4031: GO 3936
4033: POP
4034: POP
// if not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) then
4035: LD_VAR 0 2
4039: PUSH
4040: LD_INT 1
4042: ARRAY
4043: PPUSH
4044: LD_VAR 0 2
4048: PUSH
4049: LD_INT 2
4051: ARRAY
4052: PPUSH
4053: CALL_OW 284
4057: NOT
4058: IFFALSE 4098
// for j := 1 to 2 do
4060: LD_ADDR_VAR 0 5
4064: PUSH
4065: DOUBLE
4066: LD_INT 1
4068: DEC
4069: ST_TO_ADDR
4070: LD_INT 2
4072: PUSH
4073: FOR_TO
4074: IFFALSE 4096
// crates := Delete ( crates , 1 ) ;
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: LD_VAR 0 2
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 3
4093: ST_TO_ADDR
4094: GO 4073
4096: POP
4097: POP
// end ;
4098: GO 3871
// MCT_ResetTag ( base , mct_collect_crates ) ;
4100: LD_VAR 0 1
4104: PPUSH
4105: LD_EXP 34
4109: PPUSH
4110: CALL 6356 0 2
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
4114: LD_VAR 0 1
4118: PPUSH
4119: LD_EXP 36
4123: PPUSH
4124: CALL 7913 0 2
// end ; end ;
4128: LD_VAR 0 3
4132: RET
// export function MC_Build ( base ) ; var depot , btype , x , y , d , engs ; begin
4133: LD_INT 0
4135: PPUSH
4136: PPUSH
4137: PPUSH
4138: PPUSH
4139: PPUSH
4140: PPUSH
4141: PPUSH
// if MCTM_HasActiveTask ( base , mctm_build ) or not mc_build_list [ base ] or not MC_GetDepot ( base ) then
4142: LD_VAR 0 1
4146: PPUSH
4147: LD_EXP 37
4151: PPUSH
4152: CALL 7819 0 2
4156: PUSH
4157: LD_EXP 14
4161: PUSH
4162: LD_VAR 0 1
4166: ARRAY
4167: NOT
4168: OR
4169: PUSH
4170: LD_VAR 0 1
4174: PPUSH
4175: CALL 7446 0 1
4179: NOT
4180: OR
4181: IFFALSE 4185
// exit ;
4183: GO 4736
// MCTM_SetActiveTask ( base , mctm_build ) ;
4185: LD_VAR 0 1
4189: PPUSH
4190: LD_EXP 37
4194: PPUSH
4195: CALL 7849 0 2
// engs := MC_GetByClass ( base , 2 , mct_none ) ;
4199: LD_ADDR_VAR 0 8
4203: PUSH
4204: LD_VAR 0 1
4208: PPUSH
4209: LD_INT 2
4211: PPUSH
4212: LD_EXP 31
4216: PPUSH
4217: CALL 7249 0 3
4221: ST_TO_ADDR
// if not engs then
4222: LD_VAR 0 8
4226: NOT
4227: IFFALSE 4339
// begin engs := MC_GetBestForClass ( base , 2 , 6 ) ;
4229: LD_ADDR_VAR 0 8
4233: PUSH
4234: LD_VAR 0 1
4238: PPUSH
4239: LD_INT 2
4241: PPUSH
4242: LD_INT 6
4244: PPUSH
4245: CALL 6511 0 3
4249: ST_TO_ADDR
// if not engs then
4250: LD_VAR 0 8
4254: NOT
4255: IFFALSE 4273
// begin MCTM_DeleteActiveTask ( base , mctm_build ) ;
4257: LD_VAR 0 1
4261: PPUSH
4262: LD_EXP 37
4266: PPUSH
4267: CALL 7913 0 2
// exit ;
4271: GO 4736
// end ; MC_ChangeClass ( base , 2 , engs ) ;
4273: LD_VAR 0 1
4277: PPUSH
4278: LD_INT 2
4280: PPUSH
4281: LD_VAR 0 8
4285: PPUSH
4286: CALL 6741 0 3
// repeat wait ( 0 0$1 ) ;
4290: LD_INT 35
4292: PPUSH
4293: CALL_OW 67
// if not mc_people [ base ] then
4297: LD_EXP 9
4301: PUSH
4302: LD_VAR 0 1
4306: ARRAY
4307: NOT
4308: IFFALSE 4312
// exit ;
4310: GO 4736
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
4312: LD_VAR 0 8
4316: PPUSH
4317: LD_INT 25
4319: PUSH
4320: LD_INT 2
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PPUSH
4327: CALL_OW 72
4331: PUSH
4332: LD_VAR 0 8
4336: EQUAL
4337: IFFALSE 4290
// end ; ComExitAll ( engs ) ;
4339: LD_VAR 0 8
4343: PPUSH
4344: CALL 45760 0 1
// MCT_SetTag ( engs , mct_build ) ;
4348: LD_VAR 0 8
4352: PPUSH
4353: LD_EXP 33
4357: PPUSH
4358: CALL 6422 0 2
// btype := mc_build_list [ base ] [ 1 ] [ 1 ] ;
4362: LD_ADDR_VAR 0 4
4366: PUSH
4367: LD_EXP 14
4371: PUSH
4372: LD_VAR 0 1
4376: ARRAY
4377: PUSH
4378: LD_INT 1
4380: ARRAY
4381: PUSH
4382: LD_INT 1
4384: ARRAY
4385: ST_TO_ADDR
// x := mc_build_list [ base ] [ 1 ] [ 2 ] ;
4386: LD_ADDR_VAR 0 5
4390: PUSH
4391: LD_EXP 14
4395: PUSH
4396: LD_VAR 0 1
4400: ARRAY
4401: PUSH
4402: LD_INT 1
4404: ARRAY
4405: PUSH
4406: LD_INT 2
4408: ARRAY
4409: ST_TO_ADDR
// y := mc_build_list [ base ] [ 1 ] [ 3 ] ;
4410: LD_ADDR_VAR 0 6
4414: PUSH
4415: LD_EXP 14
4419: PUSH
4420: LD_VAR 0 1
4424: ARRAY
4425: PUSH
4426: LD_INT 1
4428: ARRAY
4429: PUSH
4430: LD_INT 3
4432: ARRAY
4433: ST_TO_ADDR
// d := mc_build_list [ base ] [ 1 ] [ 4 ] ;
4434: LD_ADDR_VAR 0 7
4438: PUSH
4439: LD_EXP 14
4443: PUSH
4444: LD_VAR 0 1
4448: ARRAY
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PUSH
4454: LD_INT 4
4456: ARRAY
4457: ST_TO_ADDR
// if GetType ( HexInfo ( x , y ) ) = unit_building then
4458: LD_VAR 0 5
4462: PPUSH
4463: LD_VAR 0 6
4467: PPUSH
4468: CALL_OW 428
4472: PPUSH
4473: CALL_OW 247
4477: PUSH
4478: LD_INT 3
4480: EQUAL
4481: IFFALSE 4516
// begin wait ( 0 0$1 ) ;
4483: LD_INT 35
4485: PPUSH
4486: CALL_OW 67
// ComComplete ( engs , HexInfo ( x , y ) ) ;
4490: LD_VAR 0 8
4494: PPUSH
4495: LD_VAR 0 5
4499: PPUSH
4500: LD_VAR 0 6
4504: PPUSH
4505: CALL_OW 428
4509: PPUSH
4510: CALL 15790 0 2
// end else
4514: GO 4736
// begin depot := NearestUnitToXY ( MC_GetDepot ( base ) , x , y ) ;
4516: LD_ADDR_VAR 0 3
4520: PUSH
4521: LD_VAR 0 1
4525: PPUSH
4526: CALL 7446 0 1
4530: PPUSH
4531: LD_VAR 0 5
4535: PPUSH
4536: LD_VAR 0 6
4540: PPUSH
4541: CALL_OW 73
4545: ST_TO_ADDR
// if not HexInfo ( x , y ) and CanBeBuilt ( depot , btype , x , y , d ) then
4546: LD_VAR 0 5
4550: PPUSH
4551: LD_VAR 0 6
4555: PPUSH
4556: CALL_OW 428
4560: NOT
4561: PUSH
4562: LD_VAR 0 3
4566: PPUSH
4567: LD_VAR 0 4
4571: PPUSH
4572: LD_VAR 0 5
4576: PPUSH
4577: LD_VAR 0 6
4581: PPUSH
4582: LD_VAR 0 7
4586: PPUSH
4587: CALL 21026 0 5
4591: AND
4592: IFFALSE 4625
// ComBuild ( engs , btype , x , y , d ) else
4594: LD_VAR 0 8
4598: PPUSH
4599: LD_VAR 0 4
4603: PPUSH
4604: LD_VAR 0 5
4608: PPUSH
4609: LD_VAR 0 6
4613: PPUSH
4614: LD_VAR 0 7
4618: PPUSH
4619: CALL_OW 145
4623: GO 4736
// begin if GetType ( HexInfo ( x , y ) ) <> unit_building then
4625: LD_VAR 0 5
4629: PPUSH
4630: LD_VAR 0 6
4634: PPUSH
4635: CALL_OW 428
4639: PPUSH
4640: CALL_OW 247
4644: PUSH
4645: LD_INT 3
4647: NONEQUAL
4648: IFFALSE 4708
// begin TryClearPlaceForBuilding ( btype , x , y , d , mc_buildings [ base ] , engs , mc_parking [ base ] ) ;
4650: LD_VAR 0 4
4654: PPUSH
4655: LD_VAR 0 5
4659: PPUSH
4660: LD_VAR 0 6
4664: PPUSH
4665: LD_VAR 0 7
4669: PPUSH
4670: LD_EXP 10
4674: PUSH
4675: LD_VAR 0 1
4679: ARRAY
4680: PPUSH
4681: LD_VAR 0 8
4685: PPUSH
4686: LD_EXP 28
4690: PUSH
4691: LD_VAR 0 1
4695: ARRAY
4696: PPUSH
4697: CALL 19780 0 7
// wait ( 0 0$10 ) ;
4701: LD_INT 350
4703: PPUSH
4704: CALL_OW 67
// end ; MCTM_DeleteActiveTask ( base , mctm_build ) ;
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_EXP 37
4717: PPUSH
4718: CALL 7913 0 2
// MCT_ResetTag ( base , mctm_build ) ;
4722: LD_VAR 0 1
4726: PPUSH
4727: LD_EXP 37
4731: PPUSH
4732: CALL 6356 0 2
// end ; end ; end ; end_of_file
4736: LD_VAR 0 2
4740: RET
// export mce_start , mce_monitor_base , mce_ ; export function MCE_InitEvents ( ) ; begin
4741: LD_INT 0
4743: PPUSH
// mce_start := 1 ;
4744: LD_ADDR_EXP 1
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// mce_monitor_base := 2 ;
4752: LD_ADDR_EXP 2
4756: PUSH
4757: LD_INT 2
4759: ST_TO_ADDR
// end ;
4760: LD_VAR 0 1
4764: RET
// export function MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4765: LD_INT 0
4767: PPUSH
// case event of mce_start :
4768: LD_VAR 0 1
4772: PUSH
4773: LD_EXP 1
4777: DOUBLE
4778: EQUAL
4779: IFTRUE 4783
4781: GO 4790
4783: POP
// MC_Monitor ( ) ; mce_monitor_base :
4784: CALL 2435 0 0
4788: GO 4813
4790: LD_EXP 2
4794: DOUBLE
4795: EQUAL
4796: IFTRUE 4800
4798: GO 4812
4800: POP
// MC_MonitorBase ( p1 ) ; end ;
4801: LD_VAR 0 2
4805: PPUSH
4806: CALL 2559 0 1
4810: GO 4813
4812: POP
// end ;
4813: LD_VAR 0 8
4817: RET
// export function MCE_ClassChanged ( unit , old_class , new_class ) ; begin
4818: LD_INT 0
4820: PPUSH
// SetTag ( unit , mct_none ) ;
4821: LD_VAR 0 1
4825: PPUSH
4826: LD_EXP 31
4830: PPUSH
4831: CALL_OW 109
// end ;
4835: LD_VAR 0 4
4839: RET
// export function MCE_UnitDestroyed ( un ) ; begin
4840: LD_INT 0
4842: PPUSH
// case GetType ( un ) of unit_human :
4843: LD_VAR 0 1
4847: PPUSH
4848: CALL_OW 247
4852: PUSH
4853: LD_INT 1
4855: DOUBLE
4856: EQUAL
4857: IFTRUE 4861
4859: GO 4873
4861: POP
// MCE_HumanKilled ( un ) ; unit_building :
4862: LD_VAR 0 1
4866: PPUSH
4867: CALL 4899 0 1
4871: GO 4894
4873: LD_INT 3
4875: DOUBLE
4876: EQUAL
4877: IFTRUE 4881
4879: GO 4893
4881: POP
// MCE_BuildingDestroyed ( un ) ; end ;
4882: LD_VAR 0 1
4886: PPUSH
4887: CALL 5456 0 1
4891: GO 4894
4893: POP
// end ;
4894: LD_VAR 0 2
4898: RET
// export function MCE_HumanKilled ( un ) ; var i ; begin
4899: LD_INT 0
4901: PPUSH
4902: PPUSH
// for i := 1 to mc_people do
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: DOUBLE
4909: LD_INT 1
4911: DEC
4912: ST_TO_ADDR
4913: LD_EXP 9
4917: PUSH
4918: FOR_TO
4919: IFFALSE 4978
// if un in mc_people [ i ] then
4921: LD_VAR 0 1
4925: PUSH
4926: LD_EXP 9
4930: PUSH
4931: LD_VAR 0 3
4935: ARRAY
4936: IN
4937: IFFALSE 4976
// mc_people := Replace ( mc_people , i , mc_people [ i ] diff un ) ;
4939: LD_ADDR_EXP 9
4943: PUSH
4944: LD_EXP 9
4948: PPUSH
4949: LD_VAR 0 3
4953: PPUSH
4954: LD_EXP 9
4958: PUSH
4959: LD_VAR 0 3
4963: ARRAY
4964: PUSH
4965: LD_VAR 0 1
4969: DIFF
4970: PPUSH
4971: CALL_OW 1
4975: ST_TO_ADDR
4976: GO 4918
4978: POP
4979: POP
// end ;
4980: LD_VAR 0 2
4984: RET
// export function MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ; var base ; begin
4985: LD_INT 0
4987: PPUSH
4988: PPUSH
// if GetTag ( driver ) = mct_collect_crates then
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 110
4998: PUSH
4999: LD_EXP 34
5003: EQUAL
5004: IFFALSE 5053
// begin base := MC_GetHumanBase ( driver ) ;
5006: LD_ADDR_VAR 0 6
5010: PUSH
5011: LD_VAR 0 1
5015: PPUSH
5016: CALL 6678 0 1
5020: ST_TO_ADDR
// if base then
5021: LD_VAR 0 6
5025: IFFALSE 5053
// begin SetTag ( driver , 0 ) ;
5027: LD_VAR 0 1
5031: PPUSH
5032: LD_INT 0
5034: PPUSH
5035: CALL_OW 109
// MC_Retreat ( base , driver ) ;
5039: LD_VAR 0 6
5043: PPUSH
5044: LD_VAR 0 1
5048: PPUSH
5049: CALL 7703 0 2
// end ; end ; end ;
5053: LD_VAR 0 5
5057: RET
// export function MCE_BuildingComplete ( building ) ; var base , btype , x , y , d ; begin
5058: LD_INT 0
5060: PPUSH
5061: PPUSH
5062: PPUSH
5063: PPUSH
5064: PPUSH
5065: PPUSH
// btype := GetBType ( building ) ;
5066: LD_ADDR_VAR 0 4
5070: PUSH
5071: LD_VAR 0 1
5075: PPUSH
5076: CALL_OW 266
5080: ST_TO_ADDR
// x := GetX ( building ) ;
5081: LD_ADDR_VAR 0 5
5085: PUSH
5086: LD_VAR 0 1
5090: PPUSH
5091: CALL_OW 250
5095: ST_TO_ADDR
// y := GetY ( building ) ;
5096: LD_ADDR_VAR 0 6
5100: PUSH
5101: LD_VAR 0 1
5105: PPUSH
5106: CALL_OW 251
5110: ST_TO_ADDR
// d := GetDir ( building ) ;
5111: LD_ADDR_VAR 0 7
5115: PUSH
5116: LD_VAR 0 1
5120: PPUSH
5121: CALL_OW 254
5125: ST_TO_ADDR
// for base := 1 to mc_build_list do
5126: LD_ADDR_VAR 0 3
5130: PUSH
5131: DOUBLE
5132: LD_INT 1
5134: DEC
5135: ST_TO_ADDR
5136: LD_EXP 14
5140: PUSH
5141: FOR_TO
5142: IFFALSE 5449
// begin if not mc_build_list [ base ] then
5144: LD_EXP 14
5148: PUSH
5149: LD_VAR 0 3
5153: ARRAY
5154: NOT
5155: IFFALSE 5159
// continue ;
5157: GO 5141
// if CompareArrayValues ( [ btype , x , y , d ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5159: LD_VAR 0 4
5163: PUSH
5164: LD_VAR 0 5
5168: PUSH
5169: LD_VAR 0 6
5173: PUSH
5174: LD_VAR 0 7
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PPUSH
5185: LD_EXP 14
5189: PUSH
5190: LD_VAR 0 3
5194: ARRAY
5195: PUSH
5196: LD_INT 1
5198: ARRAY
5199: PPUSH
5200: CALL 19204 0 2
5204: PUSH
5205: LD_VAR 0 1
5209: PPUSH
5210: CALL_OW 255
5214: PUSH
5215: LD_EXP 6
5219: PUSH
5220: LD_VAR 0 3
5224: ARRAY
5225: EQUAL
5226: AND
5227: IFFALSE 5447
// begin if mc_build_list [ base ] [ 1 ] > 4 then
5229: LD_EXP 14
5233: PUSH
5234: LD_VAR 0 3
5238: ARRAY
5239: PUSH
5240: LD_INT 1
5242: ARRAY
5243: PUSH
5244: LD_INT 4
5246: GREATER
5247: IFFALSE 5320
// begin repeat wait ( 0 0$1 ) ;
5249: LD_INT 35
5251: PPUSH
5252: CALL_OW 67
// until not UpgradeCost ( mc_build_list [ base ] [ 1 ] [ 5 ] ) or not IsDead ( building ) ;
5256: LD_EXP 14
5260: PUSH
5261: LD_VAR 0 3
5265: ARRAY
5266: PUSH
5267: LD_INT 1
5269: ARRAY
5270: PUSH
5271: LD_INT 5
5273: ARRAY
5274: PPUSH
5275: CALL 19440 0 1
5279: NOT
5280: PUSH
5281: LD_VAR 0 1
5285: PPUSH
5286: CALL_OW 301
5290: NOT
5291: OR
5292: IFFALSE 5249
// if IsDead ( building ) then
5294: LD_VAR 0 1
5298: PPUSH
5299: CALL_OW 301
5303: IFFALSE 5309
// exit ;
5305: POP
5306: POP
5307: GO 5451
// ComUpgrade ( building ) ;
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 146
// end else
5318: GO 5359
// mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5320: LD_ADDR_EXP 14
5324: PUSH
5325: LD_EXP 14
5329: PPUSH
5330: LD_VAR 0 3
5334: PPUSH
5335: LD_EXP 14
5339: PUSH
5340: LD_VAR 0 3
5344: ARRAY
5345: PPUSH
5346: LD_INT 1
5348: PPUSH
5349: CALL_OW 3
5353: PPUSH
5354: CALL_OW 1
5358: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , base , Replace ( mc_buildings [ base ] , mc_buildings [ base ] + 1 , building ) ) ;
5359: LD_ADDR_EXP 10
5363: PUSH
5364: LD_EXP 10
5368: PPUSH
5369: LD_VAR 0 3
5373: PPUSH
5374: LD_EXP 10
5378: PUSH
5379: LD_VAR 0 3
5383: ARRAY
5384: PPUSH
5385: LD_EXP 10
5389: PUSH
5390: LD_VAR 0 3
5394: ARRAY
5395: PUSH
5396: LD_INT 1
5398: PLUS
5399: PPUSH
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 1
5409: PPUSH
5410: CALL_OW 1
5414: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5415: LD_VAR 0 3
5419: PPUSH
5420: LD_EXP 37
5424: PPUSH
5425: CALL 7913 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5429: LD_VAR 0 3
5433: PPUSH
5434: LD_EXP 37
5438: PPUSH
5439: CALL 6356 0 2
// exit ;
5443: POP
5444: POP
5445: GO 5451
// end ; end ;
5447: GO 5141
5449: POP
5450: POP
// end ;
5451: LD_VAR 0 2
5455: RET
// export function MCE_BuildingDestroyed ( building ) ; var base , x , y , d , btype ; begin
5456: LD_INT 0
5458: PPUSH
5459: PPUSH
5460: PPUSH
5461: PPUSH
5462: PPUSH
5463: PPUSH
// btype := GetBType ( building ) ;
5464: LD_ADDR_VAR 0 7
5468: PUSH
5469: LD_VAR 0 1
5473: PPUSH
5474: CALL_OW 266
5478: ST_TO_ADDR
// x := GetX ( building ) ;
5479: LD_ADDR_VAR 0 4
5483: PUSH
5484: LD_VAR 0 1
5488: PPUSH
5489: CALL_OW 250
5493: ST_TO_ADDR
// y := GetY ( building ) ;
5494: LD_ADDR_VAR 0 5
5498: PUSH
5499: LD_VAR 0 1
5503: PPUSH
5504: CALL_OW 251
5508: ST_TO_ADDR
// d := GetDir ( building ) ;
5509: LD_ADDR_VAR 0 6
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 254
5523: ST_TO_ADDR
// for base := 1 to mc_buildings do
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: DOUBLE
5530: LD_INT 1
5532: DEC
5533: ST_TO_ADDR
5534: LD_EXP 10
5538: PUSH
5539: FOR_TO
5540: IFFALSE 5770
// begin if not mc_buildings [ base ] then
5542: LD_EXP 10
5546: PUSH
5547: LD_VAR 0 3
5551: ARRAY
5552: NOT
5553: IFFALSE 5557
// continue ;
5555: GO 5539
// if building in mc_buildings [ base ] then
5557: LD_VAR 0 1
5561: PUSH
5562: LD_EXP 10
5566: PUSH
5567: LD_VAR 0 3
5571: ARRAY
5572: IN
5573: IFFALSE 5768
// begin mc_buildings := Replace ( mc_buildings , base , mc_buildings [ base ] diff building ) ;
5575: LD_ADDR_EXP 10
5579: PUSH
5580: LD_EXP 10
5584: PPUSH
5585: LD_VAR 0 3
5589: PPUSH
5590: LD_EXP 10
5594: PUSH
5595: LD_VAR 0 3
5599: ARRAY
5600: PUSH
5601: LD_VAR 0 1
5605: DIFF
5606: PPUSH
5607: CALL_OW 1
5611: ST_TO_ADDR
// if mc_build_list [ base ] then
5612: LD_EXP 14
5616: PUSH
5617: LD_VAR 0 3
5621: ARRAY
5622: IFFALSE 5706
// if mc_build_list [ base ] [ 1 ] [ 1 ] = btype and mc_build_list [ base ] [ 1 ] [ 2 ] = x and mc_build_list [ base ] [ 1 ] [ 3 ] = y then
5624: LD_EXP 14
5628: PUSH
5629: LD_VAR 0 3
5633: ARRAY
5634: PUSH
5635: LD_INT 1
5637: ARRAY
5638: PUSH
5639: LD_INT 1
5641: ARRAY
5642: PUSH
5643: LD_VAR 0 7
5647: EQUAL
5648: PUSH
5649: LD_EXP 14
5653: PUSH
5654: LD_VAR 0 3
5658: ARRAY
5659: PUSH
5660: LD_INT 1
5662: ARRAY
5663: PUSH
5664: LD_INT 2
5666: ARRAY
5667: PUSH
5668: LD_VAR 0 4
5672: EQUAL
5673: AND
5674: PUSH
5675: LD_EXP 14
5679: PUSH
5680: LD_VAR 0 3
5684: ARRAY
5685: PUSH
5686: LD_INT 1
5688: ARRAY
5689: PUSH
5690: LD_INT 3
5692: ARRAY
5693: PUSH
5694: LD_VAR 0 5
5698: EQUAL
5699: AND
5700: IFFALSE 5706
// exit ;
5702: POP
5703: POP
5704: GO 5772
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] ^ [ btype , x , y , d ] ) ;
5706: LD_ADDR_EXP 14
5710: PUSH
5711: LD_EXP 14
5715: PPUSH
5716: LD_VAR 0 3
5720: PPUSH
5721: LD_EXP 14
5725: PUSH
5726: LD_VAR 0 3
5730: ARRAY
5731: PUSH
5732: LD_VAR 0 7
5736: PUSH
5737: LD_VAR 0 4
5741: PUSH
5742: LD_VAR 0 5
5746: PUSH
5747: LD_VAR 0 6
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: ADD
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// exit ;
5764: POP
5765: POP
5766: GO 5772
// end ; end ;
5768: GO 5539
5770: POP
5771: POP
// end ;
5772: LD_VAR 0 2
5776: RET
// export function MCE_BuildingUpgradeComplete ( building ) ; var base , btype , x , y , d ; begin
5777: LD_INT 0
5779: PPUSH
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
5784: PPUSH
// btype := GetBType ( building ) ;
5785: LD_ADDR_VAR 0 4
5789: PUSH
5790: LD_VAR 0 1
5794: PPUSH
5795: CALL_OW 266
5799: ST_TO_ADDR
// x := GetX ( building ) ;
5800: LD_ADDR_VAR 0 5
5804: PUSH
5805: LD_VAR 0 1
5809: PPUSH
5810: CALL_OW 250
5814: ST_TO_ADDR
// y := GetY ( building ) ;
5815: LD_ADDR_VAR 0 6
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 251
5829: ST_TO_ADDR
// d := GetDir ( building ) ;
5830: LD_ADDR_VAR 0 7
5834: PUSH
5835: LD_VAR 0 1
5839: PPUSH
5840: CALL_OW 254
5844: ST_TO_ADDR
// for base = 1 to mc_build_list do
5845: LD_ADDR_VAR 0 3
5849: PUSH
5850: DOUBLE
5851: LD_INT 1
5853: DEC
5854: ST_TO_ADDR
5855: LD_EXP 14
5859: PUSH
5860: FOR_TO
5861: IFFALSE 6031
// begin if not mc_build_list [ base ] then
5863: LD_EXP 14
5867: PUSH
5868: LD_VAR 0 3
5872: ARRAY
5873: NOT
5874: IFFALSE 5878
// continue ;
5876: GO 5860
// if CompareArrayValues ( [ btype - 1 , x , y , d , btype ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5878: LD_VAR 0 4
5882: PUSH
5883: LD_INT 1
5885: MINUS
5886: PUSH
5887: LD_VAR 0 5
5891: PUSH
5892: LD_VAR 0 6
5896: PUSH
5897: LD_VAR 0 7
5901: PUSH
5902: LD_VAR 0 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: PPUSH
5914: LD_EXP 14
5918: PUSH
5919: LD_VAR 0 3
5923: ARRAY
5924: PUSH
5925: LD_INT 1
5927: ARRAY
5928: PPUSH
5929: CALL 19204 0 2
5933: PUSH
5934: LD_VAR 0 1
5938: PPUSH
5939: CALL_OW 255
5943: PUSH
5944: LD_EXP 6
5948: PUSH
5949: LD_VAR 0 3
5953: ARRAY
5954: EQUAL
5955: AND
5956: IFFALSE 6029
// begin mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5958: LD_ADDR_EXP 14
5962: PUSH
5963: LD_EXP 14
5967: PPUSH
5968: LD_VAR 0 3
5972: PPUSH
5973: LD_EXP 14
5977: PUSH
5978: LD_VAR 0 3
5982: ARRAY
5983: PPUSH
5984: LD_INT 1
5986: PPUSH
5987: CALL_OW 3
5991: PPUSH
5992: CALL_OW 1
5996: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_EXP 37
6006: PPUSH
6007: CALL 7913 0 2
// MCT_ResetTag ( base , mctm_build ) ;
6011: LD_VAR 0 3
6015: PPUSH
6016: LD_EXP 37
6020: PPUSH
6021: CALL 6356 0 2
// exit ;
6025: POP
6026: POP
6027: GO 6033
// end ; end ;
6029: GO 5860
6031: POP
6032: POP
// end ; end_of_file
6033: LD_VAR 0 2
6037: RET
// export mc_active , mc_debug , mc_bases , mc_tag , mc_task , mc_people , mc_buildings , mc_vehicles , mc_mines , mc_minefields , mc_build_list , mc_produce_list , mc_defense_status , mc_defender , mc_defender_limit , mc_ape , mc_tech , mc_attack , mc_deposits_xy , mc_can_tame , mc_lab_upgrade , mc_crates_area , mc_teleport_exit , mc_allowed_tower_weapons , mc_parking , mc_scan_area , mc_danger ; export function MC_InitVariables ( ) ; begin
6038: LD_INT 0
6040: PPUSH
// mc_bases := [ ] ;
6041: LD_ADDR_EXP 6
6045: PUSH
6046: EMPTY
6047: ST_TO_ADDR
// mc_tag := [ ] ;
6048: LD_ADDR_EXP 7
6052: PUSH
6053: EMPTY
6054: ST_TO_ADDR
// mc_task := [ ] ;
6055: LD_ADDR_EXP 8
6059: PUSH
6060: EMPTY
6061: ST_TO_ADDR
// mc_people := [ ] ;
6062: LD_ADDR_EXP 9
6066: PUSH
6067: EMPTY
6068: ST_TO_ADDR
// mc_buildings := [ ] ;
6069: LD_ADDR_EXP 10
6073: PUSH
6074: EMPTY
6075: ST_TO_ADDR
// mc_vehicles := [ ] ;
6076: LD_ADDR_EXP 11
6080: PUSH
6081: EMPTY
6082: ST_TO_ADDR
// mc_mines := [ ] ;
6083: LD_ADDR_EXP 12
6087: PUSH
6088: EMPTY
6089: ST_TO_ADDR
// mc_minefields := [ ] ;
6090: LD_ADDR_EXP 13
6094: PUSH
6095: EMPTY
6096: ST_TO_ADDR
// mc_build_list := [ ] ;
6097: LD_ADDR_EXP 14
6101: PUSH
6102: EMPTY
6103: ST_TO_ADDR
// mc_produce_list := [ ] ;
6104: LD_ADDR_EXP 15
6108: PUSH
6109: EMPTY
6110: ST_TO_ADDR
// mc_defense_status := [ ] ;
6111: LD_ADDR_EXP 16
6115: PUSH
6116: EMPTY
6117: ST_TO_ADDR
// mc_defender := [ ] ;
6118: LD_ADDR_EXP 17
6122: PUSH
6123: EMPTY
6124: ST_TO_ADDR
// mc_defender_limit := [ ] ;
6125: LD_ADDR_EXP 18
6129: PUSH
6130: EMPTY
6131: ST_TO_ADDR
// mc_ape := [ ] ;
6132: LD_ADDR_EXP 19
6136: PUSH
6137: EMPTY
6138: ST_TO_ADDR
// mc_tech := [ ] ;
6139: LD_ADDR_EXP 20
6143: PUSH
6144: EMPTY
6145: ST_TO_ADDR
// mc_attack := [ ] ;
6146: LD_ADDR_EXP 21
6150: PUSH
6151: EMPTY
6152: ST_TO_ADDR
// mc_deposits_xy := [ ] ;
6153: LD_ADDR_EXP 22
6157: PUSH
6158: EMPTY
6159: ST_TO_ADDR
// mc_can_tame := [ ] ;
6160: LD_ADDR_EXP 23
6164: PUSH
6165: EMPTY
6166: ST_TO_ADDR
// mc_crates_area := [ ] ;
6167: LD_ADDR_EXP 25
6171: PUSH
6172: EMPTY
6173: ST_TO_ADDR
// mc_teleport_exit := [ ] ;
6174: LD_ADDR_EXP 26
6178: PUSH
6179: EMPTY
6180: ST_TO_ADDR
// mc_allowed_tower_weapons := [ ] ;
6181: LD_ADDR_EXP 27
6185: PUSH
6186: EMPTY
6187: ST_TO_ADDR
// mc_parking := [ ] ;
6188: LD_ADDR_EXP 28
6192: PUSH
6193: EMPTY
6194: ST_TO_ADDR
// mc_scan_area := [ ] ;
6195: LD_ADDR_EXP 29
6199: PUSH
6200: EMPTY
6201: ST_TO_ADDR
// mc_danger := [ ] ;
6202: LD_ADDR_EXP 30
6206: PUSH
6207: EMPTY
6208: ST_TO_ADDR
// end ; end_of_file
6209: LD_VAR 0 1
6213: RET
// export mct_none , mct_change_class , mct_build , mct_collect_crates , mct_heal ; export function MCT_InitTags ; begin
6214: LD_INT 0
6216: PPUSH
// mct_none := 0 ;
6217: LD_ADDR_EXP 31
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// mct_change_class := 1 ;
6225: LD_ADDR_EXP 32
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// mct_build := 2 ;
6233: LD_ADDR_EXP 33
6237: PUSH
6238: LD_INT 2
6240: ST_TO_ADDR
// mct_collect_crates := 3 ;
6241: LD_ADDR_EXP 34
6245: PUSH
6246: LD_INT 3
6248: ST_TO_ADDR
// mct_heal := 4 ;
6249: LD_ADDR_EXP 35
6253: PUSH
6254: LD_INT 4
6256: ST_TO_ADDR
// end ;
6257: LD_VAR 0 1
6261: RET
// export function MCT_GetByTag ( base , tag ) ; var i ; begin
6262: LD_INT 0
6264: PPUSH
6265: PPUSH
// result := [ ] ;
6266: LD_ADDR_VAR 0 3
6270: PUSH
6271: EMPTY
6272: ST_TO_ADDR
// if not base then
6273: LD_VAR 0 1
6277: NOT
6278: IFFALSE 6282
// exit ;
6280: GO 6351
// for i in mc_people [ base ] do
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_EXP 9
6291: PUSH
6292: LD_VAR 0 1
6296: ARRAY
6297: PUSH
6298: FOR_IN
6299: IFFALSE 6349
// if GetTag ( i ) = tag then
6301: LD_VAR 0 4
6305: PPUSH
6306: CALL_OW 110
6310: PUSH
6311: LD_VAR 0 2
6315: EQUAL
6316: IFFALSE 6347
// result := Replace ( result , result + 1 , i ) ;
6318: LD_ADDR_VAR 0 3
6322: PUSH
6323: LD_VAR 0 3
6327: PPUSH
6328: LD_VAR 0 3
6332: PUSH
6333: LD_INT 1
6335: PLUS
6336: PPUSH
6337: LD_VAR 0 4
6341: PPUSH
6342: CALL_OW 1
6346: ST_TO_ADDR
6347: GO 6298
6349: POP
6350: POP
// end ;
6351: LD_VAR 0 3
6355: RET
// export function MCT_ResetTag ( base , tag ) ; var i ; begin
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
// result := MCT_GetByTag ( base , tag ) ;
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_VAR 0 1
6369: PPUSH
6370: LD_VAR 0 2
6374: PPUSH
6375: CALL 6262 0 2
6379: ST_TO_ADDR
// if result then
6380: LD_VAR 0 3
6384: IFFALSE 6417
// for i in result do
6386: LD_ADDR_VAR 0 4
6390: PUSH
6391: LD_VAR 0 3
6395: PUSH
6396: FOR_IN
6397: IFFALSE 6415
// SetTag ( i , mct_none ) ;
6399: LD_VAR 0 4
6403: PPUSH
6404: LD_EXP 31
6408: PPUSH
6409: CALL_OW 109
6413: GO 6396
6415: POP
6416: POP
// end ;
6417: LD_VAR 0 3
6421: RET
// export function MCT_SetTag ( units , tag ) ; var i ; begin
6422: LD_INT 0
6424: PPUSH
6425: PPUSH
// if not units then
6426: LD_VAR 0 1
6430: NOT
6431: IFFALSE 6435
// exit ;
6433: GO 6466
// for i in units do
6435: LD_ADDR_VAR 0 4
6439: PUSH
6440: LD_VAR 0 1
6444: PUSH
6445: FOR_IN
6446: IFFALSE 6464
// SetTag ( i , tag ) ;
6448: LD_VAR 0 4
6452: PPUSH
6453: LD_VAR 0 2
6457: PPUSH
6458: CALL_OW 109
6462: GO 6445
6464: POP
6465: POP
// end ; end_of_file
6466: LD_VAR 0 3
6470: RET
// export function MC_Exist ( base ) ; begin
6471: LD_INT 0
6473: PPUSH
// result := mc_bases >= base and mc_bases [ base ] > 0 ;
6474: LD_ADDR_VAR 0 2
6478: PUSH
6479: LD_EXP 6
6483: PUSH
6484: LD_VAR 0 1
6488: GREATEREQUAL
6489: PUSH
6490: LD_EXP 6
6494: PUSH
6495: LD_VAR 0 1
6499: ARRAY
6500: PUSH
6501: LD_INT 0
6503: GREATER
6504: AND
6505: ST_TO_ADDR
// end ;
6506: LD_VAR 0 2
6510: RET
// export function MC_GetBestForClass ( base , class , amount ) ; var i , units ; begin
6511: LD_INT 0
6513: PPUSH
6514: PPUSH
6515: PPUSH
// result := [ ] ;
6516: LD_ADDR_VAR 0 4
6520: PUSH
6521: EMPTY
6522: ST_TO_ADDR
// units := SortBySkill ( UnitFilter ( mc_people [ base ] , [ f_not , [ f_class , class ] ] ) , class ) ;
6523: LD_ADDR_VAR 0 6
6527: PUSH
6528: LD_EXP 9
6532: PUSH
6533: LD_VAR 0 1
6537: ARRAY
6538: PPUSH
6539: LD_INT 3
6541: PUSH
6542: LD_INT 25
6544: PUSH
6545: LD_VAR 0 2
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PPUSH
6558: CALL_OW 72
6562: PPUSH
6563: LD_VAR 0 2
6567: PPUSH
6568: CALL 43796 0 2
6572: ST_TO_ADDR
// if not units then
6573: LD_VAR 0 6
6577: NOT
6578: IFFALSE 6582
// exit ;
6580: GO 6673
// for i := 1 to amount do
6582: LD_ADDR_VAR 0 5
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_VAR 0 3
6596: PUSH
6597: FOR_TO
6598: IFFALSE 6671
// begin if i > units then
6600: LD_VAR 0 5
6604: PUSH
6605: LD_VAR 0 6
6609: GREATER
6610: IFFALSE 6616
// exit ;
6612: POP
6613: POP
6614: GO 6673
// if not GetTag ( units [ i ] ) then
6616: LD_VAR 0 6
6620: PUSH
6621: LD_VAR 0 5
6625: ARRAY
6626: PPUSH
6627: CALL_OW 110
6631: NOT
6632: IFFALSE 6669
// result := Replace ( result , result + 1 , units [ i ] ) ;
6634: LD_ADDR_VAR 0 4
6638: PUSH
6639: LD_VAR 0 4
6643: PPUSH
6644: LD_VAR 0 4
6648: PUSH
6649: LD_INT 1
6651: PLUS
6652: PPUSH
6653: LD_VAR 0 6
6657: PUSH
6658: LD_VAR 0 5
6662: ARRAY
6663: PPUSH
6664: CALL_OW 1
6668: ST_TO_ADDR
// end ;
6669: GO 6597
6671: POP
6672: POP
// end ;
6673: LD_VAR 0 4
6677: RET
// export function MC_GetHumanBase ( human ) ; var i ; begin
6678: LD_INT 0
6680: PPUSH
6681: PPUSH
// for i := 1 to mc_people do
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: DOUBLE
6688: LD_INT 1
6690: DEC
6691: ST_TO_ADDR
6692: LD_EXP 9
6696: PUSH
6697: FOR_TO
6698: IFFALSE 6734
// if human in mc_people [ i ] then
6700: LD_VAR 0 1
6704: PUSH
6705: LD_EXP 9
6709: PUSH
6710: LD_VAR 0 3
6714: ARRAY
6715: IN
6716: IFFALSE 6732
// begin result := i ;
6718: LD_ADDR_VAR 0 2
6722: PUSH
6723: LD_VAR 0 3
6727: ST_TO_ADDR
// exit ;
6728: POP
6729: POP
6730: GO 6736
// end ;
6732: GO 6697
6734: POP
6735: POP
// end ;
6736: LD_VAR 0 2
6740: RET
// export function MC_ChangeClass ( base , class , units ) ; var i , buildings , b ; begin
6741: LD_INT 0
6743: PPUSH
6744: PPUSH
6745: PPUSH
6746: PPUSH
// if not base or not units then
6747: LD_VAR 0 1
6751: NOT
6752: PUSH
6753: LD_VAR 0 3
6757: NOT
6758: OR
6759: IFFALSE 6763
// exit ;
6761: GO 7244
// case class of 1 , 5 , 6 , 7 , 8 :
6763: LD_VAR 0 2
6767: PUSH
6768: LD_INT 1
6770: DOUBLE
6771: EQUAL
6772: IFTRUE 6800
6774: LD_INT 5
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6800
6780: LD_INT 6
6782: DOUBLE
6783: EQUAL
6784: IFTRUE 6800
6786: LD_INT 7
6788: DOUBLE
6789: EQUAL
6790: IFTRUE 6800
6792: LD_INT 8
6794: DOUBLE
6795: EQUAL
6796: IFTRUE 6800
6798: GO 6852
6800: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
6801: LD_ADDR_VAR 0 6
6805: PUSH
6806: LD_EXP 10
6810: PUSH
6811: LD_VAR 0 1
6815: ARRAY
6816: PPUSH
6817: LD_INT 2
6819: PUSH
6820: LD_INT 30
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 30
6832: PUSH
6833: LD_INT 5
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 72
6849: ST_TO_ADDR
6850: GO 7044
6852: LD_INT 2
6854: DOUBLE
6855: EQUAL
6856: IFTRUE 6860
6858: GO 6912
6860: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
6861: LD_ADDR_VAR 0 6
6865: PUSH
6866: LD_EXP 10
6870: PUSH
6871: LD_VAR 0 1
6875: ARRAY
6876: PPUSH
6877: LD_INT 2
6879: PUSH
6880: LD_INT 30
6882: PUSH
6883: LD_INT 0
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 1
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: PPUSH
6905: CALL_OW 72
6909: ST_TO_ADDR
6910: GO 7044
6912: LD_INT 3
6914: DOUBLE
6915: EQUAL
6916: IFTRUE 6920
6918: GO 6972
6920: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
6921: LD_ADDR_VAR 0 6
6925: PUSH
6926: LD_EXP 10
6930: PUSH
6931: LD_VAR 0 1
6935: ARRAY
6936: PPUSH
6937: LD_INT 2
6939: PUSH
6940: LD_INT 30
6942: PUSH
6943: LD_INT 2
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 30
6952: PUSH
6953: LD_INT 3
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 72
6969: ST_TO_ADDR
6970: GO 7044
6972: LD_INT 4
6974: DOUBLE
6975: EQUAL
6976: IFTRUE 6980
6978: GO 7043
6980: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
6981: LD_ADDR_VAR 0 6
6985: PUSH
6986: LD_EXP 10
6990: PUSH
6991: LD_VAR 0 1
6995: ARRAY
6996: PPUSH
6997: LD_INT 2
6999: PUSH
7000: LD_INT 30
7002: PUSH
7003: LD_INT 6
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 30
7012: PUSH
7013: LD_INT 7
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 30
7022: PUSH
7023: LD_INT 8
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 72
7040: ST_TO_ADDR
7041: GO 7044
7043: POP
// if not buildings then
7044: LD_VAR 0 6
7048: NOT
7049: IFFALSE 7053
// exit ;
7051: GO 7244
// for i := 1 to units do
7053: LD_ADDR_VAR 0 5
7057: PUSH
7058: DOUBLE
7059: LD_INT 1
7061: DEC
7062: ST_TO_ADDR
7063: LD_VAR 0 3
7067: PUSH
7068: FOR_TO
7069: IFFALSE 7242
// begin if GetClass ( units [ i ] ) = class then
7071: LD_VAR 0 3
7075: PUSH
7076: LD_VAR 0 5
7080: ARRAY
7081: PPUSH
7082: CALL_OW 257
7086: PUSH
7087: LD_VAR 0 2
7091: EQUAL
7092: IFFALSE 7096
// continue ;
7094: GO 7068
// SetTag ( units [ i ] , mct_change_class ) ;
7096: LD_VAR 0 3
7100: PUSH
7101: LD_VAR 0 5
7105: ARRAY
7106: PPUSH
7107: LD_EXP 32
7111: PPUSH
7112: CALL_OW 109
// if buildings > i div 6 then
7116: LD_VAR 0 6
7120: PUSH
7121: LD_VAR 0 5
7125: PUSH
7126: LD_INT 6
7128: DIV
7129: GREATER
7130: IFFALSE 7154
// b := buildings [ i div 6 ] else
7132: LD_ADDR_VAR 0 7
7136: PUSH
7137: LD_VAR 0 6
7141: PUSH
7142: LD_VAR 0 5
7146: PUSH
7147: LD_INT 6
7149: DIV
7150: ARRAY
7151: ST_TO_ADDR
7152: GO 7168
// b := buildings [ 1 ] ;
7154: LD_ADDR_VAR 0 7
7158: PUSH
7159: LD_VAR 0 6
7163: PUSH
7164: LD_INT 1
7166: ARRAY
7167: ST_TO_ADDR
// if IsInUnit ( units [ i ] ) then
7168: LD_VAR 0 3
7172: PUSH
7173: LD_VAR 0 5
7177: ARRAY
7178: PPUSH
7179: CALL_OW 310
7183: IFFALSE 7200
// ComExit ( units [ i ] ) ;
7185: LD_VAR 0 3
7189: PUSH
7190: LD_VAR 0 5
7194: ARRAY
7195: PPUSH
7196: CALL 45677 0 1
// AddComEnterUnit ( units [ i ] , b ) ;
7200: LD_VAR 0 3
7204: PUSH
7205: LD_VAR 0 5
7209: ARRAY
7210: PPUSH
7211: LD_VAR 0 7
7215: PPUSH
7216: CALL_OW 180
// AddComChangeProfession ( units [ i ] , class ) ;
7220: LD_VAR 0 3
7224: PUSH
7225: LD_VAR 0 5
7229: ARRAY
7230: PPUSH
7231: LD_VAR 0 2
7235: PPUSH
7236: CALL_OW 183
// end ;
7240: GO 7068
7242: POP
7243: POP
// end ;
7244: LD_VAR 0 4
7248: RET
// export function MC_GetByClass ( base , class , tag ) ; var i ; begin
7249: LD_INT 0
7251: PPUSH
7252: PPUSH
// result := UnitFilter ( mc_people [ base ] , [ f_class , class ] ) ;
7253: LD_ADDR_VAR 0 4
7257: PUSH
7258: LD_EXP 9
7262: PUSH
7263: LD_VAR 0 1
7267: ARRAY
7268: PPUSH
7269: LD_INT 25
7271: PUSH
7272: LD_VAR 0 2
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 72
7285: ST_TO_ADDR
// if tag > - 1 then
7286: LD_VAR 0 3
7290: PUSH
7291: LD_INT 1
7293: NEG
7294: GREATER
7295: IFFALSE 7347
// for i in result do
7297: LD_ADDR_VAR 0 5
7301: PUSH
7302: LD_VAR 0 4
7306: PUSH
7307: FOR_IN
7308: IFFALSE 7345
// if GetTag ( i ) <> tag then
7310: LD_VAR 0 5
7314: PPUSH
7315: CALL_OW 110
7319: PUSH
7320: LD_VAR 0 3
7324: NONEQUAL
7325: IFFALSE 7343
// result := result diff i ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: LD_VAR 0 4
7336: PUSH
7337: LD_VAR 0 5
7341: DIFF
7342: ST_TO_ADDR
7343: GO 7307
7345: POP
7346: POP
// end ;
7347: LD_VAR 0 4
7351: RET
// export function MC_GetOneByClass ( base , class , tag ) ; begin
7352: LD_INT 0
7354: PPUSH
// result := MC_GetByClass ( base , class , tag ) ;
7355: LD_ADDR_VAR 0 4
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: LD_VAR 0 2
7369: PPUSH
7370: LD_VAR 0 3
7374: PPUSH
7375: CALL 7249 0 3
7379: ST_TO_ADDR
// if result then
7380: LD_VAR 0 4
7384: IFFALSE 7400
// result := result [ 1 ] ;
7386: LD_ADDR_VAR 0 4
7390: PUSH
7391: LD_VAR 0 4
7395: PUSH
7396: LD_INT 1
7398: ARRAY
7399: ST_TO_ADDR
// end ;
7400: LD_VAR 0 4
7404: RET
// export function MC_GetBuilding ( base , btype ) ; begin
7405: LD_INT 0
7407: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_btype , btype ] ) ;
7408: LD_ADDR_VAR 0 3
7412: PUSH
7413: LD_EXP 10
7417: PUSH
7418: LD_VAR 0 1
7422: ARRAY
7423: PPUSH
7424: LD_INT 30
7426: PUSH
7427: LD_VAR 0 2
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PPUSH
7436: CALL_OW 72
7440: ST_TO_ADDR
// end ;
7441: LD_VAR 0 3
7445: RET
// export function MC_GetDepot ( base ) ; begin
7446: LD_INT 0
7448: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
7449: LD_ADDR_VAR 0 2
7453: PUSH
7454: LD_EXP 10
7458: PUSH
7459: LD_VAR 0 1
7463: ARRAY
7464: PPUSH
7465: LD_INT 2
7467: PUSH
7468: LD_INT 30
7470: PUSH
7471: LD_INT 0
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 30
7480: PUSH
7481: LD_INT 1
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 72
7497: ST_TO_ADDR
// end ;
7498: LD_VAR 0 2
7502: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
7503: LD_INT 0
7505: PPUSH
// result := mc_vehicles [ base ] ;
7506: LD_ADDR_VAR 0 3
7510: PUSH
7511: LD_EXP 11
7515: PUSH
7516: LD_VAR 0 1
7520: ARRAY
7521: ST_TO_ADDR
// if onlyCombat then
7522: LD_VAR 0 2
7526: IFFALSE 7698
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: LD_VAR 0 3
7537: PUSH
7538: LD_VAR 0 3
7542: PPUSH
7543: LD_INT 2
7545: PUSH
7546: LD_INT 34
7548: PUSH
7549: LD_INT 12
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 34
7558: PUSH
7559: LD_INT 51
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 34
7568: PUSH
7569: LD_INT 89
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 34
7578: PUSH
7579: LD_INT 32
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 34
7588: PUSH
7589: LD_INT 13
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: LD_INT 34
7598: PUSH
7599: LD_INT 52
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: LD_INT 34
7608: PUSH
7609: LD_INT 88
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 34
7618: PUSH
7619: LD_INT 14
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 34
7628: PUSH
7629: LD_INT 53
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 34
7638: PUSH
7639: LD_INT 98
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 34
7648: PUSH
7649: LD_INT 31
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 34
7658: PUSH
7659: LD_INT 48
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: LD_INT 34
7668: PUSH
7669: LD_INT 8
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: PPUSH
7692: CALL_OW 72
7696: DIFF
7697: ST_TO_ADDR
// end ;
7698: LD_VAR 0 3
7702: RET
// export function MC_Retreat ( base , unit ) ; var depot ; begin
7703: LD_INT 0
7705: PPUSH
7706: PPUSH
// if not base or not unit then
7707: LD_VAR 0 1
7711: NOT
7712: PUSH
7713: LD_VAR 0 2
7717: NOT
7718: OR
7719: IFFALSE 7723
// exit ;
7721: GO 7790
// depot := NearestUnitToUnit ( MC_GetDepot ( base ) , unit ) ;
7723: LD_ADDR_VAR 0 4
7727: PUSH
7728: LD_VAR 0 1
7732: PPUSH
7733: CALL 7446 0 1
7737: PPUSH
7738: LD_VAR 0 2
7742: PPUSH
7743: CALL_OW 74
7747: ST_TO_ADDR
// if depot then
7748: LD_VAR 0 4
7752: IFFALSE 7770
// ComStandNearbyBuilding ( unit , depot ) else
7754: LD_VAR 0 2
7758: PPUSH
7759: LD_VAR 0 4
7763: PPUSH
7764: CALL 9522 0 2
7768: GO 7790
// ComMoveToArea ( unit , mc_scan_area [ base ] ) ;
7770: LD_VAR 0 2
7774: PPUSH
7775: LD_EXP 29
7779: PUSH
7780: LD_VAR 0 1
7784: ARRAY
7785: PPUSH
7786: CALL_OW 113
// end ; end_of_file
7790: LD_VAR 0 3
7794: RET
// export mctm_collect_crates , mctm_build , mctm_ ; export function MCTM_InitTaskManager ( ) ; begin
7795: LD_INT 0
7797: PPUSH
// mctm_collect_crates := 1 ;
7798: LD_ADDR_EXP 36
7802: PUSH
7803: LD_INT 1
7805: ST_TO_ADDR
// mctm_build := 2 ;
7806: LD_ADDR_EXP 37
7810: PUSH
7811: LD_INT 2
7813: ST_TO_ADDR
// end ;
7814: LD_VAR 0 1
7818: RET
// export function MCTM_HasActiveTask ( base , task ) ; begin
7819: LD_INT 0
7821: PPUSH
// result := task in mc_task [ base ] ;
7822: LD_ADDR_VAR 0 3
7826: PUSH
7827: LD_VAR 0 2
7831: PUSH
7832: LD_EXP 8
7836: PUSH
7837: LD_VAR 0 1
7841: ARRAY
7842: IN
7843: ST_TO_ADDR
// end ;
7844: LD_VAR 0 3
7848: RET
// export function MCTM_SetActiveTask ( base , task ) ; begin
7849: LD_INT 0
7851: PPUSH
// mc_task := Replace ( mc_task , base , Replace ( mc_task [ base ] , mc_task [ base ] + 1 , task ) ) ;
7852: LD_ADDR_EXP 8
7856: PUSH
7857: LD_EXP 8
7861: PPUSH
7862: LD_VAR 0 1
7866: PPUSH
7867: LD_EXP 8
7871: PUSH
7872: LD_VAR 0 1
7876: ARRAY
7877: PPUSH
7878: LD_EXP 8
7882: PUSH
7883: LD_VAR 0 1
7887: ARRAY
7888: PUSH
7889: LD_INT 1
7891: PLUS
7892: PPUSH
7893: LD_VAR 0 2
7897: PPUSH
7898: CALL_OW 1
7902: PPUSH
7903: CALL_OW 1
7907: ST_TO_ADDR
// end ;
7908: LD_VAR 0 3
7912: RET
// export function MCTM_DeleteActiveTask ( base , task ) ; begin
7913: LD_INT 0
7915: PPUSH
// mc_task := Replace ( mc_task , base , mc_task [ base ] diff task ) ;
7916: LD_ADDR_EXP 8
7920: PUSH
7921: LD_EXP 8
7925: PPUSH
7926: LD_VAR 0 1
7930: PPUSH
7931: LD_EXP 8
7935: PUSH
7936: LD_VAR 0 1
7940: ARRAY
7941: PUSH
7942: LD_VAR 0 2
7946: DIFF
7947: PPUSH
7948: CALL_OW 1
7952: ST_TO_ADDR
// end ; end_of_file
7953: LD_VAR 0 3
7957: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
7958: LD_INT 0
7960: PPUSH
7961: PPUSH
// if exist_mode then
7962: LD_VAR 0 2
7966: IFFALSE 7991
// unit := CreateCharacter ( prefix & ident ) else
7968: LD_ADDR_VAR 0 5
7972: PUSH
7973: LD_VAR 0 3
7977: PUSH
7978: LD_VAR 0 1
7982: STR
7983: PPUSH
7984: CALL_OW 34
7988: ST_TO_ADDR
7989: GO 8006
// unit := NewCharacter ( ident ) ;
7991: LD_ADDR_VAR 0 5
7995: PUSH
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 25
8005: ST_TO_ADDR
// result := unit ;
8006: LD_ADDR_VAR 0 4
8010: PUSH
8011: LD_VAR 0 5
8015: ST_TO_ADDR
// end ;
8016: LD_VAR 0 4
8020: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8021: LD_INT 0
8023: PPUSH
8024: PPUSH
// if not side or not nation then
8025: LD_VAR 0 1
8029: NOT
8030: PUSH
8031: LD_VAR 0 2
8035: NOT
8036: OR
8037: IFFALSE 8041
// exit ;
8039: GO 8809
// case nation of nation_american :
8041: LD_VAR 0 2
8045: PUSH
8046: LD_INT 1
8048: DOUBLE
8049: EQUAL
8050: IFTRUE 8054
8052: GO 8268
8054: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8055: LD_ADDR_VAR 0 4
8059: PUSH
8060: LD_INT 35
8062: PUSH
8063: LD_INT 45
8065: PUSH
8066: LD_INT 46
8068: PUSH
8069: LD_INT 47
8071: PUSH
8072: LD_INT 82
8074: PUSH
8075: LD_INT 83
8077: PUSH
8078: LD_INT 84
8080: PUSH
8081: LD_INT 85
8083: PUSH
8084: LD_INT 86
8086: PUSH
8087: LD_INT 1
8089: PUSH
8090: LD_INT 2
8092: PUSH
8093: LD_INT 6
8095: PUSH
8096: LD_INT 15
8098: PUSH
8099: LD_INT 16
8101: PUSH
8102: LD_INT 7
8104: PUSH
8105: LD_INT 12
8107: PUSH
8108: LD_INT 13
8110: PUSH
8111: LD_INT 10
8113: PUSH
8114: LD_INT 14
8116: PUSH
8117: LD_INT 20
8119: PUSH
8120: LD_INT 21
8122: PUSH
8123: LD_INT 22
8125: PUSH
8126: LD_INT 25
8128: PUSH
8129: LD_INT 32
8131: PUSH
8132: LD_INT 27
8134: PUSH
8135: LD_INT 36
8137: PUSH
8138: LD_INT 69
8140: PUSH
8141: LD_INT 39
8143: PUSH
8144: LD_INT 34
8146: PUSH
8147: LD_INT 40
8149: PUSH
8150: LD_INT 48
8152: PUSH
8153: LD_INT 49
8155: PUSH
8156: LD_INT 50
8158: PUSH
8159: LD_INT 51
8161: PUSH
8162: LD_INT 52
8164: PUSH
8165: LD_INT 53
8167: PUSH
8168: LD_INT 54
8170: PUSH
8171: LD_INT 55
8173: PUSH
8174: LD_INT 56
8176: PUSH
8177: LD_INT 57
8179: PUSH
8180: LD_INT 58
8182: PUSH
8183: LD_INT 59
8185: PUSH
8186: LD_INT 60
8188: PUSH
8189: LD_INT 61
8191: PUSH
8192: LD_INT 62
8194: PUSH
8195: LD_INT 80
8197: PUSH
8198: LD_INT 82
8200: PUSH
8201: LD_INT 83
8203: PUSH
8204: LD_INT 84
8206: PUSH
8207: LD_INT 85
8209: PUSH
8210: LD_INT 86
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: ST_TO_ADDR
8266: GO 8733
8268: LD_INT 2
8270: DOUBLE
8271: EQUAL
8272: IFTRUE 8276
8274: GO 8502
8276: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8277: LD_ADDR_VAR 0 4
8281: PUSH
8282: LD_INT 35
8284: PUSH
8285: LD_INT 45
8287: PUSH
8288: LD_INT 46
8290: PUSH
8291: LD_INT 47
8293: PUSH
8294: LD_INT 82
8296: PUSH
8297: LD_INT 83
8299: PUSH
8300: LD_INT 84
8302: PUSH
8303: LD_INT 85
8305: PUSH
8306: LD_INT 87
8308: PUSH
8309: LD_INT 70
8311: PUSH
8312: LD_INT 1
8314: PUSH
8315: LD_INT 11
8317: PUSH
8318: LD_INT 3
8320: PUSH
8321: LD_INT 4
8323: PUSH
8324: LD_INT 5
8326: PUSH
8327: LD_INT 6
8329: PUSH
8330: LD_INT 15
8332: PUSH
8333: LD_INT 18
8335: PUSH
8336: LD_INT 7
8338: PUSH
8339: LD_INT 17
8341: PUSH
8342: LD_INT 8
8344: PUSH
8345: LD_INT 20
8347: PUSH
8348: LD_INT 21
8350: PUSH
8351: LD_INT 22
8353: PUSH
8354: LD_INT 72
8356: PUSH
8357: LD_INT 26
8359: PUSH
8360: LD_INT 69
8362: PUSH
8363: LD_INT 39
8365: PUSH
8366: LD_INT 40
8368: PUSH
8369: LD_INT 41
8371: PUSH
8372: LD_INT 42
8374: PUSH
8375: LD_INT 43
8377: PUSH
8378: LD_INT 48
8380: PUSH
8381: LD_INT 49
8383: PUSH
8384: LD_INT 50
8386: PUSH
8387: LD_INT 51
8389: PUSH
8390: LD_INT 52
8392: PUSH
8393: LD_INT 53
8395: PUSH
8396: LD_INT 54
8398: PUSH
8399: LD_INT 55
8401: PUSH
8402: LD_INT 56
8404: PUSH
8405: LD_INT 60
8407: PUSH
8408: LD_INT 61
8410: PUSH
8411: LD_INT 62
8413: PUSH
8414: LD_INT 66
8416: PUSH
8417: LD_INT 67
8419: PUSH
8420: LD_INT 68
8422: PUSH
8423: LD_INT 81
8425: PUSH
8426: LD_INT 82
8428: PUSH
8429: LD_INT 83
8431: PUSH
8432: LD_INT 84
8434: PUSH
8435: LD_INT 85
8437: PUSH
8438: LD_INT 87
8440: PUSH
8441: LD_INT 88
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: ST_TO_ADDR
8500: GO 8733
8502: LD_INT 3
8504: DOUBLE
8505: EQUAL
8506: IFTRUE 8510
8508: GO 8732
8510: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8511: LD_ADDR_VAR 0 4
8515: PUSH
8516: LD_INT 46
8518: PUSH
8519: LD_INT 47
8521: PUSH
8522: LD_INT 1
8524: PUSH
8525: LD_INT 2
8527: PUSH
8528: LD_INT 82
8530: PUSH
8531: LD_INT 83
8533: PUSH
8534: LD_INT 84
8536: PUSH
8537: LD_INT 85
8539: PUSH
8540: LD_INT 86
8542: PUSH
8543: LD_INT 11
8545: PUSH
8546: LD_INT 9
8548: PUSH
8549: LD_INT 20
8551: PUSH
8552: LD_INT 19
8554: PUSH
8555: LD_INT 21
8557: PUSH
8558: LD_INT 24
8560: PUSH
8561: LD_INT 22
8563: PUSH
8564: LD_INT 25
8566: PUSH
8567: LD_INT 28
8569: PUSH
8570: LD_INT 29
8572: PUSH
8573: LD_INT 30
8575: PUSH
8576: LD_INT 31
8578: PUSH
8579: LD_INT 37
8581: PUSH
8582: LD_INT 38
8584: PUSH
8585: LD_INT 32
8587: PUSH
8588: LD_INT 27
8590: PUSH
8591: LD_INT 33
8593: PUSH
8594: LD_INT 69
8596: PUSH
8597: LD_INT 39
8599: PUSH
8600: LD_INT 34
8602: PUSH
8603: LD_INT 40
8605: PUSH
8606: LD_INT 71
8608: PUSH
8609: LD_INT 23
8611: PUSH
8612: LD_INT 44
8614: PUSH
8615: LD_INT 48
8617: PUSH
8618: LD_INT 49
8620: PUSH
8621: LD_INT 50
8623: PUSH
8624: LD_INT 51
8626: PUSH
8627: LD_INT 52
8629: PUSH
8630: LD_INT 53
8632: PUSH
8633: LD_INT 54
8635: PUSH
8636: LD_INT 55
8638: PUSH
8639: LD_INT 56
8641: PUSH
8642: LD_INT 57
8644: PUSH
8645: LD_INT 58
8647: PUSH
8648: LD_INT 59
8650: PUSH
8651: LD_INT 63
8653: PUSH
8654: LD_INT 64
8656: PUSH
8657: LD_INT 65
8659: PUSH
8660: LD_INT 82
8662: PUSH
8663: LD_INT 83
8665: PUSH
8666: LD_INT 84
8668: PUSH
8669: LD_INT 85
8671: PUSH
8672: LD_INT 86
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: ST_TO_ADDR
8730: GO 8733
8732: POP
// if state > - 1 and state < 3 then
8733: LD_VAR 0 3
8737: PUSH
8738: LD_INT 1
8740: NEG
8741: GREATER
8742: PUSH
8743: LD_VAR 0 3
8747: PUSH
8748: LD_INT 3
8750: LESS
8751: AND
8752: IFFALSE 8809
// for i in result do
8754: LD_ADDR_VAR 0 5
8758: PUSH
8759: LD_VAR 0 4
8763: PUSH
8764: FOR_IN
8765: IFFALSE 8807
// if GetTech ( i , side ) <> state then
8767: LD_VAR 0 5
8771: PPUSH
8772: LD_VAR 0 1
8776: PPUSH
8777: CALL_OW 321
8781: PUSH
8782: LD_VAR 0 3
8786: NONEQUAL
8787: IFFALSE 8805
// result := result diff i ;
8789: LD_ADDR_VAR 0 4
8793: PUSH
8794: LD_VAR 0 4
8798: PUSH
8799: LD_VAR 0 5
8803: DIFF
8804: ST_TO_ADDR
8805: GO 8764
8807: POP
8808: POP
// end ;
8809: LD_VAR 0 4
8813: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8814: LD_INT 0
8816: PPUSH
8817: PPUSH
8818: PPUSH
// result := true ;
8819: LD_ADDR_VAR 0 3
8823: PUSH
8824: LD_INT 1
8826: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8827: LD_ADDR_VAR 0 5
8831: PUSH
8832: LD_VAR 0 2
8836: PPUSH
8837: CALL_OW 480
8841: ST_TO_ADDR
// if not tmp then
8842: LD_VAR 0 5
8846: NOT
8847: IFFALSE 8851
// exit ;
8849: GO 8900
// for i in tmp do
8851: LD_ADDR_VAR 0 4
8855: PUSH
8856: LD_VAR 0 5
8860: PUSH
8861: FOR_IN
8862: IFFALSE 8898
// if GetTech ( i , side ) <> state_researched then
8864: LD_VAR 0 4
8868: PPUSH
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 321
8878: PUSH
8879: LD_INT 2
8881: NONEQUAL
8882: IFFALSE 8896
// begin result := false ;
8884: LD_ADDR_VAR 0 3
8888: PUSH
8889: LD_INT 0
8891: ST_TO_ADDR
// exit ;
8892: POP
8893: POP
8894: GO 8900
// end ;
8896: GO 8861
8898: POP
8899: POP
// end ;
8900: LD_VAR 0 3
8904: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
8905: LD_INT 0
8907: PPUSH
8908: PPUSH
8909: PPUSH
8910: PPUSH
8911: PPUSH
8912: PPUSH
8913: PPUSH
8914: PPUSH
8915: PPUSH
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
8920: LD_VAR 0 1
8924: NOT
8925: PUSH
8926: LD_VAR 0 1
8930: PPUSH
8931: CALL_OW 257
8935: PUSH
8936: LD_INT 9
8938: NONEQUAL
8939: OR
8940: IFFALSE 8944
// exit ;
8942: GO 9517
// side := GetSide ( unit ) ;
8944: LD_ADDR_VAR 0 9
8948: PUSH
8949: LD_VAR 0 1
8953: PPUSH
8954: CALL_OW 255
8958: ST_TO_ADDR
// tech_space := tech_spacanom ;
8959: LD_ADDR_VAR 0 12
8963: PUSH
8964: LD_INT 29
8966: ST_TO_ADDR
// tech_time := tech_taurad ;
8967: LD_ADDR_VAR 0 13
8971: PUSH
8972: LD_INT 28
8974: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
8975: LD_ADDR_VAR 0 11
8979: PUSH
8980: LD_VAR 0 1
8984: PPUSH
8985: CALL_OW 310
8989: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
8990: LD_VAR 0 11
8994: PPUSH
8995: CALL_OW 247
8999: PUSH
9000: LD_INT 2
9002: EQUAL
9003: IFFALSE 9007
// exit ;
9005: GO 9517
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9007: LD_ADDR_VAR 0 8
9011: PUSH
9012: LD_INT 81
9014: PUSH
9015: LD_VAR 0 9
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PUSH
9024: LD_INT 3
9026: PUSH
9027: LD_INT 21
9029: PUSH
9030: LD_INT 3
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PPUSH
9045: CALL_OW 69
9049: ST_TO_ADDR
// if not tmp then
9050: LD_VAR 0 8
9054: NOT
9055: IFFALSE 9059
// exit ;
9057: GO 9517
// if in_unit then
9059: LD_VAR 0 11
9063: IFFALSE 9087
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9065: LD_ADDR_VAR 0 10
9069: PUSH
9070: LD_VAR 0 8
9074: PPUSH
9075: LD_VAR 0 11
9079: PPUSH
9080: CALL_OW 74
9084: ST_TO_ADDR
9085: GO 9107
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9087: LD_ADDR_VAR 0 10
9091: PUSH
9092: LD_VAR 0 8
9096: PPUSH
9097: LD_VAR 0 1
9101: PPUSH
9102: CALL_OW 74
9106: ST_TO_ADDR
// if not enemy then
9107: LD_VAR 0 10
9111: NOT
9112: IFFALSE 9116
// exit ;
9114: GO 9517
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9116: LD_VAR 0 11
9120: PUSH
9121: LD_VAR 0 11
9125: PPUSH
9126: LD_VAR 0 10
9130: PPUSH
9131: CALL_OW 296
9135: PUSH
9136: LD_INT 13
9138: GREATER
9139: AND
9140: PUSH
9141: LD_VAR 0 1
9145: PPUSH
9146: LD_VAR 0 10
9150: PPUSH
9151: CALL_OW 296
9155: PUSH
9156: LD_INT 12
9158: GREATER
9159: OR
9160: IFFALSE 9164
// exit ;
9162: GO 9517
// missile := [ 1 ] ;
9164: LD_ADDR_VAR 0 14
9168: PUSH
9169: LD_INT 1
9171: PUSH
9172: EMPTY
9173: LIST
9174: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9175: LD_VAR 0 9
9179: PPUSH
9180: LD_VAR 0 12
9184: PPUSH
9185: CALL_OW 325
9189: IFFALSE 9218
// missile := Replace ( missile , missile + 1 , 2 ) ;
9191: LD_ADDR_VAR 0 14
9195: PUSH
9196: LD_VAR 0 14
9200: PPUSH
9201: LD_VAR 0 14
9205: PUSH
9206: LD_INT 1
9208: PLUS
9209: PPUSH
9210: LD_INT 2
9212: PPUSH
9213: CALL_OW 1
9217: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9218: LD_VAR 0 9
9222: PPUSH
9223: LD_VAR 0 13
9227: PPUSH
9228: CALL_OW 325
9232: PUSH
9233: LD_VAR 0 10
9237: PPUSH
9238: CALL_OW 255
9242: PPUSH
9243: LD_VAR 0 13
9247: PPUSH
9248: CALL_OW 325
9252: NOT
9253: AND
9254: IFFALSE 9283
// missile := Replace ( missile , missile + 1 , 3 ) ;
9256: LD_ADDR_VAR 0 14
9260: PUSH
9261: LD_VAR 0 14
9265: PPUSH
9266: LD_VAR 0 14
9270: PUSH
9271: LD_INT 1
9273: PLUS
9274: PPUSH
9275: LD_INT 3
9277: PPUSH
9278: CALL_OW 1
9282: ST_TO_ADDR
// if missile < 2 then
9283: LD_VAR 0 14
9287: PUSH
9288: LD_INT 2
9290: LESS
9291: IFFALSE 9295
// exit ;
9293: GO 9517
// x := GetX ( enemy ) ;
9295: LD_ADDR_VAR 0 4
9299: PUSH
9300: LD_VAR 0 10
9304: PPUSH
9305: CALL_OW 250
9309: ST_TO_ADDR
// y := GetY ( enemy ) ;
9310: LD_ADDR_VAR 0 5
9314: PUSH
9315: LD_VAR 0 10
9319: PPUSH
9320: CALL_OW 251
9324: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9325: LD_ADDR_VAR 0 6
9329: PUSH
9330: LD_VAR 0 4
9334: PUSH
9335: LD_INT 1
9337: NEG
9338: PPUSH
9339: LD_INT 1
9341: PPUSH
9342: CALL_OW 12
9346: PLUS
9347: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9348: LD_ADDR_VAR 0 7
9352: PUSH
9353: LD_VAR 0 5
9357: PUSH
9358: LD_INT 1
9360: NEG
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: CALL_OW 12
9369: PLUS
9370: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9371: LD_VAR 0 6
9375: PPUSH
9376: LD_VAR 0 7
9380: PPUSH
9381: CALL_OW 488
9385: NOT
9386: IFFALSE 9408
// begin _x := x ;
9388: LD_ADDR_VAR 0 6
9392: PUSH
9393: LD_VAR 0 4
9397: ST_TO_ADDR
// _y := y ;
9398: LD_ADDR_VAR 0 7
9402: PUSH
9403: LD_VAR 0 5
9407: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9408: LD_ADDR_VAR 0 3
9412: PUSH
9413: LD_INT 1
9415: PPUSH
9416: LD_VAR 0 14
9420: PPUSH
9421: CALL_OW 12
9425: ST_TO_ADDR
// case i of 1 :
9426: LD_VAR 0 3
9430: PUSH
9431: LD_INT 1
9433: DOUBLE
9434: EQUAL
9435: IFTRUE 9439
9437: GO 9456
9439: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9440: LD_VAR 0 1
9444: PPUSH
9445: LD_VAR 0 10
9449: PPUSH
9450: CALL_OW 115
9454: GO 9517
9456: LD_INT 2
9458: DOUBLE
9459: EQUAL
9460: IFTRUE 9464
9462: GO 9486
9464: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9465: LD_VAR 0 1
9469: PPUSH
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 7
9479: PPUSH
9480: CALL_OW 153
9484: GO 9517
9486: LD_INT 3
9488: DOUBLE
9489: EQUAL
9490: IFTRUE 9494
9492: GO 9516
9494: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9495: LD_VAR 0 1
9499: PPUSH
9500: LD_VAR 0 6
9504: PPUSH
9505: LD_VAR 0 7
9509: PPUSH
9510: CALL_OW 154
9514: GO 9517
9516: POP
// end ;
9517: LD_VAR 0 2
9521: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9522: LD_INT 0
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
// if not unit or not building then
9530: LD_VAR 0 1
9534: NOT
9535: PUSH
9536: LD_VAR 0 2
9540: NOT
9541: OR
9542: IFFALSE 9546
// exit ;
9544: GO 9704
// x := GetX ( building ) ;
9546: LD_ADDR_VAR 0 5
9550: PUSH
9551: LD_VAR 0 2
9555: PPUSH
9556: CALL_OW 250
9560: ST_TO_ADDR
// y := GetY ( building ) ;
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: LD_VAR 0 2
9570: PPUSH
9571: CALL_OW 251
9575: ST_TO_ADDR
// for i = 0 to 5 do
9576: LD_ADDR_VAR 0 4
9580: PUSH
9581: DOUBLE
9582: LD_INT 0
9584: DEC
9585: ST_TO_ADDR
9586: LD_INT 5
9588: PUSH
9589: FOR_TO
9590: IFFALSE 9702
// begin _x := ShiftX ( x , i , 3 ) ;
9592: LD_ADDR_VAR 0 7
9596: PUSH
9597: LD_VAR 0 5
9601: PPUSH
9602: LD_VAR 0 4
9606: PPUSH
9607: LD_INT 3
9609: PPUSH
9610: CALL_OW 272
9614: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9615: LD_ADDR_VAR 0 8
9619: PUSH
9620: LD_VAR 0 6
9624: PPUSH
9625: LD_VAR 0 4
9629: PPUSH
9630: LD_INT 3
9632: PPUSH
9633: CALL_OW 273
9637: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9638: LD_VAR 0 7
9642: PPUSH
9643: LD_VAR 0 8
9647: PPUSH
9648: CALL_OW 488
9652: NOT
9653: IFFALSE 9657
// continue ;
9655: GO 9589
// if HexInfo ( _x , _y ) = 0 then
9657: LD_VAR 0 7
9661: PPUSH
9662: LD_VAR 0 8
9666: PPUSH
9667: CALL_OW 428
9671: PUSH
9672: LD_INT 0
9674: EQUAL
9675: IFFALSE 9700
// begin ComMoveXY ( unit , _x , _y ) ;
9677: LD_VAR 0 1
9681: PPUSH
9682: LD_VAR 0 7
9686: PPUSH
9687: LD_VAR 0 8
9691: PPUSH
9692: CALL_OW 111
// exit ;
9696: POP
9697: POP
9698: GO 9704
// end ; end ;
9700: GO 9589
9702: POP
9703: POP
// end ;
9704: LD_VAR 0 3
9708: RET
// export function ScanBase ( side , base_area ) ; begin
9709: LD_INT 0
9711: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9712: LD_ADDR_VAR 0 3
9716: PUSH
9717: LD_VAR 0 2
9721: PPUSH
9722: LD_INT 81
9724: PUSH
9725: LD_VAR 0 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PPUSH
9734: CALL_OW 70
9738: ST_TO_ADDR
// end ;
9739: LD_VAR 0 3
9743: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9744: LD_INT 0
9746: PPUSH
9747: PPUSH
9748: PPUSH
9749: PPUSH
// result := false ;
9750: LD_ADDR_VAR 0 2
9754: PUSH
9755: LD_INT 0
9757: ST_TO_ADDR
// side := GetSide ( unit ) ;
9758: LD_ADDR_VAR 0 3
9762: PUSH
9763: LD_VAR 0 1
9767: PPUSH
9768: CALL_OW 255
9772: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9773: LD_ADDR_VAR 0 4
9777: PUSH
9778: LD_VAR 0 1
9782: PPUSH
9783: CALL_OW 248
9787: ST_TO_ADDR
// case nat of 1 :
9788: LD_VAR 0 4
9792: PUSH
9793: LD_INT 1
9795: DOUBLE
9796: EQUAL
9797: IFTRUE 9801
9799: GO 9812
9801: POP
// tech := tech_lassight ; 2 :
9802: LD_ADDR_VAR 0 5
9806: PUSH
9807: LD_INT 12
9809: ST_TO_ADDR
9810: GO 9851
9812: LD_INT 2
9814: DOUBLE
9815: EQUAL
9816: IFTRUE 9820
9818: GO 9831
9820: POP
// tech := tech_mortar ; 3 :
9821: LD_ADDR_VAR 0 5
9825: PUSH
9826: LD_INT 41
9828: ST_TO_ADDR
9829: GO 9851
9831: LD_INT 3
9833: DOUBLE
9834: EQUAL
9835: IFTRUE 9839
9837: GO 9850
9839: POP
// tech := tech_bazooka ; end ;
9840: LD_ADDR_VAR 0 5
9844: PUSH
9845: LD_INT 44
9847: ST_TO_ADDR
9848: GO 9851
9850: POP
// if Researched ( side , tech ) then
9851: LD_VAR 0 3
9855: PPUSH
9856: LD_VAR 0 5
9860: PPUSH
9861: CALL_OW 325
9865: IFFALSE 9892
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9867: LD_ADDR_VAR 0 2
9871: PUSH
9872: LD_INT 5
9874: PUSH
9875: LD_INT 8
9877: PUSH
9878: LD_INT 9
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: PUSH
9886: LD_VAR 0 4
9890: ARRAY
9891: ST_TO_ADDR
// end ;
9892: LD_VAR 0 2
9896: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
9897: LD_INT 0
9899: PPUSH
9900: PPUSH
9901: PPUSH
// if not mines then
9902: LD_VAR 0 2
9906: NOT
9907: IFFALSE 9911
// exit ;
9909: GO 10055
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9911: LD_ADDR_VAR 0 5
9915: PUSH
9916: LD_INT 81
9918: PUSH
9919: LD_VAR 0 1
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 3
9930: PUSH
9931: LD_INT 21
9933: PUSH
9934: LD_INT 3
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PPUSH
9949: CALL_OW 69
9953: ST_TO_ADDR
// for i in mines do
9954: LD_ADDR_VAR 0 4
9958: PUSH
9959: LD_VAR 0 2
9963: PUSH
9964: FOR_IN
9965: IFFALSE 10053
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
9967: LD_VAR 0 4
9971: PUSH
9972: LD_INT 1
9974: ARRAY
9975: PPUSH
9976: LD_VAR 0 4
9980: PUSH
9981: LD_INT 2
9983: ARRAY
9984: PPUSH
9985: CALL_OW 458
9989: NOT
9990: IFFALSE 9994
// continue ;
9992: GO 9964
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
9994: LD_VAR 0 4
9998: PUSH
9999: LD_INT 1
10001: ARRAY
10002: PPUSH
10003: LD_VAR 0 4
10007: PUSH
10008: LD_INT 2
10010: ARRAY
10011: PPUSH
10012: CALL_OW 428
10016: PUSH
10017: LD_VAR 0 5
10021: IN
10022: IFFALSE 10051
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10024: LD_VAR 0 4
10028: PUSH
10029: LD_INT 1
10031: ARRAY
10032: PPUSH
10033: LD_VAR 0 4
10037: PUSH
10038: LD_INT 2
10040: ARRAY
10041: PPUSH
10042: LD_VAR 0 1
10046: PPUSH
10047: CALL_OW 456
// end ;
10051: GO 9964
10053: POP
10054: POP
// end ;
10055: LD_VAR 0 3
10059: RET
// export function Count ( array ) ; begin
10060: LD_INT 0
10062: PPUSH
// result := array + 0 ;
10063: LD_ADDR_VAR 0 2
10067: PUSH
10068: LD_VAR 0 1
10072: PUSH
10073: LD_INT 0
10075: PLUS
10076: ST_TO_ADDR
// end ;
10077: LD_VAR 0 2
10081: RET
// export function IsEmpty ( building ) ; begin
10082: LD_INT 0
10084: PPUSH
// if not building then
10085: LD_VAR 0 1
10089: NOT
10090: IFFALSE 10094
// exit ;
10092: GO 10137
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: LD_VAR 0 1
10103: PUSH
10104: LD_INT 22
10106: PUSH
10107: LD_VAR 0 1
10111: PPUSH
10112: CALL_OW 255
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PUSH
10121: LD_INT 58
10123: PUSH
10124: EMPTY
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PPUSH
10131: CALL_OW 69
10135: IN
10136: ST_TO_ADDR
// end ;
10137: LD_VAR 0 2
10141: RET
// export function IsNotFull ( building ) ; var places ; begin
10142: LD_INT 0
10144: PPUSH
10145: PPUSH
// if not building then
10146: LD_VAR 0 1
10150: NOT
10151: IFFALSE 10155
// exit ;
10153: GO 10183
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
10155: LD_ADDR_VAR 0 2
10159: PUSH
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_INT 3
10167: PUSH
10168: LD_INT 62
10170: PUSH
10171: EMPTY
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PPUSH
10178: CALL_OW 72
10182: ST_TO_ADDR
// end ;
10183: LD_VAR 0 2
10187: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10188: LD_INT 0
10190: PPUSH
10191: PPUSH
10192: PPUSH
10193: PPUSH
// tmp := [ ] ;
10194: LD_ADDR_VAR 0 3
10198: PUSH
10199: EMPTY
10200: ST_TO_ADDR
// list := [ ] ;
10201: LD_ADDR_VAR 0 5
10205: PUSH
10206: EMPTY
10207: ST_TO_ADDR
// for i = 16 to 25 do
10208: LD_ADDR_VAR 0 4
10212: PUSH
10213: DOUBLE
10214: LD_INT 16
10216: DEC
10217: ST_TO_ADDR
10218: LD_INT 25
10220: PUSH
10221: FOR_TO
10222: IFFALSE 10295
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10224: LD_ADDR_VAR 0 3
10228: PUSH
10229: LD_VAR 0 3
10233: PUSH
10234: LD_INT 22
10236: PUSH
10237: LD_VAR 0 1
10241: PPUSH
10242: CALL_OW 255
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 91
10253: PUSH
10254: LD_VAR 0 1
10258: PUSH
10259: LD_INT 6
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 30
10269: PUSH
10270: LD_VAR 0 4
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: LIST
10283: PUSH
10284: EMPTY
10285: LIST
10286: PPUSH
10287: CALL_OW 69
10291: ADD
10292: ST_TO_ADDR
10293: GO 10221
10295: POP
10296: POP
// for i = 1 to tmp do
10297: LD_ADDR_VAR 0 4
10301: PUSH
10302: DOUBLE
10303: LD_INT 1
10305: DEC
10306: ST_TO_ADDR
10307: LD_VAR 0 3
10311: PUSH
10312: FOR_TO
10313: IFFALSE 10401
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10315: LD_ADDR_VAR 0 5
10319: PUSH
10320: LD_VAR 0 5
10324: PUSH
10325: LD_VAR 0 3
10329: PUSH
10330: LD_VAR 0 4
10334: ARRAY
10335: PPUSH
10336: CALL_OW 266
10340: PUSH
10341: LD_VAR 0 3
10345: PUSH
10346: LD_VAR 0 4
10350: ARRAY
10351: PPUSH
10352: CALL_OW 250
10356: PUSH
10357: LD_VAR 0 3
10361: PUSH
10362: LD_VAR 0 4
10366: ARRAY
10367: PPUSH
10368: CALL_OW 251
10372: PUSH
10373: LD_VAR 0 3
10377: PUSH
10378: LD_VAR 0 4
10382: ARRAY
10383: PPUSH
10384: CALL_OW 254
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: PUSH
10395: EMPTY
10396: LIST
10397: ADD
10398: ST_TO_ADDR
10399: GO 10312
10401: POP
10402: POP
// result := list ;
10403: LD_ADDR_VAR 0 2
10407: PUSH
10408: LD_VAR 0 5
10412: ST_TO_ADDR
// end ;
10413: LD_VAR 0 2
10417: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10418: LD_INT 0
10420: PPUSH
10421: PPUSH
10422: PPUSH
10423: PPUSH
10424: PPUSH
10425: PPUSH
10426: PPUSH
// if not factory then
10427: LD_VAR 0 1
10431: NOT
10432: IFFALSE 10436
// exit ;
10434: GO 11029
// if control = control_apeman then
10436: LD_VAR 0 4
10440: PUSH
10441: LD_INT 5
10443: EQUAL
10444: IFFALSE 10553
// begin tmp := UnitsInside ( factory ) ;
10446: LD_ADDR_VAR 0 8
10450: PUSH
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 313
10460: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10461: LD_VAR 0 8
10465: PPUSH
10466: LD_INT 25
10468: PUSH
10469: LD_INT 12
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 72
10480: NOT
10481: IFFALSE 10491
// control := control_manual ;
10483: LD_ADDR_VAR 0 4
10487: PUSH
10488: LD_INT 1
10490: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10491: LD_ADDR_VAR 0 8
10495: PUSH
10496: LD_VAR 0 1
10500: PPUSH
10501: CALL 10188 0 1
10505: ST_TO_ADDR
// if tmp then
10506: LD_VAR 0 8
10510: IFFALSE 10553
// begin for i in tmp do
10512: LD_ADDR_VAR 0 7
10516: PUSH
10517: LD_VAR 0 8
10521: PUSH
10522: FOR_IN
10523: IFFALSE 10551
// if i [ 1 ] = b_ext_radio then
10525: LD_VAR 0 7
10529: PUSH
10530: LD_INT 1
10532: ARRAY
10533: PUSH
10534: LD_INT 22
10536: EQUAL
10537: IFFALSE 10549
// begin control := control_remote ;
10539: LD_ADDR_VAR 0 4
10543: PUSH
10544: LD_INT 2
10546: ST_TO_ADDR
// break ;
10547: GO 10551
// end ;
10549: GO 10522
10551: POP
10552: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10553: LD_VAR 0 1
10557: PPUSH
10558: LD_VAR 0 2
10562: PPUSH
10563: LD_VAR 0 3
10567: PPUSH
10568: LD_VAR 0 4
10572: PPUSH
10573: LD_VAR 0 5
10577: PPUSH
10578: CALL_OW 448
10582: IFFALSE 10617
// begin result := [ chassis , engine , control , weapon ] ;
10584: LD_ADDR_VAR 0 6
10588: PUSH
10589: LD_VAR 0 2
10593: PUSH
10594: LD_VAR 0 3
10598: PUSH
10599: LD_VAR 0 4
10603: PUSH
10604: LD_VAR 0 5
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: ST_TO_ADDR
// exit ;
10615: GO 11029
// end ; _chassis := AvailableChassisList ( factory ) ;
10617: LD_ADDR_VAR 0 9
10621: PUSH
10622: LD_VAR 0 1
10626: PPUSH
10627: CALL_OW 475
10631: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10632: LD_ADDR_VAR 0 11
10636: PUSH
10637: LD_VAR 0 1
10641: PPUSH
10642: CALL_OW 476
10646: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10647: LD_ADDR_VAR 0 12
10651: PUSH
10652: LD_VAR 0 1
10656: PPUSH
10657: CALL_OW 477
10661: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10662: LD_ADDR_VAR 0 10
10666: PUSH
10667: LD_VAR 0 1
10671: PPUSH
10672: CALL_OW 478
10676: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10677: LD_VAR 0 9
10681: NOT
10682: PUSH
10683: LD_VAR 0 11
10687: NOT
10688: OR
10689: PUSH
10690: LD_VAR 0 12
10694: NOT
10695: OR
10696: PUSH
10697: LD_VAR 0 10
10701: NOT
10702: OR
10703: IFFALSE 10738
// begin result := [ chassis , engine , control , weapon ] ;
10705: LD_ADDR_VAR 0 6
10709: PUSH
10710: LD_VAR 0 2
10714: PUSH
10715: LD_VAR 0 3
10719: PUSH
10720: LD_VAR 0 4
10724: PUSH
10725: LD_VAR 0 5
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: ST_TO_ADDR
// exit ;
10736: GO 11029
// end ; if not chassis in _chassis then
10738: LD_VAR 0 2
10742: PUSH
10743: LD_VAR 0 9
10747: IN
10748: NOT
10749: IFFALSE 10775
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10751: LD_ADDR_VAR 0 2
10755: PUSH
10756: LD_VAR 0 9
10760: PUSH
10761: LD_INT 1
10763: PPUSH
10764: LD_VAR 0 9
10768: PPUSH
10769: CALL_OW 12
10773: ARRAY
10774: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10775: LD_VAR 0 2
10779: PPUSH
10780: LD_VAR 0 3
10784: PPUSH
10785: CALL 11034 0 2
10789: NOT
10790: IFFALSE 10849
// repeat engine := _engine [ 1 ] ;
10792: LD_ADDR_VAR 0 3
10796: PUSH
10797: LD_VAR 0 11
10801: PUSH
10802: LD_INT 1
10804: ARRAY
10805: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10806: LD_ADDR_VAR 0 11
10810: PUSH
10811: LD_VAR 0 11
10815: PPUSH
10816: LD_INT 1
10818: PPUSH
10819: CALL_OW 3
10823: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10824: LD_VAR 0 2
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: CALL 11034 0 2
10838: PUSH
10839: LD_VAR 0 11
10843: PUSH
10844: EMPTY
10845: EQUAL
10846: OR
10847: IFFALSE 10792
// if not control in _control then
10849: LD_VAR 0 4
10853: PUSH
10854: LD_VAR 0 12
10858: IN
10859: NOT
10860: IFFALSE 10886
// control := _control [ rand ( 1 , _control ) ] ;
10862: LD_ADDR_VAR 0 4
10866: PUSH
10867: LD_VAR 0 12
10871: PUSH
10872: LD_INT 1
10874: PPUSH
10875: LD_VAR 0 12
10879: PPUSH
10880: CALL_OW 12
10884: ARRAY
10885: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
10886: LD_VAR 0 2
10890: PPUSH
10891: LD_VAR 0 5
10895: PPUSH
10896: CALL 11254 0 2
10900: NOT
10901: IFFALSE 10960
// repeat weapon := _weapon [ 1 ] ;
10903: LD_ADDR_VAR 0 5
10907: PUSH
10908: LD_VAR 0 10
10912: PUSH
10913: LD_INT 1
10915: ARRAY
10916: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
10917: LD_ADDR_VAR 0 10
10921: PUSH
10922: LD_VAR 0 10
10926: PPUSH
10927: LD_INT 1
10929: PPUSH
10930: CALL_OW 3
10934: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
10935: LD_VAR 0 2
10939: PPUSH
10940: LD_VAR 0 5
10944: PPUSH
10945: CALL 11254 0 2
10949: PUSH
10950: LD_VAR 0 10
10954: PUSH
10955: EMPTY
10956: EQUAL
10957: OR
10958: IFFALSE 10903
// result := [ ] ;
10960: LD_ADDR_VAR 0 6
10964: PUSH
10965: EMPTY
10966: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10967: LD_VAR 0 1
10971: PPUSH
10972: LD_VAR 0 2
10976: PPUSH
10977: LD_VAR 0 3
10981: PPUSH
10982: LD_VAR 0 4
10986: PPUSH
10987: LD_VAR 0 5
10991: PPUSH
10992: CALL_OW 448
10996: IFFALSE 11029
// result := [ chassis , engine , control , weapon ] ;
10998: LD_ADDR_VAR 0 6
11002: PUSH
11003: LD_VAR 0 2
11007: PUSH
11008: LD_VAR 0 3
11012: PUSH
11013: LD_VAR 0 4
11017: PUSH
11018: LD_VAR 0 5
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: ST_TO_ADDR
// end ;
11029: LD_VAR 0 6
11033: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11034: LD_INT 0
11036: PPUSH
// if not chassis or not engine then
11037: LD_VAR 0 1
11041: NOT
11042: PUSH
11043: LD_VAR 0 2
11047: NOT
11048: OR
11049: IFFALSE 11053
// exit ;
11051: GO 11249
// case engine of engine_solar :
11053: LD_VAR 0 2
11057: PUSH
11058: LD_INT 2
11060: DOUBLE
11061: EQUAL
11062: IFTRUE 11066
11064: GO 11104
11066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11067: LD_ADDR_VAR 0 3
11071: PUSH
11072: LD_INT 11
11074: PUSH
11075: LD_INT 12
11077: PUSH
11078: LD_INT 13
11080: PUSH
11081: LD_INT 14
11083: PUSH
11084: LD_INT 1
11086: PUSH
11087: LD_INT 2
11089: PUSH
11090: LD_INT 3
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: ST_TO_ADDR
11102: GO 11233
11104: LD_INT 1
11106: DOUBLE
11107: EQUAL
11108: IFTRUE 11112
11110: GO 11174
11112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11113: LD_ADDR_VAR 0 3
11117: PUSH
11118: LD_INT 11
11120: PUSH
11121: LD_INT 12
11123: PUSH
11124: LD_INT 13
11126: PUSH
11127: LD_INT 14
11129: PUSH
11130: LD_INT 1
11132: PUSH
11133: LD_INT 2
11135: PUSH
11136: LD_INT 3
11138: PUSH
11139: LD_INT 4
11141: PUSH
11142: LD_INT 5
11144: PUSH
11145: LD_INT 21
11147: PUSH
11148: LD_INT 23
11150: PUSH
11151: LD_INT 22
11153: PUSH
11154: LD_INT 24
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: ST_TO_ADDR
11172: GO 11233
11174: LD_INT 3
11176: DOUBLE
11177: EQUAL
11178: IFTRUE 11182
11180: GO 11232
11182: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11183: LD_ADDR_VAR 0 3
11187: PUSH
11188: LD_INT 13
11190: PUSH
11191: LD_INT 14
11193: PUSH
11194: LD_INT 2
11196: PUSH
11197: LD_INT 3
11199: PUSH
11200: LD_INT 4
11202: PUSH
11203: LD_INT 5
11205: PUSH
11206: LD_INT 21
11208: PUSH
11209: LD_INT 22
11211: PUSH
11212: LD_INT 23
11214: PUSH
11215: LD_INT 24
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: ST_TO_ADDR
11230: GO 11233
11232: POP
// result := ( chassis in result ) ;
11233: LD_ADDR_VAR 0 3
11237: PUSH
11238: LD_VAR 0 1
11242: PUSH
11243: LD_VAR 0 3
11247: IN
11248: ST_TO_ADDR
// end ;
11249: LD_VAR 0 3
11253: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11254: LD_INT 0
11256: PPUSH
// if not chassis or not weapon then
11257: LD_VAR 0 1
11261: NOT
11262: PUSH
11263: LD_VAR 0 2
11267: NOT
11268: OR
11269: IFFALSE 11273
// exit ;
11271: GO 12333
// case weapon of us_machine_gun :
11273: LD_VAR 0 2
11277: PUSH
11278: LD_INT 2
11280: DOUBLE
11281: EQUAL
11282: IFTRUE 11286
11284: GO 11316
11286: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11287: LD_ADDR_VAR 0 3
11291: PUSH
11292: LD_INT 1
11294: PUSH
11295: LD_INT 2
11297: PUSH
11298: LD_INT 3
11300: PUSH
11301: LD_INT 4
11303: PUSH
11304: LD_INT 5
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: ST_TO_ADDR
11314: GO 12317
11316: LD_INT 3
11318: DOUBLE
11319: EQUAL
11320: IFTRUE 11324
11322: GO 11354
11324: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11325: LD_ADDR_VAR 0 3
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: LD_INT 2
11335: PUSH
11336: LD_INT 3
11338: PUSH
11339: LD_INT 4
11341: PUSH
11342: LD_INT 5
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: ST_TO_ADDR
11352: GO 12317
11354: LD_INT 11
11356: DOUBLE
11357: EQUAL
11358: IFTRUE 11362
11360: GO 11392
11362: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11363: LD_ADDR_VAR 0 3
11367: PUSH
11368: LD_INT 1
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: LD_INT 3
11376: PUSH
11377: LD_INT 4
11379: PUSH
11380: LD_INT 5
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: ST_TO_ADDR
11390: GO 12317
11392: LD_INT 4
11394: DOUBLE
11395: EQUAL
11396: IFTRUE 11400
11398: GO 11426
11400: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11401: LD_ADDR_VAR 0 3
11405: PUSH
11406: LD_INT 2
11408: PUSH
11409: LD_INT 3
11411: PUSH
11412: LD_INT 4
11414: PUSH
11415: LD_INT 5
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: ST_TO_ADDR
11424: GO 12317
11426: LD_INT 5
11428: DOUBLE
11429: EQUAL
11430: IFTRUE 11434
11432: GO 11460
11434: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11435: LD_ADDR_VAR 0 3
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: LD_INT 3
11445: PUSH
11446: LD_INT 4
11448: PUSH
11449: LD_INT 5
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: ST_TO_ADDR
11458: GO 12317
11460: LD_INT 9
11462: DOUBLE
11463: EQUAL
11464: IFTRUE 11468
11466: GO 11494
11468: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11469: LD_ADDR_VAR 0 3
11473: PUSH
11474: LD_INT 2
11476: PUSH
11477: LD_INT 3
11479: PUSH
11480: LD_INT 4
11482: PUSH
11483: LD_INT 5
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: ST_TO_ADDR
11492: GO 12317
11494: LD_INT 7
11496: DOUBLE
11497: EQUAL
11498: IFTRUE 11502
11500: GO 11528
11502: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11503: LD_ADDR_VAR 0 3
11507: PUSH
11508: LD_INT 2
11510: PUSH
11511: LD_INT 3
11513: PUSH
11514: LD_INT 4
11516: PUSH
11517: LD_INT 5
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: ST_TO_ADDR
11526: GO 12317
11528: LD_INT 12
11530: DOUBLE
11531: EQUAL
11532: IFTRUE 11536
11534: GO 11562
11536: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11537: LD_ADDR_VAR 0 3
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: LD_INT 3
11547: PUSH
11548: LD_INT 4
11550: PUSH
11551: LD_INT 5
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: ST_TO_ADDR
11560: GO 12317
11562: LD_INT 13
11564: DOUBLE
11565: EQUAL
11566: IFTRUE 11570
11568: GO 11596
11570: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11571: LD_ADDR_VAR 0 3
11575: PUSH
11576: LD_INT 2
11578: PUSH
11579: LD_INT 3
11581: PUSH
11582: LD_INT 4
11584: PUSH
11585: LD_INT 5
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: ST_TO_ADDR
11594: GO 12317
11596: LD_INT 14
11598: DOUBLE
11599: EQUAL
11600: IFTRUE 11604
11602: GO 11622
11604: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11605: LD_ADDR_VAR 0 3
11609: PUSH
11610: LD_INT 4
11612: PUSH
11613: LD_INT 5
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: ST_TO_ADDR
11620: GO 12317
11622: LD_INT 6
11624: DOUBLE
11625: EQUAL
11626: IFTRUE 11630
11628: GO 11648
11630: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11631: LD_ADDR_VAR 0 3
11635: PUSH
11636: LD_INT 4
11638: PUSH
11639: LD_INT 5
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: ST_TO_ADDR
11646: GO 12317
11648: LD_INT 10
11650: DOUBLE
11651: EQUAL
11652: IFTRUE 11656
11654: GO 11674
11656: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11657: LD_ADDR_VAR 0 3
11661: PUSH
11662: LD_INT 4
11664: PUSH
11665: LD_INT 5
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: ST_TO_ADDR
11672: GO 12317
11674: LD_INT 22
11676: DOUBLE
11677: EQUAL
11678: IFTRUE 11682
11680: GO 11708
11682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11683: LD_ADDR_VAR 0 3
11687: PUSH
11688: LD_INT 11
11690: PUSH
11691: LD_INT 12
11693: PUSH
11694: LD_INT 13
11696: PUSH
11697: LD_INT 14
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: ST_TO_ADDR
11706: GO 12317
11708: LD_INT 23
11710: DOUBLE
11711: EQUAL
11712: IFTRUE 11716
11714: GO 11742
11716: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11717: LD_ADDR_VAR 0 3
11721: PUSH
11722: LD_INT 11
11724: PUSH
11725: LD_INT 12
11727: PUSH
11728: LD_INT 13
11730: PUSH
11731: LD_INT 14
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: ST_TO_ADDR
11740: GO 12317
11742: LD_INT 24
11744: DOUBLE
11745: EQUAL
11746: IFTRUE 11750
11748: GO 11776
11750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11751: LD_ADDR_VAR 0 3
11755: PUSH
11756: LD_INT 11
11758: PUSH
11759: LD_INT 12
11761: PUSH
11762: LD_INT 13
11764: PUSH
11765: LD_INT 14
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: ST_TO_ADDR
11774: GO 12317
11776: LD_INT 30
11778: DOUBLE
11779: EQUAL
11780: IFTRUE 11784
11782: GO 11810
11784: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11785: LD_ADDR_VAR 0 3
11789: PUSH
11790: LD_INT 11
11792: PUSH
11793: LD_INT 12
11795: PUSH
11796: LD_INT 13
11798: PUSH
11799: LD_INT 14
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: ST_TO_ADDR
11808: GO 12317
11810: LD_INT 25
11812: DOUBLE
11813: EQUAL
11814: IFTRUE 11818
11816: GO 11836
11818: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11819: LD_ADDR_VAR 0 3
11823: PUSH
11824: LD_INT 13
11826: PUSH
11827: LD_INT 14
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: ST_TO_ADDR
11834: GO 12317
11836: LD_INT 27
11838: DOUBLE
11839: EQUAL
11840: IFTRUE 11844
11842: GO 11862
11844: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
11845: LD_ADDR_VAR 0 3
11849: PUSH
11850: LD_INT 13
11852: PUSH
11853: LD_INT 14
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: ST_TO_ADDR
11860: GO 12317
11862: LD_INT 92
11864: DOUBLE
11865: EQUAL
11866: IFTRUE 11870
11868: GO 11896
11870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
11871: LD_ADDR_VAR 0 3
11875: PUSH
11876: LD_INT 11
11878: PUSH
11879: LD_INT 12
11881: PUSH
11882: LD_INT 13
11884: PUSH
11885: LD_INT 14
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: ST_TO_ADDR
11894: GO 12317
11896: LD_INT 28
11898: DOUBLE
11899: EQUAL
11900: IFTRUE 11904
11902: GO 11922
11904: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
11905: LD_ADDR_VAR 0 3
11909: PUSH
11910: LD_INT 13
11912: PUSH
11913: LD_INT 14
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: ST_TO_ADDR
11920: GO 12317
11922: LD_INT 29
11924: DOUBLE
11925: EQUAL
11926: IFTRUE 11930
11928: GO 11948
11930: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
11931: LD_ADDR_VAR 0 3
11935: PUSH
11936: LD_INT 13
11938: PUSH
11939: LD_INT 14
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: ST_TO_ADDR
11946: GO 12317
11948: LD_INT 31
11950: DOUBLE
11951: EQUAL
11952: IFTRUE 11956
11954: GO 11974
11956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
11957: LD_ADDR_VAR 0 3
11961: PUSH
11962: LD_INT 13
11964: PUSH
11965: LD_INT 14
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: ST_TO_ADDR
11972: GO 12317
11974: LD_INT 26
11976: DOUBLE
11977: EQUAL
11978: IFTRUE 11982
11980: GO 12000
11982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
11983: LD_ADDR_VAR 0 3
11987: PUSH
11988: LD_INT 13
11990: PUSH
11991: LD_INT 14
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: ST_TO_ADDR
11998: GO 12317
12000: LD_INT 42
12002: DOUBLE
12003: EQUAL
12004: IFTRUE 12008
12006: GO 12034
12008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12009: LD_ADDR_VAR 0 3
12013: PUSH
12014: LD_INT 21
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_INT 23
12022: PUSH
12023: LD_INT 24
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: ST_TO_ADDR
12032: GO 12317
12034: LD_INT 43
12036: DOUBLE
12037: EQUAL
12038: IFTRUE 12042
12040: GO 12068
12042: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12043: LD_ADDR_VAR 0 3
12047: PUSH
12048: LD_INT 21
12050: PUSH
12051: LD_INT 22
12053: PUSH
12054: LD_INT 23
12056: PUSH
12057: LD_INT 24
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: ST_TO_ADDR
12066: GO 12317
12068: LD_INT 44
12070: DOUBLE
12071: EQUAL
12072: IFTRUE 12076
12074: GO 12102
12076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12077: LD_ADDR_VAR 0 3
12081: PUSH
12082: LD_INT 21
12084: PUSH
12085: LD_INT 22
12087: PUSH
12088: LD_INT 23
12090: PUSH
12091: LD_INT 24
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: ST_TO_ADDR
12100: GO 12317
12102: LD_INT 45
12104: DOUBLE
12105: EQUAL
12106: IFTRUE 12110
12108: GO 12136
12110: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12111: LD_ADDR_VAR 0 3
12115: PUSH
12116: LD_INT 21
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_INT 23
12124: PUSH
12125: LD_INT 24
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: ST_TO_ADDR
12134: GO 12317
12136: LD_INT 49
12138: DOUBLE
12139: EQUAL
12140: IFTRUE 12144
12142: GO 12170
12144: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12145: LD_ADDR_VAR 0 3
12149: PUSH
12150: LD_INT 21
12152: PUSH
12153: LD_INT 22
12155: PUSH
12156: LD_INT 23
12158: PUSH
12159: LD_INT 24
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: ST_TO_ADDR
12168: GO 12317
12170: LD_INT 51
12172: DOUBLE
12173: EQUAL
12174: IFTRUE 12178
12176: GO 12204
12178: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12179: LD_ADDR_VAR 0 3
12183: PUSH
12184: LD_INT 21
12186: PUSH
12187: LD_INT 22
12189: PUSH
12190: LD_INT 23
12192: PUSH
12193: LD_INT 24
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: ST_TO_ADDR
12202: GO 12317
12204: LD_INT 52
12206: DOUBLE
12207: EQUAL
12208: IFTRUE 12212
12210: GO 12238
12212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12213: LD_ADDR_VAR 0 3
12217: PUSH
12218: LD_INT 21
12220: PUSH
12221: LD_INT 22
12223: PUSH
12224: LD_INT 23
12226: PUSH
12227: LD_INT 24
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: ST_TO_ADDR
12236: GO 12317
12238: LD_INT 53
12240: DOUBLE
12241: EQUAL
12242: IFTRUE 12246
12244: GO 12264
12246: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12247: LD_ADDR_VAR 0 3
12251: PUSH
12252: LD_INT 23
12254: PUSH
12255: LD_INT 24
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: ST_TO_ADDR
12262: GO 12317
12264: LD_INT 46
12266: DOUBLE
12267: EQUAL
12268: IFTRUE 12272
12270: GO 12290
12272: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12273: LD_ADDR_VAR 0 3
12277: PUSH
12278: LD_INT 23
12280: PUSH
12281: LD_INT 24
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: ST_TO_ADDR
12288: GO 12317
12290: LD_INT 47
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12316
12298: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12299: LD_ADDR_VAR 0 3
12303: PUSH
12304: LD_INT 23
12306: PUSH
12307: LD_INT 24
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: ST_TO_ADDR
12314: GO 12317
12316: POP
// result := ( chassis in result ) ;
12317: LD_ADDR_VAR 0 3
12321: PUSH
12322: LD_VAR 0 1
12326: PUSH
12327: LD_VAR 0 3
12331: IN
12332: ST_TO_ADDR
// end ;
12333: LD_VAR 0 3
12337: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12338: LD_INT 0
12340: PPUSH
12341: PPUSH
12342: PPUSH
12343: PPUSH
12344: PPUSH
12345: PPUSH
12346: PPUSH
// result := array ;
12347: LD_ADDR_VAR 0 5
12351: PUSH
12352: LD_VAR 0 1
12356: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12357: LD_VAR 0 1
12361: NOT
12362: PUSH
12363: LD_VAR 0 2
12367: NOT
12368: OR
12369: PUSH
12370: LD_VAR 0 3
12374: NOT
12375: OR
12376: PUSH
12377: LD_VAR 0 2
12381: PUSH
12382: LD_VAR 0 1
12386: GREATER
12387: OR
12388: PUSH
12389: LD_VAR 0 3
12393: PUSH
12394: LD_VAR 0 1
12398: GREATER
12399: OR
12400: IFFALSE 12404
// exit ;
12402: GO 12700
// if direction then
12404: LD_VAR 0 4
12408: IFFALSE 12472
// begin d := 1 ;
12410: LD_ADDR_VAR 0 9
12414: PUSH
12415: LD_INT 1
12417: ST_TO_ADDR
// if i_from > i_to then
12418: LD_VAR 0 2
12422: PUSH
12423: LD_VAR 0 3
12427: GREATER
12428: IFFALSE 12454
// length := ( array - i_from ) + i_to else
12430: LD_ADDR_VAR 0 11
12434: PUSH
12435: LD_VAR 0 1
12439: PUSH
12440: LD_VAR 0 2
12444: MINUS
12445: PUSH
12446: LD_VAR 0 3
12450: PLUS
12451: ST_TO_ADDR
12452: GO 12470
// length := i_to - i_from ;
12454: LD_ADDR_VAR 0 11
12458: PUSH
12459: LD_VAR 0 3
12463: PUSH
12464: LD_VAR 0 2
12468: MINUS
12469: ST_TO_ADDR
// end else
12470: GO 12533
// begin d := - 1 ;
12472: LD_ADDR_VAR 0 9
12476: PUSH
12477: LD_INT 1
12479: NEG
12480: ST_TO_ADDR
// if i_from > i_to then
12481: LD_VAR 0 2
12485: PUSH
12486: LD_VAR 0 3
12490: GREATER
12491: IFFALSE 12511
// length := i_from - i_to else
12493: LD_ADDR_VAR 0 11
12497: PUSH
12498: LD_VAR 0 2
12502: PUSH
12503: LD_VAR 0 3
12507: MINUS
12508: ST_TO_ADDR
12509: GO 12533
// length := ( array - i_to ) + i_from ;
12511: LD_ADDR_VAR 0 11
12515: PUSH
12516: LD_VAR 0 1
12520: PUSH
12521: LD_VAR 0 3
12525: MINUS
12526: PUSH
12527: LD_VAR 0 2
12531: PLUS
12532: ST_TO_ADDR
// end ; if not length then
12533: LD_VAR 0 11
12537: NOT
12538: IFFALSE 12542
// exit ;
12540: GO 12700
// tmp := array ;
12542: LD_ADDR_VAR 0 10
12546: PUSH
12547: LD_VAR 0 1
12551: ST_TO_ADDR
// for i = 1 to length do
12552: LD_ADDR_VAR 0 6
12556: PUSH
12557: DOUBLE
12558: LD_INT 1
12560: DEC
12561: ST_TO_ADDR
12562: LD_VAR 0 11
12566: PUSH
12567: FOR_TO
12568: IFFALSE 12688
// begin for j = 1 to array do
12570: LD_ADDR_VAR 0 7
12574: PUSH
12575: DOUBLE
12576: LD_INT 1
12578: DEC
12579: ST_TO_ADDR
12580: LD_VAR 0 1
12584: PUSH
12585: FOR_TO
12586: IFFALSE 12674
// begin k := j + d ;
12588: LD_ADDR_VAR 0 8
12592: PUSH
12593: LD_VAR 0 7
12597: PUSH
12598: LD_VAR 0 9
12602: PLUS
12603: ST_TO_ADDR
// if k > array then
12604: LD_VAR 0 8
12608: PUSH
12609: LD_VAR 0 1
12613: GREATER
12614: IFFALSE 12624
// k := 1 ;
12616: LD_ADDR_VAR 0 8
12620: PUSH
12621: LD_INT 1
12623: ST_TO_ADDR
// if not k then
12624: LD_VAR 0 8
12628: NOT
12629: IFFALSE 12641
// k := array ;
12631: LD_ADDR_VAR 0 8
12635: PUSH
12636: LD_VAR 0 1
12640: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12641: LD_ADDR_VAR 0 10
12645: PUSH
12646: LD_VAR 0 10
12650: PPUSH
12651: LD_VAR 0 8
12655: PPUSH
12656: LD_VAR 0 1
12660: PUSH
12661: LD_VAR 0 7
12665: ARRAY
12666: PPUSH
12667: CALL_OW 1
12671: ST_TO_ADDR
// end ;
12672: GO 12585
12674: POP
12675: POP
// array := tmp ;
12676: LD_ADDR_VAR 0 1
12680: PUSH
12681: LD_VAR 0 10
12685: ST_TO_ADDR
// end ;
12686: GO 12567
12688: POP
12689: POP
// result := array ;
12690: LD_ADDR_VAR 0 5
12694: PUSH
12695: LD_VAR 0 1
12699: ST_TO_ADDR
// end ;
12700: LD_VAR 0 5
12704: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12705: LD_INT 0
12707: PPUSH
12708: PPUSH
// result := 0 ;
12709: LD_ADDR_VAR 0 3
12713: PUSH
12714: LD_INT 0
12716: ST_TO_ADDR
// if not array or not value in array then
12717: LD_VAR 0 1
12721: NOT
12722: PUSH
12723: LD_VAR 0 2
12727: PUSH
12728: LD_VAR 0 1
12732: IN
12733: NOT
12734: OR
12735: IFFALSE 12739
// exit ;
12737: GO 12793
// for i = 1 to array do
12739: LD_ADDR_VAR 0 4
12743: PUSH
12744: DOUBLE
12745: LD_INT 1
12747: DEC
12748: ST_TO_ADDR
12749: LD_VAR 0 1
12753: PUSH
12754: FOR_TO
12755: IFFALSE 12791
// if value = array [ i ] then
12757: LD_VAR 0 2
12761: PUSH
12762: LD_VAR 0 1
12766: PUSH
12767: LD_VAR 0 4
12771: ARRAY
12772: EQUAL
12773: IFFALSE 12789
// begin result := i ;
12775: LD_ADDR_VAR 0 3
12779: PUSH
12780: LD_VAR 0 4
12784: ST_TO_ADDR
// exit ;
12785: POP
12786: POP
12787: GO 12793
// end ;
12789: GO 12754
12791: POP
12792: POP
// end ;
12793: LD_VAR 0 3
12797: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12798: LD_INT 0
12800: PPUSH
// vc_chassis := chassis ;
12801: LD_ADDR_OWVAR 37
12805: PUSH
12806: LD_VAR 0 1
12810: ST_TO_ADDR
// vc_engine := engine ;
12811: LD_ADDR_OWVAR 39
12815: PUSH
12816: LD_VAR 0 2
12820: ST_TO_ADDR
// vc_control := control ;
12821: LD_ADDR_OWVAR 38
12825: PUSH
12826: LD_VAR 0 3
12830: ST_TO_ADDR
// vc_weapon := weapon ;
12831: LD_ADDR_OWVAR 40
12835: PUSH
12836: LD_VAR 0 4
12840: ST_TO_ADDR
// vc_fuel_battery := fuel ;
12841: LD_ADDR_OWVAR 41
12845: PUSH
12846: LD_VAR 0 5
12850: ST_TO_ADDR
// end ;
12851: LD_VAR 0 6
12855: RET
// export function WantPlant ( unit ) ; var task ; begin
12856: LD_INT 0
12858: PPUSH
12859: PPUSH
// result := false ;
12860: LD_ADDR_VAR 0 2
12864: PUSH
12865: LD_INT 0
12867: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
12868: LD_ADDR_VAR 0 3
12872: PUSH
12873: LD_VAR 0 1
12877: PPUSH
12878: CALL_OW 437
12882: ST_TO_ADDR
// if task then
12883: LD_VAR 0 3
12887: IFFALSE 12915
// if task [ 1 ] [ 1 ] = p then
12889: LD_VAR 0 3
12893: PUSH
12894: LD_INT 1
12896: ARRAY
12897: PUSH
12898: LD_INT 1
12900: ARRAY
12901: PUSH
12902: LD_STRING p
12904: EQUAL
12905: IFFALSE 12915
// result := true ;
12907: LD_ADDR_VAR 0 2
12911: PUSH
12912: LD_INT 1
12914: ST_TO_ADDR
// end ;
12915: LD_VAR 0 2
12919: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
12920: LD_INT 0
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
// if pos < 1 then
12926: LD_VAR 0 2
12930: PUSH
12931: LD_INT 1
12933: LESS
12934: IFFALSE 12938
// exit ;
12936: GO 13241
// if pos = 1 then
12938: LD_VAR 0 2
12942: PUSH
12943: LD_INT 1
12945: EQUAL
12946: IFFALSE 12979
// result := Replace ( arr , pos [ 1 ] , value ) else
12948: LD_ADDR_VAR 0 4
12952: PUSH
12953: LD_VAR 0 1
12957: PPUSH
12958: LD_VAR 0 2
12962: PUSH
12963: LD_INT 1
12965: ARRAY
12966: PPUSH
12967: LD_VAR 0 3
12971: PPUSH
12972: CALL_OW 1
12976: ST_TO_ADDR
12977: GO 13241
// begin tmp := arr ;
12979: LD_ADDR_VAR 0 6
12983: PUSH
12984: LD_VAR 0 1
12988: ST_TO_ADDR
// s_arr := [ tmp ] ;
12989: LD_ADDR_VAR 0 7
12993: PUSH
12994: LD_VAR 0 6
12998: PUSH
12999: EMPTY
13000: LIST
13001: ST_TO_ADDR
// for i = 1 to pos - 1 do
13002: LD_ADDR_VAR 0 5
13006: PUSH
13007: DOUBLE
13008: LD_INT 1
13010: DEC
13011: ST_TO_ADDR
13012: LD_VAR 0 2
13016: PUSH
13017: LD_INT 1
13019: MINUS
13020: PUSH
13021: FOR_TO
13022: IFFALSE 13067
// begin tmp := tmp [ pos [ i ] ] ;
13024: LD_ADDR_VAR 0 6
13028: PUSH
13029: LD_VAR 0 6
13033: PUSH
13034: LD_VAR 0 2
13038: PUSH
13039: LD_VAR 0 5
13043: ARRAY
13044: ARRAY
13045: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13046: LD_ADDR_VAR 0 7
13050: PUSH
13051: LD_VAR 0 7
13055: PUSH
13056: LD_VAR 0 6
13060: PUSH
13061: EMPTY
13062: LIST
13063: ADD
13064: ST_TO_ADDR
// end ;
13065: GO 13021
13067: POP
13068: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13069: LD_ADDR_VAR 0 6
13073: PUSH
13074: LD_VAR 0 6
13078: PPUSH
13079: LD_VAR 0 2
13083: PUSH
13084: LD_VAR 0 2
13088: ARRAY
13089: PPUSH
13090: LD_VAR 0 3
13094: PPUSH
13095: CALL_OW 1
13099: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13100: LD_ADDR_VAR 0 7
13104: PUSH
13105: LD_VAR 0 7
13109: PPUSH
13110: LD_VAR 0 7
13114: PPUSH
13115: LD_VAR 0 6
13119: PPUSH
13120: CALL_OW 1
13124: ST_TO_ADDR
// for i = s_arr downto 2 do
13125: LD_ADDR_VAR 0 5
13129: PUSH
13130: DOUBLE
13131: LD_VAR 0 7
13135: INC
13136: ST_TO_ADDR
13137: LD_INT 2
13139: PUSH
13140: FOR_DOWNTO
13141: IFFALSE 13225
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13143: LD_ADDR_VAR 0 6
13147: PUSH
13148: LD_VAR 0 7
13152: PUSH
13153: LD_VAR 0 5
13157: PUSH
13158: LD_INT 1
13160: MINUS
13161: ARRAY
13162: PPUSH
13163: LD_VAR 0 2
13167: PUSH
13168: LD_VAR 0 5
13172: PUSH
13173: LD_INT 1
13175: MINUS
13176: ARRAY
13177: PPUSH
13178: LD_VAR 0 7
13182: PUSH
13183: LD_VAR 0 5
13187: ARRAY
13188: PPUSH
13189: CALL_OW 1
13193: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13194: LD_ADDR_VAR 0 7
13198: PUSH
13199: LD_VAR 0 7
13203: PPUSH
13204: LD_VAR 0 5
13208: PUSH
13209: LD_INT 1
13211: MINUS
13212: PPUSH
13213: LD_VAR 0 6
13217: PPUSH
13218: CALL_OW 1
13222: ST_TO_ADDR
// end ;
13223: GO 13140
13225: POP
13226: POP
// result := s_arr [ 1 ] ;
13227: LD_ADDR_VAR 0 4
13231: PUSH
13232: LD_VAR 0 7
13236: PUSH
13237: LD_INT 1
13239: ARRAY
13240: ST_TO_ADDR
// end ; end ;
13241: LD_VAR 0 4
13245: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13246: LD_INT 0
13248: PPUSH
13249: PPUSH
// if not list then
13250: LD_VAR 0 1
13254: NOT
13255: IFFALSE 13259
// exit ;
13257: GO 13350
// i := list [ pos1 ] ;
13259: LD_ADDR_VAR 0 5
13263: PUSH
13264: LD_VAR 0 1
13268: PUSH
13269: LD_VAR 0 2
13273: ARRAY
13274: ST_TO_ADDR
// if not i then
13275: LD_VAR 0 5
13279: NOT
13280: IFFALSE 13284
// exit ;
13282: GO 13350
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13284: LD_ADDR_VAR 0 1
13288: PUSH
13289: LD_VAR 0 1
13293: PPUSH
13294: LD_VAR 0 2
13298: PPUSH
13299: LD_VAR 0 1
13303: PUSH
13304: LD_VAR 0 3
13308: ARRAY
13309: PPUSH
13310: CALL_OW 1
13314: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13315: LD_ADDR_VAR 0 1
13319: PUSH
13320: LD_VAR 0 1
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_VAR 0 5
13334: PPUSH
13335: CALL_OW 1
13339: ST_TO_ADDR
// result := list ;
13340: LD_ADDR_VAR 0 4
13344: PUSH
13345: LD_VAR 0 1
13349: ST_TO_ADDR
// end ;
13350: LD_VAR 0 4
13354: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13355: LD_INT 0
13357: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13358: LD_ADDR_VAR 0 5
13362: PUSH
13363: LD_VAR 0 1
13367: PPUSH
13368: CALL_OW 250
13372: PPUSH
13373: LD_VAR 0 1
13377: PPUSH
13378: CALL_OW 251
13382: PPUSH
13383: LD_VAR 0 2
13387: PPUSH
13388: LD_VAR 0 3
13392: PPUSH
13393: LD_VAR 0 4
13397: PPUSH
13398: CALL 13408 0 5
13402: ST_TO_ADDR
// end ;
13403: LD_VAR 0 5
13407: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13408: LD_INT 0
13410: PPUSH
13411: PPUSH
13412: PPUSH
13413: PPUSH
// if not list then
13414: LD_VAR 0 3
13418: NOT
13419: IFFALSE 13423
// exit ;
13421: GO 13811
// result := [ ] ;
13423: LD_ADDR_VAR 0 6
13427: PUSH
13428: EMPTY
13429: ST_TO_ADDR
// for i in list do
13430: LD_ADDR_VAR 0 7
13434: PUSH
13435: LD_VAR 0 3
13439: PUSH
13440: FOR_IN
13441: IFFALSE 13643
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13443: LD_ADDR_VAR 0 9
13447: PUSH
13448: LD_VAR 0 7
13452: PPUSH
13453: LD_VAR 0 1
13457: PPUSH
13458: LD_VAR 0 2
13462: PPUSH
13463: CALL_OW 297
13467: ST_TO_ADDR
// if not result then
13468: LD_VAR 0 6
13472: NOT
13473: IFFALSE 13499
// result := [ [ i , tmp ] ] else
13475: LD_ADDR_VAR 0 6
13479: PUSH
13480: LD_VAR 0 7
13484: PUSH
13485: LD_VAR 0 9
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: ST_TO_ADDR
13497: GO 13641
// begin if result [ result ] [ 2 ] < tmp then
13499: LD_VAR 0 6
13503: PUSH
13504: LD_VAR 0 6
13508: ARRAY
13509: PUSH
13510: LD_INT 2
13512: ARRAY
13513: PUSH
13514: LD_VAR 0 9
13518: LESS
13519: IFFALSE 13561
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13521: LD_ADDR_VAR 0 6
13525: PUSH
13526: LD_VAR 0 6
13530: PPUSH
13531: LD_VAR 0 6
13535: PUSH
13536: LD_INT 1
13538: PLUS
13539: PPUSH
13540: LD_VAR 0 7
13544: PUSH
13545: LD_VAR 0 9
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PPUSH
13554: CALL_OW 2
13558: ST_TO_ADDR
13559: GO 13641
// for j = 1 to result do
13561: LD_ADDR_VAR 0 8
13565: PUSH
13566: DOUBLE
13567: LD_INT 1
13569: DEC
13570: ST_TO_ADDR
13571: LD_VAR 0 6
13575: PUSH
13576: FOR_TO
13577: IFFALSE 13639
// begin if tmp < result [ j ] [ 2 ] then
13579: LD_VAR 0 9
13583: PUSH
13584: LD_VAR 0 6
13588: PUSH
13589: LD_VAR 0 8
13593: ARRAY
13594: PUSH
13595: LD_INT 2
13597: ARRAY
13598: LESS
13599: IFFALSE 13637
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13601: LD_ADDR_VAR 0 6
13605: PUSH
13606: LD_VAR 0 6
13610: PPUSH
13611: LD_VAR 0 8
13615: PPUSH
13616: LD_VAR 0 7
13620: PUSH
13621: LD_VAR 0 9
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PPUSH
13630: CALL_OW 2
13634: ST_TO_ADDR
// break ;
13635: GO 13639
// end ; end ;
13637: GO 13576
13639: POP
13640: POP
// end ; end ;
13641: GO 13440
13643: POP
13644: POP
// if result and not asc then
13645: LD_VAR 0 6
13649: PUSH
13650: LD_VAR 0 4
13654: NOT
13655: AND
13656: IFFALSE 13731
// begin tmp := result ;
13658: LD_ADDR_VAR 0 9
13662: PUSH
13663: LD_VAR 0 6
13667: ST_TO_ADDR
// for i = tmp downto 1 do
13668: LD_ADDR_VAR 0 7
13672: PUSH
13673: DOUBLE
13674: LD_VAR 0 9
13678: INC
13679: ST_TO_ADDR
13680: LD_INT 1
13682: PUSH
13683: FOR_DOWNTO
13684: IFFALSE 13729
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13686: LD_ADDR_VAR 0 6
13690: PUSH
13691: LD_VAR 0 6
13695: PPUSH
13696: LD_VAR 0 9
13700: PUSH
13701: LD_VAR 0 7
13705: MINUS
13706: PUSH
13707: LD_INT 1
13709: PLUS
13710: PPUSH
13711: LD_VAR 0 9
13715: PUSH
13716: LD_VAR 0 7
13720: ARRAY
13721: PPUSH
13722: CALL_OW 1
13726: ST_TO_ADDR
13727: GO 13683
13729: POP
13730: POP
// end ; tmp := [ ] ;
13731: LD_ADDR_VAR 0 9
13735: PUSH
13736: EMPTY
13737: ST_TO_ADDR
// if mode then
13738: LD_VAR 0 5
13742: IFFALSE 13811
// begin for i = 1 to result do
13744: LD_ADDR_VAR 0 7
13748: PUSH
13749: DOUBLE
13750: LD_INT 1
13752: DEC
13753: ST_TO_ADDR
13754: LD_VAR 0 6
13758: PUSH
13759: FOR_TO
13760: IFFALSE 13799
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13762: LD_ADDR_VAR 0 9
13766: PUSH
13767: LD_VAR 0 9
13771: PPUSH
13772: LD_VAR 0 7
13776: PPUSH
13777: LD_VAR 0 6
13781: PUSH
13782: LD_VAR 0 7
13786: ARRAY
13787: PUSH
13788: LD_INT 1
13790: ARRAY
13791: PPUSH
13792: CALL_OW 1
13796: ST_TO_ADDR
13797: GO 13759
13799: POP
13800: POP
// result := tmp ;
13801: LD_ADDR_VAR 0 6
13805: PUSH
13806: LD_VAR 0 9
13810: ST_TO_ADDR
// end ; end ;
13811: LD_VAR 0 6
13815: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13816: LD_INT 0
13818: PPUSH
13819: PPUSH
13820: PPUSH
13821: PPUSH
13822: PPUSH
13823: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13824: LD_ADDR_VAR 0 5
13828: PUSH
13829: LD_INT 0
13831: PUSH
13832: LD_INT 0
13834: PUSH
13835: LD_INT 0
13837: PUSH
13838: EMPTY
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: ST_TO_ADDR
// if not x or not y then
13846: LD_VAR 0 2
13850: NOT
13851: PUSH
13852: LD_VAR 0 3
13856: NOT
13857: OR
13858: IFFALSE 13862
// exit ;
13860: GO 15512
// if not range then
13862: LD_VAR 0 4
13866: NOT
13867: IFFALSE 13877
// range := 10 ;
13869: LD_ADDR_VAR 0 4
13873: PUSH
13874: LD_INT 10
13876: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13877: LD_ADDR_VAR 0 8
13881: PUSH
13882: LD_INT 81
13884: PUSH
13885: LD_VAR 0 1
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 92
13896: PUSH
13897: LD_VAR 0 2
13901: PUSH
13902: LD_VAR 0 3
13906: PUSH
13907: LD_VAR 0 4
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: PUSH
13918: LD_INT 3
13920: PUSH
13921: LD_INT 21
13923: PUSH
13924: LD_INT 3
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: LIST
13939: PPUSH
13940: CALL_OW 69
13944: ST_TO_ADDR
// if not tmp then
13945: LD_VAR 0 8
13949: NOT
13950: IFFALSE 13954
// exit ;
13952: GO 15512
// for i in tmp do
13954: LD_ADDR_VAR 0 6
13958: PUSH
13959: LD_VAR 0 8
13963: PUSH
13964: FOR_IN
13965: IFFALSE 15487
// begin points := [ 0 , 0 , 0 ] ;
13967: LD_ADDR_VAR 0 9
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: LD_INT 0
13977: PUSH
13978: LD_INT 0
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: ST_TO_ADDR
// bpoints := 1 ;
13986: LD_ADDR_VAR 0 10
13990: PUSH
13991: LD_INT 1
13993: ST_TO_ADDR
// case GetType ( i ) of unit_human :
13994: LD_VAR 0 6
13998: PPUSH
13999: CALL_OW 247
14003: PUSH
14004: LD_INT 1
14006: DOUBLE
14007: EQUAL
14008: IFTRUE 14012
14010: GO 14590
14012: POP
// begin if GetClass ( i ) = 1 then
14013: LD_VAR 0 6
14017: PPUSH
14018: CALL_OW 257
14022: PUSH
14023: LD_INT 1
14025: EQUAL
14026: IFFALSE 14047
// points := [ 10 , 5 , 3 ] ;
14028: LD_ADDR_VAR 0 9
14032: PUSH
14033: LD_INT 10
14035: PUSH
14036: LD_INT 5
14038: PUSH
14039: LD_INT 3
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14047: LD_VAR 0 6
14051: PPUSH
14052: CALL_OW 257
14056: PUSH
14057: LD_INT 2
14059: PUSH
14060: LD_INT 3
14062: PUSH
14063: LD_INT 4
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: IN
14071: IFFALSE 14092
// points := [ 3 , 2 , 1 ] ;
14073: LD_ADDR_VAR 0 9
14077: PUSH
14078: LD_INT 3
14080: PUSH
14081: LD_INT 2
14083: PUSH
14084: LD_INT 1
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14092: LD_VAR 0 6
14096: PPUSH
14097: CALL_OW 257
14101: PUSH
14102: LD_INT 5
14104: EQUAL
14105: IFFALSE 14126
// points := [ 130 , 5 , 2 ] ;
14107: LD_ADDR_VAR 0 9
14111: PUSH
14112: LD_INT 130
14114: PUSH
14115: LD_INT 5
14117: PUSH
14118: LD_INT 2
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14126: LD_VAR 0 6
14130: PPUSH
14131: CALL_OW 257
14135: PUSH
14136: LD_INT 8
14138: EQUAL
14139: IFFALSE 14160
// points := [ 35 , 35 , 30 ] ;
14141: LD_ADDR_VAR 0 9
14145: PUSH
14146: LD_INT 35
14148: PUSH
14149: LD_INT 35
14151: PUSH
14152: LD_INT 30
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14160: LD_VAR 0 6
14164: PPUSH
14165: CALL_OW 257
14169: PUSH
14170: LD_INT 9
14172: EQUAL
14173: IFFALSE 14194
// points := [ 20 , 55 , 40 ] ;
14175: LD_ADDR_VAR 0 9
14179: PUSH
14180: LD_INT 20
14182: PUSH
14183: LD_INT 55
14185: PUSH
14186: LD_INT 40
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14194: LD_VAR 0 6
14198: PPUSH
14199: CALL_OW 257
14203: PUSH
14204: LD_INT 12
14206: PUSH
14207: LD_INT 16
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: IN
14214: IFFALSE 14235
// points := [ 5 , 3 , 2 ] ;
14216: LD_ADDR_VAR 0 9
14220: PUSH
14221: LD_INT 5
14223: PUSH
14224: LD_INT 3
14226: PUSH
14227: LD_INT 2
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: LIST
14234: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14235: LD_VAR 0 6
14239: PPUSH
14240: CALL_OW 257
14244: PUSH
14245: LD_INT 17
14247: EQUAL
14248: IFFALSE 14269
// points := [ 100 , 50 , 75 ] ;
14250: LD_ADDR_VAR 0 9
14254: PUSH
14255: LD_INT 100
14257: PUSH
14258: LD_INT 50
14260: PUSH
14261: LD_INT 75
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14269: LD_VAR 0 6
14273: PPUSH
14274: CALL_OW 257
14278: PUSH
14279: LD_INT 15
14281: EQUAL
14282: IFFALSE 14303
// points := [ 10 , 5 , 3 ] ;
14284: LD_ADDR_VAR 0 9
14288: PUSH
14289: LD_INT 10
14291: PUSH
14292: LD_INT 5
14294: PUSH
14295: LD_INT 3
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: LIST
14302: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14303: LD_VAR 0 6
14307: PPUSH
14308: CALL_OW 257
14312: PUSH
14313: LD_INT 14
14315: EQUAL
14316: IFFALSE 14337
// points := [ 10 , 0 , 0 ] ;
14318: LD_ADDR_VAR 0 9
14322: PUSH
14323: LD_INT 10
14325: PUSH
14326: LD_INT 0
14328: PUSH
14329: LD_INT 0
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14337: LD_VAR 0 6
14341: PPUSH
14342: CALL_OW 257
14346: PUSH
14347: LD_INT 11
14349: EQUAL
14350: IFFALSE 14371
// points := [ 30 , 10 , 5 ] ;
14352: LD_ADDR_VAR 0 9
14356: PUSH
14357: LD_INT 30
14359: PUSH
14360: LD_INT 10
14362: PUSH
14363: LD_INT 5
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14371: LD_VAR 0 1
14375: PPUSH
14376: LD_INT 5
14378: PPUSH
14379: CALL_OW 321
14383: PUSH
14384: LD_INT 2
14386: EQUAL
14387: IFFALSE 14404
// bpoints := bpoints * 1.8 ;
14389: LD_ADDR_VAR 0 10
14393: PUSH
14394: LD_VAR 0 10
14398: PUSH
14399: LD_REAL  1.80000000000000E+0000
14402: MUL
14403: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14404: LD_VAR 0 6
14408: PPUSH
14409: CALL_OW 257
14413: PUSH
14414: LD_INT 1
14416: PUSH
14417: LD_INT 2
14419: PUSH
14420: LD_INT 3
14422: PUSH
14423: LD_INT 4
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: IN
14432: PUSH
14433: LD_VAR 0 1
14437: PPUSH
14438: LD_INT 51
14440: PPUSH
14441: CALL_OW 321
14445: PUSH
14446: LD_INT 2
14448: EQUAL
14449: AND
14450: IFFALSE 14467
// bpoints := bpoints * 1.2 ;
14452: LD_ADDR_VAR 0 10
14456: PUSH
14457: LD_VAR 0 10
14461: PUSH
14462: LD_REAL  1.20000000000000E+0000
14465: MUL
14466: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14467: LD_VAR 0 6
14471: PPUSH
14472: CALL_OW 257
14476: PUSH
14477: LD_INT 5
14479: PUSH
14480: LD_INT 7
14482: PUSH
14483: LD_INT 9
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: LIST
14490: IN
14491: PUSH
14492: LD_VAR 0 1
14496: PPUSH
14497: LD_INT 52
14499: PPUSH
14500: CALL_OW 321
14504: PUSH
14505: LD_INT 2
14507: EQUAL
14508: AND
14509: IFFALSE 14526
// bpoints := bpoints * 1.5 ;
14511: LD_ADDR_VAR 0 10
14515: PUSH
14516: LD_VAR 0 10
14520: PUSH
14521: LD_REAL  1.50000000000000E+0000
14524: MUL
14525: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14526: LD_VAR 0 1
14530: PPUSH
14531: LD_INT 66
14533: PPUSH
14534: CALL_OW 321
14538: PUSH
14539: LD_INT 2
14541: EQUAL
14542: IFFALSE 14559
// bpoints := bpoints * 1.1 ;
14544: LD_ADDR_VAR 0 10
14548: PUSH
14549: LD_VAR 0 10
14553: PUSH
14554: LD_REAL  1.10000000000000E+0000
14557: MUL
14558: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14559: LD_ADDR_VAR 0 10
14563: PUSH
14564: LD_VAR 0 10
14568: PUSH
14569: LD_VAR 0 6
14573: PPUSH
14574: LD_INT 1
14576: PPUSH
14577: CALL_OW 259
14581: PUSH
14582: LD_REAL  1.15000000000000E+0000
14585: MUL
14586: MUL
14587: ST_TO_ADDR
// end ; unit_vehicle :
14588: GO 15416
14590: LD_INT 2
14592: DOUBLE
14593: EQUAL
14594: IFTRUE 14598
14596: GO 15404
14598: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14599: LD_VAR 0 6
14603: PPUSH
14604: CALL_OW 264
14608: PUSH
14609: LD_INT 2
14611: PUSH
14612: LD_INT 42
14614: PUSH
14615: LD_INT 24
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: IN
14623: IFFALSE 14644
// points := [ 25 , 5 , 3 ] ;
14625: LD_ADDR_VAR 0 9
14629: PUSH
14630: LD_INT 25
14632: PUSH
14633: LD_INT 5
14635: PUSH
14636: LD_INT 3
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14644: LD_VAR 0 6
14648: PPUSH
14649: CALL_OW 264
14653: PUSH
14654: LD_INT 4
14656: PUSH
14657: LD_INT 43
14659: PUSH
14660: LD_INT 25
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: IN
14668: IFFALSE 14689
// points := [ 40 , 15 , 5 ] ;
14670: LD_ADDR_VAR 0 9
14674: PUSH
14675: LD_INT 40
14677: PUSH
14678: LD_INT 15
14680: PUSH
14681: LD_INT 5
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: LIST
14688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14689: LD_VAR 0 6
14693: PPUSH
14694: CALL_OW 264
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: LD_INT 23
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: IN
14709: IFFALSE 14730
// points := [ 7 , 25 , 8 ] ;
14711: LD_ADDR_VAR 0 9
14715: PUSH
14716: LD_INT 7
14718: PUSH
14719: LD_INT 25
14721: PUSH
14722: LD_INT 8
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14730: LD_VAR 0 6
14734: PPUSH
14735: CALL_OW 264
14739: PUSH
14740: LD_INT 5
14742: PUSH
14743: LD_INT 27
14745: PUSH
14746: LD_INT 44
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: IN
14754: IFFALSE 14775
// points := [ 14 , 50 , 16 ] ;
14756: LD_ADDR_VAR 0 9
14760: PUSH
14761: LD_INT 14
14763: PUSH
14764: LD_INT 50
14766: PUSH
14767: LD_INT 16
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: LIST
14774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14775: LD_VAR 0 6
14779: PPUSH
14780: CALL_OW 264
14784: PUSH
14785: LD_INT 6
14787: PUSH
14788: LD_INT 46
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: IN
14795: IFFALSE 14816
// points := [ 32 , 120 , 70 ] ;
14797: LD_ADDR_VAR 0 9
14801: PUSH
14802: LD_INT 32
14804: PUSH
14805: LD_INT 120
14807: PUSH
14808: LD_INT 70
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
14816: LD_VAR 0 6
14820: PPUSH
14821: CALL_OW 264
14825: PUSH
14826: LD_INT 7
14828: PUSH
14829: LD_INT 28
14831: PUSH
14832: LD_INT 45
14834: PUSH
14835: LD_INT 92
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: IN
14844: IFFALSE 14865
// points := [ 35 , 20 , 45 ] ;
14846: LD_ADDR_VAR 0 9
14850: PUSH
14851: LD_INT 35
14853: PUSH
14854: LD_INT 20
14856: PUSH
14857: LD_INT 45
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
14865: LD_VAR 0 6
14869: PPUSH
14870: CALL_OW 264
14874: PUSH
14875: LD_INT 47
14877: PUSH
14878: EMPTY
14879: LIST
14880: IN
14881: IFFALSE 14902
// points := [ 67 , 45 , 75 ] ;
14883: LD_ADDR_VAR 0 9
14887: PUSH
14888: LD_INT 67
14890: PUSH
14891: LD_INT 45
14893: PUSH
14894: LD_INT 75
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: LIST
14901: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
14902: LD_VAR 0 6
14906: PPUSH
14907: CALL_OW 264
14911: PUSH
14912: LD_INT 26
14914: PUSH
14915: EMPTY
14916: LIST
14917: IN
14918: IFFALSE 14939
// points := [ 120 , 30 , 80 ] ;
14920: LD_ADDR_VAR 0 9
14924: PUSH
14925: LD_INT 120
14927: PUSH
14928: LD_INT 30
14930: PUSH
14931: LD_INT 80
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: LIST
14938: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
14939: LD_VAR 0 6
14943: PPUSH
14944: CALL_OW 264
14948: PUSH
14949: LD_INT 22
14951: PUSH
14952: EMPTY
14953: LIST
14954: IN
14955: IFFALSE 14976
// points := [ 40 , 1 , 1 ] ;
14957: LD_ADDR_VAR 0 9
14961: PUSH
14962: LD_INT 40
14964: PUSH
14965: LD_INT 1
14967: PUSH
14968: LD_INT 1
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: LIST
14975: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
14976: LD_VAR 0 6
14980: PPUSH
14981: CALL_OW 264
14985: PUSH
14986: LD_INT 29
14988: PUSH
14989: EMPTY
14990: LIST
14991: IN
14992: IFFALSE 15013
// points := [ 70 , 200 , 400 ] ;
14994: LD_ADDR_VAR 0 9
14998: PUSH
14999: LD_INT 70
15001: PUSH
15002: LD_INT 200
15004: PUSH
15005: LD_INT 400
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15013: LD_VAR 0 6
15017: PPUSH
15018: CALL_OW 264
15022: PUSH
15023: LD_INT 14
15025: PUSH
15026: LD_INT 53
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: IN
15033: IFFALSE 15054
// points := [ 40 , 10 , 20 ] ;
15035: LD_ADDR_VAR 0 9
15039: PUSH
15040: LD_INT 40
15042: PUSH
15043: LD_INT 10
15045: PUSH
15046: LD_INT 20
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: LIST
15053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15054: LD_VAR 0 6
15058: PPUSH
15059: CALL_OW 264
15063: PUSH
15064: LD_INT 9
15066: PUSH
15067: EMPTY
15068: LIST
15069: IN
15070: IFFALSE 15091
// points := [ 5 , 70 , 20 ] ;
15072: LD_ADDR_VAR 0 9
15076: PUSH
15077: LD_INT 5
15079: PUSH
15080: LD_INT 70
15082: PUSH
15083: LD_INT 20
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15091: LD_VAR 0 6
15095: PPUSH
15096: CALL_OW 264
15100: PUSH
15101: LD_INT 10
15103: PUSH
15104: EMPTY
15105: LIST
15106: IN
15107: IFFALSE 15128
// points := [ 35 , 110 , 70 ] ;
15109: LD_ADDR_VAR 0 9
15113: PUSH
15114: LD_INT 35
15116: PUSH
15117: LD_INT 110
15119: PUSH
15120: LD_INT 70
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15128: LD_VAR 0 6
15132: PPUSH
15133: CALL_OW 265
15137: PUSH
15138: LD_INT 25
15140: EQUAL
15141: IFFALSE 15162
// points := [ 80 , 65 , 100 ] ;
15143: LD_ADDR_VAR 0 9
15147: PUSH
15148: LD_INT 80
15150: PUSH
15151: LD_INT 65
15153: PUSH
15154: LD_INT 100
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: LIST
15161: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15162: LD_VAR 0 6
15166: PPUSH
15167: CALL_OW 263
15171: PUSH
15172: LD_INT 1
15174: EQUAL
15175: IFFALSE 15210
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15177: LD_ADDR_VAR 0 10
15181: PUSH
15182: LD_VAR 0 10
15186: PUSH
15187: LD_VAR 0 6
15191: PPUSH
15192: CALL_OW 311
15196: PPUSH
15197: LD_INT 3
15199: PPUSH
15200: CALL_OW 259
15204: PUSH
15205: LD_INT 4
15207: MUL
15208: MUL
15209: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15210: LD_VAR 0 6
15214: PPUSH
15215: CALL_OW 263
15219: PUSH
15220: LD_INT 2
15222: EQUAL
15223: IFFALSE 15274
// begin j := IsControledBy ( i ) ;
15225: LD_ADDR_VAR 0 7
15229: PUSH
15230: LD_VAR 0 6
15234: PPUSH
15235: CALL_OW 312
15239: ST_TO_ADDR
// if j then
15240: LD_VAR 0 7
15244: IFFALSE 15274
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15246: LD_ADDR_VAR 0 10
15250: PUSH
15251: LD_VAR 0 10
15255: PUSH
15256: LD_VAR 0 7
15260: PPUSH
15261: LD_INT 3
15263: PPUSH
15264: CALL_OW 259
15268: PUSH
15269: LD_INT 3
15271: MUL
15272: MUL
15273: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15274: LD_VAR 0 6
15278: PPUSH
15279: CALL_OW 264
15283: PUSH
15284: LD_INT 5
15286: PUSH
15287: LD_INT 6
15289: PUSH
15290: LD_INT 46
15292: PUSH
15293: LD_INT 44
15295: PUSH
15296: LD_INT 47
15298: PUSH
15299: LD_INT 45
15301: PUSH
15302: LD_INT 28
15304: PUSH
15305: LD_INT 7
15307: PUSH
15308: LD_INT 27
15310: PUSH
15311: LD_INT 29
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: IN
15326: PUSH
15327: LD_VAR 0 1
15331: PPUSH
15332: LD_INT 52
15334: PPUSH
15335: CALL_OW 321
15339: PUSH
15340: LD_INT 2
15342: EQUAL
15343: AND
15344: IFFALSE 15361
// bpoints := bpoints * 1.2 ;
15346: LD_ADDR_VAR 0 10
15350: PUSH
15351: LD_VAR 0 10
15355: PUSH
15356: LD_REAL  1.20000000000000E+0000
15359: MUL
15360: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15361: LD_VAR 0 6
15365: PPUSH
15366: CALL_OW 264
15370: PUSH
15371: LD_INT 6
15373: PUSH
15374: LD_INT 46
15376: PUSH
15377: LD_INT 47
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: LIST
15384: IN
15385: IFFALSE 15402
// bpoints := bpoints * 1.2 ;
15387: LD_ADDR_VAR 0 10
15391: PUSH
15392: LD_VAR 0 10
15396: PUSH
15397: LD_REAL  1.20000000000000E+0000
15400: MUL
15401: ST_TO_ADDR
// end ; unit_building :
15402: GO 15416
15404: LD_INT 3
15406: DOUBLE
15407: EQUAL
15408: IFTRUE 15412
15410: GO 15415
15412: POP
// ; end ;
15413: GO 15416
15415: POP
// for j = 1 to 3 do
15416: LD_ADDR_VAR 0 7
15420: PUSH
15421: DOUBLE
15422: LD_INT 1
15424: DEC
15425: ST_TO_ADDR
15426: LD_INT 3
15428: PUSH
15429: FOR_TO
15430: IFFALSE 15483
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15432: LD_ADDR_VAR 0 5
15436: PUSH
15437: LD_VAR 0 5
15441: PPUSH
15442: LD_VAR 0 7
15446: PPUSH
15447: LD_VAR 0 5
15451: PUSH
15452: LD_VAR 0 7
15456: ARRAY
15457: PUSH
15458: LD_VAR 0 9
15462: PUSH
15463: LD_VAR 0 7
15467: ARRAY
15468: PUSH
15469: LD_VAR 0 10
15473: MUL
15474: PLUS
15475: PPUSH
15476: CALL_OW 1
15480: ST_TO_ADDR
15481: GO 15429
15483: POP
15484: POP
// end ;
15485: GO 13964
15487: POP
15488: POP
// result := Replace ( result , 4 , tmp ) ;
15489: LD_ADDR_VAR 0 5
15493: PUSH
15494: LD_VAR 0 5
15498: PPUSH
15499: LD_INT 4
15501: PPUSH
15502: LD_VAR 0 8
15506: PPUSH
15507: CALL_OW 1
15511: ST_TO_ADDR
// end ;
15512: LD_VAR 0 5
15516: RET
// export function DangerAtRange ( unit , range ) ; begin
15517: LD_INT 0
15519: PPUSH
// if not unit then
15520: LD_VAR 0 1
15524: NOT
15525: IFFALSE 15529
// exit ;
15527: GO 15574
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15529: LD_ADDR_VAR 0 3
15533: PUSH
15534: LD_VAR 0 1
15538: PPUSH
15539: CALL_OW 255
15543: PPUSH
15544: LD_VAR 0 1
15548: PPUSH
15549: CALL_OW 250
15553: PPUSH
15554: LD_VAR 0 1
15558: PPUSH
15559: CALL_OW 251
15563: PPUSH
15564: LD_VAR 0 2
15568: PPUSH
15569: CALL 13816 0 4
15573: ST_TO_ADDR
// end ;
15574: LD_VAR 0 3
15578: RET
// export function DangerInArea ( side , area ) ; begin
15579: LD_INT 0
15581: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15582: LD_ADDR_VAR 0 3
15586: PUSH
15587: LD_VAR 0 2
15591: PPUSH
15592: LD_INT 81
15594: PUSH
15595: LD_VAR 0 1
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PPUSH
15604: CALL_OW 70
15608: ST_TO_ADDR
// end ;
15609: LD_VAR 0 3
15613: RET
// export function IsExtension ( b ) ; begin
15614: LD_INT 0
15616: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: LD_VAR 0 1
15626: PUSH
15627: LD_INT 23
15629: PUSH
15630: LD_INT 20
15632: PUSH
15633: LD_INT 22
15635: PUSH
15636: LD_INT 17
15638: PUSH
15639: LD_INT 24
15641: PUSH
15642: LD_INT 21
15644: PUSH
15645: LD_INT 19
15647: PUSH
15648: LD_INT 16
15650: PUSH
15651: LD_INT 25
15653: PUSH
15654: LD_INT 18
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: IN
15669: ST_TO_ADDR
// end ;
15670: LD_VAR 0 2
15674: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15675: LD_INT 0
15677: PPUSH
15678: PPUSH
15679: PPUSH
// result := [ ] ;
15680: LD_ADDR_VAR 0 4
15684: PUSH
15685: EMPTY
15686: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15687: LD_ADDR_VAR 0 5
15691: PUSH
15692: LD_VAR 0 2
15696: PPUSH
15697: LD_INT 21
15699: PUSH
15700: LD_INT 3
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PPUSH
15707: CALL_OW 70
15711: ST_TO_ADDR
// if not tmp then
15712: LD_VAR 0 5
15716: NOT
15717: IFFALSE 15721
// exit ;
15719: GO 15785
// if checkLink then
15721: LD_VAR 0 3
15725: IFFALSE 15775
// begin for i in tmp do
15727: LD_ADDR_VAR 0 6
15731: PUSH
15732: LD_VAR 0 5
15736: PUSH
15737: FOR_IN
15738: IFFALSE 15773
// if GetBase ( i ) <> base then
15740: LD_VAR 0 6
15744: PPUSH
15745: CALL_OW 274
15749: PUSH
15750: LD_VAR 0 1
15754: NONEQUAL
15755: IFFALSE 15771
// ComLinkToBase ( base , i ) ;
15757: LD_VAR 0 1
15761: PPUSH
15762: LD_VAR 0 6
15766: PPUSH
15767: CALL_OW 169
15771: GO 15737
15773: POP
15774: POP
// end ; result := tmp ;
15775: LD_ADDR_VAR 0 4
15779: PUSH
15780: LD_VAR 0 5
15784: ST_TO_ADDR
// end ;
15785: LD_VAR 0 4
15789: RET
// export function ComComplete ( units , b ) ; var i ; begin
15790: LD_INT 0
15792: PPUSH
15793: PPUSH
// if not units then
15794: LD_VAR 0 1
15798: NOT
15799: IFFALSE 15803
// exit ;
15801: GO 15893
// for i in units do
15803: LD_ADDR_VAR 0 4
15807: PUSH
15808: LD_VAR 0 1
15812: PUSH
15813: FOR_IN
15814: IFFALSE 15891
// if BuildingStatus ( b ) = bs_build then
15816: LD_VAR 0 2
15820: PPUSH
15821: CALL_OW 461
15825: PUSH
15826: LD_INT 1
15828: EQUAL
15829: IFFALSE 15889
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15831: LD_VAR 0 4
15835: PPUSH
15836: LD_STRING h
15838: PUSH
15839: LD_VAR 0 2
15843: PPUSH
15844: CALL_OW 250
15848: PUSH
15849: LD_VAR 0 2
15853: PPUSH
15854: CALL_OW 251
15858: PUSH
15859: LD_VAR 0 2
15863: PUSH
15864: LD_INT 0
15866: PUSH
15867: LD_INT 0
15869: PUSH
15870: LD_INT 0
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: PUSH
15882: EMPTY
15883: LIST
15884: PPUSH
15885: CALL_OW 446
15889: GO 15813
15891: POP
15892: POP
// end ;
15893: LD_VAR 0 3
15897: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
15898: LD_INT 0
15900: PPUSH
15901: PPUSH
15902: PPUSH
15903: PPUSH
15904: PPUSH
15905: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
15906: LD_VAR 0 1
15910: NOT
15911: PUSH
15912: LD_VAR 0 1
15916: PPUSH
15917: CALL_OW 263
15921: PUSH
15922: LD_INT 2
15924: NONEQUAL
15925: OR
15926: IFFALSE 15930
// exit ;
15928: GO 16246
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
15930: LD_ADDR_VAR 0 6
15934: PUSH
15935: LD_INT 22
15937: PUSH
15938: LD_VAR 0 1
15942: PPUSH
15943: CALL_OW 255
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: LD_INT 30
15957: PUSH
15958: LD_INT 36
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 34
15967: PUSH
15968: LD_INT 31
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: LIST
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PPUSH
15984: CALL_OW 69
15988: ST_TO_ADDR
// if not tmp then
15989: LD_VAR 0 6
15993: NOT
15994: IFFALSE 15998
// exit ;
15996: GO 16246
// result := [ ] ;
15998: LD_ADDR_VAR 0 2
16002: PUSH
16003: EMPTY
16004: ST_TO_ADDR
// for i in tmp do
16005: LD_ADDR_VAR 0 3
16009: PUSH
16010: LD_VAR 0 6
16014: PUSH
16015: FOR_IN
16016: IFFALSE 16087
// begin t := UnitsInside ( i ) ;
16018: LD_ADDR_VAR 0 4
16022: PUSH
16023: LD_VAR 0 3
16027: PPUSH
16028: CALL_OW 313
16032: ST_TO_ADDR
// if t then
16033: LD_VAR 0 4
16037: IFFALSE 16085
// for j in t do
16039: LD_ADDR_VAR 0 7
16043: PUSH
16044: LD_VAR 0 4
16048: PUSH
16049: FOR_IN
16050: IFFALSE 16083
// result := Replace ( result , result + 1 , j ) ;
16052: LD_ADDR_VAR 0 2
16056: PUSH
16057: LD_VAR 0 2
16061: PPUSH
16062: LD_VAR 0 2
16066: PUSH
16067: LD_INT 1
16069: PLUS
16070: PPUSH
16071: LD_VAR 0 7
16075: PPUSH
16076: CALL_OW 1
16080: ST_TO_ADDR
16081: GO 16049
16083: POP
16084: POP
// end ;
16085: GO 16015
16087: POP
16088: POP
// if not result then
16089: LD_VAR 0 2
16093: NOT
16094: IFFALSE 16098
// exit ;
16096: GO 16246
// mech := result [ 1 ] ;
16098: LD_ADDR_VAR 0 5
16102: PUSH
16103: LD_VAR 0 2
16107: PUSH
16108: LD_INT 1
16110: ARRAY
16111: ST_TO_ADDR
// if result > 1 then
16112: LD_VAR 0 2
16116: PUSH
16117: LD_INT 1
16119: GREATER
16120: IFFALSE 16232
// begin for i = 2 to result do
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: DOUBLE
16128: LD_INT 2
16130: DEC
16131: ST_TO_ADDR
16132: LD_VAR 0 2
16136: PUSH
16137: FOR_TO
16138: IFFALSE 16230
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16140: LD_ADDR_VAR 0 4
16144: PUSH
16145: LD_VAR 0 2
16149: PUSH
16150: LD_VAR 0 3
16154: ARRAY
16155: PPUSH
16156: LD_INT 3
16158: PPUSH
16159: CALL_OW 259
16163: PUSH
16164: LD_VAR 0 2
16168: PUSH
16169: LD_VAR 0 3
16173: ARRAY
16174: PPUSH
16175: CALL_OW 432
16179: MINUS
16180: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16181: LD_VAR 0 4
16185: PUSH
16186: LD_VAR 0 5
16190: PPUSH
16191: LD_INT 3
16193: PPUSH
16194: CALL_OW 259
16198: PUSH
16199: LD_VAR 0 5
16203: PPUSH
16204: CALL_OW 432
16208: MINUS
16209: GREATEREQUAL
16210: IFFALSE 16228
// mech := result [ i ] ;
16212: LD_ADDR_VAR 0 5
16216: PUSH
16217: LD_VAR 0 2
16221: PUSH
16222: LD_VAR 0 3
16226: ARRAY
16227: ST_TO_ADDR
// end ;
16228: GO 16137
16230: POP
16231: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16232: LD_VAR 0 1
16236: PPUSH
16237: LD_VAR 0 5
16241: PPUSH
16242: CALL_OW 135
// end ;
16246: LD_VAR 0 2
16250: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16251: LD_INT 0
16253: PPUSH
16254: PPUSH
16255: PPUSH
16256: PPUSH
16257: PPUSH
16258: PPUSH
16259: PPUSH
16260: PPUSH
16261: PPUSH
16262: PPUSH
16263: PPUSH
16264: PPUSH
16265: PPUSH
// result := [ ] ;
16266: LD_ADDR_VAR 0 7
16270: PUSH
16271: EMPTY
16272: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16273: LD_VAR 0 1
16277: PPUSH
16278: CALL_OW 266
16282: PUSH
16283: LD_INT 0
16285: PUSH
16286: LD_INT 1
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: IN
16293: NOT
16294: IFFALSE 16298
// exit ;
16296: GO 17932
// if name then
16298: LD_VAR 0 3
16302: IFFALSE 16318
// SetBName ( base_dep , name ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: LD_VAR 0 3
16313: PPUSH
16314: CALL_OW 500
// base := GetBase ( base_dep ) ;
16318: LD_ADDR_VAR 0 15
16322: PUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 274
16332: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16333: LD_ADDR_VAR 0 16
16337: PUSH
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 255
16347: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16348: LD_ADDR_VAR 0 17
16352: PUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 248
16362: ST_TO_ADDR
// if sources then
16363: LD_VAR 0 5
16367: IFFALSE 16414
// for i = 1 to 3 do
16369: LD_ADDR_VAR 0 8
16373: PUSH
16374: DOUBLE
16375: LD_INT 1
16377: DEC
16378: ST_TO_ADDR
16379: LD_INT 3
16381: PUSH
16382: FOR_TO
16383: IFFALSE 16412
// AddResourceType ( base , i , sources [ i ] ) ;
16385: LD_VAR 0 15
16389: PPUSH
16390: LD_VAR 0 8
16394: PPUSH
16395: LD_VAR 0 5
16399: PUSH
16400: LD_VAR 0 8
16404: ARRAY
16405: PPUSH
16406: CALL_OW 276
16410: GO 16382
16412: POP
16413: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16414: LD_ADDR_VAR 0 18
16418: PUSH
16419: LD_VAR 0 15
16423: PPUSH
16424: LD_VAR 0 2
16428: PPUSH
16429: LD_INT 1
16431: PPUSH
16432: CALL 15675 0 3
16436: ST_TO_ADDR
// InitHc ;
16437: CALL_OW 19
// InitUc ;
16441: CALL_OW 18
// uc_side := side ;
16445: LD_ADDR_OWVAR 20
16449: PUSH
16450: LD_VAR 0 16
16454: ST_TO_ADDR
// uc_nation := nation ;
16455: LD_ADDR_OWVAR 21
16459: PUSH
16460: LD_VAR 0 17
16464: ST_TO_ADDR
// if buildings then
16465: LD_VAR 0 18
16469: IFFALSE 17791
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16471: LD_ADDR_VAR 0 19
16475: PUSH
16476: LD_VAR 0 18
16480: PPUSH
16481: LD_INT 2
16483: PUSH
16484: LD_INT 30
16486: PUSH
16487: LD_INT 29
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 30
16496: PUSH
16497: LD_INT 30
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: LIST
16508: PPUSH
16509: CALL_OW 72
16513: ST_TO_ADDR
// if tmp then
16514: LD_VAR 0 19
16518: IFFALSE 16566
// for i in tmp do
16520: LD_ADDR_VAR 0 8
16524: PUSH
16525: LD_VAR 0 19
16529: PUSH
16530: FOR_IN
16531: IFFALSE 16564
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16533: LD_VAR 0 8
16537: PPUSH
16538: CALL_OW 250
16542: PPUSH
16543: LD_VAR 0 8
16547: PPUSH
16548: CALL_OW 251
16552: PPUSH
16553: LD_VAR 0 16
16557: PPUSH
16558: CALL_OW 441
16562: GO 16530
16564: POP
16565: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16566: LD_VAR 0 18
16570: PPUSH
16571: LD_INT 2
16573: PUSH
16574: LD_INT 30
16576: PUSH
16577: LD_INT 32
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 30
16586: PUSH
16587: LD_INT 33
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: PPUSH
16599: CALL_OW 72
16603: IFFALSE 16691
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16605: LD_ADDR_VAR 0 8
16609: PUSH
16610: LD_VAR 0 18
16614: PPUSH
16615: LD_INT 2
16617: PUSH
16618: LD_INT 30
16620: PUSH
16621: LD_INT 32
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 30
16630: PUSH
16631: LD_INT 33
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: PPUSH
16643: CALL_OW 72
16647: PUSH
16648: FOR_IN
16649: IFFALSE 16689
// begin if not GetBWeapon ( i ) then
16651: LD_VAR 0 8
16655: PPUSH
16656: CALL_OW 269
16660: NOT
16661: IFFALSE 16687
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16663: LD_VAR 0 8
16667: PPUSH
16668: LD_VAR 0 8
16672: PPUSH
16673: LD_VAR 0 2
16677: PPUSH
16678: CALL 17937 0 2
16682: PPUSH
16683: CALL_OW 431
// end ;
16687: GO 16648
16689: POP
16690: POP
// end ; for i = 1 to personel do
16691: LD_ADDR_VAR 0 8
16695: PUSH
16696: DOUBLE
16697: LD_INT 1
16699: DEC
16700: ST_TO_ADDR
16701: LD_VAR 0 6
16705: PUSH
16706: FOR_TO
16707: IFFALSE 17771
// begin if i > 4 then
16709: LD_VAR 0 8
16713: PUSH
16714: LD_INT 4
16716: GREATER
16717: IFFALSE 16721
// break ;
16719: GO 17771
// case i of 1 :
16721: LD_VAR 0 8
16725: PUSH
16726: LD_INT 1
16728: DOUBLE
16729: EQUAL
16730: IFTRUE 16734
16732: GO 16814
16734: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16735: LD_ADDR_VAR 0 12
16739: PUSH
16740: LD_VAR 0 18
16744: PPUSH
16745: LD_INT 22
16747: PUSH
16748: LD_VAR 0 16
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 58
16759: PUSH
16760: EMPTY
16761: LIST
16762: PUSH
16763: LD_INT 2
16765: PUSH
16766: LD_INT 30
16768: PUSH
16769: LD_INT 32
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 30
16778: PUSH
16779: LD_INT 4
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 30
16788: PUSH
16789: LD_INT 5
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: PPUSH
16807: CALL_OW 72
16811: ST_TO_ADDR
16812: GO 17036
16814: LD_INT 2
16816: DOUBLE
16817: EQUAL
16818: IFTRUE 16822
16820: GO 16884
16822: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16823: LD_ADDR_VAR 0 12
16827: PUSH
16828: LD_VAR 0 18
16832: PPUSH
16833: LD_INT 22
16835: PUSH
16836: LD_VAR 0 16
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 2
16847: PUSH
16848: LD_INT 30
16850: PUSH
16851: LD_INT 0
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 30
16860: PUSH
16861: LD_INT 1
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: LIST
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PPUSH
16877: CALL_OW 72
16881: ST_TO_ADDR
16882: GO 17036
16884: LD_INT 3
16886: DOUBLE
16887: EQUAL
16888: IFTRUE 16892
16890: GO 16954
16892: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
16893: LD_ADDR_VAR 0 12
16897: PUSH
16898: LD_VAR 0 18
16902: PPUSH
16903: LD_INT 22
16905: PUSH
16906: LD_VAR 0 16
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 2
16917: PUSH
16918: LD_INT 30
16920: PUSH
16921: LD_INT 2
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 30
16930: PUSH
16931: LD_INT 3
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PPUSH
16947: CALL_OW 72
16951: ST_TO_ADDR
16952: GO 17036
16954: LD_INT 4
16956: DOUBLE
16957: EQUAL
16958: IFTRUE 16962
16960: GO 17035
16962: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
16963: LD_ADDR_VAR 0 12
16967: PUSH
16968: LD_VAR 0 18
16972: PPUSH
16973: LD_INT 22
16975: PUSH
16976: LD_VAR 0 16
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 2
16987: PUSH
16988: LD_INT 30
16990: PUSH
16991: LD_INT 6
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 30
17000: PUSH
17001: LD_INT 7
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 30
17010: PUSH
17011: LD_INT 8
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 72
17032: ST_TO_ADDR
17033: GO 17036
17035: POP
// if i = 1 then
17036: LD_VAR 0 8
17040: PUSH
17041: LD_INT 1
17043: EQUAL
17044: IFFALSE 17155
// begin tmp := [ ] ;
17046: LD_ADDR_VAR 0 19
17050: PUSH
17051: EMPTY
17052: ST_TO_ADDR
// for j in f do
17053: LD_ADDR_VAR 0 9
17057: PUSH
17058: LD_VAR 0 12
17062: PUSH
17063: FOR_IN
17064: IFFALSE 17137
// if GetBType ( j ) = b_bunker then
17066: LD_VAR 0 9
17070: PPUSH
17071: CALL_OW 266
17075: PUSH
17076: LD_INT 32
17078: EQUAL
17079: IFFALSE 17106
// tmp := Insert ( tmp , 1 , j ) else
17081: LD_ADDR_VAR 0 19
17085: PUSH
17086: LD_VAR 0 19
17090: PPUSH
17091: LD_INT 1
17093: PPUSH
17094: LD_VAR 0 9
17098: PPUSH
17099: CALL_OW 2
17103: ST_TO_ADDR
17104: GO 17135
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17106: LD_ADDR_VAR 0 19
17110: PUSH
17111: LD_VAR 0 19
17115: PPUSH
17116: LD_VAR 0 19
17120: PUSH
17121: LD_INT 1
17123: PLUS
17124: PPUSH
17125: LD_VAR 0 9
17129: PPUSH
17130: CALL_OW 2
17134: ST_TO_ADDR
17135: GO 17063
17137: POP
17138: POP
// if tmp then
17139: LD_VAR 0 19
17143: IFFALSE 17155
// f := tmp ;
17145: LD_ADDR_VAR 0 12
17149: PUSH
17150: LD_VAR 0 19
17154: ST_TO_ADDR
// end ; x := personel [ i ] ;
17155: LD_ADDR_VAR 0 13
17159: PUSH
17160: LD_VAR 0 6
17164: PUSH
17165: LD_VAR 0 8
17169: ARRAY
17170: ST_TO_ADDR
// if x = - 1 then
17171: LD_VAR 0 13
17175: PUSH
17176: LD_INT 1
17178: NEG
17179: EQUAL
17180: IFFALSE 17389
// begin for j in f do
17182: LD_ADDR_VAR 0 9
17186: PUSH
17187: LD_VAR 0 12
17191: PUSH
17192: FOR_IN
17193: IFFALSE 17385
// repeat InitHc ;
17195: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17199: LD_VAR 0 9
17203: PPUSH
17204: CALL_OW 266
17208: PUSH
17209: LD_INT 5
17211: EQUAL
17212: IFFALSE 17282
// begin if UnitsInside ( j ) < 3 then
17214: LD_VAR 0 9
17218: PPUSH
17219: CALL_OW 313
17223: PUSH
17224: LD_INT 3
17226: LESS
17227: IFFALSE 17263
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17229: LD_INT 0
17231: PPUSH
17232: LD_INT 5
17234: PUSH
17235: LD_INT 8
17237: PUSH
17238: LD_INT 9
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: LIST
17245: PUSH
17246: LD_VAR 0 17
17250: ARRAY
17251: PPUSH
17252: LD_VAR 0 4
17256: PPUSH
17257: CALL_OW 380
17261: GO 17280
// PrepareHuman ( false , i , skill ) ;
17263: LD_INT 0
17265: PPUSH
17266: LD_VAR 0 8
17270: PPUSH
17271: LD_VAR 0 4
17275: PPUSH
17276: CALL_OW 380
// end else
17280: GO 17299
// PrepareHuman ( false , i , skill ) ;
17282: LD_INT 0
17284: PPUSH
17285: LD_VAR 0 8
17289: PPUSH
17290: LD_VAR 0 4
17294: PPUSH
17295: CALL_OW 380
// un := CreateHuman ;
17299: LD_ADDR_VAR 0 14
17303: PUSH
17304: CALL_OW 44
17308: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17309: LD_ADDR_VAR 0 7
17313: PUSH
17314: LD_VAR 0 7
17318: PPUSH
17319: LD_INT 1
17321: PPUSH
17322: LD_VAR 0 14
17326: PPUSH
17327: CALL_OW 2
17331: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17332: LD_VAR 0 14
17336: PPUSH
17337: LD_VAR 0 9
17341: PPUSH
17342: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17346: LD_VAR 0 9
17350: PPUSH
17351: CALL_OW 313
17355: PUSH
17356: LD_INT 6
17358: EQUAL
17359: PUSH
17360: LD_VAR 0 9
17364: PPUSH
17365: CALL_OW 266
17369: PUSH
17370: LD_INT 32
17372: PUSH
17373: LD_INT 31
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: IN
17380: OR
17381: IFFALSE 17195
17383: GO 17192
17385: POP
17386: POP
// end else
17387: GO 17769
// for j = 1 to x do
17389: LD_ADDR_VAR 0 9
17393: PUSH
17394: DOUBLE
17395: LD_INT 1
17397: DEC
17398: ST_TO_ADDR
17399: LD_VAR 0 13
17403: PUSH
17404: FOR_TO
17405: IFFALSE 17767
// begin InitHc ;
17407: CALL_OW 19
// if not f then
17411: LD_VAR 0 12
17415: NOT
17416: IFFALSE 17505
// begin PrepareHuman ( false , i , skill ) ;
17418: LD_INT 0
17420: PPUSH
17421: LD_VAR 0 8
17425: PPUSH
17426: LD_VAR 0 4
17430: PPUSH
17431: CALL_OW 380
// un := CreateHuman ;
17435: LD_ADDR_VAR 0 14
17439: PUSH
17440: CALL_OW 44
17444: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17445: LD_ADDR_VAR 0 7
17449: PUSH
17450: LD_VAR 0 7
17454: PPUSH
17455: LD_INT 1
17457: PPUSH
17458: LD_VAR 0 14
17462: PPUSH
17463: CALL_OW 2
17467: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17468: LD_VAR 0 14
17472: PPUSH
17473: LD_VAR 0 1
17477: PPUSH
17478: CALL_OW 250
17482: PPUSH
17483: LD_VAR 0 1
17487: PPUSH
17488: CALL_OW 251
17492: PPUSH
17493: LD_INT 10
17495: PPUSH
17496: LD_INT 0
17498: PPUSH
17499: CALL_OW 50
// continue ;
17503: GO 17404
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17505: LD_VAR 0 12
17509: PUSH
17510: LD_INT 1
17512: ARRAY
17513: PPUSH
17514: CALL_OW 313
17518: PUSH
17519: LD_VAR 0 12
17523: PUSH
17524: LD_INT 1
17526: ARRAY
17527: PPUSH
17528: CALL_OW 266
17532: PUSH
17533: LD_INT 32
17535: PUSH
17536: LD_INT 31
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: IN
17543: AND
17544: PUSH
17545: LD_VAR 0 12
17549: PUSH
17550: LD_INT 1
17552: ARRAY
17553: PPUSH
17554: CALL_OW 313
17558: PUSH
17559: LD_INT 6
17561: EQUAL
17562: OR
17563: IFFALSE 17583
// f := Delete ( f , 1 ) ;
17565: LD_ADDR_VAR 0 12
17569: PUSH
17570: LD_VAR 0 12
17574: PPUSH
17575: LD_INT 1
17577: PPUSH
17578: CALL_OW 3
17582: ST_TO_ADDR
// if not f then
17583: LD_VAR 0 12
17587: NOT
17588: IFFALSE 17606
// begin x := x + 2 ;
17590: LD_ADDR_VAR 0 13
17594: PUSH
17595: LD_VAR 0 13
17599: PUSH
17600: LD_INT 2
17602: PLUS
17603: ST_TO_ADDR
// continue ;
17604: GO 17404
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17606: LD_VAR 0 12
17610: PUSH
17611: LD_INT 1
17613: ARRAY
17614: PPUSH
17615: CALL_OW 266
17619: PUSH
17620: LD_INT 5
17622: EQUAL
17623: IFFALSE 17697
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17625: LD_VAR 0 12
17629: PUSH
17630: LD_INT 1
17632: ARRAY
17633: PPUSH
17634: CALL_OW 313
17638: PUSH
17639: LD_INT 3
17641: LESS
17642: IFFALSE 17678
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17644: LD_INT 0
17646: PPUSH
17647: LD_INT 5
17649: PUSH
17650: LD_INT 8
17652: PUSH
17653: LD_INT 9
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: LIST
17660: PUSH
17661: LD_VAR 0 17
17665: ARRAY
17666: PPUSH
17667: LD_VAR 0 4
17671: PPUSH
17672: CALL_OW 380
17676: GO 17695
// PrepareHuman ( false , i , skill ) ;
17678: LD_INT 0
17680: PPUSH
17681: LD_VAR 0 8
17685: PPUSH
17686: LD_VAR 0 4
17690: PPUSH
17691: CALL_OW 380
// end else
17695: GO 17714
// PrepareHuman ( false , i , skill ) ;
17697: LD_INT 0
17699: PPUSH
17700: LD_VAR 0 8
17704: PPUSH
17705: LD_VAR 0 4
17709: PPUSH
17710: CALL_OW 380
// un := CreateHuman ;
17714: LD_ADDR_VAR 0 14
17718: PUSH
17719: CALL_OW 44
17723: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17724: LD_ADDR_VAR 0 7
17728: PUSH
17729: LD_VAR 0 7
17733: PPUSH
17734: LD_INT 1
17736: PPUSH
17737: LD_VAR 0 14
17741: PPUSH
17742: CALL_OW 2
17746: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17747: LD_VAR 0 14
17751: PPUSH
17752: LD_VAR 0 12
17756: PUSH
17757: LD_INT 1
17759: ARRAY
17760: PPUSH
17761: CALL_OW 52
// end ;
17765: GO 17404
17767: POP
17768: POP
// end ;
17769: GO 16706
17771: POP
17772: POP
// result := result ^ buildings ;
17773: LD_ADDR_VAR 0 7
17777: PUSH
17778: LD_VAR 0 7
17782: PUSH
17783: LD_VAR 0 18
17787: ADD
17788: ST_TO_ADDR
// end else
17789: GO 17932
// begin for i = 1 to personel do
17791: LD_ADDR_VAR 0 8
17795: PUSH
17796: DOUBLE
17797: LD_INT 1
17799: DEC
17800: ST_TO_ADDR
17801: LD_VAR 0 6
17805: PUSH
17806: FOR_TO
17807: IFFALSE 17930
// begin if i > 4 then
17809: LD_VAR 0 8
17813: PUSH
17814: LD_INT 4
17816: GREATER
17817: IFFALSE 17821
// break ;
17819: GO 17930
// x := personel [ i ] ;
17821: LD_ADDR_VAR 0 13
17825: PUSH
17826: LD_VAR 0 6
17830: PUSH
17831: LD_VAR 0 8
17835: ARRAY
17836: ST_TO_ADDR
// if x = - 1 then
17837: LD_VAR 0 13
17841: PUSH
17842: LD_INT 1
17844: NEG
17845: EQUAL
17846: IFFALSE 17850
// continue ;
17848: GO 17806
// PrepareHuman ( false , i , skill ) ;
17850: LD_INT 0
17852: PPUSH
17853: LD_VAR 0 8
17857: PPUSH
17858: LD_VAR 0 4
17862: PPUSH
17863: CALL_OW 380
// un := CreateHuman ;
17867: LD_ADDR_VAR 0 14
17871: PUSH
17872: CALL_OW 44
17876: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17877: LD_VAR 0 14
17881: PPUSH
17882: LD_VAR 0 1
17886: PPUSH
17887: CALL_OW 250
17891: PPUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 251
17901: PPUSH
17902: LD_INT 10
17904: PPUSH
17905: LD_INT 0
17907: PPUSH
17908: CALL_OW 50
// result := result ^ un ;
17912: LD_ADDR_VAR 0 7
17916: PUSH
17917: LD_VAR 0 7
17921: PUSH
17922: LD_VAR 0 14
17926: ADD
17927: ST_TO_ADDR
// end ;
17928: GO 17806
17930: POP
17931: POP
// end ; end ;
17932: LD_VAR 0 7
17936: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
17937: LD_INT 0
17939: PPUSH
17940: PPUSH
17941: PPUSH
17942: PPUSH
17943: PPUSH
17944: PPUSH
17945: PPUSH
17946: PPUSH
17947: PPUSH
17948: PPUSH
17949: PPUSH
17950: PPUSH
17951: PPUSH
17952: PPUSH
17953: PPUSH
17954: PPUSH
// result := false ;
17955: LD_ADDR_VAR 0 3
17959: PUSH
17960: LD_INT 0
17962: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
17963: LD_VAR 0 1
17967: NOT
17968: PUSH
17969: LD_VAR 0 1
17973: PPUSH
17974: CALL_OW 266
17978: PUSH
17979: LD_INT 32
17981: PUSH
17982: LD_INT 33
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: IN
17989: NOT
17990: OR
17991: IFFALSE 17995
// exit ;
17993: GO 19104
// nat := GetNation ( tower ) ;
17995: LD_ADDR_VAR 0 12
17999: PUSH
18000: LD_VAR 0 1
18004: PPUSH
18005: CALL_OW 248
18009: ST_TO_ADDR
// side := GetSide ( tower ) ;
18010: LD_ADDR_VAR 0 16
18014: PUSH
18015: LD_VAR 0 1
18019: PPUSH
18020: CALL_OW 255
18024: ST_TO_ADDR
// x := GetX ( tower ) ;
18025: LD_ADDR_VAR 0 10
18029: PUSH
18030: LD_VAR 0 1
18034: PPUSH
18035: CALL_OW 250
18039: ST_TO_ADDR
// y := GetY ( tower ) ;
18040: LD_ADDR_VAR 0 11
18044: PUSH
18045: LD_VAR 0 1
18049: PPUSH
18050: CALL_OW 251
18054: ST_TO_ADDR
// if not x or not y then
18055: LD_VAR 0 10
18059: NOT
18060: PUSH
18061: LD_VAR 0 11
18065: NOT
18066: OR
18067: IFFALSE 18071
// exit ;
18069: GO 19104
// weapon := 0 ;
18071: LD_ADDR_VAR 0 18
18075: PUSH
18076: LD_INT 0
18078: ST_TO_ADDR
// fac_list := [ ] ;
18079: LD_ADDR_VAR 0 17
18083: PUSH
18084: EMPTY
18085: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18086: LD_ADDR_VAR 0 6
18090: PUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 274
18100: PPUSH
18101: LD_VAR 0 2
18105: PPUSH
18106: LD_INT 0
18108: PPUSH
18109: CALL 15675 0 3
18113: PPUSH
18114: LD_INT 30
18116: PUSH
18117: LD_INT 3
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PPUSH
18124: CALL_OW 72
18128: ST_TO_ADDR
// if not factories then
18129: LD_VAR 0 6
18133: NOT
18134: IFFALSE 18138
// exit ;
18136: GO 19104
// for i in factories do
18138: LD_ADDR_VAR 0 8
18142: PUSH
18143: LD_VAR 0 6
18147: PUSH
18148: FOR_IN
18149: IFFALSE 18174
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18151: LD_ADDR_VAR 0 17
18155: PUSH
18156: LD_VAR 0 17
18160: PUSH
18161: LD_VAR 0 8
18165: PPUSH
18166: CALL_OW 478
18170: UNION
18171: ST_TO_ADDR
18172: GO 18148
18174: POP
18175: POP
// if not fac_list then
18176: LD_VAR 0 17
18180: NOT
18181: IFFALSE 18185
// exit ;
18183: GO 19104
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18185: LD_ADDR_VAR 0 5
18189: PUSH
18190: LD_INT 4
18192: PUSH
18193: LD_INT 5
18195: PUSH
18196: LD_INT 9
18198: PUSH
18199: LD_INT 10
18201: PUSH
18202: LD_INT 6
18204: PUSH
18205: LD_INT 7
18207: PUSH
18208: LD_INT 11
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 27
18222: PUSH
18223: LD_INT 28
18225: PUSH
18226: LD_INT 26
18228: PUSH
18229: LD_INT 30
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 43
18240: PUSH
18241: LD_INT 44
18243: PUSH
18244: LD_INT 46
18246: PUSH
18247: LD_INT 45
18249: PUSH
18250: LD_INT 47
18252: PUSH
18253: LD_INT 49
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: LIST
18268: PUSH
18269: LD_VAR 0 12
18273: ARRAY
18274: ST_TO_ADDR
// list := list isect fac_list ;
18275: LD_ADDR_VAR 0 5
18279: PUSH
18280: LD_VAR 0 5
18284: PUSH
18285: LD_VAR 0 17
18289: ISECT
18290: ST_TO_ADDR
// if not list then
18291: LD_VAR 0 5
18295: NOT
18296: IFFALSE 18300
// exit ;
18298: GO 19104
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18300: LD_VAR 0 12
18304: PUSH
18305: LD_INT 3
18307: EQUAL
18308: PUSH
18309: LD_INT 49
18311: PUSH
18312: LD_VAR 0 5
18316: IN
18317: AND
18318: PUSH
18319: LD_INT 31
18321: PPUSH
18322: LD_VAR 0 16
18326: PPUSH
18327: CALL_OW 321
18331: PUSH
18332: LD_INT 2
18334: EQUAL
18335: AND
18336: IFFALSE 18396
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18338: LD_INT 22
18340: PUSH
18341: LD_VAR 0 16
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 35
18352: PUSH
18353: LD_INT 49
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 91
18362: PUSH
18363: LD_VAR 0 1
18367: PUSH
18368: LD_INT 10
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 69
18385: NOT
18386: IFFALSE 18396
// weapon := ru_time_lapser ;
18388: LD_ADDR_VAR 0 18
18392: PUSH
18393: LD_INT 49
18395: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18396: LD_VAR 0 12
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: LD_INT 2
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: IN
18411: PUSH
18412: LD_INT 11
18414: PUSH
18415: LD_VAR 0 5
18419: IN
18420: PUSH
18421: LD_INT 30
18423: PUSH
18424: LD_VAR 0 5
18428: IN
18429: OR
18430: AND
18431: PUSH
18432: LD_INT 6
18434: PPUSH
18435: LD_VAR 0 16
18439: PPUSH
18440: CALL_OW 321
18444: PUSH
18445: LD_INT 2
18447: EQUAL
18448: AND
18449: IFFALSE 18614
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18451: LD_INT 22
18453: PUSH
18454: LD_VAR 0 16
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 2
18465: PUSH
18466: LD_INT 35
18468: PUSH
18469: LD_INT 11
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 35
18478: PUSH
18479: LD_INT 30
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 91
18493: PUSH
18494: LD_VAR 0 1
18498: PUSH
18499: LD_INT 18
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: LIST
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: LIST
18511: PPUSH
18512: CALL_OW 69
18516: NOT
18517: PUSH
18518: LD_INT 22
18520: PUSH
18521: LD_VAR 0 16
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: LD_INT 30
18535: PUSH
18536: LD_INT 32
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 30
18545: PUSH
18546: LD_INT 33
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 91
18560: PUSH
18561: LD_VAR 0 1
18565: PUSH
18566: LD_INT 12
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: LIST
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: LIST
18578: PUSH
18579: EMPTY
18580: LIST
18581: PPUSH
18582: CALL_OW 69
18586: PUSH
18587: LD_INT 2
18589: GREATER
18590: AND
18591: IFFALSE 18614
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18593: LD_ADDR_VAR 0 18
18597: PUSH
18598: LD_INT 11
18600: PUSH
18601: LD_INT 30
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_VAR 0 12
18612: ARRAY
18613: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18614: LD_VAR 0 18
18618: NOT
18619: PUSH
18620: LD_INT 40
18622: PPUSH
18623: LD_VAR 0 16
18627: PPUSH
18628: CALL_OW 321
18632: PUSH
18633: LD_INT 2
18635: EQUAL
18636: AND
18637: PUSH
18638: LD_INT 7
18640: PUSH
18641: LD_VAR 0 5
18645: IN
18646: PUSH
18647: LD_INT 28
18649: PUSH
18650: LD_VAR 0 5
18654: IN
18655: OR
18656: PUSH
18657: LD_INT 45
18659: PUSH
18660: LD_VAR 0 5
18664: IN
18665: OR
18666: AND
18667: IFFALSE 18921
// begin hex := GetHexInfo ( x , y ) ;
18669: LD_ADDR_VAR 0 4
18673: PUSH
18674: LD_VAR 0 10
18678: PPUSH
18679: LD_VAR 0 11
18683: PPUSH
18684: CALL_OW 546
18688: ST_TO_ADDR
// if hex [ 1 ] then
18689: LD_VAR 0 4
18693: PUSH
18694: LD_INT 1
18696: ARRAY
18697: IFFALSE 18701
// exit ;
18699: GO 19104
// height := hex [ 2 ] ;
18701: LD_ADDR_VAR 0 15
18705: PUSH
18706: LD_VAR 0 4
18710: PUSH
18711: LD_INT 2
18713: ARRAY
18714: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18715: LD_ADDR_VAR 0 14
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: LD_INT 2
18725: PUSH
18726: LD_INT 3
18728: PUSH
18729: LD_INT 5
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: ST_TO_ADDR
// for i in tmp do
18738: LD_ADDR_VAR 0 8
18742: PUSH
18743: LD_VAR 0 14
18747: PUSH
18748: FOR_IN
18749: IFFALSE 18919
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18751: LD_ADDR_VAR 0 9
18755: PUSH
18756: LD_VAR 0 10
18760: PPUSH
18761: LD_VAR 0 8
18765: PPUSH
18766: LD_INT 5
18768: PPUSH
18769: CALL_OW 272
18773: PUSH
18774: LD_VAR 0 11
18778: PPUSH
18779: LD_VAR 0 8
18783: PPUSH
18784: LD_INT 5
18786: PPUSH
18787: CALL_OW 273
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18796: LD_VAR 0 9
18800: PUSH
18801: LD_INT 1
18803: ARRAY
18804: PPUSH
18805: LD_VAR 0 9
18809: PUSH
18810: LD_INT 2
18812: ARRAY
18813: PPUSH
18814: CALL_OW 488
18818: IFFALSE 18917
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18820: LD_ADDR_VAR 0 4
18824: PUSH
18825: LD_VAR 0 9
18829: PUSH
18830: LD_INT 1
18832: ARRAY
18833: PPUSH
18834: LD_VAR 0 9
18838: PUSH
18839: LD_INT 2
18841: ARRAY
18842: PPUSH
18843: CALL_OW 546
18847: ST_TO_ADDR
// if hex [ 1 ] then
18848: LD_VAR 0 4
18852: PUSH
18853: LD_INT 1
18855: ARRAY
18856: IFFALSE 18860
// continue ;
18858: GO 18748
// h := hex [ 2 ] ;
18860: LD_ADDR_VAR 0 13
18864: PUSH
18865: LD_VAR 0 4
18869: PUSH
18870: LD_INT 2
18872: ARRAY
18873: ST_TO_ADDR
// if h + 7 < height then
18874: LD_VAR 0 13
18878: PUSH
18879: LD_INT 7
18881: PLUS
18882: PUSH
18883: LD_VAR 0 15
18887: LESS
18888: IFFALSE 18917
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
18890: LD_ADDR_VAR 0 18
18894: PUSH
18895: LD_INT 7
18897: PUSH
18898: LD_INT 28
18900: PUSH
18901: LD_INT 45
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PUSH
18909: LD_VAR 0 12
18913: ARRAY
18914: ST_TO_ADDR
// break ;
18915: GO 18919
// end ; end ; end ;
18917: GO 18748
18919: POP
18920: POP
// end ; if not weapon then
18921: LD_VAR 0 18
18925: NOT
18926: IFFALSE 18986
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
18928: LD_ADDR_VAR 0 5
18932: PUSH
18933: LD_VAR 0 5
18937: PUSH
18938: LD_INT 11
18940: PUSH
18941: LD_INT 30
18943: PUSH
18944: LD_INT 49
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: LIST
18951: DIFF
18952: ST_TO_ADDR
// if not list then
18953: LD_VAR 0 5
18957: NOT
18958: IFFALSE 18962
// exit ;
18960: GO 19104
// weapon := list [ rand ( 1 , list ) ] ;
18962: LD_ADDR_VAR 0 18
18966: PUSH
18967: LD_VAR 0 5
18971: PUSH
18972: LD_INT 1
18974: PPUSH
18975: LD_VAR 0 5
18979: PPUSH
18980: CALL_OW 12
18984: ARRAY
18985: ST_TO_ADDR
// end ; if weapon then
18986: LD_VAR 0 18
18990: IFFALSE 19104
// begin tmp := CostOfWeapon ( weapon ) ;
18992: LD_ADDR_VAR 0 14
18996: PUSH
18997: LD_VAR 0 18
19001: PPUSH
19002: CALL_OW 451
19006: ST_TO_ADDR
// j := GetBase ( tower ) ;
19007: LD_ADDR_VAR 0 9
19011: PUSH
19012: LD_VAR 0 1
19016: PPUSH
19017: CALL_OW 274
19021: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19022: LD_VAR 0 9
19026: PPUSH
19027: LD_INT 1
19029: PPUSH
19030: CALL_OW 275
19034: PUSH
19035: LD_VAR 0 14
19039: PUSH
19040: LD_INT 1
19042: ARRAY
19043: GREATEREQUAL
19044: PUSH
19045: LD_VAR 0 9
19049: PPUSH
19050: LD_INT 2
19052: PPUSH
19053: CALL_OW 275
19057: PUSH
19058: LD_VAR 0 14
19062: PUSH
19063: LD_INT 2
19065: ARRAY
19066: GREATEREQUAL
19067: AND
19068: PUSH
19069: LD_VAR 0 9
19073: PPUSH
19074: LD_INT 3
19076: PPUSH
19077: CALL_OW 275
19081: PUSH
19082: LD_VAR 0 14
19086: PUSH
19087: LD_INT 3
19089: ARRAY
19090: GREATEREQUAL
19091: AND
19092: IFFALSE 19104
// result := weapon ;
19094: LD_ADDR_VAR 0 3
19098: PUSH
19099: LD_VAR 0 18
19103: ST_TO_ADDR
// end ; end ;
19104: LD_VAR 0 3
19108: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19109: LD_INT 0
19111: PPUSH
19112: PPUSH
// result := true ;
19113: LD_ADDR_VAR 0 3
19117: PUSH
19118: LD_INT 1
19120: ST_TO_ADDR
// if array1 = array2 then
19121: LD_VAR 0 1
19125: PUSH
19126: LD_VAR 0 2
19130: EQUAL
19131: IFFALSE 19191
// begin for i = 1 to array1 do
19133: LD_ADDR_VAR 0 4
19137: PUSH
19138: DOUBLE
19139: LD_INT 1
19141: DEC
19142: ST_TO_ADDR
19143: LD_VAR 0 1
19147: PUSH
19148: FOR_TO
19149: IFFALSE 19187
// if array1 [ i ] <> array2 [ i ] then
19151: LD_VAR 0 1
19155: PUSH
19156: LD_VAR 0 4
19160: ARRAY
19161: PUSH
19162: LD_VAR 0 2
19166: PUSH
19167: LD_VAR 0 4
19171: ARRAY
19172: NONEQUAL
19173: IFFALSE 19185
// begin result := false ;
19175: LD_ADDR_VAR 0 3
19179: PUSH
19180: LD_INT 0
19182: ST_TO_ADDR
// break ;
19183: GO 19187
// end ;
19185: GO 19148
19187: POP
19188: POP
// end else
19189: GO 19199
// result := false ;
19191: LD_ADDR_VAR 0 3
19195: PUSH
19196: LD_INT 0
19198: ST_TO_ADDR
// end ;
19199: LD_VAR 0 3
19203: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19204: LD_INT 0
19206: PPUSH
19207: PPUSH
// if not array1 or not array2 then
19208: LD_VAR 0 1
19212: NOT
19213: PUSH
19214: LD_VAR 0 2
19218: NOT
19219: OR
19220: IFFALSE 19224
// exit ;
19222: GO 19288
// result := true ;
19224: LD_ADDR_VAR 0 3
19228: PUSH
19229: LD_INT 1
19231: ST_TO_ADDR
// for i = 1 to array1 do
19232: LD_ADDR_VAR 0 4
19236: PUSH
19237: DOUBLE
19238: LD_INT 1
19240: DEC
19241: ST_TO_ADDR
19242: LD_VAR 0 1
19246: PUSH
19247: FOR_TO
19248: IFFALSE 19286
// if array1 [ i ] <> array2 [ i ] then
19250: LD_VAR 0 1
19254: PUSH
19255: LD_VAR 0 4
19259: ARRAY
19260: PUSH
19261: LD_VAR 0 2
19265: PUSH
19266: LD_VAR 0 4
19270: ARRAY
19271: NONEQUAL
19272: IFFALSE 19284
// begin result := false ;
19274: LD_ADDR_VAR 0 3
19278: PUSH
19279: LD_INT 0
19281: ST_TO_ADDR
// break ;
19282: GO 19286
// end ;
19284: GO 19247
19286: POP
19287: POP
// end ;
19288: LD_VAR 0 3
19292: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19293: LD_INT 0
19295: PPUSH
19296: PPUSH
19297: PPUSH
// pom := GetBase ( fac ) ;
19298: LD_ADDR_VAR 0 5
19302: PUSH
19303: LD_VAR 0 1
19307: PPUSH
19308: CALL_OW 274
19312: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19313: LD_ADDR_VAR 0 4
19317: PUSH
19318: LD_VAR 0 2
19322: PUSH
19323: LD_INT 1
19325: ARRAY
19326: PPUSH
19327: LD_VAR 0 2
19331: PUSH
19332: LD_INT 2
19334: ARRAY
19335: PPUSH
19336: LD_VAR 0 2
19340: PUSH
19341: LD_INT 3
19343: ARRAY
19344: PPUSH
19345: LD_VAR 0 2
19349: PUSH
19350: LD_INT 4
19352: ARRAY
19353: PPUSH
19354: CALL_OW 449
19358: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19359: LD_ADDR_VAR 0 3
19363: PUSH
19364: LD_VAR 0 5
19368: PPUSH
19369: LD_INT 1
19371: PPUSH
19372: CALL_OW 275
19376: PUSH
19377: LD_VAR 0 4
19381: PUSH
19382: LD_INT 1
19384: ARRAY
19385: GREATEREQUAL
19386: PUSH
19387: LD_VAR 0 5
19391: PPUSH
19392: LD_INT 2
19394: PPUSH
19395: CALL_OW 275
19399: PUSH
19400: LD_VAR 0 4
19404: PUSH
19405: LD_INT 2
19407: ARRAY
19408: GREATEREQUAL
19409: AND
19410: PUSH
19411: LD_VAR 0 5
19415: PPUSH
19416: LD_INT 3
19418: PPUSH
19419: CALL_OW 275
19423: PUSH
19424: LD_VAR 0 4
19428: PUSH
19429: LD_INT 3
19431: ARRAY
19432: GREATEREQUAL
19433: AND
19434: ST_TO_ADDR
// end ;
19435: LD_VAR 0 3
19439: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19440: LD_INT 0
19442: PPUSH
19443: PPUSH
19444: PPUSH
19445: PPUSH
// pom := GetBase ( building ) ;
19446: LD_ADDR_VAR 0 3
19450: PUSH
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL_OW 274
19460: ST_TO_ADDR
// if not pom then
19461: LD_VAR 0 3
19465: NOT
19466: IFFALSE 19470
// exit ;
19468: GO 19640
// btype := GetBType ( building ) ;
19470: LD_ADDR_VAR 0 5
19474: PUSH
19475: LD_VAR 0 1
19479: PPUSH
19480: CALL_OW 266
19484: ST_TO_ADDR
// if btype = b_armoury then
19485: LD_VAR 0 5
19489: PUSH
19490: LD_INT 4
19492: EQUAL
19493: IFFALSE 19503
// btype := b_barracks ;
19495: LD_ADDR_VAR 0 5
19499: PUSH
19500: LD_INT 5
19502: ST_TO_ADDR
// if btype = b_depot then
19503: LD_VAR 0 5
19507: PUSH
19508: LD_INT 0
19510: EQUAL
19511: IFFALSE 19521
// btype := b_warehouse ;
19513: LD_ADDR_VAR 0 5
19517: PUSH
19518: LD_INT 1
19520: ST_TO_ADDR
// if btype = b_workshop then
19521: LD_VAR 0 5
19525: PUSH
19526: LD_INT 2
19528: EQUAL
19529: IFFALSE 19539
// btype := b_factory ;
19531: LD_ADDR_VAR 0 5
19535: PUSH
19536: LD_INT 3
19538: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19539: LD_ADDR_VAR 0 4
19543: PUSH
19544: LD_VAR 0 5
19548: PPUSH
19549: LD_VAR 0 1
19553: PPUSH
19554: CALL_OW 248
19558: PPUSH
19559: CALL_OW 450
19563: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19564: LD_ADDR_VAR 0 2
19568: PUSH
19569: LD_VAR 0 3
19573: PPUSH
19574: LD_INT 1
19576: PPUSH
19577: CALL_OW 275
19581: PUSH
19582: LD_VAR 0 4
19586: PUSH
19587: LD_INT 1
19589: ARRAY
19590: GREATEREQUAL
19591: PUSH
19592: LD_VAR 0 3
19596: PPUSH
19597: LD_INT 2
19599: PPUSH
19600: CALL_OW 275
19604: PUSH
19605: LD_VAR 0 4
19609: PUSH
19610: LD_INT 2
19612: ARRAY
19613: GREATEREQUAL
19614: AND
19615: PUSH
19616: LD_VAR 0 3
19620: PPUSH
19621: LD_INT 3
19623: PPUSH
19624: CALL_OW 275
19628: PUSH
19629: LD_VAR 0 4
19633: PUSH
19634: LD_INT 3
19636: ARRAY
19637: GREATEREQUAL
19638: AND
19639: ST_TO_ADDR
// end ;
19640: LD_VAR 0 2
19644: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19645: LD_INT 0
19647: PPUSH
19648: PPUSH
19649: PPUSH
// pom := GetBase ( building ) ;
19650: LD_ADDR_VAR 0 4
19654: PUSH
19655: LD_VAR 0 1
19659: PPUSH
19660: CALL_OW 274
19664: ST_TO_ADDR
// if not pom then
19665: LD_VAR 0 4
19669: NOT
19670: IFFALSE 19674
// exit ;
19672: GO 19775
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19674: LD_ADDR_VAR 0 5
19678: PUSH
19679: LD_VAR 0 2
19683: PPUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 248
19693: PPUSH
19694: CALL_OW 450
19698: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19699: LD_ADDR_VAR 0 3
19703: PUSH
19704: LD_VAR 0 4
19708: PPUSH
19709: LD_INT 1
19711: PPUSH
19712: CALL_OW 275
19716: PUSH
19717: LD_VAR 0 5
19721: PUSH
19722: LD_INT 1
19724: ARRAY
19725: GREATEREQUAL
19726: PUSH
19727: LD_VAR 0 4
19731: PPUSH
19732: LD_INT 2
19734: PPUSH
19735: CALL_OW 275
19739: PUSH
19740: LD_VAR 0 5
19744: PUSH
19745: LD_INT 2
19747: ARRAY
19748: GREATEREQUAL
19749: AND
19750: PUSH
19751: LD_VAR 0 4
19755: PPUSH
19756: LD_INT 3
19758: PPUSH
19759: CALL_OW 275
19763: PUSH
19764: LD_VAR 0 5
19768: PUSH
19769: LD_INT 3
19771: ARRAY
19772: GREATEREQUAL
19773: AND
19774: ST_TO_ADDR
// end ;
19775: LD_VAR 0 3
19779: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19780: LD_INT 0
19782: PPUSH
19783: PPUSH
19784: PPUSH
19785: PPUSH
19786: PPUSH
19787: PPUSH
19788: PPUSH
19789: PPUSH
19790: PPUSH
19791: PPUSH
19792: PPUSH
// result := false ;
19793: LD_ADDR_VAR 0 8
19797: PUSH
19798: LD_INT 0
19800: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19801: LD_VAR 0 5
19805: NOT
19806: PUSH
19807: LD_VAR 0 1
19811: NOT
19812: OR
19813: PUSH
19814: LD_VAR 0 2
19818: NOT
19819: OR
19820: PUSH
19821: LD_VAR 0 3
19825: NOT
19826: OR
19827: IFFALSE 19831
// exit ;
19829: GO 20645
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19831: LD_ADDR_VAR 0 14
19835: PUSH
19836: LD_VAR 0 1
19840: PPUSH
19841: LD_VAR 0 2
19845: PPUSH
19846: LD_VAR 0 3
19850: PPUSH
19851: LD_VAR 0 4
19855: PPUSH
19856: LD_VAR 0 5
19860: PUSH
19861: LD_INT 1
19863: ARRAY
19864: PPUSH
19865: CALL_OW 248
19869: PPUSH
19870: LD_INT 0
19872: PPUSH
19873: CALL 21898 0 6
19877: ST_TO_ADDR
// if not hexes then
19878: LD_VAR 0 14
19882: NOT
19883: IFFALSE 19887
// exit ;
19885: GO 20645
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19887: LD_ADDR_VAR 0 17
19891: PUSH
19892: LD_VAR 0 5
19896: PPUSH
19897: LD_INT 22
19899: PUSH
19900: LD_VAR 0 13
19904: PPUSH
19905: CALL_OW 255
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: PUSH
19917: LD_INT 30
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 30
19929: PUSH
19930: LD_INT 1
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: LIST
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PPUSH
19946: CALL_OW 72
19950: ST_TO_ADDR
// for i = 1 to hexes do
19951: LD_ADDR_VAR 0 9
19955: PUSH
19956: DOUBLE
19957: LD_INT 1
19959: DEC
19960: ST_TO_ADDR
19961: LD_VAR 0 14
19965: PUSH
19966: FOR_TO
19967: IFFALSE 20643
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19969: LD_ADDR_VAR 0 13
19973: PUSH
19974: LD_VAR 0 14
19978: PUSH
19979: LD_VAR 0 9
19983: ARRAY
19984: PUSH
19985: LD_INT 1
19987: ARRAY
19988: PPUSH
19989: LD_VAR 0 14
19993: PUSH
19994: LD_VAR 0 9
19998: ARRAY
19999: PUSH
20000: LD_INT 2
20002: ARRAY
20003: PPUSH
20004: CALL_OW 428
20008: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20009: LD_VAR 0 14
20013: PUSH
20014: LD_VAR 0 9
20018: ARRAY
20019: PUSH
20020: LD_INT 1
20022: ARRAY
20023: PPUSH
20024: LD_VAR 0 14
20028: PUSH
20029: LD_VAR 0 9
20033: ARRAY
20034: PUSH
20035: LD_INT 2
20037: ARRAY
20038: PPUSH
20039: CALL_OW 351
20043: PUSH
20044: LD_VAR 0 14
20048: PUSH
20049: LD_VAR 0 9
20053: ARRAY
20054: PUSH
20055: LD_INT 1
20057: ARRAY
20058: PPUSH
20059: LD_VAR 0 14
20063: PUSH
20064: LD_VAR 0 9
20068: ARRAY
20069: PUSH
20070: LD_INT 2
20072: ARRAY
20073: PPUSH
20074: CALL_OW 488
20078: NOT
20079: OR
20080: PUSH
20081: LD_VAR 0 13
20085: PPUSH
20086: CALL_OW 247
20090: PUSH
20091: LD_INT 3
20093: EQUAL
20094: OR
20095: IFFALSE 20101
// exit ;
20097: POP
20098: POP
20099: GO 20645
// if not tmp then
20101: LD_VAR 0 13
20105: NOT
20106: IFFALSE 20110
// continue ;
20108: GO 19966
// result := true ;
20110: LD_ADDR_VAR 0 8
20114: PUSH
20115: LD_INT 1
20117: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20118: LD_VAR 0 6
20122: PUSH
20123: LD_VAR 0 13
20127: PPUSH
20128: CALL_OW 247
20132: PUSH
20133: LD_INT 2
20135: EQUAL
20136: AND
20137: PUSH
20138: LD_VAR 0 13
20142: PPUSH
20143: CALL_OW 263
20147: PUSH
20148: LD_INT 1
20150: EQUAL
20151: AND
20152: IFFALSE 20316
// begin if IsDrivenBy ( tmp ) then
20154: LD_VAR 0 13
20158: PPUSH
20159: CALL_OW 311
20163: IFFALSE 20167
// continue ;
20165: GO 19966
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20167: LD_VAR 0 6
20171: PPUSH
20172: LD_INT 3
20174: PUSH
20175: LD_INT 60
20177: PUSH
20178: EMPTY
20179: LIST
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 3
20187: PUSH
20188: LD_INT 55
20190: PUSH
20191: EMPTY
20192: LIST
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PPUSH
20202: CALL_OW 72
20206: IFFALSE 20314
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20208: LD_ADDR_VAR 0 18
20212: PUSH
20213: LD_VAR 0 6
20217: PPUSH
20218: LD_INT 3
20220: PUSH
20221: LD_INT 60
20223: PUSH
20224: EMPTY
20225: LIST
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 3
20233: PUSH
20234: LD_INT 55
20236: PUSH
20237: EMPTY
20238: LIST
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PPUSH
20248: CALL_OW 72
20252: PUSH
20253: LD_INT 1
20255: ARRAY
20256: ST_TO_ADDR
// if IsInUnit ( driver ) then
20257: LD_VAR 0 18
20261: PPUSH
20262: CALL_OW 310
20266: IFFALSE 20277
// ComExit ( driver ) ;
20268: LD_VAR 0 18
20272: PPUSH
20273: CALL 45677 0 1
// AddComEnterUnit ( driver , tmp ) ;
20277: LD_VAR 0 18
20281: PPUSH
20282: LD_VAR 0 13
20286: PPUSH
20287: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20291: LD_VAR 0 18
20295: PPUSH
20296: LD_VAR 0 7
20300: PPUSH
20301: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20305: LD_VAR 0 18
20309: PPUSH
20310: CALL_OW 181
// end ; continue ;
20314: GO 19966
// end ; if not cleaners or not tmp in cleaners then
20316: LD_VAR 0 6
20320: NOT
20321: PUSH
20322: LD_VAR 0 13
20326: PUSH
20327: LD_VAR 0 6
20331: IN
20332: NOT
20333: OR
20334: IFFALSE 20641
// begin if dep then
20336: LD_VAR 0 17
20340: IFFALSE 20476
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20342: LD_ADDR_VAR 0 16
20346: PUSH
20347: LD_VAR 0 17
20351: PUSH
20352: LD_INT 1
20354: ARRAY
20355: PPUSH
20356: CALL_OW 250
20360: PPUSH
20361: LD_VAR 0 17
20365: PUSH
20366: LD_INT 1
20368: ARRAY
20369: PPUSH
20370: CALL_OW 254
20374: PPUSH
20375: LD_INT 5
20377: PPUSH
20378: CALL_OW 272
20382: PUSH
20383: LD_VAR 0 17
20387: PUSH
20388: LD_INT 1
20390: ARRAY
20391: PPUSH
20392: CALL_OW 251
20396: PPUSH
20397: LD_VAR 0 17
20401: PUSH
20402: LD_INT 1
20404: ARRAY
20405: PPUSH
20406: CALL_OW 254
20410: PPUSH
20411: LD_INT 5
20413: PPUSH
20414: CALL_OW 273
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20423: LD_VAR 0 16
20427: PUSH
20428: LD_INT 1
20430: ARRAY
20431: PPUSH
20432: LD_VAR 0 16
20436: PUSH
20437: LD_INT 2
20439: ARRAY
20440: PPUSH
20441: CALL_OW 488
20445: IFFALSE 20476
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20447: LD_VAR 0 13
20451: PPUSH
20452: LD_VAR 0 16
20456: PUSH
20457: LD_INT 1
20459: ARRAY
20460: PPUSH
20461: LD_VAR 0 16
20465: PUSH
20466: LD_INT 2
20468: ARRAY
20469: PPUSH
20470: CALL_OW 111
// continue ;
20474: GO 19966
// end ; end ; r := GetDir ( tmp ) ;
20476: LD_ADDR_VAR 0 15
20480: PUSH
20481: LD_VAR 0 13
20485: PPUSH
20486: CALL_OW 254
20490: ST_TO_ADDR
// if r = 5 then
20491: LD_VAR 0 15
20495: PUSH
20496: LD_INT 5
20498: EQUAL
20499: IFFALSE 20509
// r := 0 ;
20501: LD_ADDR_VAR 0 15
20505: PUSH
20506: LD_INT 0
20508: ST_TO_ADDR
// for j = r to 5 do
20509: LD_ADDR_VAR 0 10
20513: PUSH
20514: DOUBLE
20515: LD_VAR 0 15
20519: DEC
20520: ST_TO_ADDR
20521: LD_INT 5
20523: PUSH
20524: FOR_TO
20525: IFFALSE 20639
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20527: LD_ADDR_VAR 0 11
20531: PUSH
20532: LD_VAR 0 13
20536: PPUSH
20537: CALL_OW 250
20541: PPUSH
20542: LD_VAR 0 10
20546: PPUSH
20547: LD_INT 2
20549: PPUSH
20550: CALL_OW 272
20554: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20555: LD_ADDR_VAR 0 12
20559: PUSH
20560: LD_VAR 0 13
20564: PPUSH
20565: CALL_OW 251
20569: PPUSH
20570: LD_VAR 0 10
20574: PPUSH
20575: LD_INT 2
20577: PPUSH
20578: CALL_OW 273
20582: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20583: LD_VAR 0 11
20587: PPUSH
20588: LD_VAR 0 12
20592: PPUSH
20593: CALL_OW 488
20597: PUSH
20598: LD_VAR 0 11
20602: PPUSH
20603: LD_VAR 0 12
20607: PPUSH
20608: CALL_OW 428
20612: NOT
20613: AND
20614: IFFALSE 20637
// begin ComMoveXY ( tmp , _x , _y ) ;
20616: LD_VAR 0 13
20620: PPUSH
20621: LD_VAR 0 11
20625: PPUSH
20626: LD_VAR 0 12
20630: PPUSH
20631: CALL_OW 111
// break ;
20635: GO 20639
// end ; end ;
20637: GO 20524
20639: POP
20640: POP
// end ; end ;
20641: GO 19966
20643: POP
20644: POP
// end ;
20645: LD_VAR 0 8
20649: RET
// export function BuildingTechInvented ( side , btype ) ; begin
20650: LD_INT 0
20652: PPUSH
// result := true ;
20653: LD_ADDR_VAR 0 3
20657: PUSH
20658: LD_INT 1
20660: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
20661: LD_VAR 0 2
20665: PUSH
20666: LD_INT 24
20668: DOUBLE
20669: EQUAL
20670: IFTRUE 20680
20672: LD_INT 33
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20705
20680: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
20681: LD_ADDR_VAR 0 3
20685: PUSH
20686: LD_INT 32
20688: PPUSH
20689: LD_VAR 0 1
20693: PPUSH
20694: CALL_OW 321
20698: PUSH
20699: LD_INT 2
20701: EQUAL
20702: ST_TO_ADDR
20703: GO 21021
20705: LD_INT 20
20707: DOUBLE
20708: EQUAL
20709: IFTRUE 20713
20711: GO 20738
20713: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
20714: LD_ADDR_VAR 0 3
20718: PUSH
20719: LD_INT 6
20721: PPUSH
20722: LD_VAR 0 1
20726: PPUSH
20727: CALL_OW 321
20731: PUSH
20732: LD_INT 2
20734: EQUAL
20735: ST_TO_ADDR
20736: GO 21021
20738: LD_INT 22
20740: DOUBLE
20741: EQUAL
20742: IFTRUE 20752
20744: LD_INT 36
20746: DOUBLE
20747: EQUAL
20748: IFTRUE 20752
20750: GO 20777
20752: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
20753: LD_ADDR_VAR 0 3
20757: PUSH
20758: LD_INT 15
20760: PPUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: CALL_OW 321
20770: PUSH
20771: LD_INT 2
20773: EQUAL
20774: ST_TO_ADDR
20775: GO 21021
20777: LD_INT 30
20779: DOUBLE
20780: EQUAL
20781: IFTRUE 20785
20783: GO 20810
20785: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
20786: LD_ADDR_VAR 0 3
20790: PUSH
20791: LD_INT 20
20793: PPUSH
20794: LD_VAR 0 1
20798: PPUSH
20799: CALL_OW 321
20803: PUSH
20804: LD_INT 2
20806: EQUAL
20807: ST_TO_ADDR
20808: GO 21021
20810: LD_INT 28
20812: DOUBLE
20813: EQUAL
20814: IFTRUE 20824
20816: LD_INT 21
20818: DOUBLE
20819: EQUAL
20820: IFTRUE 20824
20822: GO 20849
20824: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
20825: LD_ADDR_VAR 0 3
20829: PUSH
20830: LD_INT 21
20832: PPUSH
20833: LD_VAR 0 1
20837: PPUSH
20838: CALL_OW 321
20842: PUSH
20843: LD_INT 2
20845: EQUAL
20846: ST_TO_ADDR
20847: GO 21021
20849: LD_INT 16
20851: DOUBLE
20852: EQUAL
20853: IFTRUE 20857
20855: GO 20882
20857: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
20858: LD_ADDR_VAR 0 3
20862: PUSH
20863: LD_INT 84
20865: PPUSH
20866: LD_VAR 0 1
20870: PPUSH
20871: CALL_OW 321
20875: PUSH
20876: LD_INT 2
20878: EQUAL
20879: ST_TO_ADDR
20880: GO 21021
20882: LD_INT 19
20884: DOUBLE
20885: EQUAL
20886: IFTRUE 20896
20888: LD_INT 23
20890: DOUBLE
20891: EQUAL
20892: IFTRUE 20896
20894: GO 20921
20896: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
20897: LD_ADDR_VAR 0 3
20901: PUSH
20902: LD_INT 83
20904: PPUSH
20905: LD_VAR 0 1
20909: PPUSH
20910: CALL_OW 321
20914: PUSH
20915: LD_INT 2
20917: EQUAL
20918: ST_TO_ADDR
20919: GO 21021
20921: LD_INT 17
20923: DOUBLE
20924: EQUAL
20925: IFTRUE 20929
20927: GO 20954
20929: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
20930: LD_ADDR_VAR 0 3
20934: PUSH
20935: LD_INT 39
20937: PPUSH
20938: LD_VAR 0 1
20942: PPUSH
20943: CALL_OW 321
20947: PUSH
20948: LD_INT 2
20950: EQUAL
20951: ST_TO_ADDR
20952: GO 21021
20954: LD_INT 18
20956: DOUBLE
20957: EQUAL
20958: IFTRUE 20962
20960: GO 20987
20962: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
20963: LD_ADDR_VAR 0 3
20967: PUSH
20968: LD_INT 40
20970: PPUSH
20971: LD_VAR 0 1
20975: PPUSH
20976: CALL_OW 321
20980: PUSH
20981: LD_INT 2
20983: EQUAL
20984: ST_TO_ADDR
20985: GO 21021
20987: LD_INT 27
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21020
20995: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
20996: LD_ADDR_VAR 0 3
21000: PUSH
21001: LD_INT 35
21003: PPUSH
21004: LD_VAR 0 1
21008: PPUSH
21009: CALL_OW 321
21013: PUSH
21014: LD_INT 2
21016: EQUAL
21017: ST_TO_ADDR
21018: GO 21021
21020: POP
// end ;
21021: LD_VAR 0 3
21025: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21026: LD_INT 0
21028: PPUSH
21029: PPUSH
21030: PPUSH
21031: PPUSH
21032: PPUSH
21033: PPUSH
21034: PPUSH
21035: PPUSH
21036: PPUSH
21037: PPUSH
21038: PPUSH
// result := false ;
21039: LD_ADDR_VAR 0 6
21043: PUSH
21044: LD_INT 0
21046: ST_TO_ADDR
// if btype = b_depot then
21047: LD_VAR 0 2
21051: PUSH
21052: LD_INT 0
21054: EQUAL
21055: IFFALSE 21067
// begin result := true ;
21057: LD_ADDR_VAR 0 6
21061: PUSH
21062: LD_INT 1
21064: ST_TO_ADDR
// exit ;
21065: GO 21893
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21067: LD_VAR 0 1
21071: NOT
21072: PUSH
21073: LD_VAR 0 1
21077: PPUSH
21078: CALL_OW 266
21082: PUSH
21083: LD_INT 0
21085: PUSH
21086: LD_INT 1
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: IN
21093: NOT
21094: OR
21095: PUSH
21096: LD_VAR 0 2
21100: NOT
21101: OR
21102: PUSH
21103: LD_VAR 0 5
21107: PUSH
21108: LD_INT 0
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: LD_INT 3
21119: PUSH
21120: LD_INT 4
21122: PUSH
21123: LD_INT 5
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: IN
21134: NOT
21135: OR
21136: PUSH
21137: LD_VAR 0 3
21141: PPUSH
21142: LD_VAR 0 4
21146: PPUSH
21147: CALL_OW 488
21151: NOT
21152: OR
21153: IFFALSE 21157
// exit ;
21155: GO 21893
// side := GetSide ( depot ) ;
21157: LD_ADDR_VAR 0 9
21161: PUSH
21162: LD_VAR 0 1
21166: PPUSH
21167: CALL_OW 255
21171: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21172: LD_VAR 0 9
21176: PPUSH
21177: LD_VAR 0 2
21181: PPUSH
21182: CALL 20650 0 2
21186: NOT
21187: IFFALSE 21191
// exit ;
21189: GO 21893
// pom := GetBase ( depot ) ;
21191: LD_ADDR_VAR 0 10
21195: PUSH
21196: LD_VAR 0 1
21200: PPUSH
21201: CALL_OW 274
21205: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21206: LD_ADDR_VAR 0 11
21210: PUSH
21211: LD_VAR 0 2
21215: PPUSH
21216: LD_VAR 0 1
21220: PPUSH
21221: CALL_OW 248
21225: PPUSH
21226: CALL_OW 450
21230: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21231: LD_VAR 0 10
21235: PPUSH
21236: LD_INT 1
21238: PPUSH
21239: CALL_OW 275
21243: PUSH
21244: LD_VAR 0 11
21248: PUSH
21249: LD_INT 1
21251: ARRAY
21252: GREATEREQUAL
21253: PUSH
21254: LD_VAR 0 10
21258: PPUSH
21259: LD_INT 2
21261: PPUSH
21262: CALL_OW 275
21266: PUSH
21267: LD_VAR 0 11
21271: PUSH
21272: LD_INT 2
21274: ARRAY
21275: GREATEREQUAL
21276: AND
21277: PUSH
21278: LD_VAR 0 10
21282: PPUSH
21283: LD_INT 3
21285: PPUSH
21286: CALL_OW 275
21290: PUSH
21291: LD_VAR 0 11
21295: PUSH
21296: LD_INT 3
21298: ARRAY
21299: GREATEREQUAL
21300: AND
21301: NOT
21302: IFFALSE 21306
// exit ;
21304: GO 21893
// if GetBType ( depot ) = b_depot then
21306: LD_VAR 0 1
21310: PPUSH
21311: CALL_OW 266
21315: PUSH
21316: LD_INT 0
21318: EQUAL
21319: IFFALSE 21331
// dist := 28 else
21321: LD_ADDR_VAR 0 14
21325: PUSH
21326: LD_INT 28
21328: ST_TO_ADDR
21329: GO 21339
// dist := 36 ;
21331: LD_ADDR_VAR 0 14
21335: PUSH
21336: LD_INT 36
21338: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21339: LD_VAR 0 1
21343: PPUSH
21344: LD_VAR 0 3
21348: PPUSH
21349: LD_VAR 0 4
21353: PPUSH
21354: CALL_OW 297
21358: PUSH
21359: LD_VAR 0 14
21363: GREATER
21364: IFFALSE 21368
// exit ;
21366: GO 21893
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21368: LD_ADDR_VAR 0 12
21372: PUSH
21373: LD_VAR 0 2
21377: PPUSH
21378: LD_VAR 0 3
21382: PPUSH
21383: LD_VAR 0 4
21387: PPUSH
21388: LD_VAR 0 5
21392: PPUSH
21393: LD_VAR 0 1
21397: PPUSH
21398: CALL_OW 248
21402: PPUSH
21403: LD_INT 0
21405: PPUSH
21406: CALL 21898 0 6
21410: ST_TO_ADDR
// if not hexes then
21411: LD_VAR 0 12
21415: NOT
21416: IFFALSE 21420
// exit ;
21418: GO 21893
// hex := GetHexInfo ( x , y ) ;
21420: LD_ADDR_VAR 0 15
21424: PUSH
21425: LD_VAR 0 3
21429: PPUSH
21430: LD_VAR 0 4
21434: PPUSH
21435: CALL_OW 546
21439: ST_TO_ADDR
// if hex [ 1 ] then
21440: LD_VAR 0 15
21444: PUSH
21445: LD_INT 1
21447: ARRAY
21448: IFFALSE 21452
// exit ;
21450: GO 21893
// height := hex [ 2 ] ;
21452: LD_ADDR_VAR 0 13
21456: PUSH
21457: LD_VAR 0 15
21461: PUSH
21462: LD_INT 2
21464: ARRAY
21465: ST_TO_ADDR
// for i = 1 to hexes do
21466: LD_ADDR_VAR 0 7
21470: PUSH
21471: DOUBLE
21472: LD_INT 1
21474: DEC
21475: ST_TO_ADDR
21476: LD_VAR 0 12
21480: PUSH
21481: FOR_TO
21482: IFFALSE 21812
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21484: LD_VAR 0 12
21488: PUSH
21489: LD_VAR 0 7
21493: ARRAY
21494: PUSH
21495: LD_INT 1
21497: ARRAY
21498: PPUSH
21499: LD_VAR 0 12
21503: PUSH
21504: LD_VAR 0 7
21508: ARRAY
21509: PUSH
21510: LD_INT 2
21512: ARRAY
21513: PPUSH
21514: CALL_OW 488
21518: NOT
21519: PUSH
21520: LD_VAR 0 12
21524: PUSH
21525: LD_VAR 0 7
21529: ARRAY
21530: PUSH
21531: LD_INT 1
21533: ARRAY
21534: PPUSH
21535: LD_VAR 0 12
21539: PUSH
21540: LD_VAR 0 7
21544: ARRAY
21545: PUSH
21546: LD_INT 2
21548: ARRAY
21549: PPUSH
21550: CALL_OW 428
21554: PUSH
21555: LD_INT 0
21557: GREATER
21558: OR
21559: PUSH
21560: LD_VAR 0 12
21564: PUSH
21565: LD_VAR 0 7
21569: ARRAY
21570: PUSH
21571: LD_INT 1
21573: ARRAY
21574: PPUSH
21575: LD_VAR 0 12
21579: PUSH
21580: LD_VAR 0 7
21584: ARRAY
21585: PUSH
21586: LD_INT 2
21588: ARRAY
21589: PPUSH
21590: CALL_OW 351
21594: OR
21595: IFFALSE 21601
// exit ;
21597: POP
21598: POP
21599: GO 21893
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21601: LD_ADDR_VAR 0 8
21605: PUSH
21606: LD_VAR 0 12
21610: PUSH
21611: LD_VAR 0 7
21615: ARRAY
21616: PUSH
21617: LD_INT 1
21619: ARRAY
21620: PPUSH
21621: LD_VAR 0 12
21625: PUSH
21626: LD_VAR 0 7
21630: ARRAY
21631: PUSH
21632: LD_INT 2
21634: ARRAY
21635: PPUSH
21636: CALL_OW 546
21640: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21641: LD_VAR 0 8
21645: PUSH
21646: LD_INT 1
21648: ARRAY
21649: PUSH
21650: LD_VAR 0 8
21654: PUSH
21655: LD_INT 2
21657: ARRAY
21658: PUSH
21659: LD_VAR 0 13
21663: PUSH
21664: LD_INT 2
21666: PLUS
21667: GREATER
21668: OR
21669: PUSH
21670: LD_VAR 0 8
21674: PUSH
21675: LD_INT 2
21677: ARRAY
21678: PUSH
21679: LD_VAR 0 13
21683: PUSH
21684: LD_INT 2
21686: MINUS
21687: LESS
21688: OR
21689: PUSH
21690: LD_VAR 0 8
21694: PUSH
21695: LD_INT 3
21697: ARRAY
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: LD_INT 8
21704: PUSH
21705: LD_INT 9
21707: PUSH
21708: LD_INT 10
21710: PUSH
21711: LD_INT 11
21713: PUSH
21714: LD_INT 12
21716: PUSH
21717: LD_INT 13
21719: PUSH
21720: LD_INT 16
21722: PUSH
21723: LD_INT 17
21725: PUSH
21726: LD_INT 18
21728: PUSH
21729: LD_INT 19
21731: PUSH
21732: LD_INT 20
21734: PUSH
21735: LD_INT 21
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: IN
21753: NOT
21754: OR
21755: PUSH
21756: LD_VAR 0 8
21760: PUSH
21761: LD_INT 5
21763: ARRAY
21764: NOT
21765: OR
21766: PUSH
21767: LD_VAR 0 8
21771: PUSH
21772: LD_INT 6
21774: ARRAY
21775: PUSH
21776: LD_INT 1
21778: PUSH
21779: LD_INT 2
21781: PUSH
21782: LD_INT 7
21784: PUSH
21785: LD_INT 9
21787: PUSH
21788: LD_INT 10
21790: PUSH
21791: LD_INT 11
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: IN
21802: NOT
21803: OR
21804: IFFALSE 21810
// exit ;
21806: POP
21807: POP
21808: GO 21893
// end ;
21810: GO 21481
21812: POP
21813: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21814: LD_VAR 0 9
21818: PPUSH
21819: LD_VAR 0 3
21823: PPUSH
21824: LD_VAR 0 4
21828: PPUSH
21829: LD_INT 20
21831: PPUSH
21832: CALL 13816 0 4
21836: PUSH
21837: LD_INT 4
21839: ARRAY
21840: IFFALSE 21844
// exit ;
21842: GO 21893
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21844: LD_VAR 0 2
21848: PUSH
21849: LD_INT 29
21851: PUSH
21852: LD_INT 30
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: IN
21859: PUSH
21860: LD_VAR 0 3
21864: PPUSH
21865: LD_VAR 0 4
21869: PPUSH
21870: LD_VAR 0 9
21874: PPUSH
21875: CALL_OW 440
21879: NOT
21880: AND
21881: IFFALSE 21885
// exit ;
21883: GO 21893
// result := true ;
21885: LD_ADDR_VAR 0 6
21889: PUSH
21890: LD_INT 1
21892: ST_TO_ADDR
// end ;
21893: LD_VAR 0 6
21897: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21898: LD_INT 0
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
21916: PPUSH
21917: PPUSH
21918: PPUSH
21919: PPUSH
21920: PPUSH
21921: PPUSH
21922: PPUSH
21923: PPUSH
21924: PPUSH
21925: PPUSH
21926: PPUSH
21927: PPUSH
21928: PPUSH
21929: PPUSH
21930: PPUSH
21931: PPUSH
21932: PPUSH
21933: PPUSH
21934: PPUSH
21935: PPUSH
21936: PPUSH
21937: PPUSH
21938: PPUSH
21939: PPUSH
21940: PPUSH
21941: PPUSH
21942: PPUSH
21943: PPUSH
21944: PPUSH
21945: PPUSH
21946: PPUSH
21947: PPUSH
21948: PPUSH
21949: PPUSH
21950: PPUSH
21951: PPUSH
21952: PPUSH
21953: PPUSH
21954: PPUSH
21955: PPUSH
21956: PPUSH
21957: PPUSH
// result = [ ] ;
21958: LD_ADDR_VAR 0 7
21962: PUSH
21963: EMPTY
21964: ST_TO_ADDR
// temp_list = [ ] ;
21965: LD_ADDR_VAR 0 9
21969: PUSH
21970: EMPTY
21971: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
21972: LD_VAR 0 4
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: LD_INT 2
21985: PUSH
21986: LD_INT 3
21988: PUSH
21989: LD_INT 4
21991: PUSH
21992: LD_INT 5
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: IN
22003: NOT
22004: PUSH
22005: LD_VAR 0 1
22009: PUSH
22010: LD_INT 0
22012: PUSH
22013: LD_INT 1
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: IN
22020: PUSH
22021: LD_VAR 0 5
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: LD_INT 3
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: LIST
22039: IN
22040: NOT
22041: AND
22042: OR
22043: IFFALSE 22047
// exit ;
22045: GO 40438
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22047: LD_VAR 0 1
22051: PUSH
22052: LD_INT 6
22054: PUSH
22055: LD_INT 7
22057: PUSH
22058: LD_INT 8
22060: PUSH
22061: LD_INT 13
22063: PUSH
22064: LD_INT 12
22066: PUSH
22067: LD_INT 15
22069: PUSH
22070: LD_INT 11
22072: PUSH
22073: LD_INT 14
22075: PUSH
22076: LD_INT 10
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: IN
22090: IFFALSE 22100
// btype = b_lab ;
22092: LD_ADDR_VAR 0 1
22096: PUSH
22097: LD_INT 6
22099: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22100: LD_VAR 0 6
22104: PUSH
22105: LD_INT 0
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: LD_INT 2
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: LIST
22118: IN
22119: NOT
22120: PUSH
22121: LD_VAR 0 1
22125: PUSH
22126: LD_INT 0
22128: PUSH
22129: LD_INT 1
22131: PUSH
22132: LD_INT 2
22134: PUSH
22135: LD_INT 3
22137: PUSH
22138: LD_INT 6
22140: PUSH
22141: LD_INT 36
22143: PUSH
22144: LD_INT 4
22146: PUSH
22147: LD_INT 5
22149: PUSH
22150: LD_INT 31
22152: PUSH
22153: LD_INT 32
22155: PUSH
22156: LD_INT 33
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: IN
22172: NOT
22173: PUSH
22174: LD_VAR 0 6
22178: PUSH
22179: LD_INT 1
22181: EQUAL
22182: AND
22183: OR
22184: PUSH
22185: LD_VAR 0 1
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: LD_INT 3
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: IN
22200: NOT
22201: PUSH
22202: LD_VAR 0 6
22206: PUSH
22207: LD_INT 2
22209: EQUAL
22210: AND
22211: OR
22212: IFFALSE 22222
// mode = 0 ;
22214: LD_ADDR_VAR 0 6
22218: PUSH
22219: LD_INT 0
22221: ST_TO_ADDR
// case mode of 0 :
22222: LD_VAR 0 6
22226: PUSH
22227: LD_INT 0
22229: DOUBLE
22230: EQUAL
22231: IFTRUE 22235
22233: GO 33688
22235: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22236: LD_ADDR_VAR 0 11
22240: PUSH
22241: LD_INT 0
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 0
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 0
22284: PUSH
22285: LD_INT 1
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: PUSH
22307: LD_INT 1
22309: NEG
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 1
22317: NEG
22318: PUSH
22319: LD_INT 2
22321: NEG
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 0
22329: PUSH
22330: LD_INT 2
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: LD_INT 1
22343: NEG
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: LD_INT 3
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: LD_INT 3
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: LD_INT 2
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22429: LD_ADDR_VAR 0 12
22433: PUSH
22434: LD_INT 0
22436: PUSH
22437: LD_INT 0
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 0
22446: PUSH
22447: LD_INT 1
22449: NEG
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: LD_INT 0
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: PUSH
22468: LD_INT 1
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 0
22477: PUSH
22478: LD_INT 1
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 1
22487: NEG
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 1
22498: NEG
22499: PUSH
22500: LD_INT 1
22502: NEG
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: LD_INT 1
22513: NEG
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: NEG
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 2
22552: NEG
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 2
22563: NEG
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 2
22575: NEG
22576: PUSH
22577: LD_INT 1
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 3
22586: NEG
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 3
22597: NEG
22598: PUSH
22599: LD_INT 1
22601: NEG
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22625: LD_ADDR_VAR 0 13
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: LD_INT 1
22645: NEG
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 2
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 2
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 1
22738: PUSH
22739: LD_INT 2
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 2
22748: NEG
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 2
22760: NEG
22761: PUSH
22762: LD_INT 2
22764: NEG
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 2
22772: NEG
22773: PUSH
22774: LD_INT 3
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 3
22784: NEG
22785: PUSH
22786: LD_INT 2
22788: NEG
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 3
22796: NEG
22797: PUSH
22798: LD_INT 3
22800: NEG
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22824: LD_ADDR_VAR 0 14
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 0
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 0
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 1
22882: NEG
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 1
22893: NEG
22894: PUSH
22895: LD_INT 1
22897: NEG
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 1
22905: NEG
22906: PUSH
22907: LD_INT 2
22909: NEG
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: LD_INT 2
22920: NEG
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: LD_INT 1
22931: NEG
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 1
22939: PUSH
22940: LD_INT 2
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 0
22949: PUSH
22950: LD_INT 2
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: NEG
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 1
22970: NEG
22971: PUSH
22972: LD_INT 3
22974: NEG
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 0
22982: PUSH
22983: LD_INT 3
22985: NEG
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 1
22993: PUSH
22994: LD_INT 2
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23020: LD_ADDR_VAR 0 15
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: LD_INT 0
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: LD_INT 1
23040: NEG
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 1
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 0
23068: PUSH
23069: LD_INT 1
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 1
23078: NEG
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: NEG
23090: PUSH
23091: LD_INT 1
23093: NEG
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 1
23101: PUSH
23102: LD_INT 1
23104: NEG
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 2
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 2
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 1
23132: NEG
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 2
23143: NEG
23144: PUSH
23145: LD_INT 0
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 2
23154: NEG
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: LD_INT 1
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 3
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 3
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23213: LD_ADDR_VAR 0 16
23217: PUSH
23218: LD_INT 0
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 1
23282: NEG
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 1
23294: NEG
23295: PUSH
23296: LD_INT 2
23298: NEG
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 2
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: PUSH
23327: LD_INT 2
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 2
23336: NEG
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 2
23348: NEG
23349: PUSH
23350: LD_INT 2
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 3
23360: PUSH
23361: LD_INT 2
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 3
23370: PUSH
23371: LD_INT 3
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 2
23380: PUSH
23381: LD_INT 3
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23406: LD_ADDR_VAR 0 17
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 0
23423: PUSH
23424: LD_INT 1
23426: NEG
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 1
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 0
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: NEG
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: LD_INT 1
23479: NEG
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 1
23487: NEG
23488: PUSH
23489: LD_INT 2
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: LD_INT 2
23502: NEG
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 1
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 2
23521: PUSH
23522: LD_INT 0
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 2
23531: PUSH
23532: LD_INT 1
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 2
23541: PUSH
23542: LD_INT 2
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 1
23551: PUSH
23552: LD_INT 2
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 1
23571: NEG
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 2
23582: NEG
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 2
23593: NEG
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 2
23605: NEG
23606: PUSH
23607: LD_INT 2
23609: NEG
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23636: LD_ADDR_VAR 0 18
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: LD_INT 0
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: LD_INT 1
23656: NEG
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 1
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 1
23705: NEG
23706: PUSH
23707: LD_INT 1
23709: NEG
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: LD_INT 2
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: LD_INT 2
23732: NEG
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: LD_INT 1
23743: NEG
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 2
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: LD_INT 2
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 0
23791: PUSH
23792: LD_INT 2
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 1
23801: NEG
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 2
23812: NEG
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 2
23823: NEG
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 2
23835: NEG
23836: PUSH
23837: LD_INT 2
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23866: LD_ADDR_VAR 0 19
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: LD_INT 2
23962: NEG
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: LD_INT 0
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 2
23991: PUSH
23992: LD_INT 1
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 2
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 1
24011: PUSH
24012: LD_INT 2
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: LD_INT 2
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 1
24031: NEG
24032: PUSH
24033: LD_INT 1
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 2
24042: NEG
24043: PUSH
24044: LD_INT 0
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 2
24053: NEG
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 2
24065: NEG
24066: PUSH
24067: LD_INT 2
24069: NEG
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24096: LD_ADDR_VAR 0 20
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 0
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 1
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: LD_INT 1
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 1
24165: NEG
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: NEG
24178: PUSH
24179: LD_INT 2
24181: NEG
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 0
24189: PUSH
24190: LD_INT 2
24192: NEG
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 1
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 2
24231: PUSH
24232: LD_INT 2
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 1
24241: PUSH
24242: LD_INT 2
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: LD_INT 2
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 2
24272: NEG
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 2
24283: NEG
24284: PUSH
24285: LD_INT 1
24287: NEG
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 2
24295: NEG
24296: PUSH
24297: LD_INT 2
24299: NEG
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24326: LD_ADDR_VAR 0 21
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: LD_INT 1
24346: NEG
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 1
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: LD_INT 1
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: NEG
24385: PUSH
24386: LD_INT 0
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: NEG
24396: PUSH
24397: LD_INT 1
24399: NEG
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 1
24407: NEG
24408: PUSH
24409: LD_INT 2
24411: NEG
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: LD_INT 2
24422: NEG
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: LD_INT 1
24433: NEG
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 2
24441: PUSH
24442: LD_INT 0
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 2
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 2
24461: PUSH
24462: LD_INT 2
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 1
24471: PUSH
24472: LD_INT 2
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: LD_INT 2
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: NEG
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 2
24513: NEG
24514: PUSH
24515: LD_INT 1
24517: NEG
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 2
24525: NEG
24526: PUSH
24527: LD_INT 2
24529: NEG
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24556: LD_ADDR_VAR 0 22
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: LD_INT 1
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 0
24604: PUSH
24605: LD_INT 1
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 1
24614: NEG
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 1
24625: NEG
24626: PUSH
24627: LD_INT 1
24629: NEG
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 1
24637: NEG
24638: PUSH
24639: LD_INT 2
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 0
24649: PUSH
24650: LD_INT 2
24652: NEG
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 2
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 2
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 2
24691: PUSH
24692: LD_INT 2
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 1
24701: PUSH
24702: LD_INT 2
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: LD_INT 2
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 1
24721: NEG
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 2
24732: NEG
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 2
24743: NEG
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 2
24755: NEG
24756: PUSH
24757: LD_INT 2
24759: NEG
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24786: LD_ADDR_VAR 0 23
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 1
24855: NEG
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PUSH
24869: LD_INT 2
24871: NEG
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: LD_INT 2
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: LD_INT 1
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: LD_INT 0
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 2
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 2
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: LD_INT 2
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 2
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 1
24951: NEG
24952: PUSH
24953: LD_INT 1
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 2
24962: NEG
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 2
24973: NEG
24974: PUSH
24975: LD_INT 1
24977: NEG
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 2
24985: NEG
24986: PUSH
24987: LD_INT 2
24989: NEG
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 2
24997: NEG
24998: PUSH
24999: LD_INT 3
25001: NEG
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 1
25009: NEG
25010: PUSH
25011: LD_INT 3
25013: NEG
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: LD_INT 2
25024: NEG
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 2
25032: PUSH
25033: LD_INT 1
25035: NEG
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25066: LD_ADDR_VAR 0 24
25070: PUSH
25071: LD_INT 0
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 1
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: LD_INT 1
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: NEG
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: LD_INT 1
25139: NEG
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: LD_INT 2
25151: NEG
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 0
25159: PUSH
25160: LD_INT 2
25162: NEG
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: LD_INT 1
25173: NEG
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 2
25181: PUSH
25182: LD_INT 0
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: LD_INT 2
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: LD_INT 2
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: LD_INT 2
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 1
25231: NEG
25232: PUSH
25233: LD_INT 1
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 2
25242: NEG
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 2
25253: NEG
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 2
25265: NEG
25266: PUSH
25267: LD_INT 2
25269: NEG
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: PUSH
25278: LD_INT 2
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 2
25288: PUSH
25289: LD_INT 1
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 3
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 3
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25342: LD_ADDR_VAR 0 25
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: NEG
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 1
25423: NEG
25424: PUSH
25425: LD_INT 2
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: LD_INT 2
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: LD_INT 1
25449: NEG
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 2
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 2
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 2
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: LD_INT 2
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 1
25507: NEG
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 2
25518: NEG
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: NEG
25530: PUSH
25531: LD_INT 1
25533: NEG
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 2
25541: NEG
25542: PUSH
25543: LD_INT 2
25545: NEG
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 3
25553: PUSH
25554: LD_INT 1
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 3
25563: PUSH
25564: LD_INT 2
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 2
25573: PUSH
25574: LD_INT 3
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: LD_INT 3
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25616: LD_ADDR_VAR 0 26
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: LD_INT 0
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: LD_INT 1
25636: NEG
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: LD_INT 1
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 0
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: LD_INT 1
25689: NEG
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: LD_INT 2
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: LD_INT 2
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 2
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 1
25761: PUSH
25762: LD_INT 2
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 0
25771: PUSH
25772: LD_INT 2
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 1
25781: NEG
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 2
25792: NEG
25793: PUSH
25794: LD_INT 0
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 2
25803: NEG
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 2
25815: NEG
25816: PUSH
25817: LD_INT 2
25819: NEG
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 2
25827: PUSH
25828: LD_INT 3
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: LD_INT 3
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: NEG
25848: PUSH
25849: LD_INT 2
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 2
25858: NEG
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25892: LD_ADDR_VAR 0 27
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: LD_INT 1
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: LD_INT 1
25965: NEG
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 1
25973: NEG
25974: PUSH
25975: LD_INT 2
25977: NEG
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: LD_INT 2
25988: NEG
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: LD_INT 1
25999: NEG
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 2
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 2
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 2
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: LD_INT 2
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: LD_INT 2
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 1
26057: NEG
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 2
26068: NEG
26069: PUSH
26070: LD_INT 0
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 2
26079: NEG
26080: PUSH
26081: LD_INT 1
26083: NEG
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 2
26091: NEG
26092: PUSH
26093: LD_INT 2
26095: NEG
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 1
26103: NEG
26104: PUSH
26105: LD_INT 2
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 2
26114: NEG
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 3
26125: NEG
26126: PUSH
26127: LD_INT 1
26129: NEG
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 3
26137: NEG
26138: PUSH
26139: LD_INT 2
26141: NEG
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26172: LD_ADDR_VAR 0 28
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 1
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 0
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: NEG
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: NEG
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: LD_INT 2
26257: NEG
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: LD_INT 2
26268: NEG
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 2
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 2
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 2
26307: PUSH
26308: LD_INT 2
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 1
26317: PUSH
26318: LD_INT 2
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: LD_INT 2
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 1
26337: NEG
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 2
26348: NEG
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 2
26359: NEG
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 2
26371: NEG
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: NEG
26384: PUSH
26385: LD_INT 3
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: LD_INT 3
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 3
26407: NEG
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 3
26419: NEG
26420: PUSH
26421: LD_INT 2
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26454: LD_ADDR_VAR 0 29
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: LD_INT 1
26474: NEG
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 1
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: NEG
26513: PUSH
26514: LD_INT 0
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: LD_INT 1
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: LD_INT 2
26539: NEG
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: LD_INT 2
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 2
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 1
26589: PUSH
26590: LD_INT 2
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: LD_INT 2
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 1
26609: NEG
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 2
26620: NEG
26621: PUSH
26622: LD_INT 1
26624: NEG
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 2
26632: NEG
26633: PUSH
26634: LD_INT 2
26636: NEG
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 2
26644: NEG
26645: PUSH
26646: LD_INT 3
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 2
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 3
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: LD_INT 3
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: LD_INT 2
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 3
26698: NEG
26699: PUSH
26700: LD_INT 2
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26733: LD_ADDR_VAR 0 30
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: LD_INT 0
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 1
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: LD_INT 2
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: LD_INT 2
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 2
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 2
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: NEG
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 2
26899: NEG
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 2
26910: NEG
26911: PUSH
26912: LD_INT 1
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: NEG
26923: PUSH
26924: LD_INT 3
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: LD_INT 2
26937: NEG
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 3
26945: PUSH
26946: LD_INT 2
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: LD_INT 3
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 2
26965: NEG
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 3
26976: NEG
26977: PUSH
26978: LD_INT 1
26980: NEG
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27011: LD_ADDR_VAR 0 31
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 1
27092: NEG
27093: PUSH
27094: LD_INT 2
27096: NEG
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 2
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 2
27135: PUSH
27136: LD_INT 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 1
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 2
27176: NEG
27177: PUSH
27178: LD_INT 1
27180: NEG
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 2
27188: NEG
27189: PUSH
27190: LD_INT 2
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 2
27200: NEG
27201: PUSH
27202: LD_INT 3
27204: NEG
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 2
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 3
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: LD_INT 3
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 3
27254: NEG
27255: PUSH
27256: LD_INT 2
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27289: LD_ADDR_VAR 0 32
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: LD_INT 2
27374: NEG
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: LD_INT 2
27385: NEG
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 1
27396: NEG
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 2
27414: PUSH
27415: LD_INT 2
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 2
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 2
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: LD_INT 1
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: NEG
27479: PUSH
27480: LD_INT 3
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 2
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 3
27501: PUSH
27502: LD_INT 2
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 2
27511: PUSH
27512: LD_INT 3
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 2
27521: NEG
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 3
27532: NEG
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27567: LD_ADDR_VAR 0 33
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: LD_INT 0
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 1
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: NEG
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 1
27636: NEG
27637: PUSH
27638: LD_INT 1
27640: NEG
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 1
27648: NEG
27649: PUSH
27650: LD_INT 2
27652: NEG
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 2
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 2
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: LD_INT 2
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: LD_INT 2
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 2
27722: NEG
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 2
27733: NEG
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 2
27745: NEG
27746: PUSH
27747: LD_INT 2
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: LD_INT 3
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 2
27769: PUSH
27770: LD_INT 1
27772: NEG
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 3
27780: PUSH
27781: LD_INT 1
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: LD_INT 3
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: LD_INT 2
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 3
27811: NEG
27812: PUSH
27813: LD_INT 2
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27846: LD_ADDR_VAR 0 34
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: NEG
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 2
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: PUSH
27972: LD_INT 2
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: NEG
27992: PUSH
27993: LD_INT 1
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 2
28002: NEG
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 2
28013: NEG
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: NEG
28026: PUSH
28027: LD_INT 2
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: LD_INT 3
28041: NEG
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 2
28052: NEG
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 3
28060: PUSH
28061: LD_INT 2
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 2
28070: PUSH
28071: LD_INT 3
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 2
28080: NEG
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 3
28091: NEG
28092: PUSH
28093: LD_INT 1
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28126: LD_ADDR_VAR 0 35
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 1
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: LD_INT 1
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: LD_INT 0
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 2
28217: NEG
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28238: LD_ADDR_VAR 0 36
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 0
28255: PUSH
28256: LD_INT 1
28258: NEG
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 1
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: LD_INT 1
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: LD_INT 2
28323: NEG
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: LD_INT 2
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28350: LD_ADDR_VAR 0 37
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: LD_INT 1
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: LD_INT 1
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: LD_INT 1
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28462: LD_ADDR_VAR 0 38
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 1
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 1
28520: NEG
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: NEG
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 2
28553: NEG
28554: PUSH
28555: LD_INT 1
28557: NEG
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28574: LD_ADDR_VAR 0 39
28578: PUSH
28579: LD_INT 0
28581: PUSH
28582: LD_INT 0
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 0
28591: PUSH
28592: LD_INT 1
28594: NEG
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: LD_INT 1
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: LD_INT 1
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 1
28632: NEG
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 1
28643: NEG
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: LD_INT 2
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28686: LD_ADDR_VAR 0 40
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: LD_INT 1
28706: NEG
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: LD_INT 1
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: LD_INT 1
28770: NEG
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28798: LD_ADDR_VAR 0 41
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: LD_INT 0
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: LD_INT 1
28818: NEG
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 1
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 1
28856: NEG
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 1
28867: NEG
28868: PUSH
28869: LD_INT 1
28871: NEG
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 1
28879: NEG
28880: PUSH
28881: LD_INT 2
28883: NEG
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 2
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 2
28912: PUSH
28913: LD_INT 1
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 2
28922: PUSH
28923: LD_INT 2
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: LD_INT 2
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 2
28953: NEG
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 2
28964: NEG
28965: PUSH
28966: LD_INT 1
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 2
28976: NEG
28977: PUSH
28978: LD_INT 2
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 2
28988: NEG
28989: PUSH
28990: LD_INT 3
28992: NEG
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 3
29011: PUSH
29012: LD_INT 0
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 3
29021: PUSH
29022: LD_INT 1
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 3
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 3
29041: PUSH
29042: LD_INT 3
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: LD_INT 3
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 2
29061: NEG
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 3
29072: NEG
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 3
29083: NEG
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 3
29095: NEG
29096: PUSH
29097: LD_INT 2
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 3
29107: NEG
29108: PUSH
29109: LD_INT 3
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29148: LD_ADDR_VAR 0 42
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: LD_INT 0
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 1
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: LD_INT 0
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 1
29217: NEG
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 1
29229: NEG
29230: PUSH
29231: LD_INT 2
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: LD_INT 2
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: LD_INT 1
29255: NEG
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 2
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 2
29273: PUSH
29274: LD_INT 2
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: LD_INT 2
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: LD_INT 2
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 1
29303: NEG
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 2
29314: NEG
29315: PUSH
29316: LD_INT 1
29318: NEG
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 2
29326: NEG
29327: PUSH
29328: LD_INT 2
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 2
29338: NEG
29339: PUSH
29340: LD_INT 3
29342: NEG
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 1
29350: NEG
29351: PUSH
29352: LD_INT 3
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: LD_INT 3
29365: NEG
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: LD_INT 2
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 3
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 3
29394: PUSH
29395: LD_INT 3
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 2
29404: PUSH
29405: LD_INT 3
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 1
29414: PUSH
29415: LD_INT 3
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 1
29434: NEG
29435: PUSH
29436: LD_INT 2
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 3
29445: NEG
29446: PUSH
29447: LD_INT 2
29449: NEG
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 3
29457: NEG
29458: PUSH
29459: LD_INT 3
29461: NEG
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29498: LD_ADDR_VAR 0 43
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: LD_INT 1
29518: NEG
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: LD_INT 1
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 1
29556: NEG
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: LD_INT 1
29571: NEG
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: LD_INT 2
29583: NEG
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: LD_INT 2
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 1
29602: PUSH
29603: LD_INT 1
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 2
29623: PUSH
29624: LD_INT 1
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: LD_INT 2
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 0
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 2
29664: NEG
29665: PUSH
29666: LD_INT 0
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 2
29675: NEG
29676: PUSH
29677: LD_INT 1
29679: NEG
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: LD_INT 3
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: LD_INT 3
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 2
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 2
29721: PUSH
29722: LD_INT 1
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 3
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 3
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: LD_INT 3
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: LD_INT 3
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: NEG
29773: PUSH
29774: LD_INT 2
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 2
29783: NEG
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 3
29794: NEG
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 3
29805: NEG
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29846: LD_ADDR_VAR 0 44
29850: PUSH
29851: LD_INT 0
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 1
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 0
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: NEG
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 1
29915: NEG
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 1
29927: NEG
29928: PUSH
29929: LD_INT 2
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: LD_INT 1
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: LD_INT 1
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 2
29970: PUSH
29971: LD_INT 2
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: LD_INT 2
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 1
29990: NEG
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: NEG
30002: PUSH
30003: LD_INT 0
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 2
30012: NEG
30013: PUSH
30014: LD_INT 1
30016: NEG
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 2
30024: NEG
30025: PUSH
30026: LD_INT 2
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 2
30036: NEG
30037: PUSH
30038: LD_INT 3
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 2
30048: PUSH
30049: LD_INT 1
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 3
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 3
30079: PUSH
30080: LD_INT 2
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: LD_INT 3
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 2
30099: PUSH
30100: LD_INT 3
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 2
30109: NEG
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 3
30120: NEG
30121: PUSH
30122: LD_INT 0
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 3
30131: NEG
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 3
30143: NEG
30144: PUSH
30145: LD_INT 2
30147: NEG
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 3
30155: NEG
30156: PUSH
30157: LD_INT 3
30159: NEG
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30196: LD_ADDR_VAR 0 45
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 1
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: LD_INT 1
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: NEG
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: LD_INT 1
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: LD_INT 2
30281: NEG
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: LD_INT 2
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 2
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: LD_INT 2
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 1
30331: PUSH
30332: LD_INT 2
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 0
30341: PUSH
30342: LD_INT 2
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 1
30351: NEG
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 2
30362: NEG
30363: PUSH
30364: LD_INT 1
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 2
30374: NEG
30375: PUSH
30376: LD_INT 2
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 2
30386: NEG
30387: PUSH
30388: LD_INT 3
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: PUSH
30400: LD_INT 3
30402: NEG
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 0
30410: PUSH
30411: LD_INT 3
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: LD_INT 2
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 3
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 3
30442: PUSH
30443: LD_INT 3
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: LD_INT 3
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: LD_INT 3
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: LD_INT 2
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 3
30493: NEG
30494: PUSH
30495: LD_INT 2
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 3
30505: NEG
30506: PUSH
30507: LD_INT 3
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30546: LD_ADDR_VAR 0 46
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 1
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 1
30604: NEG
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 1
30627: NEG
30628: PUSH
30629: LD_INT 2
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 0
30639: PUSH
30640: LD_INT 2
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: LD_INT 1
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 2
30661: PUSH
30662: LD_INT 0
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: LD_INT 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 0
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 2
30712: NEG
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 2
30723: NEG
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: LD_INT 3
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: LD_INT 3
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 2
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 2
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 3
30780: PUSH
30781: LD_INT 0
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 3
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: LD_INT 3
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: LD_INT 3
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: LD_INT 2
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 3
30842: NEG
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 3
30853: NEG
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30894: LD_ADDR_VAR 0 47
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: LD_INT 0
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 0
30911: PUSH
30912: LD_INT 1
30914: NEG
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 1
30922: PUSH
30923: LD_INT 0
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 0
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 1
30952: NEG
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: LD_INT 1
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: LD_INT 2
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 0
30987: PUSH
30988: LD_INT 2
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: PUSH
30999: LD_INT 1
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 2
31021: NEG
31022: PUSH
31023: LD_INT 2
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31045: LD_ADDR_VAR 0 48
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: LD_INT 1
31065: NEG
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: LD_INT 1
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 1
31103: NEG
31104: PUSH
31105: LD_INT 0
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: LD_INT 2
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: LD_INT 1
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 2
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31192: LD_ADDR_VAR 0 49
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 1
31250: NEG
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: LD_INT 1
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 2
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 2
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31336: LD_ADDR_VAR 0 50
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: LD_INT 1
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 1
31394: NEG
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: LD_INT 1
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 2
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: LD_INT 2
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: LD_INT 1
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31480: LD_ADDR_VAR 0 51
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: LD_INT 2
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: LD_INT 2
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31627: LD_ADDR_VAR 0 52
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: LD_INT 0
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 1
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 1
31708: NEG
31709: PUSH
31710: LD_INT 2
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: LD_INT 1
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: NEG
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 2
31742: NEG
31743: PUSH
31744: LD_INT 1
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 2
31754: NEG
31755: PUSH
31756: LD_INT 2
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31778: LD_ADDR_VAR 0 53
31782: PUSH
31783: LD_INT 0
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 1
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: LD_INT 0
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 1
31847: NEG
31848: PUSH
31849: LD_INT 1
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: LD_INT 2
31863: NEG
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: LD_INT 2
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 1
31882: PUSH
31883: LD_INT 1
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: LD_INT 1
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 2
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: LD_INT 2
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: LD_INT 2
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: LD_INT 1
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 2
31954: NEG
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 2
31965: NEG
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 2
31977: NEG
31978: PUSH
31979: LD_INT 2
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32008: LD_ADDR_VAR 0 54
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 1
32066: NEG
32067: PUSH
32068: LD_INT 0
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 1
32077: NEG
32078: PUSH
32079: LD_INT 1
32081: NEG
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 1
32089: NEG
32090: PUSH
32091: LD_INT 2
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: LD_INT 2
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: LD_INT 1
32115: NEG
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 2
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 2
32143: PUSH
32144: LD_INT 2
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: LD_INT 2
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: LD_INT 2
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 1
32173: NEG
32174: PUSH
32175: LD_INT 1
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 2
32184: NEG
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 2
32195: NEG
32196: PUSH
32197: LD_INT 1
32199: NEG
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 2
32207: NEG
32208: PUSH
32209: LD_INT 2
32211: NEG
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32238: LD_ADDR_VAR 0 55
32242: PUSH
32243: LD_INT 0
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 1
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: LD_INT 1
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: LD_INT 1
32311: NEG
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: LD_INT 2
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: LD_INT 2
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 2
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 2
32373: PUSH
32374: LD_INT 2
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: LD_INT 2
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 2
32414: NEG
32415: PUSH
32416: LD_INT 0
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 2
32425: NEG
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 2
32437: NEG
32438: PUSH
32439: LD_INT 2
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32468: LD_ADDR_VAR 0 56
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: LD_INT 0
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: LD_INT 1
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: LD_INT 1
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 1
32526: NEG
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 1
32549: NEG
32550: PUSH
32551: LD_INT 2
32553: NEG
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: LD_INT 2
32564: NEG
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: PUSH
32573: LD_INT 1
32575: NEG
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 2
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 2
32603: PUSH
32604: LD_INT 2
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: LD_INT 2
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 2
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: LD_INT 1
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: NEG
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 2
32655: NEG
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 2
32667: NEG
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32698: LD_ADDR_VAR 0 57
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: LD_INT 1
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 1
32756: NEG
32757: PUSH
32758: LD_INT 0
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 1
32767: NEG
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 1
32779: NEG
32780: PUSH
32781: LD_INT 2
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: LD_INT 2
32794: NEG
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: LD_INT 1
32805: NEG
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 2
32833: PUSH
32834: LD_INT 2
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: LD_INT 2
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: LD_INT 2
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 1
32863: NEG
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 2
32874: NEG
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 2
32885: NEG
32886: PUSH
32887: LD_INT 1
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 2
32897: NEG
32898: PUSH
32899: LD_INT 2
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32928: LD_ADDR_VAR 0 58
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 1
32997: NEG
32998: PUSH
32999: LD_INT 1
33001: NEG
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: NEG
33010: PUSH
33011: LD_INT 2
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: LD_INT 2
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 2
33053: PUSH
33054: LD_INT 1
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 2
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: LD_INT 2
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 2
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 1
33093: NEG
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 2
33104: NEG
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 2
33127: NEG
33128: PUSH
33129: LD_INT 2
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33158: LD_ADDR_VAR 0 59
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: LD_INT 1
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: LD_INT 1
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 1
33216: NEG
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 1
33227: NEG
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33246: LD_ADDR_VAR 0 60
33250: PUSH
33251: LD_INT 0
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 0
33263: PUSH
33264: LD_INT 1
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 1
33315: NEG
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33334: LD_ADDR_VAR 0 61
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: PUSH
33363: LD_INT 0
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 1
33392: NEG
33393: PUSH
33394: LD_INT 0
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: LD_INT 1
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33422: LD_ADDR_VAR 0 62
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 1
33480: NEG
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33510: LD_ADDR_VAR 0 63
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 1
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: LD_INT 1
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 1
33568: NEG
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33598: LD_ADDR_VAR 0 64
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: ST_TO_ADDR
// end ; 1 :
33686: GO 39583
33688: LD_INT 1
33690: DOUBLE
33691: EQUAL
33692: IFTRUE 33696
33694: GO 36319
33696: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33697: LD_ADDR_VAR 0 11
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: LD_INT 3
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: LD_INT 3
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: LD_INT 2
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33741: LD_ADDR_VAR 0 12
33745: PUSH
33746: LD_INT 2
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 3
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 3
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: LIST
33781: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33782: LD_ADDR_VAR 0 13
33786: PUSH
33787: LD_INT 3
33789: PUSH
33790: LD_INT 2
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 3
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 3
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33822: LD_ADDR_VAR 0 14
33826: PUSH
33827: LD_INT 1
33829: PUSH
33830: LD_INT 3
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: LD_INT 3
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 1
33849: NEG
33850: PUSH
33851: LD_INT 2
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: LIST
33862: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33863: LD_ADDR_VAR 0 15
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: LD_INT 1
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 3
33881: NEG
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 3
33892: NEG
33893: PUSH
33894: LD_INT 1
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33907: LD_ADDR_VAR 0 16
33911: PUSH
33912: LD_INT 2
33914: NEG
33915: PUSH
33916: LD_INT 3
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 3
33926: NEG
33927: PUSH
33928: LD_INT 2
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 3
33938: NEG
33939: PUSH
33940: LD_INT 3
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33953: LD_ADDR_VAR 0 17
33957: PUSH
33958: LD_INT 1
33960: NEG
33961: PUSH
33962: LD_INT 3
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: LD_INT 3
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: LIST
33996: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33997: LD_ADDR_VAR 0 18
34001: PUSH
34002: LD_INT 2
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: LD_INT 0
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 3
34025: PUSH
34026: LD_INT 1
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: LIST
34037: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34038: LD_ADDR_VAR 0 19
34042: PUSH
34043: LD_INT 3
34045: PUSH
34046: LD_INT 2
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 3
34055: PUSH
34056: LD_INT 3
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 2
34065: PUSH
34066: LD_INT 3
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34078: LD_ADDR_VAR 0 20
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: LD_INT 3
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: LD_INT 3
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: LIST
34118: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34119: LD_ADDR_VAR 0 21
34123: PUSH
34124: LD_INT 2
34126: NEG
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 3
34137: NEG
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 3
34148: NEG
34149: PUSH
34150: LD_INT 1
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34163: LD_ADDR_VAR 0 22
34167: PUSH
34168: LD_INT 2
34170: NEG
34171: PUSH
34172: LD_INT 3
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 3
34182: NEG
34183: PUSH
34184: LD_INT 2
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 3
34194: NEG
34195: PUSH
34196: LD_INT 3
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: LIST
34208: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34209: LD_ADDR_VAR 0 23
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: LD_INT 3
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: LD_INT 4
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: LD_INT 3
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: LIST
34252: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34253: LD_ADDR_VAR 0 24
34257: PUSH
34258: LD_INT 3
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 3
34270: PUSH
34271: LD_INT 1
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 4
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: LIST
34293: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34294: LD_ADDR_VAR 0 25
34298: PUSH
34299: LD_INT 3
34301: PUSH
34302: LD_INT 3
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 4
34311: PUSH
34312: LD_INT 3
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 3
34321: PUSH
34322: LD_INT 4
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: LIST
34333: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34334: LD_ADDR_VAR 0 26
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: LD_INT 3
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: LD_INT 4
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PUSH
34363: LD_INT 3
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34375: LD_ADDR_VAR 0 27
34379: PUSH
34380: LD_INT 3
34382: NEG
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 3
34393: NEG
34394: PUSH
34395: LD_INT 1
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 4
34404: NEG
34405: PUSH
34406: LD_INT 1
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34419: LD_ADDR_VAR 0 28
34423: PUSH
34424: LD_INT 3
34426: NEG
34427: PUSH
34428: LD_INT 3
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 3
34438: NEG
34439: PUSH
34440: LD_INT 4
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 4
34450: NEG
34451: PUSH
34452: LD_INT 3
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34465: LD_ADDR_VAR 0 29
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: LD_INT 3
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: LD_INT 3
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: LD_INT 2
34498: NEG
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 1
34506: NEG
34507: PUSH
34508: LD_INT 4
34510: NEG
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 0
34518: PUSH
34519: LD_INT 4
34521: NEG
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: LD_INT 3
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: LD_INT 5
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 0
34552: PUSH
34553: LD_INT 5
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: LD_INT 4
34566: NEG
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 1
34574: NEG
34575: PUSH
34576: LD_INT 6
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: LD_INT 6
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: LD_INT 5
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34620: LD_ADDR_VAR 0 30
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 3
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 3
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 3
34658: PUSH
34659: LD_INT 1
34661: NEG
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 4
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 4
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 4
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 5
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 5
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 5
34720: PUSH
34721: LD_INT 1
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 6
34731: PUSH
34732: LD_INT 0
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 6
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34763: LD_ADDR_VAR 0 31
34767: PUSH
34768: LD_INT 3
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 3
34780: PUSH
34781: LD_INT 3
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 2
34790: PUSH
34791: LD_INT 3
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 4
34800: PUSH
34801: LD_INT 3
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 4
34810: PUSH
34811: LD_INT 4
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: LD_INT 4
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 5
34830: PUSH
34831: LD_INT 4
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 5
34840: PUSH
34841: LD_INT 5
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 4
34850: PUSH
34851: LD_INT 5
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 6
34860: PUSH
34861: LD_INT 5
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 6
34870: PUSH
34871: LD_INT 6
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 5
34880: PUSH
34881: LD_INT 6
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34902: LD_ADDR_VAR 0 32
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: LD_INT 3
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: PUSH
34941: LD_INT 4
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: PUSH
34962: LD_INT 3
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: LD_INT 5
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: LD_INT 5
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: LD_INT 4
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: LD_INT 6
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: LD_INT 6
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: NEG
35023: PUSH
35024: LD_INT 5
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35045: LD_ADDR_VAR 0 33
35049: PUSH
35050: LD_INT 2
35052: NEG
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 3
35063: NEG
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 3
35074: NEG
35075: PUSH
35076: LD_INT 1
35078: NEG
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 3
35086: NEG
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 4
35097: NEG
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 4
35108: NEG
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 4
35120: NEG
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 5
35131: NEG
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 5
35142: NEG
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 5
35154: NEG
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 6
35165: NEG
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 6
35176: NEG
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35200: LD_ADDR_VAR 0 34
35204: PUSH
35205: LD_INT 2
35207: NEG
35208: PUSH
35209: LD_INT 3
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 3
35219: NEG
35220: PUSH
35221: LD_INT 2
35223: NEG
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 3
35231: NEG
35232: PUSH
35233: LD_INT 3
35235: NEG
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 3
35243: NEG
35244: PUSH
35245: LD_INT 4
35247: NEG
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 4
35255: NEG
35256: PUSH
35257: LD_INT 3
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 4
35267: NEG
35268: PUSH
35269: LD_INT 4
35271: NEG
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 4
35279: NEG
35280: PUSH
35281: LD_INT 5
35283: NEG
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 5
35291: NEG
35292: PUSH
35293: LD_INT 4
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 5
35303: NEG
35304: PUSH
35305: LD_INT 5
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 5
35315: NEG
35316: PUSH
35317: LD_INT 6
35319: NEG
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 6
35327: NEG
35328: PUSH
35329: LD_INT 5
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 6
35339: NEG
35340: PUSH
35341: LD_INT 6
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35363: LD_ADDR_VAR 0 41
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: LD_INT 2
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: LD_INT 3
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: LD_INT 2
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35407: LD_ADDR_VAR 0 42
35411: PUSH
35412: LD_INT 2
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 2
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 3
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35448: LD_ADDR_VAR 0 43
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: LD_INT 2
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 3
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: LD_INT 3
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35488: LD_ADDR_VAR 0 44
35492: PUSH
35493: LD_INT 0
35495: PUSH
35496: LD_INT 2
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 1
35505: PUSH
35506: LD_INT 3
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: LD_INT 2
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35529: LD_ADDR_VAR 0 45
35533: PUSH
35534: LD_INT 2
35536: NEG
35537: PUSH
35538: LD_INT 0
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 2
35547: NEG
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 3
35558: NEG
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35573: LD_ADDR_VAR 0 46
35577: PUSH
35578: LD_INT 2
35580: NEG
35581: PUSH
35582: LD_INT 2
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 2
35592: NEG
35593: PUSH
35594: LD_INT 3
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 3
35604: NEG
35605: PUSH
35606: LD_INT 2
35608: NEG
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35619: LD_ADDR_VAR 0 47
35623: PUSH
35624: LD_INT 2
35626: NEG
35627: PUSH
35628: LD_INT 3
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: NEG
35639: PUSH
35640: LD_INT 3
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35652: LD_ADDR_VAR 0 48
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: LD_INT 2
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 1
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35683: LD_ADDR_VAR 0 49
35687: PUSH
35688: LD_INT 3
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 3
35700: PUSH
35701: LD_INT 2
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35712: LD_ADDR_VAR 0 50
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: LD_INT 3
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35741: LD_ADDR_VAR 0 51
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35772: LD_ADDR_VAR 0 52
35776: PUSH
35777: LD_INT 3
35779: NEG
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 3
35791: NEG
35792: PUSH
35793: LD_INT 2
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35805: LD_ADDR_VAR 0 53
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: LD_INT 3
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: LD_INT 3
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: LD_INT 2
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: LIST
35848: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35849: LD_ADDR_VAR 0 54
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: LD_INT 1
35859: NEG
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 3
35867: PUSH
35868: LD_INT 0
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 3
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35890: LD_ADDR_VAR 0 55
35894: PUSH
35895: LD_INT 3
35897: PUSH
35898: LD_INT 2
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 3
35907: PUSH
35908: LD_INT 3
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 2
35917: PUSH
35918: LD_INT 3
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35930: LD_ADDR_VAR 0 56
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: LD_INT 3
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 3
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35971: LD_ADDR_VAR 0 57
35975: PUSH
35976: LD_INT 2
35978: NEG
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 3
35989: NEG
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 3
36000: NEG
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36015: LD_ADDR_VAR 0 58
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: LD_INT 3
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 3
36034: NEG
36035: PUSH
36036: LD_INT 2
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 3
36046: NEG
36047: PUSH
36048: LD_INT 3
36050: NEG
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: LIST
36060: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36061: LD_ADDR_VAR 0 59
36065: PUSH
36066: LD_INT 1
36068: NEG
36069: PUSH
36070: LD_INT 2
36072: NEG
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: LD_INT 2
36083: NEG
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: LD_INT 1
36094: NEG
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: LIST
36104: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36105: LD_ADDR_VAR 0 60
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: LD_INT 1
36115: NEG
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 2
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: LIST
36145: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36146: LD_ADDR_VAR 0 61
36150: PUSH
36151: LD_INT 2
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 2
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: LD_INT 2
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36186: LD_ADDR_VAR 0 62
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: LD_INT 2
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: LD_INT 2
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 1
36213: NEG
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36227: LD_ADDR_VAR 0 63
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 2
36245: NEG
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 2
36256: NEG
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: LIST
36270: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36271: LD_ADDR_VAR 0 64
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: LD_INT 2
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 2
36290: NEG
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 2
36302: NEG
36303: PUSH
36304: LD_INT 2
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: LIST
36316: ST_TO_ADDR
// end ; 2 :
36317: GO 39583
36319: LD_INT 2
36321: DOUBLE
36322: EQUAL
36323: IFTRUE 36327
36325: GO 39582
36327: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36328: LD_ADDR_VAR 0 29
36332: PUSH
36333: LD_INT 4
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 4
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 5
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 5
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 4
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 3
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 3
36396: PUSH
36397: LD_INT 1
36399: NEG
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 3
36407: PUSH
36408: LD_INT 2
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 5
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 3
36428: PUSH
36429: LD_INT 3
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 3
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 4
36448: PUSH
36449: LD_INT 3
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 4
36458: PUSH
36459: LD_INT 4
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 3
36468: PUSH
36469: LD_INT 4
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: LD_INT 3
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 2
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 4
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: PUSH
36509: LD_INT 4
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: LD_INT 4
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: LD_INT 3
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 1
36538: PUSH
36539: LD_INT 4
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: LD_INT 5
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: LD_INT 5
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: LD_INT 4
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: NEG
36580: PUSH
36581: LD_INT 3
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: LD_INT 5
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: LD_INT 3
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 3
36611: NEG
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 3
36622: NEG
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 2
36634: NEG
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 2
36645: NEG
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 3
36656: NEG
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 4
36667: NEG
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 4
36678: NEG
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 4
36690: NEG
36691: PUSH
36692: LD_INT 2
36694: NEG
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: LD_INT 2
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 4
36713: NEG
36714: PUSH
36715: LD_INT 4
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 4
36725: NEG
36726: PUSH
36727: LD_INT 5
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 3
36737: NEG
36738: PUSH
36739: LD_INT 4
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 3
36749: NEG
36750: PUSH
36751: LD_INT 3
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 4
36761: NEG
36762: PUSH
36763: LD_INT 3
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 5
36773: NEG
36774: PUSH
36775: LD_INT 4
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 5
36785: NEG
36786: PUSH
36787: LD_INT 5
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 3
36797: NEG
36798: PUSH
36799: LD_INT 5
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 5
36809: NEG
36810: PUSH
36811: LD_INT 3
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
36866: LD_ADDR_VAR 0 30
36870: PUSH
36871: LD_INT 4
36873: PUSH
36874: LD_INT 4
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 4
36883: PUSH
36884: LD_INT 3
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 5
36893: PUSH
36894: LD_INT 4
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 5
36903: PUSH
36904: LD_INT 5
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 4
36913: PUSH
36914: LD_INT 5
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 3
36923: PUSH
36924: LD_INT 4
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 3
36933: PUSH
36934: LD_INT 3
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 5
36943: PUSH
36944: LD_INT 3
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 3
36953: PUSH
36954: LD_INT 5
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: LD_INT 3
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 2
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: LD_INT 3
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: LD_INT 4
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 0
37003: PUSH
37004: LD_INT 4
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: LD_INT 3
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 1
37024: NEG
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: LD_INT 4
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 2
37045: NEG
37046: PUSH
37047: LD_INT 2
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 4
37056: NEG
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 4
37067: NEG
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 3
37079: NEG
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 3
37090: NEG
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 4
37101: NEG
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 5
37112: NEG
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 5
37123: NEG
37124: PUSH
37125: LD_INT 1
37127: NEG
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 5
37135: NEG
37136: PUSH
37137: LD_INT 2
37139: NEG
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 3
37147: NEG
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 3
37158: NEG
37159: PUSH
37160: LD_INT 3
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 3
37170: NEG
37171: PUSH
37172: LD_INT 4
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: LD_INT 3
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 2
37194: NEG
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 3
37206: NEG
37207: PUSH
37208: LD_INT 2
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 4
37218: NEG
37219: PUSH
37220: LD_INT 3
37222: NEG
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 4
37230: NEG
37231: PUSH
37232: LD_INT 4
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: NEG
37243: PUSH
37244: LD_INT 4
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 4
37254: NEG
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: LD_INT 4
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: LD_INT 5
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: PUSH
37289: LD_INT 4
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: LD_INT 3
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: LD_INT 3
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: LD_INT 4
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 5
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: LD_INT 3
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: LD_INT 5
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37413: LD_ADDR_VAR 0 31
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: LD_INT 4
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: LD_INT 3
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: LD_INT 4
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: LD_INT 5
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 5
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: LD_INT 4
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: LD_INT 3
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 5
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: NEG
37503: PUSH
37504: LD_INT 3
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 3
37513: NEG
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 3
37524: NEG
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 2
37536: NEG
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 3
37558: NEG
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 4
37569: NEG
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 4
37580: NEG
37581: PUSH
37582: LD_INT 1
37584: NEG
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 4
37592: NEG
37593: PUSH
37594: LD_INT 2
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 2
37604: NEG
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 4
37615: NEG
37616: PUSH
37617: LD_INT 4
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 4
37627: NEG
37628: PUSH
37629: LD_INT 5
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 3
37639: NEG
37640: PUSH
37641: LD_INT 4
37643: NEG
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 3
37651: NEG
37652: PUSH
37653: LD_INT 3
37655: NEG
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 4
37663: NEG
37664: PUSH
37665: LD_INT 3
37667: NEG
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 5
37675: NEG
37676: PUSH
37677: LD_INT 4
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 5
37687: NEG
37688: PUSH
37689: LD_INT 5
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 3
37699: NEG
37700: PUSH
37701: LD_INT 5
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 5
37711: NEG
37712: PUSH
37713: LD_INT 3
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 3
37726: NEG
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: LD_INT 4
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 3
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: LD_INT 2
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: LD_INT 3
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: LD_INT 4
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: LD_INT 2
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: LD_INT 4
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 4
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 4
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 5
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 5
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 4
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 3
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 3
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 3
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 5
37908: PUSH
37909: LD_INT 2
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
37963: LD_ADDR_VAR 0 32
37967: PUSH
37968: LD_INT 4
37970: NEG
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 4
37981: NEG
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 3
37993: NEG
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 3
38004: NEG
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 4
38015: NEG
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 5
38026: NEG
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 5
38037: NEG
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 5
38049: NEG
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 3
38061: NEG
38062: PUSH
38063: LD_INT 2
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 3
38072: NEG
38073: PUSH
38074: LD_INT 3
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 3
38084: NEG
38085: PUSH
38086: LD_INT 4
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: NEG
38097: PUSH
38098: LD_INT 3
38100: NEG
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 2
38108: NEG
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 3
38120: NEG
38121: PUSH
38122: LD_INT 2
38124: NEG
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 4
38132: NEG
38133: PUSH
38134: LD_INT 3
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 4
38144: NEG
38145: PUSH
38146: LD_INT 4
38148: NEG
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: LD_INT 4
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 4
38168: NEG
38169: PUSH
38170: LD_INT 2
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: LD_INT 4
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: LD_INT 5
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: LD_INT 4
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 1
38213: PUSH
38214: LD_INT 3
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 3
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: PUSH
38237: LD_INT 4
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: LD_INT 5
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: LD_INT 3
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: LD_INT 5
38274: NEG
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 3
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 3
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 4
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 4
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 3
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 2
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 4
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 4
38375: PUSH
38376: LD_INT 4
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 4
38385: PUSH
38386: LD_INT 3
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 5
38395: PUSH
38396: LD_INT 4
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 5
38405: PUSH
38406: LD_INT 5
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 4
38415: PUSH
38416: LD_INT 5
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 3
38425: PUSH
38426: LD_INT 4
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 3
38435: PUSH
38436: LD_INT 3
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 5
38445: PUSH
38446: LD_INT 3
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 3
38455: PUSH
38456: LD_INT 5
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38510: LD_ADDR_VAR 0 33
38514: PUSH
38515: LD_INT 4
38517: NEG
38518: PUSH
38519: LD_INT 4
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 4
38529: NEG
38530: PUSH
38531: LD_INT 5
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 3
38541: NEG
38542: PUSH
38543: LD_INT 4
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 3
38553: NEG
38554: PUSH
38555: LD_INT 3
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 4
38565: NEG
38566: PUSH
38567: LD_INT 3
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 5
38577: NEG
38578: PUSH
38579: LD_INT 4
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 5
38589: NEG
38590: PUSH
38591: LD_INT 5
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 3
38601: NEG
38602: PUSH
38603: LD_INT 5
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 5
38613: NEG
38614: PUSH
38615: LD_INT 3
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 3
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: LD_INT 4
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: LD_INT 3
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: LD_INT 2
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: LD_INT 2
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: LD_INT 3
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 4
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: LD_INT 2
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 2
38715: NEG
38716: PUSH
38717: LD_INT 4
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 4
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 4
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 5
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 5
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 4
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 3
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 3
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 3
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 5
38810: PUSH
38811: LD_INT 2
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 3
38820: PUSH
38821: LD_INT 3
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 3
38830: PUSH
38831: LD_INT 2
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 4
38840: PUSH
38841: LD_INT 3
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 4
38850: PUSH
38851: LD_INT 4
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: LD_INT 4
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: LD_INT 2
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 4
38890: PUSH
38891: LD_INT 2
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: LD_INT 4
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: LD_INT 4
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 3
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: LD_INT 4
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 5
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 5
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: LD_INT 4
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 3
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: LD_INT 5
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39048: LD_ADDR_VAR 0 34
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: LD_INT 4
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 5
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: LD_INT 4
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: LD_INT 3
39091: NEG
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: LD_INT 3
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: LD_INT 4
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: LD_INT 5
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: LD_INT 3
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: LD_INT 5
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 3
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 3
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 4
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 4
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 3
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 2
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 2
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 4
39240: PUSH
39241: LD_INT 2
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 4
39250: PUSH
39251: LD_INT 4
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 4
39260: PUSH
39261: LD_INT 3
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 5
39270: PUSH
39271: LD_INT 4
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 5
39280: PUSH
39281: LD_INT 5
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 4
39290: PUSH
39291: LD_INT 5
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 3
39300: PUSH
39301: LD_INT 4
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 3
39310: PUSH
39311: LD_INT 3
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 5
39320: PUSH
39321: LD_INT 3
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 3
39330: PUSH
39331: LD_INT 5
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 3
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 1
39360: PUSH
39361: LD_INT 3
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: LD_INT 4
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: LD_INT 4
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: LD_INT 3
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: LD_INT 4
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 4
39433: NEG
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 4
39444: NEG
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 3
39456: NEG
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 3
39467: NEG
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 4
39478: NEG
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 5
39489: NEG
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 5
39500: NEG
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 5
39512: NEG
39513: PUSH
39514: LD_INT 2
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 3
39524: NEG
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: ST_TO_ADDR
// end ; end ;
39580: GO 39583
39582: POP
// case btype of b_depot , b_warehouse :
39583: LD_VAR 0 1
39587: PUSH
39588: LD_INT 0
39590: DOUBLE
39591: EQUAL
39592: IFTRUE 39602
39594: LD_INT 1
39596: DOUBLE
39597: EQUAL
39598: IFTRUE 39602
39600: GO 39803
39602: POP
// case nation of nation_american :
39603: LD_VAR 0 5
39607: PUSH
39608: LD_INT 1
39610: DOUBLE
39611: EQUAL
39612: IFTRUE 39616
39614: GO 39672
39616: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39617: LD_ADDR_VAR 0 9
39621: PUSH
39622: LD_VAR 0 11
39626: PUSH
39627: LD_VAR 0 12
39631: PUSH
39632: LD_VAR 0 13
39636: PUSH
39637: LD_VAR 0 14
39641: PUSH
39642: LD_VAR 0 15
39646: PUSH
39647: LD_VAR 0 16
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: PUSH
39660: LD_VAR 0 4
39664: PUSH
39665: LD_INT 1
39667: PLUS
39668: ARRAY
39669: ST_TO_ADDR
39670: GO 39801
39672: LD_INT 2
39674: DOUBLE
39675: EQUAL
39676: IFTRUE 39680
39678: GO 39736
39680: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39681: LD_ADDR_VAR 0 9
39685: PUSH
39686: LD_VAR 0 17
39690: PUSH
39691: LD_VAR 0 18
39695: PUSH
39696: LD_VAR 0 19
39700: PUSH
39701: LD_VAR 0 20
39705: PUSH
39706: LD_VAR 0 21
39710: PUSH
39711: LD_VAR 0 22
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: PUSH
39724: LD_VAR 0 4
39728: PUSH
39729: LD_INT 1
39731: PLUS
39732: ARRAY
39733: ST_TO_ADDR
39734: GO 39801
39736: LD_INT 3
39738: DOUBLE
39739: EQUAL
39740: IFTRUE 39744
39742: GO 39800
39744: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39745: LD_ADDR_VAR 0 9
39749: PUSH
39750: LD_VAR 0 23
39754: PUSH
39755: LD_VAR 0 24
39759: PUSH
39760: LD_VAR 0 25
39764: PUSH
39765: LD_VAR 0 26
39769: PUSH
39770: LD_VAR 0 27
39774: PUSH
39775: LD_VAR 0 28
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: PUSH
39788: LD_VAR 0 4
39792: PUSH
39793: LD_INT 1
39795: PLUS
39796: ARRAY
39797: ST_TO_ADDR
39798: GO 39801
39800: POP
39801: GO 40356
39803: LD_INT 2
39805: DOUBLE
39806: EQUAL
39807: IFTRUE 39817
39809: LD_INT 3
39811: DOUBLE
39812: EQUAL
39813: IFTRUE 39817
39815: GO 39873
39817: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39818: LD_ADDR_VAR 0 9
39822: PUSH
39823: LD_VAR 0 29
39827: PUSH
39828: LD_VAR 0 30
39832: PUSH
39833: LD_VAR 0 31
39837: PUSH
39838: LD_VAR 0 32
39842: PUSH
39843: LD_VAR 0 33
39847: PUSH
39848: LD_VAR 0 34
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: PUSH
39861: LD_VAR 0 4
39865: PUSH
39866: LD_INT 1
39868: PLUS
39869: ARRAY
39870: ST_TO_ADDR
39871: GO 40356
39873: LD_INT 16
39875: DOUBLE
39876: EQUAL
39877: IFTRUE 39935
39879: LD_INT 17
39881: DOUBLE
39882: EQUAL
39883: IFTRUE 39935
39885: LD_INT 18
39887: DOUBLE
39888: EQUAL
39889: IFTRUE 39935
39891: LD_INT 19
39893: DOUBLE
39894: EQUAL
39895: IFTRUE 39935
39897: LD_INT 22
39899: DOUBLE
39900: EQUAL
39901: IFTRUE 39935
39903: LD_INT 20
39905: DOUBLE
39906: EQUAL
39907: IFTRUE 39935
39909: LD_INT 21
39911: DOUBLE
39912: EQUAL
39913: IFTRUE 39935
39915: LD_INT 23
39917: DOUBLE
39918: EQUAL
39919: IFTRUE 39935
39921: LD_INT 24
39923: DOUBLE
39924: EQUAL
39925: IFTRUE 39935
39927: LD_INT 25
39929: DOUBLE
39930: EQUAL
39931: IFTRUE 39935
39933: GO 39991
39935: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39936: LD_ADDR_VAR 0 9
39940: PUSH
39941: LD_VAR 0 35
39945: PUSH
39946: LD_VAR 0 36
39950: PUSH
39951: LD_VAR 0 37
39955: PUSH
39956: LD_VAR 0 38
39960: PUSH
39961: LD_VAR 0 39
39965: PUSH
39966: LD_VAR 0 40
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: PUSH
39979: LD_VAR 0 4
39983: PUSH
39984: LD_INT 1
39986: PLUS
39987: ARRAY
39988: ST_TO_ADDR
39989: GO 40356
39991: LD_INT 6
39993: DOUBLE
39994: EQUAL
39995: IFTRUE 40047
39997: LD_INT 7
39999: DOUBLE
40000: EQUAL
40001: IFTRUE 40047
40003: LD_INT 8
40005: DOUBLE
40006: EQUAL
40007: IFTRUE 40047
40009: LD_INT 13
40011: DOUBLE
40012: EQUAL
40013: IFTRUE 40047
40015: LD_INT 12
40017: DOUBLE
40018: EQUAL
40019: IFTRUE 40047
40021: LD_INT 15
40023: DOUBLE
40024: EQUAL
40025: IFTRUE 40047
40027: LD_INT 11
40029: DOUBLE
40030: EQUAL
40031: IFTRUE 40047
40033: LD_INT 14
40035: DOUBLE
40036: EQUAL
40037: IFTRUE 40047
40039: LD_INT 10
40041: DOUBLE
40042: EQUAL
40043: IFTRUE 40047
40045: GO 40103
40047: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40048: LD_ADDR_VAR 0 9
40052: PUSH
40053: LD_VAR 0 41
40057: PUSH
40058: LD_VAR 0 42
40062: PUSH
40063: LD_VAR 0 43
40067: PUSH
40068: LD_VAR 0 44
40072: PUSH
40073: LD_VAR 0 45
40077: PUSH
40078: LD_VAR 0 46
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: PUSH
40091: LD_VAR 0 4
40095: PUSH
40096: LD_INT 1
40098: PLUS
40099: ARRAY
40100: ST_TO_ADDR
40101: GO 40356
40103: LD_INT 36
40105: DOUBLE
40106: EQUAL
40107: IFTRUE 40111
40109: GO 40167
40111: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40112: LD_ADDR_VAR 0 9
40116: PUSH
40117: LD_VAR 0 47
40121: PUSH
40122: LD_VAR 0 48
40126: PUSH
40127: LD_VAR 0 49
40131: PUSH
40132: LD_VAR 0 50
40136: PUSH
40137: LD_VAR 0 51
40141: PUSH
40142: LD_VAR 0 52
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: PUSH
40155: LD_VAR 0 4
40159: PUSH
40160: LD_INT 1
40162: PLUS
40163: ARRAY
40164: ST_TO_ADDR
40165: GO 40356
40167: LD_INT 4
40169: DOUBLE
40170: EQUAL
40171: IFTRUE 40193
40173: LD_INT 5
40175: DOUBLE
40176: EQUAL
40177: IFTRUE 40193
40179: LD_INT 34
40181: DOUBLE
40182: EQUAL
40183: IFTRUE 40193
40185: LD_INT 37
40187: DOUBLE
40188: EQUAL
40189: IFTRUE 40193
40191: GO 40249
40193: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40194: LD_ADDR_VAR 0 9
40198: PUSH
40199: LD_VAR 0 53
40203: PUSH
40204: LD_VAR 0 54
40208: PUSH
40209: LD_VAR 0 55
40213: PUSH
40214: LD_VAR 0 56
40218: PUSH
40219: LD_VAR 0 57
40223: PUSH
40224: LD_VAR 0 58
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: PUSH
40237: LD_VAR 0 4
40241: PUSH
40242: LD_INT 1
40244: PLUS
40245: ARRAY
40246: ST_TO_ADDR
40247: GO 40356
40249: LD_INT 31
40251: DOUBLE
40252: EQUAL
40253: IFTRUE 40299
40255: LD_INT 32
40257: DOUBLE
40258: EQUAL
40259: IFTRUE 40299
40261: LD_INT 33
40263: DOUBLE
40264: EQUAL
40265: IFTRUE 40299
40267: LD_INT 27
40269: DOUBLE
40270: EQUAL
40271: IFTRUE 40299
40273: LD_INT 26
40275: DOUBLE
40276: EQUAL
40277: IFTRUE 40299
40279: LD_INT 28
40281: DOUBLE
40282: EQUAL
40283: IFTRUE 40299
40285: LD_INT 29
40287: DOUBLE
40288: EQUAL
40289: IFTRUE 40299
40291: LD_INT 30
40293: DOUBLE
40294: EQUAL
40295: IFTRUE 40299
40297: GO 40355
40299: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40300: LD_ADDR_VAR 0 9
40304: PUSH
40305: LD_VAR 0 59
40309: PUSH
40310: LD_VAR 0 60
40314: PUSH
40315: LD_VAR 0 61
40319: PUSH
40320: LD_VAR 0 62
40324: PUSH
40325: LD_VAR 0 63
40329: PUSH
40330: LD_VAR 0 64
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: PUSH
40343: LD_VAR 0 4
40347: PUSH
40348: LD_INT 1
40350: PLUS
40351: ARRAY
40352: ST_TO_ADDR
40353: GO 40356
40355: POP
// temp_list2 = [ ] ;
40356: LD_ADDR_VAR 0 10
40360: PUSH
40361: EMPTY
40362: ST_TO_ADDR
// for i in temp_list do
40363: LD_ADDR_VAR 0 8
40367: PUSH
40368: LD_VAR 0 9
40372: PUSH
40373: FOR_IN
40374: IFFALSE 40426
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40376: LD_ADDR_VAR 0 10
40380: PUSH
40381: LD_VAR 0 10
40385: PUSH
40386: LD_VAR 0 8
40390: PUSH
40391: LD_INT 1
40393: ARRAY
40394: PUSH
40395: LD_VAR 0 2
40399: PLUS
40400: PUSH
40401: LD_VAR 0 8
40405: PUSH
40406: LD_INT 2
40408: ARRAY
40409: PUSH
40410: LD_VAR 0 3
40414: PLUS
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: EMPTY
40421: LIST
40422: ADD
40423: ST_TO_ADDR
40424: GO 40373
40426: POP
40427: POP
// result = temp_list2 ;
40428: LD_ADDR_VAR 0 7
40432: PUSH
40433: LD_VAR 0 10
40437: ST_TO_ADDR
// end ;
40438: LD_VAR 0 7
40442: RET
// export function EnemyInRange ( unit , dist ) ; begin
40443: LD_INT 0
40445: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40446: LD_ADDR_VAR 0 3
40450: PUSH
40451: LD_VAR 0 1
40455: PPUSH
40456: CALL_OW 255
40460: PPUSH
40461: LD_VAR 0 1
40465: PPUSH
40466: CALL_OW 250
40470: PPUSH
40471: LD_VAR 0 1
40475: PPUSH
40476: CALL_OW 251
40480: PPUSH
40481: LD_VAR 0 2
40485: PPUSH
40486: CALL 13816 0 4
40490: PUSH
40491: LD_INT 4
40493: ARRAY
40494: ST_TO_ADDR
// end ;
40495: LD_VAR 0 3
40499: RET
// export function PlayerSeeMe ( unit ) ; begin
40500: LD_INT 0
40502: PPUSH
// result := See ( your_side , unit ) ;
40503: LD_ADDR_VAR 0 2
40507: PUSH
40508: LD_OWVAR 2
40512: PPUSH
40513: LD_VAR 0 1
40517: PPUSH
40518: CALL_OW 292
40522: ST_TO_ADDR
// end ;
40523: LD_VAR 0 2
40527: RET
// export function ReverseDir ( unit ) ; begin
40528: LD_INT 0
40530: PPUSH
// if not unit then
40531: LD_VAR 0 1
40535: NOT
40536: IFFALSE 40540
// exit ;
40538: GO 40563
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40540: LD_ADDR_VAR 0 2
40544: PUSH
40545: LD_VAR 0 1
40549: PPUSH
40550: CALL_OW 254
40554: PUSH
40555: LD_INT 3
40557: PLUS
40558: PUSH
40559: LD_INT 6
40561: MOD
40562: ST_TO_ADDR
// end ;
40563: LD_VAR 0 2
40567: RET
// export function ReverseArray ( array ) ; var i ; begin
40568: LD_INT 0
40570: PPUSH
40571: PPUSH
// if not array then
40572: LD_VAR 0 1
40576: NOT
40577: IFFALSE 40581
// exit ;
40579: GO 40636
// result := [ ] ;
40581: LD_ADDR_VAR 0 2
40585: PUSH
40586: EMPTY
40587: ST_TO_ADDR
// for i := array downto 1 do
40588: LD_ADDR_VAR 0 3
40592: PUSH
40593: DOUBLE
40594: LD_VAR 0 1
40598: INC
40599: ST_TO_ADDR
40600: LD_INT 1
40602: PUSH
40603: FOR_DOWNTO
40604: IFFALSE 40634
// result := Join ( result , array [ i ] ) ;
40606: LD_ADDR_VAR 0 2
40610: PUSH
40611: LD_VAR 0 2
40615: PPUSH
40616: LD_VAR 0 1
40620: PUSH
40621: LD_VAR 0 3
40625: ARRAY
40626: PPUSH
40627: CALL 45279 0 2
40631: ST_TO_ADDR
40632: GO 40603
40634: POP
40635: POP
// end ;
40636: LD_VAR 0 2
40640: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
40641: LD_INT 0
40643: PPUSH
40644: PPUSH
40645: PPUSH
40646: PPUSH
40647: PPUSH
40648: PPUSH
// if not unit or not hexes then
40649: LD_VAR 0 1
40653: NOT
40654: PUSH
40655: LD_VAR 0 2
40659: NOT
40660: OR
40661: IFFALSE 40665
// exit ;
40663: GO 40788
// dist := 9999 ;
40665: LD_ADDR_VAR 0 5
40669: PUSH
40670: LD_INT 9999
40672: ST_TO_ADDR
// for i = 1 to hexes do
40673: LD_ADDR_VAR 0 4
40677: PUSH
40678: DOUBLE
40679: LD_INT 1
40681: DEC
40682: ST_TO_ADDR
40683: LD_VAR 0 2
40687: PUSH
40688: FOR_TO
40689: IFFALSE 40776
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40691: LD_ADDR_VAR 0 6
40695: PUSH
40696: LD_VAR 0 1
40700: PPUSH
40701: LD_VAR 0 2
40705: PUSH
40706: LD_VAR 0 4
40710: ARRAY
40711: PUSH
40712: LD_INT 1
40714: ARRAY
40715: PPUSH
40716: LD_VAR 0 2
40720: PUSH
40721: LD_VAR 0 4
40725: ARRAY
40726: PUSH
40727: LD_INT 2
40729: ARRAY
40730: PPUSH
40731: CALL_OW 297
40735: ST_TO_ADDR
// if tdist < dist then
40736: LD_VAR 0 6
40740: PUSH
40741: LD_VAR 0 5
40745: LESS
40746: IFFALSE 40774
// begin hex := hexes [ i ] ;
40748: LD_ADDR_VAR 0 8
40752: PUSH
40753: LD_VAR 0 2
40757: PUSH
40758: LD_VAR 0 4
40762: ARRAY
40763: ST_TO_ADDR
// dist := tdist ;
40764: LD_ADDR_VAR 0 5
40768: PUSH
40769: LD_VAR 0 6
40773: ST_TO_ADDR
// end ; end ;
40774: GO 40688
40776: POP
40777: POP
// result := hex ;
40778: LD_ADDR_VAR 0 3
40782: PUSH
40783: LD_VAR 0 8
40787: ST_TO_ADDR
// end ;
40788: LD_VAR 0 3
40792: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40793: LD_INT 0
40795: PPUSH
40796: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40797: LD_VAR 0 1
40801: NOT
40802: PUSH
40803: LD_VAR 0 1
40807: PUSH
40808: LD_INT 21
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 23
40820: PUSH
40821: LD_INT 2
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PPUSH
40832: CALL_OW 69
40836: IN
40837: NOT
40838: OR
40839: IFFALSE 40843
// exit ;
40841: GO 40890
// for i = 1 to 3 do
40843: LD_ADDR_VAR 0 3
40847: PUSH
40848: DOUBLE
40849: LD_INT 1
40851: DEC
40852: ST_TO_ADDR
40853: LD_INT 3
40855: PUSH
40856: FOR_TO
40857: IFFALSE 40888
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40859: LD_VAR 0 1
40863: PPUSH
40864: CALL_OW 250
40868: PPUSH
40869: LD_VAR 0 1
40873: PPUSH
40874: CALL_OW 251
40878: PPUSH
40879: LD_INT 1
40881: PPUSH
40882: CALL_OW 453
40886: GO 40856
40888: POP
40889: POP
// end ;
40890: LD_VAR 0 2
40894: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40895: LD_INT 0
40897: PPUSH
40898: PPUSH
40899: PPUSH
40900: PPUSH
40901: PPUSH
40902: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40903: LD_VAR 0 1
40907: NOT
40908: PUSH
40909: LD_VAR 0 2
40913: NOT
40914: OR
40915: PUSH
40916: LD_VAR 0 1
40920: PPUSH
40921: CALL_OW 314
40925: OR
40926: IFFALSE 40930
// exit ;
40928: GO 41397
// if GetLives ( i ) < 250 then
40930: LD_VAR 0 4
40934: PPUSH
40935: CALL_OW 256
40939: PUSH
40940: LD_INT 250
40942: LESS
40943: IFFALSE 40956
// begin ComAutodestruct ( i ) ;
40945: LD_VAR 0 4
40949: PPUSH
40950: CALL 40793 0 1
// exit ;
40954: GO 41397
// end ; x := GetX ( enemy_unit ) ;
40956: LD_ADDR_VAR 0 7
40960: PUSH
40961: LD_VAR 0 2
40965: PPUSH
40966: CALL_OW 250
40970: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40971: LD_ADDR_VAR 0 8
40975: PUSH
40976: LD_VAR 0 2
40980: PPUSH
40981: CALL_OW 251
40985: ST_TO_ADDR
// if not x or not y then
40986: LD_VAR 0 7
40990: NOT
40991: PUSH
40992: LD_VAR 0 8
40996: NOT
40997: OR
40998: IFFALSE 41002
// exit ;
41000: GO 41397
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41002: LD_ADDR_VAR 0 6
41006: PUSH
41007: LD_VAR 0 7
41011: PPUSH
41012: LD_INT 0
41014: PPUSH
41015: LD_INT 4
41017: PPUSH
41018: CALL_OW 272
41022: PUSH
41023: LD_VAR 0 8
41027: PPUSH
41028: LD_INT 0
41030: PPUSH
41031: LD_INT 4
41033: PPUSH
41034: CALL_OW 273
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_VAR 0 7
41047: PPUSH
41048: LD_INT 1
41050: PPUSH
41051: LD_INT 4
41053: PPUSH
41054: CALL_OW 272
41058: PUSH
41059: LD_VAR 0 8
41063: PPUSH
41064: LD_INT 1
41066: PPUSH
41067: LD_INT 4
41069: PPUSH
41070: CALL_OW 273
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_VAR 0 7
41083: PPUSH
41084: LD_INT 2
41086: PPUSH
41087: LD_INT 4
41089: PPUSH
41090: CALL_OW 272
41094: PUSH
41095: LD_VAR 0 8
41099: PPUSH
41100: LD_INT 2
41102: PPUSH
41103: LD_INT 4
41105: PPUSH
41106: CALL_OW 273
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_VAR 0 7
41119: PPUSH
41120: LD_INT 3
41122: PPUSH
41123: LD_INT 4
41125: PPUSH
41126: CALL_OW 272
41130: PUSH
41131: LD_VAR 0 8
41135: PPUSH
41136: LD_INT 3
41138: PPUSH
41139: LD_INT 4
41141: PPUSH
41142: CALL_OW 273
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_VAR 0 7
41155: PPUSH
41156: LD_INT 4
41158: PPUSH
41159: LD_INT 4
41161: PPUSH
41162: CALL_OW 272
41166: PUSH
41167: LD_VAR 0 8
41171: PPUSH
41172: LD_INT 4
41174: PPUSH
41175: LD_INT 4
41177: PPUSH
41178: CALL_OW 273
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_VAR 0 7
41191: PPUSH
41192: LD_INT 5
41194: PPUSH
41195: LD_INT 4
41197: PPUSH
41198: CALL_OW 272
41202: PUSH
41203: LD_VAR 0 8
41207: PPUSH
41208: LD_INT 5
41210: PPUSH
41211: LD_INT 4
41213: PPUSH
41214: CALL_OW 273
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: ST_TO_ADDR
// for i = tmp downto 1 do
41231: LD_ADDR_VAR 0 4
41235: PUSH
41236: DOUBLE
41237: LD_VAR 0 6
41241: INC
41242: ST_TO_ADDR
41243: LD_INT 1
41245: PUSH
41246: FOR_DOWNTO
41247: IFFALSE 41348
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41249: LD_VAR 0 6
41253: PUSH
41254: LD_VAR 0 4
41258: ARRAY
41259: PUSH
41260: LD_INT 1
41262: ARRAY
41263: PPUSH
41264: LD_VAR 0 6
41268: PUSH
41269: LD_VAR 0 4
41273: ARRAY
41274: PUSH
41275: LD_INT 2
41277: ARRAY
41278: PPUSH
41279: CALL_OW 488
41283: NOT
41284: PUSH
41285: LD_VAR 0 6
41289: PUSH
41290: LD_VAR 0 4
41294: ARRAY
41295: PUSH
41296: LD_INT 1
41298: ARRAY
41299: PPUSH
41300: LD_VAR 0 6
41304: PUSH
41305: LD_VAR 0 4
41309: ARRAY
41310: PUSH
41311: LD_INT 2
41313: ARRAY
41314: PPUSH
41315: CALL_OW 428
41319: PUSH
41320: LD_INT 0
41322: NONEQUAL
41323: OR
41324: IFFALSE 41346
// tmp := Delete ( tmp , i ) ;
41326: LD_ADDR_VAR 0 6
41330: PUSH
41331: LD_VAR 0 6
41335: PPUSH
41336: LD_VAR 0 4
41340: PPUSH
41341: CALL_OW 3
41345: ST_TO_ADDR
41346: GO 41246
41348: POP
41349: POP
// j := GetClosestHex ( unit , tmp ) ;
41350: LD_ADDR_VAR 0 5
41354: PUSH
41355: LD_VAR 0 1
41359: PPUSH
41360: LD_VAR 0 6
41364: PPUSH
41365: CALL 40641 0 2
41369: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41370: LD_VAR 0 1
41374: PPUSH
41375: LD_VAR 0 5
41379: PUSH
41380: LD_INT 1
41382: ARRAY
41383: PPUSH
41384: LD_VAR 0 5
41388: PUSH
41389: LD_INT 2
41391: ARRAY
41392: PPUSH
41393: CALL_OW 111
// end ;
41397: LD_VAR 0 3
41401: RET
// export function PrepareApemanSoldier ( ) ; begin
41402: LD_INT 0
41404: PPUSH
// uc_nation := 0 ;
41405: LD_ADDR_OWVAR 21
41409: PUSH
41410: LD_INT 0
41412: ST_TO_ADDR
// hc_sex := sex_male ;
41413: LD_ADDR_OWVAR 27
41417: PUSH
41418: LD_INT 1
41420: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
41421: LD_ADDR_OWVAR 28
41425: PUSH
41426: LD_INT 15
41428: ST_TO_ADDR
// hc_gallery :=  ;
41429: LD_ADDR_OWVAR 33
41433: PUSH
41434: LD_STRING 
41436: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41437: LD_ADDR_OWVAR 31
41441: PUSH
41442: LD_INT 0
41444: PPUSH
41445: LD_INT 3
41447: PPUSH
41448: CALL_OW 12
41452: PUSH
41453: LD_INT 0
41455: PPUSH
41456: LD_INT 3
41458: PPUSH
41459: CALL_OW 12
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: ST_TO_ADDR
// end ;
41476: LD_VAR 0 1
41480: RET
// export function PrepareApemanEngineer ( ) ; begin
41481: LD_INT 0
41483: PPUSH
// uc_nation := 0 ;
41484: LD_ADDR_OWVAR 21
41488: PUSH
41489: LD_INT 0
41491: ST_TO_ADDR
// hc_sex := sex_male ;
41492: LD_ADDR_OWVAR 27
41496: PUSH
41497: LD_INT 1
41499: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
41500: LD_ADDR_OWVAR 28
41504: PUSH
41505: LD_INT 16
41507: ST_TO_ADDR
// hc_gallery :=  ;
41508: LD_ADDR_OWVAR 33
41512: PUSH
41513: LD_STRING 
41515: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41516: LD_ADDR_OWVAR 31
41520: PUSH
41521: LD_INT 0
41523: PPUSH
41524: LD_INT 3
41526: PPUSH
41527: CALL_OW 12
41531: PUSH
41532: LD_INT 0
41534: PPUSH
41535: LD_INT 3
41537: PPUSH
41538: CALL_OW 12
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: ST_TO_ADDR
// end ;
41555: LD_VAR 0 1
41559: RET
// export function PrepareApeman ( agressivity ) ; begin
41560: LD_INT 0
41562: PPUSH
// uc_side := 0 ;
41563: LD_ADDR_OWVAR 20
41567: PUSH
41568: LD_INT 0
41570: ST_TO_ADDR
// uc_nation := 0 ;
41571: LD_ADDR_OWVAR 21
41575: PUSH
41576: LD_INT 0
41578: ST_TO_ADDR
// hc_sex := sex_male ;
41579: LD_ADDR_OWVAR 27
41583: PUSH
41584: LD_INT 1
41586: ST_TO_ADDR
// hc_class := class_apeman ;
41587: LD_ADDR_OWVAR 28
41591: PUSH
41592: LD_INT 12
41594: ST_TO_ADDR
// hc_gallery :=  ;
41595: LD_ADDR_OWVAR 33
41599: PUSH
41600: LD_STRING 
41602: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
41603: LD_ADDR_OWVAR 35
41607: PUSH
41608: LD_VAR 0 1
41612: NEG
41613: PPUSH
41614: LD_VAR 0 1
41618: PPUSH
41619: CALL_OW 12
41623: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
41624: LD_ADDR_OWVAR 31
41628: PUSH
41629: LD_INT 0
41631: PPUSH
41632: LD_INT 3
41634: PPUSH
41635: CALL_OW 12
41639: PUSH
41640: LD_INT 0
41642: PPUSH
41643: LD_INT 3
41645: PPUSH
41646: CALL_OW 12
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: ST_TO_ADDR
// end ;
41663: LD_VAR 0 2
41667: RET
// export function PrepareTiger ( agressivity ) ; begin
41668: LD_INT 0
41670: PPUSH
// uc_side := 0 ;
41671: LD_ADDR_OWVAR 20
41675: PUSH
41676: LD_INT 0
41678: ST_TO_ADDR
// uc_nation := 0 ;
41679: LD_ADDR_OWVAR 21
41683: PUSH
41684: LD_INT 0
41686: ST_TO_ADDR
// hc_class := class_tiger ;
41687: LD_ADDR_OWVAR 28
41691: PUSH
41692: LD_INT 14
41694: ST_TO_ADDR
// hc_gallery :=  ;
41695: LD_ADDR_OWVAR 33
41699: PUSH
41700: LD_STRING 
41702: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
41703: LD_ADDR_OWVAR 35
41707: PUSH
41708: LD_VAR 0 1
41712: NEG
41713: PPUSH
41714: LD_VAR 0 1
41718: PPUSH
41719: CALL_OW 12
41723: ST_TO_ADDR
// end ;
41724: LD_VAR 0 2
41728: RET
// export function PrepareEnchidna ( ) ; begin
41729: LD_INT 0
41731: PPUSH
// uc_side := 0 ;
41732: LD_ADDR_OWVAR 20
41736: PUSH
41737: LD_INT 0
41739: ST_TO_ADDR
// uc_nation := 0 ;
41740: LD_ADDR_OWVAR 21
41744: PUSH
41745: LD_INT 0
41747: ST_TO_ADDR
// hc_class := class_baggie ;
41748: LD_ADDR_OWVAR 28
41752: PUSH
41753: LD_INT 13
41755: ST_TO_ADDR
// hc_gallery :=  ;
41756: LD_ADDR_OWVAR 33
41760: PUSH
41761: LD_STRING 
41763: ST_TO_ADDR
// end ;
41764: LD_VAR 0 1
41768: RET
// export function PrepareFrog ( ) ; begin
41769: LD_INT 0
41771: PPUSH
// uc_side := 0 ;
41772: LD_ADDR_OWVAR 20
41776: PUSH
41777: LD_INT 0
41779: ST_TO_ADDR
// uc_nation := 0 ;
41780: LD_ADDR_OWVAR 21
41784: PUSH
41785: LD_INT 0
41787: ST_TO_ADDR
// hc_class := class_frog ;
41788: LD_ADDR_OWVAR 28
41792: PUSH
41793: LD_INT 19
41795: ST_TO_ADDR
// hc_gallery :=  ;
41796: LD_ADDR_OWVAR 33
41800: PUSH
41801: LD_STRING 
41803: ST_TO_ADDR
// end ;
41804: LD_VAR 0 1
41808: RET
// export function PrepareFish ( ) ; begin
41809: LD_INT 0
41811: PPUSH
// uc_side := 0 ;
41812: LD_ADDR_OWVAR 20
41816: PUSH
41817: LD_INT 0
41819: ST_TO_ADDR
// uc_nation := 0 ;
41820: LD_ADDR_OWVAR 21
41824: PUSH
41825: LD_INT 0
41827: ST_TO_ADDR
// hc_class := class_fish ;
41828: LD_ADDR_OWVAR 28
41832: PUSH
41833: LD_INT 20
41835: ST_TO_ADDR
// hc_gallery :=  ;
41836: LD_ADDR_OWVAR 33
41840: PUSH
41841: LD_STRING 
41843: ST_TO_ADDR
// end ;
41844: LD_VAR 0 1
41848: RET
// export function PrepareBird ( ) ; begin
41849: LD_INT 0
41851: PPUSH
// uc_side := 0 ;
41852: LD_ADDR_OWVAR 20
41856: PUSH
41857: LD_INT 0
41859: ST_TO_ADDR
// uc_nation := 0 ;
41860: LD_ADDR_OWVAR 21
41864: PUSH
41865: LD_INT 0
41867: ST_TO_ADDR
// hc_class := class_phororhacos ;
41868: LD_ADDR_OWVAR 28
41872: PUSH
41873: LD_INT 18
41875: ST_TO_ADDR
// hc_gallery :=  ;
41876: LD_ADDR_OWVAR 33
41880: PUSH
41881: LD_STRING 
41883: ST_TO_ADDR
// end ;
41884: LD_VAR 0 1
41888: RET
// export function PrepareHorse ( ) ; begin
41889: LD_INT 0
41891: PPUSH
// uc_side := 0 ;
41892: LD_ADDR_OWVAR 20
41896: PUSH
41897: LD_INT 0
41899: ST_TO_ADDR
// uc_nation := 0 ;
41900: LD_ADDR_OWVAR 21
41904: PUSH
41905: LD_INT 0
41907: ST_TO_ADDR
// hc_class := class_horse ;
41908: LD_ADDR_OWVAR 28
41912: PUSH
41913: LD_INT 21
41915: ST_TO_ADDR
// hc_gallery :=  ;
41916: LD_ADDR_OWVAR 33
41920: PUSH
41921: LD_STRING 
41923: ST_TO_ADDR
// end ;
41924: LD_VAR 0 1
41928: RET
// export function PrepareMastodont ( ) ; begin
41929: LD_INT 0
41931: PPUSH
// uc_side := 0 ;
41932: LD_ADDR_OWVAR 20
41936: PUSH
41937: LD_INT 0
41939: ST_TO_ADDR
// uc_nation := 0 ;
41940: LD_ADDR_OWVAR 21
41944: PUSH
41945: LD_INT 0
41947: ST_TO_ADDR
// vc_chassis := class_mastodont ;
41948: LD_ADDR_OWVAR 37
41952: PUSH
41953: LD_INT 31
41955: ST_TO_ADDR
// vc_control := control_rider ;
41956: LD_ADDR_OWVAR 38
41960: PUSH
41961: LD_INT 4
41963: ST_TO_ADDR
// end ;
41964: LD_VAR 0 1
41968: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41969: LD_INT 0
41971: PPUSH
41972: PPUSH
41973: PPUSH
// uc_side = 0 ;
41974: LD_ADDR_OWVAR 20
41978: PUSH
41979: LD_INT 0
41981: ST_TO_ADDR
// uc_nation = 0 ;
41982: LD_ADDR_OWVAR 21
41986: PUSH
41987: LD_INT 0
41989: ST_TO_ADDR
// InitHc_All ( ) ;
41990: CALL_OW 584
// InitVc ;
41994: CALL_OW 20
// if mastodonts then
41998: LD_VAR 0 6
42002: IFFALSE 42069
// for i = 1 to mastodonts do
42004: LD_ADDR_VAR 0 11
42008: PUSH
42009: DOUBLE
42010: LD_INT 1
42012: DEC
42013: ST_TO_ADDR
42014: LD_VAR 0 6
42018: PUSH
42019: FOR_TO
42020: IFFALSE 42067
// begin vc_chassis := 31 ;
42022: LD_ADDR_OWVAR 37
42026: PUSH
42027: LD_INT 31
42029: ST_TO_ADDR
// vc_control := control_rider ;
42030: LD_ADDR_OWVAR 38
42034: PUSH
42035: LD_INT 4
42037: ST_TO_ADDR
// animal := CreateVehicle ;
42038: LD_ADDR_VAR 0 12
42042: PUSH
42043: CALL_OW 45
42047: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42048: LD_VAR 0 12
42052: PPUSH
42053: LD_VAR 0 8
42057: PPUSH
42058: LD_INT 0
42060: PPUSH
42061: CALL 44197 0 3
// end ;
42065: GO 42019
42067: POP
42068: POP
// if horses then
42069: LD_VAR 0 5
42073: IFFALSE 42140
// for i = 1 to horses do
42075: LD_ADDR_VAR 0 11
42079: PUSH
42080: DOUBLE
42081: LD_INT 1
42083: DEC
42084: ST_TO_ADDR
42085: LD_VAR 0 5
42089: PUSH
42090: FOR_TO
42091: IFFALSE 42138
// begin hc_class := 21 ;
42093: LD_ADDR_OWVAR 28
42097: PUSH
42098: LD_INT 21
42100: ST_TO_ADDR
// hc_gallery :=  ;
42101: LD_ADDR_OWVAR 33
42105: PUSH
42106: LD_STRING 
42108: ST_TO_ADDR
// animal := CreateHuman ;
42109: LD_ADDR_VAR 0 12
42113: PUSH
42114: CALL_OW 44
42118: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42119: LD_VAR 0 12
42123: PPUSH
42124: LD_VAR 0 8
42128: PPUSH
42129: LD_INT 0
42131: PPUSH
42132: CALL 44197 0 3
// end ;
42136: GO 42090
42138: POP
42139: POP
// if birds then
42140: LD_VAR 0 1
42144: IFFALSE 42211
// for i = 1 to birds do
42146: LD_ADDR_VAR 0 11
42150: PUSH
42151: DOUBLE
42152: LD_INT 1
42154: DEC
42155: ST_TO_ADDR
42156: LD_VAR 0 1
42160: PUSH
42161: FOR_TO
42162: IFFALSE 42209
// begin hc_class := 18 ;
42164: LD_ADDR_OWVAR 28
42168: PUSH
42169: LD_INT 18
42171: ST_TO_ADDR
// hc_gallery =  ;
42172: LD_ADDR_OWVAR 33
42176: PUSH
42177: LD_STRING 
42179: ST_TO_ADDR
// animal := CreateHuman ;
42180: LD_ADDR_VAR 0 12
42184: PUSH
42185: CALL_OW 44
42189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42190: LD_VAR 0 12
42194: PPUSH
42195: LD_VAR 0 8
42199: PPUSH
42200: LD_INT 0
42202: PPUSH
42203: CALL 44197 0 3
// end ;
42207: GO 42161
42209: POP
42210: POP
// if tigers then
42211: LD_VAR 0 2
42215: IFFALSE 42299
// for i = 1 to tigers do
42217: LD_ADDR_VAR 0 11
42221: PUSH
42222: DOUBLE
42223: LD_INT 1
42225: DEC
42226: ST_TO_ADDR
42227: LD_VAR 0 2
42231: PUSH
42232: FOR_TO
42233: IFFALSE 42297
// begin hc_class = class_tiger ;
42235: LD_ADDR_OWVAR 28
42239: PUSH
42240: LD_INT 14
42242: ST_TO_ADDR
// hc_gallery =  ;
42243: LD_ADDR_OWVAR 33
42247: PUSH
42248: LD_STRING 
42250: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42251: LD_ADDR_OWVAR 35
42255: PUSH
42256: LD_INT 7
42258: NEG
42259: PPUSH
42260: LD_INT 7
42262: PPUSH
42263: CALL_OW 12
42267: ST_TO_ADDR
// animal := CreateHuman ;
42268: LD_ADDR_VAR 0 12
42272: PUSH
42273: CALL_OW 44
42277: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42278: LD_VAR 0 12
42282: PPUSH
42283: LD_VAR 0 8
42287: PPUSH
42288: LD_INT 0
42290: PPUSH
42291: CALL 44197 0 3
// end ;
42295: GO 42232
42297: POP
42298: POP
// if apemans then
42299: LD_VAR 0 3
42303: IFFALSE 42426
// for i = 1 to apemans do
42305: LD_ADDR_VAR 0 11
42309: PUSH
42310: DOUBLE
42311: LD_INT 1
42313: DEC
42314: ST_TO_ADDR
42315: LD_VAR 0 3
42319: PUSH
42320: FOR_TO
42321: IFFALSE 42424
// begin hc_class = class_apeman ;
42323: LD_ADDR_OWVAR 28
42327: PUSH
42328: LD_INT 12
42330: ST_TO_ADDR
// hc_gallery =  ;
42331: LD_ADDR_OWVAR 33
42335: PUSH
42336: LD_STRING 
42338: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
42339: LD_ADDR_OWVAR 35
42343: PUSH
42344: LD_INT 2
42346: NEG
42347: PPUSH
42348: LD_INT 2
42350: PPUSH
42351: CALL_OW 12
42355: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
42356: LD_ADDR_OWVAR 31
42360: PUSH
42361: LD_INT 1
42363: PPUSH
42364: LD_INT 3
42366: PPUSH
42367: CALL_OW 12
42371: PUSH
42372: LD_INT 1
42374: PPUSH
42375: LD_INT 3
42377: PPUSH
42378: CALL_OW 12
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: ST_TO_ADDR
// animal := CreateHuman ;
42395: LD_ADDR_VAR 0 12
42399: PUSH
42400: CALL_OW 44
42404: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42405: LD_VAR 0 12
42409: PPUSH
42410: LD_VAR 0 8
42414: PPUSH
42415: LD_INT 0
42417: PPUSH
42418: CALL 44197 0 3
// end ;
42422: GO 42320
42424: POP
42425: POP
// if enchidnas then
42426: LD_VAR 0 4
42430: IFFALSE 42497
// for i = 1 to enchidnas do
42432: LD_ADDR_VAR 0 11
42436: PUSH
42437: DOUBLE
42438: LD_INT 1
42440: DEC
42441: ST_TO_ADDR
42442: LD_VAR 0 4
42446: PUSH
42447: FOR_TO
42448: IFFALSE 42495
// begin hc_class = 13 ;
42450: LD_ADDR_OWVAR 28
42454: PUSH
42455: LD_INT 13
42457: ST_TO_ADDR
// hc_gallery =  ;
42458: LD_ADDR_OWVAR 33
42462: PUSH
42463: LD_STRING 
42465: ST_TO_ADDR
// animal := CreateHuman ;
42466: LD_ADDR_VAR 0 12
42470: PUSH
42471: CALL_OW 44
42475: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42476: LD_VAR 0 12
42480: PPUSH
42481: LD_VAR 0 8
42485: PPUSH
42486: LD_INT 0
42488: PPUSH
42489: CALL 44197 0 3
// end ;
42493: GO 42447
42495: POP
42496: POP
// if fishes then
42497: LD_VAR 0 7
42501: IFFALSE 42568
// for i = 1 to fishes do
42503: LD_ADDR_VAR 0 11
42507: PUSH
42508: DOUBLE
42509: LD_INT 1
42511: DEC
42512: ST_TO_ADDR
42513: LD_VAR 0 7
42517: PUSH
42518: FOR_TO
42519: IFFALSE 42566
// begin hc_class = 20 ;
42521: LD_ADDR_OWVAR 28
42525: PUSH
42526: LD_INT 20
42528: ST_TO_ADDR
// hc_gallery =  ;
42529: LD_ADDR_OWVAR 33
42533: PUSH
42534: LD_STRING 
42536: ST_TO_ADDR
// animal := CreateHuman ;
42537: LD_ADDR_VAR 0 12
42541: PUSH
42542: CALL_OW 44
42546: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
42547: LD_VAR 0 12
42551: PPUSH
42552: LD_VAR 0 9
42556: PPUSH
42557: LD_INT 0
42559: PPUSH
42560: CALL 44197 0 3
// end ;
42564: GO 42518
42566: POP
42567: POP
// end ;
42568: LD_VAR 0 10
42572: RET
// export function WantHeal ( sci , unit ) ; begin
42573: LD_INT 0
42575: PPUSH
// if GetTaskList ( sci ) > 0 then
42576: LD_VAR 0 1
42580: PPUSH
42581: CALL_OW 437
42585: PUSH
42586: LD_INT 0
42588: GREATER
42589: IFFALSE 42659
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
42591: LD_VAR 0 1
42595: PPUSH
42596: CALL_OW 437
42600: PUSH
42601: LD_INT 1
42603: ARRAY
42604: PUSH
42605: LD_INT 1
42607: ARRAY
42608: PUSH
42609: LD_STRING l
42611: EQUAL
42612: PUSH
42613: LD_VAR 0 1
42617: PPUSH
42618: CALL_OW 437
42622: PUSH
42623: LD_INT 1
42625: ARRAY
42626: PUSH
42627: LD_INT 4
42629: ARRAY
42630: PUSH
42631: LD_VAR 0 2
42635: EQUAL
42636: AND
42637: IFFALSE 42649
// result := true else
42639: LD_ADDR_VAR 0 3
42643: PUSH
42644: LD_INT 1
42646: ST_TO_ADDR
42647: GO 42657
// result := false ;
42649: LD_ADDR_VAR 0 3
42653: PUSH
42654: LD_INT 0
42656: ST_TO_ADDR
// end else
42657: GO 42667
// result := false ;
42659: LD_ADDR_VAR 0 3
42663: PUSH
42664: LD_INT 0
42666: ST_TO_ADDR
// end ;
42667: LD_VAR 0 3
42671: RET
// export function HealTarget ( sci ) ; begin
42672: LD_INT 0
42674: PPUSH
// if not sci then
42675: LD_VAR 0 1
42679: NOT
42680: IFFALSE 42684
// exit ;
42682: GO 42749
// result := 0 ;
42684: LD_ADDR_VAR 0 2
42688: PUSH
42689: LD_INT 0
42691: ST_TO_ADDR
// if GetTaskList ( sci ) then
42692: LD_VAR 0 1
42696: PPUSH
42697: CALL_OW 437
42701: IFFALSE 42749
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42703: LD_VAR 0 1
42707: PPUSH
42708: CALL_OW 437
42712: PUSH
42713: LD_INT 1
42715: ARRAY
42716: PUSH
42717: LD_INT 1
42719: ARRAY
42720: PUSH
42721: LD_STRING l
42723: EQUAL
42724: IFFALSE 42749
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42726: LD_ADDR_VAR 0 2
42730: PUSH
42731: LD_VAR 0 1
42735: PPUSH
42736: CALL_OW 437
42740: PUSH
42741: LD_INT 1
42743: ARRAY
42744: PUSH
42745: LD_INT 4
42747: ARRAY
42748: ST_TO_ADDR
// end ;
42749: LD_VAR 0 2
42753: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42754: LD_INT 0
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
// if not base_units then
42760: LD_VAR 0 1
42764: NOT
42765: IFFALSE 42769
// exit ;
42767: GO 42856
// result := false ;
42769: LD_ADDR_VAR 0 2
42773: PUSH
42774: LD_INT 0
42776: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42777: LD_ADDR_VAR 0 5
42781: PUSH
42782: LD_VAR 0 1
42786: PPUSH
42787: LD_INT 21
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PPUSH
42797: CALL_OW 72
42801: ST_TO_ADDR
// if not tmp then
42802: LD_VAR 0 5
42806: NOT
42807: IFFALSE 42811
// exit ;
42809: GO 42856
// for i in tmp do
42811: LD_ADDR_VAR 0 3
42815: PUSH
42816: LD_VAR 0 5
42820: PUSH
42821: FOR_IN
42822: IFFALSE 42854
// begin result := EnemyInRange ( i , 22 ) ;
42824: LD_ADDR_VAR 0 2
42828: PUSH
42829: LD_VAR 0 3
42833: PPUSH
42834: LD_INT 22
42836: PPUSH
42837: CALL 40443 0 2
42841: ST_TO_ADDR
// if result then
42842: LD_VAR 0 2
42846: IFFALSE 42852
// exit ;
42848: POP
42849: POP
42850: GO 42856
// end ;
42852: GO 42821
42854: POP
42855: POP
// end ;
42856: LD_VAR 0 2
42860: RET
// export function FilterByTag ( units , tag ) ; begin
42861: LD_INT 0
42863: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
42864: LD_ADDR_VAR 0 3
42868: PUSH
42869: LD_VAR 0 1
42873: PPUSH
42874: LD_INT 120
42876: PUSH
42877: LD_VAR 0 2
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PPUSH
42886: CALL_OW 72
42890: ST_TO_ADDR
// end ;
42891: LD_VAR 0 3
42895: RET
// export function IsDriver ( un ) ; begin
42896: LD_INT 0
42898: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42899: LD_ADDR_VAR 0 2
42903: PUSH
42904: LD_VAR 0 1
42908: PUSH
42909: LD_INT 55
42911: PUSH
42912: EMPTY
42913: LIST
42914: PPUSH
42915: CALL_OW 69
42919: IN
42920: ST_TO_ADDR
// end ;
42921: LD_VAR 0 2
42925: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42926: LD_INT 0
42928: PPUSH
42929: PPUSH
// list := [ ] ;
42930: LD_ADDR_VAR 0 5
42934: PUSH
42935: EMPTY
42936: ST_TO_ADDR
// case d of 0 :
42937: LD_VAR 0 3
42941: PUSH
42942: LD_INT 0
42944: DOUBLE
42945: EQUAL
42946: IFTRUE 42950
42948: GO 43083
42950: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42951: LD_ADDR_VAR 0 5
42955: PUSH
42956: LD_VAR 0 1
42960: PUSH
42961: LD_INT 4
42963: MINUS
42964: PUSH
42965: LD_VAR 0 2
42969: PUSH
42970: LD_INT 4
42972: MINUS
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: LIST
42981: PUSH
42982: LD_VAR 0 1
42986: PUSH
42987: LD_INT 3
42989: MINUS
42990: PUSH
42991: LD_VAR 0 2
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: PUSH
43004: LD_VAR 0 1
43008: PUSH
43009: LD_INT 4
43011: PLUS
43012: PUSH
43013: LD_VAR 0 2
43017: PUSH
43018: LD_INT 4
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: PUSH
43026: LD_VAR 0 1
43030: PUSH
43031: LD_INT 3
43033: PLUS
43034: PUSH
43035: LD_VAR 0 2
43039: PUSH
43040: LD_INT 3
43042: PLUS
43043: PUSH
43044: LD_INT 5
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: PUSH
43052: LD_VAR 0 1
43056: PUSH
43057: LD_VAR 0 2
43061: PUSH
43062: LD_INT 4
43064: PLUS
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: ST_TO_ADDR
// end ; 1 :
43081: GO 43781
43083: LD_INT 1
43085: DOUBLE
43086: EQUAL
43087: IFTRUE 43091
43089: GO 43224
43091: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
43092: LD_ADDR_VAR 0 5
43096: PUSH
43097: LD_VAR 0 1
43101: PUSH
43102: LD_VAR 0 2
43106: PUSH
43107: LD_INT 4
43109: MINUS
43110: PUSH
43111: LD_INT 3
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: LIST
43118: PUSH
43119: LD_VAR 0 1
43123: PUSH
43124: LD_INT 3
43126: MINUS
43127: PUSH
43128: LD_VAR 0 2
43132: PUSH
43133: LD_INT 3
43135: MINUS
43136: PUSH
43137: LD_INT 2
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: LIST
43144: PUSH
43145: LD_VAR 0 1
43149: PUSH
43150: LD_INT 4
43152: MINUS
43153: PUSH
43154: LD_VAR 0 2
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: PUSH
43167: LD_VAR 0 1
43171: PUSH
43172: LD_VAR 0 2
43176: PUSH
43177: LD_INT 3
43179: PLUS
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: LIST
43188: PUSH
43189: LD_VAR 0 1
43193: PUSH
43194: LD_INT 4
43196: PLUS
43197: PUSH
43198: LD_VAR 0 2
43202: PUSH
43203: LD_INT 4
43205: PLUS
43206: PUSH
43207: LD_INT 5
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: LIST
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: ST_TO_ADDR
// end ; 2 :
43222: GO 43781
43224: LD_INT 2
43226: DOUBLE
43227: EQUAL
43228: IFTRUE 43232
43230: GO 43361
43232: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43233: LD_ADDR_VAR 0 5
43237: PUSH
43238: LD_VAR 0 1
43242: PUSH
43243: LD_VAR 0 2
43247: PUSH
43248: LD_INT 3
43250: MINUS
43251: PUSH
43252: LD_INT 3
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: LIST
43259: PUSH
43260: LD_VAR 0 1
43264: PUSH
43265: LD_INT 4
43267: PLUS
43268: PUSH
43269: LD_VAR 0 2
43273: PUSH
43274: LD_INT 4
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: PUSH
43282: LD_VAR 0 1
43286: PUSH
43287: LD_VAR 0 2
43291: PUSH
43292: LD_INT 4
43294: PLUS
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: PUSH
43304: LD_VAR 0 1
43308: PUSH
43309: LD_INT 3
43311: MINUS
43312: PUSH
43313: LD_VAR 0 2
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: LIST
43325: PUSH
43326: LD_VAR 0 1
43330: PUSH
43331: LD_INT 4
43333: MINUS
43334: PUSH
43335: LD_VAR 0 2
43339: PUSH
43340: LD_INT 4
43342: MINUS
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: LIST
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: ST_TO_ADDR
// end ; 3 :
43359: GO 43781
43361: LD_INT 3
43363: DOUBLE
43364: EQUAL
43365: IFTRUE 43369
43367: GO 43502
43369: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
43370: LD_ADDR_VAR 0 5
43374: PUSH
43375: LD_VAR 0 1
43379: PUSH
43380: LD_INT 3
43382: PLUS
43383: PUSH
43384: LD_VAR 0 2
43388: PUSH
43389: LD_INT 4
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: LIST
43396: PUSH
43397: LD_VAR 0 1
43401: PUSH
43402: LD_INT 4
43404: PLUS
43405: PUSH
43406: LD_VAR 0 2
43410: PUSH
43411: LD_INT 4
43413: PLUS
43414: PUSH
43415: LD_INT 5
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: PUSH
43423: LD_VAR 0 1
43427: PUSH
43428: LD_INT 4
43430: MINUS
43431: PUSH
43432: LD_VAR 0 2
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: PUSH
43445: LD_VAR 0 1
43449: PUSH
43450: LD_VAR 0 2
43454: PUSH
43455: LD_INT 4
43457: MINUS
43458: PUSH
43459: LD_INT 3
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: LIST
43466: PUSH
43467: LD_VAR 0 1
43471: PUSH
43472: LD_INT 3
43474: MINUS
43475: PUSH
43476: LD_VAR 0 2
43480: PUSH
43481: LD_INT 3
43483: MINUS
43484: PUSH
43485: LD_INT 2
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: ST_TO_ADDR
// end ; 4 :
43500: GO 43781
43502: LD_INT 4
43504: DOUBLE
43505: EQUAL
43506: IFTRUE 43510
43508: GO 43643
43510: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
43511: LD_ADDR_VAR 0 5
43515: PUSH
43516: LD_VAR 0 1
43520: PUSH
43521: LD_VAR 0 2
43525: PUSH
43526: LD_INT 4
43528: PLUS
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: LIST
43537: PUSH
43538: LD_VAR 0 1
43542: PUSH
43543: LD_INT 3
43545: PLUS
43546: PUSH
43547: LD_VAR 0 2
43551: PUSH
43552: LD_INT 3
43554: PLUS
43555: PUSH
43556: LD_INT 5
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: PUSH
43564: LD_VAR 0 1
43568: PUSH
43569: LD_INT 4
43571: PLUS
43572: PUSH
43573: LD_VAR 0 2
43577: PUSH
43578: LD_INT 4
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: PUSH
43586: LD_VAR 0 1
43590: PUSH
43591: LD_VAR 0 2
43595: PUSH
43596: LD_INT 3
43598: MINUS
43599: PUSH
43600: LD_INT 3
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: PUSH
43608: LD_VAR 0 1
43612: PUSH
43613: LD_INT 4
43615: MINUS
43616: PUSH
43617: LD_VAR 0 2
43621: PUSH
43622: LD_INT 4
43624: MINUS
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: LIST
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: ST_TO_ADDR
// end ; 5 :
43641: GO 43781
43643: LD_INT 5
43645: DOUBLE
43646: EQUAL
43647: IFTRUE 43651
43649: GO 43780
43651: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43652: LD_ADDR_VAR 0 5
43656: PUSH
43657: LD_VAR 0 1
43661: PUSH
43662: LD_INT 4
43664: MINUS
43665: PUSH
43666: LD_VAR 0 2
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: PUSH
43679: LD_VAR 0 1
43683: PUSH
43684: LD_VAR 0 2
43688: PUSH
43689: LD_INT 4
43691: MINUS
43692: PUSH
43693: LD_INT 3
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: PUSH
43701: LD_VAR 0 1
43705: PUSH
43706: LD_INT 4
43708: PLUS
43709: PUSH
43710: LD_VAR 0 2
43714: PUSH
43715: LD_INT 4
43717: PLUS
43718: PUSH
43719: LD_INT 5
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: PUSH
43727: LD_VAR 0 1
43731: PUSH
43732: LD_INT 3
43734: PLUS
43735: PUSH
43736: LD_VAR 0 2
43740: PUSH
43741: LD_INT 4
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: PUSH
43749: LD_VAR 0 1
43753: PUSH
43754: LD_VAR 0 2
43758: PUSH
43759: LD_INT 3
43761: PLUS
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: ST_TO_ADDR
// end ; end ;
43778: GO 43781
43780: POP
// result := list ;
43781: LD_ADDR_VAR 0 4
43785: PUSH
43786: LD_VAR 0 5
43790: ST_TO_ADDR
// end ;
43791: LD_VAR 0 4
43795: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43796: LD_INT 0
43798: PPUSH
43799: PPUSH
43800: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43801: LD_VAR 0 1
43805: NOT
43806: PUSH
43807: LD_VAR 0 2
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: LD_INT 4
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: IN
43830: NOT
43831: OR
43832: IFFALSE 43836
// exit ;
43834: GO 43919
// tmp := [ ] ;
43836: LD_ADDR_VAR 0 5
43840: PUSH
43841: EMPTY
43842: ST_TO_ADDR
// for i in units do
43843: LD_ADDR_VAR 0 4
43847: PUSH
43848: LD_VAR 0 1
43852: PUSH
43853: FOR_IN
43854: IFFALSE 43888
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
43856: LD_ADDR_VAR 0 5
43860: PUSH
43861: LD_VAR 0 5
43865: PPUSH
43866: LD_VAR 0 4
43870: PPUSH
43871: LD_VAR 0 2
43875: PPUSH
43876: CALL_OW 259
43880: PPUSH
43881: CALL 45279 0 2
43885: ST_TO_ADDR
43886: GO 43853
43888: POP
43889: POP
// if not tmp then
43890: LD_VAR 0 5
43894: NOT
43895: IFFALSE 43899
// exit ;
43897: GO 43919
// result := SortListByListDesc ( units , tmp ) ;
43899: LD_ADDR_VAR 0 3
43903: PUSH
43904: LD_VAR 0 1
43908: PPUSH
43909: LD_VAR 0 5
43913: PPUSH
43914: CALL_OW 77
43918: ST_TO_ADDR
// end ;
43919: LD_VAR 0 3
43923: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43924: LD_INT 0
43926: PPUSH
43927: PPUSH
43928: PPUSH
// result := false ;
43929: LD_ADDR_VAR 0 3
43933: PUSH
43934: LD_INT 0
43936: ST_TO_ADDR
// if not building then
43937: LD_VAR 0 2
43941: NOT
43942: IFFALSE 43946
// exit ;
43944: GO 44084
// x := GetX ( building ) ;
43946: LD_ADDR_VAR 0 4
43950: PUSH
43951: LD_VAR 0 2
43955: PPUSH
43956: CALL_OW 250
43960: ST_TO_ADDR
// y := GetY ( building ) ;
43961: LD_ADDR_VAR 0 5
43965: PUSH
43966: LD_VAR 0 2
43970: PPUSH
43971: CALL_OW 251
43975: ST_TO_ADDR
// if not x or not y then
43976: LD_VAR 0 4
43980: NOT
43981: PUSH
43982: LD_VAR 0 5
43986: NOT
43987: OR
43988: IFFALSE 43992
// exit ;
43990: GO 44084
// if GetTaskList ( unit ) then
43992: LD_VAR 0 1
43996: PPUSH
43997: CALL_OW 437
44001: IFFALSE 44084
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44003: LD_STRING e
44005: PUSH
44006: LD_VAR 0 1
44010: PPUSH
44011: CALL_OW 437
44015: PUSH
44016: LD_INT 1
44018: ARRAY
44019: PUSH
44020: LD_INT 1
44022: ARRAY
44023: EQUAL
44024: PUSH
44025: LD_VAR 0 4
44029: PUSH
44030: LD_VAR 0 1
44034: PPUSH
44035: CALL_OW 437
44039: PUSH
44040: LD_INT 1
44042: ARRAY
44043: PUSH
44044: LD_INT 2
44046: ARRAY
44047: EQUAL
44048: AND
44049: PUSH
44050: LD_VAR 0 5
44054: PUSH
44055: LD_VAR 0 1
44059: PPUSH
44060: CALL_OW 437
44064: PUSH
44065: LD_INT 1
44067: ARRAY
44068: PUSH
44069: LD_INT 3
44071: ARRAY
44072: EQUAL
44073: AND
44074: IFFALSE 44084
// result := true end ;
44076: LD_ADDR_VAR 0 3
44080: PUSH
44081: LD_INT 1
44083: ST_TO_ADDR
// end ;
44084: LD_VAR 0 3
44088: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
44089: LD_INT 0
44091: PPUSH
// result := false ;
44092: LD_ADDR_VAR 0 4
44096: PUSH
44097: LD_INT 0
44099: ST_TO_ADDR
// if GetTaskList ( unit ) then
44100: LD_VAR 0 1
44104: PPUSH
44105: CALL_OW 437
44109: IFFALSE 44192
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44111: LD_STRING M
44113: PUSH
44114: LD_VAR 0 1
44118: PPUSH
44119: CALL_OW 437
44123: PUSH
44124: LD_INT 1
44126: ARRAY
44127: PUSH
44128: LD_INT 1
44130: ARRAY
44131: EQUAL
44132: PUSH
44133: LD_VAR 0 2
44137: PUSH
44138: LD_VAR 0 1
44142: PPUSH
44143: CALL_OW 437
44147: PUSH
44148: LD_INT 1
44150: ARRAY
44151: PUSH
44152: LD_INT 2
44154: ARRAY
44155: EQUAL
44156: AND
44157: PUSH
44158: LD_VAR 0 3
44162: PUSH
44163: LD_VAR 0 1
44167: PPUSH
44168: CALL_OW 437
44172: PUSH
44173: LD_INT 1
44175: ARRAY
44176: PUSH
44177: LD_INT 3
44179: ARRAY
44180: EQUAL
44181: AND
44182: IFFALSE 44192
// result := true ;
44184: LD_ADDR_VAR 0 4
44188: PUSH
44189: LD_INT 1
44191: ST_TO_ADDR
// end ; end ;
44192: LD_VAR 0 4
44196: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
44197: LD_INT 0
44199: PPUSH
44200: PPUSH
44201: PPUSH
44202: PPUSH
// if not unit or not area then
44203: LD_VAR 0 1
44207: NOT
44208: PUSH
44209: LD_VAR 0 2
44213: NOT
44214: OR
44215: IFFALSE 44219
// exit ;
44217: GO 44382
// tmp := AreaToList ( area , i ) ;
44219: LD_ADDR_VAR 0 6
44223: PUSH
44224: LD_VAR 0 2
44228: PPUSH
44229: LD_VAR 0 5
44233: PPUSH
44234: CALL_OW 517
44238: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44239: LD_ADDR_VAR 0 5
44243: PUSH
44244: DOUBLE
44245: LD_INT 1
44247: DEC
44248: ST_TO_ADDR
44249: LD_VAR 0 6
44253: PUSH
44254: LD_INT 1
44256: ARRAY
44257: PUSH
44258: FOR_TO
44259: IFFALSE 44380
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44261: LD_ADDR_VAR 0 7
44265: PUSH
44266: LD_VAR 0 6
44270: PUSH
44271: LD_INT 1
44273: ARRAY
44274: PUSH
44275: LD_VAR 0 5
44279: ARRAY
44280: PUSH
44281: LD_VAR 0 6
44285: PUSH
44286: LD_INT 2
44288: ARRAY
44289: PUSH
44290: LD_VAR 0 5
44294: ARRAY
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
44300: LD_INT 92
44302: PUSH
44303: LD_VAR 0 7
44307: PUSH
44308: LD_INT 1
44310: ARRAY
44311: PUSH
44312: LD_VAR 0 7
44316: PUSH
44317: LD_INT 2
44319: ARRAY
44320: PUSH
44321: LD_INT 3
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: PPUSH
44330: CALL_OW 69
44334: PUSH
44335: LD_INT 0
44337: EQUAL
44338: IFFALSE 44378
// begin PlaceUnitArea ( unit , area , mode ) ;
44340: LD_VAR 0 1
44344: PPUSH
44345: LD_VAR 0 2
44349: PPUSH
44350: LD_VAR 0 3
44354: PPUSH
44355: CALL_OW 49
// result := IsPlaced ( unit ) ;
44359: LD_ADDR_VAR 0 4
44363: PUSH
44364: LD_VAR 0 1
44368: PPUSH
44369: CALL_OW 305
44373: ST_TO_ADDR
// exit ;
44374: POP
44375: POP
44376: GO 44382
// end ; end ;
44378: GO 44258
44380: POP
44381: POP
// end ;
44382: LD_VAR 0 4
44386: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
44387: LD_INT 0
44389: PPUSH
44390: PPUSH
44391: PPUSH
// if not side or side > 8 then
44392: LD_VAR 0 1
44396: NOT
44397: PUSH
44398: LD_VAR 0 1
44402: PUSH
44403: LD_INT 8
44405: GREATER
44406: OR
44407: IFFALSE 44411
// exit ;
44409: GO 44598
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
44411: LD_ADDR_VAR 0 4
44415: PUSH
44416: LD_INT 22
44418: PUSH
44419: LD_VAR 0 1
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 21
44430: PUSH
44431: LD_INT 3
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PPUSH
44442: CALL_OW 69
44446: ST_TO_ADDR
// if not tmp then
44447: LD_VAR 0 4
44451: NOT
44452: IFFALSE 44456
// exit ;
44454: GO 44598
// enable_addtolog := true ;
44456: LD_ADDR_OWVAR 81
44460: PUSH
44461: LD_INT 1
44463: ST_TO_ADDR
// AddToLog ( [ ) ;
44464: LD_STRING [
44466: PPUSH
44467: CALL_OW 561
// for i in tmp do
44471: LD_ADDR_VAR 0 3
44475: PUSH
44476: LD_VAR 0 4
44480: PUSH
44481: FOR_IN
44482: IFFALSE 44589
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
44484: LD_STRING [
44486: PUSH
44487: LD_VAR 0 3
44491: PPUSH
44492: CALL_OW 266
44496: STR
44497: PUSH
44498: LD_STRING , 
44500: STR
44501: PUSH
44502: LD_VAR 0 3
44506: PPUSH
44507: CALL_OW 250
44511: STR
44512: PUSH
44513: LD_STRING , 
44515: STR
44516: PUSH
44517: LD_VAR 0 3
44521: PPUSH
44522: CALL_OW 251
44526: STR
44527: PUSH
44528: LD_STRING , 
44530: STR
44531: PUSH
44532: LD_VAR 0 3
44536: PPUSH
44537: CALL_OW 254
44541: STR
44542: PUSH
44543: LD_STRING , 
44545: STR
44546: PUSH
44547: LD_VAR 0 3
44551: PPUSH
44552: LD_INT 1
44554: PPUSH
44555: CALL_OW 268
44559: STR
44560: PUSH
44561: LD_STRING , 
44563: STR
44564: PUSH
44565: LD_VAR 0 3
44569: PPUSH
44570: LD_INT 2
44572: PPUSH
44573: CALL_OW 268
44577: STR
44578: PUSH
44579: LD_STRING ],
44581: STR
44582: PPUSH
44583: CALL_OW 561
// end ;
44587: GO 44481
44589: POP
44590: POP
// AddToLog ( ]; ) ;
44591: LD_STRING ];
44593: PPUSH
44594: CALL_OW 561
// end ;
44598: LD_VAR 0 2
44602: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
44603: LD_INT 0
44605: PPUSH
44606: PPUSH
44607: PPUSH
44608: PPUSH
44609: PPUSH
// if not area or not rate or not max then
44610: LD_VAR 0 1
44614: NOT
44615: PUSH
44616: LD_VAR 0 2
44620: NOT
44621: OR
44622: PUSH
44623: LD_VAR 0 4
44627: NOT
44628: OR
44629: IFFALSE 44633
// exit ;
44631: GO 44822
// while 1 do
44633: LD_INT 1
44635: IFFALSE 44822
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44637: LD_ADDR_VAR 0 9
44641: PUSH
44642: LD_VAR 0 1
44646: PPUSH
44647: LD_INT 1
44649: PPUSH
44650: CALL_OW 287
44654: PUSH
44655: LD_INT 10
44657: MUL
44658: ST_TO_ADDR
// r := rate / 10 ;
44659: LD_ADDR_VAR 0 7
44663: PUSH
44664: LD_VAR 0 2
44668: PUSH
44669: LD_INT 10
44671: DIVREAL
44672: ST_TO_ADDR
// time := 1 1$00 ;
44673: LD_ADDR_VAR 0 8
44677: PUSH
44678: LD_INT 2100
44680: ST_TO_ADDR
// if amount < min then
44681: LD_VAR 0 9
44685: PUSH
44686: LD_VAR 0 3
44690: LESS
44691: IFFALSE 44709
// r := r * 2 else
44693: LD_ADDR_VAR 0 7
44697: PUSH
44698: LD_VAR 0 7
44702: PUSH
44703: LD_INT 2
44705: MUL
44706: ST_TO_ADDR
44707: GO 44735
// if amount > max then
44709: LD_VAR 0 9
44713: PUSH
44714: LD_VAR 0 4
44718: GREATER
44719: IFFALSE 44735
// r := r / 2 ;
44721: LD_ADDR_VAR 0 7
44725: PUSH
44726: LD_VAR 0 7
44730: PUSH
44731: LD_INT 2
44733: DIVREAL
44734: ST_TO_ADDR
// time := time / r ;
44735: LD_ADDR_VAR 0 8
44739: PUSH
44740: LD_VAR 0 8
44744: PUSH
44745: LD_VAR 0 7
44749: DIVREAL
44750: ST_TO_ADDR
// if time < 0 then
44751: LD_VAR 0 8
44755: PUSH
44756: LD_INT 0
44758: LESS
44759: IFFALSE 44776
// time := time * - 1 ;
44761: LD_ADDR_VAR 0 8
44765: PUSH
44766: LD_VAR 0 8
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: MUL
44775: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
44776: LD_VAR 0 8
44780: PUSH
44781: LD_INT 35
44783: PPUSH
44784: LD_INT 875
44786: PPUSH
44787: CALL_OW 12
44791: PLUS
44792: PPUSH
44793: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44797: LD_INT 1
44799: PPUSH
44800: LD_INT 5
44802: PPUSH
44803: CALL_OW 12
44807: PPUSH
44808: LD_VAR 0 1
44812: PPUSH
44813: LD_INT 1
44815: PPUSH
44816: CALL_OW 55
// end ;
44820: GO 44633
// end ;
44822: LD_VAR 0 5
44826: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44827: LD_INT 0
44829: PPUSH
44830: PPUSH
44831: PPUSH
44832: PPUSH
44833: PPUSH
44834: PPUSH
44835: PPUSH
44836: PPUSH
// if not turrets or not factories then
44837: LD_VAR 0 1
44841: NOT
44842: PUSH
44843: LD_VAR 0 2
44847: NOT
44848: OR
44849: IFFALSE 44853
// exit ;
44851: GO 45160
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44853: LD_ADDR_VAR 0 10
44857: PUSH
44858: LD_INT 5
44860: PUSH
44861: LD_INT 6
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: LD_INT 4
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 3
44880: PUSH
44881: LD_INT 5
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 24
44895: PUSH
44896: LD_INT 25
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 23
44905: PUSH
44906: LD_INT 27
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 42
44919: PUSH
44920: LD_INT 43
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 44
44929: PUSH
44930: LD_INT 46
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 45
44939: PUSH
44940: LD_INT 47
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: LIST
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: ST_TO_ADDR
// result := [ ] ;
44957: LD_ADDR_VAR 0 3
44961: PUSH
44962: EMPTY
44963: ST_TO_ADDR
// for i in turrets do
44964: LD_ADDR_VAR 0 4
44968: PUSH
44969: LD_VAR 0 1
44973: PUSH
44974: FOR_IN
44975: IFFALSE 45158
// begin nat := GetNation ( i ) ;
44977: LD_ADDR_VAR 0 7
44981: PUSH
44982: LD_VAR 0 4
44986: PPUSH
44987: CALL_OW 248
44991: ST_TO_ADDR
// weapon := 0 ;
44992: LD_ADDR_VAR 0 8
44996: PUSH
44997: LD_INT 0
44999: ST_TO_ADDR
// if not nat then
45000: LD_VAR 0 7
45004: NOT
45005: IFFALSE 45009
// continue ;
45007: GO 44974
// for j in list [ nat ] do
45009: LD_ADDR_VAR 0 5
45013: PUSH
45014: LD_VAR 0 10
45018: PUSH
45019: LD_VAR 0 7
45023: ARRAY
45024: PUSH
45025: FOR_IN
45026: IFFALSE 45067
// if GetBWeapon ( i ) = j [ 1 ] then
45028: LD_VAR 0 4
45032: PPUSH
45033: CALL_OW 269
45037: PUSH
45038: LD_VAR 0 5
45042: PUSH
45043: LD_INT 1
45045: ARRAY
45046: EQUAL
45047: IFFALSE 45065
// begin weapon := j [ 2 ] ;
45049: LD_ADDR_VAR 0 8
45053: PUSH
45054: LD_VAR 0 5
45058: PUSH
45059: LD_INT 2
45061: ARRAY
45062: ST_TO_ADDR
// break ;
45063: GO 45067
// end ;
45065: GO 45025
45067: POP
45068: POP
// if not weapon then
45069: LD_VAR 0 8
45073: NOT
45074: IFFALSE 45078
// continue ;
45076: GO 44974
// for k in factories do
45078: LD_ADDR_VAR 0 6
45082: PUSH
45083: LD_VAR 0 2
45087: PUSH
45088: FOR_IN
45089: IFFALSE 45154
// begin weapons := AvailableWeaponList ( k ) ;
45091: LD_ADDR_VAR 0 9
45095: PUSH
45096: LD_VAR 0 6
45100: PPUSH
45101: CALL_OW 478
45105: ST_TO_ADDR
// if not weapons then
45106: LD_VAR 0 9
45110: NOT
45111: IFFALSE 45115
// continue ;
45113: GO 45088
// if weapon in weapons then
45115: LD_VAR 0 8
45119: PUSH
45120: LD_VAR 0 9
45124: IN
45125: IFFALSE 45152
// begin result := [ i , weapon ] ;
45127: LD_ADDR_VAR 0 3
45131: PUSH
45132: LD_VAR 0 4
45136: PUSH
45137: LD_VAR 0 8
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: ST_TO_ADDR
// exit ;
45146: POP
45147: POP
45148: POP
45149: POP
45150: GO 45160
// end ; end ;
45152: GO 45088
45154: POP
45155: POP
// end ;
45156: GO 44974
45158: POP
45159: POP
// end ;
45160: LD_VAR 0 3
45164: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
45165: LD_INT 0
45167: PPUSH
// if not side or side > 8 then
45168: LD_VAR 0 3
45172: NOT
45173: PUSH
45174: LD_VAR 0 3
45178: PUSH
45179: LD_INT 8
45181: GREATER
45182: OR
45183: IFFALSE 45187
// exit ;
45185: GO 45246
// if not range then
45187: LD_VAR 0 4
45191: NOT
45192: IFFALSE 45203
// range := - 12 ;
45194: LD_ADDR_VAR 0 4
45198: PUSH
45199: LD_INT 12
45201: NEG
45202: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
45203: LD_VAR 0 1
45207: PPUSH
45208: LD_VAR 0 2
45212: PPUSH
45213: LD_VAR 0 3
45217: PPUSH
45218: LD_VAR 0 4
45222: PPUSH
45223: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
45227: LD_VAR 0 1
45231: PPUSH
45232: LD_VAR 0 2
45236: PPUSH
45237: LD_VAR 0 3
45241: PPUSH
45242: CALL_OW 331
// end ;
45246: LD_VAR 0 5
45250: RET
// export function Video ( mode ) ; begin
45251: LD_INT 0
45253: PPUSH
// ingame_video = mode ;
45254: LD_ADDR_OWVAR 52
45258: PUSH
45259: LD_VAR 0 1
45263: ST_TO_ADDR
// interface_hidden = mode ;
45264: LD_ADDR_OWVAR 54
45268: PUSH
45269: LD_VAR 0 1
45273: ST_TO_ADDR
// end ;
45274: LD_VAR 0 2
45278: RET
// export function Join ( array , element ) ; begin
45279: LD_INT 0
45281: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45282: LD_ADDR_VAR 0 3
45286: PUSH
45287: LD_VAR 0 1
45291: PPUSH
45292: LD_VAR 0 1
45296: PUSH
45297: LD_INT 1
45299: PLUS
45300: PPUSH
45301: LD_VAR 0 2
45305: PPUSH
45306: CALL_OW 1
45310: ST_TO_ADDR
// end ;
45311: LD_VAR 0 3
45315: RET
// export function JoinUnion ( array , element ) ; begin
45316: LD_INT 0
45318: PPUSH
// result := array union element ;
45319: LD_ADDR_VAR 0 3
45323: PUSH
45324: LD_VAR 0 1
45328: PUSH
45329: LD_VAR 0 2
45333: UNION
45334: ST_TO_ADDR
// end ;
45335: LD_VAR 0 3
45339: RET
// export function GetBehemoths ( side ) ; begin
45340: LD_INT 0
45342: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
45343: LD_ADDR_VAR 0 2
45347: PUSH
45348: LD_INT 22
45350: PUSH
45351: LD_VAR 0 1
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 31
45362: PUSH
45363: LD_INT 25
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PPUSH
45374: CALL_OW 69
45378: ST_TO_ADDR
// end ;
45379: LD_VAR 0 2
45383: RET
// export function Shuffle ( array ) ; var i , index ; begin
45384: LD_INT 0
45386: PPUSH
45387: PPUSH
45388: PPUSH
// result := [ ] ;
45389: LD_ADDR_VAR 0 2
45393: PUSH
45394: EMPTY
45395: ST_TO_ADDR
// if not array then
45396: LD_VAR 0 1
45400: NOT
45401: IFFALSE 45405
// exit ;
45403: GO 45504
// Randomize ;
45405: CALL_OW 10
// for i = array downto 1 do
45409: LD_ADDR_VAR 0 3
45413: PUSH
45414: DOUBLE
45415: LD_VAR 0 1
45419: INC
45420: ST_TO_ADDR
45421: LD_INT 1
45423: PUSH
45424: FOR_DOWNTO
45425: IFFALSE 45502
// begin index := rand ( 1 , array ) ;
45427: LD_ADDR_VAR 0 4
45431: PUSH
45432: LD_INT 1
45434: PPUSH
45435: LD_VAR 0 1
45439: PPUSH
45440: CALL_OW 12
45444: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
45445: LD_ADDR_VAR 0 2
45449: PUSH
45450: LD_VAR 0 2
45454: PPUSH
45455: LD_VAR 0 2
45459: PUSH
45460: LD_INT 1
45462: PLUS
45463: PPUSH
45464: LD_VAR 0 1
45468: PUSH
45469: LD_VAR 0 4
45473: ARRAY
45474: PPUSH
45475: CALL_OW 2
45479: ST_TO_ADDR
// array := Delete ( array , index ) ;
45480: LD_ADDR_VAR 0 1
45484: PUSH
45485: LD_VAR 0 1
45489: PPUSH
45490: LD_VAR 0 4
45494: PPUSH
45495: CALL_OW 3
45499: ST_TO_ADDR
// end ;
45500: GO 45424
45502: POP
45503: POP
// end ;
45504: LD_VAR 0 2
45508: RET
// export function GetBaseMaterials ( base ) ; begin
45509: LD_INT 0
45511: PPUSH
// result := [ 0 , 0 , 0 ] ;
45512: LD_ADDR_VAR 0 2
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: ST_TO_ADDR
// if not base then
45531: LD_VAR 0 1
45535: NOT
45536: IFFALSE 45540
// exit ;
45538: GO 45589
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
45540: LD_ADDR_VAR 0 2
45544: PUSH
45545: LD_VAR 0 1
45549: PPUSH
45550: LD_INT 1
45552: PPUSH
45553: CALL_OW 275
45557: PUSH
45558: LD_VAR 0 1
45562: PPUSH
45563: LD_INT 2
45565: PPUSH
45566: CALL_OW 275
45570: PUSH
45571: LD_VAR 0 1
45575: PPUSH
45576: LD_INT 3
45578: PPUSH
45579: CALL_OW 275
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// end ;
45589: LD_VAR 0 2
45593: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
45594: LD_INT 0
45596: PPUSH
45597: PPUSH
// result := array ;
45598: LD_ADDR_VAR 0 3
45602: PUSH
45603: LD_VAR 0 1
45607: ST_TO_ADDR
// if size >= result then
45608: LD_VAR 0 2
45612: PUSH
45613: LD_VAR 0 3
45617: GREATEREQUAL
45618: IFFALSE 45622
// exit ;
45620: GO 45672
// if size then
45622: LD_VAR 0 2
45626: IFFALSE 45672
// for i := array downto size do
45628: LD_ADDR_VAR 0 4
45632: PUSH
45633: DOUBLE
45634: LD_VAR 0 1
45638: INC
45639: ST_TO_ADDR
45640: LD_VAR 0 2
45644: PUSH
45645: FOR_DOWNTO
45646: IFFALSE 45670
// result := Delete ( result , result ) ;
45648: LD_ADDR_VAR 0 3
45652: PUSH
45653: LD_VAR 0 3
45657: PPUSH
45658: LD_VAR 0 3
45662: PPUSH
45663: CALL_OW 3
45667: ST_TO_ADDR
45668: GO 45645
45670: POP
45671: POP
// end ;
45672: LD_VAR 0 3
45676: RET
// export function ComExit ( unit ) ; var tmp ; begin
45677: LD_INT 0
45679: PPUSH
45680: PPUSH
// if not IsInUnit ( unit ) then
45681: LD_VAR 0 1
45685: PPUSH
45686: CALL_OW 310
45690: NOT
45691: IFFALSE 45695
// exit ;
45693: GO 45755
// tmp := IsInUnit ( unit ) ;
45695: LD_ADDR_VAR 0 3
45699: PUSH
45700: LD_VAR 0 1
45704: PPUSH
45705: CALL_OW 310
45709: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45710: LD_VAR 0 3
45714: PPUSH
45715: CALL_OW 247
45719: PUSH
45720: LD_INT 2
45722: EQUAL
45723: IFFALSE 45736
// ComExitVehicle ( unit ) else
45725: LD_VAR 0 1
45729: PPUSH
45730: CALL_OW 121
45734: GO 45745
// ComExitBuilding ( unit ) ;
45736: LD_VAR 0 1
45740: PPUSH
45741: CALL_OW 122
// result := tmp ;
45745: LD_ADDR_VAR 0 2
45749: PUSH
45750: LD_VAR 0 3
45754: ST_TO_ADDR
// end ;
45755: LD_VAR 0 2
45759: RET
// export function ComExitAll ( units ) ; var i ; begin
45760: LD_INT 0
45762: PPUSH
45763: PPUSH
// if not units then
45764: LD_VAR 0 1
45768: NOT
45769: IFFALSE 45773
// exit ;
45771: GO 45799
// for i in units do
45773: LD_ADDR_VAR 0 3
45777: PUSH
45778: LD_VAR 0 1
45782: PUSH
45783: FOR_IN
45784: IFFALSE 45797
// ComExit ( i ) ;
45786: LD_VAR 0 3
45790: PPUSH
45791: CALL 45677 0 1
45795: GO 45783
45797: POP
45798: POP
// end ;
45799: LD_VAR 0 2
45803: RET
// export function ResetHc ; begin
45804: LD_INT 0
45806: PPUSH
// InitHc ;
45807: CALL_OW 19
// hc_importance := 0 ;
45811: LD_ADDR_OWVAR 32
45815: PUSH
45816: LD_INT 0
45818: ST_TO_ADDR
// end ;
45819: LD_VAR 0 1
45823: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45824: LD_INT 0
45826: PPUSH
45827: PPUSH
45828: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45829: LD_ADDR_VAR 0 6
45833: PUSH
45834: LD_VAR 0 1
45838: PUSH
45839: LD_VAR 0 3
45843: PLUS
45844: PUSH
45845: LD_INT 2
45847: DIV
45848: ST_TO_ADDR
// if _x < 0 then
45849: LD_VAR 0 6
45853: PUSH
45854: LD_INT 0
45856: LESS
45857: IFFALSE 45874
// _x := _x * - 1 ;
45859: LD_ADDR_VAR 0 6
45863: PUSH
45864: LD_VAR 0 6
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: MUL
45873: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45874: LD_ADDR_VAR 0 7
45878: PUSH
45879: LD_VAR 0 2
45883: PUSH
45884: LD_VAR 0 4
45888: PLUS
45889: PUSH
45890: LD_INT 2
45892: DIV
45893: ST_TO_ADDR
// if _y < 0 then
45894: LD_VAR 0 7
45898: PUSH
45899: LD_INT 0
45901: LESS
45902: IFFALSE 45919
// _y := _y * - 1 ;
45904: LD_ADDR_VAR 0 7
45908: PUSH
45909: LD_VAR 0 7
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: MUL
45918: ST_TO_ADDR
// result := [ _x , _y ] ;
45919: LD_ADDR_VAR 0 5
45923: PUSH
45924: LD_VAR 0 6
45928: PUSH
45929: LD_VAR 0 7
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: ST_TO_ADDR
// end ;
45938: LD_VAR 0 5
45942: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45943: LD_INT 0
45945: PPUSH
45946: PPUSH
45947: PPUSH
45948: PPUSH
// task := GetTaskList ( unit ) ;
45949: LD_ADDR_VAR 0 7
45953: PUSH
45954: LD_VAR 0 1
45958: PPUSH
45959: CALL_OW 437
45963: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45964: LD_VAR 0 7
45968: NOT
45969: PUSH
45970: LD_VAR 0 1
45974: PPUSH
45975: LD_VAR 0 2
45979: PPUSH
45980: CALL_OW 308
45984: NOT
45985: AND
45986: IFFALSE 45990
// exit ;
45988: GO 46108
// if IsInArea ( unit , area ) then
45990: LD_VAR 0 1
45994: PPUSH
45995: LD_VAR 0 2
45999: PPUSH
46000: CALL_OW 308
46004: IFFALSE 46022
// begin ComMoveToArea ( unit , goAway ) ;
46006: LD_VAR 0 1
46010: PPUSH
46011: LD_VAR 0 3
46015: PPUSH
46016: CALL_OW 113
// exit ;
46020: GO 46108
// end ; if task [ 1 ] [ 1 ] <> M then
46022: LD_VAR 0 7
46026: PUSH
46027: LD_INT 1
46029: ARRAY
46030: PUSH
46031: LD_INT 1
46033: ARRAY
46034: PUSH
46035: LD_STRING M
46037: NONEQUAL
46038: IFFALSE 46042
// exit ;
46040: GO 46108
// x := task [ 1 ] [ 2 ] ;
46042: LD_ADDR_VAR 0 5
46046: PUSH
46047: LD_VAR 0 7
46051: PUSH
46052: LD_INT 1
46054: ARRAY
46055: PUSH
46056: LD_INT 2
46058: ARRAY
46059: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
46060: LD_ADDR_VAR 0 6
46064: PUSH
46065: LD_VAR 0 7
46069: PUSH
46070: LD_INT 1
46072: ARRAY
46073: PUSH
46074: LD_INT 3
46076: ARRAY
46077: ST_TO_ADDR
// if InArea ( x , y , area ) then
46078: LD_VAR 0 5
46082: PPUSH
46083: LD_VAR 0 6
46087: PPUSH
46088: LD_VAR 0 2
46092: PPUSH
46093: CALL_OW 309
46097: IFFALSE 46108
// ComStop ( unit ) ;
46099: LD_VAR 0 1
46103: PPUSH
46104: CALL_OW 141
// end ;
46108: LD_VAR 0 4
46112: RET
// export function Abs ( value ) ; begin
46113: LD_INT 0
46115: PPUSH
// result := value ;
46116: LD_ADDR_VAR 0 2
46120: PUSH
46121: LD_VAR 0 1
46125: ST_TO_ADDR
// if value < 0 then
46126: LD_VAR 0 1
46130: PUSH
46131: LD_INT 0
46133: LESS
46134: IFFALSE 46151
// result := value * - 1 ;
46136: LD_ADDR_VAR 0 2
46140: PUSH
46141: LD_VAR 0 1
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: MUL
46150: ST_TO_ADDR
// end ;
46151: LD_VAR 0 2
46155: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
46156: LD_INT 0
46158: PPUSH
46159: PPUSH
46160: PPUSH
46161: PPUSH
46162: PPUSH
46163: PPUSH
46164: PPUSH
46165: PPUSH
// if not unit or not building then
46166: LD_VAR 0 1
46170: NOT
46171: PUSH
46172: LD_VAR 0 2
46176: NOT
46177: OR
46178: IFFALSE 46182
// exit ;
46180: GO 46408
// x := GetX ( building ) ;
46182: LD_ADDR_VAR 0 4
46186: PUSH
46187: LD_VAR 0 2
46191: PPUSH
46192: CALL_OW 250
46196: ST_TO_ADDR
// y := GetY ( building ) ;
46197: LD_ADDR_VAR 0 6
46201: PUSH
46202: LD_VAR 0 2
46206: PPUSH
46207: CALL_OW 251
46211: ST_TO_ADDR
// d := GetDir ( building ) ;
46212: LD_ADDR_VAR 0 8
46216: PUSH
46217: LD_VAR 0 2
46221: PPUSH
46222: CALL_OW 254
46226: ST_TO_ADDR
// r := 4 ;
46227: LD_ADDR_VAR 0 9
46231: PUSH
46232: LD_INT 4
46234: ST_TO_ADDR
// for i := 1 to 5 do
46235: LD_ADDR_VAR 0 10
46239: PUSH
46240: DOUBLE
46241: LD_INT 1
46243: DEC
46244: ST_TO_ADDR
46245: LD_INT 5
46247: PUSH
46248: FOR_TO
46249: IFFALSE 46406
// begin _x := ShiftX ( x , d , r + i ) ;
46251: LD_ADDR_VAR 0 5
46255: PUSH
46256: LD_VAR 0 4
46260: PPUSH
46261: LD_VAR 0 8
46265: PPUSH
46266: LD_VAR 0 9
46270: PUSH
46271: LD_VAR 0 10
46275: PLUS
46276: PPUSH
46277: CALL_OW 272
46281: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46282: LD_ADDR_VAR 0 7
46286: PUSH
46287: LD_VAR 0 6
46291: PPUSH
46292: LD_VAR 0 8
46296: PPUSH
46297: LD_VAR 0 9
46301: PUSH
46302: LD_VAR 0 10
46306: PLUS
46307: PPUSH
46308: CALL_OW 273
46312: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
46313: LD_VAR 0 5
46317: PPUSH
46318: LD_VAR 0 7
46322: PPUSH
46323: CALL_OW 488
46327: PUSH
46328: LD_VAR 0 5
46332: PPUSH
46333: LD_VAR 0 7
46337: PPUSH
46338: CALL_OW 428
46342: PPUSH
46343: CALL_OW 247
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: IN
46358: NOT
46359: AND
46360: IFFALSE 46404
// begin ComMoveXY ( unit , _x , _y ) ;
46362: LD_VAR 0 1
46366: PPUSH
46367: LD_VAR 0 5
46371: PPUSH
46372: LD_VAR 0 7
46376: PPUSH
46377: CALL_OW 111
// result := [ _x , _y ] ;
46381: LD_ADDR_VAR 0 3
46385: PUSH
46386: LD_VAR 0 5
46390: PUSH
46391: LD_VAR 0 7
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// exit ;
46400: POP
46401: POP
46402: GO 46408
// end ; end ;
46404: GO 46248
46406: POP
46407: POP
// end ;
46408: LD_VAR 0 3
46412: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
46413: LD_INT 0
46415: PPUSH
46416: PPUSH
46417: PPUSH
// result := 0 ;
46418: LD_ADDR_VAR 0 3
46422: PUSH
46423: LD_INT 0
46425: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
46426: LD_VAR 0 1
46430: PUSH
46431: LD_INT 0
46433: LESS
46434: PUSH
46435: LD_VAR 0 1
46439: PUSH
46440: LD_INT 8
46442: GREATER
46443: OR
46444: PUSH
46445: LD_VAR 0 2
46449: PUSH
46450: LD_INT 0
46452: LESS
46453: OR
46454: PUSH
46455: LD_VAR 0 2
46459: PUSH
46460: LD_INT 8
46462: GREATER
46463: OR
46464: IFFALSE 46468
// exit ;
46466: GO 46543
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
46468: LD_ADDR_VAR 0 4
46472: PUSH
46473: LD_INT 22
46475: PUSH
46476: LD_VAR 0 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PPUSH
46485: CALL_OW 69
46489: PUSH
46490: FOR_IN
46491: IFFALSE 46541
// begin un := UnitShoot ( i ) ;
46493: LD_ADDR_VAR 0 5
46497: PUSH
46498: LD_VAR 0 4
46502: PPUSH
46503: CALL_OW 504
46507: ST_TO_ADDR
// if GetSide ( un ) = side1 then
46508: LD_VAR 0 5
46512: PPUSH
46513: CALL_OW 255
46517: PUSH
46518: LD_VAR 0 1
46522: EQUAL
46523: IFFALSE 46539
// begin result := un ;
46525: LD_ADDR_VAR 0 3
46529: PUSH
46530: LD_VAR 0 5
46534: ST_TO_ADDR
// exit ;
46535: POP
46536: POP
46537: GO 46543
// end ; end ;
46539: GO 46490
46541: POP
46542: POP
// end ;
46543: LD_VAR 0 3
46547: RET
// export function GetCargoBay ( units ) ; begin
46548: LD_INT 0
46550: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
46551: LD_ADDR_VAR 0 2
46555: PUSH
46556: LD_VAR 0 1
46560: PPUSH
46561: LD_INT 2
46563: PUSH
46564: LD_INT 34
46566: PUSH
46567: LD_INT 12
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 34
46576: PUSH
46577: LD_INT 51
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 34
46586: PUSH
46587: LD_INT 32
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 34
46596: PUSH
46597: LD_INT 89
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: PPUSH
46611: CALL_OW 72
46615: ST_TO_ADDR
// end ;
46616: LD_VAR 0 2
46620: RET
// export function Negate ( value ) ; begin
46621: LD_INT 0
46623: PPUSH
// result := not value ;
46624: LD_ADDR_VAR 0 2
46628: PUSH
46629: LD_VAR 0 1
46633: NOT
46634: ST_TO_ADDR
// end ;
46635: LD_VAR 0 2
46639: RET
// export function Inc ( value ) ; begin
46640: LD_INT 0
46642: PPUSH
// result := value + 1 ;
46643: LD_ADDR_VAR 0 2
46647: PUSH
46648: LD_VAR 0 1
46652: PUSH
46653: LD_INT 1
46655: PLUS
46656: ST_TO_ADDR
// end ;
46657: LD_VAR 0 2
46661: RET
// export function Dec ( value ) ; begin
46662: LD_INT 0
46664: PPUSH
// result := value - 1 ;
46665: LD_ADDR_VAR 0 2
46669: PUSH
46670: LD_VAR 0 1
46674: PUSH
46675: LD_INT 1
46677: MINUS
46678: ST_TO_ADDR
// end ;
46679: LD_VAR 0 2
46683: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46684: LD_INT 0
46686: PPUSH
46687: PPUSH
46688: PPUSH
46689: PPUSH
46690: PPUSH
46691: PPUSH
46692: PPUSH
46693: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46694: LD_VAR 0 1
46698: PPUSH
46699: LD_VAR 0 2
46703: PPUSH
46704: CALL_OW 488
46708: NOT
46709: PUSH
46710: LD_VAR 0 3
46714: PPUSH
46715: LD_VAR 0 4
46719: PPUSH
46720: CALL_OW 488
46724: NOT
46725: OR
46726: IFFALSE 46739
// begin result := - 1 ;
46728: LD_ADDR_VAR 0 5
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: ST_TO_ADDR
// exit ;
46737: GO 46974
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46739: LD_ADDR_VAR 0 12
46743: PUSH
46744: LD_VAR 0 1
46748: PPUSH
46749: LD_VAR 0 2
46753: PPUSH
46754: LD_VAR 0 3
46758: PPUSH
46759: LD_VAR 0 4
46763: PPUSH
46764: CALL 45824 0 4
46768: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46769: LD_ADDR_VAR 0 11
46773: PUSH
46774: LD_VAR 0 1
46778: PPUSH
46779: LD_VAR 0 2
46783: PPUSH
46784: LD_VAR 0 12
46788: PUSH
46789: LD_INT 1
46791: ARRAY
46792: PPUSH
46793: LD_VAR 0 12
46797: PUSH
46798: LD_INT 2
46800: ARRAY
46801: PPUSH
46802: CALL_OW 298
46806: ST_TO_ADDR
// distance := 9999 ;
46807: LD_ADDR_VAR 0 10
46811: PUSH
46812: LD_INT 9999
46814: ST_TO_ADDR
// for i := 0 to 5 do
46815: LD_ADDR_VAR 0 6
46819: PUSH
46820: DOUBLE
46821: LD_INT 0
46823: DEC
46824: ST_TO_ADDR
46825: LD_INT 5
46827: PUSH
46828: FOR_TO
46829: IFFALSE 46972
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46831: LD_ADDR_VAR 0 7
46835: PUSH
46836: LD_VAR 0 1
46840: PPUSH
46841: LD_VAR 0 6
46845: PPUSH
46846: LD_VAR 0 11
46850: PPUSH
46851: CALL_OW 272
46855: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46856: LD_ADDR_VAR 0 8
46860: PUSH
46861: LD_VAR 0 2
46865: PPUSH
46866: LD_VAR 0 6
46870: PPUSH
46871: LD_VAR 0 11
46875: PPUSH
46876: CALL_OW 273
46880: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46881: LD_VAR 0 7
46885: PPUSH
46886: LD_VAR 0 8
46890: PPUSH
46891: CALL_OW 488
46895: NOT
46896: IFFALSE 46900
// continue ;
46898: GO 46828
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
46900: LD_ADDR_VAR 0 9
46904: PUSH
46905: LD_VAR 0 12
46909: PUSH
46910: LD_INT 1
46912: ARRAY
46913: PPUSH
46914: LD_VAR 0 12
46918: PUSH
46919: LD_INT 2
46921: ARRAY
46922: PPUSH
46923: LD_VAR 0 7
46927: PPUSH
46928: LD_VAR 0 8
46932: PPUSH
46933: CALL_OW 298
46937: ST_TO_ADDR
// if tmp < distance then
46938: LD_VAR 0 9
46942: PUSH
46943: LD_VAR 0 10
46947: LESS
46948: IFFALSE 46970
// begin result := i ;
46950: LD_ADDR_VAR 0 5
46954: PUSH
46955: LD_VAR 0 6
46959: ST_TO_ADDR
// distance := tmp ;
46960: LD_ADDR_VAR 0 10
46964: PUSH
46965: LD_VAR 0 9
46969: ST_TO_ADDR
// end ; end ;
46970: GO 46828
46972: POP
46973: POP
// end ;
46974: LD_VAR 0 5
46978: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46979: LD_INT 0
46981: PPUSH
46982: PPUSH
// if not driver or not IsInUnit ( driver ) then
46983: LD_VAR 0 1
46987: NOT
46988: PUSH
46989: LD_VAR 0 1
46993: PPUSH
46994: CALL_OW 310
46998: NOT
46999: OR
47000: IFFALSE 47004
// exit ;
47002: GO 47094
// vehicle := IsInUnit ( driver ) ;
47004: LD_ADDR_VAR 0 3
47008: PUSH
47009: LD_VAR 0 1
47013: PPUSH
47014: CALL_OW 310
47018: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47019: LD_VAR 0 1
47023: PPUSH
47024: LD_STRING \
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: PUSH
47054: LD_STRING E
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_VAR 0 3
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PPUSH
47090: CALL_OW 446
// end ;
47094: LD_VAR 0 2
47098: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47099: LD_INT 0
47101: PPUSH
47102: PPUSH
// if not driver or not IsInUnit ( driver ) then
47103: LD_VAR 0 1
47107: NOT
47108: PUSH
47109: LD_VAR 0 1
47113: PPUSH
47114: CALL_OW 310
47118: NOT
47119: OR
47120: IFFALSE 47124
// exit ;
47122: GO 47214
// vehicle := IsInUnit ( driver ) ;
47124: LD_ADDR_VAR 0 3
47128: PUSH
47129: LD_VAR 0 1
47133: PPUSH
47134: CALL_OW 310
47138: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47139: LD_VAR 0 1
47143: PPUSH
47144: LD_STRING \
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: PUSH
47174: LD_STRING E
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_VAR 0 3
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PPUSH
47210: CALL_OW 447
// end ;
47214: LD_VAR 0 2
47218: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
47219: LD_INT 0
47221: PPUSH
47222: PPUSH
47223: PPUSH
// tmp := [ ] ;
47224: LD_ADDR_VAR 0 5
47228: PUSH
47229: EMPTY
47230: ST_TO_ADDR
// for i in units do
47231: LD_ADDR_VAR 0 4
47235: PUSH
47236: LD_VAR 0 1
47240: PUSH
47241: FOR_IN
47242: IFFALSE 47280
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
47244: LD_ADDR_VAR 0 5
47248: PUSH
47249: LD_VAR 0 5
47253: PPUSH
47254: LD_VAR 0 5
47258: PUSH
47259: LD_INT 1
47261: PLUS
47262: PPUSH
47263: LD_VAR 0 4
47267: PPUSH
47268: CALL_OW 256
47272: PPUSH
47273: CALL_OW 2
47277: ST_TO_ADDR
47278: GO 47241
47280: POP
47281: POP
// if not tmp then
47282: LD_VAR 0 5
47286: NOT
47287: IFFALSE 47291
// exit ;
47289: GO 47339
// if asc then
47291: LD_VAR 0 2
47295: IFFALSE 47319
// result := SortListByListAsc ( units , tmp ) else
47297: LD_ADDR_VAR 0 3
47301: PUSH
47302: LD_VAR 0 1
47306: PPUSH
47307: LD_VAR 0 5
47311: PPUSH
47312: CALL_OW 76
47316: ST_TO_ADDR
47317: GO 47339
// result := SortListByListDesc ( units , tmp ) ;
47319: LD_ADDR_VAR 0 3
47323: PUSH
47324: LD_VAR 0 1
47328: PPUSH
47329: LD_VAR 0 5
47333: PPUSH
47334: CALL_OW 77
47338: ST_TO_ADDR
// end ;
47339: LD_VAR 0 3
47343: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
47344: LD_INT 0
47346: PPUSH
47347: PPUSH
// task := GetTaskList ( mech ) ;
47348: LD_ADDR_VAR 0 4
47352: PUSH
47353: LD_VAR 0 1
47357: PPUSH
47358: CALL_OW 437
47362: ST_TO_ADDR
// if not task then
47363: LD_VAR 0 4
47367: NOT
47368: IFFALSE 47372
// exit ;
47370: GO 47414
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
47372: LD_ADDR_VAR 0 3
47376: PUSH
47377: LD_VAR 0 4
47381: PUSH
47382: LD_INT 1
47384: ARRAY
47385: PUSH
47386: LD_INT 1
47388: ARRAY
47389: PUSH
47390: LD_STRING r
47392: EQUAL
47393: PUSH
47394: LD_VAR 0 4
47398: PUSH
47399: LD_INT 1
47401: ARRAY
47402: PUSH
47403: LD_INT 4
47405: ARRAY
47406: PUSH
47407: LD_VAR 0 2
47411: EQUAL
47412: AND
47413: ST_TO_ADDR
// end ;
47414: LD_VAR 0 3
47418: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
47419: LD_INT 0
47421: PPUSH
// SetDir ( unit , d ) ;
47422: LD_VAR 0 1
47426: PPUSH
47427: LD_VAR 0 4
47431: PPUSH
47432: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
47436: LD_VAR 0 1
47440: PPUSH
47441: LD_VAR 0 2
47445: PPUSH
47446: LD_VAR 0 3
47450: PPUSH
47451: LD_VAR 0 5
47455: PPUSH
47456: CALL_OW 48
// end ;
47460: LD_VAR 0 6
47464: RET
// export function ToNaturalNumber ( number ) ; begin
47465: LD_INT 0
47467: PPUSH
// result := number div 1 ;
47468: LD_ADDR_VAR 0 2
47472: PUSH
47473: LD_VAR 0 1
47477: PUSH
47478: LD_INT 1
47480: DIV
47481: ST_TO_ADDR
// if number < 0 then
47482: LD_VAR 0 1
47486: PUSH
47487: LD_INT 0
47489: LESS
47490: IFFALSE 47500
// result := 0 ;
47492: LD_ADDR_VAR 0 2
47496: PUSH
47497: LD_INT 0
47499: ST_TO_ADDR
// end ;
47500: LD_VAR 0 2
47504: RET
// export function SortByClass ( units , class ) ; var un ; begin
47505: LD_INT 0
47507: PPUSH
47508: PPUSH
// if not units or not class then
47509: LD_VAR 0 1
47513: NOT
47514: PUSH
47515: LD_VAR 0 2
47519: NOT
47520: OR
47521: IFFALSE 47525
// exit ;
47523: GO 47620
// result := [ ] ;
47525: LD_ADDR_VAR 0 3
47529: PUSH
47530: EMPTY
47531: ST_TO_ADDR
// for un in units do
47532: LD_ADDR_VAR 0 4
47536: PUSH
47537: LD_VAR 0 1
47541: PUSH
47542: FOR_IN
47543: IFFALSE 47618
// if GetClass ( un ) = class then
47545: LD_VAR 0 4
47549: PPUSH
47550: CALL_OW 257
47554: PUSH
47555: LD_VAR 0 2
47559: EQUAL
47560: IFFALSE 47587
// result := Insert ( result , 1 , un ) else
47562: LD_ADDR_VAR 0 3
47566: PUSH
47567: LD_VAR 0 3
47571: PPUSH
47572: LD_INT 1
47574: PPUSH
47575: LD_VAR 0 4
47579: PPUSH
47580: CALL_OW 2
47584: ST_TO_ADDR
47585: GO 47616
// result := Replace ( result , result + 1 , un ) ;
47587: LD_ADDR_VAR 0 3
47591: PUSH
47592: LD_VAR 0 3
47596: PPUSH
47597: LD_VAR 0 3
47601: PUSH
47602: LD_INT 1
47604: PLUS
47605: PPUSH
47606: LD_VAR 0 4
47610: PPUSH
47611: CALL_OW 1
47615: ST_TO_ADDR
47616: GO 47542
47618: POP
47619: POP
// end ;
47620: LD_VAR 0 3
47624: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
47625: LD_INT 0
47627: PPUSH
47628: PPUSH
47629: PPUSH
47630: PPUSH
47631: PPUSH
47632: PPUSH
47633: PPUSH
// result := [ ] ;
47634: LD_ADDR_VAR 0 4
47638: PUSH
47639: EMPTY
47640: ST_TO_ADDR
// if x - r < 0 then
47641: LD_VAR 0 1
47645: PUSH
47646: LD_VAR 0 3
47650: MINUS
47651: PUSH
47652: LD_INT 0
47654: LESS
47655: IFFALSE 47667
// min_x := 0 else
47657: LD_ADDR_VAR 0 8
47661: PUSH
47662: LD_INT 0
47664: ST_TO_ADDR
47665: GO 47683
// min_x := x - r ;
47667: LD_ADDR_VAR 0 8
47671: PUSH
47672: LD_VAR 0 1
47676: PUSH
47677: LD_VAR 0 3
47681: MINUS
47682: ST_TO_ADDR
// if y - r < 0 then
47683: LD_VAR 0 2
47687: PUSH
47688: LD_VAR 0 3
47692: MINUS
47693: PUSH
47694: LD_INT 0
47696: LESS
47697: IFFALSE 47709
// min_y := 0 else
47699: LD_ADDR_VAR 0 7
47703: PUSH
47704: LD_INT 0
47706: ST_TO_ADDR
47707: GO 47725
// min_y := y - r ;
47709: LD_ADDR_VAR 0 7
47713: PUSH
47714: LD_VAR 0 2
47718: PUSH
47719: LD_VAR 0 3
47723: MINUS
47724: ST_TO_ADDR
// max_x := x + r ;
47725: LD_ADDR_VAR 0 9
47729: PUSH
47730: LD_VAR 0 1
47734: PUSH
47735: LD_VAR 0 3
47739: PLUS
47740: ST_TO_ADDR
// max_y := y + r ;
47741: LD_ADDR_VAR 0 10
47745: PUSH
47746: LD_VAR 0 2
47750: PUSH
47751: LD_VAR 0 3
47755: PLUS
47756: ST_TO_ADDR
// for _x = min_x to max_x do
47757: LD_ADDR_VAR 0 5
47761: PUSH
47762: DOUBLE
47763: LD_VAR 0 8
47767: DEC
47768: ST_TO_ADDR
47769: LD_VAR 0 9
47773: PUSH
47774: FOR_TO
47775: IFFALSE 47876
// for _y = min_y to max_y do
47777: LD_ADDR_VAR 0 6
47781: PUSH
47782: DOUBLE
47783: LD_VAR 0 7
47787: DEC
47788: ST_TO_ADDR
47789: LD_VAR 0 10
47793: PUSH
47794: FOR_TO
47795: IFFALSE 47872
// begin if not ValidHex ( _x , _y ) then
47797: LD_VAR 0 5
47801: PPUSH
47802: LD_VAR 0 6
47806: PPUSH
47807: CALL_OW 488
47811: NOT
47812: IFFALSE 47816
// continue ;
47814: GO 47794
// if GetResourceTypeXY ( _x , _y ) then
47816: LD_VAR 0 5
47820: PPUSH
47821: LD_VAR 0 6
47825: PPUSH
47826: CALL_OW 283
47830: IFFALSE 47870
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47832: LD_ADDR_VAR 0 4
47836: PUSH
47837: LD_VAR 0 4
47841: PPUSH
47842: LD_VAR 0 4
47846: PUSH
47847: LD_INT 1
47849: PLUS
47850: PPUSH
47851: LD_VAR 0 5
47855: PUSH
47856: LD_VAR 0 6
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PPUSH
47865: CALL_OW 1
47869: ST_TO_ADDR
// end ;
47870: GO 47794
47872: POP
47873: POP
47874: GO 47774
47876: POP
47877: POP
// end ;
47878: LD_VAR 0 4
47882: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47883: LD_INT 0
47885: PPUSH
47886: PPUSH
47887: PPUSH
47888: PPUSH
47889: PPUSH
47890: PPUSH
47891: PPUSH
47892: PPUSH
// if not units then
47893: LD_VAR 0 1
47897: NOT
47898: IFFALSE 47902
// exit ;
47900: GO 48426
// result := UnitFilter ( units , [ f_ok ] ) ;
47902: LD_ADDR_VAR 0 3
47906: PUSH
47907: LD_VAR 0 1
47911: PPUSH
47912: LD_INT 50
47914: PUSH
47915: EMPTY
47916: LIST
47917: PPUSH
47918: CALL_OW 72
47922: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
47923: LD_ADDR_VAR 0 8
47927: PUSH
47928: LD_VAR 0 1
47932: PUSH
47933: LD_INT 1
47935: ARRAY
47936: PPUSH
47937: CALL_OW 255
47941: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
47942: LD_ADDR_VAR 0 10
47946: PUSH
47947: LD_INT 29
47949: PUSH
47950: LD_INT 91
47952: PUSH
47953: LD_INT 49
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: ST_TO_ADDR
// if not result then
47961: LD_VAR 0 3
47965: NOT
47966: IFFALSE 47970
// exit ;
47968: GO 48426
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
47970: LD_ADDR_VAR 0 5
47974: PUSH
47975: LD_INT 81
47977: PUSH
47978: LD_VAR 0 8
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PPUSH
47987: CALL_OW 69
47991: ST_TO_ADDR
// for i in result do
47992: LD_ADDR_VAR 0 4
47996: PUSH
47997: LD_VAR 0 3
48001: PUSH
48002: FOR_IN
48003: IFFALSE 48424
// begin tag := GetTag ( i ) + 1 ;
48005: LD_ADDR_VAR 0 9
48009: PUSH
48010: LD_VAR 0 4
48014: PPUSH
48015: CALL_OW 110
48019: PUSH
48020: LD_INT 1
48022: PLUS
48023: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
48024: LD_ADDR_VAR 0 7
48028: PUSH
48029: LD_VAR 0 4
48033: PPUSH
48034: CALL_OW 250
48038: PPUSH
48039: LD_VAR 0 4
48043: PPUSH
48044: CALL_OW 251
48048: PPUSH
48049: LD_INT 6
48051: PPUSH
48052: CALL 47625 0 3
48056: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
48057: LD_VAR 0 4
48061: PPUSH
48062: CALL_OW 247
48066: PUSH
48067: LD_INT 2
48069: EQUAL
48070: PUSH
48071: LD_VAR 0 7
48075: AND
48076: PUSH
48077: LD_VAR 0 4
48081: PPUSH
48082: CALL_OW 264
48086: PUSH
48087: LD_VAR 0 10
48091: IN
48092: NOT
48093: AND
48094: IFFALSE 48133
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
48096: LD_VAR 0 4
48100: PPUSH
48101: LD_VAR 0 7
48105: PUSH
48106: LD_INT 1
48108: ARRAY
48109: PUSH
48110: LD_INT 1
48112: ARRAY
48113: PPUSH
48114: LD_VAR 0 7
48118: PUSH
48119: LD_INT 1
48121: ARRAY
48122: PUSH
48123: LD_INT 2
48125: ARRAY
48126: PPUSH
48127: CALL_OW 116
48131: GO 48422
// if path > tag then
48133: LD_VAR 0 2
48137: PUSH
48138: LD_VAR 0 9
48142: GREATER
48143: IFFALSE 48351
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
48145: LD_ADDR_VAR 0 6
48149: PUSH
48150: LD_VAR 0 5
48154: PPUSH
48155: LD_INT 91
48157: PUSH
48158: LD_VAR 0 4
48162: PUSH
48163: LD_INT 8
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: LIST
48170: PPUSH
48171: CALL_OW 72
48175: ST_TO_ADDR
// if nearEnemy then
48176: LD_VAR 0 6
48180: IFFALSE 48249
// begin if GetWeapon ( i ) = ru_time_lapser then
48182: LD_VAR 0 4
48186: PPUSH
48187: CALL_OW 264
48191: PUSH
48192: LD_INT 49
48194: EQUAL
48195: IFFALSE 48223
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
48197: LD_VAR 0 4
48201: PPUSH
48202: LD_VAR 0 6
48206: PPUSH
48207: LD_VAR 0 4
48211: PPUSH
48212: CALL_OW 74
48216: PPUSH
48217: CALL_OW 112
48221: GO 48247
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
48223: LD_VAR 0 4
48227: PPUSH
48228: LD_VAR 0 6
48232: PPUSH
48233: LD_VAR 0 4
48237: PPUSH
48238: CALL_OW 74
48242: PPUSH
48243: CALL 49351 0 2
// end else
48247: GO 48349
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
48249: LD_VAR 0 4
48253: PPUSH
48254: LD_VAR 0 2
48258: PUSH
48259: LD_VAR 0 9
48263: ARRAY
48264: PUSH
48265: LD_INT 1
48267: ARRAY
48268: PPUSH
48269: LD_VAR 0 2
48273: PUSH
48274: LD_VAR 0 9
48278: ARRAY
48279: PUSH
48280: LD_INT 2
48282: ARRAY
48283: PPUSH
48284: CALL_OW 297
48288: PUSH
48289: LD_INT 6
48291: GREATER
48292: IFFALSE 48335
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
48294: LD_VAR 0 4
48298: PPUSH
48299: LD_VAR 0 2
48303: PUSH
48304: LD_VAR 0 9
48308: ARRAY
48309: PUSH
48310: LD_INT 1
48312: ARRAY
48313: PPUSH
48314: LD_VAR 0 2
48318: PUSH
48319: LD_VAR 0 9
48323: ARRAY
48324: PUSH
48325: LD_INT 2
48327: ARRAY
48328: PPUSH
48329: CALL_OW 114
48333: GO 48349
// SetTag ( i , tag ) ;
48335: LD_VAR 0 4
48339: PPUSH
48340: LD_VAR 0 9
48344: PPUSH
48345: CALL_OW 109
// end else
48349: GO 48422
// if enemy then
48351: LD_VAR 0 5
48355: IFFALSE 48422
// begin if GetWeapon ( i ) = ru_time_lapser then
48357: LD_VAR 0 4
48361: PPUSH
48362: CALL_OW 264
48366: PUSH
48367: LD_INT 49
48369: EQUAL
48370: IFFALSE 48398
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
48372: LD_VAR 0 4
48376: PPUSH
48377: LD_VAR 0 5
48381: PPUSH
48382: LD_VAR 0 4
48386: PPUSH
48387: CALL_OW 74
48391: PPUSH
48392: CALL_OW 112
48396: GO 48422
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
48398: LD_VAR 0 4
48402: PPUSH
48403: LD_VAR 0 5
48407: PPUSH
48408: LD_VAR 0 4
48412: PPUSH
48413: CALL_OW 74
48417: PPUSH
48418: CALL 49351 0 2
// end ; end ;
48422: GO 48002
48424: POP
48425: POP
// end ;
48426: LD_VAR 0 3
48430: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
48431: LD_INT 0
48433: PPUSH
48434: PPUSH
48435: PPUSH
// if not unit or IsInUnit ( unit ) then
48436: LD_VAR 0 1
48440: NOT
48441: PUSH
48442: LD_VAR 0 1
48446: PPUSH
48447: CALL_OW 310
48451: OR
48452: IFFALSE 48456
// exit ;
48454: GO 48547
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
48456: LD_ADDR_VAR 0 4
48460: PUSH
48461: LD_VAR 0 1
48465: PPUSH
48466: CALL_OW 250
48470: PPUSH
48471: LD_VAR 0 2
48475: PPUSH
48476: LD_INT 1
48478: PPUSH
48479: CALL_OW 272
48483: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
48484: LD_ADDR_VAR 0 5
48488: PUSH
48489: LD_VAR 0 1
48493: PPUSH
48494: CALL_OW 251
48498: PPUSH
48499: LD_VAR 0 2
48503: PPUSH
48504: LD_INT 1
48506: PPUSH
48507: CALL_OW 273
48511: ST_TO_ADDR
// if ValidHex ( x , y ) then
48512: LD_VAR 0 4
48516: PPUSH
48517: LD_VAR 0 5
48521: PPUSH
48522: CALL_OW 488
48526: IFFALSE 48547
// ComTurnXY ( unit , x , y ) ;
48528: LD_VAR 0 1
48532: PPUSH
48533: LD_VAR 0 4
48537: PPUSH
48538: LD_VAR 0 5
48542: PPUSH
48543: CALL_OW 118
// end ;
48547: LD_VAR 0 3
48551: RET
// export function SeeUnits ( side , units ) ; var i ; begin
48552: LD_INT 0
48554: PPUSH
48555: PPUSH
// result := false ;
48556: LD_ADDR_VAR 0 3
48560: PUSH
48561: LD_INT 0
48563: ST_TO_ADDR
// if not units then
48564: LD_VAR 0 2
48568: NOT
48569: IFFALSE 48573
// exit ;
48571: GO 48618
// for i in units do
48573: LD_ADDR_VAR 0 4
48577: PUSH
48578: LD_VAR 0 2
48582: PUSH
48583: FOR_IN
48584: IFFALSE 48616
// if See ( side , i ) then
48586: LD_VAR 0 1
48590: PPUSH
48591: LD_VAR 0 4
48595: PPUSH
48596: CALL_OW 292
48600: IFFALSE 48614
// begin result := true ;
48602: LD_ADDR_VAR 0 3
48606: PUSH
48607: LD_INT 1
48609: ST_TO_ADDR
// exit ;
48610: POP
48611: POP
48612: GO 48618
// end ;
48614: GO 48583
48616: POP
48617: POP
// end ;
48618: LD_VAR 0 3
48622: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
48623: LD_INT 0
48625: PPUSH
48626: PPUSH
48627: PPUSH
48628: PPUSH
// if not unit or not points then
48629: LD_VAR 0 1
48633: NOT
48634: PUSH
48635: LD_VAR 0 2
48639: NOT
48640: OR
48641: IFFALSE 48645
// exit ;
48643: GO 48735
// dist := 99999 ;
48645: LD_ADDR_VAR 0 5
48649: PUSH
48650: LD_INT 99999
48652: ST_TO_ADDR
// for i in points do
48653: LD_ADDR_VAR 0 4
48657: PUSH
48658: LD_VAR 0 2
48662: PUSH
48663: FOR_IN
48664: IFFALSE 48733
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48666: LD_ADDR_VAR 0 6
48670: PUSH
48671: LD_VAR 0 1
48675: PPUSH
48676: LD_VAR 0 4
48680: PUSH
48681: LD_INT 1
48683: ARRAY
48684: PPUSH
48685: LD_VAR 0 4
48689: PUSH
48690: LD_INT 2
48692: ARRAY
48693: PPUSH
48694: CALL_OW 297
48698: ST_TO_ADDR
// if tmpDist < dist then
48699: LD_VAR 0 6
48703: PUSH
48704: LD_VAR 0 5
48708: LESS
48709: IFFALSE 48731
// begin result := i ;
48711: LD_ADDR_VAR 0 3
48715: PUSH
48716: LD_VAR 0 4
48720: ST_TO_ADDR
// dist := tmpDist ;
48721: LD_ADDR_VAR 0 5
48725: PUSH
48726: LD_VAR 0 6
48730: ST_TO_ADDR
// end ; end ;
48731: GO 48663
48733: POP
48734: POP
// end ;
48735: LD_VAR 0 3
48739: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
48740: LD_INT 0
48742: PPUSH
// uc_side := side ;
48743: LD_ADDR_OWVAR 20
48747: PUSH
48748: LD_VAR 0 1
48752: ST_TO_ADDR
// uc_nation := 3 ;
48753: LD_ADDR_OWVAR 21
48757: PUSH
48758: LD_INT 3
48760: ST_TO_ADDR
// vc_chassis := 25 ;
48761: LD_ADDR_OWVAR 37
48765: PUSH
48766: LD_INT 25
48768: ST_TO_ADDR
// vc_engine := engine_siberite ;
48769: LD_ADDR_OWVAR 39
48773: PUSH
48774: LD_INT 3
48776: ST_TO_ADDR
// vc_control := control_computer ;
48777: LD_ADDR_OWVAR 38
48781: PUSH
48782: LD_INT 3
48784: ST_TO_ADDR
// vc_weapon := 59 ;
48785: LD_ADDR_OWVAR 40
48789: PUSH
48790: LD_INT 59
48792: ST_TO_ADDR
// result := CreateVehicle ;
48793: LD_ADDR_VAR 0 5
48797: PUSH
48798: CALL_OW 45
48802: ST_TO_ADDR
// SetDir ( result , d ) ;
48803: LD_VAR 0 5
48807: PPUSH
48808: LD_VAR 0 4
48812: PPUSH
48813: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
48817: LD_VAR 0 5
48821: PPUSH
48822: LD_VAR 0 2
48826: PPUSH
48827: LD_VAR 0 3
48831: PPUSH
48832: LD_INT 0
48834: PPUSH
48835: CALL_OW 48
// end ;
48839: LD_VAR 0 5
48843: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
48844: LD_INT 0
48846: PPUSH
48847: PPUSH
48848: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
48849: LD_ADDR_VAR 0 2
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
48872: LD_VAR 0 1
48876: NOT
48877: PUSH
48878: LD_VAR 0 1
48882: PPUSH
48883: CALL_OW 264
48887: PUSH
48888: LD_INT 12
48890: PUSH
48891: LD_INT 51
48893: PUSH
48894: LD_INT 32
48896: PUSH
48897: LD_INT 89
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: IN
48906: NOT
48907: OR
48908: IFFALSE 48912
// exit ;
48910: GO 49010
// for i := 1 to 3 do
48912: LD_ADDR_VAR 0 3
48916: PUSH
48917: DOUBLE
48918: LD_INT 1
48920: DEC
48921: ST_TO_ADDR
48922: LD_INT 3
48924: PUSH
48925: FOR_TO
48926: IFFALSE 49008
// begin tmp := GetCargo ( cargo , i ) ;
48928: LD_ADDR_VAR 0 4
48932: PUSH
48933: LD_VAR 0 1
48937: PPUSH
48938: LD_VAR 0 3
48942: PPUSH
48943: CALL_OW 289
48947: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
48948: LD_ADDR_VAR 0 2
48952: PUSH
48953: LD_VAR 0 2
48957: PPUSH
48958: LD_VAR 0 3
48962: PPUSH
48963: LD_VAR 0 4
48967: PPUSH
48968: CALL_OW 1
48972: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
48973: LD_ADDR_VAR 0 2
48977: PUSH
48978: LD_VAR 0 2
48982: PPUSH
48983: LD_INT 4
48985: PPUSH
48986: LD_VAR 0 2
48990: PUSH
48991: LD_INT 4
48993: ARRAY
48994: PUSH
48995: LD_VAR 0 4
48999: PLUS
49000: PPUSH
49001: CALL_OW 1
49005: ST_TO_ADDR
// end ;
49006: GO 48925
49008: POP
49009: POP
// end ;
49010: LD_VAR 0 2
49014: RET
// export function Length ( array ) ; begin
49015: LD_INT 0
49017: PPUSH
// result := array + 0 ;
49018: LD_ADDR_VAR 0 2
49022: PUSH
49023: LD_VAR 0 1
49027: PUSH
49028: LD_INT 0
49030: PLUS
49031: ST_TO_ADDR
// end ;
49032: LD_VAR 0 2
49036: RET
// export function PrepareArray ( array ) ; begin
49037: LD_INT 0
49039: PPUSH
// result := array diff 0 ;
49040: LD_ADDR_VAR 0 2
49044: PUSH
49045: LD_VAR 0 1
49049: PUSH
49050: LD_INT 0
49052: DIFF
49053: ST_TO_ADDR
// if not result [ 1 ] then
49054: LD_VAR 0 2
49058: PUSH
49059: LD_INT 1
49061: ARRAY
49062: NOT
49063: IFFALSE 49083
// result := Delete ( result , 1 ) ;
49065: LD_ADDR_VAR 0 2
49069: PUSH
49070: LD_VAR 0 2
49074: PPUSH
49075: LD_INT 1
49077: PPUSH
49078: CALL_OW 3
49082: ST_TO_ADDR
// end ;
49083: LD_VAR 0 2
49087: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
49088: LD_INT 0
49090: PPUSH
49091: PPUSH
49092: PPUSH
49093: PPUSH
// sibRocketRange := 25 ;
49094: LD_ADDR_VAR 0 6
49098: PUSH
49099: LD_INT 25
49101: ST_TO_ADDR
// result := false ;
49102: LD_ADDR_VAR 0 4
49106: PUSH
49107: LD_INT 0
49109: ST_TO_ADDR
// for i := 0 to 5 do
49110: LD_ADDR_VAR 0 5
49114: PUSH
49115: DOUBLE
49116: LD_INT 0
49118: DEC
49119: ST_TO_ADDR
49120: LD_INT 5
49122: PUSH
49123: FOR_TO
49124: IFFALSE 49191
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
49126: LD_VAR 0 1
49130: PPUSH
49131: LD_VAR 0 5
49135: PPUSH
49136: LD_VAR 0 6
49140: PPUSH
49141: CALL_OW 272
49145: PPUSH
49146: LD_VAR 0 2
49150: PPUSH
49151: LD_VAR 0 5
49155: PPUSH
49156: LD_VAR 0 6
49160: PPUSH
49161: CALL_OW 273
49165: PPUSH
49166: LD_VAR 0 3
49170: PPUSH
49171: CALL_OW 309
49175: IFFALSE 49189
// begin result := true ;
49177: LD_ADDR_VAR 0 4
49181: PUSH
49182: LD_INT 1
49184: ST_TO_ADDR
// exit ;
49185: POP
49186: POP
49187: GO 49193
// end ;
49189: GO 49123
49191: POP
49192: POP
// end ;
49193: LD_VAR 0 4
49197: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
49198: LD_INT 0
49200: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
49201: LD_VAR 0 1
49205: PPUSH
49206: LD_VAR 0 2
49210: PPUSH
49211: LD_INT 0
49213: PPUSH
49214: LD_INT 0
49216: PPUSH
49217: LD_INT 1
49219: PPUSH
49220: LD_INT 0
49222: PPUSH
49223: CALL_OW 587
// end ;
49227: LD_VAR 0 3
49231: RET
// export function CenterOnNow ( unit ) ; begin
49232: LD_INT 0
49234: PPUSH
// result := IsInUnit ( unit ) ;
49235: LD_ADDR_VAR 0 2
49239: PUSH
49240: LD_VAR 0 1
49244: PPUSH
49245: CALL_OW 310
49249: ST_TO_ADDR
// if not result then
49250: LD_VAR 0 2
49254: NOT
49255: IFFALSE 49267
// result := unit ;
49257: LD_ADDR_VAR 0 2
49261: PUSH
49262: LD_VAR 0 1
49266: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
49267: LD_VAR 0 1
49271: PPUSH
49272: CALL_OW 87
// end ;
49276: LD_VAR 0 2
49280: RET
// export function ComMoveHex ( unit , hex ) ; begin
49281: LD_INT 0
49283: PPUSH
// if not hex then
49284: LD_VAR 0 2
49288: NOT
49289: IFFALSE 49293
// exit ;
49291: GO 49346
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
49293: LD_VAR 0 2
49297: PUSH
49298: LD_INT 1
49300: ARRAY
49301: PPUSH
49302: LD_VAR 0 2
49306: PUSH
49307: LD_INT 2
49309: ARRAY
49310: PPUSH
49311: CALL_OW 428
49315: IFFALSE 49319
// exit ;
49317: GO 49346
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
49319: LD_VAR 0 1
49323: PPUSH
49324: LD_VAR 0 2
49328: PUSH
49329: LD_INT 1
49331: ARRAY
49332: PPUSH
49333: LD_VAR 0 2
49337: PUSH
49338: LD_INT 2
49340: ARRAY
49341: PPUSH
49342: CALL_OW 111
// end ;
49346: LD_VAR 0 3
49350: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
49351: LD_INT 0
49353: PPUSH
49354: PPUSH
49355: PPUSH
// if not unit or not enemy then
49356: LD_VAR 0 1
49360: NOT
49361: PUSH
49362: LD_VAR 0 2
49366: NOT
49367: OR
49368: IFFALSE 49372
// exit ;
49370: GO 49496
// x := GetX ( enemy ) ;
49372: LD_ADDR_VAR 0 4
49376: PUSH
49377: LD_VAR 0 2
49381: PPUSH
49382: CALL_OW 250
49386: ST_TO_ADDR
// y := GetY ( enemy ) ;
49387: LD_ADDR_VAR 0 5
49391: PUSH
49392: LD_VAR 0 2
49396: PPUSH
49397: CALL_OW 251
49401: ST_TO_ADDR
// if ValidHex ( x , y ) then
49402: LD_VAR 0 4
49406: PPUSH
49407: LD_VAR 0 5
49411: PPUSH
49412: CALL_OW 488
49416: IFFALSE 49496
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
49418: LD_VAR 0 2
49422: PPUSH
49423: CALL_OW 247
49427: PUSH
49428: LD_INT 3
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: IN
49438: PUSH
49439: LD_VAR 0 1
49443: PPUSH
49444: CALL_OW 255
49448: PPUSH
49449: LD_VAR 0 2
49453: PPUSH
49454: CALL_OW 292
49458: AND
49459: IFFALSE 49477
// ComAttackUnit ( unit , enemy ) else
49461: LD_VAR 0 1
49465: PPUSH
49466: LD_VAR 0 2
49470: PPUSH
49471: CALL_OW 115
49475: GO 49496
// ComAgressiveMove ( unit , x , y ) ;
49477: LD_VAR 0 1
49481: PPUSH
49482: LD_VAR 0 4
49486: PPUSH
49487: LD_VAR 0 5
49491: PPUSH
49492: CALL_OW 114
// end ; end_of_file
49496: LD_VAR 0 3
49500: RET
