// starting begin ResetFog ;
   0: CALL_OW 335
// MC_Init ( ) ;
   4: CALL 414 0 0
// PrepareTestBase ;
   8: CALL 113 0 0
// mc_debug := true ;
  12: LD_ADDR_EXP 5
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// MC_Start ( ) ;
  20: CALL 438 0 0
// end ;
  24: END
// export function MC_CustomMacro ( ) ; begin
  25: LD_INT 0
  27: PPUSH
// MC_Add ( 1 , FilterAllUnits ( [ f_side , 1 ] ) ) ;
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 22
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: EMPTY
  38: LIST
  39: LIST
  40: PPUSH
  41: CALL_OW 69
  45: PPUSH
  46: CALL 493 0 2
// MC_SetParkingArea ( 1 , parkingArea1 ) ;
  50: LD_INT 1
  52: PPUSH
  53: LD_INT 4
  55: PPUSH
  56: CALL 2313 0 2
// MC_SetCratesArea ( 1 , cratesArea1 ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 2
  65: PPUSH
  66: CALL 1890 0 2
// MC_SetScanArea ( 1 , baseArea1 ) ;
  70: LD_INT 1
  72: PPUSH
  73: LD_INT 1
  75: PPUSH
  76: CALL 2362 0 2
// MC_SetBuildingList ( 1 , [ [ b_barracks , 37 , 33 , 5 ] ] ) ;
  80: LD_INT 1
  82: PPUSH
  83: LD_INT 5
  85: PUSH
  86: LD_INT 37
  88: PUSH
  89: LD_INT 33
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: EMPTY
 102: LIST
 103: PPUSH
 104: CALL 990 0 2
// end ;
 108: LD_VAR 0 1
 112: RET
// export function PrepareTestBase ; var i , un ; begin
 113: LD_INT 0
 115: PPUSH
 116: PPUSH
 117: PPUSH
// InitHc_All ;
 118: CALL_OW 584
// uc_side := 1 ;
 122: LD_ADDR_OWVAR 20
 126: PUSH
 127: LD_INT 1
 129: ST_TO_ADDR
// uc_nation := 1 ;
 130: LD_ADDR_OWVAR 21
 134: PUSH
 135: LD_INT 1
 137: ST_TO_ADDR
// for i := 1 to 12 do
 138: LD_ADDR_VAR 0 2
 142: PUSH
 143: DOUBLE
 144: LD_INT 1
 146: DEC
 147: ST_TO_ADDR
 148: LD_INT 12
 150: PUSH
 151: FOR_TO
 152: IFFALSE 219
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
 154: LD_INT 0
 156: PPUSH
 157: LD_VAR 0 2
 161: PUSH
 162: LD_INT 4
 164: MOD
 165: PUSH
 166: LD_INT 1
 168: PLUS
 169: PPUSH
 170: LD_INT 3
 172: PPUSH
 173: CALL_OW 380
// un := CreateHuman ;
 177: LD_ADDR_VAR 0 3
 181: PUSH
 182: CALL_OW 44
 186: ST_TO_ADDR
// PlaceUnitXYR ( un , 21 , 16 , 8 , false ) ;
 187: LD_VAR 0 3
 191: PPUSH
 192: LD_INT 21
 194: PPUSH
 195: LD_INT 16
 197: PPUSH
 198: LD_INT 8
 200: PPUSH
 201: LD_INT 0
 203: PPUSH
 204: CALL_OW 50
// ComHold ( un ) ;
 208: LD_VAR 0 3
 212: PPUSH
 213: CALL_OW 140
// end ;
 217: GO 151
 219: POP
 220: POP
// end ;
 221: LD_VAR 0 1
 225: RET
// every 0 0$50 trigger mc_debug do
 226: LD_EXP 5
 230: IFFALSE 257
 232: GO 234
 234: DISABLE
// begin enable ;
 235: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea1 , true ) ;
 236: LD_INT 1
 238: PPUSH
 239: LD_INT 5
 241: PPUSH
 242: CALL_OW 12
 246: PPUSH
 247: LD_INT 2
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: CALL_OW 55
// end ;
 257: END
// every 0 0$1 do
 258: GO 260
 260: DISABLE
// display_strings := GetDirFromHex ( 42 , 13 , 40 , 18 ) ; end_of_file
 261: LD_ADDR_OWVAR 47
 265: PUSH
 266: LD_INT 42
 268: PPUSH
 269: LD_INT 13
 271: PPUSH
 272: LD_INT 40
 274: PPUSH
 275: LD_INT 18
 277: PPUSH
 278: CALL 46030 0 4
 282: ST_TO_ADDR
 283: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ;
 284: LD_VAR 0 1
 288: PPUSH
 289: LD_VAR 0 2
 293: PPUSH
 294: LD_VAR 0 3
 298: PPUSH
 299: LD_VAR 0 4
 303: PPUSH
 304: LD_VAR 0 5
 308: PPUSH
 309: LD_VAR 0 6
 313: PPUSH
 314: LD_VAR 0 7
 318: PPUSH
 319: CALL 4741 0 7
// end ;
 323: PPOPN 7
 325: END
// on ClassChanged ( unit , old_class , new_class ) do begin MCE_ClassChanged ( unit , old_class , new_class ) ;
 326: LD_VAR 0 1
 330: PPUSH
 331: LD_VAR 0 2
 335: PPUSH
 336: LD_VAR 0 3
 340: PPUSH
 341: CALL 4794 0 3
// end ;
 345: PPOPN 3
 347: END
// on UnitDestroyed ( unit ) do begin MCE_UnitDestroyed ( unit ) ;
 348: LD_VAR 0 1
 352: PPUSH
 353: CALL 4816 0 1
// end ;
 357: PPOPN 1
 359: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ;
 360: LD_VAR 0 1
 364: PPUSH
 365: LD_VAR 0 2
 369: PPUSH
 370: LD_VAR 0 3
 374: PPUSH
 375: LD_VAR 0 4
 379: PPUSH
 380: CALL 4961 0 4
// end ;
 384: PPOPN 4
 386: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 387: LD_VAR 0 1
 391: PPUSH
 392: CALL 5034 0 1
// end ;
 396: PPOPN 1
 398: END
// on UpgradeComplete ( building ) do begin MCE_BuildingUpgradeComplete ( building ) ;
 399: LD_VAR 0 1
 403: PPUSH
 404: CALL 5753 0 1
// end ;
 408: PPOPN 1
 410: END
// on CommandUnitXY ( comand , unit , x , y , z ) do begin end ; end_of_file
 411: PPOPN 5
 413: END
// export function MC_Init ( ) ; begin
 414: LD_INT 0
 416: PPUSH
// MC_InitVariables ( ) ;
 417: CALL 6014 0 0
// MCE_InitEvents ( ) ;
 421: CALL 4717 0 0
// MCT_InitTags ( ) ;
 425: CALL 6190 0 0
// MCTM_InitTaskManager ( ) end ;
 429: CALL 7777 0 0
 433: LD_VAR 0 1
 437: RET
// export function MC_Start ( ) ; begin
 438: LD_INT 0
 440: PPUSH
// mc_active := true ;
 441: LD_ADDR_EXP 4
 445: PUSH
 446: LD_INT 1
 448: ST_TO_ADDR
// MC_CustomMacro ( ) ;
 449: CALL 25 0 0
// MCE_SailEventCustom ( mce_start , 0 , 0 , 0 , 0 , 0 , 0 ) ;
 453: LD_EXP 1
 457: PPUSH
 458: LD_INT 0
 460: PPUSH
 461: LD_INT 0
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: LD_INT 0
 472: PPUSH
 473: LD_INT 0
 475: PPUSH
 476: CALL 4741 0 7
// end ;
 480: LD_VAR 0 1
 484: RET
// export function MC_Kill ( base ) ; begin
 485: LD_INT 0
 487: PPUSH
// end ;
 488: LD_VAR 0 2
 492: RET
// export function MC_Add ( side , units ) ; begin
 493: LD_INT 0
 495: PPUSH
// mc_bases := Replace ( mc_bases , mc_bases + 1 , side ) ;
 496: LD_ADDR_EXP 6
 500: PUSH
 501: LD_EXP 6
 505: PPUSH
 506: LD_EXP 6
 510: PUSH
 511: LD_INT 1
 513: PLUS
 514: PPUSH
 515: LD_VAR 0 1
 519: PPUSH
 520: CALL_OW 1
 524: ST_TO_ADDR
// mc_task := Replace ( mc_task , mc_task + 1 , [ ] ) ;
 525: LD_ADDR_EXP 8
 529: PUSH
 530: LD_EXP 8
 534: PPUSH
 535: LD_EXP 8
 539: PUSH
 540: LD_INT 1
 542: PLUS
 543: PPUSH
 544: EMPTY
 545: PPUSH
 546: CALL_OW 1
 550: ST_TO_ADDR
// mc_people := Replace ( mc_people , mc_people + 1 , UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
 551: LD_ADDR_EXP 9
 555: PUSH
 556: LD_EXP 9
 560: PPUSH
 561: LD_EXP 9
 565: PUSH
 566: LD_INT 1
 568: PLUS
 569: PPUSH
 570: LD_VAR 0 2
 574: PPUSH
 575: LD_INT 21
 577: PUSH
 578: LD_INT 1
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 3
 587: PUSH
 588: LD_INT 23
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: EMPTY
 599: LIST
 600: LIST
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: PPUSH
 606: CALL_OW 72
 610: PPUSH
 611: CALL_OW 1
 615: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , mc_ape + 1 , UnitFilter ( units , [ f_nation , 0 ] ) ) ;
 616: LD_ADDR_EXP 19
 620: PUSH
 621: LD_EXP 19
 625: PPUSH
 626: LD_EXP 19
 630: PUSH
 631: LD_INT 1
 633: PLUS
 634: PPUSH
 635: LD_VAR 0 2
 639: PPUSH
 640: LD_INT 23
 642: PUSH
 643: LD_INT 0
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PPUSH
 650: CALL_OW 72
 654: PPUSH
 655: CALL_OW 1
 659: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , mc_vehicles + 1 , UnitFilter ( units , [ f_type , unit_vehicle ] ) ) ;
 660: LD_ADDR_EXP 11
 664: PUSH
 665: LD_EXP 11
 669: PPUSH
 670: LD_EXP 11
 674: PUSH
 675: LD_INT 1
 677: PLUS
 678: PPUSH
 679: LD_VAR 0 2
 683: PPUSH
 684: LD_INT 21
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PPUSH
 694: CALL_OW 72
 698: PPUSH
 699: CALL_OW 1
 703: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , mc_buildings + 1 , UnitFilter ( units , [ f_type , unit_building ] ) ) ;
 704: LD_ADDR_EXP 10
 708: PUSH
 709: LD_EXP 10
 713: PPUSH
 714: LD_EXP 10
 718: PUSH
 719: LD_INT 1
 721: PLUS
 722: PPUSH
 723: LD_VAR 0 2
 727: PPUSH
 728: LD_INT 21
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: PPUSH
 738: CALL_OW 72
 742: PPUSH
 743: CALL_OW 1
 747: ST_TO_ADDR
// mc_defense_status := Replace ( mc_defense_status , mc_defense_status + 1 , false ) ;
 748: LD_ADDR_EXP 16
 752: PUSH
 753: LD_EXP 16
 757: PPUSH
 758: LD_EXP 16
 762: PUSH
 763: LD_INT 1
 765: PLUS
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 1
 774: ST_TO_ADDR
// end ;
 775: LD_VAR 0 3
 779: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
 780: LD_INT 0
 782: PPUSH
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
// if not mc_bases [ base ] then
 788: LD_EXP 6
 792: PUSH
 793: LD_VAR 0 1
 797: ARRAY
 798: NOT
 799: IFFALSE 803
// exit ;
 801: GO 985
// tmp := [ ] ;
 803: LD_ADDR_VAR 0 6
 807: PUSH
 808: EMPTY
 809: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
 810: LD_ADDR_VAR 0 7
 814: PUSH
 815: LD_VAR 0 3
 819: PPUSH
 820: LD_INT 0
 822: PPUSH
 823: CALL_OW 517
 827: ST_TO_ADDR
// if not list then
 828: LD_VAR 0 7
 832: NOT
 833: IFFALSE 837
// exit ;
 835: GO 985
// for i = 1 to amount do
 837: LD_ADDR_VAR 0 5
 841: PUSH
 842: DOUBLE
 843: LD_INT 1
 845: DEC
 846: ST_TO_ADDR
 847: LD_VAR 0 2
 851: PUSH
 852: FOR_TO
 853: IFFALSE 933
// begin x := rand ( 1 , list [ 1 ] ) ;
 855: LD_ADDR_VAR 0 8
 859: PUSH
 860: LD_INT 1
 862: PPUSH
 863: LD_VAR 0 7
 867: PUSH
 868: LD_INT 1
 870: ARRAY
 871: PPUSH
 872: CALL_OW 12
 876: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
 877: LD_ADDR_VAR 0 6
 881: PUSH
 882: LD_VAR 0 6
 886: PPUSH
 887: LD_VAR 0 5
 891: PPUSH
 892: LD_VAR 0 7
 896: PUSH
 897: LD_INT 1
 899: ARRAY
 900: PUSH
 901: LD_VAR 0 8
 905: ARRAY
 906: PUSH
 907: LD_VAR 0 7
 911: PUSH
 912: LD_INT 2
 914: ARRAY
 915: PUSH
 916: LD_VAR 0 8
 920: ARRAY
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: PPUSH
 926: CALL_OW 1
 930: ST_TO_ADDR
// end ;
 931: GO 852
 933: POP
 934: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
 935: LD_ADDR_EXP 12
 939: PUSH
 940: LD_EXP 12
 944: PPUSH
 945: LD_VAR 0 1
 949: PPUSH
 950: LD_VAR 0 6
 954: PPUSH
 955: CALL_OW 1
 959: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
 960: LD_ADDR_EXP 13
 964: PUSH
 965: LD_EXP 13
 969: PPUSH
 970: LD_VAR 0 1
 974: PPUSH
 975: LD_VAR 0 3
 979: PPUSH
 980: CALL_OW 1
 984: ST_TO_ADDR
// end ;
 985: LD_VAR 0 4
 989: RET
// export function MC_SetBuildingList ( base , construct_list ) ; var i , btype ; begin
 990: LD_INT 0
 992: PPUSH
 993: PPUSH
 994: PPUSH
// if not construct_list then
 995: LD_VAR 0 2
 999: NOT
1000: IFFALSE 1004
// exit ;
1002: GO 1230
// for i := 1 to construct_list do
1004: LD_ADDR_VAR 0 4
1008: PUSH
1009: DOUBLE
1010: LD_INT 1
1012: DEC
1013: ST_TO_ADDR
1014: LD_VAR 0 2
1018: PUSH
1019: FOR_TO
1020: IFFALSE 1203
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1022: LD_VAR 0 2
1026: PUSH
1027: LD_VAR 0 4
1031: ARRAY
1032: PUSH
1033: LD_INT 1
1035: ARRAY
1036: PUSH
1037: LD_INT 3
1039: PUSH
1040: LD_INT 5
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: IN
1047: IFFALSE 1201
// begin case construct_list [ i ] [ 1 ] of b_factory :
1049: LD_VAR 0 2
1053: PUSH
1054: LD_VAR 0 4
1058: ARRAY
1059: PUSH
1060: LD_INT 1
1062: ARRAY
1063: PUSH
1064: LD_INT 3
1066: DOUBLE
1067: EQUAL
1068: IFTRUE 1072
1070: GO 1083
1072: POP
// btype := b_workshop ; b_barracks :
1073: LD_ADDR_VAR 0 5
1077: PUSH
1078: LD_INT 2
1080: ST_TO_ADDR
1081: GO 1103
1083: LD_INT 5
1085: DOUBLE
1086: EQUAL
1087: IFTRUE 1091
1089: GO 1102
1091: POP
// btype := b_armoury ; end ;
1092: LD_ADDR_VAR 0 5
1096: PUSH
1097: LD_INT 4
1099: ST_TO_ADDR
1100: GO 1103
1102: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1103: LD_ADDR_VAR 0 2
1107: PUSH
1108: LD_VAR 0 2
1112: PPUSH
1113: LD_VAR 0 4
1117: PPUSH
1118: LD_VAR 0 2
1122: PUSH
1123: LD_VAR 0 4
1127: ARRAY
1128: PPUSH
1129: LD_INT 5
1131: PPUSH
1132: LD_VAR 0 2
1136: PUSH
1137: LD_VAR 0 4
1141: ARRAY
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PPUSH
1147: CALL_OW 1
1151: PPUSH
1152: CALL_OW 1
1156: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1157: LD_ADDR_VAR 0 2
1161: PUSH
1162: LD_VAR 0 2
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: LD_VAR 0 2
1176: PUSH
1177: LD_VAR 0 4
1181: ARRAY
1182: PPUSH
1183: LD_INT 1
1185: PPUSH
1186: LD_VAR 0 5
1190: PPUSH
1191: CALL_OW 1
1195: PPUSH
1196: CALL_OW 1
1200: ST_TO_ADDR
// end ;
1201: GO 1019
1203: POP
1204: POP
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
1205: LD_ADDR_EXP 14
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_VAR 0 1
1219: PPUSH
1220: LD_VAR 0 2
1224: PPUSH
1225: CALL_OW 1
1229: ST_TO_ADDR
// end ;
1230: LD_VAR 0 3
1234: RET
// export function MC_InsertBuildingList ( base , construct_list ) ; var i , btype ; begin
1235: LD_INT 0
1237: PPUSH
1238: PPUSH
1239: PPUSH
// if not construct_list then
1240: LD_VAR 0 2
1244: NOT
1245: IFFALSE 1249
// exit ;
1247: GO 1487
// for i := 1 to construct_list do
1249: LD_ADDR_VAR 0 4
1253: PUSH
1254: DOUBLE
1255: LD_INT 1
1257: DEC
1258: ST_TO_ADDR
1259: LD_VAR 0 2
1263: PUSH
1264: FOR_TO
1265: IFFALSE 1448
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1267: LD_VAR 0 2
1271: PUSH
1272: LD_VAR 0 4
1276: ARRAY
1277: PUSH
1278: LD_INT 1
1280: ARRAY
1281: PUSH
1282: LD_INT 3
1284: PUSH
1285: LD_INT 5
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: IN
1292: IFFALSE 1446
// begin case construct_list [ i ] [ 1 ] of b_factory :
1294: LD_VAR 0 2
1298: PUSH
1299: LD_VAR 0 4
1303: ARRAY
1304: PUSH
1305: LD_INT 1
1307: ARRAY
1308: PUSH
1309: LD_INT 3
1311: DOUBLE
1312: EQUAL
1313: IFTRUE 1317
1315: GO 1328
1317: POP
// btype := b_workshop ; b_barracks :
1318: LD_ADDR_VAR 0 5
1322: PUSH
1323: LD_INT 2
1325: ST_TO_ADDR
1326: GO 1348
1328: LD_INT 5
1330: DOUBLE
1331: EQUAL
1332: IFTRUE 1336
1334: GO 1347
1336: POP
// btype := b_armoury ; end ;
1337: LD_ADDR_VAR 0 5
1341: PUSH
1342: LD_INT 4
1344: ST_TO_ADDR
1345: GO 1348
1347: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1348: LD_ADDR_VAR 0 2
1352: PUSH
1353: LD_VAR 0 2
1357: PPUSH
1358: LD_VAR 0 4
1362: PPUSH
1363: LD_VAR 0 2
1367: PUSH
1368: LD_VAR 0 4
1372: ARRAY
1373: PPUSH
1374: LD_INT 5
1376: PPUSH
1377: LD_VAR 0 2
1381: PUSH
1382: LD_VAR 0 4
1386: ARRAY
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PPUSH
1392: CALL_OW 1
1396: PPUSH
1397: CALL_OW 1
1401: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1402: LD_ADDR_VAR 0 2
1406: PUSH
1407: LD_VAR 0 2
1411: PPUSH
1412: LD_VAR 0 4
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_VAR 0 4
1426: ARRAY
1427: PPUSH
1428: LD_INT 1
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 1
1440: PPUSH
1441: CALL_OW 1
1445: ST_TO_ADDR
// end ;
1446: GO 1264
1448: POP
1449: POP
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union construct_list ) ;
1450: LD_ADDR_EXP 14
1454: PUSH
1455: LD_EXP 14
1459: PPUSH
1460: LD_VAR 0 1
1464: PPUSH
1465: LD_EXP 14
1469: PUSH
1470: LD_VAR 0 1
1474: ARRAY
1475: PUSH
1476: LD_VAR 0 2
1480: UNION
1481: PPUSH
1482: CALL_OW 1
1486: ST_TO_ADDR
// end ;
1487: LD_VAR 0 3
1491: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
1492: LD_INT 0
1494: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , produce_list ) ;
1495: LD_ADDR_EXP 15
1499: PUSH
1500: LD_EXP 15
1504: PPUSH
1505: LD_VAR 0 1
1509: PPUSH
1510: LD_VAR 0 2
1514: PPUSH
1515: CALL_OW 1
1519: ST_TO_ADDR
// end ;
1520: LD_VAR 0 3
1524: RET
// export function MC_InsertProduceList ( base , components ) ; begin
1525: LD_INT 0
1527: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , mc_produce_list [ base ] ^ components ) ;
1528: LD_ADDR_EXP 15
1532: PUSH
1533: LD_EXP 15
1537: PPUSH
1538: LD_VAR 0 1
1542: PPUSH
1543: LD_EXP 15
1547: PUSH
1548: LD_VAR 0 1
1552: ARRAY
1553: PUSH
1554: LD_VAR 0 2
1558: ADD
1559: PPUSH
1560: CALL_OW 1
1564: ST_TO_ADDR
// end ;
1565: LD_VAR 0 3
1569: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
1570: LD_INT 0
1572: PPUSH
// mc_defender := Replace ( mc_defender , base , deflist ) ;
1573: LD_ADDR_EXP 17
1577: PUSH
1578: LD_EXP 17
1582: PPUSH
1583: LD_VAR 0 1
1587: PPUSH
1588: LD_VAR 0 2
1592: PPUSH
1593: CALL_OW 1
1597: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
1598: LD_ADDR_EXP 18
1602: PUSH
1603: LD_EXP 18
1607: PPUSH
1608: LD_VAR 0 1
1612: PPUSH
1613: LD_VAR 0 2
1617: PUSH
1618: LD_INT 0
1620: PLUS
1621: PPUSH
1622: CALL_OW 1
1626: ST_TO_ADDR
// end ;
1627: LD_VAR 0 3
1631: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
1632: LD_INT 0
1634: PPUSH
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
1635: LD_ADDR_EXP 18
1639: PUSH
1640: LD_EXP 18
1644: PPUSH
1645: LD_VAR 0 1
1649: PPUSH
1650: LD_VAR 0 2
1654: PPUSH
1655: CALL_OW 1
1659: ST_TO_ADDR
// end ;
1660: LD_VAR 0 3
1664: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; begin
1665: LD_INT 0
1667: PPUSH
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
1668: LD_ADDR_EXP 21
1672: PUSH
1673: LD_EXP 21
1677: PPUSH
1678: LD_VAR 0 1
1682: PUSH
1683: LD_EXP 21
1687: PUSH
1688: LD_VAR 0 1
1692: ARRAY
1693: PUSH
1694: LD_INT 1
1696: PLUS
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PPUSH
1702: LD_VAR 0 1
1706: PUSH
1707: LD_VAR 0 2
1711: PUSH
1712: LD_VAR 0 3
1716: PUSH
1717: LD_VAR 0 4
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: PPUSH
1728: CALL 12926 0 3
1732: ST_TO_ADDR
// end ;
1733: LD_VAR 0 5
1737: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
1738: LD_INT 0
1740: PPUSH
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
1741: LD_ADDR_EXP 22
1745: PUSH
1746: LD_EXP 22
1750: PPUSH
1751: LD_VAR 0 1
1755: PPUSH
1756: LD_VAR 0 2
1760: PPUSH
1761: CALL_OW 1
1765: ST_TO_ADDR
// end ;
1766: LD_VAR 0 3
1770: RET
// export function MC_SetTame ( base , area ) ; begin
1771: LD_INT 0
1773: PPUSH
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
1774: LD_ADDR_EXP 23
1778: PUSH
1779: LD_EXP 23
1783: PPUSH
1784: LD_VAR 0 1
1788: PPUSH
1789: LD_VAR 0 2
1793: PPUSH
1794: CALL_OW 1
1798: ST_TO_ADDR
// end ;
1799: LD_VAR 0 3
1803: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
1804: LD_INT 0
1806: PPUSH
1807: PPUSH
// if not base or not kinds then
1808: LD_VAR 0 1
1812: NOT
1813: PUSH
1814: LD_VAR 0 2
1818: NOT
1819: OR
1820: IFFALSE 1824
// exit ;
1822: GO 1885
// for i in kinds do
1824: LD_ADDR_VAR 0 4
1828: PUSH
1829: LD_VAR 0 2
1833: PUSH
1834: FOR_IN
1835: IFFALSE 1883
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
1837: LD_ADDR_EXP 24
1841: PUSH
1842: LD_EXP 24
1846: PPUSH
1847: LD_VAR 0 1
1851: PUSH
1852: LD_EXP 24
1856: PUSH
1857: LD_VAR 0 1
1861: ARRAY
1862: PUSH
1863: LD_INT 1
1865: PLUS
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PPUSH
1871: LD_VAR 0 4
1875: PPUSH
1876: CALL 12926 0 3
1880: ST_TO_ADDR
1881: GO 1834
1883: POP
1884: POP
// end ;
1885: LD_VAR 0 3
1889: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
1890: LD_INT 0
1892: PPUSH
// if not mc_bases or not base or not areas then
1893: LD_EXP 6
1897: NOT
1898: PUSH
1899: LD_VAR 0 1
1903: NOT
1904: OR
1905: PUSH
1906: LD_VAR 0 2
1910: NOT
1911: OR
1912: IFFALSE 1916
// exit ;
1914: GO 1941
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
1916: LD_ADDR_EXP 25
1920: PUSH
1921: LD_EXP 25
1925: PPUSH
1926: LD_VAR 0 1
1930: PPUSH
1931: LD_VAR 0 2
1935: PPUSH
1936: CALL_OW 1
1940: ST_TO_ADDR
// end ;
1941: LD_VAR 0 3
1945: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
1946: LD_INT 0
1948: PPUSH
// if not mc_bases or not base or not teleports_exit then
1949: LD_EXP 6
1953: NOT
1954: PUSH
1955: LD_VAR 0 1
1959: NOT
1960: OR
1961: PUSH
1962: LD_VAR 0 2
1966: NOT
1967: OR
1968: IFFALSE 1972
// exit ;
1970: GO 1997
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
1972: LD_ADDR_EXP 26
1976: PUSH
1977: LD_EXP 26
1981: PPUSH
1982: LD_VAR 0 1
1986: PPUSH
1987: LD_VAR 0 2
1991: PPUSH
1992: CALL_OW 1
1996: ST_TO_ADDR
// end ;
1997: LD_VAR 0 3
2001: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
2002: LD_INT 0
2004: PPUSH
2005: PPUSH
2006: PPUSH
// if not base or not ext_list then
2007: LD_VAR 0 1
2011: NOT
2012: PUSH
2013: LD_VAR 0 5
2017: NOT
2018: OR
2019: IFFALSE 2023
// exit ;
2021: GO 2196
// tmp := GetFacExtXYD ( x , y , d ) ;
2023: LD_ADDR_VAR 0 8
2027: PUSH
2028: LD_VAR 0 2
2032: PPUSH
2033: LD_VAR 0 3
2037: PPUSH
2038: LD_VAR 0 4
2042: PPUSH
2043: CALL 42313 0 3
2047: ST_TO_ADDR
// if not tmp then
2048: LD_VAR 0 8
2052: NOT
2053: IFFALSE 2057
// exit ;
2055: GO 2196
// for i in tmp do
2057: LD_ADDR_VAR 0 7
2061: PUSH
2062: LD_VAR 0 8
2066: PUSH
2067: FOR_IN
2068: IFFALSE 2194
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
2070: LD_ADDR_EXP 14
2074: PUSH
2075: LD_EXP 14
2079: PPUSH
2080: LD_VAR 0 1
2084: PPUSH
2085: LD_EXP 14
2089: PUSH
2090: LD_VAR 0 1
2094: ARRAY
2095: PPUSH
2096: LD_EXP 14
2100: PUSH
2101: LD_VAR 0 1
2105: ARRAY
2106: PUSH
2107: LD_INT 1
2109: PLUS
2110: PPUSH
2111: LD_VAR 0 5
2115: PUSH
2116: LD_INT 1
2118: ARRAY
2119: PUSH
2120: LD_VAR 0 7
2124: PUSH
2125: LD_INT 1
2127: ARRAY
2128: PUSH
2129: LD_VAR 0 7
2133: PUSH
2134: LD_INT 2
2136: ARRAY
2137: PUSH
2138: LD_VAR 0 7
2142: PUSH
2143: LD_INT 3
2145: ARRAY
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: PPUSH
2153: CALL_OW 2
2157: PPUSH
2158: CALL_OW 1
2162: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
2163: LD_ADDR_VAR 0 5
2167: PUSH
2168: LD_VAR 0 5
2172: PPUSH
2173: LD_INT 1
2175: PPUSH
2176: CALL_OW 3
2180: ST_TO_ADDR
// if not ext_list then
2181: LD_VAR 0 5
2185: NOT
2186: IFFALSE 2192
// exit ;
2188: POP
2189: POP
2190: GO 2196
// end ;
2192: GO 2067
2194: POP
2195: POP
// end ;
2196: LD_VAR 0 6
2200: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
2201: LD_INT 0
2203: PPUSH
// if not mc_bases or not base or not weapon_list then
2204: LD_EXP 6
2208: NOT
2209: PUSH
2210: LD_VAR 0 1
2214: NOT
2215: OR
2216: PUSH
2217: LD_VAR 0 2
2221: NOT
2222: OR
2223: IFFALSE 2227
// exit ;
2225: GO 2252
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
2227: LD_ADDR_EXP 27
2231: PUSH
2232: LD_EXP 27
2236: PPUSH
2237: LD_VAR 0 1
2241: PPUSH
2242: LD_VAR 0 2
2246: PPUSH
2247: CALL_OW 1
2251: ST_TO_ADDR
// end ;
2252: LD_VAR 0 3
2256: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
2257: LD_INT 0
2259: PPUSH
// if not mc_bases or not base or not tech_list then
2260: LD_EXP 6
2264: NOT
2265: PUSH
2266: LD_VAR 0 1
2270: NOT
2271: OR
2272: PUSH
2273: LD_VAR 0 2
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 2308
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
2283: LD_ADDR_EXP 20
2287: PUSH
2288: LD_EXP 20
2292: PPUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL_OW 1
2307: ST_TO_ADDR
// end ;
2308: LD_VAR 0 3
2312: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
2313: LD_INT 0
2315: PPUSH
// if not parking_area or not base then
2316: LD_VAR 0 2
2320: NOT
2321: PUSH
2322: LD_VAR 0 1
2326: NOT
2327: OR
2328: IFFALSE 2332
// exit ;
2330: GO 2357
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
2332: LD_ADDR_EXP 28
2336: PUSH
2337: LD_EXP 28
2341: PPUSH
2342: LD_VAR 0 1
2346: PPUSH
2347: LD_VAR 0 2
2351: PPUSH
2352: CALL_OW 1
2356: ST_TO_ADDR
// end ;
2357: LD_VAR 0 3
2361: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
2362: LD_INT 0
2364: PPUSH
// if not base or not scan_area then
2365: LD_VAR 0 1
2369: NOT
2370: PUSH
2371: LD_VAR 0 2
2375: NOT
2376: OR
2377: IFFALSE 2381
// exit ;
2379: GO 2406
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
2381: LD_ADDR_EXP 29
2385: PUSH
2386: LD_EXP 29
2390: PPUSH
2391: LD_VAR 0 1
2395: PPUSH
2396: LD_VAR 0 2
2400: PPUSH
2401: CALL_OW 1
2405: ST_TO_ADDR
// end ; end_of_file
2406: LD_VAR 0 3
2410: RET
// export function MC_Monitor ( ) ; var i , active_players ; begin
2411: LD_INT 0
2413: PPUSH
2414: PPUSH
2415: PPUSH
// while mc_active do
2416: LD_EXP 4
2420: IFFALSE 2530
// begin wait ( 0 0$1 ) ;
2422: LD_INT 35
2424: PPUSH
2425: CALL_OW 67
// active_players := 0 ;
2429: LD_ADDR_VAR 0 3
2433: PUSH
2434: LD_INT 0
2436: ST_TO_ADDR
// for i := 1 to mc_bases do
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: DOUBLE
2443: LD_INT 1
2445: DEC
2446: ST_TO_ADDR
2447: LD_EXP 6
2451: PUSH
2452: FOR_TO
2453: IFFALSE 2511
// begin if MC_Exist ( i ) then
2455: LD_VAR 0 2
2459: PPUSH
2460: CALL 6447 0 1
2464: IFFALSE 2509
// begin MCE_SailEventCustom ( mce_monitor_base , i , 0 , 0 , 0 , 0 , 0 ) ;
2466: LD_EXP 2
2470: PPUSH
2471: LD_VAR 0 2
2475: PPUSH
2476: LD_INT 0
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL 4741 0 7
// active_players := active_players + 1 ;
2495: LD_ADDR_VAR 0 3
2499: PUSH
2500: LD_VAR 0 3
2504: PUSH
2505: LD_INT 1
2507: PLUS
2508: ST_TO_ADDR
// end ; end ;
2509: GO 2452
2511: POP
2512: POP
// if not active_players then
2513: LD_VAR 0 3
2517: NOT
2518: IFFALSE 2528
// mc_active := false ;
2520: LD_ADDR_EXP 4
2524: PUSH
2525: LD_INT 0
2527: ST_TO_ADDR
// end ;
2528: GO 2416
// end ;
2530: LD_VAR 0 1
2534: RET
// export function MC_MonitorBase ( base ) ; begin
2535: LD_INT 0
2537: PPUSH
// if not mc_people [ base ] then
2538: LD_EXP 9
2542: PUSH
2543: LD_VAR 0 1
2547: ARRAY
2548: NOT
2549: IFFALSE 2574
// mc_bases := Replace ( mc_bases , base , 0 ) ;
2551: LD_ADDR_EXP 6
2555: PUSH
2556: LD_EXP 6
2560: PPUSH
2561: LD_VAR 0 1
2565: PPUSH
2566: LD_INT 0
2568: PPUSH
2569: CALL_OW 1
2573: ST_TO_ADDR
// mc_danger := Replace ( mc_danger , base , DangerInArea ( mc_bases [ base ] , mc_scan_area [ base ] ) ) ;
2574: LD_ADDR_EXP 30
2578: PUSH
2579: LD_EXP 30
2583: PPUSH
2584: LD_VAR 0 1
2588: PPUSH
2589: LD_EXP 6
2593: PUSH
2594: LD_VAR 0 1
2598: ARRAY
2599: PPUSH
2600: LD_EXP 29
2604: PUSH
2605: LD_VAR 0 1
2609: ARRAY
2610: PPUSH
2611: CALL 15578 0 2
2615: PPUSH
2616: CALL_OW 1
2620: ST_TO_ADDR
// if mc_danger [ base ] then
2621: LD_EXP 30
2625: PUSH
2626: LD_VAR 0 1
2630: ARRAY
2631: IFFALSE 2644
// MC_Defend ( base ) else
2633: LD_VAR 0 1
2637: PPUSH
2638: CALL 2658 0 1
2642: GO 2653
// MC_TaskManager ( base ) ;
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL 2720 0 1
// end ;
2653: LD_VAR 0 2
2657: RET
// export function MC_Defend ( base ) ; var defender_vehicles ; begin
2658: LD_INT 0
2660: PPUSH
2661: PPUSH
// if mc_defense_status [ base ] then
2662: LD_EXP 16
2666: PUSH
2667: LD_VAR 0 1
2671: ARRAY
2672: IFFALSE 2676
// exit ;
2674: GO 2715
// mc_defense_status := Replace ( mc_defense_status , base , true ) ;
2676: LD_ADDR_EXP 16
2680: PUSH
2681: LD_EXP 16
2685: PPUSH
2686: LD_VAR 0 1
2690: PPUSH
2691: LD_INT 1
2693: PPUSH
2694: CALL_OW 1
2698: ST_TO_ADDR
// defender_vehicles := mc_defender [ base ] ;
2699: LD_ADDR_VAR 0 3
2703: PUSH
2704: LD_EXP 17
2708: PUSH
2709: LD_VAR 0 1
2713: ARRAY
2714: ST_TO_ADDR
// end ;
2715: LD_VAR 0 2
2719: RET
// export function MC_TaskManager ( base ) ; var crates_list ; begin
2720: LD_INT 0
2722: PPUSH
2723: PPUSH
// MC_CollectCrates ( base , GetListOfCratesInArea ( mc_crates_area [ base ] ) ) ;
2724: LD_VAR 0 1
2728: PPUSH
2729: LD_EXP 25
2733: PUSH
2734: LD_VAR 0 1
2738: ARRAY
2739: PPUSH
2740: CALL_OW 435
2744: PPUSH
2745: CALL 2763 0 2
// MC_Build ( base ) ;
2749: LD_VAR 0 1
2753: PPUSH
2754: CALL 4109 0 1
// end ;
2758: LD_VAR 0 2
2762: RET
// export function MC_CollectCrates ( base , crates ) ; var i , j , amount , cargo_bays , apes , engs , collectors , number_of_crates , driver , drivers , depot , mechanic_used ; begin
2763: LD_INT 0
2765: PPUSH
2766: PPUSH
2767: PPUSH
2768: PPUSH
2769: PPUSH
2770: PPUSH
2771: PPUSH
2772: PPUSH
2773: PPUSH
2774: PPUSH
2775: PPUSH
2776: PPUSH
2777: PPUSH
// if MCTM_HasActiveTask ( base , mctm_collect_crates ) or not crates or not MC_GetDepot ( base ) then
2778: LD_VAR 0 1
2782: PPUSH
2783: LD_EXP 36
2787: PPUSH
2788: CALL 7801 0 2
2792: PUSH
2793: LD_VAR 0 2
2797: NOT
2798: OR
2799: PUSH
2800: LD_VAR 0 1
2804: PPUSH
2805: CALL 7422 0 1
2809: NOT
2810: OR
2811: IFFALSE 2815
// exit ;
2813: GO 4104
// MCTM_SetActiveTask ( base , mctm_collect_crates ) ;
2815: LD_VAR 0 1
2819: PPUSH
2820: LD_EXP 36
2824: PPUSH
2825: CALL 7831 0 2
// collectors := [ ] ;
2829: LD_ADDR_VAR 0 10
2833: PUSH
2834: EMPTY
2835: ST_TO_ADDR
// cargo_bays := GetCargoBay ( mc_vehicles [ base ] ) ;
2836: LD_ADDR_VAR 0 7
2840: PUSH
2841: LD_EXP 11
2845: PUSH
2846: LD_VAR 0 1
2850: ARRAY
2851: PPUSH
2852: CALL 45936 0 1
2856: ST_TO_ADDR
// if cargo_bays then
2857: LD_VAR 0 7
2861: IFFALSE 3542
// begin collectors := collectors union cargo_bays ;
2863: LD_ADDR_VAR 0 10
2867: PUSH
2868: LD_VAR 0 10
2872: PUSH
2873: LD_VAR 0 7
2877: UNION
2878: ST_TO_ADDR
// while crates and collectors do
2879: LD_VAR 0 2
2883: PUSH
2884: LD_VAR 0 10
2888: AND
2889: IFFALSE 3439
// begin wait ( 0 0$1 ) ;
2891: LD_INT 35
2893: PPUSH
2894: CALL_OW 67
// for i in collectors do
2898: LD_ADDR_VAR 0 4
2902: PUSH
2903: LD_VAR 0 10
2907: PUSH
2908: FOR_IN
2909: IFFALSE 3435
// begin driver := 0 ;
2911: LD_ADDR_VAR 0 12
2915: PUSH
2916: LD_INT 0
2918: ST_TO_ADDR
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
2919: LD_VAR 0 4
2923: PPUSH
2924: CALL_OW 263
2928: PUSH
2929: LD_INT 1
2931: EQUAL
2932: PUSH
2933: LD_VAR 0 4
2937: PPUSH
2938: CALL_OW 311
2942: NOT
2943: AND
2944: IFFALSE 3128
// begin driver := MC_GetOneByClass ( base , 3 , mct_none ) ;
2946: LD_ADDR_VAR 0 12
2950: PUSH
2951: LD_VAR 0 1
2955: PPUSH
2956: LD_INT 3
2958: PPUSH
2959: LD_EXP 31
2963: PPUSH
2964: CALL 7328 0 3
2968: ST_TO_ADDR
// if not driver then
2969: LD_VAR 0 12
2973: NOT
2974: IFFALSE 3043
// begin driver := MC_GetBestForClass ( base , 3 , 1 ) ;
2976: LD_ADDR_VAR 0 12
2980: PUSH
2981: LD_VAR 0 1
2985: PPUSH
2986: LD_INT 3
2988: PPUSH
2989: LD_INT 1
2991: PPUSH
2992: CALL 6487 0 3
2996: ST_TO_ADDR
// if driver then
2997: LD_VAR 0 12
3001: IFFALSE 3043
// begin driver := driver [ 1 ] ;
3003: LD_ADDR_VAR 0 12
3007: PUSH
3008: LD_VAR 0 12
3012: PUSH
3013: LD_INT 1
3015: ARRAY
3016: ST_TO_ADDR
// MC_ChangeClass ( base , 3 , driver ) ;
3017: LD_VAR 0 1
3021: PPUSH
3022: LD_INT 3
3024: PPUSH
3025: LD_VAR 0 12
3029: PPUSH
3030: CALL 6717 0 3
// AddComExitBuilding ( driver ) ;
3034: LD_VAR 0 12
3038: PPUSH
3039: CALL_OW 182
// end ; end ; if IsInUnit ( driver ) then
3043: LD_VAR 0 12
3047: PPUSH
3048: CALL_OW 310
3052: IFFALSE 3063
// ComExit ( driver ) ;
3054: LD_VAR 0 12
3058: PPUSH
3059: CALL 45065 0 1
// SetTag ( driver , mct_collect_crates ) ;
3063: LD_VAR 0 12
3067: PPUSH
3068: LD_EXP 34
3072: PPUSH
3073: CALL_OW 109
// if GetLives ( i ) < 1000 then
3077: LD_VAR 0 4
3081: PPUSH
3082: CALL_OW 256
3086: PUSH
3087: LD_INT 1000
3089: LESS
3090: IFFALSE 3106
// AddComRepairVehicle ( driver , i ) ;
3092: LD_VAR 0 12
3096: PPUSH
3097: LD_VAR 0 4
3101: PPUSH
3102: CALL_OW 189
// AddComEnterUnit ( driver , i ) ;
3106: LD_VAR 0 12
3110: PPUSH
3111: LD_VAR 0 4
3115: PPUSH
3116: CALL_OW 180
// mechanic_used := true ;
3120: LD_ADDR_VAR 0 15
3124: PUSH
3125: LD_INT 1
3127: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) ;
3128: LD_INT 35
3130: PPUSH
3131: CALL_OW 67
// if IsDead ( i ) then
3135: LD_VAR 0 4
3139: PPUSH
3140: CALL_OW 301
3144: IFFALSE 3164
// begin collectors := collectors diff i ;
3146: LD_ADDR_VAR 0 10
3150: PUSH
3151: LD_VAR 0 10
3155: PUSH
3156: LD_VAR 0 4
3160: DIFF
3161: ST_TO_ADDR
// continue ;
3162: GO 3128
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 20 then
3164: LD_VAR 0 4
3168: PPUSH
3169: CALL_OW 262
3173: PUSH
3174: LD_INT 1
3176: EQUAL
3177: PUSH
3178: LD_VAR 0 4
3182: PPUSH
3183: CALL_OW 261
3187: PUSH
3188: LD_INT 20
3190: LESS
3191: AND
3192: IFFALSE 3253
// begin depot := NearestUnitToUnit ( MC_GetDepot ( base ) , i ) ;
3194: LD_ADDR_VAR 0 14
3198: PUSH
3199: LD_VAR 0 1
3203: PPUSH
3204: CALL 7422 0 1
3208: PPUSH
3209: LD_VAR 0 4
3213: PPUSH
3214: CALL_OW 74
3218: ST_TO_ADDR
// if GetDistUnits ( i , depot ) < 6 then
3219: LD_VAR 0 4
3223: PPUSH
3224: LD_VAR 0 14
3228: PPUSH
3229: CALL_OW 296
3233: PUSH
3234: LD_INT 6
3236: LESS
3237: IFFALSE 3253
// ComMoveUnit ( i , depot ) ;
3239: LD_VAR 0 4
3243: PPUSH
3244: LD_VAR 0 14
3248: PPUSH
3249: CALL_OW 112
// end ; if GetControl ( i ) = control_manual then
3253: LD_VAR 0 4
3257: PPUSH
3258: CALL_OW 263
3262: PUSH
3263: LD_INT 1
3265: EQUAL
3266: IFFALSE 3331
// begin if not driver then
3268: LD_VAR 0 12
3272: NOT
3273: IFFALSE 3290
// driver := IsDrivenBy ( i ) ;
3275: LD_ADDR_VAR 0 12
3279: PUSH
3280: LD_VAR 0 4
3284: PPUSH
3285: CALL_OW 311
3289: ST_TO_ADDR
// if not HasTask ( driver ) then
3290: LD_VAR 0 12
3294: PPUSH
3295: CALL_OW 314
3299: NOT
3300: IFFALSE 3329
// ComCollect ( driver , crates [ 1 ] , crates [ 2 ] ) ;
3302: LD_VAR 0 12
3306: PPUSH
3307: LD_VAR 0 2
3311: PUSH
3312: LD_INT 1
3314: ARRAY
3315: PPUSH
3316: LD_VAR 0 2
3320: PUSH
3321: LD_INT 2
3323: ARRAY
3324: PPUSH
3325: CALL_OW 117
// end else
3329: GO 3370
// if not HasTask ( i ) then
3331: LD_VAR 0 4
3335: PPUSH
3336: CALL_OW 314
3340: NOT
3341: IFFALSE 3370
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3343: LD_VAR 0 4
3347: PPUSH
3348: LD_VAR 0 2
3352: PUSH
3353: LD_INT 1
3355: ARRAY
3356: PPUSH
3357: LD_VAR 0 2
3361: PUSH
3362: LD_INT 2
3364: ARRAY
3365: PPUSH
3366: CALL_OW 117
// until not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3370: LD_VAR 0 2
3374: PUSH
3375: LD_INT 1
3377: ARRAY
3378: PPUSH
3379: LD_VAR 0 2
3383: PUSH
3384: LD_INT 2
3386: ARRAY
3387: PPUSH
3388: CALL_OW 284
3392: NOT
3393: IFFALSE 3128
// for j := 1 to 2 do
3395: LD_ADDR_VAR 0 5
3399: PUSH
3400: DOUBLE
3401: LD_INT 1
3403: DEC
3404: ST_TO_ADDR
3405: LD_INT 2
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3431
// crates := Delete ( crates , 1 ) ;
3411: LD_ADDR_VAR 0 2
3415: PUSH
3416: LD_VAR 0 2
3420: PPUSH
3421: LD_INT 1
3423: PPUSH
3424: CALL_OW 3
3428: ST_TO_ADDR
3429: GO 3408
3431: POP
3432: POP
// end ;
3433: GO 2908
3435: POP
3436: POP
// end ;
3437: GO 2879
// if mechanic_used then
3439: LD_VAR 0 15
3443: IFFALSE 3540
// begin repeat wait ( 0 0$1 ) ;
3445: LD_INT 35
3447: PPUSH
3448: CALL_OW 67
// until not GetCargo ( collectors , mat_cans ) or not collectors ;
3452: LD_VAR 0 10
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: CALL_OW 289
3464: NOT
3465: PUSH
3466: LD_VAR 0 10
3470: NOT
3471: OR
3472: IFFALSE 3445
// drivers := MCT_ResetTag ( base , mct_collect_crates ) ;
3474: LD_ADDR_VAR 0 13
3478: PUSH
3479: LD_VAR 0 1
3483: PPUSH
3484: LD_EXP 34
3488: PPUSH
3489: CALL 6332 0 2
3493: ST_TO_ADDR
// if drivers then
3494: LD_VAR 0 13
3498: IFFALSE 3526
// for i in drivers do
3500: LD_ADDR_VAR 0 4
3504: PUSH
3505: LD_VAR 0 13
3509: PUSH
3510: FOR_IN
3511: IFFALSE 3524
// ComExit ( i ) ;
3513: LD_VAR 0 4
3517: PPUSH
3518: CALL 45065 0 1
3522: GO 3510
3524: POP
3525: POP
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3526: LD_VAR 0 1
3530: PPUSH
3531: LD_EXP 36
3535: PPUSH
3536: CALL 7895 0 2
// end ; end else
3540: GO 4104
// begin apes := MC_GetByClass ( base , class_apeman_engineer , mct_none ) ;
3542: LD_ADDR_VAR 0 8
3546: PUSH
3547: LD_VAR 0 1
3551: PPUSH
3552: LD_INT 16
3554: PPUSH
3555: LD_EXP 31
3559: PPUSH
3560: CALL 7225 0 3
3564: ST_TO_ADDR
// if apes then
3565: LD_VAR 0 8
3569: IFFALSE 3587
// collectors := collectors union apes ;
3571: LD_ADDR_VAR 0 10
3575: PUSH
3576: LD_VAR 0 10
3580: PUSH
3581: LD_VAR 0 8
3585: UNION
3586: ST_TO_ADDR
// engs := MC_GetByClass ( base , class_engineer , mct_none ) ;
3587: LD_ADDR_VAR 0 9
3591: PUSH
3592: LD_VAR 0 1
3596: PPUSH
3597: LD_INT 2
3599: PPUSH
3600: LD_EXP 31
3604: PPUSH
3605: CALL 7225 0 3
3609: ST_TO_ADDR
// if engs then
3610: LD_VAR 0 9
3614: IFFALSE 3632
// collectors := collectors union engs ;
3616: LD_ADDR_VAR 0 10
3620: PUSH
3621: LD_VAR 0 10
3625: PUSH
3626: LD_VAR 0 9
3630: UNION
3631: ST_TO_ADDR
// if not collectors then
3632: LD_VAR 0 10
3636: NOT
3637: IFFALSE 3737
// begin engs := MC_GetBestForClass ( base , 2 , 3 ) ;
3639: LD_ADDR_VAR 0 9
3643: PUSH
3644: LD_VAR 0 1
3648: PPUSH
3649: LD_INT 2
3651: PPUSH
3652: LD_INT 3
3654: PPUSH
3655: CALL 6487 0 3
3659: ST_TO_ADDR
// if engs then
3660: LD_VAR 0 9
3664: IFFALSE 3683
// MC_ChangeClass ( base , 2 , engs ) ;
3666: LD_VAR 0 1
3670: PPUSH
3671: LD_INT 2
3673: PPUSH
3674: LD_VAR 0 9
3678: PPUSH
3679: CALL 6717 0 3
// repeat wait ( 0 0$1 ) ;
3683: LD_INT 35
3685: PPUSH
3686: CALL_OW 67
// if not UnitFilter ( engs , [ f_ok ] ) then
3690: LD_VAR 0 9
3694: PPUSH
3695: LD_INT 50
3697: PUSH
3698: EMPTY
3699: LIST
3700: PPUSH
3701: CALL_OW 72
3705: NOT
3706: IFFALSE 3710
// break ;
3708: GO 3737
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
3710: LD_VAR 0 9
3714: PPUSH
3715: LD_INT 25
3717: PUSH
3718: LD_INT 2
3720: PUSH
3721: EMPTY
3722: LIST
3723: LIST
3724: PPUSH
3725: CALL_OW 72
3729: PUSH
3730: LD_VAR 0 9
3734: EQUAL
3735: IFFALSE 3683
// end ; if not collectors then
3737: LD_VAR 0 10
3741: NOT
3742: IFFALSE 3760
// begin MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3744: LD_VAR 0 1
3748: PPUSH
3749: LD_EXP 36
3753: PPUSH
3754: CALL 7895 0 2
// exit ;
3758: GO 4104
// end ; if collectors > 5 then
3760: LD_VAR 0 10
3764: PUSH
3765: LD_INT 5
3767: GREATER
3768: IFFALSE 3824
// for i := collectors downto 5 do
3770: LD_ADDR_VAR 0 4
3774: PUSH
3775: DOUBLE
3776: LD_VAR 0 10
3780: INC
3781: ST_TO_ADDR
3782: LD_INT 5
3784: PUSH
3785: FOR_DOWNTO
3786: IFFALSE 3822
// begin SetTag ( i , 0 ) ;
3788: LD_VAR 0 4
3792: PPUSH
3793: LD_INT 0
3795: PPUSH
3796: CALL_OW 109
// collectors := Delete ( collectors , i ) ;
3800: LD_ADDR_VAR 0 10
3804: PUSH
3805: LD_VAR 0 10
3809: PPUSH
3810: LD_VAR 0 4
3814: PPUSH
3815: CALL_OW 3
3819: ST_TO_ADDR
// end ;
3820: GO 3785
3822: POP
3823: POP
// ComExitAll ( collectors ) ;
3824: LD_VAR 0 10
3828: PPUSH
3829: CALL 45148 0 1
// MCT_SetTag ( collectors , mct_collect_crates ) ;
3833: LD_VAR 0 10
3837: PPUSH
3838: LD_EXP 34
3842: PPUSH
3843: CALL 6398 0 2
// while crates and collectors do
3847: LD_VAR 0 2
3851: PUSH
3852: LD_VAR 0 10
3856: AND
3857: IFFALSE 4076
// begin wait ( 0 0$1 ) ;
3859: LD_INT 35
3861: PPUSH
3862: CALL_OW 67
// amount := GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3866: LD_ADDR_VAR 0 6
3870: PUSH
3871: LD_VAR 0 2
3875: PUSH
3876: LD_INT 1
3878: ARRAY
3879: PPUSH
3880: LD_VAR 0 2
3884: PUSH
3885: LD_INT 2
3887: ARRAY
3888: PPUSH
3889: CALL_OW 284
3893: ST_TO_ADDR
// j := 0 ;
3894: LD_ADDR_VAR 0 5
3898: PUSH
3899: LD_INT 0
3901: ST_TO_ADDR
// for i in collectors do
3902: LD_ADDR_VAR 0 4
3906: PUSH
3907: LD_VAR 0 10
3911: PUSH
3912: FOR_IN
3913: IFFALSE 4009
// begin if IsDead ( i ) then
3915: LD_VAR 0 4
3919: PPUSH
3920: CALL_OW 301
3924: IFFALSE 3942
// collectors := collectors diff i ;
3926: LD_ADDR_VAR 0 10
3930: PUSH
3931: LD_VAR 0 10
3935: PUSH
3936: LD_VAR 0 4
3940: DIFF
3941: ST_TO_ADDR
// if j < amount and not HasTask ( i ) then
3942: LD_VAR 0 5
3946: PUSH
3947: LD_VAR 0 6
3951: LESS
3952: PUSH
3953: LD_VAR 0 4
3957: PPUSH
3958: CALL_OW 314
3962: NOT
3963: AND
3964: IFFALSE 4007
// begin j := j + 1 ;
3966: LD_ADDR_VAR 0 5
3970: PUSH
3971: LD_VAR 0 5
3975: PUSH
3976: LD_INT 1
3978: PLUS
3979: ST_TO_ADDR
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3980: LD_VAR 0 4
3984: PPUSH
3985: LD_VAR 0 2
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_VAR 0 2
3998: PUSH
3999: LD_INT 2
4001: ARRAY
4002: PPUSH
4003: CALL_OW 117
// end ; end ;
4007: GO 3912
4009: POP
4010: POP
// if not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) then
4011: LD_VAR 0 2
4015: PUSH
4016: LD_INT 1
4018: ARRAY
4019: PPUSH
4020: LD_VAR 0 2
4024: PUSH
4025: LD_INT 2
4027: ARRAY
4028: PPUSH
4029: CALL_OW 284
4033: NOT
4034: IFFALSE 4074
// for j := 1 to 2 do
4036: LD_ADDR_VAR 0 5
4040: PUSH
4041: DOUBLE
4042: LD_INT 1
4044: DEC
4045: ST_TO_ADDR
4046: LD_INT 2
4048: PUSH
4049: FOR_TO
4050: IFFALSE 4072
// crates := Delete ( crates , 1 ) ;
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: LD_VAR 0 2
4061: PPUSH
4062: LD_INT 1
4064: PPUSH
4065: CALL_OW 3
4069: ST_TO_ADDR
4070: GO 4049
4072: POP
4073: POP
// end ;
4074: GO 3847
// MCT_ResetTag ( base , mct_collect_crates ) ;
4076: LD_VAR 0 1
4080: PPUSH
4081: LD_EXP 34
4085: PPUSH
4086: CALL 6332 0 2
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
4090: LD_VAR 0 1
4094: PPUSH
4095: LD_EXP 36
4099: PPUSH
4100: CALL 7895 0 2
// end ; end ;
4104: LD_VAR 0 3
4108: RET
// export function MC_Build ( base ) ; var depot , btype , x , y , d , engs ; begin
4109: LD_INT 0
4111: PPUSH
4112: PPUSH
4113: PPUSH
4114: PPUSH
4115: PPUSH
4116: PPUSH
4117: PPUSH
// if MCTM_HasActiveTask ( base , mctm_build ) or not mc_build_list [ base ] or not MC_GetDepot ( base ) then
4118: LD_VAR 0 1
4122: PPUSH
4123: LD_EXP 37
4127: PPUSH
4128: CALL 7801 0 2
4132: PUSH
4133: LD_EXP 14
4137: PUSH
4138: LD_VAR 0 1
4142: ARRAY
4143: NOT
4144: OR
4145: PUSH
4146: LD_VAR 0 1
4150: PPUSH
4151: CALL 7422 0 1
4155: NOT
4156: OR
4157: IFFALSE 4161
// exit ;
4159: GO 4712
// MCTM_SetActiveTask ( base , mctm_build ) ;
4161: LD_VAR 0 1
4165: PPUSH
4166: LD_EXP 37
4170: PPUSH
4171: CALL 7831 0 2
// engs := MC_GetByClass ( base , 2 , mct_none ) ;
4175: LD_ADDR_VAR 0 8
4179: PUSH
4180: LD_VAR 0 1
4184: PPUSH
4185: LD_INT 2
4187: PPUSH
4188: LD_EXP 31
4192: PPUSH
4193: CALL 7225 0 3
4197: ST_TO_ADDR
// if not engs then
4198: LD_VAR 0 8
4202: NOT
4203: IFFALSE 4315
// begin engs := MC_GetBestForClass ( base , 2 , 6 ) ;
4205: LD_ADDR_VAR 0 8
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: LD_INT 2
4217: PPUSH
4218: LD_INT 6
4220: PPUSH
4221: CALL 6487 0 3
4225: ST_TO_ADDR
// if not engs then
4226: LD_VAR 0 8
4230: NOT
4231: IFFALSE 4249
// begin MCTM_DeleteActiveTask ( base , mctm_build ) ;
4233: LD_VAR 0 1
4237: PPUSH
4238: LD_EXP 37
4242: PPUSH
4243: CALL 7895 0 2
// exit ;
4247: GO 4712
// end ; MC_ChangeClass ( base , 2 , engs ) ;
4249: LD_VAR 0 1
4253: PPUSH
4254: LD_INT 2
4256: PPUSH
4257: LD_VAR 0 8
4261: PPUSH
4262: CALL 6717 0 3
// repeat wait ( 0 0$1 ) ;
4266: LD_INT 35
4268: PPUSH
4269: CALL_OW 67
// if not mc_people [ base ] then
4273: LD_EXP 9
4277: PUSH
4278: LD_VAR 0 1
4282: ARRAY
4283: NOT
4284: IFFALSE 4288
// exit ;
4286: GO 4712
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
4288: LD_VAR 0 8
4292: PPUSH
4293: LD_INT 25
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PPUSH
4303: CALL_OW 72
4307: PUSH
4308: LD_VAR 0 8
4312: EQUAL
4313: IFFALSE 4266
// end ; ComExitAll ( engs ) ;
4315: LD_VAR 0 8
4319: PPUSH
4320: CALL 45148 0 1
// MCT_SetTag ( engs , mct_build ) ;
4324: LD_VAR 0 8
4328: PPUSH
4329: LD_EXP 33
4333: PPUSH
4334: CALL 6398 0 2
// btype := mc_build_list [ base ] [ 1 ] [ 1 ] ;
4338: LD_ADDR_VAR 0 4
4342: PUSH
4343: LD_EXP 14
4347: PUSH
4348: LD_VAR 0 1
4352: ARRAY
4353: PUSH
4354: LD_INT 1
4356: ARRAY
4357: PUSH
4358: LD_INT 1
4360: ARRAY
4361: ST_TO_ADDR
// x := mc_build_list [ base ] [ 1 ] [ 2 ] ;
4362: LD_ADDR_VAR 0 5
4366: PUSH
4367: LD_EXP 14
4371: PUSH
4372: LD_VAR 0 1
4376: ARRAY
4377: PUSH
4378: LD_INT 1
4380: ARRAY
4381: PUSH
4382: LD_INT 2
4384: ARRAY
4385: ST_TO_ADDR
// y := mc_build_list [ base ] [ 1 ] [ 3 ] ;
4386: LD_ADDR_VAR 0 6
4390: PUSH
4391: LD_EXP 14
4395: PUSH
4396: LD_VAR 0 1
4400: ARRAY
4401: PUSH
4402: LD_INT 1
4404: ARRAY
4405: PUSH
4406: LD_INT 3
4408: ARRAY
4409: ST_TO_ADDR
// d := mc_build_list [ base ] [ 1 ] [ 4 ] ;
4410: LD_ADDR_VAR 0 7
4414: PUSH
4415: LD_EXP 14
4419: PUSH
4420: LD_VAR 0 1
4424: ARRAY
4425: PUSH
4426: LD_INT 1
4428: ARRAY
4429: PUSH
4430: LD_INT 4
4432: ARRAY
4433: ST_TO_ADDR
// if GetType ( HexInfo ( x , y ) ) = unit_building then
4434: LD_VAR 0 5
4438: PPUSH
4439: LD_VAR 0 6
4443: PPUSH
4444: CALL_OW 428
4448: PPUSH
4449: CALL_OW 247
4453: PUSH
4454: LD_INT 3
4456: EQUAL
4457: IFFALSE 4492
// begin wait ( 0 0$1 ) ;
4459: LD_INT 35
4461: PPUSH
4462: CALL_OW 67
// ComComplete ( engs , HexInfo ( x , y ) ) ;
4466: LD_VAR 0 8
4470: PPUSH
4471: LD_VAR 0 5
4475: PPUSH
4476: LD_VAR 0 6
4480: PPUSH
4481: CALL_OW 428
4485: PPUSH
4486: CALL 15789 0 2
// end else
4490: GO 4712
// begin depot := NearestUnitToXY ( MC_GetDepot ( base ) , x , y ) ;
4492: LD_ADDR_VAR 0 3
4496: PUSH
4497: LD_VAR 0 1
4501: PPUSH
4502: CALL 7422 0 1
4506: PPUSH
4507: LD_VAR 0 5
4511: PPUSH
4512: LD_VAR 0 6
4516: PPUSH
4517: CALL_OW 73
4521: ST_TO_ADDR
// if not HexInfo ( x , y ) and CanBeBuilt ( depot , btype , x , y , d ) then
4522: LD_VAR 0 5
4526: PPUSH
4527: LD_VAR 0 6
4531: PPUSH
4532: CALL_OW 428
4536: NOT
4537: PUSH
4538: LD_VAR 0 3
4542: PPUSH
4543: LD_VAR 0 4
4547: PPUSH
4548: LD_VAR 0 5
4552: PPUSH
4553: LD_VAR 0 6
4557: PPUSH
4558: LD_VAR 0 7
4562: PPUSH
4563: CALL 21029 0 5
4567: AND
4568: IFFALSE 4601
// ComBuild ( engs , btype , x , y , d ) else
4570: LD_VAR 0 8
4574: PPUSH
4575: LD_VAR 0 4
4579: PPUSH
4580: LD_VAR 0 5
4584: PPUSH
4585: LD_VAR 0 6
4589: PPUSH
4590: LD_VAR 0 7
4594: PPUSH
4595: CALL_OW 145
4599: GO 4712
// begin if GetType ( HexInfo ( x , y ) ) <> unit_building then
4601: LD_VAR 0 5
4605: PPUSH
4606: LD_VAR 0 6
4610: PPUSH
4611: CALL_OW 428
4615: PPUSH
4616: CALL_OW 247
4620: PUSH
4621: LD_INT 3
4623: NONEQUAL
4624: IFFALSE 4684
// begin TryClearPlaceForBuilding ( btype , x , y , d , mc_buildings [ base ] , engs , mc_parking [ base ] ) ;
4626: LD_VAR 0 4
4630: PPUSH
4631: LD_VAR 0 5
4635: PPUSH
4636: LD_VAR 0 6
4640: PPUSH
4641: LD_VAR 0 7
4645: PPUSH
4646: LD_EXP 10
4650: PUSH
4651: LD_VAR 0 1
4655: ARRAY
4656: PPUSH
4657: LD_VAR 0 8
4661: PPUSH
4662: LD_EXP 28
4666: PUSH
4667: LD_VAR 0 1
4671: ARRAY
4672: PPUSH
4673: CALL 19779 0 7
// wait ( 0 0$10 ) ;
4677: LD_INT 350
4679: PPUSH
4680: CALL_OW 67
// end ; MCTM_DeleteActiveTask ( base , mctm_build ) ;
4684: LD_VAR 0 1
4688: PPUSH
4689: LD_EXP 37
4693: PPUSH
4694: CALL 7895 0 2
// MCT_ResetTag ( base , mctm_build ) ;
4698: LD_VAR 0 1
4702: PPUSH
4703: LD_EXP 37
4707: PPUSH
4708: CALL 6332 0 2
// end ; end ; end ; end_of_file
4712: LD_VAR 0 2
4716: RET
// export mce_start , mce_monitor_base , mce_ ; export function MCE_InitEvents ( ) ; begin
4717: LD_INT 0
4719: PPUSH
// mce_start := 1 ;
4720: LD_ADDR_EXP 1
4724: PUSH
4725: LD_INT 1
4727: ST_TO_ADDR
// mce_monitor_base := 2 ;
4728: LD_ADDR_EXP 2
4732: PUSH
4733: LD_INT 2
4735: ST_TO_ADDR
// end ;
4736: LD_VAR 0 1
4740: RET
// export function MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4741: LD_INT 0
4743: PPUSH
// case event of mce_start :
4744: LD_VAR 0 1
4748: PUSH
4749: LD_EXP 1
4753: DOUBLE
4754: EQUAL
4755: IFTRUE 4759
4757: GO 4766
4759: POP
// MC_Monitor ( ) ; mce_monitor_base :
4760: CALL 2411 0 0
4764: GO 4789
4766: LD_EXP 2
4770: DOUBLE
4771: EQUAL
4772: IFTRUE 4776
4774: GO 4788
4776: POP
// MC_MonitorBase ( p1 ) ; end ;
4777: LD_VAR 0 2
4781: PPUSH
4782: CALL 2535 0 1
4786: GO 4789
4788: POP
// end ;
4789: LD_VAR 0 8
4793: RET
// export function MCE_ClassChanged ( unit , old_class , new_class ) ; begin
4794: LD_INT 0
4796: PPUSH
// SetTag ( unit , mct_none ) ;
4797: LD_VAR 0 1
4801: PPUSH
4802: LD_EXP 31
4806: PPUSH
4807: CALL_OW 109
// end ;
4811: LD_VAR 0 4
4815: RET
// export function MCE_UnitDestroyed ( un ) ; begin
4816: LD_INT 0
4818: PPUSH
// case GetType ( un ) of unit_human :
4819: LD_VAR 0 1
4823: PPUSH
4824: CALL_OW 247
4828: PUSH
4829: LD_INT 1
4831: DOUBLE
4832: EQUAL
4833: IFTRUE 4837
4835: GO 4849
4837: POP
// MCE_HumanKilled ( un ) ; unit_building :
4838: LD_VAR 0 1
4842: PPUSH
4843: CALL 4875 0 1
4847: GO 4870
4849: LD_INT 3
4851: DOUBLE
4852: EQUAL
4853: IFTRUE 4857
4855: GO 4869
4857: POP
// MCE_BuildingDestroyed ( un ) ; end ;
4858: LD_VAR 0 1
4862: PPUSH
4863: CALL 5432 0 1
4867: GO 4870
4869: POP
// end ;
4870: LD_VAR 0 2
4874: RET
// export function MCE_HumanKilled ( un ) ; var i ; begin
4875: LD_INT 0
4877: PPUSH
4878: PPUSH
// for i := 1 to mc_people do
4879: LD_ADDR_VAR 0 3
4883: PUSH
4884: DOUBLE
4885: LD_INT 1
4887: DEC
4888: ST_TO_ADDR
4889: LD_EXP 9
4893: PUSH
4894: FOR_TO
4895: IFFALSE 4954
// if un in mc_people [ i ] then
4897: LD_VAR 0 1
4901: PUSH
4902: LD_EXP 9
4906: PUSH
4907: LD_VAR 0 3
4911: ARRAY
4912: IN
4913: IFFALSE 4952
// mc_people := Replace ( mc_people , i , mc_people [ i ] diff un ) ;
4915: LD_ADDR_EXP 9
4919: PUSH
4920: LD_EXP 9
4924: PPUSH
4925: LD_VAR 0 3
4929: PPUSH
4930: LD_EXP 9
4934: PUSH
4935: LD_VAR 0 3
4939: ARRAY
4940: PUSH
4941: LD_VAR 0 1
4945: DIFF
4946: PPUSH
4947: CALL_OW 1
4951: ST_TO_ADDR
4952: GO 4894
4954: POP
4955: POP
// end ;
4956: LD_VAR 0 2
4960: RET
// export function MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ; var base ; begin
4961: LD_INT 0
4963: PPUSH
4964: PPUSH
// if GetTag ( driver ) = mct_collect_crates then
4965: LD_VAR 0 1
4969: PPUSH
4970: CALL_OW 110
4974: PUSH
4975: LD_EXP 34
4979: EQUAL
4980: IFFALSE 5029
// begin base := MC_GetHumanBase ( driver ) ;
4982: LD_ADDR_VAR 0 6
4986: PUSH
4987: LD_VAR 0 1
4991: PPUSH
4992: CALL 6654 0 1
4996: ST_TO_ADDR
// if base then
4997: LD_VAR 0 6
5001: IFFALSE 5029
// begin SetTag ( driver , 0 ) ;
5003: LD_VAR 0 1
5007: PPUSH
5008: LD_INT 0
5010: PPUSH
5011: CALL_OW 109
// MC_Retreat ( base , driver ) ;
5015: LD_VAR 0 6
5019: PPUSH
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL 7685 0 2
// end ; end ; end ;
5029: LD_VAR 0 5
5033: RET
// export function MCE_BuildingComplete ( building ) ; var base , btype , x , y , d ; begin
5034: LD_INT 0
5036: PPUSH
5037: PPUSH
5038: PPUSH
5039: PPUSH
5040: PPUSH
5041: PPUSH
// btype := GetBType ( building ) ;
5042: LD_ADDR_VAR 0 4
5046: PUSH
5047: LD_VAR 0 1
5051: PPUSH
5052: CALL_OW 266
5056: ST_TO_ADDR
// x := GetX ( building ) ;
5057: LD_ADDR_VAR 0 5
5061: PUSH
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 250
5071: ST_TO_ADDR
// y := GetY ( building ) ;
5072: LD_ADDR_VAR 0 6
5076: PUSH
5077: LD_VAR 0 1
5081: PPUSH
5082: CALL_OW 251
5086: ST_TO_ADDR
// d := GetDir ( building ) ;
5087: LD_ADDR_VAR 0 7
5091: PUSH
5092: LD_VAR 0 1
5096: PPUSH
5097: CALL_OW 254
5101: ST_TO_ADDR
// for base = 1 to mc_build_list do
5102: LD_ADDR_VAR 0 3
5106: PUSH
5107: DOUBLE
5108: LD_INT 1
5110: DEC
5111: ST_TO_ADDR
5112: LD_EXP 14
5116: PUSH
5117: FOR_TO
5118: IFFALSE 5425
// begin if not mc_build_list [ base ] then
5120: LD_EXP 14
5124: PUSH
5125: LD_VAR 0 3
5129: ARRAY
5130: NOT
5131: IFFALSE 5135
// continue ;
5133: GO 5117
// if CompareArrayValues ( [ btype , x , y , d ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5135: LD_VAR 0 4
5139: PUSH
5140: LD_VAR 0 5
5144: PUSH
5145: LD_VAR 0 6
5149: PUSH
5150: LD_VAR 0 7
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: PPUSH
5161: LD_EXP 14
5165: PUSH
5166: LD_VAR 0 3
5170: ARRAY
5171: PUSH
5172: LD_INT 1
5174: ARRAY
5175: PPUSH
5176: CALL 19203 0 2
5180: PUSH
5181: LD_VAR 0 1
5185: PPUSH
5186: CALL_OW 255
5190: PUSH
5191: LD_EXP 6
5195: PUSH
5196: LD_VAR 0 3
5200: ARRAY
5201: EQUAL
5202: AND
5203: IFFALSE 5423
// begin if mc_build_list [ base ] [ 1 ] > 4 then
5205: LD_EXP 14
5209: PUSH
5210: LD_VAR 0 3
5214: ARRAY
5215: PUSH
5216: LD_INT 1
5218: ARRAY
5219: PUSH
5220: LD_INT 4
5222: GREATER
5223: IFFALSE 5296
// begin repeat wait ( 0 0$1 ) ;
5225: LD_INT 35
5227: PPUSH
5228: CALL_OW 67
// until not UpgradeCost ( mc_build_list [ base ] [ 1 ] [ 5 ] ) or not IsDead ( building ) ;
5232: LD_EXP 14
5236: PUSH
5237: LD_VAR 0 3
5241: ARRAY
5242: PUSH
5243: LD_INT 1
5245: ARRAY
5246: PUSH
5247: LD_INT 5
5249: ARRAY
5250: PPUSH
5251: CALL 19439 0 1
5255: NOT
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 301
5266: NOT
5267: OR
5268: IFFALSE 5225
// if IsDead ( building ) then
5270: LD_VAR 0 1
5274: PPUSH
5275: CALL_OW 301
5279: IFFALSE 5285
// exit ;
5281: POP
5282: POP
5283: GO 5427
// ComUpgrade ( building ) ;
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 146
// end else
5294: GO 5335
// mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5296: LD_ADDR_EXP 14
5300: PUSH
5301: LD_EXP 14
5305: PPUSH
5306: LD_VAR 0 3
5310: PPUSH
5311: LD_EXP 14
5315: PUSH
5316: LD_VAR 0 3
5320: ARRAY
5321: PPUSH
5322: LD_INT 1
5324: PPUSH
5325: CALL_OW 3
5329: PPUSH
5330: CALL_OW 1
5334: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , base , Replace ( mc_buildings [ base ] , mc_buildings [ base ] + 1 , building ) ) ;
5335: LD_ADDR_EXP 10
5339: PUSH
5340: LD_EXP 10
5344: PPUSH
5345: LD_VAR 0 3
5349: PPUSH
5350: LD_EXP 10
5354: PUSH
5355: LD_VAR 0 3
5359: ARRAY
5360: PPUSH
5361: LD_EXP 10
5365: PUSH
5366: LD_VAR 0 3
5370: ARRAY
5371: PUSH
5372: LD_INT 1
5374: PLUS
5375: PPUSH
5376: LD_VAR 0 1
5380: PPUSH
5381: CALL_OW 1
5385: PPUSH
5386: CALL_OW 1
5390: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5391: LD_VAR 0 3
5395: PPUSH
5396: LD_EXP 37
5400: PPUSH
5401: CALL 7895 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5405: LD_VAR 0 3
5409: PPUSH
5410: LD_EXP 37
5414: PPUSH
5415: CALL 6332 0 2
// exit ;
5419: POP
5420: POP
5421: GO 5427
// end ; end ;
5423: GO 5117
5425: POP
5426: POP
// end ;
5427: LD_VAR 0 2
5431: RET
// export function MCE_BuildingDestroyed ( building ) ; var base , x , y , d , btype ; begin
5432: LD_INT 0
5434: PPUSH
5435: PPUSH
5436: PPUSH
5437: PPUSH
5438: PPUSH
5439: PPUSH
// btype := GetBType ( building ) ;
5440: LD_ADDR_VAR 0 7
5444: PUSH
5445: LD_VAR 0 1
5449: PPUSH
5450: CALL_OW 266
5454: ST_TO_ADDR
// x := GetX ( building ) ;
5455: LD_ADDR_VAR 0 4
5459: PUSH
5460: LD_VAR 0 1
5464: PPUSH
5465: CALL_OW 250
5469: ST_TO_ADDR
// y := GetY ( building ) ;
5470: LD_ADDR_VAR 0 5
5474: PUSH
5475: LD_VAR 0 1
5479: PPUSH
5480: CALL_OW 251
5484: ST_TO_ADDR
// d := GetDir ( building ) ;
5485: LD_ADDR_VAR 0 6
5489: PUSH
5490: LD_VAR 0 1
5494: PPUSH
5495: CALL_OW 254
5499: ST_TO_ADDR
// for base := 1 to mc_buildings do
5500: LD_ADDR_VAR 0 3
5504: PUSH
5505: DOUBLE
5506: LD_INT 1
5508: DEC
5509: ST_TO_ADDR
5510: LD_EXP 10
5514: PUSH
5515: FOR_TO
5516: IFFALSE 5746
// begin if not mc_buildings [ base ] then
5518: LD_EXP 10
5522: PUSH
5523: LD_VAR 0 3
5527: ARRAY
5528: NOT
5529: IFFALSE 5533
// continue ;
5531: GO 5515
// if building in mc_buildings [ base ] then
5533: LD_VAR 0 1
5537: PUSH
5538: LD_EXP 10
5542: PUSH
5543: LD_VAR 0 3
5547: ARRAY
5548: IN
5549: IFFALSE 5744
// begin mc_buildings := Replace ( mc_buildings , base , mc_buildings [ base ] diff building ) ;
5551: LD_ADDR_EXP 10
5555: PUSH
5556: LD_EXP 10
5560: PPUSH
5561: LD_VAR 0 3
5565: PPUSH
5566: LD_EXP 10
5570: PUSH
5571: LD_VAR 0 3
5575: ARRAY
5576: PUSH
5577: LD_VAR 0 1
5581: DIFF
5582: PPUSH
5583: CALL_OW 1
5587: ST_TO_ADDR
// if mc_build_list [ base ] then
5588: LD_EXP 14
5592: PUSH
5593: LD_VAR 0 3
5597: ARRAY
5598: IFFALSE 5682
// if mc_build_list [ base ] [ 1 ] [ 1 ] = btype and mc_build_list [ base ] [ 1 ] [ 2 ] = x and mc_build_list [ base ] [ 1 ] [ 3 ] = y then
5600: LD_EXP 14
5604: PUSH
5605: LD_VAR 0 3
5609: ARRAY
5610: PUSH
5611: LD_INT 1
5613: ARRAY
5614: PUSH
5615: LD_INT 1
5617: ARRAY
5618: PUSH
5619: LD_VAR 0 7
5623: EQUAL
5624: PUSH
5625: LD_EXP 14
5629: PUSH
5630: LD_VAR 0 3
5634: ARRAY
5635: PUSH
5636: LD_INT 1
5638: ARRAY
5639: PUSH
5640: LD_INT 2
5642: ARRAY
5643: PUSH
5644: LD_VAR 0 4
5648: EQUAL
5649: AND
5650: PUSH
5651: LD_EXP 14
5655: PUSH
5656: LD_VAR 0 3
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PUSH
5666: LD_INT 3
5668: ARRAY
5669: PUSH
5670: LD_VAR 0 5
5674: EQUAL
5675: AND
5676: IFFALSE 5682
// exit ;
5678: POP
5679: POP
5680: GO 5748
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] ^ [ btype , x , y , d ] ) ;
5682: LD_ADDR_EXP 14
5686: PUSH
5687: LD_EXP 14
5691: PPUSH
5692: LD_VAR 0 3
5696: PPUSH
5697: LD_EXP 14
5701: PUSH
5702: LD_VAR 0 3
5706: ARRAY
5707: PUSH
5708: LD_VAR 0 7
5712: PUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_VAR 0 5
5722: PUSH
5723: LD_VAR 0 6
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: ADD
5734: PPUSH
5735: CALL_OW 1
5739: ST_TO_ADDR
// exit ;
5740: POP
5741: POP
5742: GO 5748
// end ; end ;
5744: GO 5515
5746: POP
5747: POP
// end ;
5748: LD_VAR 0 2
5752: RET
// export function MCE_BuildingUpgradeComplete ( building ) ; var base , btype , x , y , d ; begin
5753: LD_INT 0
5755: PPUSH
5756: PPUSH
5757: PPUSH
5758: PPUSH
5759: PPUSH
5760: PPUSH
// btype := GetBType ( building ) ;
5761: LD_ADDR_VAR 0 4
5765: PUSH
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 266
5775: ST_TO_ADDR
// x := GetX ( building ) ;
5776: LD_ADDR_VAR 0 5
5780: PUSH
5781: LD_VAR 0 1
5785: PPUSH
5786: CALL_OW 250
5790: ST_TO_ADDR
// y := GetY ( building ) ;
5791: LD_ADDR_VAR 0 6
5795: PUSH
5796: LD_VAR 0 1
5800: PPUSH
5801: CALL_OW 251
5805: ST_TO_ADDR
// d := GetDir ( building ) ;
5806: LD_ADDR_VAR 0 7
5810: PUSH
5811: LD_VAR 0 1
5815: PPUSH
5816: CALL_OW 254
5820: ST_TO_ADDR
// for base = 1 to mc_build_list do
5821: LD_ADDR_VAR 0 3
5825: PUSH
5826: DOUBLE
5827: LD_INT 1
5829: DEC
5830: ST_TO_ADDR
5831: LD_EXP 14
5835: PUSH
5836: FOR_TO
5837: IFFALSE 6007
// begin if not mc_build_list [ base ] then
5839: LD_EXP 14
5843: PUSH
5844: LD_VAR 0 3
5848: ARRAY
5849: NOT
5850: IFFALSE 5854
// continue ;
5852: GO 5836
// if CompareArrayValues ( [ btype - 1 , x , y , d , btype ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5854: LD_VAR 0 4
5858: PUSH
5859: LD_INT 1
5861: MINUS
5862: PUSH
5863: LD_VAR 0 5
5867: PUSH
5868: LD_VAR 0 6
5872: PUSH
5873: LD_VAR 0 7
5877: PUSH
5878: LD_VAR 0 4
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: PPUSH
5890: LD_EXP 14
5894: PUSH
5895: LD_VAR 0 3
5899: ARRAY
5900: PUSH
5901: LD_INT 1
5903: ARRAY
5904: PPUSH
5905: CALL 19203 0 2
5909: PUSH
5910: LD_VAR 0 1
5914: PPUSH
5915: CALL_OW 255
5919: PUSH
5920: LD_EXP 6
5924: PUSH
5925: LD_VAR 0 3
5929: ARRAY
5930: EQUAL
5931: AND
5932: IFFALSE 6005
// begin mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5934: LD_ADDR_EXP 14
5938: PUSH
5939: LD_EXP 14
5943: PPUSH
5944: LD_VAR 0 3
5948: PPUSH
5949: LD_EXP 14
5953: PUSH
5954: LD_VAR 0 3
5958: ARRAY
5959: PPUSH
5960: LD_INT 1
5962: PPUSH
5963: CALL_OW 3
5967: PPUSH
5968: CALL_OW 1
5972: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5973: LD_VAR 0 3
5977: PPUSH
5978: LD_EXP 37
5982: PPUSH
5983: CALL 7895 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5987: LD_VAR 0 3
5991: PPUSH
5992: LD_EXP 37
5996: PPUSH
5997: CALL 6332 0 2
// exit ;
6001: POP
6002: POP
6003: GO 6009
// end ; end ;
6005: GO 5836
6007: POP
6008: POP
// end ; end_of_file
6009: LD_VAR 0 2
6013: RET
// export mc_active , mc_debug , mc_bases , mc_tag , mc_task , mc_people , mc_buildings , mc_vehicles , mc_mines , mc_minefields , mc_build_list , mc_produce_list , mc_defense_status , mc_defender , mc_defender_limit , mc_ape , mc_tech , mc_attack , mc_deposits_xy , mc_can_tame , mc_lab_upgrade , mc_crates_area , mc_teleport_exit , mc_allowed_tower_weapons , mc_parking , mc_scan_area , mc_danger ; export function MC_InitVariables ( ) ; begin
6014: LD_INT 0
6016: PPUSH
// mc_bases := [ ] ;
6017: LD_ADDR_EXP 6
6021: PUSH
6022: EMPTY
6023: ST_TO_ADDR
// mc_tag := [ ] ;
6024: LD_ADDR_EXP 7
6028: PUSH
6029: EMPTY
6030: ST_TO_ADDR
// mc_task := [ ] ;
6031: LD_ADDR_EXP 8
6035: PUSH
6036: EMPTY
6037: ST_TO_ADDR
// mc_people := [ ] ;
6038: LD_ADDR_EXP 9
6042: PUSH
6043: EMPTY
6044: ST_TO_ADDR
// mc_buildings := [ ] ;
6045: LD_ADDR_EXP 10
6049: PUSH
6050: EMPTY
6051: ST_TO_ADDR
// mc_vehicles := [ ] ;
6052: LD_ADDR_EXP 11
6056: PUSH
6057: EMPTY
6058: ST_TO_ADDR
// mc_mines := [ ] ;
6059: LD_ADDR_EXP 12
6063: PUSH
6064: EMPTY
6065: ST_TO_ADDR
// mc_minefields := [ ] ;
6066: LD_ADDR_EXP 13
6070: PUSH
6071: EMPTY
6072: ST_TO_ADDR
// mc_build_list := [ ] ;
6073: LD_ADDR_EXP 14
6077: PUSH
6078: EMPTY
6079: ST_TO_ADDR
// mc_produce_list := [ ] ;
6080: LD_ADDR_EXP 15
6084: PUSH
6085: EMPTY
6086: ST_TO_ADDR
// mc_defense_status := [ ] ;
6087: LD_ADDR_EXP 16
6091: PUSH
6092: EMPTY
6093: ST_TO_ADDR
// mc_defender := [ ] ;
6094: LD_ADDR_EXP 17
6098: PUSH
6099: EMPTY
6100: ST_TO_ADDR
// mc_defender_limit := [ ] ;
6101: LD_ADDR_EXP 18
6105: PUSH
6106: EMPTY
6107: ST_TO_ADDR
// mc_ape := [ ] ;
6108: LD_ADDR_EXP 19
6112: PUSH
6113: EMPTY
6114: ST_TO_ADDR
// mc_tech := [ ] ;
6115: LD_ADDR_EXP 20
6119: PUSH
6120: EMPTY
6121: ST_TO_ADDR
// mc_attack := [ ] ;
6122: LD_ADDR_EXP 21
6126: PUSH
6127: EMPTY
6128: ST_TO_ADDR
// mc_deposits_xy := [ ] ;
6129: LD_ADDR_EXP 22
6133: PUSH
6134: EMPTY
6135: ST_TO_ADDR
// mc_can_tame := [ ] ;
6136: LD_ADDR_EXP 23
6140: PUSH
6141: EMPTY
6142: ST_TO_ADDR
// mc_crates_area := [ ] ;
6143: LD_ADDR_EXP 25
6147: PUSH
6148: EMPTY
6149: ST_TO_ADDR
// mc_teleport_exit := [ ] ;
6150: LD_ADDR_EXP 26
6154: PUSH
6155: EMPTY
6156: ST_TO_ADDR
// mc_allowed_tower_weapons := [ ] ;
6157: LD_ADDR_EXP 27
6161: PUSH
6162: EMPTY
6163: ST_TO_ADDR
// mc_parking := [ ] ;
6164: LD_ADDR_EXP 28
6168: PUSH
6169: EMPTY
6170: ST_TO_ADDR
// mc_scan_area := [ ] ;
6171: LD_ADDR_EXP 29
6175: PUSH
6176: EMPTY
6177: ST_TO_ADDR
// mc_danger := [ ] ;
6178: LD_ADDR_EXP 30
6182: PUSH
6183: EMPTY
6184: ST_TO_ADDR
// end ; end_of_file
6185: LD_VAR 0 1
6189: RET
// export mct_none , mct_change_class , mct_build , mct_collect_crates , mct_heal ; export function MCT_InitTags ; begin
6190: LD_INT 0
6192: PPUSH
// mct_none := 0 ;
6193: LD_ADDR_EXP 31
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// mct_change_class := 1 ;
6201: LD_ADDR_EXP 32
6205: PUSH
6206: LD_INT 1
6208: ST_TO_ADDR
// mct_build := 2 ;
6209: LD_ADDR_EXP 33
6213: PUSH
6214: LD_INT 2
6216: ST_TO_ADDR
// mct_collect_crates := 3 ;
6217: LD_ADDR_EXP 34
6221: PUSH
6222: LD_INT 3
6224: ST_TO_ADDR
// mct_heal := 4 ;
6225: LD_ADDR_EXP 35
6229: PUSH
6230: LD_INT 4
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 1
6237: RET
// export function MCT_GetByTag ( base , tag ) ; var i ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
// result := [ ] ;
6242: LD_ADDR_VAR 0 3
6246: PUSH
6247: EMPTY
6248: ST_TO_ADDR
// if not base then
6249: LD_VAR 0 1
6253: NOT
6254: IFFALSE 6258
// exit ;
6256: GO 6327
// for i in mc_people [ base ] do
6258: LD_ADDR_VAR 0 4
6262: PUSH
6263: LD_EXP 9
6267: PUSH
6268: LD_VAR 0 1
6272: ARRAY
6273: PUSH
6274: FOR_IN
6275: IFFALSE 6325
// if GetTag ( i ) = tag then
6277: LD_VAR 0 4
6281: PPUSH
6282: CALL_OW 110
6286: PUSH
6287: LD_VAR 0 2
6291: EQUAL
6292: IFFALSE 6323
// result := Replace ( result , result + 1 , i ) ;
6294: LD_ADDR_VAR 0 3
6298: PUSH
6299: LD_VAR 0 3
6303: PPUSH
6304: LD_VAR 0 3
6308: PUSH
6309: LD_INT 1
6311: PLUS
6312: PPUSH
6313: LD_VAR 0 4
6317: PPUSH
6318: CALL_OW 1
6322: ST_TO_ADDR
6323: GO 6274
6325: POP
6326: POP
// end ;
6327: LD_VAR 0 3
6331: RET
// export function MCT_ResetTag ( base , tag ) ; var i ; begin
6332: LD_INT 0
6334: PPUSH
6335: PPUSH
// result := MCT_GetByTag ( base , tag ) ;
6336: LD_ADDR_VAR 0 3
6340: PUSH
6341: LD_VAR 0 1
6345: PPUSH
6346: LD_VAR 0 2
6350: PPUSH
6351: CALL 6238 0 2
6355: ST_TO_ADDR
// if result then
6356: LD_VAR 0 3
6360: IFFALSE 6393
// for i in result do
6362: LD_ADDR_VAR 0 4
6366: PUSH
6367: LD_VAR 0 3
6371: PUSH
6372: FOR_IN
6373: IFFALSE 6391
// SetTag ( i , mct_none ) ;
6375: LD_VAR 0 4
6379: PPUSH
6380: LD_EXP 31
6384: PPUSH
6385: CALL_OW 109
6389: GO 6372
6391: POP
6392: POP
// end ;
6393: LD_VAR 0 3
6397: RET
// export function MCT_SetTag ( units , tag ) ; var i ; begin
6398: LD_INT 0
6400: PPUSH
6401: PPUSH
// if not units then
6402: LD_VAR 0 1
6406: NOT
6407: IFFALSE 6411
// exit ;
6409: GO 6442
// for i in units do
6411: LD_ADDR_VAR 0 4
6415: PUSH
6416: LD_VAR 0 1
6420: PUSH
6421: FOR_IN
6422: IFFALSE 6440
// SetTag ( i , tag ) ;
6424: LD_VAR 0 4
6428: PPUSH
6429: LD_VAR 0 2
6433: PPUSH
6434: CALL_OW 109
6438: GO 6421
6440: POP
6441: POP
// end ; end_of_file
6442: LD_VAR 0 3
6446: RET
// export function MC_Exist ( base ) ; begin
6447: LD_INT 0
6449: PPUSH
// result := mc_bases >= base and mc_bases [ base ] > 0 ;
6450: LD_ADDR_VAR 0 2
6454: PUSH
6455: LD_EXP 6
6459: PUSH
6460: LD_VAR 0 1
6464: GREATEREQUAL
6465: PUSH
6466: LD_EXP 6
6470: PUSH
6471: LD_VAR 0 1
6475: ARRAY
6476: PUSH
6477: LD_INT 0
6479: GREATER
6480: AND
6481: ST_TO_ADDR
// end ;
6482: LD_VAR 0 2
6486: RET
// export function MC_GetBestForClass ( base , class , amount ) ; var i , units ; begin
6487: LD_INT 0
6489: PPUSH
6490: PPUSH
6491: PPUSH
// result := [ ] ;
6492: LD_ADDR_VAR 0 4
6496: PUSH
6497: EMPTY
6498: ST_TO_ADDR
// units := SortBySkill ( UnitFilter ( mc_people [ base ] , [ f_not , [ f_class , class ] ] ) , class ) ;
6499: LD_ADDR_VAR 0 6
6503: PUSH
6504: LD_EXP 9
6508: PUSH
6509: LD_VAR 0 1
6513: ARRAY
6514: PPUSH
6515: LD_INT 3
6517: PUSH
6518: LD_INT 25
6520: PUSH
6521: LD_VAR 0 2
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PPUSH
6534: CALL_OW 72
6538: PPUSH
6539: LD_VAR 0 2
6543: PPUSH
6544: CALL 43183 0 2
6548: ST_TO_ADDR
// if not units then
6549: LD_VAR 0 6
6553: NOT
6554: IFFALSE 6558
// exit ;
6556: GO 6649
// for i := 1 to amount do
6558: LD_ADDR_VAR 0 5
6562: PUSH
6563: DOUBLE
6564: LD_INT 1
6566: DEC
6567: ST_TO_ADDR
6568: LD_VAR 0 3
6572: PUSH
6573: FOR_TO
6574: IFFALSE 6647
// begin if i > units then
6576: LD_VAR 0 5
6580: PUSH
6581: LD_VAR 0 6
6585: GREATER
6586: IFFALSE 6592
// exit ;
6588: POP
6589: POP
6590: GO 6649
// if not GetTag ( units [ i ] ) then
6592: LD_VAR 0 6
6596: PUSH
6597: LD_VAR 0 5
6601: ARRAY
6602: PPUSH
6603: CALL_OW 110
6607: NOT
6608: IFFALSE 6645
// result := Replace ( result , result + 1 , units [ i ] ) ;
6610: LD_ADDR_VAR 0 4
6614: PUSH
6615: LD_VAR 0 4
6619: PPUSH
6620: LD_VAR 0 4
6624: PUSH
6625: LD_INT 1
6627: PLUS
6628: PPUSH
6629: LD_VAR 0 6
6633: PUSH
6634: LD_VAR 0 5
6638: ARRAY
6639: PPUSH
6640: CALL_OW 1
6644: ST_TO_ADDR
// end ;
6645: GO 6573
6647: POP
6648: POP
// end ;
6649: LD_VAR 0 4
6653: RET
// export function MC_GetHumanBase ( human ) ; var i ; begin
6654: LD_INT 0
6656: PPUSH
6657: PPUSH
// for i := 1 to mc_people do
6658: LD_ADDR_VAR 0 3
6662: PUSH
6663: DOUBLE
6664: LD_INT 1
6666: DEC
6667: ST_TO_ADDR
6668: LD_EXP 9
6672: PUSH
6673: FOR_TO
6674: IFFALSE 6710
// if human in mc_people [ i ] then
6676: LD_VAR 0 1
6680: PUSH
6681: LD_EXP 9
6685: PUSH
6686: LD_VAR 0 3
6690: ARRAY
6691: IN
6692: IFFALSE 6708
// begin result := i ;
6694: LD_ADDR_VAR 0 2
6698: PUSH
6699: LD_VAR 0 3
6703: ST_TO_ADDR
// exit ;
6704: POP
6705: POP
6706: GO 6712
// end ;
6708: GO 6673
6710: POP
6711: POP
// end ;
6712: LD_VAR 0 2
6716: RET
// export function MC_ChangeClass ( base , class , units ) ; var i , buildings , b ; begin
6717: LD_INT 0
6719: PPUSH
6720: PPUSH
6721: PPUSH
6722: PPUSH
// if not base or not units then
6723: LD_VAR 0 1
6727: NOT
6728: PUSH
6729: LD_VAR 0 3
6733: NOT
6734: OR
6735: IFFALSE 6739
// exit ;
6737: GO 7220
// case class of 1 , 5 , 6 , 7 , 8 :
6739: LD_VAR 0 2
6743: PUSH
6744: LD_INT 1
6746: DOUBLE
6747: EQUAL
6748: IFTRUE 6776
6750: LD_INT 5
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6776
6756: LD_INT 6
6758: DOUBLE
6759: EQUAL
6760: IFTRUE 6776
6762: LD_INT 7
6764: DOUBLE
6765: EQUAL
6766: IFTRUE 6776
6768: LD_INT 8
6770: DOUBLE
6771: EQUAL
6772: IFTRUE 6776
6774: GO 6828
6776: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
6777: LD_ADDR_VAR 0 6
6781: PUSH
6782: LD_EXP 10
6786: PUSH
6787: LD_VAR 0 1
6791: ARRAY
6792: PPUSH
6793: LD_INT 2
6795: PUSH
6796: LD_INT 30
6798: PUSH
6799: LD_INT 4
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 30
6808: PUSH
6809: LD_INT 5
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: PPUSH
6821: CALL_OW 72
6825: ST_TO_ADDR
6826: GO 7020
6828: LD_INT 2
6830: DOUBLE
6831: EQUAL
6832: IFTRUE 6836
6834: GO 6888
6836: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
6837: LD_ADDR_VAR 0 6
6841: PUSH
6842: LD_EXP 10
6846: PUSH
6847: LD_VAR 0 1
6851: ARRAY
6852: PPUSH
6853: LD_INT 2
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 30
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 72
6885: ST_TO_ADDR
6886: GO 7020
6888: LD_INT 3
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6896
6894: GO 6948
6896: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
6897: LD_ADDR_VAR 0 6
6901: PUSH
6902: LD_EXP 10
6906: PUSH
6907: LD_VAR 0 1
6911: ARRAY
6912: PPUSH
6913: LD_INT 2
6915: PUSH
6916: LD_INT 30
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 30
6928: PUSH
6929: LD_INT 3
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 72
6945: ST_TO_ADDR
6946: GO 7020
6948: LD_INT 4
6950: DOUBLE
6951: EQUAL
6952: IFTRUE 6956
6954: GO 7019
6956: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
6957: LD_ADDR_VAR 0 6
6961: PUSH
6962: LD_EXP 10
6966: PUSH
6967: LD_VAR 0 1
6971: ARRAY
6972: PPUSH
6973: LD_INT 2
6975: PUSH
6976: LD_INT 30
6978: PUSH
6979: LD_INT 6
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 30
6988: PUSH
6989: LD_INT 7
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 30
6998: PUSH
6999: LD_INT 8
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: PPUSH
7012: CALL_OW 72
7016: ST_TO_ADDR
7017: GO 7020
7019: POP
// if not buildings then
7020: LD_VAR 0 6
7024: NOT
7025: IFFALSE 7029
// exit ;
7027: GO 7220
// for i := 1 to units do
7029: LD_ADDR_VAR 0 5
7033: PUSH
7034: DOUBLE
7035: LD_INT 1
7037: DEC
7038: ST_TO_ADDR
7039: LD_VAR 0 3
7043: PUSH
7044: FOR_TO
7045: IFFALSE 7218
// begin if GetClass ( units [ i ] ) = class then
7047: LD_VAR 0 3
7051: PUSH
7052: LD_VAR 0 5
7056: ARRAY
7057: PPUSH
7058: CALL_OW 257
7062: PUSH
7063: LD_VAR 0 2
7067: EQUAL
7068: IFFALSE 7072
// continue ;
7070: GO 7044
// SetTag ( units [ i ] , mct_change_class ) ;
7072: LD_VAR 0 3
7076: PUSH
7077: LD_VAR 0 5
7081: ARRAY
7082: PPUSH
7083: LD_EXP 32
7087: PPUSH
7088: CALL_OW 109
// if buildings > i div 6 then
7092: LD_VAR 0 6
7096: PUSH
7097: LD_VAR 0 5
7101: PUSH
7102: LD_INT 6
7104: DIV
7105: GREATER
7106: IFFALSE 7130
// b := buildings [ i div 6 ] else
7108: LD_ADDR_VAR 0 7
7112: PUSH
7113: LD_VAR 0 6
7117: PUSH
7118: LD_VAR 0 5
7122: PUSH
7123: LD_INT 6
7125: DIV
7126: ARRAY
7127: ST_TO_ADDR
7128: GO 7144
// b := buildings [ 1 ] ;
7130: LD_ADDR_VAR 0 7
7134: PUSH
7135: LD_VAR 0 6
7139: PUSH
7140: LD_INT 1
7142: ARRAY
7143: ST_TO_ADDR
// if IsInUnit ( units [ i ] ) then
7144: LD_VAR 0 3
7148: PUSH
7149: LD_VAR 0 5
7153: ARRAY
7154: PPUSH
7155: CALL_OW 310
7159: IFFALSE 7176
// ComExit ( units [ i ] ) ;
7161: LD_VAR 0 3
7165: PUSH
7166: LD_VAR 0 5
7170: ARRAY
7171: PPUSH
7172: CALL 45065 0 1
// AddComEnterUnit ( units [ i ] , b ) ;
7176: LD_VAR 0 3
7180: PUSH
7181: LD_VAR 0 5
7185: ARRAY
7186: PPUSH
7187: LD_VAR 0 7
7191: PPUSH
7192: CALL_OW 180
// AddComChangeProfession ( units [ i ] , class ) ;
7196: LD_VAR 0 3
7200: PUSH
7201: LD_VAR 0 5
7205: ARRAY
7206: PPUSH
7207: LD_VAR 0 2
7211: PPUSH
7212: CALL_OW 183
// end ;
7216: GO 7044
7218: POP
7219: POP
// end ;
7220: LD_VAR 0 4
7224: RET
// export function MC_GetByClass ( base , class , tag ) ; var i ; begin
7225: LD_INT 0
7227: PPUSH
7228: PPUSH
// result := UnitFilter ( mc_people [ base ] , [ f_class , class ] ) ;
7229: LD_ADDR_VAR 0 4
7233: PUSH
7234: LD_EXP 9
7238: PUSH
7239: LD_VAR 0 1
7243: ARRAY
7244: PPUSH
7245: LD_INT 25
7247: PUSH
7248: LD_VAR 0 2
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 72
7261: ST_TO_ADDR
// if tag > - 1 then
7262: LD_VAR 0 3
7266: PUSH
7267: LD_INT 1
7269: NEG
7270: GREATER
7271: IFFALSE 7323
// for i in result do
7273: LD_ADDR_VAR 0 5
7277: PUSH
7278: LD_VAR 0 4
7282: PUSH
7283: FOR_IN
7284: IFFALSE 7321
// if GetTag ( i ) <> tag then
7286: LD_VAR 0 5
7290: PPUSH
7291: CALL_OW 110
7295: PUSH
7296: LD_VAR 0 3
7300: NONEQUAL
7301: IFFALSE 7319
// result := result diff i ;
7303: LD_ADDR_VAR 0 4
7307: PUSH
7308: LD_VAR 0 4
7312: PUSH
7313: LD_VAR 0 5
7317: DIFF
7318: ST_TO_ADDR
7319: GO 7283
7321: POP
7322: POP
// end ;
7323: LD_VAR 0 4
7327: RET
// export function MC_GetOneByClass ( base , class , tag ) ; begin
7328: LD_INT 0
7330: PPUSH
// result := MC_GetByClass ( base , class , tag ) ;
7331: LD_ADDR_VAR 0 4
7335: PUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: LD_VAR 0 2
7345: PPUSH
7346: LD_VAR 0 3
7350: PPUSH
7351: CALL 7225 0 3
7355: ST_TO_ADDR
// if result then
7356: LD_VAR 0 4
7360: IFFALSE 7376
// result := result [ 1 ] ;
7362: LD_ADDR_VAR 0 4
7366: PUSH
7367: LD_VAR 0 4
7371: PUSH
7372: LD_INT 1
7374: ARRAY
7375: ST_TO_ADDR
// end ;
7376: LD_VAR 0 4
7380: RET
// export function MC_GetBuilding ( base , btype ) ; begin
7381: LD_INT 0
7383: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_btype , btype ] ) ;
7384: LD_ADDR_VAR 0 3
7388: PUSH
7389: LD_EXP 10
7393: PUSH
7394: LD_VAR 0 1
7398: ARRAY
7399: PPUSH
7400: LD_INT 30
7402: PUSH
7403: LD_VAR 0 2
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PPUSH
7412: CALL_OW 72
7416: ST_TO_ADDR
// end ;
7417: LD_VAR 0 3
7421: RET
// export function MC_GetDepot ( base ) ; begin
7422: LD_INT 0
7424: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
7425: LD_ADDR_VAR 0 2
7429: PUSH
7430: LD_EXP 10
7434: PUSH
7435: LD_VAR 0 1
7439: ARRAY
7440: PPUSH
7441: LD_INT 2
7443: PUSH
7444: LD_INT 30
7446: PUSH
7447: LD_INT 0
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 30
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: PPUSH
7469: CALL_OW 72
7473: ST_TO_ADDR
// end ;
7474: LD_VAR 0 2
7478: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
7479: LD_INT 0
7481: PPUSH
// result := mc_vehicles [ base ] ;
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: LD_EXP 11
7491: PUSH
7492: LD_VAR 0 1
7496: ARRAY
7497: ST_TO_ADDR
// if onlyCombat then
7498: LD_VAR 0 2
7502: IFFALSE 7680
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
7504: LD_ADDR_VAR 0 3
7508: PUSH
7509: LD_VAR 0 3
7513: PUSH
7514: LD_VAR 0 3
7518: PPUSH
7519: LD_INT 2
7521: PUSH
7522: LD_INT 34
7524: PUSH
7525: LD_INT 12
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 34
7534: PUSH
7535: LD_INT 51
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: PUSH
7542: LD_INT 34
7544: PUSH
7545: LD_EXP 40
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 34
7556: PUSH
7557: LD_INT 32
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 34
7566: PUSH
7567: LD_INT 13
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 34
7576: PUSH
7577: LD_INT 52
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 34
7586: PUSH
7587: LD_EXP 45
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: LD_INT 34
7598: PUSH
7599: LD_INT 14
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: LD_INT 34
7608: PUSH
7609: LD_INT 53
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 34
7618: PUSH
7619: LD_EXP 39
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 34
7630: PUSH
7631: LD_INT 31
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 34
7640: PUSH
7641: LD_INT 48
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 34
7650: PUSH
7651: LD_INT 8
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: PPUSH
7674: CALL_OW 72
7678: DIFF
7679: ST_TO_ADDR
// end ;
7680: LD_VAR 0 3
7684: RET
// export function MC_Retreat ( base , unit ) ; var depot ; begin
7685: LD_INT 0
7687: PPUSH
7688: PPUSH
// if not base or not unit then
7689: LD_VAR 0 1
7693: NOT
7694: PUSH
7695: LD_VAR 0 2
7699: NOT
7700: OR
7701: IFFALSE 7705
// exit ;
7703: GO 7772
// depot := NearestUnitToUnit ( MC_GetDepot ( base ) , unit ) ;
7705: LD_ADDR_VAR 0 4
7709: PUSH
7710: LD_VAR 0 1
7714: PPUSH
7715: CALL 7422 0 1
7719: PPUSH
7720: LD_VAR 0 2
7724: PPUSH
7725: CALL_OW 74
7729: ST_TO_ADDR
// if depot then
7730: LD_VAR 0 4
7734: IFFALSE 7752
// ComStandNearbyBuilding ( unit , depot ) else
7736: LD_VAR 0 2
7740: PPUSH
7741: LD_VAR 0 4
7745: PPUSH
7746: CALL 9504 0 2
7750: GO 7772
// ComMoveToArea ( unit , mc_scan_area [ base ] ) ;
7752: LD_VAR 0 2
7756: PPUSH
7757: LD_EXP 29
7761: PUSH
7762: LD_VAR 0 1
7766: ARRAY
7767: PPUSH
7768: CALL_OW 113
// end ; end_of_file
7772: LD_VAR 0 3
7776: RET
// export mctm_collect_crates , mctm_build , mctm_ ; export function MCTM_InitTaskManager ( ) ; begin
7777: LD_INT 0
7779: PPUSH
// mctm_collect_crates := 1 ;
7780: LD_ADDR_EXP 36
7784: PUSH
7785: LD_INT 1
7787: ST_TO_ADDR
// mctm_build := 2 ;
7788: LD_ADDR_EXP 37
7792: PUSH
7793: LD_INT 2
7795: ST_TO_ADDR
// end ;
7796: LD_VAR 0 1
7800: RET
// export function MCTM_HasActiveTask ( base , task ) ; begin
7801: LD_INT 0
7803: PPUSH
// result := task in mc_task [ base ] ;
7804: LD_ADDR_VAR 0 3
7808: PUSH
7809: LD_VAR 0 2
7813: PUSH
7814: LD_EXP 8
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: IN
7825: ST_TO_ADDR
// end ;
7826: LD_VAR 0 3
7830: RET
// export function MCTM_SetActiveTask ( base , task ) ; begin
7831: LD_INT 0
7833: PPUSH
// mc_task := Replace ( mc_task , base , Replace ( mc_task [ base ] , mc_task [ base ] + 1 , task ) ) ;
7834: LD_ADDR_EXP 8
7838: PUSH
7839: LD_EXP 8
7843: PPUSH
7844: LD_VAR 0 1
7848: PPUSH
7849: LD_EXP 8
7853: PUSH
7854: LD_VAR 0 1
7858: ARRAY
7859: PPUSH
7860: LD_EXP 8
7864: PUSH
7865: LD_VAR 0 1
7869: ARRAY
7870: PUSH
7871: LD_INT 1
7873: PLUS
7874: PPUSH
7875: LD_VAR 0 2
7879: PPUSH
7880: CALL_OW 1
7884: PPUSH
7885: CALL_OW 1
7889: ST_TO_ADDR
// end ;
7890: LD_VAR 0 3
7894: RET
// export function MCTM_DeleteActiveTask ( base , task ) ; begin
7895: LD_INT 0
7897: PPUSH
// mc_task := Replace ( mc_task , base , mc_task [ base ] diff task ) ;
7898: LD_ADDR_EXP 8
7902: PUSH
7903: LD_EXP 8
7907: PPUSH
7908: LD_VAR 0 1
7912: PPUSH
7913: LD_EXP 8
7917: PUSH
7918: LD_VAR 0 1
7922: ARRAY
7923: PUSH
7924: LD_VAR 0 2
7928: DIFF
7929: PPUSH
7930: CALL_OW 1
7934: ST_TO_ADDR
// end ; end_of_file
7935: LD_VAR 0 3
7939: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
7940: LD_INT 0
7942: PPUSH
7943: PPUSH
// if exist_mode then
7944: LD_VAR 0 2
7948: IFFALSE 7973
// unit := CreateCharacter ( prefix & ident ) else
7950: LD_ADDR_VAR 0 5
7954: PUSH
7955: LD_VAR 0 3
7959: PUSH
7960: LD_VAR 0 1
7964: STR
7965: PPUSH
7966: CALL_OW 34
7970: ST_TO_ADDR
7971: GO 7988
// unit := NewCharacter ( ident ) ;
7973: LD_ADDR_VAR 0 5
7977: PUSH
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 25
7987: ST_TO_ADDR
// result := unit ;
7988: LD_ADDR_VAR 0 4
7992: PUSH
7993: LD_VAR 0 5
7997: ST_TO_ADDR
// end ;
7998: LD_VAR 0 4
8002: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8003: LD_INT 0
8005: PPUSH
8006: PPUSH
// if not side or not nation then
8007: LD_VAR 0 1
8011: NOT
8012: PUSH
8013: LD_VAR 0 2
8017: NOT
8018: OR
8019: IFFALSE 8023
// exit ;
8021: GO 8791
// case nation of nation_american :
8023: LD_VAR 0 2
8027: PUSH
8028: LD_INT 1
8030: DOUBLE
8031: EQUAL
8032: IFTRUE 8036
8034: GO 8250
8036: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8037: LD_ADDR_VAR 0 4
8041: PUSH
8042: LD_INT 35
8044: PUSH
8045: LD_INT 45
8047: PUSH
8048: LD_INT 46
8050: PUSH
8051: LD_INT 47
8053: PUSH
8054: LD_INT 82
8056: PUSH
8057: LD_INT 83
8059: PUSH
8060: LD_INT 84
8062: PUSH
8063: LD_INT 85
8065: PUSH
8066: LD_INT 86
8068: PUSH
8069: LD_INT 1
8071: PUSH
8072: LD_INT 2
8074: PUSH
8075: LD_INT 6
8077: PUSH
8078: LD_INT 15
8080: PUSH
8081: LD_INT 16
8083: PUSH
8084: LD_INT 7
8086: PUSH
8087: LD_INT 12
8089: PUSH
8090: LD_INT 13
8092: PUSH
8093: LD_INT 10
8095: PUSH
8096: LD_INT 14
8098: PUSH
8099: LD_INT 20
8101: PUSH
8102: LD_INT 21
8104: PUSH
8105: LD_INT 22
8107: PUSH
8108: LD_INT 25
8110: PUSH
8111: LD_INT 32
8113: PUSH
8114: LD_INT 27
8116: PUSH
8117: LD_INT 36
8119: PUSH
8120: LD_INT 69
8122: PUSH
8123: LD_INT 39
8125: PUSH
8126: LD_INT 34
8128: PUSH
8129: LD_INT 40
8131: PUSH
8132: LD_INT 48
8134: PUSH
8135: LD_INT 49
8137: PUSH
8138: LD_INT 50
8140: PUSH
8141: LD_INT 51
8143: PUSH
8144: LD_INT 52
8146: PUSH
8147: LD_INT 53
8149: PUSH
8150: LD_INT 54
8152: PUSH
8153: LD_INT 55
8155: PUSH
8156: LD_INT 56
8158: PUSH
8159: LD_INT 57
8161: PUSH
8162: LD_INT 58
8164: PUSH
8165: LD_INT 59
8167: PUSH
8168: LD_INT 60
8170: PUSH
8171: LD_INT 61
8173: PUSH
8174: LD_INT 62
8176: PUSH
8177: LD_INT 80
8179: PUSH
8180: LD_INT 82
8182: PUSH
8183: LD_INT 83
8185: PUSH
8186: LD_INT 84
8188: PUSH
8189: LD_INT 85
8191: PUSH
8192: LD_INT 86
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: ST_TO_ADDR
8248: GO 8715
8250: LD_INT 2
8252: DOUBLE
8253: EQUAL
8254: IFTRUE 8258
8256: GO 8484
8258: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8259: LD_ADDR_VAR 0 4
8263: PUSH
8264: LD_INT 35
8266: PUSH
8267: LD_INT 45
8269: PUSH
8270: LD_INT 46
8272: PUSH
8273: LD_INT 47
8275: PUSH
8276: LD_INT 82
8278: PUSH
8279: LD_INT 83
8281: PUSH
8282: LD_INT 84
8284: PUSH
8285: LD_INT 85
8287: PUSH
8288: LD_INT 87
8290: PUSH
8291: LD_INT 70
8293: PUSH
8294: LD_INT 1
8296: PUSH
8297: LD_INT 11
8299: PUSH
8300: LD_INT 3
8302: PUSH
8303: LD_INT 4
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: LD_INT 6
8311: PUSH
8312: LD_INT 15
8314: PUSH
8315: LD_INT 18
8317: PUSH
8318: LD_INT 7
8320: PUSH
8321: LD_INT 17
8323: PUSH
8324: LD_INT 8
8326: PUSH
8327: LD_INT 20
8329: PUSH
8330: LD_INT 21
8332: PUSH
8333: LD_INT 22
8335: PUSH
8336: LD_INT 72
8338: PUSH
8339: LD_INT 26
8341: PUSH
8342: LD_INT 69
8344: PUSH
8345: LD_INT 39
8347: PUSH
8348: LD_INT 40
8350: PUSH
8351: LD_INT 41
8353: PUSH
8354: LD_INT 42
8356: PUSH
8357: LD_INT 43
8359: PUSH
8360: LD_INT 48
8362: PUSH
8363: LD_INT 49
8365: PUSH
8366: LD_INT 50
8368: PUSH
8369: LD_INT 51
8371: PUSH
8372: LD_INT 52
8374: PUSH
8375: LD_INT 53
8377: PUSH
8378: LD_INT 54
8380: PUSH
8381: LD_INT 55
8383: PUSH
8384: LD_INT 56
8386: PUSH
8387: LD_INT 60
8389: PUSH
8390: LD_INT 61
8392: PUSH
8393: LD_INT 62
8395: PUSH
8396: LD_INT 66
8398: PUSH
8399: LD_INT 67
8401: PUSH
8402: LD_INT 68
8404: PUSH
8405: LD_INT 81
8407: PUSH
8408: LD_INT 82
8410: PUSH
8411: LD_INT 83
8413: PUSH
8414: LD_INT 84
8416: PUSH
8417: LD_INT 85
8419: PUSH
8420: LD_INT 87
8422: PUSH
8423: LD_INT 88
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: ST_TO_ADDR
8482: GO 8715
8484: LD_INT 3
8486: DOUBLE
8487: EQUAL
8488: IFTRUE 8492
8490: GO 8714
8492: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8493: LD_ADDR_VAR 0 4
8497: PUSH
8498: LD_INT 46
8500: PUSH
8501: LD_INT 47
8503: PUSH
8504: LD_INT 1
8506: PUSH
8507: LD_INT 2
8509: PUSH
8510: LD_INT 82
8512: PUSH
8513: LD_INT 83
8515: PUSH
8516: LD_INT 84
8518: PUSH
8519: LD_INT 85
8521: PUSH
8522: LD_INT 86
8524: PUSH
8525: LD_INT 11
8527: PUSH
8528: LD_INT 9
8530: PUSH
8531: LD_INT 20
8533: PUSH
8534: LD_INT 19
8536: PUSH
8537: LD_INT 21
8539: PUSH
8540: LD_INT 24
8542: PUSH
8543: LD_INT 22
8545: PUSH
8546: LD_INT 25
8548: PUSH
8549: LD_INT 28
8551: PUSH
8552: LD_INT 29
8554: PUSH
8555: LD_INT 30
8557: PUSH
8558: LD_INT 31
8560: PUSH
8561: LD_INT 37
8563: PUSH
8564: LD_INT 38
8566: PUSH
8567: LD_INT 32
8569: PUSH
8570: LD_INT 27
8572: PUSH
8573: LD_INT 33
8575: PUSH
8576: LD_INT 69
8578: PUSH
8579: LD_INT 39
8581: PUSH
8582: LD_INT 34
8584: PUSH
8585: LD_INT 40
8587: PUSH
8588: LD_INT 71
8590: PUSH
8591: LD_INT 23
8593: PUSH
8594: LD_INT 44
8596: PUSH
8597: LD_INT 48
8599: PUSH
8600: LD_INT 49
8602: PUSH
8603: LD_INT 50
8605: PUSH
8606: LD_INT 51
8608: PUSH
8609: LD_INT 52
8611: PUSH
8612: LD_INT 53
8614: PUSH
8615: LD_INT 54
8617: PUSH
8618: LD_INT 55
8620: PUSH
8621: LD_INT 56
8623: PUSH
8624: LD_INT 57
8626: PUSH
8627: LD_INT 58
8629: PUSH
8630: LD_INT 59
8632: PUSH
8633: LD_INT 63
8635: PUSH
8636: LD_INT 64
8638: PUSH
8639: LD_INT 65
8641: PUSH
8642: LD_INT 82
8644: PUSH
8645: LD_INT 83
8647: PUSH
8648: LD_INT 84
8650: PUSH
8651: LD_INT 85
8653: PUSH
8654: LD_INT 86
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: ST_TO_ADDR
8712: GO 8715
8714: POP
// if state > - 1 and state < 3 then
8715: LD_VAR 0 3
8719: PUSH
8720: LD_INT 1
8722: NEG
8723: GREATER
8724: PUSH
8725: LD_VAR 0 3
8729: PUSH
8730: LD_INT 3
8732: LESS
8733: AND
8734: IFFALSE 8791
// for i in result do
8736: LD_ADDR_VAR 0 5
8740: PUSH
8741: LD_VAR 0 4
8745: PUSH
8746: FOR_IN
8747: IFFALSE 8789
// if GetTech ( i , side ) <> state then
8749: LD_VAR 0 5
8753: PPUSH
8754: LD_VAR 0 1
8758: PPUSH
8759: CALL_OW 321
8763: PUSH
8764: LD_VAR 0 3
8768: NONEQUAL
8769: IFFALSE 8787
// result := result diff i ;
8771: LD_ADDR_VAR 0 4
8775: PUSH
8776: LD_VAR 0 4
8780: PUSH
8781: LD_VAR 0 5
8785: DIFF
8786: ST_TO_ADDR
8787: GO 8746
8789: POP
8790: POP
// end ;
8791: LD_VAR 0 4
8795: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8796: LD_INT 0
8798: PPUSH
8799: PPUSH
8800: PPUSH
// result := true ;
8801: LD_ADDR_VAR 0 3
8805: PUSH
8806: LD_INT 1
8808: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8809: LD_ADDR_VAR 0 5
8813: PUSH
8814: LD_VAR 0 2
8818: PPUSH
8819: CALL_OW 480
8823: ST_TO_ADDR
// if not tmp then
8824: LD_VAR 0 5
8828: NOT
8829: IFFALSE 8833
// exit ;
8831: GO 8882
// for i in tmp do
8833: LD_ADDR_VAR 0 4
8837: PUSH
8838: LD_VAR 0 5
8842: PUSH
8843: FOR_IN
8844: IFFALSE 8880
// if GetTech ( i , side ) <> state_researched then
8846: LD_VAR 0 4
8850: PPUSH
8851: LD_VAR 0 1
8855: PPUSH
8856: CALL_OW 321
8860: PUSH
8861: LD_INT 2
8863: NONEQUAL
8864: IFFALSE 8878
// begin result := false ;
8866: LD_ADDR_VAR 0 3
8870: PUSH
8871: LD_INT 0
8873: ST_TO_ADDR
// exit ;
8874: POP
8875: POP
8876: GO 8882
// end ;
8878: GO 8843
8880: POP
8881: POP
// end ;
8882: LD_VAR 0 3
8886: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
8887: LD_INT 0
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
8897: PPUSH
8898: PPUSH
8899: PPUSH
8900: PPUSH
8901: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
8902: LD_VAR 0 1
8906: NOT
8907: PUSH
8908: LD_VAR 0 1
8912: PPUSH
8913: CALL_OW 257
8917: PUSH
8918: LD_INT 9
8920: NONEQUAL
8921: OR
8922: IFFALSE 8926
// exit ;
8924: GO 9499
// side := GetSide ( unit ) ;
8926: LD_ADDR_VAR 0 9
8930: PUSH
8931: LD_VAR 0 1
8935: PPUSH
8936: CALL_OW 255
8940: ST_TO_ADDR
// tech_space := tech_spacanom ;
8941: LD_ADDR_VAR 0 12
8945: PUSH
8946: LD_INT 29
8948: ST_TO_ADDR
// tech_time := tech_taurad ;
8949: LD_ADDR_VAR 0 13
8953: PUSH
8954: LD_INT 28
8956: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
8957: LD_ADDR_VAR 0 11
8961: PUSH
8962: LD_VAR 0 1
8966: PPUSH
8967: CALL_OW 310
8971: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
8972: LD_VAR 0 11
8976: PPUSH
8977: CALL_OW 247
8981: PUSH
8982: LD_INT 2
8984: EQUAL
8985: IFFALSE 8989
// exit ;
8987: GO 9499
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8989: LD_ADDR_VAR 0 8
8993: PUSH
8994: LD_INT 81
8996: PUSH
8997: LD_VAR 0 9
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: LD_INT 3
9008: PUSH
9009: LD_INT 21
9011: PUSH
9012: LD_INT 3
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PPUSH
9027: CALL_OW 69
9031: ST_TO_ADDR
// if not tmp then
9032: LD_VAR 0 8
9036: NOT
9037: IFFALSE 9041
// exit ;
9039: GO 9499
// if in_unit then
9041: LD_VAR 0 11
9045: IFFALSE 9069
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9047: LD_ADDR_VAR 0 10
9051: PUSH
9052: LD_VAR 0 8
9056: PPUSH
9057: LD_VAR 0 11
9061: PPUSH
9062: CALL_OW 74
9066: ST_TO_ADDR
9067: GO 9089
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9069: LD_ADDR_VAR 0 10
9073: PUSH
9074: LD_VAR 0 8
9078: PPUSH
9079: LD_VAR 0 1
9083: PPUSH
9084: CALL_OW 74
9088: ST_TO_ADDR
// if not enemy then
9089: LD_VAR 0 10
9093: NOT
9094: IFFALSE 9098
// exit ;
9096: GO 9499
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9098: LD_VAR 0 11
9102: PUSH
9103: LD_VAR 0 11
9107: PPUSH
9108: LD_VAR 0 10
9112: PPUSH
9113: CALL_OW 296
9117: PUSH
9118: LD_INT 13
9120: GREATER
9121: AND
9122: PUSH
9123: LD_VAR 0 1
9127: PPUSH
9128: LD_VAR 0 10
9132: PPUSH
9133: CALL_OW 296
9137: PUSH
9138: LD_INT 12
9140: GREATER
9141: OR
9142: IFFALSE 9146
// exit ;
9144: GO 9499
// missile := [ 1 ] ;
9146: LD_ADDR_VAR 0 14
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9157: LD_VAR 0 9
9161: PPUSH
9162: LD_VAR 0 12
9166: PPUSH
9167: CALL_OW 325
9171: IFFALSE 9200
// missile := Insert ( missile , missile + 1 , 2 ) ;
9173: LD_ADDR_VAR 0 14
9177: PUSH
9178: LD_VAR 0 14
9182: PPUSH
9183: LD_VAR 0 14
9187: PUSH
9188: LD_INT 1
9190: PLUS
9191: PPUSH
9192: LD_INT 2
9194: PPUSH
9195: CALL_OW 2
9199: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9200: LD_VAR 0 9
9204: PPUSH
9205: LD_VAR 0 13
9209: PPUSH
9210: CALL_OW 325
9214: PUSH
9215: LD_VAR 0 10
9219: PPUSH
9220: CALL_OW 255
9224: PPUSH
9225: LD_VAR 0 13
9229: PPUSH
9230: CALL_OW 325
9234: NOT
9235: AND
9236: IFFALSE 9265
// missile := Insert ( missile , missile + 1 , 3 ) ;
9238: LD_ADDR_VAR 0 14
9242: PUSH
9243: LD_VAR 0 14
9247: PPUSH
9248: LD_VAR 0 14
9252: PUSH
9253: LD_INT 1
9255: PLUS
9256: PPUSH
9257: LD_INT 3
9259: PPUSH
9260: CALL_OW 2
9264: ST_TO_ADDR
// if missile < 2 then
9265: LD_VAR 0 14
9269: PUSH
9270: LD_INT 2
9272: LESS
9273: IFFALSE 9277
// exit ;
9275: GO 9499
// x := GetX ( enemy ) ;
9277: LD_ADDR_VAR 0 4
9281: PUSH
9282: LD_VAR 0 10
9286: PPUSH
9287: CALL_OW 250
9291: ST_TO_ADDR
// y := GetY ( enemy ) ;
9292: LD_ADDR_VAR 0 5
9296: PUSH
9297: LD_VAR 0 10
9301: PPUSH
9302: CALL_OW 251
9306: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9307: LD_ADDR_VAR 0 6
9311: PUSH
9312: LD_VAR 0 4
9316: PUSH
9317: LD_INT 1
9319: NEG
9320: PPUSH
9321: LD_INT 1
9323: PPUSH
9324: CALL_OW 12
9328: PLUS
9329: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9330: LD_ADDR_VAR 0 7
9334: PUSH
9335: LD_VAR 0 5
9339: PUSH
9340: LD_INT 1
9342: NEG
9343: PPUSH
9344: LD_INT 1
9346: PPUSH
9347: CALL_OW 12
9351: PLUS
9352: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9353: LD_VAR 0 6
9357: PPUSH
9358: LD_VAR 0 7
9362: PPUSH
9363: CALL_OW 488
9367: NOT
9368: IFFALSE 9390
// begin _x := x ;
9370: LD_ADDR_VAR 0 6
9374: PUSH
9375: LD_VAR 0 4
9379: ST_TO_ADDR
// _y := y ;
9380: LD_ADDR_VAR 0 7
9384: PUSH
9385: LD_VAR 0 5
9389: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9390: LD_ADDR_VAR 0 3
9394: PUSH
9395: LD_INT 1
9397: PPUSH
9398: LD_VAR 0 14
9402: PPUSH
9403: CALL_OW 12
9407: ST_TO_ADDR
// case i of 1 :
9408: LD_VAR 0 3
9412: PUSH
9413: LD_INT 1
9415: DOUBLE
9416: EQUAL
9417: IFTRUE 9421
9419: GO 9438
9421: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9422: LD_VAR 0 1
9426: PPUSH
9427: LD_VAR 0 10
9431: PPUSH
9432: CALL_OW 115
9436: GO 9499
9438: LD_INT 2
9440: DOUBLE
9441: EQUAL
9442: IFTRUE 9446
9444: GO 9468
9446: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9447: LD_VAR 0 1
9451: PPUSH
9452: LD_VAR 0 6
9456: PPUSH
9457: LD_VAR 0 7
9461: PPUSH
9462: CALL_OW 153
9466: GO 9499
9468: LD_INT 3
9470: DOUBLE
9471: EQUAL
9472: IFTRUE 9476
9474: GO 9498
9476: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9477: LD_VAR 0 1
9481: PPUSH
9482: LD_VAR 0 6
9486: PPUSH
9487: LD_VAR 0 7
9491: PPUSH
9492: CALL_OW 154
9496: GO 9499
9498: POP
// end ;
9499: LD_VAR 0 2
9503: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9504: LD_INT 0
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
9510: PPUSH
9511: PPUSH
// if not unit or not building then
9512: LD_VAR 0 1
9516: NOT
9517: PUSH
9518: LD_VAR 0 2
9522: NOT
9523: OR
9524: IFFALSE 9528
// exit ;
9526: GO 9686
// x := GetX ( building ) ;
9528: LD_ADDR_VAR 0 5
9532: PUSH
9533: LD_VAR 0 2
9537: PPUSH
9538: CALL_OW 250
9542: ST_TO_ADDR
// y := GetY ( building ) ;
9543: LD_ADDR_VAR 0 6
9547: PUSH
9548: LD_VAR 0 2
9552: PPUSH
9553: CALL_OW 251
9557: ST_TO_ADDR
// for i = 0 to 5 do
9558: LD_ADDR_VAR 0 4
9562: PUSH
9563: DOUBLE
9564: LD_INT 0
9566: DEC
9567: ST_TO_ADDR
9568: LD_INT 5
9570: PUSH
9571: FOR_TO
9572: IFFALSE 9684
// begin _x := ShiftX ( x , i , 3 ) ;
9574: LD_ADDR_VAR 0 7
9578: PUSH
9579: LD_VAR 0 5
9583: PPUSH
9584: LD_VAR 0 4
9588: PPUSH
9589: LD_INT 3
9591: PPUSH
9592: CALL_OW 272
9596: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9597: LD_ADDR_VAR 0 8
9601: PUSH
9602: LD_VAR 0 6
9606: PPUSH
9607: LD_VAR 0 4
9611: PPUSH
9612: LD_INT 3
9614: PPUSH
9615: CALL_OW 273
9619: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9620: LD_VAR 0 7
9624: PPUSH
9625: LD_VAR 0 8
9629: PPUSH
9630: CALL_OW 488
9634: NOT
9635: IFFALSE 9639
// continue ;
9637: GO 9571
// if HexInfo ( _x , _y ) = 0 then
9639: LD_VAR 0 7
9643: PPUSH
9644: LD_VAR 0 8
9648: PPUSH
9649: CALL_OW 428
9653: PUSH
9654: LD_INT 0
9656: EQUAL
9657: IFFALSE 9682
// begin ComMoveXY ( unit , _x , _y ) ;
9659: LD_VAR 0 1
9663: PPUSH
9664: LD_VAR 0 7
9668: PPUSH
9669: LD_VAR 0 8
9673: PPUSH
9674: CALL_OW 111
// exit ;
9678: POP
9679: POP
9680: GO 9686
// end ; end ;
9682: GO 9571
9684: POP
9685: POP
// end ;
9686: LD_VAR 0 3
9690: RET
// export function ScanBase ( side , base_area ) ; begin
9691: LD_INT 0
9693: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9694: LD_ADDR_VAR 0 3
9698: PUSH
9699: LD_VAR 0 2
9703: PPUSH
9704: LD_INT 81
9706: PUSH
9707: LD_VAR 0 1
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 70
9720: ST_TO_ADDR
// end ;
9721: LD_VAR 0 3
9725: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9726: LD_INT 0
9728: PPUSH
9729: PPUSH
9730: PPUSH
9731: PPUSH
// result := false ;
9732: LD_ADDR_VAR 0 2
9736: PUSH
9737: LD_INT 0
9739: ST_TO_ADDR
// side := GetSide ( unit ) ;
9740: LD_ADDR_VAR 0 3
9744: PUSH
9745: LD_VAR 0 1
9749: PPUSH
9750: CALL_OW 255
9754: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9755: LD_ADDR_VAR 0 4
9759: PUSH
9760: LD_VAR 0 1
9764: PPUSH
9765: CALL_OW 248
9769: ST_TO_ADDR
// case nat of 1 :
9770: LD_VAR 0 4
9774: PUSH
9775: LD_INT 1
9777: DOUBLE
9778: EQUAL
9779: IFTRUE 9783
9781: GO 9794
9783: POP
// tech := tech_lassight ; 2 :
9784: LD_ADDR_VAR 0 5
9788: PUSH
9789: LD_INT 12
9791: ST_TO_ADDR
9792: GO 9833
9794: LD_INT 2
9796: DOUBLE
9797: EQUAL
9798: IFTRUE 9802
9800: GO 9813
9802: POP
// tech := tech_mortar ; 3 :
9803: LD_ADDR_VAR 0 5
9807: PUSH
9808: LD_INT 41
9810: ST_TO_ADDR
9811: GO 9833
9813: LD_INT 3
9815: DOUBLE
9816: EQUAL
9817: IFTRUE 9821
9819: GO 9832
9821: POP
// tech := tech_bazooka ; end ;
9822: LD_ADDR_VAR 0 5
9826: PUSH
9827: LD_INT 44
9829: ST_TO_ADDR
9830: GO 9833
9832: POP
// if Researched ( side , tech ) then
9833: LD_VAR 0 3
9837: PPUSH
9838: LD_VAR 0 5
9842: PPUSH
9843: CALL_OW 325
9847: IFFALSE 9874
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9849: LD_ADDR_VAR 0 2
9853: PUSH
9854: LD_INT 5
9856: PUSH
9857: LD_INT 8
9859: PUSH
9860: LD_INT 9
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: LIST
9867: PUSH
9868: LD_VAR 0 4
9872: ARRAY
9873: ST_TO_ADDR
// end ;
9874: LD_VAR 0 2
9878: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
9879: LD_INT 0
9881: PPUSH
9882: PPUSH
9883: PPUSH
// if not mines then
9884: LD_VAR 0 2
9888: NOT
9889: IFFALSE 9893
// exit ;
9891: GO 10037
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9893: LD_ADDR_VAR 0 5
9897: PUSH
9898: LD_INT 81
9900: PUSH
9901: LD_VAR 0 1
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 3
9912: PUSH
9913: LD_INT 21
9915: PUSH
9916: LD_INT 3
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PPUSH
9931: CALL_OW 69
9935: ST_TO_ADDR
// for i in mines do
9936: LD_ADDR_VAR 0 4
9940: PUSH
9941: LD_VAR 0 2
9945: PUSH
9946: FOR_IN
9947: IFFALSE 10035
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
9949: LD_VAR 0 4
9953: PUSH
9954: LD_INT 1
9956: ARRAY
9957: PPUSH
9958: LD_VAR 0 4
9962: PUSH
9963: LD_INT 2
9965: ARRAY
9966: PPUSH
9967: CALL_OW 458
9971: NOT
9972: IFFALSE 9976
// continue ;
9974: GO 9946
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
9976: LD_VAR 0 4
9980: PUSH
9981: LD_INT 1
9983: ARRAY
9984: PPUSH
9985: LD_VAR 0 4
9989: PUSH
9990: LD_INT 2
9992: ARRAY
9993: PPUSH
9994: CALL_OW 428
9998: PUSH
9999: LD_VAR 0 5
10003: IN
10004: IFFALSE 10033
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10006: LD_VAR 0 4
10010: PUSH
10011: LD_INT 1
10013: ARRAY
10014: PPUSH
10015: LD_VAR 0 4
10019: PUSH
10020: LD_INT 2
10022: ARRAY
10023: PPUSH
10024: LD_VAR 0 1
10028: PPUSH
10029: CALL_OW 456
// end ;
10033: GO 9946
10035: POP
10036: POP
// end ;
10037: LD_VAR 0 3
10041: RET
// export function Count ( array ) ; var i ; begin
10042: LD_INT 0
10044: PPUSH
10045: PPUSH
// result := 0 ;
10046: LD_ADDR_VAR 0 2
10050: PUSH
10051: LD_INT 0
10053: ST_TO_ADDR
// for i in array do
10054: LD_ADDR_VAR 0 3
10058: PUSH
10059: LD_VAR 0 1
10063: PUSH
10064: FOR_IN
10065: IFFALSE 10089
// if i then
10067: LD_VAR 0 3
10071: IFFALSE 10087
// result := result + 1 ;
10073: LD_ADDR_VAR 0 2
10077: PUSH
10078: LD_VAR 0 2
10082: PUSH
10083: LD_INT 1
10085: PLUS
10086: ST_TO_ADDR
10087: GO 10064
10089: POP
10090: POP
// end ;
10091: LD_VAR 0 2
10095: RET
// export function IsEmpty ( building ) ; begin
10096: LD_INT 0
10098: PPUSH
// if not building then
10099: LD_VAR 0 1
10103: NOT
10104: IFFALSE 10108
// exit ;
10106: GO 10151
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10108: LD_ADDR_VAR 0 2
10112: PUSH
10113: LD_VAR 0 1
10117: PUSH
10118: LD_INT 22
10120: PUSH
10121: LD_VAR 0 1
10125: PPUSH
10126: CALL_OW 255
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 58
10137: PUSH
10138: EMPTY
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 69
10149: IN
10150: ST_TO_ADDR
// end ;
10151: LD_VAR 0 2
10155: RET
// export function IsNotFull ( building ) ; begin
10156: LD_INT 0
10158: PPUSH
// if not building then
10159: LD_VAR 0 1
10163: NOT
10164: IFFALSE 10168
// exit ;
10166: GO 10187
// result := UnitsInside ( building ) < 6 ;
10168: LD_ADDR_VAR 0 2
10172: PUSH
10173: LD_VAR 0 1
10177: PPUSH
10178: CALL_OW 313
10182: PUSH
10183: LD_INT 6
10185: LESS
10186: ST_TO_ADDR
// end ;
10187: LD_VAR 0 2
10191: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10192: LD_INT 0
10194: PPUSH
10195: PPUSH
10196: PPUSH
10197: PPUSH
// tmp := [ ] ;
10198: LD_ADDR_VAR 0 3
10202: PUSH
10203: EMPTY
10204: ST_TO_ADDR
// list := [ ] ;
10205: LD_ADDR_VAR 0 5
10209: PUSH
10210: EMPTY
10211: ST_TO_ADDR
// for i = 16 to 25 do
10212: LD_ADDR_VAR 0 4
10216: PUSH
10217: DOUBLE
10218: LD_INT 16
10220: DEC
10221: ST_TO_ADDR
10222: LD_INT 25
10224: PUSH
10225: FOR_TO
10226: IFFALSE 10299
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10228: LD_ADDR_VAR 0 3
10232: PUSH
10233: LD_VAR 0 3
10237: PUSH
10238: LD_INT 22
10240: PUSH
10241: LD_VAR 0 1
10245: PPUSH
10246: CALL_OW 255
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: LD_INT 91
10257: PUSH
10258: LD_VAR 0 1
10262: PUSH
10263: LD_INT 6
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: PUSH
10271: LD_INT 30
10273: PUSH
10274: LD_VAR 0 4
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: ADD
10296: ST_TO_ADDR
10297: GO 10225
10299: POP
10300: POP
// for i = 1 to tmp do
10301: LD_ADDR_VAR 0 4
10305: PUSH
10306: DOUBLE
10307: LD_INT 1
10309: DEC
10310: ST_TO_ADDR
10311: LD_VAR 0 3
10315: PUSH
10316: FOR_TO
10317: IFFALSE 10405
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10319: LD_ADDR_VAR 0 5
10323: PUSH
10324: LD_VAR 0 5
10328: PUSH
10329: LD_VAR 0 3
10333: PUSH
10334: LD_VAR 0 4
10338: ARRAY
10339: PPUSH
10340: CALL_OW 266
10344: PUSH
10345: LD_VAR 0 3
10349: PUSH
10350: LD_VAR 0 4
10354: ARRAY
10355: PPUSH
10356: CALL_OW 250
10360: PUSH
10361: LD_VAR 0 3
10365: PUSH
10366: LD_VAR 0 4
10370: ARRAY
10371: PPUSH
10372: CALL_OW 251
10376: PUSH
10377: LD_VAR 0 3
10381: PUSH
10382: LD_VAR 0 4
10386: ARRAY
10387: PPUSH
10388: CALL_OW 254
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: ADD
10402: ST_TO_ADDR
10403: GO 10316
10405: POP
10406: POP
// result := list ;
10407: LD_ADDR_VAR 0 2
10411: PUSH
10412: LD_VAR 0 5
10416: ST_TO_ADDR
// end ;
10417: LD_VAR 0 2
10421: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10422: LD_INT 0
10424: PPUSH
10425: PPUSH
10426: PPUSH
10427: PPUSH
10428: PPUSH
10429: PPUSH
10430: PPUSH
// if not factory then
10431: LD_VAR 0 1
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 11033
// if control = control_apeman then
10440: LD_VAR 0 4
10444: PUSH
10445: LD_INT 5
10447: EQUAL
10448: IFFALSE 10557
// begin tmp := UnitsInside ( factory ) ;
10450: LD_ADDR_VAR 0 8
10454: PUSH
10455: LD_VAR 0 1
10459: PPUSH
10460: CALL_OW 313
10464: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10465: LD_VAR 0 8
10469: PPUSH
10470: LD_INT 25
10472: PUSH
10473: LD_INT 12
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PPUSH
10480: CALL_OW 72
10484: NOT
10485: IFFALSE 10495
// control := control_manual ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_INT 1
10494: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10495: LD_ADDR_VAR 0 8
10499: PUSH
10500: LD_VAR 0 1
10504: PPUSH
10505: CALL 10192 0 1
10509: ST_TO_ADDR
// if tmp then
10510: LD_VAR 0 8
10514: IFFALSE 10557
// begin for i in tmp do
10516: LD_ADDR_VAR 0 7
10520: PUSH
10521: LD_VAR 0 8
10525: PUSH
10526: FOR_IN
10527: IFFALSE 10555
// if i [ 1 ] = b_ext_radio then
10529: LD_VAR 0 7
10533: PUSH
10534: LD_INT 1
10536: ARRAY
10537: PUSH
10538: LD_INT 22
10540: EQUAL
10541: IFFALSE 10553
// begin control := control_remote ;
10543: LD_ADDR_VAR 0 4
10547: PUSH
10548: LD_INT 2
10550: ST_TO_ADDR
// break ;
10551: GO 10555
// end ;
10553: GO 10526
10555: POP
10556: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10557: LD_VAR 0 1
10561: PPUSH
10562: LD_VAR 0 2
10566: PPUSH
10567: LD_VAR 0 3
10571: PPUSH
10572: LD_VAR 0 4
10576: PPUSH
10577: LD_VAR 0 5
10581: PPUSH
10582: CALL_OW 448
10586: IFFALSE 10621
// begin result := [ chassis , engine , control , weapon ] ;
10588: LD_ADDR_VAR 0 6
10592: PUSH
10593: LD_VAR 0 2
10597: PUSH
10598: LD_VAR 0 3
10602: PUSH
10603: LD_VAR 0 4
10607: PUSH
10608: LD_VAR 0 5
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: ST_TO_ADDR
// exit ;
10619: GO 11033
// end ; _chassis := AvailableChassisList ( factory ) ;
10621: LD_ADDR_VAR 0 9
10625: PUSH
10626: LD_VAR 0 1
10630: PPUSH
10631: CALL_OW 475
10635: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10636: LD_ADDR_VAR 0 11
10640: PUSH
10641: LD_VAR 0 1
10645: PPUSH
10646: CALL_OW 476
10650: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10651: LD_ADDR_VAR 0 12
10655: PUSH
10656: LD_VAR 0 1
10660: PPUSH
10661: CALL_OW 477
10665: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10666: LD_ADDR_VAR 0 10
10670: PUSH
10671: LD_VAR 0 1
10675: PPUSH
10676: CALL_OW 478
10680: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10681: LD_VAR 0 9
10685: NOT
10686: PUSH
10687: LD_VAR 0 11
10691: NOT
10692: OR
10693: PUSH
10694: LD_VAR 0 12
10698: NOT
10699: OR
10700: PUSH
10701: LD_VAR 0 10
10705: NOT
10706: OR
10707: IFFALSE 10742
// begin result := [ chassis , engine , control , weapon ] ;
10709: LD_ADDR_VAR 0 6
10713: PUSH
10714: LD_VAR 0 2
10718: PUSH
10719: LD_VAR 0 3
10723: PUSH
10724: LD_VAR 0 4
10728: PUSH
10729: LD_VAR 0 5
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: ST_TO_ADDR
// exit ;
10740: GO 11033
// end ; if not chassis in _chassis then
10742: LD_VAR 0 2
10746: PUSH
10747: LD_VAR 0 9
10751: IN
10752: NOT
10753: IFFALSE 10779
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10755: LD_ADDR_VAR 0 2
10759: PUSH
10760: LD_VAR 0 9
10764: PUSH
10765: LD_INT 1
10767: PPUSH
10768: LD_VAR 0 9
10772: PPUSH
10773: CALL_OW 12
10777: ARRAY
10778: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10779: LD_VAR 0 2
10783: PPUSH
10784: LD_VAR 0 3
10788: PPUSH
10789: CALL 11038 0 2
10793: NOT
10794: IFFALSE 10853
// repeat engine := _engine [ 1 ] ;
10796: LD_ADDR_VAR 0 3
10800: PUSH
10801: LD_VAR 0 11
10805: PUSH
10806: LD_INT 1
10808: ARRAY
10809: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10810: LD_ADDR_VAR 0 11
10814: PUSH
10815: LD_VAR 0 11
10819: PPUSH
10820: LD_INT 1
10822: PPUSH
10823: CALL_OW 3
10827: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10828: LD_VAR 0 2
10832: PPUSH
10833: LD_VAR 0 3
10837: PPUSH
10838: CALL 11038 0 2
10842: PUSH
10843: LD_VAR 0 11
10847: PUSH
10848: EMPTY
10849: EQUAL
10850: OR
10851: IFFALSE 10796
// if not control in _control then
10853: LD_VAR 0 4
10857: PUSH
10858: LD_VAR 0 12
10862: IN
10863: NOT
10864: IFFALSE 10890
// control := _control [ rand ( 1 , _control ) ] ;
10866: LD_ADDR_VAR 0 4
10870: PUSH
10871: LD_VAR 0 12
10875: PUSH
10876: LD_INT 1
10878: PPUSH
10879: LD_VAR 0 12
10883: PPUSH
10884: CALL_OW 12
10888: ARRAY
10889: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
10890: LD_VAR 0 2
10894: PPUSH
10895: LD_VAR 0 5
10899: PPUSH
10900: CALL 11258 0 2
10904: NOT
10905: IFFALSE 10964
// repeat weapon := _weapon [ 1 ] ;
10907: LD_ADDR_VAR 0 5
10911: PUSH
10912: LD_VAR 0 10
10916: PUSH
10917: LD_INT 1
10919: ARRAY
10920: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
10921: LD_ADDR_VAR 0 10
10925: PUSH
10926: LD_VAR 0 10
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 3
10938: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
10939: LD_VAR 0 2
10943: PPUSH
10944: LD_VAR 0 5
10948: PPUSH
10949: CALL 11258 0 2
10953: PUSH
10954: LD_VAR 0 10
10958: PUSH
10959: EMPTY
10960: EQUAL
10961: OR
10962: IFFALSE 10907
// result := [ ] ;
10964: LD_ADDR_VAR 0 6
10968: PUSH
10969: EMPTY
10970: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10971: LD_VAR 0 1
10975: PPUSH
10976: LD_VAR 0 2
10980: PPUSH
10981: LD_VAR 0 3
10985: PPUSH
10986: LD_VAR 0 4
10990: PPUSH
10991: LD_VAR 0 5
10995: PPUSH
10996: CALL_OW 448
11000: IFFALSE 11033
// result := [ chassis , engine , control , weapon ] ;
11002: LD_ADDR_VAR 0 6
11006: PUSH
11007: LD_VAR 0 2
11011: PUSH
11012: LD_VAR 0 3
11016: PUSH
11017: LD_VAR 0 4
11021: PUSH
11022: LD_VAR 0 5
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: ST_TO_ADDR
// end ;
11033: LD_VAR 0 6
11037: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11038: LD_INT 0
11040: PPUSH
// if not chassis or not engine then
11041: LD_VAR 0 1
11045: NOT
11046: PUSH
11047: LD_VAR 0 2
11051: NOT
11052: OR
11053: IFFALSE 11057
// exit ;
11055: GO 11253
// case engine of engine_solar :
11057: LD_VAR 0 2
11061: PUSH
11062: LD_INT 2
11064: DOUBLE
11065: EQUAL
11066: IFTRUE 11070
11068: GO 11108
11070: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11071: LD_ADDR_VAR 0 3
11075: PUSH
11076: LD_INT 11
11078: PUSH
11079: LD_INT 12
11081: PUSH
11082: LD_INT 13
11084: PUSH
11085: LD_INT 14
11087: PUSH
11088: LD_INT 1
11090: PUSH
11091: LD_INT 2
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: ST_TO_ADDR
11106: GO 11237
11108: LD_INT 1
11110: DOUBLE
11111: EQUAL
11112: IFTRUE 11116
11114: GO 11178
11116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11117: LD_ADDR_VAR 0 3
11121: PUSH
11122: LD_INT 11
11124: PUSH
11125: LD_INT 12
11127: PUSH
11128: LD_INT 13
11130: PUSH
11131: LD_INT 14
11133: PUSH
11134: LD_INT 1
11136: PUSH
11137: LD_INT 2
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: LD_INT 4
11145: PUSH
11146: LD_INT 5
11148: PUSH
11149: LD_INT 21
11151: PUSH
11152: LD_INT 23
11154: PUSH
11155: LD_INT 22
11157: PUSH
11158: LD_INT 24
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: ST_TO_ADDR
11176: GO 11237
11178: LD_INT 3
11180: DOUBLE
11181: EQUAL
11182: IFTRUE 11186
11184: GO 11236
11186: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11187: LD_ADDR_VAR 0 3
11191: PUSH
11192: LD_INT 13
11194: PUSH
11195: LD_INT 14
11197: PUSH
11198: LD_INT 2
11200: PUSH
11201: LD_INT 3
11203: PUSH
11204: LD_INT 4
11206: PUSH
11207: LD_INT 5
11209: PUSH
11210: LD_INT 21
11212: PUSH
11213: LD_INT 22
11215: PUSH
11216: LD_INT 23
11218: PUSH
11219: LD_INT 24
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: ST_TO_ADDR
11234: GO 11237
11236: POP
// result := ( chassis in result ) ;
11237: LD_ADDR_VAR 0 3
11241: PUSH
11242: LD_VAR 0 1
11246: PUSH
11247: LD_VAR 0 3
11251: IN
11252: ST_TO_ADDR
// end ;
11253: LD_VAR 0 3
11257: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11258: LD_INT 0
11260: PPUSH
// if not chassis or not weapon then
11261: LD_VAR 0 1
11265: NOT
11266: PUSH
11267: LD_VAR 0 2
11271: NOT
11272: OR
11273: IFFALSE 11277
// exit ;
11275: GO 12339
// case weapon of us_machine_gun :
11277: LD_VAR 0 2
11281: PUSH
11282: LD_INT 2
11284: DOUBLE
11285: EQUAL
11286: IFTRUE 11290
11288: GO 11320
11290: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11291: LD_ADDR_VAR 0 3
11295: PUSH
11296: LD_INT 1
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: LD_INT 3
11304: PUSH
11305: LD_INT 4
11307: PUSH
11308: LD_INT 5
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: ST_TO_ADDR
11318: GO 12323
11320: LD_INT 3
11322: DOUBLE
11323: EQUAL
11324: IFTRUE 11328
11326: GO 11358
11328: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11329: LD_ADDR_VAR 0 3
11333: PUSH
11334: LD_INT 1
11336: PUSH
11337: LD_INT 2
11339: PUSH
11340: LD_INT 3
11342: PUSH
11343: LD_INT 4
11345: PUSH
11346: LD_INT 5
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: ST_TO_ADDR
11356: GO 12323
11358: LD_INT 11
11360: DOUBLE
11361: EQUAL
11362: IFTRUE 11366
11364: GO 11396
11366: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11367: LD_ADDR_VAR 0 3
11371: PUSH
11372: LD_INT 1
11374: PUSH
11375: LD_INT 2
11377: PUSH
11378: LD_INT 3
11380: PUSH
11381: LD_INT 4
11383: PUSH
11384: LD_INT 5
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: ST_TO_ADDR
11394: GO 12323
11396: LD_INT 4
11398: DOUBLE
11399: EQUAL
11400: IFTRUE 11404
11402: GO 11430
11404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11405: LD_ADDR_VAR 0 3
11409: PUSH
11410: LD_INT 2
11412: PUSH
11413: LD_INT 3
11415: PUSH
11416: LD_INT 4
11418: PUSH
11419: LD_INT 5
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: ST_TO_ADDR
11428: GO 12323
11430: LD_INT 5
11432: DOUBLE
11433: EQUAL
11434: IFTRUE 11438
11436: GO 11464
11438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11439: LD_ADDR_VAR 0 3
11443: PUSH
11444: LD_INT 2
11446: PUSH
11447: LD_INT 3
11449: PUSH
11450: LD_INT 4
11452: PUSH
11453: LD_INT 5
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: ST_TO_ADDR
11462: GO 12323
11464: LD_INT 9
11466: DOUBLE
11467: EQUAL
11468: IFTRUE 11472
11470: GO 11498
11472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11473: LD_ADDR_VAR 0 3
11477: PUSH
11478: LD_INT 2
11480: PUSH
11481: LD_INT 3
11483: PUSH
11484: LD_INT 4
11486: PUSH
11487: LD_INT 5
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: ST_TO_ADDR
11496: GO 12323
11498: LD_INT 7
11500: DOUBLE
11501: EQUAL
11502: IFTRUE 11506
11504: GO 11532
11506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11507: LD_ADDR_VAR 0 3
11511: PUSH
11512: LD_INT 2
11514: PUSH
11515: LD_INT 3
11517: PUSH
11518: LD_INT 4
11520: PUSH
11521: LD_INT 5
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: ST_TO_ADDR
11530: GO 12323
11532: LD_INT 12
11534: DOUBLE
11535: EQUAL
11536: IFTRUE 11540
11538: GO 11566
11540: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11541: LD_ADDR_VAR 0 3
11545: PUSH
11546: LD_INT 2
11548: PUSH
11549: LD_INT 3
11551: PUSH
11552: LD_INT 4
11554: PUSH
11555: LD_INT 5
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: ST_TO_ADDR
11564: GO 12323
11566: LD_INT 13
11568: DOUBLE
11569: EQUAL
11570: IFTRUE 11574
11572: GO 11600
11574: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11575: LD_ADDR_VAR 0 3
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: LD_INT 3
11585: PUSH
11586: LD_INT 4
11588: PUSH
11589: LD_INT 5
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: ST_TO_ADDR
11598: GO 12323
11600: LD_INT 14
11602: DOUBLE
11603: EQUAL
11604: IFTRUE 11608
11606: GO 11626
11608: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11609: LD_ADDR_VAR 0 3
11613: PUSH
11614: LD_INT 4
11616: PUSH
11617: LD_INT 5
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: ST_TO_ADDR
11624: GO 12323
11626: LD_INT 6
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11652
11634: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11635: LD_ADDR_VAR 0 3
11639: PUSH
11640: LD_INT 4
11642: PUSH
11643: LD_INT 5
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: ST_TO_ADDR
11650: GO 12323
11652: LD_INT 10
11654: DOUBLE
11655: EQUAL
11656: IFTRUE 11660
11658: GO 11678
11660: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11661: LD_ADDR_VAR 0 3
11665: PUSH
11666: LD_INT 4
11668: PUSH
11669: LD_INT 5
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: ST_TO_ADDR
11676: GO 12323
11678: LD_INT 22
11680: DOUBLE
11681: EQUAL
11682: IFTRUE 11686
11684: GO 11712
11686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11687: LD_ADDR_VAR 0 3
11691: PUSH
11692: LD_INT 11
11694: PUSH
11695: LD_INT 12
11697: PUSH
11698: LD_INT 13
11700: PUSH
11701: LD_INT 14
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: ST_TO_ADDR
11710: GO 12323
11712: LD_INT 23
11714: DOUBLE
11715: EQUAL
11716: IFTRUE 11720
11718: GO 11746
11720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11721: LD_ADDR_VAR 0 3
11725: PUSH
11726: LD_INT 11
11728: PUSH
11729: LD_INT 12
11731: PUSH
11732: LD_INT 13
11734: PUSH
11735: LD_INT 14
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: ST_TO_ADDR
11744: GO 12323
11746: LD_INT 24
11748: DOUBLE
11749: EQUAL
11750: IFTRUE 11754
11752: GO 11780
11754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11755: LD_ADDR_VAR 0 3
11759: PUSH
11760: LD_INT 11
11762: PUSH
11763: LD_INT 12
11765: PUSH
11766: LD_INT 13
11768: PUSH
11769: LD_INT 14
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: ST_TO_ADDR
11778: GO 12323
11780: LD_INT 30
11782: DOUBLE
11783: EQUAL
11784: IFTRUE 11788
11786: GO 11814
11788: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11789: LD_ADDR_VAR 0 3
11793: PUSH
11794: LD_INT 11
11796: PUSH
11797: LD_INT 12
11799: PUSH
11800: LD_INT 13
11802: PUSH
11803: LD_INT 14
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: ST_TO_ADDR
11812: GO 12323
11814: LD_INT 25
11816: DOUBLE
11817: EQUAL
11818: IFTRUE 11822
11820: GO 11840
11822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11823: LD_ADDR_VAR 0 3
11827: PUSH
11828: LD_INT 13
11830: PUSH
11831: LD_INT 14
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: ST_TO_ADDR
11838: GO 12323
11840: LD_INT 27
11842: DOUBLE
11843: EQUAL
11844: IFTRUE 11848
11846: GO 11866
11848: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
11849: LD_ADDR_VAR 0 3
11853: PUSH
11854: LD_INT 13
11856: PUSH
11857: LD_INT 14
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: ST_TO_ADDR
11864: GO 12323
11866: LD_EXP 44
11870: DOUBLE
11871: EQUAL
11872: IFTRUE 11876
11874: GO 11902
11876: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
11877: LD_ADDR_VAR 0 3
11881: PUSH
11882: LD_INT 11
11884: PUSH
11885: LD_INT 12
11887: PUSH
11888: LD_INT 13
11890: PUSH
11891: LD_INT 14
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: ST_TO_ADDR
11900: GO 12323
11902: LD_INT 28
11904: DOUBLE
11905: EQUAL
11906: IFTRUE 11910
11908: GO 11928
11910: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
11911: LD_ADDR_VAR 0 3
11915: PUSH
11916: LD_INT 13
11918: PUSH
11919: LD_INT 14
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: ST_TO_ADDR
11926: GO 12323
11928: LD_INT 29
11930: DOUBLE
11931: EQUAL
11932: IFTRUE 11936
11934: GO 11954
11936: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
11937: LD_ADDR_VAR 0 3
11941: PUSH
11942: LD_INT 13
11944: PUSH
11945: LD_INT 14
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: ST_TO_ADDR
11952: GO 12323
11954: LD_INT 31
11956: DOUBLE
11957: EQUAL
11958: IFTRUE 11962
11960: GO 11980
11962: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
11963: LD_ADDR_VAR 0 3
11967: PUSH
11968: LD_INT 13
11970: PUSH
11971: LD_INT 14
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: ST_TO_ADDR
11978: GO 12323
11980: LD_INT 26
11982: DOUBLE
11983: EQUAL
11984: IFTRUE 11988
11986: GO 12006
11988: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
11989: LD_ADDR_VAR 0 3
11993: PUSH
11994: LD_INT 13
11996: PUSH
11997: LD_INT 14
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: ST_TO_ADDR
12004: GO 12323
12006: LD_INT 42
12008: DOUBLE
12009: EQUAL
12010: IFTRUE 12014
12012: GO 12040
12014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12015: LD_ADDR_VAR 0 3
12019: PUSH
12020: LD_INT 21
12022: PUSH
12023: LD_INT 22
12025: PUSH
12026: LD_INT 23
12028: PUSH
12029: LD_INT 24
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: ST_TO_ADDR
12038: GO 12323
12040: LD_INT 43
12042: DOUBLE
12043: EQUAL
12044: IFTRUE 12048
12046: GO 12074
12048: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12049: LD_ADDR_VAR 0 3
12053: PUSH
12054: LD_INT 21
12056: PUSH
12057: LD_INT 22
12059: PUSH
12060: LD_INT 23
12062: PUSH
12063: LD_INT 24
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: ST_TO_ADDR
12072: GO 12323
12074: LD_INT 44
12076: DOUBLE
12077: EQUAL
12078: IFTRUE 12082
12080: GO 12108
12082: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12083: LD_ADDR_VAR 0 3
12087: PUSH
12088: LD_INT 21
12090: PUSH
12091: LD_INT 22
12093: PUSH
12094: LD_INT 23
12096: PUSH
12097: LD_INT 24
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: ST_TO_ADDR
12106: GO 12323
12108: LD_INT 45
12110: DOUBLE
12111: EQUAL
12112: IFTRUE 12116
12114: GO 12142
12116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12117: LD_ADDR_VAR 0 3
12121: PUSH
12122: LD_INT 21
12124: PUSH
12125: LD_INT 22
12127: PUSH
12128: LD_INT 23
12130: PUSH
12131: LD_INT 24
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: ST_TO_ADDR
12140: GO 12323
12142: LD_INT 49
12144: DOUBLE
12145: EQUAL
12146: IFTRUE 12150
12148: GO 12176
12150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12151: LD_ADDR_VAR 0 3
12155: PUSH
12156: LD_INT 21
12158: PUSH
12159: LD_INT 22
12161: PUSH
12162: LD_INT 23
12164: PUSH
12165: LD_INT 24
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: ST_TO_ADDR
12174: GO 12323
12176: LD_INT 51
12178: DOUBLE
12179: EQUAL
12180: IFTRUE 12184
12182: GO 12210
12184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12185: LD_ADDR_VAR 0 3
12189: PUSH
12190: LD_INT 21
12192: PUSH
12193: LD_INT 22
12195: PUSH
12196: LD_INT 23
12198: PUSH
12199: LD_INT 24
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: ST_TO_ADDR
12208: GO 12323
12210: LD_INT 52
12212: DOUBLE
12213: EQUAL
12214: IFTRUE 12218
12216: GO 12244
12218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12219: LD_ADDR_VAR 0 3
12223: PUSH
12224: LD_INT 21
12226: PUSH
12227: LD_INT 22
12229: PUSH
12230: LD_INT 23
12232: PUSH
12233: LD_INT 24
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: ST_TO_ADDR
12242: GO 12323
12244: LD_INT 53
12246: DOUBLE
12247: EQUAL
12248: IFTRUE 12252
12250: GO 12270
12252: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12253: LD_ADDR_VAR 0 3
12257: PUSH
12258: LD_INT 23
12260: PUSH
12261: LD_INT 24
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: ST_TO_ADDR
12268: GO 12323
12270: LD_INT 46
12272: DOUBLE
12273: EQUAL
12274: IFTRUE 12278
12276: GO 12296
12278: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: LD_INT 23
12286: PUSH
12287: LD_INT 24
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: ST_TO_ADDR
12294: GO 12323
12296: LD_INT 47
12298: DOUBLE
12299: EQUAL
12300: IFTRUE 12304
12302: GO 12322
12304: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12305: LD_ADDR_VAR 0 3
12309: PUSH
12310: LD_INT 23
12312: PUSH
12313: LD_INT 24
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: ST_TO_ADDR
12320: GO 12323
12322: POP
// result := ( chassis in result ) ;
12323: LD_ADDR_VAR 0 3
12327: PUSH
12328: LD_VAR 0 1
12332: PUSH
12333: LD_VAR 0 3
12337: IN
12338: ST_TO_ADDR
// end ;
12339: LD_VAR 0 3
12343: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12344: LD_INT 0
12346: PPUSH
12347: PPUSH
12348: PPUSH
12349: PPUSH
12350: PPUSH
12351: PPUSH
12352: PPUSH
// result := array ;
12353: LD_ADDR_VAR 0 5
12357: PUSH
12358: LD_VAR 0 1
12362: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12363: LD_VAR 0 1
12367: NOT
12368: PUSH
12369: LD_VAR 0 2
12373: NOT
12374: OR
12375: PUSH
12376: LD_VAR 0 3
12380: NOT
12381: OR
12382: PUSH
12383: LD_VAR 0 2
12387: PUSH
12388: LD_VAR 0 1
12392: GREATER
12393: OR
12394: PUSH
12395: LD_VAR 0 3
12399: PUSH
12400: LD_VAR 0 1
12404: GREATER
12405: OR
12406: IFFALSE 12410
// exit ;
12408: GO 12706
// if direction then
12410: LD_VAR 0 4
12414: IFFALSE 12478
// begin d := 1 ;
12416: LD_ADDR_VAR 0 9
12420: PUSH
12421: LD_INT 1
12423: ST_TO_ADDR
// if i_from > i_to then
12424: LD_VAR 0 2
12428: PUSH
12429: LD_VAR 0 3
12433: GREATER
12434: IFFALSE 12460
// length := ( array - i_from ) + i_to else
12436: LD_ADDR_VAR 0 11
12440: PUSH
12441: LD_VAR 0 1
12445: PUSH
12446: LD_VAR 0 2
12450: MINUS
12451: PUSH
12452: LD_VAR 0 3
12456: PLUS
12457: ST_TO_ADDR
12458: GO 12476
// length := i_to - i_from ;
12460: LD_ADDR_VAR 0 11
12464: PUSH
12465: LD_VAR 0 3
12469: PUSH
12470: LD_VAR 0 2
12474: MINUS
12475: ST_TO_ADDR
// end else
12476: GO 12539
// begin d := - 1 ;
12478: LD_ADDR_VAR 0 9
12482: PUSH
12483: LD_INT 1
12485: NEG
12486: ST_TO_ADDR
// if i_from > i_to then
12487: LD_VAR 0 2
12491: PUSH
12492: LD_VAR 0 3
12496: GREATER
12497: IFFALSE 12517
// length := i_from - i_to else
12499: LD_ADDR_VAR 0 11
12503: PUSH
12504: LD_VAR 0 2
12508: PUSH
12509: LD_VAR 0 3
12513: MINUS
12514: ST_TO_ADDR
12515: GO 12539
// length := ( array - i_to ) + i_from ;
12517: LD_ADDR_VAR 0 11
12521: PUSH
12522: LD_VAR 0 1
12526: PUSH
12527: LD_VAR 0 3
12531: MINUS
12532: PUSH
12533: LD_VAR 0 2
12537: PLUS
12538: ST_TO_ADDR
// end ; if not length then
12539: LD_VAR 0 11
12543: NOT
12544: IFFALSE 12548
// exit ;
12546: GO 12706
// tmp := array ;
12548: LD_ADDR_VAR 0 10
12552: PUSH
12553: LD_VAR 0 1
12557: ST_TO_ADDR
// for i = 1 to length do
12558: LD_ADDR_VAR 0 6
12562: PUSH
12563: DOUBLE
12564: LD_INT 1
12566: DEC
12567: ST_TO_ADDR
12568: LD_VAR 0 11
12572: PUSH
12573: FOR_TO
12574: IFFALSE 12694
// begin for j = 1 to array do
12576: LD_ADDR_VAR 0 7
12580: PUSH
12581: DOUBLE
12582: LD_INT 1
12584: DEC
12585: ST_TO_ADDR
12586: LD_VAR 0 1
12590: PUSH
12591: FOR_TO
12592: IFFALSE 12680
// begin k := j + d ;
12594: LD_ADDR_VAR 0 8
12598: PUSH
12599: LD_VAR 0 7
12603: PUSH
12604: LD_VAR 0 9
12608: PLUS
12609: ST_TO_ADDR
// if k > array then
12610: LD_VAR 0 8
12614: PUSH
12615: LD_VAR 0 1
12619: GREATER
12620: IFFALSE 12630
// k := 1 ;
12622: LD_ADDR_VAR 0 8
12626: PUSH
12627: LD_INT 1
12629: ST_TO_ADDR
// if not k then
12630: LD_VAR 0 8
12634: NOT
12635: IFFALSE 12647
// k := array ;
12637: LD_ADDR_VAR 0 8
12641: PUSH
12642: LD_VAR 0 1
12646: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12647: LD_ADDR_VAR 0 10
12651: PUSH
12652: LD_VAR 0 10
12656: PPUSH
12657: LD_VAR 0 8
12661: PPUSH
12662: LD_VAR 0 1
12666: PUSH
12667: LD_VAR 0 7
12671: ARRAY
12672: PPUSH
12673: CALL_OW 1
12677: ST_TO_ADDR
// end ;
12678: GO 12591
12680: POP
12681: POP
// array := tmp ;
12682: LD_ADDR_VAR 0 1
12686: PUSH
12687: LD_VAR 0 10
12691: ST_TO_ADDR
// end ;
12692: GO 12573
12694: POP
12695: POP
// result := array ;
12696: LD_ADDR_VAR 0 5
12700: PUSH
12701: LD_VAR 0 1
12705: ST_TO_ADDR
// end ;
12706: LD_VAR 0 5
12710: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12711: LD_INT 0
12713: PPUSH
12714: PPUSH
// result := 0 ;
12715: LD_ADDR_VAR 0 3
12719: PUSH
12720: LD_INT 0
12722: ST_TO_ADDR
// if not array or not value in array then
12723: LD_VAR 0 1
12727: NOT
12728: PUSH
12729: LD_VAR 0 2
12733: PUSH
12734: LD_VAR 0 1
12738: IN
12739: NOT
12740: OR
12741: IFFALSE 12745
// exit ;
12743: GO 12799
// for i = 1 to array do
12745: LD_ADDR_VAR 0 4
12749: PUSH
12750: DOUBLE
12751: LD_INT 1
12753: DEC
12754: ST_TO_ADDR
12755: LD_VAR 0 1
12759: PUSH
12760: FOR_TO
12761: IFFALSE 12797
// if value = array [ i ] then
12763: LD_VAR 0 2
12767: PUSH
12768: LD_VAR 0 1
12772: PUSH
12773: LD_VAR 0 4
12777: ARRAY
12778: EQUAL
12779: IFFALSE 12795
// begin result := i ;
12781: LD_ADDR_VAR 0 3
12785: PUSH
12786: LD_VAR 0 4
12790: ST_TO_ADDR
// exit ;
12791: POP
12792: POP
12793: GO 12799
// end ;
12795: GO 12760
12797: POP
12798: POP
// end ;
12799: LD_VAR 0 3
12803: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12804: LD_INT 0
12806: PPUSH
// vc_chassis := chassis ;
12807: LD_ADDR_OWVAR 37
12811: PUSH
12812: LD_VAR 0 1
12816: ST_TO_ADDR
// vc_engine := engine ;
12817: LD_ADDR_OWVAR 39
12821: PUSH
12822: LD_VAR 0 2
12826: ST_TO_ADDR
// vc_control := control ;
12827: LD_ADDR_OWVAR 38
12831: PUSH
12832: LD_VAR 0 3
12836: ST_TO_ADDR
// vc_weapon := weapon ;
12837: LD_ADDR_OWVAR 40
12841: PUSH
12842: LD_VAR 0 4
12846: ST_TO_ADDR
// vc_fuel_battery := fuel ;
12847: LD_ADDR_OWVAR 41
12851: PUSH
12852: LD_VAR 0 5
12856: ST_TO_ADDR
// end ;
12857: LD_VAR 0 6
12861: RET
// export function WantPlant ( unit ) ; var task ; begin
12862: LD_INT 0
12864: PPUSH
12865: PPUSH
// result := false ;
12866: LD_ADDR_VAR 0 2
12870: PUSH
12871: LD_INT 0
12873: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
12874: LD_ADDR_VAR 0 3
12878: PUSH
12879: LD_VAR 0 1
12883: PPUSH
12884: CALL_OW 437
12888: ST_TO_ADDR
// if task then
12889: LD_VAR 0 3
12893: IFFALSE 12921
// if task [ 1 ] [ 1 ] = p then
12895: LD_VAR 0 3
12899: PUSH
12900: LD_INT 1
12902: ARRAY
12903: PUSH
12904: LD_INT 1
12906: ARRAY
12907: PUSH
12908: LD_STRING p
12910: EQUAL
12911: IFFALSE 12921
// result := true ;
12913: LD_ADDR_VAR 0 2
12917: PUSH
12918: LD_INT 1
12920: ST_TO_ADDR
// end ;
12921: LD_VAR 0 2
12925: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
12926: LD_INT 0
12928: PPUSH
12929: PPUSH
12930: PPUSH
12931: PPUSH
// if pos < 1 then
12932: LD_VAR 0 2
12936: PUSH
12937: LD_INT 1
12939: LESS
12940: IFFALSE 12944
// exit ;
12942: GO 13247
// if pos = 1 then
12944: LD_VAR 0 2
12948: PUSH
12949: LD_INT 1
12951: EQUAL
12952: IFFALSE 12985
// result := Replace ( arr , pos [ 1 ] , value ) else
12954: LD_ADDR_VAR 0 4
12958: PUSH
12959: LD_VAR 0 1
12963: PPUSH
12964: LD_VAR 0 2
12968: PUSH
12969: LD_INT 1
12971: ARRAY
12972: PPUSH
12973: LD_VAR 0 3
12977: PPUSH
12978: CALL_OW 1
12982: ST_TO_ADDR
12983: GO 13247
// begin tmp := arr ;
12985: LD_ADDR_VAR 0 6
12989: PUSH
12990: LD_VAR 0 1
12994: ST_TO_ADDR
// s_arr := [ tmp ] ;
12995: LD_ADDR_VAR 0 7
12999: PUSH
13000: LD_VAR 0 6
13004: PUSH
13005: EMPTY
13006: LIST
13007: ST_TO_ADDR
// for i = 1 to pos - 1 do
13008: LD_ADDR_VAR 0 5
13012: PUSH
13013: DOUBLE
13014: LD_INT 1
13016: DEC
13017: ST_TO_ADDR
13018: LD_VAR 0 2
13022: PUSH
13023: LD_INT 1
13025: MINUS
13026: PUSH
13027: FOR_TO
13028: IFFALSE 13073
// begin tmp := tmp [ pos [ i ] ] ;
13030: LD_ADDR_VAR 0 6
13034: PUSH
13035: LD_VAR 0 6
13039: PUSH
13040: LD_VAR 0 2
13044: PUSH
13045: LD_VAR 0 5
13049: ARRAY
13050: ARRAY
13051: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13052: LD_ADDR_VAR 0 7
13056: PUSH
13057: LD_VAR 0 7
13061: PUSH
13062: LD_VAR 0 6
13066: PUSH
13067: EMPTY
13068: LIST
13069: ADD
13070: ST_TO_ADDR
// end ;
13071: GO 13027
13073: POP
13074: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13075: LD_ADDR_VAR 0 6
13079: PUSH
13080: LD_VAR 0 6
13084: PPUSH
13085: LD_VAR 0 2
13089: PUSH
13090: LD_VAR 0 2
13094: ARRAY
13095: PPUSH
13096: LD_VAR 0 3
13100: PPUSH
13101: CALL_OW 1
13105: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13106: LD_ADDR_VAR 0 7
13110: PUSH
13111: LD_VAR 0 7
13115: PPUSH
13116: LD_VAR 0 7
13120: PPUSH
13121: LD_VAR 0 6
13125: PPUSH
13126: CALL_OW 1
13130: ST_TO_ADDR
// for i = s_arr downto 2 do
13131: LD_ADDR_VAR 0 5
13135: PUSH
13136: DOUBLE
13137: LD_VAR 0 7
13141: INC
13142: ST_TO_ADDR
13143: LD_INT 2
13145: PUSH
13146: FOR_DOWNTO
13147: IFFALSE 13231
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13149: LD_ADDR_VAR 0 6
13153: PUSH
13154: LD_VAR 0 7
13158: PUSH
13159: LD_VAR 0 5
13163: PUSH
13164: LD_INT 1
13166: MINUS
13167: ARRAY
13168: PPUSH
13169: LD_VAR 0 2
13173: PUSH
13174: LD_VAR 0 5
13178: PUSH
13179: LD_INT 1
13181: MINUS
13182: ARRAY
13183: PPUSH
13184: LD_VAR 0 7
13188: PUSH
13189: LD_VAR 0 5
13193: ARRAY
13194: PPUSH
13195: CALL_OW 1
13199: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13200: LD_ADDR_VAR 0 7
13204: PUSH
13205: LD_VAR 0 7
13209: PPUSH
13210: LD_VAR 0 5
13214: PUSH
13215: LD_INT 1
13217: MINUS
13218: PPUSH
13219: LD_VAR 0 6
13223: PPUSH
13224: CALL_OW 1
13228: ST_TO_ADDR
// end ;
13229: GO 13146
13231: POP
13232: POP
// result := s_arr [ 1 ] ;
13233: LD_ADDR_VAR 0 4
13237: PUSH
13238: LD_VAR 0 7
13242: PUSH
13243: LD_INT 1
13245: ARRAY
13246: ST_TO_ADDR
// end ; end ;
13247: LD_VAR 0 4
13251: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13252: LD_INT 0
13254: PPUSH
13255: PPUSH
// if not list then
13256: LD_VAR 0 1
13260: NOT
13261: IFFALSE 13265
// exit ;
13263: GO 13356
// i := list [ pos1 ] ;
13265: LD_ADDR_VAR 0 5
13269: PUSH
13270: LD_VAR 0 1
13274: PUSH
13275: LD_VAR 0 2
13279: ARRAY
13280: ST_TO_ADDR
// if not i then
13281: LD_VAR 0 5
13285: NOT
13286: IFFALSE 13290
// exit ;
13288: GO 13356
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13290: LD_ADDR_VAR 0 1
13294: PUSH
13295: LD_VAR 0 1
13299: PPUSH
13300: LD_VAR 0 2
13304: PPUSH
13305: LD_VAR 0 1
13309: PUSH
13310: LD_VAR 0 3
13314: ARRAY
13315: PPUSH
13316: CALL_OW 1
13320: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13321: LD_ADDR_VAR 0 1
13325: PUSH
13326: LD_VAR 0 1
13330: PPUSH
13331: LD_VAR 0 3
13335: PPUSH
13336: LD_VAR 0 5
13340: PPUSH
13341: CALL_OW 1
13345: ST_TO_ADDR
// result := list ;
13346: LD_ADDR_VAR 0 4
13350: PUSH
13351: LD_VAR 0 1
13355: ST_TO_ADDR
// end ;
13356: LD_VAR 0 4
13360: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13361: LD_INT 0
13363: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13364: LD_ADDR_VAR 0 5
13368: PUSH
13369: LD_VAR 0 1
13373: PPUSH
13374: CALL_OW 250
13378: PPUSH
13379: LD_VAR 0 1
13383: PPUSH
13384: CALL_OW 251
13388: PPUSH
13389: LD_VAR 0 2
13393: PPUSH
13394: LD_VAR 0 3
13398: PPUSH
13399: LD_VAR 0 4
13403: PPUSH
13404: CALL 13414 0 5
13408: ST_TO_ADDR
// end ;
13409: LD_VAR 0 5
13413: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13414: LD_INT 0
13416: PPUSH
13417: PPUSH
13418: PPUSH
13419: PPUSH
// if not list then
13420: LD_VAR 0 3
13424: NOT
13425: IFFALSE 13429
// exit ;
13427: GO 13817
// result := [ ] ;
13429: LD_ADDR_VAR 0 6
13433: PUSH
13434: EMPTY
13435: ST_TO_ADDR
// for i in list do
13436: LD_ADDR_VAR 0 7
13440: PUSH
13441: LD_VAR 0 3
13445: PUSH
13446: FOR_IN
13447: IFFALSE 13649
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13449: LD_ADDR_VAR 0 9
13453: PUSH
13454: LD_VAR 0 7
13458: PPUSH
13459: LD_VAR 0 1
13463: PPUSH
13464: LD_VAR 0 2
13468: PPUSH
13469: CALL_OW 297
13473: ST_TO_ADDR
// if not result then
13474: LD_VAR 0 6
13478: NOT
13479: IFFALSE 13505
// result := [ [ i , tmp ] ] else
13481: LD_ADDR_VAR 0 6
13485: PUSH
13486: LD_VAR 0 7
13490: PUSH
13491: LD_VAR 0 9
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: ST_TO_ADDR
13503: GO 13647
// begin if result [ result ] [ 2 ] < tmp then
13505: LD_VAR 0 6
13509: PUSH
13510: LD_VAR 0 6
13514: ARRAY
13515: PUSH
13516: LD_INT 2
13518: ARRAY
13519: PUSH
13520: LD_VAR 0 9
13524: LESS
13525: IFFALSE 13567
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13527: LD_ADDR_VAR 0 6
13531: PUSH
13532: LD_VAR 0 6
13536: PPUSH
13537: LD_VAR 0 6
13541: PUSH
13542: LD_INT 1
13544: PLUS
13545: PPUSH
13546: LD_VAR 0 7
13550: PUSH
13551: LD_VAR 0 9
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 2
13564: ST_TO_ADDR
13565: GO 13647
// for j = 1 to result do
13567: LD_ADDR_VAR 0 8
13571: PUSH
13572: DOUBLE
13573: LD_INT 1
13575: DEC
13576: ST_TO_ADDR
13577: LD_VAR 0 6
13581: PUSH
13582: FOR_TO
13583: IFFALSE 13645
// begin if tmp < result [ j ] [ 2 ] then
13585: LD_VAR 0 9
13589: PUSH
13590: LD_VAR 0 6
13594: PUSH
13595: LD_VAR 0 8
13599: ARRAY
13600: PUSH
13601: LD_INT 2
13603: ARRAY
13604: LESS
13605: IFFALSE 13643
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13607: LD_ADDR_VAR 0 6
13611: PUSH
13612: LD_VAR 0 6
13616: PPUSH
13617: LD_VAR 0 8
13621: PPUSH
13622: LD_VAR 0 7
13626: PUSH
13627: LD_VAR 0 9
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PPUSH
13636: CALL_OW 2
13640: ST_TO_ADDR
// break ;
13641: GO 13645
// end ; end ;
13643: GO 13582
13645: POP
13646: POP
// end ; end ;
13647: GO 13446
13649: POP
13650: POP
// if result and not asc then
13651: LD_VAR 0 6
13655: PUSH
13656: LD_VAR 0 4
13660: NOT
13661: AND
13662: IFFALSE 13737
// begin tmp := result ;
13664: LD_ADDR_VAR 0 9
13668: PUSH
13669: LD_VAR 0 6
13673: ST_TO_ADDR
// for i = tmp downto 1 do
13674: LD_ADDR_VAR 0 7
13678: PUSH
13679: DOUBLE
13680: LD_VAR 0 9
13684: INC
13685: ST_TO_ADDR
13686: LD_INT 1
13688: PUSH
13689: FOR_DOWNTO
13690: IFFALSE 13735
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13692: LD_ADDR_VAR 0 6
13696: PUSH
13697: LD_VAR 0 6
13701: PPUSH
13702: LD_VAR 0 9
13706: PUSH
13707: LD_VAR 0 7
13711: MINUS
13712: PUSH
13713: LD_INT 1
13715: PLUS
13716: PPUSH
13717: LD_VAR 0 9
13721: PUSH
13722: LD_VAR 0 7
13726: ARRAY
13727: PPUSH
13728: CALL_OW 1
13732: ST_TO_ADDR
13733: GO 13689
13735: POP
13736: POP
// end ; tmp := [ ] ;
13737: LD_ADDR_VAR 0 9
13741: PUSH
13742: EMPTY
13743: ST_TO_ADDR
// if mode then
13744: LD_VAR 0 5
13748: IFFALSE 13817
// begin for i = 1 to result do
13750: LD_ADDR_VAR 0 7
13754: PUSH
13755: DOUBLE
13756: LD_INT 1
13758: DEC
13759: ST_TO_ADDR
13760: LD_VAR 0 6
13764: PUSH
13765: FOR_TO
13766: IFFALSE 13805
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13768: LD_ADDR_VAR 0 9
13772: PUSH
13773: LD_VAR 0 9
13777: PPUSH
13778: LD_VAR 0 7
13782: PPUSH
13783: LD_VAR 0 6
13787: PUSH
13788: LD_VAR 0 7
13792: ARRAY
13793: PUSH
13794: LD_INT 1
13796: ARRAY
13797: PPUSH
13798: CALL_OW 1
13802: ST_TO_ADDR
13803: GO 13765
13805: POP
13806: POP
// result := tmp ;
13807: LD_ADDR_VAR 0 6
13811: PUSH
13812: LD_VAR 0 9
13816: ST_TO_ADDR
// end ; end ;
13817: LD_VAR 0 6
13821: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13822: LD_INT 0
13824: PPUSH
13825: PPUSH
13826: PPUSH
13827: PPUSH
13828: PPUSH
13829: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13830: LD_ADDR_VAR 0 5
13834: PUSH
13835: LD_INT 0
13837: PUSH
13838: LD_INT 0
13840: PUSH
13841: LD_INT 0
13843: PUSH
13844: EMPTY
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: ST_TO_ADDR
// if not x or not y then
13852: LD_VAR 0 2
13856: NOT
13857: PUSH
13858: LD_VAR 0 3
13862: NOT
13863: OR
13864: IFFALSE 13868
// exit ;
13866: GO 15520
// if not range then
13868: LD_VAR 0 4
13872: NOT
13873: IFFALSE 13883
// range := 10 ;
13875: LD_ADDR_VAR 0 4
13879: PUSH
13880: LD_INT 10
13882: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13883: LD_ADDR_VAR 0 8
13887: PUSH
13888: LD_INT 81
13890: PUSH
13891: LD_VAR 0 1
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 92
13902: PUSH
13903: LD_VAR 0 2
13907: PUSH
13908: LD_VAR 0 3
13912: PUSH
13913: LD_VAR 0 4
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 3
13926: PUSH
13927: LD_INT 21
13929: PUSH
13930: LD_INT 3
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: PPUSH
13946: CALL_OW 69
13950: ST_TO_ADDR
// if not tmp then
13951: LD_VAR 0 8
13955: NOT
13956: IFFALSE 13960
// exit ;
13958: GO 15520
// for i in tmp do
13960: LD_ADDR_VAR 0 6
13964: PUSH
13965: LD_VAR 0 8
13969: PUSH
13970: FOR_IN
13971: IFFALSE 15495
// begin points := [ 0 , 0 , 0 ] ;
13973: LD_ADDR_VAR 0 9
13977: PUSH
13978: LD_INT 0
13980: PUSH
13981: LD_INT 0
13983: PUSH
13984: LD_INT 0
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: LIST
13991: ST_TO_ADDR
// bpoints := 1 ;
13992: LD_ADDR_VAR 0 10
13996: PUSH
13997: LD_INT 1
13999: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14000: LD_VAR 0 6
14004: PPUSH
14005: CALL_OW 247
14009: PUSH
14010: LD_INT 1
14012: DOUBLE
14013: EQUAL
14014: IFTRUE 14018
14016: GO 14596
14018: POP
// begin if GetClass ( i ) = 1 then
14019: LD_VAR 0 6
14023: PPUSH
14024: CALL_OW 257
14028: PUSH
14029: LD_INT 1
14031: EQUAL
14032: IFFALSE 14053
// points := [ 10 , 5 , 3 ] ;
14034: LD_ADDR_VAR 0 9
14038: PUSH
14039: LD_INT 10
14041: PUSH
14042: LD_INT 5
14044: PUSH
14045: LD_INT 3
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: LIST
14052: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14053: LD_VAR 0 6
14057: PPUSH
14058: CALL_OW 257
14062: PUSH
14063: LD_INT 2
14065: PUSH
14066: LD_INT 3
14068: PUSH
14069: LD_INT 4
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: IN
14077: IFFALSE 14098
// points := [ 3 , 2 , 1 ] ;
14079: LD_ADDR_VAR 0 9
14083: PUSH
14084: LD_INT 3
14086: PUSH
14087: LD_INT 2
14089: PUSH
14090: LD_INT 1
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14098: LD_VAR 0 6
14102: PPUSH
14103: CALL_OW 257
14107: PUSH
14108: LD_INT 5
14110: EQUAL
14111: IFFALSE 14132
// points := [ 130 , 5 , 2 ] ;
14113: LD_ADDR_VAR 0 9
14117: PUSH
14118: LD_INT 130
14120: PUSH
14121: LD_INT 5
14123: PUSH
14124: LD_INT 2
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: LIST
14131: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14132: LD_VAR 0 6
14136: PPUSH
14137: CALL_OW 257
14141: PUSH
14142: LD_INT 8
14144: EQUAL
14145: IFFALSE 14166
// points := [ 35 , 35 , 30 ] ;
14147: LD_ADDR_VAR 0 9
14151: PUSH
14152: LD_INT 35
14154: PUSH
14155: LD_INT 35
14157: PUSH
14158: LD_INT 30
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: LIST
14165: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14166: LD_VAR 0 6
14170: PPUSH
14171: CALL_OW 257
14175: PUSH
14176: LD_INT 9
14178: EQUAL
14179: IFFALSE 14200
// points := [ 20 , 55 , 40 ] ;
14181: LD_ADDR_VAR 0 9
14185: PUSH
14186: LD_INT 20
14188: PUSH
14189: LD_INT 55
14191: PUSH
14192: LD_INT 40
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14200: LD_VAR 0 6
14204: PPUSH
14205: CALL_OW 257
14209: PUSH
14210: LD_INT 12
14212: PUSH
14213: LD_INT 16
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: IN
14220: IFFALSE 14241
// points := [ 5 , 3 , 2 ] ;
14222: LD_ADDR_VAR 0 9
14226: PUSH
14227: LD_INT 5
14229: PUSH
14230: LD_INT 3
14232: PUSH
14233: LD_INT 2
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: LIST
14240: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14241: LD_VAR 0 6
14245: PPUSH
14246: CALL_OW 257
14250: PUSH
14251: LD_INT 17
14253: EQUAL
14254: IFFALSE 14275
// points := [ 100 , 50 , 75 ] ;
14256: LD_ADDR_VAR 0 9
14260: PUSH
14261: LD_INT 100
14263: PUSH
14264: LD_INT 50
14266: PUSH
14267: LD_INT 75
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14275: LD_VAR 0 6
14279: PPUSH
14280: CALL_OW 257
14284: PUSH
14285: LD_INT 15
14287: EQUAL
14288: IFFALSE 14309
// points := [ 10 , 5 , 3 ] ;
14290: LD_ADDR_VAR 0 9
14294: PUSH
14295: LD_INT 10
14297: PUSH
14298: LD_INT 5
14300: PUSH
14301: LD_INT 3
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14309: LD_VAR 0 6
14313: PPUSH
14314: CALL_OW 257
14318: PUSH
14319: LD_INT 14
14321: EQUAL
14322: IFFALSE 14343
// points := [ 10 , 0 , 0 ] ;
14324: LD_ADDR_VAR 0 9
14328: PUSH
14329: LD_INT 10
14331: PUSH
14332: LD_INT 0
14334: PUSH
14335: LD_INT 0
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: LIST
14342: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14343: LD_VAR 0 6
14347: PPUSH
14348: CALL_OW 257
14352: PUSH
14353: LD_INT 11
14355: EQUAL
14356: IFFALSE 14377
// points := [ 30 , 10 , 5 ] ;
14358: LD_ADDR_VAR 0 9
14362: PUSH
14363: LD_INT 30
14365: PUSH
14366: LD_INT 10
14368: PUSH
14369: LD_INT 5
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: LIST
14376: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14377: LD_VAR 0 1
14381: PPUSH
14382: LD_INT 5
14384: PPUSH
14385: CALL_OW 321
14389: PUSH
14390: LD_INT 2
14392: EQUAL
14393: IFFALSE 14410
// bpoints := bpoints * 1.8 ;
14395: LD_ADDR_VAR 0 10
14399: PUSH
14400: LD_VAR 0 10
14404: PUSH
14405: LD_REAL  1.80000000000000E+0000
14408: MUL
14409: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14410: LD_VAR 0 6
14414: PPUSH
14415: CALL_OW 257
14419: PUSH
14420: LD_INT 1
14422: PUSH
14423: LD_INT 2
14425: PUSH
14426: LD_INT 3
14428: PUSH
14429: LD_INT 4
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: IN
14438: PUSH
14439: LD_VAR 0 1
14443: PPUSH
14444: LD_INT 51
14446: PPUSH
14447: CALL_OW 321
14451: PUSH
14452: LD_INT 2
14454: EQUAL
14455: AND
14456: IFFALSE 14473
// bpoints := bpoints * 1.2 ;
14458: LD_ADDR_VAR 0 10
14462: PUSH
14463: LD_VAR 0 10
14467: PUSH
14468: LD_REAL  1.20000000000000E+0000
14471: MUL
14472: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14473: LD_VAR 0 6
14477: PPUSH
14478: CALL_OW 257
14482: PUSH
14483: LD_INT 5
14485: PUSH
14486: LD_INT 7
14488: PUSH
14489: LD_INT 9
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: LIST
14496: IN
14497: PUSH
14498: LD_VAR 0 1
14502: PPUSH
14503: LD_INT 52
14505: PPUSH
14506: CALL_OW 321
14510: PUSH
14511: LD_INT 2
14513: EQUAL
14514: AND
14515: IFFALSE 14532
// bpoints := bpoints * 1.5 ;
14517: LD_ADDR_VAR 0 10
14521: PUSH
14522: LD_VAR 0 10
14526: PUSH
14527: LD_REAL  1.50000000000000E+0000
14530: MUL
14531: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_INT 66
14539: PPUSH
14540: CALL_OW 321
14544: PUSH
14545: LD_INT 2
14547: EQUAL
14548: IFFALSE 14565
// bpoints := bpoints * 1.1 ;
14550: LD_ADDR_VAR 0 10
14554: PUSH
14555: LD_VAR 0 10
14559: PUSH
14560: LD_REAL  1.10000000000000E+0000
14563: MUL
14564: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14565: LD_ADDR_VAR 0 10
14569: PUSH
14570: LD_VAR 0 10
14574: PUSH
14575: LD_VAR 0 6
14579: PPUSH
14580: LD_INT 1
14582: PPUSH
14583: CALL_OW 259
14587: PUSH
14588: LD_REAL  1.15000000000000E+0000
14591: MUL
14592: MUL
14593: ST_TO_ADDR
// end ; unit_vehicle :
14594: GO 15424
14596: LD_INT 2
14598: DOUBLE
14599: EQUAL
14600: IFTRUE 14604
14602: GO 15412
14604: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14605: LD_VAR 0 6
14609: PPUSH
14610: CALL_OW 264
14614: PUSH
14615: LD_INT 2
14617: PUSH
14618: LD_INT 42
14620: PUSH
14621: LD_INT 24
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: LIST
14628: IN
14629: IFFALSE 14650
// points := [ 25 , 5 , 3 ] ;
14631: LD_ADDR_VAR 0 9
14635: PUSH
14636: LD_INT 25
14638: PUSH
14639: LD_INT 5
14641: PUSH
14642: LD_INT 3
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: LIST
14649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14650: LD_VAR 0 6
14654: PPUSH
14655: CALL_OW 264
14659: PUSH
14660: LD_INT 4
14662: PUSH
14663: LD_INT 43
14665: PUSH
14666: LD_INT 25
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: IN
14674: IFFALSE 14695
// points := [ 40 , 15 , 5 ] ;
14676: LD_ADDR_VAR 0 9
14680: PUSH
14681: LD_INT 40
14683: PUSH
14684: LD_INT 15
14686: PUSH
14687: LD_INT 5
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14695: LD_VAR 0 6
14699: PPUSH
14700: CALL_OW 264
14704: PUSH
14705: LD_INT 3
14707: PUSH
14708: LD_INT 23
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: IN
14715: IFFALSE 14736
// points := [ 7 , 25 , 8 ] ;
14717: LD_ADDR_VAR 0 9
14721: PUSH
14722: LD_INT 7
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 8
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: LIST
14735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14736: LD_VAR 0 6
14740: PPUSH
14741: CALL_OW 264
14745: PUSH
14746: LD_INT 5
14748: PUSH
14749: LD_INT 27
14751: PUSH
14752: LD_INT 44
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: IN
14760: IFFALSE 14781
// points := [ 14 , 50 , 16 ] ;
14762: LD_ADDR_VAR 0 9
14766: PUSH
14767: LD_INT 14
14769: PUSH
14770: LD_INT 50
14772: PUSH
14773: LD_INT 16
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14781: LD_VAR 0 6
14785: PPUSH
14786: CALL_OW 264
14790: PUSH
14791: LD_INT 6
14793: PUSH
14794: LD_INT 46
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: IN
14801: IFFALSE 14822
// points := [ 32 , 120 , 70 ] ;
14803: LD_ADDR_VAR 0 9
14807: PUSH
14808: LD_INT 32
14810: PUSH
14811: LD_INT 120
14813: PUSH
14814: LD_INT 70
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: LIST
14821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
14822: LD_VAR 0 6
14826: PPUSH
14827: CALL_OW 264
14831: PUSH
14832: LD_INT 7
14834: PUSH
14835: LD_INT 28
14837: PUSH
14838: LD_INT 45
14840: PUSH
14841: LD_EXP 44
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: IN
14852: IFFALSE 14873
// points := [ 35 , 20 , 45 ] ;
14854: LD_ADDR_VAR 0 9
14858: PUSH
14859: LD_INT 35
14861: PUSH
14862: LD_INT 20
14864: PUSH
14865: LD_INT 45
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: LIST
14872: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
14873: LD_VAR 0 6
14877: PPUSH
14878: CALL_OW 264
14882: PUSH
14883: LD_INT 47
14885: PUSH
14886: EMPTY
14887: LIST
14888: IN
14889: IFFALSE 14910
// points := [ 67 , 45 , 75 ] ;
14891: LD_ADDR_VAR 0 9
14895: PUSH
14896: LD_INT 67
14898: PUSH
14899: LD_INT 45
14901: PUSH
14902: LD_INT 75
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
14910: LD_VAR 0 6
14914: PPUSH
14915: CALL_OW 264
14919: PUSH
14920: LD_INT 26
14922: PUSH
14923: EMPTY
14924: LIST
14925: IN
14926: IFFALSE 14947
// points := [ 120 , 30 , 80 ] ;
14928: LD_ADDR_VAR 0 9
14932: PUSH
14933: LD_INT 120
14935: PUSH
14936: LD_INT 30
14938: PUSH
14939: LD_INT 80
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
14947: LD_VAR 0 6
14951: PPUSH
14952: CALL_OW 264
14956: PUSH
14957: LD_INT 22
14959: PUSH
14960: EMPTY
14961: LIST
14962: IN
14963: IFFALSE 14984
// points := [ 40 , 1 , 1 ] ;
14965: LD_ADDR_VAR 0 9
14969: PUSH
14970: LD_INT 40
14972: PUSH
14973: LD_INT 1
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: LIST
14983: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
14984: LD_VAR 0 6
14988: PPUSH
14989: CALL_OW 264
14993: PUSH
14994: LD_INT 29
14996: PUSH
14997: EMPTY
14998: LIST
14999: IN
15000: IFFALSE 15021
// points := [ 70 , 200 , 400 ] ;
15002: LD_ADDR_VAR 0 9
15006: PUSH
15007: LD_INT 70
15009: PUSH
15010: LD_INT 200
15012: PUSH
15013: LD_INT 400
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15021: LD_VAR 0 6
15025: PPUSH
15026: CALL_OW 264
15030: PUSH
15031: LD_INT 14
15033: PUSH
15034: LD_INT 53
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: IN
15041: IFFALSE 15062
// points := [ 40 , 10 , 20 ] ;
15043: LD_ADDR_VAR 0 9
15047: PUSH
15048: LD_INT 40
15050: PUSH
15051: LD_INT 10
15053: PUSH
15054: LD_INT 20
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: LIST
15061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15062: LD_VAR 0 6
15066: PPUSH
15067: CALL_OW 264
15071: PUSH
15072: LD_INT 9
15074: PUSH
15075: EMPTY
15076: LIST
15077: IN
15078: IFFALSE 15099
// points := [ 5 , 70 , 20 ] ;
15080: LD_ADDR_VAR 0 9
15084: PUSH
15085: LD_INT 5
15087: PUSH
15088: LD_INT 70
15090: PUSH
15091: LD_INT 20
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: LIST
15098: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15099: LD_VAR 0 6
15103: PPUSH
15104: CALL_OW 264
15108: PUSH
15109: LD_INT 10
15111: PUSH
15112: EMPTY
15113: LIST
15114: IN
15115: IFFALSE 15136
// points := [ 35 , 110 , 70 ] ;
15117: LD_ADDR_VAR 0 9
15121: PUSH
15122: LD_INT 35
15124: PUSH
15125: LD_INT 110
15127: PUSH
15128: LD_INT 70
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15136: LD_VAR 0 6
15140: PPUSH
15141: CALL_OW 265
15145: PUSH
15146: LD_INT 25
15148: EQUAL
15149: IFFALSE 15170
// points := [ 80 , 65 , 100 ] ;
15151: LD_ADDR_VAR 0 9
15155: PUSH
15156: LD_INT 80
15158: PUSH
15159: LD_INT 65
15161: PUSH
15162: LD_INT 100
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15170: LD_VAR 0 6
15174: PPUSH
15175: CALL_OW 263
15179: PUSH
15180: LD_INT 1
15182: EQUAL
15183: IFFALSE 15218
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15185: LD_ADDR_VAR 0 10
15189: PUSH
15190: LD_VAR 0 10
15194: PUSH
15195: LD_VAR 0 6
15199: PPUSH
15200: CALL_OW 311
15204: PPUSH
15205: LD_INT 3
15207: PPUSH
15208: CALL_OW 259
15212: PUSH
15213: LD_INT 4
15215: MUL
15216: MUL
15217: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15218: LD_VAR 0 6
15222: PPUSH
15223: CALL_OW 263
15227: PUSH
15228: LD_INT 2
15230: EQUAL
15231: IFFALSE 15282
// begin j := IsControledBy ( i ) ;
15233: LD_ADDR_VAR 0 7
15237: PUSH
15238: LD_VAR 0 6
15242: PPUSH
15243: CALL_OW 312
15247: ST_TO_ADDR
// if j then
15248: LD_VAR 0 7
15252: IFFALSE 15282
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15254: LD_ADDR_VAR 0 10
15258: PUSH
15259: LD_VAR 0 10
15263: PUSH
15264: LD_VAR 0 7
15268: PPUSH
15269: LD_INT 3
15271: PPUSH
15272: CALL_OW 259
15276: PUSH
15277: LD_INT 3
15279: MUL
15280: MUL
15281: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15282: LD_VAR 0 6
15286: PPUSH
15287: CALL_OW 264
15291: PUSH
15292: LD_INT 5
15294: PUSH
15295: LD_INT 6
15297: PUSH
15298: LD_INT 46
15300: PUSH
15301: LD_INT 44
15303: PUSH
15304: LD_INT 47
15306: PUSH
15307: LD_INT 45
15309: PUSH
15310: LD_INT 28
15312: PUSH
15313: LD_INT 7
15315: PUSH
15316: LD_INT 27
15318: PUSH
15319: LD_INT 29
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: IN
15334: PUSH
15335: LD_VAR 0 1
15339: PPUSH
15340: LD_INT 52
15342: PPUSH
15343: CALL_OW 321
15347: PUSH
15348: LD_INT 2
15350: EQUAL
15351: AND
15352: IFFALSE 15369
// bpoints := bpoints * 1.2 ;
15354: LD_ADDR_VAR 0 10
15358: PUSH
15359: LD_VAR 0 10
15363: PUSH
15364: LD_REAL  1.20000000000000E+0000
15367: MUL
15368: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15369: LD_VAR 0 6
15373: PPUSH
15374: CALL_OW 264
15378: PUSH
15379: LD_INT 6
15381: PUSH
15382: LD_INT 46
15384: PUSH
15385: LD_INT 47
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: IN
15393: IFFALSE 15410
// bpoints := bpoints * 1.2 ;
15395: LD_ADDR_VAR 0 10
15399: PUSH
15400: LD_VAR 0 10
15404: PUSH
15405: LD_REAL  1.20000000000000E+0000
15408: MUL
15409: ST_TO_ADDR
// end ; unit_building :
15410: GO 15424
15412: LD_INT 3
15414: DOUBLE
15415: EQUAL
15416: IFTRUE 15420
15418: GO 15423
15420: POP
// ; end ;
15421: GO 15424
15423: POP
// for j = 1 to 3 do
15424: LD_ADDR_VAR 0 7
15428: PUSH
15429: DOUBLE
15430: LD_INT 1
15432: DEC
15433: ST_TO_ADDR
15434: LD_INT 3
15436: PUSH
15437: FOR_TO
15438: IFFALSE 15491
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15440: LD_ADDR_VAR 0 5
15444: PUSH
15445: LD_VAR 0 5
15449: PPUSH
15450: LD_VAR 0 7
15454: PPUSH
15455: LD_VAR 0 5
15459: PUSH
15460: LD_VAR 0 7
15464: ARRAY
15465: PUSH
15466: LD_VAR 0 9
15470: PUSH
15471: LD_VAR 0 7
15475: ARRAY
15476: PUSH
15477: LD_VAR 0 10
15481: MUL
15482: PLUS
15483: PPUSH
15484: CALL_OW 1
15488: ST_TO_ADDR
15489: GO 15437
15491: POP
15492: POP
// end ;
15493: GO 13970
15495: POP
15496: POP
// result := Replace ( result , 4 , tmp ) ;
15497: LD_ADDR_VAR 0 5
15501: PUSH
15502: LD_VAR 0 5
15506: PPUSH
15507: LD_INT 4
15509: PPUSH
15510: LD_VAR 0 8
15514: PPUSH
15515: CALL_OW 1
15519: ST_TO_ADDR
// end ;
15520: LD_VAR 0 5
15524: RET
// export function DangerAtRange ( unit , range ) ; begin
15525: LD_INT 0
15527: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15528: LD_ADDR_VAR 0 3
15532: PUSH
15533: LD_VAR 0 1
15537: PPUSH
15538: CALL_OW 255
15542: PPUSH
15543: LD_VAR 0 1
15547: PPUSH
15548: CALL_OW 250
15552: PPUSH
15553: LD_VAR 0 1
15557: PPUSH
15558: CALL_OW 251
15562: PPUSH
15563: LD_VAR 0 2
15567: PPUSH
15568: CALL 13822 0 4
15572: ST_TO_ADDR
// end ;
15573: LD_VAR 0 3
15577: RET
// export function DangerInArea ( side , area ) ; begin
15578: LD_INT 0
15580: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15581: LD_ADDR_VAR 0 3
15585: PUSH
15586: LD_VAR 0 2
15590: PPUSH
15591: LD_INT 81
15593: PUSH
15594: LD_VAR 0 1
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PPUSH
15603: CALL_OW 70
15607: ST_TO_ADDR
// end ;
15608: LD_VAR 0 3
15612: RET
// export function IsExtension ( b ) ; begin
15613: LD_INT 0
15615: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15616: LD_ADDR_VAR 0 2
15620: PUSH
15621: LD_VAR 0 1
15625: PUSH
15626: LD_INT 23
15628: PUSH
15629: LD_INT 20
15631: PUSH
15632: LD_INT 22
15634: PUSH
15635: LD_INT 17
15637: PUSH
15638: LD_INT 24
15640: PUSH
15641: LD_INT 21
15643: PUSH
15644: LD_INT 19
15646: PUSH
15647: LD_INT 16
15649: PUSH
15650: LD_INT 25
15652: PUSH
15653: LD_INT 18
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: IN
15668: ST_TO_ADDR
// end ;
15669: LD_VAR 0 2
15673: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15674: LD_INT 0
15676: PPUSH
15677: PPUSH
15678: PPUSH
// result := [ ] ;
15679: LD_ADDR_VAR 0 4
15683: PUSH
15684: EMPTY
15685: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15686: LD_ADDR_VAR 0 5
15690: PUSH
15691: LD_VAR 0 2
15695: PPUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 3
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 70
15710: ST_TO_ADDR
// if not tmp then
15711: LD_VAR 0 5
15715: NOT
15716: IFFALSE 15720
// exit ;
15718: GO 15784
// if checkLink then
15720: LD_VAR 0 3
15724: IFFALSE 15774
// begin for i in tmp do
15726: LD_ADDR_VAR 0 6
15730: PUSH
15731: LD_VAR 0 5
15735: PUSH
15736: FOR_IN
15737: IFFALSE 15772
// if GetBase ( i ) <> base then
15739: LD_VAR 0 6
15743: PPUSH
15744: CALL_OW 274
15748: PUSH
15749: LD_VAR 0 1
15753: NONEQUAL
15754: IFFALSE 15770
// ComLinkToBase ( base , i ) ;
15756: LD_VAR 0 1
15760: PPUSH
15761: LD_VAR 0 6
15765: PPUSH
15766: CALL_OW 169
15770: GO 15736
15772: POP
15773: POP
// end ; result := tmp ;
15774: LD_ADDR_VAR 0 4
15778: PUSH
15779: LD_VAR 0 5
15783: ST_TO_ADDR
// end ;
15784: LD_VAR 0 4
15788: RET
// export function ComComplete ( units , b ) ; var i ; begin
15789: LD_INT 0
15791: PPUSH
15792: PPUSH
// if not units then
15793: LD_VAR 0 1
15797: NOT
15798: IFFALSE 15802
// exit ;
15800: GO 15892
// for i in units do
15802: LD_ADDR_VAR 0 4
15806: PUSH
15807: LD_VAR 0 1
15811: PUSH
15812: FOR_IN
15813: IFFALSE 15890
// if BuildingStatus ( b ) = bs_build then
15815: LD_VAR 0 2
15819: PPUSH
15820: CALL_OW 461
15824: PUSH
15825: LD_INT 1
15827: EQUAL
15828: IFFALSE 15888
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15830: LD_VAR 0 4
15834: PPUSH
15835: LD_STRING h
15837: PUSH
15838: LD_VAR 0 2
15842: PPUSH
15843: CALL_OW 250
15847: PUSH
15848: LD_VAR 0 2
15852: PPUSH
15853: CALL_OW 251
15857: PUSH
15858: LD_VAR 0 2
15862: PUSH
15863: LD_INT 0
15865: PUSH
15866: LD_INT 0
15868: PUSH
15869: LD_INT 0
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: PUSH
15881: EMPTY
15882: LIST
15883: PPUSH
15884: CALL_OW 446
15888: GO 15812
15890: POP
15891: POP
// end ;
15892: LD_VAR 0 3
15896: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
15897: LD_INT 0
15899: PPUSH
15900: PPUSH
15901: PPUSH
15902: PPUSH
15903: PPUSH
15904: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
15905: LD_VAR 0 1
15909: NOT
15910: PUSH
15911: LD_VAR 0 1
15915: PPUSH
15916: CALL_OW 263
15920: PUSH
15921: LD_INT 2
15923: NONEQUAL
15924: OR
15925: IFFALSE 15929
// exit ;
15927: GO 16245
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
15929: LD_ADDR_VAR 0 6
15933: PUSH
15934: LD_INT 22
15936: PUSH
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 255
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 2
15953: PUSH
15954: LD_INT 30
15956: PUSH
15957: LD_INT 36
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 34
15966: PUSH
15967: LD_INT 31
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: LIST
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PPUSH
15983: CALL_OW 69
15987: ST_TO_ADDR
// if not tmp then
15988: LD_VAR 0 6
15992: NOT
15993: IFFALSE 15997
// exit ;
15995: GO 16245
// result := [ ] ;
15997: LD_ADDR_VAR 0 2
16001: PUSH
16002: EMPTY
16003: ST_TO_ADDR
// for i in tmp do
16004: LD_ADDR_VAR 0 3
16008: PUSH
16009: LD_VAR 0 6
16013: PUSH
16014: FOR_IN
16015: IFFALSE 16086
// begin t := UnitsInside ( i ) ;
16017: LD_ADDR_VAR 0 4
16021: PUSH
16022: LD_VAR 0 3
16026: PPUSH
16027: CALL_OW 313
16031: ST_TO_ADDR
// if t then
16032: LD_VAR 0 4
16036: IFFALSE 16084
// for j in t do
16038: LD_ADDR_VAR 0 7
16042: PUSH
16043: LD_VAR 0 4
16047: PUSH
16048: FOR_IN
16049: IFFALSE 16082
// result := Replace ( result , result + 1 , j ) ;
16051: LD_ADDR_VAR 0 2
16055: PUSH
16056: LD_VAR 0 2
16060: PPUSH
16061: LD_VAR 0 2
16065: PUSH
16066: LD_INT 1
16068: PLUS
16069: PPUSH
16070: LD_VAR 0 7
16074: PPUSH
16075: CALL_OW 1
16079: ST_TO_ADDR
16080: GO 16048
16082: POP
16083: POP
// end ;
16084: GO 16014
16086: POP
16087: POP
// if not result then
16088: LD_VAR 0 2
16092: NOT
16093: IFFALSE 16097
// exit ;
16095: GO 16245
// mech := result [ 1 ] ;
16097: LD_ADDR_VAR 0 5
16101: PUSH
16102: LD_VAR 0 2
16106: PUSH
16107: LD_INT 1
16109: ARRAY
16110: ST_TO_ADDR
// if result > 1 then
16111: LD_VAR 0 2
16115: PUSH
16116: LD_INT 1
16118: GREATER
16119: IFFALSE 16231
// begin for i = 2 to result do
16121: LD_ADDR_VAR 0 3
16125: PUSH
16126: DOUBLE
16127: LD_INT 2
16129: DEC
16130: ST_TO_ADDR
16131: LD_VAR 0 2
16135: PUSH
16136: FOR_TO
16137: IFFALSE 16229
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16139: LD_ADDR_VAR 0 4
16143: PUSH
16144: LD_VAR 0 2
16148: PUSH
16149: LD_VAR 0 3
16153: ARRAY
16154: PPUSH
16155: LD_INT 3
16157: PPUSH
16158: CALL_OW 259
16162: PUSH
16163: LD_VAR 0 2
16167: PUSH
16168: LD_VAR 0 3
16172: ARRAY
16173: PPUSH
16174: CALL_OW 432
16178: MINUS
16179: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16180: LD_VAR 0 4
16184: PUSH
16185: LD_VAR 0 5
16189: PPUSH
16190: LD_INT 3
16192: PPUSH
16193: CALL_OW 259
16197: PUSH
16198: LD_VAR 0 5
16202: PPUSH
16203: CALL_OW 432
16207: MINUS
16208: GREATEREQUAL
16209: IFFALSE 16227
// mech := result [ i ] ;
16211: LD_ADDR_VAR 0 5
16215: PUSH
16216: LD_VAR 0 2
16220: PUSH
16221: LD_VAR 0 3
16225: ARRAY
16226: ST_TO_ADDR
// end ;
16227: GO 16136
16229: POP
16230: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16231: LD_VAR 0 1
16235: PPUSH
16236: LD_VAR 0 5
16240: PPUSH
16241: CALL_OW 135
// end ;
16245: LD_VAR 0 2
16249: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16250: LD_INT 0
16252: PPUSH
16253: PPUSH
16254: PPUSH
16255: PPUSH
16256: PPUSH
16257: PPUSH
16258: PPUSH
16259: PPUSH
16260: PPUSH
16261: PPUSH
16262: PPUSH
16263: PPUSH
16264: PPUSH
// result := [ ] ;
16265: LD_ADDR_VAR 0 7
16269: PUSH
16270: EMPTY
16271: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16272: LD_VAR 0 1
16276: PPUSH
16277: CALL_OW 266
16281: PUSH
16282: LD_INT 0
16284: PUSH
16285: LD_INT 1
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: IN
16292: NOT
16293: IFFALSE 16297
// exit ;
16295: GO 17931
// if name then
16297: LD_VAR 0 3
16301: IFFALSE 16317
// SetBName ( base_dep , name ) ;
16303: LD_VAR 0 1
16307: PPUSH
16308: LD_VAR 0 3
16312: PPUSH
16313: CALL_OW 500
// base := GetBase ( base_dep ) ;
16317: LD_ADDR_VAR 0 15
16321: PUSH
16322: LD_VAR 0 1
16326: PPUSH
16327: CALL_OW 274
16331: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16332: LD_ADDR_VAR 0 16
16336: PUSH
16337: LD_VAR 0 1
16341: PPUSH
16342: CALL_OW 255
16346: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16347: LD_ADDR_VAR 0 17
16351: PUSH
16352: LD_VAR 0 1
16356: PPUSH
16357: CALL_OW 248
16361: ST_TO_ADDR
// if sources then
16362: LD_VAR 0 5
16366: IFFALSE 16413
// for i = 1 to 3 do
16368: LD_ADDR_VAR 0 8
16372: PUSH
16373: DOUBLE
16374: LD_INT 1
16376: DEC
16377: ST_TO_ADDR
16378: LD_INT 3
16380: PUSH
16381: FOR_TO
16382: IFFALSE 16411
// AddResourceType ( base , i , sources [ i ] ) ;
16384: LD_VAR 0 15
16388: PPUSH
16389: LD_VAR 0 8
16393: PPUSH
16394: LD_VAR 0 5
16398: PUSH
16399: LD_VAR 0 8
16403: ARRAY
16404: PPUSH
16405: CALL_OW 276
16409: GO 16381
16411: POP
16412: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16413: LD_ADDR_VAR 0 18
16417: PUSH
16418: LD_VAR 0 15
16422: PPUSH
16423: LD_VAR 0 2
16427: PPUSH
16428: LD_INT 1
16430: PPUSH
16431: CALL 15674 0 3
16435: ST_TO_ADDR
// InitHc ;
16436: CALL_OW 19
// InitUc ;
16440: CALL_OW 18
// uc_side := side ;
16444: LD_ADDR_OWVAR 20
16448: PUSH
16449: LD_VAR 0 16
16453: ST_TO_ADDR
// uc_nation := nation ;
16454: LD_ADDR_OWVAR 21
16458: PUSH
16459: LD_VAR 0 17
16463: ST_TO_ADDR
// if buildings then
16464: LD_VAR 0 18
16468: IFFALSE 17790
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16470: LD_ADDR_VAR 0 19
16474: PUSH
16475: LD_VAR 0 18
16479: PPUSH
16480: LD_INT 2
16482: PUSH
16483: LD_INT 30
16485: PUSH
16486: LD_INT 29
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 30
16495: PUSH
16496: LD_INT 30
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: PPUSH
16508: CALL_OW 72
16512: ST_TO_ADDR
// if tmp then
16513: LD_VAR 0 19
16517: IFFALSE 16565
// for i in tmp do
16519: LD_ADDR_VAR 0 8
16523: PUSH
16524: LD_VAR 0 19
16528: PUSH
16529: FOR_IN
16530: IFFALSE 16563
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16532: LD_VAR 0 8
16536: PPUSH
16537: CALL_OW 250
16541: PPUSH
16542: LD_VAR 0 8
16546: PPUSH
16547: CALL_OW 251
16551: PPUSH
16552: LD_VAR 0 16
16556: PPUSH
16557: CALL_OW 441
16561: GO 16529
16563: POP
16564: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16565: LD_VAR 0 18
16569: PPUSH
16570: LD_INT 2
16572: PUSH
16573: LD_INT 30
16575: PUSH
16576: LD_INT 32
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 30
16585: PUSH
16586: LD_INT 33
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: LIST
16597: PPUSH
16598: CALL_OW 72
16602: IFFALSE 16690
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16604: LD_ADDR_VAR 0 8
16608: PUSH
16609: LD_VAR 0 18
16613: PPUSH
16614: LD_INT 2
16616: PUSH
16617: LD_INT 30
16619: PUSH
16620: LD_INT 32
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 30
16629: PUSH
16630: LD_INT 33
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: PPUSH
16642: CALL_OW 72
16646: PUSH
16647: FOR_IN
16648: IFFALSE 16688
// begin if not GetBWeapon ( i ) then
16650: LD_VAR 0 8
16654: PPUSH
16655: CALL_OW 269
16659: NOT
16660: IFFALSE 16686
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16662: LD_VAR 0 8
16666: PPUSH
16667: LD_VAR 0 8
16671: PPUSH
16672: LD_VAR 0 2
16676: PPUSH
16677: CALL 17936 0 2
16681: PPUSH
16682: CALL_OW 431
// end ;
16686: GO 16647
16688: POP
16689: POP
// end ; for i = 1 to personel do
16690: LD_ADDR_VAR 0 8
16694: PUSH
16695: DOUBLE
16696: LD_INT 1
16698: DEC
16699: ST_TO_ADDR
16700: LD_VAR 0 6
16704: PUSH
16705: FOR_TO
16706: IFFALSE 17770
// begin if i > 4 then
16708: LD_VAR 0 8
16712: PUSH
16713: LD_INT 4
16715: GREATER
16716: IFFALSE 16720
// break ;
16718: GO 17770
// case i of 1 :
16720: LD_VAR 0 8
16724: PUSH
16725: LD_INT 1
16727: DOUBLE
16728: EQUAL
16729: IFTRUE 16733
16731: GO 16813
16733: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16734: LD_ADDR_VAR 0 12
16738: PUSH
16739: LD_VAR 0 18
16743: PPUSH
16744: LD_INT 22
16746: PUSH
16747: LD_VAR 0 16
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 58
16758: PUSH
16759: EMPTY
16760: LIST
16761: PUSH
16762: LD_INT 2
16764: PUSH
16765: LD_INT 30
16767: PUSH
16768: LD_INT 32
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 30
16777: PUSH
16778: LD_INT 4
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 30
16787: PUSH
16788: LD_INT 5
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: PPUSH
16806: CALL_OW 72
16810: ST_TO_ADDR
16811: GO 17035
16813: LD_INT 2
16815: DOUBLE
16816: EQUAL
16817: IFTRUE 16821
16819: GO 16883
16821: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16822: LD_ADDR_VAR 0 12
16826: PUSH
16827: LD_VAR 0 18
16831: PPUSH
16832: LD_INT 22
16834: PUSH
16835: LD_VAR 0 16
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 2
16846: PUSH
16847: LD_INT 30
16849: PUSH
16850: LD_INT 0
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 30
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PPUSH
16876: CALL_OW 72
16880: ST_TO_ADDR
16881: GO 17035
16883: LD_INT 3
16885: DOUBLE
16886: EQUAL
16887: IFTRUE 16891
16889: GO 16953
16891: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
16892: LD_ADDR_VAR 0 12
16896: PUSH
16897: LD_VAR 0 18
16901: PPUSH
16902: LD_INT 22
16904: PUSH
16905: LD_VAR 0 16
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 2
16916: PUSH
16917: LD_INT 30
16919: PUSH
16920: LD_INT 2
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 30
16929: PUSH
16930: LD_INT 3
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PPUSH
16946: CALL_OW 72
16950: ST_TO_ADDR
16951: GO 17035
16953: LD_INT 4
16955: DOUBLE
16956: EQUAL
16957: IFTRUE 16961
16959: GO 17034
16961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
16962: LD_ADDR_VAR 0 12
16966: PUSH
16967: LD_VAR 0 18
16971: PPUSH
16972: LD_INT 22
16974: PUSH
16975: LD_VAR 0 16
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 2
16986: PUSH
16987: LD_INT 30
16989: PUSH
16990: LD_INT 6
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 30
16999: PUSH
17000: LD_INT 7
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 30
17009: PUSH
17010: LD_INT 8
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PPUSH
17027: CALL_OW 72
17031: ST_TO_ADDR
17032: GO 17035
17034: POP
// if i = 1 then
17035: LD_VAR 0 8
17039: PUSH
17040: LD_INT 1
17042: EQUAL
17043: IFFALSE 17154
// begin tmp := [ ] ;
17045: LD_ADDR_VAR 0 19
17049: PUSH
17050: EMPTY
17051: ST_TO_ADDR
// for j in f do
17052: LD_ADDR_VAR 0 9
17056: PUSH
17057: LD_VAR 0 12
17061: PUSH
17062: FOR_IN
17063: IFFALSE 17136
// if GetBType ( j ) = b_bunker then
17065: LD_VAR 0 9
17069: PPUSH
17070: CALL_OW 266
17074: PUSH
17075: LD_INT 32
17077: EQUAL
17078: IFFALSE 17105
// tmp := Insert ( tmp , 1 , j ) else
17080: LD_ADDR_VAR 0 19
17084: PUSH
17085: LD_VAR 0 19
17089: PPUSH
17090: LD_INT 1
17092: PPUSH
17093: LD_VAR 0 9
17097: PPUSH
17098: CALL_OW 2
17102: ST_TO_ADDR
17103: GO 17134
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17105: LD_ADDR_VAR 0 19
17109: PUSH
17110: LD_VAR 0 19
17114: PPUSH
17115: LD_VAR 0 19
17119: PUSH
17120: LD_INT 1
17122: PLUS
17123: PPUSH
17124: LD_VAR 0 9
17128: PPUSH
17129: CALL_OW 2
17133: ST_TO_ADDR
17134: GO 17062
17136: POP
17137: POP
// if tmp then
17138: LD_VAR 0 19
17142: IFFALSE 17154
// f := tmp ;
17144: LD_ADDR_VAR 0 12
17148: PUSH
17149: LD_VAR 0 19
17153: ST_TO_ADDR
// end ; x := personel [ i ] ;
17154: LD_ADDR_VAR 0 13
17158: PUSH
17159: LD_VAR 0 6
17163: PUSH
17164: LD_VAR 0 8
17168: ARRAY
17169: ST_TO_ADDR
// if x = - 1 then
17170: LD_VAR 0 13
17174: PUSH
17175: LD_INT 1
17177: NEG
17178: EQUAL
17179: IFFALSE 17388
// begin for j in f do
17181: LD_ADDR_VAR 0 9
17185: PUSH
17186: LD_VAR 0 12
17190: PUSH
17191: FOR_IN
17192: IFFALSE 17384
// repeat InitHc ;
17194: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17198: LD_VAR 0 9
17202: PPUSH
17203: CALL_OW 266
17207: PUSH
17208: LD_INT 5
17210: EQUAL
17211: IFFALSE 17281
// begin if UnitsInside ( j ) < 3 then
17213: LD_VAR 0 9
17217: PPUSH
17218: CALL_OW 313
17222: PUSH
17223: LD_INT 3
17225: LESS
17226: IFFALSE 17262
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17228: LD_INT 0
17230: PPUSH
17231: LD_INT 5
17233: PUSH
17234: LD_INT 8
17236: PUSH
17237: LD_INT 9
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: PUSH
17245: LD_VAR 0 17
17249: ARRAY
17250: PPUSH
17251: LD_VAR 0 4
17255: PPUSH
17256: CALL_OW 380
17260: GO 17279
// PrepareHuman ( false , i , skill ) ;
17262: LD_INT 0
17264: PPUSH
17265: LD_VAR 0 8
17269: PPUSH
17270: LD_VAR 0 4
17274: PPUSH
17275: CALL_OW 380
// end else
17279: GO 17298
// PrepareHuman ( false , i , skill ) ;
17281: LD_INT 0
17283: PPUSH
17284: LD_VAR 0 8
17288: PPUSH
17289: LD_VAR 0 4
17293: PPUSH
17294: CALL_OW 380
// un := CreateHuman ;
17298: LD_ADDR_VAR 0 14
17302: PUSH
17303: CALL_OW 44
17307: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17308: LD_ADDR_VAR 0 7
17312: PUSH
17313: LD_VAR 0 7
17317: PPUSH
17318: LD_INT 1
17320: PPUSH
17321: LD_VAR 0 14
17325: PPUSH
17326: CALL_OW 2
17330: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17331: LD_VAR 0 14
17335: PPUSH
17336: LD_VAR 0 9
17340: PPUSH
17341: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17345: LD_VAR 0 9
17349: PPUSH
17350: CALL_OW 313
17354: PUSH
17355: LD_INT 6
17357: EQUAL
17358: PUSH
17359: LD_VAR 0 9
17363: PPUSH
17364: CALL_OW 266
17368: PUSH
17369: LD_INT 32
17371: PUSH
17372: LD_INT 31
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: IN
17379: OR
17380: IFFALSE 17194
17382: GO 17191
17384: POP
17385: POP
// end else
17386: GO 17768
// for j = 1 to x do
17388: LD_ADDR_VAR 0 9
17392: PUSH
17393: DOUBLE
17394: LD_INT 1
17396: DEC
17397: ST_TO_ADDR
17398: LD_VAR 0 13
17402: PUSH
17403: FOR_TO
17404: IFFALSE 17766
// begin InitHc ;
17406: CALL_OW 19
// if not f then
17410: LD_VAR 0 12
17414: NOT
17415: IFFALSE 17504
// begin PrepareHuman ( false , i , skill ) ;
17417: LD_INT 0
17419: PPUSH
17420: LD_VAR 0 8
17424: PPUSH
17425: LD_VAR 0 4
17429: PPUSH
17430: CALL_OW 380
// un := CreateHuman ;
17434: LD_ADDR_VAR 0 14
17438: PUSH
17439: CALL_OW 44
17443: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17444: LD_ADDR_VAR 0 7
17448: PUSH
17449: LD_VAR 0 7
17453: PPUSH
17454: LD_INT 1
17456: PPUSH
17457: LD_VAR 0 14
17461: PPUSH
17462: CALL_OW 2
17466: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17467: LD_VAR 0 14
17471: PPUSH
17472: LD_VAR 0 1
17476: PPUSH
17477: CALL_OW 250
17481: PPUSH
17482: LD_VAR 0 1
17486: PPUSH
17487: CALL_OW 251
17491: PPUSH
17492: LD_INT 10
17494: PPUSH
17495: LD_INT 0
17497: PPUSH
17498: CALL_OW 50
// continue ;
17502: GO 17403
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17504: LD_VAR 0 12
17508: PUSH
17509: LD_INT 1
17511: ARRAY
17512: PPUSH
17513: CALL_OW 313
17517: PUSH
17518: LD_VAR 0 12
17522: PUSH
17523: LD_INT 1
17525: ARRAY
17526: PPUSH
17527: CALL_OW 266
17531: PUSH
17532: LD_INT 32
17534: PUSH
17535: LD_INT 31
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: IN
17542: AND
17543: PUSH
17544: LD_VAR 0 12
17548: PUSH
17549: LD_INT 1
17551: ARRAY
17552: PPUSH
17553: CALL_OW 313
17557: PUSH
17558: LD_INT 6
17560: EQUAL
17561: OR
17562: IFFALSE 17582
// f := Delete ( f , 1 ) ;
17564: LD_ADDR_VAR 0 12
17568: PUSH
17569: LD_VAR 0 12
17573: PPUSH
17574: LD_INT 1
17576: PPUSH
17577: CALL_OW 3
17581: ST_TO_ADDR
// if not f then
17582: LD_VAR 0 12
17586: NOT
17587: IFFALSE 17605
// begin x := x + 2 ;
17589: LD_ADDR_VAR 0 13
17593: PUSH
17594: LD_VAR 0 13
17598: PUSH
17599: LD_INT 2
17601: PLUS
17602: ST_TO_ADDR
// continue ;
17603: GO 17403
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17605: LD_VAR 0 12
17609: PUSH
17610: LD_INT 1
17612: ARRAY
17613: PPUSH
17614: CALL_OW 266
17618: PUSH
17619: LD_INT 5
17621: EQUAL
17622: IFFALSE 17696
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17624: LD_VAR 0 12
17628: PUSH
17629: LD_INT 1
17631: ARRAY
17632: PPUSH
17633: CALL_OW 313
17637: PUSH
17638: LD_INT 3
17640: LESS
17641: IFFALSE 17677
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17643: LD_INT 0
17645: PPUSH
17646: LD_INT 5
17648: PUSH
17649: LD_INT 8
17651: PUSH
17652: LD_INT 9
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: LIST
17659: PUSH
17660: LD_VAR 0 17
17664: ARRAY
17665: PPUSH
17666: LD_VAR 0 4
17670: PPUSH
17671: CALL_OW 380
17675: GO 17694
// PrepareHuman ( false , i , skill ) ;
17677: LD_INT 0
17679: PPUSH
17680: LD_VAR 0 8
17684: PPUSH
17685: LD_VAR 0 4
17689: PPUSH
17690: CALL_OW 380
// end else
17694: GO 17713
// PrepareHuman ( false , i , skill ) ;
17696: LD_INT 0
17698: PPUSH
17699: LD_VAR 0 8
17703: PPUSH
17704: LD_VAR 0 4
17708: PPUSH
17709: CALL_OW 380
// un := CreateHuman ;
17713: LD_ADDR_VAR 0 14
17717: PUSH
17718: CALL_OW 44
17722: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17723: LD_ADDR_VAR 0 7
17727: PUSH
17728: LD_VAR 0 7
17732: PPUSH
17733: LD_INT 1
17735: PPUSH
17736: LD_VAR 0 14
17740: PPUSH
17741: CALL_OW 2
17745: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17746: LD_VAR 0 14
17750: PPUSH
17751: LD_VAR 0 12
17755: PUSH
17756: LD_INT 1
17758: ARRAY
17759: PPUSH
17760: CALL_OW 52
// end ;
17764: GO 17403
17766: POP
17767: POP
// end ;
17768: GO 16705
17770: POP
17771: POP
// result := result ^ buildings ;
17772: LD_ADDR_VAR 0 7
17776: PUSH
17777: LD_VAR 0 7
17781: PUSH
17782: LD_VAR 0 18
17786: ADD
17787: ST_TO_ADDR
// end else
17788: GO 17931
// begin for i = 1 to personel do
17790: LD_ADDR_VAR 0 8
17794: PUSH
17795: DOUBLE
17796: LD_INT 1
17798: DEC
17799: ST_TO_ADDR
17800: LD_VAR 0 6
17804: PUSH
17805: FOR_TO
17806: IFFALSE 17929
// begin if i > 4 then
17808: LD_VAR 0 8
17812: PUSH
17813: LD_INT 4
17815: GREATER
17816: IFFALSE 17820
// break ;
17818: GO 17929
// x := personel [ i ] ;
17820: LD_ADDR_VAR 0 13
17824: PUSH
17825: LD_VAR 0 6
17829: PUSH
17830: LD_VAR 0 8
17834: ARRAY
17835: ST_TO_ADDR
// if x = - 1 then
17836: LD_VAR 0 13
17840: PUSH
17841: LD_INT 1
17843: NEG
17844: EQUAL
17845: IFFALSE 17849
// continue ;
17847: GO 17805
// PrepareHuman ( false , i , skill ) ;
17849: LD_INT 0
17851: PPUSH
17852: LD_VAR 0 8
17856: PPUSH
17857: LD_VAR 0 4
17861: PPUSH
17862: CALL_OW 380
// un := CreateHuman ;
17866: LD_ADDR_VAR 0 14
17870: PUSH
17871: CALL_OW 44
17875: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17876: LD_VAR 0 14
17880: PPUSH
17881: LD_VAR 0 1
17885: PPUSH
17886: CALL_OW 250
17890: PPUSH
17891: LD_VAR 0 1
17895: PPUSH
17896: CALL_OW 251
17900: PPUSH
17901: LD_INT 10
17903: PPUSH
17904: LD_INT 0
17906: PPUSH
17907: CALL_OW 50
// result := result ^ un ;
17911: LD_ADDR_VAR 0 7
17915: PUSH
17916: LD_VAR 0 7
17920: PUSH
17921: LD_VAR 0 14
17925: ADD
17926: ST_TO_ADDR
// end ;
17927: GO 17805
17929: POP
17930: POP
// end ; end ;
17931: LD_VAR 0 7
17935: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
17936: LD_INT 0
17938: PPUSH
17939: PPUSH
17940: PPUSH
17941: PPUSH
17942: PPUSH
17943: PPUSH
17944: PPUSH
17945: PPUSH
17946: PPUSH
17947: PPUSH
17948: PPUSH
17949: PPUSH
17950: PPUSH
17951: PPUSH
17952: PPUSH
17953: PPUSH
// result := false ;
17954: LD_ADDR_VAR 0 3
17958: PUSH
17959: LD_INT 0
17961: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
17962: LD_VAR 0 1
17966: NOT
17967: PUSH
17968: LD_VAR 0 1
17972: PPUSH
17973: CALL_OW 266
17977: PUSH
17978: LD_INT 32
17980: PUSH
17981: LD_INT 33
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: IN
17988: NOT
17989: OR
17990: IFFALSE 17994
// exit ;
17992: GO 19103
// nat := GetNation ( tower ) ;
17994: LD_ADDR_VAR 0 12
17998: PUSH
17999: LD_VAR 0 1
18003: PPUSH
18004: CALL_OW 248
18008: ST_TO_ADDR
// side := GetSide ( tower ) ;
18009: LD_ADDR_VAR 0 16
18013: PUSH
18014: LD_VAR 0 1
18018: PPUSH
18019: CALL_OW 255
18023: ST_TO_ADDR
// x := GetX ( tower ) ;
18024: LD_ADDR_VAR 0 10
18028: PUSH
18029: LD_VAR 0 1
18033: PPUSH
18034: CALL_OW 250
18038: ST_TO_ADDR
// y := GetY ( tower ) ;
18039: LD_ADDR_VAR 0 11
18043: PUSH
18044: LD_VAR 0 1
18048: PPUSH
18049: CALL_OW 251
18053: ST_TO_ADDR
// if not x or not y then
18054: LD_VAR 0 10
18058: NOT
18059: PUSH
18060: LD_VAR 0 11
18064: NOT
18065: OR
18066: IFFALSE 18070
// exit ;
18068: GO 19103
// weapon := 0 ;
18070: LD_ADDR_VAR 0 18
18074: PUSH
18075: LD_INT 0
18077: ST_TO_ADDR
// fac_list := [ ] ;
18078: LD_ADDR_VAR 0 17
18082: PUSH
18083: EMPTY
18084: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18085: LD_ADDR_VAR 0 6
18089: PUSH
18090: LD_VAR 0 1
18094: PPUSH
18095: CALL_OW 274
18099: PPUSH
18100: LD_VAR 0 2
18104: PPUSH
18105: LD_INT 0
18107: PPUSH
18108: CALL 15674 0 3
18112: PPUSH
18113: LD_INT 30
18115: PUSH
18116: LD_INT 3
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PPUSH
18123: CALL_OW 72
18127: ST_TO_ADDR
// if not factories then
18128: LD_VAR 0 6
18132: NOT
18133: IFFALSE 18137
// exit ;
18135: GO 19103
// for i in factories do
18137: LD_ADDR_VAR 0 8
18141: PUSH
18142: LD_VAR 0 6
18146: PUSH
18147: FOR_IN
18148: IFFALSE 18173
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18150: LD_ADDR_VAR 0 17
18154: PUSH
18155: LD_VAR 0 17
18159: PUSH
18160: LD_VAR 0 8
18164: PPUSH
18165: CALL_OW 478
18169: UNION
18170: ST_TO_ADDR
18171: GO 18147
18173: POP
18174: POP
// if not fac_list then
18175: LD_VAR 0 17
18179: NOT
18180: IFFALSE 18184
// exit ;
18182: GO 19103
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18184: LD_ADDR_VAR 0 5
18188: PUSH
18189: LD_INT 4
18191: PUSH
18192: LD_INT 5
18194: PUSH
18195: LD_INT 9
18197: PUSH
18198: LD_INT 10
18200: PUSH
18201: LD_INT 6
18203: PUSH
18204: LD_INT 7
18206: PUSH
18207: LD_INT 11
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 27
18221: PUSH
18222: LD_INT 28
18224: PUSH
18225: LD_INT 26
18227: PUSH
18228: LD_INT 30
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 43
18239: PUSH
18240: LD_INT 44
18242: PUSH
18243: LD_INT 46
18245: PUSH
18246: LD_INT 45
18248: PUSH
18249: LD_INT 47
18251: PUSH
18252: LD_INT 49
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: PUSH
18268: LD_VAR 0 12
18272: ARRAY
18273: ST_TO_ADDR
// list := list isect fac_list ;
18274: LD_ADDR_VAR 0 5
18278: PUSH
18279: LD_VAR 0 5
18283: PUSH
18284: LD_VAR 0 17
18288: ISECT
18289: ST_TO_ADDR
// if not list then
18290: LD_VAR 0 5
18294: NOT
18295: IFFALSE 18299
// exit ;
18297: GO 19103
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18299: LD_VAR 0 12
18303: PUSH
18304: LD_INT 3
18306: EQUAL
18307: PUSH
18308: LD_INT 49
18310: PUSH
18311: LD_VAR 0 5
18315: IN
18316: AND
18317: PUSH
18318: LD_INT 31
18320: PPUSH
18321: LD_VAR 0 16
18325: PPUSH
18326: CALL_OW 321
18330: PUSH
18331: LD_INT 2
18333: EQUAL
18334: AND
18335: IFFALSE 18395
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18337: LD_INT 22
18339: PUSH
18340: LD_VAR 0 16
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 35
18351: PUSH
18352: LD_INT 49
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 91
18361: PUSH
18362: LD_VAR 0 1
18366: PUSH
18367: LD_INT 10
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: LIST
18379: PPUSH
18380: CALL_OW 69
18384: NOT
18385: IFFALSE 18395
// weapon := ru_time_lapser ;
18387: LD_ADDR_VAR 0 18
18391: PUSH
18392: LD_INT 49
18394: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18395: LD_VAR 0 12
18399: PUSH
18400: LD_INT 1
18402: PUSH
18403: LD_INT 2
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: IN
18410: PUSH
18411: LD_INT 11
18413: PUSH
18414: LD_VAR 0 5
18418: IN
18419: PUSH
18420: LD_INT 30
18422: PUSH
18423: LD_VAR 0 5
18427: IN
18428: OR
18429: AND
18430: PUSH
18431: LD_INT 6
18433: PPUSH
18434: LD_VAR 0 16
18438: PPUSH
18439: CALL_OW 321
18443: PUSH
18444: LD_INT 2
18446: EQUAL
18447: AND
18448: IFFALSE 18613
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18450: LD_INT 22
18452: PUSH
18453: LD_VAR 0 16
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 2
18464: PUSH
18465: LD_INT 35
18467: PUSH
18468: LD_INT 11
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 35
18477: PUSH
18478: LD_INT 30
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 91
18492: PUSH
18493: LD_VAR 0 1
18497: PUSH
18498: LD_INT 18
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: PPUSH
18511: CALL_OW 69
18515: NOT
18516: PUSH
18517: LD_INT 22
18519: PUSH
18520: LD_VAR 0 16
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 2
18531: PUSH
18532: LD_INT 30
18534: PUSH
18535: LD_INT 32
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 30
18544: PUSH
18545: LD_INT 33
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 91
18559: PUSH
18560: LD_VAR 0 1
18564: PUSH
18565: LD_INT 12
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: PPUSH
18581: CALL_OW 69
18585: PUSH
18586: LD_INT 2
18588: GREATER
18589: AND
18590: IFFALSE 18613
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18592: LD_ADDR_VAR 0 18
18596: PUSH
18597: LD_INT 11
18599: PUSH
18600: LD_INT 30
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_VAR 0 12
18611: ARRAY
18612: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18613: LD_VAR 0 18
18617: NOT
18618: PUSH
18619: LD_INT 40
18621: PPUSH
18622: LD_VAR 0 16
18626: PPUSH
18627: CALL_OW 321
18631: PUSH
18632: LD_INT 2
18634: EQUAL
18635: AND
18636: PUSH
18637: LD_INT 7
18639: PUSH
18640: LD_VAR 0 5
18644: IN
18645: PUSH
18646: LD_INT 28
18648: PUSH
18649: LD_VAR 0 5
18653: IN
18654: OR
18655: PUSH
18656: LD_INT 45
18658: PUSH
18659: LD_VAR 0 5
18663: IN
18664: OR
18665: AND
18666: IFFALSE 18920
// begin hex := GetHexInfo ( x , y ) ;
18668: LD_ADDR_VAR 0 4
18672: PUSH
18673: LD_VAR 0 10
18677: PPUSH
18678: LD_VAR 0 11
18682: PPUSH
18683: CALL_OW 546
18687: ST_TO_ADDR
// if hex [ 1 ] then
18688: LD_VAR 0 4
18692: PUSH
18693: LD_INT 1
18695: ARRAY
18696: IFFALSE 18700
// exit ;
18698: GO 19103
// height := hex [ 2 ] ;
18700: LD_ADDR_VAR 0 15
18704: PUSH
18705: LD_VAR 0 4
18709: PUSH
18710: LD_INT 2
18712: ARRAY
18713: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18714: LD_ADDR_VAR 0 14
18718: PUSH
18719: LD_INT 0
18721: PUSH
18722: LD_INT 2
18724: PUSH
18725: LD_INT 3
18727: PUSH
18728: LD_INT 5
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: ST_TO_ADDR
// for i in tmp do
18737: LD_ADDR_VAR 0 8
18741: PUSH
18742: LD_VAR 0 14
18746: PUSH
18747: FOR_IN
18748: IFFALSE 18918
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18750: LD_ADDR_VAR 0 9
18754: PUSH
18755: LD_VAR 0 10
18759: PPUSH
18760: LD_VAR 0 8
18764: PPUSH
18765: LD_INT 5
18767: PPUSH
18768: CALL_OW 272
18772: PUSH
18773: LD_VAR 0 11
18777: PPUSH
18778: LD_VAR 0 8
18782: PPUSH
18783: LD_INT 5
18785: PPUSH
18786: CALL_OW 273
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18795: LD_VAR 0 9
18799: PUSH
18800: LD_INT 1
18802: ARRAY
18803: PPUSH
18804: LD_VAR 0 9
18808: PUSH
18809: LD_INT 2
18811: ARRAY
18812: PPUSH
18813: CALL_OW 488
18817: IFFALSE 18916
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18819: LD_ADDR_VAR 0 4
18823: PUSH
18824: LD_VAR 0 9
18828: PUSH
18829: LD_INT 1
18831: ARRAY
18832: PPUSH
18833: LD_VAR 0 9
18837: PUSH
18838: LD_INT 2
18840: ARRAY
18841: PPUSH
18842: CALL_OW 546
18846: ST_TO_ADDR
// if hex [ 1 ] then
18847: LD_VAR 0 4
18851: PUSH
18852: LD_INT 1
18854: ARRAY
18855: IFFALSE 18859
// continue ;
18857: GO 18747
// h := hex [ 2 ] ;
18859: LD_ADDR_VAR 0 13
18863: PUSH
18864: LD_VAR 0 4
18868: PUSH
18869: LD_INT 2
18871: ARRAY
18872: ST_TO_ADDR
// if h + 7 < height then
18873: LD_VAR 0 13
18877: PUSH
18878: LD_INT 7
18880: PLUS
18881: PUSH
18882: LD_VAR 0 15
18886: LESS
18887: IFFALSE 18916
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
18889: LD_ADDR_VAR 0 18
18893: PUSH
18894: LD_INT 7
18896: PUSH
18897: LD_INT 28
18899: PUSH
18900: LD_INT 45
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: LIST
18907: PUSH
18908: LD_VAR 0 12
18912: ARRAY
18913: ST_TO_ADDR
// break ;
18914: GO 18918
// end ; end ; end ;
18916: GO 18747
18918: POP
18919: POP
// end ; if not weapon then
18920: LD_VAR 0 18
18924: NOT
18925: IFFALSE 18985
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
18927: LD_ADDR_VAR 0 5
18931: PUSH
18932: LD_VAR 0 5
18936: PUSH
18937: LD_INT 11
18939: PUSH
18940: LD_INT 30
18942: PUSH
18943: LD_INT 49
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: LIST
18950: DIFF
18951: ST_TO_ADDR
// if not list then
18952: LD_VAR 0 5
18956: NOT
18957: IFFALSE 18961
// exit ;
18959: GO 19103
// weapon := list [ rand ( 1 , list ) ] ;
18961: LD_ADDR_VAR 0 18
18965: PUSH
18966: LD_VAR 0 5
18970: PUSH
18971: LD_INT 1
18973: PPUSH
18974: LD_VAR 0 5
18978: PPUSH
18979: CALL_OW 12
18983: ARRAY
18984: ST_TO_ADDR
// end ; if weapon then
18985: LD_VAR 0 18
18989: IFFALSE 19103
// begin tmp := CostOfWeapon ( weapon ) ;
18991: LD_ADDR_VAR 0 14
18995: PUSH
18996: LD_VAR 0 18
19000: PPUSH
19001: CALL_OW 451
19005: ST_TO_ADDR
// j := GetBase ( tower ) ;
19006: LD_ADDR_VAR 0 9
19010: PUSH
19011: LD_VAR 0 1
19015: PPUSH
19016: CALL_OW 274
19020: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19021: LD_VAR 0 9
19025: PPUSH
19026: LD_INT 1
19028: PPUSH
19029: CALL_OW 275
19033: PUSH
19034: LD_VAR 0 14
19038: PUSH
19039: LD_INT 1
19041: ARRAY
19042: GREATEREQUAL
19043: PUSH
19044: LD_VAR 0 9
19048: PPUSH
19049: LD_INT 2
19051: PPUSH
19052: CALL_OW 275
19056: PUSH
19057: LD_VAR 0 14
19061: PUSH
19062: LD_INT 2
19064: ARRAY
19065: GREATEREQUAL
19066: AND
19067: PUSH
19068: LD_VAR 0 9
19072: PPUSH
19073: LD_INT 3
19075: PPUSH
19076: CALL_OW 275
19080: PUSH
19081: LD_VAR 0 14
19085: PUSH
19086: LD_INT 3
19088: ARRAY
19089: GREATEREQUAL
19090: AND
19091: IFFALSE 19103
// result := weapon ;
19093: LD_ADDR_VAR 0 3
19097: PUSH
19098: LD_VAR 0 18
19102: ST_TO_ADDR
// end ; end ;
19103: LD_VAR 0 3
19107: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19108: LD_INT 0
19110: PPUSH
19111: PPUSH
// result := true ;
19112: LD_ADDR_VAR 0 3
19116: PUSH
19117: LD_INT 1
19119: ST_TO_ADDR
// if array1 = array2 then
19120: LD_VAR 0 1
19124: PUSH
19125: LD_VAR 0 2
19129: EQUAL
19130: IFFALSE 19190
// begin for i = 1 to array1 do
19132: LD_ADDR_VAR 0 4
19136: PUSH
19137: DOUBLE
19138: LD_INT 1
19140: DEC
19141: ST_TO_ADDR
19142: LD_VAR 0 1
19146: PUSH
19147: FOR_TO
19148: IFFALSE 19186
// if array1 [ i ] <> array2 [ i ] then
19150: LD_VAR 0 1
19154: PUSH
19155: LD_VAR 0 4
19159: ARRAY
19160: PUSH
19161: LD_VAR 0 2
19165: PUSH
19166: LD_VAR 0 4
19170: ARRAY
19171: NONEQUAL
19172: IFFALSE 19184
// begin result := false ;
19174: LD_ADDR_VAR 0 3
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// break ;
19182: GO 19186
// end ;
19184: GO 19147
19186: POP
19187: POP
// end else
19188: GO 19198
// result := false ;
19190: LD_ADDR_VAR 0 3
19194: PUSH
19195: LD_INT 0
19197: ST_TO_ADDR
// end ;
19198: LD_VAR 0 3
19202: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19203: LD_INT 0
19205: PPUSH
19206: PPUSH
// if not array1 or not array2 then
19207: LD_VAR 0 1
19211: NOT
19212: PUSH
19213: LD_VAR 0 2
19217: NOT
19218: OR
19219: IFFALSE 19223
// exit ;
19221: GO 19287
// result := true ;
19223: LD_ADDR_VAR 0 3
19227: PUSH
19228: LD_INT 1
19230: ST_TO_ADDR
// for i = 1 to array1 do
19231: LD_ADDR_VAR 0 4
19235: PUSH
19236: DOUBLE
19237: LD_INT 1
19239: DEC
19240: ST_TO_ADDR
19241: LD_VAR 0 1
19245: PUSH
19246: FOR_TO
19247: IFFALSE 19285
// if array1 [ i ] <> array2 [ i ] then
19249: LD_VAR 0 1
19253: PUSH
19254: LD_VAR 0 4
19258: ARRAY
19259: PUSH
19260: LD_VAR 0 2
19264: PUSH
19265: LD_VAR 0 4
19269: ARRAY
19270: NONEQUAL
19271: IFFALSE 19283
// begin result := false ;
19273: LD_ADDR_VAR 0 3
19277: PUSH
19278: LD_INT 0
19280: ST_TO_ADDR
// break ;
19281: GO 19285
// end ;
19283: GO 19246
19285: POP
19286: POP
// end ;
19287: LD_VAR 0 3
19291: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19292: LD_INT 0
19294: PPUSH
19295: PPUSH
19296: PPUSH
// pom := GetBase ( fac ) ;
19297: LD_ADDR_VAR 0 5
19301: PUSH
19302: LD_VAR 0 1
19306: PPUSH
19307: CALL_OW 274
19311: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19312: LD_ADDR_VAR 0 4
19316: PUSH
19317: LD_VAR 0 2
19321: PUSH
19322: LD_INT 1
19324: ARRAY
19325: PPUSH
19326: LD_VAR 0 2
19330: PUSH
19331: LD_INT 2
19333: ARRAY
19334: PPUSH
19335: LD_VAR 0 2
19339: PUSH
19340: LD_INT 3
19342: ARRAY
19343: PPUSH
19344: LD_VAR 0 2
19348: PUSH
19349: LD_INT 4
19351: ARRAY
19352: PPUSH
19353: CALL_OW 449
19357: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19358: LD_ADDR_VAR 0 3
19362: PUSH
19363: LD_VAR 0 5
19367: PPUSH
19368: LD_INT 1
19370: PPUSH
19371: CALL_OW 275
19375: PUSH
19376: LD_VAR 0 4
19380: PUSH
19381: LD_INT 1
19383: ARRAY
19384: GREATEREQUAL
19385: PUSH
19386: LD_VAR 0 5
19390: PPUSH
19391: LD_INT 2
19393: PPUSH
19394: CALL_OW 275
19398: PUSH
19399: LD_VAR 0 4
19403: PUSH
19404: LD_INT 2
19406: ARRAY
19407: GREATEREQUAL
19408: AND
19409: PUSH
19410: LD_VAR 0 5
19414: PPUSH
19415: LD_INT 3
19417: PPUSH
19418: CALL_OW 275
19422: PUSH
19423: LD_VAR 0 4
19427: PUSH
19428: LD_INT 3
19430: ARRAY
19431: GREATEREQUAL
19432: AND
19433: ST_TO_ADDR
// end ;
19434: LD_VAR 0 3
19438: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19439: LD_INT 0
19441: PPUSH
19442: PPUSH
19443: PPUSH
19444: PPUSH
// pom := GetBase ( building ) ;
19445: LD_ADDR_VAR 0 3
19449: PUSH
19450: LD_VAR 0 1
19454: PPUSH
19455: CALL_OW 274
19459: ST_TO_ADDR
// if not pom then
19460: LD_VAR 0 3
19464: NOT
19465: IFFALSE 19469
// exit ;
19467: GO 19639
// btype := GetBType ( building ) ;
19469: LD_ADDR_VAR 0 5
19473: PUSH
19474: LD_VAR 0 1
19478: PPUSH
19479: CALL_OW 266
19483: ST_TO_ADDR
// if btype = b_armoury then
19484: LD_VAR 0 5
19488: PUSH
19489: LD_INT 4
19491: EQUAL
19492: IFFALSE 19502
// btype := b_barracks ;
19494: LD_ADDR_VAR 0 5
19498: PUSH
19499: LD_INT 5
19501: ST_TO_ADDR
// if btype = b_depot then
19502: LD_VAR 0 5
19506: PUSH
19507: LD_INT 0
19509: EQUAL
19510: IFFALSE 19520
// btype := b_warehouse ;
19512: LD_ADDR_VAR 0 5
19516: PUSH
19517: LD_INT 1
19519: ST_TO_ADDR
// if btype = b_workshop then
19520: LD_VAR 0 5
19524: PUSH
19525: LD_INT 2
19527: EQUAL
19528: IFFALSE 19538
// btype := b_factory ;
19530: LD_ADDR_VAR 0 5
19534: PUSH
19535: LD_INT 3
19537: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19538: LD_ADDR_VAR 0 4
19542: PUSH
19543: LD_VAR 0 5
19547: PPUSH
19548: LD_VAR 0 1
19552: PPUSH
19553: CALL_OW 248
19557: PPUSH
19558: CALL_OW 450
19562: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19563: LD_ADDR_VAR 0 2
19567: PUSH
19568: LD_VAR 0 3
19572: PPUSH
19573: LD_INT 1
19575: PPUSH
19576: CALL_OW 275
19580: PUSH
19581: LD_VAR 0 4
19585: PUSH
19586: LD_INT 1
19588: ARRAY
19589: GREATEREQUAL
19590: PUSH
19591: LD_VAR 0 3
19595: PPUSH
19596: LD_INT 2
19598: PPUSH
19599: CALL_OW 275
19603: PUSH
19604: LD_VAR 0 4
19608: PUSH
19609: LD_INT 2
19611: ARRAY
19612: GREATEREQUAL
19613: AND
19614: PUSH
19615: LD_VAR 0 3
19619: PPUSH
19620: LD_INT 3
19622: PPUSH
19623: CALL_OW 275
19627: PUSH
19628: LD_VAR 0 4
19632: PUSH
19633: LD_INT 3
19635: ARRAY
19636: GREATEREQUAL
19637: AND
19638: ST_TO_ADDR
// end ;
19639: LD_VAR 0 2
19643: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19644: LD_INT 0
19646: PPUSH
19647: PPUSH
19648: PPUSH
// pom := GetBase ( building ) ;
19649: LD_ADDR_VAR 0 4
19653: PUSH
19654: LD_VAR 0 1
19658: PPUSH
19659: CALL_OW 274
19663: ST_TO_ADDR
// if not pom then
19664: LD_VAR 0 4
19668: NOT
19669: IFFALSE 19673
// exit ;
19671: GO 19774
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19673: LD_ADDR_VAR 0 5
19677: PUSH
19678: LD_VAR 0 2
19682: PPUSH
19683: LD_VAR 0 1
19687: PPUSH
19688: CALL_OW 248
19692: PPUSH
19693: CALL_OW 450
19697: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19698: LD_ADDR_VAR 0 3
19702: PUSH
19703: LD_VAR 0 4
19707: PPUSH
19708: LD_INT 1
19710: PPUSH
19711: CALL_OW 275
19715: PUSH
19716: LD_VAR 0 5
19720: PUSH
19721: LD_INT 1
19723: ARRAY
19724: GREATEREQUAL
19725: PUSH
19726: LD_VAR 0 4
19730: PPUSH
19731: LD_INT 2
19733: PPUSH
19734: CALL_OW 275
19738: PUSH
19739: LD_VAR 0 5
19743: PUSH
19744: LD_INT 2
19746: ARRAY
19747: GREATEREQUAL
19748: AND
19749: PUSH
19750: LD_VAR 0 4
19754: PPUSH
19755: LD_INT 3
19757: PPUSH
19758: CALL_OW 275
19762: PUSH
19763: LD_VAR 0 5
19767: PUSH
19768: LD_INT 3
19770: ARRAY
19771: GREATEREQUAL
19772: AND
19773: ST_TO_ADDR
// end ;
19774: LD_VAR 0 3
19778: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19779: LD_INT 0
19781: PPUSH
19782: PPUSH
19783: PPUSH
19784: PPUSH
19785: PPUSH
19786: PPUSH
19787: PPUSH
19788: PPUSH
19789: PPUSH
19790: PPUSH
19791: PPUSH
// result := false ;
19792: LD_ADDR_VAR 0 8
19796: PUSH
19797: LD_INT 0
19799: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19800: LD_VAR 0 5
19804: NOT
19805: PUSH
19806: LD_VAR 0 1
19810: NOT
19811: OR
19812: PUSH
19813: LD_VAR 0 2
19817: NOT
19818: OR
19819: PUSH
19820: LD_VAR 0 3
19824: NOT
19825: OR
19826: IFFALSE 19830
// exit ;
19828: GO 20644
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19830: LD_ADDR_VAR 0 14
19834: PUSH
19835: LD_VAR 0 1
19839: PPUSH
19840: LD_VAR 0 2
19844: PPUSH
19845: LD_VAR 0 3
19849: PPUSH
19850: LD_VAR 0 4
19854: PPUSH
19855: LD_VAR 0 5
19859: PUSH
19860: LD_INT 1
19862: ARRAY
19863: PPUSH
19864: CALL_OW 248
19868: PPUSH
19869: LD_INT 0
19871: PPUSH
19872: CALL 21881 0 6
19876: ST_TO_ADDR
// if not hexes then
19877: LD_VAR 0 14
19881: NOT
19882: IFFALSE 19886
// exit ;
19884: GO 20644
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19886: LD_ADDR_VAR 0 17
19890: PUSH
19891: LD_VAR 0 5
19895: PPUSH
19896: LD_INT 22
19898: PUSH
19899: LD_VAR 0 13
19903: PPUSH
19904: CALL_OW 255
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 2
19915: PUSH
19916: LD_INT 30
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 30
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PPUSH
19945: CALL_OW 72
19949: ST_TO_ADDR
// for i = 1 to hexes do
19950: LD_ADDR_VAR 0 9
19954: PUSH
19955: DOUBLE
19956: LD_INT 1
19958: DEC
19959: ST_TO_ADDR
19960: LD_VAR 0 14
19964: PUSH
19965: FOR_TO
19966: IFFALSE 20642
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19968: LD_ADDR_VAR 0 13
19972: PUSH
19973: LD_VAR 0 14
19977: PUSH
19978: LD_VAR 0 9
19982: ARRAY
19983: PUSH
19984: LD_INT 1
19986: ARRAY
19987: PPUSH
19988: LD_VAR 0 14
19992: PUSH
19993: LD_VAR 0 9
19997: ARRAY
19998: PUSH
19999: LD_INT 2
20001: ARRAY
20002: PPUSH
20003: CALL_OW 428
20007: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20008: LD_VAR 0 14
20012: PUSH
20013: LD_VAR 0 9
20017: ARRAY
20018: PUSH
20019: LD_INT 1
20021: ARRAY
20022: PPUSH
20023: LD_VAR 0 14
20027: PUSH
20028: LD_VAR 0 9
20032: ARRAY
20033: PUSH
20034: LD_INT 2
20036: ARRAY
20037: PPUSH
20038: CALL_OW 351
20042: PUSH
20043: LD_VAR 0 14
20047: PUSH
20048: LD_VAR 0 9
20052: ARRAY
20053: PUSH
20054: LD_INT 1
20056: ARRAY
20057: PPUSH
20058: LD_VAR 0 14
20062: PUSH
20063: LD_VAR 0 9
20067: ARRAY
20068: PUSH
20069: LD_INT 2
20071: ARRAY
20072: PPUSH
20073: CALL_OW 488
20077: NOT
20078: OR
20079: PUSH
20080: LD_VAR 0 13
20084: PPUSH
20085: CALL_OW 247
20089: PUSH
20090: LD_INT 3
20092: EQUAL
20093: OR
20094: IFFALSE 20100
// exit ;
20096: POP
20097: POP
20098: GO 20644
// if not tmp then
20100: LD_VAR 0 13
20104: NOT
20105: IFFALSE 20109
// continue ;
20107: GO 19965
// result := true ;
20109: LD_ADDR_VAR 0 8
20113: PUSH
20114: LD_INT 1
20116: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20117: LD_VAR 0 6
20121: PUSH
20122: LD_VAR 0 13
20126: PPUSH
20127: CALL_OW 247
20131: PUSH
20132: LD_INT 2
20134: EQUAL
20135: AND
20136: PUSH
20137: LD_VAR 0 13
20141: PPUSH
20142: CALL_OW 263
20146: PUSH
20147: LD_INT 1
20149: EQUAL
20150: AND
20151: IFFALSE 20315
// begin if IsDrivenBy ( tmp ) then
20153: LD_VAR 0 13
20157: PPUSH
20158: CALL_OW 311
20162: IFFALSE 20166
// continue ;
20164: GO 19965
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20166: LD_VAR 0 6
20170: PPUSH
20171: LD_INT 3
20173: PUSH
20174: LD_INT 60
20176: PUSH
20177: EMPTY
20178: LIST
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 3
20186: PUSH
20187: LD_INT 55
20189: PUSH
20190: EMPTY
20191: LIST
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PPUSH
20201: CALL_OW 72
20205: IFFALSE 20313
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20207: LD_ADDR_VAR 0 18
20211: PUSH
20212: LD_VAR 0 6
20216: PPUSH
20217: LD_INT 3
20219: PUSH
20220: LD_INT 60
20222: PUSH
20223: EMPTY
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 3
20232: PUSH
20233: LD_INT 55
20235: PUSH
20236: EMPTY
20237: LIST
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PPUSH
20247: CALL_OW 72
20251: PUSH
20252: LD_INT 1
20254: ARRAY
20255: ST_TO_ADDR
// if IsInUnit ( driver ) then
20256: LD_VAR 0 18
20260: PPUSH
20261: CALL_OW 310
20265: IFFALSE 20276
// ComExit ( driver ) ;
20267: LD_VAR 0 18
20271: PPUSH
20272: CALL 45065 0 1
// AddComEnterUnit ( driver , tmp ) ;
20276: LD_VAR 0 18
20280: PPUSH
20281: LD_VAR 0 13
20285: PPUSH
20286: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20290: LD_VAR 0 18
20294: PPUSH
20295: LD_VAR 0 7
20299: PPUSH
20300: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20304: LD_VAR 0 18
20308: PPUSH
20309: CALL_OW 181
// end ; continue ;
20313: GO 19965
// end ; if not cleaners or not tmp in cleaners then
20315: LD_VAR 0 6
20319: NOT
20320: PUSH
20321: LD_VAR 0 13
20325: PUSH
20326: LD_VAR 0 6
20330: IN
20331: NOT
20332: OR
20333: IFFALSE 20640
// begin if dep then
20335: LD_VAR 0 17
20339: IFFALSE 20475
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20341: LD_ADDR_VAR 0 16
20345: PUSH
20346: LD_VAR 0 17
20350: PUSH
20351: LD_INT 1
20353: ARRAY
20354: PPUSH
20355: CALL_OW 250
20359: PPUSH
20360: LD_VAR 0 17
20364: PUSH
20365: LD_INT 1
20367: ARRAY
20368: PPUSH
20369: CALL_OW 254
20373: PPUSH
20374: LD_INT 5
20376: PPUSH
20377: CALL_OW 272
20381: PUSH
20382: LD_VAR 0 17
20386: PUSH
20387: LD_INT 1
20389: ARRAY
20390: PPUSH
20391: CALL_OW 251
20395: PPUSH
20396: LD_VAR 0 17
20400: PUSH
20401: LD_INT 1
20403: ARRAY
20404: PPUSH
20405: CALL_OW 254
20409: PPUSH
20410: LD_INT 5
20412: PPUSH
20413: CALL_OW 273
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20422: LD_VAR 0 16
20426: PUSH
20427: LD_INT 1
20429: ARRAY
20430: PPUSH
20431: LD_VAR 0 16
20435: PUSH
20436: LD_INT 2
20438: ARRAY
20439: PPUSH
20440: CALL_OW 488
20444: IFFALSE 20475
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20446: LD_VAR 0 13
20450: PPUSH
20451: LD_VAR 0 16
20455: PUSH
20456: LD_INT 1
20458: ARRAY
20459: PPUSH
20460: LD_VAR 0 16
20464: PUSH
20465: LD_INT 2
20467: ARRAY
20468: PPUSH
20469: CALL_OW 111
// continue ;
20473: GO 19965
// end ; end ; r := GetDir ( tmp ) ;
20475: LD_ADDR_VAR 0 15
20479: PUSH
20480: LD_VAR 0 13
20484: PPUSH
20485: CALL_OW 254
20489: ST_TO_ADDR
// if r = 5 then
20490: LD_VAR 0 15
20494: PUSH
20495: LD_INT 5
20497: EQUAL
20498: IFFALSE 20508
// r := 0 ;
20500: LD_ADDR_VAR 0 15
20504: PUSH
20505: LD_INT 0
20507: ST_TO_ADDR
// for j = r to 5 do
20508: LD_ADDR_VAR 0 10
20512: PUSH
20513: DOUBLE
20514: LD_VAR 0 15
20518: DEC
20519: ST_TO_ADDR
20520: LD_INT 5
20522: PUSH
20523: FOR_TO
20524: IFFALSE 20638
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20526: LD_ADDR_VAR 0 11
20530: PUSH
20531: LD_VAR 0 13
20535: PPUSH
20536: CALL_OW 250
20540: PPUSH
20541: LD_VAR 0 10
20545: PPUSH
20546: LD_INT 2
20548: PPUSH
20549: CALL_OW 272
20553: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20554: LD_ADDR_VAR 0 12
20558: PUSH
20559: LD_VAR 0 13
20563: PPUSH
20564: CALL_OW 251
20568: PPUSH
20569: LD_VAR 0 10
20573: PPUSH
20574: LD_INT 2
20576: PPUSH
20577: CALL_OW 273
20581: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20582: LD_VAR 0 11
20586: PPUSH
20587: LD_VAR 0 12
20591: PPUSH
20592: CALL_OW 488
20596: PUSH
20597: LD_VAR 0 11
20601: PPUSH
20602: LD_VAR 0 12
20606: PPUSH
20607: CALL_OW 428
20611: NOT
20612: AND
20613: IFFALSE 20636
// begin ComMoveXY ( tmp , _x , _y ) ;
20615: LD_VAR 0 13
20619: PPUSH
20620: LD_VAR 0 11
20624: PPUSH
20625: LD_VAR 0 12
20629: PPUSH
20630: CALL_OW 111
// break ;
20634: GO 20638
// end ; end ;
20636: GO 20523
20638: POP
20639: POP
// end ; end ;
20640: GO 19965
20642: POP
20643: POP
// end ;
20644: LD_VAR 0 8
20648: RET
// export function BuildingTechInvented ( side , btype ) ; begin
20649: LD_INT 0
20651: PPUSH
// result := true ;
20652: LD_ADDR_VAR 0 3
20656: PUSH
20657: LD_INT 1
20659: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
20660: LD_VAR 0 2
20664: PUSH
20665: LD_INT 24
20667: DOUBLE
20668: EQUAL
20669: IFTRUE 20679
20671: LD_INT 33
20673: DOUBLE
20674: EQUAL
20675: IFTRUE 20679
20677: GO 20704
20679: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
20680: LD_ADDR_VAR 0 3
20684: PUSH
20685: LD_INT 32
20687: PPUSH
20688: LD_VAR 0 1
20692: PPUSH
20693: CALL_OW 321
20697: PUSH
20698: LD_INT 2
20700: EQUAL
20701: ST_TO_ADDR
20702: GO 21024
20704: LD_INT 20
20706: DOUBLE
20707: EQUAL
20708: IFTRUE 20712
20710: GO 20737
20712: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
20713: LD_ADDR_VAR 0 3
20717: PUSH
20718: LD_INT 6
20720: PPUSH
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL_OW 321
20730: PUSH
20731: LD_INT 2
20733: EQUAL
20734: ST_TO_ADDR
20735: GO 21024
20737: LD_INT 22
20739: DOUBLE
20740: EQUAL
20741: IFTRUE 20751
20743: LD_INT 36
20745: DOUBLE
20746: EQUAL
20747: IFTRUE 20751
20749: GO 20776
20751: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
20752: LD_ADDR_VAR 0 3
20756: PUSH
20757: LD_INT 15
20759: PPUSH
20760: LD_VAR 0 1
20764: PPUSH
20765: CALL_OW 321
20769: PUSH
20770: LD_INT 2
20772: EQUAL
20773: ST_TO_ADDR
20774: GO 21024
20776: LD_INT 30
20778: DOUBLE
20779: EQUAL
20780: IFTRUE 20784
20782: GO 20809
20784: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
20785: LD_ADDR_VAR 0 3
20789: PUSH
20790: LD_INT 20
20792: PPUSH
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL_OW 321
20802: PUSH
20803: LD_INT 2
20805: EQUAL
20806: ST_TO_ADDR
20807: GO 21024
20809: LD_INT 28
20811: DOUBLE
20812: EQUAL
20813: IFTRUE 20823
20815: LD_INT 21
20817: DOUBLE
20818: EQUAL
20819: IFTRUE 20823
20821: GO 20848
20823: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
20824: LD_ADDR_VAR 0 3
20828: PUSH
20829: LD_INT 21
20831: PPUSH
20832: LD_VAR 0 1
20836: PPUSH
20837: CALL_OW 321
20841: PUSH
20842: LD_INT 2
20844: EQUAL
20845: ST_TO_ADDR
20846: GO 21024
20848: LD_INT 16
20850: DOUBLE
20851: EQUAL
20852: IFTRUE 20856
20854: GO 20883
20856: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
20857: LD_ADDR_VAR 0 3
20861: PUSH
20862: LD_EXP 51
20866: PPUSH
20867: LD_VAR 0 1
20871: PPUSH
20872: CALL_OW 321
20876: PUSH
20877: LD_INT 2
20879: EQUAL
20880: ST_TO_ADDR
20881: GO 21024
20883: LD_INT 19
20885: DOUBLE
20886: EQUAL
20887: IFTRUE 20897
20889: LD_INT 23
20891: DOUBLE
20892: EQUAL
20893: IFTRUE 20897
20895: GO 20924
20897: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
20898: LD_ADDR_VAR 0 3
20902: PUSH
20903: LD_EXP 50
20907: PPUSH
20908: LD_VAR 0 1
20912: PPUSH
20913: CALL_OW 321
20917: PUSH
20918: LD_INT 2
20920: EQUAL
20921: ST_TO_ADDR
20922: GO 21024
20924: LD_INT 17
20926: DOUBLE
20927: EQUAL
20928: IFTRUE 20932
20930: GO 20957
20932: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
20933: LD_ADDR_VAR 0 3
20937: PUSH
20938: LD_INT 39
20940: PPUSH
20941: LD_VAR 0 1
20945: PPUSH
20946: CALL_OW 321
20950: PUSH
20951: LD_INT 2
20953: EQUAL
20954: ST_TO_ADDR
20955: GO 21024
20957: LD_INT 18
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 20990
20965: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
20966: LD_ADDR_VAR 0 3
20970: PUSH
20971: LD_INT 40
20973: PPUSH
20974: LD_VAR 0 1
20978: PPUSH
20979: CALL_OW 321
20983: PUSH
20984: LD_INT 2
20986: EQUAL
20987: ST_TO_ADDR
20988: GO 21024
20990: LD_INT 27
20992: DOUBLE
20993: EQUAL
20994: IFTRUE 20998
20996: GO 21023
20998: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
20999: LD_ADDR_VAR 0 3
21003: PUSH
21004: LD_INT 35
21006: PPUSH
21007: LD_VAR 0 1
21011: PPUSH
21012: CALL_OW 321
21016: PUSH
21017: LD_INT 2
21019: EQUAL
21020: ST_TO_ADDR
21021: GO 21024
21023: POP
// end ;
21024: LD_VAR 0 3
21028: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21029: LD_INT 0
21031: PPUSH
21032: PPUSH
21033: PPUSH
21034: PPUSH
21035: PPUSH
21036: PPUSH
21037: PPUSH
21038: PPUSH
21039: PPUSH
21040: PPUSH
21041: PPUSH
// result := false ;
21042: LD_ADDR_VAR 0 6
21046: PUSH
21047: LD_INT 0
21049: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21050: LD_VAR 0 1
21054: NOT
21055: PUSH
21056: LD_VAR 0 1
21060: PPUSH
21061: CALL_OW 266
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: IN
21076: NOT
21077: OR
21078: PUSH
21079: LD_VAR 0 2
21083: NOT
21084: OR
21085: PUSH
21086: LD_VAR 0 5
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: LD_INT 4
21105: PUSH
21106: LD_INT 5
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: IN
21117: NOT
21118: OR
21119: PUSH
21120: LD_VAR 0 3
21124: PPUSH
21125: LD_VAR 0 4
21129: PPUSH
21130: CALL_OW 488
21134: NOT
21135: OR
21136: IFFALSE 21140
// exit ;
21138: GO 21876
// side := GetSide ( depot ) ;
21140: LD_ADDR_VAR 0 9
21144: PUSH
21145: LD_VAR 0 1
21149: PPUSH
21150: CALL_OW 255
21154: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21155: LD_VAR 0 9
21159: PPUSH
21160: LD_VAR 0 2
21164: PPUSH
21165: CALL 20649 0 2
21169: NOT
21170: IFFALSE 21174
// exit ;
21172: GO 21876
// pom := GetBase ( depot ) ;
21174: LD_ADDR_VAR 0 10
21178: PUSH
21179: LD_VAR 0 1
21183: PPUSH
21184: CALL_OW 274
21188: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21189: LD_ADDR_VAR 0 11
21193: PUSH
21194: LD_VAR 0 2
21198: PPUSH
21199: LD_VAR 0 1
21203: PPUSH
21204: CALL_OW 248
21208: PPUSH
21209: CALL_OW 450
21213: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21214: LD_VAR 0 10
21218: PPUSH
21219: LD_INT 1
21221: PPUSH
21222: CALL_OW 275
21226: PUSH
21227: LD_VAR 0 11
21231: PUSH
21232: LD_INT 1
21234: ARRAY
21235: GREATEREQUAL
21236: PUSH
21237: LD_VAR 0 10
21241: PPUSH
21242: LD_INT 2
21244: PPUSH
21245: CALL_OW 275
21249: PUSH
21250: LD_VAR 0 11
21254: PUSH
21255: LD_INT 2
21257: ARRAY
21258: GREATEREQUAL
21259: AND
21260: PUSH
21261: LD_VAR 0 10
21265: PPUSH
21266: LD_INT 3
21268: PPUSH
21269: CALL_OW 275
21273: PUSH
21274: LD_VAR 0 11
21278: PUSH
21279: LD_INT 3
21281: ARRAY
21282: GREATEREQUAL
21283: AND
21284: NOT
21285: IFFALSE 21289
// exit ;
21287: GO 21876
// if GetBType ( depot ) = b_depot then
21289: LD_VAR 0 1
21293: PPUSH
21294: CALL_OW 266
21298: PUSH
21299: LD_INT 0
21301: EQUAL
21302: IFFALSE 21314
// dist := 28 else
21304: LD_ADDR_VAR 0 14
21308: PUSH
21309: LD_INT 28
21311: ST_TO_ADDR
21312: GO 21322
// dist := 36 ;
21314: LD_ADDR_VAR 0 14
21318: PUSH
21319: LD_INT 36
21321: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21322: LD_VAR 0 1
21326: PPUSH
21327: LD_VAR 0 3
21331: PPUSH
21332: LD_VAR 0 4
21336: PPUSH
21337: CALL_OW 297
21341: PUSH
21342: LD_VAR 0 14
21346: GREATER
21347: IFFALSE 21351
// exit ;
21349: GO 21876
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21351: LD_ADDR_VAR 0 12
21355: PUSH
21356: LD_VAR 0 2
21360: PPUSH
21361: LD_VAR 0 3
21365: PPUSH
21366: LD_VAR 0 4
21370: PPUSH
21371: LD_VAR 0 5
21375: PPUSH
21376: LD_VAR 0 1
21380: PPUSH
21381: CALL_OW 248
21385: PPUSH
21386: LD_INT 0
21388: PPUSH
21389: CALL 21881 0 6
21393: ST_TO_ADDR
// if not hexes then
21394: LD_VAR 0 12
21398: NOT
21399: IFFALSE 21403
// exit ;
21401: GO 21876
// hex := GetHexInfo ( x , y ) ;
21403: LD_ADDR_VAR 0 15
21407: PUSH
21408: LD_VAR 0 3
21412: PPUSH
21413: LD_VAR 0 4
21417: PPUSH
21418: CALL_OW 546
21422: ST_TO_ADDR
// if hex [ 1 ] then
21423: LD_VAR 0 15
21427: PUSH
21428: LD_INT 1
21430: ARRAY
21431: IFFALSE 21435
// exit ;
21433: GO 21876
// height := hex [ 2 ] ;
21435: LD_ADDR_VAR 0 13
21439: PUSH
21440: LD_VAR 0 15
21444: PUSH
21445: LD_INT 2
21447: ARRAY
21448: ST_TO_ADDR
// for i = 1 to hexes do
21449: LD_ADDR_VAR 0 7
21453: PUSH
21454: DOUBLE
21455: LD_INT 1
21457: DEC
21458: ST_TO_ADDR
21459: LD_VAR 0 12
21463: PUSH
21464: FOR_TO
21465: IFFALSE 21795
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21467: LD_VAR 0 12
21471: PUSH
21472: LD_VAR 0 7
21476: ARRAY
21477: PUSH
21478: LD_INT 1
21480: ARRAY
21481: PPUSH
21482: LD_VAR 0 12
21486: PUSH
21487: LD_VAR 0 7
21491: ARRAY
21492: PUSH
21493: LD_INT 2
21495: ARRAY
21496: PPUSH
21497: CALL_OW 488
21501: NOT
21502: PUSH
21503: LD_VAR 0 12
21507: PUSH
21508: LD_VAR 0 7
21512: ARRAY
21513: PUSH
21514: LD_INT 1
21516: ARRAY
21517: PPUSH
21518: LD_VAR 0 12
21522: PUSH
21523: LD_VAR 0 7
21527: ARRAY
21528: PUSH
21529: LD_INT 2
21531: ARRAY
21532: PPUSH
21533: CALL_OW 428
21537: PUSH
21538: LD_INT 0
21540: GREATER
21541: OR
21542: PUSH
21543: LD_VAR 0 12
21547: PUSH
21548: LD_VAR 0 7
21552: ARRAY
21553: PUSH
21554: LD_INT 1
21556: ARRAY
21557: PPUSH
21558: LD_VAR 0 12
21562: PUSH
21563: LD_VAR 0 7
21567: ARRAY
21568: PUSH
21569: LD_INT 2
21571: ARRAY
21572: PPUSH
21573: CALL_OW 351
21577: OR
21578: IFFALSE 21584
// exit ;
21580: POP
21581: POP
21582: GO 21876
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21584: LD_ADDR_VAR 0 8
21588: PUSH
21589: LD_VAR 0 12
21593: PUSH
21594: LD_VAR 0 7
21598: ARRAY
21599: PUSH
21600: LD_INT 1
21602: ARRAY
21603: PPUSH
21604: LD_VAR 0 12
21608: PUSH
21609: LD_VAR 0 7
21613: ARRAY
21614: PUSH
21615: LD_INT 2
21617: ARRAY
21618: PPUSH
21619: CALL_OW 546
21623: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21624: LD_VAR 0 8
21628: PUSH
21629: LD_INT 1
21631: ARRAY
21632: PUSH
21633: LD_VAR 0 8
21637: PUSH
21638: LD_INT 2
21640: ARRAY
21641: PUSH
21642: LD_VAR 0 13
21646: PUSH
21647: LD_INT 2
21649: PLUS
21650: GREATER
21651: OR
21652: PUSH
21653: LD_VAR 0 8
21657: PUSH
21658: LD_INT 2
21660: ARRAY
21661: PUSH
21662: LD_VAR 0 13
21666: PUSH
21667: LD_INT 2
21669: MINUS
21670: LESS
21671: OR
21672: PUSH
21673: LD_VAR 0 8
21677: PUSH
21678: LD_INT 3
21680: ARRAY
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: LD_INT 8
21687: PUSH
21688: LD_INT 9
21690: PUSH
21691: LD_INT 10
21693: PUSH
21694: LD_INT 11
21696: PUSH
21697: LD_INT 12
21699: PUSH
21700: LD_INT 13
21702: PUSH
21703: LD_INT 16
21705: PUSH
21706: LD_INT 17
21708: PUSH
21709: LD_INT 18
21711: PUSH
21712: LD_INT 19
21714: PUSH
21715: LD_INT 20
21717: PUSH
21718: LD_INT 21
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: IN
21736: NOT
21737: OR
21738: PUSH
21739: LD_VAR 0 8
21743: PUSH
21744: LD_INT 5
21746: ARRAY
21747: NOT
21748: OR
21749: PUSH
21750: LD_VAR 0 8
21754: PUSH
21755: LD_INT 6
21757: ARRAY
21758: PUSH
21759: LD_INT 1
21761: PUSH
21762: LD_INT 2
21764: PUSH
21765: LD_INT 7
21767: PUSH
21768: LD_INT 9
21770: PUSH
21771: LD_INT 10
21773: PUSH
21774: LD_INT 11
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: IN
21785: NOT
21786: OR
21787: IFFALSE 21793
// exit ;
21789: POP
21790: POP
21791: GO 21876
// end ;
21793: GO 21464
21795: POP
21796: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21797: LD_VAR 0 9
21801: PPUSH
21802: LD_VAR 0 3
21806: PPUSH
21807: LD_VAR 0 4
21811: PPUSH
21812: LD_INT 20
21814: PPUSH
21815: CALL 13822 0 4
21819: PUSH
21820: LD_INT 4
21822: ARRAY
21823: IFFALSE 21827
// exit ;
21825: GO 21876
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21827: LD_VAR 0 2
21831: PUSH
21832: LD_INT 29
21834: PUSH
21835: LD_INT 30
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: IN
21842: PUSH
21843: LD_VAR 0 3
21847: PPUSH
21848: LD_VAR 0 4
21852: PPUSH
21853: LD_VAR 0 9
21857: PPUSH
21858: CALL_OW 440
21862: NOT
21863: AND
21864: IFFALSE 21868
// exit ;
21866: GO 21876
// result := true ;
21868: LD_ADDR_VAR 0 6
21872: PUSH
21873: LD_INT 1
21875: ST_TO_ADDR
// end ;
21876: LD_VAR 0 6
21880: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21881: LD_INT 0
21883: PPUSH
21884: PPUSH
21885: PPUSH
21886: PPUSH
21887: PPUSH
21888: PPUSH
21889: PPUSH
21890: PPUSH
21891: PPUSH
21892: PPUSH
21893: PPUSH
21894: PPUSH
21895: PPUSH
21896: PPUSH
21897: PPUSH
21898: PPUSH
21899: PPUSH
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
21916: PPUSH
21917: PPUSH
21918: PPUSH
21919: PPUSH
21920: PPUSH
21921: PPUSH
21922: PPUSH
21923: PPUSH
21924: PPUSH
21925: PPUSH
21926: PPUSH
21927: PPUSH
21928: PPUSH
21929: PPUSH
21930: PPUSH
21931: PPUSH
21932: PPUSH
21933: PPUSH
21934: PPUSH
21935: PPUSH
21936: PPUSH
21937: PPUSH
21938: PPUSH
21939: PPUSH
21940: PPUSH
// result = [ ] ;
21941: LD_ADDR_VAR 0 7
21945: PUSH
21946: EMPTY
21947: ST_TO_ADDR
// temp_list = [ ] ;
21948: LD_ADDR_VAR 0 9
21952: PUSH
21953: EMPTY
21954: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
21955: LD_VAR 0 4
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: LD_INT 3
21971: PUSH
21972: LD_INT 4
21974: PUSH
21975: LD_INT 5
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: IN
21986: NOT
21987: PUSH
21988: LD_VAR 0 1
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: LD_INT 1
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: IN
22003: PUSH
22004: LD_VAR 0 5
22008: PUSH
22009: LD_INT 1
22011: PUSH
22012: LD_INT 2
22014: PUSH
22015: LD_INT 3
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: LIST
22022: IN
22023: NOT
22024: AND
22025: OR
22026: IFFALSE 22030
// exit ;
22028: GO 40421
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22030: LD_VAR 0 1
22034: PUSH
22035: LD_INT 6
22037: PUSH
22038: LD_INT 7
22040: PUSH
22041: LD_INT 8
22043: PUSH
22044: LD_INT 13
22046: PUSH
22047: LD_INT 12
22049: PUSH
22050: LD_INT 15
22052: PUSH
22053: LD_INT 11
22055: PUSH
22056: LD_INT 14
22058: PUSH
22059: LD_INT 10
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: IN
22073: IFFALSE 22083
// btype = b_lab ;
22075: LD_ADDR_VAR 0 1
22079: PUSH
22080: LD_INT 6
22082: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22083: LD_VAR 0 6
22087: PUSH
22088: LD_INT 0
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: LD_INT 2
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: LIST
22101: IN
22102: NOT
22103: PUSH
22104: LD_VAR 0 1
22108: PUSH
22109: LD_INT 0
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 2
22117: PUSH
22118: LD_INT 3
22120: PUSH
22121: LD_INT 6
22123: PUSH
22124: LD_INT 36
22126: PUSH
22127: LD_INT 4
22129: PUSH
22130: LD_INT 5
22132: PUSH
22133: LD_INT 31
22135: PUSH
22136: LD_INT 32
22138: PUSH
22139: LD_INT 33
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: IN
22155: NOT
22156: PUSH
22157: LD_VAR 0 6
22161: PUSH
22162: LD_INT 1
22164: EQUAL
22165: AND
22166: OR
22167: PUSH
22168: LD_VAR 0 1
22172: PUSH
22173: LD_INT 2
22175: PUSH
22176: LD_INT 3
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: IN
22183: NOT
22184: PUSH
22185: LD_VAR 0 6
22189: PUSH
22190: LD_INT 2
22192: EQUAL
22193: AND
22194: OR
22195: IFFALSE 22205
// mode = 0 ;
22197: LD_ADDR_VAR 0 6
22201: PUSH
22202: LD_INT 0
22204: ST_TO_ADDR
// case mode of 0 :
22205: LD_VAR 0 6
22209: PUSH
22210: LD_INT 0
22212: DOUBLE
22213: EQUAL
22214: IFTRUE 22218
22216: GO 33671
22218: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22219: LD_ADDR_VAR 0 11
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: LD_INT 0
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: LD_INT 1
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 1
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 1
22277: NEG
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: NEG
22289: PUSH
22290: LD_INT 1
22292: NEG
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 1
22300: NEG
22301: PUSH
22302: LD_INT 2
22304: NEG
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: LD_INT 2
22315: NEG
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: LD_INT 1
22326: NEG
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 1
22334: PUSH
22335: LD_INT 2
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: LD_INT 2
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: LD_INT 3
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: LD_INT 3
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 1
22385: NEG
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22412: LD_ADDR_VAR 0 12
22416: PUSH
22417: LD_INT 0
22419: PUSH
22420: LD_INT 0
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 0
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: LD_INT 0
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 0
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 1
22470: NEG
22471: PUSH
22472: LD_INT 0
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 1
22481: NEG
22482: PUSH
22483: LD_INT 1
22485: NEG
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 1
22493: PUSH
22494: LD_INT 1
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 2
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 2
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 1
22524: NEG
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 2
22535: NEG
22536: PUSH
22537: LD_INT 0
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 2
22546: NEG
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 2
22558: NEG
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 3
22569: NEG
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 3
22580: NEG
22581: PUSH
22582: LD_INT 1
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22608: LD_ADDR_VAR 0 13
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: LD_INT 0
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 0
22625: PUSH
22626: LD_INT 1
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 1
22646: PUSH
22647: LD_INT 1
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: LD_INT 1
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 1
22666: NEG
22667: PUSH
22668: LD_INT 0
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 1
22677: NEG
22678: PUSH
22679: LD_INT 1
22681: NEG
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 1
22689: NEG
22690: PUSH
22691: LD_INT 2
22693: NEG
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: LD_INT 1
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 2
22711: PUSH
22712: LD_INT 2
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: LD_INT 2
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: NEG
22732: PUSH
22733: LD_INT 1
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 2
22743: NEG
22744: PUSH
22745: LD_INT 2
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 2
22755: NEG
22756: PUSH
22757: LD_INT 3
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 3
22767: NEG
22768: PUSH
22769: LD_INT 2
22771: NEG
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 3
22779: NEG
22780: PUSH
22781: LD_INT 3
22783: NEG
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22807: LD_ADDR_VAR 0 14
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: LD_INT 1
22827: NEG
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: LD_INT 1
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 1
22865: NEG
22866: PUSH
22867: LD_INT 0
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 1
22876: NEG
22877: PUSH
22878: LD_INT 1
22880: NEG
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: LD_INT 2
22892: NEG
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: LD_INT 2
22903: NEG
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: LD_INT 1
22914: NEG
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 0
22932: PUSH
22933: LD_INT 2
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: PUSH
22944: LD_INT 1
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 1
22953: NEG
22954: PUSH
22955: LD_INT 3
22957: NEG
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: LD_INT 3
22968: NEG
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: LD_INT 2
22979: NEG
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23003: LD_ADDR_VAR 0 15
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: NEG
23073: PUSH
23074: LD_INT 1
23076: NEG
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: LD_INT 1
23087: NEG
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 2
23095: PUSH
23096: LD_INT 0
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 2
23105: PUSH
23106: LD_INT 1
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: LD_INT 1
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 2
23126: NEG
23127: PUSH
23128: LD_INT 0
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 2
23137: NEG
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 2
23149: PUSH
23150: LD_INT 1
23152: NEG
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 3
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 3
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23196: LD_ADDR_VAR 0 16
23200: PUSH
23201: LD_INT 0
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 0
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 1
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: LD_INT 0
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: LD_INT 1
23269: NEG
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: LD_INT 2
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 2
23319: NEG
23320: PUSH
23321: LD_INT 1
23323: NEG
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 2
23331: NEG
23332: PUSH
23333: LD_INT 2
23335: NEG
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 3
23343: PUSH
23344: LD_INT 2
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 3
23353: PUSH
23354: LD_INT 3
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 2
23363: PUSH
23364: LD_INT 3
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23389: LD_ADDR_VAR 0 17
23393: PUSH
23394: LD_INT 0
23396: PUSH
23397: LD_INT 0
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: LD_INT 1
23409: NEG
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 1
23417: PUSH
23418: LD_INT 0
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: LD_INT 0
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PUSH
23460: LD_INT 1
23462: NEG
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 1
23470: NEG
23471: PUSH
23472: LD_INT 2
23474: NEG
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: LD_INT 2
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: LD_INT 1
23496: NEG
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 2
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: LD_INT 1
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 2
23524: PUSH
23525: LD_INT 2
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 1
23534: PUSH
23535: LD_INT 2
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: NEG
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 2
23565: NEG
23566: PUSH
23567: LD_INT 0
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 2
23576: NEG
23577: PUSH
23578: LD_INT 1
23580: NEG
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 2
23588: NEG
23589: PUSH
23590: LD_INT 2
23592: NEG
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23619: LD_ADDR_VAR 0 18
23623: PUSH
23624: LD_INT 0
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: LD_INT 1
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 1
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: LD_INT 2
23704: NEG
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: LD_INT 2
23715: NEG
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 1
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 2
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 2
23754: PUSH
23755: LD_INT 2
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 0
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: LD_INT 1
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 2
23795: NEG
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 2
23806: NEG
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 2
23818: NEG
23819: PUSH
23820: LD_INT 2
23822: NEG
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23849: LD_ADDR_VAR 0 19
23853: PUSH
23854: LD_INT 0
23856: PUSH
23857: LD_INT 0
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: LD_INT 1
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 1
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: LD_INT 1
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 1
23918: NEG
23919: PUSH
23920: LD_INT 1
23922: NEG
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: LD_INT 2
23934: NEG
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: LD_INT 2
23945: NEG
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: LD_INT 1
23956: NEG
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 2
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 2
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 2
23984: PUSH
23985: LD_INT 2
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: PUSH
23995: LD_INT 2
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 0
24004: PUSH
24005: LD_INT 2
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: NEG
24015: PUSH
24016: LD_INT 1
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 2
24025: NEG
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 2
24036: NEG
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 2
24048: NEG
24049: PUSH
24050: LD_INT 2
24052: NEG
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24079: LD_ADDR_VAR 0 20
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 0
24096: PUSH
24097: LD_INT 1
24099: NEG
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 1
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: LD_INT 1
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: LD_INT 1
24152: NEG
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: NEG
24161: PUSH
24162: LD_INT 2
24164: NEG
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: LD_INT 2
24175: NEG
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 2
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 2
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: LD_INT 2
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: LD_INT 2
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 2
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 2
24255: NEG
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 2
24266: NEG
24267: PUSH
24268: LD_INT 1
24270: NEG
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: NEG
24279: PUSH
24280: LD_INT 2
24282: NEG
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24309: LD_ADDR_VAR 0 21
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 1
24378: NEG
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 1
24390: NEG
24391: PUSH
24392: LD_INT 2
24394: NEG
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: LD_INT 2
24405: NEG
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: LD_INT 1
24416: NEG
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: LD_INT 0
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: LD_INT 1
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 2
24444: PUSH
24445: LD_INT 2
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: LD_INT 2
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: LD_INT 2
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 2
24485: NEG
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 2
24496: NEG
24497: PUSH
24498: LD_INT 1
24500: NEG
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 2
24508: NEG
24509: PUSH
24510: LD_INT 2
24512: NEG
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24539: LD_ADDR_VAR 0 22
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 1
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: PUSH
24578: LD_INT 1
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 1
24608: NEG
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: LD_INT 2
24624: NEG
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: LD_INT 2
24635: NEG
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: LD_INT 1
24646: NEG
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 2
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 2
24664: PUSH
24665: LD_INT 1
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 2
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: LD_INT 2
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 0
24694: PUSH
24695: LD_INT 2
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 1
24704: NEG
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 2
24715: NEG
24716: PUSH
24717: LD_INT 0
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 2
24726: NEG
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 2
24738: NEG
24739: PUSH
24740: LD_INT 2
24742: NEG
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24769: LD_ADDR_VAR 0 23
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 1
24827: NEG
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 1
24838: NEG
24839: PUSH
24840: LD_INT 1
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: NEG
24851: PUSH
24852: LD_INT 2
24854: NEG
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: LD_INT 2
24865: NEG
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 1
24876: NEG
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 2
24884: PUSH
24885: LD_INT 0
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: LD_INT 2
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 2
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 2
24945: NEG
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 2
24956: NEG
24957: PUSH
24958: LD_INT 1
24960: NEG
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 2
24968: NEG
24969: PUSH
24970: LD_INT 2
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: NEG
24981: PUSH
24982: LD_INT 3
24984: NEG
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: NEG
24993: PUSH
24994: LD_INT 3
24996: NEG
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: PUSH
25005: LD_INT 2
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 2
25015: PUSH
25016: LD_INT 1
25018: NEG
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25049: LD_ADDR_VAR 0 24
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: LD_INT 0
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: LD_INT 1
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: LD_INT 0
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: NEG
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: NEG
25131: PUSH
25132: LD_INT 2
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 0
25142: PUSH
25143: LD_INT 2
25145: NEG
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: LD_INT 1
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 2
25164: PUSH
25165: LD_INT 0
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 2
25174: PUSH
25175: LD_INT 1
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 2
25184: PUSH
25185: LD_INT 2
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 2
25225: NEG
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 2
25236: NEG
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 2
25248: NEG
25249: PUSH
25250: LD_INT 2
25252: NEG
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: LD_INT 2
25263: NEG
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 3
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 3
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25325: LD_ADDR_VAR 0 25
25329: PUSH
25330: LD_INT 0
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: LD_INT 1
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 1
25383: NEG
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 1
25394: NEG
25395: PUSH
25396: LD_INT 1
25398: NEG
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 1
25406: NEG
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: LD_INT 2
25421: NEG
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: LD_INT 1
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 2
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 2
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 2
25460: PUSH
25461: LD_INT 2
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: LD_INT 2
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: LD_INT 2
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 2
25501: NEG
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 2
25512: NEG
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 2
25524: NEG
25525: PUSH
25526: LD_INT 2
25528: NEG
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 3
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 3
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 2
25556: PUSH
25557: LD_INT 3
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: LD_INT 3
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25599: LD_ADDR_VAR 0 26
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 0
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: LD_INT 1
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: LD_INT 2
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: LD_INT 2
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: LD_INT 1
25706: NEG
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: LD_INT 2
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: LD_INT 2
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 2
25775: NEG
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 2
25786: NEG
25787: PUSH
25788: LD_INT 1
25790: NEG
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 2
25798: NEG
25799: PUSH
25800: LD_INT 2
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 2
25810: PUSH
25811: LD_INT 3
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 1
25820: PUSH
25821: LD_INT 3
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 1
25830: NEG
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 2
25841: NEG
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25875: LD_ADDR_VAR 0 27
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: LD_INT 1
25895: NEG
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 1
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 1
25944: NEG
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: LD_INT 2
25960: NEG
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: LD_INT 2
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 2
26000: PUSH
26001: LD_INT 1
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 2
26051: NEG
26052: PUSH
26053: LD_INT 0
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 2
26062: NEG
26063: PUSH
26064: LD_INT 1
26066: NEG
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 2
26074: NEG
26075: PUSH
26076: LD_INT 2
26078: NEG
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: LD_INT 2
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 3
26108: NEG
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 3
26120: NEG
26121: PUSH
26122: LD_INT 2
26124: NEG
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26155: LD_ADDR_VAR 0 28
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: LD_INT 1
26175: NEG
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: PUSH
26194: LD_INT 1
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: NEG
26225: PUSH
26226: LD_INT 1
26228: NEG
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 1
26236: NEG
26237: PUSH
26238: LD_INT 2
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: LD_INT 2
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: LD_INT 1
26262: NEG
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 2
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 2
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: LD_INT 2
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: LD_INT 2
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: LD_INT 2
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 2
26331: NEG
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 2
26342: NEG
26343: PUSH
26344: LD_INT 1
26346: NEG
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 2
26354: NEG
26355: PUSH
26356: LD_INT 2
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 2
26366: NEG
26367: PUSH
26368: LD_INT 3
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: LD_INT 3
26382: NEG
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 3
26390: NEG
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 3
26402: NEG
26403: PUSH
26404: LD_INT 2
26406: NEG
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26437: LD_ADDR_VAR 0 29
26441: PUSH
26442: LD_INT 0
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 1
26518: NEG
26519: PUSH
26520: LD_INT 2
26522: NEG
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: LD_INT 2
26533: NEG
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 2
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 2
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: LD_INT 2
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: LD_INT 2
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: NEG
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 2
26603: NEG
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 2
26615: NEG
26616: PUSH
26617: LD_INT 2
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 2
26627: NEG
26628: PUSH
26629: LD_INT 3
26631: NEG
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 2
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 3
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: LD_INT 3
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 3
26681: NEG
26682: PUSH
26683: LD_INT 2
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26716: LD_ADDR_VAR 0 30
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 1
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 0
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 1
26774: NEG
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 1
26785: NEG
26786: PUSH
26787: LD_INT 1
26789: NEG
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: PUSH
26799: LD_INT 2
26801: NEG
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 0
26809: PUSH
26810: LD_INT 2
26812: NEG
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 2
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 2
26882: NEG
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 2
26893: NEG
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: LD_INT 3
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: LD_INT 2
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 3
26928: PUSH
26929: LD_INT 2
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: LD_INT 3
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 2
26948: NEG
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 3
26959: NEG
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26994: LD_ADDR_VAR 0 31
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 1
27014: NEG
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 1
27052: NEG
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: LD_INT 1
27067: NEG
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: LD_INT 2
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 2
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 2
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 2
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 2
27159: NEG
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 2
27171: NEG
27172: PUSH
27173: LD_INT 2
27175: NEG
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 2
27183: NEG
27184: PUSH
27185: LD_INT 3
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 3
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: LD_INT 2
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 3
27237: NEG
27238: PUSH
27239: LD_INT 2
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27272: LD_ADDR_VAR 0 32
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: LD_INT 0
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: LD_INT 1
27292: NEG
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 1
27310: PUSH
27311: LD_INT 1
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 1
27330: NEG
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: LD_INT 1
27345: NEG
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: LD_INT 2
27357: NEG
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: LD_INT 2
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: LD_INT 1
27379: NEG
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 2
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 2
27397: PUSH
27398: LD_INT 2
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: LD_INT 2
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: LD_INT 2
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 1
27427: NEG
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 2
27438: NEG
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 2
27449: NEG
27450: PUSH
27451: LD_INT 1
27453: NEG
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 1
27461: NEG
27462: PUSH
27463: LD_INT 3
27465: NEG
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: LD_INT 2
27476: NEG
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 3
27484: PUSH
27485: LD_INT 2
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 2
27494: PUSH
27495: LD_INT 3
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 2
27504: NEG
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 3
27515: NEG
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27550: LD_ADDR_VAR 0 33
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 1
27608: NEG
27609: PUSH
27610: LD_INT 0
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 1
27619: NEG
27620: PUSH
27621: LD_INT 1
27623: NEG
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 1
27631: NEG
27632: PUSH
27633: LD_INT 2
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: PUSH
27644: LD_INT 1
27646: NEG
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 2
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 2
27705: NEG
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 2
27716: NEG
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 2
27728: NEG
27729: PUSH
27730: LD_INT 2
27732: NEG
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 2
27740: NEG
27741: PUSH
27742: LD_INT 3
27744: NEG
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 2
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 3
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: LD_INT 3
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 1
27783: NEG
27784: PUSH
27785: LD_INT 2
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 3
27794: NEG
27795: PUSH
27796: LD_INT 2
27798: NEG
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27829: LD_ADDR_VAR 0 34
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: LD_INT 1
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 1
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: LD_INT 0
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 1
27898: NEG
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: LD_INT 2
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: LD_INT 1
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 2
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: LD_INT 2
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: LD_INT 2
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 2
27985: NEG
27986: PUSH
27987: LD_INT 0
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 2
27996: NEG
27997: PUSH
27998: LD_INT 1
28000: NEG
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 2
28008: NEG
28009: PUSH
28010: LD_INT 2
28012: NEG
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: LD_INT 3
28024: NEG
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: LD_INT 2
28035: NEG
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 3
28043: PUSH
28044: LD_INT 2
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 2
28053: PUSH
28054: LD_INT 3
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 2
28063: NEG
28064: PUSH
28065: LD_INT 1
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 3
28074: NEG
28075: PUSH
28076: LD_INT 1
28078: NEG
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28109: LD_ADDR_VAR 0 35
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 1
28167: NEG
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: LD_INT 1
28182: NEG
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 2
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 2
28200: NEG
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28221: LD_ADDR_VAR 0 36
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 0
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 1
28302: NEG
28303: PUSH
28304: LD_INT 2
28306: NEG
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 1
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28333: LD_ADDR_VAR 0 37
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28445: LD_ADDR_VAR 0 38
28449: PUSH
28450: LD_INT 0
28452: PUSH
28453: LD_INT 0
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 0
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 1
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 1
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: LD_INT 0
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 1
28514: NEG
28515: PUSH
28516: LD_INT 1
28518: NEG
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 2
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 2
28536: NEG
28537: PUSH
28538: LD_INT 1
28540: NEG
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28557: LD_ADDR_VAR 0 39
28561: PUSH
28562: LD_INT 0
28564: PUSH
28565: LD_INT 0
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 1
28615: NEG
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 1
28638: NEG
28639: PUSH
28640: LD_INT 2
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: LD_INT 2
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28669: LD_ADDR_VAR 0 40
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: LD_INT 0
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: LD_INT 0
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 1
28738: NEG
28739: PUSH
28740: LD_INT 1
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: LD_INT 1
28753: NEG
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 1
28761: NEG
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28781: LD_ADDR_VAR 0 41
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: LD_INT 1
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 1
28862: NEG
28863: PUSH
28864: LD_INT 2
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 1
28877: NEG
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 2
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 2
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: LD_INT 2
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: PUSH
28916: LD_INT 2
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 2
28936: NEG
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 2
28947: NEG
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 2
28959: NEG
28960: PUSH
28961: LD_INT 2
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: NEG
28972: PUSH
28973: LD_INT 3
28975: NEG
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 2
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 3
28994: PUSH
28995: LD_INT 0
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 3
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 3
29014: PUSH
29015: LD_INT 2
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 3
29024: PUSH
29025: LD_INT 3
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: LD_INT 3
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: LD_INT 1
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 3
29055: NEG
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 3
29066: NEG
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 3
29078: NEG
29079: PUSH
29080: LD_INT 2
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 3
29090: NEG
29091: PUSH
29092: LD_INT 3
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29131: LD_ADDR_VAR 0 42
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: LD_INT 1
29151: NEG
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 1
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: LD_INT 1
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: LD_INT 1
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 1
29189: NEG
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 1
29212: NEG
29213: PUSH
29214: LD_INT 2
29216: NEG
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: LD_INT 2
29227: NEG
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: LD_INT 1
29238: NEG
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 2
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 2
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: LD_INT 2
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 1
29286: NEG
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 2
29297: NEG
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 2
29309: NEG
29310: PUSH
29311: LD_INT 2
29313: NEG
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: LD_INT 3
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: LD_INT 3
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: LD_INT 3
29348: NEG
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 1
29356: PUSH
29357: LD_INT 2
29359: NEG
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: LD_INT 2
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 3
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 2
29387: PUSH
29388: LD_INT 3
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: LD_INT 3
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 0
29407: PUSH
29408: LD_INT 3
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 1
29417: NEG
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 3
29428: NEG
29429: PUSH
29430: LD_INT 2
29432: NEG
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 3
29440: NEG
29441: PUSH
29442: LD_INT 3
29444: NEG
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29481: LD_ADDR_VAR 0 43
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: LD_INT 0
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: NEG
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: LD_INT 2
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: LD_INT 2
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 2
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 2
29606: PUSH
29607: LD_INT 1
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: LD_INT 2
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 2
29647: NEG
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 2
29658: NEG
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 1
29670: NEG
29671: PUSH
29672: LD_INT 3
29674: NEG
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: LD_INT 3
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: LD_INT 2
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 2
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 3
29715: PUSH
29716: LD_INT 0
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 3
29725: PUSH
29726: LD_INT 1
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: LD_INT 3
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: LD_INT 3
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: LD_INT 2
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 2
29766: NEG
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 3
29777: NEG
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 3
29788: NEG
29789: PUSH
29790: LD_INT 1
29792: NEG
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29829: LD_ADDR_VAR 0 44
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: LD_INT 0
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: LD_INT 1
29849: NEG
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 1
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 1
29898: NEG
29899: PUSH
29900: LD_INT 1
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: PUSH
29912: LD_INT 2
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 1
29922: PUSH
29923: LD_INT 1
29925: NEG
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 2
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 2
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: LD_INT 2
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 1
29963: PUSH
29964: LD_INT 2
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 1
29973: NEG
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 2
29984: NEG
29985: PUSH
29986: LD_INT 0
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 2
29995: NEG
29996: PUSH
29997: LD_INT 1
29999: NEG
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 2
30007: NEG
30008: PUSH
30009: LD_INT 2
30011: NEG
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: LD_INT 3
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 2
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 3
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 3
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 3
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 3
30072: PUSH
30073: LD_INT 3
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 2
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 2
30092: NEG
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 3
30103: NEG
30104: PUSH
30105: LD_INT 0
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 3
30114: NEG
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 3
30126: NEG
30127: PUSH
30128: LD_INT 2
30130: NEG
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 3
30138: NEG
30139: PUSH
30140: LD_INT 3
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30179: LD_ADDR_VAR 0 45
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: LD_INT 0
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: LD_INT 1
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 1
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 1
30237: NEG
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 1
30248: NEG
30249: PUSH
30250: LD_INT 1
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 1
30260: NEG
30261: PUSH
30262: LD_INT 2
30264: NEG
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: LD_INT 2
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: LD_INT 1
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 2
30304: PUSH
30305: LD_INT 2
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: LD_INT 2
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 2
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: NEG
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: NEG
30358: PUSH
30359: LD_INT 2
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: NEG
30370: PUSH
30371: LD_INT 3
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: NEG
30382: PUSH
30383: LD_INT 3
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: LD_INT 3
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: PUSH
30405: LD_INT 2
30407: NEG
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 3
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 3
30425: PUSH
30426: LD_INT 3
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: LD_INT 3
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: LD_INT 3
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: LD_INT 3
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 1
30465: NEG
30466: PUSH
30467: LD_INT 2
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 3
30476: NEG
30477: PUSH
30478: LD_INT 2
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 3
30488: NEG
30489: PUSH
30490: LD_INT 3
30492: NEG
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30529: LD_ADDR_VAR 0 46
30533: PUSH
30534: LD_INT 0
30536: PUSH
30537: LD_INT 0
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 0
30546: PUSH
30547: LD_INT 1
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: LD_INT 1
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: NEG
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 1
30610: NEG
30611: PUSH
30612: LD_INT 2
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: LD_INT 2
30625: NEG
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: LD_INT 1
30636: NEG
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 2
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 2
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: LD_INT 2
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: LD_INT 2
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 2
30695: NEG
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 2
30706: NEG
30707: PUSH
30708: LD_INT 1
30710: NEG
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: LD_INT 3
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: LD_INT 3
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: LD_INT 2
30744: NEG
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 2
30752: PUSH
30753: LD_INT 1
30755: NEG
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 3
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 3
30773: PUSH
30774: LD_INT 1
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: LD_INT 3
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 3
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 2
30814: NEG
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 3
30825: NEG
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 3
30836: NEG
30837: PUSH
30838: LD_INT 1
30840: NEG
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30877: LD_ADDR_VAR 0 47
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: LD_INT 0
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 0
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 0
30925: PUSH
30926: LD_INT 1
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: LD_INT 0
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: NEG
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: LD_INT 2
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: LD_INT 1
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 2
30992: NEG
30993: PUSH
30994: LD_INT 1
30996: NEG
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 2
31004: NEG
31005: PUSH
31006: LD_INT 2
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31028: LD_ADDR_VAR 0 48
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 1
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: LD_INT 2
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: LD_INT 2
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31175: LD_ADDR_VAR 0 49
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 0
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: LD_INT 0
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 2
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31319: LD_ADDR_VAR 0 50
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: LD_INT 1
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: LD_INT 1
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: LD_INT 0
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 2
31410: PUSH
31411: LD_INT 2
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: LD_INT 2
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: LD_INT 2
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31463: LD_ADDR_VAR 0 51
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: LD_INT 1
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: LD_INT 1
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: LD_INT 2
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 0
31554: PUSH
31555: LD_INT 2
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: LD_INT 1
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: LD_INT 1
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31610: LD_ADDR_VAR 0 52
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: LD_INT 2
31695: NEG
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: LD_INT 0
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: LD_INT 1
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: LD_INT 2
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31761: LD_ADDR_VAR 0 53
31765: PUSH
31766: LD_INT 0
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: LD_INT 1
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: LD_INT 0
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: LD_INT 2
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: LD_INT 2
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: LD_INT 1
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: LD_INT 2
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 1
31906: PUSH
31907: LD_INT 2
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 2
31948: NEG
31949: PUSH
31950: LD_INT 1
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 2
31960: NEG
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31991: LD_ADDR_VAR 0 54
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 1
32049: NEG
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: LD_INT 2
32076: NEG
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 0
32084: PUSH
32085: LD_INT 2
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: LD_INT 1
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: LD_INT 2
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 2
32167: NEG
32168: PUSH
32169: LD_INT 0
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 2
32178: NEG
32179: PUSH
32180: LD_INT 1
32182: NEG
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 2
32190: NEG
32191: PUSH
32192: LD_INT 2
32194: NEG
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32221: LD_ADDR_VAR 0 55
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: NEG
32280: PUSH
32281: LD_INT 0
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 1
32290: NEG
32291: PUSH
32292: LD_INT 1
32294: NEG
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: LD_INT 2
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 0
32314: PUSH
32315: LD_INT 2
32317: NEG
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: LD_INT 1
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: LD_INT 2
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 2
32397: NEG
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 2
32408: NEG
32409: PUSH
32410: LD_INT 1
32412: NEG
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 2
32420: NEG
32421: PUSH
32422: LD_INT 2
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32451: LD_ADDR_VAR 0 56
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: LD_INT 0
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: LD_INT 1
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: LD_INT 2
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: LD_INT 2
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 2
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: LD_INT 2
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 2
32627: NEG
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 2
32638: NEG
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: NEG
32651: PUSH
32652: LD_INT 2
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32681: LD_ADDR_VAR 0 57
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: LD_INT 1
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 1
32750: NEG
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: LD_INT 2
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 2
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 0
32836: PUSH
32837: LD_INT 2
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 2
32857: NEG
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 2
32868: NEG
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: LD_INT 2
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32911: LD_ADDR_VAR 0 58
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 1
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: LD_INT 1
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: NEG
32993: PUSH
32994: LD_INT 2
32996: NEG
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: LD_INT 2
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 2
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 1
33056: PUSH
33057: LD_INT 2
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: LD_INT 2
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 2
33087: NEG
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 2
33098: NEG
33099: PUSH
33100: LD_INT 1
33102: NEG
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 2
33110: NEG
33111: PUSH
33112: LD_INT 2
33114: NEG
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33141: LD_ADDR_VAR 0 59
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: LD_INT 1
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: LD_INT 0
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: NEG
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: LD_INT 1
33214: NEG
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33229: LD_ADDR_VAR 0 60
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33317: LD_ADDR_VAR 0 61
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 0
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: LD_INT 0
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: LD_INT 1
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 0
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: LD_INT 1
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33405: LD_ADDR_VAR 0 62
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 0
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 1
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 1
33463: NEG
33464: PUSH
33465: LD_INT 0
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33493: LD_ADDR_VAR 0 63
33497: PUSH
33498: LD_INT 0
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 0
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: LD_INT 1
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: LD_INT 1
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: LD_INT 1
33566: NEG
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33581: LD_ADDR_VAR 0 64
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: LD_INT 1
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: ST_TO_ADDR
// end ; 1 :
33669: GO 39566
33671: LD_INT 1
33673: DOUBLE
33674: EQUAL
33675: IFTRUE 33679
33677: GO 36302
33679: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33680: LD_ADDR_VAR 0 11
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: LD_INT 3
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: LD_INT 3
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 1
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33724: LD_ADDR_VAR 0 12
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: LD_INT 1
33734: NEG
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 3
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 3
33752: PUSH
33753: LD_INT 1
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: LIST
33764: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33765: LD_ADDR_VAR 0 13
33769: PUSH
33770: LD_INT 3
33772: PUSH
33773: LD_INT 2
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 3
33782: PUSH
33783: LD_INT 3
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 2
33792: PUSH
33793: LD_INT 3
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: LIST
33804: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33805: LD_ADDR_VAR 0 14
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: LD_INT 3
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: LD_INT 3
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: LD_INT 2
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33846: LD_ADDR_VAR 0 15
33850: PUSH
33851: LD_INT 2
33853: NEG
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 3
33864: NEG
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 3
33875: NEG
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33890: LD_ADDR_VAR 0 16
33894: PUSH
33895: LD_INT 2
33897: NEG
33898: PUSH
33899: LD_INT 3
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: LD_INT 2
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 3
33921: NEG
33922: PUSH
33923: LD_INT 3
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33936: LD_ADDR_VAR 0 17
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: LD_INT 3
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 3
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 1
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: LIST
33979: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33980: LD_ADDR_VAR 0 18
33984: PUSH
33985: LD_INT 2
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 3
33998: PUSH
33999: LD_INT 0
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 3
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34021: LD_ADDR_VAR 0 19
34025: PUSH
34026: LD_INT 3
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 3
34038: PUSH
34039: LD_INT 3
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 2
34048: PUSH
34049: LD_INT 3
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34061: LD_ADDR_VAR 0 20
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: LD_INT 3
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: LD_INT 3
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34102: LD_ADDR_VAR 0 21
34106: PUSH
34107: LD_INT 2
34109: NEG
34110: PUSH
34111: LD_INT 1
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 3
34120: NEG
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 3
34131: NEG
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: LIST
34145: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34146: LD_ADDR_VAR 0 22
34150: PUSH
34151: LD_INT 2
34153: NEG
34154: PUSH
34155: LD_INT 3
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 3
34165: NEG
34166: PUSH
34167: LD_INT 2
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 3
34177: NEG
34178: PUSH
34179: LD_INT 3
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: LIST
34191: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34192: LD_ADDR_VAR 0 23
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: LD_INT 3
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 1
34210: NEG
34211: PUSH
34212: LD_INT 4
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 3
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34236: LD_ADDR_VAR 0 24
34240: PUSH
34241: LD_INT 3
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 3
34253: PUSH
34254: LD_INT 1
34256: NEG
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 4
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34277: LD_ADDR_VAR 0 25
34281: PUSH
34282: LD_INT 3
34284: PUSH
34285: LD_INT 3
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 4
34294: PUSH
34295: LD_INT 3
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 3
34304: PUSH
34305: LD_INT 4
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34317: LD_ADDR_VAR 0 26
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: LD_INT 3
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: LD_INT 4
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: LD_INT 3
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: LIST
34357: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34358: LD_ADDR_VAR 0 27
34362: PUSH
34363: LD_INT 3
34365: NEG
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 3
34376: NEG
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 4
34387: NEG
34388: PUSH
34389: LD_INT 1
34391: NEG
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: LIST
34401: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34402: LD_ADDR_VAR 0 28
34406: PUSH
34407: LD_INT 3
34409: NEG
34410: PUSH
34411: LD_INT 3
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 3
34421: NEG
34422: PUSH
34423: LD_INT 4
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 4
34433: NEG
34434: PUSH
34435: LD_INT 3
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34448: LD_ADDR_VAR 0 29
34452: PUSH
34453: LD_INT 1
34455: NEG
34456: PUSH
34457: LD_INT 3
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: LD_INT 3
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: LD_INT 4
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: LD_INT 4
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: LD_INT 3
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: LD_INT 5
34527: NEG
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: LD_INT 5
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: LD_INT 4
34549: NEG
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: LD_INT 6
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 0
34569: PUSH
34570: LD_INT 6
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: LD_INT 5
34583: NEG
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34603: LD_ADDR_VAR 0 30
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 3
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 3
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 3
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 4
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 4
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 4
34672: PUSH
34673: LD_INT 1
34675: NEG
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 5
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 5
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 5
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 6
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 6
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34746: LD_ADDR_VAR 0 31
34750: PUSH
34751: LD_INT 3
34753: PUSH
34754: LD_INT 2
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 3
34763: PUSH
34764: LD_INT 3
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: LD_INT 3
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 4
34783: PUSH
34784: LD_INT 3
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 4
34793: PUSH
34794: LD_INT 4
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 3
34803: PUSH
34804: LD_INT 4
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 5
34813: PUSH
34814: LD_INT 4
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 5
34823: PUSH
34824: LD_INT 5
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 4
34833: PUSH
34834: LD_INT 5
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 6
34843: PUSH
34844: LD_INT 5
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 6
34853: PUSH
34854: LD_INT 6
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 5
34863: PUSH
34864: LD_INT 6
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34885: LD_ADDR_VAR 0 32
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: LD_INT 3
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: LD_INT 3
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 1
34912: NEG
34913: PUSH
34914: LD_INT 2
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: LD_INT 4
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: LD_INT 4
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: NEG
34944: PUSH
34945: LD_INT 3
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: LD_INT 5
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: LD_INT 5
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: LD_INT 4
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: LD_INT 6
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: LD_INT 6
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: PUSH
35007: LD_INT 5
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35028: LD_ADDR_VAR 0 33
35032: PUSH
35033: LD_INT 2
35035: NEG
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 3
35046: NEG
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 3
35057: NEG
35058: PUSH
35059: LD_INT 1
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 3
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 4
35080: NEG
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 4
35091: NEG
35092: PUSH
35093: LD_INT 1
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 4
35103: NEG
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 5
35114: NEG
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 5
35125: NEG
35126: PUSH
35127: LD_INT 1
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 5
35137: NEG
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 6
35148: NEG
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 6
35159: NEG
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35183: LD_ADDR_VAR 0 34
35187: PUSH
35188: LD_INT 2
35190: NEG
35191: PUSH
35192: LD_INT 3
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 3
35202: NEG
35203: PUSH
35204: LD_INT 2
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 3
35214: NEG
35215: PUSH
35216: LD_INT 3
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 3
35226: NEG
35227: PUSH
35228: LD_INT 4
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 4
35238: NEG
35239: PUSH
35240: LD_INT 3
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 4
35250: NEG
35251: PUSH
35252: LD_INT 4
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 4
35262: NEG
35263: PUSH
35264: LD_INT 5
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 5
35274: NEG
35275: PUSH
35276: LD_INT 4
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 5
35286: NEG
35287: PUSH
35288: LD_INT 5
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 5
35298: NEG
35299: PUSH
35300: LD_INT 6
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 6
35310: NEG
35311: PUSH
35312: LD_INT 5
35314: NEG
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 6
35322: NEG
35323: PUSH
35324: LD_INT 6
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35346: LD_ADDR_VAR 0 41
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: LD_INT 2
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: LD_INT 3
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: LD_INT 2
35379: NEG
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35390: LD_ADDR_VAR 0 42
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: LD_INT 1
35410: NEG
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 3
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: LIST
35430: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35431: LD_ADDR_VAR 0 43
35435: PUSH
35436: LD_INT 2
35438: PUSH
35439: LD_INT 2
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 3
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: PUSH
35459: LD_INT 3
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: LIST
35470: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35471: LD_ADDR_VAR 0 44
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: LD_INT 3
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: LIST
35511: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35512: LD_ADDR_VAR 0 45
35516: PUSH
35517: LD_INT 2
35519: NEG
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: NEG
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 3
35541: NEG
35542: PUSH
35543: LD_INT 1
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35556: LD_ADDR_VAR 0 46
35560: PUSH
35561: LD_INT 2
35563: NEG
35564: PUSH
35565: LD_INT 2
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 2
35575: NEG
35576: PUSH
35577: LD_INT 3
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 3
35587: NEG
35588: PUSH
35589: LD_INT 2
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: LIST
35601: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35602: LD_ADDR_VAR 0 47
35606: PUSH
35607: LD_INT 2
35609: NEG
35610: PUSH
35611: LD_INT 3
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: LD_INT 3
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35635: LD_ADDR_VAR 0 48
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 2
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 2
35653: PUSH
35654: LD_INT 1
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35666: LD_ADDR_VAR 0 49
35670: PUSH
35671: LD_INT 3
35673: PUSH
35674: LD_INT 1
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 3
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35695: LD_ADDR_VAR 0 50
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: LD_INT 3
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: LD_INT 3
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35724: LD_ADDR_VAR 0 51
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: NEG
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35755: LD_ADDR_VAR 0 52
35759: PUSH
35760: LD_INT 3
35762: NEG
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 3
35774: NEG
35775: PUSH
35776: LD_INT 2
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35788: LD_ADDR_VAR 0 53
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: LD_INT 3
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: LD_INT 3
35810: NEG
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 2
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: LIST
35831: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35832: LD_ADDR_VAR 0 54
35836: PUSH
35837: LD_INT 2
35839: PUSH
35840: LD_INT 1
35842: NEG
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: LD_INT 0
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 3
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: LIST
35872: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35873: LD_ADDR_VAR 0 55
35877: PUSH
35878: LD_INT 3
35880: PUSH
35881: LD_INT 2
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: LD_INT 3
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 2
35900: PUSH
35901: LD_INT 3
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: LIST
35912: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35913: LD_ADDR_VAR 0 56
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: LD_INT 3
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: LD_INT 3
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: LD_INT 2
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: LIST
35953: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35954: LD_ADDR_VAR 0 57
35958: PUSH
35959: LD_INT 2
35961: NEG
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 3
35972: NEG
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 3
35983: NEG
35984: PUSH
35985: LD_INT 1
35987: NEG
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35998: LD_ADDR_VAR 0 58
36002: PUSH
36003: LD_INT 2
36005: NEG
36006: PUSH
36007: LD_INT 3
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 3
36017: NEG
36018: PUSH
36019: LD_INT 2
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 3
36029: NEG
36030: PUSH
36031: LD_INT 3
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36044: LD_ADDR_VAR 0 59
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: LD_INT 2
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: LD_INT 2
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36088: LD_ADDR_VAR 0 60
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: LD_INT 1
36098: NEG
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 2
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: LIST
36128: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36129: LD_ADDR_VAR 0 61
36133: PUSH
36134: LD_INT 2
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: LD_INT 2
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: LIST
36168: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36169: LD_ADDR_VAR 0 62
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: LD_INT 2
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: LIST
36209: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36210: LD_ADDR_VAR 0 63
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: LD_INT 1
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 2
36228: NEG
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 2
36239: NEG
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36254: LD_ADDR_VAR 0 64
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: LD_INT 2
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 2
36273: NEG
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 2
36285: NEG
36286: PUSH
36287: LD_INT 2
36289: NEG
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: LIST
36299: ST_TO_ADDR
// end ; 2 :
36300: GO 39566
36302: LD_INT 2
36304: DOUBLE
36305: EQUAL
36306: IFTRUE 36310
36308: GO 39565
36310: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36311: LD_ADDR_VAR 0 29
36315: PUSH
36316: LD_INT 4
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 4
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 5
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 5
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 4
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 3
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 3
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 3
36390: PUSH
36391: LD_INT 2
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 5
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 3
36411: PUSH
36412: LD_INT 3
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 3
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 4
36431: PUSH
36432: LD_INT 3
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 4
36441: PUSH
36442: LD_INT 4
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 3
36451: PUSH
36452: LD_INT 4
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 2
36461: PUSH
36462: LD_INT 3
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 2
36471: PUSH
36472: LD_INT 2
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 4
36481: PUSH
36482: LD_INT 2
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: LD_INT 4
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 4
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: LD_INT 3
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: LD_INT 4
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: LD_INT 5
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: LD_INT 5
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: LD_INT 4
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: LD_INT 3
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 2
36573: PUSH
36574: LD_INT 5
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: LD_INT 3
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 3
36594: NEG
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 3
36605: NEG
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 2
36617: NEG
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 2
36628: NEG
36629: PUSH
36630: LD_INT 1
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 3
36639: NEG
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 4
36650: NEG
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 4
36661: NEG
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 4
36673: NEG
36674: PUSH
36675: LD_INT 2
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 2
36685: NEG
36686: PUSH
36687: LD_INT 2
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 4
36696: NEG
36697: PUSH
36698: LD_INT 4
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 4
36708: NEG
36709: PUSH
36710: LD_INT 5
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 3
36720: NEG
36721: PUSH
36722: LD_INT 4
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 3
36732: NEG
36733: PUSH
36734: LD_INT 3
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 4
36744: NEG
36745: PUSH
36746: LD_INT 3
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 5
36756: NEG
36757: PUSH
36758: LD_INT 4
36760: NEG
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 5
36768: NEG
36769: PUSH
36770: LD_INT 5
36772: NEG
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 3
36780: NEG
36781: PUSH
36782: LD_INT 5
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 5
36792: NEG
36793: PUSH
36794: LD_INT 3
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
36849: LD_ADDR_VAR 0 30
36853: PUSH
36854: LD_INT 4
36856: PUSH
36857: LD_INT 4
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 4
36866: PUSH
36867: LD_INT 3
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 5
36876: PUSH
36877: LD_INT 4
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 5
36886: PUSH
36887: LD_INT 5
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 4
36896: PUSH
36897: LD_INT 5
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 3
36906: PUSH
36907: LD_INT 4
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 3
36916: PUSH
36917: LD_INT 3
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 5
36926: PUSH
36927: LD_INT 3
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 3
36936: PUSH
36937: LD_INT 5
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: LD_INT 3
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: LD_INT 3
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: LD_INT 4
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: LD_INT 4
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: LD_INT 3
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: LD_INT 2
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 2
37018: PUSH
37019: LD_INT 4
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 2
37028: NEG
37029: PUSH
37030: LD_INT 2
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 4
37039: NEG
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 4
37050: NEG
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 3
37062: NEG
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 3
37073: NEG
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 4
37084: NEG
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 5
37095: NEG
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 5
37106: NEG
37107: PUSH
37108: LD_INT 1
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 5
37118: NEG
37119: PUSH
37120: LD_INT 2
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 3
37130: NEG
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 3
37141: NEG
37142: PUSH
37143: LD_INT 3
37145: NEG
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 3
37153: NEG
37154: PUSH
37155: LD_INT 4
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 2
37165: NEG
37166: PUSH
37167: LD_INT 3
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: LD_INT 2
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 3
37189: NEG
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 4
37201: NEG
37202: PUSH
37203: LD_INT 3
37205: NEG
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 4
37213: NEG
37214: PUSH
37215: LD_INT 4
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 2
37225: NEG
37226: PUSH
37227: LD_INT 4
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 4
37237: NEG
37238: PUSH
37239: LD_INT 2
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: LD_INT 4
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 5
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: LD_INT 4
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: LD_INT 3
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: LD_INT 3
37296: NEG
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: LD_INT 4
37308: NEG
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: LD_INT 5
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 2
37328: PUSH
37329: LD_INT 3
37331: NEG
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: NEG
37340: PUSH
37341: LD_INT 5
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37396: LD_ADDR_VAR 0 31
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 4
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 3
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: LD_INT 4
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: LD_INT 5
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: LD_INT 5
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: NEG
37454: PUSH
37455: LD_INT 4
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: LD_INT 3
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: LD_INT 5
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: NEG
37486: PUSH
37487: LD_INT 3
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 3
37496: NEG
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 3
37507: NEG
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 2
37519: NEG
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 2
37530: NEG
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 3
37541: NEG
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 4
37552: NEG
37553: PUSH
37554: LD_INT 0
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 4
37563: NEG
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 4
37575: NEG
37576: PUSH
37577: LD_INT 2
37579: NEG
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 4
37598: NEG
37599: PUSH
37600: LD_INT 4
37602: NEG
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 4
37610: NEG
37611: PUSH
37612: LD_INT 5
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 3
37622: NEG
37623: PUSH
37624: LD_INT 4
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 3
37634: NEG
37635: PUSH
37636: LD_INT 3
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 4
37646: NEG
37647: PUSH
37648: LD_INT 3
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 5
37658: NEG
37659: PUSH
37660: LD_INT 4
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 5
37670: NEG
37671: PUSH
37672: LD_INT 5
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 3
37682: NEG
37683: PUSH
37684: LD_INT 5
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 5
37694: NEG
37695: PUSH
37696: LD_INT 3
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 3
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: LD_INT 4
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: LD_INT 3
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: LD_INT 2
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: NEG
37762: PUSH
37763: LD_INT 3
37765: NEG
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 1
37773: NEG
37774: PUSH
37775: LD_INT 4
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 2
37796: NEG
37797: PUSH
37798: LD_INT 4
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 4
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 4
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 5
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 5
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 4
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 3
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 3
37869: PUSH
37870: LD_INT 1
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 3
37880: PUSH
37881: LD_INT 2
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 5
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
37946: LD_ADDR_VAR 0 32
37950: PUSH
37951: LD_INT 4
37953: NEG
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 4
37964: NEG
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 3
37976: NEG
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 3
37987: NEG
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 4
37998: NEG
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 5
38009: NEG
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 5
38020: NEG
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 5
38032: NEG
38033: PUSH
38034: LD_INT 2
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 3
38044: NEG
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 3
38055: NEG
38056: PUSH
38057: LD_INT 3
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 3
38067: NEG
38068: PUSH
38069: LD_INT 4
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 2
38079: NEG
38080: PUSH
38081: LD_INT 3
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 3
38103: NEG
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 4
38115: NEG
38116: PUSH
38117: LD_INT 3
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 4
38127: NEG
38128: PUSH
38129: LD_INT 4
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: NEG
38140: PUSH
38141: LD_INT 4
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 4
38151: NEG
38152: PUSH
38153: LD_INT 2
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: LD_INT 4
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: LD_INT 5
38177: NEG
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: LD_INT 4
38188: NEG
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: LD_INT 3
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: LD_INT 3
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: LD_INT 4
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: LD_INT 5
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 2
38242: PUSH
38243: LD_INT 3
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 2
38253: NEG
38254: PUSH
38255: LD_INT 5
38257: NEG
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 3
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 3
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 4
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 4
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 3
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 2
38337: PUSH
38338: LD_INT 2
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 4
38348: PUSH
38349: LD_INT 2
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 4
38358: PUSH
38359: LD_INT 4
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 4
38368: PUSH
38369: LD_INT 3
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 5
38378: PUSH
38379: LD_INT 4
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 5
38388: PUSH
38389: LD_INT 5
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 4
38398: PUSH
38399: LD_INT 5
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 3
38408: PUSH
38409: LD_INT 4
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 3
38418: PUSH
38419: LD_INT 3
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 5
38428: PUSH
38429: LD_INT 3
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 3
38438: PUSH
38439: LD_INT 5
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38493: LD_ADDR_VAR 0 33
38497: PUSH
38498: LD_INT 4
38500: NEG
38501: PUSH
38502: LD_INT 4
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 4
38512: NEG
38513: PUSH
38514: LD_INT 5
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 3
38524: NEG
38525: PUSH
38526: LD_INT 4
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 3
38536: NEG
38537: PUSH
38538: LD_INT 3
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 4
38548: NEG
38549: PUSH
38550: LD_INT 3
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 5
38560: NEG
38561: PUSH
38562: LD_INT 4
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 5
38572: NEG
38573: PUSH
38574: LD_INT 5
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 3
38584: NEG
38585: PUSH
38586: LD_INT 5
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 5
38596: NEG
38597: PUSH
38598: LD_INT 3
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 3
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 4
38622: NEG
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: LD_INT 3
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: NEG
38664: PUSH
38665: LD_INT 3
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: LD_INT 4
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: LD_INT 2
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 2
38698: NEG
38699: PUSH
38700: LD_INT 4
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 4
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 4
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 5
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 5
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 4
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 3
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 3
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 3
38782: PUSH
38783: LD_INT 2
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 5
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 3
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 3
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 4
38823: PUSH
38824: LD_INT 3
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 4
38833: PUSH
38834: LD_INT 4
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 3
38843: PUSH
38844: LD_INT 4
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: PUSH
38854: LD_INT 3
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 2
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 4
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 2
38883: PUSH
38884: LD_INT 4
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 4
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: LD_INT 3
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: LD_INT 4
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: LD_INT 5
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 5
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: LD_INT 4
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: LD_INT 3
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 5
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: NEG
38976: PUSH
38977: LD_INT 3
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39031: LD_ADDR_VAR 0 34
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 4
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: LD_INT 5
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 4
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: LD_INT 3
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: LD_INT 3
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: LD_INT 4
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: LD_INT 5
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: LD_INT 3
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 2
39128: NEG
39129: PUSH
39130: LD_INT 5
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 3
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 3
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 4
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 4
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 3
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: LD_INT 2
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 4
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 4
39233: PUSH
39234: LD_INT 4
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 4
39243: PUSH
39244: LD_INT 3
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 5
39253: PUSH
39254: LD_INT 4
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 5
39263: PUSH
39264: LD_INT 5
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 4
39273: PUSH
39274: LD_INT 5
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 3
39283: PUSH
39284: LD_INT 4
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 3
39293: PUSH
39294: LD_INT 3
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 5
39303: PUSH
39304: LD_INT 3
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 3
39313: PUSH
39314: LD_INT 5
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 3
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: LD_INT 2
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: LD_INT 3
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: LD_INT 4
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 4
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: LD_INT 3
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: LD_INT 4
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 2
39405: NEG
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 4
39416: NEG
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 4
39427: NEG
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 3
39439: NEG
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 3
39450: NEG
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 4
39461: NEG
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 5
39472: NEG
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 5
39483: NEG
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 5
39495: NEG
39496: PUSH
39497: LD_INT 2
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 3
39507: NEG
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: ST_TO_ADDR
// end ; end ;
39563: GO 39566
39565: POP
// case btype of b_depot , b_warehouse :
39566: LD_VAR 0 1
39570: PUSH
39571: LD_INT 0
39573: DOUBLE
39574: EQUAL
39575: IFTRUE 39585
39577: LD_INT 1
39579: DOUBLE
39580: EQUAL
39581: IFTRUE 39585
39583: GO 39786
39585: POP
// case nation of nation_american :
39586: LD_VAR 0 5
39590: PUSH
39591: LD_INT 1
39593: DOUBLE
39594: EQUAL
39595: IFTRUE 39599
39597: GO 39655
39599: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39600: LD_ADDR_VAR 0 9
39604: PUSH
39605: LD_VAR 0 11
39609: PUSH
39610: LD_VAR 0 12
39614: PUSH
39615: LD_VAR 0 13
39619: PUSH
39620: LD_VAR 0 14
39624: PUSH
39625: LD_VAR 0 15
39629: PUSH
39630: LD_VAR 0 16
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: PUSH
39643: LD_VAR 0 4
39647: PUSH
39648: LD_INT 1
39650: PLUS
39651: ARRAY
39652: ST_TO_ADDR
39653: GO 39784
39655: LD_INT 2
39657: DOUBLE
39658: EQUAL
39659: IFTRUE 39663
39661: GO 39719
39663: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39664: LD_ADDR_VAR 0 9
39668: PUSH
39669: LD_VAR 0 17
39673: PUSH
39674: LD_VAR 0 18
39678: PUSH
39679: LD_VAR 0 19
39683: PUSH
39684: LD_VAR 0 20
39688: PUSH
39689: LD_VAR 0 21
39693: PUSH
39694: LD_VAR 0 22
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: PUSH
39707: LD_VAR 0 4
39711: PUSH
39712: LD_INT 1
39714: PLUS
39715: ARRAY
39716: ST_TO_ADDR
39717: GO 39784
39719: LD_INT 3
39721: DOUBLE
39722: EQUAL
39723: IFTRUE 39727
39725: GO 39783
39727: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39728: LD_ADDR_VAR 0 9
39732: PUSH
39733: LD_VAR 0 23
39737: PUSH
39738: LD_VAR 0 24
39742: PUSH
39743: LD_VAR 0 25
39747: PUSH
39748: LD_VAR 0 26
39752: PUSH
39753: LD_VAR 0 27
39757: PUSH
39758: LD_VAR 0 28
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: PUSH
39771: LD_VAR 0 4
39775: PUSH
39776: LD_INT 1
39778: PLUS
39779: ARRAY
39780: ST_TO_ADDR
39781: GO 39784
39783: POP
39784: GO 40339
39786: LD_INT 2
39788: DOUBLE
39789: EQUAL
39790: IFTRUE 39800
39792: LD_INT 3
39794: DOUBLE
39795: EQUAL
39796: IFTRUE 39800
39798: GO 39856
39800: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39801: LD_ADDR_VAR 0 9
39805: PUSH
39806: LD_VAR 0 29
39810: PUSH
39811: LD_VAR 0 30
39815: PUSH
39816: LD_VAR 0 31
39820: PUSH
39821: LD_VAR 0 32
39825: PUSH
39826: LD_VAR 0 33
39830: PUSH
39831: LD_VAR 0 34
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: PUSH
39844: LD_VAR 0 4
39848: PUSH
39849: LD_INT 1
39851: PLUS
39852: ARRAY
39853: ST_TO_ADDR
39854: GO 40339
39856: LD_INT 16
39858: DOUBLE
39859: EQUAL
39860: IFTRUE 39918
39862: LD_INT 17
39864: DOUBLE
39865: EQUAL
39866: IFTRUE 39918
39868: LD_INT 18
39870: DOUBLE
39871: EQUAL
39872: IFTRUE 39918
39874: LD_INT 19
39876: DOUBLE
39877: EQUAL
39878: IFTRUE 39918
39880: LD_INT 22
39882: DOUBLE
39883: EQUAL
39884: IFTRUE 39918
39886: LD_INT 20
39888: DOUBLE
39889: EQUAL
39890: IFTRUE 39918
39892: LD_INT 21
39894: DOUBLE
39895: EQUAL
39896: IFTRUE 39918
39898: LD_INT 23
39900: DOUBLE
39901: EQUAL
39902: IFTRUE 39918
39904: LD_INT 24
39906: DOUBLE
39907: EQUAL
39908: IFTRUE 39918
39910: LD_INT 25
39912: DOUBLE
39913: EQUAL
39914: IFTRUE 39918
39916: GO 39974
39918: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39919: LD_ADDR_VAR 0 9
39923: PUSH
39924: LD_VAR 0 35
39928: PUSH
39929: LD_VAR 0 36
39933: PUSH
39934: LD_VAR 0 37
39938: PUSH
39939: LD_VAR 0 38
39943: PUSH
39944: LD_VAR 0 39
39948: PUSH
39949: LD_VAR 0 40
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: PUSH
39962: LD_VAR 0 4
39966: PUSH
39967: LD_INT 1
39969: PLUS
39970: ARRAY
39971: ST_TO_ADDR
39972: GO 40339
39974: LD_INT 6
39976: DOUBLE
39977: EQUAL
39978: IFTRUE 40030
39980: LD_INT 7
39982: DOUBLE
39983: EQUAL
39984: IFTRUE 40030
39986: LD_INT 8
39988: DOUBLE
39989: EQUAL
39990: IFTRUE 40030
39992: LD_INT 13
39994: DOUBLE
39995: EQUAL
39996: IFTRUE 40030
39998: LD_INT 12
40000: DOUBLE
40001: EQUAL
40002: IFTRUE 40030
40004: LD_INT 15
40006: DOUBLE
40007: EQUAL
40008: IFTRUE 40030
40010: LD_INT 11
40012: DOUBLE
40013: EQUAL
40014: IFTRUE 40030
40016: LD_INT 14
40018: DOUBLE
40019: EQUAL
40020: IFTRUE 40030
40022: LD_INT 10
40024: DOUBLE
40025: EQUAL
40026: IFTRUE 40030
40028: GO 40086
40030: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40031: LD_ADDR_VAR 0 9
40035: PUSH
40036: LD_VAR 0 41
40040: PUSH
40041: LD_VAR 0 42
40045: PUSH
40046: LD_VAR 0 43
40050: PUSH
40051: LD_VAR 0 44
40055: PUSH
40056: LD_VAR 0 45
40060: PUSH
40061: LD_VAR 0 46
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: PUSH
40074: LD_VAR 0 4
40078: PUSH
40079: LD_INT 1
40081: PLUS
40082: ARRAY
40083: ST_TO_ADDR
40084: GO 40339
40086: LD_INT 36
40088: DOUBLE
40089: EQUAL
40090: IFTRUE 40094
40092: GO 40150
40094: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40095: LD_ADDR_VAR 0 9
40099: PUSH
40100: LD_VAR 0 47
40104: PUSH
40105: LD_VAR 0 48
40109: PUSH
40110: LD_VAR 0 49
40114: PUSH
40115: LD_VAR 0 50
40119: PUSH
40120: LD_VAR 0 51
40124: PUSH
40125: LD_VAR 0 52
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: PUSH
40138: LD_VAR 0 4
40142: PUSH
40143: LD_INT 1
40145: PLUS
40146: ARRAY
40147: ST_TO_ADDR
40148: GO 40339
40150: LD_INT 4
40152: DOUBLE
40153: EQUAL
40154: IFTRUE 40176
40156: LD_INT 5
40158: DOUBLE
40159: EQUAL
40160: IFTRUE 40176
40162: LD_INT 34
40164: DOUBLE
40165: EQUAL
40166: IFTRUE 40176
40168: LD_INT 37
40170: DOUBLE
40171: EQUAL
40172: IFTRUE 40176
40174: GO 40232
40176: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40177: LD_ADDR_VAR 0 9
40181: PUSH
40182: LD_VAR 0 53
40186: PUSH
40187: LD_VAR 0 54
40191: PUSH
40192: LD_VAR 0 55
40196: PUSH
40197: LD_VAR 0 56
40201: PUSH
40202: LD_VAR 0 57
40206: PUSH
40207: LD_VAR 0 58
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: PUSH
40220: LD_VAR 0 4
40224: PUSH
40225: LD_INT 1
40227: PLUS
40228: ARRAY
40229: ST_TO_ADDR
40230: GO 40339
40232: LD_INT 31
40234: DOUBLE
40235: EQUAL
40236: IFTRUE 40282
40238: LD_INT 32
40240: DOUBLE
40241: EQUAL
40242: IFTRUE 40282
40244: LD_INT 33
40246: DOUBLE
40247: EQUAL
40248: IFTRUE 40282
40250: LD_INT 27
40252: DOUBLE
40253: EQUAL
40254: IFTRUE 40282
40256: LD_INT 26
40258: DOUBLE
40259: EQUAL
40260: IFTRUE 40282
40262: LD_INT 28
40264: DOUBLE
40265: EQUAL
40266: IFTRUE 40282
40268: LD_INT 29
40270: DOUBLE
40271: EQUAL
40272: IFTRUE 40282
40274: LD_INT 30
40276: DOUBLE
40277: EQUAL
40278: IFTRUE 40282
40280: GO 40338
40282: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40283: LD_ADDR_VAR 0 9
40287: PUSH
40288: LD_VAR 0 59
40292: PUSH
40293: LD_VAR 0 60
40297: PUSH
40298: LD_VAR 0 61
40302: PUSH
40303: LD_VAR 0 62
40307: PUSH
40308: LD_VAR 0 63
40312: PUSH
40313: LD_VAR 0 64
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: PUSH
40326: LD_VAR 0 4
40330: PUSH
40331: LD_INT 1
40333: PLUS
40334: ARRAY
40335: ST_TO_ADDR
40336: GO 40339
40338: POP
// temp_list2 = [ ] ;
40339: LD_ADDR_VAR 0 10
40343: PUSH
40344: EMPTY
40345: ST_TO_ADDR
// for i in temp_list do
40346: LD_ADDR_VAR 0 8
40350: PUSH
40351: LD_VAR 0 9
40355: PUSH
40356: FOR_IN
40357: IFFALSE 40409
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40359: LD_ADDR_VAR 0 10
40363: PUSH
40364: LD_VAR 0 10
40368: PUSH
40369: LD_VAR 0 8
40373: PUSH
40374: LD_INT 1
40376: ARRAY
40377: PUSH
40378: LD_VAR 0 2
40382: PLUS
40383: PUSH
40384: LD_VAR 0 8
40388: PUSH
40389: LD_INT 2
40391: ARRAY
40392: PUSH
40393: LD_VAR 0 3
40397: PLUS
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: EMPTY
40404: LIST
40405: ADD
40406: ST_TO_ADDR
40407: GO 40356
40409: POP
40410: POP
// result = temp_list2 ;
40411: LD_ADDR_VAR 0 7
40415: PUSH
40416: LD_VAR 0 10
40420: ST_TO_ADDR
// end ;
40421: LD_VAR 0 7
40425: RET
// export function EnemyInRange ( unit , dist ) ; begin
40426: LD_INT 0
40428: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40429: LD_ADDR_VAR 0 3
40433: PUSH
40434: LD_VAR 0 1
40438: PPUSH
40439: CALL_OW 255
40443: PPUSH
40444: LD_VAR 0 1
40448: PPUSH
40449: CALL_OW 250
40453: PPUSH
40454: LD_VAR 0 1
40458: PPUSH
40459: CALL_OW 251
40463: PPUSH
40464: LD_VAR 0 2
40468: PPUSH
40469: CALL 13822 0 4
40473: PUSH
40474: LD_INT 4
40476: ARRAY
40477: ST_TO_ADDR
// end ;
40478: LD_VAR 0 3
40482: RET
// export function PlayerSeeMe ( unit ) ; begin
40483: LD_INT 0
40485: PPUSH
// result := See ( your_side , unit ) ;
40486: LD_ADDR_VAR 0 2
40490: PUSH
40491: LD_OWVAR 2
40495: PPUSH
40496: LD_VAR 0 1
40500: PPUSH
40501: CALL_OW 292
40505: ST_TO_ADDR
// end ;
40506: LD_VAR 0 2
40510: RET
// export function ReverseDir ( unit ) ; begin
40511: LD_INT 0
40513: PPUSH
// if not unit then
40514: LD_VAR 0 1
40518: NOT
40519: IFFALSE 40523
// exit ;
40521: GO 40546
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40523: LD_ADDR_VAR 0 2
40527: PUSH
40528: LD_VAR 0 1
40532: PPUSH
40533: CALL_OW 254
40537: PUSH
40538: LD_INT 3
40540: PLUS
40541: PUSH
40542: LD_INT 6
40544: MOD
40545: ST_TO_ADDR
// end ;
40546: LD_VAR 0 2
40550: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
40551: LD_INT 0
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
// if not hexes then
40558: LD_VAR 0 2
40562: NOT
40563: IFFALSE 40567
// exit ;
40565: GO 40715
// dist := 9999 ;
40567: LD_ADDR_VAR 0 5
40571: PUSH
40572: LD_INT 9999
40574: ST_TO_ADDR
// for i = 1 to hexes do
40575: LD_ADDR_VAR 0 4
40579: PUSH
40580: DOUBLE
40581: LD_INT 1
40583: DEC
40584: ST_TO_ADDR
40585: LD_VAR 0 2
40589: PUSH
40590: FOR_TO
40591: IFFALSE 40703
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
40593: LD_VAR 0 1
40597: PPUSH
40598: LD_VAR 0 2
40602: PUSH
40603: LD_VAR 0 4
40607: ARRAY
40608: PUSH
40609: LD_INT 1
40611: ARRAY
40612: PPUSH
40613: LD_VAR 0 2
40617: PUSH
40618: LD_VAR 0 4
40622: ARRAY
40623: PUSH
40624: LD_INT 2
40626: ARRAY
40627: PPUSH
40628: CALL_OW 297
40632: PUSH
40633: LD_VAR 0 5
40637: LESS
40638: IFFALSE 40701
// begin hex := hexes [ i ] ;
40640: LD_ADDR_VAR 0 7
40644: PUSH
40645: LD_VAR 0 2
40649: PUSH
40650: LD_VAR 0 4
40654: ARRAY
40655: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40656: LD_ADDR_VAR 0 5
40660: PUSH
40661: LD_VAR 0 1
40665: PPUSH
40666: LD_VAR 0 2
40670: PUSH
40671: LD_VAR 0 4
40675: ARRAY
40676: PUSH
40677: LD_INT 1
40679: ARRAY
40680: PPUSH
40681: LD_VAR 0 2
40685: PUSH
40686: LD_VAR 0 4
40690: ARRAY
40691: PUSH
40692: LD_INT 2
40694: ARRAY
40695: PPUSH
40696: CALL_OW 297
40700: ST_TO_ADDR
// end ; end ;
40701: GO 40590
40703: POP
40704: POP
// result := hex ;
40705: LD_ADDR_VAR 0 3
40709: PUSH
40710: LD_VAR 0 7
40714: ST_TO_ADDR
// end ;
40715: LD_VAR 0 3
40719: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40720: LD_INT 0
40722: PPUSH
40723: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40724: LD_VAR 0 1
40728: NOT
40729: PUSH
40730: LD_VAR 0 1
40734: PUSH
40735: LD_INT 21
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 23
40747: PUSH
40748: LD_INT 2
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PPUSH
40759: CALL_OW 69
40763: IN
40764: NOT
40765: OR
40766: IFFALSE 40770
// exit ;
40768: GO 40817
// for i = 1 to 3 do
40770: LD_ADDR_VAR 0 3
40774: PUSH
40775: DOUBLE
40776: LD_INT 1
40778: DEC
40779: ST_TO_ADDR
40780: LD_INT 3
40782: PUSH
40783: FOR_TO
40784: IFFALSE 40815
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40786: LD_VAR 0 1
40790: PPUSH
40791: CALL_OW 250
40795: PPUSH
40796: LD_VAR 0 1
40800: PPUSH
40801: CALL_OW 251
40805: PPUSH
40806: LD_INT 1
40808: PPUSH
40809: CALL_OW 453
40813: GO 40783
40815: POP
40816: POP
// end ;
40817: LD_VAR 0 2
40821: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40822: LD_INT 0
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40830: LD_VAR 0 1
40834: NOT
40835: PUSH
40836: LD_VAR 0 2
40840: NOT
40841: OR
40842: PUSH
40843: LD_VAR 0 1
40847: PPUSH
40848: CALL_OW 314
40852: OR
40853: IFFALSE 40857
// exit ;
40855: GO 41298
// x := GetX ( enemy_unit ) ;
40857: LD_ADDR_VAR 0 7
40861: PUSH
40862: LD_VAR 0 2
40866: PPUSH
40867: CALL_OW 250
40871: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40872: LD_ADDR_VAR 0 8
40876: PUSH
40877: LD_VAR 0 2
40881: PPUSH
40882: CALL_OW 251
40886: ST_TO_ADDR
// if not x or not y then
40887: LD_VAR 0 7
40891: NOT
40892: PUSH
40893: LD_VAR 0 8
40897: NOT
40898: OR
40899: IFFALSE 40903
// exit ;
40901: GO 41298
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
40903: LD_ADDR_VAR 0 6
40907: PUSH
40908: LD_VAR 0 7
40912: PPUSH
40913: LD_INT 0
40915: PPUSH
40916: LD_INT 4
40918: PPUSH
40919: CALL_OW 272
40923: PUSH
40924: LD_VAR 0 8
40928: PPUSH
40929: LD_INT 0
40931: PPUSH
40932: LD_INT 4
40934: PPUSH
40935: CALL_OW 273
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_VAR 0 7
40948: PPUSH
40949: LD_INT 1
40951: PPUSH
40952: LD_INT 4
40954: PPUSH
40955: CALL_OW 272
40959: PUSH
40960: LD_VAR 0 8
40964: PPUSH
40965: LD_INT 1
40967: PPUSH
40968: LD_INT 4
40970: PPUSH
40971: CALL_OW 273
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_VAR 0 7
40984: PPUSH
40985: LD_INT 2
40987: PPUSH
40988: LD_INT 4
40990: PPUSH
40991: CALL_OW 272
40995: PUSH
40996: LD_VAR 0 8
41000: PPUSH
41001: LD_INT 2
41003: PPUSH
41004: LD_INT 4
41006: PPUSH
41007: CALL_OW 273
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_VAR 0 7
41020: PPUSH
41021: LD_INT 3
41023: PPUSH
41024: LD_INT 4
41026: PPUSH
41027: CALL_OW 272
41031: PUSH
41032: LD_VAR 0 8
41036: PPUSH
41037: LD_INT 3
41039: PPUSH
41040: LD_INT 4
41042: PPUSH
41043: CALL_OW 273
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_VAR 0 7
41056: PPUSH
41057: LD_INT 4
41059: PPUSH
41060: LD_INT 4
41062: PPUSH
41063: CALL_OW 272
41067: PUSH
41068: LD_VAR 0 8
41072: PPUSH
41073: LD_INT 4
41075: PPUSH
41076: LD_INT 4
41078: PPUSH
41079: CALL_OW 273
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_VAR 0 7
41092: PPUSH
41093: LD_INT 5
41095: PPUSH
41096: LD_INT 4
41098: PPUSH
41099: CALL_OW 272
41103: PUSH
41104: LD_VAR 0 8
41108: PPUSH
41109: LD_INT 5
41111: PPUSH
41112: LD_INT 4
41114: PPUSH
41115: CALL_OW 273
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: ST_TO_ADDR
// for i = tmp downto 1 do
41132: LD_ADDR_VAR 0 4
41136: PUSH
41137: DOUBLE
41138: LD_VAR 0 6
41142: INC
41143: ST_TO_ADDR
41144: LD_INT 1
41146: PUSH
41147: FOR_DOWNTO
41148: IFFALSE 41249
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41150: LD_VAR 0 6
41154: PUSH
41155: LD_VAR 0 4
41159: ARRAY
41160: PUSH
41161: LD_INT 1
41163: ARRAY
41164: PPUSH
41165: LD_VAR 0 6
41169: PUSH
41170: LD_VAR 0 4
41174: ARRAY
41175: PUSH
41176: LD_INT 2
41178: ARRAY
41179: PPUSH
41180: CALL_OW 488
41184: NOT
41185: PUSH
41186: LD_VAR 0 6
41190: PUSH
41191: LD_VAR 0 4
41195: ARRAY
41196: PUSH
41197: LD_INT 1
41199: ARRAY
41200: PPUSH
41201: LD_VAR 0 6
41205: PUSH
41206: LD_VAR 0 4
41210: ARRAY
41211: PUSH
41212: LD_INT 2
41214: ARRAY
41215: PPUSH
41216: CALL_OW 428
41220: PUSH
41221: LD_INT 0
41223: NONEQUAL
41224: OR
41225: IFFALSE 41247
// tmp := Delete ( tmp , i ) ;
41227: LD_ADDR_VAR 0 6
41231: PUSH
41232: LD_VAR 0 6
41236: PPUSH
41237: LD_VAR 0 4
41241: PPUSH
41242: CALL_OW 3
41246: ST_TO_ADDR
41247: GO 41147
41249: POP
41250: POP
// j := GetClosestHex ( unit , tmp ) ;
41251: LD_ADDR_VAR 0 5
41255: PUSH
41256: LD_VAR 0 1
41260: PPUSH
41261: LD_VAR 0 6
41265: PPUSH
41266: CALL 40551 0 2
41270: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41271: LD_VAR 0 1
41275: PPUSH
41276: LD_VAR 0 5
41280: PUSH
41281: LD_INT 1
41283: ARRAY
41284: PPUSH
41285: LD_VAR 0 5
41289: PUSH
41290: LD_INT 2
41292: ARRAY
41293: PPUSH
41294: CALL_OW 111
// end ;
41298: LD_VAR 0 3
41302: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41303: LD_INT 0
41305: PPUSH
41306: PPUSH
41307: PPUSH
// uc_side = 0 ;
41308: LD_ADDR_OWVAR 20
41312: PUSH
41313: LD_INT 0
41315: ST_TO_ADDR
// uc_nation = 0 ;
41316: LD_ADDR_OWVAR 21
41320: PUSH
41321: LD_INT 0
41323: ST_TO_ADDR
// InitHc_All ( ) ;
41324: CALL_OW 584
// InitVc ;
41328: CALL_OW 20
// if mastodonts then
41332: LD_VAR 0 6
41336: IFFALSE 41403
// for i = 1 to mastodonts do
41338: LD_ADDR_VAR 0 11
41342: PUSH
41343: DOUBLE
41344: LD_INT 1
41346: DEC
41347: ST_TO_ADDR
41348: LD_VAR 0 6
41352: PUSH
41353: FOR_TO
41354: IFFALSE 41401
// begin vc_chassis := 31 ;
41356: LD_ADDR_OWVAR 37
41360: PUSH
41361: LD_INT 31
41363: ST_TO_ADDR
// vc_control := control_rider ;
41364: LD_ADDR_OWVAR 38
41368: PUSH
41369: LD_INT 4
41371: ST_TO_ADDR
// animal := CreateVehicle ;
41372: LD_ADDR_VAR 0 12
41376: PUSH
41377: CALL_OW 45
41381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41382: LD_VAR 0 12
41386: PPUSH
41387: LD_VAR 0 8
41391: PPUSH
41392: LD_INT 0
41394: PPUSH
41395: CALL 43591 0 3
// end ;
41399: GO 41353
41401: POP
41402: POP
// if horses then
41403: LD_VAR 0 5
41407: IFFALSE 41474
// for i = 1 to horses do
41409: LD_ADDR_VAR 0 11
41413: PUSH
41414: DOUBLE
41415: LD_INT 1
41417: DEC
41418: ST_TO_ADDR
41419: LD_VAR 0 5
41423: PUSH
41424: FOR_TO
41425: IFFALSE 41472
// begin hc_class := 21 ;
41427: LD_ADDR_OWVAR 28
41431: PUSH
41432: LD_INT 21
41434: ST_TO_ADDR
// hc_gallery :=  ;
41435: LD_ADDR_OWVAR 33
41439: PUSH
41440: LD_STRING 
41442: ST_TO_ADDR
// animal := CreateHuman ;
41443: LD_ADDR_VAR 0 12
41447: PUSH
41448: CALL_OW 44
41452: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41453: LD_VAR 0 12
41457: PPUSH
41458: LD_VAR 0 8
41462: PPUSH
41463: LD_INT 0
41465: PPUSH
41466: CALL 43591 0 3
// end ;
41470: GO 41424
41472: POP
41473: POP
// if birds then
41474: LD_VAR 0 1
41478: IFFALSE 41545
// for i = 1 to birds do
41480: LD_ADDR_VAR 0 11
41484: PUSH
41485: DOUBLE
41486: LD_INT 1
41488: DEC
41489: ST_TO_ADDR
41490: LD_VAR 0 1
41494: PUSH
41495: FOR_TO
41496: IFFALSE 41543
// begin hc_class = 18 ;
41498: LD_ADDR_OWVAR 28
41502: PUSH
41503: LD_INT 18
41505: ST_TO_ADDR
// hc_gallery =  ;
41506: LD_ADDR_OWVAR 33
41510: PUSH
41511: LD_STRING 
41513: ST_TO_ADDR
// animal := CreateHuman ;
41514: LD_ADDR_VAR 0 12
41518: PUSH
41519: CALL_OW 44
41523: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41524: LD_VAR 0 12
41528: PPUSH
41529: LD_VAR 0 8
41533: PPUSH
41534: LD_INT 0
41536: PPUSH
41537: CALL 43591 0 3
// end ;
41541: GO 41495
41543: POP
41544: POP
// if tigers then
41545: LD_VAR 0 2
41549: IFFALSE 41633
// for i = 1 to tigers do
41551: LD_ADDR_VAR 0 11
41555: PUSH
41556: DOUBLE
41557: LD_INT 1
41559: DEC
41560: ST_TO_ADDR
41561: LD_VAR 0 2
41565: PUSH
41566: FOR_TO
41567: IFFALSE 41631
// begin hc_class = class_tiger ;
41569: LD_ADDR_OWVAR 28
41573: PUSH
41574: LD_INT 14
41576: ST_TO_ADDR
// hc_gallery =  ;
41577: LD_ADDR_OWVAR 33
41581: PUSH
41582: LD_STRING 
41584: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41585: LD_ADDR_OWVAR 35
41589: PUSH
41590: LD_INT 7
41592: NEG
41593: PPUSH
41594: LD_INT 7
41596: PPUSH
41597: CALL_OW 12
41601: ST_TO_ADDR
// animal := CreateHuman ;
41602: LD_ADDR_VAR 0 12
41606: PUSH
41607: CALL_OW 44
41611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41612: LD_VAR 0 12
41616: PPUSH
41617: LD_VAR 0 8
41621: PPUSH
41622: LD_INT 0
41624: PPUSH
41625: CALL 43591 0 3
// end ;
41629: GO 41566
41631: POP
41632: POP
// if apemans then
41633: LD_VAR 0 3
41637: IFFALSE 41760
// for i = 1 to apemans do
41639: LD_ADDR_VAR 0 11
41643: PUSH
41644: DOUBLE
41645: LD_INT 1
41647: DEC
41648: ST_TO_ADDR
41649: LD_VAR 0 3
41653: PUSH
41654: FOR_TO
41655: IFFALSE 41758
// begin hc_class = class_apeman ;
41657: LD_ADDR_OWVAR 28
41661: PUSH
41662: LD_INT 12
41664: ST_TO_ADDR
// hc_gallery =  ;
41665: LD_ADDR_OWVAR 33
41669: PUSH
41670: LD_STRING 
41672: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
41673: LD_ADDR_OWVAR 35
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PPUSH
41682: LD_INT 2
41684: PPUSH
41685: CALL_OW 12
41689: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41690: LD_ADDR_OWVAR 31
41694: PUSH
41695: LD_INT 1
41697: PPUSH
41698: LD_INT 3
41700: PPUSH
41701: CALL_OW 12
41705: PUSH
41706: LD_INT 1
41708: PPUSH
41709: LD_INT 3
41711: PPUSH
41712: CALL_OW 12
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: ST_TO_ADDR
// animal := CreateHuman ;
41729: LD_ADDR_VAR 0 12
41733: PUSH
41734: CALL_OW 44
41738: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41739: LD_VAR 0 12
41743: PPUSH
41744: LD_VAR 0 8
41748: PPUSH
41749: LD_INT 0
41751: PPUSH
41752: CALL 43591 0 3
// end ;
41756: GO 41654
41758: POP
41759: POP
// if enchidnas then
41760: LD_VAR 0 4
41764: IFFALSE 41831
// for i = 1 to enchidnas do
41766: LD_ADDR_VAR 0 11
41770: PUSH
41771: DOUBLE
41772: LD_INT 1
41774: DEC
41775: ST_TO_ADDR
41776: LD_VAR 0 4
41780: PUSH
41781: FOR_TO
41782: IFFALSE 41829
// begin hc_class = 13 ;
41784: LD_ADDR_OWVAR 28
41788: PUSH
41789: LD_INT 13
41791: ST_TO_ADDR
// hc_gallery =  ;
41792: LD_ADDR_OWVAR 33
41796: PUSH
41797: LD_STRING 
41799: ST_TO_ADDR
// animal := CreateHuman ;
41800: LD_ADDR_VAR 0 12
41804: PUSH
41805: CALL_OW 44
41809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41810: LD_VAR 0 12
41814: PPUSH
41815: LD_VAR 0 8
41819: PPUSH
41820: LD_INT 0
41822: PPUSH
41823: CALL 43591 0 3
// end ;
41827: GO 41781
41829: POP
41830: POP
// if fishes then
41831: LD_VAR 0 7
41835: IFFALSE 41902
// for i = 1 to fishes do
41837: LD_ADDR_VAR 0 11
41841: PUSH
41842: DOUBLE
41843: LD_INT 1
41845: DEC
41846: ST_TO_ADDR
41847: LD_VAR 0 7
41851: PUSH
41852: FOR_TO
41853: IFFALSE 41900
// begin hc_class = 20 ;
41855: LD_ADDR_OWVAR 28
41859: PUSH
41860: LD_INT 20
41862: ST_TO_ADDR
// hc_gallery =  ;
41863: LD_ADDR_OWVAR 33
41867: PUSH
41868: LD_STRING 
41870: ST_TO_ADDR
// animal := CreateHuman ;
41871: LD_ADDR_VAR 0 12
41875: PUSH
41876: CALL_OW 44
41880: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41881: LD_VAR 0 12
41885: PPUSH
41886: LD_VAR 0 9
41890: PPUSH
41891: LD_INT 0
41893: PPUSH
41894: CALL 43591 0 3
// end ;
41898: GO 41852
41900: POP
41901: POP
// end ;
41902: LD_VAR 0 10
41906: RET
// export function WantHeal ( sci , unit ) ; begin
41907: LD_INT 0
41909: PPUSH
// if GetTaskList ( sci ) > 0 then
41910: LD_VAR 0 1
41914: PPUSH
41915: CALL_OW 437
41919: PUSH
41920: LD_INT 0
41922: GREATER
41923: IFFALSE 41993
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41925: LD_VAR 0 1
41929: PPUSH
41930: CALL_OW 437
41934: PUSH
41935: LD_INT 1
41937: ARRAY
41938: PUSH
41939: LD_INT 1
41941: ARRAY
41942: PUSH
41943: LD_STRING l
41945: EQUAL
41946: PUSH
41947: LD_VAR 0 1
41951: PPUSH
41952: CALL_OW 437
41956: PUSH
41957: LD_INT 1
41959: ARRAY
41960: PUSH
41961: LD_INT 4
41963: ARRAY
41964: PUSH
41965: LD_VAR 0 2
41969: EQUAL
41970: AND
41971: IFFALSE 41983
// result := true else
41973: LD_ADDR_VAR 0 3
41977: PUSH
41978: LD_INT 1
41980: ST_TO_ADDR
41981: GO 41991
// result := false ;
41983: LD_ADDR_VAR 0 3
41987: PUSH
41988: LD_INT 0
41990: ST_TO_ADDR
// end else
41991: GO 42001
// result := false ;
41993: LD_ADDR_VAR 0 3
41997: PUSH
41998: LD_INT 0
42000: ST_TO_ADDR
// end ;
42001: LD_VAR 0 3
42005: RET
// export function HealTarget ( sci ) ; begin
42006: LD_INT 0
42008: PPUSH
// if not sci then
42009: LD_VAR 0 1
42013: NOT
42014: IFFALSE 42018
// exit ;
42016: GO 42083
// result := 0 ;
42018: LD_ADDR_VAR 0 2
42022: PUSH
42023: LD_INT 0
42025: ST_TO_ADDR
// if GetTaskList ( sci ) then
42026: LD_VAR 0 1
42030: PPUSH
42031: CALL_OW 437
42035: IFFALSE 42083
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42037: LD_VAR 0 1
42041: PPUSH
42042: CALL_OW 437
42046: PUSH
42047: LD_INT 1
42049: ARRAY
42050: PUSH
42051: LD_INT 1
42053: ARRAY
42054: PUSH
42055: LD_STRING l
42057: EQUAL
42058: IFFALSE 42083
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42060: LD_ADDR_VAR 0 2
42064: PUSH
42065: LD_VAR 0 1
42069: PPUSH
42070: CALL_OW 437
42074: PUSH
42075: LD_INT 1
42077: ARRAY
42078: PUSH
42079: LD_INT 4
42081: ARRAY
42082: ST_TO_ADDR
// end ;
42083: LD_VAR 0 2
42087: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42088: LD_INT 0
42090: PPUSH
42091: PPUSH
42092: PPUSH
42093: PPUSH
// if not base_units then
42094: LD_VAR 0 1
42098: NOT
42099: IFFALSE 42103
// exit ;
42101: GO 42190
// result := false ;
42103: LD_ADDR_VAR 0 2
42107: PUSH
42108: LD_INT 0
42110: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42111: LD_ADDR_VAR 0 5
42115: PUSH
42116: LD_VAR 0 1
42120: PPUSH
42121: LD_INT 21
42123: PUSH
42124: LD_INT 3
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PPUSH
42131: CALL_OW 72
42135: ST_TO_ADDR
// if not tmp then
42136: LD_VAR 0 5
42140: NOT
42141: IFFALSE 42145
// exit ;
42143: GO 42190
// for i in tmp do
42145: LD_ADDR_VAR 0 3
42149: PUSH
42150: LD_VAR 0 5
42154: PUSH
42155: FOR_IN
42156: IFFALSE 42188
// begin result := EnemyInRange ( i , 22 ) ;
42158: LD_ADDR_VAR 0 2
42162: PUSH
42163: LD_VAR 0 3
42167: PPUSH
42168: LD_INT 22
42170: PPUSH
42171: CALL 40426 0 2
42175: ST_TO_ADDR
// if result then
42176: LD_VAR 0 2
42180: IFFALSE 42186
// exit ;
42182: POP
42183: POP
42184: GO 42190
// end ;
42186: GO 42155
42188: POP
42189: POP
// end ;
42190: LD_VAR 0 2
42194: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
42195: LD_INT 0
42197: PPUSH
42198: PPUSH
// if not units then
42199: LD_VAR 0 1
42203: NOT
42204: IFFALSE 42208
// exit ;
42206: GO 42278
// result := [ ] ;
42208: LD_ADDR_VAR 0 3
42212: PUSH
42213: EMPTY
42214: ST_TO_ADDR
// for i in units do
42215: LD_ADDR_VAR 0 4
42219: PUSH
42220: LD_VAR 0 1
42224: PUSH
42225: FOR_IN
42226: IFFALSE 42276
// if GetTag ( i ) = tag then
42228: LD_VAR 0 4
42232: PPUSH
42233: CALL_OW 110
42237: PUSH
42238: LD_VAR 0 2
42242: EQUAL
42243: IFFALSE 42274
// result := Replace ( result , result + 1 , i ) ;
42245: LD_ADDR_VAR 0 3
42249: PUSH
42250: LD_VAR 0 3
42254: PPUSH
42255: LD_VAR 0 3
42259: PUSH
42260: LD_INT 1
42262: PLUS
42263: PPUSH
42264: LD_VAR 0 4
42268: PPUSH
42269: CALL_OW 1
42273: ST_TO_ADDR
42274: GO 42225
42276: POP
42277: POP
// end ;
42278: LD_VAR 0 3
42282: RET
// export function IsDriver ( un ) ; begin
42283: LD_INT 0
42285: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42286: LD_ADDR_VAR 0 2
42290: PUSH
42291: LD_VAR 0 1
42295: PUSH
42296: LD_INT 55
42298: PUSH
42299: EMPTY
42300: LIST
42301: PPUSH
42302: CALL_OW 69
42306: IN
42307: ST_TO_ADDR
// end ;
42308: LD_VAR 0 2
42312: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42313: LD_INT 0
42315: PPUSH
42316: PPUSH
// list := [ ] ;
42317: LD_ADDR_VAR 0 5
42321: PUSH
42322: EMPTY
42323: ST_TO_ADDR
// case d of 0 :
42324: LD_VAR 0 3
42328: PUSH
42329: LD_INT 0
42331: DOUBLE
42332: EQUAL
42333: IFTRUE 42337
42335: GO 42470
42337: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42338: LD_ADDR_VAR 0 5
42342: PUSH
42343: LD_VAR 0 1
42347: PUSH
42348: LD_INT 4
42350: MINUS
42351: PUSH
42352: LD_VAR 0 2
42356: PUSH
42357: LD_INT 4
42359: MINUS
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: LIST
42368: PUSH
42369: LD_VAR 0 1
42373: PUSH
42374: LD_INT 3
42376: MINUS
42377: PUSH
42378: LD_VAR 0 2
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: LIST
42390: PUSH
42391: LD_VAR 0 1
42395: PUSH
42396: LD_INT 4
42398: PLUS
42399: PUSH
42400: LD_VAR 0 2
42404: PUSH
42405: LD_INT 4
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: LIST
42412: PUSH
42413: LD_VAR 0 1
42417: PUSH
42418: LD_INT 3
42420: PLUS
42421: PUSH
42422: LD_VAR 0 2
42426: PUSH
42427: LD_INT 3
42429: PLUS
42430: PUSH
42431: LD_INT 5
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: LIST
42438: PUSH
42439: LD_VAR 0 1
42443: PUSH
42444: LD_VAR 0 2
42448: PUSH
42449: LD_INT 4
42451: PLUS
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: LIST
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: ST_TO_ADDR
// end ; 1 :
42468: GO 43168
42470: LD_INT 1
42472: DOUBLE
42473: EQUAL
42474: IFTRUE 42478
42476: GO 42611
42478: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42479: LD_ADDR_VAR 0 5
42483: PUSH
42484: LD_VAR 0 1
42488: PUSH
42489: LD_VAR 0 2
42493: PUSH
42494: LD_INT 4
42496: MINUS
42497: PUSH
42498: LD_INT 3
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: LIST
42505: PUSH
42506: LD_VAR 0 1
42510: PUSH
42511: LD_INT 3
42513: MINUS
42514: PUSH
42515: LD_VAR 0 2
42519: PUSH
42520: LD_INT 3
42522: MINUS
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: LIST
42531: PUSH
42532: LD_VAR 0 1
42536: PUSH
42537: LD_INT 4
42539: MINUS
42540: PUSH
42541: LD_VAR 0 2
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: PUSH
42554: LD_VAR 0 1
42558: PUSH
42559: LD_VAR 0 2
42563: PUSH
42564: LD_INT 3
42566: PLUS
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: PUSH
42576: LD_VAR 0 1
42580: PUSH
42581: LD_INT 4
42583: PLUS
42584: PUSH
42585: LD_VAR 0 2
42589: PUSH
42590: LD_INT 4
42592: PLUS
42593: PUSH
42594: LD_INT 5
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: LIST
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: ST_TO_ADDR
// end ; 2 :
42609: GO 43168
42611: LD_INT 2
42613: DOUBLE
42614: EQUAL
42615: IFTRUE 42619
42617: GO 42748
42619: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42620: LD_ADDR_VAR 0 5
42624: PUSH
42625: LD_VAR 0 1
42629: PUSH
42630: LD_VAR 0 2
42634: PUSH
42635: LD_INT 3
42637: MINUS
42638: PUSH
42639: LD_INT 3
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: PUSH
42647: LD_VAR 0 1
42651: PUSH
42652: LD_INT 4
42654: PLUS
42655: PUSH
42656: LD_VAR 0 2
42660: PUSH
42661: LD_INT 4
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: LIST
42668: PUSH
42669: LD_VAR 0 1
42673: PUSH
42674: LD_VAR 0 2
42678: PUSH
42679: LD_INT 4
42681: PLUS
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: PUSH
42691: LD_VAR 0 1
42695: PUSH
42696: LD_INT 3
42698: MINUS
42699: PUSH
42700: LD_VAR 0 2
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: LIST
42712: PUSH
42713: LD_VAR 0 1
42717: PUSH
42718: LD_INT 4
42720: MINUS
42721: PUSH
42722: LD_VAR 0 2
42726: PUSH
42727: LD_INT 4
42729: MINUS
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: LIST
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: ST_TO_ADDR
// end ; 3 :
42746: GO 43168
42748: LD_INT 3
42750: DOUBLE
42751: EQUAL
42752: IFTRUE 42756
42754: GO 42889
42756: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42757: LD_ADDR_VAR 0 5
42761: PUSH
42762: LD_VAR 0 1
42766: PUSH
42767: LD_INT 3
42769: PLUS
42770: PUSH
42771: LD_VAR 0 2
42775: PUSH
42776: LD_INT 4
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: PUSH
42784: LD_VAR 0 1
42788: PUSH
42789: LD_INT 4
42791: PLUS
42792: PUSH
42793: LD_VAR 0 2
42797: PUSH
42798: LD_INT 4
42800: PLUS
42801: PUSH
42802: LD_INT 5
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: LIST
42809: PUSH
42810: LD_VAR 0 1
42814: PUSH
42815: LD_INT 4
42817: MINUS
42818: PUSH
42819: LD_VAR 0 2
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: LIST
42831: PUSH
42832: LD_VAR 0 1
42836: PUSH
42837: LD_VAR 0 2
42841: PUSH
42842: LD_INT 4
42844: MINUS
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: PUSH
42854: LD_VAR 0 1
42858: PUSH
42859: LD_INT 3
42861: MINUS
42862: PUSH
42863: LD_VAR 0 2
42867: PUSH
42868: LD_INT 3
42870: MINUS
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: ST_TO_ADDR
// end ; 4 :
42887: GO 43168
42889: LD_INT 4
42891: DOUBLE
42892: EQUAL
42893: IFTRUE 42897
42895: GO 43030
42897: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42898: LD_ADDR_VAR 0 5
42902: PUSH
42903: LD_VAR 0 1
42907: PUSH
42908: LD_VAR 0 2
42912: PUSH
42913: LD_INT 4
42915: PLUS
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: PUSH
42925: LD_VAR 0 1
42929: PUSH
42930: LD_INT 3
42932: PLUS
42933: PUSH
42934: LD_VAR 0 2
42938: PUSH
42939: LD_INT 3
42941: PLUS
42942: PUSH
42943: LD_INT 5
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: PUSH
42951: LD_VAR 0 1
42955: PUSH
42956: LD_INT 4
42958: PLUS
42959: PUSH
42960: LD_VAR 0 2
42964: PUSH
42965: LD_INT 4
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: LIST
42972: PUSH
42973: LD_VAR 0 1
42977: PUSH
42978: LD_VAR 0 2
42982: PUSH
42983: LD_INT 3
42985: MINUS
42986: PUSH
42987: LD_INT 3
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: LIST
42994: PUSH
42995: LD_VAR 0 1
42999: PUSH
43000: LD_INT 4
43002: MINUS
43003: PUSH
43004: LD_VAR 0 2
43008: PUSH
43009: LD_INT 4
43011: MINUS
43012: PUSH
43013: LD_INT 2
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: ST_TO_ADDR
// end ; 5 :
43028: GO 43168
43030: LD_INT 5
43032: DOUBLE
43033: EQUAL
43034: IFTRUE 43038
43036: GO 43167
43038: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43039: LD_ADDR_VAR 0 5
43043: PUSH
43044: LD_VAR 0 1
43048: PUSH
43049: LD_INT 4
43051: MINUS
43052: PUSH
43053: LD_VAR 0 2
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: LIST
43065: PUSH
43066: LD_VAR 0 1
43070: PUSH
43071: LD_VAR 0 2
43075: PUSH
43076: LD_INT 4
43078: MINUS
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: PUSH
43088: LD_VAR 0 1
43092: PUSH
43093: LD_INT 4
43095: PLUS
43096: PUSH
43097: LD_VAR 0 2
43101: PUSH
43102: LD_INT 4
43104: PLUS
43105: PUSH
43106: LD_INT 5
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: LIST
43113: PUSH
43114: LD_VAR 0 1
43118: PUSH
43119: LD_INT 3
43121: PLUS
43122: PUSH
43123: LD_VAR 0 2
43127: PUSH
43128: LD_INT 4
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: LIST
43135: PUSH
43136: LD_VAR 0 1
43140: PUSH
43141: LD_VAR 0 2
43145: PUSH
43146: LD_INT 3
43148: PLUS
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: LIST
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: ST_TO_ADDR
// end ; end ;
43165: GO 43168
43167: POP
// result := list ;
43168: LD_ADDR_VAR 0 4
43172: PUSH
43173: LD_VAR 0 5
43177: ST_TO_ADDR
// end ;
43178: LD_VAR 0 4
43182: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43183: LD_INT 0
43185: PPUSH
43186: PPUSH
43187: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43188: LD_VAR 0 1
43192: NOT
43193: PUSH
43194: LD_VAR 0 2
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: LD_INT 3
43207: PUSH
43208: LD_INT 4
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: IN
43217: NOT
43218: OR
43219: IFFALSE 43223
// exit ;
43221: GO 43315
// tmp := [ ] ;
43223: LD_ADDR_VAR 0 5
43227: PUSH
43228: EMPTY
43229: ST_TO_ADDR
// for i in units do
43230: LD_ADDR_VAR 0 4
43234: PUSH
43235: LD_VAR 0 1
43239: PUSH
43240: FOR_IN
43241: IFFALSE 43284
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
43243: LD_ADDR_VAR 0 5
43247: PUSH
43248: LD_VAR 0 5
43252: PPUSH
43253: LD_VAR 0 5
43257: PUSH
43258: LD_INT 1
43260: PLUS
43261: PPUSH
43262: LD_VAR 0 4
43266: PPUSH
43267: LD_VAR 0 2
43271: PPUSH
43272: CALL_OW 259
43276: PPUSH
43277: CALL_OW 2
43281: ST_TO_ADDR
43282: GO 43240
43284: POP
43285: POP
// if not tmp then
43286: LD_VAR 0 5
43290: NOT
43291: IFFALSE 43295
// exit ;
43293: GO 43315
// result := SortListByListDesc ( units , tmp ) ;
43295: LD_ADDR_VAR 0 3
43299: PUSH
43300: LD_VAR 0 1
43304: PPUSH
43305: LD_VAR 0 5
43309: PPUSH
43310: CALL_OW 77
43314: ST_TO_ADDR
// end ;
43315: LD_VAR 0 3
43319: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43320: LD_INT 0
43322: PPUSH
43323: PPUSH
43324: PPUSH
// result := false ;
43325: LD_ADDR_VAR 0 3
43329: PUSH
43330: LD_INT 0
43332: ST_TO_ADDR
// x := GetX ( building ) ;
43333: LD_ADDR_VAR 0 4
43337: PUSH
43338: LD_VAR 0 2
43342: PPUSH
43343: CALL_OW 250
43347: ST_TO_ADDR
// y := GetY ( building ) ;
43348: LD_ADDR_VAR 0 5
43352: PUSH
43353: LD_VAR 0 2
43357: PPUSH
43358: CALL_OW 251
43362: ST_TO_ADDR
// if not building or not x or not y then
43363: LD_VAR 0 2
43367: NOT
43368: PUSH
43369: LD_VAR 0 4
43373: NOT
43374: OR
43375: PUSH
43376: LD_VAR 0 5
43380: NOT
43381: OR
43382: IFFALSE 43386
// exit ;
43384: GO 43478
// if GetTaskList ( unit ) then
43386: LD_VAR 0 1
43390: PPUSH
43391: CALL_OW 437
43395: IFFALSE 43478
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43397: LD_STRING e
43399: PUSH
43400: LD_VAR 0 1
43404: PPUSH
43405: CALL_OW 437
43409: PUSH
43410: LD_INT 1
43412: ARRAY
43413: PUSH
43414: LD_INT 1
43416: ARRAY
43417: EQUAL
43418: PUSH
43419: LD_VAR 0 4
43423: PUSH
43424: LD_VAR 0 1
43428: PPUSH
43429: CALL_OW 437
43433: PUSH
43434: LD_INT 1
43436: ARRAY
43437: PUSH
43438: LD_INT 2
43440: ARRAY
43441: EQUAL
43442: AND
43443: PUSH
43444: LD_VAR 0 5
43448: PUSH
43449: LD_VAR 0 1
43453: PPUSH
43454: CALL_OW 437
43458: PUSH
43459: LD_INT 1
43461: ARRAY
43462: PUSH
43463: LD_INT 3
43465: ARRAY
43466: EQUAL
43467: AND
43468: IFFALSE 43478
// result := true end ;
43470: LD_ADDR_VAR 0 3
43474: PUSH
43475: LD_INT 1
43477: ST_TO_ADDR
// end ;
43478: LD_VAR 0 3
43482: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43483: LD_INT 0
43485: PPUSH
// result := false ;
43486: LD_ADDR_VAR 0 4
43490: PUSH
43491: LD_INT 0
43493: ST_TO_ADDR
// if GetTaskList ( unit ) then
43494: LD_VAR 0 1
43498: PPUSH
43499: CALL_OW 437
43503: IFFALSE 43586
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43505: LD_STRING M
43507: PUSH
43508: LD_VAR 0 1
43512: PPUSH
43513: CALL_OW 437
43517: PUSH
43518: LD_INT 1
43520: ARRAY
43521: PUSH
43522: LD_INT 1
43524: ARRAY
43525: EQUAL
43526: PUSH
43527: LD_VAR 0 2
43531: PUSH
43532: LD_VAR 0 1
43536: PPUSH
43537: CALL_OW 437
43541: PUSH
43542: LD_INT 1
43544: ARRAY
43545: PUSH
43546: LD_INT 2
43548: ARRAY
43549: EQUAL
43550: AND
43551: PUSH
43552: LD_VAR 0 3
43556: PUSH
43557: LD_VAR 0 1
43561: PPUSH
43562: CALL_OW 437
43566: PUSH
43567: LD_INT 1
43569: ARRAY
43570: PUSH
43571: LD_INT 3
43573: ARRAY
43574: EQUAL
43575: AND
43576: IFFALSE 43586
// result := true ;
43578: LD_ADDR_VAR 0 4
43582: PUSH
43583: LD_INT 1
43585: ST_TO_ADDR
// end ; end ;
43586: LD_VAR 0 4
43590: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43591: LD_INT 0
43593: PPUSH
43594: PPUSH
43595: PPUSH
43596: PPUSH
// if not unit or not area then
43597: LD_VAR 0 1
43601: NOT
43602: PUSH
43603: LD_VAR 0 2
43607: NOT
43608: OR
43609: IFFALSE 43613
// exit ;
43611: GO 43777
// tmp := AreaToList ( area , i ) ;
43613: LD_ADDR_VAR 0 6
43617: PUSH
43618: LD_VAR 0 2
43622: PPUSH
43623: LD_VAR 0 5
43627: PPUSH
43628: CALL_OW 517
43632: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43633: LD_ADDR_VAR 0 5
43637: PUSH
43638: DOUBLE
43639: LD_INT 1
43641: DEC
43642: ST_TO_ADDR
43643: LD_VAR 0 6
43647: PUSH
43648: LD_INT 1
43650: ARRAY
43651: PUSH
43652: FOR_TO
43653: IFFALSE 43775
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43655: LD_ADDR_VAR 0 7
43659: PUSH
43660: LD_VAR 0 6
43664: PUSH
43665: LD_INT 1
43667: ARRAY
43668: PUSH
43669: LD_VAR 0 5
43673: ARRAY
43674: PUSH
43675: LD_VAR 0 6
43679: PUSH
43680: LD_INT 2
43682: ARRAY
43683: PUSH
43684: LD_VAR 0 5
43688: ARRAY
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
43694: LD_VAR 0 7
43698: PUSH
43699: LD_INT 1
43701: ARRAY
43702: PPUSH
43703: LD_VAR 0 7
43707: PUSH
43708: LD_INT 2
43710: ARRAY
43711: PPUSH
43712: CALL_OW 428
43716: PUSH
43717: LD_INT 0
43719: EQUAL
43720: IFFALSE 43773
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43722: LD_VAR 0 1
43726: PPUSH
43727: LD_VAR 0 7
43731: PUSH
43732: LD_INT 1
43734: ARRAY
43735: PPUSH
43736: LD_VAR 0 7
43740: PUSH
43741: LD_INT 2
43743: ARRAY
43744: PPUSH
43745: LD_VAR 0 3
43749: PPUSH
43750: CALL_OW 48
// result := IsPlaced ( unit ) ;
43754: LD_ADDR_VAR 0 4
43758: PUSH
43759: LD_VAR 0 1
43763: PPUSH
43764: CALL_OW 305
43768: ST_TO_ADDR
// exit ;
43769: POP
43770: POP
43771: GO 43777
// end ; end ;
43773: GO 43652
43775: POP
43776: POP
// end ;
43777: LD_VAR 0 4
43781: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43782: LD_INT 0
43784: PPUSH
43785: PPUSH
43786: PPUSH
// if not side or side > 8 then
43787: LD_VAR 0 1
43791: NOT
43792: PUSH
43793: LD_VAR 0 1
43797: PUSH
43798: LD_INT 8
43800: GREATER
43801: OR
43802: IFFALSE 43806
// exit ;
43804: GO 43993
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43806: LD_ADDR_VAR 0 4
43810: PUSH
43811: LD_INT 22
43813: PUSH
43814: LD_VAR 0 1
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 21
43825: PUSH
43826: LD_INT 3
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PPUSH
43837: CALL_OW 69
43841: ST_TO_ADDR
// if not tmp then
43842: LD_VAR 0 4
43846: NOT
43847: IFFALSE 43851
// exit ;
43849: GO 43993
// enable_addtolog := true ;
43851: LD_ADDR_OWVAR 81
43855: PUSH
43856: LD_INT 1
43858: ST_TO_ADDR
// AddToLog ( [ ) ;
43859: LD_STRING [
43861: PPUSH
43862: CALL_OW 561
// for i in tmp do
43866: LD_ADDR_VAR 0 3
43870: PUSH
43871: LD_VAR 0 4
43875: PUSH
43876: FOR_IN
43877: IFFALSE 43984
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43879: LD_STRING [
43881: PUSH
43882: LD_VAR 0 3
43886: PPUSH
43887: CALL_OW 266
43891: STR
43892: PUSH
43893: LD_STRING , 
43895: STR
43896: PUSH
43897: LD_VAR 0 3
43901: PPUSH
43902: CALL_OW 250
43906: STR
43907: PUSH
43908: LD_STRING , 
43910: STR
43911: PUSH
43912: LD_VAR 0 3
43916: PPUSH
43917: CALL_OW 251
43921: STR
43922: PUSH
43923: LD_STRING , 
43925: STR
43926: PUSH
43927: LD_VAR 0 3
43931: PPUSH
43932: CALL_OW 254
43936: STR
43937: PUSH
43938: LD_STRING , 
43940: STR
43941: PUSH
43942: LD_VAR 0 3
43946: PPUSH
43947: LD_INT 1
43949: PPUSH
43950: CALL_OW 268
43954: STR
43955: PUSH
43956: LD_STRING , 
43958: STR
43959: PUSH
43960: LD_VAR 0 3
43964: PPUSH
43965: LD_INT 2
43967: PPUSH
43968: CALL_OW 268
43972: STR
43973: PUSH
43974: LD_STRING ],
43976: STR
43977: PPUSH
43978: CALL_OW 561
// end ;
43982: GO 43876
43984: POP
43985: POP
// AddToLog ( ]; ) ;
43986: LD_STRING ];
43988: PPUSH
43989: CALL_OW 561
// end ;
43993: LD_VAR 0 2
43997: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43998: LD_INT 0
44000: PPUSH
44001: PPUSH
44002: PPUSH
44003: PPUSH
44004: PPUSH
// if not area or not rate or not max then
44005: LD_VAR 0 1
44009: NOT
44010: PUSH
44011: LD_VAR 0 2
44015: NOT
44016: OR
44017: PUSH
44018: LD_VAR 0 4
44022: NOT
44023: OR
44024: IFFALSE 44028
// exit ;
44026: GO 44220
// while 1 do
44028: LD_INT 1
44030: IFFALSE 44220
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44032: LD_ADDR_VAR 0 9
44036: PUSH
44037: LD_VAR 0 1
44041: PPUSH
44042: LD_INT 1
44044: PPUSH
44045: CALL_OW 287
44049: PUSH
44050: LD_INT 10
44052: MUL
44053: ST_TO_ADDR
// r := rate / 10 ;
44054: LD_ADDR_VAR 0 7
44058: PUSH
44059: LD_VAR 0 2
44063: PUSH
44064: LD_INT 10
44066: DIVREAL
44067: ST_TO_ADDR
// time := 1 1$00 ;
44068: LD_ADDR_VAR 0 8
44072: PUSH
44073: LD_INT 2100
44075: ST_TO_ADDR
// if amount < min then
44076: LD_VAR 0 9
44080: PUSH
44081: LD_VAR 0 3
44085: LESS
44086: IFFALSE 44104
// r := r * 2 else
44088: LD_ADDR_VAR 0 7
44092: PUSH
44093: LD_VAR 0 7
44097: PUSH
44098: LD_INT 2
44100: MUL
44101: ST_TO_ADDR
44102: GO 44130
// if amount > max then
44104: LD_VAR 0 9
44108: PUSH
44109: LD_VAR 0 4
44113: GREATER
44114: IFFALSE 44130
// r := r / 2 ;
44116: LD_ADDR_VAR 0 7
44120: PUSH
44121: LD_VAR 0 7
44125: PUSH
44126: LD_INT 2
44128: DIVREAL
44129: ST_TO_ADDR
// time := time / r ;
44130: LD_ADDR_VAR 0 8
44134: PUSH
44135: LD_VAR 0 8
44139: PUSH
44140: LD_VAR 0 7
44144: DIVREAL
44145: ST_TO_ADDR
// if time < 0 then
44146: LD_VAR 0 8
44150: PUSH
44151: LD_INT 0
44153: LESS
44154: IFFALSE 44171
// time := time * - 1 ;
44156: LD_ADDR_VAR 0 8
44160: PUSH
44161: LD_VAR 0 8
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: MUL
44170: ST_TO_ADDR
// wait ( time ) ;
44171: LD_VAR 0 8
44175: PPUSH
44176: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
44180: LD_INT 35
44182: PPUSH
44183: LD_INT 875
44185: PPUSH
44186: CALL_OW 12
44190: PPUSH
44191: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44195: LD_INT 1
44197: PPUSH
44198: LD_INT 5
44200: PPUSH
44201: CALL_OW 12
44205: PPUSH
44206: LD_VAR 0 1
44210: PPUSH
44211: LD_INT 1
44213: PPUSH
44214: CALL_OW 55
// end ;
44218: GO 44028
// end ;
44220: LD_VAR 0 5
44224: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44225: LD_INT 0
44227: PPUSH
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
// if not turrets or not factories then
44235: LD_VAR 0 1
44239: NOT
44240: PUSH
44241: LD_VAR 0 2
44245: NOT
44246: OR
44247: IFFALSE 44251
// exit ;
44249: GO 44558
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44251: LD_ADDR_VAR 0 10
44255: PUSH
44256: LD_INT 5
44258: PUSH
44259: LD_INT 6
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: LD_INT 4
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 3
44278: PUSH
44279: LD_INT 5
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 24
44293: PUSH
44294: LD_INT 25
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 23
44303: PUSH
44304: LD_INT 27
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 42
44317: PUSH
44318: LD_INT 43
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 44
44327: PUSH
44328: LD_INT 46
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 45
44337: PUSH
44338: LD_INT 47
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: LIST
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: LIST
44354: ST_TO_ADDR
// result := [ ] ;
44355: LD_ADDR_VAR 0 3
44359: PUSH
44360: EMPTY
44361: ST_TO_ADDR
// for i in turrets do
44362: LD_ADDR_VAR 0 4
44366: PUSH
44367: LD_VAR 0 1
44371: PUSH
44372: FOR_IN
44373: IFFALSE 44556
// begin nat := GetNation ( i ) ;
44375: LD_ADDR_VAR 0 7
44379: PUSH
44380: LD_VAR 0 4
44384: PPUSH
44385: CALL_OW 248
44389: ST_TO_ADDR
// weapon := 0 ;
44390: LD_ADDR_VAR 0 8
44394: PUSH
44395: LD_INT 0
44397: ST_TO_ADDR
// if not nat then
44398: LD_VAR 0 7
44402: NOT
44403: IFFALSE 44407
// continue ;
44405: GO 44372
// for j in list [ nat ] do
44407: LD_ADDR_VAR 0 5
44411: PUSH
44412: LD_VAR 0 10
44416: PUSH
44417: LD_VAR 0 7
44421: ARRAY
44422: PUSH
44423: FOR_IN
44424: IFFALSE 44465
// if GetBWeapon ( i ) = j [ 1 ] then
44426: LD_VAR 0 4
44430: PPUSH
44431: CALL_OW 269
44435: PUSH
44436: LD_VAR 0 5
44440: PUSH
44441: LD_INT 1
44443: ARRAY
44444: EQUAL
44445: IFFALSE 44463
// begin weapon := j [ 2 ] ;
44447: LD_ADDR_VAR 0 8
44451: PUSH
44452: LD_VAR 0 5
44456: PUSH
44457: LD_INT 2
44459: ARRAY
44460: ST_TO_ADDR
// break ;
44461: GO 44465
// end ;
44463: GO 44423
44465: POP
44466: POP
// if not weapon then
44467: LD_VAR 0 8
44471: NOT
44472: IFFALSE 44476
// continue ;
44474: GO 44372
// for k in factories do
44476: LD_ADDR_VAR 0 6
44480: PUSH
44481: LD_VAR 0 2
44485: PUSH
44486: FOR_IN
44487: IFFALSE 44552
// begin weapons := AvailableWeaponList ( k ) ;
44489: LD_ADDR_VAR 0 9
44493: PUSH
44494: LD_VAR 0 6
44498: PPUSH
44499: CALL_OW 478
44503: ST_TO_ADDR
// if not weapons then
44504: LD_VAR 0 9
44508: NOT
44509: IFFALSE 44513
// continue ;
44511: GO 44486
// if weapon in weapons then
44513: LD_VAR 0 8
44517: PUSH
44518: LD_VAR 0 9
44522: IN
44523: IFFALSE 44550
// begin result := [ i , weapon ] ;
44525: LD_ADDR_VAR 0 3
44529: PUSH
44530: LD_VAR 0 4
44534: PUSH
44535: LD_VAR 0 8
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: ST_TO_ADDR
// exit ;
44544: POP
44545: POP
44546: POP
44547: POP
44548: GO 44558
// end ; end ;
44550: GO 44486
44552: POP
44553: POP
// end ;
44554: GO 44372
44556: POP
44557: POP
// end ;
44558: LD_VAR 0 3
44562: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44563: LD_INT 0
44565: PPUSH
// if not side or side > 8 then
44566: LD_VAR 0 3
44570: NOT
44571: PUSH
44572: LD_VAR 0 3
44576: PUSH
44577: LD_INT 8
44579: GREATER
44580: OR
44581: IFFALSE 44585
// exit ;
44583: GO 44644
// if not range then
44585: LD_VAR 0 4
44589: NOT
44590: IFFALSE 44601
// range := - 12 ;
44592: LD_ADDR_VAR 0 4
44596: PUSH
44597: LD_INT 12
44599: NEG
44600: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44601: LD_VAR 0 1
44605: PPUSH
44606: LD_VAR 0 2
44610: PPUSH
44611: LD_VAR 0 3
44615: PPUSH
44616: LD_VAR 0 4
44620: PPUSH
44621: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44625: LD_VAR 0 1
44629: PPUSH
44630: LD_VAR 0 2
44634: PPUSH
44635: LD_VAR 0 3
44639: PPUSH
44640: CALL_OW 331
// end ;
44644: LD_VAR 0 5
44648: RET
// export function Video ( mode ) ; begin
44649: LD_INT 0
44651: PPUSH
// ingame_video = mode ;
44652: LD_ADDR_OWVAR 52
44656: PUSH
44657: LD_VAR 0 1
44661: ST_TO_ADDR
// interface_hidden = mode ;
44662: LD_ADDR_OWVAR 54
44666: PUSH
44667: LD_VAR 0 1
44671: ST_TO_ADDR
// end ;
44672: LD_VAR 0 2
44676: RET
// export function Join ( array , element ) ; begin
44677: LD_INT 0
44679: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44680: LD_ADDR_VAR 0 3
44684: PUSH
44685: LD_VAR 0 1
44689: PPUSH
44690: LD_VAR 0 1
44694: PUSH
44695: LD_INT 1
44697: PLUS
44698: PPUSH
44699: LD_VAR 0 2
44703: PPUSH
44704: CALL_OW 1
44708: ST_TO_ADDR
// end ;
44709: LD_VAR 0 3
44713: RET
// export function JoinUnion ( array , element ) ; begin
44714: LD_INT 0
44716: PPUSH
// result := array union element ;
44717: LD_ADDR_VAR 0 3
44721: PUSH
44722: LD_VAR 0 1
44726: PUSH
44727: LD_VAR 0 2
44731: UNION
44732: ST_TO_ADDR
// end ;
44733: LD_VAR 0 3
44737: RET
// export function GetBehemoths ( side ) ; begin
44738: LD_INT 0
44740: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
44741: LD_ADDR_VAR 0 2
44745: PUSH
44746: LD_INT 22
44748: PUSH
44749: LD_VAR 0 1
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 31
44760: PUSH
44761: LD_INT 25
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PPUSH
44772: CALL_OW 69
44776: ST_TO_ADDR
// end ;
44777: LD_VAR 0 2
44781: RET
// export function Shuffle ( array ) ; var i , index ; begin
44782: LD_INT 0
44784: PPUSH
44785: PPUSH
44786: PPUSH
// result := [ ] ;
44787: LD_ADDR_VAR 0 2
44791: PUSH
44792: EMPTY
44793: ST_TO_ADDR
// if not array then
44794: LD_VAR 0 1
44798: NOT
44799: IFFALSE 44803
// exit ;
44801: GO 44902
// Randomize ;
44803: CALL_OW 10
// for i = array downto 1 do
44807: LD_ADDR_VAR 0 3
44811: PUSH
44812: DOUBLE
44813: LD_VAR 0 1
44817: INC
44818: ST_TO_ADDR
44819: LD_INT 1
44821: PUSH
44822: FOR_DOWNTO
44823: IFFALSE 44900
// begin index := rand ( 1 , array ) ;
44825: LD_ADDR_VAR 0 4
44829: PUSH
44830: LD_INT 1
44832: PPUSH
44833: LD_VAR 0 1
44837: PPUSH
44838: CALL_OW 12
44842: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44843: LD_ADDR_VAR 0 2
44847: PUSH
44848: LD_VAR 0 2
44852: PPUSH
44853: LD_VAR 0 2
44857: PUSH
44858: LD_INT 1
44860: PLUS
44861: PPUSH
44862: LD_VAR 0 1
44866: PUSH
44867: LD_VAR 0 4
44871: ARRAY
44872: PPUSH
44873: CALL_OW 2
44877: ST_TO_ADDR
// array := Delete ( array , index ) ;
44878: LD_ADDR_VAR 0 1
44882: PUSH
44883: LD_VAR 0 1
44887: PPUSH
44888: LD_VAR 0 4
44892: PPUSH
44893: CALL_OW 3
44897: ST_TO_ADDR
// end ;
44898: GO 44822
44900: POP
44901: POP
// end ;
44902: LD_VAR 0 2
44906: RET
// export function GetBaseMaterials ( base ) ; begin
44907: LD_INT 0
44909: PPUSH
// result := [ 0 , 0 , 0 ] ;
44910: LD_ADDR_VAR 0 2
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: LIST
44928: ST_TO_ADDR
// if not base then
44929: LD_VAR 0 1
44933: NOT
44934: IFFALSE 44938
// exit ;
44936: GO 44987
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44938: LD_ADDR_VAR 0 2
44942: PUSH
44943: LD_VAR 0 1
44947: PPUSH
44948: LD_INT 1
44950: PPUSH
44951: CALL_OW 275
44955: PUSH
44956: LD_VAR 0 1
44960: PPUSH
44961: LD_INT 2
44963: PPUSH
44964: CALL_OW 275
44968: PUSH
44969: LD_VAR 0 1
44973: PPUSH
44974: LD_INT 3
44976: PPUSH
44977: CALL_OW 275
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: LIST
44986: ST_TO_ADDR
// end ;
44987: LD_VAR 0 2
44991: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44992: LD_INT 0
44994: PPUSH
44995: PPUSH
// result := array ;
44996: LD_ADDR_VAR 0 3
45000: PUSH
45001: LD_VAR 0 1
45005: ST_TO_ADDR
// if size > 0 then
45006: LD_VAR 0 2
45010: PUSH
45011: LD_INT 0
45013: GREATER
45014: IFFALSE 45060
// for i := array downto size do
45016: LD_ADDR_VAR 0 4
45020: PUSH
45021: DOUBLE
45022: LD_VAR 0 1
45026: INC
45027: ST_TO_ADDR
45028: LD_VAR 0 2
45032: PUSH
45033: FOR_DOWNTO
45034: IFFALSE 45058
// result := Delete ( result , result ) ;
45036: LD_ADDR_VAR 0 3
45040: PUSH
45041: LD_VAR 0 3
45045: PPUSH
45046: LD_VAR 0 3
45050: PPUSH
45051: CALL_OW 3
45055: ST_TO_ADDR
45056: GO 45033
45058: POP
45059: POP
// end ;
45060: LD_VAR 0 3
45064: RET
// export function ComExit ( unit ) ; var tmp ; begin
45065: LD_INT 0
45067: PPUSH
45068: PPUSH
// if not IsInUnit ( unit ) then
45069: LD_VAR 0 1
45073: PPUSH
45074: CALL_OW 310
45078: NOT
45079: IFFALSE 45083
// exit ;
45081: GO 45143
// tmp := IsInUnit ( unit ) ;
45083: LD_ADDR_VAR 0 3
45087: PUSH
45088: LD_VAR 0 1
45092: PPUSH
45093: CALL_OW 310
45097: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45098: LD_VAR 0 3
45102: PPUSH
45103: CALL_OW 247
45107: PUSH
45108: LD_INT 2
45110: EQUAL
45111: IFFALSE 45124
// ComExitVehicle ( unit ) else
45113: LD_VAR 0 1
45117: PPUSH
45118: CALL_OW 121
45122: GO 45133
// ComExitBuilding ( unit ) ;
45124: LD_VAR 0 1
45128: PPUSH
45129: CALL_OW 122
// result := tmp ;
45133: LD_ADDR_VAR 0 2
45137: PUSH
45138: LD_VAR 0 3
45142: ST_TO_ADDR
// end ;
45143: LD_VAR 0 2
45147: RET
// export function ComExitAll ( units ) ; var i ; begin
45148: LD_INT 0
45150: PPUSH
45151: PPUSH
// if not units then
45152: LD_VAR 0 1
45156: NOT
45157: IFFALSE 45161
// exit ;
45159: GO 45187
// for i in units do
45161: LD_ADDR_VAR 0 3
45165: PUSH
45166: LD_VAR 0 1
45170: PUSH
45171: FOR_IN
45172: IFFALSE 45185
// ComExit ( i ) ;
45174: LD_VAR 0 3
45178: PPUSH
45179: CALL 45065 0 1
45183: GO 45171
45185: POP
45186: POP
// end ;
45187: LD_VAR 0 2
45191: RET
// export function ResetHc ; begin
45192: LD_INT 0
45194: PPUSH
// InitHc ;
45195: CALL_OW 19
// hc_importance := 0 ;
45199: LD_ADDR_OWVAR 32
45203: PUSH
45204: LD_INT 0
45206: ST_TO_ADDR
// end ;
45207: LD_VAR 0 1
45211: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45212: LD_INT 0
45214: PPUSH
45215: PPUSH
45216: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45217: LD_ADDR_VAR 0 6
45221: PUSH
45222: LD_VAR 0 1
45226: PUSH
45227: LD_VAR 0 3
45231: PLUS
45232: PUSH
45233: LD_INT 2
45235: DIV
45236: ST_TO_ADDR
// if _x < 0 then
45237: LD_VAR 0 6
45241: PUSH
45242: LD_INT 0
45244: LESS
45245: IFFALSE 45262
// _x := _x * - 1 ;
45247: LD_ADDR_VAR 0 6
45251: PUSH
45252: LD_VAR 0 6
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: MUL
45261: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45262: LD_ADDR_VAR 0 7
45266: PUSH
45267: LD_VAR 0 2
45271: PUSH
45272: LD_VAR 0 4
45276: PLUS
45277: PUSH
45278: LD_INT 2
45280: DIV
45281: ST_TO_ADDR
// if _y < 0 then
45282: LD_VAR 0 7
45286: PUSH
45287: LD_INT 0
45289: LESS
45290: IFFALSE 45307
// _y := _y * - 1 ;
45292: LD_ADDR_VAR 0 7
45296: PUSH
45297: LD_VAR 0 7
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: MUL
45306: ST_TO_ADDR
// result := [ _x , _y ] ;
45307: LD_ADDR_VAR 0 5
45311: PUSH
45312: LD_VAR 0 6
45316: PUSH
45317: LD_VAR 0 7
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: ST_TO_ADDR
// end ;
45326: LD_VAR 0 5
45330: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45331: LD_INT 0
45333: PPUSH
45334: PPUSH
45335: PPUSH
45336: PPUSH
// task := GetTaskList ( unit ) ;
45337: LD_ADDR_VAR 0 7
45341: PUSH
45342: LD_VAR 0 1
45346: PPUSH
45347: CALL_OW 437
45351: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45352: LD_VAR 0 7
45356: NOT
45357: PUSH
45358: LD_VAR 0 1
45362: PPUSH
45363: LD_VAR 0 2
45367: PPUSH
45368: CALL_OW 308
45372: NOT
45373: AND
45374: IFFALSE 45378
// exit ;
45376: GO 45496
// if IsInArea ( unit , area ) then
45378: LD_VAR 0 1
45382: PPUSH
45383: LD_VAR 0 2
45387: PPUSH
45388: CALL_OW 308
45392: IFFALSE 45410
// begin ComMoveToArea ( unit , goAway ) ;
45394: LD_VAR 0 1
45398: PPUSH
45399: LD_VAR 0 3
45403: PPUSH
45404: CALL_OW 113
// exit ;
45408: GO 45496
// end ; if task [ 1 ] [ 1 ] <> M then
45410: LD_VAR 0 7
45414: PUSH
45415: LD_INT 1
45417: ARRAY
45418: PUSH
45419: LD_INT 1
45421: ARRAY
45422: PUSH
45423: LD_STRING M
45425: NONEQUAL
45426: IFFALSE 45430
// exit ;
45428: GO 45496
// x := task [ 1 ] [ 2 ] ;
45430: LD_ADDR_VAR 0 5
45434: PUSH
45435: LD_VAR 0 7
45439: PUSH
45440: LD_INT 1
45442: ARRAY
45443: PUSH
45444: LD_INT 2
45446: ARRAY
45447: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45448: LD_ADDR_VAR 0 6
45452: PUSH
45453: LD_VAR 0 7
45457: PUSH
45458: LD_INT 1
45460: ARRAY
45461: PUSH
45462: LD_INT 3
45464: ARRAY
45465: ST_TO_ADDR
// if InArea ( x , y , area ) then
45466: LD_VAR 0 5
45470: PPUSH
45471: LD_VAR 0 6
45475: PPUSH
45476: LD_VAR 0 2
45480: PPUSH
45481: CALL_OW 309
45485: IFFALSE 45496
// ComStop ( unit ) ;
45487: LD_VAR 0 1
45491: PPUSH
45492: CALL_OW 141
// end ;
45496: LD_VAR 0 4
45500: RET
// export function Abs ( value ) ; begin
45501: LD_INT 0
45503: PPUSH
// result := value ;
45504: LD_ADDR_VAR 0 2
45508: PUSH
45509: LD_VAR 0 1
45513: ST_TO_ADDR
// if value < 0 then
45514: LD_VAR 0 1
45518: PUSH
45519: LD_INT 0
45521: LESS
45522: IFFALSE 45539
// result := value * - 1 ;
45524: LD_ADDR_VAR 0 2
45528: PUSH
45529: LD_VAR 0 1
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: MUL
45538: ST_TO_ADDR
// end ;
45539: LD_VAR 0 2
45543: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45544: LD_INT 0
45546: PPUSH
45547: PPUSH
45548: PPUSH
45549: PPUSH
45550: PPUSH
45551: PPUSH
45552: PPUSH
45553: PPUSH
// if not unit or not building then
45554: LD_VAR 0 1
45558: NOT
45559: PUSH
45560: LD_VAR 0 2
45564: NOT
45565: OR
45566: IFFALSE 45570
// exit ;
45568: GO 45796
// x := GetX ( building ) ;
45570: LD_ADDR_VAR 0 4
45574: PUSH
45575: LD_VAR 0 2
45579: PPUSH
45580: CALL_OW 250
45584: ST_TO_ADDR
// y := GetY ( building ) ;
45585: LD_ADDR_VAR 0 6
45589: PUSH
45590: LD_VAR 0 2
45594: PPUSH
45595: CALL_OW 251
45599: ST_TO_ADDR
// d := GetDir ( building ) ;
45600: LD_ADDR_VAR 0 8
45604: PUSH
45605: LD_VAR 0 2
45609: PPUSH
45610: CALL_OW 254
45614: ST_TO_ADDR
// r := 4 ;
45615: LD_ADDR_VAR 0 9
45619: PUSH
45620: LD_INT 4
45622: ST_TO_ADDR
// for i := 1 to 5 do
45623: LD_ADDR_VAR 0 10
45627: PUSH
45628: DOUBLE
45629: LD_INT 1
45631: DEC
45632: ST_TO_ADDR
45633: LD_INT 5
45635: PUSH
45636: FOR_TO
45637: IFFALSE 45794
// begin _x := ShiftX ( x , d , r + i ) ;
45639: LD_ADDR_VAR 0 5
45643: PUSH
45644: LD_VAR 0 4
45648: PPUSH
45649: LD_VAR 0 8
45653: PPUSH
45654: LD_VAR 0 9
45658: PUSH
45659: LD_VAR 0 10
45663: PLUS
45664: PPUSH
45665: CALL_OW 272
45669: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45670: LD_ADDR_VAR 0 7
45674: PUSH
45675: LD_VAR 0 6
45679: PPUSH
45680: LD_VAR 0 8
45684: PPUSH
45685: LD_VAR 0 9
45689: PUSH
45690: LD_VAR 0 10
45694: PLUS
45695: PPUSH
45696: CALL_OW 273
45700: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45701: LD_VAR 0 5
45705: PPUSH
45706: LD_VAR 0 7
45710: PPUSH
45711: CALL_OW 488
45715: PUSH
45716: LD_VAR 0 5
45720: PPUSH
45721: LD_VAR 0 7
45725: PPUSH
45726: CALL_OW 428
45730: PPUSH
45731: CALL_OW 247
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: IN
45746: NOT
45747: AND
45748: IFFALSE 45792
// begin ComMoveXY ( unit , _x , _y ) ;
45750: LD_VAR 0 1
45754: PPUSH
45755: LD_VAR 0 5
45759: PPUSH
45760: LD_VAR 0 7
45764: PPUSH
45765: CALL_OW 111
// result := [ _x , _y ] ;
45769: LD_ADDR_VAR 0 3
45773: PUSH
45774: LD_VAR 0 5
45778: PUSH
45779: LD_VAR 0 7
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: ST_TO_ADDR
// exit ;
45788: POP
45789: POP
45790: GO 45796
// end ; end ;
45792: GO 45636
45794: POP
45795: POP
// end ;
45796: LD_VAR 0 3
45800: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45801: LD_INT 0
45803: PPUSH
45804: PPUSH
45805: PPUSH
// result := 0 ;
45806: LD_ADDR_VAR 0 3
45810: PUSH
45811: LD_INT 0
45813: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45814: LD_VAR 0 1
45818: PUSH
45819: LD_INT 0
45821: LESS
45822: PUSH
45823: LD_VAR 0 1
45827: PUSH
45828: LD_INT 8
45830: GREATER
45831: OR
45832: PUSH
45833: LD_VAR 0 2
45837: PUSH
45838: LD_INT 0
45840: LESS
45841: OR
45842: PUSH
45843: LD_VAR 0 2
45847: PUSH
45848: LD_INT 8
45850: GREATER
45851: OR
45852: IFFALSE 45856
// exit ;
45854: GO 45931
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45856: LD_ADDR_VAR 0 4
45860: PUSH
45861: LD_INT 22
45863: PUSH
45864: LD_VAR 0 2
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PPUSH
45873: CALL_OW 69
45877: PUSH
45878: FOR_IN
45879: IFFALSE 45929
// begin un := UnitShoot ( i ) ;
45881: LD_ADDR_VAR 0 5
45885: PUSH
45886: LD_VAR 0 4
45890: PPUSH
45891: CALL_OW 504
45895: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45896: LD_VAR 0 5
45900: PPUSH
45901: CALL_OW 255
45905: PUSH
45906: LD_VAR 0 1
45910: EQUAL
45911: IFFALSE 45927
// begin result := un ;
45913: LD_ADDR_VAR 0 3
45917: PUSH
45918: LD_VAR 0 5
45922: ST_TO_ADDR
// exit ;
45923: POP
45924: POP
45925: GO 45931
// end ; end ;
45927: GO 45878
45929: POP
45930: POP
// end ;
45931: LD_VAR 0 3
45935: RET
// export function GetCargoBay ( units ) ; begin
45936: LD_INT 0
45938: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45939: LD_ADDR_VAR 0 2
45943: PUSH
45944: LD_VAR 0 1
45948: PPUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 34
45954: PUSH
45955: LD_INT 12
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 34
45964: PUSH
45965: LD_INT 51
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 34
45974: PUSH
45975: LD_INT 32
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 34
45984: PUSH
45985: LD_EXP 40
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: PPUSH
46001: CALL_OW 72
46005: ST_TO_ADDR
// end ;
46006: LD_VAR 0 2
46010: RET
// export function Negate ( value ) ; begin
46011: LD_INT 0
46013: PPUSH
// result := not value ;
46014: LD_ADDR_VAR 0 2
46018: PUSH
46019: LD_VAR 0 1
46023: NOT
46024: ST_TO_ADDR
// end ;
46025: LD_VAR 0 2
46029: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46030: LD_INT 0
46032: PPUSH
46033: PPUSH
46034: PPUSH
46035: PPUSH
46036: PPUSH
46037: PPUSH
46038: PPUSH
46039: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46040: LD_VAR 0 1
46044: PPUSH
46045: LD_VAR 0 2
46049: PPUSH
46050: CALL_OW 488
46054: NOT
46055: PUSH
46056: LD_VAR 0 3
46060: PPUSH
46061: LD_VAR 0 4
46065: PPUSH
46066: CALL_OW 488
46070: NOT
46071: OR
46072: IFFALSE 46085
// begin result := - 1 ;
46074: LD_ADDR_VAR 0 5
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: ST_TO_ADDR
// exit ;
46083: GO 46320
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46085: LD_ADDR_VAR 0 12
46089: PUSH
46090: LD_VAR 0 1
46094: PPUSH
46095: LD_VAR 0 2
46099: PPUSH
46100: LD_VAR 0 3
46104: PPUSH
46105: LD_VAR 0 4
46109: PPUSH
46110: CALL 45212 0 4
46114: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46115: LD_ADDR_VAR 0 11
46119: PUSH
46120: LD_VAR 0 1
46124: PPUSH
46125: LD_VAR 0 2
46129: PPUSH
46130: LD_VAR 0 12
46134: PUSH
46135: LD_INT 1
46137: ARRAY
46138: PPUSH
46139: LD_VAR 0 12
46143: PUSH
46144: LD_INT 2
46146: ARRAY
46147: PPUSH
46148: CALL_OW 298
46152: ST_TO_ADDR
// distance := 9999 ;
46153: LD_ADDR_VAR 0 10
46157: PUSH
46158: LD_INT 9999
46160: ST_TO_ADDR
// for i := 0 to 5 do
46161: LD_ADDR_VAR 0 6
46165: PUSH
46166: DOUBLE
46167: LD_INT 0
46169: DEC
46170: ST_TO_ADDR
46171: LD_INT 5
46173: PUSH
46174: FOR_TO
46175: IFFALSE 46318
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46177: LD_ADDR_VAR 0 7
46181: PUSH
46182: LD_VAR 0 1
46186: PPUSH
46187: LD_VAR 0 6
46191: PPUSH
46192: LD_VAR 0 11
46196: PPUSH
46197: CALL_OW 272
46201: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46202: LD_ADDR_VAR 0 8
46206: PUSH
46207: LD_VAR 0 2
46211: PPUSH
46212: LD_VAR 0 6
46216: PPUSH
46217: LD_VAR 0 11
46221: PPUSH
46222: CALL_OW 273
46226: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46227: LD_VAR 0 7
46231: PPUSH
46232: LD_VAR 0 8
46236: PPUSH
46237: CALL_OW 488
46241: NOT
46242: IFFALSE 46246
// continue ;
46244: GO 46174
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
46246: LD_ADDR_VAR 0 9
46250: PUSH
46251: LD_VAR 0 12
46255: PUSH
46256: LD_INT 1
46258: ARRAY
46259: PPUSH
46260: LD_VAR 0 12
46264: PUSH
46265: LD_INT 2
46267: ARRAY
46268: PPUSH
46269: LD_VAR 0 7
46273: PPUSH
46274: LD_VAR 0 8
46278: PPUSH
46279: CALL_OW 298
46283: ST_TO_ADDR
// if tmp < distance then
46284: LD_VAR 0 9
46288: PUSH
46289: LD_VAR 0 10
46293: LESS
46294: IFFALSE 46316
// begin result := i ;
46296: LD_ADDR_VAR 0 5
46300: PUSH
46301: LD_VAR 0 6
46305: ST_TO_ADDR
// distance := tmp ;
46306: LD_ADDR_VAR 0 10
46310: PUSH
46311: LD_VAR 0 9
46315: ST_TO_ADDR
// end ; end ;
46316: GO 46174
46318: POP
46319: POP
// end ;
46320: LD_VAR 0 5
46324: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46325: LD_INT 0
46327: PPUSH
46328: PPUSH
// if not driver or not IsInUnit ( driver ) then
46329: LD_VAR 0 1
46333: NOT
46334: PUSH
46335: LD_VAR 0 1
46339: PPUSH
46340: CALL_OW 310
46344: NOT
46345: OR
46346: IFFALSE 46350
// exit ;
46348: GO 46440
// vehicle := IsInUnit ( driver ) ;
46350: LD_ADDR_VAR 0 3
46354: PUSH
46355: LD_VAR 0 1
46359: PPUSH
46360: CALL_OW 310
46364: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46365: LD_VAR 0 1
46369: PPUSH
46370: LD_STRING \
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: PUSH
46400: LD_STRING E
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_VAR 0 3
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PPUSH
46436: CALL_OW 446
// end ;
46440: LD_VAR 0 2
46444: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46445: LD_INT 0
46447: PPUSH
46448: PPUSH
// if not driver or not IsInUnit ( driver ) then
46449: LD_VAR 0 1
46453: NOT
46454: PUSH
46455: LD_VAR 0 1
46459: PPUSH
46460: CALL_OW 310
46464: NOT
46465: OR
46466: IFFALSE 46470
// exit ;
46468: GO 46560
// vehicle := IsInUnit ( driver ) ;
46470: LD_ADDR_VAR 0 3
46474: PUSH
46475: LD_VAR 0 1
46479: PPUSH
46480: CALL_OW 310
46484: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46485: LD_VAR 0 1
46489: PPUSH
46490: LD_STRING \
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: PUSH
46520: LD_STRING E
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: LD_VAR 0 3
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PPUSH
46556: CALL_OW 447
// end ;
46560: LD_VAR 0 2
46564: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
46565: LD_INT 0
46567: PPUSH
46568: PPUSH
46569: PPUSH
// tmp := [ ] ;
46570: LD_ADDR_VAR 0 5
46574: PUSH
46575: EMPTY
46576: ST_TO_ADDR
// for i in units do
46577: LD_ADDR_VAR 0 4
46581: PUSH
46582: LD_VAR 0 1
46586: PUSH
46587: FOR_IN
46588: IFFALSE 46626
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
46590: LD_ADDR_VAR 0 5
46594: PUSH
46595: LD_VAR 0 5
46599: PPUSH
46600: LD_VAR 0 5
46604: PUSH
46605: LD_INT 1
46607: PLUS
46608: PPUSH
46609: LD_VAR 0 4
46613: PPUSH
46614: CALL_OW 256
46618: PPUSH
46619: CALL_OW 2
46623: ST_TO_ADDR
46624: GO 46587
46626: POP
46627: POP
// if not tmp then
46628: LD_VAR 0 5
46632: NOT
46633: IFFALSE 46637
// exit ;
46635: GO 46685
// if asc then
46637: LD_VAR 0 2
46641: IFFALSE 46665
// result := SortListByListAsc ( units , tmp ) else
46643: LD_ADDR_VAR 0 3
46647: PUSH
46648: LD_VAR 0 1
46652: PPUSH
46653: LD_VAR 0 5
46657: PPUSH
46658: CALL_OW 76
46662: ST_TO_ADDR
46663: GO 46685
// result := SortListByListDesc ( units , tmp ) ;
46665: LD_ADDR_VAR 0 3
46669: PUSH
46670: LD_VAR 0 1
46674: PPUSH
46675: LD_VAR 0 5
46679: PPUSH
46680: CALL_OW 77
46684: ST_TO_ADDR
// end ;
46685: LD_VAR 0 3
46689: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
46690: LD_INT 0
46692: PPUSH
46693: PPUSH
// task := GetTaskList ( mech ) ;
46694: LD_ADDR_VAR 0 4
46698: PUSH
46699: LD_VAR 0 1
46703: PPUSH
46704: CALL_OW 437
46708: ST_TO_ADDR
// if not task then
46709: LD_VAR 0 4
46713: NOT
46714: IFFALSE 46718
// exit ;
46716: GO 46760
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
46718: LD_ADDR_VAR 0 3
46722: PUSH
46723: LD_VAR 0 4
46727: PUSH
46728: LD_INT 1
46730: ARRAY
46731: PUSH
46732: LD_INT 1
46734: ARRAY
46735: PUSH
46736: LD_STRING r
46738: EQUAL
46739: PUSH
46740: LD_VAR 0 4
46744: PUSH
46745: LD_INT 1
46747: ARRAY
46748: PUSH
46749: LD_INT 4
46751: ARRAY
46752: PUSH
46753: LD_VAR 0 2
46757: EQUAL
46758: AND
46759: ST_TO_ADDR
// end ;
46760: LD_VAR 0 3
46764: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
46765: LD_INT 0
46767: PPUSH
// SetDir ( unit , d ) ;
46768: LD_VAR 0 1
46772: PPUSH
46773: LD_VAR 0 4
46777: PPUSH
46778: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
46782: LD_VAR 0 1
46786: PPUSH
46787: LD_VAR 0 2
46791: PPUSH
46792: LD_VAR 0 3
46796: PPUSH
46797: LD_VAR 0 5
46801: PPUSH
46802: CALL_OW 48
// end ;
46806: LD_VAR 0 6
46810: RET
// export function ToNaturalNumber ( number ) ; begin
46811: LD_INT 0
46813: PPUSH
// result := number div 1 ;
46814: LD_ADDR_VAR 0 2
46818: PUSH
46819: LD_VAR 0 1
46823: PUSH
46824: LD_INT 1
46826: DIV
46827: ST_TO_ADDR
// if number < 0 then
46828: LD_VAR 0 1
46832: PUSH
46833: LD_INT 0
46835: LESS
46836: IFFALSE 46846
// result := 0 ;
46838: LD_ADDR_VAR 0 2
46842: PUSH
46843: LD_INT 0
46845: ST_TO_ADDR
// end ;
46846: LD_VAR 0 2
46850: RET
// export function SortByClass ( units , class ) ; var un ; begin
46851: LD_INT 0
46853: PPUSH
46854: PPUSH
// if not units or not class then
46855: LD_VAR 0 1
46859: NOT
46860: PUSH
46861: LD_VAR 0 2
46865: NOT
46866: OR
46867: IFFALSE 46871
// exit ;
46869: GO 46966
// result := [ ] ;
46871: LD_ADDR_VAR 0 3
46875: PUSH
46876: EMPTY
46877: ST_TO_ADDR
// for un in units do
46878: LD_ADDR_VAR 0 4
46882: PUSH
46883: LD_VAR 0 1
46887: PUSH
46888: FOR_IN
46889: IFFALSE 46964
// if GetClass ( un ) = class then
46891: LD_VAR 0 4
46895: PPUSH
46896: CALL_OW 257
46900: PUSH
46901: LD_VAR 0 2
46905: EQUAL
46906: IFFALSE 46933
// result := Insert ( result , 1 , un ) else
46908: LD_ADDR_VAR 0 3
46912: PUSH
46913: LD_VAR 0 3
46917: PPUSH
46918: LD_INT 1
46920: PPUSH
46921: LD_VAR 0 4
46925: PPUSH
46926: CALL_OW 2
46930: ST_TO_ADDR
46931: GO 46962
// result := Replace ( result , result + 1 , un ) ;
46933: LD_ADDR_VAR 0 3
46937: PUSH
46938: LD_VAR 0 3
46942: PPUSH
46943: LD_VAR 0 3
46947: PUSH
46948: LD_INT 1
46950: PLUS
46951: PPUSH
46952: LD_VAR 0 4
46956: PPUSH
46957: CALL_OW 1
46961: ST_TO_ADDR
46962: GO 46888
46964: POP
46965: POP
// end ;
46966: LD_VAR 0 3
46970: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46971: LD_INT 0
46973: PPUSH
46974: PPUSH
46975: PPUSH
46976: PPUSH
46977: PPUSH
46978: PPUSH
46979: PPUSH
// result := [ ] ;
46980: LD_ADDR_VAR 0 4
46984: PUSH
46985: EMPTY
46986: ST_TO_ADDR
// if x - r < 0 then
46987: LD_VAR 0 1
46991: PUSH
46992: LD_VAR 0 3
46996: MINUS
46997: PUSH
46998: LD_INT 0
47000: LESS
47001: IFFALSE 47013
// min_x := 0 else
47003: LD_ADDR_VAR 0 8
47007: PUSH
47008: LD_INT 0
47010: ST_TO_ADDR
47011: GO 47029
// min_x := x - r ;
47013: LD_ADDR_VAR 0 8
47017: PUSH
47018: LD_VAR 0 1
47022: PUSH
47023: LD_VAR 0 3
47027: MINUS
47028: ST_TO_ADDR
// if y - r < 0 then
47029: LD_VAR 0 2
47033: PUSH
47034: LD_VAR 0 3
47038: MINUS
47039: PUSH
47040: LD_INT 0
47042: LESS
47043: IFFALSE 47055
// min_y := 0 else
47045: LD_ADDR_VAR 0 7
47049: PUSH
47050: LD_INT 0
47052: ST_TO_ADDR
47053: GO 47071
// min_y := y - r ;
47055: LD_ADDR_VAR 0 7
47059: PUSH
47060: LD_VAR 0 2
47064: PUSH
47065: LD_VAR 0 3
47069: MINUS
47070: ST_TO_ADDR
// max_x := x + r ;
47071: LD_ADDR_VAR 0 9
47075: PUSH
47076: LD_VAR 0 1
47080: PUSH
47081: LD_VAR 0 3
47085: PLUS
47086: ST_TO_ADDR
// max_y := y + r ;
47087: LD_ADDR_VAR 0 10
47091: PUSH
47092: LD_VAR 0 2
47096: PUSH
47097: LD_VAR 0 3
47101: PLUS
47102: ST_TO_ADDR
// for _x = min_x to max_x do
47103: LD_ADDR_VAR 0 5
47107: PUSH
47108: DOUBLE
47109: LD_VAR 0 8
47113: DEC
47114: ST_TO_ADDR
47115: LD_VAR 0 9
47119: PUSH
47120: FOR_TO
47121: IFFALSE 47222
// for _y = min_y to max_y do
47123: LD_ADDR_VAR 0 6
47127: PUSH
47128: DOUBLE
47129: LD_VAR 0 7
47133: DEC
47134: ST_TO_ADDR
47135: LD_VAR 0 10
47139: PUSH
47140: FOR_TO
47141: IFFALSE 47218
// begin if not ValidHex ( _x , _y ) then
47143: LD_VAR 0 5
47147: PPUSH
47148: LD_VAR 0 6
47152: PPUSH
47153: CALL_OW 488
47157: NOT
47158: IFFALSE 47162
// continue ;
47160: GO 47140
// if GetResourceTypeXY ( _x , _y ) then
47162: LD_VAR 0 5
47166: PPUSH
47167: LD_VAR 0 6
47171: PPUSH
47172: CALL_OW 283
47176: IFFALSE 47216
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47178: LD_ADDR_VAR 0 4
47182: PUSH
47183: LD_VAR 0 4
47187: PPUSH
47188: LD_VAR 0 4
47192: PUSH
47193: LD_INT 1
47195: PLUS
47196: PPUSH
47197: LD_VAR 0 5
47201: PUSH
47202: LD_VAR 0 6
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PPUSH
47211: CALL_OW 1
47215: ST_TO_ADDR
// end ;
47216: GO 47140
47218: POP
47219: POP
47220: GO 47120
47222: POP
47223: POP
// end ;
47224: LD_VAR 0 4
47228: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47229: LD_INT 0
47231: PPUSH
47232: PPUSH
47233: PPUSH
47234: PPUSH
47235: PPUSH
47236: PPUSH
47237: PPUSH
47238: PPUSH
// if not units then
47239: LD_VAR 0 1
47243: NOT
47244: IFFALSE 47248
// exit ;
47246: GO 47673
// result := UnitFilter ( units , [ f_ok ] ) ;
47248: LD_ADDR_VAR 0 3
47252: PUSH
47253: LD_VAR 0 1
47257: PPUSH
47258: LD_INT 50
47260: PUSH
47261: EMPTY
47262: LIST
47263: PPUSH
47264: CALL_OW 72
47268: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
47269: LD_ADDR_VAR 0 8
47273: PUSH
47274: LD_VAR 0 1
47278: PUSH
47279: LD_INT 1
47281: ARRAY
47282: PPUSH
47283: CALL_OW 255
47287: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
47288: LD_ADDR_VAR 0 10
47292: PUSH
47293: LD_INT 29
47295: PUSH
47296: LD_EXP 43
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: ST_TO_ADDR
// if not result then
47305: LD_VAR 0 3
47309: NOT
47310: IFFALSE 47314
// exit ;
47312: GO 47673
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
47314: LD_ADDR_VAR 0 5
47318: PUSH
47319: LD_INT 81
47321: PUSH
47322: LD_VAR 0 8
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PPUSH
47331: CALL_OW 69
47335: ST_TO_ADDR
// for i in result do
47336: LD_ADDR_VAR 0 4
47340: PUSH
47341: LD_VAR 0 3
47345: PUSH
47346: FOR_IN
47347: IFFALSE 47671
// begin tag := GetTag ( i ) + 1 ;
47349: LD_ADDR_VAR 0 9
47353: PUSH
47354: LD_VAR 0 4
47358: PPUSH
47359: CALL_OW 110
47363: PUSH
47364: LD_INT 1
47366: PLUS
47367: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
47368: LD_ADDR_VAR 0 7
47372: PUSH
47373: LD_VAR 0 4
47377: PPUSH
47378: CALL_OW 250
47382: PPUSH
47383: LD_VAR 0 4
47387: PPUSH
47388: CALL_OW 251
47392: PPUSH
47393: LD_INT 6
47395: PPUSH
47396: CALL 46971 0 3
47400: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
47401: LD_VAR 0 7
47405: PUSH
47406: LD_VAR 0 4
47410: PPUSH
47411: CALL_OW 264
47415: PUSH
47416: LD_VAR 0 10
47420: IN
47421: NOT
47422: AND
47423: IFFALSE 47462
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
47425: LD_VAR 0 4
47429: PPUSH
47430: LD_VAR 0 7
47434: PUSH
47435: LD_INT 1
47437: ARRAY
47438: PUSH
47439: LD_INT 1
47441: ARRAY
47442: PPUSH
47443: LD_VAR 0 7
47447: PUSH
47448: LD_INT 1
47450: ARRAY
47451: PUSH
47452: LD_INT 2
47454: ARRAY
47455: PPUSH
47456: CALL_OW 116
47460: GO 47669
// if path > tag then
47462: LD_VAR 0 2
47466: PUSH
47467: LD_VAR 0 9
47471: GREATER
47472: IFFALSE 47639
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
47474: LD_ADDR_VAR 0 6
47478: PUSH
47479: LD_VAR 0 5
47483: PPUSH
47484: LD_INT 91
47486: PUSH
47487: LD_VAR 0 4
47491: PUSH
47492: LD_INT 12
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: PPUSH
47500: CALL_OW 72
47504: ST_TO_ADDR
// if nearEnemy then
47505: LD_VAR 0 6
47509: IFFALSE 47537
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
47511: LD_VAR 0 4
47515: PPUSH
47516: LD_VAR 0 6
47520: PPUSH
47521: LD_VAR 0 4
47525: PPUSH
47526: CALL_OW 74
47530: PPUSH
47531: CALL_OW 115
47535: GO 47637
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
47537: LD_VAR 0 4
47541: PPUSH
47542: LD_VAR 0 2
47546: PUSH
47547: LD_VAR 0 9
47551: ARRAY
47552: PUSH
47553: LD_INT 1
47555: ARRAY
47556: PPUSH
47557: LD_VAR 0 2
47561: PUSH
47562: LD_VAR 0 9
47566: ARRAY
47567: PUSH
47568: LD_INT 2
47570: ARRAY
47571: PPUSH
47572: CALL_OW 297
47576: PUSH
47577: LD_INT 6
47579: GREATER
47580: IFFALSE 47623
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
47582: LD_VAR 0 4
47586: PPUSH
47587: LD_VAR 0 2
47591: PUSH
47592: LD_VAR 0 9
47596: ARRAY
47597: PUSH
47598: LD_INT 1
47600: ARRAY
47601: PPUSH
47602: LD_VAR 0 2
47606: PUSH
47607: LD_VAR 0 9
47611: ARRAY
47612: PUSH
47613: LD_INT 2
47615: ARRAY
47616: PPUSH
47617: CALL_OW 114
47621: GO 47637
// SetTag ( i , tag ) ;
47623: LD_VAR 0 4
47627: PPUSH
47628: LD_VAR 0 9
47632: PPUSH
47633: CALL_OW 109
// end else
47637: GO 47669
// if enemy then
47639: LD_VAR 0 5
47643: IFFALSE 47669
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
47645: LD_VAR 0 4
47649: PPUSH
47650: LD_VAR 0 5
47654: PPUSH
47655: LD_VAR 0 4
47659: PPUSH
47660: CALL_OW 74
47664: PPUSH
47665: CALL_OW 115
// end ;
47669: GO 47346
47671: POP
47672: POP
// end ; end_of_file
47673: LD_VAR 0 3
47677: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
47678: LD_INT 0
47680: PPUSH
// ar_miner := 81 ;
47681: LD_ADDR_EXP 46
47685: PUSH
47686: LD_INT 81
47688: ST_TO_ADDR
// ar_crane := 88 ;
47689: LD_ADDR_EXP 45
47693: PUSH
47694: LD_INT 88
47696: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
47697: LD_ADDR_EXP 40
47701: PUSH
47702: LD_INT 89
47704: ST_TO_ADDR
// us_hack := 99 ;
47705: LD_ADDR_EXP 41
47709: PUSH
47710: LD_INT 99
47712: ST_TO_ADDR
// us_artillery := 97 ;
47713: LD_ADDR_EXP 42
47717: PUSH
47718: LD_INT 97
47720: ST_TO_ADDR
// ar_bio_bomb := 91 ;
47721: LD_ADDR_EXP 43
47725: PUSH
47726: LD_INT 91
47728: ST_TO_ADDR
// ar_mortar := 92 ;
47729: LD_ADDR_EXP 44
47733: PUSH
47734: LD_INT 92
47736: ST_TO_ADDR
// ru_radar := 98 ;
47737: LD_ADDR_EXP 39
47741: PUSH
47742: LD_INT 98
47744: ST_TO_ADDR
// tech_Artillery := 80 ;
47745: LD_ADDR_EXP 47
47749: PUSH
47750: LD_INT 80
47752: ST_TO_ADDR
// tech_RadMat := 81 ;
47753: LD_ADDR_EXP 48
47757: PUSH
47758: LD_INT 81
47760: ST_TO_ADDR
// tech_BasicTools := 82 ;
47761: LD_ADDR_EXP 49
47765: PUSH
47766: LD_INT 82
47768: ST_TO_ADDR
// tech_Cargo := 83 ;
47769: LD_ADDR_EXP 50
47773: PUSH
47774: LD_INT 83
47776: ST_TO_ADDR
// tech_Track := 84 ;
47777: LD_ADDR_EXP 51
47781: PUSH
47782: LD_INT 84
47784: ST_TO_ADDR
// tech_Crane := 85 ;
47785: LD_ADDR_EXP 52
47789: PUSH
47790: LD_INT 85
47792: ST_TO_ADDR
// tech_Bulldozer := 86 ;
47793: LD_ADDR_EXP 53
47797: PUSH
47798: LD_INT 86
47800: ST_TO_ADDR
// tech_Hovercraft := 87 ;
47801: LD_ADDR_EXP 54
47805: PUSH
47806: LD_INT 87
47808: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
47809: LD_ADDR_EXP 55
47813: PUSH
47814: LD_INT 88
47816: ST_TO_ADDR
// class_mastodont := 31 ;
47817: LD_ADDR_EXP 56
47821: PUSH
47822: LD_INT 31
47824: ST_TO_ADDR
// class_horse := 21 ;
47825: LD_ADDR_EXP 57
47829: PUSH
47830: LD_INT 21
47832: ST_TO_ADDR
// end ;
47833: LD_VAR 0 1
47837: RET
// every 1 do
47838: GO 47840
47840: DISABLE
// InitGlobalVariables ;
47841: CALL 47678 0 0
47845: END
