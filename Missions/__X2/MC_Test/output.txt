// starting begin ResetFog ;
   0: CALL_OW 335
// MC_Init ( ) ;
   4: CALL 388 0 0
// PrepareTestBase ;
   8: CALL 113 0 0
// mc_debug := true ;
  12: LD_ADDR_EXP 5
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// MC_Start ( ) ;
  20: CALL 412 0 0
// end ;
  24: END
// export function MC_CustomMacro ( ) ; begin
  25: LD_INT 0
  27: PPUSH
// MC_Add ( 1 , FilterAllUnits ( [ f_side , 1 ] ) ) ;
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 22
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: EMPTY
  38: LIST
  39: LIST
  40: PPUSH
  41: CALL_OW 69
  45: PPUSH
  46: CALL 467 0 2
// MC_SetParkingArea ( 1 , parkingArea1 ) ;
  50: LD_INT 1
  52: PPUSH
  53: LD_INT 4
  55: PPUSH
  56: CALL 2287 0 2
// MC_SetCratesArea ( 1 , cratesArea1 ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 2
  65: PPUSH
  66: CALL 1864 0 2
// MC_SetScanArea ( 1 , baseArea1 ) ;
  70: LD_INT 1
  72: PPUSH
  73: LD_INT 1
  75: PPUSH
  76: CALL 2336 0 2
// MC_SetBuildingList ( 1 , [ [ b_barracks , 37 , 33 , 5 ] ] ) ;
  80: LD_INT 1
  82: PPUSH
  83: LD_INT 5
  85: PUSH
  86: LD_INT 37
  88: PUSH
  89: LD_INT 33
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: EMPTY
 102: LIST
 103: PPUSH
 104: CALL 964 0 2
// end ;
 108: LD_VAR 0 1
 112: RET
// export function PrepareTestBase ; var i , un ; begin
 113: LD_INT 0
 115: PPUSH
 116: PPUSH
 117: PPUSH
// InitHc_All ;
 118: CALL_OW 584
// uc_side := 1 ;
 122: LD_ADDR_OWVAR 20
 126: PUSH
 127: LD_INT 1
 129: ST_TO_ADDR
// uc_nation := 1 ;
 130: LD_ADDR_OWVAR 21
 134: PUSH
 135: LD_INT 1
 137: ST_TO_ADDR
// for i := 1 to 12 do
 138: LD_ADDR_VAR 0 2
 142: PUSH
 143: DOUBLE
 144: LD_INT 1
 146: DEC
 147: ST_TO_ADDR
 148: LD_INT 12
 150: PUSH
 151: FOR_TO
 152: IFFALSE 219
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
 154: LD_INT 0
 156: PPUSH
 157: LD_VAR 0 2
 161: PUSH
 162: LD_INT 4
 164: MOD
 165: PUSH
 166: LD_INT 1
 168: PLUS
 169: PPUSH
 170: LD_INT 3
 172: PPUSH
 173: CALL_OW 380
// un := CreateHuman ;
 177: LD_ADDR_VAR 0 3
 181: PUSH
 182: CALL_OW 44
 186: ST_TO_ADDR
// PlaceUnitXYR ( un , 21 , 16 , 8 , false ) ;
 187: LD_VAR 0 3
 191: PPUSH
 192: LD_INT 21
 194: PPUSH
 195: LD_INT 16
 197: PPUSH
 198: LD_INT 8
 200: PPUSH
 201: LD_INT 0
 203: PPUSH
 204: CALL_OW 50
// ComHold ( un ) ;
 208: LD_VAR 0 3
 212: PPUSH
 213: CALL_OW 140
// end ;
 217: GO 151
 219: POP
 220: POP
// end ;
 221: LD_VAR 0 1
 225: RET
// every 0 0$50 trigger mc_debug do
 226: LD_EXP 5
 230: IFFALSE 257
 232: GO 234
 234: DISABLE
// begin enable ;
 235: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea1 , true ) ;
 236: LD_INT 1
 238: PPUSH
 239: LD_INT 5
 241: PPUSH
 242: CALL_OW 12
 246: PPUSH
 247: LD_INT 2
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: CALL_OW 55
// end ; end_of_file
 257: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ;
 258: LD_VAR 0 1
 262: PPUSH
 263: LD_VAR 0 2
 267: PPUSH
 268: LD_VAR 0 3
 272: PPUSH
 273: LD_VAR 0 4
 277: PPUSH
 278: LD_VAR 0 5
 282: PPUSH
 283: LD_VAR 0 6
 287: PPUSH
 288: LD_VAR 0 7
 292: PPUSH
 293: CALL 4715 0 7
// end ;
 297: PPOPN 7
 299: END
// on ClassChanged ( unit , old_class , new_class ) do begin MCE_ClassChanged ( unit , old_class , new_class ) ;
 300: LD_VAR 0 1
 304: PPUSH
 305: LD_VAR 0 2
 309: PPUSH
 310: LD_VAR 0 3
 314: PPUSH
 315: CALL 4768 0 3
// end ;
 319: PPOPN 3
 321: END
// on UnitDestroyed ( unit ) do begin MCE_UnitDestroyed ( unit ) ;
 322: LD_VAR 0 1
 326: PPUSH
 327: CALL 4790 0 1
// end ;
 331: PPOPN 1
 333: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ;
 334: LD_VAR 0 1
 338: PPUSH
 339: LD_VAR 0 2
 343: PPUSH
 344: LD_VAR 0 3
 348: PPUSH
 349: LD_VAR 0 4
 353: PPUSH
 354: CALL 4935 0 4
// end ;
 358: PPOPN 4
 360: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 361: LD_VAR 0 1
 365: PPUSH
 366: CALL 5008 0 1
// end ;
 370: PPOPN 1
 372: END
// on UpgradeComplete ( building ) do begin MCE_BuildingUpgradeComplete ( building ) ;
 373: LD_VAR 0 1
 377: PPUSH
 378: CALL 5727 0 1
// end ;
 382: PPOPN 1
 384: END
// on CommandUnitXY ( comand , unit , x , y , z ) do begin end ; end_of_file
 385: PPOPN 5
 387: END
// export function MC_Init ( ) ; begin
 388: LD_INT 0
 390: PPUSH
// MC_InitVariables ( ) ;
 391: CALL 5988 0 0
// MCE_InitEvents ( ) ;
 395: CALL 4691 0 0
// MCT_InitTags ( ) ;
 399: CALL 6164 0 0
// MCTM_InitTaskManager ( ) end ;
 403: CALL 7751 0 0
 407: LD_VAR 0 1
 411: RET
// export function MC_Start ( ) ; begin
 412: LD_INT 0
 414: PPUSH
// mc_active := true ;
 415: LD_ADDR_EXP 4
 419: PUSH
 420: LD_INT 1
 422: ST_TO_ADDR
// MC_CustomMacro ( ) ;
 423: CALL 25 0 0
// MCE_SailEventCustom ( mce_start , 0 , 0 , 0 , 0 , 0 , 0 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 0
 434: PPUSH
 435: LD_INT 0
 437: PPUSH
 438: LD_INT 0
 440: PPUSH
 441: LD_INT 0
 443: PPUSH
 444: LD_INT 0
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL 4715 0 7
// end ;
 454: LD_VAR 0 1
 458: RET
// export function MC_Kill ( base ) ; begin
 459: LD_INT 0
 461: PPUSH
// end ;
 462: LD_VAR 0 2
 466: RET
// export function MC_Add ( side , units ) ; begin
 467: LD_INT 0
 469: PPUSH
// mc_bases := Replace ( mc_bases , mc_bases + 1 , side ) ;
 470: LD_ADDR_EXP 6
 474: PUSH
 475: LD_EXP 6
 479: PPUSH
 480: LD_EXP 6
 484: PUSH
 485: LD_INT 1
 487: PLUS
 488: PPUSH
 489: LD_VAR 0 1
 493: PPUSH
 494: CALL_OW 1
 498: ST_TO_ADDR
// mc_task := Replace ( mc_task , mc_task + 1 , [ ] ) ;
 499: LD_ADDR_EXP 8
 503: PUSH
 504: LD_EXP 8
 508: PPUSH
 509: LD_EXP 8
 513: PUSH
 514: LD_INT 1
 516: PLUS
 517: PPUSH
 518: EMPTY
 519: PPUSH
 520: CALL_OW 1
 524: ST_TO_ADDR
// mc_people := Replace ( mc_people , mc_people + 1 , UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
 525: LD_ADDR_EXP 9
 529: PUSH
 530: LD_EXP 9
 534: PPUSH
 535: LD_EXP 9
 539: PUSH
 540: LD_INT 1
 542: PLUS
 543: PPUSH
 544: LD_VAR 0 2
 548: PPUSH
 549: LD_INT 21
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 3
 561: PUSH
 562: LD_INT 23
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PPUSH
 580: CALL_OW 72
 584: PPUSH
 585: CALL_OW 1
 589: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , mc_ape + 1 , UnitFilter ( units , [ f_nation , 0 ] ) ) ;
 590: LD_ADDR_EXP 19
 594: PUSH
 595: LD_EXP 19
 599: PPUSH
 600: LD_EXP 19
 604: PUSH
 605: LD_INT 1
 607: PLUS
 608: PPUSH
 609: LD_VAR 0 2
 613: PPUSH
 614: LD_INT 23
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: PPUSH
 624: CALL_OW 72
 628: PPUSH
 629: CALL_OW 1
 633: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , mc_vehicles + 1 , UnitFilter ( units , [ f_type , unit_vehicle ] ) ) ;
 634: LD_ADDR_EXP 11
 638: PUSH
 639: LD_EXP 11
 643: PPUSH
 644: LD_EXP 11
 648: PUSH
 649: LD_INT 1
 651: PLUS
 652: PPUSH
 653: LD_VAR 0 2
 657: PPUSH
 658: LD_INT 21
 660: PUSH
 661: LD_INT 2
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PPUSH
 668: CALL_OW 72
 672: PPUSH
 673: CALL_OW 1
 677: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , mc_buildings + 1 , UnitFilter ( units , [ f_type , unit_building ] ) ) ;
 678: LD_ADDR_EXP 10
 682: PUSH
 683: LD_EXP 10
 687: PPUSH
 688: LD_EXP 10
 692: PUSH
 693: LD_INT 1
 695: PLUS
 696: PPUSH
 697: LD_VAR 0 2
 701: PPUSH
 702: LD_INT 21
 704: PUSH
 705: LD_INT 3
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: PPUSH
 712: CALL_OW 72
 716: PPUSH
 717: CALL_OW 1
 721: ST_TO_ADDR
// mc_defense_status := Replace ( mc_defense_status , mc_defense_status + 1 , false ) ;
 722: LD_ADDR_EXP 16
 726: PUSH
 727: LD_EXP 16
 731: PPUSH
 732: LD_EXP 16
 736: PUSH
 737: LD_INT 1
 739: PLUS
 740: PPUSH
 741: LD_INT 0
 743: PPUSH
 744: CALL_OW 1
 748: ST_TO_ADDR
// end ;
 749: LD_VAR 0 3
 753: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
 754: LD_INT 0
 756: PPUSH
 757: PPUSH
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
// if not mc_bases [ base ] then
 762: LD_EXP 6
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: NOT
 773: IFFALSE 777
// exit ;
 775: GO 959
// tmp := [ ] ;
 777: LD_ADDR_VAR 0 6
 781: PUSH
 782: EMPTY
 783: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
 784: LD_ADDR_VAR 0 7
 788: PUSH
 789: LD_VAR 0 3
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 517
 801: ST_TO_ADDR
// if not list then
 802: LD_VAR 0 7
 806: NOT
 807: IFFALSE 811
// exit ;
 809: GO 959
// for i = 1 to amount do
 811: LD_ADDR_VAR 0 5
 815: PUSH
 816: DOUBLE
 817: LD_INT 1
 819: DEC
 820: ST_TO_ADDR
 821: LD_VAR 0 2
 825: PUSH
 826: FOR_TO
 827: IFFALSE 907
// begin x := rand ( 1 , list [ 1 ] ) ;
 829: LD_ADDR_VAR 0 8
 833: PUSH
 834: LD_INT 1
 836: PPUSH
 837: LD_VAR 0 7
 841: PUSH
 842: LD_INT 1
 844: ARRAY
 845: PPUSH
 846: CALL_OW 12
 850: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
 851: LD_ADDR_VAR 0 6
 855: PUSH
 856: LD_VAR 0 6
 860: PPUSH
 861: LD_VAR 0 5
 865: PPUSH
 866: LD_VAR 0 7
 870: PUSH
 871: LD_INT 1
 873: ARRAY
 874: PUSH
 875: LD_VAR 0 8
 879: ARRAY
 880: PUSH
 881: LD_VAR 0 7
 885: PUSH
 886: LD_INT 2
 888: ARRAY
 889: PUSH
 890: LD_VAR 0 8
 894: ARRAY
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PPUSH
 900: CALL_OW 1
 904: ST_TO_ADDR
// end ;
 905: GO 826
 907: POP
 908: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
 909: LD_ADDR_EXP 12
 913: PUSH
 914: LD_EXP 12
 918: PPUSH
 919: LD_VAR 0 1
 923: PPUSH
 924: LD_VAR 0 6
 928: PPUSH
 929: CALL_OW 1
 933: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
 934: LD_ADDR_EXP 13
 938: PUSH
 939: LD_EXP 13
 943: PPUSH
 944: LD_VAR 0 1
 948: PPUSH
 949: LD_VAR 0 3
 953: PPUSH
 954: CALL_OW 1
 958: ST_TO_ADDR
// end ;
 959: LD_VAR 0 4
 963: RET
// export function MC_SetBuildingList ( base , construct_list ) ; var i , btype ; begin
 964: LD_INT 0
 966: PPUSH
 967: PPUSH
 968: PPUSH
// if not construct_list then
 969: LD_VAR 0 2
 973: NOT
 974: IFFALSE 978
// exit ;
 976: GO 1204
// for i := 1 to construct_list do
 978: LD_ADDR_VAR 0 4
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_VAR 0 2
 992: PUSH
 993: FOR_TO
 994: IFFALSE 1177
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
 996: LD_VAR 0 2
1000: PUSH
1001: LD_VAR 0 4
1005: ARRAY
1006: PUSH
1007: LD_INT 1
1009: ARRAY
1010: PUSH
1011: LD_INT 3
1013: PUSH
1014: LD_INT 5
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: IN
1021: IFFALSE 1175
// begin case construct_list [ i ] [ 1 ] of b_factory :
1023: LD_VAR 0 2
1027: PUSH
1028: LD_VAR 0 4
1032: ARRAY
1033: PUSH
1034: LD_INT 1
1036: ARRAY
1037: PUSH
1038: LD_INT 3
1040: DOUBLE
1041: EQUAL
1042: IFTRUE 1046
1044: GO 1057
1046: POP
// btype := b_workshop ; b_barracks :
1047: LD_ADDR_VAR 0 5
1051: PUSH
1052: LD_INT 2
1054: ST_TO_ADDR
1055: GO 1077
1057: LD_INT 5
1059: DOUBLE
1060: EQUAL
1061: IFTRUE 1065
1063: GO 1076
1065: POP
// btype := b_armoury ; end ;
1066: LD_ADDR_VAR 0 5
1070: PUSH
1071: LD_INT 4
1073: ST_TO_ADDR
1074: GO 1077
1076: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: LD_VAR 0 2
1086: PPUSH
1087: LD_VAR 0 4
1091: PPUSH
1092: LD_VAR 0 2
1096: PUSH
1097: LD_VAR 0 4
1101: ARRAY
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: LD_VAR 0 2
1110: PUSH
1111: LD_VAR 0 4
1115: ARRAY
1116: PUSH
1117: LD_INT 1
1119: ARRAY
1120: PPUSH
1121: CALL_OW 1
1125: PPUSH
1126: CALL_OW 1
1130: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1131: LD_ADDR_VAR 0 2
1135: PUSH
1136: LD_VAR 0 2
1140: PPUSH
1141: LD_VAR 0 4
1145: PPUSH
1146: LD_VAR 0 2
1150: PUSH
1151: LD_VAR 0 4
1155: ARRAY
1156: PPUSH
1157: LD_INT 1
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 1
1169: PPUSH
1170: CALL_OW 1
1174: ST_TO_ADDR
// end ;
1175: GO 993
1177: POP
1178: POP
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
1179: LD_ADDR_EXP 14
1183: PUSH
1184: LD_EXP 14
1188: PPUSH
1189: LD_VAR 0 1
1193: PPUSH
1194: LD_VAR 0 2
1198: PPUSH
1199: CALL_OW 1
1203: ST_TO_ADDR
// end ;
1204: LD_VAR 0 3
1208: RET
// export function MC_InsertBuildingList ( base , construct_list ) ; var i , btype ; begin
1209: LD_INT 0
1211: PPUSH
1212: PPUSH
1213: PPUSH
// if not construct_list then
1214: LD_VAR 0 2
1218: NOT
1219: IFFALSE 1223
// exit ;
1221: GO 1461
// for i := 1 to construct_list do
1223: LD_ADDR_VAR 0 4
1227: PUSH
1228: DOUBLE
1229: LD_INT 1
1231: DEC
1232: ST_TO_ADDR
1233: LD_VAR 0 2
1237: PUSH
1238: FOR_TO
1239: IFFALSE 1422
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1241: LD_VAR 0 2
1245: PUSH
1246: LD_VAR 0 4
1250: ARRAY
1251: PUSH
1252: LD_INT 1
1254: ARRAY
1255: PUSH
1256: LD_INT 3
1258: PUSH
1259: LD_INT 5
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: IN
1266: IFFALSE 1420
// begin case construct_list [ i ] [ 1 ] of b_factory :
1268: LD_VAR 0 2
1272: PUSH
1273: LD_VAR 0 4
1277: ARRAY
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PUSH
1283: LD_INT 3
1285: DOUBLE
1286: EQUAL
1287: IFTRUE 1291
1289: GO 1302
1291: POP
// btype := b_workshop ; b_barracks :
1292: LD_ADDR_VAR 0 5
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
1300: GO 1322
1302: LD_INT 5
1304: DOUBLE
1305: EQUAL
1306: IFTRUE 1310
1308: GO 1321
1310: POP
// btype := b_armoury ; end ;
1311: LD_ADDR_VAR 0 5
1315: PUSH
1316: LD_INT 4
1318: ST_TO_ADDR
1319: GO 1322
1321: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1322: LD_ADDR_VAR 0 2
1326: PUSH
1327: LD_VAR 0 2
1331: PPUSH
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_VAR 0 2
1341: PUSH
1342: LD_VAR 0 4
1346: ARRAY
1347: PPUSH
1348: LD_INT 5
1350: PPUSH
1351: LD_VAR 0 2
1355: PUSH
1356: LD_VAR 0 4
1360: ARRAY
1361: PUSH
1362: LD_INT 1
1364: ARRAY
1365: PPUSH
1366: CALL_OW 1
1370: PPUSH
1371: CALL_OW 1
1375: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1376: LD_ADDR_VAR 0 2
1380: PUSH
1381: LD_VAR 0 2
1385: PPUSH
1386: LD_VAR 0 4
1390: PPUSH
1391: LD_VAR 0 2
1395: PUSH
1396: LD_VAR 0 4
1400: ARRAY
1401: PPUSH
1402: LD_INT 1
1404: PPUSH
1405: LD_VAR 0 5
1409: PPUSH
1410: CALL_OW 1
1414: PPUSH
1415: CALL_OW 1
1419: ST_TO_ADDR
// end ;
1420: GO 1238
1422: POP
1423: POP
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union construct_list ) ;
1424: LD_ADDR_EXP 14
1428: PUSH
1429: LD_EXP 14
1433: PPUSH
1434: LD_VAR 0 1
1438: PPUSH
1439: LD_EXP 14
1443: PUSH
1444: LD_VAR 0 1
1448: ARRAY
1449: PUSH
1450: LD_VAR 0 2
1454: UNION
1455: PPUSH
1456: CALL_OW 1
1460: ST_TO_ADDR
// end ;
1461: LD_VAR 0 3
1465: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
1466: LD_INT 0
1468: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , produce_list ) ;
1469: LD_ADDR_EXP 15
1473: PUSH
1474: LD_EXP 15
1478: PPUSH
1479: LD_VAR 0 1
1483: PPUSH
1484: LD_VAR 0 2
1488: PPUSH
1489: CALL_OW 1
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 3
1498: RET
// export function MC_InsertProduceList ( base , components ) ; begin
1499: LD_INT 0
1501: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , mc_produce_list [ base ] ^ components ) ;
1502: LD_ADDR_EXP 15
1506: PUSH
1507: LD_EXP 15
1511: PPUSH
1512: LD_VAR 0 1
1516: PPUSH
1517: LD_EXP 15
1521: PUSH
1522: LD_VAR 0 1
1526: ARRAY
1527: PUSH
1528: LD_VAR 0 2
1532: ADD
1533: PPUSH
1534: CALL_OW 1
1538: ST_TO_ADDR
// end ;
1539: LD_VAR 0 3
1543: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
1544: LD_INT 0
1546: PPUSH
// mc_defender := Replace ( mc_defender , base , deflist ) ;
1547: LD_ADDR_EXP 17
1551: PUSH
1552: LD_EXP 17
1556: PPUSH
1557: LD_VAR 0 1
1561: PPUSH
1562: LD_VAR 0 2
1566: PPUSH
1567: CALL_OW 1
1571: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
1572: LD_ADDR_EXP 18
1576: PUSH
1577: LD_EXP 18
1581: PPUSH
1582: LD_VAR 0 1
1586: PPUSH
1587: LD_VAR 0 2
1591: PUSH
1592: LD_INT 0
1594: PLUS
1595: PPUSH
1596: CALL_OW 1
1600: ST_TO_ADDR
// end ;
1601: LD_VAR 0 3
1605: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
1606: LD_INT 0
1608: PPUSH
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
1609: LD_ADDR_EXP 18
1613: PUSH
1614: LD_EXP 18
1618: PPUSH
1619: LD_VAR 0 1
1623: PPUSH
1624: LD_VAR 0 2
1628: PPUSH
1629: CALL_OW 1
1633: ST_TO_ADDR
// end ;
1634: LD_VAR 0 3
1638: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; begin
1639: LD_INT 0
1641: PPUSH
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
1642: LD_ADDR_EXP 21
1646: PUSH
1647: LD_EXP 21
1651: PPUSH
1652: LD_VAR 0 1
1656: PUSH
1657: LD_EXP 21
1661: PUSH
1662: LD_VAR 0 1
1666: ARRAY
1667: PUSH
1668: LD_INT 1
1670: PLUS
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PPUSH
1676: LD_VAR 0 1
1680: PUSH
1681: LD_VAR 0 2
1685: PUSH
1686: LD_VAR 0 3
1690: PUSH
1691: LD_VAR 0 4
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: PPUSH
1702: CALL 12900 0 3
1706: ST_TO_ADDR
// end ;
1707: LD_VAR 0 5
1711: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
1712: LD_INT 0
1714: PPUSH
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
1715: LD_ADDR_EXP 22
1719: PUSH
1720: LD_EXP 22
1724: PPUSH
1725: LD_VAR 0 1
1729: PPUSH
1730: LD_VAR 0 2
1734: PPUSH
1735: CALL_OW 1
1739: ST_TO_ADDR
// end ;
1740: LD_VAR 0 3
1744: RET
// export function MC_SetTame ( base , area ) ; begin
1745: LD_INT 0
1747: PPUSH
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
1748: LD_ADDR_EXP 23
1752: PUSH
1753: LD_EXP 23
1757: PPUSH
1758: LD_VAR 0 1
1762: PPUSH
1763: LD_VAR 0 2
1767: PPUSH
1768: CALL_OW 1
1772: ST_TO_ADDR
// end ;
1773: LD_VAR 0 3
1777: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
1778: LD_INT 0
1780: PPUSH
1781: PPUSH
// if not base or not kinds then
1782: LD_VAR 0 1
1786: NOT
1787: PUSH
1788: LD_VAR 0 2
1792: NOT
1793: OR
1794: IFFALSE 1798
// exit ;
1796: GO 1859
// for i in kinds do
1798: LD_ADDR_VAR 0 4
1802: PUSH
1803: LD_VAR 0 2
1807: PUSH
1808: FOR_IN
1809: IFFALSE 1857
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
1811: LD_ADDR_EXP 24
1815: PUSH
1816: LD_EXP 24
1820: PPUSH
1821: LD_VAR 0 1
1825: PUSH
1826: LD_EXP 24
1830: PUSH
1831: LD_VAR 0 1
1835: ARRAY
1836: PUSH
1837: LD_INT 1
1839: PLUS
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PPUSH
1845: LD_VAR 0 4
1849: PPUSH
1850: CALL 12900 0 3
1854: ST_TO_ADDR
1855: GO 1808
1857: POP
1858: POP
// end ;
1859: LD_VAR 0 3
1863: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
1864: LD_INT 0
1866: PPUSH
// if not mc_bases or not base or not areas then
1867: LD_EXP 6
1871: NOT
1872: PUSH
1873: LD_VAR 0 1
1877: NOT
1878: OR
1879: PUSH
1880: LD_VAR 0 2
1884: NOT
1885: OR
1886: IFFALSE 1890
// exit ;
1888: GO 1915
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
1890: LD_ADDR_EXP 25
1894: PUSH
1895: LD_EXP 25
1899: PPUSH
1900: LD_VAR 0 1
1904: PPUSH
1905: LD_VAR 0 2
1909: PPUSH
1910: CALL_OW 1
1914: ST_TO_ADDR
// end ;
1915: LD_VAR 0 3
1919: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
1920: LD_INT 0
1922: PPUSH
// if not mc_bases or not base or not teleports_exit then
1923: LD_EXP 6
1927: NOT
1928: PUSH
1929: LD_VAR 0 1
1933: NOT
1934: OR
1935: PUSH
1936: LD_VAR 0 2
1940: NOT
1941: OR
1942: IFFALSE 1946
// exit ;
1944: GO 1971
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
1946: LD_ADDR_EXP 26
1950: PUSH
1951: LD_EXP 26
1955: PPUSH
1956: LD_VAR 0 1
1960: PPUSH
1961: LD_VAR 0 2
1965: PPUSH
1966: CALL_OW 1
1970: ST_TO_ADDR
// end ;
1971: LD_VAR 0 3
1975: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
1976: LD_INT 0
1978: PPUSH
1979: PPUSH
1980: PPUSH
// if not base or not ext_list then
1981: LD_VAR 0 1
1985: NOT
1986: PUSH
1987: LD_VAR 0 5
1991: NOT
1992: OR
1993: IFFALSE 1997
// exit ;
1995: GO 2170
// tmp := GetFacExtXYD ( x , y , d ) ;
1997: LD_ADDR_VAR 0 8
2001: PUSH
2002: LD_VAR 0 2
2006: PPUSH
2007: LD_VAR 0 3
2011: PPUSH
2012: LD_VAR 0 4
2016: PPUSH
2017: CALL 42287 0 3
2021: ST_TO_ADDR
// if not tmp then
2022: LD_VAR 0 8
2026: NOT
2027: IFFALSE 2031
// exit ;
2029: GO 2170
// for i in tmp do
2031: LD_ADDR_VAR 0 7
2035: PUSH
2036: LD_VAR 0 8
2040: PUSH
2041: FOR_IN
2042: IFFALSE 2168
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
2044: LD_ADDR_EXP 14
2048: PUSH
2049: LD_EXP 14
2053: PPUSH
2054: LD_VAR 0 1
2058: PPUSH
2059: LD_EXP 14
2063: PUSH
2064: LD_VAR 0 1
2068: ARRAY
2069: PPUSH
2070: LD_EXP 14
2074: PUSH
2075: LD_VAR 0 1
2079: ARRAY
2080: PUSH
2081: LD_INT 1
2083: PLUS
2084: PPUSH
2085: LD_VAR 0 5
2089: PUSH
2090: LD_INT 1
2092: ARRAY
2093: PUSH
2094: LD_VAR 0 7
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PUSH
2103: LD_VAR 0 7
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PUSH
2112: LD_VAR 0 7
2116: PUSH
2117: LD_INT 3
2119: ARRAY
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: PPUSH
2127: CALL_OW 2
2131: PPUSH
2132: CALL_OW 1
2136: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
2137: LD_ADDR_VAR 0 5
2141: PUSH
2142: LD_VAR 0 5
2146: PPUSH
2147: LD_INT 1
2149: PPUSH
2150: CALL_OW 3
2154: ST_TO_ADDR
// if not ext_list then
2155: LD_VAR 0 5
2159: NOT
2160: IFFALSE 2166
// exit ;
2162: POP
2163: POP
2164: GO 2170
// end ;
2166: GO 2041
2168: POP
2169: POP
// end ;
2170: LD_VAR 0 6
2174: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
2175: LD_INT 0
2177: PPUSH
// if not mc_bases or not base or not weapon_list then
2178: LD_EXP 6
2182: NOT
2183: PUSH
2184: LD_VAR 0 1
2188: NOT
2189: OR
2190: PUSH
2191: LD_VAR 0 2
2195: NOT
2196: OR
2197: IFFALSE 2201
// exit ;
2199: GO 2226
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
2201: LD_ADDR_EXP 27
2205: PUSH
2206: LD_EXP 27
2210: PPUSH
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 2
2220: PPUSH
2221: CALL_OW 1
2225: ST_TO_ADDR
// end ;
2226: LD_VAR 0 3
2230: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
2231: LD_INT 0
2233: PPUSH
// if not mc_bases or not base or not tech_list then
2234: LD_EXP 6
2238: NOT
2239: PUSH
2240: LD_VAR 0 1
2244: NOT
2245: OR
2246: PUSH
2247: LD_VAR 0 2
2251: NOT
2252: OR
2253: IFFALSE 2257
// exit ;
2255: GO 2282
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
2257: LD_ADDR_EXP 20
2261: PUSH
2262: LD_EXP 20
2266: PPUSH
2267: LD_VAR 0 1
2271: PPUSH
2272: LD_VAR 0 2
2276: PPUSH
2277: CALL_OW 1
2281: ST_TO_ADDR
// end ;
2282: LD_VAR 0 3
2286: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
2287: LD_INT 0
2289: PPUSH
// if not parking_area or not base then
2290: LD_VAR 0 2
2294: NOT
2295: PUSH
2296: LD_VAR 0 1
2300: NOT
2301: OR
2302: IFFALSE 2306
// exit ;
2304: GO 2331
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
2306: LD_ADDR_EXP 28
2310: PUSH
2311: LD_EXP 28
2315: PPUSH
2316: LD_VAR 0 1
2320: PPUSH
2321: LD_VAR 0 2
2325: PPUSH
2326: CALL_OW 1
2330: ST_TO_ADDR
// end ;
2331: LD_VAR 0 3
2335: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
2336: LD_INT 0
2338: PPUSH
// if not base or not scan_area then
2339: LD_VAR 0 1
2343: NOT
2344: PUSH
2345: LD_VAR 0 2
2349: NOT
2350: OR
2351: IFFALSE 2355
// exit ;
2353: GO 2380
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
2355: LD_ADDR_EXP 29
2359: PUSH
2360: LD_EXP 29
2364: PPUSH
2365: LD_VAR 0 1
2369: PPUSH
2370: LD_VAR 0 2
2374: PPUSH
2375: CALL_OW 1
2379: ST_TO_ADDR
// end ; end_of_file
2380: LD_VAR 0 3
2384: RET
// export function MC_Monitor ( ) ; var i , active_players ; begin
2385: LD_INT 0
2387: PPUSH
2388: PPUSH
2389: PPUSH
// while mc_active do
2390: LD_EXP 4
2394: IFFALSE 2504
// begin wait ( 0 0$1 ) ;
2396: LD_INT 35
2398: PPUSH
2399: CALL_OW 67
// active_players := 0 ;
2403: LD_ADDR_VAR 0 3
2407: PUSH
2408: LD_INT 0
2410: ST_TO_ADDR
// for i := 1 to mc_bases do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: DOUBLE
2417: LD_INT 1
2419: DEC
2420: ST_TO_ADDR
2421: LD_EXP 6
2425: PUSH
2426: FOR_TO
2427: IFFALSE 2485
// begin if MC_Exist ( i ) then
2429: LD_VAR 0 2
2433: PPUSH
2434: CALL 6421 0 1
2438: IFFALSE 2483
// begin MCE_SailEventCustom ( mce_monitor_base , i , 0 , 0 , 0 , 0 , 0 ) ;
2440: LD_EXP 2
2444: PPUSH
2445: LD_VAR 0 2
2449: PPUSH
2450: LD_INT 0
2452: PPUSH
2453: LD_INT 0
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL 4715 0 7
// active_players := active_players + 1 ;
2469: LD_ADDR_VAR 0 3
2473: PUSH
2474: LD_VAR 0 3
2478: PUSH
2479: LD_INT 1
2481: PLUS
2482: ST_TO_ADDR
// end ; end ;
2483: GO 2426
2485: POP
2486: POP
// if not active_players then
2487: LD_VAR 0 3
2491: NOT
2492: IFFALSE 2502
// mc_active := false ;
2494: LD_ADDR_EXP 4
2498: PUSH
2499: LD_INT 0
2501: ST_TO_ADDR
// end ;
2502: GO 2390
// end ;
2504: LD_VAR 0 1
2508: RET
// export function MC_MonitorBase ( base ) ; begin
2509: LD_INT 0
2511: PPUSH
// if not mc_people [ base ] then
2512: LD_EXP 9
2516: PUSH
2517: LD_VAR 0 1
2521: ARRAY
2522: NOT
2523: IFFALSE 2548
// mc_bases := Replace ( mc_bases , base , 0 ) ;
2525: LD_ADDR_EXP 6
2529: PUSH
2530: LD_EXP 6
2534: PPUSH
2535: LD_VAR 0 1
2539: PPUSH
2540: LD_INT 0
2542: PPUSH
2543: CALL_OW 1
2547: ST_TO_ADDR
// mc_danger := Replace ( mc_danger , base , DangerInArea ( mc_bases [ base ] , mc_scan_area [ base ] ) ) ;
2548: LD_ADDR_EXP 30
2552: PUSH
2553: LD_EXP 30
2557: PPUSH
2558: LD_VAR 0 1
2562: PPUSH
2563: LD_EXP 6
2567: PUSH
2568: LD_VAR 0 1
2572: ARRAY
2573: PPUSH
2574: LD_EXP 29
2578: PUSH
2579: LD_VAR 0 1
2583: ARRAY
2584: PPUSH
2585: CALL 15552 0 2
2589: PPUSH
2590: CALL_OW 1
2594: ST_TO_ADDR
// if mc_danger [ base ] then
2595: LD_EXP 30
2599: PUSH
2600: LD_VAR 0 1
2604: ARRAY
2605: IFFALSE 2618
// MC_Defend ( base ) else
2607: LD_VAR 0 1
2611: PPUSH
2612: CALL 2632 0 1
2616: GO 2627
// MC_TaskManager ( base ) ;
2618: LD_VAR 0 1
2622: PPUSH
2623: CALL 2694 0 1
// end ;
2627: LD_VAR 0 2
2631: RET
// export function MC_Defend ( base ) ; var defender_vehicles ; begin
2632: LD_INT 0
2634: PPUSH
2635: PPUSH
// if mc_defense_status [ base ] then
2636: LD_EXP 16
2640: PUSH
2641: LD_VAR 0 1
2645: ARRAY
2646: IFFALSE 2650
// exit ;
2648: GO 2689
// mc_defense_status := Replace ( mc_defense_status , base , true ) ;
2650: LD_ADDR_EXP 16
2654: PUSH
2655: LD_EXP 16
2659: PPUSH
2660: LD_VAR 0 1
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 1
2672: ST_TO_ADDR
// defender_vehicles := mc_defender [ base ] ;
2673: LD_ADDR_VAR 0 3
2677: PUSH
2678: LD_EXP 17
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ST_TO_ADDR
// end ;
2689: LD_VAR 0 2
2693: RET
// export function MC_TaskManager ( base ) ; var crates_list ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
// MC_CollectCrates ( base , GetListOfCratesInArea ( mc_crates_area [ base ] ) ) ;
2698: LD_VAR 0 1
2702: PPUSH
2703: LD_EXP 25
2707: PUSH
2708: LD_VAR 0 1
2712: ARRAY
2713: PPUSH
2714: CALL_OW 435
2718: PPUSH
2719: CALL 2737 0 2
// MC_Build ( base ) ;
2723: LD_VAR 0 1
2727: PPUSH
2728: CALL 4083 0 1
// end ;
2732: LD_VAR 0 2
2736: RET
// export function MC_CollectCrates ( base , crates ) ; var i , j , amount , cargo_bays , apes , engs , collectors , number_of_crates , driver , drivers , depot , mechanic_used ; begin
2737: LD_INT 0
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
2744: PPUSH
2745: PPUSH
2746: PPUSH
2747: PPUSH
2748: PPUSH
2749: PPUSH
2750: PPUSH
2751: PPUSH
// if MCTM_HasActiveTask ( base , mctm_collect_crates ) or not crates or not MC_GetDepot ( base ) then
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_EXP 36
2761: PPUSH
2762: CALL 7775 0 2
2766: PUSH
2767: LD_VAR 0 2
2771: NOT
2772: OR
2773: PUSH
2774: LD_VAR 0 1
2778: PPUSH
2779: CALL 7396 0 1
2783: NOT
2784: OR
2785: IFFALSE 2789
// exit ;
2787: GO 4078
// MCTM_SetActiveTask ( base , mctm_collect_crates ) ;
2789: LD_VAR 0 1
2793: PPUSH
2794: LD_EXP 36
2798: PPUSH
2799: CALL 7805 0 2
// collectors := [ ] ;
2803: LD_ADDR_VAR 0 10
2807: PUSH
2808: EMPTY
2809: ST_TO_ADDR
// cargo_bays := GetCargoBay ( mc_vehicles [ base ] ) ;
2810: LD_ADDR_VAR 0 7
2814: PUSH
2815: LD_EXP 11
2819: PUSH
2820: LD_VAR 0 1
2824: ARRAY
2825: PPUSH
2826: CALL 45910 0 1
2830: ST_TO_ADDR
// if cargo_bays then
2831: LD_VAR 0 7
2835: IFFALSE 3516
// begin collectors := collectors union cargo_bays ;
2837: LD_ADDR_VAR 0 10
2841: PUSH
2842: LD_VAR 0 10
2846: PUSH
2847: LD_VAR 0 7
2851: UNION
2852: ST_TO_ADDR
// while crates and collectors do
2853: LD_VAR 0 2
2857: PUSH
2858: LD_VAR 0 10
2862: AND
2863: IFFALSE 3413
// begin wait ( 0 0$1 ) ;
2865: LD_INT 35
2867: PPUSH
2868: CALL_OW 67
// for i in collectors do
2872: LD_ADDR_VAR 0 4
2876: PUSH
2877: LD_VAR 0 10
2881: PUSH
2882: FOR_IN
2883: IFFALSE 3409
// begin driver := 0 ;
2885: LD_ADDR_VAR 0 12
2889: PUSH
2890: LD_INT 0
2892: ST_TO_ADDR
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
2893: LD_VAR 0 4
2897: PPUSH
2898: CALL_OW 263
2902: PUSH
2903: LD_INT 1
2905: EQUAL
2906: PUSH
2907: LD_VAR 0 4
2911: PPUSH
2912: CALL_OW 311
2916: NOT
2917: AND
2918: IFFALSE 3102
// begin driver := MC_GetOneByClass ( base , 3 , mct_none ) ;
2920: LD_ADDR_VAR 0 12
2924: PUSH
2925: LD_VAR 0 1
2929: PPUSH
2930: LD_INT 3
2932: PPUSH
2933: LD_EXP 31
2937: PPUSH
2938: CALL 7302 0 3
2942: ST_TO_ADDR
// if not driver then
2943: LD_VAR 0 12
2947: NOT
2948: IFFALSE 3017
// begin driver := MC_GetBestForClass ( base , 3 , 1 ) ;
2950: LD_ADDR_VAR 0 12
2954: PUSH
2955: LD_VAR 0 1
2959: PPUSH
2960: LD_INT 3
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: CALL 6461 0 3
2970: ST_TO_ADDR
// if driver then
2971: LD_VAR 0 12
2975: IFFALSE 3017
// begin driver := driver [ 1 ] ;
2977: LD_ADDR_VAR 0 12
2981: PUSH
2982: LD_VAR 0 12
2986: PUSH
2987: LD_INT 1
2989: ARRAY
2990: ST_TO_ADDR
// MC_ChangeClass ( base , 3 , driver ) ;
2991: LD_VAR 0 1
2995: PPUSH
2996: LD_INT 3
2998: PPUSH
2999: LD_VAR 0 12
3003: PPUSH
3004: CALL 6691 0 3
// AddComExitBuilding ( driver ) ;
3008: LD_VAR 0 12
3012: PPUSH
3013: CALL_OW 182
// end ; end ; if IsInUnit ( driver ) then
3017: LD_VAR 0 12
3021: PPUSH
3022: CALL_OW 310
3026: IFFALSE 3037
// ComExit ( driver ) ;
3028: LD_VAR 0 12
3032: PPUSH
3033: CALL 45039 0 1
// SetTag ( driver , mct_collect_crates ) ;
3037: LD_VAR 0 12
3041: PPUSH
3042: LD_EXP 34
3046: PPUSH
3047: CALL_OW 109
// if GetLives ( i ) < 1000 then
3051: LD_VAR 0 4
3055: PPUSH
3056: CALL_OW 256
3060: PUSH
3061: LD_INT 1000
3063: LESS
3064: IFFALSE 3080
// AddComRepairVehicle ( driver , i ) ;
3066: LD_VAR 0 12
3070: PPUSH
3071: LD_VAR 0 4
3075: PPUSH
3076: CALL_OW 189
// AddComEnterUnit ( driver , i ) ;
3080: LD_VAR 0 12
3084: PPUSH
3085: LD_VAR 0 4
3089: PPUSH
3090: CALL_OW 180
// mechanic_used := true ;
3094: LD_ADDR_VAR 0 15
3098: PUSH
3099: LD_INT 1
3101: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) ;
3102: LD_INT 35
3104: PPUSH
3105: CALL_OW 67
// if IsDead ( i ) then
3109: LD_VAR 0 4
3113: PPUSH
3114: CALL_OW 301
3118: IFFALSE 3138
// begin collectors := collectors diff i ;
3120: LD_ADDR_VAR 0 10
3124: PUSH
3125: LD_VAR 0 10
3129: PUSH
3130: LD_VAR 0 4
3134: DIFF
3135: ST_TO_ADDR
// continue ;
3136: GO 3102
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 20 then
3138: LD_VAR 0 4
3142: PPUSH
3143: CALL_OW 262
3147: PUSH
3148: LD_INT 1
3150: EQUAL
3151: PUSH
3152: LD_VAR 0 4
3156: PPUSH
3157: CALL_OW 261
3161: PUSH
3162: LD_INT 20
3164: LESS
3165: AND
3166: IFFALSE 3227
// begin depot := NearestUnitToUnit ( MC_GetDepot ( base ) , i ) ;
3168: LD_ADDR_VAR 0 14
3172: PUSH
3173: LD_VAR 0 1
3177: PPUSH
3178: CALL 7396 0 1
3182: PPUSH
3183: LD_VAR 0 4
3187: PPUSH
3188: CALL_OW 74
3192: ST_TO_ADDR
// if GetDistUnits ( i , depot ) < 6 then
3193: LD_VAR 0 4
3197: PPUSH
3198: LD_VAR 0 14
3202: PPUSH
3203: CALL_OW 296
3207: PUSH
3208: LD_INT 6
3210: LESS
3211: IFFALSE 3227
// ComMoveUnit ( i , depot ) ;
3213: LD_VAR 0 4
3217: PPUSH
3218: LD_VAR 0 14
3222: PPUSH
3223: CALL_OW 112
// end ; if GetControl ( i ) = control_manual then
3227: LD_VAR 0 4
3231: PPUSH
3232: CALL_OW 263
3236: PUSH
3237: LD_INT 1
3239: EQUAL
3240: IFFALSE 3305
// begin if not driver then
3242: LD_VAR 0 12
3246: NOT
3247: IFFALSE 3264
// driver := IsDrivenBy ( i ) ;
3249: LD_ADDR_VAR 0 12
3253: PUSH
3254: LD_VAR 0 4
3258: PPUSH
3259: CALL_OW 311
3263: ST_TO_ADDR
// if not HasTask ( driver ) then
3264: LD_VAR 0 12
3268: PPUSH
3269: CALL_OW 314
3273: NOT
3274: IFFALSE 3303
// ComCollect ( driver , crates [ 1 ] , crates [ 2 ] ) ;
3276: LD_VAR 0 12
3280: PPUSH
3281: LD_VAR 0 2
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 2
3294: PUSH
3295: LD_INT 2
3297: ARRAY
3298: PPUSH
3299: CALL_OW 117
// end else
3303: GO 3344
// if not HasTask ( i ) then
3305: LD_VAR 0 4
3309: PPUSH
3310: CALL_OW 314
3314: NOT
3315: IFFALSE 3344
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3317: LD_VAR 0 4
3321: PPUSH
3322: LD_VAR 0 2
3326: PUSH
3327: LD_INT 1
3329: ARRAY
3330: PPUSH
3331: LD_VAR 0 2
3335: PUSH
3336: LD_INT 2
3338: ARRAY
3339: PPUSH
3340: CALL_OW 117
// until not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3344: LD_VAR 0 2
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: PPUSH
3353: LD_VAR 0 2
3357: PUSH
3358: LD_INT 2
3360: ARRAY
3361: PPUSH
3362: CALL_OW 284
3366: NOT
3367: IFFALSE 3102
// for j := 1 to 2 do
3369: LD_ADDR_VAR 0 5
3373: PUSH
3374: DOUBLE
3375: LD_INT 1
3377: DEC
3378: ST_TO_ADDR
3379: LD_INT 2
3381: PUSH
3382: FOR_TO
3383: IFFALSE 3405
// crates := Delete ( crates , 1 ) ;
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: LD_VAR 0 2
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL_OW 3
3402: ST_TO_ADDR
3403: GO 3382
3405: POP
3406: POP
// end ;
3407: GO 2882
3409: POP
3410: POP
// end ;
3411: GO 2853
// if mechanic_used then
3413: LD_VAR 0 15
3417: IFFALSE 3514
// begin repeat wait ( 0 0$1 ) ;
3419: LD_INT 35
3421: PPUSH
3422: CALL_OW 67
// until not GetCargo ( collectors , mat_cans ) or not collectors ;
3426: LD_VAR 0 10
3430: PPUSH
3431: LD_INT 1
3433: PPUSH
3434: CALL_OW 289
3438: NOT
3439: PUSH
3440: LD_VAR 0 10
3444: NOT
3445: OR
3446: IFFALSE 3419
// drivers := MCT_ResetTag ( base , mct_collect_crates ) ;
3448: LD_ADDR_VAR 0 13
3452: PUSH
3453: LD_VAR 0 1
3457: PPUSH
3458: LD_EXP 34
3462: PPUSH
3463: CALL 6306 0 2
3467: ST_TO_ADDR
// if drivers then
3468: LD_VAR 0 13
3472: IFFALSE 3500
// for i in drivers do
3474: LD_ADDR_VAR 0 4
3478: PUSH
3479: LD_VAR 0 13
3483: PUSH
3484: FOR_IN
3485: IFFALSE 3498
// ComExit ( i ) ;
3487: LD_VAR 0 4
3491: PPUSH
3492: CALL 45039 0 1
3496: GO 3484
3498: POP
3499: POP
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3500: LD_VAR 0 1
3504: PPUSH
3505: LD_EXP 36
3509: PPUSH
3510: CALL 7869 0 2
// end ; end else
3514: GO 4078
// begin apes := MC_GetByClass ( base , class_apeman_engineer , mct_none ) ;
3516: LD_ADDR_VAR 0 8
3520: PUSH
3521: LD_VAR 0 1
3525: PPUSH
3526: LD_INT 16
3528: PPUSH
3529: LD_EXP 31
3533: PPUSH
3534: CALL 7199 0 3
3538: ST_TO_ADDR
// if apes then
3539: LD_VAR 0 8
3543: IFFALSE 3561
// collectors := collectors union apes ;
3545: LD_ADDR_VAR 0 10
3549: PUSH
3550: LD_VAR 0 10
3554: PUSH
3555: LD_VAR 0 8
3559: UNION
3560: ST_TO_ADDR
// engs := MC_GetByClass ( base , class_engineer , mct_none ) ;
3561: LD_ADDR_VAR 0 9
3565: PUSH
3566: LD_VAR 0 1
3570: PPUSH
3571: LD_INT 2
3573: PPUSH
3574: LD_EXP 31
3578: PPUSH
3579: CALL 7199 0 3
3583: ST_TO_ADDR
// if engs then
3584: LD_VAR 0 9
3588: IFFALSE 3606
// collectors := collectors union engs ;
3590: LD_ADDR_VAR 0 10
3594: PUSH
3595: LD_VAR 0 10
3599: PUSH
3600: LD_VAR 0 9
3604: UNION
3605: ST_TO_ADDR
// if not collectors then
3606: LD_VAR 0 10
3610: NOT
3611: IFFALSE 3711
// begin engs := MC_GetBestForClass ( base , 2 , 3 ) ;
3613: LD_ADDR_VAR 0 9
3617: PUSH
3618: LD_VAR 0 1
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: LD_INT 3
3628: PPUSH
3629: CALL 6461 0 3
3633: ST_TO_ADDR
// if engs then
3634: LD_VAR 0 9
3638: IFFALSE 3657
// MC_ChangeClass ( base , 2 , engs ) ;
3640: LD_VAR 0 1
3644: PPUSH
3645: LD_INT 2
3647: PPUSH
3648: LD_VAR 0 9
3652: PPUSH
3653: CALL 6691 0 3
// repeat wait ( 0 0$1 ) ;
3657: LD_INT 35
3659: PPUSH
3660: CALL_OW 67
// if not UnitFilter ( engs , [ f_ok ] ) then
3664: LD_VAR 0 9
3668: PPUSH
3669: LD_INT 50
3671: PUSH
3672: EMPTY
3673: LIST
3674: PPUSH
3675: CALL_OW 72
3679: NOT
3680: IFFALSE 3684
// break ;
3682: GO 3711
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
3684: LD_VAR 0 9
3688: PPUSH
3689: LD_INT 25
3691: PUSH
3692: LD_INT 2
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 72
3703: PUSH
3704: LD_VAR 0 9
3708: EQUAL
3709: IFFALSE 3657
// end ; if not collectors then
3711: LD_VAR 0 10
3715: NOT
3716: IFFALSE 3734
// begin MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3718: LD_VAR 0 1
3722: PPUSH
3723: LD_EXP 36
3727: PPUSH
3728: CALL 7869 0 2
// exit ;
3732: GO 4078
// end ; if collectors > 5 then
3734: LD_VAR 0 10
3738: PUSH
3739: LD_INT 5
3741: GREATER
3742: IFFALSE 3798
// for i := collectors downto 5 do
3744: LD_ADDR_VAR 0 4
3748: PUSH
3749: DOUBLE
3750: LD_VAR 0 10
3754: INC
3755: ST_TO_ADDR
3756: LD_INT 5
3758: PUSH
3759: FOR_DOWNTO
3760: IFFALSE 3796
// begin SetTag ( i , 0 ) ;
3762: LD_VAR 0 4
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL_OW 109
// collectors := Delete ( collectors , i ) ;
3774: LD_ADDR_VAR 0 10
3778: PUSH
3779: LD_VAR 0 10
3783: PPUSH
3784: LD_VAR 0 4
3788: PPUSH
3789: CALL_OW 3
3793: ST_TO_ADDR
// end ;
3794: GO 3759
3796: POP
3797: POP
// ComExitAll ( collectors ) ;
3798: LD_VAR 0 10
3802: PPUSH
3803: CALL 45122 0 1
// MCT_SetTag ( collectors , mct_collect_crates ) ;
3807: LD_VAR 0 10
3811: PPUSH
3812: LD_EXP 34
3816: PPUSH
3817: CALL 6372 0 2
// while crates and collectors do
3821: LD_VAR 0 2
3825: PUSH
3826: LD_VAR 0 10
3830: AND
3831: IFFALSE 4050
// begin wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// amount := GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3840: LD_ADDR_VAR 0 6
3844: PUSH
3845: LD_VAR 0 2
3849: PUSH
3850: LD_INT 1
3852: ARRAY
3853: PPUSH
3854: LD_VAR 0 2
3858: PUSH
3859: LD_INT 2
3861: ARRAY
3862: PPUSH
3863: CALL_OW 284
3867: ST_TO_ADDR
// j := 0 ;
3868: LD_ADDR_VAR 0 5
3872: PUSH
3873: LD_INT 0
3875: ST_TO_ADDR
// for i in collectors do
3876: LD_ADDR_VAR 0 4
3880: PUSH
3881: LD_VAR 0 10
3885: PUSH
3886: FOR_IN
3887: IFFALSE 3983
// begin if IsDead ( i ) then
3889: LD_VAR 0 4
3893: PPUSH
3894: CALL_OW 301
3898: IFFALSE 3916
// collectors := collectors diff i ;
3900: LD_ADDR_VAR 0 10
3904: PUSH
3905: LD_VAR 0 10
3909: PUSH
3910: LD_VAR 0 4
3914: DIFF
3915: ST_TO_ADDR
// if j < amount and not HasTask ( i ) then
3916: LD_VAR 0 5
3920: PUSH
3921: LD_VAR 0 6
3925: LESS
3926: PUSH
3927: LD_VAR 0 4
3931: PPUSH
3932: CALL_OW 314
3936: NOT
3937: AND
3938: IFFALSE 3981
// begin j := j + 1 ;
3940: LD_ADDR_VAR 0 5
3944: PUSH
3945: LD_VAR 0 5
3949: PUSH
3950: LD_INT 1
3952: PLUS
3953: ST_TO_ADDR
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3954: LD_VAR 0 4
3958: PPUSH
3959: LD_VAR 0 2
3963: PUSH
3964: LD_INT 1
3966: ARRAY
3967: PPUSH
3968: LD_VAR 0 2
3972: PUSH
3973: LD_INT 2
3975: ARRAY
3976: PPUSH
3977: CALL_OW 117
// end ; end ;
3981: GO 3886
3983: POP
3984: POP
// if not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) then
3985: LD_VAR 0 2
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_VAR 0 2
3998: PUSH
3999: LD_INT 2
4001: ARRAY
4002: PPUSH
4003: CALL_OW 284
4007: NOT
4008: IFFALSE 4048
// for j := 1 to 2 do
4010: LD_ADDR_VAR 0 5
4014: PUSH
4015: DOUBLE
4016: LD_INT 1
4018: DEC
4019: ST_TO_ADDR
4020: LD_INT 2
4022: PUSH
4023: FOR_TO
4024: IFFALSE 4046
// crates := Delete ( crates , 1 ) ;
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: LD_VAR 0 2
4035: PPUSH
4036: LD_INT 1
4038: PPUSH
4039: CALL_OW 3
4043: ST_TO_ADDR
4044: GO 4023
4046: POP
4047: POP
// end ;
4048: GO 3821
// MCT_ResetTag ( base , mct_collect_crates ) ;
4050: LD_VAR 0 1
4054: PPUSH
4055: LD_EXP 34
4059: PPUSH
4060: CALL 6306 0 2
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_EXP 36
4073: PPUSH
4074: CALL 7869 0 2
// end ; end ;
4078: LD_VAR 0 3
4082: RET
// export function MC_Build ( base ) ; var depot , btype , x , y , d , engs ; begin
4083: LD_INT 0
4085: PPUSH
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
4090: PPUSH
4091: PPUSH
// if MCTM_HasActiveTask ( base , mctm_build ) or not mc_build_list [ base ] or not MC_GetDepot ( base ) then
4092: LD_VAR 0 1
4096: PPUSH
4097: LD_EXP 37
4101: PPUSH
4102: CALL 7775 0 2
4106: PUSH
4107: LD_EXP 14
4111: PUSH
4112: LD_VAR 0 1
4116: ARRAY
4117: NOT
4118: OR
4119: PUSH
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL 7396 0 1
4129: NOT
4130: OR
4131: IFFALSE 4135
// exit ;
4133: GO 4686
// MCTM_SetActiveTask ( base , mctm_build ) ;
4135: LD_VAR 0 1
4139: PPUSH
4140: LD_EXP 37
4144: PPUSH
4145: CALL 7805 0 2
// engs := MC_GetByClass ( base , 2 , mct_none ) ;
4149: LD_ADDR_VAR 0 8
4153: PUSH
4154: LD_VAR 0 1
4158: PPUSH
4159: LD_INT 2
4161: PPUSH
4162: LD_EXP 31
4166: PPUSH
4167: CALL 7199 0 3
4171: ST_TO_ADDR
// if not engs then
4172: LD_VAR 0 8
4176: NOT
4177: IFFALSE 4289
// begin engs := MC_GetBestForClass ( base , 2 , 6 ) ;
4179: LD_ADDR_VAR 0 8
4183: PUSH
4184: LD_VAR 0 1
4188: PPUSH
4189: LD_INT 2
4191: PPUSH
4192: LD_INT 6
4194: PPUSH
4195: CALL 6461 0 3
4199: ST_TO_ADDR
// if not engs then
4200: LD_VAR 0 8
4204: NOT
4205: IFFALSE 4223
// begin MCTM_DeleteActiveTask ( base , mctm_build ) ;
4207: LD_VAR 0 1
4211: PPUSH
4212: LD_EXP 37
4216: PPUSH
4217: CALL 7869 0 2
// exit ;
4221: GO 4686
// end ; MC_ChangeClass ( base , 2 , engs ) ;
4223: LD_VAR 0 1
4227: PPUSH
4228: LD_INT 2
4230: PPUSH
4231: LD_VAR 0 8
4235: PPUSH
4236: CALL 6691 0 3
// repeat wait ( 0 0$1 ) ;
4240: LD_INT 35
4242: PPUSH
4243: CALL_OW 67
// if not mc_people [ base ] then
4247: LD_EXP 9
4251: PUSH
4252: LD_VAR 0 1
4256: ARRAY
4257: NOT
4258: IFFALSE 4262
// exit ;
4260: GO 4686
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
4262: LD_VAR 0 8
4266: PPUSH
4267: LD_INT 25
4269: PUSH
4270: LD_INT 2
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PPUSH
4277: CALL_OW 72
4281: PUSH
4282: LD_VAR 0 8
4286: EQUAL
4287: IFFALSE 4240
// end ; ComExitAll ( engs ) ;
4289: LD_VAR 0 8
4293: PPUSH
4294: CALL 45122 0 1
// MCT_SetTag ( engs , mct_build ) ;
4298: LD_VAR 0 8
4302: PPUSH
4303: LD_EXP 33
4307: PPUSH
4308: CALL 6372 0 2
// btype := mc_build_list [ base ] [ 1 ] [ 1 ] ;
4312: LD_ADDR_VAR 0 4
4316: PUSH
4317: LD_EXP 14
4321: PUSH
4322: LD_VAR 0 1
4326: ARRAY
4327: PUSH
4328: LD_INT 1
4330: ARRAY
4331: PUSH
4332: LD_INT 1
4334: ARRAY
4335: ST_TO_ADDR
// x := mc_build_list [ base ] [ 1 ] [ 2 ] ;
4336: LD_ADDR_VAR 0 5
4340: PUSH
4341: LD_EXP 14
4345: PUSH
4346: LD_VAR 0 1
4350: ARRAY
4351: PUSH
4352: LD_INT 1
4354: ARRAY
4355: PUSH
4356: LD_INT 2
4358: ARRAY
4359: ST_TO_ADDR
// y := mc_build_list [ base ] [ 1 ] [ 3 ] ;
4360: LD_ADDR_VAR 0 6
4364: PUSH
4365: LD_EXP 14
4369: PUSH
4370: LD_VAR 0 1
4374: ARRAY
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PUSH
4380: LD_INT 3
4382: ARRAY
4383: ST_TO_ADDR
// d := mc_build_list [ base ] [ 1 ] [ 4 ] ;
4384: LD_ADDR_VAR 0 7
4388: PUSH
4389: LD_EXP 14
4393: PUSH
4394: LD_VAR 0 1
4398: ARRAY
4399: PUSH
4400: LD_INT 1
4402: ARRAY
4403: PUSH
4404: LD_INT 4
4406: ARRAY
4407: ST_TO_ADDR
// if GetType ( HexInfo ( x , y ) ) = unit_building then
4408: LD_VAR 0 5
4412: PPUSH
4413: LD_VAR 0 6
4417: PPUSH
4418: CALL_OW 428
4422: PPUSH
4423: CALL_OW 247
4427: PUSH
4428: LD_INT 3
4430: EQUAL
4431: IFFALSE 4466
// begin wait ( 0 0$1 ) ;
4433: LD_INT 35
4435: PPUSH
4436: CALL_OW 67
// ComComplete ( engs , HexInfo ( x , y ) ) ;
4440: LD_VAR 0 8
4444: PPUSH
4445: LD_VAR 0 5
4449: PPUSH
4450: LD_VAR 0 6
4454: PPUSH
4455: CALL_OW 428
4459: PPUSH
4460: CALL 15763 0 2
// end else
4464: GO 4686
// begin depot := NearestUnitToXY ( MC_GetDepot ( base ) , x , y ) ;
4466: LD_ADDR_VAR 0 3
4470: PUSH
4471: LD_VAR 0 1
4475: PPUSH
4476: CALL 7396 0 1
4480: PPUSH
4481: LD_VAR 0 5
4485: PPUSH
4486: LD_VAR 0 6
4490: PPUSH
4491: CALL_OW 73
4495: ST_TO_ADDR
// if not HexInfo ( x , y ) and CanBeBuilt ( depot , btype , x , y , d ) then
4496: LD_VAR 0 5
4500: PPUSH
4501: LD_VAR 0 6
4505: PPUSH
4506: CALL_OW 428
4510: NOT
4511: PUSH
4512: LD_VAR 0 3
4516: PPUSH
4517: LD_VAR 0 4
4521: PPUSH
4522: LD_VAR 0 5
4526: PPUSH
4527: LD_VAR 0 6
4531: PPUSH
4532: LD_VAR 0 7
4536: PPUSH
4537: CALL 21003 0 5
4541: AND
4542: IFFALSE 4575
// ComBuild ( engs , btype , x , y , d ) else
4544: LD_VAR 0 8
4548: PPUSH
4549: LD_VAR 0 4
4553: PPUSH
4554: LD_VAR 0 5
4558: PPUSH
4559: LD_VAR 0 6
4563: PPUSH
4564: LD_VAR 0 7
4568: PPUSH
4569: CALL_OW 145
4573: GO 4686
// begin if GetType ( HexInfo ( x , y ) ) <> unit_building then
4575: LD_VAR 0 5
4579: PPUSH
4580: LD_VAR 0 6
4584: PPUSH
4585: CALL_OW 428
4589: PPUSH
4590: CALL_OW 247
4594: PUSH
4595: LD_INT 3
4597: NONEQUAL
4598: IFFALSE 4658
// begin TryClearPlaceForBuilding ( btype , x , y , d , mc_buildings [ base ] , engs , mc_parking [ base ] ) ;
4600: LD_VAR 0 4
4604: PPUSH
4605: LD_VAR 0 5
4609: PPUSH
4610: LD_VAR 0 6
4614: PPUSH
4615: LD_VAR 0 7
4619: PPUSH
4620: LD_EXP 10
4624: PUSH
4625: LD_VAR 0 1
4629: ARRAY
4630: PPUSH
4631: LD_VAR 0 8
4635: PPUSH
4636: LD_EXP 28
4640: PUSH
4641: LD_VAR 0 1
4645: ARRAY
4646: PPUSH
4647: CALL 19753 0 7
// wait ( 0 0$10 ) ;
4651: LD_INT 350
4653: PPUSH
4654: CALL_OW 67
// end ; MCTM_DeleteActiveTask ( base , mctm_build ) ;
4658: LD_VAR 0 1
4662: PPUSH
4663: LD_EXP 37
4667: PPUSH
4668: CALL 7869 0 2
// MCT_ResetTag ( base , mctm_build ) ;
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_EXP 37
4681: PPUSH
4682: CALL 6306 0 2
// end ; end ; end ; end_of_file
4686: LD_VAR 0 2
4690: RET
// export mce_start , mce_monitor_base , mce_ ; export function MCE_InitEvents ( ) ; begin
4691: LD_INT 0
4693: PPUSH
// mce_start := 1 ;
4694: LD_ADDR_EXP 1
4698: PUSH
4699: LD_INT 1
4701: ST_TO_ADDR
// mce_monitor_base := 2 ;
4702: LD_ADDR_EXP 2
4706: PUSH
4707: LD_INT 2
4709: ST_TO_ADDR
// end ;
4710: LD_VAR 0 1
4714: RET
// export function MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4715: LD_INT 0
4717: PPUSH
// case event of mce_start :
4718: LD_VAR 0 1
4722: PUSH
4723: LD_EXP 1
4727: DOUBLE
4728: EQUAL
4729: IFTRUE 4733
4731: GO 4740
4733: POP
// MC_Monitor ( ) ; mce_monitor_base :
4734: CALL 2385 0 0
4738: GO 4763
4740: LD_EXP 2
4744: DOUBLE
4745: EQUAL
4746: IFTRUE 4750
4748: GO 4762
4750: POP
// MC_MonitorBase ( p1 ) ; end ;
4751: LD_VAR 0 2
4755: PPUSH
4756: CALL 2509 0 1
4760: GO 4763
4762: POP
// end ;
4763: LD_VAR 0 8
4767: RET
// export function MCE_ClassChanged ( unit , old_class , new_class ) ; begin
4768: LD_INT 0
4770: PPUSH
// SetTag ( unit , mct_none ) ;
4771: LD_VAR 0 1
4775: PPUSH
4776: LD_EXP 31
4780: PPUSH
4781: CALL_OW 109
// end ;
4785: LD_VAR 0 4
4789: RET
// export function MCE_UnitDestroyed ( un ) ; begin
4790: LD_INT 0
4792: PPUSH
// case GetType ( un ) of unit_human :
4793: LD_VAR 0 1
4797: PPUSH
4798: CALL_OW 247
4802: PUSH
4803: LD_INT 1
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4811
4809: GO 4823
4811: POP
// MCE_HumanKilled ( un ) ; unit_building :
4812: LD_VAR 0 1
4816: PPUSH
4817: CALL 4849 0 1
4821: GO 4844
4823: LD_INT 3
4825: DOUBLE
4826: EQUAL
4827: IFTRUE 4831
4829: GO 4843
4831: POP
// MCE_BuildingDestroyed ( un ) ; end ;
4832: LD_VAR 0 1
4836: PPUSH
4837: CALL 5406 0 1
4841: GO 4844
4843: POP
// end ;
4844: LD_VAR 0 2
4848: RET
// export function MCE_HumanKilled ( un ) ; var i ; begin
4849: LD_INT 0
4851: PPUSH
4852: PPUSH
// for i := 1 to mc_people do
4853: LD_ADDR_VAR 0 3
4857: PUSH
4858: DOUBLE
4859: LD_INT 1
4861: DEC
4862: ST_TO_ADDR
4863: LD_EXP 9
4867: PUSH
4868: FOR_TO
4869: IFFALSE 4928
// if un in mc_people [ i ] then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_EXP 9
4880: PUSH
4881: LD_VAR 0 3
4885: ARRAY
4886: IN
4887: IFFALSE 4926
// mc_people := Replace ( mc_people , i , mc_people [ i ] diff un ) ;
4889: LD_ADDR_EXP 9
4893: PUSH
4894: LD_EXP 9
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_EXP 9
4908: PUSH
4909: LD_VAR 0 3
4913: ARRAY
4914: PUSH
4915: LD_VAR 0 1
4919: DIFF
4920: PPUSH
4921: CALL_OW 1
4925: ST_TO_ADDR
4926: GO 4868
4928: POP
4929: POP
// end ;
4930: LD_VAR 0 2
4934: RET
// export function MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ; var base ; begin
4935: LD_INT 0
4937: PPUSH
4938: PPUSH
// if GetTag ( driver ) = mct_collect_crates then
4939: LD_VAR 0 1
4943: PPUSH
4944: CALL_OW 110
4948: PUSH
4949: LD_EXP 34
4953: EQUAL
4954: IFFALSE 5003
// begin base := MC_GetHumanBase ( driver ) ;
4956: LD_ADDR_VAR 0 6
4960: PUSH
4961: LD_VAR 0 1
4965: PPUSH
4966: CALL 6628 0 1
4970: ST_TO_ADDR
// if base then
4971: LD_VAR 0 6
4975: IFFALSE 5003
// begin SetTag ( driver , 0 ) ;
4977: LD_VAR 0 1
4981: PPUSH
4982: LD_INT 0
4984: PPUSH
4985: CALL_OW 109
// MC_Retreat ( base , driver ) ;
4989: LD_VAR 0 6
4993: PPUSH
4994: LD_VAR 0 1
4998: PPUSH
4999: CALL 7659 0 2
// end ; end ; end ;
5003: LD_VAR 0 5
5007: RET
// export function MCE_BuildingComplete ( building ) ; var base , btype , x , y , d ; begin
5008: LD_INT 0
5010: PPUSH
5011: PPUSH
5012: PPUSH
5013: PPUSH
5014: PPUSH
5015: PPUSH
// btype := GetBType ( building ) ;
5016: LD_ADDR_VAR 0 4
5020: PUSH
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 266
5030: ST_TO_ADDR
// x := GetX ( building ) ;
5031: LD_ADDR_VAR 0 5
5035: PUSH
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL_OW 250
5045: ST_TO_ADDR
// y := GetY ( building ) ;
5046: LD_ADDR_VAR 0 6
5050: PUSH
5051: LD_VAR 0 1
5055: PPUSH
5056: CALL_OW 251
5060: ST_TO_ADDR
// d := GetDir ( building ) ;
5061: LD_ADDR_VAR 0 7
5065: PUSH
5066: LD_VAR 0 1
5070: PPUSH
5071: CALL_OW 254
5075: ST_TO_ADDR
// for base = 1 to mc_build_list do
5076: LD_ADDR_VAR 0 3
5080: PUSH
5081: DOUBLE
5082: LD_INT 1
5084: DEC
5085: ST_TO_ADDR
5086: LD_EXP 14
5090: PUSH
5091: FOR_TO
5092: IFFALSE 5399
// begin if not mc_build_list [ base ] then
5094: LD_EXP 14
5098: PUSH
5099: LD_VAR 0 3
5103: ARRAY
5104: NOT
5105: IFFALSE 5109
// continue ;
5107: GO 5091
// if CompareArrayValues ( [ btype , x , y , d ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5109: LD_VAR 0 4
5113: PUSH
5114: LD_VAR 0 5
5118: PUSH
5119: LD_VAR 0 6
5123: PUSH
5124: LD_VAR 0 7
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: PPUSH
5135: LD_EXP 14
5139: PUSH
5140: LD_VAR 0 3
5144: ARRAY
5145: PUSH
5146: LD_INT 1
5148: ARRAY
5149: PPUSH
5150: CALL 19177 0 2
5154: PUSH
5155: LD_VAR 0 1
5159: PPUSH
5160: CALL_OW 255
5164: PUSH
5165: LD_EXP 6
5169: PUSH
5170: LD_VAR 0 3
5174: ARRAY
5175: EQUAL
5176: AND
5177: IFFALSE 5397
// begin if mc_build_list [ base ] [ 1 ] > 4 then
5179: LD_EXP 14
5183: PUSH
5184: LD_VAR 0 3
5188: ARRAY
5189: PUSH
5190: LD_INT 1
5192: ARRAY
5193: PUSH
5194: LD_INT 4
5196: GREATER
5197: IFFALSE 5270
// begin repeat wait ( 0 0$1 ) ;
5199: LD_INT 35
5201: PPUSH
5202: CALL_OW 67
// until not UpgradeCost ( mc_build_list [ base ] [ 1 ] [ 5 ] ) or not IsDead ( building ) ;
5206: LD_EXP 14
5210: PUSH
5211: LD_VAR 0 3
5215: ARRAY
5216: PUSH
5217: LD_INT 1
5219: ARRAY
5220: PUSH
5221: LD_INT 5
5223: ARRAY
5224: PPUSH
5225: CALL 19413 0 1
5229: NOT
5230: PUSH
5231: LD_VAR 0 1
5235: PPUSH
5236: CALL_OW 301
5240: NOT
5241: OR
5242: IFFALSE 5199
// if IsDead ( building ) then
5244: LD_VAR 0 1
5248: PPUSH
5249: CALL_OW 301
5253: IFFALSE 5259
// exit ;
5255: POP
5256: POP
5257: GO 5401
// ComUpgrade ( building ) ;
5259: LD_VAR 0 1
5263: PPUSH
5264: CALL_OW 146
// end else
5268: GO 5309
// mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5270: LD_ADDR_EXP 14
5274: PUSH
5275: LD_EXP 14
5279: PPUSH
5280: LD_VAR 0 3
5284: PPUSH
5285: LD_EXP 14
5289: PUSH
5290: LD_VAR 0 3
5294: ARRAY
5295: PPUSH
5296: LD_INT 1
5298: PPUSH
5299: CALL_OW 3
5303: PPUSH
5304: CALL_OW 1
5308: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , base , Replace ( mc_buildings [ base ] , mc_buildings [ base ] + 1 , building ) ) ;
5309: LD_ADDR_EXP 10
5313: PUSH
5314: LD_EXP 10
5318: PPUSH
5319: LD_VAR 0 3
5323: PPUSH
5324: LD_EXP 10
5328: PUSH
5329: LD_VAR 0 3
5333: ARRAY
5334: PPUSH
5335: LD_EXP 10
5339: PUSH
5340: LD_VAR 0 3
5344: ARRAY
5345: PUSH
5346: LD_INT 1
5348: PLUS
5349: PPUSH
5350: LD_VAR 0 1
5354: PPUSH
5355: CALL_OW 1
5359: PPUSH
5360: CALL_OW 1
5364: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5365: LD_VAR 0 3
5369: PPUSH
5370: LD_EXP 37
5374: PPUSH
5375: CALL 7869 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5379: LD_VAR 0 3
5383: PPUSH
5384: LD_EXP 37
5388: PPUSH
5389: CALL 6306 0 2
// exit ;
5393: POP
5394: POP
5395: GO 5401
// end ; end ;
5397: GO 5091
5399: POP
5400: POP
// end ;
5401: LD_VAR 0 2
5405: RET
// export function MCE_BuildingDestroyed ( building ) ; var base , x , y , d , btype ; begin
5406: LD_INT 0
5408: PPUSH
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
// btype := GetBType ( building ) ;
5414: LD_ADDR_VAR 0 7
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 266
5428: ST_TO_ADDR
// x := GetX ( building ) ;
5429: LD_ADDR_VAR 0 4
5433: PUSH
5434: LD_VAR 0 1
5438: PPUSH
5439: CALL_OW 250
5443: ST_TO_ADDR
// y := GetY ( building ) ;
5444: LD_ADDR_VAR 0 5
5448: PUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 251
5458: ST_TO_ADDR
// d := GetDir ( building ) ;
5459: LD_ADDR_VAR 0 6
5463: PUSH
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL_OW 254
5473: ST_TO_ADDR
// for base := 1 to mc_buildings do
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_EXP 10
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5720
// begin if not mc_buildings [ base ] then
5492: LD_EXP 10
5496: PUSH
5497: LD_VAR 0 3
5501: ARRAY
5502: NOT
5503: IFFALSE 5507
// continue ;
5505: GO 5489
// if building in mc_buildings [ base ] then
5507: LD_VAR 0 1
5511: PUSH
5512: LD_EXP 10
5516: PUSH
5517: LD_VAR 0 3
5521: ARRAY
5522: IN
5523: IFFALSE 5718
// begin mc_buildings := Replace ( mc_buildings , base , mc_buildings [ base ] diff building ) ;
5525: LD_ADDR_EXP 10
5529: PUSH
5530: LD_EXP 10
5534: PPUSH
5535: LD_VAR 0 3
5539: PPUSH
5540: LD_EXP 10
5544: PUSH
5545: LD_VAR 0 3
5549: ARRAY
5550: PUSH
5551: LD_VAR 0 1
5555: DIFF
5556: PPUSH
5557: CALL_OW 1
5561: ST_TO_ADDR
// if mc_build_list [ base ] then
5562: LD_EXP 14
5566: PUSH
5567: LD_VAR 0 3
5571: ARRAY
5572: IFFALSE 5656
// if mc_build_list [ base ] [ 1 ] [ 1 ] = btype and mc_build_list [ base ] [ 1 ] [ 2 ] = x and mc_build_list [ base ] [ 1 ] [ 3 ] = y then
5574: LD_EXP 14
5578: PUSH
5579: LD_VAR 0 3
5583: ARRAY
5584: PUSH
5585: LD_INT 1
5587: ARRAY
5588: PUSH
5589: LD_INT 1
5591: ARRAY
5592: PUSH
5593: LD_VAR 0 7
5597: EQUAL
5598: PUSH
5599: LD_EXP 14
5603: PUSH
5604: LD_VAR 0 3
5608: ARRAY
5609: PUSH
5610: LD_INT 1
5612: ARRAY
5613: PUSH
5614: LD_INT 2
5616: ARRAY
5617: PUSH
5618: LD_VAR 0 4
5622: EQUAL
5623: AND
5624: PUSH
5625: LD_EXP 14
5629: PUSH
5630: LD_VAR 0 3
5634: ARRAY
5635: PUSH
5636: LD_INT 1
5638: ARRAY
5639: PUSH
5640: LD_INT 3
5642: ARRAY
5643: PUSH
5644: LD_VAR 0 5
5648: EQUAL
5649: AND
5650: IFFALSE 5656
// exit ;
5652: POP
5653: POP
5654: GO 5722
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] ^ [ btype , x , y , d ] ) ;
5656: LD_ADDR_EXP 14
5660: PUSH
5661: LD_EXP 14
5665: PPUSH
5666: LD_VAR 0 3
5670: PPUSH
5671: LD_EXP 14
5675: PUSH
5676: LD_VAR 0 3
5680: ARRAY
5681: PUSH
5682: LD_VAR 0 7
5686: PUSH
5687: LD_VAR 0 4
5691: PUSH
5692: LD_VAR 0 5
5696: PUSH
5697: LD_VAR 0 6
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: ADD
5708: PPUSH
5709: CALL_OW 1
5713: ST_TO_ADDR
// exit ;
5714: POP
5715: POP
5716: GO 5722
// end ; end ;
5718: GO 5489
5720: POP
5721: POP
// end ;
5722: LD_VAR 0 2
5726: RET
// export function MCE_BuildingUpgradeComplete ( building ) ; var base , btype , x , y , d ; begin
5727: LD_INT 0
5729: PPUSH
5730: PPUSH
5731: PPUSH
5732: PPUSH
5733: PPUSH
5734: PPUSH
// btype := GetBType ( building ) ;
5735: LD_ADDR_VAR 0 4
5739: PUSH
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 266
5749: ST_TO_ADDR
// x := GetX ( building ) ;
5750: LD_ADDR_VAR 0 5
5754: PUSH
5755: LD_VAR 0 1
5759: PPUSH
5760: CALL_OW 250
5764: ST_TO_ADDR
// y := GetY ( building ) ;
5765: LD_ADDR_VAR 0 6
5769: PUSH
5770: LD_VAR 0 1
5774: PPUSH
5775: CALL_OW 251
5779: ST_TO_ADDR
// d := GetDir ( building ) ;
5780: LD_ADDR_VAR 0 7
5784: PUSH
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 254
5794: ST_TO_ADDR
// for base = 1 to mc_build_list do
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: DOUBLE
5801: LD_INT 1
5803: DEC
5804: ST_TO_ADDR
5805: LD_EXP 14
5809: PUSH
5810: FOR_TO
5811: IFFALSE 5981
// begin if not mc_build_list [ base ] then
5813: LD_EXP 14
5817: PUSH
5818: LD_VAR 0 3
5822: ARRAY
5823: NOT
5824: IFFALSE 5828
// continue ;
5826: GO 5810
// if CompareArrayValues ( [ btype - 1 , x , y , d , btype ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5828: LD_VAR 0 4
5832: PUSH
5833: LD_INT 1
5835: MINUS
5836: PUSH
5837: LD_VAR 0 5
5841: PUSH
5842: LD_VAR 0 6
5846: PUSH
5847: LD_VAR 0 7
5851: PUSH
5852: LD_VAR 0 4
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: PPUSH
5864: LD_EXP 14
5868: PUSH
5869: LD_VAR 0 3
5873: ARRAY
5874: PUSH
5875: LD_INT 1
5877: ARRAY
5878: PPUSH
5879: CALL 19177 0 2
5883: PUSH
5884: LD_VAR 0 1
5888: PPUSH
5889: CALL_OW 255
5893: PUSH
5894: LD_EXP 6
5898: PUSH
5899: LD_VAR 0 3
5903: ARRAY
5904: EQUAL
5905: AND
5906: IFFALSE 5979
// begin mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5908: LD_ADDR_EXP 14
5912: PUSH
5913: LD_EXP 14
5917: PPUSH
5918: LD_VAR 0 3
5922: PPUSH
5923: LD_EXP 14
5927: PUSH
5928: LD_VAR 0 3
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 3
5941: PPUSH
5942: CALL_OW 1
5946: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5947: LD_VAR 0 3
5951: PPUSH
5952: LD_EXP 37
5956: PPUSH
5957: CALL 7869 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5961: LD_VAR 0 3
5965: PPUSH
5966: LD_EXP 37
5970: PPUSH
5971: CALL 6306 0 2
// exit ;
5975: POP
5976: POP
5977: GO 5983
// end ; end ;
5979: GO 5810
5981: POP
5982: POP
// end ; end_of_file
5983: LD_VAR 0 2
5987: RET
// export mc_active , mc_debug , mc_bases , mc_tag , mc_task , mc_people , mc_buildings , mc_vehicles , mc_mines , mc_minefields , mc_build_list , mc_produce_list , mc_defense_status , mc_defender , mc_defender_limit , mc_ape , mc_tech , mc_attack , mc_deposits_xy , mc_can_tame , mc_lab_upgrade , mc_crates_area , mc_teleport_exit , mc_allowed_tower_weapons , mc_parking , mc_scan_area , mc_danger ; export function MC_InitVariables ( ) ; begin
5988: LD_INT 0
5990: PPUSH
// mc_bases := [ ] ;
5991: LD_ADDR_EXP 6
5995: PUSH
5996: EMPTY
5997: ST_TO_ADDR
// mc_tag := [ ] ;
5998: LD_ADDR_EXP 7
6002: PUSH
6003: EMPTY
6004: ST_TO_ADDR
// mc_task := [ ] ;
6005: LD_ADDR_EXP 8
6009: PUSH
6010: EMPTY
6011: ST_TO_ADDR
// mc_people := [ ] ;
6012: LD_ADDR_EXP 9
6016: PUSH
6017: EMPTY
6018: ST_TO_ADDR
// mc_buildings := [ ] ;
6019: LD_ADDR_EXP 10
6023: PUSH
6024: EMPTY
6025: ST_TO_ADDR
// mc_vehicles := [ ] ;
6026: LD_ADDR_EXP 11
6030: PUSH
6031: EMPTY
6032: ST_TO_ADDR
// mc_mines := [ ] ;
6033: LD_ADDR_EXP 12
6037: PUSH
6038: EMPTY
6039: ST_TO_ADDR
// mc_minefields := [ ] ;
6040: LD_ADDR_EXP 13
6044: PUSH
6045: EMPTY
6046: ST_TO_ADDR
// mc_build_list := [ ] ;
6047: LD_ADDR_EXP 14
6051: PUSH
6052: EMPTY
6053: ST_TO_ADDR
// mc_produce_list := [ ] ;
6054: LD_ADDR_EXP 15
6058: PUSH
6059: EMPTY
6060: ST_TO_ADDR
// mc_defense_status := [ ] ;
6061: LD_ADDR_EXP 16
6065: PUSH
6066: EMPTY
6067: ST_TO_ADDR
// mc_defender := [ ] ;
6068: LD_ADDR_EXP 17
6072: PUSH
6073: EMPTY
6074: ST_TO_ADDR
// mc_defender_limit := [ ] ;
6075: LD_ADDR_EXP 18
6079: PUSH
6080: EMPTY
6081: ST_TO_ADDR
// mc_ape := [ ] ;
6082: LD_ADDR_EXP 19
6086: PUSH
6087: EMPTY
6088: ST_TO_ADDR
// mc_tech := [ ] ;
6089: LD_ADDR_EXP 20
6093: PUSH
6094: EMPTY
6095: ST_TO_ADDR
// mc_attack := [ ] ;
6096: LD_ADDR_EXP 21
6100: PUSH
6101: EMPTY
6102: ST_TO_ADDR
// mc_deposits_xy := [ ] ;
6103: LD_ADDR_EXP 22
6107: PUSH
6108: EMPTY
6109: ST_TO_ADDR
// mc_can_tame := [ ] ;
6110: LD_ADDR_EXP 23
6114: PUSH
6115: EMPTY
6116: ST_TO_ADDR
// mc_crates_area := [ ] ;
6117: LD_ADDR_EXP 25
6121: PUSH
6122: EMPTY
6123: ST_TO_ADDR
// mc_teleport_exit := [ ] ;
6124: LD_ADDR_EXP 26
6128: PUSH
6129: EMPTY
6130: ST_TO_ADDR
// mc_allowed_tower_weapons := [ ] ;
6131: LD_ADDR_EXP 27
6135: PUSH
6136: EMPTY
6137: ST_TO_ADDR
// mc_parking := [ ] ;
6138: LD_ADDR_EXP 28
6142: PUSH
6143: EMPTY
6144: ST_TO_ADDR
// mc_scan_area := [ ] ;
6145: LD_ADDR_EXP 29
6149: PUSH
6150: EMPTY
6151: ST_TO_ADDR
// mc_danger := [ ] ;
6152: LD_ADDR_EXP 30
6156: PUSH
6157: EMPTY
6158: ST_TO_ADDR
// end ; end_of_file
6159: LD_VAR 0 1
6163: RET
// export mct_none , mct_change_class , mct_build , mct_collect_crates , mct_heal ; export function MCT_InitTags ; begin
6164: LD_INT 0
6166: PPUSH
// mct_none := 0 ;
6167: LD_ADDR_EXP 31
6171: PUSH
6172: LD_INT 0
6174: ST_TO_ADDR
// mct_change_class := 1 ;
6175: LD_ADDR_EXP 32
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// mct_build := 2 ;
6183: LD_ADDR_EXP 33
6187: PUSH
6188: LD_INT 2
6190: ST_TO_ADDR
// mct_collect_crates := 3 ;
6191: LD_ADDR_EXP 34
6195: PUSH
6196: LD_INT 3
6198: ST_TO_ADDR
// mct_heal := 4 ;
6199: LD_ADDR_EXP 35
6203: PUSH
6204: LD_INT 4
6206: ST_TO_ADDR
// end ;
6207: LD_VAR 0 1
6211: RET
// export function MCT_GetByTag ( base , tag ) ; var i ; begin
6212: LD_INT 0
6214: PPUSH
6215: PPUSH
// result := [ ] ;
6216: LD_ADDR_VAR 0 3
6220: PUSH
6221: EMPTY
6222: ST_TO_ADDR
// if not base then
6223: LD_VAR 0 1
6227: NOT
6228: IFFALSE 6232
// exit ;
6230: GO 6301
// for i in mc_people [ base ] do
6232: LD_ADDR_VAR 0 4
6236: PUSH
6237: LD_EXP 9
6241: PUSH
6242: LD_VAR 0 1
6246: ARRAY
6247: PUSH
6248: FOR_IN
6249: IFFALSE 6299
// if GetTag ( i ) = tag then
6251: LD_VAR 0 4
6255: PPUSH
6256: CALL_OW 110
6260: PUSH
6261: LD_VAR 0 2
6265: EQUAL
6266: IFFALSE 6297
// result := Replace ( result , result + 1 , i ) ;
6268: LD_ADDR_VAR 0 3
6272: PUSH
6273: LD_VAR 0 3
6277: PPUSH
6278: LD_VAR 0 3
6282: PUSH
6283: LD_INT 1
6285: PLUS
6286: PPUSH
6287: LD_VAR 0 4
6291: PPUSH
6292: CALL_OW 1
6296: ST_TO_ADDR
6297: GO 6248
6299: POP
6300: POP
// end ;
6301: LD_VAR 0 3
6305: RET
// export function MCT_ResetTag ( base , tag ) ; var i ; begin
6306: LD_INT 0
6308: PPUSH
6309: PPUSH
// result := MCT_GetByTag ( base , tag ) ;
6310: LD_ADDR_VAR 0 3
6314: PUSH
6315: LD_VAR 0 1
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL 6212 0 2
6329: ST_TO_ADDR
// if result then
6330: LD_VAR 0 3
6334: IFFALSE 6367
// for i in result do
6336: LD_ADDR_VAR 0 4
6340: PUSH
6341: LD_VAR 0 3
6345: PUSH
6346: FOR_IN
6347: IFFALSE 6365
// SetTag ( i , mct_none ) ;
6349: LD_VAR 0 4
6353: PPUSH
6354: LD_EXP 31
6358: PPUSH
6359: CALL_OW 109
6363: GO 6346
6365: POP
6366: POP
// end ;
6367: LD_VAR 0 3
6371: RET
// export function MCT_SetTag ( units , tag ) ; var i ; begin
6372: LD_INT 0
6374: PPUSH
6375: PPUSH
// if not units then
6376: LD_VAR 0 1
6380: NOT
6381: IFFALSE 6385
// exit ;
6383: GO 6416
// for i in units do
6385: LD_ADDR_VAR 0 4
6389: PUSH
6390: LD_VAR 0 1
6394: PUSH
6395: FOR_IN
6396: IFFALSE 6414
// SetTag ( i , tag ) ;
6398: LD_VAR 0 4
6402: PPUSH
6403: LD_VAR 0 2
6407: PPUSH
6408: CALL_OW 109
6412: GO 6395
6414: POP
6415: POP
// end ; end_of_file
6416: LD_VAR 0 3
6420: RET
// export function MC_Exist ( base ) ; begin
6421: LD_INT 0
6423: PPUSH
// result := mc_bases >= base and mc_bases [ base ] > 0 ;
6424: LD_ADDR_VAR 0 2
6428: PUSH
6429: LD_EXP 6
6433: PUSH
6434: LD_VAR 0 1
6438: GREATEREQUAL
6439: PUSH
6440: LD_EXP 6
6444: PUSH
6445: LD_VAR 0 1
6449: ARRAY
6450: PUSH
6451: LD_INT 0
6453: GREATER
6454: AND
6455: ST_TO_ADDR
// end ;
6456: LD_VAR 0 2
6460: RET
// export function MC_GetBestForClass ( base , class , amount ) ; var i , units ; begin
6461: LD_INT 0
6463: PPUSH
6464: PPUSH
6465: PPUSH
// result := [ ] ;
6466: LD_ADDR_VAR 0 4
6470: PUSH
6471: EMPTY
6472: ST_TO_ADDR
// units := SortBySkill ( UnitFilter ( mc_people [ base ] , [ f_not , [ f_class , class ] ] ) , class ) ;
6473: LD_ADDR_VAR 0 6
6477: PUSH
6478: LD_EXP 9
6482: PUSH
6483: LD_VAR 0 1
6487: ARRAY
6488: PPUSH
6489: LD_INT 3
6491: PUSH
6492: LD_INT 25
6494: PUSH
6495: LD_VAR 0 2
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PPUSH
6508: CALL_OW 72
6512: PPUSH
6513: LD_VAR 0 2
6517: PPUSH
6518: CALL 43157 0 2
6522: ST_TO_ADDR
// if not units then
6523: LD_VAR 0 6
6527: NOT
6528: IFFALSE 6532
// exit ;
6530: GO 6623
// for i := 1 to amount do
6532: LD_ADDR_VAR 0 5
6536: PUSH
6537: DOUBLE
6538: LD_INT 1
6540: DEC
6541: ST_TO_ADDR
6542: LD_VAR 0 3
6546: PUSH
6547: FOR_TO
6548: IFFALSE 6621
// begin if i > units then
6550: LD_VAR 0 5
6554: PUSH
6555: LD_VAR 0 6
6559: GREATER
6560: IFFALSE 6566
// exit ;
6562: POP
6563: POP
6564: GO 6623
// if not GetTag ( units [ i ] ) then
6566: LD_VAR 0 6
6570: PUSH
6571: LD_VAR 0 5
6575: ARRAY
6576: PPUSH
6577: CALL_OW 110
6581: NOT
6582: IFFALSE 6619
// result := Replace ( result , result + 1 , units [ i ] ) ;
6584: LD_ADDR_VAR 0 4
6588: PUSH
6589: LD_VAR 0 4
6593: PPUSH
6594: LD_VAR 0 4
6598: PUSH
6599: LD_INT 1
6601: PLUS
6602: PPUSH
6603: LD_VAR 0 6
6607: PUSH
6608: LD_VAR 0 5
6612: ARRAY
6613: PPUSH
6614: CALL_OW 1
6618: ST_TO_ADDR
// end ;
6619: GO 6547
6621: POP
6622: POP
// end ;
6623: LD_VAR 0 4
6627: RET
// export function MC_GetHumanBase ( human ) ; var i ; begin
6628: LD_INT 0
6630: PPUSH
6631: PPUSH
// for i := 1 to mc_people do
6632: LD_ADDR_VAR 0 3
6636: PUSH
6637: DOUBLE
6638: LD_INT 1
6640: DEC
6641: ST_TO_ADDR
6642: LD_EXP 9
6646: PUSH
6647: FOR_TO
6648: IFFALSE 6684
// if human in mc_people [ i ] then
6650: LD_VAR 0 1
6654: PUSH
6655: LD_EXP 9
6659: PUSH
6660: LD_VAR 0 3
6664: ARRAY
6665: IN
6666: IFFALSE 6682
// begin result := i ;
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: LD_VAR 0 3
6677: ST_TO_ADDR
// exit ;
6678: POP
6679: POP
6680: GO 6686
// end ;
6682: GO 6647
6684: POP
6685: POP
// end ;
6686: LD_VAR 0 2
6690: RET
// export function MC_ChangeClass ( base , class , units ) ; var i , buildings , b ; begin
6691: LD_INT 0
6693: PPUSH
6694: PPUSH
6695: PPUSH
6696: PPUSH
// if not base or not units then
6697: LD_VAR 0 1
6701: NOT
6702: PUSH
6703: LD_VAR 0 3
6707: NOT
6708: OR
6709: IFFALSE 6713
// exit ;
6711: GO 7194
// case class of 1 , 5 , 6 , 7 , 8 :
6713: LD_VAR 0 2
6717: PUSH
6718: LD_INT 1
6720: DOUBLE
6721: EQUAL
6722: IFTRUE 6750
6724: LD_INT 5
6726: DOUBLE
6727: EQUAL
6728: IFTRUE 6750
6730: LD_INT 6
6732: DOUBLE
6733: EQUAL
6734: IFTRUE 6750
6736: LD_INT 7
6738: DOUBLE
6739: EQUAL
6740: IFTRUE 6750
6742: LD_INT 8
6744: DOUBLE
6745: EQUAL
6746: IFTRUE 6750
6748: GO 6802
6750: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
6751: LD_ADDR_VAR 0 6
6755: PUSH
6756: LD_EXP 10
6760: PUSH
6761: LD_VAR 0 1
6765: ARRAY
6766: PPUSH
6767: LD_INT 2
6769: PUSH
6770: LD_INT 30
6772: PUSH
6773: LD_INT 4
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 30
6782: PUSH
6783: LD_INT 5
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: ST_TO_ADDR
6800: GO 6994
6802: LD_INT 2
6804: DOUBLE
6805: EQUAL
6806: IFTRUE 6810
6808: GO 6862
6810: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
6811: LD_ADDR_VAR 0 6
6815: PUSH
6816: LD_EXP 10
6820: PUSH
6821: LD_VAR 0 1
6825: ARRAY
6826: PPUSH
6827: LD_INT 2
6829: PUSH
6830: LD_INT 30
6832: PUSH
6833: LD_INT 0
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 30
6842: PUSH
6843: LD_INT 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 72
6859: ST_TO_ADDR
6860: GO 6994
6862: LD_INT 3
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 6922
6870: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
6871: LD_ADDR_VAR 0 6
6875: PUSH
6876: LD_EXP 10
6880: PUSH
6881: LD_VAR 0 1
6885: ARRAY
6886: PPUSH
6887: LD_INT 2
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 2
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 30
6902: PUSH
6903: LD_INT 3
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: PPUSH
6915: CALL_OW 72
6919: ST_TO_ADDR
6920: GO 6994
6922: LD_INT 4
6924: DOUBLE
6925: EQUAL
6926: IFTRUE 6930
6928: GO 6993
6930: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
6931: LD_ADDR_VAR 0 6
6935: PUSH
6936: LD_EXP 10
6940: PUSH
6941: LD_VAR 0 1
6945: ARRAY
6946: PPUSH
6947: LD_INT 2
6949: PUSH
6950: LD_INT 30
6952: PUSH
6953: LD_INT 6
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 30
6962: PUSH
6963: LD_INT 7
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 30
6972: PUSH
6973: LD_INT 8
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 72
6990: ST_TO_ADDR
6991: GO 6994
6993: POP
// if not buildings then
6994: LD_VAR 0 6
6998: NOT
6999: IFFALSE 7003
// exit ;
7001: GO 7194
// for i := 1 to units do
7003: LD_ADDR_VAR 0 5
7007: PUSH
7008: DOUBLE
7009: LD_INT 1
7011: DEC
7012: ST_TO_ADDR
7013: LD_VAR 0 3
7017: PUSH
7018: FOR_TO
7019: IFFALSE 7192
// begin if GetClass ( units [ i ] ) = class then
7021: LD_VAR 0 3
7025: PUSH
7026: LD_VAR 0 5
7030: ARRAY
7031: PPUSH
7032: CALL_OW 257
7036: PUSH
7037: LD_VAR 0 2
7041: EQUAL
7042: IFFALSE 7046
// continue ;
7044: GO 7018
// SetTag ( units [ i ] , mct_change_class ) ;
7046: LD_VAR 0 3
7050: PUSH
7051: LD_VAR 0 5
7055: ARRAY
7056: PPUSH
7057: LD_EXP 32
7061: PPUSH
7062: CALL_OW 109
// if buildings > i div 6 then
7066: LD_VAR 0 6
7070: PUSH
7071: LD_VAR 0 5
7075: PUSH
7076: LD_INT 6
7078: DIV
7079: GREATER
7080: IFFALSE 7104
// b := buildings [ i div 6 ] else
7082: LD_ADDR_VAR 0 7
7086: PUSH
7087: LD_VAR 0 6
7091: PUSH
7092: LD_VAR 0 5
7096: PUSH
7097: LD_INT 6
7099: DIV
7100: ARRAY
7101: ST_TO_ADDR
7102: GO 7118
// b := buildings [ 1 ] ;
7104: LD_ADDR_VAR 0 7
7108: PUSH
7109: LD_VAR 0 6
7113: PUSH
7114: LD_INT 1
7116: ARRAY
7117: ST_TO_ADDR
// if IsInUnit ( units [ i ] ) then
7118: LD_VAR 0 3
7122: PUSH
7123: LD_VAR 0 5
7127: ARRAY
7128: PPUSH
7129: CALL_OW 310
7133: IFFALSE 7150
// ComExit ( units [ i ] ) ;
7135: LD_VAR 0 3
7139: PUSH
7140: LD_VAR 0 5
7144: ARRAY
7145: PPUSH
7146: CALL 45039 0 1
// AddComEnterUnit ( units [ i ] , b ) ;
7150: LD_VAR 0 3
7154: PUSH
7155: LD_VAR 0 5
7159: ARRAY
7160: PPUSH
7161: LD_VAR 0 7
7165: PPUSH
7166: CALL_OW 180
// AddComChangeProfession ( units [ i ] , class ) ;
7170: LD_VAR 0 3
7174: PUSH
7175: LD_VAR 0 5
7179: ARRAY
7180: PPUSH
7181: LD_VAR 0 2
7185: PPUSH
7186: CALL_OW 183
// end ;
7190: GO 7018
7192: POP
7193: POP
// end ;
7194: LD_VAR 0 4
7198: RET
// export function MC_GetByClass ( base , class , tag ) ; var i ; begin
7199: LD_INT 0
7201: PPUSH
7202: PPUSH
// result := UnitFilter ( mc_people [ base ] , [ f_class , class ] ) ;
7203: LD_ADDR_VAR 0 4
7207: PUSH
7208: LD_EXP 9
7212: PUSH
7213: LD_VAR 0 1
7217: ARRAY
7218: PPUSH
7219: LD_INT 25
7221: PUSH
7222: LD_VAR 0 2
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PPUSH
7231: CALL_OW 72
7235: ST_TO_ADDR
// if tag > - 1 then
7236: LD_VAR 0 3
7240: PUSH
7241: LD_INT 1
7243: NEG
7244: GREATER
7245: IFFALSE 7297
// for i in result do
7247: LD_ADDR_VAR 0 5
7251: PUSH
7252: LD_VAR 0 4
7256: PUSH
7257: FOR_IN
7258: IFFALSE 7295
// if GetTag ( i ) <> tag then
7260: LD_VAR 0 5
7264: PPUSH
7265: CALL_OW 110
7269: PUSH
7270: LD_VAR 0 3
7274: NONEQUAL
7275: IFFALSE 7293
// result := result diff i ;
7277: LD_ADDR_VAR 0 4
7281: PUSH
7282: LD_VAR 0 4
7286: PUSH
7287: LD_VAR 0 5
7291: DIFF
7292: ST_TO_ADDR
7293: GO 7257
7295: POP
7296: POP
// end ;
7297: LD_VAR 0 4
7301: RET
// export function MC_GetOneByClass ( base , class , tag ) ; begin
7302: LD_INT 0
7304: PPUSH
// result := MC_GetByClass ( base , class , tag ) ;
7305: LD_ADDR_VAR 0 4
7309: PUSH
7310: LD_VAR 0 1
7314: PPUSH
7315: LD_VAR 0 2
7319: PPUSH
7320: LD_VAR 0 3
7324: PPUSH
7325: CALL 7199 0 3
7329: ST_TO_ADDR
// if result then
7330: LD_VAR 0 4
7334: IFFALSE 7350
// result := result [ 1 ] ;
7336: LD_ADDR_VAR 0 4
7340: PUSH
7341: LD_VAR 0 4
7345: PUSH
7346: LD_INT 1
7348: ARRAY
7349: ST_TO_ADDR
// end ;
7350: LD_VAR 0 4
7354: RET
// export function MC_GetBuilding ( base , btype ) ; begin
7355: LD_INT 0
7357: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_btype , btype ] ) ;
7358: LD_ADDR_VAR 0 3
7362: PUSH
7363: LD_EXP 10
7367: PUSH
7368: LD_VAR 0 1
7372: ARRAY
7373: PPUSH
7374: LD_INT 30
7376: PUSH
7377: LD_VAR 0 2
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 72
7390: ST_TO_ADDR
// end ;
7391: LD_VAR 0 3
7395: RET
// export function MC_GetDepot ( base ) ; begin
7396: LD_INT 0
7398: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
7399: LD_ADDR_VAR 0 2
7403: PUSH
7404: LD_EXP 10
7408: PUSH
7409: LD_VAR 0 1
7413: ARRAY
7414: PPUSH
7415: LD_INT 2
7417: PUSH
7418: LD_INT 30
7420: PUSH
7421: LD_INT 0
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 1
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: PPUSH
7443: CALL_OW 72
7447: ST_TO_ADDR
// end ;
7448: LD_VAR 0 2
7452: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
7453: LD_INT 0
7455: PPUSH
// result := mc_vehicles [ base ] ;
7456: LD_ADDR_VAR 0 3
7460: PUSH
7461: LD_EXP 11
7465: PUSH
7466: LD_VAR 0 1
7470: ARRAY
7471: ST_TO_ADDR
// if onlyCombat then
7472: LD_VAR 0 2
7476: IFFALSE 7654
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_VAR 0 3
7487: PUSH
7488: LD_VAR 0 3
7492: PPUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 34
7498: PUSH
7499: LD_INT 12
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 34
7508: PUSH
7509: LD_INT 51
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 34
7518: PUSH
7519: LD_EXP 40
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 34
7530: PUSH
7531: LD_INT 32
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 34
7540: PUSH
7541: LD_INT 13
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 34
7550: PUSH
7551: LD_INT 52
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 34
7560: PUSH
7561: LD_EXP 45
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 34
7572: PUSH
7573: LD_INT 14
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PUSH
7580: LD_INT 34
7582: PUSH
7583: LD_INT 53
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 34
7592: PUSH
7593: LD_EXP 39
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 34
7604: PUSH
7605: LD_INT 31
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 34
7614: PUSH
7615: LD_INT 48
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 34
7624: PUSH
7625: LD_INT 8
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 72
7652: DIFF
7653: ST_TO_ADDR
// end ;
7654: LD_VAR 0 3
7658: RET
// export function MC_Retreat ( base , unit ) ; var depot ; begin
7659: LD_INT 0
7661: PPUSH
7662: PPUSH
// if not base or not unit then
7663: LD_VAR 0 1
7667: NOT
7668: PUSH
7669: LD_VAR 0 2
7673: NOT
7674: OR
7675: IFFALSE 7679
// exit ;
7677: GO 7746
// depot := NearestUnitToUnit ( MC_GetDepot ( base ) , unit ) ;
7679: LD_ADDR_VAR 0 4
7683: PUSH
7684: LD_VAR 0 1
7688: PPUSH
7689: CALL 7396 0 1
7693: PPUSH
7694: LD_VAR 0 2
7698: PPUSH
7699: CALL_OW 74
7703: ST_TO_ADDR
// if depot then
7704: LD_VAR 0 4
7708: IFFALSE 7726
// ComStandNearbyBuilding ( unit , depot ) else
7710: LD_VAR 0 2
7714: PPUSH
7715: LD_VAR 0 4
7719: PPUSH
7720: CALL 9478 0 2
7724: GO 7746
// ComMoveToArea ( unit , mc_scan_area [ base ] ) ;
7726: LD_VAR 0 2
7730: PPUSH
7731: LD_EXP 29
7735: PUSH
7736: LD_VAR 0 1
7740: ARRAY
7741: PPUSH
7742: CALL_OW 113
// end ; end_of_file
7746: LD_VAR 0 3
7750: RET
// export mctm_collect_crates , mctm_build , mctm_ ; export function MCTM_InitTaskManager ( ) ; begin
7751: LD_INT 0
7753: PPUSH
// mctm_collect_crates := 1 ;
7754: LD_ADDR_EXP 36
7758: PUSH
7759: LD_INT 1
7761: ST_TO_ADDR
// mctm_build := 2 ;
7762: LD_ADDR_EXP 37
7766: PUSH
7767: LD_INT 2
7769: ST_TO_ADDR
// end ;
7770: LD_VAR 0 1
7774: RET
// export function MCTM_HasActiveTask ( base , task ) ; begin
7775: LD_INT 0
7777: PPUSH
// result := task in mc_task [ base ] ;
7778: LD_ADDR_VAR 0 3
7782: PUSH
7783: LD_VAR 0 2
7787: PUSH
7788: LD_EXP 8
7792: PUSH
7793: LD_VAR 0 1
7797: ARRAY
7798: IN
7799: ST_TO_ADDR
// end ;
7800: LD_VAR 0 3
7804: RET
// export function MCTM_SetActiveTask ( base , task ) ; begin
7805: LD_INT 0
7807: PPUSH
// mc_task := Replace ( mc_task , base , Replace ( mc_task [ base ] , mc_task [ base ] + 1 , task ) ) ;
7808: LD_ADDR_EXP 8
7812: PUSH
7813: LD_EXP 8
7817: PPUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: LD_EXP 8
7827: PUSH
7828: LD_VAR 0 1
7832: ARRAY
7833: PPUSH
7834: LD_EXP 8
7838: PUSH
7839: LD_VAR 0 1
7843: ARRAY
7844: PUSH
7845: LD_INT 1
7847: PLUS
7848: PPUSH
7849: LD_VAR 0 2
7853: PPUSH
7854: CALL_OW 1
7858: PPUSH
7859: CALL_OW 1
7863: ST_TO_ADDR
// end ;
7864: LD_VAR 0 3
7868: RET
// export function MCTM_DeleteActiveTask ( base , task ) ; begin
7869: LD_INT 0
7871: PPUSH
// mc_task := Replace ( mc_task , base , mc_task [ base ] diff task ) ;
7872: LD_ADDR_EXP 8
7876: PUSH
7877: LD_EXP 8
7881: PPUSH
7882: LD_VAR 0 1
7886: PPUSH
7887: LD_EXP 8
7891: PUSH
7892: LD_VAR 0 1
7896: ARRAY
7897: PUSH
7898: LD_VAR 0 2
7902: DIFF
7903: PPUSH
7904: CALL_OW 1
7908: ST_TO_ADDR
// end ; end_of_file
7909: LD_VAR 0 3
7913: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
7914: LD_INT 0
7916: PPUSH
7917: PPUSH
// if exist_mode then
7918: LD_VAR 0 2
7922: IFFALSE 7947
// unit := CreateCharacter ( prefix & ident ) else
7924: LD_ADDR_VAR 0 5
7928: PUSH
7929: LD_VAR 0 3
7933: PUSH
7934: LD_VAR 0 1
7938: STR
7939: PPUSH
7940: CALL_OW 34
7944: ST_TO_ADDR
7945: GO 7962
// unit := NewCharacter ( ident ) ;
7947: LD_ADDR_VAR 0 5
7951: PUSH
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 25
7961: ST_TO_ADDR
// result := unit ;
7962: LD_ADDR_VAR 0 4
7966: PUSH
7967: LD_VAR 0 5
7971: ST_TO_ADDR
// end ;
7972: LD_VAR 0 4
7976: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
7977: LD_INT 0
7979: PPUSH
7980: PPUSH
// if not side or not nation then
7981: LD_VAR 0 1
7985: NOT
7986: PUSH
7987: LD_VAR 0 2
7991: NOT
7992: OR
7993: IFFALSE 7997
// exit ;
7995: GO 8765
// case nation of nation_american :
7997: LD_VAR 0 2
8001: PUSH
8002: LD_INT 1
8004: DOUBLE
8005: EQUAL
8006: IFTRUE 8010
8008: GO 8224
8010: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8011: LD_ADDR_VAR 0 4
8015: PUSH
8016: LD_INT 35
8018: PUSH
8019: LD_INT 45
8021: PUSH
8022: LD_INT 46
8024: PUSH
8025: LD_INT 47
8027: PUSH
8028: LD_INT 82
8030: PUSH
8031: LD_INT 83
8033: PUSH
8034: LD_INT 84
8036: PUSH
8037: LD_INT 85
8039: PUSH
8040: LD_INT 86
8042: PUSH
8043: LD_INT 1
8045: PUSH
8046: LD_INT 2
8048: PUSH
8049: LD_INT 6
8051: PUSH
8052: LD_INT 15
8054: PUSH
8055: LD_INT 16
8057: PUSH
8058: LD_INT 7
8060: PUSH
8061: LD_INT 12
8063: PUSH
8064: LD_INT 13
8066: PUSH
8067: LD_INT 10
8069: PUSH
8070: LD_INT 14
8072: PUSH
8073: LD_INT 20
8075: PUSH
8076: LD_INT 21
8078: PUSH
8079: LD_INT 22
8081: PUSH
8082: LD_INT 25
8084: PUSH
8085: LD_INT 32
8087: PUSH
8088: LD_INT 27
8090: PUSH
8091: LD_INT 36
8093: PUSH
8094: LD_INT 69
8096: PUSH
8097: LD_INT 39
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 40
8105: PUSH
8106: LD_INT 48
8108: PUSH
8109: LD_INT 49
8111: PUSH
8112: LD_INT 50
8114: PUSH
8115: LD_INT 51
8117: PUSH
8118: LD_INT 52
8120: PUSH
8121: LD_INT 53
8123: PUSH
8124: LD_INT 54
8126: PUSH
8127: LD_INT 55
8129: PUSH
8130: LD_INT 56
8132: PUSH
8133: LD_INT 57
8135: PUSH
8136: LD_INT 58
8138: PUSH
8139: LD_INT 59
8141: PUSH
8142: LD_INT 60
8144: PUSH
8145: LD_INT 61
8147: PUSH
8148: LD_INT 62
8150: PUSH
8151: LD_INT 80
8153: PUSH
8154: LD_INT 82
8156: PUSH
8157: LD_INT 83
8159: PUSH
8160: LD_INT 84
8162: PUSH
8163: LD_INT 85
8165: PUSH
8166: LD_INT 86
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: ST_TO_ADDR
8222: GO 8689
8224: LD_INT 2
8226: DOUBLE
8227: EQUAL
8228: IFTRUE 8232
8230: GO 8458
8232: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8233: LD_ADDR_VAR 0 4
8237: PUSH
8238: LD_INT 35
8240: PUSH
8241: LD_INT 45
8243: PUSH
8244: LD_INT 46
8246: PUSH
8247: LD_INT 47
8249: PUSH
8250: LD_INT 82
8252: PUSH
8253: LD_INT 83
8255: PUSH
8256: LD_INT 84
8258: PUSH
8259: LD_INT 85
8261: PUSH
8262: LD_INT 87
8264: PUSH
8265: LD_INT 70
8267: PUSH
8268: LD_INT 1
8270: PUSH
8271: LD_INT 11
8273: PUSH
8274: LD_INT 3
8276: PUSH
8277: LD_INT 4
8279: PUSH
8280: LD_INT 5
8282: PUSH
8283: LD_INT 6
8285: PUSH
8286: LD_INT 15
8288: PUSH
8289: LD_INT 18
8291: PUSH
8292: LD_INT 7
8294: PUSH
8295: LD_INT 17
8297: PUSH
8298: LD_INT 8
8300: PUSH
8301: LD_INT 20
8303: PUSH
8304: LD_INT 21
8306: PUSH
8307: LD_INT 22
8309: PUSH
8310: LD_INT 72
8312: PUSH
8313: LD_INT 26
8315: PUSH
8316: LD_INT 69
8318: PUSH
8319: LD_INT 39
8321: PUSH
8322: LD_INT 40
8324: PUSH
8325: LD_INT 41
8327: PUSH
8328: LD_INT 42
8330: PUSH
8331: LD_INT 43
8333: PUSH
8334: LD_INT 48
8336: PUSH
8337: LD_INT 49
8339: PUSH
8340: LD_INT 50
8342: PUSH
8343: LD_INT 51
8345: PUSH
8346: LD_INT 52
8348: PUSH
8349: LD_INT 53
8351: PUSH
8352: LD_INT 54
8354: PUSH
8355: LD_INT 55
8357: PUSH
8358: LD_INT 56
8360: PUSH
8361: LD_INT 60
8363: PUSH
8364: LD_INT 61
8366: PUSH
8367: LD_INT 62
8369: PUSH
8370: LD_INT 66
8372: PUSH
8373: LD_INT 67
8375: PUSH
8376: LD_INT 68
8378: PUSH
8379: LD_INT 81
8381: PUSH
8382: LD_INT 82
8384: PUSH
8385: LD_INT 83
8387: PUSH
8388: LD_INT 84
8390: PUSH
8391: LD_INT 85
8393: PUSH
8394: LD_INT 87
8396: PUSH
8397: LD_INT 88
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: ST_TO_ADDR
8456: GO 8689
8458: LD_INT 3
8460: DOUBLE
8461: EQUAL
8462: IFTRUE 8466
8464: GO 8688
8466: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8467: LD_ADDR_VAR 0 4
8471: PUSH
8472: LD_INT 46
8474: PUSH
8475: LD_INT 47
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: LD_INT 2
8483: PUSH
8484: LD_INT 82
8486: PUSH
8487: LD_INT 83
8489: PUSH
8490: LD_INT 84
8492: PUSH
8493: LD_INT 85
8495: PUSH
8496: LD_INT 86
8498: PUSH
8499: LD_INT 11
8501: PUSH
8502: LD_INT 9
8504: PUSH
8505: LD_INT 20
8507: PUSH
8508: LD_INT 19
8510: PUSH
8511: LD_INT 21
8513: PUSH
8514: LD_INT 24
8516: PUSH
8517: LD_INT 22
8519: PUSH
8520: LD_INT 25
8522: PUSH
8523: LD_INT 28
8525: PUSH
8526: LD_INT 29
8528: PUSH
8529: LD_INT 30
8531: PUSH
8532: LD_INT 31
8534: PUSH
8535: LD_INT 37
8537: PUSH
8538: LD_INT 38
8540: PUSH
8541: LD_INT 32
8543: PUSH
8544: LD_INT 27
8546: PUSH
8547: LD_INT 33
8549: PUSH
8550: LD_INT 69
8552: PUSH
8553: LD_INT 39
8555: PUSH
8556: LD_INT 34
8558: PUSH
8559: LD_INT 40
8561: PUSH
8562: LD_INT 71
8564: PUSH
8565: LD_INT 23
8567: PUSH
8568: LD_INT 44
8570: PUSH
8571: LD_INT 48
8573: PUSH
8574: LD_INT 49
8576: PUSH
8577: LD_INT 50
8579: PUSH
8580: LD_INT 51
8582: PUSH
8583: LD_INT 52
8585: PUSH
8586: LD_INT 53
8588: PUSH
8589: LD_INT 54
8591: PUSH
8592: LD_INT 55
8594: PUSH
8595: LD_INT 56
8597: PUSH
8598: LD_INT 57
8600: PUSH
8601: LD_INT 58
8603: PUSH
8604: LD_INT 59
8606: PUSH
8607: LD_INT 63
8609: PUSH
8610: LD_INT 64
8612: PUSH
8613: LD_INT 65
8615: PUSH
8616: LD_INT 82
8618: PUSH
8619: LD_INT 83
8621: PUSH
8622: LD_INT 84
8624: PUSH
8625: LD_INT 85
8627: PUSH
8628: LD_INT 86
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: ST_TO_ADDR
8686: GO 8689
8688: POP
// if state > - 1 and state < 3 then
8689: LD_VAR 0 3
8693: PUSH
8694: LD_INT 1
8696: NEG
8697: GREATER
8698: PUSH
8699: LD_VAR 0 3
8703: PUSH
8704: LD_INT 3
8706: LESS
8707: AND
8708: IFFALSE 8765
// for i in result do
8710: LD_ADDR_VAR 0 5
8714: PUSH
8715: LD_VAR 0 4
8719: PUSH
8720: FOR_IN
8721: IFFALSE 8763
// if GetTech ( i , side ) <> state then
8723: LD_VAR 0 5
8727: PPUSH
8728: LD_VAR 0 1
8732: PPUSH
8733: CALL_OW 321
8737: PUSH
8738: LD_VAR 0 3
8742: NONEQUAL
8743: IFFALSE 8761
// result := result diff i ;
8745: LD_ADDR_VAR 0 4
8749: PUSH
8750: LD_VAR 0 4
8754: PUSH
8755: LD_VAR 0 5
8759: DIFF
8760: ST_TO_ADDR
8761: GO 8720
8763: POP
8764: POP
// end ;
8765: LD_VAR 0 4
8769: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8770: LD_INT 0
8772: PPUSH
8773: PPUSH
8774: PPUSH
// result := true ;
8775: LD_ADDR_VAR 0 3
8779: PUSH
8780: LD_INT 1
8782: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8783: LD_ADDR_VAR 0 5
8787: PUSH
8788: LD_VAR 0 2
8792: PPUSH
8793: CALL_OW 480
8797: ST_TO_ADDR
// if not tmp then
8798: LD_VAR 0 5
8802: NOT
8803: IFFALSE 8807
// exit ;
8805: GO 8856
// for i in tmp do
8807: LD_ADDR_VAR 0 4
8811: PUSH
8812: LD_VAR 0 5
8816: PUSH
8817: FOR_IN
8818: IFFALSE 8854
// if GetTech ( i , side ) <> state_researched then
8820: LD_VAR 0 4
8824: PPUSH
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 321
8834: PUSH
8835: LD_INT 2
8837: NONEQUAL
8838: IFFALSE 8852
// begin result := false ;
8840: LD_ADDR_VAR 0 3
8844: PUSH
8845: LD_INT 0
8847: ST_TO_ADDR
// exit ;
8848: POP
8849: POP
8850: GO 8856
// end ;
8852: GO 8817
8854: POP
8855: POP
// end ;
8856: LD_VAR 0 3
8860: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
8861: LD_INT 0
8863: PPUSH
8864: PPUSH
8865: PPUSH
8866: PPUSH
8867: PPUSH
8868: PPUSH
8869: PPUSH
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
8875: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
8876: LD_VAR 0 1
8880: NOT
8881: PUSH
8882: LD_VAR 0 1
8886: PPUSH
8887: CALL_OW 257
8891: PUSH
8892: LD_INT 9
8894: NONEQUAL
8895: OR
8896: IFFALSE 8900
// exit ;
8898: GO 9473
// side := GetSide ( unit ) ;
8900: LD_ADDR_VAR 0 9
8904: PUSH
8905: LD_VAR 0 1
8909: PPUSH
8910: CALL_OW 255
8914: ST_TO_ADDR
// tech_space := tech_spacanom ;
8915: LD_ADDR_VAR 0 12
8919: PUSH
8920: LD_INT 29
8922: ST_TO_ADDR
// tech_time := tech_taurad ;
8923: LD_ADDR_VAR 0 13
8927: PUSH
8928: LD_INT 28
8930: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
8931: LD_ADDR_VAR 0 11
8935: PUSH
8936: LD_VAR 0 1
8940: PPUSH
8941: CALL_OW 310
8945: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
8946: LD_VAR 0 11
8950: PPUSH
8951: CALL_OW 247
8955: PUSH
8956: LD_INT 2
8958: EQUAL
8959: IFFALSE 8963
// exit ;
8961: GO 9473
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8963: LD_ADDR_VAR 0 8
8967: PUSH
8968: LD_INT 81
8970: PUSH
8971: LD_VAR 0 9
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 3
8982: PUSH
8983: LD_INT 21
8985: PUSH
8986: LD_INT 3
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PPUSH
9001: CALL_OW 69
9005: ST_TO_ADDR
// if not tmp then
9006: LD_VAR 0 8
9010: NOT
9011: IFFALSE 9015
// exit ;
9013: GO 9473
// if in_unit then
9015: LD_VAR 0 11
9019: IFFALSE 9043
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9021: LD_ADDR_VAR 0 10
9025: PUSH
9026: LD_VAR 0 8
9030: PPUSH
9031: LD_VAR 0 11
9035: PPUSH
9036: CALL_OW 74
9040: ST_TO_ADDR
9041: GO 9063
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9043: LD_ADDR_VAR 0 10
9047: PUSH
9048: LD_VAR 0 8
9052: PPUSH
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 74
9062: ST_TO_ADDR
// if not enemy then
9063: LD_VAR 0 10
9067: NOT
9068: IFFALSE 9072
// exit ;
9070: GO 9473
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9072: LD_VAR 0 11
9076: PUSH
9077: LD_VAR 0 11
9081: PPUSH
9082: LD_VAR 0 10
9086: PPUSH
9087: CALL_OW 296
9091: PUSH
9092: LD_INT 13
9094: GREATER
9095: AND
9096: PUSH
9097: LD_VAR 0 1
9101: PPUSH
9102: LD_VAR 0 10
9106: PPUSH
9107: CALL_OW 296
9111: PUSH
9112: LD_INT 12
9114: GREATER
9115: OR
9116: IFFALSE 9120
// exit ;
9118: GO 9473
// missile := [ 1 ] ;
9120: LD_ADDR_VAR 0 14
9124: PUSH
9125: LD_INT 1
9127: PUSH
9128: EMPTY
9129: LIST
9130: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9131: LD_VAR 0 9
9135: PPUSH
9136: LD_VAR 0 12
9140: PPUSH
9141: CALL_OW 325
9145: IFFALSE 9174
// missile := Insert ( missile , missile + 1 , 2 ) ;
9147: LD_ADDR_VAR 0 14
9151: PUSH
9152: LD_VAR 0 14
9156: PPUSH
9157: LD_VAR 0 14
9161: PUSH
9162: LD_INT 1
9164: PLUS
9165: PPUSH
9166: LD_INT 2
9168: PPUSH
9169: CALL_OW 2
9173: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9174: LD_VAR 0 9
9178: PPUSH
9179: LD_VAR 0 13
9183: PPUSH
9184: CALL_OW 325
9188: PUSH
9189: LD_VAR 0 10
9193: PPUSH
9194: CALL_OW 255
9198: PPUSH
9199: LD_VAR 0 13
9203: PPUSH
9204: CALL_OW 325
9208: NOT
9209: AND
9210: IFFALSE 9239
// missile := Insert ( missile , missile + 1 , 3 ) ;
9212: LD_ADDR_VAR 0 14
9216: PUSH
9217: LD_VAR 0 14
9221: PPUSH
9222: LD_VAR 0 14
9226: PUSH
9227: LD_INT 1
9229: PLUS
9230: PPUSH
9231: LD_INT 3
9233: PPUSH
9234: CALL_OW 2
9238: ST_TO_ADDR
// if missile < 2 then
9239: LD_VAR 0 14
9243: PUSH
9244: LD_INT 2
9246: LESS
9247: IFFALSE 9251
// exit ;
9249: GO 9473
// x := GetX ( enemy ) ;
9251: LD_ADDR_VAR 0 4
9255: PUSH
9256: LD_VAR 0 10
9260: PPUSH
9261: CALL_OW 250
9265: ST_TO_ADDR
// y := GetY ( enemy ) ;
9266: LD_ADDR_VAR 0 5
9270: PUSH
9271: LD_VAR 0 10
9275: PPUSH
9276: CALL_OW 251
9280: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9281: LD_ADDR_VAR 0 6
9285: PUSH
9286: LD_VAR 0 4
9290: PUSH
9291: LD_INT 1
9293: NEG
9294: PPUSH
9295: LD_INT 1
9297: PPUSH
9298: CALL_OW 12
9302: PLUS
9303: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9304: LD_ADDR_VAR 0 7
9308: PUSH
9309: LD_VAR 0 5
9313: PUSH
9314: LD_INT 1
9316: NEG
9317: PPUSH
9318: LD_INT 1
9320: PPUSH
9321: CALL_OW 12
9325: PLUS
9326: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9327: LD_VAR 0 6
9331: PPUSH
9332: LD_VAR 0 7
9336: PPUSH
9337: CALL_OW 488
9341: NOT
9342: IFFALSE 9364
// begin _x := x ;
9344: LD_ADDR_VAR 0 6
9348: PUSH
9349: LD_VAR 0 4
9353: ST_TO_ADDR
// _y := y ;
9354: LD_ADDR_VAR 0 7
9358: PUSH
9359: LD_VAR 0 5
9363: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9364: LD_ADDR_VAR 0 3
9368: PUSH
9369: LD_INT 1
9371: PPUSH
9372: LD_VAR 0 14
9376: PPUSH
9377: CALL_OW 12
9381: ST_TO_ADDR
// case i of 1 :
9382: LD_VAR 0 3
9386: PUSH
9387: LD_INT 1
9389: DOUBLE
9390: EQUAL
9391: IFTRUE 9395
9393: GO 9412
9395: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9396: LD_VAR 0 1
9400: PPUSH
9401: LD_VAR 0 10
9405: PPUSH
9406: CALL_OW 115
9410: GO 9473
9412: LD_INT 2
9414: DOUBLE
9415: EQUAL
9416: IFTRUE 9420
9418: GO 9442
9420: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9421: LD_VAR 0 1
9425: PPUSH
9426: LD_VAR 0 6
9430: PPUSH
9431: LD_VAR 0 7
9435: PPUSH
9436: CALL_OW 153
9440: GO 9473
9442: LD_INT 3
9444: DOUBLE
9445: EQUAL
9446: IFTRUE 9450
9448: GO 9472
9450: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9451: LD_VAR 0 1
9455: PPUSH
9456: LD_VAR 0 6
9460: PPUSH
9461: LD_VAR 0 7
9465: PPUSH
9466: CALL_OW 154
9470: GO 9473
9472: POP
// end ;
9473: LD_VAR 0 2
9477: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9478: LD_INT 0
9480: PPUSH
9481: PPUSH
9482: PPUSH
9483: PPUSH
9484: PPUSH
9485: PPUSH
// if not unit or not building then
9486: LD_VAR 0 1
9490: NOT
9491: PUSH
9492: LD_VAR 0 2
9496: NOT
9497: OR
9498: IFFALSE 9502
// exit ;
9500: GO 9660
// x := GetX ( building ) ;
9502: LD_ADDR_VAR 0 5
9506: PUSH
9507: LD_VAR 0 2
9511: PPUSH
9512: CALL_OW 250
9516: ST_TO_ADDR
// y := GetY ( building ) ;
9517: LD_ADDR_VAR 0 6
9521: PUSH
9522: LD_VAR 0 2
9526: PPUSH
9527: CALL_OW 251
9531: ST_TO_ADDR
// for i = 0 to 5 do
9532: LD_ADDR_VAR 0 4
9536: PUSH
9537: DOUBLE
9538: LD_INT 0
9540: DEC
9541: ST_TO_ADDR
9542: LD_INT 5
9544: PUSH
9545: FOR_TO
9546: IFFALSE 9658
// begin _x := ShiftX ( x , i , 3 ) ;
9548: LD_ADDR_VAR 0 7
9552: PUSH
9553: LD_VAR 0 5
9557: PPUSH
9558: LD_VAR 0 4
9562: PPUSH
9563: LD_INT 3
9565: PPUSH
9566: CALL_OW 272
9570: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9571: LD_ADDR_VAR 0 8
9575: PUSH
9576: LD_VAR 0 6
9580: PPUSH
9581: LD_VAR 0 4
9585: PPUSH
9586: LD_INT 3
9588: PPUSH
9589: CALL_OW 273
9593: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9594: LD_VAR 0 7
9598: PPUSH
9599: LD_VAR 0 8
9603: PPUSH
9604: CALL_OW 488
9608: NOT
9609: IFFALSE 9613
// continue ;
9611: GO 9545
// if HexInfo ( _x , _y ) = 0 then
9613: LD_VAR 0 7
9617: PPUSH
9618: LD_VAR 0 8
9622: PPUSH
9623: CALL_OW 428
9627: PUSH
9628: LD_INT 0
9630: EQUAL
9631: IFFALSE 9656
// begin ComMoveXY ( unit , _x , _y ) ;
9633: LD_VAR 0 1
9637: PPUSH
9638: LD_VAR 0 7
9642: PPUSH
9643: LD_VAR 0 8
9647: PPUSH
9648: CALL_OW 111
// exit ;
9652: POP
9653: POP
9654: GO 9660
// end ; end ;
9656: GO 9545
9658: POP
9659: POP
// end ;
9660: LD_VAR 0 3
9664: RET
// export function ScanBase ( side , base_area ) ; begin
9665: LD_INT 0
9667: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9668: LD_ADDR_VAR 0 3
9672: PUSH
9673: LD_VAR 0 2
9677: PPUSH
9678: LD_INT 81
9680: PUSH
9681: LD_VAR 0 1
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PPUSH
9690: CALL_OW 70
9694: ST_TO_ADDR
// end ;
9695: LD_VAR 0 3
9699: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9700: LD_INT 0
9702: PPUSH
9703: PPUSH
9704: PPUSH
9705: PPUSH
// result := false ;
9706: LD_ADDR_VAR 0 2
9710: PUSH
9711: LD_INT 0
9713: ST_TO_ADDR
// side := GetSide ( unit ) ;
9714: LD_ADDR_VAR 0 3
9718: PUSH
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 255
9728: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9729: LD_ADDR_VAR 0 4
9733: PUSH
9734: LD_VAR 0 1
9738: PPUSH
9739: CALL_OW 248
9743: ST_TO_ADDR
// case nat of 1 :
9744: LD_VAR 0 4
9748: PUSH
9749: LD_INT 1
9751: DOUBLE
9752: EQUAL
9753: IFTRUE 9757
9755: GO 9768
9757: POP
// tech := tech_lassight ; 2 :
9758: LD_ADDR_VAR 0 5
9762: PUSH
9763: LD_INT 12
9765: ST_TO_ADDR
9766: GO 9807
9768: LD_INT 2
9770: DOUBLE
9771: EQUAL
9772: IFTRUE 9776
9774: GO 9787
9776: POP
// tech := tech_mortar ; 3 :
9777: LD_ADDR_VAR 0 5
9781: PUSH
9782: LD_INT 41
9784: ST_TO_ADDR
9785: GO 9807
9787: LD_INT 3
9789: DOUBLE
9790: EQUAL
9791: IFTRUE 9795
9793: GO 9806
9795: POP
// tech := tech_bazooka ; end ;
9796: LD_ADDR_VAR 0 5
9800: PUSH
9801: LD_INT 44
9803: ST_TO_ADDR
9804: GO 9807
9806: POP
// if Researched ( side , tech ) then
9807: LD_VAR 0 3
9811: PPUSH
9812: LD_VAR 0 5
9816: PPUSH
9817: CALL_OW 325
9821: IFFALSE 9848
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9823: LD_ADDR_VAR 0 2
9827: PUSH
9828: LD_INT 5
9830: PUSH
9831: LD_INT 8
9833: PUSH
9834: LD_INT 9
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: PUSH
9842: LD_VAR 0 4
9846: ARRAY
9847: ST_TO_ADDR
// end ;
9848: LD_VAR 0 2
9852: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
9853: LD_INT 0
9855: PPUSH
9856: PPUSH
9857: PPUSH
// if not mines then
9858: LD_VAR 0 2
9862: NOT
9863: IFFALSE 9867
// exit ;
9865: GO 10011
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9867: LD_ADDR_VAR 0 5
9871: PUSH
9872: LD_INT 81
9874: PUSH
9875: LD_VAR 0 1
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 3
9886: PUSH
9887: LD_INT 21
9889: PUSH
9890: LD_INT 3
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PPUSH
9905: CALL_OW 69
9909: ST_TO_ADDR
// for i in mines do
9910: LD_ADDR_VAR 0 4
9914: PUSH
9915: LD_VAR 0 2
9919: PUSH
9920: FOR_IN
9921: IFFALSE 10009
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
9923: LD_VAR 0 4
9927: PUSH
9928: LD_INT 1
9930: ARRAY
9931: PPUSH
9932: LD_VAR 0 4
9936: PUSH
9937: LD_INT 2
9939: ARRAY
9940: PPUSH
9941: CALL_OW 458
9945: NOT
9946: IFFALSE 9950
// continue ;
9948: GO 9920
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
9950: LD_VAR 0 4
9954: PUSH
9955: LD_INT 1
9957: ARRAY
9958: PPUSH
9959: LD_VAR 0 4
9963: PUSH
9964: LD_INT 2
9966: ARRAY
9967: PPUSH
9968: CALL_OW 428
9972: PUSH
9973: LD_VAR 0 5
9977: IN
9978: IFFALSE 10007
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
9980: LD_VAR 0 4
9984: PUSH
9985: LD_INT 1
9987: ARRAY
9988: PPUSH
9989: LD_VAR 0 4
9993: PUSH
9994: LD_INT 2
9996: ARRAY
9997: PPUSH
9998: LD_VAR 0 1
10002: PPUSH
10003: CALL_OW 456
// end ;
10007: GO 9920
10009: POP
10010: POP
// end ;
10011: LD_VAR 0 3
10015: RET
// export function Count ( array ) ; var i ; begin
10016: LD_INT 0
10018: PPUSH
10019: PPUSH
// result := 0 ;
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 0
10027: ST_TO_ADDR
// for i in array do
10028: LD_ADDR_VAR 0 3
10032: PUSH
10033: LD_VAR 0 1
10037: PUSH
10038: FOR_IN
10039: IFFALSE 10063
// if i then
10041: LD_VAR 0 3
10045: IFFALSE 10061
// result := result + 1 ;
10047: LD_ADDR_VAR 0 2
10051: PUSH
10052: LD_VAR 0 2
10056: PUSH
10057: LD_INT 1
10059: PLUS
10060: ST_TO_ADDR
10061: GO 10038
10063: POP
10064: POP
// end ;
10065: LD_VAR 0 2
10069: RET
// export function IsEmpty ( building ) ; begin
10070: LD_INT 0
10072: PPUSH
// if not building then
10073: LD_VAR 0 1
10077: NOT
10078: IFFALSE 10082
// exit ;
10080: GO 10125
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10082: LD_ADDR_VAR 0 2
10086: PUSH
10087: LD_VAR 0 1
10091: PUSH
10092: LD_INT 22
10094: PUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 255
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: LD_INT 58
10111: PUSH
10112: EMPTY
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PPUSH
10119: CALL_OW 69
10123: IN
10124: ST_TO_ADDR
// end ;
10125: LD_VAR 0 2
10129: RET
// export function IsNotFull ( building ) ; begin
10130: LD_INT 0
10132: PPUSH
// if not building then
10133: LD_VAR 0 1
10137: NOT
10138: IFFALSE 10142
// exit ;
10140: GO 10161
// result := UnitsInside ( building ) < 6 ;
10142: LD_ADDR_VAR 0 2
10146: PUSH
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 313
10156: PUSH
10157: LD_INT 6
10159: LESS
10160: ST_TO_ADDR
// end ;
10161: LD_VAR 0 2
10165: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10166: LD_INT 0
10168: PPUSH
10169: PPUSH
10170: PPUSH
10171: PPUSH
// tmp := [ ] ;
10172: LD_ADDR_VAR 0 3
10176: PUSH
10177: EMPTY
10178: ST_TO_ADDR
// list := [ ] ;
10179: LD_ADDR_VAR 0 5
10183: PUSH
10184: EMPTY
10185: ST_TO_ADDR
// for i = 16 to 25 do
10186: LD_ADDR_VAR 0 4
10190: PUSH
10191: DOUBLE
10192: LD_INT 16
10194: DEC
10195: ST_TO_ADDR
10196: LD_INT 25
10198: PUSH
10199: FOR_TO
10200: IFFALSE 10273
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10202: LD_ADDR_VAR 0 3
10206: PUSH
10207: LD_VAR 0 3
10211: PUSH
10212: LD_INT 22
10214: PUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: CALL_OW 255
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 91
10231: PUSH
10232: LD_VAR 0 1
10236: PUSH
10237: LD_INT 6
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 30
10247: PUSH
10248: LD_VAR 0 4
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: LIST
10261: PUSH
10262: EMPTY
10263: LIST
10264: PPUSH
10265: CALL_OW 69
10269: ADD
10270: ST_TO_ADDR
10271: GO 10199
10273: POP
10274: POP
// for i = 1 to tmp do
10275: LD_ADDR_VAR 0 4
10279: PUSH
10280: DOUBLE
10281: LD_INT 1
10283: DEC
10284: ST_TO_ADDR
10285: LD_VAR 0 3
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10379
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10293: LD_ADDR_VAR 0 5
10297: PUSH
10298: LD_VAR 0 5
10302: PUSH
10303: LD_VAR 0 3
10307: PUSH
10308: LD_VAR 0 4
10312: ARRAY
10313: PPUSH
10314: CALL_OW 266
10318: PUSH
10319: LD_VAR 0 3
10323: PUSH
10324: LD_VAR 0 4
10328: ARRAY
10329: PPUSH
10330: CALL_OW 250
10334: PUSH
10335: LD_VAR 0 3
10339: PUSH
10340: LD_VAR 0 4
10344: ARRAY
10345: PPUSH
10346: CALL_OW 251
10350: PUSH
10351: LD_VAR 0 3
10355: PUSH
10356: LD_VAR 0 4
10360: ARRAY
10361: PPUSH
10362: CALL_OW 254
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: PUSH
10373: EMPTY
10374: LIST
10375: ADD
10376: ST_TO_ADDR
10377: GO 10290
10379: POP
10380: POP
// result := list ;
10381: LD_ADDR_VAR 0 2
10385: PUSH
10386: LD_VAR 0 5
10390: ST_TO_ADDR
// end ;
10391: LD_VAR 0 2
10395: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10396: LD_INT 0
10398: PPUSH
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
// if not factory then
10405: LD_VAR 0 1
10409: NOT
10410: IFFALSE 10414
// exit ;
10412: GO 11007
// if control = control_apeman then
10414: LD_VAR 0 4
10418: PUSH
10419: LD_INT 5
10421: EQUAL
10422: IFFALSE 10531
// begin tmp := UnitsInside ( factory ) ;
10424: LD_ADDR_VAR 0 8
10428: PUSH
10429: LD_VAR 0 1
10433: PPUSH
10434: CALL_OW 313
10438: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10439: LD_VAR 0 8
10443: PPUSH
10444: LD_INT 25
10446: PUSH
10447: LD_INT 12
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PPUSH
10454: CALL_OW 72
10458: NOT
10459: IFFALSE 10469
// control := control_manual ;
10461: LD_ADDR_VAR 0 4
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10469: LD_ADDR_VAR 0 8
10473: PUSH
10474: LD_VAR 0 1
10478: PPUSH
10479: CALL 10166 0 1
10483: ST_TO_ADDR
// if tmp then
10484: LD_VAR 0 8
10488: IFFALSE 10531
// begin for i in tmp do
10490: LD_ADDR_VAR 0 7
10494: PUSH
10495: LD_VAR 0 8
10499: PUSH
10500: FOR_IN
10501: IFFALSE 10529
// if i [ 1 ] = b_ext_radio then
10503: LD_VAR 0 7
10507: PUSH
10508: LD_INT 1
10510: ARRAY
10511: PUSH
10512: LD_INT 22
10514: EQUAL
10515: IFFALSE 10527
// begin control := control_remote ;
10517: LD_ADDR_VAR 0 4
10521: PUSH
10522: LD_INT 2
10524: ST_TO_ADDR
// break ;
10525: GO 10529
// end ;
10527: GO 10500
10529: POP
10530: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10531: LD_VAR 0 1
10535: PPUSH
10536: LD_VAR 0 2
10540: PPUSH
10541: LD_VAR 0 3
10545: PPUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: LD_VAR 0 5
10555: PPUSH
10556: CALL_OW 448
10560: IFFALSE 10595
// begin result := [ chassis , engine , control , weapon ] ;
10562: LD_ADDR_VAR 0 6
10566: PUSH
10567: LD_VAR 0 2
10571: PUSH
10572: LD_VAR 0 3
10576: PUSH
10577: LD_VAR 0 4
10581: PUSH
10582: LD_VAR 0 5
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: ST_TO_ADDR
// exit ;
10593: GO 11007
// end ; _chassis := AvailableChassisList ( factory ) ;
10595: LD_ADDR_VAR 0 9
10599: PUSH
10600: LD_VAR 0 1
10604: PPUSH
10605: CALL_OW 475
10609: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10610: LD_ADDR_VAR 0 11
10614: PUSH
10615: LD_VAR 0 1
10619: PPUSH
10620: CALL_OW 476
10624: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10625: LD_ADDR_VAR 0 12
10629: PUSH
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 477
10639: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10640: LD_ADDR_VAR 0 10
10644: PUSH
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 478
10654: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10655: LD_VAR 0 9
10659: NOT
10660: PUSH
10661: LD_VAR 0 11
10665: NOT
10666: OR
10667: PUSH
10668: LD_VAR 0 12
10672: NOT
10673: OR
10674: PUSH
10675: LD_VAR 0 10
10679: NOT
10680: OR
10681: IFFALSE 10716
// begin result := [ chassis , engine , control , weapon ] ;
10683: LD_ADDR_VAR 0 6
10687: PUSH
10688: LD_VAR 0 2
10692: PUSH
10693: LD_VAR 0 3
10697: PUSH
10698: LD_VAR 0 4
10702: PUSH
10703: LD_VAR 0 5
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: ST_TO_ADDR
// exit ;
10714: GO 11007
// end ; if not chassis in _chassis then
10716: LD_VAR 0 2
10720: PUSH
10721: LD_VAR 0 9
10725: IN
10726: NOT
10727: IFFALSE 10753
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_VAR 0 9
10738: PUSH
10739: LD_INT 1
10741: PPUSH
10742: LD_VAR 0 9
10746: PPUSH
10747: CALL_OW 12
10751: ARRAY
10752: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10753: LD_VAR 0 2
10757: PPUSH
10758: LD_VAR 0 3
10762: PPUSH
10763: CALL 11012 0 2
10767: NOT
10768: IFFALSE 10827
// repeat engine := _engine [ 1 ] ;
10770: LD_ADDR_VAR 0 3
10774: PUSH
10775: LD_VAR 0 11
10779: PUSH
10780: LD_INT 1
10782: ARRAY
10783: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10784: LD_ADDR_VAR 0 11
10788: PUSH
10789: LD_VAR 0 11
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 3
10801: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10802: LD_VAR 0 2
10806: PPUSH
10807: LD_VAR 0 3
10811: PPUSH
10812: CALL 11012 0 2
10816: PUSH
10817: LD_VAR 0 11
10821: PUSH
10822: EMPTY
10823: EQUAL
10824: OR
10825: IFFALSE 10770
// if not control in _control then
10827: LD_VAR 0 4
10831: PUSH
10832: LD_VAR 0 12
10836: IN
10837: NOT
10838: IFFALSE 10864
// control := _control [ rand ( 1 , _control ) ] ;
10840: LD_ADDR_VAR 0 4
10844: PUSH
10845: LD_VAR 0 12
10849: PUSH
10850: LD_INT 1
10852: PPUSH
10853: LD_VAR 0 12
10857: PPUSH
10858: CALL_OW 12
10862: ARRAY
10863: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
10864: LD_VAR 0 2
10868: PPUSH
10869: LD_VAR 0 5
10873: PPUSH
10874: CALL 11232 0 2
10878: NOT
10879: IFFALSE 10938
// repeat weapon := _weapon [ 1 ] ;
10881: LD_ADDR_VAR 0 5
10885: PUSH
10886: LD_VAR 0 10
10890: PUSH
10891: LD_INT 1
10893: ARRAY
10894: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
10895: LD_ADDR_VAR 0 10
10899: PUSH
10900: LD_VAR 0 10
10904: PPUSH
10905: LD_INT 1
10907: PPUSH
10908: CALL_OW 3
10912: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
10913: LD_VAR 0 2
10917: PPUSH
10918: LD_VAR 0 5
10922: PPUSH
10923: CALL 11232 0 2
10927: PUSH
10928: LD_VAR 0 10
10932: PUSH
10933: EMPTY
10934: EQUAL
10935: OR
10936: IFFALSE 10881
// result := [ ] ;
10938: LD_ADDR_VAR 0 6
10942: PUSH
10943: EMPTY
10944: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10945: LD_VAR 0 1
10949: PPUSH
10950: LD_VAR 0 2
10954: PPUSH
10955: LD_VAR 0 3
10959: PPUSH
10960: LD_VAR 0 4
10964: PPUSH
10965: LD_VAR 0 5
10969: PPUSH
10970: CALL_OW 448
10974: IFFALSE 11007
// result := [ chassis , engine , control , weapon ] ;
10976: LD_ADDR_VAR 0 6
10980: PUSH
10981: LD_VAR 0 2
10985: PUSH
10986: LD_VAR 0 3
10990: PUSH
10991: LD_VAR 0 4
10995: PUSH
10996: LD_VAR 0 5
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: ST_TO_ADDR
// end ;
11007: LD_VAR 0 6
11011: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11012: LD_INT 0
11014: PPUSH
// if not chassis or not engine then
11015: LD_VAR 0 1
11019: NOT
11020: PUSH
11021: LD_VAR 0 2
11025: NOT
11026: OR
11027: IFFALSE 11031
// exit ;
11029: GO 11227
// case engine of engine_solar :
11031: LD_VAR 0 2
11035: PUSH
11036: LD_INT 2
11038: DOUBLE
11039: EQUAL
11040: IFTRUE 11044
11042: GO 11082
11044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11045: LD_ADDR_VAR 0 3
11049: PUSH
11050: LD_INT 11
11052: PUSH
11053: LD_INT 12
11055: PUSH
11056: LD_INT 13
11058: PUSH
11059: LD_INT 14
11061: PUSH
11062: LD_INT 1
11064: PUSH
11065: LD_INT 2
11067: PUSH
11068: LD_INT 3
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: ST_TO_ADDR
11080: GO 11211
11082: LD_INT 1
11084: DOUBLE
11085: EQUAL
11086: IFTRUE 11090
11088: GO 11152
11090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11091: LD_ADDR_VAR 0 3
11095: PUSH
11096: LD_INT 11
11098: PUSH
11099: LD_INT 12
11101: PUSH
11102: LD_INT 13
11104: PUSH
11105: LD_INT 14
11107: PUSH
11108: LD_INT 1
11110: PUSH
11111: LD_INT 2
11113: PUSH
11114: LD_INT 3
11116: PUSH
11117: LD_INT 4
11119: PUSH
11120: LD_INT 5
11122: PUSH
11123: LD_INT 21
11125: PUSH
11126: LD_INT 23
11128: PUSH
11129: LD_INT 22
11131: PUSH
11132: LD_INT 24
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: ST_TO_ADDR
11150: GO 11211
11152: LD_INT 3
11154: DOUBLE
11155: EQUAL
11156: IFTRUE 11160
11158: GO 11210
11160: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11161: LD_ADDR_VAR 0 3
11165: PUSH
11166: LD_INT 13
11168: PUSH
11169: LD_INT 14
11171: PUSH
11172: LD_INT 2
11174: PUSH
11175: LD_INT 3
11177: PUSH
11178: LD_INT 4
11180: PUSH
11181: LD_INT 5
11183: PUSH
11184: LD_INT 21
11186: PUSH
11187: LD_INT 22
11189: PUSH
11190: LD_INT 23
11192: PUSH
11193: LD_INT 24
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: ST_TO_ADDR
11208: GO 11211
11210: POP
// result := ( chassis in result ) ;
11211: LD_ADDR_VAR 0 3
11215: PUSH
11216: LD_VAR 0 1
11220: PUSH
11221: LD_VAR 0 3
11225: IN
11226: ST_TO_ADDR
// end ;
11227: LD_VAR 0 3
11231: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11232: LD_INT 0
11234: PPUSH
// if not chassis or not weapon then
11235: LD_VAR 0 1
11239: NOT
11240: PUSH
11241: LD_VAR 0 2
11245: NOT
11246: OR
11247: IFFALSE 11251
// exit ;
11249: GO 12313
// case weapon of us_machine_gun :
11251: LD_VAR 0 2
11255: PUSH
11256: LD_INT 2
11258: DOUBLE
11259: EQUAL
11260: IFTRUE 11264
11262: GO 11294
11264: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11265: LD_ADDR_VAR 0 3
11269: PUSH
11270: LD_INT 1
11272: PUSH
11273: LD_INT 2
11275: PUSH
11276: LD_INT 3
11278: PUSH
11279: LD_INT 4
11281: PUSH
11282: LD_INT 5
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: ST_TO_ADDR
11292: GO 12297
11294: LD_INT 3
11296: DOUBLE
11297: EQUAL
11298: IFTRUE 11302
11300: GO 11332
11302: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11303: LD_ADDR_VAR 0 3
11307: PUSH
11308: LD_INT 1
11310: PUSH
11311: LD_INT 2
11313: PUSH
11314: LD_INT 3
11316: PUSH
11317: LD_INT 4
11319: PUSH
11320: LD_INT 5
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: ST_TO_ADDR
11330: GO 12297
11332: LD_INT 11
11334: DOUBLE
11335: EQUAL
11336: IFTRUE 11340
11338: GO 11370
11340: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11341: LD_ADDR_VAR 0 3
11345: PUSH
11346: LD_INT 1
11348: PUSH
11349: LD_INT 2
11351: PUSH
11352: LD_INT 3
11354: PUSH
11355: LD_INT 4
11357: PUSH
11358: LD_INT 5
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: ST_TO_ADDR
11368: GO 12297
11370: LD_INT 4
11372: DOUBLE
11373: EQUAL
11374: IFTRUE 11378
11376: GO 11404
11378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11379: LD_ADDR_VAR 0 3
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_INT 3
11389: PUSH
11390: LD_INT 4
11392: PUSH
11393: LD_INT 5
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: ST_TO_ADDR
11402: GO 12297
11404: LD_INT 5
11406: DOUBLE
11407: EQUAL
11408: IFTRUE 11412
11410: GO 11438
11412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11413: LD_ADDR_VAR 0 3
11417: PUSH
11418: LD_INT 2
11420: PUSH
11421: LD_INT 3
11423: PUSH
11424: LD_INT 4
11426: PUSH
11427: LD_INT 5
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: ST_TO_ADDR
11436: GO 12297
11438: LD_INT 9
11440: DOUBLE
11441: EQUAL
11442: IFTRUE 11446
11444: GO 11472
11446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11447: LD_ADDR_VAR 0 3
11451: PUSH
11452: LD_INT 2
11454: PUSH
11455: LD_INT 3
11457: PUSH
11458: LD_INT 4
11460: PUSH
11461: LD_INT 5
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: ST_TO_ADDR
11470: GO 12297
11472: LD_INT 7
11474: DOUBLE
11475: EQUAL
11476: IFTRUE 11480
11478: GO 11506
11480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11481: LD_ADDR_VAR 0 3
11485: PUSH
11486: LD_INT 2
11488: PUSH
11489: LD_INT 3
11491: PUSH
11492: LD_INT 4
11494: PUSH
11495: LD_INT 5
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: ST_TO_ADDR
11504: GO 12297
11506: LD_INT 12
11508: DOUBLE
11509: EQUAL
11510: IFTRUE 11514
11512: GO 11540
11514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11515: LD_ADDR_VAR 0 3
11519: PUSH
11520: LD_INT 2
11522: PUSH
11523: LD_INT 3
11525: PUSH
11526: LD_INT 4
11528: PUSH
11529: LD_INT 5
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: ST_TO_ADDR
11538: GO 12297
11540: LD_INT 13
11542: DOUBLE
11543: EQUAL
11544: IFTRUE 11548
11546: GO 11574
11548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11549: LD_ADDR_VAR 0 3
11553: PUSH
11554: LD_INT 2
11556: PUSH
11557: LD_INT 3
11559: PUSH
11560: LD_INT 4
11562: PUSH
11563: LD_INT 5
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: ST_TO_ADDR
11572: GO 12297
11574: LD_INT 14
11576: DOUBLE
11577: EQUAL
11578: IFTRUE 11582
11580: GO 11600
11582: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11583: LD_ADDR_VAR 0 3
11587: PUSH
11588: LD_INT 4
11590: PUSH
11591: LD_INT 5
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: ST_TO_ADDR
11598: GO 12297
11600: LD_INT 6
11602: DOUBLE
11603: EQUAL
11604: IFTRUE 11608
11606: GO 11626
11608: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11609: LD_ADDR_VAR 0 3
11613: PUSH
11614: LD_INT 4
11616: PUSH
11617: LD_INT 5
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: ST_TO_ADDR
11624: GO 12297
11626: LD_INT 10
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11652
11634: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11635: LD_ADDR_VAR 0 3
11639: PUSH
11640: LD_INT 4
11642: PUSH
11643: LD_INT 5
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: ST_TO_ADDR
11650: GO 12297
11652: LD_INT 22
11654: DOUBLE
11655: EQUAL
11656: IFTRUE 11660
11658: GO 11686
11660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11661: LD_ADDR_VAR 0 3
11665: PUSH
11666: LD_INT 11
11668: PUSH
11669: LD_INT 12
11671: PUSH
11672: LD_INT 13
11674: PUSH
11675: LD_INT 14
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: ST_TO_ADDR
11684: GO 12297
11686: LD_INT 23
11688: DOUBLE
11689: EQUAL
11690: IFTRUE 11694
11692: GO 11720
11694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11695: LD_ADDR_VAR 0 3
11699: PUSH
11700: LD_INT 11
11702: PUSH
11703: LD_INT 12
11705: PUSH
11706: LD_INT 13
11708: PUSH
11709: LD_INT 14
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: ST_TO_ADDR
11718: GO 12297
11720: LD_INT 24
11722: DOUBLE
11723: EQUAL
11724: IFTRUE 11728
11726: GO 11754
11728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11729: LD_ADDR_VAR 0 3
11733: PUSH
11734: LD_INT 11
11736: PUSH
11737: LD_INT 12
11739: PUSH
11740: LD_INT 13
11742: PUSH
11743: LD_INT 14
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: ST_TO_ADDR
11752: GO 12297
11754: LD_INT 30
11756: DOUBLE
11757: EQUAL
11758: IFTRUE 11762
11760: GO 11788
11762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11763: LD_ADDR_VAR 0 3
11767: PUSH
11768: LD_INT 11
11770: PUSH
11771: LD_INT 12
11773: PUSH
11774: LD_INT 13
11776: PUSH
11777: LD_INT 14
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: ST_TO_ADDR
11786: GO 12297
11788: LD_INT 25
11790: DOUBLE
11791: EQUAL
11792: IFTRUE 11796
11794: GO 11814
11796: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11797: LD_ADDR_VAR 0 3
11801: PUSH
11802: LD_INT 13
11804: PUSH
11805: LD_INT 14
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: ST_TO_ADDR
11812: GO 12297
11814: LD_INT 27
11816: DOUBLE
11817: EQUAL
11818: IFTRUE 11822
11820: GO 11840
11822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
11823: LD_ADDR_VAR 0 3
11827: PUSH
11828: LD_INT 13
11830: PUSH
11831: LD_INT 14
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: ST_TO_ADDR
11838: GO 12297
11840: LD_EXP 44
11844: DOUBLE
11845: EQUAL
11846: IFTRUE 11850
11848: GO 11876
11850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
11851: LD_ADDR_VAR 0 3
11855: PUSH
11856: LD_INT 11
11858: PUSH
11859: LD_INT 12
11861: PUSH
11862: LD_INT 13
11864: PUSH
11865: LD_INT 14
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: ST_TO_ADDR
11874: GO 12297
11876: LD_INT 28
11878: DOUBLE
11879: EQUAL
11880: IFTRUE 11884
11882: GO 11902
11884: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
11885: LD_ADDR_VAR 0 3
11889: PUSH
11890: LD_INT 13
11892: PUSH
11893: LD_INT 14
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: ST_TO_ADDR
11900: GO 12297
11902: LD_INT 29
11904: DOUBLE
11905: EQUAL
11906: IFTRUE 11910
11908: GO 11928
11910: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
11911: LD_ADDR_VAR 0 3
11915: PUSH
11916: LD_INT 13
11918: PUSH
11919: LD_INT 14
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: ST_TO_ADDR
11926: GO 12297
11928: LD_INT 31
11930: DOUBLE
11931: EQUAL
11932: IFTRUE 11936
11934: GO 11954
11936: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
11937: LD_ADDR_VAR 0 3
11941: PUSH
11942: LD_INT 13
11944: PUSH
11945: LD_INT 14
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: ST_TO_ADDR
11952: GO 12297
11954: LD_INT 26
11956: DOUBLE
11957: EQUAL
11958: IFTRUE 11962
11960: GO 11980
11962: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
11963: LD_ADDR_VAR 0 3
11967: PUSH
11968: LD_INT 13
11970: PUSH
11971: LD_INT 14
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: ST_TO_ADDR
11978: GO 12297
11980: LD_INT 42
11982: DOUBLE
11983: EQUAL
11984: IFTRUE 11988
11986: GO 12014
11988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
11989: LD_ADDR_VAR 0 3
11993: PUSH
11994: LD_INT 21
11996: PUSH
11997: LD_INT 22
11999: PUSH
12000: LD_INT 23
12002: PUSH
12003: LD_INT 24
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: ST_TO_ADDR
12012: GO 12297
12014: LD_INT 43
12016: DOUBLE
12017: EQUAL
12018: IFTRUE 12022
12020: GO 12048
12022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12023: LD_ADDR_VAR 0 3
12027: PUSH
12028: LD_INT 21
12030: PUSH
12031: LD_INT 22
12033: PUSH
12034: LD_INT 23
12036: PUSH
12037: LD_INT 24
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: ST_TO_ADDR
12046: GO 12297
12048: LD_INT 44
12050: DOUBLE
12051: EQUAL
12052: IFTRUE 12056
12054: GO 12082
12056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12057: LD_ADDR_VAR 0 3
12061: PUSH
12062: LD_INT 21
12064: PUSH
12065: LD_INT 22
12067: PUSH
12068: LD_INT 23
12070: PUSH
12071: LD_INT 24
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: ST_TO_ADDR
12080: GO 12297
12082: LD_INT 45
12084: DOUBLE
12085: EQUAL
12086: IFTRUE 12090
12088: GO 12116
12090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12091: LD_ADDR_VAR 0 3
12095: PUSH
12096: LD_INT 21
12098: PUSH
12099: LD_INT 22
12101: PUSH
12102: LD_INT 23
12104: PUSH
12105: LD_INT 24
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: ST_TO_ADDR
12114: GO 12297
12116: LD_INT 49
12118: DOUBLE
12119: EQUAL
12120: IFTRUE 12124
12122: GO 12150
12124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12125: LD_ADDR_VAR 0 3
12129: PUSH
12130: LD_INT 21
12132: PUSH
12133: LD_INT 22
12135: PUSH
12136: LD_INT 23
12138: PUSH
12139: LD_INT 24
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: ST_TO_ADDR
12148: GO 12297
12150: LD_INT 51
12152: DOUBLE
12153: EQUAL
12154: IFTRUE 12158
12156: GO 12184
12158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: LD_INT 21
12166: PUSH
12167: LD_INT 22
12169: PUSH
12170: LD_INT 23
12172: PUSH
12173: LD_INT 24
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: ST_TO_ADDR
12182: GO 12297
12184: LD_INT 52
12186: DOUBLE
12187: EQUAL
12188: IFTRUE 12192
12190: GO 12218
12192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12193: LD_ADDR_VAR 0 3
12197: PUSH
12198: LD_INT 21
12200: PUSH
12201: LD_INT 22
12203: PUSH
12204: LD_INT 23
12206: PUSH
12207: LD_INT 24
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: ST_TO_ADDR
12216: GO 12297
12218: LD_INT 53
12220: DOUBLE
12221: EQUAL
12222: IFTRUE 12226
12224: GO 12244
12226: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12227: LD_ADDR_VAR 0 3
12231: PUSH
12232: LD_INT 23
12234: PUSH
12235: LD_INT 24
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: ST_TO_ADDR
12242: GO 12297
12244: LD_INT 46
12246: DOUBLE
12247: EQUAL
12248: IFTRUE 12252
12250: GO 12270
12252: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12253: LD_ADDR_VAR 0 3
12257: PUSH
12258: LD_INT 23
12260: PUSH
12261: LD_INT 24
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: ST_TO_ADDR
12268: GO 12297
12270: LD_INT 47
12272: DOUBLE
12273: EQUAL
12274: IFTRUE 12278
12276: GO 12296
12278: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: LD_INT 23
12286: PUSH
12287: LD_INT 24
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: ST_TO_ADDR
12294: GO 12297
12296: POP
// result := ( chassis in result ) ;
12297: LD_ADDR_VAR 0 3
12301: PUSH
12302: LD_VAR 0 1
12306: PUSH
12307: LD_VAR 0 3
12311: IN
12312: ST_TO_ADDR
// end ;
12313: LD_VAR 0 3
12317: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12318: LD_INT 0
12320: PPUSH
12321: PPUSH
12322: PPUSH
12323: PPUSH
12324: PPUSH
12325: PPUSH
12326: PPUSH
// result := array ;
12327: LD_ADDR_VAR 0 5
12331: PUSH
12332: LD_VAR 0 1
12336: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12337: LD_VAR 0 1
12341: NOT
12342: PUSH
12343: LD_VAR 0 2
12347: NOT
12348: OR
12349: PUSH
12350: LD_VAR 0 3
12354: NOT
12355: OR
12356: PUSH
12357: LD_VAR 0 2
12361: PUSH
12362: LD_VAR 0 1
12366: GREATER
12367: OR
12368: PUSH
12369: LD_VAR 0 3
12373: PUSH
12374: LD_VAR 0 1
12378: GREATER
12379: OR
12380: IFFALSE 12384
// exit ;
12382: GO 12680
// if direction then
12384: LD_VAR 0 4
12388: IFFALSE 12452
// begin d := 1 ;
12390: LD_ADDR_VAR 0 9
12394: PUSH
12395: LD_INT 1
12397: ST_TO_ADDR
// if i_from > i_to then
12398: LD_VAR 0 2
12402: PUSH
12403: LD_VAR 0 3
12407: GREATER
12408: IFFALSE 12434
// length := ( array - i_from ) + i_to else
12410: LD_ADDR_VAR 0 11
12414: PUSH
12415: LD_VAR 0 1
12419: PUSH
12420: LD_VAR 0 2
12424: MINUS
12425: PUSH
12426: LD_VAR 0 3
12430: PLUS
12431: ST_TO_ADDR
12432: GO 12450
// length := i_to - i_from ;
12434: LD_ADDR_VAR 0 11
12438: PUSH
12439: LD_VAR 0 3
12443: PUSH
12444: LD_VAR 0 2
12448: MINUS
12449: ST_TO_ADDR
// end else
12450: GO 12513
// begin d := - 1 ;
12452: LD_ADDR_VAR 0 9
12456: PUSH
12457: LD_INT 1
12459: NEG
12460: ST_TO_ADDR
// if i_from > i_to then
12461: LD_VAR 0 2
12465: PUSH
12466: LD_VAR 0 3
12470: GREATER
12471: IFFALSE 12491
// length := i_from - i_to else
12473: LD_ADDR_VAR 0 11
12477: PUSH
12478: LD_VAR 0 2
12482: PUSH
12483: LD_VAR 0 3
12487: MINUS
12488: ST_TO_ADDR
12489: GO 12513
// length := ( array - i_to ) + i_from ;
12491: LD_ADDR_VAR 0 11
12495: PUSH
12496: LD_VAR 0 1
12500: PUSH
12501: LD_VAR 0 3
12505: MINUS
12506: PUSH
12507: LD_VAR 0 2
12511: PLUS
12512: ST_TO_ADDR
// end ; if not length then
12513: LD_VAR 0 11
12517: NOT
12518: IFFALSE 12522
// exit ;
12520: GO 12680
// tmp := array ;
12522: LD_ADDR_VAR 0 10
12526: PUSH
12527: LD_VAR 0 1
12531: ST_TO_ADDR
// for i = 1 to length do
12532: LD_ADDR_VAR 0 6
12536: PUSH
12537: DOUBLE
12538: LD_INT 1
12540: DEC
12541: ST_TO_ADDR
12542: LD_VAR 0 11
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12668
// begin for j = 1 to array do
12550: LD_ADDR_VAR 0 7
12554: PUSH
12555: DOUBLE
12556: LD_INT 1
12558: DEC
12559: ST_TO_ADDR
12560: LD_VAR 0 1
12564: PUSH
12565: FOR_TO
12566: IFFALSE 12654
// begin k := j + d ;
12568: LD_ADDR_VAR 0 8
12572: PUSH
12573: LD_VAR 0 7
12577: PUSH
12578: LD_VAR 0 9
12582: PLUS
12583: ST_TO_ADDR
// if k > array then
12584: LD_VAR 0 8
12588: PUSH
12589: LD_VAR 0 1
12593: GREATER
12594: IFFALSE 12604
// k := 1 ;
12596: LD_ADDR_VAR 0 8
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// if not k then
12604: LD_VAR 0 8
12608: NOT
12609: IFFALSE 12621
// k := array ;
12611: LD_ADDR_VAR 0 8
12615: PUSH
12616: LD_VAR 0 1
12620: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12621: LD_ADDR_VAR 0 10
12625: PUSH
12626: LD_VAR 0 10
12630: PPUSH
12631: LD_VAR 0 8
12635: PPUSH
12636: LD_VAR 0 1
12640: PUSH
12641: LD_VAR 0 7
12645: ARRAY
12646: PPUSH
12647: CALL_OW 1
12651: ST_TO_ADDR
// end ;
12652: GO 12565
12654: POP
12655: POP
// array := tmp ;
12656: LD_ADDR_VAR 0 1
12660: PUSH
12661: LD_VAR 0 10
12665: ST_TO_ADDR
// end ;
12666: GO 12547
12668: POP
12669: POP
// result := array ;
12670: LD_ADDR_VAR 0 5
12674: PUSH
12675: LD_VAR 0 1
12679: ST_TO_ADDR
// end ;
12680: LD_VAR 0 5
12684: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12685: LD_INT 0
12687: PPUSH
12688: PPUSH
// result := 0 ;
12689: LD_ADDR_VAR 0 3
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// if not array or not value in array then
12697: LD_VAR 0 1
12701: NOT
12702: PUSH
12703: LD_VAR 0 2
12707: PUSH
12708: LD_VAR 0 1
12712: IN
12713: NOT
12714: OR
12715: IFFALSE 12719
// exit ;
12717: GO 12773
// for i = 1 to array do
12719: LD_ADDR_VAR 0 4
12723: PUSH
12724: DOUBLE
12725: LD_INT 1
12727: DEC
12728: ST_TO_ADDR
12729: LD_VAR 0 1
12733: PUSH
12734: FOR_TO
12735: IFFALSE 12771
// if value = array [ i ] then
12737: LD_VAR 0 2
12741: PUSH
12742: LD_VAR 0 1
12746: PUSH
12747: LD_VAR 0 4
12751: ARRAY
12752: EQUAL
12753: IFFALSE 12769
// begin result := i ;
12755: LD_ADDR_VAR 0 3
12759: PUSH
12760: LD_VAR 0 4
12764: ST_TO_ADDR
// exit ;
12765: POP
12766: POP
12767: GO 12773
// end ;
12769: GO 12734
12771: POP
12772: POP
// end ;
12773: LD_VAR 0 3
12777: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12778: LD_INT 0
12780: PPUSH
// vc_chassis := chassis ;
12781: LD_ADDR_OWVAR 37
12785: PUSH
12786: LD_VAR 0 1
12790: ST_TO_ADDR
// vc_engine := engine ;
12791: LD_ADDR_OWVAR 39
12795: PUSH
12796: LD_VAR 0 2
12800: ST_TO_ADDR
// vc_control := control ;
12801: LD_ADDR_OWVAR 38
12805: PUSH
12806: LD_VAR 0 3
12810: ST_TO_ADDR
// vc_weapon := weapon ;
12811: LD_ADDR_OWVAR 40
12815: PUSH
12816: LD_VAR 0 4
12820: ST_TO_ADDR
// vc_fuel_battery := fuel ;
12821: LD_ADDR_OWVAR 41
12825: PUSH
12826: LD_VAR 0 5
12830: ST_TO_ADDR
// end ;
12831: LD_VAR 0 6
12835: RET
// export function WantPlant ( unit ) ; var task ; begin
12836: LD_INT 0
12838: PPUSH
12839: PPUSH
// result := false ;
12840: LD_ADDR_VAR 0 2
12844: PUSH
12845: LD_INT 0
12847: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
12848: LD_ADDR_VAR 0 3
12852: PUSH
12853: LD_VAR 0 1
12857: PPUSH
12858: CALL_OW 437
12862: ST_TO_ADDR
// if task then
12863: LD_VAR 0 3
12867: IFFALSE 12895
// if task [ 1 ] [ 1 ] = p then
12869: LD_VAR 0 3
12873: PUSH
12874: LD_INT 1
12876: ARRAY
12877: PUSH
12878: LD_INT 1
12880: ARRAY
12881: PUSH
12882: LD_STRING p
12884: EQUAL
12885: IFFALSE 12895
// result := true ;
12887: LD_ADDR_VAR 0 2
12891: PUSH
12892: LD_INT 1
12894: ST_TO_ADDR
// end ;
12895: LD_VAR 0 2
12899: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
12900: LD_INT 0
12902: PPUSH
12903: PPUSH
12904: PPUSH
12905: PPUSH
// if pos < 1 then
12906: LD_VAR 0 2
12910: PUSH
12911: LD_INT 1
12913: LESS
12914: IFFALSE 12918
// exit ;
12916: GO 13221
// if pos = 1 then
12918: LD_VAR 0 2
12922: PUSH
12923: LD_INT 1
12925: EQUAL
12926: IFFALSE 12959
// result := Replace ( arr , pos [ 1 ] , value ) else
12928: LD_ADDR_VAR 0 4
12932: PUSH
12933: LD_VAR 0 1
12937: PPUSH
12938: LD_VAR 0 2
12942: PUSH
12943: LD_INT 1
12945: ARRAY
12946: PPUSH
12947: LD_VAR 0 3
12951: PPUSH
12952: CALL_OW 1
12956: ST_TO_ADDR
12957: GO 13221
// begin tmp := arr ;
12959: LD_ADDR_VAR 0 6
12963: PUSH
12964: LD_VAR 0 1
12968: ST_TO_ADDR
// s_arr := [ tmp ] ;
12969: LD_ADDR_VAR 0 7
12973: PUSH
12974: LD_VAR 0 6
12978: PUSH
12979: EMPTY
12980: LIST
12981: ST_TO_ADDR
// for i = 1 to pos - 1 do
12982: LD_ADDR_VAR 0 5
12986: PUSH
12987: DOUBLE
12988: LD_INT 1
12990: DEC
12991: ST_TO_ADDR
12992: LD_VAR 0 2
12996: PUSH
12997: LD_INT 1
12999: MINUS
13000: PUSH
13001: FOR_TO
13002: IFFALSE 13047
// begin tmp := tmp [ pos [ i ] ] ;
13004: LD_ADDR_VAR 0 6
13008: PUSH
13009: LD_VAR 0 6
13013: PUSH
13014: LD_VAR 0 2
13018: PUSH
13019: LD_VAR 0 5
13023: ARRAY
13024: ARRAY
13025: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13026: LD_ADDR_VAR 0 7
13030: PUSH
13031: LD_VAR 0 7
13035: PUSH
13036: LD_VAR 0 6
13040: PUSH
13041: EMPTY
13042: LIST
13043: ADD
13044: ST_TO_ADDR
// end ;
13045: GO 13001
13047: POP
13048: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13049: LD_ADDR_VAR 0 6
13053: PUSH
13054: LD_VAR 0 6
13058: PPUSH
13059: LD_VAR 0 2
13063: PUSH
13064: LD_VAR 0 2
13068: ARRAY
13069: PPUSH
13070: LD_VAR 0 3
13074: PPUSH
13075: CALL_OW 1
13079: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13080: LD_ADDR_VAR 0 7
13084: PUSH
13085: LD_VAR 0 7
13089: PPUSH
13090: LD_VAR 0 7
13094: PPUSH
13095: LD_VAR 0 6
13099: PPUSH
13100: CALL_OW 1
13104: ST_TO_ADDR
// for i = s_arr downto 2 do
13105: LD_ADDR_VAR 0 5
13109: PUSH
13110: DOUBLE
13111: LD_VAR 0 7
13115: INC
13116: ST_TO_ADDR
13117: LD_INT 2
13119: PUSH
13120: FOR_DOWNTO
13121: IFFALSE 13205
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13123: LD_ADDR_VAR 0 6
13127: PUSH
13128: LD_VAR 0 7
13132: PUSH
13133: LD_VAR 0 5
13137: PUSH
13138: LD_INT 1
13140: MINUS
13141: ARRAY
13142: PPUSH
13143: LD_VAR 0 2
13147: PUSH
13148: LD_VAR 0 5
13152: PUSH
13153: LD_INT 1
13155: MINUS
13156: ARRAY
13157: PPUSH
13158: LD_VAR 0 7
13162: PUSH
13163: LD_VAR 0 5
13167: ARRAY
13168: PPUSH
13169: CALL_OW 1
13173: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13174: LD_ADDR_VAR 0 7
13178: PUSH
13179: LD_VAR 0 7
13183: PPUSH
13184: LD_VAR 0 5
13188: PUSH
13189: LD_INT 1
13191: MINUS
13192: PPUSH
13193: LD_VAR 0 6
13197: PPUSH
13198: CALL_OW 1
13202: ST_TO_ADDR
// end ;
13203: GO 13120
13205: POP
13206: POP
// result := s_arr [ 1 ] ;
13207: LD_ADDR_VAR 0 4
13211: PUSH
13212: LD_VAR 0 7
13216: PUSH
13217: LD_INT 1
13219: ARRAY
13220: ST_TO_ADDR
// end ; end ;
13221: LD_VAR 0 4
13225: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13226: LD_INT 0
13228: PPUSH
13229: PPUSH
// if not list then
13230: LD_VAR 0 1
13234: NOT
13235: IFFALSE 13239
// exit ;
13237: GO 13330
// i := list [ pos1 ] ;
13239: LD_ADDR_VAR 0 5
13243: PUSH
13244: LD_VAR 0 1
13248: PUSH
13249: LD_VAR 0 2
13253: ARRAY
13254: ST_TO_ADDR
// if not i then
13255: LD_VAR 0 5
13259: NOT
13260: IFFALSE 13264
// exit ;
13262: GO 13330
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13264: LD_ADDR_VAR 0 1
13268: PUSH
13269: LD_VAR 0 1
13273: PPUSH
13274: LD_VAR 0 2
13278: PPUSH
13279: LD_VAR 0 1
13283: PUSH
13284: LD_VAR 0 3
13288: ARRAY
13289: PPUSH
13290: CALL_OW 1
13294: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13295: LD_ADDR_VAR 0 1
13299: PUSH
13300: LD_VAR 0 1
13304: PPUSH
13305: LD_VAR 0 3
13309: PPUSH
13310: LD_VAR 0 5
13314: PPUSH
13315: CALL_OW 1
13319: ST_TO_ADDR
// result := list ;
13320: LD_ADDR_VAR 0 4
13324: PUSH
13325: LD_VAR 0 1
13329: ST_TO_ADDR
// end ;
13330: LD_VAR 0 4
13334: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13335: LD_INT 0
13337: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13338: LD_ADDR_VAR 0 5
13342: PUSH
13343: LD_VAR 0 1
13347: PPUSH
13348: CALL_OW 250
13352: PPUSH
13353: LD_VAR 0 1
13357: PPUSH
13358: CALL_OW 251
13362: PPUSH
13363: LD_VAR 0 2
13367: PPUSH
13368: LD_VAR 0 3
13372: PPUSH
13373: LD_VAR 0 4
13377: PPUSH
13378: CALL 13388 0 5
13382: ST_TO_ADDR
// end ;
13383: LD_VAR 0 5
13387: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13388: LD_INT 0
13390: PPUSH
13391: PPUSH
13392: PPUSH
13393: PPUSH
// if not list then
13394: LD_VAR 0 3
13398: NOT
13399: IFFALSE 13403
// exit ;
13401: GO 13791
// result := [ ] ;
13403: LD_ADDR_VAR 0 6
13407: PUSH
13408: EMPTY
13409: ST_TO_ADDR
// for i in list do
13410: LD_ADDR_VAR 0 7
13414: PUSH
13415: LD_VAR 0 3
13419: PUSH
13420: FOR_IN
13421: IFFALSE 13623
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13423: LD_ADDR_VAR 0 9
13427: PUSH
13428: LD_VAR 0 7
13432: PPUSH
13433: LD_VAR 0 1
13437: PPUSH
13438: LD_VAR 0 2
13442: PPUSH
13443: CALL_OW 297
13447: ST_TO_ADDR
// if not result then
13448: LD_VAR 0 6
13452: NOT
13453: IFFALSE 13479
// result := [ [ i , tmp ] ] else
13455: LD_ADDR_VAR 0 6
13459: PUSH
13460: LD_VAR 0 7
13464: PUSH
13465: LD_VAR 0 9
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: ST_TO_ADDR
13477: GO 13621
// begin if result [ result ] [ 2 ] < tmp then
13479: LD_VAR 0 6
13483: PUSH
13484: LD_VAR 0 6
13488: ARRAY
13489: PUSH
13490: LD_INT 2
13492: ARRAY
13493: PUSH
13494: LD_VAR 0 9
13498: LESS
13499: IFFALSE 13541
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13501: LD_ADDR_VAR 0 6
13505: PUSH
13506: LD_VAR 0 6
13510: PPUSH
13511: LD_VAR 0 6
13515: PUSH
13516: LD_INT 1
13518: PLUS
13519: PPUSH
13520: LD_VAR 0 7
13524: PUSH
13525: LD_VAR 0 9
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL_OW 2
13538: ST_TO_ADDR
13539: GO 13621
// for j = 1 to result do
13541: LD_ADDR_VAR 0 8
13545: PUSH
13546: DOUBLE
13547: LD_INT 1
13549: DEC
13550: ST_TO_ADDR
13551: LD_VAR 0 6
13555: PUSH
13556: FOR_TO
13557: IFFALSE 13619
// begin if tmp < result [ j ] [ 2 ] then
13559: LD_VAR 0 9
13563: PUSH
13564: LD_VAR 0 6
13568: PUSH
13569: LD_VAR 0 8
13573: ARRAY
13574: PUSH
13575: LD_INT 2
13577: ARRAY
13578: LESS
13579: IFFALSE 13617
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13581: LD_ADDR_VAR 0 6
13585: PUSH
13586: LD_VAR 0 6
13590: PPUSH
13591: LD_VAR 0 8
13595: PPUSH
13596: LD_VAR 0 7
13600: PUSH
13601: LD_VAR 0 9
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 2
13614: ST_TO_ADDR
// break ;
13615: GO 13619
// end ; end ;
13617: GO 13556
13619: POP
13620: POP
// end ; end ;
13621: GO 13420
13623: POP
13624: POP
// if result and not asc then
13625: LD_VAR 0 6
13629: PUSH
13630: LD_VAR 0 4
13634: NOT
13635: AND
13636: IFFALSE 13711
// begin tmp := result ;
13638: LD_ADDR_VAR 0 9
13642: PUSH
13643: LD_VAR 0 6
13647: ST_TO_ADDR
// for i = tmp downto 1 do
13648: LD_ADDR_VAR 0 7
13652: PUSH
13653: DOUBLE
13654: LD_VAR 0 9
13658: INC
13659: ST_TO_ADDR
13660: LD_INT 1
13662: PUSH
13663: FOR_DOWNTO
13664: IFFALSE 13709
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13666: LD_ADDR_VAR 0 6
13670: PUSH
13671: LD_VAR 0 6
13675: PPUSH
13676: LD_VAR 0 9
13680: PUSH
13681: LD_VAR 0 7
13685: MINUS
13686: PUSH
13687: LD_INT 1
13689: PLUS
13690: PPUSH
13691: LD_VAR 0 9
13695: PUSH
13696: LD_VAR 0 7
13700: ARRAY
13701: PPUSH
13702: CALL_OW 1
13706: ST_TO_ADDR
13707: GO 13663
13709: POP
13710: POP
// end ; tmp := [ ] ;
13711: LD_ADDR_VAR 0 9
13715: PUSH
13716: EMPTY
13717: ST_TO_ADDR
// if mode then
13718: LD_VAR 0 5
13722: IFFALSE 13791
// begin for i = 1 to result do
13724: LD_ADDR_VAR 0 7
13728: PUSH
13729: DOUBLE
13730: LD_INT 1
13732: DEC
13733: ST_TO_ADDR
13734: LD_VAR 0 6
13738: PUSH
13739: FOR_TO
13740: IFFALSE 13779
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13742: LD_ADDR_VAR 0 9
13746: PUSH
13747: LD_VAR 0 9
13751: PPUSH
13752: LD_VAR 0 7
13756: PPUSH
13757: LD_VAR 0 6
13761: PUSH
13762: LD_VAR 0 7
13766: ARRAY
13767: PUSH
13768: LD_INT 1
13770: ARRAY
13771: PPUSH
13772: CALL_OW 1
13776: ST_TO_ADDR
13777: GO 13739
13779: POP
13780: POP
// result := tmp ;
13781: LD_ADDR_VAR 0 6
13785: PUSH
13786: LD_VAR 0 9
13790: ST_TO_ADDR
// end ; end ;
13791: LD_VAR 0 6
13795: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13796: LD_INT 0
13798: PPUSH
13799: PPUSH
13800: PPUSH
13801: PPUSH
13802: PPUSH
13803: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13804: LD_ADDR_VAR 0 5
13808: PUSH
13809: LD_INT 0
13811: PUSH
13812: LD_INT 0
13814: PUSH
13815: LD_INT 0
13817: PUSH
13818: EMPTY
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: ST_TO_ADDR
// if not x or not y then
13826: LD_VAR 0 2
13830: NOT
13831: PUSH
13832: LD_VAR 0 3
13836: NOT
13837: OR
13838: IFFALSE 13842
// exit ;
13840: GO 15494
// if not range then
13842: LD_VAR 0 4
13846: NOT
13847: IFFALSE 13857
// range := 10 ;
13849: LD_ADDR_VAR 0 4
13853: PUSH
13854: LD_INT 10
13856: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13857: LD_ADDR_VAR 0 8
13861: PUSH
13862: LD_INT 81
13864: PUSH
13865: LD_VAR 0 1
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: LD_INT 92
13876: PUSH
13877: LD_VAR 0 2
13881: PUSH
13882: LD_VAR 0 3
13886: PUSH
13887: LD_VAR 0 4
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 3
13900: PUSH
13901: LD_INT 21
13903: PUSH
13904: LD_INT 3
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: PPUSH
13920: CALL_OW 69
13924: ST_TO_ADDR
// if not tmp then
13925: LD_VAR 0 8
13929: NOT
13930: IFFALSE 13934
// exit ;
13932: GO 15494
// for i in tmp do
13934: LD_ADDR_VAR 0 6
13938: PUSH
13939: LD_VAR 0 8
13943: PUSH
13944: FOR_IN
13945: IFFALSE 15469
// begin points := [ 0 , 0 , 0 ] ;
13947: LD_ADDR_VAR 0 9
13951: PUSH
13952: LD_INT 0
13954: PUSH
13955: LD_INT 0
13957: PUSH
13958: LD_INT 0
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: ST_TO_ADDR
// bpoints := 1 ;
13966: LD_ADDR_VAR 0 10
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// case GetType ( i ) of unit_human :
13974: LD_VAR 0 6
13978: PPUSH
13979: CALL_OW 247
13983: PUSH
13984: LD_INT 1
13986: DOUBLE
13987: EQUAL
13988: IFTRUE 13992
13990: GO 14570
13992: POP
// begin if GetClass ( i ) = 1 then
13993: LD_VAR 0 6
13997: PPUSH
13998: CALL_OW 257
14002: PUSH
14003: LD_INT 1
14005: EQUAL
14006: IFFALSE 14027
// points := [ 10 , 5 , 3 ] ;
14008: LD_ADDR_VAR 0 9
14012: PUSH
14013: LD_INT 10
14015: PUSH
14016: LD_INT 5
14018: PUSH
14019: LD_INT 3
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14027: LD_VAR 0 6
14031: PPUSH
14032: CALL_OW 257
14036: PUSH
14037: LD_INT 2
14039: PUSH
14040: LD_INT 3
14042: PUSH
14043: LD_INT 4
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: LIST
14050: IN
14051: IFFALSE 14072
// points := [ 3 , 2 , 1 ] ;
14053: LD_ADDR_VAR 0 9
14057: PUSH
14058: LD_INT 3
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: LD_INT 1
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: LIST
14071: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14072: LD_VAR 0 6
14076: PPUSH
14077: CALL_OW 257
14081: PUSH
14082: LD_INT 5
14084: EQUAL
14085: IFFALSE 14106
// points := [ 130 , 5 , 2 ] ;
14087: LD_ADDR_VAR 0 9
14091: PUSH
14092: LD_INT 130
14094: PUSH
14095: LD_INT 5
14097: PUSH
14098: LD_INT 2
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14106: LD_VAR 0 6
14110: PPUSH
14111: CALL_OW 257
14115: PUSH
14116: LD_INT 8
14118: EQUAL
14119: IFFALSE 14140
// points := [ 35 , 35 , 30 ] ;
14121: LD_ADDR_VAR 0 9
14125: PUSH
14126: LD_INT 35
14128: PUSH
14129: LD_INT 35
14131: PUSH
14132: LD_INT 30
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14140: LD_VAR 0 6
14144: PPUSH
14145: CALL_OW 257
14149: PUSH
14150: LD_INT 9
14152: EQUAL
14153: IFFALSE 14174
// points := [ 20 , 55 , 40 ] ;
14155: LD_ADDR_VAR 0 9
14159: PUSH
14160: LD_INT 20
14162: PUSH
14163: LD_INT 55
14165: PUSH
14166: LD_INT 40
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14174: LD_VAR 0 6
14178: PPUSH
14179: CALL_OW 257
14183: PUSH
14184: LD_INT 12
14186: PUSH
14187: LD_INT 16
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: IN
14194: IFFALSE 14215
// points := [ 5 , 3 , 2 ] ;
14196: LD_ADDR_VAR 0 9
14200: PUSH
14201: LD_INT 5
14203: PUSH
14204: LD_INT 3
14206: PUSH
14207: LD_INT 2
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14215: LD_VAR 0 6
14219: PPUSH
14220: CALL_OW 257
14224: PUSH
14225: LD_INT 17
14227: EQUAL
14228: IFFALSE 14249
// points := [ 100 , 50 , 75 ] ;
14230: LD_ADDR_VAR 0 9
14234: PUSH
14235: LD_INT 100
14237: PUSH
14238: LD_INT 50
14240: PUSH
14241: LD_INT 75
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14249: LD_VAR 0 6
14253: PPUSH
14254: CALL_OW 257
14258: PUSH
14259: LD_INT 15
14261: EQUAL
14262: IFFALSE 14283
// points := [ 10 , 5 , 3 ] ;
14264: LD_ADDR_VAR 0 9
14268: PUSH
14269: LD_INT 10
14271: PUSH
14272: LD_INT 5
14274: PUSH
14275: LD_INT 3
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14283: LD_VAR 0 6
14287: PPUSH
14288: CALL_OW 257
14292: PUSH
14293: LD_INT 14
14295: EQUAL
14296: IFFALSE 14317
// points := [ 10 , 0 , 0 ] ;
14298: LD_ADDR_VAR 0 9
14302: PUSH
14303: LD_INT 10
14305: PUSH
14306: LD_INT 0
14308: PUSH
14309: LD_INT 0
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14317: LD_VAR 0 6
14321: PPUSH
14322: CALL_OW 257
14326: PUSH
14327: LD_INT 11
14329: EQUAL
14330: IFFALSE 14351
// points := [ 30 , 10 , 5 ] ;
14332: LD_ADDR_VAR 0 9
14336: PUSH
14337: LD_INT 30
14339: PUSH
14340: LD_INT 10
14342: PUSH
14343: LD_INT 5
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14351: LD_VAR 0 1
14355: PPUSH
14356: LD_INT 5
14358: PPUSH
14359: CALL_OW 321
14363: PUSH
14364: LD_INT 2
14366: EQUAL
14367: IFFALSE 14384
// bpoints := bpoints * 1.8 ;
14369: LD_ADDR_VAR 0 10
14373: PUSH
14374: LD_VAR 0 10
14378: PUSH
14379: LD_REAL  1.80000000000000E+0000
14382: MUL
14383: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14384: LD_VAR 0 6
14388: PPUSH
14389: CALL_OW 257
14393: PUSH
14394: LD_INT 1
14396: PUSH
14397: LD_INT 2
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: LD_INT 4
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: IN
14412: PUSH
14413: LD_VAR 0 1
14417: PPUSH
14418: LD_INT 51
14420: PPUSH
14421: CALL_OW 321
14425: PUSH
14426: LD_INT 2
14428: EQUAL
14429: AND
14430: IFFALSE 14447
// bpoints := bpoints * 1.2 ;
14432: LD_ADDR_VAR 0 10
14436: PUSH
14437: LD_VAR 0 10
14441: PUSH
14442: LD_REAL  1.20000000000000E+0000
14445: MUL
14446: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14447: LD_VAR 0 6
14451: PPUSH
14452: CALL_OW 257
14456: PUSH
14457: LD_INT 5
14459: PUSH
14460: LD_INT 7
14462: PUSH
14463: LD_INT 9
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: IN
14471: PUSH
14472: LD_VAR 0 1
14476: PPUSH
14477: LD_INT 52
14479: PPUSH
14480: CALL_OW 321
14484: PUSH
14485: LD_INT 2
14487: EQUAL
14488: AND
14489: IFFALSE 14506
// bpoints := bpoints * 1.5 ;
14491: LD_ADDR_VAR 0 10
14495: PUSH
14496: LD_VAR 0 10
14500: PUSH
14501: LD_REAL  1.50000000000000E+0000
14504: MUL
14505: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14506: LD_VAR 0 1
14510: PPUSH
14511: LD_INT 66
14513: PPUSH
14514: CALL_OW 321
14518: PUSH
14519: LD_INT 2
14521: EQUAL
14522: IFFALSE 14539
// bpoints := bpoints * 1.1 ;
14524: LD_ADDR_VAR 0 10
14528: PUSH
14529: LD_VAR 0 10
14533: PUSH
14534: LD_REAL  1.10000000000000E+0000
14537: MUL
14538: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14539: LD_ADDR_VAR 0 10
14543: PUSH
14544: LD_VAR 0 10
14548: PUSH
14549: LD_VAR 0 6
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: CALL_OW 259
14561: PUSH
14562: LD_REAL  1.15000000000000E+0000
14565: MUL
14566: MUL
14567: ST_TO_ADDR
// end ; unit_vehicle :
14568: GO 15398
14570: LD_INT 2
14572: DOUBLE
14573: EQUAL
14574: IFTRUE 14578
14576: GO 15386
14578: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14579: LD_VAR 0 6
14583: PPUSH
14584: CALL_OW 264
14588: PUSH
14589: LD_INT 2
14591: PUSH
14592: LD_INT 42
14594: PUSH
14595: LD_INT 24
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: IN
14603: IFFALSE 14624
// points := [ 25 , 5 , 3 ] ;
14605: LD_ADDR_VAR 0 9
14609: PUSH
14610: LD_INT 25
14612: PUSH
14613: LD_INT 5
14615: PUSH
14616: LD_INT 3
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: LIST
14623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14624: LD_VAR 0 6
14628: PPUSH
14629: CALL_OW 264
14633: PUSH
14634: LD_INT 4
14636: PUSH
14637: LD_INT 43
14639: PUSH
14640: LD_INT 25
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: IN
14648: IFFALSE 14669
// points := [ 40 , 15 , 5 ] ;
14650: LD_ADDR_VAR 0 9
14654: PUSH
14655: LD_INT 40
14657: PUSH
14658: LD_INT 15
14660: PUSH
14661: LD_INT 5
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14669: LD_VAR 0 6
14673: PPUSH
14674: CALL_OW 264
14678: PUSH
14679: LD_INT 3
14681: PUSH
14682: LD_INT 23
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: IN
14689: IFFALSE 14710
// points := [ 7 , 25 , 8 ] ;
14691: LD_ADDR_VAR 0 9
14695: PUSH
14696: LD_INT 7
14698: PUSH
14699: LD_INT 25
14701: PUSH
14702: LD_INT 8
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: LIST
14709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14710: LD_VAR 0 6
14714: PPUSH
14715: CALL_OW 264
14719: PUSH
14720: LD_INT 5
14722: PUSH
14723: LD_INT 27
14725: PUSH
14726: LD_INT 44
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: IN
14734: IFFALSE 14755
// points := [ 14 , 50 , 16 ] ;
14736: LD_ADDR_VAR 0 9
14740: PUSH
14741: LD_INT 14
14743: PUSH
14744: LD_INT 50
14746: PUSH
14747: LD_INT 16
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14755: LD_VAR 0 6
14759: PPUSH
14760: CALL_OW 264
14764: PUSH
14765: LD_INT 6
14767: PUSH
14768: LD_INT 46
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: IN
14775: IFFALSE 14796
// points := [ 32 , 120 , 70 ] ;
14777: LD_ADDR_VAR 0 9
14781: PUSH
14782: LD_INT 32
14784: PUSH
14785: LD_INT 120
14787: PUSH
14788: LD_INT 70
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: LIST
14795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
14796: LD_VAR 0 6
14800: PPUSH
14801: CALL_OW 264
14805: PUSH
14806: LD_INT 7
14808: PUSH
14809: LD_INT 28
14811: PUSH
14812: LD_INT 45
14814: PUSH
14815: LD_EXP 44
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: IN
14826: IFFALSE 14847
// points := [ 35 , 20 , 45 ] ;
14828: LD_ADDR_VAR 0 9
14832: PUSH
14833: LD_INT 35
14835: PUSH
14836: LD_INT 20
14838: PUSH
14839: LD_INT 45
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
14847: LD_VAR 0 6
14851: PPUSH
14852: CALL_OW 264
14856: PUSH
14857: LD_INT 47
14859: PUSH
14860: EMPTY
14861: LIST
14862: IN
14863: IFFALSE 14884
// points := [ 67 , 45 , 75 ] ;
14865: LD_ADDR_VAR 0 9
14869: PUSH
14870: LD_INT 67
14872: PUSH
14873: LD_INT 45
14875: PUSH
14876: LD_INT 75
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
14884: LD_VAR 0 6
14888: PPUSH
14889: CALL_OW 264
14893: PUSH
14894: LD_INT 26
14896: PUSH
14897: EMPTY
14898: LIST
14899: IN
14900: IFFALSE 14921
// points := [ 120 , 30 , 80 ] ;
14902: LD_ADDR_VAR 0 9
14906: PUSH
14907: LD_INT 120
14909: PUSH
14910: LD_INT 30
14912: PUSH
14913: LD_INT 80
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
14921: LD_VAR 0 6
14925: PPUSH
14926: CALL_OW 264
14930: PUSH
14931: LD_INT 22
14933: PUSH
14934: EMPTY
14935: LIST
14936: IN
14937: IFFALSE 14958
// points := [ 40 , 1 , 1 ] ;
14939: LD_ADDR_VAR 0 9
14943: PUSH
14944: LD_INT 40
14946: PUSH
14947: LD_INT 1
14949: PUSH
14950: LD_INT 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: LIST
14957: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
14958: LD_VAR 0 6
14962: PPUSH
14963: CALL_OW 264
14967: PUSH
14968: LD_INT 29
14970: PUSH
14971: EMPTY
14972: LIST
14973: IN
14974: IFFALSE 14995
// points := [ 70 , 200 , 400 ] ;
14976: LD_ADDR_VAR 0 9
14980: PUSH
14981: LD_INT 70
14983: PUSH
14984: LD_INT 200
14986: PUSH
14987: LD_INT 400
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: LIST
14994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
14995: LD_VAR 0 6
14999: PPUSH
15000: CALL_OW 264
15004: PUSH
15005: LD_INT 14
15007: PUSH
15008: LD_INT 53
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: IN
15015: IFFALSE 15036
// points := [ 40 , 10 , 20 ] ;
15017: LD_ADDR_VAR 0 9
15021: PUSH
15022: LD_INT 40
15024: PUSH
15025: LD_INT 10
15027: PUSH
15028: LD_INT 20
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: LIST
15035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15036: LD_VAR 0 6
15040: PPUSH
15041: CALL_OW 264
15045: PUSH
15046: LD_INT 9
15048: PUSH
15049: EMPTY
15050: LIST
15051: IN
15052: IFFALSE 15073
// points := [ 5 , 70 , 20 ] ;
15054: LD_ADDR_VAR 0 9
15058: PUSH
15059: LD_INT 5
15061: PUSH
15062: LD_INT 70
15064: PUSH
15065: LD_INT 20
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: LIST
15072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15073: LD_VAR 0 6
15077: PPUSH
15078: CALL_OW 264
15082: PUSH
15083: LD_INT 10
15085: PUSH
15086: EMPTY
15087: LIST
15088: IN
15089: IFFALSE 15110
// points := [ 35 , 110 , 70 ] ;
15091: LD_ADDR_VAR 0 9
15095: PUSH
15096: LD_INT 35
15098: PUSH
15099: LD_INT 110
15101: PUSH
15102: LD_INT 70
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: LIST
15109: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15110: LD_VAR 0 6
15114: PPUSH
15115: CALL_OW 265
15119: PUSH
15120: LD_INT 25
15122: EQUAL
15123: IFFALSE 15144
// points := [ 80 , 65 , 100 ] ;
15125: LD_ADDR_VAR 0 9
15129: PUSH
15130: LD_INT 80
15132: PUSH
15133: LD_INT 65
15135: PUSH
15136: LD_INT 100
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15144: LD_VAR 0 6
15148: PPUSH
15149: CALL_OW 263
15153: PUSH
15154: LD_INT 1
15156: EQUAL
15157: IFFALSE 15192
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15159: LD_ADDR_VAR 0 10
15163: PUSH
15164: LD_VAR 0 10
15168: PUSH
15169: LD_VAR 0 6
15173: PPUSH
15174: CALL_OW 311
15178: PPUSH
15179: LD_INT 3
15181: PPUSH
15182: CALL_OW 259
15186: PUSH
15187: LD_INT 4
15189: MUL
15190: MUL
15191: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15192: LD_VAR 0 6
15196: PPUSH
15197: CALL_OW 263
15201: PUSH
15202: LD_INT 2
15204: EQUAL
15205: IFFALSE 15256
// begin j := IsControledBy ( i ) ;
15207: LD_ADDR_VAR 0 7
15211: PUSH
15212: LD_VAR 0 6
15216: PPUSH
15217: CALL_OW 312
15221: ST_TO_ADDR
// if j then
15222: LD_VAR 0 7
15226: IFFALSE 15256
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15228: LD_ADDR_VAR 0 10
15232: PUSH
15233: LD_VAR 0 10
15237: PUSH
15238: LD_VAR 0 7
15242: PPUSH
15243: LD_INT 3
15245: PPUSH
15246: CALL_OW 259
15250: PUSH
15251: LD_INT 3
15253: MUL
15254: MUL
15255: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15256: LD_VAR 0 6
15260: PPUSH
15261: CALL_OW 264
15265: PUSH
15266: LD_INT 5
15268: PUSH
15269: LD_INT 6
15271: PUSH
15272: LD_INT 46
15274: PUSH
15275: LD_INT 44
15277: PUSH
15278: LD_INT 47
15280: PUSH
15281: LD_INT 45
15283: PUSH
15284: LD_INT 28
15286: PUSH
15287: LD_INT 7
15289: PUSH
15290: LD_INT 27
15292: PUSH
15293: LD_INT 29
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: IN
15308: PUSH
15309: LD_VAR 0 1
15313: PPUSH
15314: LD_INT 52
15316: PPUSH
15317: CALL_OW 321
15321: PUSH
15322: LD_INT 2
15324: EQUAL
15325: AND
15326: IFFALSE 15343
// bpoints := bpoints * 1.2 ;
15328: LD_ADDR_VAR 0 10
15332: PUSH
15333: LD_VAR 0 10
15337: PUSH
15338: LD_REAL  1.20000000000000E+0000
15341: MUL
15342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15343: LD_VAR 0 6
15347: PPUSH
15348: CALL_OW 264
15352: PUSH
15353: LD_INT 6
15355: PUSH
15356: LD_INT 46
15358: PUSH
15359: LD_INT 47
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: IN
15367: IFFALSE 15384
// bpoints := bpoints * 1.2 ;
15369: LD_ADDR_VAR 0 10
15373: PUSH
15374: LD_VAR 0 10
15378: PUSH
15379: LD_REAL  1.20000000000000E+0000
15382: MUL
15383: ST_TO_ADDR
// end ; unit_building :
15384: GO 15398
15386: LD_INT 3
15388: DOUBLE
15389: EQUAL
15390: IFTRUE 15394
15392: GO 15397
15394: POP
// ; end ;
15395: GO 15398
15397: POP
// for j = 1 to 3 do
15398: LD_ADDR_VAR 0 7
15402: PUSH
15403: DOUBLE
15404: LD_INT 1
15406: DEC
15407: ST_TO_ADDR
15408: LD_INT 3
15410: PUSH
15411: FOR_TO
15412: IFFALSE 15465
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15414: LD_ADDR_VAR 0 5
15418: PUSH
15419: LD_VAR 0 5
15423: PPUSH
15424: LD_VAR 0 7
15428: PPUSH
15429: LD_VAR 0 5
15433: PUSH
15434: LD_VAR 0 7
15438: ARRAY
15439: PUSH
15440: LD_VAR 0 9
15444: PUSH
15445: LD_VAR 0 7
15449: ARRAY
15450: PUSH
15451: LD_VAR 0 10
15455: MUL
15456: PLUS
15457: PPUSH
15458: CALL_OW 1
15462: ST_TO_ADDR
15463: GO 15411
15465: POP
15466: POP
// end ;
15467: GO 13944
15469: POP
15470: POP
// result := Replace ( result , 4 , tmp ) ;
15471: LD_ADDR_VAR 0 5
15475: PUSH
15476: LD_VAR 0 5
15480: PPUSH
15481: LD_INT 4
15483: PPUSH
15484: LD_VAR 0 8
15488: PPUSH
15489: CALL_OW 1
15493: ST_TO_ADDR
// end ;
15494: LD_VAR 0 5
15498: RET
// export function DangerAtRange ( unit , range ) ; begin
15499: LD_INT 0
15501: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15502: LD_ADDR_VAR 0 3
15506: PUSH
15507: LD_VAR 0 1
15511: PPUSH
15512: CALL_OW 255
15516: PPUSH
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 250
15526: PPUSH
15527: LD_VAR 0 1
15531: PPUSH
15532: CALL_OW 251
15536: PPUSH
15537: LD_VAR 0 2
15541: PPUSH
15542: CALL 13796 0 4
15546: ST_TO_ADDR
// end ;
15547: LD_VAR 0 3
15551: RET
// export function DangerInArea ( side , area ) ; begin
15552: LD_INT 0
15554: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15555: LD_ADDR_VAR 0 3
15559: PUSH
15560: LD_VAR 0 2
15564: PPUSH
15565: LD_INT 81
15567: PUSH
15568: LD_VAR 0 1
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PPUSH
15577: CALL_OW 70
15581: ST_TO_ADDR
// end ;
15582: LD_VAR 0 3
15586: RET
// export function IsExtension ( b ) ; begin
15587: LD_INT 0
15589: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15590: LD_ADDR_VAR 0 2
15594: PUSH
15595: LD_VAR 0 1
15599: PUSH
15600: LD_INT 23
15602: PUSH
15603: LD_INT 20
15605: PUSH
15606: LD_INT 22
15608: PUSH
15609: LD_INT 17
15611: PUSH
15612: LD_INT 24
15614: PUSH
15615: LD_INT 21
15617: PUSH
15618: LD_INT 19
15620: PUSH
15621: LD_INT 16
15623: PUSH
15624: LD_INT 25
15626: PUSH
15627: LD_INT 18
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: IN
15642: ST_TO_ADDR
// end ;
15643: LD_VAR 0 2
15647: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15648: LD_INT 0
15650: PPUSH
15651: PPUSH
15652: PPUSH
// result := [ ] ;
15653: LD_ADDR_VAR 0 4
15657: PUSH
15658: EMPTY
15659: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15660: LD_ADDR_VAR 0 5
15664: PUSH
15665: LD_VAR 0 2
15669: PPUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PPUSH
15680: CALL_OW 70
15684: ST_TO_ADDR
// if not tmp then
15685: LD_VAR 0 5
15689: NOT
15690: IFFALSE 15694
// exit ;
15692: GO 15758
// if checkLink then
15694: LD_VAR 0 3
15698: IFFALSE 15748
// begin for i in tmp do
15700: LD_ADDR_VAR 0 6
15704: PUSH
15705: LD_VAR 0 5
15709: PUSH
15710: FOR_IN
15711: IFFALSE 15746
// if GetBase ( i ) <> base then
15713: LD_VAR 0 6
15717: PPUSH
15718: CALL_OW 274
15722: PUSH
15723: LD_VAR 0 1
15727: NONEQUAL
15728: IFFALSE 15744
// ComLinkToBase ( base , i ) ;
15730: LD_VAR 0 1
15734: PPUSH
15735: LD_VAR 0 6
15739: PPUSH
15740: CALL_OW 169
15744: GO 15710
15746: POP
15747: POP
// end ; result := tmp ;
15748: LD_ADDR_VAR 0 4
15752: PUSH
15753: LD_VAR 0 5
15757: ST_TO_ADDR
// end ;
15758: LD_VAR 0 4
15762: RET
// export function ComComplete ( units , b ) ; var i ; begin
15763: LD_INT 0
15765: PPUSH
15766: PPUSH
// if not units then
15767: LD_VAR 0 1
15771: NOT
15772: IFFALSE 15776
// exit ;
15774: GO 15866
// for i in units do
15776: LD_ADDR_VAR 0 4
15780: PUSH
15781: LD_VAR 0 1
15785: PUSH
15786: FOR_IN
15787: IFFALSE 15864
// if BuildingStatus ( b ) = bs_build then
15789: LD_VAR 0 2
15793: PPUSH
15794: CALL_OW 461
15798: PUSH
15799: LD_INT 1
15801: EQUAL
15802: IFFALSE 15862
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15804: LD_VAR 0 4
15808: PPUSH
15809: LD_STRING h
15811: PUSH
15812: LD_VAR 0 2
15816: PPUSH
15817: CALL_OW 250
15821: PUSH
15822: LD_VAR 0 2
15826: PPUSH
15827: CALL_OW 251
15831: PUSH
15832: LD_VAR 0 2
15836: PUSH
15837: LD_INT 0
15839: PUSH
15840: LD_INT 0
15842: PUSH
15843: LD_INT 0
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: PUSH
15855: EMPTY
15856: LIST
15857: PPUSH
15858: CALL_OW 446
15862: GO 15786
15864: POP
15865: POP
// end ;
15866: LD_VAR 0 3
15870: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
15875: PPUSH
15876: PPUSH
15877: PPUSH
15878: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
15879: LD_VAR 0 1
15883: NOT
15884: PUSH
15885: LD_VAR 0 1
15889: PPUSH
15890: CALL_OW 263
15894: PUSH
15895: LD_INT 2
15897: NONEQUAL
15898: OR
15899: IFFALSE 15903
// exit ;
15901: GO 16219
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
15903: LD_ADDR_VAR 0 6
15907: PUSH
15908: LD_INT 22
15910: PUSH
15911: LD_VAR 0 1
15915: PPUSH
15916: CALL_OW 255
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 2
15927: PUSH
15928: LD_INT 30
15930: PUSH
15931: LD_INT 36
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 34
15940: PUSH
15941: LD_INT 31
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: LIST
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PPUSH
15957: CALL_OW 69
15961: ST_TO_ADDR
// if not tmp then
15962: LD_VAR 0 6
15966: NOT
15967: IFFALSE 15971
// exit ;
15969: GO 16219
// result := [ ] ;
15971: LD_ADDR_VAR 0 2
15975: PUSH
15976: EMPTY
15977: ST_TO_ADDR
// for i in tmp do
15978: LD_ADDR_VAR 0 3
15982: PUSH
15983: LD_VAR 0 6
15987: PUSH
15988: FOR_IN
15989: IFFALSE 16060
// begin t := UnitsInside ( i ) ;
15991: LD_ADDR_VAR 0 4
15995: PUSH
15996: LD_VAR 0 3
16000: PPUSH
16001: CALL_OW 313
16005: ST_TO_ADDR
// if t then
16006: LD_VAR 0 4
16010: IFFALSE 16058
// for j in t do
16012: LD_ADDR_VAR 0 7
16016: PUSH
16017: LD_VAR 0 4
16021: PUSH
16022: FOR_IN
16023: IFFALSE 16056
// result := Replace ( result , result + 1 , j ) ;
16025: LD_ADDR_VAR 0 2
16029: PUSH
16030: LD_VAR 0 2
16034: PPUSH
16035: LD_VAR 0 2
16039: PUSH
16040: LD_INT 1
16042: PLUS
16043: PPUSH
16044: LD_VAR 0 7
16048: PPUSH
16049: CALL_OW 1
16053: ST_TO_ADDR
16054: GO 16022
16056: POP
16057: POP
// end ;
16058: GO 15988
16060: POP
16061: POP
// if not result then
16062: LD_VAR 0 2
16066: NOT
16067: IFFALSE 16071
// exit ;
16069: GO 16219
// mech := result [ 1 ] ;
16071: LD_ADDR_VAR 0 5
16075: PUSH
16076: LD_VAR 0 2
16080: PUSH
16081: LD_INT 1
16083: ARRAY
16084: ST_TO_ADDR
// if result > 1 then
16085: LD_VAR 0 2
16089: PUSH
16090: LD_INT 1
16092: GREATER
16093: IFFALSE 16205
// begin for i = 2 to result do
16095: LD_ADDR_VAR 0 3
16099: PUSH
16100: DOUBLE
16101: LD_INT 2
16103: DEC
16104: ST_TO_ADDR
16105: LD_VAR 0 2
16109: PUSH
16110: FOR_TO
16111: IFFALSE 16203
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16113: LD_ADDR_VAR 0 4
16117: PUSH
16118: LD_VAR 0 2
16122: PUSH
16123: LD_VAR 0 3
16127: ARRAY
16128: PPUSH
16129: LD_INT 3
16131: PPUSH
16132: CALL_OW 259
16136: PUSH
16137: LD_VAR 0 2
16141: PUSH
16142: LD_VAR 0 3
16146: ARRAY
16147: PPUSH
16148: CALL_OW 432
16152: MINUS
16153: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16154: LD_VAR 0 4
16158: PUSH
16159: LD_VAR 0 5
16163: PPUSH
16164: LD_INT 3
16166: PPUSH
16167: CALL_OW 259
16171: PUSH
16172: LD_VAR 0 5
16176: PPUSH
16177: CALL_OW 432
16181: MINUS
16182: GREATEREQUAL
16183: IFFALSE 16201
// mech := result [ i ] ;
16185: LD_ADDR_VAR 0 5
16189: PUSH
16190: LD_VAR 0 2
16194: PUSH
16195: LD_VAR 0 3
16199: ARRAY
16200: ST_TO_ADDR
// end ;
16201: GO 16110
16203: POP
16204: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16205: LD_VAR 0 1
16209: PPUSH
16210: LD_VAR 0 5
16214: PPUSH
16215: CALL_OW 135
// end ;
16219: LD_VAR 0 2
16223: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16224: LD_INT 0
16226: PPUSH
16227: PPUSH
16228: PPUSH
16229: PPUSH
16230: PPUSH
16231: PPUSH
16232: PPUSH
16233: PPUSH
16234: PPUSH
16235: PPUSH
16236: PPUSH
16237: PPUSH
16238: PPUSH
// result := [ ] ;
16239: LD_ADDR_VAR 0 7
16243: PUSH
16244: EMPTY
16245: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16246: LD_VAR 0 1
16250: PPUSH
16251: CALL_OW 266
16255: PUSH
16256: LD_INT 0
16258: PUSH
16259: LD_INT 1
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: IN
16266: NOT
16267: IFFALSE 16271
// exit ;
16269: GO 17905
// if name then
16271: LD_VAR 0 3
16275: IFFALSE 16291
// SetBName ( base_dep , name ) ;
16277: LD_VAR 0 1
16281: PPUSH
16282: LD_VAR 0 3
16286: PPUSH
16287: CALL_OW 500
// base := GetBase ( base_dep ) ;
16291: LD_ADDR_VAR 0 15
16295: PUSH
16296: LD_VAR 0 1
16300: PPUSH
16301: CALL_OW 274
16305: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16306: LD_ADDR_VAR 0 16
16310: PUSH
16311: LD_VAR 0 1
16315: PPUSH
16316: CALL_OW 255
16320: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16321: LD_ADDR_VAR 0 17
16325: PUSH
16326: LD_VAR 0 1
16330: PPUSH
16331: CALL_OW 248
16335: ST_TO_ADDR
// if sources then
16336: LD_VAR 0 5
16340: IFFALSE 16387
// for i = 1 to 3 do
16342: LD_ADDR_VAR 0 8
16346: PUSH
16347: DOUBLE
16348: LD_INT 1
16350: DEC
16351: ST_TO_ADDR
16352: LD_INT 3
16354: PUSH
16355: FOR_TO
16356: IFFALSE 16385
// AddResourceType ( base , i , sources [ i ] ) ;
16358: LD_VAR 0 15
16362: PPUSH
16363: LD_VAR 0 8
16367: PPUSH
16368: LD_VAR 0 5
16372: PUSH
16373: LD_VAR 0 8
16377: ARRAY
16378: PPUSH
16379: CALL_OW 276
16383: GO 16355
16385: POP
16386: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16387: LD_ADDR_VAR 0 18
16391: PUSH
16392: LD_VAR 0 15
16396: PPUSH
16397: LD_VAR 0 2
16401: PPUSH
16402: LD_INT 1
16404: PPUSH
16405: CALL 15648 0 3
16409: ST_TO_ADDR
// InitHc ;
16410: CALL_OW 19
// InitUc ;
16414: CALL_OW 18
// uc_side := side ;
16418: LD_ADDR_OWVAR 20
16422: PUSH
16423: LD_VAR 0 16
16427: ST_TO_ADDR
// uc_nation := nation ;
16428: LD_ADDR_OWVAR 21
16432: PUSH
16433: LD_VAR 0 17
16437: ST_TO_ADDR
// if buildings then
16438: LD_VAR 0 18
16442: IFFALSE 17764
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16444: LD_ADDR_VAR 0 19
16448: PUSH
16449: LD_VAR 0 18
16453: PPUSH
16454: LD_INT 2
16456: PUSH
16457: LD_INT 30
16459: PUSH
16460: LD_INT 29
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 30
16469: PUSH
16470: LD_INT 30
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: PPUSH
16482: CALL_OW 72
16486: ST_TO_ADDR
// if tmp then
16487: LD_VAR 0 19
16491: IFFALSE 16539
// for i in tmp do
16493: LD_ADDR_VAR 0 8
16497: PUSH
16498: LD_VAR 0 19
16502: PUSH
16503: FOR_IN
16504: IFFALSE 16537
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16506: LD_VAR 0 8
16510: PPUSH
16511: CALL_OW 250
16515: PPUSH
16516: LD_VAR 0 8
16520: PPUSH
16521: CALL_OW 251
16525: PPUSH
16526: LD_VAR 0 16
16530: PPUSH
16531: CALL_OW 441
16535: GO 16503
16537: POP
16538: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16539: LD_VAR 0 18
16543: PPUSH
16544: LD_INT 2
16546: PUSH
16547: LD_INT 30
16549: PUSH
16550: LD_INT 32
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 30
16559: PUSH
16560: LD_INT 33
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: LIST
16571: PPUSH
16572: CALL_OW 72
16576: IFFALSE 16664
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16578: LD_ADDR_VAR 0 8
16582: PUSH
16583: LD_VAR 0 18
16587: PPUSH
16588: LD_INT 2
16590: PUSH
16591: LD_INT 30
16593: PUSH
16594: LD_INT 32
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 30
16603: PUSH
16604: LD_INT 33
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: LIST
16615: PPUSH
16616: CALL_OW 72
16620: PUSH
16621: FOR_IN
16622: IFFALSE 16662
// begin if not GetBWeapon ( i ) then
16624: LD_VAR 0 8
16628: PPUSH
16629: CALL_OW 269
16633: NOT
16634: IFFALSE 16660
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16636: LD_VAR 0 8
16640: PPUSH
16641: LD_VAR 0 8
16645: PPUSH
16646: LD_VAR 0 2
16650: PPUSH
16651: CALL 17910 0 2
16655: PPUSH
16656: CALL_OW 431
// end ;
16660: GO 16621
16662: POP
16663: POP
// end ; for i = 1 to personel do
16664: LD_ADDR_VAR 0 8
16668: PUSH
16669: DOUBLE
16670: LD_INT 1
16672: DEC
16673: ST_TO_ADDR
16674: LD_VAR 0 6
16678: PUSH
16679: FOR_TO
16680: IFFALSE 17744
// begin if i > 4 then
16682: LD_VAR 0 8
16686: PUSH
16687: LD_INT 4
16689: GREATER
16690: IFFALSE 16694
// break ;
16692: GO 17744
// case i of 1 :
16694: LD_VAR 0 8
16698: PUSH
16699: LD_INT 1
16701: DOUBLE
16702: EQUAL
16703: IFTRUE 16707
16705: GO 16787
16707: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16708: LD_ADDR_VAR 0 12
16712: PUSH
16713: LD_VAR 0 18
16717: PPUSH
16718: LD_INT 22
16720: PUSH
16721: LD_VAR 0 16
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 58
16732: PUSH
16733: EMPTY
16734: LIST
16735: PUSH
16736: LD_INT 2
16738: PUSH
16739: LD_INT 30
16741: PUSH
16742: LD_INT 32
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 30
16751: PUSH
16752: LD_INT 4
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 30
16761: PUSH
16762: LD_INT 5
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: PPUSH
16780: CALL_OW 72
16784: ST_TO_ADDR
16785: GO 17009
16787: LD_INT 2
16789: DOUBLE
16790: EQUAL
16791: IFTRUE 16795
16793: GO 16857
16795: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16796: LD_ADDR_VAR 0 12
16800: PUSH
16801: LD_VAR 0 18
16805: PPUSH
16806: LD_INT 22
16808: PUSH
16809: LD_VAR 0 16
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 2
16820: PUSH
16821: LD_INT 30
16823: PUSH
16824: LD_INT 0
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 30
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PPUSH
16850: CALL_OW 72
16854: ST_TO_ADDR
16855: GO 17009
16857: LD_INT 3
16859: DOUBLE
16860: EQUAL
16861: IFTRUE 16865
16863: GO 16927
16865: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
16866: LD_ADDR_VAR 0 12
16870: PUSH
16871: LD_VAR 0 18
16875: PPUSH
16876: LD_INT 22
16878: PUSH
16879: LD_VAR 0 16
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 2
16890: PUSH
16891: LD_INT 30
16893: PUSH
16894: LD_INT 2
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 30
16903: PUSH
16904: LD_INT 3
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: LIST
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PPUSH
16920: CALL_OW 72
16924: ST_TO_ADDR
16925: GO 17009
16927: LD_INT 4
16929: DOUBLE
16930: EQUAL
16931: IFTRUE 16935
16933: GO 17008
16935: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
16936: LD_ADDR_VAR 0 12
16940: PUSH
16941: LD_VAR 0 18
16945: PPUSH
16946: LD_INT 22
16948: PUSH
16949: LD_VAR 0 16
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 2
16960: PUSH
16961: LD_INT 30
16963: PUSH
16964: LD_INT 6
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 30
16973: PUSH
16974: LD_INT 7
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 30
16983: PUSH
16984: LD_INT 8
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PPUSH
17001: CALL_OW 72
17005: ST_TO_ADDR
17006: GO 17009
17008: POP
// if i = 1 then
17009: LD_VAR 0 8
17013: PUSH
17014: LD_INT 1
17016: EQUAL
17017: IFFALSE 17128
// begin tmp := [ ] ;
17019: LD_ADDR_VAR 0 19
17023: PUSH
17024: EMPTY
17025: ST_TO_ADDR
// for j in f do
17026: LD_ADDR_VAR 0 9
17030: PUSH
17031: LD_VAR 0 12
17035: PUSH
17036: FOR_IN
17037: IFFALSE 17110
// if GetBType ( j ) = b_bunker then
17039: LD_VAR 0 9
17043: PPUSH
17044: CALL_OW 266
17048: PUSH
17049: LD_INT 32
17051: EQUAL
17052: IFFALSE 17079
// tmp := Insert ( tmp , 1 , j ) else
17054: LD_ADDR_VAR 0 19
17058: PUSH
17059: LD_VAR 0 19
17063: PPUSH
17064: LD_INT 1
17066: PPUSH
17067: LD_VAR 0 9
17071: PPUSH
17072: CALL_OW 2
17076: ST_TO_ADDR
17077: GO 17108
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17079: LD_ADDR_VAR 0 19
17083: PUSH
17084: LD_VAR 0 19
17088: PPUSH
17089: LD_VAR 0 19
17093: PUSH
17094: LD_INT 1
17096: PLUS
17097: PPUSH
17098: LD_VAR 0 9
17102: PPUSH
17103: CALL_OW 2
17107: ST_TO_ADDR
17108: GO 17036
17110: POP
17111: POP
// if tmp then
17112: LD_VAR 0 19
17116: IFFALSE 17128
// f := tmp ;
17118: LD_ADDR_VAR 0 12
17122: PUSH
17123: LD_VAR 0 19
17127: ST_TO_ADDR
// end ; x := personel [ i ] ;
17128: LD_ADDR_VAR 0 13
17132: PUSH
17133: LD_VAR 0 6
17137: PUSH
17138: LD_VAR 0 8
17142: ARRAY
17143: ST_TO_ADDR
// if x = - 1 then
17144: LD_VAR 0 13
17148: PUSH
17149: LD_INT 1
17151: NEG
17152: EQUAL
17153: IFFALSE 17362
// begin for j in f do
17155: LD_ADDR_VAR 0 9
17159: PUSH
17160: LD_VAR 0 12
17164: PUSH
17165: FOR_IN
17166: IFFALSE 17358
// repeat InitHc ;
17168: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17172: LD_VAR 0 9
17176: PPUSH
17177: CALL_OW 266
17181: PUSH
17182: LD_INT 5
17184: EQUAL
17185: IFFALSE 17255
// begin if UnitsInside ( j ) < 3 then
17187: LD_VAR 0 9
17191: PPUSH
17192: CALL_OW 313
17196: PUSH
17197: LD_INT 3
17199: LESS
17200: IFFALSE 17236
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17202: LD_INT 0
17204: PPUSH
17205: LD_INT 5
17207: PUSH
17208: LD_INT 8
17210: PUSH
17211: LD_INT 9
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: PUSH
17219: LD_VAR 0 17
17223: ARRAY
17224: PPUSH
17225: LD_VAR 0 4
17229: PPUSH
17230: CALL_OW 380
17234: GO 17253
// PrepareHuman ( false , i , skill ) ;
17236: LD_INT 0
17238: PPUSH
17239: LD_VAR 0 8
17243: PPUSH
17244: LD_VAR 0 4
17248: PPUSH
17249: CALL_OW 380
// end else
17253: GO 17272
// PrepareHuman ( false , i , skill ) ;
17255: LD_INT 0
17257: PPUSH
17258: LD_VAR 0 8
17262: PPUSH
17263: LD_VAR 0 4
17267: PPUSH
17268: CALL_OW 380
// un := CreateHuman ;
17272: LD_ADDR_VAR 0 14
17276: PUSH
17277: CALL_OW 44
17281: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17282: LD_ADDR_VAR 0 7
17286: PUSH
17287: LD_VAR 0 7
17291: PPUSH
17292: LD_INT 1
17294: PPUSH
17295: LD_VAR 0 14
17299: PPUSH
17300: CALL_OW 2
17304: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17305: LD_VAR 0 14
17309: PPUSH
17310: LD_VAR 0 9
17314: PPUSH
17315: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17319: LD_VAR 0 9
17323: PPUSH
17324: CALL_OW 313
17328: PUSH
17329: LD_INT 6
17331: EQUAL
17332: PUSH
17333: LD_VAR 0 9
17337: PPUSH
17338: CALL_OW 266
17342: PUSH
17343: LD_INT 32
17345: PUSH
17346: LD_INT 31
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: IN
17353: OR
17354: IFFALSE 17168
17356: GO 17165
17358: POP
17359: POP
// end else
17360: GO 17742
// for j = 1 to x do
17362: LD_ADDR_VAR 0 9
17366: PUSH
17367: DOUBLE
17368: LD_INT 1
17370: DEC
17371: ST_TO_ADDR
17372: LD_VAR 0 13
17376: PUSH
17377: FOR_TO
17378: IFFALSE 17740
// begin InitHc ;
17380: CALL_OW 19
// if not f then
17384: LD_VAR 0 12
17388: NOT
17389: IFFALSE 17478
// begin PrepareHuman ( false , i , skill ) ;
17391: LD_INT 0
17393: PPUSH
17394: LD_VAR 0 8
17398: PPUSH
17399: LD_VAR 0 4
17403: PPUSH
17404: CALL_OW 380
// un := CreateHuman ;
17408: LD_ADDR_VAR 0 14
17412: PUSH
17413: CALL_OW 44
17417: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17418: LD_ADDR_VAR 0 7
17422: PUSH
17423: LD_VAR 0 7
17427: PPUSH
17428: LD_INT 1
17430: PPUSH
17431: LD_VAR 0 14
17435: PPUSH
17436: CALL_OW 2
17440: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17441: LD_VAR 0 14
17445: PPUSH
17446: LD_VAR 0 1
17450: PPUSH
17451: CALL_OW 250
17455: PPUSH
17456: LD_VAR 0 1
17460: PPUSH
17461: CALL_OW 251
17465: PPUSH
17466: LD_INT 10
17468: PPUSH
17469: LD_INT 0
17471: PPUSH
17472: CALL_OW 50
// continue ;
17476: GO 17377
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17478: LD_VAR 0 12
17482: PUSH
17483: LD_INT 1
17485: ARRAY
17486: PPUSH
17487: CALL_OW 313
17491: PUSH
17492: LD_VAR 0 12
17496: PUSH
17497: LD_INT 1
17499: ARRAY
17500: PPUSH
17501: CALL_OW 266
17505: PUSH
17506: LD_INT 32
17508: PUSH
17509: LD_INT 31
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: IN
17516: AND
17517: PUSH
17518: LD_VAR 0 12
17522: PUSH
17523: LD_INT 1
17525: ARRAY
17526: PPUSH
17527: CALL_OW 313
17531: PUSH
17532: LD_INT 6
17534: EQUAL
17535: OR
17536: IFFALSE 17556
// f := Delete ( f , 1 ) ;
17538: LD_ADDR_VAR 0 12
17542: PUSH
17543: LD_VAR 0 12
17547: PPUSH
17548: LD_INT 1
17550: PPUSH
17551: CALL_OW 3
17555: ST_TO_ADDR
// if not f then
17556: LD_VAR 0 12
17560: NOT
17561: IFFALSE 17579
// begin x := x + 2 ;
17563: LD_ADDR_VAR 0 13
17567: PUSH
17568: LD_VAR 0 13
17572: PUSH
17573: LD_INT 2
17575: PLUS
17576: ST_TO_ADDR
// continue ;
17577: GO 17377
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17579: LD_VAR 0 12
17583: PUSH
17584: LD_INT 1
17586: ARRAY
17587: PPUSH
17588: CALL_OW 266
17592: PUSH
17593: LD_INT 5
17595: EQUAL
17596: IFFALSE 17670
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17598: LD_VAR 0 12
17602: PUSH
17603: LD_INT 1
17605: ARRAY
17606: PPUSH
17607: CALL_OW 313
17611: PUSH
17612: LD_INT 3
17614: LESS
17615: IFFALSE 17651
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17617: LD_INT 0
17619: PPUSH
17620: LD_INT 5
17622: PUSH
17623: LD_INT 8
17625: PUSH
17626: LD_INT 9
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: LIST
17633: PUSH
17634: LD_VAR 0 17
17638: ARRAY
17639: PPUSH
17640: LD_VAR 0 4
17644: PPUSH
17645: CALL_OW 380
17649: GO 17668
// PrepareHuman ( false , i , skill ) ;
17651: LD_INT 0
17653: PPUSH
17654: LD_VAR 0 8
17658: PPUSH
17659: LD_VAR 0 4
17663: PPUSH
17664: CALL_OW 380
// end else
17668: GO 17687
// PrepareHuman ( false , i , skill ) ;
17670: LD_INT 0
17672: PPUSH
17673: LD_VAR 0 8
17677: PPUSH
17678: LD_VAR 0 4
17682: PPUSH
17683: CALL_OW 380
// un := CreateHuman ;
17687: LD_ADDR_VAR 0 14
17691: PUSH
17692: CALL_OW 44
17696: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17697: LD_ADDR_VAR 0 7
17701: PUSH
17702: LD_VAR 0 7
17706: PPUSH
17707: LD_INT 1
17709: PPUSH
17710: LD_VAR 0 14
17714: PPUSH
17715: CALL_OW 2
17719: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17720: LD_VAR 0 14
17724: PPUSH
17725: LD_VAR 0 12
17729: PUSH
17730: LD_INT 1
17732: ARRAY
17733: PPUSH
17734: CALL_OW 52
// end ;
17738: GO 17377
17740: POP
17741: POP
// end ;
17742: GO 16679
17744: POP
17745: POP
// result := result ^ buildings ;
17746: LD_ADDR_VAR 0 7
17750: PUSH
17751: LD_VAR 0 7
17755: PUSH
17756: LD_VAR 0 18
17760: ADD
17761: ST_TO_ADDR
// end else
17762: GO 17905
// begin for i = 1 to personel do
17764: LD_ADDR_VAR 0 8
17768: PUSH
17769: DOUBLE
17770: LD_INT 1
17772: DEC
17773: ST_TO_ADDR
17774: LD_VAR 0 6
17778: PUSH
17779: FOR_TO
17780: IFFALSE 17903
// begin if i > 4 then
17782: LD_VAR 0 8
17786: PUSH
17787: LD_INT 4
17789: GREATER
17790: IFFALSE 17794
// break ;
17792: GO 17903
// x := personel [ i ] ;
17794: LD_ADDR_VAR 0 13
17798: PUSH
17799: LD_VAR 0 6
17803: PUSH
17804: LD_VAR 0 8
17808: ARRAY
17809: ST_TO_ADDR
// if x = - 1 then
17810: LD_VAR 0 13
17814: PUSH
17815: LD_INT 1
17817: NEG
17818: EQUAL
17819: IFFALSE 17823
// continue ;
17821: GO 17779
// PrepareHuman ( false , i , skill ) ;
17823: LD_INT 0
17825: PPUSH
17826: LD_VAR 0 8
17830: PPUSH
17831: LD_VAR 0 4
17835: PPUSH
17836: CALL_OW 380
// un := CreateHuman ;
17840: LD_ADDR_VAR 0 14
17844: PUSH
17845: CALL_OW 44
17849: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17850: LD_VAR 0 14
17854: PPUSH
17855: LD_VAR 0 1
17859: PPUSH
17860: CALL_OW 250
17864: PPUSH
17865: LD_VAR 0 1
17869: PPUSH
17870: CALL_OW 251
17874: PPUSH
17875: LD_INT 10
17877: PPUSH
17878: LD_INT 0
17880: PPUSH
17881: CALL_OW 50
// result := result ^ un ;
17885: LD_ADDR_VAR 0 7
17889: PUSH
17890: LD_VAR 0 7
17894: PUSH
17895: LD_VAR 0 14
17899: ADD
17900: ST_TO_ADDR
// end ;
17901: GO 17779
17903: POP
17904: POP
// end ; end ;
17905: LD_VAR 0 7
17909: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
17910: LD_INT 0
17912: PPUSH
17913: PPUSH
17914: PPUSH
17915: PPUSH
17916: PPUSH
17917: PPUSH
17918: PPUSH
17919: PPUSH
17920: PPUSH
17921: PPUSH
17922: PPUSH
17923: PPUSH
17924: PPUSH
17925: PPUSH
17926: PPUSH
17927: PPUSH
// result := false ;
17928: LD_ADDR_VAR 0 3
17932: PUSH
17933: LD_INT 0
17935: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
17936: LD_VAR 0 1
17940: NOT
17941: PUSH
17942: LD_VAR 0 1
17946: PPUSH
17947: CALL_OW 266
17951: PUSH
17952: LD_INT 32
17954: PUSH
17955: LD_INT 33
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: IN
17962: NOT
17963: OR
17964: IFFALSE 17968
// exit ;
17966: GO 19077
// nat := GetNation ( tower ) ;
17968: LD_ADDR_VAR 0 12
17972: PUSH
17973: LD_VAR 0 1
17977: PPUSH
17978: CALL_OW 248
17982: ST_TO_ADDR
// side := GetSide ( tower ) ;
17983: LD_ADDR_VAR 0 16
17987: PUSH
17988: LD_VAR 0 1
17992: PPUSH
17993: CALL_OW 255
17997: ST_TO_ADDR
// x := GetX ( tower ) ;
17998: LD_ADDR_VAR 0 10
18002: PUSH
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 250
18012: ST_TO_ADDR
// y := GetY ( tower ) ;
18013: LD_ADDR_VAR 0 11
18017: PUSH
18018: LD_VAR 0 1
18022: PPUSH
18023: CALL_OW 251
18027: ST_TO_ADDR
// if not x or not y then
18028: LD_VAR 0 10
18032: NOT
18033: PUSH
18034: LD_VAR 0 11
18038: NOT
18039: OR
18040: IFFALSE 18044
// exit ;
18042: GO 19077
// weapon := 0 ;
18044: LD_ADDR_VAR 0 18
18048: PUSH
18049: LD_INT 0
18051: ST_TO_ADDR
// fac_list := [ ] ;
18052: LD_ADDR_VAR 0 17
18056: PUSH
18057: EMPTY
18058: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18059: LD_ADDR_VAR 0 6
18063: PUSH
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 274
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: LD_INT 0
18081: PPUSH
18082: CALL 15648 0 3
18086: PPUSH
18087: LD_INT 30
18089: PUSH
18090: LD_INT 3
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 72
18101: ST_TO_ADDR
// if not factories then
18102: LD_VAR 0 6
18106: NOT
18107: IFFALSE 18111
// exit ;
18109: GO 19077
// for i in factories do
18111: LD_ADDR_VAR 0 8
18115: PUSH
18116: LD_VAR 0 6
18120: PUSH
18121: FOR_IN
18122: IFFALSE 18147
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18124: LD_ADDR_VAR 0 17
18128: PUSH
18129: LD_VAR 0 17
18133: PUSH
18134: LD_VAR 0 8
18138: PPUSH
18139: CALL_OW 478
18143: UNION
18144: ST_TO_ADDR
18145: GO 18121
18147: POP
18148: POP
// if not fac_list then
18149: LD_VAR 0 17
18153: NOT
18154: IFFALSE 18158
// exit ;
18156: GO 19077
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18158: LD_ADDR_VAR 0 5
18162: PUSH
18163: LD_INT 4
18165: PUSH
18166: LD_INT 5
18168: PUSH
18169: LD_INT 9
18171: PUSH
18172: LD_INT 10
18174: PUSH
18175: LD_INT 6
18177: PUSH
18178: LD_INT 7
18180: PUSH
18181: LD_INT 11
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 27
18195: PUSH
18196: LD_INT 28
18198: PUSH
18199: LD_INT 26
18201: PUSH
18202: LD_INT 30
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 43
18213: PUSH
18214: LD_INT 44
18216: PUSH
18217: LD_INT 46
18219: PUSH
18220: LD_INT 45
18222: PUSH
18223: LD_INT 47
18225: PUSH
18226: LD_INT 49
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: LIST
18241: PUSH
18242: LD_VAR 0 12
18246: ARRAY
18247: ST_TO_ADDR
// list := list isect fac_list ;
18248: LD_ADDR_VAR 0 5
18252: PUSH
18253: LD_VAR 0 5
18257: PUSH
18258: LD_VAR 0 17
18262: ISECT
18263: ST_TO_ADDR
// if not list then
18264: LD_VAR 0 5
18268: NOT
18269: IFFALSE 18273
// exit ;
18271: GO 19077
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18273: LD_VAR 0 12
18277: PUSH
18278: LD_INT 3
18280: EQUAL
18281: PUSH
18282: LD_INT 49
18284: PUSH
18285: LD_VAR 0 5
18289: IN
18290: AND
18291: PUSH
18292: LD_INT 31
18294: PPUSH
18295: LD_VAR 0 16
18299: PPUSH
18300: CALL_OW 321
18304: PUSH
18305: LD_INT 2
18307: EQUAL
18308: AND
18309: IFFALSE 18369
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18311: LD_INT 22
18313: PUSH
18314: LD_VAR 0 16
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 35
18325: PUSH
18326: LD_INT 49
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 91
18335: PUSH
18336: LD_VAR 0 1
18340: PUSH
18341: LD_INT 10
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: LIST
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: LIST
18353: PPUSH
18354: CALL_OW 69
18358: NOT
18359: IFFALSE 18369
// weapon := ru_time_lapser ;
18361: LD_ADDR_VAR 0 18
18365: PUSH
18366: LD_INT 49
18368: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18369: LD_VAR 0 12
18373: PUSH
18374: LD_INT 1
18376: PUSH
18377: LD_INT 2
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: IN
18384: PUSH
18385: LD_INT 11
18387: PUSH
18388: LD_VAR 0 5
18392: IN
18393: PUSH
18394: LD_INT 30
18396: PUSH
18397: LD_VAR 0 5
18401: IN
18402: OR
18403: AND
18404: PUSH
18405: LD_INT 6
18407: PPUSH
18408: LD_VAR 0 16
18412: PPUSH
18413: CALL_OW 321
18417: PUSH
18418: LD_INT 2
18420: EQUAL
18421: AND
18422: IFFALSE 18587
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18424: LD_INT 22
18426: PUSH
18427: LD_VAR 0 16
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 2
18438: PUSH
18439: LD_INT 35
18441: PUSH
18442: LD_INT 11
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 35
18451: PUSH
18452: LD_INT 30
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 91
18466: PUSH
18467: LD_VAR 0 1
18471: PUSH
18472: LD_INT 18
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: LIST
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: LIST
18484: PPUSH
18485: CALL_OW 69
18489: NOT
18490: PUSH
18491: LD_INT 22
18493: PUSH
18494: LD_VAR 0 16
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: LD_INT 30
18508: PUSH
18509: LD_INT 32
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 30
18518: PUSH
18519: LD_INT 33
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 91
18533: PUSH
18534: LD_VAR 0 1
18538: PUSH
18539: LD_INT 12
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: LIST
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: PPUSH
18555: CALL_OW 69
18559: PUSH
18560: LD_INT 2
18562: GREATER
18563: AND
18564: IFFALSE 18587
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18566: LD_ADDR_VAR 0 18
18570: PUSH
18571: LD_INT 11
18573: PUSH
18574: LD_INT 30
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_VAR 0 12
18585: ARRAY
18586: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18587: LD_VAR 0 18
18591: NOT
18592: PUSH
18593: LD_INT 40
18595: PPUSH
18596: LD_VAR 0 16
18600: PPUSH
18601: CALL_OW 321
18605: PUSH
18606: LD_INT 2
18608: EQUAL
18609: AND
18610: PUSH
18611: LD_INT 7
18613: PUSH
18614: LD_VAR 0 5
18618: IN
18619: PUSH
18620: LD_INT 28
18622: PUSH
18623: LD_VAR 0 5
18627: IN
18628: OR
18629: PUSH
18630: LD_INT 45
18632: PUSH
18633: LD_VAR 0 5
18637: IN
18638: OR
18639: AND
18640: IFFALSE 18894
// begin hex := GetHexInfo ( x , y ) ;
18642: LD_ADDR_VAR 0 4
18646: PUSH
18647: LD_VAR 0 10
18651: PPUSH
18652: LD_VAR 0 11
18656: PPUSH
18657: CALL_OW 546
18661: ST_TO_ADDR
// if hex [ 1 ] then
18662: LD_VAR 0 4
18666: PUSH
18667: LD_INT 1
18669: ARRAY
18670: IFFALSE 18674
// exit ;
18672: GO 19077
// height := hex [ 2 ] ;
18674: LD_ADDR_VAR 0 15
18678: PUSH
18679: LD_VAR 0 4
18683: PUSH
18684: LD_INT 2
18686: ARRAY
18687: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18688: LD_ADDR_VAR 0 14
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: LD_INT 3
18701: PUSH
18702: LD_INT 5
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: ST_TO_ADDR
// for i in tmp do
18711: LD_ADDR_VAR 0 8
18715: PUSH
18716: LD_VAR 0 14
18720: PUSH
18721: FOR_IN
18722: IFFALSE 18892
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18724: LD_ADDR_VAR 0 9
18728: PUSH
18729: LD_VAR 0 10
18733: PPUSH
18734: LD_VAR 0 8
18738: PPUSH
18739: LD_INT 5
18741: PPUSH
18742: CALL_OW 272
18746: PUSH
18747: LD_VAR 0 11
18751: PPUSH
18752: LD_VAR 0 8
18756: PPUSH
18757: LD_INT 5
18759: PPUSH
18760: CALL_OW 273
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18769: LD_VAR 0 9
18773: PUSH
18774: LD_INT 1
18776: ARRAY
18777: PPUSH
18778: LD_VAR 0 9
18782: PUSH
18783: LD_INT 2
18785: ARRAY
18786: PPUSH
18787: CALL_OW 488
18791: IFFALSE 18890
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18793: LD_ADDR_VAR 0 4
18797: PUSH
18798: LD_VAR 0 9
18802: PUSH
18803: LD_INT 1
18805: ARRAY
18806: PPUSH
18807: LD_VAR 0 9
18811: PUSH
18812: LD_INT 2
18814: ARRAY
18815: PPUSH
18816: CALL_OW 546
18820: ST_TO_ADDR
// if hex [ 1 ] then
18821: LD_VAR 0 4
18825: PUSH
18826: LD_INT 1
18828: ARRAY
18829: IFFALSE 18833
// continue ;
18831: GO 18721
// h := hex [ 2 ] ;
18833: LD_ADDR_VAR 0 13
18837: PUSH
18838: LD_VAR 0 4
18842: PUSH
18843: LD_INT 2
18845: ARRAY
18846: ST_TO_ADDR
// if h + 7 < height then
18847: LD_VAR 0 13
18851: PUSH
18852: LD_INT 7
18854: PLUS
18855: PUSH
18856: LD_VAR 0 15
18860: LESS
18861: IFFALSE 18890
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
18863: LD_ADDR_VAR 0 18
18867: PUSH
18868: LD_INT 7
18870: PUSH
18871: LD_INT 28
18873: PUSH
18874: LD_INT 45
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: LIST
18881: PUSH
18882: LD_VAR 0 12
18886: ARRAY
18887: ST_TO_ADDR
// break ;
18888: GO 18892
// end ; end ; end ;
18890: GO 18721
18892: POP
18893: POP
// end ; if not weapon then
18894: LD_VAR 0 18
18898: NOT
18899: IFFALSE 18959
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
18901: LD_ADDR_VAR 0 5
18905: PUSH
18906: LD_VAR 0 5
18910: PUSH
18911: LD_INT 11
18913: PUSH
18914: LD_INT 30
18916: PUSH
18917: LD_INT 49
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: LIST
18924: DIFF
18925: ST_TO_ADDR
// if not list then
18926: LD_VAR 0 5
18930: NOT
18931: IFFALSE 18935
// exit ;
18933: GO 19077
// weapon := list [ rand ( 1 , list ) ] ;
18935: LD_ADDR_VAR 0 18
18939: PUSH
18940: LD_VAR 0 5
18944: PUSH
18945: LD_INT 1
18947: PPUSH
18948: LD_VAR 0 5
18952: PPUSH
18953: CALL_OW 12
18957: ARRAY
18958: ST_TO_ADDR
// end ; if weapon then
18959: LD_VAR 0 18
18963: IFFALSE 19077
// begin tmp := CostOfWeapon ( weapon ) ;
18965: LD_ADDR_VAR 0 14
18969: PUSH
18970: LD_VAR 0 18
18974: PPUSH
18975: CALL_OW 451
18979: ST_TO_ADDR
// j := GetBase ( tower ) ;
18980: LD_ADDR_VAR 0 9
18984: PUSH
18985: LD_VAR 0 1
18989: PPUSH
18990: CALL_OW 274
18994: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
18995: LD_VAR 0 9
18999: PPUSH
19000: LD_INT 1
19002: PPUSH
19003: CALL_OW 275
19007: PUSH
19008: LD_VAR 0 14
19012: PUSH
19013: LD_INT 1
19015: ARRAY
19016: GREATEREQUAL
19017: PUSH
19018: LD_VAR 0 9
19022: PPUSH
19023: LD_INT 2
19025: PPUSH
19026: CALL_OW 275
19030: PUSH
19031: LD_VAR 0 14
19035: PUSH
19036: LD_INT 2
19038: ARRAY
19039: GREATEREQUAL
19040: AND
19041: PUSH
19042: LD_VAR 0 9
19046: PPUSH
19047: LD_INT 3
19049: PPUSH
19050: CALL_OW 275
19054: PUSH
19055: LD_VAR 0 14
19059: PUSH
19060: LD_INT 3
19062: ARRAY
19063: GREATEREQUAL
19064: AND
19065: IFFALSE 19077
// result := weapon ;
19067: LD_ADDR_VAR 0 3
19071: PUSH
19072: LD_VAR 0 18
19076: ST_TO_ADDR
// end ; end ;
19077: LD_VAR 0 3
19081: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19082: LD_INT 0
19084: PPUSH
19085: PPUSH
// result := true ;
19086: LD_ADDR_VAR 0 3
19090: PUSH
19091: LD_INT 1
19093: ST_TO_ADDR
// if array1 = array2 then
19094: LD_VAR 0 1
19098: PUSH
19099: LD_VAR 0 2
19103: EQUAL
19104: IFFALSE 19164
// begin for i = 1 to array1 do
19106: LD_ADDR_VAR 0 4
19110: PUSH
19111: DOUBLE
19112: LD_INT 1
19114: DEC
19115: ST_TO_ADDR
19116: LD_VAR 0 1
19120: PUSH
19121: FOR_TO
19122: IFFALSE 19160
// if array1 [ i ] <> array2 [ i ] then
19124: LD_VAR 0 1
19128: PUSH
19129: LD_VAR 0 4
19133: ARRAY
19134: PUSH
19135: LD_VAR 0 2
19139: PUSH
19140: LD_VAR 0 4
19144: ARRAY
19145: NONEQUAL
19146: IFFALSE 19158
// begin result := false ;
19148: LD_ADDR_VAR 0 3
19152: PUSH
19153: LD_INT 0
19155: ST_TO_ADDR
// break ;
19156: GO 19160
// end ;
19158: GO 19121
19160: POP
19161: POP
// end else
19162: GO 19172
// result := false ;
19164: LD_ADDR_VAR 0 3
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
// end ;
19172: LD_VAR 0 3
19176: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19177: LD_INT 0
19179: PPUSH
19180: PPUSH
// if not array1 or not array2 then
19181: LD_VAR 0 1
19185: NOT
19186: PUSH
19187: LD_VAR 0 2
19191: NOT
19192: OR
19193: IFFALSE 19197
// exit ;
19195: GO 19261
// result := true ;
19197: LD_ADDR_VAR 0 3
19201: PUSH
19202: LD_INT 1
19204: ST_TO_ADDR
// for i = 1 to array1 do
19205: LD_ADDR_VAR 0 4
19209: PUSH
19210: DOUBLE
19211: LD_INT 1
19213: DEC
19214: ST_TO_ADDR
19215: LD_VAR 0 1
19219: PUSH
19220: FOR_TO
19221: IFFALSE 19259
// if array1 [ i ] <> array2 [ i ] then
19223: LD_VAR 0 1
19227: PUSH
19228: LD_VAR 0 4
19232: ARRAY
19233: PUSH
19234: LD_VAR 0 2
19238: PUSH
19239: LD_VAR 0 4
19243: ARRAY
19244: NONEQUAL
19245: IFFALSE 19257
// begin result := false ;
19247: LD_ADDR_VAR 0 3
19251: PUSH
19252: LD_INT 0
19254: ST_TO_ADDR
// break ;
19255: GO 19259
// end ;
19257: GO 19220
19259: POP
19260: POP
// end ;
19261: LD_VAR 0 3
19265: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19266: LD_INT 0
19268: PPUSH
19269: PPUSH
19270: PPUSH
// pom := GetBase ( fac ) ;
19271: LD_ADDR_VAR 0 5
19275: PUSH
19276: LD_VAR 0 1
19280: PPUSH
19281: CALL_OW 274
19285: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19286: LD_ADDR_VAR 0 4
19290: PUSH
19291: LD_VAR 0 2
19295: PUSH
19296: LD_INT 1
19298: ARRAY
19299: PPUSH
19300: LD_VAR 0 2
19304: PUSH
19305: LD_INT 2
19307: ARRAY
19308: PPUSH
19309: LD_VAR 0 2
19313: PUSH
19314: LD_INT 3
19316: ARRAY
19317: PPUSH
19318: LD_VAR 0 2
19322: PUSH
19323: LD_INT 4
19325: ARRAY
19326: PPUSH
19327: CALL_OW 449
19331: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19332: LD_ADDR_VAR 0 3
19336: PUSH
19337: LD_VAR 0 5
19341: PPUSH
19342: LD_INT 1
19344: PPUSH
19345: CALL_OW 275
19349: PUSH
19350: LD_VAR 0 4
19354: PUSH
19355: LD_INT 1
19357: ARRAY
19358: GREATEREQUAL
19359: PUSH
19360: LD_VAR 0 5
19364: PPUSH
19365: LD_INT 2
19367: PPUSH
19368: CALL_OW 275
19372: PUSH
19373: LD_VAR 0 4
19377: PUSH
19378: LD_INT 2
19380: ARRAY
19381: GREATEREQUAL
19382: AND
19383: PUSH
19384: LD_VAR 0 5
19388: PPUSH
19389: LD_INT 3
19391: PPUSH
19392: CALL_OW 275
19396: PUSH
19397: LD_VAR 0 4
19401: PUSH
19402: LD_INT 3
19404: ARRAY
19405: GREATEREQUAL
19406: AND
19407: ST_TO_ADDR
// end ;
19408: LD_VAR 0 3
19412: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19413: LD_INT 0
19415: PPUSH
19416: PPUSH
19417: PPUSH
19418: PPUSH
// pom := GetBase ( building ) ;
19419: LD_ADDR_VAR 0 3
19423: PUSH
19424: LD_VAR 0 1
19428: PPUSH
19429: CALL_OW 274
19433: ST_TO_ADDR
// if not pom then
19434: LD_VAR 0 3
19438: NOT
19439: IFFALSE 19443
// exit ;
19441: GO 19613
// btype := GetBType ( building ) ;
19443: LD_ADDR_VAR 0 5
19447: PUSH
19448: LD_VAR 0 1
19452: PPUSH
19453: CALL_OW 266
19457: ST_TO_ADDR
// if btype = b_armoury then
19458: LD_VAR 0 5
19462: PUSH
19463: LD_INT 4
19465: EQUAL
19466: IFFALSE 19476
// btype := b_barracks ;
19468: LD_ADDR_VAR 0 5
19472: PUSH
19473: LD_INT 5
19475: ST_TO_ADDR
// if btype = b_depot then
19476: LD_VAR 0 5
19480: PUSH
19481: LD_INT 0
19483: EQUAL
19484: IFFALSE 19494
// btype := b_warehouse ;
19486: LD_ADDR_VAR 0 5
19490: PUSH
19491: LD_INT 1
19493: ST_TO_ADDR
// if btype = b_workshop then
19494: LD_VAR 0 5
19498: PUSH
19499: LD_INT 2
19501: EQUAL
19502: IFFALSE 19512
// btype := b_factory ;
19504: LD_ADDR_VAR 0 5
19508: PUSH
19509: LD_INT 3
19511: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19512: LD_ADDR_VAR 0 4
19516: PUSH
19517: LD_VAR 0 5
19521: PPUSH
19522: LD_VAR 0 1
19526: PPUSH
19527: CALL_OW 248
19531: PPUSH
19532: CALL_OW 450
19536: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19537: LD_ADDR_VAR 0 2
19541: PUSH
19542: LD_VAR 0 3
19546: PPUSH
19547: LD_INT 1
19549: PPUSH
19550: CALL_OW 275
19554: PUSH
19555: LD_VAR 0 4
19559: PUSH
19560: LD_INT 1
19562: ARRAY
19563: GREATEREQUAL
19564: PUSH
19565: LD_VAR 0 3
19569: PPUSH
19570: LD_INT 2
19572: PPUSH
19573: CALL_OW 275
19577: PUSH
19578: LD_VAR 0 4
19582: PUSH
19583: LD_INT 2
19585: ARRAY
19586: GREATEREQUAL
19587: AND
19588: PUSH
19589: LD_VAR 0 3
19593: PPUSH
19594: LD_INT 3
19596: PPUSH
19597: CALL_OW 275
19601: PUSH
19602: LD_VAR 0 4
19606: PUSH
19607: LD_INT 3
19609: ARRAY
19610: GREATEREQUAL
19611: AND
19612: ST_TO_ADDR
// end ;
19613: LD_VAR 0 2
19617: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19618: LD_INT 0
19620: PPUSH
19621: PPUSH
19622: PPUSH
// pom := GetBase ( building ) ;
19623: LD_ADDR_VAR 0 4
19627: PUSH
19628: LD_VAR 0 1
19632: PPUSH
19633: CALL_OW 274
19637: ST_TO_ADDR
// if not pom then
19638: LD_VAR 0 4
19642: NOT
19643: IFFALSE 19647
// exit ;
19645: GO 19748
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19647: LD_ADDR_VAR 0 5
19651: PUSH
19652: LD_VAR 0 2
19656: PPUSH
19657: LD_VAR 0 1
19661: PPUSH
19662: CALL_OW 248
19666: PPUSH
19667: CALL_OW 450
19671: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19672: LD_ADDR_VAR 0 3
19676: PUSH
19677: LD_VAR 0 4
19681: PPUSH
19682: LD_INT 1
19684: PPUSH
19685: CALL_OW 275
19689: PUSH
19690: LD_VAR 0 5
19694: PUSH
19695: LD_INT 1
19697: ARRAY
19698: GREATEREQUAL
19699: PUSH
19700: LD_VAR 0 4
19704: PPUSH
19705: LD_INT 2
19707: PPUSH
19708: CALL_OW 275
19712: PUSH
19713: LD_VAR 0 5
19717: PUSH
19718: LD_INT 2
19720: ARRAY
19721: GREATEREQUAL
19722: AND
19723: PUSH
19724: LD_VAR 0 4
19728: PPUSH
19729: LD_INT 3
19731: PPUSH
19732: CALL_OW 275
19736: PUSH
19737: LD_VAR 0 5
19741: PUSH
19742: LD_INT 3
19744: ARRAY
19745: GREATEREQUAL
19746: AND
19747: ST_TO_ADDR
// end ;
19748: LD_VAR 0 3
19752: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19753: LD_INT 0
19755: PPUSH
19756: PPUSH
19757: PPUSH
19758: PPUSH
19759: PPUSH
19760: PPUSH
19761: PPUSH
19762: PPUSH
19763: PPUSH
19764: PPUSH
19765: PPUSH
// result := false ;
19766: LD_ADDR_VAR 0 8
19770: PUSH
19771: LD_INT 0
19773: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19774: LD_VAR 0 5
19778: NOT
19779: PUSH
19780: LD_VAR 0 1
19784: NOT
19785: OR
19786: PUSH
19787: LD_VAR 0 2
19791: NOT
19792: OR
19793: PUSH
19794: LD_VAR 0 3
19798: NOT
19799: OR
19800: IFFALSE 19804
// exit ;
19802: GO 20618
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19804: LD_ADDR_VAR 0 14
19808: PUSH
19809: LD_VAR 0 1
19813: PPUSH
19814: LD_VAR 0 2
19818: PPUSH
19819: LD_VAR 0 3
19823: PPUSH
19824: LD_VAR 0 4
19828: PPUSH
19829: LD_VAR 0 5
19833: PUSH
19834: LD_INT 1
19836: ARRAY
19837: PPUSH
19838: CALL_OW 248
19842: PPUSH
19843: LD_INT 0
19845: PPUSH
19846: CALL 21855 0 6
19850: ST_TO_ADDR
// if not hexes then
19851: LD_VAR 0 14
19855: NOT
19856: IFFALSE 19860
// exit ;
19858: GO 20618
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19860: LD_ADDR_VAR 0 17
19864: PUSH
19865: LD_VAR 0 5
19869: PPUSH
19870: LD_INT 22
19872: PUSH
19873: LD_VAR 0 13
19877: PPUSH
19878: CALL_OW 255
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 2
19889: PUSH
19890: LD_INT 30
19892: PUSH
19893: LD_INT 0
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 30
19902: PUSH
19903: LD_INT 1
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PPUSH
19919: CALL_OW 72
19923: ST_TO_ADDR
// for i = 1 to hexes do
19924: LD_ADDR_VAR 0 9
19928: PUSH
19929: DOUBLE
19930: LD_INT 1
19932: DEC
19933: ST_TO_ADDR
19934: LD_VAR 0 14
19938: PUSH
19939: FOR_TO
19940: IFFALSE 20616
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19942: LD_ADDR_VAR 0 13
19946: PUSH
19947: LD_VAR 0 14
19951: PUSH
19952: LD_VAR 0 9
19956: ARRAY
19957: PUSH
19958: LD_INT 1
19960: ARRAY
19961: PPUSH
19962: LD_VAR 0 14
19966: PUSH
19967: LD_VAR 0 9
19971: ARRAY
19972: PUSH
19973: LD_INT 2
19975: ARRAY
19976: PPUSH
19977: CALL_OW 428
19981: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
19982: LD_VAR 0 14
19986: PUSH
19987: LD_VAR 0 9
19991: ARRAY
19992: PUSH
19993: LD_INT 1
19995: ARRAY
19996: PPUSH
19997: LD_VAR 0 14
20001: PUSH
20002: LD_VAR 0 9
20006: ARRAY
20007: PUSH
20008: LD_INT 2
20010: ARRAY
20011: PPUSH
20012: CALL_OW 351
20016: PUSH
20017: LD_VAR 0 14
20021: PUSH
20022: LD_VAR 0 9
20026: ARRAY
20027: PUSH
20028: LD_INT 1
20030: ARRAY
20031: PPUSH
20032: LD_VAR 0 14
20036: PUSH
20037: LD_VAR 0 9
20041: ARRAY
20042: PUSH
20043: LD_INT 2
20045: ARRAY
20046: PPUSH
20047: CALL_OW 488
20051: NOT
20052: OR
20053: PUSH
20054: LD_VAR 0 13
20058: PPUSH
20059: CALL_OW 247
20063: PUSH
20064: LD_INT 3
20066: EQUAL
20067: OR
20068: IFFALSE 20074
// exit ;
20070: POP
20071: POP
20072: GO 20618
// if not tmp then
20074: LD_VAR 0 13
20078: NOT
20079: IFFALSE 20083
// continue ;
20081: GO 19939
// result := true ;
20083: LD_ADDR_VAR 0 8
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20091: LD_VAR 0 6
20095: PUSH
20096: LD_VAR 0 13
20100: PPUSH
20101: CALL_OW 247
20105: PUSH
20106: LD_INT 2
20108: EQUAL
20109: AND
20110: PUSH
20111: LD_VAR 0 13
20115: PPUSH
20116: CALL_OW 263
20120: PUSH
20121: LD_INT 1
20123: EQUAL
20124: AND
20125: IFFALSE 20289
// begin if IsDrivenBy ( tmp ) then
20127: LD_VAR 0 13
20131: PPUSH
20132: CALL_OW 311
20136: IFFALSE 20140
// continue ;
20138: GO 19939
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20140: LD_VAR 0 6
20144: PPUSH
20145: LD_INT 3
20147: PUSH
20148: LD_INT 60
20150: PUSH
20151: EMPTY
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 3
20160: PUSH
20161: LD_INT 55
20163: PUSH
20164: EMPTY
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PPUSH
20175: CALL_OW 72
20179: IFFALSE 20287
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20181: LD_ADDR_VAR 0 18
20185: PUSH
20186: LD_VAR 0 6
20190: PPUSH
20191: LD_INT 3
20193: PUSH
20194: LD_INT 60
20196: PUSH
20197: EMPTY
20198: LIST
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 3
20206: PUSH
20207: LD_INT 55
20209: PUSH
20210: EMPTY
20211: LIST
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PPUSH
20221: CALL_OW 72
20225: PUSH
20226: LD_INT 1
20228: ARRAY
20229: ST_TO_ADDR
// if IsInUnit ( driver ) then
20230: LD_VAR 0 18
20234: PPUSH
20235: CALL_OW 310
20239: IFFALSE 20250
// ComExit ( driver ) ;
20241: LD_VAR 0 18
20245: PPUSH
20246: CALL 45039 0 1
// AddComEnterUnit ( driver , tmp ) ;
20250: LD_VAR 0 18
20254: PPUSH
20255: LD_VAR 0 13
20259: PPUSH
20260: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20264: LD_VAR 0 18
20268: PPUSH
20269: LD_VAR 0 7
20273: PPUSH
20274: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20278: LD_VAR 0 18
20282: PPUSH
20283: CALL_OW 181
// end ; continue ;
20287: GO 19939
// end ; if not cleaners or not tmp in cleaners then
20289: LD_VAR 0 6
20293: NOT
20294: PUSH
20295: LD_VAR 0 13
20299: PUSH
20300: LD_VAR 0 6
20304: IN
20305: NOT
20306: OR
20307: IFFALSE 20614
// begin if dep then
20309: LD_VAR 0 17
20313: IFFALSE 20449
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20315: LD_ADDR_VAR 0 16
20319: PUSH
20320: LD_VAR 0 17
20324: PUSH
20325: LD_INT 1
20327: ARRAY
20328: PPUSH
20329: CALL_OW 250
20333: PPUSH
20334: LD_VAR 0 17
20338: PUSH
20339: LD_INT 1
20341: ARRAY
20342: PPUSH
20343: CALL_OW 254
20347: PPUSH
20348: LD_INT 5
20350: PPUSH
20351: CALL_OW 272
20355: PUSH
20356: LD_VAR 0 17
20360: PUSH
20361: LD_INT 1
20363: ARRAY
20364: PPUSH
20365: CALL_OW 251
20369: PPUSH
20370: LD_VAR 0 17
20374: PUSH
20375: LD_INT 1
20377: ARRAY
20378: PPUSH
20379: CALL_OW 254
20383: PPUSH
20384: LD_INT 5
20386: PPUSH
20387: CALL_OW 273
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20396: LD_VAR 0 16
20400: PUSH
20401: LD_INT 1
20403: ARRAY
20404: PPUSH
20405: LD_VAR 0 16
20409: PUSH
20410: LD_INT 2
20412: ARRAY
20413: PPUSH
20414: CALL_OW 488
20418: IFFALSE 20449
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20420: LD_VAR 0 13
20424: PPUSH
20425: LD_VAR 0 16
20429: PUSH
20430: LD_INT 1
20432: ARRAY
20433: PPUSH
20434: LD_VAR 0 16
20438: PUSH
20439: LD_INT 2
20441: ARRAY
20442: PPUSH
20443: CALL_OW 111
// continue ;
20447: GO 19939
// end ; end ; r := GetDir ( tmp ) ;
20449: LD_ADDR_VAR 0 15
20453: PUSH
20454: LD_VAR 0 13
20458: PPUSH
20459: CALL_OW 254
20463: ST_TO_ADDR
// if r = 5 then
20464: LD_VAR 0 15
20468: PUSH
20469: LD_INT 5
20471: EQUAL
20472: IFFALSE 20482
// r := 0 ;
20474: LD_ADDR_VAR 0 15
20478: PUSH
20479: LD_INT 0
20481: ST_TO_ADDR
// for j = r to 5 do
20482: LD_ADDR_VAR 0 10
20486: PUSH
20487: DOUBLE
20488: LD_VAR 0 15
20492: DEC
20493: ST_TO_ADDR
20494: LD_INT 5
20496: PUSH
20497: FOR_TO
20498: IFFALSE 20612
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20500: LD_ADDR_VAR 0 11
20504: PUSH
20505: LD_VAR 0 13
20509: PPUSH
20510: CALL_OW 250
20514: PPUSH
20515: LD_VAR 0 10
20519: PPUSH
20520: LD_INT 2
20522: PPUSH
20523: CALL_OW 272
20527: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20528: LD_ADDR_VAR 0 12
20532: PUSH
20533: LD_VAR 0 13
20537: PPUSH
20538: CALL_OW 251
20542: PPUSH
20543: LD_VAR 0 10
20547: PPUSH
20548: LD_INT 2
20550: PPUSH
20551: CALL_OW 273
20555: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20556: LD_VAR 0 11
20560: PPUSH
20561: LD_VAR 0 12
20565: PPUSH
20566: CALL_OW 488
20570: PUSH
20571: LD_VAR 0 11
20575: PPUSH
20576: LD_VAR 0 12
20580: PPUSH
20581: CALL_OW 428
20585: NOT
20586: AND
20587: IFFALSE 20610
// begin ComMoveXY ( tmp , _x , _y ) ;
20589: LD_VAR 0 13
20593: PPUSH
20594: LD_VAR 0 11
20598: PPUSH
20599: LD_VAR 0 12
20603: PPUSH
20604: CALL_OW 111
// break ;
20608: GO 20612
// end ; end ;
20610: GO 20497
20612: POP
20613: POP
// end ; end ;
20614: GO 19939
20616: POP
20617: POP
// end ;
20618: LD_VAR 0 8
20622: RET
// export function BuildingTechInvented ( side , btype ) ; begin
20623: LD_INT 0
20625: PPUSH
// result := true ;
20626: LD_ADDR_VAR 0 3
20630: PUSH
20631: LD_INT 1
20633: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
20634: LD_VAR 0 2
20638: PUSH
20639: LD_INT 24
20641: DOUBLE
20642: EQUAL
20643: IFTRUE 20653
20645: LD_INT 33
20647: DOUBLE
20648: EQUAL
20649: IFTRUE 20653
20651: GO 20678
20653: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
20654: LD_ADDR_VAR 0 3
20658: PUSH
20659: LD_INT 32
20661: PPUSH
20662: LD_VAR 0 1
20666: PPUSH
20667: CALL_OW 321
20671: PUSH
20672: LD_INT 2
20674: EQUAL
20675: ST_TO_ADDR
20676: GO 20998
20678: LD_INT 20
20680: DOUBLE
20681: EQUAL
20682: IFTRUE 20686
20684: GO 20711
20686: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
20687: LD_ADDR_VAR 0 3
20691: PUSH
20692: LD_INT 6
20694: PPUSH
20695: LD_VAR 0 1
20699: PPUSH
20700: CALL_OW 321
20704: PUSH
20705: LD_INT 2
20707: EQUAL
20708: ST_TO_ADDR
20709: GO 20998
20711: LD_INT 22
20713: DOUBLE
20714: EQUAL
20715: IFTRUE 20725
20717: LD_INT 36
20719: DOUBLE
20720: EQUAL
20721: IFTRUE 20725
20723: GO 20750
20725: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
20726: LD_ADDR_VAR 0 3
20730: PUSH
20731: LD_INT 15
20733: PPUSH
20734: LD_VAR 0 1
20738: PPUSH
20739: CALL_OW 321
20743: PUSH
20744: LD_INT 2
20746: EQUAL
20747: ST_TO_ADDR
20748: GO 20998
20750: LD_INT 30
20752: DOUBLE
20753: EQUAL
20754: IFTRUE 20758
20756: GO 20783
20758: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
20759: LD_ADDR_VAR 0 3
20763: PUSH
20764: LD_INT 20
20766: PPUSH
20767: LD_VAR 0 1
20771: PPUSH
20772: CALL_OW 321
20776: PUSH
20777: LD_INT 2
20779: EQUAL
20780: ST_TO_ADDR
20781: GO 20998
20783: LD_INT 28
20785: DOUBLE
20786: EQUAL
20787: IFTRUE 20797
20789: LD_INT 21
20791: DOUBLE
20792: EQUAL
20793: IFTRUE 20797
20795: GO 20822
20797: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
20798: LD_ADDR_VAR 0 3
20802: PUSH
20803: LD_INT 21
20805: PPUSH
20806: LD_VAR 0 1
20810: PPUSH
20811: CALL_OW 321
20815: PUSH
20816: LD_INT 2
20818: EQUAL
20819: ST_TO_ADDR
20820: GO 20998
20822: LD_INT 16
20824: DOUBLE
20825: EQUAL
20826: IFTRUE 20830
20828: GO 20857
20830: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
20831: LD_ADDR_VAR 0 3
20835: PUSH
20836: LD_EXP 51
20840: PPUSH
20841: LD_VAR 0 1
20845: PPUSH
20846: CALL_OW 321
20850: PUSH
20851: LD_INT 2
20853: EQUAL
20854: ST_TO_ADDR
20855: GO 20998
20857: LD_INT 19
20859: DOUBLE
20860: EQUAL
20861: IFTRUE 20871
20863: LD_INT 23
20865: DOUBLE
20866: EQUAL
20867: IFTRUE 20871
20869: GO 20898
20871: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
20872: LD_ADDR_VAR 0 3
20876: PUSH
20877: LD_EXP 50
20881: PPUSH
20882: LD_VAR 0 1
20886: PPUSH
20887: CALL_OW 321
20891: PUSH
20892: LD_INT 2
20894: EQUAL
20895: ST_TO_ADDR
20896: GO 20998
20898: LD_INT 17
20900: DOUBLE
20901: EQUAL
20902: IFTRUE 20906
20904: GO 20931
20906: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
20907: LD_ADDR_VAR 0 3
20911: PUSH
20912: LD_INT 39
20914: PPUSH
20915: LD_VAR 0 1
20919: PPUSH
20920: CALL_OW 321
20924: PUSH
20925: LD_INT 2
20927: EQUAL
20928: ST_TO_ADDR
20929: GO 20998
20931: LD_INT 18
20933: DOUBLE
20934: EQUAL
20935: IFTRUE 20939
20937: GO 20964
20939: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
20940: LD_ADDR_VAR 0 3
20944: PUSH
20945: LD_INT 40
20947: PPUSH
20948: LD_VAR 0 1
20952: PPUSH
20953: CALL_OW 321
20957: PUSH
20958: LD_INT 2
20960: EQUAL
20961: ST_TO_ADDR
20962: GO 20998
20964: LD_INT 27
20966: DOUBLE
20967: EQUAL
20968: IFTRUE 20972
20970: GO 20997
20972: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
20973: LD_ADDR_VAR 0 3
20977: PUSH
20978: LD_INT 35
20980: PPUSH
20981: LD_VAR 0 1
20985: PPUSH
20986: CALL_OW 321
20990: PUSH
20991: LD_INT 2
20993: EQUAL
20994: ST_TO_ADDR
20995: GO 20998
20997: POP
// end ;
20998: LD_VAR 0 3
21002: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21003: LD_INT 0
21005: PPUSH
21006: PPUSH
21007: PPUSH
21008: PPUSH
21009: PPUSH
21010: PPUSH
21011: PPUSH
21012: PPUSH
21013: PPUSH
21014: PPUSH
21015: PPUSH
// result := false ;
21016: LD_ADDR_VAR 0 6
21020: PUSH
21021: LD_INT 0
21023: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21024: LD_VAR 0 1
21028: NOT
21029: PUSH
21030: LD_VAR 0 1
21034: PPUSH
21035: CALL_OW 266
21039: PUSH
21040: LD_INT 0
21042: PUSH
21043: LD_INT 1
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: IN
21050: NOT
21051: OR
21052: PUSH
21053: LD_VAR 0 2
21057: NOT
21058: OR
21059: PUSH
21060: LD_VAR 0 5
21064: PUSH
21065: LD_INT 0
21067: PUSH
21068: LD_INT 1
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: LD_INT 3
21076: PUSH
21077: LD_INT 4
21079: PUSH
21080: LD_INT 5
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: IN
21091: NOT
21092: OR
21093: PUSH
21094: LD_VAR 0 3
21098: PPUSH
21099: LD_VAR 0 4
21103: PPUSH
21104: CALL_OW 488
21108: NOT
21109: OR
21110: IFFALSE 21114
// exit ;
21112: GO 21850
// side := GetSide ( depot ) ;
21114: LD_ADDR_VAR 0 9
21118: PUSH
21119: LD_VAR 0 1
21123: PPUSH
21124: CALL_OW 255
21128: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21129: LD_VAR 0 9
21133: PPUSH
21134: LD_VAR 0 2
21138: PPUSH
21139: CALL 20623 0 2
21143: NOT
21144: IFFALSE 21148
// exit ;
21146: GO 21850
// pom := GetBase ( depot ) ;
21148: LD_ADDR_VAR 0 10
21152: PUSH
21153: LD_VAR 0 1
21157: PPUSH
21158: CALL_OW 274
21162: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21163: LD_ADDR_VAR 0 11
21167: PUSH
21168: LD_VAR 0 2
21172: PPUSH
21173: LD_VAR 0 1
21177: PPUSH
21178: CALL_OW 248
21182: PPUSH
21183: CALL_OW 450
21187: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21188: LD_VAR 0 10
21192: PPUSH
21193: LD_INT 1
21195: PPUSH
21196: CALL_OW 275
21200: PUSH
21201: LD_VAR 0 11
21205: PUSH
21206: LD_INT 1
21208: ARRAY
21209: GREATEREQUAL
21210: PUSH
21211: LD_VAR 0 10
21215: PPUSH
21216: LD_INT 2
21218: PPUSH
21219: CALL_OW 275
21223: PUSH
21224: LD_VAR 0 11
21228: PUSH
21229: LD_INT 2
21231: ARRAY
21232: GREATEREQUAL
21233: AND
21234: PUSH
21235: LD_VAR 0 10
21239: PPUSH
21240: LD_INT 3
21242: PPUSH
21243: CALL_OW 275
21247: PUSH
21248: LD_VAR 0 11
21252: PUSH
21253: LD_INT 3
21255: ARRAY
21256: GREATEREQUAL
21257: AND
21258: NOT
21259: IFFALSE 21263
// exit ;
21261: GO 21850
// if GetBType ( depot ) = b_depot then
21263: LD_VAR 0 1
21267: PPUSH
21268: CALL_OW 266
21272: PUSH
21273: LD_INT 0
21275: EQUAL
21276: IFFALSE 21288
// dist := 28 else
21278: LD_ADDR_VAR 0 14
21282: PUSH
21283: LD_INT 28
21285: ST_TO_ADDR
21286: GO 21296
// dist := 36 ;
21288: LD_ADDR_VAR 0 14
21292: PUSH
21293: LD_INT 36
21295: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21296: LD_VAR 0 1
21300: PPUSH
21301: LD_VAR 0 3
21305: PPUSH
21306: LD_VAR 0 4
21310: PPUSH
21311: CALL_OW 297
21315: PUSH
21316: LD_VAR 0 14
21320: GREATER
21321: IFFALSE 21325
// exit ;
21323: GO 21850
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21325: LD_ADDR_VAR 0 12
21329: PUSH
21330: LD_VAR 0 2
21334: PPUSH
21335: LD_VAR 0 3
21339: PPUSH
21340: LD_VAR 0 4
21344: PPUSH
21345: LD_VAR 0 5
21349: PPUSH
21350: LD_VAR 0 1
21354: PPUSH
21355: CALL_OW 248
21359: PPUSH
21360: LD_INT 0
21362: PPUSH
21363: CALL 21855 0 6
21367: ST_TO_ADDR
// if not hexes then
21368: LD_VAR 0 12
21372: NOT
21373: IFFALSE 21377
// exit ;
21375: GO 21850
// hex := GetHexInfo ( x , y ) ;
21377: LD_ADDR_VAR 0 15
21381: PUSH
21382: LD_VAR 0 3
21386: PPUSH
21387: LD_VAR 0 4
21391: PPUSH
21392: CALL_OW 546
21396: ST_TO_ADDR
// if hex [ 1 ] then
21397: LD_VAR 0 15
21401: PUSH
21402: LD_INT 1
21404: ARRAY
21405: IFFALSE 21409
// exit ;
21407: GO 21850
// height := hex [ 2 ] ;
21409: LD_ADDR_VAR 0 13
21413: PUSH
21414: LD_VAR 0 15
21418: PUSH
21419: LD_INT 2
21421: ARRAY
21422: ST_TO_ADDR
// for i = 1 to hexes do
21423: LD_ADDR_VAR 0 7
21427: PUSH
21428: DOUBLE
21429: LD_INT 1
21431: DEC
21432: ST_TO_ADDR
21433: LD_VAR 0 12
21437: PUSH
21438: FOR_TO
21439: IFFALSE 21769
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21441: LD_VAR 0 12
21445: PUSH
21446: LD_VAR 0 7
21450: ARRAY
21451: PUSH
21452: LD_INT 1
21454: ARRAY
21455: PPUSH
21456: LD_VAR 0 12
21460: PUSH
21461: LD_VAR 0 7
21465: ARRAY
21466: PUSH
21467: LD_INT 2
21469: ARRAY
21470: PPUSH
21471: CALL_OW 488
21475: NOT
21476: PUSH
21477: LD_VAR 0 12
21481: PUSH
21482: LD_VAR 0 7
21486: ARRAY
21487: PUSH
21488: LD_INT 1
21490: ARRAY
21491: PPUSH
21492: LD_VAR 0 12
21496: PUSH
21497: LD_VAR 0 7
21501: ARRAY
21502: PUSH
21503: LD_INT 2
21505: ARRAY
21506: PPUSH
21507: CALL_OW 428
21511: PUSH
21512: LD_INT 0
21514: GREATER
21515: OR
21516: PUSH
21517: LD_VAR 0 12
21521: PUSH
21522: LD_VAR 0 7
21526: ARRAY
21527: PUSH
21528: LD_INT 1
21530: ARRAY
21531: PPUSH
21532: LD_VAR 0 12
21536: PUSH
21537: LD_VAR 0 7
21541: ARRAY
21542: PUSH
21543: LD_INT 2
21545: ARRAY
21546: PPUSH
21547: CALL_OW 351
21551: OR
21552: IFFALSE 21558
// exit ;
21554: POP
21555: POP
21556: GO 21850
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21558: LD_ADDR_VAR 0 8
21562: PUSH
21563: LD_VAR 0 12
21567: PUSH
21568: LD_VAR 0 7
21572: ARRAY
21573: PUSH
21574: LD_INT 1
21576: ARRAY
21577: PPUSH
21578: LD_VAR 0 12
21582: PUSH
21583: LD_VAR 0 7
21587: ARRAY
21588: PUSH
21589: LD_INT 2
21591: ARRAY
21592: PPUSH
21593: CALL_OW 546
21597: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21598: LD_VAR 0 8
21602: PUSH
21603: LD_INT 1
21605: ARRAY
21606: PUSH
21607: LD_VAR 0 8
21611: PUSH
21612: LD_INT 2
21614: ARRAY
21615: PUSH
21616: LD_VAR 0 13
21620: PUSH
21621: LD_INT 2
21623: PLUS
21624: GREATER
21625: OR
21626: PUSH
21627: LD_VAR 0 8
21631: PUSH
21632: LD_INT 2
21634: ARRAY
21635: PUSH
21636: LD_VAR 0 13
21640: PUSH
21641: LD_INT 2
21643: MINUS
21644: LESS
21645: OR
21646: PUSH
21647: LD_VAR 0 8
21651: PUSH
21652: LD_INT 3
21654: ARRAY
21655: PUSH
21656: LD_INT 0
21658: PUSH
21659: LD_INT 8
21661: PUSH
21662: LD_INT 9
21664: PUSH
21665: LD_INT 10
21667: PUSH
21668: LD_INT 11
21670: PUSH
21671: LD_INT 12
21673: PUSH
21674: LD_INT 13
21676: PUSH
21677: LD_INT 16
21679: PUSH
21680: LD_INT 17
21682: PUSH
21683: LD_INT 18
21685: PUSH
21686: LD_INT 19
21688: PUSH
21689: LD_INT 20
21691: PUSH
21692: LD_INT 21
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: IN
21710: NOT
21711: OR
21712: PUSH
21713: LD_VAR 0 8
21717: PUSH
21718: LD_INT 5
21720: ARRAY
21721: NOT
21722: OR
21723: PUSH
21724: LD_VAR 0 8
21728: PUSH
21729: LD_INT 6
21731: ARRAY
21732: PUSH
21733: LD_INT 1
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 7
21741: PUSH
21742: LD_INT 9
21744: PUSH
21745: LD_INT 10
21747: PUSH
21748: LD_INT 11
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: IN
21759: NOT
21760: OR
21761: IFFALSE 21767
// exit ;
21763: POP
21764: POP
21765: GO 21850
// end ;
21767: GO 21438
21769: POP
21770: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21771: LD_VAR 0 9
21775: PPUSH
21776: LD_VAR 0 3
21780: PPUSH
21781: LD_VAR 0 4
21785: PPUSH
21786: LD_INT 20
21788: PPUSH
21789: CALL 13796 0 4
21793: PUSH
21794: LD_INT 4
21796: ARRAY
21797: IFFALSE 21801
// exit ;
21799: GO 21850
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21801: LD_VAR 0 2
21805: PUSH
21806: LD_INT 29
21808: PUSH
21809: LD_INT 30
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: IN
21816: PUSH
21817: LD_VAR 0 3
21821: PPUSH
21822: LD_VAR 0 4
21826: PPUSH
21827: LD_VAR 0 9
21831: PPUSH
21832: CALL_OW 440
21836: NOT
21837: AND
21838: IFFALSE 21842
// exit ;
21840: GO 21850
// result := true ;
21842: LD_ADDR_VAR 0 6
21846: PUSH
21847: LD_INT 1
21849: ST_TO_ADDR
// end ;
21850: LD_VAR 0 6
21854: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21855: LD_INT 0
21857: PPUSH
21858: PPUSH
21859: PPUSH
21860: PPUSH
21861: PPUSH
21862: PPUSH
21863: PPUSH
21864: PPUSH
21865: PPUSH
21866: PPUSH
21867: PPUSH
21868: PPUSH
21869: PPUSH
21870: PPUSH
21871: PPUSH
21872: PPUSH
21873: PPUSH
21874: PPUSH
21875: PPUSH
21876: PPUSH
21877: PPUSH
21878: PPUSH
21879: PPUSH
21880: PPUSH
21881: PPUSH
21882: PPUSH
21883: PPUSH
21884: PPUSH
21885: PPUSH
21886: PPUSH
21887: PPUSH
21888: PPUSH
21889: PPUSH
21890: PPUSH
21891: PPUSH
21892: PPUSH
21893: PPUSH
21894: PPUSH
21895: PPUSH
21896: PPUSH
21897: PPUSH
21898: PPUSH
21899: PPUSH
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
// result = [ ] ;
21915: LD_ADDR_VAR 0 7
21919: PUSH
21920: EMPTY
21921: ST_TO_ADDR
// temp_list = [ ] ;
21922: LD_ADDR_VAR 0 9
21926: PUSH
21927: EMPTY
21928: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
21929: LD_VAR 0 4
21933: PUSH
21934: LD_INT 0
21936: PUSH
21937: LD_INT 1
21939: PUSH
21940: LD_INT 2
21942: PUSH
21943: LD_INT 3
21945: PUSH
21946: LD_INT 4
21948: PUSH
21949: LD_INT 5
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: IN
21960: NOT
21961: PUSH
21962: LD_VAR 0 1
21966: PUSH
21967: LD_INT 0
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: IN
21977: PUSH
21978: LD_VAR 0 5
21982: PUSH
21983: LD_INT 1
21985: PUSH
21986: LD_INT 2
21988: PUSH
21989: LD_INT 3
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: LIST
21996: IN
21997: NOT
21998: AND
21999: OR
22000: IFFALSE 22004
// exit ;
22002: GO 40395
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22004: LD_VAR 0 1
22008: PUSH
22009: LD_INT 6
22011: PUSH
22012: LD_INT 7
22014: PUSH
22015: LD_INT 8
22017: PUSH
22018: LD_INT 13
22020: PUSH
22021: LD_INT 12
22023: PUSH
22024: LD_INT 15
22026: PUSH
22027: LD_INT 11
22029: PUSH
22030: LD_INT 14
22032: PUSH
22033: LD_INT 10
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: IN
22047: IFFALSE 22057
// btype = b_lab ;
22049: LD_ADDR_VAR 0 1
22053: PUSH
22054: LD_INT 6
22056: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22057: LD_VAR 0 6
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: LD_INT 2
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: LIST
22075: IN
22076: NOT
22077: PUSH
22078: LD_VAR 0 1
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: LD_INT 2
22091: PUSH
22092: LD_INT 3
22094: PUSH
22095: LD_INT 6
22097: PUSH
22098: LD_INT 36
22100: PUSH
22101: LD_INT 4
22103: PUSH
22104: LD_INT 5
22106: PUSH
22107: LD_INT 31
22109: PUSH
22110: LD_INT 32
22112: PUSH
22113: LD_INT 33
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: IN
22129: NOT
22130: PUSH
22131: LD_VAR 0 6
22135: PUSH
22136: LD_INT 1
22138: EQUAL
22139: AND
22140: OR
22141: PUSH
22142: LD_VAR 0 1
22146: PUSH
22147: LD_INT 2
22149: PUSH
22150: LD_INT 3
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: IN
22157: NOT
22158: PUSH
22159: LD_VAR 0 6
22163: PUSH
22164: LD_INT 2
22166: EQUAL
22167: AND
22168: OR
22169: IFFALSE 22179
// mode = 0 ;
22171: LD_ADDR_VAR 0 6
22175: PUSH
22176: LD_INT 0
22178: ST_TO_ADDR
// case mode of 0 :
22179: LD_VAR 0 6
22183: PUSH
22184: LD_INT 0
22186: DOUBLE
22187: EQUAL
22188: IFTRUE 22192
22190: GO 33645
22192: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22193: LD_ADDR_VAR 0 11
22197: PUSH
22198: LD_INT 0
22200: PUSH
22201: LD_INT 0
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 0
22210: PUSH
22211: LD_INT 1
22213: NEG
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 1
22221: PUSH
22222: LD_INT 0
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 1
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 1
22251: NEG
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 1
22262: NEG
22263: PUSH
22264: LD_INT 1
22266: NEG
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 1
22274: NEG
22275: PUSH
22276: LD_INT 2
22278: NEG
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: LD_INT 2
22289: NEG
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 1
22297: PUSH
22298: LD_INT 1
22300: NEG
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: LD_INT 2
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 0
22318: PUSH
22319: LD_INT 2
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 1
22339: PUSH
22340: LD_INT 3
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 0
22349: PUSH
22350: LD_INT 3
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 1
22359: NEG
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22386: LD_ADDR_VAR 0 12
22390: PUSH
22391: LD_INT 0
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 0
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 1
22414: PUSH
22415: LD_INT 0
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: LD_INT 1
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 1
22455: NEG
22456: PUSH
22457: LD_INT 1
22459: NEG
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: PUSH
22468: LD_INT 1
22470: NEG
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 2
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: LD_INT 1
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 1
22498: NEG
22499: PUSH
22500: LD_INT 1
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 2
22509: NEG
22510: PUSH
22511: LD_INT 0
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 2
22520: NEG
22521: PUSH
22522: LD_INT 1
22524: NEG
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 2
22532: NEG
22533: PUSH
22534: LD_INT 1
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 3
22543: NEG
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 3
22554: NEG
22555: PUSH
22556: LD_INT 1
22558: NEG
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22582: LD_ADDR_VAR 0 13
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: LD_INT 0
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 0
22599: PUSH
22600: LD_INT 1
22602: NEG
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 1
22610: PUSH
22611: LD_INT 0
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: LD_INT 1
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 0
22630: PUSH
22631: LD_INT 1
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 1
22640: NEG
22641: PUSH
22642: LD_INT 0
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 1
22651: NEG
22652: PUSH
22653: LD_INT 1
22655: NEG
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: NEG
22664: PUSH
22665: LD_INT 2
22667: NEG
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 2
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 2
22685: PUSH
22686: LD_INT 2
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: LD_INT 2
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 2
22705: NEG
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 2
22717: NEG
22718: PUSH
22719: LD_INT 2
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 2
22729: NEG
22730: PUSH
22731: LD_INT 3
22733: NEG
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 3
22741: NEG
22742: PUSH
22743: LD_INT 2
22745: NEG
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 3
22753: NEG
22754: PUSH
22755: LD_INT 3
22757: NEG
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22781: LD_ADDR_VAR 0 14
22785: PUSH
22786: LD_INT 0
22788: PUSH
22789: LD_INT 0
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 0
22798: PUSH
22799: LD_INT 1
22801: NEG
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: LD_INT 0
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 1
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 0
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 1
22850: NEG
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: LD_INT 2
22866: NEG
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 0
22874: PUSH
22875: LD_INT 2
22877: NEG
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: LD_INT 2
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 1
22927: NEG
22928: PUSH
22929: LD_INT 3
22931: NEG
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: LD_INT 3
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: LD_INT 2
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22977: LD_ADDR_VAR 0 15
22981: PUSH
22982: LD_INT 0
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: LD_INT 1
22997: NEG
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: LD_INT 0
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: LD_INT 1
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 1
23035: NEG
23036: PUSH
23037: LD_INT 0
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 1
23046: NEG
23047: PUSH
23048: LD_INT 1
23050: NEG
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 1
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 2
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: NEG
23090: PUSH
23091: LD_INT 1
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 2
23100: NEG
23101: PUSH
23102: LD_INT 0
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 2
23111: NEG
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 2
23123: PUSH
23124: LD_INT 1
23126: NEG
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 3
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 3
23144: PUSH
23145: LD_INT 1
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23170: LD_ADDR_VAR 0 16
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: LD_INT 1
23190: NEG
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 1
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: LD_INT 1
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 1
23228: NEG
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: LD_INT 1
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: NEG
23252: PUSH
23253: LD_INT 2
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 2
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: LD_INT 2
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 2
23293: NEG
23294: PUSH
23295: LD_INT 1
23297: NEG
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 2
23305: NEG
23306: PUSH
23307: LD_INT 2
23309: NEG
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 3
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 3
23327: PUSH
23328: LD_INT 3
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 2
23337: PUSH
23338: LD_INT 3
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23363: LD_ADDR_VAR 0 17
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: LD_INT 1
23383: NEG
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: LD_INT 0
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: LD_INT 1
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 0
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: NEG
23433: PUSH
23434: LD_INT 1
23436: NEG
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: NEG
23445: PUSH
23446: LD_INT 2
23448: NEG
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: LD_INT 2
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: LD_INT 1
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 2
23488: PUSH
23489: LD_INT 1
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: LD_INT 2
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: LD_INT 2
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 0
23518: PUSH
23519: LD_INT 2
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 1
23528: NEG
23529: PUSH
23530: LD_INT 1
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 2
23539: NEG
23540: PUSH
23541: LD_INT 0
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 2
23550: NEG
23551: PUSH
23552: LD_INT 1
23554: NEG
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 2
23562: NEG
23563: PUSH
23564: LD_INT 2
23566: NEG
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23593: LD_ADDR_VAR 0 18
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 0
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 1
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: NEG
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: LD_INT 1
23666: NEG
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: LD_INT 2
23678: NEG
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: LD_INT 2
23689: NEG
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 2
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 2
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: LD_INT 2
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: LD_INT 2
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: LD_INT 2
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 1
23758: NEG
23759: PUSH
23760: LD_INT 1
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 2
23769: NEG
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 2
23780: NEG
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 2
23792: NEG
23793: PUSH
23794: LD_INT 2
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23823: LD_ADDR_VAR 0 19
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: LD_INT 0
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: LD_INT 1
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 0
23871: PUSH
23872: LD_INT 1
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 1
23881: NEG
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: NEG
23905: PUSH
23906: LD_INT 2
23908: NEG
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: LD_INT 2
23919: NEG
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 2
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 2
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: LD_INT 2
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: LD_INT 2
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: LD_INT 1
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 2
23999: NEG
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 2
24010: NEG
24011: PUSH
24012: LD_INT 1
24014: NEG
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 2
24022: NEG
24023: PUSH
24024: LD_INT 2
24026: NEG
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24053: LD_ADDR_VAR 0 20
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: LD_INT 0
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: LD_INT 1
24073: NEG
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: LD_INT 0
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: NEG
24135: PUSH
24136: LD_INT 2
24138: NEG
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: LD_INT 2
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: LD_INT 1
24160: NEG
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 2
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 2
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 1
24218: NEG
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 2
24229: NEG
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 2
24240: NEG
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 2
24252: NEG
24253: PUSH
24254: LD_INT 2
24256: NEG
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24283: LD_ADDR_VAR 0 21
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: LD_INT 1
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 0
24331: PUSH
24332: LD_INT 1
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: NEG
24353: PUSH
24354: LD_INT 1
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 1
24364: NEG
24365: PUSH
24366: LD_INT 2
24368: NEG
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: LD_INT 2
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: LD_INT 1
24390: NEG
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 2
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: LD_INT 2
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: LD_INT 2
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: LD_INT 2
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 2
24459: NEG
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 2
24470: NEG
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 2
24482: NEG
24483: PUSH
24484: LD_INT 2
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24513: LD_ADDR_VAR 0 22
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 0
24561: PUSH
24562: LD_INT 1
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: LD_INT 0
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PUSH
24584: LD_INT 1
24586: NEG
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 1
24594: NEG
24595: PUSH
24596: LD_INT 2
24598: NEG
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: LD_INT 2
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: LD_INT 0
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 2
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 1
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: LD_INT 2
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 1
24678: NEG
24679: PUSH
24680: LD_INT 1
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 2
24689: NEG
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 2
24700: NEG
24701: PUSH
24702: LD_INT 1
24704: NEG
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 2
24712: NEG
24713: PUSH
24714: LD_INT 2
24716: NEG
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24743: LD_ADDR_VAR 0 23
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: LD_INT 1
24763: NEG
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: LD_INT 1
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: LD_INT 0
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 1
24812: NEG
24813: PUSH
24814: LD_INT 1
24816: NEG
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 1
24824: NEG
24825: PUSH
24826: LD_INT 2
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 0
24836: PUSH
24837: LD_INT 2
24839: NEG
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: LD_INT 1
24850: NEG
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 2
24878: PUSH
24879: LD_INT 2
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: LD_INT 2
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 2
24919: NEG
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 2
24942: NEG
24943: PUSH
24944: LD_INT 2
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: LD_INT 3
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: LD_INT 3
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: LD_INT 2
24981: NEG
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: LD_INT 1
24992: NEG
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25023: LD_ADDR_VAR 0 24
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: NEG
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: LD_INT 2
25108: NEG
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: LD_INT 2
25119: NEG
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 1
25127: PUSH
25128: LD_INT 1
25130: NEG
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 2
25138: PUSH
25139: LD_INT 0
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 2
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 2
25158: PUSH
25159: LD_INT 2
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: LD_INT 2
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: LD_INT 2
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: NEG
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 2
25199: NEG
25200: PUSH
25201: LD_INT 0
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 2
25210: NEG
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 2
25222: NEG
25223: PUSH
25224: LD_INT 2
25226: NEG
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: LD_INT 2
25237: NEG
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 2
25245: PUSH
25246: LD_INT 1
25248: NEG
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 3
25256: PUSH
25257: LD_INT 1
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 3
25266: PUSH
25267: LD_INT 2
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25299: LD_ADDR_VAR 0 25
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: LD_INT 1
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: LD_INT 2
25384: NEG
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 0
25392: PUSH
25393: LD_INT 2
25395: NEG
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: LD_INT 1
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 2
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: LD_INT 2
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 2
25475: NEG
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: NEG
25499: PUSH
25500: LD_INT 2
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 3
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 3
25520: PUSH
25521: LD_INT 2
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 2
25530: PUSH
25531: LD_INT 3
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 3
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25573: LD_ADDR_VAR 0 26
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: LD_INT 1
25593: NEG
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: LD_INT 1
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: NEG
25655: PUSH
25656: LD_INT 2
25658: NEG
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: LD_INT 2
25669: NEG
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 2
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 2
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 2
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: LD_INT 2
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 1
25738: NEG
25739: PUSH
25740: LD_INT 1
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 2
25749: NEG
25750: PUSH
25751: LD_INT 0
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 2
25760: NEG
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 2
25772: NEG
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 2
25784: PUSH
25785: LD_INT 3
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: LD_INT 3
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: NEG
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 2
25815: NEG
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25849: LD_ADDR_VAR 0 27
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 0
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 1
25877: PUSH
25878: LD_INT 0
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: LD_INT 1
25922: NEG
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: LD_INT 2
25934: NEG
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: LD_INT 2
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 2
25964: PUSH
25965: LD_INT 0
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 0
26004: PUSH
26005: LD_INT 2
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: NEG
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: NEG
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 2
26036: NEG
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 2
26048: NEG
26049: PUSH
26050: LD_INT 2
26052: NEG
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 1
26060: NEG
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: NEG
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 3
26082: NEG
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 3
26094: NEG
26095: PUSH
26096: LD_INT 2
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26129: LD_ADDR_VAR 0 28
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: LD_INT 1
26202: NEG
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 1
26210: NEG
26211: PUSH
26212: LD_INT 2
26214: NEG
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: LD_INT 2
26225: NEG
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: LD_INT 1
26236: NEG
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 2
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: NEG
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 2
26305: NEG
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 2
26328: NEG
26329: PUSH
26330: LD_INT 2
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: LD_INT 3
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: LD_INT 3
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 3
26364: NEG
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 3
26376: NEG
26377: PUSH
26378: LD_INT 2
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26411: LD_ADDR_VAR 0 29
26415: PUSH
26416: LD_INT 0
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 1
26449: PUSH
26450: LD_INT 1
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: LD_INT 1
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 1
26469: NEG
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: LD_INT 1
26484: NEG
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: NEG
26493: PUSH
26494: LD_INT 2
26496: NEG
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: LD_INT 2
26507: NEG
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: LD_INT 1
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 2
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 2
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: LD_INT 2
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: LD_INT 2
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 1
26566: NEG
26567: PUSH
26568: LD_INT 1
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 2
26577: NEG
26578: PUSH
26579: LD_INT 1
26581: NEG
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 2
26589: NEG
26590: PUSH
26591: LD_INT 2
26593: NEG
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 2
26601: NEG
26602: PUSH
26603: LD_INT 3
26605: NEG
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 2
26613: PUSH
26614: LD_INT 1
26616: NEG
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 3
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: LD_INT 3
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: LD_INT 2
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 3
26655: NEG
26656: PUSH
26657: LD_INT 2
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26690: LD_ADDR_VAR 0 30
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: LD_INT 0
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: LD_INT 1
26763: NEG
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: LD_INT 2
26775: NEG
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: LD_INT 2
26786: NEG
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 2
26805: PUSH
26806: LD_INT 0
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 2
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 2
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: LD_INT 2
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 2
26856: NEG
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 2
26867: NEG
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: NEG
26880: PUSH
26881: LD_INT 3
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: LD_INT 2
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 3
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: LD_INT 3
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 2
26922: NEG
26923: PUSH
26924: LD_INT 1
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 3
26933: NEG
26934: PUSH
26935: LD_INT 1
26937: NEG
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26968: LD_ADDR_VAR 0 31
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: LD_INT 1
26988: NEG
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: LD_INT 1
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: LD_INT 1
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: LD_INT 1
27041: NEG
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: NEG
27050: PUSH
27051: LD_INT 2
27053: NEG
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 2
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 2
27082: PUSH
27083: LD_INT 1
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 2
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: LD_INT 2
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: LD_INT 2
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: NEG
27123: PUSH
27124: LD_INT 1
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 2
27133: NEG
27134: PUSH
27135: LD_INT 1
27137: NEG
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 2
27145: NEG
27146: PUSH
27147: LD_INT 2
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 2
27157: NEG
27158: PUSH
27159: LD_INT 3
27161: NEG
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 2
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 3
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 1
27190: PUSH
27191: LD_INT 3
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: LD_INT 2
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 3
27211: NEG
27212: PUSH
27213: LD_INT 2
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27246: LD_ADDR_VAR 0 32
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: LD_INT 1
27266: NEG
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 1
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: LD_INT 0
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: NEG
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: LD_INT 2
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 0
27339: PUSH
27340: LD_INT 2
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 2
27371: PUSH
27372: LD_INT 2
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: LD_INT 2
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: LD_INT 2
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: LD_INT 1
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 2
27412: NEG
27413: PUSH
27414: LD_INT 0
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 2
27423: NEG
27424: PUSH
27425: LD_INT 1
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: LD_INT 3
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: LD_INT 2
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 3
27458: PUSH
27459: LD_INT 2
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 2
27468: PUSH
27469: LD_INT 3
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 2
27478: NEG
27479: PUSH
27480: LD_INT 1
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 3
27489: NEG
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27524: LD_ADDR_VAR 0 33
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: LD_INT 0
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: LD_INT 1
27544: NEG
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 1
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 1
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: LD_INT 1
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 1
27582: NEG
27583: PUSH
27584: LD_INT 0
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 1
27593: NEG
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 1
27605: NEG
27606: PUSH
27607: LD_INT 2
27609: NEG
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 1
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 2
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: LD_INT 2
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 0
27658: PUSH
27659: LD_INT 2
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 2
27690: NEG
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 2
27702: NEG
27703: PUSH
27704: LD_INT 2
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 2
27714: NEG
27715: PUSH
27716: LD_INT 3
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 2
27726: PUSH
27727: LD_INT 1
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 3
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: LD_INT 3
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: NEG
27758: PUSH
27759: LD_INT 2
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 3
27768: NEG
27769: PUSH
27770: LD_INT 2
27772: NEG
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27803: LD_ADDR_VAR 0 34
27807: PUSH
27808: LD_INT 0
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: LD_INT 1
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 1
27884: NEG
27885: PUSH
27886: LD_INT 2
27888: NEG
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: LD_INT 2
27899: NEG
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: LD_INT 1
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 2
27928: PUSH
27929: LD_INT 2
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: LD_INT 2
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 2
27959: NEG
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 2
27970: NEG
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 2
27982: NEG
27983: PUSH
27984: LD_INT 2
27986: NEG
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 1
27994: NEG
27995: PUSH
27996: LD_INT 3
27998: NEG
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: PUSH
28007: LD_INT 2
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 3
28017: PUSH
28018: LD_INT 2
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 2
28027: PUSH
28028: LD_INT 3
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 2
28037: NEG
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 3
28048: NEG
28049: PUSH
28050: LD_INT 1
28052: NEG
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28083: LD_ADDR_VAR 0 35
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 0
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 1
28152: NEG
28153: PUSH
28154: LD_INT 1
28156: NEG
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 2
28174: NEG
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28195: LD_ADDR_VAR 0 36
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 0
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 1
28264: NEG
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 1
28276: NEG
28277: PUSH
28278: LD_INT 2
28280: NEG
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: LD_INT 2
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28307: LD_ADDR_VAR 0 37
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 0
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: NEG
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: LD_INT 1
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28419: LD_ADDR_VAR 0 38
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 2
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 2
28510: NEG
28511: PUSH
28512: LD_INT 1
28514: NEG
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28531: LD_ADDR_VAR 0 39
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: LD_INT 1
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 1
28589: NEG
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 1
28600: NEG
28601: PUSH
28602: LD_INT 1
28604: NEG
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 1
28612: NEG
28613: PUSH
28614: LD_INT 2
28616: NEG
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: LD_INT 2
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28643: LD_ADDR_VAR 0 40
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: LD_INT 0
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 1
28712: NEG
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 1
28735: NEG
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28755: LD_ADDR_VAR 0 41
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 1
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 1
28824: NEG
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: NEG
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 2
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 2
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 2
28910: NEG
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 2
28921: NEG
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 2
28933: NEG
28934: PUSH
28935: LD_INT 2
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 2
28945: NEG
28946: PUSH
28947: LD_INT 3
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 2
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 3
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 3
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 3
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 3
28998: PUSH
28999: LD_INT 3
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: LD_INT 3
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 2
29018: NEG
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 3
29029: NEG
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 3
29040: NEG
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 3
29052: NEG
29053: PUSH
29054: LD_INT 2
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 3
29064: NEG
29065: PUSH
29066: LD_INT 3
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29105: LD_ADDR_VAR 0 42
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: LD_INT 0
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: LD_INT 1
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: LD_INT 1
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: LD_INT 1
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: NEG
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: LD_INT 2
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: LD_INT 2
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: LD_INT 1
29212: NEG
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 2
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 2
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: LD_INT 2
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: LD_INT 2
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: NEG
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 2
29283: NEG
29284: PUSH
29285: LD_INT 2
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 2
29295: NEG
29296: PUSH
29297: LD_INT 3
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PUSH
29309: LD_INT 3
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 0
29319: PUSH
29320: LD_INT 3
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: LD_INT 2
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 3
29341: PUSH
29342: LD_INT 2
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 3
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 2
29361: PUSH
29362: LD_INT 3
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: LD_INT 3
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: LD_INT 3
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 1
29391: NEG
29392: PUSH
29393: LD_INT 2
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 3
29402: NEG
29403: PUSH
29404: LD_INT 2
29406: NEG
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 3
29414: NEG
29415: PUSH
29416: LD_INT 3
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29455: LD_ADDR_VAR 0 43
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 1
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 1
29513: NEG
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 2
29540: NEG
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 2
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 1
29590: PUSH
29591: LD_INT 2
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 0
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 2
29621: NEG
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 2
29632: NEG
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: LD_INT 3
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: LD_INT 3
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 1
29667: PUSH
29668: LD_INT 2
29670: NEG
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 2
29678: PUSH
29679: LD_INT 1
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 3
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 3
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: LD_INT 3
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 0
29719: PUSH
29720: LD_INT 3
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 1
29729: NEG
29730: PUSH
29731: LD_INT 2
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 2
29740: NEG
29741: PUSH
29742: LD_INT 1
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 3
29751: NEG
29752: PUSH
29753: LD_INT 0
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 3
29762: NEG
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29803: LD_ADDR_VAR 0 44
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 1
29861: NEG
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 1
29872: NEG
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 1
29884: NEG
29885: PUSH
29886: LD_INT 2
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 2
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 2
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 2
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: LD_INT 2
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 2
29958: NEG
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 2
29969: NEG
29970: PUSH
29971: LD_INT 1
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: NEG
29982: PUSH
29983: LD_INT 2
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 2
29993: NEG
29994: PUSH
29995: LD_INT 3
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 2
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 3
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 3
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 3
30036: PUSH
30037: LD_INT 2
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 3
30046: PUSH
30047: LD_INT 3
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 2
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 2
30066: NEG
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 3
30077: NEG
30078: PUSH
30079: LD_INT 0
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 3
30088: NEG
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 3
30100: NEG
30101: PUSH
30102: LD_INT 2
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 3
30112: NEG
30113: PUSH
30114: LD_INT 3
30116: NEG
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30153: LD_ADDR_VAR 0 45
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: LD_INT 0
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: LD_INT 0
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: LD_INT 0
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 1
30222: NEG
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 1
30234: NEG
30235: PUSH
30236: LD_INT 2
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 0
30246: PUSH
30247: LD_INT 2
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 1
30257: PUSH
30258: LD_INT 1
30260: NEG
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 2
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 2
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: LD_INT 2
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: LD_INT 2
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: LD_INT 1
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 2
30319: NEG
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 2
30331: NEG
30332: PUSH
30333: LD_INT 2
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 2
30343: NEG
30344: PUSH
30345: LD_INT 3
30347: NEG
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 1
30355: NEG
30356: PUSH
30357: LD_INT 3
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: LD_INT 3
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: LD_INT 2
30381: NEG
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 3
30389: PUSH
30390: LD_INT 2
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: PUSH
30400: LD_INT 3
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: PUSH
30410: LD_INT 3
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 1
30419: PUSH
30420: LD_INT 3
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: LD_INT 3
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 1
30439: NEG
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 3
30450: NEG
30451: PUSH
30452: LD_INT 2
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 3
30462: NEG
30463: PUSH
30464: LD_INT 3
30466: NEG
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30503: LD_ADDR_VAR 0 46
30507: PUSH
30508: LD_INT 0
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 1
30531: PUSH
30532: LD_INT 0
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 1
30541: PUSH
30542: LD_INT 1
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: LD_INT 1
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 1
30572: NEG
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: LD_INT 2
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: LD_INT 2
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 1
30607: PUSH
30608: LD_INT 1
30610: NEG
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 2
30618: PUSH
30619: LD_INT 0
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 2
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: LD_INT 2
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 0
30648: PUSH
30649: LD_INT 2
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 2
30669: NEG
30670: PUSH
30671: LD_INT 0
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 2
30680: NEG
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: LD_INT 3
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 0
30704: PUSH
30705: LD_INT 3
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: LD_INT 2
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: LD_INT 1
30729: NEG
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: LD_INT 3
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 0
30767: PUSH
30768: LD_INT 3
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: LD_INT 2
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 2
30788: NEG
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 3
30799: NEG
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 3
30810: NEG
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30851: LD_ADDR_VAR 0 47
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: LD_INT 0
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: LD_INT 0
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 1
30909: NEG
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: NEG
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: LD_INT 2
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 0
30944: PUSH
30945: LD_INT 2
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 2
30966: NEG
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 2
30978: NEG
30979: PUSH
30980: LD_INT 2
30982: NEG
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31002: LD_ADDR_VAR 0 48
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: LD_INT 1
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 1
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: LD_INT 2
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31149: LD_ADDR_VAR 0 49
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 0
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 1
31207: NEG
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 2
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: LD_INT 1
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: LD_INT 2
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31293: LD_ADDR_VAR 0 50
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: LD_INT 0
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: LD_INT 1
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31437: LD_ADDR_VAR 0 51
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: LD_INT 0
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: LD_INT 1
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 1
31495: NEG
31496: PUSH
31497: LD_INT 0
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: LD_INT 2
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: LD_INT 1
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 2
31549: NEG
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 2
31560: NEG
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31584: LD_ADDR_VAR 0 52
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: LD_INT 2
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 1
31677: NEG
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 2
31688: NEG
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 2
31699: NEG
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 2
31711: NEG
31712: PUSH
31713: LD_INT 2
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31735: LD_ADDR_VAR 0 53
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: LD_INT 1
31755: NEG
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: LD_INT 1
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 1
31804: NEG
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 1
31816: NEG
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: LD_INT 2
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: NEG
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 2
31922: NEG
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: LD_INT 2
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31965: LD_ADDR_VAR 0 54
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: LD_INT 1
31985: NEG
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: LD_INT 0
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: LD_INT 1
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 1
32046: NEG
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: LD_INT 2
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 2
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: NEG
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 2
32152: NEG
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32195: LD_ADDR_VAR 0 55
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: NEG
32265: PUSH
32266: LD_INT 1
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: LD_INT 2
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: LD_INT 2
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 1
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: LD_INT 2
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 2
32371: NEG
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 2
32382: NEG
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 2
32394: NEG
32395: PUSH
32396: LD_INT 2
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32425: LD_ADDR_VAR 0 56
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: LD_INT 1
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: LD_INT 2
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 2
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 2
32601: NEG
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 2
32612: NEG
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: LD_INT 2
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32655: LD_ADDR_VAR 0 57
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 0
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 1
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: NEG
32737: PUSH
32738: LD_INT 2
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: LD_INT 2
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 2
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 2
32790: PUSH
32791: LD_INT 2
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: NEG
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 2
32842: NEG
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: LD_INT 2
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32885: LD_ADDR_VAR 0 58
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: LD_INT 0
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: LD_INT 1
32905: NEG
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 1
32966: NEG
32967: PUSH
32968: LD_INT 2
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: LD_INT 2
32981: NEG
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: LD_INT 1
32992: NEG
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 2
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: LD_INT 2
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: LD_INT 2
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33115: LD_ADDR_VAR 0 59
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 0
33132: PUSH
33133: LD_INT 1
33135: NEG
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 1
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33203: LD_ADDR_VAR 0 60
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: LD_INT 0
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 1
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: NEG
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: NEG
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33291: LD_ADDR_VAR 0 61
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: LD_INT 1
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: NEG
33361: PUSH
33362: LD_INT 1
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33379: LD_ADDR_VAR 0 62
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 0
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 1
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 1
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: NEG
33438: PUSH
33439: LD_INT 0
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 1
33448: NEG
33449: PUSH
33450: LD_INT 1
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33467: LD_ADDR_VAR 0 63
33471: PUSH
33472: LD_INT 0
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: LD_INT 1
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33555: LD_ADDR_VAR 0 64
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: LD_INT 0
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: LD_INT 1
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: NEG
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: ST_TO_ADDR
// end ; 1 :
33643: GO 39540
33645: LD_INT 1
33647: DOUBLE
33648: EQUAL
33649: IFTRUE 33653
33651: GO 36276
33653: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33654: LD_ADDR_VAR 0 11
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: LD_INT 3
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: LD_INT 3
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: LD_INT 2
33687: NEG
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: LIST
33697: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33698: LD_ADDR_VAR 0 12
33702: PUSH
33703: LD_INT 2
33705: PUSH
33706: LD_INT 1
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 3
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 3
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33739: LD_ADDR_VAR 0 13
33743: PUSH
33744: LD_INT 3
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 3
33756: PUSH
33757: LD_INT 3
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 2
33766: PUSH
33767: LD_INT 3
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: LIST
33778: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33779: LD_ADDR_VAR 0 14
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: LD_INT 3
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 0
33796: PUSH
33797: LD_INT 3
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 1
33806: NEG
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33820: LD_ADDR_VAR 0 15
33824: PUSH
33825: LD_INT 2
33827: NEG
33828: PUSH
33829: LD_INT 1
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 3
33838: NEG
33839: PUSH
33840: LD_INT 0
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 3
33849: NEG
33850: PUSH
33851: LD_INT 1
33853: NEG
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: LIST
33863: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33864: LD_ADDR_VAR 0 16
33868: PUSH
33869: LD_INT 2
33871: NEG
33872: PUSH
33873: LD_INT 3
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 3
33883: NEG
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 3
33895: NEG
33896: PUSH
33897: LD_INT 3
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33910: LD_ADDR_VAR 0 17
33914: PUSH
33915: LD_INT 1
33917: NEG
33918: PUSH
33919: LD_INT 3
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: LD_INT 3
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 1
33940: PUSH
33941: LD_INT 2
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: LIST
33953: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33954: LD_ADDR_VAR 0 18
33958: PUSH
33959: LD_INT 2
33961: PUSH
33962: LD_INT 1
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 3
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 3
33982: PUSH
33983: LD_INT 1
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: LIST
33994: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33995: LD_ADDR_VAR 0 19
33999: PUSH
34000: LD_INT 3
34002: PUSH
34003: LD_INT 2
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 3
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: LD_INT 3
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: LIST
34034: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34035: LD_ADDR_VAR 0 20
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: LD_INT 3
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: LD_INT 3
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: LD_INT 2
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: LIST
34075: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34076: LD_ADDR_VAR 0 21
34080: PUSH
34081: LD_INT 2
34083: NEG
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 3
34094: NEG
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 3
34105: NEG
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: LIST
34119: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34120: LD_ADDR_VAR 0 22
34124: PUSH
34125: LD_INT 2
34127: NEG
34128: PUSH
34129: LD_INT 3
34131: NEG
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 3
34139: NEG
34140: PUSH
34141: LD_INT 2
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 3
34151: NEG
34152: PUSH
34153: LD_INT 3
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: LIST
34165: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34166: LD_ADDR_VAR 0 23
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: LD_INT 3
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: NEG
34185: PUSH
34186: LD_INT 4
34188: NEG
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: LD_INT 3
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: LIST
34209: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34210: LD_ADDR_VAR 0 24
34214: PUSH
34215: LD_INT 3
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 3
34227: PUSH
34228: LD_INT 1
34230: NEG
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 4
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34251: LD_ADDR_VAR 0 25
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: LD_INT 3
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 4
34268: PUSH
34269: LD_INT 3
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 3
34278: PUSH
34279: LD_INT 4
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: LIST
34290: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34291: LD_ADDR_VAR 0 26
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: LD_INT 3
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 1
34308: PUSH
34309: LD_INT 4
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: LD_INT 3
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: LIST
34331: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34332: LD_ADDR_VAR 0 27
34336: PUSH
34337: LD_INT 3
34339: NEG
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 3
34350: NEG
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 4
34361: NEG
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: LIST
34375: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34376: LD_ADDR_VAR 0 28
34380: PUSH
34381: LD_INT 3
34383: NEG
34384: PUSH
34385: LD_INT 3
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 3
34395: NEG
34396: PUSH
34397: LD_INT 4
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 4
34407: NEG
34408: PUSH
34409: LD_INT 3
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34422: LD_ADDR_VAR 0 29
34426: PUSH
34427: LD_INT 1
34429: NEG
34430: PUSH
34431: LD_INT 3
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: LD_INT 3
34444: NEG
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 1
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 1
34463: NEG
34464: PUSH
34465: LD_INT 4
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 4
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: PUSH
34487: LD_INT 3
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: LD_INT 5
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 5
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 4
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: LD_INT 6
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: LD_INT 6
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 5
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34577: LD_ADDR_VAR 0 30
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 1
34587: NEG
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 3
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 3
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 4
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 4
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 4
34646: PUSH
34647: LD_INT 1
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 5
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 5
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 5
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 6
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 6
34698: PUSH
34699: LD_INT 1
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34720: LD_ADDR_VAR 0 31
34724: PUSH
34725: LD_INT 3
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 3
34737: PUSH
34738: LD_INT 3
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: LD_INT 3
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 4
34757: PUSH
34758: LD_INT 3
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 4
34767: PUSH
34768: LD_INT 4
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: LD_INT 4
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 5
34787: PUSH
34788: LD_INT 4
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 5
34797: PUSH
34798: LD_INT 5
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 4
34807: PUSH
34808: LD_INT 5
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 6
34817: PUSH
34818: LD_INT 5
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 6
34827: PUSH
34828: LD_INT 6
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 5
34837: PUSH
34838: LD_INT 6
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34859: LD_ADDR_VAR 0 32
34863: PUSH
34864: LD_INT 1
34866: PUSH
34867: LD_INT 3
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 1
34886: NEG
34887: PUSH
34888: LD_INT 2
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: LD_INT 4
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: LD_INT 4
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: NEG
34918: PUSH
34919: LD_INT 3
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 1
34928: PUSH
34929: LD_INT 5
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: LD_INT 5
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 1
34948: NEG
34949: PUSH
34950: LD_INT 4
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: LD_INT 6
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: LD_INT 6
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: PUSH
34981: LD_INT 5
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35002: LD_ADDR_VAR 0 33
35006: PUSH
35007: LD_INT 2
35009: NEG
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 3
35020: NEG
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 3
35031: NEG
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 3
35043: NEG
35044: PUSH
35045: LD_INT 1
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 4
35054: NEG
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 4
35065: NEG
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 4
35077: NEG
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 5
35088: NEG
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 5
35099: NEG
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 5
35111: NEG
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 6
35122: NEG
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 6
35133: NEG
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35157: LD_ADDR_VAR 0 34
35161: PUSH
35162: LD_INT 2
35164: NEG
35165: PUSH
35166: LD_INT 3
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 3
35176: NEG
35177: PUSH
35178: LD_INT 2
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 3
35188: NEG
35189: PUSH
35190: LD_INT 3
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 3
35200: NEG
35201: PUSH
35202: LD_INT 4
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 4
35212: NEG
35213: PUSH
35214: LD_INT 3
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 4
35224: NEG
35225: PUSH
35226: LD_INT 4
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 4
35236: NEG
35237: PUSH
35238: LD_INT 5
35240: NEG
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 5
35248: NEG
35249: PUSH
35250: LD_INT 4
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 5
35260: NEG
35261: PUSH
35262: LD_INT 5
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 5
35272: NEG
35273: PUSH
35274: LD_INT 6
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 6
35284: NEG
35285: PUSH
35286: LD_INT 5
35288: NEG
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 6
35296: NEG
35297: PUSH
35298: LD_INT 6
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35320: LD_ADDR_VAR 0 41
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 1
35338: NEG
35339: PUSH
35340: LD_INT 3
35342: NEG
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: PUSH
35351: LD_INT 2
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35364: LD_ADDR_VAR 0 42
35368: PUSH
35369: LD_INT 2
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 2
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 3
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: LIST
35404: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35405: LD_ADDR_VAR 0 43
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 3
35422: PUSH
35423: LD_INT 2
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 2
35432: PUSH
35433: LD_INT 3
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35445: LD_ADDR_VAR 0 44
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: LD_INT 3
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35486: LD_ADDR_VAR 0 45
35490: PUSH
35491: LD_INT 2
35493: NEG
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 3
35515: NEG
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35530: LD_ADDR_VAR 0 46
35534: PUSH
35535: LD_INT 2
35537: NEG
35538: PUSH
35539: LD_INT 2
35541: NEG
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 2
35549: NEG
35550: PUSH
35551: LD_INT 3
35553: NEG
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 3
35561: NEG
35562: PUSH
35563: LD_INT 2
35565: NEG
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35576: LD_ADDR_VAR 0 47
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: LD_INT 3
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: LD_INT 3
35599: NEG
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35609: LD_ADDR_VAR 0 48
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: LD_INT 1
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35640: LD_ADDR_VAR 0 49
35644: PUSH
35645: LD_INT 3
35647: PUSH
35648: LD_INT 1
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 3
35657: PUSH
35658: LD_INT 2
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35669: LD_ADDR_VAR 0 50
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: LD_INT 3
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: LD_INT 3
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35698: LD_ADDR_VAR 0 51
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: NEG
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35729: LD_ADDR_VAR 0 52
35733: PUSH
35734: LD_INT 3
35736: NEG
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 3
35748: NEG
35749: PUSH
35750: LD_INT 2
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35762: LD_ADDR_VAR 0 53
35766: PUSH
35767: LD_INT 1
35769: NEG
35770: PUSH
35771: LD_INT 3
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: LD_INT 3
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: PUSH
35793: LD_INT 2
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35806: LD_ADDR_VAR 0 54
35810: PUSH
35811: LD_INT 2
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 3
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 3
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35847: LD_ADDR_VAR 0 55
35851: PUSH
35852: LD_INT 3
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 3
35864: PUSH
35865: LD_INT 3
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: LD_INT 3
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35887: LD_ADDR_VAR 0 56
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 3
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: LD_INT 3
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35928: LD_ADDR_VAR 0 57
35932: PUSH
35933: LD_INT 2
35935: NEG
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 3
35946: NEG
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 3
35957: NEG
35958: PUSH
35959: LD_INT 1
35961: NEG
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35972: LD_ADDR_VAR 0 58
35976: PUSH
35977: LD_INT 2
35979: NEG
35980: PUSH
35981: LD_INT 3
35983: NEG
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 3
35991: NEG
35992: PUSH
35993: LD_INT 2
35995: NEG
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 3
36003: NEG
36004: PUSH
36005: LD_INT 3
36007: NEG
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36018: LD_ADDR_VAR 0 59
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 2
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36062: LD_ADDR_VAR 0 60
36066: PUSH
36067: LD_INT 1
36069: PUSH
36070: LD_INT 1
36072: NEG
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 2
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 2
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: LIST
36102: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36103: LD_ADDR_VAR 0 61
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 2
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: LIST
36142: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36143: LD_ADDR_VAR 0 62
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: LD_INT 2
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: LD_INT 2
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36184: LD_ADDR_VAR 0 63
36188: PUSH
36189: LD_INT 1
36191: NEG
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 2
36202: NEG
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 2
36213: NEG
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36228: LD_ADDR_VAR 0 64
36232: PUSH
36233: LD_INT 1
36235: NEG
36236: PUSH
36237: LD_INT 2
36239: NEG
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 2
36247: NEG
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 2
36259: NEG
36260: PUSH
36261: LD_INT 2
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// end ; 2 :
36274: GO 39540
36276: LD_INT 2
36278: DOUBLE
36279: EQUAL
36280: IFTRUE 36284
36282: GO 39539
36284: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36285: LD_ADDR_VAR 0 29
36289: PUSH
36290: LD_INT 4
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 4
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 5
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 5
36323: PUSH
36324: LD_INT 1
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 4
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 3
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 3
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 3
36364: PUSH
36365: LD_INT 2
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 5
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 3
36385: PUSH
36386: LD_INT 3
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 3
36395: PUSH
36396: LD_INT 2
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 4
36405: PUSH
36406: LD_INT 3
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 4
36415: PUSH
36416: LD_INT 4
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 3
36425: PUSH
36426: LD_INT 4
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: PUSH
36436: LD_INT 3
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 4
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: PUSH
36466: LD_INT 4
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: LD_INT 4
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: LD_INT 3
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: LD_INT 4
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: LD_INT 5
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: LD_INT 5
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: LD_INT 4
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: LD_INT 3
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 2
36547: PUSH
36548: LD_INT 5
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 2
36557: NEG
36558: PUSH
36559: LD_INT 3
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 3
36568: NEG
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 3
36579: NEG
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 2
36591: NEG
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: NEG
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 3
36613: NEG
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 4
36624: NEG
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 4
36635: NEG
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 4
36647: NEG
36648: PUSH
36649: LD_INT 2
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 2
36659: NEG
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 4
36670: NEG
36671: PUSH
36672: LD_INT 4
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 4
36682: NEG
36683: PUSH
36684: LD_INT 5
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 3
36694: NEG
36695: PUSH
36696: LD_INT 4
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 3
36706: NEG
36707: PUSH
36708: LD_INT 3
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 4
36718: NEG
36719: PUSH
36720: LD_INT 3
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 5
36730: NEG
36731: PUSH
36732: LD_INT 4
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 5
36742: NEG
36743: PUSH
36744: LD_INT 5
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 3
36754: NEG
36755: PUSH
36756: LD_INT 5
36758: NEG
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 5
36766: NEG
36767: PUSH
36768: LD_INT 3
36770: NEG
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
36823: LD_ADDR_VAR 0 30
36827: PUSH
36828: LD_INT 4
36830: PUSH
36831: LD_INT 4
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 4
36840: PUSH
36841: LD_INT 3
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 5
36850: PUSH
36851: LD_INT 4
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 5
36860: PUSH
36861: LD_INT 5
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 4
36870: PUSH
36871: LD_INT 5
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 3
36880: PUSH
36881: LD_INT 4
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 3
36890: PUSH
36891: LD_INT 3
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 5
36900: PUSH
36901: LD_INT 3
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 3
36910: PUSH
36911: LD_INT 5
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: LD_INT 3
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: LD_INT 2
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: LD_INT 3
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: LD_INT 4
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 4
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: LD_INT 3
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: LD_INT 2
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: LD_INT 4
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 2
37002: NEG
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 4
37013: NEG
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 4
37024: NEG
37025: PUSH
37026: LD_INT 1
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 3
37036: NEG
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 3
37047: NEG
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 4
37058: NEG
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 5
37069: NEG
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 5
37080: NEG
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 5
37092: NEG
37093: PUSH
37094: LD_INT 2
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 3
37104: NEG
37105: PUSH
37106: LD_INT 2
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 3
37115: NEG
37116: PUSH
37117: LD_INT 3
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 3
37127: NEG
37128: PUSH
37129: LD_INT 4
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 2
37139: NEG
37140: PUSH
37141: LD_INT 3
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 3
37163: NEG
37164: PUSH
37165: LD_INT 2
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 4
37175: NEG
37176: PUSH
37177: LD_INT 3
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 4
37187: NEG
37188: PUSH
37189: LD_INT 4
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: NEG
37200: PUSH
37201: LD_INT 4
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 4
37211: NEG
37212: PUSH
37213: LD_INT 2
37215: NEG
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 4
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: LD_INT 5
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: LD_INT 4
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: LD_INT 3
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: LD_INT 3
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: LD_INT 4
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 1
37290: NEG
37291: PUSH
37292: LD_INT 5
37294: NEG
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 2
37302: PUSH
37303: LD_INT 3
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 2
37313: NEG
37314: PUSH
37315: LD_INT 5
37317: NEG
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37370: LD_ADDR_VAR 0 31
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: LD_INT 4
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 3
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: PUSH
37398: LD_INT 4
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 1
37407: PUSH
37408: LD_INT 5
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: LD_INT 5
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: LD_INT 4
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: LD_INT 3
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: LD_INT 5
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 2
37459: NEG
37460: PUSH
37461: LD_INT 3
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 3
37470: NEG
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 3
37481: NEG
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 2
37504: NEG
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 3
37515: NEG
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 4
37526: NEG
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 4
37537: NEG
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 4
37549: NEG
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 2
37561: NEG
37562: PUSH
37563: LD_INT 2
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 4
37572: NEG
37573: PUSH
37574: LD_INT 4
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 4
37584: NEG
37585: PUSH
37586: LD_INT 5
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 3
37596: NEG
37597: PUSH
37598: LD_INT 4
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 3
37608: NEG
37609: PUSH
37610: LD_INT 3
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 4
37620: NEG
37621: PUSH
37622: LD_INT 3
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 5
37632: NEG
37633: PUSH
37634: LD_INT 4
37636: NEG
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 5
37644: NEG
37645: PUSH
37646: LD_INT 5
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 3
37656: NEG
37657: PUSH
37658: LD_INT 5
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 5
37668: NEG
37669: PUSH
37670: LD_INT 3
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: LD_INT 3
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: LD_INT 4
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: LD_INT 3
37705: NEG
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: LD_INT 2
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 2
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: LD_INT 3
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: LD_INT 4
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: LD_INT 4
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 4
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 4
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 5
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 5
37813: PUSH
37814: LD_INT 1
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 4
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 3
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 3
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 3
37854: PUSH
37855: LD_INT 2
37857: NEG
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 5
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
37920: LD_ADDR_VAR 0 32
37924: PUSH
37925: LD_INT 4
37927: NEG
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 4
37938: NEG
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 3
37950: NEG
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 3
37961: NEG
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 4
37972: NEG
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 5
37983: NEG
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 5
37994: NEG
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 5
38006: NEG
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 3
38018: NEG
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 3
38029: NEG
38030: PUSH
38031: LD_INT 3
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 3
38041: NEG
38042: PUSH
38043: LD_INT 4
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: LD_INT 3
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 2
38065: NEG
38066: PUSH
38067: LD_INT 2
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 3
38077: NEG
38078: PUSH
38079: LD_INT 2
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 4
38089: NEG
38090: PUSH
38091: LD_INT 3
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 4
38101: NEG
38102: PUSH
38103: LD_INT 4
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: LD_INT 4
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 4
38125: NEG
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: LD_INT 4
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: LD_INT 5
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 4
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: LD_INT 3
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: LD_INT 3
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: LD_INT 4
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: LD_INT 5
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: LD_INT 3
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: LD_INT 5
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 3
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 3
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 4
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 4
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 3
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 2
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 4
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 4
38332: PUSH
38333: LD_INT 4
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 4
38342: PUSH
38343: LD_INT 3
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 5
38352: PUSH
38353: LD_INT 4
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 5
38362: PUSH
38363: LD_INT 5
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 4
38372: PUSH
38373: LD_INT 5
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 3
38382: PUSH
38383: LD_INT 4
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 3
38392: PUSH
38393: LD_INT 3
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 5
38402: PUSH
38403: LD_INT 3
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 3
38412: PUSH
38413: LD_INT 5
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38467: LD_ADDR_VAR 0 33
38471: PUSH
38472: LD_INT 4
38474: NEG
38475: PUSH
38476: LD_INT 4
38478: NEG
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 4
38486: NEG
38487: PUSH
38488: LD_INT 5
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 3
38498: NEG
38499: PUSH
38500: LD_INT 4
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 3
38510: NEG
38511: PUSH
38512: LD_INT 3
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 4
38522: NEG
38523: PUSH
38524: LD_INT 3
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 5
38534: NEG
38535: PUSH
38536: LD_INT 4
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 5
38546: NEG
38547: PUSH
38548: LD_INT 5
38550: NEG
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 3
38558: NEG
38559: PUSH
38560: LD_INT 5
38562: NEG
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 5
38570: NEG
38571: PUSH
38572: LD_INT 3
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 3
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: LD_INT 4
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 1
38604: PUSH
38605: LD_INT 3
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: LD_INT 2
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 2
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: LD_INT 3
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: LD_INT 4
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 2
38661: PUSH
38662: LD_INT 2
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 2
38672: NEG
38673: PUSH
38674: LD_INT 4
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 4
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 4
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 5
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 5
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 4
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 3
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 3
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 3
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 5
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: LD_INT 3
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 3
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 4
38797: PUSH
38798: LD_INT 3
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 4
38807: PUSH
38808: LD_INT 4
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 3
38817: PUSH
38818: LD_INT 4
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 3
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 4
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 4
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: LD_INT 4
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 3
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 4
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: LD_INT 5
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: LD_INT 5
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 4
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: LD_INT 3
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 2
38939: PUSH
38940: LD_INT 5
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 2
38949: NEG
38950: PUSH
38951: LD_INT 3
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39005: LD_ADDR_VAR 0 34
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: LD_INT 4
39015: NEG
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: LD_INT 5
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: LD_INT 4
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: LD_INT 3
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: LD_INT 3
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: LD_INT 4
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 1
39079: NEG
39080: PUSH
39081: LD_INT 5
39083: NEG
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: LD_INT 3
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: LD_INT 5
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 3
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 3
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 4
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 4
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 3
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 2
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 4
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 4
39207: PUSH
39208: LD_INT 4
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 4
39217: PUSH
39218: LD_INT 3
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 5
39227: PUSH
39228: LD_INT 4
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 5
39237: PUSH
39238: LD_INT 5
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 4
39247: PUSH
39248: LD_INT 5
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 3
39257: PUSH
39258: LD_INT 4
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 3
39267: PUSH
39268: LD_INT 3
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 5
39277: PUSH
39278: LD_INT 3
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 3
39287: PUSH
39288: LD_INT 5
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: LD_INT 3
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: LD_INT 3
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 4
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 4
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: LD_INT 3
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: LD_INT 2
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: LD_INT 4
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: LD_INT 2
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 4
39390: NEG
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 4
39401: NEG
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 3
39413: NEG
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 3
39424: NEG
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 4
39435: NEG
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 5
39446: NEG
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 5
39457: NEG
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 5
39469: NEG
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 3
39481: NEG
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: ST_TO_ADDR
// end ; end ;
39537: GO 39540
39539: POP
// case btype of b_depot , b_warehouse :
39540: LD_VAR 0 1
39544: PUSH
39545: LD_INT 0
39547: DOUBLE
39548: EQUAL
39549: IFTRUE 39559
39551: LD_INT 1
39553: DOUBLE
39554: EQUAL
39555: IFTRUE 39559
39557: GO 39760
39559: POP
// case nation of nation_american :
39560: LD_VAR 0 5
39564: PUSH
39565: LD_INT 1
39567: DOUBLE
39568: EQUAL
39569: IFTRUE 39573
39571: GO 39629
39573: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39574: LD_ADDR_VAR 0 9
39578: PUSH
39579: LD_VAR 0 11
39583: PUSH
39584: LD_VAR 0 12
39588: PUSH
39589: LD_VAR 0 13
39593: PUSH
39594: LD_VAR 0 14
39598: PUSH
39599: LD_VAR 0 15
39603: PUSH
39604: LD_VAR 0 16
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: PUSH
39617: LD_VAR 0 4
39621: PUSH
39622: LD_INT 1
39624: PLUS
39625: ARRAY
39626: ST_TO_ADDR
39627: GO 39758
39629: LD_INT 2
39631: DOUBLE
39632: EQUAL
39633: IFTRUE 39637
39635: GO 39693
39637: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39638: LD_ADDR_VAR 0 9
39642: PUSH
39643: LD_VAR 0 17
39647: PUSH
39648: LD_VAR 0 18
39652: PUSH
39653: LD_VAR 0 19
39657: PUSH
39658: LD_VAR 0 20
39662: PUSH
39663: LD_VAR 0 21
39667: PUSH
39668: LD_VAR 0 22
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: PUSH
39681: LD_VAR 0 4
39685: PUSH
39686: LD_INT 1
39688: PLUS
39689: ARRAY
39690: ST_TO_ADDR
39691: GO 39758
39693: LD_INT 3
39695: DOUBLE
39696: EQUAL
39697: IFTRUE 39701
39699: GO 39757
39701: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39702: LD_ADDR_VAR 0 9
39706: PUSH
39707: LD_VAR 0 23
39711: PUSH
39712: LD_VAR 0 24
39716: PUSH
39717: LD_VAR 0 25
39721: PUSH
39722: LD_VAR 0 26
39726: PUSH
39727: LD_VAR 0 27
39731: PUSH
39732: LD_VAR 0 28
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: PUSH
39745: LD_VAR 0 4
39749: PUSH
39750: LD_INT 1
39752: PLUS
39753: ARRAY
39754: ST_TO_ADDR
39755: GO 39758
39757: POP
39758: GO 40313
39760: LD_INT 2
39762: DOUBLE
39763: EQUAL
39764: IFTRUE 39774
39766: LD_INT 3
39768: DOUBLE
39769: EQUAL
39770: IFTRUE 39774
39772: GO 39830
39774: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39775: LD_ADDR_VAR 0 9
39779: PUSH
39780: LD_VAR 0 29
39784: PUSH
39785: LD_VAR 0 30
39789: PUSH
39790: LD_VAR 0 31
39794: PUSH
39795: LD_VAR 0 32
39799: PUSH
39800: LD_VAR 0 33
39804: PUSH
39805: LD_VAR 0 34
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: PUSH
39818: LD_VAR 0 4
39822: PUSH
39823: LD_INT 1
39825: PLUS
39826: ARRAY
39827: ST_TO_ADDR
39828: GO 40313
39830: LD_INT 16
39832: DOUBLE
39833: EQUAL
39834: IFTRUE 39892
39836: LD_INT 17
39838: DOUBLE
39839: EQUAL
39840: IFTRUE 39892
39842: LD_INT 18
39844: DOUBLE
39845: EQUAL
39846: IFTRUE 39892
39848: LD_INT 19
39850: DOUBLE
39851: EQUAL
39852: IFTRUE 39892
39854: LD_INT 22
39856: DOUBLE
39857: EQUAL
39858: IFTRUE 39892
39860: LD_INT 20
39862: DOUBLE
39863: EQUAL
39864: IFTRUE 39892
39866: LD_INT 21
39868: DOUBLE
39869: EQUAL
39870: IFTRUE 39892
39872: LD_INT 23
39874: DOUBLE
39875: EQUAL
39876: IFTRUE 39892
39878: LD_INT 24
39880: DOUBLE
39881: EQUAL
39882: IFTRUE 39892
39884: LD_INT 25
39886: DOUBLE
39887: EQUAL
39888: IFTRUE 39892
39890: GO 39948
39892: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39893: LD_ADDR_VAR 0 9
39897: PUSH
39898: LD_VAR 0 35
39902: PUSH
39903: LD_VAR 0 36
39907: PUSH
39908: LD_VAR 0 37
39912: PUSH
39913: LD_VAR 0 38
39917: PUSH
39918: LD_VAR 0 39
39922: PUSH
39923: LD_VAR 0 40
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: PUSH
39936: LD_VAR 0 4
39940: PUSH
39941: LD_INT 1
39943: PLUS
39944: ARRAY
39945: ST_TO_ADDR
39946: GO 40313
39948: LD_INT 6
39950: DOUBLE
39951: EQUAL
39952: IFTRUE 40004
39954: LD_INT 7
39956: DOUBLE
39957: EQUAL
39958: IFTRUE 40004
39960: LD_INT 8
39962: DOUBLE
39963: EQUAL
39964: IFTRUE 40004
39966: LD_INT 13
39968: DOUBLE
39969: EQUAL
39970: IFTRUE 40004
39972: LD_INT 12
39974: DOUBLE
39975: EQUAL
39976: IFTRUE 40004
39978: LD_INT 15
39980: DOUBLE
39981: EQUAL
39982: IFTRUE 40004
39984: LD_INT 11
39986: DOUBLE
39987: EQUAL
39988: IFTRUE 40004
39990: LD_INT 14
39992: DOUBLE
39993: EQUAL
39994: IFTRUE 40004
39996: LD_INT 10
39998: DOUBLE
39999: EQUAL
40000: IFTRUE 40004
40002: GO 40060
40004: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40005: LD_ADDR_VAR 0 9
40009: PUSH
40010: LD_VAR 0 41
40014: PUSH
40015: LD_VAR 0 42
40019: PUSH
40020: LD_VAR 0 43
40024: PUSH
40025: LD_VAR 0 44
40029: PUSH
40030: LD_VAR 0 45
40034: PUSH
40035: LD_VAR 0 46
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: PUSH
40048: LD_VAR 0 4
40052: PUSH
40053: LD_INT 1
40055: PLUS
40056: ARRAY
40057: ST_TO_ADDR
40058: GO 40313
40060: LD_INT 36
40062: DOUBLE
40063: EQUAL
40064: IFTRUE 40068
40066: GO 40124
40068: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40069: LD_ADDR_VAR 0 9
40073: PUSH
40074: LD_VAR 0 47
40078: PUSH
40079: LD_VAR 0 48
40083: PUSH
40084: LD_VAR 0 49
40088: PUSH
40089: LD_VAR 0 50
40093: PUSH
40094: LD_VAR 0 51
40098: PUSH
40099: LD_VAR 0 52
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: PUSH
40112: LD_VAR 0 4
40116: PUSH
40117: LD_INT 1
40119: PLUS
40120: ARRAY
40121: ST_TO_ADDR
40122: GO 40313
40124: LD_INT 4
40126: DOUBLE
40127: EQUAL
40128: IFTRUE 40150
40130: LD_INT 5
40132: DOUBLE
40133: EQUAL
40134: IFTRUE 40150
40136: LD_INT 34
40138: DOUBLE
40139: EQUAL
40140: IFTRUE 40150
40142: LD_INT 37
40144: DOUBLE
40145: EQUAL
40146: IFTRUE 40150
40148: GO 40206
40150: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40151: LD_ADDR_VAR 0 9
40155: PUSH
40156: LD_VAR 0 53
40160: PUSH
40161: LD_VAR 0 54
40165: PUSH
40166: LD_VAR 0 55
40170: PUSH
40171: LD_VAR 0 56
40175: PUSH
40176: LD_VAR 0 57
40180: PUSH
40181: LD_VAR 0 58
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: PUSH
40194: LD_VAR 0 4
40198: PUSH
40199: LD_INT 1
40201: PLUS
40202: ARRAY
40203: ST_TO_ADDR
40204: GO 40313
40206: LD_INT 31
40208: DOUBLE
40209: EQUAL
40210: IFTRUE 40256
40212: LD_INT 32
40214: DOUBLE
40215: EQUAL
40216: IFTRUE 40256
40218: LD_INT 33
40220: DOUBLE
40221: EQUAL
40222: IFTRUE 40256
40224: LD_INT 27
40226: DOUBLE
40227: EQUAL
40228: IFTRUE 40256
40230: LD_INT 26
40232: DOUBLE
40233: EQUAL
40234: IFTRUE 40256
40236: LD_INT 28
40238: DOUBLE
40239: EQUAL
40240: IFTRUE 40256
40242: LD_INT 29
40244: DOUBLE
40245: EQUAL
40246: IFTRUE 40256
40248: LD_INT 30
40250: DOUBLE
40251: EQUAL
40252: IFTRUE 40256
40254: GO 40312
40256: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40257: LD_ADDR_VAR 0 9
40261: PUSH
40262: LD_VAR 0 59
40266: PUSH
40267: LD_VAR 0 60
40271: PUSH
40272: LD_VAR 0 61
40276: PUSH
40277: LD_VAR 0 62
40281: PUSH
40282: LD_VAR 0 63
40286: PUSH
40287: LD_VAR 0 64
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: PUSH
40300: LD_VAR 0 4
40304: PUSH
40305: LD_INT 1
40307: PLUS
40308: ARRAY
40309: ST_TO_ADDR
40310: GO 40313
40312: POP
// temp_list2 = [ ] ;
40313: LD_ADDR_VAR 0 10
40317: PUSH
40318: EMPTY
40319: ST_TO_ADDR
// for i in temp_list do
40320: LD_ADDR_VAR 0 8
40324: PUSH
40325: LD_VAR 0 9
40329: PUSH
40330: FOR_IN
40331: IFFALSE 40383
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40333: LD_ADDR_VAR 0 10
40337: PUSH
40338: LD_VAR 0 10
40342: PUSH
40343: LD_VAR 0 8
40347: PUSH
40348: LD_INT 1
40350: ARRAY
40351: PUSH
40352: LD_VAR 0 2
40356: PLUS
40357: PUSH
40358: LD_VAR 0 8
40362: PUSH
40363: LD_INT 2
40365: ARRAY
40366: PUSH
40367: LD_VAR 0 3
40371: PLUS
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: EMPTY
40378: LIST
40379: ADD
40380: ST_TO_ADDR
40381: GO 40330
40383: POP
40384: POP
// result = temp_list2 ;
40385: LD_ADDR_VAR 0 7
40389: PUSH
40390: LD_VAR 0 10
40394: ST_TO_ADDR
// end ;
40395: LD_VAR 0 7
40399: RET
// export function EnemyInRange ( unit , dist ) ; begin
40400: LD_INT 0
40402: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40403: LD_ADDR_VAR 0 3
40407: PUSH
40408: LD_VAR 0 1
40412: PPUSH
40413: CALL_OW 255
40417: PPUSH
40418: LD_VAR 0 1
40422: PPUSH
40423: CALL_OW 250
40427: PPUSH
40428: LD_VAR 0 1
40432: PPUSH
40433: CALL_OW 251
40437: PPUSH
40438: LD_VAR 0 2
40442: PPUSH
40443: CALL 13796 0 4
40447: PUSH
40448: LD_INT 4
40450: ARRAY
40451: ST_TO_ADDR
// end ;
40452: LD_VAR 0 3
40456: RET
// export function PlayerSeeMe ( unit ) ; begin
40457: LD_INT 0
40459: PPUSH
// result := See ( your_side , unit ) ;
40460: LD_ADDR_VAR 0 2
40464: PUSH
40465: LD_OWVAR 2
40469: PPUSH
40470: LD_VAR 0 1
40474: PPUSH
40475: CALL_OW 292
40479: ST_TO_ADDR
// end ;
40480: LD_VAR 0 2
40484: RET
// export function ReverseDir ( unit ) ; begin
40485: LD_INT 0
40487: PPUSH
// if not unit then
40488: LD_VAR 0 1
40492: NOT
40493: IFFALSE 40497
// exit ;
40495: GO 40520
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40497: LD_ADDR_VAR 0 2
40501: PUSH
40502: LD_VAR 0 1
40506: PPUSH
40507: CALL_OW 254
40511: PUSH
40512: LD_INT 3
40514: PLUS
40515: PUSH
40516: LD_INT 6
40518: MOD
40519: ST_TO_ADDR
// end ;
40520: LD_VAR 0 2
40524: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
40525: LD_INT 0
40527: PPUSH
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
// if not hexes then
40532: LD_VAR 0 2
40536: NOT
40537: IFFALSE 40541
// exit ;
40539: GO 40689
// dist := 9999 ;
40541: LD_ADDR_VAR 0 5
40545: PUSH
40546: LD_INT 9999
40548: ST_TO_ADDR
// for i = 1 to hexes do
40549: LD_ADDR_VAR 0 4
40553: PUSH
40554: DOUBLE
40555: LD_INT 1
40557: DEC
40558: ST_TO_ADDR
40559: LD_VAR 0 2
40563: PUSH
40564: FOR_TO
40565: IFFALSE 40677
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
40567: LD_VAR 0 1
40571: PPUSH
40572: LD_VAR 0 2
40576: PUSH
40577: LD_VAR 0 4
40581: ARRAY
40582: PUSH
40583: LD_INT 1
40585: ARRAY
40586: PPUSH
40587: LD_VAR 0 2
40591: PUSH
40592: LD_VAR 0 4
40596: ARRAY
40597: PUSH
40598: LD_INT 2
40600: ARRAY
40601: PPUSH
40602: CALL_OW 297
40606: PUSH
40607: LD_VAR 0 5
40611: LESS
40612: IFFALSE 40675
// begin hex := hexes [ i ] ;
40614: LD_ADDR_VAR 0 7
40618: PUSH
40619: LD_VAR 0 2
40623: PUSH
40624: LD_VAR 0 4
40628: ARRAY
40629: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40630: LD_ADDR_VAR 0 5
40634: PUSH
40635: LD_VAR 0 1
40639: PPUSH
40640: LD_VAR 0 2
40644: PUSH
40645: LD_VAR 0 4
40649: ARRAY
40650: PUSH
40651: LD_INT 1
40653: ARRAY
40654: PPUSH
40655: LD_VAR 0 2
40659: PUSH
40660: LD_VAR 0 4
40664: ARRAY
40665: PUSH
40666: LD_INT 2
40668: ARRAY
40669: PPUSH
40670: CALL_OW 297
40674: ST_TO_ADDR
// end ; end ;
40675: GO 40564
40677: POP
40678: POP
// result := hex ;
40679: LD_ADDR_VAR 0 3
40683: PUSH
40684: LD_VAR 0 7
40688: ST_TO_ADDR
// end ;
40689: LD_VAR 0 3
40693: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40694: LD_INT 0
40696: PPUSH
40697: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40698: LD_VAR 0 1
40702: NOT
40703: PUSH
40704: LD_VAR 0 1
40708: PUSH
40709: LD_INT 21
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 23
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PPUSH
40733: CALL_OW 69
40737: IN
40738: NOT
40739: OR
40740: IFFALSE 40744
// exit ;
40742: GO 40791
// for i = 1 to 3 do
40744: LD_ADDR_VAR 0 3
40748: PUSH
40749: DOUBLE
40750: LD_INT 1
40752: DEC
40753: ST_TO_ADDR
40754: LD_INT 3
40756: PUSH
40757: FOR_TO
40758: IFFALSE 40789
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40760: LD_VAR 0 1
40764: PPUSH
40765: CALL_OW 250
40769: PPUSH
40770: LD_VAR 0 1
40774: PPUSH
40775: CALL_OW 251
40779: PPUSH
40780: LD_INT 1
40782: PPUSH
40783: CALL_OW 453
40787: GO 40757
40789: POP
40790: POP
// end ;
40791: LD_VAR 0 2
40795: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40796: LD_INT 0
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40804: LD_VAR 0 1
40808: NOT
40809: PUSH
40810: LD_VAR 0 2
40814: NOT
40815: OR
40816: PUSH
40817: LD_VAR 0 1
40821: PPUSH
40822: CALL_OW 314
40826: OR
40827: IFFALSE 40831
// exit ;
40829: GO 41272
// x := GetX ( enemy_unit ) ;
40831: LD_ADDR_VAR 0 7
40835: PUSH
40836: LD_VAR 0 2
40840: PPUSH
40841: CALL_OW 250
40845: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40846: LD_ADDR_VAR 0 8
40850: PUSH
40851: LD_VAR 0 2
40855: PPUSH
40856: CALL_OW 251
40860: ST_TO_ADDR
// if not x or not y then
40861: LD_VAR 0 7
40865: NOT
40866: PUSH
40867: LD_VAR 0 8
40871: NOT
40872: OR
40873: IFFALSE 40877
// exit ;
40875: GO 41272
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
40877: LD_ADDR_VAR 0 6
40881: PUSH
40882: LD_VAR 0 7
40886: PPUSH
40887: LD_INT 0
40889: PPUSH
40890: LD_INT 4
40892: PPUSH
40893: CALL_OW 272
40897: PUSH
40898: LD_VAR 0 8
40902: PPUSH
40903: LD_INT 0
40905: PPUSH
40906: LD_INT 4
40908: PPUSH
40909: CALL_OW 273
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_VAR 0 7
40922: PPUSH
40923: LD_INT 1
40925: PPUSH
40926: LD_INT 4
40928: PPUSH
40929: CALL_OW 272
40933: PUSH
40934: LD_VAR 0 8
40938: PPUSH
40939: LD_INT 1
40941: PPUSH
40942: LD_INT 4
40944: PPUSH
40945: CALL_OW 273
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_VAR 0 7
40958: PPUSH
40959: LD_INT 2
40961: PPUSH
40962: LD_INT 4
40964: PPUSH
40965: CALL_OW 272
40969: PUSH
40970: LD_VAR 0 8
40974: PPUSH
40975: LD_INT 2
40977: PPUSH
40978: LD_INT 4
40980: PPUSH
40981: CALL_OW 273
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_VAR 0 7
40994: PPUSH
40995: LD_INT 3
40997: PPUSH
40998: LD_INT 4
41000: PPUSH
41001: CALL_OW 272
41005: PUSH
41006: LD_VAR 0 8
41010: PPUSH
41011: LD_INT 3
41013: PPUSH
41014: LD_INT 4
41016: PPUSH
41017: CALL_OW 273
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_VAR 0 7
41030: PPUSH
41031: LD_INT 4
41033: PPUSH
41034: LD_INT 4
41036: PPUSH
41037: CALL_OW 272
41041: PUSH
41042: LD_VAR 0 8
41046: PPUSH
41047: LD_INT 4
41049: PPUSH
41050: LD_INT 4
41052: PPUSH
41053: CALL_OW 273
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_VAR 0 7
41066: PPUSH
41067: LD_INT 5
41069: PPUSH
41070: LD_INT 4
41072: PPUSH
41073: CALL_OW 272
41077: PUSH
41078: LD_VAR 0 8
41082: PPUSH
41083: LD_INT 5
41085: PPUSH
41086: LD_INT 4
41088: PPUSH
41089: CALL_OW 273
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: ST_TO_ADDR
// for i = tmp downto 1 do
41106: LD_ADDR_VAR 0 4
41110: PUSH
41111: DOUBLE
41112: LD_VAR 0 6
41116: INC
41117: ST_TO_ADDR
41118: LD_INT 1
41120: PUSH
41121: FOR_DOWNTO
41122: IFFALSE 41223
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41124: LD_VAR 0 6
41128: PUSH
41129: LD_VAR 0 4
41133: ARRAY
41134: PUSH
41135: LD_INT 1
41137: ARRAY
41138: PPUSH
41139: LD_VAR 0 6
41143: PUSH
41144: LD_VAR 0 4
41148: ARRAY
41149: PUSH
41150: LD_INT 2
41152: ARRAY
41153: PPUSH
41154: CALL_OW 488
41158: NOT
41159: PUSH
41160: LD_VAR 0 6
41164: PUSH
41165: LD_VAR 0 4
41169: ARRAY
41170: PUSH
41171: LD_INT 1
41173: ARRAY
41174: PPUSH
41175: LD_VAR 0 6
41179: PUSH
41180: LD_VAR 0 4
41184: ARRAY
41185: PUSH
41186: LD_INT 2
41188: ARRAY
41189: PPUSH
41190: CALL_OW 428
41194: PUSH
41195: LD_INT 0
41197: NONEQUAL
41198: OR
41199: IFFALSE 41221
// tmp := Delete ( tmp , i ) ;
41201: LD_ADDR_VAR 0 6
41205: PUSH
41206: LD_VAR 0 6
41210: PPUSH
41211: LD_VAR 0 4
41215: PPUSH
41216: CALL_OW 3
41220: ST_TO_ADDR
41221: GO 41121
41223: POP
41224: POP
// j := GetClosestHex ( unit , tmp ) ;
41225: LD_ADDR_VAR 0 5
41229: PUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: LD_VAR 0 6
41239: PPUSH
41240: CALL 40525 0 2
41244: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41245: LD_VAR 0 1
41249: PPUSH
41250: LD_VAR 0 5
41254: PUSH
41255: LD_INT 1
41257: ARRAY
41258: PPUSH
41259: LD_VAR 0 5
41263: PUSH
41264: LD_INT 2
41266: ARRAY
41267: PPUSH
41268: CALL_OW 111
// end ;
41272: LD_VAR 0 3
41276: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41277: LD_INT 0
41279: PPUSH
41280: PPUSH
41281: PPUSH
// uc_side = 0 ;
41282: LD_ADDR_OWVAR 20
41286: PUSH
41287: LD_INT 0
41289: ST_TO_ADDR
// uc_nation = 0 ;
41290: LD_ADDR_OWVAR 21
41294: PUSH
41295: LD_INT 0
41297: ST_TO_ADDR
// InitHc_All ( ) ;
41298: CALL_OW 584
// InitVc ;
41302: CALL_OW 20
// if mastodonts then
41306: LD_VAR 0 6
41310: IFFALSE 41377
// for i = 1 to mastodonts do
41312: LD_ADDR_VAR 0 11
41316: PUSH
41317: DOUBLE
41318: LD_INT 1
41320: DEC
41321: ST_TO_ADDR
41322: LD_VAR 0 6
41326: PUSH
41327: FOR_TO
41328: IFFALSE 41375
// begin vc_chassis := 31 ;
41330: LD_ADDR_OWVAR 37
41334: PUSH
41335: LD_INT 31
41337: ST_TO_ADDR
// vc_control := control_rider ;
41338: LD_ADDR_OWVAR 38
41342: PUSH
41343: LD_INT 4
41345: ST_TO_ADDR
// animal := CreateVehicle ;
41346: LD_ADDR_VAR 0 12
41350: PUSH
41351: CALL_OW 45
41355: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41356: LD_VAR 0 12
41360: PPUSH
41361: LD_VAR 0 8
41365: PPUSH
41366: LD_INT 0
41368: PPUSH
41369: CALL 43565 0 3
// end ;
41373: GO 41327
41375: POP
41376: POP
// if horses then
41377: LD_VAR 0 5
41381: IFFALSE 41448
// for i = 1 to horses do
41383: LD_ADDR_VAR 0 11
41387: PUSH
41388: DOUBLE
41389: LD_INT 1
41391: DEC
41392: ST_TO_ADDR
41393: LD_VAR 0 5
41397: PUSH
41398: FOR_TO
41399: IFFALSE 41446
// begin hc_class := 21 ;
41401: LD_ADDR_OWVAR 28
41405: PUSH
41406: LD_INT 21
41408: ST_TO_ADDR
// hc_gallery :=  ;
41409: LD_ADDR_OWVAR 33
41413: PUSH
41414: LD_STRING 
41416: ST_TO_ADDR
// animal := CreateHuman ;
41417: LD_ADDR_VAR 0 12
41421: PUSH
41422: CALL_OW 44
41426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41427: LD_VAR 0 12
41431: PPUSH
41432: LD_VAR 0 8
41436: PPUSH
41437: LD_INT 0
41439: PPUSH
41440: CALL 43565 0 3
// end ;
41444: GO 41398
41446: POP
41447: POP
// if birds then
41448: LD_VAR 0 1
41452: IFFALSE 41519
// for i = 1 to birds do
41454: LD_ADDR_VAR 0 11
41458: PUSH
41459: DOUBLE
41460: LD_INT 1
41462: DEC
41463: ST_TO_ADDR
41464: LD_VAR 0 1
41468: PUSH
41469: FOR_TO
41470: IFFALSE 41517
// begin hc_class = 18 ;
41472: LD_ADDR_OWVAR 28
41476: PUSH
41477: LD_INT 18
41479: ST_TO_ADDR
// hc_gallery =  ;
41480: LD_ADDR_OWVAR 33
41484: PUSH
41485: LD_STRING 
41487: ST_TO_ADDR
// animal := CreateHuman ;
41488: LD_ADDR_VAR 0 12
41492: PUSH
41493: CALL_OW 44
41497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41498: LD_VAR 0 12
41502: PPUSH
41503: LD_VAR 0 8
41507: PPUSH
41508: LD_INT 0
41510: PPUSH
41511: CALL 43565 0 3
// end ;
41515: GO 41469
41517: POP
41518: POP
// if tigers then
41519: LD_VAR 0 2
41523: IFFALSE 41607
// for i = 1 to tigers do
41525: LD_ADDR_VAR 0 11
41529: PUSH
41530: DOUBLE
41531: LD_INT 1
41533: DEC
41534: ST_TO_ADDR
41535: LD_VAR 0 2
41539: PUSH
41540: FOR_TO
41541: IFFALSE 41605
// begin hc_class = class_tiger ;
41543: LD_ADDR_OWVAR 28
41547: PUSH
41548: LD_INT 14
41550: ST_TO_ADDR
// hc_gallery =  ;
41551: LD_ADDR_OWVAR 33
41555: PUSH
41556: LD_STRING 
41558: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41559: LD_ADDR_OWVAR 35
41563: PUSH
41564: LD_INT 7
41566: NEG
41567: PPUSH
41568: LD_INT 7
41570: PPUSH
41571: CALL_OW 12
41575: ST_TO_ADDR
// animal := CreateHuman ;
41576: LD_ADDR_VAR 0 12
41580: PUSH
41581: CALL_OW 44
41585: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41586: LD_VAR 0 12
41590: PPUSH
41591: LD_VAR 0 8
41595: PPUSH
41596: LD_INT 0
41598: PPUSH
41599: CALL 43565 0 3
// end ;
41603: GO 41540
41605: POP
41606: POP
// if apemans then
41607: LD_VAR 0 3
41611: IFFALSE 41734
// for i = 1 to apemans do
41613: LD_ADDR_VAR 0 11
41617: PUSH
41618: DOUBLE
41619: LD_INT 1
41621: DEC
41622: ST_TO_ADDR
41623: LD_VAR 0 3
41627: PUSH
41628: FOR_TO
41629: IFFALSE 41732
// begin hc_class = class_apeman ;
41631: LD_ADDR_OWVAR 28
41635: PUSH
41636: LD_INT 12
41638: ST_TO_ADDR
// hc_gallery =  ;
41639: LD_ADDR_OWVAR 33
41643: PUSH
41644: LD_STRING 
41646: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
41647: LD_ADDR_OWVAR 35
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PPUSH
41656: LD_INT 2
41658: PPUSH
41659: CALL_OW 12
41663: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41664: LD_ADDR_OWVAR 31
41668: PUSH
41669: LD_INT 1
41671: PPUSH
41672: LD_INT 3
41674: PPUSH
41675: CALL_OW 12
41679: PUSH
41680: LD_INT 1
41682: PPUSH
41683: LD_INT 3
41685: PPUSH
41686: CALL_OW 12
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: ST_TO_ADDR
// animal := CreateHuman ;
41703: LD_ADDR_VAR 0 12
41707: PUSH
41708: CALL_OW 44
41712: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41713: LD_VAR 0 12
41717: PPUSH
41718: LD_VAR 0 8
41722: PPUSH
41723: LD_INT 0
41725: PPUSH
41726: CALL 43565 0 3
// end ;
41730: GO 41628
41732: POP
41733: POP
// if enchidnas then
41734: LD_VAR 0 4
41738: IFFALSE 41805
// for i = 1 to enchidnas do
41740: LD_ADDR_VAR 0 11
41744: PUSH
41745: DOUBLE
41746: LD_INT 1
41748: DEC
41749: ST_TO_ADDR
41750: LD_VAR 0 4
41754: PUSH
41755: FOR_TO
41756: IFFALSE 41803
// begin hc_class = 13 ;
41758: LD_ADDR_OWVAR 28
41762: PUSH
41763: LD_INT 13
41765: ST_TO_ADDR
// hc_gallery =  ;
41766: LD_ADDR_OWVAR 33
41770: PUSH
41771: LD_STRING 
41773: ST_TO_ADDR
// animal := CreateHuman ;
41774: LD_ADDR_VAR 0 12
41778: PUSH
41779: CALL_OW 44
41783: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41784: LD_VAR 0 12
41788: PPUSH
41789: LD_VAR 0 8
41793: PPUSH
41794: LD_INT 0
41796: PPUSH
41797: CALL 43565 0 3
// end ;
41801: GO 41755
41803: POP
41804: POP
// if fishes then
41805: LD_VAR 0 7
41809: IFFALSE 41876
// for i = 1 to fishes do
41811: LD_ADDR_VAR 0 11
41815: PUSH
41816: DOUBLE
41817: LD_INT 1
41819: DEC
41820: ST_TO_ADDR
41821: LD_VAR 0 7
41825: PUSH
41826: FOR_TO
41827: IFFALSE 41874
// begin hc_class = 20 ;
41829: LD_ADDR_OWVAR 28
41833: PUSH
41834: LD_INT 20
41836: ST_TO_ADDR
// hc_gallery =  ;
41837: LD_ADDR_OWVAR 33
41841: PUSH
41842: LD_STRING 
41844: ST_TO_ADDR
// animal := CreateHuman ;
41845: LD_ADDR_VAR 0 12
41849: PUSH
41850: CALL_OW 44
41854: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41855: LD_VAR 0 12
41859: PPUSH
41860: LD_VAR 0 9
41864: PPUSH
41865: LD_INT 0
41867: PPUSH
41868: CALL 43565 0 3
// end ;
41872: GO 41826
41874: POP
41875: POP
// end ;
41876: LD_VAR 0 10
41880: RET
// export function WantHeal ( sci , unit ) ; begin
41881: LD_INT 0
41883: PPUSH
// if GetTaskList ( sci ) > 0 then
41884: LD_VAR 0 1
41888: PPUSH
41889: CALL_OW 437
41893: PUSH
41894: LD_INT 0
41896: GREATER
41897: IFFALSE 41967
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41899: LD_VAR 0 1
41903: PPUSH
41904: CALL_OW 437
41908: PUSH
41909: LD_INT 1
41911: ARRAY
41912: PUSH
41913: LD_INT 1
41915: ARRAY
41916: PUSH
41917: LD_STRING l
41919: EQUAL
41920: PUSH
41921: LD_VAR 0 1
41925: PPUSH
41926: CALL_OW 437
41930: PUSH
41931: LD_INT 1
41933: ARRAY
41934: PUSH
41935: LD_INT 4
41937: ARRAY
41938: PUSH
41939: LD_VAR 0 2
41943: EQUAL
41944: AND
41945: IFFALSE 41957
// result := true else
41947: LD_ADDR_VAR 0 3
41951: PUSH
41952: LD_INT 1
41954: ST_TO_ADDR
41955: GO 41965
// result := false ;
41957: LD_ADDR_VAR 0 3
41961: PUSH
41962: LD_INT 0
41964: ST_TO_ADDR
// end else
41965: GO 41975
// result := false ;
41967: LD_ADDR_VAR 0 3
41971: PUSH
41972: LD_INT 0
41974: ST_TO_ADDR
// end ;
41975: LD_VAR 0 3
41979: RET
// export function HealTarget ( sci ) ; begin
41980: LD_INT 0
41982: PPUSH
// if not sci then
41983: LD_VAR 0 1
41987: NOT
41988: IFFALSE 41992
// exit ;
41990: GO 42057
// result := 0 ;
41992: LD_ADDR_VAR 0 2
41996: PUSH
41997: LD_INT 0
41999: ST_TO_ADDR
// if GetTaskList ( sci ) then
42000: LD_VAR 0 1
42004: PPUSH
42005: CALL_OW 437
42009: IFFALSE 42057
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42011: LD_VAR 0 1
42015: PPUSH
42016: CALL_OW 437
42020: PUSH
42021: LD_INT 1
42023: ARRAY
42024: PUSH
42025: LD_INT 1
42027: ARRAY
42028: PUSH
42029: LD_STRING l
42031: EQUAL
42032: IFFALSE 42057
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42034: LD_ADDR_VAR 0 2
42038: PUSH
42039: LD_VAR 0 1
42043: PPUSH
42044: CALL_OW 437
42048: PUSH
42049: LD_INT 1
42051: ARRAY
42052: PUSH
42053: LD_INT 4
42055: ARRAY
42056: ST_TO_ADDR
// end ;
42057: LD_VAR 0 2
42061: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42062: LD_INT 0
42064: PPUSH
42065: PPUSH
42066: PPUSH
42067: PPUSH
// if not base_units then
42068: LD_VAR 0 1
42072: NOT
42073: IFFALSE 42077
// exit ;
42075: GO 42164
// result := false ;
42077: LD_ADDR_VAR 0 2
42081: PUSH
42082: LD_INT 0
42084: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42085: LD_ADDR_VAR 0 5
42089: PUSH
42090: LD_VAR 0 1
42094: PPUSH
42095: LD_INT 21
42097: PUSH
42098: LD_INT 3
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PPUSH
42105: CALL_OW 72
42109: ST_TO_ADDR
// if not tmp then
42110: LD_VAR 0 5
42114: NOT
42115: IFFALSE 42119
// exit ;
42117: GO 42164
// for i in tmp do
42119: LD_ADDR_VAR 0 3
42123: PUSH
42124: LD_VAR 0 5
42128: PUSH
42129: FOR_IN
42130: IFFALSE 42162
// begin result := EnemyInRange ( i , 22 ) ;
42132: LD_ADDR_VAR 0 2
42136: PUSH
42137: LD_VAR 0 3
42141: PPUSH
42142: LD_INT 22
42144: PPUSH
42145: CALL 40400 0 2
42149: ST_TO_ADDR
// if result then
42150: LD_VAR 0 2
42154: IFFALSE 42160
// exit ;
42156: POP
42157: POP
42158: GO 42164
// end ;
42160: GO 42129
42162: POP
42163: POP
// end ;
42164: LD_VAR 0 2
42168: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
42169: LD_INT 0
42171: PPUSH
42172: PPUSH
// if not units then
42173: LD_VAR 0 1
42177: NOT
42178: IFFALSE 42182
// exit ;
42180: GO 42252
// result := [ ] ;
42182: LD_ADDR_VAR 0 3
42186: PUSH
42187: EMPTY
42188: ST_TO_ADDR
// for i in units do
42189: LD_ADDR_VAR 0 4
42193: PUSH
42194: LD_VAR 0 1
42198: PUSH
42199: FOR_IN
42200: IFFALSE 42250
// if GetTag ( i ) = tag then
42202: LD_VAR 0 4
42206: PPUSH
42207: CALL_OW 110
42211: PUSH
42212: LD_VAR 0 2
42216: EQUAL
42217: IFFALSE 42248
// result := Replace ( result , result + 1 , i ) ;
42219: LD_ADDR_VAR 0 3
42223: PUSH
42224: LD_VAR 0 3
42228: PPUSH
42229: LD_VAR 0 3
42233: PUSH
42234: LD_INT 1
42236: PLUS
42237: PPUSH
42238: LD_VAR 0 4
42242: PPUSH
42243: CALL_OW 1
42247: ST_TO_ADDR
42248: GO 42199
42250: POP
42251: POP
// end ;
42252: LD_VAR 0 3
42256: RET
// export function IsDriver ( un ) ; begin
42257: LD_INT 0
42259: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42260: LD_ADDR_VAR 0 2
42264: PUSH
42265: LD_VAR 0 1
42269: PUSH
42270: LD_INT 55
42272: PUSH
42273: EMPTY
42274: LIST
42275: PPUSH
42276: CALL_OW 69
42280: IN
42281: ST_TO_ADDR
// end ;
42282: LD_VAR 0 2
42286: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42287: LD_INT 0
42289: PPUSH
42290: PPUSH
// list := [ ] ;
42291: LD_ADDR_VAR 0 5
42295: PUSH
42296: EMPTY
42297: ST_TO_ADDR
// case d of 0 :
42298: LD_VAR 0 3
42302: PUSH
42303: LD_INT 0
42305: DOUBLE
42306: EQUAL
42307: IFTRUE 42311
42309: GO 42444
42311: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42312: LD_ADDR_VAR 0 5
42316: PUSH
42317: LD_VAR 0 1
42321: PUSH
42322: LD_INT 4
42324: MINUS
42325: PUSH
42326: LD_VAR 0 2
42330: PUSH
42331: LD_INT 4
42333: MINUS
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: LIST
42342: PUSH
42343: LD_VAR 0 1
42347: PUSH
42348: LD_INT 3
42350: MINUS
42351: PUSH
42352: LD_VAR 0 2
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: LIST
42364: PUSH
42365: LD_VAR 0 1
42369: PUSH
42370: LD_INT 4
42372: PLUS
42373: PUSH
42374: LD_VAR 0 2
42378: PUSH
42379: LD_INT 4
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: PUSH
42387: LD_VAR 0 1
42391: PUSH
42392: LD_INT 3
42394: PLUS
42395: PUSH
42396: LD_VAR 0 2
42400: PUSH
42401: LD_INT 3
42403: PLUS
42404: PUSH
42405: LD_INT 5
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: LIST
42412: PUSH
42413: LD_VAR 0 1
42417: PUSH
42418: LD_VAR 0 2
42422: PUSH
42423: LD_INT 4
42425: PLUS
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: LIST
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: ST_TO_ADDR
// end ; 1 :
42442: GO 43142
42444: LD_INT 1
42446: DOUBLE
42447: EQUAL
42448: IFTRUE 42452
42450: GO 42585
42452: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42453: LD_ADDR_VAR 0 5
42457: PUSH
42458: LD_VAR 0 1
42462: PUSH
42463: LD_VAR 0 2
42467: PUSH
42468: LD_INT 4
42470: MINUS
42471: PUSH
42472: LD_INT 3
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: PUSH
42480: LD_VAR 0 1
42484: PUSH
42485: LD_INT 3
42487: MINUS
42488: PUSH
42489: LD_VAR 0 2
42493: PUSH
42494: LD_INT 3
42496: MINUS
42497: PUSH
42498: LD_INT 2
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: LIST
42505: PUSH
42506: LD_VAR 0 1
42510: PUSH
42511: LD_INT 4
42513: MINUS
42514: PUSH
42515: LD_VAR 0 2
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: LIST
42527: PUSH
42528: LD_VAR 0 1
42532: PUSH
42533: LD_VAR 0 2
42537: PUSH
42538: LD_INT 3
42540: PLUS
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: LIST
42549: PUSH
42550: LD_VAR 0 1
42554: PUSH
42555: LD_INT 4
42557: PLUS
42558: PUSH
42559: LD_VAR 0 2
42563: PUSH
42564: LD_INT 4
42566: PLUS
42567: PUSH
42568: LD_INT 5
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: ST_TO_ADDR
// end ; 2 :
42583: GO 43142
42585: LD_INT 2
42587: DOUBLE
42588: EQUAL
42589: IFTRUE 42593
42591: GO 42722
42593: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42594: LD_ADDR_VAR 0 5
42598: PUSH
42599: LD_VAR 0 1
42603: PUSH
42604: LD_VAR 0 2
42608: PUSH
42609: LD_INT 3
42611: MINUS
42612: PUSH
42613: LD_INT 3
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: LIST
42620: PUSH
42621: LD_VAR 0 1
42625: PUSH
42626: LD_INT 4
42628: PLUS
42629: PUSH
42630: LD_VAR 0 2
42634: PUSH
42635: LD_INT 4
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: LIST
42642: PUSH
42643: LD_VAR 0 1
42647: PUSH
42648: LD_VAR 0 2
42652: PUSH
42653: LD_INT 4
42655: PLUS
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: LIST
42664: PUSH
42665: LD_VAR 0 1
42669: PUSH
42670: LD_INT 3
42672: MINUS
42673: PUSH
42674: LD_VAR 0 2
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: LIST
42686: PUSH
42687: LD_VAR 0 1
42691: PUSH
42692: LD_INT 4
42694: MINUS
42695: PUSH
42696: LD_VAR 0 2
42700: PUSH
42701: LD_INT 4
42703: MINUS
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: LIST
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: ST_TO_ADDR
// end ; 3 :
42720: GO 43142
42722: LD_INT 3
42724: DOUBLE
42725: EQUAL
42726: IFTRUE 42730
42728: GO 42863
42730: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42731: LD_ADDR_VAR 0 5
42735: PUSH
42736: LD_VAR 0 1
42740: PUSH
42741: LD_INT 3
42743: PLUS
42744: PUSH
42745: LD_VAR 0 2
42749: PUSH
42750: LD_INT 4
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: LIST
42757: PUSH
42758: LD_VAR 0 1
42762: PUSH
42763: LD_INT 4
42765: PLUS
42766: PUSH
42767: LD_VAR 0 2
42771: PUSH
42772: LD_INT 4
42774: PLUS
42775: PUSH
42776: LD_INT 5
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: PUSH
42784: LD_VAR 0 1
42788: PUSH
42789: LD_INT 4
42791: MINUS
42792: PUSH
42793: LD_VAR 0 2
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: LIST
42805: PUSH
42806: LD_VAR 0 1
42810: PUSH
42811: LD_VAR 0 2
42815: PUSH
42816: LD_INT 4
42818: MINUS
42819: PUSH
42820: LD_INT 3
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: PUSH
42828: LD_VAR 0 1
42832: PUSH
42833: LD_INT 3
42835: MINUS
42836: PUSH
42837: LD_VAR 0 2
42841: PUSH
42842: LD_INT 3
42844: MINUS
42845: PUSH
42846: LD_INT 2
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: ST_TO_ADDR
// end ; 4 :
42861: GO 43142
42863: LD_INT 4
42865: DOUBLE
42866: EQUAL
42867: IFTRUE 42871
42869: GO 43004
42871: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42872: LD_ADDR_VAR 0 5
42876: PUSH
42877: LD_VAR 0 1
42881: PUSH
42882: LD_VAR 0 2
42886: PUSH
42887: LD_INT 4
42889: PLUS
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: LIST
42898: PUSH
42899: LD_VAR 0 1
42903: PUSH
42904: LD_INT 3
42906: PLUS
42907: PUSH
42908: LD_VAR 0 2
42912: PUSH
42913: LD_INT 3
42915: PLUS
42916: PUSH
42917: LD_INT 5
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: PUSH
42925: LD_VAR 0 1
42929: PUSH
42930: LD_INT 4
42932: PLUS
42933: PUSH
42934: LD_VAR 0 2
42938: PUSH
42939: LD_INT 4
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: PUSH
42947: LD_VAR 0 1
42951: PUSH
42952: LD_VAR 0 2
42956: PUSH
42957: LD_INT 3
42959: MINUS
42960: PUSH
42961: LD_INT 3
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: PUSH
42969: LD_VAR 0 1
42973: PUSH
42974: LD_INT 4
42976: MINUS
42977: PUSH
42978: LD_VAR 0 2
42982: PUSH
42983: LD_INT 4
42985: MINUS
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: LIST
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: ST_TO_ADDR
// end ; 5 :
43002: GO 43142
43004: LD_INT 5
43006: DOUBLE
43007: EQUAL
43008: IFTRUE 43012
43010: GO 43141
43012: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43013: LD_ADDR_VAR 0 5
43017: PUSH
43018: LD_VAR 0 1
43022: PUSH
43023: LD_INT 4
43025: MINUS
43026: PUSH
43027: LD_VAR 0 2
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: PUSH
43040: LD_VAR 0 1
43044: PUSH
43045: LD_VAR 0 2
43049: PUSH
43050: LD_INT 4
43052: MINUS
43053: PUSH
43054: LD_INT 3
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: LIST
43061: PUSH
43062: LD_VAR 0 1
43066: PUSH
43067: LD_INT 4
43069: PLUS
43070: PUSH
43071: LD_VAR 0 2
43075: PUSH
43076: LD_INT 4
43078: PLUS
43079: PUSH
43080: LD_INT 5
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: PUSH
43088: LD_VAR 0 1
43092: PUSH
43093: LD_INT 3
43095: PLUS
43096: PUSH
43097: LD_VAR 0 2
43101: PUSH
43102: LD_INT 4
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: PUSH
43110: LD_VAR 0 1
43114: PUSH
43115: LD_VAR 0 2
43119: PUSH
43120: LD_INT 3
43122: PLUS
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: ST_TO_ADDR
// end ; end ;
43139: GO 43142
43141: POP
// result := list ;
43142: LD_ADDR_VAR 0 4
43146: PUSH
43147: LD_VAR 0 5
43151: ST_TO_ADDR
// end ;
43152: LD_VAR 0 4
43156: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43157: LD_INT 0
43159: PPUSH
43160: PPUSH
43161: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43162: LD_VAR 0 1
43166: NOT
43167: PUSH
43168: LD_VAR 0 2
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: LD_INT 3
43181: PUSH
43182: LD_INT 4
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: IN
43191: NOT
43192: OR
43193: IFFALSE 43197
// exit ;
43195: GO 43289
// tmp := [ ] ;
43197: LD_ADDR_VAR 0 5
43201: PUSH
43202: EMPTY
43203: ST_TO_ADDR
// for i in units do
43204: LD_ADDR_VAR 0 4
43208: PUSH
43209: LD_VAR 0 1
43213: PUSH
43214: FOR_IN
43215: IFFALSE 43258
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
43217: LD_ADDR_VAR 0 5
43221: PUSH
43222: LD_VAR 0 5
43226: PPUSH
43227: LD_VAR 0 5
43231: PUSH
43232: LD_INT 1
43234: PLUS
43235: PPUSH
43236: LD_VAR 0 4
43240: PPUSH
43241: LD_VAR 0 2
43245: PPUSH
43246: CALL_OW 259
43250: PPUSH
43251: CALL_OW 2
43255: ST_TO_ADDR
43256: GO 43214
43258: POP
43259: POP
// if not tmp then
43260: LD_VAR 0 5
43264: NOT
43265: IFFALSE 43269
// exit ;
43267: GO 43289
// result := SortListByListDesc ( units , tmp ) ;
43269: LD_ADDR_VAR 0 3
43273: PUSH
43274: LD_VAR 0 1
43278: PPUSH
43279: LD_VAR 0 5
43283: PPUSH
43284: CALL_OW 77
43288: ST_TO_ADDR
// end ;
43289: LD_VAR 0 3
43293: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43294: LD_INT 0
43296: PPUSH
43297: PPUSH
43298: PPUSH
// result := false ;
43299: LD_ADDR_VAR 0 3
43303: PUSH
43304: LD_INT 0
43306: ST_TO_ADDR
// x := GetX ( building ) ;
43307: LD_ADDR_VAR 0 4
43311: PUSH
43312: LD_VAR 0 2
43316: PPUSH
43317: CALL_OW 250
43321: ST_TO_ADDR
// y := GetY ( building ) ;
43322: LD_ADDR_VAR 0 5
43326: PUSH
43327: LD_VAR 0 2
43331: PPUSH
43332: CALL_OW 251
43336: ST_TO_ADDR
// if not building or not x or not y then
43337: LD_VAR 0 2
43341: NOT
43342: PUSH
43343: LD_VAR 0 4
43347: NOT
43348: OR
43349: PUSH
43350: LD_VAR 0 5
43354: NOT
43355: OR
43356: IFFALSE 43360
// exit ;
43358: GO 43452
// if GetTaskList ( unit ) then
43360: LD_VAR 0 1
43364: PPUSH
43365: CALL_OW 437
43369: IFFALSE 43452
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43371: LD_STRING e
43373: PUSH
43374: LD_VAR 0 1
43378: PPUSH
43379: CALL_OW 437
43383: PUSH
43384: LD_INT 1
43386: ARRAY
43387: PUSH
43388: LD_INT 1
43390: ARRAY
43391: EQUAL
43392: PUSH
43393: LD_VAR 0 4
43397: PUSH
43398: LD_VAR 0 1
43402: PPUSH
43403: CALL_OW 437
43407: PUSH
43408: LD_INT 1
43410: ARRAY
43411: PUSH
43412: LD_INT 2
43414: ARRAY
43415: EQUAL
43416: AND
43417: PUSH
43418: LD_VAR 0 5
43422: PUSH
43423: LD_VAR 0 1
43427: PPUSH
43428: CALL_OW 437
43432: PUSH
43433: LD_INT 1
43435: ARRAY
43436: PUSH
43437: LD_INT 3
43439: ARRAY
43440: EQUAL
43441: AND
43442: IFFALSE 43452
// result := true end ;
43444: LD_ADDR_VAR 0 3
43448: PUSH
43449: LD_INT 1
43451: ST_TO_ADDR
// end ;
43452: LD_VAR 0 3
43456: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43457: LD_INT 0
43459: PPUSH
// result := false ;
43460: LD_ADDR_VAR 0 4
43464: PUSH
43465: LD_INT 0
43467: ST_TO_ADDR
// if GetTaskList ( unit ) then
43468: LD_VAR 0 1
43472: PPUSH
43473: CALL_OW 437
43477: IFFALSE 43560
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43479: LD_STRING M
43481: PUSH
43482: LD_VAR 0 1
43486: PPUSH
43487: CALL_OW 437
43491: PUSH
43492: LD_INT 1
43494: ARRAY
43495: PUSH
43496: LD_INT 1
43498: ARRAY
43499: EQUAL
43500: PUSH
43501: LD_VAR 0 2
43505: PUSH
43506: LD_VAR 0 1
43510: PPUSH
43511: CALL_OW 437
43515: PUSH
43516: LD_INT 1
43518: ARRAY
43519: PUSH
43520: LD_INT 2
43522: ARRAY
43523: EQUAL
43524: AND
43525: PUSH
43526: LD_VAR 0 3
43530: PUSH
43531: LD_VAR 0 1
43535: PPUSH
43536: CALL_OW 437
43540: PUSH
43541: LD_INT 1
43543: ARRAY
43544: PUSH
43545: LD_INT 3
43547: ARRAY
43548: EQUAL
43549: AND
43550: IFFALSE 43560
// result := true ;
43552: LD_ADDR_VAR 0 4
43556: PUSH
43557: LD_INT 1
43559: ST_TO_ADDR
// end ; end ;
43560: LD_VAR 0 4
43564: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43565: LD_INT 0
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
// if not unit or not area then
43571: LD_VAR 0 1
43575: NOT
43576: PUSH
43577: LD_VAR 0 2
43581: NOT
43582: OR
43583: IFFALSE 43587
// exit ;
43585: GO 43751
// tmp := AreaToList ( area , i ) ;
43587: LD_ADDR_VAR 0 6
43591: PUSH
43592: LD_VAR 0 2
43596: PPUSH
43597: LD_VAR 0 5
43601: PPUSH
43602: CALL_OW 517
43606: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43607: LD_ADDR_VAR 0 5
43611: PUSH
43612: DOUBLE
43613: LD_INT 1
43615: DEC
43616: ST_TO_ADDR
43617: LD_VAR 0 6
43621: PUSH
43622: LD_INT 1
43624: ARRAY
43625: PUSH
43626: FOR_TO
43627: IFFALSE 43749
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43629: LD_ADDR_VAR 0 7
43633: PUSH
43634: LD_VAR 0 6
43638: PUSH
43639: LD_INT 1
43641: ARRAY
43642: PUSH
43643: LD_VAR 0 5
43647: ARRAY
43648: PUSH
43649: LD_VAR 0 6
43653: PUSH
43654: LD_INT 2
43656: ARRAY
43657: PUSH
43658: LD_VAR 0 5
43662: ARRAY
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
43668: LD_VAR 0 7
43672: PUSH
43673: LD_INT 1
43675: ARRAY
43676: PPUSH
43677: LD_VAR 0 7
43681: PUSH
43682: LD_INT 2
43684: ARRAY
43685: PPUSH
43686: CALL_OW 428
43690: PUSH
43691: LD_INT 0
43693: EQUAL
43694: IFFALSE 43747
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43696: LD_VAR 0 1
43700: PPUSH
43701: LD_VAR 0 7
43705: PUSH
43706: LD_INT 1
43708: ARRAY
43709: PPUSH
43710: LD_VAR 0 7
43714: PUSH
43715: LD_INT 2
43717: ARRAY
43718: PPUSH
43719: LD_VAR 0 3
43723: PPUSH
43724: CALL_OW 48
// result := IsPlaced ( unit ) ;
43728: LD_ADDR_VAR 0 4
43732: PUSH
43733: LD_VAR 0 1
43737: PPUSH
43738: CALL_OW 305
43742: ST_TO_ADDR
// exit ;
43743: POP
43744: POP
43745: GO 43751
// end ; end ;
43747: GO 43626
43749: POP
43750: POP
// end ;
43751: LD_VAR 0 4
43755: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43756: LD_INT 0
43758: PPUSH
43759: PPUSH
43760: PPUSH
// if not side or side > 8 then
43761: LD_VAR 0 1
43765: NOT
43766: PUSH
43767: LD_VAR 0 1
43771: PUSH
43772: LD_INT 8
43774: GREATER
43775: OR
43776: IFFALSE 43780
// exit ;
43778: GO 43967
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43780: LD_ADDR_VAR 0 4
43784: PUSH
43785: LD_INT 22
43787: PUSH
43788: LD_VAR 0 1
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 21
43799: PUSH
43800: LD_INT 3
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PPUSH
43811: CALL_OW 69
43815: ST_TO_ADDR
// if not tmp then
43816: LD_VAR 0 4
43820: NOT
43821: IFFALSE 43825
// exit ;
43823: GO 43967
// enable_addtolog := true ;
43825: LD_ADDR_OWVAR 81
43829: PUSH
43830: LD_INT 1
43832: ST_TO_ADDR
// AddToLog ( [ ) ;
43833: LD_STRING [
43835: PPUSH
43836: CALL_OW 561
// for i in tmp do
43840: LD_ADDR_VAR 0 3
43844: PUSH
43845: LD_VAR 0 4
43849: PUSH
43850: FOR_IN
43851: IFFALSE 43958
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43853: LD_STRING [
43855: PUSH
43856: LD_VAR 0 3
43860: PPUSH
43861: CALL_OW 266
43865: STR
43866: PUSH
43867: LD_STRING , 
43869: STR
43870: PUSH
43871: LD_VAR 0 3
43875: PPUSH
43876: CALL_OW 250
43880: STR
43881: PUSH
43882: LD_STRING , 
43884: STR
43885: PUSH
43886: LD_VAR 0 3
43890: PPUSH
43891: CALL_OW 251
43895: STR
43896: PUSH
43897: LD_STRING , 
43899: STR
43900: PUSH
43901: LD_VAR 0 3
43905: PPUSH
43906: CALL_OW 254
43910: STR
43911: PUSH
43912: LD_STRING , 
43914: STR
43915: PUSH
43916: LD_VAR 0 3
43920: PPUSH
43921: LD_INT 1
43923: PPUSH
43924: CALL_OW 268
43928: STR
43929: PUSH
43930: LD_STRING , 
43932: STR
43933: PUSH
43934: LD_VAR 0 3
43938: PPUSH
43939: LD_INT 2
43941: PPUSH
43942: CALL_OW 268
43946: STR
43947: PUSH
43948: LD_STRING ],
43950: STR
43951: PPUSH
43952: CALL_OW 561
// end ;
43956: GO 43850
43958: POP
43959: POP
// AddToLog ( ]; ) ;
43960: LD_STRING ];
43962: PPUSH
43963: CALL_OW 561
// end ;
43967: LD_VAR 0 2
43971: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43972: LD_INT 0
43974: PPUSH
43975: PPUSH
43976: PPUSH
43977: PPUSH
43978: PPUSH
// if not area or not rate or not max then
43979: LD_VAR 0 1
43983: NOT
43984: PUSH
43985: LD_VAR 0 2
43989: NOT
43990: OR
43991: PUSH
43992: LD_VAR 0 4
43996: NOT
43997: OR
43998: IFFALSE 44002
// exit ;
44000: GO 44194
// while 1 do
44002: LD_INT 1
44004: IFFALSE 44194
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44006: LD_ADDR_VAR 0 9
44010: PUSH
44011: LD_VAR 0 1
44015: PPUSH
44016: LD_INT 1
44018: PPUSH
44019: CALL_OW 287
44023: PUSH
44024: LD_INT 10
44026: MUL
44027: ST_TO_ADDR
// r := rate / 10 ;
44028: LD_ADDR_VAR 0 7
44032: PUSH
44033: LD_VAR 0 2
44037: PUSH
44038: LD_INT 10
44040: DIVREAL
44041: ST_TO_ADDR
// time := 1 1$00 ;
44042: LD_ADDR_VAR 0 8
44046: PUSH
44047: LD_INT 2100
44049: ST_TO_ADDR
// if amount < min then
44050: LD_VAR 0 9
44054: PUSH
44055: LD_VAR 0 3
44059: LESS
44060: IFFALSE 44078
// r := r * 2 else
44062: LD_ADDR_VAR 0 7
44066: PUSH
44067: LD_VAR 0 7
44071: PUSH
44072: LD_INT 2
44074: MUL
44075: ST_TO_ADDR
44076: GO 44104
// if amount > max then
44078: LD_VAR 0 9
44082: PUSH
44083: LD_VAR 0 4
44087: GREATER
44088: IFFALSE 44104
// r := r / 2 ;
44090: LD_ADDR_VAR 0 7
44094: PUSH
44095: LD_VAR 0 7
44099: PUSH
44100: LD_INT 2
44102: DIVREAL
44103: ST_TO_ADDR
// time := time / r ;
44104: LD_ADDR_VAR 0 8
44108: PUSH
44109: LD_VAR 0 8
44113: PUSH
44114: LD_VAR 0 7
44118: DIVREAL
44119: ST_TO_ADDR
// if time < 0 then
44120: LD_VAR 0 8
44124: PUSH
44125: LD_INT 0
44127: LESS
44128: IFFALSE 44145
// time := time * - 1 ;
44130: LD_ADDR_VAR 0 8
44134: PUSH
44135: LD_VAR 0 8
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: MUL
44144: ST_TO_ADDR
// wait ( time ) ;
44145: LD_VAR 0 8
44149: PPUSH
44150: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
44154: LD_INT 35
44156: PPUSH
44157: LD_INT 875
44159: PPUSH
44160: CALL_OW 12
44164: PPUSH
44165: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44169: LD_INT 1
44171: PPUSH
44172: LD_INT 5
44174: PPUSH
44175: CALL_OW 12
44179: PPUSH
44180: LD_VAR 0 1
44184: PPUSH
44185: LD_INT 1
44187: PPUSH
44188: CALL_OW 55
// end ;
44192: GO 44002
// end ;
44194: LD_VAR 0 5
44198: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44199: LD_INT 0
44201: PPUSH
44202: PPUSH
44203: PPUSH
44204: PPUSH
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
// if not turrets or not factories then
44209: LD_VAR 0 1
44213: NOT
44214: PUSH
44215: LD_VAR 0 2
44219: NOT
44220: OR
44221: IFFALSE 44225
// exit ;
44223: GO 44532
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44225: LD_ADDR_VAR 0 10
44229: PUSH
44230: LD_INT 5
44232: PUSH
44233: LD_INT 6
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: LD_INT 4
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 3
44252: PUSH
44253: LD_INT 5
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 24
44267: PUSH
44268: LD_INT 25
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 23
44277: PUSH
44278: LD_INT 27
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 42
44291: PUSH
44292: LD_INT 43
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 44
44301: PUSH
44302: LD_INT 46
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 45
44311: PUSH
44312: LD_INT 47
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: LIST
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// result := [ ] ;
44329: LD_ADDR_VAR 0 3
44333: PUSH
44334: EMPTY
44335: ST_TO_ADDR
// for i in turrets do
44336: LD_ADDR_VAR 0 4
44340: PUSH
44341: LD_VAR 0 1
44345: PUSH
44346: FOR_IN
44347: IFFALSE 44530
// begin nat := GetNation ( i ) ;
44349: LD_ADDR_VAR 0 7
44353: PUSH
44354: LD_VAR 0 4
44358: PPUSH
44359: CALL_OW 248
44363: ST_TO_ADDR
// weapon := 0 ;
44364: LD_ADDR_VAR 0 8
44368: PUSH
44369: LD_INT 0
44371: ST_TO_ADDR
// if not nat then
44372: LD_VAR 0 7
44376: NOT
44377: IFFALSE 44381
// continue ;
44379: GO 44346
// for j in list [ nat ] do
44381: LD_ADDR_VAR 0 5
44385: PUSH
44386: LD_VAR 0 10
44390: PUSH
44391: LD_VAR 0 7
44395: ARRAY
44396: PUSH
44397: FOR_IN
44398: IFFALSE 44439
// if GetBWeapon ( i ) = j [ 1 ] then
44400: LD_VAR 0 4
44404: PPUSH
44405: CALL_OW 269
44409: PUSH
44410: LD_VAR 0 5
44414: PUSH
44415: LD_INT 1
44417: ARRAY
44418: EQUAL
44419: IFFALSE 44437
// begin weapon := j [ 2 ] ;
44421: LD_ADDR_VAR 0 8
44425: PUSH
44426: LD_VAR 0 5
44430: PUSH
44431: LD_INT 2
44433: ARRAY
44434: ST_TO_ADDR
// break ;
44435: GO 44439
// end ;
44437: GO 44397
44439: POP
44440: POP
// if not weapon then
44441: LD_VAR 0 8
44445: NOT
44446: IFFALSE 44450
// continue ;
44448: GO 44346
// for k in factories do
44450: LD_ADDR_VAR 0 6
44454: PUSH
44455: LD_VAR 0 2
44459: PUSH
44460: FOR_IN
44461: IFFALSE 44526
// begin weapons := AvailableWeaponList ( k ) ;
44463: LD_ADDR_VAR 0 9
44467: PUSH
44468: LD_VAR 0 6
44472: PPUSH
44473: CALL_OW 478
44477: ST_TO_ADDR
// if not weapons then
44478: LD_VAR 0 9
44482: NOT
44483: IFFALSE 44487
// continue ;
44485: GO 44460
// if weapon in weapons then
44487: LD_VAR 0 8
44491: PUSH
44492: LD_VAR 0 9
44496: IN
44497: IFFALSE 44524
// begin result := [ i , weapon ] ;
44499: LD_ADDR_VAR 0 3
44503: PUSH
44504: LD_VAR 0 4
44508: PUSH
44509: LD_VAR 0 8
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: ST_TO_ADDR
// exit ;
44518: POP
44519: POP
44520: POP
44521: POP
44522: GO 44532
// end ; end ;
44524: GO 44460
44526: POP
44527: POP
// end ;
44528: GO 44346
44530: POP
44531: POP
// end ;
44532: LD_VAR 0 3
44536: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44537: LD_INT 0
44539: PPUSH
// if not side or side > 8 then
44540: LD_VAR 0 3
44544: NOT
44545: PUSH
44546: LD_VAR 0 3
44550: PUSH
44551: LD_INT 8
44553: GREATER
44554: OR
44555: IFFALSE 44559
// exit ;
44557: GO 44618
// if not range then
44559: LD_VAR 0 4
44563: NOT
44564: IFFALSE 44575
// range := - 12 ;
44566: LD_ADDR_VAR 0 4
44570: PUSH
44571: LD_INT 12
44573: NEG
44574: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44575: LD_VAR 0 1
44579: PPUSH
44580: LD_VAR 0 2
44584: PPUSH
44585: LD_VAR 0 3
44589: PPUSH
44590: LD_VAR 0 4
44594: PPUSH
44595: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44599: LD_VAR 0 1
44603: PPUSH
44604: LD_VAR 0 2
44608: PPUSH
44609: LD_VAR 0 3
44613: PPUSH
44614: CALL_OW 331
// end ;
44618: LD_VAR 0 5
44622: RET
// export function Video ( mode ) ; begin
44623: LD_INT 0
44625: PPUSH
// ingame_video = mode ;
44626: LD_ADDR_OWVAR 52
44630: PUSH
44631: LD_VAR 0 1
44635: ST_TO_ADDR
// interface_hidden = mode ;
44636: LD_ADDR_OWVAR 54
44640: PUSH
44641: LD_VAR 0 1
44645: ST_TO_ADDR
// end ;
44646: LD_VAR 0 2
44650: RET
// export function Join ( array , element ) ; begin
44651: LD_INT 0
44653: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44654: LD_ADDR_VAR 0 3
44658: PUSH
44659: LD_VAR 0 1
44663: PPUSH
44664: LD_VAR 0 1
44668: PUSH
44669: LD_INT 1
44671: PLUS
44672: PPUSH
44673: LD_VAR 0 2
44677: PPUSH
44678: CALL_OW 1
44682: ST_TO_ADDR
// end ;
44683: LD_VAR 0 3
44687: RET
// export function JoinUnion ( array , element ) ; begin
44688: LD_INT 0
44690: PPUSH
// result := array union element ;
44691: LD_ADDR_VAR 0 3
44695: PUSH
44696: LD_VAR 0 1
44700: PUSH
44701: LD_VAR 0 2
44705: UNION
44706: ST_TO_ADDR
// end ;
44707: LD_VAR 0 3
44711: RET
// export function GetBehemoths ( side ) ; begin
44712: LD_INT 0
44714: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
44715: LD_ADDR_VAR 0 2
44719: PUSH
44720: LD_INT 22
44722: PUSH
44723: LD_VAR 0 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 31
44734: PUSH
44735: LD_INT 25
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PPUSH
44746: CALL_OW 69
44750: ST_TO_ADDR
// end ;
44751: LD_VAR 0 2
44755: RET
// export function Shuffle ( array ) ; var i , index ; begin
44756: LD_INT 0
44758: PPUSH
44759: PPUSH
44760: PPUSH
// result := [ ] ;
44761: LD_ADDR_VAR 0 2
44765: PUSH
44766: EMPTY
44767: ST_TO_ADDR
// if not array then
44768: LD_VAR 0 1
44772: NOT
44773: IFFALSE 44777
// exit ;
44775: GO 44876
// Randomize ;
44777: CALL_OW 10
// for i = array downto 1 do
44781: LD_ADDR_VAR 0 3
44785: PUSH
44786: DOUBLE
44787: LD_VAR 0 1
44791: INC
44792: ST_TO_ADDR
44793: LD_INT 1
44795: PUSH
44796: FOR_DOWNTO
44797: IFFALSE 44874
// begin index := rand ( 1 , array ) ;
44799: LD_ADDR_VAR 0 4
44803: PUSH
44804: LD_INT 1
44806: PPUSH
44807: LD_VAR 0 1
44811: PPUSH
44812: CALL_OW 12
44816: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44817: LD_ADDR_VAR 0 2
44821: PUSH
44822: LD_VAR 0 2
44826: PPUSH
44827: LD_VAR 0 2
44831: PUSH
44832: LD_INT 1
44834: PLUS
44835: PPUSH
44836: LD_VAR 0 1
44840: PUSH
44841: LD_VAR 0 4
44845: ARRAY
44846: PPUSH
44847: CALL_OW 2
44851: ST_TO_ADDR
// array := Delete ( array , index ) ;
44852: LD_ADDR_VAR 0 1
44856: PUSH
44857: LD_VAR 0 1
44861: PPUSH
44862: LD_VAR 0 4
44866: PPUSH
44867: CALL_OW 3
44871: ST_TO_ADDR
// end ;
44872: GO 44796
44874: POP
44875: POP
// end ;
44876: LD_VAR 0 2
44880: RET
// export function GetBaseMaterials ( base ) ; begin
44881: LD_INT 0
44883: PPUSH
// result := [ 0 , 0 , 0 ] ;
44884: LD_ADDR_VAR 0 2
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// if not base then
44903: LD_VAR 0 1
44907: NOT
44908: IFFALSE 44912
// exit ;
44910: GO 44961
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44912: LD_ADDR_VAR 0 2
44916: PUSH
44917: LD_VAR 0 1
44921: PPUSH
44922: LD_INT 1
44924: PPUSH
44925: CALL_OW 275
44929: PUSH
44930: LD_VAR 0 1
44934: PPUSH
44935: LD_INT 2
44937: PPUSH
44938: CALL_OW 275
44942: PUSH
44943: LD_VAR 0 1
44947: PPUSH
44948: LD_INT 3
44950: PPUSH
44951: CALL_OW 275
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: ST_TO_ADDR
// end ;
44961: LD_VAR 0 2
44965: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44966: LD_INT 0
44968: PPUSH
44969: PPUSH
// result := array ;
44970: LD_ADDR_VAR 0 3
44974: PUSH
44975: LD_VAR 0 1
44979: ST_TO_ADDR
// if size > 0 then
44980: LD_VAR 0 2
44984: PUSH
44985: LD_INT 0
44987: GREATER
44988: IFFALSE 45034
// for i := array downto size do
44990: LD_ADDR_VAR 0 4
44994: PUSH
44995: DOUBLE
44996: LD_VAR 0 1
45000: INC
45001: ST_TO_ADDR
45002: LD_VAR 0 2
45006: PUSH
45007: FOR_DOWNTO
45008: IFFALSE 45032
// result := Delete ( result , result ) ;
45010: LD_ADDR_VAR 0 3
45014: PUSH
45015: LD_VAR 0 3
45019: PPUSH
45020: LD_VAR 0 3
45024: PPUSH
45025: CALL_OW 3
45029: ST_TO_ADDR
45030: GO 45007
45032: POP
45033: POP
// end ;
45034: LD_VAR 0 3
45038: RET
// export function ComExit ( unit ) ; var tmp ; begin
45039: LD_INT 0
45041: PPUSH
45042: PPUSH
// if not IsInUnit ( unit ) then
45043: LD_VAR 0 1
45047: PPUSH
45048: CALL_OW 310
45052: NOT
45053: IFFALSE 45057
// exit ;
45055: GO 45117
// tmp := IsInUnit ( unit ) ;
45057: LD_ADDR_VAR 0 3
45061: PUSH
45062: LD_VAR 0 1
45066: PPUSH
45067: CALL_OW 310
45071: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45072: LD_VAR 0 3
45076: PPUSH
45077: CALL_OW 247
45081: PUSH
45082: LD_INT 2
45084: EQUAL
45085: IFFALSE 45098
// ComExitVehicle ( unit ) else
45087: LD_VAR 0 1
45091: PPUSH
45092: CALL_OW 121
45096: GO 45107
// ComExitBuilding ( unit ) ;
45098: LD_VAR 0 1
45102: PPUSH
45103: CALL_OW 122
// result := tmp ;
45107: LD_ADDR_VAR 0 2
45111: PUSH
45112: LD_VAR 0 3
45116: ST_TO_ADDR
// end ;
45117: LD_VAR 0 2
45121: RET
// export function ComExitAll ( units ) ; var i ; begin
45122: LD_INT 0
45124: PPUSH
45125: PPUSH
// if not units then
45126: LD_VAR 0 1
45130: NOT
45131: IFFALSE 45135
// exit ;
45133: GO 45161
// for i in units do
45135: LD_ADDR_VAR 0 3
45139: PUSH
45140: LD_VAR 0 1
45144: PUSH
45145: FOR_IN
45146: IFFALSE 45159
// ComExit ( i ) ;
45148: LD_VAR 0 3
45152: PPUSH
45153: CALL 45039 0 1
45157: GO 45145
45159: POP
45160: POP
// end ;
45161: LD_VAR 0 2
45165: RET
// export function ResetHc ; begin
45166: LD_INT 0
45168: PPUSH
// InitHc ;
45169: CALL_OW 19
// hc_importance := 0 ;
45173: LD_ADDR_OWVAR 32
45177: PUSH
45178: LD_INT 0
45180: ST_TO_ADDR
// end ;
45181: LD_VAR 0 1
45185: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45186: LD_INT 0
45188: PPUSH
45189: PPUSH
45190: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45191: LD_ADDR_VAR 0 6
45195: PUSH
45196: LD_VAR 0 1
45200: PUSH
45201: LD_VAR 0 3
45205: PLUS
45206: PUSH
45207: LD_INT 2
45209: DIV
45210: ST_TO_ADDR
// if _x < 0 then
45211: LD_VAR 0 6
45215: PUSH
45216: LD_INT 0
45218: LESS
45219: IFFALSE 45236
// _x := _x * - 1 ;
45221: LD_ADDR_VAR 0 6
45225: PUSH
45226: LD_VAR 0 6
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: MUL
45235: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45236: LD_ADDR_VAR 0 7
45240: PUSH
45241: LD_VAR 0 2
45245: PUSH
45246: LD_VAR 0 4
45250: PLUS
45251: PUSH
45252: LD_INT 2
45254: DIV
45255: ST_TO_ADDR
// if _y < 0 then
45256: LD_VAR 0 7
45260: PUSH
45261: LD_INT 0
45263: LESS
45264: IFFALSE 45281
// _y := _y * - 1 ;
45266: LD_ADDR_VAR 0 7
45270: PUSH
45271: LD_VAR 0 7
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: MUL
45280: ST_TO_ADDR
// result := [ _x , _y ] ;
45281: LD_ADDR_VAR 0 5
45285: PUSH
45286: LD_VAR 0 6
45290: PUSH
45291: LD_VAR 0 7
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: ST_TO_ADDR
// end ;
45300: LD_VAR 0 5
45304: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45305: LD_INT 0
45307: PPUSH
45308: PPUSH
45309: PPUSH
45310: PPUSH
// task := GetTaskList ( unit ) ;
45311: LD_ADDR_VAR 0 7
45315: PUSH
45316: LD_VAR 0 1
45320: PPUSH
45321: CALL_OW 437
45325: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45326: LD_VAR 0 7
45330: NOT
45331: PUSH
45332: LD_VAR 0 1
45336: PPUSH
45337: LD_VAR 0 2
45341: PPUSH
45342: CALL_OW 308
45346: NOT
45347: AND
45348: IFFALSE 45352
// exit ;
45350: GO 45470
// if IsInArea ( unit , area ) then
45352: LD_VAR 0 1
45356: PPUSH
45357: LD_VAR 0 2
45361: PPUSH
45362: CALL_OW 308
45366: IFFALSE 45384
// begin ComMoveToArea ( unit , goAway ) ;
45368: LD_VAR 0 1
45372: PPUSH
45373: LD_VAR 0 3
45377: PPUSH
45378: CALL_OW 113
// exit ;
45382: GO 45470
// end ; if task [ 1 ] [ 1 ] <> M then
45384: LD_VAR 0 7
45388: PUSH
45389: LD_INT 1
45391: ARRAY
45392: PUSH
45393: LD_INT 1
45395: ARRAY
45396: PUSH
45397: LD_STRING M
45399: NONEQUAL
45400: IFFALSE 45404
// exit ;
45402: GO 45470
// x := task [ 1 ] [ 2 ] ;
45404: LD_ADDR_VAR 0 5
45408: PUSH
45409: LD_VAR 0 7
45413: PUSH
45414: LD_INT 1
45416: ARRAY
45417: PUSH
45418: LD_INT 2
45420: ARRAY
45421: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45422: LD_ADDR_VAR 0 6
45426: PUSH
45427: LD_VAR 0 7
45431: PUSH
45432: LD_INT 1
45434: ARRAY
45435: PUSH
45436: LD_INT 3
45438: ARRAY
45439: ST_TO_ADDR
// if InArea ( x , y , area ) then
45440: LD_VAR 0 5
45444: PPUSH
45445: LD_VAR 0 6
45449: PPUSH
45450: LD_VAR 0 2
45454: PPUSH
45455: CALL_OW 309
45459: IFFALSE 45470
// ComStop ( unit ) ;
45461: LD_VAR 0 1
45465: PPUSH
45466: CALL_OW 141
// end ;
45470: LD_VAR 0 4
45474: RET
// export function Abs ( value ) ; begin
45475: LD_INT 0
45477: PPUSH
// result := value ;
45478: LD_ADDR_VAR 0 2
45482: PUSH
45483: LD_VAR 0 1
45487: ST_TO_ADDR
// if value < 0 then
45488: LD_VAR 0 1
45492: PUSH
45493: LD_INT 0
45495: LESS
45496: IFFALSE 45513
// result := value * - 1 ;
45498: LD_ADDR_VAR 0 2
45502: PUSH
45503: LD_VAR 0 1
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: MUL
45512: ST_TO_ADDR
// end ;
45513: LD_VAR 0 2
45517: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45518: LD_INT 0
45520: PPUSH
45521: PPUSH
45522: PPUSH
45523: PPUSH
45524: PPUSH
45525: PPUSH
45526: PPUSH
45527: PPUSH
// if not unit or not building then
45528: LD_VAR 0 1
45532: NOT
45533: PUSH
45534: LD_VAR 0 2
45538: NOT
45539: OR
45540: IFFALSE 45544
// exit ;
45542: GO 45770
// x := GetX ( building ) ;
45544: LD_ADDR_VAR 0 4
45548: PUSH
45549: LD_VAR 0 2
45553: PPUSH
45554: CALL_OW 250
45558: ST_TO_ADDR
// y := GetY ( building ) ;
45559: LD_ADDR_VAR 0 6
45563: PUSH
45564: LD_VAR 0 2
45568: PPUSH
45569: CALL_OW 251
45573: ST_TO_ADDR
// d := GetDir ( building ) ;
45574: LD_ADDR_VAR 0 8
45578: PUSH
45579: LD_VAR 0 2
45583: PPUSH
45584: CALL_OW 254
45588: ST_TO_ADDR
// r := 4 ;
45589: LD_ADDR_VAR 0 9
45593: PUSH
45594: LD_INT 4
45596: ST_TO_ADDR
// for i := 1 to 5 do
45597: LD_ADDR_VAR 0 10
45601: PUSH
45602: DOUBLE
45603: LD_INT 1
45605: DEC
45606: ST_TO_ADDR
45607: LD_INT 5
45609: PUSH
45610: FOR_TO
45611: IFFALSE 45768
// begin _x := ShiftX ( x , d , r + i ) ;
45613: LD_ADDR_VAR 0 5
45617: PUSH
45618: LD_VAR 0 4
45622: PPUSH
45623: LD_VAR 0 8
45627: PPUSH
45628: LD_VAR 0 9
45632: PUSH
45633: LD_VAR 0 10
45637: PLUS
45638: PPUSH
45639: CALL_OW 272
45643: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45644: LD_ADDR_VAR 0 7
45648: PUSH
45649: LD_VAR 0 6
45653: PPUSH
45654: LD_VAR 0 8
45658: PPUSH
45659: LD_VAR 0 9
45663: PUSH
45664: LD_VAR 0 10
45668: PLUS
45669: PPUSH
45670: CALL_OW 273
45674: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45675: LD_VAR 0 5
45679: PPUSH
45680: LD_VAR 0 7
45684: PPUSH
45685: CALL_OW 488
45689: PUSH
45690: LD_VAR 0 5
45694: PPUSH
45695: LD_VAR 0 7
45699: PPUSH
45700: CALL_OW 428
45704: PPUSH
45705: CALL_OW 247
45709: PUSH
45710: LD_INT 3
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: IN
45720: NOT
45721: AND
45722: IFFALSE 45766
// begin ComMoveXY ( unit , _x , _y ) ;
45724: LD_VAR 0 1
45728: PPUSH
45729: LD_VAR 0 5
45733: PPUSH
45734: LD_VAR 0 7
45738: PPUSH
45739: CALL_OW 111
// result := [ _x , _y ] ;
45743: LD_ADDR_VAR 0 3
45747: PUSH
45748: LD_VAR 0 5
45752: PUSH
45753: LD_VAR 0 7
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: ST_TO_ADDR
// exit ;
45762: POP
45763: POP
45764: GO 45770
// end ; end ;
45766: GO 45610
45768: POP
45769: POP
// end ;
45770: LD_VAR 0 3
45774: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45775: LD_INT 0
45777: PPUSH
45778: PPUSH
45779: PPUSH
// result := 0 ;
45780: LD_ADDR_VAR 0 3
45784: PUSH
45785: LD_INT 0
45787: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45788: LD_VAR 0 1
45792: PUSH
45793: LD_INT 0
45795: LESS
45796: PUSH
45797: LD_VAR 0 1
45801: PUSH
45802: LD_INT 8
45804: GREATER
45805: OR
45806: PUSH
45807: LD_VAR 0 2
45811: PUSH
45812: LD_INT 0
45814: LESS
45815: OR
45816: PUSH
45817: LD_VAR 0 2
45821: PUSH
45822: LD_INT 8
45824: GREATER
45825: OR
45826: IFFALSE 45830
// exit ;
45828: GO 45905
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45830: LD_ADDR_VAR 0 4
45834: PUSH
45835: LD_INT 22
45837: PUSH
45838: LD_VAR 0 2
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PPUSH
45847: CALL_OW 69
45851: PUSH
45852: FOR_IN
45853: IFFALSE 45903
// begin un := UnitShoot ( i ) ;
45855: LD_ADDR_VAR 0 5
45859: PUSH
45860: LD_VAR 0 4
45864: PPUSH
45865: CALL_OW 504
45869: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45870: LD_VAR 0 5
45874: PPUSH
45875: CALL_OW 255
45879: PUSH
45880: LD_VAR 0 1
45884: EQUAL
45885: IFFALSE 45901
// begin result := un ;
45887: LD_ADDR_VAR 0 3
45891: PUSH
45892: LD_VAR 0 5
45896: ST_TO_ADDR
// exit ;
45897: POP
45898: POP
45899: GO 45905
// end ; end ;
45901: GO 45852
45903: POP
45904: POP
// end ;
45905: LD_VAR 0 3
45909: RET
// export function GetCargoBay ( units ) ; begin
45910: LD_INT 0
45912: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45913: LD_ADDR_VAR 0 2
45917: PUSH
45918: LD_VAR 0 1
45922: PPUSH
45923: LD_INT 2
45925: PUSH
45926: LD_INT 34
45928: PUSH
45929: LD_INT 12
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 34
45938: PUSH
45939: LD_INT 51
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 34
45948: PUSH
45949: LD_INT 32
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 34
45958: PUSH
45959: LD_EXP 40
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: PPUSH
45975: CALL_OW 72
45979: ST_TO_ADDR
// end ;
45980: LD_VAR 0 2
45984: RET
// export function Negate ( value ) ; begin
45985: LD_INT 0
45987: PPUSH
// result := not value ;
45988: LD_ADDR_VAR 0 2
45992: PUSH
45993: LD_VAR 0 1
45997: NOT
45998: ST_TO_ADDR
// end ;
45999: LD_VAR 0 2
46003: RET
// export function Inc ( value ) ; begin
46004: LD_INT 0
46006: PPUSH
// result := value + 1 ;
46007: LD_ADDR_VAR 0 2
46011: PUSH
46012: LD_VAR 0 1
46016: PUSH
46017: LD_INT 1
46019: PLUS
46020: ST_TO_ADDR
// end ;
46021: LD_VAR 0 2
46025: RET
// export function Dec ( value ) ; begin
46026: LD_INT 0
46028: PPUSH
// result := value - 1 ;
46029: LD_ADDR_VAR 0 2
46033: PUSH
46034: LD_VAR 0 1
46038: PUSH
46039: LD_INT 1
46041: MINUS
46042: ST_TO_ADDR
// end ;
46043: LD_VAR 0 2
46047: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46048: LD_INT 0
46050: PPUSH
46051: PPUSH
46052: PPUSH
46053: PPUSH
46054: PPUSH
46055: PPUSH
46056: PPUSH
46057: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46058: LD_VAR 0 1
46062: PPUSH
46063: LD_VAR 0 2
46067: PPUSH
46068: CALL_OW 488
46072: NOT
46073: PUSH
46074: LD_VAR 0 3
46078: PPUSH
46079: LD_VAR 0 4
46083: PPUSH
46084: CALL_OW 488
46088: NOT
46089: OR
46090: IFFALSE 46103
// begin result := - 1 ;
46092: LD_ADDR_VAR 0 5
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: ST_TO_ADDR
// exit ;
46101: GO 46338
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46103: LD_ADDR_VAR 0 12
46107: PUSH
46108: LD_VAR 0 1
46112: PPUSH
46113: LD_VAR 0 2
46117: PPUSH
46118: LD_VAR 0 3
46122: PPUSH
46123: LD_VAR 0 4
46127: PPUSH
46128: CALL 45186 0 4
46132: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46133: LD_ADDR_VAR 0 11
46137: PUSH
46138: LD_VAR 0 1
46142: PPUSH
46143: LD_VAR 0 2
46147: PPUSH
46148: LD_VAR 0 12
46152: PUSH
46153: LD_INT 1
46155: ARRAY
46156: PPUSH
46157: LD_VAR 0 12
46161: PUSH
46162: LD_INT 2
46164: ARRAY
46165: PPUSH
46166: CALL_OW 298
46170: ST_TO_ADDR
// distance := 9999 ;
46171: LD_ADDR_VAR 0 10
46175: PUSH
46176: LD_INT 9999
46178: ST_TO_ADDR
// for i := 0 to 5 do
46179: LD_ADDR_VAR 0 6
46183: PUSH
46184: DOUBLE
46185: LD_INT 0
46187: DEC
46188: ST_TO_ADDR
46189: LD_INT 5
46191: PUSH
46192: FOR_TO
46193: IFFALSE 46336
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46195: LD_ADDR_VAR 0 7
46199: PUSH
46200: LD_VAR 0 1
46204: PPUSH
46205: LD_VAR 0 6
46209: PPUSH
46210: LD_VAR 0 11
46214: PPUSH
46215: CALL_OW 272
46219: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46220: LD_ADDR_VAR 0 8
46224: PUSH
46225: LD_VAR 0 2
46229: PPUSH
46230: LD_VAR 0 6
46234: PPUSH
46235: LD_VAR 0 11
46239: PPUSH
46240: CALL_OW 273
46244: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46245: LD_VAR 0 7
46249: PPUSH
46250: LD_VAR 0 8
46254: PPUSH
46255: CALL_OW 488
46259: NOT
46260: IFFALSE 46264
// continue ;
46262: GO 46192
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
46264: LD_ADDR_VAR 0 9
46268: PUSH
46269: LD_VAR 0 12
46273: PUSH
46274: LD_INT 1
46276: ARRAY
46277: PPUSH
46278: LD_VAR 0 12
46282: PUSH
46283: LD_INT 2
46285: ARRAY
46286: PPUSH
46287: LD_VAR 0 7
46291: PPUSH
46292: LD_VAR 0 8
46296: PPUSH
46297: CALL_OW 298
46301: ST_TO_ADDR
// if tmp < distance then
46302: LD_VAR 0 9
46306: PUSH
46307: LD_VAR 0 10
46311: LESS
46312: IFFALSE 46334
// begin result := i ;
46314: LD_ADDR_VAR 0 5
46318: PUSH
46319: LD_VAR 0 6
46323: ST_TO_ADDR
// distance := tmp ;
46324: LD_ADDR_VAR 0 10
46328: PUSH
46329: LD_VAR 0 9
46333: ST_TO_ADDR
// end ; end ;
46334: GO 46192
46336: POP
46337: POP
// end ;
46338: LD_VAR 0 5
46342: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46343: LD_INT 0
46345: PPUSH
46346: PPUSH
// if not driver or not IsInUnit ( driver ) then
46347: LD_VAR 0 1
46351: NOT
46352: PUSH
46353: LD_VAR 0 1
46357: PPUSH
46358: CALL_OW 310
46362: NOT
46363: OR
46364: IFFALSE 46368
// exit ;
46366: GO 46458
// vehicle := IsInUnit ( driver ) ;
46368: LD_ADDR_VAR 0 3
46372: PUSH
46373: LD_VAR 0 1
46377: PPUSH
46378: CALL_OW 310
46382: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46383: LD_VAR 0 1
46387: PPUSH
46388: LD_STRING \
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: PUSH
46418: LD_STRING E
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_VAR 0 3
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PPUSH
46454: CALL_OW 446
// end ;
46458: LD_VAR 0 2
46462: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46463: LD_INT 0
46465: PPUSH
46466: PPUSH
// if not driver or not IsInUnit ( driver ) then
46467: LD_VAR 0 1
46471: NOT
46472: PUSH
46473: LD_VAR 0 1
46477: PPUSH
46478: CALL_OW 310
46482: NOT
46483: OR
46484: IFFALSE 46488
// exit ;
46486: GO 46578
// vehicle := IsInUnit ( driver ) ;
46488: LD_ADDR_VAR 0 3
46492: PUSH
46493: LD_VAR 0 1
46497: PPUSH
46498: CALL_OW 310
46502: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46503: LD_VAR 0 1
46507: PPUSH
46508: LD_STRING \
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: PUSH
46538: LD_STRING E
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_VAR 0 3
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PPUSH
46574: CALL_OW 447
// end ;
46578: LD_VAR 0 2
46582: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
46583: LD_INT 0
46585: PPUSH
46586: PPUSH
46587: PPUSH
// tmp := [ ] ;
46588: LD_ADDR_VAR 0 5
46592: PUSH
46593: EMPTY
46594: ST_TO_ADDR
// for i in units do
46595: LD_ADDR_VAR 0 4
46599: PUSH
46600: LD_VAR 0 1
46604: PUSH
46605: FOR_IN
46606: IFFALSE 46644
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
46608: LD_ADDR_VAR 0 5
46612: PUSH
46613: LD_VAR 0 5
46617: PPUSH
46618: LD_VAR 0 5
46622: PUSH
46623: LD_INT 1
46625: PLUS
46626: PPUSH
46627: LD_VAR 0 4
46631: PPUSH
46632: CALL_OW 256
46636: PPUSH
46637: CALL_OW 2
46641: ST_TO_ADDR
46642: GO 46605
46644: POP
46645: POP
// if not tmp then
46646: LD_VAR 0 5
46650: NOT
46651: IFFALSE 46655
// exit ;
46653: GO 46703
// if asc then
46655: LD_VAR 0 2
46659: IFFALSE 46683
// result := SortListByListAsc ( units , tmp ) else
46661: LD_ADDR_VAR 0 3
46665: PUSH
46666: LD_VAR 0 1
46670: PPUSH
46671: LD_VAR 0 5
46675: PPUSH
46676: CALL_OW 76
46680: ST_TO_ADDR
46681: GO 46703
// result := SortListByListDesc ( units , tmp ) ;
46683: LD_ADDR_VAR 0 3
46687: PUSH
46688: LD_VAR 0 1
46692: PPUSH
46693: LD_VAR 0 5
46697: PPUSH
46698: CALL_OW 77
46702: ST_TO_ADDR
// end ;
46703: LD_VAR 0 3
46707: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
46708: LD_INT 0
46710: PPUSH
46711: PPUSH
// task := GetTaskList ( mech ) ;
46712: LD_ADDR_VAR 0 4
46716: PUSH
46717: LD_VAR 0 1
46721: PPUSH
46722: CALL_OW 437
46726: ST_TO_ADDR
// if not task then
46727: LD_VAR 0 4
46731: NOT
46732: IFFALSE 46736
// exit ;
46734: GO 46778
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
46736: LD_ADDR_VAR 0 3
46740: PUSH
46741: LD_VAR 0 4
46745: PUSH
46746: LD_INT 1
46748: ARRAY
46749: PUSH
46750: LD_INT 1
46752: ARRAY
46753: PUSH
46754: LD_STRING r
46756: EQUAL
46757: PUSH
46758: LD_VAR 0 4
46762: PUSH
46763: LD_INT 1
46765: ARRAY
46766: PUSH
46767: LD_INT 4
46769: ARRAY
46770: PUSH
46771: LD_VAR 0 2
46775: EQUAL
46776: AND
46777: ST_TO_ADDR
// end ;
46778: LD_VAR 0 3
46782: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
46783: LD_INT 0
46785: PPUSH
// SetDir ( unit , d ) ;
46786: LD_VAR 0 1
46790: PPUSH
46791: LD_VAR 0 4
46795: PPUSH
46796: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
46800: LD_VAR 0 1
46804: PPUSH
46805: LD_VAR 0 2
46809: PPUSH
46810: LD_VAR 0 3
46814: PPUSH
46815: LD_VAR 0 5
46819: PPUSH
46820: CALL_OW 48
// end ;
46824: LD_VAR 0 6
46828: RET
// export function ToNaturalNumber ( number ) ; begin
46829: LD_INT 0
46831: PPUSH
// result := number div 1 ;
46832: LD_ADDR_VAR 0 2
46836: PUSH
46837: LD_VAR 0 1
46841: PUSH
46842: LD_INT 1
46844: DIV
46845: ST_TO_ADDR
// if number < 0 then
46846: LD_VAR 0 1
46850: PUSH
46851: LD_INT 0
46853: LESS
46854: IFFALSE 46864
// result := 0 ;
46856: LD_ADDR_VAR 0 2
46860: PUSH
46861: LD_INT 0
46863: ST_TO_ADDR
// end ;
46864: LD_VAR 0 2
46868: RET
// export function SortByClass ( units , class ) ; var un ; begin
46869: LD_INT 0
46871: PPUSH
46872: PPUSH
// if not units or not class then
46873: LD_VAR 0 1
46877: NOT
46878: PUSH
46879: LD_VAR 0 2
46883: NOT
46884: OR
46885: IFFALSE 46889
// exit ;
46887: GO 46984
// result := [ ] ;
46889: LD_ADDR_VAR 0 3
46893: PUSH
46894: EMPTY
46895: ST_TO_ADDR
// for un in units do
46896: LD_ADDR_VAR 0 4
46900: PUSH
46901: LD_VAR 0 1
46905: PUSH
46906: FOR_IN
46907: IFFALSE 46982
// if GetClass ( un ) = class then
46909: LD_VAR 0 4
46913: PPUSH
46914: CALL_OW 257
46918: PUSH
46919: LD_VAR 0 2
46923: EQUAL
46924: IFFALSE 46951
// result := Insert ( result , 1 , un ) else
46926: LD_ADDR_VAR 0 3
46930: PUSH
46931: LD_VAR 0 3
46935: PPUSH
46936: LD_INT 1
46938: PPUSH
46939: LD_VAR 0 4
46943: PPUSH
46944: CALL_OW 2
46948: ST_TO_ADDR
46949: GO 46980
// result := Replace ( result , result + 1 , un ) ;
46951: LD_ADDR_VAR 0 3
46955: PUSH
46956: LD_VAR 0 3
46960: PPUSH
46961: LD_VAR 0 3
46965: PUSH
46966: LD_INT 1
46968: PLUS
46969: PPUSH
46970: LD_VAR 0 4
46974: PPUSH
46975: CALL_OW 1
46979: ST_TO_ADDR
46980: GO 46906
46982: POP
46983: POP
// end ;
46984: LD_VAR 0 3
46988: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46989: LD_INT 0
46991: PPUSH
46992: PPUSH
46993: PPUSH
46994: PPUSH
46995: PPUSH
46996: PPUSH
46997: PPUSH
// result := [ ] ;
46998: LD_ADDR_VAR 0 4
47002: PUSH
47003: EMPTY
47004: ST_TO_ADDR
// if x - r < 0 then
47005: LD_VAR 0 1
47009: PUSH
47010: LD_VAR 0 3
47014: MINUS
47015: PUSH
47016: LD_INT 0
47018: LESS
47019: IFFALSE 47031
// min_x := 0 else
47021: LD_ADDR_VAR 0 8
47025: PUSH
47026: LD_INT 0
47028: ST_TO_ADDR
47029: GO 47047
// min_x := x - r ;
47031: LD_ADDR_VAR 0 8
47035: PUSH
47036: LD_VAR 0 1
47040: PUSH
47041: LD_VAR 0 3
47045: MINUS
47046: ST_TO_ADDR
// if y - r < 0 then
47047: LD_VAR 0 2
47051: PUSH
47052: LD_VAR 0 3
47056: MINUS
47057: PUSH
47058: LD_INT 0
47060: LESS
47061: IFFALSE 47073
// min_y := 0 else
47063: LD_ADDR_VAR 0 7
47067: PUSH
47068: LD_INT 0
47070: ST_TO_ADDR
47071: GO 47089
// min_y := y - r ;
47073: LD_ADDR_VAR 0 7
47077: PUSH
47078: LD_VAR 0 2
47082: PUSH
47083: LD_VAR 0 3
47087: MINUS
47088: ST_TO_ADDR
// max_x := x + r ;
47089: LD_ADDR_VAR 0 9
47093: PUSH
47094: LD_VAR 0 1
47098: PUSH
47099: LD_VAR 0 3
47103: PLUS
47104: ST_TO_ADDR
// max_y := y + r ;
47105: LD_ADDR_VAR 0 10
47109: PUSH
47110: LD_VAR 0 2
47114: PUSH
47115: LD_VAR 0 3
47119: PLUS
47120: ST_TO_ADDR
// for _x = min_x to max_x do
47121: LD_ADDR_VAR 0 5
47125: PUSH
47126: DOUBLE
47127: LD_VAR 0 8
47131: DEC
47132: ST_TO_ADDR
47133: LD_VAR 0 9
47137: PUSH
47138: FOR_TO
47139: IFFALSE 47240
// for _y = min_y to max_y do
47141: LD_ADDR_VAR 0 6
47145: PUSH
47146: DOUBLE
47147: LD_VAR 0 7
47151: DEC
47152: ST_TO_ADDR
47153: LD_VAR 0 10
47157: PUSH
47158: FOR_TO
47159: IFFALSE 47236
// begin if not ValidHex ( _x , _y ) then
47161: LD_VAR 0 5
47165: PPUSH
47166: LD_VAR 0 6
47170: PPUSH
47171: CALL_OW 488
47175: NOT
47176: IFFALSE 47180
// continue ;
47178: GO 47158
// if GetResourceTypeXY ( _x , _y ) then
47180: LD_VAR 0 5
47184: PPUSH
47185: LD_VAR 0 6
47189: PPUSH
47190: CALL_OW 283
47194: IFFALSE 47234
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47196: LD_ADDR_VAR 0 4
47200: PUSH
47201: LD_VAR 0 4
47205: PPUSH
47206: LD_VAR 0 4
47210: PUSH
47211: LD_INT 1
47213: PLUS
47214: PPUSH
47215: LD_VAR 0 5
47219: PUSH
47220: LD_VAR 0 6
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PPUSH
47229: CALL_OW 1
47233: ST_TO_ADDR
// end ;
47234: GO 47158
47236: POP
47237: POP
47238: GO 47138
47240: POP
47241: POP
// end ;
47242: LD_VAR 0 4
47246: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47247: LD_INT 0
47249: PPUSH
47250: PPUSH
47251: PPUSH
47252: PPUSH
47253: PPUSH
47254: PPUSH
47255: PPUSH
47256: PPUSH
// if not units then
47257: LD_VAR 0 1
47261: NOT
47262: IFFALSE 47266
// exit ;
47264: GO 47691
// result := UnitFilter ( units , [ f_ok ] ) ;
47266: LD_ADDR_VAR 0 3
47270: PUSH
47271: LD_VAR 0 1
47275: PPUSH
47276: LD_INT 50
47278: PUSH
47279: EMPTY
47280: LIST
47281: PPUSH
47282: CALL_OW 72
47286: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
47287: LD_ADDR_VAR 0 8
47291: PUSH
47292: LD_VAR 0 1
47296: PUSH
47297: LD_INT 1
47299: ARRAY
47300: PPUSH
47301: CALL_OW 255
47305: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
47306: LD_ADDR_VAR 0 10
47310: PUSH
47311: LD_INT 29
47313: PUSH
47314: LD_EXP 43
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// if not result then
47323: LD_VAR 0 3
47327: NOT
47328: IFFALSE 47332
// exit ;
47330: GO 47691
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
47332: LD_ADDR_VAR 0 5
47336: PUSH
47337: LD_INT 81
47339: PUSH
47340: LD_VAR 0 8
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PPUSH
47349: CALL_OW 69
47353: ST_TO_ADDR
// for i in result do
47354: LD_ADDR_VAR 0 4
47358: PUSH
47359: LD_VAR 0 3
47363: PUSH
47364: FOR_IN
47365: IFFALSE 47689
// begin tag := GetTag ( i ) + 1 ;
47367: LD_ADDR_VAR 0 9
47371: PUSH
47372: LD_VAR 0 4
47376: PPUSH
47377: CALL_OW 110
47381: PUSH
47382: LD_INT 1
47384: PLUS
47385: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
47386: LD_ADDR_VAR 0 7
47390: PUSH
47391: LD_VAR 0 4
47395: PPUSH
47396: CALL_OW 250
47400: PPUSH
47401: LD_VAR 0 4
47405: PPUSH
47406: CALL_OW 251
47410: PPUSH
47411: LD_INT 6
47413: PPUSH
47414: CALL 46989 0 3
47418: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
47419: LD_VAR 0 7
47423: PUSH
47424: LD_VAR 0 4
47428: PPUSH
47429: CALL_OW 264
47433: PUSH
47434: LD_VAR 0 10
47438: IN
47439: NOT
47440: AND
47441: IFFALSE 47480
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
47443: LD_VAR 0 4
47447: PPUSH
47448: LD_VAR 0 7
47452: PUSH
47453: LD_INT 1
47455: ARRAY
47456: PUSH
47457: LD_INT 1
47459: ARRAY
47460: PPUSH
47461: LD_VAR 0 7
47465: PUSH
47466: LD_INT 1
47468: ARRAY
47469: PUSH
47470: LD_INT 2
47472: ARRAY
47473: PPUSH
47474: CALL_OW 116
47478: GO 47687
// if path > tag then
47480: LD_VAR 0 2
47484: PUSH
47485: LD_VAR 0 9
47489: GREATER
47490: IFFALSE 47657
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
47492: LD_ADDR_VAR 0 6
47496: PUSH
47497: LD_VAR 0 5
47501: PPUSH
47502: LD_INT 91
47504: PUSH
47505: LD_VAR 0 4
47509: PUSH
47510: LD_INT 12
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: PPUSH
47518: CALL_OW 72
47522: ST_TO_ADDR
// if nearEnemy then
47523: LD_VAR 0 6
47527: IFFALSE 47555
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
47529: LD_VAR 0 4
47533: PPUSH
47534: LD_VAR 0 6
47538: PPUSH
47539: LD_VAR 0 4
47543: PPUSH
47544: CALL_OW 74
47548: PPUSH
47549: CALL_OW 115
47553: GO 47655
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
47555: LD_VAR 0 4
47559: PPUSH
47560: LD_VAR 0 2
47564: PUSH
47565: LD_VAR 0 9
47569: ARRAY
47570: PUSH
47571: LD_INT 1
47573: ARRAY
47574: PPUSH
47575: LD_VAR 0 2
47579: PUSH
47580: LD_VAR 0 9
47584: ARRAY
47585: PUSH
47586: LD_INT 2
47588: ARRAY
47589: PPUSH
47590: CALL_OW 297
47594: PUSH
47595: LD_INT 6
47597: GREATER
47598: IFFALSE 47641
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
47600: LD_VAR 0 4
47604: PPUSH
47605: LD_VAR 0 2
47609: PUSH
47610: LD_VAR 0 9
47614: ARRAY
47615: PUSH
47616: LD_INT 1
47618: ARRAY
47619: PPUSH
47620: LD_VAR 0 2
47624: PUSH
47625: LD_VAR 0 9
47629: ARRAY
47630: PUSH
47631: LD_INT 2
47633: ARRAY
47634: PPUSH
47635: CALL_OW 114
47639: GO 47655
// SetTag ( i , tag ) ;
47641: LD_VAR 0 4
47645: PPUSH
47646: LD_VAR 0 9
47650: PPUSH
47651: CALL_OW 109
// end else
47655: GO 47687
// if enemy then
47657: LD_VAR 0 5
47661: IFFALSE 47687
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
47663: LD_VAR 0 4
47667: PPUSH
47668: LD_VAR 0 5
47672: PPUSH
47673: LD_VAR 0 4
47677: PPUSH
47678: CALL_OW 74
47682: PPUSH
47683: CALL_OW 115
// end ;
47687: GO 47364
47689: POP
47690: POP
// end ;
47691: LD_VAR 0 3
47695: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
47696: LD_INT 0
47698: PPUSH
47699: PPUSH
47700: PPUSH
// if not unit or IsInUnit ( unit ) then
47701: LD_VAR 0 1
47705: NOT
47706: PUSH
47707: LD_VAR 0 1
47711: PPUSH
47712: CALL_OW 310
47716: OR
47717: IFFALSE 47721
// exit ;
47719: GO 47812
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
47721: LD_ADDR_VAR 0 4
47725: PUSH
47726: LD_VAR 0 1
47730: PPUSH
47731: CALL_OW 250
47735: PPUSH
47736: LD_VAR 0 2
47740: PPUSH
47741: LD_INT 1
47743: PPUSH
47744: CALL_OW 272
47748: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
47749: LD_ADDR_VAR 0 5
47753: PUSH
47754: LD_VAR 0 1
47758: PPUSH
47759: CALL_OW 251
47763: PPUSH
47764: LD_VAR 0 2
47768: PPUSH
47769: LD_INT 1
47771: PPUSH
47772: CALL_OW 273
47776: ST_TO_ADDR
// if ValidHex ( x , y ) then
47777: LD_VAR 0 4
47781: PPUSH
47782: LD_VAR 0 5
47786: PPUSH
47787: CALL_OW 488
47791: IFFALSE 47812
// ComTurnXY ( unit , x , y ) ;
47793: LD_VAR 0 1
47797: PPUSH
47798: LD_VAR 0 4
47802: PPUSH
47803: LD_VAR 0 5
47807: PPUSH
47808: CALL_OW 118
// end ;
47812: LD_VAR 0 3
47816: RET
// export function SeeUnits ( side , units ) ; var i ; begin
47817: LD_INT 0
47819: PPUSH
47820: PPUSH
// result := false ;
47821: LD_ADDR_VAR 0 3
47825: PUSH
47826: LD_INT 0
47828: ST_TO_ADDR
// if not units then
47829: LD_VAR 0 2
47833: NOT
47834: IFFALSE 47838
// exit ;
47836: GO 47883
// for i in units do
47838: LD_ADDR_VAR 0 4
47842: PUSH
47843: LD_VAR 0 2
47847: PUSH
47848: FOR_IN
47849: IFFALSE 47881
// if See ( side , i ) then
47851: LD_VAR 0 1
47855: PPUSH
47856: LD_VAR 0 4
47860: PPUSH
47861: CALL_OW 292
47865: IFFALSE 47879
// begin result := true ;
47867: LD_ADDR_VAR 0 3
47871: PUSH
47872: LD_INT 1
47874: ST_TO_ADDR
// exit ;
47875: POP
47876: POP
47877: GO 47883
// end ;
47879: GO 47848
47881: POP
47882: POP
// end ;
47883: LD_VAR 0 3
47887: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47888: LD_INT 0
47890: PPUSH
47891: PPUSH
47892: PPUSH
47893: PPUSH
// if not unit or not points then
47894: LD_VAR 0 1
47898: NOT
47899: PUSH
47900: LD_VAR 0 2
47904: NOT
47905: OR
47906: IFFALSE 47910
// exit ;
47908: GO 48000
// dist := 99999 ;
47910: LD_ADDR_VAR 0 5
47914: PUSH
47915: LD_INT 99999
47917: ST_TO_ADDR
// for i in points do
47918: LD_ADDR_VAR 0 4
47922: PUSH
47923: LD_VAR 0 2
47927: PUSH
47928: FOR_IN
47929: IFFALSE 47998
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47931: LD_ADDR_VAR 0 6
47935: PUSH
47936: LD_VAR 0 1
47940: PPUSH
47941: LD_VAR 0 4
47945: PUSH
47946: LD_INT 1
47948: ARRAY
47949: PPUSH
47950: LD_VAR 0 4
47954: PUSH
47955: LD_INT 2
47957: ARRAY
47958: PPUSH
47959: CALL_OW 297
47963: ST_TO_ADDR
// if tmpDist < dist then
47964: LD_VAR 0 6
47968: PUSH
47969: LD_VAR 0 5
47973: LESS
47974: IFFALSE 47996
// begin result := i ;
47976: LD_ADDR_VAR 0 3
47980: PUSH
47981: LD_VAR 0 4
47985: ST_TO_ADDR
// dist := tmpDist ;
47986: LD_ADDR_VAR 0 5
47990: PUSH
47991: LD_VAR 0 6
47995: ST_TO_ADDR
// end ; end ;
47996: GO 47928
47998: POP
47999: POP
// end ; end_of_file
48000: LD_VAR 0 3
48004: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
48005: LD_INT 0
48007: PPUSH
// ar_miner := 81 ;
48008: LD_ADDR_EXP 46
48012: PUSH
48013: LD_INT 81
48015: ST_TO_ADDR
// ar_crane := 88 ;
48016: LD_ADDR_EXP 45
48020: PUSH
48021: LD_INT 88
48023: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
48024: LD_ADDR_EXP 40
48028: PUSH
48029: LD_INT 89
48031: ST_TO_ADDR
// us_hack := 99 ;
48032: LD_ADDR_EXP 41
48036: PUSH
48037: LD_INT 99
48039: ST_TO_ADDR
// us_artillery := 97 ;
48040: LD_ADDR_EXP 42
48044: PUSH
48045: LD_INT 97
48047: ST_TO_ADDR
// ar_bio_bomb := 91 ;
48048: LD_ADDR_EXP 43
48052: PUSH
48053: LD_INT 91
48055: ST_TO_ADDR
// ar_mortar := 92 ;
48056: LD_ADDR_EXP 44
48060: PUSH
48061: LD_INT 92
48063: ST_TO_ADDR
// ru_radar := 98 ;
48064: LD_ADDR_EXP 39
48068: PUSH
48069: LD_INT 98
48071: ST_TO_ADDR
// tech_Artillery := 80 ;
48072: LD_ADDR_EXP 47
48076: PUSH
48077: LD_INT 80
48079: ST_TO_ADDR
// tech_RadMat := 81 ;
48080: LD_ADDR_EXP 48
48084: PUSH
48085: LD_INT 81
48087: ST_TO_ADDR
// tech_BasicTools := 82 ;
48088: LD_ADDR_EXP 49
48092: PUSH
48093: LD_INT 82
48095: ST_TO_ADDR
// tech_Cargo := 83 ;
48096: LD_ADDR_EXP 50
48100: PUSH
48101: LD_INT 83
48103: ST_TO_ADDR
// tech_Track := 84 ;
48104: LD_ADDR_EXP 51
48108: PUSH
48109: LD_INT 84
48111: ST_TO_ADDR
// tech_Crane := 85 ;
48112: LD_ADDR_EXP 52
48116: PUSH
48117: LD_INT 85
48119: ST_TO_ADDR
// tech_Bulldozer := 86 ;
48120: LD_ADDR_EXP 53
48124: PUSH
48125: LD_INT 86
48127: ST_TO_ADDR
// tech_Hovercraft := 87 ;
48128: LD_ADDR_EXP 54
48132: PUSH
48133: LD_INT 87
48135: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
48136: LD_ADDR_EXP 55
48140: PUSH
48141: LD_INT 88
48143: ST_TO_ADDR
// class_mastodont := 31 ;
48144: LD_ADDR_EXP 56
48148: PUSH
48149: LD_INT 31
48151: ST_TO_ADDR
// class_horse := 21 ;
48152: LD_ADDR_EXP 57
48156: PUSH
48157: LD_INT 21
48159: ST_TO_ADDR
// end ;
48160: LD_VAR 0 1
48164: RET
// every 1 do
48165: GO 48167
48167: DISABLE
// InitGlobalVariables ;
48168: CALL 48005 0 0
48172: END
