// starting begin ResetFog ;
   0: CALL_OW 335
// MC_Init ( ) ;
   4: CALL 388 0 0
// PrepareTestBase ;
   8: CALL 113 0 0
// mc_debug := true ;
  12: LD_ADDR_EXP 5
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// MC_Start ( ) ;
  20: CALL 412 0 0
// end ;
  24: END
// export function MC_CustomMacro ( ) ; begin
  25: LD_INT 0
  27: PPUSH
// MC_Add ( 1 , FilterAllUnits ( [ f_side , 1 ] ) ) ;
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 22
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: EMPTY
  38: LIST
  39: LIST
  40: PPUSH
  41: CALL_OW 69
  45: PPUSH
  46: CALL 467 0 2
// MC_SetParkingArea ( 1 , parkingArea1 ) ;
  50: LD_INT 1
  52: PPUSH
  53: LD_INT 4
  55: PPUSH
  56: CALL 2287 0 2
// MC_SetCratesArea ( 1 , cratesArea1 ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 2
  65: PPUSH
  66: CALL 1864 0 2
// MC_SetScanArea ( 1 , baseArea1 ) ;
  70: LD_INT 1
  72: PPUSH
  73: LD_INT 1
  75: PPUSH
  76: CALL 2336 0 2
// MC_SetBuildingList ( 1 , [ [ b_barracks , 37 , 33 , 5 ] ] ) ;
  80: LD_INT 1
  82: PPUSH
  83: LD_INT 5
  85: PUSH
  86: LD_INT 37
  88: PUSH
  89: LD_INT 33
  91: PUSH
  92: LD_INT 5
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: EMPTY
 102: LIST
 103: PPUSH
 104: CALL 964 0 2
// end ;
 108: LD_VAR 0 1
 112: RET
// export function PrepareTestBase ; var i , un ; begin
 113: LD_INT 0
 115: PPUSH
 116: PPUSH
 117: PPUSH
// InitHc_All ;
 118: CALL_OW 584
// uc_side := 1 ;
 122: LD_ADDR_OWVAR 20
 126: PUSH
 127: LD_INT 1
 129: ST_TO_ADDR
// uc_nation := 1 ;
 130: LD_ADDR_OWVAR 21
 134: PUSH
 135: LD_INT 1
 137: ST_TO_ADDR
// for i := 1 to 12 do
 138: LD_ADDR_VAR 0 2
 142: PUSH
 143: DOUBLE
 144: LD_INT 1
 146: DEC
 147: ST_TO_ADDR
 148: LD_INT 12
 150: PUSH
 151: FOR_TO
 152: IFFALSE 219
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
 154: LD_INT 0
 156: PPUSH
 157: LD_VAR 0 2
 161: PUSH
 162: LD_INT 4
 164: MOD
 165: PUSH
 166: LD_INT 1
 168: PLUS
 169: PPUSH
 170: LD_INT 3
 172: PPUSH
 173: CALL_OW 380
// un := CreateHuman ;
 177: LD_ADDR_VAR 0 3
 181: PUSH
 182: CALL_OW 44
 186: ST_TO_ADDR
// PlaceUnitXYR ( un , 21 , 16 , 8 , false ) ;
 187: LD_VAR 0 3
 191: PPUSH
 192: LD_INT 21
 194: PPUSH
 195: LD_INT 16
 197: PPUSH
 198: LD_INT 8
 200: PPUSH
 201: LD_INT 0
 203: PPUSH
 204: CALL_OW 50
// ComHold ( un ) ;
 208: LD_VAR 0 3
 212: PPUSH
 213: CALL_OW 140
// end ;
 217: GO 151
 219: POP
 220: POP
// end ;
 221: LD_VAR 0 1
 225: RET
// every 0 0$50 trigger mc_debug do
 226: LD_EXP 5
 230: IFFALSE 257
 232: GO 234
 234: DISABLE
// begin enable ;
 235: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea1 , true ) ;
 236: LD_INT 1
 238: PPUSH
 239: LD_INT 5
 241: PPUSH
 242: CALL_OW 12
 246: PPUSH
 247: LD_INT 2
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: CALL_OW 55
// end ; end_of_file
 257: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ;
 258: LD_VAR 0 1
 262: PPUSH
 263: LD_VAR 0 2
 267: PPUSH
 268: LD_VAR 0 3
 272: PPUSH
 273: LD_VAR 0 4
 277: PPUSH
 278: LD_VAR 0 5
 282: PPUSH
 283: LD_VAR 0 6
 287: PPUSH
 288: LD_VAR 0 7
 292: PPUSH
 293: CALL 4715 0 7
// end ;
 297: PPOPN 7
 299: END
// on ClassChanged ( unit , old_class , new_class ) do begin MCE_ClassChanged ( unit , old_class , new_class ) ;
 300: LD_VAR 0 1
 304: PPUSH
 305: LD_VAR 0 2
 309: PPUSH
 310: LD_VAR 0 3
 314: PPUSH
 315: CALL 4768 0 3
// end ;
 319: PPOPN 3
 321: END
// on UnitDestroyed ( unit ) do begin MCE_UnitDestroyed ( unit ) ;
 322: LD_VAR 0 1
 326: PPUSH
 327: CALL 4790 0 1
// end ;
 331: PPOPN 1
 333: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ;
 334: LD_VAR 0 1
 338: PPUSH
 339: LD_VAR 0 2
 343: PPUSH
 344: LD_VAR 0 3
 348: PPUSH
 349: LD_VAR 0 4
 353: PPUSH
 354: CALL 4935 0 4
// end ;
 358: PPOPN 4
 360: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
 361: LD_VAR 0 1
 365: PPUSH
 366: CALL 5008 0 1
// end ;
 370: PPOPN 1
 372: END
// on UpgradeComplete ( building ) do begin MCE_BuildingUpgradeComplete ( building ) ;
 373: LD_VAR 0 1
 377: PPUSH
 378: CALL 5727 0 1
// end ;
 382: PPOPN 1
 384: END
// on CommandUnitXY ( comand , unit , x , y , z ) do begin end ; end_of_file
 385: PPOPN 5
 387: END
// export function MC_Init ( ) ; begin
 388: LD_INT 0
 390: PPUSH
// MC_InitVariables ( ) ;
 391: CALL 5988 0 0
// MCE_InitEvents ( ) ;
 395: CALL 4691 0 0
// MCT_InitTags ( ) ;
 399: CALL 6164 0 0
// MCTM_InitTaskManager ( ) end ;
 403: CALL 7751 0 0
 407: LD_VAR 0 1
 411: RET
// export function MC_Start ( ) ; begin
 412: LD_INT 0
 414: PPUSH
// mc_active := true ;
 415: LD_ADDR_EXP 4
 419: PUSH
 420: LD_INT 1
 422: ST_TO_ADDR
// MC_CustomMacro ( ) ;
 423: CALL 25 0 0
// MCE_SailEventCustom ( mce_start , 0 , 0 , 0 , 0 , 0 , 0 ) ;
 427: LD_EXP 1
 431: PPUSH
 432: LD_INT 0
 434: PPUSH
 435: LD_INT 0
 437: PPUSH
 438: LD_INT 0
 440: PPUSH
 441: LD_INT 0
 443: PPUSH
 444: LD_INT 0
 446: PPUSH
 447: LD_INT 0
 449: PPUSH
 450: CALL 4715 0 7
// end ;
 454: LD_VAR 0 1
 458: RET
// export function MC_Kill ( base ) ; begin
 459: LD_INT 0
 461: PPUSH
// end ;
 462: LD_VAR 0 2
 466: RET
// export function MC_Add ( side , units ) ; begin
 467: LD_INT 0
 469: PPUSH
// mc_bases := Replace ( mc_bases , mc_bases + 1 , side ) ;
 470: LD_ADDR_EXP 6
 474: PUSH
 475: LD_EXP 6
 479: PPUSH
 480: LD_EXP 6
 484: PUSH
 485: LD_INT 1
 487: PLUS
 488: PPUSH
 489: LD_VAR 0 1
 493: PPUSH
 494: CALL_OW 1
 498: ST_TO_ADDR
// mc_task := Replace ( mc_task , mc_task + 1 , [ ] ) ;
 499: LD_ADDR_EXP 8
 503: PUSH
 504: LD_EXP 8
 508: PPUSH
 509: LD_EXP 8
 513: PUSH
 514: LD_INT 1
 516: PLUS
 517: PPUSH
 518: EMPTY
 519: PPUSH
 520: CALL_OW 1
 524: ST_TO_ADDR
// mc_people := Replace ( mc_people , mc_people + 1 , UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
 525: LD_ADDR_EXP 9
 529: PUSH
 530: LD_EXP 9
 534: PPUSH
 535: LD_EXP 9
 539: PUSH
 540: LD_INT 1
 542: PLUS
 543: PPUSH
 544: LD_VAR 0 2
 548: PPUSH
 549: LD_INT 21
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 3
 561: PUSH
 562: LD_INT 23
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PPUSH
 580: CALL_OW 72
 584: PPUSH
 585: CALL_OW 1
 589: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , mc_ape + 1 , UnitFilter ( units , [ f_nation , 0 ] ) ) ;
 590: LD_ADDR_EXP 19
 594: PUSH
 595: LD_EXP 19
 599: PPUSH
 600: LD_EXP 19
 604: PUSH
 605: LD_INT 1
 607: PLUS
 608: PPUSH
 609: LD_VAR 0 2
 613: PPUSH
 614: LD_INT 23
 616: PUSH
 617: LD_INT 0
 619: PUSH
 620: EMPTY
 621: LIST
 622: LIST
 623: PPUSH
 624: CALL_OW 72
 628: PPUSH
 629: CALL_OW 1
 633: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , mc_vehicles + 1 , UnitFilter ( units , [ f_type , unit_vehicle ] ) ) ;
 634: LD_ADDR_EXP 11
 638: PUSH
 639: LD_EXP 11
 643: PPUSH
 644: LD_EXP 11
 648: PUSH
 649: LD_INT 1
 651: PLUS
 652: PPUSH
 653: LD_VAR 0 2
 657: PPUSH
 658: LD_INT 21
 660: PUSH
 661: LD_INT 2
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PPUSH
 668: CALL_OW 72
 672: PPUSH
 673: CALL_OW 1
 677: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , mc_buildings + 1 , UnitFilter ( units , [ f_type , unit_building ] ) ) ;
 678: LD_ADDR_EXP 10
 682: PUSH
 683: LD_EXP 10
 687: PPUSH
 688: LD_EXP 10
 692: PUSH
 693: LD_INT 1
 695: PLUS
 696: PPUSH
 697: LD_VAR 0 2
 701: PPUSH
 702: LD_INT 21
 704: PUSH
 705: LD_INT 3
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: PPUSH
 712: CALL_OW 72
 716: PPUSH
 717: CALL_OW 1
 721: ST_TO_ADDR
// mc_defense_status := Replace ( mc_defense_status , mc_defense_status + 1 , false ) ;
 722: LD_ADDR_EXP 16
 726: PUSH
 727: LD_EXP 16
 731: PPUSH
 732: LD_EXP 16
 736: PUSH
 737: LD_INT 1
 739: PLUS
 740: PPUSH
 741: LD_INT 0
 743: PPUSH
 744: CALL_OW 1
 748: ST_TO_ADDR
// end ;
 749: LD_VAR 0 3
 753: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
 754: LD_INT 0
 756: PPUSH
 757: PPUSH
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
// if not mc_bases [ base ] then
 762: LD_EXP 6
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: NOT
 773: IFFALSE 777
// exit ;
 775: GO 959
// tmp := [ ] ;
 777: LD_ADDR_VAR 0 6
 781: PUSH
 782: EMPTY
 783: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
 784: LD_ADDR_VAR 0 7
 788: PUSH
 789: LD_VAR 0 3
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 517
 801: ST_TO_ADDR
// if not list then
 802: LD_VAR 0 7
 806: NOT
 807: IFFALSE 811
// exit ;
 809: GO 959
// for i = 1 to amount do
 811: LD_ADDR_VAR 0 5
 815: PUSH
 816: DOUBLE
 817: LD_INT 1
 819: DEC
 820: ST_TO_ADDR
 821: LD_VAR 0 2
 825: PUSH
 826: FOR_TO
 827: IFFALSE 907
// begin x := rand ( 1 , list [ 1 ] ) ;
 829: LD_ADDR_VAR 0 8
 833: PUSH
 834: LD_INT 1
 836: PPUSH
 837: LD_VAR 0 7
 841: PUSH
 842: LD_INT 1
 844: ARRAY
 845: PPUSH
 846: CALL_OW 12
 850: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
 851: LD_ADDR_VAR 0 6
 855: PUSH
 856: LD_VAR 0 6
 860: PPUSH
 861: LD_VAR 0 5
 865: PPUSH
 866: LD_VAR 0 7
 870: PUSH
 871: LD_INT 1
 873: ARRAY
 874: PUSH
 875: LD_VAR 0 8
 879: ARRAY
 880: PUSH
 881: LD_VAR 0 7
 885: PUSH
 886: LD_INT 2
 888: ARRAY
 889: PUSH
 890: LD_VAR 0 8
 894: ARRAY
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PPUSH
 900: CALL_OW 1
 904: ST_TO_ADDR
// end ;
 905: GO 826
 907: POP
 908: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
 909: LD_ADDR_EXP 12
 913: PUSH
 914: LD_EXP 12
 918: PPUSH
 919: LD_VAR 0 1
 923: PPUSH
 924: LD_VAR 0 6
 928: PPUSH
 929: CALL_OW 1
 933: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
 934: LD_ADDR_EXP 13
 938: PUSH
 939: LD_EXP 13
 943: PPUSH
 944: LD_VAR 0 1
 948: PPUSH
 949: LD_VAR 0 3
 953: PPUSH
 954: CALL_OW 1
 958: ST_TO_ADDR
// end ;
 959: LD_VAR 0 4
 963: RET
// export function MC_SetBuildingList ( base , construct_list ) ; var i , btype ; begin
 964: LD_INT 0
 966: PPUSH
 967: PPUSH
 968: PPUSH
// if not construct_list then
 969: LD_VAR 0 2
 973: NOT
 974: IFFALSE 978
// exit ;
 976: GO 1204
// for i := 1 to construct_list do
 978: LD_ADDR_VAR 0 4
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_VAR 0 2
 992: PUSH
 993: FOR_TO
 994: IFFALSE 1177
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
 996: LD_VAR 0 2
1000: PUSH
1001: LD_VAR 0 4
1005: ARRAY
1006: PUSH
1007: LD_INT 1
1009: ARRAY
1010: PUSH
1011: LD_INT 3
1013: PUSH
1014: LD_INT 5
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: IN
1021: IFFALSE 1175
// begin case construct_list [ i ] [ 1 ] of b_factory :
1023: LD_VAR 0 2
1027: PUSH
1028: LD_VAR 0 4
1032: ARRAY
1033: PUSH
1034: LD_INT 1
1036: ARRAY
1037: PUSH
1038: LD_INT 3
1040: DOUBLE
1041: EQUAL
1042: IFTRUE 1046
1044: GO 1057
1046: POP
// btype := b_workshop ; b_barracks :
1047: LD_ADDR_VAR 0 5
1051: PUSH
1052: LD_INT 2
1054: ST_TO_ADDR
1055: GO 1077
1057: LD_INT 5
1059: DOUBLE
1060: EQUAL
1061: IFTRUE 1065
1063: GO 1076
1065: POP
// btype := b_armoury ; end ;
1066: LD_ADDR_VAR 0 5
1070: PUSH
1071: LD_INT 4
1073: ST_TO_ADDR
1074: GO 1077
1076: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: LD_VAR 0 2
1086: PPUSH
1087: LD_VAR 0 4
1091: PPUSH
1092: LD_VAR 0 2
1096: PUSH
1097: LD_VAR 0 4
1101: ARRAY
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: LD_VAR 0 2
1110: PUSH
1111: LD_VAR 0 4
1115: ARRAY
1116: PUSH
1117: LD_INT 1
1119: ARRAY
1120: PPUSH
1121: CALL_OW 1
1125: PPUSH
1126: CALL_OW 1
1130: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1131: LD_ADDR_VAR 0 2
1135: PUSH
1136: LD_VAR 0 2
1140: PPUSH
1141: LD_VAR 0 4
1145: PPUSH
1146: LD_VAR 0 2
1150: PUSH
1151: LD_VAR 0 4
1155: ARRAY
1156: PPUSH
1157: LD_INT 1
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 1
1169: PPUSH
1170: CALL_OW 1
1174: ST_TO_ADDR
// end ;
1175: GO 993
1177: POP
1178: POP
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
1179: LD_ADDR_EXP 14
1183: PUSH
1184: LD_EXP 14
1188: PPUSH
1189: LD_VAR 0 1
1193: PPUSH
1194: LD_VAR 0 2
1198: PPUSH
1199: CALL_OW 1
1203: ST_TO_ADDR
// end ;
1204: LD_VAR 0 3
1208: RET
// export function MC_InsertBuildingList ( base , construct_list ) ; var i , btype ; begin
1209: LD_INT 0
1211: PPUSH
1212: PPUSH
1213: PPUSH
// if not construct_list then
1214: LD_VAR 0 2
1218: NOT
1219: IFFALSE 1223
// exit ;
1221: GO 1461
// for i := 1 to construct_list do
1223: LD_ADDR_VAR 0 4
1227: PUSH
1228: DOUBLE
1229: LD_INT 1
1231: DEC
1232: ST_TO_ADDR
1233: LD_VAR 0 2
1237: PUSH
1238: FOR_TO
1239: IFFALSE 1422
// if construct_list [ i ] [ 1 ] in [ b_factory , b_barracks ] then
1241: LD_VAR 0 2
1245: PUSH
1246: LD_VAR 0 4
1250: ARRAY
1251: PUSH
1252: LD_INT 1
1254: ARRAY
1255: PUSH
1256: LD_INT 3
1258: PUSH
1259: LD_INT 5
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: IN
1266: IFFALSE 1420
// begin case construct_list [ i ] [ 1 ] of b_factory :
1268: LD_VAR 0 2
1272: PUSH
1273: LD_VAR 0 4
1277: ARRAY
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PUSH
1283: LD_INT 3
1285: DOUBLE
1286: EQUAL
1287: IFTRUE 1291
1289: GO 1302
1291: POP
// btype := b_workshop ; b_barracks :
1292: LD_ADDR_VAR 0 5
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
1300: GO 1322
1302: LD_INT 5
1304: DOUBLE
1305: EQUAL
1306: IFTRUE 1310
1308: GO 1321
1310: POP
// btype := b_armoury ; end ;
1311: LD_ADDR_VAR 0 5
1315: PUSH
1316: LD_INT 4
1318: ST_TO_ADDR
1319: GO 1322
1321: POP
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 5 , construct_list [ i ] [ 1 ] ) ) ;
1322: LD_ADDR_VAR 0 2
1326: PUSH
1327: LD_VAR 0 2
1331: PPUSH
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_VAR 0 2
1341: PUSH
1342: LD_VAR 0 4
1346: ARRAY
1347: PPUSH
1348: LD_INT 5
1350: PPUSH
1351: LD_VAR 0 2
1355: PUSH
1356: LD_VAR 0 4
1360: ARRAY
1361: PUSH
1362: LD_INT 1
1364: ARRAY
1365: PPUSH
1366: CALL_OW 1
1370: PPUSH
1371: CALL_OW 1
1375: ST_TO_ADDR
// construct_list := Replace ( construct_list , i , Replace ( construct_list [ i ] , 1 , btype ) ) ;
1376: LD_ADDR_VAR 0 2
1380: PUSH
1381: LD_VAR 0 2
1385: PPUSH
1386: LD_VAR 0 4
1390: PPUSH
1391: LD_VAR 0 2
1395: PUSH
1396: LD_VAR 0 4
1400: ARRAY
1401: PPUSH
1402: LD_INT 1
1404: PPUSH
1405: LD_VAR 0 5
1409: PPUSH
1410: CALL_OW 1
1414: PPUSH
1415: CALL_OW 1
1419: ST_TO_ADDR
// end ;
1420: GO 1238
1422: POP
1423: POP
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union construct_list ) ;
1424: LD_ADDR_EXP 14
1428: PUSH
1429: LD_EXP 14
1433: PPUSH
1434: LD_VAR 0 1
1438: PPUSH
1439: LD_EXP 14
1443: PUSH
1444: LD_VAR 0 1
1448: ARRAY
1449: PUSH
1450: LD_VAR 0 2
1454: UNION
1455: PPUSH
1456: CALL_OW 1
1460: ST_TO_ADDR
// end ;
1461: LD_VAR 0 3
1465: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
1466: LD_INT 0
1468: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , produce_list ) ;
1469: LD_ADDR_EXP 15
1473: PUSH
1474: LD_EXP 15
1478: PPUSH
1479: LD_VAR 0 1
1483: PPUSH
1484: LD_VAR 0 2
1488: PPUSH
1489: CALL_OW 1
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 3
1498: RET
// export function MC_InsertProduceList ( base , components ) ; begin
1499: LD_INT 0
1501: PPUSH
// mc_produce_list := Replace ( mc_produce_list , base , mc_produce_list [ base ] ^ components ) ;
1502: LD_ADDR_EXP 15
1506: PUSH
1507: LD_EXP 15
1511: PPUSH
1512: LD_VAR 0 1
1516: PPUSH
1517: LD_EXP 15
1521: PUSH
1522: LD_VAR 0 1
1526: ARRAY
1527: PUSH
1528: LD_VAR 0 2
1532: ADD
1533: PPUSH
1534: CALL_OW 1
1538: ST_TO_ADDR
// end ;
1539: LD_VAR 0 3
1543: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
1544: LD_INT 0
1546: PPUSH
// mc_defender := Replace ( mc_defender , base , deflist ) ;
1547: LD_ADDR_EXP 17
1551: PUSH
1552: LD_EXP 17
1556: PPUSH
1557: LD_VAR 0 1
1561: PPUSH
1562: LD_VAR 0 2
1566: PPUSH
1567: CALL_OW 1
1571: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
1572: LD_ADDR_EXP 18
1576: PUSH
1577: LD_EXP 18
1581: PPUSH
1582: LD_VAR 0 1
1586: PPUSH
1587: LD_VAR 0 2
1591: PUSH
1592: LD_INT 0
1594: PLUS
1595: PPUSH
1596: CALL_OW 1
1600: ST_TO_ADDR
// end ;
1601: LD_VAR 0 3
1605: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
1606: LD_INT 0
1608: PPUSH
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
1609: LD_ADDR_EXP 18
1613: PUSH
1614: LD_EXP 18
1618: PPUSH
1619: LD_VAR 0 1
1623: PPUSH
1624: LD_VAR 0 2
1628: PPUSH
1629: CALL_OW 1
1633: ST_TO_ADDR
// end ;
1634: LD_VAR 0 3
1638: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; begin
1639: LD_INT 0
1641: PPUSH
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
1642: LD_ADDR_EXP 21
1646: PUSH
1647: LD_EXP 21
1651: PPUSH
1652: LD_VAR 0 1
1656: PUSH
1657: LD_EXP 21
1661: PUSH
1662: LD_VAR 0 1
1666: ARRAY
1667: PUSH
1668: LD_INT 1
1670: PLUS
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PPUSH
1676: LD_VAR 0 1
1680: PUSH
1681: LD_VAR 0 2
1685: PUSH
1686: LD_VAR 0 3
1690: PUSH
1691: LD_VAR 0 4
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: PPUSH
1702: CALL 12900 0 3
1706: ST_TO_ADDR
// end ;
1707: LD_VAR 0 5
1711: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
1712: LD_INT 0
1714: PPUSH
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
1715: LD_ADDR_EXP 22
1719: PUSH
1720: LD_EXP 22
1724: PPUSH
1725: LD_VAR 0 1
1729: PPUSH
1730: LD_VAR 0 2
1734: PPUSH
1735: CALL_OW 1
1739: ST_TO_ADDR
// end ;
1740: LD_VAR 0 3
1744: RET
// export function MC_SetTame ( base , area ) ; begin
1745: LD_INT 0
1747: PPUSH
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
1748: LD_ADDR_EXP 23
1752: PUSH
1753: LD_EXP 23
1757: PPUSH
1758: LD_VAR 0 1
1762: PPUSH
1763: LD_VAR 0 2
1767: PPUSH
1768: CALL_OW 1
1772: ST_TO_ADDR
// end ;
1773: LD_VAR 0 3
1777: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
1778: LD_INT 0
1780: PPUSH
1781: PPUSH
// if not base or not kinds then
1782: LD_VAR 0 1
1786: NOT
1787: PUSH
1788: LD_VAR 0 2
1792: NOT
1793: OR
1794: IFFALSE 1798
// exit ;
1796: GO 1859
// for i in kinds do
1798: LD_ADDR_VAR 0 4
1802: PUSH
1803: LD_VAR 0 2
1807: PUSH
1808: FOR_IN
1809: IFFALSE 1857
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
1811: LD_ADDR_EXP 24
1815: PUSH
1816: LD_EXP 24
1820: PPUSH
1821: LD_VAR 0 1
1825: PUSH
1826: LD_EXP 24
1830: PUSH
1831: LD_VAR 0 1
1835: ARRAY
1836: PUSH
1837: LD_INT 1
1839: PLUS
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PPUSH
1845: LD_VAR 0 4
1849: PPUSH
1850: CALL 12900 0 3
1854: ST_TO_ADDR
1855: GO 1808
1857: POP
1858: POP
// end ;
1859: LD_VAR 0 3
1863: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
1864: LD_INT 0
1866: PPUSH
// if not mc_bases or not base or not areas then
1867: LD_EXP 6
1871: NOT
1872: PUSH
1873: LD_VAR 0 1
1877: NOT
1878: OR
1879: PUSH
1880: LD_VAR 0 2
1884: NOT
1885: OR
1886: IFFALSE 1890
// exit ;
1888: GO 1915
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
1890: LD_ADDR_EXP 25
1894: PUSH
1895: LD_EXP 25
1899: PPUSH
1900: LD_VAR 0 1
1904: PPUSH
1905: LD_VAR 0 2
1909: PPUSH
1910: CALL_OW 1
1914: ST_TO_ADDR
// end ;
1915: LD_VAR 0 3
1919: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
1920: LD_INT 0
1922: PPUSH
// if not mc_bases or not base or not teleports_exit then
1923: LD_EXP 6
1927: NOT
1928: PUSH
1929: LD_VAR 0 1
1933: NOT
1934: OR
1935: PUSH
1936: LD_VAR 0 2
1940: NOT
1941: OR
1942: IFFALSE 1946
// exit ;
1944: GO 1971
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
1946: LD_ADDR_EXP 26
1950: PUSH
1951: LD_EXP 26
1955: PPUSH
1956: LD_VAR 0 1
1960: PPUSH
1961: LD_VAR 0 2
1965: PPUSH
1966: CALL_OW 1
1970: ST_TO_ADDR
// end ;
1971: LD_VAR 0 3
1975: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
1976: LD_INT 0
1978: PPUSH
1979: PPUSH
1980: PPUSH
// if not base or not ext_list then
1981: LD_VAR 0 1
1985: NOT
1986: PUSH
1987: LD_VAR 0 5
1991: NOT
1992: OR
1993: IFFALSE 1997
// exit ;
1995: GO 2170
// tmp := GetFacExtXYD ( x , y , d ) ;
1997: LD_ADDR_VAR 0 8
2001: PUSH
2002: LD_VAR 0 2
2006: PPUSH
2007: LD_VAR 0 3
2011: PPUSH
2012: LD_VAR 0 4
2016: PPUSH
2017: CALL 42288 0 3
2021: ST_TO_ADDR
// if not tmp then
2022: LD_VAR 0 8
2026: NOT
2027: IFFALSE 2031
// exit ;
2029: GO 2170
// for i in tmp do
2031: LD_ADDR_VAR 0 7
2035: PUSH
2036: LD_VAR 0 8
2040: PUSH
2041: FOR_IN
2042: IFFALSE 2168
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
2044: LD_ADDR_EXP 14
2048: PUSH
2049: LD_EXP 14
2053: PPUSH
2054: LD_VAR 0 1
2058: PPUSH
2059: LD_EXP 14
2063: PUSH
2064: LD_VAR 0 1
2068: ARRAY
2069: PPUSH
2070: LD_EXP 14
2074: PUSH
2075: LD_VAR 0 1
2079: ARRAY
2080: PUSH
2081: LD_INT 1
2083: PLUS
2084: PPUSH
2085: LD_VAR 0 5
2089: PUSH
2090: LD_INT 1
2092: ARRAY
2093: PUSH
2094: LD_VAR 0 7
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PUSH
2103: LD_VAR 0 7
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PUSH
2112: LD_VAR 0 7
2116: PUSH
2117: LD_INT 3
2119: ARRAY
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: PPUSH
2127: CALL_OW 2
2131: PPUSH
2132: CALL_OW 1
2136: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
2137: LD_ADDR_VAR 0 5
2141: PUSH
2142: LD_VAR 0 5
2146: PPUSH
2147: LD_INT 1
2149: PPUSH
2150: CALL_OW 3
2154: ST_TO_ADDR
// if not ext_list then
2155: LD_VAR 0 5
2159: NOT
2160: IFFALSE 2166
// exit ;
2162: POP
2163: POP
2164: GO 2170
// end ;
2166: GO 2041
2168: POP
2169: POP
// end ;
2170: LD_VAR 0 6
2174: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
2175: LD_INT 0
2177: PPUSH
// if not mc_bases or not base or not weapon_list then
2178: LD_EXP 6
2182: NOT
2183: PUSH
2184: LD_VAR 0 1
2188: NOT
2189: OR
2190: PUSH
2191: LD_VAR 0 2
2195: NOT
2196: OR
2197: IFFALSE 2201
// exit ;
2199: GO 2226
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
2201: LD_ADDR_EXP 27
2205: PUSH
2206: LD_EXP 27
2210: PPUSH
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 2
2220: PPUSH
2221: CALL_OW 1
2225: ST_TO_ADDR
// end ;
2226: LD_VAR 0 3
2230: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
2231: LD_INT 0
2233: PPUSH
// if not mc_bases or not base or not tech_list then
2234: LD_EXP 6
2238: NOT
2239: PUSH
2240: LD_VAR 0 1
2244: NOT
2245: OR
2246: PUSH
2247: LD_VAR 0 2
2251: NOT
2252: OR
2253: IFFALSE 2257
// exit ;
2255: GO 2282
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
2257: LD_ADDR_EXP 20
2261: PUSH
2262: LD_EXP 20
2266: PPUSH
2267: LD_VAR 0 1
2271: PPUSH
2272: LD_VAR 0 2
2276: PPUSH
2277: CALL_OW 1
2281: ST_TO_ADDR
// end ;
2282: LD_VAR 0 3
2286: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
2287: LD_INT 0
2289: PPUSH
// if not parking_area or not base then
2290: LD_VAR 0 2
2294: NOT
2295: PUSH
2296: LD_VAR 0 1
2300: NOT
2301: OR
2302: IFFALSE 2306
// exit ;
2304: GO 2331
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
2306: LD_ADDR_EXP 28
2310: PUSH
2311: LD_EXP 28
2315: PPUSH
2316: LD_VAR 0 1
2320: PPUSH
2321: LD_VAR 0 2
2325: PPUSH
2326: CALL_OW 1
2330: ST_TO_ADDR
// end ;
2331: LD_VAR 0 3
2335: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
2336: LD_INT 0
2338: PPUSH
// if not base or not scan_area then
2339: LD_VAR 0 1
2343: NOT
2344: PUSH
2345: LD_VAR 0 2
2349: NOT
2350: OR
2351: IFFALSE 2355
// exit ;
2353: GO 2380
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
2355: LD_ADDR_EXP 29
2359: PUSH
2360: LD_EXP 29
2364: PPUSH
2365: LD_VAR 0 1
2369: PPUSH
2370: LD_VAR 0 2
2374: PPUSH
2375: CALL_OW 1
2379: ST_TO_ADDR
// end ; end_of_file
2380: LD_VAR 0 3
2384: RET
// export function MC_Monitor ( ) ; var i , active_players ; begin
2385: LD_INT 0
2387: PPUSH
2388: PPUSH
2389: PPUSH
// while mc_active do
2390: LD_EXP 4
2394: IFFALSE 2504
// begin wait ( 0 0$1 ) ;
2396: LD_INT 35
2398: PPUSH
2399: CALL_OW 67
// active_players := 0 ;
2403: LD_ADDR_VAR 0 3
2407: PUSH
2408: LD_INT 0
2410: ST_TO_ADDR
// for i := 1 to mc_bases do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: DOUBLE
2417: LD_INT 1
2419: DEC
2420: ST_TO_ADDR
2421: LD_EXP 6
2425: PUSH
2426: FOR_TO
2427: IFFALSE 2485
// begin if MC_Exist ( i ) then
2429: LD_VAR 0 2
2433: PPUSH
2434: CALL 6421 0 1
2438: IFFALSE 2483
// begin MCE_SailEventCustom ( mce_monitor_base , i , 0 , 0 , 0 , 0 , 0 ) ;
2440: LD_EXP 2
2444: PPUSH
2445: LD_VAR 0 2
2449: PPUSH
2450: LD_INT 0
2452: PPUSH
2453: LD_INT 0
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL 4715 0 7
// active_players := active_players + 1 ;
2469: LD_ADDR_VAR 0 3
2473: PUSH
2474: LD_VAR 0 3
2478: PUSH
2479: LD_INT 1
2481: PLUS
2482: ST_TO_ADDR
// end ; end ;
2483: GO 2426
2485: POP
2486: POP
// if not active_players then
2487: LD_VAR 0 3
2491: NOT
2492: IFFALSE 2502
// mc_active := false ;
2494: LD_ADDR_EXP 4
2498: PUSH
2499: LD_INT 0
2501: ST_TO_ADDR
// end ;
2502: GO 2390
// end ;
2504: LD_VAR 0 1
2508: RET
// export function MC_MonitorBase ( base ) ; begin
2509: LD_INT 0
2511: PPUSH
// if not mc_people [ base ] then
2512: LD_EXP 9
2516: PUSH
2517: LD_VAR 0 1
2521: ARRAY
2522: NOT
2523: IFFALSE 2548
// mc_bases := Replace ( mc_bases , base , 0 ) ;
2525: LD_ADDR_EXP 6
2529: PUSH
2530: LD_EXP 6
2534: PPUSH
2535: LD_VAR 0 1
2539: PPUSH
2540: LD_INT 0
2542: PPUSH
2543: CALL_OW 1
2547: ST_TO_ADDR
// mc_danger := Replace ( mc_danger , base , DangerInArea ( mc_bases [ base ] , mc_scan_area [ base ] ) ) ;
2548: LD_ADDR_EXP 30
2552: PUSH
2553: LD_EXP 30
2557: PPUSH
2558: LD_VAR 0 1
2562: PPUSH
2563: LD_EXP 6
2567: PUSH
2568: LD_VAR 0 1
2572: ARRAY
2573: PPUSH
2574: LD_EXP 29
2578: PUSH
2579: LD_VAR 0 1
2583: ARRAY
2584: PPUSH
2585: CALL 15552 0 2
2589: PPUSH
2590: CALL_OW 1
2594: ST_TO_ADDR
// if mc_danger [ base ] then
2595: LD_EXP 30
2599: PUSH
2600: LD_VAR 0 1
2604: ARRAY
2605: IFFALSE 2618
// MC_Defend ( base ) else
2607: LD_VAR 0 1
2611: PPUSH
2612: CALL 2632 0 1
2616: GO 2627
// MC_TaskManager ( base ) ;
2618: LD_VAR 0 1
2622: PPUSH
2623: CALL 2694 0 1
// end ;
2627: LD_VAR 0 2
2631: RET
// export function MC_Defend ( base ) ; var defender_vehicles ; begin
2632: LD_INT 0
2634: PPUSH
2635: PPUSH
// if mc_defense_status [ base ] then
2636: LD_EXP 16
2640: PUSH
2641: LD_VAR 0 1
2645: ARRAY
2646: IFFALSE 2650
// exit ;
2648: GO 2689
// mc_defense_status := Replace ( mc_defense_status , base , true ) ;
2650: LD_ADDR_EXP 16
2654: PUSH
2655: LD_EXP 16
2659: PPUSH
2660: LD_VAR 0 1
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 1
2672: ST_TO_ADDR
// defender_vehicles := mc_defender [ base ] ;
2673: LD_ADDR_VAR 0 3
2677: PUSH
2678: LD_EXP 17
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ST_TO_ADDR
// end ;
2689: LD_VAR 0 2
2693: RET
// export function MC_TaskManager ( base ) ; var crates_list ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
// MC_CollectCrates ( base , GetListOfCratesInArea ( mc_crates_area [ base ] ) ) ;
2698: LD_VAR 0 1
2702: PPUSH
2703: LD_EXP 25
2707: PUSH
2708: LD_VAR 0 1
2712: ARRAY
2713: PPUSH
2714: CALL_OW 435
2718: PPUSH
2719: CALL 2737 0 2
// MC_Build ( base ) ;
2723: LD_VAR 0 1
2727: PPUSH
2728: CALL 4083 0 1
// end ;
2732: LD_VAR 0 2
2736: RET
// export function MC_CollectCrates ( base , crates ) ; var i , j , amount , cargo_bays , apes , engs , collectors , number_of_crates , driver , drivers , depot , mechanic_used ; begin
2737: LD_INT 0
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
2744: PPUSH
2745: PPUSH
2746: PPUSH
2747: PPUSH
2748: PPUSH
2749: PPUSH
2750: PPUSH
2751: PPUSH
// if MCTM_HasActiveTask ( base , mctm_collect_crates ) or not crates or not MC_GetDepot ( base ) then
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_EXP 36
2761: PPUSH
2762: CALL 7775 0 2
2766: PUSH
2767: LD_VAR 0 2
2771: NOT
2772: OR
2773: PUSH
2774: LD_VAR 0 1
2778: PPUSH
2779: CALL 7396 0 1
2783: NOT
2784: OR
2785: IFFALSE 2789
// exit ;
2787: GO 4078
// MCTM_SetActiveTask ( base , mctm_collect_crates ) ;
2789: LD_VAR 0 1
2793: PPUSH
2794: LD_EXP 36
2798: PPUSH
2799: CALL 7805 0 2
// collectors := [ ] ;
2803: LD_ADDR_VAR 0 10
2807: PUSH
2808: EMPTY
2809: ST_TO_ADDR
// cargo_bays := GetCargoBay ( mc_vehicles [ base ] ) ;
2810: LD_ADDR_VAR 0 7
2814: PUSH
2815: LD_EXP 11
2819: PUSH
2820: LD_VAR 0 1
2824: ARRAY
2825: PPUSH
2826: CALL 45911 0 1
2830: ST_TO_ADDR
// if cargo_bays then
2831: LD_VAR 0 7
2835: IFFALSE 3516
// begin collectors := collectors union cargo_bays ;
2837: LD_ADDR_VAR 0 10
2841: PUSH
2842: LD_VAR 0 10
2846: PUSH
2847: LD_VAR 0 7
2851: UNION
2852: ST_TO_ADDR
// while crates and collectors do
2853: LD_VAR 0 2
2857: PUSH
2858: LD_VAR 0 10
2862: AND
2863: IFFALSE 3413
// begin wait ( 0 0$1 ) ;
2865: LD_INT 35
2867: PPUSH
2868: CALL_OW 67
// for i in collectors do
2872: LD_ADDR_VAR 0 4
2876: PUSH
2877: LD_VAR 0 10
2881: PUSH
2882: FOR_IN
2883: IFFALSE 3409
// begin driver := 0 ;
2885: LD_ADDR_VAR 0 12
2889: PUSH
2890: LD_INT 0
2892: ST_TO_ADDR
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
2893: LD_VAR 0 4
2897: PPUSH
2898: CALL_OW 263
2902: PUSH
2903: LD_INT 1
2905: EQUAL
2906: PUSH
2907: LD_VAR 0 4
2911: PPUSH
2912: CALL_OW 311
2916: NOT
2917: AND
2918: IFFALSE 3102
// begin driver := MC_GetOneByClass ( base , 3 , mct_none ) ;
2920: LD_ADDR_VAR 0 12
2924: PUSH
2925: LD_VAR 0 1
2929: PPUSH
2930: LD_INT 3
2932: PPUSH
2933: LD_EXP 31
2937: PPUSH
2938: CALL 7302 0 3
2942: ST_TO_ADDR
// if not driver then
2943: LD_VAR 0 12
2947: NOT
2948: IFFALSE 3017
// begin driver := MC_GetBestForClass ( base , 3 , 1 ) ;
2950: LD_ADDR_VAR 0 12
2954: PUSH
2955: LD_VAR 0 1
2959: PPUSH
2960: LD_INT 3
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: CALL 6461 0 3
2970: ST_TO_ADDR
// if driver then
2971: LD_VAR 0 12
2975: IFFALSE 3017
// begin driver := driver [ 1 ] ;
2977: LD_ADDR_VAR 0 12
2981: PUSH
2982: LD_VAR 0 12
2986: PUSH
2987: LD_INT 1
2989: ARRAY
2990: ST_TO_ADDR
// MC_ChangeClass ( base , 3 , driver ) ;
2991: LD_VAR 0 1
2995: PPUSH
2996: LD_INT 3
2998: PPUSH
2999: LD_VAR 0 12
3003: PPUSH
3004: CALL 6691 0 3
// AddComExitBuilding ( driver ) ;
3008: LD_VAR 0 12
3012: PPUSH
3013: CALL_OW 182
// end ; end ; if IsInUnit ( driver ) then
3017: LD_VAR 0 12
3021: PPUSH
3022: CALL_OW 310
3026: IFFALSE 3037
// ComExit ( driver ) ;
3028: LD_VAR 0 12
3032: PPUSH
3033: CALL 45040 0 1
// SetTag ( driver , mct_collect_crates ) ;
3037: LD_VAR 0 12
3041: PPUSH
3042: LD_EXP 34
3046: PPUSH
3047: CALL_OW 109
// if GetLives ( i ) < 1000 then
3051: LD_VAR 0 4
3055: PPUSH
3056: CALL_OW 256
3060: PUSH
3061: LD_INT 1000
3063: LESS
3064: IFFALSE 3080
// AddComRepairVehicle ( driver , i ) ;
3066: LD_VAR 0 12
3070: PPUSH
3071: LD_VAR 0 4
3075: PPUSH
3076: CALL_OW 189
// AddComEnterUnit ( driver , i ) ;
3080: LD_VAR 0 12
3084: PPUSH
3085: LD_VAR 0 4
3089: PPUSH
3090: CALL_OW 180
// mechanic_used := true ;
3094: LD_ADDR_VAR 0 15
3098: PUSH
3099: LD_INT 1
3101: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) ;
3102: LD_INT 35
3104: PPUSH
3105: CALL_OW 67
// if IsDead ( i ) then
3109: LD_VAR 0 4
3113: PPUSH
3114: CALL_OW 301
3118: IFFALSE 3138
// begin collectors := collectors diff i ;
3120: LD_ADDR_VAR 0 10
3124: PUSH
3125: LD_VAR 0 10
3129: PUSH
3130: LD_VAR 0 4
3134: DIFF
3135: ST_TO_ADDR
// continue ;
3136: GO 3102
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 20 then
3138: LD_VAR 0 4
3142: PPUSH
3143: CALL_OW 262
3147: PUSH
3148: LD_INT 1
3150: EQUAL
3151: PUSH
3152: LD_VAR 0 4
3156: PPUSH
3157: CALL_OW 261
3161: PUSH
3162: LD_INT 20
3164: LESS
3165: AND
3166: IFFALSE 3227
// begin depot := NearestUnitToUnit ( MC_GetDepot ( base ) , i ) ;
3168: LD_ADDR_VAR 0 14
3172: PUSH
3173: LD_VAR 0 1
3177: PPUSH
3178: CALL 7396 0 1
3182: PPUSH
3183: LD_VAR 0 4
3187: PPUSH
3188: CALL_OW 74
3192: ST_TO_ADDR
// if GetDistUnits ( i , depot ) < 6 then
3193: LD_VAR 0 4
3197: PPUSH
3198: LD_VAR 0 14
3202: PPUSH
3203: CALL_OW 296
3207: PUSH
3208: LD_INT 6
3210: LESS
3211: IFFALSE 3227
// ComMoveUnit ( i , depot ) ;
3213: LD_VAR 0 4
3217: PPUSH
3218: LD_VAR 0 14
3222: PPUSH
3223: CALL_OW 112
// end ; if GetControl ( i ) = control_manual then
3227: LD_VAR 0 4
3231: PPUSH
3232: CALL_OW 263
3236: PUSH
3237: LD_INT 1
3239: EQUAL
3240: IFFALSE 3305
// begin if not driver then
3242: LD_VAR 0 12
3246: NOT
3247: IFFALSE 3264
// driver := IsDrivenBy ( i ) ;
3249: LD_ADDR_VAR 0 12
3253: PUSH
3254: LD_VAR 0 4
3258: PPUSH
3259: CALL_OW 311
3263: ST_TO_ADDR
// if not HasTask ( driver ) then
3264: LD_VAR 0 12
3268: PPUSH
3269: CALL_OW 314
3273: NOT
3274: IFFALSE 3303
// ComCollect ( driver , crates [ 1 ] , crates [ 2 ] ) ;
3276: LD_VAR 0 12
3280: PPUSH
3281: LD_VAR 0 2
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 2
3294: PUSH
3295: LD_INT 2
3297: ARRAY
3298: PPUSH
3299: CALL_OW 117
// end else
3303: GO 3344
// if not HasTask ( i ) then
3305: LD_VAR 0 4
3309: PPUSH
3310: CALL_OW 314
3314: NOT
3315: IFFALSE 3344
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3317: LD_VAR 0 4
3321: PPUSH
3322: LD_VAR 0 2
3326: PUSH
3327: LD_INT 1
3329: ARRAY
3330: PPUSH
3331: LD_VAR 0 2
3335: PUSH
3336: LD_INT 2
3338: ARRAY
3339: PPUSH
3340: CALL_OW 117
// until not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3344: LD_VAR 0 2
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: PPUSH
3353: LD_VAR 0 2
3357: PUSH
3358: LD_INT 2
3360: ARRAY
3361: PPUSH
3362: CALL_OW 284
3366: NOT
3367: IFFALSE 3102
// for j := 1 to 2 do
3369: LD_ADDR_VAR 0 5
3373: PUSH
3374: DOUBLE
3375: LD_INT 1
3377: DEC
3378: ST_TO_ADDR
3379: LD_INT 2
3381: PUSH
3382: FOR_TO
3383: IFFALSE 3405
// crates := Delete ( crates , 1 ) ;
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: LD_VAR 0 2
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL_OW 3
3402: ST_TO_ADDR
3403: GO 3382
3405: POP
3406: POP
// end ;
3407: GO 2882
3409: POP
3410: POP
// end ;
3411: GO 2853
// if mechanic_used then
3413: LD_VAR 0 15
3417: IFFALSE 3514
// begin repeat wait ( 0 0$1 ) ;
3419: LD_INT 35
3421: PPUSH
3422: CALL_OW 67
// until not GetCargo ( collectors , mat_cans ) or not collectors ;
3426: LD_VAR 0 10
3430: PPUSH
3431: LD_INT 1
3433: PPUSH
3434: CALL_OW 289
3438: NOT
3439: PUSH
3440: LD_VAR 0 10
3444: NOT
3445: OR
3446: IFFALSE 3419
// drivers := MCT_ResetTag ( base , mct_collect_crates ) ;
3448: LD_ADDR_VAR 0 13
3452: PUSH
3453: LD_VAR 0 1
3457: PPUSH
3458: LD_EXP 34
3462: PPUSH
3463: CALL 6306 0 2
3467: ST_TO_ADDR
// if drivers then
3468: LD_VAR 0 13
3472: IFFALSE 3500
// for i in drivers do
3474: LD_ADDR_VAR 0 4
3478: PUSH
3479: LD_VAR 0 13
3483: PUSH
3484: FOR_IN
3485: IFFALSE 3498
// ComExit ( i ) ;
3487: LD_VAR 0 4
3491: PPUSH
3492: CALL 45040 0 1
3496: GO 3484
3498: POP
3499: POP
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3500: LD_VAR 0 1
3504: PPUSH
3505: LD_EXP 36
3509: PPUSH
3510: CALL 7869 0 2
// end ; end else
3514: GO 4078
// begin apes := MC_GetByClass ( base , class_apeman_engineer , mct_none ) ;
3516: LD_ADDR_VAR 0 8
3520: PUSH
3521: LD_VAR 0 1
3525: PPUSH
3526: LD_INT 16
3528: PPUSH
3529: LD_EXP 31
3533: PPUSH
3534: CALL 7199 0 3
3538: ST_TO_ADDR
// if apes then
3539: LD_VAR 0 8
3543: IFFALSE 3561
// collectors := collectors union apes ;
3545: LD_ADDR_VAR 0 10
3549: PUSH
3550: LD_VAR 0 10
3554: PUSH
3555: LD_VAR 0 8
3559: UNION
3560: ST_TO_ADDR
// engs := MC_GetByClass ( base , class_engineer , mct_none ) ;
3561: LD_ADDR_VAR 0 9
3565: PUSH
3566: LD_VAR 0 1
3570: PPUSH
3571: LD_INT 2
3573: PPUSH
3574: LD_EXP 31
3578: PPUSH
3579: CALL 7199 0 3
3583: ST_TO_ADDR
// if engs then
3584: LD_VAR 0 9
3588: IFFALSE 3606
// collectors := collectors union engs ;
3590: LD_ADDR_VAR 0 10
3594: PUSH
3595: LD_VAR 0 10
3599: PUSH
3600: LD_VAR 0 9
3604: UNION
3605: ST_TO_ADDR
// if not collectors then
3606: LD_VAR 0 10
3610: NOT
3611: IFFALSE 3711
// begin engs := MC_GetBestForClass ( base , 2 , 3 ) ;
3613: LD_ADDR_VAR 0 9
3617: PUSH
3618: LD_VAR 0 1
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: LD_INT 3
3628: PPUSH
3629: CALL 6461 0 3
3633: ST_TO_ADDR
// if engs then
3634: LD_VAR 0 9
3638: IFFALSE 3657
// MC_ChangeClass ( base , 2 , engs ) ;
3640: LD_VAR 0 1
3644: PPUSH
3645: LD_INT 2
3647: PPUSH
3648: LD_VAR 0 9
3652: PPUSH
3653: CALL 6691 0 3
// repeat wait ( 0 0$1 ) ;
3657: LD_INT 35
3659: PPUSH
3660: CALL_OW 67
// if not UnitFilter ( engs , [ f_ok ] ) then
3664: LD_VAR 0 9
3668: PPUSH
3669: LD_INT 50
3671: PUSH
3672: EMPTY
3673: LIST
3674: PPUSH
3675: CALL_OW 72
3679: NOT
3680: IFFALSE 3684
// break ;
3682: GO 3711
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
3684: LD_VAR 0 9
3688: PPUSH
3689: LD_INT 25
3691: PUSH
3692: LD_INT 2
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 72
3703: PUSH
3704: LD_VAR 0 9
3708: EQUAL
3709: IFFALSE 3657
// end ; if not collectors then
3711: LD_VAR 0 10
3715: NOT
3716: IFFALSE 3734
// begin MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3718: LD_VAR 0 1
3722: PPUSH
3723: LD_EXP 36
3727: PPUSH
3728: CALL 7869 0 2
// exit ;
3732: GO 4078
// end ; if collectors > 5 then
3734: LD_VAR 0 10
3738: PUSH
3739: LD_INT 5
3741: GREATER
3742: IFFALSE 3798
// for i := collectors downto 5 do
3744: LD_ADDR_VAR 0 4
3748: PUSH
3749: DOUBLE
3750: LD_VAR 0 10
3754: INC
3755: ST_TO_ADDR
3756: LD_INT 5
3758: PUSH
3759: FOR_DOWNTO
3760: IFFALSE 3796
// begin SetTag ( i , 0 ) ;
3762: LD_VAR 0 4
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL_OW 109
// collectors := Delete ( collectors , i ) ;
3774: LD_ADDR_VAR 0 10
3778: PUSH
3779: LD_VAR 0 10
3783: PPUSH
3784: LD_VAR 0 4
3788: PPUSH
3789: CALL_OW 3
3793: ST_TO_ADDR
// end ;
3794: GO 3759
3796: POP
3797: POP
// ComExitAll ( collectors ) ;
3798: LD_VAR 0 10
3802: PPUSH
3803: CALL 45123 0 1
// MCT_SetTag ( collectors , mct_collect_crates ) ;
3807: LD_VAR 0 10
3811: PPUSH
3812: LD_EXP 34
3816: PPUSH
3817: CALL 6372 0 2
// while crates and collectors do
3821: LD_VAR 0 2
3825: PUSH
3826: LD_VAR 0 10
3830: AND
3831: IFFALSE 4050
// begin wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// amount := GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3840: LD_ADDR_VAR 0 6
3844: PUSH
3845: LD_VAR 0 2
3849: PUSH
3850: LD_INT 1
3852: ARRAY
3853: PPUSH
3854: LD_VAR 0 2
3858: PUSH
3859: LD_INT 2
3861: ARRAY
3862: PPUSH
3863: CALL_OW 284
3867: ST_TO_ADDR
// j := 0 ;
3868: LD_ADDR_VAR 0 5
3872: PUSH
3873: LD_INT 0
3875: ST_TO_ADDR
// for i in collectors do
3876: LD_ADDR_VAR 0 4
3880: PUSH
3881: LD_VAR 0 10
3885: PUSH
3886: FOR_IN
3887: IFFALSE 3983
// begin if IsDead ( i ) then
3889: LD_VAR 0 4
3893: PPUSH
3894: CALL_OW 301
3898: IFFALSE 3916
// collectors := collectors diff i ;
3900: LD_ADDR_VAR 0 10
3904: PUSH
3905: LD_VAR 0 10
3909: PUSH
3910: LD_VAR 0 4
3914: DIFF
3915: ST_TO_ADDR
// if j < amount and not HasTask ( i ) then
3916: LD_VAR 0 5
3920: PUSH
3921: LD_VAR 0 6
3925: LESS
3926: PUSH
3927: LD_VAR 0 4
3931: PPUSH
3932: CALL_OW 314
3936: NOT
3937: AND
3938: IFFALSE 3981
// begin j := j + 1 ;
3940: LD_ADDR_VAR 0 5
3944: PUSH
3945: LD_VAR 0 5
3949: PUSH
3950: LD_INT 1
3952: PLUS
3953: ST_TO_ADDR
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3954: LD_VAR 0 4
3958: PPUSH
3959: LD_VAR 0 2
3963: PUSH
3964: LD_INT 1
3966: ARRAY
3967: PPUSH
3968: LD_VAR 0 2
3972: PUSH
3973: LD_INT 2
3975: ARRAY
3976: PPUSH
3977: CALL_OW 117
// end ; end ;
3981: GO 3886
3983: POP
3984: POP
// if not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) then
3985: LD_VAR 0 2
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_VAR 0 2
3998: PUSH
3999: LD_INT 2
4001: ARRAY
4002: PPUSH
4003: CALL_OW 284
4007: NOT
4008: IFFALSE 4048
// for j := 1 to 2 do
4010: LD_ADDR_VAR 0 5
4014: PUSH
4015: DOUBLE
4016: LD_INT 1
4018: DEC
4019: ST_TO_ADDR
4020: LD_INT 2
4022: PUSH
4023: FOR_TO
4024: IFFALSE 4046
// crates := Delete ( crates , 1 ) ;
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: LD_VAR 0 2
4035: PPUSH
4036: LD_INT 1
4038: PPUSH
4039: CALL_OW 3
4043: ST_TO_ADDR
4044: GO 4023
4046: POP
4047: POP
// end ;
4048: GO 3821
// MCT_ResetTag ( base , mct_collect_crates ) ;
4050: LD_VAR 0 1
4054: PPUSH
4055: LD_EXP 34
4059: PPUSH
4060: CALL 6306 0 2
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_EXP 36
4073: PPUSH
4074: CALL 7869 0 2
// end ; end ;
4078: LD_VAR 0 3
4082: RET
// export function MC_Build ( base ) ; var depot , btype , x , y , d , engs ; begin
4083: LD_INT 0
4085: PPUSH
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
4090: PPUSH
4091: PPUSH
// if MCTM_HasActiveTask ( base , mctm_build ) or not mc_build_list [ base ] or not MC_GetDepot ( base ) then
4092: LD_VAR 0 1
4096: PPUSH
4097: LD_EXP 37
4101: PPUSH
4102: CALL 7775 0 2
4106: PUSH
4107: LD_EXP 14
4111: PUSH
4112: LD_VAR 0 1
4116: ARRAY
4117: NOT
4118: OR
4119: PUSH
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL 7396 0 1
4129: NOT
4130: OR
4131: IFFALSE 4135
// exit ;
4133: GO 4686
// MCTM_SetActiveTask ( base , mctm_build ) ;
4135: LD_VAR 0 1
4139: PPUSH
4140: LD_EXP 37
4144: PPUSH
4145: CALL 7805 0 2
// engs := MC_GetByClass ( base , 2 , mct_none ) ;
4149: LD_ADDR_VAR 0 8
4153: PUSH
4154: LD_VAR 0 1
4158: PPUSH
4159: LD_INT 2
4161: PPUSH
4162: LD_EXP 31
4166: PPUSH
4167: CALL 7199 0 3
4171: ST_TO_ADDR
// if not engs then
4172: LD_VAR 0 8
4176: NOT
4177: IFFALSE 4289
// begin engs := MC_GetBestForClass ( base , 2 , 6 ) ;
4179: LD_ADDR_VAR 0 8
4183: PUSH
4184: LD_VAR 0 1
4188: PPUSH
4189: LD_INT 2
4191: PPUSH
4192: LD_INT 6
4194: PPUSH
4195: CALL 6461 0 3
4199: ST_TO_ADDR
// if not engs then
4200: LD_VAR 0 8
4204: NOT
4205: IFFALSE 4223
// begin MCTM_DeleteActiveTask ( base , mctm_build ) ;
4207: LD_VAR 0 1
4211: PPUSH
4212: LD_EXP 37
4216: PPUSH
4217: CALL 7869 0 2
// exit ;
4221: GO 4686
// end ; MC_ChangeClass ( base , 2 , engs ) ;
4223: LD_VAR 0 1
4227: PPUSH
4228: LD_INT 2
4230: PPUSH
4231: LD_VAR 0 8
4235: PPUSH
4236: CALL 6691 0 3
// repeat wait ( 0 0$1 ) ;
4240: LD_INT 35
4242: PPUSH
4243: CALL_OW 67
// if not mc_people [ base ] then
4247: LD_EXP 9
4251: PUSH
4252: LD_VAR 0 1
4256: ARRAY
4257: NOT
4258: IFFALSE 4262
// exit ;
4260: GO 4686
// until UnitFilter ( engs , [ f_class , 2 ] ) = engs ;
4262: LD_VAR 0 8
4266: PPUSH
4267: LD_INT 25
4269: PUSH
4270: LD_INT 2
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PPUSH
4277: CALL_OW 72
4281: PUSH
4282: LD_VAR 0 8
4286: EQUAL
4287: IFFALSE 4240
// end ; ComExitAll ( engs ) ;
4289: LD_VAR 0 8
4293: PPUSH
4294: CALL 45123 0 1
// MCT_SetTag ( engs , mct_build ) ;
4298: LD_VAR 0 8
4302: PPUSH
4303: LD_EXP 33
4307: PPUSH
4308: CALL 6372 0 2
// btype := mc_build_list [ base ] [ 1 ] [ 1 ] ;
4312: LD_ADDR_VAR 0 4
4316: PUSH
4317: LD_EXP 14
4321: PUSH
4322: LD_VAR 0 1
4326: ARRAY
4327: PUSH
4328: LD_INT 1
4330: ARRAY
4331: PUSH
4332: LD_INT 1
4334: ARRAY
4335: ST_TO_ADDR
// x := mc_build_list [ base ] [ 1 ] [ 2 ] ;
4336: LD_ADDR_VAR 0 5
4340: PUSH
4341: LD_EXP 14
4345: PUSH
4346: LD_VAR 0 1
4350: ARRAY
4351: PUSH
4352: LD_INT 1
4354: ARRAY
4355: PUSH
4356: LD_INT 2
4358: ARRAY
4359: ST_TO_ADDR
// y := mc_build_list [ base ] [ 1 ] [ 3 ] ;
4360: LD_ADDR_VAR 0 6
4364: PUSH
4365: LD_EXP 14
4369: PUSH
4370: LD_VAR 0 1
4374: ARRAY
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: PUSH
4380: LD_INT 3
4382: ARRAY
4383: ST_TO_ADDR
// d := mc_build_list [ base ] [ 1 ] [ 4 ] ;
4384: LD_ADDR_VAR 0 7
4388: PUSH
4389: LD_EXP 14
4393: PUSH
4394: LD_VAR 0 1
4398: ARRAY
4399: PUSH
4400: LD_INT 1
4402: ARRAY
4403: PUSH
4404: LD_INT 4
4406: ARRAY
4407: ST_TO_ADDR
// if GetType ( HexInfo ( x , y ) ) = unit_building then
4408: LD_VAR 0 5
4412: PPUSH
4413: LD_VAR 0 6
4417: PPUSH
4418: CALL_OW 428
4422: PPUSH
4423: CALL_OW 247
4427: PUSH
4428: LD_INT 3
4430: EQUAL
4431: IFFALSE 4466
// begin wait ( 0 0$1 ) ;
4433: LD_INT 35
4435: PPUSH
4436: CALL_OW 67
// ComComplete ( engs , HexInfo ( x , y ) ) ;
4440: LD_VAR 0 8
4444: PPUSH
4445: LD_VAR 0 5
4449: PPUSH
4450: LD_VAR 0 6
4454: PPUSH
4455: CALL_OW 428
4459: PPUSH
4460: CALL 15763 0 2
// end else
4464: GO 4686
// begin depot := NearestUnitToXY ( MC_GetDepot ( base ) , x , y ) ;
4466: LD_ADDR_VAR 0 3
4470: PUSH
4471: LD_VAR 0 1
4475: PPUSH
4476: CALL 7396 0 1
4480: PPUSH
4481: LD_VAR 0 5
4485: PPUSH
4486: LD_VAR 0 6
4490: PPUSH
4491: CALL_OW 73
4495: ST_TO_ADDR
// if not HexInfo ( x , y ) and CanBeBuilt ( depot , btype , x , y , d ) then
4496: LD_VAR 0 5
4500: PPUSH
4501: LD_VAR 0 6
4505: PPUSH
4506: CALL_OW 428
4510: NOT
4511: PUSH
4512: LD_VAR 0 3
4516: PPUSH
4517: LD_VAR 0 4
4521: PPUSH
4522: LD_VAR 0 5
4526: PPUSH
4527: LD_VAR 0 6
4531: PPUSH
4532: LD_VAR 0 7
4536: PPUSH
4537: CALL 21004 0 5
4541: AND
4542: IFFALSE 4575
// ComBuild ( engs , btype , x , y , d ) else
4544: LD_VAR 0 8
4548: PPUSH
4549: LD_VAR 0 4
4553: PPUSH
4554: LD_VAR 0 5
4558: PPUSH
4559: LD_VAR 0 6
4563: PPUSH
4564: LD_VAR 0 7
4568: PPUSH
4569: CALL_OW 145
4573: GO 4686
// begin if GetType ( HexInfo ( x , y ) ) <> unit_building then
4575: LD_VAR 0 5
4579: PPUSH
4580: LD_VAR 0 6
4584: PPUSH
4585: CALL_OW 428
4589: PPUSH
4590: CALL_OW 247
4594: PUSH
4595: LD_INT 3
4597: NONEQUAL
4598: IFFALSE 4658
// begin TryClearPlaceForBuilding ( btype , x , y , d , mc_buildings [ base ] , engs , mc_parking [ base ] ) ;
4600: LD_VAR 0 4
4604: PPUSH
4605: LD_VAR 0 5
4609: PPUSH
4610: LD_VAR 0 6
4614: PPUSH
4615: LD_VAR 0 7
4619: PPUSH
4620: LD_EXP 10
4624: PUSH
4625: LD_VAR 0 1
4629: ARRAY
4630: PPUSH
4631: LD_VAR 0 8
4635: PPUSH
4636: LD_EXP 28
4640: PUSH
4641: LD_VAR 0 1
4645: ARRAY
4646: PPUSH
4647: CALL 19754 0 7
// wait ( 0 0$10 ) ;
4651: LD_INT 350
4653: PPUSH
4654: CALL_OW 67
// end ; MCTM_DeleteActiveTask ( base , mctm_build ) ;
4658: LD_VAR 0 1
4662: PPUSH
4663: LD_EXP 37
4667: PPUSH
4668: CALL 7869 0 2
// MCT_ResetTag ( base , mctm_build ) ;
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_EXP 37
4681: PPUSH
4682: CALL 6306 0 2
// end ; end ; end ; end_of_file
4686: LD_VAR 0 2
4690: RET
// export mce_start , mce_monitor_base , mce_ ; export function MCE_InitEvents ( ) ; begin
4691: LD_INT 0
4693: PPUSH
// mce_start := 1 ;
4694: LD_ADDR_EXP 1
4698: PUSH
4699: LD_INT 1
4701: ST_TO_ADDR
// mce_monitor_base := 2 ;
4702: LD_ADDR_EXP 2
4706: PUSH
4707: LD_INT 2
4709: ST_TO_ADDR
// end ;
4710: LD_VAR 0 1
4714: RET
// export function MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4715: LD_INT 0
4717: PPUSH
// case event of mce_start :
4718: LD_VAR 0 1
4722: PUSH
4723: LD_EXP 1
4727: DOUBLE
4728: EQUAL
4729: IFTRUE 4733
4731: GO 4740
4733: POP
// MC_Monitor ( ) ; mce_monitor_base :
4734: CALL 2385 0 0
4738: GO 4763
4740: LD_EXP 2
4744: DOUBLE
4745: EQUAL
4746: IFTRUE 4750
4748: GO 4762
4750: POP
// MC_MonitorBase ( p1 ) ; end ;
4751: LD_VAR 0 2
4755: PPUSH
4756: CALL 2509 0 1
4760: GO 4763
4762: POP
// end ;
4763: LD_VAR 0 8
4767: RET
// export function MCE_ClassChanged ( unit , old_class , new_class ) ; begin
4768: LD_INT 0
4770: PPUSH
// SetTag ( unit , mct_none ) ;
4771: LD_VAR 0 1
4775: PPUSH
4776: LD_EXP 31
4780: PPUSH
4781: CALL_OW 109
// end ;
4785: LD_VAR 0 4
4789: RET
// export function MCE_UnitDestroyed ( un ) ; begin
4790: LD_INT 0
4792: PPUSH
// case GetType ( un ) of unit_human :
4793: LD_VAR 0 1
4797: PPUSH
4798: CALL_OW 247
4802: PUSH
4803: LD_INT 1
4805: DOUBLE
4806: EQUAL
4807: IFTRUE 4811
4809: GO 4823
4811: POP
// MCE_HumanKilled ( un ) ; unit_building :
4812: LD_VAR 0 1
4816: PPUSH
4817: CALL 4849 0 1
4821: GO 4844
4823: LD_INT 3
4825: DOUBLE
4826: EQUAL
4827: IFTRUE 4831
4829: GO 4843
4831: POP
// MCE_BuildingDestroyed ( un ) ; end ;
4832: LD_VAR 0 1
4836: PPUSH
4837: CALL 5406 0 1
4841: GO 4844
4843: POP
// end ;
4844: LD_VAR 0 2
4848: RET
// export function MCE_HumanKilled ( un ) ; var i ; begin
4849: LD_INT 0
4851: PPUSH
4852: PPUSH
// for i := 1 to mc_people do
4853: LD_ADDR_VAR 0 3
4857: PUSH
4858: DOUBLE
4859: LD_INT 1
4861: DEC
4862: ST_TO_ADDR
4863: LD_EXP 9
4867: PUSH
4868: FOR_TO
4869: IFFALSE 4928
// if un in mc_people [ i ] then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_EXP 9
4880: PUSH
4881: LD_VAR 0 3
4885: ARRAY
4886: IN
4887: IFFALSE 4926
// mc_people := Replace ( mc_people , i , mc_people [ i ] diff un ) ;
4889: LD_ADDR_EXP 9
4893: PUSH
4894: LD_EXP 9
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_EXP 9
4908: PUSH
4909: LD_VAR 0 3
4913: ARRAY
4914: PUSH
4915: LD_VAR 0 1
4919: DIFF
4920: PPUSH
4921: CALL_OW 1
4925: ST_TO_ADDR
4926: GO 4868
4928: POP
4929: POP
// end ;
4930: LD_VAR 0 2
4934: RET
// export function MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ; var base ; begin
4935: LD_INT 0
4937: PPUSH
4938: PPUSH
// if GetTag ( driver ) = mct_collect_crates then
4939: LD_VAR 0 1
4943: PPUSH
4944: CALL_OW 110
4948: PUSH
4949: LD_EXP 34
4953: EQUAL
4954: IFFALSE 5003
// begin base := MC_GetHumanBase ( driver ) ;
4956: LD_ADDR_VAR 0 6
4960: PUSH
4961: LD_VAR 0 1
4965: PPUSH
4966: CALL 6628 0 1
4970: ST_TO_ADDR
// if base then
4971: LD_VAR 0 6
4975: IFFALSE 5003
// begin SetTag ( driver , 0 ) ;
4977: LD_VAR 0 1
4981: PPUSH
4982: LD_INT 0
4984: PPUSH
4985: CALL_OW 109
// MC_Retreat ( base , driver ) ;
4989: LD_VAR 0 6
4993: PPUSH
4994: LD_VAR 0 1
4998: PPUSH
4999: CALL 7659 0 2
// end ; end ; end ;
5003: LD_VAR 0 5
5007: RET
// export function MCE_BuildingComplete ( building ) ; var base , btype , x , y , d ; begin
5008: LD_INT 0
5010: PPUSH
5011: PPUSH
5012: PPUSH
5013: PPUSH
5014: PPUSH
5015: PPUSH
// btype := GetBType ( building ) ;
5016: LD_ADDR_VAR 0 4
5020: PUSH
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 266
5030: ST_TO_ADDR
// x := GetX ( building ) ;
5031: LD_ADDR_VAR 0 5
5035: PUSH
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL_OW 250
5045: ST_TO_ADDR
// y := GetY ( building ) ;
5046: LD_ADDR_VAR 0 6
5050: PUSH
5051: LD_VAR 0 1
5055: PPUSH
5056: CALL_OW 251
5060: ST_TO_ADDR
// d := GetDir ( building ) ;
5061: LD_ADDR_VAR 0 7
5065: PUSH
5066: LD_VAR 0 1
5070: PPUSH
5071: CALL_OW 254
5075: ST_TO_ADDR
// for base = 1 to mc_build_list do
5076: LD_ADDR_VAR 0 3
5080: PUSH
5081: DOUBLE
5082: LD_INT 1
5084: DEC
5085: ST_TO_ADDR
5086: LD_EXP 14
5090: PUSH
5091: FOR_TO
5092: IFFALSE 5399
// begin if not mc_build_list [ base ] then
5094: LD_EXP 14
5098: PUSH
5099: LD_VAR 0 3
5103: ARRAY
5104: NOT
5105: IFFALSE 5109
// continue ;
5107: GO 5091
// if CompareArrayValues ( [ btype , x , y , d ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5109: LD_VAR 0 4
5113: PUSH
5114: LD_VAR 0 5
5118: PUSH
5119: LD_VAR 0 6
5123: PUSH
5124: LD_VAR 0 7
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: PPUSH
5135: LD_EXP 14
5139: PUSH
5140: LD_VAR 0 3
5144: ARRAY
5145: PUSH
5146: LD_INT 1
5148: ARRAY
5149: PPUSH
5150: CALL 19178 0 2
5154: PUSH
5155: LD_VAR 0 1
5159: PPUSH
5160: CALL_OW 255
5164: PUSH
5165: LD_EXP 6
5169: PUSH
5170: LD_VAR 0 3
5174: ARRAY
5175: EQUAL
5176: AND
5177: IFFALSE 5397
// begin if mc_build_list [ base ] [ 1 ] > 4 then
5179: LD_EXP 14
5183: PUSH
5184: LD_VAR 0 3
5188: ARRAY
5189: PUSH
5190: LD_INT 1
5192: ARRAY
5193: PUSH
5194: LD_INT 4
5196: GREATER
5197: IFFALSE 5270
// begin repeat wait ( 0 0$1 ) ;
5199: LD_INT 35
5201: PPUSH
5202: CALL_OW 67
// until not UpgradeCost ( mc_build_list [ base ] [ 1 ] [ 5 ] ) or not IsDead ( building ) ;
5206: LD_EXP 14
5210: PUSH
5211: LD_VAR 0 3
5215: ARRAY
5216: PUSH
5217: LD_INT 1
5219: ARRAY
5220: PUSH
5221: LD_INT 5
5223: ARRAY
5224: PPUSH
5225: CALL 19414 0 1
5229: NOT
5230: PUSH
5231: LD_VAR 0 1
5235: PPUSH
5236: CALL_OW 301
5240: NOT
5241: OR
5242: IFFALSE 5199
// if IsDead ( building ) then
5244: LD_VAR 0 1
5248: PPUSH
5249: CALL_OW 301
5253: IFFALSE 5259
// exit ;
5255: POP
5256: POP
5257: GO 5401
// ComUpgrade ( building ) ;
5259: LD_VAR 0 1
5263: PPUSH
5264: CALL_OW 146
// end else
5268: GO 5309
// mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5270: LD_ADDR_EXP 14
5274: PUSH
5275: LD_EXP 14
5279: PPUSH
5280: LD_VAR 0 3
5284: PPUSH
5285: LD_EXP 14
5289: PUSH
5290: LD_VAR 0 3
5294: ARRAY
5295: PPUSH
5296: LD_INT 1
5298: PPUSH
5299: CALL_OW 3
5303: PPUSH
5304: CALL_OW 1
5308: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , base , Replace ( mc_buildings [ base ] , mc_buildings [ base ] + 1 , building ) ) ;
5309: LD_ADDR_EXP 10
5313: PUSH
5314: LD_EXP 10
5318: PPUSH
5319: LD_VAR 0 3
5323: PPUSH
5324: LD_EXP 10
5328: PUSH
5329: LD_VAR 0 3
5333: ARRAY
5334: PPUSH
5335: LD_EXP 10
5339: PUSH
5340: LD_VAR 0 3
5344: ARRAY
5345: PUSH
5346: LD_INT 1
5348: PLUS
5349: PPUSH
5350: LD_VAR 0 1
5354: PPUSH
5355: CALL_OW 1
5359: PPUSH
5360: CALL_OW 1
5364: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5365: LD_VAR 0 3
5369: PPUSH
5370: LD_EXP 37
5374: PPUSH
5375: CALL 7869 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5379: LD_VAR 0 3
5383: PPUSH
5384: LD_EXP 37
5388: PPUSH
5389: CALL 6306 0 2
// exit ;
5393: POP
5394: POP
5395: GO 5401
// end ; end ;
5397: GO 5091
5399: POP
5400: POP
// end ;
5401: LD_VAR 0 2
5405: RET
// export function MCE_BuildingDestroyed ( building ) ; var base , x , y , d , btype ; begin
5406: LD_INT 0
5408: PPUSH
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
// btype := GetBType ( building ) ;
5414: LD_ADDR_VAR 0 7
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 266
5428: ST_TO_ADDR
// x := GetX ( building ) ;
5429: LD_ADDR_VAR 0 4
5433: PUSH
5434: LD_VAR 0 1
5438: PPUSH
5439: CALL_OW 250
5443: ST_TO_ADDR
// y := GetY ( building ) ;
5444: LD_ADDR_VAR 0 5
5448: PUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 251
5458: ST_TO_ADDR
// d := GetDir ( building ) ;
5459: LD_ADDR_VAR 0 6
5463: PUSH
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL_OW 254
5473: ST_TO_ADDR
// for base := 1 to mc_buildings do
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_EXP 10
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5720
// begin if not mc_buildings [ base ] then
5492: LD_EXP 10
5496: PUSH
5497: LD_VAR 0 3
5501: ARRAY
5502: NOT
5503: IFFALSE 5507
// continue ;
5505: GO 5489
// if building in mc_buildings [ base ] then
5507: LD_VAR 0 1
5511: PUSH
5512: LD_EXP 10
5516: PUSH
5517: LD_VAR 0 3
5521: ARRAY
5522: IN
5523: IFFALSE 5718
// begin mc_buildings := Replace ( mc_buildings , base , mc_buildings [ base ] diff building ) ;
5525: LD_ADDR_EXP 10
5529: PUSH
5530: LD_EXP 10
5534: PPUSH
5535: LD_VAR 0 3
5539: PPUSH
5540: LD_EXP 10
5544: PUSH
5545: LD_VAR 0 3
5549: ARRAY
5550: PUSH
5551: LD_VAR 0 1
5555: DIFF
5556: PPUSH
5557: CALL_OW 1
5561: ST_TO_ADDR
// if mc_build_list [ base ] then
5562: LD_EXP 14
5566: PUSH
5567: LD_VAR 0 3
5571: ARRAY
5572: IFFALSE 5656
// if mc_build_list [ base ] [ 1 ] [ 1 ] = btype and mc_build_list [ base ] [ 1 ] [ 2 ] = x and mc_build_list [ base ] [ 1 ] [ 3 ] = y then
5574: LD_EXP 14
5578: PUSH
5579: LD_VAR 0 3
5583: ARRAY
5584: PUSH
5585: LD_INT 1
5587: ARRAY
5588: PUSH
5589: LD_INT 1
5591: ARRAY
5592: PUSH
5593: LD_VAR 0 7
5597: EQUAL
5598: PUSH
5599: LD_EXP 14
5603: PUSH
5604: LD_VAR 0 3
5608: ARRAY
5609: PUSH
5610: LD_INT 1
5612: ARRAY
5613: PUSH
5614: LD_INT 2
5616: ARRAY
5617: PUSH
5618: LD_VAR 0 4
5622: EQUAL
5623: AND
5624: PUSH
5625: LD_EXP 14
5629: PUSH
5630: LD_VAR 0 3
5634: ARRAY
5635: PUSH
5636: LD_INT 1
5638: ARRAY
5639: PUSH
5640: LD_INT 3
5642: ARRAY
5643: PUSH
5644: LD_VAR 0 5
5648: EQUAL
5649: AND
5650: IFFALSE 5656
// exit ;
5652: POP
5653: POP
5654: GO 5722
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] ^ [ btype , x , y , d ] ) ;
5656: LD_ADDR_EXP 14
5660: PUSH
5661: LD_EXP 14
5665: PPUSH
5666: LD_VAR 0 3
5670: PPUSH
5671: LD_EXP 14
5675: PUSH
5676: LD_VAR 0 3
5680: ARRAY
5681: PUSH
5682: LD_VAR 0 7
5686: PUSH
5687: LD_VAR 0 4
5691: PUSH
5692: LD_VAR 0 5
5696: PUSH
5697: LD_VAR 0 6
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: ADD
5708: PPUSH
5709: CALL_OW 1
5713: ST_TO_ADDR
// exit ;
5714: POP
5715: POP
5716: GO 5722
// end ; end ;
5718: GO 5489
5720: POP
5721: POP
// end ;
5722: LD_VAR 0 2
5726: RET
// export function MCE_BuildingUpgradeComplete ( building ) ; var base , btype , x , y , d ; begin
5727: LD_INT 0
5729: PPUSH
5730: PPUSH
5731: PPUSH
5732: PPUSH
5733: PPUSH
5734: PPUSH
// btype := GetBType ( building ) ;
5735: LD_ADDR_VAR 0 4
5739: PUSH
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 266
5749: ST_TO_ADDR
// x := GetX ( building ) ;
5750: LD_ADDR_VAR 0 5
5754: PUSH
5755: LD_VAR 0 1
5759: PPUSH
5760: CALL_OW 250
5764: ST_TO_ADDR
// y := GetY ( building ) ;
5765: LD_ADDR_VAR 0 6
5769: PUSH
5770: LD_VAR 0 1
5774: PPUSH
5775: CALL_OW 251
5779: ST_TO_ADDR
// d := GetDir ( building ) ;
5780: LD_ADDR_VAR 0 7
5784: PUSH
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 254
5794: ST_TO_ADDR
// for base = 1 to mc_build_list do
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: DOUBLE
5801: LD_INT 1
5803: DEC
5804: ST_TO_ADDR
5805: LD_EXP 14
5809: PUSH
5810: FOR_TO
5811: IFFALSE 5981
// begin if not mc_build_list [ base ] then
5813: LD_EXP 14
5817: PUSH
5818: LD_VAR 0 3
5822: ARRAY
5823: NOT
5824: IFFALSE 5828
// continue ;
5826: GO 5810
// if CompareArrayValues ( [ btype - 1 , x , y , d , btype ] , mc_build_list [ base ] [ 1 ] ) and GetSide ( building ) = mc_bases [ base ] then
5828: LD_VAR 0 4
5832: PUSH
5833: LD_INT 1
5835: MINUS
5836: PUSH
5837: LD_VAR 0 5
5841: PUSH
5842: LD_VAR 0 6
5846: PUSH
5847: LD_VAR 0 7
5851: PUSH
5852: LD_VAR 0 4
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: PPUSH
5864: LD_EXP 14
5868: PUSH
5869: LD_VAR 0 3
5873: ARRAY
5874: PUSH
5875: LD_INT 1
5877: ARRAY
5878: PPUSH
5879: CALL 19178 0 2
5883: PUSH
5884: LD_VAR 0 1
5888: PPUSH
5889: CALL_OW 255
5893: PUSH
5894: LD_EXP 6
5898: PUSH
5899: LD_VAR 0 3
5903: ARRAY
5904: EQUAL
5905: AND
5906: IFFALSE 5979
// begin mc_build_list := Replace ( mc_build_list , base , Delete ( mc_build_list [ base ] , 1 ) ) ;
5908: LD_ADDR_EXP 14
5912: PUSH
5913: LD_EXP 14
5917: PPUSH
5918: LD_VAR 0 3
5922: PPUSH
5923: LD_EXP 14
5927: PUSH
5928: LD_VAR 0 3
5932: ARRAY
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL_OW 3
5941: PPUSH
5942: CALL_OW 1
5946: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_build ) ;
5947: LD_VAR 0 3
5951: PPUSH
5952: LD_EXP 37
5956: PPUSH
5957: CALL 7869 0 2
// MCT_ResetTag ( base , mctm_build ) ;
5961: LD_VAR 0 3
5965: PPUSH
5966: LD_EXP 37
5970: PPUSH
5971: CALL 6306 0 2
// exit ;
5975: POP
5976: POP
5977: GO 5983
// end ; end ;
5979: GO 5810
5981: POP
5982: POP
// end ; end_of_file
5983: LD_VAR 0 2
5987: RET
// export mc_active , mc_debug , mc_bases , mc_tag , mc_task , mc_people , mc_buildings , mc_vehicles , mc_mines , mc_minefields , mc_build_list , mc_produce_list , mc_defense_status , mc_defender , mc_defender_limit , mc_ape , mc_tech , mc_attack , mc_deposits_xy , mc_can_tame , mc_lab_upgrade , mc_crates_area , mc_teleport_exit , mc_allowed_tower_weapons , mc_parking , mc_scan_area , mc_danger ; export function MC_InitVariables ( ) ; begin
5988: LD_INT 0
5990: PPUSH
// mc_bases := [ ] ;
5991: LD_ADDR_EXP 6
5995: PUSH
5996: EMPTY
5997: ST_TO_ADDR
// mc_tag := [ ] ;
5998: LD_ADDR_EXP 7
6002: PUSH
6003: EMPTY
6004: ST_TO_ADDR
// mc_task := [ ] ;
6005: LD_ADDR_EXP 8
6009: PUSH
6010: EMPTY
6011: ST_TO_ADDR
// mc_people := [ ] ;
6012: LD_ADDR_EXP 9
6016: PUSH
6017: EMPTY
6018: ST_TO_ADDR
// mc_buildings := [ ] ;
6019: LD_ADDR_EXP 10
6023: PUSH
6024: EMPTY
6025: ST_TO_ADDR
// mc_vehicles := [ ] ;
6026: LD_ADDR_EXP 11
6030: PUSH
6031: EMPTY
6032: ST_TO_ADDR
// mc_mines := [ ] ;
6033: LD_ADDR_EXP 12
6037: PUSH
6038: EMPTY
6039: ST_TO_ADDR
// mc_minefields := [ ] ;
6040: LD_ADDR_EXP 13
6044: PUSH
6045: EMPTY
6046: ST_TO_ADDR
// mc_build_list := [ ] ;
6047: LD_ADDR_EXP 14
6051: PUSH
6052: EMPTY
6053: ST_TO_ADDR
// mc_produce_list := [ ] ;
6054: LD_ADDR_EXP 15
6058: PUSH
6059: EMPTY
6060: ST_TO_ADDR
// mc_defense_status := [ ] ;
6061: LD_ADDR_EXP 16
6065: PUSH
6066: EMPTY
6067: ST_TO_ADDR
// mc_defender := [ ] ;
6068: LD_ADDR_EXP 17
6072: PUSH
6073: EMPTY
6074: ST_TO_ADDR
// mc_defender_limit := [ ] ;
6075: LD_ADDR_EXP 18
6079: PUSH
6080: EMPTY
6081: ST_TO_ADDR
// mc_ape := [ ] ;
6082: LD_ADDR_EXP 19
6086: PUSH
6087: EMPTY
6088: ST_TO_ADDR
// mc_tech := [ ] ;
6089: LD_ADDR_EXP 20
6093: PUSH
6094: EMPTY
6095: ST_TO_ADDR
// mc_attack := [ ] ;
6096: LD_ADDR_EXP 21
6100: PUSH
6101: EMPTY
6102: ST_TO_ADDR
// mc_deposits_xy := [ ] ;
6103: LD_ADDR_EXP 22
6107: PUSH
6108: EMPTY
6109: ST_TO_ADDR
// mc_can_tame := [ ] ;
6110: LD_ADDR_EXP 23
6114: PUSH
6115: EMPTY
6116: ST_TO_ADDR
// mc_crates_area := [ ] ;
6117: LD_ADDR_EXP 25
6121: PUSH
6122: EMPTY
6123: ST_TO_ADDR
// mc_teleport_exit := [ ] ;
6124: LD_ADDR_EXP 26
6128: PUSH
6129: EMPTY
6130: ST_TO_ADDR
// mc_allowed_tower_weapons := [ ] ;
6131: LD_ADDR_EXP 27
6135: PUSH
6136: EMPTY
6137: ST_TO_ADDR
// mc_parking := [ ] ;
6138: LD_ADDR_EXP 28
6142: PUSH
6143: EMPTY
6144: ST_TO_ADDR
// mc_scan_area := [ ] ;
6145: LD_ADDR_EXP 29
6149: PUSH
6150: EMPTY
6151: ST_TO_ADDR
// mc_danger := [ ] ;
6152: LD_ADDR_EXP 30
6156: PUSH
6157: EMPTY
6158: ST_TO_ADDR
// end ; end_of_file
6159: LD_VAR 0 1
6163: RET
// export mct_none , mct_change_class , mct_build , mct_collect_crates , mct_heal ; export function MCT_InitTags ; begin
6164: LD_INT 0
6166: PPUSH
// mct_none := 0 ;
6167: LD_ADDR_EXP 31
6171: PUSH
6172: LD_INT 0
6174: ST_TO_ADDR
// mct_change_class := 1 ;
6175: LD_ADDR_EXP 32
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// mct_build := 2 ;
6183: LD_ADDR_EXP 33
6187: PUSH
6188: LD_INT 2
6190: ST_TO_ADDR
// mct_collect_crates := 3 ;
6191: LD_ADDR_EXP 34
6195: PUSH
6196: LD_INT 3
6198: ST_TO_ADDR
// mct_heal := 4 ;
6199: LD_ADDR_EXP 35
6203: PUSH
6204: LD_INT 4
6206: ST_TO_ADDR
// end ;
6207: LD_VAR 0 1
6211: RET
// export function MCT_GetByTag ( base , tag ) ; var i ; begin
6212: LD_INT 0
6214: PPUSH
6215: PPUSH
// result := [ ] ;
6216: LD_ADDR_VAR 0 3
6220: PUSH
6221: EMPTY
6222: ST_TO_ADDR
// if not base then
6223: LD_VAR 0 1
6227: NOT
6228: IFFALSE 6232
// exit ;
6230: GO 6301
// for i in mc_people [ base ] do
6232: LD_ADDR_VAR 0 4
6236: PUSH
6237: LD_EXP 9
6241: PUSH
6242: LD_VAR 0 1
6246: ARRAY
6247: PUSH
6248: FOR_IN
6249: IFFALSE 6299
// if GetTag ( i ) = tag then
6251: LD_VAR 0 4
6255: PPUSH
6256: CALL_OW 110
6260: PUSH
6261: LD_VAR 0 2
6265: EQUAL
6266: IFFALSE 6297
// result := Replace ( result , result + 1 , i ) ;
6268: LD_ADDR_VAR 0 3
6272: PUSH
6273: LD_VAR 0 3
6277: PPUSH
6278: LD_VAR 0 3
6282: PUSH
6283: LD_INT 1
6285: PLUS
6286: PPUSH
6287: LD_VAR 0 4
6291: PPUSH
6292: CALL_OW 1
6296: ST_TO_ADDR
6297: GO 6248
6299: POP
6300: POP
// end ;
6301: LD_VAR 0 3
6305: RET
// export function MCT_ResetTag ( base , tag ) ; var i ; begin
6306: LD_INT 0
6308: PPUSH
6309: PPUSH
// result := MCT_GetByTag ( base , tag ) ;
6310: LD_ADDR_VAR 0 3
6314: PUSH
6315: LD_VAR 0 1
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL 6212 0 2
6329: ST_TO_ADDR
// if result then
6330: LD_VAR 0 3
6334: IFFALSE 6367
// for i in result do
6336: LD_ADDR_VAR 0 4
6340: PUSH
6341: LD_VAR 0 3
6345: PUSH
6346: FOR_IN
6347: IFFALSE 6365
// SetTag ( i , mct_none ) ;
6349: LD_VAR 0 4
6353: PPUSH
6354: LD_EXP 31
6358: PPUSH
6359: CALL_OW 109
6363: GO 6346
6365: POP
6366: POP
// end ;
6367: LD_VAR 0 3
6371: RET
// export function MCT_SetTag ( units , tag ) ; var i ; begin
6372: LD_INT 0
6374: PPUSH
6375: PPUSH
// if not units then
6376: LD_VAR 0 1
6380: NOT
6381: IFFALSE 6385
// exit ;
6383: GO 6416
// for i in units do
6385: LD_ADDR_VAR 0 4
6389: PUSH
6390: LD_VAR 0 1
6394: PUSH
6395: FOR_IN
6396: IFFALSE 6414
// SetTag ( i , tag ) ;
6398: LD_VAR 0 4
6402: PPUSH
6403: LD_VAR 0 2
6407: PPUSH
6408: CALL_OW 109
6412: GO 6395
6414: POP
6415: POP
// end ; end_of_file
6416: LD_VAR 0 3
6420: RET
// export function MC_Exist ( base ) ; begin
6421: LD_INT 0
6423: PPUSH
// result := mc_bases >= base and mc_bases [ base ] > 0 ;
6424: LD_ADDR_VAR 0 2
6428: PUSH
6429: LD_EXP 6
6433: PUSH
6434: LD_VAR 0 1
6438: GREATEREQUAL
6439: PUSH
6440: LD_EXP 6
6444: PUSH
6445: LD_VAR 0 1
6449: ARRAY
6450: PUSH
6451: LD_INT 0
6453: GREATER
6454: AND
6455: ST_TO_ADDR
// end ;
6456: LD_VAR 0 2
6460: RET
// export function MC_GetBestForClass ( base , class , amount ) ; var i , units ; begin
6461: LD_INT 0
6463: PPUSH
6464: PPUSH
6465: PPUSH
// result := [ ] ;
6466: LD_ADDR_VAR 0 4
6470: PUSH
6471: EMPTY
6472: ST_TO_ADDR
// units := SortBySkill ( UnitFilter ( mc_people [ base ] , [ f_not , [ f_class , class ] ] ) , class ) ;
6473: LD_ADDR_VAR 0 6
6477: PUSH
6478: LD_EXP 9
6482: PUSH
6483: LD_VAR 0 1
6487: ARRAY
6488: PPUSH
6489: LD_INT 3
6491: PUSH
6492: LD_INT 25
6494: PUSH
6495: LD_VAR 0 2
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PPUSH
6508: CALL_OW 72
6512: PPUSH
6513: LD_VAR 0 2
6517: PPUSH
6518: CALL 43158 0 2
6522: ST_TO_ADDR
// if not units then
6523: LD_VAR 0 6
6527: NOT
6528: IFFALSE 6532
// exit ;
6530: GO 6623
// for i := 1 to amount do
6532: LD_ADDR_VAR 0 5
6536: PUSH
6537: DOUBLE
6538: LD_INT 1
6540: DEC
6541: ST_TO_ADDR
6542: LD_VAR 0 3
6546: PUSH
6547: FOR_TO
6548: IFFALSE 6621
// begin if i > units then
6550: LD_VAR 0 5
6554: PUSH
6555: LD_VAR 0 6
6559: GREATER
6560: IFFALSE 6566
// exit ;
6562: POP
6563: POP
6564: GO 6623
// if not GetTag ( units [ i ] ) then
6566: LD_VAR 0 6
6570: PUSH
6571: LD_VAR 0 5
6575: ARRAY
6576: PPUSH
6577: CALL_OW 110
6581: NOT
6582: IFFALSE 6619
// result := Replace ( result , result + 1 , units [ i ] ) ;
6584: LD_ADDR_VAR 0 4
6588: PUSH
6589: LD_VAR 0 4
6593: PPUSH
6594: LD_VAR 0 4
6598: PUSH
6599: LD_INT 1
6601: PLUS
6602: PPUSH
6603: LD_VAR 0 6
6607: PUSH
6608: LD_VAR 0 5
6612: ARRAY
6613: PPUSH
6614: CALL_OW 1
6618: ST_TO_ADDR
// end ;
6619: GO 6547
6621: POP
6622: POP
// end ;
6623: LD_VAR 0 4
6627: RET
// export function MC_GetHumanBase ( human ) ; var i ; begin
6628: LD_INT 0
6630: PPUSH
6631: PPUSH
// for i := 1 to mc_people do
6632: LD_ADDR_VAR 0 3
6636: PUSH
6637: DOUBLE
6638: LD_INT 1
6640: DEC
6641: ST_TO_ADDR
6642: LD_EXP 9
6646: PUSH
6647: FOR_TO
6648: IFFALSE 6684
// if human in mc_people [ i ] then
6650: LD_VAR 0 1
6654: PUSH
6655: LD_EXP 9
6659: PUSH
6660: LD_VAR 0 3
6664: ARRAY
6665: IN
6666: IFFALSE 6682
// begin result := i ;
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: LD_VAR 0 3
6677: ST_TO_ADDR
// exit ;
6678: POP
6679: POP
6680: GO 6686
// end ;
6682: GO 6647
6684: POP
6685: POP
// end ;
6686: LD_VAR 0 2
6690: RET
// export function MC_ChangeClass ( base , class , units ) ; var i , buildings , b ; begin
6691: LD_INT 0
6693: PPUSH
6694: PPUSH
6695: PPUSH
6696: PPUSH
// if not base or not units then
6697: LD_VAR 0 1
6701: NOT
6702: PUSH
6703: LD_VAR 0 3
6707: NOT
6708: OR
6709: IFFALSE 6713
// exit ;
6711: GO 7194
// case class of 1 , 5 , 6 , 7 , 8 :
6713: LD_VAR 0 2
6717: PUSH
6718: LD_INT 1
6720: DOUBLE
6721: EQUAL
6722: IFTRUE 6750
6724: LD_INT 5
6726: DOUBLE
6727: EQUAL
6728: IFTRUE 6750
6730: LD_INT 6
6732: DOUBLE
6733: EQUAL
6734: IFTRUE 6750
6736: LD_INT 7
6738: DOUBLE
6739: EQUAL
6740: IFTRUE 6750
6742: LD_INT 8
6744: DOUBLE
6745: EQUAL
6746: IFTRUE 6750
6748: GO 6802
6750: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
6751: LD_ADDR_VAR 0 6
6755: PUSH
6756: LD_EXP 10
6760: PUSH
6761: LD_VAR 0 1
6765: ARRAY
6766: PPUSH
6767: LD_INT 2
6769: PUSH
6770: LD_INT 30
6772: PUSH
6773: LD_INT 4
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 30
6782: PUSH
6783: LD_INT 5
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: PPUSH
6795: CALL_OW 72
6799: ST_TO_ADDR
6800: GO 6994
6802: LD_INT 2
6804: DOUBLE
6805: EQUAL
6806: IFTRUE 6810
6808: GO 6862
6810: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
6811: LD_ADDR_VAR 0 6
6815: PUSH
6816: LD_EXP 10
6820: PUSH
6821: LD_VAR 0 1
6825: ARRAY
6826: PPUSH
6827: LD_INT 2
6829: PUSH
6830: LD_INT 30
6832: PUSH
6833: LD_INT 0
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 30
6842: PUSH
6843: LD_INT 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 72
6859: ST_TO_ADDR
6860: GO 6994
6862: LD_INT 3
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 6922
6870: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
6871: LD_ADDR_VAR 0 6
6875: PUSH
6876: LD_EXP 10
6880: PUSH
6881: LD_VAR 0 1
6885: ARRAY
6886: PPUSH
6887: LD_INT 2
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 2
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 30
6902: PUSH
6903: LD_INT 3
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: PPUSH
6915: CALL_OW 72
6919: ST_TO_ADDR
6920: GO 6994
6922: LD_INT 4
6924: DOUBLE
6925: EQUAL
6926: IFTRUE 6930
6928: GO 6993
6930: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
6931: LD_ADDR_VAR 0 6
6935: PUSH
6936: LD_EXP 10
6940: PUSH
6941: LD_VAR 0 1
6945: ARRAY
6946: PPUSH
6947: LD_INT 2
6949: PUSH
6950: LD_INT 30
6952: PUSH
6953: LD_INT 6
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 30
6962: PUSH
6963: LD_INT 7
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 30
6972: PUSH
6973: LD_INT 8
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 72
6990: ST_TO_ADDR
6991: GO 6994
6993: POP
// if not buildings then
6994: LD_VAR 0 6
6998: NOT
6999: IFFALSE 7003
// exit ;
7001: GO 7194
// for i := 1 to units do
7003: LD_ADDR_VAR 0 5
7007: PUSH
7008: DOUBLE
7009: LD_INT 1
7011: DEC
7012: ST_TO_ADDR
7013: LD_VAR 0 3
7017: PUSH
7018: FOR_TO
7019: IFFALSE 7192
// begin if GetClass ( units [ i ] ) = class then
7021: LD_VAR 0 3
7025: PUSH
7026: LD_VAR 0 5
7030: ARRAY
7031: PPUSH
7032: CALL_OW 257
7036: PUSH
7037: LD_VAR 0 2
7041: EQUAL
7042: IFFALSE 7046
// continue ;
7044: GO 7018
// SetTag ( units [ i ] , mct_change_class ) ;
7046: LD_VAR 0 3
7050: PUSH
7051: LD_VAR 0 5
7055: ARRAY
7056: PPUSH
7057: LD_EXP 32
7061: PPUSH
7062: CALL_OW 109
// if buildings > i div 6 then
7066: LD_VAR 0 6
7070: PUSH
7071: LD_VAR 0 5
7075: PUSH
7076: LD_INT 6
7078: DIV
7079: GREATER
7080: IFFALSE 7104
// b := buildings [ i div 6 ] else
7082: LD_ADDR_VAR 0 7
7086: PUSH
7087: LD_VAR 0 6
7091: PUSH
7092: LD_VAR 0 5
7096: PUSH
7097: LD_INT 6
7099: DIV
7100: ARRAY
7101: ST_TO_ADDR
7102: GO 7118
// b := buildings [ 1 ] ;
7104: LD_ADDR_VAR 0 7
7108: PUSH
7109: LD_VAR 0 6
7113: PUSH
7114: LD_INT 1
7116: ARRAY
7117: ST_TO_ADDR
// if IsInUnit ( units [ i ] ) then
7118: LD_VAR 0 3
7122: PUSH
7123: LD_VAR 0 5
7127: ARRAY
7128: PPUSH
7129: CALL_OW 310
7133: IFFALSE 7150
// ComExit ( units [ i ] ) ;
7135: LD_VAR 0 3
7139: PUSH
7140: LD_VAR 0 5
7144: ARRAY
7145: PPUSH
7146: CALL 45040 0 1
// AddComEnterUnit ( units [ i ] , b ) ;
7150: LD_VAR 0 3
7154: PUSH
7155: LD_VAR 0 5
7159: ARRAY
7160: PPUSH
7161: LD_VAR 0 7
7165: PPUSH
7166: CALL_OW 180
// AddComChangeProfession ( units [ i ] , class ) ;
7170: LD_VAR 0 3
7174: PUSH
7175: LD_VAR 0 5
7179: ARRAY
7180: PPUSH
7181: LD_VAR 0 2
7185: PPUSH
7186: CALL_OW 183
// end ;
7190: GO 7018
7192: POP
7193: POP
// end ;
7194: LD_VAR 0 4
7198: RET
// export function MC_GetByClass ( base , class , tag ) ; var i ; begin
7199: LD_INT 0
7201: PPUSH
7202: PPUSH
// result := UnitFilter ( mc_people [ base ] , [ f_class , class ] ) ;
7203: LD_ADDR_VAR 0 4
7207: PUSH
7208: LD_EXP 9
7212: PUSH
7213: LD_VAR 0 1
7217: ARRAY
7218: PPUSH
7219: LD_INT 25
7221: PUSH
7222: LD_VAR 0 2
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PPUSH
7231: CALL_OW 72
7235: ST_TO_ADDR
// if tag > - 1 then
7236: LD_VAR 0 3
7240: PUSH
7241: LD_INT 1
7243: NEG
7244: GREATER
7245: IFFALSE 7297
// for i in result do
7247: LD_ADDR_VAR 0 5
7251: PUSH
7252: LD_VAR 0 4
7256: PUSH
7257: FOR_IN
7258: IFFALSE 7295
// if GetTag ( i ) <> tag then
7260: LD_VAR 0 5
7264: PPUSH
7265: CALL_OW 110
7269: PUSH
7270: LD_VAR 0 3
7274: NONEQUAL
7275: IFFALSE 7293
// result := result diff i ;
7277: LD_ADDR_VAR 0 4
7281: PUSH
7282: LD_VAR 0 4
7286: PUSH
7287: LD_VAR 0 5
7291: DIFF
7292: ST_TO_ADDR
7293: GO 7257
7295: POP
7296: POP
// end ;
7297: LD_VAR 0 4
7301: RET
// export function MC_GetOneByClass ( base , class , tag ) ; begin
7302: LD_INT 0
7304: PPUSH
// result := MC_GetByClass ( base , class , tag ) ;
7305: LD_ADDR_VAR 0 4
7309: PUSH
7310: LD_VAR 0 1
7314: PPUSH
7315: LD_VAR 0 2
7319: PPUSH
7320: LD_VAR 0 3
7324: PPUSH
7325: CALL 7199 0 3
7329: ST_TO_ADDR
// if result then
7330: LD_VAR 0 4
7334: IFFALSE 7350
// result := result [ 1 ] ;
7336: LD_ADDR_VAR 0 4
7340: PUSH
7341: LD_VAR 0 4
7345: PUSH
7346: LD_INT 1
7348: ARRAY
7349: ST_TO_ADDR
// end ;
7350: LD_VAR 0 4
7354: RET
// export function MC_GetBuilding ( base , btype ) ; begin
7355: LD_INT 0
7357: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_btype , btype ] ) ;
7358: LD_ADDR_VAR 0 3
7362: PUSH
7363: LD_EXP 10
7367: PUSH
7368: LD_VAR 0 1
7372: ARRAY
7373: PPUSH
7374: LD_INT 30
7376: PUSH
7377: LD_VAR 0 2
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 72
7390: ST_TO_ADDR
// end ;
7391: LD_VAR 0 3
7395: RET
// export function MC_GetDepot ( base ) ; begin
7396: LD_INT 0
7398: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
7399: LD_ADDR_VAR 0 2
7403: PUSH
7404: LD_EXP 10
7408: PUSH
7409: LD_VAR 0 1
7413: ARRAY
7414: PPUSH
7415: LD_INT 2
7417: PUSH
7418: LD_INT 30
7420: PUSH
7421: LD_INT 0
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 1
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: PPUSH
7443: CALL_OW 72
7447: ST_TO_ADDR
// end ;
7448: LD_VAR 0 2
7452: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
7453: LD_INT 0
7455: PPUSH
// result := mc_vehicles [ base ] ;
7456: LD_ADDR_VAR 0 3
7460: PUSH
7461: LD_EXP 11
7465: PUSH
7466: LD_VAR 0 1
7470: ARRAY
7471: ST_TO_ADDR
// if onlyCombat then
7472: LD_VAR 0 2
7476: IFFALSE 7654
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_VAR 0 3
7487: PUSH
7488: LD_VAR 0 3
7492: PPUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 34
7498: PUSH
7499: LD_INT 12
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 34
7508: PUSH
7509: LD_INT 51
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 34
7518: PUSH
7519: LD_EXP 40
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 34
7530: PUSH
7531: LD_INT 32
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 34
7540: PUSH
7541: LD_INT 13
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 34
7550: PUSH
7551: LD_INT 52
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 34
7560: PUSH
7561: LD_EXP 45
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 34
7572: PUSH
7573: LD_INT 14
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PUSH
7580: LD_INT 34
7582: PUSH
7583: LD_INT 53
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 34
7592: PUSH
7593: LD_EXP 39
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 34
7604: PUSH
7605: LD_INT 31
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 34
7614: PUSH
7615: LD_INT 48
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 34
7624: PUSH
7625: LD_INT 8
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 72
7652: DIFF
7653: ST_TO_ADDR
// end ;
7654: LD_VAR 0 3
7658: RET
// export function MC_Retreat ( base , unit ) ; var depot ; begin
7659: LD_INT 0
7661: PPUSH
7662: PPUSH
// if not base or not unit then
7663: LD_VAR 0 1
7667: NOT
7668: PUSH
7669: LD_VAR 0 2
7673: NOT
7674: OR
7675: IFFALSE 7679
// exit ;
7677: GO 7746
// depot := NearestUnitToUnit ( MC_GetDepot ( base ) , unit ) ;
7679: LD_ADDR_VAR 0 4
7683: PUSH
7684: LD_VAR 0 1
7688: PPUSH
7689: CALL 7396 0 1
7693: PPUSH
7694: LD_VAR 0 2
7698: PPUSH
7699: CALL_OW 74
7703: ST_TO_ADDR
// if depot then
7704: LD_VAR 0 4
7708: IFFALSE 7726
// ComStandNearbyBuilding ( unit , depot ) else
7710: LD_VAR 0 2
7714: PPUSH
7715: LD_VAR 0 4
7719: PPUSH
7720: CALL 9478 0 2
7724: GO 7746
// ComMoveToArea ( unit , mc_scan_area [ base ] ) ;
7726: LD_VAR 0 2
7730: PPUSH
7731: LD_EXP 29
7735: PUSH
7736: LD_VAR 0 1
7740: ARRAY
7741: PPUSH
7742: CALL_OW 113
// end ; end_of_file
7746: LD_VAR 0 3
7750: RET
// export mctm_collect_crates , mctm_build , mctm_ ; export function MCTM_InitTaskManager ( ) ; begin
7751: LD_INT 0
7753: PPUSH
// mctm_collect_crates := 1 ;
7754: LD_ADDR_EXP 36
7758: PUSH
7759: LD_INT 1
7761: ST_TO_ADDR
// mctm_build := 2 ;
7762: LD_ADDR_EXP 37
7766: PUSH
7767: LD_INT 2
7769: ST_TO_ADDR
// end ;
7770: LD_VAR 0 1
7774: RET
// export function MCTM_HasActiveTask ( base , task ) ; begin
7775: LD_INT 0
7777: PPUSH
// result := task in mc_task [ base ] ;
7778: LD_ADDR_VAR 0 3
7782: PUSH
7783: LD_VAR 0 2
7787: PUSH
7788: LD_EXP 8
7792: PUSH
7793: LD_VAR 0 1
7797: ARRAY
7798: IN
7799: ST_TO_ADDR
// end ;
7800: LD_VAR 0 3
7804: RET
// export function MCTM_SetActiveTask ( base , task ) ; begin
7805: LD_INT 0
7807: PPUSH
// mc_task := Replace ( mc_task , base , Replace ( mc_task [ base ] , mc_task [ base ] + 1 , task ) ) ;
7808: LD_ADDR_EXP 8
7812: PUSH
7813: LD_EXP 8
7817: PPUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: LD_EXP 8
7827: PUSH
7828: LD_VAR 0 1
7832: ARRAY
7833: PPUSH
7834: LD_EXP 8
7838: PUSH
7839: LD_VAR 0 1
7843: ARRAY
7844: PUSH
7845: LD_INT 1
7847: PLUS
7848: PPUSH
7849: LD_VAR 0 2
7853: PPUSH
7854: CALL_OW 1
7858: PPUSH
7859: CALL_OW 1
7863: ST_TO_ADDR
// end ;
7864: LD_VAR 0 3
7868: RET
// export function MCTM_DeleteActiveTask ( base , task ) ; begin
7869: LD_INT 0
7871: PPUSH
// mc_task := Replace ( mc_task , base , mc_task [ base ] diff task ) ;
7872: LD_ADDR_EXP 8
7876: PUSH
7877: LD_EXP 8
7881: PPUSH
7882: LD_VAR 0 1
7886: PPUSH
7887: LD_EXP 8
7891: PUSH
7892: LD_VAR 0 1
7896: ARRAY
7897: PUSH
7898: LD_VAR 0 2
7902: DIFF
7903: PPUSH
7904: CALL_OW 1
7908: ST_TO_ADDR
// end ; end_of_file
7909: LD_VAR 0 3
7913: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
7914: LD_INT 0
7916: PPUSH
7917: PPUSH
// if exist_mode then
7918: LD_VAR 0 2
7922: IFFALSE 7947
// unit := CreateCharacter ( prefix & ident ) else
7924: LD_ADDR_VAR 0 5
7928: PUSH
7929: LD_VAR 0 3
7933: PUSH
7934: LD_VAR 0 1
7938: STR
7939: PPUSH
7940: CALL_OW 34
7944: ST_TO_ADDR
7945: GO 7962
// unit := NewCharacter ( ident ) ;
7947: LD_ADDR_VAR 0 5
7951: PUSH
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 25
7961: ST_TO_ADDR
// result := unit ;
7962: LD_ADDR_VAR 0 4
7966: PUSH
7967: LD_VAR 0 5
7971: ST_TO_ADDR
// end ;
7972: LD_VAR 0 4
7976: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
7977: LD_INT 0
7979: PPUSH
7980: PPUSH
// if not side or not nation then
7981: LD_VAR 0 1
7985: NOT
7986: PUSH
7987: LD_VAR 0 2
7991: NOT
7992: OR
7993: IFFALSE 7997
// exit ;
7995: GO 8765
// case nation of nation_american :
7997: LD_VAR 0 2
8001: PUSH
8002: LD_INT 1
8004: DOUBLE
8005: EQUAL
8006: IFTRUE 8010
8008: GO 8224
8010: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8011: LD_ADDR_VAR 0 4
8015: PUSH
8016: LD_INT 35
8018: PUSH
8019: LD_INT 45
8021: PUSH
8022: LD_INT 46
8024: PUSH
8025: LD_INT 47
8027: PUSH
8028: LD_INT 82
8030: PUSH
8031: LD_INT 83
8033: PUSH
8034: LD_INT 84
8036: PUSH
8037: LD_INT 85
8039: PUSH
8040: LD_INT 86
8042: PUSH
8043: LD_INT 1
8045: PUSH
8046: LD_INT 2
8048: PUSH
8049: LD_INT 6
8051: PUSH
8052: LD_INT 15
8054: PUSH
8055: LD_INT 16
8057: PUSH
8058: LD_INT 7
8060: PUSH
8061: LD_INT 12
8063: PUSH
8064: LD_INT 13
8066: PUSH
8067: LD_INT 10
8069: PUSH
8070: LD_INT 14
8072: PUSH
8073: LD_INT 20
8075: PUSH
8076: LD_INT 21
8078: PUSH
8079: LD_INT 22
8081: PUSH
8082: LD_INT 25
8084: PUSH
8085: LD_INT 32
8087: PUSH
8088: LD_INT 27
8090: PUSH
8091: LD_INT 36
8093: PUSH
8094: LD_INT 69
8096: PUSH
8097: LD_INT 39
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 40
8105: PUSH
8106: LD_INT 48
8108: PUSH
8109: LD_INT 49
8111: PUSH
8112: LD_INT 50
8114: PUSH
8115: LD_INT 51
8117: PUSH
8118: LD_INT 52
8120: PUSH
8121: LD_INT 53
8123: PUSH
8124: LD_INT 54
8126: PUSH
8127: LD_INT 55
8129: PUSH
8130: LD_INT 56
8132: PUSH
8133: LD_INT 57
8135: PUSH
8136: LD_INT 58
8138: PUSH
8139: LD_INT 59
8141: PUSH
8142: LD_INT 60
8144: PUSH
8145: LD_INT 61
8147: PUSH
8148: LD_INT 62
8150: PUSH
8151: LD_INT 80
8153: PUSH
8154: LD_INT 82
8156: PUSH
8157: LD_INT 83
8159: PUSH
8160: LD_INT 84
8162: PUSH
8163: LD_INT 85
8165: PUSH
8166: LD_INT 86
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: ST_TO_ADDR
8222: GO 8689
8224: LD_INT 2
8226: DOUBLE
8227: EQUAL
8228: IFTRUE 8232
8230: GO 8458
8232: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8233: LD_ADDR_VAR 0 4
8237: PUSH
8238: LD_INT 35
8240: PUSH
8241: LD_INT 45
8243: PUSH
8244: LD_INT 46
8246: PUSH
8247: LD_INT 47
8249: PUSH
8250: LD_INT 82
8252: PUSH
8253: LD_INT 83
8255: PUSH
8256: LD_INT 84
8258: PUSH
8259: LD_INT 85
8261: PUSH
8262: LD_INT 87
8264: PUSH
8265: LD_INT 70
8267: PUSH
8268: LD_INT 1
8270: PUSH
8271: LD_INT 11
8273: PUSH
8274: LD_INT 3
8276: PUSH
8277: LD_INT 4
8279: PUSH
8280: LD_INT 5
8282: PUSH
8283: LD_INT 6
8285: PUSH
8286: LD_INT 15
8288: PUSH
8289: LD_INT 18
8291: PUSH
8292: LD_INT 7
8294: PUSH
8295: LD_INT 17
8297: PUSH
8298: LD_INT 8
8300: PUSH
8301: LD_INT 20
8303: PUSH
8304: LD_INT 21
8306: PUSH
8307: LD_INT 22
8309: PUSH
8310: LD_INT 72
8312: PUSH
8313: LD_INT 26
8315: PUSH
8316: LD_INT 69
8318: PUSH
8319: LD_INT 39
8321: PUSH
8322: LD_INT 40
8324: PUSH
8325: LD_INT 41
8327: PUSH
8328: LD_INT 42
8330: PUSH
8331: LD_INT 43
8333: PUSH
8334: LD_INT 48
8336: PUSH
8337: LD_INT 49
8339: PUSH
8340: LD_INT 50
8342: PUSH
8343: LD_INT 51
8345: PUSH
8346: LD_INT 52
8348: PUSH
8349: LD_INT 53
8351: PUSH
8352: LD_INT 54
8354: PUSH
8355: LD_INT 55
8357: PUSH
8358: LD_INT 56
8360: PUSH
8361: LD_INT 60
8363: PUSH
8364: LD_INT 61
8366: PUSH
8367: LD_INT 62
8369: PUSH
8370: LD_INT 66
8372: PUSH
8373: LD_INT 67
8375: PUSH
8376: LD_INT 68
8378: PUSH
8379: LD_INT 81
8381: PUSH
8382: LD_INT 82
8384: PUSH
8385: LD_INT 83
8387: PUSH
8388: LD_INT 84
8390: PUSH
8391: LD_INT 85
8393: PUSH
8394: LD_INT 87
8396: PUSH
8397: LD_INT 88
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: ST_TO_ADDR
8456: GO 8689
8458: LD_INT 3
8460: DOUBLE
8461: EQUAL
8462: IFTRUE 8466
8464: GO 8688
8466: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8467: LD_ADDR_VAR 0 4
8471: PUSH
8472: LD_INT 46
8474: PUSH
8475: LD_INT 47
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: LD_INT 2
8483: PUSH
8484: LD_INT 82
8486: PUSH
8487: LD_INT 83
8489: PUSH
8490: LD_INT 84
8492: PUSH
8493: LD_INT 85
8495: PUSH
8496: LD_INT 86
8498: PUSH
8499: LD_INT 11
8501: PUSH
8502: LD_INT 9
8504: PUSH
8505: LD_INT 20
8507: PUSH
8508: LD_INT 19
8510: PUSH
8511: LD_INT 21
8513: PUSH
8514: LD_INT 24
8516: PUSH
8517: LD_INT 22
8519: PUSH
8520: LD_INT 25
8522: PUSH
8523: LD_INT 28
8525: PUSH
8526: LD_INT 29
8528: PUSH
8529: LD_INT 30
8531: PUSH
8532: LD_INT 31
8534: PUSH
8535: LD_INT 37
8537: PUSH
8538: LD_INT 38
8540: PUSH
8541: LD_INT 32
8543: PUSH
8544: LD_INT 27
8546: PUSH
8547: LD_INT 33
8549: PUSH
8550: LD_INT 69
8552: PUSH
8553: LD_INT 39
8555: PUSH
8556: LD_INT 34
8558: PUSH
8559: LD_INT 40
8561: PUSH
8562: LD_INT 71
8564: PUSH
8565: LD_INT 23
8567: PUSH
8568: LD_INT 44
8570: PUSH
8571: LD_INT 48
8573: PUSH
8574: LD_INT 49
8576: PUSH
8577: LD_INT 50
8579: PUSH
8580: LD_INT 51
8582: PUSH
8583: LD_INT 52
8585: PUSH
8586: LD_INT 53
8588: PUSH
8589: LD_INT 54
8591: PUSH
8592: LD_INT 55
8594: PUSH
8595: LD_INT 56
8597: PUSH
8598: LD_INT 57
8600: PUSH
8601: LD_INT 58
8603: PUSH
8604: LD_INT 59
8606: PUSH
8607: LD_INT 63
8609: PUSH
8610: LD_INT 64
8612: PUSH
8613: LD_INT 65
8615: PUSH
8616: LD_INT 82
8618: PUSH
8619: LD_INT 83
8621: PUSH
8622: LD_INT 84
8624: PUSH
8625: LD_INT 85
8627: PUSH
8628: LD_INT 86
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: ST_TO_ADDR
8686: GO 8689
8688: POP
// if state > - 1 and state < 3 then
8689: LD_VAR 0 3
8693: PUSH
8694: LD_INT 1
8696: NEG
8697: GREATER
8698: PUSH
8699: LD_VAR 0 3
8703: PUSH
8704: LD_INT 3
8706: LESS
8707: AND
8708: IFFALSE 8765
// for i in result do
8710: LD_ADDR_VAR 0 5
8714: PUSH
8715: LD_VAR 0 4
8719: PUSH
8720: FOR_IN
8721: IFFALSE 8763
// if GetTech ( i , side ) <> state then
8723: LD_VAR 0 5
8727: PPUSH
8728: LD_VAR 0 1
8732: PPUSH
8733: CALL_OW 321
8737: PUSH
8738: LD_VAR 0 3
8742: NONEQUAL
8743: IFFALSE 8761
// result := result diff i ;
8745: LD_ADDR_VAR 0 4
8749: PUSH
8750: LD_VAR 0 4
8754: PUSH
8755: LD_VAR 0 5
8759: DIFF
8760: ST_TO_ADDR
8761: GO 8720
8763: POP
8764: POP
// end ;
8765: LD_VAR 0 4
8769: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8770: LD_INT 0
8772: PPUSH
8773: PPUSH
8774: PPUSH
// result := true ;
8775: LD_ADDR_VAR 0 3
8779: PUSH
8780: LD_INT 1
8782: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8783: LD_ADDR_VAR 0 5
8787: PUSH
8788: LD_VAR 0 2
8792: PPUSH
8793: CALL_OW 480
8797: ST_TO_ADDR
// if not tmp then
8798: LD_VAR 0 5
8802: NOT
8803: IFFALSE 8807
// exit ;
8805: GO 8856
// for i in tmp do
8807: LD_ADDR_VAR 0 4
8811: PUSH
8812: LD_VAR 0 5
8816: PUSH
8817: FOR_IN
8818: IFFALSE 8854
// if GetTech ( i , side ) <> state_researched then
8820: LD_VAR 0 4
8824: PPUSH
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 321
8834: PUSH
8835: LD_INT 2
8837: NONEQUAL
8838: IFFALSE 8852
// begin result := false ;
8840: LD_ADDR_VAR 0 3
8844: PUSH
8845: LD_INT 0
8847: ST_TO_ADDR
// exit ;
8848: POP
8849: POP
8850: GO 8856
// end ;
8852: GO 8817
8854: POP
8855: POP
// end ;
8856: LD_VAR 0 3
8860: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
8861: LD_INT 0
8863: PPUSH
8864: PPUSH
8865: PPUSH
8866: PPUSH
8867: PPUSH
8868: PPUSH
8869: PPUSH
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
8875: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
8876: LD_VAR 0 1
8880: NOT
8881: PUSH
8882: LD_VAR 0 1
8886: PPUSH
8887: CALL_OW 257
8891: PUSH
8892: LD_INT 9
8894: NONEQUAL
8895: OR
8896: IFFALSE 8900
// exit ;
8898: GO 9473
// side := GetSide ( unit ) ;
8900: LD_ADDR_VAR 0 9
8904: PUSH
8905: LD_VAR 0 1
8909: PPUSH
8910: CALL_OW 255
8914: ST_TO_ADDR
// tech_space := tech_spacanom ;
8915: LD_ADDR_VAR 0 12
8919: PUSH
8920: LD_INT 29
8922: ST_TO_ADDR
// tech_time := tech_taurad ;
8923: LD_ADDR_VAR 0 13
8927: PUSH
8928: LD_INT 28
8930: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
8931: LD_ADDR_VAR 0 11
8935: PUSH
8936: LD_VAR 0 1
8940: PPUSH
8941: CALL_OW 310
8945: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
8946: LD_VAR 0 11
8950: PPUSH
8951: CALL_OW 247
8955: PUSH
8956: LD_INT 2
8958: EQUAL
8959: IFFALSE 8963
// exit ;
8961: GO 9473
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8963: LD_ADDR_VAR 0 8
8967: PUSH
8968: LD_INT 81
8970: PUSH
8971: LD_VAR 0 9
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 3
8982: PUSH
8983: LD_INT 21
8985: PUSH
8986: LD_INT 3
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PPUSH
9001: CALL_OW 69
9005: ST_TO_ADDR
// if not tmp then
9006: LD_VAR 0 8
9010: NOT
9011: IFFALSE 9015
// exit ;
9013: GO 9473
// if in_unit then
9015: LD_VAR 0 11
9019: IFFALSE 9043
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9021: LD_ADDR_VAR 0 10
9025: PUSH
9026: LD_VAR 0 8
9030: PPUSH
9031: LD_VAR 0 11
9035: PPUSH
9036: CALL_OW 74
9040: ST_TO_ADDR
9041: GO 9063
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9043: LD_ADDR_VAR 0 10
9047: PUSH
9048: LD_VAR 0 8
9052: PPUSH
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 74
9062: ST_TO_ADDR
// if not enemy then
9063: LD_VAR 0 10
9067: NOT
9068: IFFALSE 9072
// exit ;
9070: GO 9473
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9072: LD_VAR 0 11
9076: PUSH
9077: LD_VAR 0 11
9081: PPUSH
9082: LD_VAR 0 10
9086: PPUSH
9087: CALL_OW 296
9091: PUSH
9092: LD_INT 13
9094: GREATER
9095: AND
9096: PUSH
9097: LD_VAR 0 1
9101: PPUSH
9102: LD_VAR 0 10
9106: PPUSH
9107: CALL_OW 296
9111: PUSH
9112: LD_INT 12
9114: GREATER
9115: OR
9116: IFFALSE 9120
// exit ;
9118: GO 9473
// missile := [ 1 ] ;
9120: LD_ADDR_VAR 0 14
9124: PUSH
9125: LD_INT 1
9127: PUSH
9128: EMPTY
9129: LIST
9130: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9131: LD_VAR 0 9
9135: PPUSH
9136: LD_VAR 0 12
9140: PPUSH
9141: CALL_OW 325
9145: IFFALSE 9174
// missile := Insert ( missile , missile + 1 , 2 ) ;
9147: LD_ADDR_VAR 0 14
9151: PUSH
9152: LD_VAR 0 14
9156: PPUSH
9157: LD_VAR 0 14
9161: PUSH
9162: LD_INT 1
9164: PLUS
9165: PPUSH
9166: LD_INT 2
9168: PPUSH
9169: CALL_OW 2
9173: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9174: LD_VAR 0 9
9178: PPUSH
9179: LD_VAR 0 13
9183: PPUSH
9184: CALL_OW 325
9188: PUSH
9189: LD_VAR 0 10
9193: PPUSH
9194: CALL_OW 255
9198: PPUSH
9199: LD_VAR 0 13
9203: PPUSH
9204: CALL_OW 325
9208: NOT
9209: AND
9210: IFFALSE 9239
// missile := Insert ( missile , missile + 1 , 3 ) ;
9212: LD_ADDR_VAR 0 14
9216: PUSH
9217: LD_VAR 0 14
9221: PPUSH
9222: LD_VAR 0 14
9226: PUSH
9227: LD_INT 1
9229: PLUS
9230: PPUSH
9231: LD_INT 3
9233: PPUSH
9234: CALL_OW 2
9238: ST_TO_ADDR
// if missile < 2 then
9239: LD_VAR 0 14
9243: PUSH
9244: LD_INT 2
9246: LESS
9247: IFFALSE 9251
// exit ;
9249: GO 9473
// x := GetX ( enemy ) ;
9251: LD_ADDR_VAR 0 4
9255: PUSH
9256: LD_VAR 0 10
9260: PPUSH
9261: CALL_OW 250
9265: ST_TO_ADDR
// y := GetY ( enemy ) ;
9266: LD_ADDR_VAR 0 5
9270: PUSH
9271: LD_VAR 0 10
9275: PPUSH
9276: CALL_OW 251
9280: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9281: LD_ADDR_VAR 0 6
9285: PUSH
9286: LD_VAR 0 4
9290: PUSH
9291: LD_INT 1
9293: NEG
9294: PPUSH
9295: LD_INT 1
9297: PPUSH
9298: CALL_OW 12
9302: PLUS
9303: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9304: LD_ADDR_VAR 0 7
9308: PUSH
9309: LD_VAR 0 5
9313: PUSH
9314: LD_INT 1
9316: NEG
9317: PPUSH
9318: LD_INT 1
9320: PPUSH
9321: CALL_OW 12
9325: PLUS
9326: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9327: LD_VAR 0 6
9331: PPUSH
9332: LD_VAR 0 7
9336: PPUSH
9337: CALL_OW 488
9341: NOT
9342: IFFALSE 9364
// begin _x := x ;
9344: LD_ADDR_VAR 0 6
9348: PUSH
9349: LD_VAR 0 4
9353: ST_TO_ADDR
// _y := y ;
9354: LD_ADDR_VAR 0 7
9358: PUSH
9359: LD_VAR 0 5
9363: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9364: LD_ADDR_VAR 0 3
9368: PUSH
9369: LD_INT 1
9371: PPUSH
9372: LD_VAR 0 14
9376: PPUSH
9377: CALL_OW 12
9381: ST_TO_ADDR
// case i of 1 :
9382: LD_VAR 0 3
9386: PUSH
9387: LD_INT 1
9389: DOUBLE
9390: EQUAL
9391: IFTRUE 9395
9393: GO 9412
9395: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9396: LD_VAR 0 1
9400: PPUSH
9401: LD_VAR 0 10
9405: PPUSH
9406: CALL_OW 115
9410: GO 9473
9412: LD_INT 2
9414: DOUBLE
9415: EQUAL
9416: IFTRUE 9420
9418: GO 9442
9420: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9421: LD_VAR 0 1
9425: PPUSH
9426: LD_VAR 0 6
9430: PPUSH
9431: LD_VAR 0 7
9435: PPUSH
9436: CALL_OW 153
9440: GO 9473
9442: LD_INT 3
9444: DOUBLE
9445: EQUAL
9446: IFTRUE 9450
9448: GO 9472
9450: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9451: LD_VAR 0 1
9455: PPUSH
9456: LD_VAR 0 6
9460: PPUSH
9461: LD_VAR 0 7
9465: PPUSH
9466: CALL_OW 154
9470: GO 9473
9472: POP
// end ;
9473: LD_VAR 0 2
9477: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9478: LD_INT 0
9480: PPUSH
9481: PPUSH
9482: PPUSH
9483: PPUSH
9484: PPUSH
9485: PPUSH
// if not unit or not building then
9486: LD_VAR 0 1
9490: NOT
9491: PUSH
9492: LD_VAR 0 2
9496: NOT
9497: OR
9498: IFFALSE 9502
// exit ;
9500: GO 9660
// x := GetX ( building ) ;
9502: LD_ADDR_VAR 0 5
9506: PUSH
9507: LD_VAR 0 2
9511: PPUSH
9512: CALL_OW 250
9516: ST_TO_ADDR
// y := GetY ( building ) ;
9517: LD_ADDR_VAR 0 6
9521: PUSH
9522: LD_VAR 0 2
9526: PPUSH
9527: CALL_OW 251
9531: ST_TO_ADDR
// for i = 0 to 5 do
9532: LD_ADDR_VAR 0 4
9536: PUSH
9537: DOUBLE
9538: LD_INT 0
9540: DEC
9541: ST_TO_ADDR
9542: LD_INT 5
9544: PUSH
9545: FOR_TO
9546: IFFALSE 9658
// begin _x := ShiftX ( x , i , 3 ) ;
9548: LD_ADDR_VAR 0 7
9552: PUSH
9553: LD_VAR 0 5
9557: PPUSH
9558: LD_VAR 0 4
9562: PPUSH
9563: LD_INT 3
9565: PPUSH
9566: CALL_OW 272
9570: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9571: LD_ADDR_VAR 0 8
9575: PUSH
9576: LD_VAR 0 6
9580: PPUSH
9581: LD_VAR 0 4
9585: PPUSH
9586: LD_INT 3
9588: PPUSH
9589: CALL_OW 273
9593: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9594: LD_VAR 0 7
9598: PPUSH
9599: LD_VAR 0 8
9603: PPUSH
9604: CALL_OW 488
9608: NOT
9609: IFFALSE 9613
// continue ;
9611: GO 9545
// if HexInfo ( _x , _y ) = 0 then
9613: LD_VAR 0 7
9617: PPUSH
9618: LD_VAR 0 8
9622: PPUSH
9623: CALL_OW 428
9627: PUSH
9628: LD_INT 0
9630: EQUAL
9631: IFFALSE 9656
// begin ComMoveXY ( unit , _x , _y ) ;
9633: LD_VAR 0 1
9637: PPUSH
9638: LD_VAR 0 7
9642: PPUSH
9643: LD_VAR 0 8
9647: PPUSH
9648: CALL_OW 111
// exit ;
9652: POP
9653: POP
9654: GO 9660
// end ; end ;
9656: GO 9545
9658: POP
9659: POP
// end ;
9660: LD_VAR 0 3
9664: RET
// export function ScanBase ( side , base_area ) ; begin
9665: LD_INT 0
9667: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9668: LD_ADDR_VAR 0 3
9672: PUSH
9673: LD_VAR 0 2
9677: PPUSH
9678: LD_INT 81
9680: PUSH
9681: LD_VAR 0 1
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PPUSH
9690: CALL_OW 70
9694: ST_TO_ADDR
// end ;
9695: LD_VAR 0 3
9699: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9700: LD_INT 0
9702: PPUSH
9703: PPUSH
9704: PPUSH
9705: PPUSH
// result := false ;
9706: LD_ADDR_VAR 0 2
9710: PUSH
9711: LD_INT 0
9713: ST_TO_ADDR
// side := GetSide ( unit ) ;
9714: LD_ADDR_VAR 0 3
9718: PUSH
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 255
9728: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9729: LD_ADDR_VAR 0 4
9733: PUSH
9734: LD_VAR 0 1
9738: PPUSH
9739: CALL_OW 248
9743: ST_TO_ADDR
// case nat of 1 :
9744: LD_VAR 0 4
9748: PUSH
9749: LD_INT 1
9751: DOUBLE
9752: EQUAL
9753: IFTRUE 9757
9755: GO 9768
9757: POP
// tech := tech_lassight ; 2 :
9758: LD_ADDR_VAR 0 5
9762: PUSH
9763: LD_INT 12
9765: ST_TO_ADDR
9766: GO 9807
9768: LD_INT 2
9770: DOUBLE
9771: EQUAL
9772: IFTRUE 9776
9774: GO 9787
9776: POP
// tech := tech_mortar ; 3 :
9777: LD_ADDR_VAR 0 5
9781: PUSH
9782: LD_INT 41
9784: ST_TO_ADDR
9785: GO 9807
9787: LD_INT 3
9789: DOUBLE
9790: EQUAL
9791: IFTRUE 9795
9793: GO 9806
9795: POP
// tech := tech_bazooka ; end ;
9796: LD_ADDR_VAR 0 5
9800: PUSH
9801: LD_INT 44
9803: ST_TO_ADDR
9804: GO 9807
9806: POP
// if Researched ( side , tech ) then
9807: LD_VAR 0 3
9811: PPUSH
9812: LD_VAR 0 5
9816: PPUSH
9817: CALL_OW 325
9821: IFFALSE 9848
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9823: LD_ADDR_VAR 0 2
9827: PUSH
9828: LD_INT 5
9830: PUSH
9831: LD_INT 8
9833: PUSH
9834: LD_INT 9
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: PUSH
9842: LD_VAR 0 4
9846: ARRAY
9847: ST_TO_ADDR
// end ;
9848: LD_VAR 0 2
9852: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
9853: LD_INT 0
9855: PPUSH
9856: PPUSH
9857: PPUSH
// if not mines then
9858: LD_VAR 0 2
9862: NOT
9863: IFFALSE 9867
// exit ;
9865: GO 10011
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9867: LD_ADDR_VAR 0 5
9871: PUSH
9872: LD_INT 81
9874: PUSH
9875: LD_VAR 0 1
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 3
9886: PUSH
9887: LD_INT 21
9889: PUSH
9890: LD_INT 3
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PPUSH
9905: CALL_OW 69
9909: ST_TO_ADDR
// for i in mines do
9910: LD_ADDR_VAR 0 4
9914: PUSH
9915: LD_VAR 0 2
9919: PUSH
9920: FOR_IN
9921: IFFALSE 10009
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
9923: LD_VAR 0 4
9927: PUSH
9928: LD_INT 1
9930: ARRAY
9931: PPUSH
9932: LD_VAR 0 4
9936: PUSH
9937: LD_INT 2
9939: ARRAY
9940: PPUSH
9941: CALL_OW 458
9945: NOT
9946: IFFALSE 9950
// continue ;
9948: GO 9920
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
9950: LD_VAR 0 4
9954: PUSH
9955: LD_INT 1
9957: ARRAY
9958: PPUSH
9959: LD_VAR 0 4
9963: PUSH
9964: LD_INT 2
9966: ARRAY
9967: PPUSH
9968: CALL_OW 428
9972: PUSH
9973: LD_VAR 0 5
9977: IN
9978: IFFALSE 10007
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
9980: LD_VAR 0 4
9984: PUSH
9985: LD_INT 1
9987: ARRAY
9988: PPUSH
9989: LD_VAR 0 4
9993: PUSH
9994: LD_INT 2
9996: ARRAY
9997: PPUSH
9998: LD_VAR 0 1
10002: PPUSH
10003: CALL_OW 456
// end ;
10007: GO 9920
10009: POP
10010: POP
// end ;
10011: LD_VAR 0 3
10015: RET
// export function Count ( array ) ; var i ; begin
10016: LD_INT 0
10018: PPUSH
10019: PPUSH
// result := 0 ;
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_INT 0
10027: ST_TO_ADDR
// for i in array do
10028: LD_ADDR_VAR 0 3
10032: PUSH
10033: LD_VAR 0 1
10037: PUSH
10038: FOR_IN
10039: IFFALSE 10063
// if i then
10041: LD_VAR 0 3
10045: IFFALSE 10061
// result := result + 1 ;
10047: LD_ADDR_VAR 0 2
10051: PUSH
10052: LD_VAR 0 2
10056: PUSH
10057: LD_INT 1
10059: PLUS
10060: ST_TO_ADDR
10061: GO 10038
10063: POP
10064: POP
// end ;
10065: LD_VAR 0 2
10069: RET
// export function IsEmpty ( building ) ; begin
10070: LD_INT 0
10072: PPUSH
// if not building then
10073: LD_VAR 0 1
10077: NOT
10078: IFFALSE 10082
// exit ;
10080: GO 10125
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10082: LD_ADDR_VAR 0 2
10086: PUSH
10087: LD_VAR 0 1
10091: PUSH
10092: LD_INT 22
10094: PUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 255
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: LD_INT 58
10111: PUSH
10112: EMPTY
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PPUSH
10119: CALL_OW 69
10123: IN
10124: ST_TO_ADDR
// end ;
10125: LD_VAR 0 2
10129: RET
// export function IsNotFull ( building ) ; begin
10130: LD_INT 0
10132: PPUSH
// if not building then
10133: LD_VAR 0 1
10137: NOT
10138: IFFALSE 10142
// exit ;
10140: GO 10161
// result := UnitsInside ( building ) < 6 ;
10142: LD_ADDR_VAR 0 2
10146: PUSH
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 313
10156: PUSH
10157: LD_INT 6
10159: LESS
10160: ST_TO_ADDR
// end ;
10161: LD_VAR 0 2
10165: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10166: LD_INT 0
10168: PPUSH
10169: PPUSH
10170: PPUSH
10171: PPUSH
// tmp := [ ] ;
10172: LD_ADDR_VAR 0 3
10176: PUSH
10177: EMPTY
10178: ST_TO_ADDR
// list := [ ] ;
10179: LD_ADDR_VAR 0 5
10183: PUSH
10184: EMPTY
10185: ST_TO_ADDR
// for i = 16 to 25 do
10186: LD_ADDR_VAR 0 4
10190: PUSH
10191: DOUBLE
10192: LD_INT 16
10194: DEC
10195: ST_TO_ADDR
10196: LD_INT 25
10198: PUSH
10199: FOR_TO
10200: IFFALSE 10273
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10202: LD_ADDR_VAR 0 3
10206: PUSH
10207: LD_VAR 0 3
10211: PUSH
10212: LD_INT 22
10214: PUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: CALL_OW 255
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 91
10231: PUSH
10232: LD_VAR 0 1
10236: PUSH
10237: LD_INT 6
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 30
10247: PUSH
10248: LD_VAR 0 4
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: LIST
10261: PUSH
10262: EMPTY
10263: LIST
10264: PPUSH
10265: CALL_OW 69
10269: ADD
10270: ST_TO_ADDR
10271: GO 10199
10273: POP
10274: POP
// for i = 1 to tmp do
10275: LD_ADDR_VAR 0 4
10279: PUSH
10280: DOUBLE
10281: LD_INT 1
10283: DEC
10284: ST_TO_ADDR
10285: LD_VAR 0 3
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10379
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10293: LD_ADDR_VAR 0 5
10297: PUSH
10298: LD_VAR 0 5
10302: PUSH
10303: LD_VAR 0 3
10307: PUSH
10308: LD_VAR 0 4
10312: ARRAY
10313: PPUSH
10314: CALL_OW 266
10318: PUSH
10319: LD_VAR 0 3
10323: PUSH
10324: LD_VAR 0 4
10328: ARRAY
10329: PPUSH
10330: CALL_OW 250
10334: PUSH
10335: LD_VAR 0 3
10339: PUSH
10340: LD_VAR 0 4
10344: ARRAY
10345: PPUSH
10346: CALL_OW 251
10350: PUSH
10351: LD_VAR 0 3
10355: PUSH
10356: LD_VAR 0 4
10360: ARRAY
10361: PPUSH
10362: CALL_OW 254
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: PUSH
10373: EMPTY
10374: LIST
10375: ADD
10376: ST_TO_ADDR
10377: GO 10290
10379: POP
10380: POP
// result := list ;
10381: LD_ADDR_VAR 0 2
10385: PUSH
10386: LD_VAR 0 5
10390: ST_TO_ADDR
// end ;
10391: LD_VAR 0 2
10395: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10396: LD_INT 0
10398: PPUSH
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
// if not factory then
10405: LD_VAR 0 1
10409: NOT
10410: IFFALSE 10414
// exit ;
10412: GO 11007
// if control = control_apeman then
10414: LD_VAR 0 4
10418: PUSH
10419: LD_INT 5
10421: EQUAL
10422: IFFALSE 10531
// begin tmp := UnitsInside ( factory ) ;
10424: LD_ADDR_VAR 0 8
10428: PUSH
10429: LD_VAR 0 1
10433: PPUSH
10434: CALL_OW 313
10438: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10439: LD_VAR 0 8
10443: PPUSH
10444: LD_INT 25
10446: PUSH
10447: LD_INT 12
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PPUSH
10454: CALL_OW 72
10458: NOT
10459: IFFALSE 10469
// control := control_manual ;
10461: LD_ADDR_VAR 0 4
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10469: LD_ADDR_VAR 0 8
10473: PUSH
10474: LD_VAR 0 1
10478: PPUSH
10479: CALL 10166 0 1
10483: ST_TO_ADDR
// if tmp then
10484: LD_VAR 0 8
10488: IFFALSE 10531
// begin for i in tmp do
10490: LD_ADDR_VAR 0 7
10494: PUSH
10495: LD_VAR 0 8
10499: PUSH
10500: FOR_IN
10501: IFFALSE 10529
// if i [ 1 ] = b_ext_radio then
10503: LD_VAR 0 7
10507: PUSH
10508: LD_INT 1
10510: ARRAY
10511: PUSH
10512: LD_INT 22
10514: EQUAL
10515: IFFALSE 10527
// begin control := control_remote ;
10517: LD_ADDR_VAR 0 4
10521: PUSH
10522: LD_INT 2
10524: ST_TO_ADDR
// break ;
10525: GO 10529
// end ;
10527: GO 10500
10529: POP
10530: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10531: LD_VAR 0 1
10535: PPUSH
10536: LD_VAR 0 2
10540: PPUSH
10541: LD_VAR 0 3
10545: PPUSH
10546: LD_VAR 0 4
10550: PPUSH
10551: LD_VAR 0 5
10555: PPUSH
10556: CALL_OW 448
10560: IFFALSE 10595
// begin result := [ chassis , engine , control , weapon ] ;
10562: LD_ADDR_VAR 0 6
10566: PUSH
10567: LD_VAR 0 2
10571: PUSH
10572: LD_VAR 0 3
10576: PUSH
10577: LD_VAR 0 4
10581: PUSH
10582: LD_VAR 0 5
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: ST_TO_ADDR
// exit ;
10593: GO 11007
// end ; _chassis := AvailableChassisList ( factory ) ;
10595: LD_ADDR_VAR 0 9
10599: PUSH
10600: LD_VAR 0 1
10604: PPUSH
10605: CALL_OW 475
10609: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10610: LD_ADDR_VAR 0 11
10614: PUSH
10615: LD_VAR 0 1
10619: PPUSH
10620: CALL_OW 476
10624: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10625: LD_ADDR_VAR 0 12
10629: PUSH
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 477
10639: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10640: LD_ADDR_VAR 0 10
10644: PUSH
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 478
10654: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10655: LD_VAR 0 9
10659: NOT
10660: PUSH
10661: LD_VAR 0 11
10665: NOT
10666: OR
10667: PUSH
10668: LD_VAR 0 12
10672: NOT
10673: OR
10674: PUSH
10675: LD_VAR 0 10
10679: NOT
10680: OR
10681: IFFALSE 10716
// begin result := [ chassis , engine , control , weapon ] ;
10683: LD_ADDR_VAR 0 6
10687: PUSH
10688: LD_VAR 0 2
10692: PUSH
10693: LD_VAR 0 3
10697: PUSH
10698: LD_VAR 0 4
10702: PUSH
10703: LD_VAR 0 5
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: ST_TO_ADDR
// exit ;
10714: GO 11007
// end ; if not chassis in _chassis then
10716: LD_VAR 0 2
10720: PUSH
10721: LD_VAR 0 9
10725: IN
10726: NOT
10727: IFFALSE 10753
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_VAR 0 9
10738: PUSH
10739: LD_INT 1
10741: PPUSH
10742: LD_VAR 0 9
10746: PPUSH
10747: CALL_OW 12
10751: ARRAY
10752: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10753: LD_VAR 0 2
10757: PPUSH
10758: LD_VAR 0 3
10762: PPUSH
10763: CALL 11012 0 2
10767: NOT
10768: IFFALSE 10827
// repeat engine := _engine [ 1 ] ;
10770: LD_ADDR_VAR 0 3
10774: PUSH
10775: LD_VAR 0 11
10779: PUSH
10780: LD_INT 1
10782: ARRAY
10783: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10784: LD_ADDR_VAR 0 11
10788: PUSH
10789: LD_VAR 0 11
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 3
10801: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10802: LD_VAR 0 2
10806: PPUSH
10807: LD_VAR 0 3
10811: PPUSH
10812: CALL 11012 0 2
10816: PUSH
10817: LD_VAR 0 11
10821: PUSH
10822: EMPTY
10823: EQUAL
10824: OR
10825: IFFALSE 10770
// if not control in _control then
10827: LD_VAR 0 4
10831: PUSH
10832: LD_VAR 0 12
10836: IN
10837: NOT
10838: IFFALSE 10864
// control := _control [ rand ( 1 , _control ) ] ;
10840: LD_ADDR_VAR 0 4
10844: PUSH
10845: LD_VAR 0 12
10849: PUSH
10850: LD_INT 1
10852: PPUSH
10853: LD_VAR 0 12
10857: PPUSH
10858: CALL_OW 12
10862: ARRAY
10863: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
10864: LD_VAR 0 2
10868: PPUSH
10869: LD_VAR 0 5
10873: PPUSH
10874: CALL 11232 0 2
10878: NOT
10879: IFFALSE 10938
// repeat weapon := _weapon [ 1 ] ;
10881: LD_ADDR_VAR 0 5
10885: PUSH
10886: LD_VAR 0 10
10890: PUSH
10891: LD_INT 1
10893: ARRAY
10894: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
10895: LD_ADDR_VAR 0 10
10899: PUSH
10900: LD_VAR 0 10
10904: PPUSH
10905: LD_INT 1
10907: PPUSH
10908: CALL_OW 3
10912: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
10913: LD_VAR 0 2
10917: PPUSH
10918: LD_VAR 0 5
10922: PPUSH
10923: CALL 11232 0 2
10927: PUSH
10928: LD_VAR 0 10
10932: PUSH
10933: EMPTY
10934: EQUAL
10935: OR
10936: IFFALSE 10881
// result := [ ] ;
10938: LD_ADDR_VAR 0 6
10942: PUSH
10943: EMPTY
10944: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10945: LD_VAR 0 1
10949: PPUSH
10950: LD_VAR 0 2
10954: PPUSH
10955: LD_VAR 0 3
10959: PPUSH
10960: LD_VAR 0 4
10964: PPUSH
10965: LD_VAR 0 5
10969: PPUSH
10970: CALL_OW 448
10974: IFFALSE 11007
// result := [ chassis , engine , control , weapon ] ;
10976: LD_ADDR_VAR 0 6
10980: PUSH
10981: LD_VAR 0 2
10985: PUSH
10986: LD_VAR 0 3
10990: PUSH
10991: LD_VAR 0 4
10995: PUSH
10996: LD_VAR 0 5
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: ST_TO_ADDR
// end ;
11007: LD_VAR 0 6
11011: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11012: LD_INT 0
11014: PPUSH
// if not chassis or not engine then
11015: LD_VAR 0 1
11019: NOT
11020: PUSH
11021: LD_VAR 0 2
11025: NOT
11026: OR
11027: IFFALSE 11031
// exit ;
11029: GO 11227
// case engine of engine_solar :
11031: LD_VAR 0 2
11035: PUSH
11036: LD_INT 2
11038: DOUBLE
11039: EQUAL
11040: IFTRUE 11044
11042: GO 11082
11044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11045: LD_ADDR_VAR 0 3
11049: PUSH
11050: LD_INT 11
11052: PUSH
11053: LD_INT 12
11055: PUSH
11056: LD_INT 13
11058: PUSH
11059: LD_INT 14
11061: PUSH
11062: LD_INT 1
11064: PUSH
11065: LD_INT 2
11067: PUSH
11068: LD_INT 3
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: ST_TO_ADDR
11080: GO 11211
11082: LD_INT 1
11084: DOUBLE
11085: EQUAL
11086: IFTRUE 11090
11088: GO 11152
11090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11091: LD_ADDR_VAR 0 3
11095: PUSH
11096: LD_INT 11
11098: PUSH
11099: LD_INT 12
11101: PUSH
11102: LD_INT 13
11104: PUSH
11105: LD_INT 14
11107: PUSH
11108: LD_INT 1
11110: PUSH
11111: LD_INT 2
11113: PUSH
11114: LD_INT 3
11116: PUSH
11117: LD_INT 4
11119: PUSH
11120: LD_INT 5
11122: PUSH
11123: LD_INT 21
11125: PUSH
11126: LD_INT 23
11128: PUSH
11129: LD_INT 22
11131: PUSH
11132: LD_INT 24
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: ST_TO_ADDR
11150: GO 11211
11152: LD_INT 3
11154: DOUBLE
11155: EQUAL
11156: IFTRUE 11160
11158: GO 11210
11160: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11161: LD_ADDR_VAR 0 3
11165: PUSH
11166: LD_INT 13
11168: PUSH
11169: LD_INT 14
11171: PUSH
11172: LD_INT 2
11174: PUSH
11175: LD_INT 3
11177: PUSH
11178: LD_INT 4
11180: PUSH
11181: LD_INT 5
11183: PUSH
11184: LD_INT 21
11186: PUSH
11187: LD_INT 22
11189: PUSH
11190: LD_INT 23
11192: PUSH
11193: LD_INT 24
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: ST_TO_ADDR
11208: GO 11211
11210: POP
// result := ( chassis in result ) ;
11211: LD_ADDR_VAR 0 3
11215: PUSH
11216: LD_VAR 0 1
11220: PUSH
11221: LD_VAR 0 3
11225: IN
11226: ST_TO_ADDR
// end ;
11227: LD_VAR 0 3
11231: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11232: LD_INT 0
11234: PPUSH
// if not chassis or not weapon then
11235: LD_VAR 0 1
11239: NOT
11240: PUSH
11241: LD_VAR 0 2
11245: NOT
11246: OR
11247: IFFALSE 11251
// exit ;
11249: GO 12313
// case weapon of us_machine_gun :
11251: LD_VAR 0 2
11255: PUSH
11256: LD_INT 2
11258: DOUBLE
11259: EQUAL
11260: IFTRUE 11264
11262: GO 11294
11264: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11265: LD_ADDR_VAR 0 3
11269: PUSH
11270: LD_INT 1
11272: PUSH
11273: LD_INT 2
11275: PUSH
11276: LD_INT 3
11278: PUSH
11279: LD_INT 4
11281: PUSH
11282: LD_INT 5
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: ST_TO_ADDR
11292: GO 12297
11294: LD_INT 3
11296: DOUBLE
11297: EQUAL
11298: IFTRUE 11302
11300: GO 11332
11302: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11303: LD_ADDR_VAR 0 3
11307: PUSH
11308: LD_INT 1
11310: PUSH
11311: LD_INT 2
11313: PUSH
11314: LD_INT 3
11316: PUSH
11317: LD_INT 4
11319: PUSH
11320: LD_INT 5
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: ST_TO_ADDR
11330: GO 12297
11332: LD_INT 11
11334: DOUBLE
11335: EQUAL
11336: IFTRUE 11340
11338: GO 11370
11340: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11341: LD_ADDR_VAR 0 3
11345: PUSH
11346: LD_INT 1
11348: PUSH
11349: LD_INT 2
11351: PUSH
11352: LD_INT 3
11354: PUSH
11355: LD_INT 4
11357: PUSH
11358: LD_INT 5
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: ST_TO_ADDR
11368: GO 12297
11370: LD_INT 4
11372: DOUBLE
11373: EQUAL
11374: IFTRUE 11378
11376: GO 11404
11378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11379: LD_ADDR_VAR 0 3
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_INT 3
11389: PUSH
11390: LD_INT 4
11392: PUSH
11393: LD_INT 5
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: ST_TO_ADDR
11402: GO 12297
11404: LD_INT 5
11406: DOUBLE
11407: EQUAL
11408: IFTRUE 11412
11410: GO 11438
11412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11413: LD_ADDR_VAR 0 3
11417: PUSH
11418: LD_INT 2
11420: PUSH
11421: LD_INT 3
11423: PUSH
11424: LD_INT 4
11426: PUSH
11427: LD_INT 5
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: ST_TO_ADDR
11436: GO 12297
11438: LD_INT 9
11440: DOUBLE
11441: EQUAL
11442: IFTRUE 11446
11444: GO 11472
11446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11447: LD_ADDR_VAR 0 3
11451: PUSH
11452: LD_INT 2
11454: PUSH
11455: LD_INT 3
11457: PUSH
11458: LD_INT 4
11460: PUSH
11461: LD_INT 5
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: ST_TO_ADDR
11470: GO 12297
11472: LD_INT 7
11474: DOUBLE
11475: EQUAL
11476: IFTRUE 11480
11478: GO 11506
11480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11481: LD_ADDR_VAR 0 3
11485: PUSH
11486: LD_INT 2
11488: PUSH
11489: LD_INT 3
11491: PUSH
11492: LD_INT 4
11494: PUSH
11495: LD_INT 5
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: ST_TO_ADDR
11504: GO 12297
11506: LD_INT 12
11508: DOUBLE
11509: EQUAL
11510: IFTRUE 11514
11512: GO 11540
11514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11515: LD_ADDR_VAR 0 3
11519: PUSH
11520: LD_INT 2
11522: PUSH
11523: LD_INT 3
11525: PUSH
11526: LD_INT 4
11528: PUSH
11529: LD_INT 5
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: ST_TO_ADDR
11538: GO 12297
11540: LD_INT 13
11542: DOUBLE
11543: EQUAL
11544: IFTRUE 11548
11546: GO 11574
11548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11549: LD_ADDR_VAR 0 3
11553: PUSH
11554: LD_INT 2
11556: PUSH
11557: LD_INT 3
11559: PUSH
11560: LD_INT 4
11562: PUSH
11563: LD_INT 5
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: ST_TO_ADDR
11572: GO 12297
11574: LD_INT 14
11576: DOUBLE
11577: EQUAL
11578: IFTRUE 11582
11580: GO 11600
11582: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11583: LD_ADDR_VAR 0 3
11587: PUSH
11588: LD_INT 4
11590: PUSH
11591: LD_INT 5
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: ST_TO_ADDR
11598: GO 12297
11600: LD_INT 6
11602: DOUBLE
11603: EQUAL
11604: IFTRUE 11608
11606: GO 11626
11608: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11609: LD_ADDR_VAR 0 3
11613: PUSH
11614: LD_INT 4
11616: PUSH
11617: LD_INT 5
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: ST_TO_ADDR
11624: GO 12297
11626: LD_INT 10
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11652
11634: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11635: LD_ADDR_VAR 0 3
11639: PUSH
11640: LD_INT 4
11642: PUSH
11643: LD_INT 5
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: ST_TO_ADDR
11650: GO 12297
11652: LD_INT 22
11654: DOUBLE
11655: EQUAL
11656: IFTRUE 11660
11658: GO 11686
11660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11661: LD_ADDR_VAR 0 3
11665: PUSH
11666: LD_INT 11
11668: PUSH
11669: LD_INT 12
11671: PUSH
11672: LD_INT 13
11674: PUSH
11675: LD_INT 14
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: ST_TO_ADDR
11684: GO 12297
11686: LD_INT 23
11688: DOUBLE
11689: EQUAL
11690: IFTRUE 11694
11692: GO 11720
11694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11695: LD_ADDR_VAR 0 3
11699: PUSH
11700: LD_INT 11
11702: PUSH
11703: LD_INT 12
11705: PUSH
11706: LD_INT 13
11708: PUSH
11709: LD_INT 14
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: ST_TO_ADDR
11718: GO 12297
11720: LD_INT 24
11722: DOUBLE
11723: EQUAL
11724: IFTRUE 11728
11726: GO 11754
11728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11729: LD_ADDR_VAR 0 3
11733: PUSH
11734: LD_INT 11
11736: PUSH
11737: LD_INT 12
11739: PUSH
11740: LD_INT 13
11742: PUSH
11743: LD_INT 14
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: ST_TO_ADDR
11752: GO 12297
11754: LD_INT 30
11756: DOUBLE
11757: EQUAL
11758: IFTRUE 11762
11760: GO 11788
11762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11763: LD_ADDR_VAR 0 3
11767: PUSH
11768: LD_INT 11
11770: PUSH
11771: LD_INT 12
11773: PUSH
11774: LD_INT 13
11776: PUSH
11777: LD_INT 14
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: ST_TO_ADDR
11786: GO 12297
11788: LD_INT 25
11790: DOUBLE
11791: EQUAL
11792: IFTRUE 11796
11794: GO 11814
11796: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11797: LD_ADDR_VAR 0 3
11801: PUSH
11802: LD_INT 13
11804: PUSH
11805: LD_INT 14
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: ST_TO_ADDR
11812: GO 12297
11814: LD_INT 27
11816: DOUBLE
11817: EQUAL
11818: IFTRUE 11822
11820: GO 11840
11822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
11823: LD_ADDR_VAR 0 3
11827: PUSH
11828: LD_INT 13
11830: PUSH
11831: LD_INT 14
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: ST_TO_ADDR
11838: GO 12297
11840: LD_EXP 44
11844: DOUBLE
11845: EQUAL
11846: IFTRUE 11850
11848: GO 11876
11850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
11851: LD_ADDR_VAR 0 3
11855: PUSH
11856: LD_INT 11
11858: PUSH
11859: LD_INT 12
11861: PUSH
11862: LD_INT 13
11864: PUSH
11865: LD_INT 14
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: ST_TO_ADDR
11874: GO 12297
11876: LD_INT 28
11878: DOUBLE
11879: EQUAL
11880: IFTRUE 11884
11882: GO 11902
11884: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
11885: LD_ADDR_VAR 0 3
11889: PUSH
11890: LD_INT 13
11892: PUSH
11893: LD_INT 14
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: ST_TO_ADDR
11900: GO 12297
11902: LD_INT 29
11904: DOUBLE
11905: EQUAL
11906: IFTRUE 11910
11908: GO 11928
11910: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
11911: LD_ADDR_VAR 0 3
11915: PUSH
11916: LD_INT 13
11918: PUSH
11919: LD_INT 14
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: ST_TO_ADDR
11926: GO 12297
11928: LD_INT 31
11930: DOUBLE
11931: EQUAL
11932: IFTRUE 11936
11934: GO 11954
11936: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
11937: LD_ADDR_VAR 0 3
11941: PUSH
11942: LD_INT 13
11944: PUSH
11945: LD_INT 14
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: ST_TO_ADDR
11952: GO 12297
11954: LD_INT 26
11956: DOUBLE
11957: EQUAL
11958: IFTRUE 11962
11960: GO 11980
11962: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
11963: LD_ADDR_VAR 0 3
11967: PUSH
11968: LD_INT 13
11970: PUSH
11971: LD_INT 14
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: ST_TO_ADDR
11978: GO 12297
11980: LD_INT 42
11982: DOUBLE
11983: EQUAL
11984: IFTRUE 11988
11986: GO 12014
11988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
11989: LD_ADDR_VAR 0 3
11993: PUSH
11994: LD_INT 21
11996: PUSH
11997: LD_INT 22
11999: PUSH
12000: LD_INT 23
12002: PUSH
12003: LD_INT 24
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: ST_TO_ADDR
12012: GO 12297
12014: LD_INT 43
12016: DOUBLE
12017: EQUAL
12018: IFTRUE 12022
12020: GO 12048
12022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12023: LD_ADDR_VAR 0 3
12027: PUSH
12028: LD_INT 21
12030: PUSH
12031: LD_INT 22
12033: PUSH
12034: LD_INT 23
12036: PUSH
12037: LD_INT 24
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: ST_TO_ADDR
12046: GO 12297
12048: LD_INT 44
12050: DOUBLE
12051: EQUAL
12052: IFTRUE 12056
12054: GO 12082
12056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12057: LD_ADDR_VAR 0 3
12061: PUSH
12062: LD_INT 21
12064: PUSH
12065: LD_INT 22
12067: PUSH
12068: LD_INT 23
12070: PUSH
12071: LD_INT 24
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: ST_TO_ADDR
12080: GO 12297
12082: LD_INT 45
12084: DOUBLE
12085: EQUAL
12086: IFTRUE 12090
12088: GO 12116
12090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12091: LD_ADDR_VAR 0 3
12095: PUSH
12096: LD_INT 21
12098: PUSH
12099: LD_INT 22
12101: PUSH
12102: LD_INT 23
12104: PUSH
12105: LD_INT 24
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: ST_TO_ADDR
12114: GO 12297
12116: LD_INT 49
12118: DOUBLE
12119: EQUAL
12120: IFTRUE 12124
12122: GO 12150
12124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12125: LD_ADDR_VAR 0 3
12129: PUSH
12130: LD_INT 21
12132: PUSH
12133: LD_INT 22
12135: PUSH
12136: LD_INT 23
12138: PUSH
12139: LD_INT 24
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: ST_TO_ADDR
12148: GO 12297
12150: LD_INT 51
12152: DOUBLE
12153: EQUAL
12154: IFTRUE 12158
12156: GO 12184
12158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12159: LD_ADDR_VAR 0 3
12163: PUSH
12164: LD_INT 21
12166: PUSH
12167: LD_INT 22
12169: PUSH
12170: LD_INT 23
12172: PUSH
12173: LD_INT 24
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: ST_TO_ADDR
12182: GO 12297
12184: LD_INT 52
12186: DOUBLE
12187: EQUAL
12188: IFTRUE 12192
12190: GO 12218
12192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12193: LD_ADDR_VAR 0 3
12197: PUSH
12198: LD_INT 21
12200: PUSH
12201: LD_INT 22
12203: PUSH
12204: LD_INT 23
12206: PUSH
12207: LD_INT 24
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: ST_TO_ADDR
12216: GO 12297
12218: LD_INT 53
12220: DOUBLE
12221: EQUAL
12222: IFTRUE 12226
12224: GO 12244
12226: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12227: LD_ADDR_VAR 0 3
12231: PUSH
12232: LD_INT 23
12234: PUSH
12235: LD_INT 24
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: ST_TO_ADDR
12242: GO 12297
12244: LD_INT 46
12246: DOUBLE
12247: EQUAL
12248: IFTRUE 12252
12250: GO 12270
12252: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12253: LD_ADDR_VAR 0 3
12257: PUSH
12258: LD_INT 23
12260: PUSH
12261: LD_INT 24
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: ST_TO_ADDR
12268: GO 12297
12270: LD_INT 47
12272: DOUBLE
12273: EQUAL
12274: IFTRUE 12278
12276: GO 12296
12278: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: LD_INT 23
12286: PUSH
12287: LD_INT 24
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: ST_TO_ADDR
12294: GO 12297
12296: POP
// result := ( chassis in result ) ;
12297: LD_ADDR_VAR 0 3
12301: PUSH
12302: LD_VAR 0 1
12306: PUSH
12307: LD_VAR 0 3
12311: IN
12312: ST_TO_ADDR
// end ;
12313: LD_VAR 0 3
12317: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12318: LD_INT 0
12320: PPUSH
12321: PPUSH
12322: PPUSH
12323: PPUSH
12324: PPUSH
12325: PPUSH
12326: PPUSH
// result := array ;
12327: LD_ADDR_VAR 0 5
12331: PUSH
12332: LD_VAR 0 1
12336: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12337: LD_VAR 0 1
12341: NOT
12342: PUSH
12343: LD_VAR 0 2
12347: NOT
12348: OR
12349: PUSH
12350: LD_VAR 0 3
12354: NOT
12355: OR
12356: PUSH
12357: LD_VAR 0 2
12361: PUSH
12362: LD_VAR 0 1
12366: GREATER
12367: OR
12368: PUSH
12369: LD_VAR 0 3
12373: PUSH
12374: LD_VAR 0 1
12378: GREATER
12379: OR
12380: IFFALSE 12384
// exit ;
12382: GO 12680
// if direction then
12384: LD_VAR 0 4
12388: IFFALSE 12452
// begin d := 1 ;
12390: LD_ADDR_VAR 0 9
12394: PUSH
12395: LD_INT 1
12397: ST_TO_ADDR
// if i_from > i_to then
12398: LD_VAR 0 2
12402: PUSH
12403: LD_VAR 0 3
12407: GREATER
12408: IFFALSE 12434
// length := ( array - i_from ) + i_to else
12410: LD_ADDR_VAR 0 11
12414: PUSH
12415: LD_VAR 0 1
12419: PUSH
12420: LD_VAR 0 2
12424: MINUS
12425: PUSH
12426: LD_VAR 0 3
12430: PLUS
12431: ST_TO_ADDR
12432: GO 12450
// length := i_to - i_from ;
12434: LD_ADDR_VAR 0 11
12438: PUSH
12439: LD_VAR 0 3
12443: PUSH
12444: LD_VAR 0 2
12448: MINUS
12449: ST_TO_ADDR
// end else
12450: GO 12513
// begin d := - 1 ;
12452: LD_ADDR_VAR 0 9
12456: PUSH
12457: LD_INT 1
12459: NEG
12460: ST_TO_ADDR
// if i_from > i_to then
12461: LD_VAR 0 2
12465: PUSH
12466: LD_VAR 0 3
12470: GREATER
12471: IFFALSE 12491
// length := i_from - i_to else
12473: LD_ADDR_VAR 0 11
12477: PUSH
12478: LD_VAR 0 2
12482: PUSH
12483: LD_VAR 0 3
12487: MINUS
12488: ST_TO_ADDR
12489: GO 12513
// length := ( array - i_to ) + i_from ;
12491: LD_ADDR_VAR 0 11
12495: PUSH
12496: LD_VAR 0 1
12500: PUSH
12501: LD_VAR 0 3
12505: MINUS
12506: PUSH
12507: LD_VAR 0 2
12511: PLUS
12512: ST_TO_ADDR
// end ; if not length then
12513: LD_VAR 0 11
12517: NOT
12518: IFFALSE 12522
// exit ;
12520: GO 12680
// tmp := array ;
12522: LD_ADDR_VAR 0 10
12526: PUSH
12527: LD_VAR 0 1
12531: ST_TO_ADDR
// for i = 1 to length do
12532: LD_ADDR_VAR 0 6
12536: PUSH
12537: DOUBLE
12538: LD_INT 1
12540: DEC
12541: ST_TO_ADDR
12542: LD_VAR 0 11
12546: PUSH
12547: FOR_TO
12548: IFFALSE 12668
// begin for j = 1 to array do
12550: LD_ADDR_VAR 0 7
12554: PUSH
12555: DOUBLE
12556: LD_INT 1
12558: DEC
12559: ST_TO_ADDR
12560: LD_VAR 0 1
12564: PUSH
12565: FOR_TO
12566: IFFALSE 12654
// begin k := j + d ;
12568: LD_ADDR_VAR 0 8
12572: PUSH
12573: LD_VAR 0 7
12577: PUSH
12578: LD_VAR 0 9
12582: PLUS
12583: ST_TO_ADDR
// if k > array then
12584: LD_VAR 0 8
12588: PUSH
12589: LD_VAR 0 1
12593: GREATER
12594: IFFALSE 12604
// k := 1 ;
12596: LD_ADDR_VAR 0 8
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// if not k then
12604: LD_VAR 0 8
12608: NOT
12609: IFFALSE 12621
// k := array ;
12611: LD_ADDR_VAR 0 8
12615: PUSH
12616: LD_VAR 0 1
12620: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12621: LD_ADDR_VAR 0 10
12625: PUSH
12626: LD_VAR 0 10
12630: PPUSH
12631: LD_VAR 0 8
12635: PPUSH
12636: LD_VAR 0 1
12640: PUSH
12641: LD_VAR 0 7
12645: ARRAY
12646: PPUSH
12647: CALL_OW 1
12651: ST_TO_ADDR
// end ;
12652: GO 12565
12654: POP
12655: POP
// array := tmp ;
12656: LD_ADDR_VAR 0 1
12660: PUSH
12661: LD_VAR 0 10
12665: ST_TO_ADDR
// end ;
12666: GO 12547
12668: POP
12669: POP
// result := array ;
12670: LD_ADDR_VAR 0 5
12674: PUSH
12675: LD_VAR 0 1
12679: ST_TO_ADDR
// end ;
12680: LD_VAR 0 5
12684: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12685: LD_INT 0
12687: PPUSH
12688: PPUSH
// result := 0 ;
12689: LD_ADDR_VAR 0 3
12693: PUSH
12694: LD_INT 0
12696: ST_TO_ADDR
// if not array or not value in array then
12697: LD_VAR 0 1
12701: NOT
12702: PUSH
12703: LD_VAR 0 2
12707: PUSH
12708: LD_VAR 0 1
12712: IN
12713: NOT
12714: OR
12715: IFFALSE 12719
// exit ;
12717: GO 12773
// for i = 1 to array do
12719: LD_ADDR_VAR 0 4
12723: PUSH
12724: DOUBLE
12725: LD_INT 1
12727: DEC
12728: ST_TO_ADDR
12729: LD_VAR 0 1
12733: PUSH
12734: FOR_TO
12735: IFFALSE 12771
// if value = array [ i ] then
12737: LD_VAR 0 2
12741: PUSH
12742: LD_VAR 0 1
12746: PUSH
12747: LD_VAR 0 4
12751: ARRAY
12752: EQUAL
12753: IFFALSE 12769
// begin result := i ;
12755: LD_ADDR_VAR 0 3
12759: PUSH
12760: LD_VAR 0 4
12764: ST_TO_ADDR
// exit ;
12765: POP
12766: POP
12767: GO 12773
// end ;
12769: GO 12734
12771: POP
12772: POP
// end ;
12773: LD_VAR 0 3
12777: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12778: LD_INT 0
12780: PPUSH
// vc_chassis := chassis ;
12781: LD_ADDR_OWVAR 37
12785: PUSH
12786: LD_VAR 0 1
12790: ST_TO_ADDR
// vc_engine := engine ;
12791: LD_ADDR_OWVAR 39
12795: PUSH
12796: LD_VAR 0 2
12800: ST_TO_ADDR
// vc_control := control ;
12801: LD_ADDR_OWVAR 38
12805: PUSH
12806: LD_VAR 0 3
12810: ST_TO_ADDR
// vc_weapon := weapon ;
12811: LD_ADDR_OWVAR 40
12815: PUSH
12816: LD_VAR 0 4
12820: ST_TO_ADDR
// vc_fuel_battery := fuel ;
12821: LD_ADDR_OWVAR 41
12825: PUSH
12826: LD_VAR 0 5
12830: ST_TO_ADDR
// end ;
12831: LD_VAR 0 6
12835: RET
// export function WantPlant ( unit ) ; var task ; begin
12836: LD_INT 0
12838: PPUSH
12839: PPUSH
// result := false ;
12840: LD_ADDR_VAR 0 2
12844: PUSH
12845: LD_INT 0
12847: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
12848: LD_ADDR_VAR 0 3
12852: PUSH
12853: LD_VAR 0 1
12857: PPUSH
12858: CALL_OW 437
12862: ST_TO_ADDR
// if task then
12863: LD_VAR 0 3
12867: IFFALSE 12895
// if task [ 1 ] [ 1 ] = p then
12869: LD_VAR 0 3
12873: PUSH
12874: LD_INT 1
12876: ARRAY
12877: PUSH
12878: LD_INT 1
12880: ARRAY
12881: PUSH
12882: LD_STRING p
12884: EQUAL
12885: IFFALSE 12895
// result := true ;
12887: LD_ADDR_VAR 0 2
12891: PUSH
12892: LD_INT 1
12894: ST_TO_ADDR
// end ;
12895: LD_VAR 0 2
12899: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
12900: LD_INT 0
12902: PPUSH
12903: PPUSH
12904: PPUSH
12905: PPUSH
// if pos < 1 then
12906: LD_VAR 0 2
12910: PUSH
12911: LD_INT 1
12913: LESS
12914: IFFALSE 12918
// exit ;
12916: GO 13221
// if pos = 1 then
12918: LD_VAR 0 2
12922: PUSH
12923: LD_INT 1
12925: EQUAL
12926: IFFALSE 12959
// result := Replace ( arr , pos [ 1 ] , value ) else
12928: LD_ADDR_VAR 0 4
12932: PUSH
12933: LD_VAR 0 1
12937: PPUSH
12938: LD_VAR 0 2
12942: PUSH
12943: LD_INT 1
12945: ARRAY
12946: PPUSH
12947: LD_VAR 0 3
12951: PPUSH
12952: CALL_OW 1
12956: ST_TO_ADDR
12957: GO 13221
// begin tmp := arr ;
12959: LD_ADDR_VAR 0 6
12963: PUSH
12964: LD_VAR 0 1
12968: ST_TO_ADDR
// s_arr := [ tmp ] ;
12969: LD_ADDR_VAR 0 7
12973: PUSH
12974: LD_VAR 0 6
12978: PUSH
12979: EMPTY
12980: LIST
12981: ST_TO_ADDR
// for i = 1 to pos - 1 do
12982: LD_ADDR_VAR 0 5
12986: PUSH
12987: DOUBLE
12988: LD_INT 1
12990: DEC
12991: ST_TO_ADDR
12992: LD_VAR 0 2
12996: PUSH
12997: LD_INT 1
12999: MINUS
13000: PUSH
13001: FOR_TO
13002: IFFALSE 13047
// begin tmp := tmp [ pos [ i ] ] ;
13004: LD_ADDR_VAR 0 6
13008: PUSH
13009: LD_VAR 0 6
13013: PUSH
13014: LD_VAR 0 2
13018: PUSH
13019: LD_VAR 0 5
13023: ARRAY
13024: ARRAY
13025: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13026: LD_ADDR_VAR 0 7
13030: PUSH
13031: LD_VAR 0 7
13035: PUSH
13036: LD_VAR 0 6
13040: PUSH
13041: EMPTY
13042: LIST
13043: ADD
13044: ST_TO_ADDR
// end ;
13045: GO 13001
13047: POP
13048: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13049: LD_ADDR_VAR 0 6
13053: PUSH
13054: LD_VAR 0 6
13058: PPUSH
13059: LD_VAR 0 2
13063: PUSH
13064: LD_VAR 0 2
13068: ARRAY
13069: PPUSH
13070: LD_VAR 0 3
13074: PPUSH
13075: CALL_OW 1
13079: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13080: LD_ADDR_VAR 0 7
13084: PUSH
13085: LD_VAR 0 7
13089: PPUSH
13090: LD_VAR 0 7
13094: PPUSH
13095: LD_VAR 0 6
13099: PPUSH
13100: CALL_OW 1
13104: ST_TO_ADDR
// for i = s_arr downto 2 do
13105: LD_ADDR_VAR 0 5
13109: PUSH
13110: DOUBLE
13111: LD_VAR 0 7
13115: INC
13116: ST_TO_ADDR
13117: LD_INT 2
13119: PUSH
13120: FOR_DOWNTO
13121: IFFALSE 13205
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13123: LD_ADDR_VAR 0 6
13127: PUSH
13128: LD_VAR 0 7
13132: PUSH
13133: LD_VAR 0 5
13137: PUSH
13138: LD_INT 1
13140: MINUS
13141: ARRAY
13142: PPUSH
13143: LD_VAR 0 2
13147: PUSH
13148: LD_VAR 0 5
13152: PUSH
13153: LD_INT 1
13155: MINUS
13156: ARRAY
13157: PPUSH
13158: LD_VAR 0 7
13162: PUSH
13163: LD_VAR 0 5
13167: ARRAY
13168: PPUSH
13169: CALL_OW 1
13173: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13174: LD_ADDR_VAR 0 7
13178: PUSH
13179: LD_VAR 0 7
13183: PPUSH
13184: LD_VAR 0 5
13188: PUSH
13189: LD_INT 1
13191: MINUS
13192: PPUSH
13193: LD_VAR 0 6
13197: PPUSH
13198: CALL_OW 1
13202: ST_TO_ADDR
// end ;
13203: GO 13120
13205: POP
13206: POP
// result := s_arr [ 1 ] ;
13207: LD_ADDR_VAR 0 4
13211: PUSH
13212: LD_VAR 0 7
13216: PUSH
13217: LD_INT 1
13219: ARRAY
13220: ST_TO_ADDR
// end ; end ;
13221: LD_VAR 0 4
13225: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13226: LD_INT 0
13228: PPUSH
13229: PPUSH
// if not list then
13230: LD_VAR 0 1
13234: NOT
13235: IFFALSE 13239
// exit ;
13237: GO 13330
// i := list [ pos1 ] ;
13239: LD_ADDR_VAR 0 5
13243: PUSH
13244: LD_VAR 0 1
13248: PUSH
13249: LD_VAR 0 2
13253: ARRAY
13254: ST_TO_ADDR
// if not i then
13255: LD_VAR 0 5
13259: NOT
13260: IFFALSE 13264
// exit ;
13262: GO 13330
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13264: LD_ADDR_VAR 0 1
13268: PUSH
13269: LD_VAR 0 1
13273: PPUSH
13274: LD_VAR 0 2
13278: PPUSH
13279: LD_VAR 0 1
13283: PUSH
13284: LD_VAR 0 3
13288: ARRAY
13289: PPUSH
13290: CALL_OW 1
13294: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13295: LD_ADDR_VAR 0 1
13299: PUSH
13300: LD_VAR 0 1
13304: PPUSH
13305: LD_VAR 0 3
13309: PPUSH
13310: LD_VAR 0 5
13314: PPUSH
13315: CALL_OW 1
13319: ST_TO_ADDR
// result := list ;
13320: LD_ADDR_VAR 0 4
13324: PUSH
13325: LD_VAR 0 1
13329: ST_TO_ADDR
// end ;
13330: LD_VAR 0 4
13334: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13335: LD_INT 0
13337: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13338: LD_ADDR_VAR 0 5
13342: PUSH
13343: LD_VAR 0 1
13347: PPUSH
13348: CALL_OW 250
13352: PPUSH
13353: LD_VAR 0 1
13357: PPUSH
13358: CALL_OW 251
13362: PPUSH
13363: LD_VAR 0 2
13367: PPUSH
13368: LD_VAR 0 3
13372: PPUSH
13373: LD_VAR 0 4
13377: PPUSH
13378: CALL 13388 0 5
13382: ST_TO_ADDR
// end ;
13383: LD_VAR 0 5
13387: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13388: LD_INT 0
13390: PPUSH
13391: PPUSH
13392: PPUSH
13393: PPUSH
// if not list then
13394: LD_VAR 0 3
13398: NOT
13399: IFFALSE 13403
// exit ;
13401: GO 13791
// result := [ ] ;
13403: LD_ADDR_VAR 0 6
13407: PUSH
13408: EMPTY
13409: ST_TO_ADDR
// for i in list do
13410: LD_ADDR_VAR 0 7
13414: PUSH
13415: LD_VAR 0 3
13419: PUSH
13420: FOR_IN
13421: IFFALSE 13623
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13423: LD_ADDR_VAR 0 9
13427: PUSH
13428: LD_VAR 0 7
13432: PPUSH
13433: LD_VAR 0 1
13437: PPUSH
13438: LD_VAR 0 2
13442: PPUSH
13443: CALL_OW 297
13447: ST_TO_ADDR
// if not result then
13448: LD_VAR 0 6
13452: NOT
13453: IFFALSE 13479
// result := [ [ i , tmp ] ] else
13455: LD_ADDR_VAR 0 6
13459: PUSH
13460: LD_VAR 0 7
13464: PUSH
13465: LD_VAR 0 9
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: ST_TO_ADDR
13477: GO 13621
// begin if result [ result ] [ 2 ] < tmp then
13479: LD_VAR 0 6
13483: PUSH
13484: LD_VAR 0 6
13488: ARRAY
13489: PUSH
13490: LD_INT 2
13492: ARRAY
13493: PUSH
13494: LD_VAR 0 9
13498: LESS
13499: IFFALSE 13541
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13501: LD_ADDR_VAR 0 6
13505: PUSH
13506: LD_VAR 0 6
13510: PPUSH
13511: LD_VAR 0 6
13515: PUSH
13516: LD_INT 1
13518: PLUS
13519: PPUSH
13520: LD_VAR 0 7
13524: PUSH
13525: LD_VAR 0 9
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL_OW 2
13538: ST_TO_ADDR
13539: GO 13621
// for j = 1 to result do
13541: LD_ADDR_VAR 0 8
13545: PUSH
13546: DOUBLE
13547: LD_INT 1
13549: DEC
13550: ST_TO_ADDR
13551: LD_VAR 0 6
13555: PUSH
13556: FOR_TO
13557: IFFALSE 13619
// begin if tmp < result [ j ] [ 2 ] then
13559: LD_VAR 0 9
13563: PUSH
13564: LD_VAR 0 6
13568: PUSH
13569: LD_VAR 0 8
13573: ARRAY
13574: PUSH
13575: LD_INT 2
13577: ARRAY
13578: LESS
13579: IFFALSE 13617
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13581: LD_ADDR_VAR 0 6
13585: PUSH
13586: LD_VAR 0 6
13590: PPUSH
13591: LD_VAR 0 8
13595: PPUSH
13596: LD_VAR 0 7
13600: PUSH
13601: LD_VAR 0 9
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 2
13614: ST_TO_ADDR
// break ;
13615: GO 13619
// end ; end ;
13617: GO 13556
13619: POP
13620: POP
// end ; end ;
13621: GO 13420
13623: POP
13624: POP
// if result and not asc then
13625: LD_VAR 0 6
13629: PUSH
13630: LD_VAR 0 4
13634: NOT
13635: AND
13636: IFFALSE 13711
// begin tmp := result ;
13638: LD_ADDR_VAR 0 9
13642: PUSH
13643: LD_VAR 0 6
13647: ST_TO_ADDR
// for i = tmp downto 1 do
13648: LD_ADDR_VAR 0 7
13652: PUSH
13653: DOUBLE
13654: LD_VAR 0 9
13658: INC
13659: ST_TO_ADDR
13660: LD_INT 1
13662: PUSH
13663: FOR_DOWNTO
13664: IFFALSE 13709
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13666: LD_ADDR_VAR 0 6
13670: PUSH
13671: LD_VAR 0 6
13675: PPUSH
13676: LD_VAR 0 9
13680: PUSH
13681: LD_VAR 0 7
13685: MINUS
13686: PUSH
13687: LD_INT 1
13689: PLUS
13690: PPUSH
13691: LD_VAR 0 9
13695: PUSH
13696: LD_VAR 0 7
13700: ARRAY
13701: PPUSH
13702: CALL_OW 1
13706: ST_TO_ADDR
13707: GO 13663
13709: POP
13710: POP
// end ; tmp := [ ] ;
13711: LD_ADDR_VAR 0 9
13715: PUSH
13716: EMPTY
13717: ST_TO_ADDR
// if mode then
13718: LD_VAR 0 5
13722: IFFALSE 13791
// begin for i = 1 to result do
13724: LD_ADDR_VAR 0 7
13728: PUSH
13729: DOUBLE
13730: LD_INT 1
13732: DEC
13733: ST_TO_ADDR
13734: LD_VAR 0 6
13738: PUSH
13739: FOR_TO
13740: IFFALSE 13779
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13742: LD_ADDR_VAR 0 9
13746: PUSH
13747: LD_VAR 0 9
13751: PPUSH
13752: LD_VAR 0 7
13756: PPUSH
13757: LD_VAR 0 6
13761: PUSH
13762: LD_VAR 0 7
13766: ARRAY
13767: PUSH
13768: LD_INT 1
13770: ARRAY
13771: PPUSH
13772: CALL_OW 1
13776: ST_TO_ADDR
13777: GO 13739
13779: POP
13780: POP
// result := tmp ;
13781: LD_ADDR_VAR 0 6
13785: PUSH
13786: LD_VAR 0 9
13790: ST_TO_ADDR
// end ; end ;
13791: LD_VAR 0 6
13795: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13796: LD_INT 0
13798: PPUSH
13799: PPUSH
13800: PPUSH
13801: PPUSH
13802: PPUSH
13803: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13804: LD_ADDR_VAR 0 5
13808: PUSH
13809: LD_INT 0
13811: PUSH
13812: LD_INT 0
13814: PUSH
13815: LD_INT 0
13817: PUSH
13818: EMPTY
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: ST_TO_ADDR
// if not x or not y then
13826: LD_VAR 0 2
13830: NOT
13831: PUSH
13832: LD_VAR 0 3
13836: NOT
13837: OR
13838: IFFALSE 13842
// exit ;
13840: GO 15494
// if not range then
13842: LD_VAR 0 4
13846: NOT
13847: IFFALSE 13857
// range := 10 ;
13849: LD_ADDR_VAR 0 4
13853: PUSH
13854: LD_INT 10
13856: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13857: LD_ADDR_VAR 0 8
13861: PUSH
13862: LD_INT 81
13864: PUSH
13865: LD_VAR 0 1
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: LD_INT 92
13876: PUSH
13877: LD_VAR 0 2
13881: PUSH
13882: LD_VAR 0 3
13886: PUSH
13887: LD_VAR 0 4
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 3
13900: PUSH
13901: LD_INT 21
13903: PUSH
13904: LD_INT 3
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: PPUSH
13920: CALL_OW 69
13924: ST_TO_ADDR
// if not tmp then
13925: LD_VAR 0 8
13929: NOT
13930: IFFALSE 13934
// exit ;
13932: GO 15494
// for i in tmp do
13934: LD_ADDR_VAR 0 6
13938: PUSH
13939: LD_VAR 0 8
13943: PUSH
13944: FOR_IN
13945: IFFALSE 15469
// begin points := [ 0 , 0 , 0 ] ;
13947: LD_ADDR_VAR 0 9
13951: PUSH
13952: LD_INT 0
13954: PUSH
13955: LD_INT 0
13957: PUSH
13958: LD_INT 0
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: ST_TO_ADDR
// bpoints := 1 ;
13966: LD_ADDR_VAR 0 10
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// case GetType ( i ) of unit_human :
13974: LD_VAR 0 6
13978: PPUSH
13979: CALL_OW 247
13983: PUSH
13984: LD_INT 1
13986: DOUBLE
13987: EQUAL
13988: IFTRUE 13992
13990: GO 14570
13992: POP
// begin if GetClass ( i ) = 1 then
13993: LD_VAR 0 6
13997: PPUSH
13998: CALL_OW 257
14002: PUSH
14003: LD_INT 1
14005: EQUAL
14006: IFFALSE 14027
// points := [ 10 , 5 , 3 ] ;
14008: LD_ADDR_VAR 0 9
14012: PUSH
14013: LD_INT 10
14015: PUSH
14016: LD_INT 5
14018: PUSH
14019: LD_INT 3
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14027: LD_VAR 0 6
14031: PPUSH
14032: CALL_OW 257
14036: PUSH
14037: LD_INT 2
14039: PUSH
14040: LD_INT 3
14042: PUSH
14043: LD_INT 4
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: LIST
14050: IN
14051: IFFALSE 14072
// points := [ 3 , 2 , 1 ] ;
14053: LD_ADDR_VAR 0 9
14057: PUSH
14058: LD_INT 3
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: LD_INT 1
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: LIST
14071: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14072: LD_VAR 0 6
14076: PPUSH
14077: CALL_OW 257
14081: PUSH
14082: LD_INT 5
14084: EQUAL
14085: IFFALSE 14106
// points := [ 130 , 5 , 2 ] ;
14087: LD_ADDR_VAR 0 9
14091: PUSH
14092: LD_INT 130
14094: PUSH
14095: LD_INT 5
14097: PUSH
14098: LD_INT 2
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14106: LD_VAR 0 6
14110: PPUSH
14111: CALL_OW 257
14115: PUSH
14116: LD_INT 8
14118: EQUAL
14119: IFFALSE 14140
// points := [ 35 , 35 , 30 ] ;
14121: LD_ADDR_VAR 0 9
14125: PUSH
14126: LD_INT 35
14128: PUSH
14129: LD_INT 35
14131: PUSH
14132: LD_INT 30
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14140: LD_VAR 0 6
14144: PPUSH
14145: CALL_OW 257
14149: PUSH
14150: LD_INT 9
14152: EQUAL
14153: IFFALSE 14174
// points := [ 20 , 55 , 40 ] ;
14155: LD_ADDR_VAR 0 9
14159: PUSH
14160: LD_INT 20
14162: PUSH
14163: LD_INT 55
14165: PUSH
14166: LD_INT 40
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14174: LD_VAR 0 6
14178: PPUSH
14179: CALL_OW 257
14183: PUSH
14184: LD_INT 12
14186: PUSH
14187: LD_INT 16
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: IN
14194: IFFALSE 14215
// points := [ 5 , 3 , 2 ] ;
14196: LD_ADDR_VAR 0 9
14200: PUSH
14201: LD_INT 5
14203: PUSH
14204: LD_INT 3
14206: PUSH
14207: LD_INT 2
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14215: LD_VAR 0 6
14219: PPUSH
14220: CALL_OW 257
14224: PUSH
14225: LD_INT 17
14227: EQUAL
14228: IFFALSE 14249
// points := [ 100 , 50 , 75 ] ;
14230: LD_ADDR_VAR 0 9
14234: PUSH
14235: LD_INT 100
14237: PUSH
14238: LD_INT 50
14240: PUSH
14241: LD_INT 75
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14249: LD_VAR 0 6
14253: PPUSH
14254: CALL_OW 257
14258: PUSH
14259: LD_INT 15
14261: EQUAL
14262: IFFALSE 14283
// points := [ 10 , 5 , 3 ] ;
14264: LD_ADDR_VAR 0 9
14268: PUSH
14269: LD_INT 10
14271: PUSH
14272: LD_INT 5
14274: PUSH
14275: LD_INT 3
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14283: LD_VAR 0 6
14287: PPUSH
14288: CALL_OW 257
14292: PUSH
14293: LD_INT 14
14295: EQUAL
14296: IFFALSE 14317
// points := [ 10 , 0 , 0 ] ;
14298: LD_ADDR_VAR 0 9
14302: PUSH
14303: LD_INT 10
14305: PUSH
14306: LD_INT 0
14308: PUSH
14309: LD_INT 0
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14317: LD_VAR 0 6
14321: PPUSH
14322: CALL_OW 257
14326: PUSH
14327: LD_INT 11
14329: EQUAL
14330: IFFALSE 14351
// points := [ 30 , 10 , 5 ] ;
14332: LD_ADDR_VAR 0 9
14336: PUSH
14337: LD_INT 30
14339: PUSH
14340: LD_INT 10
14342: PUSH
14343: LD_INT 5
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14351: LD_VAR 0 1
14355: PPUSH
14356: LD_INT 5
14358: PPUSH
14359: CALL_OW 321
14363: PUSH
14364: LD_INT 2
14366: EQUAL
14367: IFFALSE 14384
// bpoints := bpoints * 1.8 ;
14369: LD_ADDR_VAR 0 10
14373: PUSH
14374: LD_VAR 0 10
14378: PUSH
14379: LD_REAL  1.80000000000000E+0000
14382: MUL
14383: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14384: LD_VAR 0 6
14388: PPUSH
14389: CALL_OW 257
14393: PUSH
14394: LD_INT 1
14396: PUSH
14397: LD_INT 2
14399: PUSH
14400: LD_INT 3
14402: PUSH
14403: LD_INT 4
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: IN
14412: PUSH
14413: LD_VAR 0 1
14417: PPUSH
14418: LD_INT 51
14420: PPUSH
14421: CALL_OW 321
14425: PUSH
14426: LD_INT 2
14428: EQUAL
14429: AND
14430: IFFALSE 14447
// bpoints := bpoints * 1.2 ;
14432: LD_ADDR_VAR 0 10
14436: PUSH
14437: LD_VAR 0 10
14441: PUSH
14442: LD_REAL  1.20000000000000E+0000
14445: MUL
14446: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14447: LD_VAR 0 6
14451: PPUSH
14452: CALL_OW 257
14456: PUSH
14457: LD_INT 5
14459: PUSH
14460: LD_INT 7
14462: PUSH
14463: LD_INT 9
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: IN
14471: PUSH
14472: LD_VAR 0 1
14476: PPUSH
14477: LD_INT 52
14479: PPUSH
14480: CALL_OW 321
14484: PUSH
14485: LD_INT 2
14487: EQUAL
14488: AND
14489: IFFALSE 14506
// bpoints := bpoints * 1.5 ;
14491: LD_ADDR_VAR 0 10
14495: PUSH
14496: LD_VAR 0 10
14500: PUSH
14501: LD_REAL  1.50000000000000E+0000
14504: MUL
14505: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14506: LD_VAR 0 1
14510: PPUSH
14511: LD_INT 66
14513: PPUSH
14514: CALL_OW 321
14518: PUSH
14519: LD_INT 2
14521: EQUAL
14522: IFFALSE 14539
// bpoints := bpoints * 1.1 ;
14524: LD_ADDR_VAR 0 10
14528: PUSH
14529: LD_VAR 0 10
14533: PUSH
14534: LD_REAL  1.10000000000000E+0000
14537: MUL
14538: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14539: LD_ADDR_VAR 0 10
14543: PUSH
14544: LD_VAR 0 10
14548: PUSH
14549: LD_VAR 0 6
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: CALL_OW 259
14561: PUSH
14562: LD_REAL  1.15000000000000E+0000
14565: MUL
14566: MUL
14567: ST_TO_ADDR
// end ; unit_vehicle :
14568: GO 15398
14570: LD_INT 2
14572: DOUBLE
14573: EQUAL
14574: IFTRUE 14578
14576: GO 15386
14578: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14579: LD_VAR 0 6
14583: PPUSH
14584: CALL_OW 264
14588: PUSH
14589: LD_INT 2
14591: PUSH
14592: LD_INT 42
14594: PUSH
14595: LD_INT 24
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: IN
14603: IFFALSE 14624
// points := [ 25 , 5 , 3 ] ;
14605: LD_ADDR_VAR 0 9
14609: PUSH
14610: LD_INT 25
14612: PUSH
14613: LD_INT 5
14615: PUSH
14616: LD_INT 3
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: LIST
14623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14624: LD_VAR 0 6
14628: PPUSH
14629: CALL_OW 264
14633: PUSH
14634: LD_INT 4
14636: PUSH
14637: LD_INT 43
14639: PUSH
14640: LD_INT 25
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: IN
14648: IFFALSE 14669
// points := [ 40 , 15 , 5 ] ;
14650: LD_ADDR_VAR 0 9
14654: PUSH
14655: LD_INT 40
14657: PUSH
14658: LD_INT 15
14660: PUSH
14661: LD_INT 5
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14669: LD_VAR 0 6
14673: PPUSH
14674: CALL_OW 264
14678: PUSH
14679: LD_INT 3
14681: PUSH
14682: LD_INT 23
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: IN
14689: IFFALSE 14710
// points := [ 7 , 25 , 8 ] ;
14691: LD_ADDR_VAR 0 9
14695: PUSH
14696: LD_INT 7
14698: PUSH
14699: LD_INT 25
14701: PUSH
14702: LD_INT 8
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: LIST
14709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14710: LD_VAR 0 6
14714: PPUSH
14715: CALL_OW 264
14719: PUSH
14720: LD_INT 5
14722: PUSH
14723: LD_INT 27
14725: PUSH
14726: LD_INT 44
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: IN
14734: IFFALSE 14755
// points := [ 14 , 50 , 16 ] ;
14736: LD_ADDR_VAR 0 9
14740: PUSH
14741: LD_INT 14
14743: PUSH
14744: LD_INT 50
14746: PUSH
14747: LD_INT 16
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14755: LD_VAR 0 6
14759: PPUSH
14760: CALL_OW 264
14764: PUSH
14765: LD_INT 6
14767: PUSH
14768: LD_INT 46
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: IN
14775: IFFALSE 14796
// points := [ 32 , 120 , 70 ] ;
14777: LD_ADDR_VAR 0 9
14781: PUSH
14782: LD_INT 32
14784: PUSH
14785: LD_INT 120
14787: PUSH
14788: LD_INT 70
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: LIST
14795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
14796: LD_VAR 0 6
14800: PPUSH
14801: CALL_OW 264
14805: PUSH
14806: LD_INT 7
14808: PUSH
14809: LD_INT 28
14811: PUSH
14812: LD_INT 45
14814: PUSH
14815: LD_EXP 44
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: IN
14826: IFFALSE 14847
// points := [ 35 , 20 , 45 ] ;
14828: LD_ADDR_VAR 0 9
14832: PUSH
14833: LD_INT 35
14835: PUSH
14836: LD_INT 20
14838: PUSH
14839: LD_INT 45
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
14847: LD_VAR 0 6
14851: PPUSH
14852: CALL_OW 264
14856: PUSH
14857: LD_INT 47
14859: PUSH
14860: EMPTY
14861: LIST
14862: IN
14863: IFFALSE 14884
// points := [ 67 , 45 , 75 ] ;
14865: LD_ADDR_VAR 0 9
14869: PUSH
14870: LD_INT 67
14872: PUSH
14873: LD_INT 45
14875: PUSH
14876: LD_INT 75
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
14884: LD_VAR 0 6
14888: PPUSH
14889: CALL_OW 264
14893: PUSH
14894: LD_INT 26
14896: PUSH
14897: EMPTY
14898: LIST
14899: IN
14900: IFFALSE 14921
// points := [ 120 , 30 , 80 ] ;
14902: LD_ADDR_VAR 0 9
14906: PUSH
14907: LD_INT 120
14909: PUSH
14910: LD_INT 30
14912: PUSH
14913: LD_INT 80
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
14921: LD_VAR 0 6
14925: PPUSH
14926: CALL_OW 264
14930: PUSH
14931: LD_INT 22
14933: PUSH
14934: EMPTY
14935: LIST
14936: IN
14937: IFFALSE 14958
// points := [ 40 , 1 , 1 ] ;
14939: LD_ADDR_VAR 0 9
14943: PUSH
14944: LD_INT 40
14946: PUSH
14947: LD_INT 1
14949: PUSH
14950: LD_INT 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: LIST
14957: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
14958: LD_VAR 0 6
14962: PPUSH
14963: CALL_OW 264
14967: PUSH
14968: LD_INT 29
14970: PUSH
14971: EMPTY
14972: LIST
14973: IN
14974: IFFALSE 14995
// points := [ 70 , 200 , 400 ] ;
14976: LD_ADDR_VAR 0 9
14980: PUSH
14981: LD_INT 70
14983: PUSH
14984: LD_INT 200
14986: PUSH
14987: LD_INT 400
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: LIST
14994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
14995: LD_VAR 0 6
14999: PPUSH
15000: CALL_OW 264
15004: PUSH
15005: LD_INT 14
15007: PUSH
15008: LD_INT 53
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: IN
15015: IFFALSE 15036
// points := [ 40 , 10 , 20 ] ;
15017: LD_ADDR_VAR 0 9
15021: PUSH
15022: LD_INT 40
15024: PUSH
15025: LD_INT 10
15027: PUSH
15028: LD_INT 20
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: LIST
15035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15036: LD_VAR 0 6
15040: PPUSH
15041: CALL_OW 264
15045: PUSH
15046: LD_INT 9
15048: PUSH
15049: EMPTY
15050: LIST
15051: IN
15052: IFFALSE 15073
// points := [ 5 , 70 , 20 ] ;
15054: LD_ADDR_VAR 0 9
15058: PUSH
15059: LD_INT 5
15061: PUSH
15062: LD_INT 70
15064: PUSH
15065: LD_INT 20
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: LIST
15072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15073: LD_VAR 0 6
15077: PPUSH
15078: CALL_OW 264
15082: PUSH
15083: LD_INT 10
15085: PUSH
15086: EMPTY
15087: LIST
15088: IN
15089: IFFALSE 15110
// points := [ 35 , 110 , 70 ] ;
15091: LD_ADDR_VAR 0 9
15095: PUSH
15096: LD_INT 35
15098: PUSH
15099: LD_INT 110
15101: PUSH
15102: LD_INT 70
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: LIST
15109: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15110: LD_VAR 0 6
15114: PPUSH
15115: CALL_OW 265
15119: PUSH
15120: LD_INT 25
15122: EQUAL
15123: IFFALSE 15144
// points := [ 80 , 65 , 100 ] ;
15125: LD_ADDR_VAR 0 9
15129: PUSH
15130: LD_INT 80
15132: PUSH
15133: LD_INT 65
15135: PUSH
15136: LD_INT 100
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15144: LD_VAR 0 6
15148: PPUSH
15149: CALL_OW 263
15153: PUSH
15154: LD_INT 1
15156: EQUAL
15157: IFFALSE 15192
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15159: LD_ADDR_VAR 0 10
15163: PUSH
15164: LD_VAR 0 10
15168: PUSH
15169: LD_VAR 0 6
15173: PPUSH
15174: CALL_OW 311
15178: PPUSH
15179: LD_INT 3
15181: PPUSH
15182: CALL_OW 259
15186: PUSH
15187: LD_INT 4
15189: MUL
15190: MUL
15191: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15192: LD_VAR 0 6
15196: PPUSH
15197: CALL_OW 263
15201: PUSH
15202: LD_INT 2
15204: EQUAL
15205: IFFALSE 15256
// begin j := IsControledBy ( i ) ;
15207: LD_ADDR_VAR 0 7
15211: PUSH
15212: LD_VAR 0 6
15216: PPUSH
15217: CALL_OW 312
15221: ST_TO_ADDR
// if j then
15222: LD_VAR 0 7
15226: IFFALSE 15256
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15228: LD_ADDR_VAR 0 10
15232: PUSH
15233: LD_VAR 0 10
15237: PUSH
15238: LD_VAR 0 7
15242: PPUSH
15243: LD_INT 3
15245: PPUSH
15246: CALL_OW 259
15250: PUSH
15251: LD_INT 3
15253: MUL
15254: MUL
15255: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15256: LD_VAR 0 6
15260: PPUSH
15261: CALL_OW 264
15265: PUSH
15266: LD_INT 5
15268: PUSH
15269: LD_INT 6
15271: PUSH
15272: LD_INT 46
15274: PUSH
15275: LD_INT 44
15277: PUSH
15278: LD_INT 47
15280: PUSH
15281: LD_INT 45
15283: PUSH
15284: LD_INT 28
15286: PUSH
15287: LD_INT 7
15289: PUSH
15290: LD_INT 27
15292: PUSH
15293: LD_INT 29
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: IN
15308: PUSH
15309: LD_VAR 0 1
15313: PPUSH
15314: LD_INT 52
15316: PPUSH
15317: CALL_OW 321
15321: PUSH
15322: LD_INT 2
15324: EQUAL
15325: AND
15326: IFFALSE 15343
// bpoints := bpoints * 1.2 ;
15328: LD_ADDR_VAR 0 10
15332: PUSH
15333: LD_VAR 0 10
15337: PUSH
15338: LD_REAL  1.20000000000000E+0000
15341: MUL
15342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15343: LD_VAR 0 6
15347: PPUSH
15348: CALL_OW 264
15352: PUSH
15353: LD_INT 6
15355: PUSH
15356: LD_INT 46
15358: PUSH
15359: LD_INT 47
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: IN
15367: IFFALSE 15384
// bpoints := bpoints * 1.2 ;
15369: LD_ADDR_VAR 0 10
15373: PUSH
15374: LD_VAR 0 10
15378: PUSH
15379: LD_REAL  1.20000000000000E+0000
15382: MUL
15383: ST_TO_ADDR
// end ; unit_building :
15384: GO 15398
15386: LD_INT 3
15388: DOUBLE
15389: EQUAL
15390: IFTRUE 15394
15392: GO 15397
15394: POP
// ; end ;
15395: GO 15398
15397: POP
// for j = 1 to 3 do
15398: LD_ADDR_VAR 0 7
15402: PUSH
15403: DOUBLE
15404: LD_INT 1
15406: DEC
15407: ST_TO_ADDR
15408: LD_INT 3
15410: PUSH
15411: FOR_TO
15412: IFFALSE 15465
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15414: LD_ADDR_VAR 0 5
15418: PUSH
15419: LD_VAR 0 5
15423: PPUSH
15424: LD_VAR 0 7
15428: PPUSH
15429: LD_VAR 0 5
15433: PUSH
15434: LD_VAR 0 7
15438: ARRAY
15439: PUSH
15440: LD_VAR 0 9
15444: PUSH
15445: LD_VAR 0 7
15449: ARRAY
15450: PUSH
15451: LD_VAR 0 10
15455: MUL
15456: PLUS
15457: PPUSH
15458: CALL_OW 1
15462: ST_TO_ADDR
15463: GO 15411
15465: POP
15466: POP
// end ;
15467: GO 13944
15469: POP
15470: POP
// result := Replace ( result , 4 , tmp ) ;
15471: LD_ADDR_VAR 0 5
15475: PUSH
15476: LD_VAR 0 5
15480: PPUSH
15481: LD_INT 4
15483: PPUSH
15484: LD_VAR 0 8
15488: PPUSH
15489: CALL_OW 1
15493: ST_TO_ADDR
// end ;
15494: LD_VAR 0 5
15498: RET
// export function DangerAtRange ( unit , range ) ; begin
15499: LD_INT 0
15501: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15502: LD_ADDR_VAR 0 3
15506: PUSH
15507: LD_VAR 0 1
15511: PPUSH
15512: CALL_OW 255
15516: PPUSH
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 250
15526: PPUSH
15527: LD_VAR 0 1
15531: PPUSH
15532: CALL_OW 251
15536: PPUSH
15537: LD_VAR 0 2
15541: PPUSH
15542: CALL 13796 0 4
15546: ST_TO_ADDR
// end ;
15547: LD_VAR 0 3
15551: RET
// export function DangerInArea ( side , area ) ; begin
15552: LD_INT 0
15554: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15555: LD_ADDR_VAR 0 3
15559: PUSH
15560: LD_VAR 0 2
15564: PPUSH
15565: LD_INT 81
15567: PUSH
15568: LD_VAR 0 1
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PPUSH
15577: CALL_OW 70
15581: ST_TO_ADDR
// end ;
15582: LD_VAR 0 3
15586: RET
// export function IsExtension ( b ) ; begin
15587: LD_INT 0
15589: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15590: LD_ADDR_VAR 0 2
15594: PUSH
15595: LD_VAR 0 1
15599: PUSH
15600: LD_INT 23
15602: PUSH
15603: LD_INT 20
15605: PUSH
15606: LD_INT 22
15608: PUSH
15609: LD_INT 17
15611: PUSH
15612: LD_INT 24
15614: PUSH
15615: LD_INT 21
15617: PUSH
15618: LD_INT 19
15620: PUSH
15621: LD_INT 16
15623: PUSH
15624: LD_INT 25
15626: PUSH
15627: LD_INT 18
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: IN
15642: ST_TO_ADDR
// end ;
15643: LD_VAR 0 2
15647: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15648: LD_INT 0
15650: PPUSH
15651: PPUSH
15652: PPUSH
// result := [ ] ;
15653: LD_ADDR_VAR 0 4
15657: PUSH
15658: EMPTY
15659: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15660: LD_ADDR_VAR 0 5
15664: PUSH
15665: LD_VAR 0 2
15669: PPUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PPUSH
15680: CALL_OW 70
15684: ST_TO_ADDR
// if not tmp then
15685: LD_VAR 0 5
15689: NOT
15690: IFFALSE 15694
// exit ;
15692: GO 15758
// if checkLink then
15694: LD_VAR 0 3
15698: IFFALSE 15748
// begin for i in tmp do
15700: LD_ADDR_VAR 0 6
15704: PUSH
15705: LD_VAR 0 5
15709: PUSH
15710: FOR_IN
15711: IFFALSE 15746
// if GetBase ( i ) <> base then
15713: LD_VAR 0 6
15717: PPUSH
15718: CALL_OW 274
15722: PUSH
15723: LD_VAR 0 1
15727: NONEQUAL
15728: IFFALSE 15744
// ComLinkToBase ( base , i ) ;
15730: LD_VAR 0 1
15734: PPUSH
15735: LD_VAR 0 6
15739: PPUSH
15740: CALL_OW 169
15744: GO 15710
15746: POP
15747: POP
// end ; result := tmp ;
15748: LD_ADDR_VAR 0 4
15752: PUSH
15753: LD_VAR 0 5
15757: ST_TO_ADDR
// end ;
15758: LD_VAR 0 4
15762: RET
// export function ComComplete ( units , b ) ; var i ; begin
15763: LD_INT 0
15765: PPUSH
15766: PPUSH
// if not units then
15767: LD_VAR 0 1
15771: NOT
15772: IFFALSE 15776
// exit ;
15774: GO 15866
// for i in units do
15776: LD_ADDR_VAR 0 4
15780: PUSH
15781: LD_VAR 0 1
15785: PUSH
15786: FOR_IN
15787: IFFALSE 15864
// if BuildingStatus ( b ) = bs_build then
15789: LD_VAR 0 2
15793: PPUSH
15794: CALL_OW 461
15798: PUSH
15799: LD_INT 1
15801: EQUAL
15802: IFFALSE 15862
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15804: LD_VAR 0 4
15808: PPUSH
15809: LD_STRING h
15811: PUSH
15812: LD_VAR 0 2
15816: PPUSH
15817: CALL_OW 250
15821: PUSH
15822: LD_VAR 0 2
15826: PPUSH
15827: CALL_OW 251
15831: PUSH
15832: LD_VAR 0 2
15836: PUSH
15837: LD_INT 0
15839: PUSH
15840: LD_INT 0
15842: PUSH
15843: LD_INT 0
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: PUSH
15855: EMPTY
15856: LIST
15857: PPUSH
15858: CALL_OW 446
15862: GO 15786
15864: POP
15865: POP
// end ;
15866: LD_VAR 0 3
15870: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
15875: PPUSH
15876: PPUSH
15877: PPUSH
15878: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
15879: LD_VAR 0 1
15883: NOT
15884: PUSH
15885: LD_VAR 0 1
15889: PPUSH
15890: CALL_OW 263
15894: PUSH
15895: LD_INT 2
15897: EQUAL
15898: NOT
15899: OR
15900: IFFALSE 15904
// exit ;
15902: GO 16220
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
15904: LD_ADDR_VAR 0 6
15908: PUSH
15909: LD_INT 22
15911: PUSH
15912: LD_VAR 0 1
15916: PPUSH
15917: CALL_OW 255
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 2
15928: PUSH
15929: LD_INT 30
15931: PUSH
15932: LD_INT 36
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 34
15941: PUSH
15942: LD_INT 31
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: LIST
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PPUSH
15958: CALL_OW 69
15962: ST_TO_ADDR
// if not tmp then
15963: LD_VAR 0 6
15967: NOT
15968: IFFALSE 15972
// exit ;
15970: GO 16220
// result := [ ] ;
15972: LD_ADDR_VAR 0 2
15976: PUSH
15977: EMPTY
15978: ST_TO_ADDR
// for i in tmp do
15979: LD_ADDR_VAR 0 3
15983: PUSH
15984: LD_VAR 0 6
15988: PUSH
15989: FOR_IN
15990: IFFALSE 16061
// begin t := UnitsInside ( i ) ;
15992: LD_ADDR_VAR 0 4
15996: PUSH
15997: LD_VAR 0 3
16001: PPUSH
16002: CALL_OW 313
16006: ST_TO_ADDR
// if t then
16007: LD_VAR 0 4
16011: IFFALSE 16059
// for j in t do
16013: LD_ADDR_VAR 0 7
16017: PUSH
16018: LD_VAR 0 4
16022: PUSH
16023: FOR_IN
16024: IFFALSE 16057
// result := Insert ( result , result + 1 , j ) ;
16026: LD_ADDR_VAR 0 2
16030: PUSH
16031: LD_VAR 0 2
16035: PPUSH
16036: LD_VAR 0 2
16040: PUSH
16041: LD_INT 1
16043: PLUS
16044: PPUSH
16045: LD_VAR 0 7
16049: PPUSH
16050: CALL_OW 2
16054: ST_TO_ADDR
16055: GO 16023
16057: POP
16058: POP
// end ;
16059: GO 15989
16061: POP
16062: POP
// if not result then
16063: LD_VAR 0 2
16067: NOT
16068: IFFALSE 16072
// exit ;
16070: GO 16220
// mech := result [ 1 ] ;
16072: LD_ADDR_VAR 0 5
16076: PUSH
16077: LD_VAR 0 2
16081: PUSH
16082: LD_INT 1
16084: ARRAY
16085: ST_TO_ADDR
// if result > 1 then
16086: LD_VAR 0 2
16090: PUSH
16091: LD_INT 1
16093: GREATER
16094: IFFALSE 16206
// for i = 2 to result do
16096: LD_ADDR_VAR 0 3
16100: PUSH
16101: DOUBLE
16102: LD_INT 2
16104: DEC
16105: ST_TO_ADDR
16106: LD_VAR 0 2
16110: PUSH
16111: FOR_TO
16112: IFFALSE 16204
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16114: LD_ADDR_VAR 0 4
16118: PUSH
16119: LD_VAR 0 2
16123: PUSH
16124: LD_VAR 0 3
16128: ARRAY
16129: PPUSH
16130: LD_INT 3
16132: PPUSH
16133: CALL_OW 259
16137: PUSH
16138: LD_VAR 0 2
16142: PUSH
16143: LD_VAR 0 3
16147: ARRAY
16148: PPUSH
16149: CALL_OW 432
16153: MINUS
16154: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16155: LD_VAR 0 4
16159: PUSH
16160: LD_VAR 0 5
16164: PPUSH
16165: LD_INT 3
16167: PPUSH
16168: CALL_OW 259
16172: PUSH
16173: LD_VAR 0 5
16177: PPUSH
16178: CALL_OW 432
16182: MINUS
16183: GREATEREQUAL
16184: IFFALSE 16202
// mech := result [ i ] ;
16186: LD_ADDR_VAR 0 5
16190: PUSH
16191: LD_VAR 0 2
16195: PUSH
16196: LD_VAR 0 3
16200: ARRAY
16201: ST_TO_ADDR
// end ;
16202: GO 16111
16204: POP
16205: POP
// ComLinkTo ( vehicle , mech ) ;
16206: LD_VAR 0 1
16210: PPUSH
16211: LD_VAR 0 5
16215: PPUSH
16216: CALL_OW 135
// end ;
16220: LD_VAR 0 2
16224: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16225: LD_INT 0
16227: PPUSH
16228: PPUSH
16229: PPUSH
16230: PPUSH
16231: PPUSH
16232: PPUSH
16233: PPUSH
16234: PPUSH
16235: PPUSH
16236: PPUSH
16237: PPUSH
16238: PPUSH
16239: PPUSH
// result := [ ] ;
16240: LD_ADDR_VAR 0 7
16244: PUSH
16245: EMPTY
16246: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16247: LD_VAR 0 1
16251: PPUSH
16252: CALL_OW 266
16256: PUSH
16257: LD_INT 0
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: IN
16267: NOT
16268: IFFALSE 16272
// exit ;
16270: GO 17906
// if name then
16272: LD_VAR 0 3
16276: IFFALSE 16292
// SetBName ( base_dep , name ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_VAR 0 3
16287: PPUSH
16288: CALL_OW 500
// base := GetBase ( base_dep ) ;
16292: LD_ADDR_VAR 0 15
16296: PUSH
16297: LD_VAR 0 1
16301: PPUSH
16302: CALL_OW 274
16306: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16307: LD_ADDR_VAR 0 16
16311: PUSH
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 255
16321: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16322: LD_ADDR_VAR 0 17
16326: PUSH
16327: LD_VAR 0 1
16331: PPUSH
16332: CALL_OW 248
16336: ST_TO_ADDR
// if sources then
16337: LD_VAR 0 5
16341: IFFALSE 16388
// for i = 1 to 3 do
16343: LD_ADDR_VAR 0 8
16347: PUSH
16348: DOUBLE
16349: LD_INT 1
16351: DEC
16352: ST_TO_ADDR
16353: LD_INT 3
16355: PUSH
16356: FOR_TO
16357: IFFALSE 16386
// AddResourceType ( base , i , sources [ i ] ) ;
16359: LD_VAR 0 15
16363: PPUSH
16364: LD_VAR 0 8
16368: PPUSH
16369: LD_VAR 0 5
16373: PUSH
16374: LD_VAR 0 8
16378: ARRAY
16379: PPUSH
16380: CALL_OW 276
16384: GO 16356
16386: POP
16387: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16388: LD_ADDR_VAR 0 18
16392: PUSH
16393: LD_VAR 0 15
16397: PPUSH
16398: LD_VAR 0 2
16402: PPUSH
16403: LD_INT 1
16405: PPUSH
16406: CALL 15648 0 3
16410: ST_TO_ADDR
// InitHc ;
16411: CALL_OW 19
// InitUc ;
16415: CALL_OW 18
// uc_side := side ;
16419: LD_ADDR_OWVAR 20
16423: PUSH
16424: LD_VAR 0 16
16428: ST_TO_ADDR
// uc_nation := nation ;
16429: LD_ADDR_OWVAR 21
16433: PUSH
16434: LD_VAR 0 17
16438: ST_TO_ADDR
// if buildings then
16439: LD_VAR 0 18
16443: IFFALSE 17765
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16445: LD_ADDR_VAR 0 19
16449: PUSH
16450: LD_VAR 0 18
16454: PPUSH
16455: LD_INT 2
16457: PUSH
16458: LD_INT 30
16460: PUSH
16461: LD_INT 29
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 30
16470: PUSH
16471: LD_INT 30
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: PPUSH
16483: CALL_OW 72
16487: ST_TO_ADDR
// if tmp then
16488: LD_VAR 0 19
16492: IFFALSE 16540
// for i in tmp do
16494: LD_ADDR_VAR 0 8
16498: PUSH
16499: LD_VAR 0 19
16503: PUSH
16504: FOR_IN
16505: IFFALSE 16538
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16507: LD_VAR 0 8
16511: PPUSH
16512: CALL_OW 250
16516: PPUSH
16517: LD_VAR 0 8
16521: PPUSH
16522: CALL_OW 251
16526: PPUSH
16527: LD_VAR 0 16
16531: PPUSH
16532: CALL_OW 441
16536: GO 16504
16538: POP
16539: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16540: LD_VAR 0 18
16544: PPUSH
16545: LD_INT 2
16547: PUSH
16548: LD_INT 30
16550: PUSH
16551: LD_INT 32
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 30
16560: PUSH
16561: LD_INT 33
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 72
16577: IFFALSE 16665
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16579: LD_ADDR_VAR 0 8
16583: PUSH
16584: LD_VAR 0 18
16588: PPUSH
16589: LD_INT 2
16591: PUSH
16592: LD_INT 30
16594: PUSH
16595: LD_INT 32
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 30
16604: PUSH
16605: LD_INT 33
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: LIST
16616: PPUSH
16617: CALL_OW 72
16621: PUSH
16622: FOR_IN
16623: IFFALSE 16663
// begin if not GetBWeapon ( i ) then
16625: LD_VAR 0 8
16629: PPUSH
16630: CALL_OW 269
16634: NOT
16635: IFFALSE 16661
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16637: LD_VAR 0 8
16641: PPUSH
16642: LD_VAR 0 8
16646: PPUSH
16647: LD_VAR 0 2
16651: PPUSH
16652: CALL 17911 0 2
16656: PPUSH
16657: CALL_OW 431
// end ;
16661: GO 16622
16663: POP
16664: POP
// end ; for i = 1 to personel do
16665: LD_ADDR_VAR 0 8
16669: PUSH
16670: DOUBLE
16671: LD_INT 1
16673: DEC
16674: ST_TO_ADDR
16675: LD_VAR 0 6
16679: PUSH
16680: FOR_TO
16681: IFFALSE 17745
// begin if i > 4 then
16683: LD_VAR 0 8
16687: PUSH
16688: LD_INT 4
16690: GREATER
16691: IFFALSE 16695
// break ;
16693: GO 17745
// case i of 1 :
16695: LD_VAR 0 8
16699: PUSH
16700: LD_INT 1
16702: DOUBLE
16703: EQUAL
16704: IFTRUE 16708
16706: GO 16788
16708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16709: LD_ADDR_VAR 0 12
16713: PUSH
16714: LD_VAR 0 18
16718: PPUSH
16719: LD_INT 22
16721: PUSH
16722: LD_VAR 0 16
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 58
16733: PUSH
16734: EMPTY
16735: LIST
16736: PUSH
16737: LD_INT 2
16739: PUSH
16740: LD_INT 30
16742: PUSH
16743: LD_INT 32
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 30
16752: PUSH
16753: LD_INT 4
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 30
16762: PUSH
16763: LD_INT 5
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: LIST
16780: PPUSH
16781: CALL_OW 72
16785: ST_TO_ADDR
16786: GO 17010
16788: LD_INT 2
16790: DOUBLE
16791: EQUAL
16792: IFTRUE 16796
16794: GO 16858
16796: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16797: LD_ADDR_VAR 0 12
16801: PUSH
16802: LD_VAR 0 18
16806: PPUSH
16807: LD_INT 22
16809: PUSH
16810: LD_VAR 0 16
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 2
16821: PUSH
16822: LD_INT 30
16824: PUSH
16825: LD_INT 0
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 30
16834: PUSH
16835: LD_INT 1
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: LIST
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PPUSH
16851: CALL_OW 72
16855: ST_TO_ADDR
16856: GO 17010
16858: LD_INT 3
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 16928
16866: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
16867: LD_ADDR_VAR 0 12
16871: PUSH
16872: LD_VAR 0 18
16876: PPUSH
16877: LD_INT 22
16879: PUSH
16880: LD_VAR 0 16
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 2
16891: PUSH
16892: LD_INT 30
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 30
16904: PUSH
16905: LD_INT 3
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: LIST
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PPUSH
16921: CALL_OW 72
16925: ST_TO_ADDR
16926: GO 17010
16928: LD_INT 4
16930: DOUBLE
16931: EQUAL
16932: IFTRUE 16936
16934: GO 17009
16936: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
16937: LD_ADDR_VAR 0 12
16941: PUSH
16942: LD_VAR 0 18
16946: PPUSH
16947: LD_INT 22
16949: PUSH
16950: LD_VAR 0 16
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 2
16961: PUSH
16962: LD_INT 30
16964: PUSH
16965: LD_INT 6
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 30
16974: PUSH
16975: LD_INT 7
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 30
16984: PUSH
16985: LD_INT 8
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PPUSH
17002: CALL_OW 72
17006: ST_TO_ADDR
17007: GO 17010
17009: POP
// if i = 1 then
17010: LD_VAR 0 8
17014: PUSH
17015: LD_INT 1
17017: EQUAL
17018: IFFALSE 17129
// begin tmp := [ ] ;
17020: LD_ADDR_VAR 0 19
17024: PUSH
17025: EMPTY
17026: ST_TO_ADDR
// for j in f do
17027: LD_ADDR_VAR 0 9
17031: PUSH
17032: LD_VAR 0 12
17036: PUSH
17037: FOR_IN
17038: IFFALSE 17111
// if GetBType ( j ) = b_bunker then
17040: LD_VAR 0 9
17044: PPUSH
17045: CALL_OW 266
17049: PUSH
17050: LD_INT 32
17052: EQUAL
17053: IFFALSE 17080
// tmp := Insert ( tmp , 1 , j ) else
17055: LD_ADDR_VAR 0 19
17059: PUSH
17060: LD_VAR 0 19
17064: PPUSH
17065: LD_INT 1
17067: PPUSH
17068: LD_VAR 0 9
17072: PPUSH
17073: CALL_OW 2
17077: ST_TO_ADDR
17078: GO 17109
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17080: LD_ADDR_VAR 0 19
17084: PUSH
17085: LD_VAR 0 19
17089: PPUSH
17090: LD_VAR 0 19
17094: PUSH
17095: LD_INT 1
17097: PLUS
17098: PPUSH
17099: LD_VAR 0 9
17103: PPUSH
17104: CALL_OW 2
17108: ST_TO_ADDR
17109: GO 17037
17111: POP
17112: POP
// if tmp then
17113: LD_VAR 0 19
17117: IFFALSE 17129
// f := tmp ;
17119: LD_ADDR_VAR 0 12
17123: PUSH
17124: LD_VAR 0 19
17128: ST_TO_ADDR
// end ; x := personel [ i ] ;
17129: LD_ADDR_VAR 0 13
17133: PUSH
17134: LD_VAR 0 6
17138: PUSH
17139: LD_VAR 0 8
17143: ARRAY
17144: ST_TO_ADDR
// if x = - 1 then
17145: LD_VAR 0 13
17149: PUSH
17150: LD_INT 1
17152: NEG
17153: EQUAL
17154: IFFALSE 17363
// begin for j in f do
17156: LD_ADDR_VAR 0 9
17160: PUSH
17161: LD_VAR 0 12
17165: PUSH
17166: FOR_IN
17167: IFFALSE 17359
// repeat InitHc ;
17169: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17173: LD_VAR 0 9
17177: PPUSH
17178: CALL_OW 266
17182: PUSH
17183: LD_INT 5
17185: EQUAL
17186: IFFALSE 17256
// begin if UnitsInside ( j ) < 3 then
17188: LD_VAR 0 9
17192: PPUSH
17193: CALL_OW 313
17197: PUSH
17198: LD_INT 3
17200: LESS
17201: IFFALSE 17237
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17203: LD_INT 0
17205: PPUSH
17206: LD_INT 5
17208: PUSH
17209: LD_INT 8
17211: PUSH
17212: LD_INT 9
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: LIST
17219: PUSH
17220: LD_VAR 0 17
17224: ARRAY
17225: PPUSH
17226: LD_VAR 0 4
17230: PPUSH
17231: CALL_OW 380
17235: GO 17254
// PrepareHuman ( false , i , skill ) ;
17237: LD_INT 0
17239: PPUSH
17240: LD_VAR 0 8
17244: PPUSH
17245: LD_VAR 0 4
17249: PPUSH
17250: CALL_OW 380
// end else
17254: GO 17273
// PrepareHuman ( false , i , skill ) ;
17256: LD_INT 0
17258: PPUSH
17259: LD_VAR 0 8
17263: PPUSH
17264: LD_VAR 0 4
17268: PPUSH
17269: CALL_OW 380
// un := CreateHuman ;
17273: LD_ADDR_VAR 0 14
17277: PUSH
17278: CALL_OW 44
17282: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17283: LD_ADDR_VAR 0 7
17287: PUSH
17288: LD_VAR 0 7
17292: PPUSH
17293: LD_INT 1
17295: PPUSH
17296: LD_VAR 0 14
17300: PPUSH
17301: CALL_OW 2
17305: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17306: LD_VAR 0 14
17310: PPUSH
17311: LD_VAR 0 9
17315: PPUSH
17316: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17320: LD_VAR 0 9
17324: PPUSH
17325: CALL_OW 313
17329: PUSH
17330: LD_INT 6
17332: EQUAL
17333: PUSH
17334: LD_VAR 0 9
17338: PPUSH
17339: CALL_OW 266
17343: PUSH
17344: LD_INT 32
17346: PUSH
17347: LD_INT 31
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: IN
17354: OR
17355: IFFALSE 17169
17357: GO 17166
17359: POP
17360: POP
// end else
17361: GO 17743
// for j = 1 to x do
17363: LD_ADDR_VAR 0 9
17367: PUSH
17368: DOUBLE
17369: LD_INT 1
17371: DEC
17372: ST_TO_ADDR
17373: LD_VAR 0 13
17377: PUSH
17378: FOR_TO
17379: IFFALSE 17741
// begin InitHc ;
17381: CALL_OW 19
// if not f then
17385: LD_VAR 0 12
17389: NOT
17390: IFFALSE 17479
// begin PrepareHuman ( false , i , skill ) ;
17392: LD_INT 0
17394: PPUSH
17395: LD_VAR 0 8
17399: PPUSH
17400: LD_VAR 0 4
17404: PPUSH
17405: CALL_OW 380
// un := CreateHuman ;
17409: LD_ADDR_VAR 0 14
17413: PUSH
17414: CALL_OW 44
17418: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17419: LD_ADDR_VAR 0 7
17423: PUSH
17424: LD_VAR 0 7
17428: PPUSH
17429: LD_INT 1
17431: PPUSH
17432: LD_VAR 0 14
17436: PPUSH
17437: CALL_OW 2
17441: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17442: LD_VAR 0 14
17446: PPUSH
17447: LD_VAR 0 1
17451: PPUSH
17452: CALL_OW 250
17456: PPUSH
17457: LD_VAR 0 1
17461: PPUSH
17462: CALL_OW 251
17466: PPUSH
17467: LD_INT 10
17469: PPUSH
17470: LD_INT 0
17472: PPUSH
17473: CALL_OW 50
// continue ;
17477: GO 17378
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17479: LD_VAR 0 12
17483: PUSH
17484: LD_INT 1
17486: ARRAY
17487: PPUSH
17488: CALL_OW 313
17492: PUSH
17493: LD_VAR 0 12
17497: PUSH
17498: LD_INT 1
17500: ARRAY
17501: PPUSH
17502: CALL_OW 266
17506: PUSH
17507: LD_INT 32
17509: PUSH
17510: LD_INT 31
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: IN
17517: AND
17518: PUSH
17519: LD_VAR 0 12
17523: PUSH
17524: LD_INT 1
17526: ARRAY
17527: PPUSH
17528: CALL_OW 313
17532: PUSH
17533: LD_INT 6
17535: EQUAL
17536: OR
17537: IFFALSE 17557
// f := Delete ( f , 1 ) ;
17539: LD_ADDR_VAR 0 12
17543: PUSH
17544: LD_VAR 0 12
17548: PPUSH
17549: LD_INT 1
17551: PPUSH
17552: CALL_OW 3
17556: ST_TO_ADDR
// if not f then
17557: LD_VAR 0 12
17561: NOT
17562: IFFALSE 17580
// begin x := x + 2 ;
17564: LD_ADDR_VAR 0 13
17568: PUSH
17569: LD_VAR 0 13
17573: PUSH
17574: LD_INT 2
17576: PLUS
17577: ST_TO_ADDR
// continue ;
17578: GO 17378
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17580: LD_VAR 0 12
17584: PUSH
17585: LD_INT 1
17587: ARRAY
17588: PPUSH
17589: CALL_OW 266
17593: PUSH
17594: LD_INT 5
17596: EQUAL
17597: IFFALSE 17671
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17599: LD_VAR 0 12
17603: PUSH
17604: LD_INT 1
17606: ARRAY
17607: PPUSH
17608: CALL_OW 313
17612: PUSH
17613: LD_INT 3
17615: LESS
17616: IFFALSE 17652
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17618: LD_INT 0
17620: PPUSH
17621: LD_INT 5
17623: PUSH
17624: LD_INT 8
17626: PUSH
17627: LD_INT 9
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: PUSH
17635: LD_VAR 0 17
17639: ARRAY
17640: PPUSH
17641: LD_VAR 0 4
17645: PPUSH
17646: CALL_OW 380
17650: GO 17669
// PrepareHuman ( false , i , skill ) ;
17652: LD_INT 0
17654: PPUSH
17655: LD_VAR 0 8
17659: PPUSH
17660: LD_VAR 0 4
17664: PPUSH
17665: CALL_OW 380
// end else
17669: GO 17688
// PrepareHuman ( false , i , skill ) ;
17671: LD_INT 0
17673: PPUSH
17674: LD_VAR 0 8
17678: PPUSH
17679: LD_VAR 0 4
17683: PPUSH
17684: CALL_OW 380
// un := CreateHuman ;
17688: LD_ADDR_VAR 0 14
17692: PUSH
17693: CALL_OW 44
17697: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17698: LD_ADDR_VAR 0 7
17702: PUSH
17703: LD_VAR 0 7
17707: PPUSH
17708: LD_INT 1
17710: PPUSH
17711: LD_VAR 0 14
17715: PPUSH
17716: CALL_OW 2
17720: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17721: LD_VAR 0 14
17725: PPUSH
17726: LD_VAR 0 12
17730: PUSH
17731: LD_INT 1
17733: ARRAY
17734: PPUSH
17735: CALL_OW 52
// end ;
17739: GO 17378
17741: POP
17742: POP
// end ;
17743: GO 16680
17745: POP
17746: POP
// result := result ^ buildings ;
17747: LD_ADDR_VAR 0 7
17751: PUSH
17752: LD_VAR 0 7
17756: PUSH
17757: LD_VAR 0 18
17761: ADD
17762: ST_TO_ADDR
// end else
17763: GO 17906
// begin for i = 1 to personel do
17765: LD_ADDR_VAR 0 8
17769: PUSH
17770: DOUBLE
17771: LD_INT 1
17773: DEC
17774: ST_TO_ADDR
17775: LD_VAR 0 6
17779: PUSH
17780: FOR_TO
17781: IFFALSE 17904
// begin if i > 4 then
17783: LD_VAR 0 8
17787: PUSH
17788: LD_INT 4
17790: GREATER
17791: IFFALSE 17795
// break ;
17793: GO 17904
// x := personel [ i ] ;
17795: LD_ADDR_VAR 0 13
17799: PUSH
17800: LD_VAR 0 6
17804: PUSH
17805: LD_VAR 0 8
17809: ARRAY
17810: ST_TO_ADDR
// if x = - 1 then
17811: LD_VAR 0 13
17815: PUSH
17816: LD_INT 1
17818: NEG
17819: EQUAL
17820: IFFALSE 17824
// continue ;
17822: GO 17780
// PrepareHuman ( false , i , skill ) ;
17824: LD_INT 0
17826: PPUSH
17827: LD_VAR 0 8
17831: PPUSH
17832: LD_VAR 0 4
17836: PPUSH
17837: CALL_OW 380
// un := CreateHuman ;
17841: LD_ADDR_VAR 0 14
17845: PUSH
17846: CALL_OW 44
17850: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17851: LD_VAR 0 14
17855: PPUSH
17856: LD_VAR 0 1
17860: PPUSH
17861: CALL_OW 250
17865: PPUSH
17866: LD_VAR 0 1
17870: PPUSH
17871: CALL_OW 251
17875: PPUSH
17876: LD_INT 10
17878: PPUSH
17879: LD_INT 0
17881: PPUSH
17882: CALL_OW 50
// result := result ^ un ;
17886: LD_ADDR_VAR 0 7
17890: PUSH
17891: LD_VAR 0 7
17895: PUSH
17896: LD_VAR 0 14
17900: ADD
17901: ST_TO_ADDR
// end ;
17902: GO 17780
17904: POP
17905: POP
// end ; end ;
17906: LD_VAR 0 7
17910: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
17911: LD_INT 0
17913: PPUSH
17914: PPUSH
17915: PPUSH
17916: PPUSH
17917: PPUSH
17918: PPUSH
17919: PPUSH
17920: PPUSH
17921: PPUSH
17922: PPUSH
17923: PPUSH
17924: PPUSH
17925: PPUSH
17926: PPUSH
17927: PPUSH
17928: PPUSH
// result := false ;
17929: LD_ADDR_VAR 0 3
17933: PUSH
17934: LD_INT 0
17936: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
17937: LD_VAR 0 1
17941: NOT
17942: PUSH
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 266
17952: PUSH
17953: LD_INT 32
17955: PUSH
17956: LD_INT 33
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: IN
17963: NOT
17964: OR
17965: IFFALSE 17969
// exit ;
17967: GO 19078
// nat := GetNation ( tower ) ;
17969: LD_ADDR_VAR 0 12
17973: PUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 248
17983: ST_TO_ADDR
// side := GetSide ( tower ) ;
17984: LD_ADDR_VAR 0 16
17988: PUSH
17989: LD_VAR 0 1
17993: PPUSH
17994: CALL_OW 255
17998: ST_TO_ADDR
// x := GetX ( tower ) ;
17999: LD_ADDR_VAR 0 10
18003: PUSH
18004: LD_VAR 0 1
18008: PPUSH
18009: CALL_OW 250
18013: ST_TO_ADDR
// y := GetY ( tower ) ;
18014: LD_ADDR_VAR 0 11
18018: PUSH
18019: LD_VAR 0 1
18023: PPUSH
18024: CALL_OW 251
18028: ST_TO_ADDR
// if not x or not y then
18029: LD_VAR 0 10
18033: NOT
18034: PUSH
18035: LD_VAR 0 11
18039: NOT
18040: OR
18041: IFFALSE 18045
// exit ;
18043: GO 19078
// weapon := 0 ;
18045: LD_ADDR_VAR 0 18
18049: PUSH
18050: LD_INT 0
18052: ST_TO_ADDR
// fac_list := [ ] ;
18053: LD_ADDR_VAR 0 17
18057: PUSH
18058: EMPTY
18059: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18060: LD_ADDR_VAR 0 6
18064: PUSH
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL_OW 274
18074: PPUSH
18075: LD_VAR 0 2
18079: PPUSH
18080: LD_INT 0
18082: PPUSH
18083: CALL 15648 0 3
18087: PPUSH
18088: LD_INT 30
18090: PUSH
18091: LD_INT 3
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PPUSH
18098: CALL_OW 72
18102: ST_TO_ADDR
// if not factories then
18103: LD_VAR 0 6
18107: NOT
18108: IFFALSE 18112
// exit ;
18110: GO 19078
// for i in factories do
18112: LD_ADDR_VAR 0 8
18116: PUSH
18117: LD_VAR 0 6
18121: PUSH
18122: FOR_IN
18123: IFFALSE 18148
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18125: LD_ADDR_VAR 0 17
18129: PUSH
18130: LD_VAR 0 17
18134: PUSH
18135: LD_VAR 0 8
18139: PPUSH
18140: CALL_OW 478
18144: UNION
18145: ST_TO_ADDR
18146: GO 18122
18148: POP
18149: POP
// if not fac_list then
18150: LD_VAR 0 17
18154: NOT
18155: IFFALSE 18159
// exit ;
18157: GO 19078
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18159: LD_ADDR_VAR 0 5
18163: PUSH
18164: LD_INT 4
18166: PUSH
18167: LD_INT 5
18169: PUSH
18170: LD_INT 9
18172: PUSH
18173: LD_INT 10
18175: PUSH
18176: LD_INT 6
18178: PUSH
18179: LD_INT 7
18181: PUSH
18182: LD_INT 11
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 27
18196: PUSH
18197: LD_INT 28
18199: PUSH
18200: LD_INT 26
18202: PUSH
18203: LD_INT 30
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 43
18214: PUSH
18215: LD_INT 44
18217: PUSH
18218: LD_INT 46
18220: PUSH
18221: LD_INT 45
18223: PUSH
18224: LD_INT 47
18226: PUSH
18227: LD_INT 49
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: LIST
18242: PUSH
18243: LD_VAR 0 12
18247: ARRAY
18248: ST_TO_ADDR
// list := list isect fac_list ;
18249: LD_ADDR_VAR 0 5
18253: PUSH
18254: LD_VAR 0 5
18258: PUSH
18259: LD_VAR 0 17
18263: ISECT
18264: ST_TO_ADDR
// if not list then
18265: LD_VAR 0 5
18269: NOT
18270: IFFALSE 18274
// exit ;
18272: GO 19078
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18274: LD_VAR 0 12
18278: PUSH
18279: LD_INT 3
18281: EQUAL
18282: PUSH
18283: LD_INT 49
18285: PUSH
18286: LD_VAR 0 5
18290: IN
18291: AND
18292: PUSH
18293: LD_INT 31
18295: PPUSH
18296: LD_VAR 0 16
18300: PPUSH
18301: CALL_OW 321
18305: PUSH
18306: LD_INT 2
18308: EQUAL
18309: AND
18310: IFFALSE 18370
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18312: LD_INT 22
18314: PUSH
18315: LD_VAR 0 16
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 35
18326: PUSH
18327: LD_INT 49
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 91
18336: PUSH
18337: LD_VAR 0 1
18341: PUSH
18342: LD_INT 10
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: LIST
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: LIST
18354: PPUSH
18355: CALL_OW 69
18359: NOT
18360: IFFALSE 18370
// weapon := ru_time_lapser ;
18362: LD_ADDR_VAR 0 18
18366: PUSH
18367: LD_INT 49
18369: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18370: LD_VAR 0 12
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: LD_INT 2
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: IN
18385: PUSH
18386: LD_INT 11
18388: PUSH
18389: LD_VAR 0 5
18393: IN
18394: PUSH
18395: LD_INT 30
18397: PUSH
18398: LD_VAR 0 5
18402: IN
18403: OR
18404: AND
18405: PUSH
18406: LD_INT 6
18408: PPUSH
18409: LD_VAR 0 16
18413: PPUSH
18414: CALL_OW 321
18418: PUSH
18419: LD_INT 2
18421: EQUAL
18422: AND
18423: IFFALSE 18588
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18425: LD_INT 22
18427: PUSH
18428: LD_VAR 0 16
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: LD_INT 35
18442: PUSH
18443: LD_INT 11
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 35
18452: PUSH
18453: LD_INT 30
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 91
18467: PUSH
18468: LD_VAR 0 1
18472: PUSH
18473: LD_INT 18
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: LIST
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: LIST
18485: PPUSH
18486: CALL_OW 69
18490: NOT
18491: PUSH
18492: LD_INT 22
18494: PUSH
18495: LD_VAR 0 16
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 2
18506: PUSH
18507: LD_INT 30
18509: PUSH
18510: LD_INT 32
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 30
18519: PUSH
18520: LD_INT 33
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 91
18534: PUSH
18535: LD_VAR 0 1
18539: PUSH
18540: LD_INT 12
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: LIST
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: PUSH
18553: EMPTY
18554: LIST
18555: PPUSH
18556: CALL_OW 69
18560: PUSH
18561: LD_INT 2
18563: GREATER
18564: AND
18565: IFFALSE 18588
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18567: LD_ADDR_VAR 0 18
18571: PUSH
18572: LD_INT 11
18574: PUSH
18575: LD_INT 30
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_VAR 0 12
18586: ARRAY
18587: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18588: LD_VAR 0 18
18592: NOT
18593: PUSH
18594: LD_INT 40
18596: PPUSH
18597: LD_VAR 0 16
18601: PPUSH
18602: CALL_OW 321
18606: PUSH
18607: LD_INT 2
18609: EQUAL
18610: AND
18611: PUSH
18612: LD_INT 7
18614: PUSH
18615: LD_VAR 0 5
18619: IN
18620: PUSH
18621: LD_INT 28
18623: PUSH
18624: LD_VAR 0 5
18628: IN
18629: OR
18630: PUSH
18631: LD_INT 45
18633: PUSH
18634: LD_VAR 0 5
18638: IN
18639: OR
18640: AND
18641: IFFALSE 18895
// begin hex := GetHexInfo ( x , y ) ;
18643: LD_ADDR_VAR 0 4
18647: PUSH
18648: LD_VAR 0 10
18652: PPUSH
18653: LD_VAR 0 11
18657: PPUSH
18658: CALL_OW 546
18662: ST_TO_ADDR
// if hex [ 1 ] then
18663: LD_VAR 0 4
18667: PUSH
18668: LD_INT 1
18670: ARRAY
18671: IFFALSE 18675
// exit ;
18673: GO 19078
// height := hex [ 2 ] ;
18675: LD_ADDR_VAR 0 15
18679: PUSH
18680: LD_VAR 0 4
18684: PUSH
18685: LD_INT 2
18687: ARRAY
18688: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18689: LD_ADDR_VAR 0 14
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: LD_INT 2
18699: PUSH
18700: LD_INT 3
18702: PUSH
18703: LD_INT 5
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: ST_TO_ADDR
// for i in tmp do
18712: LD_ADDR_VAR 0 8
18716: PUSH
18717: LD_VAR 0 14
18721: PUSH
18722: FOR_IN
18723: IFFALSE 18893
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18725: LD_ADDR_VAR 0 9
18729: PUSH
18730: LD_VAR 0 10
18734: PPUSH
18735: LD_VAR 0 8
18739: PPUSH
18740: LD_INT 5
18742: PPUSH
18743: CALL_OW 272
18747: PUSH
18748: LD_VAR 0 11
18752: PPUSH
18753: LD_VAR 0 8
18757: PPUSH
18758: LD_INT 5
18760: PPUSH
18761: CALL_OW 273
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18770: LD_VAR 0 9
18774: PUSH
18775: LD_INT 1
18777: ARRAY
18778: PPUSH
18779: LD_VAR 0 9
18783: PUSH
18784: LD_INT 2
18786: ARRAY
18787: PPUSH
18788: CALL_OW 488
18792: IFFALSE 18891
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18794: LD_ADDR_VAR 0 4
18798: PUSH
18799: LD_VAR 0 9
18803: PUSH
18804: LD_INT 1
18806: ARRAY
18807: PPUSH
18808: LD_VAR 0 9
18812: PUSH
18813: LD_INT 2
18815: ARRAY
18816: PPUSH
18817: CALL_OW 546
18821: ST_TO_ADDR
// if hex [ 1 ] then
18822: LD_VAR 0 4
18826: PUSH
18827: LD_INT 1
18829: ARRAY
18830: IFFALSE 18834
// continue ;
18832: GO 18722
// h := hex [ 2 ] ;
18834: LD_ADDR_VAR 0 13
18838: PUSH
18839: LD_VAR 0 4
18843: PUSH
18844: LD_INT 2
18846: ARRAY
18847: ST_TO_ADDR
// if h + 7 < height then
18848: LD_VAR 0 13
18852: PUSH
18853: LD_INT 7
18855: PLUS
18856: PUSH
18857: LD_VAR 0 15
18861: LESS
18862: IFFALSE 18891
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
18864: LD_ADDR_VAR 0 18
18868: PUSH
18869: LD_INT 7
18871: PUSH
18872: LD_INT 28
18874: PUSH
18875: LD_INT 45
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: LIST
18882: PUSH
18883: LD_VAR 0 12
18887: ARRAY
18888: ST_TO_ADDR
// break ;
18889: GO 18893
// end ; end ; end ;
18891: GO 18722
18893: POP
18894: POP
// end ; if not weapon then
18895: LD_VAR 0 18
18899: NOT
18900: IFFALSE 18960
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
18902: LD_ADDR_VAR 0 5
18906: PUSH
18907: LD_VAR 0 5
18911: PUSH
18912: LD_INT 11
18914: PUSH
18915: LD_INT 30
18917: PUSH
18918: LD_INT 49
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: DIFF
18926: ST_TO_ADDR
// if not list then
18927: LD_VAR 0 5
18931: NOT
18932: IFFALSE 18936
// exit ;
18934: GO 19078
// weapon := list [ rand ( 1 , list ) ] ;
18936: LD_ADDR_VAR 0 18
18940: PUSH
18941: LD_VAR 0 5
18945: PUSH
18946: LD_INT 1
18948: PPUSH
18949: LD_VAR 0 5
18953: PPUSH
18954: CALL_OW 12
18958: ARRAY
18959: ST_TO_ADDR
// end ; if weapon then
18960: LD_VAR 0 18
18964: IFFALSE 19078
// begin tmp := CostOfWeapon ( weapon ) ;
18966: LD_ADDR_VAR 0 14
18970: PUSH
18971: LD_VAR 0 18
18975: PPUSH
18976: CALL_OW 451
18980: ST_TO_ADDR
// j := GetBase ( tower ) ;
18981: LD_ADDR_VAR 0 9
18985: PUSH
18986: LD_VAR 0 1
18990: PPUSH
18991: CALL_OW 274
18995: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
18996: LD_VAR 0 9
19000: PPUSH
19001: LD_INT 1
19003: PPUSH
19004: CALL_OW 275
19008: PUSH
19009: LD_VAR 0 14
19013: PUSH
19014: LD_INT 1
19016: ARRAY
19017: GREATEREQUAL
19018: PUSH
19019: LD_VAR 0 9
19023: PPUSH
19024: LD_INT 2
19026: PPUSH
19027: CALL_OW 275
19031: PUSH
19032: LD_VAR 0 14
19036: PUSH
19037: LD_INT 2
19039: ARRAY
19040: GREATEREQUAL
19041: AND
19042: PUSH
19043: LD_VAR 0 9
19047: PPUSH
19048: LD_INT 3
19050: PPUSH
19051: CALL_OW 275
19055: PUSH
19056: LD_VAR 0 14
19060: PUSH
19061: LD_INT 3
19063: ARRAY
19064: GREATEREQUAL
19065: AND
19066: IFFALSE 19078
// result := weapon ;
19068: LD_ADDR_VAR 0 3
19072: PUSH
19073: LD_VAR 0 18
19077: ST_TO_ADDR
// end ; end ;
19078: LD_VAR 0 3
19082: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19083: LD_INT 0
19085: PPUSH
19086: PPUSH
// result := true ;
19087: LD_ADDR_VAR 0 3
19091: PUSH
19092: LD_INT 1
19094: ST_TO_ADDR
// if array1 = array2 then
19095: LD_VAR 0 1
19099: PUSH
19100: LD_VAR 0 2
19104: EQUAL
19105: IFFALSE 19165
// begin for i = 1 to array1 do
19107: LD_ADDR_VAR 0 4
19111: PUSH
19112: DOUBLE
19113: LD_INT 1
19115: DEC
19116: ST_TO_ADDR
19117: LD_VAR 0 1
19121: PUSH
19122: FOR_TO
19123: IFFALSE 19161
// if array1 [ i ] <> array2 [ i ] then
19125: LD_VAR 0 1
19129: PUSH
19130: LD_VAR 0 4
19134: ARRAY
19135: PUSH
19136: LD_VAR 0 2
19140: PUSH
19141: LD_VAR 0 4
19145: ARRAY
19146: NONEQUAL
19147: IFFALSE 19159
// begin result := false ;
19149: LD_ADDR_VAR 0 3
19153: PUSH
19154: LD_INT 0
19156: ST_TO_ADDR
// break ;
19157: GO 19161
// end ;
19159: GO 19122
19161: POP
19162: POP
// end else
19163: GO 19173
// result := false ;
19165: LD_ADDR_VAR 0 3
19169: PUSH
19170: LD_INT 0
19172: ST_TO_ADDR
// end ;
19173: LD_VAR 0 3
19177: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19178: LD_INT 0
19180: PPUSH
19181: PPUSH
// if not array1 or not array2 then
19182: LD_VAR 0 1
19186: NOT
19187: PUSH
19188: LD_VAR 0 2
19192: NOT
19193: OR
19194: IFFALSE 19198
// exit ;
19196: GO 19262
// result := true ;
19198: LD_ADDR_VAR 0 3
19202: PUSH
19203: LD_INT 1
19205: ST_TO_ADDR
// for i = 1 to array1 do
19206: LD_ADDR_VAR 0 4
19210: PUSH
19211: DOUBLE
19212: LD_INT 1
19214: DEC
19215: ST_TO_ADDR
19216: LD_VAR 0 1
19220: PUSH
19221: FOR_TO
19222: IFFALSE 19260
// if array1 [ i ] <> array2 [ i ] then
19224: LD_VAR 0 1
19228: PUSH
19229: LD_VAR 0 4
19233: ARRAY
19234: PUSH
19235: LD_VAR 0 2
19239: PUSH
19240: LD_VAR 0 4
19244: ARRAY
19245: NONEQUAL
19246: IFFALSE 19258
// begin result := false ;
19248: LD_ADDR_VAR 0 3
19252: PUSH
19253: LD_INT 0
19255: ST_TO_ADDR
// break ;
19256: GO 19260
// end ;
19258: GO 19221
19260: POP
19261: POP
// end ;
19262: LD_VAR 0 3
19266: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19267: LD_INT 0
19269: PPUSH
19270: PPUSH
19271: PPUSH
// pom := GetBase ( fac ) ;
19272: LD_ADDR_VAR 0 5
19276: PUSH
19277: LD_VAR 0 1
19281: PPUSH
19282: CALL_OW 274
19286: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19287: LD_ADDR_VAR 0 4
19291: PUSH
19292: LD_VAR 0 2
19296: PUSH
19297: LD_INT 1
19299: ARRAY
19300: PPUSH
19301: LD_VAR 0 2
19305: PUSH
19306: LD_INT 2
19308: ARRAY
19309: PPUSH
19310: LD_VAR 0 2
19314: PUSH
19315: LD_INT 3
19317: ARRAY
19318: PPUSH
19319: LD_VAR 0 2
19323: PUSH
19324: LD_INT 4
19326: ARRAY
19327: PPUSH
19328: CALL_OW 449
19332: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19333: LD_ADDR_VAR 0 3
19337: PUSH
19338: LD_VAR 0 5
19342: PPUSH
19343: LD_INT 1
19345: PPUSH
19346: CALL_OW 275
19350: PUSH
19351: LD_VAR 0 4
19355: PUSH
19356: LD_INT 1
19358: ARRAY
19359: GREATEREQUAL
19360: PUSH
19361: LD_VAR 0 5
19365: PPUSH
19366: LD_INT 2
19368: PPUSH
19369: CALL_OW 275
19373: PUSH
19374: LD_VAR 0 4
19378: PUSH
19379: LD_INT 2
19381: ARRAY
19382: GREATEREQUAL
19383: AND
19384: PUSH
19385: LD_VAR 0 5
19389: PPUSH
19390: LD_INT 3
19392: PPUSH
19393: CALL_OW 275
19397: PUSH
19398: LD_VAR 0 4
19402: PUSH
19403: LD_INT 3
19405: ARRAY
19406: GREATEREQUAL
19407: AND
19408: ST_TO_ADDR
// end ;
19409: LD_VAR 0 3
19413: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19414: LD_INT 0
19416: PPUSH
19417: PPUSH
19418: PPUSH
19419: PPUSH
// pom := GetBase ( building ) ;
19420: LD_ADDR_VAR 0 3
19424: PUSH
19425: LD_VAR 0 1
19429: PPUSH
19430: CALL_OW 274
19434: ST_TO_ADDR
// if not pom then
19435: LD_VAR 0 3
19439: NOT
19440: IFFALSE 19444
// exit ;
19442: GO 19614
// btype := GetBType ( building ) ;
19444: LD_ADDR_VAR 0 5
19448: PUSH
19449: LD_VAR 0 1
19453: PPUSH
19454: CALL_OW 266
19458: ST_TO_ADDR
// if btype = b_armoury then
19459: LD_VAR 0 5
19463: PUSH
19464: LD_INT 4
19466: EQUAL
19467: IFFALSE 19477
// btype := b_barracks ;
19469: LD_ADDR_VAR 0 5
19473: PUSH
19474: LD_INT 5
19476: ST_TO_ADDR
// if btype = b_depot then
19477: LD_VAR 0 5
19481: PUSH
19482: LD_INT 0
19484: EQUAL
19485: IFFALSE 19495
// btype := b_warehouse ;
19487: LD_ADDR_VAR 0 5
19491: PUSH
19492: LD_INT 1
19494: ST_TO_ADDR
// if btype = b_workshop then
19495: LD_VAR 0 5
19499: PUSH
19500: LD_INT 2
19502: EQUAL
19503: IFFALSE 19513
// btype := b_factory ;
19505: LD_ADDR_VAR 0 5
19509: PUSH
19510: LD_INT 3
19512: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19513: LD_ADDR_VAR 0 4
19517: PUSH
19518: LD_VAR 0 5
19522: PPUSH
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 248
19532: PPUSH
19533: CALL_OW 450
19537: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19538: LD_ADDR_VAR 0 2
19542: PUSH
19543: LD_VAR 0 3
19547: PPUSH
19548: LD_INT 1
19550: PPUSH
19551: CALL_OW 275
19555: PUSH
19556: LD_VAR 0 4
19560: PUSH
19561: LD_INT 1
19563: ARRAY
19564: GREATEREQUAL
19565: PUSH
19566: LD_VAR 0 3
19570: PPUSH
19571: LD_INT 2
19573: PPUSH
19574: CALL_OW 275
19578: PUSH
19579: LD_VAR 0 4
19583: PUSH
19584: LD_INT 2
19586: ARRAY
19587: GREATEREQUAL
19588: AND
19589: PUSH
19590: LD_VAR 0 3
19594: PPUSH
19595: LD_INT 3
19597: PPUSH
19598: CALL_OW 275
19602: PUSH
19603: LD_VAR 0 4
19607: PUSH
19608: LD_INT 3
19610: ARRAY
19611: GREATEREQUAL
19612: AND
19613: ST_TO_ADDR
// end ;
19614: LD_VAR 0 2
19618: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19619: LD_INT 0
19621: PPUSH
19622: PPUSH
19623: PPUSH
// pom := GetBase ( building ) ;
19624: LD_ADDR_VAR 0 4
19628: PUSH
19629: LD_VAR 0 1
19633: PPUSH
19634: CALL_OW 274
19638: ST_TO_ADDR
// if not pom then
19639: LD_VAR 0 4
19643: NOT
19644: IFFALSE 19648
// exit ;
19646: GO 19749
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19648: LD_ADDR_VAR 0 5
19652: PUSH
19653: LD_VAR 0 2
19657: PPUSH
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL_OW 248
19667: PPUSH
19668: CALL_OW 450
19672: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19673: LD_ADDR_VAR 0 3
19677: PUSH
19678: LD_VAR 0 4
19682: PPUSH
19683: LD_INT 1
19685: PPUSH
19686: CALL_OW 275
19690: PUSH
19691: LD_VAR 0 5
19695: PUSH
19696: LD_INT 1
19698: ARRAY
19699: GREATEREQUAL
19700: PUSH
19701: LD_VAR 0 4
19705: PPUSH
19706: LD_INT 2
19708: PPUSH
19709: CALL_OW 275
19713: PUSH
19714: LD_VAR 0 5
19718: PUSH
19719: LD_INT 2
19721: ARRAY
19722: GREATEREQUAL
19723: AND
19724: PUSH
19725: LD_VAR 0 4
19729: PPUSH
19730: LD_INT 3
19732: PPUSH
19733: CALL_OW 275
19737: PUSH
19738: LD_VAR 0 5
19742: PUSH
19743: LD_INT 3
19745: ARRAY
19746: GREATEREQUAL
19747: AND
19748: ST_TO_ADDR
// end ;
19749: LD_VAR 0 3
19753: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19754: LD_INT 0
19756: PPUSH
19757: PPUSH
19758: PPUSH
19759: PPUSH
19760: PPUSH
19761: PPUSH
19762: PPUSH
19763: PPUSH
19764: PPUSH
19765: PPUSH
19766: PPUSH
// result := false ;
19767: LD_ADDR_VAR 0 8
19771: PUSH
19772: LD_INT 0
19774: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19775: LD_VAR 0 5
19779: NOT
19780: PUSH
19781: LD_VAR 0 1
19785: NOT
19786: OR
19787: PUSH
19788: LD_VAR 0 2
19792: NOT
19793: OR
19794: PUSH
19795: LD_VAR 0 3
19799: NOT
19800: OR
19801: IFFALSE 19805
// exit ;
19803: GO 20619
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19805: LD_ADDR_VAR 0 14
19809: PUSH
19810: LD_VAR 0 1
19814: PPUSH
19815: LD_VAR 0 2
19819: PPUSH
19820: LD_VAR 0 3
19824: PPUSH
19825: LD_VAR 0 4
19829: PPUSH
19830: LD_VAR 0 5
19834: PUSH
19835: LD_INT 1
19837: ARRAY
19838: PPUSH
19839: CALL_OW 248
19843: PPUSH
19844: LD_INT 0
19846: PPUSH
19847: CALL 21856 0 6
19851: ST_TO_ADDR
// if not hexes then
19852: LD_VAR 0 14
19856: NOT
19857: IFFALSE 19861
// exit ;
19859: GO 20619
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19861: LD_ADDR_VAR 0 17
19865: PUSH
19866: LD_VAR 0 5
19870: PPUSH
19871: LD_INT 22
19873: PUSH
19874: LD_VAR 0 13
19878: PPUSH
19879: CALL_OW 255
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 2
19890: PUSH
19891: LD_INT 30
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 30
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: LIST
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PPUSH
19920: CALL_OW 72
19924: ST_TO_ADDR
// for i = 1 to hexes do
19925: LD_ADDR_VAR 0 9
19929: PUSH
19930: DOUBLE
19931: LD_INT 1
19933: DEC
19934: ST_TO_ADDR
19935: LD_VAR 0 14
19939: PUSH
19940: FOR_TO
19941: IFFALSE 20617
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19943: LD_ADDR_VAR 0 13
19947: PUSH
19948: LD_VAR 0 14
19952: PUSH
19953: LD_VAR 0 9
19957: ARRAY
19958: PUSH
19959: LD_INT 1
19961: ARRAY
19962: PPUSH
19963: LD_VAR 0 14
19967: PUSH
19968: LD_VAR 0 9
19972: ARRAY
19973: PUSH
19974: LD_INT 2
19976: ARRAY
19977: PPUSH
19978: CALL_OW 428
19982: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
19983: LD_VAR 0 14
19987: PUSH
19988: LD_VAR 0 9
19992: ARRAY
19993: PUSH
19994: LD_INT 1
19996: ARRAY
19997: PPUSH
19998: LD_VAR 0 14
20002: PUSH
20003: LD_VAR 0 9
20007: ARRAY
20008: PUSH
20009: LD_INT 2
20011: ARRAY
20012: PPUSH
20013: CALL_OW 351
20017: PUSH
20018: LD_VAR 0 14
20022: PUSH
20023: LD_VAR 0 9
20027: ARRAY
20028: PUSH
20029: LD_INT 1
20031: ARRAY
20032: PPUSH
20033: LD_VAR 0 14
20037: PUSH
20038: LD_VAR 0 9
20042: ARRAY
20043: PUSH
20044: LD_INT 2
20046: ARRAY
20047: PPUSH
20048: CALL_OW 488
20052: NOT
20053: OR
20054: PUSH
20055: LD_VAR 0 13
20059: PPUSH
20060: CALL_OW 247
20064: PUSH
20065: LD_INT 3
20067: EQUAL
20068: OR
20069: IFFALSE 20075
// exit ;
20071: POP
20072: POP
20073: GO 20619
// if not tmp then
20075: LD_VAR 0 13
20079: NOT
20080: IFFALSE 20084
// continue ;
20082: GO 19940
// result := true ;
20084: LD_ADDR_VAR 0 8
20088: PUSH
20089: LD_INT 1
20091: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20092: LD_VAR 0 6
20096: PUSH
20097: LD_VAR 0 13
20101: PPUSH
20102: CALL_OW 247
20106: PUSH
20107: LD_INT 2
20109: EQUAL
20110: AND
20111: PUSH
20112: LD_VAR 0 13
20116: PPUSH
20117: CALL_OW 263
20121: PUSH
20122: LD_INT 1
20124: EQUAL
20125: AND
20126: IFFALSE 20290
// begin if IsDrivenBy ( tmp ) then
20128: LD_VAR 0 13
20132: PPUSH
20133: CALL_OW 311
20137: IFFALSE 20141
// continue ;
20139: GO 19940
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20141: LD_VAR 0 6
20145: PPUSH
20146: LD_INT 3
20148: PUSH
20149: LD_INT 60
20151: PUSH
20152: EMPTY
20153: LIST
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 3
20161: PUSH
20162: LD_INT 55
20164: PUSH
20165: EMPTY
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PPUSH
20176: CALL_OW 72
20180: IFFALSE 20288
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20182: LD_ADDR_VAR 0 18
20186: PUSH
20187: LD_VAR 0 6
20191: PPUSH
20192: LD_INT 3
20194: PUSH
20195: LD_INT 60
20197: PUSH
20198: EMPTY
20199: LIST
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 3
20207: PUSH
20208: LD_INT 55
20210: PUSH
20211: EMPTY
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PPUSH
20222: CALL_OW 72
20226: PUSH
20227: LD_INT 1
20229: ARRAY
20230: ST_TO_ADDR
// if IsInUnit ( driver ) then
20231: LD_VAR 0 18
20235: PPUSH
20236: CALL_OW 310
20240: IFFALSE 20251
// ComExit ( driver ) ;
20242: LD_VAR 0 18
20246: PPUSH
20247: CALL 45040 0 1
// AddComEnterUnit ( driver , tmp ) ;
20251: LD_VAR 0 18
20255: PPUSH
20256: LD_VAR 0 13
20260: PPUSH
20261: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20265: LD_VAR 0 18
20269: PPUSH
20270: LD_VAR 0 7
20274: PPUSH
20275: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20279: LD_VAR 0 18
20283: PPUSH
20284: CALL_OW 181
// end ; continue ;
20288: GO 19940
// end ; if not cleaners or not tmp in cleaners then
20290: LD_VAR 0 6
20294: NOT
20295: PUSH
20296: LD_VAR 0 13
20300: PUSH
20301: LD_VAR 0 6
20305: IN
20306: NOT
20307: OR
20308: IFFALSE 20615
// begin if dep then
20310: LD_VAR 0 17
20314: IFFALSE 20450
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20316: LD_ADDR_VAR 0 16
20320: PUSH
20321: LD_VAR 0 17
20325: PUSH
20326: LD_INT 1
20328: ARRAY
20329: PPUSH
20330: CALL_OW 250
20334: PPUSH
20335: LD_VAR 0 17
20339: PUSH
20340: LD_INT 1
20342: ARRAY
20343: PPUSH
20344: CALL_OW 254
20348: PPUSH
20349: LD_INT 5
20351: PPUSH
20352: CALL_OW 272
20356: PUSH
20357: LD_VAR 0 17
20361: PUSH
20362: LD_INT 1
20364: ARRAY
20365: PPUSH
20366: CALL_OW 251
20370: PPUSH
20371: LD_VAR 0 17
20375: PUSH
20376: LD_INT 1
20378: ARRAY
20379: PPUSH
20380: CALL_OW 254
20384: PPUSH
20385: LD_INT 5
20387: PPUSH
20388: CALL_OW 273
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20397: LD_VAR 0 16
20401: PUSH
20402: LD_INT 1
20404: ARRAY
20405: PPUSH
20406: LD_VAR 0 16
20410: PUSH
20411: LD_INT 2
20413: ARRAY
20414: PPUSH
20415: CALL_OW 488
20419: IFFALSE 20450
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20421: LD_VAR 0 13
20425: PPUSH
20426: LD_VAR 0 16
20430: PUSH
20431: LD_INT 1
20433: ARRAY
20434: PPUSH
20435: LD_VAR 0 16
20439: PUSH
20440: LD_INT 2
20442: ARRAY
20443: PPUSH
20444: CALL_OW 111
// continue ;
20448: GO 19940
// end ; end ; r := GetDir ( tmp ) ;
20450: LD_ADDR_VAR 0 15
20454: PUSH
20455: LD_VAR 0 13
20459: PPUSH
20460: CALL_OW 254
20464: ST_TO_ADDR
// if r = 5 then
20465: LD_VAR 0 15
20469: PUSH
20470: LD_INT 5
20472: EQUAL
20473: IFFALSE 20483
// r := 0 ;
20475: LD_ADDR_VAR 0 15
20479: PUSH
20480: LD_INT 0
20482: ST_TO_ADDR
// for j = r to 5 do
20483: LD_ADDR_VAR 0 10
20487: PUSH
20488: DOUBLE
20489: LD_VAR 0 15
20493: DEC
20494: ST_TO_ADDR
20495: LD_INT 5
20497: PUSH
20498: FOR_TO
20499: IFFALSE 20613
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20501: LD_ADDR_VAR 0 11
20505: PUSH
20506: LD_VAR 0 13
20510: PPUSH
20511: CALL_OW 250
20515: PPUSH
20516: LD_VAR 0 10
20520: PPUSH
20521: LD_INT 2
20523: PPUSH
20524: CALL_OW 272
20528: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20529: LD_ADDR_VAR 0 12
20533: PUSH
20534: LD_VAR 0 13
20538: PPUSH
20539: CALL_OW 251
20543: PPUSH
20544: LD_VAR 0 10
20548: PPUSH
20549: LD_INT 2
20551: PPUSH
20552: CALL_OW 273
20556: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20557: LD_VAR 0 11
20561: PPUSH
20562: LD_VAR 0 12
20566: PPUSH
20567: CALL_OW 488
20571: PUSH
20572: LD_VAR 0 11
20576: PPUSH
20577: LD_VAR 0 12
20581: PPUSH
20582: CALL_OW 428
20586: NOT
20587: AND
20588: IFFALSE 20611
// begin ComMoveXY ( tmp , _x , _y ) ;
20590: LD_VAR 0 13
20594: PPUSH
20595: LD_VAR 0 11
20599: PPUSH
20600: LD_VAR 0 12
20604: PPUSH
20605: CALL_OW 111
// break ;
20609: GO 20613
// end ; end ;
20611: GO 20498
20613: POP
20614: POP
// end ; end ;
20615: GO 19940
20617: POP
20618: POP
// end ;
20619: LD_VAR 0 8
20623: RET
// export function BuildingTechInvented ( side , btype ) ; begin
20624: LD_INT 0
20626: PPUSH
// result := true ;
20627: LD_ADDR_VAR 0 3
20631: PUSH
20632: LD_INT 1
20634: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
20635: LD_VAR 0 2
20639: PUSH
20640: LD_INT 24
20642: DOUBLE
20643: EQUAL
20644: IFTRUE 20654
20646: LD_INT 33
20648: DOUBLE
20649: EQUAL
20650: IFTRUE 20654
20652: GO 20679
20654: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
20655: LD_ADDR_VAR 0 3
20659: PUSH
20660: LD_INT 32
20662: PPUSH
20663: LD_VAR 0 1
20667: PPUSH
20668: CALL_OW 321
20672: PUSH
20673: LD_INT 2
20675: EQUAL
20676: ST_TO_ADDR
20677: GO 20999
20679: LD_INT 20
20681: DOUBLE
20682: EQUAL
20683: IFTRUE 20687
20685: GO 20712
20687: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
20688: LD_ADDR_VAR 0 3
20692: PUSH
20693: LD_INT 6
20695: PPUSH
20696: LD_VAR 0 1
20700: PPUSH
20701: CALL_OW 321
20705: PUSH
20706: LD_INT 2
20708: EQUAL
20709: ST_TO_ADDR
20710: GO 20999
20712: LD_INT 22
20714: DOUBLE
20715: EQUAL
20716: IFTRUE 20726
20718: LD_INT 36
20720: DOUBLE
20721: EQUAL
20722: IFTRUE 20726
20724: GO 20751
20726: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
20727: LD_ADDR_VAR 0 3
20731: PUSH
20732: LD_INT 15
20734: PPUSH
20735: LD_VAR 0 1
20739: PPUSH
20740: CALL_OW 321
20744: PUSH
20745: LD_INT 2
20747: EQUAL
20748: ST_TO_ADDR
20749: GO 20999
20751: LD_INT 30
20753: DOUBLE
20754: EQUAL
20755: IFTRUE 20759
20757: GO 20784
20759: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
20760: LD_ADDR_VAR 0 3
20764: PUSH
20765: LD_INT 20
20767: PPUSH
20768: LD_VAR 0 1
20772: PPUSH
20773: CALL_OW 321
20777: PUSH
20778: LD_INT 2
20780: EQUAL
20781: ST_TO_ADDR
20782: GO 20999
20784: LD_INT 28
20786: DOUBLE
20787: EQUAL
20788: IFTRUE 20798
20790: LD_INT 21
20792: DOUBLE
20793: EQUAL
20794: IFTRUE 20798
20796: GO 20823
20798: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
20799: LD_ADDR_VAR 0 3
20803: PUSH
20804: LD_INT 21
20806: PPUSH
20807: LD_VAR 0 1
20811: PPUSH
20812: CALL_OW 321
20816: PUSH
20817: LD_INT 2
20819: EQUAL
20820: ST_TO_ADDR
20821: GO 20999
20823: LD_INT 16
20825: DOUBLE
20826: EQUAL
20827: IFTRUE 20831
20829: GO 20858
20831: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
20832: LD_ADDR_VAR 0 3
20836: PUSH
20837: LD_EXP 51
20841: PPUSH
20842: LD_VAR 0 1
20846: PPUSH
20847: CALL_OW 321
20851: PUSH
20852: LD_INT 2
20854: EQUAL
20855: ST_TO_ADDR
20856: GO 20999
20858: LD_INT 19
20860: DOUBLE
20861: EQUAL
20862: IFTRUE 20872
20864: LD_INT 23
20866: DOUBLE
20867: EQUAL
20868: IFTRUE 20872
20870: GO 20899
20872: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
20873: LD_ADDR_VAR 0 3
20877: PUSH
20878: LD_EXP 50
20882: PPUSH
20883: LD_VAR 0 1
20887: PPUSH
20888: CALL_OW 321
20892: PUSH
20893: LD_INT 2
20895: EQUAL
20896: ST_TO_ADDR
20897: GO 20999
20899: LD_INT 17
20901: DOUBLE
20902: EQUAL
20903: IFTRUE 20907
20905: GO 20932
20907: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
20908: LD_ADDR_VAR 0 3
20912: PUSH
20913: LD_INT 39
20915: PPUSH
20916: LD_VAR 0 1
20920: PPUSH
20921: CALL_OW 321
20925: PUSH
20926: LD_INT 2
20928: EQUAL
20929: ST_TO_ADDR
20930: GO 20999
20932: LD_INT 18
20934: DOUBLE
20935: EQUAL
20936: IFTRUE 20940
20938: GO 20965
20940: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
20941: LD_ADDR_VAR 0 3
20945: PUSH
20946: LD_INT 40
20948: PPUSH
20949: LD_VAR 0 1
20953: PPUSH
20954: CALL_OW 321
20958: PUSH
20959: LD_INT 2
20961: EQUAL
20962: ST_TO_ADDR
20963: GO 20999
20965: LD_INT 27
20967: DOUBLE
20968: EQUAL
20969: IFTRUE 20973
20971: GO 20998
20973: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
20974: LD_ADDR_VAR 0 3
20978: PUSH
20979: LD_INT 35
20981: PPUSH
20982: LD_VAR 0 1
20986: PPUSH
20987: CALL_OW 321
20991: PUSH
20992: LD_INT 2
20994: EQUAL
20995: ST_TO_ADDR
20996: GO 20999
20998: POP
// end ;
20999: LD_VAR 0 3
21003: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21004: LD_INT 0
21006: PPUSH
21007: PPUSH
21008: PPUSH
21009: PPUSH
21010: PPUSH
21011: PPUSH
21012: PPUSH
21013: PPUSH
21014: PPUSH
21015: PPUSH
21016: PPUSH
// result := false ;
21017: LD_ADDR_VAR 0 6
21021: PUSH
21022: LD_INT 0
21024: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21025: LD_VAR 0 1
21029: NOT
21030: PUSH
21031: LD_VAR 0 1
21035: PPUSH
21036: CALL_OW 266
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: IN
21051: NOT
21052: OR
21053: PUSH
21054: LD_VAR 0 2
21058: NOT
21059: OR
21060: PUSH
21061: LD_VAR 0 5
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: LD_INT 2
21074: PUSH
21075: LD_INT 3
21077: PUSH
21078: LD_INT 4
21080: PUSH
21081: LD_INT 5
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: IN
21092: NOT
21093: OR
21094: PUSH
21095: LD_VAR 0 3
21099: PPUSH
21100: LD_VAR 0 4
21104: PPUSH
21105: CALL_OW 488
21109: NOT
21110: OR
21111: IFFALSE 21115
// exit ;
21113: GO 21851
// side := GetSide ( depot ) ;
21115: LD_ADDR_VAR 0 9
21119: PUSH
21120: LD_VAR 0 1
21124: PPUSH
21125: CALL_OW 255
21129: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21130: LD_VAR 0 9
21134: PPUSH
21135: LD_VAR 0 2
21139: PPUSH
21140: CALL 20624 0 2
21144: NOT
21145: IFFALSE 21149
// exit ;
21147: GO 21851
// pom := GetBase ( depot ) ;
21149: LD_ADDR_VAR 0 10
21153: PUSH
21154: LD_VAR 0 1
21158: PPUSH
21159: CALL_OW 274
21163: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21164: LD_ADDR_VAR 0 11
21168: PUSH
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_VAR 0 1
21178: PPUSH
21179: CALL_OW 248
21183: PPUSH
21184: CALL_OW 450
21188: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21189: LD_VAR 0 10
21193: PPUSH
21194: LD_INT 1
21196: PPUSH
21197: CALL_OW 275
21201: PUSH
21202: LD_VAR 0 11
21206: PUSH
21207: LD_INT 1
21209: ARRAY
21210: GREATEREQUAL
21211: PUSH
21212: LD_VAR 0 10
21216: PPUSH
21217: LD_INT 2
21219: PPUSH
21220: CALL_OW 275
21224: PUSH
21225: LD_VAR 0 11
21229: PUSH
21230: LD_INT 2
21232: ARRAY
21233: GREATEREQUAL
21234: AND
21235: PUSH
21236: LD_VAR 0 10
21240: PPUSH
21241: LD_INT 3
21243: PPUSH
21244: CALL_OW 275
21248: PUSH
21249: LD_VAR 0 11
21253: PUSH
21254: LD_INT 3
21256: ARRAY
21257: GREATEREQUAL
21258: AND
21259: NOT
21260: IFFALSE 21264
// exit ;
21262: GO 21851
// if GetBType ( depot ) = b_depot then
21264: LD_VAR 0 1
21268: PPUSH
21269: CALL_OW 266
21273: PUSH
21274: LD_INT 0
21276: EQUAL
21277: IFFALSE 21289
// dist := 28 else
21279: LD_ADDR_VAR 0 14
21283: PUSH
21284: LD_INT 28
21286: ST_TO_ADDR
21287: GO 21297
// dist := 36 ;
21289: LD_ADDR_VAR 0 14
21293: PUSH
21294: LD_INT 36
21296: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21297: LD_VAR 0 1
21301: PPUSH
21302: LD_VAR 0 3
21306: PPUSH
21307: LD_VAR 0 4
21311: PPUSH
21312: CALL_OW 297
21316: PUSH
21317: LD_VAR 0 14
21321: GREATER
21322: IFFALSE 21326
// exit ;
21324: GO 21851
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21326: LD_ADDR_VAR 0 12
21330: PUSH
21331: LD_VAR 0 2
21335: PPUSH
21336: LD_VAR 0 3
21340: PPUSH
21341: LD_VAR 0 4
21345: PPUSH
21346: LD_VAR 0 5
21350: PPUSH
21351: LD_VAR 0 1
21355: PPUSH
21356: CALL_OW 248
21360: PPUSH
21361: LD_INT 0
21363: PPUSH
21364: CALL 21856 0 6
21368: ST_TO_ADDR
// if not hexes then
21369: LD_VAR 0 12
21373: NOT
21374: IFFALSE 21378
// exit ;
21376: GO 21851
// hex := GetHexInfo ( x , y ) ;
21378: LD_ADDR_VAR 0 15
21382: PUSH
21383: LD_VAR 0 3
21387: PPUSH
21388: LD_VAR 0 4
21392: PPUSH
21393: CALL_OW 546
21397: ST_TO_ADDR
// if hex [ 1 ] then
21398: LD_VAR 0 15
21402: PUSH
21403: LD_INT 1
21405: ARRAY
21406: IFFALSE 21410
// exit ;
21408: GO 21851
// height := hex [ 2 ] ;
21410: LD_ADDR_VAR 0 13
21414: PUSH
21415: LD_VAR 0 15
21419: PUSH
21420: LD_INT 2
21422: ARRAY
21423: ST_TO_ADDR
// for i = 1 to hexes do
21424: LD_ADDR_VAR 0 7
21428: PUSH
21429: DOUBLE
21430: LD_INT 1
21432: DEC
21433: ST_TO_ADDR
21434: LD_VAR 0 12
21438: PUSH
21439: FOR_TO
21440: IFFALSE 21770
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21442: LD_VAR 0 12
21446: PUSH
21447: LD_VAR 0 7
21451: ARRAY
21452: PUSH
21453: LD_INT 1
21455: ARRAY
21456: PPUSH
21457: LD_VAR 0 12
21461: PUSH
21462: LD_VAR 0 7
21466: ARRAY
21467: PUSH
21468: LD_INT 2
21470: ARRAY
21471: PPUSH
21472: CALL_OW 488
21476: NOT
21477: PUSH
21478: LD_VAR 0 12
21482: PUSH
21483: LD_VAR 0 7
21487: ARRAY
21488: PUSH
21489: LD_INT 1
21491: ARRAY
21492: PPUSH
21493: LD_VAR 0 12
21497: PUSH
21498: LD_VAR 0 7
21502: ARRAY
21503: PUSH
21504: LD_INT 2
21506: ARRAY
21507: PPUSH
21508: CALL_OW 428
21512: PUSH
21513: LD_INT 0
21515: GREATER
21516: OR
21517: PUSH
21518: LD_VAR 0 12
21522: PUSH
21523: LD_VAR 0 7
21527: ARRAY
21528: PUSH
21529: LD_INT 1
21531: ARRAY
21532: PPUSH
21533: LD_VAR 0 12
21537: PUSH
21538: LD_VAR 0 7
21542: ARRAY
21543: PUSH
21544: LD_INT 2
21546: ARRAY
21547: PPUSH
21548: CALL_OW 351
21552: OR
21553: IFFALSE 21559
// exit ;
21555: POP
21556: POP
21557: GO 21851
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21559: LD_ADDR_VAR 0 8
21563: PUSH
21564: LD_VAR 0 12
21568: PUSH
21569: LD_VAR 0 7
21573: ARRAY
21574: PUSH
21575: LD_INT 1
21577: ARRAY
21578: PPUSH
21579: LD_VAR 0 12
21583: PUSH
21584: LD_VAR 0 7
21588: ARRAY
21589: PUSH
21590: LD_INT 2
21592: ARRAY
21593: PPUSH
21594: CALL_OW 546
21598: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21599: LD_VAR 0 8
21603: PUSH
21604: LD_INT 1
21606: ARRAY
21607: PUSH
21608: LD_VAR 0 8
21612: PUSH
21613: LD_INT 2
21615: ARRAY
21616: PUSH
21617: LD_VAR 0 13
21621: PUSH
21622: LD_INT 2
21624: PLUS
21625: GREATER
21626: OR
21627: PUSH
21628: LD_VAR 0 8
21632: PUSH
21633: LD_INT 2
21635: ARRAY
21636: PUSH
21637: LD_VAR 0 13
21641: PUSH
21642: LD_INT 2
21644: MINUS
21645: LESS
21646: OR
21647: PUSH
21648: LD_VAR 0 8
21652: PUSH
21653: LD_INT 3
21655: ARRAY
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: LD_INT 8
21662: PUSH
21663: LD_INT 9
21665: PUSH
21666: LD_INT 10
21668: PUSH
21669: LD_INT 11
21671: PUSH
21672: LD_INT 12
21674: PUSH
21675: LD_INT 13
21677: PUSH
21678: LD_INT 16
21680: PUSH
21681: LD_INT 17
21683: PUSH
21684: LD_INT 18
21686: PUSH
21687: LD_INT 19
21689: PUSH
21690: LD_INT 20
21692: PUSH
21693: LD_INT 21
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: IN
21711: NOT
21712: OR
21713: PUSH
21714: LD_VAR 0 8
21718: PUSH
21719: LD_INT 5
21721: ARRAY
21722: NOT
21723: OR
21724: PUSH
21725: LD_VAR 0 8
21729: PUSH
21730: LD_INT 6
21732: ARRAY
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: LD_INT 2
21739: PUSH
21740: LD_INT 7
21742: PUSH
21743: LD_INT 9
21745: PUSH
21746: LD_INT 10
21748: PUSH
21749: LD_INT 11
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: IN
21760: NOT
21761: OR
21762: IFFALSE 21768
// exit ;
21764: POP
21765: POP
21766: GO 21851
// end ;
21768: GO 21439
21770: POP
21771: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21772: LD_VAR 0 9
21776: PPUSH
21777: LD_VAR 0 3
21781: PPUSH
21782: LD_VAR 0 4
21786: PPUSH
21787: LD_INT 20
21789: PPUSH
21790: CALL 13796 0 4
21794: PUSH
21795: LD_INT 4
21797: ARRAY
21798: IFFALSE 21802
// exit ;
21800: GO 21851
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21802: LD_VAR 0 2
21806: PUSH
21807: LD_INT 29
21809: PUSH
21810: LD_INT 30
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: IN
21817: PUSH
21818: LD_VAR 0 3
21822: PPUSH
21823: LD_VAR 0 4
21827: PPUSH
21828: LD_VAR 0 9
21832: PPUSH
21833: CALL_OW 440
21837: NOT
21838: AND
21839: IFFALSE 21843
// exit ;
21841: GO 21851
// result := true ;
21843: LD_ADDR_VAR 0 6
21847: PUSH
21848: LD_INT 1
21850: ST_TO_ADDR
// end ;
21851: LD_VAR 0 6
21855: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21856: LD_INT 0
21858: PPUSH
21859: PPUSH
21860: PPUSH
21861: PPUSH
21862: PPUSH
21863: PPUSH
21864: PPUSH
21865: PPUSH
21866: PPUSH
21867: PPUSH
21868: PPUSH
21869: PPUSH
21870: PPUSH
21871: PPUSH
21872: PPUSH
21873: PPUSH
21874: PPUSH
21875: PPUSH
21876: PPUSH
21877: PPUSH
21878: PPUSH
21879: PPUSH
21880: PPUSH
21881: PPUSH
21882: PPUSH
21883: PPUSH
21884: PPUSH
21885: PPUSH
21886: PPUSH
21887: PPUSH
21888: PPUSH
21889: PPUSH
21890: PPUSH
21891: PPUSH
21892: PPUSH
21893: PPUSH
21894: PPUSH
21895: PPUSH
21896: PPUSH
21897: PPUSH
21898: PPUSH
21899: PPUSH
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
// result = [ ] ;
21916: LD_ADDR_VAR 0 7
21920: PUSH
21921: EMPTY
21922: ST_TO_ADDR
// temp_list = [ ] ;
21923: LD_ADDR_VAR 0 9
21927: PUSH
21928: EMPTY
21929: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
21930: LD_VAR 0 4
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 2
21943: PUSH
21944: LD_INT 3
21946: PUSH
21947: LD_INT 4
21949: PUSH
21950: LD_INT 5
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: IN
21961: NOT
21962: PUSH
21963: LD_VAR 0 1
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: IN
21978: PUSH
21979: LD_VAR 0 5
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: LD_INT 3
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: IN
21998: NOT
21999: AND
22000: OR
22001: IFFALSE 22005
// exit ;
22003: GO 40396
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22005: LD_VAR 0 1
22009: PUSH
22010: LD_INT 6
22012: PUSH
22013: LD_INT 7
22015: PUSH
22016: LD_INT 8
22018: PUSH
22019: LD_INT 13
22021: PUSH
22022: LD_INT 12
22024: PUSH
22025: LD_INT 15
22027: PUSH
22028: LD_INT 11
22030: PUSH
22031: LD_INT 14
22033: PUSH
22034: LD_INT 10
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: IN
22048: IFFALSE 22058
// btype = b_lab ;
22050: LD_ADDR_VAR 0 1
22054: PUSH
22055: LD_INT 6
22057: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22058: LD_VAR 0 6
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: LD_INT 2
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: LIST
22076: IN
22077: NOT
22078: PUSH
22079: LD_VAR 0 1
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: LD_INT 2
22092: PUSH
22093: LD_INT 3
22095: PUSH
22096: LD_INT 6
22098: PUSH
22099: LD_INT 36
22101: PUSH
22102: LD_INT 4
22104: PUSH
22105: LD_INT 5
22107: PUSH
22108: LD_INT 31
22110: PUSH
22111: LD_INT 32
22113: PUSH
22114: LD_INT 33
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: IN
22130: NOT
22131: PUSH
22132: LD_VAR 0 6
22136: PUSH
22137: LD_INT 1
22139: EQUAL
22140: AND
22141: OR
22142: PUSH
22143: LD_VAR 0 1
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 3
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: IN
22158: NOT
22159: PUSH
22160: LD_VAR 0 6
22164: PUSH
22165: LD_INT 2
22167: EQUAL
22168: AND
22169: OR
22170: IFFALSE 22180
// mode = 0 ;
22172: LD_ADDR_VAR 0 6
22176: PUSH
22177: LD_INT 0
22179: ST_TO_ADDR
// case mode of 0 :
22180: LD_VAR 0 6
22184: PUSH
22185: LD_INT 0
22187: DOUBLE
22188: EQUAL
22189: IFTRUE 22193
22191: GO 33646
22193: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22194: LD_ADDR_VAR 0 11
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: LD_INT 0
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 0
22211: PUSH
22212: LD_INT 1
22214: NEG
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 1
22222: PUSH
22223: LD_INT 0
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 1
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: LD_INT 1
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 1
22252: NEG
22253: PUSH
22254: LD_INT 0
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 1
22275: NEG
22276: PUSH
22277: LD_INT 2
22279: NEG
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: LD_INT 2
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: LD_INT 2
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 1
22329: NEG
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: LD_INT 3
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 0
22350: PUSH
22351: LD_INT 3
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 1
22360: NEG
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22387: LD_ADDR_VAR 0 12
22391: PUSH
22392: LD_INT 0
22394: PUSH
22395: LD_INT 0
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: LD_INT 0
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: LD_INT 0
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 1
22456: NEG
22457: PUSH
22458: LD_INT 1
22460: NEG
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 1
22471: NEG
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 2
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 2
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: LD_INT 1
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 2
22510: NEG
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 2
22521: NEG
22522: PUSH
22523: LD_INT 1
22525: NEG
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 2
22533: NEG
22534: PUSH
22535: LD_INT 1
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 3
22544: NEG
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 3
22555: NEG
22556: PUSH
22557: LD_INT 1
22559: NEG
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22583: LD_ADDR_VAR 0 13
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: LD_INT 1
22603: NEG
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 0
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 1
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 0
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 1
22641: NEG
22642: PUSH
22643: LD_INT 0
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 1
22652: NEG
22653: PUSH
22654: LD_INT 1
22656: NEG
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PUSH
22666: LD_INT 2
22668: NEG
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 2
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: LD_INT 2
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 2
22706: NEG
22707: PUSH
22708: LD_INT 1
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 2
22718: NEG
22719: PUSH
22720: LD_INT 2
22722: NEG
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 2
22730: NEG
22731: PUSH
22732: LD_INT 3
22734: NEG
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 3
22742: NEG
22743: PUSH
22744: LD_INT 2
22746: NEG
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 3
22754: NEG
22755: PUSH
22756: LD_INT 3
22758: NEG
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22782: LD_ADDR_VAR 0 14
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 0
22799: PUSH
22800: LD_INT 1
22802: NEG
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 1
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: LD_INT 0
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: LD_INT 1
22855: NEG
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 1
22863: NEG
22864: PUSH
22865: LD_INT 2
22867: NEG
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 0
22875: PUSH
22876: LD_INT 2
22878: NEG
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: LD_INT 2
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 1
22917: NEG
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: LD_INT 3
22932: NEG
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: LD_INT 3
22943: NEG
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 1
22951: PUSH
22952: LD_INT 2
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22978: LD_ADDR_VAR 0 15
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 0
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 1
23006: PUSH
23007: LD_INT 0
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 1
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: LD_INT 0
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 2
23070: PUSH
23071: LD_INT 0
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 2
23080: PUSH
23081: LD_INT 1
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 1
23090: NEG
23091: PUSH
23092: LD_INT 1
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 2
23101: NEG
23102: PUSH
23103: LD_INT 0
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 2
23112: NEG
23113: PUSH
23114: LD_INT 1
23116: NEG
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 2
23124: PUSH
23125: LD_INT 1
23127: NEG
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 3
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 3
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23171: LD_ADDR_VAR 0 16
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: LD_INT 0
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 0
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: LD_INT 0
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 0
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: LD_INT 0
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: LD_INT 1
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: LD_INT 2
23256: NEG
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 2
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 2
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 1
23284: PUSH
23285: LD_INT 2
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 2
23294: NEG
23295: PUSH
23296: LD_INT 1
23298: NEG
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 2
23306: NEG
23307: PUSH
23308: LD_INT 2
23310: NEG
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 3
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: LD_INT 3
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 2
23338: PUSH
23339: LD_INT 3
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23364: LD_ADDR_VAR 0 17
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: LD_INT 0
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 0
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: LD_INT 0
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: PUSH
23403: LD_INT 1
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 0
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 1
23422: NEG
23423: PUSH
23424: LD_INT 0
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 1
23433: NEG
23434: PUSH
23435: LD_INT 1
23437: NEG
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 1
23445: NEG
23446: PUSH
23447: LD_INT 2
23449: NEG
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 0
23457: PUSH
23458: LD_INT 2
23460: NEG
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 1
23468: PUSH
23469: LD_INT 1
23471: NEG
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 2
23489: PUSH
23490: LD_INT 1
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: LD_INT 2
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: LD_INT 2
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: LD_INT 2
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 2
23540: NEG
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 2
23551: NEG
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 2
23563: NEG
23564: PUSH
23565: LD_INT 2
23567: NEG
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23594: LD_ADDR_VAR 0 18
23598: PUSH
23599: LD_INT 0
23601: PUSH
23602: LD_INT 0
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: LD_INT 1
23614: NEG
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: LD_INT 0
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 1
23652: NEG
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: LD_INT 1
23667: NEG
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: LD_INT 2
23679: NEG
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 2
23690: NEG
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 1
23698: PUSH
23699: LD_INT 1
23701: NEG
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 2
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 2
23719: PUSH
23720: LD_INT 1
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 2
23729: PUSH
23730: LD_INT 2
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 1
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 0
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 1
23759: NEG
23760: PUSH
23761: LD_INT 1
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 2
23770: NEG
23771: PUSH
23772: LD_INT 0
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 2
23781: NEG
23782: PUSH
23783: LD_INT 1
23785: NEG
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 2
23793: NEG
23794: PUSH
23795: LD_INT 2
23797: NEG
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23824: LD_ADDR_VAR 0 19
23828: PUSH
23829: LD_INT 0
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 0
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 1
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 0
23872: PUSH
23873: LD_INT 1
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 1
23882: NEG
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 1
23905: NEG
23906: PUSH
23907: LD_INT 2
23909: NEG
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: LD_INT 2
23920: NEG
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 1
23928: PUSH
23929: LD_INT 1
23931: NEG
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 2
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 2
23949: PUSH
23950: LD_INT 1
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 2
23959: PUSH
23960: LD_INT 2
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: LD_INT 2
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 0
23979: PUSH
23980: LD_INT 2
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 1
23989: NEG
23990: PUSH
23991: LD_INT 1
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 2
24000: NEG
24001: PUSH
24002: LD_INT 0
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 2
24011: NEG
24012: PUSH
24013: LD_INT 1
24015: NEG
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 2
24023: NEG
24024: PUSH
24025: LD_INT 2
24027: NEG
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24054: LD_ADDR_VAR 0 20
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: LD_INT 1
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: LD_INT 1
24127: NEG
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: LD_INT 2
24139: NEG
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 0
24147: PUSH
24148: LD_INT 2
24150: NEG
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: LD_INT 1
24161: NEG
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 2
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 2
24179: PUSH
24180: LD_INT 1
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 2
24189: PUSH
24190: LD_INT 2
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: PUSH
24200: LD_INT 2
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 0
24209: PUSH
24210: LD_INT 2
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: LD_INT 1
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 2
24230: NEG
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 2
24241: NEG
24242: PUSH
24243: LD_INT 1
24245: NEG
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 2
24253: NEG
24254: PUSH
24255: LD_INT 2
24257: NEG
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24284: LD_ADDR_VAR 0 21
24288: PUSH
24289: LD_INT 0
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 1
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: LD_INT 1
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: LD_INT 1
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 1
24342: NEG
24343: PUSH
24344: LD_INT 0
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: LD_INT 1
24357: NEG
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: NEG
24366: PUSH
24367: LD_INT 2
24369: NEG
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: LD_INT 2
24380: NEG
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: LD_INT 1
24391: NEG
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 2
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 2
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: PUSH
24420: LD_INT 2
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: LD_INT 2
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: LD_INT 2
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: NEG
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 2
24460: NEG
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 2
24471: NEG
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: LD_INT 2
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24514: LD_ADDR_VAR 0 22
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: LD_INT 0
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: LD_INT 1
24587: NEG
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: LD_INT 2
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: LD_INT 2
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: LD_INT 1
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 2
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 0
24669: PUSH
24670: LD_INT 2
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 2
24690: NEG
24691: PUSH
24692: LD_INT 0
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 2
24701: NEG
24702: PUSH
24703: LD_INT 1
24705: NEG
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 2
24713: NEG
24714: PUSH
24715: LD_INT 2
24717: NEG
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24744: LD_ADDR_VAR 0 23
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: LD_INT 1
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: LD_INT 2
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: LD_INT 2
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 2
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: NEG
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 2
24943: NEG
24944: PUSH
24945: LD_INT 2
24947: NEG
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 2
24955: NEG
24956: PUSH
24957: LD_INT 3
24959: NEG
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 1
24967: NEG
24968: PUSH
24969: LD_INT 3
24971: NEG
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 2
24990: PUSH
24991: LD_INT 1
24993: NEG
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25024: LD_ADDR_VAR 0 24
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: LD_INT 0
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 0
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: NEG
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: NEG
25106: PUSH
25107: LD_INT 2
25109: NEG
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: LD_INT 2
25120: NEG
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: LD_INT 1
25131: NEG
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: LD_INT 0
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 2
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 1
25169: PUSH
25170: LD_INT 2
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: LD_INT 2
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: NEG
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 2
25200: NEG
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 2
25211: NEG
25212: PUSH
25213: LD_INT 1
25215: NEG
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 2
25223: NEG
25224: PUSH
25225: LD_INT 2
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: PUSH
25236: LD_INT 2
25238: NEG
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 2
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 3
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 3
25267: PUSH
25268: LD_INT 2
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25300: LD_ADDR_VAR 0 25
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: LD_INT 1
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 1
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: LD_INT 2
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 2
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 2
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: LD_INT 2
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: LD_INT 2
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 0
25455: PUSH
25456: LD_INT 2
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 2
25476: NEG
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 2
25487: NEG
25488: PUSH
25489: LD_INT 1
25491: NEG
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 2
25499: NEG
25500: PUSH
25501: LD_INT 2
25503: NEG
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 3
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 3
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: LD_INT 3
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: LD_INT 3
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25574: LD_ADDR_VAR 0 26
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: LD_INT 1
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 1
25632: NEG
25633: PUSH
25634: LD_INT 0
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 1
25643: NEG
25644: PUSH
25645: LD_INT 1
25647: NEG
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: LD_INT 2
25659: NEG
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: LD_INT 2
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 2
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 1
25719: PUSH
25720: LD_INT 2
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 0
25729: PUSH
25730: LD_INT 2
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 2
25750: NEG
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 2
25761: NEG
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: NEG
25774: PUSH
25775: LD_INT 2
25777: NEG
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: LD_INT 3
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: LD_INT 3
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 2
25816: NEG
25817: PUSH
25818: LD_INT 1
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25850: LD_ADDR_VAR 0 27
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 0
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: LD_INT 1
25870: NEG
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 1
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: LD_INT 0
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: LD_INT 1
25923: NEG
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: LD_INT 2
25935: NEG
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: LD_INT 2
25946: NEG
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 2
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 0
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 2
26026: NEG
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 2
26037: NEG
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: LD_INT 2
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: NEG
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 3
26083: NEG
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 3
26095: NEG
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26130: LD_ADDR_VAR 0 28
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 1
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: NEG
26189: PUSH
26190: LD_INT 0
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: LD_INT 1
26203: NEG
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: LD_INT 2
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: LD_INT 2
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: LD_INT 1
26237: NEG
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 2
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 2
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 1
26275: PUSH
26276: LD_INT 2
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 0
26285: PUSH
26286: LD_INT 2
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 2
26306: NEG
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 2
26317: NEG
26318: PUSH
26319: LD_INT 1
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 2
26329: NEG
26330: PUSH
26331: LD_INT 2
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 2
26341: NEG
26342: PUSH
26343: LD_INT 3
26345: NEG
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: LD_INT 3
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 3
26365: NEG
26366: PUSH
26367: LD_INT 1
26369: NEG
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 3
26377: NEG
26378: PUSH
26379: LD_INT 2
26381: NEG
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26412: LD_ADDR_VAR 0 29
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 1
26432: NEG
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 1
26481: NEG
26482: PUSH
26483: LD_INT 1
26485: NEG
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 1
26493: NEG
26494: PUSH
26495: LD_INT 2
26497: NEG
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: LD_INT 2
26508: NEG
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 2
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: LD_INT 1
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 1
26547: PUSH
26548: LD_INT 2
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: LD_INT 2
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: NEG
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 2
26578: NEG
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 2
26590: NEG
26591: PUSH
26592: LD_INT 2
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 2
26602: NEG
26603: PUSH
26604: LD_INT 3
26606: NEG
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 3
26625: PUSH
26626: LD_INT 1
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: LD_INT 3
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: NEG
26646: PUSH
26647: LD_INT 2
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 3
26656: NEG
26657: PUSH
26658: LD_INT 2
26660: NEG
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26691: LD_ADDR_VAR 0 30
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: LD_INT 1
26711: NEG
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: LD_INT 1
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 1
26760: NEG
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: LD_INT 2
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: LD_INT 2
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 1
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: LD_INT 0
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 2
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 2
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 2
26857: NEG
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 2
26868: NEG
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: LD_INT 3
26884: NEG
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: LD_INT 2
26895: NEG
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 3
26903: PUSH
26904: LD_INT 2
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: LD_INT 3
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 2
26923: NEG
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 3
26934: NEG
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26969: LD_ADDR_VAR 0 31
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: NEG
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: NEG
27051: PUSH
27052: LD_INT 2
27054: NEG
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 2
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: LD_INT 2
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: LD_INT 2
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 2
27146: NEG
27147: PUSH
27148: LD_INT 2
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 2
27158: NEG
27159: PUSH
27160: LD_INT 3
27162: NEG
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 2
27170: PUSH
27171: LD_INT 1
27173: NEG
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 3
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 1
27191: PUSH
27192: LD_INT 3
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 1
27201: NEG
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 3
27212: NEG
27213: PUSH
27214: LD_INT 2
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27247: LD_ADDR_VAR 0 32
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: LD_INT 2
27332: NEG
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: LD_INT 2
27343: NEG
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 1
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 2
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 2
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: LD_INT 2
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 1
27402: NEG
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 2
27413: NEG
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 2
27424: NEG
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 1
27436: NEG
27437: PUSH
27438: LD_INT 3
27440: NEG
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: LD_INT 2
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 3
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 2
27469: PUSH
27470: LD_INT 3
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 2
27479: NEG
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 3
27490: NEG
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27525: LD_ADDR_VAR 0 33
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: LD_INT 1
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 1
27594: NEG
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 1
27606: NEG
27607: PUSH
27608: LD_INT 2
27610: NEG
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: LD_INT 1
27621: NEG
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 2
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 2
27639: PUSH
27640: LD_INT 1
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 1
27649: PUSH
27650: LD_INT 2
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: LD_INT 2
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 2
27680: NEG
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 2
27691: NEG
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 2
27703: NEG
27704: PUSH
27705: LD_INT 2
27707: NEG
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 2
27715: NEG
27716: PUSH
27717: LD_INT 3
27719: NEG
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 2
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 3
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: LD_INT 3
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: LD_INT 2
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 3
27769: NEG
27770: PUSH
27771: LD_INT 2
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27804: LD_ADDR_VAR 0 34
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: LD_INT 1
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: NEG
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: LD_INT 2
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: LD_INT 2
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 2
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: NEG
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 2
27960: NEG
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: NEG
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 2
27983: NEG
27984: PUSH
27985: LD_INT 2
27987: NEG
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: LD_INT 3
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: LD_INT 2
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 3
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 2
28028: PUSH
28029: LD_INT 3
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 3
28049: NEG
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28084: LD_ADDR_VAR 0 35
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: LD_INT 1
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: NEG
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 2
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 2
28175: NEG
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28196: LD_ADDR_VAR 0 36
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: LD_INT 1
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: NEG
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: LD_INT 2
28281: NEG
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 1
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28308: LD_ADDR_VAR 0 37
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: LD_INT 0
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: LD_INT 1
28328: NEG
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: NEG
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28420: LD_ADDR_VAR 0 38
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 0
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: NEG
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28532: LD_ADDR_VAR 0 39
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 1
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 1
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: LD_INT 1
28605: NEG
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: LD_INT 2
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: PUSH
28626: LD_INT 2
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28644: LD_ADDR_VAR 0 40
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 0
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: LD_INT 1
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 1
28702: NEG
28703: PUSH
28704: LD_INT 0
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: LD_INT 1
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: NEG
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28756: LD_ADDR_VAR 0 41
28760: PUSH
28761: LD_INT 0
28763: PUSH
28764: LD_INT 0
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 0
28773: PUSH
28774: LD_INT 1
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 1
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: LD_INT 1
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 2
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 2
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 2
28880: PUSH
28881: LD_INT 2
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: LD_INT 2
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: NEG
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 2
28911: NEG
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 2
28922: NEG
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 2
28934: NEG
28935: PUSH
28936: LD_INT 2
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 2
28946: NEG
28947: PUSH
28948: LD_INT 3
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 2
28958: PUSH
28959: LD_INT 1
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 3
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 3
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 3
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 3
28999: PUSH
29000: LD_INT 3
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: NEG
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 3
29030: NEG
29031: PUSH
29032: LD_INT 0
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 3
29041: NEG
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 3
29053: NEG
29054: PUSH
29055: LD_INT 2
29057: NEG
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 3
29065: NEG
29066: PUSH
29067: LD_INT 3
29069: NEG
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29106: LD_ADDR_VAR 0 42
29110: PUSH
29111: LD_INT 0
29113: PUSH
29114: LD_INT 0
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: LD_INT 1
29126: NEG
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: LD_INT 1
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: LD_INT 2
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: LD_INT 2
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 2
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: LD_INT 2
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 2
29272: NEG
29273: PUSH
29274: LD_INT 1
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 2
29284: NEG
29285: PUSH
29286: LD_INT 2
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 2
29296: NEG
29297: PUSH
29298: LD_INT 3
29300: NEG
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 3
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: LD_INT 3
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 3
29342: PUSH
29343: LD_INT 2
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 3
29352: PUSH
29353: LD_INT 3
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 2
29362: PUSH
29363: LD_INT 3
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: LD_INT 3
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 0
29382: PUSH
29383: LD_INT 3
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 1
29392: NEG
29393: PUSH
29394: LD_INT 2
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 3
29403: NEG
29404: PUSH
29405: LD_INT 2
29407: NEG
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 3
29415: NEG
29416: PUSH
29417: LD_INT 3
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29456: LD_ADDR_VAR 0 43
29460: PUSH
29461: LD_INT 0
29463: PUSH
29464: LD_INT 0
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 0
29473: PUSH
29474: LD_INT 1
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: LD_INT 0
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 0
29504: PUSH
29505: LD_INT 1
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 1
29514: NEG
29515: PUSH
29516: LD_INT 0
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 1
29525: NEG
29526: PUSH
29527: LD_INT 1
29529: NEG
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 1
29537: NEG
29538: PUSH
29539: LD_INT 2
29541: NEG
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: LD_INT 2
29552: NEG
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: LD_INT 1
29563: NEG
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 2
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 2
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: LD_INT 2
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: LD_INT 2
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 2
29633: NEG
29634: PUSH
29635: LD_INT 1
29637: NEG
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 1
29645: NEG
29646: PUSH
29647: LD_INT 3
29649: NEG
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 0
29657: PUSH
29658: LD_INT 3
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 1
29668: PUSH
29669: LD_INT 2
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 2
29679: PUSH
29680: LD_INT 1
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 3
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 3
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 3
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: LD_INT 3
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 1
29730: NEG
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: LD_INT 1
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 3
29752: NEG
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 3
29763: NEG
29764: PUSH
29765: LD_INT 1
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29804: LD_ADDR_VAR 0 44
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: LD_INT 1
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 1
29862: NEG
29863: PUSH
29864: LD_INT 0
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: LD_INT 1
29877: NEG
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 1
29885: NEG
29886: PUSH
29887: LD_INT 2
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 2
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 2
29928: PUSH
29929: LD_INT 2
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 2
29959: NEG
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 2
29970: NEG
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 2
29982: NEG
29983: PUSH
29984: LD_INT 2
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 2
29994: NEG
29995: PUSH
29996: LD_INT 3
29998: NEG
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 2
30006: PUSH
30007: LD_INT 1
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 3
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 3
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 3
30037: PUSH
30038: LD_INT 2
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 3
30047: PUSH
30048: LD_INT 3
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 2
30057: PUSH
30058: LD_INT 3
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 2
30067: NEG
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 3
30078: NEG
30079: PUSH
30080: LD_INT 0
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 3
30089: NEG
30090: PUSH
30091: LD_INT 1
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 3
30101: NEG
30102: PUSH
30103: LD_INT 2
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 3
30113: NEG
30114: PUSH
30115: LD_INT 3
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30154: LD_ADDR_VAR 0 45
30158: PUSH
30159: LD_INT 0
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 0
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 1
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: LD_INT 1
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: LD_INT 1
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 1
30212: NEG
30213: PUSH
30214: LD_INT 0
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: LD_INT 1
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 1
30235: NEG
30236: PUSH
30237: LD_INT 2
30239: NEG
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: LD_INT 2
30250: NEG
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 2
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 2
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: LD_INT 2
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 1
30309: NEG
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 2
30320: NEG
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 2
30332: NEG
30333: PUSH
30334: LD_INT 2
30336: NEG
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 2
30344: NEG
30345: PUSH
30346: LD_INT 3
30348: NEG
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: LD_INT 3
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: LD_INT 3
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 2
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 3
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 3
30400: PUSH
30401: LD_INT 3
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 2
30410: PUSH
30411: LD_INT 3
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 0
30430: PUSH
30431: LD_INT 3
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 1
30440: NEG
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 3
30451: NEG
30452: PUSH
30453: LD_INT 2
30455: NEG
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 3
30463: NEG
30464: PUSH
30465: LD_INT 3
30467: NEG
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30504: LD_ADDR_VAR 0 46
30508: PUSH
30509: LD_INT 0
30511: PUSH
30512: LD_INT 0
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: LD_INT 1
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 1
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 0
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 1
30562: NEG
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: NEG
30574: PUSH
30575: LD_INT 1
30577: NEG
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 1
30585: NEG
30586: PUSH
30587: LD_INT 2
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: LD_INT 2
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: LD_INT 1
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 1
30659: NEG
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 2
30670: NEG
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 2
30681: NEG
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: LD_INT 3
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 0
30705: PUSH
30706: LD_INT 3
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: PUSH
30717: LD_INT 2
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 2
30727: PUSH
30728: LD_INT 1
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 3
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 3
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 2
30789: NEG
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 3
30800: NEG
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 3
30811: NEG
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30852: LD_ADDR_VAR 0 47
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: LD_INT 1
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: LD_INT 1
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: PUSH
30935: LD_INT 2
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 0
30945: PUSH
30946: LD_INT 2
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 2
30967: NEG
30968: PUSH
30969: LD_INT 1
30971: NEG
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 2
30979: NEG
30980: PUSH
30981: LD_INT 2
30983: NEG
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31003: LD_ADDR_VAR 0 48
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: LD_INT 1
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 1
31061: NEG
31062: PUSH
31063: LD_INT 0
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: LD_INT 1
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: NEG
31085: PUSH
31086: LD_INT 2
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 0
31096: PUSH
31097: LD_INT 2
31099: NEG
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31150: LD_ADDR_VAR 0 49
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 0
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 1
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 1
31219: NEG
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 1
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 2
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 2
31262: PUSH
31263: LD_INT 2
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: LD_INT 2
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31294: LD_ADDR_VAR 0 50
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: LD_INT 1
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 0
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: NEG
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: LD_INT 1
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 2
31375: PUSH
31376: LD_INT 1
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 2
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: LD_INT 2
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: LD_INT 2
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 1
31415: NEG
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31438: LD_ADDR_VAR 0 51
31442: PUSH
31443: LD_INT 0
31445: PUSH
31446: LD_INT 0
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: LD_INT 1
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: LD_INT 1
31511: NEG
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: LD_INT 2
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: NEG
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 2
31550: NEG
31551: PUSH
31552: LD_INT 0
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 2
31561: NEG
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31585: LD_ADDR_VAR 0 52
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: LD_INT 1
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 2
31689: NEG
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: NEG
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 2
31712: NEG
31713: PUSH
31714: LD_INT 2
31716: NEG
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31736: LD_ADDR_VAR 0 53
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: LD_INT 2
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: LD_INT 2
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 2
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: LD_INT 2
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 2
31912: NEG
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 2
31923: NEG
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 2
31935: NEG
31936: PUSH
31937: LD_INT 2
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31966: LD_ADDR_VAR 0 54
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: LD_INT 0
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 2
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: LD_INT 2
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: LD_INT 2
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 2
32142: NEG
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: NEG
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32196: LD_ADDR_VAR 0 55
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: LD_INT 1
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 2
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: LD_INT 0
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 2
32321: PUSH
32322: LD_INT 1
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: LD_INT 2
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 2
32372: NEG
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 2
32395: NEG
32396: PUSH
32397: LD_INT 2
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32426: LD_ADDR_VAR 0 56
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 1
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 2
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: NEG
32592: PUSH
32593: LD_INT 1
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 2
32602: NEG
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: LD_INT 1
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: LD_INT 2
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32656: LD_ADDR_VAR 0 57
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: LD_INT 1
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 2
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 0
32749: PUSH
32750: LD_INT 2
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: LD_INT 1
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: LD_INT 1
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 2
32832: NEG
32833: PUSH
32834: LD_INT 0
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 2
32843: NEG
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: LD_INT 2
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32886: LD_ADDR_VAR 0 58
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 2
33073: NEG
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 2
33085: NEG
33086: PUSH
33087: LD_INT 2
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33116: LD_ADDR_VAR 0 59
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: LD_INT 0
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 1
33185: NEG
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33204: LD_ADDR_VAR 0 60
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: LD_INT 0
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 1
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: NEG
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: LD_INT 1
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33292: LD_ADDR_VAR 0 61
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 0
33309: PUSH
33310: LD_INT 1
33312: NEG
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 1
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33380: LD_ADDR_VAR 0 62
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 1
33408: PUSH
33409: LD_INT 0
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33468: LD_ADDR_VAR 0 63
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: LD_INT 1
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: LD_INT 0
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: LD_INT 1
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: LD_INT 0
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: LD_INT 1
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33556: LD_ADDR_VAR 0 64
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: ST_TO_ADDR
// end ; 1 :
33644: GO 39541
33646: LD_INT 1
33648: DOUBLE
33649: EQUAL
33650: IFTRUE 33654
33652: GO 36277
33654: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33655: LD_ADDR_VAR 0 11
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: LD_INT 3
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: LD_INT 3
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: LD_INT 2
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33699: LD_ADDR_VAR 0 12
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: LD_INT 1
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 3
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 3
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33740: LD_ADDR_VAR 0 13
33744: PUSH
33745: LD_INT 3
33747: PUSH
33748: LD_INT 2
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: LD_INT 3
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 2
33767: PUSH
33768: LD_INT 3
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33780: LD_ADDR_VAR 0 14
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: LD_INT 3
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: LD_INT 3
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 1
33807: NEG
33808: PUSH
33809: LD_INT 2
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: LIST
33820: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33821: LD_ADDR_VAR 0 15
33825: PUSH
33826: LD_INT 2
33828: NEG
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 3
33839: NEG
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 3
33850: NEG
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: LIST
33864: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33865: LD_ADDR_VAR 0 16
33869: PUSH
33870: LD_INT 2
33872: NEG
33873: PUSH
33874: LD_INT 3
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 3
33884: NEG
33885: PUSH
33886: LD_INT 2
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 3
33896: NEG
33897: PUSH
33898: LD_INT 3
33900: NEG
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33911: LD_ADDR_VAR 0 17
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 3
33922: NEG
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 0
33930: PUSH
33931: LD_INT 3
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 2
33944: NEG
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33955: LD_ADDR_VAR 0 18
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 3
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 3
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: LIST
33995: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33996: LD_ADDR_VAR 0 19
34000: PUSH
34001: LD_INT 3
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: PUSH
34014: LD_INT 3
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: LD_INT 3
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: LIST
34035: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34036: LD_ADDR_VAR 0 20
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: LD_INT 3
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: LD_INT 3
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: NEG
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: LIST
34076: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34077: LD_ADDR_VAR 0 21
34081: PUSH
34082: LD_INT 2
34084: NEG
34085: PUSH
34086: LD_INT 1
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 3
34095: NEG
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 3
34106: NEG
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: LIST
34120: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34121: LD_ADDR_VAR 0 22
34125: PUSH
34126: LD_INT 2
34128: NEG
34129: PUSH
34130: LD_INT 3
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 3
34140: NEG
34141: PUSH
34142: LD_INT 2
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 3
34152: NEG
34153: PUSH
34154: LD_INT 3
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: LIST
34166: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34167: LD_ADDR_VAR 0 23
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: LD_INT 3
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: LD_INT 4
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: LD_INT 3
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: LIST
34210: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34211: LD_ADDR_VAR 0 24
34215: PUSH
34216: LD_INT 3
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 3
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 4
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: LIST
34251: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34252: LD_ADDR_VAR 0 25
34256: PUSH
34257: LD_INT 3
34259: PUSH
34260: LD_INT 3
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 4
34269: PUSH
34270: LD_INT 3
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 3
34279: PUSH
34280: LD_INT 4
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: LIST
34291: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34292: LD_ADDR_VAR 0 26
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: LD_INT 3
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: LD_INT 4
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: LD_INT 3
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: LIST
34332: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34333: LD_ADDR_VAR 0 27
34337: PUSH
34338: LD_INT 3
34340: NEG
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 3
34351: NEG
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 4
34362: NEG
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: LIST
34376: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34377: LD_ADDR_VAR 0 28
34381: PUSH
34382: LD_INT 3
34384: NEG
34385: PUSH
34386: LD_INT 3
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 3
34396: NEG
34397: PUSH
34398: LD_INT 4
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 4
34408: NEG
34409: PUSH
34410: LD_INT 3
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: LIST
34422: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34423: LD_ADDR_VAR 0 29
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: LD_INT 3
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: LD_INT 3
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: LD_INT 2
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: LD_INT 4
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 4
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: LD_INT 3
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 5
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 0
34510: PUSH
34511: LD_INT 5
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: LD_INT 4
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: LD_INT 6
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: LD_INT 6
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: LD_INT 5
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34578: LD_ADDR_VAR 0 30
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 3
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 3
34606: PUSH
34607: LD_INT 1
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 3
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 4
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 4
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 4
34647: PUSH
34648: LD_INT 1
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 5
34658: PUSH
34659: LD_INT 0
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 5
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 5
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 6
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 6
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34721: LD_ADDR_VAR 0 31
34725: PUSH
34726: LD_INT 3
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 3
34738: PUSH
34739: LD_INT 3
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: LD_INT 3
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 4
34758: PUSH
34759: LD_INT 3
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 4
34768: PUSH
34769: LD_INT 4
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 3
34778: PUSH
34779: LD_INT 4
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 5
34788: PUSH
34789: LD_INT 4
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 5
34798: PUSH
34799: LD_INT 5
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 4
34808: PUSH
34809: LD_INT 5
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 6
34818: PUSH
34819: LD_INT 5
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 6
34828: PUSH
34829: LD_INT 6
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 5
34838: PUSH
34839: LD_INT 6
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34860: LD_ADDR_VAR 0 32
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: LD_INT 3
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: LD_INT 3
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: LD_INT 2
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: LD_INT 4
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: LD_INT 4
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: LD_INT 3
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: LD_INT 5
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: LD_INT 5
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: NEG
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: LD_INT 6
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: LD_INT 6
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: LD_INT 5
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35003: LD_ADDR_VAR 0 33
35007: PUSH
35008: LD_INT 2
35010: NEG
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 3
35021: NEG
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 3
35032: NEG
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 3
35044: NEG
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 4
35055: NEG
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 4
35066: NEG
35067: PUSH
35068: LD_INT 1
35070: NEG
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 4
35078: NEG
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 5
35089: NEG
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 5
35100: NEG
35101: PUSH
35102: LD_INT 1
35104: NEG
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 5
35112: NEG
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 6
35123: NEG
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 6
35134: NEG
35135: PUSH
35136: LD_INT 1
35138: NEG
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35158: LD_ADDR_VAR 0 34
35162: PUSH
35163: LD_INT 2
35165: NEG
35166: PUSH
35167: LD_INT 3
35169: NEG
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 3
35177: NEG
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 3
35189: NEG
35190: PUSH
35191: LD_INT 3
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 3
35201: NEG
35202: PUSH
35203: LD_INT 4
35205: NEG
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 4
35213: NEG
35214: PUSH
35215: LD_INT 3
35217: NEG
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 4
35225: NEG
35226: PUSH
35227: LD_INT 4
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 4
35237: NEG
35238: PUSH
35239: LD_INT 5
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 5
35249: NEG
35250: PUSH
35251: LD_INT 4
35253: NEG
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 5
35261: NEG
35262: PUSH
35263: LD_INT 5
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 5
35273: NEG
35274: PUSH
35275: LD_INT 6
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 6
35285: NEG
35286: PUSH
35287: LD_INT 5
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 6
35297: NEG
35298: PUSH
35299: LD_INT 6
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35321: LD_ADDR_VAR 0 41
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 3
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: PUSH
35352: LD_INT 2
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35365: LD_ADDR_VAR 0 42
35369: PUSH
35370: LD_INT 2
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 2
35382: PUSH
35383: LD_INT 1
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 3
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: LIST
35405: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35406: LD_ADDR_VAR 0 43
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 3
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: LD_INT 3
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: LIST
35445: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35446: LD_ADDR_VAR 0 44
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 2
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: PUSH
35464: LD_INT 3
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: LD_INT 2
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35487: LD_ADDR_VAR 0 45
35491: PUSH
35492: LD_INT 2
35494: NEG
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 2
35505: NEG
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 3
35516: NEG
35517: PUSH
35518: LD_INT 1
35520: NEG
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: LIST
35530: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35531: LD_ADDR_VAR 0 46
35535: PUSH
35536: LD_INT 2
35538: NEG
35539: PUSH
35540: LD_INT 2
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 2
35550: NEG
35551: PUSH
35552: LD_INT 3
35554: NEG
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 3
35562: NEG
35563: PUSH
35564: LD_INT 2
35566: NEG
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: LIST
35576: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35577: LD_ADDR_VAR 0 47
35581: PUSH
35582: LD_INT 2
35584: NEG
35585: PUSH
35586: LD_INT 3
35588: NEG
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: LD_INT 3
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35610: LD_ADDR_VAR 0 48
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: LD_INT 2
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: LD_INT 1
35631: NEG
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35641: LD_ADDR_VAR 0 49
35645: PUSH
35646: LD_INT 3
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 3
35658: PUSH
35659: LD_INT 2
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35670: LD_ADDR_VAR 0 50
35674: PUSH
35675: LD_INT 2
35677: PUSH
35678: LD_INT 3
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 1
35687: PUSH
35688: LD_INT 3
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35699: LD_ADDR_VAR 0 51
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: LD_INT 2
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 2
35717: NEG
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35730: LD_ADDR_VAR 0 52
35734: PUSH
35735: LD_INT 3
35737: NEG
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 3
35749: NEG
35750: PUSH
35751: LD_INT 2
35753: NEG
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35763: LD_ADDR_VAR 0 53
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: LD_INT 3
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: LD_INT 3
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: LD_INT 2
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35807: LD_ADDR_VAR 0 54
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 3
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 3
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: LIST
35847: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35848: LD_ADDR_VAR 0 55
35852: PUSH
35853: LD_INT 3
35855: PUSH
35856: LD_INT 2
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 3
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 2
35875: PUSH
35876: LD_INT 3
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: LIST
35887: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35888: LD_ADDR_VAR 0 56
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: LD_INT 3
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: LD_INT 3
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: NEG
35916: PUSH
35917: LD_INT 2
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35929: LD_ADDR_VAR 0 57
35933: PUSH
35934: LD_INT 2
35936: NEG
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 3
35947: NEG
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 3
35958: NEG
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35973: LD_ADDR_VAR 0 58
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: LD_INT 3
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 3
35992: NEG
35993: PUSH
35994: LD_INT 2
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 3
36004: NEG
36005: PUSH
36006: LD_INT 3
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: LIST
36018: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36019: LD_ADDR_VAR 0 59
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: LD_INT 2
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: LD_INT 2
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: LD_INT 1
36052: NEG
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: LIST
36062: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36063: LD_ADDR_VAR 0 60
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36104: LD_ADDR_VAR 0 61
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: LIST
36143: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36144: LD_ADDR_VAR 0 62
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 1
36171: NEG
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: LIST
36184: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36185: LD_ADDR_VAR 0 63
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 2
36203: NEG
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 2
36214: NEG
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36229: LD_ADDR_VAR 0 64
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: LD_INT 2
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 2
36248: NEG
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 2
36260: NEG
36261: PUSH
36262: LD_INT 2
36264: NEG
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: LIST
36274: ST_TO_ADDR
// end ; 2 :
36275: GO 39541
36277: LD_INT 2
36279: DOUBLE
36280: EQUAL
36281: IFTRUE 36285
36283: GO 39540
36285: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36286: LD_ADDR_VAR 0 29
36290: PUSH
36291: LD_INT 4
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 4
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 5
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 5
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 4
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 3
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 3
36354: PUSH
36355: LD_INT 1
36357: NEG
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 3
36365: PUSH
36366: LD_INT 2
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 5
36376: PUSH
36377: LD_INT 2
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 3
36386: PUSH
36387: LD_INT 3
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 3
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 4
36406: PUSH
36407: LD_INT 3
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 4
36416: PUSH
36417: LD_INT 4
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 3
36426: PUSH
36427: LD_INT 4
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: LD_INT 3
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: LD_INT 2
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 4
36456: PUSH
36457: LD_INT 2
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 2
36466: PUSH
36467: LD_INT 4
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: LD_INT 4
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: LD_INT 3
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: LD_INT 4
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: LD_INT 5
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: LD_INT 5
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 1
36526: NEG
36527: PUSH
36528: LD_INT 4
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: LD_INT 3
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 2
36548: PUSH
36549: LD_INT 5
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 2
36558: NEG
36559: PUSH
36560: LD_INT 3
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 3
36569: NEG
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 3
36580: NEG
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 2
36592: NEG
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 2
36603: NEG
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 3
36614: NEG
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 4
36625: NEG
36626: PUSH
36627: LD_INT 0
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 4
36636: NEG
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 4
36648: NEG
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 2
36660: NEG
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 4
36671: NEG
36672: PUSH
36673: LD_INT 4
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 4
36683: NEG
36684: PUSH
36685: LD_INT 5
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 3
36695: NEG
36696: PUSH
36697: LD_INT 4
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 3
36707: NEG
36708: PUSH
36709: LD_INT 3
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 4
36719: NEG
36720: PUSH
36721: LD_INT 3
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 5
36731: NEG
36732: PUSH
36733: LD_INT 4
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 5
36743: NEG
36744: PUSH
36745: LD_INT 5
36747: NEG
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 3
36755: NEG
36756: PUSH
36757: LD_INT 5
36759: NEG
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 5
36767: NEG
36768: PUSH
36769: LD_INT 3
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
36824: LD_ADDR_VAR 0 30
36828: PUSH
36829: LD_INT 4
36831: PUSH
36832: LD_INT 4
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 4
36841: PUSH
36842: LD_INT 3
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 5
36851: PUSH
36852: LD_INT 4
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 5
36861: PUSH
36862: LD_INT 5
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 4
36871: PUSH
36872: LD_INT 5
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 3
36881: PUSH
36882: LD_INT 4
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 3
36891: PUSH
36892: LD_INT 3
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 5
36901: PUSH
36902: LD_INT 3
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 3
36911: PUSH
36912: LD_INT 5
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: LD_INT 3
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: LD_INT 3
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: LD_INT 4
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: LD_INT 4
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: LD_INT 3
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: NEG
36983: PUSH
36984: LD_INT 2
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: LD_INT 4
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 2
37003: NEG
37004: PUSH
37005: LD_INT 2
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 4
37014: NEG
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 4
37025: NEG
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 3
37037: NEG
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 3
37048: NEG
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 4
37059: NEG
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 5
37070: NEG
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 5
37081: NEG
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 5
37093: NEG
37094: PUSH
37095: LD_INT 2
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 3
37105: NEG
37106: PUSH
37107: LD_INT 2
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 3
37116: NEG
37117: PUSH
37118: LD_INT 3
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 3
37128: NEG
37129: PUSH
37130: LD_INT 4
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: LD_INT 3
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 2
37152: NEG
37153: PUSH
37154: LD_INT 2
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 3
37164: NEG
37165: PUSH
37166: LD_INT 2
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 4
37176: NEG
37177: PUSH
37178: LD_INT 3
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 4
37188: NEG
37189: PUSH
37190: LD_INT 4
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: LD_INT 4
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 4
37212: NEG
37213: PUSH
37214: LD_INT 2
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: LD_INT 4
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: LD_INT 5
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 4
37249: NEG
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: LD_INT 3
37260: NEG
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: LD_INT 3
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: LD_INT 4
37283: NEG
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: LD_INT 5
37295: NEG
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: PUSH
37304: LD_INT 3
37306: NEG
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: LD_INT 5
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37371: LD_ADDR_VAR 0 31
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 4
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 3
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 4
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: LD_INT 5
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 5
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: LD_INT 4
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: LD_INT 3
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: LD_INT 5
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 2
37460: NEG
37461: PUSH
37462: LD_INT 3
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 3
37471: NEG
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 3
37482: NEG
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: NEG
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: NEG
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 3
37516: NEG
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 4
37527: NEG
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 4
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 4
37550: NEG
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 4
37573: NEG
37574: PUSH
37575: LD_INT 4
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 4
37585: NEG
37586: PUSH
37587: LD_INT 5
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 3
37597: NEG
37598: PUSH
37599: LD_INT 4
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 3
37609: NEG
37610: PUSH
37611: LD_INT 3
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 4
37621: NEG
37622: PUSH
37623: LD_INT 3
37625: NEG
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 5
37633: NEG
37634: PUSH
37635: LD_INT 4
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 5
37645: NEG
37646: PUSH
37647: LD_INT 5
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 3
37657: NEG
37658: PUSH
37659: LD_INT 5
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 5
37669: NEG
37670: PUSH
37671: LD_INT 3
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 3
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: LD_INT 4
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: LD_INT 3
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 2
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: LD_INT 2
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: LD_INT 3
37740: NEG
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: LD_INT 4
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 2
37760: PUSH
37761: LD_INT 2
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 2
37771: NEG
37772: PUSH
37773: LD_INT 4
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 4
37783: PUSH
37784: LD_INT 0
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 4
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 5
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 5
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 4
37824: PUSH
37825: LD_INT 1
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 3
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 3
37844: PUSH
37845: LD_INT 1
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 3
37855: PUSH
37856: LD_INT 2
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 5
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
37921: LD_ADDR_VAR 0 32
37925: PUSH
37926: LD_INT 4
37928: NEG
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 4
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 3
37951: NEG
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 3
37962: NEG
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 4
37973: NEG
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 5
37984: NEG
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 5
37995: NEG
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 5
38007: NEG
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 3
38019: NEG
38020: PUSH
38021: LD_INT 2
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 3
38030: NEG
38031: PUSH
38032: LD_INT 3
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 3
38042: NEG
38043: PUSH
38044: LD_INT 4
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: NEG
38055: PUSH
38056: LD_INT 3
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: LD_INT 2
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 3
38078: NEG
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 4
38090: NEG
38091: PUSH
38092: LD_INT 3
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 4
38102: NEG
38103: PUSH
38104: LD_INT 4
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 2
38114: NEG
38115: PUSH
38116: LD_INT 4
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 4
38126: NEG
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: LD_INT 4
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: LD_INT 5
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 4
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 3
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: LD_INT 3
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: PUSH
38195: LD_INT 4
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: LD_INT 5
38209: NEG
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 2
38217: PUSH
38218: LD_INT 3
38220: NEG
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 2
38228: NEG
38229: PUSH
38230: LD_INT 5
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 3
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 3
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 4
38261: PUSH
38262: LD_INT 0
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 4
38271: PUSH
38272: LD_INT 1
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 3
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 4
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 4
38333: PUSH
38334: LD_INT 4
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 4
38343: PUSH
38344: LD_INT 3
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 5
38353: PUSH
38354: LD_INT 4
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 5
38363: PUSH
38364: LD_INT 5
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 4
38373: PUSH
38374: LD_INT 5
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 3
38383: PUSH
38384: LD_INT 4
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 3
38393: PUSH
38394: LD_INT 3
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 5
38403: PUSH
38404: LD_INT 3
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 3
38413: PUSH
38414: LD_INT 5
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38468: LD_ADDR_VAR 0 33
38472: PUSH
38473: LD_INT 4
38475: NEG
38476: PUSH
38477: LD_INT 4
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 4
38487: NEG
38488: PUSH
38489: LD_INT 5
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 3
38499: NEG
38500: PUSH
38501: LD_INT 4
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 3
38511: NEG
38512: PUSH
38513: LD_INT 3
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 4
38523: NEG
38524: PUSH
38525: LD_INT 3
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 5
38535: NEG
38536: PUSH
38537: LD_INT 4
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 5
38547: NEG
38548: PUSH
38549: LD_INT 5
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 3
38559: NEG
38560: PUSH
38561: LD_INT 5
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 5
38571: NEG
38572: PUSH
38573: LD_INT 3
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: LD_INT 3
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 4
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 3
38608: NEG
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: LD_INT 2
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: LD_INT 2
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: LD_INT 3
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: LD_INT 4
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 2
38662: PUSH
38663: LD_INT 2
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: NEG
38674: PUSH
38675: LD_INT 4
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 4
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 4
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 5
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 5
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 4
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 3
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 3
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 3
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 5
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 3
38778: PUSH
38779: LD_INT 3
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 3
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 4
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 4
38808: PUSH
38809: LD_INT 4
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 3
38818: PUSH
38819: LD_INT 4
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 2
38828: PUSH
38829: LD_INT 3
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: LD_INT 2
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 4
38848: PUSH
38849: LD_INT 2
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: LD_INT 4
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: LD_INT 4
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: LD_INT 3
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: LD_INT 4
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: LD_INT 5
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: LD_INT 5
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 4
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: LD_INT 3
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: LD_INT 5
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 2
38950: NEG
38951: PUSH
38952: LD_INT 3
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39006: LD_ADDR_VAR 0 34
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: LD_INT 4
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: LD_INT 5
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: LD_INT 4
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: LD_INT 3
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: LD_INT 3
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: NEG
39069: PUSH
39070: LD_INT 4
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 5
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: LD_INT 3
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: LD_INT 5
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 3
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 3
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 4
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 4
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 3
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 1
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 2
39187: PUSH
39188: LD_INT 2
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 4
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 4
39208: PUSH
39209: LD_INT 4
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 4
39218: PUSH
39219: LD_INT 3
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 5
39228: PUSH
39229: LD_INT 4
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 5
39238: PUSH
39239: LD_INT 5
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 4
39248: PUSH
39249: LD_INT 5
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 3
39258: PUSH
39259: LD_INT 4
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 3
39268: PUSH
39269: LD_INT 3
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 5
39278: PUSH
39279: LD_INT 3
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 3
39288: PUSH
39289: LD_INT 5
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 3
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: LD_INT 3
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: LD_INT 4
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: LD_INT 4
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: LD_INT 3
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: LD_INT 4
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 4
39391: NEG
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 4
39402: NEG
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 3
39414: NEG
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 3
39425: NEG
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 4
39436: NEG
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 5
39447: NEG
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 5
39458: NEG
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 5
39470: NEG
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 3
39482: NEG
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: ST_TO_ADDR
// end ; end ;
39538: GO 39541
39540: POP
// case btype of b_depot , b_warehouse :
39541: LD_VAR 0 1
39545: PUSH
39546: LD_INT 0
39548: DOUBLE
39549: EQUAL
39550: IFTRUE 39560
39552: LD_INT 1
39554: DOUBLE
39555: EQUAL
39556: IFTRUE 39560
39558: GO 39761
39560: POP
// case nation of nation_american :
39561: LD_VAR 0 5
39565: PUSH
39566: LD_INT 1
39568: DOUBLE
39569: EQUAL
39570: IFTRUE 39574
39572: GO 39630
39574: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39575: LD_ADDR_VAR 0 9
39579: PUSH
39580: LD_VAR 0 11
39584: PUSH
39585: LD_VAR 0 12
39589: PUSH
39590: LD_VAR 0 13
39594: PUSH
39595: LD_VAR 0 14
39599: PUSH
39600: LD_VAR 0 15
39604: PUSH
39605: LD_VAR 0 16
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: PUSH
39618: LD_VAR 0 4
39622: PUSH
39623: LD_INT 1
39625: PLUS
39626: ARRAY
39627: ST_TO_ADDR
39628: GO 39759
39630: LD_INT 2
39632: DOUBLE
39633: EQUAL
39634: IFTRUE 39638
39636: GO 39694
39638: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39639: LD_ADDR_VAR 0 9
39643: PUSH
39644: LD_VAR 0 17
39648: PUSH
39649: LD_VAR 0 18
39653: PUSH
39654: LD_VAR 0 19
39658: PUSH
39659: LD_VAR 0 20
39663: PUSH
39664: LD_VAR 0 21
39668: PUSH
39669: LD_VAR 0 22
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: PUSH
39682: LD_VAR 0 4
39686: PUSH
39687: LD_INT 1
39689: PLUS
39690: ARRAY
39691: ST_TO_ADDR
39692: GO 39759
39694: LD_INT 3
39696: DOUBLE
39697: EQUAL
39698: IFTRUE 39702
39700: GO 39758
39702: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39703: LD_ADDR_VAR 0 9
39707: PUSH
39708: LD_VAR 0 23
39712: PUSH
39713: LD_VAR 0 24
39717: PUSH
39718: LD_VAR 0 25
39722: PUSH
39723: LD_VAR 0 26
39727: PUSH
39728: LD_VAR 0 27
39732: PUSH
39733: LD_VAR 0 28
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: PUSH
39746: LD_VAR 0 4
39750: PUSH
39751: LD_INT 1
39753: PLUS
39754: ARRAY
39755: ST_TO_ADDR
39756: GO 39759
39758: POP
39759: GO 40314
39761: LD_INT 2
39763: DOUBLE
39764: EQUAL
39765: IFTRUE 39775
39767: LD_INT 3
39769: DOUBLE
39770: EQUAL
39771: IFTRUE 39775
39773: GO 39831
39775: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39776: LD_ADDR_VAR 0 9
39780: PUSH
39781: LD_VAR 0 29
39785: PUSH
39786: LD_VAR 0 30
39790: PUSH
39791: LD_VAR 0 31
39795: PUSH
39796: LD_VAR 0 32
39800: PUSH
39801: LD_VAR 0 33
39805: PUSH
39806: LD_VAR 0 34
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: PUSH
39819: LD_VAR 0 4
39823: PUSH
39824: LD_INT 1
39826: PLUS
39827: ARRAY
39828: ST_TO_ADDR
39829: GO 40314
39831: LD_INT 16
39833: DOUBLE
39834: EQUAL
39835: IFTRUE 39893
39837: LD_INT 17
39839: DOUBLE
39840: EQUAL
39841: IFTRUE 39893
39843: LD_INT 18
39845: DOUBLE
39846: EQUAL
39847: IFTRUE 39893
39849: LD_INT 19
39851: DOUBLE
39852: EQUAL
39853: IFTRUE 39893
39855: LD_INT 22
39857: DOUBLE
39858: EQUAL
39859: IFTRUE 39893
39861: LD_INT 20
39863: DOUBLE
39864: EQUAL
39865: IFTRUE 39893
39867: LD_INT 21
39869: DOUBLE
39870: EQUAL
39871: IFTRUE 39893
39873: LD_INT 23
39875: DOUBLE
39876: EQUAL
39877: IFTRUE 39893
39879: LD_INT 24
39881: DOUBLE
39882: EQUAL
39883: IFTRUE 39893
39885: LD_INT 25
39887: DOUBLE
39888: EQUAL
39889: IFTRUE 39893
39891: GO 39949
39893: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39894: LD_ADDR_VAR 0 9
39898: PUSH
39899: LD_VAR 0 35
39903: PUSH
39904: LD_VAR 0 36
39908: PUSH
39909: LD_VAR 0 37
39913: PUSH
39914: LD_VAR 0 38
39918: PUSH
39919: LD_VAR 0 39
39923: PUSH
39924: LD_VAR 0 40
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: PUSH
39937: LD_VAR 0 4
39941: PUSH
39942: LD_INT 1
39944: PLUS
39945: ARRAY
39946: ST_TO_ADDR
39947: GO 40314
39949: LD_INT 6
39951: DOUBLE
39952: EQUAL
39953: IFTRUE 40005
39955: LD_INT 7
39957: DOUBLE
39958: EQUAL
39959: IFTRUE 40005
39961: LD_INT 8
39963: DOUBLE
39964: EQUAL
39965: IFTRUE 40005
39967: LD_INT 13
39969: DOUBLE
39970: EQUAL
39971: IFTRUE 40005
39973: LD_INT 12
39975: DOUBLE
39976: EQUAL
39977: IFTRUE 40005
39979: LD_INT 15
39981: DOUBLE
39982: EQUAL
39983: IFTRUE 40005
39985: LD_INT 11
39987: DOUBLE
39988: EQUAL
39989: IFTRUE 40005
39991: LD_INT 14
39993: DOUBLE
39994: EQUAL
39995: IFTRUE 40005
39997: LD_INT 10
39999: DOUBLE
40000: EQUAL
40001: IFTRUE 40005
40003: GO 40061
40005: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40006: LD_ADDR_VAR 0 9
40010: PUSH
40011: LD_VAR 0 41
40015: PUSH
40016: LD_VAR 0 42
40020: PUSH
40021: LD_VAR 0 43
40025: PUSH
40026: LD_VAR 0 44
40030: PUSH
40031: LD_VAR 0 45
40035: PUSH
40036: LD_VAR 0 46
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: PUSH
40049: LD_VAR 0 4
40053: PUSH
40054: LD_INT 1
40056: PLUS
40057: ARRAY
40058: ST_TO_ADDR
40059: GO 40314
40061: LD_INT 36
40063: DOUBLE
40064: EQUAL
40065: IFTRUE 40069
40067: GO 40125
40069: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40070: LD_ADDR_VAR 0 9
40074: PUSH
40075: LD_VAR 0 47
40079: PUSH
40080: LD_VAR 0 48
40084: PUSH
40085: LD_VAR 0 49
40089: PUSH
40090: LD_VAR 0 50
40094: PUSH
40095: LD_VAR 0 51
40099: PUSH
40100: LD_VAR 0 52
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: PUSH
40113: LD_VAR 0 4
40117: PUSH
40118: LD_INT 1
40120: PLUS
40121: ARRAY
40122: ST_TO_ADDR
40123: GO 40314
40125: LD_INT 4
40127: DOUBLE
40128: EQUAL
40129: IFTRUE 40151
40131: LD_INT 5
40133: DOUBLE
40134: EQUAL
40135: IFTRUE 40151
40137: LD_INT 34
40139: DOUBLE
40140: EQUAL
40141: IFTRUE 40151
40143: LD_INT 37
40145: DOUBLE
40146: EQUAL
40147: IFTRUE 40151
40149: GO 40207
40151: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40152: LD_ADDR_VAR 0 9
40156: PUSH
40157: LD_VAR 0 53
40161: PUSH
40162: LD_VAR 0 54
40166: PUSH
40167: LD_VAR 0 55
40171: PUSH
40172: LD_VAR 0 56
40176: PUSH
40177: LD_VAR 0 57
40181: PUSH
40182: LD_VAR 0 58
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: PUSH
40195: LD_VAR 0 4
40199: PUSH
40200: LD_INT 1
40202: PLUS
40203: ARRAY
40204: ST_TO_ADDR
40205: GO 40314
40207: LD_INT 31
40209: DOUBLE
40210: EQUAL
40211: IFTRUE 40257
40213: LD_INT 32
40215: DOUBLE
40216: EQUAL
40217: IFTRUE 40257
40219: LD_INT 33
40221: DOUBLE
40222: EQUAL
40223: IFTRUE 40257
40225: LD_INT 27
40227: DOUBLE
40228: EQUAL
40229: IFTRUE 40257
40231: LD_INT 26
40233: DOUBLE
40234: EQUAL
40235: IFTRUE 40257
40237: LD_INT 28
40239: DOUBLE
40240: EQUAL
40241: IFTRUE 40257
40243: LD_INT 29
40245: DOUBLE
40246: EQUAL
40247: IFTRUE 40257
40249: LD_INT 30
40251: DOUBLE
40252: EQUAL
40253: IFTRUE 40257
40255: GO 40313
40257: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40258: LD_ADDR_VAR 0 9
40262: PUSH
40263: LD_VAR 0 59
40267: PUSH
40268: LD_VAR 0 60
40272: PUSH
40273: LD_VAR 0 61
40277: PUSH
40278: LD_VAR 0 62
40282: PUSH
40283: LD_VAR 0 63
40287: PUSH
40288: LD_VAR 0 64
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: PUSH
40301: LD_VAR 0 4
40305: PUSH
40306: LD_INT 1
40308: PLUS
40309: ARRAY
40310: ST_TO_ADDR
40311: GO 40314
40313: POP
// temp_list2 = [ ] ;
40314: LD_ADDR_VAR 0 10
40318: PUSH
40319: EMPTY
40320: ST_TO_ADDR
// for i in temp_list do
40321: LD_ADDR_VAR 0 8
40325: PUSH
40326: LD_VAR 0 9
40330: PUSH
40331: FOR_IN
40332: IFFALSE 40384
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40334: LD_ADDR_VAR 0 10
40338: PUSH
40339: LD_VAR 0 10
40343: PUSH
40344: LD_VAR 0 8
40348: PUSH
40349: LD_INT 1
40351: ARRAY
40352: PUSH
40353: LD_VAR 0 2
40357: PLUS
40358: PUSH
40359: LD_VAR 0 8
40363: PUSH
40364: LD_INT 2
40366: ARRAY
40367: PUSH
40368: LD_VAR 0 3
40372: PLUS
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: EMPTY
40379: LIST
40380: ADD
40381: ST_TO_ADDR
40382: GO 40331
40384: POP
40385: POP
// result = temp_list2 ;
40386: LD_ADDR_VAR 0 7
40390: PUSH
40391: LD_VAR 0 10
40395: ST_TO_ADDR
// end ;
40396: LD_VAR 0 7
40400: RET
// export function EnemyInRange ( unit , dist ) ; begin
40401: LD_INT 0
40403: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40404: LD_ADDR_VAR 0 3
40408: PUSH
40409: LD_VAR 0 1
40413: PPUSH
40414: CALL_OW 255
40418: PPUSH
40419: LD_VAR 0 1
40423: PPUSH
40424: CALL_OW 250
40428: PPUSH
40429: LD_VAR 0 1
40433: PPUSH
40434: CALL_OW 251
40438: PPUSH
40439: LD_VAR 0 2
40443: PPUSH
40444: CALL 13796 0 4
40448: PUSH
40449: LD_INT 4
40451: ARRAY
40452: ST_TO_ADDR
// end ;
40453: LD_VAR 0 3
40457: RET
// export function PlayerSeeMe ( unit ) ; begin
40458: LD_INT 0
40460: PPUSH
// result := See ( your_side , unit ) ;
40461: LD_ADDR_VAR 0 2
40465: PUSH
40466: LD_OWVAR 2
40470: PPUSH
40471: LD_VAR 0 1
40475: PPUSH
40476: CALL_OW 292
40480: ST_TO_ADDR
// end ;
40481: LD_VAR 0 2
40485: RET
// export function ReverseDir ( unit ) ; begin
40486: LD_INT 0
40488: PPUSH
// if not unit then
40489: LD_VAR 0 1
40493: NOT
40494: IFFALSE 40498
// exit ;
40496: GO 40521
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40498: LD_ADDR_VAR 0 2
40502: PUSH
40503: LD_VAR 0 1
40507: PPUSH
40508: CALL_OW 254
40512: PUSH
40513: LD_INT 3
40515: PLUS
40516: PUSH
40517: LD_INT 6
40519: MOD
40520: ST_TO_ADDR
// end ;
40521: LD_VAR 0 2
40525: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
40526: LD_INT 0
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
40532: PPUSH
// if not hexes then
40533: LD_VAR 0 2
40537: NOT
40538: IFFALSE 40542
// exit ;
40540: GO 40690
// dist := 9999 ;
40542: LD_ADDR_VAR 0 5
40546: PUSH
40547: LD_INT 9999
40549: ST_TO_ADDR
// for i = 1 to hexes do
40550: LD_ADDR_VAR 0 4
40554: PUSH
40555: DOUBLE
40556: LD_INT 1
40558: DEC
40559: ST_TO_ADDR
40560: LD_VAR 0 2
40564: PUSH
40565: FOR_TO
40566: IFFALSE 40678
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
40568: LD_VAR 0 1
40572: PPUSH
40573: LD_VAR 0 2
40577: PUSH
40578: LD_VAR 0 4
40582: ARRAY
40583: PUSH
40584: LD_INT 1
40586: ARRAY
40587: PPUSH
40588: LD_VAR 0 2
40592: PUSH
40593: LD_VAR 0 4
40597: ARRAY
40598: PUSH
40599: LD_INT 2
40601: ARRAY
40602: PPUSH
40603: CALL_OW 297
40607: PUSH
40608: LD_VAR 0 5
40612: LESS
40613: IFFALSE 40676
// begin hex := hexes [ i ] ;
40615: LD_ADDR_VAR 0 7
40619: PUSH
40620: LD_VAR 0 2
40624: PUSH
40625: LD_VAR 0 4
40629: ARRAY
40630: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40631: LD_ADDR_VAR 0 5
40635: PUSH
40636: LD_VAR 0 1
40640: PPUSH
40641: LD_VAR 0 2
40645: PUSH
40646: LD_VAR 0 4
40650: ARRAY
40651: PUSH
40652: LD_INT 1
40654: ARRAY
40655: PPUSH
40656: LD_VAR 0 2
40660: PUSH
40661: LD_VAR 0 4
40665: ARRAY
40666: PUSH
40667: LD_INT 2
40669: ARRAY
40670: PPUSH
40671: CALL_OW 297
40675: ST_TO_ADDR
// end ; end ;
40676: GO 40565
40678: POP
40679: POP
// result := hex ;
40680: LD_ADDR_VAR 0 3
40684: PUSH
40685: LD_VAR 0 7
40689: ST_TO_ADDR
// end ;
40690: LD_VAR 0 3
40694: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40695: LD_INT 0
40697: PPUSH
40698: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40699: LD_VAR 0 1
40703: NOT
40704: PUSH
40705: LD_VAR 0 1
40709: PUSH
40710: LD_INT 21
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 23
40722: PUSH
40723: LD_INT 2
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PPUSH
40734: CALL_OW 69
40738: IN
40739: NOT
40740: OR
40741: IFFALSE 40745
// exit ;
40743: GO 40792
// for i = 1 to 3 do
40745: LD_ADDR_VAR 0 3
40749: PUSH
40750: DOUBLE
40751: LD_INT 1
40753: DEC
40754: ST_TO_ADDR
40755: LD_INT 3
40757: PUSH
40758: FOR_TO
40759: IFFALSE 40790
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40761: LD_VAR 0 1
40765: PPUSH
40766: CALL_OW 250
40770: PPUSH
40771: LD_VAR 0 1
40775: PPUSH
40776: CALL_OW 251
40780: PPUSH
40781: LD_INT 1
40783: PPUSH
40784: CALL_OW 453
40788: GO 40758
40790: POP
40791: POP
// end ;
40792: LD_VAR 0 2
40796: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40797: LD_INT 0
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40805: LD_VAR 0 1
40809: NOT
40810: PUSH
40811: LD_VAR 0 2
40815: NOT
40816: OR
40817: PUSH
40818: LD_VAR 0 1
40822: PPUSH
40823: CALL_OW 314
40827: OR
40828: IFFALSE 40832
// exit ;
40830: GO 41273
// x := GetX ( enemy_unit ) ;
40832: LD_ADDR_VAR 0 7
40836: PUSH
40837: LD_VAR 0 2
40841: PPUSH
40842: CALL_OW 250
40846: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40847: LD_ADDR_VAR 0 8
40851: PUSH
40852: LD_VAR 0 2
40856: PPUSH
40857: CALL_OW 251
40861: ST_TO_ADDR
// if not x or not y then
40862: LD_VAR 0 7
40866: NOT
40867: PUSH
40868: LD_VAR 0 8
40872: NOT
40873: OR
40874: IFFALSE 40878
// exit ;
40876: GO 41273
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
40878: LD_ADDR_VAR 0 6
40882: PUSH
40883: LD_VAR 0 7
40887: PPUSH
40888: LD_INT 0
40890: PPUSH
40891: LD_INT 4
40893: PPUSH
40894: CALL_OW 272
40898: PUSH
40899: LD_VAR 0 8
40903: PPUSH
40904: LD_INT 0
40906: PPUSH
40907: LD_INT 4
40909: PPUSH
40910: CALL_OW 273
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_VAR 0 7
40923: PPUSH
40924: LD_INT 1
40926: PPUSH
40927: LD_INT 4
40929: PPUSH
40930: CALL_OW 272
40934: PUSH
40935: LD_VAR 0 8
40939: PPUSH
40940: LD_INT 1
40942: PPUSH
40943: LD_INT 4
40945: PPUSH
40946: CALL_OW 273
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_VAR 0 7
40959: PPUSH
40960: LD_INT 2
40962: PPUSH
40963: LD_INT 4
40965: PPUSH
40966: CALL_OW 272
40970: PUSH
40971: LD_VAR 0 8
40975: PPUSH
40976: LD_INT 2
40978: PPUSH
40979: LD_INT 4
40981: PPUSH
40982: CALL_OW 273
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_VAR 0 7
40995: PPUSH
40996: LD_INT 3
40998: PPUSH
40999: LD_INT 4
41001: PPUSH
41002: CALL_OW 272
41006: PUSH
41007: LD_VAR 0 8
41011: PPUSH
41012: LD_INT 3
41014: PPUSH
41015: LD_INT 4
41017: PPUSH
41018: CALL_OW 273
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_VAR 0 7
41031: PPUSH
41032: LD_INT 4
41034: PPUSH
41035: LD_INT 4
41037: PPUSH
41038: CALL_OW 272
41042: PUSH
41043: LD_VAR 0 8
41047: PPUSH
41048: LD_INT 4
41050: PPUSH
41051: LD_INT 4
41053: PPUSH
41054: CALL_OW 273
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_VAR 0 7
41067: PPUSH
41068: LD_INT 5
41070: PPUSH
41071: LD_INT 4
41073: PPUSH
41074: CALL_OW 272
41078: PUSH
41079: LD_VAR 0 8
41083: PPUSH
41084: LD_INT 5
41086: PPUSH
41087: LD_INT 4
41089: PPUSH
41090: CALL_OW 273
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: ST_TO_ADDR
// for i = tmp downto 1 do
41107: LD_ADDR_VAR 0 4
41111: PUSH
41112: DOUBLE
41113: LD_VAR 0 6
41117: INC
41118: ST_TO_ADDR
41119: LD_INT 1
41121: PUSH
41122: FOR_DOWNTO
41123: IFFALSE 41224
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41125: LD_VAR 0 6
41129: PUSH
41130: LD_VAR 0 4
41134: ARRAY
41135: PUSH
41136: LD_INT 1
41138: ARRAY
41139: PPUSH
41140: LD_VAR 0 6
41144: PUSH
41145: LD_VAR 0 4
41149: ARRAY
41150: PUSH
41151: LD_INT 2
41153: ARRAY
41154: PPUSH
41155: CALL_OW 488
41159: NOT
41160: PUSH
41161: LD_VAR 0 6
41165: PUSH
41166: LD_VAR 0 4
41170: ARRAY
41171: PUSH
41172: LD_INT 1
41174: ARRAY
41175: PPUSH
41176: LD_VAR 0 6
41180: PUSH
41181: LD_VAR 0 4
41185: ARRAY
41186: PUSH
41187: LD_INT 2
41189: ARRAY
41190: PPUSH
41191: CALL_OW 428
41195: PUSH
41196: LD_INT 0
41198: NONEQUAL
41199: OR
41200: IFFALSE 41222
// tmp := Delete ( tmp , i ) ;
41202: LD_ADDR_VAR 0 6
41206: PUSH
41207: LD_VAR 0 6
41211: PPUSH
41212: LD_VAR 0 4
41216: PPUSH
41217: CALL_OW 3
41221: ST_TO_ADDR
41222: GO 41122
41224: POP
41225: POP
// j := GetClosestHex ( unit , tmp ) ;
41226: LD_ADDR_VAR 0 5
41230: PUSH
41231: LD_VAR 0 1
41235: PPUSH
41236: LD_VAR 0 6
41240: PPUSH
41241: CALL 40526 0 2
41245: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41246: LD_VAR 0 1
41250: PPUSH
41251: LD_VAR 0 5
41255: PUSH
41256: LD_INT 1
41258: ARRAY
41259: PPUSH
41260: LD_VAR 0 5
41264: PUSH
41265: LD_INT 2
41267: ARRAY
41268: PPUSH
41269: CALL_OW 111
// end ;
41273: LD_VAR 0 3
41277: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41278: LD_INT 0
41280: PPUSH
41281: PPUSH
41282: PPUSH
// uc_side = 0 ;
41283: LD_ADDR_OWVAR 20
41287: PUSH
41288: LD_INT 0
41290: ST_TO_ADDR
// uc_nation = 0 ;
41291: LD_ADDR_OWVAR 21
41295: PUSH
41296: LD_INT 0
41298: ST_TO_ADDR
// InitHc_All ( ) ;
41299: CALL_OW 584
// InitVc ;
41303: CALL_OW 20
// if mastodonts then
41307: LD_VAR 0 6
41311: IFFALSE 41378
// for i = 1 to mastodonts do
41313: LD_ADDR_VAR 0 11
41317: PUSH
41318: DOUBLE
41319: LD_INT 1
41321: DEC
41322: ST_TO_ADDR
41323: LD_VAR 0 6
41327: PUSH
41328: FOR_TO
41329: IFFALSE 41376
// begin vc_chassis := 31 ;
41331: LD_ADDR_OWVAR 37
41335: PUSH
41336: LD_INT 31
41338: ST_TO_ADDR
// vc_control := control_rider ;
41339: LD_ADDR_OWVAR 38
41343: PUSH
41344: LD_INT 4
41346: ST_TO_ADDR
// animal := CreateVehicle ;
41347: LD_ADDR_VAR 0 12
41351: PUSH
41352: CALL_OW 45
41356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41357: LD_VAR 0 12
41361: PPUSH
41362: LD_VAR 0 8
41366: PPUSH
41367: LD_INT 0
41369: PPUSH
41370: CALL 43566 0 3
// end ;
41374: GO 41328
41376: POP
41377: POP
// if horses then
41378: LD_VAR 0 5
41382: IFFALSE 41449
// for i = 1 to horses do
41384: LD_ADDR_VAR 0 11
41388: PUSH
41389: DOUBLE
41390: LD_INT 1
41392: DEC
41393: ST_TO_ADDR
41394: LD_VAR 0 5
41398: PUSH
41399: FOR_TO
41400: IFFALSE 41447
// begin hc_class := 21 ;
41402: LD_ADDR_OWVAR 28
41406: PUSH
41407: LD_INT 21
41409: ST_TO_ADDR
// hc_gallery :=  ;
41410: LD_ADDR_OWVAR 33
41414: PUSH
41415: LD_STRING 
41417: ST_TO_ADDR
// animal := CreateHuman ;
41418: LD_ADDR_VAR 0 12
41422: PUSH
41423: CALL_OW 44
41427: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41428: LD_VAR 0 12
41432: PPUSH
41433: LD_VAR 0 8
41437: PPUSH
41438: LD_INT 0
41440: PPUSH
41441: CALL 43566 0 3
// end ;
41445: GO 41399
41447: POP
41448: POP
// if birds then
41449: LD_VAR 0 1
41453: IFFALSE 41520
// for i = 1 to birds do
41455: LD_ADDR_VAR 0 11
41459: PUSH
41460: DOUBLE
41461: LD_INT 1
41463: DEC
41464: ST_TO_ADDR
41465: LD_VAR 0 1
41469: PUSH
41470: FOR_TO
41471: IFFALSE 41518
// begin hc_class = 18 ;
41473: LD_ADDR_OWVAR 28
41477: PUSH
41478: LD_INT 18
41480: ST_TO_ADDR
// hc_gallery =  ;
41481: LD_ADDR_OWVAR 33
41485: PUSH
41486: LD_STRING 
41488: ST_TO_ADDR
// animal := CreateHuman ;
41489: LD_ADDR_VAR 0 12
41493: PUSH
41494: CALL_OW 44
41498: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41499: LD_VAR 0 12
41503: PPUSH
41504: LD_VAR 0 8
41508: PPUSH
41509: LD_INT 0
41511: PPUSH
41512: CALL 43566 0 3
// end ;
41516: GO 41470
41518: POP
41519: POP
// if tigers then
41520: LD_VAR 0 2
41524: IFFALSE 41608
// for i = 1 to tigers do
41526: LD_ADDR_VAR 0 11
41530: PUSH
41531: DOUBLE
41532: LD_INT 1
41534: DEC
41535: ST_TO_ADDR
41536: LD_VAR 0 2
41540: PUSH
41541: FOR_TO
41542: IFFALSE 41606
// begin hc_class = class_tiger ;
41544: LD_ADDR_OWVAR 28
41548: PUSH
41549: LD_INT 14
41551: ST_TO_ADDR
// hc_gallery =  ;
41552: LD_ADDR_OWVAR 33
41556: PUSH
41557: LD_STRING 
41559: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41560: LD_ADDR_OWVAR 35
41564: PUSH
41565: LD_INT 7
41567: NEG
41568: PPUSH
41569: LD_INT 7
41571: PPUSH
41572: CALL_OW 12
41576: ST_TO_ADDR
// animal := CreateHuman ;
41577: LD_ADDR_VAR 0 12
41581: PUSH
41582: CALL_OW 44
41586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41587: LD_VAR 0 12
41591: PPUSH
41592: LD_VAR 0 8
41596: PPUSH
41597: LD_INT 0
41599: PPUSH
41600: CALL 43566 0 3
// end ;
41604: GO 41541
41606: POP
41607: POP
// if apemans then
41608: LD_VAR 0 3
41612: IFFALSE 41735
// for i = 1 to apemans do
41614: LD_ADDR_VAR 0 11
41618: PUSH
41619: DOUBLE
41620: LD_INT 1
41622: DEC
41623: ST_TO_ADDR
41624: LD_VAR 0 3
41628: PUSH
41629: FOR_TO
41630: IFFALSE 41733
// begin hc_class = class_apeman ;
41632: LD_ADDR_OWVAR 28
41636: PUSH
41637: LD_INT 12
41639: ST_TO_ADDR
// hc_gallery =  ;
41640: LD_ADDR_OWVAR 33
41644: PUSH
41645: LD_STRING 
41647: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
41648: LD_ADDR_OWVAR 35
41652: PUSH
41653: LD_INT 5
41655: NEG
41656: PPUSH
41657: LD_INT 5
41659: PPUSH
41660: CALL_OW 12
41664: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41665: LD_ADDR_OWVAR 31
41669: PUSH
41670: LD_INT 1
41672: PPUSH
41673: LD_INT 3
41675: PPUSH
41676: CALL_OW 12
41680: PUSH
41681: LD_INT 1
41683: PPUSH
41684: LD_INT 3
41686: PPUSH
41687: CALL_OW 12
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: ST_TO_ADDR
// animal := CreateHuman ;
41704: LD_ADDR_VAR 0 12
41708: PUSH
41709: CALL_OW 44
41713: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41714: LD_VAR 0 12
41718: PPUSH
41719: LD_VAR 0 8
41723: PPUSH
41724: LD_INT 0
41726: PPUSH
41727: CALL 43566 0 3
// end ;
41731: GO 41629
41733: POP
41734: POP
// if enchidnas then
41735: LD_VAR 0 4
41739: IFFALSE 41806
// for i = 1 to enchidnas do
41741: LD_ADDR_VAR 0 11
41745: PUSH
41746: DOUBLE
41747: LD_INT 1
41749: DEC
41750: ST_TO_ADDR
41751: LD_VAR 0 4
41755: PUSH
41756: FOR_TO
41757: IFFALSE 41804
// begin hc_class = 13 ;
41759: LD_ADDR_OWVAR 28
41763: PUSH
41764: LD_INT 13
41766: ST_TO_ADDR
// hc_gallery =  ;
41767: LD_ADDR_OWVAR 33
41771: PUSH
41772: LD_STRING 
41774: ST_TO_ADDR
// animal := CreateHuman ;
41775: LD_ADDR_VAR 0 12
41779: PUSH
41780: CALL_OW 44
41784: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41785: LD_VAR 0 12
41789: PPUSH
41790: LD_VAR 0 8
41794: PPUSH
41795: LD_INT 0
41797: PPUSH
41798: CALL 43566 0 3
// end ;
41802: GO 41756
41804: POP
41805: POP
// if fishes then
41806: LD_VAR 0 7
41810: IFFALSE 41877
// for i = 1 to fishes do
41812: LD_ADDR_VAR 0 11
41816: PUSH
41817: DOUBLE
41818: LD_INT 1
41820: DEC
41821: ST_TO_ADDR
41822: LD_VAR 0 7
41826: PUSH
41827: FOR_TO
41828: IFFALSE 41875
// begin hc_class = 20 ;
41830: LD_ADDR_OWVAR 28
41834: PUSH
41835: LD_INT 20
41837: ST_TO_ADDR
// hc_gallery =  ;
41838: LD_ADDR_OWVAR 33
41842: PUSH
41843: LD_STRING 
41845: ST_TO_ADDR
// animal := CreateHuman ;
41846: LD_ADDR_VAR 0 12
41850: PUSH
41851: CALL_OW 44
41855: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41856: LD_VAR 0 12
41860: PPUSH
41861: LD_VAR 0 9
41865: PPUSH
41866: LD_INT 0
41868: PPUSH
41869: CALL 43566 0 3
// end ;
41873: GO 41827
41875: POP
41876: POP
// end ;
41877: LD_VAR 0 10
41881: RET
// export function WantHeal ( sci , unit ) ; begin
41882: LD_INT 0
41884: PPUSH
// if GetTaskList ( sci ) > 0 then
41885: LD_VAR 0 1
41889: PPUSH
41890: CALL_OW 437
41894: PUSH
41895: LD_INT 0
41897: GREATER
41898: IFFALSE 41968
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41900: LD_VAR 0 1
41904: PPUSH
41905: CALL_OW 437
41909: PUSH
41910: LD_INT 1
41912: ARRAY
41913: PUSH
41914: LD_INT 1
41916: ARRAY
41917: PUSH
41918: LD_STRING l
41920: EQUAL
41921: PUSH
41922: LD_VAR 0 1
41926: PPUSH
41927: CALL_OW 437
41931: PUSH
41932: LD_INT 1
41934: ARRAY
41935: PUSH
41936: LD_INT 4
41938: ARRAY
41939: PUSH
41940: LD_VAR 0 2
41944: EQUAL
41945: AND
41946: IFFALSE 41958
// result := true else
41948: LD_ADDR_VAR 0 3
41952: PUSH
41953: LD_INT 1
41955: ST_TO_ADDR
41956: GO 41966
// result := false ;
41958: LD_ADDR_VAR 0 3
41962: PUSH
41963: LD_INT 0
41965: ST_TO_ADDR
// end else
41966: GO 41976
// result := false ;
41968: LD_ADDR_VAR 0 3
41972: PUSH
41973: LD_INT 0
41975: ST_TO_ADDR
// end ;
41976: LD_VAR 0 3
41980: RET
// export function HealTarget ( sci ) ; begin
41981: LD_INT 0
41983: PPUSH
// if not sci then
41984: LD_VAR 0 1
41988: NOT
41989: IFFALSE 41993
// exit ;
41991: GO 42058
// result := 0 ;
41993: LD_ADDR_VAR 0 2
41997: PUSH
41998: LD_INT 0
42000: ST_TO_ADDR
// if GetTaskList ( sci ) then
42001: LD_VAR 0 1
42005: PPUSH
42006: CALL_OW 437
42010: IFFALSE 42058
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42012: LD_VAR 0 1
42016: PPUSH
42017: CALL_OW 437
42021: PUSH
42022: LD_INT 1
42024: ARRAY
42025: PUSH
42026: LD_INT 1
42028: ARRAY
42029: PUSH
42030: LD_STRING l
42032: EQUAL
42033: IFFALSE 42058
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42035: LD_ADDR_VAR 0 2
42039: PUSH
42040: LD_VAR 0 1
42044: PPUSH
42045: CALL_OW 437
42049: PUSH
42050: LD_INT 1
42052: ARRAY
42053: PUSH
42054: LD_INT 4
42056: ARRAY
42057: ST_TO_ADDR
// end ;
42058: LD_VAR 0 2
42062: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42063: LD_INT 0
42065: PPUSH
42066: PPUSH
42067: PPUSH
42068: PPUSH
// if not base_units then
42069: LD_VAR 0 1
42073: NOT
42074: IFFALSE 42078
// exit ;
42076: GO 42165
// result := false ;
42078: LD_ADDR_VAR 0 2
42082: PUSH
42083: LD_INT 0
42085: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42086: LD_ADDR_VAR 0 5
42090: PUSH
42091: LD_VAR 0 1
42095: PPUSH
42096: LD_INT 21
42098: PUSH
42099: LD_INT 3
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PPUSH
42106: CALL_OW 72
42110: ST_TO_ADDR
// if not tmp then
42111: LD_VAR 0 5
42115: NOT
42116: IFFALSE 42120
// exit ;
42118: GO 42165
// for i in tmp do
42120: LD_ADDR_VAR 0 3
42124: PUSH
42125: LD_VAR 0 5
42129: PUSH
42130: FOR_IN
42131: IFFALSE 42163
// begin result := EnemyInRange ( i , 22 ) ;
42133: LD_ADDR_VAR 0 2
42137: PUSH
42138: LD_VAR 0 3
42142: PPUSH
42143: LD_INT 22
42145: PPUSH
42146: CALL 40401 0 2
42150: ST_TO_ADDR
// if result then
42151: LD_VAR 0 2
42155: IFFALSE 42161
// exit ;
42157: POP
42158: POP
42159: GO 42165
// end ;
42161: GO 42130
42163: POP
42164: POP
// end ;
42165: LD_VAR 0 2
42169: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
42170: LD_INT 0
42172: PPUSH
42173: PPUSH
// if not units then
42174: LD_VAR 0 1
42178: NOT
42179: IFFALSE 42183
// exit ;
42181: GO 42253
// result := [ ] ;
42183: LD_ADDR_VAR 0 3
42187: PUSH
42188: EMPTY
42189: ST_TO_ADDR
// for i in units do
42190: LD_ADDR_VAR 0 4
42194: PUSH
42195: LD_VAR 0 1
42199: PUSH
42200: FOR_IN
42201: IFFALSE 42251
// if GetTag ( i ) = tag then
42203: LD_VAR 0 4
42207: PPUSH
42208: CALL_OW 110
42212: PUSH
42213: LD_VAR 0 2
42217: EQUAL
42218: IFFALSE 42249
// result := Insert ( result , result + 1 , i ) ;
42220: LD_ADDR_VAR 0 3
42224: PUSH
42225: LD_VAR 0 3
42229: PPUSH
42230: LD_VAR 0 3
42234: PUSH
42235: LD_INT 1
42237: PLUS
42238: PPUSH
42239: LD_VAR 0 4
42243: PPUSH
42244: CALL_OW 2
42248: ST_TO_ADDR
42249: GO 42200
42251: POP
42252: POP
// end ;
42253: LD_VAR 0 3
42257: RET
// export function IsDriver ( un ) ; begin
42258: LD_INT 0
42260: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42261: LD_ADDR_VAR 0 2
42265: PUSH
42266: LD_VAR 0 1
42270: PUSH
42271: LD_INT 55
42273: PUSH
42274: EMPTY
42275: LIST
42276: PPUSH
42277: CALL_OW 69
42281: IN
42282: ST_TO_ADDR
// end ;
42283: LD_VAR 0 2
42287: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42288: LD_INT 0
42290: PPUSH
42291: PPUSH
// list := [ ] ;
42292: LD_ADDR_VAR 0 5
42296: PUSH
42297: EMPTY
42298: ST_TO_ADDR
// case d of 0 :
42299: LD_VAR 0 3
42303: PUSH
42304: LD_INT 0
42306: DOUBLE
42307: EQUAL
42308: IFTRUE 42312
42310: GO 42445
42312: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42313: LD_ADDR_VAR 0 5
42317: PUSH
42318: LD_VAR 0 1
42322: PUSH
42323: LD_INT 4
42325: MINUS
42326: PUSH
42327: LD_VAR 0 2
42331: PUSH
42332: LD_INT 4
42334: MINUS
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: LIST
42343: PUSH
42344: LD_VAR 0 1
42348: PUSH
42349: LD_INT 3
42351: MINUS
42352: PUSH
42353: LD_VAR 0 2
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: LIST
42365: PUSH
42366: LD_VAR 0 1
42370: PUSH
42371: LD_INT 4
42373: PLUS
42374: PUSH
42375: LD_VAR 0 2
42379: PUSH
42380: LD_INT 4
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: PUSH
42388: LD_VAR 0 1
42392: PUSH
42393: LD_INT 3
42395: PLUS
42396: PUSH
42397: LD_VAR 0 2
42401: PUSH
42402: LD_INT 3
42404: PLUS
42405: PUSH
42406: LD_INT 5
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: LIST
42413: PUSH
42414: LD_VAR 0 1
42418: PUSH
42419: LD_VAR 0 2
42423: PUSH
42424: LD_INT 4
42426: PLUS
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: LIST
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: ST_TO_ADDR
// end ; 1 :
42443: GO 43143
42445: LD_INT 1
42447: DOUBLE
42448: EQUAL
42449: IFTRUE 42453
42451: GO 42586
42453: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42454: LD_ADDR_VAR 0 5
42458: PUSH
42459: LD_VAR 0 1
42463: PUSH
42464: LD_VAR 0 2
42468: PUSH
42469: LD_INT 4
42471: MINUS
42472: PUSH
42473: LD_INT 3
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: LIST
42480: PUSH
42481: LD_VAR 0 1
42485: PUSH
42486: LD_INT 3
42488: MINUS
42489: PUSH
42490: LD_VAR 0 2
42494: PUSH
42495: LD_INT 3
42497: MINUS
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: LIST
42506: PUSH
42507: LD_VAR 0 1
42511: PUSH
42512: LD_INT 4
42514: MINUS
42515: PUSH
42516: LD_VAR 0 2
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: LIST
42528: PUSH
42529: LD_VAR 0 1
42533: PUSH
42534: LD_VAR 0 2
42538: PUSH
42539: LD_INT 3
42541: PLUS
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: PUSH
42551: LD_VAR 0 1
42555: PUSH
42556: LD_INT 4
42558: PLUS
42559: PUSH
42560: LD_VAR 0 2
42564: PUSH
42565: LD_INT 4
42567: PLUS
42568: PUSH
42569: LD_INT 5
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: LIST
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: ST_TO_ADDR
// end ; 2 :
42584: GO 43143
42586: LD_INT 2
42588: DOUBLE
42589: EQUAL
42590: IFTRUE 42594
42592: GO 42723
42594: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42595: LD_ADDR_VAR 0 5
42599: PUSH
42600: LD_VAR 0 1
42604: PUSH
42605: LD_VAR 0 2
42609: PUSH
42610: LD_INT 3
42612: MINUS
42613: PUSH
42614: LD_INT 3
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: PUSH
42622: LD_VAR 0 1
42626: PUSH
42627: LD_INT 4
42629: PLUS
42630: PUSH
42631: LD_VAR 0 2
42635: PUSH
42636: LD_INT 4
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: LIST
42643: PUSH
42644: LD_VAR 0 1
42648: PUSH
42649: LD_VAR 0 2
42653: PUSH
42654: LD_INT 4
42656: PLUS
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: LIST
42665: PUSH
42666: LD_VAR 0 1
42670: PUSH
42671: LD_INT 3
42673: MINUS
42674: PUSH
42675: LD_VAR 0 2
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: LIST
42687: PUSH
42688: LD_VAR 0 1
42692: PUSH
42693: LD_INT 4
42695: MINUS
42696: PUSH
42697: LD_VAR 0 2
42701: PUSH
42702: LD_INT 4
42704: MINUS
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: ST_TO_ADDR
// end ; 3 :
42721: GO 43143
42723: LD_INT 3
42725: DOUBLE
42726: EQUAL
42727: IFTRUE 42731
42729: GO 42864
42731: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42732: LD_ADDR_VAR 0 5
42736: PUSH
42737: LD_VAR 0 1
42741: PUSH
42742: LD_INT 3
42744: PLUS
42745: PUSH
42746: LD_VAR 0 2
42750: PUSH
42751: LD_INT 4
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: LIST
42758: PUSH
42759: LD_VAR 0 1
42763: PUSH
42764: LD_INT 4
42766: PLUS
42767: PUSH
42768: LD_VAR 0 2
42772: PUSH
42773: LD_INT 4
42775: PLUS
42776: PUSH
42777: LD_INT 5
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: LIST
42784: PUSH
42785: LD_VAR 0 1
42789: PUSH
42790: LD_INT 4
42792: MINUS
42793: PUSH
42794: LD_VAR 0 2
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: LIST
42806: PUSH
42807: LD_VAR 0 1
42811: PUSH
42812: LD_VAR 0 2
42816: PUSH
42817: LD_INT 4
42819: MINUS
42820: PUSH
42821: LD_INT 3
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: PUSH
42829: LD_VAR 0 1
42833: PUSH
42834: LD_INT 3
42836: MINUS
42837: PUSH
42838: LD_VAR 0 2
42842: PUSH
42843: LD_INT 3
42845: MINUS
42846: PUSH
42847: LD_INT 2
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: ST_TO_ADDR
// end ; 4 :
42862: GO 43143
42864: LD_INT 4
42866: DOUBLE
42867: EQUAL
42868: IFTRUE 42872
42870: GO 43005
42872: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42873: LD_ADDR_VAR 0 5
42877: PUSH
42878: LD_VAR 0 1
42882: PUSH
42883: LD_VAR 0 2
42887: PUSH
42888: LD_INT 4
42890: PLUS
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: LIST
42899: PUSH
42900: LD_VAR 0 1
42904: PUSH
42905: LD_INT 3
42907: PLUS
42908: PUSH
42909: LD_VAR 0 2
42913: PUSH
42914: LD_INT 3
42916: PLUS
42917: PUSH
42918: LD_INT 5
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: LIST
42925: PUSH
42926: LD_VAR 0 1
42930: PUSH
42931: LD_INT 4
42933: PLUS
42934: PUSH
42935: LD_VAR 0 2
42939: PUSH
42940: LD_INT 4
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: LIST
42947: PUSH
42948: LD_VAR 0 1
42952: PUSH
42953: LD_VAR 0 2
42957: PUSH
42958: LD_INT 3
42960: MINUS
42961: PUSH
42962: LD_INT 3
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: LIST
42969: PUSH
42970: LD_VAR 0 1
42974: PUSH
42975: LD_INT 4
42977: MINUS
42978: PUSH
42979: LD_VAR 0 2
42983: PUSH
42984: LD_INT 4
42986: MINUS
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: LIST
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: ST_TO_ADDR
// end ; 5 :
43003: GO 43143
43005: LD_INT 5
43007: DOUBLE
43008: EQUAL
43009: IFTRUE 43013
43011: GO 43142
43013: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43014: LD_ADDR_VAR 0 5
43018: PUSH
43019: LD_VAR 0 1
43023: PUSH
43024: LD_INT 4
43026: MINUS
43027: PUSH
43028: LD_VAR 0 2
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: LIST
43040: PUSH
43041: LD_VAR 0 1
43045: PUSH
43046: LD_VAR 0 2
43050: PUSH
43051: LD_INT 4
43053: MINUS
43054: PUSH
43055: LD_INT 3
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: LIST
43062: PUSH
43063: LD_VAR 0 1
43067: PUSH
43068: LD_INT 4
43070: PLUS
43071: PUSH
43072: LD_VAR 0 2
43076: PUSH
43077: LD_INT 4
43079: PLUS
43080: PUSH
43081: LD_INT 5
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: LIST
43088: PUSH
43089: LD_VAR 0 1
43093: PUSH
43094: LD_INT 3
43096: PLUS
43097: PUSH
43098: LD_VAR 0 2
43102: PUSH
43103: LD_INT 4
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: PUSH
43111: LD_VAR 0 1
43115: PUSH
43116: LD_VAR 0 2
43120: PUSH
43121: LD_INT 3
43123: PLUS
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: LIST
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: ST_TO_ADDR
// end ; end ;
43140: GO 43143
43142: POP
// result := list ;
43143: LD_ADDR_VAR 0 4
43147: PUSH
43148: LD_VAR 0 5
43152: ST_TO_ADDR
// end ;
43153: LD_VAR 0 4
43157: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43158: LD_INT 0
43160: PPUSH
43161: PPUSH
43162: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43163: LD_VAR 0 1
43167: NOT
43168: PUSH
43169: LD_VAR 0 2
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 4
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: IN
43192: NOT
43193: OR
43194: IFFALSE 43198
// exit ;
43196: GO 43290
// tmp := [ ] ;
43198: LD_ADDR_VAR 0 5
43202: PUSH
43203: EMPTY
43204: ST_TO_ADDR
// for i in units do
43205: LD_ADDR_VAR 0 4
43209: PUSH
43210: LD_VAR 0 1
43214: PUSH
43215: FOR_IN
43216: IFFALSE 43259
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
43218: LD_ADDR_VAR 0 5
43222: PUSH
43223: LD_VAR 0 5
43227: PPUSH
43228: LD_VAR 0 5
43232: PUSH
43233: LD_INT 1
43235: PLUS
43236: PPUSH
43237: LD_VAR 0 4
43241: PPUSH
43242: LD_VAR 0 2
43246: PPUSH
43247: CALL_OW 259
43251: PPUSH
43252: CALL_OW 2
43256: ST_TO_ADDR
43257: GO 43215
43259: POP
43260: POP
// if not tmp then
43261: LD_VAR 0 5
43265: NOT
43266: IFFALSE 43270
// exit ;
43268: GO 43290
// result := SortListByListDesc ( units , tmp ) ;
43270: LD_ADDR_VAR 0 3
43274: PUSH
43275: LD_VAR 0 1
43279: PPUSH
43280: LD_VAR 0 5
43284: PPUSH
43285: CALL_OW 77
43289: ST_TO_ADDR
// end ;
43290: LD_VAR 0 3
43294: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43295: LD_INT 0
43297: PPUSH
43298: PPUSH
43299: PPUSH
// result := false ;
43300: LD_ADDR_VAR 0 3
43304: PUSH
43305: LD_INT 0
43307: ST_TO_ADDR
// x := GetX ( building ) ;
43308: LD_ADDR_VAR 0 4
43312: PUSH
43313: LD_VAR 0 2
43317: PPUSH
43318: CALL_OW 250
43322: ST_TO_ADDR
// y := GetY ( building ) ;
43323: LD_ADDR_VAR 0 5
43327: PUSH
43328: LD_VAR 0 2
43332: PPUSH
43333: CALL_OW 251
43337: ST_TO_ADDR
// if not building or not x or not y then
43338: LD_VAR 0 2
43342: NOT
43343: PUSH
43344: LD_VAR 0 4
43348: NOT
43349: OR
43350: PUSH
43351: LD_VAR 0 5
43355: NOT
43356: OR
43357: IFFALSE 43361
// exit ;
43359: GO 43453
// if GetTaskList ( unit ) then
43361: LD_VAR 0 1
43365: PPUSH
43366: CALL_OW 437
43370: IFFALSE 43453
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43372: LD_STRING e
43374: PUSH
43375: LD_VAR 0 1
43379: PPUSH
43380: CALL_OW 437
43384: PUSH
43385: LD_INT 1
43387: ARRAY
43388: PUSH
43389: LD_INT 1
43391: ARRAY
43392: EQUAL
43393: PUSH
43394: LD_VAR 0 4
43398: PUSH
43399: LD_VAR 0 1
43403: PPUSH
43404: CALL_OW 437
43408: PUSH
43409: LD_INT 1
43411: ARRAY
43412: PUSH
43413: LD_INT 2
43415: ARRAY
43416: EQUAL
43417: AND
43418: PUSH
43419: LD_VAR 0 5
43423: PUSH
43424: LD_VAR 0 1
43428: PPUSH
43429: CALL_OW 437
43433: PUSH
43434: LD_INT 1
43436: ARRAY
43437: PUSH
43438: LD_INT 3
43440: ARRAY
43441: EQUAL
43442: AND
43443: IFFALSE 43453
// result := true end ;
43445: LD_ADDR_VAR 0 3
43449: PUSH
43450: LD_INT 1
43452: ST_TO_ADDR
// end ;
43453: LD_VAR 0 3
43457: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43458: LD_INT 0
43460: PPUSH
// result := false ;
43461: LD_ADDR_VAR 0 4
43465: PUSH
43466: LD_INT 0
43468: ST_TO_ADDR
// if GetTaskList ( unit ) then
43469: LD_VAR 0 1
43473: PPUSH
43474: CALL_OW 437
43478: IFFALSE 43561
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43480: LD_STRING M
43482: PUSH
43483: LD_VAR 0 1
43487: PPUSH
43488: CALL_OW 437
43492: PUSH
43493: LD_INT 1
43495: ARRAY
43496: PUSH
43497: LD_INT 1
43499: ARRAY
43500: EQUAL
43501: PUSH
43502: LD_VAR 0 2
43506: PUSH
43507: LD_VAR 0 1
43511: PPUSH
43512: CALL_OW 437
43516: PUSH
43517: LD_INT 1
43519: ARRAY
43520: PUSH
43521: LD_INT 2
43523: ARRAY
43524: EQUAL
43525: AND
43526: PUSH
43527: LD_VAR 0 3
43531: PUSH
43532: LD_VAR 0 1
43536: PPUSH
43537: CALL_OW 437
43541: PUSH
43542: LD_INT 1
43544: ARRAY
43545: PUSH
43546: LD_INT 3
43548: ARRAY
43549: EQUAL
43550: AND
43551: IFFALSE 43561
// result := true ;
43553: LD_ADDR_VAR 0 4
43557: PUSH
43558: LD_INT 1
43560: ST_TO_ADDR
// end ; end ;
43561: LD_VAR 0 4
43565: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43566: LD_INT 0
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
// if not unit or not area then
43572: LD_VAR 0 1
43576: NOT
43577: PUSH
43578: LD_VAR 0 2
43582: NOT
43583: OR
43584: IFFALSE 43588
// exit ;
43586: GO 43752
// tmp := AreaToList ( area , i ) ;
43588: LD_ADDR_VAR 0 6
43592: PUSH
43593: LD_VAR 0 2
43597: PPUSH
43598: LD_VAR 0 5
43602: PPUSH
43603: CALL_OW 517
43607: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43608: LD_ADDR_VAR 0 5
43612: PUSH
43613: DOUBLE
43614: LD_INT 1
43616: DEC
43617: ST_TO_ADDR
43618: LD_VAR 0 6
43622: PUSH
43623: LD_INT 1
43625: ARRAY
43626: PUSH
43627: FOR_TO
43628: IFFALSE 43750
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43630: LD_ADDR_VAR 0 7
43634: PUSH
43635: LD_VAR 0 6
43639: PUSH
43640: LD_INT 1
43642: ARRAY
43643: PUSH
43644: LD_VAR 0 5
43648: ARRAY
43649: PUSH
43650: LD_VAR 0 6
43654: PUSH
43655: LD_INT 2
43657: ARRAY
43658: PUSH
43659: LD_VAR 0 5
43663: ARRAY
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
43669: LD_VAR 0 7
43673: PUSH
43674: LD_INT 1
43676: ARRAY
43677: PPUSH
43678: LD_VAR 0 7
43682: PUSH
43683: LD_INT 2
43685: ARRAY
43686: PPUSH
43687: CALL_OW 428
43691: PUSH
43692: LD_INT 0
43694: EQUAL
43695: IFFALSE 43748
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43697: LD_VAR 0 1
43701: PPUSH
43702: LD_VAR 0 7
43706: PUSH
43707: LD_INT 1
43709: ARRAY
43710: PPUSH
43711: LD_VAR 0 7
43715: PUSH
43716: LD_INT 2
43718: ARRAY
43719: PPUSH
43720: LD_VAR 0 3
43724: PPUSH
43725: CALL_OW 48
// result := IsPlaced ( unit ) ;
43729: LD_ADDR_VAR 0 4
43733: PUSH
43734: LD_VAR 0 1
43738: PPUSH
43739: CALL_OW 305
43743: ST_TO_ADDR
// exit ;
43744: POP
43745: POP
43746: GO 43752
// end ; end ;
43748: GO 43627
43750: POP
43751: POP
// end ;
43752: LD_VAR 0 4
43756: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43757: LD_INT 0
43759: PPUSH
43760: PPUSH
43761: PPUSH
// if not side or side > 8 then
43762: LD_VAR 0 1
43766: NOT
43767: PUSH
43768: LD_VAR 0 1
43772: PUSH
43773: LD_INT 8
43775: GREATER
43776: OR
43777: IFFALSE 43781
// exit ;
43779: GO 43968
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43781: LD_ADDR_VAR 0 4
43785: PUSH
43786: LD_INT 22
43788: PUSH
43789: LD_VAR 0 1
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 21
43800: PUSH
43801: LD_INT 3
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PPUSH
43812: CALL_OW 69
43816: ST_TO_ADDR
// if not tmp then
43817: LD_VAR 0 4
43821: NOT
43822: IFFALSE 43826
// exit ;
43824: GO 43968
// enable_addtolog := true ;
43826: LD_ADDR_OWVAR 81
43830: PUSH
43831: LD_INT 1
43833: ST_TO_ADDR
// AddToLog ( [ ) ;
43834: LD_STRING [
43836: PPUSH
43837: CALL_OW 561
// for i in tmp do
43841: LD_ADDR_VAR 0 3
43845: PUSH
43846: LD_VAR 0 4
43850: PUSH
43851: FOR_IN
43852: IFFALSE 43959
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43854: LD_STRING [
43856: PUSH
43857: LD_VAR 0 3
43861: PPUSH
43862: CALL_OW 266
43866: STR
43867: PUSH
43868: LD_STRING , 
43870: STR
43871: PUSH
43872: LD_VAR 0 3
43876: PPUSH
43877: CALL_OW 250
43881: STR
43882: PUSH
43883: LD_STRING , 
43885: STR
43886: PUSH
43887: LD_VAR 0 3
43891: PPUSH
43892: CALL_OW 251
43896: STR
43897: PUSH
43898: LD_STRING , 
43900: STR
43901: PUSH
43902: LD_VAR 0 3
43906: PPUSH
43907: CALL_OW 254
43911: STR
43912: PUSH
43913: LD_STRING , 
43915: STR
43916: PUSH
43917: LD_VAR 0 3
43921: PPUSH
43922: LD_INT 1
43924: PPUSH
43925: CALL_OW 268
43929: STR
43930: PUSH
43931: LD_STRING , 
43933: STR
43934: PUSH
43935: LD_VAR 0 3
43939: PPUSH
43940: LD_INT 2
43942: PPUSH
43943: CALL_OW 268
43947: STR
43948: PUSH
43949: LD_STRING ],
43951: STR
43952: PPUSH
43953: CALL_OW 561
// end ;
43957: GO 43851
43959: POP
43960: POP
// AddToLog ( ]; ) ;
43961: LD_STRING ];
43963: PPUSH
43964: CALL_OW 561
// end ;
43968: LD_VAR 0 2
43972: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43973: LD_INT 0
43975: PPUSH
43976: PPUSH
43977: PPUSH
43978: PPUSH
43979: PPUSH
// if not area or not rate or not max then
43980: LD_VAR 0 1
43984: NOT
43985: PUSH
43986: LD_VAR 0 2
43990: NOT
43991: OR
43992: PUSH
43993: LD_VAR 0 4
43997: NOT
43998: OR
43999: IFFALSE 44003
// exit ;
44001: GO 44195
// while 1 do
44003: LD_INT 1
44005: IFFALSE 44195
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44007: LD_ADDR_VAR 0 9
44011: PUSH
44012: LD_VAR 0 1
44016: PPUSH
44017: LD_INT 1
44019: PPUSH
44020: CALL_OW 287
44024: PUSH
44025: LD_INT 10
44027: MUL
44028: ST_TO_ADDR
// r := rate / 10 ;
44029: LD_ADDR_VAR 0 7
44033: PUSH
44034: LD_VAR 0 2
44038: PUSH
44039: LD_INT 10
44041: DIVREAL
44042: ST_TO_ADDR
// time := 1 1$00 ;
44043: LD_ADDR_VAR 0 8
44047: PUSH
44048: LD_INT 2100
44050: ST_TO_ADDR
// if amount < min then
44051: LD_VAR 0 9
44055: PUSH
44056: LD_VAR 0 3
44060: LESS
44061: IFFALSE 44079
// r := r * 2 else
44063: LD_ADDR_VAR 0 7
44067: PUSH
44068: LD_VAR 0 7
44072: PUSH
44073: LD_INT 2
44075: MUL
44076: ST_TO_ADDR
44077: GO 44105
// if amount > max then
44079: LD_VAR 0 9
44083: PUSH
44084: LD_VAR 0 4
44088: GREATER
44089: IFFALSE 44105
// r := r / 2 ;
44091: LD_ADDR_VAR 0 7
44095: PUSH
44096: LD_VAR 0 7
44100: PUSH
44101: LD_INT 2
44103: DIVREAL
44104: ST_TO_ADDR
// time := time / r ;
44105: LD_ADDR_VAR 0 8
44109: PUSH
44110: LD_VAR 0 8
44114: PUSH
44115: LD_VAR 0 7
44119: DIVREAL
44120: ST_TO_ADDR
// if time < 0 then
44121: LD_VAR 0 8
44125: PUSH
44126: LD_INT 0
44128: LESS
44129: IFFALSE 44146
// time := time * - 1 ;
44131: LD_ADDR_VAR 0 8
44135: PUSH
44136: LD_VAR 0 8
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: MUL
44145: ST_TO_ADDR
// wait ( time ) ;
44146: LD_VAR 0 8
44150: PPUSH
44151: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
44155: LD_INT 35
44157: PPUSH
44158: LD_INT 875
44160: PPUSH
44161: CALL_OW 12
44165: PPUSH
44166: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44170: LD_INT 1
44172: PPUSH
44173: LD_INT 5
44175: PPUSH
44176: CALL_OW 12
44180: PPUSH
44181: LD_VAR 0 1
44185: PPUSH
44186: LD_INT 1
44188: PPUSH
44189: CALL_OW 55
// end ;
44193: GO 44003
// end ;
44195: LD_VAR 0 5
44199: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44200: LD_INT 0
44202: PPUSH
44203: PPUSH
44204: PPUSH
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
44209: PPUSH
// if not turrets or not factories then
44210: LD_VAR 0 1
44214: NOT
44215: PUSH
44216: LD_VAR 0 2
44220: NOT
44221: OR
44222: IFFALSE 44226
// exit ;
44224: GO 44533
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44226: LD_ADDR_VAR 0 10
44230: PUSH
44231: LD_INT 5
44233: PUSH
44234: LD_INT 6
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 4
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 3
44253: PUSH
44254: LD_INT 5
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 24
44268: PUSH
44269: LD_INT 25
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 23
44278: PUSH
44279: LD_INT 27
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 42
44292: PUSH
44293: LD_INT 43
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 44
44302: PUSH
44303: LD_INT 46
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 45
44312: PUSH
44313: LD_INT 47
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: ST_TO_ADDR
// result := [ ] ;
44330: LD_ADDR_VAR 0 3
44334: PUSH
44335: EMPTY
44336: ST_TO_ADDR
// for i in turrets do
44337: LD_ADDR_VAR 0 4
44341: PUSH
44342: LD_VAR 0 1
44346: PUSH
44347: FOR_IN
44348: IFFALSE 44531
// begin nat := GetNation ( i ) ;
44350: LD_ADDR_VAR 0 7
44354: PUSH
44355: LD_VAR 0 4
44359: PPUSH
44360: CALL_OW 248
44364: ST_TO_ADDR
// weapon := 0 ;
44365: LD_ADDR_VAR 0 8
44369: PUSH
44370: LD_INT 0
44372: ST_TO_ADDR
// if not nat then
44373: LD_VAR 0 7
44377: NOT
44378: IFFALSE 44382
// continue ;
44380: GO 44347
// for j in list [ nat ] do
44382: LD_ADDR_VAR 0 5
44386: PUSH
44387: LD_VAR 0 10
44391: PUSH
44392: LD_VAR 0 7
44396: ARRAY
44397: PUSH
44398: FOR_IN
44399: IFFALSE 44440
// if GetBWeapon ( i ) = j [ 1 ] then
44401: LD_VAR 0 4
44405: PPUSH
44406: CALL_OW 269
44410: PUSH
44411: LD_VAR 0 5
44415: PUSH
44416: LD_INT 1
44418: ARRAY
44419: EQUAL
44420: IFFALSE 44438
// begin weapon := j [ 2 ] ;
44422: LD_ADDR_VAR 0 8
44426: PUSH
44427: LD_VAR 0 5
44431: PUSH
44432: LD_INT 2
44434: ARRAY
44435: ST_TO_ADDR
// break ;
44436: GO 44440
// end ;
44438: GO 44398
44440: POP
44441: POP
// if not weapon then
44442: LD_VAR 0 8
44446: NOT
44447: IFFALSE 44451
// continue ;
44449: GO 44347
// for k in factories do
44451: LD_ADDR_VAR 0 6
44455: PUSH
44456: LD_VAR 0 2
44460: PUSH
44461: FOR_IN
44462: IFFALSE 44527
// begin weapons := AvailableWeaponList ( k ) ;
44464: LD_ADDR_VAR 0 9
44468: PUSH
44469: LD_VAR 0 6
44473: PPUSH
44474: CALL_OW 478
44478: ST_TO_ADDR
// if not weapons then
44479: LD_VAR 0 9
44483: NOT
44484: IFFALSE 44488
// continue ;
44486: GO 44461
// if weapon in weapons then
44488: LD_VAR 0 8
44492: PUSH
44493: LD_VAR 0 9
44497: IN
44498: IFFALSE 44525
// begin result := [ i , weapon ] ;
44500: LD_ADDR_VAR 0 3
44504: PUSH
44505: LD_VAR 0 4
44509: PUSH
44510: LD_VAR 0 8
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: ST_TO_ADDR
// exit ;
44519: POP
44520: POP
44521: POP
44522: POP
44523: GO 44533
// end ; end ;
44525: GO 44461
44527: POP
44528: POP
// end ;
44529: GO 44347
44531: POP
44532: POP
// end ;
44533: LD_VAR 0 3
44537: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44538: LD_INT 0
44540: PPUSH
// if not side or side > 8 then
44541: LD_VAR 0 3
44545: NOT
44546: PUSH
44547: LD_VAR 0 3
44551: PUSH
44552: LD_INT 8
44554: GREATER
44555: OR
44556: IFFALSE 44560
// exit ;
44558: GO 44619
// if not range then
44560: LD_VAR 0 4
44564: NOT
44565: IFFALSE 44576
// range := - 12 ;
44567: LD_ADDR_VAR 0 4
44571: PUSH
44572: LD_INT 12
44574: NEG
44575: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44576: LD_VAR 0 1
44580: PPUSH
44581: LD_VAR 0 2
44585: PPUSH
44586: LD_VAR 0 3
44590: PPUSH
44591: LD_VAR 0 4
44595: PPUSH
44596: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44600: LD_VAR 0 1
44604: PPUSH
44605: LD_VAR 0 2
44609: PPUSH
44610: LD_VAR 0 3
44614: PPUSH
44615: CALL_OW 331
// end ;
44619: LD_VAR 0 5
44623: RET
// export function Video ( mode ) ; begin
44624: LD_INT 0
44626: PPUSH
// ingame_video = mode ;
44627: LD_ADDR_OWVAR 52
44631: PUSH
44632: LD_VAR 0 1
44636: ST_TO_ADDR
// interface_hidden = mode ;
44637: LD_ADDR_OWVAR 54
44641: PUSH
44642: LD_VAR 0 1
44646: ST_TO_ADDR
// end ;
44647: LD_VAR 0 2
44651: RET
// export function Join ( array , element ) ; begin
44652: LD_INT 0
44654: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44655: LD_ADDR_VAR 0 3
44659: PUSH
44660: LD_VAR 0 1
44664: PPUSH
44665: LD_VAR 0 1
44669: PUSH
44670: LD_INT 1
44672: PLUS
44673: PPUSH
44674: LD_VAR 0 2
44678: PPUSH
44679: CALL_OW 1
44683: ST_TO_ADDR
// end ;
44684: LD_VAR 0 3
44688: RET
// export function JoinUnion ( array , element ) ; begin
44689: LD_INT 0
44691: PPUSH
// result := array union element ;
44692: LD_ADDR_VAR 0 3
44696: PUSH
44697: LD_VAR 0 1
44701: PUSH
44702: LD_VAR 0 2
44706: UNION
44707: ST_TO_ADDR
// end ;
44708: LD_VAR 0 3
44712: RET
// export function GetBehemoths ( side ) ; begin
44713: LD_INT 0
44715: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
44716: LD_ADDR_VAR 0 2
44720: PUSH
44721: LD_INT 22
44723: PUSH
44724: LD_VAR 0 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 31
44735: PUSH
44736: LD_INT 25
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PPUSH
44747: CALL_OW 69
44751: ST_TO_ADDR
// end ;
44752: LD_VAR 0 2
44756: RET
// export function Shuffle ( array ) ; var i , index ; begin
44757: LD_INT 0
44759: PPUSH
44760: PPUSH
44761: PPUSH
// result := [ ] ;
44762: LD_ADDR_VAR 0 2
44766: PUSH
44767: EMPTY
44768: ST_TO_ADDR
// if not array then
44769: LD_VAR 0 1
44773: NOT
44774: IFFALSE 44778
// exit ;
44776: GO 44877
// Randomize ;
44778: CALL_OW 10
// for i = array downto 1 do
44782: LD_ADDR_VAR 0 3
44786: PUSH
44787: DOUBLE
44788: LD_VAR 0 1
44792: INC
44793: ST_TO_ADDR
44794: LD_INT 1
44796: PUSH
44797: FOR_DOWNTO
44798: IFFALSE 44875
// begin index := rand ( 1 , array ) ;
44800: LD_ADDR_VAR 0 4
44804: PUSH
44805: LD_INT 1
44807: PPUSH
44808: LD_VAR 0 1
44812: PPUSH
44813: CALL_OW 12
44817: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44818: LD_ADDR_VAR 0 2
44822: PUSH
44823: LD_VAR 0 2
44827: PPUSH
44828: LD_VAR 0 2
44832: PUSH
44833: LD_INT 1
44835: PLUS
44836: PPUSH
44837: LD_VAR 0 1
44841: PUSH
44842: LD_VAR 0 4
44846: ARRAY
44847: PPUSH
44848: CALL_OW 2
44852: ST_TO_ADDR
// array := Delete ( array , index ) ;
44853: LD_ADDR_VAR 0 1
44857: PUSH
44858: LD_VAR 0 1
44862: PPUSH
44863: LD_VAR 0 4
44867: PPUSH
44868: CALL_OW 3
44872: ST_TO_ADDR
// end ;
44873: GO 44797
44875: POP
44876: POP
// end ;
44877: LD_VAR 0 2
44881: RET
// export function GetBaseMaterials ( base ) ; begin
44882: LD_INT 0
44884: PPUSH
// result := [ 0 , 0 , 0 ] ;
44885: LD_ADDR_VAR 0 2
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: ST_TO_ADDR
// if not base then
44904: LD_VAR 0 1
44908: NOT
44909: IFFALSE 44913
// exit ;
44911: GO 44962
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44913: LD_ADDR_VAR 0 2
44917: PUSH
44918: LD_VAR 0 1
44922: PPUSH
44923: LD_INT 1
44925: PPUSH
44926: CALL_OW 275
44930: PUSH
44931: LD_VAR 0 1
44935: PPUSH
44936: LD_INT 2
44938: PPUSH
44939: CALL_OW 275
44943: PUSH
44944: LD_VAR 0 1
44948: PPUSH
44949: LD_INT 3
44951: PPUSH
44952: CALL_OW 275
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: ST_TO_ADDR
// end ;
44962: LD_VAR 0 2
44966: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44967: LD_INT 0
44969: PPUSH
44970: PPUSH
// result := array ;
44971: LD_ADDR_VAR 0 3
44975: PUSH
44976: LD_VAR 0 1
44980: ST_TO_ADDR
// if size > 0 then
44981: LD_VAR 0 2
44985: PUSH
44986: LD_INT 0
44988: GREATER
44989: IFFALSE 45035
// for i := array downto size do
44991: LD_ADDR_VAR 0 4
44995: PUSH
44996: DOUBLE
44997: LD_VAR 0 1
45001: INC
45002: ST_TO_ADDR
45003: LD_VAR 0 2
45007: PUSH
45008: FOR_DOWNTO
45009: IFFALSE 45033
// result := Delete ( result , result ) ;
45011: LD_ADDR_VAR 0 3
45015: PUSH
45016: LD_VAR 0 3
45020: PPUSH
45021: LD_VAR 0 3
45025: PPUSH
45026: CALL_OW 3
45030: ST_TO_ADDR
45031: GO 45008
45033: POP
45034: POP
// end ;
45035: LD_VAR 0 3
45039: RET
// export function ComExit ( unit ) ; var tmp ; begin
45040: LD_INT 0
45042: PPUSH
45043: PPUSH
// if not IsInUnit ( unit ) then
45044: LD_VAR 0 1
45048: PPUSH
45049: CALL_OW 310
45053: NOT
45054: IFFALSE 45058
// exit ;
45056: GO 45118
// tmp := IsInUnit ( unit ) ;
45058: LD_ADDR_VAR 0 3
45062: PUSH
45063: LD_VAR 0 1
45067: PPUSH
45068: CALL_OW 310
45072: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45073: LD_VAR 0 3
45077: PPUSH
45078: CALL_OW 247
45082: PUSH
45083: LD_INT 2
45085: EQUAL
45086: IFFALSE 45099
// ComExitVehicle ( unit ) else
45088: LD_VAR 0 1
45092: PPUSH
45093: CALL_OW 121
45097: GO 45108
// ComExitBuilding ( unit ) ;
45099: LD_VAR 0 1
45103: PPUSH
45104: CALL_OW 122
// result := tmp ;
45108: LD_ADDR_VAR 0 2
45112: PUSH
45113: LD_VAR 0 3
45117: ST_TO_ADDR
// end ;
45118: LD_VAR 0 2
45122: RET
// export function ComExitAll ( units ) ; var i ; begin
45123: LD_INT 0
45125: PPUSH
45126: PPUSH
// if not units then
45127: LD_VAR 0 1
45131: NOT
45132: IFFALSE 45136
// exit ;
45134: GO 45162
// for i in units do
45136: LD_ADDR_VAR 0 3
45140: PUSH
45141: LD_VAR 0 1
45145: PUSH
45146: FOR_IN
45147: IFFALSE 45160
// ComExit ( i ) ;
45149: LD_VAR 0 3
45153: PPUSH
45154: CALL 45040 0 1
45158: GO 45146
45160: POP
45161: POP
// end ;
45162: LD_VAR 0 2
45166: RET
// export function ResetHc ; begin
45167: LD_INT 0
45169: PPUSH
// InitHc ;
45170: CALL_OW 19
// hc_importance := 0 ;
45174: LD_ADDR_OWVAR 32
45178: PUSH
45179: LD_INT 0
45181: ST_TO_ADDR
// end ;
45182: LD_VAR 0 1
45186: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45187: LD_INT 0
45189: PPUSH
45190: PPUSH
45191: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45192: LD_ADDR_VAR 0 6
45196: PUSH
45197: LD_VAR 0 1
45201: PUSH
45202: LD_VAR 0 3
45206: PLUS
45207: PUSH
45208: LD_INT 2
45210: DIV
45211: ST_TO_ADDR
// if _x < 0 then
45212: LD_VAR 0 6
45216: PUSH
45217: LD_INT 0
45219: LESS
45220: IFFALSE 45237
// _x := _x * - 1 ;
45222: LD_ADDR_VAR 0 6
45226: PUSH
45227: LD_VAR 0 6
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: MUL
45236: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45237: LD_ADDR_VAR 0 7
45241: PUSH
45242: LD_VAR 0 2
45246: PUSH
45247: LD_VAR 0 4
45251: PLUS
45252: PUSH
45253: LD_INT 2
45255: DIV
45256: ST_TO_ADDR
// if _y < 0 then
45257: LD_VAR 0 7
45261: PUSH
45262: LD_INT 0
45264: LESS
45265: IFFALSE 45282
// _y := _y * - 1 ;
45267: LD_ADDR_VAR 0 7
45271: PUSH
45272: LD_VAR 0 7
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: MUL
45281: ST_TO_ADDR
// result := [ _x , _y ] ;
45282: LD_ADDR_VAR 0 5
45286: PUSH
45287: LD_VAR 0 6
45291: PUSH
45292: LD_VAR 0 7
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: ST_TO_ADDR
// end ;
45301: LD_VAR 0 5
45305: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45306: LD_INT 0
45308: PPUSH
45309: PPUSH
45310: PPUSH
45311: PPUSH
// task := GetTaskList ( unit ) ;
45312: LD_ADDR_VAR 0 7
45316: PUSH
45317: LD_VAR 0 1
45321: PPUSH
45322: CALL_OW 437
45326: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45327: LD_VAR 0 7
45331: NOT
45332: PUSH
45333: LD_VAR 0 1
45337: PPUSH
45338: LD_VAR 0 2
45342: PPUSH
45343: CALL_OW 308
45347: NOT
45348: AND
45349: IFFALSE 45353
// exit ;
45351: GO 45471
// if IsInArea ( unit , area ) then
45353: LD_VAR 0 1
45357: PPUSH
45358: LD_VAR 0 2
45362: PPUSH
45363: CALL_OW 308
45367: IFFALSE 45385
// begin ComMoveToArea ( unit , goAway ) ;
45369: LD_VAR 0 1
45373: PPUSH
45374: LD_VAR 0 3
45378: PPUSH
45379: CALL_OW 113
// exit ;
45383: GO 45471
// end ; if task [ 1 ] [ 1 ] <> M then
45385: LD_VAR 0 7
45389: PUSH
45390: LD_INT 1
45392: ARRAY
45393: PUSH
45394: LD_INT 1
45396: ARRAY
45397: PUSH
45398: LD_STRING M
45400: NONEQUAL
45401: IFFALSE 45405
// exit ;
45403: GO 45471
// x := task [ 1 ] [ 2 ] ;
45405: LD_ADDR_VAR 0 5
45409: PUSH
45410: LD_VAR 0 7
45414: PUSH
45415: LD_INT 1
45417: ARRAY
45418: PUSH
45419: LD_INT 2
45421: ARRAY
45422: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45423: LD_ADDR_VAR 0 6
45427: PUSH
45428: LD_VAR 0 7
45432: PUSH
45433: LD_INT 1
45435: ARRAY
45436: PUSH
45437: LD_INT 3
45439: ARRAY
45440: ST_TO_ADDR
// if InArea ( x , y , area ) then
45441: LD_VAR 0 5
45445: PPUSH
45446: LD_VAR 0 6
45450: PPUSH
45451: LD_VAR 0 2
45455: PPUSH
45456: CALL_OW 309
45460: IFFALSE 45471
// ComStop ( unit ) ;
45462: LD_VAR 0 1
45466: PPUSH
45467: CALL_OW 141
// end ;
45471: LD_VAR 0 4
45475: RET
// export function Abs ( value ) ; begin
45476: LD_INT 0
45478: PPUSH
// result := value ;
45479: LD_ADDR_VAR 0 2
45483: PUSH
45484: LD_VAR 0 1
45488: ST_TO_ADDR
// if value < 0 then
45489: LD_VAR 0 1
45493: PUSH
45494: LD_INT 0
45496: LESS
45497: IFFALSE 45514
// result := value * - 1 ;
45499: LD_ADDR_VAR 0 2
45503: PUSH
45504: LD_VAR 0 1
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: MUL
45513: ST_TO_ADDR
// end ;
45514: LD_VAR 0 2
45518: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45519: LD_INT 0
45521: PPUSH
45522: PPUSH
45523: PPUSH
45524: PPUSH
45525: PPUSH
45526: PPUSH
45527: PPUSH
45528: PPUSH
// if not unit or not building then
45529: LD_VAR 0 1
45533: NOT
45534: PUSH
45535: LD_VAR 0 2
45539: NOT
45540: OR
45541: IFFALSE 45545
// exit ;
45543: GO 45771
// x := GetX ( building ) ;
45545: LD_ADDR_VAR 0 4
45549: PUSH
45550: LD_VAR 0 2
45554: PPUSH
45555: CALL_OW 250
45559: ST_TO_ADDR
// y := GetY ( building ) ;
45560: LD_ADDR_VAR 0 6
45564: PUSH
45565: LD_VAR 0 2
45569: PPUSH
45570: CALL_OW 251
45574: ST_TO_ADDR
// d := GetDir ( building ) ;
45575: LD_ADDR_VAR 0 8
45579: PUSH
45580: LD_VAR 0 2
45584: PPUSH
45585: CALL_OW 254
45589: ST_TO_ADDR
// r := 4 ;
45590: LD_ADDR_VAR 0 9
45594: PUSH
45595: LD_INT 4
45597: ST_TO_ADDR
// for i := 1 to 5 do
45598: LD_ADDR_VAR 0 10
45602: PUSH
45603: DOUBLE
45604: LD_INT 1
45606: DEC
45607: ST_TO_ADDR
45608: LD_INT 5
45610: PUSH
45611: FOR_TO
45612: IFFALSE 45769
// begin _x := ShiftX ( x , d , r + i ) ;
45614: LD_ADDR_VAR 0 5
45618: PUSH
45619: LD_VAR 0 4
45623: PPUSH
45624: LD_VAR 0 8
45628: PPUSH
45629: LD_VAR 0 9
45633: PUSH
45634: LD_VAR 0 10
45638: PLUS
45639: PPUSH
45640: CALL_OW 272
45644: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45645: LD_ADDR_VAR 0 7
45649: PUSH
45650: LD_VAR 0 6
45654: PPUSH
45655: LD_VAR 0 8
45659: PPUSH
45660: LD_VAR 0 9
45664: PUSH
45665: LD_VAR 0 10
45669: PLUS
45670: PPUSH
45671: CALL_OW 273
45675: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45676: LD_VAR 0 5
45680: PPUSH
45681: LD_VAR 0 7
45685: PPUSH
45686: CALL_OW 488
45690: PUSH
45691: LD_VAR 0 5
45695: PPUSH
45696: LD_VAR 0 7
45700: PPUSH
45701: CALL_OW 428
45705: PPUSH
45706: CALL_OW 247
45710: PUSH
45711: LD_INT 3
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: IN
45721: NOT
45722: AND
45723: IFFALSE 45767
// begin ComMoveXY ( unit , _x , _y ) ;
45725: LD_VAR 0 1
45729: PPUSH
45730: LD_VAR 0 5
45734: PPUSH
45735: LD_VAR 0 7
45739: PPUSH
45740: CALL_OW 111
// result := [ _x , _y ] ;
45744: LD_ADDR_VAR 0 3
45748: PUSH
45749: LD_VAR 0 5
45753: PUSH
45754: LD_VAR 0 7
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: ST_TO_ADDR
// exit ;
45763: POP
45764: POP
45765: GO 45771
// end ; end ;
45767: GO 45611
45769: POP
45770: POP
// end ;
45771: LD_VAR 0 3
45775: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45776: LD_INT 0
45778: PPUSH
45779: PPUSH
45780: PPUSH
// result := 0 ;
45781: LD_ADDR_VAR 0 3
45785: PUSH
45786: LD_INT 0
45788: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45789: LD_VAR 0 1
45793: PUSH
45794: LD_INT 0
45796: LESS
45797: PUSH
45798: LD_VAR 0 1
45802: PUSH
45803: LD_INT 8
45805: GREATER
45806: OR
45807: PUSH
45808: LD_VAR 0 2
45812: PUSH
45813: LD_INT 0
45815: LESS
45816: OR
45817: PUSH
45818: LD_VAR 0 2
45822: PUSH
45823: LD_INT 8
45825: GREATER
45826: OR
45827: IFFALSE 45831
// exit ;
45829: GO 45906
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45831: LD_ADDR_VAR 0 4
45835: PUSH
45836: LD_INT 22
45838: PUSH
45839: LD_VAR 0 2
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PPUSH
45848: CALL_OW 69
45852: PUSH
45853: FOR_IN
45854: IFFALSE 45904
// begin un := UnitShoot ( i ) ;
45856: LD_ADDR_VAR 0 5
45860: PUSH
45861: LD_VAR 0 4
45865: PPUSH
45866: CALL_OW 504
45870: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45871: LD_VAR 0 5
45875: PPUSH
45876: CALL_OW 255
45880: PUSH
45881: LD_VAR 0 1
45885: EQUAL
45886: IFFALSE 45902
// begin result := un ;
45888: LD_ADDR_VAR 0 3
45892: PUSH
45893: LD_VAR 0 5
45897: ST_TO_ADDR
// exit ;
45898: POP
45899: POP
45900: GO 45906
// end ; end ;
45902: GO 45853
45904: POP
45905: POP
// end ;
45906: LD_VAR 0 3
45910: RET
// export function GetCargoBay ( units ) ; begin
45911: LD_INT 0
45913: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45914: LD_ADDR_VAR 0 2
45918: PUSH
45919: LD_VAR 0 1
45923: PPUSH
45924: LD_INT 2
45926: PUSH
45927: LD_INT 34
45929: PUSH
45930: LD_INT 12
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 34
45939: PUSH
45940: LD_INT 51
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 34
45949: PUSH
45950: LD_INT 32
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 34
45959: PUSH
45960: LD_EXP 40
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: PPUSH
45976: CALL_OW 72
45980: ST_TO_ADDR
// end ;
45981: LD_VAR 0 2
45985: RET
// export function Negate ( value ) ; begin
45986: LD_INT 0
45988: PPUSH
// result := not value ;
45989: LD_ADDR_VAR 0 2
45993: PUSH
45994: LD_VAR 0 1
45998: NOT
45999: ST_TO_ADDR
// end ;
46000: LD_VAR 0 2
46004: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
46005: LD_INT 0
46007: PPUSH
// if x1 = x2 then
46008: LD_VAR 0 1
46012: PUSH
46013: LD_VAR 0 3
46017: EQUAL
46018: IFFALSE 46052
// begin if y1 > y2 then
46020: LD_VAR 0 2
46024: PUSH
46025: LD_VAR 0 4
46029: GREATER
46030: IFFALSE 46042
// result := 0 else
46032: LD_ADDR_VAR 0 5
46036: PUSH
46037: LD_INT 0
46039: ST_TO_ADDR
46040: GO 46050
// result := 3 ;
46042: LD_ADDR_VAR 0 5
46046: PUSH
46047: LD_INT 3
46049: ST_TO_ADDR
// exit ;
46050: GO 46138
// end ; if y1 = y2 then
46052: LD_VAR 0 2
46056: PUSH
46057: LD_VAR 0 4
46061: EQUAL
46062: IFFALSE 46096
// begin if x1 > x2 then
46064: LD_VAR 0 1
46068: PUSH
46069: LD_VAR 0 3
46073: GREATER
46074: IFFALSE 46086
// result := 1 else
46076: LD_ADDR_VAR 0 5
46080: PUSH
46081: LD_INT 1
46083: ST_TO_ADDR
46084: GO 46094
// result := 4 ;
46086: LD_ADDR_VAR 0 5
46090: PUSH
46091: LD_INT 4
46093: ST_TO_ADDR
// exit ;
46094: GO 46138
// end ; if x1 > x2 and y1 > y2 then
46096: LD_VAR 0 1
46100: PUSH
46101: LD_VAR 0 3
46105: GREATER
46106: PUSH
46107: LD_VAR 0 2
46111: PUSH
46112: LD_VAR 0 4
46116: GREATER
46117: AND
46118: IFFALSE 46130
// result := 2 else
46120: LD_ADDR_VAR 0 5
46124: PUSH
46125: LD_INT 2
46127: ST_TO_ADDR
46128: GO 46138
// result := 5 ;
46130: LD_ADDR_VAR 0 5
46134: PUSH
46135: LD_INT 5
46137: ST_TO_ADDR
// end ;
46138: LD_VAR 0 5
46142: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46143: LD_INT 0
46145: PPUSH
46146: PPUSH
// if not driver or not IsInUnit ( driver ) then
46147: LD_VAR 0 1
46151: NOT
46152: PUSH
46153: LD_VAR 0 1
46157: PPUSH
46158: CALL_OW 310
46162: NOT
46163: OR
46164: IFFALSE 46168
// exit ;
46166: GO 46258
// vehicle := IsInUnit ( driver ) ;
46168: LD_ADDR_VAR 0 3
46172: PUSH
46173: LD_VAR 0 1
46177: PPUSH
46178: CALL_OW 310
46182: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46183: LD_VAR 0 1
46187: PPUSH
46188: LD_STRING \
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: PUSH
46218: LD_STRING E
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_VAR 0 3
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PPUSH
46254: CALL_OW 446
// end ;
46258: LD_VAR 0 2
46262: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
46263: LD_INT 0
46265: PPUSH
46266: PPUSH
46267: PPUSH
// tmp := [ ] ;
46268: LD_ADDR_VAR 0 5
46272: PUSH
46273: EMPTY
46274: ST_TO_ADDR
// for i in units do
46275: LD_ADDR_VAR 0 4
46279: PUSH
46280: LD_VAR 0 1
46284: PUSH
46285: FOR_IN
46286: IFFALSE 46324
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
46288: LD_ADDR_VAR 0 5
46292: PUSH
46293: LD_VAR 0 5
46297: PPUSH
46298: LD_VAR 0 5
46302: PUSH
46303: LD_INT 1
46305: PLUS
46306: PPUSH
46307: LD_VAR 0 4
46311: PPUSH
46312: CALL_OW 256
46316: PPUSH
46317: CALL_OW 2
46321: ST_TO_ADDR
46322: GO 46285
46324: POP
46325: POP
// if not tmp then
46326: LD_VAR 0 5
46330: NOT
46331: IFFALSE 46335
// exit ;
46333: GO 46383
// if asc then
46335: LD_VAR 0 2
46339: IFFALSE 46363
// result := SortListByListAsc ( units , tmp ) else
46341: LD_ADDR_VAR 0 3
46345: PUSH
46346: LD_VAR 0 1
46350: PPUSH
46351: LD_VAR 0 5
46355: PPUSH
46356: CALL_OW 76
46360: ST_TO_ADDR
46361: GO 46383
// result := SortListByListDesc ( units , tmp ) ;
46363: LD_ADDR_VAR 0 3
46367: PUSH
46368: LD_VAR 0 1
46372: PPUSH
46373: LD_VAR 0 5
46377: PPUSH
46378: CALL_OW 77
46382: ST_TO_ADDR
// end ; end_of_file
46383: LD_VAR 0 3
46387: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
46388: LD_INT 0
46390: PPUSH
// ar_miner := 81 ;
46391: LD_ADDR_EXP 46
46395: PUSH
46396: LD_INT 81
46398: ST_TO_ADDR
// ar_crane := 88 ;
46399: LD_ADDR_EXP 45
46403: PUSH
46404: LD_INT 88
46406: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
46407: LD_ADDR_EXP 40
46411: PUSH
46412: LD_INT 89
46414: ST_TO_ADDR
// us_hack := 99 ;
46415: LD_ADDR_EXP 41
46419: PUSH
46420: LD_INT 99
46422: ST_TO_ADDR
// us_artillery := 97 ;
46423: LD_ADDR_EXP 42
46427: PUSH
46428: LD_INT 97
46430: ST_TO_ADDR
// ar_bio_bomb := 91 ;
46431: LD_ADDR_EXP 43
46435: PUSH
46436: LD_INT 91
46438: ST_TO_ADDR
// ar_mortar := 92 ;
46439: LD_ADDR_EXP 44
46443: PUSH
46444: LD_INT 92
46446: ST_TO_ADDR
// ru_radar := 98 ;
46447: LD_ADDR_EXP 39
46451: PUSH
46452: LD_INT 98
46454: ST_TO_ADDR
// tech_Artillery := 80 ;
46455: LD_ADDR_EXP 47
46459: PUSH
46460: LD_INT 80
46462: ST_TO_ADDR
// tech_RadMat := 81 ;
46463: LD_ADDR_EXP 48
46467: PUSH
46468: LD_INT 81
46470: ST_TO_ADDR
// tech_BasicTools := 82 ;
46471: LD_ADDR_EXP 49
46475: PUSH
46476: LD_INT 82
46478: ST_TO_ADDR
// tech_Cargo := 83 ;
46479: LD_ADDR_EXP 50
46483: PUSH
46484: LD_INT 83
46486: ST_TO_ADDR
// tech_Track := 84 ;
46487: LD_ADDR_EXP 51
46491: PUSH
46492: LD_INT 84
46494: ST_TO_ADDR
// tech_Crane := 85 ;
46495: LD_ADDR_EXP 52
46499: PUSH
46500: LD_INT 85
46502: ST_TO_ADDR
// tech_Bulldozer := 86 ;
46503: LD_ADDR_EXP 53
46507: PUSH
46508: LD_INT 86
46510: ST_TO_ADDR
// tech_Hovercraft := 87 ;
46511: LD_ADDR_EXP 54
46515: PUSH
46516: LD_INT 87
46518: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
46519: LD_ADDR_EXP 55
46523: PUSH
46524: LD_INT 88
46526: ST_TO_ADDR
// class_mastodont := 31 ;
46527: LD_ADDR_EXP 56
46531: PUSH
46532: LD_INT 31
46534: ST_TO_ADDR
// class_horse := 21 ;
46535: LD_ADDR_EXP 57
46539: PUSH
46540: LD_INT 21
46542: ST_TO_ADDR
// end ;
46543: LD_VAR 0 1
46547: RET
// every 1 do
46548: GO 46550
46550: DISABLE
// InitGlobalVariables ;
46551: CALL 46388 0 0
46555: END
