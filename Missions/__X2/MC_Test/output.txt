// starting begin ResetFog ;
   0: CALL_OW 335
// MC_Init ( ) ;
   4: CALL 323 0 0
// PrepareTestBase ;
   8: CALL 75 0 0
// mc_debug := true ;
  12: LD_ADDR_EXP 5
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// MC_Start ( ) ;
  20: CALL 347 0 0
// end ;
  24: END
// export function MC_CustomMacro ( ) ; begin
  25: LD_INT 0
  27: PPUSH
// MC_Add ( 1 , FilterAllUnits ( [ f_side , 1 ] ) ) ;
  28: LD_INT 1
  30: PPUSH
  31: LD_INT 22
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: EMPTY
  38: LIST
  39: LIST
  40: PPUSH
  41: CALL_OW 69
  45: PPUSH
  46: CALL 402 0 2
// MC_SetCratesArea ( 1 , cratesArea1 ) ;
  50: LD_INT 1
  52: PPUSH
  53: LD_INT 2
  55: PPUSH
  56: CALL 1648 0 2
// MC_SetScanArea ( 1 , baseArea1 ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 1
  65: PPUSH
  66: CALL 2134 0 2
// end ;
  70: LD_VAR 0 1
  74: RET
// export function PrepareTestBase ; var i , un ; begin
  75: LD_INT 0
  77: PPUSH
  78: PPUSH
  79: PPUSH
// InitHc_All ;
  80: CALL_OW 584
// uc_side := 1 ;
  84: LD_ADDR_OWVAR 20
  88: PUSH
  89: LD_INT 1
  91: ST_TO_ADDR
// uc_nation := 1 ;
  92: LD_ADDR_OWVAR 21
  96: PUSH
  97: LD_INT 1
  99: ST_TO_ADDR
// for i := 1 to 12 do
 100: LD_ADDR_VAR 0 2
 104: PUSH
 105: DOUBLE
 106: LD_INT 1
 108: DEC
 109: ST_TO_ADDR
 110: LD_INT 12
 112: PUSH
 113: FOR_TO
 114: IFFALSE 181
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
 116: LD_INT 0
 118: PPUSH
 119: LD_VAR 0 2
 123: PUSH
 124: LD_INT 4
 126: MOD
 127: PUSH
 128: LD_INT 1
 130: PLUS
 131: PPUSH
 132: LD_INT 3
 134: PPUSH
 135: CALL_OW 380
// un := CreateHuman ;
 139: LD_ADDR_VAR 0 3
 143: PUSH
 144: CALL_OW 44
 148: ST_TO_ADDR
// PlaceUnitXYR ( un , 21 , 16 , 8 , false ) ;
 149: LD_VAR 0 3
 153: PPUSH
 154: LD_INT 21
 156: PPUSH
 157: LD_INT 16
 159: PPUSH
 160: LD_INT 8
 162: PPUSH
 163: LD_INT 0
 165: PPUSH
 166: CALL_OW 50
// ComHold ( un ) ;
 170: LD_VAR 0 3
 174: PPUSH
 175: CALL_OW 140
// end ;
 179: GO 113
 181: POP
 182: POP
// end ;
 183: LD_VAR 0 1
 187: RET
// every 0 0$20 trigger mc_debug do
 188: LD_EXP 5
 192: IFFALSE 219
 194: GO 196
 196: DISABLE
// begin enable ;
 197: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea1 , true ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 5
 203: PPUSH
 204: CALL_OW 12
 208: PPUSH
 209: LD_INT 2
 211: PPUSH
 212: LD_INT 1
 214: PPUSH
 215: CALL_OW 55
// end ; end_of_file
 219: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ;
 220: LD_VAR 0 1
 224: PPUSH
 225: LD_VAR 0 2
 229: PPUSH
 230: LD_VAR 0 3
 234: PPUSH
 235: LD_VAR 0 4
 239: PPUSH
 240: LD_VAR 0 5
 244: PPUSH
 245: LD_VAR 0 6
 249: PPUSH
 250: LD_VAR 0 7
 254: PPUSH
 255: CALL 3405 0 7
// end ;
 259: PPOPN 7
 261: END
// on ClassChanged ( unit , old_class , new_class ) do begin MCE_ClassChanged ( unit , old_class , new_class ) ;
 262: LD_VAR 0 1
 266: PPUSH
 267: LD_VAR 0 2
 271: PPUSH
 272: LD_VAR 0 3
 276: PPUSH
 277: CALL 3458 0 3
// end ;
 281: PPOPN 3
 283: END
// on UnitDestroyed ( unit ) do begin MCE_UnitDestroyed ( unit ) ;
 284: LD_VAR 0 1
 288: PPUSH
 289: CALL 3480 0 1
// end ;
 293: PPOPN 1
 295: END
// on EvacuateVehicle ( driver , vehicle , p1 , p2 ) do begin MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ;
 296: LD_VAR 0 1
 300: PPUSH
 301: LD_VAR 0 2
 305: PPUSH
 306: LD_VAR 0 3
 310: PPUSH
 311: LD_VAR 0 4
 315: PPUSH
 316: CALL 3605 0 4
// end ; end_of_file
 320: PPOPN 4
 322: END
// export function MC_Init ( ) ; begin
 323: LD_INT 0
 325: PPUSH
// MC_InitVariables ( ) ;
 326: CALL 3678 0 0
// MCE_InitEvents ( ) ;
 330: CALL 3381 0 0
// MCT_InitTags ( ) ;
 334: CALL 3861 0 0
// MCTM_InitTaskManager ( ) end ;
 338: CALL 5307 0 0
 342: LD_VAR 0 1
 346: RET
// export function MC_Start ( ) ; begin
 347: LD_INT 0
 349: PPUSH
// mc_active := true ;
 350: LD_ADDR_EXP 4
 354: PUSH
 355: LD_INT 1
 357: ST_TO_ADDR
// MC_CustomMacro ( ) ;
 358: CALL 25 0 0
// MCE_SailEventCustom ( mce_start , 0 , 0 , 0 , 0 , 0 , 0 ) ;
 362: LD_EXP 1
 366: PPUSH
 367: LD_INT 0
 369: PPUSH
 370: LD_INT 0
 372: PPUSH
 373: LD_INT 0
 375: PPUSH
 376: LD_INT 0
 378: PPUSH
 379: LD_INT 0
 381: PPUSH
 382: LD_INT 0
 384: PPUSH
 385: CALL 3405 0 7
// end ;
 389: LD_VAR 0 1
 393: RET
// export function MC_Kill ( base ) ; begin
 394: LD_INT 0
 396: PPUSH
// end ;
 397: LD_VAR 0 2
 401: RET
// export function MC_Add ( side , units ) ; begin
 402: LD_INT 0
 404: PPUSH
// mc_bases := Replace ( mc_bases , mc_bases + 1 , side ) ;
 405: LD_ADDR_EXP 6
 409: PUSH
 410: LD_EXP 6
 414: PPUSH
 415: LD_EXP 6
 419: PUSH
 420: LD_INT 1
 422: PLUS
 423: PPUSH
 424: LD_VAR 0 1
 428: PPUSH
 429: CALL_OW 1
 433: ST_TO_ADDR
// mc_task := Replace ( mc_task , mc_task + 1 , [ ] ) ;
 434: LD_ADDR_EXP 8
 438: PUSH
 439: LD_EXP 8
 443: PPUSH
 444: LD_EXP 8
 448: PUSH
 449: LD_INT 1
 451: PLUS
 452: PPUSH
 453: EMPTY
 454: PPUSH
 455: CALL_OW 1
 459: ST_TO_ADDR
// mc_people := Replace ( mc_people , mc_people + 1 , UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
 460: LD_ADDR_EXP 9
 464: PUSH
 465: LD_EXP 9
 469: PPUSH
 470: LD_EXP 9
 474: PUSH
 475: LD_INT 1
 477: PLUS
 478: PPUSH
 479: LD_VAR 0 2
 483: PPUSH
 484: LD_INT 21
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: LD_INT 3
 496: PUSH
 497: LD_INT 23
 499: PUSH
 500: LD_INT 0
 502: PUSH
 503: EMPTY
 504: LIST
 505: LIST
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: PPUSH
 515: CALL_OW 72
 519: PPUSH
 520: CALL_OW 1
 524: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , mc_ape + 1 , UnitFilter ( units , [ f_nation , 0 ] ) ) ;
 525: LD_ADDR_EXP 19
 529: PUSH
 530: LD_EXP 19
 534: PPUSH
 535: LD_EXP 19
 539: PUSH
 540: LD_INT 1
 542: PLUS
 543: PPUSH
 544: LD_VAR 0 2
 548: PPUSH
 549: LD_INT 23
 551: PUSH
 552: LD_INT 0
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PPUSH
 559: CALL_OW 72
 563: PPUSH
 564: CALL_OW 1
 568: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , mc_vehicles + 1 , UnitFilter ( units , [ f_type , unit_vehicle ] ) ) ;
 569: LD_ADDR_EXP 11
 573: PUSH
 574: LD_EXP 11
 578: PPUSH
 579: LD_EXP 11
 583: PUSH
 584: LD_INT 1
 586: PLUS
 587: PPUSH
 588: LD_VAR 0 2
 592: PPUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PPUSH
 603: CALL_OW 72
 607: PPUSH
 608: CALL_OW 1
 612: ST_TO_ADDR
// mc_buildings := Replace ( mc_buildings , mc_buildings + 1 , UnitFilter ( units , [ f_type , unit_building ] ) ) ;
 613: LD_ADDR_EXP 10
 617: PUSH
 618: LD_EXP 10
 622: PPUSH
 623: LD_EXP 10
 627: PUSH
 628: LD_INT 1
 630: PLUS
 631: PPUSH
 632: LD_VAR 0 2
 636: PPUSH
 637: LD_INT 21
 639: PUSH
 640: LD_INT 3
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: PPUSH
 647: CALL_OW 72
 651: PPUSH
 652: CALL_OW 1
 656: ST_TO_ADDR
// mc_defense_status := Replace ( mc_defense_status , mc_defense_status + 1 , false ) ;
 657: LD_ADDR_EXP 16
 661: PUSH
 662: LD_EXP 16
 666: PPUSH
 667: LD_EXP 16
 671: PUSH
 672: LD_INT 1
 674: PLUS
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: CALL_OW 1
 683: ST_TO_ADDR
// end ;
 684: LD_VAR 0 3
 688: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
 689: LD_INT 0
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
 696: PPUSH
// if not mc_bases [ base ] then
 697: LD_EXP 6
 701: PUSH
 702: LD_VAR 0 1
 706: ARRAY
 707: NOT
 708: IFFALSE 712
// exit ;
 710: GO 894
// tmp := [ ] ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: EMPTY
 718: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
 719: LD_ADDR_VAR 0 7
 723: PUSH
 724: LD_VAR 0 3
 728: PPUSH
 729: LD_INT 0
 731: PPUSH
 732: CALL_OW 517
 736: ST_TO_ADDR
// if not list then
 737: LD_VAR 0 7
 741: NOT
 742: IFFALSE 746
// exit ;
 744: GO 894
// for i = 1 to amount do
 746: LD_ADDR_VAR 0 5
 750: PUSH
 751: DOUBLE
 752: LD_INT 1
 754: DEC
 755: ST_TO_ADDR
 756: LD_VAR 0 2
 760: PUSH
 761: FOR_TO
 762: IFFALSE 842
// begin x := rand ( 1 , list [ 1 ] ) ;
 764: LD_ADDR_VAR 0 8
 768: PUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_VAR 0 7
 776: PUSH
 777: LD_INT 1
 779: ARRAY
 780: PPUSH
 781: CALL_OW 12
 785: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
 786: LD_ADDR_VAR 0 6
 790: PUSH
 791: LD_VAR 0 6
 795: PPUSH
 796: LD_VAR 0 5
 800: PPUSH
 801: LD_VAR 0 7
 805: PUSH
 806: LD_INT 1
 808: ARRAY
 809: PUSH
 810: LD_VAR 0 8
 814: ARRAY
 815: PUSH
 816: LD_VAR 0 7
 820: PUSH
 821: LD_INT 2
 823: ARRAY
 824: PUSH
 825: LD_VAR 0 8
 829: ARRAY
 830: PUSH
 831: EMPTY
 832: LIST
 833: LIST
 834: PPUSH
 835: CALL_OW 1
 839: ST_TO_ADDR
// end ;
 840: GO 761
 842: POP
 843: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
 844: LD_ADDR_EXP 12
 848: PUSH
 849: LD_EXP 12
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_VAR 0 6
 863: PPUSH
 864: CALL_OW 1
 868: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
 869: LD_ADDR_EXP 13
 873: PUSH
 874: LD_EXP 13
 878: PPUSH
 879: LD_VAR 0 1
 883: PPUSH
 884: LD_VAR 0 3
 888: PPUSH
 889: CALL_OW 1
 893: ST_TO_ADDR
// end ;
 894: LD_VAR 0 4
 898: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
 899: LD_INT 0
 901: PPUSH
// if not mc_bases [ base ] then
 902: LD_EXP 6
 906: PUSH
 907: LD_VAR 0 1
 911: ARRAY
 912: NOT
 913: IFFALSE 917
// exit ;
 915: GO 942
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
 917: LD_ADDR_EXP 14
 921: PUSH
 922: LD_EXP 14
 926: PPUSH
 927: LD_VAR 0 1
 931: PPUSH
 932: LD_VAR 0 2
 936: PPUSH
 937: CALL_OW 1
 941: ST_TO_ADDR
// end ;
 942: LD_VAR 0 3
 946: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
 947: LD_INT 0
 949: PPUSH
// if not mc_bases [ base ] then
 950: LD_EXP 6
 954: PUSH
 955: LD_VAR 0 1
 959: ARRAY
 960: NOT
 961: IFFALSE 965
// exit ;
 963: GO 1002
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
 965: LD_ADDR_EXP 14
 969: PUSH
 970: LD_EXP 14
 974: PPUSH
 975: LD_VAR 0 1
 979: PPUSH
 980: LD_EXP 14
 984: PUSH
 985: LD_VAR 0 1
 989: ARRAY
 990: PUSH
 991: LD_VAR 0 2
 995: UNION
 996: PPUSH
 997: CALL_OW 1
1001: ST_TO_ADDR
// end ;
1002: LD_VAR 0 3
1006: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
1007: LD_INT 0
1009: PPUSH
// if not mc_bases [ base ] then
1010: LD_EXP 6
1014: PUSH
1015: LD_VAR 0 1
1019: ARRAY
1020: NOT
1021: IFFALSE 1025
// exit ;
1023: GO 1050
// mc_produce_list := Replace ( mc_produce_list , base , produce_list ) ;
1025: LD_ADDR_EXP 15
1029: PUSH
1030: LD_EXP 15
1034: PPUSH
1035: LD_VAR 0 1
1039: PPUSH
1040: LD_VAR 0 2
1044: PPUSH
1045: CALL_OW 1
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function MC_InsertProduceList ( base , components ) ; begin
1055: LD_INT 0
1057: PPUSH
// if not mc_bases [ base ] then
1058: LD_EXP 6
1062: PUSH
1063: LD_VAR 0 1
1067: ARRAY
1068: NOT
1069: IFFALSE 1073
// exit ;
1071: GO 1110
// mc_produce_list := Replace ( mc_produce_list , base , mc_produce_list [ base ] ^ components ) ;
1073: LD_ADDR_EXP 15
1077: PUSH
1078: LD_EXP 15
1082: PPUSH
1083: LD_VAR 0 1
1087: PPUSH
1088: LD_EXP 15
1092: PUSH
1093: LD_VAR 0 1
1097: ARRAY
1098: PUSH
1099: LD_VAR 0 2
1103: ADD
1104: PPUSH
1105: CALL_OW 1
1109: ST_TO_ADDR
// end ;
1110: LD_VAR 0 3
1114: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
1115: LD_INT 0
1117: PPUSH
// if not mc_bases [ base ] then
1118: LD_EXP 6
1122: PUSH
1123: LD_VAR 0 1
1127: ARRAY
1128: NOT
1129: IFFALSE 1133
// exit ;
1131: GO 1187
// mc_defender := Replace ( mc_defender , base , deflist ) ;
1133: LD_ADDR_EXP 17
1137: PUSH
1138: LD_EXP 17
1142: PPUSH
1143: LD_VAR 0 1
1147: PPUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: CALL_OW 1
1157: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
1158: LD_ADDR_EXP 18
1162: PUSH
1163: LD_EXP 18
1167: PPUSH
1168: LD_VAR 0 1
1172: PPUSH
1173: LD_VAR 0 2
1177: PUSH
1178: LD_INT 0
1180: PLUS
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: LD_VAR 0 3
1191: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
1192: LD_INT 0
1194: PPUSH
// if not mc_bases [ base ] then
1195: LD_EXP 6
1199: PUSH
1200: LD_VAR 0 1
1204: ARRAY
1205: NOT
1206: IFFALSE 1210
// exit ;
1208: GO 1235
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
1210: LD_ADDR_EXP 18
1214: PUSH
1215: LD_EXP 18
1219: PPUSH
1220: LD_VAR 0 1
1224: PPUSH
1225: LD_VAR 0 2
1229: PPUSH
1230: CALL_OW 1
1234: ST_TO_ADDR
// end ;
1235: LD_VAR 0 3
1239: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
1240: LD_INT 0
1242: PPUSH
1243: PPUSH
1244: PPUSH
1245: PPUSH
// if not mc_bases [ base ] then
1246: LD_EXP 6
1250: PUSH
1251: LD_VAR 0 1
1255: ARRAY
1256: NOT
1257: IFFALSE 1261
// exit ;
1259: GO 1326
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
1261: LD_ADDR_EXP 21
1265: PUSH
1266: LD_EXP 21
1270: PPUSH
1271: LD_VAR 0 1
1275: PUSH
1276: LD_EXP 21
1280: PUSH
1281: LD_VAR 0 1
1285: ARRAY
1286: PUSH
1287: LD_INT 1
1289: PLUS
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PPUSH
1295: LD_VAR 0 1
1299: PUSH
1300: LD_VAR 0 2
1304: PUSH
1305: LD_VAR 0 3
1309: PUSH
1310: LD_VAR 0 4
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: PPUSH
1321: CALL 10408 0 3
1325: ST_TO_ADDR
// end ;
1326: LD_VAR 0 5
1330: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
1331: LD_INT 0
1333: PPUSH
// if not mc_bases [ base ] then
1334: LD_EXP 6
1338: PUSH
1339: LD_VAR 0 1
1343: ARRAY
1344: NOT
1345: IFFALSE 1349
// exit ;
1347: GO 1374
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
1349: LD_ADDR_EXP 22
1353: PUSH
1354: LD_EXP 22
1358: PPUSH
1359: LD_VAR 0 1
1363: PPUSH
1364: LD_VAR 0 2
1368: PPUSH
1369: CALL_OW 1
1373: ST_TO_ADDR
// end ;
1374: LD_VAR 0 3
1378: RET
// export function MC_SetTame ( base , area ) ; begin
1379: LD_INT 0
1381: PPUSH
// if not mc_bases or not base then
1382: LD_EXP 6
1386: NOT
1387: PUSH
1388: LD_VAR 0 1
1392: NOT
1393: OR
1394: IFFALSE 1398
// exit ;
1396: GO 1423
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
1398: LD_ADDR_EXP 23
1402: PUSH
1403: LD_EXP 23
1407: PPUSH
1408: LD_VAR 0 1
1412: PPUSH
1413: LD_VAR 0 2
1417: PPUSH
1418: CALL_OW 1
1422: ST_TO_ADDR
// end ;
1423: LD_VAR 0 3
1427: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
1428: LD_INT 0
1430: PPUSH
1431: PPUSH
// if not mc_bases or not base then
1432: LD_EXP 6
1436: NOT
1437: PUSH
1438: LD_VAR 0 1
1442: NOT
1443: OR
1444: IFFALSE 1448
// exit ;
1446: GO 1550
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
1448: LD_ADDR_VAR 0 4
1452: PUSH
1453: LD_EXP 6
1457: PUSH
1458: LD_VAR 0 1
1462: ARRAY
1463: PPUSH
1464: LD_INT 30
1466: PUSH
1467: LD_VAR 0 2
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PPUSH
1476: CALL_OW 72
1480: ST_TO_ADDR
// if not tmp then
1481: LD_VAR 0 4
1485: NOT
1486: IFFALSE 1490
// exit ;
1488: GO 1550
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
1490: LD_ADDR_EXP 24
1494: PUSH
1495: LD_EXP 24
1499: PPUSH
1500: LD_VAR 0 1
1504: PPUSH
1505: LD_EXP 24
1509: PUSH
1510: LD_VAR 0 1
1514: ARRAY
1515: PPUSH
1516: LD_EXP 24
1520: PUSH
1521: LD_VAR 0 1
1525: ARRAY
1526: PUSH
1527: LD_INT 1
1529: PLUS
1530: PPUSH
1531: LD_VAR 0 4
1535: PUSH
1536: LD_INT 1
1538: ARRAY
1539: PPUSH
1540: CALL_OW 2
1544: PPUSH
1545: CALL_OW 1
1549: ST_TO_ADDR
// end ;
1550: LD_VAR 0 3
1554: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
1555: LD_INT 0
1557: PPUSH
1558: PPUSH
// if not mc_bases or not base or not kinds then
1559: LD_EXP 6
1563: NOT
1564: PUSH
1565: LD_VAR 0 1
1569: NOT
1570: OR
1571: PUSH
1572: LD_VAR 0 2
1576: NOT
1577: OR
1578: IFFALSE 1582
// exit ;
1580: GO 1643
// for i in kinds do
1582: LD_ADDR_VAR 0 4
1586: PUSH
1587: LD_VAR 0 2
1591: PUSH
1592: FOR_IN
1593: IFFALSE 1641
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
1595: LD_ADDR_EXP 25
1599: PUSH
1600: LD_EXP 25
1604: PPUSH
1605: LD_VAR 0 1
1609: PUSH
1610: LD_EXP 25
1614: PUSH
1615: LD_VAR 0 1
1619: ARRAY
1620: PUSH
1621: LD_INT 1
1623: PLUS
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PPUSH
1629: LD_VAR 0 4
1633: PPUSH
1634: CALL 10408 0 3
1638: ST_TO_ADDR
1639: GO 1592
1641: POP
1642: POP
// end ;
1643: LD_VAR 0 3
1647: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
1648: LD_INT 0
1650: PPUSH
// if not mc_bases or not base or not areas then
1651: LD_EXP 6
1655: NOT
1656: PUSH
1657: LD_VAR 0 1
1661: NOT
1662: OR
1663: PUSH
1664: LD_VAR 0 2
1668: NOT
1669: OR
1670: IFFALSE 1674
// exit ;
1672: GO 1699
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
1674: LD_ADDR_EXP 26
1678: PUSH
1679: LD_EXP 26
1683: PPUSH
1684: LD_VAR 0 1
1688: PPUSH
1689: LD_VAR 0 2
1693: PPUSH
1694: CALL_OW 1
1698: ST_TO_ADDR
// end ;
1699: LD_VAR 0 3
1703: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
1704: LD_INT 0
1706: PPUSH
// if not mc_bases or not base or not teleports_exit then
1707: LD_EXP 6
1711: NOT
1712: PUSH
1713: LD_VAR 0 1
1717: NOT
1718: OR
1719: PUSH
1720: LD_VAR 0 2
1724: NOT
1725: OR
1726: IFFALSE 1730
// exit ;
1728: GO 1755
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
1730: LD_ADDR_EXP 27
1734: PUSH
1735: LD_EXP 27
1739: PPUSH
1740: LD_VAR 0 1
1744: PPUSH
1745: LD_VAR 0 2
1749: PPUSH
1750: CALL_OW 1
1754: ST_TO_ADDR
// end ;
1755: LD_VAR 0 3
1759: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
1760: LD_INT 0
1762: PPUSH
1763: PPUSH
1764: PPUSH
// if not mc_bases or not base or not ext_list then
1765: LD_EXP 6
1769: NOT
1770: PUSH
1771: LD_VAR 0 1
1775: NOT
1776: OR
1777: PUSH
1778: LD_VAR 0 5
1782: NOT
1783: OR
1784: IFFALSE 1788
// exit ;
1786: GO 1961
// tmp := GetFacExtXYD ( x , y , d ) ;
1788: LD_ADDR_VAR 0 8
1792: PUSH
1793: LD_VAR 0 2
1797: PPUSH
1798: LD_VAR 0 3
1802: PPUSH
1803: LD_VAR 0 4
1807: PPUSH
1808: CALL 39087 0 3
1812: ST_TO_ADDR
// if not tmp then
1813: LD_VAR 0 8
1817: NOT
1818: IFFALSE 1822
// exit ;
1820: GO 1961
// for i in tmp do
1822: LD_ADDR_VAR 0 7
1826: PUSH
1827: LD_VAR 0 8
1831: PUSH
1832: FOR_IN
1833: IFFALSE 1959
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
1835: LD_ADDR_EXP 14
1839: PUSH
1840: LD_EXP 14
1844: PPUSH
1845: LD_VAR 0 1
1849: PPUSH
1850: LD_EXP 14
1854: PUSH
1855: LD_VAR 0 1
1859: ARRAY
1860: PPUSH
1861: LD_EXP 14
1865: PUSH
1866: LD_VAR 0 1
1870: ARRAY
1871: PUSH
1872: LD_INT 1
1874: PLUS
1875: PPUSH
1876: LD_VAR 0 5
1880: PUSH
1881: LD_INT 1
1883: ARRAY
1884: PUSH
1885: LD_VAR 0 7
1889: PUSH
1890: LD_INT 1
1892: ARRAY
1893: PUSH
1894: LD_VAR 0 7
1898: PUSH
1899: LD_INT 2
1901: ARRAY
1902: PUSH
1903: LD_VAR 0 7
1907: PUSH
1908: LD_INT 3
1910: ARRAY
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: PPUSH
1918: CALL_OW 2
1922: PPUSH
1923: CALL_OW 1
1927: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
1928: LD_ADDR_VAR 0 5
1932: PUSH
1933: LD_VAR 0 5
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: CALL_OW 3
1945: ST_TO_ADDR
// if not ext_list then
1946: LD_VAR 0 5
1950: NOT
1951: IFFALSE 1957
// exit ;
1953: POP
1954: POP
1955: GO 1961
// end ;
1957: GO 1832
1959: POP
1960: POP
// end ;
1961: LD_VAR 0 6
1965: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
1966: LD_INT 0
1968: PPUSH
// if not mc_bases or not base or not weapon_list then
1969: LD_EXP 6
1973: NOT
1974: PUSH
1975: LD_VAR 0 1
1979: NOT
1980: OR
1981: PUSH
1982: LD_VAR 0 2
1986: NOT
1987: OR
1988: IFFALSE 1992
// exit ;
1990: GO 2017
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
1992: LD_ADDR_EXP 28
1996: PUSH
1997: LD_EXP 28
2001: PPUSH
2002: LD_VAR 0 1
2006: PPUSH
2007: LD_VAR 0 2
2011: PPUSH
2012: CALL_OW 1
2016: ST_TO_ADDR
// end ;
2017: LD_VAR 0 3
2021: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
2022: LD_INT 0
2024: PPUSH
// if not mc_bases or not base or not tech_list then
2025: LD_EXP 6
2029: NOT
2030: PUSH
2031: LD_VAR 0 1
2035: NOT
2036: OR
2037: PUSH
2038: LD_VAR 0 2
2042: NOT
2043: OR
2044: IFFALSE 2048
// exit ;
2046: GO 2073
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
2048: LD_ADDR_EXP 20
2052: PUSH
2053: LD_EXP 20
2057: PPUSH
2058: LD_VAR 0 1
2062: PPUSH
2063: LD_VAR 0 2
2067: PPUSH
2068: CALL_OW 1
2072: ST_TO_ADDR
// end ;
2073: LD_VAR 0 3
2077: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
2078: LD_INT 0
2080: PPUSH
// if not mc_bases or not parking_area or not base then
2081: LD_EXP 6
2085: NOT
2086: PUSH
2087: LD_VAR 0 2
2091: NOT
2092: OR
2093: PUSH
2094: LD_VAR 0 1
2098: NOT
2099: OR
2100: IFFALSE 2104
// exit ;
2102: GO 2129
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
2104: LD_ADDR_EXP 29
2108: PUSH
2109: LD_EXP 29
2113: PPUSH
2114: LD_VAR 0 1
2118: PPUSH
2119: LD_VAR 0 2
2123: PPUSH
2124: CALL_OW 1
2128: ST_TO_ADDR
// end ;
2129: LD_VAR 0 3
2133: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
2134: LD_INT 0
2136: PPUSH
// if not mc_bases or not base or not scan_area then
2137: LD_EXP 6
2141: NOT
2142: PUSH
2143: LD_VAR 0 1
2147: NOT
2148: OR
2149: PUSH
2150: LD_VAR 0 2
2154: NOT
2155: OR
2156: IFFALSE 2160
// exit ;
2158: GO 2185
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
2160: LD_ADDR_EXP 30
2164: PUSH
2165: LD_EXP 30
2169: PPUSH
2170: LD_VAR 0 1
2174: PPUSH
2175: LD_VAR 0 2
2179: PPUSH
2180: CALL_OW 1
2184: ST_TO_ADDR
// end ; end_of_file
2185: LD_VAR 0 3
2189: RET
// export function MC_Monitor ( ) ; var i , active_players ; begin
2190: LD_INT 0
2192: PPUSH
2193: PPUSH
2194: PPUSH
// while mc_active do
2195: LD_EXP 4
2199: IFFALSE 2309
// begin wait ( 0 0$1 ) ;
2201: LD_INT 35
2203: PPUSH
2204: CALL_OW 67
// active_players := 0 ;
2208: LD_ADDR_VAR 0 3
2212: PUSH
2213: LD_INT 0
2215: ST_TO_ADDR
// for i := 1 to mc_bases do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_EXP 6
2230: PUSH
2231: FOR_TO
2232: IFFALSE 2290
// begin if MC_Exist ( i ) then
2234: LD_VAR 0 2
2238: PPUSH
2239: CALL 4069 0 1
2243: IFFALSE 2288
// begin MCE_SailEventCustom ( mce_monitor_base , i , 0 , 0 , 0 , 0 , 0 ) ;
2245: LD_EXP 2
2249: PPUSH
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 0
2257: PPUSH
2258: LD_INT 0
2260: PPUSH
2261: LD_INT 0
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: CALL 3405 0 7
// active_players := active_players + 1 ;
2274: LD_ADDR_VAR 0 3
2278: PUSH
2279: LD_VAR 0 3
2283: PUSH
2284: LD_INT 1
2286: PLUS
2287: ST_TO_ADDR
// end ; end ;
2288: GO 2231
2290: POP
2291: POP
// if not active_players then
2292: LD_VAR 0 3
2296: NOT
2297: IFFALSE 2307
// mc_active := false ;
2299: LD_ADDR_EXP 4
2303: PUSH
2304: LD_INT 0
2306: ST_TO_ADDR
// end ;
2307: GO 2195
// end ;
2309: LD_VAR 0 1
2313: RET
// export function MC_MonitorBase ( base ) ; begin
2314: LD_INT 0
2316: PPUSH
// if not mc_people [ base ] then
2317: LD_EXP 9
2321: PUSH
2322: LD_VAR 0 1
2326: ARRAY
2327: NOT
2328: IFFALSE 2353
// mc_bases := Replace ( mc_bases , base , 0 ) ;
2330: LD_ADDR_EXP 6
2334: PUSH
2335: LD_EXP 6
2339: PPUSH
2340: LD_VAR 0 1
2344: PPUSH
2345: LD_INT 0
2347: PPUSH
2348: CALL_OW 1
2352: ST_TO_ADDR
// mc_danger := Replace ( mc_danger , base , DangerInArea ( mc_bases [ base ] , mc_scan_area [ base ] ) ) ;
2353: LD_ADDR_EXP 31
2357: PUSH
2358: LD_EXP 31
2362: PPUSH
2363: LD_VAR 0 1
2367: PPUSH
2368: LD_EXP 6
2372: PUSH
2373: LD_VAR 0 1
2377: ARRAY
2378: PPUSH
2379: LD_EXP 30
2383: PUSH
2384: LD_VAR 0 1
2388: ARRAY
2389: PPUSH
2390: CALL 13054 0 2
2394: PPUSH
2395: CALL_OW 1
2399: ST_TO_ADDR
// if mc_danger [ base ] then
2400: LD_EXP 31
2404: PUSH
2405: LD_VAR 0 1
2409: ARRAY
2410: IFFALSE 2423
// MC_Defend ( base ) else
2412: LD_VAR 0 1
2416: PPUSH
2417: CALL 2437 0 1
2421: GO 2432
// MC_TaskManager ( base ) ;
2423: LD_VAR 0 1
2427: PPUSH
2428: CALL 2499 0 1
// end ;
2432: LD_VAR 0 2
2436: RET
// export function MC_Defend ( base ) ; var defender_vehicles ; begin
2437: LD_INT 0
2439: PPUSH
2440: PPUSH
// if mc_defense_status [ base ] then
2441: LD_EXP 16
2445: PUSH
2446: LD_VAR 0 1
2450: ARRAY
2451: IFFALSE 2455
// exit ;
2453: GO 2494
// mc_defense_status := Replace ( mc_defense_status , base , true ) ;
2455: LD_ADDR_EXP 16
2459: PUSH
2460: LD_EXP 16
2464: PPUSH
2465: LD_VAR 0 1
2469: PPUSH
2470: LD_INT 1
2472: PPUSH
2473: CALL_OW 1
2477: ST_TO_ADDR
// defender_vehicles := mc_defender [ base ] ;
2478: LD_ADDR_VAR 0 3
2482: PUSH
2483: LD_EXP 17
2487: PUSH
2488: LD_VAR 0 1
2492: ARRAY
2493: ST_TO_ADDR
// end ;
2494: LD_VAR 0 2
2498: RET
// export function MC_TaskManager ( base ) ; var crates_list ; begin
2499: LD_INT 0
2501: PPUSH
2502: PPUSH
// MC_CollectCrates ( base , GetListOfCratesInArea ( mc_crates_area [ base ] ) ) ;
2503: LD_VAR 0 1
2507: PPUSH
2508: LD_EXP 26
2512: PUSH
2513: LD_VAR 0 1
2517: ARRAY
2518: PPUSH
2519: CALL_OW 435
2523: PPUSH
2524: CALL 2533 0 2
// end ;
2528: LD_VAR 0 2
2532: RET
// export function MC_CollectCrates ( base , crates ) ; var i , j , cargo_bays , apes , engs , collectors , number_of_crates , driver , drivers , depot , mechanic_used ; begin
2533: LD_INT 0
2535: PPUSH
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
2543: PPUSH
2544: PPUSH
2545: PPUSH
2546: PPUSH
// if MCTM_HasActiveTask ( base , mctm_collect_crates ) or not crates then
2547: LD_VAR 0 1
2551: PPUSH
2552: LD_EXP 37
2556: PPUSH
2557: CALL 5323 0 2
2561: PUSH
2562: LD_VAR 0 2
2566: NOT
2567: OR
2568: IFFALSE 2572
// exit ;
2570: GO 3376
// MCTM_SetActiveTask ( base , mctm_collect_crates ) ;
2572: LD_VAR 0 1
2576: PPUSH
2577: LD_EXP 37
2581: PPUSH
2582: CALL 5353 0 2
// collectors := [ ] ;
2586: LD_ADDR_VAR 0 9
2590: PUSH
2591: EMPTY
2592: ST_TO_ADDR
// cargo_bays := GetCargoBay ( mc_vehicles [ base ] ) ;
2593: LD_ADDR_VAR 0 6
2597: PUSH
2598: LD_EXP 11
2602: PUSH
2603: LD_VAR 0 1
2607: ARRAY
2608: PPUSH
2609: CALL 42666 0 1
2613: ST_TO_ADDR
// if cargo_bays then
2614: LD_VAR 0 6
2618: IFFALSE 3256
// begin collectors := collectors union cargo_bays ;
2620: LD_ADDR_VAR 0 9
2624: PUSH
2625: LD_VAR 0 9
2629: PUSH
2630: LD_VAR 0 6
2634: UNION
2635: ST_TO_ADDR
// while crates > 0 do
2636: LD_VAR 0 2
2640: PUSH
2641: LD_INT 0
2643: GREATER
2644: IFFALSE 3160
// begin wait ( 0 0$1 ) ;
2646: LD_INT 35
2648: PPUSH
2649: CALL_OW 67
// for i in collectors do
2653: LD_ADDR_VAR 0 4
2657: PUSH
2658: LD_VAR 0 9
2662: PUSH
2663: FOR_IN
2664: IFFALSE 3156
// begin driver := 0 ;
2666: LD_ADDR_VAR 0 11
2670: PUSH
2671: LD_INT 0
2673: ST_TO_ADDR
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
2674: LD_VAR 0 4
2678: PPUSH
2679: CALL_OW 263
2683: PUSH
2684: LD_INT 1
2686: EQUAL
2687: PUSH
2688: LD_VAR 0 4
2692: PPUSH
2693: CALL_OW 311
2697: NOT
2698: AND
2699: IFFALSE 2878
// begin driver := MC_GetOneByClass ( base , 3 ) ;
2701: LD_ADDR_VAR 0 11
2705: PUSH
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_INT 3
2713: PPUSH
2714: CALL 4863 0 2
2718: ST_TO_ADDR
// if not driver then
2719: LD_VAR 0 11
2723: NOT
2724: IFFALSE 2793
// begin driver := MC_GetBestForClass ( base , 3 , 1 ) ;
2726: LD_ADDR_VAR 0 11
2730: PUSH
2731: LD_VAR 0 1
2735: PPUSH
2736: LD_INT 3
2738: PPUSH
2739: LD_INT 1
2741: PPUSH
2742: CALL 4109 0 3
2746: ST_TO_ADDR
// if driver then
2747: LD_VAR 0 11
2751: IFFALSE 2793
// begin driver := driver [ 1 ] ;
2753: LD_ADDR_VAR 0 11
2757: PUSH
2758: LD_VAR 0 11
2762: PUSH
2763: LD_INT 1
2765: ARRAY
2766: ST_TO_ADDR
// MC_ChangeClass ( base , 3 , driver ) ;
2767: LD_VAR 0 1
2771: PPUSH
2772: LD_INT 3
2774: PPUSH
2775: LD_VAR 0 11
2779: PPUSH
2780: CALL 4339 0 3
// AddComExitBuilding ( driver ) ;
2784: LD_VAR 0 11
2788: PPUSH
2789: CALL_OW 182
// end ; end ; if IsInUnit ( driver ) then
2793: LD_VAR 0 11
2797: PPUSH
2798: CALL_OW 310
2802: IFFALSE 2813
// ComExit ( driver ) ;
2804: LD_VAR 0 11
2808: PPUSH
2809: CALL 41839 0 1
// SetTag ( driver , mct_collect_crates ) ;
2813: LD_VAR 0 11
2817: PPUSH
2818: LD_EXP 35
2822: PPUSH
2823: CALL_OW 109
// if GetLives ( i ) < 1000 then
2827: LD_VAR 0 4
2831: PPUSH
2832: CALL_OW 256
2836: PUSH
2837: LD_INT 1000
2839: LESS
2840: IFFALSE 2856
// AddComRepairVehicle ( driver , i ) ;
2842: LD_VAR 0 11
2846: PPUSH
2847: LD_VAR 0 4
2851: PPUSH
2852: CALL_OW 189
// AddComEnterUnit ( driver , i ) ;
2856: LD_VAR 0 11
2860: PPUSH
2861: LD_VAR 0 4
2865: PPUSH
2866: CALL_OW 180
// mechanic_used := true ;
2870: LD_ADDR_VAR 0 14
2874: PUSH
2875: LD_INT 1
2877: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) ;
2878: LD_INT 35
2880: PPUSH
2881: CALL_OW 67
// if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 20 then
2885: LD_VAR 0 4
2889: PPUSH
2890: CALL_OW 262
2894: PUSH
2895: LD_INT 1
2897: EQUAL
2898: PUSH
2899: LD_VAR 0 4
2903: PPUSH
2904: CALL_OW 261
2908: PUSH
2909: LD_INT 20
2911: LESS
2912: AND
2913: IFFALSE 2974
// begin depot := NearestUnitToUnit ( MC_GetDepot ( base ) , i ) ;
2915: LD_ADDR_VAR 0 13
2919: PUSH
2920: LD_VAR 0 1
2924: PPUSH
2925: CALL 4952 0 1
2929: PPUSH
2930: LD_VAR 0 4
2934: PPUSH
2935: CALL_OW 74
2939: ST_TO_ADDR
// if GetDistUnits ( i , depot ) < 6 then
2940: LD_VAR 0 4
2944: PPUSH
2945: LD_VAR 0 13
2949: PPUSH
2950: CALL_OW 296
2954: PUSH
2955: LD_INT 6
2957: LESS
2958: IFFALSE 2974
// ComMoveUnit ( i , depot ) ;
2960: LD_VAR 0 4
2964: PPUSH
2965: LD_VAR 0 13
2969: PPUSH
2970: CALL_OW 112
// end ; if GetControl ( i ) = control_manual then
2974: LD_VAR 0 4
2978: PPUSH
2979: CALL_OW 263
2983: PUSH
2984: LD_INT 1
2986: EQUAL
2987: IFFALSE 3052
// begin if not driver then
2989: LD_VAR 0 11
2993: NOT
2994: IFFALSE 3011
// driver := IsDrivenBy ( i ) ;
2996: LD_ADDR_VAR 0 11
3000: PUSH
3001: LD_VAR 0 4
3005: PPUSH
3006: CALL_OW 311
3010: ST_TO_ADDR
// if not HasTask ( driver ) then
3011: LD_VAR 0 11
3015: PPUSH
3016: CALL_OW 314
3020: NOT
3021: IFFALSE 3050
// ComCollect ( driver , crates [ 1 ] , crates [ 2 ] ) ;
3023: LD_VAR 0 11
3027: PPUSH
3028: LD_VAR 0 2
3032: PUSH
3033: LD_INT 1
3035: ARRAY
3036: PPUSH
3037: LD_VAR 0 2
3041: PUSH
3042: LD_INT 2
3044: ARRAY
3045: PPUSH
3046: CALL_OW 117
// end else
3050: GO 3091
// if not HasTask ( i ) then
3052: LD_VAR 0 4
3056: PPUSH
3057: CALL_OW 314
3061: NOT
3062: IFFALSE 3091
// ComCollect ( i , crates [ 1 ] , crates [ 2 ] ) ;
3064: LD_VAR 0 4
3068: PPUSH
3069: LD_VAR 0 2
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 2
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 117
// until not GetResourceAmountXY ( crates [ 1 ] , crates [ 2 ] ) ;
3091: LD_VAR 0 2
3095: PUSH
3096: LD_INT 1
3098: ARRAY
3099: PPUSH
3100: LD_VAR 0 2
3104: PUSH
3105: LD_INT 2
3107: ARRAY
3108: PPUSH
3109: CALL_OW 284
3113: NOT
3114: IFFALSE 2878
// for j := 1 to 2 do
3116: LD_ADDR_VAR 0 5
3120: PUSH
3121: DOUBLE
3122: LD_INT 1
3124: DEC
3125: ST_TO_ADDR
3126: LD_INT 2
3128: PUSH
3129: FOR_TO
3130: IFFALSE 3152
// crates := Delete ( crates , 1 ) ;
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: LD_VAR 0 2
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: CALL_OW 3
3149: ST_TO_ADDR
3150: GO 3129
3152: POP
3153: POP
// end ;
3154: GO 2663
3156: POP
3157: POP
// end ;
3158: GO 2636
// if mechanic_used then
3160: LD_VAR 0 14
3164: IFFALSE 3254
// begin repeat wait ( 0 0$1 ) ;
3166: LD_INT 35
3168: PPUSH
3169: CALL_OW 67
// until not GetCargo ( collectors , mat_cans ) ;
3173: LD_VAR 0 9
3177: PPUSH
3178: LD_INT 1
3180: PPUSH
3181: CALL_OW 289
3185: NOT
3186: IFFALSE 3166
// drivers := MCT_ResetTag ( base , mct_collect_crates ) ;
3188: LD_ADDR_VAR 0 12
3192: PUSH
3193: LD_VAR 0 1
3197: PPUSH
3198: LD_EXP 35
3202: PPUSH
3203: CALL 4003 0 2
3207: ST_TO_ADDR
// if drivers then
3208: LD_VAR 0 12
3212: IFFALSE 3240
// for i in drivers do
3214: LD_ADDR_VAR 0 4
3218: PUSH
3219: LD_VAR 0 12
3223: PUSH
3224: FOR_IN
3225: IFFALSE 3238
// ComExit ( i ) ;
3227: LD_VAR 0 4
3231: PPUSH
3232: CALL 41839 0 1
3236: GO 3224
3238: POP
3239: POP
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3240: LD_VAR 0 1
3244: PPUSH
3245: LD_EXP 37
3249: PPUSH
3250: CALL 5417 0 2
// end ; end else
3254: GO 3376
// begin apes := UnitFilter ( mc_ape [ base ] , [ f_class , class_apeman_engineer ] ) ;
3256: LD_ADDR_VAR 0 7
3260: PUSH
3261: LD_EXP 19
3265: PUSH
3266: LD_VAR 0 1
3270: ARRAY
3271: PPUSH
3272: LD_INT 25
3274: PUSH
3275: LD_INT 16
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PPUSH
3282: CALL_OW 72
3286: ST_TO_ADDR
// if apes then
3287: LD_VAR 0 7
3291: IFFALSE 3309
// collectors := collectors union apes ;
3293: LD_ADDR_VAR 0 9
3297: PUSH
3298: LD_VAR 0 9
3302: PUSH
3303: LD_VAR 0 7
3307: UNION
3308: ST_TO_ADDR
// engs := UnitFilter ( mc_people [ base ] , [ f_class , class_engineer ] ) ;
3309: LD_ADDR_VAR 0 8
3313: PUSH
3314: LD_EXP 9
3318: PUSH
3319: LD_VAR 0 1
3323: ARRAY
3324: PPUSH
3325: LD_INT 25
3327: PUSH
3328: LD_INT 2
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 72
3339: ST_TO_ADDR
// if engs then
3340: LD_VAR 0 8
3344: IFFALSE 3362
// collectors := collectors union engs ;
3346: LD_ADDR_VAR 0 9
3350: PUSH
3351: LD_VAR 0 9
3355: PUSH
3356: LD_VAR 0 8
3360: UNION
3361: ST_TO_ADDR
// MCTM_DeleteActiveTask ( base , mctm_collect_crates ) ;
3362: LD_VAR 0 1
3366: PPUSH
3367: LD_EXP 37
3371: PPUSH
3372: CALL 5417 0 2
// end ; end ; end_of_file
3376: LD_VAR 0 3
3380: RET
// export mce_start , mce_monitor_base , mce_ ; export function MCE_InitEvents ( ) ; begin
3381: LD_INT 0
3383: PPUSH
// mce_start := 1 ;
3384: LD_ADDR_EXP 1
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// mce_monitor_base := 2 ;
3392: LD_ADDR_EXP 2
3396: PUSH
3397: LD_INT 2
3399: ST_TO_ADDR
// end ;
3400: LD_VAR 0 1
3404: RET
// export function MCE_SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
3405: LD_INT 0
3407: PPUSH
// case event of mce_start :
3408: LD_VAR 0 1
3412: PUSH
3413: LD_EXP 1
3417: DOUBLE
3418: EQUAL
3419: IFTRUE 3423
3421: GO 3430
3423: POP
// MC_Monitor ( ) ; mce_monitor_base :
3424: CALL 2190 0 0
3428: GO 3453
3430: LD_EXP 2
3434: DOUBLE
3435: EQUAL
3436: IFTRUE 3440
3438: GO 3452
3440: POP
// MC_MonitorBase ( p1 ) ; end ;
3441: LD_VAR 0 2
3445: PPUSH
3446: CALL 2314 0 1
3450: GO 3453
3452: POP
// end ;
3453: LD_VAR 0 8
3457: RET
// export function MCE_ClassChanged ( unit , old_class , new_class ) ; begin
3458: LD_INT 0
3460: PPUSH
// SetTag ( unit , mct_none ) ;
3461: LD_VAR 0 1
3465: PPUSH
3466: LD_EXP 32
3470: PPUSH
3471: CALL_OW 109
// end ;
3475: LD_VAR 0 4
3479: RET
// export function MCE_UnitDestroyed ( un ) ; begin
3480: LD_INT 0
3482: PPUSH
// case GetType ( un ) of unit_human :
3483: LD_VAR 0 1
3487: PPUSH
3488: CALL_OW 247
3492: PUSH
3493: LD_INT 1
3495: DOUBLE
3496: EQUAL
3497: IFTRUE 3501
3499: GO 3513
3501: POP
// MCE_HumanKilled ( un ) ; end ;
3502: LD_VAR 0 1
3506: PPUSH
3507: CALL 3519 0 1
3511: GO 3514
3513: POP
// end ;
3514: LD_VAR 0 2
3518: RET
// export function MCE_HumanKilled ( un ) ; var i ; begin
3519: LD_INT 0
3521: PPUSH
3522: PPUSH
// for i := 1 to mc_people do
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: DOUBLE
3529: LD_INT 1
3531: DEC
3532: ST_TO_ADDR
3533: LD_EXP 9
3537: PUSH
3538: FOR_TO
3539: IFFALSE 3598
// if un in mc_people [ i ] then
3541: LD_VAR 0 1
3545: PUSH
3546: LD_EXP 9
3550: PUSH
3551: LD_VAR 0 3
3555: ARRAY
3556: IN
3557: IFFALSE 3596
// mc_people := Replace ( mc_people , i , mc_people [ i ] diff un ) ;
3559: LD_ADDR_EXP 9
3563: PUSH
3564: LD_EXP 9
3568: PPUSH
3569: LD_VAR 0 3
3573: PPUSH
3574: LD_EXP 9
3578: PUSH
3579: LD_VAR 0 3
3583: ARRAY
3584: PUSH
3585: LD_VAR 0 1
3589: DIFF
3590: PPUSH
3591: CALL_OW 1
3595: ST_TO_ADDR
3596: GO 3538
3598: POP
3599: POP
// end ;
3600: LD_VAR 0 2
3604: RET
// export function MCE_EvacuateVehicle ( driver , vehicle , p1 , p2 ) ; var base ; begin
3605: LD_INT 0
3607: PPUSH
3608: PPUSH
// if GetTag ( driver ) = mct_collect_crates then
3609: LD_VAR 0 1
3613: PPUSH
3614: CALL_OW 110
3618: PUSH
3619: LD_EXP 35
3623: EQUAL
3624: IFFALSE 3673
// begin base := MC_GetHumanBase ( driver ) ;
3626: LD_ADDR_VAR 0 6
3630: PUSH
3631: LD_VAR 0 1
3635: PPUSH
3636: CALL 4276 0 1
3640: ST_TO_ADDR
// if base then
3641: LD_VAR 0 6
3645: IFFALSE 3673
// begin SetTag ( driver , 0 ) ;
3647: LD_VAR 0 1
3651: PPUSH
3652: LD_INT 0
3654: PPUSH
3655: CALL_OW 109
// MC_Retreat ( base , driver ) ;
3659: LD_VAR 0 6
3663: PPUSH
3664: LD_VAR 0 1
3668: PPUSH
3669: CALL 5215 0 2
// end ; end ; end ; end_of_file
3673: LD_VAR 0 5
3677: RET
// export mc_active , mc_debug , mc_bases , mc_tag , mc_task , mc_people , mc_buildings , mc_vehicles , mc_mines , mc_minefields , mc_build_list , mc_produce_list , mc_defense_status , mc_defender , mc_defender_limit , mc_ape , mc_tech , mc_attack , mc_deposits_xy , mc_can_tame , mc_build_upgrade , mc_lab_upgrade , mc_crates_area , mc_teleport_exit , mc_allowed_tower_weapons , mc_parking , mc_scan_area , mc_danger ; export function MC_InitVariables ( ) ; begin
3678: LD_INT 0
3680: PPUSH
// mc_bases := [ ] ;
3681: LD_ADDR_EXP 6
3685: PUSH
3686: EMPTY
3687: ST_TO_ADDR
// mc_tag := [ ] ;
3688: LD_ADDR_EXP 7
3692: PUSH
3693: EMPTY
3694: ST_TO_ADDR
// mc_task := [ ] ;
3695: LD_ADDR_EXP 8
3699: PUSH
3700: EMPTY
3701: ST_TO_ADDR
// mc_people := [ ] ;
3702: LD_ADDR_EXP 9
3706: PUSH
3707: EMPTY
3708: ST_TO_ADDR
// mc_buildings := [ ] ;
3709: LD_ADDR_EXP 10
3713: PUSH
3714: EMPTY
3715: ST_TO_ADDR
// mc_vehicles := [ ] ;
3716: LD_ADDR_EXP 11
3720: PUSH
3721: EMPTY
3722: ST_TO_ADDR
// mc_mines := [ ] ;
3723: LD_ADDR_EXP 12
3727: PUSH
3728: EMPTY
3729: ST_TO_ADDR
// mc_minefields := [ ] ;
3730: LD_ADDR_EXP 13
3734: PUSH
3735: EMPTY
3736: ST_TO_ADDR
// mc_build_list := [ ] ;
3737: LD_ADDR_EXP 14
3741: PUSH
3742: EMPTY
3743: ST_TO_ADDR
// mc_produce_list := [ ] ;
3744: LD_ADDR_EXP 15
3748: PUSH
3749: EMPTY
3750: ST_TO_ADDR
// mc_defense_status := [ ] ;
3751: LD_ADDR_EXP 16
3755: PUSH
3756: EMPTY
3757: ST_TO_ADDR
// mc_defender := [ ] ;
3758: LD_ADDR_EXP 17
3762: PUSH
3763: EMPTY
3764: ST_TO_ADDR
// mc_defender_limit := [ ] ;
3765: LD_ADDR_EXP 18
3769: PUSH
3770: EMPTY
3771: ST_TO_ADDR
// mc_ape := [ ] ;
3772: LD_ADDR_EXP 19
3776: PUSH
3777: EMPTY
3778: ST_TO_ADDR
// mc_tech := [ ] ;
3779: LD_ADDR_EXP 20
3783: PUSH
3784: EMPTY
3785: ST_TO_ADDR
// mc_attack := [ ] ;
3786: LD_ADDR_EXP 21
3790: PUSH
3791: EMPTY
3792: ST_TO_ADDR
// mc_deposits_xy := [ ] ;
3793: LD_ADDR_EXP 22
3797: PUSH
3798: EMPTY
3799: ST_TO_ADDR
// mc_can_tame := [ ] ;
3800: LD_ADDR_EXP 23
3804: PUSH
3805: EMPTY
3806: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
3807: LD_ADDR_EXP 24
3811: PUSH
3812: EMPTY
3813: ST_TO_ADDR
// mc_crates_area := [ ] ;
3814: LD_ADDR_EXP 26
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// mc_teleport_exit := [ ] ;
3821: LD_ADDR_EXP 27
3825: PUSH
3826: EMPTY
3827: ST_TO_ADDR
// mc_allowed_tower_weapons := [ ] ;
3828: LD_ADDR_EXP 28
3832: PUSH
3833: EMPTY
3834: ST_TO_ADDR
// mc_parking := [ ] ;
3835: LD_ADDR_EXP 29
3839: PUSH
3840: EMPTY
3841: ST_TO_ADDR
// mc_scan_area := [ ] ;
3842: LD_ADDR_EXP 30
3846: PUSH
3847: EMPTY
3848: ST_TO_ADDR
// mc_danger := [ ] ;
3849: LD_ADDR_EXP 31
3853: PUSH
3854: EMPTY
3855: ST_TO_ADDR
// end ; end_of_file
3856: LD_VAR 0 1
3860: RET
// export mct_none , mct_change_class , mct_build , mct_collect_crates , mct_heal ; export function MCT_InitTags ; begin
3861: LD_INT 0
3863: PPUSH
// mct_none := 0 ;
3864: LD_ADDR_EXP 32
3868: PUSH
3869: LD_INT 0
3871: ST_TO_ADDR
// mct_change_class := 1 ;
3872: LD_ADDR_EXP 33
3876: PUSH
3877: LD_INT 1
3879: ST_TO_ADDR
// mct_build := 2 ;
3880: LD_ADDR_EXP 34
3884: PUSH
3885: LD_INT 2
3887: ST_TO_ADDR
// mct_collect_crates := 3 ;
3888: LD_ADDR_EXP 35
3892: PUSH
3893: LD_INT 3
3895: ST_TO_ADDR
// mct_heal := 4 ;
3896: LD_ADDR_EXP 36
3900: PUSH
3901: LD_INT 4
3903: ST_TO_ADDR
// end ;
3904: LD_VAR 0 1
3908: RET
// export function MCT_GetByTag ( base , tag ) ; var i ; begin
3909: LD_INT 0
3911: PPUSH
3912: PPUSH
// result := [ ] ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: EMPTY
3919: ST_TO_ADDR
// if not base then
3920: LD_VAR 0 1
3924: NOT
3925: IFFALSE 3929
// exit ;
3927: GO 3998
// for i in mc_people [ base ] do
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_EXP 9
3938: PUSH
3939: LD_VAR 0 1
3943: ARRAY
3944: PUSH
3945: FOR_IN
3946: IFFALSE 3996
// if GetTag ( i ) = tag then
3948: LD_VAR 0 4
3952: PPUSH
3953: CALL_OW 110
3957: PUSH
3958: LD_VAR 0 2
3962: EQUAL
3963: IFFALSE 3994
// result := Replace ( result , result + 1 , i ) ;
3965: LD_ADDR_VAR 0 3
3969: PUSH
3970: LD_VAR 0 3
3974: PPUSH
3975: LD_VAR 0 3
3979: PUSH
3980: LD_INT 1
3982: PLUS
3983: PPUSH
3984: LD_VAR 0 4
3988: PPUSH
3989: CALL_OW 1
3993: ST_TO_ADDR
3994: GO 3945
3996: POP
3997: POP
// end ;
3998: LD_VAR 0 3
4002: RET
// export function MCT_ResetTag ( base , tag ) ; var i ; begin
4003: LD_INT 0
4005: PPUSH
4006: PPUSH
// result := MCT_GetByTag ( base , tag ) ;
4007: LD_ADDR_VAR 0 3
4011: PUSH
4012: LD_VAR 0 1
4016: PPUSH
4017: LD_VAR 0 2
4021: PPUSH
4022: CALL 3909 0 2
4026: ST_TO_ADDR
// if result then
4027: LD_VAR 0 3
4031: IFFALSE 4064
// for i in result do
4033: LD_ADDR_VAR 0 4
4037: PUSH
4038: LD_VAR 0 3
4042: PUSH
4043: FOR_IN
4044: IFFALSE 4062
// SetTag ( i , mct_none ) ;
4046: LD_VAR 0 4
4050: PPUSH
4051: LD_EXP 32
4055: PPUSH
4056: CALL_OW 109
4060: GO 4043
4062: POP
4063: POP
// end ; end_of_file
4064: LD_VAR 0 3
4068: RET
// export function MC_Exist ( base ) ; begin
4069: LD_INT 0
4071: PPUSH
// result := mc_bases >= base and mc_bases [ base ] > 0 ;
4072: LD_ADDR_VAR 0 2
4076: PUSH
4077: LD_EXP 6
4081: PUSH
4082: LD_VAR 0 1
4086: GREATEREQUAL
4087: PUSH
4088: LD_EXP 6
4092: PUSH
4093: LD_VAR 0 1
4097: ARRAY
4098: PUSH
4099: LD_INT 0
4101: GREATER
4102: AND
4103: ST_TO_ADDR
// end ;
4104: LD_VAR 0 2
4108: RET
// export function MC_GetBestForClass ( base , class , amount ) ; var i , units ; begin
4109: LD_INT 0
4111: PPUSH
4112: PPUSH
4113: PPUSH
// result := [ ] ;
4114: LD_ADDR_VAR 0 4
4118: PUSH
4119: EMPTY
4120: ST_TO_ADDR
// units := SortBySkill ( UnitFilter ( mc_people [ base ] , [ f_not , [ f_class , class ] ] ) , class ) ;
4121: LD_ADDR_VAR 0 6
4125: PUSH
4126: LD_EXP 9
4130: PUSH
4131: LD_VAR 0 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 3
4139: PUSH
4140: LD_INT 25
4142: PUSH
4143: LD_VAR 0 2
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PPUSH
4156: CALL_OW 72
4160: PPUSH
4161: LD_VAR 0 2
4165: PPUSH
4166: CALL 39957 0 2
4170: ST_TO_ADDR
// if not units then
4171: LD_VAR 0 6
4175: NOT
4176: IFFALSE 4180
// exit ;
4178: GO 4271
// for i := 1 to amount do
4180: LD_ADDR_VAR 0 5
4184: PUSH
4185: DOUBLE
4186: LD_INT 1
4188: DEC
4189: ST_TO_ADDR
4190: LD_VAR 0 3
4194: PUSH
4195: FOR_TO
4196: IFFALSE 4269
// begin if i > units then
4198: LD_VAR 0 5
4202: PUSH
4203: LD_VAR 0 6
4207: GREATER
4208: IFFALSE 4214
// exit ;
4210: POP
4211: POP
4212: GO 4271
// if not GetTag ( units [ i ] ) then
4214: LD_VAR 0 6
4218: PUSH
4219: LD_VAR 0 5
4223: ARRAY
4224: PPUSH
4225: CALL_OW 110
4229: NOT
4230: IFFALSE 4267
// result := Replace ( result , result + 1 , units [ i ] ) ;
4232: LD_ADDR_VAR 0 4
4236: PUSH
4237: LD_VAR 0 4
4241: PPUSH
4242: LD_VAR 0 4
4246: PUSH
4247: LD_INT 1
4249: PLUS
4250: PPUSH
4251: LD_VAR 0 6
4255: PUSH
4256: LD_VAR 0 5
4260: ARRAY
4261: PPUSH
4262: CALL_OW 1
4266: ST_TO_ADDR
// end ;
4267: GO 4195
4269: POP
4270: POP
// end ;
4271: LD_VAR 0 4
4275: RET
// export function MC_GetHumanBase ( human ) ; var i ; begin
4276: LD_INT 0
4278: PPUSH
4279: PPUSH
// for i := 1 to mc_people do
4280: LD_ADDR_VAR 0 3
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_EXP 9
4294: PUSH
4295: FOR_TO
4296: IFFALSE 4332
// if human in mc_people [ i ] then
4298: LD_VAR 0 1
4302: PUSH
4303: LD_EXP 9
4307: PUSH
4308: LD_VAR 0 3
4312: ARRAY
4313: IN
4314: IFFALSE 4330
// begin result := i ;
4316: LD_ADDR_VAR 0 2
4320: PUSH
4321: LD_VAR 0 3
4325: ST_TO_ADDR
// exit ;
4326: POP
4327: POP
4328: GO 4334
// end ;
4330: GO 4295
4332: POP
4333: POP
// end ;
4334: LD_VAR 0 2
4338: RET
// export function MC_ChangeClass ( base , class , units ) ; var i , buildings , b ; begin
4339: LD_INT 0
4341: PPUSH
4342: PPUSH
4343: PPUSH
4344: PPUSH
// if not base or not units then
4345: LD_VAR 0 1
4349: NOT
4350: PUSH
4351: LD_VAR 0 3
4355: NOT
4356: OR
4357: IFFALSE 4361
// exit ;
4359: GO 4817
// case class of 1 , 5 , 6 , 7 , 8 :
4361: LD_VAR 0 2
4365: PUSH
4366: LD_INT 1
4368: DOUBLE
4369: EQUAL
4370: IFTRUE 4398
4372: LD_INT 5
4374: DOUBLE
4375: EQUAL
4376: IFTRUE 4398
4378: LD_INT 6
4380: DOUBLE
4381: EQUAL
4382: IFTRUE 4398
4384: LD_INT 7
4386: DOUBLE
4387: EQUAL
4388: IFTRUE 4398
4390: LD_INT 8
4392: DOUBLE
4393: EQUAL
4394: IFTRUE 4398
4396: GO 4450
4398: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
4399: LD_ADDR_VAR 0 6
4403: PUSH
4404: LD_EXP 10
4408: PUSH
4409: LD_VAR 0 1
4413: ARRAY
4414: PPUSH
4415: LD_INT 2
4417: PUSH
4418: LD_INT 30
4420: PUSH
4421: LD_INT 4
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 30
4430: PUSH
4431: LD_INT 5
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: PPUSH
4443: CALL_OW 72
4447: ST_TO_ADDR
4448: GO 4642
4450: LD_INT 2
4452: DOUBLE
4453: EQUAL
4454: IFTRUE 4458
4456: GO 4510
4458: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
4459: LD_ADDR_VAR 0 6
4463: PUSH
4464: LD_EXP 10
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 2
4477: PUSH
4478: LD_INT 30
4480: PUSH
4481: LD_INT 0
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: LD_INT 30
4490: PUSH
4491: LD_INT 1
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: PPUSH
4503: CALL_OW 72
4507: ST_TO_ADDR
4508: GO 4642
4510: LD_INT 3
4512: DOUBLE
4513: EQUAL
4514: IFTRUE 4518
4516: GO 4570
4518: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
4519: LD_ADDR_VAR 0 6
4523: PUSH
4524: LD_EXP 10
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 2
4537: PUSH
4538: LD_INT 30
4540: PUSH
4541: LD_INT 2
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 30
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: LIST
4562: PPUSH
4563: CALL_OW 72
4567: ST_TO_ADDR
4568: GO 4642
4570: LD_INT 4
4572: DOUBLE
4573: EQUAL
4574: IFTRUE 4578
4576: GO 4641
4578: POP
// buildings := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
4579: LD_ADDR_VAR 0 6
4583: PUSH
4584: LD_EXP 10
4588: PUSH
4589: LD_VAR 0 1
4593: ARRAY
4594: PPUSH
4595: LD_INT 2
4597: PUSH
4598: LD_INT 30
4600: PUSH
4601: LD_INT 6
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 30
4610: PUSH
4611: LD_INT 7
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 30
4620: PUSH
4621: LD_INT 8
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PPUSH
4634: CALL_OW 72
4638: ST_TO_ADDR
4639: GO 4642
4641: POP
// if not buildings then
4642: LD_VAR 0 6
4646: NOT
4647: IFFALSE 4651
// exit ;
4649: GO 4817
// for i := 1 to units do
4651: LD_ADDR_VAR 0 5
4655: PUSH
4656: DOUBLE
4657: LD_INT 1
4659: DEC
4660: ST_TO_ADDR
4661: LD_VAR 0 3
4665: PUSH
4666: FOR_TO
4667: IFFALSE 4815
// begin SetTag ( units [ i ] , mct_change_class ) ;
4669: LD_VAR 0 3
4673: PUSH
4674: LD_VAR 0 5
4678: ARRAY
4679: PPUSH
4680: LD_EXP 33
4684: PPUSH
4685: CALL_OW 109
// if buildings > i div 6 then
4689: LD_VAR 0 6
4693: PUSH
4694: LD_VAR 0 5
4698: PUSH
4699: LD_INT 6
4701: DIV
4702: GREATER
4703: IFFALSE 4727
// b := buildings [ i div 6 ] else
4705: LD_ADDR_VAR 0 7
4709: PUSH
4710: LD_VAR 0 6
4714: PUSH
4715: LD_VAR 0 5
4719: PUSH
4720: LD_INT 6
4722: DIV
4723: ARRAY
4724: ST_TO_ADDR
4725: GO 4741
// b := buildings [ 1 ] ;
4727: LD_ADDR_VAR 0 7
4731: PUSH
4732: LD_VAR 0 6
4736: PUSH
4737: LD_INT 1
4739: ARRAY
4740: ST_TO_ADDR
// if IsInUnit ( units [ i ] ) then
4741: LD_VAR 0 3
4745: PUSH
4746: LD_VAR 0 5
4750: ARRAY
4751: PPUSH
4752: CALL_OW 310
4756: IFFALSE 4773
// ComExit ( units [ i ] ) ;
4758: LD_VAR 0 3
4762: PUSH
4763: LD_VAR 0 5
4767: ARRAY
4768: PPUSH
4769: CALL 41839 0 1
// AddComEnterUnit ( units [ i ] , b ) ;
4773: LD_VAR 0 3
4777: PUSH
4778: LD_VAR 0 5
4782: ARRAY
4783: PPUSH
4784: LD_VAR 0 7
4788: PPUSH
4789: CALL_OW 180
// AddComChangeProfession ( units [ i ] , class ) ;
4793: LD_VAR 0 3
4797: PUSH
4798: LD_VAR 0 5
4802: ARRAY
4803: PPUSH
4804: LD_VAR 0 2
4808: PPUSH
4809: CALL_OW 183
// end ;
4813: GO 4666
4815: POP
4816: POP
// end ;
4817: LD_VAR 0 4
4821: RET
// export function MC_GetByClass ( base , class ) ; begin
4822: LD_INT 0
4824: PPUSH
// result := UnitFilter ( mc_people [ base ] , [ f_class , class ] ) ;
4825: LD_ADDR_VAR 0 3
4829: PUSH
4830: LD_EXP 9
4834: PUSH
4835: LD_VAR 0 1
4839: ARRAY
4840: PPUSH
4841: LD_INT 25
4843: PUSH
4844: LD_VAR 0 2
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PPUSH
4853: CALL_OW 72
4857: ST_TO_ADDR
// end ;
4858: LD_VAR 0 3
4862: RET
// export function MC_GetOneByClass ( base , class ) ; begin
4863: LD_INT 0
4865: PPUSH
// result := MC_GetByClass ( base , class ) ;
4866: LD_ADDR_VAR 0 3
4870: PUSH
4871: LD_VAR 0 1
4875: PPUSH
4876: LD_VAR 0 2
4880: PPUSH
4881: CALL 4822 0 2
4885: ST_TO_ADDR
// if result then
4886: LD_VAR 0 3
4890: IFFALSE 4906
// result := result [ 1 ] ;
4892: LD_ADDR_VAR 0 3
4896: PUSH
4897: LD_VAR 0 3
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: ST_TO_ADDR
// end ;
4906: LD_VAR 0 3
4910: RET
// export function MC_GetBuilding ( base , btype ) ; begin
4911: LD_INT 0
4913: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_btype , btype ] ) ;
4914: LD_ADDR_VAR 0 3
4918: PUSH
4919: LD_EXP 10
4923: PUSH
4924: LD_VAR 0 1
4928: ARRAY
4929: PPUSH
4930: LD_INT 30
4932: PUSH
4933: LD_VAR 0 2
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PPUSH
4942: CALL_OW 72
4946: ST_TO_ADDR
// end ;
4947: LD_VAR 0 3
4951: RET
// export function MC_GetDepot ( base ) ; begin
4952: LD_INT 0
4954: PPUSH
// result := UnitFilter ( mc_buildings [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
4955: LD_ADDR_VAR 0 2
4959: PUSH
4960: LD_EXP 10
4964: PUSH
4965: LD_VAR 0 1
4969: ARRAY
4970: PPUSH
4971: LD_INT 2
4973: PUSH
4974: LD_INT 30
4976: PUSH
4977: LD_INT 0
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: LD_INT 30
4986: PUSH
4987: LD_INT 1
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: LIST
4998: PPUSH
4999: CALL_OW 72
5003: ST_TO_ADDR
// end ;
5004: LD_VAR 0 2
5008: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
5009: LD_INT 0
5011: PPUSH
// result := mc_vehicles [ base ] ;
5012: LD_ADDR_VAR 0 3
5016: PUSH
5017: LD_EXP 11
5021: PUSH
5022: LD_VAR 0 1
5026: ARRAY
5027: ST_TO_ADDR
// if onlyCombat then
5028: LD_VAR 0 2
5032: IFFALSE 5210
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
5034: LD_ADDR_VAR 0 3
5038: PUSH
5039: LD_VAR 0 3
5043: PUSH
5044: LD_VAR 0 3
5048: PPUSH
5049: LD_INT 2
5051: PUSH
5052: LD_INT 34
5054: PUSH
5055: LD_INT 12
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PUSH
5062: LD_INT 34
5064: PUSH
5065: LD_INT 51
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 34
5074: PUSH
5075: LD_EXP 39
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: LD_INT 34
5086: PUSH
5087: LD_INT 32
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 34
5096: PUSH
5097: LD_INT 13
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 34
5106: PUSH
5107: LD_INT 52
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: LD_INT 34
5116: PUSH
5117: LD_EXP 44
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: PUSH
5126: LD_INT 34
5128: PUSH
5129: LD_INT 14
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: PUSH
5136: LD_INT 34
5138: PUSH
5139: LD_INT 53
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 34
5148: PUSH
5149: LD_EXP 38
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: LD_INT 34
5160: PUSH
5161: LD_INT 31
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PUSH
5168: LD_INT 34
5170: PUSH
5171: LD_INT 48
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: PUSH
5178: LD_INT 34
5180: PUSH
5181: LD_INT 8
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 72
5208: DIFF
5209: ST_TO_ADDR
// end ;
5210: LD_VAR 0 3
5214: RET
// export function MC_Retreat ( base , unit ) ; var depot ; begin
5215: LD_INT 0
5217: PPUSH
5218: PPUSH
// if not base or not unit then
5219: LD_VAR 0 1
5223: NOT
5224: PUSH
5225: LD_VAR 0 2
5229: NOT
5230: OR
5231: IFFALSE 5235
// exit ;
5233: GO 5302
// depot := NearestUnitToUnit ( MC_GetDepot ( base ) , unit ) ;
5235: LD_ADDR_VAR 0 4
5239: PUSH
5240: LD_VAR 0 1
5244: PPUSH
5245: CALL 4952 0 1
5249: PPUSH
5250: LD_VAR 0 2
5254: PPUSH
5255: CALL_OW 74
5259: ST_TO_ADDR
// if depot then
5260: LD_VAR 0 4
5264: IFFALSE 5282
// ComStandNearbyBuilding ( unit , depot ) else
5266: LD_VAR 0 2
5270: PPUSH
5271: LD_VAR 0 4
5275: PPUSH
5276: CALL 7022 0 2
5280: GO 5302
// ComMoveToArea ( unit , mc_scan_area [ base ] ) ;
5282: LD_VAR 0 2
5286: PPUSH
5287: LD_EXP 30
5291: PUSH
5292: LD_VAR 0 1
5296: ARRAY
5297: PPUSH
5298: CALL_OW 113
// end ; end_of_file
5302: LD_VAR 0 3
5306: RET
// export mctm_collect_crates ; export function MCTM_InitTaskManager ( ) ; begin
5307: LD_INT 0
5309: PPUSH
// mctm_collect_crates := 1 ;
5310: LD_ADDR_EXP 37
5314: PUSH
5315: LD_INT 1
5317: ST_TO_ADDR
// end ;
5318: LD_VAR 0 1
5322: RET
// export function MCTM_HasActiveTask ( base , task ) ; begin
5323: LD_INT 0
5325: PPUSH
// result := task in mc_task [ base ] ;
5326: LD_ADDR_VAR 0 3
5330: PUSH
5331: LD_VAR 0 2
5335: PUSH
5336: LD_EXP 8
5340: PUSH
5341: LD_VAR 0 1
5345: ARRAY
5346: IN
5347: ST_TO_ADDR
// end ;
5348: LD_VAR 0 3
5352: RET
// export function MCTM_SetActiveTask ( base , task ) ; begin
5353: LD_INT 0
5355: PPUSH
// mc_task := Replace ( mc_task , base , Replace ( mc_task [ base ] , mc_task [ base ] + 1 , task ) ) ;
5356: LD_ADDR_EXP 8
5360: PUSH
5361: LD_EXP 8
5365: PPUSH
5366: LD_VAR 0 1
5370: PPUSH
5371: LD_EXP 8
5375: PUSH
5376: LD_VAR 0 1
5380: ARRAY
5381: PPUSH
5382: LD_EXP 8
5386: PUSH
5387: LD_VAR 0 1
5391: ARRAY
5392: PUSH
5393: LD_INT 1
5395: PLUS
5396: PPUSH
5397: LD_VAR 0 2
5401: PPUSH
5402: CALL_OW 1
5406: PPUSH
5407: CALL_OW 1
5411: ST_TO_ADDR
// end ;
5412: LD_VAR 0 3
5416: RET
// export function MCTM_DeleteActiveTask ( base , task ) ; begin
5417: LD_INT 0
5419: PPUSH
// mc_task := Replace ( mc_task , base , mc_task [ base ] diff task ) ;
5420: LD_ADDR_EXP 8
5424: PUSH
5425: LD_EXP 8
5429: PPUSH
5430: LD_VAR 0 1
5434: PPUSH
5435: LD_EXP 8
5439: PUSH
5440: LD_VAR 0 1
5444: ARRAY
5445: PUSH
5446: LD_VAR 0 2
5450: DIFF
5451: PPUSH
5452: CALL_OW 1
5456: ST_TO_ADDR
// end ; end_of_file
5457: LD_VAR 0 3
5461: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
5462: LD_INT 0
5464: PPUSH
5465: PPUSH
// if exist_mode then
5466: LD_VAR 0 2
5470: IFFALSE 5495
// unit := CreateCharacter ( prefix & ident ) else
5472: LD_ADDR_VAR 0 5
5476: PUSH
5477: LD_VAR 0 3
5481: PUSH
5482: LD_VAR 0 1
5486: STR
5487: PPUSH
5488: CALL_OW 34
5492: ST_TO_ADDR
5493: GO 5510
// unit := NewCharacter ( ident ) ;
5495: LD_ADDR_VAR 0 5
5499: PUSH
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 25
5509: ST_TO_ADDR
// result := unit ;
5510: LD_ADDR_VAR 0 4
5514: PUSH
5515: LD_VAR 0 5
5519: ST_TO_ADDR
// end ;
5520: LD_VAR 0 4
5524: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
5525: LD_INT 0
5527: PPUSH
5528: PPUSH
// if not side or not nation then
5529: LD_VAR 0 1
5533: NOT
5534: PUSH
5535: LD_VAR 0 2
5539: NOT
5540: OR
5541: IFFALSE 5545
// exit ;
5543: GO 6309
// case nation of nation_american :
5545: LD_VAR 0 2
5549: PUSH
5550: LD_INT 1
5552: DOUBLE
5553: EQUAL
5554: IFTRUE 5558
5556: GO 5772
5558: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
5559: LD_ADDR_VAR 0 4
5563: PUSH
5564: LD_INT 35
5566: PUSH
5567: LD_INT 45
5569: PUSH
5570: LD_INT 46
5572: PUSH
5573: LD_INT 47
5575: PUSH
5576: LD_INT 82
5578: PUSH
5579: LD_INT 83
5581: PUSH
5582: LD_INT 84
5584: PUSH
5585: LD_INT 85
5587: PUSH
5588: LD_INT 86
5590: PUSH
5591: LD_INT 1
5593: PUSH
5594: LD_INT 2
5596: PUSH
5597: LD_INT 6
5599: PUSH
5600: LD_INT 15
5602: PUSH
5603: LD_INT 16
5605: PUSH
5606: LD_INT 7
5608: PUSH
5609: LD_INT 12
5611: PUSH
5612: LD_INT 13
5614: PUSH
5615: LD_INT 10
5617: PUSH
5618: LD_INT 14
5620: PUSH
5621: LD_INT 20
5623: PUSH
5624: LD_INT 21
5626: PUSH
5627: LD_INT 22
5629: PUSH
5630: LD_INT 25
5632: PUSH
5633: LD_INT 32
5635: PUSH
5636: LD_INT 27
5638: PUSH
5639: LD_INT 36
5641: PUSH
5642: LD_INT 69
5644: PUSH
5645: LD_INT 39
5647: PUSH
5648: LD_INT 34
5650: PUSH
5651: LD_INT 40
5653: PUSH
5654: LD_INT 48
5656: PUSH
5657: LD_INT 49
5659: PUSH
5660: LD_INT 50
5662: PUSH
5663: LD_INT 51
5665: PUSH
5666: LD_INT 52
5668: PUSH
5669: LD_INT 53
5671: PUSH
5672: LD_INT 54
5674: PUSH
5675: LD_INT 55
5677: PUSH
5678: LD_INT 56
5680: PUSH
5681: LD_INT 57
5683: PUSH
5684: LD_INT 58
5686: PUSH
5687: LD_INT 59
5689: PUSH
5690: LD_INT 60
5692: PUSH
5693: LD_INT 61
5695: PUSH
5696: LD_INT 62
5698: PUSH
5699: LD_INT 80
5701: PUSH
5702: LD_INT 82
5704: PUSH
5705: LD_INT 83
5707: PUSH
5708: LD_INT 84
5710: PUSH
5711: LD_INT 85
5713: PUSH
5714: LD_INT 86
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: ST_TO_ADDR
5770: GO 6233
5772: LD_INT 2
5774: DOUBLE
5775: EQUAL
5776: IFTRUE 5780
5778: GO 6002
5780: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
5781: LD_ADDR_VAR 0 4
5785: PUSH
5786: LD_INT 35
5788: PUSH
5789: LD_INT 45
5791: PUSH
5792: LD_INT 46
5794: PUSH
5795: LD_INT 47
5797: PUSH
5798: LD_INT 82
5800: PUSH
5801: LD_INT 83
5803: PUSH
5804: LD_INT 84
5806: PUSH
5807: LD_INT 85
5809: PUSH
5810: LD_INT 87
5812: PUSH
5813: LD_INT 70
5815: PUSH
5816: LD_INT 1
5818: PUSH
5819: LD_INT 11
5821: PUSH
5822: LD_INT 3
5824: PUSH
5825: LD_INT 4
5827: PUSH
5828: LD_INT 5
5830: PUSH
5831: LD_INT 6
5833: PUSH
5834: LD_INT 15
5836: PUSH
5837: LD_INT 18
5839: PUSH
5840: LD_INT 7
5842: PUSH
5843: LD_INT 17
5845: PUSH
5846: LD_INT 8
5848: PUSH
5849: LD_INT 20
5851: PUSH
5852: LD_INT 21
5854: PUSH
5855: LD_INT 22
5857: PUSH
5858: LD_INT 72
5860: PUSH
5861: LD_INT 26
5863: PUSH
5864: LD_INT 69
5866: PUSH
5867: LD_INT 39
5869: PUSH
5870: LD_INT 40
5872: PUSH
5873: LD_INT 41
5875: PUSH
5876: LD_INT 42
5878: PUSH
5879: LD_INT 43
5881: PUSH
5882: LD_INT 48
5884: PUSH
5885: LD_INT 49
5887: PUSH
5888: LD_INT 50
5890: PUSH
5891: LD_INT 51
5893: PUSH
5894: LD_INT 52
5896: PUSH
5897: LD_INT 53
5899: PUSH
5900: LD_INT 54
5902: PUSH
5903: LD_INT 55
5905: PUSH
5906: LD_INT 56
5908: PUSH
5909: LD_INT 60
5911: PUSH
5912: LD_INT 61
5914: PUSH
5915: LD_INT 62
5917: PUSH
5918: LD_INT 66
5920: PUSH
5921: LD_INT 67
5923: PUSH
5924: LD_INT 68
5926: PUSH
5927: LD_INT 81
5929: PUSH
5930: LD_INT 82
5932: PUSH
5933: LD_INT 83
5935: PUSH
5936: LD_INT 84
5938: PUSH
5939: LD_INT 85
5941: PUSH
5942: LD_INT 87
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: ST_TO_ADDR
6000: GO 6233
6002: LD_INT 3
6004: DOUBLE
6005: EQUAL
6006: IFTRUE 6010
6008: GO 6232
6010: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
6011: LD_ADDR_VAR 0 4
6015: PUSH
6016: LD_INT 46
6018: PUSH
6019: LD_INT 47
6021: PUSH
6022: LD_INT 1
6024: PUSH
6025: LD_INT 2
6027: PUSH
6028: LD_INT 82
6030: PUSH
6031: LD_INT 83
6033: PUSH
6034: LD_INT 84
6036: PUSH
6037: LD_INT 85
6039: PUSH
6040: LD_INT 86
6042: PUSH
6043: LD_INT 11
6045: PUSH
6046: LD_INT 9
6048: PUSH
6049: LD_INT 20
6051: PUSH
6052: LD_INT 19
6054: PUSH
6055: LD_INT 21
6057: PUSH
6058: LD_INT 24
6060: PUSH
6061: LD_INT 22
6063: PUSH
6064: LD_INT 25
6066: PUSH
6067: LD_INT 28
6069: PUSH
6070: LD_INT 29
6072: PUSH
6073: LD_INT 30
6075: PUSH
6076: LD_INT 31
6078: PUSH
6079: LD_INT 37
6081: PUSH
6082: LD_INT 38
6084: PUSH
6085: LD_INT 32
6087: PUSH
6088: LD_INT 27
6090: PUSH
6091: LD_INT 33
6093: PUSH
6094: LD_INT 69
6096: PUSH
6097: LD_INT 39
6099: PUSH
6100: LD_INT 34
6102: PUSH
6103: LD_INT 40
6105: PUSH
6106: LD_INT 71
6108: PUSH
6109: LD_INT 23
6111: PUSH
6112: LD_INT 44
6114: PUSH
6115: LD_INT 48
6117: PUSH
6118: LD_INT 49
6120: PUSH
6121: LD_INT 50
6123: PUSH
6124: LD_INT 51
6126: PUSH
6127: LD_INT 52
6129: PUSH
6130: LD_INT 53
6132: PUSH
6133: LD_INT 54
6135: PUSH
6136: LD_INT 55
6138: PUSH
6139: LD_INT 56
6141: PUSH
6142: LD_INT 57
6144: PUSH
6145: LD_INT 58
6147: PUSH
6148: LD_INT 59
6150: PUSH
6151: LD_INT 63
6153: PUSH
6154: LD_INT 64
6156: PUSH
6157: LD_INT 65
6159: PUSH
6160: LD_INT 82
6162: PUSH
6163: LD_INT 83
6165: PUSH
6166: LD_INT 84
6168: PUSH
6169: LD_INT 85
6171: PUSH
6172: LD_INT 86
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: ST_TO_ADDR
6230: GO 6233
6232: POP
// if state > - 1 and state < 3 then
6233: LD_VAR 0 3
6237: PUSH
6238: LD_INT 1
6240: NEG
6241: GREATER
6242: PUSH
6243: LD_VAR 0 3
6247: PUSH
6248: LD_INT 3
6250: LESS
6251: AND
6252: IFFALSE 6309
// for i in result do
6254: LD_ADDR_VAR 0 5
6258: PUSH
6259: LD_VAR 0 4
6263: PUSH
6264: FOR_IN
6265: IFFALSE 6307
// if GetTech ( i , side ) <> state then
6267: LD_VAR 0 5
6271: PPUSH
6272: LD_VAR 0 1
6276: PPUSH
6277: CALL_OW 321
6281: PUSH
6282: LD_VAR 0 3
6286: NONEQUAL
6287: IFFALSE 6305
// result := result diff i ;
6289: LD_ADDR_VAR 0 4
6293: PUSH
6294: LD_VAR 0 4
6298: PUSH
6299: LD_VAR 0 5
6303: DIFF
6304: ST_TO_ADDR
6305: GO 6264
6307: POP
6308: POP
// end ;
6309: LD_VAR 0 4
6313: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
6314: LD_INT 0
6316: PPUSH
6317: PPUSH
6318: PPUSH
// result := true ;
6319: LD_ADDR_VAR 0 3
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
6327: LD_ADDR_VAR 0 5
6331: PUSH
6332: LD_VAR 0 2
6336: PPUSH
6337: CALL_OW 480
6341: ST_TO_ADDR
// if not tmp then
6342: LD_VAR 0 5
6346: NOT
6347: IFFALSE 6351
// exit ;
6349: GO 6400
// for i in tmp do
6351: LD_ADDR_VAR 0 4
6355: PUSH
6356: LD_VAR 0 5
6360: PUSH
6361: FOR_IN
6362: IFFALSE 6398
// if GetTech ( i , side ) <> state_researched then
6364: LD_VAR 0 4
6368: PPUSH
6369: LD_VAR 0 1
6373: PPUSH
6374: CALL_OW 321
6378: PUSH
6379: LD_INT 2
6381: NONEQUAL
6382: IFFALSE 6396
// begin result := false ;
6384: LD_ADDR_VAR 0 3
6388: PUSH
6389: LD_INT 0
6391: ST_TO_ADDR
// exit ;
6392: POP
6393: POP
6394: GO 6400
// end ;
6396: GO 6361
6398: POP
6399: POP
// end ;
6400: LD_VAR 0 3
6404: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
6405: LD_INT 0
6407: PPUSH
6408: PPUSH
6409: PPUSH
6410: PPUSH
6411: PPUSH
6412: PPUSH
6413: PPUSH
6414: PPUSH
6415: PPUSH
6416: PPUSH
6417: PPUSH
6418: PPUSH
6419: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
6420: LD_VAR 0 1
6424: NOT
6425: PUSH
6426: LD_VAR 0 1
6430: PPUSH
6431: CALL_OW 257
6435: PUSH
6436: LD_INT 9
6438: NONEQUAL
6439: OR
6440: IFFALSE 6444
// exit ;
6442: GO 7017
// side := GetSide ( unit ) ;
6444: LD_ADDR_VAR 0 9
6448: PUSH
6449: LD_VAR 0 1
6453: PPUSH
6454: CALL_OW 255
6458: ST_TO_ADDR
// tech_space := tech_spacanom ;
6459: LD_ADDR_VAR 0 12
6463: PUSH
6464: LD_INT 29
6466: ST_TO_ADDR
// tech_time := tech_taurad ;
6467: LD_ADDR_VAR 0 13
6471: PUSH
6472: LD_INT 28
6474: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
6475: LD_ADDR_VAR 0 11
6479: PUSH
6480: LD_VAR 0 1
6484: PPUSH
6485: CALL_OW 310
6489: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
6490: LD_VAR 0 11
6494: PPUSH
6495: CALL_OW 247
6499: PUSH
6500: LD_INT 2
6502: EQUAL
6503: IFFALSE 6507
// exit ;
6505: GO 7017
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6507: LD_ADDR_VAR 0 8
6511: PUSH
6512: LD_INT 81
6514: PUSH
6515: LD_VAR 0 9
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 3
6526: PUSH
6527: LD_INT 21
6529: PUSH
6530: LD_INT 3
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PPUSH
6545: CALL_OW 69
6549: ST_TO_ADDR
// if not tmp then
6550: LD_VAR 0 8
6554: NOT
6555: IFFALSE 6559
// exit ;
6557: GO 7017
// if in_unit then
6559: LD_VAR 0 11
6563: IFFALSE 6587
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
6565: LD_ADDR_VAR 0 10
6569: PUSH
6570: LD_VAR 0 8
6574: PPUSH
6575: LD_VAR 0 11
6579: PPUSH
6580: CALL_OW 74
6584: ST_TO_ADDR
6585: GO 6607
// enemy := NearestUnitToUnit ( tmp , unit ) ;
6587: LD_ADDR_VAR 0 10
6591: PUSH
6592: LD_VAR 0 8
6596: PPUSH
6597: LD_VAR 0 1
6601: PPUSH
6602: CALL_OW 74
6606: ST_TO_ADDR
// if not enemy then
6607: LD_VAR 0 10
6611: NOT
6612: IFFALSE 6616
// exit ;
6614: GO 7017
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
6616: LD_VAR 0 11
6620: PUSH
6621: LD_VAR 0 11
6625: PPUSH
6626: LD_VAR 0 10
6630: PPUSH
6631: CALL_OW 296
6635: PUSH
6636: LD_INT 13
6638: GREATER
6639: AND
6640: PUSH
6641: LD_VAR 0 1
6645: PPUSH
6646: LD_VAR 0 10
6650: PPUSH
6651: CALL_OW 296
6655: PUSH
6656: LD_INT 12
6658: GREATER
6659: OR
6660: IFFALSE 6664
// exit ;
6662: GO 7017
// missile := [ 1 ] ;
6664: LD_ADDR_VAR 0 14
6668: PUSH
6669: LD_INT 1
6671: PUSH
6672: EMPTY
6673: LIST
6674: ST_TO_ADDR
// if Researched ( side , tech_space ) then
6675: LD_VAR 0 9
6679: PPUSH
6680: LD_VAR 0 12
6684: PPUSH
6685: CALL_OW 325
6689: IFFALSE 6718
// missile := Insert ( missile , missile + 1 , 2 ) ;
6691: LD_ADDR_VAR 0 14
6695: PUSH
6696: LD_VAR 0 14
6700: PPUSH
6701: LD_VAR 0 14
6705: PUSH
6706: LD_INT 1
6708: PLUS
6709: PPUSH
6710: LD_INT 2
6712: PPUSH
6713: CALL_OW 2
6717: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
6718: LD_VAR 0 9
6722: PPUSH
6723: LD_VAR 0 13
6727: PPUSH
6728: CALL_OW 325
6732: PUSH
6733: LD_VAR 0 10
6737: PPUSH
6738: CALL_OW 255
6742: PPUSH
6743: LD_VAR 0 13
6747: PPUSH
6748: CALL_OW 325
6752: NOT
6753: AND
6754: IFFALSE 6783
// missile := Insert ( missile , missile + 1 , 3 ) ;
6756: LD_ADDR_VAR 0 14
6760: PUSH
6761: LD_VAR 0 14
6765: PPUSH
6766: LD_VAR 0 14
6770: PUSH
6771: LD_INT 1
6773: PLUS
6774: PPUSH
6775: LD_INT 3
6777: PPUSH
6778: CALL_OW 2
6782: ST_TO_ADDR
// if missile < 2 then
6783: LD_VAR 0 14
6787: PUSH
6788: LD_INT 2
6790: LESS
6791: IFFALSE 6795
// exit ;
6793: GO 7017
// x := GetX ( enemy ) ;
6795: LD_ADDR_VAR 0 4
6799: PUSH
6800: LD_VAR 0 10
6804: PPUSH
6805: CALL_OW 250
6809: ST_TO_ADDR
// y := GetY ( enemy ) ;
6810: LD_ADDR_VAR 0 5
6814: PUSH
6815: LD_VAR 0 10
6819: PPUSH
6820: CALL_OW 251
6824: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
6825: LD_ADDR_VAR 0 6
6829: PUSH
6830: LD_VAR 0 4
6834: PUSH
6835: LD_INT 1
6837: NEG
6838: PPUSH
6839: LD_INT 1
6841: PPUSH
6842: CALL_OW 12
6846: PLUS
6847: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
6848: LD_ADDR_VAR 0 7
6852: PUSH
6853: LD_VAR 0 5
6857: PUSH
6858: LD_INT 1
6860: NEG
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: CALL_OW 12
6869: PLUS
6870: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6871: LD_VAR 0 6
6875: PPUSH
6876: LD_VAR 0 7
6880: PPUSH
6881: CALL_OW 488
6885: NOT
6886: IFFALSE 6908
// begin _x := x ;
6888: LD_ADDR_VAR 0 6
6892: PUSH
6893: LD_VAR 0 4
6897: ST_TO_ADDR
// _y := y ;
6898: LD_ADDR_VAR 0 7
6902: PUSH
6903: LD_VAR 0 5
6907: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
6908: LD_ADDR_VAR 0 3
6912: PUSH
6913: LD_INT 1
6915: PPUSH
6916: LD_VAR 0 14
6920: PPUSH
6921: CALL_OW 12
6925: ST_TO_ADDR
// case i of 1 :
6926: LD_VAR 0 3
6930: PUSH
6931: LD_INT 1
6933: DOUBLE
6934: EQUAL
6935: IFTRUE 6939
6937: GO 6956
6939: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
6940: LD_VAR 0 1
6944: PPUSH
6945: LD_VAR 0 10
6949: PPUSH
6950: CALL_OW 115
6954: GO 7017
6956: LD_INT 2
6958: DOUBLE
6959: EQUAL
6960: IFTRUE 6964
6962: GO 6986
6964: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
6965: LD_VAR 0 1
6969: PPUSH
6970: LD_VAR 0 6
6974: PPUSH
6975: LD_VAR 0 7
6979: PPUSH
6980: CALL_OW 153
6984: GO 7017
6986: LD_INT 3
6988: DOUBLE
6989: EQUAL
6990: IFTRUE 6994
6992: GO 7016
6994: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
6995: LD_VAR 0 1
6999: PPUSH
7000: LD_VAR 0 6
7004: PPUSH
7005: LD_VAR 0 7
7009: PPUSH
7010: CALL_OW 154
7014: GO 7017
7016: POP
// end ;
7017: LD_VAR 0 2
7021: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
7022: LD_INT 0
7024: PPUSH
7025: PPUSH
7026: PPUSH
7027: PPUSH
7028: PPUSH
7029: PPUSH
// if not unit or not building then
7030: LD_VAR 0 1
7034: NOT
7035: PUSH
7036: LD_VAR 0 2
7040: NOT
7041: OR
7042: IFFALSE 7046
// exit ;
7044: GO 7204
// x := GetX ( building ) ;
7046: LD_ADDR_VAR 0 5
7050: PUSH
7051: LD_VAR 0 2
7055: PPUSH
7056: CALL_OW 250
7060: ST_TO_ADDR
// y := GetY ( building ) ;
7061: LD_ADDR_VAR 0 6
7065: PUSH
7066: LD_VAR 0 2
7070: PPUSH
7071: CALL_OW 251
7075: ST_TO_ADDR
// for i = 0 to 5 do
7076: LD_ADDR_VAR 0 4
7080: PUSH
7081: DOUBLE
7082: LD_INT 0
7084: DEC
7085: ST_TO_ADDR
7086: LD_INT 5
7088: PUSH
7089: FOR_TO
7090: IFFALSE 7202
// begin _x := ShiftX ( x , i , 3 ) ;
7092: LD_ADDR_VAR 0 7
7096: PUSH
7097: LD_VAR 0 5
7101: PPUSH
7102: LD_VAR 0 4
7106: PPUSH
7107: LD_INT 3
7109: PPUSH
7110: CALL_OW 272
7114: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
7115: LD_ADDR_VAR 0 8
7119: PUSH
7120: LD_VAR 0 6
7124: PPUSH
7125: LD_VAR 0 4
7129: PPUSH
7130: LD_INT 3
7132: PPUSH
7133: CALL_OW 273
7137: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7138: LD_VAR 0 7
7142: PPUSH
7143: LD_VAR 0 8
7147: PPUSH
7148: CALL_OW 488
7152: NOT
7153: IFFALSE 7157
// continue ;
7155: GO 7089
// if HexInfo ( _x , _y ) = 0 then
7157: LD_VAR 0 7
7161: PPUSH
7162: LD_VAR 0 8
7166: PPUSH
7167: CALL_OW 428
7171: PUSH
7172: LD_INT 0
7174: EQUAL
7175: IFFALSE 7200
// begin ComMoveXY ( unit , _x , _y ) ;
7177: LD_VAR 0 1
7181: PPUSH
7182: LD_VAR 0 7
7186: PPUSH
7187: LD_VAR 0 8
7191: PPUSH
7192: CALL_OW 111
// exit ;
7196: POP
7197: POP
7198: GO 7204
// end ; end ;
7200: GO 7089
7202: POP
7203: POP
// end ;
7204: LD_VAR 0 3
7208: RET
// export function ScanBase ( side , base_area ) ; begin
7209: LD_INT 0
7211: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
7212: LD_ADDR_VAR 0 3
7216: PUSH
7217: LD_VAR 0 2
7221: PPUSH
7222: LD_INT 81
7224: PUSH
7225: LD_VAR 0 1
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PPUSH
7234: CALL_OW 70
7238: ST_TO_ADDR
// end ;
7239: LD_VAR 0 3
7243: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
7244: LD_INT 0
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
// result := false ;
7250: LD_ADDR_VAR 0 2
7254: PUSH
7255: LD_INT 0
7257: ST_TO_ADDR
// side := GetSide ( unit ) ;
7258: LD_ADDR_VAR 0 3
7262: PUSH
7263: LD_VAR 0 1
7267: PPUSH
7268: CALL_OW 255
7272: ST_TO_ADDR
// nat := GetNation ( unit ) ;
7273: LD_ADDR_VAR 0 4
7277: PUSH
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 248
7287: ST_TO_ADDR
// case nat of 1 :
7288: LD_VAR 0 4
7292: PUSH
7293: LD_INT 1
7295: DOUBLE
7296: EQUAL
7297: IFTRUE 7301
7299: GO 7312
7301: POP
// tech := tech_lassight ; 2 :
7302: LD_ADDR_VAR 0 5
7306: PUSH
7307: LD_INT 12
7309: ST_TO_ADDR
7310: GO 7351
7312: LD_INT 2
7314: DOUBLE
7315: EQUAL
7316: IFTRUE 7320
7318: GO 7331
7320: POP
// tech := tech_mortar ; 3 :
7321: LD_ADDR_VAR 0 5
7325: PUSH
7326: LD_INT 41
7328: ST_TO_ADDR
7329: GO 7351
7331: LD_INT 3
7333: DOUBLE
7334: EQUAL
7335: IFTRUE 7339
7337: GO 7350
7339: POP
// tech := tech_bazooka ; end ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_INT 44
7347: ST_TO_ADDR
7348: GO 7351
7350: POP
// if Researched ( side , tech ) then
7351: LD_VAR 0 3
7355: PPUSH
7356: LD_VAR 0 5
7360: PPUSH
7361: CALL_OW 325
7365: IFFALSE 7392
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
7367: LD_ADDR_VAR 0 2
7371: PUSH
7372: LD_INT 5
7374: PUSH
7375: LD_INT 8
7377: PUSH
7378: LD_INT 9
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: LIST
7385: PUSH
7386: LD_VAR 0 4
7390: ARRAY
7391: ST_TO_ADDR
// end ;
7392: LD_VAR 0 2
7396: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
7397: LD_INT 0
7399: PPUSH
7400: PPUSH
7401: PPUSH
// if not mines then
7402: LD_VAR 0 2
7406: NOT
7407: IFFALSE 7411
// exit ;
7409: GO 7555
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7411: LD_ADDR_VAR 0 5
7415: PUSH
7416: LD_INT 81
7418: PUSH
7419: LD_VAR 0 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: LD_INT 21
7433: PUSH
7434: LD_INT 3
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PPUSH
7449: CALL_OW 69
7453: ST_TO_ADDR
// for i in mines do
7454: LD_ADDR_VAR 0 4
7458: PUSH
7459: LD_VAR 0 2
7463: PUSH
7464: FOR_IN
7465: IFFALSE 7553
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
7467: LD_VAR 0 4
7471: PUSH
7472: LD_INT 1
7474: ARRAY
7475: PPUSH
7476: LD_VAR 0 4
7480: PUSH
7481: LD_INT 2
7483: ARRAY
7484: PPUSH
7485: CALL_OW 458
7489: NOT
7490: IFFALSE 7494
// continue ;
7492: GO 7464
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
7494: LD_VAR 0 4
7498: PUSH
7499: LD_INT 1
7501: ARRAY
7502: PPUSH
7503: LD_VAR 0 4
7507: PUSH
7508: LD_INT 2
7510: ARRAY
7511: PPUSH
7512: CALL_OW 428
7516: PUSH
7517: LD_VAR 0 5
7521: IN
7522: IFFALSE 7551
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
7524: LD_VAR 0 4
7528: PUSH
7529: LD_INT 1
7531: ARRAY
7532: PPUSH
7533: LD_VAR 0 4
7537: PUSH
7538: LD_INT 2
7540: ARRAY
7541: PPUSH
7542: LD_VAR 0 1
7546: PPUSH
7547: CALL_OW 456
// end ;
7551: GO 7464
7553: POP
7554: POP
// end ;
7555: LD_VAR 0 3
7559: RET
// export function Count ( array ) ; var i ; begin
7560: LD_INT 0
7562: PPUSH
7563: PPUSH
// result := 0 ;
7564: LD_ADDR_VAR 0 2
7568: PUSH
7569: LD_INT 0
7571: ST_TO_ADDR
// for i in array do
7572: LD_ADDR_VAR 0 3
7576: PUSH
7577: LD_VAR 0 1
7581: PUSH
7582: FOR_IN
7583: IFFALSE 7607
// if i then
7585: LD_VAR 0 3
7589: IFFALSE 7605
// result := result + 1 ;
7591: LD_ADDR_VAR 0 2
7595: PUSH
7596: LD_VAR 0 2
7600: PUSH
7601: LD_INT 1
7603: PLUS
7604: ST_TO_ADDR
7605: GO 7582
7607: POP
7608: POP
// end ;
7609: LD_VAR 0 2
7613: RET
// export function IsEmpty ( building ) ; begin
7614: LD_INT 0
7616: PPUSH
// if not building then
7617: LD_VAR 0 1
7621: NOT
7622: IFFALSE 7626
// exit ;
7624: GO 7669
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
7626: LD_ADDR_VAR 0 2
7630: PUSH
7631: LD_VAR 0 1
7635: PUSH
7636: LD_INT 22
7638: PUSH
7639: LD_VAR 0 1
7643: PPUSH
7644: CALL_OW 255
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PUSH
7653: LD_INT 58
7655: PUSH
7656: EMPTY
7657: LIST
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PPUSH
7663: CALL_OW 69
7667: IN
7668: ST_TO_ADDR
// end ;
7669: LD_VAR 0 2
7673: RET
// export function IsNotFull ( building ) ; begin
7674: LD_INT 0
7676: PPUSH
// if not building then
7677: LD_VAR 0 1
7681: NOT
7682: IFFALSE 7686
// exit ;
7684: GO 7705
// result := UnitsInside ( building ) < 6 ;
7686: LD_ADDR_VAR 0 2
7690: PUSH
7691: LD_VAR 0 1
7695: PPUSH
7696: CALL_OW 313
7700: PUSH
7701: LD_INT 6
7703: LESS
7704: ST_TO_ADDR
// end ;
7705: LD_VAR 0 2
7709: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
7710: LD_INT 0
7712: PPUSH
7713: PPUSH
7714: PPUSH
7715: PPUSH
// tmp := [ ] ;
7716: LD_ADDR_VAR 0 3
7720: PUSH
7721: EMPTY
7722: ST_TO_ADDR
// list := [ ] ;
7723: LD_ADDR_VAR 0 5
7727: PUSH
7728: EMPTY
7729: ST_TO_ADDR
// for i = 16 to 25 do
7730: LD_ADDR_VAR 0 4
7734: PUSH
7735: DOUBLE
7736: LD_INT 16
7738: DEC
7739: ST_TO_ADDR
7740: LD_INT 25
7742: PUSH
7743: FOR_TO
7744: IFFALSE 7817
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
7746: LD_ADDR_VAR 0 3
7750: PUSH
7751: LD_VAR 0 3
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_VAR 0 1
7763: PPUSH
7764: CALL_OW 255
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 91
7775: PUSH
7776: LD_VAR 0 1
7780: PUSH
7781: LD_INT 6
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: PUSH
7789: LD_INT 30
7791: PUSH
7792: LD_VAR 0 4
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: PPUSH
7809: CALL_OW 69
7813: ADD
7814: ST_TO_ADDR
7815: GO 7743
7817: POP
7818: POP
// for i = 1 to tmp do
7819: LD_ADDR_VAR 0 4
7823: PUSH
7824: DOUBLE
7825: LD_INT 1
7827: DEC
7828: ST_TO_ADDR
7829: LD_VAR 0 3
7833: PUSH
7834: FOR_TO
7835: IFFALSE 7923
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
7837: LD_ADDR_VAR 0 5
7841: PUSH
7842: LD_VAR 0 5
7846: PUSH
7847: LD_VAR 0 3
7851: PUSH
7852: LD_VAR 0 4
7856: ARRAY
7857: PPUSH
7858: CALL_OW 266
7862: PUSH
7863: LD_VAR 0 3
7867: PUSH
7868: LD_VAR 0 4
7872: ARRAY
7873: PPUSH
7874: CALL_OW 250
7878: PUSH
7879: LD_VAR 0 3
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 251
7894: PUSH
7895: LD_VAR 0 3
7899: PUSH
7900: LD_VAR 0 4
7904: ARRAY
7905: PPUSH
7906: CALL_OW 254
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: ADD
7920: ST_TO_ADDR
7921: GO 7834
7923: POP
7924: POP
// result := list ;
7925: LD_ADDR_VAR 0 2
7929: PUSH
7930: LD_VAR 0 5
7934: ST_TO_ADDR
// end ;
7935: LD_VAR 0 2
7939: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
7940: LD_INT 0
7942: PPUSH
7943: PPUSH
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// if not factory then
7949: LD_VAR 0 1
7953: NOT
7954: IFFALSE 7958
// exit ;
7956: GO 8551
// if control = control_apeman then
7958: LD_VAR 0 4
7962: PUSH
7963: LD_INT 5
7965: EQUAL
7966: IFFALSE 8075
// begin tmp := UnitsInside ( factory ) ;
7968: LD_ADDR_VAR 0 8
7972: PUSH
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 313
7982: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
7983: LD_VAR 0 8
7987: PPUSH
7988: LD_INT 25
7990: PUSH
7991: LD_INT 12
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PPUSH
7998: CALL_OW 72
8002: NOT
8003: IFFALSE 8013
// control := control_manual ;
8005: LD_ADDR_VAR 0 4
8009: PUSH
8010: LD_INT 1
8012: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
8013: LD_ADDR_VAR 0 8
8017: PUSH
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL 7710 0 1
8027: ST_TO_ADDR
// if tmp then
8028: LD_VAR 0 8
8032: IFFALSE 8075
// begin for i in tmp do
8034: LD_ADDR_VAR 0 7
8038: PUSH
8039: LD_VAR 0 8
8043: PUSH
8044: FOR_IN
8045: IFFALSE 8073
// if i [ 1 ] = b_ext_radio then
8047: LD_VAR 0 7
8051: PUSH
8052: LD_INT 1
8054: ARRAY
8055: PUSH
8056: LD_INT 22
8058: EQUAL
8059: IFFALSE 8071
// begin control := control_remote ;
8061: LD_ADDR_VAR 0 4
8065: PUSH
8066: LD_INT 2
8068: ST_TO_ADDR
// break ;
8069: GO 8073
// end ;
8071: GO 8044
8073: POP
8074: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_VAR 0 2
8084: PPUSH
8085: LD_VAR 0 3
8089: PPUSH
8090: LD_VAR 0 4
8094: PPUSH
8095: LD_VAR 0 5
8099: PPUSH
8100: CALL_OW 448
8104: IFFALSE 8139
// begin result := [ chassis , engine , control , weapon ] ;
8106: LD_ADDR_VAR 0 6
8110: PUSH
8111: LD_VAR 0 2
8115: PUSH
8116: LD_VAR 0 3
8120: PUSH
8121: LD_VAR 0 4
8125: PUSH
8126: LD_VAR 0 5
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: ST_TO_ADDR
// exit ;
8137: GO 8551
// end ; _chassis := AvailableChassisList ( factory ) ;
8139: LD_ADDR_VAR 0 9
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL_OW 475
8153: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
8154: LD_ADDR_VAR 0 11
8158: PUSH
8159: LD_VAR 0 1
8163: PPUSH
8164: CALL_OW 476
8168: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
8169: LD_ADDR_VAR 0 12
8173: PUSH
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 477
8183: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
8184: LD_ADDR_VAR 0 10
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL_OW 478
8198: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
8199: LD_VAR 0 9
8203: NOT
8204: PUSH
8205: LD_VAR 0 11
8209: NOT
8210: OR
8211: PUSH
8212: LD_VAR 0 12
8216: NOT
8217: OR
8218: PUSH
8219: LD_VAR 0 10
8223: NOT
8224: OR
8225: IFFALSE 8260
// begin result := [ chassis , engine , control , weapon ] ;
8227: LD_ADDR_VAR 0 6
8231: PUSH
8232: LD_VAR 0 2
8236: PUSH
8237: LD_VAR 0 3
8241: PUSH
8242: LD_VAR 0 4
8246: PUSH
8247: LD_VAR 0 5
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: ST_TO_ADDR
// exit ;
8258: GO 8551
// end ; if not chassis in _chassis then
8260: LD_VAR 0 2
8264: PUSH
8265: LD_VAR 0 9
8269: IN
8270: NOT
8271: IFFALSE 8297
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
8273: LD_ADDR_VAR 0 2
8277: PUSH
8278: LD_VAR 0 9
8282: PUSH
8283: LD_INT 1
8285: PPUSH
8286: LD_VAR 0 9
8290: PPUSH
8291: CALL_OW 12
8295: ARRAY
8296: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
8297: LD_VAR 0 2
8301: PPUSH
8302: LD_VAR 0 3
8306: PPUSH
8307: CALL 8556 0 2
8311: NOT
8312: IFFALSE 8371
// repeat engine := _engine [ 1 ] ;
8314: LD_ADDR_VAR 0 3
8318: PUSH
8319: LD_VAR 0 11
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
8328: LD_ADDR_VAR 0 11
8332: PUSH
8333: LD_VAR 0 11
8337: PPUSH
8338: LD_INT 1
8340: PPUSH
8341: CALL_OW 3
8345: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
8346: LD_VAR 0 2
8350: PPUSH
8351: LD_VAR 0 3
8355: PPUSH
8356: CALL 8556 0 2
8360: PUSH
8361: LD_VAR 0 11
8365: PUSH
8366: EMPTY
8367: EQUAL
8368: OR
8369: IFFALSE 8314
// if not control in _control then
8371: LD_VAR 0 4
8375: PUSH
8376: LD_VAR 0 12
8380: IN
8381: NOT
8382: IFFALSE 8408
// control := _control [ rand ( 1 , _control ) ] ;
8384: LD_ADDR_VAR 0 4
8388: PUSH
8389: LD_VAR 0 12
8393: PUSH
8394: LD_INT 1
8396: PPUSH
8397: LD_VAR 0 12
8401: PPUSH
8402: CALL_OW 12
8406: ARRAY
8407: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_VAR 0 5
8417: PPUSH
8418: CALL 8776 0 2
8422: NOT
8423: IFFALSE 8482
// repeat weapon := _weapon [ 1 ] ;
8425: LD_ADDR_VAR 0 5
8429: PUSH
8430: LD_VAR 0 10
8434: PUSH
8435: LD_INT 1
8437: ARRAY
8438: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
8439: LD_ADDR_VAR 0 10
8443: PUSH
8444: LD_VAR 0 10
8448: PPUSH
8449: LD_INT 1
8451: PPUSH
8452: CALL_OW 3
8456: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
8457: LD_VAR 0 2
8461: PPUSH
8462: LD_VAR 0 5
8466: PPUSH
8467: CALL 8776 0 2
8471: PUSH
8472: LD_VAR 0 10
8476: PUSH
8477: EMPTY
8478: EQUAL
8479: OR
8480: IFFALSE 8425
// result := [ ] ;
8482: LD_ADDR_VAR 0 6
8486: PUSH
8487: EMPTY
8488: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
8489: LD_VAR 0 1
8493: PPUSH
8494: LD_VAR 0 2
8498: PPUSH
8499: LD_VAR 0 3
8503: PPUSH
8504: LD_VAR 0 4
8508: PPUSH
8509: LD_VAR 0 5
8513: PPUSH
8514: CALL_OW 448
8518: IFFALSE 8551
// result := [ chassis , engine , control , weapon ] ;
8520: LD_ADDR_VAR 0 6
8524: PUSH
8525: LD_VAR 0 2
8529: PUSH
8530: LD_VAR 0 3
8534: PUSH
8535: LD_VAR 0 4
8539: PUSH
8540: LD_VAR 0 5
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: ST_TO_ADDR
// end ;
8551: LD_VAR 0 6
8555: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
8556: LD_INT 0
8558: PPUSH
// if not chassis or not engine then
8559: LD_VAR 0 1
8563: NOT
8564: PUSH
8565: LD_VAR 0 2
8569: NOT
8570: OR
8571: IFFALSE 8575
// exit ;
8573: GO 8771
// case engine of engine_solar :
8575: LD_VAR 0 2
8579: PUSH
8580: LD_INT 2
8582: DOUBLE
8583: EQUAL
8584: IFTRUE 8588
8586: GO 8626
8588: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
8589: LD_ADDR_VAR 0 3
8593: PUSH
8594: LD_INT 11
8596: PUSH
8597: LD_INT 12
8599: PUSH
8600: LD_INT 13
8602: PUSH
8603: LD_INT 14
8605: PUSH
8606: LD_INT 1
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 3
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: ST_TO_ADDR
8624: GO 8755
8626: LD_INT 1
8628: DOUBLE
8629: EQUAL
8630: IFTRUE 8634
8632: GO 8696
8634: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
8635: LD_ADDR_VAR 0 3
8639: PUSH
8640: LD_INT 11
8642: PUSH
8643: LD_INT 12
8645: PUSH
8646: LD_INT 13
8648: PUSH
8649: LD_INT 14
8651: PUSH
8652: LD_INT 1
8654: PUSH
8655: LD_INT 2
8657: PUSH
8658: LD_INT 3
8660: PUSH
8661: LD_INT 4
8663: PUSH
8664: LD_INT 5
8666: PUSH
8667: LD_INT 21
8669: PUSH
8670: LD_INT 23
8672: PUSH
8673: LD_INT 22
8675: PUSH
8676: LD_INT 24
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: ST_TO_ADDR
8694: GO 8755
8696: LD_INT 3
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8754
8704: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8705: LD_ADDR_VAR 0 3
8709: PUSH
8710: LD_INT 13
8712: PUSH
8713: LD_INT 14
8715: PUSH
8716: LD_INT 2
8718: PUSH
8719: LD_INT 3
8721: PUSH
8722: LD_INT 4
8724: PUSH
8725: LD_INT 5
8727: PUSH
8728: LD_INT 21
8730: PUSH
8731: LD_INT 22
8733: PUSH
8734: LD_INT 23
8736: PUSH
8737: LD_INT 24
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: ST_TO_ADDR
8752: GO 8755
8754: POP
// result := ( chassis in result ) ;
8755: LD_ADDR_VAR 0 3
8759: PUSH
8760: LD_VAR 0 1
8764: PUSH
8765: LD_VAR 0 3
8769: IN
8770: ST_TO_ADDR
// end ;
8771: LD_VAR 0 3
8775: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
8776: LD_INT 0
8778: PPUSH
// if not chassis or not weapon then
8779: LD_VAR 0 1
8783: NOT
8784: PUSH
8785: LD_VAR 0 2
8789: NOT
8790: OR
8791: IFFALSE 8795
// exit ;
8793: GO 9821
// case weapon of us_machine_gun :
8795: LD_VAR 0 2
8799: PUSH
8800: LD_INT 2
8802: DOUBLE
8803: EQUAL
8804: IFTRUE 8808
8806: GO 8838
8808: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
8809: LD_ADDR_VAR 0 3
8813: PUSH
8814: LD_INT 1
8816: PUSH
8817: LD_INT 2
8819: PUSH
8820: LD_INT 3
8822: PUSH
8823: LD_INT 4
8825: PUSH
8826: LD_INT 5
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: ST_TO_ADDR
8836: GO 9805
8838: LD_INT 3
8840: DOUBLE
8841: EQUAL
8842: IFTRUE 8846
8844: GO 8876
8846: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
8847: LD_ADDR_VAR 0 3
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: LD_INT 2
8857: PUSH
8858: LD_INT 3
8860: PUSH
8861: LD_INT 4
8863: PUSH
8864: LD_INT 5
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: ST_TO_ADDR
8874: GO 9805
8876: LD_INT 11
8878: DOUBLE
8879: EQUAL
8880: IFTRUE 8884
8882: GO 8914
8884: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
8885: LD_ADDR_VAR 0 3
8889: PUSH
8890: LD_INT 1
8892: PUSH
8893: LD_INT 2
8895: PUSH
8896: LD_INT 3
8898: PUSH
8899: LD_INT 4
8901: PUSH
8902: LD_INT 5
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: ST_TO_ADDR
8912: GO 9805
8914: LD_INT 4
8916: DOUBLE
8917: EQUAL
8918: IFTRUE 8922
8920: GO 8948
8922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
8923: LD_ADDR_VAR 0 3
8927: PUSH
8928: LD_INT 2
8930: PUSH
8931: LD_INT 3
8933: PUSH
8934: LD_INT 4
8936: PUSH
8937: LD_INT 5
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: ST_TO_ADDR
8946: GO 9805
8948: LD_INT 5
8950: DOUBLE
8951: EQUAL
8952: IFTRUE 8956
8954: GO 8982
8956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
8957: LD_ADDR_VAR 0 3
8961: PUSH
8962: LD_INT 2
8964: PUSH
8965: LD_INT 3
8967: PUSH
8968: LD_INT 4
8970: PUSH
8971: LD_INT 5
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: ST_TO_ADDR
8980: GO 9805
8982: LD_INT 9
8984: DOUBLE
8985: EQUAL
8986: IFTRUE 8990
8988: GO 9016
8990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
8991: LD_ADDR_VAR 0 3
8995: PUSH
8996: LD_INT 2
8998: PUSH
8999: LD_INT 3
9001: PUSH
9002: LD_INT 4
9004: PUSH
9005: LD_INT 5
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: ST_TO_ADDR
9014: GO 9805
9016: LD_INT 7
9018: DOUBLE
9019: EQUAL
9020: IFTRUE 9024
9022: GO 9050
9024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
9025: LD_ADDR_VAR 0 3
9029: PUSH
9030: LD_INT 2
9032: PUSH
9033: LD_INT 3
9035: PUSH
9036: LD_INT 4
9038: PUSH
9039: LD_INT 5
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: ST_TO_ADDR
9048: GO 9805
9050: LD_INT 12
9052: DOUBLE
9053: EQUAL
9054: IFTRUE 9058
9056: GO 9084
9058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
9059: LD_ADDR_VAR 0 3
9063: PUSH
9064: LD_INT 2
9066: PUSH
9067: LD_INT 3
9069: PUSH
9070: LD_INT 4
9072: PUSH
9073: LD_INT 5
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: ST_TO_ADDR
9082: GO 9805
9084: LD_INT 13
9086: DOUBLE
9087: EQUAL
9088: IFTRUE 9092
9090: GO 9118
9092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
9093: LD_ADDR_VAR 0 3
9097: PUSH
9098: LD_INT 2
9100: PUSH
9101: LD_INT 3
9103: PUSH
9104: LD_INT 4
9106: PUSH
9107: LD_INT 5
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: ST_TO_ADDR
9116: GO 9805
9118: LD_INT 14
9120: DOUBLE
9121: EQUAL
9122: IFTRUE 9126
9124: GO 9144
9126: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
9127: LD_ADDR_VAR 0 3
9131: PUSH
9132: LD_INT 4
9134: PUSH
9135: LD_INT 5
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: ST_TO_ADDR
9142: GO 9805
9144: LD_INT 6
9146: DOUBLE
9147: EQUAL
9148: IFTRUE 9152
9150: GO 9170
9152: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
9153: LD_ADDR_VAR 0 3
9157: PUSH
9158: LD_INT 4
9160: PUSH
9161: LD_INT 5
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: ST_TO_ADDR
9168: GO 9805
9170: LD_INT 10
9172: DOUBLE
9173: EQUAL
9174: IFTRUE 9178
9176: GO 9196
9178: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
9179: LD_ADDR_VAR 0 3
9183: PUSH
9184: LD_INT 4
9186: PUSH
9187: LD_INT 5
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: ST_TO_ADDR
9194: GO 9805
9196: LD_INT 22
9198: DOUBLE
9199: EQUAL
9200: IFTRUE 9204
9202: GO 9230
9204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
9205: LD_ADDR_VAR 0 3
9209: PUSH
9210: LD_INT 11
9212: PUSH
9213: LD_INT 12
9215: PUSH
9216: LD_INT 13
9218: PUSH
9219: LD_INT 14
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: ST_TO_ADDR
9228: GO 9805
9230: LD_INT 23
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9264
9238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
9239: LD_ADDR_VAR 0 3
9243: PUSH
9244: LD_INT 11
9246: PUSH
9247: LD_INT 12
9249: PUSH
9250: LD_INT 13
9252: PUSH
9253: LD_INT 14
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: ST_TO_ADDR
9262: GO 9805
9264: LD_INT 24
9266: DOUBLE
9267: EQUAL
9268: IFTRUE 9272
9270: GO 9298
9272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
9273: LD_ADDR_VAR 0 3
9277: PUSH
9278: LD_INT 11
9280: PUSH
9281: LD_INT 12
9283: PUSH
9284: LD_INT 13
9286: PUSH
9287: LD_INT 14
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: ST_TO_ADDR
9296: GO 9805
9298: LD_INT 30
9300: DOUBLE
9301: EQUAL
9302: IFTRUE 9306
9304: GO 9332
9306: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
9307: LD_ADDR_VAR 0 3
9311: PUSH
9312: LD_INT 11
9314: PUSH
9315: LD_INT 12
9317: PUSH
9318: LD_INT 13
9320: PUSH
9321: LD_INT 14
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: ST_TO_ADDR
9330: GO 9805
9332: LD_INT 25
9334: DOUBLE
9335: EQUAL
9336: IFTRUE 9340
9338: GO 9358
9340: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
9341: LD_ADDR_VAR 0 3
9345: PUSH
9346: LD_INT 13
9348: PUSH
9349: LD_INT 14
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: ST_TO_ADDR
9356: GO 9805
9358: LD_INT 27
9360: DOUBLE
9361: EQUAL
9362: IFTRUE 9366
9364: GO 9384
9366: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
9367: LD_ADDR_VAR 0 3
9371: PUSH
9372: LD_INT 13
9374: PUSH
9375: LD_INT 14
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: ST_TO_ADDR
9382: GO 9805
9384: LD_INT 28
9386: DOUBLE
9387: EQUAL
9388: IFTRUE 9392
9390: GO 9410
9392: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
9393: LD_ADDR_VAR 0 3
9397: PUSH
9398: LD_INT 13
9400: PUSH
9401: LD_INT 14
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: ST_TO_ADDR
9408: GO 9805
9410: LD_INT 29
9412: DOUBLE
9413: EQUAL
9414: IFTRUE 9418
9416: GO 9436
9418: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
9419: LD_ADDR_VAR 0 3
9423: PUSH
9424: LD_INT 13
9426: PUSH
9427: LD_INT 14
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: ST_TO_ADDR
9434: GO 9805
9436: LD_INT 31
9438: DOUBLE
9439: EQUAL
9440: IFTRUE 9444
9442: GO 9462
9444: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
9445: LD_ADDR_VAR 0 3
9449: PUSH
9450: LD_INT 13
9452: PUSH
9453: LD_INT 14
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: ST_TO_ADDR
9460: GO 9805
9462: LD_INT 26
9464: DOUBLE
9465: EQUAL
9466: IFTRUE 9470
9468: GO 9488
9470: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
9471: LD_ADDR_VAR 0 3
9475: PUSH
9476: LD_INT 13
9478: PUSH
9479: LD_INT 14
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: ST_TO_ADDR
9486: GO 9805
9488: LD_INT 42
9490: DOUBLE
9491: EQUAL
9492: IFTRUE 9496
9494: GO 9522
9496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
9497: LD_ADDR_VAR 0 3
9501: PUSH
9502: LD_INT 21
9504: PUSH
9505: LD_INT 22
9507: PUSH
9508: LD_INT 23
9510: PUSH
9511: LD_INT 24
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: ST_TO_ADDR
9520: GO 9805
9522: LD_INT 43
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9556
9530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
9531: LD_ADDR_VAR 0 3
9535: PUSH
9536: LD_INT 21
9538: PUSH
9539: LD_INT 22
9541: PUSH
9542: LD_INT 23
9544: PUSH
9545: LD_INT 24
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: ST_TO_ADDR
9554: GO 9805
9556: LD_INT 44
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9590
9564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
9565: LD_ADDR_VAR 0 3
9569: PUSH
9570: LD_INT 21
9572: PUSH
9573: LD_INT 22
9575: PUSH
9576: LD_INT 23
9578: PUSH
9579: LD_INT 24
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: ST_TO_ADDR
9588: GO 9805
9590: LD_INT 45
9592: DOUBLE
9593: EQUAL
9594: IFTRUE 9598
9596: GO 9624
9598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
9599: LD_ADDR_VAR 0 3
9603: PUSH
9604: LD_INT 21
9606: PUSH
9607: LD_INT 22
9609: PUSH
9610: LD_INT 23
9612: PUSH
9613: LD_INT 24
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: ST_TO_ADDR
9622: GO 9805
9624: LD_INT 49
9626: DOUBLE
9627: EQUAL
9628: IFTRUE 9632
9630: GO 9658
9632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
9633: LD_ADDR_VAR 0 3
9637: PUSH
9638: LD_INT 21
9640: PUSH
9641: LD_INT 22
9643: PUSH
9644: LD_INT 23
9646: PUSH
9647: LD_INT 24
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: ST_TO_ADDR
9656: GO 9805
9658: LD_INT 51
9660: DOUBLE
9661: EQUAL
9662: IFTRUE 9666
9664: GO 9692
9666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
9667: LD_ADDR_VAR 0 3
9671: PUSH
9672: LD_INT 21
9674: PUSH
9675: LD_INT 22
9677: PUSH
9678: LD_INT 23
9680: PUSH
9681: LD_INT 24
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: ST_TO_ADDR
9690: GO 9805
9692: LD_INT 52
9694: DOUBLE
9695: EQUAL
9696: IFTRUE 9700
9698: GO 9726
9700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
9701: LD_ADDR_VAR 0 3
9705: PUSH
9706: LD_INT 21
9708: PUSH
9709: LD_INT 22
9711: PUSH
9712: LD_INT 23
9714: PUSH
9715: LD_INT 24
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: ST_TO_ADDR
9724: GO 9805
9726: LD_INT 53
9728: DOUBLE
9729: EQUAL
9730: IFTRUE 9734
9732: GO 9752
9734: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
9735: LD_ADDR_VAR 0 3
9739: PUSH
9740: LD_INT 23
9742: PUSH
9743: LD_INT 24
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: ST_TO_ADDR
9750: GO 9805
9752: LD_INT 46
9754: DOUBLE
9755: EQUAL
9756: IFTRUE 9760
9758: GO 9778
9760: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
9761: LD_ADDR_VAR 0 3
9765: PUSH
9766: LD_INT 23
9768: PUSH
9769: LD_INT 24
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: ST_TO_ADDR
9776: GO 9805
9778: LD_INT 47
9780: DOUBLE
9781: EQUAL
9782: IFTRUE 9786
9784: GO 9804
9786: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9787: LD_ADDR_VAR 0 3
9791: PUSH
9792: LD_INT 23
9794: PUSH
9795: LD_INT 24
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: ST_TO_ADDR
9802: GO 9805
9804: POP
// result := ( chassis in result ) ;
9805: LD_ADDR_VAR 0 3
9809: PUSH
9810: LD_VAR 0 1
9814: PUSH
9815: LD_VAR 0 3
9819: IN
9820: ST_TO_ADDR
// end ;
9821: LD_VAR 0 3
9825: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9826: LD_INT 0
9828: PPUSH
9829: PPUSH
9830: PPUSH
9831: PPUSH
9832: PPUSH
9833: PPUSH
9834: PPUSH
// result := array ;
9835: LD_ADDR_VAR 0 5
9839: PUSH
9840: LD_VAR 0 1
9844: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9845: LD_VAR 0 1
9849: NOT
9850: PUSH
9851: LD_VAR 0 2
9855: NOT
9856: OR
9857: PUSH
9858: LD_VAR 0 3
9862: NOT
9863: OR
9864: PUSH
9865: LD_VAR 0 2
9869: PUSH
9870: LD_VAR 0 1
9874: GREATER
9875: OR
9876: PUSH
9877: LD_VAR 0 3
9881: PUSH
9882: LD_VAR 0 1
9886: GREATER
9887: OR
9888: IFFALSE 9892
// exit ;
9890: GO 10188
// if direction then
9892: LD_VAR 0 4
9896: IFFALSE 9960
// begin d := 1 ;
9898: LD_ADDR_VAR 0 9
9902: PUSH
9903: LD_INT 1
9905: ST_TO_ADDR
// if i_from > i_to then
9906: LD_VAR 0 2
9910: PUSH
9911: LD_VAR 0 3
9915: GREATER
9916: IFFALSE 9942
// length := ( array - i_from ) + i_to else
9918: LD_ADDR_VAR 0 11
9922: PUSH
9923: LD_VAR 0 1
9927: PUSH
9928: LD_VAR 0 2
9932: MINUS
9933: PUSH
9934: LD_VAR 0 3
9938: PLUS
9939: ST_TO_ADDR
9940: GO 9958
// length := i_to - i_from ;
9942: LD_ADDR_VAR 0 11
9946: PUSH
9947: LD_VAR 0 3
9951: PUSH
9952: LD_VAR 0 2
9956: MINUS
9957: ST_TO_ADDR
// end else
9958: GO 10021
// begin d := - 1 ;
9960: LD_ADDR_VAR 0 9
9964: PUSH
9965: LD_INT 1
9967: NEG
9968: ST_TO_ADDR
// if i_from > i_to then
9969: LD_VAR 0 2
9973: PUSH
9974: LD_VAR 0 3
9978: GREATER
9979: IFFALSE 9999
// length := i_from - i_to else
9981: LD_ADDR_VAR 0 11
9985: PUSH
9986: LD_VAR 0 2
9990: PUSH
9991: LD_VAR 0 3
9995: MINUS
9996: ST_TO_ADDR
9997: GO 10021
// length := ( array - i_to ) + i_from ;
9999: LD_ADDR_VAR 0 11
10003: PUSH
10004: LD_VAR 0 1
10008: PUSH
10009: LD_VAR 0 3
10013: MINUS
10014: PUSH
10015: LD_VAR 0 2
10019: PLUS
10020: ST_TO_ADDR
// end ; if not length then
10021: LD_VAR 0 11
10025: NOT
10026: IFFALSE 10030
// exit ;
10028: GO 10188
// tmp := array ;
10030: LD_ADDR_VAR 0 10
10034: PUSH
10035: LD_VAR 0 1
10039: ST_TO_ADDR
// for i = 1 to length do
10040: LD_ADDR_VAR 0 6
10044: PUSH
10045: DOUBLE
10046: LD_INT 1
10048: DEC
10049: ST_TO_ADDR
10050: LD_VAR 0 11
10054: PUSH
10055: FOR_TO
10056: IFFALSE 10176
// begin for j = 1 to array do
10058: LD_ADDR_VAR 0 7
10062: PUSH
10063: DOUBLE
10064: LD_INT 1
10066: DEC
10067: ST_TO_ADDR
10068: LD_VAR 0 1
10072: PUSH
10073: FOR_TO
10074: IFFALSE 10162
// begin k := j + d ;
10076: LD_ADDR_VAR 0 8
10080: PUSH
10081: LD_VAR 0 7
10085: PUSH
10086: LD_VAR 0 9
10090: PLUS
10091: ST_TO_ADDR
// if k > array then
10092: LD_VAR 0 8
10096: PUSH
10097: LD_VAR 0 1
10101: GREATER
10102: IFFALSE 10112
// k := 1 ;
10104: LD_ADDR_VAR 0 8
10108: PUSH
10109: LD_INT 1
10111: ST_TO_ADDR
// if not k then
10112: LD_VAR 0 8
10116: NOT
10117: IFFALSE 10129
// k := array ;
10119: LD_ADDR_VAR 0 8
10123: PUSH
10124: LD_VAR 0 1
10128: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
10129: LD_ADDR_VAR 0 10
10133: PUSH
10134: LD_VAR 0 10
10138: PPUSH
10139: LD_VAR 0 8
10143: PPUSH
10144: LD_VAR 0 1
10148: PUSH
10149: LD_VAR 0 7
10153: ARRAY
10154: PPUSH
10155: CALL_OW 1
10159: ST_TO_ADDR
// end ;
10160: GO 10073
10162: POP
10163: POP
// array := tmp ;
10164: LD_ADDR_VAR 0 1
10168: PUSH
10169: LD_VAR 0 10
10173: ST_TO_ADDR
// end ;
10174: GO 10055
10176: POP
10177: POP
// result := array ;
10178: LD_ADDR_VAR 0 5
10182: PUSH
10183: LD_VAR 0 1
10187: ST_TO_ADDR
// end ;
10188: LD_VAR 0 5
10192: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
10193: LD_INT 0
10195: PPUSH
10196: PPUSH
// result := 0 ;
10197: LD_ADDR_VAR 0 3
10201: PUSH
10202: LD_INT 0
10204: ST_TO_ADDR
// if not array or not value in array then
10205: LD_VAR 0 1
10209: NOT
10210: PUSH
10211: LD_VAR 0 2
10215: PUSH
10216: LD_VAR 0 1
10220: IN
10221: NOT
10222: OR
10223: IFFALSE 10227
// exit ;
10225: GO 10281
// for i = 1 to array do
10227: LD_ADDR_VAR 0 4
10231: PUSH
10232: DOUBLE
10233: LD_INT 1
10235: DEC
10236: ST_TO_ADDR
10237: LD_VAR 0 1
10241: PUSH
10242: FOR_TO
10243: IFFALSE 10279
// if value = array [ i ] then
10245: LD_VAR 0 2
10249: PUSH
10250: LD_VAR 0 1
10254: PUSH
10255: LD_VAR 0 4
10259: ARRAY
10260: EQUAL
10261: IFFALSE 10277
// begin result := i ;
10263: LD_ADDR_VAR 0 3
10267: PUSH
10268: LD_VAR 0 4
10272: ST_TO_ADDR
// exit ;
10273: POP
10274: POP
10275: GO 10281
// end ;
10277: GO 10242
10279: POP
10280: POP
// end ;
10281: LD_VAR 0 3
10285: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
10286: LD_INT 0
10288: PPUSH
// vc_chassis := chassis ;
10289: LD_ADDR_OWVAR 37
10293: PUSH
10294: LD_VAR 0 1
10298: ST_TO_ADDR
// vc_engine := engine ;
10299: LD_ADDR_OWVAR 39
10303: PUSH
10304: LD_VAR 0 2
10308: ST_TO_ADDR
// vc_control := control ;
10309: LD_ADDR_OWVAR 38
10313: PUSH
10314: LD_VAR 0 3
10318: ST_TO_ADDR
// vc_weapon := weapon ;
10319: LD_ADDR_OWVAR 40
10323: PUSH
10324: LD_VAR 0 4
10328: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10329: LD_ADDR_OWVAR 41
10333: PUSH
10334: LD_VAR 0 5
10338: ST_TO_ADDR
// end ;
10339: LD_VAR 0 6
10343: RET
// export function WantPlant ( unit ) ; var task ; begin
10344: LD_INT 0
10346: PPUSH
10347: PPUSH
// result := false ;
10348: LD_ADDR_VAR 0 2
10352: PUSH
10353: LD_INT 0
10355: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
10356: LD_ADDR_VAR 0 3
10360: PUSH
10361: LD_VAR 0 1
10365: PPUSH
10366: CALL_OW 437
10370: ST_TO_ADDR
// if task then
10371: LD_VAR 0 3
10375: IFFALSE 10403
// if task [ 1 ] [ 1 ] = p then
10377: LD_VAR 0 3
10381: PUSH
10382: LD_INT 1
10384: ARRAY
10385: PUSH
10386: LD_INT 1
10388: ARRAY
10389: PUSH
10390: LD_STRING p
10392: EQUAL
10393: IFFALSE 10403
// result := true ;
10395: LD_ADDR_VAR 0 2
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// end ;
10403: LD_VAR 0 2
10407: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
10408: LD_INT 0
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// if pos < 1 then
10414: LD_VAR 0 2
10418: PUSH
10419: LD_INT 1
10421: LESS
10422: IFFALSE 10426
// exit ;
10424: GO 10729
// if pos = 1 then
10426: LD_VAR 0 2
10430: PUSH
10431: LD_INT 1
10433: EQUAL
10434: IFFALSE 10467
// result := Replace ( arr , pos [ 1 ] , value ) else
10436: LD_ADDR_VAR 0 4
10440: PUSH
10441: LD_VAR 0 1
10445: PPUSH
10446: LD_VAR 0 2
10450: PUSH
10451: LD_INT 1
10453: ARRAY
10454: PPUSH
10455: LD_VAR 0 3
10459: PPUSH
10460: CALL_OW 1
10464: ST_TO_ADDR
10465: GO 10729
// begin tmp := arr ;
10467: LD_ADDR_VAR 0 6
10471: PUSH
10472: LD_VAR 0 1
10476: ST_TO_ADDR
// s_arr := [ tmp ] ;
10477: LD_ADDR_VAR 0 7
10481: PUSH
10482: LD_VAR 0 6
10486: PUSH
10487: EMPTY
10488: LIST
10489: ST_TO_ADDR
// for i = 1 to pos - 1 do
10490: LD_ADDR_VAR 0 5
10494: PUSH
10495: DOUBLE
10496: LD_INT 1
10498: DEC
10499: ST_TO_ADDR
10500: LD_VAR 0 2
10504: PUSH
10505: LD_INT 1
10507: MINUS
10508: PUSH
10509: FOR_TO
10510: IFFALSE 10555
// begin tmp := tmp [ pos [ i ] ] ;
10512: LD_ADDR_VAR 0 6
10516: PUSH
10517: LD_VAR 0 6
10521: PUSH
10522: LD_VAR 0 2
10526: PUSH
10527: LD_VAR 0 5
10531: ARRAY
10532: ARRAY
10533: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
10534: LD_ADDR_VAR 0 7
10538: PUSH
10539: LD_VAR 0 7
10543: PUSH
10544: LD_VAR 0 6
10548: PUSH
10549: EMPTY
10550: LIST
10551: ADD
10552: ST_TO_ADDR
// end ;
10553: GO 10509
10555: POP
10556: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
10557: LD_ADDR_VAR 0 6
10561: PUSH
10562: LD_VAR 0 6
10566: PPUSH
10567: LD_VAR 0 2
10571: PUSH
10572: LD_VAR 0 2
10576: ARRAY
10577: PPUSH
10578: LD_VAR 0 3
10582: PPUSH
10583: CALL_OW 1
10587: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
10588: LD_ADDR_VAR 0 7
10592: PUSH
10593: LD_VAR 0 7
10597: PPUSH
10598: LD_VAR 0 7
10602: PPUSH
10603: LD_VAR 0 6
10607: PPUSH
10608: CALL_OW 1
10612: ST_TO_ADDR
// for i = s_arr downto 2 do
10613: LD_ADDR_VAR 0 5
10617: PUSH
10618: DOUBLE
10619: LD_VAR 0 7
10623: INC
10624: ST_TO_ADDR
10625: LD_INT 2
10627: PUSH
10628: FOR_DOWNTO
10629: IFFALSE 10713
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
10631: LD_ADDR_VAR 0 6
10635: PUSH
10636: LD_VAR 0 7
10640: PUSH
10641: LD_VAR 0 5
10645: PUSH
10646: LD_INT 1
10648: MINUS
10649: ARRAY
10650: PPUSH
10651: LD_VAR 0 2
10655: PUSH
10656: LD_VAR 0 5
10660: PUSH
10661: LD_INT 1
10663: MINUS
10664: ARRAY
10665: PPUSH
10666: LD_VAR 0 7
10670: PUSH
10671: LD_VAR 0 5
10675: ARRAY
10676: PPUSH
10677: CALL_OW 1
10681: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
10682: LD_ADDR_VAR 0 7
10686: PUSH
10687: LD_VAR 0 7
10691: PPUSH
10692: LD_VAR 0 5
10696: PUSH
10697: LD_INT 1
10699: MINUS
10700: PPUSH
10701: LD_VAR 0 6
10705: PPUSH
10706: CALL_OW 1
10710: ST_TO_ADDR
// end ;
10711: GO 10628
10713: POP
10714: POP
// result := s_arr [ 1 ] ;
10715: LD_ADDR_VAR 0 4
10719: PUSH
10720: LD_VAR 0 7
10724: PUSH
10725: LD_INT 1
10727: ARRAY
10728: ST_TO_ADDR
// end ; end ;
10729: LD_VAR 0 4
10733: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
10734: LD_INT 0
10736: PPUSH
10737: PPUSH
// if not list then
10738: LD_VAR 0 1
10742: NOT
10743: IFFALSE 10747
// exit ;
10745: GO 10838
// i := list [ pos1 ] ;
10747: LD_ADDR_VAR 0 5
10751: PUSH
10752: LD_VAR 0 1
10756: PUSH
10757: LD_VAR 0 2
10761: ARRAY
10762: ST_TO_ADDR
// if not i then
10763: LD_VAR 0 5
10767: NOT
10768: IFFALSE 10772
// exit ;
10770: GO 10838
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
10772: LD_ADDR_VAR 0 1
10776: PUSH
10777: LD_VAR 0 1
10781: PPUSH
10782: LD_VAR 0 2
10786: PPUSH
10787: LD_VAR 0 1
10791: PUSH
10792: LD_VAR 0 3
10796: ARRAY
10797: PPUSH
10798: CALL_OW 1
10802: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
10803: LD_ADDR_VAR 0 1
10807: PUSH
10808: LD_VAR 0 1
10812: PPUSH
10813: LD_VAR 0 3
10817: PPUSH
10818: LD_VAR 0 5
10822: PPUSH
10823: CALL_OW 1
10827: ST_TO_ADDR
// result := list ;
10828: LD_ADDR_VAR 0 4
10832: PUSH
10833: LD_VAR 0 1
10837: ST_TO_ADDR
// end ;
10838: LD_VAR 0 4
10842: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
10843: LD_INT 0
10845: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
10846: LD_ADDR_VAR 0 5
10850: PUSH
10851: LD_VAR 0 1
10855: PPUSH
10856: CALL_OW 250
10860: PPUSH
10861: LD_VAR 0 1
10865: PPUSH
10866: CALL_OW 251
10870: PPUSH
10871: LD_VAR 0 2
10875: PPUSH
10876: LD_VAR 0 3
10880: PPUSH
10881: LD_VAR 0 4
10885: PPUSH
10886: CALL 10896 0 5
10890: ST_TO_ADDR
// end ;
10891: LD_VAR 0 5
10895: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
10896: LD_INT 0
10898: PPUSH
10899: PPUSH
10900: PPUSH
10901: PPUSH
// if not list then
10902: LD_VAR 0 3
10906: NOT
10907: IFFALSE 10911
// exit ;
10909: GO 11299
// result := [ ] ;
10911: LD_ADDR_VAR 0 6
10915: PUSH
10916: EMPTY
10917: ST_TO_ADDR
// for i in list do
10918: LD_ADDR_VAR 0 7
10922: PUSH
10923: LD_VAR 0 3
10927: PUSH
10928: FOR_IN
10929: IFFALSE 11131
// begin tmp := GetDistUnitXY ( i , x , y ) ;
10931: LD_ADDR_VAR 0 9
10935: PUSH
10936: LD_VAR 0 7
10940: PPUSH
10941: LD_VAR 0 1
10945: PPUSH
10946: LD_VAR 0 2
10950: PPUSH
10951: CALL_OW 297
10955: ST_TO_ADDR
// if not result then
10956: LD_VAR 0 6
10960: NOT
10961: IFFALSE 10987
// result := [ [ i , tmp ] ] else
10963: LD_ADDR_VAR 0 6
10967: PUSH
10968: LD_VAR 0 7
10972: PUSH
10973: LD_VAR 0 9
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: EMPTY
10983: LIST
10984: ST_TO_ADDR
10985: GO 11129
// begin if result [ result ] [ 2 ] < tmp then
10987: LD_VAR 0 6
10991: PUSH
10992: LD_VAR 0 6
10996: ARRAY
10997: PUSH
10998: LD_INT 2
11000: ARRAY
11001: PUSH
11002: LD_VAR 0 9
11006: LESS
11007: IFFALSE 11049
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
11009: LD_ADDR_VAR 0 6
11013: PUSH
11014: LD_VAR 0 6
11018: PPUSH
11019: LD_VAR 0 6
11023: PUSH
11024: LD_INT 1
11026: PLUS
11027: PPUSH
11028: LD_VAR 0 7
11032: PUSH
11033: LD_VAR 0 9
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PPUSH
11042: CALL_OW 2
11046: ST_TO_ADDR
11047: GO 11129
// for j = 1 to result do
11049: LD_ADDR_VAR 0 8
11053: PUSH
11054: DOUBLE
11055: LD_INT 1
11057: DEC
11058: ST_TO_ADDR
11059: LD_VAR 0 6
11063: PUSH
11064: FOR_TO
11065: IFFALSE 11127
// begin if tmp < result [ j ] [ 2 ] then
11067: LD_VAR 0 9
11071: PUSH
11072: LD_VAR 0 6
11076: PUSH
11077: LD_VAR 0 8
11081: ARRAY
11082: PUSH
11083: LD_INT 2
11085: ARRAY
11086: LESS
11087: IFFALSE 11125
// begin result := Insert ( result , j , [ i , tmp ] ) ;
11089: LD_ADDR_VAR 0 6
11093: PUSH
11094: LD_VAR 0 6
11098: PPUSH
11099: LD_VAR 0 8
11103: PPUSH
11104: LD_VAR 0 7
11108: PUSH
11109: LD_VAR 0 9
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PPUSH
11118: CALL_OW 2
11122: ST_TO_ADDR
// break ;
11123: GO 11127
// end ; end ;
11125: GO 11064
11127: POP
11128: POP
// end ; end ;
11129: GO 10928
11131: POP
11132: POP
// if result and not asc then
11133: LD_VAR 0 6
11137: PUSH
11138: LD_VAR 0 4
11142: NOT
11143: AND
11144: IFFALSE 11219
// begin tmp := result ;
11146: LD_ADDR_VAR 0 9
11150: PUSH
11151: LD_VAR 0 6
11155: ST_TO_ADDR
// for i = tmp downto 1 do
11156: LD_ADDR_VAR 0 7
11160: PUSH
11161: DOUBLE
11162: LD_VAR 0 9
11166: INC
11167: ST_TO_ADDR
11168: LD_INT 1
11170: PUSH
11171: FOR_DOWNTO
11172: IFFALSE 11217
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
11174: LD_ADDR_VAR 0 6
11178: PUSH
11179: LD_VAR 0 6
11183: PPUSH
11184: LD_VAR 0 9
11188: PUSH
11189: LD_VAR 0 7
11193: MINUS
11194: PUSH
11195: LD_INT 1
11197: PLUS
11198: PPUSH
11199: LD_VAR 0 9
11203: PUSH
11204: LD_VAR 0 7
11208: ARRAY
11209: PPUSH
11210: CALL_OW 1
11214: ST_TO_ADDR
11215: GO 11171
11217: POP
11218: POP
// end ; tmp := [ ] ;
11219: LD_ADDR_VAR 0 9
11223: PUSH
11224: EMPTY
11225: ST_TO_ADDR
// if mode then
11226: LD_VAR 0 5
11230: IFFALSE 11299
// begin for i = 1 to result do
11232: LD_ADDR_VAR 0 7
11236: PUSH
11237: DOUBLE
11238: LD_INT 1
11240: DEC
11241: ST_TO_ADDR
11242: LD_VAR 0 6
11246: PUSH
11247: FOR_TO
11248: IFFALSE 11287
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
11250: LD_ADDR_VAR 0 9
11254: PUSH
11255: LD_VAR 0 9
11259: PPUSH
11260: LD_VAR 0 7
11264: PPUSH
11265: LD_VAR 0 6
11269: PUSH
11270: LD_VAR 0 7
11274: ARRAY
11275: PUSH
11276: LD_INT 1
11278: ARRAY
11279: PPUSH
11280: CALL_OW 1
11284: ST_TO_ADDR
11285: GO 11247
11287: POP
11288: POP
// result := tmp ;
11289: LD_ADDR_VAR 0 6
11293: PUSH
11294: LD_VAR 0 9
11298: ST_TO_ADDR
// end ; end ;
11299: LD_VAR 0 6
11303: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
11304: LD_INT 0
11306: PPUSH
11307: PPUSH
11308: PPUSH
11309: PPUSH
11310: PPUSH
11311: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
11312: LD_ADDR_VAR 0 5
11316: PUSH
11317: LD_INT 0
11319: PUSH
11320: LD_INT 0
11322: PUSH
11323: LD_INT 0
11325: PUSH
11326: EMPTY
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: ST_TO_ADDR
// if not x or not y then
11334: LD_VAR 0 2
11338: NOT
11339: PUSH
11340: LD_VAR 0 3
11344: NOT
11345: OR
11346: IFFALSE 11350
// exit ;
11348: GO 12996
// if not range then
11350: LD_VAR 0 4
11354: NOT
11355: IFFALSE 11365
// range := 10 ;
11357: LD_ADDR_VAR 0 4
11361: PUSH
11362: LD_INT 10
11364: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11365: LD_ADDR_VAR 0 8
11369: PUSH
11370: LD_INT 81
11372: PUSH
11373: LD_VAR 0 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 92
11384: PUSH
11385: LD_VAR 0 2
11389: PUSH
11390: LD_VAR 0 3
11394: PUSH
11395: LD_VAR 0 4
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 3
11408: PUSH
11409: LD_INT 21
11411: PUSH
11412: LD_INT 3
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: PPUSH
11428: CALL_OW 69
11432: ST_TO_ADDR
// if not tmp then
11433: LD_VAR 0 8
11437: NOT
11438: IFFALSE 11442
// exit ;
11440: GO 12996
// for i in tmp do
11442: LD_ADDR_VAR 0 6
11446: PUSH
11447: LD_VAR 0 8
11451: PUSH
11452: FOR_IN
11453: IFFALSE 12971
// begin points := [ 0 , 0 , 0 ] ;
11455: LD_ADDR_VAR 0 9
11459: PUSH
11460: LD_INT 0
11462: PUSH
11463: LD_INT 0
11465: PUSH
11466: LD_INT 0
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: LIST
11473: ST_TO_ADDR
// bpoints := 1 ;
11474: LD_ADDR_VAR 0 10
11478: PUSH
11479: LD_INT 1
11481: ST_TO_ADDR
// case GetType ( i ) of unit_human :
11482: LD_VAR 0 6
11486: PPUSH
11487: CALL_OW 247
11491: PUSH
11492: LD_INT 1
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 12078
11500: POP
// begin if GetClass ( i ) = 1 then
11501: LD_VAR 0 6
11505: PPUSH
11506: CALL_OW 257
11510: PUSH
11511: LD_INT 1
11513: EQUAL
11514: IFFALSE 11535
// points := [ 10 , 5 , 3 ] ;
11516: LD_ADDR_VAR 0 9
11520: PUSH
11521: LD_INT 10
11523: PUSH
11524: LD_INT 5
11526: PUSH
11527: LD_INT 3
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: LIST
11534: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
11535: LD_VAR 0 6
11539: PPUSH
11540: CALL_OW 257
11544: PUSH
11545: LD_INT 2
11547: PUSH
11548: LD_INT 3
11550: PUSH
11551: LD_INT 4
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: LIST
11558: IN
11559: IFFALSE 11580
// points := [ 3 , 2 , 1 ] ;
11561: LD_ADDR_VAR 0 9
11565: PUSH
11566: LD_INT 3
11568: PUSH
11569: LD_INT 2
11571: PUSH
11572: LD_INT 1
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: ST_TO_ADDR
// if GetClass ( i ) = 5 then
11580: LD_VAR 0 6
11584: PPUSH
11585: CALL_OW 257
11589: PUSH
11590: LD_INT 5
11592: EQUAL
11593: IFFALSE 11614
// points := [ 130 , 5 , 2 ] ;
11595: LD_ADDR_VAR 0 9
11599: PUSH
11600: LD_INT 130
11602: PUSH
11603: LD_INT 5
11605: PUSH
11606: LD_INT 2
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: ST_TO_ADDR
// if GetClass ( i ) = 8 then
11614: LD_VAR 0 6
11618: PPUSH
11619: CALL_OW 257
11623: PUSH
11624: LD_INT 8
11626: EQUAL
11627: IFFALSE 11648
// points := [ 35 , 35 , 30 ] ;
11629: LD_ADDR_VAR 0 9
11633: PUSH
11634: LD_INT 35
11636: PUSH
11637: LD_INT 35
11639: PUSH
11640: LD_INT 30
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: LIST
11647: ST_TO_ADDR
// if GetClass ( i ) = 9 then
11648: LD_VAR 0 6
11652: PPUSH
11653: CALL_OW 257
11657: PUSH
11658: LD_INT 9
11660: EQUAL
11661: IFFALSE 11682
// points := [ 20 , 55 , 40 ] ;
11663: LD_ADDR_VAR 0 9
11667: PUSH
11668: LD_INT 20
11670: PUSH
11671: LD_INT 55
11673: PUSH
11674: LD_INT 40
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: LIST
11681: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
11682: LD_VAR 0 6
11686: PPUSH
11687: CALL_OW 257
11691: PUSH
11692: LD_INT 12
11694: PUSH
11695: LD_INT 16
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: IN
11702: IFFALSE 11723
// points := [ 5 , 3 , 2 ] ;
11704: LD_ADDR_VAR 0 9
11708: PUSH
11709: LD_INT 5
11711: PUSH
11712: LD_INT 3
11714: PUSH
11715: LD_INT 2
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: ST_TO_ADDR
// if GetClass ( i ) = 17 then
11723: LD_VAR 0 6
11727: PPUSH
11728: CALL_OW 257
11732: PUSH
11733: LD_INT 17
11735: EQUAL
11736: IFFALSE 11757
// points := [ 100 , 50 , 75 ] ;
11738: LD_ADDR_VAR 0 9
11742: PUSH
11743: LD_INT 100
11745: PUSH
11746: LD_INT 50
11748: PUSH
11749: LD_INT 75
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: ST_TO_ADDR
// if GetClass ( i ) = 15 then
11757: LD_VAR 0 6
11761: PPUSH
11762: CALL_OW 257
11766: PUSH
11767: LD_INT 15
11769: EQUAL
11770: IFFALSE 11791
// points := [ 10 , 5 , 3 ] ;
11772: LD_ADDR_VAR 0 9
11776: PUSH
11777: LD_INT 10
11779: PUSH
11780: LD_INT 5
11782: PUSH
11783: LD_INT 3
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: LIST
11790: ST_TO_ADDR
// if GetClass ( i ) = 14 then
11791: LD_VAR 0 6
11795: PPUSH
11796: CALL_OW 257
11800: PUSH
11801: LD_INT 14
11803: EQUAL
11804: IFFALSE 11825
// points := [ 10 , 0 , 0 ] ;
11806: LD_ADDR_VAR 0 9
11810: PUSH
11811: LD_INT 10
11813: PUSH
11814: LD_INT 0
11816: PUSH
11817: LD_INT 0
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: LIST
11824: ST_TO_ADDR
// if GetClass ( i ) = 11 then
11825: LD_VAR 0 6
11829: PPUSH
11830: CALL_OW 257
11834: PUSH
11835: LD_INT 11
11837: EQUAL
11838: IFFALSE 11859
// points := [ 30 , 10 , 5 ] ;
11840: LD_ADDR_VAR 0 9
11844: PUSH
11845: LD_INT 30
11847: PUSH
11848: LD_INT 10
11850: PUSH
11851: LD_INT 5
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
11859: LD_VAR 0 1
11863: PPUSH
11864: LD_INT 5
11866: PPUSH
11867: CALL_OW 321
11871: PUSH
11872: LD_INT 2
11874: EQUAL
11875: IFFALSE 11892
// bpoints := bpoints * 1.8 ;
11877: LD_ADDR_VAR 0 10
11881: PUSH
11882: LD_VAR 0 10
11886: PUSH
11887: LD_REAL  1.80000000000000E+0000
11890: MUL
11891: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
11892: LD_VAR 0 6
11896: PPUSH
11897: CALL_OW 257
11901: PUSH
11902: LD_INT 1
11904: PUSH
11905: LD_INT 2
11907: PUSH
11908: LD_INT 3
11910: PUSH
11911: LD_INT 4
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: IN
11920: PUSH
11921: LD_VAR 0 1
11925: PPUSH
11926: LD_INT 51
11928: PPUSH
11929: CALL_OW 321
11933: PUSH
11934: LD_INT 2
11936: EQUAL
11937: AND
11938: IFFALSE 11955
// bpoints := bpoints * 1.2 ;
11940: LD_ADDR_VAR 0 10
11944: PUSH
11945: LD_VAR 0 10
11949: PUSH
11950: LD_REAL  1.20000000000000E+0000
11953: MUL
11954: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
11955: LD_VAR 0 6
11959: PPUSH
11960: CALL_OW 257
11964: PUSH
11965: LD_INT 5
11967: PUSH
11968: LD_INT 7
11970: PUSH
11971: LD_INT 9
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: IN
11979: PUSH
11980: LD_VAR 0 1
11984: PPUSH
11985: LD_INT 52
11987: PPUSH
11988: CALL_OW 321
11992: PUSH
11993: LD_INT 2
11995: EQUAL
11996: AND
11997: IFFALSE 12014
// bpoints := bpoints * 1.5 ;
11999: LD_ADDR_VAR 0 10
12003: PUSH
12004: LD_VAR 0 10
12008: PUSH
12009: LD_REAL  1.50000000000000E+0000
12012: MUL
12013: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
12014: LD_VAR 0 1
12018: PPUSH
12019: LD_INT 66
12021: PPUSH
12022: CALL_OW 321
12026: PUSH
12027: LD_INT 2
12029: EQUAL
12030: IFFALSE 12047
// bpoints := bpoints * 1.1 ;
12032: LD_ADDR_VAR 0 10
12036: PUSH
12037: LD_VAR 0 10
12041: PUSH
12042: LD_REAL  1.10000000000000E+0000
12045: MUL
12046: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
12047: LD_ADDR_VAR 0 10
12051: PUSH
12052: LD_VAR 0 10
12056: PUSH
12057: LD_VAR 0 6
12061: PPUSH
12062: LD_INT 1
12064: PPUSH
12065: CALL_OW 259
12069: PUSH
12070: LD_REAL  1.15000000000000E+0000
12073: MUL
12074: MUL
12075: ST_TO_ADDR
// end ; unit_vehicle :
12076: GO 12900
12078: LD_INT 2
12080: DOUBLE
12081: EQUAL
12082: IFTRUE 12086
12084: GO 12888
12086: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
12087: LD_VAR 0 6
12091: PPUSH
12092: CALL_OW 264
12096: PUSH
12097: LD_INT 2
12099: PUSH
12100: LD_INT 42
12102: PUSH
12103: LD_INT 24
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: IN
12111: IFFALSE 12132
// points := [ 25 , 5 , 3 ] ;
12113: LD_ADDR_VAR 0 9
12117: PUSH
12118: LD_INT 25
12120: PUSH
12121: LD_INT 5
12123: PUSH
12124: LD_INT 3
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: LIST
12131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
12132: LD_VAR 0 6
12136: PPUSH
12137: CALL_OW 264
12141: PUSH
12142: LD_INT 4
12144: PUSH
12145: LD_INT 43
12147: PUSH
12148: LD_INT 25
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: IN
12156: IFFALSE 12177
// points := [ 40 , 15 , 5 ] ;
12158: LD_ADDR_VAR 0 9
12162: PUSH
12163: LD_INT 40
12165: PUSH
12166: LD_INT 15
12168: PUSH
12169: LD_INT 5
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
12177: LD_VAR 0 6
12181: PPUSH
12182: CALL_OW 264
12186: PUSH
12187: LD_INT 3
12189: PUSH
12190: LD_INT 23
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: IN
12197: IFFALSE 12218
// points := [ 7 , 25 , 8 ] ;
12199: LD_ADDR_VAR 0 9
12203: PUSH
12204: LD_INT 7
12206: PUSH
12207: LD_INT 25
12209: PUSH
12210: LD_INT 8
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: LIST
12217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
12218: LD_VAR 0 6
12222: PPUSH
12223: CALL_OW 264
12227: PUSH
12228: LD_INT 5
12230: PUSH
12231: LD_INT 27
12233: PUSH
12234: LD_INT 44
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: IN
12242: IFFALSE 12263
// points := [ 14 , 50 , 16 ] ;
12244: LD_ADDR_VAR 0 9
12248: PUSH
12249: LD_INT 14
12251: PUSH
12252: LD_INT 50
12254: PUSH
12255: LD_INT 16
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: LIST
12262: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
12263: LD_VAR 0 6
12267: PPUSH
12268: CALL_OW 264
12272: PUSH
12273: LD_INT 6
12275: PUSH
12276: LD_INT 46
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: IN
12283: IFFALSE 12304
// points := [ 32 , 120 , 70 ] ;
12285: LD_ADDR_VAR 0 9
12289: PUSH
12290: LD_INT 32
12292: PUSH
12293: LD_INT 120
12295: PUSH
12296: LD_INT 70
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
12304: LD_VAR 0 6
12308: PPUSH
12309: CALL_OW 264
12313: PUSH
12314: LD_INT 7
12316: PUSH
12317: LD_INT 28
12319: PUSH
12320: LD_INT 45
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: LIST
12327: IN
12328: IFFALSE 12349
// points := [ 35 , 20 , 45 ] ;
12330: LD_ADDR_VAR 0 9
12334: PUSH
12335: LD_INT 35
12337: PUSH
12338: LD_INT 20
12340: PUSH
12341: LD_INT 45
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
12349: LD_VAR 0 6
12353: PPUSH
12354: CALL_OW 264
12358: PUSH
12359: LD_INT 47
12361: PUSH
12362: EMPTY
12363: LIST
12364: IN
12365: IFFALSE 12386
// points := [ 67 , 45 , 75 ] ;
12367: LD_ADDR_VAR 0 9
12371: PUSH
12372: LD_INT 67
12374: PUSH
12375: LD_INT 45
12377: PUSH
12378: LD_INT 75
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
12386: LD_VAR 0 6
12390: PPUSH
12391: CALL_OW 264
12395: PUSH
12396: LD_INT 26
12398: PUSH
12399: EMPTY
12400: LIST
12401: IN
12402: IFFALSE 12423
// points := [ 120 , 30 , 80 ] ;
12404: LD_ADDR_VAR 0 9
12408: PUSH
12409: LD_INT 120
12411: PUSH
12412: LD_INT 30
12414: PUSH
12415: LD_INT 80
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
12423: LD_VAR 0 6
12427: PPUSH
12428: CALL_OW 264
12432: PUSH
12433: LD_INT 22
12435: PUSH
12436: EMPTY
12437: LIST
12438: IN
12439: IFFALSE 12460
// points := [ 40 , 1 , 1 ] ;
12441: LD_ADDR_VAR 0 9
12445: PUSH
12446: LD_INT 40
12448: PUSH
12449: LD_INT 1
12451: PUSH
12452: LD_INT 1
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: LIST
12459: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
12460: LD_VAR 0 6
12464: PPUSH
12465: CALL_OW 264
12469: PUSH
12470: LD_INT 29
12472: PUSH
12473: EMPTY
12474: LIST
12475: IN
12476: IFFALSE 12497
// points := [ 70 , 200 , 400 ] ;
12478: LD_ADDR_VAR 0 9
12482: PUSH
12483: LD_INT 70
12485: PUSH
12486: LD_INT 200
12488: PUSH
12489: LD_INT 400
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
12497: LD_VAR 0 6
12501: PPUSH
12502: CALL_OW 264
12506: PUSH
12507: LD_INT 14
12509: PUSH
12510: LD_INT 53
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: IN
12517: IFFALSE 12538
// points := [ 40 , 10 , 20 ] ;
12519: LD_ADDR_VAR 0 9
12523: PUSH
12524: LD_INT 40
12526: PUSH
12527: LD_INT 10
12529: PUSH
12530: LD_INT 20
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
12538: LD_VAR 0 6
12542: PPUSH
12543: CALL_OW 264
12547: PUSH
12548: LD_INT 9
12550: PUSH
12551: EMPTY
12552: LIST
12553: IN
12554: IFFALSE 12575
// points := [ 5 , 70 , 20 ] ;
12556: LD_ADDR_VAR 0 9
12560: PUSH
12561: LD_INT 5
12563: PUSH
12564: LD_INT 70
12566: PUSH
12567: LD_INT 20
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: LIST
12574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
12575: LD_VAR 0 6
12579: PPUSH
12580: CALL_OW 264
12584: PUSH
12585: LD_INT 10
12587: PUSH
12588: EMPTY
12589: LIST
12590: IN
12591: IFFALSE 12612
// points := [ 35 , 110 , 70 ] ;
12593: LD_ADDR_VAR 0 9
12597: PUSH
12598: LD_INT 35
12600: PUSH
12601: LD_INT 110
12603: PUSH
12604: LD_INT 70
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
12612: LD_VAR 0 6
12616: PPUSH
12617: CALL_OW 265
12621: PUSH
12622: LD_INT 25
12624: EQUAL
12625: IFFALSE 12646
// points := [ 80 , 65 , 100 ] ;
12627: LD_ADDR_VAR 0 9
12631: PUSH
12632: LD_INT 80
12634: PUSH
12635: LD_INT 65
12637: PUSH
12638: LD_INT 100
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
12646: LD_VAR 0 6
12650: PPUSH
12651: CALL_OW 263
12655: PUSH
12656: LD_INT 1
12658: EQUAL
12659: IFFALSE 12694
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
12661: LD_ADDR_VAR 0 10
12665: PUSH
12666: LD_VAR 0 10
12670: PUSH
12671: LD_VAR 0 6
12675: PPUSH
12676: CALL_OW 311
12680: PPUSH
12681: LD_INT 3
12683: PPUSH
12684: CALL_OW 259
12688: PUSH
12689: LD_INT 4
12691: MUL
12692: MUL
12693: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
12694: LD_VAR 0 6
12698: PPUSH
12699: CALL_OW 263
12703: PUSH
12704: LD_INT 2
12706: EQUAL
12707: IFFALSE 12758
// begin j := IsControledBy ( i ) ;
12709: LD_ADDR_VAR 0 7
12713: PUSH
12714: LD_VAR 0 6
12718: PPUSH
12719: CALL_OW 312
12723: ST_TO_ADDR
// if j then
12724: LD_VAR 0 7
12728: IFFALSE 12758
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
12730: LD_ADDR_VAR 0 10
12734: PUSH
12735: LD_VAR 0 10
12739: PUSH
12740: LD_VAR 0 7
12744: PPUSH
12745: LD_INT 3
12747: PPUSH
12748: CALL_OW 259
12752: PUSH
12753: LD_INT 3
12755: MUL
12756: MUL
12757: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
12758: LD_VAR 0 6
12762: PPUSH
12763: CALL_OW 264
12767: PUSH
12768: LD_INT 5
12770: PUSH
12771: LD_INT 6
12773: PUSH
12774: LD_INT 46
12776: PUSH
12777: LD_INT 44
12779: PUSH
12780: LD_INT 47
12782: PUSH
12783: LD_INT 45
12785: PUSH
12786: LD_INT 28
12788: PUSH
12789: LD_INT 7
12791: PUSH
12792: LD_INT 27
12794: PUSH
12795: LD_INT 29
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: IN
12810: PUSH
12811: LD_VAR 0 1
12815: PPUSH
12816: LD_INT 52
12818: PPUSH
12819: CALL_OW 321
12823: PUSH
12824: LD_INT 2
12826: EQUAL
12827: AND
12828: IFFALSE 12845
// bpoints := bpoints * 1.2 ;
12830: LD_ADDR_VAR 0 10
12834: PUSH
12835: LD_VAR 0 10
12839: PUSH
12840: LD_REAL  1.20000000000000E+0000
12843: MUL
12844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
12845: LD_VAR 0 6
12849: PPUSH
12850: CALL_OW 264
12854: PUSH
12855: LD_INT 6
12857: PUSH
12858: LD_INT 46
12860: PUSH
12861: LD_INT 47
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: LIST
12868: IN
12869: IFFALSE 12886
// bpoints := bpoints * 1.2 ;
12871: LD_ADDR_VAR 0 10
12875: PUSH
12876: LD_VAR 0 10
12880: PUSH
12881: LD_REAL  1.20000000000000E+0000
12884: MUL
12885: ST_TO_ADDR
// end ; unit_building :
12886: GO 12900
12888: LD_INT 3
12890: DOUBLE
12891: EQUAL
12892: IFTRUE 12896
12894: GO 12899
12896: POP
// ; end ;
12897: GO 12900
12899: POP
// for j = 1 to 3 do
12900: LD_ADDR_VAR 0 7
12904: PUSH
12905: DOUBLE
12906: LD_INT 1
12908: DEC
12909: ST_TO_ADDR
12910: LD_INT 3
12912: PUSH
12913: FOR_TO
12914: IFFALSE 12967
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
12916: LD_ADDR_VAR 0 5
12920: PUSH
12921: LD_VAR 0 5
12925: PPUSH
12926: LD_VAR 0 7
12930: PPUSH
12931: LD_VAR 0 5
12935: PUSH
12936: LD_VAR 0 7
12940: ARRAY
12941: PUSH
12942: LD_VAR 0 9
12946: PUSH
12947: LD_VAR 0 7
12951: ARRAY
12952: PUSH
12953: LD_VAR 0 10
12957: MUL
12958: PLUS
12959: PPUSH
12960: CALL_OW 1
12964: ST_TO_ADDR
12965: GO 12913
12967: POP
12968: POP
// end ;
12969: GO 11452
12971: POP
12972: POP
// result := Replace ( result , 4 , tmp ) ;
12973: LD_ADDR_VAR 0 5
12977: PUSH
12978: LD_VAR 0 5
12982: PPUSH
12983: LD_INT 4
12985: PPUSH
12986: LD_VAR 0 8
12990: PPUSH
12991: CALL_OW 1
12995: ST_TO_ADDR
// end ;
12996: LD_VAR 0 5
13000: RET
// export function DangerAtRange ( unit , range ) ; begin
13001: LD_INT 0
13003: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
13004: LD_ADDR_VAR 0 3
13008: PUSH
13009: LD_VAR 0 1
13013: PPUSH
13014: CALL_OW 255
13018: PPUSH
13019: LD_VAR 0 1
13023: PPUSH
13024: CALL_OW 250
13028: PPUSH
13029: LD_VAR 0 1
13033: PPUSH
13034: CALL_OW 251
13038: PPUSH
13039: LD_VAR 0 2
13043: PPUSH
13044: CALL 11304 0 4
13048: ST_TO_ADDR
// end ;
13049: LD_VAR 0 3
13053: RET
// export function DangerInArea ( side , area ) ; begin
13054: LD_INT 0
13056: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
13057: LD_ADDR_VAR 0 3
13061: PUSH
13062: LD_VAR 0 2
13066: PPUSH
13067: LD_INT 81
13069: PUSH
13070: LD_VAR 0 1
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PPUSH
13079: CALL_OW 70
13083: ST_TO_ADDR
// end ;
13084: LD_VAR 0 3
13088: RET
// export function IsExtension ( b ) ; begin
13089: LD_INT 0
13091: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
13092: LD_ADDR_VAR 0 2
13096: PUSH
13097: LD_VAR 0 1
13101: PUSH
13102: LD_INT 23
13104: PUSH
13105: LD_INT 20
13107: PUSH
13108: LD_INT 22
13110: PUSH
13111: LD_INT 17
13113: PUSH
13114: LD_INT 24
13116: PUSH
13117: LD_INT 21
13119: PUSH
13120: LD_INT 19
13122: PUSH
13123: LD_INT 16
13125: PUSH
13126: LD_INT 25
13128: PUSH
13129: LD_INT 18
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: IN
13144: ST_TO_ADDR
// end ;
13145: LD_VAR 0 2
13149: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
13150: LD_INT 0
13152: PPUSH
13153: PPUSH
13154: PPUSH
// result := [ ] ;
13155: LD_ADDR_VAR 0 3
13159: PUSH
13160: EMPTY
13161: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
13162: LD_ADDR_VAR 0 4
13166: PUSH
13167: LD_VAR 0 2
13171: PPUSH
13172: LD_INT 21
13174: PUSH
13175: LD_INT 3
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PPUSH
13182: CALL_OW 70
13186: ST_TO_ADDR
// if not tmp then
13187: LD_VAR 0 4
13191: NOT
13192: IFFALSE 13196
// exit ;
13194: GO 13254
// for i in tmp do
13196: LD_ADDR_VAR 0 5
13200: PUSH
13201: LD_VAR 0 4
13205: PUSH
13206: FOR_IN
13207: IFFALSE 13242
// if GetBase ( i ) <> base then
13209: LD_VAR 0 5
13213: PPUSH
13214: CALL_OW 274
13218: PUSH
13219: LD_VAR 0 1
13223: NONEQUAL
13224: IFFALSE 13240
// ComLinkToBase ( base , i ) ;
13226: LD_VAR 0 1
13230: PPUSH
13231: LD_VAR 0 5
13235: PPUSH
13236: CALL_OW 169
13240: GO 13206
13242: POP
13243: POP
// result := tmp ;
13244: LD_ADDR_VAR 0 3
13248: PUSH
13249: LD_VAR 0 4
13253: ST_TO_ADDR
// end ;
13254: LD_VAR 0 3
13258: RET
// export function ComComplete ( unit , b ) ; var i ; begin
13259: LD_INT 0
13261: PPUSH
13262: PPUSH
// if BuildingStatus ( b ) = bs_build then
13263: LD_VAR 0 2
13267: PPUSH
13268: CALL_OW 461
13272: PUSH
13273: LD_INT 1
13275: EQUAL
13276: IFFALSE 13336
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
13278: LD_VAR 0 1
13282: PPUSH
13283: LD_STRING h
13285: PUSH
13286: LD_VAR 0 2
13290: PPUSH
13291: CALL_OW 250
13295: PUSH
13296: LD_VAR 0 2
13300: PPUSH
13301: CALL_OW 251
13305: PUSH
13306: LD_VAR 0 2
13310: PUSH
13311: LD_INT 0
13313: PUSH
13314: LD_INT 0
13316: PUSH
13317: LD_INT 0
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: PPUSH
13332: CALL_OW 446
// end ;
13336: LD_VAR 0 3
13340: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
13341: LD_INT 0
13343: PPUSH
13344: PPUSH
13345: PPUSH
13346: PPUSH
13347: PPUSH
13348: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
13349: LD_VAR 0 1
13353: NOT
13354: PUSH
13355: LD_VAR 0 1
13359: PPUSH
13360: CALL_OW 263
13364: PUSH
13365: LD_INT 2
13367: EQUAL
13368: NOT
13369: OR
13370: IFFALSE 13374
// exit ;
13372: GO 13690
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
13374: LD_ADDR_VAR 0 6
13378: PUSH
13379: LD_INT 22
13381: PUSH
13382: LD_VAR 0 1
13386: PPUSH
13387: CALL_OW 255
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 2
13398: PUSH
13399: LD_INT 30
13401: PUSH
13402: LD_INT 36
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 34
13411: PUSH
13412: LD_INT 31
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PPUSH
13428: CALL_OW 69
13432: ST_TO_ADDR
// if not tmp then
13433: LD_VAR 0 6
13437: NOT
13438: IFFALSE 13442
// exit ;
13440: GO 13690
// result := [ ] ;
13442: LD_ADDR_VAR 0 2
13446: PUSH
13447: EMPTY
13448: ST_TO_ADDR
// for i in tmp do
13449: LD_ADDR_VAR 0 3
13453: PUSH
13454: LD_VAR 0 6
13458: PUSH
13459: FOR_IN
13460: IFFALSE 13531
// begin t := UnitsInside ( i ) ;
13462: LD_ADDR_VAR 0 4
13466: PUSH
13467: LD_VAR 0 3
13471: PPUSH
13472: CALL_OW 313
13476: ST_TO_ADDR
// if t then
13477: LD_VAR 0 4
13481: IFFALSE 13529
// for j in t do
13483: LD_ADDR_VAR 0 7
13487: PUSH
13488: LD_VAR 0 4
13492: PUSH
13493: FOR_IN
13494: IFFALSE 13527
// result := Insert ( result , result + 1 , j ) ;
13496: LD_ADDR_VAR 0 2
13500: PUSH
13501: LD_VAR 0 2
13505: PPUSH
13506: LD_VAR 0 2
13510: PUSH
13511: LD_INT 1
13513: PLUS
13514: PPUSH
13515: LD_VAR 0 7
13519: PPUSH
13520: CALL_OW 2
13524: ST_TO_ADDR
13525: GO 13493
13527: POP
13528: POP
// end ;
13529: GO 13459
13531: POP
13532: POP
// if not result then
13533: LD_VAR 0 2
13537: NOT
13538: IFFALSE 13542
// exit ;
13540: GO 13690
// mech := result [ 1 ] ;
13542: LD_ADDR_VAR 0 5
13546: PUSH
13547: LD_VAR 0 2
13551: PUSH
13552: LD_INT 1
13554: ARRAY
13555: ST_TO_ADDR
// if result > 1 then
13556: LD_VAR 0 2
13560: PUSH
13561: LD_INT 1
13563: GREATER
13564: IFFALSE 13676
// for i = 2 to result do
13566: LD_ADDR_VAR 0 3
13570: PUSH
13571: DOUBLE
13572: LD_INT 2
13574: DEC
13575: ST_TO_ADDR
13576: LD_VAR 0 2
13580: PUSH
13581: FOR_TO
13582: IFFALSE 13674
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
13584: LD_ADDR_VAR 0 4
13588: PUSH
13589: LD_VAR 0 2
13593: PUSH
13594: LD_VAR 0 3
13598: ARRAY
13599: PPUSH
13600: LD_INT 3
13602: PPUSH
13603: CALL_OW 259
13607: PUSH
13608: LD_VAR 0 2
13612: PUSH
13613: LD_VAR 0 3
13617: ARRAY
13618: PPUSH
13619: CALL_OW 432
13623: MINUS
13624: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
13625: LD_VAR 0 4
13629: PUSH
13630: LD_VAR 0 5
13634: PPUSH
13635: LD_INT 3
13637: PPUSH
13638: CALL_OW 259
13642: PUSH
13643: LD_VAR 0 5
13647: PPUSH
13648: CALL_OW 432
13652: MINUS
13653: GREATEREQUAL
13654: IFFALSE 13672
// mech := result [ i ] ;
13656: LD_ADDR_VAR 0 5
13660: PUSH
13661: LD_VAR 0 2
13665: PUSH
13666: LD_VAR 0 3
13670: ARRAY
13671: ST_TO_ADDR
// end ;
13672: GO 13581
13674: POP
13675: POP
// ComLinkTo ( vehicle , mech ) ;
13676: LD_VAR 0 1
13680: PPUSH
13681: LD_VAR 0 5
13685: PPUSH
13686: CALL_OW 135
// end ;
13690: LD_VAR 0 2
13694: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
13695: LD_INT 0
13697: PPUSH
13698: PPUSH
13699: PPUSH
13700: PPUSH
13701: PPUSH
13702: PPUSH
13703: PPUSH
13704: PPUSH
13705: PPUSH
13706: PPUSH
13707: PPUSH
13708: PPUSH
13709: PPUSH
// result := [ ] ;
13710: LD_ADDR_VAR 0 7
13714: PUSH
13715: EMPTY
13716: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13717: LD_VAR 0 1
13721: PPUSH
13722: CALL_OW 266
13726: PUSH
13727: LD_INT 0
13729: PUSH
13730: LD_INT 1
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: IN
13737: NOT
13738: IFFALSE 13742
// exit ;
13740: GO 15373
// if name then
13742: LD_VAR 0 3
13746: IFFALSE 13762
// SetBName ( base_dep , name ) ;
13748: LD_VAR 0 1
13752: PPUSH
13753: LD_VAR 0 3
13757: PPUSH
13758: CALL_OW 500
// base := GetBase ( base_dep ) ;
13762: LD_ADDR_VAR 0 15
13766: PUSH
13767: LD_VAR 0 1
13771: PPUSH
13772: CALL_OW 274
13776: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13777: LD_ADDR_VAR 0 16
13781: PUSH
13782: LD_VAR 0 1
13786: PPUSH
13787: CALL_OW 255
13791: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
13792: LD_ADDR_VAR 0 17
13796: PUSH
13797: LD_VAR 0 1
13801: PPUSH
13802: CALL_OW 248
13806: ST_TO_ADDR
// if sources then
13807: LD_VAR 0 5
13811: IFFALSE 13858
// for i = 1 to 3 do
13813: LD_ADDR_VAR 0 8
13817: PUSH
13818: DOUBLE
13819: LD_INT 1
13821: DEC
13822: ST_TO_ADDR
13823: LD_INT 3
13825: PUSH
13826: FOR_TO
13827: IFFALSE 13856
// AddResourceType ( base , i , sources [ i ] ) ;
13829: LD_VAR 0 15
13833: PPUSH
13834: LD_VAR 0 8
13838: PPUSH
13839: LD_VAR 0 5
13843: PUSH
13844: LD_VAR 0 8
13848: ARRAY
13849: PPUSH
13850: CALL_OW 276
13854: GO 13826
13856: POP
13857: POP
// buildings := GetBaseBuildings ( base , area ) ;
13858: LD_ADDR_VAR 0 18
13862: PUSH
13863: LD_VAR 0 15
13867: PPUSH
13868: LD_VAR 0 2
13872: PPUSH
13873: CALL 13150 0 2
13877: ST_TO_ADDR
// InitHc ;
13878: CALL_OW 19
// InitUc ;
13882: CALL_OW 18
// uc_side := side ;
13886: LD_ADDR_OWVAR 20
13890: PUSH
13891: LD_VAR 0 16
13895: ST_TO_ADDR
// uc_nation := nation ;
13896: LD_ADDR_OWVAR 21
13900: PUSH
13901: LD_VAR 0 17
13905: ST_TO_ADDR
// if buildings then
13906: LD_VAR 0 18
13910: IFFALSE 15232
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13912: LD_ADDR_VAR 0 19
13916: PUSH
13917: LD_VAR 0 18
13921: PPUSH
13922: LD_INT 2
13924: PUSH
13925: LD_INT 30
13927: PUSH
13928: LD_INT 29
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 30
13937: PUSH
13938: LD_INT 30
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: LIST
13949: PPUSH
13950: CALL_OW 72
13954: ST_TO_ADDR
// if tmp then
13955: LD_VAR 0 19
13959: IFFALSE 14007
// for i in tmp do
13961: LD_ADDR_VAR 0 8
13965: PUSH
13966: LD_VAR 0 19
13970: PUSH
13971: FOR_IN
13972: IFFALSE 14005
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13974: LD_VAR 0 8
13978: PPUSH
13979: CALL_OW 250
13983: PPUSH
13984: LD_VAR 0 8
13988: PPUSH
13989: CALL_OW 251
13993: PPUSH
13994: LD_VAR 0 16
13998: PPUSH
13999: CALL_OW 441
14003: GO 13971
14005: POP
14006: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
14007: LD_VAR 0 18
14011: PPUSH
14012: LD_INT 2
14014: PUSH
14015: LD_INT 30
14017: PUSH
14018: LD_INT 32
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 30
14027: PUSH
14028: LD_INT 33
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: PPUSH
14040: CALL_OW 72
14044: IFFALSE 14132
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
14046: LD_ADDR_VAR 0 8
14050: PUSH
14051: LD_VAR 0 18
14055: PPUSH
14056: LD_INT 2
14058: PUSH
14059: LD_INT 30
14061: PUSH
14062: LD_INT 32
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 30
14071: PUSH
14072: LD_INT 33
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: LIST
14083: PPUSH
14084: CALL_OW 72
14088: PUSH
14089: FOR_IN
14090: IFFALSE 14130
// begin if not GetBWeapon ( i ) then
14092: LD_VAR 0 8
14096: PPUSH
14097: CALL_OW 269
14101: NOT
14102: IFFALSE 14128
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
14104: LD_VAR 0 8
14108: PPUSH
14109: LD_VAR 0 8
14113: PPUSH
14114: LD_VAR 0 2
14118: PPUSH
14119: CALL 15378 0 2
14123: PPUSH
14124: CALL_OW 431
// end ;
14128: GO 14089
14130: POP
14131: POP
// end ; for i = 1 to personel do
14132: LD_ADDR_VAR 0 8
14136: PUSH
14137: DOUBLE
14138: LD_INT 1
14140: DEC
14141: ST_TO_ADDR
14142: LD_VAR 0 6
14146: PUSH
14147: FOR_TO
14148: IFFALSE 15212
// begin if i > 4 then
14150: LD_VAR 0 8
14154: PUSH
14155: LD_INT 4
14157: GREATER
14158: IFFALSE 14162
// break ;
14160: GO 15212
// case i of 1 :
14162: LD_VAR 0 8
14166: PUSH
14167: LD_INT 1
14169: DOUBLE
14170: EQUAL
14171: IFTRUE 14175
14173: GO 14255
14175: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
14176: LD_ADDR_VAR 0 12
14180: PUSH
14181: LD_VAR 0 18
14185: PPUSH
14186: LD_INT 22
14188: PUSH
14189: LD_VAR 0 16
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 58
14200: PUSH
14201: EMPTY
14202: LIST
14203: PUSH
14204: LD_INT 2
14206: PUSH
14207: LD_INT 30
14209: PUSH
14210: LD_INT 32
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 30
14219: PUSH
14220: LD_INT 4
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: LD_INT 30
14229: PUSH
14230: LD_INT 5
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: PPUSH
14248: CALL_OW 72
14252: ST_TO_ADDR
14253: GO 14477
14255: LD_INT 2
14257: DOUBLE
14258: EQUAL
14259: IFTRUE 14263
14261: GO 14325
14263: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
14264: LD_ADDR_VAR 0 12
14268: PUSH
14269: LD_VAR 0 18
14273: PPUSH
14274: LD_INT 22
14276: PUSH
14277: LD_VAR 0 16
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 2
14288: PUSH
14289: LD_INT 30
14291: PUSH
14292: LD_INT 0
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 30
14301: PUSH
14302: LD_INT 1
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PPUSH
14318: CALL_OW 72
14322: ST_TO_ADDR
14323: GO 14477
14325: LD_INT 3
14327: DOUBLE
14328: EQUAL
14329: IFTRUE 14333
14331: GO 14395
14333: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
14334: LD_ADDR_VAR 0 12
14338: PUSH
14339: LD_VAR 0 18
14343: PPUSH
14344: LD_INT 22
14346: PUSH
14347: LD_VAR 0 16
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 2
14358: PUSH
14359: LD_INT 30
14361: PUSH
14362: LD_INT 2
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: LD_INT 30
14371: PUSH
14372: LD_INT 3
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PPUSH
14388: CALL_OW 72
14392: ST_TO_ADDR
14393: GO 14477
14395: LD_INT 4
14397: DOUBLE
14398: EQUAL
14399: IFTRUE 14403
14401: GO 14476
14403: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
14404: LD_ADDR_VAR 0 12
14408: PUSH
14409: LD_VAR 0 18
14413: PPUSH
14414: LD_INT 22
14416: PUSH
14417: LD_VAR 0 16
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 2
14428: PUSH
14429: LD_INT 30
14431: PUSH
14432: LD_INT 6
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 30
14441: PUSH
14442: LD_INT 7
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 30
14451: PUSH
14452: LD_INT 8
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 72
14473: ST_TO_ADDR
14474: GO 14477
14476: POP
// if i = 1 then
14477: LD_VAR 0 8
14481: PUSH
14482: LD_INT 1
14484: EQUAL
14485: IFFALSE 14596
// begin tmp := [ ] ;
14487: LD_ADDR_VAR 0 19
14491: PUSH
14492: EMPTY
14493: ST_TO_ADDR
// for j in f do
14494: LD_ADDR_VAR 0 9
14498: PUSH
14499: LD_VAR 0 12
14503: PUSH
14504: FOR_IN
14505: IFFALSE 14578
// if GetBType ( j ) = b_bunker then
14507: LD_VAR 0 9
14511: PPUSH
14512: CALL_OW 266
14516: PUSH
14517: LD_INT 32
14519: EQUAL
14520: IFFALSE 14547
// tmp := Insert ( tmp , 1 , j ) else
14522: LD_ADDR_VAR 0 19
14526: PUSH
14527: LD_VAR 0 19
14531: PPUSH
14532: LD_INT 1
14534: PPUSH
14535: LD_VAR 0 9
14539: PPUSH
14540: CALL_OW 2
14544: ST_TO_ADDR
14545: GO 14576
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14547: LD_ADDR_VAR 0 19
14551: PUSH
14552: LD_VAR 0 19
14556: PPUSH
14557: LD_VAR 0 19
14561: PUSH
14562: LD_INT 1
14564: PLUS
14565: PPUSH
14566: LD_VAR 0 9
14570: PPUSH
14571: CALL_OW 2
14575: ST_TO_ADDR
14576: GO 14504
14578: POP
14579: POP
// if tmp then
14580: LD_VAR 0 19
14584: IFFALSE 14596
// f := tmp ;
14586: LD_ADDR_VAR 0 12
14590: PUSH
14591: LD_VAR 0 19
14595: ST_TO_ADDR
// end ; x := personel [ i ] ;
14596: LD_ADDR_VAR 0 13
14600: PUSH
14601: LD_VAR 0 6
14605: PUSH
14606: LD_VAR 0 8
14610: ARRAY
14611: ST_TO_ADDR
// if x = - 1 then
14612: LD_VAR 0 13
14616: PUSH
14617: LD_INT 1
14619: NEG
14620: EQUAL
14621: IFFALSE 14830
// begin for j in f do
14623: LD_ADDR_VAR 0 9
14627: PUSH
14628: LD_VAR 0 12
14632: PUSH
14633: FOR_IN
14634: IFFALSE 14826
// repeat InitHc ;
14636: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14640: LD_VAR 0 9
14644: PPUSH
14645: CALL_OW 266
14649: PUSH
14650: LD_INT 5
14652: EQUAL
14653: IFFALSE 14723
// begin if UnitsInside ( j ) < 3 then
14655: LD_VAR 0 9
14659: PPUSH
14660: CALL_OW 313
14664: PUSH
14665: LD_INT 3
14667: LESS
14668: IFFALSE 14704
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14670: LD_INT 0
14672: PPUSH
14673: LD_INT 5
14675: PUSH
14676: LD_INT 8
14678: PUSH
14679: LD_INT 9
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: LIST
14686: PUSH
14687: LD_VAR 0 17
14691: ARRAY
14692: PPUSH
14693: LD_VAR 0 4
14697: PPUSH
14698: CALL_OW 380
14702: GO 14721
// PrepareHuman ( false , i , skill ) ;
14704: LD_INT 0
14706: PPUSH
14707: LD_VAR 0 8
14711: PPUSH
14712: LD_VAR 0 4
14716: PPUSH
14717: CALL_OW 380
// end else
14721: GO 14740
// PrepareHuman ( false , i , skill ) ;
14723: LD_INT 0
14725: PPUSH
14726: LD_VAR 0 8
14730: PPUSH
14731: LD_VAR 0 4
14735: PPUSH
14736: CALL_OW 380
// un := CreateHuman ;
14740: LD_ADDR_VAR 0 14
14744: PUSH
14745: CALL_OW 44
14749: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14750: LD_ADDR_VAR 0 7
14754: PUSH
14755: LD_VAR 0 7
14759: PPUSH
14760: LD_INT 1
14762: PPUSH
14763: LD_VAR 0 14
14767: PPUSH
14768: CALL_OW 2
14772: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14773: LD_VAR 0 14
14777: PPUSH
14778: LD_VAR 0 9
14782: PPUSH
14783: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14787: LD_VAR 0 9
14791: PPUSH
14792: CALL_OW 313
14796: PUSH
14797: LD_INT 6
14799: EQUAL
14800: PUSH
14801: LD_VAR 0 9
14805: PPUSH
14806: CALL_OW 266
14810: PUSH
14811: LD_INT 32
14813: PUSH
14814: LD_INT 31
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: IN
14821: OR
14822: IFFALSE 14636
14824: GO 14633
14826: POP
14827: POP
// end else
14828: GO 15210
// for j = 1 to x do
14830: LD_ADDR_VAR 0 9
14834: PUSH
14835: DOUBLE
14836: LD_INT 1
14838: DEC
14839: ST_TO_ADDR
14840: LD_VAR 0 13
14844: PUSH
14845: FOR_TO
14846: IFFALSE 15208
// begin InitHc ;
14848: CALL_OW 19
// if not f then
14852: LD_VAR 0 12
14856: NOT
14857: IFFALSE 14946
// begin PrepareHuman ( false , i , skill ) ;
14859: LD_INT 0
14861: PPUSH
14862: LD_VAR 0 8
14866: PPUSH
14867: LD_VAR 0 4
14871: PPUSH
14872: CALL_OW 380
// un := CreateHuman ;
14876: LD_ADDR_VAR 0 14
14880: PUSH
14881: CALL_OW 44
14885: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14886: LD_ADDR_VAR 0 7
14890: PUSH
14891: LD_VAR 0 7
14895: PPUSH
14896: LD_INT 1
14898: PPUSH
14899: LD_VAR 0 14
14903: PPUSH
14904: CALL_OW 2
14908: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14909: LD_VAR 0 14
14913: PPUSH
14914: LD_VAR 0 1
14918: PPUSH
14919: CALL_OW 250
14923: PPUSH
14924: LD_VAR 0 1
14928: PPUSH
14929: CALL_OW 251
14933: PPUSH
14934: LD_INT 10
14936: PPUSH
14937: LD_INT 0
14939: PPUSH
14940: CALL_OW 50
// continue ;
14944: GO 14845
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14946: LD_VAR 0 12
14950: PUSH
14951: LD_INT 1
14953: ARRAY
14954: PPUSH
14955: CALL_OW 313
14959: PUSH
14960: LD_VAR 0 12
14964: PUSH
14965: LD_INT 1
14967: ARRAY
14968: PPUSH
14969: CALL_OW 266
14973: PUSH
14974: LD_INT 32
14976: PUSH
14977: LD_INT 31
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: IN
14984: AND
14985: PUSH
14986: LD_VAR 0 12
14990: PUSH
14991: LD_INT 1
14993: ARRAY
14994: PPUSH
14995: CALL_OW 313
14999: PUSH
15000: LD_INT 6
15002: EQUAL
15003: OR
15004: IFFALSE 15024
// f := Delete ( f , 1 ) ;
15006: LD_ADDR_VAR 0 12
15010: PUSH
15011: LD_VAR 0 12
15015: PPUSH
15016: LD_INT 1
15018: PPUSH
15019: CALL_OW 3
15023: ST_TO_ADDR
// if not f then
15024: LD_VAR 0 12
15028: NOT
15029: IFFALSE 15047
// begin x := x + 2 ;
15031: LD_ADDR_VAR 0 13
15035: PUSH
15036: LD_VAR 0 13
15040: PUSH
15041: LD_INT 2
15043: PLUS
15044: ST_TO_ADDR
// continue ;
15045: GO 14845
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
15047: LD_VAR 0 12
15051: PUSH
15052: LD_INT 1
15054: ARRAY
15055: PPUSH
15056: CALL_OW 266
15060: PUSH
15061: LD_INT 5
15063: EQUAL
15064: IFFALSE 15138
// begin if UnitsInside ( f [ 1 ] ) < 3 then
15066: LD_VAR 0 12
15070: PUSH
15071: LD_INT 1
15073: ARRAY
15074: PPUSH
15075: CALL_OW 313
15079: PUSH
15080: LD_INT 3
15082: LESS
15083: IFFALSE 15119
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15085: LD_INT 0
15087: PPUSH
15088: LD_INT 5
15090: PUSH
15091: LD_INT 8
15093: PUSH
15094: LD_INT 9
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: PUSH
15102: LD_VAR 0 17
15106: ARRAY
15107: PPUSH
15108: LD_VAR 0 4
15112: PPUSH
15113: CALL_OW 380
15117: GO 15136
// PrepareHuman ( false , i , skill ) ;
15119: LD_INT 0
15121: PPUSH
15122: LD_VAR 0 8
15126: PPUSH
15127: LD_VAR 0 4
15131: PPUSH
15132: CALL_OW 380
// end else
15136: GO 15155
// PrepareHuman ( false , i , skill ) ;
15138: LD_INT 0
15140: PPUSH
15141: LD_VAR 0 8
15145: PPUSH
15146: LD_VAR 0 4
15150: PPUSH
15151: CALL_OW 380
// un := CreateHuman ;
15155: LD_ADDR_VAR 0 14
15159: PUSH
15160: CALL_OW 44
15164: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15165: LD_ADDR_VAR 0 7
15169: PUSH
15170: LD_VAR 0 7
15174: PPUSH
15175: LD_INT 1
15177: PPUSH
15178: LD_VAR 0 14
15182: PPUSH
15183: CALL_OW 2
15187: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
15188: LD_VAR 0 14
15192: PPUSH
15193: LD_VAR 0 12
15197: PUSH
15198: LD_INT 1
15200: ARRAY
15201: PPUSH
15202: CALL_OW 52
// end ;
15206: GO 14845
15208: POP
15209: POP
// end ;
15210: GO 14147
15212: POP
15213: POP
// result := result ^ buildings ;
15214: LD_ADDR_VAR 0 7
15218: PUSH
15219: LD_VAR 0 7
15223: PUSH
15224: LD_VAR 0 18
15228: ADD
15229: ST_TO_ADDR
// end else
15230: GO 15373
// begin for i = 1 to personel do
15232: LD_ADDR_VAR 0 8
15236: PUSH
15237: DOUBLE
15238: LD_INT 1
15240: DEC
15241: ST_TO_ADDR
15242: LD_VAR 0 6
15246: PUSH
15247: FOR_TO
15248: IFFALSE 15371
// begin if i > 4 then
15250: LD_VAR 0 8
15254: PUSH
15255: LD_INT 4
15257: GREATER
15258: IFFALSE 15262
// break ;
15260: GO 15371
// x := personel [ i ] ;
15262: LD_ADDR_VAR 0 13
15266: PUSH
15267: LD_VAR 0 6
15271: PUSH
15272: LD_VAR 0 8
15276: ARRAY
15277: ST_TO_ADDR
// if x = - 1 then
15278: LD_VAR 0 13
15282: PUSH
15283: LD_INT 1
15285: NEG
15286: EQUAL
15287: IFFALSE 15291
// continue ;
15289: GO 15247
// PrepareHuman ( false , i , skill ) ;
15291: LD_INT 0
15293: PPUSH
15294: LD_VAR 0 8
15298: PPUSH
15299: LD_VAR 0 4
15303: PPUSH
15304: CALL_OW 380
// un := CreateHuman ;
15308: LD_ADDR_VAR 0 14
15312: PUSH
15313: CALL_OW 44
15317: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15318: LD_VAR 0 14
15322: PPUSH
15323: LD_VAR 0 1
15327: PPUSH
15328: CALL_OW 250
15332: PPUSH
15333: LD_VAR 0 1
15337: PPUSH
15338: CALL_OW 251
15342: PPUSH
15343: LD_INT 10
15345: PPUSH
15346: LD_INT 0
15348: PPUSH
15349: CALL_OW 50
// result := result ^ un ;
15353: LD_ADDR_VAR 0 7
15357: PUSH
15358: LD_VAR 0 7
15362: PUSH
15363: LD_VAR 0 14
15367: ADD
15368: ST_TO_ADDR
// end ;
15369: GO 15247
15371: POP
15372: POP
// end ; end ;
15373: LD_VAR 0 7
15377: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
15378: LD_INT 0
15380: PPUSH
15381: PPUSH
15382: PPUSH
15383: PPUSH
15384: PPUSH
15385: PPUSH
15386: PPUSH
15387: PPUSH
15388: PPUSH
15389: PPUSH
15390: PPUSH
15391: PPUSH
15392: PPUSH
15393: PPUSH
15394: PPUSH
15395: PPUSH
// result := false ;
15396: LD_ADDR_VAR 0 3
15400: PUSH
15401: LD_INT 0
15403: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
15404: LD_VAR 0 1
15408: NOT
15409: PUSH
15410: LD_VAR 0 1
15414: PPUSH
15415: CALL_OW 266
15419: PUSH
15420: LD_INT 32
15422: PUSH
15423: LD_INT 33
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: IN
15430: NOT
15431: OR
15432: IFFALSE 15436
// exit ;
15434: GO 16572
// nat := GetNation ( tower ) ;
15436: LD_ADDR_VAR 0 12
15440: PUSH
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 248
15450: ST_TO_ADDR
// side := GetSide ( tower ) ;
15451: LD_ADDR_VAR 0 16
15455: PUSH
15456: LD_VAR 0 1
15460: PPUSH
15461: CALL_OW 255
15465: ST_TO_ADDR
// x := GetX ( tower ) ;
15466: LD_ADDR_VAR 0 10
15470: PUSH
15471: LD_VAR 0 1
15475: PPUSH
15476: CALL_OW 250
15480: ST_TO_ADDR
// y := GetY ( tower ) ;
15481: LD_ADDR_VAR 0 11
15485: PUSH
15486: LD_VAR 0 1
15490: PPUSH
15491: CALL_OW 251
15495: ST_TO_ADDR
// if not x or not y then
15496: LD_VAR 0 10
15500: NOT
15501: PUSH
15502: LD_VAR 0 11
15506: NOT
15507: OR
15508: IFFALSE 15512
// exit ;
15510: GO 16572
// weapon := 0 ;
15512: LD_ADDR_VAR 0 18
15516: PUSH
15517: LD_INT 0
15519: ST_TO_ADDR
// fac_list := [ ] ;
15520: LD_ADDR_VAR 0 17
15524: PUSH
15525: EMPTY
15526: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
15527: LD_ADDR_VAR 0 6
15531: PUSH
15532: LD_VAR 0 1
15536: PPUSH
15537: CALL_OW 274
15541: PPUSH
15542: LD_VAR 0 2
15546: PPUSH
15547: CALL 13150 0 2
15551: PPUSH
15552: LD_INT 30
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PPUSH
15562: CALL_OW 72
15566: ST_TO_ADDR
// if not factories then
15567: LD_VAR 0 6
15571: NOT
15572: IFFALSE 15576
// exit ;
15574: GO 16572
// for i in factories do
15576: LD_ADDR_VAR 0 8
15580: PUSH
15581: LD_VAR 0 6
15585: PUSH
15586: FOR_IN
15587: IFFALSE 15612
// fac_list := fac_list union AvailableWeaponList ( i ) ;
15589: LD_ADDR_VAR 0 17
15593: PUSH
15594: LD_VAR 0 17
15598: PUSH
15599: LD_VAR 0 8
15603: PPUSH
15604: CALL_OW 478
15608: UNION
15609: ST_TO_ADDR
15610: GO 15586
15612: POP
15613: POP
// if not fac_list then
15614: LD_VAR 0 17
15618: NOT
15619: IFFALSE 15623
// exit ;
15621: GO 16572
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
15623: LD_ADDR_VAR 0 5
15627: PUSH
15628: LD_INT 4
15630: PUSH
15631: LD_INT 5
15633: PUSH
15634: LD_INT 9
15636: PUSH
15637: LD_INT 10
15639: PUSH
15640: LD_INT 6
15642: PUSH
15643: LD_INT 7
15645: PUSH
15646: LD_INT 11
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 27
15660: PUSH
15661: LD_INT 28
15663: PUSH
15664: LD_INT 26
15666: PUSH
15667: LD_INT 30
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 43
15678: PUSH
15679: LD_INT 44
15681: PUSH
15682: LD_INT 46
15684: PUSH
15685: LD_INT 45
15687: PUSH
15688: LD_INT 47
15690: PUSH
15691: LD_INT 49
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: PUSH
15707: LD_VAR 0 12
15711: ARRAY
15712: ST_TO_ADDR
// for i in list do
15713: LD_ADDR_VAR 0 8
15717: PUSH
15718: LD_VAR 0 5
15722: PUSH
15723: FOR_IN
15724: IFFALSE 15757
// if not i in fac_list then
15726: LD_VAR 0 8
15730: PUSH
15731: LD_VAR 0 17
15735: IN
15736: NOT
15737: IFFALSE 15755
// list := list diff i ;
15739: LD_ADDR_VAR 0 5
15743: PUSH
15744: LD_VAR 0 5
15748: PUSH
15749: LD_VAR 0 8
15753: DIFF
15754: ST_TO_ADDR
15755: GO 15723
15757: POP
15758: POP
// if not list then
15759: LD_VAR 0 5
15763: NOT
15764: IFFALSE 15768
// exit ;
15766: GO 16572
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
15768: LD_VAR 0 12
15772: PUSH
15773: LD_INT 3
15775: EQUAL
15776: PUSH
15777: LD_INT 49
15779: PUSH
15780: LD_VAR 0 5
15784: IN
15785: AND
15786: PUSH
15787: LD_INT 31
15789: PPUSH
15790: LD_VAR 0 16
15794: PPUSH
15795: CALL_OW 321
15799: PUSH
15800: LD_INT 2
15802: EQUAL
15803: AND
15804: IFFALSE 15864
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
15806: LD_INT 22
15808: PUSH
15809: LD_VAR 0 16
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 35
15820: PUSH
15821: LD_INT 49
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 91
15830: PUSH
15831: LD_VAR 0 1
15835: PUSH
15836: LD_INT 10
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: PPUSH
15849: CALL_OW 69
15853: NOT
15854: IFFALSE 15864
// weapon := ru_time_lapser ;
15856: LD_ADDR_VAR 0 18
15860: PUSH
15861: LD_INT 49
15863: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
15864: LD_VAR 0 12
15868: PUSH
15869: LD_INT 1
15871: PUSH
15872: LD_INT 2
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: IN
15879: PUSH
15880: LD_INT 11
15882: PUSH
15883: LD_VAR 0 5
15887: IN
15888: PUSH
15889: LD_INT 30
15891: PUSH
15892: LD_VAR 0 5
15896: IN
15897: OR
15898: AND
15899: PUSH
15900: LD_INT 6
15902: PPUSH
15903: LD_VAR 0 16
15907: PPUSH
15908: CALL_OW 321
15912: PUSH
15913: LD_INT 2
15915: EQUAL
15916: AND
15917: IFFALSE 16082
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
15919: LD_INT 22
15921: PUSH
15922: LD_VAR 0 16
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 2
15933: PUSH
15934: LD_INT 35
15936: PUSH
15937: LD_INT 11
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 35
15946: PUSH
15947: LD_INT 30
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 91
15961: PUSH
15962: LD_VAR 0 1
15966: PUSH
15967: LD_INT 18
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: LIST
15979: PPUSH
15980: CALL_OW 69
15984: NOT
15985: PUSH
15986: LD_INT 22
15988: PUSH
15989: LD_VAR 0 16
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: LD_INT 30
16003: PUSH
16004: LD_INT 32
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 30
16013: PUSH
16014: LD_INT 33
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 91
16028: PUSH
16029: LD_VAR 0 1
16033: PUSH
16034: LD_INT 12
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: LIST
16046: PUSH
16047: EMPTY
16048: LIST
16049: PPUSH
16050: CALL_OW 69
16054: PUSH
16055: LD_INT 2
16057: GREATER
16058: AND
16059: IFFALSE 16082
// weapon := [ us_radar , ar_radar ] [ nat ] ;
16061: LD_ADDR_VAR 0 18
16065: PUSH
16066: LD_INT 11
16068: PUSH
16069: LD_INT 30
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_VAR 0 12
16080: ARRAY
16081: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
16082: LD_VAR 0 18
16086: NOT
16087: PUSH
16088: LD_INT 40
16090: PPUSH
16091: LD_VAR 0 16
16095: PPUSH
16096: CALL_OW 321
16100: PUSH
16101: LD_INT 2
16103: EQUAL
16104: AND
16105: PUSH
16106: LD_INT 7
16108: PUSH
16109: LD_VAR 0 5
16113: IN
16114: PUSH
16115: LD_INT 28
16117: PUSH
16118: LD_VAR 0 5
16122: IN
16123: OR
16124: PUSH
16125: LD_INT 45
16127: PUSH
16128: LD_VAR 0 5
16132: IN
16133: OR
16134: AND
16135: IFFALSE 16389
// begin hex := GetHexInfo ( x , y ) ;
16137: LD_ADDR_VAR 0 4
16141: PUSH
16142: LD_VAR 0 10
16146: PPUSH
16147: LD_VAR 0 11
16151: PPUSH
16152: CALL_OW 546
16156: ST_TO_ADDR
// if hex [ 1 ] then
16157: LD_VAR 0 4
16161: PUSH
16162: LD_INT 1
16164: ARRAY
16165: IFFALSE 16169
// exit ;
16167: GO 16572
// height := hex [ 2 ] ;
16169: LD_ADDR_VAR 0 15
16173: PUSH
16174: LD_VAR 0 4
16178: PUSH
16179: LD_INT 2
16181: ARRAY
16182: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
16183: LD_ADDR_VAR 0 14
16187: PUSH
16188: LD_INT 0
16190: PUSH
16191: LD_INT 2
16193: PUSH
16194: LD_INT 3
16196: PUSH
16197: LD_INT 5
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: ST_TO_ADDR
// for i in tmp do
16206: LD_ADDR_VAR 0 8
16210: PUSH
16211: LD_VAR 0 14
16215: PUSH
16216: FOR_IN
16217: IFFALSE 16387
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
16219: LD_ADDR_VAR 0 9
16223: PUSH
16224: LD_VAR 0 10
16228: PPUSH
16229: LD_VAR 0 8
16233: PPUSH
16234: LD_INT 5
16236: PPUSH
16237: CALL_OW 272
16241: PUSH
16242: LD_VAR 0 11
16246: PPUSH
16247: LD_VAR 0 8
16251: PPUSH
16252: LD_INT 5
16254: PPUSH
16255: CALL_OW 273
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
16264: LD_VAR 0 9
16268: PUSH
16269: LD_INT 1
16271: ARRAY
16272: PPUSH
16273: LD_VAR 0 9
16277: PUSH
16278: LD_INT 2
16280: ARRAY
16281: PPUSH
16282: CALL_OW 488
16286: IFFALSE 16385
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
16288: LD_ADDR_VAR 0 4
16292: PUSH
16293: LD_VAR 0 9
16297: PUSH
16298: LD_INT 1
16300: ARRAY
16301: PPUSH
16302: LD_VAR 0 9
16306: PUSH
16307: LD_INT 2
16309: ARRAY
16310: PPUSH
16311: CALL_OW 546
16315: ST_TO_ADDR
// if hex [ 1 ] then
16316: LD_VAR 0 4
16320: PUSH
16321: LD_INT 1
16323: ARRAY
16324: IFFALSE 16328
// continue ;
16326: GO 16216
// h := hex [ 2 ] ;
16328: LD_ADDR_VAR 0 13
16332: PUSH
16333: LD_VAR 0 4
16337: PUSH
16338: LD_INT 2
16340: ARRAY
16341: ST_TO_ADDR
// if h + 7 < height then
16342: LD_VAR 0 13
16346: PUSH
16347: LD_INT 7
16349: PLUS
16350: PUSH
16351: LD_VAR 0 15
16355: LESS
16356: IFFALSE 16385
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
16358: LD_ADDR_VAR 0 18
16362: PUSH
16363: LD_INT 7
16365: PUSH
16366: LD_INT 28
16368: PUSH
16369: LD_INT 45
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: PUSH
16377: LD_VAR 0 12
16381: ARRAY
16382: ST_TO_ADDR
// break ;
16383: GO 16387
// end ; end ; end ;
16385: GO 16216
16387: POP
16388: POP
// end ; if not weapon then
16389: LD_VAR 0 18
16393: NOT
16394: IFFALSE 16454
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
16396: LD_ADDR_VAR 0 5
16400: PUSH
16401: LD_VAR 0 5
16405: PUSH
16406: LD_INT 11
16408: PUSH
16409: LD_INT 30
16411: PUSH
16412: LD_INT 49
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: DIFF
16420: ST_TO_ADDR
// if not list then
16421: LD_VAR 0 5
16425: NOT
16426: IFFALSE 16430
// exit ;
16428: GO 16572
// weapon := list [ rand ( 1 , list ) ] ;
16430: LD_ADDR_VAR 0 18
16434: PUSH
16435: LD_VAR 0 5
16439: PUSH
16440: LD_INT 1
16442: PPUSH
16443: LD_VAR 0 5
16447: PPUSH
16448: CALL_OW 12
16452: ARRAY
16453: ST_TO_ADDR
// end ; if weapon then
16454: LD_VAR 0 18
16458: IFFALSE 16572
// begin tmp := CostOfWeapon ( weapon ) ;
16460: LD_ADDR_VAR 0 14
16464: PUSH
16465: LD_VAR 0 18
16469: PPUSH
16470: CALL_OW 451
16474: ST_TO_ADDR
// j := GetBase ( tower ) ;
16475: LD_ADDR_VAR 0 9
16479: PUSH
16480: LD_VAR 0 1
16484: PPUSH
16485: CALL_OW 274
16489: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
16490: LD_VAR 0 9
16494: PPUSH
16495: LD_INT 1
16497: PPUSH
16498: CALL_OW 275
16502: PUSH
16503: LD_VAR 0 14
16507: PUSH
16508: LD_INT 1
16510: ARRAY
16511: GREATEREQUAL
16512: PUSH
16513: LD_VAR 0 9
16517: PPUSH
16518: LD_INT 2
16520: PPUSH
16521: CALL_OW 275
16525: PUSH
16526: LD_VAR 0 14
16530: PUSH
16531: LD_INT 2
16533: ARRAY
16534: GREATEREQUAL
16535: AND
16536: PUSH
16537: LD_VAR 0 9
16541: PPUSH
16542: LD_INT 3
16544: PPUSH
16545: CALL_OW 275
16549: PUSH
16550: LD_VAR 0 14
16554: PUSH
16555: LD_INT 3
16557: ARRAY
16558: GREATEREQUAL
16559: AND
16560: IFFALSE 16572
// result := weapon ;
16562: LD_ADDR_VAR 0 3
16566: PUSH
16567: LD_VAR 0 18
16571: ST_TO_ADDR
// end ; end ;
16572: LD_VAR 0 3
16576: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
16577: LD_INT 0
16579: PPUSH
16580: PPUSH
// result := true ;
16581: LD_ADDR_VAR 0 3
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// if array1 = array2 then
16589: LD_VAR 0 1
16593: PUSH
16594: LD_VAR 0 2
16598: EQUAL
16599: IFFALSE 16659
// begin for i = 1 to array1 do
16601: LD_ADDR_VAR 0 4
16605: PUSH
16606: DOUBLE
16607: LD_INT 1
16609: DEC
16610: ST_TO_ADDR
16611: LD_VAR 0 1
16615: PUSH
16616: FOR_TO
16617: IFFALSE 16655
// if array1 [ i ] <> array2 [ i ] then
16619: LD_VAR 0 1
16623: PUSH
16624: LD_VAR 0 4
16628: ARRAY
16629: PUSH
16630: LD_VAR 0 2
16634: PUSH
16635: LD_VAR 0 4
16639: ARRAY
16640: NONEQUAL
16641: IFFALSE 16653
// begin result := false ;
16643: LD_ADDR_VAR 0 3
16647: PUSH
16648: LD_INT 0
16650: ST_TO_ADDR
// break ;
16651: GO 16655
// end ;
16653: GO 16616
16655: POP
16656: POP
// end else
16657: GO 16667
// result := false ;
16659: LD_ADDR_VAR 0 3
16663: PUSH
16664: LD_INT 0
16666: ST_TO_ADDR
// end ;
16667: LD_VAR 0 3
16671: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
16672: LD_INT 0
16674: PPUSH
16675: PPUSH
16676: PPUSH
// pom := GetBase ( fac ) ;
16677: LD_ADDR_VAR 0 5
16681: PUSH
16682: LD_VAR 0 1
16686: PPUSH
16687: CALL_OW 274
16691: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
16692: LD_ADDR_VAR 0 4
16696: PUSH
16697: LD_VAR 0 2
16701: PUSH
16702: LD_INT 1
16704: ARRAY
16705: PPUSH
16706: LD_VAR 0 2
16710: PUSH
16711: LD_INT 2
16713: ARRAY
16714: PPUSH
16715: LD_VAR 0 2
16719: PUSH
16720: LD_INT 3
16722: ARRAY
16723: PPUSH
16724: LD_VAR 0 2
16728: PUSH
16729: LD_INT 4
16731: ARRAY
16732: PPUSH
16733: CALL_OW 449
16737: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16738: LD_ADDR_VAR 0 3
16742: PUSH
16743: LD_VAR 0 5
16747: PPUSH
16748: LD_INT 1
16750: PPUSH
16751: CALL_OW 275
16755: PUSH
16756: LD_VAR 0 4
16760: PUSH
16761: LD_INT 1
16763: ARRAY
16764: GREATEREQUAL
16765: PUSH
16766: LD_VAR 0 5
16770: PPUSH
16771: LD_INT 2
16773: PPUSH
16774: CALL_OW 275
16778: PUSH
16779: LD_VAR 0 4
16783: PUSH
16784: LD_INT 2
16786: ARRAY
16787: GREATEREQUAL
16788: AND
16789: PUSH
16790: LD_VAR 0 5
16794: PPUSH
16795: LD_INT 3
16797: PPUSH
16798: CALL_OW 275
16802: PUSH
16803: LD_VAR 0 4
16807: PUSH
16808: LD_INT 3
16810: ARRAY
16811: GREATEREQUAL
16812: AND
16813: ST_TO_ADDR
// end ;
16814: LD_VAR 0 3
16818: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
16819: LD_INT 0
16821: PPUSH
16822: PPUSH
16823: PPUSH
16824: PPUSH
// pom := GetBase ( building ) ;
16825: LD_ADDR_VAR 0 3
16829: PUSH
16830: LD_VAR 0 1
16834: PPUSH
16835: CALL_OW 274
16839: ST_TO_ADDR
// if not pom then
16840: LD_VAR 0 3
16844: NOT
16845: IFFALSE 16849
// exit ;
16847: GO 17019
// btype := GetBType ( building ) ;
16849: LD_ADDR_VAR 0 5
16853: PUSH
16854: LD_VAR 0 1
16858: PPUSH
16859: CALL_OW 266
16863: ST_TO_ADDR
// if btype = b_armoury then
16864: LD_VAR 0 5
16868: PUSH
16869: LD_INT 4
16871: EQUAL
16872: IFFALSE 16882
// btype := b_barracks ;
16874: LD_ADDR_VAR 0 5
16878: PUSH
16879: LD_INT 5
16881: ST_TO_ADDR
// if btype = b_depot then
16882: LD_VAR 0 5
16886: PUSH
16887: LD_INT 0
16889: EQUAL
16890: IFFALSE 16900
// btype := b_warehouse ;
16892: LD_ADDR_VAR 0 5
16896: PUSH
16897: LD_INT 1
16899: ST_TO_ADDR
// if btype = b_workshop then
16900: LD_VAR 0 5
16904: PUSH
16905: LD_INT 2
16907: EQUAL
16908: IFFALSE 16918
// btype := b_factory ;
16910: LD_ADDR_VAR 0 5
16914: PUSH
16915: LD_INT 3
16917: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16918: LD_ADDR_VAR 0 4
16922: PUSH
16923: LD_VAR 0 5
16927: PPUSH
16928: LD_VAR 0 1
16932: PPUSH
16933: CALL_OW 248
16937: PPUSH
16938: CALL_OW 450
16942: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16943: LD_ADDR_VAR 0 2
16947: PUSH
16948: LD_VAR 0 3
16952: PPUSH
16953: LD_INT 1
16955: PPUSH
16956: CALL_OW 275
16960: PUSH
16961: LD_VAR 0 4
16965: PUSH
16966: LD_INT 1
16968: ARRAY
16969: GREATEREQUAL
16970: PUSH
16971: LD_VAR 0 3
16975: PPUSH
16976: LD_INT 2
16978: PPUSH
16979: CALL_OW 275
16983: PUSH
16984: LD_VAR 0 4
16988: PUSH
16989: LD_INT 2
16991: ARRAY
16992: GREATEREQUAL
16993: AND
16994: PUSH
16995: LD_VAR 0 3
16999: PPUSH
17000: LD_INT 3
17002: PPUSH
17003: CALL_OW 275
17007: PUSH
17008: LD_VAR 0 4
17012: PUSH
17013: LD_INT 3
17015: ARRAY
17016: GREATEREQUAL
17017: AND
17018: ST_TO_ADDR
// end ;
17019: LD_VAR 0 2
17023: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
17024: LD_INT 0
17026: PPUSH
17027: PPUSH
17028: PPUSH
// pom := GetBase ( building ) ;
17029: LD_ADDR_VAR 0 4
17033: PUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: CALL_OW 274
17043: ST_TO_ADDR
// if not pom then
17044: LD_VAR 0 4
17048: NOT
17049: IFFALSE 17053
// exit ;
17051: GO 17154
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
17053: LD_ADDR_VAR 0 5
17057: PUSH
17058: LD_VAR 0 2
17062: PPUSH
17063: LD_VAR 0 1
17067: PPUSH
17068: CALL_OW 248
17072: PPUSH
17073: CALL_OW 450
17077: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17078: LD_ADDR_VAR 0 3
17082: PUSH
17083: LD_VAR 0 4
17087: PPUSH
17088: LD_INT 1
17090: PPUSH
17091: CALL_OW 275
17095: PUSH
17096: LD_VAR 0 5
17100: PUSH
17101: LD_INT 1
17103: ARRAY
17104: GREATEREQUAL
17105: PUSH
17106: LD_VAR 0 4
17110: PPUSH
17111: LD_INT 2
17113: PPUSH
17114: CALL_OW 275
17118: PUSH
17119: LD_VAR 0 5
17123: PUSH
17124: LD_INT 2
17126: ARRAY
17127: GREATEREQUAL
17128: AND
17129: PUSH
17130: LD_VAR 0 4
17134: PPUSH
17135: LD_INT 3
17137: PPUSH
17138: CALL_OW 275
17142: PUSH
17143: LD_VAR 0 5
17147: PUSH
17148: LD_INT 3
17150: ARRAY
17151: GREATEREQUAL
17152: AND
17153: ST_TO_ADDR
// end ;
17154: LD_VAR 0 3
17158: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
17159: LD_INT 0
17161: PPUSH
17162: PPUSH
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
// result := false ;
17171: LD_ADDR_VAR 0 6
17175: PUSH
17176: LD_INT 0
17178: ST_TO_ADDR
// if not base or not btype or not x or not y then
17179: LD_VAR 0 1
17183: NOT
17184: PUSH
17185: LD_VAR 0 2
17189: NOT
17190: OR
17191: PUSH
17192: LD_VAR 0 3
17196: NOT
17197: OR
17198: PUSH
17199: LD_VAR 0 4
17203: NOT
17204: OR
17205: IFFALSE 17209
// exit ;
17207: GO 17818
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
17209: LD_ADDR_VAR 0 12
17213: PUSH
17214: LD_VAR 0 2
17218: PPUSH
17219: LD_VAR 0 3
17223: PPUSH
17224: LD_VAR 0 4
17228: PPUSH
17229: LD_VAR 0 5
17233: PPUSH
17234: LD_VAR 0 1
17238: PUSH
17239: LD_INT 1
17241: ARRAY
17242: PPUSH
17243: CALL_OW 248
17247: PPUSH
17248: LD_INT 0
17250: PPUSH
17251: CALL 18655 0 6
17255: ST_TO_ADDR
// if not hexes then
17256: LD_VAR 0 12
17260: NOT
17261: IFFALSE 17265
// exit ;
17263: GO 17818
// for i = 1 to hexes do
17265: LD_ADDR_VAR 0 7
17269: PUSH
17270: DOUBLE
17271: LD_INT 1
17273: DEC
17274: ST_TO_ADDR
17275: LD_VAR 0 12
17279: PUSH
17280: FOR_TO
17281: IFFALSE 17816
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17283: LD_ADDR_VAR 0 11
17287: PUSH
17288: LD_VAR 0 12
17292: PUSH
17293: LD_VAR 0 7
17297: ARRAY
17298: PUSH
17299: LD_INT 1
17301: ARRAY
17302: PPUSH
17303: LD_VAR 0 12
17307: PUSH
17308: LD_VAR 0 7
17312: ARRAY
17313: PUSH
17314: LD_INT 2
17316: ARRAY
17317: PPUSH
17318: CALL_OW 428
17322: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
17323: LD_VAR 0 12
17327: PUSH
17328: LD_VAR 0 7
17332: ARRAY
17333: PUSH
17334: LD_INT 1
17336: ARRAY
17337: PPUSH
17338: LD_VAR 0 12
17342: PUSH
17343: LD_VAR 0 7
17347: ARRAY
17348: PUSH
17349: LD_INT 2
17351: ARRAY
17352: PPUSH
17353: CALL_OW 351
17357: PUSH
17358: LD_VAR 0 12
17362: PUSH
17363: LD_VAR 0 7
17367: ARRAY
17368: PUSH
17369: LD_INT 1
17371: ARRAY
17372: PPUSH
17373: LD_VAR 0 12
17377: PUSH
17378: LD_VAR 0 7
17382: ARRAY
17383: PUSH
17384: LD_INT 2
17386: ARRAY
17387: PPUSH
17388: CALL_OW 488
17392: NOT
17393: OR
17394: PUSH
17395: LD_VAR 0 11
17399: PPUSH
17400: CALL_OW 247
17404: PUSH
17405: LD_INT 3
17407: EQUAL
17408: OR
17409: IFFALSE 17415
// exit ;
17411: POP
17412: POP
17413: GO 17818
// if not tmp or not tmp in base then
17415: LD_VAR 0 11
17419: NOT
17420: PUSH
17421: LD_VAR 0 11
17425: PUSH
17426: LD_VAR 0 1
17430: IN
17431: NOT
17432: OR
17433: IFFALSE 17437
// continue ;
17435: GO 17280
// result := true ;
17437: LD_ADDR_VAR 0 6
17441: PUSH
17442: LD_INT 1
17444: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17445: LD_ADDR_VAR 0 15
17449: PUSH
17450: LD_VAR 0 1
17454: PPUSH
17455: LD_INT 22
17457: PUSH
17458: LD_VAR 0 11
17462: PPUSH
17463: CALL_OW 255
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 2
17474: PUSH
17475: LD_INT 30
17477: PUSH
17478: LD_INT 0
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 30
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 72
17508: ST_TO_ADDR
// if dep then
17509: LD_VAR 0 15
17513: IFFALSE 17649
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
17515: LD_ADDR_VAR 0 14
17519: PUSH
17520: LD_VAR 0 15
17524: PUSH
17525: LD_INT 1
17527: ARRAY
17528: PPUSH
17529: CALL_OW 250
17533: PPUSH
17534: LD_VAR 0 15
17538: PUSH
17539: LD_INT 1
17541: ARRAY
17542: PPUSH
17543: CALL_OW 254
17547: PPUSH
17548: LD_INT 5
17550: PPUSH
17551: CALL_OW 272
17555: PUSH
17556: LD_VAR 0 15
17560: PUSH
17561: LD_INT 1
17563: ARRAY
17564: PPUSH
17565: CALL_OW 251
17569: PPUSH
17570: LD_VAR 0 15
17574: PUSH
17575: LD_INT 1
17577: ARRAY
17578: PPUSH
17579: CALL_OW 254
17583: PPUSH
17584: LD_INT 5
17586: PPUSH
17587: CALL_OW 273
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
17596: LD_VAR 0 14
17600: PUSH
17601: LD_INT 1
17603: ARRAY
17604: PPUSH
17605: LD_VAR 0 14
17609: PUSH
17610: LD_INT 2
17612: ARRAY
17613: PPUSH
17614: CALL_OW 488
17618: IFFALSE 17649
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
17620: LD_VAR 0 11
17624: PPUSH
17625: LD_VAR 0 14
17629: PUSH
17630: LD_INT 1
17632: ARRAY
17633: PPUSH
17634: LD_VAR 0 14
17638: PUSH
17639: LD_INT 2
17641: ARRAY
17642: PPUSH
17643: CALL_OW 111
// continue ;
17647: GO 17280
// end ; end ; r := GetDir ( tmp ) ;
17649: LD_ADDR_VAR 0 13
17653: PUSH
17654: LD_VAR 0 11
17658: PPUSH
17659: CALL_OW 254
17663: ST_TO_ADDR
// if r = 5 then
17664: LD_VAR 0 13
17668: PUSH
17669: LD_INT 5
17671: EQUAL
17672: IFFALSE 17682
// r := 0 ;
17674: LD_ADDR_VAR 0 13
17678: PUSH
17679: LD_INT 0
17681: ST_TO_ADDR
// for j = r to 5 do
17682: LD_ADDR_VAR 0 8
17686: PUSH
17687: DOUBLE
17688: LD_VAR 0 13
17692: DEC
17693: ST_TO_ADDR
17694: LD_INT 5
17696: PUSH
17697: FOR_TO
17698: IFFALSE 17812
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17700: LD_ADDR_VAR 0 9
17704: PUSH
17705: LD_VAR 0 11
17709: PPUSH
17710: CALL_OW 250
17714: PPUSH
17715: LD_VAR 0 8
17719: PPUSH
17720: LD_INT 2
17722: PPUSH
17723: CALL_OW 272
17727: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17728: LD_ADDR_VAR 0 10
17732: PUSH
17733: LD_VAR 0 11
17737: PPUSH
17738: CALL_OW 251
17742: PPUSH
17743: LD_VAR 0 8
17747: PPUSH
17748: LD_INT 2
17750: PPUSH
17751: CALL_OW 273
17755: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17756: LD_VAR 0 9
17760: PPUSH
17761: LD_VAR 0 10
17765: PPUSH
17766: CALL_OW 488
17770: PUSH
17771: LD_VAR 0 9
17775: PPUSH
17776: LD_VAR 0 10
17780: PPUSH
17781: CALL_OW 428
17785: NOT
17786: AND
17787: IFFALSE 17810
// begin ComMoveXY ( tmp , _x , _y ) ;
17789: LD_VAR 0 11
17793: PPUSH
17794: LD_VAR 0 9
17798: PPUSH
17799: LD_VAR 0 10
17803: PPUSH
17804: CALL_OW 111
// break ;
17808: GO 17812
// end ; end ;
17810: GO 17697
17812: POP
17813: POP
// end ;
17814: GO 17280
17816: POP
17817: POP
// end ;
17818: LD_VAR 0 6
17822: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
17823: LD_INT 0
17825: PPUSH
17826: PPUSH
17827: PPUSH
17828: PPUSH
17829: PPUSH
17830: PPUSH
17831: PPUSH
17832: PPUSH
17833: PPUSH
17834: PPUSH
// result := false ;
17835: LD_ADDR_VAR 0 6
17839: PUSH
17840: LD_INT 0
17842: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17843: LD_VAR 0 1
17847: NOT
17848: PUSH
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 266
17858: PUSH
17859: LD_INT 0
17861: PUSH
17862: LD_INT 1
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: IN
17869: NOT
17870: OR
17871: PUSH
17872: LD_VAR 0 2
17876: NOT
17877: OR
17878: PUSH
17879: LD_VAR 0 5
17883: PUSH
17884: LD_INT 0
17886: PUSH
17887: LD_INT 1
17889: PUSH
17890: LD_INT 2
17892: PUSH
17893: LD_INT 3
17895: PUSH
17896: LD_INT 4
17898: PUSH
17899: LD_INT 5
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: IN
17910: NOT
17911: OR
17912: PUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_VAR 0 4
17922: PPUSH
17923: CALL_OW 488
17927: NOT
17928: OR
17929: IFFALSE 17933
// exit ;
17931: GO 18650
// pom := GetBase ( depot ) ;
17933: LD_ADDR_VAR 0 10
17937: PUSH
17938: LD_VAR 0 1
17942: PPUSH
17943: CALL_OW 274
17947: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17948: LD_ADDR_VAR 0 11
17952: PUSH
17953: LD_VAR 0 2
17957: PPUSH
17958: LD_VAR 0 1
17962: PPUSH
17963: CALL_OW 248
17967: PPUSH
17968: CALL_OW 450
17972: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17973: LD_VAR 0 10
17977: PPUSH
17978: LD_INT 1
17980: PPUSH
17981: CALL_OW 275
17985: PUSH
17986: LD_VAR 0 11
17990: PUSH
17991: LD_INT 1
17993: ARRAY
17994: GREATEREQUAL
17995: PUSH
17996: LD_VAR 0 10
18000: PPUSH
18001: LD_INT 2
18003: PPUSH
18004: CALL_OW 275
18008: PUSH
18009: LD_VAR 0 11
18013: PUSH
18014: LD_INT 2
18016: ARRAY
18017: GREATEREQUAL
18018: AND
18019: PUSH
18020: LD_VAR 0 10
18024: PPUSH
18025: LD_INT 3
18027: PPUSH
18028: CALL_OW 275
18032: PUSH
18033: LD_VAR 0 11
18037: PUSH
18038: LD_INT 3
18040: ARRAY
18041: GREATEREQUAL
18042: AND
18043: NOT
18044: IFFALSE 18048
// exit ;
18046: GO 18650
// if GetBType ( depot ) = b_depot then
18048: LD_VAR 0 1
18052: PPUSH
18053: CALL_OW 266
18057: PUSH
18058: LD_INT 0
18060: EQUAL
18061: IFFALSE 18073
// dist := 28 else
18063: LD_ADDR_VAR 0 14
18067: PUSH
18068: LD_INT 28
18070: ST_TO_ADDR
18071: GO 18081
// dist := 36 ;
18073: LD_ADDR_VAR 0 14
18077: PUSH
18078: LD_INT 36
18080: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
18081: LD_VAR 0 1
18085: PPUSH
18086: LD_VAR 0 3
18090: PPUSH
18091: LD_VAR 0 4
18095: PPUSH
18096: CALL_OW 297
18100: PUSH
18101: LD_VAR 0 14
18105: GREATER
18106: IFFALSE 18110
// exit ;
18108: GO 18650
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
18110: LD_ADDR_VAR 0 12
18114: PUSH
18115: LD_VAR 0 2
18119: PPUSH
18120: LD_VAR 0 3
18124: PPUSH
18125: LD_VAR 0 4
18129: PPUSH
18130: LD_VAR 0 5
18134: PPUSH
18135: LD_VAR 0 1
18139: PPUSH
18140: CALL_OW 248
18144: PPUSH
18145: LD_INT 0
18147: PPUSH
18148: CALL 18655 0 6
18152: ST_TO_ADDR
// if not hexes then
18153: LD_VAR 0 12
18157: NOT
18158: IFFALSE 18162
// exit ;
18160: GO 18650
// hex := GetHexInfo ( x , y ) ;
18162: LD_ADDR_VAR 0 15
18166: PUSH
18167: LD_VAR 0 3
18171: PPUSH
18172: LD_VAR 0 4
18176: PPUSH
18177: CALL_OW 546
18181: ST_TO_ADDR
// if hex [ 1 ] then
18182: LD_VAR 0 15
18186: PUSH
18187: LD_INT 1
18189: ARRAY
18190: IFFALSE 18194
// exit ;
18192: GO 18650
// height := hex [ 2 ] ;
18194: LD_ADDR_VAR 0 13
18198: PUSH
18199: LD_VAR 0 15
18203: PUSH
18204: LD_INT 2
18206: ARRAY
18207: ST_TO_ADDR
// for i = 1 to hexes do
18208: LD_ADDR_VAR 0 7
18212: PUSH
18213: DOUBLE
18214: LD_INT 1
18216: DEC
18217: ST_TO_ADDR
18218: LD_VAR 0 12
18222: PUSH
18223: FOR_TO
18224: IFFALSE 18554
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18226: LD_VAR 0 12
18230: PUSH
18231: LD_VAR 0 7
18235: ARRAY
18236: PUSH
18237: LD_INT 1
18239: ARRAY
18240: PPUSH
18241: LD_VAR 0 12
18245: PUSH
18246: LD_VAR 0 7
18250: ARRAY
18251: PUSH
18252: LD_INT 2
18254: ARRAY
18255: PPUSH
18256: CALL_OW 488
18260: NOT
18261: PUSH
18262: LD_VAR 0 12
18266: PUSH
18267: LD_VAR 0 7
18271: ARRAY
18272: PUSH
18273: LD_INT 1
18275: ARRAY
18276: PPUSH
18277: LD_VAR 0 12
18281: PUSH
18282: LD_VAR 0 7
18286: ARRAY
18287: PUSH
18288: LD_INT 2
18290: ARRAY
18291: PPUSH
18292: CALL_OW 428
18296: PUSH
18297: LD_INT 0
18299: GREATER
18300: OR
18301: PUSH
18302: LD_VAR 0 12
18306: PUSH
18307: LD_VAR 0 7
18311: ARRAY
18312: PUSH
18313: LD_INT 1
18315: ARRAY
18316: PPUSH
18317: LD_VAR 0 12
18321: PUSH
18322: LD_VAR 0 7
18326: ARRAY
18327: PUSH
18328: LD_INT 2
18330: ARRAY
18331: PPUSH
18332: CALL_OW 351
18336: OR
18337: IFFALSE 18343
// exit ;
18339: POP
18340: POP
18341: GO 18650
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18343: LD_ADDR_VAR 0 8
18347: PUSH
18348: LD_VAR 0 12
18352: PUSH
18353: LD_VAR 0 7
18357: ARRAY
18358: PUSH
18359: LD_INT 1
18361: ARRAY
18362: PPUSH
18363: LD_VAR 0 12
18367: PUSH
18368: LD_VAR 0 7
18372: ARRAY
18373: PUSH
18374: LD_INT 2
18376: ARRAY
18377: PPUSH
18378: CALL_OW 546
18382: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18383: LD_VAR 0 8
18387: PUSH
18388: LD_INT 1
18390: ARRAY
18391: PUSH
18392: LD_VAR 0 8
18396: PUSH
18397: LD_INT 2
18399: ARRAY
18400: PUSH
18401: LD_VAR 0 13
18405: PUSH
18406: LD_INT 2
18408: PLUS
18409: GREATER
18410: OR
18411: PUSH
18412: LD_VAR 0 8
18416: PUSH
18417: LD_INT 2
18419: ARRAY
18420: PUSH
18421: LD_VAR 0 13
18425: PUSH
18426: LD_INT 2
18428: MINUS
18429: LESS
18430: OR
18431: PUSH
18432: LD_VAR 0 8
18436: PUSH
18437: LD_INT 3
18439: ARRAY
18440: PUSH
18441: LD_INT 0
18443: PUSH
18444: LD_INT 8
18446: PUSH
18447: LD_INT 9
18449: PUSH
18450: LD_INT 10
18452: PUSH
18453: LD_INT 11
18455: PUSH
18456: LD_INT 12
18458: PUSH
18459: LD_INT 13
18461: PUSH
18462: LD_INT 16
18464: PUSH
18465: LD_INT 17
18467: PUSH
18468: LD_INT 18
18470: PUSH
18471: LD_INT 19
18473: PUSH
18474: LD_INT 20
18476: PUSH
18477: LD_INT 21
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: IN
18495: NOT
18496: OR
18497: PUSH
18498: LD_VAR 0 8
18502: PUSH
18503: LD_INT 5
18505: ARRAY
18506: NOT
18507: OR
18508: PUSH
18509: LD_VAR 0 8
18513: PUSH
18514: LD_INT 6
18516: ARRAY
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: LD_INT 2
18523: PUSH
18524: LD_INT 7
18526: PUSH
18527: LD_INT 9
18529: PUSH
18530: LD_INT 10
18532: PUSH
18533: LD_INT 11
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: IN
18544: NOT
18545: OR
18546: IFFALSE 18552
// exit ;
18548: POP
18549: POP
18550: GO 18650
// end ;
18552: GO 18223
18554: POP
18555: POP
// side := GetSide ( depot ) ;
18556: LD_ADDR_VAR 0 9
18560: PUSH
18561: LD_VAR 0 1
18565: PPUSH
18566: CALL_OW 255
18570: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18571: LD_VAR 0 9
18575: PPUSH
18576: LD_VAR 0 3
18580: PPUSH
18581: LD_VAR 0 4
18585: PPUSH
18586: LD_INT 20
18588: PPUSH
18589: CALL 11304 0 4
18593: PUSH
18594: LD_INT 4
18596: ARRAY
18597: IFFALSE 18601
// exit ;
18599: GO 18650
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18601: LD_VAR 0 2
18605: PUSH
18606: LD_INT 29
18608: PUSH
18609: LD_INT 30
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: IN
18616: PUSH
18617: LD_VAR 0 3
18621: PPUSH
18622: LD_VAR 0 4
18626: PPUSH
18627: LD_VAR 0 9
18631: PPUSH
18632: CALL_OW 440
18636: NOT
18637: AND
18638: IFFALSE 18642
// exit ;
18640: GO 18650
// result := true ;
18642: LD_ADDR_VAR 0 6
18646: PUSH
18647: LD_INT 1
18649: ST_TO_ADDR
// end ;
18650: LD_VAR 0 6
18654: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18655: LD_INT 0
18657: PPUSH
18658: PPUSH
18659: PPUSH
18660: PPUSH
18661: PPUSH
18662: PPUSH
18663: PPUSH
18664: PPUSH
18665: PPUSH
18666: PPUSH
18667: PPUSH
18668: PPUSH
18669: PPUSH
18670: PPUSH
18671: PPUSH
18672: PPUSH
18673: PPUSH
18674: PPUSH
18675: PPUSH
18676: PPUSH
18677: PPUSH
18678: PPUSH
18679: PPUSH
18680: PPUSH
18681: PPUSH
18682: PPUSH
18683: PPUSH
18684: PPUSH
18685: PPUSH
18686: PPUSH
18687: PPUSH
18688: PPUSH
18689: PPUSH
18690: PPUSH
18691: PPUSH
18692: PPUSH
18693: PPUSH
18694: PPUSH
18695: PPUSH
18696: PPUSH
18697: PPUSH
18698: PPUSH
18699: PPUSH
18700: PPUSH
18701: PPUSH
18702: PPUSH
18703: PPUSH
18704: PPUSH
18705: PPUSH
18706: PPUSH
18707: PPUSH
18708: PPUSH
18709: PPUSH
18710: PPUSH
18711: PPUSH
18712: PPUSH
18713: PPUSH
18714: PPUSH
// result = [ ] ;
18715: LD_ADDR_VAR 0 7
18719: PUSH
18720: EMPTY
18721: ST_TO_ADDR
// temp_list = [ ] ;
18722: LD_ADDR_VAR 0 9
18726: PUSH
18727: EMPTY
18728: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18729: LD_VAR 0 4
18733: PUSH
18734: LD_INT 0
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: LD_INT 3
18745: PUSH
18746: LD_INT 4
18748: PUSH
18749: LD_INT 5
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: IN
18760: NOT
18761: PUSH
18762: LD_VAR 0 1
18766: PUSH
18767: LD_INT 0
18769: PUSH
18770: LD_INT 1
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: IN
18777: PUSH
18778: LD_VAR 0 5
18782: PUSH
18783: LD_INT 1
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 3
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: LIST
18796: IN
18797: NOT
18798: AND
18799: OR
18800: IFFALSE 18804
// exit ;
18802: GO 37195
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18804: LD_VAR 0 1
18808: PUSH
18809: LD_INT 6
18811: PUSH
18812: LD_INT 7
18814: PUSH
18815: LD_INT 8
18817: PUSH
18818: LD_INT 13
18820: PUSH
18821: LD_INT 12
18823: PUSH
18824: LD_INT 15
18826: PUSH
18827: LD_INT 11
18829: PUSH
18830: LD_INT 14
18832: PUSH
18833: LD_INT 10
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: IN
18847: IFFALSE 18857
// btype = b_lab ;
18849: LD_ADDR_VAR 0 1
18853: PUSH
18854: LD_INT 6
18856: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18857: LD_VAR 0 6
18861: PUSH
18862: LD_INT 0
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: LD_INT 2
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: LIST
18875: IN
18876: NOT
18877: PUSH
18878: LD_VAR 0 1
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: LD_INT 2
18891: PUSH
18892: LD_INT 3
18894: PUSH
18895: LD_INT 6
18897: PUSH
18898: LD_INT 36
18900: PUSH
18901: LD_INT 4
18903: PUSH
18904: LD_INT 5
18906: PUSH
18907: LD_INT 31
18909: PUSH
18910: LD_INT 32
18912: PUSH
18913: LD_INT 33
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: IN
18929: NOT
18930: PUSH
18931: LD_VAR 0 6
18935: PUSH
18936: LD_INT 1
18938: EQUAL
18939: AND
18940: OR
18941: PUSH
18942: LD_VAR 0 1
18946: PUSH
18947: LD_INT 2
18949: PUSH
18950: LD_INT 3
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: IN
18957: NOT
18958: PUSH
18959: LD_VAR 0 6
18963: PUSH
18964: LD_INT 2
18966: EQUAL
18967: AND
18968: OR
18969: IFFALSE 18979
// mode = 0 ;
18971: LD_ADDR_VAR 0 6
18975: PUSH
18976: LD_INT 0
18978: ST_TO_ADDR
// case mode of 0 :
18979: LD_VAR 0 6
18983: PUSH
18984: LD_INT 0
18986: DOUBLE
18987: EQUAL
18988: IFTRUE 18992
18990: GO 30445
18992: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18993: LD_ADDR_VAR 0 11
18997: PUSH
18998: LD_INT 0
19000: PUSH
19001: LD_INT 0
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: LD_INT 1
19013: NEG
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 1
19021: PUSH
19022: LD_INT 0
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 1
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: LD_INT 0
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 1
19062: NEG
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: LD_INT 2
19078: NEG
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 0
19086: PUSH
19087: LD_INT 2
19089: NEG
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: LD_INT 1
19100: NEG
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: LD_INT 2
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: LD_INT 2
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 1
19128: NEG
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: LD_INT 3
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 0
19149: PUSH
19150: LD_INT 3
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: NEG
19160: PUSH
19161: LD_INT 2
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19186: LD_ADDR_VAR 0 12
19190: PUSH
19191: LD_INT 0
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 0
19203: PUSH
19204: LD_INT 1
19206: NEG
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 1
19214: PUSH
19215: LD_INT 0
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: LD_INT 1
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 0
19234: PUSH
19235: LD_INT 1
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 1
19244: NEG
19245: PUSH
19246: LD_INT 0
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 1
19255: NEG
19256: PUSH
19257: LD_INT 1
19259: NEG
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 2
19278: PUSH
19279: LD_INT 0
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 2
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 2
19309: NEG
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 2
19320: NEG
19321: PUSH
19322: LD_INT 1
19324: NEG
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 2
19332: NEG
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 3
19343: NEG
19344: PUSH
19345: LD_INT 0
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 3
19354: NEG
19355: PUSH
19356: LD_INT 1
19358: NEG
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19382: LD_ADDR_VAR 0 13
19386: PUSH
19387: LD_INT 0
19389: PUSH
19390: LD_INT 0
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 0
19399: PUSH
19400: LD_INT 1
19402: NEG
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 1
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 1
19420: PUSH
19421: LD_INT 1
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: LD_INT 1
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 1
19440: NEG
19441: PUSH
19442: LD_INT 0
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 1
19451: NEG
19452: PUSH
19453: LD_INT 1
19455: NEG
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 1
19463: NEG
19464: PUSH
19465: LD_INT 2
19467: NEG
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: LD_INT 1
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: LD_INT 2
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 1
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 2
19505: NEG
19506: PUSH
19507: LD_INT 1
19509: NEG
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 2
19517: NEG
19518: PUSH
19519: LD_INT 2
19521: NEG
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 2
19529: NEG
19530: PUSH
19531: LD_INT 3
19533: NEG
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 3
19541: NEG
19542: PUSH
19543: LD_INT 2
19545: NEG
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 3
19553: NEG
19554: PUSH
19555: LD_INT 3
19557: NEG
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19581: LD_ADDR_VAR 0 14
19585: PUSH
19586: LD_INT 0
19588: PUSH
19589: LD_INT 0
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: LD_INT 1
19601: NEG
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: LD_INT 1
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 0
19629: PUSH
19630: LD_INT 1
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: LD_INT 0
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 1
19650: NEG
19651: PUSH
19652: LD_INT 1
19654: NEG
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: LD_INT 2
19666: NEG
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 0
19674: PUSH
19675: LD_INT 2
19677: NEG
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 1
19685: PUSH
19686: LD_INT 1
19688: NEG
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: LD_INT 2
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 0
19706: PUSH
19707: LD_INT 2
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 1
19716: NEG
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 1
19727: NEG
19728: PUSH
19729: LD_INT 3
19731: NEG
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 0
19739: PUSH
19740: LD_INT 3
19742: NEG
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 1
19750: PUSH
19751: LD_INT 2
19753: NEG
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19777: LD_ADDR_VAR 0 15
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: LD_INT 1
19797: NEG
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 1
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 1
19835: NEG
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 1
19846: NEG
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: LD_INT 1
19861: NEG
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 2
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: LD_INT 1
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 1
19889: NEG
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 2
19900: NEG
19901: PUSH
19902: LD_INT 0
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 2
19911: NEG
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 1
19926: NEG
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 3
19934: PUSH
19935: LD_INT 0
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 3
19944: PUSH
19945: LD_INT 1
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19970: LD_ADDR_VAR 0 16
19974: PUSH
19975: LD_INT 0
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: LD_INT 1
19990: NEG
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: LD_INT 0
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 1
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 0
20018: PUSH
20019: LD_INT 1
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 1
20039: NEG
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: LD_INT 2
20055: NEG
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 2
20063: PUSH
20064: LD_INT 1
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 2
20073: PUSH
20074: LD_INT 2
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 1
20083: PUSH
20084: LD_INT 2
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 2
20093: NEG
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 2
20105: NEG
20106: PUSH
20107: LD_INT 2
20109: NEG
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 3
20117: PUSH
20118: LD_INT 2
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 3
20127: PUSH
20128: LD_INT 3
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 2
20137: PUSH
20138: LD_INT 3
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20163: LD_ADDR_VAR 0 17
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: LD_INT 0
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 0
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 0
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: NEG
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 1
20232: NEG
20233: PUSH
20234: LD_INT 1
20236: NEG
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: NEG
20245: PUSH
20246: LD_INT 2
20248: NEG
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: LD_INT 2
20259: NEG
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 1
20270: NEG
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: LD_INT 0
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 2
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: PUSH
20299: LD_INT 2
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: PUSH
20309: LD_INT 2
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: LD_INT 2
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: NEG
20329: PUSH
20330: LD_INT 1
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 2
20339: NEG
20340: PUSH
20341: LD_INT 0
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 2
20350: NEG
20351: PUSH
20352: LD_INT 1
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 2
20362: NEG
20363: PUSH
20364: LD_INT 2
20366: NEG
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20393: LD_ADDR_VAR 0 18
20397: PUSH
20398: LD_INT 0
20400: PUSH
20401: LD_INT 0
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 1
20413: NEG
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: LD_INT 1
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 1
20451: NEG
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 1
20474: NEG
20475: PUSH
20476: LD_INT 2
20478: NEG
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 0
20486: PUSH
20487: LD_INT 2
20489: NEG
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 1
20497: PUSH
20498: LD_INT 1
20500: NEG
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 2
20508: PUSH
20509: LD_INT 0
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 2
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: LD_INT 2
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 1
20538: PUSH
20539: LD_INT 2
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: LD_INT 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 2
20569: NEG
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 2
20580: NEG
20581: PUSH
20582: LD_INT 1
20584: NEG
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 2
20592: NEG
20593: PUSH
20594: LD_INT 2
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20623: LD_ADDR_VAR 0 19
20627: PUSH
20628: LD_INT 0
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 1
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: LD_INT 1
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 1
20692: NEG
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: NEG
20705: PUSH
20706: LD_INT 2
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 0
20716: PUSH
20717: LD_INT 2
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 1
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 2
20738: PUSH
20739: LD_INT 0
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 2
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 2
20758: PUSH
20759: LD_INT 2
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 1
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: LD_INT 2
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 1
20788: NEG
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 2
20799: NEG
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 2
20810: NEG
20811: PUSH
20812: LD_INT 1
20814: NEG
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 2
20822: NEG
20823: PUSH
20824: LD_INT 2
20826: NEG
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20853: LD_ADDR_VAR 0 20
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: LD_INT 0
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: LD_INT 1
20873: NEG
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: LD_INT 1
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 1
20911: NEG
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 1
20922: NEG
20923: PUSH
20924: LD_INT 1
20926: NEG
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 1
20934: NEG
20935: PUSH
20936: LD_INT 2
20938: NEG
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 0
20946: PUSH
20947: LD_INT 2
20949: NEG
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: LD_INT 1
20960: NEG
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 2
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 2
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: LD_INT 2
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 0
21008: PUSH
21009: LD_INT 2
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 1
21018: NEG
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 2
21029: NEG
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: NEG
21041: PUSH
21042: LD_INT 1
21044: NEG
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 2
21052: NEG
21053: PUSH
21054: LD_INT 2
21056: NEG
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21083: LD_ADDR_VAR 0 21
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: LD_INT 1
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 1
21141: NEG
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: NEG
21153: PUSH
21154: LD_INT 1
21156: NEG
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: LD_INT 2
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 0
21176: PUSH
21177: LD_INT 2
21179: NEG
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: LD_INT 1
21190: NEG
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: LD_INT 0
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: LD_INT 2
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 0
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 1
21248: NEG
21249: PUSH
21250: LD_INT 1
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 2
21259: NEG
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 2
21270: NEG
21271: PUSH
21272: LD_INT 1
21274: NEG
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 2
21282: NEG
21283: PUSH
21284: LD_INT 2
21286: NEG
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21313: LD_ADDR_VAR 0 22
21317: PUSH
21318: LD_INT 0
21320: PUSH
21321: LD_INT 0
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: LD_INT 1
21333: NEG
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 1
21341: PUSH
21342: LD_INT 0
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 1
21351: PUSH
21352: LD_INT 1
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 1
21371: NEG
21372: PUSH
21373: LD_INT 0
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 1
21382: NEG
21383: PUSH
21384: LD_INT 1
21386: NEG
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 1
21394: NEG
21395: PUSH
21396: LD_INT 2
21398: NEG
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: LD_INT 2
21409: NEG
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: LD_INT 1
21420: NEG
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 2
21428: PUSH
21429: LD_INT 0
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 2
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 2
21448: PUSH
21449: LD_INT 2
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 0
21468: PUSH
21469: LD_INT 2
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 2
21489: NEG
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 2
21500: NEG
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 2
21512: NEG
21513: PUSH
21514: LD_INT 2
21516: NEG
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21543: LD_ADDR_VAR 0 23
21547: PUSH
21548: LD_INT 0
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 0
21560: PUSH
21561: LD_INT 1
21563: NEG
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 1
21581: PUSH
21582: LD_INT 1
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 0
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 1
21601: NEG
21602: PUSH
21603: LD_INT 0
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 1
21612: NEG
21613: PUSH
21614: LD_INT 1
21616: NEG
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: LD_INT 2
21628: NEG
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 0
21636: PUSH
21637: LD_INT 2
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: LD_INT 1
21650: NEG
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 2
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 2
21668: PUSH
21669: LD_INT 1
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: LD_INT 2
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: LD_INT 2
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 1
21708: NEG
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 2
21730: NEG
21731: PUSH
21732: LD_INT 1
21734: NEG
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 2
21742: NEG
21743: PUSH
21744: LD_INT 2
21746: NEG
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 2
21754: NEG
21755: PUSH
21756: LD_INT 3
21758: NEG
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: LD_INT 3
21770: NEG
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: PUSH
21779: LD_INT 2
21781: NEG
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: PUSH
21790: LD_INT 1
21792: NEG
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21823: LD_ADDR_VAR 0 24
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: LD_INT 1
21843: NEG
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 1
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: NEG
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: LD_INT 1
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: NEG
21905: PUSH
21906: LD_INT 2
21908: NEG
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 0
21916: PUSH
21917: LD_INT 2
21919: NEG
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: LD_INT 1
21930: NEG
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 2
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 2
21958: PUSH
21959: LD_INT 2
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: LD_INT 2
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 0
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 1
21988: NEG
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 2
21999: NEG
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 2
22010: NEG
22011: PUSH
22012: LD_INT 1
22014: NEG
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 2
22022: NEG
22023: PUSH
22024: LD_INT 2
22026: NEG
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: LD_INT 2
22037: NEG
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: LD_INT 1
22048: NEG
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 3
22056: PUSH
22057: LD_INT 1
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 3
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
22099: LD_ADDR_VAR 0 25
22103: PUSH
22104: LD_INT 0
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: LD_INT 1
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 1
22157: NEG
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 1
22168: NEG
22169: PUSH
22170: LD_INT 1
22172: NEG
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 1
22180: NEG
22181: PUSH
22182: LD_INT 2
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 0
22192: PUSH
22193: LD_INT 2
22195: NEG
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: LD_INT 1
22206: NEG
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 2
22214: PUSH
22215: LD_INT 0
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 2
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 2
22234: PUSH
22235: LD_INT 2
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: LD_INT 2
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: NEG
22265: PUSH
22266: LD_INT 1
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 2
22275: NEG
22276: PUSH
22277: LD_INT 0
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 2
22286: NEG
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 2
22298: NEG
22299: PUSH
22300: LD_INT 2
22302: NEG
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 3
22310: PUSH
22311: LD_INT 1
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 3
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 2
22330: PUSH
22331: LD_INT 3
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: LD_INT 3
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22373: LD_ADDR_VAR 0 26
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: LD_INT 0
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 0
22390: PUSH
22391: LD_INT 1
22393: NEG
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 1
22411: PUSH
22412: LD_INT 1
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 0
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 1
22431: NEG
22432: PUSH
22433: LD_INT 0
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 1
22442: NEG
22443: PUSH
22444: LD_INT 1
22446: NEG
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: LD_INT 2
22458: NEG
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 0
22466: PUSH
22467: LD_INT 2
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: LD_INT 1
22480: NEG
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 2
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 2
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 0
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: NEG
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 2
22549: NEG
22550: PUSH
22551: LD_INT 0
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 2
22560: NEG
22561: PUSH
22562: LD_INT 1
22564: NEG
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 2
22572: NEG
22573: PUSH
22574: LD_INT 2
22576: NEG
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: LD_INT 3
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: LD_INT 3
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 2
22615: NEG
22616: PUSH
22617: LD_INT 1
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22649: LD_ADDR_VAR 0 27
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: LD_INT 0
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 0
22666: PUSH
22667: LD_INT 1
22669: NEG
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: LD_INT 0
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 1
22687: PUSH
22688: LD_INT 1
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 0
22697: PUSH
22698: LD_INT 1
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 1
22707: NEG
22708: PUSH
22709: LD_INT 0
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: LD_INT 1
22722: NEG
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 1
22730: NEG
22731: PUSH
22732: LD_INT 2
22734: NEG
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 0
22742: PUSH
22743: LD_INT 2
22745: NEG
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: LD_INT 0
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: LD_INT 2
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: LD_INT 2
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 0
22804: PUSH
22805: LD_INT 2
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 1
22814: NEG
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 2
22825: NEG
22826: PUSH
22827: LD_INT 0
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 2
22836: NEG
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 2
22848: NEG
22849: PUSH
22850: LD_INT 2
22852: NEG
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 1
22860: NEG
22861: PUSH
22862: LD_INT 2
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 2
22871: NEG
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 3
22882: NEG
22883: PUSH
22884: LD_INT 1
22886: NEG
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 3
22894: NEG
22895: PUSH
22896: LD_INT 2
22898: NEG
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22929: LD_ADDR_VAR 0 28
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 0
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 1
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 1
22987: NEG
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: LD_INT 1
23002: NEG
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 1
23010: NEG
23011: PUSH
23012: LD_INT 2
23014: NEG
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 0
23022: PUSH
23023: LD_INT 2
23025: NEG
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 1
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 2
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 2
23054: PUSH
23055: LD_INT 1
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 2
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 0
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 1
23094: NEG
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 2
23105: NEG
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 2
23116: NEG
23117: PUSH
23118: LD_INT 1
23120: NEG
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 2
23128: NEG
23129: PUSH
23130: LD_INT 2
23132: NEG
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 2
23140: NEG
23141: PUSH
23142: LD_INT 3
23144: NEG
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 1
23152: NEG
23153: PUSH
23154: LD_INT 3
23156: NEG
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 3
23164: NEG
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 3
23176: NEG
23177: PUSH
23178: LD_INT 2
23180: NEG
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23211: LD_ADDR_VAR 0 29
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: LD_INT 0
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: LD_INT 1
23231: NEG
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: LD_INT 0
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: LD_INT 1
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 0
23259: PUSH
23260: LD_INT 1
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 1
23269: NEG
23270: PUSH
23271: LD_INT 0
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: LD_INT 1
23284: NEG
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 1
23292: NEG
23293: PUSH
23294: LD_INT 2
23296: NEG
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 0
23304: PUSH
23305: LD_INT 2
23307: NEG
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: LD_INT 1
23318: NEG
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: LD_INT 1
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: LD_INT 2
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 0
23356: PUSH
23357: LD_INT 2
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 1
23366: NEG
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 2
23377: NEG
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 2
23389: NEG
23390: PUSH
23391: LD_INT 2
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 2
23401: NEG
23402: PUSH
23403: LD_INT 3
23405: NEG
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 2
23413: PUSH
23414: LD_INT 1
23416: NEG
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 3
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 1
23434: PUSH
23435: LD_INT 3
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: NEG
23445: PUSH
23446: LD_INT 2
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 3
23455: NEG
23456: PUSH
23457: LD_INT 2
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23490: LD_ADDR_VAR 0 30
23494: PUSH
23495: LD_INT 0
23497: PUSH
23498: LD_INT 0
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: LD_INT 0
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: LD_INT 1
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 0
23538: PUSH
23539: LD_INT 1
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 1
23548: NEG
23549: PUSH
23550: LD_INT 0
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 1
23559: NEG
23560: PUSH
23561: LD_INT 1
23563: NEG
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 1
23571: NEG
23572: PUSH
23573: LD_INT 2
23575: NEG
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 0
23583: PUSH
23584: LD_INT 2
23586: NEG
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 2
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 2
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 2
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: LD_INT 2
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 1
23645: NEG
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 2
23656: NEG
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 2
23667: NEG
23668: PUSH
23669: LD_INT 1
23671: NEG
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 3
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: LD_INT 2
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 3
23702: PUSH
23703: LD_INT 2
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 2
23712: PUSH
23713: LD_INT 3
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 2
23722: NEG
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 3
23733: NEG
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23768: LD_ADDR_VAR 0 31
23772: PUSH
23773: LD_INT 0
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: NEG
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 1
23837: NEG
23838: PUSH
23839: LD_INT 1
23841: NEG
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 1
23849: NEG
23850: PUSH
23851: LD_INT 2
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: LD_INT 1
23864: NEG
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 2
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 2
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 2
23892: PUSH
23893: LD_INT 2
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 2
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: LD_INT 2
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 1
23922: NEG
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 2
23933: NEG
23934: PUSH
23935: LD_INT 1
23937: NEG
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 2
23945: NEG
23946: PUSH
23947: LD_INT 2
23949: NEG
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 2
23957: NEG
23958: PUSH
23959: LD_INT 3
23961: NEG
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: LD_INT 1
23972: NEG
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 3
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: LD_INT 3
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 1
24000: NEG
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 3
24011: NEG
24012: PUSH
24013: LD_INT 2
24015: NEG
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24046: LD_ADDR_VAR 0 32
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: LD_INT 0
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 0
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: LD_INT 0
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 0
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: NEG
24105: PUSH
24106: LD_INT 0
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 1
24127: NEG
24128: PUSH
24129: LD_INT 2
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: LD_INT 2
24142: NEG
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 1
24153: NEG
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 2
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 2
24171: PUSH
24172: LD_INT 2
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 2
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: LD_INT 2
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 2
24212: NEG
24213: PUSH
24214: LD_INT 0
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 2
24223: NEG
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 3
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 2
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 3
24258: PUSH
24259: LD_INT 2
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 2
24268: PUSH
24269: LD_INT 3
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: NEG
24279: PUSH
24280: LD_INT 1
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 3
24289: NEG
24290: PUSH
24291: LD_INT 1
24293: NEG
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24324: LD_ADDR_VAR 0 33
24328: PUSH
24329: LD_INT 0
24331: PUSH
24332: LD_INT 0
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: LD_INT 1
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: LD_INT 0
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 0
24372: PUSH
24373: LD_INT 1
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: LD_INT 0
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 1
24393: NEG
24394: PUSH
24395: LD_INT 1
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: NEG
24406: PUSH
24407: LD_INT 2
24409: NEG
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 1
24417: PUSH
24418: LD_INT 1
24420: NEG
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 1
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: LD_INT 2
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 2
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 1
24468: NEG
24469: PUSH
24470: LD_INT 1
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 2
24479: NEG
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 2
24490: NEG
24491: PUSH
24492: LD_INT 1
24494: NEG
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: NEG
24503: PUSH
24504: LD_INT 2
24506: NEG
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 2
24514: NEG
24515: PUSH
24516: LD_INT 3
24518: NEG
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 2
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 3
24537: PUSH
24538: LD_INT 1
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 1
24547: PUSH
24548: LD_INT 3
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: LD_INT 2
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 3
24568: NEG
24569: PUSH
24570: LD_INT 2
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24603: LD_ADDR_VAR 0 34
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: LD_INT 0
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: LD_INT 1
24623: NEG
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 1
24631: PUSH
24632: LD_INT 0
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 0
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 1
24661: NEG
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: LD_INT 2
24688: NEG
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 0
24696: PUSH
24697: LD_INT 2
24699: NEG
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: LD_INT 1
24710: NEG
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 2
24718: PUSH
24719: LD_INT 1
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: LD_INT 2
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: LD_INT 2
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: LD_INT 1
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 2
24759: NEG
24760: PUSH
24761: LD_INT 0
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 2
24770: NEG
24771: PUSH
24772: LD_INT 1
24774: NEG
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 2
24782: NEG
24783: PUSH
24784: LD_INT 2
24786: NEG
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 1
24794: NEG
24795: PUSH
24796: LD_INT 3
24798: NEG
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: LD_INT 2
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 3
24817: PUSH
24818: LD_INT 2
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: LD_INT 3
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 2
24837: NEG
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 3
24848: NEG
24849: PUSH
24850: LD_INT 1
24852: NEG
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24883: LD_ADDR_VAR 0 35
24887: PUSH
24888: LD_INT 0
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: LD_INT 1
24956: NEG
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 2
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 2
24974: NEG
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24995: LD_ADDR_VAR 0 36
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: LD_INT 2
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: LD_INT 2
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25107: LD_ADDR_VAR 0 37
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 1
25165: NEG
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: LD_INT 1
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25219: LD_ADDR_VAR 0 38
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: NEG
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 2
25300: PUSH
25301: LD_INT 1
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 2
25310: NEG
25311: PUSH
25312: LD_INT 1
25314: NEG
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25331: LD_ADDR_VAR 0 39
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: LD_INT 1
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 1
25412: NEG
25413: PUSH
25414: LD_INT 2
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25443: LD_ADDR_VAR 0 40
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: NEG
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: NEG
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25555: LD_ADDR_VAR 0 41
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: LD_INT 1
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 1
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 1
25613: NEG
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 1
25624: NEG
25625: PUSH
25626: LD_INT 1
25628: NEG
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 1
25636: NEG
25637: PUSH
25638: LD_INT 2
25640: NEG
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: LD_INT 1
25651: NEG
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 2
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 2
25669: PUSH
25670: LD_INT 1
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: LD_INT 2
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: LD_INT 2
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 2
25721: NEG
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 2
25733: NEG
25734: PUSH
25735: LD_INT 2
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: NEG
25746: PUSH
25747: LD_INT 3
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: PUSH
25758: LD_INT 1
25760: NEG
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 3
25768: PUSH
25769: LD_INT 0
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 3
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 3
25788: PUSH
25789: LD_INT 2
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 3
25798: PUSH
25799: LD_INT 3
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: LD_INT 3
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 2
25818: NEG
25819: PUSH
25820: LD_INT 1
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 3
25829: NEG
25830: PUSH
25831: LD_INT 0
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 3
25840: NEG
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 3
25852: NEG
25853: PUSH
25854: LD_INT 2
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 3
25864: NEG
25865: PUSH
25866: LD_INT 3
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25905: LD_ADDR_VAR 0 42
25909: PUSH
25910: LD_INT 0
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 0
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 1
25943: PUSH
25944: LD_INT 1
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: LD_INT 1
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: LD_INT 0
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: NEG
25975: PUSH
25976: LD_INT 1
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: LD_INT 2
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 0
25998: PUSH
25999: LD_INT 2
26001: NEG
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: LD_INT 1
26012: NEG
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 0
26050: PUSH
26051: LD_INT 2
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 1
26060: NEG
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: NEG
26072: PUSH
26073: LD_INT 1
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: LD_INT 2
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 2
26095: NEG
26096: PUSH
26097: LD_INT 3
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: LD_INT 3
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: LD_INT 3
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: LD_INT 2
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 3
26141: PUSH
26142: LD_INT 2
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 3
26151: PUSH
26152: LD_INT 3
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 2
26161: PUSH
26162: LD_INT 3
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 3
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 3
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 3
26202: NEG
26203: PUSH
26204: LD_INT 2
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 3
26214: NEG
26215: PUSH
26216: LD_INT 3
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26255: LD_ADDR_VAR 0 43
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 1
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: LD_INT 1
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 1
26313: NEG
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: LD_INT 1
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: LD_INT 2
26351: NEG
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: LD_INT 1
26362: NEG
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 2
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 2
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: LD_INT 2
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: LD_INT 2
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: NEG
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 2
26421: NEG
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 2
26432: NEG
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 1
26444: NEG
26445: PUSH
26446: LD_INT 3
26448: NEG
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: LD_INT 3
26459: NEG
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: LD_INT 2
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: LD_INT 1
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 3
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 3
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: LD_INT 3
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 0
26519: PUSH
26520: LD_INT 3
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: LD_INT 2
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 2
26540: NEG
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 3
26551: NEG
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 3
26562: NEG
26563: PUSH
26564: LD_INT 1
26566: NEG
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26603: LD_ADDR_VAR 0 44
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 0
26620: PUSH
26621: LD_INT 1
26623: NEG
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 1
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 0
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 1
26661: NEG
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: NEG
26685: PUSH
26686: LD_INT 2
26688: NEG
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: LD_INT 1
26699: NEG
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 2
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 2
26717: PUSH
26718: LD_INT 1
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: LD_INT 2
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 1
26747: NEG
26748: PUSH
26749: LD_INT 1
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 2
26758: NEG
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 2
26769: NEG
26770: PUSH
26771: LD_INT 1
26773: NEG
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 2
26781: NEG
26782: PUSH
26783: LD_INT 2
26785: NEG
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 2
26793: NEG
26794: PUSH
26795: LD_INT 3
26797: NEG
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 2
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 3
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 3
26826: PUSH
26827: LD_INT 1
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 3
26836: PUSH
26837: LD_INT 2
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 3
26846: PUSH
26847: LD_INT 3
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 2
26856: PUSH
26857: LD_INT 3
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 2
26866: NEG
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 3
26877: NEG
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 3
26888: NEG
26889: PUSH
26890: LD_INT 1
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 3
26900: NEG
26901: PUSH
26902: LD_INT 2
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 3
26912: NEG
26913: PUSH
26914: LD_INT 3
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26953: LD_ADDR_VAR 0 45
26957: PUSH
26958: LD_INT 0
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: LD_INT 0
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: LD_INT 1
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: LD_INT 2
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: LD_INT 2
27049: NEG
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: LD_INT 1
27060: NEG
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 2
27078: PUSH
27079: LD_INT 2
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: LD_INT 2
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 2
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: NEG
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 2
27119: NEG
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 2
27131: NEG
27132: PUSH
27133: LD_INT 2
27135: NEG
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 2
27143: NEG
27144: PUSH
27145: LD_INT 3
27147: NEG
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 1
27155: NEG
27156: PUSH
27157: LD_INT 3
27159: NEG
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: LD_INT 3
27170: NEG
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: LD_INT 2
27181: NEG
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 3
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 3
27199: PUSH
27200: LD_INT 3
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 2
27209: PUSH
27210: LD_INT 3
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: LD_INT 3
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: LD_INT 3
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 3
27250: NEG
27251: PUSH
27252: LD_INT 2
27254: NEG
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 3
27262: NEG
27263: PUSH
27264: LD_INT 3
27266: NEG
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27303: LD_ADDR_VAR 0 46
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: LD_INT 0
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: NEG
27385: PUSH
27386: LD_INT 2
27388: NEG
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: LD_INT 2
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: LD_INT 1
27410: NEG
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 2
27418: PUSH
27419: LD_INT 0
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 2
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: LD_INT 2
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: LD_INT 2
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 1
27458: NEG
27459: PUSH
27460: LD_INT 1
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 2
27469: NEG
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 2
27480: NEG
27481: PUSH
27482: LD_INT 1
27484: NEG
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 1
27492: NEG
27493: PUSH
27494: LD_INT 3
27496: NEG
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: LD_INT 3
27507: NEG
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: LD_INT 2
27518: NEG
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 2
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 3
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 3
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: LD_INT 3
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: LD_INT 3
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: LD_INT 2
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 2
27588: NEG
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 3
27599: NEG
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 3
27610: NEG
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27651: LD_ADDR_VAR 0 47
27655: PUSH
27656: LD_INT 0
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 0
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: LD_INT 0
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 1
27709: NEG
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: LD_INT 2
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 2
27766: NEG
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 2
27778: NEG
27779: PUSH
27780: LD_INT 2
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27802: LD_ADDR_VAR 0 48
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: LD_INT 1
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: LD_INT 0
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: LD_INT 2
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: LD_INT 2
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27949: LD_ADDR_VAR 0 49
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: LD_INT 1
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: LD_INT 1
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 1
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: LD_INT 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28093: LD_ADDR_VAR 0 50
28097: PUSH
28098: LD_INT 0
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: LD_INT 1
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 2
28184: PUSH
28185: LD_INT 2
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: LD_INT 2
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 1
28214: NEG
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28237: LD_ADDR_VAR 0 51
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 0
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 1
28295: NEG
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 1
28306: NEG
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: LD_INT 2
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 2
28349: NEG
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 2
28360: NEG
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28384: LD_ADDR_VAR 0 52
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: LD_INT 2
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 2
28488: NEG
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 2
28499: NEG
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: NEG
28512: PUSH
28513: LD_INT 2
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28535: LD_ADDR_VAR 0 53
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: NEG
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: NEG
28617: PUSH
28618: LD_INT 2
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 0
28628: PUSH
28629: LD_INT 2
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 2
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 2
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 0
28690: PUSH
28691: LD_INT 2
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 1
28700: NEG
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: LD_INT 0
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 2
28722: NEG
28723: PUSH
28724: LD_INT 1
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 2
28734: NEG
28735: PUSH
28736: LD_INT 2
28738: NEG
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28765: LD_ADDR_VAR 0 54
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 1
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: LD_INT 1
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: NEG
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 1
28834: NEG
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 1
28846: NEG
28847: PUSH
28848: LD_INT 2
28850: NEG
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 0
28858: PUSH
28859: LD_INT 2
28861: NEG
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: LD_INT 1
28872: NEG
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 2
28880: PUSH
28881: LD_INT 0
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 2
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 2
28900: PUSH
28901: LD_INT 2
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: LD_INT 2
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: LD_INT 2
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 2
28941: NEG
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 2
28952: NEG
28953: PUSH
28954: LD_INT 1
28956: NEG
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 2
28964: NEG
28965: PUSH
28966: LD_INT 2
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28995: LD_ADDR_VAR 0 55
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: LD_INT 1
29015: NEG
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: LD_INT 1
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 1
29053: NEG
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 1
29064: NEG
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 2
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: LD_INT 2
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: LD_INT 1
29102: NEG
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 2
29110: PUSH
29111: LD_INT 0
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 2
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 2
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 2
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 2
29171: NEG
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 2
29182: NEG
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 2
29194: NEG
29195: PUSH
29196: LD_INT 2
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29225: LD_ADDR_VAR 0 56
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 1
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 1
29294: NEG
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: NEG
29307: PUSH
29308: LD_INT 2
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 0
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: LD_INT 2
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: LD_INT 2
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: LD_INT 2
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 2
29401: NEG
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 2
29412: NEG
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 2
29424: NEG
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29455: LD_ADDR_VAR 0 57
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 1
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 1
29513: NEG
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 2
29540: NEG
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 2
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: LD_INT 2
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 0
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 1
29620: NEG
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 2
29631: NEG
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 2
29642: NEG
29643: PUSH
29644: LD_INT 1
29646: NEG
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 2
29654: NEG
29655: PUSH
29656: LD_INT 2
29658: NEG
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29685: LD_ADDR_VAR 0 58
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: NEG
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: LD_INT 2
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 0
29778: PUSH
29779: LD_INT 2
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: LD_INT 1
29792: NEG
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 2
29800: PUSH
29801: LD_INT 0
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 2
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: LD_INT 2
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: LD_INT 2
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: LD_INT 2
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 2
29861: NEG
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 2
29872: NEG
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: NEG
29885: PUSH
29886: LD_INT 2
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29915: LD_ADDR_VAR 0 59
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: LD_INT 0
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 1
29953: PUSH
29954: LD_INT 1
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 1
29973: NEG
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: NEG
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30003: LD_ADDR_VAR 0 60
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30091: LD_ADDR_VAR 0 61
30095: PUSH
30096: LD_INT 0
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: LD_INT 1
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 1
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30179: LD_ADDR_VAR 0 62
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: LD_INT 0
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: LD_INT 1
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 1
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 1
30237: NEG
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 1
30248: NEG
30249: PUSH
30250: LD_INT 1
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30267: LD_ADDR_VAR 0 63
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: LD_INT 0
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: LD_INT 1
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: LD_INT 0
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 1
30336: NEG
30337: PUSH
30338: LD_INT 1
30340: NEG
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30355: LD_ADDR_VAR 0 64
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 0
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 1
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 0
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 1
30424: NEG
30425: PUSH
30426: LD_INT 1
30428: NEG
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: ST_TO_ADDR
// end ; 1 :
30443: GO 36340
30445: LD_INT 1
30447: DOUBLE
30448: EQUAL
30449: IFTRUE 30453
30451: GO 33076
30453: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30454: LD_ADDR_VAR 0 11
30458: PUSH
30459: LD_INT 1
30461: NEG
30462: PUSH
30463: LD_INT 3
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: LD_INT 3
30476: NEG
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: LD_INT 2
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: LIST
30497: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30498: LD_ADDR_VAR 0 12
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: LD_INT 1
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 3
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 3
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30539: LD_ADDR_VAR 0 13
30543: PUSH
30544: LD_INT 3
30546: PUSH
30547: LD_INT 2
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: LD_INT 3
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 2
30566: PUSH
30567: LD_INT 3
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: LIST
30578: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30579: LD_ADDR_VAR 0 14
30583: PUSH
30584: LD_INT 1
30586: PUSH
30587: LD_INT 3
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: LD_INT 2
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30620: LD_ADDR_VAR 0 15
30624: PUSH
30625: LD_INT 2
30627: NEG
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 3
30638: NEG
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 3
30649: NEG
30650: PUSH
30651: LD_INT 1
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: LIST
30663: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30664: LD_ADDR_VAR 0 16
30668: PUSH
30669: LD_INT 2
30671: NEG
30672: PUSH
30673: LD_INT 3
30675: NEG
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 3
30683: NEG
30684: PUSH
30685: LD_INT 2
30687: NEG
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 3
30695: NEG
30696: PUSH
30697: LD_INT 3
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: LIST
30709: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30710: LD_ADDR_VAR 0 17
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: PUSH
30719: LD_INT 3
30721: NEG
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 0
30729: PUSH
30730: LD_INT 3
30732: NEG
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: LD_INT 2
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: LIST
30753: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30754: LD_ADDR_VAR 0 18
30758: PUSH
30759: LD_INT 2
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 3
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 3
30782: PUSH
30783: LD_INT 1
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30795: LD_ADDR_VAR 0 19
30799: PUSH
30800: LD_INT 3
30802: PUSH
30803: LD_INT 2
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 3
30812: PUSH
30813: LD_INT 3
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 2
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: LIST
30834: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30835: LD_ADDR_VAR 0 20
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 3
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 3
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: LD_INT 2
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: LIST
30875: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30876: LD_ADDR_VAR 0 21
30880: PUSH
30881: LD_INT 2
30883: NEG
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 3
30894: NEG
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 3
30905: NEG
30906: PUSH
30907: LD_INT 1
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: LIST
30919: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30920: LD_ADDR_VAR 0 22
30924: PUSH
30925: LD_INT 2
30927: NEG
30928: PUSH
30929: LD_INT 3
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 3
30939: NEG
30940: PUSH
30941: LD_INT 2
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 3
30951: NEG
30952: PUSH
30953: LD_INT 3
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: LIST
30965: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30966: LD_ADDR_VAR 0 23
30970: PUSH
30971: LD_INT 0
30973: PUSH
30974: LD_INT 3
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: NEG
30985: PUSH
30986: LD_INT 4
30988: NEG
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 1
30996: PUSH
30997: LD_INT 3
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
31010: LD_ADDR_VAR 0 24
31014: PUSH
31015: LD_INT 3
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 3
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 4
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
31051: LD_ADDR_VAR 0 25
31055: PUSH
31056: LD_INT 3
31058: PUSH
31059: LD_INT 3
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 4
31068: PUSH
31069: LD_INT 3
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 3
31078: PUSH
31079: LD_INT 4
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: LIST
31090: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
31091: LD_ADDR_VAR 0 26
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: LD_INT 3
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: LD_INT 4
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: LD_INT 3
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: LIST
31131: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
31132: LD_ADDR_VAR 0 27
31136: PUSH
31137: LD_INT 3
31139: NEG
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 3
31150: NEG
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 4
31161: NEG
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31176: LD_ADDR_VAR 0 28
31180: PUSH
31181: LD_INT 3
31183: NEG
31184: PUSH
31185: LD_INT 3
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 3
31195: NEG
31196: PUSH
31197: LD_INT 4
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 4
31207: NEG
31208: PUSH
31209: LD_INT 3
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31222: LD_ADDR_VAR 0 29
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: LD_INT 3
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: LD_INT 3
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 1
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: LD_INT 4
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: LD_INT 4
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 3
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: LD_INT 5
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: LD_INT 5
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: LD_INT 4
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: NEG
31332: PUSH
31333: LD_INT 6
31335: NEG
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: LD_INT 6
31346: NEG
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: LD_INT 5
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31377: LD_ADDR_VAR 0 30
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 3
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 3
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 3
31415: PUSH
31416: LD_INT 1
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 4
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 4
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 4
31446: PUSH
31447: LD_INT 1
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 5
31457: PUSH
31458: LD_INT 0
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 5
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 5
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 6
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 6
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31520: LD_ADDR_VAR 0 31
31524: PUSH
31525: LD_INT 3
31527: PUSH
31528: LD_INT 2
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 3
31537: PUSH
31538: LD_INT 3
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 2
31547: PUSH
31548: LD_INT 3
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 4
31557: PUSH
31558: LD_INT 3
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 4
31567: PUSH
31568: LD_INT 4
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 3
31577: PUSH
31578: LD_INT 4
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 5
31587: PUSH
31588: LD_INT 4
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 5
31597: PUSH
31598: LD_INT 5
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 4
31607: PUSH
31608: LD_INT 5
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 6
31617: PUSH
31618: LD_INT 5
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 6
31627: PUSH
31628: LD_INT 6
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 5
31637: PUSH
31638: LD_INT 6
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31659: LD_ADDR_VAR 0 32
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 3
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: LD_INT 3
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: LD_INT 2
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: LD_INT 4
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: LD_INT 4
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: PUSH
31719: LD_INT 3
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 1
31728: PUSH
31729: LD_INT 5
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: LD_INT 5
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: LD_INT 4
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 1
31759: PUSH
31760: LD_INT 6
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: LD_INT 6
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 1
31779: NEG
31780: PUSH
31781: LD_INT 5
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31802: LD_ADDR_VAR 0 33
31806: PUSH
31807: LD_INT 2
31809: NEG
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 3
31820: NEG
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 3
31831: NEG
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 3
31843: NEG
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 4
31854: NEG
31855: PUSH
31856: LD_INT 0
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 4
31865: NEG
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 4
31877: NEG
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 5
31888: NEG
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 5
31899: NEG
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 5
31911: NEG
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 6
31922: NEG
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 6
31933: NEG
31934: PUSH
31935: LD_INT 1
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31957: LD_ADDR_VAR 0 34
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: LD_INT 3
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 3
31976: NEG
31977: PUSH
31978: LD_INT 2
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 3
31988: NEG
31989: PUSH
31990: LD_INT 3
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 3
32000: NEG
32001: PUSH
32002: LD_INT 4
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 4
32012: NEG
32013: PUSH
32014: LD_INT 3
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 4
32024: NEG
32025: PUSH
32026: LD_INT 4
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 4
32036: NEG
32037: PUSH
32038: LD_INT 5
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 5
32048: NEG
32049: PUSH
32050: LD_INT 4
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 5
32060: NEG
32061: PUSH
32062: LD_INT 5
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 5
32072: NEG
32073: PUSH
32074: LD_INT 6
32076: NEG
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 6
32084: NEG
32085: PUSH
32086: LD_INT 5
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 6
32096: NEG
32097: PUSH
32098: LD_INT 6
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
32120: LD_ADDR_VAR 0 41
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: LD_INT 2
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 1
32138: NEG
32139: PUSH
32140: LD_INT 3
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32164: LD_ADDR_VAR 0 42
32168: PUSH
32169: LD_INT 2
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 2
32181: PUSH
32182: LD_INT 1
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 3
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32205: LD_ADDR_VAR 0 43
32209: PUSH
32210: LD_INT 2
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 3
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 2
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: LIST
32244: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32245: LD_ADDR_VAR 0 44
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: LD_INT 2
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: LD_INT 3
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 1
32272: NEG
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: LIST
32285: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32286: LD_ADDR_VAR 0 45
32290: PUSH
32291: LD_INT 2
32293: NEG
32294: PUSH
32295: LD_INT 0
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 3
32315: NEG
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32330: LD_ADDR_VAR 0 46
32334: PUSH
32335: LD_INT 2
32337: NEG
32338: PUSH
32339: LD_INT 2
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: NEG
32350: PUSH
32351: LD_INT 3
32353: NEG
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 3
32361: NEG
32362: PUSH
32363: LD_INT 2
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: LIST
32375: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32376: LD_ADDR_VAR 0 47
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: LD_INT 3
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: LD_INT 3
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32409: LD_ADDR_VAR 0 48
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 2
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32440: LD_ADDR_VAR 0 49
32444: PUSH
32445: LD_INT 3
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 3
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32469: LD_ADDR_VAR 0 50
32473: PUSH
32474: LD_INT 2
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 1
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32498: LD_ADDR_VAR 0 51
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: NEG
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32529: LD_ADDR_VAR 0 52
32533: PUSH
32534: LD_INT 3
32536: NEG
32537: PUSH
32538: LD_INT 1
32540: NEG
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 3
32548: NEG
32549: PUSH
32550: LD_INT 2
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32562: LD_ADDR_VAR 0 53
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: LD_INT 3
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: LD_INT 3
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: LD_INT 2
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: LIST
32605: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32606: LD_ADDR_VAR 0 54
32610: PUSH
32611: LD_INT 2
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 3
32634: PUSH
32635: LD_INT 1
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32647: LD_ADDR_VAR 0 55
32651: PUSH
32652: LD_INT 3
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 3
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 3
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: LIST
32686: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32687: LD_ADDR_VAR 0 56
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: LD_INT 3
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: LD_INT 2
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: LIST
32727: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32728: LD_ADDR_VAR 0 57
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 3
32746: NEG
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 3
32757: NEG
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: LIST
32771: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32772: LD_ADDR_VAR 0 58
32776: PUSH
32777: LD_INT 2
32779: NEG
32780: PUSH
32781: LD_INT 3
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 3
32791: NEG
32792: PUSH
32793: LD_INT 2
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 3
32803: NEG
32804: PUSH
32805: LD_INT 3
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32818: LD_ADDR_VAR 0 59
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: LD_INT 2
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: LD_INT 2
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: PUSH
32849: LD_INT 1
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32862: LD_ADDR_VAR 0 60
32866: PUSH
32867: LD_INT 1
32869: PUSH
32870: LD_INT 1
32872: NEG
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: LIST
32902: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32903: LD_ADDR_VAR 0 61
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: PUSH
32921: LD_INT 2
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: LD_INT 2
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32943: LD_ADDR_VAR 0 62
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 2
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: NEG
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: LIST
32983: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32984: LD_ADDR_VAR 0 63
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 2
33002: NEG
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 2
33013: NEG
33014: PUSH
33015: LD_INT 1
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: LIST
33027: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33028: LD_ADDR_VAR 0 64
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 2
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 2
33047: NEG
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 2
33059: NEG
33060: PUSH
33061: LD_INT 2
33063: NEG
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: LIST
33073: ST_TO_ADDR
// end ; 2 :
33074: GO 36340
33076: LD_INT 2
33078: DOUBLE
33079: EQUAL
33080: IFTRUE 33084
33082: GO 36339
33084: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
33085: LD_ADDR_VAR 0 29
33089: PUSH
33090: LD_INT 4
33092: PUSH
33093: LD_INT 0
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 4
33102: PUSH
33103: LD_INT 1
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 5
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 5
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 4
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 3
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 3
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 3
33164: PUSH
33165: LD_INT 2
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 5
33175: PUSH
33176: LD_INT 2
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 3
33185: PUSH
33186: LD_INT 3
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 3
33195: PUSH
33196: LD_INT 2
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 4
33205: PUSH
33206: LD_INT 3
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 4
33215: PUSH
33216: LD_INT 4
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 3
33225: PUSH
33226: LD_INT 4
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 2
33235: PUSH
33236: LD_INT 3
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 2
33245: PUSH
33246: LD_INT 2
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 4
33255: PUSH
33256: LD_INT 2
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 2
33265: PUSH
33266: LD_INT 4
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: LD_INT 4
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: LD_INT 3
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: LD_INT 4
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: LD_INT 5
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: LD_INT 5
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: LD_INT 4
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 1
33336: NEG
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: LD_INT 5
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 2
33357: NEG
33358: PUSH
33359: LD_INT 3
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 3
33368: NEG
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 3
33379: NEG
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 2
33402: NEG
33403: PUSH
33404: LD_INT 1
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 3
33413: NEG
33414: PUSH
33415: LD_INT 1
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 4
33424: NEG
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 4
33435: NEG
33436: PUSH
33437: LD_INT 1
33439: NEG
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 4
33447: NEG
33448: PUSH
33449: LD_INT 2
33451: NEG
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 2
33459: NEG
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 4
33470: NEG
33471: PUSH
33472: LD_INT 4
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 4
33482: NEG
33483: PUSH
33484: LD_INT 5
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 3
33494: NEG
33495: PUSH
33496: LD_INT 4
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 3
33506: NEG
33507: PUSH
33508: LD_INT 3
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 4
33518: NEG
33519: PUSH
33520: LD_INT 3
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 5
33530: NEG
33531: PUSH
33532: LD_INT 4
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 5
33542: NEG
33543: PUSH
33544: LD_INT 5
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 3
33554: NEG
33555: PUSH
33556: LD_INT 5
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 5
33566: NEG
33567: PUSH
33568: LD_INT 3
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33623: LD_ADDR_VAR 0 30
33627: PUSH
33628: LD_INT 4
33630: PUSH
33631: LD_INT 4
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 4
33640: PUSH
33641: LD_INT 3
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 5
33650: PUSH
33651: LD_INT 4
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 5
33660: PUSH
33661: LD_INT 5
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 4
33670: PUSH
33671: LD_INT 5
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 3
33680: PUSH
33681: LD_INT 4
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 3
33690: PUSH
33691: LD_INT 3
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 5
33700: PUSH
33701: LD_INT 3
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 3
33710: PUSH
33711: LD_INT 5
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: LD_INT 3
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: LD_INT 3
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: LD_INT 4
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: LD_INT 4
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 1
33770: NEG
33771: PUSH
33772: LD_INT 3
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: NEG
33782: PUSH
33783: LD_INT 2
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 2
33792: PUSH
33793: LD_INT 4
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 2
33802: NEG
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 4
33813: NEG
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 4
33824: NEG
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 3
33836: NEG
33837: PUSH
33838: LD_INT 0
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 3
33847: NEG
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 4
33858: NEG
33859: PUSH
33860: LD_INT 1
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 5
33869: NEG
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 5
33880: NEG
33881: PUSH
33882: LD_INT 1
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 5
33892: NEG
33893: PUSH
33894: LD_INT 2
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 3
33904: NEG
33905: PUSH
33906: LD_INT 2
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 3
33915: NEG
33916: PUSH
33917: LD_INT 3
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 3
33927: NEG
33928: PUSH
33929: LD_INT 4
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 2
33939: NEG
33940: PUSH
33941: LD_INT 3
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: NEG
33952: PUSH
33953: LD_INT 2
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 3
33963: NEG
33964: PUSH
33965: LD_INT 2
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 4
33975: NEG
33976: PUSH
33977: LD_INT 3
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 4
33987: NEG
33988: PUSH
33989: LD_INT 4
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 2
33999: NEG
34000: PUSH
34001: LD_INT 4
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 4
34011: NEG
34012: PUSH
34013: LD_INT 2
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 4
34026: NEG
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: LD_INT 5
34037: NEG
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: LD_INT 4
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: LD_INT 3
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 3
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: LD_INT 4
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: LD_INT 5
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 2
34102: PUSH
34103: LD_INT 3
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: NEG
34114: PUSH
34115: LD_INT 5
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34170: LD_ADDR_VAR 0 31
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: LD_INT 4
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: LD_INT 3
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: LD_INT 4
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: LD_INT 5
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: LD_INT 5
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: LD_INT 4
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 1
34238: NEG
34239: PUSH
34240: LD_INT 3
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 5
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 2
34259: NEG
34260: PUSH
34261: LD_INT 3
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 3
34270: NEG
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 3
34281: NEG
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 2
34293: NEG
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 2
34304: NEG
34305: PUSH
34306: LD_INT 1
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 3
34315: NEG
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 4
34326: NEG
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 4
34337: NEG
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 4
34349: NEG
34350: PUSH
34351: LD_INT 2
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 2
34361: NEG
34362: PUSH
34363: LD_INT 2
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 4
34372: NEG
34373: PUSH
34374: LD_INT 4
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 4
34384: NEG
34385: PUSH
34386: LD_INT 5
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 3
34396: NEG
34397: PUSH
34398: LD_INT 4
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 3
34408: NEG
34409: PUSH
34410: LD_INT 3
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 4
34420: NEG
34421: PUSH
34422: LD_INT 3
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 5
34432: NEG
34433: PUSH
34434: LD_INT 4
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 5
34444: NEG
34445: PUSH
34446: LD_INT 5
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 3
34456: NEG
34457: PUSH
34458: LD_INT 5
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 5
34468: NEG
34469: PUSH
34470: LD_INT 3
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: LD_INT 3
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 4
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 3
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 2
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: LD_INT 2
34527: NEG
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: PUSH
34537: LD_INT 3
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: LD_INT 4
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 2
34559: PUSH
34560: LD_INT 2
34562: NEG
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 2
34570: NEG
34571: PUSH
34572: LD_INT 4
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 4
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 4
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 5
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 5
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 4
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 3
34633: PUSH
34634: LD_INT 0
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 3
34643: PUSH
34644: LD_INT 1
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 3
34654: PUSH
34655: LD_INT 2
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 5
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34720: LD_ADDR_VAR 0 32
34724: PUSH
34725: LD_INT 4
34727: NEG
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 4
34738: NEG
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 3
34750: NEG
34751: PUSH
34752: LD_INT 0
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 3
34761: NEG
34762: PUSH
34763: LD_INT 1
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 4
34772: NEG
34773: PUSH
34774: LD_INT 1
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 5
34783: NEG
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 5
34794: NEG
34795: PUSH
34796: LD_INT 1
34798: NEG
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 5
34806: NEG
34807: PUSH
34808: LD_INT 2
34810: NEG
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 3
34818: NEG
34819: PUSH
34820: LD_INT 2
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 3
34829: NEG
34830: PUSH
34831: LD_INT 3
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 3
34841: NEG
34842: PUSH
34843: LD_INT 4
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 2
34853: NEG
34854: PUSH
34855: LD_INT 3
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 2
34865: NEG
34866: PUSH
34867: LD_INT 2
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 3
34877: NEG
34878: PUSH
34879: LD_INT 2
34881: NEG
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 4
34889: NEG
34890: PUSH
34891: LD_INT 3
34893: NEG
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 4
34901: NEG
34902: PUSH
34903: LD_INT 4
34905: NEG
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 2
34913: NEG
34914: PUSH
34915: LD_INT 4
34917: NEG
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 4
34925: NEG
34926: PUSH
34927: LD_INT 2
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: LD_INT 4
34940: NEG
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: LD_INT 5
34951: NEG
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: LD_INT 4
34962: NEG
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: LD_INT 3
34973: NEG
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: LD_INT 3
34984: NEG
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: LD_INT 4
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: LD_INT 5
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: LD_INT 3
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 2
35027: NEG
35028: PUSH
35029: LD_INT 5
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 3
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 3
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 4
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 4
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 3
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 2
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 2
35111: PUSH
35112: LD_INT 2
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 4
35122: PUSH
35123: LD_INT 2
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 4
35132: PUSH
35133: LD_INT 4
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 4
35142: PUSH
35143: LD_INT 3
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 5
35152: PUSH
35153: LD_INT 4
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 5
35162: PUSH
35163: LD_INT 5
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 4
35172: PUSH
35173: LD_INT 5
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: LD_INT 4
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 3
35192: PUSH
35193: LD_INT 3
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 5
35202: PUSH
35203: LD_INT 3
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 3
35212: PUSH
35213: LD_INT 5
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35267: LD_ADDR_VAR 0 33
35271: PUSH
35272: LD_INT 4
35274: NEG
35275: PUSH
35276: LD_INT 4
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 4
35286: NEG
35287: PUSH
35288: LD_INT 5
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 3
35298: NEG
35299: PUSH
35300: LD_INT 4
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 3
35310: NEG
35311: PUSH
35312: LD_INT 3
35314: NEG
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 4
35322: NEG
35323: PUSH
35324: LD_INT 3
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 5
35334: NEG
35335: PUSH
35336: LD_INT 4
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 5
35346: NEG
35347: PUSH
35348: LD_INT 5
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 3
35358: NEG
35359: PUSH
35360: LD_INT 5
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 5
35370: NEG
35371: PUSH
35372: LD_INT 3
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: LD_INT 3
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 4
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: LD_INT 3
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: LD_INT 2
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: LD_INT 2
35429: NEG
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: LD_INT 3
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: LD_INT 4
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: LD_INT 2
35464: NEG
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: NEG
35473: PUSH
35474: LD_INT 4
35476: NEG
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 4
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 4
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 5
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 5
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 4
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 3
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 3
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 3
35556: PUSH
35557: LD_INT 2
35559: NEG
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 5
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 3
35577: PUSH
35578: LD_INT 3
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 3
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 4
35597: PUSH
35598: LD_INT 3
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 4
35607: PUSH
35608: LD_INT 4
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 3
35617: PUSH
35618: LD_INT 4
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: LD_INT 3
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: LD_INT 2
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 4
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 2
35657: PUSH
35658: LD_INT 4
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 4
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: LD_INT 3
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 1
35687: PUSH
35688: LD_INT 4
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: LD_INT 5
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: LD_INT 5
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: LD_INT 4
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: LD_INT 3
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: LD_INT 5
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 2
35749: NEG
35750: PUSH
35751: LD_INT 3
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35805: LD_ADDR_VAR 0 34
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 4
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: LD_INT 5
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: LD_INT 4
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: LD_INT 3
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: LD_INT 3
35859: NEG
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: LD_INT 4
35871: NEG
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: LD_INT 5
35883: NEG
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: LD_INT 3
35894: NEG
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 2
35902: NEG
35903: PUSH
35904: LD_INT 5
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 3
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 3
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 4
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 4
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 3
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 2
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: LD_INT 2
35989: NEG
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 4
35997: PUSH
35998: LD_INT 2
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 4
36007: PUSH
36008: LD_INT 4
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 4
36017: PUSH
36018: LD_INT 3
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 5
36027: PUSH
36028: LD_INT 4
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 5
36037: PUSH
36038: LD_INT 5
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 4
36047: PUSH
36048: LD_INT 5
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 3
36057: PUSH
36058: LD_INT 4
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 3
36067: PUSH
36068: LD_INT 3
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 5
36077: PUSH
36078: LD_INT 3
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 3
36087: PUSH
36088: LD_INT 5
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 3
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 4
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: LD_INT 4
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: LD_INT 3
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 2
36169: PUSH
36170: LD_INT 4
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 2
36179: NEG
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 4
36190: NEG
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 4
36201: NEG
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 3
36213: NEG
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 3
36224: NEG
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 4
36235: NEG
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 5
36246: NEG
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 5
36257: NEG
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 5
36269: NEG
36270: PUSH
36271: LD_INT 2
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 3
36281: NEG
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: ST_TO_ADDR
// end ; end ;
36337: GO 36340
36339: POP
// case btype of b_depot , b_warehouse :
36340: LD_VAR 0 1
36344: PUSH
36345: LD_INT 0
36347: DOUBLE
36348: EQUAL
36349: IFTRUE 36359
36351: LD_INT 1
36353: DOUBLE
36354: EQUAL
36355: IFTRUE 36359
36357: GO 36560
36359: POP
// case nation of nation_american :
36360: LD_VAR 0 5
36364: PUSH
36365: LD_INT 1
36367: DOUBLE
36368: EQUAL
36369: IFTRUE 36373
36371: GO 36429
36373: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36374: LD_ADDR_VAR 0 9
36378: PUSH
36379: LD_VAR 0 11
36383: PUSH
36384: LD_VAR 0 12
36388: PUSH
36389: LD_VAR 0 13
36393: PUSH
36394: LD_VAR 0 14
36398: PUSH
36399: LD_VAR 0 15
36403: PUSH
36404: LD_VAR 0 16
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: PUSH
36417: LD_VAR 0 4
36421: PUSH
36422: LD_INT 1
36424: PLUS
36425: ARRAY
36426: ST_TO_ADDR
36427: GO 36558
36429: LD_INT 2
36431: DOUBLE
36432: EQUAL
36433: IFTRUE 36437
36435: GO 36493
36437: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36438: LD_ADDR_VAR 0 9
36442: PUSH
36443: LD_VAR 0 17
36447: PUSH
36448: LD_VAR 0 18
36452: PUSH
36453: LD_VAR 0 19
36457: PUSH
36458: LD_VAR 0 20
36462: PUSH
36463: LD_VAR 0 21
36467: PUSH
36468: LD_VAR 0 22
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: PUSH
36481: LD_VAR 0 4
36485: PUSH
36486: LD_INT 1
36488: PLUS
36489: ARRAY
36490: ST_TO_ADDR
36491: GO 36558
36493: LD_INT 3
36495: DOUBLE
36496: EQUAL
36497: IFTRUE 36501
36499: GO 36557
36501: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36502: LD_ADDR_VAR 0 9
36506: PUSH
36507: LD_VAR 0 23
36511: PUSH
36512: LD_VAR 0 24
36516: PUSH
36517: LD_VAR 0 25
36521: PUSH
36522: LD_VAR 0 26
36526: PUSH
36527: LD_VAR 0 27
36531: PUSH
36532: LD_VAR 0 28
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: PUSH
36545: LD_VAR 0 4
36549: PUSH
36550: LD_INT 1
36552: PLUS
36553: ARRAY
36554: ST_TO_ADDR
36555: GO 36558
36557: POP
36558: GO 37113
36560: LD_INT 2
36562: DOUBLE
36563: EQUAL
36564: IFTRUE 36574
36566: LD_INT 3
36568: DOUBLE
36569: EQUAL
36570: IFTRUE 36574
36572: GO 36630
36574: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36575: LD_ADDR_VAR 0 9
36579: PUSH
36580: LD_VAR 0 29
36584: PUSH
36585: LD_VAR 0 30
36589: PUSH
36590: LD_VAR 0 31
36594: PUSH
36595: LD_VAR 0 32
36599: PUSH
36600: LD_VAR 0 33
36604: PUSH
36605: LD_VAR 0 34
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: PUSH
36618: LD_VAR 0 4
36622: PUSH
36623: LD_INT 1
36625: PLUS
36626: ARRAY
36627: ST_TO_ADDR
36628: GO 37113
36630: LD_INT 16
36632: DOUBLE
36633: EQUAL
36634: IFTRUE 36692
36636: LD_INT 17
36638: DOUBLE
36639: EQUAL
36640: IFTRUE 36692
36642: LD_INT 18
36644: DOUBLE
36645: EQUAL
36646: IFTRUE 36692
36648: LD_INT 19
36650: DOUBLE
36651: EQUAL
36652: IFTRUE 36692
36654: LD_INT 22
36656: DOUBLE
36657: EQUAL
36658: IFTRUE 36692
36660: LD_INT 20
36662: DOUBLE
36663: EQUAL
36664: IFTRUE 36692
36666: LD_INT 21
36668: DOUBLE
36669: EQUAL
36670: IFTRUE 36692
36672: LD_INT 23
36674: DOUBLE
36675: EQUAL
36676: IFTRUE 36692
36678: LD_INT 24
36680: DOUBLE
36681: EQUAL
36682: IFTRUE 36692
36684: LD_INT 25
36686: DOUBLE
36687: EQUAL
36688: IFTRUE 36692
36690: GO 36748
36692: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36693: LD_ADDR_VAR 0 9
36697: PUSH
36698: LD_VAR 0 35
36702: PUSH
36703: LD_VAR 0 36
36707: PUSH
36708: LD_VAR 0 37
36712: PUSH
36713: LD_VAR 0 38
36717: PUSH
36718: LD_VAR 0 39
36722: PUSH
36723: LD_VAR 0 40
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: PUSH
36736: LD_VAR 0 4
36740: PUSH
36741: LD_INT 1
36743: PLUS
36744: ARRAY
36745: ST_TO_ADDR
36746: GO 37113
36748: LD_INT 6
36750: DOUBLE
36751: EQUAL
36752: IFTRUE 36804
36754: LD_INT 7
36756: DOUBLE
36757: EQUAL
36758: IFTRUE 36804
36760: LD_INT 8
36762: DOUBLE
36763: EQUAL
36764: IFTRUE 36804
36766: LD_INT 13
36768: DOUBLE
36769: EQUAL
36770: IFTRUE 36804
36772: LD_INT 12
36774: DOUBLE
36775: EQUAL
36776: IFTRUE 36804
36778: LD_INT 15
36780: DOUBLE
36781: EQUAL
36782: IFTRUE 36804
36784: LD_INT 11
36786: DOUBLE
36787: EQUAL
36788: IFTRUE 36804
36790: LD_INT 14
36792: DOUBLE
36793: EQUAL
36794: IFTRUE 36804
36796: LD_INT 10
36798: DOUBLE
36799: EQUAL
36800: IFTRUE 36804
36802: GO 36860
36804: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36805: LD_ADDR_VAR 0 9
36809: PUSH
36810: LD_VAR 0 41
36814: PUSH
36815: LD_VAR 0 42
36819: PUSH
36820: LD_VAR 0 43
36824: PUSH
36825: LD_VAR 0 44
36829: PUSH
36830: LD_VAR 0 45
36834: PUSH
36835: LD_VAR 0 46
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: PUSH
36848: LD_VAR 0 4
36852: PUSH
36853: LD_INT 1
36855: PLUS
36856: ARRAY
36857: ST_TO_ADDR
36858: GO 37113
36860: LD_INT 36
36862: DOUBLE
36863: EQUAL
36864: IFTRUE 36868
36866: GO 36924
36868: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36869: LD_ADDR_VAR 0 9
36873: PUSH
36874: LD_VAR 0 47
36878: PUSH
36879: LD_VAR 0 48
36883: PUSH
36884: LD_VAR 0 49
36888: PUSH
36889: LD_VAR 0 50
36893: PUSH
36894: LD_VAR 0 51
36898: PUSH
36899: LD_VAR 0 52
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: PUSH
36912: LD_VAR 0 4
36916: PUSH
36917: LD_INT 1
36919: PLUS
36920: ARRAY
36921: ST_TO_ADDR
36922: GO 37113
36924: LD_INT 4
36926: DOUBLE
36927: EQUAL
36928: IFTRUE 36950
36930: LD_INT 5
36932: DOUBLE
36933: EQUAL
36934: IFTRUE 36950
36936: LD_INT 34
36938: DOUBLE
36939: EQUAL
36940: IFTRUE 36950
36942: LD_INT 37
36944: DOUBLE
36945: EQUAL
36946: IFTRUE 36950
36948: GO 37006
36950: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36951: LD_ADDR_VAR 0 9
36955: PUSH
36956: LD_VAR 0 53
36960: PUSH
36961: LD_VAR 0 54
36965: PUSH
36966: LD_VAR 0 55
36970: PUSH
36971: LD_VAR 0 56
36975: PUSH
36976: LD_VAR 0 57
36980: PUSH
36981: LD_VAR 0 58
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: PUSH
36994: LD_VAR 0 4
36998: PUSH
36999: LD_INT 1
37001: PLUS
37002: ARRAY
37003: ST_TO_ADDR
37004: GO 37113
37006: LD_INT 31
37008: DOUBLE
37009: EQUAL
37010: IFTRUE 37056
37012: LD_INT 32
37014: DOUBLE
37015: EQUAL
37016: IFTRUE 37056
37018: LD_INT 33
37020: DOUBLE
37021: EQUAL
37022: IFTRUE 37056
37024: LD_INT 27
37026: DOUBLE
37027: EQUAL
37028: IFTRUE 37056
37030: LD_INT 26
37032: DOUBLE
37033: EQUAL
37034: IFTRUE 37056
37036: LD_INT 28
37038: DOUBLE
37039: EQUAL
37040: IFTRUE 37056
37042: LD_INT 29
37044: DOUBLE
37045: EQUAL
37046: IFTRUE 37056
37048: LD_INT 30
37050: DOUBLE
37051: EQUAL
37052: IFTRUE 37056
37054: GO 37112
37056: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
37057: LD_ADDR_VAR 0 9
37061: PUSH
37062: LD_VAR 0 59
37066: PUSH
37067: LD_VAR 0 60
37071: PUSH
37072: LD_VAR 0 61
37076: PUSH
37077: LD_VAR 0 62
37081: PUSH
37082: LD_VAR 0 63
37086: PUSH
37087: LD_VAR 0 64
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: PUSH
37100: LD_VAR 0 4
37104: PUSH
37105: LD_INT 1
37107: PLUS
37108: ARRAY
37109: ST_TO_ADDR
37110: GO 37113
37112: POP
// temp_list2 = [ ] ;
37113: LD_ADDR_VAR 0 10
37117: PUSH
37118: EMPTY
37119: ST_TO_ADDR
// for i in temp_list do
37120: LD_ADDR_VAR 0 8
37124: PUSH
37125: LD_VAR 0 9
37129: PUSH
37130: FOR_IN
37131: IFFALSE 37183
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
37133: LD_ADDR_VAR 0 10
37137: PUSH
37138: LD_VAR 0 10
37142: PUSH
37143: LD_VAR 0 8
37147: PUSH
37148: LD_INT 1
37150: ARRAY
37151: PUSH
37152: LD_VAR 0 2
37156: PLUS
37157: PUSH
37158: LD_VAR 0 8
37162: PUSH
37163: LD_INT 2
37165: ARRAY
37166: PUSH
37167: LD_VAR 0 3
37171: PLUS
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: EMPTY
37178: LIST
37179: ADD
37180: ST_TO_ADDR
37181: GO 37130
37183: POP
37184: POP
// result = temp_list2 ;
37185: LD_ADDR_VAR 0 7
37189: PUSH
37190: LD_VAR 0 10
37194: ST_TO_ADDR
// end ;
37195: LD_VAR 0 7
37199: RET
// export function EnemyInRange ( unit , dist ) ; begin
37200: LD_INT 0
37202: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
37203: LD_ADDR_VAR 0 3
37207: PUSH
37208: LD_VAR 0 1
37212: PPUSH
37213: CALL_OW 255
37217: PPUSH
37218: LD_VAR 0 1
37222: PPUSH
37223: CALL_OW 250
37227: PPUSH
37228: LD_VAR 0 1
37232: PPUSH
37233: CALL_OW 251
37237: PPUSH
37238: LD_VAR 0 2
37242: PPUSH
37243: CALL 11304 0 4
37247: PUSH
37248: LD_INT 4
37250: ARRAY
37251: ST_TO_ADDR
// end ;
37252: LD_VAR 0 3
37256: RET
// export function PlayerSeeMe ( unit ) ; begin
37257: LD_INT 0
37259: PPUSH
// result := See ( your_side , unit ) ;
37260: LD_ADDR_VAR 0 2
37264: PUSH
37265: LD_OWVAR 2
37269: PPUSH
37270: LD_VAR 0 1
37274: PPUSH
37275: CALL_OW 292
37279: ST_TO_ADDR
// end ;
37280: LD_VAR 0 2
37284: RET
// export function ReverseDir ( unit ) ; begin
37285: LD_INT 0
37287: PPUSH
// if not unit then
37288: LD_VAR 0 1
37292: NOT
37293: IFFALSE 37297
// exit ;
37295: GO 37320
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37297: LD_ADDR_VAR 0 2
37301: PUSH
37302: LD_VAR 0 1
37306: PPUSH
37307: CALL_OW 254
37311: PUSH
37312: LD_INT 3
37314: PLUS
37315: PUSH
37316: LD_INT 6
37318: MOD
37319: ST_TO_ADDR
// end ;
37320: LD_VAR 0 2
37324: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
37325: LD_INT 0
37327: PPUSH
37328: PPUSH
37329: PPUSH
37330: PPUSH
37331: PPUSH
// if not hexes then
37332: LD_VAR 0 2
37336: NOT
37337: IFFALSE 37341
// exit ;
37339: GO 37489
// dist := 9999 ;
37341: LD_ADDR_VAR 0 5
37345: PUSH
37346: LD_INT 9999
37348: ST_TO_ADDR
// for i = 1 to hexes do
37349: LD_ADDR_VAR 0 4
37353: PUSH
37354: DOUBLE
37355: LD_INT 1
37357: DEC
37358: ST_TO_ADDR
37359: LD_VAR 0 2
37363: PUSH
37364: FOR_TO
37365: IFFALSE 37477
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
37367: LD_VAR 0 1
37371: PPUSH
37372: LD_VAR 0 2
37376: PUSH
37377: LD_VAR 0 4
37381: ARRAY
37382: PUSH
37383: LD_INT 1
37385: ARRAY
37386: PPUSH
37387: LD_VAR 0 2
37391: PUSH
37392: LD_VAR 0 4
37396: ARRAY
37397: PUSH
37398: LD_INT 2
37400: ARRAY
37401: PPUSH
37402: CALL_OW 297
37406: PUSH
37407: LD_VAR 0 5
37411: LESS
37412: IFFALSE 37475
// begin hex := hexes [ i ] ;
37414: LD_ADDR_VAR 0 7
37418: PUSH
37419: LD_VAR 0 2
37423: PUSH
37424: LD_VAR 0 4
37428: ARRAY
37429: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37430: LD_ADDR_VAR 0 5
37434: PUSH
37435: LD_VAR 0 1
37439: PPUSH
37440: LD_VAR 0 2
37444: PUSH
37445: LD_VAR 0 4
37449: ARRAY
37450: PUSH
37451: LD_INT 1
37453: ARRAY
37454: PPUSH
37455: LD_VAR 0 2
37459: PUSH
37460: LD_VAR 0 4
37464: ARRAY
37465: PUSH
37466: LD_INT 2
37468: ARRAY
37469: PPUSH
37470: CALL_OW 297
37474: ST_TO_ADDR
// end ; end ;
37475: GO 37364
37477: POP
37478: POP
// result := hex ;
37479: LD_ADDR_VAR 0 3
37483: PUSH
37484: LD_VAR 0 7
37488: ST_TO_ADDR
// end ;
37489: LD_VAR 0 3
37493: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37494: LD_INT 0
37496: PPUSH
37497: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37498: LD_VAR 0 1
37502: NOT
37503: PUSH
37504: LD_VAR 0 1
37508: PUSH
37509: LD_INT 21
37511: PUSH
37512: LD_INT 2
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 23
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PPUSH
37533: CALL_OW 69
37537: IN
37538: NOT
37539: OR
37540: IFFALSE 37544
// exit ;
37542: GO 37591
// for i = 1 to 3 do
37544: LD_ADDR_VAR 0 3
37548: PUSH
37549: DOUBLE
37550: LD_INT 1
37552: DEC
37553: ST_TO_ADDR
37554: LD_INT 3
37556: PUSH
37557: FOR_TO
37558: IFFALSE 37589
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37560: LD_VAR 0 1
37564: PPUSH
37565: CALL_OW 250
37569: PPUSH
37570: LD_VAR 0 1
37574: PPUSH
37575: CALL_OW 251
37579: PPUSH
37580: LD_INT 1
37582: PPUSH
37583: CALL_OW 453
37587: GO 37557
37589: POP
37590: POP
// end ;
37591: LD_VAR 0 2
37595: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37596: LD_INT 0
37598: PPUSH
37599: PPUSH
37600: PPUSH
37601: PPUSH
37602: PPUSH
37603: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
37604: LD_VAR 0 1
37608: NOT
37609: PUSH
37610: LD_VAR 0 2
37614: NOT
37615: OR
37616: PUSH
37617: LD_VAR 0 1
37621: PPUSH
37622: CALL_OW 314
37626: OR
37627: IFFALSE 37631
// exit ;
37629: GO 38072
// x := GetX ( enemy_unit ) ;
37631: LD_ADDR_VAR 0 7
37635: PUSH
37636: LD_VAR 0 2
37640: PPUSH
37641: CALL_OW 250
37645: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37646: LD_ADDR_VAR 0 8
37650: PUSH
37651: LD_VAR 0 2
37655: PPUSH
37656: CALL_OW 251
37660: ST_TO_ADDR
// if not x or not y then
37661: LD_VAR 0 7
37665: NOT
37666: PUSH
37667: LD_VAR 0 8
37671: NOT
37672: OR
37673: IFFALSE 37677
// exit ;
37675: GO 38072
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37677: LD_ADDR_VAR 0 6
37681: PUSH
37682: LD_VAR 0 7
37686: PPUSH
37687: LD_INT 0
37689: PPUSH
37690: LD_INT 4
37692: PPUSH
37693: CALL_OW 272
37697: PUSH
37698: LD_VAR 0 8
37702: PPUSH
37703: LD_INT 0
37705: PPUSH
37706: LD_INT 4
37708: PPUSH
37709: CALL_OW 273
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_VAR 0 7
37722: PPUSH
37723: LD_INT 1
37725: PPUSH
37726: LD_INT 4
37728: PPUSH
37729: CALL_OW 272
37733: PUSH
37734: LD_VAR 0 8
37738: PPUSH
37739: LD_INT 1
37741: PPUSH
37742: LD_INT 4
37744: PPUSH
37745: CALL_OW 273
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_VAR 0 7
37758: PPUSH
37759: LD_INT 2
37761: PPUSH
37762: LD_INT 4
37764: PPUSH
37765: CALL_OW 272
37769: PUSH
37770: LD_VAR 0 8
37774: PPUSH
37775: LD_INT 2
37777: PPUSH
37778: LD_INT 4
37780: PPUSH
37781: CALL_OW 273
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_VAR 0 7
37794: PPUSH
37795: LD_INT 3
37797: PPUSH
37798: LD_INT 4
37800: PPUSH
37801: CALL_OW 272
37805: PUSH
37806: LD_VAR 0 8
37810: PPUSH
37811: LD_INT 3
37813: PPUSH
37814: LD_INT 4
37816: PPUSH
37817: CALL_OW 273
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_VAR 0 7
37830: PPUSH
37831: LD_INT 4
37833: PPUSH
37834: LD_INT 4
37836: PPUSH
37837: CALL_OW 272
37841: PUSH
37842: LD_VAR 0 8
37846: PPUSH
37847: LD_INT 4
37849: PPUSH
37850: LD_INT 4
37852: PPUSH
37853: CALL_OW 273
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_VAR 0 7
37866: PPUSH
37867: LD_INT 5
37869: PPUSH
37870: LD_INT 4
37872: PPUSH
37873: CALL_OW 272
37877: PUSH
37878: LD_VAR 0 8
37882: PPUSH
37883: LD_INT 5
37885: PPUSH
37886: LD_INT 4
37888: PPUSH
37889: CALL_OW 273
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: ST_TO_ADDR
// for i = tmp downto 1 do
37906: LD_ADDR_VAR 0 4
37910: PUSH
37911: DOUBLE
37912: LD_VAR 0 6
37916: INC
37917: ST_TO_ADDR
37918: LD_INT 1
37920: PUSH
37921: FOR_DOWNTO
37922: IFFALSE 38023
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37924: LD_VAR 0 6
37928: PUSH
37929: LD_VAR 0 4
37933: ARRAY
37934: PUSH
37935: LD_INT 1
37937: ARRAY
37938: PPUSH
37939: LD_VAR 0 6
37943: PUSH
37944: LD_VAR 0 4
37948: ARRAY
37949: PUSH
37950: LD_INT 2
37952: ARRAY
37953: PPUSH
37954: CALL_OW 488
37958: NOT
37959: PUSH
37960: LD_VAR 0 6
37964: PUSH
37965: LD_VAR 0 4
37969: ARRAY
37970: PUSH
37971: LD_INT 1
37973: ARRAY
37974: PPUSH
37975: LD_VAR 0 6
37979: PUSH
37980: LD_VAR 0 4
37984: ARRAY
37985: PUSH
37986: LD_INT 2
37988: ARRAY
37989: PPUSH
37990: CALL_OW 428
37994: PUSH
37995: LD_INT 0
37997: NONEQUAL
37998: OR
37999: IFFALSE 38021
// tmp := Delete ( tmp , i ) ;
38001: LD_ADDR_VAR 0 6
38005: PUSH
38006: LD_VAR 0 6
38010: PPUSH
38011: LD_VAR 0 4
38015: PPUSH
38016: CALL_OW 3
38020: ST_TO_ADDR
38021: GO 37921
38023: POP
38024: POP
// j := GetClosestHex ( unit , tmp ) ;
38025: LD_ADDR_VAR 0 5
38029: PUSH
38030: LD_VAR 0 1
38034: PPUSH
38035: LD_VAR 0 6
38039: PPUSH
38040: CALL 37325 0 2
38044: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
38045: LD_VAR 0 1
38049: PPUSH
38050: LD_VAR 0 5
38054: PUSH
38055: LD_INT 1
38057: ARRAY
38058: PPUSH
38059: LD_VAR 0 5
38063: PUSH
38064: LD_INT 2
38066: ARRAY
38067: PPUSH
38068: CALL_OW 111
// end ;
38072: LD_VAR 0 3
38076: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38077: LD_INT 0
38079: PPUSH
38080: PPUSH
38081: PPUSH
// uc_side = 0 ;
38082: LD_ADDR_OWVAR 20
38086: PUSH
38087: LD_INT 0
38089: ST_TO_ADDR
// uc_nation = 0 ;
38090: LD_ADDR_OWVAR 21
38094: PUSH
38095: LD_INT 0
38097: ST_TO_ADDR
// InitHc_All ( ) ;
38098: CALL_OW 584
// InitVc ;
38102: CALL_OW 20
// if mastodonts then
38106: LD_VAR 0 6
38110: IFFALSE 38177
// for i = 1 to mastodonts do
38112: LD_ADDR_VAR 0 11
38116: PUSH
38117: DOUBLE
38118: LD_INT 1
38120: DEC
38121: ST_TO_ADDR
38122: LD_VAR 0 6
38126: PUSH
38127: FOR_TO
38128: IFFALSE 38175
// begin vc_chassis := 31 ;
38130: LD_ADDR_OWVAR 37
38134: PUSH
38135: LD_INT 31
38137: ST_TO_ADDR
// vc_control := control_rider ;
38138: LD_ADDR_OWVAR 38
38142: PUSH
38143: LD_INT 4
38145: ST_TO_ADDR
// animal := CreateVehicle ;
38146: LD_ADDR_VAR 0 12
38150: PUSH
38151: CALL_OW 45
38155: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38156: LD_VAR 0 12
38160: PPUSH
38161: LD_VAR 0 8
38165: PPUSH
38166: LD_INT 0
38168: PPUSH
38169: CALL 40365 0 3
// end ;
38173: GO 38127
38175: POP
38176: POP
// if horses then
38177: LD_VAR 0 5
38181: IFFALSE 38248
// for i = 1 to horses do
38183: LD_ADDR_VAR 0 11
38187: PUSH
38188: DOUBLE
38189: LD_INT 1
38191: DEC
38192: ST_TO_ADDR
38193: LD_VAR 0 5
38197: PUSH
38198: FOR_TO
38199: IFFALSE 38246
// begin hc_class := 21 ;
38201: LD_ADDR_OWVAR 28
38205: PUSH
38206: LD_INT 21
38208: ST_TO_ADDR
// hc_gallery :=  ;
38209: LD_ADDR_OWVAR 33
38213: PUSH
38214: LD_STRING 
38216: ST_TO_ADDR
// animal := CreateHuman ;
38217: LD_ADDR_VAR 0 12
38221: PUSH
38222: CALL_OW 44
38226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38227: LD_VAR 0 12
38231: PPUSH
38232: LD_VAR 0 8
38236: PPUSH
38237: LD_INT 0
38239: PPUSH
38240: CALL 40365 0 3
// end ;
38244: GO 38198
38246: POP
38247: POP
// if birds then
38248: LD_VAR 0 1
38252: IFFALSE 38319
// for i = 1 to birds do
38254: LD_ADDR_VAR 0 11
38258: PUSH
38259: DOUBLE
38260: LD_INT 1
38262: DEC
38263: ST_TO_ADDR
38264: LD_VAR 0 1
38268: PUSH
38269: FOR_TO
38270: IFFALSE 38317
// begin hc_class = 18 ;
38272: LD_ADDR_OWVAR 28
38276: PUSH
38277: LD_INT 18
38279: ST_TO_ADDR
// hc_gallery =  ;
38280: LD_ADDR_OWVAR 33
38284: PUSH
38285: LD_STRING 
38287: ST_TO_ADDR
// animal := CreateHuman ;
38288: LD_ADDR_VAR 0 12
38292: PUSH
38293: CALL_OW 44
38297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38298: LD_VAR 0 12
38302: PPUSH
38303: LD_VAR 0 8
38307: PPUSH
38308: LD_INT 0
38310: PPUSH
38311: CALL 40365 0 3
// end ;
38315: GO 38269
38317: POP
38318: POP
// if tigers then
38319: LD_VAR 0 2
38323: IFFALSE 38407
// for i = 1 to tigers do
38325: LD_ADDR_VAR 0 11
38329: PUSH
38330: DOUBLE
38331: LD_INT 1
38333: DEC
38334: ST_TO_ADDR
38335: LD_VAR 0 2
38339: PUSH
38340: FOR_TO
38341: IFFALSE 38405
// begin hc_class = class_tiger ;
38343: LD_ADDR_OWVAR 28
38347: PUSH
38348: LD_INT 14
38350: ST_TO_ADDR
// hc_gallery =  ;
38351: LD_ADDR_OWVAR 33
38355: PUSH
38356: LD_STRING 
38358: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38359: LD_ADDR_OWVAR 35
38363: PUSH
38364: LD_INT 7
38366: NEG
38367: PPUSH
38368: LD_INT 7
38370: PPUSH
38371: CALL_OW 12
38375: ST_TO_ADDR
// animal := CreateHuman ;
38376: LD_ADDR_VAR 0 12
38380: PUSH
38381: CALL_OW 44
38385: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38386: LD_VAR 0 12
38390: PPUSH
38391: LD_VAR 0 8
38395: PPUSH
38396: LD_INT 0
38398: PPUSH
38399: CALL 40365 0 3
// end ;
38403: GO 38340
38405: POP
38406: POP
// if apemans then
38407: LD_VAR 0 3
38411: IFFALSE 38534
// for i = 1 to apemans do
38413: LD_ADDR_VAR 0 11
38417: PUSH
38418: DOUBLE
38419: LD_INT 1
38421: DEC
38422: ST_TO_ADDR
38423: LD_VAR 0 3
38427: PUSH
38428: FOR_TO
38429: IFFALSE 38532
// begin hc_class = class_apeman ;
38431: LD_ADDR_OWVAR 28
38435: PUSH
38436: LD_INT 12
38438: ST_TO_ADDR
// hc_gallery =  ;
38439: LD_ADDR_OWVAR 33
38443: PUSH
38444: LD_STRING 
38446: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
38447: LD_ADDR_OWVAR 35
38451: PUSH
38452: LD_INT 5
38454: NEG
38455: PPUSH
38456: LD_INT 5
38458: PPUSH
38459: CALL_OW 12
38463: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38464: LD_ADDR_OWVAR 31
38468: PUSH
38469: LD_INT 1
38471: PPUSH
38472: LD_INT 3
38474: PPUSH
38475: CALL_OW 12
38479: PUSH
38480: LD_INT 1
38482: PPUSH
38483: LD_INT 3
38485: PPUSH
38486: CALL_OW 12
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: ST_TO_ADDR
// animal := CreateHuman ;
38503: LD_ADDR_VAR 0 12
38507: PUSH
38508: CALL_OW 44
38512: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38513: LD_VAR 0 12
38517: PPUSH
38518: LD_VAR 0 8
38522: PPUSH
38523: LD_INT 0
38525: PPUSH
38526: CALL 40365 0 3
// end ;
38530: GO 38428
38532: POP
38533: POP
// if enchidnas then
38534: LD_VAR 0 4
38538: IFFALSE 38605
// for i = 1 to enchidnas do
38540: LD_ADDR_VAR 0 11
38544: PUSH
38545: DOUBLE
38546: LD_INT 1
38548: DEC
38549: ST_TO_ADDR
38550: LD_VAR 0 4
38554: PUSH
38555: FOR_TO
38556: IFFALSE 38603
// begin hc_class = 13 ;
38558: LD_ADDR_OWVAR 28
38562: PUSH
38563: LD_INT 13
38565: ST_TO_ADDR
// hc_gallery =  ;
38566: LD_ADDR_OWVAR 33
38570: PUSH
38571: LD_STRING 
38573: ST_TO_ADDR
// animal := CreateHuman ;
38574: LD_ADDR_VAR 0 12
38578: PUSH
38579: CALL_OW 44
38583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38584: LD_VAR 0 12
38588: PPUSH
38589: LD_VAR 0 8
38593: PPUSH
38594: LD_INT 0
38596: PPUSH
38597: CALL 40365 0 3
// end ;
38601: GO 38555
38603: POP
38604: POP
// if fishes then
38605: LD_VAR 0 7
38609: IFFALSE 38676
// for i = 1 to fishes do
38611: LD_ADDR_VAR 0 11
38615: PUSH
38616: DOUBLE
38617: LD_INT 1
38619: DEC
38620: ST_TO_ADDR
38621: LD_VAR 0 7
38625: PUSH
38626: FOR_TO
38627: IFFALSE 38674
// begin hc_class = 20 ;
38629: LD_ADDR_OWVAR 28
38633: PUSH
38634: LD_INT 20
38636: ST_TO_ADDR
// hc_gallery =  ;
38637: LD_ADDR_OWVAR 33
38641: PUSH
38642: LD_STRING 
38644: ST_TO_ADDR
// animal := CreateHuman ;
38645: LD_ADDR_VAR 0 12
38649: PUSH
38650: CALL_OW 44
38654: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38655: LD_VAR 0 12
38659: PPUSH
38660: LD_VAR 0 9
38664: PPUSH
38665: LD_INT 0
38667: PPUSH
38668: CALL 40365 0 3
// end ;
38672: GO 38626
38674: POP
38675: POP
// end ;
38676: LD_VAR 0 10
38680: RET
// export function WantHeal ( sci , unit ) ; begin
38681: LD_INT 0
38683: PPUSH
// if GetTaskList ( sci ) > 0 then
38684: LD_VAR 0 1
38688: PPUSH
38689: CALL_OW 437
38693: PUSH
38694: LD_INT 0
38696: GREATER
38697: IFFALSE 38767
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38699: LD_VAR 0 1
38703: PPUSH
38704: CALL_OW 437
38708: PUSH
38709: LD_INT 1
38711: ARRAY
38712: PUSH
38713: LD_INT 1
38715: ARRAY
38716: PUSH
38717: LD_STRING l
38719: EQUAL
38720: PUSH
38721: LD_VAR 0 1
38725: PPUSH
38726: CALL_OW 437
38730: PUSH
38731: LD_INT 1
38733: ARRAY
38734: PUSH
38735: LD_INT 4
38737: ARRAY
38738: PUSH
38739: LD_VAR 0 2
38743: EQUAL
38744: AND
38745: IFFALSE 38757
// result := true else
38747: LD_ADDR_VAR 0 3
38751: PUSH
38752: LD_INT 1
38754: ST_TO_ADDR
38755: GO 38765
// result := false ;
38757: LD_ADDR_VAR 0 3
38761: PUSH
38762: LD_INT 0
38764: ST_TO_ADDR
// end else
38765: GO 38775
// result := false ;
38767: LD_ADDR_VAR 0 3
38771: PUSH
38772: LD_INT 0
38774: ST_TO_ADDR
// end ;
38775: LD_VAR 0 3
38779: RET
// export function HealTarget ( sci ) ; begin
38780: LD_INT 0
38782: PPUSH
// if not sci then
38783: LD_VAR 0 1
38787: NOT
38788: IFFALSE 38792
// exit ;
38790: GO 38857
// result := 0 ;
38792: LD_ADDR_VAR 0 2
38796: PUSH
38797: LD_INT 0
38799: ST_TO_ADDR
// if GetTaskList ( sci ) then
38800: LD_VAR 0 1
38804: PPUSH
38805: CALL_OW 437
38809: IFFALSE 38857
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38811: LD_VAR 0 1
38815: PPUSH
38816: CALL_OW 437
38820: PUSH
38821: LD_INT 1
38823: ARRAY
38824: PUSH
38825: LD_INT 1
38827: ARRAY
38828: PUSH
38829: LD_STRING l
38831: EQUAL
38832: IFFALSE 38857
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38834: LD_ADDR_VAR 0 2
38838: PUSH
38839: LD_VAR 0 1
38843: PPUSH
38844: CALL_OW 437
38848: PUSH
38849: LD_INT 1
38851: ARRAY
38852: PUSH
38853: LD_INT 4
38855: ARRAY
38856: ST_TO_ADDR
// end ;
38857: LD_VAR 0 2
38861: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38862: LD_INT 0
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
// if not base_units then
38868: LD_VAR 0 1
38872: NOT
38873: IFFALSE 38877
// exit ;
38875: GO 38964
// result := false ;
38877: LD_ADDR_VAR 0 2
38881: PUSH
38882: LD_INT 0
38884: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38885: LD_ADDR_VAR 0 5
38889: PUSH
38890: LD_VAR 0 1
38894: PPUSH
38895: LD_INT 21
38897: PUSH
38898: LD_INT 3
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PPUSH
38905: CALL_OW 72
38909: ST_TO_ADDR
// if not tmp then
38910: LD_VAR 0 5
38914: NOT
38915: IFFALSE 38919
// exit ;
38917: GO 38964
// for i in tmp do
38919: LD_ADDR_VAR 0 3
38923: PUSH
38924: LD_VAR 0 5
38928: PUSH
38929: FOR_IN
38930: IFFALSE 38962
// begin result := EnemyInRange ( i , 22 ) ;
38932: LD_ADDR_VAR 0 2
38936: PUSH
38937: LD_VAR 0 3
38941: PPUSH
38942: LD_INT 22
38944: PPUSH
38945: CALL 37200 0 2
38949: ST_TO_ADDR
// if result then
38950: LD_VAR 0 2
38954: IFFALSE 38960
// exit ;
38956: POP
38957: POP
38958: GO 38964
// end ;
38960: GO 38929
38962: POP
38963: POP
// end ;
38964: LD_VAR 0 2
38968: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
38969: LD_INT 0
38971: PPUSH
38972: PPUSH
// if not units then
38973: LD_VAR 0 1
38977: NOT
38978: IFFALSE 38982
// exit ;
38980: GO 39052
// result := [ ] ;
38982: LD_ADDR_VAR 0 3
38986: PUSH
38987: EMPTY
38988: ST_TO_ADDR
// for i in units do
38989: LD_ADDR_VAR 0 4
38993: PUSH
38994: LD_VAR 0 1
38998: PUSH
38999: FOR_IN
39000: IFFALSE 39050
// if GetTag ( i ) = tag then
39002: LD_VAR 0 4
39006: PPUSH
39007: CALL_OW 110
39011: PUSH
39012: LD_VAR 0 2
39016: EQUAL
39017: IFFALSE 39048
// result := Insert ( result , result + 1 , i ) ;
39019: LD_ADDR_VAR 0 3
39023: PUSH
39024: LD_VAR 0 3
39028: PPUSH
39029: LD_VAR 0 3
39033: PUSH
39034: LD_INT 1
39036: PLUS
39037: PPUSH
39038: LD_VAR 0 4
39042: PPUSH
39043: CALL_OW 2
39047: ST_TO_ADDR
39048: GO 38999
39050: POP
39051: POP
// end ;
39052: LD_VAR 0 3
39056: RET
// export function IsDriver ( un ) ; begin
39057: LD_INT 0
39059: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39060: LD_ADDR_VAR 0 2
39064: PUSH
39065: LD_VAR 0 1
39069: PUSH
39070: LD_INT 55
39072: PUSH
39073: EMPTY
39074: LIST
39075: PPUSH
39076: CALL_OW 69
39080: IN
39081: ST_TO_ADDR
// end ;
39082: LD_VAR 0 2
39086: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39087: LD_INT 0
39089: PPUSH
39090: PPUSH
// list := [ ] ;
39091: LD_ADDR_VAR 0 5
39095: PUSH
39096: EMPTY
39097: ST_TO_ADDR
// case d of 0 :
39098: LD_VAR 0 3
39102: PUSH
39103: LD_INT 0
39105: DOUBLE
39106: EQUAL
39107: IFTRUE 39111
39109: GO 39244
39111: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39112: LD_ADDR_VAR 0 5
39116: PUSH
39117: LD_VAR 0 1
39121: PUSH
39122: LD_INT 4
39124: MINUS
39125: PUSH
39126: LD_VAR 0 2
39130: PUSH
39131: LD_INT 4
39133: MINUS
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: PUSH
39143: LD_VAR 0 1
39147: PUSH
39148: LD_INT 3
39150: MINUS
39151: PUSH
39152: LD_VAR 0 2
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: PUSH
39165: LD_VAR 0 1
39169: PUSH
39170: LD_INT 4
39172: PLUS
39173: PUSH
39174: LD_VAR 0 2
39178: PUSH
39179: LD_INT 4
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: PUSH
39187: LD_VAR 0 1
39191: PUSH
39192: LD_INT 3
39194: PLUS
39195: PUSH
39196: LD_VAR 0 2
39200: PUSH
39201: LD_INT 3
39203: PLUS
39204: PUSH
39205: LD_INT 5
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: LIST
39212: PUSH
39213: LD_VAR 0 1
39217: PUSH
39218: LD_VAR 0 2
39222: PUSH
39223: LD_INT 4
39225: PLUS
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: ST_TO_ADDR
// end ; 1 :
39242: GO 39942
39244: LD_INT 1
39246: DOUBLE
39247: EQUAL
39248: IFTRUE 39252
39250: GO 39385
39252: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39253: LD_ADDR_VAR 0 5
39257: PUSH
39258: LD_VAR 0 1
39262: PUSH
39263: LD_VAR 0 2
39267: PUSH
39268: LD_INT 4
39270: MINUS
39271: PUSH
39272: LD_INT 3
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: LIST
39279: PUSH
39280: LD_VAR 0 1
39284: PUSH
39285: LD_INT 3
39287: MINUS
39288: PUSH
39289: LD_VAR 0 2
39293: PUSH
39294: LD_INT 3
39296: MINUS
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: PUSH
39306: LD_VAR 0 1
39310: PUSH
39311: LD_INT 4
39313: MINUS
39314: PUSH
39315: LD_VAR 0 2
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: PUSH
39328: LD_VAR 0 1
39332: PUSH
39333: LD_VAR 0 2
39337: PUSH
39338: LD_INT 3
39340: PLUS
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: PUSH
39350: LD_VAR 0 1
39354: PUSH
39355: LD_INT 4
39357: PLUS
39358: PUSH
39359: LD_VAR 0 2
39363: PUSH
39364: LD_INT 4
39366: PLUS
39367: PUSH
39368: LD_INT 5
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: LIST
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: ST_TO_ADDR
// end ; 2 :
39383: GO 39942
39385: LD_INT 2
39387: DOUBLE
39388: EQUAL
39389: IFTRUE 39393
39391: GO 39522
39393: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39394: LD_ADDR_VAR 0 5
39398: PUSH
39399: LD_VAR 0 1
39403: PUSH
39404: LD_VAR 0 2
39408: PUSH
39409: LD_INT 3
39411: MINUS
39412: PUSH
39413: LD_INT 3
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: PUSH
39421: LD_VAR 0 1
39425: PUSH
39426: LD_INT 4
39428: PLUS
39429: PUSH
39430: LD_VAR 0 2
39434: PUSH
39435: LD_INT 4
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: PUSH
39443: LD_VAR 0 1
39447: PUSH
39448: LD_VAR 0 2
39452: PUSH
39453: LD_INT 4
39455: PLUS
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: PUSH
39465: LD_VAR 0 1
39469: PUSH
39470: LD_INT 3
39472: MINUS
39473: PUSH
39474: LD_VAR 0 2
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: LIST
39486: PUSH
39487: LD_VAR 0 1
39491: PUSH
39492: LD_INT 4
39494: MINUS
39495: PUSH
39496: LD_VAR 0 2
39500: PUSH
39501: LD_INT 4
39503: MINUS
39504: PUSH
39505: LD_INT 2
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: ST_TO_ADDR
// end ; 3 :
39520: GO 39942
39522: LD_INT 3
39524: DOUBLE
39525: EQUAL
39526: IFTRUE 39530
39528: GO 39663
39530: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39531: LD_ADDR_VAR 0 5
39535: PUSH
39536: LD_VAR 0 1
39540: PUSH
39541: LD_INT 3
39543: PLUS
39544: PUSH
39545: LD_VAR 0 2
39549: PUSH
39550: LD_INT 4
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: LIST
39557: PUSH
39558: LD_VAR 0 1
39562: PUSH
39563: LD_INT 4
39565: PLUS
39566: PUSH
39567: LD_VAR 0 2
39571: PUSH
39572: LD_INT 4
39574: PLUS
39575: PUSH
39576: LD_INT 5
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: LIST
39583: PUSH
39584: LD_VAR 0 1
39588: PUSH
39589: LD_INT 4
39591: MINUS
39592: PUSH
39593: LD_VAR 0 2
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: LIST
39605: PUSH
39606: LD_VAR 0 1
39610: PUSH
39611: LD_VAR 0 2
39615: PUSH
39616: LD_INT 4
39618: MINUS
39619: PUSH
39620: LD_INT 3
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: LIST
39627: PUSH
39628: LD_VAR 0 1
39632: PUSH
39633: LD_INT 3
39635: MINUS
39636: PUSH
39637: LD_VAR 0 2
39641: PUSH
39642: LD_INT 3
39644: MINUS
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: ST_TO_ADDR
// end ; 4 :
39661: GO 39942
39663: LD_INT 4
39665: DOUBLE
39666: EQUAL
39667: IFTRUE 39671
39669: GO 39804
39671: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39672: LD_ADDR_VAR 0 5
39676: PUSH
39677: LD_VAR 0 1
39681: PUSH
39682: LD_VAR 0 2
39686: PUSH
39687: LD_INT 4
39689: PLUS
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: LIST
39698: PUSH
39699: LD_VAR 0 1
39703: PUSH
39704: LD_INT 3
39706: PLUS
39707: PUSH
39708: LD_VAR 0 2
39712: PUSH
39713: LD_INT 3
39715: PLUS
39716: PUSH
39717: LD_INT 5
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: LIST
39724: PUSH
39725: LD_VAR 0 1
39729: PUSH
39730: LD_INT 4
39732: PLUS
39733: PUSH
39734: LD_VAR 0 2
39738: PUSH
39739: LD_INT 4
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: LIST
39746: PUSH
39747: LD_VAR 0 1
39751: PUSH
39752: LD_VAR 0 2
39756: PUSH
39757: LD_INT 3
39759: MINUS
39760: PUSH
39761: LD_INT 3
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: LIST
39768: PUSH
39769: LD_VAR 0 1
39773: PUSH
39774: LD_INT 4
39776: MINUS
39777: PUSH
39778: LD_VAR 0 2
39782: PUSH
39783: LD_INT 4
39785: MINUS
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: ST_TO_ADDR
// end ; 5 :
39802: GO 39942
39804: LD_INT 5
39806: DOUBLE
39807: EQUAL
39808: IFTRUE 39812
39810: GO 39941
39812: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39813: LD_ADDR_VAR 0 5
39817: PUSH
39818: LD_VAR 0 1
39822: PUSH
39823: LD_INT 4
39825: MINUS
39826: PUSH
39827: LD_VAR 0 2
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: LIST
39839: PUSH
39840: LD_VAR 0 1
39844: PUSH
39845: LD_VAR 0 2
39849: PUSH
39850: LD_INT 4
39852: MINUS
39853: PUSH
39854: LD_INT 3
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: PUSH
39862: LD_VAR 0 1
39866: PUSH
39867: LD_INT 4
39869: PLUS
39870: PUSH
39871: LD_VAR 0 2
39875: PUSH
39876: LD_INT 4
39878: PLUS
39879: PUSH
39880: LD_INT 5
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: LIST
39887: PUSH
39888: LD_VAR 0 1
39892: PUSH
39893: LD_INT 3
39895: PLUS
39896: PUSH
39897: LD_VAR 0 2
39901: PUSH
39902: LD_INT 4
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: PUSH
39910: LD_VAR 0 1
39914: PUSH
39915: LD_VAR 0 2
39919: PUSH
39920: LD_INT 3
39922: PLUS
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: LIST
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: ST_TO_ADDR
// end ; end ;
39939: GO 39942
39941: POP
// result := list ;
39942: LD_ADDR_VAR 0 4
39946: PUSH
39947: LD_VAR 0 5
39951: ST_TO_ADDR
// end ;
39952: LD_VAR 0 4
39956: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39957: LD_INT 0
39959: PPUSH
39960: PPUSH
39961: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39962: LD_VAR 0 1
39966: NOT
39967: PUSH
39968: LD_VAR 0 2
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: LD_INT 3
39981: PUSH
39982: LD_INT 4
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: IN
39991: NOT
39992: OR
39993: IFFALSE 39997
// exit ;
39995: GO 40089
// tmp := [ ] ;
39997: LD_ADDR_VAR 0 5
40001: PUSH
40002: EMPTY
40003: ST_TO_ADDR
// for i in units do
40004: LD_ADDR_VAR 0 4
40008: PUSH
40009: LD_VAR 0 1
40013: PUSH
40014: FOR_IN
40015: IFFALSE 40058
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
40017: LD_ADDR_VAR 0 5
40021: PUSH
40022: LD_VAR 0 5
40026: PPUSH
40027: LD_VAR 0 5
40031: PUSH
40032: LD_INT 1
40034: PLUS
40035: PPUSH
40036: LD_VAR 0 4
40040: PPUSH
40041: LD_VAR 0 2
40045: PPUSH
40046: CALL_OW 259
40050: PPUSH
40051: CALL_OW 2
40055: ST_TO_ADDR
40056: GO 40014
40058: POP
40059: POP
// if not tmp then
40060: LD_VAR 0 5
40064: NOT
40065: IFFALSE 40069
// exit ;
40067: GO 40089
// result := SortListByListDesc ( units , tmp ) ;
40069: LD_ADDR_VAR 0 3
40073: PUSH
40074: LD_VAR 0 1
40078: PPUSH
40079: LD_VAR 0 5
40083: PPUSH
40084: CALL_OW 77
40088: ST_TO_ADDR
// end ;
40089: LD_VAR 0 3
40093: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40094: LD_INT 0
40096: PPUSH
40097: PPUSH
40098: PPUSH
// result := false ;
40099: LD_ADDR_VAR 0 3
40103: PUSH
40104: LD_INT 0
40106: ST_TO_ADDR
// x := GetX ( building ) ;
40107: LD_ADDR_VAR 0 4
40111: PUSH
40112: LD_VAR 0 2
40116: PPUSH
40117: CALL_OW 250
40121: ST_TO_ADDR
// y := GetY ( building ) ;
40122: LD_ADDR_VAR 0 5
40126: PUSH
40127: LD_VAR 0 2
40131: PPUSH
40132: CALL_OW 251
40136: ST_TO_ADDR
// if not building or not x or not y then
40137: LD_VAR 0 2
40141: NOT
40142: PUSH
40143: LD_VAR 0 4
40147: NOT
40148: OR
40149: PUSH
40150: LD_VAR 0 5
40154: NOT
40155: OR
40156: IFFALSE 40160
// exit ;
40158: GO 40252
// if GetTaskList ( unit ) then
40160: LD_VAR 0 1
40164: PPUSH
40165: CALL_OW 437
40169: IFFALSE 40252
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40171: LD_STRING e
40173: PUSH
40174: LD_VAR 0 1
40178: PPUSH
40179: CALL_OW 437
40183: PUSH
40184: LD_INT 1
40186: ARRAY
40187: PUSH
40188: LD_INT 1
40190: ARRAY
40191: EQUAL
40192: PUSH
40193: LD_VAR 0 4
40197: PUSH
40198: LD_VAR 0 1
40202: PPUSH
40203: CALL_OW 437
40207: PUSH
40208: LD_INT 1
40210: ARRAY
40211: PUSH
40212: LD_INT 2
40214: ARRAY
40215: EQUAL
40216: AND
40217: PUSH
40218: LD_VAR 0 5
40222: PUSH
40223: LD_VAR 0 1
40227: PPUSH
40228: CALL_OW 437
40232: PUSH
40233: LD_INT 1
40235: ARRAY
40236: PUSH
40237: LD_INT 3
40239: ARRAY
40240: EQUAL
40241: AND
40242: IFFALSE 40252
// result := true end ;
40244: LD_ADDR_VAR 0 3
40248: PUSH
40249: LD_INT 1
40251: ST_TO_ADDR
// end ;
40252: LD_VAR 0 3
40256: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40257: LD_INT 0
40259: PPUSH
// result := false ;
40260: LD_ADDR_VAR 0 4
40264: PUSH
40265: LD_INT 0
40267: ST_TO_ADDR
// if GetTaskList ( unit ) then
40268: LD_VAR 0 1
40272: PPUSH
40273: CALL_OW 437
40277: IFFALSE 40360
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40279: LD_STRING M
40281: PUSH
40282: LD_VAR 0 1
40286: PPUSH
40287: CALL_OW 437
40291: PUSH
40292: LD_INT 1
40294: ARRAY
40295: PUSH
40296: LD_INT 1
40298: ARRAY
40299: EQUAL
40300: PUSH
40301: LD_VAR 0 2
40305: PUSH
40306: LD_VAR 0 1
40310: PPUSH
40311: CALL_OW 437
40315: PUSH
40316: LD_INT 1
40318: ARRAY
40319: PUSH
40320: LD_INT 2
40322: ARRAY
40323: EQUAL
40324: AND
40325: PUSH
40326: LD_VAR 0 3
40330: PUSH
40331: LD_VAR 0 1
40335: PPUSH
40336: CALL_OW 437
40340: PUSH
40341: LD_INT 1
40343: ARRAY
40344: PUSH
40345: LD_INT 3
40347: ARRAY
40348: EQUAL
40349: AND
40350: IFFALSE 40360
// result := true ;
40352: LD_ADDR_VAR 0 4
40356: PUSH
40357: LD_INT 1
40359: ST_TO_ADDR
// end ; end ;
40360: LD_VAR 0 4
40364: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40365: LD_INT 0
40367: PPUSH
40368: PPUSH
40369: PPUSH
40370: PPUSH
// if not unit or not area then
40371: LD_VAR 0 1
40375: NOT
40376: PUSH
40377: LD_VAR 0 2
40381: NOT
40382: OR
40383: IFFALSE 40387
// exit ;
40385: GO 40551
// tmp := AreaToList ( area , i ) ;
40387: LD_ADDR_VAR 0 6
40391: PUSH
40392: LD_VAR 0 2
40396: PPUSH
40397: LD_VAR 0 5
40401: PPUSH
40402: CALL_OW 517
40406: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40407: LD_ADDR_VAR 0 5
40411: PUSH
40412: DOUBLE
40413: LD_INT 1
40415: DEC
40416: ST_TO_ADDR
40417: LD_VAR 0 6
40421: PUSH
40422: LD_INT 1
40424: ARRAY
40425: PUSH
40426: FOR_TO
40427: IFFALSE 40549
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40429: LD_ADDR_VAR 0 7
40433: PUSH
40434: LD_VAR 0 6
40438: PUSH
40439: LD_INT 1
40441: ARRAY
40442: PUSH
40443: LD_VAR 0 5
40447: ARRAY
40448: PUSH
40449: LD_VAR 0 6
40453: PUSH
40454: LD_INT 2
40456: ARRAY
40457: PUSH
40458: LD_VAR 0 5
40462: ARRAY
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
40468: LD_VAR 0 7
40472: PUSH
40473: LD_INT 1
40475: ARRAY
40476: PPUSH
40477: LD_VAR 0 7
40481: PUSH
40482: LD_INT 2
40484: ARRAY
40485: PPUSH
40486: CALL_OW 428
40490: PUSH
40491: LD_INT 0
40493: EQUAL
40494: IFFALSE 40547
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40496: LD_VAR 0 1
40500: PPUSH
40501: LD_VAR 0 7
40505: PUSH
40506: LD_INT 1
40508: ARRAY
40509: PPUSH
40510: LD_VAR 0 7
40514: PUSH
40515: LD_INT 2
40517: ARRAY
40518: PPUSH
40519: LD_VAR 0 3
40523: PPUSH
40524: CALL_OW 48
// result := IsPlaced ( unit ) ;
40528: LD_ADDR_VAR 0 4
40532: PUSH
40533: LD_VAR 0 1
40537: PPUSH
40538: CALL_OW 305
40542: ST_TO_ADDR
// exit ;
40543: POP
40544: POP
40545: GO 40551
// end ; end ;
40547: GO 40426
40549: POP
40550: POP
// end ;
40551: LD_VAR 0 4
40555: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40556: LD_INT 0
40558: PPUSH
40559: PPUSH
40560: PPUSH
// if not side or side > 8 then
40561: LD_VAR 0 1
40565: NOT
40566: PUSH
40567: LD_VAR 0 1
40571: PUSH
40572: LD_INT 8
40574: GREATER
40575: OR
40576: IFFALSE 40580
// exit ;
40578: GO 40767
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40580: LD_ADDR_VAR 0 4
40584: PUSH
40585: LD_INT 22
40587: PUSH
40588: LD_VAR 0 1
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 21
40599: PUSH
40600: LD_INT 3
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PPUSH
40611: CALL_OW 69
40615: ST_TO_ADDR
// if not tmp then
40616: LD_VAR 0 4
40620: NOT
40621: IFFALSE 40625
// exit ;
40623: GO 40767
// enable_addtolog := true ;
40625: LD_ADDR_OWVAR 81
40629: PUSH
40630: LD_INT 1
40632: ST_TO_ADDR
// AddToLog ( [ ) ;
40633: LD_STRING [
40635: PPUSH
40636: CALL_OW 561
// for i in tmp do
40640: LD_ADDR_VAR 0 3
40644: PUSH
40645: LD_VAR 0 4
40649: PUSH
40650: FOR_IN
40651: IFFALSE 40758
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40653: LD_STRING [
40655: PUSH
40656: LD_VAR 0 3
40660: PPUSH
40661: CALL_OW 266
40665: STR
40666: PUSH
40667: LD_STRING , 
40669: STR
40670: PUSH
40671: LD_VAR 0 3
40675: PPUSH
40676: CALL_OW 250
40680: STR
40681: PUSH
40682: LD_STRING , 
40684: STR
40685: PUSH
40686: LD_VAR 0 3
40690: PPUSH
40691: CALL_OW 251
40695: STR
40696: PUSH
40697: LD_STRING , 
40699: STR
40700: PUSH
40701: LD_VAR 0 3
40705: PPUSH
40706: CALL_OW 254
40710: STR
40711: PUSH
40712: LD_STRING , 
40714: STR
40715: PUSH
40716: LD_VAR 0 3
40720: PPUSH
40721: LD_INT 1
40723: PPUSH
40724: CALL_OW 268
40728: STR
40729: PUSH
40730: LD_STRING , 
40732: STR
40733: PUSH
40734: LD_VAR 0 3
40738: PPUSH
40739: LD_INT 2
40741: PPUSH
40742: CALL_OW 268
40746: STR
40747: PUSH
40748: LD_STRING ],
40750: STR
40751: PPUSH
40752: CALL_OW 561
// end ;
40756: GO 40650
40758: POP
40759: POP
// AddToLog ( ]; ) ;
40760: LD_STRING ];
40762: PPUSH
40763: CALL_OW 561
// end ;
40767: LD_VAR 0 2
40771: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40772: LD_INT 0
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
// if not area or not rate or not max then
40779: LD_VAR 0 1
40783: NOT
40784: PUSH
40785: LD_VAR 0 2
40789: NOT
40790: OR
40791: PUSH
40792: LD_VAR 0 4
40796: NOT
40797: OR
40798: IFFALSE 40802
// exit ;
40800: GO 40994
// while 1 do
40802: LD_INT 1
40804: IFFALSE 40994
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40806: LD_ADDR_VAR 0 9
40810: PUSH
40811: LD_VAR 0 1
40815: PPUSH
40816: LD_INT 1
40818: PPUSH
40819: CALL_OW 287
40823: PUSH
40824: LD_INT 10
40826: MUL
40827: ST_TO_ADDR
// r := rate / 10 ;
40828: LD_ADDR_VAR 0 7
40832: PUSH
40833: LD_VAR 0 2
40837: PUSH
40838: LD_INT 10
40840: DIVREAL
40841: ST_TO_ADDR
// time := 1 1$00 ;
40842: LD_ADDR_VAR 0 8
40846: PUSH
40847: LD_INT 2100
40849: ST_TO_ADDR
// if amount < min then
40850: LD_VAR 0 9
40854: PUSH
40855: LD_VAR 0 3
40859: LESS
40860: IFFALSE 40878
// r := r * 2 else
40862: LD_ADDR_VAR 0 7
40866: PUSH
40867: LD_VAR 0 7
40871: PUSH
40872: LD_INT 2
40874: MUL
40875: ST_TO_ADDR
40876: GO 40904
// if amount > max then
40878: LD_VAR 0 9
40882: PUSH
40883: LD_VAR 0 4
40887: GREATER
40888: IFFALSE 40904
// r := r / 2 ;
40890: LD_ADDR_VAR 0 7
40894: PUSH
40895: LD_VAR 0 7
40899: PUSH
40900: LD_INT 2
40902: DIVREAL
40903: ST_TO_ADDR
// time := time / r ;
40904: LD_ADDR_VAR 0 8
40908: PUSH
40909: LD_VAR 0 8
40913: PUSH
40914: LD_VAR 0 7
40918: DIVREAL
40919: ST_TO_ADDR
// if time < 0 then
40920: LD_VAR 0 8
40924: PUSH
40925: LD_INT 0
40927: LESS
40928: IFFALSE 40945
// time := time * - 1 ;
40930: LD_ADDR_VAR 0 8
40934: PUSH
40935: LD_VAR 0 8
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: MUL
40944: ST_TO_ADDR
// wait ( time ) ;
40945: LD_VAR 0 8
40949: PPUSH
40950: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
40954: LD_INT 35
40956: PPUSH
40957: LD_INT 875
40959: PPUSH
40960: CALL_OW 12
40964: PPUSH
40965: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40969: LD_INT 1
40971: PPUSH
40972: LD_INT 5
40974: PPUSH
40975: CALL_OW 12
40979: PPUSH
40980: LD_VAR 0 1
40984: PPUSH
40985: LD_INT 1
40987: PPUSH
40988: CALL_OW 55
// end ;
40992: GO 40802
// end ;
40994: LD_VAR 0 5
40998: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40999: LD_INT 0
41001: PPUSH
41002: PPUSH
41003: PPUSH
41004: PPUSH
41005: PPUSH
41006: PPUSH
41007: PPUSH
41008: PPUSH
// if not turrets or not factories then
41009: LD_VAR 0 1
41013: NOT
41014: PUSH
41015: LD_VAR 0 2
41019: NOT
41020: OR
41021: IFFALSE 41025
// exit ;
41023: GO 41332
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41025: LD_ADDR_VAR 0 10
41029: PUSH
41030: LD_INT 5
41032: PUSH
41033: LD_INT 6
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: LD_INT 4
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 3
41052: PUSH
41053: LD_INT 5
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 24
41067: PUSH
41068: LD_INT 25
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 23
41077: PUSH
41078: LD_INT 27
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 42
41091: PUSH
41092: LD_INT 43
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 44
41101: PUSH
41102: LD_INT 46
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 45
41111: PUSH
41112: LD_INT 47
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: LIST
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: ST_TO_ADDR
// result := [ ] ;
41129: LD_ADDR_VAR 0 3
41133: PUSH
41134: EMPTY
41135: ST_TO_ADDR
// for i in turrets do
41136: LD_ADDR_VAR 0 4
41140: PUSH
41141: LD_VAR 0 1
41145: PUSH
41146: FOR_IN
41147: IFFALSE 41330
// begin nat := GetNation ( i ) ;
41149: LD_ADDR_VAR 0 7
41153: PUSH
41154: LD_VAR 0 4
41158: PPUSH
41159: CALL_OW 248
41163: ST_TO_ADDR
// weapon := 0 ;
41164: LD_ADDR_VAR 0 8
41168: PUSH
41169: LD_INT 0
41171: ST_TO_ADDR
// if not nat then
41172: LD_VAR 0 7
41176: NOT
41177: IFFALSE 41181
// continue ;
41179: GO 41146
// for j in list [ nat ] do
41181: LD_ADDR_VAR 0 5
41185: PUSH
41186: LD_VAR 0 10
41190: PUSH
41191: LD_VAR 0 7
41195: ARRAY
41196: PUSH
41197: FOR_IN
41198: IFFALSE 41239
// if GetBWeapon ( i ) = j [ 1 ] then
41200: LD_VAR 0 4
41204: PPUSH
41205: CALL_OW 269
41209: PUSH
41210: LD_VAR 0 5
41214: PUSH
41215: LD_INT 1
41217: ARRAY
41218: EQUAL
41219: IFFALSE 41237
// begin weapon := j [ 2 ] ;
41221: LD_ADDR_VAR 0 8
41225: PUSH
41226: LD_VAR 0 5
41230: PUSH
41231: LD_INT 2
41233: ARRAY
41234: ST_TO_ADDR
// break ;
41235: GO 41239
// end ;
41237: GO 41197
41239: POP
41240: POP
// if not weapon then
41241: LD_VAR 0 8
41245: NOT
41246: IFFALSE 41250
// continue ;
41248: GO 41146
// for k in factories do
41250: LD_ADDR_VAR 0 6
41254: PUSH
41255: LD_VAR 0 2
41259: PUSH
41260: FOR_IN
41261: IFFALSE 41326
// begin weapons := AvailableWeaponList ( k ) ;
41263: LD_ADDR_VAR 0 9
41267: PUSH
41268: LD_VAR 0 6
41272: PPUSH
41273: CALL_OW 478
41277: ST_TO_ADDR
// if not weapons then
41278: LD_VAR 0 9
41282: NOT
41283: IFFALSE 41287
// continue ;
41285: GO 41260
// if weapon in weapons then
41287: LD_VAR 0 8
41291: PUSH
41292: LD_VAR 0 9
41296: IN
41297: IFFALSE 41324
// begin result := [ i , weapon ] ;
41299: LD_ADDR_VAR 0 3
41303: PUSH
41304: LD_VAR 0 4
41308: PUSH
41309: LD_VAR 0 8
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: ST_TO_ADDR
// exit ;
41318: POP
41319: POP
41320: POP
41321: POP
41322: GO 41332
// end ; end ;
41324: GO 41260
41326: POP
41327: POP
// end ;
41328: GO 41146
41330: POP
41331: POP
// end ;
41332: LD_VAR 0 3
41336: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41337: LD_INT 0
41339: PPUSH
// if not side or side > 8 then
41340: LD_VAR 0 3
41344: NOT
41345: PUSH
41346: LD_VAR 0 3
41350: PUSH
41351: LD_INT 8
41353: GREATER
41354: OR
41355: IFFALSE 41359
// exit ;
41357: GO 41418
// if not range then
41359: LD_VAR 0 4
41363: NOT
41364: IFFALSE 41375
// range := - 12 ;
41366: LD_ADDR_VAR 0 4
41370: PUSH
41371: LD_INT 12
41373: NEG
41374: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41375: LD_VAR 0 1
41379: PPUSH
41380: LD_VAR 0 2
41384: PPUSH
41385: LD_VAR 0 3
41389: PPUSH
41390: LD_VAR 0 4
41394: PPUSH
41395: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41399: LD_VAR 0 1
41403: PPUSH
41404: LD_VAR 0 2
41408: PPUSH
41409: LD_VAR 0 3
41413: PPUSH
41414: CALL_OW 331
// end ;
41418: LD_VAR 0 5
41422: RET
// export function Video ( mode ) ; begin
41423: LD_INT 0
41425: PPUSH
// ingame_video = mode ;
41426: LD_ADDR_OWVAR 52
41430: PUSH
41431: LD_VAR 0 1
41435: ST_TO_ADDR
// interface_hidden = mode ;
41436: LD_ADDR_OWVAR 54
41440: PUSH
41441: LD_VAR 0 1
41445: ST_TO_ADDR
// end ;
41446: LD_VAR 0 2
41450: RET
// export function Join ( array , element ) ; begin
41451: LD_INT 0
41453: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41454: LD_ADDR_VAR 0 3
41458: PUSH
41459: LD_VAR 0 1
41463: PPUSH
41464: LD_VAR 0 1
41468: PUSH
41469: LD_INT 1
41471: PLUS
41472: PPUSH
41473: LD_VAR 0 2
41477: PPUSH
41478: CALL_OW 1
41482: ST_TO_ADDR
// end ;
41483: LD_VAR 0 3
41487: RET
// export function JoinUnion ( array , element ) ; begin
41488: LD_INT 0
41490: PPUSH
// result := array union element ;
41491: LD_ADDR_VAR 0 3
41495: PUSH
41496: LD_VAR 0 1
41500: PUSH
41501: LD_VAR 0 2
41505: UNION
41506: ST_TO_ADDR
// end ;
41507: LD_VAR 0 3
41511: RET
// export function GetBehemoths ( side ) ; begin
41512: LD_INT 0
41514: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
41515: LD_ADDR_VAR 0 2
41519: PUSH
41520: LD_INT 22
41522: PUSH
41523: LD_VAR 0 1
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 31
41534: PUSH
41535: LD_INT 25
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PPUSH
41546: CALL_OW 69
41550: ST_TO_ADDR
// end ;
41551: LD_VAR 0 2
41555: RET
// export function Shuffle ( array ) ; var i , index ; begin
41556: LD_INT 0
41558: PPUSH
41559: PPUSH
41560: PPUSH
// result := [ ] ;
41561: LD_ADDR_VAR 0 2
41565: PUSH
41566: EMPTY
41567: ST_TO_ADDR
// if not array then
41568: LD_VAR 0 1
41572: NOT
41573: IFFALSE 41577
// exit ;
41575: GO 41676
// Randomize ;
41577: CALL_OW 10
// for i = array downto 1 do
41581: LD_ADDR_VAR 0 3
41585: PUSH
41586: DOUBLE
41587: LD_VAR 0 1
41591: INC
41592: ST_TO_ADDR
41593: LD_INT 1
41595: PUSH
41596: FOR_DOWNTO
41597: IFFALSE 41674
// begin index := rand ( 1 , array ) ;
41599: LD_ADDR_VAR 0 4
41603: PUSH
41604: LD_INT 1
41606: PPUSH
41607: LD_VAR 0 1
41611: PPUSH
41612: CALL_OW 12
41616: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41617: LD_ADDR_VAR 0 2
41621: PUSH
41622: LD_VAR 0 2
41626: PPUSH
41627: LD_VAR 0 2
41631: PUSH
41632: LD_INT 1
41634: PLUS
41635: PPUSH
41636: LD_VAR 0 1
41640: PUSH
41641: LD_VAR 0 4
41645: ARRAY
41646: PPUSH
41647: CALL_OW 2
41651: ST_TO_ADDR
// array := Delete ( array , index ) ;
41652: LD_ADDR_VAR 0 1
41656: PUSH
41657: LD_VAR 0 1
41661: PPUSH
41662: LD_VAR 0 4
41666: PPUSH
41667: CALL_OW 3
41671: ST_TO_ADDR
// end ;
41672: GO 41596
41674: POP
41675: POP
// end ;
41676: LD_VAR 0 2
41680: RET
// export function GetBaseMaterials ( base ) ; begin
41681: LD_INT 0
41683: PPUSH
// result := [ 0 , 0 , 0 ] ;
41684: LD_ADDR_VAR 0 2
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: ST_TO_ADDR
// if not base then
41703: LD_VAR 0 1
41707: NOT
41708: IFFALSE 41712
// exit ;
41710: GO 41761
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41712: LD_ADDR_VAR 0 2
41716: PUSH
41717: LD_VAR 0 1
41721: PPUSH
41722: LD_INT 1
41724: PPUSH
41725: CALL_OW 275
41729: PUSH
41730: LD_VAR 0 1
41734: PPUSH
41735: LD_INT 2
41737: PPUSH
41738: CALL_OW 275
41742: PUSH
41743: LD_VAR 0 1
41747: PPUSH
41748: LD_INT 3
41750: PPUSH
41751: CALL_OW 275
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: LIST
41760: ST_TO_ADDR
// end ;
41761: LD_VAR 0 2
41765: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41766: LD_INT 0
41768: PPUSH
41769: PPUSH
// result := array ;
41770: LD_ADDR_VAR 0 3
41774: PUSH
41775: LD_VAR 0 1
41779: ST_TO_ADDR
// if size > 0 then
41780: LD_VAR 0 2
41784: PUSH
41785: LD_INT 0
41787: GREATER
41788: IFFALSE 41834
// for i := array downto size do
41790: LD_ADDR_VAR 0 4
41794: PUSH
41795: DOUBLE
41796: LD_VAR 0 1
41800: INC
41801: ST_TO_ADDR
41802: LD_VAR 0 2
41806: PUSH
41807: FOR_DOWNTO
41808: IFFALSE 41832
// result := Delete ( result , result ) ;
41810: LD_ADDR_VAR 0 3
41814: PUSH
41815: LD_VAR 0 3
41819: PPUSH
41820: LD_VAR 0 3
41824: PPUSH
41825: CALL_OW 3
41829: ST_TO_ADDR
41830: GO 41807
41832: POP
41833: POP
// end ;
41834: LD_VAR 0 3
41838: RET
// export function ComExit ( unit ) ; var tmp ; begin
41839: LD_INT 0
41841: PPUSH
41842: PPUSH
// if not IsInUnit ( unit ) then
41843: LD_VAR 0 1
41847: PPUSH
41848: CALL_OW 310
41852: NOT
41853: IFFALSE 41857
// exit ;
41855: GO 41917
// tmp := IsInUnit ( unit ) ;
41857: LD_ADDR_VAR 0 3
41861: PUSH
41862: LD_VAR 0 1
41866: PPUSH
41867: CALL_OW 310
41871: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41872: LD_VAR 0 3
41876: PPUSH
41877: CALL_OW 247
41881: PUSH
41882: LD_INT 2
41884: EQUAL
41885: IFFALSE 41898
// ComExitVehicle ( unit ) else
41887: LD_VAR 0 1
41891: PPUSH
41892: CALL_OW 121
41896: GO 41907
// ComExitBuilding ( unit ) ;
41898: LD_VAR 0 1
41902: PPUSH
41903: CALL_OW 122
// result := tmp ;
41907: LD_ADDR_VAR 0 2
41911: PUSH
41912: LD_VAR 0 3
41916: ST_TO_ADDR
// end ;
41917: LD_VAR 0 2
41921: RET
// export function ResetHc ; begin
41922: LD_INT 0
41924: PPUSH
// InitHc ;
41925: CALL_OW 19
// hc_importance := 0 ;
41929: LD_ADDR_OWVAR 32
41933: PUSH
41934: LD_INT 0
41936: ST_TO_ADDR
// end ;
41937: LD_VAR 0 1
41941: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41942: LD_INT 0
41944: PPUSH
41945: PPUSH
41946: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41947: LD_ADDR_VAR 0 6
41951: PUSH
41952: LD_VAR 0 1
41956: PUSH
41957: LD_VAR 0 3
41961: PLUS
41962: PUSH
41963: LD_INT 2
41965: DIV
41966: ST_TO_ADDR
// if _x < 0 then
41967: LD_VAR 0 6
41971: PUSH
41972: LD_INT 0
41974: LESS
41975: IFFALSE 41992
// _x := _x * - 1 ;
41977: LD_ADDR_VAR 0 6
41981: PUSH
41982: LD_VAR 0 6
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: MUL
41991: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41992: LD_ADDR_VAR 0 7
41996: PUSH
41997: LD_VAR 0 2
42001: PUSH
42002: LD_VAR 0 4
42006: PLUS
42007: PUSH
42008: LD_INT 2
42010: DIV
42011: ST_TO_ADDR
// if _y < 0 then
42012: LD_VAR 0 7
42016: PUSH
42017: LD_INT 0
42019: LESS
42020: IFFALSE 42037
// _y := _y * - 1 ;
42022: LD_ADDR_VAR 0 7
42026: PUSH
42027: LD_VAR 0 7
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: MUL
42036: ST_TO_ADDR
// result := [ _x , _y ] ;
42037: LD_ADDR_VAR 0 5
42041: PUSH
42042: LD_VAR 0 6
42046: PUSH
42047: LD_VAR 0 7
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: ST_TO_ADDR
// end ;
42056: LD_VAR 0 5
42060: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42061: LD_INT 0
42063: PPUSH
42064: PPUSH
42065: PPUSH
42066: PPUSH
// task := GetTaskList ( unit ) ;
42067: LD_ADDR_VAR 0 7
42071: PUSH
42072: LD_VAR 0 1
42076: PPUSH
42077: CALL_OW 437
42081: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42082: LD_VAR 0 7
42086: NOT
42087: PUSH
42088: LD_VAR 0 1
42092: PPUSH
42093: LD_VAR 0 2
42097: PPUSH
42098: CALL_OW 308
42102: NOT
42103: AND
42104: IFFALSE 42108
// exit ;
42106: GO 42226
// if IsInArea ( unit , area ) then
42108: LD_VAR 0 1
42112: PPUSH
42113: LD_VAR 0 2
42117: PPUSH
42118: CALL_OW 308
42122: IFFALSE 42140
// begin ComMoveToArea ( unit , goAway ) ;
42124: LD_VAR 0 1
42128: PPUSH
42129: LD_VAR 0 3
42133: PPUSH
42134: CALL_OW 113
// exit ;
42138: GO 42226
// end ; if task [ 1 ] [ 1 ] <> M then
42140: LD_VAR 0 7
42144: PUSH
42145: LD_INT 1
42147: ARRAY
42148: PUSH
42149: LD_INT 1
42151: ARRAY
42152: PUSH
42153: LD_STRING M
42155: NONEQUAL
42156: IFFALSE 42160
// exit ;
42158: GO 42226
// x := task [ 1 ] [ 2 ] ;
42160: LD_ADDR_VAR 0 5
42164: PUSH
42165: LD_VAR 0 7
42169: PUSH
42170: LD_INT 1
42172: ARRAY
42173: PUSH
42174: LD_INT 2
42176: ARRAY
42177: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42178: LD_ADDR_VAR 0 6
42182: PUSH
42183: LD_VAR 0 7
42187: PUSH
42188: LD_INT 1
42190: ARRAY
42191: PUSH
42192: LD_INT 3
42194: ARRAY
42195: ST_TO_ADDR
// if InArea ( x , y , area ) then
42196: LD_VAR 0 5
42200: PPUSH
42201: LD_VAR 0 6
42205: PPUSH
42206: LD_VAR 0 2
42210: PPUSH
42211: CALL_OW 309
42215: IFFALSE 42226
// ComStop ( unit ) ;
42217: LD_VAR 0 1
42221: PPUSH
42222: CALL_OW 141
// end ;
42226: LD_VAR 0 4
42230: RET
// export function Abs ( value ) ; begin
42231: LD_INT 0
42233: PPUSH
// result := value ;
42234: LD_ADDR_VAR 0 2
42238: PUSH
42239: LD_VAR 0 1
42243: ST_TO_ADDR
// if value < 0 then
42244: LD_VAR 0 1
42248: PUSH
42249: LD_INT 0
42251: LESS
42252: IFFALSE 42269
// result := value * - 1 ;
42254: LD_ADDR_VAR 0 2
42258: PUSH
42259: LD_VAR 0 1
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: MUL
42268: ST_TO_ADDR
// end ;
42269: LD_VAR 0 2
42273: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42274: LD_INT 0
42276: PPUSH
42277: PPUSH
42278: PPUSH
42279: PPUSH
42280: PPUSH
42281: PPUSH
42282: PPUSH
42283: PPUSH
// if not unit or not building then
42284: LD_VAR 0 1
42288: NOT
42289: PUSH
42290: LD_VAR 0 2
42294: NOT
42295: OR
42296: IFFALSE 42300
// exit ;
42298: GO 42526
// x := GetX ( building ) ;
42300: LD_ADDR_VAR 0 4
42304: PUSH
42305: LD_VAR 0 2
42309: PPUSH
42310: CALL_OW 250
42314: ST_TO_ADDR
// y := GetY ( building ) ;
42315: LD_ADDR_VAR 0 6
42319: PUSH
42320: LD_VAR 0 2
42324: PPUSH
42325: CALL_OW 251
42329: ST_TO_ADDR
// d := GetDir ( building ) ;
42330: LD_ADDR_VAR 0 8
42334: PUSH
42335: LD_VAR 0 2
42339: PPUSH
42340: CALL_OW 254
42344: ST_TO_ADDR
// r := 4 ;
42345: LD_ADDR_VAR 0 9
42349: PUSH
42350: LD_INT 4
42352: ST_TO_ADDR
// for i := 1 to 5 do
42353: LD_ADDR_VAR 0 10
42357: PUSH
42358: DOUBLE
42359: LD_INT 1
42361: DEC
42362: ST_TO_ADDR
42363: LD_INT 5
42365: PUSH
42366: FOR_TO
42367: IFFALSE 42524
// begin _x := ShiftX ( x , d , r + i ) ;
42369: LD_ADDR_VAR 0 5
42373: PUSH
42374: LD_VAR 0 4
42378: PPUSH
42379: LD_VAR 0 8
42383: PPUSH
42384: LD_VAR 0 9
42388: PUSH
42389: LD_VAR 0 10
42393: PLUS
42394: PPUSH
42395: CALL_OW 272
42399: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42400: LD_ADDR_VAR 0 7
42404: PUSH
42405: LD_VAR 0 6
42409: PPUSH
42410: LD_VAR 0 8
42414: PPUSH
42415: LD_VAR 0 9
42419: PUSH
42420: LD_VAR 0 10
42424: PLUS
42425: PPUSH
42426: CALL_OW 273
42430: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42431: LD_VAR 0 5
42435: PPUSH
42436: LD_VAR 0 7
42440: PPUSH
42441: CALL_OW 488
42445: PUSH
42446: LD_VAR 0 5
42450: PPUSH
42451: LD_VAR 0 7
42455: PPUSH
42456: CALL_OW 428
42460: PPUSH
42461: CALL_OW 247
42465: PUSH
42466: LD_INT 3
42468: PUSH
42469: LD_INT 2
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: IN
42476: NOT
42477: AND
42478: IFFALSE 42522
// begin ComMoveXY ( unit , _x , _y ) ;
42480: LD_VAR 0 1
42484: PPUSH
42485: LD_VAR 0 5
42489: PPUSH
42490: LD_VAR 0 7
42494: PPUSH
42495: CALL_OW 111
// result := [ _x , _y ] ;
42499: LD_ADDR_VAR 0 3
42503: PUSH
42504: LD_VAR 0 5
42508: PUSH
42509: LD_VAR 0 7
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: ST_TO_ADDR
// exit ;
42518: POP
42519: POP
42520: GO 42526
// end ; end ;
42522: GO 42366
42524: POP
42525: POP
// end ;
42526: LD_VAR 0 3
42530: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42531: LD_INT 0
42533: PPUSH
42534: PPUSH
42535: PPUSH
// result := 0 ;
42536: LD_ADDR_VAR 0 3
42540: PUSH
42541: LD_INT 0
42543: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42544: LD_VAR 0 1
42548: PUSH
42549: LD_INT 0
42551: LESS
42552: PUSH
42553: LD_VAR 0 1
42557: PUSH
42558: LD_INT 8
42560: GREATER
42561: OR
42562: PUSH
42563: LD_VAR 0 2
42567: PUSH
42568: LD_INT 0
42570: LESS
42571: OR
42572: PUSH
42573: LD_VAR 0 2
42577: PUSH
42578: LD_INT 8
42580: GREATER
42581: OR
42582: IFFALSE 42586
// exit ;
42584: GO 42661
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42586: LD_ADDR_VAR 0 4
42590: PUSH
42591: LD_INT 22
42593: PUSH
42594: LD_VAR 0 2
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PPUSH
42603: CALL_OW 69
42607: PUSH
42608: FOR_IN
42609: IFFALSE 42659
// begin un := UnitShoot ( i ) ;
42611: LD_ADDR_VAR 0 5
42615: PUSH
42616: LD_VAR 0 4
42620: PPUSH
42621: CALL_OW 504
42625: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42626: LD_VAR 0 5
42630: PPUSH
42631: CALL_OW 255
42635: PUSH
42636: LD_VAR 0 1
42640: EQUAL
42641: IFFALSE 42657
// begin result := un ;
42643: LD_ADDR_VAR 0 3
42647: PUSH
42648: LD_VAR 0 5
42652: ST_TO_ADDR
// exit ;
42653: POP
42654: POP
42655: GO 42661
// end ; end ;
42657: GO 42608
42659: POP
42660: POP
// end ;
42661: LD_VAR 0 3
42665: RET
// export function GetCargoBay ( units ) ; begin
42666: LD_INT 0
42668: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42669: LD_ADDR_VAR 0 2
42673: PUSH
42674: LD_VAR 0 1
42678: PPUSH
42679: LD_INT 2
42681: PUSH
42682: LD_INT 34
42684: PUSH
42685: LD_INT 12
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 34
42694: PUSH
42695: LD_INT 51
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 34
42704: PUSH
42705: LD_INT 32
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 34
42714: PUSH
42715: LD_EXP 39
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: PPUSH
42731: CALL_OW 72
42735: ST_TO_ADDR
// end ; end_of_file
42736: LD_VAR 0 2
42740: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
42741: LD_INT 0
42743: PPUSH
// ar_miner := 81 ;
42744: LD_ADDR_EXP 45
42748: PUSH
42749: LD_INT 81
42751: ST_TO_ADDR
// ar_crane := 88 ;
42752: LD_ADDR_EXP 44
42756: PUSH
42757: LD_INT 88
42759: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
42760: LD_ADDR_EXP 39
42764: PUSH
42765: LD_INT 89
42767: ST_TO_ADDR
// us_hack := 99 ;
42768: LD_ADDR_EXP 40
42772: PUSH
42773: LD_INT 99
42775: ST_TO_ADDR
// us_artillery := 97 ;
42776: LD_ADDR_EXP 41
42780: PUSH
42781: LD_INT 97
42783: ST_TO_ADDR
// ar_bio_bomb := 91 ;
42784: LD_ADDR_EXP 42
42788: PUSH
42789: LD_INT 91
42791: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
42792: LD_ADDR_EXP 43
42796: PUSH
42797: LD_INT 92
42799: ST_TO_ADDR
// ru_radar := 98 ;
42800: LD_ADDR_EXP 38
42804: PUSH
42805: LD_INT 98
42807: ST_TO_ADDR
// tech_Artillery := 80 ;
42808: LD_ADDR_EXP 46
42812: PUSH
42813: LD_INT 80
42815: ST_TO_ADDR
// tech_RadMat := 81 ;
42816: LD_ADDR_EXP 47
42820: PUSH
42821: LD_INT 81
42823: ST_TO_ADDR
// tech_BasicTools := 82 ;
42824: LD_ADDR_EXP 48
42828: PUSH
42829: LD_INT 82
42831: ST_TO_ADDR
// tech_Cargo := 83 ;
42832: LD_ADDR_EXP 49
42836: PUSH
42837: LD_INT 83
42839: ST_TO_ADDR
// tech_Track := 84 ;
42840: LD_ADDR_EXP 50
42844: PUSH
42845: LD_INT 84
42847: ST_TO_ADDR
// tech_Crane := 85 ;
42848: LD_ADDR_EXP 51
42852: PUSH
42853: LD_INT 85
42855: ST_TO_ADDR
// tech_Bulldozer := 86 ;
42856: LD_ADDR_EXP 52
42860: PUSH
42861: LD_INT 86
42863: ST_TO_ADDR
// tech_Hovercraft := 87 ;
42864: LD_ADDR_EXP 53
42868: PUSH
42869: LD_INT 87
42871: ST_TO_ADDR
// end ;
42872: LD_VAR 0 1
42876: RET
// every 1 do
42877: GO 42879
42879: DISABLE
// InitGlobalVariables ;
42880: CALL 42741 0 0
42884: END
