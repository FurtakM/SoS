// inner macro's functions (don't use them outside)
// main container which monitor each macro players action
// it's workin until mc_active is set to true
Export Function MC_Monitor();
var i, active_players;
begin
while mc_active do
      begin
      wait(0$1); // interval value

      active_players := 0;

      for i := 1 to mc_bases do
          begin
          if MC_Exist(i) then
             begin
             MCE_SailEventCustom(mce_monitor_base, i, 0, 0, 0, 0, 0); // monitor_each base
             active_players := active_players + 1;
             end;
          end;

      if not active_players then
         mc_active := false; // kill macro if noone stay alive
      end;
End;

Export Function MC_MonitorBase(base);
begin
// check if player is still alive
if not mc_people[base] then
   mc_bases := Replace(mc_bases, base, 0);

// scan area if enemy is in range
mc_danger := Replace(mc_danger, base, DangerInArea(mc_bases[base], mc_scan_area[base]));

if mc_danger[base] then
   MC_Defend(base)
else
   MC_TaskManager(base); // see MC_TaskManager module
End;

Export Function MC_Defend(base);
var defender_vehicles;
begin
if mc_defense_status[base] then // don't run second thread for defense purpose
   exit;

mc_defense_status := Replace(mc_defense_status, base, true);

// check if defender vehicles exist
defender_vehicles := mc_defender[base];

// todo
End;

// set task list for base
Export Function MC_TaskManager(base);
var crates_list;
begin
// check if there is any crates to collect
MC_CollectCrates(base, GetListOfCratesInArea(mc_crates_area[base]));
End;

Export Function MC_CollectCrates(base, crates);
var i, j, cargo_bays, apes, engs, collectors, number_of_crates, driver, drivers, depot, mechanic_used;
begin
if MCTM_HasActiveTask(base, mctm_collect_crates) or not crates then
   exit;

MCTM_SetActiveTask(base, mctm_collect_crates);

collectors := []; // units which are supose to collect crates

// check if player has cargo bay
cargo_bays := GetCargoBay(mc_vehicles[base]);

if cargo_bays then
   begin
   collectors := collectors union cargo_bays;

   while crates > 0 do
         begin
         wait(0$1);

         for i in collectors do
             begin
             driver := 0;

             // get driver if cargo is empty
             if GetControl(i) = control_manual and not IsDrivenBy(i) then
                begin
                driver := MC_GetOneByClass(base, 3);

                if not driver then
                   begin
                   driver := MC_GetBestForClass(base, 3, 1);

                   if driver then
                      begin
                      driver := driver[1];
                      MC_ChangeClass(base, 3, driver);
                      AddComExitBuilding(driver);
                      end;
                   end;

                if IsInUnit(driver) then
                   ComExit(driver);

                SetTag(driver, mct_collect_crates);

                if GetLives(i) < 1000 then
                   AddComRepairVehicle(driver, i);

                AddComEnterUnit(driver, i);
                mechanic_used := true;
                end;

             // go for crates
             repeat
              wait(0$1);

              // evacuate vehicle logic in event

              if GetEngine(i) = engine_combustion and GetFuel(i) < 20 then
                 begin
                 depot := NearestUnitToUnit(MC_GetDepot(base), i);

                 if GetDistUnits(i, depot) < 6 then
                    ComMoveUnit(i, depot);
                 end;

              if GetControl(i) = control_manual then
                 begin
                 if not driver then
                    driver := IsDrivenBy(i);

                 if not HasTask(driver) then
                    ComCollect(driver, crates[1], crates[2]);
                 end
              else
                 if not HasTask(i) then
                    ComCollect(i, crates[1], crates[2]);
             until not GetResourceAmountXY(crates[1], crates[2]);

             for j := 1 to 2 do
                 crates := Delete(crates, 1);
             end;
         end;

   if mechanic_used then
      begin

      repeat
       wait(0$1);
      until not GetCargo(collectors, mat_cans);

      drivers := MCT_ResetTag(base, mct_collect_crates);

      if drivers then
         for i in drivers do
             ComExit(i);

      MCTM_DeleteActiveTask(base, mctm_collect_crates);
      end;
   end
else
    begin
    // check if player has ape_eng
    apes := UnitFilter(mc_ape[base], [f_class, class_apeman_engineer]);

    if apes then
       collectors := collectors union apes;

    // check if player has eng
    engs := UnitFilter(mc_people[base], [f_class, class_engineer]);

    if engs then
       collectors := collectors union engs;

    MCTM_DeleteActiveTask(base, mctm_collect_crates);
    end;
End;

