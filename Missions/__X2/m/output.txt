// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 112 0 0
// SetAreaMapShowCustom ( area2 , 1 ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 1
  13: PPUSH
  14: CALL 19 0 2
// end ;
  18: END
// function SetAreaMapShowCustom ( area , mode ) ; var i , tmp ; begin
  19: LD_INT 0
  21: PPUSH
  22: PPUSH
  23: PPUSH
// tmp := AreaToList ( area , 0 ) ;
  24: LD_ADDR_VAR 0 5
  28: PUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: CALL_OW 517
  41: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
  42: LD_ADDR_VAR 0 4
  46: PUSH
  47: DOUBLE
  48: LD_INT 1
  50: DEC
  51: ST_TO_ADDR
  52: LD_VAR 0 5
  56: PUSH
  57: LD_INT 1
  59: ARRAY
  60: PUSH
  61: FOR_TO
  62: IFFALSE 105
// SetAreaMapShowHex ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , mode ) ;
  64: LD_VAR 0 5
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PUSH
  73: LD_VAR 0 4
  77: ARRAY
  78: PPUSH
  79: LD_VAR 0 5
  83: PUSH
  84: LD_INT 2
  86: ARRAY
  87: PUSH
  88: LD_VAR 0 4
  92: ARRAY
  93: PPUSH
  94: LD_VAR 0 2
  98: PPUSH
  99: CALL_OW 598
 103: GO 61
 105: POP
 106: POP
// end ;
 107: LD_VAR 0 3
 111: RET
// var t ; function Init ; begin
 112: LD_INT 0
 114: PPUSH
// t := 0 0$0 ;
 115: LD_ADDR_LOC 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// CreateResourcesXY ( mat_cans , 5 , 63 , 64 , false ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 5
 128: PPUSH
 129: LD_INT 63
 131: PPUSH
 132: LD_INT 64
 134: PPUSH
 135: LD_INT 0
 137: PPUSH
 138: CALL_OW 58
// wait ( 0 0$1 ) ;
 142: LD_INT 35
 144: PPUSH
 145: CALL_OW 67
// CreateResourcesXY ( mat_cans , 4 , 63 , 64 , false ) ;
 149: LD_INT 1
 151: PPUSH
 152: LD_INT 4
 154: PPUSH
 155: LD_INT 63
 157: PPUSH
 158: LD_INT 64
 160: PPUSH
 161: LD_INT 0
 163: PPUSH
 164: CALL_OW 58
// end ;
 168: LD_VAR 0 1
 172: RET
// function GetAllLabKind ( side , kinds ) ; var i , j , tmp ; begin
 173: LD_INT 0
 175: PPUSH
 176: PPUSH
 177: PPUSH
 178: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 179: LD_ADDR_VAR 0 6
 183: PUSH
 184: LD_INT 22
 186: PUSH
 187: LD_VAR 0 1
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 30
 201: PUSH
 202: LD_INT 7
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 30
 211: PUSH
 212: LD_INT 8
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: ST_TO_ADDR
// if not tmp or not kinds then
 233: LD_VAR 0 6
 237: NOT
 238: PUSH
 239: LD_VAR 0 2
 243: NOT
 244: OR
 245: IFFALSE 249
// exit ;
 247: GO 358
// result := 0 ;
 249: LD_ADDR_VAR 0 3
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// for i in tmp do
 257: LD_ADDR_VAR 0 4
 261: PUSH
 262: LD_VAR 0 6
 266: PUSH
 267: FOR_IN
 268: IFFALSE 356
// for j := 1 to 2 do
 270: LD_ADDR_VAR 0 5
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 2
 282: PUSH
 283: FOR_TO
 284: IFFALSE 352
// if GetLabKind ( i , j ) in kinds then
 286: LD_VAR 0 4
 290: PPUSH
 291: LD_VAR 0 5
 295: PPUSH
 296: CALL_OW 268
 300: PUSH
 301: LD_VAR 0 2
 305: IN
 306: IFFALSE 350
// begin kinds := kinds diff GetLabKind ( i , j ) ;
 308: LD_ADDR_VAR 0 2
 312: PUSH
 313: LD_VAR 0 2
 317: PUSH
 318: LD_VAR 0 4
 322: PPUSH
 323: LD_VAR 0 5
 327: PPUSH
 328: CALL_OW 268
 332: DIFF
 333: ST_TO_ADDR
// result := result + 1 ;
 334: LD_ADDR_VAR 0 3
 338: PUSH
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: PLUS
 347: ST_TO_ADDR
// continue ;
 348: GO 283
// end ;
 350: GO 283
 352: POP
 353: POP
 354: GO 267
 356: POP
 357: POP
// end ;
 358: LD_VAR 0 3
 362: RET
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin display_strings := weapon ;
 363: LD_ADDR_OWVAR 47
 367: PUSH
 368: LD_VAR 0 11
 372: ST_TO_ADDR
// end ; end_of_file
 373: PPOPN 11
 375: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 376: LD_INT 0
 378: PPUSH
 379: PPUSH
// if exist_mode then
 380: LD_VAR 0 2
 384: IFFALSE 409
// unit := CreateCharacter ( prefix & ident ) else
 386: LD_ADDR_VAR 0 5
 390: PUSH
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 1
 400: STR
 401: PPUSH
 402: CALL_OW 34
 406: ST_TO_ADDR
 407: GO 424
// unit := NewCharacter ( ident ) ;
 409: LD_ADDR_VAR 0 5
 413: PUSH
 414: LD_VAR 0 1
 418: PPUSH
 419: CALL_OW 25
 423: ST_TO_ADDR
// result := unit ;
 424: LD_ADDR_VAR 0 4
 428: PUSH
 429: LD_VAR 0 5
 433: ST_TO_ADDR
// end ;
 434: LD_VAR 0 4
 438: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 439: LD_INT 0
 441: PPUSH
 442: PPUSH
// if not side or not nation then
 443: LD_VAR 0 1
 447: NOT
 448: PUSH
 449: LD_VAR 0 2
 453: NOT
 454: OR
 455: IFFALSE 459
// exit ;
 457: GO 1227
// case nation of nation_american :
 459: LD_VAR 0 2
 463: PUSH
 464: LD_INT 1
 466: DOUBLE
 467: EQUAL
 468: IFTRUE 472
 470: GO 686
 472: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 473: LD_ADDR_VAR 0 4
 477: PUSH
 478: LD_INT 35
 480: PUSH
 481: LD_INT 45
 483: PUSH
 484: LD_INT 46
 486: PUSH
 487: LD_INT 47
 489: PUSH
 490: LD_INT 82
 492: PUSH
 493: LD_INT 83
 495: PUSH
 496: LD_INT 84
 498: PUSH
 499: LD_INT 85
 501: PUSH
 502: LD_INT 86
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: LD_INT 6
 513: PUSH
 514: LD_INT 15
 516: PUSH
 517: LD_INT 16
 519: PUSH
 520: LD_INT 7
 522: PUSH
 523: LD_INT 12
 525: PUSH
 526: LD_INT 13
 528: PUSH
 529: LD_INT 10
 531: PUSH
 532: LD_INT 14
 534: PUSH
 535: LD_INT 20
 537: PUSH
 538: LD_INT 21
 540: PUSH
 541: LD_INT 22
 543: PUSH
 544: LD_INT 25
 546: PUSH
 547: LD_INT 32
 549: PUSH
 550: LD_INT 27
 552: PUSH
 553: LD_INT 36
 555: PUSH
 556: LD_INT 69
 558: PUSH
 559: LD_INT 39
 561: PUSH
 562: LD_INT 34
 564: PUSH
 565: LD_INT 40
 567: PUSH
 568: LD_INT 48
 570: PUSH
 571: LD_INT 49
 573: PUSH
 574: LD_INT 50
 576: PUSH
 577: LD_INT 51
 579: PUSH
 580: LD_INT 52
 582: PUSH
 583: LD_INT 53
 585: PUSH
 586: LD_INT 54
 588: PUSH
 589: LD_INT 55
 591: PUSH
 592: LD_INT 56
 594: PUSH
 595: LD_INT 57
 597: PUSH
 598: LD_INT 58
 600: PUSH
 601: LD_INT 59
 603: PUSH
 604: LD_INT 60
 606: PUSH
 607: LD_INT 61
 609: PUSH
 610: LD_INT 62
 612: PUSH
 613: LD_INT 80
 615: PUSH
 616: LD_INT 82
 618: PUSH
 619: LD_INT 83
 621: PUSH
 622: LD_INT 84
 624: PUSH
 625: LD_INT 85
 627: PUSH
 628: LD_INT 86
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: ST_TO_ADDR
 684: GO 1151
 686: LD_INT 2
 688: DOUBLE
 689: EQUAL
 690: IFTRUE 694
 692: GO 920
 694: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 695: LD_ADDR_VAR 0 4
 699: PUSH
 700: LD_INT 35
 702: PUSH
 703: LD_INT 45
 705: PUSH
 706: LD_INT 46
 708: PUSH
 709: LD_INT 47
 711: PUSH
 712: LD_INT 82
 714: PUSH
 715: LD_INT 83
 717: PUSH
 718: LD_INT 84
 720: PUSH
 721: LD_INT 85
 723: PUSH
 724: LD_INT 87
 726: PUSH
 727: LD_INT 70
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 11
 735: PUSH
 736: LD_INT 3
 738: PUSH
 739: LD_INT 4
 741: PUSH
 742: LD_INT 5
 744: PUSH
 745: LD_INT 6
 747: PUSH
 748: LD_INT 15
 750: PUSH
 751: LD_INT 18
 753: PUSH
 754: LD_INT 7
 756: PUSH
 757: LD_INT 17
 759: PUSH
 760: LD_INT 8
 762: PUSH
 763: LD_INT 20
 765: PUSH
 766: LD_INT 21
 768: PUSH
 769: LD_INT 22
 771: PUSH
 772: LD_INT 72
 774: PUSH
 775: LD_INT 26
 777: PUSH
 778: LD_INT 69
 780: PUSH
 781: LD_INT 39
 783: PUSH
 784: LD_INT 40
 786: PUSH
 787: LD_INT 41
 789: PUSH
 790: LD_INT 42
 792: PUSH
 793: LD_INT 43
 795: PUSH
 796: LD_INT 48
 798: PUSH
 799: LD_INT 49
 801: PUSH
 802: LD_INT 50
 804: PUSH
 805: LD_INT 51
 807: PUSH
 808: LD_INT 52
 810: PUSH
 811: LD_INT 53
 813: PUSH
 814: LD_INT 54
 816: PUSH
 817: LD_INT 55
 819: PUSH
 820: LD_INT 56
 822: PUSH
 823: LD_INT 60
 825: PUSH
 826: LD_INT 61
 828: PUSH
 829: LD_INT 62
 831: PUSH
 832: LD_INT 66
 834: PUSH
 835: LD_INT 67
 837: PUSH
 838: LD_INT 68
 840: PUSH
 841: LD_INT 81
 843: PUSH
 844: LD_INT 82
 846: PUSH
 847: LD_INT 83
 849: PUSH
 850: LD_INT 84
 852: PUSH
 853: LD_INT 85
 855: PUSH
 856: LD_INT 87
 858: PUSH
 859: LD_INT 88
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
 918: GO 1151
 920: LD_INT 3
 922: DOUBLE
 923: EQUAL
 924: IFTRUE 928
 926: GO 1150
 928: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 929: LD_ADDR_VAR 0 4
 933: PUSH
 934: LD_INT 46
 936: PUSH
 937: LD_INT 47
 939: PUSH
 940: LD_INT 1
 942: PUSH
 943: LD_INT 2
 945: PUSH
 946: LD_INT 82
 948: PUSH
 949: LD_INT 83
 951: PUSH
 952: LD_INT 84
 954: PUSH
 955: LD_INT 85
 957: PUSH
 958: LD_INT 86
 960: PUSH
 961: LD_INT 11
 963: PUSH
 964: LD_INT 9
 966: PUSH
 967: LD_INT 20
 969: PUSH
 970: LD_INT 19
 972: PUSH
 973: LD_INT 21
 975: PUSH
 976: LD_INT 24
 978: PUSH
 979: LD_INT 22
 981: PUSH
 982: LD_INT 25
 984: PUSH
 985: LD_INT 28
 987: PUSH
 988: LD_INT 29
 990: PUSH
 991: LD_INT 30
 993: PUSH
 994: LD_INT 31
 996: PUSH
 997: LD_INT 37
 999: PUSH
1000: LD_INT 38
1002: PUSH
1003: LD_INT 32
1005: PUSH
1006: LD_INT 27
1008: PUSH
1009: LD_INT 33
1011: PUSH
1012: LD_INT 69
1014: PUSH
1015: LD_INT 39
1017: PUSH
1018: LD_INT 34
1020: PUSH
1021: LD_INT 40
1023: PUSH
1024: LD_INT 71
1026: PUSH
1027: LD_INT 23
1029: PUSH
1030: LD_INT 44
1032: PUSH
1033: LD_INT 48
1035: PUSH
1036: LD_INT 49
1038: PUSH
1039: LD_INT 50
1041: PUSH
1042: LD_INT 51
1044: PUSH
1045: LD_INT 52
1047: PUSH
1048: LD_INT 53
1050: PUSH
1051: LD_INT 54
1053: PUSH
1054: LD_INT 55
1056: PUSH
1057: LD_INT 56
1059: PUSH
1060: LD_INT 57
1062: PUSH
1063: LD_INT 58
1065: PUSH
1066: LD_INT 59
1068: PUSH
1069: LD_INT 63
1071: PUSH
1072: LD_INT 64
1074: PUSH
1075: LD_INT 65
1077: PUSH
1078: LD_INT 82
1080: PUSH
1081: LD_INT 83
1083: PUSH
1084: LD_INT 84
1086: PUSH
1087: LD_INT 85
1089: PUSH
1090: LD_INT 86
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: ST_TO_ADDR
1148: GO 1151
1150: POP
// if state > - 1 and state < 3 then
1151: LD_VAR 0 3
1155: PUSH
1156: LD_INT 1
1158: NEG
1159: GREATER
1160: PUSH
1161: LD_VAR 0 3
1165: PUSH
1166: LD_INT 3
1168: LESS
1169: AND
1170: IFFALSE 1227
// for i in result do
1172: LD_ADDR_VAR 0 5
1176: PUSH
1177: LD_VAR 0 4
1181: PUSH
1182: FOR_IN
1183: IFFALSE 1225
// if GetTech ( i , side ) <> state then
1185: LD_VAR 0 5
1189: PPUSH
1190: LD_VAR 0 1
1194: PPUSH
1195: CALL_OW 321
1199: PUSH
1200: LD_VAR 0 3
1204: NONEQUAL
1205: IFFALSE 1223
// result := result diff i ;
1207: LD_ADDR_VAR 0 4
1211: PUSH
1212: LD_VAR 0 4
1216: PUSH
1217: LD_VAR 0 5
1221: DIFF
1222: ST_TO_ADDR
1223: GO 1182
1225: POP
1226: POP
// end ;
1227: LD_VAR 0 4
1231: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1232: LD_INT 0
1234: PPUSH
1235: PPUSH
1236: PPUSH
// result := true ;
1237: LD_ADDR_VAR 0 3
1241: PUSH
1242: LD_INT 1
1244: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1245: LD_ADDR_VAR 0 5
1249: PUSH
1250: LD_VAR 0 2
1254: PPUSH
1255: CALL_OW 480
1259: ST_TO_ADDR
// if not tmp then
1260: LD_VAR 0 5
1264: NOT
1265: IFFALSE 1269
// exit ;
1267: GO 1318
// for i in tmp do
1269: LD_ADDR_VAR 0 4
1273: PUSH
1274: LD_VAR 0 5
1278: PUSH
1279: FOR_IN
1280: IFFALSE 1316
// if GetTech ( i , side ) <> state_researched then
1282: LD_VAR 0 4
1286: PPUSH
1287: LD_VAR 0 1
1291: PPUSH
1292: CALL_OW 321
1296: PUSH
1297: LD_INT 2
1299: NONEQUAL
1300: IFFALSE 1314
// begin result := false ;
1302: LD_ADDR_VAR 0 3
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// exit ;
1310: POP
1311: POP
1312: GO 1318
// end ;
1314: GO 1279
1316: POP
1317: POP
// end ;
1318: LD_VAR 0 3
1322: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1323: LD_INT 0
1325: PPUSH
1326: PPUSH
1327: PPUSH
1328: PPUSH
1329: PPUSH
1330: PPUSH
1331: PPUSH
1332: PPUSH
1333: PPUSH
1334: PPUSH
1335: PPUSH
1336: PPUSH
1337: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1338: LD_VAR 0 1
1342: NOT
1343: PUSH
1344: LD_VAR 0 1
1348: PPUSH
1349: CALL_OW 257
1353: PUSH
1354: LD_INT 9
1356: NONEQUAL
1357: OR
1358: IFFALSE 1362
// exit ;
1360: GO 1935
// side := GetSide ( unit ) ;
1362: LD_ADDR_VAR 0 9
1366: PUSH
1367: LD_VAR 0 1
1371: PPUSH
1372: CALL_OW 255
1376: ST_TO_ADDR
// tech_space := tech_spacanom ;
1377: LD_ADDR_VAR 0 12
1381: PUSH
1382: LD_INT 29
1384: ST_TO_ADDR
// tech_time := tech_taurad ;
1385: LD_ADDR_VAR 0 13
1389: PUSH
1390: LD_INT 28
1392: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1393: LD_ADDR_VAR 0 11
1397: PUSH
1398: LD_VAR 0 1
1402: PPUSH
1403: CALL_OW 310
1407: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1408: LD_VAR 0 11
1412: PPUSH
1413: CALL_OW 247
1417: PUSH
1418: LD_INT 2
1420: EQUAL
1421: IFFALSE 1425
// exit ;
1423: GO 1935
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1425: LD_ADDR_VAR 0 8
1429: PUSH
1430: LD_INT 81
1432: PUSH
1433: LD_VAR 0 9
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 3
1444: PUSH
1445: LD_INT 21
1447: PUSH
1448: LD_INT 3
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PPUSH
1463: CALL_OW 69
1467: ST_TO_ADDR
// if not tmp then
1468: LD_VAR 0 8
1472: NOT
1473: IFFALSE 1477
// exit ;
1475: GO 1935
// if in_unit then
1477: LD_VAR 0 11
1481: IFFALSE 1505
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1483: LD_ADDR_VAR 0 10
1487: PUSH
1488: LD_VAR 0 8
1492: PPUSH
1493: LD_VAR 0 11
1497: PPUSH
1498: CALL_OW 74
1502: ST_TO_ADDR
1503: GO 1525
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1505: LD_ADDR_VAR 0 10
1509: PUSH
1510: LD_VAR 0 8
1514: PPUSH
1515: LD_VAR 0 1
1519: PPUSH
1520: CALL_OW 74
1524: ST_TO_ADDR
// if not enemy then
1525: LD_VAR 0 10
1529: NOT
1530: IFFALSE 1534
// exit ;
1532: GO 1935
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1534: LD_VAR 0 11
1538: PUSH
1539: LD_VAR 0 11
1543: PPUSH
1544: LD_VAR 0 10
1548: PPUSH
1549: CALL_OW 296
1553: PUSH
1554: LD_INT 13
1556: GREATER
1557: AND
1558: PUSH
1559: LD_VAR 0 1
1563: PPUSH
1564: LD_VAR 0 10
1568: PPUSH
1569: CALL_OW 296
1573: PUSH
1574: LD_INT 12
1576: GREATER
1577: OR
1578: IFFALSE 1582
// exit ;
1580: GO 1935
// missile := [ 1 ] ;
1582: LD_ADDR_VAR 0 14
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: EMPTY
1591: LIST
1592: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1593: LD_VAR 0 9
1597: PPUSH
1598: LD_VAR 0 12
1602: PPUSH
1603: CALL_OW 325
1607: IFFALSE 1636
// missile := Replace ( missile , missile + 1 , 2 ) ;
1609: LD_ADDR_VAR 0 14
1613: PUSH
1614: LD_VAR 0 14
1618: PPUSH
1619: LD_VAR 0 14
1623: PUSH
1624: LD_INT 1
1626: PLUS
1627: PPUSH
1628: LD_INT 2
1630: PPUSH
1631: CALL_OW 1
1635: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1636: LD_VAR 0 9
1640: PPUSH
1641: LD_VAR 0 13
1645: PPUSH
1646: CALL_OW 325
1650: PUSH
1651: LD_VAR 0 10
1655: PPUSH
1656: CALL_OW 255
1660: PPUSH
1661: LD_VAR 0 13
1665: PPUSH
1666: CALL_OW 325
1670: NOT
1671: AND
1672: IFFALSE 1701
// missile := Replace ( missile , missile + 1 , 3 ) ;
1674: LD_ADDR_VAR 0 14
1678: PUSH
1679: LD_VAR 0 14
1683: PPUSH
1684: LD_VAR 0 14
1688: PUSH
1689: LD_INT 1
1691: PLUS
1692: PPUSH
1693: LD_INT 3
1695: PPUSH
1696: CALL_OW 1
1700: ST_TO_ADDR
// if missile < 2 then
1701: LD_VAR 0 14
1705: PUSH
1706: LD_INT 2
1708: LESS
1709: IFFALSE 1713
// exit ;
1711: GO 1935
// x := GetX ( enemy ) ;
1713: LD_ADDR_VAR 0 4
1717: PUSH
1718: LD_VAR 0 10
1722: PPUSH
1723: CALL_OW 250
1727: ST_TO_ADDR
// y := GetY ( enemy ) ;
1728: LD_ADDR_VAR 0 5
1732: PUSH
1733: LD_VAR 0 10
1737: PPUSH
1738: CALL_OW 251
1742: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1743: LD_ADDR_VAR 0 6
1747: PUSH
1748: LD_VAR 0 4
1752: PUSH
1753: LD_INT 1
1755: NEG
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL_OW 12
1764: PLUS
1765: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1766: LD_ADDR_VAR 0 7
1770: PUSH
1771: LD_VAR 0 5
1775: PUSH
1776: LD_INT 1
1778: NEG
1779: PPUSH
1780: LD_INT 1
1782: PPUSH
1783: CALL_OW 12
1787: PLUS
1788: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1789: LD_VAR 0 6
1793: PPUSH
1794: LD_VAR 0 7
1798: PPUSH
1799: CALL_OW 488
1803: NOT
1804: IFFALSE 1826
// begin _x := x ;
1806: LD_ADDR_VAR 0 6
1810: PUSH
1811: LD_VAR 0 4
1815: ST_TO_ADDR
// _y := y ;
1816: LD_ADDR_VAR 0 7
1820: PUSH
1821: LD_VAR 0 5
1825: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1826: LD_ADDR_VAR 0 3
1830: PUSH
1831: LD_INT 1
1833: PPUSH
1834: LD_VAR 0 14
1838: PPUSH
1839: CALL_OW 12
1843: ST_TO_ADDR
// case i of 1 :
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 1
1851: DOUBLE
1852: EQUAL
1853: IFTRUE 1857
1855: GO 1874
1857: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1858: LD_VAR 0 1
1862: PPUSH
1863: LD_VAR 0 10
1867: PPUSH
1868: CALL_OW 115
1872: GO 1935
1874: LD_INT 2
1876: DOUBLE
1877: EQUAL
1878: IFTRUE 1882
1880: GO 1904
1882: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1883: LD_VAR 0 1
1887: PPUSH
1888: LD_VAR 0 6
1892: PPUSH
1893: LD_VAR 0 7
1897: PPUSH
1898: CALL_OW 153
1902: GO 1935
1904: LD_INT 3
1906: DOUBLE
1907: EQUAL
1908: IFTRUE 1912
1910: GO 1934
1912: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1913: LD_VAR 0 1
1917: PPUSH
1918: LD_VAR 0 6
1922: PPUSH
1923: LD_VAR 0 7
1927: PPUSH
1928: CALL_OW 154
1932: GO 1935
1934: POP
// end ;
1935: LD_VAR 0 2
1939: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1940: LD_INT 0
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
// if not unit or not building then
1948: LD_VAR 0 1
1952: NOT
1953: PUSH
1954: LD_VAR 0 2
1958: NOT
1959: OR
1960: IFFALSE 1964
// exit ;
1962: GO 2122
// x := GetX ( building ) ;
1964: LD_ADDR_VAR 0 5
1968: PUSH
1969: LD_VAR 0 2
1973: PPUSH
1974: CALL_OW 250
1978: ST_TO_ADDR
// y := GetY ( building ) ;
1979: LD_ADDR_VAR 0 6
1983: PUSH
1984: LD_VAR 0 2
1988: PPUSH
1989: CALL_OW 251
1993: ST_TO_ADDR
// for i = 0 to 5 do
1994: LD_ADDR_VAR 0 4
1998: PUSH
1999: DOUBLE
2000: LD_INT 0
2002: DEC
2003: ST_TO_ADDR
2004: LD_INT 5
2006: PUSH
2007: FOR_TO
2008: IFFALSE 2120
// begin _x := ShiftX ( x , i , 3 ) ;
2010: LD_ADDR_VAR 0 7
2014: PUSH
2015: LD_VAR 0 5
2019: PPUSH
2020: LD_VAR 0 4
2024: PPUSH
2025: LD_INT 3
2027: PPUSH
2028: CALL_OW 272
2032: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2033: LD_ADDR_VAR 0 8
2037: PUSH
2038: LD_VAR 0 6
2042: PPUSH
2043: LD_VAR 0 4
2047: PPUSH
2048: LD_INT 3
2050: PPUSH
2051: CALL_OW 273
2055: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2056: LD_VAR 0 7
2060: PPUSH
2061: LD_VAR 0 8
2065: PPUSH
2066: CALL_OW 488
2070: NOT
2071: IFFALSE 2075
// continue ;
2073: GO 2007
// if HexInfo ( _x , _y ) = 0 then
2075: LD_VAR 0 7
2079: PPUSH
2080: LD_VAR 0 8
2084: PPUSH
2085: CALL_OW 428
2089: PUSH
2090: LD_INT 0
2092: EQUAL
2093: IFFALSE 2118
// begin ComMoveXY ( unit , _x , _y ) ;
2095: LD_VAR 0 1
2099: PPUSH
2100: LD_VAR 0 7
2104: PPUSH
2105: LD_VAR 0 8
2109: PPUSH
2110: CALL_OW 111
// exit ;
2114: POP
2115: POP
2116: GO 2122
// end ; end ;
2118: GO 2007
2120: POP
2121: POP
// end ;
2122: LD_VAR 0 3
2126: RET
// export function ScanBase ( side , base_area ) ; begin
2127: LD_INT 0
2129: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2130: LD_ADDR_VAR 0 3
2134: PUSH
2135: LD_VAR 0 2
2139: PPUSH
2140: LD_INT 81
2142: PUSH
2143: LD_VAR 0 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: ST_TO_ADDR
// end ;
2157: LD_VAR 0 3
2161: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2162: LD_INT 0
2164: PPUSH
2165: PPUSH
2166: PPUSH
2167: PPUSH
// result := false ;
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: LD_INT 0
2175: ST_TO_ADDR
// side := GetSide ( unit ) ;
2176: LD_ADDR_VAR 0 3
2180: PUSH
2181: LD_VAR 0 1
2185: PPUSH
2186: CALL_OW 255
2190: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2191: LD_ADDR_VAR 0 4
2195: PUSH
2196: LD_VAR 0 1
2200: PPUSH
2201: CALL_OW 248
2205: ST_TO_ADDR
// case nat of 1 :
2206: LD_VAR 0 4
2210: PUSH
2211: LD_INT 1
2213: DOUBLE
2214: EQUAL
2215: IFTRUE 2219
2217: GO 2230
2219: POP
// tech := tech_lassight ; 2 :
2220: LD_ADDR_VAR 0 5
2224: PUSH
2225: LD_INT 12
2227: ST_TO_ADDR
2228: GO 2269
2230: LD_INT 2
2232: DOUBLE
2233: EQUAL
2234: IFTRUE 2238
2236: GO 2249
2238: POP
// tech := tech_mortar ; 3 :
2239: LD_ADDR_VAR 0 5
2243: PUSH
2244: LD_INT 41
2246: ST_TO_ADDR
2247: GO 2269
2249: LD_INT 3
2251: DOUBLE
2252: EQUAL
2253: IFTRUE 2257
2255: GO 2268
2257: POP
// tech := tech_bazooka ; end ;
2258: LD_ADDR_VAR 0 5
2262: PUSH
2263: LD_INT 44
2265: ST_TO_ADDR
2266: GO 2269
2268: POP
// if Researched ( side , tech ) then
2269: LD_VAR 0 3
2273: PPUSH
2274: LD_VAR 0 5
2278: PPUSH
2279: CALL_OW 325
2283: IFFALSE 2310
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: LD_INT 5
2292: PUSH
2293: LD_INT 8
2295: PUSH
2296: LD_INT 9
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_VAR 0 4
2308: ARRAY
2309: ST_TO_ADDR
// end ;
2310: LD_VAR 0 2
2314: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2315: LD_INT 0
2317: PPUSH
2318: PPUSH
2319: PPUSH
// if not mines then
2320: LD_VAR 0 2
2324: NOT
2325: IFFALSE 2329
// exit ;
2327: GO 2473
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2329: LD_ADDR_VAR 0 5
2333: PUSH
2334: LD_INT 81
2336: PUSH
2337: LD_VAR 0 1
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 21
2351: PUSH
2352: LD_INT 3
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: ST_TO_ADDR
// for i in mines do
2372: LD_ADDR_VAR 0 4
2376: PUSH
2377: LD_VAR 0 2
2381: PUSH
2382: FOR_IN
2383: IFFALSE 2471
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2385: LD_VAR 0 4
2389: PUSH
2390: LD_INT 1
2392: ARRAY
2393: PPUSH
2394: LD_VAR 0 4
2398: PUSH
2399: LD_INT 2
2401: ARRAY
2402: PPUSH
2403: CALL_OW 458
2407: NOT
2408: IFFALSE 2412
// continue ;
2410: GO 2382
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2412: LD_VAR 0 4
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: LD_VAR 0 4
2425: PUSH
2426: LD_INT 2
2428: ARRAY
2429: PPUSH
2430: CALL_OW 428
2434: PUSH
2435: LD_VAR 0 5
2439: IN
2440: IFFALSE 2469
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2442: LD_VAR 0 4
2446: PUSH
2447: LD_INT 1
2449: ARRAY
2450: PPUSH
2451: LD_VAR 0 4
2455: PUSH
2456: LD_INT 2
2458: ARRAY
2459: PPUSH
2460: LD_VAR 0 1
2464: PPUSH
2465: CALL_OW 456
// end ;
2469: GO 2382
2471: POP
2472: POP
// end ;
2473: LD_VAR 0 3
2477: RET
// export function Count ( array ) ; begin
2478: LD_INT 0
2480: PPUSH
// result := array + 0 ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_VAR 0 1
2490: PUSH
2491: LD_INT 0
2493: PLUS
2494: ST_TO_ADDR
// end ;
2495: LD_VAR 0 2
2499: RET
// export function IsEmpty ( building ) ; begin
2500: LD_INT 0
2502: PPUSH
// if not building then
2503: LD_VAR 0 1
2507: NOT
2508: IFFALSE 2512
// exit ;
2510: GO 2555
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2512: LD_ADDR_VAR 0 2
2516: PUSH
2517: LD_VAR 0 1
2521: PUSH
2522: LD_INT 22
2524: PUSH
2525: LD_VAR 0 1
2529: PPUSH
2530: CALL_OW 255
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 58
2541: PUSH
2542: EMPTY
2543: LIST
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PPUSH
2549: CALL_OW 69
2553: IN
2554: ST_TO_ADDR
// end ;
2555: LD_VAR 0 2
2559: RET
// export function IsNotFull ( building ) ; var places ; begin
2560: LD_INT 0
2562: PPUSH
2563: PPUSH
// if not building then
2564: LD_VAR 0 1
2568: NOT
2569: IFFALSE 2573
// exit ;
2571: GO 2601
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2573: LD_ADDR_VAR 0 2
2577: PUSH
2578: LD_VAR 0 1
2582: PPUSH
2583: LD_INT 3
2585: PUSH
2586: LD_INT 62
2588: PUSH
2589: EMPTY
2590: LIST
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: PPUSH
2596: CALL_OW 72
2600: ST_TO_ADDR
// end ;
2601: LD_VAR 0 2
2605: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2606: LD_INT 0
2608: PPUSH
2609: PPUSH
2610: PPUSH
2611: PPUSH
// tmp := [ ] ;
2612: LD_ADDR_VAR 0 3
2616: PUSH
2617: EMPTY
2618: ST_TO_ADDR
// list := [ ] ;
2619: LD_ADDR_VAR 0 5
2623: PUSH
2624: EMPTY
2625: ST_TO_ADDR
// for i = 16 to 25 do
2626: LD_ADDR_VAR 0 4
2630: PUSH
2631: DOUBLE
2632: LD_INT 16
2634: DEC
2635: ST_TO_ADDR
2636: LD_INT 25
2638: PUSH
2639: FOR_TO
2640: IFFALSE 2713
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2642: LD_ADDR_VAR 0 3
2646: PUSH
2647: LD_VAR 0 3
2651: PUSH
2652: LD_INT 22
2654: PUSH
2655: LD_VAR 0 1
2659: PPUSH
2660: CALL_OW 255
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: PUSH
2669: LD_INT 91
2671: PUSH
2672: LD_VAR 0 1
2676: PUSH
2677: LD_INT 6
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: LIST
2684: PUSH
2685: LD_INT 30
2687: PUSH
2688: LD_VAR 0 4
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: PPUSH
2705: CALL_OW 69
2709: ADD
2710: ST_TO_ADDR
2711: GO 2639
2713: POP
2714: POP
// for i = 1 to tmp do
2715: LD_ADDR_VAR 0 4
2719: PUSH
2720: DOUBLE
2721: LD_INT 1
2723: DEC
2724: ST_TO_ADDR
2725: LD_VAR 0 3
2729: PUSH
2730: FOR_TO
2731: IFFALSE 2819
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2733: LD_ADDR_VAR 0 5
2737: PUSH
2738: LD_VAR 0 5
2742: PUSH
2743: LD_VAR 0 3
2747: PUSH
2748: LD_VAR 0 4
2752: ARRAY
2753: PPUSH
2754: CALL_OW 266
2758: PUSH
2759: LD_VAR 0 3
2763: PUSH
2764: LD_VAR 0 4
2768: ARRAY
2769: PPUSH
2770: CALL_OW 250
2774: PUSH
2775: LD_VAR 0 3
2779: PUSH
2780: LD_VAR 0 4
2784: ARRAY
2785: PPUSH
2786: CALL_OW 251
2790: PUSH
2791: LD_VAR 0 3
2795: PUSH
2796: LD_VAR 0 4
2800: ARRAY
2801: PPUSH
2802: CALL_OW 254
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: PUSH
2813: EMPTY
2814: LIST
2815: ADD
2816: ST_TO_ADDR
2817: GO 2730
2819: POP
2820: POP
// result := list ;
2821: LD_ADDR_VAR 0 2
2825: PUSH
2826: LD_VAR 0 5
2830: ST_TO_ADDR
// end ;
2831: LD_VAR 0 2
2835: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2836: LD_INT 0
2838: PPUSH
2839: PPUSH
2840: PPUSH
2841: PPUSH
2842: PPUSH
2843: PPUSH
2844: PPUSH
// if not factory then
2845: LD_VAR 0 1
2849: NOT
2850: IFFALSE 2854
// exit ;
2852: GO 3447
// if control = control_apeman then
2854: LD_VAR 0 4
2858: PUSH
2859: LD_INT 5
2861: EQUAL
2862: IFFALSE 2971
// begin tmp := UnitsInside ( factory ) ;
2864: LD_ADDR_VAR 0 8
2868: PUSH
2869: LD_VAR 0 1
2873: PPUSH
2874: CALL_OW 313
2878: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2879: LD_VAR 0 8
2883: PPUSH
2884: LD_INT 25
2886: PUSH
2887: LD_INT 12
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 72
2898: NOT
2899: IFFALSE 2909
// control := control_manual ;
2901: LD_ADDR_VAR 0 4
2905: PUSH
2906: LD_INT 1
2908: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2909: LD_ADDR_VAR 0 8
2913: PUSH
2914: LD_VAR 0 1
2918: PPUSH
2919: CALL 2606 0 1
2923: ST_TO_ADDR
// if tmp then
2924: LD_VAR 0 8
2928: IFFALSE 2971
// begin for i in tmp do
2930: LD_ADDR_VAR 0 7
2934: PUSH
2935: LD_VAR 0 8
2939: PUSH
2940: FOR_IN
2941: IFFALSE 2969
// if i [ 1 ] = b_ext_radio then
2943: LD_VAR 0 7
2947: PUSH
2948: LD_INT 1
2950: ARRAY
2951: PUSH
2952: LD_INT 22
2954: EQUAL
2955: IFFALSE 2967
// begin control := control_remote ;
2957: LD_ADDR_VAR 0 4
2961: PUSH
2962: LD_INT 2
2964: ST_TO_ADDR
// break ;
2965: GO 2969
// end ;
2967: GO 2940
2969: POP
2970: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2971: LD_VAR 0 1
2975: PPUSH
2976: LD_VAR 0 2
2980: PPUSH
2981: LD_VAR 0 3
2985: PPUSH
2986: LD_VAR 0 4
2990: PPUSH
2991: LD_VAR 0 5
2995: PPUSH
2996: CALL_OW 448
3000: IFFALSE 3035
// begin result := [ chassis , engine , control , weapon ] ;
3002: LD_ADDR_VAR 0 6
3006: PUSH
3007: LD_VAR 0 2
3011: PUSH
3012: LD_VAR 0 3
3016: PUSH
3017: LD_VAR 0 4
3021: PUSH
3022: LD_VAR 0 5
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: ST_TO_ADDR
// exit ;
3033: GO 3447
// end ; _chassis := AvailableChassisList ( factory ) ;
3035: LD_ADDR_VAR 0 9
3039: PUSH
3040: LD_VAR 0 1
3044: PPUSH
3045: CALL_OW 475
3049: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3050: LD_ADDR_VAR 0 11
3054: PUSH
3055: LD_VAR 0 1
3059: PPUSH
3060: CALL_OW 476
3064: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3065: LD_ADDR_VAR 0 12
3069: PUSH
3070: LD_VAR 0 1
3074: PPUSH
3075: CALL_OW 477
3079: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3080: LD_ADDR_VAR 0 10
3084: PUSH
3085: LD_VAR 0 1
3089: PPUSH
3090: CALL_OW 478
3094: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3095: LD_VAR 0 9
3099: NOT
3100: PUSH
3101: LD_VAR 0 11
3105: NOT
3106: OR
3107: PUSH
3108: LD_VAR 0 12
3112: NOT
3113: OR
3114: PUSH
3115: LD_VAR 0 10
3119: NOT
3120: OR
3121: IFFALSE 3156
// begin result := [ chassis , engine , control , weapon ] ;
3123: LD_ADDR_VAR 0 6
3127: PUSH
3128: LD_VAR 0 2
3132: PUSH
3133: LD_VAR 0 3
3137: PUSH
3138: LD_VAR 0 4
3142: PUSH
3143: LD_VAR 0 5
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: ST_TO_ADDR
// exit ;
3154: GO 3447
// end ; if not chassis in _chassis then
3156: LD_VAR 0 2
3160: PUSH
3161: LD_VAR 0 9
3165: IN
3166: NOT
3167: IFFALSE 3193
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3169: LD_ADDR_VAR 0 2
3173: PUSH
3174: LD_VAR 0 9
3178: PUSH
3179: LD_INT 1
3181: PPUSH
3182: LD_VAR 0 9
3186: PPUSH
3187: CALL_OW 12
3191: ARRAY
3192: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3193: LD_VAR 0 2
3197: PPUSH
3198: LD_VAR 0 3
3202: PPUSH
3203: CALL 3452 0 2
3207: NOT
3208: IFFALSE 3267
// repeat engine := _engine [ 1 ] ;
3210: LD_ADDR_VAR 0 3
3214: PUSH
3215: LD_VAR 0 11
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3224: LD_ADDR_VAR 0 11
3228: PUSH
3229: LD_VAR 0 11
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: CALL_OW 3
3241: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3242: LD_VAR 0 2
3246: PPUSH
3247: LD_VAR 0 3
3251: PPUSH
3252: CALL 3452 0 2
3256: PUSH
3257: LD_VAR 0 11
3261: PUSH
3262: EMPTY
3263: EQUAL
3264: OR
3265: IFFALSE 3210
// if not control in _control then
3267: LD_VAR 0 4
3271: PUSH
3272: LD_VAR 0 12
3276: IN
3277: NOT
3278: IFFALSE 3304
// control := _control [ rand ( 1 , _control ) ] ;
3280: LD_ADDR_VAR 0 4
3284: PUSH
3285: LD_VAR 0 12
3289: PUSH
3290: LD_INT 1
3292: PPUSH
3293: LD_VAR 0 12
3297: PPUSH
3298: CALL_OW 12
3302: ARRAY
3303: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3304: LD_VAR 0 2
3308: PPUSH
3309: LD_VAR 0 5
3313: PPUSH
3314: CALL 3672 0 2
3318: NOT
3319: IFFALSE 3378
// repeat weapon := _weapon [ 1 ] ;
3321: LD_ADDR_VAR 0 5
3325: PUSH
3326: LD_VAR 0 10
3330: PUSH
3331: LD_INT 1
3333: ARRAY
3334: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3335: LD_ADDR_VAR 0 10
3339: PUSH
3340: LD_VAR 0 10
3344: PPUSH
3345: LD_INT 1
3347: PPUSH
3348: CALL_OW 3
3352: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3353: LD_VAR 0 2
3357: PPUSH
3358: LD_VAR 0 5
3362: PPUSH
3363: CALL 3672 0 2
3367: PUSH
3368: LD_VAR 0 10
3372: PUSH
3373: EMPTY
3374: EQUAL
3375: OR
3376: IFFALSE 3321
// result := [ ] ;
3378: LD_ADDR_VAR 0 6
3382: PUSH
3383: EMPTY
3384: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3385: LD_VAR 0 1
3389: PPUSH
3390: LD_VAR 0 2
3394: PPUSH
3395: LD_VAR 0 3
3399: PPUSH
3400: LD_VAR 0 4
3404: PPUSH
3405: LD_VAR 0 5
3409: PPUSH
3410: CALL_OW 448
3414: IFFALSE 3447
// result := [ chassis , engine , control , weapon ] ;
3416: LD_ADDR_VAR 0 6
3420: PUSH
3421: LD_VAR 0 2
3425: PUSH
3426: LD_VAR 0 3
3430: PUSH
3431: LD_VAR 0 4
3435: PUSH
3436: LD_VAR 0 5
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: ST_TO_ADDR
// end ;
3447: LD_VAR 0 6
3451: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3452: LD_INT 0
3454: PPUSH
// if not chassis or not engine then
3455: LD_VAR 0 1
3459: NOT
3460: PUSH
3461: LD_VAR 0 2
3465: NOT
3466: OR
3467: IFFALSE 3471
// exit ;
3469: GO 3667
// case engine of engine_solar :
3471: LD_VAR 0 2
3475: PUSH
3476: LD_INT 2
3478: DOUBLE
3479: EQUAL
3480: IFTRUE 3484
3482: GO 3522
3484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3485: LD_ADDR_VAR 0 3
3489: PUSH
3490: LD_INT 11
3492: PUSH
3493: LD_INT 12
3495: PUSH
3496: LD_INT 13
3498: PUSH
3499: LD_INT 14
3501: PUSH
3502: LD_INT 1
3504: PUSH
3505: LD_INT 2
3507: PUSH
3508: LD_INT 3
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: ST_TO_ADDR
3520: GO 3651
3522: LD_INT 1
3524: DOUBLE
3525: EQUAL
3526: IFTRUE 3530
3528: GO 3592
3530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3531: LD_ADDR_VAR 0 3
3535: PUSH
3536: LD_INT 11
3538: PUSH
3539: LD_INT 12
3541: PUSH
3542: LD_INT 13
3544: PUSH
3545: LD_INT 14
3547: PUSH
3548: LD_INT 1
3550: PUSH
3551: LD_INT 2
3553: PUSH
3554: LD_INT 3
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: LD_INT 5
3562: PUSH
3563: LD_INT 21
3565: PUSH
3566: LD_INT 23
3568: PUSH
3569: LD_INT 22
3571: PUSH
3572: LD_INT 24
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: ST_TO_ADDR
3590: GO 3651
3592: LD_INT 3
3594: DOUBLE
3595: EQUAL
3596: IFTRUE 3600
3598: GO 3650
3600: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3601: LD_ADDR_VAR 0 3
3605: PUSH
3606: LD_INT 13
3608: PUSH
3609: LD_INT 14
3611: PUSH
3612: LD_INT 2
3614: PUSH
3615: LD_INT 3
3617: PUSH
3618: LD_INT 4
3620: PUSH
3621: LD_INT 5
3623: PUSH
3624: LD_INT 21
3626: PUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 23
3632: PUSH
3633: LD_INT 24
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: ST_TO_ADDR
3648: GO 3651
3650: POP
// result := ( chassis in result ) ;
3651: LD_ADDR_VAR 0 3
3655: PUSH
3656: LD_VAR 0 1
3660: PUSH
3661: LD_VAR 0 3
3665: IN
3666: ST_TO_ADDR
// end ;
3667: LD_VAR 0 3
3671: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3672: LD_INT 0
3674: PPUSH
// if not chassis or not weapon then
3675: LD_VAR 0 1
3679: NOT
3680: PUSH
3681: LD_VAR 0 2
3685: NOT
3686: OR
3687: IFFALSE 3691
// exit ;
3689: GO 4751
// case weapon of us_machine_gun :
3691: LD_VAR 0 2
3695: PUSH
3696: LD_INT 2
3698: DOUBLE
3699: EQUAL
3700: IFTRUE 3704
3702: GO 3734
3704: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3705: LD_ADDR_VAR 0 3
3709: PUSH
3710: LD_INT 1
3712: PUSH
3713: LD_INT 2
3715: PUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 5
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: ST_TO_ADDR
3732: GO 4735
3734: LD_INT 3
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3742
3740: GO 3772
3742: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: LD_INT 1
3750: PUSH
3751: LD_INT 2
3753: PUSH
3754: LD_INT 3
3756: PUSH
3757: LD_INT 4
3759: PUSH
3760: LD_INT 5
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: ST_TO_ADDR
3770: GO 4735
3772: LD_INT 11
3774: DOUBLE
3775: EQUAL
3776: IFTRUE 3780
3778: GO 3810
3780: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3781: LD_ADDR_VAR 0 3
3785: PUSH
3786: LD_INT 1
3788: PUSH
3789: LD_INT 2
3791: PUSH
3792: LD_INT 3
3794: PUSH
3795: LD_INT 4
3797: PUSH
3798: LD_INT 5
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: ST_TO_ADDR
3808: GO 4735
3810: LD_INT 4
3812: DOUBLE
3813: EQUAL
3814: IFTRUE 3818
3816: GO 3844
3818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3819: LD_ADDR_VAR 0 3
3823: PUSH
3824: LD_INT 2
3826: PUSH
3827: LD_INT 3
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 5
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: ST_TO_ADDR
3842: GO 4735
3844: LD_INT 5
3846: DOUBLE
3847: EQUAL
3848: IFTRUE 3852
3850: GO 3878
3852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_INT 2
3860: PUSH
3861: LD_INT 3
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: LD_INT 5
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: ST_TO_ADDR
3876: GO 4735
3878: LD_INT 9
3880: DOUBLE
3881: EQUAL
3882: IFTRUE 3886
3884: GO 3912
3886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: LD_INT 3
3897: PUSH
3898: LD_INT 4
3900: PUSH
3901: LD_INT 5
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: ST_TO_ADDR
3910: GO 4735
3912: LD_INT 7
3914: DOUBLE
3915: EQUAL
3916: IFTRUE 3920
3918: GO 3946
3920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3921: LD_ADDR_VAR 0 3
3925: PUSH
3926: LD_INT 2
3928: PUSH
3929: LD_INT 3
3931: PUSH
3932: LD_INT 4
3934: PUSH
3935: LD_INT 5
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: ST_TO_ADDR
3944: GO 4735
3946: LD_INT 12
3948: DOUBLE
3949: EQUAL
3950: IFTRUE 3954
3952: GO 3980
3954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3955: LD_ADDR_VAR 0 3
3959: PUSH
3960: LD_INT 2
3962: PUSH
3963: LD_INT 3
3965: PUSH
3966: LD_INT 4
3968: PUSH
3969: LD_INT 5
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: ST_TO_ADDR
3978: GO 4735
3980: LD_INT 13
3982: DOUBLE
3983: EQUAL
3984: IFTRUE 3988
3986: GO 4014
3988: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3989: LD_ADDR_VAR 0 3
3993: PUSH
3994: LD_INT 2
3996: PUSH
3997: LD_INT 3
3999: PUSH
4000: LD_INT 4
4002: PUSH
4003: LD_INT 5
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: ST_TO_ADDR
4012: GO 4735
4014: LD_INT 14
4016: DOUBLE
4017: EQUAL
4018: IFTRUE 4022
4020: GO 4040
4022: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4023: LD_ADDR_VAR 0 3
4027: PUSH
4028: LD_INT 4
4030: PUSH
4031: LD_INT 5
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: ST_TO_ADDR
4038: GO 4735
4040: LD_INT 6
4042: DOUBLE
4043: EQUAL
4044: IFTRUE 4048
4046: GO 4066
4048: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4049: LD_ADDR_VAR 0 3
4053: PUSH
4054: LD_INT 4
4056: PUSH
4057: LD_INT 5
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: ST_TO_ADDR
4064: GO 4735
4066: LD_INT 10
4068: DOUBLE
4069: EQUAL
4070: IFTRUE 4074
4072: GO 4092
4074: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4075: LD_ADDR_VAR 0 3
4079: PUSH
4080: LD_INT 4
4082: PUSH
4083: LD_INT 5
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: ST_TO_ADDR
4090: GO 4735
4092: LD_INT 22
4094: DOUBLE
4095: EQUAL
4096: IFTRUE 4100
4098: GO 4126
4100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4101: LD_ADDR_VAR 0 3
4105: PUSH
4106: LD_INT 11
4108: PUSH
4109: LD_INT 12
4111: PUSH
4112: LD_INT 13
4114: PUSH
4115: LD_INT 14
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: ST_TO_ADDR
4124: GO 4735
4126: LD_INT 23
4128: DOUBLE
4129: EQUAL
4130: IFTRUE 4134
4132: GO 4160
4134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4135: LD_ADDR_VAR 0 3
4139: PUSH
4140: LD_INT 11
4142: PUSH
4143: LD_INT 12
4145: PUSH
4146: LD_INT 13
4148: PUSH
4149: LD_INT 14
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: ST_TO_ADDR
4158: GO 4735
4160: LD_INT 24
4162: DOUBLE
4163: EQUAL
4164: IFTRUE 4168
4166: GO 4194
4168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4169: LD_ADDR_VAR 0 3
4173: PUSH
4174: LD_INT 11
4176: PUSH
4177: LD_INT 12
4179: PUSH
4180: LD_INT 13
4182: PUSH
4183: LD_INT 14
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: ST_TO_ADDR
4192: GO 4735
4194: LD_INT 30
4196: DOUBLE
4197: EQUAL
4198: IFTRUE 4202
4200: GO 4228
4202: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4203: LD_ADDR_VAR 0 3
4207: PUSH
4208: LD_INT 11
4210: PUSH
4211: LD_INT 12
4213: PUSH
4214: LD_INT 13
4216: PUSH
4217: LD_INT 14
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: ST_TO_ADDR
4226: GO 4735
4228: LD_INT 25
4230: DOUBLE
4231: EQUAL
4232: IFTRUE 4236
4234: GO 4254
4236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4237: LD_ADDR_VAR 0 3
4241: PUSH
4242: LD_INT 13
4244: PUSH
4245: LD_INT 14
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: ST_TO_ADDR
4252: GO 4735
4254: LD_INT 27
4256: DOUBLE
4257: EQUAL
4258: IFTRUE 4262
4260: GO 4280
4262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4263: LD_ADDR_VAR 0 3
4267: PUSH
4268: LD_INT 13
4270: PUSH
4271: LD_INT 14
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: ST_TO_ADDR
4278: GO 4735
4280: LD_INT 92
4282: DOUBLE
4283: EQUAL
4284: IFTRUE 4288
4286: GO 4314
4288: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4289: LD_ADDR_VAR 0 3
4293: PUSH
4294: LD_INT 11
4296: PUSH
4297: LD_INT 12
4299: PUSH
4300: LD_INT 13
4302: PUSH
4303: LD_INT 14
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: ST_TO_ADDR
4312: GO 4735
4314: LD_INT 28
4316: DOUBLE
4317: EQUAL
4318: IFTRUE 4322
4320: GO 4340
4322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: LD_INT 13
4330: PUSH
4331: LD_INT 14
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: ST_TO_ADDR
4338: GO 4735
4340: LD_INT 29
4342: DOUBLE
4343: EQUAL
4344: IFTRUE 4348
4346: GO 4366
4348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4349: LD_ADDR_VAR 0 3
4353: PUSH
4354: LD_INT 13
4356: PUSH
4357: LD_INT 14
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: ST_TO_ADDR
4364: GO 4735
4366: LD_INT 31
4368: DOUBLE
4369: EQUAL
4370: IFTRUE 4374
4372: GO 4392
4374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4375: LD_ADDR_VAR 0 3
4379: PUSH
4380: LD_INT 13
4382: PUSH
4383: LD_INT 14
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: ST_TO_ADDR
4390: GO 4735
4392: LD_INT 26
4394: DOUBLE
4395: EQUAL
4396: IFTRUE 4400
4398: GO 4418
4400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4401: LD_ADDR_VAR 0 3
4405: PUSH
4406: LD_INT 13
4408: PUSH
4409: LD_INT 14
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: ST_TO_ADDR
4416: GO 4735
4418: LD_INT 42
4420: DOUBLE
4421: EQUAL
4422: IFTRUE 4426
4424: GO 4452
4426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4427: LD_ADDR_VAR 0 3
4431: PUSH
4432: LD_INT 21
4434: PUSH
4435: LD_INT 22
4437: PUSH
4438: LD_INT 23
4440: PUSH
4441: LD_INT 24
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: ST_TO_ADDR
4450: GO 4735
4452: LD_INT 43
4454: DOUBLE
4455: EQUAL
4456: IFTRUE 4460
4458: GO 4486
4460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4461: LD_ADDR_VAR 0 3
4465: PUSH
4466: LD_INT 21
4468: PUSH
4469: LD_INT 22
4471: PUSH
4472: LD_INT 23
4474: PUSH
4475: LD_INT 24
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: ST_TO_ADDR
4484: GO 4735
4486: LD_INT 44
4488: DOUBLE
4489: EQUAL
4490: IFTRUE 4494
4492: GO 4520
4494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4495: LD_ADDR_VAR 0 3
4499: PUSH
4500: LD_INT 21
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 23
4508: PUSH
4509: LD_INT 24
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: ST_TO_ADDR
4518: GO 4735
4520: LD_INT 45
4522: DOUBLE
4523: EQUAL
4524: IFTRUE 4528
4526: GO 4554
4528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: LD_INT 21
4536: PUSH
4537: LD_INT 22
4539: PUSH
4540: LD_INT 23
4542: PUSH
4543: LD_INT 24
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: ST_TO_ADDR
4552: GO 4735
4554: LD_INT 49
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4588
4562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4563: LD_ADDR_VAR 0 3
4567: PUSH
4568: LD_INT 21
4570: PUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 23
4576: PUSH
4577: LD_INT 24
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: ST_TO_ADDR
4586: GO 4735
4588: LD_INT 51
4590: DOUBLE
4591: EQUAL
4592: IFTRUE 4596
4594: GO 4622
4596: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4597: LD_ADDR_VAR 0 3
4601: PUSH
4602: LD_INT 21
4604: PUSH
4605: LD_INT 22
4607: PUSH
4608: LD_INT 23
4610: PUSH
4611: LD_INT 24
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: ST_TO_ADDR
4620: GO 4735
4622: LD_INT 52
4624: DOUBLE
4625: EQUAL
4626: IFTRUE 4630
4628: GO 4656
4630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4631: LD_ADDR_VAR 0 3
4635: PUSH
4636: LD_INT 21
4638: PUSH
4639: LD_INT 22
4641: PUSH
4642: LD_INT 23
4644: PUSH
4645: LD_INT 24
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: ST_TO_ADDR
4654: GO 4735
4656: LD_INT 53
4658: DOUBLE
4659: EQUAL
4660: IFTRUE 4664
4662: GO 4682
4664: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: LD_INT 23
4672: PUSH
4673: LD_INT 24
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: ST_TO_ADDR
4680: GO 4735
4682: LD_INT 46
4684: DOUBLE
4685: EQUAL
4686: IFTRUE 4690
4688: GO 4708
4690: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4691: LD_ADDR_VAR 0 3
4695: PUSH
4696: LD_INT 23
4698: PUSH
4699: LD_INT 24
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: ST_TO_ADDR
4706: GO 4735
4708: LD_INT 47
4710: DOUBLE
4711: EQUAL
4712: IFTRUE 4716
4714: GO 4734
4716: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4717: LD_ADDR_VAR 0 3
4721: PUSH
4722: LD_INT 23
4724: PUSH
4725: LD_INT 24
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: ST_TO_ADDR
4732: GO 4735
4734: POP
// result := ( chassis in result ) ;
4735: LD_ADDR_VAR 0 3
4739: PUSH
4740: LD_VAR 0 1
4744: PUSH
4745: LD_VAR 0 3
4749: IN
4750: ST_TO_ADDR
// end ;
4751: LD_VAR 0 3
4755: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4756: LD_INT 0
4758: PPUSH
4759: PPUSH
4760: PPUSH
4761: PPUSH
4762: PPUSH
4763: PPUSH
4764: PPUSH
// result := array ;
4765: LD_ADDR_VAR 0 5
4769: PUSH
4770: LD_VAR 0 1
4774: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4775: LD_VAR 0 1
4779: NOT
4780: PUSH
4781: LD_VAR 0 2
4785: NOT
4786: OR
4787: PUSH
4788: LD_VAR 0 3
4792: NOT
4793: OR
4794: PUSH
4795: LD_VAR 0 2
4799: PUSH
4800: LD_VAR 0 1
4804: GREATER
4805: OR
4806: PUSH
4807: LD_VAR 0 3
4811: PUSH
4812: LD_VAR 0 1
4816: GREATER
4817: OR
4818: IFFALSE 4822
// exit ;
4820: GO 5118
// if direction then
4822: LD_VAR 0 4
4826: IFFALSE 4890
// begin d := 1 ;
4828: LD_ADDR_VAR 0 9
4832: PUSH
4833: LD_INT 1
4835: ST_TO_ADDR
// if i_from > i_to then
4836: LD_VAR 0 2
4840: PUSH
4841: LD_VAR 0 3
4845: GREATER
4846: IFFALSE 4872
// length := ( array - i_from ) + i_to else
4848: LD_ADDR_VAR 0 11
4852: PUSH
4853: LD_VAR 0 1
4857: PUSH
4858: LD_VAR 0 2
4862: MINUS
4863: PUSH
4864: LD_VAR 0 3
4868: PLUS
4869: ST_TO_ADDR
4870: GO 4888
// length := i_to - i_from ;
4872: LD_ADDR_VAR 0 11
4876: PUSH
4877: LD_VAR 0 3
4881: PUSH
4882: LD_VAR 0 2
4886: MINUS
4887: ST_TO_ADDR
// end else
4888: GO 4951
// begin d := - 1 ;
4890: LD_ADDR_VAR 0 9
4894: PUSH
4895: LD_INT 1
4897: NEG
4898: ST_TO_ADDR
// if i_from > i_to then
4899: LD_VAR 0 2
4903: PUSH
4904: LD_VAR 0 3
4908: GREATER
4909: IFFALSE 4929
// length := i_from - i_to else
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_VAR 0 2
4920: PUSH
4921: LD_VAR 0 3
4925: MINUS
4926: ST_TO_ADDR
4927: GO 4951
// length := ( array - i_to ) + i_from ;
4929: LD_ADDR_VAR 0 11
4933: PUSH
4934: LD_VAR 0 1
4938: PUSH
4939: LD_VAR 0 3
4943: MINUS
4944: PUSH
4945: LD_VAR 0 2
4949: PLUS
4950: ST_TO_ADDR
// end ; if not length then
4951: LD_VAR 0 11
4955: NOT
4956: IFFALSE 4960
// exit ;
4958: GO 5118
// tmp := array ;
4960: LD_ADDR_VAR 0 10
4964: PUSH
4965: LD_VAR 0 1
4969: ST_TO_ADDR
// for i = 1 to length do
4970: LD_ADDR_VAR 0 6
4974: PUSH
4975: DOUBLE
4976: LD_INT 1
4978: DEC
4979: ST_TO_ADDR
4980: LD_VAR 0 11
4984: PUSH
4985: FOR_TO
4986: IFFALSE 5106
// begin for j = 1 to array do
4988: LD_ADDR_VAR 0 7
4992: PUSH
4993: DOUBLE
4994: LD_INT 1
4996: DEC
4997: ST_TO_ADDR
4998: LD_VAR 0 1
5002: PUSH
5003: FOR_TO
5004: IFFALSE 5092
// begin k := j + d ;
5006: LD_ADDR_VAR 0 8
5010: PUSH
5011: LD_VAR 0 7
5015: PUSH
5016: LD_VAR 0 9
5020: PLUS
5021: ST_TO_ADDR
// if k > array then
5022: LD_VAR 0 8
5026: PUSH
5027: LD_VAR 0 1
5031: GREATER
5032: IFFALSE 5042
// k := 1 ;
5034: LD_ADDR_VAR 0 8
5038: PUSH
5039: LD_INT 1
5041: ST_TO_ADDR
// if not k then
5042: LD_VAR 0 8
5046: NOT
5047: IFFALSE 5059
// k := array ;
5049: LD_ADDR_VAR 0 8
5053: PUSH
5054: LD_VAR 0 1
5058: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5059: LD_ADDR_VAR 0 10
5063: PUSH
5064: LD_VAR 0 10
5068: PPUSH
5069: LD_VAR 0 8
5073: PPUSH
5074: LD_VAR 0 1
5078: PUSH
5079: LD_VAR 0 7
5083: ARRAY
5084: PPUSH
5085: CALL_OW 1
5089: ST_TO_ADDR
// end ;
5090: GO 5003
5092: POP
5093: POP
// array := tmp ;
5094: LD_ADDR_VAR 0 1
5098: PUSH
5099: LD_VAR 0 10
5103: ST_TO_ADDR
// end ;
5104: GO 4985
5106: POP
5107: POP
// result := array ;
5108: LD_ADDR_VAR 0 5
5112: PUSH
5113: LD_VAR 0 1
5117: ST_TO_ADDR
// end ;
5118: LD_VAR 0 5
5122: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5123: LD_INT 0
5125: PPUSH
5126: PPUSH
// result := 0 ;
5127: LD_ADDR_VAR 0 3
5131: PUSH
5132: LD_INT 0
5134: ST_TO_ADDR
// if not array or not value in array then
5135: LD_VAR 0 1
5139: NOT
5140: PUSH
5141: LD_VAR 0 2
5145: PUSH
5146: LD_VAR 0 1
5150: IN
5151: NOT
5152: OR
5153: IFFALSE 5157
// exit ;
5155: GO 5211
// for i = 1 to array do
5157: LD_ADDR_VAR 0 4
5161: PUSH
5162: DOUBLE
5163: LD_INT 1
5165: DEC
5166: ST_TO_ADDR
5167: LD_VAR 0 1
5171: PUSH
5172: FOR_TO
5173: IFFALSE 5209
// if value = array [ i ] then
5175: LD_VAR 0 2
5179: PUSH
5180: LD_VAR 0 1
5184: PUSH
5185: LD_VAR 0 4
5189: ARRAY
5190: EQUAL
5191: IFFALSE 5207
// begin result := i ;
5193: LD_ADDR_VAR 0 3
5197: PUSH
5198: LD_VAR 0 4
5202: ST_TO_ADDR
// exit ;
5203: POP
5204: POP
5205: GO 5211
// end ;
5207: GO 5172
5209: POP
5210: POP
// end ;
5211: LD_VAR 0 3
5215: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5216: LD_INT 0
5218: PPUSH
// vc_chassis := chassis ;
5219: LD_ADDR_OWVAR 37
5223: PUSH
5224: LD_VAR 0 1
5228: ST_TO_ADDR
// vc_engine := engine ;
5229: LD_ADDR_OWVAR 39
5233: PUSH
5234: LD_VAR 0 2
5238: ST_TO_ADDR
// vc_control := control ;
5239: LD_ADDR_OWVAR 38
5243: PUSH
5244: LD_VAR 0 3
5248: ST_TO_ADDR
// vc_weapon := weapon ;
5249: LD_ADDR_OWVAR 40
5253: PUSH
5254: LD_VAR 0 4
5258: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5259: LD_ADDR_OWVAR 41
5263: PUSH
5264: LD_VAR 0 5
5268: ST_TO_ADDR
// end ;
5269: LD_VAR 0 6
5273: RET
// export function WantPlant ( unit ) ; var task ; begin
5274: LD_INT 0
5276: PPUSH
5277: PPUSH
// result := false ;
5278: LD_ADDR_VAR 0 2
5282: PUSH
5283: LD_INT 0
5285: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_VAR 0 1
5295: PPUSH
5296: CALL_OW 437
5300: ST_TO_ADDR
// if task then
5301: LD_VAR 0 3
5305: IFFALSE 5333
// if task [ 1 ] [ 1 ] = p then
5307: LD_VAR 0 3
5311: PUSH
5312: LD_INT 1
5314: ARRAY
5315: PUSH
5316: LD_INT 1
5318: ARRAY
5319: PUSH
5320: LD_STRING p
5322: EQUAL
5323: IFFALSE 5333
// result := true ;
5325: LD_ADDR_VAR 0 2
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// end ;
5333: LD_VAR 0 2
5337: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5338: LD_INT 0
5340: PPUSH
5341: PPUSH
5342: PPUSH
5343: PPUSH
// if pos < 1 then
5344: LD_VAR 0 2
5348: PUSH
5349: LD_INT 1
5351: LESS
5352: IFFALSE 5356
// exit ;
5354: GO 5659
// if pos = 1 then
5356: LD_VAR 0 2
5360: PUSH
5361: LD_INT 1
5363: EQUAL
5364: IFFALSE 5397
// result := Replace ( arr , pos [ 1 ] , value ) else
5366: LD_ADDR_VAR 0 4
5370: PUSH
5371: LD_VAR 0 1
5375: PPUSH
5376: LD_VAR 0 2
5380: PUSH
5381: LD_INT 1
5383: ARRAY
5384: PPUSH
5385: LD_VAR 0 3
5389: PPUSH
5390: CALL_OW 1
5394: ST_TO_ADDR
5395: GO 5659
// begin tmp := arr ;
5397: LD_ADDR_VAR 0 6
5401: PUSH
5402: LD_VAR 0 1
5406: ST_TO_ADDR
// s_arr := [ tmp ] ;
5407: LD_ADDR_VAR 0 7
5411: PUSH
5412: LD_VAR 0 6
5416: PUSH
5417: EMPTY
5418: LIST
5419: ST_TO_ADDR
// for i = 1 to pos - 1 do
5420: LD_ADDR_VAR 0 5
5424: PUSH
5425: DOUBLE
5426: LD_INT 1
5428: DEC
5429: ST_TO_ADDR
5430: LD_VAR 0 2
5434: PUSH
5435: LD_INT 1
5437: MINUS
5438: PUSH
5439: FOR_TO
5440: IFFALSE 5485
// begin tmp := tmp [ pos [ i ] ] ;
5442: LD_ADDR_VAR 0 6
5446: PUSH
5447: LD_VAR 0 6
5451: PUSH
5452: LD_VAR 0 2
5456: PUSH
5457: LD_VAR 0 5
5461: ARRAY
5462: ARRAY
5463: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5464: LD_ADDR_VAR 0 7
5468: PUSH
5469: LD_VAR 0 7
5473: PUSH
5474: LD_VAR 0 6
5478: PUSH
5479: EMPTY
5480: LIST
5481: ADD
5482: ST_TO_ADDR
// end ;
5483: GO 5439
5485: POP
5486: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5487: LD_ADDR_VAR 0 6
5491: PUSH
5492: LD_VAR 0 6
5496: PPUSH
5497: LD_VAR 0 2
5501: PUSH
5502: LD_VAR 0 2
5506: ARRAY
5507: PPUSH
5508: LD_VAR 0 3
5512: PPUSH
5513: CALL_OW 1
5517: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5518: LD_ADDR_VAR 0 7
5522: PUSH
5523: LD_VAR 0 7
5527: PPUSH
5528: LD_VAR 0 7
5532: PPUSH
5533: LD_VAR 0 6
5537: PPUSH
5538: CALL_OW 1
5542: ST_TO_ADDR
// for i = s_arr downto 2 do
5543: LD_ADDR_VAR 0 5
5547: PUSH
5548: DOUBLE
5549: LD_VAR 0 7
5553: INC
5554: ST_TO_ADDR
5555: LD_INT 2
5557: PUSH
5558: FOR_DOWNTO
5559: IFFALSE 5643
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5561: LD_ADDR_VAR 0 6
5565: PUSH
5566: LD_VAR 0 7
5570: PUSH
5571: LD_VAR 0 5
5575: PUSH
5576: LD_INT 1
5578: MINUS
5579: ARRAY
5580: PPUSH
5581: LD_VAR 0 2
5585: PUSH
5586: LD_VAR 0 5
5590: PUSH
5591: LD_INT 1
5593: MINUS
5594: ARRAY
5595: PPUSH
5596: LD_VAR 0 7
5600: PUSH
5601: LD_VAR 0 5
5605: ARRAY
5606: PPUSH
5607: CALL_OW 1
5611: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5612: LD_ADDR_VAR 0 7
5616: PUSH
5617: LD_VAR 0 7
5621: PPUSH
5622: LD_VAR 0 5
5626: PUSH
5627: LD_INT 1
5629: MINUS
5630: PPUSH
5631: LD_VAR 0 6
5635: PPUSH
5636: CALL_OW 1
5640: ST_TO_ADDR
// end ;
5641: GO 5558
5643: POP
5644: POP
// result := s_arr [ 1 ] ;
5645: LD_ADDR_VAR 0 4
5649: PUSH
5650: LD_VAR 0 7
5654: PUSH
5655: LD_INT 1
5657: ARRAY
5658: ST_TO_ADDR
// end ; end ;
5659: LD_VAR 0 4
5663: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5664: LD_INT 0
5666: PPUSH
5667: PPUSH
// if not list then
5668: LD_VAR 0 1
5672: NOT
5673: IFFALSE 5677
// exit ;
5675: GO 5768
// i := list [ pos1 ] ;
5677: LD_ADDR_VAR 0 5
5681: PUSH
5682: LD_VAR 0 1
5686: PUSH
5687: LD_VAR 0 2
5691: ARRAY
5692: ST_TO_ADDR
// if not i then
5693: LD_VAR 0 5
5697: NOT
5698: IFFALSE 5702
// exit ;
5700: GO 5768
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5702: LD_ADDR_VAR 0 1
5706: PUSH
5707: LD_VAR 0 1
5711: PPUSH
5712: LD_VAR 0 2
5716: PPUSH
5717: LD_VAR 0 1
5721: PUSH
5722: LD_VAR 0 3
5726: ARRAY
5727: PPUSH
5728: CALL_OW 1
5732: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5733: LD_ADDR_VAR 0 1
5737: PUSH
5738: LD_VAR 0 1
5742: PPUSH
5743: LD_VAR 0 3
5747: PPUSH
5748: LD_VAR 0 5
5752: PPUSH
5753: CALL_OW 1
5757: ST_TO_ADDR
// result := list ;
5758: LD_ADDR_VAR 0 4
5762: PUSH
5763: LD_VAR 0 1
5767: ST_TO_ADDR
// end ;
5768: LD_VAR 0 4
5772: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5773: LD_INT 0
5775: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5776: LD_ADDR_VAR 0 5
5780: PUSH
5781: LD_VAR 0 1
5785: PPUSH
5786: CALL_OW 250
5790: PPUSH
5791: LD_VAR 0 1
5795: PPUSH
5796: CALL_OW 251
5800: PPUSH
5801: LD_VAR 0 2
5805: PPUSH
5806: LD_VAR 0 3
5810: PPUSH
5811: LD_VAR 0 4
5815: PPUSH
5816: CALL 5826 0 5
5820: ST_TO_ADDR
// end ;
5821: LD_VAR 0 5
5825: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5826: LD_INT 0
5828: PPUSH
5829: PPUSH
5830: PPUSH
5831: PPUSH
// if not list then
5832: LD_VAR 0 3
5836: NOT
5837: IFFALSE 5841
// exit ;
5839: GO 6229
// result := [ ] ;
5841: LD_ADDR_VAR 0 6
5845: PUSH
5846: EMPTY
5847: ST_TO_ADDR
// for i in list do
5848: LD_ADDR_VAR 0 7
5852: PUSH
5853: LD_VAR 0 3
5857: PUSH
5858: FOR_IN
5859: IFFALSE 6061
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5861: LD_ADDR_VAR 0 9
5865: PUSH
5866: LD_VAR 0 7
5870: PPUSH
5871: LD_VAR 0 1
5875: PPUSH
5876: LD_VAR 0 2
5880: PPUSH
5881: CALL_OW 297
5885: ST_TO_ADDR
// if not result then
5886: LD_VAR 0 6
5890: NOT
5891: IFFALSE 5917
// result := [ [ i , tmp ] ] else
5893: LD_ADDR_VAR 0 6
5897: PUSH
5898: LD_VAR 0 7
5902: PUSH
5903: LD_VAR 0 9
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: EMPTY
5913: LIST
5914: ST_TO_ADDR
5915: GO 6059
// begin if result [ result ] [ 2 ] < tmp then
5917: LD_VAR 0 6
5921: PUSH
5922: LD_VAR 0 6
5926: ARRAY
5927: PUSH
5928: LD_INT 2
5930: ARRAY
5931: PUSH
5932: LD_VAR 0 9
5936: LESS
5937: IFFALSE 5979
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5939: LD_ADDR_VAR 0 6
5943: PUSH
5944: LD_VAR 0 6
5948: PPUSH
5949: LD_VAR 0 6
5953: PUSH
5954: LD_INT 1
5956: PLUS
5957: PPUSH
5958: LD_VAR 0 7
5962: PUSH
5963: LD_VAR 0 9
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PPUSH
5972: CALL_OW 2
5976: ST_TO_ADDR
5977: GO 6059
// for j = 1 to result do
5979: LD_ADDR_VAR 0 8
5983: PUSH
5984: DOUBLE
5985: LD_INT 1
5987: DEC
5988: ST_TO_ADDR
5989: LD_VAR 0 6
5993: PUSH
5994: FOR_TO
5995: IFFALSE 6057
// begin if tmp < result [ j ] [ 2 ] then
5997: LD_VAR 0 9
6001: PUSH
6002: LD_VAR 0 6
6006: PUSH
6007: LD_VAR 0 8
6011: ARRAY
6012: PUSH
6013: LD_INT 2
6015: ARRAY
6016: LESS
6017: IFFALSE 6055
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6019: LD_ADDR_VAR 0 6
6023: PUSH
6024: LD_VAR 0 6
6028: PPUSH
6029: LD_VAR 0 8
6033: PPUSH
6034: LD_VAR 0 7
6038: PUSH
6039: LD_VAR 0 9
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PPUSH
6048: CALL_OW 2
6052: ST_TO_ADDR
// break ;
6053: GO 6057
// end ; end ;
6055: GO 5994
6057: POP
6058: POP
// end ; end ;
6059: GO 5858
6061: POP
6062: POP
// if result and not asc then
6063: LD_VAR 0 6
6067: PUSH
6068: LD_VAR 0 4
6072: NOT
6073: AND
6074: IFFALSE 6149
// begin tmp := result ;
6076: LD_ADDR_VAR 0 9
6080: PUSH
6081: LD_VAR 0 6
6085: ST_TO_ADDR
// for i = tmp downto 1 do
6086: LD_ADDR_VAR 0 7
6090: PUSH
6091: DOUBLE
6092: LD_VAR 0 9
6096: INC
6097: ST_TO_ADDR
6098: LD_INT 1
6100: PUSH
6101: FOR_DOWNTO
6102: IFFALSE 6147
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6104: LD_ADDR_VAR 0 6
6108: PUSH
6109: LD_VAR 0 6
6113: PPUSH
6114: LD_VAR 0 9
6118: PUSH
6119: LD_VAR 0 7
6123: MINUS
6124: PUSH
6125: LD_INT 1
6127: PLUS
6128: PPUSH
6129: LD_VAR 0 9
6133: PUSH
6134: LD_VAR 0 7
6138: ARRAY
6139: PPUSH
6140: CALL_OW 1
6144: ST_TO_ADDR
6145: GO 6101
6147: POP
6148: POP
// end ; tmp := [ ] ;
6149: LD_ADDR_VAR 0 9
6153: PUSH
6154: EMPTY
6155: ST_TO_ADDR
// if mode then
6156: LD_VAR 0 5
6160: IFFALSE 6229
// begin for i = 1 to result do
6162: LD_ADDR_VAR 0 7
6166: PUSH
6167: DOUBLE
6168: LD_INT 1
6170: DEC
6171: ST_TO_ADDR
6172: LD_VAR 0 6
6176: PUSH
6177: FOR_TO
6178: IFFALSE 6217
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6180: LD_ADDR_VAR 0 9
6184: PUSH
6185: LD_VAR 0 9
6189: PPUSH
6190: LD_VAR 0 7
6194: PPUSH
6195: LD_VAR 0 6
6199: PUSH
6200: LD_VAR 0 7
6204: ARRAY
6205: PUSH
6206: LD_INT 1
6208: ARRAY
6209: PPUSH
6210: CALL_OW 1
6214: ST_TO_ADDR
6215: GO 6177
6217: POP
6218: POP
// result := tmp ;
6219: LD_ADDR_VAR 0 6
6223: PUSH
6224: LD_VAR 0 9
6228: ST_TO_ADDR
// end ; end ;
6229: LD_VAR 0 6
6233: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6234: LD_INT 0
6236: PPUSH
6237: PPUSH
6238: PPUSH
6239: PPUSH
6240: PPUSH
6241: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6242: LD_ADDR_VAR 0 5
6246: PUSH
6247: LD_INT 0
6249: PUSH
6250: LD_INT 0
6252: PUSH
6253: LD_INT 0
6255: PUSH
6256: EMPTY
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: ST_TO_ADDR
// if not x or not y then
6264: LD_VAR 0 2
6268: NOT
6269: PUSH
6270: LD_VAR 0 3
6274: NOT
6275: OR
6276: IFFALSE 6280
// exit ;
6278: GO 7930
// if not range then
6280: LD_VAR 0 4
6284: NOT
6285: IFFALSE 6295
// range := 10 ;
6287: LD_ADDR_VAR 0 4
6291: PUSH
6292: LD_INT 10
6294: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6295: LD_ADDR_VAR 0 8
6299: PUSH
6300: LD_INT 81
6302: PUSH
6303: LD_VAR 0 1
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: LD_INT 92
6314: PUSH
6315: LD_VAR 0 2
6319: PUSH
6320: LD_VAR 0 3
6324: PUSH
6325: LD_VAR 0 4
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 3
6338: PUSH
6339: LD_INT 21
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: PPUSH
6358: CALL_OW 69
6362: ST_TO_ADDR
// if not tmp then
6363: LD_VAR 0 8
6367: NOT
6368: IFFALSE 6372
// exit ;
6370: GO 7930
// for i in tmp do
6372: LD_ADDR_VAR 0 6
6376: PUSH
6377: LD_VAR 0 8
6381: PUSH
6382: FOR_IN
6383: IFFALSE 7905
// begin points := [ 0 , 0 , 0 ] ;
6385: LD_ADDR_VAR 0 9
6389: PUSH
6390: LD_INT 0
6392: PUSH
6393: LD_INT 0
6395: PUSH
6396: LD_INT 0
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: ST_TO_ADDR
// bpoints := 1 ;
6404: LD_ADDR_VAR 0 10
6408: PUSH
6409: LD_INT 1
6411: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6412: LD_VAR 0 6
6416: PPUSH
6417: CALL_OW 247
6421: PUSH
6422: LD_INT 1
6424: DOUBLE
6425: EQUAL
6426: IFTRUE 6430
6428: GO 7008
6430: POP
// begin if GetClass ( i ) = 1 then
6431: LD_VAR 0 6
6435: PPUSH
6436: CALL_OW 257
6440: PUSH
6441: LD_INT 1
6443: EQUAL
6444: IFFALSE 6465
// points := [ 10 , 5 , 3 ] ;
6446: LD_ADDR_VAR 0 9
6450: PUSH
6451: LD_INT 10
6453: PUSH
6454: LD_INT 5
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: LIST
6464: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6465: LD_VAR 0 6
6469: PPUSH
6470: CALL_OW 257
6474: PUSH
6475: LD_INT 2
6477: PUSH
6478: LD_INT 3
6480: PUSH
6481: LD_INT 4
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: LIST
6488: IN
6489: IFFALSE 6510
// points := [ 3 , 2 , 1 ] ;
6491: LD_ADDR_VAR 0 9
6495: PUSH
6496: LD_INT 3
6498: PUSH
6499: LD_INT 2
6501: PUSH
6502: LD_INT 1
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6510: LD_VAR 0 6
6514: PPUSH
6515: CALL_OW 257
6519: PUSH
6520: LD_INT 5
6522: EQUAL
6523: IFFALSE 6544
// points := [ 130 , 5 , 2 ] ;
6525: LD_ADDR_VAR 0 9
6529: PUSH
6530: LD_INT 130
6532: PUSH
6533: LD_INT 5
6535: PUSH
6536: LD_INT 2
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6544: LD_VAR 0 6
6548: PPUSH
6549: CALL_OW 257
6553: PUSH
6554: LD_INT 8
6556: EQUAL
6557: IFFALSE 6578
// points := [ 35 , 35 , 30 ] ;
6559: LD_ADDR_VAR 0 9
6563: PUSH
6564: LD_INT 35
6566: PUSH
6567: LD_INT 35
6569: PUSH
6570: LD_INT 30
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6578: LD_VAR 0 6
6582: PPUSH
6583: CALL_OW 257
6587: PUSH
6588: LD_INT 9
6590: EQUAL
6591: IFFALSE 6612
// points := [ 20 , 55 , 40 ] ;
6593: LD_ADDR_VAR 0 9
6597: PUSH
6598: LD_INT 20
6600: PUSH
6601: LD_INT 55
6603: PUSH
6604: LD_INT 40
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: LIST
6611: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6612: LD_VAR 0 6
6616: PPUSH
6617: CALL_OW 257
6621: PUSH
6622: LD_INT 12
6624: PUSH
6625: LD_INT 16
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: IN
6632: IFFALSE 6653
// points := [ 5 , 3 , 2 ] ;
6634: LD_ADDR_VAR 0 9
6638: PUSH
6639: LD_INT 5
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 2
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6653: LD_VAR 0 6
6657: PPUSH
6658: CALL_OW 257
6662: PUSH
6663: LD_INT 17
6665: EQUAL
6666: IFFALSE 6687
// points := [ 100 , 50 , 75 ] ;
6668: LD_ADDR_VAR 0 9
6672: PUSH
6673: LD_INT 100
6675: PUSH
6676: LD_INT 50
6678: PUSH
6679: LD_INT 75
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: LIST
6686: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6687: LD_VAR 0 6
6691: PPUSH
6692: CALL_OW 257
6696: PUSH
6697: LD_INT 15
6699: EQUAL
6700: IFFALSE 6721
// points := [ 10 , 5 , 3 ] ;
6702: LD_ADDR_VAR 0 9
6706: PUSH
6707: LD_INT 10
6709: PUSH
6710: LD_INT 5
6712: PUSH
6713: LD_INT 3
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6721: LD_VAR 0 6
6725: PPUSH
6726: CALL_OW 257
6730: PUSH
6731: LD_INT 14
6733: EQUAL
6734: IFFALSE 6755
// points := [ 10 , 0 , 0 ] ;
6736: LD_ADDR_VAR 0 9
6740: PUSH
6741: LD_INT 10
6743: PUSH
6744: LD_INT 0
6746: PUSH
6747: LD_INT 0
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: LIST
6754: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6755: LD_VAR 0 6
6759: PPUSH
6760: CALL_OW 257
6764: PUSH
6765: LD_INT 11
6767: EQUAL
6768: IFFALSE 6789
// points := [ 30 , 10 , 5 ] ;
6770: LD_ADDR_VAR 0 9
6774: PUSH
6775: LD_INT 30
6777: PUSH
6778: LD_INT 10
6780: PUSH
6781: LD_INT 5
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: LIST
6788: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6789: LD_VAR 0 1
6793: PPUSH
6794: LD_INT 5
6796: PPUSH
6797: CALL_OW 321
6801: PUSH
6802: LD_INT 2
6804: EQUAL
6805: IFFALSE 6822
// bpoints := bpoints * 1.8 ;
6807: LD_ADDR_VAR 0 10
6811: PUSH
6812: LD_VAR 0 10
6816: PUSH
6817: LD_REAL  1.80000000000000E+0000
6820: MUL
6821: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6822: LD_VAR 0 6
6826: PPUSH
6827: CALL_OW 257
6831: PUSH
6832: LD_INT 1
6834: PUSH
6835: LD_INT 2
6837: PUSH
6838: LD_INT 3
6840: PUSH
6841: LD_INT 4
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: IN
6850: PUSH
6851: LD_VAR 0 1
6855: PPUSH
6856: LD_INT 51
6858: PPUSH
6859: CALL_OW 321
6863: PUSH
6864: LD_INT 2
6866: EQUAL
6867: AND
6868: IFFALSE 6885
// bpoints := bpoints * 1.2 ;
6870: LD_ADDR_VAR 0 10
6874: PUSH
6875: LD_VAR 0 10
6879: PUSH
6880: LD_REAL  1.20000000000000E+0000
6883: MUL
6884: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6885: LD_VAR 0 6
6889: PPUSH
6890: CALL_OW 257
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 7
6900: PUSH
6901: LD_INT 9
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: IN
6909: PUSH
6910: LD_VAR 0 1
6914: PPUSH
6915: LD_INT 52
6917: PPUSH
6918: CALL_OW 321
6922: PUSH
6923: LD_INT 2
6925: EQUAL
6926: AND
6927: IFFALSE 6944
// bpoints := bpoints * 1.5 ;
6929: LD_ADDR_VAR 0 10
6933: PUSH
6934: LD_VAR 0 10
6938: PUSH
6939: LD_REAL  1.50000000000000E+0000
6942: MUL
6943: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6944: LD_VAR 0 1
6948: PPUSH
6949: LD_INT 66
6951: PPUSH
6952: CALL_OW 321
6956: PUSH
6957: LD_INT 2
6959: EQUAL
6960: IFFALSE 6977
// bpoints := bpoints * 1.1 ;
6962: LD_ADDR_VAR 0 10
6966: PUSH
6967: LD_VAR 0 10
6971: PUSH
6972: LD_REAL  1.10000000000000E+0000
6975: MUL
6976: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6977: LD_ADDR_VAR 0 10
6981: PUSH
6982: LD_VAR 0 10
6986: PUSH
6987: LD_VAR 0 6
6991: PPUSH
6992: LD_INT 1
6994: PPUSH
6995: CALL_OW 259
6999: PUSH
7000: LD_REAL  1.15000000000000E+0000
7003: MUL
7004: MUL
7005: ST_TO_ADDR
// end ; unit_vehicle :
7006: GO 7834
7008: LD_INT 2
7010: DOUBLE
7011: EQUAL
7012: IFTRUE 7016
7014: GO 7822
7016: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7017: LD_VAR 0 6
7021: PPUSH
7022: CALL_OW 264
7026: PUSH
7027: LD_INT 2
7029: PUSH
7030: LD_INT 42
7032: PUSH
7033: LD_INT 24
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: IN
7041: IFFALSE 7062
// points := [ 25 , 5 , 3 ] ;
7043: LD_ADDR_VAR 0 9
7047: PUSH
7048: LD_INT 25
7050: PUSH
7051: LD_INT 5
7053: PUSH
7054: LD_INT 3
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7062: LD_VAR 0 6
7066: PPUSH
7067: CALL_OW 264
7071: PUSH
7072: LD_INT 4
7074: PUSH
7075: LD_INT 43
7077: PUSH
7078: LD_INT 25
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: IN
7086: IFFALSE 7107
// points := [ 40 , 15 , 5 ] ;
7088: LD_ADDR_VAR 0 9
7092: PUSH
7093: LD_INT 40
7095: PUSH
7096: LD_INT 15
7098: PUSH
7099: LD_INT 5
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7107: LD_VAR 0 6
7111: PPUSH
7112: CALL_OW 264
7116: PUSH
7117: LD_INT 3
7119: PUSH
7120: LD_INT 23
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: IN
7127: IFFALSE 7148
// points := [ 7 , 25 , 8 ] ;
7129: LD_ADDR_VAR 0 9
7133: PUSH
7134: LD_INT 7
7136: PUSH
7137: LD_INT 25
7139: PUSH
7140: LD_INT 8
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7148: LD_VAR 0 6
7152: PPUSH
7153: CALL_OW 264
7157: PUSH
7158: LD_INT 5
7160: PUSH
7161: LD_INT 27
7163: PUSH
7164: LD_INT 44
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: IN
7172: IFFALSE 7193
// points := [ 14 , 50 , 16 ] ;
7174: LD_ADDR_VAR 0 9
7178: PUSH
7179: LD_INT 14
7181: PUSH
7182: LD_INT 50
7184: PUSH
7185: LD_INT 16
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7193: LD_VAR 0 6
7197: PPUSH
7198: CALL_OW 264
7202: PUSH
7203: LD_INT 6
7205: PUSH
7206: LD_INT 46
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: IN
7213: IFFALSE 7234
// points := [ 32 , 120 , 70 ] ;
7215: LD_ADDR_VAR 0 9
7219: PUSH
7220: LD_INT 32
7222: PUSH
7223: LD_INT 120
7225: PUSH
7226: LD_INT 70
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: LIST
7233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7234: LD_VAR 0 6
7238: PPUSH
7239: CALL_OW 264
7243: PUSH
7244: LD_INT 7
7246: PUSH
7247: LD_INT 28
7249: PUSH
7250: LD_INT 45
7252: PUSH
7253: LD_INT 92
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: IN
7262: IFFALSE 7283
// points := [ 35 , 20 , 45 ] ;
7264: LD_ADDR_VAR 0 9
7268: PUSH
7269: LD_INT 35
7271: PUSH
7272: LD_INT 20
7274: PUSH
7275: LD_INT 45
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: LIST
7282: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7283: LD_VAR 0 6
7287: PPUSH
7288: CALL_OW 264
7292: PUSH
7293: LD_INT 47
7295: PUSH
7296: EMPTY
7297: LIST
7298: IN
7299: IFFALSE 7320
// points := [ 67 , 45 , 75 ] ;
7301: LD_ADDR_VAR 0 9
7305: PUSH
7306: LD_INT 67
7308: PUSH
7309: LD_INT 45
7311: PUSH
7312: LD_INT 75
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7320: LD_VAR 0 6
7324: PPUSH
7325: CALL_OW 264
7329: PUSH
7330: LD_INT 26
7332: PUSH
7333: EMPTY
7334: LIST
7335: IN
7336: IFFALSE 7357
// points := [ 120 , 30 , 80 ] ;
7338: LD_ADDR_VAR 0 9
7342: PUSH
7343: LD_INT 120
7345: PUSH
7346: LD_INT 30
7348: PUSH
7349: LD_INT 80
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: LIST
7356: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7357: LD_VAR 0 6
7361: PPUSH
7362: CALL_OW 264
7366: PUSH
7367: LD_INT 22
7369: PUSH
7370: EMPTY
7371: LIST
7372: IN
7373: IFFALSE 7394
// points := [ 40 , 1 , 1 ] ;
7375: LD_ADDR_VAR 0 9
7379: PUSH
7380: LD_INT 40
7382: PUSH
7383: LD_INT 1
7385: PUSH
7386: LD_INT 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7394: LD_VAR 0 6
7398: PPUSH
7399: CALL_OW 264
7403: PUSH
7404: LD_INT 29
7406: PUSH
7407: EMPTY
7408: LIST
7409: IN
7410: IFFALSE 7431
// points := [ 70 , 200 , 400 ] ;
7412: LD_ADDR_VAR 0 9
7416: PUSH
7417: LD_INT 70
7419: PUSH
7420: LD_INT 200
7422: PUSH
7423: LD_INT 400
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7431: LD_VAR 0 6
7435: PPUSH
7436: CALL_OW 264
7440: PUSH
7441: LD_INT 14
7443: PUSH
7444: LD_INT 53
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: IN
7451: IFFALSE 7472
// points := [ 40 , 10 , 20 ] ;
7453: LD_ADDR_VAR 0 9
7457: PUSH
7458: LD_INT 40
7460: PUSH
7461: LD_INT 10
7463: PUSH
7464: LD_INT 20
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7472: LD_VAR 0 6
7476: PPUSH
7477: CALL_OW 264
7481: PUSH
7482: LD_INT 9
7484: PUSH
7485: EMPTY
7486: LIST
7487: IN
7488: IFFALSE 7509
// points := [ 5 , 70 , 20 ] ;
7490: LD_ADDR_VAR 0 9
7494: PUSH
7495: LD_INT 5
7497: PUSH
7498: LD_INT 70
7500: PUSH
7501: LD_INT 20
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7509: LD_VAR 0 6
7513: PPUSH
7514: CALL_OW 264
7518: PUSH
7519: LD_INT 10
7521: PUSH
7522: EMPTY
7523: LIST
7524: IN
7525: IFFALSE 7546
// points := [ 35 , 110 , 70 ] ;
7527: LD_ADDR_VAR 0 9
7531: PUSH
7532: LD_INT 35
7534: PUSH
7535: LD_INT 110
7537: PUSH
7538: LD_INT 70
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7546: LD_VAR 0 6
7550: PPUSH
7551: CALL_OW 265
7555: PUSH
7556: LD_INT 25
7558: EQUAL
7559: IFFALSE 7580
// points := [ 80 , 65 , 100 ] ;
7561: LD_ADDR_VAR 0 9
7565: PUSH
7566: LD_INT 80
7568: PUSH
7569: LD_INT 65
7571: PUSH
7572: LD_INT 100
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7580: LD_VAR 0 6
7584: PPUSH
7585: CALL_OW 263
7589: PUSH
7590: LD_INT 1
7592: EQUAL
7593: IFFALSE 7628
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7595: LD_ADDR_VAR 0 10
7599: PUSH
7600: LD_VAR 0 10
7604: PUSH
7605: LD_VAR 0 6
7609: PPUSH
7610: CALL_OW 311
7614: PPUSH
7615: LD_INT 3
7617: PPUSH
7618: CALL_OW 259
7622: PUSH
7623: LD_INT 4
7625: MUL
7626: MUL
7627: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7628: LD_VAR 0 6
7632: PPUSH
7633: CALL_OW 263
7637: PUSH
7638: LD_INT 2
7640: EQUAL
7641: IFFALSE 7692
// begin j := IsControledBy ( i ) ;
7643: LD_ADDR_VAR 0 7
7647: PUSH
7648: LD_VAR 0 6
7652: PPUSH
7653: CALL_OW 312
7657: ST_TO_ADDR
// if j then
7658: LD_VAR 0 7
7662: IFFALSE 7692
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7664: LD_ADDR_VAR 0 10
7668: PUSH
7669: LD_VAR 0 10
7673: PUSH
7674: LD_VAR 0 7
7678: PPUSH
7679: LD_INT 3
7681: PPUSH
7682: CALL_OW 259
7686: PUSH
7687: LD_INT 3
7689: MUL
7690: MUL
7691: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7692: LD_VAR 0 6
7696: PPUSH
7697: CALL_OW 264
7701: PUSH
7702: LD_INT 5
7704: PUSH
7705: LD_INT 6
7707: PUSH
7708: LD_INT 46
7710: PUSH
7711: LD_INT 44
7713: PUSH
7714: LD_INT 47
7716: PUSH
7717: LD_INT 45
7719: PUSH
7720: LD_INT 28
7722: PUSH
7723: LD_INT 7
7725: PUSH
7726: LD_INT 27
7728: PUSH
7729: LD_INT 29
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: IN
7744: PUSH
7745: LD_VAR 0 1
7749: PPUSH
7750: LD_INT 52
7752: PPUSH
7753: CALL_OW 321
7757: PUSH
7758: LD_INT 2
7760: EQUAL
7761: AND
7762: IFFALSE 7779
// bpoints := bpoints * 1.2 ;
7764: LD_ADDR_VAR 0 10
7768: PUSH
7769: LD_VAR 0 10
7773: PUSH
7774: LD_REAL  1.20000000000000E+0000
7777: MUL
7778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7779: LD_VAR 0 6
7783: PPUSH
7784: CALL_OW 264
7788: PUSH
7789: LD_INT 6
7791: PUSH
7792: LD_INT 46
7794: PUSH
7795: LD_INT 47
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: IN
7803: IFFALSE 7820
// bpoints := bpoints * 1.2 ;
7805: LD_ADDR_VAR 0 10
7809: PUSH
7810: LD_VAR 0 10
7814: PUSH
7815: LD_REAL  1.20000000000000E+0000
7818: MUL
7819: ST_TO_ADDR
// end ; unit_building :
7820: GO 7834
7822: LD_INT 3
7824: DOUBLE
7825: EQUAL
7826: IFTRUE 7830
7828: GO 7833
7830: POP
// ; end ;
7831: GO 7834
7833: POP
// for j = 1 to 3 do
7834: LD_ADDR_VAR 0 7
7838: PUSH
7839: DOUBLE
7840: LD_INT 1
7842: DEC
7843: ST_TO_ADDR
7844: LD_INT 3
7846: PUSH
7847: FOR_TO
7848: IFFALSE 7901
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7850: LD_ADDR_VAR 0 5
7854: PUSH
7855: LD_VAR 0 5
7859: PPUSH
7860: LD_VAR 0 7
7864: PPUSH
7865: LD_VAR 0 5
7869: PUSH
7870: LD_VAR 0 7
7874: ARRAY
7875: PUSH
7876: LD_VAR 0 9
7880: PUSH
7881: LD_VAR 0 7
7885: ARRAY
7886: PUSH
7887: LD_VAR 0 10
7891: MUL
7892: PLUS
7893: PPUSH
7894: CALL_OW 1
7898: ST_TO_ADDR
7899: GO 7847
7901: POP
7902: POP
// end ;
7903: GO 6382
7905: POP
7906: POP
// result := Replace ( result , 4 , tmp ) ;
7907: LD_ADDR_VAR 0 5
7911: PUSH
7912: LD_VAR 0 5
7916: PPUSH
7917: LD_INT 4
7919: PPUSH
7920: LD_VAR 0 8
7924: PPUSH
7925: CALL_OW 1
7929: ST_TO_ADDR
// end ;
7930: LD_VAR 0 5
7934: RET
// export function DangerAtRange ( unit , range ) ; begin
7935: LD_INT 0
7937: PPUSH
// if not unit then
7938: LD_VAR 0 1
7942: NOT
7943: IFFALSE 7947
// exit ;
7945: GO 7992
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7947: LD_ADDR_VAR 0 3
7951: PUSH
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 255
7961: PPUSH
7962: LD_VAR 0 1
7966: PPUSH
7967: CALL_OW 250
7971: PPUSH
7972: LD_VAR 0 1
7976: PPUSH
7977: CALL_OW 251
7981: PPUSH
7982: LD_VAR 0 2
7986: PPUSH
7987: CALL 6234 0 4
7991: ST_TO_ADDR
// end ;
7992: LD_VAR 0 3
7996: RET
// export function DangerInArea ( side , area ) ; begin
7997: LD_INT 0
7999: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8000: LD_ADDR_VAR 0 3
8004: PUSH
8005: LD_VAR 0 2
8009: PPUSH
8010: LD_INT 81
8012: PUSH
8013: LD_VAR 0 1
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: PPUSH
8022: CALL_OW 70
8026: ST_TO_ADDR
// end ;
8027: LD_VAR 0 3
8031: RET
// export function IsExtension ( b ) ; begin
8032: LD_INT 0
8034: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8035: LD_ADDR_VAR 0 2
8039: PUSH
8040: LD_VAR 0 1
8044: PUSH
8045: LD_INT 23
8047: PUSH
8048: LD_INT 20
8050: PUSH
8051: LD_INT 22
8053: PUSH
8054: LD_INT 17
8056: PUSH
8057: LD_INT 24
8059: PUSH
8060: LD_INT 21
8062: PUSH
8063: LD_INT 19
8065: PUSH
8066: LD_INT 16
8068: PUSH
8069: LD_INT 25
8071: PUSH
8072: LD_INT 18
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: IN
8087: ST_TO_ADDR
// end ;
8088: LD_VAR 0 2
8092: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8093: LD_INT 0
8095: PPUSH
8096: PPUSH
8097: PPUSH
// result := [ ] ;
8098: LD_ADDR_VAR 0 4
8102: PUSH
8103: EMPTY
8104: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8105: LD_ADDR_VAR 0 5
8109: PUSH
8110: LD_VAR 0 2
8114: PPUSH
8115: LD_INT 21
8117: PUSH
8118: LD_INT 3
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: PPUSH
8125: CALL_OW 70
8129: ST_TO_ADDR
// if not tmp then
8130: LD_VAR 0 5
8134: NOT
8135: IFFALSE 8139
// exit ;
8137: GO 8203
// if checkLink then
8139: LD_VAR 0 3
8143: IFFALSE 8193
// begin for i in tmp do
8145: LD_ADDR_VAR 0 6
8149: PUSH
8150: LD_VAR 0 5
8154: PUSH
8155: FOR_IN
8156: IFFALSE 8191
// if GetBase ( i ) <> base then
8158: LD_VAR 0 6
8162: PPUSH
8163: CALL_OW 274
8167: PUSH
8168: LD_VAR 0 1
8172: NONEQUAL
8173: IFFALSE 8189
// ComLinkToBase ( base , i ) ;
8175: LD_VAR 0 1
8179: PPUSH
8180: LD_VAR 0 6
8184: PPUSH
8185: CALL_OW 169
8189: GO 8155
8191: POP
8192: POP
// end ; result := tmp ;
8193: LD_ADDR_VAR 0 4
8197: PUSH
8198: LD_VAR 0 5
8202: ST_TO_ADDR
// end ;
8203: LD_VAR 0 4
8207: RET
// export function ComComplete ( units , b ) ; var i ; begin
8208: LD_INT 0
8210: PPUSH
8211: PPUSH
// if not units then
8212: LD_VAR 0 1
8216: NOT
8217: IFFALSE 8221
// exit ;
8219: GO 8311
// for i in units do
8221: LD_ADDR_VAR 0 4
8225: PUSH
8226: LD_VAR 0 1
8230: PUSH
8231: FOR_IN
8232: IFFALSE 8309
// if BuildingStatus ( b ) = bs_build then
8234: LD_VAR 0 2
8238: PPUSH
8239: CALL_OW 461
8243: PUSH
8244: LD_INT 1
8246: EQUAL
8247: IFFALSE 8307
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8249: LD_VAR 0 4
8253: PPUSH
8254: LD_STRING h
8256: PUSH
8257: LD_VAR 0 2
8261: PPUSH
8262: CALL_OW 250
8266: PUSH
8267: LD_VAR 0 2
8271: PPUSH
8272: CALL_OW 251
8276: PUSH
8277: LD_VAR 0 2
8281: PUSH
8282: LD_INT 0
8284: PUSH
8285: LD_INT 0
8287: PUSH
8288: LD_INT 0
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: PUSH
8300: EMPTY
8301: LIST
8302: PPUSH
8303: CALL_OW 446
8307: GO 8231
8309: POP
8310: POP
// end ;
8311: LD_VAR 0 3
8315: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8316: LD_INT 0
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
8322: PPUSH
8323: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8324: LD_VAR 0 1
8328: NOT
8329: PUSH
8330: LD_VAR 0 1
8334: PPUSH
8335: CALL_OW 263
8339: PUSH
8340: LD_INT 2
8342: NONEQUAL
8343: OR
8344: IFFALSE 8348
// exit ;
8346: GO 8664
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8348: LD_ADDR_VAR 0 6
8352: PUSH
8353: LD_INT 22
8355: PUSH
8356: LD_VAR 0 1
8360: PPUSH
8361: CALL_OW 255
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: LD_INT 2
8372: PUSH
8373: LD_INT 30
8375: PUSH
8376: LD_INT 36
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: LD_INT 34
8385: PUSH
8386: LD_INT 31
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PPUSH
8402: CALL_OW 69
8406: ST_TO_ADDR
// if not tmp then
8407: LD_VAR 0 6
8411: NOT
8412: IFFALSE 8416
// exit ;
8414: GO 8664
// result := [ ] ;
8416: LD_ADDR_VAR 0 2
8420: PUSH
8421: EMPTY
8422: ST_TO_ADDR
// for i in tmp do
8423: LD_ADDR_VAR 0 3
8427: PUSH
8428: LD_VAR 0 6
8432: PUSH
8433: FOR_IN
8434: IFFALSE 8505
// begin t := UnitsInside ( i ) ;
8436: LD_ADDR_VAR 0 4
8440: PUSH
8441: LD_VAR 0 3
8445: PPUSH
8446: CALL_OW 313
8450: ST_TO_ADDR
// if t then
8451: LD_VAR 0 4
8455: IFFALSE 8503
// for j in t do
8457: LD_ADDR_VAR 0 7
8461: PUSH
8462: LD_VAR 0 4
8466: PUSH
8467: FOR_IN
8468: IFFALSE 8501
// result := Replace ( result , result + 1 , j ) ;
8470: LD_ADDR_VAR 0 2
8474: PUSH
8475: LD_VAR 0 2
8479: PPUSH
8480: LD_VAR 0 2
8484: PUSH
8485: LD_INT 1
8487: PLUS
8488: PPUSH
8489: LD_VAR 0 7
8493: PPUSH
8494: CALL_OW 1
8498: ST_TO_ADDR
8499: GO 8467
8501: POP
8502: POP
// end ;
8503: GO 8433
8505: POP
8506: POP
// if not result then
8507: LD_VAR 0 2
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8664
// mech := result [ 1 ] ;
8516: LD_ADDR_VAR 0 5
8520: PUSH
8521: LD_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: ARRAY
8529: ST_TO_ADDR
// if result > 1 then
8530: LD_VAR 0 2
8534: PUSH
8535: LD_INT 1
8537: GREATER
8538: IFFALSE 8650
// begin for i = 2 to result do
8540: LD_ADDR_VAR 0 3
8544: PUSH
8545: DOUBLE
8546: LD_INT 2
8548: DEC
8549: ST_TO_ADDR
8550: LD_VAR 0 2
8554: PUSH
8555: FOR_TO
8556: IFFALSE 8648
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8558: LD_ADDR_VAR 0 4
8562: PUSH
8563: LD_VAR 0 2
8567: PUSH
8568: LD_VAR 0 3
8572: ARRAY
8573: PPUSH
8574: LD_INT 3
8576: PPUSH
8577: CALL_OW 259
8581: PUSH
8582: LD_VAR 0 2
8586: PUSH
8587: LD_VAR 0 3
8591: ARRAY
8592: PPUSH
8593: CALL_OW 432
8597: MINUS
8598: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8599: LD_VAR 0 4
8603: PUSH
8604: LD_VAR 0 5
8608: PPUSH
8609: LD_INT 3
8611: PPUSH
8612: CALL_OW 259
8616: PUSH
8617: LD_VAR 0 5
8621: PPUSH
8622: CALL_OW 432
8626: MINUS
8627: GREATEREQUAL
8628: IFFALSE 8646
// mech := result [ i ] ;
8630: LD_ADDR_VAR 0 5
8634: PUSH
8635: LD_VAR 0 2
8639: PUSH
8640: LD_VAR 0 3
8644: ARRAY
8645: ST_TO_ADDR
// end ;
8646: GO 8555
8648: POP
8649: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8650: LD_VAR 0 1
8654: PPUSH
8655: LD_VAR 0 5
8659: PPUSH
8660: CALL_OW 135
// end ;
8664: LD_VAR 0 2
8668: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8669: LD_INT 0
8671: PPUSH
8672: PPUSH
8673: PPUSH
8674: PPUSH
8675: PPUSH
8676: PPUSH
8677: PPUSH
8678: PPUSH
8679: PPUSH
8680: PPUSH
8681: PPUSH
8682: PPUSH
8683: PPUSH
// result := [ ] ;
8684: LD_ADDR_VAR 0 7
8688: PUSH
8689: EMPTY
8690: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8691: LD_VAR 0 1
8695: PPUSH
8696: CALL_OW 266
8700: PUSH
8701: LD_INT 0
8703: PUSH
8704: LD_INT 1
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: IN
8711: NOT
8712: IFFALSE 8716
// exit ;
8714: GO 10350
// if name then
8716: LD_VAR 0 3
8720: IFFALSE 8736
// SetBName ( base_dep , name ) ;
8722: LD_VAR 0 1
8726: PPUSH
8727: LD_VAR 0 3
8731: PPUSH
8732: CALL_OW 500
// base := GetBase ( base_dep ) ;
8736: LD_ADDR_VAR 0 15
8740: PUSH
8741: LD_VAR 0 1
8745: PPUSH
8746: CALL_OW 274
8750: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8751: LD_ADDR_VAR 0 16
8755: PUSH
8756: LD_VAR 0 1
8760: PPUSH
8761: CALL_OW 255
8765: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8766: LD_ADDR_VAR 0 17
8770: PUSH
8771: LD_VAR 0 1
8775: PPUSH
8776: CALL_OW 248
8780: ST_TO_ADDR
// if sources then
8781: LD_VAR 0 5
8785: IFFALSE 8832
// for i = 1 to 3 do
8787: LD_ADDR_VAR 0 8
8791: PUSH
8792: DOUBLE
8793: LD_INT 1
8795: DEC
8796: ST_TO_ADDR
8797: LD_INT 3
8799: PUSH
8800: FOR_TO
8801: IFFALSE 8830
// AddResourceType ( base , i , sources [ i ] ) ;
8803: LD_VAR 0 15
8807: PPUSH
8808: LD_VAR 0 8
8812: PPUSH
8813: LD_VAR 0 5
8817: PUSH
8818: LD_VAR 0 8
8822: ARRAY
8823: PPUSH
8824: CALL_OW 276
8828: GO 8800
8830: POP
8831: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8832: LD_ADDR_VAR 0 18
8836: PUSH
8837: LD_VAR 0 15
8841: PPUSH
8842: LD_VAR 0 2
8846: PPUSH
8847: LD_INT 1
8849: PPUSH
8850: CALL 8093 0 3
8854: ST_TO_ADDR
// InitHc ;
8855: CALL_OW 19
// InitUc ;
8859: CALL_OW 18
// uc_side := side ;
8863: LD_ADDR_OWVAR 20
8867: PUSH
8868: LD_VAR 0 16
8872: ST_TO_ADDR
// uc_nation := nation ;
8873: LD_ADDR_OWVAR 21
8877: PUSH
8878: LD_VAR 0 17
8882: ST_TO_ADDR
// if buildings then
8883: LD_VAR 0 18
8887: IFFALSE 10209
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8889: LD_ADDR_VAR 0 19
8893: PUSH
8894: LD_VAR 0 18
8898: PPUSH
8899: LD_INT 2
8901: PUSH
8902: LD_INT 30
8904: PUSH
8905: LD_INT 29
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 30
8914: PUSH
8915: LD_INT 30
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 72
8931: ST_TO_ADDR
// if tmp then
8932: LD_VAR 0 19
8936: IFFALSE 8984
// for i in tmp do
8938: LD_ADDR_VAR 0 8
8942: PUSH
8943: LD_VAR 0 19
8947: PUSH
8948: FOR_IN
8949: IFFALSE 8982
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8951: LD_VAR 0 8
8955: PPUSH
8956: CALL_OW 250
8960: PPUSH
8961: LD_VAR 0 8
8965: PPUSH
8966: CALL_OW 251
8970: PPUSH
8971: LD_VAR 0 16
8975: PPUSH
8976: CALL_OW 441
8980: GO 8948
8982: POP
8983: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8984: LD_VAR 0 18
8988: PPUSH
8989: LD_INT 2
8991: PUSH
8992: LD_INT 30
8994: PUSH
8995: LD_INT 32
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 30
9004: PUSH
9005: LD_INT 33
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: PPUSH
9017: CALL_OW 72
9021: IFFALSE 9109
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9023: LD_ADDR_VAR 0 8
9027: PUSH
9028: LD_VAR 0 18
9032: PPUSH
9033: LD_INT 2
9035: PUSH
9036: LD_INT 30
9038: PUSH
9039: LD_INT 32
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: LD_INT 30
9048: PUSH
9049: LD_INT 33
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: PPUSH
9061: CALL_OW 72
9065: PUSH
9066: FOR_IN
9067: IFFALSE 9107
// begin if not GetBWeapon ( i ) then
9069: LD_VAR 0 8
9073: PPUSH
9074: CALL_OW 269
9078: NOT
9079: IFFALSE 9105
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9081: LD_VAR 0 8
9085: PPUSH
9086: LD_VAR 0 8
9090: PPUSH
9091: LD_VAR 0 2
9095: PPUSH
9096: CALL 10355 0 2
9100: PPUSH
9101: CALL_OW 431
// end ;
9105: GO 9066
9107: POP
9108: POP
// end ; for i = 1 to personel do
9109: LD_ADDR_VAR 0 8
9113: PUSH
9114: DOUBLE
9115: LD_INT 1
9117: DEC
9118: ST_TO_ADDR
9119: LD_VAR 0 6
9123: PUSH
9124: FOR_TO
9125: IFFALSE 10189
// begin if i > 4 then
9127: LD_VAR 0 8
9131: PUSH
9132: LD_INT 4
9134: GREATER
9135: IFFALSE 9139
// break ;
9137: GO 10189
// case i of 1 :
9139: LD_VAR 0 8
9143: PUSH
9144: LD_INT 1
9146: DOUBLE
9147: EQUAL
9148: IFTRUE 9152
9150: GO 9232
9152: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9153: LD_ADDR_VAR 0 12
9157: PUSH
9158: LD_VAR 0 18
9162: PPUSH
9163: LD_INT 22
9165: PUSH
9166: LD_VAR 0 16
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 58
9177: PUSH
9178: EMPTY
9179: LIST
9180: PUSH
9181: LD_INT 2
9183: PUSH
9184: LD_INT 30
9186: PUSH
9187: LD_INT 32
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 30
9196: PUSH
9197: LD_INT 4
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: PUSH
9204: LD_INT 30
9206: PUSH
9207: LD_INT 5
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: LIST
9224: PPUSH
9225: CALL_OW 72
9229: ST_TO_ADDR
9230: GO 9454
9232: LD_INT 2
9234: DOUBLE
9235: EQUAL
9236: IFTRUE 9240
9238: GO 9302
9240: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9241: LD_ADDR_VAR 0 12
9245: PUSH
9246: LD_VAR 0 18
9250: PPUSH
9251: LD_INT 22
9253: PUSH
9254: LD_VAR 0 16
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: LD_INT 2
9265: PUSH
9266: LD_INT 30
9268: PUSH
9269: LD_INT 0
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 30
9278: PUSH
9279: LD_INT 1
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PPUSH
9295: CALL_OW 72
9299: ST_TO_ADDR
9300: GO 9454
9302: LD_INT 3
9304: DOUBLE
9305: EQUAL
9306: IFTRUE 9310
9308: GO 9372
9310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9311: LD_ADDR_VAR 0 12
9315: PUSH
9316: LD_VAR 0 18
9320: PPUSH
9321: LD_INT 22
9323: PUSH
9324: LD_VAR 0 16
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 2
9335: PUSH
9336: LD_INT 30
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 30
9348: PUSH
9349: LD_INT 3
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PPUSH
9365: CALL_OW 72
9369: ST_TO_ADDR
9370: GO 9454
9372: LD_INT 4
9374: DOUBLE
9375: EQUAL
9376: IFTRUE 9380
9378: GO 9453
9380: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9381: LD_ADDR_VAR 0 12
9385: PUSH
9386: LD_VAR 0 18
9390: PPUSH
9391: LD_INT 22
9393: PUSH
9394: LD_VAR 0 16
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PUSH
9403: LD_INT 2
9405: PUSH
9406: LD_INT 30
9408: PUSH
9409: LD_INT 6
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 30
9418: PUSH
9419: LD_INT 7
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 30
9428: PUSH
9429: LD_INT 8
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PPUSH
9446: CALL_OW 72
9450: ST_TO_ADDR
9451: GO 9454
9453: POP
// if i = 1 then
9454: LD_VAR 0 8
9458: PUSH
9459: LD_INT 1
9461: EQUAL
9462: IFFALSE 9573
// begin tmp := [ ] ;
9464: LD_ADDR_VAR 0 19
9468: PUSH
9469: EMPTY
9470: ST_TO_ADDR
// for j in f do
9471: LD_ADDR_VAR 0 9
9475: PUSH
9476: LD_VAR 0 12
9480: PUSH
9481: FOR_IN
9482: IFFALSE 9555
// if GetBType ( j ) = b_bunker then
9484: LD_VAR 0 9
9488: PPUSH
9489: CALL_OW 266
9493: PUSH
9494: LD_INT 32
9496: EQUAL
9497: IFFALSE 9524
// tmp := Insert ( tmp , 1 , j ) else
9499: LD_ADDR_VAR 0 19
9503: PUSH
9504: LD_VAR 0 19
9508: PPUSH
9509: LD_INT 1
9511: PPUSH
9512: LD_VAR 0 9
9516: PPUSH
9517: CALL_OW 2
9521: ST_TO_ADDR
9522: GO 9553
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9524: LD_ADDR_VAR 0 19
9528: PUSH
9529: LD_VAR 0 19
9533: PPUSH
9534: LD_VAR 0 19
9538: PUSH
9539: LD_INT 1
9541: PLUS
9542: PPUSH
9543: LD_VAR 0 9
9547: PPUSH
9548: CALL_OW 2
9552: ST_TO_ADDR
9553: GO 9481
9555: POP
9556: POP
// if tmp then
9557: LD_VAR 0 19
9561: IFFALSE 9573
// f := tmp ;
9563: LD_ADDR_VAR 0 12
9567: PUSH
9568: LD_VAR 0 19
9572: ST_TO_ADDR
// end ; x := personel [ i ] ;
9573: LD_ADDR_VAR 0 13
9577: PUSH
9578: LD_VAR 0 6
9582: PUSH
9583: LD_VAR 0 8
9587: ARRAY
9588: ST_TO_ADDR
// if x = - 1 then
9589: LD_VAR 0 13
9593: PUSH
9594: LD_INT 1
9596: NEG
9597: EQUAL
9598: IFFALSE 9807
// begin for j in f do
9600: LD_ADDR_VAR 0 9
9604: PUSH
9605: LD_VAR 0 12
9609: PUSH
9610: FOR_IN
9611: IFFALSE 9803
// repeat InitHc ;
9613: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9617: LD_VAR 0 9
9621: PPUSH
9622: CALL_OW 266
9626: PUSH
9627: LD_INT 5
9629: EQUAL
9630: IFFALSE 9700
// begin if UnitsInside ( j ) < 3 then
9632: LD_VAR 0 9
9636: PPUSH
9637: CALL_OW 313
9641: PUSH
9642: LD_INT 3
9644: LESS
9645: IFFALSE 9681
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9647: LD_INT 0
9649: PPUSH
9650: LD_INT 5
9652: PUSH
9653: LD_INT 8
9655: PUSH
9656: LD_INT 9
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: LIST
9663: PUSH
9664: LD_VAR 0 17
9668: ARRAY
9669: PPUSH
9670: LD_VAR 0 4
9674: PPUSH
9675: CALL_OW 380
9679: GO 9698
// PrepareHuman ( false , i , skill ) ;
9681: LD_INT 0
9683: PPUSH
9684: LD_VAR 0 8
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 380
// end else
9698: GO 9717
// PrepareHuman ( false , i , skill ) ;
9700: LD_INT 0
9702: PPUSH
9703: LD_VAR 0 8
9707: PPUSH
9708: LD_VAR 0 4
9712: PPUSH
9713: CALL_OW 380
// un := CreateHuman ;
9717: LD_ADDR_VAR 0 14
9721: PUSH
9722: CALL_OW 44
9726: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9727: LD_ADDR_VAR 0 7
9731: PUSH
9732: LD_VAR 0 7
9736: PPUSH
9737: LD_INT 1
9739: PPUSH
9740: LD_VAR 0 14
9744: PPUSH
9745: CALL_OW 2
9749: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9750: LD_VAR 0 14
9754: PPUSH
9755: LD_VAR 0 9
9759: PPUSH
9760: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9764: LD_VAR 0 9
9768: PPUSH
9769: CALL_OW 313
9773: PUSH
9774: LD_INT 6
9776: EQUAL
9777: PUSH
9778: LD_VAR 0 9
9782: PPUSH
9783: CALL_OW 266
9787: PUSH
9788: LD_INT 32
9790: PUSH
9791: LD_INT 31
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: IN
9798: OR
9799: IFFALSE 9613
9801: GO 9610
9803: POP
9804: POP
// end else
9805: GO 10187
// for j = 1 to x do
9807: LD_ADDR_VAR 0 9
9811: PUSH
9812: DOUBLE
9813: LD_INT 1
9815: DEC
9816: ST_TO_ADDR
9817: LD_VAR 0 13
9821: PUSH
9822: FOR_TO
9823: IFFALSE 10185
// begin InitHc ;
9825: CALL_OW 19
// if not f then
9829: LD_VAR 0 12
9833: NOT
9834: IFFALSE 9923
// begin PrepareHuman ( false , i , skill ) ;
9836: LD_INT 0
9838: PPUSH
9839: LD_VAR 0 8
9843: PPUSH
9844: LD_VAR 0 4
9848: PPUSH
9849: CALL_OW 380
// un := CreateHuman ;
9853: LD_ADDR_VAR 0 14
9857: PUSH
9858: CALL_OW 44
9862: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9863: LD_ADDR_VAR 0 7
9867: PUSH
9868: LD_VAR 0 7
9872: PPUSH
9873: LD_INT 1
9875: PPUSH
9876: LD_VAR 0 14
9880: PPUSH
9881: CALL_OW 2
9885: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9886: LD_VAR 0 14
9890: PPUSH
9891: LD_VAR 0 1
9895: PPUSH
9896: CALL_OW 250
9900: PPUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: CALL_OW 251
9910: PPUSH
9911: LD_INT 10
9913: PPUSH
9914: LD_INT 0
9916: PPUSH
9917: CALL_OW 50
// continue ;
9921: GO 9822
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9923: LD_VAR 0 12
9927: PUSH
9928: LD_INT 1
9930: ARRAY
9931: PPUSH
9932: CALL_OW 313
9936: PUSH
9937: LD_VAR 0 12
9941: PUSH
9942: LD_INT 1
9944: ARRAY
9945: PPUSH
9946: CALL_OW 266
9950: PUSH
9951: LD_INT 32
9953: PUSH
9954: LD_INT 31
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: IN
9961: AND
9962: PUSH
9963: LD_VAR 0 12
9967: PUSH
9968: LD_INT 1
9970: ARRAY
9971: PPUSH
9972: CALL_OW 313
9976: PUSH
9977: LD_INT 6
9979: EQUAL
9980: OR
9981: IFFALSE 10001
// f := Delete ( f , 1 ) ;
9983: LD_ADDR_VAR 0 12
9987: PUSH
9988: LD_VAR 0 12
9992: PPUSH
9993: LD_INT 1
9995: PPUSH
9996: CALL_OW 3
10000: ST_TO_ADDR
// if not f then
10001: LD_VAR 0 12
10005: NOT
10006: IFFALSE 10024
// begin x := x + 2 ;
10008: LD_ADDR_VAR 0 13
10012: PUSH
10013: LD_VAR 0 13
10017: PUSH
10018: LD_INT 2
10020: PLUS
10021: ST_TO_ADDR
// continue ;
10022: GO 9822
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10024: LD_VAR 0 12
10028: PUSH
10029: LD_INT 1
10031: ARRAY
10032: PPUSH
10033: CALL_OW 266
10037: PUSH
10038: LD_INT 5
10040: EQUAL
10041: IFFALSE 10115
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10043: LD_VAR 0 12
10047: PUSH
10048: LD_INT 1
10050: ARRAY
10051: PPUSH
10052: CALL_OW 313
10056: PUSH
10057: LD_INT 3
10059: LESS
10060: IFFALSE 10096
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10062: LD_INT 0
10064: PPUSH
10065: LD_INT 5
10067: PUSH
10068: LD_INT 8
10070: PUSH
10071: LD_INT 9
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: LIST
10078: PUSH
10079: LD_VAR 0 17
10083: ARRAY
10084: PPUSH
10085: LD_VAR 0 4
10089: PPUSH
10090: CALL_OW 380
10094: GO 10113
// PrepareHuman ( false , i , skill ) ;
10096: LD_INT 0
10098: PPUSH
10099: LD_VAR 0 8
10103: PPUSH
10104: LD_VAR 0 4
10108: PPUSH
10109: CALL_OW 380
// end else
10113: GO 10132
// PrepareHuman ( false , i , skill ) ;
10115: LD_INT 0
10117: PPUSH
10118: LD_VAR 0 8
10122: PPUSH
10123: LD_VAR 0 4
10127: PPUSH
10128: CALL_OW 380
// un := CreateHuman ;
10132: LD_ADDR_VAR 0 14
10136: PUSH
10137: CALL_OW 44
10141: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10142: LD_ADDR_VAR 0 7
10146: PUSH
10147: LD_VAR 0 7
10151: PPUSH
10152: LD_INT 1
10154: PPUSH
10155: LD_VAR 0 14
10159: PPUSH
10160: CALL_OW 2
10164: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10165: LD_VAR 0 14
10169: PPUSH
10170: LD_VAR 0 12
10174: PUSH
10175: LD_INT 1
10177: ARRAY
10178: PPUSH
10179: CALL_OW 52
// end ;
10183: GO 9822
10185: POP
10186: POP
// end ;
10187: GO 9124
10189: POP
10190: POP
// result := result ^ buildings ;
10191: LD_ADDR_VAR 0 7
10195: PUSH
10196: LD_VAR 0 7
10200: PUSH
10201: LD_VAR 0 18
10205: ADD
10206: ST_TO_ADDR
// end else
10207: GO 10350
// begin for i = 1 to personel do
10209: LD_ADDR_VAR 0 8
10213: PUSH
10214: DOUBLE
10215: LD_INT 1
10217: DEC
10218: ST_TO_ADDR
10219: LD_VAR 0 6
10223: PUSH
10224: FOR_TO
10225: IFFALSE 10348
// begin if i > 4 then
10227: LD_VAR 0 8
10231: PUSH
10232: LD_INT 4
10234: GREATER
10235: IFFALSE 10239
// break ;
10237: GO 10348
// x := personel [ i ] ;
10239: LD_ADDR_VAR 0 13
10243: PUSH
10244: LD_VAR 0 6
10248: PUSH
10249: LD_VAR 0 8
10253: ARRAY
10254: ST_TO_ADDR
// if x = - 1 then
10255: LD_VAR 0 13
10259: PUSH
10260: LD_INT 1
10262: NEG
10263: EQUAL
10264: IFFALSE 10268
// continue ;
10266: GO 10224
// PrepareHuman ( false , i , skill ) ;
10268: LD_INT 0
10270: PPUSH
10271: LD_VAR 0 8
10275: PPUSH
10276: LD_VAR 0 4
10280: PPUSH
10281: CALL_OW 380
// un := CreateHuman ;
10285: LD_ADDR_VAR 0 14
10289: PUSH
10290: CALL_OW 44
10294: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10295: LD_VAR 0 14
10299: PPUSH
10300: LD_VAR 0 1
10304: PPUSH
10305: CALL_OW 250
10309: PPUSH
10310: LD_VAR 0 1
10314: PPUSH
10315: CALL_OW 251
10319: PPUSH
10320: LD_INT 10
10322: PPUSH
10323: LD_INT 0
10325: PPUSH
10326: CALL_OW 50
// result := result ^ un ;
10330: LD_ADDR_VAR 0 7
10334: PUSH
10335: LD_VAR 0 7
10339: PUSH
10340: LD_VAR 0 14
10344: ADD
10345: ST_TO_ADDR
// end ;
10346: GO 10224
10348: POP
10349: POP
// end ; end ;
10350: LD_VAR 0 7
10354: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10355: LD_INT 0
10357: PPUSH
10358: PPUSH
10359: PPUSH
10360: PPUSH
10361: PPUSH
10362: PPUSH
10363: PPUSH
10364: PPUSH
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
10369: PPUSH
10370: PPUSH
10371: PPUSH
10372: PPUSH
// result := false ;
10373: LD_ADDR_VAR 0 3
10377: PUSH
10378: LD_INT 0
10380: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10381: LD_VAR 0 1
10385: NOT
10386: PUSH
10387: LD_VAR 0 1
10391: PPUSH
10392: CALL_OW 266
10396: PUSH
10397: LD_INT 32
10399: PUSH
10400: LD_INT 33
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: IN
10407: NOT
10408: OR
10409: IFFALSE 10413
// exit ;
10411: GO 11522
// nat := GetNation ( tower ) ;
10413: LD_ADDR_VAR 0 12
10417: PUSH
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 248
10427: ST_TO_ADDR
// side := GetSide ( tower ) ;
10428: LD_ADDR_VAR 0 16
10432: PUSH
10433: LD_VAR 0 1
10437: PPUSH
10438: CALL_OW 255
10442: ST_TO_ADDR
// x := GetX ( tower ) ;
10443: LD_ADDR_VAR 0 10
10447: PUSH
10448: LD_VAR 0 1
10452: PPUSH
10453: CALL_OW 250
10457: ST_TO_ADDR
// y := GetY ( tower ) ;
10458: LD_ADDR_VAR 0 11
10462: PUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: CALL_OW 251
10472: ST_TO_ADDR
// if not x or not y then
10473: LD_VAR 0 10
10477: NOT
10478: PUSH
10479: LD_VAR 0 11
10483: NOT
10484: OR
10485: IFFALSE 10489
// exit ;
10487: GO 11522
// weapon := 0 ;
10489: LD_ADDR_VAR 0 18
10493: PUSH
10494: LD_INT 0
10496: ST_TO_ADDR
// fac_list := [ ] ;
10497: LD_ADDR_VAR 0 17
10501: PUSH
10502: EMPTY
10503: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10504: LD_ADDR_VAR 0 6
10508: PUSH
10509: LD_VAR 0 1
10513: PPUSH
10514: CALL_OW 274
10518: PPUSH
10519: LD_VAR 0 2
10523: PPUSH
10524: LD_INT 0
10526: PPUSH
10527: CALL 8093 0 3
10531: PPUSH
10532: LD_INT 30
10534: PUSH
10535: LD_INT 3
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PPUSH
10542: CALL_OW 72
10546: ST_TO_ADDR
// if not factories then
10547: LD_VAR 0 6
10551: NOT
10552: IFFALSE 10556
// exit ;
10554: GO 11522
// for i in factories do
10556: LD_ADDR_VAR 0 8
10560: PUSH
10561: LD_VAR 0 6
10565: PUSH
10566: FOR_IN
10567: IFFALSE 10592
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10569: LD_ADDR_VAR 0 17
10573: PUSH
10574: LD_VAR 0 17
10578: PUSH
10579: LD_VAR 0 8
10583: PPUSH
10584: CALL_OW 478
10588: UNION
10589: ST_TO_ADDR
10590: GO 10566
10592: POP
10593: POP
// if not fac_list then
10594: LD_VAR 0 17
10598: NOT
10599: IFFALSE 10603
// exit ;
10601: GO 11522
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10603: LD_ADDR_VAR 0 5
10607: PUSH
10608: LD_INT 4
10610: PUSH
10611: LD_INT 5
10613: PUSH
10614: LD_INT 9
10616: PUSH
10617: LD_INT 10
10619: PUSH
10620: LD_INT 6
10622: PUSH
10623: LD_INT 7
10625: PUSH
10626: LD_INT 11
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 27
10640: PUSH
10641: LD_INT 28
10643: PUSH
10644: LD_INT 26
10646: PUSH
10647: LD_INT 30
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 43
10658: PUSH
10659: LD_INT 44
10661: PUSH
10662: LD_INT 46
10664: PUSH
10665: LD_INT 45
10667: PUSH
10668: LD_INT 47
10670: PUSH
10671: LD_INT 49
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: LD_VAR 0 12
10691: ARRAY
10692: ST_TO_ADDR
// list := list isect fac_list ;
10693: LD_ADDR_VAR 0 5
10697: PUSH
10698: LD_VAR 0 5
10702: PUSH
10703: LD_VAR 0 17
10707: ISECT
10708: ST_TO_ADDR
// if not list then
10709: LD_VAR 0 5
10713: NOT
10714: IFFALSE 10718
// exit ;
10716: GO 11522
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10718: LD_VAR 0 12
10722: PUSH
10723: LD_INT 3
10725: EQUAL
10726: PUSH
10727: LD_INT 49
10729: PUSH
10730: LD_VAR 0 5
10734: IN
10735: AND
10736: PUSH
10737: LD_INT 31
10739: PPUSH
10740: LD_VAR 0 16
10744: PPUSH
10745: CALL_OW 321
10749: PUSH
10750: LD_INT 2
10752: EQUAL
10753: AND
10754: IFFALSE 10814
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10756: LD_INT 22
10758: PUSH
10759: LD_VAR 0 16
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 35
10770: PUSH
10771: LD_INT 49
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 91
10780: PUSH
10781: LD_VAR 0 1
10785: PUSH
10786: LD_INT 10
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: LIST
10798: PPUSH
10799: CALL_OW 69
10803: NOT
10804: IFFALSE 10814
// weapon := ru_time_lapser ;
10806: LD_ADDR_VAR 0 18
10810: PUSH
10811: LD_INT 49
10813: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10814: LD_VAR 0 12
10818: PUSH
10819: LD_INT 1
10821: PUSH
10822: LD_INT 2
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: IN
10829: PUSH
10830: LD_INT 11
10832: PUSH
10833: LD_VAR 0 5
10837: IN
10838: PUSH
10839: LD_INT 30
10841: PUSH
10842: LD_VAR 0 5
10846: IN
10847: OR
10848: AND
10849: PUSH
10850: LD_INT 6
10852: PPUSH
10853: LD_VAR 0 16
10857: PPUSH
10858: CALL_OW 321
10862: PUSH
10863: LD_INT 2
10865: EQUAL
10866: AND
10867: IFFALSE 11032
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10869: LD_INT 22
10871: PUSH
10872: LD_VAR 0 16
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PUSH
10881: LD_INT 2
10883: PUSH
10884: LD_INT 35
10886: PUSH
10887: LD_INT 11
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: LD_INT 35
10896: PUSH
10897: LD_INT 30
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 91
10911: PUSH
10912: LD_VAR 0 1
10916: PUSH
10917: LD_INT 18
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: PPUSH
10930: CALL_OW 69
10934: NOT
10935: PUSH
10936: LD_INT 22
10938: PUSH
10939: LD_VAR 0 16
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 2
10950: PUSH
10951: LD_INT 30
10953: PUSH
10954: LD_INT 32
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 30
10963: PUSH
10964: LD_INT 33
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 91
10978: PUSH
10979: LD_VAR 0 1
10983: PUSH
10984: LD_INT 12
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: LIST
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: LIST
10996: PUSH
10997: EMPTY
10998: LIST
10999: PPUSH
11000: CALL_OW 69
11004: PUSH
11005: LD_INT 2
11007: GREATER
11008: AND
11009: IFFALSE 11032
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11011: LD_ADDR_VAR 0 18
11015: PUSH
11016: LD_INT 11
11018: PUSH
11019: LD_INT 30
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_VAR 0 12
11030: ARRAY
11031: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11032: LD_VAR 0 18
11036: NOT
11037: PUSH
11038: LD_INT 40
11040: PPUSH
11041: LD_VAR 0 16
11045: PPUSH
11046: CALL_OW 321
11050: PUSH
11051: LD_INT 2
11053: EQUAL
11054: AND
11055: PUSH
11056: LD_INT 7
11058: PUSH
11059: LD_VAR 0 5
11063: IN
11064: PUSH
11065: LD_INT 28
11067: PUSH
11068: LD_VAR 0 5
11072: IN
11073: OR
11074: PUSH
11075: LD_INT 45
11077: PUSH
11078: LD_VAR 0 5
11082: IN
11083: OR
11084: AND
11085: IFFALSE 11339
// begin hex := GetHexInfo ( x , y ) ;
11087: LD_ADDR_VAR 0 4
11091: PUSH
11092: LD_VAR 0 10
11096: PPUSH
11097: LD_VAR 0 11
11101: PPUSH
11102: CALL_OW 546
11106: ST_TO_ADDR
// if hex [ 1 ] then
11107: LD_VAR 0 4
11111: PUSH
11112: LD_INT 1
11114: ARRAY
11115: IFFALSE 11119
// exit ;
11117: GO 11522
// height := hex [ 2 ] ;
11119: LD_ADDR_VAR 0 15
11123: PUSH
11124: LD_VAR 0 4
11128: PUSH
11129: LD_INT 2
11131: ARRAY
11132: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11133: LD_ADDR_VAR 0 14
11137: PUSH
11138: LD_INT 0
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: LD_INT 3
11146: PUSH
11147: LD_INT 5
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: ST_TO_ADDR
// for i in tmp do
11156: LD_ADDR_VAR 0 8
11160: PUSH
11161: LD_VAR 0 14
11165: PUSH
11166: FOR_IN
11167: IFFALSE 11337
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11169: LD_ADDR_VAR 0 9
11173: PUSH
11174: LD_VAR 0 10
11178: PPUSH
11179: LD_VAR 0 8
11183: PPUSH
11184: LD_INT 5
11186: PPUSH
11187: CALL_OW 272
11191: PUSH
11192: LD_VAR 0 11
11196: PPUSH
11197: LD_VAR 0 8
11201: PPUSH
11202: LD_INT 5
11204: PPUSH
11205: CALL_OW 273
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11214: LD_VAR 0 9
11218: PUSH
11219: LD_INT 1
11221: ARRAY
11222: PPUSH
11223: LD_VAR 0 9
11227: PUSH
11228: LD_INT 2
11230: ARRAY
11231: PPUSH
11232: CALL_OW 488
11236: IFFALSE 11335
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11238: LD_ADDR_VAR 0 4
11242: PUSH
11243: LD_VAR 0 9
11247: PUSH
11248: LD_INT 1
11250: ARRAY
11251: PPUSH
11252: LD_VAR 0 9
11256: PUSH
11257: LD_INT 2
11259: ARRAY
11260: PPUSH
11261: CALL_OW 546
11265: ST_TO_ADDR
// if hex [ 1 ] then
11266: LD_VAR 0 4
11270: PUSH
11271: LD_INT 1
11273: ARRAY
11274: IFFALSE 11278
// continue ;
11276: GO 11166
// h := hex [ 2 ] ;
11278: LD_ADDR_VAR 0 13
11282: PUSH
11283: LD_VAR 0 4
11287: PUSH
11288: LD_INT 2
11290: ARRAY
11291: ST_TO_ADDR
// if h + 7 < height then
11292: LD_VAR 0 13
11296: PUSH
11297: LD_INT 7
11299: PLUS
11300: PUSH
11301: LD_VAR 0 15
11305: LESS
11306: IFFALSE 11335
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11308: LD_ADDR_VAR 0 18
11312: PUSH
11313: LD_INT 7
11315: PUSH
11316: LD_INT 28
11318: PUSH
11319: LD_INT 45
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: PUSH
11327: LD_VAR 0 12
11331: ARRAY
11332: ST_TO_ADDR
// break ;
11333: GO 11337
// end ; end ; end ;
11335: GO 11166
11337: POP
11338: POP
// end ; if not weapon then
11339: LD_VAR 0 18
11343: NOT
11344: IFFALSE 11404
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11346: LD_ADDR_VAR 0 5
11350: PUSH
11351: LD_VAR 0 5
11355: PUSH
11356: LD_INT 11
11358: PUSH
11359: LD_INT 30
11361: PUSH
11362: LD_INT 49
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: LIST
11369: DIFF
11370: ST_TO_ADDR
// if not list then
11371: LD_VAR 0 5
11375: NOT
11376: IFFALSE 11380
// exit ;
11378: GO 11522
// weapon := list [ rand ( 1 , list ) ] ;
11380: LD_ADDR_VAR 0 18
11384: PUSH
11385: LD_VAR 0 5
11389: PUSH
11390: LD_INT 1
11392: PPUSH
11393: LD_VAR 0 5
11397: PPUSH
11398: CALL_OW 12
11402: ARRAY
11403: ST_TO_ADDR
// end ; if weapon then
11404: LD_VAR 0 18
11408: IFFALSE 11522
// begin tmp := CostOfWeapon ( weapon ) ;
11410: LD_ADDR_VAR 0 14
11414: PUSH
11415: LD_VAR 0 18
11419: PPUSH
11420: CALL_OW 451
11424: ST_TO_ADDR
// j := GetBase ( tower ) ;
11425: LD_ADDR_VAR 0 9
11429: PUSH
11430: LD_VAR 0 1
11434: PPUSH
11435: CALL_OW 274
11439: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11440: LD_VAR 0 9
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: CALL_OW 275
11452: PUSH
11453: LD_VAR 0 14
11457: PUSH
11458: LD_INT 1
11460: ARRAY
11461: GREATEREQUAL
11462: PUSH
11463: LD_VAR 0 9
11467: PPUSH
11468: LD_INT 2
11470: PPUSH
11471: CALL_OW 275
11475: PUSH
11476: LD_VAR 0 14
11480: PUSH
11481: LD_INT 2
11483: ARRAY
11484: GREATEREQUAL
11485: AND
11486: PUSH
11487: LD_VAR 0 9
11491: PPUSH
11492: LD_INT 3
11494: PPUSH
11495: CALL_OW 275
11499: PUSH
11500: LD_VAR 0 14
11504: PUSH
11505: LD_INT 3
11507: ARRAY
11508: GREATEREQUAL
11509: AND
11510: IFFALSE 11522
// result := weapon ;
11512: LD_ADDR_VAR 0 3
11516: PUSH
11517: LD_VAR 0 18
11521: ST_TO_ADDR
// end ; end ;
11522: LD_VAR 0 3
11526: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11527: LD_INT 0
11529: PPUSH
11530: PPUSH
// result := true ;
11531: LD_ADDR_VAR 0 3
11535: PUSH
11536: LD_INT 1
11538: ST_TO_ADDR
// if array1 = array2 then
11539: LD_VAR 0 1
11543: PUSH
11544: LD_VAR 0 2
11548: EQUAL
11549: IFFALSE 11609
// begin for i = 1 to array1 do
11551: LD_ADDR_VAR 0 4
11555: PUSH
11556: DOUBLE
11557: LD_INT 1
11559: DEC
11560: ST_TO_ADDR
11561: LD_VAR 0 1
11565: PUSH
11566: FOR_TO
11567: IFFALSE 11605
// if array1 [ i ] <> array2 [ i ] then
11569: LD_VAR 0 1
11573: PUSH
11574: LD_VAR 0 4
11578: ARRAY
11579: PUSH
11580: LD_VAR 0 2
11584: PUSH
11585: LD_VAR 0 4
11589: ARRAY
11590: NONEQUAL
11591: IFFALSE 11603
// begin result := false ;
11593: LD_ADDR_VAR 0 3
11597: PUSH
11598: LD_INT 0
11600: ST_TO_ADDR
// break ;
11601: GO 11605
// end ;
11603: GO 11566
11605: POP
11606: POP
// end else
11607: GO 11617
// result := false ;
11609: LD_ADDR_VAR 0 3
11613: PUSH
11614: LD_INT 0
11616: ST_TO_ADDR
// end ;
11617: LD_VAR 0 3
11621: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11622: LD_INT 0
11624: PPUSH
11625: PPUSH
// if not array1 or not array2 then
11626: LD_VAR 0 1
11630: NOT
11631: PUSH
11632: LD_VAR 0 2
11636: NOT
11637: OR
11638: IFFALSE 11642
// exit ;
11640: GO 11706
// result := true ;
11642: LD_ADDR_VAR 0 3
11646: PUSH
11647: LD_INT 1
11649: ST_TO_ADDR
// for i = 1 to array1 do
11650: LD_ADDR_VAR 0 4
11654: PUSH
11655: DOUBLE
11656: LD_INT 1
11658: DEC
11659: ST_TO_ADDR
11660: LD_VAR 0 1
11664: PUSH
11665: FOR_TO
11666: IFFALSE 11704
// if array1 [ i ] <> array2 [ i ] then
11668: LD_VAR 0 1
11672: PUSH
11673: LD_VAR 0 4
11677: ARRAY
11678: PUSH
11679: LD_VAR 0 2
11683: PUSH
11684: LD_VAR 0 4
11688: ARRAY
11689: NONEQUAL
11690: IFFALSE 11702
// begin result := false ;
11692: LD_ADDR_VAR 0 3
11696: PUSH
11697: LD_INT 0
11699: ST_TO_ADDR
// break ;
11700: GO 11704
// end ;
11702: GO 11665
11704: POP
11705: POP
// end ;
11706: LD_VAR 0 3
11710: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11711: LD_INT 0
11713: PPUSH
11714: PPUSH
11715: PPUSH
// pom := GetBase ( fac ) ;
11716: LD_ADDR_VAR 0 5
11720: PUSH
11721: LD_VAR 0 1
11725: PPUSH
11726: CALL_OW 274
11730: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11731: LD_ADDR_VAR 0 4
11735: PUSH
11736: LD_VAR 0 2
11740: PUSH
11741: LD_INT 1
11743: ARRAY
11744: PPUSH
11745: LD_VAR 0 2
11749: PUSH
11750: LD_INT 2
11752: ARRAY
11753: PPUSH
11754: LD_VAR 0 2
11758: PUSH
11759: LD_INT 3
11761: ARRAY
11762: PPUSH
11763: LD_VAR 0 2
11767: PUSH
11768: LD_INT 4
11770: ARRAY
11771: PPUSH
11772: CALL_OW 449
11776: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11777: LD_ADDR_VAR 0 3
11781: PUSH
11782: LD_VAR 0 5
11786: PPUSH
11787: LD_INT 1
11789: PPUSH
11790: CALL_OW 275
11794: PUSH
11795: LD_VAR 0 4
11799: PUSH
11800: LD_INT 1
11802: ARRAY
11803: GREATEREQUAL
11804: PUSH
11805: LD_VAR 0 5
11809: PPUSH
11810: LD_INT 2
11812: PPUSH
11813: CALL_OW 275
11817: PUSH
11818: LD_VAR 0 4
11822: PUSH
11823: LD_INT 2
11825: ARRAY
11826: GREATEREQUAL
11827: AND
11828: PUSH
11829: LD_VAR 0 5
11833: PPUSH
11834: LD_INT 3
11836: PPUSH
11837: CALL_OW 275
11841: PUSH
11842: LD_VAR 0 4
11846: PUSH
11847: LD_INT 3
11849: ARRAY
11850: GREATEREQUAL
11851: AND
11852: ST_TO_ADDR
// end ;
11853: LD_VAR 0 3
11857: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11858: LD_INT 0
11860: PPUSH
11861: PPUSH
11862: PPUSH
11863: PPUSH
// pom := GetBase ( building ) ;
11864: LD_ADDR_VAR 0 3
11868: PUSH
11869: LD_VAR 0 1
11873: PPUSH
11874: CALL_OW 274
11878: ST_TO_ADDR
// if not pom then
11879: LD_VAR 0 3
11883: NOT
11884: IFFALSE 11888
// exit ;
11886: GO 12058
// btype := GetBType ( building ) ;
11888: LD_ADDR_VAR 0 5
11892: PUSH
11893: LD_VAR 0 1
11897: PPUSH
11898: CALL_OW 266
11902: ST_TO_ADDR
// if btype = b_armoury then
11903: LD_VAR 0 5
11907: PUSH
11908: LD_INT 4
11910: EQUAL
11911: IFFALSE 11921
// btype := b_barracks ;
11913: LD_ADDR_VAR 0 5
11917: PUSH
11918: LD_INT 5
11920: ST_TO_ADDR
// if btype = b_depot then
11921: LD_VAR 0 5
11925: PUSH
11926: LD_INT 0
11928: EQUAL
11929: IFFALSE 11939
// btype := b_warehouse ;
11931: LD_ADDR_VAR 0 5
11935: PUSH
11936: LD_INT 1
11938: ST_TO_ADDR
// if btype = b_workshop then
11939: LD_VAR 0 5
11943: PUSH
11944: LD_INT 2
11946: EQUAL
11947: IFFALSE 11957
// btype := b_factory ;
11949: LD_ADDR_VAR 0 5
11953: PUSH
11954: LD_INT 3
11956: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11957: LD_ADDR_VAR 0 4
11961: PUSH
11962: LD_VAR 0 5
11966: PPUSH
11967: LD_VAR 0 1
11971: PPUSH
11972: CALL_OW 248
11976: PPUSH
11977: CALL_OW 450
11981: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11982: LD_ADDR_VAR 0 2
11986: PUSH
11987: LD_VAR 0 3
11991: PPUSH
11992: LD_INT 1
11994: PPUSH
11995: CALL_OW 275
11999: PUSH
12000: LD_VAR 0 4
12004: PUSH
12005: LD_INT 1
12007: ARRAY
12008: GREATEREQUAL
12009: PUSH
12010: LD_VAR 0 3
12014: PPUSH
12015: LD_INT 2
12017: PPUSH
12018: CALL_OW 275
12022: PUSH
12023: LD_VAR 0 4
12027: PUSH
12028: LD_INT 2
12030: ARRAY
12031: GREATEREQUAL
12032: AND
12033: PUSH
12034: LD_VAR 0 3
12038: PPUSH
12039: LD_INT 3
12041: PPUSH
12042: CALL_OW 275
12046: PUSH
12047: LD_VAR 0 4
12051: PUSH
12052: LD_INT 3
12054: ARRAY
12055: GREATEREQUAL
12056: AND
12057: ST_TO_ADDR
// end ;
12058: LD_VAR 0 2
12062: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12063: LD_INT 0
12065: PPUSH
12066: PPUSH
12067: PPUSH
// pom := GetBase ( building ) ;
12068: LD_ADDR_VAR 0 4
12072: PUSH
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 274
12082: ST_TO_ADDR
// if not pom then
12083: LD_VAR 0 4
12087: NOT
12088: IFFALSE 12092
// exit ;
12090: GO 12193
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12092: LD_ADDR_VAR 0 5
12096: PUSH
12097: LD_VAR 0 2
12101: PPUSH
12102: LD_VAR 0 1
12106: PPUSH
12107: CALL_OW 248
12111: PPUSH
12112: CALL_OW 450
12116: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12117: LD_ADDR_VAR 0 3
12121: PUSH
12122: LD_VAR 0 4
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: CALL_OW 275
12134: PUSH
12135: LD_VAR 0 5
12139: PUSH
12140: LD_INT 1
12142: ARRAY
12143: GREATEREQUAL
12144: PUSH
12145: LD_VAR 0 4
12149: PPUSH
12150: LD_INT 2
12152: PPUSH
12153: CALL_OW 275
12157: PUSH
12158: LD_VAR 0 5
12162: PUSH
12163: LD_INT 2
12165: ARRAY
12166: GREATEREQUAL
12167: AND
12168: PUSH
12169: LD_VAR 0 4
12173: PPUSH
12174: LD_INT 3
12176: PPUSH
12177: CALL_OW 275
12181: PUSH
12182: LD_VAR 0 5
12186: PUSH
12187: LD_INT 3
12189: ARRAY
12190: GREATEREQUAL
12191: AND
12192: ST_TO_ADDR
// end ;
12193: LD_VAR 0 3
12197: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12198: LD_INT 0
12200: PPUSH
12201: PPUSH
12202: PPUSH
12203: PPUSH
12204: PPUSH
12205: PPUSH
12206: PPUSH
12207: PPUSH
12208: PPUSH
12209: PPUSH
12210: PPUSH
// result := false ;
12211: LD_ADDR_VAR 0 8
12215: PUSH
12216: LD_INT 0
12218: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12219: LD_VAR 0 5
12223: NOT
12224: PUSH
12225: LD_VAR 0 1
12229: NOT
12230: OR
12231: PUSH
12232: LD_VAR 0 2
12236: NOT
12237: OR
12238: PUSH
12239: LD_VAR 0 3
12243: NOT
12244: OR
12245: IFFALSE 12249
// exit ;
12247: GO 13063
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12249: LD_ADDR_VAR 0 14
12253: PUSH
12254: LD_VAR 0 1
12258: PPUSH
12259: LD_VAR 0 2
12263: PPUSH
12264: LD_VAR 0 3
12268: PPUSH
12269: LD_VAR 0 4
12273: PPUSH
12274: LD_VAR 0 5
12278: PUSH
12279: LD_INT 1
12281: ARRAY
12282: PPUSH
12283: CALL_OW 248
12287: PPUSH
12288: LD_INT 0
12290: PPUSH
12291: CALL 14316 0 6
12295: ST_TO_ADDR
// if not hexes then
12296: LD_VAR 0 14
12300: NOT
12301: IFFALSE 12305
// exit ;
12303: GO 13063
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12305: LD_ADDR_VAR 0 17
12309: PUSH
12310: LD_VAR 0 5
12314: PPUSH
12315: LD_INT 22
12317: PUSH
12318: LD_VAR 0 13
12322: PPUSH
12323: CALL_OW 255
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 2
12334: PUSH
12335: LD_INT 30
12337: PUSH
12338: LD_INT 0
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 30
12347: PUSH
12348: LD_INT 1
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PPUSH
12364: CALL_OW 72
12368: ST_TO_ADDR
// for i = 1 to hexes do
12369: LD_ADDR_VAR 0 9
12373: PUSH
12374: DOUBLE
12375: LD_INT 1
12377: DEC
12378: ST_TO_ADDR
12379: LD_VAR 0 14
12383: PUSH
12384: FOR_TO
12385: IFFALSE 13061
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12387: LD_ADDR_VAR 0 13
12391: PUSH
12392: LD_VAR 0 14
12396: PUSH
12397: LD_VAR 0 9
12401: ARRAY
12402: PUSH
12403: LD_INT 1
12405: ARRAY
12406: PPUSH
12407: LD_VAR 0 14
12411: PUSH
12412: LD_VAR 0 9
12416: ARRAY
12417: PUSH
12418: LD_INT 2
12420: ARRAY
12421: PPUSH
12422: CALL_OW 428
12426: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12427: LD_VAR 0 14
12431: PUSH
12432: LD_VAR 0 9
12436: ARRAY
12437: PUSH
12438: LD_INT 1
12440: ARRAY
12441: PPUSH
12442: LD_VAR 0 14
12446: PUSH
12447: LD_VAR 0 9
12451: ARRAY
12452: PUSH
12453: LD_INT 2
12455: ARRAY
12456: PPUSH
12457: CALL_OW 351
12461: PUSH
12462: LD_VAR 0 14
12466: PUSH
12467: LD_VAR 0 9
12471: ARRAY
12472: PUSH
12473: LD_INT 1
12475: ARRAY
12476: PPUSH
12477: LD_VAR 0 14
12481: PUSH
12482: LD_VAR 0 9
12486: ARRAY
12487: PUSH
12488: LD_INT 2
12490: ARRAY
12491: PPUSH
12492: CALL_OW 488
12496: NOT
12497: OR
12498: PUSH
12499: LD_VAR 0 13
12503: PPUSH
12504: CALL_OW 247
12508: PUSH
12509: LD_INT 3
12511: EQUAL
12512: OR
12513: IFFALSE 12519
// exit ;
12515: POP
12516: POP
12517: GO 13063
// if not tmp then
12519: LD_VAR 0 13
12523: NOT
12524: IFFALSE 12528
// continue ;
12526: GO 12384
// result := true ;
12528: LD_ADDR_VAR 0 8
12532: PUSH
12533: LD_INT 1
12535: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12536: LD_VAR 0 6
12540: PUSH
12541: LD_VAR 0 13
12545: PPUSH
12546: CALL_OW 247
12550: PUSH
12551: LD_INT 2
12553: EQUAL
12554: AND
12555: PUSH
12556: LD_VAR 0 13
12560: PPUSH
12561: CALL_OW 263
12565: PUSH
12566: LD_INT 1
12568: EQUAL
12569: AND
12570: IFFALSE 12734
// begin if IsDrivenBy ( tmp ) then
12572: LD_VAR 0 13
12576: PPUSH
12577: CALL_OW 311
12581: IFFALSE 12585
// continue ;
12583: GO 12384
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12585: LD_VAR 0 6
12589: PPUSH
12590: LD_INT 3
12592: PUSH
12593: LD_INT 60
12595: PUSH
12596: EMPTY
12597: LIST
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: LD_INT 3
12605: PUSH
12606: LD_INT 55
12608: PUSH
12609: EMPTY
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PPUSH
12620: CALL_OW 72
12624: IFFALSE 12732
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12626: LD_ADDR_VAR 0 18
12630: PUSH
12631: LD_VAR 0 6
12635: PPUSH
12636: LD_INT 3
12638: PUSH
12639: LD_INT 60
12641: PUSH
12642: EMPTY
12643: LIST
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 3
12651: PUSH
12652: LD_INT 55
12654: PUSH
12655: EMPTY
12656: LIST
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 72
12670: PUSH
12671: LD_INT 1
12673: ARRAY
12674: ST_TO_ADDR
// if IsInUnit ( driver ) then
12675: LD_VAR 0 18
12679: PPUSH
12680: CALL_OW 310
12684: IFFALSE 12695
// ComExit ( driver ) ;
12686: LD_VAR 0 18
12690: PPUSH
12691: CALL 38095 0 1
// AddComEnterUnit ( driver , tmp ) ;
12695: LD_VAR 0 18
12699: PPUSH
12700: LD_VAR 0 13
12704: PPUSH
12705: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12709: LD_VAR 0 18
12713: PPUSH
12714: LD_VAR 0 7
12718: PPUSH
12719: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12723: LD_VAR 0 18
12727: PPUSH
12728: CALL_OW 181
// end ; continue ;
12732: GO 12384
// end ; if not cleaners or not tmp in cleaners then
12734: LD_VAR 0 6
12738: NOT
12739: PUSH
12740: LD_VAR 0 13
12744: PUSH
12745: LD_VAR 0 6
12749: IN
12750: NOT
12751: OR
12752: IFFALSE 13059
// begin if dep then
12754: LD_VAR 0 17
12758: IFFALSE 12894
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12760: LD_ADDR_VAR 0 16
12764: PUSH
12765: LD_VAR 0 17
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: PPUSH
12774: CALL_OW 250
12778: PPUSH
12779: LD_VAR 0 17
12783: PUSH
12784: LD_INT 1
12786: ARRAY
12787: PPUSH
12788: CALL_OW 254
12792: PPUSH
12793: LD_INT 5
12795: PPUSH
12796: CALL_OW 272
12800: PUSH
12801: LD_VAR 0 17
12805: PUSH
12806: LD_INT 1
12808: ARRAY
12809: PPUSH
12810: CALL_OW 251
12814: PPUSH
12815: LD_VAR 0 17
12819: PUSH
12820: LD_INT 1
12822: ARRAY
12823: PPUSH
12824: CALL_OW 254
12828: PPUSH
12829: LD_INT 5
12831: PPUSH
12832: CALL_OW 273
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12841: LD_VAR 0 16
12845: PUSH
12846: LD_INT 1
12848: ARRAY
12849: PPUSH
12850: LD_VAR 0 16
12854: PUSH
12855: LD_INT 2
12857: ARRAY
12858: PPUSH
12859: CALL_OW 488
12863: IFFALSE 12894
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12865: LD_VAR 0 13
12869: PPUSH
12870: LD_VAR 0 16
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: LD_VAR 0 16
12883: PUSH
12884: LD_INT 2
12886: ARRAY
12887: PPUSH
12888: CALL_OW 111
// continue ;
12892: GO 12384
// end ; end ; r := GetDir ( tmp ) ;
12894: LD_ADDR_VAR 0 15
12898: PUSH
12899: LD_VAR 0 13
12903: PPUSH
12904: CALL_OW 254
12908: ST_TO_ADDR
// if r = 5 then
12909: LD_VAR 0 15
12913: PUSH
12914: LD_INT 5
12916: EQUAL
12917: IFFALSE 12927
// r := 0 ;
12919: LD_ADDR_VAR 0 15
12923: PUSH
12924: LD_INT 0
12926: ST_TO_ADDR
// for j = r to 5 do
12927: LD_ADDR_VAR 0 10
12931: PUSH
12932: DOUBLE
12933: LD_VAR 0 15
12937: DEC
12938: ST_TO_ADDR
12939: LD_INT 5
12941: PUSH
12942: FOR_TO
12943: IFFALSE 13057
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12945: LD_ADDR_VAR 0 11
12949: PUSH
12950: LD_VAR 0 13
12954: PPUSH
12955: CALL_OW 250
12959: PPUSH
12960: LD_VAR 0 10
12964: PPUSH
12965: LD_INT 2
12967: PPUSH
12968: CALL_OW 272
12972: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12973: LD_ADDR_VAR 0 12
12977: PUSH
12978: LD_VAR 0 13
12982: PPUSH
12983: CALL_OW 251
12987: PPUSH
12988: LD_VAR 0 10
12992: PPUSH
12993: LD_INT 2
12995: PPUSH
12996: CALL_OW 273
13000: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13001: LD_VAR 0 11
13005: PPUSH
13006: LD_VAR 0 12
13010: PPUSH
13011: CALL_OW 488
13015: PUSH
13016: LD_VAR 0 11
13020: PPUSH
13021: LD_VAR 0 12
13025: PPUSH
13026: CALL_OW 428
13030: NOT
13031: AND
13032: IFFALSE 13055
// begin ComMoveXY ( tmp , _x , _y ) ;
13034: LD_VAR 0 13
13038: PPUSH
13039: LD_VAR 0 11
13043: PPUSH
13044: LD_VAR 0 12
13048: PPUSH
13049: CALL_OW 111
// break ;
13053: GO 13057
// end ; end ;
13055: GO 12942
13057: POP
13058: POP
// end ; end ;
13059: GO 12384
13061: POP
13062: POP
// end ;
13063: LD_VAR 0 8
13067: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13068: LD_INT 0
13070: PPUSH
// result := true ;
13071: LD_ADDR_VAR 0 3
13075: PUSH
13076: LD_INT 1
13078: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13079: LD_VAR 0 2
13083: PUSH
13084: LD_INT 24
13086: DOUBLE
13087: EQUAL
13088: IFTRUE 13098
13090: LD_INT 33
13092: DOUBLE
13093: EQUAL
13094: IFTRUE 13098
13096: GO 13123
13098: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13099: LD_ADDR_VAR 0 3
13103: PUSH
13104: LD_INT 32
13106: PPUSH
13107: LD_VAR 0 1
13111: PPUSH
13112: CALL_OW 321
13116: PUSH
13117: LD_INT 2
13119: EQUAL
13120: ST_TO_ADDR
13121: GO 13439
13123: LD_INT 20
13125: DOUBLE
13126: EQUAL
13127: IFTRUE 13131
13129: GO 13156
13131: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13132: LD_ADDR_VAR 0 3
13136: PUSH
13137: LD_INT 6
13139: PPUSH
13140: LD_VAR 0 1
13144: PPUSH
13145: CALL_OW 321
13149: PUSH
13150: LD_INT 2
13152: EQUAL
13153: ST_TO_ADDR
13154: GO 13439
13156: LD_INT 22
13158: DOUBLE
13159: EQUAL
13160: IFTRUE 13170
13162: LD_INT 36
13164: DOUBLE
13165: EQUAL
13166: IFTRUE 13170
13168: GO 13195
13170: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13171: LD_ADDR_VAR 0 3
13175: PUSH
13176: LD_INT 15
13178: PPUSH
13179: LD_VAR 0 1
13183: PPUSH
13184: CALL_OW 321
13188: PUSH
13189: LD_INT 2
13191: EQUAL
13192: ST_TO_ADDR
13193: GO 13439
13195: LD_INT 30
13197: DOUBLE
13198: EQUAL
13199: IFTRUE 13203
13201: GO 13228
13203: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13204: LD_ADDR_VAR 0 3
13208: PUSH
13209: LD_INT 20
13211: PPUSH
13212: LD_VAR 0 1
13216: PPUSH
13217: CALL_OW 321
13221: PUSH
13222: LD_INT 2
13224: EQUAL
13225: ST_TO_ADDR
13226: GO 13439
13228: LD_INT 28
13230: DOUBLE
13231: EQUAL
13232: IFTRUE 13242
13234: LD_INT 21
13236: DOUBLE
13237: EQUAL
13238: IFTRUE 13242
13240: GO 13267
13242: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13243: LD_ADDR_VAR 0 3
13247: PUSH
13248: LD_INT 21
13250: PPUSH
13251: LD_VAR 0 1
13255: PPUSH
13256: CALL_OW 321
13260: PUSH
13261: LD_INT 2
13263: EQUAL
13264: ST_TO_ADDR
13265: GO 13439
13267: LD_INT 16
13269: DOUBLE
13270: EQUAL
13271: IFTRUE 13275
13273: GO 13300
13275: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13276: LD_ADDR_VAR 0 3
13280: PUSH
13281: LD_INT 84
13283: PPUSH
13284: LD_VAR 0 1
13288: PPUSH
13289: CALL_OW 321
13293: PUSH
13294: LD_INT 2
13296: EQUAL
13297: ST_TO_ADDR
13298: GO 13439
13300: LD_INT 19
13302: DOUBLE
13303: EQUAL
13304: IFTRUE 13314
13306: LD_INT 23
13308: DOUBLE
13309: EQUAL
13310: IFTRUE 13314
13312: GO 13339
13314: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13315: LD_ADDR_VAR 0 3
13319: PUSH
13320: LD_INT 83
13322: PPUSH
13323: LD_VAR 0 1
13327: PPUSH
13328: CALL_OW 321
13332: PUSH
13333: LD_INT 2
13335: EQUAL
13336: ST_TO_ADDR
13337: GO 13439
13339: LD_INT 17
13341: DOUBLE
13342: EQUAL
13343: IFTRUE 13347
13345: GO 13372
13347: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13348: LD_ADDR_VAR 0 3
13352: PUSH
13353: LD_INT 39
13355: PPUSH
13356: LD_VAR 0 1
13360: PPUSH
13361: CALL_OW 321
13365: PUSH
13366: LD_INT 2
13368: EQUAL
13369: ST_TO_ADDR
13370: GO 13439
13372: LD_INT 18
13374: DOUBLE
13375: EQUAL
13376: IFTRUE 13380
13378: GO 13405
13380: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13381: LD_ADDR_VAR 0 3
13385: PUSH
13386: LD_INT 40
13388: PPUSH
13389: LD_VAR 0 1
13393: PPUSH
13394: CALL_OW 321
13398: PUSH
13399: LD_INT 2
13401: EQUAL
13402: ST_TO_ADDR
13403: GO 13439
13405: LD_INT 27
13407: DOUBLE
13408: EQUAL
13409: IFTRUE 13413
13411: GO 13438
13413: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13414: LD_ADDR_VAR 0 3
13418: PUSH
13419: LD_INT 35
13421: PPUSH
13422: LD_VAR 0 1
13426: PPUSH
13427: CALL_OW 321
13431: PUSH
13432: LD_INT 2
13434: EQUAL
13435: ST_TO_ADDR
13436: GO 13439
13438: POP
// end ;
13439: LD_VAR 0 3
13443: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13444: LD_INT 0
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
13450: PPUSH
13451: PPUSH
13452: PPUSH
13453: PPUSH
13454: PPUSH
13455: PPUSH
13456: PPUSH
// result := false ;
13457: LD_ADDR_VAR 0 6
13461: PUSH
13462: LD_INT 0
13464: ST_TO_ADDR
// if btype = b_depot then
13465: LD_VAR 0 2
13469: PUSH
13470: LD_INT 0
13472: EQUAL
13473: IFFALSE 13485
// begin result := true ;
13475: LD_ADDR_VAR 0 6
13479: PUSH
13480: LD_INT 1
13482: ST_TO_ADDR
// exit ;
13483: GO 14311
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13485: LD_VAR 0 1
13489: NOT
13490: PUSH
13491: LD_VAR 0 1
13495: PPUSH
13496: CALL_OW 266
13500: PUSH
13501: LD_INT 0
13503: PUSH
13504: LD_INT 1
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: IN
13511: NOT
13512: OR
13513: PUSH
13514: LD_VAR 0 2
13518: NOT
13519: OR
13520: PUSH
13521: LD_VAR 0 5
13525: PUSH
13526: LD_INT 0
13528: PUSH
13529: LD_INT 1
13531: PUSH
13532: LD_INT 2
13534: PUSH
13535: LD_INT 3
13537: PUSH
13538: LD_INT 4
13540: PUSH
13541: LD_INT 5
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: IN
13552: NOT
13553: OR
13554: PUSH
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_VAR 0 4
13564: PPUSH
13565: CALL_OW 488
13569: NOT
13570: OR
13571: IFFALSE 13575
// exit ;
13573: GO 14311
// side := GetSide ( depot ) ;
13575: LD_ADDR_VAR 0 9
13579: PUSH
13580: LD_VAR 0 1
13584: PPUSH
13585: CALL_OW 255
13589: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13590: LD_VAR 0 9
13594: PPUSH
13595: LD_VAR 0 2
13599: PPUSH
13600: CALL 13068 0 2
13604: NOT
13605: IFFALSE 13609
// exit ;
13607: GO 14311
// pom := GetBase ( depot ) ;
13609: LD_ADDR_VAR 0 10
13613: PUSH
13614: LD_VAR 0 1
13618: PPUSH
13619: CALL_OW 274
13623: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13624: LD_ADDR_VAR 0 11
13628: PUSH
13629: LD_VAR 0 2
13633: PPUSH
13634: LD_VAR 0 1
13638: PPUSH
13639: CALL_OW 248
13643: PPUSH
13644: CALL_OW 450
13648: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13649: LD_VAR 0 10
13653: PPUSH
13654: LD_INT 1
13656: PPUSH
13657: CALL_OW 275
13661: PUSH
13662: LD_VAR 0 11
13666: PUSH
13667: LD_INT 1
13669: ARRAY
13670: GREATEREQUAL
13671: PUSH
13672: LD_VAR 0 10
13676: PPUSH
13677: LD_INT 2
13679: PPUSH
13680: CALL_OW 275
13684: PUSH
13685: LD_VAR 0 11
13689: PUSH
13690: LD_INT 2
13692: ARRAY
13693: GREATEREQUAL
13694: AND
13695: PUSH
13696: LD_VAR 0 10
13700: PPUSH
13701: LD_INT 3
13703: PPUSH
13704: CALL_OW 275
13708: PUSH
13709: LD_VAR 0 11
13713: PUSH
13714: LD_INT 3
13716: ARRAY
13717: GREATEREQUAL
13718: AND
13719: NOT
13720: IFFALSE 13724
// exit ;
13722: GO 14311
// if GetBType ( depot ) = b_depot then
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 266
13733: PUSH
13734: LD_INT 0
13736: EQUAL
13737: IFFALSE 13749
// dist := 28 else
13739: LD_ADDR_VAR 0 14
13743: PUSH
13744: LD_INT 28
13746: ST_TO_ADDR
13747: GO 13757
// dist := 36 ;
13749: LD_ADDR_VAR 0 14
13753: PUSH
13754: LD_INT 36
13756: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13757: LD_VAR 0 1
13761: PPUSH
13762: LD_VAR 0 3
13766: PPUSH
13767: LD_VAR 0 4
13771: PPUSH
13772: CALL_OW 297
13776: PUSH
13777: LD_VAR 0 14
13781: GREATER
13782: IFFALSE 13786
// exit ;
13784: GO 14311
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13786: LD_ADDR_VAR 0 12
13790: PUSH
13791: LD_VAR 0 2
13795: PPUSH
13796: LD_VAR 0 3
13800: PPUSH
13801: LD_VAR 0 4
13805: PPUSH
13806: LD_VAR 0 5
13810: PPUSH
13811: LD_VAR 0 1
13815: PPUSH
13816: CALL_OW 248
13820: PPUSH
13821: LD_INT 0
13823: PPUSH
13824: CALL 14316 0 6
13828: ST_TO_ADDR
// if not hexes then
13829: LD_VAR 0 12
13833: NOT
13834: IFFALSE 13838
// exit ;
13836: GO 14311
// hex := GetHexInfo ( x , y ) ;
13838: LD_ADDR_VAR 0 15
13842: PUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: LD_VAR 0 4
13852: PPUSH
13853: CALL_OW 546
13857: ST_TO_ADDR
// if hex [ 1 ] then
13858: LD_VAR 0 15
13862: PUSH
13863: LD_INT 1
13865: ARRAY
13866: IFFALSE 13870
// exit ;
13868: GO 14311
// height := hex [ 2 ] ;
13870: LD_ADDR_VAR 0 13
13874: PUSH
13875: LD_VAR 0 15
13879: PUSH
13880: LD_INT 2
13882: ARRAY
13883: ST_TO_ADDR
// for i = 1 to hexes do
13884: LD_ADDR_VAR 0 7
13888: PUSH
13889: DOUBLE
13890: LD_INT 1
13892: DEC
13893: ST_TO_ADDR
13894: LD_VAR 0 12
13898: PUSH
13899: FOR_TO
13900: IFFALSE 14230
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13902: LD_VAR 0 12
13906: PUSH
13907: LD_VAR 0 7
13911: ARRAY
13912: PUSH
13913: LD_INT 1
13915: ARRAY
13916: PPUSH
13917: LD_VAR 0 12
13921: PUSH
13922: LD_VAR 0 7
13926: ARRAY
13927: PUSH
13928: LD_INT 2
13930: ARRAY
13931: PPUSH
13932: CALL_OW 488
13936: NOT
13937: PUSH
13938: LD_VAR 0 12
13942: PUSH
13943: LD_VAR 0 7
13947: ARRAY
13948: PUSH
13949: LD_INT 1
13951: ARRAY
13952: PPUSH
13953: LD_VAR 0 12
13957: PUSH
13958: LD_VAR 0 7
13962: ARRAY
13963: PUSH
13964: LD_INT 2
13966: ARRAY
13967: PPUSH
13968: CALL_OW 428
13972: PUSH
13973: LD_INT 0
13975: GREATER
13976: OR
13977: PUSH
13978: LD_VAR 0 12
13982: PUSH
13983: LD_VAR 0 7
13987: ARRAY
13988: PUSH
13989: LD_INT 1
13991: ARRAY
13992: PPUSH
13993: LD_VAR 0 12
13997: PUSH
13998: LD_VAR 0 7
14002: ARRAY
14003: PUSH
14004: LD_INT 2
14006: ARRAY
14007: PPUSH
14008: CALL_OW 351
14012: OR
14013: IFFALSE 14019
// exit ;
14015: POP
14016: POP
14017: GO 14311
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14019: LD_ADDR_VAR 0 8
14023: PUSH
14024: LD_VAR 0 12
14028: PUSH
14029: LD_VAR 0 7
14033: ARRAY
14034: PUSH
14035: LD_INT 1
14037: ARRAY
14038: PPUSH
14039: LD_VAR 0 12
14043: PUSH
14044: LD_VAR 0 7
14048: ARRAY
14049: PUSH
14050: LD_INT 2
14052: ARRAY
14053: PPUSH
14054: CALL_OW 546
14058: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14059: LD_VAR 0 8
14063: PUSH
14064: LD_INT 1
14066: ARRAY
14067: PUSH
14068: LD_VAR 0 8
14072: PUSH
14073: LD_INT 2
14075: ARRAY
14076: PUSH
14077: LD_VAR 0 13
14081: PUSH
14082: LD_INT 2
14084: PLUS
14085: GREATER
14086: OR
14087: PUSH
14088: LD_VAR 0 8
14092: PUSH
14093: LD_INT 2
14095: ARRAY
14096: PUSH
14097: LD_VAR 0 13
14101: PUSH
14102: LD_INT 2
14104: MINUS
14105: LESS
14106: OR
14107: PUSH
14108: LD_VAR 0 8
14112: PUSH
14113: LD_INT 3
14115: ARRAY
14116: PUSH
14117: LD_INT 0
14119: PUSH
14120: LD_INT 8
14122: PUSH
14123: LD_INT 9
14125: PUSH
14126: LD_INT 10
14128: PUSH
14129: LD_INT 11
14131: PUSH
14132: LD_INT 12
14134: PUSH
14135: LD_INT 13
14137: PUSH
14138: LD_INT 16
14140: PUSH
14141: LD_INT 17
14143: PUSH
14144: LD_INT 18
14146: PUSH
14147: LD_INT 19
14149: PUSH
14150: LD_INT 20
14152: PUSH
14153: LD_INT 21
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: IN
14171: NOT
14172: OR
14173: PUSH
14174: LD_VAR 0 8
14178: PUSH
14179: LD_INT 5
14181: ARRAY
14182: NOT
14183: OR
14184: PUSH
14185: LD_VAR 0 8
14189: PUSH
14190: LD_INT 6
14192: ARRAY
14193: PUSH
14194: LD_INT 1
14196: PUSH
14197: LD_INT 2
14199: PUSH
14200: LD_INT 7
14202: PUSH
14203: LD_INT 9
14205: PUSH
14206: LD_INT 10
14208: PUSH
14209: LD_INT 11
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: IN
14220: NOT
14221: OR
14222: IFFALSE 14228
// exit ;
14224: POP
14225: POP
14226: GO 14311
// end ;
14228: GO 13899
14230: POP
14231: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14232: LD_VAR 0 9
14236: PPUSH
14237: LD_VAR 0 3
14241: PPUSH
14242: LD_VAR 0 4
14246: PPUSH
14247: LD_INT 20
14249: PPUSH
14250: CALL 6234 0 4
14254: PUSH
14255: LD_INT 4
14257: ARRAY
14258: IFFALSE 14262
// exit ;
14260: GO 14311
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14262: LD_VAR 0 2
14266: PUSH
14267: LD_INT 29
14269: PUSH
14270: LD_INT 30
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: IN
14277: PUSH
14278: LD_VAR 0 3
14282: PPUSH
14283: LD_VAR 0 4
14287: PPUSH
14288: LD_VAR 0 9
14292: PPUSH
14293: CALL_OW 440
14297: NOT
14298: AND
14299: IFFALSE 14303
// exit ;
14301: GO 14311
// result := true ;
14303: LD_ADDR_VAR 0 6
14307: PUSH
14308: LD_INT 1
14310: ST_TO_ADDR
// end ;
14311: LD_VAR 0 6
14315: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14316: LD_INT 0
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
14323: PPUSH
14324: PPUSH
14325: PPUSH
14326: PPUSH
14327: PPUSH
14328: PPUSH
14329: PPUSH
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
14335: PPUSH
14336: PPUSH
14337: PPUSH
14338: PPUSH
14339: PPUSH
14340: PPUSH
14341: PPUSH
14342: PPUSH
14343: PPUSH
14344: PPUSH
14345: PPUSH
14346: PPUSH
14347: PPUSH
14348: PPUSH
14349: PPUSH
14350: PPUSH
14351: PPUSH
14352: PPUSH
14353: PPUSH
14354: PPUSH
14355: PPUSH
14356: PPUSH
14357: PPUSH
14358: PPUSH
14359: PPUSH
14360: PPUSH
14361: PPUSH
14362: PPUSH
14363: PPUSH
14364: PPUSH
14365: PPUSH
14366: PPUSH
14367: PPUSH
14368: PPUSH
14369: PPUSH
14370: PPUSH
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
// result = [ ] ;
14376: LD_ADDR_VAR 0 7
14380: PUSH
14381: EMPTY
14382: ST_TO_ADDR
// temp_list = [ ] ;
14383: LD_ADDR_VAR 0 9
14387: PUSH
14388: EMPTY
14389: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14390: LD_VAR 0 4
14394: PUSH
14395: LD_INT 0
14397: PUSH
14398: LD_INT 1
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: LD_INT 3
14406: PUSH
14407: LD_INT 4
14409: PUSH
14410: LD_INT 5
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: IN
14421: NOT
14422: PUSH
14423: LD_VAR 0 1
14427: PUSH
14428: LD_INT 0
14430: PUSH
14431: LD_INT 1
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: IN
14438: PUSH
14439: LD_VAR 0 5
14443: PUSH
14444: LD_INT 1
14446: PUSH
14447: LD_INT 2
14449: PUSH
14450: LD_INT 3
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: IN
14458: NOT
14459: AND
14460: OR
14461: IFFALSE 14465
// exit ;
14463: GO 32856
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14465: LD_VAR 0 1
14469: PUSH
14470: LD_INT 6
14472: PUSH
14473: LD_INT 7
14475: PUSH
14476: LD_INT 8
14478: PUSH
14479: LD_INT 13
14481: PUSH
14482: LD_INT 12
14484: PUSH
14485: LD_INT 15
14487: PUSH
14488: LD_INT 11
14490: PUSH
14491: LD_INT 14
14493: PUSH
14494: LD_INT 10
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: IN
14508: IFFALSE 14518
// btype = b_lab ;
14510: LD_ADDR_VAR 0 1
14514: PUSH
14515: LD_INT 6
14517: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14518: LD_VAR 0 6
14522: PUSH
14523: LD_INT 0
14525: PUSH
14526: LD_INT 1
14528: PUSH
14529: LD_INT 2
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: LIST
14536: IN
14537: NOT
14538: PUSH
14539: LD_VAR 0 1
14543: PUSH
14544: LD_INT 0
14546: PUSH
14547: LD_INT 1
14549: PUSH
14550: LD_INT 2
14552: PUSH
14553: LD_INT 3
14555: PUSH
14556: LD_INT 6
14558: PUSH
14559: LD_INT 36
14561: PUSH
14562: LD_INT 4
14564: PUSH
14565: LD_INT 5
14567: PUSH
14568: LD_INT 31
14570: PUSH
14571: LD_INT 32
14573: PUSH
14574: LD_INT 33
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: IN
14590: NOT
14591: PUSH
14592: LD_VAR 0 6
14596: PUSH
14597: LD_INT 1
14599: EQUAL
14600: AND
14601: OR
14602: PUSH
14603: LD_VAR 0 1
14607: PUSH
14608: LD_INT 2
14610: PUSH
14611: LD_INT 3
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: IN
14618: NOT
14619: PUSH
14620: LD_VAR 0 6
14624: PUSH
14625: LD_INT 2
14627: EQUAL
14628: AND
14629: OR
14630: IFFALSE 14640
// mode = 0 ;
14632: LD_ADDR_VAR 0 6
14636: PUSH
14637: LD_INT 0
14639: ST_TO_ADDR
// case mode of 0 :
14640: LD_VAR 0 6
14644: PUSH
14645: LD_INT 0
14647: DOUBLE
14648: EQUAL
14649: IFTRUE 14653
14651: GO 26106
14653: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14654: LD_ADDR_VAR 0 11
14658: PUSH
14659: LD_INT 0
14661: PUSH
14662: LD_INT 0
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 0
14671: PUSH
14672: LD_INT 1
14674: NEG
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 1
14682: PUSH
14683: LD_INT 0
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 1
14692: PUSH
14693: LD_INT 1
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 0
14702: PUSH
14703: LD_INT 1
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 1
14712: NEG
14713: PUSH
14714: LD_INT 0
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: LD_INT 1
14723: NEG
14724: PUSH
14725: LD_INT 1
14727: NEG
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 1
14735: NEG
14736: PUSH
14737: LD_INT 2
14739: NEG
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 0
14747: PUSH
14748: LD_INT 2
14750: NEG
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 1
14758: PUSH
14759: LD_INT 1
14761: NEG
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 1
14769: PUSH
14770: LD_INT 2
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 0
14779: PUSH
14780: LD_INT 2
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 1
14789: NEG
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 1
14800: PUSH
14801: LD_INT 3
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 0
14810: PUSH
14811: LD_INT 3
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 1
14820: NEG
14821: PUSH
14822: LD_INT 2
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14847: LD_ADDR_VAR 0 12
14851: PUSH
14852: LD_INT 0
14854: PUSH
14855: LD_INT 0
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 0
14864: PUSH
14865: LD_INT 1
14867: NEG
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 1
14875: PUSH
14876: LD_INT 0
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 1
14885: PUSH
14886: LD_INT 1
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 0
14895: PUSH
14896: LD_INT 1
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 1
14905: NEG
14906: PUSH
14907: LD_INT 0
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 1
14916: NEG
14917: PUSH
14918: LD_INT 1
14920: NEG
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 1
14928: PUSH
14929: LD_INT 1
14931: NEG
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 2
14939: PUSH
14940: LD_INT 0
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 2
14949: PUSH
14950: LD_INT 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 1
14959: NEG
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 2
14970: NEG
14971: PUSH
14972: LD_INT 0
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 2
14981: NEG
14982: PUSH
14983: LD_INT 1
14985: NEG
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 2
14993: NEG
14994: PUSH
14995: LD_INT 1
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 3
15004: NEG
15005: PUSH
15006: LD_INT 0
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 3
15015: NEG
15016: PUSH
15017: LD_INT 1
15019: NEG
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15043: LD_ADDR_VAR 0 13
15047: PUSH
15048: LD_INT 0
15050: PUSH
15051: LD_INT 0
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 0
15060: PUSH
15061: LD_INT 1
15063: NEG
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 1
15071: PUSH
15072: LD_INT 0
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 1
15081: PUSH
15082: LD_INT 1
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 0
15091: PUSH
15092: LD_INT 1
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 1
15101: NEG
15102: PUSH
15103: LD_INT 0
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 1
15112: NEG
15113: PUSH
15114: LD_INT 1
15116: NEG
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 1
15124: NEG
15125: PUSH
15126: LD_INT 2
15128: NEG
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: LD_INT 2
15136: PUSH
15137: LD_INT 1
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 2
15146: PUSH
15147: LD_INT 2
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 1
15156: PUSH
15157: LD_INT 2
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 2
15166: NEG
15167: PUSH
15168: LD_INT 1
15170: NEG
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 2
15178: NEG
15179: PUSH
15180: LD_INT 2
15182: NEG
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 2
15190: NEG
15191: PUSH
15192: LD_INT 3
15194: NEG
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 3
15202: NEG
15203: PUSH
15204: LD_INT 2
15206: NEG
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 3
15214: NEG
15215: PUSH
15216: LD_INT 3
15218: NEG
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15242: LD_ADDR_VAR 0 14
15246: PUSH
15247: LD_INT 0
15249: PUSH
15250: LD_INT 0
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: LD_INT 0
15259: PUSH
15260: LD_INT 1
15262: NEG
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PUSH
15268: LD_INT 1
15270: PUSH
15271: LD_INT 0
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 1
15280: PUSH
15281: LD_INT 1
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 0
15290: PUSH
15291: LD_INT 1
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 1
15300: NEG
15301: PUSH
15302: LD_INT 0
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 1
15311: NEG
15312: PUSH
15313: LD_INT 1
15315: NEG
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: LD_INT 1
15323: NEG
15324: PUSH
15325: LD_INT 2
15327: NEG
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 0
15335: PUSH
15336: LD_INT 2
15338: NEG
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 1
15346: PUSH
15347: LD_INT 1
15349: NEG
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 1
15357: PUSH
15358: LD_INT 2
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 0
15367: PUSH
15368: LD_INT 2
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: PUSH
15375: LD_INT 1
15377: NEG
15378: PUSH
15379: LD_INT 1
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 1
15388: NEG
15389: PUSH
15390: LD_INT 3
15392: NEG
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 0
15400: PUSH
15401: LD_INT 3
15403: NEG
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: LD_INT 1
15411: PUSH
15412: LD_INT 2
15414: NEG
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15438: LD_ADDR_VAR 0 15
15442: PUSH
15443: LD_INT 0
15445: PUSH
15446: LD_INT 0
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 0
15455: PUSH
15456: LD_INT 1
15458: NEG
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: LD_INT 0
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: LD_INT 1
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 0
15486: PUSH
15487: LD_INT 1
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 1
15496: NEG
15497: PUSH
15498: LD_INT 0
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 1
15507: NEG
15508: PUSH
15509: LD_INT 1
15511: NEG
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: LD_INT 1
15522: NEG
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 2
15530: PUSH
15531: LD_INT 0
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 2
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: LD_INT 1
15550: NEG
15551: PUSH
15552: LD_INT 1
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 2
15561: NEG
15562: PUSH
15563: LD_INT 0
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 2
15572: NEG
15573: PUSH
15574: LD_INT 1
15576: NEG
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 2
15584: PUSH
15585: LD_INT 1
15587: NEG
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 3
15595: PUSH
15596: LD_INT 0
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 3
15605: PUSH
15606: LD_INT 1
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15631: LD_ADDR_VAR 0 16
15635: PUSH
15636: LD_INT 0
15638: PUSH
15639: LD_INT 0
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 0
15648: PUSH
15649: LD_INT 1
15651: NEG
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 1
15659: PUSH
15660: LD_INT 0
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 1
15669: PUSH
15670: LD_INT 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 0
15679: PUSH
15680: LD_INT 1
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 1
15689: NEG
15690: PUSH
15691: LD_INT 0
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 1
15700: NEG
15701: PUSH
15702: LD_INT 1
15704: NEG
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PUSH
15710: LD_INT 1
15712: NEG
15713: PUSH
15714: LD_INT 2
15716: NEG
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 2
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 2
15734: PUSH
15735: LD_INT 2
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 1
15744: PUSH
15745: LD_INT 2
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 2
15754: NEG
15755: PUSH
15756: LD_INT 1
15758: NEG
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: PUSH
15764: LD_INT 2
15766: NEG
15767: PUSH
15768: LD_INT 2
15770: NEG
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 3
15778: PUSH
15779: LD_INT 2
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 3
15788: PUSH
15789: LD_INT 3
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 2
15798: PUSH
15799: LD_INT 3
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15824: LD_ADDR_VAR 0 17
15828: PUSH
15829: LD_INT 0
15831: PUSH
15832: LD_INT 0
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 0
15841: PUSH
15842: LD_INT 1
15844: NEG
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 1
15852: PUSH
15853: LD_INT 0
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 1
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 0
15872: PUSH
15873: LD_INT 1
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 1
15882: NEG
15883: PUSH
15884: LD_INT 0
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 1
15893: NEG
15894: PUSH
15895: LD_INT 1
15897: NEG
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 1
15905: NEG
15906: PUSH
15907: LD_INT 2
15909: NEG
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 0
15917: PUSH
15918: LD_INT 2
15920: NEG
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: LD_INT 1
15931: NEG
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: LD_INT 2
15939: PUSH
15940: LD_INT 0
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 2
15949: PUSH
15950: LD_INT 1
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: LD_INT 2
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 1
15969: PUSH
15970: LD_INT 2
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 0
15979: PUSH
15980: LD_INT 2
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 1
15989: NEG
15990: PUSH
15991: LD_INT 1
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 2
16000: NEG
16001: PUSH
16002: LD_INT 0
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 2
16011: NEG
16012: PUSH
16013: LD_INT 1
16015: NEG
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: LD_INT 2
16023: NEG
16024: PUSH
16025: LD_INT 2
16027: NEG
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16054: LD_ADDR_VAR 0 18
16058: PUSH
16059: LD_INT 0
16061: PUSH
16062: LD_INT 0
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 0
16071: PUSH
16072: LD_INT 1
16074: NEG
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 1
16082: PUSH
16083: LD_INT 0
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 1
16092: PUSH
16093: LD_INT 1
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 0
16102: PUSH
16103: LD_INT 1
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 1
16112: NEG
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 1
16123: NEG
16124: PUSH
16125: LD_INT 1
16127: NEG
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 1
16135: NEG
16136: PUSH
16137: LD_INT 2
16139: NEG
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 0
16147: PUSH
16148: LD_INT 2
16150: NEG
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 1
16158: PUSH
16159: LD_INT 1
16161: NEG
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 2
16169: PUSH
16170: LD_INT 0
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 2
16179: PUSH
16180: LD_INT 1
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 2
16189: PUSH
16190: LD_INT 2
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 1
16199: PUSH
16200: LD_INT 2
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 0
16209: PUSH
16210: LD_INT 2
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 1
16219: NEG
16220: PUSH
16221: LD_INT 1
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 2
16230: NEG
16231: PUSH
16232: LD_INT 0
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 2
16241: NEG
16242: PUSH
16243: LD_INT 1
16245: NEG
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 2
16253: NEG
16254: PUSH
16255: LD_INT 2
16257: NEG
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16284: LD_ADDR_VAR 0 19
16288: PUSH
16289: LD_INT 0
16291: PUSH
16292: LD_INT 0
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 0
16301: PUSH
16302: LD_INT 1
16304: NEG
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: LD_INT 0
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 1
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 0
16332: PUSH
16333: LD_INT 1
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 1
16342: NEG
16343: PUSH
16344: LD_INT 0
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 1
16353: NEG
16354: PUSH
16355: LD_INT 1
16357: NEG
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 1
16365: NEG
16366: PUSH
16367: LD_INT 2
16369: NEG
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 0
16377: PUSH
16378: LD_INT 2
16380: NEG
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 1
16388: PUSH
16389: LD_INT 1
16391: NEG
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 2
16409: PUSH
16410: LD_INT 1
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 2
16419: PUSH
16420: LD_INT 2
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: LD_INT 2
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 0
16439: PUSH
16440: LD_INT 2
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 1
16449: NEG
16450: PUSH
16451: LD_INT 1
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 2
16460: NEG
16461: PUSH
16462: LD_INT 0
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 2
16471: NEG
16472: PUSH
16473: LD_INT 1
16475: NEG
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 2
16483: NEG
16484: PUSH
16485: LD_INT 2
16487: NEG
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16514: LD_ADDR_VAR 0 20
16518: PUSH
16519: LD_INT 0
16521: PUSH
16522: LD_INT 0
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 0
16531: PUSH
16532: LD_INT 1
16534: NEG
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 1
16542: PUSH
16543: LD_INT 0
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: LD_INT 1
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 0
16562: PUSH
16563: LD_INT 1
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 1
16572: NEG
16573: PUSH
16574: LD_INT 0
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 1
16583: NEG
16584: PUSH
16585: LD_INT 1
16587: NEG
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 1
16595: NEG
16596: PUSH
16597: LD_INT 2
16599: NEG
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 0
16607: PUSH
16608: LD_INT 2
16610: NEG
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 1
16618: PUSH
16619: LD_INT 1
16621: NEG
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 2
16629: PUSH
16630: LD_INT 0
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 2
16639: PUSH
16640: LD_INT 1
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 2
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 1
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 0
16669: PUSH
16670: LD_INT 2
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 1
16679: NEG
16680: PUSH
16681: LD_INT 1
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 2
16690: NEG
16691: PUSH
16692: LD_INT 0
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 2
16701: NEG
16702: PUSH
16703: LD_INT 1
16705: NEG
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 2
16713: NEG
16714: PUSH
16715: LD_INT 2
16717: NEG
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16744: LD_ADDR_VAR 0 21
16748: PUSH
16749: LD_INT 0
16751: PUSH
16752: LD_INT 0
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 0
16761: PUSH
16762: LD_INT 1
16764: NEG
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 1
16772: PUSH
16773: LD_INT 0
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 1
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 0
16792: PUSH
16793: LD_INT 1
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 1
16802: NEG
16803: PUSH
16804: LD_INT 0
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 1
16813: NEG
16814: PUSH
16815: LD_INT 1
16817: NEG
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 1
16825: NEG
16826: PUSH
16827: LD_INT 2
16829: NEG
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 0
16837: PUSH
16838: LD_INT 2
16840: NEG
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 1
16848: PUSH
16849: LD_INT 1
16851: NEG
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: LD_INT 0
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 2
16869: PUSH
16870: LD_INT 1
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 2
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: LD_INT 2
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 0
16899: PUSH
16900: LD_INT 2
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 1
16909: NEG
16910: PUSH
16911: LD_INT 1
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 2
16920: NEG
16921: PUSH
16922: LD_INT 0
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 2
16931: NEG
16932: PUSH
16933: LD_INT 1
16935: NEG
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 2
16943: NEG
16944: PUSH
16945: LD_INT 2
16947: NEG
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16974: LD_ADDR_VAR 0 22
16978: PUSH
16979: LD_INT 0
16981: PUSH
16982: LD_INT 0
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 0
16991: PUSH
16992: LD_INT 1
16994: NEG
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 1
17002: PUSH
17003: LD_INT 0
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: LD_INT 1
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 0
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 1
17032: NEG
17033: PUSH
17034: LD_INT 0
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 1
17043: NEG
17044: PUSH
17045: LD_INT 1
17047: NEG
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 1
17055: NEG
17056: PUSH
17057: LD_INT 2
17059: NEG
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 0
17067: PUSH
17068: LD_INT 2
17070: NEG
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 1
17078: PUSH
17079: LD_INT 1
17081: NEG
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: LD_INT 0
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: LD_INT 1
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 2
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 1
17119: PUSH
17120: LD_INT 2
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 0
17129: PUSH
17130: LD_INT 2
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 1
17139: NEG
17140: PUSH
17141: LD_INT 1
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 2
17150: NEG
17151: PUSH
17152: LD_INT 0
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 2
17161: NEG
17162: PUSH
17163: LD_INT 1
17165: NEG
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 2
17173: NEG
17174: PUSH
17175: LD_INT 2
17177: NEG
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17204: LD_ADDR_VAR 0 23
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: LD_INT 0
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 0
17221: PUSH
17222: LD_INT 1
17224: NEG
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: LD_INT 0
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: LD_INT 1
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 0
17252: PUSH
17253: LD_INT 1
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 1
17262: NEG
17263: PUSH
17264: LD_INT 0
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 1
17273: NEG
17274: PUSH
17275: LD_INT 1
17277: NEG
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 1
17285: NEG
17286: PUSH
17287: LD_INT 2
17289: NEG
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 0
17297: PUSH
17298: LD_INT 2
17300: NEG
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 1
17308: PUSH
17309: LD_INT 1
17311: NEG
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: LD_INT 0
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: LD_INT 1
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 2
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: LD_INT 2
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 0
17359: PUSH
17360: LD_INT 2
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 1
17369: NEG
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 2
17380: NEG
17381: PUSH
17382: LD_INT 0
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 2
17391: NEG
17392: PUSH
17393: LD_INT 1
17395: NEG
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 2
17403: NEG
17404: PUSH
17405: LD_INT 2
17407: NEG
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 2
17415: NEG
17416: PUSH
17417: LD_INT 3
17419: NEG
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 1
17427: NEG
17428: PUSH
17429: LD_INT 3
17431: NEG
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 1
17439: PUSH
17440: LD_INT 2
17442: NEG
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 2
17450: PUSH
17451: LD_INT 1
17453: NEG
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17484: LD_ADDR_VAR 0 24
17488: PUSH
17489: LD_INT 0
17491: PUSH
17492: LD_INT 0
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 0
17501: PUSH
17502: LD_INT 1
17504: NEG
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 1
17512: PUSH
17513: LD_INT 0
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 1
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 0
17532: PUSH
17533: LD_INT 1
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 1
17542: NEG
17543: PUSH
17544: LD_INT 0
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 1
17553: NEG
17554: PUSH
17555: LD_INT 1
17557: NEG
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 1
17565: NEG
17566: PUSH
17567: LD_INT 2
17569: NEG
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 0
17577: PUSH
17578: LD_INT 2
17580: NEG
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 1
17588: PUSH
17589: LD_INT 1
17591: NEG
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 2
17599: PUSH
17600: LD_INT 0
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 2
17609: PUSH
17610: LD_INT 1
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 2
17619: PUSH
17620: LD_INT 2
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: LD_INT 2
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 0
17639: PUSH
17640: LD_INT 2
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 1
17649: NEG
17650: PUSH
17651: LD_INT 1
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 2
17660: NEG
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 2
17671: NEG
17672: PUSH
17673: LD_INT 1
17675: NEG
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 2
17683: NEG
17684: PUSH
17685: LD_INT 2
17687: NEG
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: LD_INT 2
17698: NEG
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 2
17706: PUSH
17707: LD_INT 1
17709: NEG
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 3
17717: PUSH
17718: LD_INT 1
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: LD_INT 3
17727: PUSH
17728: LD_INT 2
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17760: LD_ADDR_VAR 0 25
17764: PUSH
17765: LD_INT 0
17767: PUSH
17768: LD_INT 0
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 0
17777: PUSH
17778: LD_INT 1
17780: NEG
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 1
17788: PUSH
17789: LD_INT 0
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 1
17798: PUSH
17799: LD_INT 1
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: LD_INT 0
17808: PUSH
17809: LD_INT 1
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: LD_INT 1
17818: NEG
17819: PUSH
17820: LD_INT 0
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 1
17829: NEG
17830: PUSH
17831: LD_INT 1
17833: NEG
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 1
17841: NEG
17842: PUSH
17843: LD_INT 2
17845: NEG
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: LD_INT 2
17856: NEG
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 1
17864: PUSH
17865: LD_INT 1
17867: NEG
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 2
17875: PUSH
17876: LD_INT 0
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: LD_INT 1
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 2
17895: PUSH
17896: LD_INT 2
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 1
17905: PUSH
17906: LD_INT 2
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 0
17915: PUSH
17916: LD_INT 2
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 1
17925: NEG
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 2
17936: NEG
17937: PUSH
17938: LD_INT 0
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 2
17947: NEG
17948: PUSH
17949: LD_INT 1
17951: NEG
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 2
17959: NEG
17960: PUSH
17961: LD_INT 2
17963: NEG
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 3
17971: PUSH
17972: LD_INT 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 3
17981: PUSH
17982: LD_INT 2
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 2
17991: PUSH
17992: LD_INT 3
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: LD_INT 3
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18034: LD_ADDR_VAR 0 26
18038: PUSH
18039: LD_INT 0
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 0
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PUSH
18094: LD_INT 0
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: LD_INT 2
18119: NEG
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 0
18127: PUSH
18128: LD_INT 2
18130: NEG
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: LD_INT 1
18141: NEG
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: LD_INT 0
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 2
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 2
18169: PUSH
18170: LD_INT 2
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: LD_INT 2
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 0
18189: PUSH
18190: LD_INT 2
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 1
18199: NEG
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 2
18210: NEG
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 2
18221: NEG
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 2
18233: NEG
18234: PUSH
18235: LD_INT 2
18237: NEG
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 2
18245: PUSH
18246: LD_INT 3
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 1
18265: NEG
18266: PUSH
18267: LD_INT 2
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 2
18276: NEG
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18310: LD_ADDR_VAR 0 27
18314: PUSH
18315: LD_INT 0
18317: PUSH
18318: LD_INT 0
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: LD_INT 1
18330: NEG
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 1
18338: PUSH
18339: LD_INT 0
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PUSH
18346: LD_INT 1
18348: PUSH
18349: LD_INT 1
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 0
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 1
18368: NEG
18369: PUSH
18370: LD_INT 0
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 1
18379: NEG
18380: PUSH
18381: LD_INT 1
18383: NEG
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: NEG
18392: PUSH
18393: LD_INT 2
18395: NEG
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: LD_INT 2
18406: NEG
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: LD_INT 1
18417: NEG
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 2
18425: PUSH
18426: LD_INT 0
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 2
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: LD_INT 2
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 0
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: NEG
18476: PUSH
18477: LD_INT 1
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 2
18486: NEG
18487: PUSH
18488: LD_INT 0
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 2
18497: NEG
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 2
18509: NEG
18510: PUSH
18511: LD_INT 2
18513: NEG
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 1
18521: NEG
18522: PUSH
18523: LD_INT 2
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 2
18532: NEG
18533: PUSH
18534: LD_INT 1
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 3
18543: NEG
18544: PUSH
18545: LD_INT 1
18547: NEG
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 3
18555: NEG
18556: PUSH
18557: LD_INT 2
18559: NEG
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18590: LD_ADDR_VAR 0 28
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: LD_INT 0
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: LD_INT 1
18610: NEG
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 1
18618: PUSH
18619: LD_INT 0
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: LD_INT 1
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 0
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 1
18648: NEG
18649: PUSH
18650: LD_INT 0
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 1
18659: NEG
18660: PUSH
18661: LD_INT 1
18663: NEG
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 1
18671: NEG
18672: PUSH
18673: LD_INT 2
18675: NEG
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 0
18683: PUSH
18684: LD_INT 2
18686: NEG
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: LD_INT 1
18697: NEG
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 2
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 2
18725: PUSH
18726: LD_INT 2
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 1
18735: PUSH
18736: LD_INT 2
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 0
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 1
18755: NEG
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 2
18766: NEG
18767: PUSH
18768: LD_INT 0
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 2
18777: NEG
18778: PUSH
18779: LD_INT 1
18781: NEG
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 2
18789: NEG
18790: PUSH
18791: LD_INT 2
18793: NEG
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 2
18801: NEG
18802: PUSH
18803: LD_INT 3
18805: NEG
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 1
18813: NEG
18814: PUSH
18815: LD_INT 3
18817: NEG
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 3
18825: NEG
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 3
18837: NEG
18838: PUSH
18839: LD_INT 2
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18872: LD_ADDR_VAR 0 29
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: LD_INT 1
18892: NEG
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: LD_INT 0
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 1
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: NEG
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 1
18945: NEG
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: LD_INT 2
18957: NEG
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: LD_INT 2
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: LD_INT 1
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 1
19007: PUSH
19008: LD_INT 2
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 0
19017: PUSH
19018: LD_INT 2
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 1
19027: NEG
19028: PUSH
19029: LD_INT 1
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 2
19038: NEG
19039: PUSH
19040: LD_INT 1
19042: NEG
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 2
19050: NEG
19051: PUSH
19052: LD_INT 2
19054: NEG
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 2
19062: NEG
19063: PUSH
19064: LD_INT 3
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 1
19077: NEG
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 3
19085: PUSH
19086: LD_INT 1
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: LD_INT 3
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 1
19105: NEG
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 3
19116: NEG
19117: PUSH
19118: LD_INT 2
19120: NEG
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19151: LD_ADDR_VAR 0 30
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 1
19209: NEG
19210: PUSH
19211: LD_INT 0
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 1
19220: NEG
19221: PUSH
19222: LD_INT 1
19224: NEG
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 1
19232: NEG
19233: PUSH
19234: LD_INT 2
19236: NEG
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 0
19244: PUSH
19245: LD_INT 2
19247: NEG
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: LD_INT 1
19258: NEG
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: LD_INT 0
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: LD_INT 2
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 2
19317: NEG
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 2
19328: NEG
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 1
19340: NEG
19341: PUSH
19342: LD_INT 3
19344: NEG
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 1
19352: PUSH
19353: LD_INT 2
19355: NEG
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 3
19363: PUSH
19364: LD_INT 2
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: LD_INT 3
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 2
19383: NEG
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 3
19394: NEG
19395: PUSH
19396: LD_INT 1
19398: NEG
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19429: LD_ADDR_VAR 0 31
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 0
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: PUSH
19458: LD_INT 0
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 1
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 0
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 1
19487: NEG
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 1
19498: NEG
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: NEG
19511: PUSH
19512: LD_INT 2
19514: NEG
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: LD_INT 1
19525: NEG
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 2
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 2
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: LD_INT 2
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 0
19573: PUSH
19574: LD_INT 2
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 2
19594: NEG
19595: PUSH
19596: LD_INT 1
19598: NEG
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 2
19606: NEG
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 2
19618: NEG
19619: PUSH
19620: LD_INT 3
19622: NEG
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 2
19630: PUSH
19631: LD_INT 1
19633: NEG
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 3
19641: PUSH
19642: LD_INT 1
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 1
19651: PUSH
19652: LD_INT 3
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 1
19661: NEG
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 3
19672: NEG
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19707: LD_ADDR_VAR 0 32
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: LD_INT 0
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: LD_INT 1
19727: NEG
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 1
19735: PUSH
19736: LD_INT 0
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 1
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 1
19765: NEG
19766: PUSH
19767: LD_INT 0
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: PUSH
19778: LD_INT 1
19780: NEG
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 1
19788: NEG
19789: PUSH
19790: LD_INT 2
19792: NEG
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 0
19800: PUSH
19801: LD_INT 2
19803: NEG
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 1
19811: PUSH
19812: LD_INT 1
19814: NEG
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 2
19822: PUSH
19823: LD_INT 1
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 2
19832: PUSH
19833: LD_INT 2
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 1
19842: PUSH
19843: LD_INT 2
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 0
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 1
19862: NEG
19863: PUSH
19864: LD_INT 1
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 2
19873: NEG
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 2
19884: NEG
19885: PUSH
19886: LD_INT 1
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 1
19896: NEG
19897: PUSH
19898: LD_INT 3
19900: NEG
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: LD_INT 2
19911: NEG
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 3
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 2
19929: PUSH
19930: LD_INT 3
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 2
19939: NEG
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 3
19950: NEG
19951: PUSH
19952: LD_INT 1
19954: NEG
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19985: LD_ADDR_VAR 0 33
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 0
20002: PUSH
20003: LD_INT 1
20005: NEG
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: PUSH
20014: LD_INT 0
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 0
20033: PUSH
20034: LD_INT 1
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 1
20054: NEG
20055: PUSH
20056: LD_INT 1
20058: NEG
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 1
20066: NEG
20067: PUSH
20068: LD_INT 2
20070: NEG
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 1
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 2
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 2
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: PUSH
20110: LD_INT 2
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 0
20119: PUSH
20120: LD_INT 2
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 1
20129: NEG
20130: PUSH
20131: LD_INT 1
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 2
20140: NEG
20141: PUSH
20142: LD_INT 0
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 2
20151: NEG
20152: PUSH
20153: LD_INT 1
20155: NEG
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 2
20163: NEG
20164: PUSH
20165: LD_INT 2
20167: NEG
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 2
20175: NEG
20176: PUSH
20177: LD_INT 3
20179: NEG
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 3
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: LD_INT 3
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 1
20218: NEG
20219: PUSH
20220: LD_INT 2
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 3
20229: NEG
20230: PUSH
20231: LD_INT 2
20233: NEG
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20264: LD_ADDR_VAR 0 34
20268: PUSH
20269: LD_INT 0
20271: PUSH
20272: LD_INT 0
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 0
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 1
20292: PUSH
20293: LD_INT 0
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 1
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 0
20312: PUSH
20313: LD_INT 1
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: NEG
20323: PUSH
20324: LD_INT 0
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 1
20345: NEG
20346: PUSH
20347: LD_INT 2
20349: NEG
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 0
20357: PUSH
20358: LD_INT 2
20360: NEG
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: LD_INT 1
20371: NEG
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 2
20379: PUSH
20380: LD_INT 1
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 2
20389: PUSH
20390: LD_INT 2
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 1
20399: PUSH
20400: LD_INT 2
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 1
20409: NEG
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 2
20420: NEG
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 2
20431: NEG
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 2
20443: NEG
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 1
20455: NEG
20456: PUSH
20457: LD_INT 3
20459: NEG
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: LD_INT 2
20470: NEG
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 3
20478: PUSH
20479: LD_INT 2
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 2
20488: PUSH
20489: LD_INT 3
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: NEG
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 3
20509: NEG
20510: PUSH
20511: LD_INT 1
20513: NEG
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20544: LD_ADDR_VAR 0 35
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: LD_INT 0
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 0
20561: PUSH
20562: LD_INT 1
20564: NEG
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 1
20572: PUSH
20573: LD_INT 0
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 1
20582: PUSH
20583: LD_INT 1
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 0
20592: PUSH
20593: LD_INT 1
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 1
20602: NEG
20603: PUSH
20604: LD_INT 0
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: NEG
20614: PUSH
20615: LD_INT 1
20617: NEG
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 2
20635: NEG
20636: PUSH
20637: LD_INT 1
20639: NEG
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20656: LD_ADDR_VAR 0 36
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 0
20673: PUSH
20674: LD_INT 1
20676: NEG
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 1
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: LD_INT 0
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 1
20725: NEG
20726: PUSH
20727: LD_INT 1
20729: NEG
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 1
20737: NEG
20738: PUSH
20739: LD_INT 2
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 1
20749: PUSH
20750: LD_INT 2
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20768: LD_ADDR_VAR 0 37
20772: PUSH
20773: LD_INT 0
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: LD_INT 1
20788: NEG
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 1
20796: PUSH
20797: LD_INT 0
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: LD_INT 1
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 0
20816: PUSH
20817: LD_INT 1
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 1
20826: NEG
20827: PUSH
20828: LD_INT 0
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 1
20837: NEG
20838: PUSH
20839: LD_INT 1
20841: NEG
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: LD_INT 1
20852: NEG
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 1
20860: NEG
20861: PUSH
20862: LD_INT 1
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20880: LD_ADDR_VAR 0 38
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: LD_INT 1
20900: NEG
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: LD_INT 0
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: LD_INT 1
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 0
20928: PUSH
20929: LD_INT 1
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 1
20938: NEG
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 1
20949: NEG
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 2
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 2
20971: NEG
20972: PUSH
20973: LD_INT 1
20975: NEG
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20992: LD_ADDR_VAR 0 39
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: LD_INT 1
21012: NEG
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 1
21020: PUSH
21021: LD_INT 0
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 1
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 0
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: LD_INT 0
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 1
21061: NEG
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 1
21073: NEG
21074: PUSH
21075: LD_INT 2
21077: NEG
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: LD_INT 2
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21104: LD_ADDR_VAR 0 40
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 0
21121: PUSH
21122: LD_INT 1
21124: NEG
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 1
21132: PUSH
21133: LD_INT 0
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: LD_INT 1
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: LD_INT 1
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: LD_INT 0
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: NEG
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: LD_INT 1
21188: NEG
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21216: LD_ADDR_VAR 0 41
21220: PUSH
21221: LD_INT 0
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 0
21233: PUSH
21234: LD_INT 1
21236: NEG
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: LD_INT 0
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 1
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 0
21264: PUSH
21265: LD_INT 1
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 1
21274: NEG
21275: PUSH
21276: LD_INT 0
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 1
21285: NEG
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 1
21297: NEG
21298: PUSH
21299: LD_INT 2
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: LD_INT 1
21312: NEG
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 2
21320: PUSH
21321: LD_INT 0
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 2
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: LD_INT 2
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 1
21360: NEG
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 2
21371: NEG
21372: PUSH
21373: LD_INT 0
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 2
21382: NEG
21383: PUSH
21384: LD_INT 1
21386: NEG
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 2
21394: NEG
21395: PUSH
21396: LD_INT 2
21398: NEG
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 2
21406: NEG
21407: PUSH
21408: LD_INT 3
21410: NEG
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 2
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 3
21429: PUSH
21430: LD_INT 0
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 3
21439: PUSH
21440: LD_INT 1
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 3
21449: PUSH
21450: LD_INT 2
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 3
21459: PUSH
21460: LD_INT 3
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: LD_INT 3
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 2
21479: NEG
21480: PUSH
21481: LD_INT 1
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 3
21490: NEG
21491: PUSH
21492: LD_INT 0
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 3
21501: NEG
21502: PUSH
21503: LD_INT 1
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 3
21513: NEG
21514: PUSH
21515: LD_INT 2
21517: NEG
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 3
21525: NEG
21526: PUSH
21527: LD_INT 3
21529: NEG
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21566: LD_ADDR_VAR 0 42
21570: PUSH
21571: LD_INT 0
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: LD_INT 1
21586: NEG
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: LD_INT 1
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: NEG
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 1
21647: NEG
21648: PUSH
21649: LD_INT 2
21651: NEG
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: LD_INT 2
21662: NEG
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 1
21670: PUSH
21671: LD_INT 1
21673: NEG
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 2
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: LD_INT 2
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: LD_INT 2
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 0
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 1
21721: NEG
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 2
21732: NEG
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 2
21744: NEG
21745: PUSH
21746: LD_INT 2
21748: NEG
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 2
21756: NEG
21757: PUSH
21758: LD_INT 3
21760: NEG
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 1
21768: NEG
21769: PUSH
21770: LD_INT 3
21772: NEG
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 0
21780: PUSH
21781: LD_INT 3
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: LD_INT 2
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 3
21802: PUSH
21803: LD_INT 2
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 3
21812: PUSH
21813: LD_INT 3
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 2
21822: PUSH
21823: LD_INT 3
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: LD_INT 3
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: LD_INT 3
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: LD_INT 2
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 3
21863: NEG
21864: PUSH
21865: LD_INT 2
21867: NEG
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 3
21875: NEG
21876: PUSH
21877: LD_INT 3
21879: NEG
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21916: LD_ADDR_VAR 0 43
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: LD_INT 0
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: LD_INT 1
21936: NEG
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: LD_INT 0
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: LD_INT 1
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: NEG
21975: PUSH
21976: LD_INT 0
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 1
21997: NEG
21998: PUSH
21999: LD_INT 2
22001: NEG
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 0
22009: PUSH
22010: LD_INT 2
22012: NEG
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: LD_INT 1
22023: NEG
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: LD_INT 0
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: LD_INT 1
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 1
22051: PUSH
22052: LD_INT 2
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 0
22061: PUSH
22062: LD_INT 2
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 1
22071: NEG
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 2
22082: NEG
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 2
22093: NEG
22094: PUSH
22095: LD_INT 1
22097: NEG
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 1
22105: NEG
22106: PUSH
22107: LD_INT 3
22109: NEG
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 0
22117: PUSH
22118: LD_INT 3
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: LD_INT 2
22131: NEG
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 2
22139: PUSH
22140: LD_INT 1
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 3
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 3
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 1
22170: PUSH
22171: LD_INT 3
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 0
22180: PUSH
22181: LD_INT 3
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 1
22190: NEG
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 2
22201: NEG
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 3
22212: NEG
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 3
22223: NEG
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22264: LD_ADDR_VAR 0 44
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: LD_INT 0
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: NEG
22323: PUSH
22324: LD_INT 0
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: LD_INT 1
22337: NEG
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: LD_INT 2
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: LD_INT 1
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: LD_INT 0
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 2
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 2
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 1
22408: NEG
22409: PUSH
22410: LD_INT 1
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 2
22419: NEG
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: NEG
22431: PUSH
22432: LD_INT 1
22434: NEG
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 2
22442: NEG
22443: PUSH
22444: LD_INT 2
22446: NEG
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 2
22454: NEG
22455: PUSH
22456: LD_INT 3
22458: NEG
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 2
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 3
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 3
22487: PUSH
22488: LD_INT 1
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 3
22497: PUSH
22498: LD_INT 2
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 3
22507: PUSH
22508: LD_INT 3
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 2
22517: PUSH
22518: LD_INT 3
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 2
22527: NEG
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 3
22538: NEG
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 3
22549: NEG
22550: PUSH
22551: LD_INT 1
22553: NEG
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 3
22561: NEG
22562: PUSH
22563: LD_INT 2
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 3
22573: NEG
22574: PUSH
22575: LD_INT 3
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22614: LD_ADDR_VAR 0 45
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 0
22631: PUSH
22632: LD_INT 1
22634: NEG
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: LD_INT 0
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 1
22652: PUSH
22653: LD_INT 1
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 0
22662: PUSH
22663: LD_INT 1
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 1
22672: NEG
22673: PUSH
22674: LD_INT 0
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 1
22687: NEG
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 1
22695: NEG
22696: PUSH
22697: LD_INT 2
22699: NEG
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 0
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: LD_INT 1
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 2
22739: PUSH
22740: LD_INT 2
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: LD_INT 2
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 0
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 1
22769: NEG
22770: PUSH
22771: LD_INT 1
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 2
22780: NEG
22781: PUSH
22782: LD_INT 1
22784: NEG
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 2
22792: NEG
22793: PUSH
22794: LD_INT 2
22796: NEG
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 2
22804: NEG
22805: PUSH
22806: LD_INT 3
22808: NEG
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 1
22816: NEG
22817: PUSH
22818: LD_INT 3
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 0
22828: PUSH
22829: LD_INT 3
22831: NEG
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 1
22839: PUSH
22840: LD_INT 2
22842: NEG
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 3
22850: PUSH
22851: LD_INT 2
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 3
22860: PUSH
22861: LD_INT 3
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: LD_INT 3
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 1
22880: PUSH
22881: LD_INT 3
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 0
22890: PUSH
22891: LD_INT 3
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: LD_INT 2
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 3
22911: NEG
22912: PUSH
22913: LD_INT 2
22915: NEG
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 3
22923: NEG
22924: PUSH
22925: LD_INT 3
22927: NEG
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22964: LD_ADDR_VAR 0 46
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 0
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 1
22992: PUSH
22993: LD_INT 0
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 1
23022: NEG
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 1
23033: NEG
23034: PUSH
23035: LD_INT 1
23037: NEG
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 1
23045: NEG
23046: PUSH
23047: LD_INT 2
23049: NEG
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: LD_INT 2
23060: NEG
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: LD_INT 1
23071: NEG
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 2
23089: PUSH
23090: LD_INT 1
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: LD_INT 2
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: LD_INT 2
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 1
23119: NEG
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: NEG
23131: PUSH
23132: LD_INT 0
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 2
23141: NEG
23142: PUSH
23143: LD_INT 1
23145: NEG
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: NEG
23154: PUSH
23155: LD_INT 3
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 0
23165: PUSH
23166: LD_INT 3
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: LD_INT 2
23179: NEG
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: LD_INT 1
23190: NEG
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 3
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 3
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 1
23218: PUSH
23219: LD_INT 3
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: LD_INT 3
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 1
23238: NEG
23239: PUSH
23240: LD_INT 2
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 2
23249: NEG
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 3
23260: NEG
23261: PUSH
23262: LD_INT 0
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 3
23271: NEG
23272: PUSH
23273: LD_INT 1
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23312: LD_ADDR_VAR 0 47
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: LD_INT 1
23332: NEG
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: LD_INT 0
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: LD_INT 0
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: LD_INT 1
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: LD_INT 2
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: LD_INT 2
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: LD_INT 1
23419: NEG
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: NEG
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 2
23439: NEG
23440: PUSH
23441: LD_INT 2
23443: NEG
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23463: LD_ADDR_VAR 0 48
23467: PUSH
23468: LD_INT 0
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 0
23480: PUSH
23481: LD_INT 1
23483: NEG
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 1
23491: PUSH
23492: LD_INT 0
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 1
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 0
23511: PUSH
23512: LD_INT 1
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 1
23521: NEG
23522: PUSH
23523: LD_INT 0
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 1
23532: NEG
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: LD_INT 2
23548: NEG
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: LD_INT 2
23559: NEG
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 1
23567: PUSH
23568: LD_INT 1
23570: NEG
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 2
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23610: LD_ADDR_VAR 0 49
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: LD_INT 1
23630: NEG
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: LD_INT 1
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 1
23668: NEG
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 2
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 2
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 2
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: LD_INT 2
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23754: LD_ADDR_VAR 0 50
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 2
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 2
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 2
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 0
23865: PUSH
23866: LD_INT 2
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 1
23875: NEG
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23898: LD_ADDR_VAR 0 51
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: LD_INT 1
23918: NEG
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: LD_INT 1
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 1
23956: NEG
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: NEG
23968: PUSH
23969: LD_INT 1
23971: NEG
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: LD_INT 2
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: LD_INT 2
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 2
24010: NEG
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 2
24021: NEG
24022: PUSH
24023: LD_INT 1
24025: NEG
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24045: LD_ADDR_VAR 0 52
24049: PUSH
24050: LD_INT 0
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 0
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 1
24103: NEG
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: LD_INT 1
24118: NEG
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: LD_INT 2
24130: NEG
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: NEG
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 2
24149: NEG
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 2
24160: NEG
24161: PUSH
24162: LD_INT 1
24164: NEG
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 2
24172: NEG
24173: PUSH
24174: LD_INT 2
24176: NEG
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24196: LD_ADDR_VAR 0 53
24200: PUSH
24201: LD_INT 0
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 1
24254: NEG
24255: PUSH
24256: LD_INT 0
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: LD_INT 1
24269: NEG
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 1
24277: NEG
24278: PUSH
24279: LD_INT 2
24281: NEG
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: LD_INT 2
24292: NEG
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 1
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 2
24321: PUSH
24322: LD_INT 1
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: LD_INT 2
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: PUSH
24342: LD_INT 2
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 0
24351: PUSH
24352: LD_INT 2
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 2
24372: NEG
24373: PUSH
24374: LD_INT 0
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 2
24383: NEG
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 2
24395: NEG
24396: PUSH
24397: LD_INT 2
24399: NEG
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24426: LD_ADDR_VAR 0 54
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 0
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 0
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 1
24484: NEG
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: NEG
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 1
24507: NEG
24508: PUSH
24509: LD_INT 2
24511: NEG
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 0
24519: PUSH
24520: LD_INT 2
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 2
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 2
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 2
24561: PUSH
24562: LD_INT 2
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: PUSH
24572: LD_INT 2
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 0
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 2
24602: NEG
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 2
24613: NEG
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 2
24625: NEG
24626: PUSH
24627: LD_INT 2
24629: NEG
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24656: LD_ADDR_VAR 0 55
24660: PUSH
24661: LD_INT 0
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 1
24694: PUSH
24695: LD_INT 1
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 1
24714: NEG
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 1
24725: NEG
24726: PUSH
24727: LD_INT 1
24729: NEG
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 1
24737: NEG
24738: PUSH
24739: LD_INT 2
24741: NEG
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: LD_INT 2
24752: NEG
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 1
24760: PUSH
24761: LD_INT 1
24763: NEG
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 2
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 2
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 2
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: LD_INT 2
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: LD_INT 2
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: LD_INT 1
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 2
24832: NEG
24833: PUSH
24834: LD_INT 0
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 2
24843: NEG
24844: PUSH
24845: LD_INT 1
24847: NEG
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 2
24855: NEG
24856: PUSH
24857: LD_INT 2
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24886: LD_ADDR_VAR 0 56
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: LD_INT 1
24906: NEG
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 0
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: NEG
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 1
24967: NEG
24968: PUSH
24969: LD_INT 2
24971: NEG
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 0
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: LD_INT 1
24993: NEG
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 2
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 2
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 2
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 1
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: LD_INT 2
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 2
25062: NEG
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 2
25073: NEG
25074: PUSH
25075: LD_INT 1
25077: NEG
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 2
25085: NEG
25086: PUSH
25087: LD_INT 2
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25116: LD_ADDR_VAR 0 57
25120: PUSH
25121: LD_INT 0
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: LD_INT 1
25136: NEG
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: LD_INT 1
25189: NEG
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 1
25197: NEG
25198: PUSH
25199: LD_INT 2
25201: NEG
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 0
25209: PUSH
25210: LD_INT 2
25212: NEG
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 2
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: LD_INT 2
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 2
25303: NEG
25304: PUSH
25305: LD_INT 1
25307: NEG
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 2
25315: NEG
25316: PUSH
25317: LD_INT 2
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25346: LD_ADDR_VAR 0 58
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 1
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 1
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: LD_INT 1
25419: NEG
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 1
25427: NEG
25428: PUSH
25429: LD_INT 2
25431: NEG
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: LD_INT 2
25442: NEG
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: LD_INT 1
25453: NEG
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 2
25461: PUSH
25462: LD_INT 0
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 2
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 2
25481: PUSH
25482: LD_INT 2
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: LD_INT 2
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 2
25522: NEG
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 2
25533: NEG
25534: PUSH
25535: LD_INT 1
25537: NEG
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 2
25545: NEG
25546: PUSH
25547: LD_INT 2
25549: NEG
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25576: LD_ADDR_VAR 0 59
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: LD_INT 1
25596: NEG
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 1
25634: NEG
25635: PUSH
25636: LD_INT 0
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: NEG
25646: PUSH
25647: LD_INT 1
25649: NEG
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25664: LD_ADDR_VAR 0 60
25668: PUSH
25669: LD_INT 0
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25752: LD_ADDR_VAR 0 61
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: LD_INT 0
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: LD_INT 1
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 1
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: NEG
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25840: LD_ADDR_VAR 0 62
25844: PUSH
25845: LD_INT 0
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 1
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25928: LD_ADDR_VAR 0 63
25932: PUSH
25933: LD_INT 0
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: PUSH
25957: LD_INT 0
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: LD_INT 1
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26016: LD_ADDR_VAR 0 64
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: LD_INT 0
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: ST_TO_ADDR
// end ; 1 :
26104: GO 32001
26106: LD_INT 1
26108: DOUBLE
26109: EQUAL
26110: IFTRUE 26114
26112: GO 28737
26114: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26115: LD_ADDR_VAR 0 11
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: LD_INT 3
26126: NEG
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: LD_INT 3
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 1
26145: PUSH
26146: LD_INT 2
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: LIST
26158: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26159: LD_ADDR_VAR 0 12
26163: PUSH
26164: LD_INT 2
26166: PUSH
26167: LD_INT 1
26169: NEG
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 3
26177: PUSH
26178: LD_INT 0
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 3
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: LIST
26199: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26200: LD_ADDR_VAR 0 13
26204: PUSH
26205: LD_INT 3
26207: PUSH
26208: LD_INT 2
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 3
26217: PUSH
26218: LD_INT 3
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 2
26227: PUSH
26228: LD_INT 3
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26240: LD_ADDR_VAR 0 14
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: LD_INT 3
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 3
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: LIST
26280: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26281: LD_ADDR_VAR 0 15
26285: PUSH
26286: LD_INT 2
26288: NEG
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 3
26299: NEG
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 3
26310: NEG
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: LIST
26324: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26325: LD_ADDR_VAR 0 16
26329: PUSH
26330: LD_INT 2
26332: NEG
26333: PUSH
26334: LD_INT 3
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 3
26344: NEG
26345: PUSH
26346: LD_INT 2
26348: NEG
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 3
26356: NEG
26357: PUSH
26358: LD_INT 3
26360: NEG
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: LIST
26370: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26371: LD_ADDR_VAR 0 17
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: LD_INT 3
26382: NEG
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 0
26390: PUSH
26391: LD_INT 3
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: LIST
26414: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26415: LD_ADDR_VAR 0 18
26419: PUSH
26420: LD_INT 2
26422: PUSH
26423: LD_INT 1
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 3
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 3
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26456: LD_ADDR_VAR 0 19
26460: PUSH
26461: LD_INT 3
26463: PUSH
26464: LD_INT 2
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 3
26473: PUSH
26474: LD_INT 3
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 2
26483: PUSH
26484: LD_INT 3
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26496: LD_ADDR_VAR 0 20
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: LD_INT 3
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: LD_INT 3
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: LD_INT 2
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: LIST
26536: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26537: LD_ADDR_VAR 0 21
26541: PUSH
26542: LD_INT 2
26544: NEG
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 3
26555: NEG
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 3
26566: NEG
26567: PUSH
26568: LD_INT 1
26570: NEG
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: LIST
26580: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26581: LD_ADDR_VAR 0 22
26585: PUSH
26586: LD_INT 2
26588: NEG
26589: PUSH
26590: LD_INT 3
26592: NEG
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 3
26600: NEG
26601: PUSH
26602: LD_INT 2
26604: NEG
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 3
26612: NEG
26613: PUSH
26614: LD_INT 3
26616: NEG
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: LIST
26626: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26627: LD_ADDR_VAR 0 23
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: LD_INT 3
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: NEG
26646: PUSH
26647: LD_INT 4
26649: NEG
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: PUSH
26658: LD_INT 3
26660: NEG
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: LIST
26670: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26671: LD_ADDR_VAR 0 24
26675: PUSH
26676: LD_INT 3
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 3
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 4
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26712: LD_ADDR_VAR 0 25
26716: PUSH
26717: LD_INT 3
26719: PUSH
26720: LD_INT 3
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 4
26729: PUSH
26730: LD_INT 3
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 3
26739: PUSH
26740: LD_INT 4
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: LIST
26751: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26752: LD_ADDR_VAR 0 26
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: LD_INT 3
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: LD_INT 4
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: LD_INT 3
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: LIST
26792: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26793: LD_ADDR_VAR 0 27
26797: PUSH
26798: LD_INT 3
26800: NEG
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 3
26811: NEG
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 4
26822: NEG
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: LIST
26836: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26837: LD_ADDR_VAR 0 28
26841: PUSH
26842: LD_INT 3
26844: NEG
26845: PUSH
26846: LD_INT 3
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 3
26856: NEG
26857: PUSH
26858: LD_INT 4
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 4
26868: NEG
26869: PUSH
26870: LD_INT 3
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: LIST
26882: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26883: LD_ADDR_VAR 0 29
26887: PUSH
26888: LD_INT 1
26890: NEG
26891: PUSH
26892: LD_INT 3
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: LD_INT 3
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: LD_INT 2
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: LD_INT 4
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: LD_INT 4
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: LD_INT 3
26950: NEG
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: LD_INT 5
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: LD_INT 5
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: LD_INT 4
26984: NEG
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: LD_INT 6
26996: NEG
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: LD_INT 6
27007: NEG
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 1
27015: PUSH
27016: LD_INT 5
27018: NEG
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27038: LD_ADDR_VAR 0 30
27042: PUSH
27043: LD_INT 2
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 3
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 3
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 3
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 4
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 4
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 4
27107: PUSH
27108: LD_INT 1
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 5
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 5
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 5
27138: PUSH
27139: LD_INT 1
27141: NEG
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 6
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 6
27159: PUSH
27160: LD_INT 1
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27181: LD_ADDR_VAR 0 31
27185: PUSH
27186: LD_INT 3
27188: PUSH
27189: LD_INT 2
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 3
27198: PUSH
27199: LD_INT 3
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: LD_INT 3
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 4
27218: PUSH
27219: LD_INT 3
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 4
27228: PUSH
27229: LD_INT 4
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 3
27238: PUSH
27239: LD_INT 4
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 5
27248: PUSH
27249: LD_INT 4
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 5
27258: PUSH
27259: LD_INT 5
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 4
27268: PUSH
27269: LD_INT 5
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 6
27278: PUSH
27279: LD_INT 5
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 6
27288: PUSH
27289: LD_INT 6
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 5
27298: PUSH
27299: LD_INT 6
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27320: LD_ADDR_VAR 0 32
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: LD_INT 3
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: LD_INT 3
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: LD_INT 4
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: LD_INT 4
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: NEG
27379: PUSH
27380: LD_INT 3
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: LD_INT 5
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 0
27399: PUSH
27400: LD_INT 5
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: LD_INT 4
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: PUSH
27421: LD_INT 6
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: LD_INT 6
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 1
27440: NEG
27441: PUSH
27442: LD_INT 5
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27463: LD_ADDR_VAR 0 33
27467: PUSH
27468: LD_INT 2
27470: NEG
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 3
27481: NEG
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 3
27492: NEG
27493: PUSH
27494: LD_INT 1
27496: NEG
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 3
27504: NEG
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 4
27515: NEG
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 4
27526: NEG
27527: PUSH
27528: LD_INT 1
27530: NEG
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 4
27538: NEG
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 5
27549: NEG
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 5
27560: NEG
27561: PUSH
27562: LD_INT 1
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 5
27572: NEG
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 6
27583: NEG
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 6
27594: NEG
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27618: LD_ADDR_VAR 0 34
27622: PUSH
27623: LD_INT 2
27625: NEG
27626: PUSH
27627: LD_INT 3
27629: NEG
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 3
27637: NEG
27638: PUSH
27639: LD_INT 2
27641: NEG
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 3
27649: NEG
27650: PUSH
27651: LD_INT 3
27653: NEG
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 3
27661: NEG
27662: PUSH
27663: LD_INT 4
27665: NEG
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 4
27673: NEG
27674: PUSH
27675: LD_INT 3
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 4
27685: NEG
27686: PUSH
27687: LD_INT 4
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 4
27697: NEG
27698: PUSH
27699: LD_INT 5
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 5
27709: NEG
27710: PUSH
27711: LD_INT 4
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 5
27721: NEG
27722: PUSH
27723: LD_INT 5
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 5
27733: NEG
27734: PUSH
27735: LD_INT 6
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 6
27745: NEG
27746: PUSH
27747: LD_INT 5
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 6
27757: NEG
27758: PUSH
27759: LD_INT 6
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27781: LD_ADDR_VAR 0 41
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 2
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 1
27799: NEG
27800: PUSH
27801: LD_INT 3
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: LD_INT 2
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: LIST
27824: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27825: LD_ADDR_VAR 0 42
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 3
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27866: LD_ADDR_VAR 0 43
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 3
27883: PUSH
27884: LD_INT 2
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 2
27893: PUSH
27894: LD_INT 3
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27906: LD_ADDR_VAR 0 44
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: LD_INT 3
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: LD_INT 2
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27947: LD_ADDR_VAR 0 45
27951: PUSH
27952: LD_INT 2
27954: NEG
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 2
27965: NEG
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 3
27976: NEG
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: LIST
27990: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27991: LD_ADDR_VAR 0 46
27995: PUSH
27996: LD_INT 2
27998: NEG
27999: PUSH
28000: LD_INT 2
28002: NEG
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: NEG
28011: PUSH
28012: LD_INT 3
28014: NEG
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 3
28022: NEG
28023: PUSH
28024: LD_INT 2
28026: NEG
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: LIST
28036: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28037: LD_ADDR_VAR 0 47
28041: PUSH
28042: LD_INT 2
28044: NEG
28045: PUSH
28046: LD_INT 3
28048: NEG
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: PUSH
28058: LD_INT 3
28060: NEG
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28070: LD_ADDR_VAR 0 48
28074: PUSH
28075: LD_INT 1
28077: PUSH
28078: LD_INT 2
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28101: LD_ADDR_VAR 0 49
28105: PUSH
28106: LD_INT 3
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 3
28118: PUSH
28119: LD_INT 2
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28130: LD_ADDR_VAR 0 50
28134: PUSH
28135: LD_INT 2
28137: PUSH
28138: LD_INT 3
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 3
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28159: LD_ADDR_VAR 0 51
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: LD_INT 2
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 2
28177: NEG
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28190: LD_ADDR_VAR 0 52
28194: PUSH
28195: LD_INT 3
28197: NEG
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 3
28209: NEG
28210: PUSH
28211: LD_INT 2
28213: NEG
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28223: LD_ADDR_VAR 0 53
28227: PUSH
28228: LD_INT 1
28230: NEG
28231: PUSH
28232: LD_INT 3
28234: NEG
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: LD_INT 3
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: PUSH
28254: LD_INT 2
28256: NEG
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: LIST
28266: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28267: LD_ADDR_VAR 0 54
28271: PUSH
28272: LD_INT 2
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 3
28285: PUSH
28286: LD_INT 0
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 3
28295: PUSH
28296: LD_INT 1
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: LIST
28307: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28308: LD_ADDR_VAR 0 55
28312: PUSH
28313: LD_INT 3
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 3
28325: PUSH
28326: LD_INT 3
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: LD_INT 3
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: LIST
28347: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28348: LD_ADDR_VAR 0 56
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: LD_INT 3
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: LD_INT 3
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 1
28375: NEG
28376: PUSH
28377: LD_INT 2
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28389: LD_ADDR_VAR 0 57
28393: PUSH
28394: LD_INT 2
28396: NEG
28397: PUSH
28398: LD_INT 1
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 3
28407: NEG
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 3
28418: NEG
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28433: LD_ADDR_VAR 0 58
28437: PUSH
28438: LD_INT 2
28440: NEG
28441: PUSH
28442: LD_INT 3
28444: NEG
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 3
28452: NEG
28453: PUSH
28454: LD_INT 2
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 3
28464: NEG
28465: PUSH
28466: LD_INT 3
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: LIST
28478: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28479: LD_ADDR_VAR 0 59
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: LD_INT 2
28490: NEG
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: LIST
28522: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28523: LD_ADDR_VAR 0 60
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 2
28551: PUSH
28552: LD_INT 1
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: LIST
28563: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28564: LD_ADDR_VAR 0 61
28568: PUSH
28569: LD_INT 2
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 2
28581: PUSH
28582: LD_INT 2
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: LD_INT 2
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28604: LD_ADDR_VAR 0 62
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: LD_INT 2
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 2
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: LD_INT 1
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: LIST
28644: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28645: LD_ADDR_VAR 0 63
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: LD_INT 1
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 2
28663: NEG
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 2
28674: NEG
28675: PUSH
28676: LD_INT 1
28678: NEG
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: LIST
28688: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28689: LD_ADDR_VAR 0 64
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: LD_INT 2
28700: NEG
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 2
28708: NEG
28709: PUSH
28710: LD_INT 1
28712: NEG
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 2
28720: NEG
28721: PUSH
28722: LD_INT 2
28724: NEG
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: ST_TO_ADDR
// end ; 2 :
28735: GO 32001
28737: LD_INT 2
28739: DOUBLE
28740: EQUAL
28741: IFTRUE 28745
28743: GO 32000
28745: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28746: LD_ADDR_VAR 0 29
28750: PUSH
28751: LD_INT 4
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 4
28763: PUSH
28764: LD_INT 1
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 5
28774: PUSH
28775: LD_INT 0
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 5
28784: PUSH
28785: LD_INT 1
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 4
28794: PUSH
28795: LD_INT 1
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 3
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 3
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 3
28825: PUSH
28826: LD_INT 2
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 5
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 3
28846: PUSH
28847: LD_INT 3
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 3
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 4
28866: PUSH
28867: LD_INT 3
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 4
28876: PUSH
28877: LD_INT 4
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 3
28886: PUSH
28887: LD_INT 4
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 2
28896: PUSH
28897: LD_INT 3
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 2
28906: PUSH
28907: LD_INT 2
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 4
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 2
28926: PUSH
28927: LD_INT 4
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: LD_INT 4
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: LD_INT 3
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 1
28956: PUSH
28957: LD_INT 4
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: LD_INT 5
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: LD_INT 5
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: LD_INT 4
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: LD_INT 3
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: LD_INT 5
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 2
29018: NEG
29019: PUSH
29020: LD_INT 3
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 3
29029: NEG
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 3
29040: NEG
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: NEG
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 2
29063: NEG
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 3
29074: NEG
29075: PUSH
29076: LD_INT 1
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 4
29085: NEG
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 4
29096: NEG
29097: PUSH
29098: LD_INT 1
29100: NEG
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 4
29108: NEG
29109: PUSH
29110: LD_INT 2
29112: NEG
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 2
29120: NEG
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 4
29131: NEG
29132: PUSH
29133: LD_INT 4
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 4
29143: NEG
29144: PUSH
29145: LD_INT 5
29147: NEG
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 3
29155: NEG
29156: PUSH
29157: LD_INT 4
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 3
29167: NEG
29168: PUSH
29169: LD_INT 3
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 4
29179: NEG
29180: PUSH
29181: LD_INT 3
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 5
29191: NEG
29192: PUSH
29193: LD_INT 4
29195: NEG
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 5
29203: NEG
29204: PUSH
29205: LD_INT 5
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 3
29215: NEG
29216: PUSH
29217: LD_INT 5
29219: NEG
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 5
29227: NEG
29228: PUSH
29229: LD_INT 3
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29284: LD_ADDR_VAR 0 30
29288: PUSH
29289: LD_INT 4
29291: PUSH
29292: LD_INT 4
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 4
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 5
29311: PUSH
29312: LD_INT 4
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 5
29321: PUSH
29322: LD_INT 5
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 4
29331: PUSH
29332: LD_INT 5
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 3
29341: PUSH
29342: LD_INT 4
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 3
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 5
29361: PUSH
29362: LD_INT 3
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 3
29371: PUSH
29372: LD_INT 5
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: LD_INT 3
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: LD_INT 2
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: PUSH
29402: LD_INT 3
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 1
29411: PUSH
29412: LD_INT 4
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: LD_INT 4
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 1
29431: NEG
29432: PUSH
29433: LD_INT 3
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: NEG
29443: PUSH
29444: LD_INT 2
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 2
29453: PUSH
29454: LD_INT 4
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 2
29463: NEG
29464: PUSH
29465: LD_INT 2
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 4
29474: NEG
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 4
29485: NEG
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 3
29497: NEG
29498: PUSH
29499: LD_INT 0
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 3
29508: NEG
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 4
29519: NEG
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 5
29530: NEG
29531: PUSH
29532: LD_INT 0
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 5
29541: NEG
29542: PUSH
29543: LD_INT 1
29545: NEG
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 5
29553: NEG
29554: PUSH
29555: LD_INT 2
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 3
29565: NEG
29566: PUSH
29567: LD_INT 2
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 3
29576: NEG
29577: PUSH
29578: LD_INT 3
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 3
29588: NEG
29589: PUSH
29590: LD_INT 4
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 2
29600: NEG
29601: PUSH
29602: LD_INT 3
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 2
29612: NEG
29613: PUSH
29614: LD_INT 2
29616: NEG
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 3
29624: NEG
29625: PUSH
29626: LD_INT 2
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 4
29636: NEG
29637: PUSH
29638: LD_INT 3
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 4
29648: NEG
29649: PUSH
29650: LD_INT 4
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: NEG
29661: PUSH
29662: LD_INT 4
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 4
29672: NEG
29673: PUSH
29674: LD_INT 2
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 0
29684: PUSH
29685: LD_INT 4
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: LD_INT 5
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 4
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: LD_INT 3
29720: NEG
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 0
29728: PUSH
29729: LD_INT 3
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 1
29739: NEG
29740: PUSH
29741: LD_INT 4
29743: NEG
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: LD_INT 5
29755: NEG
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: LD_INT 3
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 2
29774: NEG
29775: PUSH
29776: LD_INT 5
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29831: LD_ADDR_VAR 0 31
29835: PUSH
29836: LD_INT 0
29838: PUSH
29839: LD_INT 4
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: LD_INT 3
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: LD_INT 4
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: LD_INT 5
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: LD_INT 5
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 1
29888: NEG
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: LD_INT 3
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 2
29910: PUSH
29911: LD_INT 5
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 2
29920: NEG
29921: PUSH
29922: LD_INT 3
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 3
29931: NEG
29932: PUSH
29933: LD_INT 0
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 3
29942: NEG
29943: PUSH
29944: LD_INT 1
29946: NEG
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 2
29954: NEG
29955: PUSH
29956: LD_INT 0
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 2
29965: NEG
29966: PUSH
29967: LD_INT 1
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 3
29976: NEG
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 4
29987: NEG
29988: PUSH
29989: LD_INT 0
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 4
29998: NEG
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 4
30010: NEG
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 2
30022: NEG
30023: PUSH
30024: LD_INT 2
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 4
30033: NEG
30034: PUSH
30035: LD_INT 4
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 4
30045: NEG
30046: PUSH
30047: LD_INT 5
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 3
30057: NEG
30058: PUSH
30059: LD_INT 4
30061: NEG
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 3
30069: NEG
30070: PUSH
30071: LD_INT 3
30073: NEG
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 4
30081: NEG
30082: PUSH
30083: LD_INT 3
30085: NEG
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 5
30093: NEG
30094: PUSH
30095: LD_INT 4
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 5
30105: NEG
30106: PUSH
30107: LD_INT 5
30109: NEG
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 3
30117: NEG
30118: PUSH
30119: LD_INT 5
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 5
30129: NEG
30130: PUSH
30131: LD_INT 3
30133: NEG
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: LD_INT 3
30144: NEG
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: LD_INT 4
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: LD_INT 3
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: LD_INT 2
30177: NEG
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PUSH
30198: LD_INT 3
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 1
30208: NEG
30209: PUSH
30210: LD_INT 4
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 2
30220: PUSH
30221: LD_INT 2
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: NEG
30232: PUSH
30233: LD_INT 4
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 4
30243: PUSH
30244: LD_INT 0
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 4
30253: PUSH
30254: LD_INT 1
30256: NEG
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 5
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 5
30274: PUSH
30275: LD_INT 1
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 4
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 3
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 3
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 3
30315: PUSH
30316: LD_INT 2
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 5
30326: PUSH
30327: LD_INT 2
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30381: LD_ADDR_VAR 0 32
30385: PUSH
30386: LD_INT 4
30388: NEG
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 4
30399: NEG
30400: PUSH
30401: LD_INT 1
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 3
30411: NEG
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 3
30422: NEG
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 4
30433: NEG
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 5
30444: NEG
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 5
30455: NEG
30456: PUSH
30457: LD_INT 1
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 5
30467: NEG
30468: PUSH
30469: LD_INT 2
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 3
30479: NEG
30480: PUSH
30481: LD_INT 2
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: LD_INT 3
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 3
30502: NEG
30503: PUSH
30504: LD_INT 4
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 2
30514: NEG
30515: PUSH
30516: LD_INT 3
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 2
30526: NEG
30527: PUSH
30528: LD_INT 2
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 3
30538: NEG
30539: PUSH
30540: LD_INT 2
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 4
30550: NEG
30551: PUSH
30552: LD_INT 3
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 4
30562: NEG
30563: PUSH
30564: LD_INT 4
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 2
30574: NEG
30575: PUSH
30576: LD_INT 4
30578: NEG
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 4
30586: NEG
30587: PUSH
30588: LD_INT 2
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: LD_INT 4
30601: NEG
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 5
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: LD_INT 4
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: LD_INT 3
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: LD_INT 3
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 1
30653: NEG
30654: PUSH
30655: LD_INT 4
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: LD_INT 5
30669: NEG
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 2
30677: PUSH
30678: LD_INT 3
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: LD_INT 5
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 3
30700: PUSH
30701: LD_INT 0
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 3
30710: PUSH
30711: LD_INT 1
30713: NEG
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 4
30721: PUSH
30722: LD_INT 0
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 4
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 3
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 2
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: LD_INT 2
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 4
30783: PUSH
30784: LD_INT 2
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 4
30793: PUSH
30794: LD_INT 4
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 4
30803: PUSH
30804: LD_INT 3
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 5
30813: PUSH
30814: LD_INT 4
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 5
30823: PUSH
30824: LD_INT 5
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 4
30833: PUSH
30834: LD_INT 5
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 3
30843: PUSH
30844: LD_INT 4
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 3
30853: PUSH
30854: LD_INT 3
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 5
30863: PUSH
30864: LD_INT 3
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 3
30873: PUSH
30874: LD_INT 5
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30928: LD_ADDR_VAR 0 33
30932: PUSH
30933: LD_INT 4
30935: NEG
30936: PUSH
30937: LD_INT 4
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 4
30947: NEG
30948: PUSH
30949: LD_INT 5
30951: NEG
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 3
30959: NEG
30960: PUSH
30961: LD_INT 4
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 3
30971: NEG
30972: PUSH
30973: LD_INT 3
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 4
30983: NEG
30984: PUSH
30985: LD_INT 3
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 5
30995: NEG
30996: PUSH
30997: LD_INT 4
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 5
31007: NEG
31008: PUSH
31009: LD_INT 5
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 3
31019: NEG
31020: PUSH
31021: LD_INT 5
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 5
31031: NEG
31032: PUSH
31033: LD_INT 3
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: LD_INT 3
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 0
31054: PUSH
31055: LD_INT 4
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: LD_INT 3
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: LD_INT 2
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: LD_INT 2
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: LD_INT 3
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: LD_INT 4
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 2
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 2
31133: NEG
31134: PUSH
31135: LD_INT 4
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 4
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 4
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 5
31166: PUSH
31167: LD_INT 0
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 5
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 4
31186: PUSH
31187: LD_INT 1
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 3
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 3
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 3
31217: PUSH
31218: LD_INT 2
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 5
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 3
31238: PUSH
31239: LD_INT 3
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 4
31258: PUSH
31259: LD_INT 3
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 4
31268: PUSH
31269: LD_INT 4
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 3
31278: PUSH
31279: LD_INT 4
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 2
31288: PUSH
31289: LD_INT 3
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 4
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 2
31318: PUSH
31319: LD_INT 4
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: LD_INT 4
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 0
31338: PUSH
31339: LD_INT 3
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: LD_INT 4
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: LD_INT 5
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: LD_INT 5
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PUSH
31380: LD_INT 4
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: LD_INT 3
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: LD_INT 5
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 2
31410: NEG
31411: PUSH
31412: LD_INT 3
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31466: LD_ADDR_VAR 0 34
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: LD_INT 4
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: LD_INT 5
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: LD_INT 4
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: LD_INT 3
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: LD_INT 3
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: LD_INT 4
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: LD_INT 5
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: LD_INT 3
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 2
31563: NEG
31564: PUSH
31565: LD_INT 5
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 3
31585: PUSH
31586: LD_INT 1
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 4
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 4
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 4
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 4
31668: PUSH
31669: LD_INT 4
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 4
31678: PUSH
31679: LD_INT 3
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 5
31688: PUSH
31689: LD_INT 4
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 5
31698: PUSH
31699: LD_INT 5
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 4
31708: PUSH
31709: LD_INT 5
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 3
31718: PUSH
31719: LD_INT 4
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 3
31728: PUSH
31729: LD_INT 3
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 5
31738: PUSH
31739: LD_INT 3
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 3
31748: PUSH
31749: LD_INT 5
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: LD_INT 3
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 0
31768: PUSH
31769: LD_INT 2
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: LD_INT 3
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: LD_INT 4
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: LD_INT 4
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: LD_INT 3
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: LD_INT 4
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 2
31840: NEG
31841: PUSH
31842: LD_INT 2
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 4
31851: NEG
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 4
31862: NEG
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 3
31874: NEG
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 3
31885: NEG
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 4
31896: NEG
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 5
31907: NEG
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 5
31918: NEG
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 5
31930: NEG
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 3
31942: NEG
31943: PUSH
31944: LD_INT 2
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: ST_TO_ADDR
// end ; end ;
31998: GO 32001
32000: POP
// case btype of b_depot , b_warehouse :
32001: LD_VAR 0 1
32005: PUSH
32006: LD_INT 0
32008: DOUBLE
32009: EQUAL
32010: IFTRUE 32020
32012: LD_INT 1
32014: DOUBLE
32015: EQUAL
32016: IFTRUE 32020
32018: GO 32221
32020: POP
// case nation of nation_american :
32021: LD_VAR 0 5
32025: PUSH
32026: LD_INT 1
32028: DOUBLE
32029: EQUAL
32030: IFTRUE 32034
32032: GO 32090
32034: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32035: LD_ADDR_VAR 0 9
32039: PUSH
32040: LD_VAR 0 11
32044: PUSH
32045: LD_VAR 0 12
32049: PUSH
32050: LD_VAR 0 13
32054: PUSH
32055: LD_VAR 0 14
32059: PUSH
32060: LD_VAR 0 15
32064: PUSH
32065: LD_VAR 0 16
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: PUSH
32078: LD_VAR 0 4
32082: PUSH
32083: LD_INT 1
32085: PLUS
32086: ARRAY
32087: ST_TO_ADDR
32088: GO 32219
32090: LD_INT 2
32092: DOUBLE
32093: EQUAL
32094: IFTRUE 32098
32096: GO 32154
32098: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32099: LD_ADDR_VAR 0 9
32103: PUSH
32104: LD_VAR 0 17
32108: PUSH
32109: LD_VAR 0 18
32113: PUSH
32114: LD_VAR 0 19
32118: PUSH
32119: LD_VAR 0 20
32123: PUSH
32124: LD_VAR 0 21
32128: PUSH
32129: LD_VAR 0 22
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: PUSH
32142: LD_VAR 0 4
32146: PUSH
32147: LD_INT 1
32149: PLUS
32150: ARRAY
32151: ST_TO_ADDR
32152: GO 32219
32154: LD_INT 3
32156: DOUBLE
32157: EQUAL
32158: IFTRUE 32162
32160: GO 32218
32162: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32163: LD_ADDR_VAR 0 9
32167: PUSH
32168: LD_VAR 0 23
32172: PUSH
32173: LD_VAR 0 24
32177: PUSH
32178: LD_VAR 0 25
32182: PUSH
32183: LD_VAR 0 26
32187: PUSH
32188: LD_VAR 0 27
32192: PUSH
32193: LD_VAR 0 28
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: PUSH
32206: LD_VAR 0 4
32210: PUSH
32211: LD_INT 1
32213: PLUS
32214: ARRAY
32215: ST_TO_ADDR
32216: GO 32219
32218: POP
32219: GO 32774
32221: LD_INT 2
32223: DOUBLE
32224: EQUAL
32225: IFTRUE 32235
32227: LD_INT 3
32229: DOUBLE
32230: EQUAL
32231: IFTRUE 32235
32233: GO 32291
32235: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32236: LD_ADDR_VAR 0 9
32240: PUSH
32241: LD_VAR 0 29
32245: PUSH
32246: LD_VAR 0 30
32250: PUSH
32251: LD_VAR 0 31
32255: PUSH
32256: LD_VAR 0 32
32260: PUSH
32261: LD_VAR 0 33
32265: PUSH
32266: LD_VAR 0 34
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: PUSH
32279: LD_VAR 0 4
32283: PUSH
32284: LD_INT 1
32286: PLUS
32287: ARRAY
32288: ST_TO_ADDR
32289: GO 32774
32291: LD_INT 16
32293: DOUBLE
32294: EQUAL
32295: IFTRUE 32353
32297: LD_INT 17
32299: DOUBLE
32300: EQUAL
32301: IFTRUE 32353
32303: LD_INT 18
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32353
32309: LD_INT 19
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32353
32315: LD_INT 22
32317: DOUBLE
32318: EQUAL
32319: IFTRUE 32353
32321: LD_INT 20
32323: DOUBLE
32324: EQUAL
32325: IFTRUE 32353
32327: LD_INT 21
32329: DOUBLE
32330: EQUAL
32331: IFTRUE 32353
32333: LD_INT 23
32335: DOUBLE
32336: EQUAL
32337: IFTRUE 32353
32339: LD_INT 24
32341: DOUBLE
32342: EQUAL
32343: IFTRUE 32353
32345: LD_INT 25
32347: DOUBLE
32348: EQUAL
32349: IFTRUE 32353
32351: GO 32409
32353: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32354: LD_ADDR_VAR 0 9
32358: PUSH
32359: LD_VAR 0 35
32363: PUSH
32364: LD_VAR 0 36
32368: PUSH
32369: LD_VAR 0 37
32373: PUSH
32374: LD_VAR 0 38
32378: PUSH
32379: LD_VAR 0 39
32383: PUSH
32384: LD_VAR 0 40
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: PUSH
32397: LD_VAR 0 4
32401: PUSH
32402: LD_INT 1
32404: PLUS
32405: ARRAY
32406: ST_TO_ADDR
32407: GO 32774
32409: LD_INT 6
32411: DOUBLE
32412: EQUAL
32413: IFTRUE 32465
32415: LD_INT 7
32417: DOUBLE
32418: EQUAL
32419: IFTRUE 32465
32421: LD_INT 8
32423: DOUBLE
32424: EQUAL
32425: IFTRUE 32465
32427: LD_INT 13
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32465
32433: LD_INT 12
32435: DOUBLE
32436: EQUAL
32437: IFTRUE 32465
32439: LD_INT 15
32441: DOUBLE
32442: EQUAL
32443: IFTRUE 32465
32445: LD_INT 11
32447: DOUBLE
32448: EQUAL
32449: IFTRUE 32465
32451: LD_INT 14
32453: DOUBLE
32454: EQUAL
32455: IFTRUE 32465
32457: LD_INT 10
32459: DOUBLE
32460: EQUAL
32461: IFTRUE 32465
32463: GO 32521
32465: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32466: LD_ADDR_VAR 0 9
32470: PUSH
32471: LD_VAR 0 41
32475: PUSH
32476: LD_VAR 0 42
32480: PUSH
32481: LD_VAR 0 43
32485: PUSH
32486: LD_VAR 0 44
32490: PUSH
32491: LD_VAR 0 45
32495: PUSH
32496: LD_VAR 0 46
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: PUSH
32509: LD_VAR 0 4
32513: PUSH
32514: LD_INT 1
32516: PLUS
32517: ARRAY
32518: ST_TO_ADDR
32519: GO 32774
32521: LD_INT 36
32523: DOUBLE
32524: EQUAL
32525: IFTRUE 32529
32527: GO 32585
32529: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32530: LD_ADDR_VAR 0 9
32534: PUSH
32535: LD_VAR 0 47
32539: PUSH
32540: LD_VAR 0 48
32544: PUSH
32545: LD_VAR 0 49
32549: PUSH
32550: LD_VAR 0 50
32554: PUSH
32555: LD_VAR 0 51
32559: PUSH
32560: LD_VAR 0 52
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: PUSH
32573: LD_VAR 0 4
32577: PUSH
32578: LD_INT 1
32580: PLUS
32581: ARRAY
32582: ST_TO_ADDR
32583: GO 32774
32585: LD_INT 4
32587: DOUBLE
32588: EQUAL
32589: IFTRUE 32611
32591: LD_INT 5
32593: DOUBLE
32594: EQUAL
32595: IFTRUE 32611
32597: LD_INT 34
32599: DOUBLE
32600: EQUAL
32601: IFTRUE 32611
32603: LD_INT 37
32605: DOUBLE
32606: EQUAL
32607: IFTRUE 32611
32609: GO 32667
32611: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32612: LD_ADDR_VAR 0 9
32616: PUSH
32617: LD_VAR 0 53
32621: PUSH
32622: LD_VAR 0 54
32626: PUSH
32627: LD_VAR 0 55
32631: PUSH
32632: LD_VAR 0 56
32636: PUSH
32637: LD_VAR 0 57
32641: PUSH
32642: LD_VAR 0 58
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: PUSH
32655: LD_VAR 0 4
32659: PUSH
32660: LD_INT 1
32662: PLUS
32663: ARRAY
32664: ST_TO_ADDR
32665: GO 32774
32667: LD_INT 31
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32717
32673: LD_INT 32
32675: DOUBLE
32676: EQUAL
32677: IFTRUE 32717
32679: LD_INT 33
32681: DOUBLE
32682: EQUAL
32683: IFTRUE 32717
32685: LD_INT 27
32687: DOUBLE
32688: EQUAL
32689: IFTRUE 32717
32691: LD_INT 26
32693: DOUBLE
32694: EQUAL
32695: IFTRUE 32717
32697: LD_INT 28
32699: DOUBLE
32700: EQUAL
32701: IFTRUE 32717
32703: LD_INT 29
32705: DOUBLE
32706: EQUAL
32707: IFTRUE 32717
32709: LD_INT 30
32711: DOUBLE
32712: EQUAL
32713: IFTRUE 32717
32715: GO 32773
32717: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32718: LD_ADDR_VAR 0 9
32722: PUSH
32723: LD_VAR 0 59
32727: PUSH
32728: LD_VAR 0 60
32732: PUSH
32733: LD_VAR 0 61
32737: PUSH
32738: LD_VAR 0 62
32742: PUSH
32743: LD_VAR 0 63
32747: PUSH
32748: LD_VAR 0 64
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: PUSH
32761: LD_VAR 0 4
32765: PUSH
32766: LD_INT 1
32768: PLUS
32769: ARRAY
32770: ST_TO_ADDR
32771: GO 32774
32773: POP
// temp_list2 = [ ] ;
32774: LD_ADDR_VAR 0 10
32778: PUSH
32779: EMPTY
32780: ST_TO_ADDR
// for i in temp_list do
32781: LD_ADDR_VAR 0 8
32785: PUSH
32786: LD_VAR 0 9
32790: PUSH
32791: FOR_IN
32792: IFFALSE 32844
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32794: LD_ADDR_VAR 0 10
32798: PUSH
32799: LD_VAR 0 10
32803: PUSH
32804: LD_VAR 0 8
32808: PUSH
32809: LD_INT 1
32811: ARRAY
32812: PUSH
32813: LD_VAR 0 2
32817: PLUS
32818: PUSH
32819: LD_VAR 0 8
32823: PUSH
32824: LD_INT 2
32826: ARRAY
32827: PUSH
32828: LD_VAR 0 3
32832: PLUS
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: EMPTY
32839: LIST
32840: ADD
32841: ST_TO_ADDR
32842: GO 32791
32844: POP
32845: POP
// result = temp_list2 ;
32846: LD_ADDR_VAR 0 7
32850: PUSH
32851: LD_VAR 0 10
32855: ST_TO_ADDR
// end ;
32856: LD_VAR 0 7
32860: RET
// export function EnemyInRange ( unit , dist ) ; begin
32861: LD_INT 0
32863: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32864: LD_ADDR_VAR 0 3
32868: PUSH
32869: LD_VAR 0 1
32873: PPUSH
32874: CALL_OW 255
32878: PPUSH
32879: LD_VAR 0 1
32883: PPUSH
32884: CALL_OW 250
32888: PPUSH
32889: LD_VAR 0 1
32893: PPUSH
32894: CALL_OW 251
32898: PPUSH
32899: LD_VAR 0 2
32903: PPUSH
32904: CALL 6234 0 4
32908: PUSH
32909: LD_INT 4
32911: ARRAY
32912: ST_TO_ADDR
// end ;
32913: LD_VAR 0 3
32917: RET
// export function PlayerSeeMe ( unit ) ; begin
32918: LD_INT 0
32920: PPUSH
// result := See ( your_side , unit ) ;
32921: LD_ADDR_VAR 0 2
32925: PUSH
32926: LD_OWVAR 2
32930: PPUSH
32931: LD_VAR 0 1
32935: PPUSH
32936: CALL_OW 292
32940: ST_TO_ADDR
// end ;
32941: LD_VAR 0 2
32945: RET
// export function ReverseDir ( unit ) ; begin
32946: LD_INT 0
32948: PPUSH
// if not unit then
32949: LD_VAR 0 1
32953: NOT
32954: IFFALSE 32958
// exit ;
32956: GO 32981
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32958: LD_ADDR_VAR 0 2
32962: PUSH
32963: LD_VAR 0 1
32967: PPUSH
32968: CALL_OW 254
32972: PUSH
32973: LD_INT 3
32975: PLUS
32976: PUSH
32977: LD_INT 6
32979: MOD
32980: ST_TO_ADDR
// end ;
32981: LD_VAR 0 2
32985: RET
// export function ReverseArray ( array ) ; var i ; begin
32986: LD_INT 0
32988: PPUSH
32989: PPUSH
// if not array then
32990: LD_VAR 0 1
32994: NOT
32995: IFFALSE 32999
// exit ;
32997: GO 33054
// result := [ ] ;
32999: LD_ADDR_VAR 0 2
33003: PUSH
33004: EMPTY
33005: ST_TO_ADDR
// for i := array downto 1 do
33006: LD_ADDR_VAR 0 3
33010: PUSH
33011: DOUBLE
33012: LD_VAR 0 1
33016: INC
33017: ST_TO_ADDR
33018: LD_INT 1
33020: PUSH
33021: FOR_DOWNTO
33022: IFFALSE 33052
// result := Join ( result , array [ i ] ) ;
33024: LD_ADDR_VAR 0 2
33028: PUSH
33029: LD_VAR 0 2
33033: PPUSH
33034: LD_VAR 0 1
33038: PUSH
33039: LD_VAR 0 3
33043: ARRAY
33044: PPUSH
33045: CALL 37697 0 2
33049: ST_TO_ADDR
33050: GO 33021
33052: POP
33053: POP
// end ;
33054: LD_VAR 0 2
33058: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33059: LD_INT 0
33061: PPUSH
33062: PPUSH
33063: PPUSH
33064: PPUSH
33065: PPUSH
33066: PPUSH
// if not unit or not hexes then
33067: LD_VAR 0 1
33071: NOT
33072: PUSH
33073: LD_VAR 0 2
33077: NOT
33078: OR
33079: IFFALSE 33083
// exit ;
33081: GO 33206
// dist := 9999 ;
33083: LD_ADDR_VAR 0 5
33087: PUSH
33088: LD_INT 9999
33090: ST_TO_ADDR
// for i = 1 to hexes do
33091: LD_ADDR_VAR 0 4
33095: PUSH
33096: DOUBLE
33097: LD_INT 1
33099: DEC
33100: ST_TO_ADDR
33101: LD_VAR 0 2
33105: PUSH
33106: FOR_TO
33107: IFFALSE 33194
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33109: LD_ADDR_VAR 0 6
33113: PUSH
33114: LD_VAR 0 1
33118: PPUSH
33119: LD_VAR 0 2
33123: PUSH
33124: LD_VAR 0 4
33128: ARRAY
33129: PUSH
33130: LD_INT 1
33132: ARRAY
33133: PPUSH
33134: LD_VAR 0 2
33138: PUSH
33139: LD_VAR 0 4
33143: ARRAY
33144: PUSH
33145: LD_INT 2
33147: ARRAY
33148: PPUSH
33149: CALL_OW 297
33153: ST_TO_ADDR
// if tdist < dist then
33154: LD_VAR 0 6
33158: PUSH
33159: LD_VAR 0 5
33163: LESS
33164: IFFALSE 33192
// begin hex := hexes [ i ] ;
33166: LD_ADDR_VAR 0 8
33170: PUSH
33171: LD_VAR 0 2
33175: PUSH
33176: LD_VAR 0 4
33180: ARRAY
33181: ST_TO_ADDR
// dist := tdist ;
33182: LD_ADDR_VAR 0 5
33186: PUSH
33187: LD_VAR 0 6
33191: ST_TO_ADDR
// end ; end ;
33192: GO 33106
33194: POP
33195: POP
// result := hex ;
33196: LD_ADDR_VAR 0 3
33200: PUSH
33201: LD_VAR 0 8
33205: ST_TO_ADDR
// end ;
33206: LD_VAR 0 3
33210: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33211: LD_INT 0
33213: PPUSH
33214: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33215: LD_VAR 0 1
33219: NOT
33220: PUSH
33221: LD_VAR 0 1
33225: PUSH
33226: LD_INT 21
33228: PUSH
33229: LD_INT 2
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 23
33238: PUSH
33239: LD_INT 2
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PPUSH
33250: CALL_OW 69
33254: IN
33255: NOT
33256: OR
33257: IFFALSE 33261
// exit ;
33259: GO 33308
// for i = 1 to 3 do
33261: LD_ADDR_VAR 0 3
33265: PUSH
33266: DOUBLE
33267: LD_INT 1
33269: DEC
33270: ST_TO_ADDR
33271: LD_INT 3
33273: PUSH
33274: FOR_TO
33275: IFFALSE 33306
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33277: LD_VAR 0 1
33281: PPUSH
33282: CALL_OW 250
33286: PPUSH
33287: LD_VAR 0 1
33291: PPUSH
33292: CALL_OW 251
33296: PPUSH
33297: LD_INT 1
33299: PPUSH
33300: CALL_OW 453
33304: GO 33274
33306: POP
33307: POP
// end ;
33308: LD_VAR 0 2
33312: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33313: LD_INT 0
33315: PPUSH
33316: PPUSH
33317: PPUSH
33318: PPUSH
33319: PPUSH
33320: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33321: LD_VAR 0 1
33325: NOT
33326: PUSH
33327: LD_VAR 0 2
33331: NOT
33332: OR
33333: PUSH
33334: LD_VAR 0 1
33338: PPUSH
33339: CALL_OW 314
33343: OR
33344: IFFALSE 33348
// exit ;
33346: GO 33815
// if GetLives ( i ) < 250 then
33348: LD_VAR 0 4
33352: PPUSH
33353: CALL_OW 256
33357: PUSH
33358: LD_INT 250
33360: LESS
33361: IFFALSE 33374
// begin ComAutodestruct ( i ) ;
33363: LD_VAR 0 4
33367: PPUSH
33368: CALL 33211 0 1
// exit ;
33372: GO 33815
// end ; x := GetX ( enemy_unit ) ;
33374: LD_ADDR_VAR 0 7
33378: PUSH
33379: LD_VAR 0 2
33383: PPUSH
33384: CALL_OW 250
33388: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33389: LD_ADDR_VAR 0 8
33393: PUSH
33394: LD_VAR 0 2
33398: PPUSH
33399: CALL_OW 251
33403: ST_TO_ADDR
// if not x or not y then
33404: LD_VAR 0 7
33408: NOT
33409: PUSH
33410: LD_VAR 0 8
33414: NOT
33415: OR
33416: IFFALSE 33420
// exit ;
33418: GO 33815
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33420: LD_ADDR_VAR 0 6
33424: PUSH
33425: LD_VAR 0 7
33429: PPUSH
33430: LD_INT 0
33432: PPUSH
33433: LD_INT 4
33435: PPUSH
33436: CALL_OW 272
33440: PUSH
33441: LD_VAR 0 8
33445: PPUSH
33446: LD_INT 0
33448: PPUSH
33449: LD_INT 4
33451: PPUSH
33452: CALL_OW 273
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_VAR 0 7
33465: PPUSH
33466: LD_INT 1
33468: PPUSH
33469: LD_INT 4
33471: PPUSH
33472: CALL_OW 272
33476: PUSH
33477: LD_VAR 0 8
33481: PPUSH
33482: LD_INT 1
33484: PPUSH
33485: LD_INT 4
33487: PPUSH
33488: CALL_OW 273
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_VAR 0 7
33501: PPUSH
33502: LD_INT 2
33504: PPUSH
33505: LD_INT 4
33507: PPUSH
33508: CALL_OW 272
33512: PUSH
33513: LD_VAR 0 8
33517: PPUSH
33518: LD_INT 2
33520: PPUSH
33521: LD_INT 4
33523: PPUSH
33524: CALL_OW 273
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_VAR 0 7
33537: PPUSH
33538: LD_INT 3
33540: PPUSH
33541: LD_INT 4
33543: PPUSH
33544: CALL_OW 272
33548: PUSH
33549: LD_VAR 0 8
33553: PPUSH
33554: LD_INT 3
33556: PPUSH
33557: LD_INT 4
33559: PPUSH
33560: CALL_OW 273
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_VAR 0 7
33573: PPUSH
33574: LD_INT 4
33576: PPUSH
33577: LD_INT 4
33579: PPUSH
33580: CALL_OW 272
33584: PUSH
33585: LD_VAR 0 8
33589: PPUSH
33590: LD_INT 4
33592: PPUSH
33593: LD_INT 4
33595: PPUSH
33596: CALL_OW 273
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_VAR 0 7
33609: PPUSH
33610: LD_INT 5
33612: PPUSH
33613: LD_INT 4
33615: PPUSH
33616: CALL_OW 272
33620: PUSH
33621: LD_VAR 0 8
33625: PPUSH
33626: LD_INT 5
33628: PPUSH
33629: LD_INT 4
33631: PPUSH
33632: CALL_OW 273
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: ST_TO_ADDR
// for i = tmp downto 1 do
33649: LD_ADDR_VAR 0 4
33653: PUSH
33654: DOUBLE
33655: LD_VAR 0 6
33659: INC
33660: ST_TO_ADDR
33661: LD_INT 1
33663: PUSH
33664: FOR_DOWNTO
33665: IFFALSE 33766
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33667: LD_VAR 0 6
33671: PUSH
33672: LD_VAR 0 4
33676: ARRAY
33677: PUSH
33678: LD_INT 1
33680: ARRAY
33681: PPUSH
33682: LD_VAR 0 6
33686: PUSH
33687: LD_VAR 0 4
33691: ARRAY
33692: PUSH
33693: LD_INT 2
33695: ARRAY
33696: PPUSH
33697: CALL_OW 488
33701: NOT
33702: PUSH
33703: LD_VAR 0 6
33707: PUSH
33708: LD_VAR 0 4
33712: ARRAY
33713: PUSH
33714: LD_INT 1
33716: ARRAY
33717: PPUSH
33718: LD_VAR 0 6
33722: PUSH
33723: LD_VAR 0 4
33727: ARRAY
33728: PUSH
33729: LD_INT 2
33731: ARRAY
33732: PPUSH
33733: CALL_OW 428
33737: PUSH
33738: LD_INT 0
33740: NONEQUAL
33741: OR
33742: IFFALSE 33764
// tmp := Delete ( tmp , i ) ;
33744: LD_ADDR_VAR 0 6
33748: PUSH
33749: LD_VAR 0 6
33753: PPUSH
33754: LD_VAR 0 4
33758: PPUSH
33759: CALL_OW 3
33763: ST_TO_ADDR
33764: GO 33664
33766: POP
33767: POP
// j := GetClosestHex ( unit , tmp ) ;
33768: LD_ADDR_VAR 0 5
33772: PUSH
33773: LD_VAR 0 1
33777: PPUSH
33778: LD_VAR 0 6
33782: PPUSH
33783: CALL 33059 0 2
33787: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33788: LD_VAR 0 1
33792: PPUSH
33793: LD_VAR 0 5
33797: PUSH
33798: LD_INT 1
33800: ARRAY
33801: PPUSH
33802: LD_VAR 0 5
33806: PUSH
33807: LD_INT 2
33809: ARRAY
33810: PPUSH
33811: CALL_OW 111
// end ;
33815: LD_VAR 0 3
33819: RET
// export function PrepareApemanSoldier ( ) ; begin
33820: LD_INT 0
33822: PPUSH
// uc_nation := 0 ;
33823: LD_ADDR_OWVAR 21
33827: PUSH
33828: LD_INT 0
33830: ST_TO_ADDR
// hc_sex := sex_male ;
33831: LD_ADDR_OWVAR 27
33835: PUSH
33836: LD_INT 1
33838: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
33839: LD_ADDR_OWVAR 28
33843: PUSH
33844: LD_INT 15
33846: ST_TO_ADDR
// hc_gallery :=  ;
33847: LD_ADDR_OWVAR 33
33851: PUSH
33852: LD_STRING 
33854: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33855: LD_ADDR_OWVAR 31
33859: PUSH
33860: LD_INT 0
33862: PPUSH
33863: LD_INT 3
33865: PPUSH
33866: CALL_OW 12
33870: PUSH
33871: LD_INT 0
33873: PPUSH
33874: LD_INT 3
33876: PPUSH
33877: CALL_OW 12
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: ST_TO_ADDR
// end ;
33894: LD_VAR 0 1
33898: RET
// export function PrepareApemanEngineer ( ) ; begin
33899: LD_INT 0
33901: PPUSH
// uc_nation := 0 ;
33902: LD_ADDR_OWVAR 21
33906: PUSH
33907: LD_INT 0
33909: ST_TO_ADDR
// hc_sex := sex_male ;
33910: LD_ADDR_OWVAR 27
33914: PUSH
33915: LD_INT 1
33917: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
33918: LD_ADDR_OWVAR 28
33922: PUSH
33923: LD_INT 16
33925: ST_TO_ADDR
// hc_gallery :=  ;
33926: LD_ADDR_OWVAR 33
33930: PUSH
33931: LD_STRING 
33933: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33934: LD_ADDR_OWVAR 31
33938: PUSH
33939: LD_INT 0
33941: PPUSH
33942: LD_INT 3
33944: PPUSH
33945: CALL_OW 12
33949: PUSH
33950: LD_INT 0
33952: PPUSH
33953: LD_INT 3
33955: PPUSH
33956: CALL_OW 12
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: ST_TO_ADDR
// end ;
33973: LD_VAR 0 1
33977: RET
// export function PrepareApeman ( agressivity ) ; begin
33978: LD_INT 0
33980: PPUSH
// uc_side := 0 ;
33981: LD_ADDR_OWVAR 20
33985: PUSH
33986: LD_INT 0
33988: ST_TO_ADDR
// uc_nation := 0 ;
33989: LD_ADDR_OWVAR 21
33993: PUSH
33994: LD_INT 0
33996: ST_TO_ADDR
// hc_sex := sex_male ;
33997: LD_ADDR_OWVAR 27
34001: PUSH
34002: LD_INT 1
34004: ST_TO_ADDR
// hc_class := class_apeman ;
34005: LD_ADDR_OWVAR 28
34009: PUSH
34010: LD_INT 12
34012: ST_TO_ADDR
// hc_gallery :=  ;
34013: LD_ADDR_OWVAR 33
34017: PUSH
34018: LD_STRING 
34020: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34021: LD_ADDR_OWVAR 35
34025: PUSH
34026: LD_VAR 0 1
34030: NEG
34031: PPUSH
34032: LD_VAR 0 1
34036: PPUSH
34037: CALL_OW 12
34041: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34042: LD_ADDR_OWVAR 31
34046: PUSH
34047: LD_INT 0
34049: PPUSH
34050: LD_INT 3
34052: PPUSH
34053: CALL_OW 12
34057: PUSH
34058: LD_INT 0
34060: PPUSH
34061: LD_INT 3
34063: PPUSH
34064: CALL_OW 12
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: ST_TO_ADDR
// end ;
34081: LD_VAR 0 2
34085: RET
// export function PrepareTiger ( agressivity ) ; begin
34086: LD_INT 0
34088: PPUSH
// uc_side := 0 ;
34089: LD_ADDR_OWVAR 20
34093: PUSH
34094: LD_INT 0
34096: ST_TO_ADDR
// uc_nation := 0 ;
34097: LD_ADDR_OWVAR 21
34101: PUSH
34102: LD_INT 0
34104: ST_TO_ADDR
// hc_class := class_tiger ;
34105: LD_ADDR_OWVAR 28
34109: PUSH
34110: LD_INT 14
34112: ST_TO_ADDR
// hc_gallery :=  ;
34113: LD_ADDR_OWVAR 33
34117: PUSH
34118: LD_STRING 
34120: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34121: LD_ADDR_OWVAR 35
34125: PUSH
34126: LD_VAR 0 1
34130: NEG
34131: PPUSH
34132: LD_VAR 0 1
34136: PPUSH
34137: CALL_OW 12
34141: ST_TO_ADDR
// end ;
34142: LD_VAR 0 2
34146: RET
// export function PrepareEnchidna ( ) ; begin
34147: LD_INT 0
34149: PPUSH
// uc_side := 0 ;
34150: LD_ADDR_OWVAR 20
34154: PUSH
34155: LD_INT 0
34157: ST_TO_ADDR
// uc_nation := 0 ;
34158: LD_ADDR_OWVAR 21
34162: PUSH
34163: LD_INT 0
34165: ST_TO_ADDR
// hc_class := class_baggie ;
34166: LD_ADDR_OWVAR 28
34170: PUSH
34171: LD_INT 13
34173: ST_TO_ADDR
// hc_gallery :=  ;
34174: LD_ADDR_OWVAR 33
34178: PUSH
34179: LD_STRING 
34181: ST_TO_ADDR
// end ;
34182: LD_VAR 0 1
34186: RET
// export function PrepareFrog ( ) ; begin
34187: LD_INT 0
34189: PPUSH
// uc_side := 0 ;
34190: LD_ADDR_OWVAR 20
34194: PUSH
34195: LD_INT 0
34197: ST_TO_ADDR
// uc_nation := 0 ;
34198: LD_ADDR_OWVAR 21
34202: PUSH
34203: LD_INT 0
34205: ST_TO_ADDR
// hc_class := class_frog ;
34206: LD_ADDR_OWVAR 28
34210: PUSH
34211: LD_INT 19
34213: ST_TO_ADDR
// hc_gallery :=  ;
34214: LD_ADDR_OWVAR 33
34218: PUSH
34219: LD_STRING 
34221: ST_TO_ADDR
// end ;
34222: LD_VAR 0 1
34226: RET
// export function PrepareFish ( ) ; begin
34227: LD_INT 0
34229: PPUSH
// uc_side := 0 ;
34230: LD_ADDR_OWVAR 20
34234: PUSH
34235: LD_INT 0
34237: ST_TO_ADDR
// uc_nation := 0 ;
34238: LD_ADDR_OWVAR 21
34242: PUSH
34243: LD_INT 0
34245: ST_TO_ADDR
// hc_class := class_fish ;
34246: LD_ADDR_OWVAR 28
34250: PUSH
34251: LD_INT 20
34253: ST_TO_ADDR
// hc_gallery :=  ;
34254: LD_ADDR_OWVAR 33
34258: PUSH
34259: LD_STRING 
34261: ST_TO_ADDR
// end ;
34262: LD_VAR 0 1
34266: RET
// export function PrepareBird ( ) ; begin
34267: LD_INT 0
34269: PPUSH
// uc_side := 0 ;
34270: LD_ADDR_OWVAR 20
34274: PUSH
34275: LD_INT 0
34277: ST_TO_ADDR
// uc_nation := 0 ;
34278: LD_ADDR_OWVAR 21
34282: PUSH
34283: LD_INT 0
34285: ST_TO_ADDR
// hc_class := class_phororhacos ;
34286: LD_ADDR_OWVAR 28
34290: PUSH
34291: LD_INT 18
34293: ST_TO_ADDR
// hc_gallery :=  ;
34294: LD_ADDR_OWVAR 33
34298: PUSH
34299: LD_STRING 
34301: ST_TO_ADDR
// end ;
34302: LD_VAR 0 1
34306: RET
// export function PrepareHorse ( ) ; begin
34307: LD_INT 0
34309: PPUSH
// uc_side := 0 ;
34310: LD_ADDR_OWVAR 20
34314: PUSH
34315: LD_INT 0
34317: ST_TO_ADDR
// uc_nation := 0 ;
34318: LD_ADDR_OWVAR 21
34322: PUSH
34323: LD_INT 0
34325: ST_TO_ADDR
// hc_class := class_horse ;
34326: LD_ADDR_OWVAR 28
34330: PUSH
34331: LD_INT 21
34333: ST_TO_ADDR
// hc_gallery :=  ;
34334: LD_ADDR_OWVAR 33
34338: PUSH
34339: LD_STRING 
34341: ST_TO_ADDR
// end ;
34342: LD_VAR 0 1
34346: RET
// export function PrepareMastodont ( ) ; begin
34347: LD_INT 0
34349: PPUSH
// uc_side := 0 ;
34350: LD_ADDR_OWVAR 20
34354: PUSH
34355: LD_INT 0
34357: ST_TO_ADDR
// uc_nation := 0 ;
34358: LD_ADDR_OWVAR 21
34362: PUSH
34363: LD_INT 0
34365: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34366: LD_ADDR_OWVAR 37
34370: PUSH
34371: LD_INT 31
34373: ST_TO_ADDR
// vc_control := control_rider ;
34374: LD_ADDR_OWVAR 38
34378: PUSH
34379: LD_INT 4
34381: ST_TO_ADDR
// end ;
34382: LD_VAR 0 1
34386: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34387: LD_INT 0
34389: PPUSH
34390: PPUSH
34391: PPUSH
// uc_side = 0 ;
34392: LD_ADDR_OWVAR 20
34396: PUSH
34397: LD_INT 0
34399: ST_TO_ADDR
// uc_nation = 0 ;
34400: LD_ADDR_OWVAR 21
34404: PUSH
34405: LD_INT 0
34407: ST_TO_ADDR
// InitHc_All ( ) ;
34408: CALL_OW 584
// InitVc ;
34412: CALL_OW 20
// if mastodonts then
34416: LD_VAR 0 6
34420: IFFALSE 34487
// for i = 1 to mastodonts do
34422: LD_ADDR_VAR 0 11
34426: PUSH
34427: DOUBLE
34428: LD_INT 1
34430: DEC
34431: ST_TO_ADDR
34432: LD_VAR 0 6
34436: PUSH
34437: FOR_TO
34438: IFFALSE 34485
// begin vc_chassis := 31 ;
34440: LD_ADDR_OWVAR 37
34444: PUSH
34445: LD_INT 31
34447: ST_TO_ADDR
// vc_control := control_rider ;
34448: LD_ADDR_OWVAR 38
34452: PUSH
34453: LD_INT 4
34455: ST_TO_ADDR
// animal := CreateVehicle ;
34456: LD_ADDR_VAR 0 12
34460: PUSH
34461: CALL_OW 45
34465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34466: LD_VAR 0 12
34470: PPUSH
34471: LD_VAR 0 8
34475: PPUSH
34476: LD_INT 0
34478: PPUSH
34479: CALL 36615 0 3
// end ;
34483: GO 34437
34485: POP
34486: POP
// if horses then
34487: LD_VAR 0 5
34491: IFFALSE 34558
// for i = 1 to horses do
34493: LD_ADDR_VAR 0 11
34497: PUSH
34498: DOUBLE
34499: LD_INT 1
34501: DEC
34502: ST_TO_ADDR
34503: LD_VAR 0 5
34507: PUSH
34508: FOR_TO
34509: IFFALSE 34556
// begin hc_class := 21 ;
34511: LD_ADDR_OWVAR 28
34515: PUSH
34516: LD_INT 21
34518: ST_TO_ADDR
// hc_gallery :=  ;
34519: LD_ADDR_OWVAR 33
34523: PUSH
34524: LD_STRING 
34526: ST_TO_ADDR
// animal := CreateHuman ;
34527: LD_ADDR_VAR 0 12
34531: PUSH
34532: CALL_OW 44
34536: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34537: LD_VAR 0 12
34541: PPUSH
34542: LD_VAR 0 8
34546: PPUSH
34547: LD_INT 0
34549: PPUSH
34550: CALL 36615 0 3
// end ;
34554: GO 34508
34556: POP
34557: POP
// if birds then
34558: LD_VAR 0 1
34562: IFFALSE 34629
// for i = 1 to birds do
34564: LD_ADDR_VAR 0 11
34568: PUSH
34569: DOUBLE
34570: LD_INT 1
34572: DEC
34573: ST_TO_ADDR
34574: LD_VAR 0 1
34578: PUSH
34579: FOR_TO
34580: IFFALSE 34627
// begin hc_class := 18 ;
34582: LD_ADDR_OWVAR 28
34586: PUSH
34587: LD_INT 18
34589: ST_TO_ADDR
// hc_gallery =  ;
34590: LD_ADDR_OWVAR 33
34594: PUSH
34595: LD_STRING 
34597: ST_TO_ADDR
// animal := CreateHuman ;
34598: LD_ADDR_VAR 0 12
34602: PUSH
34603: CALL_OW 44
34607: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34608: LD_VAR 0 12
34612: PPUSH
34613: LD_VAR 0 8
34617: PPUSH
34618: LD_INT 0
34620: PPUSH
34621: CALL 36615 0 3
// end ;
34625: GO 34579
34627: POP
34628: POP
// if tigers then
34629: LD_VAR 0 2
34633: IFFALSE 34717
// for i = 1 to tigers do
34635: LD_ADDR_VAR 0 11
34639: PUSH
34640: DOUBLE
34641: LD_INT 1
34643: DEC
34644: ST_TO_ADDR
34645: LD_VAR 0 2
34649: PUSH
34650: FOR_TO
34651: IFFALSE 34715
// begin hc_class = class_tiger ;
34653: LD_ADDR_OWVAR 28
34657: PUSH
34658: LD_INT 14
34660: ST_TO_ADDR
// hc_gallery =  ;
34661: LD_ADDR_OWVAR 33
34665: PUSH
34666: LD_STRING 
34668: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34669: LD_ADDR_OWVAR 35
34673: PUSH
34674: LD_INT 7
34676: NEG
34677: PPUSH
34678: LD_INT 7
34680: PPUSH
34681: CALL_OW 12
34685: ST_TO_ADDR
// animal := CreateHuman ;
34686: LD_ADDR_VAR 0 12
34690: PUSH
34691: CALL_OW 44
34695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34696: LD_VAR 0 12
34700: PPUSH
34701: LD_VAR 0 8
34705: PPUSH
34706: LD_INT 0
34708: PPUSH
34709: CALL 36615 0 3
// end ;
34713: GO 34650
34715: POP
34716: POP
// if apemans then
34717: LD_VAR 0 3
34721: IFFALSE 34844
// for i = 1 to apemans do
34723: LD_ADDR_VAR 0 11
34727: PUSH
34728: DOUBLE
34729: LD_INT 1
34731: DEC
34732: ST_TO_ADDR
34733: LD_VAR 0 3
34737: PUSH
34738: FOR_TO
34739: IFFALSE 34842
// begin hc_class = class_apeman ;
34741: LD_ADDR_OWVAR 28
34745: PUSH
34746: LD_INT 12
34748: ST_TO_ADDR
// hc_gallery =  ;
34749: LD_ADDR_OWVAR 33
34753: PUSH
34754: LD_STRING 
34756: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34757: LD_ADDR_OWVAR 35
34761: PUSH
34762: LD_INT 2
34764: NEG
34765: PPUSH
34766: LD_INT 2
34768: PPUSH
34769: CALL_OW 12
34773: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34774: LD_ADDR_OWVAR 31
34778: PUSH
34779: LD_INT 1
34781: PPUSH
34782: LD_INT 3
34784: PPUSH
34785: CALL_OW 12
34789: PUSH
34790: LD_INT 1
34792: PPUSH
34793: LD_INT 3
34795: PPUSH
34796: CALL_OW 12
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: ST_TO_ADDR
// animal := CreateHuman ;
34813: LD_ADDR_VAR 0 12
34817: PUSH
34818: CALL_OW 44
34822: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34823: LD_VAR 0 12
34827: PPUSH
34828: LD_VAR 0 8
34832: PPUSH
34833: LD_INT 0
34835: PPUSH
34836: CALL 36615 0 3
// end ;
34840: GO 34738
34842: POP
34843: POP
// if enchidnas then
34844: LD_VAR 0 4
34848: IFFALSE 34915
// for i = 1 to enchidnas do
34850: LD_ADDR_VAR 0 11
34854: PUSH
34855: DOUBLE
34856: LD_INT 1
34858: DEC
34859: ST_TO_ADDR
34860: LD_VAR 0 4
34864: PUSH
34865: FOR_TO
34866: IFFALSE 34913
// begin hc_class = 13 ;
34868: LD_ADDR_OWVAR 28
34872: PUSH
34873: LD_INT 13
34875: ST_TO_ADDR
// hc_gallery =  ;
34876: LD_ADDR_OWVAR 33
34880: PUSH
34881: LD_STRING 
34883: ST_TO_ADDR
// animal := CreateHuman ;
34884: LD_ADDR_VAR 0 12
34888: PUSH
34889: CALL_OW 44
34893: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34894: LD_VAR 0 12
34898: PPUSH
34899: LD_VAR 0 8
34903: PPUSH
34904: LD_INT 0
34906: PPUSH
34907: CALL 36615 0 3
// end ;
34911: GO 34865
34913: POP
34914: POP
// if fishes then
34915: LD_VAR 0 7
34919: IFFALSE 34986
// for i = 1 to fishes do
34921: LD_ADDR_VAR 0 11
34925: PUSH
34926: DOUBLE
34927: LD_INT 1
34929: DEC
34930: ST_TO_ADDR
34931: LD_VAR 0 7
34935: PUSH
34936: FOR_TO
34937: IFFALSE 34984
// begin hc_class = 20 ;
34939: LD_ADDR_OWVAR 28
34943: PUSH
34944: LD_INT 20
34946: ST_TO_ADDR
// hc_gallery =  ;
34947: LD_ADDR_OWVAR 33
34951: PUSH
34952: LD_STRING 
34954: ST_TO_ADDR
// animal := CreateHuman ;
34955: LD_ADDR_VAR 0 12
34959: PUSH
34960: CALL_OW 44
34964: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
34965: LD_VAR 0 12
34969: PPUSH
34970: LD_VAR 0 9
34974: PPUSH
34975: LD_INT 0
34977: PPUSH
34978: CALL 36615 0 3
// end ;
34982: GO 34936
34984: POP
34985: POP
// end ;
34986: LD_VAR 0 10
34990: RET
// export function WantHeal ( sci , unit ) ; begin
34991: LD_INT 0
34993: PPUSH
// if GetTaskList ( sci ) > 0 then
34994: LD_VAR 0 1
34998: PPUSH
34999: CALL_OW 437
35003: PUSH
35004: LD_INT 0
35006: GREATER
35007: IFFALSE 35077
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35009: LD_VAR 0 1
35013: PPUSH
35014: CALL_OW 437
35018: PUSH
35019: LD_INT 1
35021: ARRAY
35022: PUSH
35023: LD_INT 1
35025: ARRAY
35026: PUSH
35027: LD_STRING l
35029: EQUAL
35030: PUSH
35031: LD_VAR 0 1
35035: PPUSH
35036: CALL_OW 437
35040: PUSH
35041: LD_INT 1
35043: ARRAY
35044: PUSH
35045: LD_INT 4
35047: ARRAY
35048: PUSH
35049: LD_VAR 0 2
35053: EQUAL
35054: AND
35055: IFFALSE 35067
// result := true else
35057: LD_ADDR_VAR 0 3
35061: PUSH
35062: LD_INT 1
35064: ST_TO_ADDR
35065: GO 35075
// result := false ;
35067: LD_ADDR_VAR 0 3
35071: PUSH
35072: LD_INT 0
35074: ST_TO_ADDR
// end else
35075: GO 35085
// result := false ;
35077: LD_ADDR_VAR 0 3
35081: PUSH
35082: LD_INT 0
35084: ST_TO_ADDR
// end ;
35085: LD_VAR 0 3
35089: RET
// export function HealTarget ( sci ) ; begin
35090: LD_INT 0
35092: PPUSH
// if not sci then
35093: LD_VAR 0 1
35097: NOT
35098: IFFALSE 35102
// exit ;
35100: GO 35167
// result := 0 ;
35102: LD_ADDR_VAR 0 2
35106: PUSH
35107: LD_INT 0
35109: ST_TO_ADDR
// if GetTaskList ( sci ) then
35110: LD_VAR 0 1
35114: PPUSH
35115: CALL_OW 437
35119: IFFALSE 35167
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35121: LD_VAR 0 1
35125: PPUSH
35126: CALL_OW 437
35130: PUSH
35131: LD_INT 1
35133: ARRAY
35134: PUSH
35135: LD_INT 1
35137: ARRAY
35138: PUSH
35139: LD_STRING l
35141: EQUAL
35142: IFFALSE 35167
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35144: LD_ADDR_VAR 0 2
35148: PUSH
35149: LD_VAR 0 1
35153: PPUSH
35154: CALL_OW 437
35158: PUSH
35159: LD_INT 1
35161: ARRAY
35162: PUSH
35163: LD_INT 4
35165: ARRAY
35166: ST_TO_ADDR
// end ;
35167: LD_VAR 0 2
35171: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35172: LD_INT 0
35174: PPUSH
35175: PPUSH
35176: PPUSH
35177: PPUSH
// if not base_units then
35178: LD_VAR 0 1
35182: NOT
35183: IFFALSE 35187
// exit ;
35185: GO 35274
// result := false ;
35187: LD_ADDR_VAR 0 2
35191: PUSH
35192: LD_INT 0
35194: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35195: LD_ADDR_VAR 0 5
35199: PUSH
35200: LD_VAR 0 1
35204: PPUSH
35205: LD_INT 21
35207: PUSH
35208: LD_INT 3
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PPUSH
35215: CALL_OW 72
35219: ST_TO_ADDR
// if not tmp then
35220: LD_VAR 0 5
35224: NOT
35225: IFFALSE 35229
// exit ;
35227: GO 35274
// for i in tmp do
35229: LD_ADDR_VAR 0 3
35233: PUSH
35234: LD_VAR 0 5
35238: PUSH
35239: FOR_IN
35240: IFFALSE 35272
// begin result := EnemyInRange ( i , 22 ) ;
35242: LD_ADDR_VAR 0 2
35246: PUSH
35247: LD_VAR 0 3
35251: PPUSH
35252: LD_INT 22
35254: PPUSH
35255: CALL 32861 0 2
35259: ST_TO_ADDR
// if result then
35260: LD_VAR 0 2
35264: IFFALSE 35270
// exit ;
35266: POP
35267: POP
35268: GO 35274
// end ;
35270: GO 35239
35272: POP
35273: POP
// end ;
35274: LD_VAR 0 2
35278: RET
// export function FilterByTag ( units , tag ) ; begin
35279: LD_INT 0
35281: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35282: LD_ADDR_VAR 0 3
35286: PUSH
35287: LD_VAR 0 1
35291: PPUSH
35292: LD_INT 120
35294: PUSH
35295: LD_VAR 0 2
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PPUSH
35304: CALL_OW 72
35308: ST_TO_ADDR
// end ;
35309: LD_VAR 0 3
35313: RET
// export function IsDriver ( un ) ; begin
35314: LD_INT 0
35316: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35317: LD_ADDR_VAR 0 2
35321: PUSH
35322: LD_VAR 0 1
35326: PUSH
35327: LD_INT 55
35329: PUSH
35330: EMPTY
35331: LIST
35332: PPUSH
35333: CALL_OW 69
35337: IN
35338: ST_TO_ADDR
// end ;
35339: LD_VAR 0 2
35343: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35344: LD_INT 0
35346: PPUSH
35347: PPUSH
// list := [ ] ;
35348: LD_ADDR_VAR 0 5
35352: PUSH
35353: EMPTY
35354: ST_TO_ADDR
// case d of 0 :
35355: LD_VAR 0 3
35359: PUSH
35360: LD_INT 0
35362: DOUBLE
35363: EQUAL
35364: IFTRUE 35368
35366: GO 35501
35368: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35369: LD_ADDR_VAR 0 5
35373: PUSH
35374: LD_VAR 0 1
35378: PUSH
35379: LD_INT 4
35381: MINUS
35382: PUSH
35383: LD_VAR 0 2
35387: PUSH
35388: LD_INT 4
35390: MINUS
35391: PUSH
35392: LD_INT 2
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: LIST
35399: PUSH
35400: LD_VAR 0 1
35404: PUSH
35405: LD_INT 3
35407: MINUS
35408: PUSH
35409: LD_VAR 0 2
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: PUSH
35422: LD_VAR 0 1
35426: PUSH
35427: LD_INT 4
35429: PLUS
35430: PUSH
35431: LD_VAR 0 2
35435: PUSH
35436: LD_INT 4
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: PUSH
35444: LD_VAR 0 1
35448: PUSH
35449: LD_INT 3
35451: PLUS
35452: PUSH
35453: LD_VAR 0 2
35457: PUSH
35458: LD_INT 3
35460: PLUS
35461: PUSH
35462: LD_INT 5
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: LIST
35469: PUSH
35470: LD_VAR 0 1
35474: PUSH
35475: LD_VAR 0 2
35479: PUSH
35480: LD_INT 4
35482: PLUS
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: LIST
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: ST_TO_ADDR
// end ; 1 :
35499: GO 36199
35501: LD_INT 1
35503: DOUBLE
35504: EQUAL
35505: IFTRUE 35509
35507: GO 35642
35509: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35510: LD_ADDR_VAR 0 5
35514: PUSH
35515: LD_VAR 0 1
35519: PUSH
35520: LD_VAR 0 2
35524: PUSH
35525: LD_INT 4
35527: MINUS
35528: PUSH
35529: LD_INT 3
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: LIST
35536: PUSH
35537: LD_VAR 0 1
35541: PUSH
35542: LD_INT 3
35544: MINUS
35545: PUSH
35546: LD_VAR 0 2
35550: PUSH
35551: LD_INT 3
35553: MINUS
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: PUSH
35563: LD_VAR 0 1
35567: PUSH
35568: LD_INT 4
35570: MINUS
35571: PUSH
35572: LD_VAR 0 2
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: LIST
35584: PUSH
35585: LD_VAR 0 1
35589: PUSH
35590: LD_VAR 0 2
35594: PUSH
35595: LD_INT 3
35597: PLUS
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: PUSH
35607: LD_VAR 0 1
35611: PUSH
35612: LD_INT 4
35614: PLUS
35615: PUSH
35616: LD_VAR 0 2
35620: PUSH
35621: LD_INT 4
35623: PLUS
35624: PUSH
35625: LD_INT 5
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: LIST
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: ST_TO_ADDR
// end ; 2 :
35640: GO 36199
35642: LD_INT 2
35644: DOUBLE
35645: EQUAL
35646: IFTRUE 35650
35648: GO 35779
35650: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35651: LD_ADDR_VAR 0 5
35655: PUSH
35656: LD_VAR 0 1
35660: PUSH
35661: LD_VAR 0 2
35665: PUSH
35666: LD_INT 3
35668: MINUS
35669: PUSH
35670: LD_INT 3
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: PUSH
35678: LD_VAR 0 1
35682: PUSH
35683: LD_INT 4
35685: PLUS
35686: PUSH
35687: LD_VAR 0 2
35691: PUSH
35692: LD_INT 4
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: LIST
35699: PUSH
35700: LD_VAR 0 1
35704: PUSH
35705: LD_VAR 0 2
35709: PUSH
35710: LD_INT 4
35712: PLUS
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: LIST
35721: PUSH
35722: LD_VAR 0 1
35726: PUSH
35727: LD_INT 3
35729: MINUS
35730: PUSH
35731: LD_VAR 0 2
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: LIST
35743: PUSH
35744: LD_VAR 0 1
35748: PUSH
35749: LD_INT 4
35751: MINUS
35752: PUSH
35753: LD_VAR 0 2
35757: PUSH
35758: LD_INT 4
35760: MINUS
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: LIST
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: ST_TO_ADDR
// end ; 3 :
35777: GO 36199
35779: LD_INT 3
35781: DOUBLE
35782: EQUAL
35783: IFTRUE 35787
35785: GO 35920
35787: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35788: LD_ADDR_VAR 0 5
35792: PUSH
35793: LD_VAR 0 1
35797: PUSH
35798: LD_INT 3
35800: PLUS
35801: PUSH
35802: LD_VAR 0 2
35806: PUSH
35807: LD_INT 4
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: LIST
35814: PUSH
35815: LD_VAR 0 1
35819: PUSH
35820: LD_INT 4
35822: PLUS
35823: PUSH
35824: LD_VAR 0 2
35828: PUSH
35829: LD_INT 4
35831: PLUS
35832: PUSH
35833: LD_INT 5
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: PUSH
35841: LD_VAR 0 1
35845: PUSH
35846: LD_INT 4
35848: MINUS
35849: PUSH
35850: LD_VAR 0 2
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: PUSH
35863: LD_VAR 0 1
35867: PUSH
35868: LD_VAR 0 2
35872: PUSH
35873: LD_INT 4
35875: MINUS
35876: PUSH
35877: LD_INT 3
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: PUSH
35885: LD_VAR 0 1
35889: PUSH
35890: LD_INT 3
35892: MINUS
35893: PUSH
35894: LD_VAR 0 2
35898: PUSH
35899: LD_INT 3
35901: MINUS
35902: PUSH
35903: LD_INT 2
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: ST_TO_ADDR
// end ; 4 :
35918: GO 36199
35920: LD_INT 4
35922: DOUBLE
35923: EQUAL
35924: IFTRUE 35928
35926: GO 36061
35928: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35929: LD_ADDR_VAR 0 5
35933: PUSH
35934: LD_VAR 0 1
35938: PUSH
35939: LD_VAR 0 2
35943: PUSH
35944: LD_INT 4
35946: PLUS
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: PUSH
35956: LD_VAR 0 1
35960: PUSH
35961: LD_INT 3
35963: PLUS
35964: PUSH
35965: LD_VAR 0 2
35969: PUSH
35970: LD_INT 3
35972: PLUS
35973: PUSH
35974: LD_INT 5
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: LIST
35981: PUSH
35982: LD_VAR 0 1
35986: PUSH
35987: LD_INT 4
35989: PLUS
35990: PUSH
35991: LD_VAR 0 2
35995: PUSH
35996: LD_INT 4
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: PUSH
36004: LD_VAR 0 1
36008: PUSH
36009: LD_VAR 0 2
36013: PUSH
36014: LD_INT 3
36016: MINUS
36017: PUSH
36018: LD_INT 3
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: LIST
36025: PUSH
36026: LD_VAR 0 1
36030: PUSH
36031: LD_INT 4
36033: MINUS
36034: PUSH
36035: LD_VAR 0 2
36039: PUSH
36040: LD_INT 4
36042: MINUS
36043: PUSH
36044: LD_INT 2
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: ST_TO_ADDR
// end ; 5 :
36059: GO 36199
36061: LD_INT 5
36063: DOUBLE
36064: EQUAL
36065: IFTRUE 36069
36067: GO 36198
36069: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36070: LD_ADDR_VAR 0 5
36074: PUSH
36075: LD_VAR 0 1
36079: PUSH
36080: LD_INT 4
36082: MINUS
36083: PUSH
36084: LD_VAR 0 2
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: LIST
36096: PUSH
36097: LD_VAR 0 1
36101: PUSH
36102: LD_VAR 0 2
36106: PUSH
36107: LD_INT 4
36109: MINUS
36110: PUSH
36111: LD_INT 3
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: LIST
36118: PUSH
36119: LD_VAR 0 1
36123: PUSH
36124: LD_INT 4
36126: PLUS
36127: PUSH
36128: LD_VAR 0 2
36132: PUSH
36133: LD_INT 4
36135: PLUS
36136: PUSH
36137: LD_INT 5
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: LIST
36144: PUSH
36145: LD_VAR 0 1
36149: PUSH
36150: LD_INT 3
36152: PLUS
36153: PUSH
36154: LD_VAR 0 2
36158: PUSH
36159: LD_INT 4
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: LIST
36166: PUSH
36167: LD_VAR 0 1
36171: PUSH
36172: LD_VAR 0 2
36176: PUSH
36177: LD_INT 3
36179: PLUS
36180: PUSH
36181: LD_INT 0
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: LIST
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: ST_TO_ADDR
// end ; end ;
36196: GO 36199
36198: POP
// result := list ;
36199: LD_ADDR_VAR 0 4
36203: PUSH
36204: LD_VAR 0 5
36208: ST_TO_ADDR
// end ;
36209: LD_VAR 0 4
36213: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36214: LD_INT 0
36216: PPUSH
36217: PPUSH
36218: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36219: LD_VAR 0 1
36223: NOT
36224: PUSH
36225: LD_VAR 0 2
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 2
36235: PUSH
36236: LD_INT 3
36238: PUSH
36239: LD_INT 4
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: IN
36248: NOT
36249: OR
36250: IFFALSE 36254
// exit ;
36252: GO 36337
// tmp := [ ] ;
36254: LD_ADDR_VAR 0 5
36258: PUSH
36259: EMPTY
36260: ST_TO_ADDR
// for i in units do
36261: LD_ADDR_VAR 0 4
36265: PUSH
36266: LD_VAR 0 1
36270: PUSH
36271: FOR_IN
36272: IFFALSE 36306
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36274: LD_ADDR_VAR 0 5
36278: PUSH
36279: LD_VAR 0 5
36283: PPUSH
36284: LD_VAR 0 4
36288: PPUSH
36289: LD_VAR 0 2
36293: PPUSH
36294: CALL_OW 259
36298: PPUSH
36299: CALL 37697 0 2
36303: ST_TO_ADDR
36304: GO 36271
36306: POP
36307: POP
// if not tmp then
36308: LD_VAR 0 5
36312: NOT
36313: IFFALSE 36317
// exit ;
36315: GO 36337
// result := SortListByListDesc ( units , tmp ) ;
36317: LD_ADDR_VAR 0 3
36321: PUSH
36322: LD_VAR 0 1
36326: PPUSH
36327: LD_VAR 0 5
36331: PPUSH
36332: CALL_OW 77
36336: ST_TO_ADDR
// end ;
36337: LD_VAR 0 3
36341: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36342: LD_INT 0
36344: PPUSH
36345: PPUSH
36346: PPUSH
// result := false ;
36347: LD_ADDR_VAR 0 3
36351: PUSH
36352: LD_INT 0
36354: ST_TO_ADDR
// if not building then
36355: LD_VAR 0 2
36359: NOT
36360: IFFALSE 36364
// exit ;
36362: GO 36502
// x := GetX ( building ) ;
36364: LD_ADDR_VAR 0 4
36368: PUSH
36369: LD_VAR 0 2
36373: PPUSH
36374: CALL_OW 250
36378: ST_TO_ADDR
// y := GetY ( building ) ;
36379: LD_ADDR_VAR 0 5
36383: PUSH
36384: LD_VAR 0 2
36388: PPUSH
36389: CALL_OW 251
36393: ST_TO_ADDR
// if not x or not y then
36394: LD_VAR 0 4
36398: NOT
36399: PUSH
36400: LD_VAR 0 5
36404: NOT
36405: OR
36406: IFFALSE 36410
// exit ;
36408: GO 36502
// if GetTaskList ( unit ) then
36410: LD_VAR 0 1
36414: PPUSH
36415: CALL_OW 437
36419: IFFALSE 36502
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36421: LD_STRING e
36423: PUSH
36424: LD_VAR 0 1
36428: PPUSH
36429: CALL_OW 437
36433: PUSH
36434: LD_INT 1
36436: ARRAY
36437: PUSH
36438: LD_INT 1
36440: ARRAY
36441: EQUAL
36442: PUSH
36443: LD_VAR 0 4
36447: PUSH
36448: LD_VAR 0 1
36452: PPUSH
36453: CALL_OW 437
36457: PUSH
36458: LD_INT 1
36460: ARRAY
36461: PUSH
36462: LD_INT 2
36464: ARRAY
36465: EQUAL
36466: AND
36467: PUSH
36468: LD_VAR 0 5
36472: PUSH
36473: LD_VAR 0 1
36477: PPUSH
36478: CALL_OW 437
36482: PUSH
36483: LD_INT 1
36485: ARRAY
36486: PUSH
36487: LD_INT 3
36489: ARRAY
36490: EQUAL
36491: AND
36492: IFFALSE 36502
// result := true end ;
36494: LD_ADDR_VAR 0 3
36498: PUSH
36499: LD_INT 1
36501: ST_TO_ADDR
// end ;
36502: LD_VAR 0 3
36506: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36507: LD_INT 0
36509: PPUSH
// result := false ;
36510: LD_ADDR_VAR 0 4
36514: PUSH
36515: LD_INT 0
36517: ST_TO_ADDR
// if GetTaskList ( unit ) then
36518: LD_VAR 0 1
36522: PPUSH
36523: CALL_OW 437
36527: IFFALSE 36610
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36529: LD_STRING M
36531: PUSH
36532: LD_VAR 0 1
36536: PPUSH
36537: CALL_OW 437
36541: PUSH
36542: LD_INT 1
36544: ARRAY
36545: PUSH
36546: LD_INT 1
36548: ARRAY
36549: EQUAL
36550: PUSH
36551: LD_VAR 0 2
36555: PUSH
36556: LD_VAR 0 1
36560: PPUSH
36561: CALL_OW 437
36565: PUSH
36566: LD_INT 1
36568: ARRAY
36569: PUSH
36570: LD_INT 2
36572: ARRAY
36573: EQUAL
36574: AND
36575: PUSH
36576: LD_VAR 0 3
36580: PUSH
36581: LD_VAR 0 1
36585: PPUSH
36586: CALL_OW 437
36590: PUSH
36591: LD_INT 1
36593: ARRAY
36594: PUSH
36595: LD_INT 3
36597: ARRAY
36598: EQUAL
36599: AND
36600: IFFALSE 36610
// result := true ;
36602: LD_ADDR_VAR 0 4
36606: PUSH
36607: LD_INT 1
36609: ST_TO_ADDR
// end ; end ;
36610: LD_VAR 0 4
36614: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36615: LD_INT 0
36617: PPUSH
36618: PPUSH
36619: PPUSH
36620: PPUSH
// if not unit or not area then
36621: LD_VAR 0 1
36625: NOT
36626: PUSH
36627: LD_VAR 0 2
36631: NOT
36632: OR
36633: IFFALSE 36637
// exit ;
36635: GO 36800
// tmp := AreaToList ( area , i ) ;
36637: LD_ADDR_VAR 0 6
36641: PUSH
36642: LD_VAR 0 2
36646: PPUSH
36647: LD_VAR 0 5
36651: PPUSH
36652: CALL_OW 517
36656: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36657: LD_ADDR_VAR 0 5
36661: PUSH
36662: DOUBLE
36663: LD_INT 1
36665: DEC
36666: ST_TO_ADDR
36667: LD_VAR 0 6
36671: PUSH
36672: LD_INT 1
36674: ARRAY
36675: PUSH
36676: FOR_TO
36677: IFFALSE 36798
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36679: LD_ADDR_VAR 0 7
36683: PUSH
36684: LD_VAR 0 6
36688: PUSH
36689: LD_INT 1
36691: ARRAY
36692: PUSH
36693: LD_VAR 0 5
36697: ARRAY
36698: PUSH
36699: LD_VAR 0 6
36703: PUSH
36704: LD_INT 2
36706: ARRAY
36707: PUSH
36708: LD_VAR 0 5
36712: ARRAY
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
36718: LD_INT 92
36720: PUSH
36721: LD_VAR 0 7
36725: PUSH
36726: LD_INT 1
36728: ARRAY
36729: PUSH
36730: LD_VAR 0 7
36734: PUSH
36735: LD_INT 2
36737: ARRAY
36738: PUSH
36739: LD_INT 3
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: PPUSH
36748: CALL_OW 69
36752: PUSH
36753: LD_INT 0
36755: EQUAL
36756: IFFALSE 36796
// begin PlaceUnitArea ( unit , area , mode ) ;
36758: LD_VAR 0 1
36762: PPUSH
36763: LD_VAR 0 2
36767: PPUSH
36768: LD_VAR 0 3
36772: PPUSH
36773: CALL_OW 49
// result := IsPlaced ( unit ) ;
36777: LD_ADDR_VAR 0 4
36781: PUSH
36782: LD_VAR 0 1
36786: PPUSH
36787: CALL_OW 305
36791: ST_TO_ADDR
// exit ;
36792: POP
36793: POP
36794: GO 36800
// end ; end ;
36796: GO 36676
36798: POP
36799: POP
// end ;
36800: LD_VAR 0 4
36804: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36805: LD_INT 0
36807: PPUSH
36808: PPUSH
36809: PPUSH
// if not side or side > 8 then
36810: LD_VAR 0 1
36814: NOT
36815: PUSH
36816: LD_VAR 0 1
36820: PUSH
36821: LD_INT 8
36823: GREATER
36824: OR
36825: IFFALSE 36829
// exit ;
36827: GO 37016
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36829: LD_ADDR_VAR 0 4
36833: PUSH
36834: LD_INT 22
36836: PUSH
36837: LD_VAR 0 1
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 21
36848: PUSH
36849: LD_INT 3
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PPUSH
36860: CALL_OW 69
36864: ST_TO_ADDR
// if not tmp then
36865: LD_VAR 0 4
36869: NOT
36870: IFFALSE 36874
// exit ;
36872: GO 37016
// enable_addtolog := true ;
36874: LD_ADDR_OWVAR 81
36878: PUSH
36879: LD_INT 1
36881: ST_TO_ADDR
// AddToLog ( [ ) ;
36882: LD_STRING [
36884: PPUSH
36885: CALL_OW 561
// for i in tmp do
36889: LD_ADDR_VAR 0 3
36893: PUSH
36894: LD_VAR 0 4
36898: PUSH
36899: FOR_IN
36900: IFFALSE 37007
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36902: LD_STRING [
36904: PUSH
36905: LD_VAR 0 3
36909: PPUSH
36910: CALL_OW 266
36914: STR
36915: PUSH
36916: LD_STRING , 
36918: STR
36919: PUSH
36920: LD_VAR 0 3
36924: PPUSH
36925: CALL_OW 250
36929: STR
36930: PUSH
36931: LD_STRING , 
36933: STR
36934: PUSH
36935: LD_VAR 0 3
36939: PPUSH
36940: CALL_OW 251
36944: STR
36945: PUSH
36946: LD_STRING , 
36948: STR
36949: PUSH
36950: LD_VAR 0 3
36954: PPUSH
36955: CALL_OW 254
36959: STR
36960: PUSH
36961: LD_STRING , 
36963: STR
36964: PUSH
36965: LD_VAR 0 3
36969: PPUSH
36970: LD_INT 1
36972: PPUSH
36973: CALL_OW 268
36977: STR
36978: PUSH
36979: LD_STRING , 
36981: STR
36982: PUSH
36983: LD_VAR 0 3
36987: PPUSH
36988: LD_INT 2
36990: PPUSH
36991: CALL_OW 268
36995: STR
36996: PUSH
36997: LD_STRING ],
36999: STR
37000: PPUSH
37001: CALL_OW 561
// end ;
37005: GO 36899
37007: POP
37008: POP
// AddToLog ( ]; ) ;
37009: LD_STRING ];
37011: PPUSH
37012: CALL_OW 561
// end ;
37016: LD_VAR 0 2
37020: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37021: LD_INT 0
37023: PPUSH
37024: PPUSH
37025: PPUSH
37026: PPUSH
37027: PPUSH
// if not area or not rate or not max then
37028: LD_VAR 0 1
37032: NOT
37033: PUSH
37034: LD_VAR 0 2
37038: NOT
37039: OR
37040: PUSH
37041: LD_VAR 0 4
37045: NOT
37046: OR
37047: IFFALSE 37051
// exit ;
37049: GO 37240
// while 1 do
37051: LD_INT 1
37053: IFFALSE 37240
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37055: LD_ADDR_VAR 0 9
37059: PUSH
37060: LD_VAR 0 1
37064: PPUSH
37065: LD_INT 1
37067: PPUSH
37068: CALL_OW 287
37072: PUSH
37073: LD_INT 10
37075: MUL
37076: ST_TO_ADDR
// r := rate / 10 ;
37077: LD_ADDR_VAR 0 7
37081: PUSH
37082: LD_VAR 0 2
37086: PUSH
37087: LD_INT 10
37089: DIVREAL
37090: ST_TO_ADDR
// time := 1 1$00 ;
37091: LD_ADDR_VAR 0 8
37095: PUSH
37096: LD_INT 2100
37098: ST_TO_ADDR
// if amount < min then
37099: LD_VAR 0 9
37103: PUSH
37104: LD_VAR 0 3
37108: LESS
37109: IFFALSE 37127
// r := r * 2 else
37111: LD_ADDR_VAR 0 7
37115: PUSH
37116: LD_VAR 0 7
37120: PUSH
37121: LD_INT 2
37123: MUL
37124: ST_TO_ADDR
37125: GO 37153
// if amount > max then
37127: LD_VAR 0 9
37131: PUSH
37132: LD_VAR 0 4
37136: GREATER
37137: IFFALSE 37153
// r := r / 2 ;
37139: LD_ADDR_VAR 0 7
37143: PUSH
37144: LD_VAR 0 7
37148: PUSH
37149: LD_INT 2
37151: DIVREAL
37152: ST_TO_ADDR
// time := time / r ;
37153: LD_ADDR_VAR 0 8
37157: PUSH
37158: LD_VAR 0 8
37162: PUSH
37163: LD_VAR 0 7
37167: DIVREAL
37168: ST_TO_ADDR
// if time < 0 then
37169: LD_VAR 0 8
37173: PUSH
37174: LD_INT 0
37176: LESS
37177: IFFALSE 37194
// time := time * - 1 ;
37179: LD_ADDR_VAR 0 8
37183: PUSH
37184: LD_VAR 0 8
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: MUL
37193: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37194: LD_VAR 0 8
37198: PUSH
37199: LD_INT 35
37201: PPUSH
37202: LD_INT 875
37204: PPUSH
37205: CALL_OW 12
37209: PLUS
37210: PPUSH
37211: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37215: LD_INT 1
37217: PPUSH
37218: LD_INT 5
37220: PPUSH
37221: CALL_OW 12
37225: PPUSH
37226: LD_VAR 0 1
37230: PPUSH
37231: LD_INT 1
37233: PPUSH
37234: CALL_OW 55
// end ;
37238: GO 37051
// end ;
37240: LD_VAR 0 5
37244: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37245: LD_INT 0
37247: PPUSH
37248: PPUSH
37249: PPUSH
37250: PPUSH
37251: PPUSH
37252: PPUSH
37253: PPUSH
37254: PPUSH
// if not turrets or not factories then
37255: LD_VAR 0 1
37259: NOT
37260: PUSH
37261: LD_VAR 0 2
37265: NOT
37266: OR
37267: IFFALSE 37271
// exit ;
37269: GO 37578
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37271: LD_ADDR_VAR 0 10
37275: PUSH
37276: LD_INT 5
37278: PUSH
37279: LD_INT 6
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: LD_INT 4
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 3
37298: PUSH
37299: LD_INT 5
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 24
37313: PUSH
37314: LD_INT 25
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 23
37323: PUSH
37324: LD_INT 27
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 42
37337: PUSH
37338: LD_INT 43
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 44
37347: PUSH
37348: LD_INT 46
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 45
37357: PUSH
37358: LD_INT 47
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: LIST
37374: ST_TO_ADDR
// result := [ ] ;
37375: LD_ADDR_VAR 0 3
37379: PUSH
37380: EMPTY
37381: ST_TO_ADDR
// for i in turrets do
37382: LD_ADDR_VAR 0 4
37386: PUSH
37387: LD_VAR 0 1
37391: PUSH
37392: FOR_IN
37393: IFFALSE 37576
// begin nat := GetNation ( i ) ;
37395: LD_ADDR_VAR 0 7
37399: PUSH
37400: LD_VAR 0 4
37404: PPUSH
37405: CALL_OW 248
37409: ST_TO_ADDR
// weapon := 0 ;
37410: LD_ADDR_VAR 0 8
37414: PUSH
37415: LD_INT 0
37417: ST_TO_ADDR
// if not nat then
37418: LD_VAR 0 7
37422: NOT
37423: IFFALSE 37427
// continue ;
37425: GO 37392
// for j in list [ nat ] do
37427: LD_ADDR_VAR 0 5
37431: PUSH
37432: LD_VAR 0 10
37436: PUSH
37437: LD_VAR 0 7
37441: ARRAY
37442: PUSH
37443: FOR_IN
37444: IFFALSE 37485
// if GetBWeapon ( i ) = j [ 1 ] then
37446: LD_VAR 0 4
37450: PPUSH
37451: CALL_OW 269
37455: PUSH
37456: LD_VAR 0 5
37460: PUSH
37461: LD_INT 1
37463: ARRAY
37464: EQUAL
37465: IFFALSE 37483
// begin weapon := j [ 2 ] ;
37467: LD_ADDR_VAR 0 8
37471: PUSH
37472: LD_VAR 0 5
37476: PUSH
37477: LD_INT 2
37479: ARRAY
37480: ST_TO_ADDR
// break ;
37481: GO 37485
// end ;
37483: GO 37443
37485: POP
37486: POP
// if not weapon then
37487: LD_VAR 0 8
37491: NOT
37492: IFFALSE 37496
// continue ;
37494: GO 37392
// for k in factories do
37496: LD_ADDR_VAR 0 6
37500: PUSH
37501: LD_VAR 0 2
37505: PUSH
37506: FOR_IN
37507: IFFALSE 37572
// begin weapons := AvailableWeaponList ( k ) ;
37509: LD_ADDR_VAR 0 9
37513: PUSH
37514: LD_VAR 0 6
37518: PPUSH
37519: CALL_OW 478
37523: ST_TO_ADDR
// if not weapons then
37524: LD_VAR 0 9
37528: NOT
37529: IFFALSE 37533
// continue ;
37531: GO 37506
// if weapon in weapons then
37533: LD_VAR 0 8
37537: PUSH
37538: LD_VAR 0 9
37542: IN
37543: IFFALSE 37570
// begin result := [ i , weapon ] ;
37545: LD_ADDR_VAR 0 3
37549: PUSH
37550: LD_VAR 0 4
37554: PUSH
37555: LD_VAR 0 8
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: ST_TO_ADDR
// exit ;
37564: POP
37565: POP
37566: POP
37567: POP
37568: GO 37578
// end ; end ;
37570: GO 37506
37572: POP
37573: POP
// end ;
37574: GO 37392
37576: POP
37577: POP
// end ;
37578: LD_VAR 0 3
37582: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37583: LD_INT 0
37585: PPUSH
// if not side or side > 8 then
37586: LD_VAR 0 3
37590: NOT
37591: PUSH
37592: LD_VAR 0 3
37596: PUSH
37597: LD_INT 8
37599: GREATER
37600: OR
37601: IFFALSE 37605
// exit ;
37603: GO 37664
// if not range then
37605: LD_VAR 0 4
37609: NOT
37610: IFFALSE 37621
// range := - 12 ;
37612: LD_ADDR_VAR 0 4
37616: PUSH
37617: LD_INT 12
37619: NEG
37620: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37621: LD_VAR 0 1
37625: PPUSH
37626: LD_VAR 0 2
37630: PPUSH
37631: LD_VAR 0 3
37635: PPUSH
37636: LD_VAR 0 4
37640: PPUSH
37641: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37645: LD_VAR 0 1
37649: PPUSH
37650: LD_VAR 0 2
37654: PPUSH
37655: LD_VAR 0 3
37659: PPUSH
37660: CALL_OW 331
// end ;
37664: LD_VAR 0 5
37668: RET
// export function Video ( mode ) ; begin
37669: LD_INT 0
37671: PPUSH
// ingame_video = mode ;
37672: LD_ADDR_OWVAR 52
37676: PUSH
37677: LD_VAR 0 1
37681: ST_TO_ADDR
// interface_hidden = mode ;
37682: LD_ADDR_OWVAR 54
37686: PUSH
37687: LD_VAR 0 1
37691: ST_TO_ADDR
// end ;
37692: LD_VAR 0 2
37696: RET
// export function Join ( array , element ) ; begin
37697: LD_INT 0
37699: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37700: LD_ADDR_VAR 0 3
37704: PUSH
37705: LD_VAR 0 1
37709: PPUSH
37710: LD_VAR 0 1
37714: PUSH
37715: LD_INT 1
37717: PLUS
37718: PPUSH
37719: LD_VAR 0 2
37723: PPUSH
37724: CALL_OW 1
37728: ST_TO_ADDR
// end ;
37729: LD_VAR 0 3
37733: RET
// export function JoinUnion ( array , element ) ; begin
37734: LD_INT 0
37736: PPUSH
// result := array union element ;
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: LD_VAR 0 1
37746: PUSH
37747: LD_VAR 0 2
37751: UNION
37752: ST_TO_ADDR
// end ;
37753: LD_VAR 0 3
37757: RET
// export function GetBehemoths ( side ) ; begin
37758: LD_INT 0
37760: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
37761: LD_ADDR_VAR 0 2
37765: PUSH
37766: LD_INT 22
37768: PUSH
37769: LD_VAR 0 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 31
37780: PUSH
37781: LD_INT 25
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PPUSH
37792: CALL_OW 69
37796: ST_TO_ADDR
// end ;
37797: LD_VAR 0 2
37801: RET
// export function Shuffle ( array ) ; var i , index ; begin
37802: LD_INT 0
37804: PPUSH
37805: PPUSH
37806: PPUSH
// result := [ ] ;
37807: LD_ADDR_VAR 0 2
37811: PUSH
37812: EMPTY
37813: ST_TO_ADDR
// if not array then
37814: LD_VAR 0 1
37818: NOT
37819: IFFALSE 37823
// exit ;
37821: GO 37922
// Randomize ;
37823: CALL_OW 10
// for i = array downto 1 do
37827: LD_ADDR_VAR 0 3
37831: PUSH
37832: DOUBLE
37833: LD_VAR 0 1
37837: INC
37838: ST_TO_ADDR
37839: LD_INT 1
37841: PUSH
37842: FOR_DOWNTO
37843: IFFALSE 37920
// begin index := rand ( 1 , array ) ;
37845: LD_ADDR_VAR 0 4
37849: PUSH
37850: LD_INT 1
37852: PPUSH
37853: LD_VAR 0 1
37857: PPUSH
37858: CALL_OW 12
37862: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37863: LD_ADDR_VAR 0 2
37867: PUSH
37868: LD_VAR 0 2
37872: PPUSH
37873: LD_VAR 0 2
37877: PUSH
37878: LD_INT 1
37880: PLUS
37881: PPUSH
37882: LD_VAR 0 1
37886: PUSH
37887: LD_VAR 0 4
37891: ARRAY
37892: PPUSH
37893: CALL_OW 2
37897: ST_TO_ADDR
// array := Delete ( array , index ) ;
37898: LD_ADDR_VAR 0 1
37902: PUSH
37903: LD_VAR 0 1
37907: PPUSH
37908: LD_VAR 0 4
37912: PPUSH
37913: CALL_OW 3
37917: ST_TO_ADDR
// end ;
37918: GO 37842
37920: POP
37921: POP
// end ;
37922: LD_VAR 0 2
37926: RET
// export function GetBaseMaterials ( base ) ; begin
37927: LD_INT 0
37929: PPUSH
// result := [ 0 , 0 , 0 ] ;
37930: LD_ADDR_VAR 0 2
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: LIST
37948: ST_TO_ADDR
// if not base then
37949: LD_VAR 0 1
37953: NOT
37954: IFFALSE 37958
// exit ;
37956: GO 38007
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37958: LD_ADDR_VAR 0 2
37962: PUSH
37963: LD_VAR 0 1
37967: PPUSH
37968: LD_INT 1
37970: PPUSH
37971: CALL_OW 275
37975: PUSH
37976: LD_VAR 0 1
37980: PPUSH
37981: LD_INT 2
37983: PPUSH
37984: CALL_OW 275
37988: PUSH
37989: LD_VAR 0 1
37993: PPUSH
37994: LD_INT 3
37996: PPUSH
37997: CALL_OW 275
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: LIST
38006: ST_TO_ADDR
// end ;
38007: LD_VAR 0 2
38011: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38012: LD_INT 0
38014: PPUSH
38015: PPUSH
// result := array ;
38016: LD_ADDR_VAR 0 3
38020: PUSH
38021: LD_VAR 0 1
38025: ST_TO_ADDR
// if size >= result then
38026: LD_VAR 0 2
38030: PUSH
38031: LD_VAR 0 3
38035: GREATEREQUAL
38036: IFFALSE 38040
// exit ;
38038: GO 38090
// if size then
38040: LD_VAR 0 2
38044: IFFALSE 38090
// for i := array downto size do
38046: LD_ADDR_VAR 0 4
38050: PUSH
38051: DOUBLE
38052: LD_VAR 0 1
38056: INC
38057: ST_TO_ADDR
38058: LD_VAR 0 2
38062: PUSH
38063: FOR_DOWNTO
38064: IFFALSE 38088
// result := Delete ( result , result ) ;
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: LD_VAR 0 3
38075: PPUSH
38076: LD_VAR 0 3
38080: PPUSH
38081: CALL_OW 3
38085: ST_TO_ADDR
38086: GO 38063
38088: POP
38089: POP
// end ;
38090: LD_VAR 0 3
38094: RET
// export function ComExit ( unit ) ; var tmp ; begin
38095: LD_INT 0
38097: PPUSH
38098: PPUSH
// if not IsInUnit ( unit ) then
38099: LD_VAR 0 1
38103: PPUSH
38104: CALL_OW 310
38108: NOT
38109: IFFALSE 38113
// exit ;
38111: GO 38173
// tmp := IsInUnit ( unit ) ;
38113: LD_ADDR_VAR 0 3
38117: PUSH
38118: LD_VAR 0 1
38122: PPUSH
38123: CALL_OW 310
38127: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38128: LD_VAR 0 3
38132: PPUSH
38133: CALL_OW 247
38137: PUSH
38138: LD_INT 2
38140: EQUAL
38141: IFFALSE 38154
// ComExitVehicle ( unit ) else
38143: LD_VAR 0 1
38147: PPUSH
38148: CALL_OW 121
38152: GO 38163
// ComExitBuilding ( unit ) ;
38154: LD_VAR 0 1
38158: PPUSH
38159: CALL_OW 122
// result := tmp ;
38163: LD_ADDR_VAR 0 2
38167: PUSH
38168: LD_VAR 0 3
38172: ST_TO_ADDR
// end ;
38173: LD_VAR 0 2
38177: RET
// export function ComExitAll ( units ) ; var i ; begin
38178: LD_INT 0
38180: PPUSH
38181: PPUSH
// if not units then
38182: LD_VAR 0 1
38186: NOT
38187: IFFALSE 38191
// exit ;
38189: GO 38217
// for i in units do
38191: LD_ADDR_VAR 0 3
38195: PUSH
38196: LD_VAR 0 1
38200: PUSH
38201: FOR_IN
38202: IFFALSE 38215
// ComExit ( i ) ;
38204: LD_VAR 0 3
38208: PPUSH
38209: CALL 38095 0 1
38213: GO 38201
38215: POP
38216: POP
// end ;
38217: LD_VAR 0 2
38221: RET
// export function ResetHc ; begin
38222: LD_INT 0
38224: PPUSH
// InitHc ;
38225: CALL_OW 19
// hc_importance := 0 ;
38229: LD_ADDR_OWVAR 32
38233: PUSH
38234: LD_INT 0
38236: ST_TO_ADDR
// end ;
38237: LD_VAR 0 1
38241: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38242: LD_INT 0
38244: PPUSH
38245: PPUSH
38246: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38247: LD_ADDR_VAR 0 6
38251: PUSH
38252: LD_VAR 0 1
38256: PUSH
38257: LD_VAR 0 3
38261: PLUS
38262: PUSH
38263: LD_INT 2
38265: DIV
38266: ST_TO_ADDR
// if _x < 0 then
38267: LD_VAR 0 6
38271: PUSH
38272: LD_INT 0
38274: LESS
38275: IFFALSE 38292
// _x := _x * - 1 ;
38277: LD_ADDR_VAR 0 6
38281: PUSH
38282: LD_VAR 0 6
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: MUL
38291: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38292: LD_ADDR_VAR 0 7
38296: PUSH
38297: LD_VAR 0 2
38301: PUSH
38302: LD_VAR 0 4
38306: PLUS
38307: PUSH
38308: LD_INT 2
38310: DIV
38311: ST_TO_ADDR
// if _y < 0 then
38312: LD_VAR 0 7
38316: PUSH
38317: LD_INT 0
38319: LESS
38320: IFFALSE 38337
// _y := _y * - 1 ;
38322: LD_ADDR_VAR 0 7
38326: PUSH
38327: LD_VAR 0 7
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: MUL
38336: ST_TO_ADDR
// result := [ _x , _y ] ;
38337: LD_ADDR_VAR 0 5
38341: PUSH
38342: LD_VAR 0 6
38346: PUSH
38347: LD_VAR 0 7
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: ST_TO_ADDR
// end ;
38356: LD_VAR 0 5
38360: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38361: LD_INT 0
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
// task := GetTaskList ( unit ) ;
38367: LD_ADDR_VAR 0 7
38371: PUSH
38372: LD_VAR 0 1
38376: PPUSH
38377: CALL_OW 437
38381: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38382: LD_VAR 0 7
38386: NOT
38387: PUSH
38388: LD_VAR 0 1
38392: PPUSH
38393: LD_VAR 0 2
38397: PPUSH
38398: CALL_OW 308
38402: NOT
38403: AND
38404: IFFALSE 38408
// exit ;
38406: GO 38526
// if IsInArea ( unit , area ) then
38408: LD_VAR 0 1
38412: PPUSH
38413: LD_VAR 0 2
38417: PPUSH
38418: CALL_OW 308
38422: IFFALSE 38440
// begin ComMoveToArea ( unit , goAway ) ;
38424: LD_VAR 0 1
38428: PPUSH
38429: LD_VAR 0 3
38433: PPUSH
38434: CALL_OW 113
// exit ;
38438: GO 38526
// end ; if task [ 1 ] [ 1 ] <> M then
38440: LD_VAR 0 7
38444: PUSH
38445: LD_INT 1
38447: ARRAY
38448: PUSH
38449: LD_INT 1
38451: ARRAY
38452: PUSH
38453: LD_STRING M
38455: NONEQUAL
38456: IFFALSE 38460
// exit ;
38458: GO 38526
// x := task [ 1 ] [ 2 ] ;
38460: LD_ADDR_VAR 0 5
38464: PUSH
38465: LD_VAR 0 7
38469: PUSH
38470: LD_INT 1
38472: ARRAY
38473: PUSH
38474: LD_INT 2
38476: ARRAY
38477: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38478: LD_ADDR_VAR 0 6
38482: PUSH
38483: LD_VAR 0 7
38487: PUSH
38488: LD_INT 1
38490: ARRAY
38491: PUSH
38492: LD_INT 3
38494: ARRAY
38495: ST_TO_ADDR
// if InArea ( x , y , area ) then
38496: LD_VAR 0 5
38500: PPUSH
38501: LD_VAR 0 6
38505: PPUSH
38506: LD_VAR 0 2
38510: PPUSH
38511: CALL_OW 309
38515: IFFALSE 38526
// ComStop ( unit ) ;
38517: LD_VAR 0 1
38521: PPUSH
38522: CALL_OW 141
// end ;
38526: LD_VAR 0 4
38530: RET
// export function Abs ( value ) ; begin
38531: LD_INT 0
38533: PPUSH
// result := value ;
38534: LD_ADDR_VAR 0 2
38538: PUSH
38539: LD_VAR 0 1
38543: ST_TO_ADDR
// if value < 0 then
38544: LD_VAR 0 1
38548: PUSH
38549: LD_INT 0
38551: LESS
38552: IFFALSE 38569
// result := value * - 1 ;
38554: LD_ADDR_VAR 0 2
38558: PUSH
38559: LD_VAR 0 1
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: MUL
38568: ST_TO_ADDR
// end ;
38569: LD_VAR 0 2
38573: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38574: LD_INT 0
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
38581: PPUSH
38582: PPUSH
38583: PPUSH
// if not unit or not building then
38584: LD_VAR 0 1
38588: NOT
38589: PUSH
38590: LD_VAR 0 2
38594: NOT
38595: OR
38596: IFFALSE 38600
// exit ;
38598: GO 38826
// x := GetX ( building ) ;
38600: LD_ADDR_VAR 0 4
38604: PUSH
38605: LD_VAR 0 2
38609: PPUSH
38610: CALL_OW 250
38614: ST_TO_ADDR
// y := GetY ( building ) ;
38615: LD_ADDR_VAR 0 6
38619: PUSH
38620: LD_VAR 0 2
38624: PPUSH
38625: CALL_OW 251
38629: ST_TO_ADDR
// d := GetDir ( building ) ;
38630: LD_ADDR_VAR 0 8
38634: PUSH
38635: LD_VAR 0 2
38639: PPUSH
38640: CALL_OW 254
38644: ST_TO_ADDR
// r := 4 ;
38645: LD_ADDR_VAR 0 9
38649: PUSH
38650: LD_INT 4
38652: ST_TO_ADDR
// for i := 1 to 5 do
38653: LD_ADDR_VAR 0 10
38657: PUSH
38658: DOUBLE
38659: LD_INT 1
38661: DEC
38662: ST_TO_ADDR
38663: LD_INT 5
38665: PUSH
38666: FOR_TO
38667: IFFALSE 38824
// begin _x := ShiftX ( x , d , r + i ) ;
38669: LD_ADDR_VAR 0 5
38673: PUSH
38674: LD_VAR 0 4
38678: PPUSH
38679: LD_VAR 0 8
38683: PPUSH
38684: LD_VAR 0 9
38688: PUSH
38689: LD_VAR 0 10
38693: PLUS
38694: PPUSH
38695: CALL_OW 272
38699: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38700: LD_ADDR_VAR 0 7
38704: PUSH
38705: LD_VAR 0 6
38709: PPUSH
38710: LD_VAR 0 8
38714: PPUSH
38715: LD_VAR 0 9
38719: PUSH
38720: LD_VAR 0 10
38724: PLUS
38725: PPUSH
38726: CALL_OW 273
38730: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38731: LD_VAR 0 5
38735: PPUSH
38736: LD_VAR 0 7
38740: PPUSH
38741: CALL_OW 488
38745: PUSH
38746: LD_VAR 0 5
38750: PPUSH
38751: LD_VAR 0 7
38755: PPUSH
38756: CALL_OW 428
38760: PPUSH
38761: CALL_OW 247
38765: PUSH
38766: LD_INT 3
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: IN
38776: NOT
38777: AND
38778: IFFALSE 38822
// begin ComMoveXY ( unit , _x , _y ) ;
38780: LD_VAR 0 1
38784: PPUSH
38785: LD_VAR 0 5
38789: PPUSH
38790: LD_VAR 0 7
38794: PPUSH
38795: CALL_OW 111
// result := [ _x , _y ] ;
38799: LD_ADDR_VAR 0 3
38803: PUSH
38804: LD_VAR 0 5
38808: PUSH
38809: LD_VAR 0 7
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: ST_TO_ADDR
// exit ;
38818: POP
38819: POP
38820: GO 38826
// end ; end ;
38822: GO 38666
38824: POP
38825: POP
// end ;
38826: LD_VAR 0 3
38830: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38831: LD_INT 0
38833: PPUSH
38834: PPUSH
38835: PPUSH
// result := 0 ;
38836: LD_ADDR_VAR 0 3
38840: PUSH
38841: LD_INT 0
38843: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38844: LD_VAR 0 1
38848: PUSH
38849: LD_INT 0
38851: LESS
38852: PUSH
38853: LD_VAR 0 1
38857: PUSH
38858: LD_INT 8
38860: GREATER
38861: OR
38862: PUSH
38863: LD_VAR 0 2
38867: PUSH
38868: LD_INT 0
38870: LESS
38871: OR
38872: PUSH
38873: LD_VAR 0 2
38877: PUSH
38878: LD_INT 8
38880: GREATER
38881: OR
38882: IFFALSE 38886
// exit ;
38884: GO 38961
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38886: LD_ADDR_VAR 0 4
38890: PUSH
38891: LD_INT 22
38893: PUSH
38894: LD_VAR 0 2
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PPUSH
38903: CALL_OW 69
38907: PUSH
38908: FOR_IN
38909: IFFALSE 38959
// begin un := UnitShoot ( i ) ;
38911: LD_ADDR_VAR 0 5
38915: PUSH
38916: LD_VAR 0 4
38920: PPUSH
38921: CALL_OW 504
38925: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38926: LD_VAR 0 5
38930: PPUSH
38931: CALL_OW 255
38935: PUSH
38936: LD_VAR 0 1
38940: EQUAL
38941: IFFALSE 38957
// begin result := un ;
38943: LD_ADDR_VAR 0 3
38947: PUSH
38948: LD_VAR 0 5
38952: ST_TO_ADDR
// exit ;
38953: POP
38954: POP
38955: GO 38961
// end ; end ;
38957: GO 38908
38959: POP
38960: POP
// end ;
38961: LD_VAR 0 3
38965: RET
// export function GetCargoBay ( units ) ; begin
38966: LD_INT 0
38968: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
38969: LD_ADDR_VAR 0 2
38973: PUSH
38974: LD_VAR 0 1
38978: PPUSH
38979: LD_INT 2
38981: PUSH
38982: LD_INT 34
38984: PUSH
38985: LD_INT 12
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 34
38994: PUSH
38995: LD_INT 51
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 34
39004: PUSH
39005: LD_INT 32
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 34
39014: PUSH
39015: LD_INT 89
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: PPUSH
39029: CALL_OW 72
39033: ST_TO_ADDR
// end ;
39034: LD_VAR 0 2
39038: RET
// export function Negate ( value ) ; begin
39039: LD_INT 0
39041: PPUSH
// result := not value ;
39042: LD_ADDR_VAR 0 2
39046: PUSH
39047: LD_VAR 0 1
39051: NOT
39052: ST_TO_ADDR
// end ;
39053: LD_VAR 0 2
39057: RET
// export function Inc ( value ) ; begin
39058: LD_INT 0
39060: PPUSH
// result := value + 1 ;
39061: LD_ADDR_VAR 0 2
39065: PUSH
39066: LD_VAR 0 1
39070: PUSH
39071: LD_INT 1
39073: PLUS
39074: ST_TO_ADDR
// end ;
39075: LD_VAR 0 2
39079: RET
// export function Dec ( value ) ; begin
39080: LD_INT 0
39082: PPUSH
// result := value - 1 ;
39083: LD_ADDR_VAR 0 2
39087: PUSH
39088: LD_VAR 0 1
39092: PUSH
39093: LD_INT 1
39095: MINUS
39096: ST_TO_ADDR
// end ;
39097: LD_VAR 0 2
39101: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39102: LD_INT 0
39104: PPUSH
39105: PPUSH
39106: PPUSH
39107: PPUSH
39108: PPUSH
39109: PPUSH
39110: PPUSH
39111: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39112: LD_VAR 0 1
39116: PPUSH
39117: LD_VAR 0 2
39121: PPUSH
39122: CALL_OW 488
39126: NOT
39127: PUSH
39128: LD_VAR 0 3
39132: PPUSH
39133: LD_VAR 0 4
39137: PPUSH
39138: CALL_OW 488
39142: NOT
39143: OR
39144: IFFALSE 39157
// begin result := - 1 ;
39146: LD_ADDR_VAR 0 5
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: ST_TO_ADDR
// exit ;
39155: GO 39392
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39157: LD_ADDR_VAR 0 12
39161: PUSH
39162: LD_VAR 0 1
39166: PPUSH
39167: LD_VAR 0 2
39171: PPUSH
39172: LD_VAR 0 3
39176: PPUSH
39177: LD_VAR 0 4
39181: PPUSH
39182: CALL 38242 0 4
39186: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39187: LD_ADDR_VAR 0 11
39191: PUSH
39192: LD_VAR 0 1
39196: PPUSH
39197: LD_VAR 0 2
39201: PPUSH
39202: LD_VAR 0 12
39206: PUSH
39207: LD_INT 1
39209: ARRAY
39210: PPUSH
39211: LD_VAR 0 12
39215: PUSH
39216: LD_INT 2
39218: ARRAY
39219: PPUSH
39220: CALL_OW 298
39224: ST_TO_ADDR
// distance := 9999 ;
39225: LD_ADDR_VAR 0 10
39229: PUSH
39230: LD_INT 9999
39232: ST_TO_ADDR
// for i := 0 to 5 do
39233: LD_ADDR_VAR 0 6
39237: PUSH
39238: DOUBLE
39239: LD_INT 0
39241: DEC
39242: ST_TO_ADDR
39243: LD_INT 5
39245: PUSH
39246: FOR_TO
39247: IFFALSE 39390
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39249: LD_ADDR_VAR 0 7
39253: PUSH
39254: LD_VAR 0 1
39258: PPUSH
39259: LD_VAR 0 6
39263: PPUSH
39264: LD_VAR 0 11
39268: PPUSH
39269: CALL_OW 272
39273: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39274: LD_ADDR_VAR 0 8
39278: PUSH
39279: LD_VAR 0 2
39283: PPUSH
39284: LD_VAR 0 6
39288: PPUSH
39289: LD_VAR 0 11
39293: PPUSH
39294: CALL_OW 273
39298: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39299: LD_VAR 0 7
39303: PPUSH
39304: LD_VAR 0 8
39308: PPUSH
39309: CALL_OW 488
39313: NOT
39314: IFFALSE 39318
// continue ;
39316: GO 39246
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39318: LD_ADDR_VAR 0 9
39322: PUSH
39323: LD_VAR 0 12
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: PPUSH
39332: LD_VAR 0 12
39336: PUSH
39337: LD_INT 2
39339: ARRAY
39340: PPUSH
39341: LD_VAR 0 7
39345: PPUSH
39346: LD_VAR 0 8
39350: PPUSH
39351: CALL_OW 298
39355: ST_TO_ADDR
// if tmp < distance then
39356: LD_VAR 0 9
39360: PUSH
39361: LD_VAR 0 10
39365: LESS
39366: IFFALSE 39388
// begin result := i ;
39368: LD_ADDR_VAR 0 5
39372: PUSH
39373: LD_VAR 0 6
39377: ST_TO_ADDR
// distance := tmp ;
39378: LD_ADDR_VAR 0 10
39382: PUSH
39383: LD_VAR 0 9
39387: ST_TO_ADDR
// end ; end ;
39388: GO 39246
39390: POP
39391: POP
// end ;
39392: LD_VAR 0 5
39396: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39397: LD_INT 0
39399: PPUSH
39400: PPUSH
// if not driver or not IsInUnit ( driver ) then
39401: LD_VAR 0 1
39405: NOT
39406: PUSH
39407: LD_VAR 0 1
39411: PPUSH
39412: CALL_OW 310
39416: NOT
39417: OR
39418: IFFALSE 39422
// exit ;
39420: GO 39512
// vehicle := IsInUnit ( driver ) ;
39422: LD_ADDR_VAR 0 3
39426: PUSH
39427: LD_VAR 0 1
39431: PPUSH
39432: CALL_OW 310
39436: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39437: LD_VAR 0 1
39441: PPUSH
39442: LD_STRING \
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: PUSH
39472: LD_STRING E
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_VAR 0 3
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PPUSH
39508: CALL_OW 446
// end ;
39512: LD_VAR 0 2
39516: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39517: LD_INT 0
39519: PPUSH
39520: PPUSH
// if not driver or not IsInUnit ( driver ) then
39521: LD_VAR 0 1
39525: NOT
39526: PUSH
39527: LD_VAR 0 1
39531: PPUSH
39532: CALL_OW 310
39536: NOT
39537: OR
39538: IFFALSE 39542
// exit ;
39540: GO 39632
// vehicle := IsInUnit ( driver ) ;
39542: LD_ADDR_VAR 0 3
39546: PUSH
39547: LD_VAR 0 1
39551: PPUSH
39552: CALL_OW 310
39556: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39557: LD_VAR 0 1
39561: PPUSH
39562: LD_STRING \
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: PUSH
39592: LD_STRING E
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: LD_VAR 0 3
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PPUSH
39628: CALL_OW 447
// end ;
39632: LD_VAR 0 2
39636: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39637: LD_INT 0
39639: PPUSH
39640: PPUSH
39641: PPUSH
// tmp := [ ] ;
39642: LD_ADDR_VAR 0 5
39646: PUSH
39647: EMPTY
39648: ST_TO_ADDR
// for i in units do
39649: LD_ADDR_VAR 0 4
39653: PUSH
39654: LD_VAR 0 1
39658: PUSH
39659: FOR_IN
39660: IFFALSE 39698
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39662: LD_ADDR_VAR 0 5
39666: PUSH
39667: LD_VAR 0 5
39671: PPUSH
39672: LD_VAR 0 5
39676: PUSH
39677: LD_INT 1
39679: PLUS
39680: PPUSH
39681: LD_VAR 0 4
39685: PPUSH
39686: CALL_OW 256
39690: PPUSH
39691: CALL_OW 2
39695: ST_TO_ADDR
39696: GO 39659
39698: POP
39699: POP
// if not tmp then
39700: LD_VAR 0 5
39704: NOT
39705: IFFALSE 39709
// exit ;
39707: GO 39757
// if asc then
39709: LD_VAR 0 2
39713: IFFALSE 39737
// result := SortListByListAsc ( units , tmp ) else
39715: LD_ADDR_VAR 0 3
39719: PUSH
39720: LD_VAR 0 1
39724: PPUSH
39725: LD_VAR 0 5
39729: PPUSH
39730: CALL_OW 76
39734: ST_TO_ADDR
39735: GO 39757
// result := SortListByListDesc ( units , tmp ) ;
39737: LD_ADDR_VAR 0 3
39741: PUSH
39742: LD_VAR 0 1
39746: PPUSH
39747: LD_VAR 0 5
39751: PPUSH
39752: CALL_OW 77
39756: ST_TO_ADDR
// end ;
39757: LD_VAR 0 3
39761: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39762: LD_INT 0
39764: PPUSH
39765: PPUSH
// task := GetTaskList ( mech ) ;
39766: LD_ADDR_VAR 0 4
39770: PUSH
39771: LD_VAR 0 1
39775: PPUSH
39776: CALL_OW 437
39780: ST_TO_ADDR
// if not task then
39781: LD_VAR 0 4
39785: NOT
39786: IFFALSE 39790
// exit ;
39788: GO 39832
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39790: LD_ADDR_VAR 0 3
39794: PUSH
39795: LD_VAR 0 4
39799: PUSH
39800: LD_INT 1
39802: ARRAY
39803: PUSH
39804: LD_INT 1
39806: ARRAY
39807: PUSH
39808: LD_STRING r
39810: EQUAL
39811: PUSH
39812: LD_VAR 0 4
39816: PUSH
39817: LD_INT 1
39819: ARRAY
39820: PUSH
39821: LD_INT 4
39823: ARRAY
39824: PUSH
39825: LD_VAR 0 2
39829: EQUAL
39830: AND
39831: ST_TO_ADDR
// end ;
39832: LD_VAR 0 3
39836: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39837: LD_INT 0
39839: PPUSH
// SetDir ( unit , d ) ;
39840: LD_VAR 0 1
39844: PPUSH
39845: LD_VAR 0 4
39849: PPUSH
39850: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39854: LD_VAR 0 1
39858: PPUSH
39859: LD_VAR 0 2
39863: PPUSH
39864: LD_VAR 0 3
39868: PPUSH
39869: LD_VAR 0 5
39873: PPUSH
39874: CALL_OW 48
// end ;
39878: LD_VAR 0 6
39882: RET
// export function ToNaturalNumber ( number ) ; begin
39883: LD_INT 0
39885: PPUSH
// result := number div 1 ;
39886: LD_ADDR_VAR 0 2
39890: PUSH
39891: LD_VAR 0 1
39895: PUSH
39896: LD_INT 1
39898: DIV
39899: ST_TO_ADDR
// if number < 0 then
39900: LD_VAR 0 1
39904: PUSH
39905: LD_INT 0
39907: LESS
39908: IFFALSE 39918
// result := 0 ;
39910: LD_ADDR_VAR 0 2
39914: PUSH
39915: LD_INT 0
39917: ST_TO_ADDR
// end ;
39918: LD_VAR 0 2
39922: RET
// export function SortByClass ( units , class ) ; var un ; begin
39923: LD_INT 0
39925: PPUSH
39926: PPUSH
// if not units or not class then
39927: LD_VAR 0 1
39931: NOT
39932: PUSH
39933: LD_VAR 0 2
39937: NOT
39938: OR
39939: IFFALSE 39943
// exit ;
39941: GO 40038
// result := [ ] ;
39943: LD_ADDR_VAR 0 3
39947: PUSH
39948: EMPTY
39949: ST_TO_ADDR
// for un in units do
39950: LD_ADDR_VAR 0 4
39954: PUSH
39955: LD_VAR 0 1
39959: PUSH
39960: FOR_IN
39961: IFFALSE 40036
// if GetClass ( un ) = class then
39963: LD_VAR 0 4
39967: PPUSH
39968: CALL_OW 257
39972: PUSH
39973: LD_VAR 0 2
39977: EQUAL
39978: IFFALSE 40005
// result := Insert ( result , 1 , un ) else
39980: LD_ADDR_VAR 0 3
39984: PUSH
39985: LD_VAR 0 3
39989: PPUSH
39990: LD_INT 1
39992: PPUSH
39993: LD_VAR 0 4
39997: PPUSH
39998: CALL_OW 2
40002: ST_TO_ADDR
40003: GO 40034
// result := Replace ( result , result + 1 , un ) ;
40005: LD_ADDR_VAR 0 3
40009: PUSH
40010: LD_VAR 0 3
40014: PPUSH
40015: LD_VAR 0 3
40019: PUSH
40020: LD_INT 1
40022: PLUS
40023: PPUSH
40024: LD_VAR 0 4
40028: PPUSH
40029: CALL_OW 1
40033: ST_TO_ADDR
40034: GO 39960
40036: POP
40037: POP
// end ;
40038: LD_VAR 0 3
40042: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40043: LD_INT 0
40045: PPUSH
40046: PPUSH
40047: PPUSH
40048: PPUSH
40049: PPUSH
40050: PPUSH
40051: PPUSH
// result := [ ] ;
40052: LD_ADDR_VAR 0 4
40056: PUSH
40057: EMPTY
40058: ST_TO_ADDR
// if x - r < 0 then
40059: LD_VAR 0 1
40063: PUSH
40064: LD_VAR 0 3
40068: MINUS
40069: PUSH
40070: LD_INT 0
40072: LESS
40073: IFFALSE 40085
// min_x := 0 else
40075: LD_ADDR_VAR 0 8
40079: PUSH
40080: LD_INT 0
40082: ST_TO_ADDR
40083: GO 40101
// min_x := x - r ;
40085: LD_ADDR_VAR 0 8
40089: PUSH
40090: LD_VAR 0 1
40094: PUSH
40095: LD_VAR 0 3
40099: MINUS
40100: ST_TO_ADDR
// if y - r < 0 then
40101: LD_VAR 0 2
40105: PUSH
40106: LD_VAR 0 3
40110: MINUS
40111: PUSH
40112: LD_INT 0
40114: LESS
40115: IFFALSE 40127
// min_y := 0 else
40117: LD_ADDR_VAR 0 7
40121: PUSH
40122: LD_INT 0
40124: ST_TO_ADDR
40125: GO 40143
// min_y := y - r ;
40127: LD_ADDR_VAR 0 7
40131: PUSH
40132: LD_VAR 0 2
40136: PUSH
40137: LD_VAR 0 3
40141: MINUS
40142: ST_TO_ADDR
// max_x := x + r ;
40143: LD_ADDR_VAR 0 9
40147: PUSH
40148: LD_VAR 0 1
40152: PUSH
40153: LD_VAR 0 3
40157: PLUS
40158: ST_TO_ADDR
// max_y := y + r ;
40159: LD_ADDR_VAR 0 10
40163: PUSH
40164: LD_VAR 0 2
40168: PUSH
40169: LD_VAR 0 3
40173: PLUS
40174: ST_TO_ADDR
// for _x = min_x to max_x do
40175: LD_ADDR_VAR 0 5
40179: PUSH
40180: DOUBLE
40181: LD_VAR 0 8
40185: DEC
40186: ST_TO_ADDR
40187: LD_VAR 0 9
40191: PUSH
40192: FOR_TO
40193: IFFALSE 40294
// for _y = min_y to max_y do
40195: LD_ADDR_VAR 0 6
40199: PUSH
40200: DOUBLE
40201: LD_VAR 0 7
40205: DEC
40206: ST_TO_ADDR
40207: LD_VAR 0 10
40211: PUSH
40212: FOR_TO
40213: IFFALSE 40290
// begin if not ValidHex ( _x , _y ) then
40215: LD_VAR 0 5
40219: PPUSH
40220: LD_VAR 0 6
40224: PPUSH
40225: CALL_OW 488
40229: NOT
40230: IFFALSE 40234
// continue ;
40232: GO 40212
// if GetResourceTypeXY ( _x , _y ) then
40234: LD_VAR 0 5
40238: PPUSH
40239: LD_VAR 0 6
40243: PPUSH
40244: CALL_OW 283
40248: IFFALSE 40288
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40250: LD_ADDR_VAR 0 4
40254: PUSH
40255: LD_VAR 0 4
40259: PPUSH
40260: LD_VAR 0 4
40264: PUSH
40265: LD_INT 1
40267: PLUS
40268: PPUSH
40269: LD_VAR 0 5
40273: PUSH
40274: LD_VAR 0 6
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PPUSH
40283: CALL_OW 1
40287: ST_TO_ADDR
// end ;
40288: GO 40212
40290: POP
40291: POP
40292: GO 40192
40294: POP
40295: POP
// end ;
40296: LD_VAR 0 4
40300: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40301: LD_INT 0
40303: PPUSH
40304: PPUSH
40305: PPUSH
40306: PPUSH
40307: PPUSH
40308: PPUSH
40309: PPUSH
40310: PPUSH
// if not units then
40311: LD_VAR 0 1
40315: NOT
40316: IFFALSE 40320
// exit ;
40318: GO 40844
// result := UnitFilter ( units , [ f_ok ] ) ;
40320: LD_ADDR_VAR 0 3
40324: PUSH
40325: LD_VAR 0 1
40329: PPUSH
40330: LD_INT 50
40332: PUSH
40333: EMPTY
40334: LIST
40335: PPUSH
40336: CALL_OW 72
40340: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40341: LD_ADDR_VAR 0 8
40345: PUSH
40346: LD_VAR 0 1
40350: PUSH
40351: LD_INT 1
40353: ARRAY
40354: PPUSH
40355: CALL_OW 255
40359: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40360: LD_ADDR_VAR 0 10
40364: PUSH
40365: LD_INT 29
40367: PUSH
40368: LD_INT 91
40370: PUSH
40371: LD_INT 49
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: LIST
40378: ST_TO_ADDR
// if not result then
40379: LD_VAR 0 3
40383: NOT
40384: IFFALSE 40388
// exit ;
40386: GO 40844
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40388: LD_ADDR_VAR 0 5
40392: PUSH
40393: LD_INT 81
40395: PUSH
40396: LD_VAR 0 8
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PPUSH
40405: CALL_OW 69
40409: ST_TO_ADDR
// for i in result do
40410: LD_ADDR_VAR 0 4
40414: PUSH
40415: LD_VAR 0 3
40419: PUSH
40420: FOR_IN
40421: IFFALSE 40842
// begin tag := GetTag ( i ) + 1 ;
40423: LD_ADDR_VAR 0 9
40427: PUSH
40428: LD_VAR 0 4
40432: PPUSH
40433: CALL_OW 110
40437: PUSH
40438: LD_INT 1
40440: PLUS
40441: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40442: LD_ADDR_VAR 0 7
40446: PUSH
40447: LD_VAR 0 4
40451: PPUSH
40452: CALL_OW 250
40456: PPUSH
40457: LD_VAR 0 4
40461: PPUSH
40462: CALL_OW 251
40466: PPUSH
40467: LD_INT 6
40469: PPUSH
40470: CALL 40043 0 3
40474: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40475: LD_VAR 0 4
40479: PPUSH
40480: CALL_OW 247
40484: PUSH
40485: LD_INT 2
40487: EQUAL
40488: PUSH
40489: LD_VAR 0 7
40493: AND
40494: PUSH
40495: LD_VAR 0 4
40499: PPUSH
40500: CALL_OW 264
40504: PUSH
40505: LD_VAR 0 10
40509: IN
40510: NOT
40511: AND
40512: IFFALSE 40551
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40514: LD_VAR 0 4
40518: PPUSH
40519: LD_VAR 0 7
40523: PUSH
40524: LD_INT 1
40526: ARRAY
40527: PUSH
40528: LD_INT 1
40530: ARRAY
40531: PPUSH
40532: LD_VAR 0 7
40536: PUSH
40537: LD_INT 1
40539: ARRAY
40540: PUSH
40541: LD_INT 2
40543: ARRAY
40544: PPUSH
40545: CALL_OW 116
40549: GO 40840
// if path > tag then
40551: LD_VAR 0 2
40555: PUSH
40556: LD_VAR 0 9
40560: GREATER
40561: IFFALSE 40769
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40563: LD_ADDR_VAR 0 6
40567: PUSH
40568: LD_VAR 0 5
40572: PPUSH
40573: LD_INT 91
40575: PUSH
40576: LD_VAR 0 4
40580: PUSH
40581: LD_INT 8
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: LIST
40588: PPUSH
40589: CALL_OW 72
40593: ST_TO_ADDR
// if nearEnemy then
40594: LD_VAR 0 6
40598: IFFALSE 40667
// begin if GetWeapon ( i ) = ru_time_lapser then
40600: LD_VAR 0 4
40604: PPUSH
40605: CALL_OW 264
40609: PUSH
40610: LD_INT 49
40612: EQUAL
40613: IFFALSE 40641
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40615: LD_VAR 0 4
40619: PPUSH
40620: LD_VAR 0 6
40624: PPUSH
40625: LD_VAR 0 4
40629: PPUSH
40630: CALL_OW 74
40634: PPUSH
40635: CALL_OW 112
40639: GO 40665
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40641: LD_VAR 0 4
40645: PPUSH
40646: LD_VAR 0 6
40650: PPUSH
40651: LD_VAR 0 4
40655: PPUSH
40656: CALL_OW 74
40660: PPUSH
40661: CALL 41769 0 2
// end else
40665: GO 40767
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40667: LD_VAR 0 4
40671: PPUSH
40672: LD_VAR 0 2
40676: PUSH
40677: LD_VAR 0 9
40681: ARRAY
40682: PUSH
40683: LD_INT 1
40685: ARRAY
40686: PPUSH
40687: LD_VAR 0 2
40691: PUSH
40692: LD_VAR 0 9
40696: ARRAY
40697: PUSH
40698: LD_INT 2
40700: ARRAY
40701: PPUSH
40702: CALL_OW 297
40706: PUSH
40707: LD_INT 6
40709: GREATER
40710: IFFALSE 40753
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40712: LD_VAR 0 4
40716: PPUSH
40717: LD_VAR 0 2
40721: PUSH
40722: LD_VAR 0 9
40726: ARRAY
40727: PUSH
40728: LD_INT 1
40730: ARRAY
40731: PPUSH
40732: LD_VAR 0 2
40736: PUSH
40737: LD_VAR 0 9
40741: ARRAY
40742: PUSH
40743: LD_INT 2
40745: ARRAY
40746: PPUSH
40747: CALL_OW 114
40751: GO 40767
// SetTag ( i , tag ) ;
40753: LD_VAR 0 4
40757: PPUSH
40758: LD_VAR 0 9
40762: PPUSH
40763: CALL_OW 109
// end else
40767: GO 40840
// if enemy then
40769: LD_VAR 0 5
40773: IFFALSE 40840
// begin if GetWeapon ( i ) = ru_time_lapser then
40775: LD_VAR 0 4
40779: PPUSH
40780: CALL_OW 264
40784: PUSH
40785: LD_INT 49
40787: EQUAL
40788: IFFALSE 40816
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40790: LD_VAR 0 4
40794: PPUSH
40795: LD_VAR 0 5
40799: PPUSH
40800: LD_VAR 0 4
40804: PPUSH
40805: CALL_OW 74
40809: PPUSH
40810: CALL_OW 112
40814: GO 40840
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40816: LD_VAR 0 4
40820: PPUSH
40821: LD_VAR 0 5
40825: PPUSH
40826: LD_VAR 0 4
40830: PPUSH
40831: CALL_OW 74
40835: PPUSH
40836: CALL 41769 0 2
// end ; end ;
40840: GO 40420
40842: POP
40843: POP
// end ;
40844: LD_VAR 0 3
40848: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40849: LD_INT 0
40851: PPUSH
40852: PPUSH
40853: PPUSH
// if not unit or IsInUnit ( unit ) then
40854: LD_VAR 0 1
40858: NOT
40859: PUSH
40860: LD_VAR 0 1
40864: PPUSH
40865: CALL_OW 310
40869: OR
40870: IFFALSE 40874
// exit ;
40872: GO 40965
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
40874: LD_ADDR_VAR 0 4
40878: PUSH
40879: LD_VAR 0 1
40883: PPUSH
40884: CALL_OW 250
40888: PPUSH
40889: LD_VAR 0 2
40893: PPUSH
40894: LD_INT 1
40896: PPUSH
40897: CALL_OW 272
40901: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
40902: LD_ADDR_VAR 0 5
40906: PUSH
40907: LD_VAR 0 1
40911: PPUSH
40912: CALL_OW 251
40916: PPUSH
40917: LD_VAR 0 2
40921: PPUSH
40922: LD_INT 1
40924: PPUSH
40925: CALL_OW 273
40929: ST_TO_ADDR
// if ValidHex ( x , y ) then
40930: LD_VAR 0 4
40934: PPUSH
40935: LD_VAR 0 5
40939: PPUSH
40940: CALL_OW 488
40944: IFFALSE 40965
// ComTurnXY ( unit , x , y ) ;
40946: LD_VAR 0 1
40950: PPUSH
40951: LD_VAR 0 4
40955: PPUSH
40956: LD_VAR 0 5
40960: PPUSH
40961: CALL_OW 118
// end ;
40965: LD_VAR 0 3
40969: RET
// export function SeeUnits ( side , units ) ; var i ; begin
40970: LD_INT 0
40972: PPUSH
40973: PPUSH
// result := false ;
40974: LD_ADDR_VAR 0 3
40978: PUSH
40979: LD_INT 0
40981: ST_TO_ADDR
// if not units then
40982: LD_VAR 0 2
40986: NOT
40987: IFFALSE 40991
// exit ;
40989: GO 41036
// for i in units do
40991: LD_ADDR_VAR 0 4
40995: PUSH
40996: LD_VAR 0 2
41000: PUSH
41001: FOR_IN
41002: IFFALSE 41034
// if See ( side , i ) then
41004: LD_VAR 0 1
41008: PPUSH
41009: LD_VAR 0 4
41013: PPUSH
41014: CALL_OW 292
41018: IFFALSE 41032
// begin result := true ;
41020: LD_ADDR_VAR 0 3
41024: PUSH
41025: LD_INT 1
41027: ST_TO_ADDR
// exit ;
41028: POP
41029: POP
41030: GO 41036
// end ;
41032: GO 41001
41034: POP
41035: POP
// end ;
41036: LD_VAR 0 3
41040: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41041: LD_INT 0
41043: PPUSH
41044: PPUSH
41045: PPUSH
41046: PPUSH
// if not unit or not points then
41047: LD_VAR 0 1
41051: NOT
41052: PUSH
41053: LD_VAR 0 2
41057: NOT
41058: OR
41059: IFFALSE 41063
// exit ;
41061: GO 41153
// dist := 99999 ;
41063: LD_ADDR_VAR 0 5
41067: PUSH
41068: LD_INT 99999
41070: ST_TO_ADDR
// for i in points do
41071: LD_ADDR_VAR 0 4
41075: PUSH
41076: LD_VAR 0 2
41080: PUSH
41081: FOR_IN
41082: IFFALSE 41151
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41084: LD_ADDR_VAR 0 6
41088: PUSH
41089: LD_VAR 0 1
41093: PPUSH
41094: LD_VAR 0 4
41098: PUSH
41099: LD_INT 1
41101: ARRAY
41102: PPUSH
41103: LD_VAR 0 4
41107: PUSH
41108: LD_INT 2
41110: ARRAY
41111: PPUSH
41112: CALL_OW 297
41116: ST_TO_ADDR
// if tmpDist < dist then
41117: LD_VAR 0 6
41121: PUSH
41122: LD_VAR 0 5
41126: LESS
41127: IFFALSE 41149
// begin result := i ;
41129: LD_ADDR_VAR 0 3
41133: PUSH
41134: LD_VAR 0 4
41138: ST_TO_ADDR
// dist := tmpDist ;
41139: LD_ADDR_VAR 0 5
41143: PUSH
41144: LD_VAR 0 6
41148: ST_TO_ADDR
// end ; end ;
41149: GO 41081
41151: POP
41152: POP
// end ;
41153: LD_VAR 0 3
41157: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41158: LD_INT 0
41160: PPUSH
// uc_side := side ;
41161: LD_ADDR_OWVAR 20
41165: PUSH
41166: LD_VAR 0 1
41170: ST_TO_ADDR
// uc_nation := 3 ;
41171: LD_ADDR_OWVAR 21
41175: PUSH
41176: LD_INT 3
41178: ST_TO_ADDR
// vc_chassis := 25 ;
41179: LD_ADDR_OWVAR 37
41183: PUSH
41184: LD_INT 25
41186: ST_TO_ADDR
// vc_engine := engine_siberite ;
41187: LD_ADDR_OWVAR 39
41191: PUSH
41192: LD_INT 3
41194: ST_TO_ADDR
// vc_control := control_computer ;
41195: LD_ADDR_OWVAR 38
41199: PUSH
41200: LD_INT 3
41202: ST_TO_ADDR
// vc_weapon := 59 ;
41203: LD_ADDR_OWVAR 40
41207: PUSH
41208: LD_INT 59
41210: ST_TO_ADDR
// result := CreateVehicle ;
41211: LD_ADDR_VAR 0 5
41215: PUSH
41216: CALL_OW 45
41220: ST_TO_ADDR
// SetDir ( result , d ) ;
41221: LD_VAR 0 5
41225: PPUSH
41226: LD_VAR 0 4
41230: PPUSH
41231: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41235: LD_VAR 0 5
41239: PPUSH
41240: LD_VAR 0 2
41244: PPUSH
41245: LD_VAR 0 3
41249: PPUSH
41250: LD_INT 0
41252: PPUSH
41253: CALL_OW 48
// end ;
41257: LD_VAR 0 5
41261: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41262: LD_INT 0
41264: PPUSH
41265: PPUSH
41266: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41267: LD_ADDR_VAR 0 2
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41290: LD_VAR 0 1
41294: NOT
41295: PUSH
41296: LD_VAR 0 1
41300: PPUSH
41301: CALL_OW 264
41305: PUSH
41306: LD_INT 12
41308: PUSH
41309: LD_INT 51
41311: PUSH
41312: LD_INT 32
41314: PUSH
41315: LD_INT 89
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: IN
41324: NOT
41325: OR
41326: IFFALSE 41330
// exit ;
41328: GO 41428
// for i := 1 to 3 do
41330: LD_ADDR_VAR 0 3
41334: PUSH
41335: DOUBLE
41336: LD_INT 1
41338: DEC
41339: ST_TO_ADDR
41340: LD_INT 3
41342: PUSH
41343: FOR_TO
41344: IFFALSE 41426
// begin tmp := GetCargo ( cargo , i ) ;
41346: LD_ADDR_VAR 0 4
41350: PUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: LD_VAR 0 3
41360: PPUSH
41361: CALL_OW 289
41365: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41366: LD_ADDR_VAR 0 2
41370: PUSH
41371: LD_VAR 0 2
41375: PPUSH
41376: LD_VAR 0 3
41380: PPUSH
41381: LD_VAR 0 4
41385: PPUSH
41386: CALL_OW 1
41390: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41391: LD_ADDR_VAR 0 2
41395: PUSH
41396: LD_VAR 0 2
41400: PPUSH
41401: LD_INT 4
41403: PPUSH
41404: LD_VAR 0 2
41408: PUSH
41409: LD_INT 4
41411: ARRAY
41412: PUSH
41413: LD_VAR 0 4
41417: PLUS
41418: PPUSH
41419: CALL_OW 1
41423: ST_TO_ADDR
// end ;
41424: GO 41343
41426: POP
41427: POP
// end ;
41428: LD_VAR 0 2
41432: RET
// export function Length ( array ) ; begin
41433: LD_INT 0
41435: PPUSH
// result := array + 0 ;
41436: LD_ADDR_VAR 0 2
41440: PUSH
41441: LD_VAR 0 1
41445: PUSH
41446: LD_INT 0
41448: PLUS
41449: ST_TO_ADDR
// end ;
41450: LD_VAR 0 2
41454: RET
// export function PrepareArray ( array ) ; begin
41455: LD_INT 0
41457: PPUSH
// result := array diff 0 ;
41458: LD_ADDR_VAR 0 2
41462: PUSH
41463: LD_VAR 0 1
41467: PUSH
41468: LD_INT 0
41470: DIFF
41471: ST_TO_ADDR
// if not result [ 1 ] then
41472: LD_VAR 0 2
41476: PUSH
41477: LD_INT 1
41479: ARRAY
41480: NOT
41481: IFFALSE 41501
// result := Delete ( result , 1 ) ;
41483: LD_ADDR_VAR 0 2
41487: PUSH
41488: LD_VAR 0 2
41492: PPUSH
41493: LD_INT 1
41495: PPUSH
41496: CALL_OW 3
41500: ST_TO_ADDR
// end ;
41501: LD_VAR 0 2
41505: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41506: LD_INT 0
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
// sibRocketRange := 25 ;
41512: LD_ADDR_VAR 0 6
41516: PUSH
41517: LD_INT 25
41519: ST_TO_ADDR
// result := false ;
41520: LD_ADDR_VAR 0 4
41524: PUSH
41525: LD_INT 0
41527: ST_TO_ADDR
// for i := 0 to 5 do
41528: LD_ADDR_VAR 0 5
41532: PUSH
41533: DOUBLE
41534: LD_INT 0
41536: DEC
41537: ST_TO_ADDR
41538: LD_INT 5
41540: PUSH
41541: FOR_TO
41542: IFFALSE 41609
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41544: LD_VAR 0 1
41548: PPUSH
41549: LD_VAR 0 5
41553: PPUSH
41554: LD_VAR 0 6
41558: PPUSH
41559: CALL_OW 272
41563: PPUSH
41564: LD_VAR 0 2
41568: PPUSH
41569: LD_VAR 0 5
41573: PPUSH
41574: LD_VAR 0 6
41578: PPUSH
41579: CALL_OW 273
41583: PPUSH
41584: LD_VAR 0 3
41588: PPUSH
41589: CALL_OW 309
41593: IFFALSE 41607
// begin result := true ;
41595: LD_ADDR_VAR 0 4
41599: PUSH
41600: LD_INT 1
41602: ST_TO_ADDR
// exit ;
41603: POP
41604: POP
41605: GO 41611
// end ;
41607: GO 41541
41609: POP
41610: POP
// end ;
41611: LD_VAR 0 4
41615: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41616: LD_INT 0
41618: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41619: LD_VAR 0 1
41623: PPUSH
41624: LD_VAR 0 2
41628: PPUSH
41629: LD_INT 0
41631: PPUSH
41632: LD_INT 0
41634: PPUSH
41635: LD_INT 1
41637: PPUSH
41638: LD_INT 0
41640: PPUSH
41641: CALL_OW 587
// end ;
41645: LD_VAR 0 3
41649: RET
// export function CenterOnNow ( unit ) ; begin
41650: LD_INT 0
41652: PPUSH
// result := IsInUnit ( unit ) ;
41653: LD_ADDR_VAR 0 2
41657: PUSH
41658: LD_VAR 0 1
41662: PPUSH
41663: CALL_OW 310
41667: ST_TO_ADDR
// if not result then
41668: LD_VAR 0 2
41672: NOT
41673: IFFALSE 41685
// result := unit ;
41675: LD_ADDR_VAR 0 2
41679: PUSH
41680: LD_VAR 0 1
41684: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
41685: LD_VAR 0 1
41689: PPUSH
41690: CALL_OW 87
// end ;
41694: LD_VAR 0 2
41698: RET
// export function ComMoveHex ( unit , hex ) ; begin
41699: LD_INT 0
41701: PPUSH
// if not hex then
41702: LD_VAR 0 2
41706: NOT
41707: IFFALSE 41711
// exit ;
41709: GO 41764
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
41711: LD_VAR 0 2
41715: PUSH
41716: LD_INT 1
41718: ARRAY
41719: PPUSH
41720: LD_VAR 0 2
41724: PUSH
41725: LD_INT 2
41727: ARRAY
41728: PPUSH
41729: CALL_OW 428
41733: IFFALSE 41737
// exit ;
41735: GO 41764
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
41737: LD_VAR 0 1
41741: PPUSH
41742: LD_VAR 0 2
41746: PUSH
41747: LD_INT 1
41749: ARRAY
41750: PPUSH
41751: LD_VAR 0 2
41755: PUSH
41756: LD_INT 2
41758: ARRAY
41759: PPUSH
41760: CALL_OW 111
// end ;
41764: LD_VAR 0 3
41768: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
41769: LD_INT 0
41771: PPUSH
41772: PPUSH
41773: PPUSH
// if not unit or not enemy then
41774: LD_VAR 0 1
41778: NOT
41779: PUSH
41780: LD_VAR 0 2
41784: NOT
41785: OR
41786: IFFALSE 41790
// exit ;
41788: GO 41914
// x := GetX ( enemy ) ;
41790: LD_ADDR_VAR 0 4
41794: PUSH
41795: LD_VAR 0 2
41799: PPUSH
41800: CALL_OW 250
41804: ST_TO_ADDR
// y := GetY ( enemy ) ;
41805: LD_ADDR_VAR 0 5
41809: PUSH
41810: LD_VAR 0 2
41814: PPUSH
41815: CALL_OW 251
41819: ST_TO_ADDR
// if ValidHex ( x , y ) then
41820: LD_VAR 0 4
41824: PPUSH
41825: LD_VAR 0 5
41829: PPUSH
41830: CALL_OW 488
41834: IFFALSE 41914
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
41836: LD_VAR 0 2
41840: PPUSH
41841: CALL_OW 247
41845: PUSH
41846: LD_INT 3
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: IN
41856: PUSH
41857: LD_VAR 0 1
41861: PPUSH
41862: CALL_OW 255
41866: PPUSH
41867: LD_VAR 0 2
41871: PPUSH
41872: CALL_OW 292
41876: AND
41877: IFFALSE 41895
// ComAttackUnit ( unit , enemy ) else
41879: LD_VAR 0 1
41883: PPUSH
41884: LD_VAR 0 2
41888: PPUSH
41889: CALL_OW 115
41893: GO 41914
// ComAgressiveMove ( unit , x , y ) ;
41895: LD_VAR 0 1
41899: PPUSH
41900: LD_VAR 0 4
41904: PPUSH
41905: LD_VAR 0 5
41909: PPUSH
41910: CALL_OW 114
// end ;
41914: LD_VAR 0 3
41918: RET
