// starting begin ResetFog ;
   0: CALL_OW 335
// end ;
   4: END
// export function SaveTech ( side , saveId ) ; var i ; begin
   5: LD_INT 0
   7: PPUSH
   8: PPUSH
// result := [ ] ;
   9: LD_ADDR_VAR 0 3
  13: PUSH
  14: EMPTY
  15: ST_TO_ADDR
// for i := 1 to 100 do
  16: LD_ADDR_VAR 0 4
  20: PUSH
  21: DOUBLE
  22: LD_INT 1
  24: DEC
  25: ST_TO_ADDR
  26: LD_INT 100
  28: PUSH
  29: FOR_TO
  30: IFFALSE 73
// result := Join ( result , [ i , GetTech ( i , side ) ] ) ;
  32: LD_ADDR_VAR 0 3
  36: PUSH
  37: LD_VAR 0 3
  41: PPUSH
  42: LD_VAR 0 4
  46: PUSH
  47: LD_VAR 0 4
  51: PPUSH
  52: LD_VAR 0 1
  56: PPUSH
  57: CALL_OW 321
  61: PUSH
  62: EMPTY
  63: LIST
  64: LIST
  65: PPUSH
  66: CALL 37564 0 2
  70: ST_TO_ADDR
  71: GO 29
  73: POP
  74: POP
// end ;
  75: LD_VAR 0 3
  79: RET
// export techs ; every 0 0$1 do
  80: GO 82
  82: DISABLE
// begin SetTech ( 88 , 2 , state_disabled ) ;
  83: LD_INT 88
  85: PPUSH
  86: LD_INT 2
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 322
// end ; end_of_file
  96: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  97: LD_INT 0
  99: PPUSH
 100: PPUSH
// if exist_mode then
 101: LD_VAR 0 2
 105: IFFALSE 130
// unit := CreateCharacter ( prefix & ident ) else
 107: LD_ADDR_VAR 0 5
 111: PUSH
 112: LD_VAR 0 3
 116: PUSH
 117: LD_VAR 0 1
 121: STR
 122: PPUSH
 123: CALL_OW 34
 127: ST_TO_ADDR
 128: GO 145
// unit := NewCharacter ( ident ) ;
 130: LD_ADDR_VAR 0 5
 134: PUSH
 135: LD_VAR 0 1
 139: PPUSH
 140: CALL_OW 25
 144: ST_TO_ADDR
// result := unit ;
 145: LD_ADDR_VAR 0 4
 149: PUSH
 150: LD_VAR 0 5
 154: ST_TO_ADDR
// end ;
 155: LD_VAR 0 4
 159: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 160: LD_INT 0
 162: PPUSH
 163: PPUSH
// if not side or not nation then
 164: LD_VAR 0 1
 168: NOT
 169: PUSH
 170: LD_VAR 0 2
 174: NOT
 175: OR
 176: IFFALSE 180
// exit ;
 178: GO 948
// case nation of nation_american :
 180: LD_VAR 0 2
 184: PUSH
 185: LD_INT 1
 187: DOUBLE
 188: EQUAL
 189: IFTRUE 193
 191: GO 407
 193: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 194: LD_ADDR_VAR 0 4
 198: PUSH
 199: LD_INT 35
 201: PUSH
 202: LD_INT 45
 204: PUSH
 205: LD_INT 46
 207: PUSH
 208: LD_INT 47
 210: PUSH
 211: LD_INT 82
 213: PUSH
 214: LD_INT 83
 216: PUSH
 217: LD_INT 84
 219: PUSH
 220: LD_INT 85
 222: PUSH
 223: LD_INT 86
 225: PUSH
 226: LD_INT 1
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 6
 234: PUSH
 235: LD_INT 15
 237: PUSH
 238: LD_INT 16
 240: PUSH
 241: LD_INT 7
 243: PUSH
 244: LD_INT 12
 246: PUSH
 247: LD_INT 13
 249: PUSH
 250: LD_INT 10
 252: PUSH
 253: LD_INT 14
 255: PUSH
 256: LD_INT 20
 258: PUSH
 259: LD_INT 21
 261: PUSH
 262: LD_INT 22
 264: PUSH
 265: LD_INT 25
 267: PUSH
 268: LD_INT 32
 270: PUSH
 271: LD_INT 27
 273: PUSH
 274: LD_INT 36
 276: PUSH
 277: LD_INT 69
 279: PUSH
 280: LD_INT 39
 282: PUSH
 283: LD_INT 34
 285: PUSH
 286: LD_INT 40
 288: PUSH
 289: LD_INT 48
 291: PUSH
 292: LD_INT 49
 294: PUSH
 295: LD_INT 50
 297: PUSH
 298: LD_INT 51
 300: PUSH
 301: LD_INT 52
 303: PUSH
 304: LD_INT 53
 306: PUSH
 307: LD_INT 54
 309: PUSH
 310: LD_INT 55
 312: PUSH
 313: LD_INT 56
 315: PUSH
 316: LD_INT 57
 318: PUSH
 319: LD_INT 58
 321: PUSH
 322: LD_INT 59
 324: PUSH
 325: LD_INT 60
 327: PUSH
 328: LD_INT 61
 330: PUSH
 331: LD_INT 62
 333: PUSH
 334: LD_INT 80
 336: PUSH
 337: LD_INT 82
 339: PUSH
 340: LD_INT 83
 342: PUSH
 343: LD_INT 84
 345: PUSH
 346: LD_INT 85
 348: PUSH
 349: LD_INT 86
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: ST_TO_ADDR
 405: GO 872
 407: LD_INT 2
 409: DOUBLE
 410: EQUAL
 411: IFTRUE 415
 413: GO 641
 415: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 416: LD_ADDR_VAR 0 4
 420: PUSH
 421: LD_INT 35
 423: PUSH
 424: LD_INT 45
 426: PUSH
 427: LD_INT 46
 429: PUSH
 430: LD_INT 47
 432: PUSH
 433: LD_INT 82
 435: PUSH
 436: LD_INT 83
 438: PUSH
 439: LD_INT 84
 441: PUSH
 442: LD_INT 85
 444: PUSH
 445: LD_INT 87
 447: PUSH
 448: LD_INT 70
 450: PUSH
 451: LD_INT 1
 453: PUSH
 454: LD_INT 11
 456: PUSH
 457: LD_INT 3
 459: PUSH
 460: LD_INT 4
 462: PUSH
 463: LD_INT 5
 465: PUSH
 466: LD_INT 6
 468: PUSH
 469: LD_INT 15
 471: PUSH
 472: LD_INT 18
 474: PUSH
 475: LD_INT 7
 477: PUSH
 478: LD_INT 17
 480: PUSH
 481: LD_INT 8
 483: PUSH
 484: LD_INT 20
 486: PUSH
 487: LD_INT 21
 489: PUSH
 490: LD_INT 22
 492: PUSH
 493: LD_INT 72
 495: PUSH
 496: LD_INT 26
 498: PUSH
 499: LD_INT 69
 501: PUSH
 502: LD_INT 39
 504: PUSH
 505: LD_INT 40
 507: PUSH
 508: LD_INT 41
 510: PUSH
 511: LD_INT 42
 513: PUSH
 514: LD_INT 43
 516: PUSH
 517: LD_INT 48
 519: PUSH
 520: LD_INT 49
 522: PUSH
 523: LD_INT 50
 525: PUSH
 526: LD_INT 51
 528: PUSH
 529: LD_INT 52
 531: PUSH
 532: LD_INT 53
 534: PUSH
 535: LD_INT 54
 537: PUSH
 538: LD_INT 55
 540: PUSH
 541: LD_INT 56
 543: PUSH
 544: LD_INT 60
 546: PUSH
 547: LD_INT 61
 549: PUSH
 550: LD_INT 62
 552: PUSH
 553: LD_INT 66
 555: PUSH
 556: LD_INT 67
 558: PUSH
 559: LD_INT 68
 561: PUSH
 562: LD_INT 81
 564: PUSH
 565: LD_INT 82
 567: PUSH
 568: LD_INT 83
 570: PUSH
 571: LD_INT 84
 573: PUSH
 574: LD_INT 85
 576: PUSH
 577: LD_INT 87
 579: PUSH
 580: LD_INT 88
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: LIST
 594: LIST
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: ST_TO_ADDR
 639: GO 872
 641: LD_INT 3
 643: DOUBLE
 644: EQUAL
 645: IFTRUE 649
 647: GO 871
 649: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 650: LD_ADDR_VAR 0 4
 654: PUSH
 655: LD_INT 46
 657: PUSH
 658: LD_INT 47
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 82
 669: PUSH
 670: LD_INT 83
 672: PUSH
 673: LD_INT 84
 675: PUSH
 676: LD_INT 85
 678: PUSH
 679: LD_INT 86
 681: PUSH
 682: LD_INT 11
 684: PUSH
 685: LD_INT 9
 687: PUSH
 688: LD_INT 20
 690: PUSH
 691: LD_INT 19
 693: PUSH
 694: LD_INT 21
 696: PUSH
 697: LD_INT 24
 699: PUSH
 700: LD_INT 22
 702: PUSH
 703: LD_INT 25
 705: PUSH
 706: LD_INT 28
 708: PUSH
 709: LD_INT 29
 711: PUSH
 712: LD_INT 30
 714: PUSH
 715: LD_INT 31
 717: PUSH
 718: LD_INT 37
 720: PUSH
 721: LD_INT 38
 723: PUSH
 724: LD_INT 32
 726: PUSH
 727: LD_INT 27
 729: PUSH
 730: LD_INT 33
 732: PUSH
 733: LD_INT 69
 735: PUSH
 736: LD_INT 39
 738: PUSH
 739: LD_INT 34
 741: PUSH
 742: LD_INT 40
 744: PUSH
 745: LD_INT 71
 747: PUSH
 748: LD_INT 23
 750: PUSH
 751: LD_INT 44
 753: PUSH
 754: LD_INT 48
 756: PUSH
 757: LD_INT 49
 759: PUSH
 760: LD_INT 50
 762: PUSH
 763: LD_INT 51
 765: PUSH
 766: LD_INT 52
 768: PUSH
 769: LD_INT 53
 771: PUSH
 772: LD_INT 54
 774: PUSH
 775: LD_INT 55
 777: PUSH
 778: LD_INT 56
 780: PUSH
 781: LD_INT 57
 783: PUSH
 784: LD_INT 58
 786: PUSH
 787: LD_INT 59
 789: PUSH
 790: LD_INT 63
 792: PUSH
 793: LD_INT 64
 795: PUSH
 796: LD_INT 65
 798: PUSH
 799: LD_INT 82
 801: PUSH
 802: LD_INT 83
 804: PUSH
 805: LD_INT 84
 807: PUSH
 808: LD_INT 85
 810: PUSH
 811: LD_INT 86
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: ST_TO_ADDR
 869: GO 872
 871: POP
// if state > - 1 and state < 3 then
 872: LD_VAR 0 3
 876: PUSH
 877: LD_INT 1
 879: NEG
 880: GREATER
 881: PUSH
 882: LD_VAR 0 3
 886: PUSH
 887: LD_INT 3
 889: LESS
 890: AND
 891: IFFALSE 948
// for i in result do
 893: LD_ADDR_VAR 0 5
 897: PUSH
 898: LD_VAR 0 4
 902: PUSH
 903: FOR_IN
 904: IFFALSE 946
// if GetTech ( i , side ) <> state then
 906: LD_VAR 0 5
 910: PPUSH
 911: LD_VAR 0 1
 915: PPUSH
 916: CALL_OW 321
 920: PUSH
 921: LD_VAR 0 3
 925: NONEQUAL
 926: IFFALSE 944
// result := result diff i ;
 928: LD_ADDR_VAR 0 4
 932: PUSH
 933: LD_VAR 0 4
 937: PUSH
 938: LD_VAR 0 5
 942: DIFF
 943: ST_TO_ADDR
 944: GO 903
 946: POP
 947: POP
// end ;
 948: LD_VAR 0 4
 952: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
 953: LD_INT 0
 955: PPUSH
 956: PPUSH
 957: PPUSH
// result := true ;
 958: LD_ADDR_VAR 0 3
 962: PUSH
 963: LD_INT 1
 965: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
 966: LD_ADDR_VAR 0 5
 970: PUSH
 971: LD_VAR 0 2
 975: PPUSH
 976: CALL_OW 480
 980: ST_TO_ADDR
// if not tmp then
 981: LD_VAR 0 5
 985: NOT
 986: IFFALSE 990
// exit ;
 988: GO 1039
// for i in tmp do
 990: LD_ADDR_VAR 0 4
 994: PUSH
 995: LD_VAR 0 5
 999: PUSH
1000: FOR_IN
1001: IFFALSE 1037
// if GetTech ( i , side ) <> state_researched then
1003: LD_VAR 0 4
1007: PPUSH
1008: LD_VAR 0 1
1012: PPUSH
1013: CALL_OW 321
1017: PUSH
1018: LD_INT 2
1020: NONEQUAL
1021: IFFALSE 1035
// begin result := false ;
1023: LD_ADDR_VAR 0 3
1027: PUSH
1028: LD_INT 0
1030: ST_TO_ADDR
// exit ;
1031: POP
1032: POP
1033: GO 1039
// end ;
1035: GO 1000
1037: POP
1038: POP
// end ;
1039: LD_VAR 0 3
1043: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1044: LD_INT 0
1046: PPUSH
1047: PPUSH
1048: PPUSH
1049: PPUSH
1050: PPUSH
1051: PPUSH
1052: PPUSH
1053: PPUSH
1054: PPUSH
1055: PPUSH
1056: PPUSH
1057: PPUSH
1058: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1059: LD_VAR 0 1
1063: NOT
1064: PUSH
1065: LD_VAR 0 1
1069: PPUSH
1070: CALL_OW 257
1074: PUSH
1075: LD_INT 9
1077: NONEQUAL
1078: OR
1079: IFFALSE 1083
// exit ;
1081: GO 1656
// side := GetSide ( unit ) ;
1083: LD_ADDR_VAR 0 9
1087: PUSH
1088: LD_VAR 0 1
1092: PPUSH
1093: CALL_OW 255
1097: ST_TO_ADDR
// tech_space := tech_spacanom ;
1098: LD_ADDR_VAR 0 12
1102: PUSH
1103: LD_INT 29
1105: ST_TO_ADDR
// tech_time := tech_taurad ;
1106: LD_ADDR_VAR 0 13
1110: PUSH
1111: LD_INT 28
1113: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1114: LD_ADDR_VAR 0 11
1118: PUSH
1119: LD_VAR 0 1
1123: PPUSH
1124: CALL_OW 310
1128: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1129: LD_VAR 0 11
1133: PPUSH
1134: CALL_OW 247
1138: PUSH
1139: LD_INT 2
1141: EQUAL
1142: IFFALSE 1146
// exit ;
1144: GO 1656
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1146: LD_ADDR_VAR 0 8
1150: PUSH
1151: LD_INT 81
1153: PUSH
1154: LD_VAR 0 9
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 3
1165: PUSH
1166: LD_INT 21
1168: PUSH
1169: LD_INT 3
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: PPUSH
1184: CALL_OW 69
1188: ST_TO_ADDR
// if not tmp then
1189: LD_VAR 0 8
1193: NOT
1194: IFFALSE 1198
// exit ;
1196: GO 1656
// if in_unit then
1198: LD_VAR 0 11
1202: IFFALSE 1226
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1204: LD_ADDR_VAR 0 10
1208: PUSH
1209: LD_VAR 0 8
1213: PPUSH
1214: LD_VAR 0 11
1218: PPUSH
1219: CALL_OW 74
1223: ST_TO_ADDR
1224: GO 1246
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1226: LD_ADDR_VAR 0 10
1230: PUSH
1231: LD_VAR 0 8
1235: PPUSH
1236: LD_VAR 0 1
1240: PPUSH
1241: CALL_OW 74
1245: ST_TO_ADDR
// if not enemy then
1246: LD_VAR 0 10
1250: NOT
1251: IFFALSE 1255
// exit ;
1253: GO 1656
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1255: LD_VAR 0 11
1259: PUSH
1260: LD_VAR 0 11
1264: PPUSH
1265: LD_VAR 0 10
1269: PPUSH
1270: CALL_OW 296
1274: PUSH
1275: LD_INT 13
1277: GREATER
1278: AND
1279: PUSH
1280: LD_VAR 0 1
1284: PPUSH
1285: LD_VAR 0 10
1289: PPUSH
1290: CALL_OW 296
1294: PUSH
1295: LD_INT 12
1297: GREATER
1298: OR
1299: IFFALSE 1303
// exit ;
1301: GO 1656
// missile := [ 1 ] ;
1303: LD_ADDR_VAR 0 14
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: EMPTY
1312: LIST
1313: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1314: LD_VAR 0 9
1318: PPUSH
1319: LD_VAR 0 12
1323: PPUSH
1324: CALL_OW 325
1328: IFFALSE 1357
// missile := Replace ( missile , missile + 1 , 2 ) ;
1330: LD_ADDR_VAR 0 14
1334: PUSH
1335: LD_VAR 0 14
1339: PPUSH
1340: LD_VAR 0 14
1344: PUSH
1345: LD_INT 1
1347: PLUS
1348: PPUSH
1349: LD_INT 2
1351: PPUSH
1352: CALL_OW 1
1356: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1357: LD_VAR 0 9
1361: PPUSH
1362: LD_VAR 0 13
1366: PPUSH
1367: CALL_OW 325
1371: PUSH
1372: LD_VAR 0 10
1376: PPUSH
1377: CALL_OW 255
1381: PPUSH
1382: LD_VAR 0 13
1386: PPUSH
1387: CALL_OW 325
1391: NOT
1392: AND
1393: IFFALSE 1422
// missile := Replace ( missile , missile + 1 , 3 ) ;
1395: LD_ADDR_VAR 0 14
1399: PUSH
1400: LD_VAR 0 14
1404: PPUSH
1405: LD_VAR 0 14
1409: PUSH
1410: LD_INT 1
1412: PLUS
1413: PPUSH
1414: LD_INT 3
1416: PPUSH
1417: CALL_OW 1
1421: ST_TO_ADDR
// if missile < 2 then
1422: LD_VAR 0 14
1426: PUSH
1427: LD_INT 2
1429: LESS
1430: IFFALSE 1434
// exit ;
1432: GO 1656
// x := GetX ( enemy ) ;
1434: LD_ADDR_VAR 0 4
1438: PUSH
1439: LD_VAR 0 10
1443: PPUSH
1444: CALL_OW 250
1448: ST_TO_ADDR
// y := GetY ( enemy ) ;
1449: LD_ADDR_VAR 0 5
1453: PUSH
1454: LD_VAR 0 10
1458: PPUSH
1459: CALL_OW 251
1463: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1464: LD_ADDR_VAR 0 6
1468: PUSH
1469: LD_VAR 0 4
1473: PUSH
1474: LD_INT 1
1476: NEG
1477: PPUSH
1478: LD_INT 1
1480: PPUSH
1481: CALL_OW 12
1485: PLUS
1486: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1487: LD_ADDR_VAR 0 7
1491: PUSH
1492: LD_VAR 0 5
1496: PUSH
1497: LD_INT 1
1499: NEG
1500: PPUSH
1501: LD_INT 1
1503: PPUSH
1504: CALL_OW 12
1508: PLUS
1509: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1510: LD_VAR 0 6
1514: PPUSH
1515: LD_VAR 0 7
1519: PPUSH
1520: CALL_OW 488
1524: NOT
1525: IFFALSE 1547
// begin _x := x ;
1527: LD_ADDR_VAR 0 6
1531: PUSH
1532: LD_VAR 0 4
1536: ST_TO_ADDR
// _y := y ;
1537: LD_ADDR_VAR 0 7
1541: PUSH
1542: LD_VAR 0 5
1546: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1547: LD_ADDR_VAR 0 3
1551: PUSH
1552: LD_INT 1
1554: PPUSH
1555: LD_VAR 0 14
1559: PPUSH
1560: CALL_OW 12
1564: ST_TO_ADDR
// case i of 1 :
1565: LD_VAR 0 3
1569: PUSH
1570: LD_INT 1
1572: DOUBLE
1573: EQUAL
1574: IFTRUE 1578
1576: GO 1595
1578: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1579: LD_VAR 0 1
1583: PPUSH
1584: LD_VAR 0 10
1588: PPUSH
1589: CALL_OW 115
1593: GO 1656
1595: LD_INT 2
1597: DOUBLE
1598: EQUAL
1599: IFTRUE 1603
1601: GO 1625
1603: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1604: LD_VAR 0 1
1608: PPUSH
1609: LD_VAR 0 6
1613: PPUSH
1614: LD_VAR 0 7
1618: PPUSH
1619: CALL_OW 153
1623: GO 1656
1625: LD_INT 3
1627: DOUBLE
1628: EQUAL
1629: IFTRUE 1633
1631: GO 1655
1633: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1634: LD_VAR 0 1
1638: PPUSH
1639: LD_VAR 0 6
1643: PPUSH
1644: LD_VAR 0 7
1648: PPUSH
1649: CALL_OW 154
1653: GO 1656
1655: POP
// end ;
1656: LD_VAR 0 2
1660: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1661: LD_INT 0
1663: PPUSH
1664: PPUSH
1665: PPUSH
1666: PPUSH
1667: PPUSH
1668: PPUSH
// if not unit or not building then
1669: LD_VAR 0 1
1673: NOT
1674: PUSH
1675: LD_VAR 0 2
1679: NOT
1680: OR
1681: IFFALSE 1685
// exit ;
1683: GO 1843
// x := GetX ( building ) ;
1685: LD_ADDR_VAR 0 5
1689: PUSH
1690: LD_VAR 0 2
1694: PPUSH
1695: CALL_OW 250
1699: ST_TO_ADDR
// y := GetY ( building ) ;
1700: LD_ADDR_VAR 0 6
1704: PUSH
1705: LD_VAR 0 2
1709: PPUSH
1710: CALL_OW 251
1714: ST_TO_ADDR
// for i = 0 to 5 do
1715: LD_ADDR_VAR 0 4
1719: PUSH
1720: DOUBLE
1721: LD_INT 0
1723: DEC
1724: ST_TO_ADDR
1725: LD_INT 5
1727: PUSH
1728: FOR_TO
1729: IFFALSE 1841
// begin _x := ShiftX ( x , i , 3 ) ;
1731: LD_ADDR_VAR 0 7
1735: PUSH
1736: LD_VAR 0 5
1740: PPUSH
1741: LD_VAR 0 4
1745: PPUSH
1746: LD_INT 3
1748: PPUSH
1749: CALL_OW 272
1753: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1754: LD_ADDR_VAR 0 8
1758: PUSH
1759: LD_VAR 0 6
1763: PPUSH
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_INT 3
1771: PPUSH
1772: CALL_OW 273
1776: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1777: LD_VAR 0 7
1781: PPUSH
1782: LD_VAR 0 8
1786: PPUSH
1787: CALL_OW 488
1791: NOT
1792: IFFALSE 1796
// continue ;
1794: GO 1728
// if HexInfo ( _x , _y ) = 0 then
1796: LD_VAR 0 7
1800: PPUSH
1801: LD_VAR 0 8
1805: PPUSH
1806: CALL_OW 428
1810: PUSH
1811: LD_INT 0
1813: EQUAL
1814: IFFALSE 1839
// begin ComMoveXY ( unit , _x , _y ) ;
1816: LD_VAR 0 1
1820: PPUSH
1821: LD_VAR 0 7
1825: PPUSH
1826: LD_VAR 0 8
1830: PPUSH
1831: CALL_OW 111
// exit ;
1835: POP
1836: POP
1837: GO 1843
// end ; end ;
1839: GO 1728
1841: POP
1842: POP
// end ;
1843: LD_VAR 0 3
1847: RET
// export function ScanBase ( side , base_area ) ; begin
1848: LD_INT 0
1850: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1851: LD_ADDR_VAR 0 3
1855: PUSH
1856: LD_VAR 0 2
1860: PPUSH
1861: LD_INT 81
1863: PUSH
1864: LD_VAR 0 1
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PPUSH
1873: CALL_OW 70
1877: ST_TO_ADDR
// end ;
1878: LD_VAR 0 3
1882: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
1883: LD_INT 0
1885: PPUSH
1886: PPUSH
1887: PPUSH
1888: PPUSH
// result := false ;
1889: LD_ADDR_VAR 0 2
1893: PUSH
1894: LD_INT 0
1896: ST_TO_ADDR
// side := GetSide ( unit ) ;
1897: LD_ADDR_VAR 0 3
1901: PUSH
1902: LD_VAR 0 1
1906: PPUSH
1907: CALL_OW 255
1911: ST_TO_ADDR
// nat := GetNation ( unit ) ;
1912: LD_ADDR_VAR 0 4
1916: PUSH
1917: LD_VAR 0 1
1921: PPUSH
1922: CALL_OW 248
1926: ST_TO_ADDR
// case nat of 1 :
1927: LD_VAR 0 4
1931: PUSH
1932: LD_INT 1
1934: DOUBLE
1935: EQUAL
1936: IFTRUE 1940
1938: GO 1951
1940: POP
// tech := tech_lassight ; 2 :
1941: LD_ADDR_VAR 0 5
1945: PUSH
1946: LD_INT 12
1948: ST_TO_ADDR
1949: GO 1990
1951: LD_INT 2
1953: DOUBLE
1954: EQUAL
1955: IFTRUE 1959
1957: GO 1970
1959: POP
// tech := tech_mortar ; 3 :
1960: LD_ADDR_VAR 0 5
1964: PUSH
1965: LD_INT 41
1967: ST_TO_ADDR
1968: GO 1990
1970: LD_INT 3
1972: DOUBLE
1973: EQUAL
1974: IFTRUE 1978
1976: GO 1989
1978: POP
// tech := tech_bazooka ; end ;
1979: LD_ADDR_VAR 0 5
1983: PUSH
1984: LD_INT 44
1986: ST_TO_ADDR
1987: GO 1990
1989: POP
// if Researched ( side , tech ) then
1990: LD_VAR 0 3
1994: PPUSH
1995: LD_VAR 0 5
1999: PPUSH
2000: CALL_OW 325
2004: IFFALSE 2031
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2006: LD_ADDR_VAR 0 2
2010: PUSH
2011: LD_INT 5
2013: PUSH
2014: LD_INT 8
2016: PUSH
2017: LD_INT 9
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_VAR 0 4
2029: ARRAY
2030: ST_TO_ADDR
// end ;
2031: LD_VAR 0 2
2035: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2036: LD_INT 0
2038: PPUSH
2039: PPUSH
2040: PPUSH
// if not mines then
2041: LD_VAR 0 2
2045: NOT
2046: IFFALSE 2050
// exit ;
2048: GO 2194
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2050: LD_ADDR_VAR 0 5
2054: PUSH
2055: LD_INT 81
2057: PUSH
2058: LD_VAR 0 1
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 3
2069: PUSH
2070: LD_INT 21
2072: PUSH
2073: LD_INT 3
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PPUSH
2088: CALL_OW 69
2092: ST_TO_ADDR
// for i in mines do
2093: LD_ADDR_VAR 0 4
2097: PUSH
2098: LD_VAR 0 2
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2192
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2106: LD_VAR 0 4
2110: PUSH
2111: LD_INT 1
2113: ARRAY
2114: PPUSH
2115: LD_VAR 0 4
2119: PUSH
2120: LD_INT 2
2122: ARRAY
2123: PPUSH
2124: CALL_OW 458
2128: NOT
2129: IFFALSE 2133
// continue ;
2131: GO 2103
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2133: LD_VAR 0 4
2137: PUSH
2138: LD_INT 1
2140: ARRAY
2141: PPUSH
2142: LD_VAR 0 4
2146: PUSH
2147: LD_INT 2
2149: ARRAY
2150: PPUSH
2151: CALL_OW 428
2155: PUSH
2156: LD_VAR 0 5
2160: IN
2161: IFFALSE 2190
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2163: LD_VAR 0 4
2167: PUSH
2168: LD_INT 1
2170: ARRAY
2171: PPUSH
2172: LD_VAR 0 4
2176: PUSH
2177: LD_INT 2
2179: ARRAY
2180: PPUSH
2181: LD_VAR 0 1
2185: PPUSH
2186: CALL_OW 456
// end ;
2190: GO 2103
2192: POP
2193: POP
// end ;
2194: LD_VAR 0 3
2198: RET
// export function Count ( array ) ; var i ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
// result := 0 ;
2203: LD_ADDR_VAR 0 2
2207: PUSH
2208: LD_INT 0
2210: ST_TO_ADDR
// for i in array do
2211: LD_ADDR_VAR 0 3
2215: PUSH
2216: LD_VAR 0 1
2220: PUSH
2221: FOR_IN
2222: IFFALSE 2246
// if i then
2224: LD_VAR 0 3
2228: IFFALSE 2244
// result := result + 1 ;
2230: LD_ADDR_VAR 0 2
2234: PUSH
2235: LD_VAR 0 2
2239: PUSH
2240: LD_INT 1
2242: PLUS
2243: ST_TO_ADDR
2244: GO 2221
2246: POP
2247: POP
// end ;
2248: LD_VAR 0 2
2252: RET
// export function IsEmpty ( building ) ; begin
2253: LD_INT 0
2255: PPUSH
// if not building then
2256: LD_VAR 0 1
2260: NOT
2261: IFFALSE 2265
// exit ;
2263: GO 2308
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_VAR 0 1
2274: PUSH
2275: LD_INT 22
2277: PUSH
2278: LD_VAR 0 1
2282: PPUSH
2283: CALL_OW 255
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 58
2294: PUSH
2295: EMPTY
2296: LIST
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PPUSH
2302: CALL_OW 69
2306: IN
2307: ST_TO_ADDR
// end ;
2308: LD_VAR 0 2
2312: RET
// export function IsNotFull ( building ) ; var places ; begin
2313: LD_INT 0
2315: PPUSH
2316: PPUSH
// if not building then
2317: LD_VAR 0 1
2321: NOT
2322: IFFALSE 2326
// exit ;
2324: GO 2497
// result := false ;
2326: LD_ADDR_VAR 0 2
2330: PUSH
2331: LD_INT 0
2333: ST_TO_ADDR
// places := 0 ;
2334: LD_ADDR_VAR 0 3
2338: PUSH
2339: LD_INT 0
2341: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
2342: LD_VAR 0 1
2346: PPUSH
2347: CALL_OW 266
2351: PUSH
2352: LD_INT 0
2354: DOUBLE
2355: EQUAL
2356: IFTRUE 2414
2358: LD_INT 1
2360: DOUBLE
2361: EQUAL
2362: IFTRUE 2414
2364: LD_INT 6
2366: DOUBLE
2367: EQUAL
2368: IFTRUE 2414
2370: LD_INT 7
2372: DOUBLE
2373: EQUAL
2374: IFTRUE 2414
2376: LD_INT 8
2378: DOUBLE
2379: EQUAL
2380: IFTRUE 2414
2382: LD_INT 4
2384: DOUBLE
2385: EQUAL
2386: IFTRUE 2414
2388: LD_INT 5
2390: DOUBLE
2391: EQUAL
2392: IFTRUE 2414
2394: LD_INT 2
2396: DOUBLE
2397: EQUAL
2398: IFTRUE 2414
2400: LD_INT 3
2402: DOUBLE
2403: EQUAL
2404: IFTRUE 2414
2406: LD_INT 35
2408: DOUBLE
2409: EQUAL
2410: IFTRUE 2414
2412: GO 2425
2414: POP
// places := 6 ; b_bunker , b_breastwork :
2415: LD_ADDR_VAR 0 3
2419: PUSH
2420: LD_INT 6
2422: ST_TO_ADDR
2423: GO 2470
2425: LD_INT 32
2427: DOUBLE
2428: EQUAL
2429: IFTRUE 2439
2431: LD_INT 31
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2450
2439: POP
// places := 1 ; b_control_tower :
2440: LD_ADDR_VAR 0 3
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
2448: GO 2470
2450: LD_INT 36
2452: DOUBLE
2453: EQUAL
2454: IFTRUE 2458
2456: GO 2469
2458: POP
// places := 3 ; end ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_INT 3
2466: ST_TO_ADDR
2467: GO 2470
2469: POP
// if places then
2470: LD_VAR 0 3
2474: IFFALSE 2497
// result := UnitsInside ( building ) < places ;
2476: LD_ADDR_VAR 0 2
2480: PUSH
2481: LD_VAR 0 1
2485: PPUSH
2486: CALL_OW 313
2490: PUSH
2491: LD_VAR 0 3
2495: LESS
2496: ST_TO_ADDR
// end ;
2497: LD_VAR 0 2
2501: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
2506: PPUSH
2507: PPUSH
// tmp := [ ] ;
2508: LD_ADDR_VAR 0 3
2512: PUSH
2513: EMPTY
2514: ST_TO_ADDR
// list := [ ] ;
2515: LD_ADDR_VAR 0 5
2519: PUSH
2520: EMPTY
2521: ST_TO_ADDR
// for i = 16 to 25 do
2522: LD_ADDR_VAR 0 4
2526: PUSH
2527: DOUBLE
2528: LD_INT 16
2530: DEC
2531: ST_TO_ADDR
2532: LD_INT 25
2534: PUSH
2535: FOR_TO
2536: IFFALSE 2609
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2538: LD_ADDR_VAR 0 3
2542: PUSH
2543: LD_VAR 0 3
2547: PUSH
2548: LD_INT 22
2550: PUSH
2551: LD_VAR 0 1
2555: PPUSH
2556: CALL_OW 255
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: PUSH
2565: LD_INT 91
2567: PUSH
2568: LD_VAR 0 1
2572: PUSH
2573: LD_INT 6
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 30
2583: PUSH
2584: LD_VAR 0 4
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: PUSH
2598: EMPTY
2599: LIST
2600: PPUSH
2601: CALL_OW 69
2605: ADD
2606: ST_TO_ADDR
2607: GO 2535
2609: POP
2610: POP
// for i = 1 to tmp do
2611: LD_ADDR_VAR 0 4
2615: PUSH
2616: DOUBLE
2617: LD_INT 1
2619: DEC
2620: ST_TO_ADDR
2621: LD_VAR 0 3
2625: PUSH
2626: FOR_TO
2627: IFFALSE 2715
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2629: LD_ADDR_VAR 0 5
2633: PUSH
2634: LD_VAR 0 5
2638: PUSH
2639: LD_VAR 0 3
2643: PUSH
2644: LD_VAR 0 4
2648: ARRAY
2649: PPUSH
2650: CALL_OW 266
2654: PUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_VAR 0 4
2664: ARRAY
2665: PPUSH
2666: CALL_OW 250
2670: PUSH
2671: LD_VAR 0 3
2675: PUSH
2676: LD_VAR 0 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 251
2686: PUSH
2687: LD_VAR 0 3
2691: PUSH
2692: LD_VAR 0 4
2696: ARRAY
2697: PPUSH
2698: CALL_OW 254
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: EMPTY
2710: LIST
2711: ADD
2712: ST_TO_ADDR
2713: GO 2626
2715: POP
2716: POP
// result := list ;
2717: LD_ADDR_VAR 0 2
2721: PUSH
2722: LD_VAR 0 5
2726: ST_TO_ADDR
// end ;
2727: LD_VAR 0 2
2731: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2732: LD_INT 0
2734: PPUSH
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
// if not factory then
2741: LD_VAR 0 1
2745: NOT
2746: IFFALSE 2750
// exit ;
2748: GO 3343
// if control = control_apeman then
2750: LD_VAR 0 4
2754: PUSH
2755: LD_INT 5
2757: EQUAL
2758: IFFALSE 2867
// begin tmp := UnitsInside ( factory ) ;
2760: LD_ADDR_VAR 0 8
2764: PUSH
2765: LD_VAR 0 1
2769: PPUSH
2770: CALL_OW 313
2774: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2775: LD_VAR 0 8
2779: PPUSH
2780: LD_INT 25
2782: PUSH
2783: LD_INT 12
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PPUSH
2790: CALL_OW 72
2794: NOT
2795: IFFALSE 2805
// control := control_manual ;
2797: LD_ADDR_VAR 0 4
2801: PUSH
2802: LD_INT 1
2804: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2805: LD_ADDR_VAR 0 8
2809: PUSH
2810: LD_VAR 0 1
2814: PPUSH
2815: CALL 2502 0 1
2819: ST_TO_ADDR
// if tmp then
2820: LD_VAR 0 8
2824: IFFALSE 2867
// begin for i in tmp do
2826: LD_ADDR_VAR 0 7
2830: PUSH
2831: LD_VAR 0 8
2835: PUSH
2836: FOR_IN
2837: IFFALSE 2865
// if i [ 1 ] = b_ext_radio then
2839: LD_VAR 0 7
2843: PUSH
2844: LD_INT 1
2846: ARRAY
2847: PUSH
2848: LD_INT 22
2850: EQUAL
2851: IFFALSE 2863
// begin control := control_remote ;
2853: LD_ADDR_VAR 0 4
2857: PUSH
2858: LD_INT 2
2860: ST_TO_ADDR
// break ;
2861: GO 2865
// end ;
2863: GO 2836
2865: POP
2866: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2867: LD_VAR 0 1
2871: PPUSH
2872: LD_VAR 0 2
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: LD_VAR 0 4
2886: PPUSH
2887: LD_VAR 0 5
2891: PPUSH
2892: CALL_OW 448
2896: IFFALSE 2931
// begin result := [ chassis , engine , control , weapon ] ;
2898: LD_ADDR_VAR 0 6
2902: PUSH
2903: LD_VAR 0 2
2907: PUSH
2908: LD_VAR 0 3
2912: PUSH
2913: LD_VAR 0 4
2917: PUSH
2918: LD_VAR 0 5
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: LIST
2927: LIST
2928: ST_TO_ADDR
// exit ;
2929: GO 3343
// end ; _chassis := AvailableChassisList ( factory ) ;
2931: LD_ADDR_VAR 0 9
2935: PUSH
2936: LD_VAR 0 1
2940: PPUSH
2941: CALL_OW 475
2945: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2946: LD_ADDR_VAR 0 11
2950: PUSH
2951: LD_VAR 0 1
2955: PPUSH
2956: CALL_OW 476
2960: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2961: LD_ADDR_VAR 0 12
2965: PUSH
2966: LD_VAR 0 1
2970: PPUSH
2971: CALL_OW 477
2975: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2976: LD_ADDR_VAR 0 10
2980: PUSH
2981: LD_VAR 0 1
2985: PPUSH
2986: CALL_OW 478
2990: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
2991: LD_VAR 0 9
2995: NOT
2996: PUSH
2997: LD_VAR 0 11
3001: NOT
3002: OR
3003: PUSH
3004: LD_VAR 0 12
3008: NOT
3009: OR
3010: PUSH
3011: LD_VAR 0 10
3015: NOT
3016: OR
3017: IFFALSE 3052
// begin result := [ chassis , engine , control , weapon ] ;
3019: LD_ADDR_VAR 0 6
3023: PUSH
3024: LD_VAR 0 2
3028: PUSH
3029: LD_VAR 0 3
3033: PUSH
3034: LD_VAR 0 4
3038: PUSH
3039: LD_VAR 0 5
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: ST_TO_ADDR
// exit ;
3050: GO 3343
// end ; if not chassis in _chassis then
3052: LD_VAR 0 2
3056: PUSH
3057: LD_VAR 0 9
3061: IN
3062: NOT
3063: IFFALSE 3089
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3065: LD_ADDR_VAR 0 2
3069: PUSH
3070: LD_VAR 0 9
3074: PUSH
3075: LD_INT 1
3077: PPUSH
3078: LD_VAR 0 9
3082: PPUSH
3083: CALL_OW 12
3087: ARRAY
3088: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_VAR 0 3
3098: PPUSH
3099: CALL 3348 0 2
3103: NOT
3104: IFFALSE 3163
// repeat engine := _engine [ 1 ] ;
3106: LD_ADDR_VAR 0 3
3110: PUSH
3111: LD_VAR 0 11
3115: PUSH
3116: LD_INT 1
3118: ARRAY
3119: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3120: LD_ADDR_VAR 0 11
3124: PUSH
3125: LD_VAR 0 11
3129: PPUSH
3130: LD_INT 1
3132: PPUSH
3133: CALL_OW 3
3137: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3138: LD_VAR 0 2
3142: PPUSH
3143: LD_VAR 0 3
3147: PPUSH
3148: CALL 3348 0 2
3152: PUSH
3153: LD_VAR 0 11
3157: PUSH
3158: EMPTY
3159: EQUAL
3160: OR
3161: IFFALSE 3106
// if not control in _control then
3163: LD_VAR 0 4
3167: PUSH
3168: LD_VAR 0 12
3172: IN
3173: NOT
3174: IFFALSE 3200
// control := _control [ rand ( 1 , _control ) ] ;
3176: LD_ADDR_VAR 0 4
3180: PUSH
3181: LD_VAR 0 12
3185: PUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_VAR 0 12
3193: PPUSH
3194: CALL_OW 12
3198: ARRAY
3199: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3200: LD_VAR 0 2
3204: PPUSH
3205: LD_VAR 0 5
3209: PPUSH
3210: CALL 3568 0 2
3214: NOT
3215: IFFALSE 3274
// repeat weapon := _weapon [ 1 ] ;
3217: LD_ADDR_VAR 0 5
3221: PUSH
3222: LD_VAR 0 10
3226: PUSH
3227: LD_INT 1
3229: ARRAY
3230: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3231: LD_ADDR_VAR 0 10
3235: PUSH
3236: LD_VAR 0 10
3240: PPUSH
3241: LD_INT 1
3243: PPUSH
3244: CALL_OW 3
3248: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3249: LD_VAR 0 2
3253: PPUSH
3254: LD_VAR 0 5
3258: PPUSH
3259: CALL 3568 0 2
3263: PUSH
3264: LD_VAR 0 10
3268: PUSH
3269: EMPTY
3270: EQUAL
3271: OR
3272: IFFALSE 3217
// result := [ ] ;
3274: LD_ADDR_VAR 0 6
3278: PUSH
3279: EMPTY
3280: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3281: LD_VAR 0 1
3285: PPUSH
3286: LD_VAR 0 2
3290: PPUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_VAR 0 4
3300: PPUSH
3301: LD_VAR 0 5
3305: PPUSH
3306: CALL_OW 448
3310: IFFALSE 3343
// result := [ chassis , engine , control , weapon ] ;
3312: LD_ADDR_VAR 0 6
3316: PUSH
3317: LD_VAR 0 2
3321: PUSH
3322: LD_VAR 0 3
3326: PUSH
3327: LD_VAR 0 4
3331: PUSH
3332: LD_VAR 0 5
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: ST_TO_ADDR
// end ;
3343: LD_VAR 0 6
3347: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3348: LD_INT 0
3350: PPUSH
// if not chassis or not engine then
3351: LD_VAR 0 1
3355: NOT
3356: PUSH
3357: LD_VAR 0 2
3361: NOT
3362: OR
3363: IFFALSE 3367
// exit ;
3365: GO 3563
// case engine of engine_solar :
3367: LD_VAR 0 2
3371: PUSH
3372: LD_INT 2
3374: DOUBLE
3375: EQUAL
3376: IFTRUE 3380
3378: GO 3418
3380: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3381: LD_ADDR_VAR 0 3
3385: PUSH
3386: LD_INT 11
3388: PUSH
3389: LD_INT 12
3391: PUSH
3392: LD_INT 13
3394: PUSH
3395: LD_INT 14
3397: PUSH
3398: LD_INT 1
3400: PUSH
3401: LD_INT 2
3403: PUSH
3404: LD_INT 3
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: ST_TO_ADDR
3416: GO 3547
3418: LD_INT 1
3420: DOUBLE
3421: EQUAL
3422: IFTRUE 3426
3424: GO 3488
3426: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3427: LD_ADDR_VAR 0 3
3431: PUSH
3432: LD_INT 11
3434: PUSH
3435: LD_INT 12
3437: PUSH
3438: LD_INT 13
3440: PUSH
3441: LD_INT 14
3443: PUSH
3444: LD_INT 1
3446: PUSH
3447: LD_INT 2
3449: PUSH
3450: LD_INT 3
3452: PUSH
3453: LD_INT 4
3455: PUSH
3456: LD_INT 5
3458: PUSH
3459: LD_INT 21
3461: PUSH
3462: LD_INT 23
3464: PUSH
3465: LD_INT 22
3467: PUSH
3468: LD_INT 24
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: ST_TO_ADDR
3486: GO 3547
3488: LD_INT 3
3490: DOUBLE
3491: EQUAL
3492: IFTRUE 3496
3494: GO 3546
3496: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3497: LD_ADDR_VAR 0 3
3501: PUSH
3502: LD_INT 13
3504: PUSH
3505: LD_INT 14
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: LD_INT 3
3513: PUSH
3514: LD_INT 4
3516: PUSH
3517: LD_INT 5
3519: PUSH
3520: LD_INT 21
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 23
3528: PUSH
3529: LD_INT 24
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: ST_TO_ADDR
3544: GO 3547
3546: POP
// result := ( chassis in result ) ;
3547: LD_ADDR_VAR 0 3
3551: PUSH
3552: LD_VAR 0 1
3556: PUSH
3557: LD_VAR 0 3
3561: IN
3562: ST_TO_ADDR
// end ;
3563: LD_VAR 0 3
3567: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3568: LD_INT 0
3570: PPUSH
// if not chassis or not weapon then
3571: LD_VAR 0 1
3575: NOT
3576: PUSH
3577: LD_VAR 0 2
3581: NOT
3582: OR
3583: IFFALSE 3587
// exit ;
3585: GO 4647
// case weapon of us_machine_gun :
3587: LD_VAR 0 2
3591: PUSH
3592: LD_INT 2
3594: DOUBLE
3595: EQUAL
3596: IFTRUE 3600
3598: GO 3630
3600: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3601: LD_ADDR_VAR 0 3
3605: PUSH
3606: LD_INT 1
3608: PUSH
3609: LD_INT 2
3611: PUSH
3612: LD_INT 3
3614: PUSH
3615: LD_INT 4
3617: PUSH
3618: LD_INT 5
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: ST_TO_ADDR
3628: GO 4631
3630: LD_INT 3
3632: DOUBLE
3633: EQUAL
3634: IFTRUE 3638
3636: GO 3668
3638: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3639: LD_ADDR_VAR 0 3
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: LD_INT 2
3649: PUSH
3650: LD_INT 3
3652: PUSH
3653: LD_INT 4
3655: PUSH
3656: LD_INT 5
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: ST_TO_ADDR
3666: GO 4631
3668: LD_INT 11
3670: DOUBLE
3671: EQUAL
3672: IFTRUE 3676
3674: GO 3706
3676: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3677: LD_ADDR_VAR 0 3
3681: PUSH
3682: LD_INT 1
3684: PUSH
3685: LD_INT 2
3687: PUSH
3688: LD_INT 3
3690: PUSH
3691: LD_INT 4
3693: PUSH
3694: LD_INT 5
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: ST_TO_ADDR
3704: GO 4631
3706: LD_INT 4
3708: DOUBLE
3709: EQUAL
3710: IFTRUE 3714
3712: GO 3740
3714: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3715: LD_ADDR_VAR 0 3
3719: PUSH
3720: LD_INT 2
3722: PUSH
3723: LD_INT 3
3725: PUSH
3726: LD_INT 4
3728: PUSH
3729: LD_INT 5
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: ST_TO_ADDR
3738: GO 4631
3740: LD_INT 5
3742: DOUBLE
3743: EQUAL
3744: IFTRUE 3748
3746: GO 3774
3748: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3749: LD_ADDR_VAR 0 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: LD_INT 3
3759: PUSH
3760: LD_INT 4
3762: PUSH
3763: LD_INT 5
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: ST_TO_ADDR
3772: GO 4631
3774: LD_INT 9
3776: DOUBLE
3777: EQUAL
3778: IFTRUE 3782
3780: GO 3808
3782: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: LD_INT 2
3790: PUSH
3791: LD_INT 3
3793: PUSH
3794: LD_INT 4
3796: PUSH
3797: LD_INT 5
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: ST_TO_ADDR
3806: GO 4631
3808: LD_INT 7
3810: DOUBLE
3811: EQUAL
3812: IFTRUE 3816
3814: GO 3842
3816: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3817: LD_ADDR_VAR 0 3
3821: PUSH
3822: LD_INT 2
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: LD_INT 4
3830: PUSH
3831: LD_INT 5
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: ST_TO_ADDR
3840: GO 4631
3842: LD_INT 12
3844: DOUBLE
3845: EQUAL
3846: IFTRUE 3850
3848: GO 3876
3850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3851: LD_ADDR_VAR 0 3
3855: PUSH
3856: LD_INT 2
3858: PUSH
3859: LD_INT 3
3861: PUSH
3862: LD_INT 4
3864: PUSH
3865: LD_INT 5
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: ST_TO_ADDR
3874: GO 4631
3876: LD_INT 13
3878: DOUBLE
3879: EQUAL
3880: IFTRUE 3884
3882: GO 3910
3884: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3885: LD_ADDR_VAR 0 3
3889: PUSH
3890: LD_INT 2
3892: PUSH
3893: LD_INT 3
3895: PUSH
3896: LD_INT 4
3898: PUSH
3899: LD_INT 5
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: ST_TO_ADDR
3908: GO 4631
3910: LD_INT 14
3912: DOUBLE
3913: EQUAL
3914: IFTRUE 3918
3916: GO 3936
3918: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3919: LD_ADDR_VAR 0 3
3923: PUSH
3924: LD_INT 4
3926: PUSH
3927: LD_INT 5
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: ST_TO_ADDR
3934: GO 4631
3936: LD_INT 6
3938: DOUBLE
3939: EQUAL
3940: IFTRUE 3944
3942: GO 3962
3944: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3945: LD_ADDR_VAR 0 3
3949: PUSH
3950: LD_INT 4
3952: PUSH
3953: LD_INT 5
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: ST_TO_ADDR
3960: GO 4631
3962: LD_INT 10
3964: DOUBLE
3965: EQUAL
3966: IFTRUE 3970
3968: GO 3988
3970: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3971: LD_ADDR_VAR 0 3
3975: PUSH
3976: LD_INT 4
3978: PUSH
3979: LD_INT 5
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: ST_TO_ADDR
3986: GO 4631
3988: LD_INT 22
3990: DOUBLE
3991: EQUAL
3992: IFTRUE 3996
3994: GO 4022
3996: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_INT 11
4004: PUSH
4005: LD_INT 12
4007: PUSH
4008: LD_INT 13
4010: PUSH
4011: LD_INT 14
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: ST_TO_ADDR
4020: GO 4631
4022: LD_INT 23
4024: DOUBLE
4025: EQUAL
4026: IFTRUE 4030
4028: GO 4056
4030: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4031: LD_ADDR_VAR 0 3
4035: PUSH
4036: LD_INT 11
4038: PUSH
4039: LD_INT 12
4041: PUSH
4042: LD_INT 13
4044: PUSH
4045: LD_INT 14
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: ST_TO_ADDR
4054: GO 4631
4056: LD_INT 24
4058: DOUBLE
4059: EQUAL
4060: IFTRUE 4064
4062: GO 4090
4064: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4065: LD_ADDR_VAR 0 3
4069: PUSH
4070: LD_INT 11
4072: PUSH
4073: LD_INT 12
4075: PUSH
4076: LD_INT 13
4078: PUSH
4079: LD_INT 14
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: ST_TO_ADDR
4088: GO 4631
4090: LD_INT 30
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4098
4096: GO 4124
4098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4099: LD_ADDR_VAR 0 3
4103: PUSH
4104: LD_INT 11
4106: PUSH
4107: LD_INT 12
4109: PUSH
4110: LD_INT 13
4112: PUSH
4113: LD_INT 14
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: ST_TO_ADDR
4122: GO 4631
4124: LD_INT 25
4126: DOUBLE
4127: EQUAL
4128: IFTRUE 4132
4130: GO 4150
4132: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: LD_INT 13
4140: PUSH
4141: LD_INT 14
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: ST_TO_ADDR
4148: GO 4631
4150: LD_INT 27
4152: DOUBLE
4153: EQUAL
4154: IFTRUE 4158
4156: GO 4176
4158: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4159: LD_ADDR_VAR 0 3
4163: PUSH
4164: LD_INT 13
4166: PUSH
4167: LD_INT 14
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: ST_TO_ADDR
4174: GO 4631
4176: LD_INT 92
4178: DOUBLE
4179: EQUAL
4180: IFTRUE 4184
4182: GO 4210
4184: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4185: LD_ADDR_VAR 0 3
4189: PUSH
4190: LD_INT 11
4192: PUSH
4193: LD_INT 12
4195: PUSH
4196: LD_INT 13
4198: PUSH
4199: LD_INT 14
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: ST_TO_ADDR
4208: GO 4631
4210: LD_INT 28
4212: DOUBLE
4213: EQUAL
4214: IFTRUE 4218
4216: GO 4236
4218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4219: LD_ADDR_VAR 0 3
4223: PUSH
4224: LD_INT 13
4226: PUSH
4227: LD_INT 14
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: ST_TO_ADDR
4234: GO 4631
4236: LD_INT 29
4238: DOUBLE
4239: EQUAL
4240: IFTRUE 4244
4242: GO 4262
4244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4245: LD_ADDR_VAR 0 3
4249: PUSH
4250: LD_INT 13
4252: PUSH
4253: LD_INT 14
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: ST_TO_ADDR
4260: GO 4631
4262: LD_INT 31
4264: DOUBLE
4265: EQUAL
4266: IFTRUE 4270
4268: GO 4288
4270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4271: LD_ADDR_VAR 0 3
4275: PUSH
4276: LD_INT 13
4278: PUSH
4279: LD_INT 14
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: ST_TO_ADDR
4286: GO 4631
4288: LD_INT 26
4290: DOUBLE
4291: EQUAL
4292: IFTRUE 4296
4294: GO 4314
4296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4297: LD_ADDR_VAR 0 3
4301: PUSH
4302: LD_INT 13
4304: PUSH
4305: LD_INT 14
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: ST_TO_ADDR
4312: GO 4631
4314: LD_INT 42
4316: DOUBLE
4317: EQUAL
4318: IFTRUE 4322
4320: GO 4348
4322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4323: LD_ADDR_VAR 0 3
4327: PUSH
4328: LD_INT 21
4330: PUSH
4331: LD_INT 22
4333: PUSH
4334: LD_INT 23
4336: PUSH
4337: LD_INT 24
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: ST_TO_ADDR
4346: GO 4631
4348: LD_INT 43
4350: DOUBLE
4351: EQUAL
4352: IFTRUE 4356
4354: GO 4382
4356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4357: LD_ADDR_VAR 0 3
4361: PUSH
4362: LD_INT 21
4364: PUSH
4365: LD_INT 22
4367: PUSH
4368: LD_INT 23
4370: PUSH
4371: LD_INT 24
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: ST_TO_ADDR
4380: GO 4631
4382: LD_INT 44
4384: DOUBLE
4385: EQUAL
4386: IFTRUE 4390
4388: GO 4416
4390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4391: LD_ADDR_VAR 0 3
4395: PUSH
4396: LD_INT 21
4398: PUSH
4399: LD_INT 22
4401: PUSH
4402: LD_INT 23
4404: PUSH
4405: LD_INT 24
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: ST_TO_ADDR
4414: GO 4631
4416: LD_INT 45
4418: DOUBLE
4419: EQUAL
4420: IFTRUE 4424
4422: GO 4450
4424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4425: LD_ADDR_VAR 0 3
4429: PUSH
4430: LD_INT 21
4432: PUSH
4433: LD_INT 22
4435: PUSH
4436: LD_INT 23
4438: PUSH
4439: LD_INT 24
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: ST_TO_ADDR
4448: GO 4631
4450: LD_INT 49
4452: DOUBLE
4453: EQUAL
4454: IFTRUE 4458
4456: GO 4484
4458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4459: LD_ADDR_VAR 0 3
4463: PUSH
4464: LD_INT 21
4466: PUSH
4467: LD_INT 22
4469: PUSH
4470: LD_INT 23
4472: PUSH
4473: LD_INT 24
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: ST_TO_ADDR
4482: GO 4631
4484: LD_INT 51
4486: DOUBLE
4487: EQUAL
4488: IFTRUE 4492
4490: GO 4518
4492: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4493: LD_ADDR_VAR 0 3
4497: PUSH
4498: LD_INT 21
4500: PUSH
4501: LD_INT 22
4503: PUSH
4504: LD_INT 23
4506: PUSH
4507: LD_INT 24
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: ST_TO_ADDR
4516: GO 4631
4518: LD_INT 52
4520: DOUBLE
4521: EQUAL
4522: IFTRUE 4526
4524: GO 4552
4526: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4527: LD_ADDR_VAR 0 3
4531: PUSH
4532: LD_INT 21
4534: PUSH
4535: LD_INT 22
4537: PUSH
4538: LD_INT 23
4540: PUSH
4541: LD_INT 24
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: ST_TO_ADDR
4550: GO 4631
4552: LD_INT 53
4554: DOUBLE
4555: EQUAL
4556: IFTRUE 4560
4558: GO 4578
4560: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4561: LD_ADDR_VAR 0 3
4565: PUSH
4566: LD_INT 23
4568: PUSH
4569: LD_INT 24
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: ST_TO_ADDR
4576: GO 4631
4578: LD_INT 46
4580: DOUBLE
4581: EQUAL
4582: IFTRUE 4586
4584: GO 4604
4586: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4587: LD_ADDR_VAR 0 3
4591: PUSH
4592: LD_INT 23
4594: PUSH
4595: LD_INT 24
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: ST_TO_ADDR
4602: GO 4631
4604: LD_INT 47
4606: DOUBLE
4607: EQUAL
4608: IFTRUE 4612
4610: GO 4630
4612: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4613: LD_ADDR_VAR 0 3
4617: PUSH
4618: LD_INT 23
4620: PUSH
4621: LD_INT 24
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: ST_TO_ADDR
4628: GO 4631
4630: POP
// result := ( chassis in result ) ;
4631: LD_ADDR_VAR 0 3
4635: PUSH
4636: LD_VAR 0 1
4640: PUSH
4641: LD_VAR 0 3
4645: IN
4646: ST_TO_ADDR
// end ;
4647: LD_VAR 0 3
4651: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4652: LD_INT 0
4654: PPUSH
4655: PPUSH
4656: PPUSH
4657: PPUSH
4658: PPUSH
4659: PPUSH
4660: PPUSH
// result := array ;
4661: LD_ADDR_VAR 0 5
4665: PUSH
4666: LD_VAR 0 1
4670: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4671: LD_VAR 0 1
4675: NOT
4676: PUSH
4677: LD_VAR 0 2
4681: NOT
4682: OR
4683: PUSH
4684: LD_VAR 0 3
4688: NOT
4689: OR
4690: PUSH
4691: LD_VAR 0 2
4695: PUSH
4696: LD_VAR 0 1
4700: GREATER
4701: OR
4702: PUSH
4703: LD_VAR 0 3
4707: PUSH
4708: LD_VAR 0 1
4712: GREATER
4713: OR
4714: IFFALSE 4718
// exit ;
4716: GO 5014
// if direction then
4718: LD_VAR 0 4
4722: IFFALSE 4786
// begin d := 1 ;
4724: LD_ADDR_VAR 0 9
4728: PUSH
4729: LD_INT 1
4731: ST_TO_ADDR
// if i_from > i_to then
4732: LD_VAR 0 2
4736: PUSH
4737: LD_VAR 0 3
4741: GREATER
4742: IFFALSE 4768
// length := ( array - i_from ) + i_to else
4744: LD_ADDR_VAR 0 11
4748: PUSH
4749: LD_VAR 0 1
4753: PUSH
4754: LD_VAR 0 2
4758: MINUS
4759: PUSH
4760: LD_VAR 0 3
4764: PLUS
4765: ST_TO_ADDR
4766: GO 4784
// length := i_to - i_from ;
4768: LD_ADDR_VAR 0 11
4772: PUSH
4773: LD_VAR 0 3
4777: PUSH
4778: LD_VAR 0 2
4782: MINUS
4783: ST_TO_ADDR
// end else
4784: GO 4847
// begin d := - 1 ;
4786: LD_ADDR_VAR 0 9
4790: PUSH
4791: LD_INT 1
4793: NEG
4794: ST_TO_ADDR
// if i_from > i_to then
4795: LD_VAR 0 2
4799: PUSH
4800: LD_VAR 0 3
4804: GREATER
4805: IFFALSE 4825
// length := i_from - i_to else
4807: LD_ADDR_VAR 0 11
4811: PUSH
4812: LD_VAR 0 2
4816: PUSH
4817: LD_VAR 0 3
4821: MINUS
4822: ST_TO_ADDR
4823: GO 4847
// length := ( array - i_to ) + i_from ;
4825: LD_ADDR_VAR 0 11
4829: PUSH
4830: LD_VAR 0 1
4834: PUSH
4835: LD_VAR 0 3
4839: MINUS
4840: PUSH
4841: LD_VAR 0 2
4845: PLUS
4846: ST_TO_ADDR
// end ; if not length then
4847: LD_VAR 0 11
4851: NOT
4852: IFFALSE 4856
// exit ;
4854: GO 5014
// tmp := array ;
4856: LD_ADDR_VAR 0 10
4860: PUSH
4861: LD_VAR 0 1
4865: ST_TO_ADDR
// for i = 1 to length do
4866: LD_ADDR_VAR 0 6
4870: PUSH
4871: DOUBLE
4872: LD_INT 1
4874: DEC
4875: ST_TO_ADDR
4876: LD_VAR 0 11
4880: PUSH
4881: FOR_TO
4882: IFFALSE 5002
// begin for j = 1 to array do
4884: LD_ADDR_VAR 0 7
4888: PUSH
4889: DOUBLE
4890: LD_INT 1
4892: DEC
4893: ST_TO_ADDR
4894: LD_VAR 0 1
4898: PUSH
4899: FOR_TO
4900: IFFALSE 4988
// begin k := j + d ;
4902: LD_ADDR_VAR 0 8
4906: PUSH
4907: LD_VAR 0 7
4911: PUSH
4912: LD_VAR 0 9
4916: PLUS
4917: ST_TO_ADDR
// if k > array then
4918: LD_VAR 0 8
4922: PUSH
4923: LD_VAR 0 1
4927: GREATER
4928: IFFALSE 4938
// k := 1 ;
4930: LD_ADDR_VAR 0 8
4934: PUSH
4935: LD_INT 1
4937: ST_TO_ADDR
// if not k then
4938: LD_VAR 0 8
4942: NOT
4943: IFFALSE 4955
// k := array ;
4945: LD_ADDR_VAR 0 8
4949: PUSH
4950: LD_VAR 0 1
4954: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4955: LD_ADDR_VAR 0 10
4959: PUSH
4960: LD_VAR 0 10
4964: PPUSH
4965: LD_VAR 0 8
4969: PPUSH
4970: LD_VAR 0 1
4974: PUSH
4975: LD_VAR 0 7
4979: ARRAY
4980: PPUSH
4981: CALL_OW 1
4985: ST_TO_ADDR
// end ;
4986: GO 4899
4988: POP
4989: POP
// array := tmp ;
4990: LD_ADDR_VAR 0 1
4994: PUSH
4995: LD_VAR 0 10
4999: ST_TO_ADDR
// end ;
5000: GO 4881
5002: POP
5003: POP
// result := array ;
5004: LD_ADDR_VAR 0 5
5008: PUSH
5009: LD_VAR 0 1
5013: ST_TO_ADDR
// end ;
5014: LD_VAR 0 5
5018: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5019: LD_INT 0
5021: PPUSH
5022: PPUSH
// result := 0 ;
5023: LD_ADDR_VAR 0 3
5027: PUSH
5028: LD_INT 0
5030: ST_TO_ADDR
// if not array or not value in array then
5031: LD_VAR 0 1
5035: NOT
5036: PUSH
5037: LD_VAR 0 2
5041: PUSH
5042: LD_VAR 0 1
5046: IN
5047: NOT
5048: OR
5049: IFFALSE 5053
// exit ;
5051: GO 5107
// for i = 1 to array do
5053: LD_ADDR_VAR 0 4
5057: PUSH
5058: DOUBLE
5059: LD_INT 1
5061: DEC
5062: ST_TO_ADDR
5063: LD_VAR 0 1
5067: PUSH
5068: FOR_TO
5069: IFFALSE 5105
// if value = array [ i ] then
5071: LD_VAR 0 2
5075: PUSH
5076: LD_VAR 0 1
5080: PUSH
5081: LD_VAR 0 4
5085: ARRAY
5086: EQUAL
5087: IFFALSE 5103
// begin result := i ;
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: LD_VAR 0 4
5098: ST_TO_ADDR
// exit ;
5099: POP
5100: POP
5101: GO 5107
// end ;
5103: GO 5068
5105: POP
5106: POP
// end ;
5107: LD_VAR 0 3
5111: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5112: LD_INT 0
5114: PPUSH
// vc_chassis := chassis ;
5115: LD_ADDR_OWVAR 37
5119: PUSH
5120: LD_VAR 0 1
5124: ST_TO_ADDR
// vc_engine := engine ;
5125: LD_ADDR_OWVAR 39
5129: PUSH
5130: LD_VAR 0 2
5134: ST_TO_ADDR
// vc_control := control ;
5135: LD_ADDR_OWVAR 38
5139: PUSH
5140: LD_VAR 0 3
5144: ST_TO_ADDR
// vc_weapon := weapon ;
5145: LD_ADDR_OWVAR 40
5149: PUSH
5150: LD_VAR 0 4
5154: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5155: LD_ADDR_OWVAR 41
5159: PUSH
5160: LD_VAR 0 5
5164: ST_TO_ADDR
// end ;
5165: LD_VAR 0 6
5169: RET
// export function WantPlant ( unit ) ; var task ; begin
5170: LD_INT 0
5172: PPUSH
5173: PPUSH
// result := false ;
5174: LD_ADDR_VAR 0 2
5178: PUSH
5179: LD_INT 0
5181: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5182: LD_ADDR_VAR 0 3
5186: PUSH
5187: LD_VAR 0 1
5191: PPUSH
5192: CALL_OW 437
5196: ST_TO_ADDR
// if task then
5197: LD_VAR 0 3
5201: IFFALSE 5229
// if task [ 1 ] [ 1 ] = p then
5203: LD_VAR 0 3
5207: PUSH
5208: LD_INT 1
5210: ARRAY
5211: PUSH
5212: LD_INT 1
5214: ARRAY
5215: PUSH
5216: LD_STRING p
5218: EQUAL
5219: IFFALSE 5229
// result := true ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_INT 1
5228: ST_TO_ADDR
// end ;
5229: LD_VAR 0 2
5233: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5234: LD_INT 0
5236: PPUSH
5237: PPUSH
5238: PPUSH
5239: PPUSH
// if pos < 1 then
5240: LD_VAR 0 2
5244: PUSH
5245: LD_INT 1
5247: LESS
5248: IFFALSE 5252
// exit ;
5250: GO 5555
// if pos = 1 then
5252: LD_VAR 0 2
5256: PUSH
5257: LD_INT 1
5259: EQUAL
5260: IFFALSE 5293
// result := Replace ( arr , pos [ 1 ] , value ) else
5262: LD_ADDR_VAR 0 4
5266: PUSH
5267: LD_VAR 0 1
5271: PPUSH
5272: LD_VAR 0 2
5276: PUSH
5277: LD_INT 1
5279: ARRAY
5280: PPUSH
5281: LD_VAR 0 3
5285: PPUSH
5286: CALL_OW 1
5290: ST_TO_ADDR
5291: GO 5555
// begin tmp := arr ;
5293: LD_ADDR_VAR 0 6
5297: PUSH
5298: LD_VAR 0 1
5302: ST_TO_ADDR
// s_arr := [ tmp ] ;
5303: LD_ADDR_VAR 0 7
5307: PUSH
5308: LD_VAR 0 6
5312: PUSH
5313: EMPTY
5314: LIST
5315: ST_TO_ADDR
// for i = 1 to pos - 1 do
5316: LD_ADDR_VAR 0 5
5320: PUSH
5321: DOUBLE
5322: LD_INT 1
5324: DEC
5325: ST_TO_ADDR
5326: LD_VAR 0 2
5330: PUSH
5331: LD_INT 1
5333: MINUS
5334: PUSH
5335: FOR_TO
5336: IFFALSE 5381
// begin tmp := tmp [ pos [ i ] ] ;
5338: LD_ADDR_VAR 0 6
5342: PUSH
5343: LD_VAR 0 6
5347: PUSH
5348: LD_VAR 0 2
5352: PUSH
5353: LD_VAR 0 5
5357: ARRAY
5358: ARRAY
5359: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5360: LD_ADDR_VAR 0 7
5364: PUSH
5365: LD_VAR 0 7
5369: PUSH
5370: LD_VAR 0 6
5374: PUSH
5375: EMPTY
5376: LIST
5377: ADD
5378: ST_TO_ADDR
// end ;
5379: GO 5335
5381: POP
5382: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5383: LD_ADDR_VAR 0 6
5387: PUSH
5388: LD_VAR 0 6
5392: PPUSH
5393: LD_VAR 0 2
5397: PUSH
5398: LD_VAR 0 2
5402: ARRAY
5403: PPUSH
5404: LD_VAR 0 3
5408: PPUSH
5409: CALL_OW 1
5413: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5414: LD_ADDR_VAR 0 7
5418: PUSH
5419: LD_VAR 0 7
5423: PPUSH
5424: LD_VAR 0 7
5428: PPUSH
5429: LD_VAR 0 6
5433: PPUSH
5434: CALL_OW 1
5438: ST_TO_ADDR
// for i = s_arr downto 2 do
5439: LD_ADDR_VAR 0 5
5443: PUSH
5444: DOUBLE
5445: LD_VAR 0 7
5449: INC
5450: ST_TO_ADDR
5451: LD_INT 2
5453: PUSH
5454: FOR_DOWNTO
5455: IFFALSE 5539
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5457: LD_ADDR_VAR 0 6
5461: PUSH
5462: LD_VAR 0 7
5466: PUSH
5467: LD_VAR 0 5
5471: PUSH
5472: LD_INT 1
5474: MINUS
5475: ARRAY
5476: PPUSH
5477: LD_VAR 0 2
5481: PUSH
5482: LD_VAR 0 5
5486: PUSH
5487: LD_INT 1
5489: MINUS
5490: ARRAY
5491: PPUSH
5492: LD_VAR 0 7
5496: PUSH
5497: LD_VAR 0 5
5501: ARRAY
5502: PPUSH
5503: CALL_OW 1
5507: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5508: LD_ADDR_VAR 0 7
5512: PUSH
5513: LD_VAR 0 7
5517: PPUSH
5518: LD_VAR 0 5
5522: PUSH
5523: LD_INT 1
5525: MINUS
5526: PPUSH
5527: LD_VAR 0 6
5531: PPUSH
5532: CALL_OW 1
5536: ST_TO_ADDR
// end ;
5537: GO 5454
5539: POP
5540: POP
// result := s_arr [ 1 ] ;
5541: LD_ADDR_VAR 0 4
5545: PUSH
5546: LD_VAR 0 7
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: ST_TO_ADDR
// end ; end ;
5555: LD_VAR 0 4
5559: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5560: LD_INT 0
5562: PPUSH
5563: PPUSH
// if not list then
5564: LD_VAR 0 1
5568: NOT
5569: IFFALSE 5573
// exit ;
5571: GO 5664
// i := list [ pos1 ] ;
5573: LD_ADDR_VAR 0 5
5577: PUSH
5578: LD_VAR 0 1
5582: PUSH
5583: LD_VAR 0 2
5587: ARRAY
5588: ST_TO_ADDR
// if not i then
5589: LD_VAR 0 5
5593: NOT
5594: IFFALSE 5598
// exit ;
5596: GO 5664
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5598: LD_ADDR_VAR 0 1
5602: PUSH
5603: LD_VAR 0 1
5607: PPUSH
5608: LD_VAR 0 2
5612: PPUSH
5613: LD_VAR 0 1
5617: PUSH
5618: LD_VAR 0 3
5622: ARRAY
5623: PPUSH
5624: CALL_OW 1
5628: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5629: LD_ADDR_VAR 0 1
5633: PUSH
5634: LD_VAR 0 1
5638: PPUSH
5639: LD_VAR 0 3
5643: PPUSH
5644: LD_VAR 0 5
5648: PPUSH
5649: CALL_OW 1
5653: ST_TO_ADDR
// result := list ;
5654: LD_ADDR_VAR 0 4
5658: PUSH
5659: LD_VAR 0 1
5663: ST_TO_ADDR
// end ;
5664: LD_VAR 0 4
5668: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5669: LD_INT 0
5671: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5672: LD_ADDR_VAR 0 5
5676: PUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 250
5686: PPUSH
5687: LD_VAR 0 1
5691: PPUSH
5692: CALL_OW 251
5696: PPUSH
5697: LD_VAR 0 2
5701: PPUSH
5702: LD_VAR 0 3
5706: PPUSH
5707: LD_VAR 0 4
5711: PPUSH
5712: CALL 5722 0 5
5716: ST_TO_ADDR
// end ;
5717: LD_VAR 0 5
5721: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5722: LD_INT 0
5724: PPUSH
5725: PPUSH
5726: PPUSH
5727: PPUSH
// if not list then
5728: LD_VAR 0 3
5732: NOT
5733: IFFALSE 5737
// exit ;
5735: GO 6125
// result := [ ] ;
5737: LD_ADDR_VAR 0 6
5741: PUSH
5742: EMPTY
5743: ST_TO_ADDR
// for i in list do
5744: LD_ADDR_VAR 0 7
5748: PUSH
5749: LD_VAR 0 3
5753: PUSH
5754: FOR_IN
5755: IFFALSE 5957
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5757: LD_ADDR_VAR 0 9
5761: PUSH
5762: LD_VAR 0 7
5766: PPUSH
5767: LD_VAR 0 1
5771: PPUSH
5772: LD_VAR 0 2
5776: PPUSH
5777: CALL_OW 297
5781: ST_TO_ADDR
// if not result then
5782: LD_VAR 0 6
5786: NOT
5787: IFFALSE 5813
// result := [ [ i , tmp ] ] else
5789: LD_ADDR_VAR 0 6
5793: PUSH
5794: LD_VAR 0 7
5798: PUSH
5799: LD_VAR 0 9
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: ST_TO_ADDR
5811: GO 5955
// begin if result [ result ] [ 2 ] < tmp then
5813: LD_VAR 0 6
5817: PUSH
5818: LD_VAR 0 6
5822: ARRAY
5823: PUSH
5824: LD_INT 2
5826: ARRAY
5827: PUSH
5828: LD_VAR 0 9
5832: LESS
5833: IFFALSE 5875
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5835: LD_ADDR_VAR 0 6
5839: PUSH
5840: LD_VAR 0 6
5844: PPUSH
5845: LD_VAR 0 6
5849: PUSH
5850: LD_INT 1
5852: PLUS
5853: PPUSH
5854: LD_VAR 0 7
5858: PUSH
5859: LD_VAR 0 9
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PPUSH
5868: CALL_OW 2
5872: ST_TO_ADDR
5873: GO 5955
// for j = 1 to result do
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: DOUBLE
5881: LD_INT 1
5883: DEC
5884: ST_TO_ADDR
5885: LD_VAR 0 6
5889: PUSH
5890: FOR_TO
5891: IFFALSE 5953
// begin if tmp < result [ j ] [ 2 ] then
5893: LD_VAR 0 9
5897: PUSH
5898: LD_VAR 0 6
5902: PUSH
5903: LD_VAR 0 8
5907: ARRAY
5908: PUSH
5909: LD_INT 2
5911: ARRAY
5912: LESS
5913: IFFALSE 5951
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5915: LD_ADDR_VAR 0 6
5919: PUSH
5920: LD_VAR 0 6
5924: PPUSH
5925: LD_VAR 0 8
5929: PPUSH
5930: LD_VAR 0 7
5934: PUSH
5935: LD_VAR 0 9
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PPUSH
5944: CALL_OW 2
5948: ST_TO_ADDR
// break ;
5949: GO 5953
// end ; end ;
5951: GO 5890
5953: POP
5954: POP
// end ; end ;
5955: GO 5754
5957: POP
5958: POP
// if result and not asc then
5959: LD_VAR 0 6
5963: PUSH
5964: LD_VAR 0 4
5968: NOT
5969: AND
5970: IFFALSE 6045
// begin tmp := result ;
5972: LD_ADDR_VAR 0 9
5976: PUSH
5977: LD_VAR 0 6
5981: ST_TO_ADDR
// for i = tmp downto 1 do
5982: LD_ADDR_VAR 0 7
5986: PUSH
5987: DOUBLE
5988: LD_VAR 0 9
5992: INC
5993: ST_TO_ADDR
5994: LD_INT 1
5996: PUSH
5997: FOR_DOWNTO
5998: IFFALSE 6043
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6000: LD_ADDR_VAR 0 6
6004: PUSH
6005: LD_VAR 0 6
6009: PPUSH
6010: LD_VAR 0 9
6014: PUSH
6015: LD_VAR 0 7
6019: MINUS
6020: PUSH
6021: LD_INT 1
6023: PLUS
6024: PPUSH
6025: LD_VAR 0 9
6029: PUSH
6030: LD_VAR 0 7
6034: ARRAY
6035: PPUSH
6036: CALL_OW 1
6040: ST_TO_ADDR
6041: GO 5997
6043: POP
6044: POP
// end ; tmp := [ ] ;
6045: LD_ADDR_VAR 0 9
6049: PUSH
6050: EMPTY
6051: ST_TO_ADDR
// if mode then
6052: LD_VAR 0 5
6056: IFFALSE 6125
// begin for i = 1 to result do
6058: LD_ADDR_VAR 0 7
6062: PUSH
6063: DOUBLE
6064: LD_INT 1
6066: DEC
6067: ST_TO_ADDR
6068: LD_VAR 0 6
6072: PUSH
6073: FOR_TO
6074: IFFALSE 6113
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6076: LD_ADDR_VAR 0 9
6080: PUSH
6081: LD_VAR 0 9
6085: PPUSH
6086: LD_VAR 0 7
6090: PPUSH
6091: LD_VAR 0 6
6095: PUSH
6096: LD_VAR 0 7
6100: ARRAY
6101: PUSH
6102: LD_INT 1
6104: ARRAY
6105: PPUSH
6106: CALL_OW 1
6110: ST_TO_ADDR
6111: GO 6073
6113: POP
6114: POP
// result := tmp ;
6115: LD_ADDR_VAR 0 6
6119: PUSH
6120: LD_VAR 0 9
6124: ST_TO_ADDR
// end ; end ;
6125: LD_VAR 0 6
6129: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6130: LD_INT 0
6132: PPUSH
6133: PPUSH
6134: PPUSH
6135: PPUSH
6136: PPUSH
6137: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6138: LD_ADDR_VAR 0 5
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: EMPTY
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: ST_TO_ADDR
// if not x or not y then
6160: LD_VAR 0 2
6164: NOT
6165: PUSH
6166: LD_VAR 0 3
6170: NOT
6171: OR
6172: IFFALSE 6176
// exit ;
6174: GO 7826
// if not range then
6176: LD_VAR 0 4
6180: NOT
6181: IFFALSE 6191
// range := 10 ;
6183: LD_ADDR_VAR 0 4
6187: PUSH
6188: LD_INT 10
6190: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6191: LD_ADDR_VAR 0 8
6195: PUSH
6196: LD_INT 81
6198: PUSH
6199: LD_VAR 0 1
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 92
6210: PUSH
6211: LD_VAR 0 2
6215: PUSH
6216: LD_VAR 0 3
6220: PUSH
6221: LD_VAR 0 4
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: PUSH
6232: LD_INT 3
6234: PUSH
6235: LD_INT 21
6237: PUSH
6238: LD_INT 3
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: PPUSH
6254: CALL_OW 69
6258: ST_TO_ADDR
// if not tmp then
6259: LD_VAR 0 8
6263: NOT
6264: IFFALSE 6268
// exit ;
6266: GO 7826
// for i in tmp do
6268: LD_ADDR_VAR 0 6
6272: PUSH
6273: LD_VAR 0 8
6277: PUSH
6278: FOR_IN
6279: IFFALSE 7801
// begin points := [ 0 , 0 , 0 ] ;
6281: LD_ADDR_VAR 0 9
6285: PUSH
6286: LD_INT 0
6288: PUSH
6289: LD_INT 0
6291: PUSH
6292: LD_INT 0
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: ST_TO_ADDR
// bpoints := 1 ;
6300: LD_ADDR_VAR 0 10
6304: PUSH
6305: LD_INT 1
6307: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6308: LD_VAR 0 6
6312: PPUSH
6313: CALL_OW 247
6317: PUSH
6318: LD_INT 1
6320: DOUBLE
6321: EQUAL
6322: IFTRUE 6326
6324: GO 6904
6326: POP
// begin if GetClass ( i ) = 1 then
6327: LD_VAR 0 6
6331: PPUSH
6332: CALL_OW 257
6336: PUSH
6337: LD_INT 1
6339: EQUAL
6340: IFFALSE 6361
// points := [ 10 , 5 , 3 ] ;
6342: LD_ADDR_VAR 0 9
6346: PUSH
6347: LD_INT 10
6349: PUSH
6350: LD_INT 5
6352: PUSH
6353: LD_INT 3
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6361: LD_VAR 0 6
6365: PPUSH
6366: CALL_OW 257
6370: PUSH
6371: LD_INT 2
6373: PUSH
6374: LD_INT 3
6376: PUSH
6377: LD_INT 4
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: IN
6385: IFFALSE 6406
// points := [ 3 , 2 , 1 ] ;
6387: LD_ADDR_VAR 0 9
6391: PUSH
6392: LD_INT 3
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6406: LD_VAR 0 6
6410: PPUSH
6411: CALL_OW 257
6415: PUSH
6416: LD_INT 5
6418: EQUAL
6419: IFFALSE 6440
// points := [ 130 , 5 , 2 ] ;
6421: LD_ADDR_VAR 0 9
6425: PUSH
6426: LD_INT 130
6428: PUSH
6429: LD_INT 5
6431: PUSH
6432: LD_INT 2
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6440: LD_VAR 0 6
6444: PPUSH
6445: CALL_OW 257
6449: PUSH
6450: LD_INT 8
6452: EQUAL
6453: IFFALSE 6474
// points := [ 35 , 35 , 30 ] ;
6455: LD_ADDR_VAR 0 9
6459: PUSH
6460: LD_INT 35
6462: PUSH
6463: LD_INT 35
6465: PUSH
6466: LD_INT 30
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: LIST
6473: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6474: LD_VAR 0 6
6478: PPUSH
6479: CALL_OW 257
6483: PUSH
6484: LD_INT 9
6486: EQUAL
6487: IFFALSE 6508
// points := [ 20 , 55 , 40 ] ;
6489: LD_ADDR_VAR 0 9
6493: PUSH
6494: LD_INT 20
6496: PUSH
6497: LD_INT 55
6499: PUSH
6500: LD_INT 40
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: LIST
6507: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6508: LD_VAR 0 6
6512: PPUSH
6513: CALL_OW 257
6517: PUSH
6518: LD_INT 12
6520: PUSH
6521: LD_INT 16
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: IN
6528: IFFALSE 6549
// points := [ 5 , 3 , 2 ] ;
6530: LD_ADDR_VAR 0 9
6534: PUSH
6535: LD_INT 5
6537: PUSH
6538: LD_INT 3
6540: PUSH
6541: LD_INT 2
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: LIST
6548: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6549: LD_VAR 0 6
6553: PPUSH
6554: CALL_OW 257
6558: PUSH
6559: LD_INT 17
6561: EQUAL
6562: IFFALSE 6583
// points := [ 100 , 50 , 75 ] ;
6564: LD_ADDR_VAR 0 9
6568: PUSH
6569: LD_INT 100
6571: PUSH
6572: LD_INT 50
6574: PUSH
6575: LD_INT 75
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: LIST
6582: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6583: LD_VAR 0 6
6587: PPUSH
6588: CALL_OW 257
6592: PUSH
6593: LD_INT 15
6595: EQUAL
6596: IFFALSE 6617
// points := [ 10 , 5 , 3 ] ;
6598: LD_ADDR_VAR 0 9
6602: PUSH
6603: LD_INT 10
6605: PUSH
6606: LD_INT 5
6608: PUSH
6609: LD_INT 3
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6617: LD_VAR 0 6
6621: PPUSH
6622: CALL_OW 257
6626: PUSH
6627: LD_INT 14
6629: EQUAL
6630: IFFALSE 6651
// points := [ 10 , 0 , 0 ] ;
6632: LD_ADDR_VAR 0 9
6636: PUSH
6637: LD_INT 10
6639: PUSH
6640: LD_INT 0
6642: PUSH
6643: LD_INT 0
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: LIST
6650: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6651: LD_VAR 0 6
6655: PPUSH
6656: CALL_OW 257
6660: PUSH
6661: LD_INT 11
6663: EQUAL
6664: IFFALSE 6685
// points := [ 30 , 10 , 5 ] ;
6666: LD_ADDR_VAR 0 9
6670: PUSH
6671: LD_INT 30
6673: PUSH
6674: LD_INT 10
6676: PUSH
6677: LD_INT 5
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: LIST
6684: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6685: LD_VAR 0 1
6689: PPUSH
6690: LD_INT 5
6692: PPUSH
6693: CALL_OW 321
6697: PUSH
6698: LD_INT 2
6700: EQUAL
6701: IFFALSE 6718
// bpoints := bpoints * 1.8 ;
6703: LD_ADDR_VAR 0 10
6707: PUSH
6708: LD_VAR 0 10
6712: PUSH
6713: LD_REAL  1.80000000000000E+0000
6716: MUL
6717: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6718: LD_VAR 0 6
6722: PPUSH
6723: CALL_OW 257
6727: PUSH
6728: LD_INT 1
6730: PUSH
6731: LD_INT 2
6733: PUSH
6734: LD_INT 3
6736: PUSH
6737: LD_INT 4
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: IN
6746: PUSH
6747: LD_VAR 0 1
6751: PPUSH
6752: LD_INT 51
6754: PPUSH
6755: CALL_OW 321
6759: PUSH
6760: LD_INT 2
6762: EQUAL
6763: AND
6764: IFFALSE 6781
// bpoints := bpoints * 1.2 ;
6766: LD_ADDR_VAR 0 10
6770: PUSH
6771: LD_VAR 0 10
6775: PUSH
6776: LD_REAL  1.20000000000000E+0000
6779: MUL
6780: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6781: LD_VAR 0 6
6785: PPUSH
6786: CALL_OW 257
6790: PUSH
6791: LD_INT 5
6793: PUSH
6794: LD_INT 7
6796: PUSH
6797: LD_INT 9
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: IN
6805: PUSH
6806: LD_VAR 0 1
6810: PPUSH
6811: LD_INT 52
6813: PPUSH
6814: CALL_OW 321
6818: PUSH
6819: LD_INT 2
6821: EQUAL
6822: AND
6823: IFFALSE 6840
// bpoints := bpoints * 1.5 ;
6825: LD_ADDR_VAR 0 10
6829: PUSH
6830: LD_VAR 0 10
6834: PUSH
6835: LD_REAL  1.50000000000000E+0000
6838: MUL
6839: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6840: LD_VAR 0 1
6844: PPUSH
6845: LD_INT 66
6847: PPUSH
6848: CALL_OW 321
6852: PUSH
6853: LD_INT 2
6855: EQUAL
6856: IFFALSE 6873
// bpoints := bpoints * 1.1 ;
6858: LD_ADDR_VAR 0 10
6862: PUSH
6863: LD_VAR 0 10
6867: PUSH
6868: LD_REAL  1.10000000000000E+0000
6871: MUL
6872: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6873: LD_ADDR_VAR 0 10
6877: PUSH
6878: LD_VAR 0 10
6882: PUSH
6883: LD_VAR 0 6
6887: PPUSH
6888: LD_INT 1
6890: PPUSH
6891: CALL_OW 259
6895: PUSH
6896: LD_REAL  1.15000000000000E+0000
6899: MUL
6900: MUL
6901: ST_TO_ADDR
// end ; unit_vehicle :
6902: GO 7730
6904: LD_INT 2
6906: DOUBLE
6907: EQUAL
6908: IFTRUE 6912
6910: GO 7718
6912: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
6913: LD_VAR 0 6
6917: PPUSH
6918: CALL_OW 264
6922: PUSH
6923: LD_INT 2
6925: PUSH
6926: LD_INT 42
6928: PUSH
6929: LD_INT 24
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: LIST
6936: IN
6937: IFFALSE 6958
// points := [ 25 , 5 , 3 ] ;
6939: LD_ADDR_VAR 0 9
6943: PUSH
6944: LD_INT 25
6946: PUSH
6947: LD_INT 5
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
6958: LD_VAR 0 6
6962: PPUSH
6963: CALL_OW 264
6967: PUSH
6968: LD_INT 4
6970: PUSH
6971: LD_INT 43
6973: PUSH
6974: LD_INT 25
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: LIST
6981: IN
6982: IFFALSE 7003
// points := [ 40 , 15 , 5 ] ;
6984: LD_ADDR_VAR 0 9
6988: PUSH
6989: LD_INT 40
6991: PUSH
6992: LD_INT 15
6994: PUSH
6995: LD_INT 5
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: LIST
7002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7003: LD_VAR 0 6
7007: PPUSH
7008: CALL_OW 264
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: LD_INT 23
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: IN
7023: IFFALSE 7044
// points := [ 7 , 25 , 8 ] ;
7025: LD_ADDR_VAR 0 9
7029: PUSH
7030: LD_INT 7
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 8
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: LIST
7043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7044: LD_VAR 0 6
7048: PPUSH
7049: CALL_OW 264
7053: PUSH
7054: LD_INT 5
7056: PUSH
7057: LD_INT 27
7059: PUSH
7060: LD_INT 44
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: IN
7068: IFFALSE 7089
// points := [ 14 , 50 , 16 ] ;
7070: LD_ADDR_VAR 0 9
7074: PUSH
7075: LD_INT 14
7077: PUSH
7078: LD_INT 50
7080: PUSH
7081: LD_INT 16
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7089: LD_VAR 0 6
7093: PPUSH
7094: CALL_OW 264
7098: PUSH
7099: LD_INT 6
7101: PUSH
7102: LD_INT 46
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: IN
7109: IFFALSE 7130
// points := [ 32 , 120 , 70 ] ;
7111: LD_ADDR_VAR 0 9
7115: PUSH
7116: LD_INT 32
7118: PUSH
7119: LD_INT 120
7121: PUSH
7122: LD_INT 70
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7130: LD_VAR 0 6
7134: PPUSH
7135: CALL_OW 264
7139: PUSH
7140: LD_INT 7
7142: PUSH
7143: LD_INT 28
7145: PUSH
7146: LD_INT 45
7148: PUSH
7149: LD_INT 92
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: IN
7158: IFFALSE 7179
// points := [ 35 , 20 , 45 ] ;
7160: LD_ADDR_VAR 0 9
7164: PUSH
7165: LD_INT 35
7167: PUSH
7168: LD_INT 20
7170: PUSH
7171: LD_INT 45
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7179: LD_VAR 0 6
7183: PPUSH
7184: CALL_OW 264
7188: PUSH
7189: LD_INT 47
7191: PUSH
7192: EMPTY
7193: LIST
7194: IN
7195: IFFALSE 7216
// points := [ 67 , 45 , 75 ] ;
7197: LD_ADDR_VAR 0 9
7201: PUSH
7202: LD_INT 67
7204: PUSH
7205: LD_INT 45
7207: PUSH
7208: LD_INT 75
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: LIST
7215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7216: LD_VAR 0 6
7220: PPUSH
7221: CALL_OW 264
7225: PUSH
7226: LD_INT 26
7228: PUSH
7229: EMPTY
7230: LIST
7231: IN
7232: IFFALSE 7253
// points := [ 120 , 30 , 80 ] ;
7234: LD_ADDR_VAR 0 9
7238: PUSH
7239: LD_INT 120
7241: PUSH
7242: LD_INT 30
7244: PUSH
7245: LD_INT 80
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7253: LD_VAR 0 6
7257: PPUSH
7258: CALL_OW 264
7262: PUSH
7263: LD_INT 22
7265: PUSH
7266: EMPTY
7267: LIST
7268: IN
7269: IFFALSE 7290
// points := [ 40 , 1 , 1 ] ;
7271: LD_ADDR_VAR 0 9
7275: PUSH
7276: LD_INT 40
7278: PUSH
7279: LD_INT 1
7281: PUSH
7282: LD_INT 1
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7290: LD_VAR 0 6
7294: PPUSH
7295: CALL_OW 264
7299: PUSH
7300: LD_INT 29
7302: PUSH
7303: EMPTY
7304: LIST
7305: IN
7306: IFFALSE 7327
// points := [ 70 , 200 , 400 ] ;
7308: LD_ADDR_VAR 0 9
7312: PUSH
7313: LD_INT 70
7315: PUSH
7316: LD_INT 200
7318: PUSH
7319: LD_INT 400
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7327: LD_VAR 0 6
7331: PPUSH
7332: CALL_OW 264
7336: PUSH
7337: LD_INT 14
7339: PUSH
7340: LD_INT 53
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: IN
7347: IFFALSE 7368
// points := [ 40 , 10 , 20 ] ;
7349: LD_ADDR_VAR 0 9
7353: PUSH
7354: LD_INT 40
7356: PUSH
7357: LD_INT 10
7359: PUSH
7360: LD_INT 20
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: LIST
7367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7368: LD_VAR 0 6
7372: PPUSH
7373: CALL_OW 264
7377: PUSH
7378: LD_INT 9
7380: PUSH
7381: EMPTY
7382: LIST
7383: IN
7384: IFFALSE 7405
// points := [ 5 , 70 , 20 ] ;
7386: LD_ADDR_VAR 0 9
7390: PUSH
7391: LD_INT 5
7393: PUSH
7394: LD_INT 70
7396: PUSH
7397: LD_INT 20
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7405: LD_VAR 0 6
7409: PPUSH
7410: CALL_OW 264
7414: PUSH
7415: LD_INT 10
7417: PUSH
7418: EMPTY
7419: LIST
7420: IN
7421: IFFALSE 7442
// points := [ 35 , 110 , 70 ] ;
7423: LD_ADDR_VAR 0 9
7427: PUSH
7428: LD_INT 35
7430: PUSH
7431: LD_INT 110
7433: PUSH
7434: LD_INT 70
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7442: LD_VAR 0 6
7446: PPUSH
7447: CALL_OW 265
7451: PUSH
7452: LD_INT 25
7454: EQUAL
7455: IFFALSE 7476
// points := [ 80 , 65 , 100 ] ;
7457: LD_ADDR_VAR 0 9
7461: PUSH
7462: LD_INT 80
7464: PUSH
7465: LD_INT 65
7467: PUSH
7468: LD_INT 100
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7476: LD_VAR 0 6
7480: PPUSH
7481: CALL_OW 263
7485: PUSH
7486: LD_INT 1
7488: EQUAL
7489: IFFALSE 7524
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7491: LD_ADDR_VAR 0 10
7495: PUSH
7496: LD_VAR 0 10
7500: PUSH
7501: LD_VAR 0 6
7505: PPUSH
7506: CALL_OW 311
7510: PPUSH
7511: LD_INT 3
7513: PPUSH
7514: CALL_OW 259
7518: PUSH
7519: LD_INT 4
7521: MUL
7522: MUL
7523: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7524: LD_VAR 0 6
7528: PPUSH
7529: CALL_OW 263
7533: PUSH
7534: LD_INT 2
7536: EQUAL
7537: IFFALSE 7588
// begin j := IsControledBy ( i ) ;
7539: LD_ADDR_VAR 0 7
7543: PUSH
7544: LD_VAR 0 6
7548: PPUSH
7549: CALL_OW 312
7553: ST_TO_ADDR
// if j then
7554: LD_VAR 0 7
7558: IFFALSE 7588
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7560: LD_ADDR_VAR 0 10
7564: PUSH
7565: LD_VAR 0 10
7569: PUSH
7570: LD_VAR 0 7
7574: PPUSH
7575: LD_INT 3
7577: PPUSH
7578: CALL_OW 259
7582: PUSH
7583: LD_INT 3
7585: MUL
7586: MUL
7587: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7588: LD_VAR 0 6
7592: PPUSH
7593: CALL_OW 264
7597: PUSH
7598: LD_INT 5
7600: PUSH
7601: LD_INT 6
7603: PUSH
7604: LD_INT 46
7606: PUSH
7607: LD_INT 44
7609: PUSH
7610: LD_INT 47
7612: PUSH
7613: LD_INT 45
7615: PUSH
7616: LD_INT 28
7618: PUSH
7619: LD_INT 7
7621: PUSH
7622: LD_INT 27
7624: PUSH
7625: LD_INT 29
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: IN
7640: PUSH
7641: LD_VAR 0 1
7645: PPUSH
7646: LD_INT 52
7648: PPUSH
7649: CALL_OW 321
7653: PUSH
7654: LD_INT 2
7656: EQUAL
7657: AND
7658: IFFALSE 7675
// bpoints := bpoints * 1.2 ;
7660: LD_ADDR_VAR 0 10
7664: PUSH
7665: LD_VAR 0 10
7669: PUSH
7670: LD_REAL  1.20000000000000E+0000
7673: MUL
7674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7675: LD_VAR 0 6
7679: PPUSH
7680: CALL_OW 264
7684: PUSH
7685: LD_INT 6
7687: PUSH
7688: LD_INT 46
7690: PUSH
7691: LD_INT 47
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: IN
7699: IFFALSE 7716
// bpoints := bpoints * 1.2 ;
7701: LD_ADDR_VAR 0 10
7705: PUSH
7706: LD_VAR 0 10
7710: PUSH
7711: LD_REAL  1.20000000000000E+0000
7714: MUL
7715: ST_TO_ADDR
// end ; unit_building :
7716: GO 7730
7718: LD_INT 3
7720: DOUBLE
7721: EQUAL
7722: IFTRUE 7726
7724: GO 7729
7726: POP
// ; end ;
7727: GO 7730
7729: POP
// for j = 1 to 3 do
7730: LD_ADDR_VAR 0 7
7734: PUSH
7735: DOUBLE
7736: LD_INT 1
7738: DEC
7739: ST_TO_ADDR
7740: LD_INT 3
7742: PUSH
7743: FOR_TO
7744: IFFALSE 7797
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7746: LD_ADDR_VAR 0 5
7750: PUSH
7751: LD_VAR 0 5
7755: PPUSH
7756: LD_VAR 0 7
7760: PPUSH
7761: LD_VAR 0 5
7765: PUSH
7766: LD_VAR 0 7
7770: ARRAY
7771: PUSH
7772: LD_VAR 0 9
7776: PUSH
7777: LD_VAR 0 7
7781: ARRAY
7782: PUSH
7783: LD_VAR 0 10
7787: MUL
7788: PLUS
7789: PPUSH
7790: CALL_OW 1
7794: ST_TO_ADDR
7795: GO 7743
7797: POP
7798: POP
// end ;
7799: GO 6278
7801: POP
7802: POP
// result := Replace ( result , 4 , tmp ) ;
7803: LD_ADDR_VAR 0 5
7807: PUSH
7808: LD_VAR 0 5
7812: PPUSH
7813: LD_INT 4
7815: PPUSH
7816: LD_VAR 0 8
7820: PPUSH
7821: CALL_OW 1
7825: ST_TO_ADDR
// end ;
7826: LD_VAR 0 5
7830: RET
// export function DangerAtRange ( unit , range ) ; begin
7831: LD_INT 0
7833: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7834: LD_ADDR_VAR 0 3
7838: PUSH
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 255
7848: PPUSH
7849: LD_VAR 0 1
7853: PPUSH
7854: CALL_OW 250
7858: PPUSH
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 251
7868: PPUSH
7869: LD_VAR 0 2
7873: PPUSH
7874: CALL 6130 0 4
7878: ST_TO_ADDR
// end ;
7879: LD_VAR 0 3
7883: RET
// export function DangerInArea ( side , area ) ; begin
7884: LD_INT 0
7886: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7887: LD_ADDR_VAR 0 3
7891: PUSH
7892: LD_VAR 0 2
7896: PPUSH
7897: LD_INT 81
7899: PUSH
7900: LD_VAR 0 1
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PPUSH
7909: CALL_OW 70
7913: ST_TO_ADDR
// end ;
7914: LD_VAR 0 3
7918: RET
// export function IsExtension ( b ) ; begin
7919: LD_INT 0
7921: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
7922: LD_ADDR_VAR 0 2
7926: PUSH
7927: LD_VAR 0 1
7931: PUSH
7932: LD_INT 23
7934: PUSH
7935: LD_INT 20
7937: PUSH
7938: LD_INT 22
7940: PUSH
7941: LD_INT 17
7943: PUSH
7944: LD_INT 24
7946: PUSH
7947: LD_INT 21
7949: PUSH
7950: LD_INT 19
7952: PUSH
7953: LD_INT 16
7955: PUSH
7956: LD_INT 25
7958: PUSH
7959: LD_INT 18
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: IN
7974: ST_TO_ADDR
// end ;
7975: LD_VAR 0 2
7979: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
7980: LD_INT 0
7982: PPUSH
7983: PPUSH
7984: PPUSH
// result := [ ] ;
7985: LD_ADDR_VAR 0 4
7989: PUSH
7990: EMPTY
7991: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
7992: LD_ADDR_VAR 0 5
7996: PUSH
7997: LD_VAR 0 2
8001: PPUSH
8002: LD_INT 21
8004: PUSH
8005: LD_INT 3
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PPUSH
8012: CALL_OW 70
8016: ST_TO_ADDR
// if not tmp then
8017: LD_VAR 0 5
8021: NOT
8022: IFFALSE 8026
// exit ;
8024: GO 8090
// if checkLink then
8026: LD_VAR 0 3
8030: IFFALSE 8080
// begin for i in tmp do
8032: LD_ADDR_VAR 0 6
8036: PUSH
8037: LD_VAR 0 5
8041: PUSH
8042: FOR_IN
8043: IFFALSE 8078
// if GetBase ( i ) <> base then
8045: LD_VAR 0 6
8049: PPUSH
8050: CALL_OW 274
8054: PUSH
8055: LD_VAR 0 1
8059: NONEQUAL
8060: IFFALSE 8076
// ComLinkToBase ( base , i ) ;
8062: LD_VAR 0 1
8066: PPUSH
8067: LD_VAR 0 6
8071: PPUSH
8072: CALL_OW 169
8076: GO 8042
8078: POP
8079: POP
// end ; result := tmp ;
8080: LD_ADDR_VAR 0 4
8084: PUSH
8085: LD_VAR 0 5
8089: ST_TO_ADDR
// end ;
8090: LD_VAR 0 4
8094: RET
// export function ComComplete ( units , b ) ; var i ; begin
8095: LD_INT 0
8097: PPUSH
8098: PPUSH
// if not units then
8099: LD_VAR 0 1
8103: NOT
8104: IFFALSE 8108
// exit ;
8106: GO 8198
// for i in units do
8108: LD_ADDR_VAR 0 4
8112: PUSH
8113: LD_VAR 0 1
8117: PUSH
8118: FOR_IN
8119: IFFALSE 8196
// if BuildingStatus ( b ) = bs_build then
8121: LD_VAR 0 2
8125: PPUSH
8126: CALL_OW 461
8130: PUSH
8131: LD_INT 1
8133: EQUAL
8134: IFFALSE 8194
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8136: LD_VAR 0 4
8140: PPUSH
8141: LD_STRING h
8143: PUSH
8144: LD_VAR 0 2
8148: PPUSH
8149: CALL_OW 250
8153: PUSH
8154: LD_VAR 0 2
8158: PPUSH
8159: CALL_OW 251
8163: PUSH
8164: LD_VAR 0 2
8168: PUSH
8169: LD_INT 0
8171: PUSH
8172: LD_INT 0
8174: PUSH
8175: LD_INT 0
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: PUSH
8187: EMPTY
8188: LIST
8189: PPUSH
8190: CALL_OW 446
8194: GO 8118
8196: POP
8197: POP
// end ;
8198: LD_VAR 0 3
8202: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8203: LD_INT 0
8205: PPUSH
8206: PPUSH
8207: PPUSH
8208: PPUSH
8209: PPUSH
8210: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8211: LD_VAR 0 1
8215: NOT
8216: PUSH
8217: LD_VAR 0 1
8221: PPUSH
8222: CALL_OW 263
8226: PUSH
8227: LD_INT 2
8229: NONEQUAL
8230: OR
8231: IFFALSE 8235
// exit ;
8233: GO 8551
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8235: LD_ADDR_VAR 0 6
8239: PUSH
8240: LD_INT 22
8242: PUSH
8243: LD_VAR 0 1
8247: PPUSH
8248: CALL_OW 255
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PUSH
8257: LD_INT 2
8259: PUSH
8260: LD_INT 30
8262: PUSH
8263: LD_INT 36
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: LD_INT 34
8272: PUSH
8273: LD_INT 31
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: LIST
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PPUSH
8289: CALL_OW 69
8293: ST_TO_ADDR
// if not tmp then
8294: LD_VAR 0 6
8298: NOT
8299: IFFALSE 8303
// exit ;
8301: GO 8551
// result := [ ] ;
8303: LD_ADDR_VAR 0 2
8307: PUSH
8308: EMPTY
8309: ST_TO_ADDR
// for i in tmp do
8310: LD_ADDR_VAR 0 3
8314: PUSH
8315: LD_VAR 0 6
8319: PUSH
8320: FOR_IN
8321: IFFALSE 8392
// begin t := UnitsInside ( i ) ;
8323: LD_ADDR_VAR 0 4
8327: PUSH
8328: LD_VAR 0 3
8332: PPUSH
8333: CALL_OW 313
8337: ST_TO_ADDR
// if t then
8338: LD_VAR 0 4
8342: IFFALSE 8390
// for j in t do
8344: LD_ADDR_VAR 0 7
8348: PUSH
8349: LD_VAR 0 4
8353: PUSH
8354: FOR_IN
8355: IFFALSE 8388
// result := Replace ( result , result + 1 , j ) ;
8357: LD_ADDR_VAR 0 2
8361: PUSH
8362: LD_VAR 0 2
8366: PPUSH
8367: LD_VAR 0 2
8371: PUSH
8372: LD_INT 1
8374: PLUS
8375: PPUSH
8376: LD_VAR 0 7
8380: PPUSH
8381: CALL_OW 1
8385: ST_TO_ADDR
8386: GO 8354
8388: POP
8389: POP
// end ;
8390: GO 8320
8392: POP
8393: POP
// if not result then
8394: LD_VAR 0 2
8398: NOT
8399: IFFALSE 8403
// exit ;
8401: GO 8551
// mech := result [ 1 ] ;
8403: LD_ADDR_VAR 0 5
8407: PUSH
8408: LD_VAR 0 2
8412: PUSH
8413: LD_INT 1
8415: ARRAY
8416: ST_TO_ADDR
// if result > 1 then
8417: LD_VAR 0 2
8421: PUSH
8422: LD_INT 1
8424: GREATER
8425: IFFALSE 8537
// begin for i = 2 to result do
8427: LD_ADDR_VAR 0 3
8431: PUSH
8432: DOUBLE
8433: LD_INT 2
8435: DEC
8436: ST_TO_ADDR
8437: LD_VAR 0 2
8441: PUSH
8442: FOR_TO
8443: IFFALSE 8535
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8445: LD_ADDR_VAR 0 4
8449: PUSH
8450: LD_VAR 0 2
8454: PUSH
8455: LD_VAR 0 3
8459: ARRAY
8460: PPUSH
8461: LD_INT 3
8463: PPUSH
8464: CALL_OW 259
8468: PUSH
8469: LD_VAR 0 2
8473: PUSH
8474: LD_VAR 0 3
8478: ARRAY
8479: PPUSH
8480: CALL_OW 432
8484: MINUS
8485: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8486: LD_VAR 0 4
8490: PUSH
8491: LD_VAR 0 5
8495: PPUSH
8496: LD_INT 3
8498: PPUSH
8499: CALL_OW 259
8503: PUSH
8504: LD_VAR 0 5
8508: PPUSH
8509: CALL_OW 432
8513: MINUS
8514: GREATEREQUAL
8515: IFFALSE 8533
// mech := result [ i ] ;
8517: LD_ADDR_VAR 0 5
8521: PUSH
8522: LD_VAR 0 2
8526: PUSH
8527: LD_VAR 0 3
8531: ARRAY
8532: ST_TO_ADDR
// end ;
8533: GO 8442
8535: POP
8536: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_VAR 0 5
8546: PPUSH
8547: CALL_OW 135
// end ;
8551: LD_VAR 0 2
8555: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8556: LD_INT 0
8558: PPUSH
8559: PPUSH
8560: PPUSH
8561: PPUSH
8562: PPUSH
8563: PPUSH
8564: PPUSH
8565: PPUSH
8566: PPUSH
8567: PPUSH
8568: PPUSH
8569: PPUSH
8570: PPUSH
// result := [ ] ;
8571: LD_ADDR_VAR 0 7
8575: PUSH
8576: EMPTY
8577: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8578: LD_VAR 0 1
8582: PPUSH
8583: CALL_OW 266
8587: PUSH
8588: LD_INT 0
8590: PUSH
8591: LD_INT 1
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: IN
8598: NOT
8599: IFFALSE 8603
// exit ;
8601: GO 10237
// if name then
8603: LD_VAR 0 3
8607: IFFALSE 8623
// SetBName ( base_dep , name ) ;
8609: LD_VAR 0 1
8613: PPUSH
8614: LD_VAR 0 3
8618: PPUSH
8619: CALL_OW 500
// base := GetBase ( base_dep ) ;
8623: LD_ADDR_VAR 0 15
8627: PUSH
8628: LD_VAR 0 1
8632: PPUSH
8633: CALL_OW 274
8637: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8638: LD_ADDR_VAR 0 16
8642: PUSH
8643: LD_VAR 0 1
8647: PPUSH
8648: CALL_OW 255
8652: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8653: LD_ADDR_VAR 0 17
8657: PUSH
8658: LD_VAR 0 1
8662: PPUSH
8663: CALL_OW 248
8667: ST_TO_ADDR
// if sources then
8668: LD_VAR 0 5
8672: IFFALSE 8719
// for i = 1 to 3 do
8674: LD_ADDR_VAR 0 8
8678: PUSH
8679: DOUBLE
8680: LD_INT 1
8682: DEC
8683: ST_TO_ADDR
8684: LD_INT 3
8686: PUSH
8687: FOR_TO
8688: IFFALSE 8717
// AddResourceType ( base , i , sources [ i ] ) ;
8690: LD_VAR 0 15
8694: PPUSH
8695: LD_VAR 0 8
8699: PPUSH
8700: LD_VAR 0 5
8704: PUSH
8705: LD_VAR 0 8
8709: ARRAY
8710: PPUSH
8711: CALL_OW 276
8715: GO 8687
8717: POP
8718: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8719: LD_ADDR_VAR 0 18
8723: PUSH
8724: LD_VAR 0 15
8728: PPUSH
8729: LD_VAR 0 2
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: CALL 7980 0 3
8741: ST_TO_ADDR
// InitHc ;
8742: CALL_OW 19
// InitUc ;
8746: CALL_OW 18
// uc_side := side ;
8750: LD_ADDR_OWVAR 20
8754: PUSH
8755: LD_VAR 0 16
8759: ST_TO_ADDR
// uc_nation := nation ;
8760: LD_ADDR_OWVAR 21
8764: PUSH
8765: LD_VAR 0 17
8769: ST_TO_ADDR
// if buildings then
8770: LD_VAR 0 18
8774: IFFALSE 10096
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8776: LD_ADDR_VAR 0 19
8780: PUSH
8781: LD_VAR 0 18
8785: PPUSH
8786: LD_INT 2
8788: PUSH
8789: LD_INT 30
8791: PUSH
8792: LD_INT 29
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 30
8801: PUSH
8802: LD_INT 30
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: LIST
8813: PPUSH
8814: CALL_OW 72
8818: ST_TO_ADDR
// if tmp then
8819: LD_VAR 0 19
8823: IFFALSE 8871
// for i in tmp do
8825: LD_ADDR_VAR 0 8
8829: PUSH
8830: LD_VAR 0 19
8834: PUSH
8835: FOR_IN
8836: IFFALSE 8869
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8838: LD_VAR 0 8
8842: PPUSH
8843: CALL_OW 250
8847: PPUSH
8848: LD_VAR 0 8
8852: PPUSH
8853: CALL_OW 251
8857: PPUSH
8858: LD_VAR 0 16
8862: PPUSH
8863: CALL_OW 441
8867: GO 8835
8869: POP
8870: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8871: LD_VAR 0 18
8875: PPUSH
8876: LD_INT 2
8878: PUSH
8879: LD_INT 30
8881: PUSH
8882: LD_INT 32
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 30
8891: PUSH
8892: LD_INT 33
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: PPUSH
8904: CALL_OW 72
8908: IFFALSE 8996
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
8910: LD_ADDR_VAR 0 8
8914: PUSH
8915: LD_VAR 0 18
8919: PPUSH
8920: LD_INT 2
8922: PUSH
8923: LD_INT 30
8925: PUSH
8926: LD_INT 32
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 30
8935: PUSH
8936: LD_INT 33
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: LIST
8947: PPUSH
8948: CALL_OW 72
8952: PUSH
8953: FOR_IN
8954: IFFALSE 8994
// begin if not GetBWeapon ( i ) then
8956: LD_VAR 0 8
8960: PPUSH
8961: CALL_OW 269
8965: NOT
8966: IFFALSE 8992
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
8968: LD_VAR 0 8
8972: PPUSH
8973: LD_VAR 0 8
8977: PPUSH
8978: LD_VAR 0 2
8982: PPUSH
8983: CALL 10242 0 2
8987: PPUSH
8988: CALL_OW 431
// end ;
8992: GO 8953
8994: POP
8995: POP
// end ; for i = 1 to personel do
8996: LD_ADDR_VAR 0 8
9000: PUSH
9001: DOUBLE
9002: LD_INT 1
9004: DEC
9005: ST_TO_ADDR
9006: LD_VAR 0 6
9010: PUSH
9011: FOR_TO
9012: IFFALSE 10076
// begin if i > 4 then
9014: LD_VAR 0 8
9018: PUSH
9019: LD_INT 4
9021: GREATER
9022: IFFALSE 9026
// break ;
9024: GO 10076
// case i of 1 :
9026: LD_VAR 0 8
9030: PUSH
9031: LD_INT 1
9033: DOUBLE
9034: EQUAL
9035: IFTRUE 9039
9037: GO 9119
9039: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9040: LD_ADDR_VAR 0 12
9044: PUSH
9045: LD_VAR 0 18
9049: PPUSH
9050: LD_INT 22
9052: PUSH
9053: LD_VAR 0 16
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PUSH
9062: LD_INT 58
9064: PUSH
9065: EMPTY
9066: LIST
9067: PUSH
9068: LD_INT 2
9070: PUSH
9071: LD_INT 30
9073: PUSH
9074: LD_INT 32
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PUSH
9081: LD_INT 30
9083: PUSH
9084: LD_INT 4
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 30
9093: PUSH
9094: LD_INT 5
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: LIST
9111: PPUSH
9112: CALL_OW 72
9116: ST_TO_ADDR
9117: GO 9341
9119: LD_INT 2
9121: DOUBLE
9122: EQUAL
9123: IFTRUE 9127
9125: GO 9189
9127: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9128: LD_ADDR_VAR 0 12
9132: PUSH
9133: LD_VAR 0 18
9137: PPUSH
9138: LD_INT 22
9140: PUSH
9141: LD_VAR 0 16
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 2
9152: PUSH
9153: LD_INT 30
9155: PUSH
9156: LD_INT 0
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: LD_INT 30
9165: PUSH
9166: LD_INT 1
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: LIST
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PPUSH
9182: CALL_OW 72
9186: ST_TO_ADDR
9187: GO 9341
9189: LD_INT 3
9191: DOUBLE
9192: EQUAL
9193: IFTRUE 9197
9195: GO 9259
9197: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9198: LD_ADDR_VAR 0 12
9202: PUSH
9203: LD_VAR 0 18
9207: PPUSH
9208: LD_INT 22
9210: PUSH
9211: LD_VAR 0 16
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: LD_INT 30
9225: PUSH
9226: LD_INT 2
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 30
9235: PUSH
9236: LD_INT 3
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PPUSH
9252: CALL_OW 72
9256: ST_TO_ADDR
9257: GO 9341
9259: LD_INT 4
9261: DOUBLE
9262: EQUAL
9263: IFTRUE 9267
9265: GO 9340
9267: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9268: LD_ADDR_VAR 0 12
9272: PUSH
9273: LD_VAR 0 18
9277: PPUSH
9278: LD_INT 22
9280: PUSH
9281: LD_VAR 0 16
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: LD_INT 30
9295: PUSH
9296: LD_INT 6
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 30
9305: PUSH
9306: LD_INT 7
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 30
9315: PUSH
9316: LD_INT 8
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PPUSH
9333: CALL_OW 72
9337: ST_TO_ADDR
9338: GO 9341
9340: POP
// if i = 1 then
9341: LD_VAR 0 8
9345: PUSH
9346: LD_INT 1
9348: EQUAL
9349: IFFALSE 9460
// begin tmp := [ ] ;
9351: LD_ADDR_VAR 0 19
9355: PUSH
9356: EMPTY
9357: ST_TO_ADDR
// for j in f do
9358: LD_ADDR_VAR 0 9
9362: PUSH
9363: LD_VAR 0 12
9367: PUSH
9368: FOR_IN
9369: IFFALSE 9442
// if GetBType ( j ) = b_bunker then
9371: LD_VAR 0 9
9375: PPUSH
9376: CALL_OW 266
9380: PUSH
9381: LD_INT 32
9383: EQUAL
9384: IFFALSE 9411
// tmp := Insert ( tmp , 1 , j ) else
9386: LD_ADDR_VAR 0 19
9390: PUSH
9391: LD_VAR 0 19
9395: PPUSH
9396: LD_INT 1
9398: PPUSH
9399: LD_VAR 0 9
9403: PPUSH
9404: CALL_OW 2
9408: ST_TO_ADDR
9409: GO 9440
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9411: LD_ADDR_VAR 0 19
9415: PUSH
9416: LD_VAR 0 19
9420: PPUSH
9421: LD_VAR 0 19
9425: PUSH
9426: LD_INT 1
9428: PLUS
9429: PPUSH
9430: LD_VAR 0 9
9434: PPUSH
9435: CALL_OW 2
9439: ST_TO_ADDR
9440: GO 9368
9442: POP
9443: POP
// if tmp then
9444: LD_VAR 0 19
9448: IFFALSE 9460
// f := tmp ;
9450: LD_ADDR_VAR 0 12
9454: PUSH
9455: LD_VAR 0 19
9459: ST_TO_ADDR
// end ; x := personel [ i ] ;
9460: LD_ADDR_VAR 0 13
9464: PUSH
9465: LD_VAR 0 6
9469: PUSH
9470: LD_VAR 0 8
9474: ARRAY
9475: ST_TO_ADDR
// if x = - 1 then
9476: LD_VAR 0 13
9480: PUSH
9481: LD_INT 1
9483: NEG
9484: EQUAL
9485: IFFALSE 9694
// begin for j in f do
9487: LD_ADDR_VAR 0 9
9491: PUSH
9492: LD_VAR 0 12
9496: PUSH
9497: FOR_IN
9498: IFFALSE 9690
// repeat InitHc ;
9500: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9504: LD_VAR 0 9
9508: PPUSH
9509: CALL_OW 266
9513: PUSH
9514: LD_INT 5
9516: EQUAL
9517: IFFALSE 9587
// begin if UnitsInside ( j ) < 3 then
9519: LD_VAR 0 9
9523: PPUSH
9524: CALL_OW 313
9528: PUSH
9529: LD_INT 3
9531: LESS
9532: IFFALSE 9568
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9534: LD_INT 0
9536: PPUSH
9537: LD_INT 5
9539: PUSH
9540: LD_INT 8
9542: PUSH
9543: LD_INT 9
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: LIST
9550: PUSH
9551: LD_VAR 0 17
9555: ARRAY
9556: PPUSH
9557: LD_VAR 0 4
9561: PPUSH
9562: CALL_OW 380
9566: GO 9585
// PrepareHuman ( false , i , skill ) ;
9568: LD_INT 0
9570: PPUSH
9571: LD_VAR 0 8
9575: PPUSH
9576: LD_VAR 0 4
9580: PPUSH
9581: CALL_OW 380
// end else
9585: GO 9604
// PrepareHuman ( false , i , skill ) ;
9587: LD_INT 0
9589: PPUSH
9590: LD_VAR 0 8
9594: PPUSH
9595: LD_VAR 0 4
9599: PPUSH
9600: CALL_OW 380
// un := CreateHuman ;
9604: LD_ADDR_VAR 0 14
9608: PUSH
9609: CALL_OW 44
9613: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9614: LD_ADDR_VAR 0 7
9618: PUSH
9619: LD_VAR 0 7
9623: PPUSH
9624: LD_INT 1
9626: PPUSH
9627: LD_VAR 0 14
9631: PPUSH
9632: CALL_OW 2
9636: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9637: LD_VAR 0 14
9641: PPUSH
9642: LD_VAR 0 9
9646: PPUSH
9647: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9651: LD_VAR 0 9
9655: PPUSH
9656: CALL_OW 313
9660: PUSH
9661: LD_INT 6
9663: EQUAL
9664: PUSH
9665: LD_VAR 0 9
9669: PPUSH
9670: CALL_OW 266
9674: PUSH
9675: LD_INT 32
9677: PUSH
9678: LD_INT 31
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: IN
9685: OR
9686: IFFALSE 9500
9688: GO 9497
9690: POP
9691: POP
// end else
9692: GO 10074
// for j = 1 to x do
9694: LD_ADDR_VAR 0 9
9698: PUSH
9699: DOUBLE
9700: LD_INT 1
9702: DEC
9703: ST_TO_ADDR
9704: LD_VAR 0 13
9708: PUSH
9709: FOR_TO
9710: IFFALSE 10072
// begin InitHc ;
9712: CALL_OW 19
// if not f then
9716: LD_VAR 0 12
9720: NOT
9721: IFFALSE 9810
// begin PrepareHuman ( false , i , skill ) ;
9723: LD_INT 0
9725: PPUSH
9726: LD_VAR 0 8
9730: PPUSH
9731: LD_VAR 0 4
9735: PPUSH
9736: CALL_OW 380
// un := CreateHuman ;
9740: LD_ADDR_VAR 0 14
9744: PUSH
9745: CALL_OW 44
9749: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9750: LD_ADDR_VAR 0 7
9754: PUSH
9755: LD_VAR 0 7
9759: PPUSH
9760: LD_INT 1
9762: PPUSH
9763: LD_VAR 0 14
9767: PPUSH
9768: CALL_OW 2
9772: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9773: LD_VAR 0 14
9777: PPUSH
9778: LD_VAR 0 1
9782: PPUSH
9783: CALL_OW 250
9787: PPUSH
9788: LD_VAR 0 1
9792: PPUSH
9793: CALL_OW 251
9797: PPUSH
9798: LD_INT 10
9800: PPUSH
9801: LD_INT 0
9803: PPUSH
9804: CALL_OW 50
// continue ;
9808: GO 9709
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9810: LD_VAR 0 12
9814: PUSH
9815: LD_INT 1
9817: ARRAY
9818: PPUSH
9819: CALL_OW 313
9823: PUSH
9824: LD_VAR 0 12
9828: PUSH
9829: LD_INT 1
9831: ARRAY
9832: PPUSH
9833: CALL_OW 266
9837: PUSH
9838: LD_INT 32
9840: PUSH
9841: LD_INT 31
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: IN
9848: AND
9849: PUSH
9850: LD_VAR 0 12
9854: PUSH
9855: LD_INT 1
9857: ARRAY
9858: PPUSH
9859: CALL_OW 313
9863: PUSH
9864: LD_INT 6
9866: EQUAL
9867: OR
9868: IFFALSE 9888
// f := Delete ( f , 1 ) ;
9870: LD_ADDR_VAR 0 12
9874: PUSH
9875: LD_VAR 0 12
9879: PPUSH
9880: LD_INT 1
9882: PPUSH
9883: CALL_OW 3
9887: ST_TO_ADDR
// if not f then
9888: LD_VAR 0 12
9892: NOT
9893: IFFALSE 9911
// begin x := x + 2 ;
9895: LD_ADDR_VAR 0 13
9899: PUSH
9900: LD_VAR 0 13
9904: PUSH
9905: LD_INT 2
9907: PLUS
9908: ST_TO_ADDR
// continue ;
9909: GO 9709
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
9911: LD_VAR 0 12
9915: PUSH
9916: LD_INT 1
9918: ARRAY
9919: PPUSH
9920: CALL_OW 266
9924: PUSH
9925: LD_INT 5
9927: EQUAL
9928: IFFALSE 10002
// begin if UnitsInside ( f [ 1 ] ) < 3 then
9930: LD_VAR 0 12
9934: PUSH
9935: LD_INT 1
9937: ARRAY
9938: PPUSH
9939: CALL_OW 313
9943: PUSH
9944: LD_INT 3
9946: LESS
9947: IFFALSE 9983
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9949: LD_INT 0
9951: PPUSH
9952: LD_INT 5
9954: PUSH
9955: LD_INT 8
9957: PUSH
9958: LD_INT 9
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: LD_VAR 0 17
9970: ARRAY
9971: PPUSH
9972: LD_VAR 0 4
9976: PPUSH
9977: CALL_OW 380
9981: GO 10000
// PrepareHuman ( false , i , skill ) ;
9983: LD_INT 0
9985: PPUSH
9986: LD_VAR 0 8
9990: PPUSH
9991: LD_VAR 0 4
9995: PPUSH
9996: CALL_OW 380
// end else
10000: GO 10019
// PrepareHuman ( false , i , skill ) ;
10002: LD_INT 0
10004: PPUSH
10005: LD_VAR 0 8
10009: PPUSH
10010: LD_VAR 0 4
10014: PPUSH
10015: CALL_OW 380
// un := CreateHuman ;
10019: LD_ADDR_VAR 0 14
10023: PUSH
10024: CALL_OW 44
10028: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10029: LD_ADDR_VAR 0 7
10033: PUSH
10034: LD_VAR 0 7
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: LD_VAR 0 14
10046: PPUSH
10047: CALL_OW 2
10051: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10052: LD_VAR 0 14
10056: PPUSH
10057: LD_VAR 0 12
10061: PUSH
10062: LD_INT 1
10064: ARRAY
10065: PPUSH
10066: CALL_OW 52
// end ;
10070: GO 9709
10072: POP
10073: POP
// end ;
10074: GO 9011
10076: POP
10077: POP
// result := result ^ buildings ;
10078: LD_ADDR_VAR 0 7
10082: PUSH
10083: LD_VAR 0 7
10087: PUSH
10088: LD_VAR 0 18
10092: ADD
10093: ST_TO_ADDR
// end else
10094: GO 10237
// begin for i = 1 to personel do
10096: LD_ADDR_VAR 0 8
10100: PUSH
10101: DOUBLE
10102: LD_INT 1
10104: DEC
10105: ST_TO_ADDR
10106: LD_VAR 0 6
10110: PUSH
10111: FOR_TO
10112: IFFALSE 10235
// begin if i > 4 then
10114: LD_VAR 0 8
10118: PUSH
10119: LD_INT 4
10121: GREATER
10122: IFFALSE 10126
// break ;
10124: GO 10235
// x := personel [ i ] ;
10126: LD_ADDR_VAR 0 13
10130: PUSH
10131: LD_VAR 0 6
10135: PUSH
10136: LD_VAR 0 8
10140: ARRAY
10141: ST_TO_ADDR
// if x = - 1 then
10142: LD_VAR 0 13
10146: PUSH
10147: LD_INT 1
10149: NEG
10150: EQUAL
10151: IFFALSE 10155
// continue ;
10153: GO 10111
// PrepareHuman ( false , i , skill ) ;
10155: LD_INT 0
10157: PPUSH
10158: LD_VAR 0 8
10162: PPUSH
10163: LD_VAR 0 4
10167: PPUSH
10168: CALL_OW 380
// un := CreateHuman ;
10172: LD_ADDR_VAR 0 14
10176: PUSH
10177: CALL_OW 44
10181: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10182: LD_VAR 0 14
10186: PPUSH
10187: LD_VAR 0 1
10191: PPUSH
10192: CALL_OW 250
10196: PPUSH
10197: LD_VAR 0 1
10201: PPUSH
10202: CALL_OW 251
10206: PPUSH
10207: LD_INT 10
10209: PPUSH
10210: LD_INT 0
10212: PPUSH
10213: CALL_OW 50
// result := result ^ un ;
10217: LD_ADDR_VAR 0 7
10221: PUSH
10222: LD_VAR 0 7
10226: PUSH
10227: LD_VAR 0 14
10231: ADD
10232: ST_TO_ADDR
// end ;
10233: GO 10111
10235: POP
10236: POP
// end ; end ;
10237: LD_VAR 0 7
10241: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10242: LD_INT 0
10244: PPUSH
10245: PPUSH
10246: PPUSH
10247: PPUSH
10248: PPUSH
10249: PPUSH
10250: PPUSH
10251: PPUSH
10252: PPUSH
10253: PPUSH
10254: PPUSH
10255: PPUSH
10256: PPUSH
10257: PPUSH
10258: PPUSH
10259: PPUSH
// result := false ;
10260: LD_ADDR_VAR 0 3
10264: PUSH
10265: LD_INT 0
10267: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10268: LD_VAR 0 1
10272: NOT
10273: PUSH
10274: LD_VAR 0 1
10278: PPUSH
10279: CALL_OW 266
10283: PUSH
10284: LD_INT 32
10286: PUSH
10287: LD_INT 33
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: IN
10294: NOT
10295: OR
10296: IFFALSE 10300
// exit ;
10298: GO 11409
// nat := GetNation ( tower ) ;
10300: LD_ADDR_VAR 0 12
10304: PUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: CALL_OW 248
10314: ST_TO_ADDR
// side := GetSide ( tower ) ;
10315: LD_ADDR_VAR 0 16
10319: PUSH
10320: LD_VAR 0 1
10324: PPUSH
10325: CALL_OW 255
10329: ST_TO_ADDR
// x := GetX ( tower ) ;
10330: LD_ADDR_VAR 0 10
10334: PUSH
10335: LD_VAR 0 1
10339: PPUSH
10340: CALL_OW 250
10344: ST_TO_ADDR
// y := GetY ( tower ) ;
10345: LD_ADDR_VAR 0 11
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 251
10359: ST_TO_ADDR
// if not x or not y then
10360: LD_VAR 0 10
10364: NOT
10365: PUSH
10366: LD_VAR 0 11
10370: NOT
10371: OR
10372: IFFALSE 10376
// exit ;
10374: GO 11409
// weapon := 0 ;
10376: LD_ADDR_VAR 0 18
10380: PUSH
10381: LD_INT 0
10383: ST_TO_ADDR
// fac_list := [ ] ;
10384: LD_ADDR_VAR 0 17
10388: PUSH
10389: EMPTY
10390: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10391: LD_ADDR_VAR 0 6
10395: PUSH
10396: LD_VAR 0 1
10400: PPUSH
10401: CALL_OW 274
10405: PPUSH
10406: LD_VAR 0 2
10410: PPUSH
10411: LD_INT 0
10413: PPUSH
10414: CALL 7980 0 3
10418: PPUSH
10419: LD_INT 30
10421: PUSH
10422: LD_INT 3
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PPUSH
10429: CALL_OW 72
10433: ST_TO_ADDR
// if not factories then
10434: LD_VAR 0 6
10438: NOT
10439: IFFALSE 10443
// exit ;
10441: GO 11409
// for i in factories do
10443: LD_ADDR_VAR 0 8
10447: PUSH
10448: LD_VAR 0 6
10452: PUSH
10453: FOR_IN
10454: IFFALSE 10479
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10456: LD_ADDR_VAR 0 17
10460: PUSH
10461: LD_VAR 0 17
10465: PUSH
10466: LD_VAR 0 8
10470: PPUSH
10471: CALL_OW 478
10475: UNION
10476: ST_TO_ADDR
10477: GO 10453
10479: POP
10480: POP
// if not fac_list then
10481: LD_VAR 0 17
10485: NOT
10486: IFFALSE 10490
// exit ;
10488: GO 11409
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10490: LD_ADDR_VAR 0 5
10494: PUSH
10495: LD_INT 4
10497: PUSH
10498: LD_INT 5
10500: PUSH
10501: LD_INT 9
10503: PUSH
10504: LD_INT 10
10506: PUSH
10507: LD_INT 6
10509: PUSH
10510: LD_INT 7
10512: PUSH
10513: LD_INT 11
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 27
10527: PUSH
10528: LD_INT 28
10530: PUSH
10531: LD_INT 26
10533: PUSH
10534: LD_INT 30
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 43
10545: PUSH
10546: LD_INT 44
10548: PUSH
10549: LD_INT 46
10551: PUSH
10552: LD_INT 45
10554: PUSH
10555: LD_INT 47
10557: PUSH
10558: LD_INT 49
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: LIST
10573: PUSH
10574: LD_VAR 0 12
10578: ARRAY
10579: ST_TO_ADDR
// list := list isect fac_list ;
10580: LD_ADDR_VAR 0 5
10584: PUSH
10585: LD_VAR 0 5
10589: PUSH
10590: LD_VAR 0 17
10594: ISECT
10595: ST_TO_ADDR
// if not list then
10596: LD_VAR 0 5
10600: NOT
10601: IFFALSE 10605
// exit ;
10603: GO 11409
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10605: LD_VAR 0 12
10609: PUSH
10610: LD_INT 3
10612: EQUAL
10613: PUSH
10614: LD_INT 49
10616: PUSH
10617: LD_VAR 0 5
10621: IN
10622: AND
10623: PUSH
10624: LD_INT 31
10626: PPUSH
10627: LD_VAR 0 16
10631: PPUSH
10632: CALL_OW 321
10636: PUSH
10637: LD_INT 2
10639: EQUAL
10640: AND
10641: IFFALSE 10701
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10643: LD_INT 22
10645: PUSH
10646: LD_VAR 0 16
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 35
10657: PUSH
10658: LD_INT 49
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 91
10667: PUSH
10668: LD_VAR 0 1
10672: PUSH
10673: LD_INT 10
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: LIST
10685: PPUSH
10686: CALL_OW 69
10690: NOT
10691: IFFALSE 10701
// weapon := ru_time_lapser ;
10693: LD_ADDR_VAR 0 18
10697: PUSH
10698: LD_INT 49
10700: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10701: LD_VAR 0 12
10705: PUSH
10706: LD_INT 1
10708: PUSH
10709: LD_INT 2
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: IN
10716: PUSH
10717: LD_INT 11
10719: PUSH
10720: LD_VAR 0 5
10724: IN
10725: PUSH
10726: LD_INT 30
10728: PUSH
10729: LD_VAR 0 5
10733: IN
10734: OR
10735: AND
10736: PUSH
10737: LD_INT 6
10739: PPUSH
10740: LD_VAR 0 16
10744: PPUSH
10745: CALL_OW 321
10749: PUSH
10750: LD_INT 2
10752: EQUAL
10753: AND
10754: IFFALSE 10919
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10756: LD_INT 22
10758: PUSH
10759: LD_VAR 0 16
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: LD_INT 35
10773: PUSH
10774: LD_INT 11
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 35
10783: PUSH
10784: LD_INT 30
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 91
10798: PUSH
10799: LD_VAR 0 1
10803: PUSH
10804: LD_INT 18
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: LIST
10816: PPUSH
10817: CALL_OW 69
10821: NOT
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_VAR 0 16
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 2
10837: PUSH
10838: LD_INT 30
10840: PUSH
10841: LD_INT 32
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: LD_INT 30
10850: PUSH
10851: LD_INT 33
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 91
10865: PUSH
10866: LD_VAR 0 1
10870: PUSH
10871: LD_INT 12
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: LIST
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: PUSH
10884: EMPTY
10885: LIST
10886: PPUSH
10887: CALL_OW 69
10891: PUSH
10892: LD_INT 2
10894: GREATER
10895: AND
10896: IFFALSE 10919
// weapon := [ us_radar , ar_radar ] [ nat ] ;
10898: LD_ADDR_VAR 0 18
10902: PUSH
10903: LD_INT 11
10905: PUSH
10906: LD_INT 30
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_VAR 0 12
10917: ARRAY
10918: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
10919: LD_VAR 0 18
10923: NOT
10924: PUSH
10925: LD_INT 40
10927: PPUSH
10928: LD_VAR 0 16
10932: PPUSH
10933: CALL_OW 321
10937: PUSH
10938: LD_INT 2
10940: EQUAL
10941: AND
10942: PUSH
10943: LD_INT 7
10945: PUSH
10946: LD_VAR 0 5
10950: IN
10951: PUSH
10952: LD_INT 28
10954: PUSH
10955: LD_VAR 0 5
10959: IN
10960: OR
10961: PUSH
10962: LD_INT 45
10964: PUSH
10965: LD_VAR 0 5
10969: IN
10970: OR
10971: AND
10972: IFFALSE 11226
// begin hex := GetHexInfo ( x , y ) ;
10974: LD_ADDR_VAR 0 4
10978: PUSH
10979: LD_VAR 0 10
10983: PPUSH
10984: LD_VAR 0 11
10988: PPUSH
10989: CALL_OW 546
10993: ST_TO_ADDR
// if hex [ 1 ] then
10994: LD_VAR 0 4
10998: PUSH
10999: LD_INT 1
11001: ARRAY
11002: IFFALSE 11006
// exit ;
11004: GO 11409
// height := hex [ 2 ] ;
11006: LD_ADDR_VAR 0 15
11010: PUSH
11011: LD_VAR 0 4
11015: PUSH
11016: LD_INT 2
11018: ARRAY
11019: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11020: LD_ADDR_VAR 0 14
11024: PUSH
11025: LD_INT 0
11027: PUSH
11028: LD_INT 2
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: LD_INT 5
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: ST_TO_ADDR
// for i in tmp do
11043: LD_ADDR_VAR 0 8
11047: PUSH
11048: LD_VAR 0 14
11052: PUSH
11053: FOR_IN
11054: IFFALSE 11224
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11056: LD_ADDR_VAR 0 9
11060: PUSH
11061: LD_VAR 0 10
11065: PPUSH
11066: LD_VAR 0 8
11070: PPUSH
11071: LD_INT 5
11073: PPUSH
11074: CALL_OW 272
11078: PUSH
11079: LD_VAR 0 11
11083: PPUSH
11084: LD_VAR 0 8
11088: PPUSH
11089: LD_INT 5
11091: PPUSH
11092: CALL_OW 273
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11101: LD_VAR 0 9
11105: PUSH
11106: LD_INT 1
11108: ARRAY
11109: PPUSH
11110: LD_VAR 0 9
11114: PUSH
11115: LD_INT 2
11117: ARRAY
11118: PPUSH
11119: CALL_OW 488
11123: IFFALSE 11222
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11125: LD_ADDR_VAR 0 4
11129: PUSH
11130: LD_VAR 0 9
11134: PUSH
11135: LD_INT 1
11137: ARRAY
11138: PPUSH
11139: LD_VAR 0 9
11143: PUSH
11144: LD_INT 2
11146: ARRAY
11147: PPUSH
11148: CALL_OW 546
11152: ST_TO_ADDR
// if hex [ 1 ] then
11153: LD_VAR 0 4
11157: PUSH
11158: LD_INT 1
11160: ARRAY
11161: IFFALSE 11165
// continue ;
11163: GO 11053
// h := hex [ 2 ] ;
11165: LD_ADDR_VAR 0 13
11169: PUSH
11170: LD_VAR 0 4
11174: PUSH
11175: LD_INT 2
11177: ARRAY
11178: ST_TO_ADDR
// if h + 7 < height then
11179: LD_VAR 0 13
11183: PUSH
11184: LD_INT 7
11186: PLUS
11187: PUSH
11188: LD_VAR 0 15
11192: LESS
11193: IFFALSE 11222
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11195: LD_ADDR_VAR 0 18
11199: PUSH
11200: LD_INT 7
11202: PUSH
11203: LD_INT 28
11205: PUSH
11206: LD_INT 45
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: PUSH
11214: LD_VAR 0 12
11218: ARRAY
11219: ST_TO_ADDR
// break ;
11220: GO 11224
// end ; end ; end ;
11222: GO 11053
11224: POP
11225: POP
// end ; if not weapon then
11226: LD_VAR 0 18
11230: NOT
11231: IFFALSE 11291
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11233: LD_ADDR_VAR 0 5
11237: PUSH
11238: LD_VAR 0 5
11242: PUSH
11243: LD_INT 11
11245: PUSH
11246: LD_INT 30
11248: PUSH
11249: LD_INT 49
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: DIFF
11257: ST_TO_ADDR
// if not list then
11258: LD_VAR 0 5
11262: NOT
11263: IFFALSE 11267
// exit ;
11265: GO 11409
// weapon := list [ rand ( 1 , list ) ] ;
11267: LD_ADDR_VAR 0 18
11271: PUSH
11272: LD_VAR 0 5
11276: PUSH
11277: LD_INT 1
11279: PPUSH
11280: LD_VAR 0 5
11284: PPUSH
11285: CALL_OW 12
11289: ARRAY
11290: ST_TO_ADDR
// end ; if weapon then
11291: LD_VAR 0 18
11295: IFFALSE 11409
// begin tmp := CostOfWeapon ( weapon ) ;
11297: LD_ADDR_VAR 0 14
11301: PUSH
11302: LD_VAR 0 18
11306: PPUSH
11307: CALL_OW 451
11311: ST_TO_ADDR
// j := GetBase ( tower ) ;
11312: LD_ADDR_VAR 0 9
11316: PUSH
11317: LD_VAR 0 1
11321: PPUSH
11322: CALL_OW 274
11326: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11327: LD_VAR 0 9
11331: PPUSH
11332: LD_INT 1
11334: PPUSH
11335: CALL_OW 275
11339: PUSH
11340: LD_VAR 0 14
11344: PUSH
11345: LD_INT 1
11347: ARRAY
11348: GREATEREQUAL
11349: PUSH
11350: LD_VAR 0 9
11354: PPUSH
11355: LD_INT 2
11357: PPUSH
11358: CALL_OW 275
11362: PUSH
11363: LD_VAR 0 14
11367: PUSH
11368: LD_INT 2
11370: ARRAY
11371: GREATEREQUAL
11372: AND
11373: PUSH
11374: LD_VAR 0 9
11378: PPUSH
11379: LD_INT 3
11381: PPUSH
11382: CALL_OW 275
11386: PUSH
11387: LD_VAR 0 14
11391: PUSH
11392: LD_INT 3
11394: ARRAY
11395: GREATEREQUAL
11396: AND
11397: IFFALSE 11409
// result := weapon ;
11399: LD_ADDR_VAR 0 3
11403: PUSH
11404: LD_VAR 0 18
11408: ST_TO_ADDR
// end ; end ;
11409: LD_VAR 0 3
11413: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11414: LD_INT 0
11416: PPUSH
11417: PPUSH
// result := true ;
11418: LD_ADDR_VAR 0 3
11422: PUSH
11423: LD_INT 1
11425: ST_TO_ADDR
// if array1 = array2 then
11426: LD_VAR 0 1
11430: PUSH
11431: LD_VAR 0 2
11435: EQUAL
11436: IFFALSE 11496
// begin for i = 1 to array1 do
11438: LD_ADDR_VAR 0 4
11442: PUSH
11443: DOUBLE
11444: LD_INT 1
11446: DEC
11447: ST_TO_ADDR
11448: LD_VAR 0 1
11452: PUSH
11453: FOR_TO
11454: IFFALSE 11492
// if array1 [ i ] <> array2 [ i ] then
11456: LD_VAR 0 1
11460: PUSH
11461: LD_VAR 0 4
11465: ARRAY
11466: PUSH
11467: LD_VAR 0 2
11471: PUSH
11472: LD_VAR 0 4
11476: ARRAY
11477: NONEQUAL
11478: IFFALSE 11490
// begin result := false ;
11480: LD_ADDR_VAR 0 3
11484: PUSH
11485: LD_INT 0
11487: ST_TO_ADDR
// break ;
11488: GO 11492
// end ;
11490: GO 11453
11492: POP
11493: POP
// end else
11494: GO 11504
// result := false ;
11496: LD_ADDR_VAR 0 3
11500: PUSH
11501: LD_INT 0
11503: ST_TO_ADDR
// end ;
11504: LD_VAR 0 3
11508: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11509: LD_INT 0
11511: PPUSH
11512: PPUSH
// if not array1 or not array2 then
11513: LD_VAR 0 1
11517: NOT
11518: PUSH
11519: LD_VAR 0 2
11523: NOT
11524: OR
11525: IFFALSE 11529
// exit ;
11527: GO 11593
// result := true ;
11529: LD_ADDR_VAR 0 3
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// for i = 1 to array1 do
11537: LD_ADDR_VAR 0 4
11541: PUSH
11542: DOUBLE
11543: LD_INT 1
11545: DEC
11546: ST_TO_ADDR
11547: LD_VAR 0 1
11551: PUSH
11552: FOR_TO
11553: IFFALSE 11591
// if array1 [ i ] <> array2 [ i ] then
11555: LD_VAR 0 1
11559: PUSH
11560: LD_VAR 0 4
11564: ARRAY
11565: PUSH
11566: LD_VAR 0 2
11570: PUSH
11571: LD_VAR 0 4
11575: ARRAY
11576: NONEQUAL
11577: IFFALSE 11589
// begin result := false ;
11579: LD_ADDR_VAR 0 3
11583: PUSH
11584: LD_INT 0
11586: ST_TO_ADDR
// break ;
11587: GO 11591
// end ;
11589: GO 11552
11591: POP
11592: POP
// end ;
11593: LD_VAR 0 3
11597: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11598: LD_INT 0
11600: PPUSH
11601: PPUSH
11602: PPUSH
// pom := GetBase ( fac ) ;
11603: LD_ADDR_VAR 0 5
11607: PUSH
11608: LD_VAR 0 1
11612: PPUSH
11613: CALL_OW 274
11617: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11618: LD_ADDR_VAR 0 4
11622: PUSH
11623: LD_VAR 0 2
11627: PUSH
11628: LD_INT 1
11630: ARRAY
11631: PPUSH
11632: LD_VAR 0 2
11636: PUSH
11637: LD_INT 2
11639: ARRAY
11640: PPUSH
11641: LD_VAR 0 2
11645: PUSH
11646: LD_INT 3
11648: ARRAY
11649: PPUSH
11650: LD_VAR 0 2
11654: PUSH
11655: LD_INT 4
11657: ARRAY
11658: PPUSH
11659: CALL_OW 449
11663: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11664: LD_ADDR_VAR 0 3
11668: PUSH
11669: LD_VAR 0 5
11673: PPUSH
11674: LD_INT 1
11676: PPUSH
11677: CALL_OW 275
11681: PUSH
11682: LD_VAR 0 4
11686: PUSH
11687: LD_INT 1
11689: ARRAY
11690: GREATEREQUAL
11691: PUSH
11692: LD_VAR 0 5
11696: PPUSH
11697: LD_INT 2
11699: PPUSH
11700: CALL_OW 275
11704: PUSH
11705: LD_VAR 0 4
11709: PUSH
11710: LD_INT 2
11712: ARRAY
11713: GREATEREQUAL
11714: AND
11715: PUSH
11716: LD_VAR 0 5
11720: PPUSH
11721: LD_INT 3
11723: PPUSH
11724: CALL_OW 275
11728: PUSH
11729: LD_VAR 0 4
11733: PUSH
11734: LD_INT 3
11736: ARRAY
11737: GREATEREQUAL
11738: AND
11739: ST_TO_ADDR
// end ;
11740: LD_VAR 0 3
11744: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11745: LD_INT 0
11747: PPUSH
11748: PPUSH
11749: PPUSH
11750: PPUSH
// pom := GetBase ( building ) ;
11751: LD_ADDR_VAR 0 3
11755: PUSH
11756: LD_VAR 0 1
11760: PPUSH
11761: CALL_OW 274
11765: ST_TO_ADDR
// if not pom then
11766: LD_VAR 0 3
11770: NOT
11771: IFFALSE 11775
// exit ;
11773: GO 11945
// btype := GetBType ( building ) ;
11775: LD_ADDR_VAR 0 5
11779: PUSH
11780: LD_VAR 0 1
11784: PPUSH
11785: CALL_OW 266
11789: ST_TO_ADDR
// if btype = b_armoury then
11790: LD_VAR 0 5
11794: PUSH
11795: LD_INT 4
11797: EQUAL
11798: IFFALSE 11808
// btype := b_barracks ;
11800: LD_ADDR_VAR 0 5
11804: PUSH
11805: LD_INT 5
11807: ST_TO_ADDR
// if btype = b_depot then
11808: LD_VAR 0 5
11812: PUSH
11813: LD_INT 0
11815: EQUAL
11816: IFFALSE 11826
// btype := b_warehouse ;
11818: LD_ADDR_VAR 0 5
11822: PUSH
11823: LD_INT 1
11825: ST_TO_ADDR
// if btype = b_workshop then
11826: LD_VAR 0 5
11830: PUSH
11831: LD_INT 2
11833: EQUAL
11834: IFFALSE 11844
// btype := b_factory ;
11836: LD_ADDR_VAR 0 5
11840: PUSH
11841: LD_INT 3
11843: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11844: LD_ADDR_VAR 0 4
11848: PUSH
11849: LD_VAR 0 5
11853: PPUSH
11854: LD_VAR 0 1
11858: PPUSH
11859: CALL_OW 248
11863: PPUSH
11864: CALL_OW 450
11868: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11869: LD_ADDR_VAR 0 2
11873: PUSH
11874: LD_VAR 0 3
11878: PPUSH
11879: LD_INT 1
11881: PPUSH
11882: CALL_OW 275
11886: PUSH
11887: LD_VAR 0 4
11891: PUSH
11892: LD_INT 1
11894: ARRAY
11895: GREATEREQUAL
11896: PUSH
11897: LD_VAR 0 3
11901: PPUSH
11902: LD_INT 2
11904: PPUSH
11905: CALL_OW 275
11909: PUSH
11910: LD_VAR 0 4
11914: PUSH
11915: LD_INT 2
11917: ARRAY
11918: GREATEREQUAL
11919: AND
11920: PUSH
11921: LD_VAR 0 3
11925: PPUSH
11926: LD_INT 3
11928: PPUSH
11929: CALL_OW 275
11933: PUSH
11934: LD_VAR 0 4
11938: PUSH
11939: LD_INT 3
11941: ARRAY
11942: GREATEREQUAL
11943: AND
11944: ST_TO_ADDR
// end ;
11945: LD_VAR 0 2
11949: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
11950: LD_INT 0
11952: PPUSH
11953: PPUSH
11954: PPUSH
// pom := GetBase ( building ) ;
11955: LD_ADDR_VAR 0 4
11959: PUSH
11960: LD_VAR 0 1
11964: PPUSH
11965: CALL_OW 274
11969: ST_TO_ADDR
// if not pom then
11970: LD_VAR 0 4
11974: NOT
11975: IFFALSE 11979
// exit ;
11977: GO 12080
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11979: LD_ADDR_VAR 0 5
11983: PUSH
11984: LD_VAR 0 2
11988: PPUSH
11989: LD_VAR 0 1
11993: PPUSH
11994: CALL_OW 248
11998: PPUSH
11999: CALL_OW 450
12003: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12004: LD_ADDR_VAR 0 3
12008: PUSH
12009: LD_VAR 0 4
12013: PPUSH
12014: LD_INT 1
12016: PPUSH
12017: CALL_OW 275
12021: PUSH
12022: LD_VAR 0 5
12026: PUSH
12027: LD_INT 1
12029: ARRAY
12030: GREATEREQUAL
12031: PUSH
12032: LD_VAR 0 4
12036: PPUSH
12037: LD_INT 2
12039: PPUSH
12040: CALL_OW 275
12044: PUSH
12045: LD_VAR 0 5
12049: PUSH
12050: LD_INT 2
12052: ARRAY
12053: GREATEREQUAL
12054: AND
12055: PUSH
12056: LD_VAR 0 4
12060: PPUSH
12061: LD_INT 3
12063: PPUSH
12064: CALL_OW 275
12068: PUSH
12069: LD_VAR 0 5
12073: PUSH
12074: LD_INT 3
12076: ARRAY
12077: GREATEREQUAL
12078: AND
12079: ST_TO_ADDR
// end ;
12080: LD_VAR 0 3
12084: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12085: LD_INT 0
12087: PPUSH
12088: PPUSH
12089: PPUSH
12090: PPUSH
12091: PPUSH
12092: PPUSH
12093: PPUSH
12094: PPUSH
12095: PPUSH
12096: PPUSH
12097: PPUSH
// result := false ;
12098: LD_ADDR_VAR 0 8
12102: PUSH
12103: LD_INT 0
12105: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12106: LD_VAR 0 5
12110: NOT
12111: PUSH
12112: LD_VAR 0 1
12116: NOT
12117: OR
12118: PUSH
12119: LD_VAR 0 2
12123: NOT
12124: OR
12125: PUSH
12126: LD_VAR 0 3
12130: NOT
12131: OR
12132: IFFALSE 12136
// exit ;
12134: GO 12950
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12136: LD_ADDR_VAR 0 14
12140: PUSH
12141: LD_VAR 0 1
12145: PPUSH
12146: LD_VAR 0 2
12150: PPUSH
12151: LD_VAR 0 3
12155: PPUSH
12156: LD_VAR 0 4
12160: PPUSH
12161: LD_VAR 0 5
12165: PUSH
12166: LD_INT 1
12168: ARRAY
12169: PPUSH
12170: CALL_OW 248
12174: PPUSH
12175: LD_INT 0
12177: PPUSH
12178: CALL 14183 0 6
12182: ST_TO_ADDR
// if not hexes then
12183: LD_VAR 0 14
12187: NOT
12188: IFFALSE 12192
// exit ;
12190: GO 12950
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12192: LD_ADDR_VAR 0 17
12196: PUSH
12197: LD_VAR 0 5
12201: PPUSH
12202: LD_INT 22
12204: PUSH
12205: LD_VAR 0 13
12209: PPUSH
12210: CALL_OW 255
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 2
12221: PUSH
12222: LD_INT 30
12224: PUSH
12225: LD_INT 0
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 30
12234: PUSH
12235: LD_INT 1
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PPUSH
12251: CALL_OW 72
12255: ST_TO_ADDR
// for i = 1 to hexes do
12256: LD_ADDR_VAR 0 9
12260: PUSH
12261: DOUBLE
12262: LD_INT 1
12264: DEC
12265: ST_TO_ADDR
12266: LD_VAR 0 14
12270: PUSH
12271: FOR_TO
12272: IFFALSE 12948
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12274: LD_ADDR_VAR 0 13
12278: PUSH
12279: LD_VAR 0 14
12283: PUSH
12284: LD_VAR 0 9
12288: ARRAY
12289: PUSH
12290: LD_INT 1
12292: ARRAY
12293: PPUSH
12294: LD_VAR 0 14
12298: PUSH
12299: LD_VAR 0 9
12303: ARRAY
12304: PUSH
12305: LD_INT 2
12307: ARRAY
12308: PPUSH
12309: CALL_OW 428
12313: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12314: LD_VAR 0 14
12318: PUSH
12319: LD_VAR 0 9
12323: ARRAY
12324: PUSH
12325: LD_INT 1
12327: ARRAY
12328: PPUSH
12329: LD_VAR 0 14
12333: PUSH
12334: LD_VAR 0 9
12338: ARRAY
12339: PUSH
12340: LD_INT 2
12342: ARRAY
12343: PPUSH
12344: CALL_OW 351
12348: PUSH
12349: LD_VAR 0 14
12353: PUSH
12354: LD_VAR 0 9
12358: ARRAY
12359: PUSH
12360: LD_INT 1
12362: ARRAY
12363: PPUSH
12364: LD_VAR 0 14
12368: PUSH
12369: LD_VAR 0 9
12373: ARRAY
12374: PUSH
12375: LD_INT 2
12377: ARRAY
12378: PPUSH
12379: CALL_OW 488
12383: NOT
12384: OR
12385: PUSH
12386: LD_VAR 0 13
12390: PPUSH
12391: CALL_OW 247
12395: PUSH
12396: LD_INT 3
12398: EQUAL
12399: OR
12400: IFFALSE 12406
// exit ;
12402: POP
12403: POP
12404: GO 12950
// if not tmp then
12406: LD_VAR 0 13
12410: NOT
12411: IFFALSE 12415
// continue ;
12413: GO 12271
// result := true ;
12415: LD_ADDR_VAR 0 8
12419: PUSH
12420: LD_INT 1
12422: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12423: LD_VAR 0 6
12427: PUSH
12428: LD_VAR 0 13
12432: PPUSH
12433: CALL_OW 247
12437: PUSH
12438: LD_INT 2
12440: EQUAL
12441: AND
12442: PUSH
12443: LD_VAR 0 13
12447: PPUSH
12448: CALL_OW 263
12452: PUSH
12453: LD_INT 1
12455: EQUAL
12456: AND
12457: IFFALSE 12621
// begin if IsDrivenBy ( tmp ) then
12459: LD_VAR 0 13
12463: PPUSH
12464: CALL_OW 311
12468: IFFALSE 12472
// continue ;
12470: GO 12271
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12472: LD_VAR 0 6
12476: PPUSH
12477: LD_INT 3
12479: PUSH
12480: LD_INT 60
12482: PUSH
12483: EMPTY
12484: LIST
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 3
12492: PUSH
12493: LD_INT 55
12495: PUSH
12496: EMPTY
12497: LIST
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 72
12511: IFFALSE 12619
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12513: LD_ADDR_VAR 0 18
12517: PUSH
12518: LD_VAR 0 6
12522: PPUSH
12523: LD_INT 3
12525: PUSH
12526: LD_INT 60
12528: PUSH
12529: EMPTY
12530: LIST
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 3
12538: PUSH
12539: LD_INT 55
12541: PUSH
12542: EMPTY
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PPUSH
12553: CALL_OW 72
12557: PUSH
12558: LD_INT 1
12560: ARRAY
12561: ST_TO_ADDR
// if IsInUnit ( driver ) then
12562: LD_VAR 0 18
12566: PPUSH
12567: CALL_OW 310
12571: IFFALSE 12582
// ComExit ( driver ) ;
12573: LD_VAR 0 18
12577: PPUSH
12578: CALL 37962 0 1
// AddComEnterUnit ( driver , tmp ) ;
12582: LD_VAR 0 18
12586: PPUSH
12587: LD_VAR 0 13
12591: PPUSH
12592: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12596: LD_VAR 0 18
12600: PPUSH
12601: LD_VAR 0 7
12605: PPUSH
12606: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12610: LD_VAR 0 18
12614: PPUSH
12615: CALL_OW 181
// end ; continue ;
12619: GO 12271
// end ; if not cleaners or not tmp in cleaners then
12621: LD_VAR 0 6
12625: NOT
12626: PUSH
12627: LD_VAR 0 13
12631: PUSH
12632: LD_VAR 0 6
12636: IN
12637: NOT
12638: OR
12639: IFFALSE 12946
// begin if dep then
12641: LD_VAR 0 17
12645: IFFALSE 12781
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12647: LD_ADDR_VAR 0 16
12651: PUSH
12652: LD_VAR 0 17
12656: PUSH
12657: LD_INT 1
12659: ARRAY
12660: PPUSH
12661: CALL_OW 250
12665: PPUSH
12666: LD_VAR 0 17
12670: PUSH
12671: LD_INT 1
12673: ARRAY
12674: PPUSH
12675: CALL_OW 254
12679: PPUSH
12680: LD_INT 5
12682: PPUSH
12683: CALL_OW 272
12687: PUSH
12688: LD_VAR 0 17
12692: PUSH
12693: LD_INT 1
12695: ARRAY
12696: PPUSH
12697: CALL_OW 251
12701: PPUSH
12702: LD_VAR 0 17
12706: PUSH
12707: LD_INT 1
12709: ARRAY
12710: PPUSH
12711: CALL_OW 254
12715: PPUSH
12716: LD_INT 5
12718: PPUSH
12719: CALL_OW 273
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12728: LD_VAR 0 16
12732: PUSH
12733: LD_INT 1
12735: ARRAY
12736: PPUSH
12737: LD_VAR 0 16
12741: PUSH
12742: LD_INT 2
12744: ARRAY
12745: PPUSH
12746: CALL_OW 488
12750: IFFALSE 12781
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12752: LD_VAR 0 13
12756: PPUSH
12757: LD_VAR 0 16
12761: PUSH
12762: LD_INT 1
12764: ARRAY
12765: PPUSH
12766: LD_VAR 0 16
12770: PUSH
12771: LD_INT 2
12773: ARRAY
12774: PPUSH
12775: CALL_OW 111
// continue ;
12779: GO 12271
// end ; end ; r := GetDir ( tmp ) ;
12781: LD_ADDR_VAR 0 15
12785: PUSH
12786: LD_VAR 0 13
12790: PPUSH
12791: CALL_OW 254
12795: ST_TO_ADDR
// if r = 5 then
12796: LD_VAR 0 15
12800: PUSH
12801: LD_INT 5
12803: EQUAL
12804: IFFALSE 12814
// r := 0 ;
12806: LD_ADDR_VAR 0 15
12810: PUSH
12811: LD_INT 0
12813: ST_TO_ADDR
// for j = r to 5 do
12814: LD_ADDR_VAR 0 10
12818: PUSH
12819: DOUBLE
12820: LD_VAR 0 15
12824: DEC
12825: ST_TO_ADDR
12826: LD_INT 5
12828: PUSH
12829: FOR_TO
12830: IFFALSE 12944
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12832: LD_ADDR_VAR 0 11
12836: PUSH
12837: LD_VAR 0 13
12841: PPUSH
12842: CALL_OW 250
12846: PPUSH
12847: LD_VAR 0 10
12851: PPUSH
12852: LD_INT 2
12854: PPUSH
12855: CALL_OW 272
12859: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12860: LD_ADDR_VAR 0 12
12864: PUSH
12865: LD_VAR 0 13
12869: PPUSH
12870: CALL_OW 251
12874: PPUSH
12875: LD_VAR 0 10
12879: PPUSH
12880: LD_INT 2
12882: PPUSH
12883: CALL_OW 273
12887: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
12888: LD_VAR 0 11
12892: PPUSH
12893: LD_VAR 0 12
12897: PPUSH
12898: CALL_OW 488
12902: PUSH
12903: LD_VAR 0 11
12907: PPUSH
12908: LD_VAR 0 12
12912: PPUSH
12913: CALL_OW 428
12917: NOT
12918: AND
12919: IFFALSE 12942
// begin ComMoveXY ( tmp , _x , _y ) ;
12921: LD_VAR 0 13
12925: PPUSH
12926: LD_VAR 0 11
12930: PPUSH
12931: LD_VAR 0 12
12935: PPUSH
12936: CALL_OW 111
// break ;
12940: GO 12944
// end ; end ;
12942: GO 12829
12944: POP
12945: POP
// end ; end ;
12946: GO 12271
12948: POP
12949: POP
// end ;
12950: LD_VAR 0 8
12954: RET
// export function BuildingTechInvented ( side , btype ) ; begin
12955: LD_INT 0
12957: PPUSH
// result := true ;
12958: LD_ADDR_VAR 0 3
12962: PUSH
12963: LD_INT 1
12965: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
12966: LD_VAR 0 2
12970: PUSH
12971: LD_INT 24
12973: DOUBLE
12974: EQUAL
12975: IFTRUE 12985
12977: LD_INT 33
12979: DOUBLE
12980: EQUAL
12981: IFTRUE 12985
12983: GO 13010
12985: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
12986: LD_ADDR_VAR 0 3
12990: PUSH
12991: LD_INT 32
12993: PPUSH
12994: LD_VAR 0 1
12998: PPUSH
12999: CALL_OW 321
13003: PUSH
13004: LD_INT 2
13006: EQUAL
13007: ST_TO_ADDR
13008: GO 13326
13010: LD_INT 20
13012: DOUBLE
13013: EQUAL
13014: IFTRUE 13018
13016: GO 13043
13018: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13019: LD_ADDR_VAR 0 3
13023: PUSH
13024: LD_INT 6
13026: PPUSH
13027: LD_VAR 0 1
13031: PPUSH
13032: CALL_OW 321
13036: PUSH
13037: LD_INT 2
13039: EQUAL
13040: ST_TO_ADDR
13041: GO 13326
13043: LD_INT 22
13045: DOUBLE
13046: EQUAL
13047: IFTRUE 13057
13049: LD_INT 36
13051: DOUBLE
13052: EQUAL
13053: IFTRUE 13057
13055: GO 13082
13057: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13058: LD_ADDR_VAR 0 3
13062: PUSH
13063: LD_INT 15
13065: PPUSH
13066: LD_VAR 0 1
13070: PPUSH
13071: CALL_OW 321
13075: PUSH
13076: LD_INT 2
13078: EQUAL
13079: ST_TO_ADDR
13080: GO 13326
13082: LD_INT 30
13084: DOUBLE
13085: EQUAL
13086: IFTRUE 13090
13088: GO 13115
13090: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13091: LD_ADDR_VAR 0 3
13095: PUSH
13096: LD_INT 20
13098: PPUSH
13099: LD_VAR 0 1
13103: PPUSH
13104: CALL_OW 321
13108: PUSH
13109: LD_INT 2
13111: EQUAL
13112: ST_TO_ADDR
13113: GO 13326
13115: LD_INT 28
13117: DOUBLE
13118: EQUAL
13119: IFTRUE 13129
13121: LD_INT 21
13123: DOUBLE
13124: EQUAL
13125: IFTRUE 13129
13127: GO 13154
13129: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13130: LD_ADDR_VAR 0 3
13134: PUSH
13135: LD_INT 21
13137: PPUSH
13138: LD_VAR 0 1
13142: PPUSH
13143: CALL_OW 321
13147: PUSH
13148: LD_INT 2
13150: EQUAL
13151: ST_TO_ADDR
13152: GO 13326
13154: LD_INT 16
13156: DOUBLE
13157: EQUAL
13158: IFTRUE 13162
13160: GO 13187
13162: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13163: LD_ADDR_VAR 0 3
13167: PUSH
13168: LD_INT 84
13170: PPUSH
13171: LD_VAR 0 1
13175: PPUSH
13176: CALL_OW 321
13180: PUSH
13181: LD_INT 2
13183: EQUAL
13184: ST_TO_ADDR
13185: GO 13326
13187: LD_INT 19
13189: DOUBLE
13190: EQUAL
13191: IFTRUE 13201
13193: LD_INT 23
13195: DOUBLE
13196: EQUAL
13197: IFTRUE 13201
13199: GO 13226
13201: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13202: LD_ADDR_VAR 0 3
13206: PUSH
13207: LD_INT 83
13209: PPUSH
13210: LD_VAR 0 1
13214: PPUSH
13215: CALL_OW 321
13219: PUSH
13220: LD_INT 2
13222: EQUAL
13223: ST_TO_ADDR
13224: GO 13326
13226: LD_INT 17
13228: DOUBLE
13229: EQUAL
13230: IFTRUE 13234
13232: GO 13259
13234: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13235: LD_ADDR_VAR 0 3
13239: PUSH
13240: LD_INT 39
13242: PPUSH
13243: LD_VAR 0 1
13247: PPUSH
13248: CALL_OW 321
13252: PUSH
13253: LD_INT 2
13255: EQUAL
13256: ST_TO_ADDR
13257: GO 13326
13259: LD_INT 18
13261: DOUBLE
13262: EQUAL
13263: IFTRUE 13267
13265: GO 13292
13267: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13268: LD_ADDR_VAR 0 3
13272: PUSH
13273: LD_INT 40
13275: PPUSH
13276: LD_VAR 0 1
13280: PPUSH
13281: CALL_OW 321
13285: PUSH
13286: LD_INT 2
13288: EQUAL
13289: ST_TO_ADDR
13290: GO 13326
13292: LD_INT 27
13294: DOUBLE
13295: EQUAL
13296: IFTRUE 13300
13298: GO 13325
13300: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13301: LD_ADDR_VAR 0 3
13305: PUSH
13306: LD_INT 35
13308: PPUSH
13309: LD_VAR 0 1
13313: PPUSH
13314: CALL_OW 321
13318: PUSH
13319: LD_INT 2
13321: EQUAL
13322: ST_TO_ADDR
13323: GO 13326
13325: POP
// end ;
13326: LD_VAR 0 3
13330: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13331: LD_INT 0
13333: PPUSH
13334: PPUSH
13335: PPUSH
13336: PPUSH
13337: PPUSH
13338: PPUSH
13339: PPUSH
13340: PPUSH
13341: PPUSH
13342: PPUSH
13343: PPUSH
// result := false ;
13344: LD_ADDR_VAR 0 6
13348: PUSH
13349: LD_INT 0
13351: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13352: LD_VAR 0 1
13356: NOT
13357: PUSH
13358: LD_VAR 0 1
13362: PPUSH
13363: CALL_OW 266
13367: PUSH
13368: LD_INT 0
13370: PUSH
13371: LD_INT 1
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: IN
13378: NOT
13379: OR
13380: PUSH
13381: LD_VAR 0 2
13385: NOT
13386: OR
13387: PUSH
13388: LD_VAR 0 5
13392: PUSH
13393: LD_INT 0
13395: PUSH
13396: LD_INT 1
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: LD_INT 3
13404: PUSH
13405: LD_INT 4
13407: PUSH
13408: LD_INT 5
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: IN
13419: NOT
13420: OR
13421: PUSH
13422: LD_VAR 0 3
13426: PPUSH
13427: LD_VAR 0 4
13431: PPUSH
13432: CALL_OW 488
13436: NOT
13437: OR
13438: IFFALSE 13442
// exit ;
13440: GO 14178
// side := GetSide ( depot ) ;
13442: LD_ADDR_VAR 0 9
13446: PUSH
13447: LD_VAR 0 1
13451: PPUSH
13452: CALL_OW 255
13456: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13457: LD_VAR 0 9
13461: PPUSH
13462: LD_VAR 0 2
13466: PPUSH
13467: CALL 12955 0 2
13471: NOT
13472: IFFALSE 13476
// exit ;
13474: GO 14178
// pom := GetBase ( depot ) ;
13476: LD_ADDR_VAR 0 10
13480: PUSH
13481: LD_VAR 0 1
13485: PPUSH
13486: CALL_OW 274
13490: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13491: LD_ADDR_VAR 0 11
13495: PUSH
13496: LD_VAR 0 2
13500: PPUSH
13501: LD_VAR 0 1
13505: PPUSH
13506: CALL_OW 248
13510: PPUSH
13511: CALL_OW 450
13515: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13516: LD_VAR 0 10
13520: PPUSH
13521: LD_INT 1
13523: PPUSH
13524: CALL_OW 275
13528: PUSH
13529: LD_VAR 0 11
13533: PUSH
13534: LD_INT 1
13536: ARRAY
13537: GREATEREQUAL
13538: PUSH
13539: LD_VAR 0 10
13543: PPUSH
13544: LD_INT 2
13546: PPUSH
13547: CALL_OW 275
13551: PUSH
13552: LD_VAR 0 11
13556: PUSH
13557: LD_INT 2
13559: ARRAY
13560: GREATEREQUAL
13561: AND
13562: PUSH
13563: LD_VAR 0 10
13567: PPUSH
13568: LD_INT 3
13570: PPUSH
13571: CALL_OW 275
13575: PUSH
13576: LD_VAR 0 11
13580: PUSH
13581: LD_INT 3
13583: ARRAY
13584: GREATEREQUAL
13585: AND
13586: NOT
13587: IFFALSE 13591
// exit ;
13589: GO 14178
// if GetBType ( depot ) = b_depot then
13591: LD_VAR 0 1
13595: PPUSH
13596: CALL_OW 266
13600: PUSH
13601: LD_INT 0
13603: EQUAL
13604: IFFALSE 13616
// dist := 28 else
13606: LD_ADDR_VAR 0 14
13610: PUSH
13611: LD_INT 28
13613: ST_TO_ADDR
13614: GO 13624
// dist := 36 ;
13616: LD_ADDR_VAR 0 14
13620: PUSH
13621: LD_INT 36
13623: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13624: LD_VAR 0 1
13628: PPUSH
13629: LD_VAR 0 3
13633: PPUSH
13634: LD_VAR 0 4
13638: PPUSH
13639: CALL_OW 297
13643: PUSH
13644: LD_VAR 0 14
13648: GREATER
13649: IFFALSE 13653
// exit ;
13651: GO 14178
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13653: LD_ADDR_VAR 0 12
13657: PUSH
13658: LD_VAR 0 2
13662: PPUSH
13663: LD_VAR 0 3
13667: PPUSH
13668: LD_VAR 0 4
13672: PPUSH
13673: LD_VAR 0 5
13677: PPUSH
13678: LD_VAR 0 1
13682: PPUSH
13683: CALL_OW 248
13687: PPUSH
13688: LD_INT 0
13690: PPUSH
13691: CALL 14183 0 6
13695: ST_TO_ADDR
// if not hexes then
13696: LD_VAR 0 12
13700: NOT
13701: IFFALSE 13705
// exit ;
13703: GO 14178
// hex := GetHexInfo ( x , y ) ;
13705: LD_ADDR_VAR 0 15
13709: PUSH
13710: LD_VAR 0 3
13714: PPUSH
13715: LD_VAR 0 4
13719: PPUSH
13720: CALL_OW 546
13724: ST_TO_ADDR
// if hex [ 1 ] then
13725: LD_VAR 0 15
13729: PUSH
13730: LD_INT 1
13732: ARRAY
13733: IFFALSE 13737
// exit ;
13735: GO 14178
// height := hex [ 2 ] ;
13737: LD_ADDR_VAR 0 13
13741: PUSH
13742: LD_VAR 0 15
13746: PUSH
13747: LD_INT 2
13749: ARRAY
13750: ST_TO_ADDR
// for i = 1 to hexes do
13751: LD_ADDR_VAR 0 7
13755: PUSH
13756: DOUBLE
13757: LD_INT 1
13759: DEC
13760: ST_TO_ADDR
13761: LD_VAR 0 12
13765: PUSH
13766: FOR_TO
13767: IFFALSE 14097
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13769: LD_VAR 0 12
13773: PUSH
13774: LD_VAR 0 7
13778: ARRAY
13779: PUSH
13780: LD_INT 1
13782: ARRAY
13783: PPUSH
13784: LD_VAR 0 12
13788: PUSH
13789: LD_VAR 0 7
13793: ARRAY
13794: PUSH
13795: LD_INT 2
13797: ARRAY
13798: PPUSH
13799: CALL_OW 488
13803: NOT
13804: PUSH
13805: LD_VAR 0 12
13809: PUSH
13810: LD_VAR 0 7
13814: ARRAY
13815: PUSH
13816: LD_INT 1
13818: ARRAY
13819: PPUSH
13820: LD_VAR 0 12
13824: PUSH
13825: LD_VAR 0 7
13829: ARRAY
13830: PUSH
13831: LD_INT 2
13833: ARRAY
13834: PPUSH
13835: CALL_OW 428
13839: PUSH
13840: LD_INT 0
13842: GREATER
13843: OR
13844: PUSH
13845: LD_VAR 0 12
13849: PUSH
13850: LD_VAR 0 7
13854: ARRAY
13855: PUSH
13856: LD_INT 1
13858: ARRAY
13859: PPUSH
13860: LD_VAR 0 12
13864: PUSH
13865: LD_VAR 0 7
13869: ARRAY
13870: PUSH
13871: LD_INT 2
13873: ARRAY
13874: PPUSH
13875: CALL_OW 351
13879: OR
13880: IFFALSE 13886
// exit ;
13882: POP
13883: POP
13884: GO 14178
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13886: LD_ADDR_VAR 0 8
13890: PUSH
13891: LD_VAR 0 12
13895: PUSH
13896: LD_VAR 0 7
13900: ARRAY
13901: PUSH
13902: LD_INT 1
13904: ARRAY
13905: PPUSH
13906: LD_VAR 0 12
13910: PUSH
13911: LD_VAR 0 7
13915: ARRAY
13916: PUSH
13917: LD_INT 2
13919: ARRAY
13920: PPUSH
13921: CALL_OW 546
13925: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
13926: LD_VAR 0 8
13930: PUSH
13931: LD_INT 1
13933: ARRAY
13934: PUSH
13935: LD_VAR 0 8
13939: PUSH
13940: LD_INT 2
13942: ARRAY
13943: PUSH
13944: LD_VAR 0 13
13948: PUSH
13949: LD_INT 2
13951: PLUS
13952: GREATER
13953: OR
13954: PUSH
13955: LD_VAR 0 8
13959: PUSH
13960: LD_INT 2
13962: ARRAY
13963: PUSH
13964: LD_VAR 0 13
13968: PUSH
13969: LD_INT 2
13971: MINUS
13972: LESS
13973: OR
13974: PUSH
13975: LD_VAR 0 8
13979: PUSH
13980: LD_INT 3
13982: ARRAY
13983: PUSH
13984: LD_INT 0
13986: PUSH
13987: LD_INT 8
13989: PUSH
13990: LD_INT 9
13992: PUSH
13993: LD_INT 10
13995: PUSH
13996: LD_INT 11
13998: PUSH
13999: LD_INT 12
14001: PUSH
14002: LD_INT 13
14004: PUSH
14005: LD_INT 16
14007: PUSH
14008: LD_INT 17
14010: PUSH
14011: LD_INT 18
14013: PUSH
14014: LD_INT 19
14016: PUSH
14017: LD_INT 20
14019: PUSH
14020: LD_INT 21
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: IN
14038: NOT
14039: OR
14040: PUSH
14041: LD_VAR 0 8
14045: PUSH
14046: LD_INT 5
14048: ARRAY
14049: NOT
14050: OR
14051: PUSH
14052: LD_VAR 0 8
14056: PUSH
14057: LD_INT 6
14059: ARRAY
14060: PUSH
14061: LD_INT 1
14063: PUSH
14064: LD_INT 2
14066: PUSH
14067: LD_INT 7
14069: PUSH
14070: LD_INT 9
14072: PUSH
14073: LD_INT 10
14075: PUSH
14076: LD_INT 11
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: IN
14087: NOT
14088: OR
14089: IFFALSE 14095
// exit ;
14091: POP
14092: POP
14093: GO 14178
// end ;
14095: GO 13766
14097: POP
14098: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14099: LD_VAR 0 9
14103: PPUSH
14104: LD_VAR 0 3
14108: PPUSH
14109: LD_VAR 0 4
14113: PPUSH
14114: LD_INT 20
14116: PPUSH
14117: CALL 6130 0 4
14121: PUSH
14122: LD_INT 4
14124: ARRAY
14125: IFFALSE 14129
// exit ;
14127: GO 14178
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14129: LD_VAR 0 2
14133: PUSH
14134: LD_INT 29
14136: PUSH
14137: LD_INT 30
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: IN
14144: PUSH
14145: LD_VAR 0 3
14149: PPUSH
14150: LD_VAR 0 4
14154: PPUSH
14155: LD_VAR 0 9
14159: PPUSH
14160: CALL_OW 440
14164: NOT
14165: AND
14166: IFFALSE 14170
// exit ;
14168: GO 14178
// result := true ;
14170: LD_ADDR_VAR 0 6
14174: PUSH
14175: LD_INT 1
14177: ST_TO_ADDR
// end ;
14178: LD_VAR 0 6
14182: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14183: LD_INT 0
14185: PPUSH
14186: PPUSH
14187: PPUSH
14188: PPUSH
14189: PPUSH
14190: PPUSH
14191: PPUSH
14192: PPUSH
14193: PPUSH
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
14198: PPUSH
14199: PPUSH
14200: PPUSH
14201: PPUSH
14202: PPUSH
14203: PPUSH
14204: PPUSH
14205: PPUSH
14206: PPUSH
14207: PPUSH
14208: PPUSH
14209: PPUSH
14210: PPUSH
14211: PPUSH
14212: PPUSH
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
14219: PPUSH
14220: PPUSH
14221: PPUSH
14222: PPUSH
14223: PPUSH
14224: PPUSH
14225: PPUSH
14226: PPUSH
14227: PPUSH
14228: PPUSH
14229: PPUSH
14230: PPUSH
14231: PPUSH
14232: PPUSH
14233: PPUSH
14234: PPUSH
14235: PPUSH
14236: PPUSH
14237: PPUSH
14238: PPUSH
14239: PPUSH
14240: PPUSH
14241: PPUSH
14242: PPUSH
// result = [ ] ;
14243: LD_ADDR_VAR 0 7
14247: PUSH
14248: EMPTY
14249: ST_TO_ADDR
// temp_list = [ ] ;
14250: LD_ADDR_VAR 0 9
14254: PUSH
14255: EMPTY
14256: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14257: LD_VAR 0 4
14261: PUSH
14262: LD_INT 0
14264: PUSH
14265: LD_INT 1
14267: PUSH
14268: LD_INT 2
14270: PUSH
14271: LD_INT 3
14273: PUSH
14274: LD_INT 4
14276: PUSH
14277: LD_INT 5
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: IN
14288: NOT
14289: PUSH
14290: LD_VAR 0 1
14294: PUSH
14295: LD_INT 0
14297: PUSH
14298: LD_INT 1
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: IN
14305: PUSH
14306: LD_VAR 0 5
14310: PUSH
14311: LD_INT 1
14313: PUSH
14314: LD_INT 2
14316: PUSH
14317: LD_INT 3
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: IN
14325: NOT
14326: AND
14327: OR
14328: IFFALSE 14332
// exit ;
14330: GO 32723
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14332: LD_VAR 0 1
14336: PUSH
14337: LD_INT 6
14339: PUSH
14340: LD_INT 7
14342: PUSH
14343: LD_INT 8
14345: PUSH
14346: LD_INT 13
14348: PUSH
14349: LD_INT 12
14351: PUSH
14352: LD_INT 15
14354: PUSH
14355: LD_INT 11
14357: PUSH
14358: LD_INT 14
14360: PUSH
14361: LD_INT 10
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: IN
14375: IFFALSE 14385
// btype = b_lab ;
14377: LD_ADDR_VAR 0 1
14381: PUSH
14382: LD_INT 6
14384: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14385: LD_VAR 0 6
14389: PUSH
14390: LD_INT 0
14392: PUSH
14393: LD_INT 1
14395: PUSH
14396: LD_INT 2
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: LIST
14403: IN
14404: NOT
14405: PUSH
14406: LD_VAR 0 1
14410: PUSH
14411: LD_INT 0
14413: PUSH
14414: LD_INT 1
14416: PUSH
14417: LD_INT 2
14419: PUSH
14420: LD_INT 3
14422: PUSH
14423: LD_INT 6
14425: PUSH
14426: LD_INT 36
14428: PUSH
14429: LD_INT 4
14431: PUSH
14432: LD_INT 5
14434: PUSH
14435: LD_INT 31
14437: PUSH
14438: LD_INT 32
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: IN
14457: NOT
14458: PUSH
14459: LD_VAR 0 6
14463: PUSH
14464: LD_INT 1
14466: EQUAL
14467: AND
14468: OR
14469: PUSH
14470: LD_VAR 0 1
14474: PUSH
14475: LD_INT 2
14477: PUSH
14478: LD_INT 3
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: IN
14485: NOT
14486: PUSH
14487: LD_VAR 0 6
14491: PUSH
14492: LD_INT 2
14494: EQUAL
14495: AND
14496: OR
14497: IFFALSE 14507
// mode = 0 ;
14499: LD_ADDR_VAR 0 6
14503: PUSH
14504: LD_INT 0
14506: ST_TO_ADDR
// case mode of 0 :
14507: LD_VAR 0 6
14511: PUSH
14512: LD_INT 0
14514: DOUBLE
14515: EQUAL
14516: IFTRUE 14520
14518: GO 25973
14520: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14521: LD_ADDR_VAR 0 11
14525: PUSH
14526: LD_INT 0
14528: PUSH
14529: LD_INT 0
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 0
14538: PUSH
14539: LD_INT 1
14541: NEG
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: LD_INT 1
14549: PUSH
14550: LD_INT 0
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 1
14559: PUSH
14560: LD_INT 1
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 0
14569: PUSH
14570: LD_INT 1
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 1
14579: NEG
14580: PUSH
14581: LD_INT 0
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 1
14590: NEG
14591: PUSH
14592: LD_INT 1
14594: NEG
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: LD_INT 1
14602: NEG
14603: PUSH
14604: LD_INT 2
14606: NEG
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 0
14614: PUSH
14615: LD_INT 2
14617: NEG
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 1
14625: PUSH
14626: LD_INT 1
14628: NEG
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: LD_INT 1
14636: PUSH
14637: LD_INT 2
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 0
14646: PUSH
14647: LD_INT 2
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 1
14656: NEG
14657: PUSH
14658: LD_INT 1
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 1
14667: PUSH
14668: LD_INT 3
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: LD_INT 0
14677: PUSH
14678: LD_INT 3
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 1
14687: NEG
14688: PUSH
14689: LD_INT 2
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14714: LD_ADDR_VAR 0 12
14718: PUSH
14719: LD_INT 0
14721: PUSH
14722: LD_INT 0
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 0
14731: PUSH
14732: LD_INT 1
14734: NEG
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 1
14742: PUSH
14743: LD_INT 0
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 1
14752: PUSH
14753: LD_INT 1
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 0
14762: PUSH
14763: LD_INT 1
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: LD_INT 1
14772: NEG
14773: PUSH
14774: LD_INT 0
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 1
14783: NEG
14784: PUSH
14785: LD_INT 1
14787: NEG
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PUSH
14793: LD_INT 1
14795: PUSH
14796: LD_INT 1
14798: NEG
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 2
14806: PUSH
14807: LD_INT 0
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 2
14816: PUSH
14817: LD_INT 1
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 1
14826: NEG
14827: PUSH
14828: LD_INT 1
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 2
14837: NEG
14838: PUSH
14839: LD_INT 0
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 2
14848: NEG
14849: PUSH
14850: LD_INT 1
14852: NEG
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_INT 2
14860: NEG
14861: PUSH
14862: LD_INT 1
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 3
14871: NEG
14872: PUSH
14873: LD_INT 0
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: LD_INT 3
14882: NEG
14883: PUSH
14884: LD_INT 1
14886: NEG
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14910: LD_ADDR_VAR 0 13
14914: PUSH
14915: LD_INT 0
14917: PUSH
14918: LD_INT 0
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 0
14927: PUSH
14928: LD_INT 1
14930: NEG
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: LD_INT 0
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 1
14948: PUSH
14949: LD_INT 1
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: LD_INT 0
14958: PUSH
14959: LD_INT 1
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 1
14968: NEG
14969: PUSH
14970: LD_INT 0
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 1
14979: NEG
14980: PUSH
14981: LD_INT 1
14983: NEG
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 1
14991: NEG
14992: PUSH
14993: LD_INT 2
14995: NEG
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 2
15003: PUSH
15004: LD_INT 1
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: LD_INT 2
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 1
15023: PUSH
15024: LD_INT 2
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 2
15033: NEG
15034: PUSH
15035: LD_INT 1
15037: NEG
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 2
15045: NEG
15046: PUSH
15047: LD_INT 2
15049: NEG
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 2
15057: NEG
15058: PUSH
15059: LD_INT 3
15061: NEG
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 3
15069: NEG
15070: PUSH
15071: LD_INT 2
15073: NEG
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 3
15081: NEG
15082: PUSH
15083: LD_INT 3
15085: NEG
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15109: LD_ADDR_VAR 0 14
15113: PUSH
15114: LD_INT 0
15116: PUSH
15117: LD_INT 0
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 0
15126: PUSH
15127: LD_INT 1
15129: NEG
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: LD_INT 1
15137: PUSH
15138: LD_INT 0
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 1
15147: PUSH
15148: LD_INT 1
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 0
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 1
15167: NEG
15168: PUSH
15169: LD_INT 0
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 1
15178: NEG
15179: PUSH
15180: LD_INT 1
15182: NEG
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 1
15190: NEG
15191: PUSH
15192: LD_INT 2
15194: NEG
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 0
15202: PUSH
15203: LD_INT 2
15205: NEG
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 1
15213: PUSH
15214: LD_INT 1
15216: NEG
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 1
15224: PUSH
15225: LD_INT 2
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 0
15234: PUSH
15235: LD_INT 2
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: LD_INT 1
15244: NEG
15245: PUSH
15246: LD_INT 1
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 1
15255: NEG
15256: PUSH
15257: LD_INT 3
15259: NEG
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 0
15267: PUSH
15268: LD_INT 3
15270: NEG
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 1
15278: PUSH
15279: LD_INT 2
15281: NEG
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15305: LD_ADDR_VAR 0 15
15309: PUSH
15310: LD_INT 0
15312: PUSH
15313: LD_INT 0
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: LD_INT 0
15322: PUSH
15323: LD_INT 1
15325: NEG
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: LD_INT 0
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: LD_INT 1
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 0
15353: PUSH
15354: LD_INT 1
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 1
15363: NEG
15364: PUSH
15365: LD_INT 0
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 1
15374: NEG
15375: PUSH
15376: LD_INT 1
15378: NEG
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: LD_INT 1
15389: NEG
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 2
15397: PUSH
15398: LD_INT 0
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 2
15407: PUSH
15408: LD_INT 1
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 1
15417: NEG
15418: PUSH
15419: LD_INT 1
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 2
15428: NEG
15429: PUSH
15430: LD_INT 0
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 2
15439: NEG
15440: PUSH
15441: LD_INT 1
15443: NEG
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 2
15451: PUSH
15452: LD_INT 1
15454: NEG
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: LD_INT 3
15462: PUSH
15463: LD_INT 0
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 3
15472: PUSH
15473: LD_INT 1
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15498: LD_ADDR_VAR 0 16
15502: PUSH
15503: LD_INT 0
15505: PUSH
15506: LD_INT 0
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: LD_INT 0
15515: PUSH
15516: LD_INT 1
15518: NEG
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: LD_INT 0
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 1
15536: PUSH
15537: LD_INT 1
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 0
15546: PUSH
15547: LD_INT 1
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 1
15556: NEG
15557: PUSH
15558: LD_INT 0
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 1
15567: NEG
15568: PUSH
15569: LD_INT 1
15571: NEG
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 1
15579: NEG
15580: PUSH
15581: LD_INT 2
15583: NEG
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 2
15591: PUSH
15592: LD_INT 1
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 2
15601: PUSH
15602: LD_INT 2
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: LD_INT 1
15611: PUSH
15612: LD_INT 2
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 2
15621: NEG
15622: PUSH
15623: LD_INT 1
15625: NEG
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 2
15633: NEG
15634: PUSH
15635: LD_INT 2
15637: NEG
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 3
15645: PUSH
15646: LD_INT 2
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 3
15655: PUSH
15656: LD_INT 3
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 2
15665: PUSH
15666: LD_INT 3
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15691: LD_ADDR_VAR 0 17
15695: PUSH
15696: LD_INT 0
15698: PUSH
15699: LD_INT 0
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 0
15708: PUSH
15709: LD_INT 1
15711: NEG
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: LD_INT 0
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: LD_INT 1
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 0
15739: PUSH
15740: LD_INT 1
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: LD_INT 1
15749: NEG
15750: PUSH
15751: LD_INT 0
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 1
15760: NEG
15761: PUSH
15762: LD_INT 1
15764: NEG
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 1
15772: NEG
15773: PUSH
15774: LD_INT 2
15776: NEG
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: LD_INT 0
15784: PUSH
15785: LD_INT 2
15787: NEG
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 1
15795: PUSH
15796: LD_INT 1
15798: NEG
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 2
15806: PUSH
15807: LD_INT 0
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 2
15816: PUSH
15817: LD_INT 1
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 2
15826: PUSH
15827: LD_INT 2
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 1
15836: PUSH
15837: LD_INT 2
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 0
15846: PUSH
15847: LD_INT 2
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 1
15856: NEG
15857: PUSH
15858: LD_INT 1
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 2
15867: NEG
15868: PUSH
15869: LD_INT 0
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: LD_INT 2
15878: NEG
15879: PUSH
15880: LD_INT 1
15882: NEG
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 2
15890: NEG
15891: PUSH
15892: LD_INT 2
15894: NEG
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15921: LD_ADDR_VAR 0 18
15925: PUSH
15926: LD_INT 0
15928: PUSH
15929: LD_INT 0
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 0
15938: PUSH
15939: LD_INT 1
15941: NEG
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 1
15949: PUSH
15950: LD_INT 0
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 1
15959: PUSH
15960: LD_INT 1
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 0
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 1
15979: NEG
15980: PUSH
15981: LD_INT 0
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 1
15990: NEG
15991: PUSH
15992: LD_INT 1
15994: NEG
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 1
16002: NEG
16003: PUSH
16004: LD_INT 2
16006: NEG
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 0
16014: PUSH
16015: LD_INT 2
16017: NEG
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: LD_INT 1
16025: PUSH
16026: LD_INT 1
16028: NEG
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 2
16036: PUSH
16037: LD_INT 0
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 2
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 2
16056: PUSH
16057: LD_INT 2
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 1
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 0
16076: PUSH
16077: LD_INT 2
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 1
16086: NEG
16087: PUSH
16088: LD_INT 1
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: LD_INT 2
16097: NEG
16098: PUSH
16099: LD_INT 0
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 2
16108: NEG
16109: PUSH
16110: LD_INT 1
16112: NEG
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 2
16120: NEG
16121: PUSH
16122: LD_INT 2
16124: NEG
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16151: LD_ADDR_VAR 0 19
16155: PUSH
16156: LD_INT 0
16158: PUSH
16159: LD_INT 0
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: LD_INT 0
16168: PUSH
16169: LD_INT 1
16171: NEG
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 1
16179: PUSH
16180: LD_INT 0
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: LD_INT 1
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 0
16199: PUSH
16200: LD_INT 1
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 1
16209: NEG
16210: PUSH
16211: LD_INT 0
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 1
16220: NEG
16221: PUSH
16222: LD_INT 1
16224: NEG
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 1
16232: NEG
16233: PUSH
16234: LD_INT 2
16236: NEG
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 0
16244: PUSH
16245: LD_INT 2
16247: NEG
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: LD_INT 1
16258: NEG
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: LD_INT 2
16266: PUSH
16267: LD_INT 0
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: LD_INT 1
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 2
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 1
16296: PUSH
16297: LD_INT 2
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 0
16306: PUSH
16307: LD_INT 2
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 1
16316: NEG
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 2
16327: NEG
16328: PUSH
16329: LD_INT 0
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 2
16338: NEG
16339: PUSH
16340: LD_INT 1
16342: NEG
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 2
16350: NEG
16351: PUSH
16352: LD_INT 2
16354: NEG
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16381: LD_ADDR_VAR 0 20
16385: PUSH
16386: LD_INT 0
16388: PUSH
16389: LD_INT 0
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 0
16398: PUSH
16399: LD_INT 1
16401: NEG
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: LD_INT 0
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: LD_INT 1
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 0
16429: PUSH
16430: LD_INT 1
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 1
16439: NEG
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 1
16450: NEG
16451: PUSH
16452: LD_INT 1
16454: NEG
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 1
16462: NEG
16463: PUSH
16464: LD_INT 2
16466: NEG
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 0
16474: PUSH
16475: LD_INT 2
16477: NEG
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: LD_INT 1
16485: PUSH
16486: LD_INT 1
16488: NEG
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 2
16496: PUSH
16497: LD_INT 0
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 2
16506: PUSH
16507: LD_INT 1
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 2
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 1
16526: PUSH
16527: LD_INT 2
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 0
16536: PUSH
16537: LD_INT 2
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 1
16546: NEG
16547: PUSH
16548: LD_INT 1
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 2
16557: NEG
16558: PUSH
16559: LD_INT 0
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 2
16568: NEG
16569: PUSH
16570: LD_INT 1
16572: NEG
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 2
16580: NEG
16581: PUSH
16582: LD_INT 2
16584: NEG
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16611: LD_ADDR_VAR 0 21
16615: PUSH
16616: LD_INT 0
16618: PUSH
16619: LD_INT 0
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 0
16628: PUSH
16629: LD_INT 1
16631: NEG
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 1
16639: PUSH
16640: LD_INT 0
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 1
16649: PUSH
16650: LD_INT 1
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 0
16659: PUSH
16660: LD_INT 1
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 1
16669: NEG
16670: PUSH
16671: LD_INT 0
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 1
16680: NEG
16681: PUSH
16682: LD_INT 1
16684: NEG
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 1
16692: NEG
16693: PUSH
16694: LD_INT 2
16696: NEG
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 0
16704: PUSH
16705: LD_INT 2
16707: NEG
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 1
16715: PUSH
16716: LD_INT 1
16718: NEG
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 2
16726: PUSH
16727: LD_INT 0
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 2
16736: PUSH
16737: LD_INT 1
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 2
16746: PUSH
16747: LD_INT 2
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 1
16756: PUSH
16757: LD_INT 2
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: LD_INT 0
16766: PUSH
16767: LD_INT 2
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PUSH
16774: LD_INT 1
16776: NEG
16777: PUSH
16778: LD_INT 1
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 2
16787: NEG
16788: PUSH
16789: LD_INT 0
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 2
16798: NEG
16799: PUSH
16800: LD_INT 1
16802: NEG
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 2
16810: NEG
16811: PUSH
16812: LD_INT 2
16814: NEG
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16841: LD_ADDR_VAR 0 22
16845: PUSH
16846: LD_INT 0
16848: PUSH
16849: LD_INT 0
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_INT 0
16858: PUSH
16859: LD_INT 1
16861: NEG
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: LD_INT 0
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: LD_INT 1
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 0
16889: PUSH
16890: LD_INT 1
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 1
16899: NEG
16900: PUSH
16901: LD_INT 0
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 1
16910: NEG
16911: PUSH
16912: LD_INT 1
16914: NEG
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 1
16922: NEG
16923: PUSH
16924: LD_INT 2
16926: NEG
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 0
16934: PUSH
16935: LD_INT 2
16937: NEG
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 1
16945: PUSH
16946: LD_INT 1
16948: NEG
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 2
16956: PUSH
16957: LD_INT 0
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 2
16966: PUSH
16967: LD_INT 1
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 2
16976: PUSH
16977: LD_INT 2
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 1
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 0
16996: PUSH
16997: LD_INT 2
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 1
17006: NEG
17007: PUSH
17008: LD_INT 1
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 2
17017: NEG
17018: PUSH
17019: LD_INT 0
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 2
17028: NEG
17029: PUSH
17030: LD_INT 1
17032: NEG
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 2
17040: NEG
17041: PUSH
17042: LD_INT 2
17044: NEG
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17071: LD_ADDR_VAR 0 23
17075: PUSH
17076: LD_INT 0
17078: PUSH
17079: LD_INT 0
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 0
17088: PUSH
17089: LD_INT 1
17091: NEG
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 1
17099: PUSH
17100: LD_INT 0
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 1
17109: PUSH
17110: LD_INT 1
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 0
17119: PUSH
17120: LD_INT 1
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: LD_INT 0
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 1
17140: NEG
17141: PUSH
17142: LD_INT 1
17144: NEG
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 1
17152: NEG
17153: PUSH
17154: LD_INT 2
17156: NEG
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 0
17164: PUSH
17165: LD_INT 2
17167: NEG
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 1
17175: PUSH
17176: LD_INT 1
17178: NEG
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 2
17186: PUSH
17187: LD_INT 0
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 2
17196: PUSH
17197: LD_INT 1
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: LD_INT 2
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 1
17216: PUSH
17217: LD_INT 2
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 0
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 1
17236: NEG
17237: PUSH
17238: LD_INT 1
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 2
17247: NEG
17248: PUSH
17249: LD_INT 0
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 2
17258: NEG
17259: PUSH
17260: LD_INT 1
17262: NEG
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 2
17270: NEG
17271: PUSH
17272: LD_INT 2
17274: NEG
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 2
17282: NEG
17283: PUSH
17284: LD_INT 3
17286: NEG
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 1
17294: NEG
17295: PUSH
17296: LD_INT 3
17298: NEG
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 1
17306: PUSH
17307: LD_INT 2
17309: NEG
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 2
17317: PUSH
17318: LD_INT 1
17320: NEG
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17351: LD_ADDR_VAR 0 24
17355: PUSH
17356: LD_INT 0
17358: PUSH
17359: LD_INT 0
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 0
17368: PUSH
17369: LD_INT 1
17371: NEG
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 1
17379: PUSH
17380: LD_INT 0
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 1
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 0
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 1
17409: NEG
17410: PUSH
17411: LD_INT 0
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 1
17420: NEG
17421: PUSH
17422: LD_INT 1
17424: NEG
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 1
17432: NEG
17433: PUSH
17434: LD_INT 2
17436: NEG
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 0
17444: PUSH
17445: LD_INT 2
17447: NEG
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 1
17455: PUSH
17456: LD_INT 1
17458: NEG
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 2
17466: PUSH
17467: LD_INT 0
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 2
17476: PUSH
17477: LD_INT 1
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 2
17486: PUSH
17487: LD_INT 2
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 1
17496: PUSH
17497: LD_INT 2
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 0
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 1
17516: NEG
17517: PUSH
17518: LD_INT 1
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 2
17527: NEG
17528: PUSH
17529: LD_INT 0
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 2
17538: NEG
17539: PUSH
17540: LD_INT 1
17542: NEG
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 2
17550: NEG
17551: PUSH
17552: LD_INT 2
17554: NEG
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: LD_INT 2
17565: NEG
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 2
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 3
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 3
17594: PUSH
17595: LD_INT 2
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17627: LD_ADDR_VAR 0 25
17631: PUSH
17632: LD_INT 0
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 0
17644: PUSH
17645: LD_INT 1
17647: NEG
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 1
17655: PUSH
17656: LD_INT 0
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 1
17665: PUSH
17666: LD_INT 1
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 0
17675: PUSH
17676: LD_INT 1
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 1
17685: NEG
17686: PUSH
17687: LD_INT 0
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 1
17696: NEG
17697: PUSH
17698: LD_INT 1
17700: NEG
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 1
17708: NEG
17709: PUSH
17710: LD_INT 2
17712: NEG
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 0
17720: PUSH
17721: LD_INT 2
17723: NEG
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 1
17731: PUSH
17732: LD_INT 1
17734: NEG
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 2
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: LD_INT 1
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 2
17762: PUSH
17763: LD_INT 2
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 1
17772: PUSH
17773: LD_INT 2
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 0
17782: PUSH
17783: LD_INT 2
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 1
17792: NEG
17793: PUSH
17794: LD_INT 1
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 2
17803: NEG
17804: PUSH
17805: LD_INT 0
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 2
17814: NEG
17815: PUSH
17816: LD_INT 1
17818: NEG
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 2
17826: NEG
17827: PUSH
17828: LD_INT 2
17830: NEG
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 3
17838: PUSH
17839: LD_INT 1
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 3
17848: PUSH
17849: LD_INT 2
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 2
17858: PUSH
17859: LD_INT 3
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 1
17868: PUSH
17869: LD_INT 3
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
17901: LD_ADDR_VAR 0 26
17905: PUSH
17906: LD_INT 0
17908: PUSH
17909: LD_INT 0
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 0
17918: PUSH
17919: LD_INT 1
17921: NEG
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: LD_INT 1
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 0
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 1
17959: NEG
17960: PUSH
17961: LD_INT 0
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: LD_INT 1
17974: NEG
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 1
17982: NEG
17983: PUSH
17984: LD_INT 2
17986: NEG
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: LD_INT 2
17997: NEG
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 1
18005: PUSH
18006: LD_INT 1
18008: NEG
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 2
18016: PUSH
18017: LD_INT 0
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 1
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 2
18036: PUSH
18037: LD_INT 2
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 1
18046: PUSH
18047: LD_INT 2
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: LD_INT 2
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 1
18066: NEG
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 2
18077: NEG
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 2
18088: NEG
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 2
18100: NEG
18101: PUSH
18102: LD_INT 2
18104: NEG
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 2
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 1
18122: PUSH
18123: LD_INT 3
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 1
18132: NEG
18133: PUSH
18134: LD_INT 2
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 2
18143: NEG
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18177: LD_ADDR_VAR 0 27
18181: PUSH
18182: LD_INT 0
18184: PUSH
18185: LD_INT 0
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 0
18194: PUSH
18195: LD_INT 1
18197: NEG
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 1
18205: PUSH
18206: LD_INT 0
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 1
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 0
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 1
18235: NEG
18236: PUSH
18237: LD_INT 0
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 1
18246: NEG
18247: PUSH
18248: LD_INT 1
18250: NEG
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: LD_INT 2
18262: NEG
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 0
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 2
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 2
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 2
18312: PUSH
18313: LD_INT 2
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 1
18322: PUSH
18323: LD_INT 2
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 0
18332: PUSH
18333: LD_INT 2
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 1
18342: NEG
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 2
18353: NEG
18354: PUSH
18355: LD_INT 0
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 2
18364: NEG
18365: PUSH
18366: LD_INT 1
18368: NEG
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 2
18376: NEG
18377: PUSH
18378: LD_INT 2
18380: NEG
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 1
18388: NEG
18389: PUSH
18390: LD_INT 2
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 2
18399: NEG
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 3
18410: NEG
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 3
18422: NEG
18423: PUSH
18424: LD_INT 2
18426: NEG
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18457: LD_ADDR_VAR 0 28
18461: PUSH
18462: LD_INT 0
18464: PUSH
18465: LD_INT 0
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: LD_INT 1
18477: NEG
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: LD_INT 0
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 0
18505: PUSH
18506: LD_INT 1
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 1
18515: NEG
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 1
18526: NEG
18527: PUSH
18528: LD_INT 1
18530: NEG
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 1
18538: NEG
18539: PUSH
18540: LD_INT 2
18542: NEG
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: LD_INT 2
18553: NEG
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: LD_INT 1
18564: NEG
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 0
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 2
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 2
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: LD_INT 2
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 0
18612: PUSH
18613: LD_INT 2
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: LD_INT 1
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 2
18633: NEG
18634: PUSH
18635: LD_INT 0
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 2
18644: NEG
18645: PUSH
18646: LD_INT 1
18648: NEG
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 2
18656: NEG
18657: PUSH
18658: LD_INT 2
18660: NEG
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 2
18668: NEG
18669: PUSH
18670: LD_INT 3
18672: NEG
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 1
18680: NEG
18681: PUSH
18682: LD_INT 3
18684: NEG
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 3
18692: NEG
18693: PUSH
18694: LD_INT 1
18696: NEG
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 3
18704: NEG
18705: PUSH
18706: LD_INT 2
18708: NEG
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18739: LD_ADDR_VAR 0 29
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: LD_INT 0
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 0
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 1
18767: PUSH
18768: LD_INT 0
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 0
18787: PUSH
18788: LD_INT 1
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: LD_INT 0
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 1
18808: NEG
18809: PUSH
18810: LD_INT 1
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 1
18820: NEG
18821: PUSH
18822: LD_INT 2
18824: NEG
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 0
18832: PUSH
18833: LD_INT 2
18835: NEG
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: LD_INT 1
18846: NEG
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: LD_INT 0
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 2
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 0
18884: PUSH
18885: LD_INT 2
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 1
18894: NEG
18895: PUSH
18896: LD_INT 1
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 2
18905: NEG
18906: PUSH
18907: LD_INT 1
18909: NEG
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 2
18917: NEG
18918: PUSH
18919: LD_INT 2
18921: NEG
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 2
18929: NEG
18930: PUSH
18931: LD_INT 3
18933: NEG
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: LD_INT 1
18944: NEG
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 3
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: LD_INT 3
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: NEG
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 3
18983: NEG
18984: PUSH
18985: LD_INT 2
18987: NEG
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19018: LD_ADDR_VAR 0 30
19022: PUSH
19023: LD_INT 0
19025: PUSH
19026: LD_INT 0
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 0
19035: PUSH
19036: LD_INT 1
19038: NEG
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 1
19046: PUSH
19047: LD_INT 0
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 1
19056: PUSH
19057: LD_INT 1
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 0
19066: PUSH
19067: LD_INT 1
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 1
19076: NEG
19077: PUSH
19078: LD_INT 0
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 1
19087: NEG
19088: PUSH
19089: LD_INT 1
19091: NEG
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 1
19099: NEG
19100: PUSH
19101: LD_INT 2
19103: NEG
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 0
19111: PUSH
19112: LD_INT 2
19114: NEG
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: LD_INT 1
19125: NEG
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 2
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 2
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: LD_INT 2
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 1
19173: NEG
19174: PUSH
19175: LD_INT 1
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 2
19184: NEG
19185: PUSH
19186: LD_INT 0
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 2
19195: NEG
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: NEG
19208: PUSH
19209: LD_INT 3
19211: NEG
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: PUSH
19220: LD_INT 2
19222: NEG
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 3
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: LD_INT 3
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 2
19250: NEG
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 3
19261: NEG
19262: PUSH
19263: LD_INT 1
19265: NEG
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19296: LD_ADDR_VAR 0 31
19300: PUSH
19301: LD_INT 0
19303: PUSH
19304: LD_INT 0
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: LD_INT 1
19316: NEG
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: LD_INT 0
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 1
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 0
19344: PUSH
19345: LD_INT 1
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 1
19354: NEG
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: NEG
19366: PUSH
19367: LD_INT 1
19369: NEG
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 1
19377: NEG
19378: PUSH
19379: LD_INT 2
19381: NEG
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: LD_INT 1
19392: NEG
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 2
19400: PUSH
19401: LD_INT 0
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 2
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 2
19420: PUSH
19421: LD_INT 2
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 1
19430: PUSH
19431: LD_INT 2
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 0
19440: PUSH
19441: LD_INT 2
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 1
19450: NEG
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 2
19461: NEG
19462: PUSH
19463: LD_INT 1
19465: NEG
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 2
19473: NEG
19474: PUSH
19475: LD_INT 2
19477: NEG
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 2
19485: NEG
19486: PUSH
19487: LD_INT 3
19489: NEG
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: LD_INT 1
19500: NEG
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 3
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 1
19518: PUSH
19519: LD_INT 3
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 1
19528: NEG
19529: PUSH
19530: LD_INT 2
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 3
19539: NEG
19540: PUSH
19541: LD_INT 2
19543: NEG
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19574: LD_ADDR_VAR 0 32
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: LD_INT 0
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 0
19591: PUSH
19592: LD_INT 1
19594: NEG
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: LD_INT 1
19602: PUSH
19603: LD_INT 0
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 0
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 1
19632: NEG
19633: PUSH
19634: LD_INT 0
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 1
19643: NEG
19644: PUSH
19645: LD_INT 1
19647: NEG
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 1
19655: NEG
19656: PUSH
19657: LD_INT 2
19659: NEG
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 0
19667: PUSH
19668: LD_INT 2
19670: NEG
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: LD_INT 1
19681: NEG
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 2
19689: PUSH
19690: LD_INT 1
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 2
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: LD_INT 2
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 0
19719: PUSH
19720: LD_INT 2
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 1
19729: NEG
19730: PUSH
19731: LD_INT 1
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 2
19740: NEG
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 2
19751: NEG
19752: PUSH
19753: LD_INT 1
19755: NEG
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: NEG
19764: PUSH
19765: LD_INT 3
19767: NEG
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: LD_INT 2
19778: NEG
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 3
19786: PUSH
19787: LD_INT 2
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 2
19796: PUSH
19797: LD_INT 3
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 2
19806: NEG
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 3
19817: NEG
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19852: LD_ADDR_VAR 0 33
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 0
19869: PUSH
19870: LD_INT 1
19872: NEG
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 1
19880: PUSH
19881: LD_INT 0
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 1
19910: NEG
19911: PUSH
19912: LD_INT 0
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: NEG
19922: PUSH
19923: LD_INT 1
19925: NEG
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 1
19933: NEG
19934: PUSH
19935: LD_INT 2
19937: NEG
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: LD_INT 1
19948: NEG
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: LD_INT 0
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: LD_INT 1
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 1
19976: PUSH
19977: LD_INT 2
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 0
19986: PUSH
19987: LD_INT 2
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 1
19996: NEG
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: NEG
20008: PUSH
20009: LD_INT 0
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 2
20018: NEG
20019: PUSH
20020: LD_INT 1
20022: NEG
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 2
20030: NEG
20031: PUSH
20032: LD_INT 2
20034: NEG
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 2
20042: NEG
20043: PUSH
20044: LD_INT 3
20046: NEG
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 2
20054: PUSH
20055: LD_INT 1
20057: NEG
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 3
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: LD_INT 3
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 1
20085: NEG
20086: PUSH
20087: LD_INT 2
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 3
20096: NEG
20097: PUSH
20098: LD_INT 2
20100: NEG
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20131: LD_ADDR_VAR 0 34
20135: PUSH
20136: LD_INT 0
20138: PUSH
20139: LD_INT 0
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: LD_INT 1
20151: NEG
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: LD_INT 0
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: LD_INT 1
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: LD_INT 1
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 1
20200: NEG
20201: PUSH
20202: LD_INT 1
20204: NEG
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: NEG
20213: PUSH
20214: LD_INT 2
20216: NEG
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 0
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: LD_INT 1
20238: NEG
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 2
20246: PUSH
20247: LD_INT 1
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 2
20256: PUSH
20257: LD_INT 2
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 1
20266: PUSH
20267: LD_INT 2
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 1
20276: NEG
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 2
20287: NEG
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: NEG
20299: PUSH
20300: LD_INT 1
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 2
20310: NEG
20311: PUSH
20312: LD_INT 2
20314: NEG
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: NEG
20323: PUSH
20324: LD_INT 3
20326: NEG
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: LD_INT 2
20337: NEG
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 3
20345: PUSH
20346: LD_INT 2
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 2
20355: PUSH
20356: LD_INT 3
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 2
20365: NEG
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 3
20376: NEG
20377: PUSH
20378: LD_INT 1
20380: NEG
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20411: LD_ADDR_VAR 0 35
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: LD_INT 0
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 0
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 1
20439: PUSH
20440: LD_INT 0
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 1
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 0
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 1
20469: NEG
20470: PUSH
20471: LD_INT 0
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 1
20480: NEG
20481: PUSH
20482: LD_INT 1
20484: NEG
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 2
20492: PUSH
20493: LD_INT 1
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 2
20502: NEG
20503: PUSH
20504: LD_INT 1
20506: NEG
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20523: LD_ADDR_VAR 0 36
20527: PUSH
20528: LD_INT 0
20530: PUSH
20531: LD_INT 0
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 0
20540: PUSH
20541: LD_INT 1
20543: NEG
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: LD_INT 0
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: LD_INT 1
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 0
20571: PUSH
20572: LD_INT 1
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 1
20581: NEG
20582: PUSH
20583: LD_INT 0
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: NEG
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 1
20604: NEG
20605: PUSH
20606: LD_INT 2
20608: NEG
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 1
20616: PUSH
20617: LD_INT 2
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20635: LD_ADDR_VAR 0 37
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: LD_INT 0
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: LD_INT 1
20655: NEG
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 1
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: LD_INT 0
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: NEG
20705: PUSH
20706: LD_INT 1
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: LD_INT 1
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20747: LD_ADDR_VAR 0 38
20751: PUSH
20752: LD_INT 0
20754: PUSH
20755: LD_INT 0
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 1
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: LD_INT 1
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 1
20805: NEG
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: LD_INT 1
20820: NEG
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 2
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 2
20838: NEG
20839: PUSH
20840: LD_INT 1
20842: NEG
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20859: LD_ADDR_VAR 0 39
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: LD_INT 0
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 1
20917: NEG
20918: PUSH
20919: LD_INT 0
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: LD_INT 1
20932: NEG
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: LD_INT 2
20944: NEG
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 1
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20971: LD_ADDR_VAR 0 40
20975: PUSH
20976: LD_INT 0
20978: PUSH
20979: LD_INT 0
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 0
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 1
21029: NEG
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: LD_INT 1
21044: NEG
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: LD_INT 1
21055: NEG
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 1
21063: NEG
21064: PUSH
21065: LD_INT 1
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21083: LD_ADDR_VAR 0 41
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: LD_INT 1
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 1
21141: NEG
21142: PUSH
21143: LD_INT 0
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: NEG
21153: PUSH
21154: LD_INT 1
21156: NEG
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: LD_INT 2
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 1
21227: NEG
21228: PUSH
21229: LD_INT 1
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 2
21238: NEG
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 2
21249: NEG
21250: PUSH
21251: LD_INT 1
21253: NEG
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 2
21261: NEG
21262: PUSH
21263: LD_INT 2
21265: NEG
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 2
21273: NEG
21274: PUSH
21275: LD_INT 3
21277: NEG
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 3
21296: PUSH
21297: LD_INT 0
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 3
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 3
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 3
21326: PUSH
21327: LD_INT 3
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 2
21336: PUSH
21337: LD_INT 3
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 2
21346: NEG
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 3
21357: NEG
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 3
21368: NEG
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 3
21380: NEG
21381: PUSH
21382: LD_INT 2
21384: NEG
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 3
21392: NEG
21393: PUSH
21394: LD_INT 3
21396: NEG
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21433: LD_ADDR_VAR 0 42
21437: PUSH
21438: LD_INT 0
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 0
21450: PUSH
21451: LD_INT 1
21453: NEG
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 1
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 1
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: LD_INT 1
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 1
21491: NEG
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 1
21502: NEG
21503: PUSH
21504: LD_INT 1
21506: NEG
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 1
21514: NEG
21515: PUSH
21516: LD_INT 2
21518: NEG
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: LD_INT 2
21529: NEG
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 1
21537: PUSH
21538: LD_INT 1
21540: NEG
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 1
21588: NEG
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 2
21599: NEG
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 2
21611: NEG
21612: PUSH
21613: LD_INT 2
21615: NEG
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 2
21623: NEG
21624: PUSH
21625: LD_INT 3
21627: NEG
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: NEG
21636: PUSH
21637: LD_INT 3
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: LD_INT 3
21650: NEG
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 1
21658: PUSH
21659: LD_INT 2
21661: NEG
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 3
21669: PUSH
21670: LD_INT 2
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 3
21679: PUSH
21680: LD_INT 3
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 2
21689: PUSH
21690: LD_INT 3
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 1
21699: PUSH
21700: LD_INT 3
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 0
21709: PUSH
21710: LD_INT 3
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 1
21719: NEG
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 3
21730: NEG
21731: PUSH
21732: LD_INT 2
21734: NEG
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 3
21742: NEG
21743: PUSH
21744: LD_INT 3
21746: NEG
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21783: LD_ADDR_VAR 0 43
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: LD_INT 0
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 0
21800: PUSH
21801: LD_INT 1
21803: NEG
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 1
21811: PUSH
21812: LD_INT 0
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 1
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 1
21841: NEG
21842: PUSH
21843: LD_INT 0
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: LD_INT 1
21856: NEG
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 1
21864: NEG
21865: PUSH
21866: LD_INT 2
21868: NEG
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 0
21876: PUSH
21877: LD_INT 2
21879: NEG
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 1
21887: PUSH
21888: LD_INT 1
21890: NEG
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 2
21898: PUSH
21899: LD_INT 0
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: LD_INT 1
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 1
21918: PUSH
21919: LD_INT 2
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 0
21928: PUSH
21929: LD_INT 2
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: NEG
21939: PUSH
21940: LD_INT 1
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 2
21949: NEG
21950: PUSH
21951: LD_INT 0
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 2
21960: NEG
21961: PUSH
21962: LD_INT 1
21964: NEG
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 1
21972: NEG
21973: PUSH
21974: LD_INT 3
21976: NEG
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 0
21984: PUSH
21985: LD_INT 3
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: LD_INT 2
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 2
22006: PUSH
22007: LD_INT 1
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 3
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 3
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: LD_INT 3
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 0
22047: PUSH
22048: LD_INT 3
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: LD_INT 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 2
22068: NEG
22069: PUSH
22070: LD_INT 1
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 3
22079: NEG
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 3
22090: NEG
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22131: LD_ADDR_VAR 0 44
22135: PUSH
22136: LD_INT 0
22138: PUSH
22139: LD_INT 0
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 0
22148: PUSH
22149: LD_INT 1
22151: NEG
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 1
22159: PUSH
22160: LD_INT 0
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 1
22169: PUSH
22170: LD_INT 1
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 0
22179: PUSH
22180: LD_INT 1
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 1
22189: NEG
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 1
22200: NEG
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: NEG
22213: PUSH
22214: LD_INT 2
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 1
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 0
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 2
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 2
22255: PUSH
22256: LD_INT 2
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: PUSH
22266: LD_INT 2
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 1
22275: NEG
22276: PUSH
22277: LD_INT 1
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 2
22286: NEG
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 2
22297: NEG
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 2
22309: NEG
22310: PUSH
22311: LD_INT 2
22313: NEG
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 2
22321: NEG
22322: PUSH
22323: LD_INT 3
22325: NEG
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 2
22333: PUSH
22334: LD_INT 1
22336: NEG
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 3
22344: PUSH
22345: LD_INT 0
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 3
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 3
22364: PUSH
22365: LD_INT 2
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 3
22374: PUSH
22375: LD_INT 3
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 2
22384: PUSH
22385: LD_INT 3
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 2
22394: NEG
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 3
22405: NEG
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 3
22416: NEG
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 3
22428: NEG
22429: PUSH
22430: LD_INT 2
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 3
22440: NEG
22441: PUSH
22442: LD_INT 3
22444: NEG
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22481: LD_ADDR_VAR 0 45
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: LD_INT 0
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 0
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: LD_INT 0
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: LD_INT 2
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 0
22574: PUSH
22575: LD_INT 2
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 1
22588: NEG
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 2
22606: PUSH
22607: LD_INT 2
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: LD_INT 2
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 2
22647: NEG
22648: PUSH
22649: LD_INT 1
22651: NEG
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: NEG
22660: PUSH
22661: LD_INT 2
22663: NEG
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 2
22671: NEG
22672: PUSH
22673: LD_INT 3
22675: NEG
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 3
22687: NEG
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 0
22695: PUSH
22696: LD_INT 3
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: PUSH
22707: LD_INT 2
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 3
22717: PUSH
22718: LD_INT 2
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 3
22727: PUSH
22728: LD_INT 3
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: LD_INT 3
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: LD_INT 3
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: LD_INT 2
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 3
22778: NEG
22779: PUSH
22780: LD_INT 2
22782: NEG
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 3
22790: NEG
22791: PUSH
22792: LD_INT 3
22794: NEG
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22831: LD_ADDR_VAR 0 46
22835: PUSH
22836: LD_INT 0
22838: PUSH
22839: LD_INT 0
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 0
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: LD_INT 0
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: LD_INT 1
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 1
22912: NEG
22913: PUSH
22914: LD_INT 2
22916: NEG
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: LD_INT 2
22927: NEG
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 1
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 2
22946: PUSH
22947: LD_INT 0
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 2
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: LD_INT 2
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: LD_INT 2
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: LD_INT 1
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 2
22997: NEG
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 2
23008: NEG
23009: PUSH
23010: LD_INT 1
23012: NEG
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 1
23020: NEG
23021: PUSH
23022: LD_INT 3
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 0
23032: PUSH
23033: LD_INT 3
23035: NEG
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: LD_INT 2
23046: NEG
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 2
23054: PUSH
23055: LD_INT 1
23057: NEG
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 3
23065: PUSH
23066: LD_INT 0
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 3
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: LD_INT 3
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 0
23095: PUSH
23096: LD_INT 3
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 1
23105: NEG
23106: PUSH
23107: LD_INT 2
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 2
23116: NEG
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 3
23127: NEG
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 3
23138: NEG
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23179: LD_ADDR_VAR 0 47
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 0
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: LD_INT 0
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 0
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 1
23248: NEG
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: NEG
23261: PUSH
23262: LD_INT 2
23264: NEG
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 0
23272: PUSH
23273: LD_INT 2
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 2
23294: NEG
23295: PUSH
23296: LD_INT 1
23298: NEG
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 2
23306: NEG
23307: PUSH
23308: LD_INT 2
23310: NEG
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23330: LD_ADDR_VAR 0 48
23334: PUSH
23335: LD_INT 0
23337: PUSH
23338: LD_INT 0
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 0
23347: PUSH
23348: LD_INT 1
23350: NEG
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: LD_INT 0
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: LD_INT 1
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 0
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: NEG
23389: PUSH
23390: LD_INT 0
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 1
23399: NEG
23400: PUSH
23401: LD_INT 1
23403: NEG
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: NEG
23412: PUSH
23413: LD_INT 2
23415: NEG
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 0
23423: PUSH
23424: LD_INT 2
23426: NEG
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 1
23434: PUSH
23435: LD_INT 1
23437: NEG
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: LD_INT 0
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 2
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23477: LD_ADDR_VAR 0 49
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 0
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 1
23505: PUSH
23506: LD_INT 0
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 0
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 1
23535: NEG
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 1
23546: NEG
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: LD_INT 1
23561: NEG
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 2
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 2
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: PUSH
23590: LD_INT 2
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: PUSH
23600: LD_INT 2
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23621: LD_ADDR_VAR 0 50
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 2
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 2
23712: PUSH
23713: LD_INT 2
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 1
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: LD_INT 2
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23765: LD_ADDR_VAR 0 51
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: LD_INT 0
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: LD_INT 1
23785: NEG
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 0
23856: PUSH
23857: LD_INT 2
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: NEG
23867: PUSH
23868: LD_INT 1
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 2
23877: NEG
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 2
23888: NEG
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23912: LD_ADDR_VAR 0 52
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 0
23960: PUSH
23961: LD_INT 1
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: LD_INT 0
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 1
23981: NEG
23982: PUSH
23983: LD_INT 1
23985: NEG
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 1
23993: NEG
23994: PUSH
23995: LD_INT 2
23997: NEG
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 1
24005: NEG
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 2
24016: NEG
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 2
24027: NEG
24028: PUSH
24029: LD_INT 1
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 2
24039: NEG
24040: PUSH
24041: LD_INT 2
24043: NEG
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24063: LD_ADDR_VAR 0 53
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: LD_INT 1
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: LD_INT 0
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 0
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: LD_INT 1
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 1
24144: NEG
24145: PUSH
24146: LD_INT 2
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: LD_INT 2
24159: NEG
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 2
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 2
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: LD_INT 1
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 2
24239: NEG
24240: PUSH
24241: LD_INT 0
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 2
24250: NEG
24251: PUSH
24252: LD_INT 1
24254: NEG
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 2
24262: NEG
24263: PUSH
24264: LD_INT 2
24266: NEG
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24293: LD_ADDR_VAR 0 54
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: LD_INT 0
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: LD_INT 1
24313: NEG
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: LD_INT 0
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: LD_INT 1
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: LD_INT 1
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 1
24351: NEG
24352: PUSH
24353: LD_INT 0
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 1
24362: NEG
24363: PUSH
24364: LD_INT 1
24366: NEG
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 1
24374: NEG
24375: PUSH
24376: LD_INT 2
24378: NEG
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 0
24386: PUSH
24387: LD_INT 2
24389: NEG
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: LD_INT 2
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: LD_INT 2
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 2
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 1
24458: NEG
24459: PUSH
24460: LD_INT 1
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 2
24469: NEG
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 2
24480: NEG
24481: PUSH
24482: LD_INT 1
24484: NEG
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 2
24492: NEG
24493: PUSH
24494: LD_INT 2
24496: NEG
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24523: LD_ADDR_VAR 0 55
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 0
24540: PUSH
24541: LD_INT 1
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: LD_INT 0
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: LD_INT 1
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 0
24571: PUSH
24572: LD_INT 1
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: LD_INT 1
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: NEG
24605: PUSH
24606: LD_INT 2
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: LD_INT 2
24619: NEG
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 1
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 2
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: LD_INT 2
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: LD_INT 2
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: NEG
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 2
24699: NEG
24700: PUSH
24701: LD_INT 0
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 2
24710: NEG
24711: PUSH
24712: LD_INT 1
24714: NEG
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 2
24722: NEG
24723: PUSH
24724: LD_INT 2
24726: NEG
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24753: LD_ADDR_VAR 0 56
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: LD_INT 0
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: LD_INT 1
24773: NEG
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 0
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: LD_INT 1
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 0
24801: PUSH
24802: LD_INT 1
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: LD_INT 0
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: LD_INT 1
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: LD_INT 2
24838: NEG
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 0
24846: PUSH
24847: LD_INT 2
24849: NEG
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 2
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 2
24888: PUSH
24889: LD_INT 2
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 1
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: LD_INT 2
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: LD_INT 1
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 2
24929: NEG
24930: PUSH
24931: LD_INT 0
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 2
24940: NEG
24941: PUSH
24942: LD_INT 1
24944: NEG
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 2
24952: NEG
24953: PUSH
24954: LD_INT 2
24956: NEG
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24983: LD_ADDR_VAR 0 57
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 1
25052: NEG
25053: PUSH
25054: LD_INT 1
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 2
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 2
25079: NEG
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: LD_INT 1
25090: NEG
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 2
25118: PUSH
25119: LD_INT 2
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: LD_INT 2
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: LD_INT 2
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 1
25148: NEG
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 2
25159: NEG
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 2
25170: NEG
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 2
25182: NEG
25183: PUSH
25184: LD_INT 2
25186: NEG
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25213: LD_ADDR_VAR 0 58
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: NEG
25283: PUSH
25284: LD_INT 1
25286: NEG
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: NEG
25295: PUSH
25296: LD_INT 2
25298: NEG
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 2
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: LD_INT 1
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 2
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 2
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 2
25348: PUSH
25349: LD_INT 2
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 0
25368: PUSH
25369: LD_INT 2
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: LD_INT 1
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 2
25389: NEG
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 2
25400: NEG
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 2
25412: NEG
25413: PUSH
25414: LD_INT 2
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25443: LD_ADDR_VAR 0 59
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: NEG
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25531: LD_ADDR_VAR 0 60
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: LD_INT 1
25551: NEG
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: PUSH
25570: LD_INT 1
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: LD_INT 1
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 1
25600: NEG
25601: PUSH
25602: LD_INT 1
25604: NEG
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25619: LD_ADDR_VAR 0 61
25623: PUSH
25624: LD_INT 0
25626: PUSH
25627: LD_INT 0
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 0
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 1
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 1
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: LD_INT 1
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: NEG
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: NEG
25689: PUSH
25690: LD_INT 1
25692: NEG
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25707: LD_ADDR_VAR 0 62
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 1
25776: NEG
25777: PUSH
25778: LD_INT 1
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25795: LD_ADDR_VAR 0 63
25799: PUSH
25800: LD_INT 0
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: LD_INT 1
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: NEG
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 1
25864: NEG
25865: PUSH
25866: LD_INT 1
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25883: LD_ADDR_VAR 0 64
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: ST_TO_ADDR
// end ; 1 :
25971: GO 31868
25973: LD_INT 1
25975: DOUBLE
25976: EQUAL
25977: IFTRUE 25981
25979: GO 28604
25981: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25982: LD_ADDR_VAR 0 11
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: LD_INT 3
25993: NEG
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: LD_INT 3
26004: NEG
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: LD_INT 2
26015: NEG
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: LIST
26025: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26026: LD_ADDR_VAR 0 12
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 3
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 3
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: LIST
26066: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26067: LD_ADDR_VAR 0 13
26071: PUSH
26072: LD_INT 3
26074: PUSH
26075: LD_INT 2
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 3
26084: PUSH
26085: LD_INT 3
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: LD_INT 3
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26107: LD_ADDR_VAR 0 14
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: LD_INT 3
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: LD_INT 3
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: NEG
26135: PUSH
26136: LD_INT 2
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26148: LD_ADDR_VAR 0 15
26152: PUSH
26153: LD_INT 2
26155: NEG
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 3
26166: NEG
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 3
26177: NEG
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: LIST
26191: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26192: LD_ADDR_VAR 0 16
26196: PUSH
26197: LD_INT 2
26199: NEG
26200: PUSH
26201: LD_INT 3
26203: NEG
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 3
26211: NEG
26212: PUSH
26213: LD_INT 2
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 3
26223: NEG
26224: PUSH
26225: LD_INT 3
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26238: LD_ADDR_VAR 0 17
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: LD_INT 3
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 3
26260: NEG
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: LD_INT 2
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26282: LD_ADDR_VAR 0 18
26286: PUSH
26287: LD_INT 2
26289: PUSH
26290: LD_INT 1
26292: NEG
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 3
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 3
26310: PUSH
26311: LD_INT 1
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: LIST
26322: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26323: LD_ADDR_VAR 0 19
26327: PUSH
26328: LD_INT 3
26330: PUSH
26331: LD_INT 2
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 3
26340: PUSH
26341: LD_INT 3
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 2
26350: PUSH
26351: LD_INT 3
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26363: LD_ADDR_VAR 0 20
26367: PUSH
26368: LD_INT 1
26370: PUSH
26371: LD_INT 3
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: LD_INT 3
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26404: LD_ADDR_VAR 0 21
26408: PUSH
26409: LD_INT 2
26411: NEG
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 3
26422: NEG
26423: PUSH
26424: LD_INT 0
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 3
26433: NEG
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: LIST
26447: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26448: LD_ADDR_VAR 0 22
26452: PUSH
26453: LD_INT 2
26455: NEG
26456: PUSH
26457: LD_INT 3
26459: NEG
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 3
26467: NEG
26468: PUSH
26469: LD_INT 2
26471: NEG
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 3
26479: NEG
26480: PUSH
26481: LD_INT 3
26483: NEG
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: LIST
26493: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26494: LD_ADDR_VAR 0 23
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: LD_INT 3
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: NEG
26513: PUSH
26514: LD_INT 4
26516: NEG
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: LD_INT 3
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: LIST
26537: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26538: LD_ADDR_VAR 0 24
26542: PUSH
26543: LD_INT 3
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 3
26555: PUSH
26556: LD_INT 1
26558: NEG
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 4
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: LIST
26578: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26579: LD_ADDR_VAR 0 25
26583: PUSH
26584: LD_INT 3
26586: PUSH
26587: LD_INT 3
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 4
26596: PUSH
26597: LD_INT 3
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 3
26606: PUSH
26607: LD_INT 4
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26619: LD_ADDR_VAR 0 26
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: LD_INT 3
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: LD_INT 4
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: NEG
26647: PUSH
26648: LD_INT 3
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: LIST
26659: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26660: LD_ADDR_VAR 0 27
26664: PUSH
26665: LD_INT 3
26667: NEG
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 3
26678: NEG
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 4
26689: NEG
26690: PUSH
26691: LD_INT 1
26693: NEG
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: LIST
26703: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26704: LD_ADDR_VAR 0 28
26708: PUSH
26709: LD_INT 3
26711: NEG
26712: PUSH
26713: LD_INT 3
26715: NEG
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 3
26723: NEG
26724: PUSH
26725: LD_INT 4
26727: NEG
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 4
26735: NEG
26736: PUSH
26737: LD_INT 3
26739: NEG
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: LIST
26749: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26750: LD_ADDR_VAR 0 29
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: LD_INT 3
26761: NEG
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: LD_INT 3
26772: NEG
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: LD_INT 4
26795: NEG
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: LD_INT 4
26806: NEG
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: LD_INT 3
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: LD_INT 5
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: LD_INT 5
26840: NEG
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: LD_INT 4
26851: NEG
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 1
26859: NEG
26860: PUSH
26861: LD_INT 6
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: LD_INT 6
26874: NEG
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 1
26882: PUSH
26883: LD_INT 5
26885: NEG
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
26905: LD_ADDR_VAR 0 30
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: LD_INT 1
26915: NEG
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 3
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 3
26933: PUSH
26934: LD_INT 1
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 3
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 4
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 4
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 4
26974: PUSH
26975: LD_INT 1
26977: NEG
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 5
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 5
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 5
27005: PUSH
27006: LD_INT 1
27008: NEG
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 6
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 6
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27048: LD_ADDR_VAR 0 31
27052: PUSH
27053: LD_INT 3
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 3
27065: PUSH
27066: LD_INT 3
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 2
27075: PUSH
27076: LD_INT 3
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 4
27085: PUSH
27086: LD_INT 3
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 4
27095: PUSH
27096: LD_INT 4
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 3
27105: PUSH
27106: LD_INT 4
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 5
27115: PUSH
27116: LD_INT 4
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 5
27125: PUSH
27126: LD_INT 5
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 4
27135: PUSH
27136: LD_INT 5
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 6
27145: PUSH
27146: LD_INT 5
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 6
27155: PUSH
27156: LD_INT 6
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 5
27165: PUSH
27166: LD_INT 6
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27187: LD_ADDR_VAR 0 32
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: LD_INT 3
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: LD_INT 3
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: NEG
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 1
27225: PUSH
27226: LD_INT 4
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: LD_INT 4
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: LD_INT 3
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: PUSH
27257: LD_INT 5
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: LD_INT 5
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 1
27276: NEG
27277: PUSH
27278: LD_INT 4
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: LD_INT 6
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: LD_INT 6
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 1
27307: NEG
27308: PUSH
27309: LD_INT 5
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27330: LD_ADDR_VAR 0 33
27334: PUSH
27335: LD_INT 2
27337: NEG
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 3
27348: NEG
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 3
27359: NEG
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 3
27371: NEG
27372: PUSH
27373: LD_INT 1
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 4
27382: NEG
27383: PUSH
27384: LD_INT 0
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 4
27393: NEG
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 4
27405: NEG
27406: PUSH
27407: LD_INT 1
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 5
27416: NEG
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 5
27427: NEG
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 5
27439: NEG
27440: PUSH
27441: LD_INT 1
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 6
27450: NEG
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 6
27461: NEG
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27485: LD_ADDR_VAR 0 34
27489: PUSH
27490: LD_INT 2
27492: NEG
27493: PUSH
27494: LD_INT 3
27496: NEG
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 3
27504: NEG
27505: PUSH
27506: LD_INT 2
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 3
27516: NEG
27517: PUSH
27518: LD_INT 3
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 3
27528: NEG
27529: PUSH
27530: LD_INT 4
27532: NEG
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 4
27540: NEG
27541: PUSH
27542: LD_INT 3
27544: NEG
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 4
27552: NEG
27553: PUSH
27554: LD_INT 4
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 4
27564: NEG
27565: PUSH
27566: LD_INT 5
27568: NEG
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 5
27576: NEG
27577: PUSH
27578: LD_INT 4
27580: NEG
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 5
27588: NEG
27589: PUSH
27590: LD_INT 5
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 5
27600: NEG
27601: PUSH
27602: LD_INT 6
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 6
27612: NEG
27613: PUSH
27614: LD_INT 5
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 6
27624: NEG
27625: PUSH
27626: LD_INT 6
27628: NEG
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27648: LD_ADDR_VAR 0 41
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: LD_INT 2
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 1
27666: NEG
27667: PUSH
27668: LD_INT 3
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 1
27678: PUSH
27679: LD_INT 2
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: LIST
27691: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27692: LD_ADDR_VAR 0 42
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: LD_INT 1
27712: NEG
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 3
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: LIST
27732: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27733: LD_ADDR_VAR 0 43
27737: PUSH
27738: LD_INT 2
27740: PUSH
27741: LD_INT 2
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 3
27750: PUSH
27751: LD_INT 2
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: LD_INT 3
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: LIST
27772: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27773: LD_ADDR_VAR 0 44
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: LD_INT 3
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: LD_INT 2
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: LIST
27813: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27814: LD_ADDR_VAR 0 45
27818: PUSH
27819: LD_INT 2
27821: NEG
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 2
27832: NEG
27833: PUSH
27834: LD_INT 1
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 3
27843: NEG
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: LIST
27857: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27858: LD_ADDR_VAR 0 46
27862: PUSH
27863: LD_INT 2
27865: NEG
27866: PUSH
27867: LD_INT 2
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 2
27877: NEG
27878: PUSH
27879: LD_INT 3
27881: NEG
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 3
27889: NEG
27890: PUSH
27891: LD_INT 2
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
27904: LD_ADDR_VAR 0 47
27908: PUSH
27909: LD_INT 2
27911: NEG
27912: PUSH
27913: LD_INT 3
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: LD_INT 3
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27937: LD_ADDR_VAR 0 48
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: LD_INT 2
27947: NEG
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
27968: LD_ADDR_VAR 0 49
27972: PUSH
27973: LD_INT 3
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 3
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
27997: LD_ADDR_VAR 0 50
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 3
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: LD_INT 3
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28026: LD_ADDR_VAR 0 51
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 2
28044: NEG
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28057: LD_ADDR_VAR 0 52
28061: PUSH
28062: LD_INT 3
28064: NEG
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 3
28076: NEG
28077: PUSH
28078: LD_INT 2
28080: NEG
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28090: LD_ADDR_VAR 0 53
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: PUSH
28099: LD_INT 3
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: LD_INT 3
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 1
28120: PUSH
28121: LD_INT 2
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28134: LD_ADDR_VAR 0 54
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: LD_INT 1
28144: NEG
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 3
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 3
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: LIST
28174: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28175: LD_ADDR_VAR 0 55
28179: PUSH
28180: LD_INT 3
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 3
28192: PUSH
28193: LD_INT 3
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: LD_INT 3
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28215: LD_ADDR_VAR 0 56
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: LD_INT 3
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 0
28232: PUSH
28233: LD_INT 3
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: NEG
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28256: LD_ADDR_VAR 0 57
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 3
28274: NEG
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 3
28285: NEG
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: LIST
28299: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28300: LD_ADDR_VAR 0 58
28304: PUSH
28305: LD_INT 2
28307: NEG
28308: PUSH
28309: LD_INT 3
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 3
28319: NEG
28320: PUSH
28321: LD_INT 2
28323: NEG
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 3
28331: NEG
28332: PUSH
28333: LD_INT 3
28335: NEG
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: LIST
28345: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28346: LD_ADDR_VAR 0 59
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: LD_INT 2
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: LD_INT 2
28368: NEG
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: LIST
28389: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28390: LD_ADDR_VAR 0 60
28394: PUSH
28395: LD_INT 1
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 2
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 2
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: LIST
28430: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28431: LD_ADDR_VAR 0 61
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: LD_INT 1
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 2
28448: PUSH
28449: LD_INT 2
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: LD_INT 2
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28471: LD_ADDR_VAR 0 62
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: LD_INT 2
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: LD_INT 2
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 1
28498: NEG
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: LIST
28511: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28512: LD_ADDR_VAR 0 63
28516: PUSH
28517: LD_INT 1
28519: NEG
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 2
28530: NEG
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 2
28541: NEG
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28556: LD_ADDR_VAR 0 64
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: LD_INT 2
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 2
28575: NEG
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: NEG
28588: PUSH
28589: LD_INT 2
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: LIST
28601: ST_TO_ADDR
// end ; 2 :
28602: GO 31868
28604: LD_INT 2
28606: DOUBLE
28607: EQUAL
28608: IFTRUE 28612
28610: GO 31867
28612: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28613: LD_ADDR_VAR 0 29
28617: PUSH
28618: LD_INT 4
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 4
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 5
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 5
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 4
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 3
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 3
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 3
28692: PUSH
28693: LD_INT 2
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 5
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 3
28713: PUSH
28714: LD_INT 3
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 3
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 4
28733: PUSH
28734: LD_INT 3
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 4
28743: PUSH
28744: LD_INT 4
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 3
28753: PUSH
28754: LD_INT 4
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 2
28763: PUSH
28764: LD_INT 3
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: LD_INT 2
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 4
28783: PUSH
28784: LD_INT 2
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: LD_INT 4
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: LD_INT 4
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: LD_INT 3
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: LD_INT 4
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: LD_INT 5
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 5
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: LD_INT 4
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: LD_INT 3
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 2
28875: PUSH
28876: LD_INT 5
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 2
28885: NEG
28886: PUSH
28887: LD_INT 3
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 3
28896: NEG
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 3
28907: NEG
28908: PUSH
28909: LD_INT 1
28911: NEG
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 2
28919: NEG
28920: PUSH
28921: LD_INT 0
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 2
28930: NEG
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 3
28941: NEG
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 4
28952: NEG
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 4
28963: NEG
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 4
28975: NEG
28976: PUSH
28977: LD_INT 2
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 2
28987: NEG
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 4
28998: NEG
28999: PUSH
29000: LD_INT 4
29002: NEG
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 4
29010: NEG
29011: PUSH
29012: LD_INT 5
29014: NEG
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 3
29022: NEG
29023: PUSH
29024: LD_INT 4
29026: NEG
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 3
29034: NEG
29035: PUSH
29036: LD_INT 3
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 4
29046: NEG
29047: PUSH
29048: LD_INT 3
29050: NEG
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 5
29058: NEG
29059: PUSH
29060: LD_INT 4
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 5
29070: NEG
29071: PUSH
29072: LD_INT 5
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 3
29082: NEG
29083: PUSH
29084: LD_INT 5
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 5
29094: NEG
29095: PUSH
29096: LD_INT 3
29098: NEG
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29151: LD_ADDR_VAR 0 30
29155: PUSH
29156: LD_INT 4
29158: PUSH
29159: LD_INT 4
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 4
29168: PUSH
29169: LD_INT 3
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 5
29178: PUSH
29179: LD_INT 4
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 5
29188: PUSH
29189: LD_INT 5
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 4
29198: PUSH
29199: LD_INT 5
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 3
29208: PUSH
29209: LD_INT 4
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 3
29218: PUSH
29219: LD_INT 3
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 5
29228: PUSH
29229: LD_INT 3
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: LD_INT 5
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: LD_INT 3
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: LD_INT 3
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: PUSH
29279: LD_INT 4
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 0
29288: PUSH
29289: LD_INT 4
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: LD_INT 3
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 2
29320: PUSH
29321: LD_INT 4
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 2
29330: NEG
29331: PUSH
29332: LD_INT 2
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 4
29341: NEG
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 4
29352: NEG
29353: PUSH
29354: LD_INT 1
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 3
29364: NEG
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 3
29375: NEG
29376: PUSH
29377: LD_INT 1
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 4
29386: NEG
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 5
29397: NEG
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 5
29408: NEG
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 5
29420: NEG
29421: PUSH
29422: LD_INT 2
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 3
29432: NEG
29433: PUSH
29434: LD_INT 2
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 3
29443: NEG
29444: PUSH
29445: LD_INT 3
29447: NEG
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 3
29455: NEG
29456: PUSH
29457: LD_INT 4
29459: NEG
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 2
29467: NEG
29468: PUSH
29469: LD_INT 3
29471: NEG
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 2
29479: NEG
29480: PUSH
29481: LD_INT 2
29483: NEG
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 3
29491: NEG
29492: PUSH
29493: LD_INT 2
29495: NEG
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 4
29503: NEG
29504: PUSH
29505: LD_INT 3
29507: NEG
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 4
29515: NEG
29516: PUSH
29517: LD_INT 4
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 2
29527: NEG
29528: PUSH
29529: LD_INT 4
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 4
29539: NEG
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: LD_INT 4
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: LD_INT 5
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 1
29573: PUSH
29574: LD_INT 4
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 3
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: LD_INT 3
29598: NEG
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: LD_INT 4
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 1
29618: NEG
29619: PUSH
29620: LD_INT 5
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: PUSH
29631: LD_INT 3
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: LD_INT 5
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29698: LD_ADDR_VAR 0 31
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: LD_INT 4
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: LD_INT 3
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: LD_INT 4
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: LD_INT 5
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: LD_INT 5
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: LD_INT 4
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: LD_INT 3
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 2
29777: PUSH
29778: LD_INT 5
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 2
29787: NEG
29788: PUSH
29789: LD_INT 3
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 3
29798: NEG
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 3
29809: NEG
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 2
29821: NEG
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 2
29832: NEG
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 3
29843: NEG
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 4
29854: NEG
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 4
29865: NEG
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 4
29877: NEG
29878: PUSH
29879: LD_INT 2
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 2
29889: NEG
29890: PUSH
29891: LD_INT 2
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 4
29900: NEG
29901: PUSH
29902: LD_INT 4
29904: NEG
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 4
29912: NEG
29913: PUSH
29914: LD_INT 5
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 3
29924: NEG
29925: PUSH
29926: LD_INT 4
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 3
29936: NEG
29937: PUSH
29938: LD_INT 3
29940: NEG
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 4
29948: NEG
29949: PUSH
29950: LD_INT 3
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 5
29960: NEG
29961: PUSH
29962: LD_INT 4
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 5
29972: NEG
29973: PUSH
29974: LD_INT 5
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: NEG
29985: PUSH
29986: LD_INT 5
29988: NEG
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 5
29996: NEG
29997: PUSH
29998: LD_INT 3
30000: NEG
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: LD_INT 3
30011: NEG
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: LD_INT 4
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: LD_INT 3
30033: NEG
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: LD_INT 2
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: LD_INT 2
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: LD_INT 3
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: LD_INT 4
30079: NEG
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 2
30087: PUSH
30088: LD_INT 2
30090: NEG
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 2
30098: NEG
30099: PUSH
30100: LD_INT 4
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 4
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 4
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 5
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 5
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 4
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 3
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 3
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 3
30182: PUSH
30183: LD_INT 2
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 5
30193: PUSH
30194: LD_INT 2
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30248: LD_ADDR_VAR 0 32
30252: PUSH
30253: LD_INT 4
30255: NEG
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 4
30266: NEG
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 3
30278: NEG
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 3
30289: NEG
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 4
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 5
30311: NEG
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 5
30322: NEG
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 5
30334: NEG
30335: PUSH
30336: LD_INT 2
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 3
30346: NEG
30347: PUSH
30348: LD_INT 2
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 3
30357: NEG
30358: PUSH
30359: LD_INT 3
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 3
30369: NEG
30370: PUSH
30371: LD_INT 4
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: NEG
30382: PUSH
30383: LD_INT 3
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 2
30393: NEG
30394: PUSH
30395: LD_INT 2
30397: NEG
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 3
30405: NEG
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 4
30417: NEG
30418: PUSH
30419: LD_INT 3
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 4
30429: NEG
30430: PUSH
30431: LD_INT 4
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: LD_INT 4
30445: NEG
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 4
30453: NEG
30454: PUSH
30455: LD_INT 2
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 0
30465: PUSH
30466: LD_INT 4
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 0
30476: PUSH
30477: LD_INT 5
30479: NEG
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 1
30487: PUSH
30488: LD_INT 4
30490: NEG
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: LD_INT 3
30501: NEG
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: LD_INT 3
30512: NEG
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: LD_INT 4
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: LD_INT 5
30536: NEG
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: LD_INT 3
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 2
30555: NEG
30556: PUSH
30557: LD_INT 5
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 3
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 4
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 4
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 3
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 2
30618: PUSH
30619: LD_INT 0
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 2
30628: PUSH
30629: LD_INT 1
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 2
30639: PUSH
30640: LD_INT 2
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 4
30650: PUSH
30651: LD_INT 2
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 4
30660: PUSH
30661: LD_INT 4
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 4
30670: PUSH
30671: LD_INT 3
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 5
30680: PUSH
30681: LD_INT 4
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 5
30690: PUSH
30691: LD_INT 5
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 4
30700: PUSH
30701: LD_INT 5
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 3
30710: PUSH
30711: LD_INT 4
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 3
30720: PUSH
30721: LD_INT 3
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 5
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 3
30740: PUSH
30741: LD_INT 5
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30795: LD_ADDR_VAR 0 33
30799: PUSH
30800: LD_INT 4
30802: NEG
30803: PUSH
30804: LD_INT 4
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 4
30814: NEG
30815: PUSH
30816: LD_INT 5
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 3
30826: NEG
30827: PUSH
30828: LD_INT 4
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 3
30838: NEG
30839: PUSH
30840: LD_INT 3
30842: NEG
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 4
30850: NEG
30851: PUSH
30852: LD_INT 3
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 5
30862: NEG
30863: PUSH
30864: LD_INT 4
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 5
30874: NEG
30875: PUSH
30876: LD_INT 5
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 3
30886: NEG
30887: PUSH
30888: LD_INT 5
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 5
30898: NEG
30899: PUSH
30900: LD_INT 3
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: LD_INT 3
30913: NEG
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: LD_INT 4
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: LD_INT 3
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: LD_INT 2
30946: NEG
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 2
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: LD_INT 3
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: LD_INT 4
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 2
30989: PUSH
30990: LD_INT 2
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 2
31000: NEG
31001: PUSH
31002: LD_INT 4
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 4
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 4
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 5
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 5
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 4
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 3
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 3
31073: PUSH
31074: LD_INT 1
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: LD_INT 2
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 5
31095: PUSH
31096: LD_INT 2
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 3
31105: PUSH
31106: LD_INT 3
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 3
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 4
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 4
31135: PUSH
31136: LD_INT 4
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 3
31145: PUSH
31146: LD_INT 4
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 2
31155: PUSH
31156: LD_INT 3
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 4
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 2
31185: PUSH
31186: LD_INT 4
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 4
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: LD_INT 4
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: LD_INT 5
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: LD_INT 5
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: LD_INT 4
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: LD_INT 3
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: LD_INT 5
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31333: LD_ADDR_VAR 0 34
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: LD_INT 4
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: LD_INT 5
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: PUSH
31363: LD_INT 4
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: LD_INT 3
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: LD_INT 3
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 1
31395: NEG
31396: PUSH
31397: LD_INT 4
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: LD_INT 5
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: LD_INT 3
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: NEG
31431: PUSH
31432: LD_INT 5
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 3
31442: PUSH
31443: LD_INT 0
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 3
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 4
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 4
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 3
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 2
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 2
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 2
31514: PUSH
31515: LD_INT 2
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 4
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 4
31535: PUSH
31536: LD_INT 4
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 4
31545: PUSH
31546: LD_INT 3
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 5
31555: PUSH
31556: LD_INT 4
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 5
31565: PUSH
31566: LD_INT 5
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 4
31575: PUSH
31576: LD_INT 5
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 3
31585: PUSH
31586: LD_INT 4
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 3
31595: PUSH
31596: LD_INT 3
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 5
31605: PUSH
31606: LD_INT 3
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 3
31615: PUSH
31616: LD_INT 5
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: LD_INT 3
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: LD_INT 3
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: LD_INT 4
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: LD_INT 4
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: LD_INT 3
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: LD_INT 2
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 2
31697: PUSH
31698: LD_INT 4
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 2
31707: NEG
31708: PUSH
31709: LD_INT 2
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 4
31718: NEG
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 4
31729: NEG
31730: PUSH
31731: LD_INT 1
31733: NEG
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 3
31741: NEG
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 3
31752: NEG
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 4
31763: NEG
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 5
31774: NEG
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 5
31785: NEG
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 5
31797: NEG
31798: PUSH
31799: LD_INT 2
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 3
31809: NEG
31810: PUSH
31811: LD_INT 2
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: ST_TO_ADDR
// end ; end ;
31865: GO 31868
31867: POP
// case btype of b_depot , b_warehouse :
31868: LD_VAR 0 1
31872: PUSH
31873: LD_INT 0
31875: DOUBLE
31876: EQUAL
31877: IFTRUE 31887
31879: LD_INT 1
31881: DOUBLE
31882: EQUAL
31883: IFTRUE 31887
31885: GO 32088
31887: POP
// case nation of nation_american :
31888: LD_VAR 0 5
31892: PUSH
31893: LD_INT 1
31895: DOUBLE
31896: EQUAL
31897: IFTRUE 31901
31899: GO 31957
31901: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
31902: LD_ADDR_VAR 0 9
31906: PUSH
31907: LD_VAR 0 11
31911: PUSH
31912: LD_VAR 0 12
31916: PUSH
31917: LD_VAR 0 13
31921: PUSH
31922: LD_VAR 0 14
31926: PUSH
31927: LD_VAR 0 15
31931: PUSH
31932: LD_VAR 0 16
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: PUSH
31945: LD_VAR 0 4
31949: PUSH
31950: LD_INT 1
31952: PLUS
31953: ARRAY
31954: ST_TO_ADDR
31955: GO 32086
31957: LD_INT 2
31959: DOUBLE
31960: EQUAL
31961: IFTRUE 31965
31963: GO 32021
31965: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
31966: LD_ADDR_VAR 0 9
31970: PUSH
31971: LD_VAR 0 17
31975: PUSH
31976: LD_VAR 0 18
31980: PUSH
31981: LD_VAR 0 19
31985: PUSH
31986: LD_VAR 0 20
31990: PUSH
31991: LD_VAR 0 21
31995: PUSH
31996: LD_VAR 0 22
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: PUSH
32009: LD_VAR 0 4
32013: PUSH
32014: LD_INT 1
32016: PLUS
32017: ARRAY
32018: ST_TO_ADDR
32019: GO 32086
32021: LD_INT 3
32023: DOUBLE
32024: EQUAL
32025: IFTRUE 32029
32027: GO 32085
32029: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32030: LD_ADDR_VAR 0 9
32034: PUSH
32035: LD_VAR 0 23
32039: PUSH
32040: LD_VAR 0 24
32044: PUSH
32045: LD_VAR 0 25
32049: PUSH
32050: LD_VAR 0 26
32054: PUSH
32055: LD_VAR 0 27
32059: PUSH
32060: LD_VAR 0 28
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: PUSH
32073: LD_VAR 0 4
32077: PUSH
32078: LD_INT 1
32080: PLUS
32081: ARRAY
32082: ST_TO_ADDR
32083: GO 32086
32085: POP
32086: GO 32641
32088: LD_INT 2
32090: DOUBLE
32091: EQUAL
32092: IFTRUE 32102
32094: LD_INT 3
32096: DOUBLE
32097: EQUAL
32098: IFTRUE 32102
32100: GO 32158
32102: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32103: LD_ADDR_VAR 0 9
32107: PUSH
32108: LD_VAR 0 29
32112: PUSH
32113: LD_VAR 0 30
32117: PUSH
32118: LD_VAR 0 31
32122: PUSH
32123: LD_VAR 0 32
32127: PUSH
32128: LD_VAR 0 33
32132: PUSH
32133: LD_VAR 0 34
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: PUSH
32146: LD_VAR 0 4
32150: PUSH
32151: LD_INT 1
32153: PLUS
32154: ARRAY
32155: ST_TO_ADDR
32156: GO 32641
32158: LD_INT 16
32160: DOUBLE
32161: EQUAL
32162: IFTRUE 32220
32164: LD_INT 17
32166: DOUBLE
32167: EQUAL
32168: IFTRUE 32220
32170: LD_INT 18
32172: DOUBLE
32173: EQUAL
32174: IFTRUE 32220
32176: LD_INT 19
32178: DOUBLE
32179: EQUAL
32180: IFTRUE 32220
32182: LD_INT 22
32184: DOUBLE
32185: EQUAL
32186: IFTRUE 32220
32188: LD_INT 20
32190: DOUBLE
32191: EQUAL
32192: IFTRUE 32220
32194: LD_INT 21
32196: DOUBLE
32197: EQUAL
32198: IFTRUE 32220
32200: LD_INT 23
32202: DOUBLE
32203: EQUAL
32204: IFTRUE 32220
32206: LD_INT 24
32208: DOUBLE
32209: EQUAL
32210: IFTRUE 32220
32212: LD_INT 25
32214: DOUBLE
32215: EQUAL
32216: IFTRUE 32220
32218: GO 32276
32220: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32221: LD_ADDR_VAR 0 9
32225: PUSH
32226: LD_VAR 0 35
32230: PUSH
32231: LD_VAR 0 36
32235: PUSH
32236: LD_VAR 0 37
32240: PUSH
32241: LD_VAR 0 38
32245: PUSH
32246: LD_VAR 0 39
32250: PUSH
32251: LD_VAR 0 40
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: PUSH
32264: LD_VAR 0 4
32268: PUSH
32269: LD_INT 1
32271: PLUS
32272: ARRAY
32273: ST_TO_ADDR
32274: GO 32641
32276: LD_INT 6
32278: DOUBLE
32279: EQUAL
32280: IFTRUE 32332
32282: LD_INT 7
32284: DOUBLE
32285: EQUAL
32286: IFTRUE 32332
32288: LD_INT 8
32290: DOUBLE
32291: EQUAL
32292: IFTRUE 32332
32294: LD_INT 13
32296: DOUBLE
32297: EQUAL
32298: IFTRUE 32332
32300: LD_INT 12
32302: DOUBLE
32303: EQUAL
32304: IFTRUE 32332
32306: LD_INT 15
32308: DOUBLE
32309: EQUAL
32310: IFTRUE 32332
32312: LD_INT 11
32314: DOUBLE
32315: EQUAL
32316: IFTRUE 32332
32318: LD_INT 14
32320: DOUBLE
32321: EQUAL
32322: IFTRUE 32332
32324: LD_INT 10
32326: DOUBLE
32327: EQUAL
32328: IFTRUE 32332
32330: GO 32388
32332: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32333: LD_ADDR_VAR 0 9
32337: PUSH
32338: LD_VAR 0 41
32342: PUSH
32343: LD_VAR 0 42
32347: PUSH
32348: LD_VAR 0 43
32352: PUSH
32353: LD_VAR 0 44
32357: PUSH
32358: LD_VAR 0 45
32362: PUSH
32363: LD_VAR 0 46
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: PUSH
32376: LD_VAR 0 4
32380: PUSH
32381: LD_INT 1
32383: PLUS
32384: ARRAY
32385: ST_TO_ADDR
32386: GO 32641
32388: LD_INT 36
32390: DOUBLE
32391: EQUAL
32392: IFTRUE 32396
32394: GO 32452
32396: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32397: LD_ADDR_VAR 0 9
32401: PUSH
32402: LD_VAR 0 47
32406: PUSH
32407: LD_VAR 0 48
32411: PUSH
32412: LD_VAR 0 49
32416: PUSH
32417: LD_VAR 0 50
32421: PUSH
32422: LD_VAR 0 51
32426: PUSH
32427: LD_VAR 0 52
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: PUSH
32440: LD_VAR 0 4
32444: PUSH
32445: LD_INT 1
32447: PLUS
32448: ARRAY
32449: ST_TO_ADDR
32450: GO 32641
32452: LD_INT 4
32454: DOUBLE
32455: EQUAL
32456: IFTRUE 32478
32458: LD_INT 5
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32478
32464: LD_INT 34
32466: DOUBLE
32467: EQUAL
32468: IFTRUE 32478
32470: LD_INT 37
32472: DOUBLE
32473: EQUAL
32474: IFTRUE 32478
32476: GO 32534
32478: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32479: LD_ADDR_VAR 0 9
32483: PUSH
32484: LD_VAR 0 53
32488: PUSH
32489: LD_VAR 0 54
32493: PUSH
32494: LD_VAR 0 55
32498: PUSH
32499: LD_VAR 0 56
32503: PUSH
32504: LD_VAR 0 57
32508: PUSH
32509: LD_VAR 0 58
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: PUSH
32522: LD_VAR 0 4
32526: PUSH
32527: LD_INT 1
32529: PLUS
32530: ARRAY
32531: ST_TO_ADDR
32532: GO 32641
32534: LD_INT 31
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32584
32540: LD_INT 32
32542: DOUBLE
32543: EQUAL
32544: IFTRUE 32584
32546: LD_INT 33
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32584
32552: LD_INT 27
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32584
32558: LD_INT 26
32560: DOUBLE
32561: EQUAL
32562: IFTRUE 32584
32564: LD_INT 28
32566: DOUBLE
32567: EQUAL
32568: IFTRUE 32584
32570: LD_INT 29
32572: DOUBLE
32573: EQUAL
32574: IFTRUE 32584
32576: LD_INT 30
32578: DOUBLE
32579: EQUAL
32580: IFTRUE 32584
32582: GO 32640
32584: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32585: LD_ADDR_VAR 0 9
32589: PUSH
32590: LD_VAR 0 59
32594: PUSH
32595: LD_VAR 0 60
32599: PUSH
32600: LD_VAR 0 61
32604: PUSH
32605: LD_VAR 0 62
32609: PUSH
32610: LD_VAR 0 63
32614: PUSH
32615: LD_VAR 0 64
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: PUSH
32628: LD_VAR 0 4
32632: PUSH
32633: LD_INT 1
32635: PLUS
32636: ARRAY
32637: ST_TO_ADDR
32638: GO 32641
32640: POP
// temp_list2 = [ ] ;
32641: LD_ADDR_VAR 0 10
32645: PUSH
32646: EMPTY
32647: ST_TO_ADDR
// for i in temp_list do
32648: LD_ADDR_VAR 0 8
32652: PUSH
32653: LD_VAR 0 9
32657: PUSH
32658: FOR_IN
32659: IFFALSE 32711
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32661: LD_ADDR_VAR 0 10
32665: PUSH
32666: LD_VAR 0 10
32670: PUSH
32671: LD_VAR 0 8
32675: PUSH
32676: LD_INT 1
32678: ARRAY
32679: PUSH
32680: LD_VAR 0 2
32684: PLUS
32685: PUSH
32686: LD_VAR 0 8
32690: PUSH
32691: LD_INT 2
32693: ARRAY
32694: PUSH
32695: LD_VAR 0 3
32699: PLUS
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: EMPTY
32706: LIST
32707: ADD
32708: ST_TO_ADDR
32709: GO 32658
32711: POP
32712: POP
// result = temp_list2 ;
32713: LD_ADDR_VAR 0 7
32717: PUSH
32718: LD_VAR 0 10
32722: ST_TO_ADDR
// end ;
32723: LD_VAR 0 7
32727: RET
// export function EnemyInRange ( unit , dist ) ; begin
32728: LD_INT 0
32730: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32731: LD_ADDR_VAR 0 3
32735: PUSH
32736: LD_VAR 0 1
32740: PPUSH
32741: CALL_OW 255
32745: PPUSH
32746: LD_VAR 0 1
32750: PPUSH
32751: CALL_OW 250
32755: PPUSH
32756: LD_VAR 0 1
32760: PPUSH
32761: CALL_OW 251
32765: PPUSH
32766: LD_VAR 0 2
32770: PPUSH
32771: CALL 6130 0 4
32775: PUSH
32776: LD_INT 4
32778: ARRAY
32779: ST_TO_ADDR
// end ;
32780: LD_VAR 0 3
32784: RET
// export function PlayerSeeMe ( unit ) ; begin
32785: LD_INT 0
32787: PPUSH
// result := See ( your_side , unit ) ;
32788: LD_ADDR_VAR 0 2
32792: PUSH
32793: LD_OWVAR 2
32797: PPUSH
32798: LD_VAR 0 1
32802: PPUSH
32803: CALL_OW 292
32807: ST_TO_ADDR
// end ;
32808: LD_VAR 0 2
32812: RET
// export function ReverseDir ( unit ) ; begin
32813: LD_INT 0
32815: PPUSH
// if not unit then
32816: LD_VAR 0 1
32820: NOT
32821: IFFALSE 32825
// exit ;
32823: GO 32848
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32825: LD_ADDR_VAR 0 2
32829: PUSH
32830: LD_VAR 0 1
32834: PPUSH
32835: CALL_OW 254
32839: PUSH
32840: LD_INT 3
32842: PLUS
32843: PUSH
32844: LD_INT 6
32846: MOD
32847: ST_TO_ADDR
// end ;
32848: LD_VAR 0 2
32852: RET
// export function ReverseArray ( array ) ; var i ; begin
32853: LD_INT 0
32855: PPUSH
32856: PPUSH
// if not array then
32857: LD_VAR 0 1
32861: NOT
32862: IFFALSE 32866
// exit ;
32864: GO 32921
// result := [ ] ;
32866: LD_ADDR_VAR 0 2
32870: PUSH
32871: EMPTY
32872: ST_TO_ADDR
// for i := array downto 1 do
32873: LD_ADDR_VAR 0 3
32877: PUSH
32878: DOUBLE
32879: LD_VAR 0 1
32883: INC
32884: ST_TO_ADDR
32885: LD_INT 1
32887: PUSH
32888: FOR_DOWNTO
32889: IFFALSE 32919
// result := Join ( result , array [ i ] ) ;
32891: LD_ADDR_VAR 0 2
32895: PUSH
32896: LD_VAR 0 2
32900: PPUSH
32901: LD_VAR 0 1
32905: PUSH
32906: LD_VAR 0 3
32910: ARRAY
32911: PPUSH
32912: CALL 37564 0 2
32916: ST_TO_ADDR
32917: GO 32888
32919: POP
32920: POP
// end ;
32921: LD_VAR 0 2
32925: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
32926: LD_INT 0
32928: PPUSH
32929: PPUSH
32930: PPUSH
32931: PPUSH
32932: PPUSH
32933: PPUSH
// if not unit or not hexes then
32934: LD_VAR 0 1
32938: NOT
32939: PUSH
32940: LD_VAR 0 2
32944: NOT
32945: OR
32946: IFFALSE 32950
// exit ;
32948: GO 33073
// dist := 9999 ;
32950: LD_ADDR_VAR 0 5
32954: PUSH
32955: LD_INT 9999
32957: ST_TO_ADDR
// for i = 1 to hexes do
32958: LD_ADDR_VAR 0 4
32962: PUSH
32963: DOUBLE
32964: LD_INT 1
32966: DEC
32967: ST_TO_ADDR
32968: LD_VAR 0 2
32972: PUSH
32973: FOR_TO
32974: IFFALSE 33061
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32976: LD_ADDR_VAR 0 6
32980: PUSH
32981: LD_VAR 0 1
32985: PPUSH
32986: LD_VAR 0 2
32990: PUSH
32991: LD_VAR 0 4
32995: ARRAY
32996: PUSH
32997: LD_INT 1
32999: ARRAY
33000: PPUSH
33001: LD_VAR 0 2
33005: PUSH
33006: LD_VAR 0 4
33010: ARRAY
33011: PUSH
33012: LD_INT 2
33014: ARRAY
33015: PPUSH
33016: CALL_OW 297
33020: ST_TO_ADDR
// if tdist < dist then
33021: LD_VAR 0 6
33025: PUSH
33026: LD_VAR 0 5
33030: LESS
33031: IFFALSE 33059
// begin hex := hexes [ i ] ;
33033: LD_ADDR_VAR 0 8
33037: PUSH
33038: LD_VAR 0 2
33042: PUSH
33043: LD_VAR 0 4
33047: ARRAY
33048: ST_TO_ADDR
// dist := tdist ;
33049: LD_ADDR_VAR 0 5
33053: PUSH
33054: LD_VAR 0 6
33058: ST_TO_ADDR
// end ; end ;
33059: GO 32973
33061: POP
33062: POP
// result := hex ;
33063: LD_ADDR_VAR 0 3
33067: PUSH
33068: LD_VAR 0 8
33072: ST_TO_ADDR
// end ;
33073: LD_VAR 0 3
33077: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33078: LD_INT 0
33080: PPUSH
33081: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33082: LD_VAR 0 1
33086: NOT
33087: PUSH
33088: LD_VAR 0 1
33092: PUSH
33093: LD_INT 21
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 23
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PPUSH
33117: CALL_OW 69
33121: IN
33122: NOT
33123: OR
33124: IFFALSE 33128
// exit ;
33126: GO 33175
// for i = 1 to 3 do
33128: LD_ADDR_VAR 0 3
33132: PUSH
33133: DOUBLE
33134: LD_INT 1
33136: DEC
33137: ST_TO_ADDR
33138: LD_INT 3
33140: PUSH
33141: FOR_TO
33142: IFFALSE 33173
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33144: LD_VAR 0 1
33148: PPUSH
33149: CALL_OW 250
33153: PPUSH
33154: LD_VAR 0 1
33158: PPUSH
33159: CALL_OW 251
33163: PPUSH
33164: LD_INT 1
33166: PPUSH
33167: CALL_OW 453
33171: GO 33141
33173: POP
33174: POP
// end ;
33175: LD_VAR 0 2
33179: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33180: LD_INT 0
33182: PPUSH
33183: PPUSH
33184: PPUSH
33185: PPUSH
33186: PPUSH
33187: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33188: LD_VAR 0 1
33192: NOT
33193: PUSH
33194: LD_VAR 0 2
33198: NOT
33199: OR
33200: PUSH
33201: LD_VAR 0 1
33205: PPUSH
33206: CALL_OW 314
33210: OR
33211: IFFALSE 33215
// exit ;
33213: GO 33682
// if GetLives ( i ) < 250 then
33215: LD_VAR 0 4
33219: PPUSH
33220: CALL_OW 256
33224: PUSH
33225: LD_INT 250
33227: LESS
33228: IFFALSE 33241
// begin ComAutodestruct ( i ) ;
33230: LD_VAR 0 4
33234: PPUSH
33235: CALL 33078 0 1
// exit ;
33239: GO 33682
// end ; x := GetX ( enemy_unit ) ;
33241: LD_ADDR_VAR 0 7
33245: PUSH
33246: LD_VAR 0 2
33250: PPUSH
33251: CALL_OW 250
33255: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33256: LD_ADDR_VAR 0 8
33260: PUSH
33261: LD_VAR 0 2
33265: PPUSH
33266: CALL_OW 251
33270: ST_TO_ADDR
// if not x or not y then
33271: LD_VAR 0 7
33275: NOT
33276: PUSH
33277: LD_VAR 0 8
33281: NOT
33282: OR
33283: IFFALSE 33287
// exit ;
33285: GO 33682
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33287: LD_ADDR_VAR 0 6
33291: PUSH
33292: LD_VAR 0 7
33296: PPUSH
33297: LD_INT 0
33299: PPUSH
33300: LD_INT 4
33302: PPUSH
33303: CALL_OW 272
33307: PUSH
33308: LD_VAR 0 8
33312: PPUSH
33313: LD_INT 0
33315: PPUSH
33316: LD_INT 4
33318: PPUSH
33319: CALL_OW 273
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_VAR 0 7
33332: PPUSH
33333: LD_INT 1
33335: PPUSH
33336: LD_INT 4
33338: PPUSH
33339: CALL_OW 272
33343: PUSH
33344: LD_VAR 0 8
33348: PPUSH
33349: LD_INT 1
33351: PPUSH
33352: LD_INT 4
33354: PPUSH
33355: CALL_OW 273
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_VAR 0 7
33368: PPUSH
33369: LD_INT 2
33371: PPUSH
33372: LD_INT 4
33374: PPUSH
33375: CALL_OW 272
33379: PUSH
33380: LD_VAR 0 8
33384: PPUSH
33385: LD_INT 2
33387: PPUSH
33388: LD_INT 4
33390: PPUSH
33391: CALL_OW 273
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_VAR 0 7
33404: PPUSH
33405: LD_INT 3
33407: PPUSH
33408: LD_INT 4
33410: PPUSH
33411: CALL_OW 272
33415: PUSH
33416: LD_VAR 0 8
33420: PPUSH
33421: LD_INT 3
33423: PPUSH
33424: LD_INT 4
33426: PPUSH
33427: CALL_OW 273
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_VAR 0 7
33440: PPUSH
33441: LD_INT 4
33443: PPUSH
33444: LD_INT 4
33446: PPUSH
33447: CALL_OW 272
33451: PUSH
33452: LD_VAR 0 8
33456: PPUSH
33457: LD_INT 4
33459: PPUSH
33460: LD_INT 4
33462: PPUSH
33463: CALL_OW 273
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_VAR 0 7
33476: PPUSH
33477: LD_INT 5
33479: PPUSH
33480: LD_INT 4
33482: PPUSH
33483: CALL_OW 272
33487: PUSH
33488: LD_VAR 0 8
33492: PPUSH
33493: LD_INT 5
33495: PPUSH
33496: LD_INT 4
33498: PPUSH
33499: CALL_OW 273
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: ST_TO_ADDR
// for i = tmp downto 1 do
33516: LD_ADDR_VAR 0 4
33520: PUSH
33521: DOUBLE
33522: LD_VAR 0 6
33526: INC
33527: ST_TO_ADDR
33528: LD_INT 1
33530: PUSH
33531: FOR_DOWNTO
33532: IFFALSE 33633
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33534: LD_VAR 0 6
33538: PUSH
33539: LD_VAR 0 4
33543: ARRAY
33544: PUSH
33545: LD_INT 1
33547: ARRAY
33548: PPUSH
33549: LD_VAR 0 6
33553: PUSH
33554: LD_VAR 0 4
33558: ARRAY
33559: PUSH
33560: LD_INT 2
33562: ARRAY
33563: PPUSH
33564: CALL_OW 488
33568: NOT
33569: PUSH
33570: LD_VAR 0 6
33574: PUSH
33575: LD_VAR 0 4
33579: ARRAY
33580: PUSH
33581: LD_INT 1
33583: ARRAY
33584: PPUSH
33585: LD_VAR 0 6
33589: PUSH
33590: LD_VAR 0 4
33594: ARRAY
33595: PUSH
33596: LD_INT 2
33598: ARRAY
33599: PPUSH
33600: CALL_OW 428
33604: PUSH
33605: LD_INT 0
33607: NONEQUAL
33608: OR
33609: IFFALSE 33631
// tmp := Delete ( tmp , i ) ;
33611: LD_ADDR_VAR 0 6
33615: PUSH
33616: LD_VAR 0 6
33620: PPUSH
33621: LD_VAR 0 4
33625: PPUSH
33626: CALL_OW 3
33630: ST_TO_ADDR
33631: GO 33531
33633: POP
33634: POP
// j := GetClosestHex ( unit , tmp ) ;
33635: LD_ADDR_VAR 0 5
33639: PUSH
33640: LD_VAR 0 1
33644: PPUSH
33645: LD_VAR 0 6
33649: PPUSH
33650: CALL 32926 0 2
33654: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33655: LD_VAR 0 1
33659: PPUSH
33660: LD_VAR 0 5
33664: PUSH
33665: LD_INT 1
33667: ARRAY
33668: PPUSH
33669: LD_VAR 0 5
33673: PUSH
33674: LD_INT 2
33676: ARRAY
33677: PPUSH
33678: CALL_OW 111
// end ;
33682: LD_VAR 0 3
33686: RET
// export function PrepareApemanSoldier ( ) ; begin
33687: LD_INT 0
33689: PPUSH
// uc_nation := 0 ;
33690: LD_ADDR_OWVAR 21
33694: PUSH
33695: LD_INT 0
33697: ST_TO_ADDR
// hc_sex := sex_male ;
33698: LD_ADDR_OWVAR 27
33702: PUSH
33703: LD_INT 1
33705: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
33706: LD_ADDR_OWVAR 28
33710: PUSH
33711: LD_INT 15
33713: ST_TO_ADDR
// hc_gallery :=  ;
33714: LD_ADDR_OWVAR 33
33718: PUSH
33719: LD_STRING 
33721: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33722: LD_ADDR_OWVAR 31
33726: PUSH
33727: LD_INT 0
33729: PPUSH
33730: LD_INT 3
33732: PPUSH
33733: CALL_OW 12
33737: PUSH
33738: LD_INT 0
33740: PPUSH
33741: LD_INT 3
33743: PPUSH
33744: CALL_OW 12
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: ST_TO_ADDR
// end ;
33761: LD_VAR 0 1
33765: RET
// export function PrepareApemanEngineer ( ) ; begin
33766: LD_INT 0
33768: PPUSH
// uc_nation := 0 ;
33769: LD_ADDR_OWVAR 21
33773: PUSH
33774: LD_INT 0
33776: ST_TO_ADDR
// hc_sex := sex_male ;
33777: LD_ADDR_OWVAR 27
33781: PUSH
33782: LD_INT 1
33784: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
33785: LD_ADDR_OWVAR 28
33789: PUSH
33790: LD_INT 16
33792: ST_TO_ADDR
// hc_gallery :=  ;
33793: LD_ADDR_OWVAR 33
33797: PUSH
33798: LD_STRING 
33800: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33801: LD_ADDR_OWVAR 31
33805: PUSH
33806: LD_INT 0
33808: PPUSH
33809: LD_INT 3
33811: PPUSH
33812: CALL_OW 12
33816: PUSH
33817: LD_INT 0
33819: PPUSH
33820: LD_INT 3
33822: PPUSH
33823: CALL_OW 12
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: ST_TO_ADDR
// end ;
33840: LD_VAR 0 1
33844: RET
// export function PrepareApeman ( agressivity ) ; begin
33845: LD_INT 0
33847: PPUSH
// uc_side := 0 ;
33848: LD_ADDR_OWVAR 20
33852: PUSH
33853: LD_INT 0
33855: ST_TO_ADDR
// uc_nation := 0 ;
33856: LD_ADDR_OWVAR 21
33860: PUSH
33861: LD_INT 0
33863: ST_TO_ADDR
// hc_sex := sex_male ;
33864: LD_ADDR_OWVAR 27
33868: PUSH
33869: LD_INT 1
33871: ST_TO_ADDR
// hc_class := class_apeman ;
33872: LD_ADDR_OWVAR 28
33876: PUSH
33877: LD_INT 12
33879: ST_TO_ADDR
// hc_gallery :=  ;
33880: LD_ADDR_OWVAR 33
33884: PUSH
33885: LD_STRING 
33887: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
33888: LD_ADDR_OWVAR 35
33892: PUSH
33893: LD_VAR 0 1
33897: NEG
33898: PPUSH
33899: LD_VAR 0 1
33903: PPUSH
33904: CALL_OW 12
33908: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33909: LD_ADDR_OWVAR 31
33913: PUSH
33914: LD_INT 0
33916: PPUSH
33917: LD_INT 3
33919: PPUSH
33920: CALL_OW 12
33924: PUSH
33925: LD_INT 0
33927: PPUSH
33928: LD_INT 3
33930: PPUSH
33931: CALL_OW 12
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: ST_TO_ADDR
// end ;
33948: LD_VAR 0 2
33952: RET
// export function PrepareTiger ( agressivity ) ; begin
33953: LD_INT 0
33955: PPUSH
// uc_side := 0 ;
33956: LD_ADDR_OWVAR 20
33960: PUSH
33961: LD_INT 0
33963: ST_TO_ADDR
// uc_nation := 0 ;
33964: LD_ADDR_OWVAR 21
33968: PUSH
33969: LD_INT 0
33971: ST_TO_ADDR
// hc_class := class_tiger ;
33972: LD_ADDR_OWVAR 28
33976: PUSH
33977: LD_INT 14
33979: ST_TO_ADDR
// hc_gallery :=  ;
33980: LD_ADDR_OWVAR 33
33984: PUSH
33985: LD_STRING 
33987: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
33988: LD_ADDR_OWVAR 35
33992: PUSH
33993: LD_VAR 0 1
33997: NEG
33998: PPUSH
33999: LD_VAR 0 1
34003: PPUSH
34004: CALL_OW 12
34008: ST_TO_ADDR
// end ;
34009: LD_VAR 0 2
34013: RET
// export function PrepareEnchidna ( ) ; begin
34014: LD_INT 0
34016: PPUSH
// uc_side := 0 ;
34017: LD_ADDR_OWVAR 20
34021: PUSH
34022: LD_INT 0
34024: ST_TO_ADDR
// uc_nation := 0 ;
34025: LD_ADDR_OWVAR 21
34029: PUSH
34030: LD_INT 0
34032: ST_TO_ADDR
// hc_class := class_baggie ;
34033: LD_ADDR_OWVAR 28
34037: PUSH
34038: LD_INT 13
34040: ST_TO_ADDR
// hc_gallery :=  ;
34041: LD_ADDR_OWVAR 33
34045: PUSH
34046: LD_STRING 
34048: ST_TO_ADDR
// end ;
34049: LD_VAR 0 1
34053: RET
// export function PrepareFrog ( ) ; begin
34054: LD_INT 0
34056: PPUSH
// uc_side := 0 ;
34057: LD_ADDR_OWVAR 20
34061: PUSH
34062: LD_INT 0
34064: ST_TO_ADDR
// uc_nation := 0 ;
34065: LD_ADDR_OWVAR 21
34069: PUSH
34070: LD_INT 0
34072: ST_TO_ADDR
// hc_class := class_frog ;
34073: LD_ADDR_OWVAR 28
34077: PUSH
34078: LD_INT 19
34080: ST_TO_ADDR
// hc_gallery :=  ;
34081: LD_ADDR_OWVAR 33
34085: PUSH
34086: LD_STRING 
34088: ST_TO_ADDR
// end ;
34089: LD_VAR 0 1
34093: RET
// export function PrepareFish ( ) ; begin
34094: LD_INT 0
34096: PPUSH
// uc_side := 0 ;
34097: LD_ADDR_OWVAR 20
34101: PUSH
34102: LD_INT 0
34104: ST_TO_ADDR
// uc_nation := 0 ;
34105: LD_ADDR_OWVAR 21
34109: PUSH
34110: LD_INT 0
34112: ST_TO_ADDR
// hc_class := class_fish ;
34113: LD_ADDR_OWVAR 28
34117: PUSH
34118: LD_INT 20
34120: ST_TO_ADDR
// hc_gallery :=  ;
34121: LD_ADDR_OWVAR 33
34125: PUSH
34126: LD_STRING 
34128: ST_TO_ADDR
// end ;
34129: LD_VAR 0 1
34133: RET
// export function PrepareBird ( ) ; begin
34134: LD_INT 0
34136: PPUSH
// uc_side := 0 ;
34137: LD_ADDR_OWVAR 20
34141: PUSH
34142: LD_INT 0
34144: ST_TO_ADDR
// uc_nation := 0 ;
34145: LD_ADDR_OWVAR 21
34149: PUSH
34150: LD_INT 0
34152: ST_TO_ADDR
// hc_class := class_phororhacos ;
34153: LD_ADDR_OWVAR 28
34157: PUSH
34158: LD_INT 18
34160: ST_TO_ADDR
// hc_gallery :=  ;
34161: LD_ADDR_OWVAR 33
34165: PUSH
34166: LD_STRING 
34168: ST_TO_ADDR
// end ;
34169: LD_VAR 0 1
34173: RET
// export function PrepareHorse ( ) ; begin
34174: LD_INT 0
34176: PPUSH
// uc_side := 0 ;
34177: LD_ADDR_OWVAR 20
34181: PUSH
34182: LD_INT 0
34184: ST_TO_ADDR
// uc_nation := 0 ;
34185: LD_ADDR_OWVAR 21
34189: PUSH
34190: LD_INT 0
34192: ST_TO_ADDR
// hc_class := class_horse ;
34193: LD_ADDR_OWVAR 28
34197: PUSH
34198: LD_INT 21
34200: ST_TO_ADDR
// hc_gallery :=  ;
34201: LD_ADDR_OWVAR 33
34205: PUSH
34206: LD_STRING 
34208: ST_TO_ADDR
// end ;
34209: LD_VAR 0 1
34213: RET
// export function PrepareMastodont ( ) ; begin
34214: LD_INT 0
34216: PPUSH
// uc_side := 0 ;
34217: LD_ADDR_OWVAR 20
34221: PUSH
34222: LD_INT 0
34224: ST_TO_ADDR
// uc_nation := 0 ;
34225: LD_ADDR_OWVAR 21
34229: PUSH
34230: LD_INT 0
34232: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34233: LD_ADDR_OWVAR 37
34237: PUSH
34238: LD_INT 31
34240: ST_TO_ADDR
// vc_control := control_rider ;
34241: LD_ADDR_OWVAR 38
34245: PUSH
34246: LD_INT 4
34248: ST_TO_ADDR
// end ;
34249: LD_VAR 0 1
34253: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34254: LD_INT 0
34256: PPUSH
34257: PPUSH
34258: PPUSH
// uc_side = 0 ;
34259: LD_ADDR_OWVAR 20
34263: PUSH
34264: LD_INT 0
34266: ST_TO_ADDR
// uc_nation = 0 ;
34267: LD_ADDR_OWVAR 21
34271: PUSH
34272: LD_INT 0
34274: ST_TO_ADDR
// InitHc_All ( ) ;
34275: CALL_OW 584
// InitVc ;
34279: CALL_OW 20
// if mastodonts then
34283: LD_VAR 0 6
34287: IFFALSE 34354
// for i = 1 to mastodonts do
34289: LD_ADDR_VAR 0 11
34293: PUSH
34294: DOUBLE
34295: LD_INT 1
34297: DEC
34298: ST_TO_ADDR
34299: LD_VAR 0 6
34303: PUSH
34304: FOR_TO
34305: IFFALSE 34352
// begin vc_chassis := 31 ;
34307: LD_ADDR_OWVAR 37
34311: PUSH
34312: LD_INT 31
34314: ST_TO_ADDR
// vc_control := control_rider ;
34315: LD_ADDR_OWVAR 38
34319: PUSH
34320: LD_INT 4
34322: ST_TO_ADDR
// animal := CreateVehicle ;
34323: LD_ADDR_VAR 0 12
34327: PUSH
34328: CALL_OW 45
34332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34333: LD_VAR 0 12
34337: PPUSH
34338: LD_VAR 0 8
34342: PPUSH
34343: LD_INT 0
34345: PPUSH
34346: CALL 36482 0 3
// end ;
34350: GO 34304
34352: POP
34353: POP
// if horses then
34354: LD_VAR 0 5
34358: IFFALSE 34425
// for i = 1 to horses do
34360: LD_ADDR_VAR 0 11
34364: PUSH
34365: DOUBLE
34366: LD_INT 1
34368: DEC
34369: ST_TO_ADDR
34370: LD_VAR 0 5
34374: PUSH
34375: FOR_TO
34376: IFFALSE 34423
// begin hc_class := 21 ;
34378: LD_ADDR_OWVAR 28
34382: PUSH
34383: LD_INT 21
34385: ST_TO_ADDR
// hc_gallery :=  ;
34386: LD_ADDR_OWVAR 33
34390: PUSH
34391: LD_STRING 
34393: ST_TO_ADDR
// animal := CreateHuman ;
34394: LD_ADDR_VAR 0 12
34398: PUSH
34399: CALL_OW 44
34403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34404: LD_VAR 0 12
34408: PPUSH
34409: LD_VAR 0 8
34413: PPUSH
34414: LD_INT 0
34416: PPUSH
34417: CALL 36482 0 3
// end ;
34421: GO 34375
34423: POP
34424: POP
// if birds then
34425: LD_VAR 0 1
34429: IFFALSE 34496
// for i = 1 to birds do
34431: LD_ADDR_VAR 0 11
34435: PUSH
34436: DOUBLE
34437: LD_INT 1
34439: DEC
34440: ST_TO_ADDR
34441: LD_VAR 0 1
34445: PUSH
34446: FOR_TO
34447: IFFALSE 34494
// begin hc_class = 18 ;
34449: LD_ADDR_OWVAR 28
34453: PUSH
34454: LD_INT 18
34456: ST_TO_ADDR
// hc_gallery =  ;
34457: LD_ADDR_OWVAR 33
34461: PUSH
34462: LD_STRING 
34464: ST_TO_ADDR
// animal := CreateHuman ;
34465: LD_ADDR_VAR 0 12
34469: PUSH
34470: CALL_OW 44
34474: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34475: LD_VAR 0 12
34479: PPUSH
34480: LD_VAR 0 8
34484: PPUSH
34485: LD_INT 0
34487: PPUSH
34488: CALL 36482 0 3
// end ;
34492: GO 34446
34494: POP
34495: POP
// if tigers then
34496: LD_VAR 0 2
34500: IFFALSE 34584
// for i = 1 to tigers do
34502: LD_ADDR_VAR 0 11
34506: PUSH
34507: DOUBLE
34508: LD_INT 1
34510: DEC
34511: ST_TO_ADDR
34512: LD_VAR 0 2
34516: PUSH
34517: FOR_TO
34518: IFFALSE 34582
// begin hc_class = class_tiger ;
34520: LD_ADDR_OWVAR 28
34524: PUSH
34525: LD_INT 14
34527: ST_TO_ADDR
// hc_gallery =  ;
34528: LD_ADDR_OWVAR 33
34532: PUSH
34533: LD_STRING 
34535: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34536: LD_ADDR_OWVAR 35
34540: PUSH
34541: LD_INT 7
34543: NEG
34544: PPUSH
34545: LD_INT 7
34547: PPUSH
34548: CALL_OW 12
34552: ST_TO_ADDR
// animal := CreateHuman ;
34553: LD_ADDR_VAR 0 12
34557: PUSH
34558: CALL_OW 44
34562: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34563: LD_VAR 0 12
34567: PPUSH
34568: LD_VAR 0 8
34572: PPUSH
34573: LD_INT 0
34575: PPUSH
34576: CALL 36482 0 3
// end ;
34580: GO 34517
34582: POP
34583: POP
// if apemans then
34584: LD_VAR 0 3
34588: IFFALSE 34711
// for i = 1 to apemans do
34590: LD_ADDR_VAR 0 11
34594: PUSH
34595: DOUBLE
34596: LD_INT 1
34598: DEC
34599: ST_TO_ADDR
34600: LD_VAR 0 3
34604: PUSH
34605: FOR_TO
34606: IFFALSE 34709
// begin hc_class = class_apeman ;
34608: LD_ADDR_OWVAR 28
34612: PUSH
34613: LD_INT 12
34615: ST_TO_ADDR
// hc_gallery =  ;
34616: LD_ADDR_OWVAR 33
34620: PUSH
34621: LD_STRING 
34623: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34624: LD_ADDR_OWVAR 35
34628: PUSH
34629: LD_INT 2
34631: NEG
34632: PPUSH
34633: LD_INT 2
34635: PPUSH
34636: CALL_OW 12
34640: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34641: LD_ADDR_OWVAR 31
34645: PUSH
34646: LD_INT 1
34648: PPUSH
34649: LD_INT 3
34651: PPUSH
34652: CALL_OW 12
34656: PUSH
34657: LD_INT 1
34659: PPUSH
34660: LD_INT 3
34662: PPUSH
34663: CALL_OW 12
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: ST_TO_ADDR
// animal := CreateHuman ;
34680: LD_ADDR_VAR 0 12
34684: PUSH
34685: CALL_OW 44
34689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34690: LD_VAR 0 12
34694: PPUSH
34695: LD_VAR 0 8
34699: PPUSH
34700: LD_INT 0
34702: PPUSH
34703: CALL 36482 0 3
// end ;
34707: GO 34605
34709: POP
34710: POP
// if enchidnas then
34711: LD_VAR 0 4
34715: IFFALSE 34782
// for i = 1 to enchidnas do
34717: LD_ADDR_VAR 0 11
34721: PUSH
34722: DOUBLE
34723: LD_INT 1
34725: DEC
34726: ST_TO_ADDR
34727: LD_VAR 0 4
34731: PUSH
34732: FOR_TO
34733: IFFALSE 34780
// begin hc_class = 13 ;
34735: LD_ADDR_OWVAR 28
34739: PUSH
34740: LD_INT 13
34742: ST_TO_ADDR
// hc_gallery =  ;
34743: LD_ADDR_OWVAR 33
34747: PUSH
34748: LD_STRING 
34750: ST_TO_ADDR
// animal := CreateHuman ;
34751: LD_ADDR_VAR 0 12
34755: PUSH
34756: CALL_OW 44
34760: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34761: LD_VAR 0 12
34765: PPUSH
34766: LD_VAR 0 8
34770: PPUSH
34771: LD_INT 0
34773: PPUSH
34774: CALL 36482 0 3
// end ;
34778: GO 34732
34780: POP
34781: POP
// if fishes then
34782: LD_VAR 0 7
34786: IFFALSE 34853
// for i = 1 to fishes do
34788: LD_ADDR_VAR 0 11
34792: PUSH
34793: DOUBLE
34794: LD_INT 1
34796: DEC
34797: ST_TO_ADDR
34798: LD_VAR 0 7
34802: PUSH
34803: FOR_TO
34804: IFFALSE 34851
// begin hc_class = 20 ;
34806: LD_ADDR_OWVAR 28
34810: PUSH
34811: LD_INT 20
34813: ST_TO_ADDR
// hc_gallery =  ;
34814: LD_ADDR_OWVAR 33
34818: PUSH
34819: LD_STRING 
34821: ST_TO_ADDR
// animal := CreateHuman ;
34822: LD_ADDR_VAR 0 12
34826: PUSH
34827: CALL_OW 44
34831: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
34832: LD_VAR 0 12
34836: PPUSH
34837: LD_VAR 0 9
34841: PPUSH
34842: LD_INT 0
34844: PPUSH
34845: CALL 36482 0 3
// end ;
34849: GO 34803
34851: POP
34852: POP
// end ;
34853: LD_VAR 0 10
34857: RET
// export function WantHeal ( sci , unit ) ; begin
34858: LD_INT 0
34860: PPUSH
// if GetTaskList ( sci ) > 0 then
34861: LD_VAR 0 1
34865: PPUSH
34866: CALL_OW 437
34870: PUSH
34871: LD_INT 0
34873: GREATER
34874: IFFALSE 34944
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
34876: LD_VAR 0 1
34880: PPUSH
34881: CALL_OW 437
34885: PUSH
34886: LD_INT 1
34888: ARRAY
34889: PUSH
34890: LD_INT 1
34892: ARRAY
34893: PUSH
34894: LD_STRING l
34896: EQUAL
34897: PUSH
34898: LD_VAR 0 1
34902: PPUSH
34903: CALL_OW 437
34907: PUSH
34908: LD_INT 1
34910: ARRAY
34911: PUSH
34912: LD_INT 4
34914: ARRAY
34915: PUSH
34916: LD_VAR 0 2
34920: EQUAL
34921: AND
34922: IFFALSE 34934
// result := true else
34924: LD_ADDR_VAR 0 3
34928: PUSH
34929: LD_INT 1
34931: ST_TO_ADDR
34932: GO 34942
// result := false ;
34934: LD_ADDR_VAR 0 3
34938: PUSH
34939: LD_INT 0
34941: ST_TO_ADDR
// end else
34942: GO 34952
// result := false ;
34944: LD_ADDR_VAR 0 3
34948: PUSH
34949: LD_INT 0
34951: ST_TO_ADDR
// end ;
34952: LD_VAR 0 3
34956: RET
// export function HealTarget ( sci ) ; begin
34957: LD_INT 0
34959: PPUSH
// if not sci then
34960: LD_VAR 0 1
34964: NOT
34965: IFFALSE 34969
// exit ;
34967: GO 35034
// result := 0 ;
34969: LD_ADDR_VAR 0 2
34973: PUSH
34974: LD_INT 0
34976: ST_TO_ADDR
// if GetTaskList ( sci ) then
34977: LD_VAR 0 1
34981: PPUSH
34982: CALL_OW 437
34986: IFFALSE 35034
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
34988: LD_VAR 0 1
34992: PPUSH
34993: CALL_OW 437
34997: PUSH
34998: LD_INT 1
35000: ARRAY
35001: PUSH
35002: LD_INT 1
35004: ARRAY
35005: PUSH
35006: LD_STRING l
35008: EQUAL
35009: IFFALSE 35034
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35011: LD_ADDR_VAR 0 2
35015: PUSH
35016: LD_VAR 0 1
35020: PPUSH
35021: CALL_OW 437
35025: PUSH
35026: LD_INT 1
35028: ARRAY
35029: PUSH
35030: LD_INT 4
35032: ARRAY
35033: ST_TO_ADDR
// end ;
35034: LD_VAR 0 2
35038: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35039: LD_INT 0
35041: PPUSH
35042: PPUSH
35043: PPUSH
35044: PPUSH
// if not base_units then
35045: LD_VAR 0 1
35049: NOT
35050: IFFALSE 35054
// exit ;
35052: GO 35141
// result := false ;
35054: LD_ADDR_VAR 0 2
35058: PUSH
35059: LD_INT 0
35061: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35062: LD_ADDR_VAR 0 5
35066: PUSH
35067: LD_VAR 0 1
35071: PPUSH
35072: LD_INT 21
35074: PUSH
35075: LD_INT 3
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PPUSH
35082: CALL_OW 72
35086: ST_TO_ADDR
// if not tmp then
35087: LD_VAR 0 5
35091: NOT
35092: IFFALSE 35096
// exit ;
35094: GO 35141
// for i in tmp do
35096: LD_ADDR_VAR 0 3
35100: PUSH
35101: LD_VAR 0 5
35105: PUSH
35106: FOR_IN
35107: IFFALSE 35139
// begin result := EnemyInRange ( i , 22 ) ;
35109: LD_ADDR_VAR 0 2
35113: PUSH
35114: LD_VAR 0 3
35118: PPUSH
35119: LD_INT 22
35121: PPUSH
35122: CALL 32728 0 2
35126: ST_TO_ADDR
// if result then
35127: LD_VAR 0 2
35131: IFFALSE 35137
// exit ;
35133: POP
35134: POP
35135: GO 35141
// end ;
35137: GO 35106
35139: POP
35140: POP
// end ;
35141: LD_VAR 0 2
35145: RET
// export function FilterByTag ( units , tag ) ; begin
35146: LD_INT 0
35148: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35149: LD_ADDR_VAR 0 3
35153: PUSH
35154: LD_VAR 0 1
35158: PPUSH
35159: LD_INT 120
35161: PUSH
35162: LD_VAR 0 2
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PPUSH
35171: CALL_OW 72
35175: ST_TO_ADDR
// end ;
35176: LD_VAR 0 3
35180: RET
// export function IsDriver ( un ) ; begin
35181: LD_INT 0
35183: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35184: LD_ADDR_VAR 0 2
35188: PUSH
35189: LD_VAR 0 1
35193: PUSH
35194: LD_INT 55
35196: PUSH
35197: EMPTY
35198: LIST
35199: PPUSH
35200: CALL_OW 69
35204: IN
35205: ST_TO_ADDR
// end ;
35206: LD_VAR 0 2
35210: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35211: LD_INT 0
35213: PPUSH
35214: PPUSH
// list := [ ] ;
35215: LD_ADDR_VAR 0 5
35219: PUSH
35220: EMPTY
35221: ST_TO_ADDR
// case d of 0 :
35222: LD_VAR 0 3
35226: PUSH
35227: LD_INT 0
35229: DOUBLE
35230: EQUAL
35231: IFTRUE 35235
35233: GO 35368
35235: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35236: LD_ADDR_VAR 0 5
35240: PUSH
35241: LD_VAR 0 1
35245: PUSH
35246: LD_INT 4
35248: MINUS
35249: PUSH
35250: LD_VAR 0 2
35254: PUSH
35255: LD_INT 4
35257: MINUS
35258: PUSH
35259: LD_INT 2
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: PUSH
35267: LD_VAR 0 1
35271: PUSH
35272: LD_INT 3
35274: MINUS
35275: PUSH
35276: LD_VAR 0 2
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: LIST
35288: PUSH
35289: LD_VAR 0 1
35293: PUSH
35294: LD_INT 4
35296: PLUS
35297: PUSH
35298: LD_VAR 0 2
35302: PUSH
35303: LD_INT 4
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: LIST
35310: PUSH
35311: LD_VAR 0 1
35315: PUSH
35316: LD_INT 3
35318: PLUS
35319: PUSH
35320: LD_VAR 0 2
35324: PUSH
35325: LD_INT 3
35327: PLUS
35328: PUSH
35329: LD_INT 5
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: LIST
35336: PUSH
35337: LD_VAR 0 1
35341: PUSH
35342: LD_VAR 0 2
35346: PUSH
35347: LD_INT 4
35349: PLUS
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: ST_TO_ADDR
// end ; 1 :
35366: GO 36066
35368: LD_INT 1
35370: DOUBLE
35371: EQUAL
35372: IFTRUE 35376
35374: GO 35509
35376: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35377: LD_ADDR_VAR 0 5
35381: PUSH
35382: LD_VAR 0 1
35386: PUSH
35387: LD_VAR 0 2
35391: PUSH
35392: LD_INT 4
35394: MINUS
35395: PUSH
35396: LD_INT 3
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: PUSH
35404: LD_VAR 0 1
35408: PUSH
35409: LD_INT 3
35411: MINUS
35412: PUSH
35413: LD_VAR 0 2
35417: PUSH
35418: LD_INT 3
35420: MINUS
35421: PUSH
35422: LD_INT 2
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: PUSH
35430: LD_VAR 0 1
35434: PUSH
35435: LD_INT 4
35437: MINUS
35438: PUSH
35439: LD_VAR 0 2
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: LIST
35451: PUSH
35452: LD_VAR 0 1
35456: PUSH
35457: LD_VAR 0 2
35461: PUSH
35462: LD_INT 3
35464: PLUS
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: LIST
35473: PUSH
35474: LD_VAR 0 1
35478: PUSH
35479: LD_INT 4
35481: PLUS
35482: PUSH
35483: LD_VAR 0 2
35487: PUSH
35488: LD_INT 4
35490: PLUS
35491: PUSH
35492: LD_INT 5
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: ST_TO_ADDR
// end ; 2 :
35507: GO 36066
35509: LD_INT 2
35511: DOUBLE
35512: EQUAL
35513: IFTRUE 35517
35515: GO 35646
35517: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35518: LD_ADDR_VAR 0 5
35522: PUSH
35523: LD_VAR 0 1
35527: PUSH
35528: LD_VAR 0 2
35532: PUSH
35533: LD_INT 3
35535: MINUS
35536: PUSH
35537: LD_INT 3
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: PUSH
35545: LD_VAR 0 1
35549: PUSH
35550: LD_INT 4
35552: PLUS
35553: PUSH
35554: LD_VAR 0 2
35558: PUSH
35559: LD_INT 4
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: PUSH
35567: LD_VAR 0 1
35571: PUSH
35572: LD_VAR 0 2
35576: PUSH
35577: LD_INT 4
35579: PLUS
35580: PUSH
35581: LD_INT 0
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: PUSH
35589: LD_VAR 0 1
35593: PUSH
35594: LD_INT 3
35596: MINUS
35597: PUSH
35598: LD_VAR 0 2
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: LIST
35610: PUSH
35611: LD_VAR 0 1
35615: PUSH
35616: LD_INT 4
35618: MINUS
35619: PUSH
35620: LD_VAR 0 2
35624: PUSH
35625: LD_INT 4
35627: MINUS
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: ST_TO_ADDR
// end ; 3 :
35644: GO 36066
35646: LD_INT 3
35648: DOUBLE
35649: EQUAL
35650: IFTRUE 35654
35652: GO 35787
35654: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35655: LD_ADDR_VAR 0 5
35659: PUSH
35660: LD_VAR 0 1
35664: PUSH
35665: LD_INT 3
35667: PLUS
35668: PUSH
35669: LD_VAR 0 2
35673: PUSH
35674: LD_INT 4
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: PUSH
35682: LD_VAR 0 1
35686: PUSH
35687: LD_INT 4
35689: PLUS
35690: PUSH
35691: LD_VAR 0 2
35695: PUSH
35696: LD_INT 4
35698: PLUS
35699: PUSH
35700: LD_INT 5
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: LIST
35707: PUSH
35708: LD_VAR 0 1
35712: PUSH
35713: LD_INT 4
35715: MINUS
35716: PUSH
35717: LD_VAR 0 2
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: PUSH
35730: LD_VAR 0 1
35734: PUSH
35735: LD_VAR 0 2
35739: PUSH
35740: LD_INT 4
35742: MINUS
35743: PUSH
35744: LD_INT 3
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: PUSH
35752: LD_VAR 0 1
35756: PUSH
35757: LD_INT 3
35759: MINUS
35760: PUSH
35761: LD_VAR 0 2
35765: PUSH
35766: LD_INT 3
35768: MINUS
35769: PUSH
35770: LD_INT 2
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: LIST
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: ST_TO_ADDR
// end ; 4 :
35785: GO 36066
35787: LD_INT 4
35789: DOUBLE
35790: EQUAL
35791: IFTRUE 35795
35793: GO 35928
35795: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35796: LD_ADDR_VAR 0 5
35800: PUSH
35801: LD_VAR 0 1
35805: PUSH
35806: LD_VAR 0 2
35810: PUSH
35811: LD_INT 4
35813: PLUS
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: PUSH
35823: LD_VAR 0 1
35827: PUSH
35828: LD_INT 3
35830: PLUS
35831: PUSH
35832: LD_VAR 0 2
35836: PUSH
35837: LD_INT 3
35839: PLUS
35840: PUSH
35841: LD_INT 5
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: LIST
35848: PUSH
35849: LD_VAR 0 1
35853: PUSH
35854: LD_INT 4
35856: PLUS
35857: PUSH
35858: LD_VAR 0 2
35862: PUSH
35863: LD_INT 4
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: PUSH
35871: LD_VAR 0 1
35875: PUSH
35876: LD_VAR 0 2
35880: PUSH
35881: LD_INT 3
35883: MINUS
35884: PUSH
35885: LD_INT 3
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: LIST
35892: PUSH
35893: LD_VAR 0 1
35897: PUSH
35898: LD_INT 4
35900: MINUS
35901: PUSH
35902: LD_VAR 0 2
35906: PUSH
35907: LD_INT 4
35909: MINUS
35910: PUSH
35911: LD_INT 2
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: ST_TO_ADDR
// end ; 5 :
35926: GO 36066
35928: LD_INT 5
35930: DOUBLE
35931: EQUAL
35932: IFTRUE 35936
35934: GO 36065
35936: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
35937: LD_ADDR_VAR 0 5
35941: PUSH
35942: LD_VAR 0 1
35946: PUSH
35947: LD_INT 4
35949: MINUS
35950: PUSH
35951: LD_VAR 0 2
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: PUSH
35964: LD_VAR 0 1
35968: PUSH
35969: LD_VAR 0 2
35973: PUSH
35974: LD_INT 4
35976: MINUS
35977: PUSH
35978: LD_INT 3
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: LIST
35985: PUSH
35986: LD_VAR 0 1
35990: PUSH
35991: LD_INT 4
35993: PLUS
35994: PUSH
35995: LD_VAR 0 2
35999: PUSH
36000: LD_INT 4
36002: PLUS
36003: PUSH
36004: LD_INT 5
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: PUSH
36012: LD_VAR 0 1
36016: PUSH
36017: LD_INT 3
36019: PLUS
36020: PUSH
36021: LD_VAR 0 2
36025: PUSH
36026: LD_INT 4
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: PUSH
36034: LD_VAR 0 1
36038: PUSH
36039: LD_VAR 0 2
36043: PUSH
36044: LD_INT 3
36046: PLUS
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: ST_TO_ADDR
// end ; end ;
36063: GO 36066
36065: POP
// result := list ;
36066: LD_ADDR_VAR 0 4
36070: PUSH
36071: LD_VAR 0 5
36075: ST_TO_ADDR
// end ;
36076: LD_VAR 0 4
36080: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36081: LD_INT 0
36083: PPUSH
36084: PPUSH
36085: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36086: LD_VAR 0 1
36090: NOT
36091: PUSH
36092: LD_VAR 0 2
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: LD_INT 2
36102: PUSH
36103: LD_INT 3
36105: PUSH
36106: LD_INT 4
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: IN
36115: NOT
36116: OR
36117: IFFALSE 36121
// exit ;
36119: GO 36204
// tmp := [ ] ;
36121: LD_ADDR_VAR 0 5
36125: PUSH
36126: EMPTY
36127: ST_TO_ADDR
// for i in units do
36128: LD_ADDR_VAR 0 4
36132: PUSH
36133: LD_VAR 0 1
36137: PUSH
36138: FOR_IN
36139: IFFALSE 36173
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36141: LD_ADDR_VAR 0 5
36145: PUSH
36146: LD_VAR 0 5
36150: PPUSH
36151: LD_VAR 0 4
36155: PPUSH
36156: LD_VAR 0 2
36160: PPUSH
36161: CALL_OW 259
36165: PPUSH
36166: CALL 37564 0 2
36170: ST_TO_ADDR
36171: GO 36138
36173: POP
36174: POP
// if not tmp then
36175: LD_VAR 0 5
36179: NOT
36180: IFFALSE 36184
// exit ;
36182: GO 36204
// result := SortListByListDesc ( units , tmp ) ;
36184: LD_ADDR_VAR 0 3
36188: PUSH
36189: LD_VAR 0 1
36193: PPUSH
36194: LD_VAR 0 5
36198: PPUSH
36199: CALL_OW 77
36203: ST_TO_ADDR
// end ;
36204: LD_VAR 0 3
36208: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36209: LD_INT 0
36211: PPUSH
36212: PPUSH
36213: PPUSH
// result := false ;
36214: LD_ADDR_VAR 0 3
36218: PUSH
36219: LD_INT 0
36221: ST_TO_ADDR
// if not building then
36222: LD_VAR 0 2
36226: NOT
36227: IFFALSE 36231
// exit ;
36229: GO 36369
// x := GetX ( building ) ;
36231: LD_ADDR_VAR 0 4
36235: PUSH
36236: LD_VAR 0 2
36240: PPUSH
36241: CALL_OW 250
36245: ST_TO_ADDR
// y := GetY ( building ) ;
36246: LD_ADDR_VAR 0 5
36250: PUSH
36251: LD_VAR 0 2
36255: PPUSH
36256: CALL_OW 251
36260: ST_TO_ADDR
// if not x or not y then
36261: LD_VAR 0 4
36265: NOT
36266: PUSH
36267: LD_VAR 0 5
36271: NOT
36272: OR
36273: IFFALSE 36277
// exit ;
36275: GO 36369
// if GetTaskList ( unit ) then
36277: LD_VAR 0 1
36281: PPUSH
36282: CALL_OW 437
36286: IFFALSE 36369
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36288: LD_STRING e
36290: PUSH
36291: LD_VAR 0 1
36295: PPUSH
36296: CALL_OW 437
36300: PUSH
36301: LD_INT 1
36303: ARRAY
36304: PUSH
36305: LD_INT 1
36307: ARRAY
36308: EQUAL
36309: PUSH
36310: LD_VAR 0 4
36314: PUSH
36315: LD_VAR 0 1
36319: PPUSH
36320: CALL_OW 437
36324: PUSH
36325: LD_INT 1
36327: ARRAY
36328: PUSH
36329: LD_INT 2
36331: ARRAY
36332: EQUAL
36333: AND
36334: PUSH
36335: LD_VAR 0 5
36339: PUSH
36340: LD_VAR 0 1
36344: PPUSH
36345: CALL_OW 437
36349: PUSH
36350: LD_INT 1
36352: ARRAY
36353: PUSH
36354: LD_INT 3
36356: ARRAY
36357: EQUAL
36358: AND
36359: IFFALSE 36369
// result := true end ;
36361: LD_ADDR_VAR 0 3
36365: PUSH
36366: LD_INT 1
36368: ST_TO_ADDR
// end ;
36369: LD_VAR 0 3
36373: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36374: LD_INT 0
36376: PPUSH
// result := false ;
36377: LD_ADDR_VAR 0 4
36381: PUSH
36382: LD_INT 0
36384: ST_TO_ADDR
// if GetTaskList ( unit ) then
36385: LD_VAR 0 1
36389: PPUSH
36390: CALL_OW 437
36394: IFFALSE 36477
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36396: LD_STRING M
36398: PUSH
36399: LD_VAR 0 1
36403: PPUSH
36404: CALL_OW 437
36408: PUSH
36409: LD_INT 1
36411: ARRAY
36412: PUSH
36413: LD_INT 1
36415: ARRAY
36416: EQUAL
36417: PUSH
36418: LD_VAR 0 2
36422: PUSH
36423: LD_VAR 0 1
36427: PPUSH
36428: CALL_OW 437
36432: PUSH
36433: LD_INT 1
36435: ARRAY
36436: PUSH
36437: LD_INT 2
36439: ARRAY
36440: EQUAL
36441: AND
36442: PUSH
36443: LD_VAR 0 3
36447: PUSH
36448: LD_VAR 0 1
36452: PPUSH
36453: CALL_OW 437
36457: PUSH
36458: LD_INT 1
36460: ARRAY
36461: PUSH
36462: LD_INT 3
36464: ARRAY
36465: EQUAL
36466: AND
36467: IFFALSE 36477
// result := true ;
36469: LD_ADDR_VAR 0 4
36473: PUSH
36474: LD_INT 1
36476: ST_TO_ADDR
// end ; end ;
36477: LD_VAR 0 4
36481: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36482: LD_INT 0
36484: PPUSH
36485: PPUSH
36486: PPUSH
36487: PPUSH
// if not unit or not area then
36488: LD_VAR 0 1
36492: NOT
36493: PUSH
36494: LD_VAR 0 2
36498: NOT
36499: OR
36500: IFFALSE 36504
// exit ;
36502: GO 36667
// tmp := AreaToList ( area , i ) ;
36504: LD_ADDR_VAR 0 6
36508: PUSH
36509: LD_VAR 0 2
36513: PPUSH
36514: LD_VAR 0 5
36518: PPUSH
36519: CALL_OW 517
36523: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36524: LD_ADDR_VAR 0 5
36528: PUSH
36529: DOUBLE
36530: LD_INT 1
36532: DEC
36533: ST_TO_ADDR
36534: LD_VAR 0 6
36538: PUSH
36539: LD_INT 1
36541: ARRAY
36542: PUSH
36543: FOR_TO
36544: IFFALSE 36665
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36546: LD_ADDR_VAR 0 7
36550: PUSH
36551: LD_VAR 0 6
36555: PUSH
36556: LD_INT 1
36558: ARRAY
36559: PUSH
36560: LD_VAR 0 5
36564: ARRAY
36565: PUSH
36566: LD_VAR 0 6
36570: PUSH
36571: LD_INT 2
36573: ARRAY
36574: PUSH
36575: LD_VAR 0 5
36579: ARRAY
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
36585: LD_INT 92
36587: PUSH
36588: LD_VAR 0 7
36592: PUSH
36593: LD_INT 1
36595: ARRAY
36596: PUSH
36597: LD_VAR 0 7
36601: PUSH
36602: LD_INT 2
36604: ARRAY
36605: PUSH
36606: LD_INT 3
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: PPUSH
36615: CALL_OW 69
36619: PUSH
36620: LD_INT 0
36622: EQUAL
36623: IFFALSE 36663
// begin PlaceUnitArea ( unit , area , mode ) ;
36625: LD_VAR 0 1
36629: PPUSH
36630: LD_VAR 0 2
36634: PPUSH
36635: LD_VAR 0 3
36639: PPUSH
36640: CALL_OW 49
// result := IsPlaced ( unit ) ;
36644: LD_ADDR_VAR 0 4
36648: PUSH
36649: LD_VAR 0 1
36653: PPUSH
36654: CALL_OW 305
36658: ST_TO_ADDR
// exit ;
36659: POP
36660: POP
36661: GO 36667
// end ; end ;
36663: GO 36543
36665: POP
36666: POP
// end ;
36667: LD_VAR 0 4
36671: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36672: LD_INT 0
36674: PPUSH
36675: PPUSH
36676: PPUSH
// if not side or side > 8 then
36677: LD_VAR 0 1
36681: NOT
36682: PUSH
36683: LD_VAR 0 1
36687: PUSH
36688: LD_INT 8
36690: GREATER
36691: OR
36692: IFFALSE 36696
// exit ;
36694: GO 36883
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36696: LD_ADDR_VAR 0 4
36700: PUSH
36701: LD_INT 22
36703: PUSH
36704: LD_VAR 0 1
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 21
36715: PUSH
36716: LD_INT 3
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PPUSH
36727: CALL_OW 69
36731: ST_TO_ADDR
// if not tmp then
36732: LD_VAR 0 4
36736: NOT
36737: IFFALSE 36741
// exit ;
36739: GO 36883
// enable_addtolog := true ;
36741: LD_ADDR_OWVAR 81
36745: PUSH
36746: LD_INT 1
36748: ST_TO_ADDR
// AddToLog ( [ ) ;
36749: LD_STRING [
36751: PPUSH
36752: CALL_OW 561
// for i in tmp do
36756: LD_ADDR_VAR 0 3
36760: PUSH
36761: LD_VAR 0 4
36765: PUSH
36766: FOR_IN
36767: IFFALSE 36874
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36769: LD_STRING [
36771: PUSH
36772: LD_VAR 0 3
36776: PPUSH
36777: CALL_OW 266
36781: STR
36782: PUSH
36783: LD_STRING , 
36785: STR
36786: PUSH
36787: LD_VAR 0 3
36791: PPUSH
36792: CALL_OW 250
36796: STR
36797: PUSH
36798: LD_STRING , 
36800: STR
36801: PUSH
36802: LD_VAR 0 3
36806: PPUSH
36807: CALL_OW 251
36811: STR
36812: PUSH
36813: LD_STRING , 
36815: STR
36816: PUSH
36817: LD_VAR 0 3
36821: PPUSH
36822: CALL_OW 254
36826: STR
36827: PUSH
36828: LD_STRING , 
36830: STR
36831: PUSH
36832: LD_VAR 0 3
36836: PPUSH
36837: LD_INT 1
36839: PPUSH
36840: CALL_OW 268
36844: STR
36845: PUSH
36846: LD_STRING , 
36848: STR
36849: PUSH
36850: LD_VAR 0 3
36854: PPUSH
36855: LD_INT 2
36857: PPUSH
36858: CALL_OW 268
36862: STR
36863: PUSH
36864: LD_STRING ],
36866: STR
36867: PPUSH
36868: CALL_OW 561
// end ;
36872: GO 36766
36874: POP
36875: POP
// AddToLog ( ]; ) ;
36876: LD_STRING ];
36878: PPUSH
36879: CALL_OW 561
// end ;
36883: LD_VAR 0 2
36887: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
36888: LD_INT 0
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
36894: PPUSH
// if not area or not rate or not max then
36895: LD_VAR 0 1
36899: NOT
36900: PUSH
36901: LD_VAR 0 2
36905: NOT
36906: OR
36907: PUSH
36908: LD_VAR 0 4
36912: NOT
36913: OR
36914: IFFALSE 36918
// exit ;
36916: GO 37107
// while 1 do
36918: LD_INT 1
36920: IFFALSE 37107
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
36922: LD_ADDR_VAR 0 9
36926: PUSH
36927: LD_VAR 0 1
36931: PPUSH
36932: LD_INT 1
36934: PPUSH
36935: CALL_OW 287
36939: PUSH
36940: LD_INT 10
36942: MUL
36943: ST_TO_ADDR
// r := rate / 10 ;
36944: LD_ADDR_VAR 0 7
36948: PUSH
36949: LD_VAR 0 2
36953: PUSH
36954: LD_INT 10
36956: DIVREAL
36957: ST_TO_ADDR
// time := 1 1$00 ;
36958: LD_ADDR_VAR 0 8
36962: PUSH
36963: LD_INT 2100
36965: ST_TO_ADDR
// if amount < min then
36966: LD_VAR 0 9
36970: PUSH
36971: LD_VAR 0 3
36975: LESS
36976: IFFALSE 36994
// r := r * 2 else
36978: LD_ADDR_VAR 0 7
36982: PUSH
36983: LD_VAR 0 7
36987: PUSH
36988: LD_INT 2
36990: MUL
36991: ST_TO_ADDR
36992: GO 37020
// if amount > max then
36994: LD_VAR 0 9
36998: PUSH
36999: LD_VAR 0 4
37003: GREATER
37004: IFFALSE 37020
// r := r / 2 ;
37006: LD_ADDR_VAR 0 7
37010: PUSH
37011: LD_VAR 0 7
37015: PUSH
37016: LD_INT 2
37018: DIVREAL
37019: ST_TO_ADDR
// time := time / r ;
37020: LD_ADDR_VAR 0 8
37024: PUSH
37025: LD_VAR 0 8
37029: PUSH
37030: LD_VAR 0 7
37034: DIVREAL
37035: ST_TO_ADDR
// if time < 0 then
37036: LD_VAR 0 8
37040: PUSH
37041: LD_INT 0
37043: LESS
37044: IFFALSE 37061
// time := time * - 1 ;
37046: LD_ADDR_VAR 0 8
37050: PUSH
37051: LD_VAR 0 8
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: MUL
37060: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37061: LD_VAR 0 8
37065: PUSH
37066: LD_INT 35
37068: PPUSH
37069: LD_INT 875
37071: PPUSH
37072: CALL_OW 12
37076: PLUS
37077: PPUSH
37078: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37082: LD_INT 1
37084: PPUSH
37085: LD_INT 5
37087: PPUSH
37088: CALL_OW 12
37092: PPUSH
37093: LD_VAR 0 1
37097: PPUSH
37098: LD_INT 1
37100: PPUSH
37101: CALL_OW 55
// end ;
37105: GO 36918
// end ;
37107: LD_VAR 0 5
37111: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37112: LD_INT 0
37114: PPUSH
37115: PPUSH
37116: PPUSH
37117: PPUSH
37118: PPUSH
37119: PPUSH
37120: PPUSH
37121: PPUSH
// if not turrets or not factories then
37122: LD_VAR 0 1
37126: NOT
37127: PUSH
37128: LD_VAR 0 2
37132: NOT
37133: OR
37134: IFFALSE 37138
// exit ;
37136: GO 37445
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37138: LD_ADDR_VAR 0 10
37142: PUSH
37143: LD_INT 5
37145: PUSH
37146: LD_INT 6
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 2
37155: PUSH
37156: LD_INT 4
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 3
37165: PUSH
37166: LD_INT 5
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 24
37180: PUSH
37181: LD_INT 25
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 23
37190: PUSH
37191: LD_INT 27
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 42
37204: PUSH
37205: LD_INT 43
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 44
37214: PUSH
37215: LD_INT 46
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 45
37224: PUSH
37225: LD_INT 47
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: ST_TO_ADDR
// result := [ ] ;
37242: LD_ADDR_VAR 0 3
37246: PUSH
37247: EMPTY
37248: ST_TO_ADDR
// for i in turrets do
37249: LD_ADDR_VAR 0 4
37253: PUSH
37254: LD_VAR 0 1
37258: PUSH
37259: FOR_IN
37260: IFFALSE 37443
// begin nat := GetNation ( i ) ;
37262: LD_ADDR_VAR 0 7
37266: PUSH
37267: LD_VAR 0 4
37271: PPUSH
37272: CALL_OW 248
37276: ST_TO_ADDR
// weapon := 0 ;
37277: LD_ADDR_VAR 0 8
37281: PUSH
37282: LD_INT 0
37284: ST_TO_ADDR
// if not nat then
37285: LD_VAR 0 7
37289: NOT
37290: IFFALSE 37294
// continue ;
37292: GO 37259
// for j in list [ nat ] do
37294: LD_ADDR_VAR 0 5
37298: PUSH
37299: LD_VAR 0 10
37303: PUSH
37304: LD_VAR 0 7
37308: ARRAY
37309: PUSH
37310: FOR_IN
37311: IFFALSE 37352
// if GetBWeapon ( i ) = j [ 1 ] then
37313: LD_VAR 0 4
37317: PPUSH
37318: CALL_OW 269
37322: PUSH
37323: LD_VAR 0 5
37327: PUSH
37328: LD_INT 1
37330: ARRAY
37331: EQUAL
37332: IFFALSE 37350
// begin weapon := j [ 2 ] ;
37334: LD_ADDR_VAR 0 8
37338: PUSH
37339: LD_VAR 0 5
37343: PUSH
37344: LD_INT 2
37346: ARRAY
37347: ST_TO_ADDR
// break ;
37348: GO 37352
// end ;
37350: GO 37310
37352: POP
37353: POP
// if not weapon then
37354: LD_VAR 0 8
37358: NOT
37359: IFFALSE 37363
// continue ;
37361: GO 37259
// for k in factories do
37363: LD_ADDR_VAR 0 6
37367: PUSH
37368: LD_VAR 0 2
37372: PUSH
37373: FOR_IN
37374: IFFALSE 37439
// begin weapons := AvailableWeaponList ( k ) ;
37376: LD_ADDR_VAR 0 9
37380: PUSH
37381: LD_VAR 0 6
37385: PPUSH
37386: CALL_OW 478
37390: ST_TO_ADDR
// if not weapons then
37391: LD_VAR 0 9
37395: NOT
37396: IFFALSE 37400
// continue ;
37398: GO 37373
// if weapon in weapons then
37400: LD_VAR 0 8
37404: PUSH
37405: LD_VAR 0 9
37409: IN
37410: IFFALSE 37437
// begin result := [ i , weapon ] ;
37412: LD_ADDR_VAR 0 3
37416: PUSH
37417: LD_VAR 0 4
37421: PUSH
37422: LD_VAR 0 8
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: ST_TO_ADDR
// exit ;
37431: POP
37432: POP
37433: POP
37434: POP
37435: GO 37445
// end ; end ;
37437: GO 37373
37439: POP
37440: POP
// end ;
37441: GO 37259
37443: POP
37444: POP
// end ;
37445: LD_VAR 0 3
37449: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37450: LD_INT 0
37452: PPUSH
// if not side or side > 8 then
37453: LD_VAR 0 3
37457: NOT
37458: PUSH
37459: LD_VAR 0 3
37463: PUSH
37464: LD_INT 8
37466: GREATER
37467: OR
37468: IFFALSE 37472
// exit ;
37470: GO 37531
// if not range then
37472: LD_VAR 0 4
37476: NOT
37477: IFFALSE 37488
// range := - 12 ;
37479: LD_ADDR_VAR 0 4
37483: PUSH
37484: LD_INT 12
37486: NEG
37487: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37488: LD_VAR 0 1
37492: PPUSH
37493: LD_VAR 0 2
37497: PPUSH
37498: LD_VAR 0 3
37502: PPUSH
37503: LD_VAR 0 4
37507: PPUSH
37508: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37512: LD_VAR 0 1
37516: PPUSH
37517: LD_VAR 0 2
37521: PPUSH
37522: LD_VAR 0 3
37526: PPUSH
37527: CALL_OW 331
// end ;
37531: LD_VAR 0 5
37535: RET
// export function Video ( mode ) ; begin
37536: LD_INT 0
37538: PPUSH
// ingame_video = mode ;
37539: LD_ADDR_OWVAR 52
37543: PUSH
37544: LD_VAR 0 1
37548: ST_TO_ADDR
// interface_hidden = mode ;
37549: LD_ADDR_OWVAR 54
37553: PUSH
37554: LD_VAR 0 1
37558: ST_TO_ADDR
// end ;
37559: LD_VAR 0 2
37563: RET
// export function Join ( array , element ) ; begin
37564: LD_INT 0
37566: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37567: LD_ADDR_VAR 0 3
37571: PUSH
37572: LD_VAR 0 1
37576: PPUSH
37577: LD_VAR 0 1
37581: PUSH
37582: LD_INT 1
37584: PLUS
37585: PPUSH
37586: LD_VAR 0 2
37590: PPUSH
37591: CALL_OW 1
37595: ST_TO_ADDR
// end ;
37596: LD_VAR 0 3
37600: RET
// export function JoinUnion ( array , element ) ; begin
37601: LD_INT 0
37603: PPUSH
// result := array union element ;
37604: LD_ADDR_VAR 0 3
37608: PUSH
37609: LD_VAR 0 1
37613: PUSH
37614: LD_VAR 0 2
37618: UNION
37619: ST_TO_ADDR
// end ;
37620: LD_VAR 0 3
37624: RET
// export function GetBehemoths ( side ) ; begin
37625: LD_INT 0
37627: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
37628: LD_ADDR_VAR 0 2
37632: PUSH
37633: LD_INT 22
37635: PUSH
37636: LD_VAR 0 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 31
37647: PUSH
37648: LD_INT 25
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PPUSH
37659: CALL_OW 69
37663: ST_TO_ADDR
// end ;
37664: LD_VAR 0 2
37668: RET
// export function Shuffle ( array ) ; var i , index ; begin
37669: LD_INT 0
37671: PPUSH
37672: PPUSH
37673: PPUSH
// result := [ ] ;
37674: LD_ADDR_VAR 0 2
37678: PUSH
37679: EMPTY
37680: ST_TO_ADDR
// if not array then
37681: LD_VAR 0 1
37685: NOT
37686: IFFALSE 37690
// exit ;
37688: GO 37789
// Randomize ;
37690: CALL_OW 10
// for i = array downto 1 do
37694: LD_ADDR_VAR 0 3
37698: PUSH
37699: DOUBLE
37700: LD_VAR 0 1
37704: INC
37705: ST_TO_ADDR
37706: LD_INT 1
37708: PUSH
37709: FOR_DOWNTO
37710: IFFALSE 37787
// begin index := rand ( 1 , array ) ;
37712: LD_ADDR_VAR 0 4
37716: PUSH
37717: LD_INT 1
37719: PPUSH
37720: LD_VAR 0 1
37724: PPUSH
37725: CALL_OW 12
37729: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37730: LD_ADDR_VAR 0 2
37734: PUSH
37735: LD_VAR 0 2
37739: PPUSH
37740: LD_VAR 0 2
37744: PUSH
37745: LD_INT 1
37747: PLUS
37748: PPUSH
37749: LD_VAR 0 1
37753: PUSH
37754: LD_VAR 0 4
37758: ARRAY
37759: PPUSH
37760: CALL_OW 2
37764: ST_TO_ADDR
// array := Delete ( array , index ) ;
37765: LD_ADDR_VAR 0 1
37769: PUSH
37770: LD_VAR 0 1
37774: PPUSH
37775: LD_VAR 0 4
37779: PPUSH
37780: CALL_OW 3
37784: ST_TO_ADDR
// end ;
37785: GO 37709
37787: POP
37788: POP
// end ;
37789: LD_VAR 0 2
37793: RET
// export function GetBaseMaterials ( base ) ; begin
37794: LD_INT 0
37796: PPUSH
// result := [ 0 , 0 , 0 ] ;
37797: LD_ADDR_VAR 0 2
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: ST_TO_ADDR
// if not base then
37816: LD_VAR 0 1
37820: NOT
37821: IFFALSE 37825
// exit ;
37823: GO 37874
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37825: LD_ADDR_VAR 0 2
37829: PUSH
37830: LD_VAR 0 1
37834: PPUSH
37835: LD_INT 1
37837: PPUSH
37838: CALL_OW 275
37842: PUSH
37843: LD_VAR 0 1
37847: PPUSH
37848: LD_INT 2
37850: PPUSH
37851: CALL_OW 275
37855: PUSH
37856: LD_VAR 0 1
37860: PPUSH
37861: LD_INT 3
37863: PPUSH
37864: CALL_OW 275
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: LIST
37873: ST_TO_ADDR
// end ;
37874: LD_VAR 0 2
37878: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
37879: LD_INT 0
37881: PPUSH
37882: PPUSH
// result := array ;
37883: LD_ADDR_VAR 0 3
37887: PUSH
37888: LD_VAR 0 1
37892: ST_TO_ADDR
// if size >= result then
37893: LD_VAR 0 2
37897: PUSH
37898: LD_VAR 0 3
37902: GREATEREQUAL
37903: IFFALSE 37907
// exit ;
37905: GO 37957
// if size then
37907: LD_VAR 0 2
37911: IFFALSE 37957
// for i := array downto size do
37913: LD_ADDR_VAR 0 4
37917: PUSH
37918: DOUBLE
37919: LD_VAR 0 1
37923: INC
37924: ST_TO_ADDR
37925: LD_VAR 0 2
37929: PUSH
37930: FOR_DOWNTO
37931: IFFALSE 37955
// result := Delete ( result , result ) ;
37933: LD_ADDR_VAR 0 3
37937: PUSH
37938: LD_VAR 0 3
37942: PPUSH
37943: LD_VAR 0 3
37947: PPUSH
37948: CALL_OW 3
37952: ST_TO_ADDR
37953: GO 37930
37955: POP
37956: POP
// end ;
37957: LD_VAR 0 3
37961: RET
// export function ComExit ( unit ) ; var tmp ; begin
37962: LD_INT 0
37964: PPUSH
37965: PPUSH
// if not IsInUnit ( unit ) then
37966: LD_VAR 0 1
37970: PPUSH
37971: CALL_OW 310
37975: NOT
37976: IFFALSE 37980
// exit ;
37978: GO 38040
// tmp := IsInUnit ( unit ) ;
37980: LD_ADDR_VAR 0 3
37984: PUSH
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 310
37994: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
37995: LD_VAR 0 3
37999: PPUSH
38000: CALL_OW 247
38004: PUSH
38005: LD_INT 2
38007: EQUAL
38008: IFFALSE 38021
// ComExitVehicle ( unit ) else
38010: LD_VAR 0 1
38014: PPUSH
38015: CALL_OW 121
38019: GO 38030
// ComExitBuilding ( unit ) ;
38021: LD_VAR 0 1
38025: PPUSH
38026: CALL_OW 122
// result := tmp ;
38030: LD_ADDR_VAR 0 2
38034: PUSH
38035: LD_VAR 0 3
38039: ST_TO_ADDR
// end ;
38040: LD_VAR 0 2
38044: RET
// export function ComExitAll ( units ) ; var i ; begin
38045: LD_INT 0
38047: PPUSH
38048: PPUSH
// if not units then
38049: LD_VAR 0 1
38053: NOT
38054: IFFALSE 38058
// exit ;
38056: GO 38084
// for i in units do
38058: LD_ADDR_VAR 0 3
38062: PUSH
38063: LD_VAR 0 1
38067: PUSH
38068: FOR_IN
38069: IFFALSE 38082
// ComExit ( i ) ;
38071: LD_VAR 0 3
38075: PPUSH
38076: CALL 37962 0 1
38080: GO 38068
38082: POP
38083: POP
// end ;
38084: LD_VAR 0 2
38088: RET
// export function ResetHc ; begin
38089: LD_INT 0
38091: PPUSH
// InitHc ;
38092: CALL_OW 19
// hc_importance := 0 ;
38096: LD_ADDR_OWVAR 32
38100: PUSH
38101: LD_INT 0
38103: ST_TO_ADDR
// end ;
38104: LD_VAR 0 1
38108: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38109: LD_INT 0
38111: PPUSH
38112: PPUSH
38113: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38114: LD_ADDR_VAR 0 6
38118: PUSH
38119: LD_VAR 0 1
38123: PUSH
38124: LD_VAR 0 3
38128: PLUS
38129: PUSH
38130: LD_INT 2
38132: DIV
38133: ST_TO_ADDR
// if _x < 0 then
38134: LD_VAR 0 6
38138: PUSH
38139: LD_INT 0
38141: LESS
38142: IFFALSE 38159
// _x := _x * - 1 ;
38144: LD_ADDR_VAR 0 6
38148: PUSH
38149: LD_VAR 0 6
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: MUL
38158: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38159: LD_ADDR_VAR 0 7
38163: PUSH
38164: LD_VAR 0 2
38168: PUSH
38169: LD_VAR 0 4
38173: PLUS
38174: PUSH
38175: LD_INT 2
38177: DIV
38178: ST_TO_ADDR
// if _y < 0 then
38179: LD_VAR 0 7
38183: PUSH
38184: LD_INT 0
38186: LESS
38187: IFFALSE 38204
// _y := _y * - 1 ;
38189: LD_ADDR_VAR 0 7
38193: PUSH
38194: LD_VAR 0 7
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: MUL
38203: ST_TO_ADDR
// result := [ _x , _y ] ;
38204: LD_ADDR_VAR 0 5
38208: PUSH
38209: LD_VAR 0 6
38213: PUSH
38214: LD_VAR 0 7
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: ST_TO_ADDR
// end ;
38223: LD_VAR 0 5
38227: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38228: LD_INT 0
38230: PPUSH
38231: PPUSH
38232: PPUSH
38233: PPUSH
// task := GetTaskList ( unit ) ;
38234: LD_ADDR_VAR 0 7
38238: PUSH
38239: LD_VAR 0 1
38243: PPUSH
38244: CALL_OW 437
38248: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38249: LD_VAR 0 7
38253: NOT
38254: PUSH
38255: LD_VAR 0 1
38259: PPUSH
38260: LD_VAR 0 2
38264: PPUSH
38265: CALL_OW 308
38269: NOT
38270: AND
38271: IFFALSE 38275
// exit ;
38273: GO 38393
// if IsInArea ( unit , area ) then
38275: LD_VAR 0 1
38279: PPUSH
38280: LD_VAR 0 2
38284: PPUSH
38285: CALL_OW 308
38289: IFFALSE 38307
// begin ComMoveToArea ( unit , goAway ) ;
38291: LD_VAR 0 1
38295: PPUSH
38296: LD_VAR 0 3
38300: PPUSH
38301: CALL_OW 113
// exit ;
38305: GO 38393
// end ; if task [ 1 ] [ 1 ] <> M then
38307: LD_VAR 0 7
38311: PUSH
38312: LD_INT 1
38314: ARRAY
38315: PUSH
38316: LD_INT 1
38318: ARRAY
38319: PUSH
38320: LD_STRING M
38322: NONEQUAL
38323: IFFALSE 38327
// exit ;
38325: GO 38393
// x := task [ 1 ] [ 2 ] ;
38327: LD_ADDR_VAR 0 5
38331: PUSH
38332: LD_VAR 0 7
38336: PUSH
38337: LD_INT 1
38339: ARRAY
38340: PUSH
38341: LD_INT 2
38343: ARRAY
38344: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38345: LD_ADDR_VAR 0 6
38349: PUSH
38350: LD_VAR 0 7
38354: PUSH
38355: LD_INT 1
38357: ARRAY
38358: PUSH
38359: LD_INT 3
38361: ARRAY
38362: ST_TO_ADDR
// if InArea ( x , y , area ) then
38363: LD_VAR 0 5
38367: PPUSH
38368: LD_VAR 0 6
38372: PPUSH
38373: LD_VAR 0 2
38377: PPUSH
38378: CALL_OW 309
38382: IFFALSE 38393
// ComStop ( unit ) ;
38384: LD_VAR 0 1
38388: PPUSH
38389: CALL_OW 141
// end ;
38393: LD_VAR 0 4
38397: RET
// export function Abs ( value ) ; begin
38398: LD_INT 0
38400: PPUSH
// result := value ;
38401: LD_ADDR_VAR 0 2
38405: PUSH
38406: LD_VAR 0 1
38410: ST_TO_ADDR
// if value < 0 then
38411: LD_VAR 0 1
38415: PUSH
38416: LD_INT 0
38418: LESS
38419: IFFALSE 38436
// result := value * - 1 ;
38421: LD_ADDR_VAR 0 2
38425: PUSH
38426: LD_VAR 0 1
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: MUL
38435: ST_TO_ADDR
// end ;
38436: LD_VAR 0 2
38440: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38441: LD_INT 0
38443: PPUSH
38444: PPUSH
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
// if not unit or not building then
38451: LD_VAR 0 1
38455: NOT
38456: PUSH
38457: LD_VAR 0 2
38461: NOT
38462: OR
38463: IFFALSE 38467
// exit ;
38465: GO 38693
// x := GetX ( building ) ;
38467: LD_ADDR_VAR 0 4
38471: PUSH
38472: LD_VAR 0 2
38476: PPUSH
38477: CALL_OW 250
38481: ST_TO_ADDR
// y := GetY ( building ) ;
38482: LD_ADDR_VAR 0 6
38486: PUSH
38487: LD_VAR 0 2
38491: PPUSH
38492: CALL_OW 251
38496: ST_TO_ADDR
// d := GetDir ( building ) ;
38497: LD_ADDR_VAR 0 8
38501: PUSH
38502: LD_VAR 0 2
38506: PPUSH
38507: CALL_OW 254
38511: ST_TO_ADDR
// r := 4 ;
38512: LD_ADDR_VAR 0 9
38516: PUSH
38517: LD_INT 4
38519: ST_TO_ADDR
// for i := 1 to 5 do
38520: LD_ADDR_VAR 0 10
38524: PUSH
38525: DOUBLE
38526: LD_INT 1
38528: DEC
38529: ST_TO_ADDR
38530: LD_INT 5
38532: PUSH
38533: FOR_TO
38534: IFFALSE 38691
// begin _x := ShiftX ( x , d , r + i ) ;
38536: LD_ADDR_VAR 0 5
38540: PUSH
38541: LD_VAR 0 4
38545: PPUSH
38546: LD_VAR 0 8
38550: PPUSH
38551: LD_VAR 0 9
38555: PUSH
38556: LD_VAR 0 10
38560: PLUS
38561: PPUSH
38562: CALL_OW 272
38566: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38567: LD_ADDR_VAR 0 7
38571: PUSH
38572: LD_VAR 0 6
38576: PPUSH
38577: LD_VAR 0 8
38581: PPUSH
38582: LD_VAR 0 9
38586: PUSH
38587: LD_VAR 0 10
38591: PLUS
38592: PPUSH
38593: CALL_OW 273
38597: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38598: LD_VAR 0 5
38602: PPUSH
38603: LD_VAR 0 7
38607: PPUSH
38608: CALL_OW 488
38612: PUSH
38613: LD_VAR 0 5
38617: PPUSH
38618: LD_VAR 0 7
38622: PPUSH
38623: CALL_OW 428
38627: PPUSH
38628: CALL_OW 247
38632: PUSH
38633: LD_INT 3
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: IN
38643: NOT
38644: AND
38645: IFFALSE 38689
// begin ComMoveXY ( unit , _x , _y ) ;
38647: LD_VAR 0 1
38651: PPUSH
38652: LD_VAR 0 5
38656: PPUSH
38657: LD_VAR 0 7
38661: PPUSH
38662: CALL_OW 111
// result := [ _x , _y ] ;
38666: LD_ADDR_VAR 0 3
38670: PUSH
38671: LD_VAR 0 5
38675: PUSH
38676: LD_VAR 0 7
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: ST_TO_ADDR
// exit ;
38685: POP
38686: POP
38687: GO 38693
// end ; end ;
38689: GO 38533
38691: POP
38692: POP
// end ;
38693: LD_VAR 0 3
38697: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38698: LD_INT 0
38700: PPUSH
38701: PPUSH
38702: PPUSH
// result := 0 ;
38703: LD_ADDR_VAR 0 3
38707: PUSH
38708: LD_INT 0
38710: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38711: LD_VAR 0 1
38715: PUSH
38716: LD_INT 0
38718: LESS
38719: PUSH
38720: LD_VAR 0 1
38724: PUSH
38725: LD_INT 8
38727: GREATER
38728: OR
38729: PUSH
38730: LD_VAR 0 2
38734: PUSH
38735: LD_INT 0
38737: LESS
38738: OR
38739: PUSH
38740: LD_VAR 0 2
38744: PUSH
38745: LD_INT 8
38747: GREATER
38748: OR
38749: IFFALSE 38753
// exit ;
38751: GO 38828
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38753: LD_ADDR_VAR 0 4
38757: PUSH
38758: LD_INT 22
38760: PUSH
38761: LD_VAR 0 2
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PPUSH
38770: CALL_OW 69
38774: PUSH
38775: FOR_IN
38776: IFFALSE 38826
// begin un := UnitShoot ( i ) ;
38778: LD_ADDR_VAR 0 5
38782: PUSH
38783: LD_VAR 0 4
38787: PPUSH
38788: CALL_OW 504
38792: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38793: LD_VAR 0 5
38797: PPUSH
38798: CALL_OW 255
38802: PUSH
38803: LD_VAR 0 1
38807: EQUAL
38808: IFFALSE 38824
// begin result := un ;
38810: LD_ADDR_VAR 0 3
38814: PUSH
38815: LD_VAR 0 5
38819: ST_TO_ADDR
// exit ;
38820: POP
38821: POP
38822: GO 38828
// end ; end ;
38824: GO 38775
38826: POP
38827: POP
// end ;
38828: LD_VAR 0 3
38832: RET
// export function GetCargoBay ( units ) ; begin
38833: LD_INT 0
38835: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
38836: LD_ADDR_VAR 0 2
38840: PUSH
38841: LD_VAR 0 1
38845: PPUSH
38846: LD_INT 2
38848: PUSH
38849: LD_INT 34
38851: PUSH
38852: LD_INT 12
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 34
38861: PUSH
38862: LD_INT 51
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 34
38871: PUSH
38872: LD_INT 32
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 34
38881: PUSH
38882: LD_INT 89
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: PPUSH
38896: CALL_OW 72
38900: ST_TO_ADDR
// end ;
38901: LD_VAR 0 2
38905: RET
// export function Negate ( value ) ; begin
38906: LD_INT 0
38908: PPUSH
// result := not value ;
38909: LD_ADDR_VAR 0 2
38913: PUSH
38914: LD_VAR 0 1
38918: NOT
38919: ST_TO_ADDR
// end ;
38920: LD_VAR 0 2
38924: RET
// export function Inc ( value ) ; begin
38925: LD_INT 0
38927: PPUSH
// result := value + 1 ;
38928: LD_ADDR_VAR 0 2
38932: PUSH
38933: LD_VAR 0 1
38937: PUSH
38938: LD_INT 1
38940: PLUS
38941: ST_TO_ADDR
// end ;
38942: LD_VAR 0 2
38946: RET
// export function Dec ( value ) ; begin
38947: LD_INT 0
38949: PPUSH
// result := value - 1 ;
38950: LD_ADDR_VAR 0 2
38954: PUSH
38955: LD_VAR 0 1
38959: PUSH
38960: LD_INT 1
38962: MINUS
38963: ST_TO_ADDR
// end ;
38964: LD_VAR 0 2
38968: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
38969: LD_INT 0
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
38977: PPUSH
38978: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
38979: LD_VAR 0 1
38983: PPUSH
38984: LD_VAR 0 2
38988: PPUSH
38989: CALL_OW 488
38993: NOT
38994: PUSH
38995: LD_VAR 0 3
38999: PPUSH
39000: LD_VAR 0 4
39004: PPUSH
39005: CALL_OW 488
39009: NOT
39010: OR
39011: IFFALSE 39024
// begin result := - 1 ;
39013: LD_ADDR_VAR 0 5
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: ST_TO_ADDR
// exit ;
39022: GO 39259
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39024: LD_ADDR_VAR 0 12
39028: PUSH
39029: LD_VAR 0 1
39033: PPUSH
39034: LD_VAR 0 2
39038: PPUSH
39039: LD_VAR 0 3
39043: PPUSH
39044: LD_VAR 0 4
39048: PPUSH
39049: CALL 38109 0 4
39053: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39054: LD_ADDR_VAR 0 11
39058: PUSH
39059: LD_VAR 0 1
39063: PPUSH
39064: LD_VAR 0 2
39068: PPUSH
39069: LD_VAR 0 12
39073: PUSH
39074: LD_INT 1
39076: ARRAY
39077: PPUSH
39078: LD_VAR 0 12
39082: PUSH
39083: LD_INT 2
39085: ARRAY
39086: PPUSH
39087: CALL_OW 298
39091: ST_TO_ADDR
// distance := 9999 ;
39092: LD_ADDR_VAR 0 10
39096: PUSH
39097: LD_INT 9999
39099: ST_TO_ADDR
// for i := 0 to 5 do
39100: LD_ADDR_VAR 0 6
39104: PUSH
39105: DOUBLE
39106: LD_INT 0
39108: DEC
39109: ST_TO_ADDR
39110: LD_INT 5
39112: PUSH
39113: FOR_TO
39114: IFFALSE 39257
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39116: LD_ADDR_VAR 0 7
39120: PUSH
39121: LD_VAR 0 1
39125: PPUSH
39126: LD_VAR 0 6
39130: PPUSH
39131: LD_VAR 0 11
39135: PPUSH
39136: CALL_OW 272
39140: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39141: LD_ADDR_VAR 0 8
39145: PUSH
39146: LD_VAR 0 2
39150: PPUSH
39151: LD_VAR 0 6
39155: PPUSH
39156: LD_VAR 0 11
39160: PPUSH
39161: CALL_OW 273
39165: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39166: LD_VAR 0 7
39170: PPUSH
39171: LD_VAR 0 8
39175: PPUSH
39176: CALL_OW 488
39180: NOT
39181: IFFALSE 39185
// continue ;
39183: GO 39113
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39185: LD_ADDR_VAR 0 9
39189: PUSH
39190: LD_VAR 0 12
39194: PUSH
39195: LD_INT 1
39197: ARRAY
39198: PPUSH
39199: LD_VAR 0 12
39203: PUSH
39204: LD_INT 2
39206: ARRAY
39207: PPUSH
39208: LD_VAR 0 7
39212: PPUSH
39213: LD_VAR 0 8
39217: PPUSH
39218: CALL_OW 298
39222: ST_TO_ADDR
// if tmp < distance then
39223: LD_VAR 0 9
39227: PUSH
39228: LD_VAR 0 10
39232: LESS
39233: IFFALSE 39255
// begin result := i ;
39235: LD_ADDR_VAR 0 5
39239: PUSH
39240: LD_VAR 0 6
39244: ST_TO_ADDR
// distance := tmp ;
39245: LD_ADDR_VAR 0 10
39249: PUSH
39250: LD_VAR 0 9
39254: ST_TO_ADDR
// end ; end ;
39255: GO 39113
39257: POP
39258: POP
// end ;
39259: LD_VAR 0 5
39263: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39264: LD_INT 0
39266: PPUSH
39267: PPUSH
// if not driver or not IsInUnit ( driver ) then
39268: LD_VAR 0 1
39272: NOT
39273: PUSH
39274: LD_VAR 0 1
39278: PPUSH
39279: CALL_OW 310
39283: NOT
39284: OR
39285: IFFALSE 39289
// exit ;
39287: GO 39379
// vehicle := IsInUnit ( driver ) ;
39289: LD_ADDR_VAR 0 3
39293: PUSH
39294: LD_VAR 0 1
39298: PPUSH
39299: CALL_OW 310
39303: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39304: LD_VAR 0 1
39308: PPUSH
39309: LD_STRING \
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: PUSH
39339: LD_STRING E
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_VAR 0 3
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PPUSH
39375: CALL_OW 446
// end ;
39379: LD_VAR 0 2
39383: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39384: LD_INT 0
39386: PPUSH
39387: PPUSH
// if not driver or not IsInUnit ( driver ) then
39388: LD_VAR 0 1
39392: NOT
39393: PUSH
39394: LD_VAR 0 1
39398: PPUSH
39399: CALL_OW 310
39403: NOT
39404: OR
39405: IFFALSE 39409
// exit ;
39407: GO 39499
// vehicle := IsInUnit ( driver ) ;
39409: LD_ADDR_VAR 0 3
39413: PUSH
39414: LD_VAR 0 1
39418: PPUSH
39419: CALL_OW 310
39423: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39424: LD_VAR 0 1
39428: PPUSH
39429: LD_STRING \
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: PUSH
39459: LD_STRING E
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: LD_VAR 0 3
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PPUSH
39495: CALL_OW 447
// end ;
39499: LD_VAR 0 2
39503: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39504: LD_INT 0
39506: PPUSH
39507: PPUSH
39508: PPUSH
// tmp := [ ] ;
39509: LD_ADDR_VAR 0 5
39513: PUSH
39514: EMPTY
39515: ST_TO_ADDR
// for i in units do
39516: LD_ADDR_VAR 0 4
39520: PUSH
39521: LD_VAR 0 1
39525: PUSH
39526: FOR_IN
39527: IFFALSE 39565
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39529: LD_ADDR_VAR 0 5
39533: PUSH
39534: LD_VAR 0 5
39538: PPUSH
39539: LD_VAR 0 5
39543: PUSH
39544: LD_INT 1
39546: PLUS
39547: PPUSH
39548: LD_VAR 0 4
39552: PPUSH
39553: CALL_OW 256
39557: PPUSH
39558: CALL_OW 2
39562: ST_TO_ADDR
39563: GO 39526
39565: POP
39566: POP
// if not tmp then
39567: LD_VAR 0 5
39571: NOT
39572: IFFALSE 39576
// exit ;
39574: GO 39624
// if asc then
39576: LD_VAR 0 2
39580: IFFALSE 39604
// result := SortListByListAsc ( units , tmp ) else
39582: LD_ADDR_VAR 0 3
39586: PUSH
39587: LD_VAR 0 1
39591: PPUSH
39592: LD_VAR 0 5
39596: PPUSH
39597: CALL_OW 76
39601: ST_TO_ADDR
39602: GO 39624
// result := SortListByListDesc ( units , tmp ) ;
39604: LD_ADDR_VAR 0 3
39608: PUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: LD_VAR 0 5
39618: PPUSH
39619: CALL_OW 77
39623: ST_TO_ADDR
// end ;
39624: LD_VAR 0 3
39628: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39629: LD_INT 0
39631: PPUSH
39632: PPUSH
// task := GetTaskList ( mech ) ;
39633: LD_ADDR_VAR 0 4
39637: PUSH
39638: LD_VAR 0 1
39642: PPUSH
39643: CALL_OW 437
39647: ST_TO_ADDR
// if not task then
39648: LD_VAR 0 4
39652: NOT
39653: IFFALSE 39657
// exit ;
39655: GO 39699
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39657: LD_ADDR_VAR 0 3
39661: PUSH
39662: LD_VAR 0 4
39666: PUSH
39667: LD_INT 1
39669: ARRAY
39670: PUSH
39671: LD_INT 1
39673: ARRAY
39674: PUSH
39675: LD_STRING r
39677: EQUAL
39678: PUSH
39679: LD_VAR 0 4
39683: PUSH
39684: LD_INT 1
39686: ARRAY
39687: PUSH
39688: LD_INT 4
39690: ARRAY
39691: PUSH
39692: LD_VAR 0 2
39696: EQUAL
39697: AND
39698: ST_TO_ADDR
// end ;
39699: LD_VAR 0 3
39703: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39704: LD_INT 0
39706: PPUSH
// SetDir ( unit , d ) ;
39707: LD_VAR 0 1
39711: PPUSH
39712: LD_VAR 0 4
39716: PPUSH
39717: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39721: LD_VAR 0 1
39725: PPUSH
39726: LD_VAR 0 2
39730: PPUSH
39731: LD_VAR 0 3
39735: PPUSH
39736: LD_VAR 0 5
39740: PPUSH
39741: CALL_OW 48
// end ;
39745: LD_VAR 0 6
39749: RET
// export function ToNaturalNumber ( number ) ; begin
39750: LD_INT 0
39752: PPUSH
// result := number div 1 ;
39753: LD_ADDR_VAR 0 2
39757: PUSH
39758: LD_VAR 0 1
39762: PUSH
39763: LD_INT 1
39765: DIV
39766: ST_TO_ADDR
// if number < 0 then
39767: LD_VAR 0 1
39771: PUSH
39772: LD_INT 0
39774: LESS
39775: IFFALSE 39785
// result := 0 ;
39777: LD_ADDR_VAR 0 2
39781: PUSH
39782: LD_INT 0
39784: ST_TO_ADDR
// end ;
39785: LD_VAR 0 2
39789: RET
// export function SortByClass ( units , class ) ; var un ; begin
39790: LD_INT 0
39792: PPUSH
39793: PPUSH
// if not units or not class then
39794: LD_VAR 0 1
39798: NOT
39799: PUSH
39800: LD_VAR 0 2
39804: NOT
39805: OR
39806: IFFALSE 39810
// exit ;
39808: GO 39905
// result := [ ] ;
39810: LD_ADDR_VAR 0 3
39814: PUSH
39815: EMPTY
39816: ST_TO_ADDR
// for un in units do
39817: LD_ADDR_VAR 0 4
39821: PUSH
39822: LD_VAR 0 1
39826: PUSH
39827: FOR_IN
39828: IFFALSE 39903
// if GetClass ( un ) = class then
39830: LD_VAR 0 4
39834: PPUSH
39835: CALL_OW 257
39839: PUSH
39840: LD_VAR 0 2
39844: EQUAL
39845: IFFALSE 39872
// result := Insert ( result , 1 , un ) else
39847: LD_ADDR_VAR 0 3
39851: PUSH
39852: LD_VAR 0 3
39856: PPUSH
39857: LD_INT 1
39859: PPUSH
39860: LD_VAR 0 4
39864: PPUSH
39865: CALL_OW 2
39869: ST_TO_ADDR
39870: GO 39901
// result := Replace ( result , result + 1 , un ) ;
39872: LD_ADDR_VAR 0 3
39876: PUSH
39877: LD_VAR 0 3
39881: PPUSH
39882: LD_VAR 0 3
39886: PUSH
39887: LD_INT 1
39889: PLUS
39890: PPUSH
39891: LD_VAR 0 4
39895: PPUSH
39896: CALL_OW 1
39900: ST_TO_ADDR
39901: GO 39827
39903: POP
39904: POP
// end ;
39905: LD_VAR 0 3
39909: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
39910: LD_INT 0
39912: PPUSH
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
// result := [ ] ;
39919: LD_ADDR_VAR 0 4
39923: PUSH
39924: EMPTY
39925: ST_TO_ADDR
// if x - r < 0 then
39926: LD_VAR 0 1
39930: PUSH
39931: LD_VAR 0 3
39935: MINUS
39936: PUSH
39937: LD_INT 0
39939: LESS
39940: IFFALSE 39952
// min_x := 0 else
39942: LD_ADDR_VAR 0 8
39946: PUSH
39947: LD_INT 0
39949: ST_TO_ADDR
39950: GO 39968
// min_x := x - r ;
39952: LD_ADDR_VAR 0 8
39956: PUSH
39957: LD_VAR 0 1
39961: PUSH
39962: LD_VAR 0 3
39966: MINUS
39967: ST_TO_ADDR
// if y - r < 0 then
39968: LD_VAR 0 2
39972: PUSH
39973: LD_VAR 0 3
39977: MINUS
39978: PUSH
39979: LD_INT 0
39981: LESS
39982: IFFALSE 39994
// min_y := 0 else
39984: LD_ADDR_VAR 0 7
39988: PUSH
39989: LD_INT 0
39991: ST_TO_ADDR
39992: GO 40010
// min_y := y - r ;
39994: LD_ADDR_VAR 0 7
39998: PUSH
39999: LD_VAR 0 2
40003: PUSH
40004: LD_VAR 0 3
40008: MINUS
40009: ST_TO_ADDR
// max_x := x + r ;
40010: LD_ADDR_VAR 0 9
40014: PUSH
40015: LD_VAR 0 1
40019: PUSH
40020: LD_VAR 0 3
40024: PLUS
40025: ST_TO_ADDR
// max_y := y + r ;
40026: LD_ADDR_VAR 0 10
40030: PUSH
40031: LD_VAR 0 2
40035: PUSH
40036: LD_VAR 0 3
40040: PLUS
40041: ST_TO_ADDR
// for _x = min_x to max_x do
40042: LD_ADDR_VAR 0 5
40046: PUSH
40047: DOUBLE
40048: LD_VAR 0 8
40052: DEC
40053: ST_TO_ADDR
40054: LD_VAR 0 9
40058: PUSH
40059: FOR_TO
40060: IFFALSE 40161
// for _y = min_y to max_y do
40062: LD_ADDR_VAR 0 6
40066: PUSH
40067: DOUBLE
40068: LD_VAR 0 7
40072: DEC
40073: ST_TO_ADDR
40074: LD_VAR 0 10
40078: PUSH
40079: FOR_TO
40080: IFFALSE 40157
// begin if not ValidHex ( _x , _y ) then
40082: LD_VAR 0 5
40086: PPUSH
40087: LD_VAR 0 6
40091: PPUSH
40092: CALL_OW 488
40096: NOT
40097: IFFALSE 40101
// continue ;
40099: GO 40079
// if GetResourceTypeXY ( _x , _y ) then
40101: LD_VAR 0 5
40105: PPUSH
40106: LD_VAR 0 6
40110: PPUSH
40111: CALL_OW 283
40115: IFFALSE 40155
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40117: LD_ADDR_VAR 0 4
40121: PUSH
40122: LD_VAR 0 4
40126: PPUSH
40127: LD_VAR 0 4
40131: PUSH
40132: LD_INT 1
40134: PLUS
40135: PPUSH
40136: LD_VAR 0 5
40140: PUSH
40141: LD_VAR 0 6
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PPUSH
40150: CALL_OW 1
40154: ST_TO_ADDR
// end ;
40155: GO 40079
40157: POP
40158: POP
40159: GO 40059
40161: POP
40162: POP
// end ;
40163: LD_VAR 0 4
40167: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40168: LD_INT 0
40170: PPUSH
40171: PPUSH
40172: PPUSH
40173: PPUSH
40174: PPUSH
40175: PPUSH
40176: PPUSH
40177: PPUSH
// if not units then
40178: LD_VAR 0 1
40182: NOT
40183: IFFALSE 40187
// exit ;
40185: GO 40711
// result := UnitFilter ( units , [ f_ok ] ) ;
40187: LD_ADDR_VAR 0 3
40191: PUSH
40192: LD_VAR 0 1
40196: PPUSH
40197: LD_INT 50
40199: PUSH
40200: EMPTY
40201: LIST
40202: PPUSH
40203: CALL_OW 72
40207: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40208: LD_ADDR_VAR 0 8
40212: PUSH
40213: LD_VAR 0 1
40217: PUSH
40218: LD_INT 1
40220: ARRAY
40221: PPUSH
40222: CALL_OW 255
40226: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40227: LD_ADDR_VAR 0 10
40231: PUSH
40232: LD_INT 29
40234: PUSH
40235: LD_INT 91
40237: PUSH
40238: LD_INT 49
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: LIST
40245: ST_TO_ADDR
// if not result then
40246: LD_VAR 0 3
40250: NOT
40251: IFFALSE 40255
// exit ;
40253: GO 40711
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40255: LD_ADDR_VAR 0 5
40259: PUSH
40260: LD_INT 81
40262: PUSH
40263: LD_VAR 0 8
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PPUSH
40272: CALL_OW 69
40276: ST_TO_ADDR
// for i in result do
40277: LD_ADDR_VAR 0 4
40281: PUSH
40282: LD_VAR 0 3
40286: PUSH
40287: FOR_IN
40288: IFFALSE 40709
// begin tag := GetTag ( i ) + 1 ;
40290: LD_ADDR_VAR 0 9
40294: PUSH
40295: LD_VAR 0 4
40299: PPUSH
40300: CALL_OW 110
40304: PUSH
40305: LD_INT 1
40307: PLUS
40308: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40309: LD_ADDR_VAR 0 7
40313: PUSH
40314: LD_VAR 0 4
40318: PPUSH
40319: CALL_OW 250
40323: PPUSH
40324: LD_VAR 0 4
40328: PPUSH
40329: CALL_OW 251
40333: PPUSH
40334: LD_INT 6
40336: PPUSH
40337: CALL 39910 0 3
40341: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40342: LD_VAR 0 4
40346: PPUSH
40347: CALL_OW 247
40351: PUSH
40352: LD_INT 2
40354: EQUAL
40355: PUSH
40356: LD_VAR 0 7
40360: AND
40361: PUSH
40362: LD_VAR 0 4
40366: PPUSH
40367: CALL_OW 264
40371: PUSH
40372: LD_VAR 0 10
40376: IN
40377: NOT
40378: AND
40379: IFFALSE 40418
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40381: LD_VAR 0 4
40385: PPUSH
40386: LD_VAR 0 7
40390: PUSH
40391: LD_INT 1
40393: ARRAY
40394: PUSH
40395: LD_INT 1
40397: ARRAY
40398: PPUSH
40399: LD_VAR 0 7
40403: PUSH
40404: LD_INT 1
40406: ARRAY
40407: PUSH
40408: LD_INT 2
40410: ARRAY
40411: PPUSH
40412: CALL_OW 116
40416: GO 40707
// if path > tag then
40418: LD_VAR 0 2
40422: PUSH
40423: LD_VAR 0 9
40427: GREATER
40428: IFFALSE 40636
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40430: LD_ADDR_VAR 0 6
40434: PUSH
40435: LD_VAR 0 5
40439: PPUSH
40440: LD_INT 91
40442: PUSH
40443: LD_VAR 0 4
40447: PUSH
40448: LD_INT 8
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: LIST
40455: PPUSH
40456: CALL_OW 72
40460: ST_TO_ADDR
// if nearEnemy then
40461: LD_VAR 0 6
40465: IFFALSE 40534
// begin if GetWeapon ( i ) = ru_time_lapser then
40467: LD_VAR 0 4
40471: PPUSH
40472: CALL_OW 264
40476: PUSH
40477: LD_INT 49
40479: EQUAL
40480: IFFALSE 40508
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40482: LD_VAR 0 4
40486: PPUSH
40487: LD_VAR 0 6
40491: PPUSH
40492: LD_VAR 0 4
40496: PPUSH
40497: CALL_OW 74
40501: PPUSH
40502: CALL_OW 112
40506: GO 40532
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40508: LD_VAR 0 4
40512: PPUSH
40513: LD_VAR 0 6
40517: PPUSH
40518: LD_VAR 0 4
40522: PPUSH
40523: CALL_OW 74
40527: PPUSH
40528: CALL_OW 115
// end else
40532: GO 40634
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40534: LD_VAR 0 4
40538: PPUSH
40539: LD_VAR 0 2
40543: PUSH
40544: LD_VAR 0 9
40548: ARRAY
40549: PUSH
40550: LD_INT 1
40552: ARRAY
40553: PPUSH
40554: LD_VAR 0 2
40558: PUSH
40559: LD_VAR 0 9
40563: ARRAY
40564: PUSH
40565: LD_INT 2
40567: ARRAY
40568: PPUSH
40569: CALL_OW 297
40573: PUSH
40574: LD_INT 6
40576: GREATER
40577: IFFALSE 40620
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40579: LD_VAR 0 4
40583: PPUSH
40584: LD_VAR 0 2
40588: PUSH
40589: LD_VAR 0 9
40593: ARRAY
40594: PUSH
40595: LD_INT 1
40597: ARRAY
40598: PPUSH
40599: LD_VAR 0 2
40603: PUSH
40604: LD_VAR 0 9
40608: ARRAY
40609: PUSH
40610: LD_INT 2
40612: ARRAY
40613: PPUSH
40614: CALL_OW 114
40618: GO 40634
// SetTag ( i , tag ) ;
40620: LD_VAR 0 4
40624: PPUSH
40625: LD_VAR 0 9
40629: PPUSH
40630: CALL_OW 109
// end else
40634: GO 40707
// if enemy then
40636: LD_VAR 0 5
40640: IFFALSE 40707
// begin if GetWeapon ( i ) = ru_time_lapser then
40642: LD_VAR 0 4
40646: PPUSH
40647: CALL_OW 264
40651: PUSH
40652: LD_INT 49
40654: EQUAL
40655: IFFALSE 40683
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40657: LD_VAR 0 4
40661: PPUSH
40662: LD_VAR 0 5
40666: PPUSH
40667: LD_VAR 0 4
40671: PPUSH
40672: CALL_OW 74
40676: PPUSH
40677: CALL_OW 112
40681: GO 40707
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40683: LD_VAR 0 4
40687: PPUSH
40688: LD_VAR 0 5
40692: PPUSH
40693: LD_VAR 0 4
40697: PPUSH
40698: CALL_OW 74
40702: PPUSH
40703: CALL_OW 115
// end ; end ;
40707: GO 40287
40709: POP
40710: POP
// end ;
40711: LD_VAR 0 3
40715: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40716: LD_INT 0
40718: PPUSH
40719: PPUSH
40720: PPUSH
// if not unit or IsInUnit ( unit ) then
40721: LD_VAR 0 1
40725: NOT
40726: PUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL_OW 310
40736: OR
40737: IFFALSE 40741
// exit ;
40739: GO 40832
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
40741: LD_ADDR_VAR 0 4
40745: PUSH
40746: LD_VAR 0 1
40750: PPUSH
40751: CALL_OW 250
40755: PPUSH
40756: LD_VAR 0 2
40760: PPUSH
40761: LD_INT 1
40763: PPUSH
40764: CALL_OW 272
40768: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
40769: LD_ADDR_VAR 0 5
40773: PUSH
40774: LD_VAR 0 1
40778: PPUSH
40779: CALL_OW 251
40783: PPUSH
40784: LD_VAR 0 2
40788: PPUSH
40789: LD_INT 1
40791: PPUSH
40792: CALL_OW 273
40796: ST_TO_ADDR
// if ValidHex ( x , y ) then
40797: LD_VAR 0 4
40801: PPUSH
40802: LD_VAR 0 5
40806: PPUSH
40807: CALL_OW 488
40811: IFFALSE 40832
// ComTurnXY ( unit , x , y ) ;
40813: LD_VAR 0 1
40817: PPUSH
40818: LD_VAR 0 4
40822: PPUSH
40823: LD_VAR 0 5
40827: PPUSH
40828: CALL_OW 118
// end ;
40832: LD_VAR 0 3
40836: RET
// export function SeeUnits ( side , units ) ; var i ; begin
40837: LD_INT 0
40839: PPUSH
40840: PPUSH
// result := false ;
40841: LD_ADDR_VAR 0 3
40845: PUSH
40846: LD_INT 0
40848: ST_TO_ADDR
// if not units then
40849: LD_VAR 0 2
40853: NOT
40854: IFFALSE 40858
// exit ;
40856: GO 40903
// for i in units do
40858: LD_ADDR_VAR 0 4
40862: PUSH
40863: LD_VAR 0 2
40867: PUSH
40868: FOR_IN
40869: IFFALSE 40901
// if See ( side , i ) then
40871: LD_VAR 0 1
40875: PPUSH
40876: LD_VAR 0 4
40880: PPUSH
40881: CALL_OW 292
40885: IFFALSE 40899
// begin result := true ;
40887: LD_ADDR_VAR 0 3
40891: PUSH
40892: LD_INT 1
40894: ST_TO_ADDR
// exit ;
40895: POP
40896: POP
40897: GO 40903
// end ;
40899: GO 40868
40901: POP
40902: POP
// end ;
40903: LD_VAR 0 3
40907: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
40908: LD_INT 0
40910: PPUSH
40911: PPUSH
40912: PPUSH
40913: PPUSH
// if not unit or not points then
40914: LD_VAR 0 1
40918: NOT
40919: PUSH
40920: LD_VAR 0 2
40924: NOT
40925: OR
40926: IFFALSE 40930
// exit ;
40928: GO 41020
// dist := 99999 ;
40930: LD_ADDR_VAR 0 5
40934: PUSH
40935: LD_INT 99999
40937: ST_TO_ADDR
// for i in points do
40938: LD_ADDR_VAR 0 4
40942: PUSH
40943: LD_VAR 0 2
40947: PUSH
40948: FOR_IN
40949: IFFALSE 41018
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
40951: LD_ADDR_VAR 0 6
40955: PUSH
40956: LD_VAR 0 1
40960: PPUSH
40961: LD_VAR 0 4
40965: PUSH
40966: LD_INT 1
40968: ARRAY
40969: PPUSH
40970: LD_VAR 0 4
40974: PUSH
40975: LD_INT 2
40977: ARRAY
40978: PPUSH
40979: CALL_OW 297
40983: ST_TO_ADDR
// if tmpDist < dist then
40984: LD_VAR 0 6
40988: PUSH
40989: LD_VAR 0 5
40993: LESS
40994: IFFALSE 41016
// begin result := i ;
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_VAR 0 4
41005: ST_TO_ADDR
// dist := tmpDist ;
41006: LD_ADDR_VAR 0 5
41010: PUSH
41011: LD_VAR 0 6
41015: ST_TO_ADDR
// end ; end ;
41016: GO 40948
41018: POP
41019: POP
// end ;
41020: LD_VAR 0 3
41024: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41025: LD_INT 0
41027: PPUSH
// uc_side := side ;
41028: LD_ADDR_OWVAR 20
41032: PUSH
41033: LD_VAR 0 1
41037: ST_TO_ADDR
// uc_nation := 3 ;
41038: LD_ADDR_OWVAR 21
41042: PUSH
41043: LD_INT 3
41045: ST_TO_ADDR
// vc_chassis := 25 ;
41046: LD_ADDR_OWVAR 37
41050: PUSH
41051: LD_INT 25
41053: ST_TO_ADDR
// vc_engine := engine_siberite ;
41054: LD_ADDR_OWVAR 39
41058: PUSH
41059: LD_INT 3
41061: ST_TO_ADDR
// vc_control := control_computer ;
41062: LD_ADDR_OWVAR 38
41066: PUSH
41067: LD_INT 3
41069: ST_TO_ADDR
// vc_weapon := 59 ;
41070: LD_ADDR_OWVAR 40
41074: PUSH
41075: LD_INT 59
41077: ST_TO_ADDR
// result := CreateVehicle ;
41078: LD_ADDR_VAR 0 5
41082: PUSH
41083: CALL_OW 45
41087: ST_TO_ADDR
// SetDir ( result , d ) ;
41088: LD_VAR 0 5
41092: PPUSH
41093: LD_VAR 0 4
41097: PPUSH
41098: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41102: LD_VAR 0 5
41106: PPUSH
41107: LD_VAR 0 2
41111: PPUSH
41112: LD_VAR 0 3
41116: PPUSH
41117: LD_INT 0
41119: PPUSH
41120: CALL_OW 48
// end ;
41124: LD_VAR 0 5
41128: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41129: LD_INT 0
41131: PPUSH
41132: PPUSH
41133: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41134: LD_ADDR_VAR 0 2
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41157: LD_VAR 0 1
41161: NOT
41162: PUSH
41163: LD_VAR 0 1
41167: PPUSH
41168: CALL_OW 264
41172: PUSH
41173: LD_INT 12
41175: PUSH
41176: LD_INT 51
41178: PUSH
41179: LD_INT 32
41181: PUSH
41182: LD_INT 89
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: IN
41191: NOT
41192: OR
41193: IFFALSE 41197
// exit ;
41195: GO 41295
// for i := 1 to 3 do
41197: LD_ADDR_VAR 0 3
41201: PUSH
41202: DOUBLE
41203: LD_INT 1
41205: DEC
41206: ST_TO_ADDR
41207: LD_INT 3
41209: PUSH
41210: FOR_TO
41211: IFFALSE 41293
// begin tmp := GetCargo ( cargo , i ) ;
41213: LD_ADDR_VAR 0 4
41217: PUSH
41218: LD_VAR 0 1
41222: PPUSH
41223: LD_VAR 0 3
41227: PPUSH
41228: CALL_OW 289
41232: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41233: LD_ADDR_VAR 0 2
41237: PUSH
41238: LD_VAR 0 2
41242: PPUSH
41243: LD_VAR 0 3
41247: PPUSH
41248: LD_VAR 0 4
41252: PPUSH
41253: CALL_OW 1
41257: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41258: LD_ADDR_VAR 0 2
41262: PUSH
41263: LD_VAR 0 2
41267: PPUSH
41268: LD_INT 4
41270: PPUSH
41271: LD_VAR 0 2
41275: PUSH
41276: LD_INT 4
41278: ARRAY
41279: PUSH
41280: LD_VAR 0 4
41284: PLUS
41285: PPUSH
41286: CALL_OW 1
41290: ST_TO_ADDR
// end ;
41291: GO 41210
41293: POP
41294: POP
// end ;
41295: LD_VAR 0 2
41299: RET
// export function Length ( array ) ; begin
41300: LD_INT 0
41302: PPUSH
// result := array + 0 ;
41303: LD_ADDR_VAR 0 2
41307: PUSH
41308: LD_VAR 0 1
41312: PUSH
41313: LD_INT 0
41315: PLUS
41316: ST_TO_ADDR
// end ;
41317: LD_VAR 0 2
41321: RET
// export function PrepareArray ( array ) ; begin
41322: LD_INT 0
41324: PPUSH
// result := array diff 0 ;
41325: LD_ADDR_VAR 0 2
41329: PUSH
41330: LD_VAR 0 1
41334: PUSH
41335: LD_INT 0
41337: DIFF
41338: ST_TO_ADDR
// if not result [ 1 ] then
41339: LD_VAR 0 2
41343: PUSH
41344: LD_INT 1
41346: ARRAY
41347: NOT
41348: IFFALSE 41368
// result := Delete ( result , 1 ) ;
41350: LD_ADDR_VAR 0 2
41354: PUSH
41355: LD_VAR 0 2
41359: PPUSH
41360: LD_INT 1
41362: PPUSH
41363: CALL_OW 3
41367: ST_TO_ADDR
// end ;
41368: LD_VAR 0 2
41372: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41373: LD_INT 0
41375: PPUSH
41376: PPUSH
41377: PPUSH
41378: PPUSH
// sibRocketRange := 25 ;
41379: LD_ADDR_VAR 0 6
41383: PUSH
41384: LD_INT 25
41386: ST_TO_ADDR
// result := false ;
41387: LD_ADDR_VAR 0 4
41391: PUSH
41392: LD_INT 0
41394: ST_TO_ADDR
// for i := 0 to 5 do
41395: LD_ADDR_VAR 0 5
41399: PUSH
41400: DOUBLE
41401: LD_INT 0
41403: DEC
41404: ST_TO_ADDR
41405: LD_INT 5
41407: PUSH
41408: FOR_TO
41409: IFFALSE 41476
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41411: LD_VAR 0 1
41415: PPUSH
41416: LD_VAR 0 5
41420: PPUSH
41421: LD_VAR 0 6
41425: PPUSH
41426: CALL_OW 272
41430: PPUSH
41431: LD_VAR 0 2
41435: PPUSH
41436: LD_VAR 0 5
41440: PPUSH
41441: LD_VAR 0 6
41445: PPUSH
41446: CALL_OW 273
41450: PPUSH
41451: LD_VAR 0 3
41455: PPUSH
41456: CALL_OW 309
41460: IFFALSE 41474
// begin result := true ;
41462: LD_ADDR_VAR 0 4
41466: PUSH
41467: LD_INT 1
41469: ST_TO_ADDR
// exit ;
41470: POP
41471: POP
41472: GO 41478
// end ;
41474: GO 41408
41476: POP
41477: POP
// end ;
41478: LD_VAR 0 4
41482: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41483: LD_INT 0
41485: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41486: LD_VAR 0 1
41490: PPUSH
41491: LD_VAR 0 2
41495: PPUSH
41496: LD_INT 0
41498: PPUSH
41499: LD_INT 0
41501: PPUSH
41502: LD_INT 1
41504: PPUSH
41505: LD_INT 0
41507: PPUSH
41508: CALL_OW 587
// end ;
41512: LD_VAR 0 3
41516: RET
// export function CenterOnNow ( unit ) ; begin
41517: LD_INT 0
41519: PPUSH
// result := IsInUnit ( unit ) ;
41520: LD_ADDR_VAR 0 2
41524: PUSH
41525: LD_VAR 0 1
41529: PPUSH
41530: CALL_OW 310
41534: ST_TO_ADDR
// if not result then
41535: LD_VAR 0 2
41539: NOT
41540: IFFALSE 41552
// result := unit ;
41542: LD_ADDR_VAR 0 2
41546: PUSH
41547: LD_VAR 0 1
41551: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
41552: LD_VAR 0 1
41556: PPUSH
41557: CALL_OW 87
// end ;
41561: LD_VAR 0 2
41565: RET
