// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 9 0 0
// end ;
   8: END
// var t ; function Init ; begin
   9: LD_INT 0
  11: PPUSH
// t := 0 0$0 ;
  12: LD_ADDR_LOC 1
  16: PUSH
  17: LD_INT 0
  19: ST_TO_ADDR
// CreateResourcesXY ( mat_cans , 5 , 63 , 64 , false ) ;
  20: LD_INT 1
  22: PPUSH
  23: LD_INT 5
  25: PPUSH
  26: LD_INT 63
  28: PPUSH
  29: LD_INT 64
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 58
// wait ( 0 0$1 ) ;
  39: LD_INT 35
  41: PPUSH
  42: CALL_OW 67
// CreateResourcesXY ( mat_cans , 4 , 63 , 64 , false ) ;
  46: LD_INT 1
  48: PPUSH
  49: LD_INT 4
  51: PPUSH
  52: LD_INT 63
  54: PPUSH
  55: LD_INT 64
  57: PPUSH
  58: LD_INT 0
  60: PPUSH
  61: CALL_OW 58
// end ;
  65: LD_VAR 0 1
  69: RET
// function GetAllLabKind ( side , kinds ) ; var i , j , tmp ; begin
  70: LD_INT 0
  72: PPUSH
  73: PPUSH
  74: PPUSH
  75: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
  76: LD_ADDR_VAR 0 6
  80: PUSH
  81: LD_INT 22
  83: PUSH
  84: LD_VAR 0 1
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: LD_INT 2
  95: PUSH
  96: LD_INT 30
  98: PUSH
  99: LD_INT 7
 101: PUSH
 102: EMPTY
 103: LIST
 104: LIST
 105: PUSH
 106: LD_INT 30
 108: PUSH
 109: LD_INT 8
 111: PUSH
 112: EMPTY
 113: LIST
 114: LIST
 115: PUSH
 116: EMPTY
 117: LIST
 118: LIST
 119: LIST
 120: PUSH
 121: EMPTY
 122: LIST
 123: LIST
 124: PPUSH
 125: CALL_OW 69
 129: ST_TO_ADDR
// if not tmp or not kinds then
 130: LD_VAR 0 6
 134: NOT
 135: PUSH
 136: LD_VAR 0 2
 140: NOT
 141: OR
 142: IFFALSE 146
// exit ;
 144: GO 255
// result := 0 ;
 146: LD_ADDR_VAR 0 3
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// for i in tmp do
 154: LD_ADDR_VAR 0 4
 158: PUSH
 159: LD_VAR 0 6
 163: PUSH
 164: FOR_IN
 165: IFFALSE 253
// for j := 1 to 2 do
 167: LD_ADDR_VAR 0 5
 171: PUSH
 172: DOUBLE
 173: LD_INT 1
 175: DEC
 176: ST_TO_ADDR
 177: LD_INT 2
 179: PUSH
 180: FOR_TO
 181: IFFALSE 249
// if GetLabKind ( i , j ) in kinds then
 183: LD_VAR 0 4
 187: PPUSH
 188: LD_VAR 0 5
 192: PPUSH
 193: CALL_OW 268
 197: PUSH
 198: LD_VAR 0 2
 202: IN
 203: IFFALSE 247
// begin kinds := kinds diff GetLabKind ( i , j ) ;
 205: LD_ADDR_VAR 0 2
 209: PUSH
 210: LD_VAR 0 2
 214: PUSH
 215: LD_VAR 0 4
 219: PPUSH
 220: LD_VAR 0 5
 224: PPUSH
 225: CALL_OW 268
 229: DIFF
 230: ST_TO_ADDR
// result := result + 1 ;
 231: LD_ADDR_VAR 0 3
 235: PUSH
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 1
 243: PLUS
 244: ST_TO_ADDR
// continue ;
 245: GO 180
// end ;
 247: GO 180
 249: POP
 250: POP
 251: GO 164
 253: POP
 254: POP
// end ; end_of_file
 255: LD_VAR 0 3
 259: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 260: LD_INT 0
 262: PPUSH
 263: PPUSH
// if exist_mode then
 264: LD_VAR 0 2
 268: IFFALSE 293
// unit := CreateCharacter ( prefix & ident ) else
 270: LD_ADDR_VAR 0 5
 274: PUSH
 275: LD_VAR 0 3
 279: PUSH
 280: LD_VAR 0 1
 284: STR
 285: PPUSH
 286: CALL_OW 34
 290: ST_TO_ADDR
 291: GO 308
// unit := NewCharacter ( ident ) ;
 293: LD_ADDR_VAR 0 5
 297: PUSH
 298: LD_VAR 0 1
 302: PPUSH
 303: CALL_OW 25
 307: ST_TO_ADDR
// result := unit ;
 308: LD_ADDR_VAR 0 4
 312: PUSH
 313: LD_VAR 0 5
 317: ST_TO_ADDR
// end ;
 318: LD_VAR 0 4
 322: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 323: LD_INT 0
 325: PPUSH
 326: PPUSH
// if not side or not nation then
 327: LD_VAR 0 1
 331: NOT
 332: PUSH
 333: LD_VAR 0 2
 337: NOT
 338: OR
 339: IFFALSE 343
// exit ;
 341: GO 1111
// case nation of nation_american :
 343: LD_VAR 0 2
 347: PUSH
 348: LD_INT 1
 350: DOUBLE
 351: EQUAL
 352: IFTRUE 356
 354: GO 570
 356: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 357: LD_ADDR_VAR 0 4
 361: PUSH
 362: LD_INT 35
 364: PUSH
 365: LD_INT 45
 367: PUSH
 368: LD_INT 46
 370: PUSH
 371: LD_INT 47
 373: PUSH
 374: LD_INT 82
 376: PUSH
 377: LD_INT 83
 379: PUSH
 380: LD_INT 84
 382: PUSH
 383: LD_INT 85
 385: PUSH
 386: LD_INT 86
 388: PUSH
 389: LD_INT 1
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 6
 397: PUSH
 398: LD_INT 15
 400: PUSH
 401: LD_INT 16
 403: PUSH
 404: LD_INT 7
 406: PUSH
 407: LD_INT 12
 409: PUSH
 410: LD_INT 13
 412: PUSH
 413: LD_INT 10
 415: PUSH
 416: LD_INT 14
 418: PUSH
 419: LD_INT 20
 421: PUSH
 422: LD_INT 21
 424: PUSH
 425: LD_INT 22
 427: PUSH
 428: LD_INT 25
 430: PUSH
 431: LD_INT 32
 433: PUSH
 434: LD_INT 27
 436: PUSH
 437: LD_INT 36
 439: PUSH
 440: LD_INT 69
 442: PUSH
 443: LD_INT 39
 445: PUSH
 446: LD_INT 34
 448: PUSH
 449: LD_INT 40
 451: PUSH
 452: LD_INT 48
 454: PUSH
 455: LD_INT 49
 457: PUSH
 458: LD_INT 50
 460: PUSH
 461: LD_INT 51
 463: PUSH
 464: LD_INT 52
 466: PUSH
 467: LD_INT 53
 469: PUSH
 470: LD_INT 54
 472: PUSH
 473: LD_INT 55
 475: PUSH
 476: LD_INT 56
 478: PUSH
 479: LD_INT 57
 481: PUSH
 482: LD_INT 58
 484: PUSH
 485: LD_INT 59
 487: PUSH
 488: LD_INT 60
 490: PUSH
 491: LD_INT 61
 493: PUSH
 494: LD_INT 62
 496: PUSH
 497: LD_INT 80
 499: PUSH
 500: LD_INT 82
 502: PUSH
 503: LD_INT 83
 505: PUSH
 506: LD_INT 84
 508: PUSH
 509: LD_INT 85
 511: PUSH
 512: LD_INT 86
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: LIST
 566: LIST
 567: ST_TO_ADDR
 568: GO 1035
 570: LD_INT 2
 572: DOUBLE
 573: EQUAL
 574: IFTRUE 578
 576: GO 804
 578: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 579: LD_ADDR_VAR 0 4
 583: PUSH
 584: LD_INT 35
 586: PUSH
 587: LD_INT 45
 589: PUSH
 590: LD_INT 46
 592: PUSH
 593: LD_INT 47
 595: PUSH
 596: LD_INT 82
 598: PUSH
 599: LD_INT 83
 601: PUSH
 602: LD_INT 84
 604: PUSH
 605: LD_INT 85
 607: PUSH
 608: LD_INT 87
 610: PUSH
 611: LD_INT 70
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: LD_INT 11
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 4
 625: PUSH
 626: LD_INT 5
 628: PUSH
 629: LD_INT 6
 631: PUSH
 632: LD_INT 15
 634: PUSH
 635: LD_INT 18
 637: PUSH
 638: LD_INT 7
 640: PUSH
 641: LD_INT 17
 643: PUSH
 644: LD_INT 8
 646: PUSH
 647: LD_INT 20
 649: PUSH
 650: LD_INT 21
 652: PUSH
 653: LD_INT 22
 655: PUSH
 656: LD_INT 72
 658: PUSH
 659: LD_INT 26
 661: PUSH
 662: LD_INT 69
 664: PUSH
 665: LD_INT 39
 667: PUSH
 668: LD_INT 40
 670: PUSH
 671: LD_INT 41
 673: PUSH
 674: LD_INT 42
 676: PUSH
 677: LD_INT 43
 679: PUSH
 680: LD_INT 48
 682: PUSH
 683: LD_INT 49
 685: PUSH
 686: LD_INT 50
 688: PUSH
 689: LD_INT 51
 691: PUSH
 692: LD_INT 52
 694: PUSH
 695: LD_INT 53
 697: PUSH
 698: LD_INT 54
 700: PUSH
 701: LD_INT 55
 703: PUSH
 704: LD_INT 56
 706: PUSH
 707: LD_INT 60
 709: PUSH
 710: LD_INT 61
 712: PUSH
 713: LD_INT 62
 715: PUSH
 716: LD_INT 66
 718: PUSH
 719: LD_INT 67
 721: PUSH
 722: LD_INT 68
 724: PUSH
 725: LD_INT 81
 727: PUSH
 728: LD_INT 82
 730: PUSH
 731: LD_INT 83
 733: PUSH
 734: LD_INT 84
 736: PUSH
 737: LD_INT 85
 739: PUSH
 740: LD_INT 87
 742: PUSH
 743: LD_INT 88
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: ST_TO_ADDR
 802: GO 1035
 804: LD_INT 3
 806: DOUBLE
 807: EQUAL
 808: IFTRUE 812
 810: GO 1034
 812: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 813: LD_ADDR_VAR 0 4
 817: PUSH
 818: LD_INT 46
 820: PUSH
 821: LD_INT 47
 823: PUSH
 824: LD_INT 1
 826: PUSH
 827: LD_INT 2
 829: PUSH
 830: LD_INT 82
 832: PUSH
 833: LD_INT 83
 835: PUSH
 836: LD_INT 84
 838: PUSH
 839: LD_INT 85
 841: PUSH
 842: LD_INT 86
 844: PUSH
 845: LD_INT 11
 847: PUSH
 848: LD_INT 9
 850: PUSH
 851: LD_INT 20
 853: PUSH
 854: LD_INT 19
 856: PUSH
 857: LD_INT 21
 859: PUSH
 860: LD_INT 24
 862: PUSH
 863: LD_INT 22
 865: PUSH
 866: LD_INT 25
 868: PUSH
 869: LD_INT 28
 871: PUSH
 872: LD_INT 29
 874: PUSH
 875: LD_INT 30
 877: PUSH
 878: LD_INT 31
 880: PUSH
 881: LD_INT 37
 883: PUSH
 884: LD_INT 38
 886: PUSH
 887: LD_INT 32
 889: PUSH
 890: LD_INT 27
 892: PUSH
 893: LD_INT 33
 895: PUSH
 896: LD_INT 69
 898: PUSH
 899: LD_INT 39
 901: PUSH
 902: LD_INT 34
 904: PUSH
 905: LD_INT 40
 907: PUSH
 908: LD_INT 71
 910: PUSH
 911: LD_INT 23
 913: PUSH
 914: LD_INT 44
 916: PUSH
 917: LD_INT 48
 919: PUSH
 920: LD_INT 49
 922: PUSH
 923: LD_INT 50
 925: PUSH
 926: LD_INT 51
 928: PUSH
 929: LD_INT 52
 931: PUSH
 932: LD_INT 53
 934: PUSH
 935: LD_INT 54
 937: PUSH
 938: LD_INT 55
 940: PUSH
 941: LD_INT 56
 943: PUSH
 944: LD_INT 57
 946: PUSH
 947: LD_INT 58
 949: PUSH
 950: LD_INT 59
 952: PUSH
 953: LD_INT 63
 955: PUSH
 956: LD_INT 64
 958: PUSH
 959: LD_INT 65
 961: PUSH
 962: LD_INT 82
 964: PUSH
 965: LD_INT 83
 967: PUSH
 968: LD_INT 84
 970: PUSH
 971: LD_INT 85
 973: PUSH
 974: LD_INT 86
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: LIST
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: ST_TO_ADDR
1032: GO 1035
1034: POP
// if state > - 1 and state < 3 then
1035: LD_VAR 0 3
1039: PUSH
1040: LD_INT 1
1042: NEG
1043: GREATER
1044: PUSH
1045: LD_VAR 0 3
1049: PUSH
1050: LD_INT 3
1052: LESS
1053: AND
1054: IFFALSE 1111
// for i in result do
1056: LD_ADDR_VAR 0 5
1060: PUSH
1061: LD_VAR 0 4
1065: PUSH
1066: FOR_IN
1067: IFFALSE 1109
// if GetTech ( i , side ) <> state then
1069: LD_VAR 0 5
1073: PPUSH
1074: LD_VAR 0 1
1078: PPUSH
1079: CALL_OW 321
1083: PUSH
1084: LD_VAR 0 3
1088: NONEQUAL
1089: IFFALSE 1107
// result := result diff i ;
1091: LD_ADDR_VAR 0 4
1095: PUSH
1096: LD_VAR 0 4
1100: PUSH
1101: LD_VAR 0 5
1105: DIFF
1106: ST_TO_ADDR
1107: GO 1066
1109: POP
1110: POP
// end ;
1111: LD_VAR 0 4
1115: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1116: LD_INT 0
1118: PPUSH
1119: PPUSH
1120: PPUSH
// result := true ;
1121: LD_ADDR_VAR 0 3
1125: PUSH
1126: LD_INT 1
1128: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1129: LD_ADDR_VAR 0 5
1133: PUSH
1134: LD_VAR 0 2
1138: PPUSH
1139: CALL_OW 480
1143: ST_TO_ADDR
// if not tmp then
1144: LD_VAR 0 5
1148: NOT
1149: IFFALSE 1153
// exit ;
1151: GO 1202
// for i in tmp do
1153: LD_ADDR_VAR 0 4
1157: PUSH
1158: LD_VAR 0 5
1162: PUSH
1163: FOR_IN
1164: IFFALSE 1200
// if GetTech ( i , side ) <> state_researched then
1166: LD_VAR 0 4
1170: PPUSH
1171: LD_VAR 0 1
1175: PPUSH
1176: CALL_OW 321
1180: PUSH
1181: LD_INT 2
1183: NONEQUAL
1184: IFFALSE 1198
// begin result := false ;
1186: LD_ADDR_VAR 0 3
1190: PUSH
1191: LD_INT 0
1193: ST_TO_ADDR
// exit ;
1194: POP
1195: POP
1196: GO 1202
// end ;
1198: GO 1163
1200: POP
1201: POP
// end ;
1202: LD_VAR 0 3
1206: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1207: LD_INT 0
1209: PPUSH
1210: PPUSH
1211: PPUSH
1212: PPUSH
1213: PPUSH
1214: PPUSH
1215: PPUSH
1216: PPUSH
1217: PPUSH
1218: PPUSH
1219: PPUSH
1220: PPUSH
1221: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1222: LD_VAR 0 1
1226: NOT
1227: PUSH
1228: LD_VAR 0 1
1232: PPUSH
1233: CALL_OW 257
1237: PUSH
1238: LD_INT 9
1240: NONEQUAL
1241: OR
1242: IFFALSE 1246
// exit ;
1244: GO 1819
// side := GetSide ( unit ) ;
1246: LD_ADDR_VAR 0 9
1250: PUSH
1251: LD_VAR 0 1
1255: PPUSH
1256: CALL_OW 255
1260: ST_TO_ADDR
// tech_space := tech_spacanom ;
1261: LD_ADDR_VAR 0 12
1265: PUSH
1266: LD_INT 29
1268: ST_TO_ADDR
// tech_time := tech_taurad ;
1269: LD_ADDR_VAR 0 13
1273: PUSH
1274: LD_INT 28
1276: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1277: LD_ADDR_VAR 0 11
1281: PUSH
1282: LD_VAR 0 1
1286: PPUSH
1287: CALL_OW 310
1291: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1292: LD_VAR 0 11
1296: PPUSH
1297: CALL_OW 247
1301: PUSH
1302: LD_INT 2
1304: EQUAL
1305: IFFALSE 1309
// exit ;
1307: GO 1819
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1309: LD_ADDR_VAR 0 8
1313: PUSH
1314: LD_INT 81
1316: PUSH
1317: LD_VAR 0 9
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PUSH
1326: LD_INT 3
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 3
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PPUSH
1347: CALL_OW 69
1351: ST_TO_ADDR
// if not tmp then
1352: LD_VAR 0 8
1356: NOT
1357: IFFALSE 1361
// exit ;
1359: GO 1819
// if in_unit then
1361: LD_VAR 0 11
1365: IFFALSE 1389
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1367: LD_ADDR_VAR 0 10
1371: PUSH
1372: LD_VAR 0 8
1376: PPUSH
1377: LD_VAR 0 11
1381: PPUSH
1382: CALL_OW 74
1386: ST_TO_ADDR
1387: GO 1409
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1389: LD_ADDR_VAR 0 10
1393: PUSH
1394: LD_VAR 0 8
1398: PPUSH
1399: LD_VAR 0 1
1403: PPUSH
1404: CALL_OW 74
1408: ST_TO_ADDR
// if not enemy then
1409: LD_VAR 0 10
1413: NOT
1414: IFFALSE 1418
// exit ;
1416: GO 1819
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1418: LD_VAR 0 11
1422: PUSH
1423: LD_VAR 0 11
1427: PPUSH
1428: LD_VAR 0 10
1432: PPUSH
1433: CALL_OW 296
1437: PUSH
1438: LD_INT 13
1440: GREATER
1441: AND
1442: PUSH
1443: LD_VAR 0 1
1447: PPUSH
1448: LD_VAR 0 10
1452: PPUSH
1453: CALL_OW 296
1457: PUSH
1458: LD_INT 12
1460: GREATER
1461: OR
1462: IFFALSE 1466
// exit ;
1464: GO 1819
// missile := [ 1 ] ;
1466: LD_ADDR_VAR 0 14
1470: PUSH
1471: LD_INT 1
1473: PUSH
1474: EMPTY
1475: LIST
1476: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1477: LD_VAR 0 9
1481: PPUSH
1482: LD_VAR 0 12
1486: PPUSH
1487: CALL_OW 325
1491: IFFALSE 1520
// missile := Replace ( missile , missile + 1 , 2 ) ;
1493: LD_ADDR_VAR 0 14
1497: PUSH
1498: LD_VAR 0 14
1502: PPUSH
1503: LD_VAR 0 14
1507: PUSH
1508: LD_INT 1
1510: PLUS
1511: PPUSH
1512: LD_INT 2
1514: PPUSH
1515: CALL_OW 1
1519: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1520: LD_VAR 0 9
1524: PPUSH
1525: LD_VAR 0 13
1529: PPUSH
1530: CALL_OW 325
1534: PUSH
1535: LD_VAR 0 10
1539: PPUSH
1540: CALL_OW 255
1544: PPUSH
1545: LD_VAR 0 13
1549: PPUSH
1550: CALL_OW 325
1554: NOT
1555: AND
1556: IFFALSE 1585
// missile := Replace ( missile , missile + 1 , 3 ) ;
1558: LD_ADDR_VAR 0 14
1562: PUSH
1563: LD_VAR 0 14
1567: PPUSH
1568: LD_VAR 0 14
1572: PUSH
1573: LD_INT 1
1575: PLUS
1576: PPUSH
1577: LD_INT 3
1579: PPUSH
1580: CALL_OW 1
1584: ST_TO_ADDR
// if missile < 2 then
1585: LD_VAR 0 14
1589: PUSH
1590: LD_INT 2
1592: LESS
1593: IFFALSE 1597
// exit ;
1595: GO 1819
// x := GetX ( enemy ) ;
1597: LD_ADDR_VAR 0 4
1601: PUSH
1602: LD_VAR 0 10
1606: PPUSH
1607: CALL_OW 250
1611: ST_TO_ADDR
// y := GetY ( enemy ) ;
1612: LD_ADDR_VAR 0 5
1616: PUSH
1617: LD_VAR 0 10
1621: PPUSH
1622: CALL_OW 251
1626: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1627: LD_ADDR_VAR 0 6
1631: PUSH
1632: LD_VAR 0 4
1636: PUSH
1637: LD_INT 1
1639: NEG
1640: PPUSH
1641: LD_INT 1
1643: PPUSH
1644: CALL_OW 12
1648: PLUS
1649: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1650: LD_ADDR_VAR 0 7
1654: PUSH
1655: LD_VAR 0 5
1659: PUSH
1660: LD_INT 1
1662: NEG
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: CALL_OW 12
1671: PLUS
1672: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1673: LD_VAR 0 6
1677: PPUSH
1678: LD_VAR 0 7
1682: PPUSH
1683: CALL_OW 488
1687: NOT
1688: IFFALSE 1710
// begin _x := x ;
1690: LD_ADDR_VAR 0 6
1694: PUSH
1695: LD_VAR 0 4
1699: ST_TO_ADDR
// _y := y ;
1700: LD_ADDR_VAR 0 7
1704: PUSH
1705: LD_VAR 0 5
1709: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1710: LD_ADDR_VAR 0 3
1714: PUSH
1715: LD_INT 1
1717: PPUSH
1718: LD_VAR 0 14
1722: PPUSH
1723: CALL_OW 12
1727: ST_TO_ADDR
// case i of 1 :
1728: LD_VAR 0 3
1732: PUSH
1733: LD_INT 1
1735: DOUBLE
1736: EQUAL
1737: IFTRUE 1741
1739: GO 1758
1741: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1742: LD_VAR 0 1
1746: PPUSH
1747: LD_VAR 0 10
1751: PPUSH
1752: CALL_OW 115
1756: GO 1819
1758: LD_INT 2
1760: DOUBLE
1761: EQUAL
1762: IFTRUE 1766
1764: GO 1788
1766: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1767: LD_VAR 0 1
1771: PPUSH
1772: LD_VAR 0 6
1776: PPUSH
1777: LD_VAR 0 7
1781: PPUSH
1782: CALL_OW 153
1786: GO 1819
1788: LD_INT 3
1790: DOUBLE
1791: EQUAL
1792: IFTRUE 1796
1794: GO 1818
1796: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1797: LD_VAR 0 1
1801: PPUSH
1802: LD_VAR 0 6
1806: PPUSH
1807: LD_VAR 0 7
1811: PPUSH
1812: CALL_OW 154
1816: GO 1819
1818: POP
// end ;
1819: LD_VAR 0 2
1823: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1824: LD_INT 0
1826: PPUSH
1827: PPUSH
1828: PPUSH
1829: PPUSH
1830: PPUSH
1831: PPUSH
// if not unit or not building then
1832: LD_VAR 0 1
1836: NOT
1837: PUSH
1838: LD_VAR 0 2
1842: NOT
1843: OR
1844: IFFALSE 1848
// exit ;
1846: GO 2006
// x := GetX ( building ) ;
1848: LD_ADDR_VAR 0 5
1852: PUSH
1853: LD_VAR 0 2
1857: PPUSH
1858: CALL_OW 250
1862: ST_TO_ADDR
// y := GetY ( building ) ;
1863: LD_ADDR_VAR 0 6
1867: PUSH
1868: LD_VAR 0 2
1872: PPUSH
1873: CALL_OW 251
1877: ST_TO_ADDR
// for i = 0 to 5 do
1878: LD_ADDR_VAR 0 4
1882: PUSH
1883: DOUBLE
1884: LD_INT 0
1886: DEC
1887: ST_TO_ADDR
1888: LD_INT 5
1890: PUSH
1891: FOR_TO
1892: IFFALSE 2004
// begin _x := ShiftX ( x , i , 3 ) ;
1894: LD_ADDR_VAR 0 7
1898: PUSH
1899: LD_VAR 0 5
1903: PPUSH
1904: LD_VAR 0 4
1908: PPUSH
1909: LD_INT 3
1911: PPUSH
1912: CALL_OW 272
1916: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1917: LD_ADDR_VAR 0 8
1921: PUSH
1922: LD_VAR 0 6
1926: PPUSH
1927: LD_VAR 0 4
1931: PPUSH
1932: LD_INT 3
1934: PPUSH
1935: CALL_OW 273
1939: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1940: LD_VAR 0 7
1944: PPUSH
1945: LD_VAR 0 8
1949: PPUSH
1950: CALL_OW 488
1954: NOT
1955: IFFALSE 1959
// continue ;
1957: GO 1891
// if HexInfo ( _x , _y ) = 0 then
1959: LD_VAR 0 7
1963: PPUSH
1964: LD_VAR 0 8
1968: PPUSH
1969: CALL_OW 428
1973: PUSH
1974: LD_INT 0
1976: EQUAL
1977: IFFALSE 2002
// begin ComMoveXY ( unit , _x , _y ) ;
1979: LD_VAR 0 1
1983: PPUSH
1984: LD_VAR 0 7
1988: PPUSH
1989: LD_VAR 0 8
1993: PPUSH
1994: CALL_OW 111
// exit ;
1998: POP
1999: POP
2000: GO 2006
// end ; end ;
2002: GO 1891
2004: POP
2005: POP
// end ;
2006: LD_VAR 0 3
2010: RET
// export function ScanBase ( side , base_area ) ; begin
2011: LD_INT 0
2013: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2014: LD_ADDR_VAR 0 3
2018: PUSH
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 81
2026: PUSH
2027: LD_VAR 0 1
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PPUSH
2036: CALL_OW 70
2040: ST_TO_ADDR
// end ;
2041: LD_VAR 0 3
2045: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2046: LD_INT 0
2048: PPUSH
2049: PPUSH
2050: PPUSH
2051: PPUSH
// result := false ;
2052: LD_ADDR_VAR 0 2
2056: PUSH
2057: LD_INT 0
2059: ST_TO_ADDR
// side := GetSide ( unit ) ;
2060: LD_ADDR_VAR 0 3
2064: PUSH
2065: LD_VAR 0 1
2069: PPUSH
2070: CALL_OW 255
2074: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2075: LD_ADDR_VAR 0 4
2079: PUSH
2080: LD_VAR 0 1
2084: PPUSH
2085: CALL_OW 248
2089: ST_TO_ADDR
// case nat of 1 :
2090: LD_VAR 0 4
2094: PUSH
2095: LD_INT 1
2097: DOUBLE
2098: EQUAL
2099: IFTRUE 2103
2101: GO 2114
2103: POP
// tech := tech_lassight ; 2 :
2104: LD_ADDR_VAR 0 5
2108: PUSH
2109: LD_INT 12
2111: ST_TO_ADDR
2112: GO 2153
2114: LD_INT 2
2116: DOUBLE
2117: EQUAL
2118: IFTRUE 2122
2120: GO 2133
2122: POP
// tech := tech_mortar ; 3 :
2123: LD_ADDR_VAR 0 5
2127: PUSH
2128: LD_INT 41
2130: ST_TO_ADDR
2131: GO 2153
2133: LD_INT 3
2135: DOUBLE
2136: EQUAL
2137: IFTRUE 2141
2139: GO 2152
2141: POP
// tech := tech_bazooka ; end ;
2142: LD_ADDR_VAR 0 5
2146: PUSH
2147: LD_INT 44
2149: ST_TO_ADDR
2150: GO 2153
2152: POP
// if Researched ( side , tech ) then
2153: LD_VAR 0 3
2157: PPUSH
2158: LD_VAR 0 5
2162: PPUSH
2163: CALL_OW 325
2167: IFFALSE 2194
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2169: LD_ADDR_VAR 0 2
2173: PUSH
2174: LD_INT 5
2176: PUSH
2177: LD_INT 8
2179: PUSH
2180: LD_INT 9
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_VAR 0 4
2192: ARRAY
2193: ST_TO_ADDR
// end ;
2194: LD_VAR 0 2
2198: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
// if not mines then
2204: LD_VAR 0 2
2208: NOT
2209: IFFALSE 2213
// exit ;
2211: GO 2357
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2213: LD_ADDR_VAR 0 5
2217: PUSH
2218: LD_INT 81
2220: PUSH
2221: LD_VAR 0 1
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: LD_INT 3
2232: PUSH
2233: LD_INT 21
2235: PUSH
2236: LD_INT 3
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: PPUSH
2251: CALL_OW 69
2255: ST_TO_ADDR
// for i in mines do
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_VAR 0 2
2265: PUSH
2266: FOR_IN
2267: IFFALSE 2355
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2269: LD_VAR 0 4
2273: PUSH
2274: LD_INT 1
2276: ARRAY
2277: PPUSH
2278: LD_VAR 0 4
2282: PUSH
2283: LD_INT 2
2285: ARRAY
2286: PPUSH
2287: CALL_OW 458
2291: NOT
2292: IFFALSE 2296
// continue ;
2294: GO 2266
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2296: LD_VAR 0 4
2300: PUSH
2301: LD_INT 1
2303: ARRAY
2304: PPUSH
2305: LD_VAR 0 4
2309: PUSH
2310: LD_INT 2
2312: ARRAY
2313: PPUSH
2314: CALL_OW 428
2318: PUSH
2319: LD_VAR 0 5
2323: IN
2324: IFFALSE 2353
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2326: LD_VAR 0 4
2330: PUSH
2331: LD_INT 1
2333: ARRAY
2334: PPUSH
2335: LD_VAR 0 4
2339: PUSH
2340: LD_INT 2
2342: ARRAY
2343: PPUSH
2344: LD_VAR 0 1
2348: PPUSH
2349: CALL_OW 456
// end ;
2353: GO 2266
2355: POP
2356: POP
// end ;
2357: LD_VAR 0 3
2361: RET
// export function Count ( array ) ; begin
2362: LD_INT 0
2364: PPUSH
// result := array + 0 ;
2365: LD_ADDR_VAR 0 2
2369: PUSH
2370: LD_VAR 0 1
2374: PUSH
2375: LD_INT 0
2377: PLUS
2378: ST_TO_ADDR
// end ;
2379: LD_VAR 0 2
2383: RET
// export function IsEmpty ( building ) ; begin
2384: LD_INT 0
2386: PPUSH
// if not building then
2387: LD_VAR 0 1
2391: NOT
2392: IFFALSE 2396
// exit ;
2394: GO 2439
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: LD_VAR 0 1
2405: PUSH
2406: LD_INT 22
2408: PUSH
2409: LD_VAR 0 1
2413: PPUSH
2414: CALL_OW 255
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 58
2425: PUSH
2426: EMPTY
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PPUSH
2433: CALL_OW 69
2437: IN
2438: ST_TO_ADDR
// end ;
2439: LD_VAR 0 2
2443: RET
// export function IsNotFull ( building ) ; var places ; begin
2444: LD_INT 0
2446: PPUSH
2447: PPUSH
// if not building then
2448: LD_VAR 0 1
2452: NOT
2453: IFFALSE 2457
// exit ;
2455: GO 2485
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2457: LD_ADDR_VAR 0 2
2461: PUSH
2462: LD_VAR 0 1
2466: PPUSH
2467: LD_INT 3
2469: PUSH
2470: LD_INT 62
2472: PUSH
2473: EMPTY
2474: LIST
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PPUSH
2480: CALL_OW 72
2484: ST_TO_ADDR
// end ;
2485: LD_VAR 0 2
2489: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2490: LD_INT 0
2492: PPUSH
2493: PPUSH
2494: PPUSH
2495: PPUSH
// tmp := [ ] ;
2496: LD_ADDR_VAR 0 3
2500: PUSH
2501: EMPTY
2502: ST_TO_ADDR
// list := [ ] ;
2503: LD_ADDR_VAR 0 5
2507: PUSH
2508: EMPTY
2509: ST_TO_ADDR
// for i = 16 to 25 do
2510: LD_ADDR_VAR 0 4
2514: PUSH
2515: DOUBLE
2516: LD_INT 16
2518: DEC
2519: ST_TO_ADDR
2520: LD_INT 25
2522: PUSH
2523: FOR_TO
2524: IFFALSE 2597
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2526: LD_ADDR_VAR 0 3
2530: PUSH
2531: LD_VAR 0 3
2535: PUSH
2536: LD_INT 22
2538: PUSH
2539: LD_VAR 0 1
2543: PPUSH
2544: CALL_OW 255
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PUSH
2553: LD_INT 91
2555: PUSH
2556: LD_VAR 0 1
2560: PUSH
2561: LD_INT 6
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 30
2571: PUSH
2572: LD_VAR 0 4
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: ADD
2594: ST_TO_ADDR
2595: GO 2523
2597: POP
2598: POP
// for i = 1 to tmp do
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: DOUBLE
2605: LD_INT 1
2607: DEC
2608: ST_TO_ADDR
2609: LD_VAR 0 3
2613: PUSH
2614: FOR_TO
2615: IFFALSE 2703
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2617: LD_ADDR_VAR 0 5
2621: PUSH
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 3
2631: PUSH
2632: LD_VAR 0 4
2636: ARRAY
2637: PPUSH
2638: CALL_OW 266
2642: PUSH
2643: LD_VAR 0 3
2647: PUSH
2648: LD_VAR 0 4
2652: ARRAY
2653: PPUSH
2654: CALL_OW 250
2658: PUSH
2659: LD_VAR 0 3
2663: PUSH
2664: LD_VAR 0 4
2668: ARRAY
2669: PPUSH
2670: CALL_OW 251
2674: PUSH
2675: LD_VAR 0 3
2679: PUSH
2680: LD_VAR 0 4
2684: ARRAY
2685: PPUSH
2686: CALL_OW 254
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: LIST
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: ADD
2700: ST_TO_ADDR
2701: GO 2614
2703: POP
2704: POP
// result := list ;
2705: LD_ADDR_VAR 0 2
2709: PUSH
2710: LD_VAR 0 5
2714: ST_TO_ADDR
// end ;
2715: LD_VAR 0 2
2719: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2720: LD_INT 0
2722: PPUSH
2723: PPUSH
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
// if not factory then
2729: LD_VAR 0 1
2733: NOT
2734: IFFALSE 2738
// exit ;
2736: GO 3331
// if control = control_apeman then
2738: LD_VAR 0 4
2742: PUSH
2743: LD_INT 5
2745: EQUAL
2746: IFFALSE 2855
// begin tmp := UnitsInside ( factory ) ;
2748: LD_ADDR_VAR 0 8
2752: PUSH
2753: LD_VAR 0 1
2757: PPUSH
2758: CALL_OW 313
2762: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2763: LD_VAR 0 8
2767: PPUSH
2768: LD_INT 25
2770: PUSH
2771: LD_INT 12
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PPUSH
2778: CALL_OW 72
2782: NOT
2783: IFFALSE 2793
// control := control_manual ;
2785: LD_ADDR_VAR 0 4
2789: PUSH
2790: LD_INT 1
2792: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2793: LD_ADDR_VAR 0 8
2797: PUSH
2798: LD_VAR 0 1
2802: PPUSH
2803: CALL 2490 0 1
2807: ST_TO_ADDR
// if tmp then
2808: LD_VAR 0 8
2812: IFFALSE 2855
// begin for i in tmp do
2814: LD_ADDR_VAR 0 7
2818: PUSH
2819: LD_VAR 0 8
2823: PUSH
2824: FOR_IN
2825: IFFALSE 2853
// if i [ 1 ] = b_ext_radio then
2827: LD_VAR 0 7
2831: PUSH
2832: LD_INT 1
2834: ARRAY
2835: PUSH
2836: LD_INT 22
2838: EQUAL
2839: IFFALSE 2851
// begin control := control_remote ;
2841: LD_ADDR_VAR 0 4
2845: PUSH
2846: LD_INT 2
2848: ST_TO_ADDR
// break ;
2849: GO 2853
// end ;
2851: GO 2824
2853: POP
2854: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2855: LD_VAR 0 1
2859: PPUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: LD_VAR 0 3
2869: PPUSH
2870: LD_VAR 0 4
2874: PPUSH
2875: LD_VAR 0 5
2879: PPUSH
2880: CALL_OW 448
2884: IFFALSE 2919
// begin result := [ chassis , engine , control , weapon ] ;
2886: LD_ADDR_VAR 0 6
2890: PUSH
2891: LD_VAR 0 2
2895: PUSH
2896: LD_VAR 0 3
2900: PUSH
2901: LD_VAR 0 4
2905: PUSH
2906: LD_VAR 0 5
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: ST_TO_ADDR
// exit ;
2917: GO 3331
// end ; _chassis := AvailableChassisList ( factory ) ;
2919: LD_ADDR_VAR 0 9
2923: PUSH
2924: LD_VAR 0 1
2928: PPUSH
2929: CALL_OW 475
2933: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2934: LD_ADDR_VAR 0 11
2938: PUSH
2939: LD_VAR 0 1
2943: PPUSH
2944: CALL_OW 476
2948: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2949: LD_ADDR_VAR 0 12
2953: PUSH
2954: LD_VAR 0 1
2958: PPUSH
2959: CALL_OW 477
2963: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2964: LD_ADDR_VAR 0 10
2968: PUSH
2969: LD_VAR 0 1
2973: PPUSH
2974: CALL_OW 478
2978: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
2979: LD_VAR 0 9
2983: NOT
2984: PUSH
2985: LD_VAR 0 11
2989: NOT
2990: OR
2991: PUSH
2992: LD_VAR 0 12
2996: NOT
2997: OR
2998: PUSH
2999: LD_VAR 0 10
3003: NOT
3004: OR
3005: IFFALSE 3040
// begin result := [ chassis , engine , control , weapon ] ;
3007: LD_ADDR_VAR 0 6
3011: PUSH
3012: LD_VAR 0 2
3016: PUSH
3017: LD_VAR 0 3
3021: PUSH
3022: LD_VAR 0 4
3026: PUSH
3027: LD_VAR 0 5
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: ST_TO_ADDR
// exit ;
3038: GO 3331
// end ; if not chassis in _chassis then
3040: LD_VAR 0 2
3044: PUSH
3045: LD_VAR 0 9
3049: IN
3050: NOT
3051: IFFALSE 3077
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3053: LD_ADDR_VAR 0 2
3057: PUSH
3058: LD_VAR 0 9
3062: PUSH
3063: LD_INT 1
3065: PPUSH
3066: LD_VAR 0 9
3070: PPUSH
3071: CALL_OW 12
3075: ARRAY
3076: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3077: LD_VAR 0 2
3081: PPUSH
3082: LD_VAR 0 3
3086: PPUSH
3087: CALL 3336 0 2
3091: NOT
3092: IFFALSE 3151
// repeat engine := _engine [ 1 ] ;
3094: LD_ADDR_VAR 0 3
3098: PUSH
3099: LD_VAR 0 11
3103: PUSH
3104: LD_INT 1
3106: ARRAY
3107: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3108: LD_ADDR_VAR 0 11
3112: PUSH
3113: LD_VAR 0 11
3117: PPUSH
3118: LD_INT 1
3120: PPUSH
3121: CALL_OW 3
3125: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3126: LD_VAR 0 2
3130: PPUSH
3131: LD_VAR 0 3
3135: PPUSH
3136: CALL 3336 0 2
3140: PUSH
3141: LD_VAR 0 11
3145: PUSH
3146: EMPTY
3147: EQUAL
3148: OR
3149: IFFALSE 3094
// if not control in _control then
3151: LD_VAR 0 4
3155: PUSH
3156: LD_VAR 0 12
3160: IN
3161: NOT
3162: IFFALSE 3188
// control := _control [ rand ( 1 , _control ) ] ;
3164: LD_ADDR_VAR 0 4
3168: PUSH
3169: LD_VAR 0 12
3173: PUSH
3174: LD_INT 1
3176: PPUSH
3177: LD_VAR 0 12
3181: PPUSH
3182: CALL_OW 12
3186: ARRAY
3187: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3188: LD_VAR 0 2
3192: PPUSH
3193: LD_VAR 0 5
3197: PPUSH
3198: CALL 3556 0 2
3202: NOT
3203: IFFALSE 3262
// repeat weapon := _weapon [ 1 ] ;
3205: LD_ADDR_VAR 0 5
3209: PUSH
3210: LD_VAR 0 10
3214: PUSH
3215: LD_INT 1
3217: ARRAY
3218: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3219: LD_ADDR_VAR 0 10
3223: PUSH
3224: LD_VAR 0 10
3228: PPUSH
3229: LD_INT 1
3231: PPUSH
3232: CALL_OW 3
3236: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3237: LD_VAR 0 2
3241: PPUSH
3242: LD_VAR 0 5
3246: PPUSH
3247: CALL 3556 0 2
3251: PUSH
3252: LD_VAR 0 10
3256: PUSH
3257: EMPTY
3258: EQUAL
3259: OR
3260: IFFALSE 3205
// result := [ ] ;
3262: LD_ADDR_VAR 0 6
3266: PUSH
3267: EMPTY
3268: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3269: LD_VAR 0 1
3273: PPUSH
3274: LD_VAR 0 2
3278: PPUSH
3279: LD_VAR 0 3
3283: PPUSH
3284: LD_VAR 0 4
3288: PPUSH
3289: LD_VAR 0 5
3293: PPUSH
3294: CALL_OW 448
3298: IFFALSE 3331
// result := [ chassis , engine , control , weapon ] ;
3300: LD_ADDR_VAR 0 6
3304: PUSH
3305: LD_VAR 0 2
3309: PUSH
3310: LD_VAR 0 3
3314: PUSH
3315: LD_VAR 0 4
3319: PUSH
3320: LD_VAR 0 5
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: ST_TO_ADDR
// end ;
3331: LD_VAR 0 6
3335: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3336: LD_INT 0
3338: PPUSH
// if not chassis or not engine then
3339: LD_VAR 0 1
3343: NOT
3344: PUSH
3345: LD_VAR 0 2
3349: NOT
3350: OR
3351: IFFALSE 3355
// exit ;
3353: GO 3551
// case engine of engine_solar :
3355: LD_VAR 0 2
3359: PUSH
3360: LD_INT 2
3362: DOUBLE
3363: EQUAL
3364: IFTRUE 3368
3366: GO 3406
3368: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3369: LD_ADDR_VAR 0 3
3373: PUSH
3374: LD_INT 11
3376: PUSH
3377: LD_INT 12
3379: PUSH
3380: LD_INT 13
3382: PUSH
3383: LD_INT 14
3385: PUSH
3386: LD_INT 1
3388: PUSH
3389: LD_INT 2
3391: PUSH
3392: LD_INT 3
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: ST_TO_ADDR
3404: GO 3535
3406: LD_INT 1
3408: DOUBLE
3409: EQUAL
3410: IFTRUE 3414
3412: GO 3476
3414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3415: LD_ADDR_VAR 0 3
3419: PUSH
3420: LD_INT 11
3422: PUSH
3423: LD_INT 12
3425: PUSH
3426: LD_INT 13
3428: PUSH
3429: LD_INT 14
3431: PUSH
3432: LD_INT 1
3434: PUSH
3435: LD_INT 2
3437: PUSH
3438: LD_INT 3
3440: PUSH
3441: LD_INT 4
3443: PUSH
3444: LD_INT 5
3446: PUSH
3447: LD_INT 21
3449: PUSH
3450: LD_INT 23
3452: PUSH
3453: LD_INT 22
3455: PUSH
3456: LD_INT 24
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: ST_TO_ADDR
3474: GO 3535
3476: LD_INT 3
3478: DOUBLE
3479: EQUAL
3480: IFTRUE 3484
3482: GO 3534
3484: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3485: LD_ADDR_VAR 0 3
3489: PUSH
3490: LD_INT 13
3492: PUSH
3493: LD_INT 14
3495: PUSH
3496: LD_INT 2
3498: PUSH
3499: LD_INT 3
3501: PUSH
3502: LD_INT 4
3504: PUSH
3505: LD_INT 5
3507: PUSH
3508: LD_INT 21
3510: PUSH
3511: LD_INT 22
3513: PUSH
3514: LD_INT 23
3516: PUSH
3517: LD_INT 24
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: ST_TO_ADDR
3532: GO 3535
3534: POP
// result := ( chassis in result ) ;
3535: LD_ADDR_VAR 0 3
3539: PUSH
3540: LD_VAR 0 1
3544: PUSH
3545: LD_VAR 0 3
3549: IN
3550: ST_TO_ADDR
// end ;
3551: LD_VAR 0 3
3555: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3556: LD_INT 0
3558: PPUSH
// if not chassis or not weapon then
3559: LD_VAR 0 1
3563: NOT
3564: PUSH
3565: LD_VAR 0 2
3569: NOT
3570: OR
3571: IFFALSE 3575
// exit ;
3573: GO 4635
// case weapon of us_machine_gun :
3575: LD_VAR 0 2
3579: PUSH
3580: LD_INT 2
3582: DOUBLE
3583: EQUAL
3584: IFTRUE 3588
3586: GO 3618
3588: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3589: LD_ADDR_VAR 0 3
3593: PUSH
3594: LD_INT 1
3596: PUSH
3597: LD_INT 2
3599: PUSH
3600: LD_INT 3
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: LD_INT 5
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: ST_TO_ADDR
3616: GO 4619
3618: LD_INT 3
3620: DOUBLE
3621: EQUAL
3622: IFTRUE 3626
3624: GO 3656
3626: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3627: LD_ADDR_VAR 0 3
3631: PUSH
3632: LD_INT 1
3634: PUSH
3635: LD_INT 2
3637: PUSH
3638: LD_INT 3
3640: PUSH
3641: LD_INT 4
3643: PUSH
3644: LD_INT 5
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: ST_TO_ADDR
3654: GO 4619
3656: LD_INT 11
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3664
3662: GO 3694
3664: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3665: LD_ADDR_VAR 0 3
3669: PUSH
3670: LD_INT 1
3672: PUSH
3673: LD_INT 2
3675: PUSH
3676: LD_INT 3
3678: PUSH
3679: LD_INT 4
3681: PUSH
3682: LD_INT 5
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: ST_TO_ADDR
3692: GO 4619
3694: LD_INT 4
3696: DOUBLE
3697: EQUAL
3698: IFTRUE 3702
3700: GO 3728
3702: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3703: LD_ADDR_VAR 0 3
3707: PUSH
3708: LD_INT 2
3710: PUSH
3711: LD_INT 3
3713: PUSH
3714: LD_INT 4
3716: PUSH
3717: LD_INT 5
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: ST_TO_ADDR
3726: GO 4619
3728: LD_INT 5
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3736
3734: GO 3762
3736: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3737: LD_ADDR_VAR 0 3
3741: PUSH
3742: LD_INT 2
3744: PUSH
3745: LD_INT 3
3747: PUSH
3748: LD_INT 4
3750: PUSH
3751: LD_INT 5
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: ST_TO_ADDR
3760: GO 4619
3762: LD_INT 9
3764: DOUBLE
3765: EQUAL
3766: IFTRUE 3770
3768: GO 3796
3770: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3771: LD_ADDR_VAR 0 3
3775: PUSH
3776: LD_INT 2
3778: PUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: LD_INT 5
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: ST_TO_ADDR
3794: GO 4619
3796: LD_INT 7
3798: DOUBLE
3799: EQUAL
3800: IFTRUE 3804
3802: GO 3830
3804: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3805: LD_ADDR_VAR 0 3
3809: PUSH
3810: LD_INT 2
3812: PUSH
3813: LD_INT 3
3815: PUSH
3816: LD_INT 4
3818: PUSH
3819: LD_INT 5
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: ST_TO_ADDR
3828: GO 4619
3830: LD_INT 12
3832: DOUBLE
3833: EQUAL
3834: IFTRUE 3838
3836: GO 3864
3838: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3839: LD_ADDR_VAR 0 3
3843: PUSH
3844: LD_INT 2
3846: PUSH
3847: LD_INT 3
3849: PUSH
3850: LD_INT 4
3852: PUSH
3853: LD_INT 5
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: ST_TO_ADDR
3862: GO 4619
3864: LD_INT 13
3866: DOUBLE
3867: EQUAL
3868: IFTRUE 3872
3870: GO 3898
3872: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3873: LD_ADDR_VAR 0 3
3877: PUSH
3878: LD_INT 2
3880: PUSH
3881: LD_INT 3
3883: PUSH
3884: LD_INT 4
3886: PUSH
3887: LD_INT 5
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: ST_TO_ADDR
3896: GO 4619
3898: LD_INT 14
3900: DOUBLE
3901: EQUAL
3902: IFTRUE 3906
3904: GO 3924
3906: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3907: LD_ADDR_VAR 0 3
3911: PUSH
3912: LD_INT 4
3914: PUSH
3915: LD_INT 5
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: ST_TO_ADDR
3922: GO 4619
3924: LD_INT 6
3926: DOUBLE
3927: EQUAL
3928: IFTRUE 3932
3930: GO 3950
3932: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3933: LD_ADDR_VAR 0 3
3937: PUSH
3938: LD_INT 4
3940: PUSH
3941: LD_INT 5
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: ST_TO_ADDR
3948: GO 4619
3950: LD_INT 10
3952: DOUBLE
3953: EQUAL
3954: IFTRUE 3958
3956: GO 3976
3958: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3959: LD_ADDR_VAR 0 3
3963: PUSH
3964: LD_INT 4
3966: PUSH
3967: LD_INT 5
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: ST_TO_ADDR
3974: GO 4619
3976: LD_INT 22
3978: DOUBLE
3979: EQUAL
3980: IFTRUE 3984
3982: GO 4010
3984: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: LD_INT 11
3992: PUSH
3993: LD_INT 12
3995: PUSH
3996: LD_INT 13
3998: PUSH
3999: LD_INT 14
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: ST_TO_ADDR
4008: GO 4619
4010: LD_INT 23
4012: DOUBLE
4013: EQUAL
4014: IFTRUE 4018
4016: GO 4044
4018: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4019: LD_ADDR_VAR 0 3
4023: PUSH
4024: LD_INT 11
4026: PUSH
4027: LD_INT 12
4029: PUSH
4030: LD_INT 13
4032: PUSH
4033: LD_INT 14
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: ST_TO_ADDR
4042: GO 4619
4044: LD_INT 24
4046: DOUBLE
4047: EQUAL
4048: IFTRUE 4052
4050: GO 4078
4052: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4053: LD_ADDR_VAR 0 3
4057: PUSH
4058: LD_INT 11
4060: PUSH
4061: LD_INT 12
4063: PUSH
4064: LD_INT 13
4066: PUSH
4067: LD_INT 14
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: ST_TO_ADDR
4076: GO 4619
4078: LD_INT 30
4080: DOUBLE
4081: EQUAL
4082: IFTRUE 4086
4084: GO 4112
4086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: LD_INT 11
4094: PUSH
4095: LD_INT 12
4097: PUSH
4098: LD_INT 13
4100: PUSH
4101: LD_INT 14
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: ST_TO_ADDR
4110: GO 4619
4112: LD_INT 25
4114: DOUBLE
4115: EQUAL
4116: IFTRUE 4120
4118: GO 4138
4120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4121: LD_ADDR_VAR 0 3
4125: PUSH
4126: LD_INT 13
4128: PUSH
4129: LD_INT 14
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: ST_TO_ADDR
4136: GO 4619
4138: LD_INT 27
4140: DOUBLE
4141: EQUAL
4142: IFTRUE 4146
4144: GO 4164
4146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4147: LD_ADDR_VAR 0 3
4151: PUSH
4152: LD_INT 13
4154: PUSH
4155: LD_INT 14
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: ST_TO_ADDR
4162: GO 4619
4164: LD_INT 92
4166: DOUBLE
4167: EQUAL
4168: IFTRUE 4172
4170: GO 4198
4172: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 11
4180: PUSH
4181: LD_INT 12
4183: PUSH
4184: LD_INT 13
4186: PUSH
4187: LD_INT 14
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: ST_TO_ADDR
4196: GO 4619
4198: LD_INT 28
4200: DOUBLE
4201: EQUAL
4202: IFTRUE 4206
4204: GO 4224
4206: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4207: LD_ADDR_VAR 0 3
4211: PUSH
4212: LD_INT 13
4214: PUSH
4215: LD_INT 14
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: ST_TO_ADDR
4222: GO 4619
4224: LD_INT 29
4226: DOUBLE
4227: EQUAL
4228: IFTRUE 4232
4230: GO 4250
4232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4233: LD_ADDR_VAR 0 3
4237: PUSH
4238: LD_INT 13
4240: PUSH
4241: LD_INT 14
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: ST_TO_ADDR
4248: GO 4619
4250: LD_INT 31
4252: DOUBLE
4253: EQUAL
4254: IFTRUE 4258
4256: GO 4276
4258: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4259: LD_ADDR_VAR 0 3
4263: PUSH
4264: LD_INT 13
4266: PUSH
4267: LD_INT 14
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: ST_TO_ADDR
4274: GO 4619
4276: LD_INT 26
4278: DOUBLE
4279: EQUAL
4280: IFTRUE 4284
4282: GO 4302
4284: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4285: LD_ADDR_VAR 0 3
4289: PUSH
4290: LD_INT 13
4292: PUSH
4293: LD_INT 14
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: ST_TO_ADDR
4300: GO 4619
4302: LD_INT 42
4304: DOUBLE
4305: EQUAL
4306: IFTRUE 4310
4308: GO 4336
4310: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4311: LD_ADDR_VAR 0 3
4315: PUSH
4316: LD_INT 21
4318: PUSH
4319: LD_INT 22
4321: PUSH
4322: LD_INT 23
4324: PUSH
4325: LD_INT 24
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: ST_TO_ADDR
4334: GO 4619
4336: LD_INT 43
4338: DOUBLE
4339: EQUAL
4340: IFTRUE 4344
4342: GO 4370
4344: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4345: LD_ADDR_VAR 0 3
4349: PUSH
4350: LD_INT 21
4352: PUSH
4353: LD_INT 22
4355: PUSH
4356: LD_INT 23
4358: PUSH
4359: LD_INT 24
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: ST_TO_ADDR
4368: GO 4619
4370: LD_INT 44
4372: DOUBLE
4373: EQUAL
4374: IFTRUE 4378
4376: GO 4404
4378: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4379: LD_ADDR_VAR 0 3
4383: PUSH
4384: LD_INT 21
4386: PUSH
4387: LD_INT 22
4389: PUSH
4390: LD_INT 23
4392: PUSH
4393: LD_INT 24
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: ST_TO_ADDR
4402: GO 4619
4404: LD_INT 45
4406: DOUBLE
4407: EQUAL
4408: IFTRUE 4412
4410: GO 4438
4412: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4413: LD_ADDR_VAR 0 3
4417: PUSH
4418: LD_INT 21
4420: PUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 23
4426: PUSH
4427: LD_INT 24
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: ST_TO_ADDR
4436: GO 4619
4438: LD_INT 49
4440: DOUBLE
4441: EQUAL
4442: IFTRUE 4446
4444: GO 4472
4446: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4447: LD_ADDR_VAR 0 3
4451: PUSH
4452: LD_INT 21
4454: PUSH
4455: LD_INT 22
4457: PUSH
4458: LD_INT 23
4460: PUSH
4461: LD_INT 24
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: ST_TO_ADDR
4470: GO 4619
4472: LD_INT 51
4474: DOUBLE
4475: EQUAL
4476: IFTRUE 4480
4478: GO 4506
4480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: LD_INT 21
4488: PUSH
4489: LD_INT 22
4491: PUSH
4492: LD_INT 23
4494: PUSH
4495: LD_INT 24
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: ST_TO_ADDR
4504: GO 4619
4506: LD_INT 52
4508: DOUBLE
4509: EQUAL
4510: IFTRUE 4514
4512: GO 4540
4514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4515: LD_ADDR_VAR 0 3
4519: PUSH
4520: LD_INT 21
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 23
4528: PUSH
4529: LD_INT 24
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: ST_TO_ADDR
4538: GO 4619
4540: LD_INT 53
4542: DOUBLE
4543: EQUAL
4544: IFTRUE 4548
4546: GO 4566
4548: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4549: LD_ADDR_VAR 0 3
4553: PUSH
4554: LD_INT 23
4556: PUSH
4557: LD_INT 24
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: ST_TO_ADDR
4564: GO 4619
4566: LD_INT 46
4568: DOUBLE
4569: EQUAL
4570: IFTRUE 4574
4572: GO 4592
4574: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: LD_INT 23
4582: PUSH
4583: LD_INT 24
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: ST_TO_ADDR
4590: GO 4619
4592: LD_INT 47
4594: DOUBLE
4595: EQUAL
4596: IFTRUE 4600
4598: GO 4618
4600: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4601: LD_ADDR_VAR 0 3
4605: PUSH
4606: LD_INT 23
4608: PUSH
4609: LD_INT 24
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: ST_TO_ADDR
4616: GO 4619
4618: POP
// result := ( chassis in result ) ;
4619: LD_ADDR_VAR 0 3
4623: PUSH
4624: LD_VAR 0 1
4628: PUSH
4629: LD_VAR 0 3
4633: IN
4634: ST_TO_ADDR
// end ;
4635: LD_VAR 0 3
4639: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4640: LD_INT 0
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
// result := array ;
4649: LD_ADDR_VAR 0 5
4653: PUSH
4654: LD_VAR 0 1
4658: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4659: LD_VAR 0 1
4663: NOT
4664: PUSH
4665: LD_VAR 0 2
4669: NOT
4670: OR
4671: PUSH
4672: LD_VAR 0 3
4676: NOT
4677: OR
4678: PUSH
4679: LD_VAR 0 2
4683: PUSH
4684: LD_VAR 0 1
4688: GREATER
4689: OR
4690: PUSH
4691: LD_VAR 0 3
4695: PUSH
4696: LD_VAR 0 1
4700: GREATER
4701: OR
4702: IFFALSE 4706
// exit ;
4704: GO 5002
// if direction then
4706: LD_VAR 0 4
4710: IFFALSE 4774
// begin d := 1 ;
4712: LD_ADDR_VAR 0 9
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// if i_from > i_to then
4720: LD_VAR 0 2
4724: PUSH
4725: LD_VAR 0 3
4729: GREATER
4730: IFFALSE 4756
// length := ( array - i_from ) + i_to else
4732: LD_ADDR_VAR 0 11
4736: PUSH
4737: LD_VAR 0 1
4741: PUSH
4742: LD_VAR 0 2
4746: MINUS
4747: PUSH
4748: LD_VAR 0 3
4752: PLUS
4753: ST_TO_ADDR
4754: GO 4772
// length := i_to - i_from ;
4756: LD_ADDR_VAR 0 11
4760: PUSH
4761: LD_VAR 0 3
4765: PUSH
4766: LD_VAR 0 2
4770: MINUS
4771: ST_TO_ADDR
// end else
4772: GO 4835
// begin d := - 1 ;
4774: LD_ADDR_VAR 0 9
4778: PUSH
4779: LD_INT 1
4781: NEG
4782: ST_TO_ADDR
// if i_from > i_to then
4783: LD_VAR 0 2
4787: PUSH
4788: LD_VAR 0 3
4792: GREATER
4793: IFFALSE 4813
// length := i_from - i_to else
4795: LD_ADDR_VAR 0 11
4799: PUSH
4800: LD_VAR 0 2
4804: PUSH
4805: LD_VAR 0 3
4809: MINUS
4810: ST_TO_ADDR
4811: GO 4835
// length := ( array - i_to ) + i_from ;
4813: LD_ADDR_VAR 0 11
4817: PUSH
4818: LD_VAR 0 1
4822: PUSH
4823: LD_VAR 0 3
4827: MINUS
4828: PUSH
4829: LD_VAR 0 2
4833: PLUS
4834: ST_TO_ADDR
// end ; if not length then
4835: LD_VAR 0 11
4839: NOT
4840: IFFALSE 4844
// exit ;
4842: GO 5002
// tmp := array ;
4844: LD_ADDR_VAR 0 10
4848: PUSH
4849: LD_VAR 0 1
4853: ST_TO_ADDR
// for i = 1 to length do
4854: LD_ADDR_VAR 0 6
4858: PUSH
4859: DOUBLE
4860: LD_INT 1
4862: DEC
4863: ST_TO_ADDR
4864: LD_VAR 0 11
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4990
// begin for j = 1 to array do
4872: LD_ADDR_VAR 0 7
4876: PUSH
4877: DOUBLE
4878: LD_INT 1
4880: DEC
4881: ST_TO_ADDR
4882: LD_VAR 0 1
4886: PUSH
4887: FOR_TO
4888: IFFALSE 4976
// begin k := j + d ;
4890: LD_ADDR_VAR 0 8
4894: PUSH
4895: LD_VAR 0 7
4899: PUSH
4900: LD_VAR 0 9
4904: PLUS
4905: ST_TO_ADDR
// if k > array then
4906: LD_VAR 0 8
4910: PUSH
4911: LD_VAR 0 1
4915: GREATER
4916: IFFALSE 4926
// k := 1 ;
4918: LD_ADDR_VAR 0 8
4922: PUSH
4923: LD_INT 1
4925: ST_TO_ADDR
// if not k then
4926: LD_VAR 0 8
4930: NOT
4931: IFFALSE 4943
// k := array ;
4933: LD_ADDR_VAR 0 8
4937: PUSH
4938: LD_VAR 0 1
4942: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4943: LD_ADDR_VAR 0 10
4947: PUSH
4948: LD_VAR 0 10
4952: PPUSH
4953: LD_VAR 0 8
4957: PPUSH
4958: LD_VAR 0 1
4962: PUSH
4963: LD_VAR 0 7
4967: ARRAY
4968: PPUSH
4969: CALL_OW 1
4973: ST_TO_ADDR
// end ;
4974: GO 4887
4976: POP
4977: POP
// array := tmp ;
4978: LD_ADDR_VAR 0 1
4982: PUSH
4983: LD_VAR 0 10
4987: ST_TO_ADDR
// end ;
4988: GO 4869
4990: POP
4991: POP
// result := array ;
4992: LD_ADDR_VAR 0 5
4996: PUSH
4997: LD_VAR 0 1
5001: ST_TO_ADDR
// end ;
5002: LD_VAR 0 5
5006: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5007: LD_INT 0
5009: PPUSH
5010: PPUSH
// result := 0 ;
5011: LD_ADDR_VAR 0 3
5015: PUSH
5016: LD_INT 0
5018: ST_TO_ADDR
// if not array or not value in array then
5019: LD_VAR 0 1
5023: NOT
5024: PUSH
5025: LD_VAR 0 2
5029: PUSH
5030: LD_VAR 0 1
5034: IN
5035: NOT
5036: OR
5037: IFFALSE 5041
// exit ;
5039: GO 5095
// for i = 1 to array do
5041: LD_ADDR_VAR 0 4
5045: PUSH
5046: DOUBLE
5047: LD_INT 1
5049: DEC
5050: ST_TO_ADDR
5051: LD_VAR 0 1
5055: PUSH
5056: FOR_TO
5057: IFFALSE 5093
// if value = array [ i ] then
5059: LD_VAR 0 2
5063: PUSH
5064: LD_VAR 0 1
5068: PUSH
5069: LD_VAR 0 4
5073: ARRAY
5074: EQUAL
5075: IFFALSE 5091
// begin result := i ;
5077: LD_ADDR_VAR 0 3
5081: PUSH
5082: LD_VAR 0 4
5086: ST_TO_ADDR
// exit ;
5087: POP
5088: POP
5089: GO 5095
// end ;
5091: GO 5056
5093: POP
5094: POP
// end ;
5095: LD_VAR 0 3
5099: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5100: LD_INT 0
5102: PPUSH
// vc_chassis := chassis ;
5103: LD_ADDR_OWVAR 37
5107: PUSH
5108: LD_VAR 0 1
5112: ST_TO_ADDR
// vc_engine := engine ;
5113: LD_ADDR_OWVAR 39
5117: PUSH
5118: LD_VAR 0 2
5122: ST_TO_ADDR
// vc_control := control ;
5123: LD_ADDR_OWVAR 38
5127: PUSH
5128: LD_VAR 0 3
5132: ST_TO_ADDR
// vc_weapon := weapon ;
5133: LD_ADDR_OWVAR 40
5137: PUSH
5138: LD_VAR 0 4
5142: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5143: LD_ADDR_OWVAR 41
5147: PUSH
5148: LD_VAR 0 5
5152: ST_TO_ADDR
// end ;
5153: LD_VAR 0 6
5157: RET
// export function WantPlant ( unit ) ; var task ; begin
5158: LD_INT 0
5160: PPUSH
5161: PPUSH
// result := false ;
5162: LD_ADDR_VAR 0 2
5166: PUSH
5167: LD_INT 0
5169: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5170: LD_ADDR_VAR 0 3
5174: PUSH
5175: LD_VAR 0 1
5179: PPUSH
5180: CALL_OW 437
5184: ST_TO_ADDR
// if task then
5185: LD_VAR 0 3
5189: IFFALSE 5217
// if task [ 1 ] [ 1 ] = p then
5191: LD_VAR 0 3
5195: PUSH
5196: LD_INT 1
5198: ARRAY
5199: PUSH
5200: LD_INT 1
5202: ARRAY
5203: PUSH
5204: LD_STRING p
5206: EQUAL
5207: IFFALSE 5217
// result := true ;
5209: LD_ADDR_VAR 0 2
5213: PUSH
5214: LD_INT 1
5216: ST_TO_ADDR
// end ;
5217: LD_VAR 0 2
5221: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
5226: PPUSH
5227: PPUSH
// if pos < 1 then
5228: LD_VAR 0 2
5232: PUSH
5233: LD_INT 1
5235: LESS
5236: IFFALSE 5240
// exit ;
5238: GO 5543
// if pos = 1 then
5240: LD_VAR 0 2
5244: PUSH
5245: LD_INT 1
5247: EQUAL
5248: IFFALSE 5281
// result := Replace ( arr , pos [ 1 ] , value ) else
5250: LD_ADDR_VAR 0 4
5254: PUSH
5255: LD_VAR 0 1
5259: PPUSH
5260: LD_VAR 0 2
5264: PUSH
5265: LD_INT 1
5267: ARRAY
5268: PPUSH
5269: LD_VAR 0 3
5273: PPUSH
5274: CALL_OW 1
5278: ST_TO_ADDR
5279: GO 5543
// begin tmp := arr ;
5281: LD_ADDR_VAR 0 6
5285: PUSH
5286: LD_VAR 0 1
5290: ST_TO_ADDR
// s_arr := [ tmp ] ;
5291: LD_ADDR_VAR 0 7
5295: PUSH
5296: LD_VAR 0 6
5300: PUSH
5301: EMPTY
5302: LIST
5303: ST_TO_ADDR
// for i = 1 to pos - 1 do
5304: LD_ADDR_VAR 0 5
5308: PUSH
5309: DOUBLE
5310: LD_INT 1
5312: DEC
5313: ST_TO_ADDR
5314: LD_VAR 0 2
5318: PUSH
5319: LD_INT 1
5321: MINUS
5322: PUSH
5323: FOR_TO
5324: IFFALSE 5369
// begin tmp := tmp [ pos [ i ] ] ;
5326: LD_ADDR_VAR 0 6
5330: PUSH
5331: LD_VAR 0 6
5335: PUSH
5336: LD_VAR 0 2
5340: PUSH
5341: LD_VAR 0 5
5345: ARRAY
5346: ARRAY
5347: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5348: LD_ADDR_VAR 0 7
5352: PUSH
5353: LD_VAR 0 7
5357: PUSH
5358: LD_VAR 0 6
5362: PUSH
5363: EMPTY
5364: LIST
5365: ADD
5366: ST_TO_ADDR
// end ;
5367: GO 5323
5369: POP
5370: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5371: LD_ADDR_VAR 0 6
5375: PUSH
5376: LD_VAR 0 6
5380: PPUSH
5381: LD_VAR 0 2
5385: PUSH
5386: LD_VAR 0 2
5390: ARRAY
5391: PPUSH
5392: LD_VAR 0 3
5396: PPUSH
5397: CALL_OW 1
5401: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5402: LD_ADDR_VAR 0 7
5406: PUSH
5407: LD_VAR 0 7
5411: PPUSH
5412: LD_VAR 0 7
5416: PPUSH
5417: LD_VAR 0 6
5421: PPUSH
5422: CALL_OW 1
5426: ST_TO_ADDR
// for i = s_arr downto 2 do
5427: LD_ADDR_VAR 0 5
5431: PUSH
5432: DOUBLE
5433: LD_VAR 0 7
5437: INC
5438: ST_TO_ADDR
5439: LD_INT 2
5441: PUSH
5442: FOR_DOWNTO
5443: IFFALSE 5527
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5445: LD_ADDR_VAR 0 6
5449: PUSH
5450: LD_VAR 0 7
5454: PUSH
5455: LD_VAR 0 5
5459: PUSH
5460: LD_INT 1
5462: MINUS
5463: ARRAY
5464: PPUSH
5465: LD_VAR 0 2
5469: PUSH
5470: LD_VAR 0 5
5474: PUSH
5475: LD_INT 1
5477: MINUS
5478: ARRAY
5479: PPUSH
5480: LD_VAR 0 7
5484: PUSH
5485: LD_VAR 0 5
5489: ARRAY
5490: PPUSH
5491: CALL_OW 1
5495: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5496: LD_ADDR_VAR 0 7
5500: PUSH
5501: LD_VAR 0 7
5505: PPUSH
5506: LD_VAR 0 5
5510: PUSH
5511: LD_INT 1
5513: MINUS
5514: PPUSH
5515: LD_VAR 0 6
5519: PPUSH
5520: CALL_OW 1
5524: ST_TO_ADDR
// end ;
5525: GO 5442
5527: POP
5528: POP
// result := s_arr [ 1 ] ;
5529: LD_ADDR_VAR 0 4
5533: PUSH
5534: LD_VAR 0 7
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: ST_TO_ADDR
// end ; end ;
5543: LD_VAR 0 4
5547: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5548: LD_INT 0
5550: PPUSH
5551: PPUSH
// if not list then
5552: LD_VAR 0 1
5556: NOT
5557: IFFALSE 5561
// exit ;
5559: GO 5652
// i := list [ pos1 ] ;
5561: LD_ADDR_VAR 0 5
5565: PUSH
5566: LD_VAR 0 1
5570: PUSH
5571: LD_VAR 0 2
5575: ARRAY
5576: ST_TO_ADDR
// if not i then
5577: LD_VAR 0 5
5581: NOT
5582: IFFALSE 5586
// exit ;
5584: GO 5652
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5586: LD_ADDR_VAR 0 1
5590: PUSH
5591: LD_VAR 0 1
5595: PPUSH
5596: LD_VAR 0 2
5600: PPUSH
5601: LD_VAR 0 1
5605: PUSH
5606: LD_VAR 0 3
5610: ARRAY
5611: PPUSH
5612: CALL_OW 1
5616: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5617: LD_ADDR_VAR 0 1
5621: PUSH
5622: LD_VAR 0 1
5626: PPUSH
5627: LD_VAR 0 3
5631: PPUSH
5632: LD_VAR 0 5
5636: PPUSH
5637: CALL_OW 1
5641: ST_TO_ADDR
// result := list ;
5642: LD_ADDR_VAR 0 4
5646: PUSH
5647: LD_VAR 0 1
5651: ST_TO_ADDR
// end ;
5652: LD_VAR 0 4
5656: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5657: LD_INT 0
5659: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5660: LD_ADDR_VAR 0 5
5664: PUSH
5665: LD_VAR 0 1
5669: PPUSH
5670: CALL_OW 250
5674: PPUSH
5675: LD_VAR 0 1
5679: PPUSH
5680: CALL_OW 251
5684: PPUSH
5685: LD_VAR 0 2
5689: PPUSH
5690: LD_VAR 0 3
5694: PPUSH
5695: LD_VAR 0 4
5699: PPUSH
5700: CALL 5710 0 5
5704: ST_TO_ADDR
// end ;
5705: LD_VAR 0 5
5709: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5710: LD_INT 0
5712: PPUSH
5713: PPUSH
5714: PPUSH
5715: PPUSH
// if not list then
5716: LD_VAR 0 3
5720: NOT
5721: IFFALSE 5725
// exit ;
5723: GO 6113
// result := [ ] ;
5725: LD_ADDR_VAR 0 6
5729: PUSH
5730: EMPTY
5731: ST_TO_ADDR
// for i in list do
5732: LD_ADDR_VAR 0 7
5736: PUSH
5737: LD_VAR 0 3
5741: PUSH
5742: FOR_IN
5743: IFFALSE 5945
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5745: LD_ADDR_VAR 0 9
5749: PUSH
5750: LD_VAR 0 7
5754: PPUSH
5755: LD_VAR 0 1
5759: PPUSH
5760: LD_VAR 0 2
5764: PPUSH
5765: CALL_OW 297
5769: ST_TO_ADDR
// if not result then
5770: LD_VAR 0 6
5774: NOT
5775: IFFALSE 5801
// result := [ [ i , tmp ] ] else
5777: LD_ADDR_VAR 0 6
5781: PUSH
5782: LD_VAR 0 7
5786: PUSH
5787: LD_VAR 0 9
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: EMPTY
5797: LIST
5798: ST_TO_ADDR
5799: GO 5943
// begin if result [ result ] [ 2 ] < tmp then
5801: LD_VAR 0 6
5805: PUSH
5806: LD_VAR 0 6
5810: ARRAY
5811: PUSH
5812: LD_INT 2
5814: ARRAY
5815: PUSH
5816: LD_VAR 0 9
5820: LESS
5821: IFFALSE 5863
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5823: LD_ADDR_VAR 0 6
5827: PUSH
5828: LD_VAR 0 6
5832: PPUSH
5833: LD_VAR 0 6
5837: PUSH
5838: LD_INT 1
5840: PLUS
5841: PPUSH
5842: LD_VAR 0 7
5846: PUSH
5847: LD_VAR 0 9
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: PPUSH
5856: CALL_OW 2
5860: ST_TO_ADDR
5861: GO 5943
// for j = 1 to result do
5863: LD_ADDR_VAR 0 8
5867: PUSH
5868: DOUBLE
5869: LD_INT 1
5871: DEC
5872: ST_TO_ADDR
5873: LD_VAR 0 6
5877: PUSH
5878: FOR_TO
5879: IFFALSE 5941
// begin if tmp < result [ j ] [ 2 ] then
5881: LD_VAR 0 9
5885: PUSH
5886: LD_VAR 0 6
5890: PUSH
5891: LD_VAR 0 8
5895: ARRAY
5896: PUSH
5897: LD_INT 2
5899: ARRAY
5900: LESS
5901: IFFALSE 5939
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5903: LD_ADDR_VAR 0 6
5907: PUSH
5908: LD_VAR 0 6
5912: PPUSH
5913: LD_VAR 0 8
5917: PPUSH
5918: LD_VAR 0 7
5922: PUSH
5923: LD_VAR 0 9
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PPUSH
5932: CALL_OW 2
5936: ST_TO_ADDR
// break ;
5937: GO 5941
// end ; end ;
5939: GO 5878
5941: POP
5942: POP
// end ; end ;
5943: GO 5742
5945: POP
5946: POP
// if result and not asc then
5947: LD_VAR 0 6
5951: PUSH
5952: LD_VAR 0 4
5956: NOT
5957: AND
5958: IFFALSE 6033
// begin tmp := result ;
5960: LD_ADDR_VAR 0 9
5964: PUSH
5965: LD_VAR 0 6
5969: ST_TO_ADDR
// for i = tmp downto 1 do
5970: LD_ADDR_VAR 0 7
5974: PUSH
5975: DOUBLE
5976: LD_VAR 0 9
5980: INC
5981: ST_TO_ADDR
5982: LD_INT 1
5984: PUSH
5985: FOR_DOWNTO
5986: IFFALSE 6031
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
5988: LD_ADDR_VAR 0 6
5992: PUSH
5993: LD_VAR 0 6
5997: PPUSH
5998: LD_VAR 0 9
6002: PUSH
6003: LD_VAR 0 7
6007: MINUS
6008: PUSH
6009: LD_INT 1
6011: PLUS
6012: PPUSH
6013: LD_VAR 0 9
6017: PUSH
6018: LD_VAR 0 7
6022: ARRAY
6023: PPUSH
6024: CALL_OW 1
6028: ST_TO_ADDR
6029: GO 5985
6031: POP
6032: POP
// end ; tmp := [ ] ;
6033: LD_ADDR_VAR 0 9
6037: PUSH
6038: EMPTY
6039: ST_TO_ADDR
// if mode then
6040: LD_VAR 0 5
6044: IFFALSE 6113
// begin for i = 1 to result do
6046: LD_ADDR_VAR 0 7
6050: PUSH
6051: DOUBLE
6052: LD_INT 1
6054: DEC
6055: ST_TO_ADDR
6056: LD_VAR 0 6
6060: PUSH
6061: FOR_TO
6062: IFFALSE 6101
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6064: LD_ADDR_VAR 0 9
6068: PUSH
6069: LD_VAR 0 9
6073: PPUSH
6074: LD_VAR 0 7
6078: PPUSH
6079: LD_VAR 0 6
6083: PUSH
6084: LD_VAR 0 7
6088: ARRAY
6089: PUSH
6090: LD_INT 1
6092: ARRAY
6093: PPUSH
6094: CALL_OW 1
6098: ST_TO_ADDR
6099: GO 6061
6101: POP
6102: POP
// result := tmp ;
6103: LD_ADDR_VAR 0 6
6107: PUSH
6108: LD_VAR 0 9
6112: ST_TO_ADDR
// end ; end ;
6113: LD_VAR 0 6
6117: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6118: LD_INT 0
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
6124: PPUSH
6125: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6126: LD_ADDR_VAR 0 5
6130: PUSH
6131: LD_INT 0
6133: PUSH
6134: LD_INT 0
6136: PUSH
6137: LD_INT 0
6139: PUSH
6140: EMPTY
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: ST_TO_ADDR
// if not x or not y then
6148: LD_VAR 0 2
6152: NOT
6153: PUSH
6154: LD_VAR 0 3
6158: NOT
6159: OR
6160: IFFALSE 6164
// exit ;
6162: GO 7814
// if not range then
6164: LD_VAR 0 4
6168: NOT
6169: IFFALSE 6179
// range := 10 ;
6171: LD_ADDR_VAR 0 4
6175: PUSH
6176: LD_INT 10
6178: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6179: LD_ADDR_VAR 0 8
6183: PUSH
6184: LD_INT 81
6186: PUSH
6187: LD_VAR 0 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 92
6198: PUSH
6199: LD_VAR 0 2
6203: PUSH
6204: LD_VAR 0 3
6208: PUSH
6209: LD_VAR 0 4
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 3
6222: PUSH
6223: LD_INT 21
6225: PUSH
6226: LD_INT 3
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: PPUSH
6242: CALL_OW 69
6246: ST_TO_ADDR
// if not tmp then
6247: LD_VAR 0 8
6251: NOT
6252: IFFALSE 6256
// exit ;
6254: GO 7814
// for i in tmp do
6256: LD_ADDR_VAR 0 6
6260: PUSH
6261: LD_VAR 0 8
6265: PUSH
6266: FOR_IN
6267: IFFALSE 7789
// begin points := [ 0 , 0 , 0 ] ;
6269: LD_ADDR_VAR 0 9
6273: PUSH
6274: LD_INT 0
6276: PUSH
6277: LD_INT 0
6279: PUSH
6280: LD_INT 0
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: ST_TO_ADDR
// bpoints := 1 ;
6288: LD_ADDR_VAR 0 10
6292: PUSH
6293: LD_INT 1
6295: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6296: LD_VAR 0 6
6300: PPUSH
6301: CALL_OW 247
6305: PUSH
6306: LD_INT 1
6308: DOUBLE
6309: EQUAL
6310: IFTRUE 6314
6312: GO 6892
6314: POP
// begin if GetClass ( i ) = 1 then
6315: LD_VAR 0 6
6319: PPUSH
6320: CALL_OW 257
6324: PUSH
6325: LD_INT 1
6327: EQUAL
6328: IFFALSE 6349
// points := [ 10 , 5 , 3 ] ;
6330: LD_ADDR_VAR 0 9
6334: PUSH
6335: LD_INT 10
6337: PUSH
6338: LD_INT 5
6340: PUSH
6341: LD_INT 3
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6349: LD_VAR 0 6
6353: PPUSH
6354: CALL_OW 257
6358: PUSH
6359: LD_INT 2
6361: PUSH
6362: LD_INT 3
6364: PUSH
6365: LD_INT 4
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: IN
6373: IFFALSE 6394
// points := [ 3 , 2 , 1 ] ;
6375: LD_ADDR_VAR 0 9
6379: PUSH
6380: LD_INT 3
6382: PUSH
6383: LD_INT 2
6385: PUSH
6386: LD_INT 1
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6394: LD_VAR 0 6
6398: PPUSH
6399: CALL_OW 257
6403: PUSH
6404: LD_INT 5
6406: EQUAL
6407: IFFALSE 6428
// points := [ 130 , 5 , 2 ] ;
6409: LD_ADDR_VAR 0 9
6413: PUSH
6414: LD_INT 130
6416: PUSH
6417: LD_INT 5
6419: PUSH
6420: LD_INT 2
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6428: LD_VAR 0 6
6432: PPUSH
6433: CALL_OW 257
6437: PUSH
6438: LD_INT 8
6440: EQUAL
6441: IFFALSE 6462
// points := [ 35 , 35 , 30 ] ;
6443: LD_ADDR_VAR 0 9
6447: PUSH
6448: LD_INT 35
6450: PUSH
6451: LD_INT 35
6453: PUSH
6454: LD_INT 30
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6462: LD_VAR 0 6
6466: PPUSH
6467: CALL_OW 257
6471: PUSH
6472: LD_INT 9
6474: EQUAL
6475: IFFALSE 6496
// points := [ 20 , 55 , 40 ] ;
6477: LD_ADDR_VAR 0 9
6481: PUSH
6482: LD_INT 20
6484: PUSH
6485: LD_INT 55
6487: PUSH
6488: LD_INT 40
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6496: LD_VAR 0 6
6500: PPUSH
6501: CALL_OW 257
6505: PUSH
6506: LD_INT 12
6508: PUSH
6509: LD_INT 16
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: IN
6516: IFFALSE 6537
// points := [ 5 , 3 , 2 ] ;
6518: LD_ADDR_VAR 0 9
6522: PUSH
6523: LD_INT 5
6525: PUSH
6526: LD_INT 3
6528: PUSH
6529: LD_INT 2
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6537: LD_VAR 0 6
6541: PPUSH
6542: CALL_OW 257
6546: PUSH
6547: LD_INT 17
6549: EQUAL
6550: IFFALSE 6571
// points := [ 100 , 50 , 75 ] ;
6552: LD_ADDR_VAR 0 9
6556: PUSH
6557: LD_INT 100
6559: PUSH
6560: LD_INT 50
6562: PUSH
6563: LD_INT 75
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: LIST
6570: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6571: LD_VAR 0 6
6575: PPUSH
6576: CALL_OW 257
6580: PUSH
6581: LD_INT 15
6583: EQUAL
6584: IFFALSE 6605
// points := [ 10 , 5 , 3 ] ;
6586: LD_ADDR_VAR 0 9
6590: PUSH
6591: LD_INT 10
6593: PUSH
6594: LD_INT 5
6596: PUSH
6597: LD_INT 3
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: LIST
6604: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6605: LD_VAR 0 6
6609: PPUSH
6610: CALL_OW 257
6614: PUSH
6615: LD_INT 14
6617: EQUAL
6618: IFFALSE 6639
// points := [ 10 , 0 , 0 ] ;
6620: LD_ADDR_VAR 0 9
6624: PUSH
6625: LD_INT 10
6627: PUSH
6628: LD_INT 0
6630: PUSH
6631: LD_INT 0
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: LIST
6638: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6639: LD_VAR 0 6
6643: PPUSH
6644: CALL_OW 257
6648: PUSH
6649: LD_INT 11
6651: EQUAL
6652: IFFALSE 6673
// points := [ 30 , 10 , 5 ] ;
6654: LD_ADDR_VAR 0 9
6658: PUSH
6659: LD_INT 30
6661: PUSH
6662: LD_INT 10
6664: PUSH
6665: LD_INT 5
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6673: LD_VAR 0 1
6677: PPUSH
6678: LD_INT 5
6680: PPUSH
6681: CALL_OW 321
6685: PUSH
6686: LD_INT 2
6688: EQUAL
6689: IFFALSE 6706
// bpoints := bpoints * 1.8 ;
6691: LD_ADDR_VAR 0 10
6695: PUSH
6696: LD_VAR 0 10
6700: PUSH
6701: LD_REAL  1.80000000000000E+0000
6704: MUL
6705: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6706: LD_VAR 0 6
6710: PPUSH
6711: CALL_OW 257
6715: PUSH
6716: LD_INT 1
6718: PUSH
6719: LD_INT 2
6721: PUSH
6722: LD_INT 3
6724: PUSH
6725: LD_INT 4
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: IN
6734: PUSH
6735: LD_VAR 0 1
6739: PPUSH
6740: LD_INT 51
6742: PPUSH
6743: CALL_OW 321
6747: PUSH
6748: LD_INT 2
6750: EQUAL
6751: AND
6752: IFFALSE 6769
// bpoints := bpoints * 1.2 ;
6754: LD_ADDR_VAR 0 10
6758: PUSH
6759: LD_VAR 0 10
6763: PUSH
6764: LD_REAL  1.20000000000000E+0000
6767: MUL
6768: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6769: LD_VAR 0 6
6773: PPUSH
6774: CALL_OW 257
6778: PUSH
6779: LD_INT 5
6781: PUSH
6782: LD_INT 7
6784: PUSH
6785: LD_INT 9
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: IN
6793: PUSH
6794: LD_VAR 0 1
6798: PPUSH
6799: LD_INT 52
6801: PPUSH
6802: CALL_OW 321
6806: PUSH
6807: LD_INT 2
6809: EQUAL
6810: AND
6811: IFFALSE 6828
// bpoints := bpoints * 1.5 ;
6813: LD_ADDR_VAR 0 10
6817: PUSH
6818: LD_VAR 0 10
6822: PUSH
6823: LD_REAL  1.50000000000000E+0000
6826: MUL
6827: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6828: LD_VAR 0 1
6832: PPUSH
6833: LD_INT 66
6835: PPUSH
6836: CALL_OW 321
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6861
// bpoints := bpoints * 1.1 ;
6846: LD_ADDR_VAR 0 10
6850: PUSH
6851: LD_VAR 0 10
6855: PUSH
6856: LD_REAL  1.10000000000000E+0000
6859: MUL
6860: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6861: LD_ADDR_VAR 0 10
6865: PUSH
6866: LD_VAR 0 10
6870: PUSH
6871: LD_VAR 0 6
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: CALL_OW 259
6883: PUSH
6884: LD_REAL  1.15000000000000E+0000
6887: MUL
6888: MUL
6889: ST_TO_ADDR
// end ; unit_vehicle :
6890: GO 7718
6892: LD_INT 2
6894: DOUBLE
6895: EQUAL
6896: IFTRUE 6900
6898: GO 7706
6900: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
6901: LD_VAR 0 6
6905: PPUSH
6906: CALL_OW 264
6910: PUSH
6911: LD_INT 2
6913: PUSH
6914: LD_INT 42
6916: PUSH
6917: LD_INT 24
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: LIST
6924: IN
6925: IFFALSE 6946
// points := [ 25 , 5 , 3 ] ;
6927: LD_ADDR_VAR 0 9
6931: PUSH
6932: LD_INT 25
6934: PUSH
6935: LD_INT 5
6937: PUSH
6938: LD_INT 3
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
6946: LD_VAR 0 6
6950: PPUSH
6951: CALL_OW 264
6955: PUSH
6956: LD_INT 4
6958: PUSH
6959: LD_INT 43
6961: PUSH
6962: LD_INT 25
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: IN
6970: IFFALSE 6991
// points := [ 40 , 15 , 5 ] ;
6972: LD_ADDR_VAR 0 9
6976: PUSH
6977: LD_INT 40
6979: PUSH
6980: LD_INT 15
6982: PUSH
6983: LD_INT 5
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: LIST
6990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
6991: LD_VAR 0 6
6995: PPUSH
6996: CALL_OW 264
7000: PUSH
7001: LD_INT 3
7003: PUSH
7004: LD_INT 23
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: IN
7011: IFFALSE 7032
// points := [ 7 , 25 , 8 ] ;
7013: LD_ADDR_VAR 0 9
7017: PUSH
7018: LD_INT 7
7020: PUSH
7021: LD_INT 25
7023: PUSH
7024: LD_INT 8
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: LIST
7031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7032: LD_VAR 0 6
7036: PPUSH
7037: CALL_OW 264
7041: PUSH
7042: LD_INT 5
7044: PUSH
7045: LD_INT 27
7047: PUSH
7048: LD_INT 44
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: IN
7056: IFFALSE 7077
// points := [ 14 , 50 , 16 ] ;
7058: LD_ADDR_VAR 0 9
7062: PUSH
7063: LD_INT 14
7065: PUSH
7066: LD_INT 50
7068: PUSH
7069: LD_INT 16
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7077: LD_VAR 0 6
7081: PPUSH
7082: CALL_OW 264
7086: PUSH
7087: LD_INT 6
7089: PUSH
7090: LD_INT 46
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: IN
7097: IFFALSE 7118
// points := [ 32 , 120 , 70 ] ;
7099: LD_ADDR_VAR 0 9
7103: PUSH
7104: LD_INT 32
7106: PUSH
7107: LD_INT 120
7109: PUSH
7110: LD_INT 70
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7118: LD_VAR 0 6
7122: PPUSH
7123: CALL_OW 264
7127: PUSH
7128: LD_INT 7
7130: PUSH
7131: LD_INT 28
7133: PUSH
7134: LD_INT 45
7136: PUSH
7137: LD_INT 92
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: IN
7146: IFFALSE 7167
// points := [ 35 , 20 , 45 ] ;
7148: LD_ADDR_VAR 0 9
7152: PUSH
7153: LD_INT 35
7155: PUSH
7156: LD_INT 20
7158: PUSH
7159: LD_INT 45
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7167: LD_VAR 0 6
7171: PPUSH
7172: CALL_OW 264
7176: PUSH
7177: LD_INT 47
7179: PUSH
7180: EMPTY
7181: LIST
7182: IN
7183: IFFALSE 7204
// points := [ 67 , 45 , 75 ] ;
7185: LD_ADDR_VAR 0 9
7189: PUSH
7190: LD_INT 67
7192: PUSH
7193: LD_INT 45
7195: PUSH
7196: LD_INT 75
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7204: LD_VAR 0 6
7208: PPUSH
7209: CALL_OW 264
7213: PUSH
7214: LD_INT 26
7216: PUSH
7217: EMPTY
7218: LIST
7219: IN
7220: IFFALSE 7241
// points := [ 120 , 30 , 80 ] ;
7222: LD_ADDR_VAR 0 9
7226: PUSH
7227: LD_INT 120
7229: PUSH
7230: LD_INT 30
7232: PUSH
7233: LD_INT 80
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: LIST
7240: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7241: LD_VAR 0 6
7245: PPUSH
7246: CALL_OW 264
7250: PUSH
7251: LD_INT 22
7253: PUSH
7254: EMPTY
7255: LIST
7256: IN
7257: IFFALSE 7278
// points := [ 40 , 1 , 1 ] ;
7259: LD_ADDR_VAR 0 9
7263: PUSH
7264: LD_INT 40
7266: PUSH
7267: LD_INT 1
7269: PUSH
7270: LD_INT 1
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: LIST
7277: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7278: LD_VAR 0 6
7282: PPUSH
7283: CALL_OW 264
7287: PUSH
7288: LD_INT 29
7290: PUSH
7291: EMPTY
7292: LIST
7293: IN
7294: IFFALSE 7315
// points := [ 70 , 200 , 400 ] ;
7296: LD_ADDR_VAR 0 9
7300: PUSH
7301: LD_INT 70
7303: PUSH
7304: LD_INT 200
7306: PUSH
7307: LD_INT 400
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: LIST
7314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7315: LD_VAR 0 6
7319: PPUSH
7320: CALL_OW 264
7324: PUSH
7325: LD_INT 14
7327: PUSH
7328: LD_INT 53
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: IN
7335: IFFALSE 7356
// points := [ 40 , 10 , 20 ] ;
7337: LD_ADDR_VAR 0 9
7341: PUSH
7342: LD_INT 40
7344: PUSH
7345: LD_INT 10
7347: PUSH
7348: LD_INT 20
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7356: LD_VAR 0 6
7360: PPUSH
7361: CALL_OW 264
7365: PUSH
7366: LD_INT 9
7368: PUSH
7369: EMPTY
7370: LIST
7371: IN
7372: IFFALSE 7393
// points := [ 5 , 70 , 20 ] ;
7374: LD_ADDR_VAR 0 9
7378: PUSH
7379: LD_INT 5
7381: PUSH
7382: LD_INT 70
7384: PUSH
7385: LD_INT 20
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7393: LD_VAR 0 6
7397: PPUSH
7398: CALL_OW 264
7402: PUSH
7403: LD_INT 10
7405: PUSH
7406: EMPTY
7407: LIST
7408: IN
7409: IFFALSE 7430
// points := [ 35 , 110 , 70 ] ;
7411: LD_ADDR_VAR 0 9
7415: PUSH
7416: LD_INT 35
7418: PUSH
7419: LD_INT 110
7421: PUSH
7422: LD_INT 70
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: LIST
7429: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7430: LD_VAR 0 6
7434: PPUSH
7435: CALL_OW 265
7439: PUSH
7440: LD_INT 25
7442: EQUAL
7443: IFFALSE 7464
// points := [ 80 , 65 , 100 ] ;
7445: LD_ADDR_VAR 0 9
7449: PUSH
7450: LD_INT 80
7452: PUSH
7453: LD_INT 65
7455: PUSH
7456: LD_INT 100
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: LIST
7463: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7464: LD_VAR 0 6
7468: PPUSH
7469: CALL_OW 263
7473: PUSH
7474: LD_INT 1
7476: EQUAL
7477: IFFALSE 7512
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7479: LD_ADDR_VAR 0 10
7483: PUSH
7484: LD_VAR 0 10
7488: PUSH
7489: LD_VAR 0 6
7493: PPUSH
7494: CALL_OW 311
7498: PPUSH
7499: LD_INT 3
7501: PPUSH
7502: CALL_OW 259
7506: PUSH
7507: LD_INT 4
7509: MUL
7510: MUL
7511: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7512: LD_VAR 0 6
7516: PPUSH
7517: CALL_OW 263
7521: PUSH
7522: LD_INT 2
7524: EQUAL
7525: IFFALSE 7576
// begin j := IsControledBy ( i ) ;
7527: LD_ADDR_VAR 0 7
7531: PUSH
7532: LD_VAR 0 6
7536: PPUSH
7537: CALL_OW 312
7541: ST_TO_ADDR
// if j then
7542: LD_VAR 0 7
7546: IFFALSE 7576
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7548: LD_ADDR_VAR 0 10
7552: PUSH
7553: LD_VAR 0 10
7557: PUSH
7558: LD_VAR 0 7
7562: PPUSH
7563: LD_INT 3
7565: PPUSH
7566: CALL_OW 259
7570: PUSH
7571: LD_INT 3
7573: MUL
7574: MUL
7575: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7576: LD_VAR 0 6
7580: PPUSH
7581: CALL_OW 264
7585: PUSH
7586: LD_INT 5
7588: PUSH
7589: LD_INT 6
7591: PUSH
7592: LD_INT 46
7594: PUSH
7595: LD_INT 44
7597: PUSH
7598: LD_INT 47
7600: PUSH
7601: LD_INT 45
7603: PUSH
7604: LD_INT 28
7606: PUSH
7607: LD_INT 7
7609: PUSH
7610: LD_INT 27
7612: PUSH
7613: LD_INT 29
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: IN
7628: PUSH
7629: LD_VAR 0 1
7633: PPUSH
7634: LD_INT 52
7636: PPUSH
7637: CALL_OW 321
7641: PUSH
7642: LD_INT 2
7644: EQUAL
7645: AND
7646: IFFALSE 7663
// bpoints := bpoints * 1.2 ;
7648: LD_ADDR_VAR 0 10
7652: PUSH
7653: LD_VAR 0 10
7657: PUSH
7658: LD_REAL  1.20000000000000E+0000
7661: MUL
7662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7663: LD_VAR 0 6
7667: PPUSH
7668: CALL_OW 264
7672: PUSH
7673: LD_INT 6
7675: PUSH
7676: LD_INT 46
7678: PUSH
7679: LD_INT 47
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: LIST
7686: IN
7687: IFFALSE 7704
// bpoints := bpoints * 1.2 ;
7689: LD_ADDR_VAR 0 10
7693: PUSH
7694: LD_VAR 0 10
7698: PUSH
7699: LD_REAL  1.20000000000000E+0000
7702: MUL
7703: ST_TO_ADDR
// end ; unit_building :
7704: GO 7718
7706: LD_INT 3
7708: DOUBLE
7709: EQUAL
7710: IFTRUE 7714
7712: GO 7717
7714: POP
// ; end ;
7715: GO 7718
7717: POP
// for j = 1 to 3 do
7718: LD_ADDR_VAR 0 7
7722: PUSH
7723: DOUBLE
7724: LD_INT 1
7726: DEC
7727: ST_TO_ADDR
7728: LD_INT 3
7730: PUSH
7731: FOR_TO
7732: IFFALSE 7785
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7734: LD_ADDR_VAR 0 5
7738: PUSH
7739: LD_VAR 0 5
7743: PPUSH
7744: LD_VAR 0 7
7748: PPUSH
7749: LD_VAR 0 5
7753: PUSH
7754: LD_VAR 0 7
7758: ARRAY
7759: PUSH
7760: LD_VAR 0 9
7764: PUSH
7765: LD_VAR 0 7
7769: ARRAY
7770: PUSH
7771: LD_VAR 0 10
7775: MUL
7776: PLUS
7777: PPUSH
7778: CALL_OW 1
7782: ST_TO_ADDR
7783: GO 7731
7785: POP
7786: POP
// end ;
7787: GO 6266
7789: POP
7790: POP
// result := Replace ( result , 4 , tmp ) ;
7791: LD_ADDR_VAR 0 5
7795: PUSH
7796: LD_VAR 0 5
7800: PPUSH
7801: LD_INT 4
7803: PPUSH
7804: LD_VAR 0 8
7808: PPUSH
7809: CALL_OW 1
7813: ST_TO_ADDR
// end ;
7814: LD_VAR 0 5
7818: RET
// export function DangerAtRange ( unit , range ) ; begin
7819: LD_INT 0
7821: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7822: LD_ADDR_VAR 0 3
7826: PUSH
7827: LD_VAR 0 1
7831: PPUSH
7832: CALL_OW 255
7836: PPUSH
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 250
7846: PPUSH
7847: LD_VAR 0 1
7851: PPUSH
7852: CALL_OW 251
7856: PPUSH
7857: LD_VAR 0 2
7861: PPUSH
7862: CALL 6118 0 4
7866: ST_TO_ADDR
// end ;
7867: LD_VAR 0 3
7871: RET
// export function DangerInArea ( side , area ) ; begin
7872: LD_INT 0
7874: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7875: LD_ADDR_VAR 0 3
7879: PUSH
7880: LD_VAR 0 2
7884: PPUSH
7885: LD_INT 81
7887: PUSH
7888: LD_VAR 0 1
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PPUSH
7897: CALL_OW 70
7901: ST_TO_ADDR
// end ;
7902: LD_VAR 0 3
7906: RET
// export function IsExtension ( b ) ; begin
7907: LD_INT 0
7909: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
7910: LD_ADDR_VAR 0 2
7914: PUSH
7915: LD_VAR 0 1
7919: PUSH
7920: LD_INT 23
7922: PUSH
7923: LD_INT 20
7925: PUSH
7926: LD_INT 22
7928: PUSH
7929: LD_INT 17
7931: PUSH
7932: LD_INT 24
7934: PUSH
7935: LD_INT 21
7937: PUSH
7938: LD_INT 19
7940: PUSH
7941: LD_INT 16
7943: PUSH
7944: LD_INT 25
7946: PUSH
7947: LD_INT 18
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: IN
7962: ST_TO_ADDR
// end ;
7963: LD_VAR 0 2
7967: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
7968: LD_INT 0
7970: PPUSH
7971: PPUSH
7972: PPUSH
// result := [ ] ;
7973: LD_ADDR_VAR 0 4
7977: PUSH
7978: EMPTY
7979: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
7980: LD_ADDR_VAR 0 5
7984: PUSH
7985: LD_VAR 0 2
7989: PPUSH
7990: LD_INT 21
7992: PUSH
7993: LD_INT 3
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PPUSH
8000: CALL_OW 70
8004: ST_TO_ADDR
// if not tmp then
8005: LD_VAR 0 5
8009: NOT
8010: IFFALSE 8014
// exit ;
8012: GO 8078
// if checkLink then
8014: LD_VAR 0 3
8018: IFFALSE 8068
// begin for i in tmp do
8020: LD_ADDR_VAR 0 6
8024: PUSH
8025: LD_VAR 0 5
8029: PUSH
8030: FOR_IN
8031: IFFALSE 8066
// if GetBase ( i ) <> base then
8033: LD_VAR 0 6
8037: PPUSH
8038: CALL_OW 274
8042: PUSH
8043: LD_VAR 0 1
8047: NONEQUAL
8048: IFFALSE 8064
// ComLinkToBase ( base , i ) ;
8050: LD_VAR 0 1
8054: PPUSH
8055: LD_VAR 0 6
8059: PPUSH
8060: CALL_OW 169
8064: GO 8030
8066: POP
8067: POP
// end ; result := tmp ;
8068: LD_ADDR_VAR 0 4
8072: PUSH
8073: LD_VAR 0 5
8077: ST_TO_ADDR
// end ;
8078: LD_VAR 0 4
8082: RET
// export function ComComplete ( units , b ) ; var i ; begin
8083: LD_INT 0
8085: PPUSH
8086: PPUSH
// if not units then
8087: LD_VAR 0 1
8091: NOT
8092: IFFALSE 8096
// exit ;
8094: GO 8186
// for i in units do
8096: LD_ADDR_VAR 0 4
8100: PUSH
8101: LD_VAR 0 1
8105: PUSH
8106: FOR_IN
8107: IFFALSE 8184
// if BuildingStatus ( b ) = bs_build then
8109: LD_VAR 0 2
8113: PPUSH
8114: CALL_OW 461
8118: PUSH
8119: LD_INT 1
8121: EQUAL
8122: IFFALSE 8182
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8124: LD_VAR 0 4
8128: PPUSH
8129: LD_STRING h
8131: PUSH
8132: LD_VAR 0 2
8136: PPUSH
8137: CALL_OW 250
8141: PUSH
8142: LD_VAR 0 2
8146: PPUSH
8147: CALL_OW 251
8151: PUSH
8152: LD_VAR 0 2
8156: PUSH
8157: LD_INT 0
8159: PUSH
8160: LD_INT 0
8162: PUSH
8163: LD_INT 0
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: PUSH
8175: EMPTY
8176: LIST
8177: PPUSH
8178: CALL_OW 446
8182: GO 8106
8184: POP
8185: POP
// end ;
8186: LD_VAR 0 3
8190: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8191: LD_INT 0
8193: PPUSH
8194: PPUSH
8195: PPUSH
8196: PPUSH
8197: PPUSH
8198: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8199: LD_VAR 0 1
8203: NOT
8204: PUSH
8205: LD_VAR 0 1
8209: PPUSH
8210: CALL_OW 263
8214: PUSH
8215: LD_INT 2
8217: NONEQUAL
8218: OR
8219: IFFALSE 8223
// exit ;
8221: GO 8539
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8223: LD_ADDR_VAR 0 6
8227: PUSH
8228: LD_INT 22
8230: PUSH
8231: LD_VAR 0 1
8235: PPUSH
8236: CALL_OW 255
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 2
8247: PUSH
8248: LD_INT 30
8250: PUSH
8251: LD_INT 36
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 34
8260: PUSH
8261: LD_INT 31
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: LIST
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PPUSH
8277: CALL_OW 69
8281: ST_TO_ADDR
// if not tmp then
8282: LD_VAR 0 6
8286: NOT
8287: IFFALSE 8291
// exit ;
8289: GO 8539
// result := [ ] ;
8291: LD_ADDR_VAR 0 2
8295: PUSH
8296: EMPTY
8297: ST_TO_ADDR
// for i in tmp do
8298: LD_ADDR_VAR 0 3
8302: PUSH
8303: LD_VAR 0 6
8307: PUSH
8308: FOR_IN
8309: IFFALSE 8380
// begin t := UnitsInside ( i ) ;
8311: LD_ADDR_VAR 0 4
8315: PUSH
8316: LD_VAR 0 3
8320: PPUSH
8321: CALL_OW 313
8325: ST_TO_ADDR
// if t then
8326: LD_VAR 0 4
8330: IFFALSE 8378
// for j in t do
8332: LD_ADDR_VAR 0 7
8336: PUSH
8337: LD_VAR 0 4
8341: PUSH
8342: FOR_IN
8343: IFFALSE 8376
// result := Replace ( result , result + 1 , j ) ;
8345: LD_ADDR_VAR 0 2
8349: PUSH
8350: LD_VAR 0 2
8354: PPUSH
8355: LD_VAR 0 2
8359: PUSH
8360: LD_INT 1
8362: PLUS
8363: PPUSH
8364: LD_VAR 0 7
8368: PPUSH
8369: CALL_OW 1
8373: ST_TO_ADDR
8374: GO 8342
8376: POP
8377: POP
// end ;
8378: GO 8308
8380: POP
8381: POP
// if not result then
8382: LD_VAR 0 2
8386: NOT
8387: IFFALSE 8391
// exit ;
8389: GO 8539
// mech := result [ 1 ] ;
8391: LD_ADDR_VAR 0 5
8395: PUSH
8396: LD_VAR 0 2
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: ST_TO_ADDR
// if result > 1 then
8405: LD_VAR 0 2
8409: PUSH
8410: LD_INT 1
8412: GREATER
8413: IFFALSE 8525
// begin for i = 2 to result do
8415: LD_ADDR_VAR 0 3
8419: PUSH
8420: DOUBLE
8421: LD_INT 2
8423: DEC
8424: ST_TO_ADDR
8425: LD_VAR 0 2
8429: PUSH
8430: FOR_TO
8431: IFFALSE 8523
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8433: LD_ADDR_VAR 0 4
8437: PUSH
8438: LD_VAR 0 2
8442: PUSH
8443: LD_VAR 0 3
8447: ARRAY
8448: PPUSH
8449: LD_INT 3
8451: PPUSH
8452: CALL_OW 259
8456: PUSH
8457: LD_VAR 0 2
8461: PUSH
8462: LD_VAR 0 3
8466: ARRAY
8467: PPUSH
8468: CALL_OW 432
8472: MINUS
8473: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8474: LD_VAR 0 4
8478: PUSH
8479: LD_VAR 0 5
8483: PPUSH
8484: LD_INT 3
8486: PPUSH
8487: CALL_OW 259
8491: PUSH
8492: LD_VAR 0 5
8496: PPUSH
8497: CALL_OW 432
8501: MINUS
8502: GREATEREQUAL
8503: IFFALSE 8521
// mech := result [ i ] ;
8505: LD_ADDR_VAR 0 5
8509: PUSH
8510: LD_VAR 0 2
8514: PUSH
8515: LD_VAR 0 3
8519: ARRAY
8520: ST_TO_ADDR
// end ;
8521: GO 8430
8523: POP
8524: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8525: LD_VAR 0 1
8529: PPUSH
8530: LD_VAR 0 5
8534: PPUSH
8535: CALL_OW 135
// end ;
8539: LD_VAR 0 2
8543: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8544: LD_INT 0
8546: PPUSH
8547: PPUSH
8548: PPUSH
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
8553: PPUSH
8554: PPUSH
8555: PPUSH
8556: PPUSH
8557: PPUSH
8558: PPUSH
// result := [ ] ;
8559: LD_ADDR_VAR 0 7
8563: PUSH
8564: EMPTY
8565: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8566: LD_VAR 0 1
8570: PPUSH
8571: CALL_OW 266
8575: PUSH
8576: LD_INT 0
8578: PUSH
8579: LD_INT 1
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: IN
8586: NOT
8587: IFFALSE 8591
// exit ;
8589: GO 10225
// if name then
8591: LD_VAR 0 3
8595: IFFALSE 8611
// SetBName ( base_dep , name ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: LD_VAR 0 3
8606: PPUSH
8607: CALL_OW 500
// base := GetBase ( base_dep ) ;
8611: LD_ADDR_VAR 0 15
8615: PUSH
8616: LD_VAR 0 1
8620: PPUSH
8621: CALL_OW 274
8625: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8626: LD_ADDR_VAR 0 16
8630: PUSH
8631: LD_VAR 0 1
8635: PPUSH
8636: CALL_OW 255
8640: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8641: LD_ADDR_VAR 0 17
8645: PUSH
8646: LD_VAR 0 1
8650: PPUSH
8651: CALL_OW 248
8655: ST_TO_ADDR
// if sources then
8656: LD_VAR 0 5
8660: IFFALSE 8707
// for i = 1 to 3 do
8662: LD_ADDR_VAR 0 8
8666: PUSH
8667: DOUBLE
8668: LD_INT 1
8670: DEC
8671: ST_TO_ADDR
8672: LD_INT 3
8674: PUSH
8675: FOR_TO
8676: IFFALSE 8705
// AddResourceType ( base , i , sources [ i ] ) ;
8678: LD_VAR 0 15
8682: PPUSH
8683: LD_VAR 0 8
8687: PPUSH
8688: LD_VAR 0 5
8692: PUSH
8693: LD_VAR 0 8
8697: ARRAY
8698: PPUSH
8699: CALL_OW 276
8703: GO 8675
8705: POP
8706: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8707: LD_ADDR_VAR 0 18
8711: PUSH
8712: LD_VAR 0 15
8716: PPUSH
8717: LD_VAR 0 2
8721: PPUSH
8722: LD_INT 1
8724: PPUSH
8725: CALL 7968 0 3
8729: ST_TO_ADDR
// InitHc ;
8730: CALL_OW 19
// InitUc ;
8734: CALL_OW 18
// uc_side := side ;
8738: LD_ADDR_OWVAR 20
8742: PUSH
8743: LD_VAR 0 16
8747: ST_TO_ADDR
// uc_nation := nation ;
8748: LD_ADDR_OWVAR 21
8752: PUSH
8753: LD_VAR 0 17
8757: ST_TO_ADDR
// if buildings then
8758: LD_VAR 0 18
8762: IFFALSE 10084
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8764: LD_ADDR_VAR 0 19
8768: PUSH
8769: LD_VAR 0 18
8773: PPUSH
8774: LD_INT 2
8776: PUSH
8777: LD_INT 30
8779: PUSH
8780: LD_INT 29
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: PUSH
8787: LD_INT 30
8789: PUSH
8790: LD_INT 30
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: PPUSH
8802: CALL_OW 72
8806: ST_TO_ADDR
// if tmp then
8807: LD_VAR 0 19
8811: IFFALSE 8859
// for i in tmp do
8813: LD_ADDR_VAR 0 8
8817: PUSH
8818: LD_VAR 0 19
8822: PUSH
8823: FOR_IN
8824: IFFALSE 8857
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8826: LD_VAR 0 8
8830: PPUSH
8831: CALL_OW 250
8835: PPUSH
8836: LD_VAR 0 8
8840: PPUSH
8841: CALL_OW 251
8845: PPUSH
8846: LD_VAR 0 16
8850: PPUSH
8851: CALL_OW 441
8855: GO 8823
8857: POP
8858: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8859: LD_VAR 0 18
8863: PPUSH
8864: LD_INT 2
8866: PUSH
8867: LD_INT 30
8869: PUSH
8870: LD_INT 32
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 30
8879: PUSH
8880: LD_INT 33
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: LIST
8891: PPUSH
8892: CALL_OW 72
8896: IFFALSE 8984
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
8898: LD_ADDR_VAR 0 8
8902: PUSH
8903: LD_VAR 0 18
8907: PPUSH
8908: LD_INT 2
8910: PUSH
8911: LD_INT 30
8913: PUSH
8914: LD_INT 32
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 30
8923: PUSH
8924: LD_INT 33
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: LIST
8935: PPUSH
8936: CALL_OW 72
8940: PUSH
8941: FOR_IN
8942: IFFALSE 8982
// begin if not GetBWeapon ( i ) then
8944: LD_VAR 0 8
8948: PPUSH
8949: CALL_OW 269
8953: NOT
8954: IFFALSE 8980
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
8956: LD_VAR 0 8
8960: PPUSH
8961: LD_VAR 0 8
8965: PPUSH
8966: LD_VAR 0 2
8970: PPUSH
8971: CALL 10230 0 2
8975: PPUSH
8976: CALL_OW 431
// end ;
8980: GO 8941
8982: POP
8983: POP
// end ; for i = 1 to personel do
8984: LD_ADDR_VAR 0 8
8988: PUSH
8989: DOUBLE
8990: LD_INT 1
8992: DEC
8993: ST_TO_ADDR
8994: LD_VAR 0 6
8998: PUSH
8999: FOR_TO
9000: IFFALSE 10064
// begin if i > 4 then
9002: LD_VAR 0 8
9006: PUSH
9007: LD_INT 4
9009: GREATER
9010: IFFALSE 9014
// break ;
9012: GO 10064
// case i of 1 :
9014: LD_VAR 0 8
9018: PUSH
9019: LD_INT 1
9021: DOUBLE
9022: EQUAL
9023: IFTRUE 9027
9025: GO 9107
9027: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9028: LD_ADDR_VAR 0 12
9032: PUSH
9033: LD_VAR 0 18
9037: PPUSH
9038: LD_INT 22
9040: PUSH
9041: LD_VAR 0 16
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 58
9052: PUSH
9053: EMPTY
9054: LIST
9055: PUSH
9056: LD_INT 2
9058: PUSH
9059: LD_INT 30
9061: PUSH
9062: LD_INT 32
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 30
9071: PUSH
9072: LD_INT 4
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: LD_INT 30
9081: PUSH
9082: LD_INT 5
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 72
9104: ST_TO_ADDR
9105: GO 9329
9107: LD_INT 2
9109: DOUBLE
9110: EQUAL
9111: IFTRUE 9115
9113: GO 9177
9115: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9116: LD_ADDR_VAR 0 12
9120: PUSH
9121: LD_VAR 0 18
9125: PPUSH
9126: LD_INT 22
9128: PUSH
9129: LD_VAR 0 16
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 2
9140: PUSH
9141: LD_INT 30
9143: PUSH
9144: LD_INT 0
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: LD_INT 30
9153: PUSH
9154: LD_INT 1
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: LIST
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PPUSH
9170: CALL_OW 72
9174: ST_TO_ADDR
9175: GO 9329
9177: LD_INT 3
9179: DOUBLE
9180: EQUAL
9181: IFTRUE 9185
9183: GO 9247
9185: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9186: LD_ADDR_VAR 0 12
9190: PUSH
9191: LD_VAR 0 18
9195: PPUSH
9196: LD_INT 22
9198: PUSH
9199: LD_VAR 0 16
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 2
9210: PUSH
9211: LD_INT 30
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 30
9223: PUSH
9224: LD_INT 3
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PPUSH
9240: CALL_OW 72
9244: ST_TO_ADDR
9245: GO 9329
9247: LD_INT 4
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9328
9255: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9256: LD_ADDR_VAR 0 12
9260: PUSH
9261: LD_VAR 0 18
9265: PPUSH
9266: LD_INT 22
9268: PUSH
9269: LD_VAR 0 16
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PUSH
9278: LD_INT 2
9280: PUSH
9281: LD_INT 30
9283: PUSH
9284: LD_INT 6
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: LD_INT 30
9293: PUSH
9294: LD_INT 7
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: PUSH
9301: LD_INT 30
9303: PUSH
9304: LD_INT 8
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PPUSH
9321: CALL_OW 72
9325: ST_TO_ADDR
9326: GO 9329
9328: POP
// if i = 1 then
9329: LD_VAR 0 8
9333: PUSH
9334: LD_INT 1
9336: EQUAL
9337: IFFALSE 9448
// begin tmp := [ ] ;
9339: LD_ADDR_VAR 0 19
9343: PUSH
9344: EMPTY
9345: ST_TO_ADDR
// for j in f do
9346: LD_ADDR_VAR 0 9
9350: PUSH
9351: LD_VAR 0 12
9355: PUSH
9356: FOR_IN
9357: IFFALSE 9430
// if GetBType ( j ) = b_bunker then
9359: LD_VAR 0 9
9363: PPUSH
9364: CALL_OW 266
9368: PUSH
9369: LD_INT 32
9371: EQUAL
9372: IFFALSE 9399
// tmp := Insert ( tmp , 1 , j ) else
9374: LD_ADDR_VAR 0 19
9378: PUSH
9379: LD_VAR 0 19
9383: PPUSH
9384: LD_INT 1
9386: PPUSH
9387: LD_VAR 0 9
9391: PPUSH
9392: CALL_OW 2
9396: ST_TO_ADDR
9397: GO 9428
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9399: LD_ADDR_VAR 0 19
9403: PUSH
9404: LD_VAR 0 19
9408: PPUSH
9409: LD_VAR 0 19
9413: PUSH
9414: LD_INT 1
9416: PLUS
9417: PPUSH
9418: LD_VAR 0 9
9422: PPUSH
9423: CALL_OW 2
9427: ST_TO_ADDR
9428: GO 9356
9430: POP
9431: POP
// if tmp then
9432: LD_VAR 0 19
9436: IFFALSE 9448
// f := tmp ;
9438: LD_ADDR_VAR 0 12
9442: PUSH
9443: LD_VAR 0 19
9447: ST_TO_ADDR
// end ; x := personel [ i ] ;
9448: LD_ADDR_VAR 0 13
9452: PUSH
9453: LD_VAR 0 6
9457: PUSH
9458: LD_VAR 0 8
9462: ARRAY
9463: ST_TO_ADDR
// if x = - 1 then
9464: LD_VAR 0 13
9468: PUSH
9469: LD_INT 1
9471: NEG
9472: EQUAL
9473: IFFALSE 9682
// begin for j in f do
9475: LD_ADDR_VAR 0 9
9479: PUSH
9480: LD_VAR 0 12
9484: PUSH
9485: FOR_IN
9486: IFFALSE 9678
// repeat InitHc ;
9488: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9492: LD_VAR 0 9
9496: PPUSH
9497: CALL_OW 266
9501: PUSH
9502: LD_INT 5
9504: EQUAL
9505: IFFALSE 9575
// begin if UnitsInside ( j ) < 3 then
9507: LD_VAR 0 9
9511: PPUSH
9512: CALL_OW 313
9516: PUSH
9517: LD_INT 3
9519: LESS
9520: IFFALSE 9556
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9522: LD_INT 0
9524: PPUSH
9525: LD_INT 5
9527: PUSH
9528: LD_INT 8
9530: PUSH
9531: LD_INT 9
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: LIST
9538: PUSH
9539: LD_VAR 0 17
9543: ARRAY
9544: PPUSH
9545: LD_VAR 0 4
9549: PPUSH
9550: CALL_OW 380
9554: GO 9573
// PrepareHuman ( false , i , skill ) ;
9556: LD_INT 0
9558: PPUSH
9559: LD_VAR 0 8
9563: PPUSH
9564: LD_VAR 0 4
9568: PPUSH
9569: CALL_OW 380
// end else
9573: GO 9592
// PrepareHuman ( false , i , skill ) ;
9575: LD_INT 0
9577: PPUSH
9578: LD_VAR 0 8
9582: PPUSH
9583: LD_VAR 0 4
9587: PPUSH
9588: CALL_OW 380
// un := CreateHuman ;
9592: LD_ADDR_VAR 0 14
9596: PUSH
9597: CALL_OW 44
9601: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9602: LD_ADDR_VAR 0 7
9606: PUSH
9607: LD_VAR 0 7
9611: PPUSH
9612: LD_INT 1
9614: PPUSH
9615: LD_VAR 0 14
9619: PPUSH
9620: CALL_OW 2
9624: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9625: LD_VAR 0 14
9629: PPUSH
9630: LD_VAR 0 9
9634: PPUSH
9635: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9639: LD_VAR 0 9
9643: PPUSH
9644: CALL_OW 313
9648: PUSH
9649: LD_INT 6
9651: EQUAL
9652: PUSH
9653: LD_VAR 0 9
9657: PPUSH
9658: CALL_OW 266
9662: PUSH
9663: LD_INT 32
9665: PUSH
9666: LD_INT 31
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: IN
9673: OR
9674: IFFALSE 9488
9676: GO 9485
9678: POP
9679: POP
// end else
9680: GO 10062
// for j = 1 to x do
9682: LD_ADDR_VAR 0 9
9686: PUSH
9687: DOUBLE
9688: LD_INT 1
9690: DEC
9691: ST_TO_ADDR
9692: LD_VAR 0 13
9696: PUSH
9697: FOR_TO
9698: IFFALSE 10060
// begin InitHc ;
9700: CALL_OW 19
// if not f then
9704: LD_VAR 0 12
9708: NOT
9709: IFFALSE 9798
// begin PrepareHuman ( false , i , skill ) ;
9711: LD_INT 0
9713: PPUSH
9714: LD_VAR 0 8
9718: PPUSH
9719: LD_VAR 0 4
9723: PPUSH
9724: CALL_OW 380
// un := CreateHuman ;
9728: LD_ADDR_VAR 0 14
9732: PUSH
9733: CALL_OW 44
9737: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9738: LD_ADDR_VAR 0 7
9742: PUSH
9743: LD_VAR 0 7
9747: PPUSH
9748: LD_INT 1
9750: PPUSH
9751: LD_VAR 0 14
9755: PPUSH
9756: CALL_OW 2
9760: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9761: LD_VAR 0 14
9765: PPUSH
9766: LD_VAR 0 1
9770: PPUSH
9771: CALL_OW 250
9775: PPUSH
9776: LD_VAR 0 1
9780: PPUSH
9781: CALL_OW 251
9785: PPUSH
9786: LD_INT 10
9788: PPUSH
9789: LD_INT 0
9791: PPUSH
9792: CALL_OW 50
// continue ;
9796: GO 9697
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9798: LD_VAR 0 12
9802: PUSH
9803: LD_INT 1
9805: ARRAY
9806: PPUSH
9807: CALL_OW 313
9811: PUSH
9812: LD_VAR 0 12
9816: PUSH
9817: LD_INT 1
9819: ARRAY
9820: PPUSH
9821: CALL_OW 266
9825: PUSH
9826: LD_INT 32
9828: PUSH
9829: LD_INT 31
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: IN
9836: AND
9837: PUSH
9838: LD_VAR 0 12
9842: PUSH
9843: LD_INT 1
9845: ARRAY
9846: PPUSH
9847: CALL_OW 313
9851: PUSH
9852: LD_INT 6
9854: EQUAL
9855: OR
9856: IFFALSE 9876
// f := Delete ( f , 1 ) ;
9858: LD_ADDR_VAR 0 12
9862: PUSH
9863: LD_VAR 0 12
9867: PPUSH
9868: LD_INT 1
9870: PPUSH
9871: CALL_OW 3
9875: ST_TO_ADDR
// if not f then
9876: LD_VAR 0 12
9880: NOT
9881: IFFALSE 9899
// begin x := x + 2 ;
9883: LD_ADDR_VAR 0 13
9887: PUSH
9888: LD_VAR 0 13
9892: PUSH
9893: LD_INT 2
9895: PLUS
9896: ST_TO_ADDR
// continue ;
9897: GO 9697
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
9899: LD_VAR 0 12
9903: PUSH
9904: LD_INT 1
9906: ARRAY
9907: PPUSH
9908: CALL_OW 266
9912: PUSH
9913: LD_INT 5
9915: EQUAL
9916: IFFALSE 9990
// begin if UnitsInside ( f [ 1 ] ) < 3 then
9918: LD_VAR 0 12
9922: PUSH
9923: LD_INT 1
9925: ARRAY
9926: PPUSH
9927: CALL_OW 313
9931: PUSH
9932: LD_INT 3
9934: LESS
9935: IFFALSE 9971
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9937: LD_INT 0
9939: PPUSH
9940: LD_INT 5
9942: PUSH
9943: LD_INT 8
9945: PUSH
9946: LD_INT 9
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: LIST
9953: PUSH
9954: LD_VAR 0 17
9958: ARRAY
9959: PPUSH
9960: LD_VAR 0 4
9964: PPUSH
9965: CALL_OW 380
9969: GO 9988
// PrepareHuman ( false , i , skill ) ;
9971: LD_INT 0
9973: PPUSH
9974: LD_VAR 0 8
9978: PPUSH
9979: LD_VAR 0 4
9983: PPUSH
9984: CALL_OW 380
// end else
9988: GO 10007
// PrepareHuman ( false , i , skill ) ;
9990: LD_INT 0
9992: PPUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: LD_VAR 0 4
10002: PPUSH
10003: CALL_OW 380
// un := CreateHuman ;
10007: LD_ADDR_VAR 0 14
10011: PUSH
10012: CALL_OW 44
10016: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10017: LD_ADDR_VAR 0 7
10021: PUSH
10022: LD_VAR 0 7
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: LD_VAR 0 14
10034: PPUSH
10035: CALL_OW 2
10039: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10040: LD_VAR 0 14
10044: PPUSH
10045: LD_VAR 0 12
10049: PUSH
10050: LD_INT 1
10052: ARRAY
10053: PPUSH
10054: CALL_OW 52
// end ;
10058: GO 9697
10060: POP
10061: POP
// end ;
10062: GO 8999
10064: POP
10065: POP
// result := result ^ buildings ;
10066: LD_ADDR_VAR 0 7
10070: PUSH
10071: LD_VAR 0 7
10075: PUSH
10076: LD_VAR 0 18
10080: ADD
10081: ST_TO_ADDR
// end else
10082: GO 10225
// begin for i = 1 to personel do
10084: LD_ADDR_VAR 0 8
10088: PUSH
10089: DOUBLE
10090: LD_INT 1
10092: DEC
10093: ST_TO_ADDR
10094: LD_VAR 0 6
10098: PUSH
10099: FOR_TO
10100: IFFALSE 10223
// begin if i > 4 then
10102: LD_VAR 0 8
10106: PUSH
10107: LD_INT 4
10109: GREATER
10110: IFFALSE 10114
// break ;
10112: GO 10223
// x := personel [ i ] ;
10114: LD_ADDR_VAR 0 13
10118: PUSH
10119: LD_VAR 0 6
10123: PUSH
10124: LD_VAR 0 8
10128: ARRAY
10129: ST_TO_ADDR
// if x = - 1 then
10130: LD_VAR 0 13
10134: PUSH
10135: LD_INT 1
10137: NEG
10138: EQUAL
10139: IFFALSE 10143
// continue ;
10141: GO 10099
// PrepareHuman ( false , i , skill ) ;
10143: LD_INT 0
10145: PPUSH
10146: LD_VAR 0 8
10150: PPUSH
10151: LD_VAR 0 4
10155: PPUSH
10156: CALL_OW 380
// un := CreateHuman ;
10160: LD_ADDR_VAR 0 14
10164: PUSH
10165: CALL_OW 44
10169: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10170: LD_VAR 0 14
10174: PPUSH
10175: LD_VAR 0 1
10179: PPUSH
10180: CALL_OW 250
10184: PPUSH
10185: LD_VAR 0 1
10189: PPUSH
10190: CALL_OW 251
10194: PPUSH
10195: LD_INT 10
10197: PPUSH
10198: LD_INT 0
10200: PPUSH
10201: CALL_OW 50
// result := result ^ un ;
10205: LD_ADDR_VAR 0 7
10209: PUSH
10210: LD_VAR 0 7
10214: PUSH
10215: LD_VAR 0 14
10219: ADD
10220: ST_TO_ADDR
// end ;
10221: GO 10099
10223: POP
10224: POP
// end ; end ;
10225: LD_VAR 0 7
10229: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10230: LD_INT 0
10232: PPUSH
10233: PPUSH
10234: PPUSH
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
10239: PPUSH
10240: PPUSH
10241: PPUSH
10242: PPUSH
10243: PPUSH
10244: PPUSH
10245: PPUSH
10246: PPUSH
10247: PPUSH
// result := false ;
10248: LD_ADDR_VAR 0 3
10252: PUSH
10253: LD_INT 0
10255: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10256: LD_VAR 0 1
10260: NOT
10261: PUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: CALL_OW 266
10271: PUSH
10272: LD_INT 32
10274: PUSH
10275: LD_INT 33
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: IN
10282: NOT
10283: OR
10284: IFFALSE 10288
// exit ;
10286: GO 11397
// nat := GetNation ( tower ) ;
10288: LD_ADDR_VAR 0 12
10292: PUSH
10293: LD_VAR 0 1
10297: PPUSH
10298: CALL_OW 248
10302: ST_TO_ADDR
// side := GetSide ( tower ) ;
10303: LD_ADDR_VAR 0 16
10307: PUSH
10308: LD_VAR 0 1
10312: PPUSH
10313: CALL_OW 255
10317: ST_TO_ADDR
// x := GetX ( tower ) ;
10318: LD_ADDR_VAR 0 10
10322: PUSH
10323: LD_VAR 0 1
10327: PPUSH
10328: CALL_OW 250
10332: ST_TO_ADDR
// y := GetY ( tower ) ;
10333: LD_ADDR_VAR 0 11
10337: PUSH
10338: LD_VAR 0 1
10342: PPUSH
10343: CALL_OW 251
10347: ST_TO_ADDR
// if not x or not y then
10348: LD_VAR 0 10
10352: NOT
10353: PUSH
10354: LD_VAR 0 11
10358: NOT
10359: OR
10360: IFFALSE 10364
// exit ;
10362: GO 11397
// weapon := 0 ;
10364: LD_ADDR_VAR 0 18
10368: PUSH
10369: LD_INT 0
10371: ST_TO_ADDR
// fac_list := [ ] ;
10372: LD_ADDR_VAR 0 17
10376: PUSH
10377: EMPTY
10378: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10379: LD_ADDR_VAR 0 6
10383: PUSH
10384: LD_VAR 0 1
10388: PPUSH
10389: CALL_OW 274
10393: PPUSH
10394: LD_VAR 0 2
10398: PPUSH
10399: LD_INT 0
10401: PPUSH
10402: CALL 7968 0 3
10406: PPUSH
10407: LD_INT 30
10409: PUSH
10410: LD_INT 3
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PPUSH
10417: CALL_OW 72
10421: ST_TO_ADDR
// if not factories then
10422: LD_VAR 0 6
10426: NOT
10427: IFFALSE 10431
// exit ;
10429: GO 11397
// for i in factories do
10431: LD_ADDR_VAR 0 8
10435: PUSH
10436: LD_VAR 0 6
10440: PUSH
10441: FOR_IN
10442: IFFALSE 10467
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10444: LD_ADDR_VAR 0 17
10448: PUSH
10449: LD_VAR 0 17
10453: PUSH
10454: LD_VAR 0 8
10458: PPUSH
10459: CALL_OW 478
10463: UNION
10464: ST_TO_ADDR
10465: GO 10441
10467: POP
10468: POP
// if not fac_list then
10469: LD_VAR 0 17
10473: NOT
10474: IFFALSE 10478
// exit ;
10476: GO 11397
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10478: LD_ADDR_VAR 0 5
10482: PUSH
10483: LD_INT 4
10485: PUSH
10486: LD_INT 5
10488: PUSH
10489: LD_INT 9
10491: PUSH
10492: LD_INT 10
10494: PUSH
10495: LD_INT 6
10497: PUSH
10498: LD_INT 7
10500: PUSH
10501: LD_INT 11
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 27
10515: PUSH
10516: LD_INT 28
10518: PUSH
10519: LD_INT 26
10521: PUSH
10522: LD_INT 30
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 43
10533: PUSH
10534: LD_INT 44
10536: PUSH
10537: LD_INT 46
10539: PUSH
10540: LD_INT 45
10542: PUSH
10543: LD_INT 47
10545: PUSH
10546: LD_INT 49
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: LIST
10561: PUSH
10562: LD_VAR 0 12
10566: ARRAY
10567: ST_TO_ADDR
// list := list isect fac_list ;
10568: LD_ADDR_VAR 0 5
10572: PUSH
10573: LD_VAR 0 5
10577: PUSH
10578: LD_VAR 0 17
10582: ISECT
10583: ST_TO_ADDR
// if not list then
10584: LD_VAR 0 5
10588: NOT
10589: IFFALSE 10593
// exit ;
10591: GO 11397
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10593: LD_VAR 0 12
10597: PUSH
10598: LD_INT 3
10600: EQUAL
10601: PUSH
10602: LD_INT 49
10604: PUSH
10605: LD_VAR 0 5
10609: IN
10610: AND
10611: PUSH
10612: LD_INT 31
10614: PPUSH
10615: LD_VAR 0 16
10619: PPUSH
10620: CALL_OW 321
10624: PUSH
10625: LD_INT 2
10627: EQUAL
10628: AND
10629: IFFALSE 10689
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10631: LD_INT 22
10633: PUSH
10634: LD_VAR 0 16
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PUSH
10643: LD_INT 35
10645: PUSH
10646: LD_INT 49
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 91
10655: PUSH
10656: LD_VAR 0 1
10660: PUSH
10661: LD_INT 10
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: PPUSH
10674: CALL_OW 69
10678: NOT
10679: IFFALSE 10689
// weapon := ru_time_lapser ;
10681: LD_ADDR_VAR 0 18
10685: PUSH
10686: LD_INT 49
10688: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10689: LD_VAR 0 12
10693: PUSH
10694: LD_INT 1
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: IN
10704: PUSH
10705: LD_INT 11
10707: PUSH
10708: LD_VAR 0 5
10712: IN
10713: PUSH
10714: LD_INT 30
10716: PUSH
10717: LD_VAR 0 5
10721: IN
10722: OR
10723: AND
10724: PUSH
10725: LD_INT 6
10727: PPUSH
10728: LD_VAR 0 16
10732: PPUSH
10733: CALL_OW 321
10737: PUSH
10738: LD_INT 2
10740: EQUAL
10741: AND
10742: IFFALSE 10907
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10744: LD_INT 22
10746: PUSH
10747: LD_VAR 0 16
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 2
10758: PUSH
10759: LD_INT 35
10761: PUSH
10762: LD_INT 11
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 35
10771: PUSH
10772: LD_INT 30
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 91
10786: PUSH
10787: LD_VAR 0 1
10791: PUSH
10792: LD_INT 18
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: PPUSH
10805: CALL_OW 69
10809: NOT
10810: PUSH
10811: LD_INT 22
10813: PUSH
10814: LD_VAR 0 16
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 2
10825: PUSH
10826: LD_INT 30
10828: PUSH
10829: LD_INT 32
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 30
10838: PUSH
10839: LD_INT 33
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: LIST
10850: PUSH
10851: LD_INT 91
10853: PUSH
10854: LD_VAR 0 1
10858: PUSH
10859: LD_INT 12
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: PUSH
10872: EMPTY
10873: LIST
10874: PPUSH
10875: CALL_OW 69
10879: PUSH
10880: LD_INT 2
10882: GREATER
10883: AND
10884: IFFALSE 10907
// weapon := [ us_radar , ar_radar ] [ nat ] ;
10886: LD_ADDR_VAR 0 18
10890: PUSH
10891: LD_INT 11
10893: PUSH
10894: LD_INT 30
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_VAR 0 12
10905: ARRAY
10906: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
10907: LD_VAR 0 18
10911: NOT
10912: PUSH
10913: LD_INT 40
10915: PPUSH
10916: LD_VAR 0 16
10920: PPUSH
10921: CALL_OW 321
10925: PUSH
10926: LD_INT 2
10928: EQUAL
10929: AND
10930: PUSH
10931: LD_INT 7
10933: PUSH
10934: LD_VAR 0 5
10938: IN
10939: PUSH
10940: LD_INT 28
10942: PUSH
10943: LD_VAR 0 5
10947: IN
10948: OR
10949: PUSH
10950: LD_INT 45
10952: PUSH
10953: LD_VAR 0 5
10957: IN
10958: OR
10959: AND
10960: IFFALSE 11214
// begin hex := GetHexInfo ( x , y ) ;
10962: LD_ADDR_VAR 0 4
10966: PUSH
10967: LD_VAR 0 10
10971: PPUSH
10972: LD_VAR 0 11
10976: PPUSH
10977: CALL_OW 546
10981: ST_TO_ADDR
// if hex [ 1 ] then
10982: LD_VAR 0 4
10986: PUSH
10987: LD_INT 1
10989: ARRAY
10990: IFFALSE 10994
// exit ;
10992: GO 11397
// height := hex [ 2 ] ;
10994: LD_ADDR_VAR 0 15
10998: PUSH
10999: LD_VAR 0 4
11003: PUSH
11004: LD_INT 2
11006: ARRAY
11007: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11008: LD_ADDR_VAR 0 14
11012: PUSH
11013: LD_INT 0
11015: PUSH
11016: LD_INT 2
11018: PUSH
11019: LD_INT 3
11021: PUSH
11022: LD_INT 5
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: ST_TO_ADDR
// for i in tmp do
11031: LD_ADDR_VAR 0 8
11035: PUSH
11036: LD_VAR 0 14
11040: PUSH
11041: FOR_IN
11042: IFFALSE 11212
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11044: LD_ADDR_VAR 0 9
11048: PUSH
11049: LD_VAR 0 10
11053: PPUSH
11054: LD_VAR 0 8
11058: PPUSH
11059: LD_INT 5
11061: PPUSH
11062: CALL_OW 272
11066: PUSH
11067: LD_VAR 0 11
11071: PPUSH
11072: LD_VAR 0 8
11076: PPUSH
11077: LD_INT 5
11079: PPUSH
11080: CALL_OW 273
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11089: LD_VAR 0 9
11093: PUSH
11094: LD_INT 1
11096: ARRAY
11097: PPUSH
11098: LD_VAR 0 9
11102: PUSH
11103: LD_INT 2
11105: ARRAY
11106: PPUSH
11107: CALL_OW 488
11111: IFFALSE 11210
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11113: LD_ADDR_VAR 0 4
11117: PUSH
11118: LD_VAR 0 9
11122: PUSH
11123: LD_INT 1
11125: ARRAY
11126: PPUSH
11127: LD_VAR 0 9
11131: PUSH
11132: LD_INT 2
11134: ARRAY
11135: PPUSH
11136: CALL_OW 546
11140: ST_TO_ADDR
// if hex [ 1 ] then
11141: LD_VAR 0 4
11145: PUSH
11146: LD_INT 1
11148: ARRAY
11149: IFFALSE 11153
// continue ;
11151: GO 11041
// h := hex [ 2 ] ;
11153: LD_ADDR_VAR 0 13
11157: PUSH
11158: LD_VAR 0 4
11162: PUSH
11163: LD_INT 2
11165: ARRAY
11166: ST_TO_ADDR
// if h + 7 < height then
11167: LD_VAR 0 13
11171: PUSH
11172: LD_INT 7
11174: PLUS
11175: PUSH
11176: LD_VAR 0 15
11180: LESS
11181: IFFALSE 11210
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11183: LD_ADDR_VAR 0 18
11187: PUSH
11188: LD_INT 7
11190: PUSH
11191: LD_INT 28
11193: PUSH
11194: LD_INT 45
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: LIST
11201: PUSH
11202: LD_VAR 0 12
11206: ARRAY
11207: ST_TO_ADDR
// break ;
11208: GO 11212
// end ; end ; end ;
11210: GO 11041
11212: POP
11213: POP
// end ; if not weapon then
11214: LD_VAR 0 18
11218: NOT
11219: IFFALSE 11279
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11221: LD_ADDR_VAR 0 5
11225: PUSH
11226: LD_VAR 0 5
11230: PUSH
11231: LD_INT 11
11233: PUSH
11234: LD_INT 30
11236: PUSH
11237: LD_INT 49
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: DIFF
11245: ST_TO_ADDR
// if not list then
11246: LD_VAR 0 5
11250: NOT
11251: IFFALSE 11255
// exit ;
11253: GO 11397
// weapon := list [ rand ( 1 , list ) ] ;
11255: LD_ADDR_VAR 0 18
11259: PUSH
11260: LD_VAR 0 5
11264: PUSH
11265: LD_INT 1
11267: PPUSH
11268: LD_VAR 0 5
11272: PPUSH
11273: CALL_OW 12
11277: ARRAY
11278: ST_TO_ADDR
// end ; if weapon then
11279: LD_VAR 0 18
11283: IFFALSE 11397
// begin tmp := CostOfWeapon ( weapon ) ;
11285: LD_ADDR_VAR 0 14
11289: PUSH
11290: LD_VAR 0 18
11294: PPUSH
11295: CALL_OW 451
11299: ST_TO_ADDR
// j := GetBase ( tower ) ;
11300: LD_ADDR_VAR 0 9
11304: PUSH
11305: LD_VAR 0 1
11309: PPUSH
11310: CALL_OW 274
11314: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11315: LD_VAR 0 9
11319: PPUSH
11320: LD_INT 1
11322: PPUSH
11323: CALL_OW 275
11327: PUSH
11328: LD_VAR 0 14
11332: PUSH
11333: LD_INT 1
11335: ARRAY
11336: GREATEREQUAL
11337: PUSH
11338: LD_VAR 0 9
11342: PPUSH
11343: LD_INT 2
11345: PPUSH
11346: CALL_OW 275
11350: PUSH
11351: LD_VAR 0 14
11355: PUSH
11356: LD_INT 2
11358: ARRAY
11359: GREATEREQUAL
11360: AND
11361: PUSH
11362: LD_VAR 0 9
11366: PPUSH
11367: LD_INT 3
11369: PPUSH
11370: CALL_OW 275
11374: PUSH
11375: LD_VAR 0 14
11379: PUSH
11380: LD_INT 3
11382: ARRAY
11383: GREATEREQUAL
11384: AND
11385: IFFALSE 11397
// result := weapon ;
11387: LD_ADDR_VAR 0 3
11391: PUSH
11392: LD_VAR 0 18
11396: ST_TO_ADDR
// end ; end ;
11397: LD_VAR 0 3
11401: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11402: LD_INT 0
11404: PPUSH
11405: PPUSH
// result := true ;
11406: LD_ADDR_VAR 0 3
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// if array1 = array2 then
11414: LD_VAR 0 1
11418: PUSH
11419: LD_VAR 0 2
11423: EQUAL
11424: IFFALSE 11484
// begin for i = 1 to array1 do
11426: LD_ADDR_VAR 0 4
11430: PUSH
11431: DOUBLE
11432: LD_INT 1
11434: DEC
11435: ST_TO_ADDR
11436: LD_VAR 0 1
11440: PUSH
11441: FOR_TO
11442: IFFALSE 11480
// if array1 [ i ] <> array2 [ i ] then
11444: LD_VAR 0 1
11448: PUSH
11449: LD_VAR 0 4
11453: ARRAY
11454: PUSH
11455: LD_VAR 0 2
11459: PUSH
11460: LD_VAR 0 4
11464: ARRAY
11465: NONEQUAL
11466: IFFALSE 11478
// begin result := false ;
11468: LD_ADDR_VAR 0 3
11472: PUSH
11473: LD_INT 0
11475: ST_TO_ADDR
// break ;
11476: GO 11480
// end ;
11478: GO 11441
11480: POP
11481: POP
// end else
11482: GO 11492
// result := false ;
11484: LD_ADDR_VAR 0 3
11488: PUSH
11489: LD_INT 0
11491: ST_TO_ADDR
// end ;
11492: LD_VAR 0 3
11496: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11497: LD_INT 0
11499: PPUSH
11500: PPUSH
// if not array1 or not array2 then
11501: LD_VAR 0 1
11505: NOT
11506: PUSH
11507: LD_VAR 0 2
11511: NOT
11512: OR
11513: IFFALSE 11517
// exit ;
11515: GO 11581
// result := true ;
11517: LD_ADDR_VAR 0 3
11521: PUSH
11522: LD_INT 1
11524: ST_TO_ADDR
// for i = 1 to array1 do
11525: LD_ADDR_VAR 0 4
11529: PUSH
11530: DOUBLE
11531: LD_INT 1
11533: DEC
11534: ST_TO_ADDR
11535: LD_VAR 0 1
11539: PUSH
11540: FOR_TO
11541: IFFALSE 11579
// if array1 [ i ] <> array2 [ i ] then
11543: LD_VAR 0 1
11547: PUSH
11548: LD_VAR 0 4
11552: ARRAY
11553: PUSH
11554: LD_VAR 0 2
11558: PUSH
11559: LD_VAR 0 4
11563: ARRAY
11564: NONEQUAL
11565: IFFALSE 11577
// begin result := false ;
11567: LD_ADDR_VAR 0 3
11571: PUSH
11572: LD_INT 0
11574: ST_TO_ADDR
// break ;
11575: GO 11579
// end ;
11577: GO 11540
11579: POP
11580: POP
// end ;
11581: LD_VAR 0 3
11585: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11586: LD_INT 0
11588: PPUSH
11589: PPUSH
11590: PPUSH
// pom := GetBase ( fac ) ;
11591: LD_ADDR_VAR 0 5
11595: PUSH
11596: LD_VAR 0 1
11600: PPUSH
11601: CALL_OW 274
11605: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11606: LD_ADDR_VAR 0 4
11610: PUSH
11611: LD_VAR 0 2
11615: PUSH
11616: LD_INT 1
11618: ARRAY
11619: PPUSH
11620: LD_VAR 0 2
11624: PUSH
11625: LD_INT 2
11627: ARRAY
11628: PPUSH
11629: LD_VAR 0 2
11633: PUSH
11634: LD_INT 3
11636: ARRAY
11637: PPUSH
11638: LD_VAR 0 2
11642: PUSH
11643: LD_INT 4
11645: ARRAY
11646: PPUSH
11647: CALL_OW 449
11651: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11652: LD_ADDR_VAR 0 3
11656: PUSH
11657: LD_VAR 0 5
11661: PPUSH
11662: LD_INT 1
11664: PPUSH
11665: CALL_OW 275
11669: PUSH
11670: LD_VAR 0 4
11674: PUSH
11675: LD_INT 1
11677: ARRAY
11678: GREATEREQUAL
11679: PUSH
11680: LD_VAR 0 5
11684: PPUSH
11685: LD_INT 2
11687: PPUSH
11688: CALL_OW 275
11692: PUSH
11693: LD_VAR 0 4
11697: PUSH
11698: LD_INT 2
11700: ARRAY
11701: GREATEREQUAL
11702: AND
11703: PUSH
11704: LD_VAR 0 5
11708: PPUSH
11709: LD_INT 3
11711: PPUSH
11712: CALL_OW 275
11716: PUSH
11717: LD_VAR 0 4
11721: PUSH
11722: LD_INT 3
11724: ARRAY
11725: GREATEREQUAL
11726: AND
11727: ST_TO_ADDR
// end ;
11728: LD_VAR 0 3
11732: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11733: LD_INT 0
11735: PPUSH
11736: PPUSH
11737: PPUSH
11738: PPUSH
// pom := GetBase ( building ) ;
11739: LD_ADDR_VAR 0 3
11743: PUSH
11744: LD_VAR 0 1
11748: PPUSH
11749: CALL_OW 274
11753: ST_TO_ADDR
// if not pom then
11754: LD_VAR 0 3
11758: NOT
11759: IFFALSE 11763
// exit ;
11761: GO 11933
// btype := GetBType ( building ) ;
11763: LD_ADDR_VAR 0 5
11767: PUSH
11768: LD_VAR 0 1
11772: PPUSH
11773: CALL_OW 266
11777: ST_TO_ADDR
// if btype = b_armoury then
11778: LD_VAR 0 5
11782: PUSH
11783: LD_INT 4
11785: EQUAL
11786: IFFALSE 11796
// btype := b_barracks ;
11788: LD_ADDR_VAR 0 5
11792: PUSH
11793: LD_INT 5
11795: ST_TO_ADDR
// if btype = b_depot then
11796: LD_VAR 0 5
11800: PUSH
11801: LD_INT 0
11803: EQUAL
11804: IFFALSE 11814
// btype := b_warehouse ;
11806: LD_ADDR_VAR 0 5
11810: PUSH
11811: LD_INT 1
11813: ST_TO_ADDR
// if btype = b_workshop then
11814: LD_VAR 0 5
11818: PUSH
11819: LD_INT 2
11821: EQUAL
11822: IFFALSE 11832
// btype := b_factory ;
11824: LD_ADDR_VAR 0 5
11828: PUSH
11829: LD_INT 3
11831: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11832: LD_ADDR_VAR 0 4
11836: PUSH
11837: LD_VAR 0 5
11841: PPUSH
11842: LD_VAR 0 1
11846: PPUSH
11847: CALL_OW 248
11851: PPUSH
11852: CALL_OW 450
11856: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11857: LD_ADDR_VAR 0 2
11861: PUSH
11862: LD_VAR 0 3
11866: PPUSH
11867: LD_INT 1
11869: PPUSH
11870: CALL_OW 275
11874: PUSH
11875: LD_VAR 0 4
11879: PUSH
11880: LD_INT 1
11882: ARRAY
11883: GREATEREQUAL
11884: PUSH
11885: LD_VAR 0 3
11889: PPUSH
11890: LD_INT 2
11892: PPUSH
11893: CALL_OW 275
11897: PUSH
11898: LD_VAR 0 4
11902: PUSH
11903: LD_INT 2
11905: ARRAY
11906: GREATEREQUAL
11907: AND
11908: PUSH
11909: LD_VAR 0 3
11913: PPUSH
11914: LD_INT 3
11916: PPUSH
11917: CALL_OW 275
11921: PUSH
11922: LD_VAR 0 4
11926: PUSH
11927: LD_INT 3
11929: ARRAY
11930: GREATEREQUAL
11931: AND
11932: ST_TO_ADDR
// end ;
11933: LD_VAR 0 2
11937: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
11938: LD_INT 0
11940: PPUSH
11941: PPUSH
11942: PPUSH
// pom := GetBase ( building ) ;
11943: LD_ADDR_VAR 0 4
11947: PUSH
11948: LD_VAR 0 1
11952: PPUSH
11953: CALL_OW 274
11957: ST_TO_ADDR
// if not pom then
11958: LD_VAR 0 4
11962: NOT
11963: IFFALSE 11967
// exit ;
11965: GO 12068
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11967: LD_ADDR_VAR 0 5
11971: PUSH
11972: LD_VAR 0 2
11976: PPUSH
11977: LD_VAR 0 1
11981: PPUSH
11982: CALL_OW 248
11986: PPUSH
11987: CALL_OW 450
11991: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11992: LD_ADDR_VAR 0 3
11996: PUSH
11997: LD_VAR 0 4
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: CALL_OW 275
12009: PUSH
12010: LD_VAR 0 5
12014: PUSH
12015: LD_INT 1
12017: ARRAY
12018: GREATEREQUAL
12019: PUSH
12020: LD_VAR 0 4
12024: PPUSH
12025: LD_INT 2
12027: PPUSH
12028: CALL_OW 275
12032: PUSH
12033: LD_VAR 0 5
12037: PUSH
12038: LD_INT 2
12040: ARRAY
12041: GREATEREQUAL
12042: AND
12043: PUSH
12044: LD_VAR 0 4
12048: PPUSH
12049: LD_INT 3
12051: PPUSH
12052: CALL_OW 275
12056: PUSH
12057: LD_VAR 0 5
12061: PUSH
12062: LD_INT 3
12064: ARRAY
12065: GREATEREQUAL
12066: AND
12067: ST_TO_ADDR
// end ;
12068: LD_VAR 0 3
12072: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12073: LD_INT 0
12075: PPUSH
12076: PPUSH
12077: PPUSH
12078: PPUSH
12079: PPUSH
12080: PPUSH
12081: PPUSH
12082: PPUSH
12083: PPUSH
12084: PPUSH
12085: PPUSH
// result := false ;
12086: LD_ADDR_VAR 0 8
12090: PUSH
12091: LD_INT 0
12093: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12094: LD_VAR 0 5
12098: NOT
12099: PUSH
12100: LD_VAR 0 1
12104: NOT
12105: OR
12106: PUSH
12107: LD_VAR 0 2
12111: NOT
12112: OR
12113: PUSH
12114: LD_VAR 0 3
12118: NOT
12119: OR
12120: IFFALSE 12124
// exit ;
12122: GO 12938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12124: LD_ADDR_VAR 0 14
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: LD_VAR 0 2
12138: PPUSH
12139: LD_VAR 0 3
12143: PPUSH
12144: LD_VAR 0 4
12148: PPUSH
12149: LD_VAR 0 5
12153: PUSH
12154: LD_INT 1
12156: ARRAY
12157: PPUSH
12158: CALL_OW 248
12162: PPUSH
12163: LD_INT 0
12165: PPUSH
12166: CALL 14171 0 6
12170: ST_TO_ADDR
// if not hexes then
12171: LD_VAR 0 14
12175: NOT
12176: IFFALSE 12180
// exit ;
12178: GO 12938
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12180: LD_ADDR_VAR 0 17
12184: PUSH
12185: LD_VAR 0 5
12189: PPUSH
12190: LD_INT 22
12192: PUSH
12193: LD_VAR 0 13
12197: PPUSH
12198: CALL_OW 255
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 2
12209: PUSH
12210: LD_INT 30
12212: PUSH
12213: LD_INT 0
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 1
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PPUSH
12239: CALL_OW 72
12243: ST_TO_ADDR
// for i = 1 to hexes do
12244: LD_ADDR_VAR 0 9
12248: PUSH
12249: DOUBLE
12250: LD_INT 1
12252: DEC
12253: ST_TO_ADDR
12254: LD_VAR 0 14
12258: PUSH
12259: FOR_TO
12260: IFFALSE 12936
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12262: LD_ADDR_VAR 0 13
12266: PUSH
12267: LD_VAR 0 14
12271: PUSH
12272: LD_VAR 0 9
12276: ARRAY
12277: PUSH
12278: LD_INT 1
12280: ARRAY
12281: PPUSH
12282: LD_VAR 0 14
12286: PUSH
12287: LD_VAR 0 9
12291: ARRAY
12292: PUSH
12293: LD_INT 2
12295: ARRAY
12296: PPUSH
12297: CALL_OW 428
12301: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12302: LD_VAR 0 14
12306: PUSH
12307: LD_VAR 0 9
12311: ARRAY
12312: PUSH
12313: LD_INT 1
12315: ARRAY
12316: PPUSH
12317: LD_VAR 0 14
12321: PUSH
12322: LD_VAR 0 9
12326: ARRAY
12327: PUSH
12328: LD_INT 2
12330: ARRAY
12331: PPUSH
12332: CALL_OW 351
12336: PUSH
12337: LD_VAR 0 14
12341: PUSH
12342: LD_VAR 0 9
12346: ARRAY
12347: PUSH
12348: LD_INT 1
12350: ARRAY
12351: PPUSH
12352: LD_VAR 0 14
12356: PUSH
12357: LD_VAR 0 9
12361: ARRAY
12362: PUSH
12363: LD_INT 2
12365: ARRAY
12366: PPUSH
12367: CALL_OW 488
12371: NOT
12372: OR
12373: PUSH
12374: LD_VAR 0 13
12378: PPUSH
12379: CALL_OW 247
12383: PUSH
12384: LD_INT 3
12386: EQUAL
12387: OR
12388: IFFALSE 12394
// exit ;
12390: POP
12391: POP
12392: GO 12938
// if not tmp then
12394: LD_VAR 0 13
12398: NOT
12399: IFFALSE 12403
// continue ;
12401: GO 12259
// result := true ;
12403: LD_ADDR_VAR 0 8
12407: PUSH
12408: LD_INT 1
12410: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12411: LD_VAR 0 6
12415: PUSH
12416: LD_VAR 0 13
12420: PPUSH
12421: CALL_OW 247
12425: PUSH
12426: LD_INT 2
12428: EQUAL
12429: AND
12430: PUSH
12431: LD_VAR 0 13
12435: PPUSH
12436: CALL_OW 263
12440: PUSH
12441: LD_INT 1
12443: EQUAL
12444: AND
12445: IFFALSE 12609
// begin if IsDrivenBy ( tmp ) then
12447: LD_VAR 0 13
12451: PPUSH
12452: CALL_OW 311
12456: IFFALSE 12460
// continue ;
12458: GO 12259
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12460: LD_VAR 0 6
12464: PPUSH
12465: LD_INT 3
12467: PUSH
12468: LD_INT 60
12470: PUSH
12471: EMPTY
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: LD_INT 3
12480: PUSH
12481: LD_INT 55
12483: PUSH
12484: EMPTY
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PPUSH
12495: CALL_OW 72
12499: IFFALSE 12607
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12501: LD_ADDR_VAR 0 18
12505: PUSH
12506: LD_VAR 0 6
12510: PPUSH
12511: LD_INT 3
12513: PUSH
12514: LD_INT 60
12516: PUSH
12517: EMPTY
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 3
12526: PUSH
12527: LD_INT 55
12529: PUSH
12530: EMPTY
12531: LIST
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PPUSH
12541: CALL_OW 72
12545: PUSH
12546: LD_INT 1
12548: ARRAY
12549: ST_TO_ADDR
// if IsInUnit ( driver ) then
12550: LD_VAR 0 18
12554: PPUSH
12555: CALL_OW 310
12559: IFFALSE 12570
// ComExit ( driver ) ;
12561: LD_VAR 0 18
12565: PPUSH
12566: CALL 37950 0 1
// AddComEnterUnit ( driver , tmp ) ;
12570: LD_VAR 0 18
12574: PPUSH
12575: LD_VAR 0 13
12579: PPUSH
12580: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12584: LD_VAR 0 18
12588: PPUSH
12589: LD_VAR 0 7
12593: PPUSH
12594: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12598: LD_VAR 0 18
12602: PPUSH
12603: CALL_OW 181
// end ; continue ;
12607: GO 12259
// end ; if not cleaners or not tmp in cleaners then
12609: LD_VAR 0 6
12613: NOT
12614: PUSH
12615: LD_VAR 0 13
12619: PUSH
12620: LD_VAR 0 6
12624: IN
12625: NOT
12626: OR
12627: IFFALSE 12934
// begin if dep then
12629: LD_VAR 0 17
12633: IFFALSE 12769
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12635: LD_ADDR_VAR 0 16
12639: PUSH
12640: LD_VAR 0 17
12644: PUSH
12645: LD_INT 1
12647: ARRAY
12648: PPUSH
12649: CALL_OW 250
12653: PPUSH
12654: LD_VAR 0 17
12658: PUSH
12659: LD_INT 1
12661: ARRAY
12662: PPUSH
12663: CALL_OW 254
12667: PPUSH
12668: LD_INT 5
12670: PPUSH
12671: CALL_OW 272
12675: PUSH
12676: LD_VAR 0 17
12680: PUSH
12681: LD_INT 1
12683: ARRAY
12684: PPUSH
12685: CALL_OW 251
12689: PPUSH
12690: LD_VAR 0 17
12694: PUSH
12695: LD_INT 1
12697: ARRAY
12698: PPUSH
12699: CALL_OW 254
12703: PPUSH
12704: LD_INT 5
12706: PPUSH
12707: CALL_OW 273
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12716: LD_VAR 0 16
12720: PUSH
12721: LD_INT 1
12723: ARRAY
12724: PPUSH
12725: LD_VAR 0 16
12729: PUSH
12730: LD_INT 2
12732: ARRAY
12733: PPUSH
12734: CALL_OW 488
12738: IFFALSE 12769
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12740: LD_VAR 0 13
12744: PPUSH
12745: LD_VAR 0 16
12749: PUSH
12750: LD_INT 1
12752: ARRAY
12753: PPUSH
12754: LD_VAR 0 16
12758: PUSH
12759: LD_INT 2
12761: ARRAY
12762: PPUSH
12763: CALL_OW 111
// continue ;
12767: GO 12259
// end ; end ; r := GetDir ( tmp ) ;
12769: LD_ADDR_VAR 0 15
12773: PUSH
12774: LD_VAR 0 13
12778: PPUSH
12779: CALL_OW 254
12783: ST_TO_ADDR
// if r = 5 then
12784: LD_VAR 0 15
12788: PUSH
12789: LD_INT 5
12791: EQUAL
12792: IFFALSE 12802
// r := 0 ;
12794: LD_ADDR_VAR 0 15
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// for j = r to 5 do
12802: LD_ADDR_VAR 0 10
12806: PUSH
12807: DOUBLE
12808: LD_VAR 0 15
12812: DEC
12813: ST_TO_ADDR
12814: LD_INT 5
12816: PUSH
12817: FOR_TO
12818: IFFALSE 12932
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12820: LD_ADDR_VAR 0 11
12824: PUSH
12825: LD_VAR 0 13
12829: PPUSH
12830: CALL_OW 250
12834: PPUSH
12835: LD_VAR 0 10
12839: PPUSH
12840: LD_INT 2
12842: PPUSH
12843: CALL_OW 272
12847: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12848: LD_ADDR_VAR 0 12
12852: PUSH
12853: LD_VAR 0 13
12857: PPUSH
12858: CALL_OW 251
12862: PPUSH
12863: LD_VAR 0 10
12867: PPUSH
12868: LD_INT 2
12870: PPUSH
12871: CALL_OW 273
12875: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
12876: LD_VAR 0 11
12880: PPUSH
12881: LD_VAR 0 12
12885: PPUSH
12886: CALL_OW 488
12890: PUSH
12891: LD_VAR 0 11
12895: PPUSH
12896: LD_VAR 0 12
12900: PPUSH
12901: CALL_OW 428
12905: NOT
12906: AND
12907: IFFALSE 12930
// begin ComMoveXY ( tmp , _x , _y ) ;
12909: LD_VAR 0 13
12913: PPUSH
12914: LD_VAR 0 11
12918: PPUSH
12919: LD_VAR 0 12
12923: PPUSH
12924: CALL_OW 111
// break ;
12928: GO 12932
// end ; end ;
12930: GO 12817
12932: POP
12933: POP
// end ; end ;
12934: GO 12259
12936: POP
12937: POP
// end ;
12938: LD_VAR 0 8
12942: RET
// export function BuildingTechInvented ( side , btype ) ; begin
12943: LD_INT 0
12945: PPUSH
// result := true ;
12946: LD_ADDR_VAR 0 3
12950: PUSH
12951: LD_INT 1
12953: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
12954: LD_VAR 0 2
12958: PUSH
12959: LD_INT 24
12961: DOUBLE
12962: EQUAL
12963: IFTRUE 12973
12965: LD_INT 33
12967: DOUBLE
12968: EQUAL
12969: IFTRUE 12973
12971: GO 12998
12973: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
12974: LD_ADDR_VAR 0 3
12978: PUSH
12979: LD_INT 32
12981: PPUSH
12982: LD_VAR 0 1
12986: PPUSH
12987: CALL_OW 321
12991: PUSH
12992: LD_INT 2
12994: EQUAL
12995: ST_TO_ADDR
12996: GO 13314
12998: LD_INT 20
13000: DOUBLE
13001: EQUAL
13002: IFTRUE 13006
13004: GO 13031
13006: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13007: LD_ADDR_VAR 0 3
13011: PUSH
13012: LD_INT 6
13014: PPUSH
13015: LD_VAR 0 1
13019: PPUSH
13020: CALL_OW 321
13024: PUSH
13025: LD_INT 2
13027: EQUAL
13028: ST_TO_ADDR
13029: GO 13314
13031: LD_INT 22
13033: DOUBLE
13034: EQUAL
13035: IFTRUE 13045
13037: LD_INT 36
13039: DOUBLE
13040: EQUAL
13041: IFTRUE 13045
13043: GO 13070
13045: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13046: LD_ADDR_VAR 0 3
13050: PUSH
13051: LD_INT 15
13053: PPUSH
13054: LD_VAR 0 1
13058: PPUSH
13059: CALL_OW 321
13063: PUSH
13064: LD_INT 2
13066: EQUAL
13067: ST_TO_ADDR
13068: GO 13314
13070: LD_INT 30
13072: DOUBLE
13073: EQUAL
13074: IFTRUE 13078
13076: GO 13103
13078: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13079: LD_ADDR_VAR 0 3
13083: PUSH
13084: LD_INT 20
13086: PPUSH
13087: LD_VAR 0 1
13091: PPUSH
13092: CALL_OW 321
13096: PUSH
13097: LD_INT 2
13099: EQUAL
13100: ST_TO_ADDR
13101: GO 13314
13103: LD_INT 28
13105: DOUBLE
13106: EQUAL
13107: IFTRUE 13117
13109: LD_INT 21
13111: DOUBLE
13112: EQUAL
13113: IFTRUE 13117
13115: GO 13142
13117: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13118: LD_ADDR_VAR 0 3
13122: PUSH
13123: LD_INT 21
13125: PPUSH
13126: LD_VAR 0 1
13130: PPUSH
13131: CALL_OW 321
13135: PUSH
13136: LD_INT 2
13138: EQUAL
13139: ST_TO_ADDR
13140: GO 13314
13142: LD_INT 16
13144: DOUBLE
13145: EQUAL
13146: IFTRUE 13150
13148: GO 13175
13150: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13151: LD_ADDR_VAR 0 3
13155: PUSH
13156: LD_INT 84
13158: PPUSH
13159: LD_VAR 0 1
13163: PPUSH
13164: CALL_OW 321
13168: PUSH
13169: LD_INT 2
13171: EQUAL
13172: ST_TO_ADDR
13173: GO 13314
13175: LD_INT 19
13177: DOUBLE
13178: EQUAL
13179: IFTRUE 13189
13181: LD_INT 23
13183: DOUBLE
13184: EQUAL
13185: IFTRUE 13189
13187: GO 13214
13189: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13190: LD_ADDR_VAR 0 3
13194: PUSH
13195: LD_INT 83
13197: PPUSH
13198: LD_VAR 0 1
13202: PPUSH
13203: CALL_OW 321
13207: PUSH
13208: LD_INT 2
13210: EQUAL
13211: ST_TO_ADDR
13212: GO 13314
13214: LD_INT 17
13216: DOUBLE
13217: EQUAL
13218: IFTRUE 13222
13220: GO 13247
13222: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13223: LD_ADDR_VAR 0 3
13227: PUSH
13228: LD_INT 39
13230: PPUSH
13231: LD_VAR 0 1
13235: PPUSH
13236: CALL_OW 321
13240: PUSH
13241: LD_INT 2
13243: EQUAL
13244: ST_TO_ADDR
13245: GO 13314
13247: LD_INT 18
13249: DOUBLE
13250: EQUAL
13251: IFTRUE 13255
13253: GO 13280
13255: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13256: LD_ADDR_VAR 0 3
13260: PUSH
13261: LD_INT 40
13263: PPUSH
13264: LD_VAR 0 1
13268: PPUSH
13269: CALL_OW 321
13273: PUSH
13274: LD_INT 2
13276: EQUAL
13277: ST_TO_ADDR
13278: GO 13314
13280: LD_INT 27
13282: DOUBLE
13283: EQUAL
13284: IFTRUE 13288
13286: GO 13313
13288: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13289: LD_ADDR_VAR 0 3
13293: PUSH
13294: LD_INT 35
13296: PPUSH
13297: LD_VAR 0 1
13301: PPUSH
13302: CALL_OW 321
13306: PUSH
13307: LD_INT 2
13309: EQUAL
13310: ST_TO_ADDR
13311: GO 13314
13313: POP
// end ;
13314: LD_VAR 0 3
13318: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13319: LD_INT 0
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
13326: PPUSH
13327: PPUSH
13328: PPUSH
13329: PPUSH
13330: PPUSH
13331: PPUSH
// result := false ;
13332: LD_ADDR_VAR 0 6
13336: PUSH
13337: LD_INT 0
13339: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13340: LD_VAR 0 1
13344: NOT
13345: PUSH
13346: LD_VAR 0 1
13350: PPUSH
13351: CALL_OW 266
13355: PUSH
13356: LD_INT 0
13358: PUSH
13359: LD_INT 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: IN
13366: NOT
13367: OR
13368: PUSH
13369: LD_VAR 0 2
13373: NOT
13374: OR
13375: PUSH
13376: LD_VAR 0 5
13380: PUSH
13381: LD_INT 0
13383: PUSH
13384: LD_INT 1
13386: PUSH
13387: LD_INT 2
13389: PUSH
13390: LD_INT 3
13392: PUSH
13393: LD_INT 4
13395: PUSH
13396: LD_INT 5
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: IN
13407: NOT
13408: OR
13409: PUSH
13410: LD_VAR 0 3
13414: PPUSH
13415: LD_VAR 0 4
13419: PPUSH
13420: CALL_OW 488
13424: NOT
13425: OR
13426: IFFALSE 13430
// exit ;
13428: GO 14166
// side := GetSide ( depot ) ;
13430: LD_ADDR_VAR 0 9
13434: PUSH
13435: LD_VAR 0 1
13439: PPUSH
13440: CALL_OW 255
13444: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13445: LD_VAR 0 9
13449: PPUSH
13450: LD_VAR 0 2
13454: PPUSH
13455: CALL 12943 0 2
13459: NOT
13460: IFFALSE 13464
// exit ;
13462: GO 14166
// pom := GetBase ( depot ) ;
13464: LD_ADDR_VAR 0 10
13468: PUSH
13469: LD_VAR 0 1
13473: PPUSH
13474: CALL_OW 274
13478: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13479: LD_ADDR_VAR 0 11
13483: PUSH
13484: LD_VAR 0 2
13488: PPUSH
13489: LD_VAR 0 1
13493: PPUSH
13494: CALL_OW 248
13498: PPUSH
13499: CALL_OW 450
13503: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13504: LD_VAR 0 10
13508: PPUSH
13509: LD_INT 1
13511: PPUSH
13512: CALL_OW 275
13516: PUSH
13517: LD_VAR 0 11
13521: PUSH
13522: LD_INT 1
13524: ARRAY
13525: GREATEREQUAL
13526: PUSH
13527: LD_VAR 0 10
13531: PPUSH
13532: LD_INT 2
13534: PPUSH
13535: CALL_OW 275
13539: PUSH
13540: LD_VAR 0 11
13544: PUSH
13545: LD_INT 2
13547: ARRAY
13548: GREATEREQUAL
13549: AND
13550: PUSH
13551: LD_VAR 0 10
13555: PPUSH
13556: LD_INT 3
13558: PPUSH
13559: CALL_OW 275
13563: PUSH
13564: LD_VAR 0 11
13568: PUSH
13569: LD_INT 3
13571: ARRAY
13572: GREATEREQUAL
13573: AND
13574: NOT
13575: IFFALSE 13579
// exit ;
13577: GO 14166
// if GetBType ( depot ) = b_depot then
13579: LD_VAR 0 1
13583: PPUSH
13584: CALL_OW 266
13588: PUSH
13589: LD_INT 0
13591: EQUAL
13592: IFFALSE 13604
// dist := 28 else
13594: LD_ADDR_VAR 0 14
13598: PUSH
13599: LD_INT 28
13601: ST_TO_ADDR
13602: GO 13612
// dist := 36 ;
13604: LD_ADDR_VAR 0 14
13608: PUSH
13609: LD_INT 36
13611: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13612: LD_VAR 0 1
13616: PPUSH
13617: LD_VAR 0 3
13621: PPUSH
13622: LD_VAR 0 4
13626: PPUSH
13627: CALL_OW 297
13631: PUSH
13632: LD_VAR 0 14
13636: GREATER
13637: IFFALSE 13641
// exit ;
13639: GO 14166
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13641: LD_ADDR_VAR 0 12
13645: PUSH
13646: LD_VAR 0 2
13650: PPUSH
13651: LD_VAR 0 3
13655: PPUSH
13656: LD_VAR 0 4
13660: PPUSH
13661: LD_VAR 0 5
13665: PPUSH
13666: LD_VAR 0 1
13670: PPUSH
13671: CALL_OW 248
13675: PPUSH
13676: LD_INT 0
13678: PPUSH
13679: CALL 14171 0 6
13683: ST_TO_ADDR
// if not hexes then
13684: LD_VAR 0 12
13688: NOT
13689: IFFALSE 13693
// exit ;
13691: GO 14166
// hex := GetHexInfo ( x , y ) ;
13693: LD_ADDR_VAR 0 15
13697: PUSH
13698: LD_VAR 0 3
13702: PPUSH
13703: LD_VAR 0 4
13707: PPUSH
13708: CALL_OW 546
13712: ST_TO_ADDR
// if hex [ 1 ] then
13713: LD_VAR 0 15
13717: PUSH
13718: LD_INT 1
13720: ARRAY
13721: IFFALSE 13725
// exit ;
13723: GO 14166
// height := hex [ 2 ] ;
13725: LD_ADDR_VAR 0 13
13729: PUSH
13730: LD_VAR 0 15
13734: PUSH
13735: LD_INT 2
13737: ARRAY
13738: ST_TO_ADDR
// for i = 1 to hexes do
13739: LD_ADDR_VAR 0 7
13743: PUSH
13744: DOUBLE
13745: LD_INT 1
13747: DEC
13748: ST_TO_ADDR
13749: LD_VAR 0 12
13753: PUSH
13754: FOR_TO
13755: IFFALSE 14085
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13757: LD_VAR 0 12
13761: PUSH
13762: LD_VAR 0 7
13766: ARRAY
13767: PUSH
13768: LD_INT 1
13770: ARRAY
13771: PPUSH
13772: LD_VAR 0 12
13776: PUSH
13777: LD_VAR 0 7
13781: ARRAY
13782: PUSH
13783: LD_INT 2
13785: ARRAY
13786: PPUSH
13787: CALL_OW 488
13791: NOT
13792: PUSH
13793: LD_VAR 0 12
13797: PUSH
13798: LD_VAR 0 7
13802: ARRAY
13803: PUSH
13804: LD_INT 1
13806: ARRAY
13807: PPUSH
13808: LD_VAR 0 12
13812: PUSH
13813: LD_VAR 0 7
13817: ARRAY
13818: PUSH
13819: LD_INT 2
13821: ARRAY
13822: PPUSH
13823: CALL_OW 428
13827: PUSH
13828: LD_INT 0
13830: GREATER
13831: OR
13832: PUSH
13833: LD_VAR 0 12
13837: PUSH
13838: LD_VAR 0 7
13842: ARRAY
13843: PUSH
13844: LD_INT 1
13846: ARRAY
13847: PPUSH
13848: LD_VAR 0 12
13852: PUSH
13853: LD_VAR 0 7
13857: ARRAY
13858: PUSH
13859: LD_INT 2
13861: ARRAY
13862: PPUSH
13863: CALL_OW 351
13867: OR
13868: IFFALSE 13874
// exit ;
13870: POP
13871: POP
13872: GO 14166
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13874: LD_ADDR_VAR 0 8
13878: PUSH
13879: LD_VAR 0 12
13883: PUSH
13884: LD_VAR 0 7
13888: ARRAY
13889: PUSH
13890: LD_INT 1
13892: ARRAY
13893: PPUSH
13894: LD_VAR 0 12
13898: PUSH
13899: LD_VAR 0 7
13903: ARRAY
13904: PUSH
13905: LD_INT 2
13907: ARRAY
13908: PPUSH
13909: CALL_OW 546
13913: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
13914: LD_VAR 0 8
13918: PUSH
13919: LD_INT 1
13921: ARRAY
13922: PUSH
13923: LD_VAR 0 8
13927: PUSH
13928: LD_INT 2
13930: ARRAY
13931: PUSH
13932: LD_VAR 0 13
13936: PUSH
13937: LD_INT 2
13939: PLUS
13940: GREATER
13941: OR
13942: PUSH
13943: LD_VAR 0 8
13947: PUSH
13948: LD_INT 2
13950: ARRAY
13951: PUSH
13952: LD_VAR 0 13
13956: PUSH
13957: LD_INT 2
13959: MINUS
13960: LESS
13961: OR
13962: PUSH
13963: LD_VAR 0 8
13967: PUSH
13968: LD_INT 3
13970: ARRAY
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: LD_INT 8
13977: PUSH
13978: LD_INT 9
13980: PUSH
13981: LD_INT 10
13983: PUSH
13984: LD_INT 11
13986: PUSH
13987: LD_INT 12
13989: PUSH
13990: LD_INT 13
13992: PUSH
13993: LD_INT 16
13995: PUSH
13996: LD_INT 17
13998: PUSH
13999: LD_INT 18
14001: PUSH
14002: LD_INT 19
14004: PUSH
14005: LD_INT 20
14007: PUSH
14008: LD_INT 21
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: IN
14026: NOT
14027: OR
14028: PUSH
14029: LD_VAR 0 8
14033: PUSH
14034: LD_INT 5
14036: ARRAY
14037: NOT
14038: OR
14039: PUSH
14040: LD_VAR 0 8
14044: PUSH
14045: LD_INT 6
14047: ARRAY
14048: PUSH
14049: LD_INT 1
14051: PUSH
14052: LD_INT 2
14054: PUSH
14055: LD_INT 7
14057: PUSH
14058: LD_INT 9
14060: PUSH
14061: LD_INT 10
14063: PUSH
14064: LD_INT 11
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: IN
14075: NOT
14076: OR
14077: IFFALSE 14083
// exit ;
14079: POP
14080: POP
14081: GO 14166
// end ;
14083: GO 13754
14085: POP
14086: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14087: LD_VAR 0 9
14091: PPUSH
14092: LD_VAR 0 3
14096: PPUSH
14097: LD_VAR 0 4
14101: PPUSH
14102: LD_INT 20
14104: PPUSH
14105: CALL 6118 0 4
14109: PUSH
14110: LD_INT 4
14112: ARRAY
14113: IFFALSE 14117
// exit ;
14115: GO 14166
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14117: LD_VAR 0 2
14121: PUSH
14122: LD_INT 29
14124: PUSH
14125: LD_INT 30
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: IN
14132: PUSH
14133: LD_VAR 0 3
14137: PPUSH
14138: LD_VAR 0 4
14142: PPUSH
14143: LD_VAR 0 9
14147: PPUSH
14148: CALL_OW 440
14152: NOT
14153: AND
14154: IFFALSE 14158
// exit ;
14156: GO 14166
// result := true ;
14158: LD_ADDR_VAR 0 6
14162: PUSH
14163: LD_INT 1
14165: ST_TO_ADDR
// end ;
14166: LD_VAR 0 6
14170: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14171: LD_INT 0
14173: PPUSH
14174: PPUSH
14175: PPUSH
14176: PPUSH
14177: PPUSH
14178: PPUSH
14179: PPUSH
14180: PPUSH
14181: PPUSH
14182: PPUSH
14183: PPUSH
14184: PPUSH
14185: PPUSH
14186: PPUSH
14187: PPUSH
14188: PPUSH
14189: PPUSH
14190: PPUSH
14191: PPUSH
14192: PPUSH
14193: PPUSH
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
14198: PPUSH
14199: PPUSH
14200: PPUSH
14201: PPUSH
14202: PPUSH
14203: PPUSH
14204: PPUSH
14205: PPUSH
14206: PPUSH
14207: PPUSH
14208: PPUSH
14209: PPUSH
14210: PPUSH
14211: PPUSH
14212: PPUSH
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
14219: PPUSH
14220: PPUSH
14221: PPUSH
14222: PPUSH
14223: PPUSH
14224: PPUSH
14225: PPUSH
14226: PPUSH
14227: PPUSH
14228: PPUSH
14229: PPUSH
14230: PPUSH
// result = [ ] ;
14231: LD_ADDR_VAR 0 7
14235: PUSH
14236: EMPTY
14237: ST_TO_ADDR
// temp_list = [ ] ;
14238: LD_ADDR_VAR 0 9
14242: PUSH
14243: EMPTY
14244: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14245: LD_VAR 0 4
14249: PUSH
14250: LD_INT 0
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: LD_INT 2
14258: PUSH
14259: LD_INT 3
14261: PUSH
14262: LD_INT 4
14264: PUSH
14265: LD_INT 5
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: IN
14276: NOT
14277: PUSH
14278: LD_VAR 0 1
14282: PUSH
14283: LD_INT 0
14285: PUSH
14286: LD_INT 1
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: IN
14293: PUSH
14294: LD_VAR 0 5
14298: PUSH
14299: LD_INT 1
14301: PUSH
14302: LD_INT 2
14304: PUSH
14305: LD_INT 3
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: LIST
14312: IN
14313: NOT
14314: AND
14315: OR
14316: IFFALSE 14320
// exit ;
14318: GO 32711
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14320: LD_VAR 0 1
14324: PUSH
14325: LD_INT 6
14327: PUSH
14328: LD_INT 7
14330: PUSH
14331: LD_INT 8
14333: PUSH
14334: LD_INT 13
14336: PUSH
14337: LD_INT 12
14339: PUSH
14340: LD_INT 15
14342: PUSH
14343: LD_INT 11
14345: PUSH
14346: LD_INT 14
14348: PUSH
14349: LD_INT 10
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: IN
14363: IFFALSE 14373
// btype = b_lab ;
14365: LD_ADDR_VAR 0 1
14369: PUSH
14370: LD_INT 6
14372: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14373: LD_VAR 0 6
14377: PUSH
14378: LD_INT 0
14380: PUSH
14381: LD_INT 1
14383: PUSH
14384: LD_INT 2
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: LIST
14391: IN
14392: NOT
14393: PUSH
14394: LD_VAR 0 1
14398: PUSH
14399: LD_INT 0
14401: PUSH
14402: LD_INT 1
14404: PUSH
14405: LD_INT 2
14407: PUSH
14408: LD_INT 3
14410: PUSH
14411: LD_INT 6
14413: PUSH
14414: LD_INT 36
14416: PUSH
14417: LD_INT 4
14419: PUSH
14420: LD_INT 5
14422: PUSH
14423: LD_INT 31
14425: PUSH
14426: LD_INT 32
14428: PUSH
14429: LD_INT 33
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: IN
14445: NOT
14446: PUSH
14447: LD_VAR 0 6
14451: PUSH
14452: LD_INT 1
14454: EQUAL
14455: AND
14456: OR
14457: PUSH
14458: LD_VAR 0 1
14462: PUSH
14463: LD_INT 2
14465: PUSH
14466: LD_INT 3
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: IN
14473: NOT
14474: PUSH
14475: LD_VAR 0 6
14479: PUSH
14480: LD_INT 2
14482: EQUAL
14483: AND
14484: OR
14485: IFFALSE 14495
// mode = 0 ;
14487: LD_ADDR_VAR 0 6
14491: PUSH
14492: LD_INT 0
14494: ST_TO_ADDR
// case mode of 0 :
14495: LD_VAR 0 6
14499: PUSH
14500: LD_INT 0
14502: DOUBLE
14503: EQUAL
14504: IFTRUE 14508
14506: GO 25961
14508: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14509: LD_ADDR_VAR 0 11
14513: PUSH
14514: LD_INT 0
14516: PUSH
14517: LD_INT 0
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 0
14526: PUSH
14527: LD_INT 1
14529: NEG
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 1
14537: PUSH
14538: LD_INT 0
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 1
14547: PUSH
14548: LD_INT 1
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 0
14557: PUSH
14558: LD_INT 1
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 1
14567: NEG
14568: PUSH
14569: LD_INT 0
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 1
14578: NEG
14579: PUSH
14580: LD_INT 1
14582: NEG
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 1
14590: NEG
14591: PUSH
14592: LD_INT 2
14594: NEG
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: LD_INT 0
14602: PUSH
14603: LD_INT 2
14605: NEG
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 1
14613: PUSH
14614: LD_INT 1
14616: NEG
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 1
14624: PUSH
14625: LD_INT 2
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 0
14634: PUSH
14635: LD_INT 2
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 1
14644: NEG
14645: PUSH
14646: LD_INT 1
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 1
14655: PUSH
14656: LD_INT 3
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 0
14665: PUSH
14666: LD_INT 3
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 1
14675: NEG
14676: PUSH
14677: LD_INT 2
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14702: LD_ADDR_VAR 0 12
14706: PUSH
14707: LD_INT 0
14709: PUSH
14710: LD_INT 0
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 0
14719: PUSH
14720: LD_INT 1
14722: NEG
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 1
14730: PUSH
14731: LD_INT 0
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: LD_INT 1
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 0
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 1
14760: NEG
14761: PUSH
14762: LD_INT 0
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 1
14771: NEG
14772: PUSH
14773: LD_INT 1
14775: NEG
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 1
14783: PUSH
14784: LD_INT 1
14786: NEG
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: LD_INT 2
14794: PUSH
14795: LD_INT 0
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 2
14804: PUSH
14805: LD_INT 1
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 1
14814: NEG
14815: PUSH
14816: LD_INT 1
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 2
14825: NEG
14826: PUSH
14827: LD_INT 0
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 2
14836: NEG
14837: PUSH
14838: LD_INT 1
14840: NEG
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 2
14848: NEG
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 3
14859: NEG
14860: PUSH
14861: LD_INT 0
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 3
14870: NEG
14871: PUSH
14872: LD_INT 1
14874: NEG
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14898: LD_ADDR_VAR 0 13
14902: PUSH
14903: LD_INT 0
14905: PUSH
14906: LD_INT 0
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: LD_INT 0
14915: PUSH
14916: LD_INT 1
14918: NEG
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 1
14926: PUSH
14927: LD_INT 0
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: LD_INT 1
14936: PUSH
14937: LD_INT 1
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 0
14946: PUSH
14947: LD_INT 1
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: LD_INT 1
14956: NEG
14957: PUSH
14958: LD_INT 0
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 1
14967: NEG
14968: PUSH
14969: LD_INT 1
14971: NEG
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 1
14979: NEG
14980: PUSH
14981: LD_INT 2
14983: NEG
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 2
14991: PUSH
14992: LD_INT 1
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 2
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 1
15011: PUSH
15012: LD_INT 2
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PUSH
15019: LD_INT 2
15021: NEG
15022: PUSH
15023: LD_INT 1
15025: NEG
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 2
15033: NEG
15034: PUSH
15035: LD_INT 2
15037: NEG
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 2
15045: NEG
15046: PUSH
15047: LD_INT 3
15049: NEG
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 3
15057: NEG
15058: PUSH
15059: LD_INT 2
15061: NEG
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 3
15069: NEG
15070: PUSH
15071: LD_INT 3
15073: NEG
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15097: LD_ADDR_VAR 0 14
15101: PUSH
15102: LD_INT 0
15104: PUSH
15105: LD_INT 0
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PUSH
15112: LD_INT 0
15114: PUSH
15115: LD_INT 1
15117: NEG
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: LD_INT 1
15125: PUSH
15126: LD_INT 0
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 1
15135: PUSH
15136: LD_INT 1
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 0
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 1
15155: NEG
15156: PUSH
15157: LD_INT 0
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 1
15166: NEG
15167: PUSH
15168: LD_INT 1
15170: NEG
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 1
15178: NEG
15179: PUSH
15180: LD_INT 2
15182: NEG
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 0
15190: PUSH
15191: LD_INT 2
15193: NEG
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 1
15201: PUSH
15202: LD_INT 1
15204: NEG
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: LD_INT 1
15212: PUSH
15213: LD_INT 2
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 0
15222: PUSH
15223: LD_INT 2
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 1
15232: NEG
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 1
15243: NEG
15244: PUSH
15245: LD_INT 3
15247: NEG
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 0
15255: PUSH
15256: LD_INT 3
15258: NEG
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 1
15266: PUSH
15267: LD_INT 2
15269: NEG
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15293: LD_ADDR_VAR 0 15
15297: PUSH
15298: LD_INT 0
15300: PUSH
15301: LD_INT 0
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 0
15310: PUSH
15311: LD_INT 1
15313: NEG
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 1
15321: PUSH
15322: LD_INT 0
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 1
15331: PUSH
15332: LD_INT 1
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 0
15341: PUSH
15342: LD_INT 1
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 1
15351: NEG
15352: PUSH
15353: LD_INT 0
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 1
15362: NEG
15363: PUSH
15364: LD_INT 1
15366: NEG
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 1
15374: PUSH
15375: LD_INT 1
15377: NEG
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PUSH
15383: LD_INT 2
15385: PUSH
15386: LD_INT 0
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 2
15395: PUSH
15396: LD_INT 1
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 1
15405: NEG
15406: PUSH
15407: LD_INT 1
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: LD_INT 2
15416: NEG
15417: PUSH
15418: LD_INT 0
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 2
15427: NEG
15428: PUSH
15429: LD_INT 1
15431: NEG
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 2
15439: PUSH
15440: LD_INT 1
15442: NEG
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 3
15450: PUSH
15451: LD_INT 0
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 3
15460: PUSH
15461: LD_INT 1
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15486: LD_ADDR_VAR 0 16
15490: PUSH
15491: LD_INT 0
15493: PUSH
15494: LD_INT 0
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 0
15503: PUSH
15504: LD_INT 1
15506: NEG
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 1
15514: PUSH
15515: LD_INT 0
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 1
15524: PUSH
15525: LD_INT 1
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 0
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 1
15544: NEG
15545: PUSH
15546: LD_INT 0
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 1
15555: NEG
15556: PUSH
15557: LD_INT 1
15559: NEG
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 1
15567: NEG
15568: PUSH
15569: LD_INT 2
15571: NEG
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: LD_INT 1
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 2
15589: PUSH
15590: LD_INT 2
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 1
15599: PUSH
15600: LD_INT 2
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 2
15609: NEG
15610: PUSH
15611: LD_INT 1
15613: NEG
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 2
15621: NEG
15622: PUSH
15623: LD_INT 2
15625: NEG
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 3
15633: PUSH
15634: LD_INT 2
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 3
15643: PUSH
15644: LD_INT 3
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 2
15653: PUSH
15654: LD_INT 3
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15679: LD_ADDR_VAR 0 17
15683: PUSH
15684: LD_INT 0
15686: PUSH
15687: LD_INT 0
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 0
15696: PUSH
15697: LD_INT 1
15699: NEG
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 1
15707: PUSH
15708: LD_INT 0
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 1
15717: PUSH
15718: LD_INT 1
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 0
15727: PUSH
15728: LD_INT 1
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 1
15737: NEG
15738: PUSH
15739: LD_INT 0
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 1
15748: NEG
15749: PUSH
15750: LD_INT 1
15752: NEG
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 1
15760: NEG
15761: PUSH
15762: LD_INT 2
15764: NEG
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 0
15772: PUSH
15773: LD_INT 2
15775: NEG
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 1
15783: PUSH
15784: LD_INT 1
15786: NEG
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 2
15794: PUSH
15795: LD_INT 0
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: LD_INT 1
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 2
15814: PUSH
15815: LD_INT 2
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 1
15824: PUSH
15825: LD_INT 2
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 0
15834: PUSH
15835: LD_INT 2
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 1
15844: NEG
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: LD_INT 2
15855: NEG
15856: PUSH
15857: LD_INT 0
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 2
15866: NEG
15867: PUSH
15868: LD_INT 1
15870: NEG
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: LD_INT 2
15878: NEG
15879: PUSH
15880: LD_INT 2
15882: NEG
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15909: LD_ADDR_VAR 0 18
15913: PUSH
15914: LD_INT 0
15916: PUSH
15917: LD_INT 0
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 0
15926: PUSH
15927: LD_INT 1
15929: NEG
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 1
15937: PUSH
15938: LD_INT 0
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 1
15947: PUSH
15948: LD_INT 1
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 0
15957: PUSH
15958: LD_INT 1
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 1
15967: NEG
15968: PUSH
15969: LD_INT 0
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 1
15978: NEG
15979: PUSH
15980: LD_INT 1
15982: NEG
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 1
15990: NEG
15991: PUSH
15992: LD_INT 2
15994: NEG
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 0
16002: PUSH
16003: LD_INT 2
16005: NEG
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: LD_INT 1
16016: NEG
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: LD_INT 0
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 2
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 2
16044: PUSH
16045: LD_INT 2
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 1
16054: PUSH
16055: LD_INT 2
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 0
16064: PUSH
16065: LD_INT 2
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 1
16074: NEG
16075: PUSH
16076: LD_INT 1
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: LD_INT 2
16085: NEG
16086: PUSH
16087: LD_INT 0
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 2
16096: NEG
16097: PUSH
16098: LD_INT 1
16100: NEG
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 2
16108: NEG
16109: PUSH
16110: LD_INT 2
16112: NEG
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16139: LD_ADDR_VAR 0 19
16143: PUSH
16144: LD_INT 0
16146: PUSH
16147: LD_INT 0
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 0
16156: PUSH
16157: LD_INT 1
16159: NEG
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: LD_INT 0
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 1
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 0
16187: PUSH
16188: LD_INT 1
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 1
16197: NEG
16198: PUSH
16199: LD_INT 0
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 1
16208: NEG
16209: PUSH
16210: LD_INT 1
16212: NEG
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 1
16220: NEG
16221: PUSH
16222: LD_INT 2
16224: NEG
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 0
16232: PUSH
16233: LD_INT 2
16235: NEG
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 1
16243: PUSH
16244: LD_INT 1
16246: NEG
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 2
16254: PUSH
16255: LD_INT 0
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: LD_INT 1
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 2
16274: PUSH
16275: LD_INT 2
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 1
16284: PUSH
16285: LD_INT 2
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 0
16294: PUSH
16295: LD_INT 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 1
16304: NEG
16305: PUSH
16306: LD_INT 1
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 2
16315: NEG
16316: PUSH
16317: LD_INT 0
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 2
16326: NEG
16327: PUSH
16328: LD_INT 1
16330: NEG
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 2
16338: NEG
16339: PUSH
16340: LD_INT 2
16342: NEG
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16369: LD_ADDR_VAR 0 20
16373: PUSH
16374: LD_INT 0
16376: PUSH
16377: LD_INT 0
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 0
16386: PUSH
16387: LD_INT 1
16389: NEG
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 1
16397: PUSH
16398: LD_INT 0
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 1
16407: PUSH
16408: LD_INT 1
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 0
16417: PUSH
16418: LD_INT 1
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 1
16427: NEG
16428: PUSH
16429: LD_INT 0
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 1
16438: NEG
16439: PUSH
16440: LD_INT 1
16442: NEG
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 1
16450: NEG
16451: PUSH
16452: LD_INT 2
16454: NEG
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 0
16462: PUSH
16463: LD_INT 2
16465: NEG
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 1
16473: PUSH
16474: LD_INT 1
16476: NEG
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: LD_INT 0
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: LD_INT 1
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 2
16504: PUSH
16505: LD_INT 2
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 1
16514: PUSH
16515: LD_INT 2
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 0
16524: PUSH
16525: LD_INT 2
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: NEG
16535: PUSH
16536: LD_INT 1
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 2
16545: NEG
16546: PUSH
16547: LD_INT 0
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 2
16556: NEG
16557: PUSH
16558: LD_INT 1
16560: NEG
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 2
16568: NEG
16569: PUSH
16570: LD_INT 2
16572: NEG
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16599: LD_ADDR_VAR 0 21
16603: PUSH
16604: LD_INT 0
16606: PUSH
16607: LD_INT 0
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 0
16616: PUSH
16617: LD_INT 1
16619: NEG
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 1
16627: PUSH
16628: LD_INT 0
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: LD_INT 1
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 0
16647: PUSH
16648: LD_INT 1
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 1
16657: NEG
16658: PUSH
16659: LD_INT 0
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 1
16668: NEG
16669: PUSH
16670: LD_INT 1
16672: NEG
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 1
16680: NEG
16681: PUSH
16682: LD_INT 2
16684: NEG
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 0
16692: PUSH
16693: LD_INT 2
16695: NEG
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: LD_INT 1
16706: NEG
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 2
16714: PUSH
16715: LD_INT 0
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 2
16724: PUSH
16725: LD_INT 1
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 2
16734: PUSH
16735: LD_INT 2
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 1
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 0
16754: PUSH
16755: LD_INT 2
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 1
16764: NEG
16765: PUSH
16766: LD_INT 1
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 2
16775: NEG
16776: PUSH
16777: LD_INT 0
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 2
16786: NEG
16787: PUSH
16788: LD_INT 1
16790: NEG
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 2
16798: NEG
16799: PUSH
16800: LD_INT 2
16802: NEG
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16829: LD_ADDR_VAR 0 22
16833: PUSH
16834: LD_INT 0
16836: PUSH
16837: LD_INT 0
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 0
16846: PUSH
16847: LD_INT 1
16849: NEG
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 1
16857: PUSH
16858: LD_INT 0
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 1
16867: PUSH
16868: LD_INT 1
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 0
16877: PUSH
16878: LD_INT 1
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 1
16887: NEG
16888: PUSH
16889: LD_INT 0
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 1
16898: NEG
16899: PUSH
16900: LD_INT 1
16902: NEG
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 1
16910: NEG
16911: PUSH
16912: LD_INT 2
16914: NEG
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 0
16922: PUSH
16923: LD_INT 2
16925: NEG
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 1
16933: PUSH
16934: LD_INT 1
16936: NEG
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 2
16944: PUSH
16945: LD_INT 0
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 2
16954: PUSH
16955: LD_INT 1
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 2
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 1
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 0
16984: PUSH
16985: LD_INT 2
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 1
16994: NEG
16995: PUSH
16996: LD_INT 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 2
17005: NEG
17006: PUSH
17007: LD_INT 0
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 2
17016: NEG
17017: PUSH
17018: LD_INT 1
17020: NEG
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 2
17028: NEG
17029: PUSH
17030: LD_INT 2
17032: NEG
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17059: LD_ADDR_VAR 0 23
17063: PUSH
17064: LD_INT 0
17066: PUSH
17067: LD_INT 0
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 0
17076: PUSH
17077: LD_INT 1
17079: NEG
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 1
17087: PUSH
17088: LD_INT 0
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 1
17097: PUSH
17098: LD_INT 1
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 0
17107: PUSH
17108: LD_INT 1
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 1
17117: NEG
17118: PUSH
17119: LD_INT 0
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 1
17128: NEG
17129: PUSH
17130: LD_INT 1
17132: NEG
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 1
17140: NEG
17141: PUSH
17142: LD_INT 2
17144: NEG
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 0
17152: PUSH
17153: LD_INT 2
17155: NEG
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 1
17163: PUSH
17164: LD_INT 1
17166: NEG
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 2
17174: PUSH
17175: LD_INT 0
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 2
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 2
17194: PUSH
17195: LD_INT 2
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: LD_INT 2
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 0
17214: PUSH
17215: LD_INT 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 1
17224: NEG
17225: PUSH
17226: LD_INT 1
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 2
17235: NEG
17236: PUSH
17237: LD_INT 0
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 2
17246: NEG
17247: PUSH
17248: LD_INT 1
17250: NEG
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 2
17258: NEG
17259: PUSH
17260: LD_INT 2
17262: NEG
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 2
17270: NEG
17271: PUSH
17272: LD_INT 3
17274: NEG
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 1
17282: NEG
17283: PUSH
17284: LD_INT 3
17286: NEG
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 1
17294: PUSH
17295: LD_INT 2
17297: NEG
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 2
17305: PUSH
17306: LD_INT 1
17308: NEG
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17339: LD_ADDR_VAR 0 24
17343: PUSH
17344: LD_INT 0
17346: PUSH
17347: LD_INT 0
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 0
17356: PUSH
17357: LD_INT 1
17359: NEG
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 1
17367: PUSH
17368: LD_INT 0
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 1
17377: PUSH
17378: LD_INT 1
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 0
17387: PUSH
17388: LD_INT 1
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 1
17397: NEG
17398: PUSH
17399: LD_INT 0
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 1
17408: NEG
17409: PUSH
17410: LD_INT 1
17412: NEG
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 1
17420: NEG
17421: PUSH
17422: LD_INT 2
17424: NEG
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 0
17432: PUSH
17433: LD_INT 2
17435: NEG
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 1
17443: PUSH
17444: LD_INT 1
17446: NEG
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 2
17454: PUSH
17455: LD_INT 0
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 2
17474: PUSH
17475: LD_INT 2
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 1
17484: PUSH
17485: LD_INT 2
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 0
17494: PUSH
17495: LD_INT 2
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: LD_INT 1
17504: NEG
17505: PUSH
17506: LD_INT 1
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 2
17515: NEG
17516: PUSH
17517: LD_INT 0
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 2
17526: NEG
17527: PUSH
17528: LD_INT 1
17530: NEG
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 2
17538: NEG
17539: PUSH
17540: LD_INT 2
17542: NEG
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 1
17550: PUSH
17551: LD_INT 2
17553: NEG
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 2
17561: PUSH
17562: LD_INT 1
17564: NEG
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 3
17572: PUSH
17573: LD_INT 1
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 3
17582: PUSH
17583: LD_INT 2
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17615: LD_ADDR_VAR 0 25
17619: PUSH
17620: LD_INT 0
17622: PUSH
17623: LD_INT 0
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 0
17632: PUSH
17633: LD_INT 1
17635: NEG
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 1
17643: PUSH
17644: LD_INT 0
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 1
17653: PUSH
17654: LD_INT 1
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 0
17663: PUSH
17664: LD_INT 1
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: LD_INT 0
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 1
17684: NEG
17685: PUSH
17686: LD_INT 1
17688: NEG
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 1
17696: NEG
17697: PUSH
17698: LD_INT 2
17700: NEG
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 0
17708: PUSH
17709: LD_INT 2
17711: NEG
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 1
17719: PUSH
17720: LD_INT 1
17722: NEG
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 2
17730: PUSH
17731: LD_INT 0
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 2
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 2
17750: PUSH
17751: LD_INT 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 1
17760: PUSH
17761: LD_INT 2
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 0
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 1
17780: NEG
17781: PUSH
17782: LD_INT 1
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 2
17791: NEG
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 2
17802: NEG
17803: PUSH
17804: LD_INT 1
17806: NEG
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 2
17814: NEG
17815: PUSH
17816: LD_INT 2
17818: NEG
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 3
17826: PUSH
17827: LD_INT 1
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 3
17836: PUSH
17837: LD_INT 2
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 2
17846: PUSH
17847: LD_INT 3
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 3
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
17889: LD_ADDR_VAR 0 26
17893: PUSH
17894: LD_INT 0
17896: PUSH
17897: LD_INT 0
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 0
17906: PUSH
17907: LD_INT 1
17909: NEG
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: LD_INT 0
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 1
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 0
17937: PUSH
17938: LD_INT 1
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 1
17947: NEG
17948: PUSH
17949: LD_INT 0
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 1
17958: NEG
17959: PUSH
17960: LD_INT 1
17962: NEG
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: LD_INT 2
17974: NEG
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 0
17982: PUSH
17983: LD_INT 2
17985: NEG
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 1
17993: PUSH
17994: LD_INT 1
17996: NEG
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 2
18004: PUSH
18005: LD_INT 0
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 2
18014: PUSH
18015: LD_INT 1
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 2
18024: PUSH
18025: LD_INT 2
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: LD_INT 2
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: LD_INT 2
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: LD_INT 1
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 2
18065: NEG
18066: PUSH
18067: LD_INT 0
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 2
18076: NEG
18077: PUSH
18078: LD_INT 1
18080: NEG
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 2
18088: NEG
18089: PUSH
18090: LD_INT 2
18092: NEG
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 2
18100: PUSH
18101: LD_INT 3
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 1
18110: PUSH
18111: LD_INT 3
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: NEG
18121: PUSH
18122: LD_INT 2
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 2
18131: NEG
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18165: LD_ADDR_VAR 0 27
18169: PUSH
18170: LD_INT 0
18172: PUSH
18173: LD_INT 0
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 0
18182: PUSH
18183: LD_INT 1
18185: NEG
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 0
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 1
18223: NEG
18224: PUSH
18225: LD_INT 0
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 1
18234: NEG
18235: PUSH
18236: LD_INT 1
18238: NEG
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 1
18246: NEG
18247: PUSH
18248: LD_INT 2
18250: NEG
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 0
18258: PUSH
18259: LD_INT 2
18261: NEG
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: PUSH
18270: LD_INT 1
18272: NEG
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: LD_INT 2
18280: PUSH
18281: LD_INT 0
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: LD_INT 2
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: LD_INT 2
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 0
18320: PUSH
18321: LD_INT 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 1
18330: NEG
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 2
18341: NEG
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 2
18352: NEG
18353: PUSH
18354: LD_INT 1
18356: NEG
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 2
18364: NEG
18365: PUSH
18366: LD_INT 2
18368: NEG
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 1
18376: NEG
18377: PUSH
18378: LD_INT 2
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 2
18387: NEG
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 3
18398: NEG
18399: PUSH
18400: LD_INT 1
18402: NEG
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 3
18410: NEG
18411: PUSH
18412: LD_INT 2
18414: NEG
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18445: LD_ADDR_VAR 0 28
18449: PUSH
18450: LD_INT 0
18452: PUSH
18453: LD_INT 0
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: LD_INT 1
18465: NEG
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: LD_INT 0
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 1
18483: PUSH
18484: LD_INT 1
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: LD_INT 1
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 1
18503: NEG
18504: PUSH
18505: LD_INT 0
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 1
18514: NEG
18515: PUSH
18516: LD_INT 1
18518: NEG
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 1
18526: NEG
18527: PUSH
18528: LD_INT 2
18530: NEG
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 0
18538: PUSH
18539: LD_INT 2
18541: NEG
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 1
18549: PUSH
18550: LD_INT 1
18552: NEG
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 2
18560: PUSH
18561: LD_INT 0
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 2
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: LD_INT 2
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 1
18590: PUSH
18591: LD_INT 2
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 0
18600: PUSH
18601: LD_INT 2
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 1
18610: NEG
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 2
18621: NEG
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 2
18632: NEG
18633: PUSH
18634: LD_INT 1
18636: NEG
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 2
18644: NEG
18645: PUSH
18646: LD_INT 2
18648: NEG
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 2
18656: NEG
18657: PUSH
18658: LD_INT 3
18660: NEG
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: LD_INT 3
18672: NEG
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 3
18680: NEG
18681: PUSH
18682: LD_INT 1
18684: NEG
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 3
18692: NEG
18693: PUSH
18694: LD_INT 2
18696: NEG
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18727: LD_ADDR_VAR 0 29
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 0
18744: PUSH
18745: LD_INT 1
18747: NEG
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: LD_INT 0
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 1
18796: NEG
18797: PUSH
18798: LD_INT 1
18800: NEG
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 1
18808: NEG
18809: PUSH
18810: LD_INT 2
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: LD_INT 2
18823: NEG
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: LD_INT 1
18834: NEG
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 2
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 2
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: LD_INT 2
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: LD_INT 2
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 1
18882: NEG
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 2
18893: NEG
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 2
18905: NEG
18906: PUSH
18907: LD_INT 2
18909: NEG
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 2
18917: NEG
18918: PUSH
18919: LD_INT 3
18921: NEG
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 2
18929: PUSH
18930: LD_INT 1
18932: NEG
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 3
18940: PUSH
18941: LD_INT 1
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: LD_INT 3
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 1
18960: NEG
18961: PUSH
18962: LD_INT 2
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 3
18971: NEG
18972: PUSH
18973: LD_INT 2
18975: NEG
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19006: LD_ADDR_VAR 0 30
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 0
19023: PUSH
19024: LD_INT 1
19026: NEG
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: LD_INT 0
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 0
19054: PUSH
19055: LD_INT 1
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 1
19064: NEG
19065: PUSH
19066: LD_INT 0
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 1
19075: NEG
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 1
19087: NEG
19088: PUSH
19089: LD_INT 2
19091: NEG
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 0
19099: PUSH
19100: LD_INT 2
19102: NEG
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 1
19110: PUSH
19111: LD_INT 1
19113: NEG
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 2
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 2
19141: PUSH
19142: LD_INT 2
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 1
19151: PUSH
19152: LD_INT 2
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 2
19172: NEG
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 2
19183: NEG
19184: PUSH
19185: LD_INT 1
19187: NEG
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 1
19195: NEG
19196: PUSH
19197: LD_INT 3
19199: NEG
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: LD_INT 2
19210: NEG
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 3
19218: PUSH
19219: LD_INT 2
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: LD_INT 3
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 2
19238: NEG
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 3
19249: NEG
19250: PUSH
19251: LD_INT 1
19253: NEG
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19284: LD_ADDR_VAR 0 31
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 0
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: NEG
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 1
19353: NEG
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: NEG
19366: PUSH
19367: LD_INT 2
19369: NEG
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 0
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 2
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 2
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: LD_INT 2
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 2
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 2
19449: NEG
19450: PUSH
19451: LD_INT 1
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 2
19461: NEG
19462: PUSH
19463: LD_INT 2
19465: NEG
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 2
19473: NEG
19474: PUSH
19475: LD_INT 3
19477: NEG
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: LD_INT 1
19488: NEG
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 3
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: LD_INT 3
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 1
19516: NEG
19517: PUSH
19518: LD_INT 2
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 3
19527: NEG
19528: PUSH
19529: LD_INT 2
19531: NEG
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19562: LD_ADDR_VAR 0 32
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: LD_INT 0
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: LD_INT 1
19582: NEG
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: LD_INT 0
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 1
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 0
19610: PUSH
19611: LD_INT 1
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 1
19620: NEG
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: PUSH
19633: LD_INT 1
19635: NEG
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 1
19643: NEG
19644: PUSH
19645: LD_INT 2
19647: NEG
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 0
19655: PUSH
19656: LD_INT 2
19658: NEG
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: LD_INT 1
19669: NEG
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 2
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: LD_INT 2
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: LD_INT 2
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: LD_INT 1
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 2
19728: NEG
19729: PUSH
19730: LD_INT 0
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 2
19739: NEG
19740: PUSH
19741: LD_INT 1
19743: NEG
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 1
19751: NEG
19752: PUSH
19753: LD_INT 3
19755: NEG
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: LD_INT 2
19766: NEG
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 3
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 2
19784: PUSH
19785: LD_INT 3
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: NEG
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 3
19805: NEG
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19840: LD_ADDR_VAR 0 33
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: LD_INT 0
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 0
19857: PUSH
19858: LD_INT 1
19860: NEG
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: LD_INT 0
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: PUSH
19879: LD_INT 1
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: LD_INT 1
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: NEG
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: LD_INT 1
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: NEG
19922: PUSH
19923: LD_INT 2
19925: NEG
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: LD_INT 1
19936: NEG
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 2
19944: PUSH
19945: LD_INT 0
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 2
19954: PUSH
19955: LD_INT 1
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 0
19974: PUSH
19975: LD_INT 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 1
19984: NEG
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: NEG
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 2
20006: NEG
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 2
20018: NEG
20019: PUSH
20020: LD_INT 2
20022: NEG
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 2
20030: NEG
20031: PUSH
20032: LD_INT 3
20034: NEG
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 2
20042: PUSH
20043: LD_INT 1
20045: NEG
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 3
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: LD_INT 3
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: LD_INT 2
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 3
20084: NEG
20085: PUSH
20086: LD_INT 2
20088: NEG
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20119: LD_ADDR_VAR 0 34
20123: PUSH
20124: LD_INT 0
20126: PUSH
20127: LD_INT 0
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 0
20136: PUSH
20137: LD_INT 1
20139: NEG
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 1
20147: PUSH
20148: LD_INT 0
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 1
20177: NEG
20178: PUSH
20179: LD_INT 0
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: LD_INT 1
20192: NEG
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 1
20200: NEG
20201: PUSH
20202: LD_INT 2
20204: NEG
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 0
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 1
20223: PUSH
20224: LD_INT 1
20226: NEG
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 2
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 2
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: NEG
20265: PUSH
20266: LD_INT 1
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: NEG
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 2
20286: NEG
20287: PUSH
20288: LD_INT 1
20290: NEG
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: NEG
20299: PUSH
20300: LD_INT 2
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: LD_INT 3
20314: NEG
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 3
20333: PUSH
20334: LD_INT 2
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 2
20343: PUSH
20344: LD_INT 3
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 2
20353: NEG
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 3
20364: NEG
20365: PUSH
20366: LD_INT 1
20368: NEG
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20399: LD_ADDR_VAR 0 35
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: LD_INT 0
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: LD_INT 1
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: LD_INT 0
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 1
20437: PUSH
20438: LD_INT 1
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 0
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 1
20457: NEG
20458: PUSH
20459: LD_INT 0
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 1
20468: NEG
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 2
20490: NEG
20491: PUSH
20492: LD_INT 1
20494: NEG
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20511: LD_ADDR_VAR 0 36
20515: PUSH
20516: LD_INT 0
20518: PUSH
20519: LD_INT 0
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 0
20528: PUSH
20529: LD_INT 1
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: LD_INT 1
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: NEG
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: LD_INT 1
20584: NEG
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: NEG
20593: PUSH
20594: LD_INT 2
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 1
20604: PUSH
20605: LD_INT 2
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20623: LD_ADDR_VAR 0 37
20627: PUSH
20628: LD_INT 0
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 1
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: LD_INT 1
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 1
20692: NEG
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: LD_INT 1
20707: NEG
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20735: LD_ADDR_VAR 0 38
20739: PUSH
20740: LD_INT 0
20742: PUSH
20743: LD_INT 0
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 0
20752: PUSH
20753: LD_INT 1
20755: NEG
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 1
20763: PUSH
20764: LD_INT 0
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 1
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 0
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 1
20793: NEG
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 1
20804: NEG
20805: PUSH
20806: LD_INT 1
20808: NEG
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: LD_INT 1
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 2
20826: NEG
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20847: LD_ADDR_VAR 0 39
20851: PUSH
20852: LD_INT 0
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: LD_INT 1
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: LD_INT 1
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 0
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 1
20905: NEG
20906: PUSH
20907: LD_INT 0
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 1
20916: NEG
20917: PUSH
20918: LD_INT 1
20920: NEG
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: LD_INT 2
20932: NEG
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20959: LD_ADDR_VAR 0 40
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: LD_INT 1
20979: NEG
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: LD_INT 0
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 1
20997: PUSH
20998: LD_INT 1
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 0
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 1
21017: NEG
21018: PUSH
21019: LD_INT 0
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: LD_INT 1
21043: NEG
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 1
21051: NEG
21052: PUSH
21053: LD_INT 1
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21071: LD_ADDR_VAR 0 41
21075: PUSH
21076: LD_INT 0
21078: PUSH
21079: LD_INT 0
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: LD_INT 1
21091: NEG
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 1
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 1
21129: NEG
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 1
21140: NEG
21141: PUSH
21142: LD_INT 1
21144: NEG
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: NEG
21153: PUSH
21154: LD_INT 2
21156: NEG
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: PUSH
21165: LD_INT 1
21167: NEG
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 2
21185: PUSH
21186: LD_INT 1
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 2
21226: NEG
21227: PUSH
21228: LD_INT 0
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 2
21237: NEG
21238: PUSH
21239: LD_INT 1
21241: NEG
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 2
21249: NEG
21250: PUSH
21251: LD_INT 2
21253: NEG
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 2
21261: NEG
21262: PUSH
21263: LD_INT 3
21265: NEG
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 2
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 3
21284: PUSH
21285: LD_INT 0
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 3
21294: PUSH
21295: LD_INT 1
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 3
21304: PUSH
21305: LD_INT 2
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 3
21314: PUSH
21315: LD_INT 3
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: LD_INT 3
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 2
21334: NEG
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 3
21345: NEG
21346: PUSH
21347: LD_INT 0
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 3
21356: NEG
21357: PUSH
21358: LD_INT 1
21360: NEG
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 3
21368: NEG
21369: PUSH
21370: LD_INT 2
21372: NEG
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 3
21380: NEG
21381: PUSH
21382: LD_INT 3
21384: NEG
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21421: LD_ADDR_VAR 0 42
21425: PUSH
21426: LD_INT 0
21428: PUSH
21429: LD_INT 0
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 0
21438: PUSH
21439: LD_INT 1
21441: NEG
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: LD_INT 0
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: LD_INT 1
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 0
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 1
21479: NEG
21480: PUSH
21481: LD_INT 0
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 1
21490: NEG
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 1
21502: NEG
21503: PUSH
21504: LD_INT 2
21506: NEG
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 0
21514: PUSH
21515: LD_INT 2
21517: NEG
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: LD_INT 1
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 2
21536: PUSH
21537: LD_INT 1
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 2
21546: PUSH
21547: LD_INT 2
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 1
21556: PUSH
21557: LD_INT 2
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 0
21566: PUSH
21567: LD_INT 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 1
21576: NEG
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 2
21587: NEG
21588: PUSH
21589: LD_INT 1
21591: NEG
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 2
21599: NEG
21600: PUSH
21601: LD_INT 2
21603: NEG
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 2
21611: NEG
21612: PUSH
21613: LD_INT 3
21615: NEG
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 1
21623: NEG
21624: PUSH
21625: LD_INT 3
21627: NEG
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 0
21635: PUSH
21636: LD_INT 3
21638: NEG
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: LD_INT 2
21649: NEG
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 3
21657: PUSH
21658: LD_INT 2
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 3
21667: PUSH
21668: LD_INT 3
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: LD_INT 3
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 1
21687: PUSH
21688: LD_INT 3
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: LD_INT 3
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: LD_INT 2
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 3
21718: NEG
21719: PUSH
21720: LD_INT 2
21722: NEG
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 3
21730: NEG
21731: PUSH
21732: LD_INT 3
21734: NEG
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21771: LD_ADDR_VAR 0 43
21775: PUSH
21776: LD_INT 0
21778: PUSH
21779: LD_INT 0
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: LD_INT 1
21791: NEG
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: LD_INT 0
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 0
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: LD_INT 1
21844: NEG
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: NEG
21853: PUSH
21854: LD_INT 2
21856: NEG
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 0
21864: PUSH
21865: LD_INT 2
21867: NEG
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: LD_INT 1
21878: NEG
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 2
21886: PUSH
21887: LD_INT 0
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 2
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: LD_INT 2
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 0
21916: PUSH
21917: LD_INT 2
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 1
21926: NEG
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 2
21937: NEG
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 2
21948: NEG
21949: PUSH
21950: LD_INT 1
21952: NEG
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: LD_INT 3
21964: NEG
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 0
21972: PUSH
21973: LD_INT 3
21975: NEG
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: LD_INT 2
21986: NEG
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 2
21994: PUSH
21995: LD_INT 1
21997: NEG
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 3
22005: PUSH
22006: LD_INT 0
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 3
22015: PUSH
22016: LD_INT 1
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: LD_INT 3
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 0
22035: PUSH
22036: LD_INT 3
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: LD_INT 2
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 2
22056: NEG
22057: PUSH
22058: LD_INT 1
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 3
22067: NEG
22068: PUSH
22069: LD_INT 0
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 3
22078: NEG
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22119: LD_ADDR_VAR 0 44
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: LD_INT 0
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: LD_INT 1
22139: NEG
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 1
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 0
22167: PUSH
22168: LD_INT 1
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 1
22177: NEG
22178: PUSH
22179: LD_INT 0
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: LD_INT 1
22192: NEG
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 1
22200: NEG
22201: PUSH
22202: LD_INT 2
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: LD_INT 1
22215: NEG
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: LD_INT 1
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 2
22243: PUSH
22244: LD_INT 2
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: LD_INT 2
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: LD_INT 1
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 2
22274: NEG
22275: PUSH
22276: LD_INT 0
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 2
22285: NEG
22286: PUSH
22287: LD_INT 1
22289: NEG
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 2
22297: NEG
22298: PUSH
22299: LD_INT 2
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 2
22309: NEG
22310: PUSH
22311: LD_INT 3
22313: NEG
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 2
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 3
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 3
22342: PUSH
22343: LD_INT 1
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 3
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 3
22362: PUSH
22363: LD_INT 3
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 3
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 2
22382: NEG
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 3
22393: NEG
22394: PUSH
22395: LD_INT 0
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 3
22404: NEG
22405: PUSH
22406: LD_INT 1
22408: NEG
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 3
22416: NEG
22417: PUSH
22418: LD_INT 2
22420: NEG
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 3
22428: NEG
22429: PUSH
22430: LD_INT 3
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22469: LD_ADDR_VAR 0 45
22473: PUSH
22474: LD_INT 0
22476: PUSH
22477: LD_INT 0
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: LD_INT 1
22489: NEG
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 0
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: NEG
22539: PUSH
22540: LD_INT 1
22542: NEG
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: LD_INT 2
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: LD_INT 2
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 0
22614: PUSH
22615: LD_INT 2
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: NEG
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 2
22635: NEG
22636: PUSH
22637: LD_INT 1
22639: NEG
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 2
22647: NEG
22648: PUSH
22649: LD_INT 2
22651: NEG
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: NEG
22660: PUSH
22661: LD_INT 3
22663: NEG
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: LD_INT 3
22675: NEG
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 0
22683: PUSH
22684: LD_INT 3
22686: NEG
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: LD_INT 2
22697: NEG
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 3
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 3
22715: PUSH
22716: LD_INT 3
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 2
22725: PUSH
22726: LD_INT 3
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 1
22735: PUSH
22736: LD_INT 3
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 0
22745: PUSH
22746: LD_INT 3
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 1
22755: NEG
22756: PUSH
22757: LD_INT 2
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 3
22766: NEG
22767: PUSH
22768: LD_INT 2
22770: NEG
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 3
22778: NEG
22779: PUSH
22780: LD_INT 3
22782: NEG
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22819: LD_ADDR_VAR 0 46
22823: PUSH
22824: LD_INT 0
22826: PUSH
22827: LD_INT 0
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 0
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: LD_INT 0
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: LD_INT 1
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 0
22867: PUSH
22868: LD_INT 1
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 1
22877: NEG
22878: PUSH
22879: LD_INT 0
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: LD_INT 1
22892: NEG
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: LD_INT 2
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 0
22912: PUSH
22913: LD_INT 2
22915: NEG
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: LD_INT 1
22926: NEG
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 2
22934: PUSH
22935: LD_INT 0
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 2
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: LD_INT 2
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 1
22974: NEG
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 2
22985: NEG
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 2
22996: NEG
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: NEG
23009: PUSH
23010: LD_INT 3
23012: NEG
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: LD_INT 3
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 2
23034: NEG
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 2
23042: PUSH
23043: LD_INT 1
23045: NEG
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 3
23053: PUSH
23054: LD_INT 0
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 3
23063: PUSH
23064: LD_INT 1
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: LD_INT 3
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 0
23083: PUSH
23084: LD_INT 3
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 1
23093: NEG
23094: PUSH
23095: LD_INT 2
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 2
23104: NEG
23105: PUSH
23106: LD_INT 1
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 3
23115: NEG
23116: PUSH
23117: LD_INT 0
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 3
23126: NEG
23127: PUSH
23128: LD_INT 1
23130: NEG
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23167: LD_ADDR_VAR 0 47
23171: PUSH
23172: LD_INT 0
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: LD_INT 1
23187: NEG
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 1
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 1
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: LD_INT 0
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: NEG
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 1
23248: NEG
23249: PUSH
23250: LD_INT 2
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 0
23260: PUSH
23261: LD_INT 2
23263: NEG
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: LD_INT 1
23274: NEG
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 2
23282: NEG
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 2
23294: NEG
23295: PUSH
23296: LD_INT 2
23298: NEG
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23318: LD_ADDR_VAR 0 48
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 0
23335: PUSH
23336: LD_INT 1
23338: NEG
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 1
23376: NEG
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: LD_INT 1
23391: NEG
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 1
23399: NEG
23400: PUSH
23401: LD_INT 2
23403: NEG
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 0
23411: PUSH
23412: LD_INT 2
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: LD_INT 1
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 2
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23465: LD_ADDR_VAR 0 49
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: LD_INT 0
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: LD_INT 1
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: LD_INT 0
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 0
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: NEG
23524: PUSH
23525: LD_INT 0
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 1
23534: NEG
23535: PUSH
23536: LD_INT 1
23538: NEG
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 2
23557: PUSH
23558: LD_INT 0
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 2
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 2
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: LD_INT 2
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23609: LD_ADDR_VAR 0 50
23613: PUSH
23614: LD_INT 0
23616: PUSH
23617: LD_INT 0
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 0
23626: PUSH
23627: LD_INT 1
23629: NEG
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 1
23667: NEG
23668: PUSH
23669: LD_INT 0
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: NEG
23679: PUSH
23680: LD_INT 1
23682: NEG
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 2
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 2
23700: PUSH
23701: LD_INT 2
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 1
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: LD_INT 2
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: LD_INT 1
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23753: LD_ADDR_VAR 0 51
23757: PUSH
23758: LD_INT 0
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: LD_INT 0
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 1
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 0
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 1
23822: NEG
23823: PUSH
23824: LD_INT 1
23826: NEG
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: LD_INT 2
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: LD_INT 2
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 1
23854: NEG
23855: PUSH
23856: LD_INT 1
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 2
23865: NEG
23866: PUSH
23867: LD_INT 0
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 2
23876: NEG
23877: PUSH
23878: LD_INT 1
23880: NEG
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23900: LD_ADDR_VAR 0 52
23904: PUSH
23905: LD_INT 0
23907: PUSH
23908: LD_INT 0
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: LD_INT 1
23920: NEG
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 1
23928: PUSH
23929: LD_INT 0
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 1
23969: NEG
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 1
23981: NEG
23982: PUSH
23983: LD_INT 2
23985: NEG
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 1
23993: NEG
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 2
24004: NEG
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 2
24015: NEG
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 2
24027: NEG
24028: PUSH
24029: LD_INT 2
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24051: LD_ADDR_VAR 0 53
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: LD_INT 0
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 0
24099: PUSH
24100: LD_INT 1
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: NEG
24110: PUSH
24111: LD_INT 0
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 1
24120: NEG
24121: PUSH
24122: LD_INT 1
24124: NEG
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 1
24132: NEG
24133: PUSH
24134: LD_INT 2
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: LD_INT 2
24147: NEG
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: LD_INT 1
24158: NEG
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 2
24166: PUSH
24167: LD_INT 0
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 2
24176: PUSH
24177: LD_INT 1
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 2
24186: PUSH
24187: LD_INT 2
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: LD_INT 2
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: LD_INT 2
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: LD_INT 1
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 2
24227: NEG
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 2
24238: NEG
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 2
24250: NEG
24251: PUSH
24252: LD_INT 2
24254: NEG
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24281: LD_ADDR_VAR 0 54
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: LD_INT 0
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 0
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 1
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 1
24350: NEG
24351: PUSH
24352: LD_INT 1
24354: NEG
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 1
24362: NEG
24363: PUSH
24364: LD_INT 2
24366: NEG
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: LD_INT 2
24377: NEG
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: LD_INT 1
24388: NEG
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 2
24406: PUSH
24407: LD_INT 1
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 2
24416: PUSH
24417: LD_INT 2
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: LD_INT 2
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: LD_INT 2
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: NEG
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 2
24457: NEG
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 2
24468: NEG
24469: PUSH
24470: LD_INT 1
24472: NEG
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 2
24480: NEG
24481: PUSH
24482: LD_INT 2
24484: NEG
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24511: LD_ADDR_VAR 0 55
24515: PUSH
24516: LD_INT 0
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 0
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: LD_INT 1
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 1
24569: NEG
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 1
24580: NEG
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: LD_INT 2
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 0
24604: PUSH
24605: LD_INT 2
24607: NEG
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 1
24615: PUSH
24616: LD_INT 1
24618: NEG
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: LD_INT 0
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: LD_INT 1
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 2
24646: PUSH
24647: LD_INT 2
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: LD_INT 2
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 1
24676: NEG
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 2
24687: NEG
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 2
24698: NEG
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 2
24710: NEG
24711: PUSH
24712: LD_INT 2
24714: NEG
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24741: LD_ADDR_VAR 0 56
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: NEG
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: LD_INT 1
24814: NEG
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: LD_INT 2
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: LD_INT 2
24837: NEG
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 2
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: LD_INT 2
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: LD_INT 2
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: LD_INT 2
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 1
24906: NEG
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 2
24917: NEG
24918: PUSH
24919: LD_INT 0
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 2
24928: NEG
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 2
24940: NEG
24941: PUSH
24942: LD_INT 2
24944: NEG
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24971: LD_ADDR_VAR 0 57
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 0
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: LD_INT 1
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 1
25029: NEG
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 1
25040: NEG
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 1
25052: NEG
25053: PUSH
25054: LD_INT 2
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: LD_INT 2
25067: NEG
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 2
25096: PUSH
25097: LD_INT 1
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 2
25106: PUSH
25107: LD_INT 2
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: LD_INT 2
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: LD_INT 2
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 1
25136: NEG
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 2
25147: NEG
25148: PUSH
25149: LD_INT 0
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 2
25158: NEG
25159: PUSH
25160: LD_INT 1
25162: NEG
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 2
25170: NEG
25171: PUSH
25172: LD_INT 2
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25201: LD_ADDR_VAR 0 58
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: LD_INT 1
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: LD_INT 0
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 0
25249: PUSH
25250: LD_INT 1
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 1
25259: NEG
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 1
25270: NEG
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: NEG
25283: PUSH
25284: LD_INT 2
25286: NEG
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 0
25294: PUSH
25295: LD_INT 2
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 2
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: LD_INT 2
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: LD_INT 2
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: LD_INT 2
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 2
25377: NEG
25378: PUSH
25379: LD_INT 0
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 2
25400: NEG
25401: PUSH
25402: LD_INT 2
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25431: LD_ADDR_VAR 0 59
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: LD_INT 1
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: LD_INT 1
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: LD_INT 1
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 1
25500: NEG
25501: PUSH
25502: LD_INT 1
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25519: LD_ADDR_VAR 0 60
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: LD_INT 0
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 1
25539: NEG
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 0
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: NEG
25589: PUSH
25590: LD_INT 1
25592: NEG
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25607: LD_ADDR_VAR 0 61
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: LD_INT 0
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25695: LD_ADDR_VAR 0 62
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: LD_INT 1
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: LD_INT 1
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 1
25753: NEG
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25783: LD_ADDR_VAR 0 63
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: LD_INT 1
25803: NEG
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 1
25852: NEG
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25871: LD_ADDR_VAR 0 64
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: LD_INT 1
25891: NEG
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 1
25929: NEG
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: LD_INT 1
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: ST_TO_ADDR
// end ; 1 :
25959: GO 31856
25961: LD_INT 1
25963: DOUBLE
25964: EQUAL
25965: IFTRUE 25969
25967: GO 28592
25969: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25970: LD_ADDR_VAR 0 11
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: PUSH
25979: LD_INT 3
25981: NEG
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: LD_INT 3
25992: NEG
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: LD_INT 2
26003: NEG
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: LIST
26013: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26014: LD_ADDR_VAR 0 12
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 3
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 3
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26055: LD_ADDR_VAR 0 13
26059: PUSH
26060: LD_INT 3
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: LD_INT 3
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: LD_INT 3
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: LIST
26094: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26095: LD_ADDR_VAR 0 14
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: LD_INT 3
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: LD_INT 2
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: LIST
26135: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26136: LD_ADDR_VAR 0 15
26140: PUSH
26141: LD_INT 2
26143: NEG
26144: PUSH
26145: LD_INT 1
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 3
26154: NEG
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 3
26165: NEG
26166: PUSH
26167: LD_INT 1
26169: NEG
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: LIST
26179: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26180: LD_ADDR_VAR 0 16
26184: PUSH
26185: LD_INT 2
26187: NEG
26188: PUSH
26189: LD_INT 3
26191: NEG
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 3
26199: NEG
26200: PUSH
26201: LD_INT 2
26203: NEG
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 3
26211: NEG
26212: PUSH
26213: LD_INT 3
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: LIST
26225: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26226: LD_ADDR_VAR 0 17
26230: PUSH
26231: LD_INT 1
26233: NEG
26234: PUSH
26235: LD_INT 3
26237: NEG
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: LD_INT 3
26248: NEG
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 1
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: LIST
26269: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26270: LD_ADDR_VAR 0 18
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 3
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 3
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: LIST
26310: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26311: LD_ADDR_VAR 0 19
26315: PUSH
26316: LD_INT 3
26318: PUSH
26319: LD_INT 2
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 3
26328: PUSH
26329: LD_INT 3
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 2
26338: PUSH
26339: LD_INT 3
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: LIST
26350: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26351: LD_ADDR_VAR 0 20
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: LD_INT 3
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: LD_INT 2
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26392: LD_ADDR_VAR 0 21
26396: PUSH
26397: LD_INT 2
26399: NEG
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 3
26410: NEG
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 3
26421: NEG
26422: PUSH
26423: LD_INT 1
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26436: LD_ADDR_VAR 0 22
26440: PUSH
26441: LD_INT 2
26443: NEG
26444: PUSH
26445: LD_INT 3
26447: NEG
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 3
26455: NEG
26456: PUSH
26457: LD_INT 2
26459: NEG
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 3
26467: NEG
26468: PUSH
26469: LD_INT 3
26471: NEG
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: LIST
26481: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26482: LD_ADDR_VAR 0 23
26486: PUSH
26487: LD_INT 0
26489: PUSH
26490: LD_INT 3
26492: NEG
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: NEG
26501: PUSH
26502: LD_INT 4
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: LD_INT 3
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: LIST
26525: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26526: LD_ADDR_VAR 0 24
26530: PUSH
26531: LD_INT 3
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 3
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 4
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: LIST
26566: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26567: LD_ADDR_VAR 0 25
26571: PUSH
26572: LD_INT 3
26574: PUSH
26575: LD_INT 3
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 4
26584: PUSH
26585: LD_INT 3
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 3
26594: PUSH
26595: LD_INT 4
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: LIST
26606: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26607: LD_ADDR_VAR 0 26
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: LD_INT 3
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: LD_INT 4
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: NEG
26635: PUSH
26636: LD_INT 3
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26648: LD_ADDR_VAR 0 27
26652: PUSH
26653: LD_INT 3
26655: NEG
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 3
26666: NEG
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 4
26677: NEG
26678: PUSH
26679: LD_INT 1
26681: NEG
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: LIST
26691: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26692: LD_ADDR_VAR 0 28
26696: PUSH
26697: LD_INT 3
26699: NEG
26700: PUSH
26701: LD_INT 3
26703: NEG
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 3
26711: NEG
26712: PUSH
26713: LD_INT 4
26715: NEG
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 4
26723: NEG
26724: PUSH
26725: LD_INT 3
26727: NEG
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26738: LD_ADDR_VAR 0 29
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: LD_INT 3
26749: NEG
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 3
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: LD_INT 2
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: LD_INT 4
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: LD_INT 4
26794: NEG
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: LD_INT 3
26805: NEG
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: LD_INT 5
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 5
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: LD_INT 4
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: LD_INT 6
26851: NEG
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: LD_INT 6
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 5
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
26893: LD_ADDR_VAR 0 30
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: LD_INT 1
26903: NEG
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 3
26911: PUSH
26912: LD_INT 0
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 3
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 4
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 4
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 4
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 5
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 5
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 5
26993: PUSH
26994: LD_INT 1
26996: NEG
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 6
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 6
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27036: LD_ADDR_VAR 0 31
27040: PUSH
27041: LD_INT 3
27043: PUSH
27044: LD_INT 2
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 3
27053: PUSH
27054: LD_INT 3
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 2
27063: PUSH
27064: LD_INT 3
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 4
27073: PUSH
27074: LD_INT 3
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 4
27083: PUSH
27084: LD_INT 4
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 3
27093: PUSH
27094: LD_INT 4
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 5
27103: PUSH
27104: LD_INT 4
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 5
27113: PUSH
27114: LD_INT 5
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 4
27123: PUSH
27124: LD_INT 5
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 6
27133: PUSH
27134: LD_INT 5
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 6
27143: PUSH
27144: LD_INT 6
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 5
27153: PUSH
27154: LD_INT 6
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27175: LD_ADDR_VAR 0 32
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: LD_INT 3
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 3
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: LD_INT 2
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: LD_INT 4
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 4
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: NEG
27234: PUSH
27235: LD_INT 3
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: LD_INT 5
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: LD_INT 5
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: LD_INT 4
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: LD_INT 6
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 6
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: LD_INT 5
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27318: LD_ADDR_VAR 0 33
27322: PUSH
27323: LD_INT 2
27325: NEG
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 3
27336: NEG
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 3
27347: NEG
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 3
27359: NEG
27360: PUSH
27361: LD_INT 1
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 4
27370: NEG
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 4
27381: NEG
27382: PUSH
27383: LD_INT 1
27385: NEG
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 4
27393: NEG
27394: PUSH
27395: LD_INT 1
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 5
27404: NEG
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 5
27415: NEG
27416: PUSH
27417: LD_INT 1
27419: NEG
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 5
27427: NEG
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 6
27438: NEG
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 6
27449: NEG
27450: PUSH
27451: LD_INT 1
27453: NEG
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27473: LD_ADDR_VAR 0 34
27477: PUSH
27478: LD_INT 2
27480: NEG
27481: PUSH
27482: LD_INT 3
27484: NEG
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 3
27492: NEG
27493: PUSH
27494: LD_INT 2
27496: NEG
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 3
27504: NEG
27505: PUSH
27506: LD_INT 3
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 3
27516: NEG
27517: PUSH
27518: LD_INT 4
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 4
27528: NEG
27529: PUSH
27530: LD_INT 3
27532: NEG
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 4
27540: NEG
27541: PUSH
27542: LD_INT 4
27544: NEG
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 4
27552: NEG
27553: PUSH
27554: LD_INT 5
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 5
27564: NEG
27565: PUSH
27566: LD_INT 4
27568: NEG
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 5
27576: NEG
27577: PUSH
27578: LD_INT 5
27580: NEG
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 5
27588: NEG
27589: PUSH
27590: LD_INT 6
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 6
27600: NEG
27601: PUSH
27602: LD_INT 5
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 6
27612: NEG
27613: PUSH
27614: LD_INT 6
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27636: LD_ADDR_VAR 0 41
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: LD_INT 2
27646: NEG
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 1
27654: NEG
27655: PUSH
27656: LD_INT 3
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: LD_INT 2
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27680: LD_ADDR_VAR 0 42
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: LD_INT 1
27700: NEG
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 3
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27721: LD_ADDR_VAR 0 43
27725: PUSH
27726: LD_INT 2
27728: PUSH
27729: LD_INT 2
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 3
27738: PUSH
27739: LD_INT 2
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 2
27748: PUSH
27749: LD_INT 3
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: LIST
27760: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27761: LD_ADDR_VAR 0 44
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: LD_INT 2
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 3
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: LD_INT 2
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27802: LD_ADDR_VAR 0 45
27806: PUSH
27807: LD_INT 2
27809: NEG
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 2
27820: NEG
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 3
27831: NEG
27832: PUSH
27833: LD_INT 1
27835: NEG
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: LIST
27845: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27846: LD_ADDR_VAR 0 46
27850: PUSH
27851: LD_INT 2
27853: NEG
27854: PUSH
27855: LD_INT 2
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 2
27865: NEG
27866: PUSH
27867: LD_INT 3
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 3
27877: NEG
27878: PUSH
27879: LD_INT 2
27881: NEG
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: LIST
27891: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
27892: LD_ADDR_VAR 0 47
27896: PUSH
27897: LD_INT 2
27899: NEG
27900: PUSH
27901: LD_INT 3
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: LD_INT 3
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27925: LD_ADDR_VAR 0 48
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: LD_INT 2
27935: NEG
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 2
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
27956: LD_ADDR_VAR 0 49
27960: PUSH
27961: LD_INT 3
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 3
27973: PUSH
27974: LD_INT 2
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
27985: LD_ADDR_VAR 0 50
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: LD_INT 3
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: LD_INT 3
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28014: LD_ADDR_VAR 0 51
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 2
28032: NEG
28033: PUSH
28034: LD_INT 1
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28045: LD_ADDR_VAR 0 52
28049: PUSH
28050: LD_INT 3
28052: NEG
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 3
28064: NEG
28065: PUSH
28066: LD_INT 2
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28078: LD_ADDR_VAR 0 53
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: LD_INT 3
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: LD_INT 3
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: PUSH
28109: LD_INT 2
28111: NEG
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: LIST
28121: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28122: LD_ADDR_VAR 0 54
28126: PUSH
28127: LD_INT 2
28129: PUSH
28130: LD_INT 1
28132: NEG
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 3
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 3
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28163: LD_ADDR_VAR 0 55
28167: PUSH
28168: LD_INT 3
28170: PUSH
28171: LD_INT 2
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 3
28180: PUSH
28181: LD_INT 3
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 2
28190: PUSH
28191: LD_INT 3
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: LIST
28202: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28203: LD_ADDR_VAR 0 56
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: LD_INT 3
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: LD_INT 3
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 1
28230: NEG
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28244: LD_ADDR_VAR 0 57
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 3
28262: NEG
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 3
28273: NEG
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: LIST
28287: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28288: LD_ADDR_VAR 0 58
28292: PUSH
28293: LD_INT 2
28295: NEG
28296: PUSH
28297: LD_INT 3
28299: NEG
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 3
28307: NEG
28308: PUSH
28309: LD_INT 2
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 3
28319: NEG
28320: PUSH
28321: LD_INT 3
28323: NEG
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: LIST
28333: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28334: LD_ADDR_VAR 0 59
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: LD_INT 2
28345: NEG
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: LD_INT 2
28356: NEG
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 1
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28378: LD_ADDR_VAR 0 60
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: LD_INT 1
28388: NEG
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 2
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 2
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: LIST
28418: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28419: LD_ADDR_VAR 0 61
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: LD_INT 2
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: LD_INT 2
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28459: LD_ADDR_VAR 0 62
28463: PUSH
28464: LD_INT 1
28466: PUSH
28467: LD_INT 2
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: LIST
28499: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28500: LD_ADDR_VAR 0 63
28504: PUSH
28505: LD_INT 1
28507: NEG
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 2
28518: NEG
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 2
28529: NEG
28530: PUSH
28531: LD_INT 1
28533: NEG
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: LIST
28543: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28544: LD_ADDR_VAR 0 64
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: LD_INT 2
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 2
28563: NEG
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 2
28575: NEG
28576: PUSH
28577: LD_INT 2
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: LIST
28589: ST_TO_ADDR
// end ; 2 :
28590: GO 31856
28592: LD_INT 2
28594: DOUBLE
28595: EQUAL
28596: IFTRUE 28600
28598: GO 31855
28600: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28601: LD_ADDR_VAR 0 29
28605: PUSH
28606: LD_INT 4
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 4
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 5
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 5
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 4
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 3
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 3
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 3
28680: PUSH
28681: LD_INT 2
28683: NEG
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 5
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 3
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 3
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 4
28721: PUSH
28722: LD_INT 3
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 4
28731: PUSH
28732: LD_INT 4
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 3
28741: PUSH
28742: LD_INT 4
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 2
28751: PUSH
28752: LD_INT 3
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 2
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 4
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: LD_INT 4
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: LD_INT 4
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 0
28801: PUSH
28802: LD_INT 3
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: LD_INT 4
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 1
28821: PUSH
28822: LD_INT 5
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: LD_INT 5
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: LD_INT 4
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: LD_INT 3
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: LD_INT 5
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 2
28873: NEG
28874: PUSH
28875: LD_INT 3
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 3
28884: NEG
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 3
28895: NEG
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 2
28907: NEG
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 2
28918: NEG
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 3
28929: NEG
28930: PUSH
28931: LD_INT 1
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 4
28940: NEG
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 4
28951: NEG
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 4
28963: NEG
28964: PUSH
28965: LD_INT 2
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 2
28975: NEG
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 4
28986: NEG
28987: PUSH
28988: LD_INT 4
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 4
28998: NEG
28999: PUSH
29000: LD_INT 5
29002: NEG
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 3
29010: NEG
29011: PUSH
29012: LD_INT 4
29014: NEG
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 3
29022: NEG
29023: PUSH
29024: LD_INT 3
29026: NEG
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 4
29034: NEG
29035: PUSH
29036: LD_INT 3
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 5
29046: NEG
29047: PUSH
29048: LD_INT 4
29050: NEG
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 5
29058: NEG
29059: PUSH
29060: LD_INT 5
29062: NEG
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 3
29070: NEG
29071: PUSH
29072: LD_INT 5
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 5
29082: NEG
29083: PUSH
29084: LD_INT 3
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29139: LD_ADDR_VAR 0 30
29143: PUSH
29144: LD_INT 4
29146: PUSH
29147: LD_INT 4
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 4
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 5
29166: PUSH
29167: LD_INT 4
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 5
29176: PUSH
29177: LD_INT 5
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 4
29186: PUSH
29187: LD_INT 5
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 3
29196: PUSH
29197: LD_INT 4
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 3
29206: PUSH
29207: LD_INT 3
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 5
29216: PUSH
29217: LD_INT 3
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 3
29226: PUSH
29227: LD_INT 5
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: LD_INT 3
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 0
29246: PUSH
29247: LD_INT 2
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: LD_INT 3
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: LD_INT 4
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: LD_INT 4
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 1
29286: NEG
29287: PUSH
29288: LD_INT 3
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 2
29308: PUSH
29309: LD_INT 4
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 2
29318: NEG
29319: PUSH
29320: LD_INT 2
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 4
29329: NEG
29330: PUSH
29331: LD_INT 0
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 4
29340: NEG
29341: PUSH
29342: LD_INT 1
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 3
29352: NEG
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 3
29363: NEG
29364: PUSH
29365: LD_INT 1
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 4
29374: NEG
29375: PUSH
29376: LD_INT 1
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 5
29385: NEG
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 5
29396: NEG
29397: PUSH
29398: LD_INT 1
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 5
29408: NEG
29409: PUSH
29410: LD_INT 2
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 3
29420: NEG
29421: PUSH
29422: LD_INT 2
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 3
29431: NEG
29432: PUSH
29433: LD_INT 3
29435: NEG
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 3
29443: NEG
29444: PUSH
29445: LD_INT 4
29447: NEG
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 2
29455: NEG
29456: PUSH
29457: LD_INT 3
29459: NEG
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 2
29467: NEG
29468: PUSH
29469: LD_INT 2
29471: NEG
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 3
29479: NEG
29480: PUSH
29481: LD_INT 2
29483: NEG
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 4
29491: NEG
29492: PUSH
29493: LD_INT 3
29495: NEG
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 4
29503: NEG
29504: PUSH
29505: LD_INT 4
29507: NEG
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 2
29515: NEG
29516: PUSH
29517: LD_INT 4
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 4
29527: NEG
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 0
29539: PUSH
29540: LD_INT 4
29542: NEG
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 0
29550: PUSH
29551: LD_INT 5
29553: NEG
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 1
29561: PUSH
29562: LD_INT 4
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: LD_INT 3
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 0
29583: PUSH
29584: LD_INT 3
29586: NEG
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: LD_INT 4
29598: NEG
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: LD_INT 5
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 2
29618: PUSH
29619: LD_INT 3
29621: NEG
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 2
29629: NEG
29630: PUSH
29631: LD_INT 5
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29686: LD_ADDR_VAR 0 31
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: LD_INT 4
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: LD_INT 3
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 4
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: LD_INT 5
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 0
29733: PUSH
29734: LD_INT 5
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: NEG
29744: PUSH
29745: LD_INT 4
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: LD_INT 3
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: LD_INT 5
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 2
29775: NEG
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 3
29786: NEG
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 3
29797: NEG
29798: PUSH
29799: LD_INT 1
29801: NEG
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 2
29809: NEG
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 2
29820: NEG
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 3
29831: NEG
29832: PUSH
29833: LD_INT 1
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 4
29842: NEG
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 4
29853: NEG
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 4
29865: NEG
29866: PUSH
29867: LD_INT 2
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 2
29877: NEG
29878: PUSH
29879: LD_INT 2
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 4
29888: NEG
29889: PUSH
29890: LD_INT 4
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 4
29900: NEG
29901: PUSH
29902: LD_INT 5
29904: NEG
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 3
29912: NEG
29913: PUSH
29914: LD_INT 4
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 3
29924: NEG
29925: PUSH
29926: LD_INT 3
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 4
29936: NEG
29937: PUSH
29938: LD_INT 3
29940: NEG
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 5
29948: NEG
29949: PUSH
29950: LD_INT 4
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 5
29960: NEG
29961: PUSH
29962: LD_INT 5
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 3
29972: NEG
29973: PUSH
29974: LD_INT 5
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 5
29984: NEG
29985: PUSH
29986: LD_INT 3
29988: NEG
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: LD_INT 3
29999: NEG
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: LD_INT 4
30010: NEG
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: LD_INT 3
30021: NEG
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: LD_INT 2
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: LD_INT 2
30043: NEG
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 1
30051: NEG
30052: PUSH
30053: LD_INT 3
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: LD_INT 4
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 2
30075: PUSH
30076: LD_INT 2
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 2
30086: NEG
30087: PUSH
30088: LD_INT 4
30090: NEG
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 4
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 4
30108: PUSH
30109: LD_INT 1
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 5
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 5
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 4
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 3
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 3
30159: PUSH
30160: LD_INT 1
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 3
30170: PUSH
30171: LD_INT 2
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 5
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30236: LD_ADDR_VAR 0 32
30240: PUSH
30241: LD_INT 4
30243: NEG
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 4
30254: NEG
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 3
30266: NEG
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 3
30277: NEG
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 4
30288: NEG
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 5
30299: NEG
30300: PUSH
30301: LD_INT 0
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 5
30310: NEG
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 5
30322: NEG
30323: PUSH
30324: LD_INT 2
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 3
30334: NEG
30335: PUSH
30336: LD_INT 2
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 3
30345: NEG
30346: PUSH
30347: LD_INT 3
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 3
30357: NEG
30358: PUSH
30359: LD_INT 4
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 2
30369: NEG
30370: PUSH
30371: LD_INT 3
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: NEG
30382: PUSH
30383: LD_INT 2
30385: NEG
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 3
30393: NEG
30394: PUSH
30395: LD_INT 2
30397: NEG
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 4
30405: NEG
30406: PUSH
30407: LD_INT 3
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 4
30417: NEG
30418: PUSH
30419: LD_INT 4
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: NEG
30430: PUSH
30431: LD_INT 4
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 4
30441: NEG
30442: PUSH
30443: LD_INT 2
30445: NEG
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: LD_INT 4
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: LD_INT 5
30467: NEG
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 1
30475: PUSH
30476: LD_INT 4
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: LD_INT 3
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 0
30497: PUSH
30498: LD_INT 3
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 1
30508: NEG
30509: PUSH
30510: LD_INT 4
30512: NEG
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: LD_INT 5
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 2
30532: PUSH
30533: LD_INT 3
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 2
30543: NEG
30544: PUSH
30545: LD_INT 5
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 3
30555: PUSH
30556: LD_INT 0
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 3
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 4
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 4
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 3
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 2
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 2
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: LD_INT 2
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 4
30638: PUSH
30639: LD_INT 2
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 4
30648: PUSH
30649: LD_INT 4
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 4
30658: PUSH
30659: LD_INT 3
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 5
30668: PUSH
30669: LD_INT 4
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 5
30678: PUSH
30679: LD_INT 5
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 4
30688: PUSH
30689: LD_INT 5
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 3
30698: PUSH
30699: LD_INT 4
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 3
30708: PUSH
30709: LD_INT 3
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 5
30718: PUSH
30719: LD_INT 3
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 3
30728: PUSH
30729: LD_INT 5
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30783: LD_ADDR_VAR 0 33
30787: PUSH
30788: LD_INT 4
30790: NEG
30791: PUSH
30792: LD_INT 4
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 4
30802: NEG
30803: PUSH
30804: LD_INT 5
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 3
30814: NEG
30815: PUSH
30816: LD_INT 4
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 3
30826: NEG
30827: PUSH
30828: LD_INT 3
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 4
30838: NEG
30839: PUSH
30840: LD_INT 3
30842: NEG
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 5
30850: NEG
30851: PUSH
30852: LD_INT 4
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 5
30862: NEG
30863: PUSH
30864: LD_INT 5
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 3
30874: NEG
30875: PUSH
30876: LD_INT 5
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 5
30886: NEG
30887: PUSH
30888: LD_INT 3
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: LD_INT 3
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 4
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: LD_INT 3
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: LD_INT 2
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 0
30942: PUSH
30943: LD_INT 2
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 1
30953: NEG
30954: PUSH
30955: LD_INT 3
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: LD_INT 4
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: PUSH
30978: LD_INT 2
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 2
30988: NEG
30989: PUSH
30990: LD_INT 4
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 4
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 4
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 5
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 5
31031: PUSH
31032: LD_INT 1
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 4
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 3
31051: PUSH
31052: LD_INT 0
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 3
31061: PUSH
31062: LD_INT 1
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 3
31072: PUSH
31073: LD_INT 2
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 5
31083: PUSH
31084: LD_INT 2
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 3
31093: PUSH
31094: LD_INT 3
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 4
31113: PUSH
31114: LD_INT 3
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 4
31123: PUSH
31124: LD_INT 4
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 3
31133: PUSH
31134: LD_INT 4
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 3
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 4
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: LD_INT 4
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: LD_INT 4
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 3
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: LD_INT 4
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: LD_INT 5
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: LD_INT 5
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: NEG
31234: PUSH
31235: LD_INT 4
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 2
31255: PUSH
31256: LD_INT 5
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 2
31265: NEG
31266: PUSH
31267: LD_INT 3
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31321: LD_ADDR_VAR 0 34
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: LD_INT 4
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: LD_INT 5
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: LD_INT 4
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: LD_INT 3
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: LD_INT 3
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: LD_INT 4
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 1
31395: NEG
31396: PUSH
31397: LD_INT 5
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: LD_INT 3
31410: NEG
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 2
31418: NEG
31419: PUSH
31420: LD_INT 5
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 3
31430: PUSH
31431: LD_INT 0
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 3
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 4
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 4
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: LD_INT 2
31505: NEG
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 4
31513: PUSH
31514: LD_INT 2
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 4
31523: PUSH
31524: LD_INT 4
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 4
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 5
31543: PUSH
31544: LD_INT 4
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 5
31553: PUSH
31554: LD_INT 5
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 4
31563: PUSH
31564: LD_INT 5
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: LD_INT 4
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 3
31583: PUSH
31584: LD_INT 3
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 5
31593: PUSH
31594: LD_INT 3
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 3
31603: PUSH
31604: LD_INT 5
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 3
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: PUSH
31644: LD_INT 4
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: LD_INT 4
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: NEG
31664: PUSH
31665: LD_INT 3
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: LD_INT 2
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 2
31685: PUSH
31686: LD_INT 4
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 2
31695: NEG
31696: PUSH
31697: LD_INT 2
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 4
31706: NEG
31707: PUSH
31708: LD_INT 0
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 4
31717: NEG
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 3
31729: NEG
31730: PUSH
31731: LD_INT 0
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 3
31740: NEG
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 4
31751: NEG
31752: PUSH
31753: LD_INT 1
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 5
31762: NEG
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 5
31773: NEG
31774: PUSH
31775: LD_INT 1
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 5
31785: NEG
31786: PUSH
31787: LD_INT 2
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 3
31797: NEG
31798: PUSH
31799: LD_INT 2
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: ST_TO_ADDR
// end ; end ;
31853: GO 31856
31855: POP
// case btype of b_depot , b_warehouse :
31856: LD_VAR 0 1
31860: PUSH
31861: LD_INT 0
31863: DOUBLE
31864: EQUAL
31865: IFTRUE 31875
31867: LD_INT 1
31869: DOUBLE
31870: EQUAL
31871: IFTRUE 31875
31873: GO 32076
31875: POP
// case nation of nation_american :
31876: LD_VAR 0 5
31880: PUSH
31881: LD_INT 1
31883: DOUBLE
31884: EQUAL
31885: IFTRUE 31889
31887: GO 31945
31889: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
31890: LD_ADDR_VAR 0 9
31894: PUSH
31895: LD_VAR 0 11
31899: PUSH
31900: LD_VAR 0 12
31904: PUSH
31905: LD_VAR 0 13
31909: PUSH
31910: LD_VAR 0 14
31914: PUSH
31915: LD_VAR 0 15
31919: PUSH
31920: LD_VAR 0 16
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: PUSH
31933: LD_VAR 0 4
31937: PUSH
31938: LD_INT 1
31940: PLUS
31941: ARRAY
31942: ST_TO_ADDR
31943: GO 32074
31945: LD_INT 2
31947: DOUBLE
31948: EQUAL
31949: IFTRUE 31953
31951: GO 32009
31953: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
31954: LD_ADDR_VAR 0 9
31958: PUSH
31959: LD_VAR 0 17
31963: PUSH
31964: LD_VAR 0 18
31968: PUSH
31969: LD_VAR 0 19
31973: PUSH
31974: LD_VAR 0 20
31978: PUSH
31979: LD_VAR 0 21
31983: PUSH
31984: LD_VAR 0 22
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: PUSH
31997: LD_VAR 0 4
32001: PUSH
32002: LD_INT 1
32004: PLUS
32005: ARRAY
32006: ST_TO_ADDR
32007: GO 32074
32009: LD_INT 3
32011: DOUBLE
32012: EQUAL
32013: IFTRUE 32017
32015: GO 32073
32017: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32018: LD_ADDR_VAR 0 9
32022: PUSH
32023: LD_VAR 0 23
32027: PUSH
32028: LD_VAR 0 24
32032: PUSH
32033: LD_VAR 0 25
32037: PUSH
32038: LD_VAR 0 26
32042: PUSH
32043: LD_VAR 0 27
32047: PUSH
32048: LD_VAR 0 28
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: PUSH
32061: LD_VAR 0 4
32065: PUSH
32066: LD_INT 1
32068: PLUS
32069: ARRAY
32070: ST_TO_ADDR
32071: GO 32074
32073: POP
32074: GO 32629
32076: LD_INT 2
32078: DOUBLE
32079: EQUAL
32080: IFTRUE 32090
32082: LD_INT 3
32084: DOUBLE
32085: EQUAL
32086: IFTRUE 32090
32088: GO 32146
32090: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32091: LD_ADDR_VAR 0 9
32095: PUSH
32096: LD_VAR 0 29
32100: PUSH
32101: LD_VAR 0 30
32105: PUSH
32106: LD_VAR 0 31
32110: PUSH
32111: LD_VAR 0 32
32115: PUSH
32116: LD_VAR 0 33
32120: PUSH
32121: LD_VAR 0 34
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: PUSH
32134: LD_VAR 0 4
32138: PUSH
32139: LD_INT 1
32141: PLUS
32142: ARRAY
32143: ST_TO_ADDR
32144: GO 32629
32146: LD_INT 16
32148: DOUBLE
32149: EQUAL
32150: IFTRUE 32208
32152: LD_INT 17
32154: DOUBLE
32155: EQUAL
32156: IFTRUE 32208
32158: LD_INT 18
32160: DOUBLE
32161: EQUAL
32162: IFTRUE 32208
32164: LD_INT 19
32166: DOUBLE
32167: EQUAL
32168: IFTRUE 32208
32170: LD_INT 22
32172: DOUBLE
32173: EQUAL
32174: IFTRUE 32208
32176: LD_INT 20
32178: DOUBLE
32179: EQUAL
32180: IFTRUE 32208
32182: LD_INT 21
32184: DOUBLE
32185: EQUAL
32186: IFTRUE 32208
32188: LD_INT 23
32190: DOUBLE
32191: EQUAL
32192: IFTRUE 32208
32194: LD_INT 24
32196: DOUBLE
32197: EQUAL
32198: IFTRUE 32208
32200: LD_INT 25
32202: DOUBLE
32203: EQUAL
32204: IFTRUE 32208
32206: GO 32264
32208: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32209: LD_ADDR_VAR 0 9
32213: PUSH
32214: LD_VAR 0 35
32218: PUSH
32219: LD_VAR 0 36
32223: PUSH
32224: LD_VAR 0 37
32228: PUSH
32229: LD_VAR 0 38
32233: PUSH
32234: LD_VAR 0 39
32238: PUSH
32239: LD_VAR 0 40
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: PUSH
32252: LD_VAR 0 4
32256: PUSH
32257: LD_INT 1
32259: PLUS
32260: ARRAY
32261: ST_TO_ADDR
32262: GO 32629
32264: LD_INT 6
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32320
32270: LD_INT 7
32272: DOUBLE
32273: EQUAL
32274: IFTRUE 32320
32276: LD_INT 8
32278: DOUBLE
32279: EQUAL
32280: IFTRUE 32320
32282: LD_INT 13
32284: DOUBLE
32285: EQUAL
32286: IFTRUE 32320
32288: LD_INT 12
32290: DOUBLE
32291: EQUAL
32292: IFTRUE 32320
32294: LD_INT 15
32296: DOUBLE
32297: EQUAL
32298: IFTRUE 32320
32300: LD_INT 11
32302: DOUBLE
32303: EQUAL
32304: IFTRUE 32320
32306: LD_INT 14
32308: DOUBLE
32309: EQUAL
32310: IFTRUE 32320
32312: LD_INT 10
32314: DOUBLE
32315: EQUAL
32316: IFTRUE 32320
32318: GO 32376
32320: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32321: LD_ADDR_VAR 0 9
32325: PUSH
32326: LD_VAR 0 41
32330: PUSH
32331: LD_VAR 0 42
32335: PUSH
32336: LD_VAR 0 43
32340: PUSH
32341: LD_VAR 0 44
32345: PUSH
32346: LD_VAR 0 45
32350: PUSH
32351: LD_VAR 0 46
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: PUSH
32364: LD_VAR 0 4
32368: PUSH
32369: LD_INT 1
32371: PLUS
32372: ARRAY
32373: ST_TO_ADDR
32374: GO 32629
32376: LD_INT 36
32378: DOUBLE
32379: EQUAL
32380: IFTRUE 32384
32382: GO 32440
32384: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32385: LD_ADDR_VAR 0 9
32389: PUSH
32390: LD_VAR 0 47
32394: PUSH
32395: LD_VAR 0 48
32399: PUSH
32400: LD_VAR 0 49
32404: PUSH
32405: LD_VAR 0 50
32409: PUSH
32410: LD_VAR 0 51
32414: PUSH
32415: LD_VAR 0 52
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: PUSH
32428: LD_VAR 0 4
32432: PUSH
32433: LD_INT 1
32435: PLUS
32436: ARRAY
32437: ST_TO_ADDR
32438: GO 32629
32440: LD_INT 4
32442: DOUBLE
32443: EQUAL
32444: IFTRUE 32466
32446: LD_INT 5
32448: DOUBLE
32449: EQUAL
32450: IFTRUE 32466
32452: LD_INT 34
32454: DOUBLE
32455: EQUAL
32456: IFTRUE 32466
32458: LD_INT 37
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32466
32464: GO 32522
32466: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32467: LD_ADDR_VAR 0 9
32471: PUSH
32472: LD_VAR 0 53
32476: PUSH
32477: LD_VAR 0 54
32481: PUSH
32482: LD_VAR 0 55
32486: PUSH
32487: LD_VAR 0 56
32491: PUSH
32492: LD_VAR 0 57
32496: PUSH
32497: LD_VAR 0 58
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: PUSH
32510: LD_VAR 0 4
32514: PUSH
32515: LD_INT 1
32517: PLUS
32518: ARRAY
32519: ST_TO_ADDR
32520: GO 32629
32522: LD_INT 31
32524: DOUBLE
32525: EQUAL
32526: IFTRUE 32572
32528: LD_INT 32
32530: DOUBLE
32531: EQUAL
32532: IFTRUE 32572
32534: LD_INT 33
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32572
32540: LD_INT 27
32542: DOUBLE
32543: EQUAL
32544: IFTRUE 32572
32546: LD_INT 26
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32572
32552: LD_INT 28
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32572
32558: LD_INT 29
32560: DOUBLE
32561: EQUAL
32562: IFTRUE 32572
32564: LD_INT 30
32566: DOUBLE
32567: EQUAL
32568: IFTRUE 32572
32570: GO 32628
32572: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32573: LD_ADDR_VAR 0 9
32577: PUSH
32578: LD_VAR 0 59
32582: PUSH
32583: LD_VAR 0 60
32587: PUSH
32588: LD_VAR 0 61
32592: PUSH
32593: LD_VAR 0 62
32597: PUSH
32598: LD_VAR 0 63
32602: PUSH
32603: LD_VAR 0 64
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: PUSH
32616: LD_VAR 0 4
32620: PUSH
32621: LD_INT 1
32623: PLUS
32624: ARRAY
32625: ST_TO_ADDR
32626: GO 32629
32628: POP
// temp_list2 = [ ] ;
32629: LD_ADDR_VAR 0 10
32633: PUSH
32634: EMPTY
32635: ST_TO_ADDR
// for i in temp_list do
32636: LD_ADDR_VAR 0 8
32640: PUSH
32641: LD_VAR 0 9
32645: PUSH
32646: FOR_IN
32647: IFFALSE 32699
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32649: LD_ADDR_VAR 0 10
32653: PUSH
32654: LD_VAR 0 10
32658: PUSH
32659: LD_VAR 0 8
32663: PUSH
32664: LD_INT 1
32666: ARRAY
32667: PUSH
32668: LD_VAR 0 2
32672: PLUS
32673: PUSH
32674: LD_VAR 0 8
32678: PUSH
32679: LD_INT 2
32681: ARRAY
32682: PUSH
32683: LD_VAR 0 3
32687: PLUS
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: EMPTY
32694: LIST
32695: ADD
32696: ST_TO_ADDR
32697: GO 32646
32699: POP
32700: POP
// result = temp_list2 ;
32701: LD_ADDR_VAR 0 7
32705: PUSH
32706: LD_VAR 0 10
32710: ST_TO_ADDR
// end ;
32711: LD_VAR 0 7
32715: RET
// export function EnemyInRange ( unit , dist ) ; begin
32716: LD_INT 0
32718: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32719: LD_ADDR_VAR 0 3
32723: PUSH
32724: LD_VAR 0 1
32728: PPUSH
32729: CALL_OW 255
32733: PPUSH
32734: LD_VAR 0 1
32738: PPUSH
32739: CALL_OW 250
32743: PPUSH
32744: LD_VAR 0 1
32748: PPUSH
32749: CALL_OW 251
32753: PPUSH
32754: LD_VAR 0 2
32758: PPUSH
32759: CALL 6118 0 4
32763: PUSH
32764: LD_INT 4
32766: ARRAY
32767: ST_TO_ADDR
// end ;
32768: LD_VAR 0 3
32772: RET
// export function PlayerSeeMe ( unit ) ; begin
32773: LD_INT 0
32775: PPUSH
// result := See ( your_side , unit ) ;
32776: LD_ADDR_VAR 0 2
32780: PUSH
32781: LD_OWVAR 2
32785: PPUSH
32786: LD_VAR 0 1
32790: PPUSH
32791: CALL_OW 292
32795: ST_TO_ADDR
// end ;
32796: LD_VAR 0 2
32800: RET
// export function ReverseDir ( unit ) ; begin
32801: LD_INT 0
32803: PPUSH
// if not unit then
32804: LD_VAR 0 1
32808: NOT
32809: IFFALSE 32813
// exit ;
32811: GO 32836
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32813: LD_ADDR_VAR 0 2
32817: PUSH
32818: LD_VAR 0 1
32822: PPUSH
32823: CALL_OW 254
32827: PUSH
32828: LD_INT 3
32830: PLUS
32831: PUSH
32832: LD_INT 6
32834: MOD
32835: ST_TO_ADDR
// end ;
32836: LD_VAR 0 2
32840: RET
// export function ReverseArray ( array ) ; var i ; begin
32841: LD_INT 0
32843: PPUSH
32844: PPUSH
// if not array then
32845: LD_VAR 0 1
32849: NOT
32850: IFFALSE 32854
// exit ;
32852: GO 32909
// result := [ ] ;
32854: LD_ADDR_VAR 0 2
32858: PUSH
32859: EMPTY
32860: ST_TO_ADDR
// for i := array downto 1 do
32861: LD_ADDR_VAR 0 3
32865: PUSH
32866: DOUBLE
32867: LD_VAR 0 1
32871: INC
32872: ST_TO_ADDR
32873: LD_INT 1
32875: PUSH
32876: FOR_DOWNTO
32877: IFFALSE 32907
// result := Join ( result , array [ i ] ) ;
32879: LD_ADDR_VAR 0 2
32883: PUSH
32884: LD_VAR 0 2
32888: PPUSH
32889: LD_VAR 0 1
32893: PUSH
32894: LD_VAR 0 3
32898: ARRAY
32899: PPUSH
32900: CALL 37552 0 2
32904: ST_TO_ADDR
32905: GO 32876
32907: POP
32908: POP
// end ;
32909: LD_VAR 0 2
32913: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
32914: LD_INT 0
32916: PPUSH
32917: PPUSH
32918: PPUSH
32919: PPUSH
32920: PPUSH
32921: PPUSH
// if not unit or not hexes then
32922: LD_VAR 0 1
32926: NOT
32927: PUSH
32928: LD_VAR 0 2
32932: NOT
32933: OR
32934: IFFALSE 32938
// exit ;
32936: GO 33061
// dist := 9999 ;
32938: LD_ADDR_VAR 0 5
32942: PUSH
32943: LD_INT 9999
32945: ST_TO_ADDR
// for i = 1 to hexes do
32946: LD_ADDR_VAR 0 4
32950: PUSH
32951: DOUBLE
32952: LD_INT 1
32954: DEC
32955: ST_TO_ADDR
32956: LD_VAR 0 2
32960: PUSH
32961: FOR_TO
32962: IFFALSE 33049
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32964: LD_ADDR_VAR 0 6
32968: PUSH
32969: LD_VAR 0 1
32973: PPUSH
32974: LD_VAR 0 2
32978: PUSH
32979: LD_VAR 0 4
32983: ARRAY
32984: PUSH
32985: LD_INT 1
32987: ARRAY
32988: PPUSH
32989: LD_VAR 0 2
32993: PUSH
32994: LD_VAR 0 4
32998: ARRAY
32999: PUSH
33000: LD_INT 2
33002: ARRAY
33003: PPUSH
33004: CALL_OW 297
33008: ST_TO_ADDR
// if tdist < dist then
33009: LD_VAR 0 6
33013: PUSH
33014: LD_VAR 0 5
33018: LESS
33019: IFFALSE 33047
// begin hex := hexes [ i ] ;
33021: LD_ADDR_VAR 0 8
33025: PUSH
33026: LD_VAR 0 2
33030: PUSH
33031: LD_VAR 0 4
33035: ARRAY
33036: ST_TO_ADDR
// dist := tdist ;
33037: LD_ADDR_VAR 0 5
33041: PUSH
33042: LD_VAR 0 6
33046: ST_TO_ADDR
// end ; end ;
33047: GO 32961
33049: POP
33050: POP
// result := hex ;
33051: LD_ADDR_VAR 0 3
33055: PUSH
33056: LD_VAR 0 8
33060: ST_TO_ADDR
// end ;
33061: LD_VAR 0 3
33065: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33066: LD_INT 0
33068: PPUSH
33069: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33070: LD_VAR 0 1
33074: NOT
33075: PUSH
33076: LD_VAR 0 1
33080: PUSH
33081: LD_INT 21
33083: PUSH
33084: LD_INT 2
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 23
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PPUSH
33105: CALL_OW 69
33109: IN
33110: NOT
33111: OR
33112: IFFALSE 33116
// exit ;
33114: GO 33163
// for i = 1 to 3 do
33116: LD_ADDR_VAR 0 3
33120: PUSH
33121: DOUBLE
33122: LD_INT 1
33124: DEC
33125: ST_TO_ADDR
33126: LD_INT 3
33128: PUSH
33129: FOR_TO
33130: IFFALSE 33161
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33132: LD_VAR 0 1
33136: PPUSH
33137: CALL_OW 250
33141: PPUSH
33142: LD_VAR 0 1
33146: PPUSH
33147: CALL_OW 251
33151: PPUSH
33152: LD_INT 1
33154: PPUSH
33155: CALL_OW 453
33159: GO 33129
33161: POP
33162: POP
// end ;
33163: LD_VAR 0 2
33167: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33168: LD_INT 0
33170: PPUSH
33171: PPUSH
33172: PPUSH
33173: PPUSH
33174: PPUSH
33175: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33176: LD_VAR 0 1
33180: NOT
33181: PUSH
33182: LD_VAR 0 2
33186: NOT
33187: OR
33188: PUSH
33189: LD_VAR 0 1
33193: PPUSH
33194: CALL_OW 314
33198: OR
33199: IFFALSE 33203
// exit ;
33201: GO 33670
// if GetLives ( i ) < 250 then
33203: LD_VAR 0 4
33207: PPUSH
33208: CALL_OW 256
33212: PUSH
33213: LD_INT 250
33215: LESS
33216: IFFALSE 33229
// begin ComAutodestruct ( i ) ;
33218: LD_VAR 0 4
33222: PPUSH
33223: CALL 33066 0 1
// exit ;
33227: GO 33670
// end ; x := GetX ( enemy_unit ) ;
33229: LD_ADDR_VAR 0 7
33233: PUSH
33234: LD_VAR 0 2
33238: PPUSH
33239: CALL_OW 250
33243: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33244: LD_ADDR_VAR 0 8
33248: PUSH
33249: LD_VAR 0 2
33253: PPUSH
33254: CALL_OW 251
33258: ST_TO_ADDR
// if not x or not y then
33259: LD_VAR 0 7
33263: NOT
33264: PUSH
33265: LD_VAR 0 8
33269: NOT
33270: OR
33271: IFFALSE 33275
// exit ;
33273: GO 33670
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33275: LD_ADDR_VAR 0 6
33279: PUSH
33280: LD_VAR 0 7
33284: PPUSH
33285: LD_INT 0
33287: PPUSH
33288: LD_INT 4
33290: PPUSH
33291: CALL_OW 272
33295: PUSH
33296: LD_VAR 0 8
33300: PPUSH
33301: LD_INT 0
33303: PPUSH
33304: LD_INT 4
33306: PPUSH
33307: CALL_OW 273
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_VAR 0 7
33320: PPUSH
33321: LD_INT 1
33323: PPUSH
33324: LD_INT 4
33326: PPUSH
33327: CALL_OW 272
33331: PUSH
33332: LD_VAR 0 8
33336: PPUSH
33337: LD_INT 1
33339: PPUSH
33340: LD_INT 4
33342: PPUSH
33343: CALL_OW 273
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_VAR 0 7
33356: PPUSH
33357: LD_INT 2
33359: PPUSH
33360: LD_INT 4
33362: PPUSH
33363: CALL_OW 272
33367: PUSH
33368: LD_VAR 0 8
33372: PPUSH
33373: LD_INT 2
33375: PPUSH
33376: LD_INT 4
33378: PPUSH
33379: CALL_OW 273
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_VAR 0 7
33392: PPUSH
33393: LD_INT 3
33395: PPUSH
33396: LD_INT 4
33398: PPUSH
33399: CALL_OW 272
33403: PUSH
33404: LD_VAR 0 8
33408: PPUSH
33409: LD_INT 3
33411: PPUSH
33412: LD_INT 4
33414: PPUSH
33415: CALL_OW 273
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_VAR 0 7
33428: PPUSH
33429: LD_INT 4
33431: PPUSH
33432: LD_INT 4
33434: PPUSH
33435: CALL_OW 272
33439: PUSH
33440: LD_VAR 0 8
33444: PPUSH
33445: LD_INT 4
33447: PPUSH
33448: LD_INT 4
33450: PPUSH
33451: CALL_OW 273
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_VAR 0 7
33464: PPUSH
33465: LD_INT 5
33467: PPUSH
33468: LD_INT 4
33470: PPUSH
33471: CALL_OW 272
33475: PUSH
33476: LD_VAR 0 8
33480: PPUSH
33481: LD_INT 5
33483: PPUSH
33484: LD_INT 4
33486: PPUSH
33487: CALL_OW 273
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: ST_TO_ADDR
// for i = tmp downto 1 do
33504: LD_ADDR_VAR 0 4
33508: PUSH
33509: DOUBLE
33510: LD_VAR 0 6
33514: INC
33515: ST_TO_ADDR
33516: LD_INT 1
33518: PUSH
33519: FOR_DOWNTO
33520: IFFALSE 33621
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33522: LD_VAR 0 6
33526: PUSH
33527: LD_VAR 0 4
33531: ARRAY
33532: PUSH
33533: LD_INT 1
33535: ARRAY
33536: PPUSH
33537: LD_VAR 0 6
33541: PUSH
33542: LD_VAR 0 4
33546: ARRAY
33547: PUSH
33548: LD_INT 2
33550: ARRAY
33551: PPUSH
33552: CALL_OW 488
33556: NOT
33557: PUSH
33558: LD_VAR 0 6
33562: PUSH
33563: LD_VAR 0 4
33567: ARRAY
33568: PUSH
33569: LD_INT 1
33571: ARRAY
33572: PPUSH
33573: LD_VAR 0 6
33577: PUSH
33578: LD_VAR 0 4
33582: ARRAY
33583: PUSH
33584: LD_INT 2
33586: ARRAY
33587: PPUSH
33588: CALL_OW 428
33592: PUSH
33593: LD_INT 0
33595: NONEQUAL
33596: OR
33597: IFFALSE 33619
// tmp := Delete ( tmp , i ) ;
33599: LD_ADDR_VAR 0 6
33603: PUSH
33604: LD_VAR 0 6
33608: PPUSH
33609: LD_VAR 0 4
33613: PPUSH
33614: CALL_OW 3
33618: ST_TO_ADDR
33619: GO 33519
33621: POP
33622: POP
// j := GetClosestHex ( unit , tmp ) ;
33623: LD_ADDR_VAR 0 5
33627: PUSH
33628: LD_VAR 0 1
33632: PPUSH
33633: LD_VAR 0 6
33637: PPUSH
33638: CALL 32914 0 2
33642: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33643: LD_VAR 0 1
33647: PPUSH
33648: LD_VAR 0 5
33652: PUSH
33653: LD_INT 1
33655: ARRAY
33656: PPUSH
33657: LD_VAR 0 5
33661: PUSH
33662: LD_INT 2
33664: ARRAY
33665: PPUSH
33666: CALL_OW 111
// end ;
33670: LD_VAR 0 3
33674: RET
// export function PrepareApemanSoldier ( ) ; begin
33675: LD_INT 0
33677: PPUSH
// uc_nation := 0 ;
33678: LD_ADDR_OWVAR 21
33682: PUSH
33683: LD_INT 0
33685: ST_TO_ADDR
// hc_sex := sex_male ;
33686: LD_ADDR_OWVAR 27
33690: PUSH
33691: LD_INT 1
33693: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
33694: LD_ADDR_OWVAR 28
33698: PUSH
33699: LD_INT 15
33701: ST_TO_ADDR
// hc_gallery :=  ;
33702: LD_ADDR_OWVAR 33
33706: PUSH
33707: LD_STRING 
33709: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33710: LD_ADDR_OWVAR 31
33714: PUSH
33715: LD_INT 0
33717: PPUSH
33718: LD_INT 3
33720: PPUSH
33721: CALL_OW 12
33725: PUSH
33726: LD_INT 0
33728: PPUSH
33729: LD_INT 3
33731: PPUSH
33732: CALL_OW 12
33736: PUSH
33737: LD_INT 0
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: ST_TO_ADDR
// end ;
33749: LD_VAR 0 1
33753: RET
// export function PrepareApemanEngineer ( ) ; begin
33754: LD_INT 0
33756: PPUSH
// uc_nation := 0 ;
33757: LD_ADDR_OWVAR 21
33761: PUSH
33762: LD_INT 0
33764: ST_TO_ADDR
// hc_sex := sex_male ;
33765: LD_ADDR_OWVAR 27
33769: PUSH
33770: LD_INT 1
33772: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
33773: LD_ADDR_OWVAR 28
33777: PUSH
33778: LD_INT 16
33780: ST_TO_ADDR
// hc_gallery :=  ;
33781: LD_ADDR_OWVAR 33
33785: PUSH
33786: LD_STRING 
33788: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33789: LD_ADDR_OWVAR 31
33793: PUSH
33794: LD_INT 0
33796: PPUSH
33797: LD_INT 3
33799: PPUSH
33800: CALL_OW 12
33804: PUSH
33805: LD_INT 0
33807: PPUSH
33808: LD_INT 3
33810: PPUSH
33811: CALL_OW 12
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: ST_TO_ADDR
// end ;
33828: LD_VAR 0 1
33832: RET
// export function PrepareApeman ( agressivity ) ; begin
33833: LD_INT 0
33835: PPUSH
// uc_side := 0 ;
33836: LD_ADDR_OWVAR 20
33840: PUSH
33841: LD_INT 0
33843: ST_TO_ADDR
// uc_nation := 0 ;
33844: LD_ADDR_OWVAR 21
33848: PUSH
33849: LD_INT 0
33851: ST_TO_ADDR
// hc_sex := sex_male ;
33852: LD_ADDR_OWVAR 27
33856: PUSH
33857: LD_INT 1
33859: ST_TO_ADDR
// hc_class := class_apeman ;
33860: LD_ADDR_OWVAR 28
33864: PUSH
33865: LD_INT 12
33867: ST_TO_ADDR
// hc_gallery :=  ;
33868: LD_ADDR_OWVAR 33
33872: PUSH
33873: LD_STRING 
33875: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
33876: LD_ADDR_OWVAR 35
33880: PUSH
33881: LD_VAR 0 1
33885: NEG
33886: PPUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 12
33896: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33897: LD_ADDR_OWVAR 31
33901: PUSH
33902: LD_INT 0
33904: PPUSH
33905: LD_INT 3
33907: PPUSH
33908: CALL_OW 12
33912: PUSH
33913: LD_INT 0
33915: PPUSH
33916: LD_INT 3
33918: PPUSH
33919: CALL_OW 12
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: ST_TO_ADDR
// end ;
33936: LD_VAR 0 2
33940: RET
// export function PrepareTiger ( agressivity ) ; begin
33941: LD_INT 0
33943: PPUSH
// uc_side := 0 ;
33944: LD_ADDR_OWVAR 20
33948: PUSH
33949: LD_INT 0
33951: ST_TO_ADDR
// uc_nation := 0 ;
33952: LD_ADDR_OWVAR 21
33956: PUSH
33957: LD_INT 0
33959: ST_TO_ADDR
// hc_class := class_tiger ;
33960: LD_ADDR_OWVAR 28
33964: PUSH
33965: LD_INT 14
33967: ST_TO_ADDR
// hc_gallery :=  ;
33968: LD_ADDR_OWVAR 33
33972: PUSH
33973: LD_STRING 
33975: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
33976: LD_ADDR_OWVAR 35
33980: PUSH
33981: LD_VAR 0 1
33985: NEG
33986: PPUSH
33987: LD_VAR 0 1
33991: PPUSH
33992: CALL_OW 12
33996: ST_TO_ADDR
// end ;
33997: LD_VAR 0 2
34001: RET
// export function PrepareEnchidna ( ) ; begin
34002: LD_INT 0
34004: PPUSH
// uc_side := 0 ;
34005: LD_ADDR_OWVAR 20
34009: PUSH
34010: LD_INT 0
34012: ST_TO_ADDR
// uc_nation := 0 ;
34013: LD_ADDR_OWVAR 21
34017: PUSH
34018: LD_INT 0
34020: ST_TO_ADDR
// hc_class := class_baggie ;
34021: LD_ADDR_OWVAR 28
34025: PUSH
34026: LD_INT 13
34028: ST_TO_ADDR
// hc_gallery :=  ;
34029: LD_ADDR_OWVAR 33
34033: PUSH
34034: LD_STRING 
34036: ST_TO_ADDR
// end ;
34037: LD_VAR 0 1
34041: RET
// export function PrepareFrog ( ) ; begin
34042: LD_INT 0
34044: PPUSH
// uc_side := 0 ;
34045: LD_ADDR_OWVAR 20
34049: PUSH
34050: LD_INT 0
34052: ST_TO_ADDR
// uc_nation := 0 ;
34053: LD_ADDR_OWVAR 21
34057: PUSH
34058: LD_INT 0
34060: ST_TO_ADDR
// hc_class := class_frog ;
34061: LD_ADDR_OWVAR 28
34065: PUSH
34066: LD_INT 19
34068: ST_TO_ADDR
// hc_gallery :=  ;
34069: LD_ADDR_OWVAR 33
34073: PUSH
34074: LD_STRING 
34076: ST_TO_ADDR
// end ;
34077: LD_VAR 0 1
34081: RET
// export function PrepareFish ( ) ; begin
34082: LD_INT 0
34084: PPUSH
// uc_side := 0 ;
34085: LD_ADDR_OWVAR 20
34089: PUSH
34090: LD_INT 0
34092: ST_TO_ADDR
// uc_nation := 0 ;
34093: LD_ADDR_OWVAR 21
34097: PUSH
34098: LD_INT 0
34100: ST_TO_ADDR
// hc_class := class_fish ;
34101: LD_ADDR_OWVAR 28
34105: PUSH
34106: LD_INT 20
34108: ST_TO_ADDR
// hc_gallery :=  ;
34109: LD_ADDR_OWVAR 33
34113: PUSH
34114: LD_STRING 
34116: ST_TO_ADDR
// end ;
34117: LD_VAR 0 1
34121: RET
// export function PrepareBird ( ) ; begin
34122: LD_INT 0
34124: PPUSH
// uc_side := 0 ;
34125: LD_ADDR_OWVAR 20
34129: PUSH
34130: LD_INT 0
34132: ST_TO_ADDR
// uc_nation := 0 ;
34133: LD_ADDR_OWVAR 21
34137: PUSH
34138: LD_INT 0
34140: ST_TO_ADDR
// hc_class := class_phororhacos ;
34141: LD_ADDR_OWVAR 28
34145: PUSH
34146: LD_INT 18
34148: ST_TO_ADDR
// hc_gallery :=  ;
34149: LD_ADDR_OWVAR 33
34153: PUSH
34154: LD_STRING 
34156: ST_TO_ADDR
// end ;
34157: LD_VAR 0 1
34161: RET
// export function PrepareHorse ( ) ; begin
34162: LD_INT 0
34164: PPUSH
// uc_side := 0 ;
34165: LD_ADDR_OWVAR 20
34169: PUSH
34170: LD_INT 0
34172: ST_TO_ADDR
// uc_nation := 0 ;
34173: LD_ADDR_OWVAR 21
34177: PUSH
34178: LD_INT 0
34180: ST_TO_ADDR
// hc_class := class_horse ;
34181: LD_ADDR_OWVAR 28
34185: PUSH
34186: LD_INT 21
34188: ST_TO_ADDR
// hc_gallery :=  ;
34189: LD_ADDR_OWVAR 33
34193: PUSH
34194: LD_STRING 
34196: ST_TO_ADDR
// end ;
34197: LD_VAR 0 1
34201: RET
// export function PrepareMastodont ( ) ; begin
34202: LD_INT 0
34204: PPUSH
// uc_side := 0 ;
34205: LD_ADDR_OWVAR 20
34209: PUSH
34210: LD_INT 0
34212: ST_TO_ADDR
// uc_nation := 0 ;
34213: LD_ADDR_OWVAR 21
34217: PUSH
34218: LD_INT 0
34220: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34221: LD_ADDR_OWVAR 37
34225: PUSH
34226: LD_INT 31
34228: ST_TO_ADDR
// vc_control := control_rider ;
34229: LD_ADDR_OWVAR 38
34233: PUSH
34234: LD_INT 4
34236: ST_TO_ADDR
// end ;
34237: LD_VAR 0 1
34241: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34242: LD_INT 0
34244: PPUSH
34245: PPUSH
34246: PPUSH
// uc_side = 0 ;
34247: LD_ADDR_OWVAR 20
34251: PUSH
34252: LD_INT 0
34254: ST_TO_ADDR
// uc_nation = 0 ;
34255: LD_ADDR_OWVAR 21
34259: PUSH
34260: LD_INT 0
34262: ST_TO_ADDR
// InitHc_All ( ) ;
34263: CALL_OW 584
// InitVc ;
34267: CALL_OW 20
// if mastodonts then
34271: LD_VAR 0 6
34275: IFFALSE 34342
// for i = 1 to mastodonts do
34277: LD_ADDR_VAR 0 11
34281: PUSH
34282: DOUBLE
34283: LD_INT 1
34285: DEC
34286: ST_TO_ADDR
34287: LD_VAR 0 6
34291: PUSH
34292: FOR_TO
34293: IFFALSE 34340
// begin vc_chassis := 31 ;
34295: LD_ADDR_OWVAR 37
34299: PUSH
34300: LD_INT 31
34302: ST_TO_ADDR
// vc_control := control_rider ;
34303: LD_ADDR_OWVAR 38
34307: PUSH
34308: LD_INT 4
34310: ST_TO_ADDR
// animal := CreateVehicle ;
34311: LD_ADDR_VAR 0 12
34315: PUSH
34316: CALL_OW 45
34320: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34321: LD_VAR 0 12
34325: PPUSH
34326: LD_VAR 0 8
34330: PPUSH
34331: LD_INT 0
34333: PPUSH
34334: CALL 36470 0 3
// end ;
34338: GO 34292
34340: POP
34341: POP
// if horses then
34342: LD_VAR 0 5
34346: IFFALSE 34413
// for i = 1 to horses do
34348: LD_ADDR_VAR 0 11
34352: PUSH
34353: DOUBLE
34354: LD_INT 1
34356: DEC
34357: ST_TO_ADDR
34358: LD_VAR 0 5
34362: PUSH
34363: FOR_TO
34364: IFFALSE 34411
// begin hc_class := 21 ;
34366: LD_ADDR_OWVAR 28
34370: PUSH
34371: LD_INT 21
34373: ST_TO_ADDR
// hc_gallery :=  ;
34374: LD_ADDR_OWVAR 33
34378: PUSH
34379: LD_STRING 
34381: ST_TO_ADDR
// animal := CreateHuman ;
34382: LD_ADDR_VAR 0 12
34386: PUSH
34387: CALL_OW 44
34391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34392: LD_VAR 0 12
34396: PPUSH
34397: LD_VAR 0 8
34401: PPUSH
34402: LD_INT 0
34404: PPUSH
34405: CALL 36470 0 3
// end ;
34409: GO 34363
34411: POP
34412: POP
// if birds then
34413: LD_VAR 0 1
34417: IFFALSE 34484
// for i = 1 to birds do
34419: LD_ADDR_VAR 0 11
34423: PUSH
34424: DOUBLE
34425: LD_INT 1
34427: DEC
34428: ST_TO_ADDR
34429: LD_VAR 0 1
34433: PUSH
34434: FOR_TO
34435: IFFALSE 34482
// begin hc_class = 18 ;
34437: LD_ADDR_OWVAR 28
34441: PUSH
34442: LD_INT 18
34444: ST_TO_ADDR
// hc_gallery =  ;
34445: LD_ADDR_OWVAR 33
34449: PUSH
34450: LD_STRING 
34452: ST_TO_ADDR
// animal := CreateHuman ;
34453: LD_ADDR_VAR 0 12
34457: PUSH
34458: CALL_OW 44
34462: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34463: LD_VAR 0 12
34467: PPUSH
34468: LD_VAR 0 8
34472: PPUSH
34473: LD_INT 0
34475: PPUSH
34476: CALL 36470 0 3
// end ;
34480: GO 34434
34482: POP
34483: POP
// if tigers then
34484: LD_VAR 0 2
34488: IFFALSE 34572
// for i = 1 to tigers do
34490: LD_ADDR_VAR 0 11
34494: PUSH
34495: DOUBLE
34496: LD_INT 1
34498: DEC
34499: ST_TO_ADDR
34500: LD_VAR 0 2
34504: PUSH
34505: FOR_TO
34506: IFFALSE 34570
// begin hc_class = class_tiger ;
34508: LD_ADDR_OWVAR 28
34512: PUSH
34513: LD_INT 14
34515: ST_TO_ADDR
// hc_gallery =  ;
34516: LD_ADDR_OWVAR 33
34520: PUSH
34521: LD_STRING 
34523: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34524: LD_ADDR_OWVAR 35
34528: PUSH
34529: LD_INT 7
34531: NEG
34532: PPUSH
34533: LD_INT 7
34535: PPUSH
34536: CALL_OW 12
34540: ST_TO_ADDR
// animal := CreateHuman ;
34541: LD_ADDR_VAR 0 12
34545: PUSH
34546: CALL_OW 44
34550: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34551: LD_VAR 0 12
34555: PPUSH
34556: LD_VAR 0 8
34560: PPUSH
34561: LD_INT 0
34563: PPUSH
34564: CALL 36470 0 3
// end ;
34568: GO 34505
34570: POP
34571: POP
// if apemans then
34572: LD_VAR 0 3
34576: IFFALSE 34699
// for i = 1 to apemans do
34578: LD_ADDR_VAR 0 11
34582: PUSH
34583: DOUBLE
34584: LD_INT 1
34586: DEC
34587: ST_TO_ADDR
34588: LD_VAR 0 3
34592: PUSH
34593: FOR_TO
34594: IFFALSE 34697
// begin hc_class = class_apeman ;
34596: LD_ADDR_OWVAR 28
34600: PUSH
34601: LD_INT 12
34603: ST_TO_ADDR
// hc_gallery =  ;
34604: LD_ADDR_OWVAR 33
34608: PUSH
34609: LD_STRING 
34611: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34612: LD_ADDR_OWVAR 35
34616: PUSH
34617: LD_INT 2
34619: NEG
34620: PPUSH
34621: LD_INT 2
34623: PPUSH
34624: CALL_OW 12
34628: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34629: LD_ADDR_OWVAR 31
34633: PUSH
34634: LD_INT 1
34636: PPUSH
34637: LD_INT 3
34639: PPUSH
34640: CALL_OW 12
34644: PUSH
34645: LD_INT 1
34647: PPUSH
34648: LD_INT 3
34650: PPUSH
34651: CALL_OW 12
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: LD_INT 0
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: ST_TO_ADDR
// animal := CreateHuman ;
34668: LD_ADDR_VAR 0 12
34672: PUSH
34673: CALL_OW 44
34677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34678: LD_VAR 0 12
34682: PPUSH
34683: LD_VAR 0 8
34687: PPUSH
34688: LD_INT 0
34690: PPUSH
34691: CALL 36470 0 3
// end ;
34695: GO 34593
34697: POP
34698: POP
// if enchidnas then
34699: LD_VAR 0 4
34703: IFFALSE 34770
// for i = 1 to enchidnas do
34705: LD_ADDR_VAR 0 11
34709: PUSH
34710: DOUBLE
34711: LD_INT 1
34713: DEC
34714: ST_TO_ADDR
34715: LD_VAR 0 4
34719: PUSH
34720: FOR_TO
34721: IFFALSE 34768
// begin hc_class = 13 ;
34723: LD_ADDR_OWVAR 28
34727: PUSH
34728: LD_INT 13
34730: ST_TO_ADDR
// hc_gallery =  ;
34731: LD_ADDR_OWVAR 33
34735: PUSH
34736: LD_STRING 
34738: ST_TO_ADDR
// animal := CreateHuman ;
34739: LD_ADDR_VAR 0 12
34743: PUSH
34744: CALL_OW 44
34748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34749: LD_VAR 0 12
34753: PPUSH
34754: LD_VAR 0 8
34758: PPUSH
34759: LD_INT 0
34761: PPUSH
34762: CALL 36470 0 3
// end ;
34766: GO 34720
34768: POP
34769: POP
// if fishes then
34770: LD_VAR 0 7
34774: IFFALSE 34841
// for i = 1 to fishes do
34776: LD_ADDR_VAR 0 11
34780: PUSH
34781: DOUBLE
34782: LD_INT 1
34784: DEC
34785: ST_TO_ADDR
34786: LD_VAR 0 7
34790: PUSH
34791: FOR_TO
34792: IFFALSE 34839
// begin hc_class = 20 ;
34794: LD_ADDR_OWVAR 28
34798: PUSH
34799: LD_INT 20
34801: ST_TO_ADDR
// hc_gallery =  ;
34802: LD_ADDR_OWVAR 33
34806: PUSH
34807: LD_STRING 
34809: ST_TO_ADDR
// animal := CreateHuman ;
34810: LD_ADDR_VAR 0 12
34814: PUSH
34815: CALL_OW 44
34819: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
34820: LD_VAR 0 12
34824: PPUSH
34825: LD_VAR 0 9
34829: PPUSH
34830: LD_INT 0
34832: PPUSH
34833: CALL 36470 0 3
// end ;
34837: GO 34791
34839: POP
34840: POP
// end ;
34841: LD_VAR 0 10
34845: RET
// export function WantHeal ( sci , unit ) ; begin
34846: LD_INT 0
34848: PPUSH
// if GetTaskList ( sci ) > 0 then
34849: LD_VAR 0 1
34853: PPUSH
34854: CALL_OW 437
34858: PUSH
34859: LD_INT 0
34861: GREATER
34862: IFFALSE 34932
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
34864: LD_VAR 0 1
34868: PPUSH
34869: CALL_OW 437
34873: PUSH
34874: LD_INT 1
34876: ARRAY
34877: PUSH
34878: LD_INT 1
34880: ARRAY
34881: PUSH
34882: LD_STRING l
34884: EQUAL
34885: PUSH
34886: LD_VAR 0 1
34890: PPUSH
34891: CALL_OW 437
34895: PUSH
34896: LD_INT 1
34898: ARRAY
34899: PUSH
34900: LD_INT 4
34902: ARRAY
34903: PUSH
34904: LD_VAR 0 2
34908: EQUAL
34909: AND
34910: IFFALSE 34922
// result := true else
34912: LD_ADDR_VAR 0 3
34916: PUSH
34917: LD_INT 1
34919: ST_TO_ADDR
34920: GO 34930
// result := false ;
34922: LD_ADDR_VAR 0 3
34926: PUSH
34927: LD_INT 0
34929: ST_TO_ADDR
// end else
34930: GO 34940
// result := false ;
34932: LD_ADDR_VAR 0 3
34936: PUSH
34937: LD_INT 0
34939: ST_TO_ADDR
// end ;
34940: LD_VAR 0 3
34944: RET
// export function HealTarget ( sci ) ; begin
34945: LD_INT 0
34947: PPUSH
// if not sci then
34948: LD_VAR 0 1
34952: NOT
34953: IFFALSE 34957
// exit ;
34955: GO 35022
// result := 0 ;
34957: LD_ADDR_VAR 0 2
34961: PUSH
34962: LD_INT 0
34964: ST_TO_ADDR
// if GetTaskList ( sci ) then
34965: LD_VAR 0 1
34969: PPUSH
34970: CALL_OW 437
34974: IFFALSE 35022
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
34976: LD_VAR 0 1
34980: PPUSH
34981: CALL_OW 437
34985: PUSH
34986: LD_INT 1
34988: ARRAY
34989: PUSH
34990: LD_INT 1
34992: ARRAY
34993: PUSH
34994: LD_STRING l
34996: EQUAL
34997: IFFALSE 35022
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
34999: LD_ADDR_VAR 0 2
35003: PUSH
35004: LD_VAR 0 1
35008: PPUSH
35009: CALL_OW 437
35013: PUSH
35014: LD_INT 1
35016: ARRAY
35017: PUSH
35018: LD_INT 4
35020: ARRAY
35021: ST_TO_ADDR
// end ;
35022: LD_VAR 0 2
35026: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35027: LD_INT 0
35029: PPUSH
35030: PPUSH
35031: PPUSH
35032: PPUSH
// if not base_units then
35033: LD_VAR 0 1
35037: NOT
35038: IFFALSE 35042
// exit ;
35040: GO 35129
// result := false ;
35042: LD_ADDR_VAR 0 2
35046: PUSH
35047: LD_INT 0
35049: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35050: LD_ADDR_VAR 0 5
35054: PUSH
35055: LD_VAR 0 1
35059: PPUSH
35060: LD_INT 21
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PPUSH
35070: CALL_OW 72
35074: ST_TO_ADDR
// if not tmp then
35075: LD_VAR 0 5
35079: NOT
35080: IFFALSE 35084
// exit ;
35082: GO 35129
// for i in tmp do
35084: LD_ADDR_VAR 0 3
35088: PUSH
35089: LD_VAR 0 5
35093: PUSH
35094: FOR_IN
35095: IFFALSE 35127
// begin result := EnemyInRange ( i , 22 ) ;
35097: LD_ADDR_VAR 0 2
35101: PUSH
35102: LD_VAR 0 3
35106: PPUSH
35107: LD_INT 22
35109: PPUSH
35110: CALL 32716 0 2
35114: ST_TO_ADDR
// if result then
35115: LD_VAR 0 2
35119: IFFALSE 35125
// exit ;
35121: POP
35122: POP
35123: GO 35129
// end ;
35125: GO 35094
35127: POP
35128: POP
// end ;
35129: LD_VAR 0 2
35133: RET
// export function FilterByTag ( units , tag ) ; begin
35134: LD_INT 0
35136: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35137: LD_ADDR_VAR 0 3
35141: PUSH
35142: LD_VAR 0 1
35146: PPUSH
35147: LD_INT 120
35149: PUSH
35150: LD_VAR 0 2
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PPUSH
35159: CALL_OW 72
35163: ST_TO_ADDR
// end ;
35164: LD_VAR 0 3
35168: RET
// export function IsDriver ( un ) ; begin
35169: LD_INT 0
35171: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35172: LD_ADDR_VAR 0 2
35176: PUSH
35177: LD_VAR 0 1
35181: PUSH
35182: LD_INT 55
35184: PUSH
35185: EMPTY
35186: LIST
35187: PPUSH
35188: CALL_OW 69
35192: IN
35193: ST_TO_ADDR
// end ;
35194: LD_VAR 0 2
35198: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35199: LD_INT 0
35201: PPUSH
35202: PPUSH
// list := [ ] ;
35203: LD_ADDR_VAR 0 5
35207: PUSH
35208: EMPTY
35209: ST_TO_ADDR
// case d of 0 :
35210: LD_VAR 0 3
35214: PUSH
35215: LD_INT 0
35217: DOUBLE
35218: EQUAL
35219: IFTRUE 35223
35221: GO 35356
35223: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35224: LD_ADDR_VAR 0 5
35228: PUSH
35229: LD_VAR 0 1
35233: PUSH
35234: LD_INT 4
35236: MINUS
35237: PUSH
35238: LD_VAR 0 2
35242: PUSH
35243: LD_INT 4
35245: MINUS
35246: PUSH
35247: LD_INT 2
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: LIST
35254: PUSH
35255: LD_VAR 0 1
35259: PUSH
35260: LD_INT 3
35262: MINUS
35263: PUSH
35264: LD_VAR 0 2
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: LIST
35276: PUSH
35277: LD_VAR 0 1
35281: PUSH
35282: LD_INT 4
35284: PLUS
35285: PUSH
35286: LD_VAR 0 2
35290: PUSH
35291: LD_INT 4
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: LIST
35298: PUSH
35299: LD_VAR 0 1
35303: PUSH
35304: LD_INT 3
35306: PLUS
35307: PUSH
35308: LD_VAR 0 2
35312: PUSH
35313: LD_INT 3
35315: PLUS
35316: PUSH
35317: LD_INT 5
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: PUSH
35325: LD_VAR 0 1
35329: PUSH
35330: LD_VAR 0 2
35334: PUSH
35335: LD_INT 4
35337: PLUS
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: ST_TO_ADDR
// end ; 1 :
35354: GO 36054
35356: LD_INT 1
35358: DOUBLE
35359: EQUAL
35360: IFTRUE 35364
35362: GO 35497
35364: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35365: LD_ADDR_VAR 0 5
35369: PUSH
35370: LD_VAR 0 1
35374: PUSH
35375: LD_VAR 0 2
35379: PUSH
35380: LD_INT 4
35382: MINUS
35383: PUSH
35384: LD_INT 3
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: LIST
35391: PUSH
35392: LD_VAR 0 1
35396: PUSH
35397: LD_INT 3
35399: MINUS
35400: PUSH
35401: LD_VAR 0 2
35405: PUSH
35406: LD_INT 3
35408: MINUS
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: LIST
35417: PUSH
35418: LD_VAR 0 1
35422: PUSH
35423: LD_INT 4
35425: MINUS
35426: PUSH
35427: LD_VAR 0 2
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: PUSH
35440: LD_VAR 0 1
35444: PUSH
35445: LD_VAR 0 2
35449: PUSH
35450: LD_INT 3
35452: PLUS
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: PUSH
35462: LD_VAR 0 1
35466: PUSH
35467: LD_INT 4
35469: PLUS
35470: PUSH
35471: LD_VAR 0 2
35475: PUSH
35476: LD_INT 4
35478: PLUS
35479: PUSH
35480: LD_INT 5
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: ST_TO_ADDR
// end ; 2 :
35495: GO 36054
35497: LD_INT 2
35499: DOUBLE
35500: EQUAL
35501: IFTRUE 35505
35503: GO 35634
35505: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35506: LD_ADDR_VAR 0 5
35510: PUSH
35511: LD_VAR 0 1
35515: PUSH
35516: LD_VAR 0 2
35520: PUSH
35521: LD_INT 3
35523: MINUS
35524: PUSH
35525: LD_INT 3
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: LIST
35532: PUSH
35533: LD_VAR 0 1
35537: PUSH
35538: LD_INT 4
35540: PLUS
35541: PUSH
35542: LD_VAR 0 2
35546: PUSH
35547: LD_INT 4
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: PUSH
35555: LD_VAR 0 1
35559: PUSH
35560: LD_VAR 0 2
35564: PUSH
35565: LD_INT 4
35567: PLUS
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: LIST
35576: PUSH
35577: LD_VAR 0 1
35581: PUSH
35582: LD_INT 3
35584: MINUS
35585: PUSH
35586: LD_VAR 0 2
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: PUSH
35599: LD_VAR 0 1
35603: PUSH
35604: LD_INT 4
35606: MINUS
35607: PUSH
35608: LD_VAR 0 2
35612: PUSH
35613: LD_INT 4
35615: MINUS
35616: PUSH
35617: LD_INT 2
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: ST_TO_ADDR
// end ; 3 :
35632: GO 36054
35634: LD_INT 3
35636: DOUBLE
35637: EQUAL
35638: IFTRUE 35642
35640: GO 35775
35642: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35643: LD_ADDR_VAR 0 5
35647: PUSH
35648: LD_VAR 0 1
35652: PUSH
35653: LD_INT 3
35655: PLUS
35656: PUSH
35657: LD_VAR 0 2
35661: PUSH
35662: LD_INT 4
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: LIST
35669: PUSH
35670: LD_VAR 0 1
35674: PUSH
35675: LD_INT 4
35677: PLUS
35678: PUSH
35679: LD_VAR 0 2
35683: PUSH
35684: LD_INT 4
35686: PLUS
35687: PUSH
35688: LD_INT 5
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: PUSH
35696: LD_VAR 0 1
35700: PUSH
35701: LD_INT 4
35703: MINUS
35704: PUSH
35705: LD_VAR 0 2
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: PUSH
35718: LD_VAR 0 1
35722: PUSH
35723: LD_VAR 0 2
35727: PUSH
35728: LD_INT 4
35730: MINUS
35731: PUSH
35732: LD_INT 3
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: PUSH
35740: LD_VAR 0 1
35744: PUSH
35745: LD_INT 3
35747: MINUS
35748: PUSH
35749: LD_VAR 0 2
35753: PUSH
35754: LD_INT 3
35756: MINUS
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: ST_TO_ADDR
// end ; 4 :
35773: GO 36054
35775: LD_INT 4
35777: DOUBLE
35778: EQUAL
35779: IFTRUE 35783
35781: GO 35916
35783: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35784: LD_ADDR_VAR 0 5
35788: PUSH
35789: LD_VAR 0 1
35793: PUSH
35794: LD_VAR 0 2
35798: PUSH
35799: LD_INT 4
35801: PLUS
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: PUSH
35811: LD_VAR 0 1
35815: PUSH
35816: LD_INT 3
35818: PLUS
35819: PUSH
35820: LD_VAR 0 2
35824: PUSH
35825: LD_INT 3
35827: PLUS
35828: PUSH
35829: LD_INT 5
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: LIST
35836: PUSH
35837: LD_VAR 0 1
35841: PUSH
35842: LD_INT 4
35844: PLUS
35845: PUSH
35846: LD_VAR 0 2
35850: PUSH
35851: LD_INT 4
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: LIST
35858: PUSH
35859: LD_VAR 0 1
35863: PUSH
35864: LD_VAR 0 2
35868: PUSH
35869: LD_INT 3
35871: MINUS
35872: PUSH
35873: LD_INT 3
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: PUSH
35881: LD_VAR 0 1
35885: PUSH
35886: LD_INT 4
35888: MINUS
35889: PUSH
35890: LD_VAR 0 2
35894: PUSH
35895: LD_INT 4
35897: MINUS
35898: PUSH
35899: LD_INT 2
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: ST_TO_ADDR
// end ; 5 :
35914: GO 36054
35916: LD_INT 5
35918: DOUBLE
35919: EQUAL
35920: IFTRUE 35924
35922: GO 36053
35924: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
35925: LD_ADDR_VAR 0 5
35929: PUSH
35930: LD_VAR 0 1
35934: PUSH
35935: LD_INT 4
35937: MINUS
35938: PUSH
35939: LD_VAR 0 2
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: PUSH
35952: LD_VAR 0 1
35956: PUSH
35957: LD_VAR 0 2
35961: PUSH
35962: LD_INT 4
35964: MINUS
35965: PUSH
35966: LD_INT 3
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: PUSH
35974: LD_VAR 0 1
35978: PUSH
35979: LD_INT 4
35981: PLUS
35982: PUSH
35983: LD_VAR 0 2
35987: PUSH
35988: LD_INT 4
35990: PLUS
35991: PUSH
35992: LD_INT 5
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: PUSH
36000: LD_VAR 0 1
36004: PUSH
36005: LD_INT 3
36007: PLUS
36008: PUSH
36009: LD_VAR 0 2
36013: PUSH
36014: LD_INT 4
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: LIST
36021: PUSH
36022: LD_VAR 0 1
36026: PUSH
36027: LD_VAR 0 2
36031: PUSH
36032: LD_INT 3
36034: PLUS
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: ST_TO_ADDR
// end ; end ;
36051: GO 36054
36053: POP
// result := list ;
36054: LD_ADDR_VAR 0 4
36058: PUSH
36059: LD_VAR 0 5
36063: ST_TO_ADDR
// end ;
36064: LD_VAR 0 4
36068: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36069: LD_INT 0
36071: PPUSH
36072: PPUSH
36073: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36074: LD_VAR 0 1
36078: NOT
36079: PUSH
36080: LD_VAR 0 2
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: LD_INT 2
36090: PUSH
36091: LD_INT 3
36093: PUSH
36094: LD_INT 4
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: IN
36103: NOT
36104: OR
36105: IFFALSE 36109
// exit ;
36107: GO 36192
// tmp := [ ] ;
36109: LD_ADDR_VAR 0 5
36113: PUSH
36114: EMPTY
36115: ST_TO_ADDR
// for i in units do
36116: LD_ADDR_VAR 0 4
36120: PUSH
36121: LD_VAR 0 1
36125: PUSH
36126: FOR_IN
36127: IFFALSE 36161
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36129: LD_ADDR_VAR 0 5
36133: PUSH
36134: LD_VAR 0 5
36138: PPUSH
36139: LD_VAR 0 4
36143: PPUSH
36144: LD_VAR 0 2
36148: PPUSH
36149: CALL_OW 259
36153: PPUSH
36154: CALL 37552 0 2
36158: ST_TO_ADDR
36159: GO 36126
36161: POP
36162: POP
// if not tmp then
36163: LD_VAR 0 5
36167: NOT
36168: IFFALSE 36172
// exit ;
36170: GO 36192
// result := SortListByListDesc ( units , tmp ) ;
36172: LD_ADDR_VAR 0 3
36176: PUSH
36177: LD_VAR 0 1
36181: PPUSH
36182: LD_VAR 0 5
36186: PPUSH
36187: CALL_OW 77
36191: ST_TO_ADDR
// end ;
36192: LD_VAR 0 3
36196: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36197: LD_INT 0
36199: PPUSH
36200: PPUSH
36201: PPUSH
// result := false ;
36202: LD_ADDR_VAR 0 3
36206: PUSH
36207: LD_INT 0
36209: ST_TO_ADDR
// if not building then
36210: LD_VAR 0 2
36214: NOT
36215: IFFALSE 36219
// exit ;
36217: GO 36357
// x := GetX ( building ) ;
36219: LD_ADDR_VAR 0 4
36223: PUSH
36224: LD_VAR 0 2
36228: PPUSH
36229: CALL_OW 250
36233: ST_TO_ADDR
// y := GetY ( building ) ;
36234: LD_ADDR_VAR 0 5
36238: PUSH
36239: LD_VAR 0 2
36243: PPUSH
36244: CALL_OW 251
36248: ST_TO_ADDR
// if not x or not y then
36249: LD_VAR 0 4
36253: NOT
36254: PUSH
36255: LD_VAR 0 5
36259: NOT
36260: OR
36261: IFFALSE 36265
// exit ;
36263: GO 36357
// if GetTaskList ( unit ) then
36265: LD_VAR 0 1
36269: PPUSH
36270: CALL_OW 437
36274: IFFALSE 36357
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36276: LD_STRING e
36278: PUSH
36279: LD_VAR 0 1
36283: PPUSH
36284: CALL_OW 437
36288: PUSH
36289: LD_INT 1
36291: ARRAY
36292: PUSH
36293: LD_INT 1
36295: ARRAY
36296: EQUAL
36297: PUSH
36298: LD_VAR 0 4
36302: PUSH
36303: LD_VAR 0 1
36307: PPUSH
36308: CALL_OW 437
36312: PUSH
36313: LD_INT 1
36315: ARRAY
36316: PUSH
36317: LD_INT 2
36319: ARRAY
36320: EQUAL
36321: AND
36322: PUSH
36323: LD_VAR 0 5
36327: PUSH
36328: LD_VAR 0 1
36332: PPUSH
36333: CALL_OW 437
36337: PUSH
36338: LD_INT 1
36340: ARRAY
36341: PUSH
36342: LD_INT 3
36344: ARRAY
36345: EQUAL
36346: AND
36347: IFFALSE 36357
// result := true end ;
36349: LD_ADDR_VAR 0 3
36353: PUSH
36354: LD_INT 1
36356: ST_TO_ADDR
// end ;
36357: LD_VAR 0 3
36361: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36362: LD_INT 0
36364: PPUSH
// result := false ;
36365: LD_ADDR_VAR 0 4
36369: PUSH
36370: LD_INT 0
36372: ST_TO_ADDR
// if GetTaskList ( unit ) then
36373: LD_VAR 0 1
36377: PPUSH
36378: CALL_OW 437
36382: IFFALSE 36465
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36384: LD_STRING M
36386: PUSH
36387: LD_VAR 0 1
36391: PPUSH
36392: CALL_OW 437
36396: PUSH
36397: LD_INT 1
36399: ARRAY
36400: PUSH
36401: LD_INT 1
36403: ARRAY
36404: EQUAL
36405: PUSH
36406: LD_VAR 0 2
36410: PUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: CALL_OW 437
36420: PUSH
36421: LD_INT 1
36423: ARRAY
36424: PUSH
36425: LD_INT 2
36427: ARRAY
36428: EQUAL
36429: AND
36430: PUSH
36431: LD_VAR 0 3
36435: PUSH
36436: LD_VAR 0 1
36440: PPUSH
36441: CALL_OW 437
36445: PUSH
36446: LD_INT 1
36448: ARRAY
36449: PUSH
36450: LD_INT 3
36452: ARRAY
36453: EQUAL
36454: AND
36455: IFFALSE 36465
// result := true ;
36457: LD_ADDR_VAR 0 4
36461: PUSH
36462: LD_INT 1
36464: ST_TO_ADDR
// end ; end ;
36465: LD_VAR 0 4
36469: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36470: LD_INT 0
36472: PPUSH
36473: PPUSH
36474: PPUSH
36475: PPUSH
// if not unit or not area then
36476: LD_VAR 0 1
36480: NOT
36481: PUSH
36482: LD_VAR 0 2
36486: NOT
36487: OR
36488: IFFALSE 36492
// exit ;
36490: GO 36655
// tmp := AreaToList ( area , i ) ;
36492: LD_ADDR_VAR 0 6
36496: PUSH
36497: LD_VAR 0 2
36501: PPUSH
36502: LD_VAR 0 5
36506: PPUSH
36507: CALL_OW 517
36511: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36512: LD_ADDR_VAR 0 5
36516: PUSH
36517: DOUBLE
36518: LD_INT 1
36520: DEC
36521: ST_TO_ADDR
36522: LD_VAR 0 6
36526: PUSH
36527: LD_INT 1
36529: ARRAY
36530: PUSH
36531: FOR_TO
36532: IFFALSE 36653
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36534: LD_ADDR_VAR 0 7
36538: PUSH
36539: LD_VAR 0 6
36543: PUSH
36544: LD_INT 1
36546: ARRAY
36547: PUSH
36548: LD_VAR 0 5
36552: ARRAY
36553: PUSH
36554: LD_VAR 0 6
36558: PUSH
36559: LD_INT 2
36561: ARRAY
36562: PUSH
36563: LD_VAR 0 5
36567: ARRAY
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
36573: LD_INT 92
36575: PUSH
36576: LD_VAR 0 7
36580: PUSH
36581: LD_INT 1
36583: ARRAY
36584: PUSH
36585: LD_VAR 0 7
36589: PUSH
36590: LD_INT 2
36592: ARRAY
36593: PUSH
36594: LD_INT 3
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: PPUSH
36603: CALL_OW 69
36607: PUSH
36608: LD_INT 0
36610: EQUAL
36611: IFFALSE 36651
// begin PlaceUnitArea ( unit , area , mode ) ;
36613: LD_VAR 0 1
36617: PPUSH
36618: LD_VAR 0 2
36622: PPUSH
36623: LD_VAR 0 3
36627: PPUSH
36628: CALL_OW 49
// result := IsPlaced ( unit ) ;
36632: LD_ADDR_VAR 0 4
36636: PUSH
36637: LD_VAR 0 1
36641: PPUSH
36642: CALL_OW 305
36646: ST_TO_ADDR
// exit ;
36647: POP
36648: POP
36649: GO 36655
// end ; end ;
36651: GO 36531
36653: POP
36654: POP
// end ;
36655: LD_VAR 0 4
36659: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36660: LD_INT 0
36662: PPUSH
36663: PPUSH
36664: PPUSH
// if not side or side > 8 then
36665: LD_VAR 0 1
36669: NOT
36670: PUSH
36671: LD_VAR 0 1
36675: PUSH
36676: LD_INT 8
36678: GREATER
36679: OR
36680: IFFALSE 36684
// exit ;
36682: GO 36871
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36684: LD_ADDR_VAR 0 4
36688: PUSH
36689: LD_INT 22
36691: PUSH
36692: LD_VAR 0 1
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 21
36703: PUSH
36704: LD_INT 3
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PPUSH
36715: CALL_OW 69
36719: ST_TO_ADDR
// if not tmp then
36720: LD_VAR 0 4
36724: NOT
36725: IFFALSE 36729
// exit ;
36727: GO 36871
// enable_addtolog := true ;
36729: LD_ADDR_OWVAR 81
36733: PUSH
36734: LD_INT 1
36736: ST_TO_ADDR
// AddToLog ( [ ) ;
36737: LD_STRING [
36739: PPUSH
36740: CALL_OW 561
// for i in tmp do
36744: LD_ADDR_VAR 0 3
36748: PUSH
36749: LD_VAR 0 4
36753: PUSH
36754: FOR_IN
36755: IFFALSE 36862
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36757: LD_STRING [
36759: PUSH
36760: LD_VAR 0 3
36764: PPUSH
36765: CALL_OW 266
36769: STR
36770: PUSH
36771: LD_STRING , 
36773: STR
36774: PUSH
36775: LD_VAR 0 3
36779: PPUSH
36780: CALL_OW 250
36784: STR
36785: PUSH
36786: LD_STRING , 
36788: STR
36789: PUSH
36790: LD_VAR 0 3
36794: PPUSH
36795: CALL_OW 251
36799: STR
36800: PUSH
36801: LD_STRING , 
36803: STR
36804: PUSH
36805: LD_VAR 0 3
36809: PPUSH
36810: CALL_OW 254
36814: STR
36815: PUSH
36816: LD_STRING , 
36818: STR
36819: PUSH
36820: LD_VAR 0 3
36824: PPUSH
36825: LD_INT 1
36827: PPUSH
36828: CALL_OW 268
36832: STR
36833: PUSH
36834: LD_STRING , 
36836: STR
36837: PUSH
36838: LD_VAR 0 3
36842: PPUSH
36843: LD_INT 2
36845: PPUSH
36846: CALL_OW 268
36850: STR
36851: PUSH
36852: LD_STRING ],
36854: STR
36855: PPUSH
36856: CALL_OW 561
// end ;
36860: GO 36754
36862: POP
36863: POP
// AddToLog ( ]; ) ;
36864: LD_STRING ];
36866: PPUSH
36867: CALL_OW 561
// end ;
36871: LD_VAR 0 2
36875: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
36876: LD_INT 0
36878: PPUSH
36879: PPUSH
36880: PPUSH
36881: PPUSH
36882: PPUSH
// if not area or not rate or not max then
36883: LD_VAR 0 1
36887: NOT
36888: PUSH
36889: LD_VAR 0 2
36893: NOT
36894: OR
36895: PUSH
36896: LD_VAR 0 4
36900: NOT
36901: OR
36902: IFFALSE 36906
// exit ;
36904: GO 37095
// while 1 do
36906: LD_INT 1
36908: IFFALSE 37095
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
36910: LD_ADDR_VAR 0 9
36914: PUSH
36915: LD_VAR 0 1
36919: PPUSH
36920: LD_INT 1
36922: PPUSH
36923: CALL_OW 287
36927: PUSH
36928: LD_INT 10
36930: MUL
36931: ST_TO_ADDR
// r := rate / 10 ;
36932: LD_ADDR_VAR 0 7
36936: PUSH
36937: LD_VAR 0 2
36941: PUSH
36942: LD_INT 10
36944: DIVREAL
36945: ST_TO_ADDR
// time := 1 1$00 ;
36946: LD_ADDR_VAR 0 8
36950: PUSH
36951: LD_INT 2100
36953: ST_TO_ADDR
// if amount < min then
36954: LD_VAR 0 9
36958: PUSH
36959: LD_VAR 0 3
36963: LESS
36964: IFFALSE 36982
// r := r * 2 else
36966: LD_ADDR_VAR 0 7
36970: PUSH
36971: LD_VAR 0 7
36975: PUSH
36976: LD_INT 2
36978: MUL
36979: ST_TO_ADDR
36980: GO 37008
// if amount > max then
36982: LD_VAR 0 9
36986: PUSH
36987: LD_VAR 0 4
36991: GREATER
36992: IFFALSE 37008
// r := r / 2 ;
36994: LD_ADDR_VAR 0 7
36998: PUSH
36999: LD_VAR 0 7
37003: PUSH
37004: LD_INT 2
37006: DIVREAL
37007: ST_TO_ADDR
// time := time / r ;
37008: LD_ADDR_VAR 0 8
37012: PUSH
37013: LD_VAR 0 8
37017: PUSH
37018: LD_VAR 0 7
37022: DIVREAL
37023: ST_TO_ADDR
// if time < 0 then
37024: LD_VAR 0 8
37028: PUSH
37029: LD_INT 0
37031: LESS
37032: IFFALSE 37049
// time := time * - 1 ;
37034: LD_ADDR_VAR 0 8
37038: PUSH
37039: LD_VAR 0 8
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: MUL
37048: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37049: LD_VAR 0 8
37053: PUSH
37054: LD_INT 35
37056: PPUSH
37057: LD_INT 875
37059: PPUSH
37060: CALL_OW 12
37064: PLUS
37065: PPUSH
37066: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37070: LD_INT 1
37072: PPUSH
37073: LD_INT 5
37075: PPUSH
37076: CALL_OW 12
37080: PPUSH
37081: LD_VAR 0 1
37085: PPUSH
37086: LD_INT 1
37088: PPUSH
37089: CALL_OW 55
// end ;
37093: GO 36906
// end ;
37095: LD_VAR 0 5
37099: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37100: LD_INT 0
37102: PPUSH
37103: PPUSH
37104: PPUSH
37105: PPUSH
37106: PPUSH
37107: PPUSH
37108: PPUSH
37109: PPUSH
// if not turrets or not factories then
37110: LD_VAR 0 1
37114: NOT
37115: PUSH
37116: LD_VAR 0 2
37120: NOT
37121: OR
37122: IFFALSE 37126
// exit ;
37124: GO 37433
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37126: LD_ADDR_VAR 0 10
37130: PUSH
37131: LD_INT 5
37133: PUSH
37134: LD_INT 6
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 4
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 3
37153: PUSH
37154: LD_INT 5
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 24
37168: PUSH
37169: LD_INT 25
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 23
37178: PUSH
37179: LD_INT 27
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 42
37192: PUSH
37193: LD_INT 43
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 44
37202: PUSH
37203: LD_INT 46
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 45
37212: PUSH
37213: LD_INT 47
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: LIST
37229: ST_TO_ADDR
// result := [ ] ;
37230: LD_ADDR_VAR 0 3
37234: PUSH
37235: EMPTY
37236: ST_TO_ADDR
// for i in turrets do
37237: LD_ADDR_VAR 0 4
37241: PUSH
37242: LD_VAR 0 1
37246: PUSH
37247: FOR_IN
37248: IFFALSE 37431
// begin nat := GetNation ( i ) ;
37250: LD_ADDR_VAR 0 7
37254: PUSH
37255: LD_VAR 0 4
37259: PPUSH
37260: CALL_OW 248
37264: ST_TO_ADDR
// weapon := 0 ;
37265: LD_ADDR_VAR 0 8
37269: PUSH
37270: LD_INT 0
37272: ST_TO_ADDR
// if not nat then
37273: LD_VAR 0 7
37277: NOT
37278: IFFALSE 37282
// continue ;
37280: GO 37247
// for j in list [ nat ] do
37282: LD_ADDR_VAR 0 5
37286: PUSH
37287: LD_VAR 0 10
37291: PUSH
37292: LD_VAR 0 7
37296: ARRAY
37297: PUSH
37298: FOR_IN
37299: IFFALSE 37340
// if GetBWeapon ( i ) = j [ 1 ] then
37301: LD_VAR 0 4
37305: PPUSH
37306: CALL_OW 269
37310: PUSH
37311: LD_VAR 0 5
37315: PUSH
37316: LD_INT 1
37318: ARRAY
37319: EQUAL
37320: IFFALSE 37338
// begin weapon := j [ 2 ] ;
37322: LD_ADDR_VAR 0 8
37326: PUSH
37327: LD_VAR 0 5
37331: PUSH
37332: LD_INT 2
37334: ARRAY
37335: ST_TO_ADDR
// break ;
37336: GO 37340
// end ;
37338: GO 37298
37340: POP
37341: POP
// if not weapon then
37342: LD_VAR 0 8
37346: NOT
37347: IFFALSE 37351
// continue ;
37349: GO 37247
// for k in factories do
37351: LD_ADDR_VAR 0 6
37355: PUSH
37356: LD_VAR 0 2
37360: PUSH
37361: FOR_IN
37362: IFFALSE 37427
// begin weapons := AvailableWeaponList ( k ) ;
37364: LD_ADDR_VAR 0 9
37368: PUSH
37369: LD_VAR 0 6
37373: PPUSH
37374: CALL_OW 478
37378: ST_TO_ADDR
// if not weapons then
37379: LD_VAR 0 9
37383: NOT
37384: IFFALSE 37388
// continue ;
37386: GO 37361
// if weapon in weapons then
37388: LD_VAR 0 8
37392: PUSH
37393: LD_VAR 0 9
37397: IN
37398: IFFALSE 37425
// begin result := [ i , weapon ] ;
37400: LD_ADDR_VAR 0 3
37404: PUSH
37405: LD_VAR 0 4
37409: PUSH
37410: LD_VAR 0 8
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: ST_TO_ADDR
// exit ;
37419: POP
37420: POP
37421: POP
37422: POP
37423: GO 37433
// end ; end ;
37425: GO 37361
37427: POP
37428: POP
// end ;
37429: GO 37247
37431: POP
37432: POP
// end ;
37433: LD_VAR 0 3
37437: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37438: LD_INT 0
37440: PPUSH
// if not side or side > 8 then
37441: LD_VAR 0 3
37445: NOT
37446: PUSH
37447: LD_VAR 0 3
37451: PUSH
37452: LD_INT 8
37454: GREATER
37455: OR
37456: IFFALSE 37460
// exit ;
37458: GO 37519
// if not range then
37460: LD_VAR 0 4
37464: NOT
37465: IFFALSE 37476
// range := - 12 ;
37467: LD_ADDR_VAR 0 4
37471: PUSH
37472: LD_INT 12
37474: NEG
37475: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37476: LD_VAR 0 1
37480: PPUSH
37481: LD_VAR 0 2
37485: PPUSH
37486: LD_VAR 0 3
37490: PPUSH
37491: LD_VAR 0 4
37495: PPUSH
37496: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37500: LD_VAR 0 1
37504: PPUSH
37505: LD_VAR 0 2
37509: PPUSH
37510: LD_VAR 0 3
37514: PPUSH
37515: CALL_OW 331
// end ;
37519: LD_VAR 0 5
37523: RET
// export function Video ( mode ) ; begin
37524: LD_INT 0
37526: PPUSH
// ingame_video = mode ;
37527: LD_ADDR_OWVAR 52
37531: PUSH
37532: LD_VAR 0 1
37536: ST_TO_ADDR
// interface_hidden = mode ;
37537: LD_ADDR_OWVAR 54
37541: PUSH
37542: LD_VAR 0 1
37546: ST_TO_ADDR
// end ;
37547: LD_VAR 0 2
37551: RET
// export function Join ( array , element ) ; begin
37552: LD_INT 0
37554: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37555: LD_ADDR_VAR 0 3
37559: PUSH
37560: LD_VAR 0 1
37564: PPUSH
37565: LD_VAR 0 1
37569: PUSH
37570: LD_INT 1
37572: PLUS
37573: PPUSH
37574: LD_VAR 0 2
37578: PPUSH
37579: CALL_OW 1
37583: ST_TO_ADDR
// end ;
37584: LD_VAR 0 3
37588: RET
// export function JoinUnion ( array , element ) ; begin
37589: LD_INT 0
37591: PPUSH
// result := array union element ;
37592: LD_ADDR_VAR 0 3
37596: PUSH
37597: LD_VAR 0 1
37601: PUSH
37602: LD_VAR 0 2
37606: UNION
37607: ST_TO_ADDR
// end ;
37608: LD_VAR 0 3
37612: RET
// export function GetBehemoths ( side ) ; begin
37613: LD_INT 0
37615: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
37616: LD_ADDR_VAR 0 2
37620: PUSH
37621: LD_INT 22
37623: PUSH
37624: LD_VAR 0 1
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 31
37635: PUSH
37636: LD_INT 25
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PPUSH
37647: CALL_OW 69
37651: ST_TO_ADDR
// end ;
37652: LD_VAR 0 2
37656: RET
// export function Shuffle ( array ) ; var i , index ; begin
37657: LD_INT 0
37659: PPUSH
37660: PPUSH
37661: PPUSH
// result := [ ] ;
37662: LD_ADDR_VAR 0 2
37666: PUSH
37667: EMPTY
37668: ST_TO_ADDR
// if not array then
37669: LD_VAR 0 1
37673: NOT
37674: IFFALSE 37678
// exit ;
37676: GO 37777
// Randomize ;
37678: CALL_OW 10
// for i = array downto 1 do
37682: LD_ADDR_VAR 0 3
37686: PUSH
37687: DOUBLE
37688: LD_VAR 0 1
37692: INC
37693: ST_TO_ADDR
37694: LD_INT 1
37696: PUSH
37697: FOR_DOWNTO
37698: IFFALSE 37775
// begin index := rand ( 1 , array ) ;
37700: LD_ADDR_VAR 0 4
37704: PUSH
37705: LD_INT 1
37707: PPUSH
37708: LD_VAR 0 1
37712: PPUSH
37713: CALL_OW 12
37717: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37718: LD_ADDR_VAR 0 2
37722: PUSH
37723: LD_VAR 0 2
37727: PPUSH
37728: LD_VAR 0 2
37732: PUSH
37733: LD_INT 1
37735: PLUS
37736: PPUSH
37737: LD_VAR 0 1
37741: PUSH
37742: LD_VAR 0 4
37746: ARRAY
37747: PPUSH
37748: CALL_OW 2
37752: ST_TO_ADDR
// array := Delete ( array , index ) ;
37753: LD_ADDR_VAR 0 1
37757: PUSH
37758: LD_VAR 0 1
37762: PPUSH
37763: LD_VAR 0 4
37767: PPUSH
37768: CALL_OW 3
37772: ST_TO_ADDR
// end ;
37773: GO 37697
37775: POP
37776: POP
// end ;
37777: LD_VAR 0 2
37781: RET
// export function GetBaseMaterials ( base ) ; begin
37782: LD_INT 0
37784: PPUSH
// result := [ 0 , 0 , 0 ] ;
37785: LD_ADDR_VAR 0 2
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: LIST
37803: ST_TO_ADDR
// if not base then
37804: LD_VAR 0 1
37808: NOT
37809: IFFALSE 37813
// exit ;
37811: GO 37862
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37813: LD_ADDR_VAR 0 2
37817: PUSH
37818: LD_VAR 0 1
37822: PPUSH
37823: LD_INT 1
37825: PPUSH
37826: CALL_OW 275
37830: PUSH
37831: LD_VAR 0 1
37835: PPUSH
37836: LD_INT 2
37838: PPUSH
37839: CALL_OW 275
37843: PUSH
37844: LD_VAR 0 1
37848: PPUSH
37849: LD_INT 3
37851: PPUSH
37852: CALL_OW 275
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: LIST
37861: ST_TO_ADDR
// end ;
37862: LD_VAR 0 2
37866: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
37867: LD_INT 0
37869: PPUSH
37870: PPUSH
// result := array ;
37871: LD_ADDR_VAR 0 3
37875: PUSH
37876: LD_VAR 0 1
37880: ST_TO_ADDR
// if size >= result then
37881: LD_VAR 0 2
37885: PUSH
37886: LD_VAR 0 3
37890: GREATEREQUAL
37891: IFFALSE 37895
// exit ;
37893: GO 37945
// if size then
37895: LD_VAR 0 2
37899: IFFALSE 37945
// for i := array downto size do
37901: LD_ADDR_VAR 0 4
37905: PUSH
37906: DOUBLE
37907: LD_VAR 0 1
37911: INC
37912: ST_TO_ADDR
37913: LD_VAR 0 2
37917: PUSH
37918: FOR_DOWNTO
37919: IFFALSE 37943
// result := Delete ( result , result ) ;
37921: LD_ADDR_VAR 0 3
37925: PUSH
37926: LD_VAR 0 3
37930: PPUSH
37931: LD_VAR 0 3
37935: PPUSH
37936: CALL_OW 3
37940: ST_TO_ADDR
37941: GO 37918
37943: POP
37944: POP
// end ;
37945: LD_VAR 0 3
37949: RET
// export function ComExit ( unit ) ; var tmp ; begin
37950: LD_INT 0
37952: PPUSH
37953: PPUSH
// if not IsInUnit ( unit ) then
37954: LD_VAR 0 1
37958: PPUSH
37959: CALL_OW 310
37963: NOT
37964: IFFALSE 37968
// exit ;
37966: GO 38028
// tmp := IsInUnit ( unit ) ;
37968: LD_ADDR_VAR 0 3
37972: PUSH
37973: LD_VAR 0 1
37977: PPUSH
37978: CALL_OW 310
37982: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
37983: LD_VAR 0 3
37987: PPUSH
37988: CALL_OW 247
37992: PUSH
37993: LD_INT 2
37995: EQUAL
37996: IFFALSE 38009
// ComExitVehicle ( unit ) else
37998: LD_VAR 0 1
38002: PPUSH
38003: CALL_OW 121
38007: GO 38018
// ComExitBuilding ( unit ) ;
38009: LD_VAR 0 1
38013: PPUSH
38014: CALL_OW 122
// result := tmp ;
38018: LD_ADDR_VAR 0 2
38022: PUSH
38023: LD_VAR 0 3
38027: ST_TO_ADDR
// end ;
38028: LD_VAR 0 2
38032: RET
// export function ComExitAll ( units ) ; var i ; begin
38033: LD_INT 0
38035: PPUSH
38036: PPUSH
// if not units then
38037: LD_VAR 0 1
38041: NOT
38042: IFFALSE 38046
// exit ;
38044: GO 38072
// for i in units do
38046: LD_ADDR_VAR 0 3
38050: PUSH
38051: LD_VAR 0 1
38055: PUSH
38056: FOR_IN
38057: IFFALSE 38070
// ComExit ( i ) ;
38059: LD_VAR 0 3
38063: PPUSH
38064: CALL 37950 0 1
38068: GO 38056
38070: POP
38071: POP
// end ;
38072: LD_VAR 0 2
38076: RET
// export function ResetHc ; begin
38077: LD_INT 0
38079: PPUSH
// InitHc ;
38080: CALL_OW 19
// hc_importance := 0 ;
38084: LD_ADDR_OWVAR 32
38088: PUSH
38089: LD_INT 0
38091: ST_TO_ADDR
// end ;
38092: LD_VAR 0 1
38096: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38097: LD_INT 0
38099: PPUSH
38100: PPUSH
38101: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38102: LD_ADDR_VAR 0 6
38106: PUSH
38107: LD_VAR 0 1
38111: PUSH
38112: LD_VAR 0 3
38116: PLUS
38117: PUSH
38118: LD_INT 2
38120: DIV
38121: ST_TO_ADDR
// if _x < 0 then
38122: LD_VAR 0 6
38126: PUSH
38127: LD_INT 0
38129: LESS
38130: IFFALSE 38147
// _x := _x * - 1 ;
38132: LD_ADDR_VAR 0 6
38136: PUSH
38137: LD_VAR 0 6
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: MUL
38146: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38147: LD_ADDR_VAR 0 7
38151: PUSH
38152: LD_VAR 0 2
38156: PUSH
38157: LD_VAR 0 4
38161: PLUS
38162: PUSH
38163: LD_INT 2
38165: DIV
38166: ST_TO_ADDR
// if _y < 0 then
38167: LD_VAR 0 7
38171: PUSH
38172: LD_INT 0
38174: LESS
38175: IFFALSE 38192
// _y := _y * - 1 ;
38177: LD_ADDR_VAR 0 7
38181: PUSH
38182: LD_VAR 0 7
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: MUL
38191: ST_TO_ADDR
// result := [ _x , _y ] ;
38192: LD_ADDR_VAR 0 5
38196: PUSH
38197: LD_VAR 0 6
38201: PUSH
38202: LD_VAR 0 7
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: ST_TO_ADDR
// end ;
38211: LD_VAR 0 5
38215: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38216: LD_INT 0
38218: PPUSH
38219: PPUSH
38220: PPUSH
38221: PPUSH
// task := GetTaskList ( unit ) ;
38222: LD_ADDR_VAR 0 7
38226: PUSH
38227: LD_VAR 0 1
38231: PPUSH
38232: CALL_OW 437
38236: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38237: LD_VAR 0 7
38241: NOT
38242: PUSH
38243: LD_VAR 0 1
38247: PPUSH
38248: LD_VAR 0 2
38252: PPUSH
38253: CALL_OW 308
38257: NOT
38258: AND
38259: IFFALSE 38263
// exit ;
38261: GO 38381
// if IsInArea ( unit , area ) then
38263: LD_VAR 0 1
38267: PPUSH
38268: LD_VAR 0 2
38272: PPUSH
38273: CALL_OW 308
38277: IFFALSE 38295
// begin ComMoveToArea ( unit , goAway ) ;
38279: LD_VAR 0 1
38283: PPUSH
38284: LD_VAR 0 3
38288: PPUSH
38289: CALL_OW 113
// exit ;
38293: GO 38381
// end ; if task [ 1 ] [ 1 ] <> M then
38295: LD_VAR 0 7
38299: PUSH
38300: LD_INT 1
38302: ARRAY
38303: PUSH
38304: LD_INT 1
38306: ARRAY
38307: PUSH
38308: LD_STRING M
38310: NONEQUAL
38311: IFFALSE 38315
// exit ;
38313: GO 38381
// x := task [ 1 ] [ 2 ] ;
38315: LD_ADDR_VAR 0 5
38319: PUSH
38320: LD_VAR 0 7
38324: PUSH
38325: LD_INT 1
38327: ARRAY
38328: PUSH
38329: LD_INT 2
38331: ARRAY
38332: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38333: LD_ADDR_VAR 0 6
38337: PUSH
38338: LD_VAR 0 7
38342: PUSH
38343: LD_INT 1
38345: ARRAY
38346: PUSH
38347: LD_INT 3
38349: ARRAY
38350: ST_TO_ADDR
// if InArea ( x , y , area ) then
38351: LD_VAR 0 5
38355: PPUSH
38356: LD_VAR 0 6
38360: PPUSH
38361: LD_VAR 0 2
38365: PPUSH
38366: CALL_OW 309
38370: IFFALSE 38381
// ComStop ( unit ) ;
38372: LD_VAR 0 1
38376: PPUSH
38377: CALL_OW 141
// end ;
38381: LD_VAR 0 4
38385: RET
// export function Abs ( value ) ; begin
38386: LD_INT 0
38388: PPUSH
// result := value ;
38389: LD_ADDR_VAR 0 2
38393: PUSH
38394: LD_VAR 0 1
38398: ST_TO_ADDR
// if value < 0 then
38399: LD_VAR 0 1
38403: PUSH
38404: LD_INT 0
38406: LESS
38407: IFFALSE 38424
// result := value * - 1 ;
38409: LD_ADDR_VAR 0 2
38413: PUSH
38414: LD_VAR 0 1
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: MUL
38423: ST_TO_ADDR
// end ;
38424: LD_VAR 0 2
38428: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38429: LD_INT 0
38431: PPUSH
38432: PPUSH
38433: PPUSH
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
38438: PPUSH
// if not unit or not building then
38439: LD_VAR 0 1
38443: NOT
38444: PUSH
38445: LD_VAR 0 2
38449: NOT
38450: OR
38451: IFFALSE 38455
// exit ;
38453: GO 38681
// x := GetX ( building ) ;
38455: LD_ADDR_VAR 0 4
38459: PUSH
38460: LD_VAR 0 2
38464: PPUSH
38465: CALL_OW 250
38469: ST_TO_ADDR
// y := GetY ( building ) ;
38470: LD_ADDR_VAR 0 6
38474: PUSH
38475: LD_VAR 0 2
38479: PPUSH
38480: CALL_OW 251
38484: ST_TO_ADDR
// d := GetDir ( building ) ;
38485: LD_ADDR_VAR 0 8
38489: PUSH
38490: LD_VAR 0 2
38494: PPUSH
38495: CALL_OW 254
38499: ST_TO_ADDR
// r := 4 ;
38500: LD_ADDR_VAR 0 9
38504: PUSH
38505: LD_INT 4
38507: ST_TO_ADDR
// for i := 1 to 5 do
38508: LD_ADDR_VAR 0 10
38512: PUSH
38513: DOUBLE
38514: LD_INT 1
38516: DEC
38517: ST_TO_ADDR
38518: LD_INT 5
38520: PUSH
38521: FOR_TO
38522: IFFALSE 38679
// begin _x := ShiftX ( x , d , r + i ) ;
38524: LD_ADDR_VAR 0 5
38528: PUSH
38529: LD_VAR 0 4
38533: PPUSH
38534: LD_VAR 0 8
38538: PPUSH
38539: LD_VAR 0 9
38543: PUSH
38544: LD_VAR 0 10
38548: PLUS
38549: PPUSH
38550: CALL_OW 272
38554: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38555: LD_ADDR_VAR 0 7
38559: PUSH
38560: LD_VAR 0 6
38564: PPUSH
38565: LD_VAR 0 8
38569: PPUSH
38570: LD_VAR 0 9
38574: PUSH
38575: LD_VAR 0 10
38579: PLUS
38580: PPUSH
38581: CALL_OW 273
38585: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38586: LD_VAR 0 5
38590: PPUSH
38591: LD_VAR 0 7
38595: PPUSH
38596: CALL_OW 488
38600: PUSH
38601: LD_VAR 0 5
38605: PPUSH
38606: LD_VAR 0 7
38610: PPUSH
38611: CALL_OW 428
38615: PPUSH
38616: CALL_OW 247
38620: PUSH
38621: LD_INT 3
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: IN
38631: NOT
38632: AND
38633: IFFALSE 38677
// begin ComMoveXY ( unit , _x , _y ) ;
38635: LD_VAR 0 1
38639: PPUSH
38640: LD_VAR 0 5
38644: PPUSH
38645: LD_VAR 0 7
38649: PPUSH
38650: CALL_OW 111
// result := [ _x , _y ] ;
38654: LD_ADDR_VAR 0 3
38658: PUSH
38659: LD_VAR 0 5
38663: PUSH
38664: LD_VAR 0 7
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: ST_TO_ADDR
// exit ;
38673: POP
38674: POP
38675: GO 38681
// end ; end ;
38677: GO 38521
38679: POP
38680: POP
// end ;
38681: LD_VAR 0 3
38685: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38686: LD_INT 0
38688: PPUSH
38689: PPUSH
38690: PPUSH
// result := 0 ;
38691: LD_ADDR_VAR 0 3
38695: PUSH
38696: LD_INT 0
38698: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38699: LD_VAR 0 1
38703: PUSH
38704: LD_INT 0
38706: LESS
38707: PUSH
38708: LD_VAR 0 1
38712: PUSH
38713: LD_INT 8
38715: GREATER
38716: OR
38717: PUSH
38718: LD_VAR 0 2
38722: PUSH
38723: LD_INT 0
38725: LESS
38726: OR
38727: PUSH
38728: LD_VAR 0 2
38732: PUSH
38733: LD_INT 8
38735: GREATER
38736: OR
38737: IFFALSE 38741
// exit ;
38739: GO 38816
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38741: LD_ADDR_VAR 0 4
38745: PUSH
38746: LD_INT 22
38748: PUSH
38749: LD_VAR 0 2
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PPUSH
38758: CALL_OW 69
38762: PUSH
38763: FOR_IN
38764: IFFALSE 38814
// begin un := UnitShoot ( i ) ;
38766: LD_ADDR_VAR 0 5
38770: PUSH
38771: LD_VAR 0 4
38775: PPUSH
38776: CALL_OW 504
38780: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38781: LD_VAR 0 5
38785: PPUSH
38786: CALL_OW 255
38790: PUSH
38791: LD_VAR 0 1
38795: EQUAL
38796: IFFALSE 38812
// begin result := un ;
38798: LD_ADDR_VAR 0 3
38802: PUSH
38803: LD_VAR 0 5
38807: ST_TO_ADDR
// exit ;
38808: POP
38809: POP
38810: GO 38816
// end ; end ;
38812: GO 38763
38814: POP
38815: POP
// end ;
38816: LD_VAR 0 3
38820: RET
// export function GetCargoBay ( units ) ; begin
38821: LD_INT 0
38823: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
38824: LD_ADDR_VAR 0 2
38828: PUSH
38829: LD_VAR 0 1
38833: PPUSH
38834: LD_INT 2
38836: PUSH
38837: LD_INT 34
38839: PUSH
38840: LD_INT 12
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 34
38849: PUSH
38850: LD_INT 51
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 34
38859: PUSH
38860: LD_INT 32
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 34
38869: PUSH
38870: LD_INT 89
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: PPUSH
38884: CALL_OW 72
38888: ST_TO_ADDR
// end ;
38889: LD_VAR 0 2
38893: RET
// export function Negate ( value ) ; begin
38894: LD_INT 0
38896: PPUSH
// result := not value ;
38897: LD_ADDR_VAR 0 2
38901: PUSH
38902: LD_VAR 0 1
38906: NOT
38907: ST_TO_ADDR
// end ;
38908: LD_VAR 0 2
38912: RET
// export function Inc ( value ) ; begin
38913: LD_INT 0
38915: PPUSH
// result := value + 1 ;
38916: LD_ADDR_VAR 0 2
38920: PUSH
38921: LD_VAR 0 1
38925: PUSH
38926: LD_INT 1
38928: PLUS
38929: ST_TO_ADDR
// end ;
38930: LD_VAR 0 2
38934: RET
// export function Dec ( value ) ; begin
38935: LD_INT 0
38937: PPUSH
// result := value - 1 ;
38938: LD_ADDR_VAR 0 2
38942: PUSH
38943: LD_VAR 0 1
38947: PUSH
38948: LD_INT 1
38950: MINUS
38951: ST_TO_ADDR
// end ;
38952: LD_VAR 0 2
38956: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
38957: LD_INT 0
38959: PPUSH
38960: PPUSH
38961: PPUSH
38962: PPUSH
38963: PPUSH
38964: PPUSH
38965: PPUSH
38966: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
38967: LD_VAR 0 1
38971: PPUSH
38972: LD_VAR 0 2
38976: PPUSH
38977: CALL_OW 488
38981: NOT
38982: PUSH
38983: LD_VAR 0 3
38987: PPUSH
38988: LD_VAR 0 4
38992: PPUSH
38993: CALL_OW 488
38997: NOT
38998: OR
38999: IFFALSE 39012
// begin result := - 1 ;
39001: LD_ADDR_VAR 0 5
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: ST_TO_ADDR
// exit ;
39010: GO 39247
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39012: LD_ADDR_VAR 0 12
39016: PUSH
39017: LD_VAR 0 1
39021: PPUSH
39022: LD_VAR 0 2
39026: PPUSH
39027: LD_VAR 0 3
39031: PPUSH
39032: LD_VAR 0 4
39036: PPUSH
39037: CALL 38097 0 4
39041: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39042: LD_ADDR_VAR 0 11
39046: PUSH
39047: LD_VAR 0 1
39051: PPUSH
39052: LD_VAR 0 2
39056: PPUSH
39057: LD_VAR 0 12
39061: PUSH
39062: LD_INT 1
39064: ARRAY
39065: PPUSH
39066: LD_VAR 0 12
39070: PUSH
39071: LD_INT 2
39073: ARRAY
39074: PPUSH
39075: CALL_OW 298
39079: ST_TO_ADDR
// distance := 9999 ;
39080: LD_ADDR_VAR 0 10
39084: PUSH
39085: LD_INT 9999
39087: ST_TO_ADDR
// for i := 0 to 5 do
39088: LD_ADDR_VAR 0 6
39092: PUSH
39093: DOUBLE
39094: LD_INT 0
39096: DEC
39097: ST_TO_ADDR
39098: LD_INT 5
39100: PUSH
39101: FOR_TO
39102: IFFALSE 39245
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39104: LD_ADDR_VAR 0 7
39108: PUSH
39109: LD_VAR 0 1
39113: PPUSH
39114: LD_VAR 0 6
39118: PPUSH
39119: LD_VAR 0 11
39123: PPUSH
39124: CALL_OW 272
39128: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39129: LD_ADDR_VAR 0 8
39133: PUSH
39134: LD_VAR 0 2
39138: PPUSH
39139: LD_VAR 0 6
39143: PPUSH
39144: LD_VAR 0 11
39148: PPUSH
39149: CALL_OW 273
39153: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39154: LD_VAR 0 7
39158: PPUSH
39159: LD_VAR 0 8
39163: PPUSH
39164: CALL_OW 488
39168: NOT
39169: IFFALSE 39173
// continue ;
39171: GO 39101
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39173: LD_ADDR_VAR 0 9
39177: PUSH
39178: LD_VAR 0 12
39182: PUSH
39183: LD_INT 1
39185: ARRAY
39186: PPUSH
39187: LD_VAR 0 12
39191: PUSH
39192: LD_INT 2
39194: ARRAY
39195: PPUSH
39196: LD_VAR 0 7
39200: PPUSH
39201: LD_VAR 0 8
39205: PPUSH
39206: CALL_OW 298
39210: ST_TO_ADDR
// if tmp < distance then
39211: LD_VAR 0 9
39215: PUSH
39216: LD_VAR 0 10
39220: LESS
39221: IFFALSE 39243
// begin result := i ;
39223: LD_ADDR_VAR 0 5
39227: PUSH
39228: LD_VAR 0 6
39232: ST_TO_ADDR
// distance := tmp ;
39233: LD_ADDR_VAR 0 10
39237: PUSH
39238: LD_VAR 0 9
39242: ST_TO_ADDR
// end ; end ;
39243: GO 39101
39245: POP
39246: POP
// end ;
39247: LD_VAR 0 5
39251: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39252: LD_INT 0
39254: PPUSH
39255: PPUSH
// if not driver or not IsInUnit ( driver ) then
39256: LD_VAR 0 1
39260: NOT
39261: PUSH
39262: LD_VAR 0 1
39266: PPUSH
39267: CALL_OW 310
39271: NOT
39272: OR
39273: IFFALSE 39277
// exit ;
39275: GO 39367
// vehicle := IsInUnit ( driver ) ;
39277: LD_ADDR_VAR 0 3
39281: PUSH
39282: LD_VAR 0 1
39286: PPUSH
39287: CALL_OW 310
39291: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39292: LD_VAR 0 1
39296: PPUSH
39297: LD_STRING \
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: PUSH
39327: LD_STRING E
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_VAR 0 3
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PPUSH
39363: CALL_OW 446
// end ;
39367: LD_VAR 0 2
39371: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39372: LD_INT 0
39374: PPUSH
39375: PPUSH
// if not driver or not IsInUnit ( driver ) then
39376: LD_VAR 0 1
39380: NOT
39381: PUSH
39382: LD_VAR 0 1
39386: PPUSH
39387: CALL_OW 310
39391: NOT
39392: OR
39393: IFFALSE 39397
// exit ;
39395: GO 39487
// vehicle := IsInUnit ( driver ) ;
39397: LD_ADDR_VAR 0 3
39401: PUSH
39402: LD_VAR 0 1
39406: PPUSH
39407: CALL_OW 310
39411: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39412: LD_VAR 0 1
39416: PPUSH
39417: LD_STRING \
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: PUSH
39447: LD_STRING E
39449: PUSH
39450: LD_INT 0
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: LD_VAR 0 3
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PPUSH
39483: CALL_OW 447
// end ;
39487: LD_VAR 0 2
39491: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39492: LD_INT 0
39494: PPUSH
39495: PPUSH
39496: PPUSH
// tmp := [ ] ;
39497: LD_ADDR_VAR 0 5
39501: PUSH
39502: EMPTY
39503: ST_TO_ADDR
// for i in units do
39504: LD_ADDR_VAR 0 4
39508: PUSH
39509: LD_VAR 0 1
39513: PUSH
39514: FOR_IN
39515: IFFALSE 39553
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39517: LD_ADDR_VAR 0 5
39521: PUSH
39522: LD_VAR 0 5
39526: PPUSH
39527: LD_VAR 0 5
39531: PUSH
39532: LD_INT 1
39534: PLUS
39535: PPUSH
39536: LD_VAR 0 4
39540: PPUSH
39541: CALL_OW 256
39545: PPUSH
39546: CALL_OW 2
39550: ST_TO_ADDR
39551: GO 39514
39553: POP
39554: POP
// if not tmp then
39555: LD_VAR 0 5
39559: NOT
39560: IFFALSE 39564
// exit ;
39562: GO 39612
// if asc then
39564: LD_VAR 0 2
39568: IFFALSE 39592
// result := SortListByListAsc ( units , tmp ) else
39570: LD_ADDR_VAR 0 3
39574: PUSH
39575: LD_VAR 0 1
39579: PPUSH
39580: LD_VAR 0 5
39584: PPUSH
39585: CALL_OW 76
39589: ST_TO_ADDR
39590: GO 39612
// result := SortListByListDesc ( units , tmp ) ;
39592: LD_ADDR_VAR 0 3
39596: PUSH
39597: LD_VAR 0 1
39601: PPUSH
39602: LD_VAR 0 5
39606: PPUSH
39607: CALL_OW 77
39611: ST_TO_ADDR
// end ;
39612: LD_VAR 0 3
39616: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39617: LD_INT 0
39619: PPUSH
39620: PPUSH
// task := GetTaskList ( mech ) ;
39621: LD_ADDR_VAR 0 4
39625: PUSH
39626: LD_VAR 0 1
39630: PPUSH
39631: CALL_OW 437
39635: ST_TO_ADDR
// if not task then
39636: LD_VAR 0 4
39640: NOT
39641: IFFALSE 39645
// exit ;
39643: GO 39687
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39645: LD_ADDR_VAR 0 3
39649: PUSH
39650: LD_VAR 0 4
39654: PUSH
39655: LD_INT 1
39657: ARRAY
39658: PUSH
39659: LD_INT 1
39661: ARRAY
39662: PUSH
39663: LD_STRING r
39665: EQUAL
39666: PUSH
39667: LD_VAR 0 4
39671: PUSH
39672: LD_INT 1
39674: ARRAY
39675: PUSH
39676: LD_INT 4
39678: ARRAY
39679: PUSH
39680: LD_VAR 0 2
39684: EQUAL
39685: AND
39686: ST_TO_ADDR
// end ;
39687: LD_VAR 0 3
39691: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39692: LD_INT 0
39694: PPUSH
// SetDir ( unit , d ) ;
39695: LD_VAR 0 1
39699: PPUSH
39700: LD_VAR 0 4
39704: PPUSH
39705: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39709: LD_VAR 0 1
39713: PPUSH
39714: LD_VAR 0 2
39718: PPUSH
39719: LD_VAR 0 3
39723: PPUSH
39724: LD_VAR 0 5
39728: PPUSH
39729: CALL_OW 48
// end ;
39733: LD_VAR 0 6
39737: RET
// export function ToNaturalNumber ( number ) ; begin
39738: LD_INT 0
39740: PPUSH
// result := number div 1 ;
39741: LD_ADDR_VAR 0 2
39745: PUSH
39746: LD_VAR 0 1
39750: PUSH
39751: LD_INT 1
39753: DIV
39754: ST_TO_ADDR
// if number < 0 then
39755: LD_VAR 0 1
39759: PUSH
39760: LD_INT 0
39762: LESS
39763: IFFALSE 39773
// result := 0 ;
39765: LD_ADDR_VAR 0 2
39769: PUSH
39770: LD_INT 0
39772: ST_TO_ADDR
// end ;
39773: LD_VAR 0 2
39777: RET
// export function SortByClass ( units , class ) ; var un ; begin
39778: LD_INT 0
39780: PPUSH
39781: PPUSH
// if not units or not class then
39782: LD_VAR 0 1
39786: NOT
39787: PUSH
39788: LD_VAR 0 2
39792: NOT
39793: OR
39794: IFFALSE 39798
// exit ;
39796: GO 39893
// result := [ ] ;
39798: LD_ADDR_VAR 0 3
39802: PUSH
39803: EMPTY
39804: ST_TO_ADDR
// for un in units do
39805: LD_ADDR_VAR 0 4
39809: PUSH
39810: LD_VAR 0 1
39814: PUSH
39815: FOR_IN
39816: IFFALSE 39891
// if GetClass ( un ) = class then
39818: LD_VAR 0 4
39822: PPUSH
39823: CALL_OW 257
39827: PUSH
39828: LD_VAR 0 2
39832: EQUAL
39833: IFFALSE 39860
// result := Insert ( result , 1 , un ) else
39835: LD_ADDR_VAR 0 3
39839: PUSH
39840: LD_VAR 0 3
39844: PPUSH
39845: LD_INT 1
39847: PPUSH
39848: LD_VAR 0 4
39852: PPUSH
39853: CALL_OW 2
39857: ST_TO_ADDR
39858: GO 39889
// result := Replace ( result , result + 1 , un ) ;
39860: LD_ADDR_VAR 0 3
39864: PUSH
39865: LD_VAR 0 3
39869: PPUSH
39870: LD_VAR 0 3
39874: PUSH
39875: LD_INT 1
39877: PLUS
39878: PPUSH
39879: LD_VAR 0 4
39883: PPUSH
39884: CALL_OW 1
39888: ST_TO_ADDR
39889: GO 39815
39891: POP
39892: POP
// end ;
39893: LD_VAR 0 3
39897: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
39898: LD_INT 0
39900: PPUSH
39901: PPUSH
39902: PPUSH
39903: PPUSH
39904: PPUSH
39905: PPUSH
39906: PPUSH
// result := [ ] ;
39907: LD_ADDR_VAR 0 4
39911: PUSH
39912: EMPTY
39913: ST_TO_ADDR
// if x - r < 0 then
39914: LD_VAR 0 1
39918: PUSH
39919: LD_VAR 0 3
39923: MINUS
39924: PUSH
39925: LD_INT 0
39927: LESS
39928: IFFALSE 39940
// min_x := 0 else
39930: LD_ADDR_VAR 0 8
39934: PUSH
39935: LD_INT 0
39937: ST_TO_ADDR
39938: GO 39956
// min_x := x - r ;
39940: LD_ADDR_VAR 0 8
39944: PUSH
39945: LD_VAR 0 1
39949: PUSH
39950: LD_VAR 0 3
39954: MINUS
39955: ST_TO_ADDR
// if y - r < 0 then
39956: LD_VAR 0 2
39960: PUSH
39961: LD_VAR 0 3
39965: MINUS
39966: PUSH
39967: LD_INT 0
39969: LESS
39970: IFFALSE 39982
// min_y := 0 else
39972: LD_ADDR_VAR 0 7
39976: PUSH
39977: LD_INT 0
39979: ST_TO_ADDR
39980: GO 39998
// min_y := y - r ;
39982: LD_ADDR_VAR 0 7
39986: PUSH
39987: LD_VAR 0 2
39991: PUSH
39992: LD_VAR 0 3
39996: MINUS
39997: ST_TO_ADDR
// max_x := x + r ;
39998: LD_ADDR_VAR 0 9
40002: PUSH
40003: LD_VAR 0 1
40007: PUSH
40008: LD_VAR 0 3
40012: PLUS
40013: ST_TO_ADDR
// max_y := y + r ;
40014: LD_ADDR_VAR 0 10
40018: PUSH
40019: LD_VAR 0 2
40023: PUSH
40024: LD_VAR 0 3
40028: PLUS
40029: ST_TO_ADDR
// for _x = min_x to max_x do
40030: LD_ADDR_VAR 0 5
40034: PUSH
40035: DOUBLE
40036: LD_VAR 0 8
40040: DEC
40041: ST_TO_ADDR
40042: LD_VAR 0 9
40046: PUSH
40047: FOR_TO
40048: IFFALSE 40149
// for _y = min_y to max_y do
40050: LD_ADDR_VAR 0 6
40054: PUSH
40055: DOUBLE
40056: LD_VAR 0 7
40060: DEC
40061: ST_TO_ADDR
40062: LD_VAR 0 10
40066: PUSH
40067: FOR_TO
40068: IFFALSE 40145
// begin if not ValidHex ( _x , _y ) then
40070: LD_VAR 0 5
40074: PPUSH
40075: LD_VAR 0 6
40079: PPUSH
40080: CALL_OW 488
40084: NOT
40085: IFFALSE 40089
// continue ;
40087: GO 40067
// if GetResourceTypeXY ( _x , _y ) then
40089: LD_VAR 0 5
40093: PPUSH
40094: LD_VAR 0 6
40098: PPUSH
40099: CALL_OW 283
40103: IFFALSE 40143
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40105: LD_ADDR_VAR 0 4
40109: PUSH
40110: LD_VAR 0 4
40114: PPUSH
40115: LD_VAR 0 4
40119: PUSH
40120: LD_INT 1
40122: PLUS
40123: PPUSH
40124: LD_VAR 0 5
40128: PUSH
40129: LD_VAR 0 6
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PPUSH
40138: CALL_OW 1
40142: ST_TO_ADDR
// end ;
40143: GO 40067
40145: POP
40146: POP
40147: GO 40047
40149: POP
40150: POP
// end ;
40151: LD_VAR 0 4
40155: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40156: LD_INT 0
40158: PPUSH
40159: PPUSH
40160: PPUSH
40161: PPUSH
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
// if not units then
40166: LD_VAR 0 1
40170: NOT
40171: IFFALSE 40175
// exit ;
40173: GO 40699
// result := UnitFilter ( units , [ f_ok ] ) ;
40175: LD_ADDR_VAR 0 3
40179: PUSH
40180: LD_VAR 0 1
40184: PPUSH
40185: LD_INT 50
40187: PUSH
40188: EMPTY
40189: LIST
40190: PPUSH
40191: CALL_OW 72
40195: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40196: LD_ADDR_VAR 0 8
40200: PUSH
40201: LD_VAR 0 1
40205: PUSH
40206: LD_INT 1
40208: ARRAY
40209: PPUSH
40210: CALL_OW 255
40214: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40215: LD_ADDR_VAR 0 10
40219: PUSH
40220: LD_INT 29
40222: PUSH
40223: LD_INT 91
40225: PUSH
40226: LD_INT 49
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: ST_TO_ADDR
// if not result then
40234: LD_VAR 0 3
40238: NOT
40239: IFFALSE 40243
// exit ;
40241: GO 40699
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40243: LD_ADDR_VAR 0 5
40247: PUSH
40248: LD_INT 81
40250: PUSH
40251: LD_VAR 0 8
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PPUSH
40260: CALL_OW 69
40264: ST_TO_ADDR
// for i in result do
40265: LD_ADDR_VAR 0 4
40269: PUSH
40270: LD_VAR 0 3
40274: PUSH
40275: FOR_IN
40276: IFFALSE 40697
// begin tag := GetTag ( i ) + 1 ;
40278: LD_ADDR_VAR 0 9
40282: PUSH
40283: LD_VAR 0 4
40287: PPUSH
40288: CALL_OW 110
40292: PUSH
40293: LD_INT 1
40295: PLUS
40296: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40297: LD_ADDR_VAR 0 7
40301: PUSH
40302: LD_VAR 0 4
40306: PPUSH
40307: CALL_OW 250
40311: PPUSH
40312: LD_VAR 0 4
40316: PPUSH
40317: CALL_OW 251
40321: PPUSH
40322: LD_INT 6
40324: PPUSH
40325: CALL 39898 0 3
40329: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40330: LD_VAR 0 4
40334: PPUSH
40335: CALL_OW 247
40339: PUSH
40340: LD_INT 2
40342: EQUAL
40343: PUSH
40344: LD_VAR 0 7
40348: AND
40349: PUSH
40350: LD_VAR 0 4
40354: PPUSH
40355: CALL_OW 264
40359: PUSH
40360: LD_VAR 0 10
40364: IN
40365: NOT
40366: AND
40367: IFFALSE 40406
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40369: LD_VAR 0 4
40373: PPUSH
40374: LD_VAR 0 7
40378: PUSH
40379: LD_INT 1
40381: ARRAY
40382: PUSH
40383: LD_INT 1
40385: ARRAY
40386: PPUSH
40387: LD_VAR 0 7
40391: PUSH
40392: LD_INT 1
40394: ARRAY
40395: PUSH
40396: LD_INT 2
40398: ARRAY
40399: PPUSH
40400: CALL_OW 116
40404: GO 40695
// if path > tag then
40406: LD_VAR 0 2
40410: PUSH
40411: LD_VAR 0 9
40415: GREATER
40416: IFFALSE 40624
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40418: LD_ADDR_VAR 0 6
40422: PUSH
40423: LD_VAR 0 5
40427: PPUSH
40428: LD_INT 91
40430: PUSH
40431: LD_VAR 0 4
40435: PUSH
40436: LD_INT 8
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: LIST
40443: PPUSH
40444: CALL_OW 72
40448: ST_TO_ADDR
// if nearEnemy then
40449: LD_VAR 0 6
40453: IFFALSE 40522
// begin if GetWeapon ( i ) = ru_time_lapser then
40455: LD_VAR 0 4
40459: PPUSH
40460: CALL_OW 264
40464: PUSH
40465: LD_INT 49
40467: EQUAL
40468: IFFALSE 40496
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40470: LD_VAR 0 4
40474: PPUSH
40475: LD_VAR 0 6
40479: PPUSH
40480: LD_VAR 0 4
40484: PPUSH
40485: CALL_OW 74
40489: PPUSH
40490: CALL_OW 112
40494: GO 40520
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40496: LD_VAR 0 4
40500: PPUSH
40501: LD_VAR 0 6
40505: PPUSH
40506: LD_VAR 0 4
40510: PPUSH
40511: CALL_OW 74
40515: PPUSH
40516: CALL_OW 115
// end else
40520: GO 40622
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40522: LD_VAR 0 4
40526: PPUSH
40527: LD_VAR 0 2
40531: PUSH
40532: LD_VAR 0 9
40536: ARRAY
40537: PUSH
40538: LD_INT 1
40540: ARRAY
40541: PPUSH
40542: LD_VAR 0 2
40546: PUSH
40547: LD_VAR 0 9
40551: ARRAY
40552: PUSH
40553: LD_INT 2
40555: ARRAY
40556: PPUSH
40557: CALL_OW 297
40561: PUSH
40562: LD_INT 6
40564: GREATER
40565: IFFALSE 40608
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40567: LD_VAR 0 4
40571: PPUSH
40572: LD_VAR 0 2
40576: PUSH
40577: LD_VAR 0 9
40581: ARRAY
40582: PUSH
40583: LD_INT 1
40585: ARRAY
40586: PPUSH
40587: LD_VAR 0 2
40591: PUSH
40592: LD_VAR 0 9
40596: ARRAY
40597: PUSH
40598: LD_INT 2
40600: ARRAY
40601: PPUSH
40602: CALL_OW 114
40606: GO 40622
// SetTag ( i , tag ) ;
40608: LD_VAR 0 4
40612: PPUSH
40613: LD_VAR 0 9
40617: PPUSH
40618: CALL_OW 109
// end else
40622: GO 40695
// if enemy then
40624: LD_VAR 0 5
40628: IFFALSE 40695
// begin if GetWeapon ( i ) = ru_time_lapser then
40630: LD_VAR 0 4
40634: PPUSH
40635: CALL_OW 264
40639: PUSH
40640: LD_INT 49
40642: EQUAL
40643: IFFALSE 40671
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40645: LD_VAR 0 4
40649: PPUSH
40650: LD_VAR 0 5
40654: PPUSH
40655: LD_VAR 0 4
40659: PPUSH
40660: CALL_OW 74
40664: PPUSH
40665: CALL_OW 112
40669: GO 40695
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40671: LD_VAR 0 4
40675: PPUSH
40676: LD_VAR 0 5
40680: PPUSH
40681: LD_VAR 0 4
40685: PPUSH
40686: CALL_OW 74
40690: PPUSH
40691: CALL_OW 115
// end ; end ;
40695: GO 40275
40697: POP
40698: POP
// end ;
40699: LD_VAR 0 3
40703: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40704: LD_INT 0
40706: PPUSH
40707: PPUSH
40708: PPUSH
// if not unit or IsInUnit ( unit ) then
40709: LD_VAR 0 1
40713: NOT
40714: PUSH
40715: LD_VAR 0 1
40719: PPUSH
40720: CALL_OW 310
40724: OR
40725: IFFALSE 40729
// exit ;
40727: GO 40820
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
40729: LD_ADDR_VAR 0 4
40733: PUSH
40734: LD_VAR 0 1
40738: PPUSH
40739: CALL_OW 250
40743: PPUSH
40744: LD_VAR 0 2
40748: PPUSH
40749: LD_INT 1
40751: PPUSH
40752: CALL_OW 272
40756: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
40757: LD_ADDR_VAR 0 5
40761: PUSH
40762: LD_VAR 0 1
40766: PPUSH
40767: CALL_OW 251
40771: PPUSH
40772: LD_VAR 0 2
40776: PPUSH
40777: LD_INT 1
40779: PPUSH
40780: CALL_OW 273
40784: ST_TO_ADDR
// if ValidHex ( x , y ) then
40785: LD_VAR 0 4
40789: PPUSH
40790: LD_VAR 0 5
40794: PPUSH
40795: CALL_OW 488
40799: IFFALSE 40820
// ComTurnXY ( unit , x , y ) ;
40801: LD_VAR 0 1
40805: PPUSH
40806: LD_VAR 0 4
40810: PPUSH
40811: LD_VAR 0 5
40815: PPUSH
40816: CALL_OW 118
// end ;
40820: LD_VAR 0 3
40824: RET
// export function SeeUnits ( side , units ) ; var i ; begin
40825: LD_INT 0
40827: PPUSH
40828: PPUSH
// result := false ;
40829: LD_ADDR_VAR 0 3
40833: PUSH
40834: LD_INT 0
40836: ST_TO_ADDR
// if not units then
40837: LD_VAR 0 2
40841: NOT
40842: IFFALSE 40846
// exit ;
40844: GO 40891
// for i in units do
40846: LD_ADDR_VAR 0 4
40850: PUSH
40851: LD_VAR 0 2
40855: PUSH
40856: FOR_IN
40857: IFFALSE 40889
// if See ( side , i ) then
40859: LD_VAR 0 1
40863: PPUSH
40864: LD_VAR 0 4
40868: PPUSH
40869: CALL_OW 292
40873: IFFALSE 40887
// begin result := true ;
40875: LD_ADDR_VAR 0 3
40879: PUSH
40880: LD_INT 1
40882: ST_TO_ADDR
// exit ;
40883: POP
40884: POP
40885: GO 40891
// end ;
40887: GO 40856
40889: POP
40890: POP
// end ;
40891: LD_VAR 0 3
40895: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
40896: LD_INT 0
40898: PPUSH
40899: PPUSH
40900: PPUSH
40901: PPUSH
// if not unit or not points then
40902: LD_VAR 0 1
40906: NOT
40907: PUSH
40908: LD_VAR 0 2
40912: NOT
40913: OR
40914: IFFALSE 40918
// exit ;
40916: GO 41008
// dist := 99999 ;
40918: LD_ADDR_VAR 0 5
40922: PUSH
40923: LD_INT 99999
40925: ST_TO_ADDR
// for i in points do
40926: LD_ADDR_VAR 0 4
40930: PUSH
40931: LD_VAR 0 2
40935: PUSH
40936: FOR_IN
40937: IFFALSE 41006
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
40939: LD_ADDR_VAR 0 6
40943: PUSH
40944: LD_VAR 0 1
40948: PPUSH
40949: LD_VAR 0 4
40953: PUSH
40954: LD_INT 1
40956: ARRAY
40957: PPUSH
40958: LD_VAR 0 4
40962: PUSH
40963: LD_INT 2
40965: ARRAY
40966: PPUSH
40967: CALL_OW 297
40971: ST_TO_ADDR
// if tmpDist < dist then
40972: LD_VAR 0 6
40976: PUSH
40977: LD_VAR 0 5
40981: LESS
40982: IFFALSE 41004
// begin result := i ;
40984: LD_ADDR_VAR 0 3
40988: PUSH
40989: LD_VAR 0 4
40993: ST_TO_ADDR
// dist := tmpDist ;
40994: LD_ADDR_VAR 0 5
40998: PUSH
40999: LD_VAR 0 6
41003: ST_TO_ADDR
// end ; end ;
41004: GO 40936
41006: POP
41007: POP
// end ;
41008: LD_VAR 0 3
41012: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41013: LD_INT 0
41015: PPUSH
// uc_side := side ;
41016: LD_ADDR_OWVAR 20
41020: PUSH
41021: LD_VAR 0 1
41025: ST_TO_ADDR
// uc_nation := 3 ;
41026: LD_ADDR_OWVAR 21
41030: PUSH
41031: LD_INT 3
41033: ST_TO_ADDR
// vc_chassis := 25 ;
41034: LD_ADDR_OWVAR 37
41038: PUSH
41039: LD_INT 25
41041: ST_TO_ADDR
// vc_engine := engine_siberite ;
41042: LD_ADDR_OWVAR 39
41046: PUSH
41047: LD_INT 3
41049: ST_TO_ADDR
// vc_control := control_computer ;
41050: LD_ADDR_OWVAR 38
41054: PUSH
41055: LD_INT 3
41057: ST_TO_ADDR
// vc_weapon := 59 ;
41058: LD_ADDR_OWVAR 40
41062: PUSH
41063: LD_INT 59
41065: ST_TO_ADDR
// result := CreateVehicle ;
41066: LD_ADDR_VAR 0 5
41070: PUSH
41071: CALL_OW 45
41075: ST_TO_ADDR
// SetDir ( result , d ) ;
41076: LD_VAR 0 5
41080: PPUSH
41081: LD_VAR 0 4
41085: PPUSH
41086: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41090: LD_VAR 0 5
41094: PPUSH
41095: LD_VAR 0 2
41099: PPUSH
41100: LD_VAR 0 3
41104: PPUSH
41105: LD_INT 0
41107: PPUSH
41108: CALL_OW 48
// end ;
41112: LD_VAR 0 5
41116: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41117: LD_INT 0
41119: PPUSH
41120: PPUSH
41121: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41122: LD_ADDR_VAR 0 2
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41145: LD_VAR 0 1
41149: NOT
41150: PUSH
41151: LD_VAR 0 1
41155: PPUSH
41156: CALL_OW 264
41160: PUSH
41161: LD_INT 12
41163: PUSH
41164: LD_INT 51
41166: PUSH
41167: LD_INT 32
41169: PUSH
41170: LD_INT 89
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: IN
41179: NOT
41180: OR
41181: IFFALSE 41185
// exit ;
41183: GO 41283
// for i := 1 to 3 do
41185: LD_ADDR_VAR 0 3
41189: PUSH
41190: DOUBLE
41191: LD_INT 1
41193: DEC
41194: ST_TO_ADDR
41195: LD_INT 3
41197: PUSH
41198: FOR_TO
41199: IFFALSE 41281
// begin tmp := GetCargo ( cargo , i ) ;
41201: LD_ADDR_VAR 0 4
41205: PUSH
41206: LD_VAR 0 1
41210: PPUSH
41211: LD_VAR 0 3
41215: PPUSH
41216: CALL_OW 289
41220: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41221: LD_ADDR_VAR 0 2
41225: PUSH
41226: LD_VAR 0 2
41230: PPUSH
41231: LD_VAR 0 3
41235: PPUSH
41236: LD_VAR 0 4
41240: PPUSH
41241: CALL_OW 1
41245: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41246: LD_ADDR_VAR 0 2
41250: PUSH
41251: LD_VAR 0 2
41255: PPUSH
41256: LD_INT 4
41258: PPUSH
41259: LD_VAR 0 2
41263: PUSH
41264: LD_INT 4
41266: ARRAY
41267: PUSH
41268: LD_VAR 0 4
41272: PLUS
41273: PPUSH
41274: CALL_OW 1
41278: ST_TO_ADDR
// end ;
41279: GO 41198
41281: POP
41282: POP
// end ;
41283: LD_VAR 0 2
41287: RET
// export function Length ( array ) ; begin
41288: LD_INT 0
41290: PPUSH
// result := array + 0 ;
41291: LD_ADDR_VAR 0 2
41295: PUSH
41296: LD_VAR 0 1
41300: PUSH
41301: LD_INT 0
41303: PLUS
41304: ST_TO_ADDR
// end ;
41305: LD_VAR 0 2
41309: RET
// export function PrepareArray ( array ) ; begin
41310: LD_INT 0
41312: PPUSH
// result := array diff 0 ;
41313: LD_ADDR_VAR 0 2
41317: PUSH
41318: LD_VAR 0 1
41322: PUSH
41323: LD_INT 0
41325: DIFF
41326: ST_TO_ADDR
// if not result [ 1 ] then
41327: LD_VAR 0 2
41331: PUSH
41332: LD_INT 1
41334: ARRAY
41335: NOT
41336: IFFALSE 41356
// result := Delete ( result , 1 ) ;
41338: LD_ADDR_VAR 0 2
41342: PUSH
41343: LD_VAR 0 2
41347: PPUSH
41348: LD_INT 1
41350: PPUSH
41351: CALL_OW 3
41355: ST_TO_ADDR
// end ;
41356: LD_VAR 0 2
41360: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41361: LD_INT 0
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
// sibRocketRange := 25 ;
41367: LD_ADDR_VAR 0 6
41371: PUSH
41372: LD_INT 25
41374: ST_TO_ADDR
// result := false ;
41375: LD_ADDR_VAR 0 4
41379: PUSH
41380: LD_INT 0
41382: ST_TO_ADDR
// for i := 0 to 5 do
41383: LD_ADDR_VAR 0 5
41387: PUSH
41388: DOUBLE
41389: LD_INT 0
41391: DEC
41392: ST_TO_ADDR
41393: LD_INT 5
41395: PUSH
41396: FOR_TO
41397: IFFALSE 41464
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41399: LD_VAR 0 1
41403: PPUSH
41404: LD_VAR 0 5
41408: PPUSH
41409: LD_VAR 0 6
41413: PPUSH
41414: CALL_OW 272
41418: PPUSH
41419: LD_VAR 0 2
41423: PPUSH
41424: LD_VAR 0 5
41428: PPUSH
41429: LD_VAR 0 6
41433: PPUSH
41434: CALL_OW 273
41438: PPUSH
41439: LD_VAR 0 3
41443: PPUSH
41444: CALL_OW 309
41448: IFFALSE 41462
// begin result := true ;
41450: LD_ADDR_VAR 0 4
41454: PUSH
41455: LD_INT 1
41457: ST_TO_ADDR
// exit ;
41458: POP
41459: POP
41460: GO 41466
// end ;
41462: GO 41396
41464: POP
41465: POP
// end ;
41466: LD_VAR 0 4
41470: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41471: LD_INT 0
41473: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41474: LD_VAR 0 1
41478: PPUSH
41479: LD_VAR 0 2
41483: PPUSH
41484: LD_INT 0
41486: PPUSH
41487: LD_INT 0
41489: PPUSH
41490: LD_INT 1
41492: PPUSH
41493: LD_INT 0
41495: PPUSH
41496: CALL_OW 587
// end ;
41500: LD_VAR 0 3
41504: RET
// export function CenterOnNow ( unit ) ; begin
41505: LD_INT 0
41507: PPUSH
// result := IsInUnit ( unit ) ;
41508: LD_ADDR_VAR 0 2
41512: PUSH
41513: LD_VAR 0 1
41517: PPUSH
41518: CALL_OW 310
41522: ST_TO_ADDR
// if not result then
41523: LD_VAR 0 2
41527: NOT
41528: IFFALSE 41540
// result := unit ;
41530: LD_ADDR_VAR 0 2
41534: PUSH
41535: LD_VAR 0 1
41539: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
41540: LD_VAR 0 1
41544: PPUSH
41545: CALL_OW 87
// end ;
41549: LD_VAR 0 2
41553: RET
// export function ComMoveHex ( unit , hex ) ; begin
41554: LD_INT 0
41556: PPUSH
// if not hex then
41557: LD_VAR 0 2
41561: NOT
41562: IFFALSE 41566
// exit ;
41564: GO 41619
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
41566: LD_VAR 0 2
41570: PUSH
41571: LD_INT 1
41573: ARRAY
41574: PPUSH
41575: LD_VAR 0 2
41579: PUSH
41580: LD_INT 2
41582: ARRAY
41583: PPUSH
41584: CALL_OW 428
41588: IFFALSE 41592
// exit ;
41590: GO 41619
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
41592: LD_VAR 0 1
41596: PPUSH
41597: LD_VAR 0 2
41601: PUSH
41602: LD_INT 1
41604: ARRAY
41605: PPUSH
41606: LD_VAR 0 2
41610: PUSH
41611: LD_INT 2
41613: ARRAY
41614: PPUSH
41615: CALL_OW 111
// end ;
41619: LD_VAR 0 3
41623: RET
