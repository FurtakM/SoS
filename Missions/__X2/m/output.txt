// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 112 0 0
// SetAreaMapShowCustom ( area2 , 1 ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 1
  13: PPUSH
  14: CALL 19 0 2
// end ;
  18: END
// function SetAreaMapShowCustom ( area , mode ) ; var i , tmp ; begin
  19: LD_INT 0
  21: PPUSH
  22: PPUSH
  23: PPUSH
// tmp := AreaToList ( area , 0 ) ;
  24: LD_ADDR_VAR 0 5
  28: PUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: CALL_OW 517
  41: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
  42: LD_ADDR_VAR 0 4
  46: PUSH
  47: DOUBLE
  48: LD_INT 1
  50: DEC
  51: ST_TO_ADDR
  52: LD_VAR 0 5
  56: PUSH
  57: LD_INT 1
  59: ARRAY
  60: PUSH
  61: FOR_TO
  62: IFFALSE 105
// SetAreaMapShowHex ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , mode ) ;
  64: LD_VAR 0 5
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PUSH
  73: LD_VAR 0 4
  77: ARRAY
  78: PPUSH
  79: LD_VAR 0 5
  83: PUSH
  84: LD_INT 2
  86: ARRAY
  87: PUSH
  88: LD_VAR 0 4
  92: ARRAY
  93: PPUSH
  94: LD_VAR 0 2
  98: PPUSH
  99: CALL_OW 598
 103: GO 61
 105: POP
 106: POP
// end ;
 107: LD_VAR 0 3
 111: RET
// var t ; function Init ; begin
 112: LD_INT 0
 114: PPUSH
// t := 0 0$0 ;
 115: LD_ADDR_LOC 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// CreateResourcesXY ( mat_cans , 5 , 63 , 64 , false ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 5
 128: PPUSH
 129: LD_INT 63
 131: PPUSH
 132: LD_INT 64
 134: PPUSH
 135: LD_INT 0
 137: PPUSH
 138: CALL_OW 58
// wait ( 0 0$1 ) ;
 142: LD_INT 35
 144: PPUSH
 145: CALL_OW 67
// CreateResourcesXY ( mat_cans , 4 , 63 , 64 , false ) ;
 149: LD_INT 1
 151: PPUSH
 152: LD_INT 4
 154: PPUSH
 155: LD_INT 63
 157: PPUSH
 158: LD_INT 64
 160: PPUSH
 161: LD_INT 0
 163: PPUSH
 164: CALL_OW 58
// end ;
 168: LD_VAR 0 1
 172: RET
// function GetAllLabKind ( side , kinds ) ; var i , j , tmp ; begin
 173: LD_INT 0
 175: PPUSH
 176: PPUSH
 177: PPUSH
 178: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 179: LD_ADDR_VAR 0 6
 183: PUSH
 184: LD_INT 22
 186: PUSH
 187: LD_VAR 0 1
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 30
 201: PUSH
 202: LD_INT 7
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 30
 211: PUSH
 212: LD_INT 8
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: ST_TO_ADDR
// if not tmp or not kinds then
 233: LD_VAR 0 6
 237: NOT
 238: PUSH
 239: LD_VAR 0 2
 243: NOT
 244: OR
 245: IFFALSE 249
// exit ;
 247: GO 358
// result := 0 ;
 249: LD_ADDR_VAR 0 3
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// for i in tmp do
 257: LD_ADDR_VAR 0 4
 261: PUSH
 262: LD_VAR 0 6
 266: PUSH
 267: FOR_IN
 268: IFFALSE 356
// for j := 1 to 2 do
 270: LD_ADDR_VAR 0 5
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 2
 282: PUSH
 283: FOR_TO
 284: IFFALSE 352
// if GetLabKind ( i , j ) in kinds then
 286: LD_VAR 0 4
 290: PPUSH
 291: LD_VAR 0 5
 295: PPUSH
 296: CALL_OW 268
 300: PUSH
 301: LD_VAR 0 2
 305: IN
 306: IFFALSE 350
// begin kinds := kinds diff GetLabKind ( i , j ) ;
 308: LD_ADDR_VAR 0 2
 312: PUSH
 313: LD_VAR 0 2
 317: PUSH
 318: LD_VAR 0 4
 322: PPUSH
 323: LD_VAR 0 5
 327: PPUSH
 328: CALL_OW 268
 332: DIFF
 333: ST_TO_ADDR
// result := result + 1 ;
 334: LD_ADDR_VAR 0 3
 338: PUSH
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: PLUS
 347: ST_TO_ADDR
// continue ;
 348: GO 283
// end ;
 350: GO 283
 352: POP
 353: POP
 354: GO 267
 356: POP
 357: POP
// end ;
 358: LD_VAR 0 3
 362: RET
// every 0 0$1 do
 363: GO 365
 365: DISABLE
// begin enable ;
 366: ENABLE
// display_strings := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] , [ f_side , 1 ] ] ) ;
 367: LD_ADDR_OWVAR 47
 371: PUSH
 372: LD_INT 21
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: LD_INT 58
 387: PUSH
 388: EMPTY
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PUSH
 395: LD_INT 22
 397: PUSH
 398: LD_INT 1
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: PPUSH
 410: CALL_OW 69
 414: ST_TO_ADDR
// end ; end_of_file
 415: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 416: LD_INT 0
 418: PPUSH
 419: PPUSH
// if exist_mode then
 420: LD_VAR 0 2
 424: IFFALSE 449
// unit := CreateCharacter ( prefix & ident ) else
 426: LD_ADDR_VAR 0 5
 430: PUSH
 431: LD_VAR 0 3
 435: PUSH
 436: LD_VAR 0 1
 440: STR
 441: PPUSH
 442: CALL_OW 34
 446: ST_TO_ADDR
 447: GO 464
// unit := NewCharacter ( ident ) ;
 449: LD_ADDR_VAR 0 5
 453: PUSH
 454: LD_VAR 0 1
 458: PPUSH
 459: CALL_OW 25
 463: ST_TO_ADDR
// result := unit ;
 464: LD_ADDR_VAR 0 4
 468: PUSH
 469: LD_VAR 0 5
 473: ST_TO_ADDR
// end ;
 474: LD_VAR 0 4
 478: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
// if not side or not nation then
 483: LD_VAR 0 1
 487: NOT
 488: PUSH
 489: LD_VAR 0 2
 493: NOT
 494: OR
 495: IFFALSE 499
// exit ;
 497: GO 1267
// case nation of nation_american :
 499: LD_VAR 0 2
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: EQUAL
 508: IFTRUE 512
 510: GO 726
 512: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 513: LD_ADDR_VAR 0 4
 517: PUSH
 518: LD_INT 35
 520: PUSH
 521: LD_INT 45
 523: PUSH
 524: LD_INT 46
 526: PUSH
 527: LD_INT 47
 529: PUSH
 530: LD_INT 82
 532: PUSH
 533: LD_INT 83
 535: PUSH
 536: LD_INT 84
 538: PUSH
 539: LD_INT 85
 541: PUSH
 542: LD_INT 86
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 2
 550: PUSH
 551: LD_INT 6
 553: PUSH
 554: LD_INT 15
 556: PUSH
 557: LD_INT 16
 559: PUSH
 560: LD_INT 7
 562: PUSH
 563: LD_INT 12
 565: PUSH
 566: LD_INT 13
 568: PUSH
 569: LD_INT 10
 571: PUSH
 572: LD_INT 14
 574: PUSH
 575: LD_INT 20
 577: PUSH
 578: LD_INT 21
 580: PUSH
 581: LD_INT 22
 583: PUSH
 584: LD_INT 25
 586: PUSH
 587: LD_INT 32
 589: PUSH
 590: LD_INT 27
 592: PUSH
 593: LD_INT 36
 595: PUSH
 596: LD_INT 69
 598: PUSH
 599: LD_INT 39
 601: PUSH
 602: LD_INT 34
 604: PUSH
 605: LD_INT 40
 607: PUSH
 608: LD_INT 48
 610: PUSH
 611: LD_INT 49
 613: PUSH
 614: LD_INT 50
 616: PUSH
 617: LD_INT 51
 619: PUSH
 620: LD_INT 52
 622: PUSH
 623: LD_INT 53
 625: PUSH
 626: LD_INT 54
 628: PUSH
 629: LD_INT 55
 631: PUSH
 632: LD_INT 56
 634: PUSH
 635: LD_INT 57
 637: PUSH
 638: LD_INT 58
 640: PUSH
 641: LD_INT 59
 643: PUSH
 644: LD_INT 60
 646: PUSH
 647: LD_INT 61
 649: PUSH
 650: LD_INT 62
 652: PUSH
 653: LD_INT 80
 655: PUSH
 656: LD_INT 82
 658: PUSH
 659: LD_INT 83
 661: PUSH
 662: LD_INT 84
 664: PUSH
 665: LD_INT 85
 667: PUSH
 668: LD_INT 86
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: ST_TO_ADDR
 724: GO 1191
 726: LD_INT 2
 728: DOUBLE
 729: EQUAL
 730: IFTRUE 734
 732: GO 960
 734: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 735: LD_ADDR_VAR 0 4
 739: PUSH
 740: LD_INT 35
 742: PUSH
 743: LD_INT 45
 745: PUSH
 746: LD_INT 46
 748: PUSH
 749: LD_INT 47
 751: PUSH
 752: LD_INT 82
 754: PUSH
 755: LD_INT 83
 757: PUSH
 758: LD_INT 84
 760: PUSH
 761: LD_INT 85
 763: PUSH
 764: LD_INT 87
 766: PUSH
 767: LD_INT 70
 769: PUSH
 770: LD_INT 1
 772: PUSH
 773: LD_INT 11
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: LD_INT 4
 781: PUSH
 782: LD_INT 5
 784: PUSH
 785: LD_INT 6
 787: PUSH
 788: LD_INT 15
 790: PUSH
 791: LD_INT 18
 793: PUSH
 794: LD_INT 7
 796: PUSH
 797: LD_INT 17
 799: PUSH
 800: LD_INT 8
 802: PUSH
 803: LD_INT 20
 805: PUSH
 806: LD_INT 21
 808: PUSH
 809: LD_INT 22
 811: PUSH
 812: LD_INT 72
 814: PUSH
 815: LD_INT 26
 817: PUSH
 818: LD_INT 69
 820: PUSH
 821: LD_INT 39
 823: PUSH
 824: LD_INT 40
 826: PUSH
 827: LD_INT 41
 829: PUSH
 830: LD_INT 42
 832: PUSH
 833: LD_INT 43
 835: PUSH
 836: LD_INT 48
 838: PUSH
 839: LD_INT 49
 841: PUSH
 842: LD_INT 50
 844: PUSH
 845: LD_INT 51
 847: PUSH
 848: LD_INT 52
 850: PUSH
 851: LD_INT 53
 853: PUSH
 854: LD_INT 54
 856: PUSH
 857: LD_INT 55
 859: PUSH
 860: LD_INT 56
 862: PUSH
 863: LD_INT 60
 865: PUSH
 866: LD_INT 61
 868: PUSH
 869: LD_INT 62
 871: PUSH
 872: LD_INT 66
 874: PUSH
 875: LD_INT 67
 877: PUSH
 878: LD_INT 68
 880: PUSH
 881: LD_INT 81
 883: PUSH
 884: LD_INT 82
 886: PUSH
 887: LD_INT 83
 889: PUSH
 890: LD_INT 84
 892: PUSH
 893: LD_INT 85
 895: PUSH
 896: LD_INT 87
 898: PUSH
 899: LD_INT 88
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: ST_TO_ADDR
 958: GO 1191
 960: LD_INT 3
 962: DOUBLE
 963: EQUAL
 964: IFTRUE 968
 966: GO 1190
 968: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 969: LD_ADDR_VAR 0 4
 973: PUSH
 974: LD_INT 46
 976: PUSH
 977: LD_INT 47
 979: PUSH
 980: LD_INT 1
 982: PUSH
 983: LD_INT 2
 985: PUSH
 986: LD_INT 82
 988: PUSH
 989: LD_INT 83
 991: PUSH
 992: LD_INT 84
 994: PUSH
 995: LD_INT 85
 997: PUSH
 998: LD_INT 86
1000: PUSH
1001: LD_INT 11
1003: PUSH
1004: LD_INT 9
1006: PUSH
1007: LD_INT 20
1009: PUSH
1010: LD_INT 19
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 24
1018: PUSH
1019: LD_INT 22
1021: PUSH
1022: LD_INT 25
1024: PUSH
1025: LD_INT 28
1027: PUSH
1028: LD_INT 29
1030: PUSH
1031: LD_INT 30
1033: PUSH
1034: LD_INT 31
1036: PUSH
1037: LD_INT 37
1039: PUSH
1040: LD_INT 38
1042: PUSH
1043: LD_INT 32
1045: PUSH
1046: LD_INT 27
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: LD_INT 69
1054: PUSH
1055: LD_INT 39
1057: PUSH
1058: LD_INT 34
1060: PUSH
1061: LD_INT 40
1063: PUSH
1064: LD_INT 71
1066: PUSH
1067: LD_INT 23
1069: PUSH
1070: LD_INT 44
1072: PUSH
1073: LD_INT 48
1075: PUSH
1076: LD_INT 49
1078: PUSH
1079: LD_INT 50
1081: PUSH
1082: LD_INT 51
1084: PUSH
1085: LD_INT 52
1087: PUSH
1088: LD_INT 53
1090: PUSH
1091: LD_INT 54
1093: PUSH
1094: LD_INT 55
1096: PUSH
1097: LD_INT 56
1099: PUSH
1100: LD_INT 57
1102: PUSH
1103: LD_INT 58
1105: PUSH
1106: LD_INT 59
1108: PUSH
1109: LD_INT 63
1111: PUSH
1112: LD_INT 64
1114: PUSH
1115: LD_INT 65
1117: PUSH
1118: LD_INT 82
1120: PUSH
1121: LD_INT 83
1123: PUSH
1124: LD_INT 84
1126: PUSH
1127: LD_INT 85
1129: PUSH
1130: LD_INT 86
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
1188: GO 1191
1190: POP
// if state > - 1 and state < 3 then
1191: LD_VAR 0 3
1195: PUSH
1196: LD_INT 1
1198: NEG
1199: GREATER
1200: PUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 3
1208: LESS
1209: AND
1210: IFFALSE 1267
// for i in result do
1212: LD_ADDR_VAR 0 5
1216: PUSH
1217: LD_VAR 0 4
1221: PUSH
1222: FOR_IN
1223: IFFALSE 1265
// if GetTech ( i , side ) <> state then
1225: LD_VAR 0 5
1229: PPUSH
1230: LD_VAR 0 1
1234: PPUSH
1235: CALL_OW 321
1239: PUSH
1240: LD_VAR 0 3
1244: NONEQUAL
1245: IFFALSE 1263
// result := result diff i ;
1247: LD_ADDR_VAR 0 4
1251: PUSH
1252: LD_VAR 0 4
1256: PUSH
1257: LD_VAR 0 5
1261: DIFF
1262: ST_TO_ADDR
1263: GO 1222
1265: POP
1266: POP
// end ;
1267: LD_VAR 0 4
1271: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1272: LD_INT 0
1274: PPUSH
1275: PPUSH
1276: PPUSH
// result := true ;
1277: LD_ADDR_VAR 0 3
1281: PUSH
1282: LD_INT 1
1284: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1285: LD_ADDR_VAR 0 5
1289: PUSH
1290: LD_VAR 0 2
1294: PPUSH
1295: CALL_OW 480
1299: ST_TO_ADDR
// if not tmp then
1300: LD_VAR 0 5
1304: NOT
1305: IFFALSE 1309
// exit ;
1307: GO 1358
// for i in tmp do
1309: LD_ADDR_VAR 0 4
1313: PUSH
1314: LD_VAR 0 5
1318: PUSH
1319: FOR_IN
1320: IFFALSE 1356
// if GetTech ( i , side ) <> state_researched then
1322: LD_VAR 0 4
1326: PPUSH
1327: LD_VAR 0 1
1331: PPUSH
1332: CALL_OW 321
1336: PUSH
1337: LD_INT 2
1339: NONEQUAL
1340: IFFALSE 1354
// begin result := false ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: LD_INT 0
1349: ST_TO_ADDR
// exit ;
1350: POP
1351: POP
1352: GO 1358
// end ;
1354: GO 1319
1356: POP
1357: POP
// end ;
1358: LD_VAR 0 3
1362: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
1371: PPUSH
1372: PPUSH
1373: PPUSH
1374: PPUSH
1375: PPUSH
1376: PPUSH
1377: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1378: LD_VAR 0 1
1382: NOT
1383: PUSH
1384: LD_VAR 0 1
1388: PPUSH
1389: CALL_OW 257
1393: PUSH
1394: LD_INT 9
1396: NONEQUAL
1397: OR
1398: IFFALSE 1402
// exit ;
1400: GO 1975
// side := GetSide ( unit ) ;
1402: LD_ADDR_VAR 0 9
1406: PUSH
1407: LD_VAR 0 1
1411: PPUSH
1412: CALL_OW 255
1416: ST_TO_ADDR
// tech_space := tech_spacanom ;
1417: LD_ADDR_VAR 0 12
1421: PUSH
1422: LD_INT 29
1424: ST_TO_ADDR
// tech_time := tech_taurad ;
1425: LD_ADDR_VAR 0 13
1429: PUSH
1430: LD_INT 28
1432: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1433: LD_ADDR_VAR 0 11
1437: PUSH
1438: LD_VAR 0 1
1442: PPUSH
1443: CALL_OW 310
1447: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1448: LD_VAR 0 11
1452: PPUSH
1453: CALL_OW 247
1457: PUSH
1458: LD_INT 2
1460: EQUAL
1461: IFFALSE 1465
// exit ;
1463: GO 1975
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1465: LD_ADDR_VAR 0 8
1469: PUSH
1470: LD_INT 81
1472: PUSH
1473: LD_VAR 0 9
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: LD_INT 21
1487: PUSH
1488: LD_INT 3
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PPUSH
1503: CALL_OW 69
1507: ST_TO_ADDR
// if not tmp then
1508: LD_VAR 0 8
1512: NOT
1513: IFFALSE 1517
// exit ;
1515: GO 1975
// if in_unit then
1517: LD_VAR 0 11
1521: IFFALSE 1545
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1523: LD_ADDR_VAR 0 10
1527: PUSH
1528: LD_VAR 0 8
1532: PPUSH
1533: LD_VAR 0 11
1537: PPUSH
1538: CALL_OW 74
1542: ST_TO_ADDR
1543: GO 1565
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1545: LD_ADDR_VAR 0 10
1549: PUSH
1550: LD_VAR 0 8
1554: PPUSH
1555: LD_VAR 0 1
1559: PPUSH
1560: CALL_OW 74
1564: ST_TO_ADDR
// if not enemy then
1565: LD_VAR 0 10
1569: NOT
1570: IFFALSE 1574
// exit ;
1572: GO 1975
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1574: LD_VAR 0 11
1578: PUSH
1579: LD_VAR 0 11
1583: PPUSH
1584: LD_VAR 0 10
1588: PPUSH
1589: CALL_OW 296
1593: PUSH
1594: LD_INT 13
1596: GREATER
1597: AND
1598: PUSH
1599: LD_VAR 0 1
1603: PPUSH
1604: LD_VAR 0 10
1608: PPUSH
1609: CALL_OW 296
1613: PUSH
1614: LD_INT 12
1616: GREATER
1617: OR
1618: IFFALSE 1622
// exit ;
1620: GO 1975
// missile := [ 1 ] ;
1622: LD_ADDR_VAR 0 14
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1633: LD_VAR 0 9
1637: PPUSH
1638: LD_VAR 0 12
1642: PPUSH
1643: CALL_OW 325
1647: IFFALSE 1676
// missile := Replace ( missile , missile + 1 , 2 ) ;
1649: LD_ADDR_VAR 0 14
1653: PUSH
1654: LD_VAR 0 14
1658: PPUSH
1659: LD_VAR 0 14
1663: PUSH
1664: LD_INT 1
1666: PLUS
1667: PPUSH
1668: LD_INT 2
1670: PPUSH
1671: CALL_OW 1
1675: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1676: LD_VAR 0 9
1680: PPUSH
1681: LD_VAR 0 13
1685: PPUSH
1686: CALL_OW 325
1690: PUSH
1691: LD_VAR 0 10
1695: PPUSH
1696: CALL_OW 255
1700: PPUSH
1701: LD_VAR 0 13
1705: PPUSH
1706: CALL_OW 325
1710: NOT
1711: AND
1712: IFFALSE 1741
// missile := Replace ( missile , missile + 1 , 3 ) ;
1714: LD_ADDR_VAR 0 14
1718: PUSH
1719: LD_VAR 0 14
1723: PPUSH
1724: LD_VAR 0 14
1728: PUSH
1729: LD_INT 1
1731: PLUS
1732: PPUSH
1733: LD_INT 3
1735: PPUSH
1736: CALL_OW 1
1740: ST_TO_ADDR
// if missile < 2 then
1741: LD_VAR 0 14
1745: PUSH
1746: LD_INT 2
1748: LESS
1749: IFFALSE 1753
// exit ;
1751: GO 1975
// x := GetX ( enemy ) ;
1753: LD_ADDR_VAR 0 4
1757: PUSH
1758: LD_VAR 0 10
1762: PPUSH
1763: CALL_OW 250
1767: ST_TO_ADDR
// y := GetY ( enemy ) ;
1768: LD_ADDR_VAR 0 5
1772: PUSH
1773: LD_VAR 0 10
1777: PPUSH
1778: CALL_OW 251
1782: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1783: LD_ADDR_VAR 0 6
1787: PUSH
1788: LD_VAR 0 4
1792: PUSH
1793: LD_INT 1
1795: NEG
1796: PPUSH
1797: LD_INT 1
1799: PPUSH
1800: CALL_OW 12
1804: PLUS
1805: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1806: LD_ADDR_VAR 0 7
1810: PUSH
1811: LD_VAR 0 5
1815: PUSH
1816: LD_INT 1
1818: NEG
1819: PPUSH
1820: LD_INT 1
1822: PPUSH
1823: CALL_OW 12
1827: PLUS
1828: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1829: LD_VAR 0 6
1833: PPUSH
1834: LD_VAR 0 7
1838: PPUSH
1839: CALL_OW 488
1843: NOT
1844: IFFALSE 1866
// begin _x := x ;
1846: LD_ADDR_VAR 0 6
1850: PUSH
1851: LD_VAR 0 4
1855: ST_TO_ADDR
// _y := y ;
1856: LD_ADDR_VAR 0 7
1860: PUSH
1861: LD_VAR 0 5
1865: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1866: LD_ADDR_VAR 0 3
1870: PUSH
1871: LD_INT 1
1873: PPUSH
1874: LD_VAR 0 14
1878: PPUSH
1879: CALL_OW 12
1883: ST_TO_ADDR
// case i of 1 :
1884: LD_VAR 0 3
1888: PUSH
1889: LD_INT 1
1891: DOUBLE
1892: EQUAL
1893: IFTRUE 1897
1895: GO 1914
1897: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1898: LD_VAR 0 1
1902: PPUSH
1903: LD_VAR 0 10
1907: PPUSH
1908: CALL_OW 115
1912: GO 1975
1914: LD_INT 2
1916: DOUBLE
1917: EQUAL
1918: IFTRUE 1922
1920: GO 1944
1922: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1923: LD_VAR 0 1
1927: PPUSH
1928: LD_VAR 0 6
1932: PPUSH
1933: LD_VAR 0 7
1937: PPUSH
1938: CALL_OW 153
1942: GO 1975
1944: LD_INT 3
1946: DOUBLE
1947: EQUAL
1948: IFTRUE 1952
1950: GO 1974
1952: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1953: LD_VAR 0 1
1957: PPUSH
1958: LD_VAR 0 6
1962: PPUSH
1963: LD_VAR 0 7
1967: PPUSH
1968: CALL_OW 154
1972: GO 1975
1974: POP
// end ;
1975: LD_VAR 0 2
1979: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1980: LD_INT 0
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
1986: PPUSH
1987: PPUSH
// if not unit or not building then
1988: LD_VAR 0 1
1992: NOT
1993: PUSH
1994: LD_VAR 0 2
1998: NOT
1999: OR
2000: IFFALSE 2004
// exit ;
2002: GO 2162
// x := GetX ( building ) ;
2004: LD_ADDR_VAR 0 5
2008: PUSH
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 250
2018: ST_TO_ADDR
// y := GetY ( building ) ;
2019: LD_ADDR_VAR 0 6
2023: PUSH
2024: LD_VAR 0 2
2028: PPUSH
2029: CALL_OW 251
2033: ST_TO_ADDR
// for i = 0 to 5 do
2034: LD_ADDR_VAR 0 4
2038: PUSH
2039: DOUBLE
2040: LD_INT 0
2042: DEC
2043: ST_TO_ADDR
2044: LD_INT 5
2046: PUSH
2047: FOR_TO
2048: IFFALSE 2160
// begin _x := ShiftX ( x , i , 3 ) ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_VAR 0 5
2059: PPUSH
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_INT 3
2067: PPUSH
2068: CALL_OW 272
2072: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2073: LD_ADDR_VAR 0 8
2077: PUSH
2078: LD_VAR 0 6
2082: PPUSH
2083: LD_VAR 0 4
2087: PPUSH
2088: LD_INT 3
2090: PPUSH
2091: CALL_OW 273
2095: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2096: LD_VAR 0 7
2100: PPUSH
2101: LD_VAR 0 8
2105: PPUSH
2106: CALL_OW 488
2110: NOT
2111: IFFALSE 2115
// continue ;
2113: GO 2047
// if HexInfo ( _x , _y ) = 0 then
2115: LD_VAR 0 7
2119: PPUSH
2120: LD_VAR 0 8
2124: PPUSH
2125: CALL_OW 428
2129: PUSH
2130: LD_INT 0
2132: EQUAL
2133: IFFALSE 2158
// begin ComMoveXY ( unit , _x , _y ) ;
2135: LD_VAR 0 1
2139: PPUSH
2140: LD_VAR 0 7
2144: PPUSH
2145: LD_VAR 0 8
2149: PPUSH
2150: CALL_OW 111
// exit ;
2154: POP
2155: POP
2156: GO 2162
// end ; end ;
2158: GO 2047
2160: POP
2161: POP
// end ;
2162: LD_VAR 0 3
2166: RET
// export function ScanBase ( side , base_area ) ; begin
2167: LD_INT 0
2169: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2170: LD_ADDR_VAR 0 3
2174: PUSH
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 81
2182: PUSH
2183: LD_VAR 0 1
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: PPUSH
2192: CALL_OW 70
2196: ST_TO_ADDR
// end ;
2197: LD_VAR 0 3
2201: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2202: LD_INT 0
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
// result := false ;
2208: LD_ADDR_VAR 0 2
2212: PUSH
2213: LD_INT 0
2215: ST_TO_ADDR
// side := GetSide ( unit ) ;
2216: LD_ADDR_VAR 0 3
2220: PUSH
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 255
2230: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2231: LD_ADDR_VAR 0 4
2235: PUSH
2236: LD_VAR 0 1
2240: PPUSH
2241: CALL_OW 248
2245: ST_TO_ADDR
// case nat of 1 :
2246: LD_VAR 0 4
2250: PUSH
2251: LD_INT 1
2253: DOUBLE
2254: EQUAL
2255: IFTRUE 2259
2257: GO 2270
2259: POP
// tech := tech_lassight ; 2 :
2260: LD_ADDR_VAR 0 5
2264: PUSH
2265: LD_INT 12
2267: ST_TO_ADDR
2268: GO 2309
2270: LD_INT 2
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2289
2278: POP
// tech := tech_mortar ; 3 :
2279: LD_ADDR_VAR 0 5
2283: PUSH
2284: LD_INT 41
2286: ST_TO_ADDR
2287: GO 2309
2289: LD_INT 3
2291: DOUBLE
2292: EQUAL
2293: IFTRUE 2297
2295: GO 2308
2297: POP
// tech := tech_bazooka ; end ;
2298: LD_ADDR_VAR 0 5
2302: PUSH
2303: LD_INT 44
2305: ST_TO_ADDR
2306: GO 2309
2308: POP
// if Researched ( side , tech ) then
2309: LD_VAR 0 3
2313: PPUSH
2314: LD_VAR 0 5
2318: PPUSH
2319: CALL_OW 325
2323: IFFALSE 2350
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2325: LD_ADDR_VAR 0 2
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 8
2335: PUSH
2336: LD_INT 9
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: LIST
2343: PUSH
2344: LD_VAR 0 4
2348: ARRAY
2349: ST_TO_ADDR
// end ;
2350: LD_VAR 0 2
2354: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2355: LD_INT 0
2357: PPUSH
2358: PPUSH
2359: PPUSH
// if not mines then
2360: LD_VAR 0 2
2364: NOT
2365: IFFALSE 2369
// exit ;
2367: GO 2513
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2369: LD_ADDR_VAR 0 5
2373: PUSH
2374: LD_INT 81
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: LD_INT 3
2388: PUSH
2389: LD_INT 21
2391: PUSH
2392: LD_INT 3
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PPUSH
2407: CALL_OW 69
2411: ST_TO_ADDR
// for i in mines do
2412: LD_ADDR_VAR 0 4
2416: PUSH
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_IN
2423: IFFALSE 2511
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2425: LD_VAR 0 4
2429: PUSH
2430: LD_INT 1
2432: ARRAY
2433: PPUSH
2434: LD_VAR 0 4
2438: PUSH
2439: LD_INT 2
2441: ARRAY
2442: PPUSH
2443: CALL_OW 458
2447: NOT
2448: IFFALSE 2452
// continue ;
2450: GO 2422
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2452: LD_VAR 0 4
2456: PUSH
2457: LD_INT 1
2459: ARRAY
2460: PPUSH
2461: LD_VAR 0 4
2465: PUSH
2466: LD_INT 2
2468: ARRAY
2469: PPUSH
2470: CALL_OW 428
2474: PUSH
2475: LD_VAR 0 5
2479: IN
2480: IFFALSE 2509
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2482: LD_VAR 0 4
2486: PUSH
2487: LD_INT 1
2489: ARRAY
2490: PPUSH
2491: LD_VAR 0 4
2495: PUSH
2496: LD_INT 2
2498: ARRAY
2499: PPUSH
2500: LD_VAR 0 1
2504: PPUSH
2505: CALL_OW 456
// end ;
2509: GO 2422
2511: POP
2512: POP
// end ;
2513: LD_VAR 0 3
2517: RET
// export function Count ( array ) ; begin
2518: LD_INT 0
2520: PPUSH
// result := array + 0 ;
2521: LD_ADDR_VAR 0 2
2525: PUSH
2526: LD_VAR 0 1
2530: PUSH
2531: LD_INT 0
2533: PLUS
2534: ST_TO_ADDR
// end ;
2535: LD_VAR 0 2
2539: RET
// export function IsEmpty ( building ) ; begin
2540: LD_INT 0
2542: PPUSH
// if not building then
2543: LD_VAR 0 1
2547: NOT
2548: IFFALSE 2552
// exit ;
2550: GO 2595
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2552: LD_ADDR_VAR 0 2
2556: PUSH
2557: LD_VAR 0 1
2561: PUSH
2562: LD_INT 22
2564: PUSH
2565: LD_VAR 0 1
2569: PPUSH
2570: CALL_OW 255
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PUSH
2579: LD_INT 58
2581: PUSH
2582: EMPTY
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: IN
2594: ST_TO_ADDR
// end ;
2595: LD_VAR 0 2
2599: RET
// export function IsNotFull ( building ) ; var places ; begin
2600: LD_INT 0
2602: PPUSH
2603: PPUSH
// if not building then
2604: LD_VAR 0 1
2608: NOT
2609: IFFALSE 2613
// exit ;
2611: GO 2641
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2613: LD_ADDR_VAR 0 2
2617: PUSH
2618: LD_VAR 0 1
2622: PPUSH
2623: LD_INT 3
2625: PUSH
2626: LD_INT 62
2628: PUSH
2629: EMPTY
2630: LIST
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PPUSH
2636: CALL_OW 72
2640: ST_TO_ADDR
// end ;
2641: LD_VAR 0 2
2645: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2646: LD_INT 0
2648: PPUSH
2649: PPUSH
2650: PPUSH
2651: PPUSH
// tmp := [ ] ;
2652: LD_ADDR_VAR 0 3
2656: PUSH
2657: EMPTY
2658: ST_TO_ADDR
// list := [ ] ;
2659: LD_ADDR_VAR 0 5
2663: PUSH
2664: EMPTY
2665: ST_TO_ADDR
// for i = 16 to 25 do
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: DOUBLE
2672: LD_INT 16
2674: DEC
2675: ST_TO_ADDR
2676: LD_INT 25
2678: PUSH
2679: FOR_TO
2680: IFFALSE 2753
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2682: LD_ADDR_VAR 0 3
2686: PUSH
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 22
2694: PUSH
2695: LD_VAR 0 1
2699: PPUSH
2700: CALL_OW 255
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 91
2711: PUSH
2712: LD_VAR 0 1
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 30
2727: PUSH
2728: LD_VAR 0 4
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: LIST
2741: PUSH
2742: EMPTY
2743: LIST
2744: PPUSH
2745: CALL_OW 69
2749: ADD
2750: ST_TO_ADDR
2751: GO 2679
2753: POP
2754: POP
// for i = 1 to tmp do
2755: LD_ADDR_VAR 0 4
2759: PUSH
2760: DOUBLE
2761: LD_INT 1
2763: DEC
2764: ST_TO_ADDR
2765: LD_VAR 0 3
2769: PUSH
2770: FOR_TO
2771: IFFALSE 2859
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2773: LD_ADDR_VAR 0 5
2777: PUSH
2778: LD_VAR 0 5
2782: PUSH
2783: LD_VAR 0 3
2787: PUSH
2788: LD_VAR 0 4
2792: ARRAY
2793: PPUSH
2794: CALL_OW 266
2798: PUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_VAR 0 4
2808: ARRAY
2809: PPUSH
2810: CALL_OW 250
2814: PUSH
2815: LD_VAR 0 3
2819: PUSH
2820: LD_VAR 0 4
2824: ARRAY
2825: PPUSH
2826: CALL_OW 251
2830: PUSH
2831: LD_VAR 0 3
2835: PUSH
2836: LD_VAR 0 4
2840: ARRAY
2841: PPUSH
2842: CALL_OW 254
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: PUSH
2853: EMPTY
2854: LIST
2855: ADD
2856: ST_TO_ADDR
2857: GO 2770
2859: POP
2860: POP
// result := list ;
2861: LD_ADDR_VAR 0 2
2865: PUSH
2866: LD_VAR 0 5
2870: ST_TO_ADDR
// end ;
2871: LD_VAR 0 2
2875: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2876: LD_INT 0
2878: PPUSH
2879: PPUSH
2880: PPUSH
2881: PPUSH
2882: PPUSH
2883: PPUSH
2884: PPUSH
// if not factory then
2885: LD_VAR 0 1
2889: NOT
2890: IFFALSE 2894
// exit ;
2892: GO 3487
// if control = control_apeman then
2894: LD_VAR 0 4
2898: PUSH
2899: LD_INT 5
2901: EQUAL
2902: IFFALSE 3011
// begin tmp := UnitsInside ( factory ) ;
2904: LD_ADDR_VAR 0 8
2908: PUSH
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL_OW 313
2918: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2919: LD_VAR 0 8
2923: PPUSH
2924: LD_INT 25
2926: PUSH
2927: LD_INT 12
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PPUSH
2934: CALL_OW 72
2938: NOT
2939: IFFALSE 2949
// control := control_manual ;
2941: LD_ADDR_VAR 0 4
2945: PUSH
2946: LD_INT 1
2948: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2949: LD_ADDR_VAR 0 8
2953: PUSH
2954: LD_VAR 0 1
2958: PPUSH
2959: CALL 2646 0 1
2963: ST_TO_ADDR
// if tmp then
2964: LD_VAR 0 8
2968: IFFALSE 3011
// begin for i in tmp do
2970: LD_ADDR_VAR 0 7
2974: PUSH
2975: LD_VAR 0 8
2979: PUSH
2980: FOR_IN
2981: IFFALSE 3009
// if i [ 1 ] = b_ext_radio then
2983: LD_VAR 0 7
2987: PUSH
2988: LD_INT 1
2990: ARRAY
2991: PUSH
2992: LD_INT 22
2994: EQUAL
2995: IFFALSE 3007
// begin control := control_remote ;
2997: LD_ADDR_VAR 0 4
3001: PUSH
3002: LD_INT 2
3004: ST_TO_ADDR
// break ;
3005: GO 3009
// end ;
3007: GO 2980
3009: POP
3010: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3011: LD_VAR 0 1
3015: PPUSH
3016: LD_VAR 0 2
3020: PPUSH
3021: LD_VAR 0 3
3025: PPUSH
3026: LD_VAR 0 4
3030: PPUSH
3031: LD_VAR 0 5
3035: PPUSH
3036: CALL_OW 448
3040: IFFALSE 3075
// begin result := [ chassis , engine , control , weapon ] ;
3042: LD_ADDR_VAR 0 6
3046: PUSH
3047: LD_VAR 0 2
3051: PUSH
3052: LD_VAR 0 3
3056: PUSH
3057: LD_VAR 0 4
3061: PUSH
3062: LD_VAR 0 5
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: ST_TO_ADDR
// exit ;
3073: GO 3487
// end ; _chassis := AvailableChassisList ( factory ) ;
3075: LD_ADDR_VAR 0 9
3079: PUSH
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 475
3089: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3090: LD_ADDR_VAR 0 11
3094: PUSH
3095: LD_VAR 0 1
3099: PPUSH
3100: CALL_OW 476
3104: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3105: LD_ADDR_VAR 0 12
3109: PUSH
3110: LD_VAR 0 1
3114: PPUSH
3115: CALL_OW 477
3119: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3120: LD_ADDR_VAR 0 10
3124: PUSH
3125: LD_VAR 0 1
3129: PPUSH
3130: CALL_OW 478
3134: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3135: LD_VAR 0 9
3139: NOT
3140: PUSH
3141: LD_VAR 0 11
3145: NOT
3146: OR
3147: PUSH
3148: LD_VAR 0 12
3152: NOT
3153: OR
3154: PUSH
3155: LD_VAR 0 10
3159: NOT
3160: OR
3161: IFFALSE 3196
// begin result := [ chassis , engine , control , weapon ] ;
3163: LD_ADDR_VAR 0 6
3167: PUSH
3168: LD_VAR 0 2
3172: PUSH
3173: LD_VAR 0 3
3177: PUSH
3178: LD_VAR 0 4
3182: PUSH
3183: LD_VAR 0 5
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: ST_TO_ADDR
// exit ;
3194: GO 3487
// end ; if not chassis in _chassis then
3196: LD_VAR 0 2
3200: PUSH
3201: LD_VAR 0 9
3205: IN
3206: NOT
3207: IFFALSE 3233
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3209: LD_ADDR_VAR 0 2
3213: PUSH
3214: LD_VAR 0 9
3218: PUSH
3219: LD_INT 1
3221: PPUSH
3222: LD_VAR 0 9
3226: PPUSH
3227: CALL_OW 12
3231: ARRAY
3232: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3233: LD_VAR 0 2
3237: PPUSH
3238: LD_VAR 0 3
3242: PPUSH
3243: CALL 3492 0 2
3247: NOT
3248: IFFALSE 3307
// repeat engine := _engine [ 1 ] ;
3250: LD_ADDR_VAR 0 3
3254: PUSH
3255: LD_VAR 0 11
3259: PUSH
3260: LD_INT 1
3262: ARRAY
3263: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3264: LD_ADDR_VAR 0 11
3268: PUSH
3269: LD_VAR 0 11
3273: PPUSH
3274: LD_INT 1
3276: PPUSH
3277: CALL_OW 3
3281: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3282: LD_VAR 0 2
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: CALL 3492 0 2
3296: PUSH
3297: LD_VAR 0 11
3301: PUSH
3302: EMPTY
3303: EQUAL
3304: OR
3305: IFFALSE 3250
// if not control in _control then
3307: LD_VAR 0 4
3311: PUSH
3312: LD_VAR 0 12
3316: IN
3317: NOT
3318: IFFALSE 3344
// control := _control [ rand ( 1 , _control ) ] ;
3320: LD_ADDR_VAR 0 4
3324: PUSH
3325: LD_VAR 0 12
3329: PUSH
3330: LD_INT 1
3332: PPUSH
3333: LD_VAR 0 12
3337: PPUSH
3338: CALL_OW 12
3342: ARRAY
3343: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3344: LD_VAR 0 2
3348: PPUSH
3349: LD_VAR 0 5
3353: PPUSH
3354: CALL 3712 0 2
3358: NOT
3359: IFFALSE 3418
// repeat weapon := _weapon [ 1 ] ;
3361: LD_ADDR_VAR 0 5
3365: PUSH
3366: LD_VAR 0 10
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3375: LD_ADDR_VAR 0 10
3379: PUSH
3380: LD_VAR 0 10
3384: PPUSH
3385: LD_INT 1
3387: PPUSH
3388: CALL_OW 3
3392: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3393: LD_VAR 0 2
3397: PPUSH
3398: LD_VAR 0 5
3402: PPUSH
3403: CALL 3712 0 2
3407: PUSH
3408: LD_VAR 0 10
3412: PUSH
3413: EMPTY
3414: EQUAL
3415: OR
3416: IFFALSE 3361
// result := [ ] ;
3418: LD_ADDR_VAR 0 6
3422: PUSH
3423: EMPTY
3424: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3425: LD_VAR 0 1
3429: PPUSH
3430: LD_VAR 0 2
3434: PPUSH
3435: LD_VAR 0 3
3439: PPUSH
3440: LD_VAR 0 4
3444: PPUSH
3445: LD_VAR 0 5
3449: PPUSH
3450: CALL_OW 448
3454: IFFALSE 3487
// result := [ chassis , engine , control , weapon ] ;
3456: LD_ADDR_VAR 0 6
3460: PUSH
3461: LD_VAR 0 2
3465: PUSH
3466: LD_VAR 0 3
3470: PUSH
3471: LD_VAR 0 4
3475: PUSH
3476: LD_VAR 0 5
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: ST_TO_ADDR
// end ;
3487: LD_VAR 0 6
3491: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3492: LD_INT 0
3494: PPUSH
// if not chassis or not engine then
3495: LD_VAR 0 1
3499: NOT
3500: PUSH
3501: LD_VAR 0 2
3505: NOT
3506: OR
3507: IFFALSE 3511
// exit ;
3509: GO 3707
// case engine of engine_solar :
3511: LD_VAR 0 2
3515: PUSH
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3524
3522: GO 3562
3524: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3525: LD_ADDR_VAR 0 3
3529: PUSH
3530: LD_INT 11
3532: PUSH
3533: LD_INT 12
3535: PUSH
3536: LD_INT 13
3538: PUSH
3539: LD_INT 14
3541: PUSH
3542: LD_INT 1
3544: PUSH
3545: LD_INT 2
3547: PUSH
3548: LD_INT 3
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: ST_TO_ADDR
3560: GO 3691
3562: LD_INT 1
3564: DOUBLE
3565: EQUAL
3566: IFTRUE 3570
3568: GO 3632
3570: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3571: LD_ADDR_VAR 0 3
3575: PUSH
3576: LD_INT 11
3578: PUSH
3579: LD_INT 12
3581: PUSH
3582: LD_INT 13
3584: PUSH
3585: LD_INT 14
3587: PUSH
3588: LD_INT 1
3590: PUSH
3591: LD_INT 2
3593: PUSH
3594: LD_INT 3
3596: PUSH
3597: LD_INT 4
3599: PUSH
3600: LD_INT 5
3602: PUSH
3603: LD_INT 21
3605: PUSH
3606: LD_INT 23
3608: PUSH
3609: LD_INT 22
3611: PUSH
3612: LD_INT 24
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: ST_TO_ADDR
3630: GO 3691
3632: LD_INT 3
3634: DOUBLE
3635: EQUAL
3636: IFTRUE 3640
3638: GO 3690
3640: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 13
3648: PUSH
3649: LD_INT 14
3651: PUSH
3652: LD_INT 2
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: LD_INT 4
3660: PUSH
3661: LD_INT 5
3663: PUSH
3664: LD_INT 21
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 23
3672: PUSH
3673: LD_INT 24
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: ST_TO_ADDR
3688: GO 3691
3690: POP
// result := ( chassis in result ) ;
3691: LD_ADDR_VAR 0 3
3695: PUSH
3696: LD_VAR 0 1
3700: PUSH
3701: LD_VAR 0 3
3705: IN
3706: ST_TO_ADDR
// end ;
3707: LD_VAR 0 3
3711: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3712: LD_INT 0
3714: PPUSH
// if not chassis or not weapon then
3715: LD_VAR 0 1
3719: NOT
3720: PUSH
3721: LD_VAR 0 2
3725: NOT
3726: OR
3727: IFFALSE 3731
// exit ;
3729: GO 4791
// case weapon of us_machine_gun :
3731: LD_VAR 0 2
3735: PUSH
3736: LD_INT 2
3738: DOUBLE
3739: EQUAL
3740: IFTRUE 3744
3742: GO 3774
3744: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3745: LD_ADDR_VAR 0 3
3749: PUSH
3750: LD_INT 1
3752: PUSH
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 4
3761: PUSH
3762: LD_INT 5
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: ST_TO_ADDR
3772: GO 4775
3774: LD_INT 3
3776: DOUBLE
3777: EQUAL
3778: IFTRUE 3782
3780: GO 3812
3782: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: LD_INT 1
3790: PUSH
3791: LD_INT 2
3793: PUSH
3794: LD_INT 3
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: LD_INT 5
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: ST_TO_ADDR
3810: GO 4775
3812: LD_INT 11
3814: DOUBLE
3815: EQUAL
3816: IFTRUE 3820
3818: GO 3850
3820: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3821: LD_ADDR_VAR 0 3
3825: PUSH
3826: LD_INT 1
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: LD_INT 3
3834: PUSH
3835: LD_INT 4
3837: PUSH
3838: LD_INT 5
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: ST_TO_ADDR
3848: GO 4775
3850: LD_INT 4
3852: DOUBLE
3853: EQUAL
3854: IFTRUE 3858
3856: GO 3884
3858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: LD_INT 2
3866: PUSH
3867: LD_INT 3
3869: PUSH
3870: LD_INT 4
3872: PUSH
3873: LD_INT 5
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: ST_TO_ADDR
3882: GO 4775
3884: LD_INT 5
3886: DOUBLE
3887: EQUAL
3888: IFTRUE 3892
3890: GO 3918
3892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3893: LD_ADDR_VAR 0 3
3897: PUSH
3898: LD_INT 2
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: LD_INT 5
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: ST_TO_ADDR
3916: GO 4775
3918: LD_INT 9
3920: DOUBLE
3921: EQUAL
3922: IFTRUE 3926
3924: GO 3952
3926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3927: LD_ADDR_VAR 0 3
3931: PUSH
3932: LD_INT 2
3934: PUSH
3935: LD_INT 3
3937: PUSH
3938: LD_INT 4
3940: PUSH
3941: LD_INT 5
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: ST_TO_ADDR
3950: GO 4775
3952: LD_INT 7
3954: DOUBLE
3955: EQUAL
3956: IFTRUE 3960
3958: GO 3986
3960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3961: LD_ADDR_VAR 0 3
3965: PUSH
3966: LD_INT 2
3968: PUSH
3969: LD_INT 3
3971: PUSH
3972: LD_INT 4
3974: PUSH
3975: LD_INT 5
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: ST_TO_ADDR
3984: GO 4775
3986: LD_INT 12
3988: DOUBLE
3989: EQUAL
3990: IFTRUE 3994
3992: GO 4020
3994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3995: LD_ADDR_VAR 0 3
3999: PUSH
4000: LD_INT 2
4002: PUSH
4003: LD_INT 3
4005: PUSH
4006: LD_INT 4
4008: PUSH
4009: LD_INT 5
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: ST_TO_ADDR
4018: GO 4775
4020: LD_INT 13
4022: DOUBLE
4023: EQUAL
4024: IFTRUE 4028
4026: GO 4054
4028: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4029: LD_ADDR_VAR 0 3
4033: PUSH
4034: LD_INT 2
4036: PUSH
4037: LD_INT 3
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: LD_INT 5
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: ST_TO_ADDR
4052: GO 4775
4054: LD_INT 14
4056: DOUBLE
4057: EQUAL
4058: IFTRUE 4062
4060: GO 4080
4062: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4063: LD_ADDR_VAR 0 3
4067: PUSH
4068: LD_INT 4
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: ST_TO_ADDR
4078: GO 4775
4080: LD_INT 6
4082: DOUBLE
4083: EQUAL
4084: IFTRUE 4088
4086: GO 4106
4088: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4089: LD_ADDR_VAR 0 3
4093: PUSH
4094: LD_INT 4
4096: PUSH
4097: LD_INT 5
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: ST_TO_ADDR
4104: GO 4775
4106: LD_INT 10
4108: DOUBLE
4109: EQUAL
4110: IFTRUE 4114
4112: GO 4132
4114: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4115: LD_ADDR_VAR 0 3
4119: PUSH
4120: LD_INT 4
4122: PUSH
4123: LD_INT 5
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: ST_TO_ADDR
4130: GO 4775
4132: LD_INT 22
4134: DOUBLE
4135: EQUAL
4136: IFTRUE 4140
4138: GO 4166
4140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4141: LD_ADDR_VAR 0 3
4145: PUSH
4146: LD_INT 11
4148: PUSH
4149: LD_INT 12
4151: PUSH
4152: LD_INT 13
4154: PUSH
4155: LD_INT 14
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: ST_TO_ADDR
4164: GO 4775
4166: LD_INT 23
4168: DOUBLE
4169: EQUAL
4170: IFTRUE 4174
4172: GO 4200
4174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4175: LD_ADDR_VAR 0 3
4179: PUSH
4180: LD_INT 11
4182: PUSH
4183: LD_INT 12
4185: PUSH
4186: LD_INT 13
4188: PUSH
4189: LD_INT 14
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: ST_TO_ADDR
4198: GO 4775
4200: LD_INT 24
4202: DOUBLE
4203: EQUAL
4204: IFTRUE 4208
4206: GO 4234
4208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: LD_INT 11
4216: PUSH
4217: LD_INT 12
4219: PUSH
4220: LD_INT 13
4222: PUSH
4223: LD_INT 14
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: ST_TO_ADDR
4232: GO 4775
4234: LD_INT 30
4236: DOUBLE
4237: EQUAL
4238: IFTRUE 4242
4240: GO 4268
4242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4243: LD_ADDR_VAR 0 3
4247: PUSH
4248: LD_INT 11
4250: PUSH
4251: LD_INT 12
4253: PUSH
4254: LD_INT 13
4256: PUSH
4257: LD_INT 14
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: ST_TO_ADDR
4266: GO 4775
4268: LD_INT 25
4270: DOUBLE
4271: EQUAL
4272: IFTRUE 4276
4274: GO 4294
4276: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4277: LD_ADDR_VAR 0 3
4281: PUSH
4282: LD_INT 13
4284: PUSH
4285: LD_INT 14
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: ST_TO_ADDR
4292: GO 4775
4294: LD_INT 27
4296: DOUBLE
4297: EQUAL
4298: IFTRUE 4302
4300: GO 4320
4302: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4303: LD_ADDR_VAR 0 3
4307: PUSH
4308: LD_INT 13
4310: PUSH
4311: LD_INT 14
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: ST_TO_ADDR
4318: GO 4775
4320: LD_INT 92
4322: DOUBLE
4323: EQUAL
4324: IFTRUE 4328
4326: GO 4354
4328: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4329: LD_ADDR_VAR 0 3
4333: PUSH
4334: LD_INT 11
4336: PUSH
4337: LD_INT 12
4339: PUSH
4340: LD_INT 13
4342: PUSH
4343: LD_INT 14
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: ST_TO_ADDR
4352: GO 4775
4354: LD_INT 28
4356: DOUBLE
4357: EQUAL
4358: IFTRUE 4362
4360: GO 4380
4362: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4363: LD_ADDR_VAR 0 3
4367: PUSH
4368: LD_INT 13
4370: PUSH
4371: LD_INT 14
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: ST_TO_ADDR
4378: GO 4775
4380: LD_INT 29
4382: DOUBLE
4383: EQUAL
4384: IFTRUE 4388
4386: GO 4406
4388: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: LD_INT 13
4396: PUSH
4397: LD_INT 14
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: ST_TO_ADDR
4404: GO 4775
4406: LD_INT 31
4408: DOUBLE
4409: EQUAL
4410: IFTRUE 4414
4412: GO 4432
4414: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_INT 13
4422: PUSH
4423: LD_INT 14
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: ST_TO_ADDR
4430: GO 4775
4432: LD_INT 26
4434: DOUBLE
4435: EQUAL
4436: IFTRUE 4440
4438: GO 4458
4440: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4441: LD_ADDR_VAR 0 3
4445: PUSH
4446: LD_INT 13
4448: PUSH
4449: LD_INT 14
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: ST_TO_ADDR
4456: GO 4775
4458: LD_INT 42
4460: DOUBLE
4461: EQUAL
4462: IFTRUE 4466
4464: GO 4492
4466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 23
4480: PUSH
4481: LD_INT 24
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: ST_TO_ADDR
4490: GO 4775
4492: LD_INT 43
4494: DOUBLE
4495: EQUAL
4496: IFTRUE 4500
4498: GO 4526
4500: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4501: LD_ADDR_VAR 0 3
4505: PUSH
4506: LD_INT 21
4508: PUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 23
4514: PUSH
4515: LD_INT 24
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: ST_TO_ADDR
4524: GO 4775
4526: LD_INT 44
4528: DOUBLE
4529: EQUAL
4530: IFTRUE 4534
4532: GO 4560
4534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4535: LD_ADDR_VAR 0 3
4539: PUSH
4540: LD_INT 21
4542: PUSH
4543: LD_INT 22
4545: PUSH
4546: LD_INT 23
4548: PUSH
4549: LD_INT 24
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: ST_TO_ADDR
4558: GO 4775
4560: LD_INT 45
4562: DOUBLE
4563: EQUAL
4564: IFTRUE 4568
4566: GO 4594
4568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_INT 21
4576: PUSH
4577: LD_INT 22
4579: PUSH
4580: LD_INT 23
4582: PUSH
4583: LD_INT 24
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: ST_TO_ADDR
4592: GO 4775
4594: LD_INT 49
4596: DOUBLE
4597: EQUAL
4598: IFTRUE 4602
4600: GO 4628
4602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4603: LD_ADDR_VAR 0 3
4607: PUSH
4608: LD_INT 21
4610: PUSH
4611: LD_INT 22
4613: PUSH
4614: LD_INT 23
4616: PUSH
4617: LD_INT 24
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: ST_TO_ADDR
4626: GO 4775
4628: LD_INT 51
4630: DOUBLE
4631: EQUAL
4632: IFTRUE 4636
4634: GO 4662
4636: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: LD_INT 22
4647: PUSH
4648: LD_INT 23
4650: PUSH
4651: LD_INT 24
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: ST_TO_ADDR
4660: GO 4775
4662: LD_INT 52
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4696
4670: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: LD_INT 21
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 23
4684: PUSH
4685: LD_INT 24
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: ST_TO_ADDR
4694: GO 4775
4696: LD_INT 53
4698: DOUBLE
4699: EQUAL
4700: IFTRUE 4704
4702: GO 4722
4704: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4705: LD_ADDR_VAR 0 3
4709: PUSH
4710: LD_INT 23
4712: PUSH
4713: LD_INT 24
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: ST_TO_ADDR
4720: GO 4775
4722: LD_INT 46
4724: DOUBLE
4725: EQUAL
4726: IFTRUE 4730
4728: GO 4748
4730: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4731: LD_ADDR_VAR 0 3
4735: PUSH
4736: LD_INT 23
4738: PUSH
4739: LD_INT 24
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: ST_TO_ADDR
4746: GO 4775
4748: LD_INT 47
4750: DOUBLE
4751: EQUAL
4752: IFTRUE 4756
4754: GO 4774
4756: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: LD_INT 23
4764: PUSH
4765: LD_INT 24
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: ST_TO_ADDR
4772: GO 4775
4774: POP
// result := ( chassis in result ) ;
4775: LD_ADDR_VAR 0 3
4779: PUSH
4780: LD_VAR 0 1
4784: PUSH
4785: LD_VAR 0 3
4789: IN
4790: ST_TO_ADDR
// end ;
4791: LD_VAR 0 3
4795: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4796: LD_INT 0
4798: PPUSH
4799: PPUSH
4800: PPUSH
4801: PPUSH
4802: PPUSH
4803: PPUSH
4804: PPUSH
// result := array ;
4805: LD_ADDR_VAR 0 5
4809: PUSH
4810: LD_VAR 0 1
4814: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4815: LD_VAR 0 1
4819: NOT
4820: PUSH
4821: LD_VAR 0 2
4825: NOT
4826: OR
4827: PUSH
4828: LD_VAR 0 3
4832: NOT
4833: OR
4834: PUSH
4835: LD_VAR 0 2
4839: PUSH
4840: LD_VAR 0 1
4844: GREATER
4845: OR
4846: PUSH
4847: LD_VAR 0 3
4851: PUSH
4852: LD_VAR 0 1
4856: GREATER
4857: OR
4858: IFFALSE 4862
// exit ;
4860: GO 5158
// if direction then
4862: LD_VAR 0 4
4866: IFFALSE 4930
// begin d := 1 ;
4868: LD_ADDR_VAR 0 9
4872: PUSH
4873: LD_INT 1
4875: ST_TO_ADDR
// if i_from > i_to then
4876: LD_VAR 0 2
4880: PUSH
4881: LD_VAR 0 3
4885: GREATER
4886: IFFALSE 4912
// length := ( array - i_from ) + i_to else
4888: LD_ADDR_VAR 0 11
4892: PUSH
4893: LD_VAR 0 1
4897: PUSH
4898: LD_VAR 0 2
4902: MINUS
4903: PUSH
4904: LD_VAR 0 3
4908: PLUS
4909: ST_TO_ADDR
4910: GO 4928
// length := i_to - i_from ;
4912: LD_ADDR_VAR 0 11
4916: PUSH
4917: LD_VAR 0 3
4921: PUSH
4922: LD_VAR 0 2
4926: MINUS
4927: ST_TO_ADDR
// end else
4928: GO 4991
// begin d := - 1 ;
4930: LD_ADDR_VAR 0 9
4934: PUSH
4935: LD_INT 1
4937: NEG
4938: ST_TO_ADDR
// if i_from > i_to then
4939: LD_VAR 0 2
4943: PUSH
4944: LD_VAR 0 3
4948: GREATER
4949: IFFALSE 4969
// length := i_from - i_to else
4951: LD_ADDR_VAR 0 11
4955: PUSH
4956: LD_VAR 0 2
4960: PUSH
4961: LD_VAR 0 3
4965: MINUS
4966: ST_TO_ADDR
4967: GO 4991
// length := ( array - i_to ) + i_from ;
4969: LD_ADDR_VAR 0 11
4973: PUSH
4974: LD_VAR 0 1
4978: PUSH
4979: LD_VAR 0 3
4983: MINUS
4984: PUSH
4985: LD_VAR 0 2
4989: PLUS
4990: ST_TO_ADDR
// end ; if not length then
4991: LD_VAR 0 11
4995: NOT
4996: IFFALSE 5000
// exit ;
4998: GO 5158
// tmp := array ;
5000: LD_ADDR_VAR 0 10
5004: PUSH
5005: LD_VAR 0 1
5009: ST_TO_ADDR
// for i = 1 to length do
5010: LD_ADDR_VAR 0 6
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_VAR 0 11
5024: PUSH
5025: FOR_TO
5026: IFFALSE 5146
// begin for j = 1 to array do
5028: LD_ADDR_VAR 0 7
5032: PUSH
5033: DOUBLE
5034: LD_INT 1
5036: DEC
5037: ST_TO_ADDR
5038: LD_VAR 0 1
5042: PUSH
5043: FOR_TO
5044: IFFALSE 5132
// begin k := j + d ;
5046: LD_ADDR_VAR 0 8
5050: PUSH
5051: LD_VAR 0 7
5055: PUSH
5056: LD_VAR 0 9
5060: PLUS
5061: ST_TO_ADDR
// if k > array then
5062: LD_VAR 0 8
5066: PUSH
5067: LD_VAR 0 1
5071: GREATER
5072: IFFALSE 5082
// k := 1 ;
5074: LD_ADDR_VAR 0 8
5078: PUSH
5079: LD_INT 1
5081: ST_TO_ADDR
// if not k then
5082: LD_VAR 0 8
5086: NOT
5087: IFFALSE 5099
// k := array ;
5089: LD_ADDR_VAR 0 8
5093: PUSH
5094: LD_VAR 0 1
5098: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5099: LD_ADDR_VAR 0 10
5103: PUSH
5104: LD_VAR 0 10
5108: PPUSH
5109: LD_VAR 0 8
5113: PPUSH
5114: LD_VAR 0 1
5118: PUSH
5119: LD_VAR 0 7
5123: ARRAY
5124: PPUSH
5125: CALL_OW 1
5129: ST_TO_ADDR
// end ;
5130: GO 5043
5132: POP
5133: POP
// array := tmp ;
5134: LD_ADDR_VAR 0 1
5138: PUSH
5139: LD_VAR 0 10
5143: ST_TO_ADDR
// end ;
5144: GO 5025
5146: POP
5147: POP
// result := array ;
5148: LD_ADDR_VAR 0 5
5152: PUSH
5153: LD_VAR 0 1
5157: ST_TO_ADDR
// end ;
5158: LD_VAR 0 5
5162: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5163: LD_INT 0
5165: PPUSH
5166: PPUSH
// result := 0 ;
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: LD_INT 0
5174: ST_TO_ADDR
// if not array or not value in array then
5175: LD_VAR 0 1
5179: NOT
5180: PUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_VAR 0 1
5190: IN
5191: NOT
5192: OR
5193: IFFALSE 5197
// exit ;
5195: GO 5251
// for i = 1 to array do
5197: LD_ADDR_VAR 0 4
5201: PUSH
5202: DOUBLE
5203: LD_INT 1
5205: DEC
5206: ST_TO_ADDR
5207: LD_VAR 0 1
5211: PUSH
5212: FOR_TO
5213: IFFALSE 5249
// if value = array [ i ] then
5215: LD_VAR 0 2
5219: PUSH
5220: LD_VAR 0 1
5224: PUSH
5225: LD_VAR 0 4
5229: ARRAY
5230: EQUAL
5231: IFFALSE 5247
// begin result := i ;
5233: LD_ADDR_VAR 0 3
5237: PUSH
5238: LD_VAR 0 4
5242: ST_TO_ADDR
// exit ;
5243: POP
5244: POP
5245: GO 5251
// end ;
5247: GO 5212
5249: POP
5250: POP
// end ;
5251: LD_VAR 0 3
5255: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5256: LD_INT 0
5258: PPUSH
// vc_chassis := chassis ;
5259: LD_ADDR_OWVAR 37
5263: PUSH
5264: LD_VAR 0 1
5268: ST_TO_ADDR
// vc_engine := engine ;
5269: LD_ADDR_OWVAR 39
5273: PUSH
5274: LD_VAR 0 2
5278: ST_TO_ADDR
// vc_control := control ;
5279: LD_ADDR_OWVAR 38
5283: PUSH
5284: LD_VAR 0 3
5288: ST_TO_ADDR
// vc_weapon := weapon ;
5289: LD_ADDR_OWVAR 40
5293: PUSH
5294: LD_VAR 0 4
5298: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5299: LD_ADDR_OWVAR 41
5303: PUSH
5304: LD_VAR 0 5
5308: ST_TO_ADDR
// end ;
5309: LD_VAR 0 6
5313: RET
// export function WantPlant ( unit ) ; var task ; begin
5314: LD_INT 0
5316: PPUSH
5317: PPUSH
// result := false ;
5318: LD_ADDR_VAR 0 2
5322: PUSH
5323: LD_INT 0
5325: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5326: LD_ADDR_VAR 0 3
5330: PUSH
5331: LD_VAR 0 1
5335: PPUSH
5336: CALL_OW 437
5340: ST_TO_ADDR
// if task then
5341: LD_VAR 0 3
5345: IFFALSE 5373
// if task [ 1 ] [ 1 ] = p then
5347: LD_VAR 0 3
5351: PUSH
5352: LD_INT 1
5354: ARRAY
5355: PUSH
5356: LD_INT 1
5358: ARRAY
5359: PUSH
5360: LD_STRING p
5362: EQUAL
5363: IFFALSE 5373
// result := true ;
5365: LD_ADDR_VAR 0 2
5369: PUSH
5370: LD_INT 1
5372: ST_TO_ADDR
// end ;
5373: LD_VAR 0 2
5377: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5378: LD_INT 0
5380: PPUSH
5381: PPUSH
5382: PPUSH
5383: PPUSH
// if pos < 1 then
5384: LD_VAR 0 2
5388: PUSH
5389: LD_INT 1
5391: LESS
5392: IFFALSE 5396
// exit ;
5394: GO 5699
// if pos = 1 then
5396: LD_VAR 0 2
5400: PUSH
5401: LD_INT 1
5403: EQUAL
5404: IFFALSE 5437
// result := Replace ( arr , pos [ 1 ] , value ) else
5406: LD_ADDR_VAR 0 4
5410: PUSH
5411: LD_VAR 0 1
5415: PPUSH
5416: LD_VAR 0 2
5420: PUSH
5421: LD_INT 1
5423: ARRAY
5424: PPUSH
5425: LD_VAR 0 3
5429: PPUSH
5430: CALL_OW 1
5434: ST_TO_ADDR
5435: GO 5699
// begin tmp := arr ;
5437: LD_ADDR_VAR 0 6
5441: PUSH
5442: LD_VAR 0 1
5446: ST_TO_ADDR
// s_arr := [ tmp ] ;
5447: LD_ADDR_VAR 0 7
5451: PUSH
5452: LD_VAR 0 6
5456: PUSH
5457: EMPTY
5458: LIST
5459: ST_TO_ADDR
// for i = 1 to pos - 1 do
5460: LD_ADDR_VAR 0 5
5464: PUSH
5465: DOUBLE
5466: LD_INT 1
5468: DEC
5469: ST_TO_ADDR
5470: LD_VAR 0 2
5474: PUSH
5475: LD_INT 1
5477: MINUS
5478: PUSH
5479: FOR_TO
5480: IFFALSE 5525
// begin tmp := tmp [ pos [ i ] ] ;
5482: LD_ADDR_VAR 0 6
5486: PUSH
5487: LD_VAR 0 6
5491: PUSH
5492: LD_VAR 0 2
5496: PUSH
5497: LD_VAR 0 5
5501: ARRAY
5502: ARRAY
5503: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5504: LD_ADDR_VAR 0 7
5508: PUSH
5509: LD_VAR 0 7
5513: PUSH
5514: LD_VAR 0 6
5518: PUSH
5519: EMPTY
5520: LIST
5521: ADD
5522: ST_TO_ADDR
// end ;
5523: GO 5479
5525: POP
5526: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5527: LD_ADDR_VAR 0 6
5531: PUSH
5532: LD_VAR 0 6
5536: PPUSH
5537: LD_VAR 0 2
5541: PUSH
5542: LD_VAR 0 2
5546: ARRAY
5547: PPUSH
5548: LD_VAR 0 3
5552: PPUSH
5553: CALL_OW 1
5557: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5558: LD_ADDR_VAR 0 7
5562: PUSH
5563: LD_VAR 0 7
5567: PPUSH
5568: LD_VAR 0 7
5572: PPUSH
5573: LD_VAR 0 6
5577: PPUSH
5578: CALL_OW 1
5582: ST_TO_ADDR
// for i = s_arr downto 2 do
5583: LD_ADDR_VAR 0 5
5587: PUSH
5588: DOUBLE
5589: LD_VAR 0 7
5593: INC
5594: ST_TO_ADDR
5595: LD_INT 2
5597: PUSH
5598: FOR_DOWNTO
5599: IFFALSE 5683
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5601: LD_ADDR_VAR 0 6
5605: PUSH
5606: LD_VAR 0 7
5610: PUSH
5611: LD_VAR 0 5
5615: PUSH
5616: LD_INT 1
5618: MINUS
5619: ARRAY
5620: PPUSH
5621: LD_VAR 0 2
5625: PUSH
5626: LD_VAR 0 5
5630: PUSH
5631: LD_INT 1
5633: MINUS
5634: ARRAY
5635: PPUSH
5636: LD_VAR 0 7
5640: PUSH
5641: LD_VAR 0 5
5645: ARRAY
5646: PPUSH
5647: CALL_OW 1
5651: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5652: LD_ADDR_VAR 0 7
5656: PUSH
5657: LD_VAR 0 7
5661: PPUSH
5662: LD_VAR 0 5
5666: PUSH
5667: LD_INT 1
5669: MINUS
5670: PPUSH
5671: LD_VAR 0 6
5675: PPUSH
5676: CALL_OW 1
5680: ST_TO_ADDR
// end ;
5681: GO 5598
5683: POP
5684: POP
// result := s_arr [ 1 ] ;
5685: LD_ADDR_VAR 0 4
5689: PUSH
5690: LD_VAR 0 7
5694: PUSH
5695: LD_INT 1
5697: ARRAY
5698: ST_TO_ADDR
// end ; end ;
5699: LD_VAR 0 4
5703: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5704: LD_INT 0
5706: PPUSH
5707: PPUSH
// if not list then
5708: LD_VAR 0 1
5712: NOT
5713: IFFALSE 5717
// exit ;
5715: GO 5808
// i := list [ pos1 ] ;
5717: LD_ADDR_VAR 0 5
5721: PUSH
5722: LD_VAR 0 1
5726: PUSH
5727: LD_VAR 0 2
5731: ARRAY
5732: ST_TO_ADDR
// if not i then
5733: LD_VAR 0 5
5737: NOT
5738: IFFALSE 5742
// exit ;
5740: GO 5808
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5742: LD_ADDR_VAR 0 1
5746: PUSH
5747: LD_VAR 0 1
5751: PPUSH
5752: LD_VAR 0 2
5756: PPUSH
5757: LD_VAR 0 1
5761: PUSH
5762: LD_VAR 0 3
5766: ARRAY
5767: PPUSH
5768: CALL_OW 1
5772: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5773: LD_ADDR_VAR 0 1
5777: PUSH
5778: LD_VAR 0 1
5782: PPUSH
5783: LD_VAR 0 3
5787: PPUSH
5788: LD_VAR 0 5
5792: PPUSH
5793: CALL_OW 1
5797: ST_TO_ADDR
// result := list ;
5798: LD_ADDR_VAR 0 4
5802: PUSH
5803: LD_VAR 0 1
5807: ST_TO_ADDR
// end ;
5808: LD_VAR 0 4
5812: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5813: LD_INT 0
5815: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5816: LD_ADDR_VAR 0 5
5820: PUSH
5821: LD_VAR 0 1
5825: PPUSH
5826: CALL_OW 250
5830: PPUSH
5831: LD_VAR 0 1
5835: PPUSH
5836: CALL_OW 251
5840: PPUSH
5841: LD_VAR 0 2
5845: PPUSH
5846: LD_VAR 0 3
5850: PPUSH
5851: LD_VAR 0 4
5855: PPUSH
5856: CALL 5866 0 5
5860: ST_TO_ADDR
// end ;
5861: LD_VAR 0 5
5865: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5866: LD_INT 0
5868: PPUSH
5869: PPUSH
5870: PPUSH
5871: PPUSH
// if not list then
5872: LD_VAR 0 3
5876: NOT
5877: IFFALSE 5881
// exit ;
5879: GO 6269
// result := [ ] ;
5881: LD_ADDR_VAR 0 6
5885: PUSH
5886: EMPTY
5887: ST_TO_ADDR
// for i in list do
5888: LD_ADDR_VAR 0 7
5892: PUSH
5893: LD_VAR 0 3
5897: PUSH
5898: FOR_IN
5899: IFFALSE 6101
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5901: LD_ADDR_VAR 0 9
5905: PUSH
5906: LD_VAR 0 7
5910: PPUSH
5911: LD_VAR 0 1
5915: PPUSH
5916: LD_VAR 0 2
5920: PPUSH
5921: CALL_OW 297
5925: ST_TO_ADDR
// if not result then
5926: LD_VAR 0 6
5930: NOT
5931: IFFALSE 5957
// result := [ [ i , tmp ] ] else
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_VAR 0 7
5942: PUSH
5943: LD_VAR 0 9
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: EMPTY
5953: LIST
5954: ST_TO_ADDR
5955: GO 6099
// begin if result [ result ] [ 2 ] < tmp then
5957: LD_VAR 0 6
5961: PUSH
5962: LD_VAR 0 6
5966: ARRAY
5967: PUSH
5968: LD_INT 2
5970: ARRAY
5971: PUSH
5972: LD_VAR 0 9
5976: LESS
5977: IFFALSE 6019
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5979: LD_ADDR_VAR 0 6
5983: PUSH
5984: LD_VAR 0 6
5988: PPUSH
5989: LD_VAR 0 6
5993: PUSH
5994: LD_INT 1
5996: PLUS
5997: PPUSH
5998: LD_VAR 0 7
6002: PUSH
6003: LD_VAR 0 9
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 2
6016: ST_TO_ADDR
6017: GO 6099
// for j = 1 to result do
6019: LD_ADDR_VAR 0 8
6023: PUSH
6024: DOUBLE
6025: LD_INT 1
6027: DEC
6028: ST_TO_ADDR
6029: LD_VAR 0 6
6033: PUSH
6034: FOR_TO
6035: IFFALSE 6097
// begin if tmp < result [ j ] [ 2 ] then
6037: LD_VAR 0 9
6041: PUSH
6042: LD_VAR 0 6
6046: PUSH
6047: LD_VAR 0 8
6051: ARRAY
6052: PUSH
6053: LD_INT 2
6055: ARRAY
6056: LESS
6057: IFFALSE 6095
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6059: LD_ADDR_VAR 0 6
6063: PUSH
6064: LD_VAR 0 6
6068: PPUSH
6069: LD_VAR 0 8
6073: PPUSH
6074: LD_VAR 0 7
6078: PUSH
6079: LD_VAR 0 9
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PPUSH
6088: CALL_OW 2
6092: ST_TO_ADDR
// break ;
6093: GO 6097
// end ; end ;
6095: GO 6034
6097: POP
6098: POP
// end ; end ;
6099: GO 5898
6101: POP
6102: POP
// if result and not asc then
6103: LD_VAR 0 6
6107: PUSH
6108: LD_VAR 0 4
6112: NOT
6113: AND
6114: IFFALSE 6189
// begin tmp := result ;
6116: LD_ADDR_VAR 0 9
6120: PUSH
6121: LD_VAR 0 6
6125: ST_TO_ADDR
// for i = tmp downto 1 do
6126: LD_ADDR_VAR 0 7
6130: PUSH
6131: DOUBLE
6132: LD_VAR 0 9
6136: INC
6137: ST_TO_ADDR
6138: LD_INT 1
6140: PUSH
6141: FOR_DOWNTO
6142: IFFALSE 6187
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6144: LD_ADDR_VAR 0 6
6148: PUSH
6149: LD_VAR 0 6
6153: PPUSH
6154: LD_VAR 0 9
6158: PUSH
6159: LD_VAR 0 7
6163: MINUS
6164: PUSH
6165: LD_INT 1
6167: PLUS
6168: PPUSH
6169: LD_VAR 0 9
6173: PUSH
6174: LD_VAR 0 7
6178: ARRAY
6179: PPUSH
6180: CALL_OW 1
6184: ST_TO_ADDR
6185: GO 6141
6187: POP
6188: POP
// end ; tmp := [ ] ;
6189: LD_ADDR_VAR 0 9
6193: PUSH
6194: EMPTY
6195: ST_TO_ADDR
// if mode then
6196: LD_VAR 0 5
6200: IFFALSE 6269
// begin for i = 1 to result do
6202: LD_ADDR_VAR 0 7
6206: PUSH
6207: DOUBLE
6208: LD_INT 1
6210: DEC
6211: ST_TO_ADDR
6212: LD_VAR 0 6
6216: PUSH
6217: FOR_TO
6218: IFFALSE 6257
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6220: LD_ADDR_VAR 0 9
6224: PUSH
6225: LD_VAR 0 9
6229: PPUSH
6230: LD_VAR 0 7
6234: PPUSH
6235: LD_VAR 0 6
6239: PUSH
6240: LD_VAR 0 7
6244: ARRAY
6245: PUSH
6246: LD_INT 1
6248: ARRAY
6249: PPUSH
6250: CALL_OW 1
6254: ST_TO_ADDR
6255: GO 6217
6257: POP
6258: POP
// result := tmp ;
6259: LD_ADDR_VAR 0 6
6263: PUSH
6264: LD_VAR 0 9
6268: ST_TO_ADDR
// end ; end ;
6269: LD_VAR 0 6
6273: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6274: LD_INT 0
6276: PPUSH
6277: PPUSH
6278: PPUSH
6279: PPUSH
6280: PPUSH
6281: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6282: LD_ADDR_VAR 0 5
6286: PUSH
6287: LD_INT 0
6289: PUSH
6290: LD_INT 0
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: EMPTY
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: ST_TO_ADDR
// if not x or not y then
6304: LD_VAR 0 2
6308: NOT
6309: PUSH
6310: LD_VAR 0 3
6314: NOT
6315: OR
6316: IFFALSE 6320
// exit ;
6318: GO 7970
// if not range then
6320: LD_VAR 0 4
6324: NOT
6325: IFFALSE 6335
// range := 10 ;
6327: LD_ADDR_VAR 0 4
6331: PUSH
6332: LD_INT 10
6334: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6335: LD_ADDR_VAR 0 8
6339: PUSH
6340: LD_INT 81
6342: PUSH
6343: LD_VAR 0 1
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 92
6354: PUSH
6355: LD_VAR 0 2
6359: PUSH
6360: LD_VAR 0 3
6364: PUSH
6365: LD_VAR 0 4
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 3
6378: PUSH
6379: LD_INT 21
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: LIST
6397: PPUSH
6398: CALL_OW 69
6402: ST_TO_ADDR
// if not tmp then
6403: LD_VAR 0 8
6407: NOT
6408: IFFALSE 6412
// exit ;
6410: GO 7970
// for i in tmp do
6412: LD_ADDR_VAR 0 6
6416: PUSH
6417: LD_VAR 0 8
6421: PUSH
6422: FOR_IN
6423: IFFALSE 7945
// begin points := [ 0 , 0 , 0 ] ;
6425: LD_ADDR_VAR 0 9
6429: PUSH
6430: LD_INT 0
6432: PUSH
6433: LD_INT 0
6435: PUSH
6436: LD_INT 0
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: LIST
6443: ST_TO_ADDR
// bpoints := 1 ;
6444: LD_ADDR_VAR 0 10
6448: PUSH
6449: LD_INT 1
6451: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6452: LD_VAR 0 6
6456: PPUSH
6457: CALL_OW 247
6461: PUSH
6462: LD_INT 1
6464: DOUBLE
6465: EQUAL
6466: IFTRUE 6470
6468: GO 7048
6470: POP
// begin if GetClass ( i ) = 1 then
6471: LD_VAR 0 6
6475: PPUSH
6476: CALL_OW 257
6480: PUSH
6481: LD_INT 1
6483: EQUAL
6484: IFFALSE 6505
// points := [ 10 , 5 , 3 ] ;
6486: LD_ADDR_VAR 0 9
6490: PUSH
6491: LD_INT 10
6493: PUSH
6494: LD_INT 5
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: LIST
6504: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6505: LD_VAR 0 6
6509: PPUSH
6510: CALL_OW 257
6514: PUSH
6515: LD_INT 2
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: LD_INT 4
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: IN
6529: IFFALSE 6550
// points := [ 3 , 2 , 1 ] ;
6531: LD_ADDR_VAR 0 9
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: LD_INT 2
6541: PUSH
6542: LD_INT 1
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6550: LD_VAR 0 6
6554: PPUSH
6555: CALL_OW 257
6559: PUSH
6560: LD_INT 5
6562: EQUAL
6563: IFFALSE 6584
// points := [ 130 , 5 , 2 ] ;
6565: LD_ADDR_VAR 0 9
6569: PUSH
6570: LD_INT 130
6572: PUSH
6573: LD_INT 5
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: LIST
6583: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6584: LD_VAR 0 6
6588: PPUSH
6589: CALL_OW 257
6593: PUSH
6594: LD_INT 8
6596: EQUAL
6597: IFFALSE 6618
// points := [ 35 , 35 , 30 ] ;
6599: LD_ADDR_VAR 0 9
6603: PUSH
6604: LD_INT 35
6606: PUSH
6607: LD_INT 35
6609: PUSH
6610: LD_INT 30
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6618: LD_VAR 0 6
6622: PPUSH
6623: CALL_OW 257
6627: PUSH
6628: LD_INT 9
6630: EQUAL
6631: IFFALSE 6652
// points := [ 20 , 55 , 40 ] ;
6633: LD_ADDR_VAR 0 9
6637: PUSH
6638: LD_INT 20
6640: PUSH
6641: LD_INT 55
6643: PUSH
6644: LD_INT 40
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: LIST
6651: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6652: LD_VAR 0 6
6656: PPUSH
6657: CALL_OW 257
6661: PUSH
6662: LD_INT 12
6664: PUSH
6665: LD_INT 16
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: IN
6672: IFFALSE 6693
// points := [ 5 , 3 , 2 ] ;
6674: LD_ADDR_VAR 0 9
6678: PUSH
6679: LD_INT 5
6681: PUSH
6682: LD_INT 3
6684: PUSH
6685: LD_INT 2
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6693: LD_VAR 0 6
6697: PPUSH
6698: CALL_OW 257
6702: PUSH
6703: LD_INT 17
6705: EQUAL
6706: IFFALSE 6727
// points := [ 100 , 50 , 75 ] ;
6708: LD_ADDR_VAR 0 9
6712: PUSH
6713: LD_INT 100
6715: PUSH
6716: LD_INT 50
6718: PUSH
6719: LD_INT 75
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6727: LD_VAR 0 6
6731: PPUSH
6732: CALL_OW 257
6736: PUSH
6737: LD_INT 15
6739: EQUAL
6740: IFFALSE 6761
// points := [ 10 , 5 , 3 ] ;
6742: LD_ADDR_VAR 0 9
6746: PUSH
6747: LD_INT 10
6749: PUSH
6750: LD_INT 5
6752: PUSH
6753: LD_INT 3
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6761: LD_VAR 0 6
6765: PPUSH
6766: CALL_OW 257
6770: PUSH
6771: LD_INT 14
6773: EQUAL
6774: IFFALSE 6795
// points := [ 10 , 0 , 0 ] ;
6776: LD_ADDR_VAR 0 9
6780: PUSH
6781: LD_INT 10
6783: PUSH
6784: LD_INT 0
6786: PUSH
6787: LD_INT 0
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6795: LD_VAR 0 6
6799: PPUSH
6800: CALL_OW 257
6804: PUSH
6805: LD_INT 11
6807: EQUAL
6808: IFFALSE 6829
// points := [ 30 , 10 , 5 ] ;
6810: LD_ADDR_VAR 0 9
6814: PUSH
6815: LD_INT 30
6817: PUSH
6818: LD_INT 10
6820: PUSH
6821: LD_INT 5
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6829: LD_VAR 0 1
6833: PPUSH
6834: LD_INT 5
6836: PPUSH
6837: CALL_OW 321
6841: PUSH
6842: LD_INT 2
6844: EQUAL
6845: IFFALSE 6862
// bpoints := bpoints * 1.8 ;
6847: LD_ADDR_VAR 0 10
6851: PUSH
6852: LD_VAR 0 10
6856: PUSH
6857: LD_REAL  1.80000000000000E+0000
6860: MUL
6861: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6862: LD_VAR 0 6
6866: PPUSH
6867: CALL_OW 257
6871: PUSH
6872: LD_INT 1
6874: PUSH
6875: LD_INT 2
6877: PUSH
6878: LD_INT 3
6880: PUSH
6881: LD_INT 4
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: IN
6890: PUSH
6891: LD_VAR 0 1
6895: PPUSH
6896: LD_INT 51
6898: PPUSH
6899: CALL_OW 321
6903: PUSH
6904: LD_INT 2
6906: EQUAL
6907: AND
6908: IFFALSE 6925
// bpoints := bpoints * 1.2 ;
6910: LD_ADDR_VAR 0 10
6914: PUSH
6915: LD_VAR 0 10
6919: PUSH
6920: LD_REAL  1.20000000000000E+0000
6923: MUL
6924: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6925: LD_VAR 0 6
6929: PPUSH
6930: CALL_OW 257
6934: PUSH
6935: LD_INT 5
6937: PUSH
6938: LD_INT 7
6940: PUSH
6941: LD_INT 9
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: IN
6949: PUSH
6950: LD_VAR 0 1
6954: PPUSH
6955: LD_INT 52
6957: PPUSH
6958: CALL_OW 321
6962: PUSH
6963: LD_INT 2
6965: EQUAL
6966: AND
6967: IFFALSE 6984
// bpoints := bpoints * 1.5 ;
6969: LD_ADDR_VAR 0 10
6973: PUSH
6974: LD_VAR 0 10
6978: PUSH
6979: LD_REAL  1.50000000000000E+0000
6982: MUL
6983: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6984: LD_VAR 0 1
6988: PPUSH
6989: LD_INT 66
6991: PPUSH
6992: CALL_OW 321
6996: PUSH
6997: LD_INT 2
6999: EQUAL
7000: IFFALSE 7017
// bpoints := bpoints * 1.1 ;
7002: LD_ADDR_VAR 0 10
7006: PUSH
7007: LD_VAR 0 10
7011: PUSH
7012: LD_REAL  1.10000000000000E+0000
7015: MUL
7016: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7017: LD_ADDR_VAR 0 10
7021: PUSH
7022: LD_VAR 0 10
7026: PUSH
7027: LD_VAR 0 6
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: CALL_OW 259
7039: PUSH
7040: LD_REAL  1.15000000000000E+0000
7043: MUL
7044: MUL
7045: ST_TO_ADDR
// end ; unit_vehicle :
7046: GO 7874
7048: LD_INT 2
7050: DOUBLE
7051: EQUAL
7052: IFTRUE 7056
7054: GO 7862
7056: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7057: LD_VAR 0 6
7061: PPUSH
7062: CALL_OW 264
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: LD_INT 42
7072: PUSH
7073: LD_INT 24
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: IN
7081: IFFALSE 7102
// points := [ 25 , 5 , 3 ] ;
7083: LD_ADDR_VAR 0 9
7087: PUSH
7088: LD_INT 25
7090: PUSH
7091: LD_INT 5
7093: PUSH
7094: LD_INT 3
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: LIST
7101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7102: LD_VAR 0 6
7106: PPUSH
7107: CALL_OW 264
7111: PUSH
7112: LD_INT 4
7114: PUSH
7115: LD_INT 43
7117: PUSH
7118: LD_INT 25
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: LIST
7125: IN
7126: IFFALSE 7147
// points := [ 40 , 15 , 5 ] ;
7128: LD_ADDR_VAR 0 9
7132: PUSH
7133: LD_INT 40
7135: PUSH
7136: LD_INT 15
7138: PUSH
7139: LD_INT 5
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7147: LD_VAR 0 6
7151: PPUSH
7152: CALL_OW 264
7156: PUSH
7157: LD_INT 3
7159: PUSH
7160: LD_INT 23
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: IN
7167: IFFALSE 7188
// points := [ 7 , 25 , 8 ] ;
7169: LD_ADDR_VAR 0 9
7173: PUSH
7174: LD_INT 7
7176: PUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 8
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7188: LD_VAR 0 6
7192: PPUSH
7193: CALL_OW 264
7197: PUSH
7198: LD_INT 5
7200: PUSH
7201: LD_INT 27
7203: PUSH
7204: LD_INT 44
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: IN
7212: IFFALSE 7233
// points := [ 14 , 50 , 16 ] ;
7214: LD_ADDR_VAR 0 9
7218: PUSH
7219: LD_INT 14
7221: PUSH
7222: LD_INT 50
7224: PUSH
7225: LD_INT 16
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: LIST
7232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7233: LD_VAR 0 6
7237: PPUSH
7238: CALL_OW 264
7242: PUSH
7243: LD_INT 6
7245: PUSH
7246: LD_INT 46
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: IN
7253: IFFALSE 7274
// points := [ 32 , 120 , 70 ] ;
7255: LD_ADDR_VAR 0 9
7259: PUSH
7260: LD_INT 32
7262: PUSH
7263: LD_INT 120
7265: PUSH
7266: LD_INT 70
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7274: LD_VAR 0 6
7278: PPUSH
7279: CALL_OW 264
7283: PUSH
7284: LD_INT 7
7286: PUSH
7287: LD_INT 28
7289: PUSH
7290: LD_INT 45
7292: PUSH
7293: LD_INT 92
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: IN
7302: IFFALSE 7323
// points := [ 35 , 20 , 45 ] ;
7304: LD_ADDR_VAR 0 9
7308: PUSH
7309: LD_INT 35
7311: PUSH
7312: LD_INT 20
7314: PUSH
7315: LD_INT 45
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7323: LD_VAR 0 6
7327: PPUSH
7328: CALL_OW 264
7332: PUSH
7333: LD_INT 47
7335: PUSH
7336: EMPTY
7337: LIST
7338: IN
7339: IFFALSE 7360
// points := [ 67 , 45 , 75 ] ;
7341: LD_ADDR_VAR 0 9
7345: PUSH
7346: LD_INT 67
7348: PUSH
7349: LD_INT 45
7351: PUSH
7352: LD_INT 75
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7360: LD_VAR 0 6
7364: PPUSH
7365: CALL_OW 264
7369: PUSH
7370: LD_INT 26
7372: PUSH
7373: EMPTY
7374: LIST
7375: IN
7376: IFFALSE 7397
// points := [ 120 , 30 , 80 ] ;
7378: LD_ADDR_VAR 0 9
7382: PUSH
7383: LD_INT 120
7385: PUSH
7386: LD_INT 30
7388: PUSH
7389: LD_INT 80
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7397: LD_VAR 0 6
7401: PPUSH
7402: CALL_OW 264
7406: PUSH
7407: LD_INT 22
7409: PUSH
7410: EMPTY
7411: LIST
7412: IN
7413: IFFALSE 7434
// points := [ 40 , 1 , 1 ] ;
7415: LD_ADDR_VAR 0 9
7419: PUSH
7420: LD_INT 40
7422: PUSH
7423: LD_INT 1
7425: PUSH
7426: LD_INT 1
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: LIST
7433: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7434: LD_VAR 0 6
7438: PPUSH
7439: CALL_OW 264
7443: PUSH
7444: LD_INT 29
7446: PUSH
7447: EMPTY
7448: LIST
7449: IN
7450: IFFALSE 7471
// points := [ 70 , 200 , 400 ] ;
7452: LD_ADDR_VAR 0 9
7456: PUSH
7457: LD_INT 70
7459: PUSH
7460: LD_INT 200
7462: PUSH
7463: LD_INT 400
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7471: LD_VAR 0 6
7475: PPUSH
7476: CALL_OW 264
7480: PUSH
7481: LD_INT 14
7483: PUSH
7484: LD_INT 53
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: IN
7491: IFFALSE 7512
// points := [ 40 , 10 , 20 ] ;
7493: LD_ADDR_VAR 0 9
7497: PUSH
7498: LD_INT 40
7500: PUSH
7501: LD_INT 10
7503: PUSH
7504: LD_INT 20
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: LIST
7511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7512: LD_VAR 0 6
7516: PPUSH
7517: CALL_OW 264
7521: PUSH
7522: LD_INT 9
7524: PUSH
7525: EMPTY
7526: LIST
7527: IN
7528: IFFALSE 7549
// points := [ 5 , 70 , 20 ] ;
7530: LD_ADDR_VAR 0 9
7534: PUSH
7535: LD_INT 5
7537: PUSH
7538: LD_INT 70
7540: PUSH
7541: LD_INT 20
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7549: LD_VAR 0 6
7553: PPUSH
7554: CALL_OW 264
7558: PUSH
7559: LD_INT 10
7561: PUSH
7562: EMPTY
7563: LIST
7564: IN
7565: IFFALSE 7586
// points := [ 35 , 110 , 70 ] ;
7567: LD_ADDR_VAR 0 9
7571: PUSH
7572: LD_INT 35
7574: PUSH
7575: LD_INT 110
7577: PUSH
7578: LD_INT 70
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: LIST
7585: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7586: LD_VAR 0 6
7590: PPUSH
7591: CALL_OW 265
7595: PUSH
7596: LD_INT 25
7598: EQUAL
7599: IFFALSE 7620
// points := [ 80 , 65 , 100 ] ;
7601: LD_ADDR_VAR 0 9
7605: PUSH
7606: LD_INT 80
7608: PUSH
7609: LD_INT 65
7611: PUSH
7612: LD_INT 100
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: LIST
7619: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7620: LD_VAR 0 6
7624: PPUSH
7625: CALL_OW 263
7629: PUSH
7630: LD_INT 1
7632: EQUAL
7633: IFFALSE 7668
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7635: LD_ADDR_VAR 0 10
7639: PUSH
7640: LD_VAR 0 10
7644: PUSH
7645: LD_VAR 0 6
7649: PPUSH
7650: CALL_OW 311
7654: PPUSH
7655: LD_INT 3
7657: PPUSH
7658: CALL_OW 259
7662: PUSH
7663: LD_INT 4
7665: MUL
7666: MUL
7667: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7668: LD_VAR 0 6
7672: PPUSH
7673: CALL_OW 263
7677: PUSH
7678: LD_INT 2
7680: EQUAL
7681: IFFALSE 7732
// begin j := IsControledBy ( i ) ;
7683: LD_ADDR_VAR 0 7
7687: PUSH
7688: LD_VAR 0 6
7692: PPUSH
7693: CALL_OW 312
7697: ST_TO_ADDR
// if j then
7698: LD_VAR 0 7
7702: IFFALSE 7732
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7704: LD_ADDR_VAR 0 10
7708: PUSH
7709: LD_VAR 0 10
7713: PUSH
7714: LD_VAR 0 7
7718: PPUSH
7719: LD_INT 3
7721: PPUSH
7722: CALL_OW 259
7726: PUSH
7727: LD_INT 3
7729: MUL
7730: MUL
7731: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7732: LD_VAR 0 6
7736: PPUSH
7737: CALL_OW 264
7741: PUSH
7742: LD_INT 5
7744: PUSH
7745: LD_INT 6
7747: PUSH
7748: LD_INT 46
7750: PUSH
7751: LD_INT 44
7753: PUSH
7754: LD_INT 47
7756: PUSH
7757: LD_INT 45
7759: PUSH
7760: LD_INT 28
7762: PUSH
7763: LD_INT 7
7765: PUSH
7766: LD_INT 27
7768: PUSH
7769: LD_INT 29
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: IN
7784: PUSH
7785: LD_VAR 0 1
7789: PPUSH
7790: LD_INT 52
7792: PPUSH
7793: CALL_OW 321
7797: PUSH
7798: LD_INT 2
7800: EQUAL
7801: AND
7802: IFFALSE 7819
// bpoints := bpoints * 1.2 ;
7804: LD_ADDR_VAR 0 10
7808: PUSH
7809: LD_VAR 0 10
7813: PUSH
7814: LD_REAL  1.20000000000000E+0000
7817: MUL
7818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7819: LD_VAR 0 6
7823: PPUSH
7824: CALL_OW 264
7828: PUSH
7829: LD_INT 6
7831: PUSH
7832: LD_INT 46
7834: PUSH
7835: LD_INT 47
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: LIST
7842: IN
7843: IFFALSE 7860
// bpoints := bpoints * 1.2 ;
7845: LD_ADDR_VAR 0 10
7849: PUSH
7850: LD_VAR 0 10
7854: PUSH
7855: LD_REAL  1.20000000000000E+0000
7858: MUL
7859: ST_TO_ADDR
// end ; unit_building :
7860: GO 7874
7862: LD_INT 3
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 7873
7870: POP
// ; end ;
7871: GO 7874
7873: POP
// for j = 1 to 3 do
7874: LD_ADDR_VAR 0 7
7878: PUSH
7879: DOUBLE
7880: LD_INT 1
7882: DEC
7883: ST_TO_ADDR
7884: LD_INT 3
7886: PUSH
7887: FOR_TO
7888: IFFALSE 7941
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7890: LD_ADDR_VAR 0 5
7894: PUSH
7895: LD_VAR 0 5
7899: PPUSH
7900: LD_VAR 0 7
7904: PPUSH
7905: LD_VAR 0 5
7909: PUSH
7910: LD_VAR 0 7
7914: ARRAY
7915: PUSH
7916: LD_VAR 0 9
7920: PUSH
7921: LD_VAR 0 7
7925: ARRAY
7926: PUSH
7927: LD_VAR 0 10
7931: MUL
7932: PLUS
7933: PPUSH
7934: CALL_OW 1
7938: ST_TO_ADDR
7939: GO 7887
7941: POP
7942: POP
// end ;
7943: GO 6422
7945: POP
7946: POP
// result := Replace ( result , 4 , tmp ) ;
7947: LD_ADDR_VAR 0 5
7951: PUSH
7952: LD_VAR 0 5
7956: PPUSH
7957: LD_INT 4
7959: PPUSH
7960: LD_VAR 0 8
7964: PPUSH
7965: CALL_OW 1
7969: ST_TO_ADDR
// end ;
7970: LD_VAR 0 5
7974: RET
// export function DangerAtRange ( unit , range ) ; begin
7975: LD_INT 0
7977: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7978: LD_ADDR_VAR 0 3
7982: PUSH
7983: LD_VAR 0 1
7987: PPUSH
7988: CALL_OW 255
7992: PPUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 250
8002: PPUSH
8003: LD_VAR 0 1
8007: PPUSH
8008: CALL_OW 251
8012: PPUSH
8013: LD_VAR 0 2
8017: PPUSH
8018: CALL 6274 0 4
8022: ST_TO_ADDR
// end ;
8023: LD_VAR 0 3
8027: RET
// export function DangerInArea ( side , area ) ; begin
8028: LD_INT 0
8030: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8031: LD_ADDR_VAR 0 3
8035: PUSH
8036: LD_VAR 0 2
8040: PPUSH
8041: LD_INT 81
8043: PUSH
8044: LD_VAR 0 1
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PPUSH
8053: CALL_OW 70
8057: ST_TO_ADDR
// end ;
8058: LD_VAR 0 3
8062: RET
// export function IsExtension ( b ) ; begin
8063: LD_INT 0
8065: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8066: LD_ADDR_VAR 0 2
8070: PUSH
8071: LD_VAR 0 1
8075: PUSH
8076: LD_INT 23
8078: PUSH
8079: LD_INT 20
8081: PUSH
8082: LD_INT 22
8084: PUSH
8085: LD_INT 17
8087: PUSH
8088: LD_INT 24
8090: PUSH
8091: LD_INT 21
8093: PUSH
8094: LD_INT 19
8096: PUSH
8097: LD_INT 16
8099: PUSH
8100: LD_INT 25
8102: PUSH
8103: LD_INT 18
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: IN
8118: ST_TO_ADDR
// end ;
8119: LD_VAR 0 2
8123: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8124: LD_INT 0
8126: PPUSH
8127: PPUSH
8128: PPUSH
// result := [ ] ;
8129: LD_ADDR_VAR 0 4
8133: PUSH
8134: EMPTY
8135: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8136: LD_ADDR_VAR 0 5
8140: PUSH
8141: LD_VAR 0 2
8145: PPUSH
8146: LD_INT 21
8148: PUSH
8149: LD_INT 3
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PPUSH
8156: CALL_OW 70
8160: ST_TO_ADDR
// if not tmp then
8161: LD_VAR 0 5
8165: NOT
8166: IFFALSE 8170
// exit ;
8168: GO 8234
// if checkLink then
8170: LD_VAR 0 3
8174: IFFALSE 8224
// begin for i in tmp do
8176: LD_ADDR_VAR 0 6
8180: PUSH
8181: LD_VAR 0 5
8185: PUSH
8186: FOR_IN
8187: IFFALSE 8222
// if GetBase ( i ) <> base then
8189: LD_VAR 0 6
8193: PPUSH
8194: CALL_OW 274
8198: PUSH
8199: LD_VAR 0 1
8203: NONEQUAL
8204: IFFALSE 8220
// ComLinkToBase ( base , i ) ;
8206: LD_VAR 0 1
8210: PPUSH
8211: LD_VAR 0 6
8215: PPUSH
8216: CALL_OW 169
8220: GO 8186
8222: POP
8223: POP
// end ; result := tmp ;
8224: LD_ADDR_VAR 0 4
8228: PUSH
8229: LD_VAR 0 5
8233: ST_TO_ADDR
// end ;
8234: LD_VAR 0 4
8238: RET
// export function ComComplete ( units , b ) ; var i ; begin
8239: LD_INT 0
8241: PPUSH
8242: PPUSH
// if not units then
8243: LD_VAR 0 1
8247: NOT
8248: IFFALSE 8252
// exit ;
8250: GO 8342
// for i in units do
8252: LD_ADDR_VAR 0 4
8256: PUSH
8257: LD_VAR 0 1
8261: PUSH
8262: FOR_IN
8263: IFFALSE 8340
// if BuildingStatus ( b ) = bs_build then
8265: LD_VAR 0 2
8269: PPUSH
8270: CALL_OW 461
8274: PUSH
8275: LD_INT 1
8277: EQUAL
8278: IFFALSE 8338
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_STRING h
8287: PUSH
8288: LD_VAR 0 2
8292: PPUSH
8293: CALL_OW 250
8297: PUSH
8298: LD_VAR 0 2
8302: PPUSH
8303: CALL_OW 251
8307: PUSH
8308: LD_VAR 0 2
8312: PUSH
8313: LD_INT 0
8315: PUSH
8316: LD_INT 0
8318: PUSH
8319: LD_INT 0
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: PUSH
8331: EMPTY
8332: LIST
8333: PPUSH
8334: CALL_OW 446
8338: GO 8262
8340: POP
8341: POP
// end ;
8342: LD_VAR 0 3
8346: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8347: LD_INT 0
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
8353: PPUSH
8354: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8355: LD_VAR 0 1
8359: NOT
8360: PUSH
8361: LD_VAR 0 1
8365: PPUSH
8366: CALL_OW 263
8370: PUSH
8371: LD_INT 2
8373: NONEQUAL
8374: OR
8375: IFFALSE 8379
// exit ;
8377: GO 8695
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8379: LD_ADDR_VAR 0 6
8383: PUSH
8384: LD_INT 22
8386: PUSH
8387: LD_VAR 0 1
8391: PPUSH
8392: CALL_OW 255
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PUSH
8401: LD_INT 2
8403: PUSH
8404: LD_INT 30
8406: PUSH
8407: LD_INT 36
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 34
8416: PUSH
8417: LD_INT 31
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: LIST
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 69
8437: ST_TO_ADDR
// if not tmp then
8438: LD_VAR 0 6
8442: NOT
8443: IFFALSE 8447
// exit ;
8445: GO 8695
// result := [ ] ;
8447: LD_ADDR_VAR 0 2
8451: PUSH
8452: EMPTY
8453: ST_TO_ADDR
// for i in tmp do
8454: LD_ADDR_VAR 0 3
8458: PUSH
8459: LD_VAR 0 6
8463: PUSH
8464: FOR_IN
8465: IFFALSE 8536
// begin t := UnitsInside ( i ) ;
8467: LD_ADDR_VAR 0 4
8471: PUSH
8472: LD_VAR 0 3
8476: PPUSH
8477: CALL_OW 313
8481: ST_TO_ADDR
// if t then
8482: LD_VAR 0 4
8486: IFFALSE 8534
// for j in t do
8488: LD_ADDR_VAR 0 7
8492: PUSH
8493: LD_VAR 0 4
8497: PUSH
8498: FOR_IN
8499: IFFALSE 8532
// result := Replace ( result , result + 1 , j ) ;
8501: LD_ADDR_VAR 0 2
8505: PUSH
8506: LD_VAR 0 2
8510: PPUSH
8511: LD_VAR 0 2
8515: PUSH
8516: LD_INT 1
8518: PLUS
8519: PPUSH
8520: LD_VAR 0 7
8524: PPUSH
8525: CALL_OW 1
8529: ST_TO_ADDR
8530: GO 8498
8532: POP
8533: POP
// end ;
8534: GO 8464
8536: POP
8537: POP
// if not result then
8538: LD_VAR 0 2
8542: NOT
8543: IFFALSE 8547
// exit ;
8545: GO 8695
// mech := result [ 1 ] ;
8547: LD_ADDR_VAR 0 5
8551: PUSH
8552: LD_VAR 0 2
8556: PUSH
8557: LD_INT 1
8559: ARRAY
8560: ST_TO_ADDR
// if result > 1 then
8561: LD_VAR 0 2
8565: PUSH
8566: LD_INT 1
8568: GREATER
8569: IFFALSE 8681
// begin for i = 2 to result do
8571: LD_ADDR_VAR 0 3
8575: PUSH
8576: DOUBLE
8577: LD_INT 2
8579: DEC
8580: ST_TO_ADDR
8581: LD_VAR 0 2
8585: PUSH
8586: FOR_TO
8587: IFFALSE 8679
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8589: LD_ADDR_VAR 0 4
8593: PUSH
8594: LD_VAR 0 2
8598: PUSH
8599: LD_VAR 0 3
8603: ARRAY
8604: PPUSH
8605: LD_INT 3
8607: PPUSH
8608: CALL_OW 259
8612: PUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_VAR 0 3
8622: ARRAY
8623: PPUSH
8624: CALL_OW 432
8628: MINUS
8629: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8630: LD_VAR 0 4
8634: PUSH
8635: LD_VAR 0 5
8639: PPUSH
8640: LD_INT 3
8642: PPUSH
8643: CALL_OW 259
8647: PUSH
8648: LD_VAR 0 5
8652: PPUSH
8653: CALL_OW 432
8657: MINUS
8658: GREATEREQUAL
8659: IFFALSE 8677
// mech := result [ i ] ;
8661: LD_ADDR_VAR 0 5
8665: PUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_VAR 0 3
8675: ARRAY
8676: ST_TO_ADDR
// end ;
8677: GO 8586
8679: POP
8680: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8681: LD_VAR 0 1
8685: PPUSH
8686: LD_VAR 0 5
8690: PPUSH
8691: CALL_OW 135
// end ;
8695: LD_VAR 0 2
8699: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8700: LD_INT 0
8702: PPUSH
8703: PPUSH
8704: PPUSH
8705: PPUSH
8706: PPUSH
8707: PPUSH
8708: PPUSH
8709: PPUSH
8710: PPUSH
8711: PPUSH
8712: PPUSH
8713: PPUSH
8714: PPUSH
// result := [ ] ;
8715: LD_ADDR_VAR 0 7
8719: PUSH
8720: EMPTY
8721: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8722: LD_VAR 0 1
8726: PPUSH
8727: CALL_OW 266
8731: PUSH
8732: LD_INT 0
8734: PUSH
8735: LD_INT 1
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: IN
8742: NOT
8743: IFFALSE 8747
// exit ;
8745: GO 10381
// if name then
8747: LD_VAR 0 3
8751: IFFALSE 8767
// SetBName ( base_dep , name ) ;
8753: LD_VAR 0 1
8757: PPUSH
8758: LD_VAR 0 3
8762: PPUSH
8763: CALL_OW 500
// base := GetBase ( base_dep ) ;
8767: LD_ADDR_VAR 0 15
8771: PUSH
8772: LD_VAR 0 1
8776: PPUSH
8777: CALL_OW 274
8781: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8782: LD_ADDR_VAR 0 16
8786: PUSH
8787: LD_VAR 0 1
8791: PPUSH
8792: CALL_OW 255
8796: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8797: LD_ADDR_VAR 0 17
8801: PUSH
8802: LD_VAR 0 1
8806: PPUSH
8807: CALL_OW 248
8811: ST_TO_ADDR
// if sources then
8812: LD_VAR 0 5
8816: IFFALSE 8863
// for i = 1 to 3 do
8818: LD_ADDR_VAR 0 8
8822: PUSH
8823: DOUBLE
8824: LD_INT 1
8826: DEC
8827: ST_TO_ADDR
8828: LD_INT 3
8830: PUSH
8831: FOR_TO
8832: IFFALSE 8861
// AddResourceType ( base , i , sources [ i ] ) ;
8834: LD_VAR 0 15
8838: PPUSH
8839: LD_VAR 0 8
8843: PPUSH
8844: LD_VAR 0 5
8848: PUSH
8849: LD_VAR 0 8
8853: ARRAY
8854: PPUSH
8855: CALL_OW 276
8859: GO 8831
8861: POP
8862: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8863: LD_ADDR_VAR 0 18
8867: PUSH
8868: LD_VAR 0 15
8872: PPUSH
8873: LD_VAR 0 2
8877: PPUSH
8878: LD_INT 1
8880: PPUSH
8881: CALL 8124 0 3
8885: ST_TO_ADDR
// InitHc ;
8886: CALL_OW 19
// InitUc ;
8890: CALL_OW 18
// uc_side := side ;
8894: LD_ADDR_OWVAR 20
8898: PUSH
8899: LD_VAR 0 16
8903: ST_TO_ADDR
// uc_nation := nation ;
8904: LD_ADDR_OWVAR 21
8908: PUSH
8909: LD_VAR 0 17
8913: ST_TO_ADDR
// if buildings then
8914: LD_VAR 0 18
8918: IFFALSE 10240
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8920: LD_ADDR_VAR 0 19
8924: PUSH
8925: LD_VAR 0 18
8929: PPUSH
8930: LD_INT 2
8932: PUSH
8933: LD_INT 30
8935: PUSH
8936: LD_INT 29
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 30
8945: PUSH
8946: LD_INT 30
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: PPUSH
8958: CALL_OW 72
8962: ST_TO_ADDR
// if tmp then
8963: LD_VAR 0 19
8967: IFFALSE 9015
// for i in tmp do
8969: LD_ADDR_VAR 0 8
8973: PUSH
8974: LD_VAR 0 19
8978: PUSH
8979: FOR_IN
8980: IFFALSE 9013
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8982: LD_VAR 0 8
8986: PPUSH
8987: CALL_OW 250
8991: PPUSH
8992: LD_VAR 0 8
8996: PPUSH
8997: CALL_OW 251
9001: PPUSH
9002: LD_VAR 0 16
9006: PPUSH
9007: CALL_OW 441
9011: GO 8979
9013: POP
9014: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9015: LD_VAR 0 18
9019: PPUSH
9020: LD_INT 2
9022: PUSH
9023: LD_INT 30
9025: PUSH
9026: LD_INT 32
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: LD_INT 30
9035: PUSH
9036: LD_INT 33
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: LIST
9047: PPUSH
9048: CALL_OW 72
9052: IFFALSE 9140
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9054: LD_ADDR_VAR 0 8
9058: PUSH
9059: LD_VAR 0 18
9063: PPUSH
9064: LD_INT 2
9066: PUSH
9067: LD_INT 30
9069: PUSH
9070: LD_INT 32
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 30
9079: PUSH
9080: LD_INT 33
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: PPUSH
9092: CALL_OW 72
9096: PUSH
9097: FOR_IN
9098: IFFALSE 9138
// begin if not GetBWeapon ( i ) then
9100: LD_VAR 0 8
9104: PPUSH
9105: CALL_OW 269
9109: NOT
9110: IFFALSE 9136
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9112: LD_VAR 0 8
9116: PPUSH
9117: LD_VAR 0 8
9121: PPUSH
9122: LD_VAR 0 2
9126: PPUSH
9127: CALL 10386 0 2
9131: PPUSH
9132: CALL_OW 431
// end ;
9136: GO 9097
9138: POP
9139: POP
// end ; for i = 1 to personel do
9140: LD_ADDR_VAR 0 8
9144: PUSH
9145: DOUBLE
9146: LD_INT 1
9148: DEC
9149: ST_TO_ADDR
9150: LD_VAR 0 6
9154: PUSH
9155: FOR_TO
9156: IFFALSE 10220
// begin if i > 4 then
9158: LD_VAR 0 8
9162: PUSH
9163: LD_INT 4
9165: GREATER
9166: IFFALSE 9170
// break ;
9168: GO 10220
// case i of 1 :
9170: LD_VAR 0 8
9174: PUSH
9175: LD_INT 1
9177: DOUBLE
9178: EQUAL
9179: IFTRUE 9183
9181: GO 9263
9183: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9184: LD_ADDR_VAR 0 12
9188: PUSH
9189: LD_VAR 0 18
9193: PPUSH
9194: LD_INT 22
9196: PUSH
9197: LD_VAR 0 16
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: LD_INT 58
9208: PUSH
9209: EMPTY
9210: LIST
9211: PUSH
9212: LD_INT 2
9214: PUSH
9215: LD_INT 30
9217: PUSH
9218: LD_INT 32
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: LD_INT 30
9227: PUSH
9228: LD_INT 4
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 30
9237: PUSH
9238: LD_INT 5
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: LIST
9255: PPUSH
9256: CALL_OW 72
9260: ST_TO_ADDR
9261: GO 9485
9263: LD_INT 2
9265: DOUBLE
9266: EQUAL
9267: IFTRUE 9271
9269: GO 9333
9271: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9272: LD_ADDR_VAR 0 12
9276: PUSH
9277: LD_VAR 0 18
9281: PPUSH
9282: LD_INT 22
9284: PUSH
9285: LD_VAR 0 16
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 2
9296: PUSH
9297: LD_INT 30
9299: PUSH
9300: LD_INT 0
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 30
9309: PUSH
9310: LD_INT 1
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PPUSH
9326: CALL_OW 72
9330: ST_TO_ADDR
9331: GO 9485
9333: LD_INT 3
9335: DOUBLE
9336: EQUAL
9337: IFTRUE 9341
9339: GO 9403
9341: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9342: LD_ADDR_VAR 0 12
9346: PUSH
9347: LD_VAR 0 18
9351: PPUSH
9352: LD_INT 22
9354: PUSH
9355: LD_VAR 0 16
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 2
9366: PUSH
9367: LD_INT 30
9369: PUSH
9370: LD_INT 2
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 30
9379: PUSH
9380: LD_INT 3
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: LIST
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PPUSH
9396: CALL_OW 72
9400: ST_TO_ADDR
9401: GO 9485
9403: LD_INT 4
9405: DOUBLE
9406: EQUAL
9407: IFTRUE 9411
9409: GO 9484
9411: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9412: LD_ADDR_VAR 0 12
9416: PUSH
9417: LD_VAR 0 18
9421: PPUSH
9422: LD_INT 22
9424: PUSH
9425: LD_VAR 0 16
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 2
9436: PUSH
9437: LD_INT 30
9439: PUSH
9440: LD_INT 6
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 30
9449: PUSH
9450: LD_INT 7
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PUSH
9457: LD_INT 30
9459: PUSH
9460: LD_INT 8
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PPUSH
9477: CALL_OW 72
9481: ST_TO_ADDR
9482: GO 9485
9484: POP
// if i = 1 then
9485: LD_VAR 0 8
9489: PUSH
9490: LD_INT 1
9492: EQUAL
9493: IFFALSE 9604
// begin tmp := [ ] ;
9495: LD_ADDR_VAR 0 19
9499: PUSH
9500: EMPTY
9501: ST_TO_ADDR
// for j in f do
9502: LD_ADDR_VAR 0 9
9506: PUSH
9507: LD_VAR 0 12
9511: PUSH
9512: FOR_IN
9513: IFFALSE 9586
// if GetBType ( j ) = b_bunker then
9515: LD_VAR 0 9
9519: PPUSH
9520: CALL_OW 266
9524: PUSH
9525: LD_INT 32
9527: EQUAL
9528: IFFALSE 9555
// tmp := Insert ( tmp , 1 , j ) else
9530: LD_ADDR_VAR 0 19
9534: PUSH
9535: LD_VAR 0 19
9539: PPUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_VAR 0 9
9547: PPUSH
9548: CALL_OW 2
9552: ST_TO_ADDR
9553: GO 9584
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9555: LD_ADDR_VAR 0 19
9559: PUSH
9560: LD_VAR 0 19
9564: PPUSH
9565: LD_VAR 0 19
9569: PUSH
9570: LD_INT 1
9572: PLUS
9573: PPUSH
9574: LD_VAR 0 9
9578: PPUSH
9579: CALL_OW 2
9583: ST_TO_ADDR
9584: GO 9512
9586: POP
9587: POP
// if tmp then
9588: LD_VAR 0 19
9592: IFFALSE 9604
// f := tmp ;
9594: LD_ADDR_VAR 0 12
9598: PUSH
9599: LD_VAR 0 19
9603: ST_TO_ADDR
// end ; x := personel [ i ] ;
9604: LD_ADDR_VAR 0 13
9608: PUSH
9609: LD_VAR 0 6
9613: PUSH
9614: LD_VAR 0 8
9618: ARRAY
9619: ST_TO_ADDR
// if x = - 1 then
9620: LD_VAR 0 13
9624: PUSH
9625: LD_INT 1
9627: NEG
9628: EQUAL
9629: IFFALSE 9838
// begin for j in f do
9631: LD_ADDR_VAR 0 9
9635: PUSH
9636: LD_VAR 0 12
9640: PUSH
9641: FOR_IN
9642: IFFALSE 9834
// repeat InitHc ;
9644: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9648: LD_VAR 0 9
9652: PPUSH
9653: CALL_OW 266
9657: PUSH
9658: LD_INT 5
9660: EQUAL
9661: IFFALSE 9731
// begin if UnitsInside ( j ) < 3 then
9663: LD_VAR 0 9
9667: PPUSH
9668: CALL_OW 313
9672: PUSH
9673: LD_INT 3
9675: LESS
9676: IFFALSE 9712
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9678: LD_INT 0
9680: PPUSH
9681: LD_INT 5
9683: PUSH
9684: LD_INT 8
9686: PUSH
9687: LD_INT 9
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: PUSH
9695: LD_VAR 0 17
9699: ARRAY
9700: PPUSH
9701: LD_VAR 0 4
9705: PPUSH
9706: CALL_OW 380
9710: GO 9729
// PrepareHuman ( false , i , skill ) ;
9712: LD_INT 0
9714: PPUSH
9715: LD_VAR 0 8
9719: PPUSH
9720: LD_VAR 0 4
9724: PPUSH
9725: CALL_OW 380
// end else
9729: GO 9748
// PrepareHuman ( false , i , skill ) ;
9731: LD_INT 0
9733: PPUSH
9734: LD_VAR 0 8
9738: PPUSH
9739: LD_VAR 0 4
9743: PPUSH
9744: CALL_OW 380
// un := CreateHuman ;
9748: LD_ADDR_VAR 0 14
9752: PUSH
9753: CALL_OW 44
9757: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9758: LD_ADDR_VAR 0 7
9762: PUSH
9763: LD_VAR 0 7
9767: PPUSH
9768: LD_INT 1
9770: PPUSH
9771: LD_VAR 0 14
9775: PPUSH
9776: CALL_OW 2
9780: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9781: LD_VAR 0 14
9785: PPUSH
9786: LD_VAR 0 9
9790: PPUSH
9791: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9795: LD_VAR 0 9
9799: PPUSH
9800: CALL_OW 313
9804: PUSH
9805: LD_INT 6
9807: EQUAL
9808: PUSH
9809: LD_VAR 0 9
9813: PPUSH
9814: CALL_OW 266
9818: PUSH
9819: LD_INT 32
9821: PUSH
9822: LD_INT 31
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: IN
9829: OR
9830: IFFALSE 9644
9832: GO 9641
9834: POP
9835: POP
// end else
9836: GO 10218
// for j = 1 to x do
9838: LD_ADDR_VAR 0 9
9842: PUSH
9843: DOUBLE
9844: LD_INT 1
9846: DEC
9847: ST_TO_ADDR
9848: LD_VAR 0 13
9852: PUSH
9853: FOR_TO
9854: IFFALSE 10216
// begin InitHc ;
9856: CALL_OW 19
// if not f then
9860: LD_VAR 0 12
9864: NOT
9865: IFFALSE 9954
// begin PrepareHuman ( false , i , skill ) ;
9867: LD_INT 0
9869: PPUSH
9870: LD_VAR 0 8
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: CALL_OW 380
// un := CreateHuman ;
9884: LD_ADDR_VAR 0 14
9888: PUSH
9889: CALL_OW 44
9893: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9894: LD_ADDR_VAR 0 7
9898: PUSH
9899: LD_VAR 0 7
9903: PPUSH
9904: LD_INT 1
9906: PPUSH
9907: LD_VAR 0 14
9911: PPUSH
9912: CALL_OW 2
9916: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9917: LD_VAR 0 14
9921: PPUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 250
9931: PPUSH
9932: LD_VAR 0 1
9936: PPUSH
9937: CALL_OW 251
9941: PPUSH
9942: LD_INT 10
9944: PPUSH
9945: LD_INT 0
9947: PPUSH
9948: CALL_OW 50
// continue ;
9952: GO 9853
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9954: LD_VAR 0 12
9958: PUSH
9959: LD_INT 1
9961: ARRAY
9962: PPUSH
9963: CALL_OW 313
9967: PUSH
9968: LD_VAR 0 12
9972: PUSH
9973: LD_INT 1
9975: ARRAY
9976: PPUSH
9977: CALL_OW 266
9981: PUSH
9982: LD_INT 32
9984: PUSH
9985: LD_INT 31
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: IN
9992: AND
9993: PUSH
9994: LD_VAR 0 12
9998: PUSH
9999: LD_INT 1
10001: ARRAY
10002: PPUSH
10003: CALL_OW 313
10007: PUSH
10008: LD_INT 6
10010: EQUAL
10011: OR
10012: IFFALSE 10032
// f := Delete ( f , 1 ) ;
10014: LD_ADDR_VAR 0 12
10018: PUSH
10019: LD_VAR 0 12
10023: PPUSH
10024: LD_INT 1
10026: PPUSH
10027: CALL_OW 3
10031: ST_TO_ADDR
// if not f then
10032: LD_VAR 0 12
10036: NOT
10037: IFFALSE 10055
// begin x := x + 2 ;
10039: LD_ADDR_VAR 0 13
10043: PUSH
10044: LD_VAR 0 13
10048: PUSH
10049: LD_INT 2
10051: PLUS
10052: ST_TO_ADDR
// continue ;
10053: GO 9853
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10055: LD_VAR 0 12
10059: PUSH
10060: LD_INT 1
10062: ARRAY
10063: PPUSH
10064: CALL_OW 266
10068: PUSH
10069: LD_INT 5
10071: EQUAL
10072: IFFALSE 10146
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10074: LD_VAR 0 12
10078: PUSH
10079: LD_INT 1
10081: ARRAY
10082: PPUSH
10083: CALL_OW 313
10087: PUSH
10088: LD_INT 3
10090: LESS
10091: IFFALSE 10127
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10093: LD_INT 0
10095: PPUSH
10096: LD_INT 5
10098: PUSH
10099: LD_INT 8
10101: PUSH
10102: LD_INT 9
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: PUSH
10110: LD_VAR 0 17
10114: ARRAY
10115: PPUSH
10116: LD_VAR 0 4
10120: PPUSH
10121: CALL_OW 380
10125: GO 10144
// PrepareHuman ( false , i , skill ) ;
10127: LD_INT 0
10129: PPUSH
10130: LD_VAR 0 8
10134: PPUSH
10135: LD_VAR 0 4
10139: PPUSH
10140: CALL_OW 380
// end else
10144: GO 10163
// PrepareHuman ( false , i , skill ) ;
10146: LD_INT 0
10148: PPUSH
10149: LD_VAR 0 8
10153: PPUSH
10154: LD_VAR 0 4
10158: PPUSH
10159: CALL_OW 380
// un := CreateHuman ;
10163: LD_ADDR_VAR 0 14
10167: PUSH
10168: CALL_OW 44
10172: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10173: LD_ADDR_VAR 0 7
10177: PUSH
10178: LD_VAR 0 7
10182: PPUSH
10183: LD_INT 1
10185: PPUSH
10186: LD_VAR 0 14
10190: PPUSH
10191: CALL_OW 2
10195: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10196: LD_VAR 0 14
10200: PPUSH
10201: LD_VAR 0 12
10205: PUSH
10206: LD_INT 1
10208: ARRAY
10209: PPUSH
10210: CALL_OW 52
// end ;
10214: GO 9853
10216: POP
10217: POP
// end ;
10218: GO 9155
10220: POP
10221: POP
// result := result ^ buildings ;
10222: LD_ADDR_VAR 0 7
10226: PUSH
10227: LD_VAR 0 7
10231: PUSH
10232: LD_VAR 0 18
10236: ADD
10237: ST_TO_ADDR
// end else
10238: GO 10381
// begin for i = 1 to personel do
10240: LD_ADDR_VAR 0 8
10244: PUSH
10245: DOUBLE
10246: LD_INT 1
10248: DEC
10249: ST_TO_ADDR
10250: LD_VAR 0 6
10254: PUSH
10255: FOR_TO
10256: IFFALSE 10379
// begin if i > 4 then
10258: LD_VAR 0 8
10262: PUSH
10263: LD_INT 4
10265: GREATER
10266: IFFALSE 10270
// break ;
10268: GO 10379
// x := personel [ i ] ;
10270: LD_ADDR_VAR 0 13
10274: PUSH
10275: LD_VAR 0 6
10279: PUSH
10280: LD_VAR 0 8
10284: ARRAY
10285: ST_TO_ADDR
// if x = - 1 then
10286: LD_VAR 0 13
10290: PUSH
10291: LD_INT 1
10293: NEG
10294: EQUAL
10295: IFFALSE 10299
// continue ;
10297: GO 10255
// PrepareHuman ( false , i , skill ) ;
10299: LD_INT 0
10301: PPUSH
10302: LD_VAR 0 8
10306: PPUSH
10307: LD_VAR 0 4
10311: PPUSH
10312: CALL_OW 380
// un := CreateHuman ;
10316: LD_ADDR_VAR 0 14
10320: PUSH
10321: CALL_OW 44
10325: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10326: LD_VAR 0 14
10330: PPUSH
10331: LD_VAR 0 1
10335: PPUSH
10336: CALL_OW 250
10340: PPUSH
10341: LD_VAR 0 1
10345: PPUSH
10346: CALL_OW 251
10350: PPUSH
10351: LD_INT 10
10353: PPUSH
10354: LD_INT 0
10356: PPUSH
10357: CALL_OW 50
// result := result ^ un ;
10361: LD_ADDR_VAR 0 7
10365: PUSH
10366: LD_VAR 0 7
10370: PUSH
10371: LD_VAR 0 14
10375: ADD
10376: ST_TO_ADDR
// end ;
10377: GO 10255
10379: POP
10380: POP
// end ; end ;
10381: LD_VAR 0 7
10385: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10386: LD_INT 0
10388: PPUSH
10389: PPUSH
10390: PPUSH
10391: PPUSH
10392: PPUSH
10393: PPUSH
10394: PPUSH
10395: PPUSH
10396: PPUSH
10397: PPUSH
10398: PPUSH
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
// result := false ;
10404: LD_ADDR_VAR 0 3
10408: PUSH
10409: LD_INT 0
10411: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10412: LD_VAR 0 1
10416: NOT
10417: PUSH
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 266
10427: PUSH
10428: LD_INT 32
10430: PUSH
10431: LD_INT 33
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: IN
10438: NOT
10439: OR
10440: IFFALSE 10444
// exit ;
10442: GO 11553
// nat := GetNation ( tower ) ;
10444: LD_ADDR_VAR 0 12
10448: PUSH
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 248
10458: ST_TO_ADDR
// side := GetSide ( tower ) ;
10459: LD_ADDR_VAR 0 16
10463: PUSH
10464: LD_VAR 0 1
10468: PPUSH
10469: CALL_OW 255
10473: ST_TO_ADDR
// x := GetX ( tower ) ;
10474: LD_ADDR_VAR 0 10
10478: PUSH
10479: LD_VAR 0 1
10483: PPUSH
10484: CALL_OW 250
10488: ST_TO_ADDR
// y := GetY ( tower ) ;
10489: LD_ADDR_VAR 0 11
10493: PUSH
10494: LD_VAR 0 1
10498: PPUSH
10499: CALL_OW 251
10503: ST_TO_ADDR
// if not x or not y then
10504: LD_VAR 0 10
10508: NOT
10509: PUSH
10510: LD_VAR 0 11
10514: NOT
10515: OR
10516: IFFALSE 10520
// exit ;
10518: GO 11553
// weapon := 0 ;
10520: LD_ADDR_VAR 0 18
10524: PUSH
10525: LD_INT 0
10527: ST_TO_ADDR
// fac_list := [ ] ;
10528: LD_ADDR_VAR 0 17
10532: PUSH
10533: EMPTY
10534: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10535: LD_ADDR_VAR 0 6
10539: PUSH
10540: LD_VAR 0 1
10544: PPUSH
10545: CALL_OW 274
10549: PPUSH
10550: LD_VAR 0 2
10554: PPUSH
10555: LD_INT 0
10557: PPUSH
10558: CALL 8124 0 3
10562: PPUSH
10563: LD_INT 30
10565: PUSH
10566: LD_INT 3
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PPUSH
10573: CALL_OW 72
10577: ST_TO_ADDR
// if not factories then
10578: LD_VAR 0 6
10582: NOT
10583: IFFALSE 10587
// exit ;
10585: GO 11553
// for i in factories do
10587: LD_ADDR_VAR 0 8
10591: PUSH
10592: LD_VAR 0 6
10596: PUSH
10597: FOR_IN
10598: IFFALSE 10623
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10600: LD_ADDR_VAR 0 17
10604: PUSH
10605: LD_VAR 0 17
10609: PUSH
10610: LD_VAR 0 8
10614: PPUSH
10615: CALL_OW 478
10619: UNION
10620: ST_TO_ADDR
10621: GO 10597
10623: POP
10624: POP
// if not fac_list then
10625: LD_VAR 0 17
10629: NOT
10630: IFFALSE 10634
// exit ;
10632: GO 11553
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10634: LD_ADDR_VAR 0 5
10638: PUSH
10639: LD_INT 4
10641: PUSH
10642: LD_INT 5
10644: PUSH
10645: LD_INT 9
10647: PUSH
10648: LD_INT 10
10650: PUSH
10651: LD_INT 6
10653: PUSH
10654: LD_INT 7
10656: PUSH
10657: LD_INT 11
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 27
10671: PUSH
10672: LD_INT 28
10674: PUSH
10675: LD_INT 26
10677: PUSH
10678: LD_INT 30
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 43
10689: PUSH
10690: LD_INT 44
10692: PUSH
10693: LD_INT 46
10695: PUSH
10696: LD_INT 45
10698: PUSH
10699: LD_INT 47
10701: PUSH
10702: LD_INT 49
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: LIST
10717: PUSH
10718: LD_VAR 0 12
10722: ARRAY
10723: ST_TO_ADDR
// list := list isect fac_list ;
10724: LD_ADDR_VAR 0 5
10728: PUSH
10729: LD_VAR 0 5
10733: PUSH
10734: LD_VAR 0 17
10738: ISECT
10739: ST_TO_ADDR
// if not list then
10740: LD_VAR 0 5
10744: NOT
10745: IFFALSE 10749
// exit ;
10747: GO 11553
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10749: LD_VAR 0 12
10753: PUSH
10754: LD_INT 3
10756: EQUAL
10757: PUSH
10758: LD_INT 49
10760: PUSH
10761: LD_VAR 0 5
10765: IN
10766: AND
10767: PUSH
10768: LD_INT 31
10770: PPUSH
10771: LD_VAR 0 16
10775: PPUSH
10776: CALL_OW 321
10780: PUSH
10781: LD_INT 2
10783: EQUAL
10784: AND
10785: IFFALSE 10845
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10787: LD_INT 22
10789: PUSH
10790: LD_VAR 0 16
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 35
10801: PUSH
10802: LD_INT 49
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 91
10811: PUSH
10812: LD_VAR 0 1
10816: PUSH
10817: LD_INT 10
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: LIST
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: PPUSH
10830: CALL_OW 69
10834: NOT
10835: IFFALSE 10845
// weapon := ru_time_lapser ;
10837: LD_ADDR_VAR 0 18
10841: PUSH
10842: LD_INT 49
10844: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10845: LD_VAR 0 12
10849: PUSH
10850: LD_INT 1
10852: PUSH
10853: LD_INT 2
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: IN
10860: PUSH
10861: LD_INT 11
10863: PUSH
10864: LD_VAR 0 5
10868: IN
10869: PUSH
10870: LD_INT 30
10872: PUSH
10873: LD_VAR 0 5
10877: IN
10878: OR
10879: AND
10880: PUSH
10881: LD_INT 6
10883: PPUSH
10884: LD_VAR 0 16
10888: PPUSH
10889: CALL_OW 321
10893: PUSH
10894: LD_INT 2
10896: EQUAL
10897: AND
10898: IFFALSE 11063
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10900: LD_INT 22
10902: PUSH
10903: LD_VAR 0 16
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 2
10914: PUSH
10915: LD_INT 35
10917: PUSH
10918: LD_INT 11
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 35
10927: PUSH
10928: LD_INT 30
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 91
10942: PUSH
10943: LD_VAR 0 1
10947: PUSH
10948: LD_INT 18
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: LIST
10960: PPUSH
10961: CALL_OW 69
10965: NOT
10966: PUSH
10967: LD_INT 22
10969: PUSH
10970: LD_VAR 0 16
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 2
10981: PUSH
10982: LD_INT 30
10984: PUSH
10985: LD_INT 32
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 30
10994: PUSH
10995: LD_INT 33
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 91
11009: PUSH
11010: LD_VAR 0 1
11014: PUSH
11015: LD_INT 12
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: PUSH
11028: EMPTY
11029: LIST
11030: PPUSH
11031: CALL_OW 69
11035: PUSH
11036: LD_INT 2
11038: GREATER
11039: AND
11040: IFFALSE 11063
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11042: LD_ADDR_VAR 0 18
11046: PUSH
11047: LD_INT 11
11049: PUSH
11050: LD_INT 30
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_VAR 0 12
11061: ARRAY
11062: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11063: LD_VAR 0 18
11067: NOT
11068: PUSH
11069: LD_INT 40
11071: PPUSH
11072: LD_VAR 0 16
11076: PPUSH
11077: CALL_OW 321
11081: PUSH
11082: LD_INT 2
11084: EQUAL
11085: AND
11086: PUSH
11087: LD_INT 7
11089: PUSH
11090: LD_VAR 0 5
11094: IN
11095: PUSH
11096: LD_INT 28
11098: PUSH
11099: LD_VAR 0 5
11103: IN
11104: OR
11105: PUSH
11106: LD_INT 45
11108: PUSH
11109: LD_VAR 0 5
11113: IN
11114: OR
11115: AND
11116: IFFALSE 11370
// begin hex := GetHexInfo ( x , y ) ;
11118: LD_ADDR_VAR 0 4
11122: PUSH
11123: LD_VAR 0 10
11127: PPUSH
11128: LD_VAR 0 11
11132: PPUSH
11133: CALL_OW 546
11137: ST_TO_ADDR
// if hex [ 1 ] then
11138: LD_VAR 0 4
11142: PUSH
11143: LD_INT 1
11145: ARRAY
11146: IFFALSE 11150
// exit ;
11148: GO 11553
// height := hex [ 2 ] ;
11150: LD_ADDR_VAR 0 15
11154: PUSH
11155: LD_VAR 0 4
11159: PUSH
11160: LD_INT 2
11162: ARRAY
11163: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11164: LD_ADDR_VAR 0 14
11168: PUSH
11169: LD_INT 0
11171: PUSH
11172: LD_INT 2
11174: PUSH
11175: LD_INT 3
11177: PUSH
11178: LD_INT 5
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: ST_TO_ADDR
// for i in tmp do
11187: LD_ADDR_VAR 0 8
11191: PUSH
11192: LD_VAR 0 14
11196: PUSH
11197: FOR_IN
11198: IFFALSE 11368
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11200: LD_ADDR_VAR 0 9
11204: PUSH
11205: LD_VAR 0 10
11209: PPUSH
11210: LD_VAR 0 8
11214: PPUSH
11215: LD_INT 5
11217: PPUSH
11218: CALL_OW 272
11222: PUSH
11223: LD_VAR 0 11
11227: PPUSH
11228: LD_VAR 0 8
11232: PPUSH
11233: LD_INT 5
11235: PPUSH
11236: CALL_OW 273
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11245: LD_VAR 0 9
11249: PUSH
11250: LD_INT 1
11252: ARRAY
11253: PPUSH
11254: LD_VAR 0 9
11258: PUSH
11259: LD_INT 2
11261: ARRAY
11262: PPUSH
11263: CALL_OW 488
11267: IFFALSE 11366
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11269: LD_ADDR_VAR 0 4
11273: PUSH
11274: LD_VAR 0 9
11278: PUSH
11279: LD_INT 1
11281: ARRAY
11282: PPUSH
11283: LD_VAR 0 9
11287: PUSH
11288: LD_INT 2
11290: ARRAY
11291: PPUSH
11292: CALL_OW 546
11296: ST_TO_ADDR
// if hex [ 1 ] then
11297: LD_VAR 0 4
11301: PUSH
11302: LD_INT 1
11304: ARRAY
11305: IFFALSE 11309
// continue ;
11307: GO 11197
// h := hex [ 2 ] ;
11309: LD_ADDR_VAR 0 13
11313: PUSH
11314: LD_VAR 0 4
11318: PUSH
11319: LD_INT 2
11321: ARRAY
11322: ST_TO_ADDR
// if h + 7 < height then
11323: LD_VAR 0 13
11327: PUSH
11328: LD_INT 7
11330: PLUS
11331: PUSH
11332: LD_VAR 0 15
11336: LESS
11337: IFFALSE 11366
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11339: LD_ADDR_VAR 0 18
11343: PUSH
11344: LD_INT 7
11346: PUSH
11347: LD_INT 28
11349: PUSH
11350: LD_INT 45
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: PUSH
11358: LD_VAR 0 12
11362: ARRAY
11363: ST_TO_ADDR
// break ;
11364: GO 11368
// end ; end ; end ;
11366: GO 11197
11368: POP
11369: POP
// end ; if not weapon then
11370: LD_VAR 0 18
11374: NOT
11375: IFFALSE 11435
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11377: LD_ADDR_VAR 0 5
11381: PUSH
11382: LD_VAR 0 5
11386: PUSH
11387: LD_INT 11
11389: PUSH
11390: LD_INT 30
11392: PUSH
11393: LD_INT 49
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: DIFF
11401: ST_TO_ADDR
// if not list then
11402: LD_VAR 0 5
11406: NOT
11407: IFFALSE 11411
// exit ;
11409: GO 11553
// weapon := list [ rand ( 1 , list ) ] ;
11411: LD_ADDR_VAR 0 18
11415: PUSH
11416: LD_VAR 0 5
11420: PUSH
11421: LD_INT 1
11423: PPUSH
11424: LD_VAR 0 5
11428: PPUSH
11429: CALL_OW 12
11433: ARRAY
11434: ST_TO_ADDR
// end ; if weapon then
11435: LD_VAR 0 18
11439: IFFALSE 11553
// begin tmp := CostOfWeapon ( weapon ) ;
11441: LD_ADDR_VAR 0 14
11445: PUSH
11446: LD_VAR 0 18
11450: PPUSH
11451: CALL_OW 451
11455: ST_TO_ADDR
// j := GetBase ( tower ) ;
11456: LD_ADDR_VAR 0 9
11460: PUSH
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL_OW 274
11470: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11471: LD_VAR 0 9
11475: PPUSH
11476: LD_INT 1
11478: PPUSH
11479: CALL_OW 275
11483: PUSH
11484: LD_VAR 0 14
11488: PUSH
11489: LD_INT 1
11491: ARRAY
11492: GREATEREQUAL
11493: PUSH
11494: LD_VAR 0 9
11498: PPUSH
11499: LD_INT 2
11501: PPUSH
11502: CALL_OW 275
11506: PUSH
11507: LD_VAR 0 14
11511: PUSH
11512: LD_INT 2
11514: ARRAY
11515: GREATEREQUAL
11516: AND
11517: PUSH
11518: LD_VAR 0 9
11522: PPUSH
11523: LD_INT 3
11525: PPUSH
11526: CALL_OW 275
11530: PUSH
11531: LD_VAR 0 14
11535: PUSH
11536: LD_INT 3
11538: ARRAY
11539: GREATEREQUAL
11540: AND
11541: IFFALSE 11553
// result := weapon ;
11543: LD_ADDR_VAR 0 3
11547: PUSH
11548: LD_VAR 0 18
11552: ST_TO_ADDR
// end ; end ;
11553: LD_VAR 0 3
11557: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11558: LD_INT 0
11560: PPUSH
11561: PPUSH
// result := true ;
11562: LD_ADDR_VAR 0 3
11566: PUSH
11567: LD_INT 1
11569: ST_TO_ADDR
// if array1 = array2 then
11570: LD_VAR 0 1
11574: PUSH
11575: LD_VAR 0 2
11579: EQUAL
11580: IFFALSE 11640
// begin for i = 1 to array1 do
11582: LD_ADDR_VAR 0 4
11586: PUSH
11587: DOUBLE
11588: LD_INT 1
11590: DEC
11591: ST_TO_ADDR
11592: LD_VAR 0 1
11596: PUSH
11597: FOR_TO
11598: IFFALSE 11636
// if array1 [ i ] <> array2 [ i ] then
11600: LD_VAR 0 1
11604: PUSH
11605: LD_VAR 0 4
11609: ARRAY
11610: PUSH
11611: LD_VAR 0 2
11615: PUSH
11616: LD_VAR 0 4
11620: ARRAY
11621: NONEQUAL
11622: IFFALSE 11634
// begin result := false ;
11624: LD_ADDR_VAR 0 3
11628: PUSH
11629: LD_INT 0
11631: ST_TO_ADDR
// break ;
11632: GO 11636
// end ;
11634: GO 11597
11636: POP
11637: POP
// end else
11638: GO 11648
// result := false ;
11640: LD_ADDR_VAR 0 3
11644: PUSH
11645: LD_INT 0
11647: ST_TO_ADDR
// end ;
11648: LD_VAR 0 3
11652: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11653: LD_INT 0
11655: PPUSH
11656: PPUSH
// if not array1 or not array2 then
11657: LD_VAR 0 1
11661: NOT
11662: PUSH
11663: LD_VAR 0 2
11667: NOT
11668: OR
11669: IFFALSE 11673
// exit ;
11671: GO 11737
// result := true ;
11673: LD_ADDR_VAR 0 3
11677: PUSH
11678: LD_INT 1
11680: ST_TO_ADDR
// for i = 1 to array1 do
11681: LD_ADDR_VAR 0 4
11685: PUSH
11686: DOUBLE
11687: LD_INT 1
11689: DEC
11690: ST_TO_ADDR
11691: LD_VAR 0 1
11695: PUSH
11696: FOR_TO
11697: IFFALSE 11735
// if array1 [ i ] <> array2 [ i ] then
11699: LD_VAR 0 1
11703: PUSH
11704: LD_VAR 0 4
11708: ARRAY
11709: PUSH
11710: LD_VAR 0 2
11714: PUSH
11715: LD_VAR 0 4
11719: ARRAY
11720: NONEQUAL
11721: IFFALSE 11733
// begin result := false ;
11723: LD_ADDR_VAR 0 3
11727: PUSH
11728: LD_INT 0
11730: ST_TO_ADDR
// break ;
11731: GO 11735
// end ;
11733: GO 11696
11735: POP
11736: POP
// end ;
11737: LD_VAR 0 3
11741: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11742: LD_INT 0
11744: PPUSH
11745: PPUSH
11746: PPUSH
// pom := GetBase ( fac ) ;
11747: LD_ADDR_VAR 0 5
11751: PUSH
11752: LD_VAR 0 1
11756: PPUSH
11757: CALL_OW 274
11761: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11762: LD_ADDR_VAR 0 4
11766: PUSH
11767: LD_VAR 0 2
11771: PUSH
11772: LD_INT 1
11774: ARRAY
11775: PPUSH
11776: LD_VAR 0 2
11780: PUSH
11781: LD_INT 2
11783: ARRAY
11784: PPUSH
11785: LD_VAR 0 2
11789: PUSH
11790: LD_INT 3
11792: ARRAY
11793: PPUSH
11794: LD_VAR 0 2
11798: PUSH
11799: LD_INT 4
11801: ARRAY
11802: PPUSH
11803: CALL_OW 449
11807: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11808: LD_ADDR_VAR 0 3
11812: PUSH
11813: LD_VAR 0 5
11817: PPUSH
11818: LD_INT 1
11820: PPUSH
11821: CALL_OW 275
11825: PUSH
11826: LD_VAR 0 4
11830: PUSH
11831: LD_INT 1
11833: ARRAY
11834: GREATEREQUAL
11835: PUSH
11836: LD_VAR 0 5
11840: PPUSH
11841: LD_INT 2
11843: PPUSH
11844: CALL_OW 275
11848: PUSH
11849: LD_VAR 0 4
11853: PUSH
11854: LD_INT 2
11856: ARRAY
11857: GREATEREQUAL
11858: AND
11859: PUSH
11860: LD_VAR 0 5
11864: PPUSH
11865: LD_INT 3
11867: PPUSH
11868: CALL_OW 275
11872: PUSH
11873: LD_VAR 0 4
11877: PUSH
11878: LD_INT 3
11880: ARRAY
11881: GREATEREQUAL
11882: AND
11883: ST_TO_ADDR
// end ;
11884: LD_VAR 0 3
11888: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11889: LD_INT 0
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
// pom := GetBase ( building ) ;
11895: LD_ADDR_VAR 0 3
11899: PUSH
11900: LD_VAR 0 1
11904: PPUSH
11905: CALL_OW 274
11909: ST_TO_ADDR
// if not pom then
11910: LD_VAR 0 3
11914: NOT
11915: IFFALSE 11919
// exit ;
11917: GO 12089
// btype := GetBType ( building ) ;
11919: LD_ADDR_VAR 0 5
11923: PUSH
11924: LD_VAR 0 1
11928: PPUSH
11929: CALL_OW 266
11933: ST_TO_ADDR
// if btype = b_armoury then
11934: LD_VAR 0 5
11938: PUSH
11939: LD_INT 4
11941: EQUAL
11942: IFFALSE 11952
// btype := b_barracks ;
11944: LD_ADDR_VAR 0 5
11948: PUSH
11949: LD_INT 5
11951: ST_TO_ADDR
// if btype = b_depot then
11952: LD_VAR 0 5
11956: PUSH
11957: LD_INT 0
11959: EQUAL
11960: IFFALSE 11970
// btype := b_warehouse ;
11962: LD_ADDR_VAR 0 5
11966: PUSH
11967: LD_INT 1
11969: ST_TO_ADDR
// if btype = b_workshop then
11970: LD_VAR 0 5
11974: PUSH
11975: LD_INT 2
11977: EQUAL
11978: IFFALSE 11988
// btype := b_factory ;
11980: LD_ADDR_VAR 0 5
11984: PUSH
11985: LD_INT 3
11987: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11988: LD_ADDR_VAR 0 4
11992: PUSH
11993: LD_VAR 0 5
11997: PPUSH
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 248
12007: PPUSH
12008: CALL_OW 450
12012: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12013: LD_ADDR_VAR 0 2
12017: PUSH
12018: LD_VAR 0 3
12022: PPUSH
12023: LD_INT 1
12025: PPUSH
12026: CALL_OW 275
12030: PUSH
12031: LD_VAR 0 4
12035: PUSH
12036: LD_INT 1
12038: ARRAY
12039: GREATEREQUAL
12040: PUSH
12041: LD_VAR 0 3
12045: PPUSH
12046: LD_INT 2
12048: PPUSH
12049: CALL_OW 275
12053: PUSH
12054: LD_VAR 0 4
12058: PUSH
12059: LD_INT 2
12061: ARRAY
12062: GREATEREQUAL
12063: AND
12064: PUSH
12065: LD_VAR 0 3
12069: PPUSH
12070: LD_INT 3
12072: PPUSH
12073: CALL_OW 275
12077: PUSH
12078: LD_VAR 0 4
12082: PUSH
12083: LD_INT 3
12085: ARRAY
12086: GREATEREQUAL
12087: AND
12088: ST_TO_ADDR
// end ;
12089: LD_VAR 0 2
12093: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12094: LD_INT 0
12096: PPUSH
12097: PPUSH
12098: PPUSH
// pom := GetBase ( building ) ;
12099: LD_ADDR_VAR 0 4
12103: PUSH
12104: LD_VAR 0 1
12108: PPUSH
12109: CALL_OW 274
12113: ST_TO_ADDR
// if not pom then
12114: LD_VAR 0 4
12118: NOT
12119: IFFALSE 12123
// exit ;
12121: GO 12224
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12123: LD_ADDR_VAR 0 5
12127: PUSH
12128: LD_VAR 0 2
12132: PPUSH
12133: LD_VAR 0 1
12137: PPUSH
12138: CALL_OW 248
12142: PPUSH
12143: CALL_OW 450
12147: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12148: LD_ADDR_VAR 0 3
12152: PUSH
12153: LD_VAR 0 4
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: CALL_OW 275
12165: PUSH
12166: LD_VAR 0 5
12170: PUSH
12171: LD_INT 1
12173: ARRAY
12174: GREATEREQUAL
12175: PUSH
12176: LD_VAR 0 4
12180: PPUSH
12181: LD_INT 2
12183: PPUSH
12184: CALL_OW 275
12188: PUSH
12189: LD_VAR 0 5
12193: PUSH
12194: LD_INT 2
12196: ARRAY
12197: GREATEREQUAL
12198: AND
12199: PUSH
12200: LD_VAR 0 4
12204: PPUSH
12205: LD_INT 3
12207: PPUSH
12208: CALL_OW 275
12212: PUSH
12213: LD_VAR 0 5
12217: PUSH
12218: LD_INT 3
12220: ARRAY
12221: GREATEREQUAL
12222: AND
12223: ST_TO_ADDR
// end ;
12224: LD_VAR 0 3
12228: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12229: LD_INT 0
12231: PPUSH
12232: PPUSH
12233: PPUSH
12234: PPUSH
12235: PPUSH
12236: PPUSH
12237: PPUSH
12238: PPUSH
12239: PPUSH
12240: PPUSH
12241: PPUSH
// result := false ;
12242: LD_ADDR_VAR 0 8
12246: PUSH
12247: LD_INT 0
12249: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12250: LD_VAR 0 5
12254: NOT
12255: PUSH
12256: LD_VAR 0 1
12260: NOT
12261: OR
12262: PUSH
12263: LD_VAR 0 2
12267: NOT
12268: OR
12269: PUSH
12270: LD_VAR 0 3
12274: NOT
12275: OR
12276: IFFALSE 12280
// exit ;
12278: GO 13094
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12280: LD_ADDR_VAR 0 14
12284: PUSH
12285: LD_VAR 0 1
12289: PPUSH
12290: LD_VAR 0 2
12294: PPUSH
12295: LD_VAR 0 3
12299: PPUSH
12300: LD_VAR 0 4
12304: PPUSH
12305: LD_VAR 0 5
12309: PUSH
12310: LD_INT 1
12312: ARRAY
12313: PPUSH
12314: CALL_OW 248
12318: PPUSH
12319: LD_INT 0
12321: PPUSH
12322: CALL 14327 0 6
12326: ST_TO_ADDR
// if not hexes then
12327: LD_VAR 0 14
12331: NOT
12332: IFFALSE 12336
// exit ;
12334: GO 13094
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12336: LD_ADDR_VAR 0 17
12340: PUSH
12341: LD_VAR 0 5
12345: PPUSH
12346: LD_INT 22
12348: PUSH
12349: LD_VAR 0 13
12353: PPUSH
12354: CALL_OW 255
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: LD_INT 2
12365: PUSH
12366: LD_INT 30
12368: PUSH
12369: LD_INT 0
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PUSH
12376: LD_INT 30
12378: PUSH
12379: LD_INT 1
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PPUSH
12395: CALL_OW 72
12399: ST_TO_ADDR
// for i = 1 to hexes do
12400: LD_ADDR_VAR 0 9
12404: PUSH
12405: DOUBLE
12406: LD_INT 1
12408: DEC
12409: ST_TO_ADDR
12410: LD_VAR 0 14
12414: PUSH
12415: FOR_TO
12416: IFFALSE 13092
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12418: LD_ADDR_VAR 0 13
12422: PUSH
12423: LD_VAR 0 14
12427: PUSH
12428: LD_VAR 0 9
12432: ARRAY
12433: PUSH
12434: LD_INT 1
12436: ARRAY
12437: PPUSH
12438: LD_VAR 0 14
12442: PUSH
12443: LD_VAR 0 9
12447: ARRAY
12448: PUSH
12449: LD_INT 2
12451: ARRAY
12452: PPUSH
12453: CALL_OW 428
12457: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12458: LD_VAR 0 14
12462: PUSH
12463: LD_VAR 0 9
12467: ARRAY
12468: PUSH
12469: LD_INT 1
12471: ARRAY
12472: PPUSH
12473: LD_VAR 0 14
12477: PUSH
12478: LD_VAR 0 9
12482: ARRAY
12483: PUSH
12484: LD_INT 2
12486: ARRAY
12487: PPUSH
12488: CALL_OW 351
12492: PUSH
12493: LD_VAR 0 14
12497: PUSH
12498: LD_VAR 0 9
12502: ARRAY
12503: PUSH
12504: LD_INT 1
12506: ARRAY
12507: PPUSH
12508: LD_VAR 0 14
12512: PUSH
12513: LD_VAR 0 9
12517: ARRAY
12518: PUSH
12519: LD_INT 2
12521: ARRAY
12522: PPUSH
12523: CALL_OW 488
12527: NOT
12528: OR
12529: PUSH
12530: LD_VAR 0 13
12534: PPUSH
12535: CALL_OW 247
12539: PUSH
12540: LD_INT 3
12542: EQUAL
12543: OR
12544: IFFALSE 12550
// exit ;
12546: POP
12547: POP
12548: GO 13094
// if not tmp then
12550: LD_VAR 0 13
12554: NOT
12555: IFFALSE 12559
// continue ;
12557: GO 12415
// result := true ;
12559: LD_ADDR_VAR 0 8
12563: PUSH
12564: LD_INT 1
12566: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12567: LD_VAR 0 6
12571: PUSH
12572: LD_VAR 0 13
12576: PPUSH
12577: CALL_OW 247
12581: PUSH
12582: LD_INT 2
12584: EQUAL
12585: AND
12586: PUSH
12587: LD_VAR 0 13
12591: PPUSH
12592: CALL_OW 263
12596: PUSH
12597: LD_INT 1
12599: EQUAL
12600: AND
12601: IFFALSE 12765
// begin if IsDrivenBy ( tmp ) then
12603: LD_VAR 0 13
12607: PPUSH
12608: CALL_OW 311
12612: IFFALSE 12616
// continue ;
12614: GO 12415
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12616: LD_VAR 0 6
12620: PPUSH
12621: LD_INT 3
12623: PUSH
12624: LD_INT 60
12626: PUSH
12627: EMPTY
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: LD_INT 3
12636: PUSH
12637: LD_INT 55
12639: PUSH
12640: EMPTY
12641: LIST
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PPUSH
12651: CALL_OW 72
12655: IFFALSE 12763
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12657: LD_ADDR_VAR 0 18
12661: PUSH
12662: LD_VAR 0 6
12666: PPUSH
12667: LD_INT 3
12669: PUSH
12670: LD_INT 60
12672: PUSH
12673: EMPTY
12674: LIST
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 3
12682: PUSH
12683: LD_INT 55
12685: PUSH
12686: EMPTY
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PPUSH
12697: CALL_OW 72
12701: PUSH
12702: LD_INT 1
12704: ARRAY
12705: ST_TO_ADDR
// if IsInUnit ( driver ) then
12706: LD_VAR 0 18
12710: PPUSH
12711: CALL_OW 310
12715: IFFALSE 12726
// ComExit ( driver ) ;
12717: LD_VAR 0 18
12721: PPUSH
12722: CALL 38106 0 1
// AddComEnterUnit ( driver , tmp ) ;
12726: LD_VAR 0 18
12730: PPUSH
12731: LD_VAR 0 13
12735: PPUSH
12736: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12740: LD_VAR 0 18
12744: PPUSH
12745: LD_VAR 0 7
12749: PPUSH
12750: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12754: LD_VAR 0 18
12758: PPUSH
12759: CALL_OW 181
// end ; continue ;
12763: GO 12415
// end ; if not cleaners or not tmp in cleaners then
12765: LD_VAR 0 6
12769: NOT
12770: PUSH
12771: LD_VAR 0 13
12775: PUSH
12776: LD_VAR 0 6
12780: IN
12781: NOT
12782: OR
12783: IFFALSE 13090
// begin if dep then
12785: LD_VAR 0 17
12789: IFFALSE 12925
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12791: LD_ADDR_VAR 0 16
12795: PUSH
12796: LD_VAR 0 17
12800: PUSH
12801: LD_INT 1
12803: ARRAY
12804: PPUSH
12805: CALL_OW 250
12809: PPUSH
12810: LD_VAR 0 17
12814: PUSH
12815: LD_INT 1
12817: ARRAY
12818: PPUSH
12819: CALL_OW 254
12823: PPUSH
12824: LD_INT 5
12826: PPUSH
12827: CALL_OW 272
12831: PUSH
12832: LD_VAR 0 17
12836: PUSH
12837: LD_INT 1
12839: ARRAY
12840: PPUSH
12841: CALL_OW 251
12845: PPUSH
12846: LD_VAR 0 17
12850: PUSH
12851: LD_INT 1
12853: ARRAY
12854: PPUSH
12855: CALL_OW 254
12859: PPUSH
12860: LD_INT 5
12862: PPUSH
12863: CALL_OW 273
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12872: LD_VAR 0 16
12876: PUSH
12877: LD_INT 1
12879: ARRAY
12880: PPUSH
12881: LD_VAR 0 16
12885: PUSH
12886: LD_INT 2
12888: ARRAY
12889: PPUSH
12890: CALL_OW 488
12894: IFFALSE 12925
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12896: LD_VAR 0 13
12900: PPUSH
12901: LD_VAR 0 16
12905: PUSH
12906: LD_INT 1
12908: ARRAY
12909: PPUSH
12910: LD_VAR 0 16
12914: PUSH
12915: LD_INT 2
12917: ARRAY
12918: PPUSH
12919: CALL_OW 111
// continue ;
12923: GO 12415
// end ; end ; r := GetDir ( tmp ) ;
12925: LD_ADDR_VAR 0 15
12929: PUSH
12930: LD_VAR 0 13
12934: PPUSH
12935: CALL_OW 254
12939: ST_TO_ADDR
// if r = 5 then
12940: LD_VAR 0 15
12944: PUSH
12945: LD_INT 5
12947: EQUAL
12948: IFFALSE 12958
// r := 0 ;
12950: LD_ADDR_VAR 0 15
12954: PUSH
12955: LD_INT 0
12957: ST_TO_ADDR
// for j = r to 5 do
12958: LD_ADDR_VAR 0 10
12962: PUSH
12963: DOUBLE
12964: LD_VAR 0 15
12968: DEC
12969: ST_TO_ADDR
12970: LD_INT 5
12972: PUSH
12973: FOR_TO
12974: IFFALSE 13088
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12976: LD_ADDR_VAR 0 11
12980: PUSH
12981: LD_VAR 0 13
12985: PPUSH
12986: CALL_OW 250
12990: PPUSH
12991: LD_VAR 0 10
12995: PPUSH
12996: LD_INT 2
12998: PPUSH
12999: CALL_OW 272
13003: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13004: LD_ADDR_VAR 0 12
13008: PUSH
13009: LD_VAR 0 13
13013: PPUSH
13014: CALL_OW 251
13018: PPUSH
13019: LD_VAR 0 10
13023: PPUSH
13024: LD_INT 2
13026: PPUSH
13027: CALL_OW 273
13031: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13032: LD_VAR 0 11
13036: PPUSH
13037: LD_VAR 0 12
13041: PPUSH
13042: CALL_OW 488
13046: PUSH
13047: LD_VAR 0 11
13051: PPUSH
13052: LD_VAR 0 12
13056: PPUSH
13057: CALL_OW 428
13061: NOT
13062: AND
13063: IFFALSE 13086
// begin ComMoveXY ( tmp , _x , _y ) ;
13065: LD_VAR 0 13
13069: PPUSH
13070: LD_VAR 0 11
13074: PPUSH
13075: LD_VAR 0 12
13079: PPUSH
13080: CALL_OW 111
// break ;
13084: GO 13088
// end ; end ;
13086: GO 12973
13088: POP
13089: POP
// end ; end ;
13090: GO 12415
13092: POP
13093: POP
// end ;
13094: LD_VAR 0 8
13098: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13099: LD_INT 0
13101: PPUSH
// result := true ;
13102: LD_ADDR_VAR 0 3
13106: PUSH
13107: LD_INT 1
13109: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13110: LD_VAR 0 2
13114: PUSH
13115: LD_INT 24
13117: DOUBLE
13118: EQUAL
13119: IFTRUE 13129
13121: LD_INT 33
13123: DOUBLE
13124: EQUAL
13125: IFTRUE 13129
13127: GO 13154
13129: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13130: LD_ADDR_VAR 0 3
13134: PUSH
13135: LD_INT 32
13137: PPUSH
13138: LD_VAR 0 1
13142: PPUSH
13143: CALL_OW 321
13147: PUSH
13148: LD_INT 2
13150: EQUAL
13151: ST_TO_ADDR
13152: GO 13470
13154: LD_INT 20
13156: DOUBLE
13157: EQUAL
13158: IFTRUE 13162
13160: GO 13187
13162: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13163: LD_ADDR_VAR 0 3
13167: PUSH
13168: LD_INT 6
13170: PPUSH
13171: LD_VAR 0 1
13175: PPUSH
13176: CALL_OW 321
13180: PUSH
13181: LD_INT 2
13183: EQUAL
13184: ST_TO_ADDR
13185: GO 13470
13187: LD_INT 22
13189: DOUBLE
13190: EQUAL
13191: IFTRUE 13201
13193: LD_INT 36
13195: DOUBLE
13196: EQUAL
13197: IFTRUE 13201
13199: GO 13226
13201: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13202: LD_ADDR_VAR 0 3
13206: PUSH
13207: LD_INT 15
13209: PPUSH
13210: LD_VAR 0 1
13214: PPUSH
13215: CALL_OW 321
13219: PUSH
13220: LD_INT 2
13222: EQUAL
13223: ST_TO_ADDR
13224: GO 13470
13226: LD_INT 30
13228: DOUBLE
13229: EQUAL
13230: IFTRUE 13234
13232: GO 13259
13234: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13235: LD_ADDR_VAR 0 3
13239: PUSH
13240: LD_INT 20
13242: PPUSH
13243: LD_VAR 0 1
13247: PPUSH
13248: CALL_OW 321
13252: PUSH
13253: LD_INT 2
13255: EQUAL
13256: ST_TO_ADDR
13257: GO 13470
13259: LD_INT 28
13261: DOUBLE
13262: EQUAL
13263: IFTRUE 13273
13265: LD_INT 21
13267: DOUBLE
13268: EQUAL
13269: IFTRUE 13273
13271: GO 13298
13273: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13274: LD_ADDR_VAR 0 3
13278: PUSH
13279: LD_INT 21
13281: PPUSH
13282: LD_VAR 0 1
13286: PPUSH
13287: CALL_OW 321
13291: PUSH
13292: LD_INT 2
13294: EQUAL
13295: ST_TO_ADDR
13296: GO 13470
13298: LD_INT 16
13300: DOUBLE
13301: EQUAL
13302: IFTRUE 13306
13304: GO 13331
13306: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13307: LD_ADDR_VAR 0 3
13311: PUSH
13312: LD_INT 84
13314: PPUSH
13315: LD_VAR 0 1
13319: PPUSH
13320: CALL_OW 321
13324: PUSH
13325: LD_INT 2
13327: EQUAL
13328: ST_TO_ADDR
13329: GO 13470
13331: LD_INT 19
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13345
13337: LD_INT 23
13339: DOUBLE
13340: EQUAL
13341: IFTRUE 13345
13343: GO 13370
13345: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13346: LD_ADDR_VAR 0 3
13350: PUSH
13351: LD_INT 83
13353: PPUSH
13354: LD_VAR 0 1
13358: PPUSH
13359: CALL_OW 321
13363: PUSH
13364: LD_INT 2
13366: EQUAL
13367: ST_TO_ADDR
13368: GO 13470
13370: LD_INT 17
13372: DOUBLE
13373: EQUAL
13374: IFTRUE 13378
13376: GO 13403
13378: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13379: LD_ADDR_VAR 0 3
13383: PUSH
13384: LD_INT 39
13386: PPUSH
13387: LD_VAR 0 1
13391: PPUSH
13392: CALL_OW 321
13396: PUSH
13397: LD_INT 2
13399: EQUAL
13400: ST_TO_ADDR
13401: GO 13470
13403: LD_INT 18
13405: DOUBLE
13406: EQUAL
13407: IFTRUE 13411
13409: GO 13436
13411: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13412: LD_ADDR_VAR 0 3
13416: PUSH
13417: LD_INT 40
13419: PPUSH
13420: LD_VAR 0 1
13424: PPUSH
13425: CALL_OW 321
13429: PUSH
13430: LD_INT 2
13432: EQUAL
13433: ST_TO_ADDR
13434: GO 13470
13436: LD_INT 27
13438: DOUBLE
13439: EQUAL
13440: IFTRUE 13444
13442: GO 13469
13444: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13445: LD_ADDR_VAR 0 3
13449: PUSH
13450: LD_INT 35
13452: PPUSH
13453: LD_VAR 0 1
13457: PPUSH
13458: CALL_OW 321
13462: PUSH
13463: LD_INT 2
13465: EQUAL
13466: ST_TO_ADDR
13467: GO 13470
13469: POP
// end ;
13470: LD_VAR 0 3
13474: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13475: LD_INT 0
13477: PPUSH
13478: PPUSH
13479: PPUSH
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
13486: PPUSH
13487: PPUSH
// result := false ;
13488: LD_ADDR_VAR 0 6
13492: PUSH
13493: LD_INT 0
13495: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13496: LD_VAR 0 1
13500: NOT
13501: PUSH
13502: LD_VAR 0 1
13506: PPUSH
13507: CALL_OW 266
13511: PUSH
13512: LD_INT 0
13514: PUSH
13515: LD_INT 1
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: IN
13522: NOT
13523: OR
13524: PUSH
13525: LD_VAR 0 2
13529: NOT
13530: OR
13531: PUSH
13532: LD_VAR 0 5
13536: PUSH
13537: LD_INT 0
13539: PUSH
13540: LD_INT 1
13542: PUSH
13543: LD_INT 2
13545: PUSH
13546: LD_INT 3
13548: PUSH
13549: LD_INT 4
13551: PUSH
13552: LD_INT 5
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: IN
13563: NOT
13564: OR
13565: PUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: LD_VAR 0 4
13575: PPUSH
13576: CALL_OW 488
13580: NOT
13581: OR
13582: IFFALSE 13586
// exit ;
13584: GO 14322
// side := GetSide ( depot ) ;
13586: LD_ADDR_VAR 0 9
13590: PUSH
13591: LD_VAR 0 1
13595: PPUSH
13596: CALL_OW 255
13600: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13601: LD_VAR 0 9
13605: PPUSH
13606: LD_VAR 0 2
13610: PPUSH
13611: CALL 13099 0 2
13615: NOT
13616: IFFALSE 13620
// exit ;
13618: GO 14322
// pom := GetBase ( depot ) ;
13620: LD_ADDR_VAR 0 10
13624: PUSH
13625: LD_VAR 0 1
13629: PPUSH
13630: CALL_OW 274
13634: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13635: LD_ADDR_VAR 0 11
13639: PUSH
13640: LD_VAR 0 2
13644: PPUSH
13645: LD_VAR 0 1
13649: PPUSH
13650: CALL_OW 248
13654: PPUSH
13655: CALL_OW 450
13659: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13660: LD_VAR 0 10
13664: PPUSH
13665: LD_INT 1
13667: PPUSH
13668: CALL_OW 275
13672: PUSH
13673: LD_VAR 0 11
13677: PUSH
13678: LD_INT 1
13680: ARRAY
13681: GREATEREQUAL
13682: PUSH
13683: LD_VAR 0 10
13687: PPUSH
13688: LD_INT 2
13690: PPUSH
13691: CALL_OW 275
13695: PUSH
13696: LD_VAR 0 11
13700: PUSH
13701: LD_INT 2
13703: ARRAY
13704: GREATEREQUAL
13705: AND
13706: PUSH
13707: LD_VAR 0 10
13711: PPUSH
13712: LD_INT 3
13714: PPUSH
13715: CALL_OW 275
13719: PUSH
13720: LD_VAR 0 11
13724: PUSH
13725: LD_INT 3
13727: ARRAY
13728: GREATEREQUAL
13729: AND
13730: NOT
13731: IFFALSE 13735
// exit ;
13733: GO 14322
// if GetBType ( depot ) = b_depot then
13735: LD_VAR 0 1
13739: PPUSH
13740: CALL_OW 266
13744: PUSH
13745: LD_INT 0
13747: EQUAL
13748: IFFALSE 13760
// dist := 28 else
13750: LD_ADDR_VAR 0 14
13754: PUSH
13755: LD_INT 28
13757: ST_TO_ADDR
13758: GO 13768
// dist := 36 ;
13760: LD_ADDR_VAR 0 14
13764: PUSH
13765: LD_INT 36
13767: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13768: LD_VAR 0 1
13772: PPUSH
13773: LD_VAR 0 3
13777: PPUSH
13778: LD_VAR 0 4
13782: PPUSH
13783: CALL_OW 297
13787: PUSH
13788: LD_VAR 0 14
13792: GREATER
13793: IFFALSE 13797
// exit ;
13795: GO 14322
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13797: LD_ADDR_VAR 0 12
13801: PUSH
13802: LD_VAR 0 2
13806: PPUSH
13807: LD_VAR 0 3
13811: PPUSH
13812: LD_VAR 0 4
13816: PPUSH
13817: LD_VAR 0 5
13821: PPUSH
13822: LD_VAR 0 1
13826: PPUSH
13827: CALL_OW 248
13831: PPUSH
13832: LD_INT 0
13834: PPUSH
13835: CALL 14327 0 6
13839: ST_TO_ADDR
// if not hexes then
13840: LD_VAR 0 12
13844: NOT
13845: IFFALSE 13849
// exit ;
13847: GO 14322
// hex := GetHexInfo ( x , y ) ;
13849: LD_ADDR_VAR 0 15
13853: PUSH
13854: LD_VAR 0 3
13858: PPUSH
13859: LD_VAR 0 4
13863: PPUSH
13864: CALL_OW 546
13868: ST_TO_ADDR
// if hex [ 1 ] then
13869: LD_VAR 0 15
13873: PUSH
13874: LD_INT 1
13876: ARRAY
13877: IFFALSE 13881
// exit ;
13879: GO 14322
// height := hex [ 2 ] ;
13881: LD_ADDR_VAR 0 13
13885: PUSH
13886: LD_VAR 0 15
13890: PUSH
13891: LD_INT 2
13893: ARRAY
13894: ST_TO_ADDR
// for i = 1 to hexes do
13895: LD_ADDR_VAR 0 7
13899: PUSH
13900: DOUBLE
13901: LD_INT 1
13903: DEC
13904: ST_TO_ADDR
13905: LD_VAR 0 12
13909: PUSH
13910: FOR_TO
13911: IFFALSE 14241
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13913: LD_VAR 0 12
13917: PUSH
13918: LD_VAR 0 7
13922: ARRAY
13923: PUSH
13924: LD_INT 1
13926: ARRAY
13927: PPUSH
13928: LD_VAR 0 12
13932: PUSH
13933: LD_VAR 0 7
13937: ARRAY
13938: PUSH
13939: LD_INT 2
13941: ARRAY
13942: PPUSH
13943: CALL_OW 488
13947: NOT
13948: PUSH
13949: LD_VAR 0 12
13953: PUSH
13954: LD_VAR 0 7
13958: ARRAY
13959: PUSH
13960: LD_INT 1
13962: ARRAY
13963: PPUSH
13964: LD_VAR 0 12
13968: PUSH
13969: LD_VAR 0 7
13973: ARRAY
13974: PUSH
13975: LD_INT 2
13977: ARRAY
13978: PPUSH
13979: CALL_OW 428
13983: PUSH
13984: LD_INT 0
13986: GREATER
13987: OR
13988: PUSH
13989: LD_VAR 0 12
13993: PUSH
13994: LD_VAR 0 7
13998: ARRAY
13999: PUSH
14000: LD_INT 1
14002: ARRAY
14003: PPUSH
14004: LD_VAR 0 12
14008: PUSH
14009: LD_VAR 0 7
14013: ARRAY
14014: PUSH
14015: LD_INT 2
14017: ARRAY
14018: PPUSH
14019: CALL_OW 351
14023: OR
14024: IFFALSE 14030
// exit ;
14026: POP
14027: POP
14028: GO 14322
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14030: LD_ADDR_VAR 0 8
14034: PUSH
14035: LD_VAR 0 12
14039: PUSH
14040: LD_VAR 0 7
14044: ARRAY
14045: PUSH
14046: LD_INT 1
14048: ARRAY
14049: PPUSH
14050: LD_VAR 0 12
14054: PUSH
14055: LD_VAR 0 7
14059: ARRAY
14060: PUSH
14061: LD_INT 2
14063: ARRAY
14064: PPUSH
14065: CALL_OW 546
14069: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14070: LD_VAR 0 8
14074: PUSH
14075: LD_INT 1
14077: ARRAY
14078: PUSH
14079: LD_VAR 0 8
14083: PUSH
14084: LD_INT 2
14086: ARRAY
14087: PUSH
14088: LD_VAR 0 13
14092: PUSH
14093: LD_INT 2
14095: PLUS
14096: GREATER
14097: OR
14098: PUSH
14099: LD_VAR 0 8
14103: PUSH
14104: LD_INT 2
14106: ARRAY
14107: PUSH
14108: LD_VAR 0 13
14112: PUSH
14113: LD_INT 2
14115: MINUS
14116: LESS
14117: OR
14118: PUSH
14119: LD_VAR 0 8
14123: PUSH
14124: LD_INT 3
14126: ARRAY
14127: PUSH
14128: LD_INT 0
14130: PUSH
14131: LD_INT 8
14133: PUSH
14134: LD_INT 9
14136: PUSH
14137: LD_INT 10
14139: PUSH
14140: LD_INT 11
14142: PUSH
14143: LD_INT 12
14145: PUSH
14146: LD_INT 13
14148: PUSH
14149: LD_INT 16
14151: PUSH
14152: LD_INT 17
14154: PUSH
14155: LD_INT 18
14157: PUSH
14158: LD_INT 19
14160: PUSH
14161: LD_INT 20
14163: PUSH
14164: LD_INT 21
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: IN
14182: NOT
14183: OR
14184: PUSH
14185: LD_VAR 0 8
14189: PUSH
14190: LD_INT 5
14192: ARRAY
14193: NOT
14194: OR
14195: PUSH
14196: LD_VAR 0 8
14200: PUSH
14201: LD_INT 6
14203: ARRAY
14204: PUSH
14205: LD_INT 1
14207: PUSH
14208: LD_INT 2
14210: PUSH
14211: LD_INT 7
14213: PUSH
14214: LD_INT 9
14216: PUSH
14217: LD_INT 10
14219: PUSH
14220: LD_INT 11
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: IN
14231: NOT
14232: OR
14233: IFFALSE 14239
// exit ;
14235: POP
14236: POP
14237: GO 14322
// end ;
14239: GO 13910
14241: POP
14242: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14243: LD_VAR 0 9
14247: PPUSH
14248: LD_VAR 0 3
14252: PPUSH
14253: LD_VAR 0 4
14257: PPUSH
14258: LD_INT 20
14260: PPUSH
14261: CALL 6274 0 4
14265: PUSH
14266: LD_INT 4
14268: ARRAY
14269: IFFALSE 14273
// exit ;
14271: GO 14322
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14273: LD_VAR 0 2
14277: PUSH
14278: LD_INT 29
14280: PUSH
14281: LD_INT 30
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: IN
14288: PUSH
14289: LD_VAR 0 3
14293: PPUSH
14294: LD_VAR 0 4
14298: PPUSH
14299: LD_VAR 0 9
14303: PPUSH
14304: CALL_OW 440
14308: NOT
14309: AND
14310: IFFALSE 14314
// exit ;
14312: GO 14322
// result := true ;
14314: LD_ADDR_VAR 0 6
14318: PUSH
14319: LD_INT 1
14321: ST_TO_ADDR
// end ;
14322: LD_VAR 0 6
14326: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
14335: PPUSH
14336: PPUSH
14337: PPUSH
14338: PPUSH
14339: PPUSH
14340: PPUSH
14341: PPUSH
14342: PPUSH
14343: PPUSH
14344: PPUSH
14345: PPUSH
14346: PPUSH
14347: PPUSH
14348: PPUSH
14349: PPUSH
14350: PPUSH
14351: PPUSH
14352: PPUSH
14353: PPUSH
14354: PPUSH
14355: PPUSH
14356: PPUSH
14357: PPUSH
14358: PPUSH
14359: PPUSH
14360: PPUSH
14361: PPUSH
14362: PPUSH
14363: PPUSH
14364: PPUSH
14365: PPUSH
14366: PPUSH
14367: PPUSH
14368: PPUSH
14369: PPUSH
14370: PPUSH
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
14383: PPUSH
14384: PPUSH
14385: PPUSH
14386: PPUSH
// result = [ ] ;
14387: LD_ADDR_VAR 0 7
14391: PUSH
14392: EMPTY
14393: ST_TO_ADDR
// temp_list = [ ] ;
14394: LD_ADDR_VAR 0 9
14398: PUSH
14399: EMPTY
14400: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14401: LD_VAR 0 4
14405: PUSH
14406: LD_INT 0
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: LD_INT 2
14414: PUSH
14415: LD_INT 3
14417: PUSH
14418: LD_INT 4
14420: PUSH
14421: LD_INT 5
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: IN
14432: NOT
14433: PUSH
14434: LD_VAR 0 1
14438: PUSH
14439: LD_INT 0
14441: PUSH
14442: LD_INT 1
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: IN
14449: PUSH
14450: LD_VAR 0 5
14454: PUSH
14455: LD_INT 1
14457: PUSH
14458: LD_INT 2
14460: PUSH
14461: LD_INT 3
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: IN
14469: NOT
14470: AND
14471: OR
14472: IFFALSE 14476
// exit ;
14474: GO 32867
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14476: LD_VAR 0 1
14480: PUSH
14481: LD_INT 6
14483: PUSH
14484: LD_INT 7
14486: PUSH
14487: LD_INT 8
14489: PUSH
14490: LD_INT 13
14492: PUSH
14493: LD_INT 12
14495: PUSH
14496: LD_INT 15
14498: PUSH
14499: LD_INT 11
14501: PUSH
14502: LD_INT 14
14504: PUSH
14505: LD_INT 10
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: IN
14519: IFFALSE 14529
// btype = b_lab ;
14521: LD_ADDR_VAR 0 1
14525: PUSH
14526: LD_INT 6
14528: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14529: LD_VAR 0 6
14533: PUSH
14534: LD_INT 0
14536: PUSH
14537: LD_INT 1
14539: PUSH
14540: LD_INT 2
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: IN
14548: NOT
14549: PUSH
14550: LD_VAR 0 1
14554: PUSH
14555: LD_INT 0
14557: PUSH
14558: LD_INT 1
14560: PUSH
14561: LD_INT 2
14563: PUSH
14564: LD_INT 3
14566: PUSH
14567: LD_INT 6
14569: PUSH
14570: LD_INT 36
14572: PUSH
14573: LD_INT 4
14575: PUSH
14576: LD_INT 5
14578: PUSH
14579: LD_INT 31
14581: PUSH
14582: LD_INT 32
14584: PUSH
14585: LD_INT 33
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: IN
14601: NOT
14602: PUSH
14603: LD_VAR 0 6
14607: PUSH
14608: LD_INT 1
14610: EQUAL
14611: AND
14612: OR
14613: PUSH
14614: LD_VAR 0 1
14618: PUSH
14619: LD_INT 2
14621: PUSH
14622: LD_INT 3
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: IN
14629: NOT
14630: PUSH
14631: LD_VAR 0 6
14635: PUSH
14636: LD_INT 2
14638: EQUAL
14639: AND
14640: OR
14641: IFFALSE 14651
// mode = 0 ;
14643: LD_ADDR_VAR 0 6
14647: PUSH
14648: LD_INT 0
14650: ST_TO_ADDR
// case mode of 0 :
14651: LD_VAR 0 6
14655: PUSH
14656: LD_INT 0
14658: DOUBLE
14659: EQUAL
14660: IFTRUE 14664
14662: GO 26117
14664: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14665: LD_ADDR_VAR 0 11
14669: PUSH
14670: LD_INT 0
14672: PUSH
14673: LD_INT 0
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 0
14682: PUSH
14683: LD_INT 1
14685: NEG
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 1
14693: PUSH
14694: LD_INT 0
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 1
14703: PUSH
14704: LD_INT 1
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 0
14713: PUSH
14714: LD_INT 1
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: LD_INT 1
14723: NEG
14724: PUSH
14725: LD_INT 0
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 1
14734: NEG
14735: PUSH
14736: LD_INT 1
14738: NEG
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 1
14746: NEG
14747: PUSH
14748: LD_INT 2
14750: NEG
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 0
14758: PUSH
14759: LD_INT 2
14761: NEG
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 1
14769: PUSH
14770: LD_INT 1
14772: NEG
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 1
14780: PUSH
14781: LD_INT 2
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 0
14790: PUSH
14791: LD_INT 2
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 1
14800: NEG
14801: PUSH
14802: LD_INT 1
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: LD_INT 3
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 0
14821: PUSH
14822: LD_INT 3
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 1
14831: NEG
14832: PUSH
14833: LD_INT 2
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14858: LD_ADDR_VAR 0 12
14862: PUSH
14863: LD_INT 0
14865: PUSH
14866: LD_INT 0
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 0
14875: PUSH
14876: LD_INT 1
14878: NEG
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 1
14886: PUSH
14887: LD_INT 0
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 1
14896: PUSH
14897: LD_INT 1
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: LD_INT 0
14906: PUSH
14907: LD_INT 1
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 1
14916: NEG
14917: PUSH
14918: LD_INT 0
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 1
14927: NEG
14928: PUSH
14929: LD_INT 1
14931: NEG
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 1
14939: PUSH
14940: LD_INT 1
14942: NEG
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 2
14950: PUSH
14951: LD_INT 0
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 2
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 1
14970: NEG
14971: PUSH
14972: LD_INT 1
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 2
14981: NEG
14982: PUSH
14983: LD_INT 0
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 2
14992: NEG
14993: PUSH
14994: LD_INT 1
14996: NEG
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 2
15004: NEG
15005: PUSH
15006: LD_INT 1
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 3
15015: NEG
15016: PUSH
15017: LD_INT 0
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 3
15026: NEG
15027: PUSH
15028: LD_INT 1
15030: NEG
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15054: LD_ADDR_VAR 0 13
15058: PUSH
15059: LD_INT 0
15061: PUSH
15062: LD_INT 0
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 0
15071: PUSH
15072: LD_INT 1
15074: NEG
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: LD_INT 1
15082: PUSH
15083: LD_INT 0
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 1
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 0
15102: PUSH
15103: LD_INT 1
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 1
15112: NEG
15113: PUSH
15114: LD_INT 0
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 1
15123: NEG
15124: PUSH
15125: LD_INT 1
15127: NEG
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 1
15135: NEG
15136: PUSH
15137: LD_INT 2
15139: NEG
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 2
15147: PUSH
15148: LD_INT 1
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 2
15157: PUSH
15158: LD_INT 2
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 1
15167: PUSH
15168: LD_INT 2
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 2
15177: NEG
15178: PUSH
15179: LD_INT 1
15181: NEG
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 2
15189: NEG
15190: PUSH
15191: LD_INT 2
15193: NEG
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 2
15201: NEG
15202: PUSH
15203: LD_INT 3
15205: NEG
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 3
15213: NEG
15214: PUSH
15215: LD_INT 2
15217: NEG
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 3
15225: NEG
15226: PUSH
15227: LD_INT 3
15229: NEG
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15253: LD_ADDR_VAR 0 14
15257: PUSH
15258: LD_INT 0
15260: PUSH
15261: LD_INT 0
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PUSH
15268: LD_INT 0
15270: PUSH
15271: LD_INT 1
15273: NEG
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 1
15281: PUSH
15282: LD_INT 0
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 1
15291: PUSH
15292: LD_INT 1
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 0
15301: PUSH
15302: LD_INT 1
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 1
15311: NEG
15312: PUSH
15313: LD_INT 0
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: LD_INT 1
15322: NEG
15323: PUSH
15324: LD_INT 1
15326: NEG
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 1
15334: NEG
15335: PUSH
15336: LD_INT 2
15338: NEG
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 0
15346: PUSH
15347: LD_INT 2
15349: NEG
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 1
15357: PUSH
15358: LD_INT 1
15360: NEG
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 1
15368: PUSH
15369: LD_INT 2
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 0
15378: PUSH
15379: LD_INT 2
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 1
15388: NEG
15389: PUSH
15390: LD_INT 1
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 1
15399: NEG
15400: PUSH
15401: LD_INT 3
15403: NEG
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: LD_INT 0
15411: PUSH
15412: LD_INT 3
15414: NEG
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: LD_INT 1
15422: PUSH
15423: LD_INT 2
15425: NEG
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15449: LD_ADDR_VAR 0 15
15453: PUSH
15454: LD_INT 0
15456: PUSH
15457: LD_INT 0
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 0
15466: PUSH
15467: LD_INT 1
15469: NEG
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 1
15477: PUSH
15478: LD_INT 0
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 1
15487: PUSH
15488: LD_INT 1
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 0
15497: PUSH
15498: LD_INT 1
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 1
15507: NEG
15508: PUSH
15509: LD_INT 0
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 1
15518: NEG
15519: PUSH
15520: LD_INT 1
15522: NEG
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 1
15530: PUSH
15531: LD_INT 1
15533: NEG
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 2
15541: PUSH
15542: LD_INT 0
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 2
15551: PUSH
15552: LD_INT 1
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 1
15561: NEG
15562: PUSH
15563: LD_INT 1
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 2
15572: NEG
15573: PUSH
15574: LD_INT 0
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 2
15583: NEG
15584: PUSH
15585: LD_INT 1
15587: NEG
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 2
15595: PUSH
15596: LD_INT 1
15598: NEG
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 3
15606: PUSH
15607: LD_INT 0
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 3
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15642: LD_ADDR_VAR 0 16
15646: PUSH
15647: LD_INT 0
15649: PUSH
15650: LD_INT 0
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 0
15659: PUSH
15660: LD_INT 1
15662: NEG
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 1
15670: PUSH
15671: LD_INT 0
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: LD_INT 1
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 0
15690: PUSH
15691: LD_INT 1
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 1
15700: NEG
15701: PUSH
15702: LD_INT 0
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 1
15711: NEG
15712: PUSH
15713: LD_INT 1
15715: NEG
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 1
15723: NEG
15724: PUSH
15725: LD_INT 2
15727: NEG
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: LD_INT 2
15735: PUSH
15736: LD_INT 1
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: LD_INT 2
15745: PUSH
15746: LD_INT 2
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 1
15755: PUSH
15756: LD_INT 2
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 2
15765: NEG
15766: PUSH
15767: LD_INT 1
15769: NEG
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 2
15777: NEG
15778: PUSH
15779: LD_INT 2
15781: NEG
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 3
15789: PUSH
15790: LD_INT 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 3
15799: PUSH
15800: LD_INT 3
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: LD_INT 2
15809: PUSH
15810: LD_INT 3
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15835: LD_ADDR_VAR 0 17
15839: PUSH
15840: LD_INT 0
15842: PUSH
15843: LD_INT 0
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 0
15852: PUSH
15853: LD_INT 1
15855: NEG
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 1
15863: PUSH
15864: LD_INT 0
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 1
15873: PUSH
15874: LD_INT 1
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 0
15883: PUSH
15884: LD_INT 1
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 1
15893: NEG
15894: PUSH
15895: LD_INT 0
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 1
15904: NEG
15905: PUSH
15906: LD_INT 1
15908: NEG
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 1
15916: NEG
15917: PUSH
15918: LD_INT 2
15920: NEG
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 0
15928: PUSH
15929: LD_INT 2
15931: NEG
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: LD_INT 1
15939: PUSH
15940: LD_INT 1
15942: NEG
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 2
15950: PUSH
15951: LD_INT 0
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 2
15960: PUSH
15961: LD_INT 1
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 2
15970: PUSH
15971: LD_INT 2
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 1
15980: PUSH
15981: LD_INT 2
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 0
15990: PUSH
15991: LD_INT 2
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 1
16000: NEG
16001: PUSH
16002: LD_INT 1
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 2
16011: NEG
16012: PUSH
16013: LD_INT 0
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 2
16022: NEG
16023: PUSH
16024: LD_INT 1
16026: NEG
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 2
16034: NEG
16035: PUSH
16036: LD_INT 2
16038: NEG
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16065: LD_ADDR_VAR 0 18
16069: PUSH
16070: LD_INT 0
16072: PUSH
16073: LD_INT 0
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 0
16082: PUSH
16083: LD_INT 1
16085: NEG
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: LD_INT 1
16093: PUSH
16094: LD_INT 0
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: LD_INT 1
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 0
16113: PUSH
16114: LD_INT 1
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 1
16123: NEG
16124: PUSH
16125: LD_INT 0
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 1
16134: NEG
16135: PUSH
16136: LD_INT 1
16138: NEG
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 1
16146: NEG
16147: PUSH
16148: LD_INT 2
16150: NEG
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 0
16158: PUSH
16159: LD_INT 2
16161: NEG
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 1
16169: PUSH
16170: LD_INT 1
16172: NEG
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 2
16180: PUSH
16181: LD_INT 0
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 2
16190: PUSH
16191: LD_INT 1
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 2
16200: PUSH
16201: LD_INT 2
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 1
16210: PUSH
16211: LD_INT 2
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 0
16220: PUSH
16221: LD_INT 2
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 1
16230: NEG
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 2
16241: NEG
16242: PUSH
16243: LD_INT 0
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 2
16252: NEG
16253: PUSH
16254: LD_INT 1
16256: NEG
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 2
16264: NEG
16265: PUSH
16266: LD_INT 2
16268: NEG
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16295: LD_ADDR_VAR 0 19
16299: PUSH
16300: LD_INT 0
16302: PUSH
16303: LD_INT 0
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 0
16312: PUSH
16313: LD_INT 1
16315: NEG
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 1
16323: PUSH
16324: LD_INT 0
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: LD_INT 1
16333: PUSH
16334: LD_INT 1
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: LD_INT 1
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 1
16353: NEG
16354: PUSH
16355: LD_INT 0
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 1
16364: NEG
16365: PUSH
16366: LD_INT 1
16368: NEG
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 1
16376: NEG
16377: PUSH
16378: LD_INT 2
16380: NEG
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 0
16388: PUSH
16389: LD_INT 2
16391: NEG
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: LD_INT 1
16402: NEG
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: LD_INT 2
16410: PUSH
16411: LD_INT 0
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: LD_INT 2
16420: PUSH
16421: LD_INT 1
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 2
16430: PUSH
16431: LD_INT 2
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: LD_INT 2
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 0
16450: PUSH
16451: LD_INT 2
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 1
16460: NEG
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 2
16471: NEG
16472: PUSH
16473: LD_INT 0
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 2
16482: NEG
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 2
16494: NEG
16495: PUSH
16496: LD_INT 2
16498: NEG
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16525: LD_ADDR_VAR 0 20
16529: PUSH
16530: LD_INT 0
16532: PUSH
16533: LD_INT 0
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 0
16542: PUSH
16543: LD_INT 1
16545: NEG
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 1
16553: PUSH
16554: LD_INT 0
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: PUSH
16564: LD_INT 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 0
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 1
16583: NEG
16584: PUSH
16585: LD_INT 0
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 1
16594: NEG
16595: PUSH
16596: LD_INT 1
16598: NEG
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 1
16606: NEG
16607: PUSH
16608: LD_INT 2
16610: NEG
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 0
16618: PUSH
16619: LD_INT 2
16621: NEG
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 1
16629: PUSH
16630: LD_INT 1
16632: NEG
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 2
16640: PUSH
16641: LD_INT 0
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 2
16650: PUSH
16651: LD_INT 1
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 2
16660: PUSH
16661: LD_INT 2
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 1
16670: PUSH
16671: LD_INT 2
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 0
16680: PUSH
16681: LD_INT 2
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 1
16690: NEG
16691: PUSH
16692: LD_INT 1
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 2
16701: NEG
16702: PUSH
16703: LD_INT 0
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 2
16712: NEG
16713: PUSH
16714: LD_INT 1
16716: NEG
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 2
16724: NEG
16725: PUSH
16726: LD_INT 2
16728: NEG
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16755: LD_ADDR_VAR 0 21
16759: PUSH
16760: LD_INT 0
16762: PUSH
16763: LD_INT 0
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 0
16772: PUSH
16773: LD_INT 1
16775: NEG
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: LD_INT 0
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 1
16793: PUSH
16794: LD_INT 1
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 0
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 1
16813: NEG
16814: PUSH
16815: LD_INT 0
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 1
16824: NEG
16825: PUSH
16826: LD_INT 1
16828: NEG
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 1
16836: NEG
16837: PUSH
16838: LD_INT 2
16840: NEG
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 0
16848: PUSH
16849: LD_INT 2
16851: NEG
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 1
16859: PUSH
16860: LD_INT 1
16862: NEG
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 2
16870: PUSH
16871: LD_INT 0
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 2
16880: PUSH
16881: LD_INT 1
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 2
16890: PUSH
16891: LD_INT 2
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 1
16900: PUSH
16901: LD_INT 2
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 0
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: LD_INT 1
16920: NEG
16921: PUSH
16922: LD_INT 1
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 2
16931: NEG
16932: PUSH
16933: LD_INT 0
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 2
16942: NEG
16943: PUSH
16944: LD_INT 1
16946: NEG
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 2
16954: NEG
16955: PUSH
16956: LD_INT 2
16958: NEG
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16985: LD_ADDR_VAR 0 22
16989: PUSH
16990: LD_INT 0
16992: PUSH
16993: LD_INT 0
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 0
17002: PUSH
17003: LD_INT 1
17005: NEG
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 1
17013: PUSH
17014: LD_INT 0
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 1
17023: PUSH
17024: LD_INT 1
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 0
17033: PUSH
17034: LD_INT 1
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 1
17043: NEG
17044: PUSH
17045: LD_INT 0
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 1
17054: NEG
17055: PUSH
17056: LD_INT 1
17058: NEG
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 1
17066: NEG
17067: PUSH
17068: LD_INT 2
17070: NEG
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 0
17078: PUSH
17079: LD_INT 2
17081: NEG
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: LD_INT 1
17092: NEG
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 2
17100: PUSH
17101: LD_INT 0
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 2
17110: PUSH
17111: LD_INT 1
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 2
17120: PUSH
17121: LD_INT 2
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: LD_INT 2
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 0
17140: PUSH
17141: LD_INT 2
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 1
17150: NEG
17151: PUSH
17152: LD_INT 1
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 2
17161: NEG
17162: PUSH
17163: LD_INT 0
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: PUSH
17170: LD_INT 2
17172: NEG
17173: PUSH
17174: LD_INT 1
17176: NEG
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 2
17184: NEG
17185: PUSH
17186: LD_INT 2
17188: NEG
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17215: LD_ADDR_VAR 0 23
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 0
17232: PUSH
17233: LD_INT 1
17235: NEG
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 1
17243: PUSH
17244: LD_INT 0
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 1
17253: PUSH
17254: LD_INT 1
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 0
17263: PUSH
17264: LD_INT 1
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 1
17273: NEG
17274: PUSH
17275: LD_INT 0
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 1
17284: NEG
17285: PUSH
17286: LD_INT 1
17288: NEG
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 1
17296: NEG
17297: PUSH
17298: LD_INT 2
17300: NEG
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 0
17308: PUSH
17309: LD_INT 2
17311: NEG
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: LD_INT 1
17322: NEG
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 2
17330: PUSH
17331: LD_INT 0
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 2
17340: PUSH
17341: LD_INT 1
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 2
17350: PUSH
17351: LD_INT 2
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 1
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 0
17370: PUSH
17371: LD_INT 2
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 1
17380: NEG
17381: PUSH
17382: LD_INT 1
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 2
17391: NEG
17392: PUSH
17393: LD_INT 0
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 2
17402: NEG
17403: PUSH
17404: LD_INT 1
17406: NEG
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 2
17414: NEG
17415: PUSH
17416: LD_INT 2
17418: NEG
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 2
17426: NEG
17427: PUSH
17428: LD_INT 3
17430: NEG
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 1
17438: NEG
17439: PUSH
17440: LD_INT 3
17442: NEG
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 1
17450: PUSH
17451: LD_INT 2
17453: NEG
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 2
17461: PUSH
17462: LD_INT 1
17464: NEG
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17495: LD_ADDR_VAR 0 24
17499: PUSH
17500: LD_INT 0
17502: PUSH
17503: LD_INT 0
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 0
17512: PUSH
17513: LD_INT 1
17515: NEG
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: LD_INT 0
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: LD_INT 1
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: LD_INT 1
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 1
17553: NEG
17554: PUSH
17555: LD_INT 0
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: NEG
17565: PUSH
17566: LD_INT 1
17568: NEG
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: PUSH
17578: LD_INT 2
17580: NEG
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 0
17588: PUSH
17589: LD_INT 2
17591: NEG
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: LD_INT 1
17602: NEG
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: LD_INT 0
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 2
17620: PUSH
17621: LD_INT 1
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 2
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 1
17640: PUSH
17641: LD_INT 2
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 0
17650: PUSH
17651: LD_INT 2
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 1
17660: NEG
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 2
17671: NEG
17672: PUSH
17673: LD_INT 0
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 2
17682: NEG
17683: PUSH
17684: LD_INT 1
17686: NEG
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 2
17694: NEG
17695: PUSH
17696: LD_INT 2
17698: NEG
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 1
17706: PUSH
17707: LD_INT 2
17709: NEG
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 2
17717: PUSH
17718: LD_INT 1
17720: NEG
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 3
17728: PUSH
17729: LD_INT 1
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 3
17738: PUSH
17739: LD_INT 2
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17771: LD_ADDR_VAR 0 25
17775: PUSH
17776: LD_INT 0
17778: PUSH
17779: LD_INT 0
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 0
17788: PUSH
17789: LD_INT 1
17791: NEG
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: LD_INT 0
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 0
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 1
17829: NEG
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: LD_INT 1
17844: NEG
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 1
17852: NEG
17853: PUSH
17854: LD_INT 2
17856: NEG
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 0
17864: PUSH
17865: LD_INT 2
17867: NEG
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 1
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 2
17886: PUSH
17887: LD_INT 0
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 2
17896: PUSH
17897: LD_INT 1
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 2
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 1
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 1
17936: NEG
17937: PUSH
17938: LD_INT 1
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 2
17947: NEG
17948: PUSH
17949: LD_INT 0
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 2
17958: NEG
17959: PUSH
17960: LD_INT 1
17962: NEG
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 2
17970: NEG
17971: PUSH
17972: LD_INT 2
17974: NEG
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 3
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 3
17992: PUSH
17993: LD_INT 2
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 2
18002: PUSH
18003: LD_INT 3
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: LD_INT 3
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18045: LD_ADDR_VAR 0 26
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: LD_INT 0
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 0
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: LD_INT 0
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 0
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: LD_INT 0
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 1
18114: NEG
18115: PUSH
18116: LD_INT 1
18118: NEG
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 1
18126: NEG
18127: PUSH
18128: LD_INT 2
18130: NEG
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: LD_INT 2
18141: NEG
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: LD_INT 1
18152: NEG
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: LD_INT 0
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 2
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 0
18200: PUSH
18201: LD_INT 2
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 2
18221: NEG
18222: PUSH
18223: LD_INT 0
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 2
18232: NEG
18233: PUSH
18234: LD_INT 1
18236: NEG
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: NEG
18245: PUSH
18246: LD_INT 2
18248: NEG
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: LD_INT 3
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: LD_INT 3
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 1
18276: NEG
18277: PUSH
18278: LD_INT 2
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 2
18287: NEG
18288: PUSH
18289: LD_INT 1
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18321: LD_ADDR_VAR 0 27
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: LD_INT 0
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 0
18338: PUSH
18339: LD_INT 1
18341: NEG
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: LD_INT 0
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 0
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 1
18379: NEG
18380: PUSH
18381: LD_INT 0
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 1
18390: NEG
18391: PUSH
18392: LD_INT 1
18394: NEG
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 1
18402: NEG
18403: PUSH
18404: LD_INT 2
18406: NEG
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 0
18414: PUSH
18415: LD_INT 2
18417: NEG
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: LD_INT 1
18428: NEG
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 2
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 2
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: LD_INT 2
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: LD_INT 2
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 0
18476: PUSH
18477: LD_INT 2
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 1
18486: NEG
18487: PUSH
18488: LD_INT 1
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 2
18497: NEG
18498: PUSH
18499: LD_INT 0
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 2
18508: NEG
18509: PUSH
18510: LD_INT 1
18512: NEG
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 2
18520: NEG
18521: PUSH
18522: LD_INT 2
18524: NEG
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 1
18532: NEG
18533: PUSH
18534: LD_INT 2
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 2
18543: NEG
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 3
18554: NEG
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 3
18566: NEG
18567: PUSH
18568: LD_INT 2
18570: NEG
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18601: LD_ADDR_VAR 0 28
18605: PUSH
18606: LD_INT 0
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: LD_INT 1
18621: NEG
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 1
18629: PUSH
18630: LD_INT 0
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 1
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 0
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 1
18659: NEG
18660: PUSH
18661: LD_INT 0
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 1
18670: NEG
18671: PUSH
18672: LD_INT 1
18674: NEG
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 1
18682: NEG
18683: PUSH
18684: LD_INT 2
18686: NEG
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 0
18694: PUSH
18695: LD_INT 2
18697: NEG
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: PUSH
18706: LD_INT 1
18708: NEG
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: LD_INT 0
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 2
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 0
18756: PUSH
18757: LD_INT 2
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 1
18766: NEG
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 2
18777: NEG
18778: PUSH
18779: LD_INT 0
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: NEG
18789: PUSH
18790: LD_INT 1
18792: NEG
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 2
18800: NEG
18801: PUSH
18802: LD_INT 2
18804: NEG
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 2
18812: NEG
18813: PUSH
18814: LD_INT 3
18816: NEG
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 1
18824: NEG
18825: PUSH
18826: LD_INT 3
18828: NEG
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 3
18836: NEG
18837: PUSH
18838: LD_INT 1
18840: NEG
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 3
18848: NEG
18849: PUSH
18850: LD_INT 2
18852: NEG
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18883: LD_ADDR_VAR 0 29
18887: PUSH
18888: LD_INT 0
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: LD_INT 1
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 0
18931: PUSH
18932: LD_INT 1
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 1
18941: NEG
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 1
18952: NEG
18953: PUSH
18954: LD_INT 1
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: LD_INT 2
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 0
18976: PUSH
18977: LD_INT 2
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: LD_INT 1
18990: NEG
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 2
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: LD_INT 2
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 0
19028: PUSH
19029: LD_INT 2
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 1
19038: NEG
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 2
19049: NEG
19050: PUSH
19051: LD_INT 1
19053: NEG
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: NEG
19062: PUSH
19063: LD_INT 2
19065: NEG
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 2
19073: NEG
19074: PUSH
19075: LD_INT 3
19077: NEG
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 2
19085: PUSH
19086: LD_INT 1
19088: NEG
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 3
19096: PUSH
19097: LD_INT 1
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: LD_INT 3
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: NEG
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 3
19127: NEG
19128: PUSH
19129: LD_INT 2
19131: NEG
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19162: LD_ADDR_VAR 0 30
19166: PUSH
19167: LD_INT 0
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 0
19179: PUSH
19180: LD_INT 1
19182: NEG
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 1
19190: PUSH
19191: LD_INT 0
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 1
19200: PUSH
19201: LD_INT 1
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 0
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 1
19220: NEG
19221: PUSH
19222: LD_INT 0
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 1
19231: NEG
19232: PUSH
19233: LD_INT 1
19235: NEG
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: NEG
19244: PUSH
19245: LD_INT 2
19247: NEG
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 0
19255: PUSH
19256: LD_INT 2
19258: NEG
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: LD_INT 1
19269: NEG
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 2
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 2
19287: PUSH
19288: LD_INT 1
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 2
19297: PUSH
19298: LD_INT 2
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 1
19307: PUSH
19308: LD_INT 2
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 1
19317: NEG
19318: PUSH
19319: LD_INT 1
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 2
19328: NEG
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 2
19339: NEG
19340: PUSH
19341: LD_INT 1
19343: NEG
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 1
19351: NEG
19352: PUSH
19353: LD_INT 3
19355: NEG
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: LD_INT 2
19366: NEG
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 3
19374: PUSH
19375: LD_INT 2
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 2
19384: PUSH
19385: LD_INT 3
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 2
19394: NEG
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 3
19405: NEG
19406: PUSH
19407: LD_INT 1
19409: NEG
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19440: LD_ADDR_VAR 0 31
19444: PUSH
19445: LD_INT 0
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 0
19457: PUSH
19458: LD_INT 1
19460: NEG
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 1
19468: PUSH
19469: LD_INT 0
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 1
19478: PUSH
19479: LD_INT 1
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 0
19488: PUSH
19489: LD_INT 1
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 1
19498: NEG
19499: PUSH
19500: LD_INT 0
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 1
19509: NEG
19510: PUSH
19511: LD_INT 1
19513: NEG
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 1
19521: NEG
19522: PUSH
19523: LD_INT 2
19525: NEG
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 1
19533: PUSH
19534: LD_INT 1
19536: NEG
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: PUSH
19545: LD_INT 0
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 2
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 2
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: LD_INT 2
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 0
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 1
19594: NEG
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 2
19605: NEG
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 2
19617: NEG
19618: PUSH
19619: LD_INT 2
19621: NEG
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: LD_INT 3
19633: NEG
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 2
19641: PUSH
19642: LD_INT 1
19644: NEG
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 3
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: LD_INT 3
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 1
19672: NEG
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 3
19683: NEG
19684: PUSH
19685: LD_INT 2
19687: NEG
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19718: LD_ADDR_VAR 0 32
19722: PUSH
19723: LD_INT 0
19725: PUSH
19726: LD_INT 0
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: LD_INT 1
19738: NEG
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: LD_INT 0
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 1
19756: PUSH
19757: LD_INT 1
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 0
19766: PUSH
19767: LD_INT 1
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: PUSH
19778: LD_INT 0
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: NEG
19788: PUSH
19789: LD_INT 1
19791: NEG
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 1
19799: NEG
19800: PUSH
19801: LD_INT 2
19803: NEG
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 0
19811: PUSH
19812: LD_INT 2
19814: NEG
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 1
19822: PUSH
19823: LD_INT 1
19825: NEG
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 2
19843: PUSH
19844: LD_INT 2
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 1
19853: PUSH
19854: LD_INT 2
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 0
19863: PUSH
19864: LD_INT 2
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 2
19884: NEG
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 2
19895: NEG
19896: PUSH
19897: LD_INT 1
19899: NEG
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 1
19907: NEG
19908: PUSH
19909: LD_INT 3
19911: NEG
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: LD_INT 2
19922: NEG
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 3
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 2
19940: PUSH
19941: LD_INT 3
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 2
19950: NEG
19951: PUSH
19952: LD_INT 1
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 3
19961: NEG
19962: PUSH
19963: LD_INT 1
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19996: LD_ADDR_VAR 0 33
20000: PUSH
20001: LD_INT 0
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 0
20013: PUSH
20014: LD_INT 1
20016: NEG
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: PUSH
20025: LD_INT 0
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: LD_INT 1
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: LD_INT 1
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 1
20054: NEG
20055: PUSH
20056: LD_INT 0
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 1
20065: NEG
20066: PUSH
20067: LD_INT 1
20069: NEG
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 1
20077: NEG
20078: PUSH
20079: LD_INT 2
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 1
20089: PUSH
20090: LD_INT 1
20092: NEG
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 2
20100: PUSH
20101: LD_INT 0
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 2
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 0
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 1
20140: NEG
20141: PUSH
20142: LD_INT 1
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 2
20151: NEG
20152: PUSH
20153: LD_INT 0
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 2
20162: NEG
20163: PUSH
20164: LD_INT 1
20166: NEG
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 2
20174: NEG
20175: PUSH
20176: LD_INT 2
20178: NEG
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: LD_INT 3
20190: NEG
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 2
20198: PUSH
20199: LD_INT 1
20201: NEG
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 3
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 1
20219: PUSH
20220: LD_INT 3
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 3
20240: NEG
20241: PUSH
20242: LD_INT 2
20244: NEG
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20275: LD_ADDR_VAR 0 34
20279: PUSH
20280: LD_INT 0
20282: PUSH
20283: LD_INT 0
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 0
20292: PUSH
20293: LD_INT 1
20295: NEG
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 1
20303: PUSH
20304: LD_INT 0
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: LD_INT 1
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 0
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: NEG
20345: PUSH
20346: LD_INT 1
20348: NEG
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 1
20356: NEG
20357: PUSH
20358: LD_INT 2
20360: NEG
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: LD_INT 2
20371: NEG
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 1
20379: PUSH
20380: LD_INT 1
20382: NEG
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 2
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 2
20400: PUSH
20401: LD_INT 2
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 1
20410: PUSH
20411: LD_INT 2
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: NEG
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 2
20431: NEG
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 2
20442: NEG
20443: PUSH
20444: LD_INT 1
20446: NEG
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 2
20454: NEG
20455: PUSH
20456: LD_INT 2
20458: NEG
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 1
20466: NEG
20467: PUSH
20468: LD_INT 3
20470: NEG
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 1
20478: PUSH
20479: LD_INT 2
20481: NEG
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 3
20489: PUSH
20490: LD_INT 2
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: PUSH
20500: LD_INT 3
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 2
20509: NEG
20510: PUSH
20511: LD_INT 1
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 3
20520: NEG
20521: PUSH
20522: LD_INT 1
20524: NEG
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20555: LD_ADDR_VAR 0 35
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: LD_INT 0
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: LD_INT 1
20575: NEG
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 1
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: LD_INT 1
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: NEG
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 1
20624: NEG
20625: PUSH
20626: LD_INT 1
20628: NEG
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 2
20636: PUSH
20637: LD_INT 1
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 2
20646: NEG
20647: PUSH
20648: LD_INT 1
20650: NEG
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20667: LD_ADDR_VAR 0 36
20671: PUSH
20672: LD_INT 0
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 0
20684: PUSH
20685: LD_INT 1
20687: NEG
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: LD_INT 0
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 1
20705: PUSH
20706: LD_INT 1
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 0
20715: PUSH
20716: LD_INT 1
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 1
20725: NEG
20726: PUSH
20727: LD_INT 0
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: LD_INT 1
20740: NEG
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 1
20748: NEG
20749: PUSH
20750: LD_INT 2
20752: NEG
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 1
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20779: LD_ADDR_VAR 0 37
20783: PUSH
20784: LD_INT 0
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: LD_INT 1
20799: NEG
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 0
20827: PUSH
20828: LD_INT 1
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 1
20837: NEG
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 1
20848: NEG
20849: PUSH
20850: LD_INT 1
20852: NEG
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 1
20860: PUSH
20861: LD_INT 1
20863: NEG
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 1
20871: NEG
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20891: LD_ADDR_VAR 0 38
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: LD_INT 0
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 0
20908: PUSH
20909: LD_INT 1
20911: NEG
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: LD_INT 0
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 1
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: LD_INT 1
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 1
20949: NEG
20950: PUSH
20951: LD_INT 0
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 1
20960: NEG
20961: PUSH
20962: LD_INT 1
20964: NEG
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: NEG
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21003: LD_ADDR_VAR 0 39
21007: PUSH
21008: LD_INT 0
21010: PUSH
21011: LD_INT 0
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: LD_INT 1
21023: NEG
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 1
21031: PUSH
21032: LD_INT 0
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 1
21041: PUSH
21042: LD_INT 1
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 1
21061: NEG
21062: PUSH
21063: LD_INT 0
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 1
21072: NEG
21073: PUSH
21074: LD_INT 1
21076: NEG
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 1
21084: NEG
21085: PUSH
21086: LD_INT 2
21088: NEG
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21115: LD_ADDR_VAR 0 40
21119: PUSH
21120: LD_INT 0
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: LD_INT 1
21135: NEG
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 0
21163: PUSH
21164: LD_INT 1
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: NEG
21174: PUSH
21175: LD_INT 0
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 1
21184: NEG
21185: PUSH
21186: LD_INT 1
21188: NEG
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 1
21207: NEG
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21227: LD_ADDR_VAR 0 41
21231: PUSH
21232: LD_INT 0
21234: PUSH
21235: LD_INT 0
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: LD_INT 1
21247: NEG
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 1
21255: PUSH
21256: LD_INT 0
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: LD_INT 1
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 0
21275: PUSH
21276: LD_INT 1
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 1
21285: NEG
21286: PUSH
21287: LD_INT 0
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: NEG
21297: PUSH
21298: LD_INT 1
21300: NEG
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 1
21308: NEG
21309: PUSH
21310: LD_INT 2
21312: NEG
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: LD_INT 1
21323: NEG
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 2
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 2
21341: PUSH
21342: LD_INT 1
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 2
21351: PUSH
21352: LD_INT 2
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: LD_INT 2
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 1
21371: NEG
21372: PUSH
21373: LD_INT 1
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 2
21382: NEG
21383: PUSH
21384: LD_INT 0
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 2
21393: NEG
21394: PUSH
21395: LD_INT 1
21397: NEG
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 2
21405: NEG
21406: PUSH
21407: LD_INT 2
21409: NEG
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 2
21417: NEG
21418: PUSH
21419: LD_INT 3
21421: NEG
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 2
21429: PUSH
21430: LD_INT 1
21432: NEG
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 3
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 3
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 3
21460: PUSH
21461: LD_INT 2
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 3
21470: PUSH
21471: LD_INT 3
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 2
21480: PUSH
21481: LD_INT 3
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 2
21490: NEG
21491: PUSH
21492: LD_INT 1
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 3
21501: NEG
21502: PUSH
21503: LD_INT 0
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 3
21512: NEG
21513: PUSH
21514: LD_INT 1
21516: NEG
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 3
21524: NEG
21525: PUSH
21526: LD_INT 2
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 3
21536: NEG
21537: PUSH
21538: LD_INT 3
21540: NEG
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21577: LD_ADDR_VAR 0 42
21581: PUSH
21582: LD_INT 0
21584: PUSH
21585: LD_INT 0
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: LD_INT 1
21597: NEG
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: LD_INT 0
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 0
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: NEG
21636: PUSH
21637: LD_INT 0
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 1
21646: NEG
21647: PUSH
21648: LD_INT 1
21650: NEG
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 1
21658: NEG
21659: PUSH
21660: LD_INT 2
21662: NEG
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 0
21670: PUSH
21671: LD_INT 2
21673: NEG
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: LD_INT 1
21684: NEG
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 2
21692: PUSH
21693: LD_INT 1
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 2
21702: PUSH
21703: LD_INT 2
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: LD_INT 2
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 0
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 2
21743: NEG
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 2
21755: NEG
21756: PUSH
21757: LD_INT 2
21759: NEG
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 2
21767: NEG
21768: PUSH
21769: LD_INT 3
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: LD_INT 3
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 0
21791: PUSH
21792: LD_INT 3
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: LD_INT 2
21805: NEG
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 3
21813: PUSH
21814: LD_INT 2
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 3
21823: PUSH
21824: LD_INT 3
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 3
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 1
21843: PUSH
21844: LD_INT 3
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: LD_INT 3
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: LD_INT 2
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 3
21874: NEG
21875: PUSH
21876: LD_INT 2
21878: NEG
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 3
21886: NEG
21887: PUSH
21888: LD_INT 3
21890: NEG
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21927: LD_ADDR_VAR 0 43
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: LD_INT 0
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 0
21944: PUSH
21945: LD_INT 1
21947: NEG
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: LD_INT 1
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 1
21996: NEG
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 1
22008: NEG
22009: PUSH
22010: LD_INT 2
22012: NEG
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: LD_INT 2
22023: NEG
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 2
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: LD_INT 2
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 0
22072: PUSH
22073: LD_INT 2
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 2
22093: NEG
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 2
22104: NEG
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: LD_INT 3
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 0
22128: PUSH
22129: LD_INT 3
22131: NEG
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: LD_INT 2
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 3
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 3
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 3
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 0
22191: PUSH
22192: LD_INT 3
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 2
22212: NEG
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 3
22223: NEG
22224: PUSH
22225: LD_INT 0
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 3
22234: NEG
22235: PUSH
22236: LD_INT 1
22238: NEG
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22275: LD_ADDR_VAR 0 44
22279: PUSH
22280: LD_INT 0
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 0
22292: PUSH
22293: LD_INT 1
22295: NEG
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: LD_INT 0
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 1
22313: PUSH
22314: LD_INT 1
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 1
22344: NEG
22345: PUSH
22346: LD_INT 1
22348: NEG
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 1
22356: NEG
22357: PUSH
22358: LD_INT 2
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: LD_INT 0
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 2
22399: PUSH
22400: LD_INT 2
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: LD_INT 1
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: NEG
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 2
22441: NEG
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 2
22453: NEG
22454: PUSH
22455: LD_INT 2
22457: NEG
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 2
22465: NEG
22466: PUSH
22467: LD_INT 3
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 2
22477: PUSH
22478: LD_INT 1
22480: NEG
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 3
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 3
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 3
22508: PUSH
22509: LD_INT 2
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 3
22518: PUSH
22519: LD_INT 3
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 2
22528: PUSH
22529: LD_INT 3
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 2
22538: NEG
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 3
22549: NEG
22550: PUSH
22551: LD_INT 0
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 3
22560: NEG
22561: PUSH
22562: LD_INT 1
22564: NEG
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 3
22572: NEG
22573: PUSH
22574: LD_INT 2
22576: NEG
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 3
22584: NEG
22585: PUSH
22586: LD_INT 3
22588: NEG
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22625: LD_ADDR_VAR 0 45
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: LD_INT 1
22645: NEG
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: LD_INT 2
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 2
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 1
22780: NEG
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 2
22791: NEG
22792: PUSH
22793: LD_INT 1
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 2
22803: NEG
22804: PUSH
22805: LD_INT 2
22807: NEG
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 2
22815: NEG
22816: PUSH
22817: LD_INT 3
22819: NEG
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 1
22827: NEG
22828: PUSH
22829: LD_INT 3
22831: NEG
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: LD_INT 3
22842: NEG
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: LD_INT 2
22853: NEG
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 3
22861: PUSH
22862: LD_INT 2
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 3
22871: PUSH
22872: LD_INT 3
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 2
22881: PUSH
22882: LD_INT 3
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 1
22891: PUSH
22892: LD_INT 3
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 0
22901: PUSH
22902: LD_INT 3
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 1
22911: NEG
22912: PUSH
22913: LD_INT 2
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 3
22922: NEG
22923: PUSH
22924: LD_INT 2
22926: NEG
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 3
22934: NEG
22935: PUSH
22936: LD_INT 3
22938: NEG
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22975: LD_ADDR_VAR 0 46
22979: PUSH
22980: LD_INT 0
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 0
22992: PUSH
22993: LD_INT 1
22995: NEG
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: LD_INT 0
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: LD_INT 1
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 0
23023: PUSH
23024: LD_INT 1
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 1
23033: NEG
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: NEG
23045: PUSH
23046: LD_INT 1
23048: NEG
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 1
23056: NEG
23057: PUSH
23058: LD_INT 2
23060: NEG
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 0
23068: PUSH
23069: LD_INT 2
23071: NEG
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 2
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 2
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: LD_INT 2
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: LD_INT 2
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 1
23130: NEG
23131: PUSH
23132: LD_INT 1
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 2
23141: NEG
23142: PUSH
23143: LD_INT 0
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 2
23152: NEG
23153: PUSH
23154: LD_INT 1
23156: NEG
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 1
23164: NEG
23165: PUSH
23166: LD_INT 3
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 0
23176: PUSH
23177: LD_INT 3
23179: NEG
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: LD_INT 2
23190: NEG
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 2
23198: PUSH
23199: LD_INT 1
23201: NEG
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 3
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 3
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: LD_INT 3
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 0
23239: PUSH
23240: LD_INT 3
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: NEG
23250: PUSH
23251: LD_INT 2
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 3
23271: NEG
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 3
23282: NEG
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23323: LD_ADDR_VAR 0 47
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: LD_INT 0
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 0
23340: PUSH
23341: LD_INT 1
23343: NEG
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: LD_INT 0
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: LD_INT 0
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 1
23392: NEG
23393: PUSH
23394: LD_INT 1
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 1
23404: NEG
23405: PUSH
23406: LD_INT 2
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: LD_INT 2
23419: NEG
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: LD_INT 1
23430: NEG
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 2
23438: NEG
23439: PUSH
23440: LD_INT 1
23442: NEG
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 2
23450: NEG
23451: PUSH
23452: LD_INT 2
23454: NEG
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23474: LD_ADDR_VAR 0 48
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 0
23522: PUSH
23523: LD_INT 1
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 1
23532: NEG
23533: PUSH
23534: LD_INT 0
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: LD_INT 1
23547: NEG
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: LD_INT 2
23559: NEG
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: LD_INT 2
23570: NEG
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: LD_INT 1
23581: NEG
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 2
23599: PUSH
23600: LD_INT 1
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23621: LD_ADDR_VAR 0 49
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 1
23705: NEG
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: LD_INT 0
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 2
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 2
23733: PUSH
23734: LD_INT 2
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: LD_INT 2
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23765: LD_ADDR_VAR 0 50
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: LD_INT 0
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: LD_INT 1
23785: NEG
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 2
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 2
23856: PUSH
23857: LD_INT 2
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: LD_INT 2
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: LD_INT 2
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23909: LD_ADDR_VAR 0 51
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: LD_INT 1
23929: NEG
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 1
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: NEG
23968: PUSH
23969: LD_INT 0
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: NEG
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: LD_INT 2
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 2
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: PUSH
24012: LD_INT 1
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 2
24021: NEG
24022: PUSH
24023: LD_INT 0
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 2
24032: NEG
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24056: LD_ADDR_VAR 0 52
24060: PUSH
24061: LD_INT 0
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: LD_INT 1
24076: NEG
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: LD_INT 0
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: LD_INT 1
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: LD_INT 0
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 1
24125: NEG
24126: PUSH
24127: LD_INT 1
24129: NEG
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: LD_INT 2
24141: NEG
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 2
24160: NEG
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 2
24171: NEG
24172: PUSH
24173: LD_INT 1
24175: NEG
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 2
24183: NEG
24184: PUSH
24185: LD_INT 2
24187: NEG
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24207: LD_ADDR_VAR 0 53
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: LD_INT 0
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 1
24276: NEG
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: NEG
24289: PUSH
24290: LD_INT 2
24292: NEG
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: LD_INT 2
24303: NEG
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 2
24322: PUSH
24323: LD_INT 0
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 2
24332: PUSH
24333: LD_INT 1
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 0
24362: PUSH
24363: LD_INT 2
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 1
24372: NEG
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 2
24383: NEG
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 2
24394: NEG
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 2
24406: NEG
24407: PUSH
24408: LD_INT 2
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24437: LD_ADDR_VAR 0 54
24441: PUSH
24442: LD_INT 0
24444: PUSH
24445: LD_INT 0
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: NEG
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 1
24506: NEG
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 1
24518: NEG
24519: PUSH
24520: LD_INT 2
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 0
24530: PUSH
24531: LD_INT 2
24533: NEG
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 1
24541: PUSH
24542: LD_INT 1
24544: NEG
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 2
24552: PUSH
24553: LD_INT 0
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 2
24572: PUSH
24573: LD_INT 2
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 1
24582: PUSH
24583: LD_INT 2
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 0
24592: PUSH
24593: LD_INT 2
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 1
24602: NEG
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 2
24613: NEG
24614: PUSH
24615: LD_INT 0
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 2
24624: NEG
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 2
24636: NEG
24637: PUSH
24638: LD_INT 2
24640: NEG
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24667: LD_ADDR_VAR 0 55
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: LD_INT 0
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 0
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 0
24715: PUSH
24716: LD_INT 1
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 1
24725: NEG
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: NEG
24737: PUSH
24738: LD_INT 1
24740: NEG
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: LD_INT 2
24752: NEG
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: LD_INT 2
24763: NEG
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: LD_INT 1
24774: NEG
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 2
24782: PUSH
24783: LD_INT 0
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 2
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 2
24802: PUSH
24803: LD_INT 2
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: LD_INT 2
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: LD_INT 2
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: NEG
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 2
24843: NEG
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 2
24854: NEG
24855: PUSH
24856: LD_INT 1
24858: NEG
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 2
24866: NEG
24867: PUSH
24868: LD_INT 2
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24897: LD_ADDR_VAR 0 56
24901: PUSH
24902: LD_INT 0
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: LD_INT 1
24917: NEG
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: LD_INT 2
24993: NEG
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 2
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 2
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 2
25032: PUSH
25033: LD_INT 2
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 1
25042: PUSH
25043: LD_INT 2
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: LD_INT 2
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: NEG
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 2
25073: NEG
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 2
25084: NEG
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 2
25096: NEG
25097: PUSH
25098: LD_INT 2
25100: NEG
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25127: LD_ADDR_VAR 0 57
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 0
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 1
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 0
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: LD_INT 1
25200: NEG
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: LD_INT 2
25212: NEG
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: LD_INT 2
25223: NEG
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: LD_INT 0
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 2
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 0
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 2
25303: NEG
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 2
25314: NEG
25315: PUSH
25316: LD_INT 1
25318: NEG
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 2
25326: NEG
25327: PUSH
25328: LD_INT 2
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25357: LD_ADDR_VAR 0 58
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 0
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 1
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 1
25426: NEG
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 1
25438: NEG
25439: PUSH
25440: LD_INT 2
25442: NEG
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: LD_INT 2
25453: NEG
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 2
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 2
25482: PUSH
25483: LD_INT 1
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 2
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 1
25502: PUSH
25503: LD_INT 2
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 2
25533: NEG
25534: PUSH
25535: LD_INT 0
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 2
25544: NEG
25545: PUSH
25546: LD_INT 1
25548: NEG
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 2
25556: NEG
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25587: LD_ADDR_VAR 0 59
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: NEG
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 1
25656: NEG
25657: PUSH
25658: LD_INT 1
25660: NEG
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25675: LD_ADDR_VAR 0 60
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25763: LD_ADDR_VAR 0 61
25767: PUSH
25768: LD_INT 0
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 0
25780: PUSH
25781: LD_INT 1
25783: NEG
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 1
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 0
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: NEG
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25851: LD_ADDR_VAR 0 62
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: LD_INT 1
25871: NEG
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 1
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 1
25920: NEG
25921: PUSH
25922: LD_INT 1
25924: NEG
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25939: LD_ADDR_VAR 0 63
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: LD_INT 0
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: LD_INT 1
25959: NEG
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: PUSH
25968: LD_INT 0
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 1
26008: NEG
26009: PUSH
26010: LD_INT 1
26012: NEG
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26027: LD_ADDR_VAR 0 64
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: LD_INT 0
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 1
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: LD_INT 0
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: ST_TO_ADDR
// end ; 1 :
26115: GO 32012
26117: LD_INT 1
26119: DOUBLE
26120: EQUAL
26121: IFTRUE 26125
26123: GO 28748
26125: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26126: LD_ADDR_VAR 0 11
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: LD_INT 3
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 3
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26170: LD_ADDR_VAR 0 12
26174: PUSH
26175: LD_INT 2
26177: PUSH
26178: LD_INT 1
26180: NEG
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 3
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 3
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: LIST
26210: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26211: LD_ADDR_VAR 0 13
26215: PUSH
26216: LD_INT 3
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 3
26228: PUSH
26229: LD_INT 3
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: LD_INT 3
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26251: LD_ADDR_VAR 0 14
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: LD_INT 3
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: LD_INT 3
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: PUSH
26280: LD_INT 2
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: LIST
26291: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26292: LD_ADDR_VAR 0 15
26296: PUSH
26297: LD_INT 2
26299: NEG
26300: PUSH
26301: LD_INT 1
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 3
26310: NEG
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 3
26321: NEG
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: LIST
26335: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26336: LD_ADDR_VAR 0 16
26340: PUSH
26341: LD_INT 2
26343: NEG
26344: PUSH
26345: LD_INT 3
26347: NEG
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 3
26355: NEG
26356: PUSH
26357: LD_INT 2
26359: NEG
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 3
26367: NEG
26368: PUSH
26369: LD_INT 3
26371: NEG
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26382: LD_ADDR_VAR 0 17
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: LD_INT 3
26393: NEG
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: LD_INT 3
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: LD_INT 2
26415: NEG
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: LIST
26425: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26426: LD_ADDR_VAR 0 18
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 3
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 3
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: LIST
26466: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26467: LD_ADDR_VAR 0 19
26471: PUSH
26472: LD_INT 3
26474: PUSH
26475: LD_INT 2
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 3
26484: PUSH
26485: LD_INT 3
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: LD_INT 3
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: LIST
26506: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26507: LD_ADDR_VAR 0 20
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: LD_INT 3
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 3
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: LD_INT 2
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: LIST
26547: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26548: LD_ADDR_VAR 0 21
26552: PUSH
26553: LD_INT 2
26555: NEG
26556: PUSH
26557: LD_INT 1
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 3
26566: NEG
26567: PUSH
26568: LD_INT 0
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 3
26577: NEG
26578: PUSH
26579: LD_INT 1
26581: NEG
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: LIST
26591: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26592: LD_ADDR_VAR 0 22
26596: PUSH
26597: LD_INT 2
26599: NEG
26600: PUSH
26601: LD_INT 3
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 3
26611: NEG
26612: PUSH
26613: LD_INT 2
26615: NEG
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 3
26623: NEG
26624: PUSH
26625: LD_INT 3
26627: NEG
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: LIST
26637: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26638: LD_ADDR_VAR 0 23
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 3
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: LD_INT 4
26660: NEG
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: LD_INT 3
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26682: LD_ADDR_VAR 0 24
26686: PUSH
26687: LD_INT 3
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 3
26699: PUSH
26700: LD_INT 1
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 4
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: LIST
26722: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26723: LD_ADDR_VAR 0 25
26727: PUSH
26728: LD_INT 3
26730: PUSH
26731: LD_INT 3
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 4
26740: PUSH
26741: LD_INT 3
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 3
26750: PUSH
26751: LD_INT 4
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: LIST
26762: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26763: LD_ADDR_VAR 0 26
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: LD_INT 3
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: LD_INT 4
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 1
26790: NEG
26791: PUSH
26792: LD_INT 3
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26804: LD_ADDR_VAR 0 27
26808: PUSH
26809: LD_INT 3
26811: NEG
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 3
26822: NEG
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 4
26833: NEG
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: LIST
26847: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26848: LD_ADDR_VAR 0 28
26852: PUSH
26853: LD_INT 3
26855: NEG
26856: PUSH
26857: LD_INT 3
26859: NEG
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 3
26867: NEG
26868: PUSH
26869: LD_INT 4
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 4
26879: NEG
26880: PUSH
26881: LD_INT 3
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: LIST
26893: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26894: LD_ADDR_VAR 0 29
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 3
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: LD_INT 3
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: LD_INT 2
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: LD_INT 4
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: LD_INT 4
26950: NEG
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: LD_INT 3
26961: NEG
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: LD_INT 5
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: LD_INT 5
26984: NEG
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: LD_INT 4
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: LD_INT 6
27007: NEG
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: LD_INT 6
27018: NEG
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: LD_INT 5
27029: NEG
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27049: LD_ADDR_VAR 0 30
27053: PUSH
27054: LD_INT 2
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 3
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 3
27077: PUSH
27078: LD_INT 1
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 3
27087: PUSH
27088: LD_INT 1
27090: NEG
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 4
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 4
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 4
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 5
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 5
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 5
27149: PUSH
27150: LD_INT 1
27152: NEG
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 6
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 6
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27192: LD_ADDR_VAR 0 31
27196: PUSH
27197: LD_INT 3
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 3
27209: PUSH
27210: LD_INT 3
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 2
27219: PUSH
27220: LD_INT 3
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 4
27229: PUSH
27230: LD_INT 3
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 4
27239: PUSH
27240: LD_INT 4
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 3
27249: PUSH
27250: LD_INT 4
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 5
27259: PUSH
27260: LD_INT 4
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 5
27269: PUSH
27270: LD_INT 5
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 4
27279: PUSH
27280: LD_INT 5
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 6
27289: PUSH
27290: LD_INT 5
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 6
27299: PUSH
27300: LD_INT 6
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 5
27309: PUSH
27310: LD_INT 6
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27331: LD_ADDR_VAR 0 32
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: LD_INT 3
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: LD_INT 3
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: LD_INT 2
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: LD_INT 4
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: LD_INT 4
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: NEG
27390: PUSH
27391: LD_INT 3
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 5
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: LD_INT 5
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: LD_INT 4
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: LD_INT 6
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 0
27441: PUSH
27442: LD_INT 6
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: LD_INT 5
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27474: LD_ADDR_VAR 0 33
27478: PUSH
27479: LD_INT 2
27481: NEG
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 3
27492: NEG
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 3
27503: NEG
27504: PUSH
27505: LD_INT 1
27507: NEG
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 3
27515: NEG
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 4
27526: NEG
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 4
27537: NEG
27538: PUSH
27539: LD_INT 1
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 4
27549: NEG
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 5
27560: NEG
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 5
27571: NEG
27572: PUSH
27573: LD_INT 1
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 5
27583: NEG
27584: PUSH
27585: LD_INT 1
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 6
27594: NEG
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 6
27605: NEG
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27629: LD_ADDR_VAR 0 34
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: LD_INT 3
27640: NEG
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 3
27648: NEG
27649: PUSH
27650: LD_INT 2
27652: NEG
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 3
27660: NEG
27661: PUSH
27662: LD_INT 3
27664: NEG
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 3
27672: NEG
27673: PUSH
27674: LD_INT 4
27676: NEG
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 4
27684: NEG
27685: PUSH
27686: LD_INT 3
27688: NEG
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 4
27696: NEG
27697: PUSH
27698: LD_INT 4
27700: NEG
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 4
27708: NEG
27709: PUSH
27710: LD_INT 5
27712: NEG
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 5
27720: NEG
27721: PUSH
27722: LD_INT 4
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 5
27732: NEG
27733: PUSH
27734: LD_INT 5
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 5
27744: NEG
27745: PUSH
27746: LD_INT 6
27748: NEG
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 6
27756: NEG
27757: PUSH
27758: LD_INT 5
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 6
27768: NEG
27769: PUSH
27770: LD_INT 6
27772: NEG
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27792: LD_ADDR_VAR 0 41
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: LD_INT 2
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: NEG
27811: PUSH
27812: LD_INT 3
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: LD_INT 2
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27836: LD_ADDR_VAR 0 42
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 0
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 1
27856: NEG
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 3
27864: PUSH
27865: LD_INT 1
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: LIST
27876: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27877: LD_ADDR_VAR 0 43
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 3
27894: PUSH
27895: LD_INT 2
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 2
27904: PUSH
27905: LD_INT 3
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27917: LD_ADDR_VAR 0 44
27921: PUSH
27922: LD_INT 0
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: LD_INT 3
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: LD_INT 2
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: LIST
27957: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27958: LD_ADDR_VAR 0 45
27962: PUSH
27963: LD_INT 2
27965: NEG
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 2
27976: NEG
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 3
27987: NEG
27988: PUSH
27989: LD_INT 1
27991: NEG
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28002: LD_ADDR_VAR 0 46
28006: PUSH
28007: LD_INT 2
28009: NEG
28010: PUSH
28011: LD_INT 2
28013: NEG
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 2
28021: NEG
28022: PUSH
28023: LD_INT 3
28025: NEG
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 3
28033: NEG
28034: PUSH
28035: LD_INT 2
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28048: LD_ADDR_VAR 0 47
28052: PUSH
28053: LD_INT 2
28055: NEG
28056: PUSH
28057: LD_INT 3
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: LD_INT 3
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28081: LD_ADDR_VAR 0 48
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: LD_INT 2
28091: NEG
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 2
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28112: LD_ADDR_VAR 0 49
28116: PUSH
28117: LD_INT 3
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 3
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28141: LD_ADDR_VAR 0 50
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: LD_INT 3
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 3
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28170: LD_ADDR_VAR 0 51
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: LD_INT 2
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 2
28188: NEG
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28201: LD_ADDR_VAR 0 52
28205: PUSH
28206: LD_INT 3
28208: NEG
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 3
28220: NEG
28221: PUSH
28222: LD_INT 2
28224: NEG
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28234: LD_ADDR_VAR 0 53
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: LD_INT 3
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: LD_INT 3
28256: NEG
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: LD_INT 2
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28278: LD_ADDR_VAR 0 54
28282: PUSH
28283: LD_INT 2
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 3
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 3
28306: PUSH
28307: LD_INT 1
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: LIST
28318: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28319: LD_ADDR_VAR 0 55
28323: PUSH
28324: LD_INT 3
28326: PUSH
28327: LD_INT 2
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 3
28336: PUSH
28337: LD_INT 3
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: LD_INT 3
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: LIST
28358: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28359: LD_ADDR_VAR 0 56
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: LD_INT 3
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: LD_INT 3
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: NEG
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: LIST
28399: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28400: LD_ADDR_VAR 0 57
28404: PUSH
28405: LD_INT 2
28407: NEG
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 3
28418: NEG
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 3
28429: NEG
28430: PUSH
28431: LD_INT 1
28433: NEG
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: LIST
28443: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28444: LD_ADDR_VAR 0 58
28448: PUSH
28449: LD_INT 2
28451: NEG
28452: PUSH
28453: LD_INT 3
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 3
28463: NEG
28464: PUSH
28465: LD_INT 2
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 3
28475: NEG
28476: PUSH
28477: LD_INT 3
28479: NEG
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: LIST
28489: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28490: LD_ADDR_VAR 0 59
28494: PUSH
28495: LD_INT 1
28497: NEG
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 0
28509: PUSH
28510: LD_INT 2
28512: NEG
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: LIST
28533: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28534: LD_ADDR_VAR 0 60
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 2
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 2
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: LIST
28574: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28575: LD_ADDR_VAR 0 61
28579: PUSH
28580: LD_INT 2
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 2
28592: PUSH
28593: LD_INT 2
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: LD_INT 2
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: LIST
28614: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28615: LD_ADDR_VAR 0 62
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: LD_INT 2
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: LD_INT 2
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: LD_INT 1
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28656: LD_ADDR_VAR 0 63
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 2
28674: NEG
28675: PUSH
28676: LD_INT 0
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 2
28685: NEG
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28700: LD_ADDR_VAR 0 64
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 2
28719: NEG
28720: PUSH
28721: LD_INT 1
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: NEG
28732: PUSH
28733: LD_INT 2
28735: NEG
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: LIST
28745: ST_TO_ADDR
// end ; 2 :
28746: GO 32012
28748: LD_INT 2
28750: DOUBLE
28751: EQUAL
28752: IFTRUE 28756
28754: GO 32011
28756: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28757: LD_ADDR_VAR 0 29
28761: PUSH
28762: LD_INT 4
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 4
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 5
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 5
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 4
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 3
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 3
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 3
28836: PUSH
28837: LD_INT 2
28839: NEG
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 5
28847: PUSH
28848: LD_INT 2
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 3
28857: PUSH
28858: LD_INT 3
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 3
28867: PUSH
28868: LD_INT 2
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 4
28877: PUSH
28878: LD_INT 3
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 4
28887: PUSH
28888: LD_INT 4
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 3
28897: PUSH
28898: LD_INT 4
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: LD_INT 3
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: LD_INT 2
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 4
28927: PUSH
28928: LD_INT 2
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 2
28937: PUSH
28938: LD_INT 4
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: LD_INT 4
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: LD_INT 3
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 1
28967: PUSH
28968: LD_INT 4
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: LD_INT 5
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: LD_INT 5
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: LD_INT 4
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: LD_INT 5
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 2
29029: NEG
29030: PUSH
29031: LD_INT 3
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 3
29040: NEG
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 3
29051: NEG
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 2
29063: NEG
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 2
29074: NEG
29075: PUSH
29076: LD_INT 1
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 3
29085: NEG
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 4
29096: NEG
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 4
29107: NEG
29108: PUSH
29109: LD_INT 1
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 4
29119: NEG
29120: PUSH
29121: LD_INT 2
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 2
29131: NEG
29132: PUSH
29133: LD_INT 2
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 4
29142: NEG
29143: PUSH
29144: LD_INT 4
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 4
29154: NEG
29155: PUSH
29156: LD_INT 5
29158: NEG
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 3
29166: NEG
29167: PUSH
29168: LD_INT 4
29170: NEG
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 3
29178: NEG
29179: PUSH
29180: LD_INT 3
29182: NEG
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 4
29190: NEG
29191: PUSH
29192: LD_INT 3
29194: NEG
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 5
29202: NEG
29203: PUSH
29204: LD_INT 4
29206: NEG
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 5
29214: NEG
29215: PUSH
29216: LD_INT 5
29218: NEG
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 3
29226: NEG
29227: PUSH
29228: LD_INT 5
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 5
29238: NEG
29239: PUSH
29240: LD_INT 3
29242: NEG
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29295: LD_ADDR_VAR 0 30
29299: PUSH
29300: LD_INT 4
29302: PUSH
29303: LD_INT 4
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 4
29312: PUSH
29313: LD_INT 3
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 5
29322: PUSH
29323: LD_INT 4
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 5
29332: PUSH
29333: LD_INT 5
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 4
29342: PUSH
29343: LD_INT 5
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 3
29352: PUSH
29353: LD_INT 4
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 3
29362: PUSH
29363: LD_INT 3
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 5
29372: PUSH
29373: LD_INT 3
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 3
29382: PUSH
29383: LD_INT 5
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: LD_INT 3
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: PUSH
29413: LD_INT 3
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: LD_INT 4
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 0
29432: PUSH
29433: LD_INT 4
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: NEG
29443: PUSH
29444: LD_INT 3
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 2
29464: PUSH
29465: LD_INT 4
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 2
29474: NEG
29475: PUSH
29476: LD_INT 2
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 4
29485: NEG
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 4
29496: NEG
29497: PUSH
29498: LD_INT 1
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 3
29508: NEG
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 3
29519: NEG
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 4
29530: NEG
29531: PUSH
29532: LD_INT 1
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 5
29541: NEG
29542: PUSH
29543: LD_INT 0
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 5
29552: NEG
29553: PUSH
29554: LD_INT 1
29556: NEG
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 5
29564: NEG
29565: PUSH
29566: LD_INT 2
29568: NEG
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 3
29576: NEG
29577: PUSH
29578: LD_INT 2
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 3
29587: NEG
29588: PUSH
29589: LD_INT 3
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 3
29599: NEG
29600: PUSH
29601: LD_INT 4
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 2
29611: NEG
29612: PUSH
29613: LD_INT 3
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 2
29623: NEG
29624: PUSH
29625: LD_INT 2
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 3
29635: NEG
29636: PUSH
29637: LD_INT 2
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 4
29647: NEG
29648: PUSH
29649: LD_INT 3
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 4
29659: NEG
29660: PUSH
29661: LD_INT 4
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 2
29671: NEG
29672: PUSH
29673: LD_INT 4
29675: NEG
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 4
29683: NEG
29684: PUSH
29685: LD_INT 2
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: LD_INT 4
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: LD_INT 5
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: LD_INT 4
29720: NEG
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 1
29728: PUSH
29729: LD_INT 3
29731: NEG
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: LD_INT 3
29742: NEG
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: LD_INT 4
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: LD_INT 5
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 2
29774: PUSH
29775: LD_INT 3
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: LD_INT 5
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29842: LD_ADDR_VAR 0 31
29846: PUSH
29847: LD_INT 0
29849: PUSH
29850: LD_INT 4
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 0
29859: PUSH
29860: LD_INT 3
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 1
29869: PUSH
29870: LD_INT 4
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: LD_INT 5
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: LD_INT 5
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: LD_INT 4
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: PUSH
29912: LD_INT 3
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 2
29921: PUSH
29922: LD_INT 5
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 2
29931: NEG
29932: PUSH
29933: LD_INT 3
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 3
29942: NEG
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 3
29953: NEG
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 2
29965: NEG
29966: PUSH
29967: LD_INT 0
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 2
29976: NEG
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 3
29987: NEG
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 4
29998: NEG
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 4
30009: NEG
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 4
30021: NEG
30022: PUSH
30023: LD_INT 2
30025: NEG
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 2
30033: NEG
30034: PUSH
30035: LD_INT 2
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 4
30044: NEG
30045: PUSH
30046: LD_INT 4
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 4
30056: NEG
30057: PUSH
30058: LD_INT 5
30060: NEG
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 3
30068: NEG
30069: PUSH
30070: LD_INT 4
30072: NEG
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 3
30080: NEG
30081: PUSH
30082: LD_INT 3
30084: NEG
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 4
30092: NEG
30093: PUSH
30094: LD_INT 3
30096: NEG
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 5
30104: NEG
30105: PUSH
30106: LD_INT 4
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 5
30116: NEG
30117: PUSH
30118: LD_INT 5
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 3
30128: NEG
30129: PUSH
30130: LD_INT 5
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 5
30140: NEG
30141: PUSH
30142: LD_INT 3
30144: NEG
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: LD_INT 3
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 0
30163: PUSH
30164: LD_INT 4
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: LD_INT 3
30177: NEG
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: LD_INT 2
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: LD_INT 3
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 1
30219: NEG
30220: PUSH
30221: LD_INT 4
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: LD_INT 2
30234: NEG
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 2
30242: NEG
30243: PUSH
30244: LD_INT 4
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 4
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 4
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 5
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 5
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 4
30295: PUSH
30296: LD_INT 1
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 3
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 3
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: LD_INT 2
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 5
30337: PUSH
30338: LD_INT 2
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30392: LD_ADDR_VAR 0 32
30396: PUSH
30397: LD_INT 4
30399: NEG
30400: PUSH
30401: LD_INT 0
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 4
30410: NEG
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 3
30422: NEG
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 3
30433: NEG
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 4
30444: NEG
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 5
30455: NEG
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 5
30466: NEG
30467: PUSH
30468: LD_INT 1
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 5
30478: NEG
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 3
30501: NEG
30502: PUSH
30503: LD_INT 3
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 3
30513: NEG
30514: PUSH
30515: LD_INT 4
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 2
30525: NEG
30526: PUSH
30527: LD_INT 3
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 2
30537: NEG
30538: PUSH
30539: LD_INT 2
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 3
30549: NEG
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 4
30561: NEG
30562: PUSH
30563: LD_INT 3
30565: NEG
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 4
30573: NEG
30574: PUSH
30575: LD_INT 4
30577: NEG
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 2
30585: NEG
30586: PUSH
30587: LD_INT 4
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 4
30597: NEG
30598: PUSH
30599: LD_INT 2
30601: NEG
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 4
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 0
30620: PUSH
30621: LD_INT 5
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: LD_INT 4
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 1
30642: PUSH
30643: LD_INT 3
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: LD_INT 3
30656: NEG
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 1
30664: NEG
30665: PUSH
30666: LD_INT 4
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: LD_INT 5
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 2
30688: PUSH
30689: LD_INT 3
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 2
30699: NEG
30700: PUSH
30701: LD_INT 5
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 3
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 3
30721: PUSH
30722: LD_INT 1
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 4
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 4
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 3
30752: PUSH
30753: LD_INT 1
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 2
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 2
30783: PUSH
30784: LD_INT 2
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 4
30794: PUSH
30795: LD_INT 2
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 4
30804: PUSH
30805: LD_INT 4
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 4
30814: PUSH
30815: LD_INT 3
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 5
30824: PUSH
30825: LD_INT 4
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 5
30834: PUSH
30835: LD_INT 5
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 4
30844: PUSH
30845: LD_INT 5
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 3
30854: PUSH
30855: LD_INT 4
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 3
30864: PUSH
30865: LD_INT 3
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 5
30874: PUSH
30875: LD_INT 3
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 3
30884: PUSH
30885: LD_INT 5
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30939: LD_ADDR_VAR 0 33
30943: PUSH
30944: LD_INT 4
30946: NEG
30947: PUSH
30948: LD_INT 4
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 4
30958: NEG
30959: PUSH
30960: LD_INT 5
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 3
30970: NEG
30971: PUSH
30972: LD_INT 4
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 3
30982: NEG
30983: PUSH
30984: LD_INT 3
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 4
30994: NEG
30995: PUSH
30996: LD_INT 3
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 5
31006: NEG
31007: PUSH
31008: LD_INT 4
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 5
31018: NEG
31019: PUSH
31020: LD_INT 5
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 3
31030: NEG
31031: PUSH
31032: LD_INT 5
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 5
31042: NEG
31043: PUSH
31044: LD_INT 3
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 0
31054: PUSH
31055: LD_INT 3
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 0
31065: PUSH
31066: LD_INT 4
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: LD_INT 3
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: LD_INT 2
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: LD_INT 2
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: LD_INT 3
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 4
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 2
31144: NEG
31145: PUSH
31146: LD_INT 4
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 4
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 4
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 5
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 5
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 4
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 3
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 3
31217: PUSH
31218: LD_INT 1
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 3
31228: PUSH
31229: LD_INT 2
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 5
31239: PUSH
31240: LD_INT 2
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: LD_INT 3
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 3
31259: PUSH
31260: LD_INT 2
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 4
31269: PUSH
31270: LD_INT 3
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 4
31279: PUSH
31280: LD_INT 4
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 3
31289: PUSH
31290: LD_INT 4
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 2
31299: PUSH
31300: LD_INT 3
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 2
31309: PUSH
31310: LD_INT 2
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 4
31319: PUSH
31320: LD_INT 2
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 2
31329: PUSH
31330: LD_INT 4
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: LD_INT 4
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 0
31349: PUSH
31350: LD_INT 3
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: LD_INT 4
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: LD_INT 5
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 0
31379: PUSH
31380: LD_INT 5
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: LD_INT 4
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: NEG
31401: PUSH
31402: LD_INT 3
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 2
31411: PUSH
31412: LD_INT 5
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: LD_INT 3
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31477: LD_ADDR_VAR 0 34
31481: PUSH
31482: LD_INT 0
31484: PUSH
31485: LD_INT 4
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: LD_INT 5
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: LD_INT 4
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: LD_INT 3
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: LD_INT 3
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: NEG
31540: PUSH
31541: LD_INT 4
31543: NEG
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: LD_INT 5
31555: NEG
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 2
31563: PUSH
31564: LD_INT 3
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: LD_INT 5
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 3
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 3
31596: PUSH
31597: LD_INT 1
31599: NEG
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 4
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 4
31617: PUSH
31618: LD_INT 1
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 3
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 2
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 2
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 4
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 4
31679: PUSH
31680: LD_INT 4
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 4
31689: PUSH
31690: LD_INT 3
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 5
31699: PUSH
31700: LD_INT 4
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 5
31709: PUSH
31710: LD_INT 5
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 4
31719: PUSH
31720: LD_INT 5
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 3
31729: PUSH
31730: LD_INT 4
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 3
31739: PUSH
31740: LD_INT 3
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 5
31749: PUSH
31750: LD_INT 3
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 3
31759: PUSH
31760: LD_INT 5
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: LD_INT 3
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: LD_INT 2
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: LD_INT 3
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: PUSH
31800: LD_INT 4
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: LD_INT 4
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: LD_INT 3
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: LD_INT 2
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: PUSH
31842: LD_INT 4
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 2
31851: NEG
31852: PUSH
31853: LD_INT 2
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 4
31862: NEG
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 4
31873: NEG
31874: PUSH
31875: LD_INT 1
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 3
31885: NEG
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 3
31896: NEG
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 4
31907: NEG
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 5
31918: NEG
31919: PUSH
31920: LD_INT 0
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 5
31929: NEG
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 5
31941: NEG
31942: PUSH
31943: LD_INT 2
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 3
31953: NEG
31954: PUSH
31955: LD_INT 2
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: ST_TO_ADDR
// end ; end ;
32009: GO 32012
32011: POP
// case btype of b_depot , b_warehouse :
32012: LD_VAR 0 1
32016: PUSH
32017: LD_INT 0
32019: DOUBLE
32020: EQUAL
32021: IFTRUE 32031
32023: LD_INT 1
32025: DOUBLE
32026: EQUAL
32027: IFTRUE 32031
32029: GO 32232
32031: POP
// case nation of nation_american :
32032: LD_VAR 0 5
32036: PUSH
32037: LD_INT 1
32039: DOUBLE
32040: EQUAL
32041: IFTRUE 32045
32043: GO 32101
32045: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32046: LD_ADDR_VAR 0 9
32050: PUSH
32051: LD_VAR 0 11
32055: PUSH
32056: LD_VAR 0 12
32060: PUSH
32061: LD_VAR 0 13
32065: PUSH
32066: LD_VAR 0 14
32070: PUSH
32071: LD_VAR 0 15
32075: PUSH
32076: LD_VAR 0 16
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: PUSH
32089: LD_VAR 0 4
32093: PUSH
32094: LD_INT 1
32096: PLUS
32097: ARRAY
32098: ST_TO_ADDR
32099: GO 32230
32101: LD_INT 2
32103: DOUBLE
32104: EQUAL
32105: IFTRUE 32109
32107: GO 32165
32109: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32110: LD_ADDR_VAR 0 9
32114: PUSH
32115: LD_VAR 0 17
32119: PUSH
32120: LD_VAR 0 18
32124: PUSH
32125: LD_VAR 0 19
32129: PUSH
32130: LD_VAR 0 20
32134: PUSH
32135: LD_VAR 0 21
32139: PUSH
32140: LD_VAR 0 22
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: PUSH
32153: LD_VAR 0 4
32157: PUSH
32158: LD_INT 1
32160: PLUS
32161: ARRAY
32162: ST_TO_ADDR
32163: GO 32230
32165: LD_INT 3
32167: DOUBLE
32168: EQUAL
32169: IFTRUE 32173
32171: GO 32229
32173: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32174: LD_ADDR_VAR 0 9
32178: PUSH
32179: LD_VAR 0 23
32183: PUSH
32184: LD_VAR 0 24
32188: PUSH
32189: LD_VAR 0 25
32193: PUSH
32194: LD_VAR 0 26
32198: PUSH
32199: LD_VAR 0 27
32203: PUSH
32204: LD_VAR 0 28
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: PUSH
32217: LD_VAR 0 4
32221: PUSH
32222: LD_INT 1
32224: PLUS
32225: ARRAY
32226: ST_TO_ADDR
32227: GO 32230
32229: POP
32230: GO 32785
32232: LD_INT 2
32234: DOUBLE
32235: EQUAL
32236: IFTRUE 32246
32238: LD_INT 3
32240: DOUBLE
32241: EQUAL
32242: IFTRUE 32246
32244: GO 32302
32246: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32247: LD_ADDR_VAR 0 9
32251: PUSH
32252: LD_VAR 0 29
32256: PUSH
32257: LD_VAR 0 30
32261: PUSH
32262: LD_VAR 0 31
32266: PUSH
32267: LD_VAR 0 32
32271: PUSH
32272: LD_VAR 0 33
32276: PUSH
32277: LD_VAR 0 34
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: PUSH
32290: LD_VAR 0 4
32294: PUSH
32295: LD_INT 1
32297: PLUS
32298: ARRAY
32299: ST_TO_ADDR
32300: GO 32785
32302: LD_INT 16
32304: DOUBLE
32305: EQUAL
32306: IFTRUE 32364
32308: LD_INT 17
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32364
32314: LD_INT 18
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32364
32320: LD_INT 19
32322: DOUBLE
32323: EQUAL
32324: IFTRUE 32364
32326: LD_INT 22
32328: DOUBLE
32329: EQUAL
32330: IFTRUE 32364
32332: LD_INT 20
32334: DOUBLE
32335: EQUAL
32336: IFTRUE 32364
32338: LD_INT 21
32340: DOUBLE
32341: EQUAL
32342: IFTRUE 32364
32344: LD_INT 23
32346: DOUBLE
32347: EQUAL
32348: IFTRUE 32364
32350: LD_INT 24
32352: DOUBLE
32353: EQUAL
32354: IFTRUE 32364
32356: LD_INT 25
32358: DOUBLE
32359: EQUAL
32360: IFTRUE 32364
32362: GO 32420
32364: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32365: LD_ADDR_VAR 0 9
32369: PUSH
32370: LD_VAR 0 35
32374: PUSH
32375: LD_VAR 0 36
32379: PUSH
32380: LD_VAR 0 37
32384: PUSH
32385: LD_VAR 0 38
32389: PUSH
32390: LD_VAR 0 39
32394: PUSH
32395: LD_VAR 0 40
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: PUSH
32408: LD_VAR 0 4
32412: PUSH
32413: LD_INT 1
32415: PLUS
32416: ARRAY
32417: ST_TO_ADDR
32418: GO 32785
32420: LD_INT 6
32422: DOUBLE
32423: EQUAL
32424: IFTRUE 32476
32426: LD_INT 7
32428: DOUBLE
32429: EQUAL
32430: IFTRUE 32476
32432: LD_INT 8
32434: DOUBLE
32435: EQUAL
32436: IFTRUE 32476
32438: LD_INT 13
32440: DOUBLE
32441: EQUAL
32442: IFTRUE 32476
32444: LD_INT 12
32446: DOUBLE
32447: EQUAL
32448: IFTRUE 32476
32450: LD_INT 15
32452: DOUBLE
32453: EQUAL
32454: IFTRUE 32476
32456: LD_INT 11
32458: DOUBLE
32459: EQUAL
32460: IFTRUE 32476
32462: LD_INT 14
32464: DOUBLE
32465: EQUAL
32466: IFTRUE 32476
32468: LD_INT 10
32470: DOUBLE
32471: EQUAL
32472: IFTRUE 32476
32474: GO 32532
32476: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32477: LD_ADDR_VAR 0 9
32481: PUSH
32482: LD_VAR 0 41
32486: PUSH
32487: LD_VAR 0 42
32491: PUSH
32492: LD_VAR 0 43
32496: PUSH
32497: LD_VAR 0 44
32501: PUSH
32502: LD_VAR 0 45
32506: PUSH
32507: LD_VAR 0 46
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: PUSH
32520: LD_VAR 0 4
32524: PUSH
32525: LD_INT 1
32527: PLUS
32528: ARRAY
32529: ST_TO_ADDR
32530: GO 32785
32532: LD_INT 36
32534: DOUBLE
32535: EQUAL
32536: IFTRUE 32540
32538: GO 32596
32540: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32541: LD_ADDR_VAR 0 9
32545: PUSH
32546: LD_VAR 0 47
32550: PUSH
32551: LD_VAR 0 48
32555: PUSH
32556: LD_VAR 0 49
32560: PUSH
32561: LD_VAR 0 50
32565: PUSH
32566: LD_VAR 0 51
32570: PUSH
32571: LD_VAR 0 52
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: PUSH
32584: LD_VAR 0 4
32588: PUSH
32589: LD_INT 1
32591: PLUS
32592: ARRAY
32593: ST_TO_ADDR
32594: GO 32785
32596: LD_INT 4
32598: DOUBLE
32599: EQUAL
32600: IFTRUE 32622
32602: LD_INT 5
32604: DOUBLE
32605: EQUAL
32606: IFTRUE 32622
32608: LD_INT 34
32610: DOUBLE
32611: EQUAL
32612: IFTRUE 32622
32614: LD_INT 37
32616: DOUBLE
32617: EQUAL
32618: IFTRUE 32622
32620: GO 32678
32622: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32623: LD_ADDR_VAR 0 9
32627: PUSH
32628: LD_VAR 0 53
32632: PUSH
32633: LD_VAR 0 54
32637: PUSH
32638: LD_VAR 0 55
32642: PUSH
32643: LD_VAR 0 56
32647: PUSH
32648: LD_VAR 0 57
32652: PUSH
32653: LD_VAR 0 58
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: PUSH
32666: LD_VAR 0 4
32670: PUSH
32671: LD_INT 1
32673: PLUS
32674: ARRAY
32675: ST_TO_ADDR
32676: GO 32785
32678: LD_INT 31
32680: DOUBLE
32681: EQUAL
32682: IFTRUE 32728
32684: LD_INT 32
32686: DOUBLE
32687: EQUAL
32688: IFTRUE 32728
32690: LD_INT 33
32692: DOUBLE
32693: EQUAL
32694: IFTRUE 32728
32696: LD_INT 27
32698: DOUBLE
32699: EQUAL
32700: IFTRUE 32728
32702: LD_INT 26
32704: DOUBLE
32705: EQUAL
32706: IFTRUE 32728
32708: LD_INT 28
32710: DOUBLE
32711: EQUAL
32712: IFTRUE 32728
32714: LD_INT 29
32716: DOUBLE
32717: EQUAL
32718: IFTRUE 32728
32720: LD_INT 30
32722: DOUBLE
32723: EQUAL
32724: IFTRUE 32728
32726: GO 32784
32728: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32729: LD_ADDR_VAR 0 9
32733: PUSH
32734: LD_VAR 0 59
32738: PUSH
32739: LD_VAR 0 60
32743: PUSH
32744: LD_VAR 0 61
32748: PUSH
32749: LD_VAR 0 62
32753: PUSH
32754: LD_VAR 0 63
32758: PUSH
32759: LD_VAR 0 64
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: PUSH
32772: LD_VAR 0 4
32776: PUSH
32777: LD_INT 1
32779: PLUS
32780: ARRAY
32781: ST_TO_ADDR
32782: GO 32785
32784: POP
// temp_list2 = [ ] ;
32785: LD_ADDR_VAR 0 10
32789: PUSH
32790: EMPTY
32791: ST_TO_ADDR
// for i in temp_list do
32792: LD_ADDR_VAR 0 8
32796: PUSH
32797: LD_VAR 0 9
32801: PUSH
32802: FOR_IN
32803: IFFALSE 32855
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32805: LD_ADDR_VAR 0 10
32809: PUSH
32810: LD_VAR 0 10
32814: PUSH
32815: LD_VAR 0 8
32819: PUSH
32820: LD_INT 1
32822: ARRAY
32823: PUSH
32824: LD_VAR 0 2
32828: PLUS
32829: PUSH
32830: LD_VAR 0 8
32834: PUSH
32835: LD_INT 2
32837: ARRAY
32838: PUSH
32839: LD_VAR 0 3
32843: PLUS
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: EMPTY
32850: LIST
32851: ADD
32852: ST_TO_ADDR
32853: GO 32802
32855: POP
32856: POP
// result = temp_list2 ;
32857: LD_ADDR_VAR 0 7
32861: PUSH
32862: LD_VAR 0 10
32866: ST_TO_ADDR
// end ;
32867: LD_VAR 0 7
32871: RET
// export function EnemyInRange ( unit , dist ) ; begin
32872: LD_INT 0
32874: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32875: LD_ADDR_VAR 0 3
32879: PUSH
32880: LD_VAR 0 1
32884: PPUSH
32885: CALL_OW 255
32889: PPUSH
32890: LD_VAR 0 1
32894: PPUSH
32895: CALL_OW 250
32899: PPUSH
32900: LD_VAR 0 1
32904: PPUSH
32905: CALL_OW 251
32909: PPUSH
32910: LD_VAR 0 2
32914: PPUSH
32915: CALL 6274 0 4
32919: PUSH
32920: LD_INT 4
32922: ARRAY
32923: ST_TO_ADDR
// end ;
32924: LD_VAR 0 3
32928: RET
// export function PlayerSeeMe ( unit ) ; begin
32929: LD_INT 0
32931: PPUSH
// result := See ( your_side , unit ) ;
32932: LD_ADDR_VAR 0 2
32936: PUSH
32937: LD_OWVAR 2
32941: PPUSH
32942: LD_VAR 0 1
32946: PPUSH
32947: CALL_OW 292
32951: ST_TO_ADDR
// end ;
32952: LD_VAR 0 2
32956: RET
// export function ReverseDir ( unit ) ; begin
32957: LD_INT 0
32959: PPUSH
// if not unit then
32960: LD_VAR 0 1
32964: NOT
32965: IFFALSE 32969
// exit ;
32967: GO 32992
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32969: LD_ADDR_VAR 0 2
32973: PUSH
32974: LD_VAR 0 1
32978: PPUSH
32979: CALL_OW 254
32983: PUSH
32984: LD_INT 3
32986: PLUS
32987: PUSH
32988: LD_INT 6
32990: MOD
32991: ST_TO_ADDR
// end ;
32992: LD_VAR 0 2
32996: RET
// export function ReverseArray ( array ) ; var i ; begin
32997: LD_INT 0
32999: PPUSH
33000: PPUSH
// if not array then
33001: LD_VAR 0 1
33005: NOT
33006: IFFALSE 33010
// exit ;
33008: GO 33065
// result := [ ] ;
33010: LD_ADDR_VAR 0 2
33014: PUSH
33015: EMPTY
33016: ST_TO_ADDR
// for i := array downto 1 do
33017: LD_ADDR_VAR 0 3
33021: PUSH
33022: DOUBLE
33023: LD_VAR 0 1
33027: INC
33028: ST_TO_ADDR
33029: LD_INT 1
33031: PUSH
33032: FOR_DOWNTO
33033: IFFALSE 33063
// result := Join ( result , array [ i ] ) ;
33035: LD_ADDR_VAR 0 2
33039: PUSH
33040: LD_VAR 0 2
33044: PPUSH
33045: LD_VAR 0 1
33049: PUSH
33050: LD_VAR 0 3
33054: ARRAY
33055: PPUSH
33056: CALL 37708 0 2
33060: ST_TO_ADDR
33061: GO 33032
33063: POP
33064: POP
// end ;
33065: LD_VAR 0 2
33069: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33070: LD_INT 0
33072: PPUSH
33073: PPUSH
33074: PPUSH
33075: PPUSH
33076: PPUSH
33077: PPUSH
// if not unit or not hexes then
33078: LD_VAR 0 1
33082: NOT
33083: PUSH
33084: LD_VAR 0 2
33088: NOT
33089: OR
33090: IFFALSE 33094
// exit ;
33092: GO 33217
// dist := 9999 ;
33094: LD_ADDR_VAR 0 5
33098: PUSH
33099: LD_INT 9999
33101: ST_TO_ADDR
// for i = 1 to hexes do
33102: LD_ADDR_VAR 0 4
33106: PUSH
33107: DOUBLE
33108: LD_INT 1
33110: DEC
33111: ST_TO_ADDR
33112: LD_VAR 0 2
33116: PUSH
33117: FOR_TO
33118: IFFALSE 33205
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33120: LD_ADDR_VAR 0 6
33124: PUSH
33125: LD_VAR 0 1
33129: PPUSH
33130: LD_VAR 0 2
33134: PUSH
33135: LD_VAR 0 4
33139: ARRAY
33140: PUSH
33141: LD_INT 1
33143: ARRAY
33144: PPUSH
33145: LD_VAR 0 2
33149: PUSH
33150: LD_VAR 0 4
33154: ARRAY
33155: PUSH
33156: LD_INT 2
33158: ARRAY
33159: PPUSH
33160: CALL_OW 297
33164: ST_TO_ADDR
// if tdist < dist then
33165: LD_VAR 0 6
33169: PUSH
33170: LD_VAR 0 5
33174: LESS
33175: IFFALSE 33203
// begin hex := hexes [ i ] ;
33177: LD_ADDR_VAR 0 8
33181: PUSH
33182: LD_VAR 0 2
33186: PUSH
33187: LD_VAR 0 4
33191: ARRAY
33192: ST_TO_ADDR
// dist := tdist ;
33193: LD_ADDR_VAR 0 5
33197: PUSH
33198: LD_VAR 0 6
33202: ST_TO_ADDR
// end ; end ;
33203: GO 33117
33205: POP
33206: POP
// result := hex ;
33207: LD_ADDR_VAR 0 3
33211: PUSH
33212: LD_VAR 0 8
33216: ST_TO_ADDR
// end ;
33217: LD_VAR 0 3
33221: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33222: LD_INT 0
33224: PPUSH
33225: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33226: LD_VAR 0 1
33230: NOT
33231: PUSH
33232: LD_VAR 0 1
33236: PUSH
33237: LD_INT 21
33239: PUSH
33240: LD_INT 2
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 23
33249: PUSH
33250: LD_INT 2
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PPUSH
33261: CALL_OW 69
33265: IN
33266: NOT
33267: OR
33268: IFFALSE 33272
// exit ;
33270: GO 33319
// for i = 1 to 3 do
33272: LD_ADDR_VAR 0 3
33276: PUSH
33277: DOUBLE
33278: LD_INT 1
33280: DEC
33281: ST_TO_ADDR
33282: LD_INT 3
33284: PUSH
33285: FOR_TO
33286: IFFALSE 33317
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33288: LD_VAR 0 1
33292: PPUSH
33293: CALL_OW 250
33297: PPUSH
33298: LD_VAR 0 1
33302: PPUSH
33303: CALL_OW 251
33307: PPUSH
33308: LD_INT 1
33310: PPUSH
33311: CALL_OW 453
33315: GO 33285
33317: POP
33318: POP
// end ;
33319: LD_VAR 0 2
33323: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33324: LD_INT 0
33326: PPUSH
33327: PPUSH
33328: PPUSH
33329: PPUSH
33330: PPUSH
33331: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33332: LD_VAR 0 1
33336: NOT
33337: PUSH
33338: LD_VAR 0 2
33342: NOT
33343: OR
33344: PUSH
33345: LD_VAR 0 1
33349: PPUSH
33350: CALL_OW 314
33354: OR
33355: IFFALSE 33359
// exit ;
33357: GO 33826
// if GetLives ( i ) < 250 then
33359: LD_VAR 0 4
33363: PPUSH
33364: CALL_OW 256
33368: PUSH
33369: LD_INT 250
33371: LESS
33372: IFFALSE 33385
// begin ComAutodestruct ( i ) ;
33374: LD_VAR 0 4
33378: PPUSH
33379: CALL 33222 0 1
// exit ;
33383: GO 33826
// end ; x := GetX ( enemy_unit ) ;
33385: LD_ADDR_VAR 0 7
33389: PUSH
33390: LD_VAR 0 2
33394: PPUSH
33395: CALL_OW 250
33399: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33400: LD_ADDR_VAR 0 8
33404: PUSH
33405: LD_VAR 0 2
33409: PPUSH
33410: CALL_OW 251
33414: ST_TO_ADDR
// if not x or not y then
33415: LD_VAR 0 7
33419: NOT
33420: PUSH
33421: LD_VAR 0 8
33425: NOT
33426: OR
33427: IFFALSE 33431
// exit ;
33429: GO 33826
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33431: LD_ADDR_VAR 0 6
33435: PUSH
33436: LD_VAR 0 7
33440: PPUSH
33441: LD_INT 0
33443: PPUSH
33444: LD_INT 4
33446: PPUSH
33447: CALL_OW 272
33451: PUSH
33452: LD_VAR 0 8
33456: PPUSH
33457: LD_INT 0
33459: PPUSH
33460: LD_INT 4
33462: PPUSH
33463: CALL_OW 273
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_VAR 0 7
33476: PPUSH
33477: LD_INT 1
33479: PPUSH
33480: LD_INT 4
33482: PPUSH
33483: CALL_OW 272
33487: PUSH
33488: LD_VAR 0 8
33492: PPUSH
33493: LD_INT 1
33495: PPUSH
33496: LD_INT 4
33498: PPUSH
33499: CALL_OW 273
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_VAR 0 7
33512: PPUSH
33513: LD_INT 2
33515: PPUSH
33516: LD_INT 4
33518: PPUSH
33519: CALL_OW 272
33523: PUSH
33524: LD_VAR 0 8
33528: PPUSH
33529: LD_INT 2
33531: PPUSH
33532: LD_INT 4
33534: PPUSH
33535: CALL_OW 273
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_VAR 0 7
33548: PPUSH
33549: LD_INT 3
33551: PPUSH
33552: LD_INT 4
33554: PPUSH
33555: CALL_OW 272
33559: PUSH
33560: LD_VAR 0 8
33564: PPUSH
33565: LD_INT 3
33567: PPUSH
33568: LD_INT 4
33570: PPUSH
33571: CALL_OW 273
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_VAR 0 7
33584: PPUSH
33585: LD_INT 4
33587: PPUSH
33588: LD_INT 4
33590: PPUSH
33591: CALL_OW 272
33595: PUSH
33596: LD_VAR 0 8
33600: PPUSH
33601: LD_INT 4
33603: PPUSH
33604: LD_INT 4
33606: PPUSH
33607: CALL_OW 273
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_VAR 0 7
33620: PPUSH
33621: LD_INT 5
33623: PPUSH
33624: LD_INT 4
33626: PPUSH
33627: CALL_OW 272
33631: PUSH
33632: LD_VAR 0 8
33636: PPUSH
33637: LD_INT 5
33639: PPUSH
33640: LD_INT 4
33642: PPUSH
33643: CALL_OW 273
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: ST_TO_ADDR
// for i = tmp downto 1 do
33660: LD_ADDR_VAR 0 4
33664: PUSH
33665: DOUBLE
33666: LD_VAR 0 6
33670: INC
33671: ST_TO_ADDR
33672: LD_INT 1
33674: PUSH
33675: FOR_DOWNTO
33676: IFFALSE 33777
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33678: LD_VAR 0 6
33682: PUSH
33683: LD_VAR 0 4
33687: ARRAY
33688: PUSH
33689: LD_INT 1
33691: ARRAY
33692: PPUSH
33693: LD_VAR 0 6
33697: PUSH
33698: LD_VAR 0 4
33702: ARRAY
33703: PUSH
33704: LD_INT 2
33706: ARRAY
33707: PPUSH
33708: CALL_OW 488
33712: NOT
33713: PUSH
33714: LD_VAR 0 6
33718: PUSH
33719: LD_VAR 0 4
33723: ARRAY
33724: PUSH
33725: LD_INT 1
33727: ARRAY
33728: PPUSH
33729: LD_VAR 0 6
33733: PUSH
33734: LD_VAR 0 4
33738: ARRAY
33739: PUSH
33740: LD_INT 2
33742: ARRAY
33743: PPUSH
33744: CALL_OW 428
33748: PUSH
33749: LD_INT 0
33751: NONEQUAL
33752: OR
33753: IFFALSE 33775
// tmp := Delete ( tmp , i ) ;
33755: LD_ADDR_VAR 0 6
33759: PUSH
33760: LD_VAR 0 6
33764: PPUSH
33765: LD_VAR 0 4
33769: PPUSH
33770: CALL_OW 3
33774: ST_TO_ADDR
33775: GO 33675
33777: POP
33778: POP
// j := GetClosestHex ( unit , tmp ) ;
33779: LD_ADDR_VAR 0 5
33783: PUSH
33784: LD_VAR 0 1
33788: PPUSH
33789: LD_VAR 0 6
33793: PPUSH
33794: CALL 33070 0 2
33798: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33799: LD_VAR 0 1
33803: PPUSH
33804: LD_VAR 0 5
33808: PUSH
33809: LD_INT 1
33811: ARRAY
33812: PPUSH
33813: LD_VAR 0 5
33817: PUSH
33818: LD_INT 2
33820: ARRAY
33821: PPUSH
33822: CALL_OW 111
// end ;
33826: LD_VAR 0 3
33830: RET
// export function PrepareApemanSoldier ( ) ; begin
33831: LD_INT 0
33833: PPUSH
// uc_nation := 0 ;
33834: LD_ADDR_OWVAR 21
33838: PUSH
33839: LD_INT 0
33841: ST_TO_ADDR
// hc_sex := sex_male ;
33842: LD_ADDR_OWVAR 27
33846: PUSH
33847: LD_INT 1
33849: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
33850: LD_ADDR_OWVAR 28
33854: PUSH
33855: LD_INT 15
33857: ST_TO_ADDR
// hc_gallery :=  ;
33858: LD_ADDR_OWVAR 33
33862: PUSH
33863: LD_STRING 
33865: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33866: LD_ADDR_OWVAR 31
33870: PUSH
33871: LD_INT 0
33873: PPUSH
33874: LD_INT 3
33876: PPUSH
33877: CALL_OW 12
33881: PUSH
33882: LD_INT 0
33884: PPUSH
33885: LD_INT 3
33887: PPUSH
33888: CALL_OW 12
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: LD_INT 0
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: ST_TO_ADDR
// end ;
33905: LD_VAR 0 1
33909: RET
// export function PrepareApemanEngineer ( ) ; begin
33910: LD_INT 0
33912: PPUSH
// uc_nation := 0 ;
33913: LD_ADDR_OWVAR 21
33917: PUSH
33918: LD_INT 0
33920: ST_TO_ADDR
// hc_sex := sex_male ;
33921: LD_ADDR_OWVAR 27
33925: PUSH
33926: LD_INT 1
33928: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
33929: LD_ADDR_OWVAR 28
33933: PUSH
33934: LD_INT 16
33936: ST_TO_ADDR
// hc_gallery :=  ;
33937: LD_ADDR_OWVAR 33
33941: PUSH
33942: LD_STRING 
33944: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33945: LD_ADDR_OWVAR 31
33949: PUSH
33950: LD_INT 0
33952: PPUSH
33953: LD_INT 3
33955: PPUSH
33956: CALL_OW 12
33960: PUSH
33961: LD_INT 0
33963: PPUSH
33964: LD_INT 3
33966: PPUSH
33967: CALL_OW 12
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: ST_TO_ADDR
// end ;
33984: LD_VAR 0 1
33988: RET
// export function PrepareApeman ( agressivity ) ; begin
33989: LD_INT 0
33991: PPUSH
// uc_side := 0 ;
33992: LD_ADDR_OWVAR 20
33996: PUSH
33997: LD_INT 0
33999: ST_TO_ADDR
// uc_nation := 0 ;
34000: LD_ADDR_OWVAR 21
34004: PUSH
34005: LD_INT 0
34007: ST_TO_ADDR
// hc_sex := sex_male ;
34008: LD_ADDR_OWVAR 27
34012: PUSH
34013: LD_INT 1
34015: ST_TO_ADDR
// hc_class := class_apeman ;
34016: LD_ADDR_OWVAR 28
34020: PUSH
34021: LD_INT 12
34023: ST_TO_ADDR
// hc_gallery :=  ;
34024: LD_ADDR_OWVAR 33
34028: PUSH
34029: LD_STRING 
34031: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34032: LD_ADDR_OWVAR 35
34036: PUSH
34037: LD_VAR 0 1
34041: NEG
34042: PPUSH
34043: LD_VAR 0 1
34047: PPUSH
34048: CALL_OW 12
34052: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34053: LD_ADDR_OWVAR 31
34057: PUSH
34058: LD_INT 0
34060: PPUSH
34061: LD_INT 3
34063: PPUSH
34064: CALL_OW 12
34068: PUSH
34069: LD_INT 0
34071: PPUSH
34072: LD_INT 3
34074: PPUSH
34075: CALL_OW 12
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: ST_TO_ADDR
// end ;
34092: LD_VAR 0 2
34096: RET
// export function PrepareTiger ( agressivity ) ; begin
34097: LD_INT 0
34099: PPUSH
// uc_side := 0 ;
34100: LD_ADDR_OWVAR 20
34104: PUSH
34105: LD_INT 0
34107: ST_TO_ADDR
// uc_nation := 0 ;
34108: LD_ADDR_OWVAR 21
34112: PUSH
34113: LD_INT 0
34115: ST_TO_ADDR
// hc_class := class_tiger ;
34116: LD_ADDR_OWVAR 28
34120: PUSH
34121: LD_INT 14
34123: ST_TO_ADDR
// hc_gallery :=  ;
34124: LD_ADDR_OWVAR 33
34128: PUSH
34129: LD_STRING 
34131: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34132: LD_ADDR_OWVAR 35
34136: PUSH
34137: LD_VAR 0 1
34141: NEG
34142: PPUSH
34143: LD_VAR 0 1
34147: PPUSH
34148: CALL_OW 12
34152: ST_TO_ADDR
// end ;
34153: LD_VAR 0 2
34157: RET
// export function PrepareEnchidna ( ) ; begin
34158: LD_INT 0
34160: PPUSH
// uc_side := 0 ;
34161: LD_ADDR_OWVAR 20
34165: PUSH
34166: LD_INT 0
34168: ST_TO_ADDR
// uc_nation := 0 ;
34169: LD_ADDR_OWVAR 21
34173: PUSH
34174: LD_INT 0
34176: ST_TO_ADDR
// hc_class := class_baggie ;
34177: LD_ADDR_OWVAR 28
34181: PUSH
34182: LD_INT 13
34184: ST_TO_ADDR
// hc_gallery :=  ;
34185: LD_ADDR_OWVAR 33
34189: PUSH
34190: LD_STRING 
34192: ST_TO_ADDR
// end ;
34193: LD_VAR 0 1
34197: RET
// export function PrepareFrog ( ) ; begin
34198: LD_INT 0
34200: PPUSH
// uc_side := 0 ;
34201: LD_ADDR_OWVAR 20
34205: PUSH
34206: LD_INT 0
34208: ST_TO_ADDR
// uc_nation := 0 ;
34209: LD_ADDR_OWVAR 21
34213: PUSH
34214: LD_INT 0
34216: ST_TO_ADDR
// hc_class := class_frog ;
34217: LD_ADDR_OWVAR 28
34221: PUSH
34222: LD_INT 19
34224: ST_TO_ADDR
// hc_gallery :=  ;
34225: LD_ADDR_OWVAR 33
34229: PUSH
34230: LD_STRING 
34232: ST_TO_ADDR
// end ;
34233: LD_VAR 0 1
34237: RET
// export function PrepareFish ( ) ; begin
34238: LD_INT 0
34240: PPUSH
// uc_side := 0 ;
34241: LD_ADDR_OWVAR 20
34245: PUSH
34246: LD_INT 0
34248: ST_TO_ADDR
// uc_nation := 0 ;
34249: LD_ADDR_OWVAR 21
34253: PUSH
34254: LD_INT 0
34256: ST_TO_ADDR
// hc_class := class_fish ;
34257: LD_ADDR_OWVAR 28
34261: PUSH
34262: LD_INT 20
34264: ST_TO_ADDR
// hc_gallery :=  ;
34265: LD_ADDR_OWVAR 33
34269: PUSH
34270: LD_STRING 
34272: ST_TO_ADDR
// end ;
34273: LD_VAR 0 1
34277: RET
// export function PrepareBird ( ) ; begin
34278: LD_INT 0
34280: PPUSH
// uc_side := 0 ;
34281: LD_ADDR_OWVAR 20
34285: PUSH
34286: LD_INT 0
34288: ST_TO_ADDR
// uc_nation := 0 ;
34289: LD_ADDR_OWVAR 21
34293: PUSH
34294: LD_INT 0
34296: ST_TO_ADDR
// hc_class := class_phororhacos ;
34297: LD_ADDR_OWVAR 28
34301: PUSH
34302: LD_INT 18
34304: ST_TO_ADDR
// hc_gallery :=  ;
34305: LD_ADDR_OWVAR 33
34309: PUSH
34310: LD_STRING 
34312: ST_TO_ADDR
// end ;
34313: LD_VAR 0 1
34317: RET
// export function PrepareHorse ( ) ; begin
34318: LD_INT 0
34320: PPUSH
// uc_side := 0 ;
34321: LD_ADDR_OWVAR 20
34325: PUSH
34326: LD_INT 0
34328: ST_TO_ADDR
// uc_nation := 0 ;
34329: LD_ADDR_OWVAR 21
34333: PUSH
34334: LD_INT 0
34336: ST_TO_ADDR
// hc_class := class_horse ;
34337: LD_ADDR_OWVAR 28
34341: PUSH
34342: LD_INT 21
34344: ST_TO_ADDR
// hc_gallery :=  ;
34345: LD_ADDR_OWVAR 33
34349: PUSH
34350: LD_STRING 
34352: ST_TO_ADDR
// end ;
34353: LD_VAR 0 1
34357: RET
// export function PrepareMastodont ( ) ; begin
34358: LD_INT 0
34360: PPUSH
// uc_side := 0 ;
34361: LD_ADDR_OWVAR 20
34365: PUSH
34366: LD_INT 0
34368: ST_TO_ADDR
// uc_nation := 0 ;
34369: LD_ADDR_OWVAR 21
34373: PUSH
34374: LD_INT 0
34376: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34377: LD_ADDR_OWVAR 37
34381: PUSH
34382: LD_INT 31
34384: ST_TO_ADDR
// vc_control := control_rider ;
34385: LD_ADDR_OWVAR 38
34389: PUSH
34390: LD_INT 4
34392: ST_TO_ADDR
// end ;
34393: LD_VAR 0 1
34397: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34398: LD_INT 0
34400: PPUSH
34401: PPUSH
34402: PPUSH
// uc_side = 0 ;
34403: LD_ADDR_OWVAR 20
34407: PUSH
34408: LD_INT 0
34410: ST_TO_ADDR
// uc_nation = 0 ;
34411: LD_ADDR_OWVAR 21
34415: PUSH
34416: LD_INT 0
34418: ST_TO_ADDR
// InitHc_All ( ) ;
34419: CALL_OW 584
// InitVc ;
34423: CALL_OW 20
// if mastodonts then
34427: LD_VAR 0 6
34431: IFFALSE 34498
// for i = 1 to mastodonts do
34433: LD_ADDR_VAR 0 11
34437: PUSH
34438: DOUBLE
34439: LD_INT 1
34441: DEC
34442: ST_TO_ADDR
34443: LD_VAR 0 6
34447: PUSH
34448: FOR_TO
34449: IFFALSE 34496
// begin vc_chassis := 31 ;
34451: LD_ADDR_OWVAR 37
34455: PUSH
34456: LD_INT 31
34458: ST_TO_ADDR
// vc_control := control_rider ;
34459: LD_ADDR_OWVAR 38
34463: PUSH
34464: LD_INT 4
34466: ST_TO_ADDR
// animal := CreateVehicle ;
34467: LD_ADDR_VAR 0 12
34471: PUSH
34472: CALL_OW 45
34476: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34477: LD_VAR 0 12
34481: PPUSH
34482: LD_VAR 0 8
34486: PPUSH
34487: LD_INT 0
34489: PPUSH
34490: CALL 36626 0 3
// end ;
34494: GO 34448
34496: POP
34497: POP
// if horses then
34498: LD_VAR 0 5
34502: IFFALSE 34569
// for i = 1 to horses do
34504: LD_ADDR_VAR 0 11
34508: PUSH
34509: DOUBLE
34510: LD_INT 1
34512: DEC
34513: ST_TO_ADDR
34514: LD_VAR 0 5
34518: PUSH
34519: FOR_TO
34520: IFFALSE 34567
// begin hc_class := 21 ;
34522: LD_ADDR_OWVAR 28
34526: PUSH
34527: LD_INT 21
34529: ST_TO_ADDR
// hc_gallery :=  ;
34530: LD_ADDR_OWVAR 33
34534: PUSH
34535: LD_STRING 
34537: ST_TO_ADDR
// animal := CreateHuman ;
34538: LD_ADDR_VAR 0 12
34542: PUSH
34543: CALL_OW 44
34547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34548: LD_VAR 0 12
34552: PPUSH
34553: LD_VAR 0 8
34557: PPUSH
34558: LD_INT 0
34560: PPUSH
34561: CALL 36626 0 3
// end ;
34565: GO 34519
34567: POP
34568: POP
// if birds then
34569: LD_VAR 0 1
34573: IFFALSE 34640
// for i = 1 to birds do
34575: LD_ADDR_VAR 0 11
34579: PUSH
34580: DOUBLE
34581: LD_INT 1
34583: DEC
34584: ST_TO_ADDR
34585: LD_VAR 0 1
34589: PUSH
34590: FOR_TO
34591: IFFALSE 34638
// begin hc_class = 18 ;
34593: LD_ADDR_OWVAR 28
34597: PUSH
34598: LD_INT 18
34600: ST_TO_ADDR
// hc_gallery =  ;
34601: LD_ADDR_OWVAR 33
34605: PUSH
34606: LD_STRING 
34608: ST_TO_ADDR
// animal := CreateHuman ;
34609: LD_ADDR_VAR 0 12
34613: PUSH
34614: CALL_OW 44
34618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34619: LD_VAR 0 12
34623: PPUSH
34624: LD_VAR 0 8
34628: PPUSH
34629: LD_INT 0
34631: PPUSH
34632: CALL 36626 0 3
// end ;
34636: GO 34590
34638: POP
34639: POP
// if tigers then
34640: LD_VAR 0 2
34644: IFFALSE 34728
// for i = 1 to tigers do
34646: LD_ADDR_VAR 0 11
34650: PUSH
34651: DOUBLE
34652: LD_INT 1
34654: DEC
34655: ST_TO_ADDR
34656: LD_VAR 0 2
34660: PUSH
34661: FOR_TO
34662: IFFALSE 34726
// begin hc_class = class_tiger ;
34664: LD_ADDR_OWVAR 28
34668: PUSH
34669: LD_INT 14
34671: ST_TO_ADDR
// hc_gallery =  ;
34672: LD_ADDR_OWVAR 33
34676: PUSH
34677: LD_STRING 
34679: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34680: LD_ADDR_OWVAR 35
34684: PUSH
34685: LD_INT 7
34687: NEG
34688: PPUSH
34689: LD_INT 7
34691: PPUSH
34692: CALL_OW 12
34696: ST_TO_ADDR
// animal := CreateHuman ;
34697: LD_ADDR_VAR 0 12
34701: PUSH
34702: CALL_OW 44
34706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34707: LD_VAR 0 12
34711: PPUSH
34712: LD_VAR 0 8
34716: PPUSH
34717: LD_INT 0
34719: PPUSH
34720: CALL 36626 0 3
// end ;
34724: GO 34661
34726: POP
34727: POP
// if apemans then
34728: LD_VAR 0 3
34732: IFFALSE 34855
// for i = 1 to apemans do
34734: LD_ADDR_VAR 0 11
34738: PUSH
34739: DOUBLE
34740: LD_INT 1
34742: DEC
34743: ST_TO_ADDR
34744: LD_VAR 0 3
34748: PUSH
34749: FOR_TO
34750: IFFALSE 34853
// begin hc_class = class_apeman ;
34752: LD_ADDR_OWVAR 28
34756: PUSH
34757: LD_INT 12
34759: ST_TO_ADDR
// hc_gallery =  ;
34760: LD_ADDR_OWVAR 33
34764: PUSH
34765: LD_STRING 
34767: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34768: LD_ADDR_OWVAR 35
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PPUSH
34777: LD_INT 2
34779: PPUSH
34780: CALL_OW 12
34784: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34785: LD_ADDR_OWVAR 31
34789: PUSH
34790: LD_INT 1
34792: PPUSH
34793: LD_INT 3
34795: PPUSH
34796: CALL_OW 12
34800: PUSH
34801: LD_INT 1
34803: PPUSH
34804: LD_INT 3
34806: PPUSH
34807: CALL_OW 12
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: ST_TO_ADDR
// animal := CreateHuman ;
34824: LD_ADDR_VAR 0 12
34828: PUSH
34829: CALL_OW 44
34833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34834: LD_VAR 0 12
34838: PPUSH
34839: LD_VAR 0 8
34843: PPUSH
34844: LD_INT 0
34846: PPUSH
34847: CALL 36626 0 3
// end ;
34851: GO 34749
34853: POP
34854: POP
// if enchidnas then
34855: LD_VAR 0 4
34859: IFFALSE 34926
// for i = 1 to enchidnas do
34861: LD_ADDR_VAR 0 11
34865: PUSH
34866: DOUBLE
34867: LD_INT 1
34869: DEC
34870: ST_TO_ADDR
34871: LD_VAR 0 4
34875: PUSH
34876: FOR_TO
34877: IFFALSE 34924
// begin hc_class = 13 ;
34879: LD_ADDR_OWVAR 28
34883: PUSH
34884: LD_INT 13
34886: ST_TO_ADDR
// hc_gallery =  ;
34887: LD_ADDR_OWVAR 33
34891: PUSH
34892: LD_STRING 
34894: ST_TO_ADDR
// animal := CreateHuman ;
34895: LD_ADDR_VAR 0 12
34899: PUSH
34900: CALL_OW 44
34904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34905: LD_VAR 0 12
34909: PPUSH
34910: LD_VAR 0 8
34914: PPUSH
34915: LD_INT 0
34917: PPUSH
34918: CALL 36626 0 3
// end ;
34922: GO 34876
34924: POP
34925: POP
// if fishes then
34926: LD_VAR 0 7
34930: IFFALSE 34997
// for i = 1 to fishes do
34932: LD_ADDR_VAR 0 11
34936: PUSH
34937: DOUBLE
34938: LD_INT 1
34940: DEC
34941: ST_TO_ADDR
34942: LD_VAR 0 7
34946: PUSH
34947: FOR_TO
34948: IFFALSE 34995
// begin hc_class = 20 ;
34950: LD_ADDR_OWVAR 28
34954: PUSH
34955: LD_INT 20
34957: ST_TO_ADDR
// hc_gallery =  ;
34958: LD_ADDR_OWVAR 33
34962: PUSH
34963: LD_STRING 
34965: ST_TO_ADDR
// animal := CreateHuman ;
34966: LD_ADDR_VAR 0 12
34970: PUSH
34971: CALL_OW 44
34975: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
34976: LD_VAR 0 12
34980: PPUSH
34981: LD_VAR 0 9
34985: PPUSH
34986: LD_INT 0
34988: PPUSH
34989: CALL 36626 0 3
// end ;
34993: GO 34947
34995: POP
34996: POP
// end ;
34997: LD_VAR 0 10
35001: RET
// export function WantHeal ( sci , unit ) ; begin
35002: LD_INT 0
35004: PPUSH
// if GetTaskList ( sci ) > 0 then
35005: LD_VAR 0 1
35009: PPUSH
35010: CALL_OW 437
35014: PUSH
35015: LD_INT 0
35017: GREATER
35018: IFFALSE 35088
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35020: LD_VAR 0 1
35024: PPUSH
35025: CALL_OW 437
35029: PUSH
35030: LD_INT 1
35032: ARRAY
35033: PUSH
35034: LD_INT 1
35036: ARRAY
35037: PUSH
35038: LD_STRING l
35040: EQUAL
35041: PUSH
35042: LD_VAR 0 1
35046: PPUSH
35047: CALL_OW 437
35051: PUSH
35052: LD_INT 1
35054: ARRAY
35055: PUSH
35056: LD_INT 4
35058: ARRAY
35059: PUSH
35060: LD_VAR 0 2
35064: EQUAL
35065: AND
35066: IFFALSE 35078
// result := true else
35068: LD_ADDR_VAR 0 3
35072: PUSH
35073: LD_INT 1
35075: ST_TO_ADDR
35076: GO 35086
// result := false ;
35078: LD_ADDR_VAR 0 3
35082: PUSH
35083: LD_INT 0
35085: ST_TO_ADDR
// end else
35086: GO 35096
// result := false ;
35088: LD_ADDR_VAR 0 3
35092: PUSH
35093: LD_INT 0
35095: ST_TO_ADDR
// end ;
35096: LD_VAR 0 3
35100: RET
// export function HealTarget ( sci ) ; begin
35101: LD_INT 0
35103: PPUSH
// if not sci then
35104: LD_VAR 0 1
35108: NOT
35109: IFFALSE 35113
// exit ;
35111: GO 35178
// result := 0 ;
35113: LD_ADDR_VAR 0 2
35117: PUSH
35118: LD_INT 0
35120: ST_TO_ADDR
// if GetTaskList ( sci ) then
35121: LD_VAR 0 1
35125: PPUSH
35126: CALL_OW 437
35130: IFFALSE 35178
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35132: LD_VAR 0 1
35136: PPUSH
35137: CALL_OW 437
35141: PUSH
35142: LD_INT 1
35144: ARRAY
35145: PUSH
35146: LD_INT 1
35148: ARRAY
35149: PUSH
35150: LD_STRING l
35152: EQUAL
35153: IFFALSE 35178
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35155: LD_ADDR_VAR 0 2
35159: PUSH
35160: LD_VAR 0 1
35164: PPUSH
35165: CALL_OW 437
35169: PUSH
35170: LD_INT 1
35172: ARRAY
35173: PUSH
35174: LD_INT 4
35176: ARRAY
35177: ST_TO_ADDR
// end ;
35178: LD_VAR 0 2
35182: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35183: LD_INT 0
35185: PPUSH
35186: PPUSH
35187: PPUSH
35188: PPUSH
// if not base_units then
35189: LD_VAR 0 1
35193: NOT
35194: IFFALSE 35198
// exit ;
35196: GO 35285
// result := false ;
35198: LD_ADDR_VAR 0 2
35202: PUSH
35203: LD_INT 0
35205: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35206: LD_ADDR_VAR 0 5
35210: PUSH
35211: LD_VAR 0 1
35215: PPUSH
35216: LD_INT 21
35218: PUSH
35219: LD_INT 3
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PPUSH
35226: CALL_OW 72
35230: ST_TO_ADDR
// if not tmp then
35231: LD_VAR 0 5
35235: NOT
35236: IFFALSE 35240
// exit ;
35238: GO 35285
// for i in tmp do
35240: LD_ADDR_VAR 0 3
35244: PUSH
35245: LD_VAR 0 5
35249: PUSH
35250: FOR_IN
35251: IFFALSE 35283
// begin result := EnemyInRange ( i , 22 ) ;
35253: LD_ADDR_VAR 0 2
35257: PUSH
35258: LD_VAR 0 3
35262: PPUSH
35263: LD_INT 22
35265: PPUSH
35266: CALL 32872 0 2
35270: ST_TO_ADDR
// if result then
35271: LD_VAR 0 2
35275: IFFALSE 35281
// exit ;
35277: POP
35278: POP
35279: GO 35285
// end ;
35281: GO 35250
35283: POP
35284: POP
// end ;
35285: LD_VAR 0 2
35289: RET
// export function FilterByTag ( units , tag ) ; begin
35290: LD_INT 0
35292: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35293: LD_ADDR_VAR 0 3
35297: PUSH
35298: LD_VAR 0 1
35302: PPUSH
35303: LD_INT 120
35305: PUSH
35306: LD_VAR 0 2
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PPUSH
35315: CALL_OW 72
35319: ST_TO_ADDR
// end ;
35320: LD_VAR 0 3
35324: RET
// export function IsDriver ( un ) ; begin
35325: LD_INT 0
35327: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35328: LD_ADDR_VAR 0 2
35332: PUSH
35333: LD_VAR 0 1
35337: PUSH
35338: LD_INT 55
35340: PUSH
35341: EMPTY
35342: LIST
35343: PPUSH
35344: CALL_OW 69
35348: IN
35349: ST_TO_ADDR
// end ;
35350: LD_VAR 0 2
35354: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35355: LD_INT 0
35357: PPUSH
35358: PPUSH
// list := [ ] ;
35359: LD_ADDR_VAR 0 5
35363: PUSH
35364: EMPTY
35365: ST_TO_ADDR
// case d of 0 :
35366: LD_VAR 0 3
35370: PUSH
35371: LD_INT 0
35373: DOUBLE
35374: EQUAL
35375: IFTRUE 35379
35377: GO 35512
35379: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35380: LD_ADDR_VAR 0 5
35384: PUSH
35385: LD_VAR 0 1
35389: PUSH
35390: LD_INT 4
35392: MINUS
35393: PUSH
35394: LD_VAR 0 2
35398: PUSH
35399: LD_INT 4
35401: MINUS
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: LIST
35410: PUSH
35411: LD_VAR 0 1
35415: PUSH
35416: LD_INT 3
35418: MINUS
35419: PUSH
35420: LD_VAR 0 2
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: LIST
35432: PUSH
35433: LD_VAR 0 1
35437: PUSH
35438: LD_INT 4
35440: PLUS
35441: PUSH
35442: LD_VAR 0 2
35446: PUSH
35447: LD_INT 4
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: LIST
35454: PUSH
35455: LD_VAR 0 1
35459: PUSH
35460: LD_INT 3
35462: PLUS
35463: PUSH
35464: LD_VAR 0 2
35468: PUSH
35469: LD_INT 3
35471: PLUS
35472: PUSH
35473: LD_INT 5
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: LIST
35480: PUSH
35481: LD_VAR 0 1
35485: PUSH
35486: LD_VAR 0 2
35490: PUSH
35491: LD_INT 4
35493: PLUS
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: ST_TO_ADDR
// end ; 1 :
35510: GO 36210
35512: LD_INT 1
35514: DOUBLE
35515: EQUAL
35516: IFTRUE 35520
35518: GO 35653
35520: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35521: LD_ADDR_VAR 0 5
35525: PUSH
35526: LD_VAR 0 1
35530: PUSH
35531: LD_VAR 0 2
35535: PUSH
35536: LD_INT 4
35538: MINUS
35539: PUSH
35540: LD_INT 3
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: LIST
35547: PUSH
35548: LD_VAR 0 1
35552: PUSH
35553: LD_INT 3
35555: MINUS
35556: PUSH
35557: LD_VAR 0 2
35561: PUSH
35562: LD_INT 3
35564: MINUS
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: LIST
35573: PUSH
35574: LD_VAR 0 1
35578: PUSH
35579: LD_INT 4
35581: MINUS
35582: PUSH
35583: LD_VAR 0 2
35587: PUSH
35588: LD_INT 1
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: PUSH
35596: LD_VAR 0 1
35600: PUSH
35601: LD_VAR 0 2
35605: PUSH
35606: LD_INT 3
35608: PLUS
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: PUSH
35618: LD_VAR 0 1
35622: PUSH
35623: LD_INT 4
35625: PLUS
35626: PUSH
35627: LD_VAR 0 2
35631: PUSH
35632: LD_INT 4
35634: PLUS
35635: PUSH
35636: LD_INT 5
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: LIST
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
// end ; 2 :
35651: GO 36210
35653: LD_INT 2
35655: DOUBLE
35656: EQUAL
35657: IFTRUE 35661
35659: GO 35790
35661: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35662: LD_ADDR_VAR 0 5
35666: PUSH
35667: LD_VAR 0 1
35671: PUSH
35672: LD_VAR 0 2
35676: PUSH
35677: LD_INT 3
35679: MINUS
35680: PUSH
35681: LD_INT 3
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: PUSH
35689: LD_VAR 0 1
35693: PUSH
35694: LD_INT 4
35696: PLUS
35697: PUSH
35698: LD_VAR 0 2
35702: PUSH
35703: LD_INT 4
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: LIST
35710: PUSH
35711: LD_VAR 0 1
35715: PUSH
35716: LD_VAR 0 2
35720: PUSH
35721: LD_INT 4
35723: PLUS
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: LIST
35732: PUSH
35733: LD_VAR 0 1
35737: PUSH
35738: LD_INT 3
35740: MINUS
35741: PUSH
35742: LD_VAR 0 2
35746: PUSH
35747: LD_INT 1
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: LIST
35754: PUSH
35755: LD_VAR 0 1
35759: PUSH
35760: LD_INT 4
35762: MINUS
35763: PUSH
35764: LD_VAR 0 2
35768: PUSH
35769: LD_INT 4
35771: MINUS
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: ST_TO_ADDR
// end ; 3 :
35788: GO 36210
35790: LD_INT 3
35792: DOUBLE
35793: EQUAL
35794: IFTRUE 35798
35796: GO 35931
35798: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35799: LD_ADDR_VAR 0 5
35803: PUSH
35804: LD_VAR 0 1
35808: PUSH
35809: LD_INT 3
35811: PLUS
35812: PUSH
35813: LD_VAR 0 2
35817: PUSH
35818: LD_INT 4
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: LIST
35825: PUSH
35826: LD_VAR 0 1
35830: PUSH
35831: LD_INT 4
35833: PLUS
35834: PUSH
35835: LD_VAR 0 2
35839: PUSH
35840: LD_INT 4
35842: PLUS
35843: PUSH
35844: LD_INT 5
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: PUSH
35852: LD_VAR 0 1
35856: PUSH
35857: LD_INT 4
35859: MINUS
35860: PUSH
35861: LD_VAR 0 2
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: LIST
35873: PUSH
35874: LD_VAR 0 1
35878: PUSH
35879: LD_VAR 0 2
35883: PUSH
35884: LD_INT 4
35886: MINUS
35887: PUSH
35888: LD_INT 3
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: PUSH
35896: LD_VAR 0 1
35900: PUSH
35901: LD_INT 3
35903: MINUS
35904: PUSH
35905: LD_VAR 0 2
35909: PUSH
35910: LD_INT 3
35912: MINUS
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: ST_TO_ADDR
// end ; 4 :
35929: GO 36210
35931: LD_INT 4
35933: DOUBLE
35934: EQUAL
35935: IFTRUE 35939
35937: GO 36072
35939: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35940: LD_ADDR_VAR 0 5
35944: PUSH
35945: LD_VAR 0 1
35949: PUSH
35950: LD_VAR 0 2
35954: PUSH
35955: LD_INT 4
35957: PLUS
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: LIST
35966: PUSH
35967: LD_VAR 0 1
35971: PUSH
35972: LD_INT 3
35974: PLUS
35975: PUSH
35976: LD_VAR 0 2
35980: PUSH
35981: LD_INT 3
35983: PLUS
35984: PUSH
35985: LD_INT 5
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: LIST
35992: PUSH
35993: LD_VAR 0 1
35997: PUSH
35998: LD_INT 4
36000: PLUS
36001: PUSH
36002: LD_VAR 0 2
36006: PUSH
36007: LD_INT 4
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: PUSH
36015: LD_VAR 0 1
36019: PUSH
36020: LD_VAR 0 2
36024: PUSH
36025: LD_INT 3
36027: MINUS
36028: PUSH
36029: LD_INT 3
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: PUSH
36037: LD_VAR 0 1
36041: PUSH
36042: LD_INT 4
36044: MINUS
36045: PUSH
36046: LD_VAR 0 2
36050: PUSH
36051: LD_INT 4
36053: MINUS
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: LIST
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: ST_TO_ADDR
// end ; 5 :
36070: GO 36210
36072: LD_INT 5
36074: DOUBLE
36075: EQUAL
36076: IFTRUE 36080
36078: GO 36209
36080: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36081: LD_ADDR_VAR 0 5
36085: PUSH
36086: LD_VAR 0 1
36090: PUSH
36091: LD_INT 4
36093: MINUS
36094: PUSH
36095: LD_VAR 0 2
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: LIST
36107: PUSH
36108: LD_VAR 0 1
36112: PUSH
36113: LD_VAR 0 2
36117: PUSH
36118: LD_INT 4
36120: MINUS
36121: PUSH
36122: LD_INT 3
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: PUSH
36130: LD_VAR 0 1
36134: PUSH
36135: LD_INT 4
36137: PLUS
36138: PUSH
36139: LD_VAR 0 2
36143: PUSH
36144: LD_INT 4
36146: PLUS
36147: PUSH
36148: LD_INT 5
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: PUSH
36156: LD_VAR 0 1
36160: PUSH
36161: LD_INT 3
36163: PLUS
36164: PUSH
36165: LD_VAR 0 2
36169: PUSH
36170: LD_INT 4
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: PUSH
36178: LD_VAR 0 1
36182: PUSH
36183: LD_VAR 0 2
36187: PUSH
36188: LD_INT 3
36190: PLUS
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: ST_TO_ADDR
// end ; end ;
36207: GO 36210
36209: POP
// result := list ;
36210: LD_ADDR_VAR 0 4
36214: PUSH
36215: LD_VAR 0 5
36219: ST_TO_ADDR
// end ;
36220: LD_VAR 0 4
36224: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36225: LD_INT 0
36227: PPUSH
36228: PPUSH
36229: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36230: LD_VAR 0 1
36234: NOT
36235: PUSH
36236: LD_VAR 0 2
36240: PUSH
36241: LD_INT 1
36243: PUSH
36244: LD_INT 2
36246: PUSH
36247: LD_INT 3
36249: PUSH
36250: LD_INT 4
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: IN
36259: NOT
36260: OR
36261: IFFALSE 36265
// exit ;
36263: GO 36348
// tmp := [ ] ;
36265: LD_ADDR_VAR 0 5
36269: PUSH
36270: EMPTY
36271: ST_TO_ADDR
// for i in units do
36272: LD_ADDR_VAR 0 4
36276: PUSH
36277: LD_VAR 0 1
36281: PUSH
36282: FOR_IN
36283: IFFALSE 36317
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36285: LD_ADDR_VAR 0 5
36289: PUSH
36290: LD_VAR 0 5
36294: PPUSH
36295: LD_VAR 0 4
36299: PPUSH
36300: LD_VAR 0 2
36304: PPUSH
36305: CALL_OW 259
36309: PPUSH
36310: CALL 37708 0 2
36314: ST_TO_ADDR
36315: GO 36282
36317: POP
36318: POP
// if not tmp then
36319: LD_VAR 0 5
36323: NOT
36324: IFFALSE 36328
// exit ;
36326: GO 36348
// result := SortListByListDesc ( units , tmp ) ;
36328: LD_ADDR_VAR 0 3
36332: PUSH
36333: LD_VAR 0 1
36337: PPUSH
36338: LD_VAR 0 5
36342: PPUSH
36343: CALL_OW 77
36347: ST_TO_ADDR
// end ;
36348: LD_VAR 0 3
36352: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36353: LD_INT 0
36355: PPUSH
36356: PPUSH
36357: PPUSH
// result := false ;
36358: LD_ADDR_VAR 0 3
36362: PUSH
36363: LD_INT 0
36365: ST_TO_ADDR
// if not building then
36366: LD_VAR 0 2
36370: NOT
36371: IFFALSE 36375
// exit ;
36373: GO 36513
// x := GetX ( building ) ;
36375: LD_ADDR_VAR 0 4
36379: PUSH
36380: LD_VAR 0 2
36384: PPUSH
36385: CALL_OW 250
36389: ST_TO_ADDR
// y := GetY ( building ) ;
36390: LD_ADDR_VAR 0 5
36394: PUSH
36395: LD_VAR 0 2
36399: PPUSH
36400: CALL_OW 251
36404: ST_TO_ADDR
// if not x or not y then
36405: LD_VAR 0 4
36409: NOT
36410: PUSH
36411: LD_VAR 0 5
36415: NOT
36416: OR
36417: IFFALSE 36421
// exit ;
36419: GO 36513
// if GetTaskList ( unit ) then
36421: LD_VAR 0 1
36425: PPUSH
36426: CALL_OW 437
36430: IFFALSE 36513
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36432: LD_STRING e
36434: PUSH
36435: LD_VAR 0 1
36439: PPUSH
36440: CALL_OW 437
36444: PUSH
36445: LD_INT 1
36447: ARRAY
36448: PUSH
36449: LD_INT 1
36451: ARRAY
36452: EQUAL
36453: PUSH
36454: LD_VAR 0 4
36458: PUSH
36459: LD_VAR 0 1
36463: PPUSH
36464: CALL_OW 437
36468: PUSH
36469: LD_INT 1
36471: ARRAY
36472: PUSH
36473: LD_INT 2
36475: ARRAY
36476: EQUAL
36477: AND
36478: PUSH
36479: LD_VAR 0 5
36483: PUSH
36484: LD_VAR 0 1
36488: PPUSH
36489: CALL_OW 437
36493: PUSH
36494: LD_INT 1
36496: ARRAY
36497: PUSH
36498: LD_INT 3
36500: ARRAY
36501: EQUAL
36502: AND
36503: IFFALSE 36513
// result := true end ;
36505: LD_ADDR_VAR 0 3
36509: PUSH
36510: LD_INT 1
36512: ST_TO_ADDR
// end ;
36513: LD_VAR 0 3
36517: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36518: LD_INT 0
36520: PPUSH
// result := false ;
36521: LD_ADDR_VAR 0 4
36525: PUSH
36526: LD_INT 0
36528: ST_TO_ADDR
// if GetTaskList ( unit ) then
36529: LD_VAR 0 1
36533: PPUSH
36534: CALL_OW 437
36538: IFFALSE 36621
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36540: LD_STRING M
36542: PUSH
36543: LD_VAR 0 1
36547: PPUSH
36548: CALL_OW 437
36552: PUSH
36553: LD_INT 1
36555: ARRAY
36556: PUSH
36557: LD_INT 1
36559: ARRAY
36560: EQUAL
36561: PUSH
36562: LD_VAR 0 2
36566: PUSH
36567: LD_VAR 0 1
36571: PPUSH
36572: CALL_OW 437
36576: PUSH
36577: LD_INT 1
36579: ARRAY
36580: PUSH
36581: LD_INT 2
36583: ARRAY
36584: EQUAL
36585: AND
36586: PUSH
36587: LD_VAR 0 3
36591: PUSH
36592: LD_VAR 0 1
36596: PPUSH
36597: CALL_OW 437
36601: PUSH
36602: LD_INT 1
36604: ARRAY
36605: PUSH
36606: LD_INT 3
36608: ARRAY
36609: EQUAL
36610: AND
36611: IFFALSE 36621
// result := true ;
36613: LD_ADDR_VAR 0 4
36617: PUSH
36618: LD_INT 1
36620: ST_TO_ADDR
// end ; end ;
36621: LD_VAR 0 4
36625: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36626: LD_INT 0
36628: PPUSH
36629: PPUSH
36630: PPUSH
36631: PPUSH
// if not unit or not area then
36632: LD_VAR 0 1
36636: NOT
36637: PUSH
36638: LD_VAR 0 2
36642: NOT
36643: OR
36644: IFFALSE 36648
// exit ;
36646: GO 36811
// tmp := AreaToList ( area , i ) ;
36648: LD_ADDR_VAR 0 6
36652: PUSH
36653: LD_VAR 0 2
36657: PPUSH
36658: LD_VAR 0 5
36662: PPUSH
36663: CALL_OW 517
36667: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36668: LD_ADDR_VAR 0 5
36672: PUSH
36673: DOUBLE
36674: LD_INT 1
36676: DEC
36677: ST_TO_ADDR
36678: LD_VAR 0 6
36682: PUSH
36683: LD_INT 1
36685: ARRAY
36686: PUSH
36687: FOR_TO
36688: IFFALSE 36809
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36690: LD_ADDR_VAR 0 7
36694: PUSH
36695: LD_VAR 0 6
36699: PUSH
36700: LD_INT 1
36702: ARRAY
36703: PUSH
36704: LD_VAR 0 5
36708: ARRAY
36709: PUSH
36710: LD_VAR 0 6
36714: PUSH
36715: LD_INT 2
36717: ARRAY
36718: PUSH
36719: LD_VAR 0 5
36723: ARRAY
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
36729: LD_INT 92
36731: PUSH
36732: LD_VAR 0 7
36736: PUSH
36737: LD_INT 1
36739: ARRAY
36740: PUSH
36741: LD_VAR 0 7
36745: PUSH
36746: LD_INT 2
36748: ARRAY
36749: PUSH
36750: LD_INT 3
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: PPUSH
36759: CALL_OW 69
36763: PUSH
36764: LD_INT 0
36766: EQUAL
36767: IFFALSE 36807
// begin PlaceUnitArea ( unit , area , mode ) ;
36769: LD_VAR 0 1
36773: PPUSH
36774: LD_VAR 0 2
36778: PPUSH
36779: LD_VAR 0 3
36783: PPUSH
36784: CALL_OW 49
// result := IsPlaced ( unit ) ;
36788: LD_ADDR_VAR 0 4
36792: PUSH
36793: LD_VAR 0 1
36797: PPUSH
36798: CALL_OW 305
36802: ST_TO_ADDR
// exit ;
36803: POP
36804: POP
36805: GO 36811
// end ; end ;
36807: GO 36687
36809: POP
36810: POP
// end ;
36811: LD_VAR 0 4
36815: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36816: LD_INT 0
36818: PPUSH
36819: PPUSH
36820: PPUSH
// if not side or side > 8 then
36821: LD_VAR 0 1
36825: NOT
36826: PUSH
36827: LD_VAR 0 1
36831: PUSH
36832: LD_INT 8
36834: GREATER
36835: OR
36836: IFFALSE 36840
// exit ;
36838: GO 37027
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36840: LD_ADDR_VAR 0 4
36844: PUSH
36845: LD_INT 22
36847: PUSH
36848: LD_VAR 0 1
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 21
36859: PUSH
36860: LD_INT 3
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PPUSH
36871: CALL_OW 69
36875: ST_TO_ADDR
// if not tmp then
36876: LD_VAR 0 4
36880: NOT
36881: IFFALSE 36885
// exit ;
36883: GO 37027
// enable_addtolog := true ;
36885: LD_ADDR_OWVAR 81
36889: PUSH
36890: LD_INT 1
36892: ST_TO_ADDR
// AddToLog ( [ ) ;
36893: LD_STRING [
36895: PPUSH
36896: CALL_OW 561
// for i in tmp do
36900: LD_ADDR_VAR 0 3
36904: PUSH
36905: LD_VAR 0 4
36909: PUSH
36910: FOR_IN
36911: IFFALSE 37018
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36913: LD_STRING [
36915: PUSH
36916: LD_VAR 0 3
36920: PPUSH
36921: CALL_OW 266
36925: STR
36926: PUSH
36927: LD_STRING , 
36929: STR
36930: PUSH
36931: LD_VAR 0 3
36935: PPUSH
36936: CALL_OW 250
36940: STR
36941: PUSH
36942: LD_STRING , 
36944: STR
36945: PUSH
36946: LD_VAR 0 3
36950: PPUSH
36951: CALL_OW 251
36955: STR
36956: PUSH
36957: LD_STRING , 
36959: STR
36960: PUSH
36961: LD_VAR 0 3
36965: PPUSH
36966: CALL_OW 254
36970: STR
36971: PUSH
36972: LD_STRING , 
36974: STR
36975: PUSH
36976: LD_VAR 0 3
36980: PPUSH
36981: LD_INT 1
36983: PPUSH
36984: CALL_OW 268
36988: STR
36989: PUSH
36990: LD_STRING , 
36992: STR
36993: PUSH
36994: LD_VAR 0 3
36998: PPUSH
36999: LD_INT 2
37001: PPUSH
37002: CALL_OW 268
37006: STR
37007: PUSH
37008: LD_STRING ],
37010: STR
37011: PPUSH
37012: CALL_OW 561
// end ;
37016: GO 36910
37018: POP
37019: POP
// AddToLog ( ]; ) ;
37020: LD_STRING ];
37022: PPUSH
37023: CALL_OW 561
// end ;
37027: LD_VAR 0 2
37031: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37032: LD_INT 0
37034: PPUSH
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
// if not area or not rate or not max then
37039: LD_VAR 0 1
37043: NOT
37044: PUSH
37045: LD_VAR 0 2
37049: NOT
37050: OR
37051: PUSH
37052: LD_VAR 0 4
37056: NOT
37057: OR
37058: IFFALSE 37062
// exit ;
37060: GO 37251
// while 1 do
37062: LD_INT 1
37064: IFFALSE 37251
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37066: LD_ADDR_VAR 0 9
37070: PUSH
37071: LD_VAR 0 1
37075: PPUSH
37076: LD_INT 1
37078: PPUSH
37079: CALL_OW 287
37083: PUSH
37084: LD_INT 10
37086: MUL
37087: ST_TO_ADDR
// r := rate / 10 ;
37088: LD_ADDR_VAR 0 7
37092: PUSH
37093: LD_VAR 0 2
37097: PUSH
37098: LD_INT 10
37100: DIVREAL
37101: ST_TO_ADDR
// time := 1 1$00 ;
37102: LD_ADDR_VAR 0 8
37106: PUSH
37107: LD_INT 2100
37109: ST_TO_ADDR
// if amount < min then
37110: LD_VAR 0 9
37114: PUSH
37115: LD_VAR 0 3
37119: LESS
37120: IFFALSE 37138
// r := r * 2 else
37122: LD_ADDR_VAR 0 7
37126: PUSH
37127: LD_VAR 0 7
37131: PUSH
37132: LD_INT 2
37134: MUL
37135: ST_TO_ADDR
37136: GO 37164
// if amount > max then
37138: LD_VAR 0 9
37142: PUSH
37143: LD_VAR 0 4
37147: GREATER
37148: IFFALSE 37164
// r := r / 2 ;
37150: LD_ADDR_VAR 0 7
37154: PUSH
37155: LD_VAR 0 7
37159: PUSH
37160: LD_INT 2
37162: DIVREAL
37163: ST_TO_ADDR
// time := time / r ;
37164: LD_ADDR_VAR 0 8
37168: PUSH
37169: LD_VAR 0 8
37173: PUSH
37174: LD_VAR 0 7
37178: DIVREAL
37179: ST_TO_ADDR
// if time < 0 then
37180: LD_VAR 0 8
37184: PUSH
37185: LD_INT 0
37187: LESS
37188: IFFALSE 37205
// time := time * - 1 ;
37190: LD_ADDR_VAR 0 8
37194: PUSH
37195: LD_VAR 0 8
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: MUL
37204: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37205: LD_VAR 0 8
37209: PUSH
37210: LD_INT 35
37212: PPUSH
37213: LD_INT 875
37215: PPUSH
37216: CALL_OW 12
37220: PLUS
37221: PPUSH
37222: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37226: LD_INT 1
37228: PPUSH
37229: LD_INT 5
37231: PPUSH
37232: CALL_OW 12
37236: PPUSH
37237: LD_VAR 0 1
37241: PPUSH
37242: LD_INT 1
37244: PPUSH
37245: CALL_OW 55
// end ;
37249: GO 37062
// end ;
37251: LD_VAR 0 5
37255: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37256: LD_INT 0
37258: PPUSH
37259: PPUSH
37260: PPUSH
37261: PPUSH
37262: PPUSH
37263: PPUSH
37264: PPUSH
37265: PPUSH
// if not turrets or not factories then
37266: LD_VAR 0 1
37270: NOT
37271: PUSH
37272: LD_VAR 0 2
37276: NOT
37277: OR
37278: IFFALSE 37282
// exit ;
37280: GO 37589
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37282: LD_ADDR_VAR 0 10
37286: PUSH
37287: LD_INT 5
37289: PUSH
37290: LD_INT 6
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: LD_INT 4
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 3
37309: PUSH
37310: LD_INT 5
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 24
37324: PUSH
37325: LD_INT 25
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 23
37334: PUSH
37335: LD_INT 27
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 42
37348: PUSH
37349: LD_INT 43
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 44
37358: PUSH
37359: LD_INT 46
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 45
37368: PUSH
37369: LD_INT 47
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: LIST
37385: ST_TO_ADDR
// result := [ ] ;
37386: LD_ADDR_VAR 0 3
37390: PUSH
37391: EMPTY
37392: ST_TO_ADDR
// for i in turrets do
37393: LD_ADDR_VAR 0 4
37397: PUSH
37398: LD_VAR 0 1
37402: PUSH
37403: FOR_IN
37404: IFFALSE 37587
// begin nat := GetNation ( i ) ;
37406: LD_ADDR_VAR 0 7
37410: PUSH
37411: LD_VAR 0 4
37415: PPUSH
37416: CALL_OW 248
37420: ST_TO_ADDR
// weapon := 0 ;
37421: LD_ADDR_VAR 0 8
37425: PUSH
37426: LD_INT 0
37428: ST_TO_ADDR
// if not nat then
37429: LD_VAR 0 7
37433: NOT
37434: IFFALSE 37438
// continue ;
37436: GO 37403
// for j in list [ nat ] do
37438: LD_ADDR_VAR 0 5
37442: PUSH
37443: LD_VAR 0 10
37447: PUSH
37448: LD_VAR 0 7
37452: ARRAY
37453: PUSH
37454: FOR_IN
37455: IFFALSE 37496
// if GetBWeapon ( i ) = j [ 1 ] then
37457: LD_VAR 0 4
37461: PPUSH
37462: CALL_OW 269
37466: PUSH
37467: LD_VAR 0 5
37471: PUSH
37472: LD_INT 1
37474: ARRAY
37475: EQUAL
37476: IFFALSE 37494
// begin weapon := j [ 2 ] ;
37478: LD_ADDR_VAR 0 8
37482: PUSH
37483: LD_VAR 0 5
37487: PUSH
37488: LD_INT 2
37490: ARRAY
37491: ST_TO_ADDR
// break ;
37492: GO 37496
// end ;
37494: GO 37454
37496: POP
37497: POP
// if not weapon then
37498: LD_VAR 0 8
37502: NOT
37503: IFFALSE 37507
// continue ;
37505: GO 37403
// for k in factories do
37507: LD_ADDR_VAR 0 6
37511: PUSH
37512: LD_VAR 0 2
37516: PUSH
37517: FOR_IN
37518: IFFALSE 37583
// begin weapons := AvailableWeaponList ( k ) ;
37520: LD_ADDR_VAR 0 9
37524: PUSH
37525: LD_VAR 0 6
37529: PPUSH
37530: CALL_OW 478
37534: ST_TO_ADDR
// if not weapons then
37535: LD_VAR 0 9
37539: NOT
37540: IFFALSE 37544
// continue ;
37542: GO 37517
// if weapon in weapons then
37544: LD_VAR 0 8
37548: PUSH
37549: LD_VAR 0 9
37553: IN
37554: IFFALSE 37581
// begin result := [ i , weapon ] ;
37556: LD_ADDR_VAR 0 3
37560: PUSH
37561: LD_VAR 0 4
37565: PUSH
37566: LD_VAR 0 8
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: ST_TO_ADDR
// exit ;
37575: POP
37576: POP
37577: POP
37578: POP
37579: GO 37589
// end ; end ;
37581: GO 37517
37583: POP
37584: POP
// end ;
37585: GO 37403
37587: POP
37588: POP
// end ;
37589: LD_VAR 0 3
37593: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37594: LD_INT 0
37596: PPUSH
// if not side or side > 8 then
37597: LD_VAR 0 3
37601: NOT
37602: PUSH
37603: LD_VAR 0 3
37607: PUSH
37608: LD_INT 8
37610: GREATER
37611: OR
37612: IFFALSE 37616
// exit ;
37614: GO 37675
// if not range then
37616: LD_VAR 0 4
37620: NOT
37621: IFFALSE 37632
// range := - 12 ;
37623: LD_ADDR_VAR 0 4
37627: PUSH
37628: LD_INT 12
37630: NEG
37631: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37632: LD_VAR 0 1
37636: PPUSH
37637: LD_VAR 0 2
37641: PPUSH
37642: LD_VAR 0 3
37646: PPUSH
37647: LD_VAR 0 4
37651: PPUSH
37652: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37656: LD_VAR 0 1
37660: PPUSH
37661: LD_VAR 0 2
37665: PPUSH
37666: LD_VAR 0 3
37670: PPUSH
37671: CALL_OW 331
// end ;
37675: LD_VAR 0 5
37679: RET
// export function Video ( mode ) ; begin
37680: LD_INT 0
37682: PPUSH
// ingame_video = mode ;
37683: LD_ADDR_OWVAR 52
37687: PUSH
37688: LD_VAR 0 1
37692: ST_TO_ADDR
// interface_hidden = mode ;
37693: LD_ADDR_OWVAR 54
37697: PUSH
37698: LD_VAR 0 1
37702: ST_TO_ADDR
// end ;
37703: LD_VAR 0 2
37707: RET
// export function Join ( array , element ) ; begin
37708: LD_INT 0
37710: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37711: LD_ADDR_VAR 0 3
37715: PUSH
37716: LD_VAR 0 1
37720: PPUSH
37721: LD_VAR 0 1
37725: PUSH
37726: LD_INT 1
37728: PLUS
37729: PPUSH
37730: LD_VAR 0 2
37734: PPUSH
37735: CALL_OW 1
37739: ST_TO_ADDR
// end ;
37740: LD_VAR 0 3
37744: RET
// export function JoinUnion ( array , element ) ; begin
37745: LD_INT 0
37747: PPUSH
// result := array union element ;
37748: LD_ADDR_VAR 0 3
37752: PUSH
37753: LD_VAR 0 1
37757: PUSH
37758: LD_VAR 0 2
37762: UNION
37763: ST_TO_ADDR
// end ;
37764: LD_VAR 0 3
37768: RET
// export function GetBehemoths ( side ) ; begin
37769: LD_INT 0
37771: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
37772: LD_ADDR_VAR 0 2
37776: PUSH
37777: LD_INT 22
37779: PUSH
37780: LD_VAR 0 1
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 31
37791: PUSH
37792: LD_INT 25
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PPUSH
37803: CALL_OW 69
37807: ST_TO_ADDR
// end ;
37808: LD_VAR 0 2
37812: RET
// export function Shuffle ( array ) ; var i , index ; begin
37813: LD_INT 0
37815: PPUSH
37816: PPUSH
37817: PPUSH
// result := [ ] ;
37818: LD_ADDR_VAR 0 2
37822: PUSH
37823: EMPTY
37824: ST_TO_ADDR
// if not array then
37825: LD_VAR 0 1
37829: NOT
37830: IFFALSE 37834
// exit ;
37832: GO 37933
// Randomize ;
37834: CALL_OW 10
// for i = array downto 1 do
37838: LD_ADDR_VAR 0 3
37842: PUSH
37843: DOUBLE
37844: LD_VAR 0 1
37848: INC
37849: ST_TO_ADDR
37850: LD_INT 1
37852: PUSH
37853: FOR_DOWNTO
37854: IFFALSE 37931
// begin index := rand ( 1 , array ) ;
37856: LD_ADDR_VAR 0 4
37860: PUSH
37861: LD_INT 1
37863: PPUSH
37864: LD_VAR 0 1
37868: PPUSH
37869: CALL_OW 12
37873: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37874: LD_ADDR_VAR 0 2
37878: PUSH
37879: LD_VAR 0 2
37883: PPUSH
37884: LD_VAR 0 2
37888: PUSH
37889: LD_INT 1
37891: PLUS
37892: PPUSH
37893: LD_VAR 0 1
37897: PUSH
37898: LD_VAR 0 4
37902: ARRAY
37903: PPUSH
37904: CALL_OW 2
37908: ST_TO_ADDR
// array := Delete ( array , index ) ;
37909: LD_ADDR_VAR 0 1
37913: PUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: LD_VAR 0 4
37923: PPUSH
37924: CALL_OW 3
37928: ST_TO_ADDR
// end ;
37929: GO 37853
37931: POP
37932: POP
// end ;
37933: LD_VAR 0 2
37937: RET
// export function GetBaseMaterials ( base ) ; begin
37938: LD_INT 0
37940: PPUSH
// result := [ 0 , 0 , 0 ] ;
37941: LD_ADDR_VAR 0 2
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: LIST
37959: ST_TO_ADDR
// if not base then
37960: LD_VAR 0 1
37964: NOT
37965: IFFALSE 37969
// exit ;
37967: GO 38018
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37969: LD_ADDR_VAR 0 2
37973: PUSH
37974: LD_VAR 0 1
37978: PPUSH
37979: LD_INT 1
37981: PPUSH
37982: CALL_OW 275
37986: PUSH
37987: LD_VAR 0 1
37991: PPUSH
37992: LD_INT 2
37994: PPUSH
37995: CALL_OW 275
37999: PUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: LD_INT 3
38007: PPUSH
38008: CALL_OW 275
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: LIST
38017: ST_TO_ADDR
// end ;
38018: LD_VAR 0 2
38022: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38023: LD_INT 0
38025: PPUSH
38026: PPUSH
// result := array ;
38027: LD_ADDR_VAR 0 3
38031: PUSH
38032: LD_VAR 0 1
38036: ST_TO_ADDR
// if size >= result then
38037: LD_VAR 0 2
38041: PUSH
38042: LD_VAR 0 3
38046: GREATEREQUAL
38047: IFFALSE 38051
// exit ;
38049: GO 38101
// if size then
38051: LD_VAR 0 2
38055: IFFALSE 38101
// for i := array downto size do
38057: LD_ADDR_VAR 0 4
38061: PUSH
38062: DOUBLE
38063: LD_VAR 0 1
38067: INC
38068: ST_TO_ADDR
38069: LD_VAR 0 2
38073: PUSH
38074: FOR_DOWNTO
38075: IFFALSE 38099
// result := Delete ( result , result ) ;
38077: LD_ADDR_VAR 0 3
38081: PUSH
38082: LD_VAR 0 3
38086: PPUSH
38087: LD_VAR 0 3
38091: PPUSH
38092: CALL_OW 3
38096: ST_TO_ADDR
38097: GO 38074
38099: POP
38100: POP
// end ;
38101: LD_VAR 0 3
38105: RET
// export function ComExit ( unit ) ; var tmp ; begin
38106: LD_INT 0
38108: PPUSH
38109: PPUSH
// if not IsInUnit ( unit ) then
38110: LD_VAR 0 1
38114: PPUSH
38115: CALL_OW 310
38119: NOT
38120: IFFALSE 38124
// exit ;
38122: GO 38184
// tmp := IsInUnit ( unit ) ;
38124: LD_ADDR_VAR 0 3
38128: PUSH
38129: LD_VAR 0 1
38133: PPUSH
38134: CALL_OW 310
38138: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38139: LD_VAR 0 3
38143: PPUSH
38144: CALL_OW 247
38148: PUSH
38149: LD_INT 2
38151: EQUAL
38152: IFFALSE 38165
// ComExitVehicle ( unit ) else
38154: LD_VAR 0 1
38158: PPUSH
38159: CALL_OW 121
38163: GO 38174
// ComExitBuilding ( unit ) ;
38165: LD_VAR 0 1
38169: PPUSH
38170: CALL_OW 122
// result := tmp ;
38174: LD_ADDR_VAR 0 2
38178: PUSH
38179: LD_VAR 0 3
38183: ST_TO_ADDR
// end ;
38184: LD_VAR 0 2
38188: RET
// export function ComExitAll ( units ) ; var i ; begin
38189: LD_INT 0
38191: PPUSH
38192: PPUSH
// if not units then
38193: LD_VAR 0 1
38197: NOT
38198: IFFALSE 38202
// exit ;
38200: GO 38228
// for i in units do
38202: LD_ADDR_VAR 0 3
38206: PUSH
38207: LD_VAR 0 1
38211: PUSH
38212: FOR_IN
38213: IFFALSE 38226
// ComExit ( i ) ;
38215: LD_VAR 0 3
38219: PPUSH
38220: CALL 38106 0 1
38224: GO 38212
38226: POP
38227: POP
// end ;
38228: LD_VAR 0 2
38232: RET
// export function ResetHc ; begin
38233: LD_INT 0
38235: PPUSH
// InitHc ;
38236: CALL_OW 19
// hc_importance := 0 ;
38240: LD_ADDR_OWVAR 32
38244: PUSH
38245: LD_INT 0
38247: ST_TO_ADDR
// end ;
38248: LD_VAR 0 1
38252: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38253: LD_INT 0
38255: PPUSH
38256: PPUSH
38257: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38258: LD_ADDR_VAR 0 6
38262: PUSH
38263: LD_VAR 0 1
38267: PUSH
38268: LD_VAR 0 3
38272: PLUS
38273: PUSH
38274: LD_INT 2
38276: DIV
38277: ST_TO_ADDR
// if _x < 0 then
38278: LD_VAR 0 6
38282: PUSH
38283: LD_INT 0
38285: LESS
38286: IFFALSE 38303
// _x := _x * - 1 ;
38288: LD_ADDR_VAR 0 6
38292: PUSH
38293: LD_VAR 0 6
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: MUL
38302: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38303: LD_ADDR_VAR 0 7
38307: PUSH
38308: LD_VAR 0 2
38312: PUSH
38313: LD_VAR 0 4
38317: PLUS
38318: PUSH
38319: LD_INT 2
38321: DIV
38322: ST_TO_ADDR
// if _y < 0 then
38323: LD_VAR 0 7
38327: PUSH
38328: LD_INT 0
38330: LESS
38331: IFFALSE 38348
// _y := _y * - 1 ;
38333: LD_ADDR_VAR 0 7
38337: PUSH
38338: LD_VAR 0 7
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: MUL
38347: ST_TO_ADDR
// result := [ _x , _y ] ;
38348: LD_ADDR_VAR 0 5
38352: PUSH
38353: LD_VAR 0 6
38357: PUSH
38358: LD_VAR 0 7
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: ST_TO_ADDR
// end ;
38367: LD_VAR 0 5
38371: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38372: LD_INT 0
38374: PPUSH
38375: PPUSH
38376: PPUSH
38377: PPUSH
// task := GetTaskList ( unit ) ;
38378: LD_ADDR_VAR 0 7
38382: PUSH
38383: LD_VAR 0 1
38387: PPUSH
38388: CALL_OW 437
38392: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38393: LD_VAR 0 7
38397: NOT
38398: PUSH
38399: LD_VAR 0 1
38403: PPUSH
38404: LD_VAR 0 2
38408: PPUSH
38409: CALL_OW 308
38413: NOT
38414: AND
38415: IFFALSE 38419
// exit ;
38417: GO 38537
// if IsInArea ( unit , area ) then
38419: LD_VAR 0 1
38423: PPUSH
38424: LD_VAR 0 2
38428: PPUSH
38429: CALL_OW 308
38433: IFFALSE 38451
// begin ComMoveToArea ( unit , goAway ) ;
38435: LD_VAR 0 1
38439: PPUSH
38440: LD_VAR 0 3
38444: PPUSH
38445: CALL_OW 113
// exit ;
38449: GO 38537
// end ; if task [ 1 ] [ 1 ] <> M then
38451: LD_VAR 0 7
38455: PUSH
38456: LD_INT 1
38458: ARRAY
38459: PUSH
38460: LD_INT 1
38462: ARRAY
38463: PUSH
38464: LD_STRING M
38466: NONEQUAL
38467: IFFALSE 38471
// exit ;
38469: GO 38537
// x := task [ 1 ] [ 2 ] ;
38471: LD_ADDR_VAR 0 5
38475: PUSH
38476: LD_VAR 0 7
38480: PUSH
38481: LD_INT 1
38483: ARRAY
38484: PUSH
38485: LD_INT 2
38487: ARRAY
38488: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38489: LD_ADDR_VAR 0 6
38493: PUSH
38494: LD_VAR 0 7
38498: PUSH
38499: LD_INT 1
38501: ARRAY
38502: PUSH
38503: LD_INT 3
38505: ARRAY
38506: ST_TO_ADDR
// if InArea ( x , y , area ) then
38507: LD_VAR 0 5
38511: PPUSH
38512: LD_VAR 0 6
38516: PPUSH
38517: LD_VAR 0 2
38521: PPUSH
38522: CALL_OW 309
38526: IFFALSE 38537
// ComStop ( unit ) ;
38528: LD_VAR 0 1
38532: PPUSH
38533: CALL_OW 141
// end ;
38537: LD_VAR 0 4
38541: RET
// export function Abs ( value ) ; begin
38542: LD_INT 0
38544: PPUSH
// result := value ;
38545: LD_ADDR_VAR 0 2
38549: PUSH
38550: LD_VAR 0 1
38554: ST_TO_ADDR
// if value < 0 then
38555: LD_VAR 0 1
38559: PUSH
38560: LD_INT 0
38562: LESS
38563: IFFALSE 38580
// result := value * - 1 ;
38565: LD_ADDR_VAR 0 2
38569: PUSH
38570: LD_VAR 0 1
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: MUL
38579: ST_TO_ADDR
// end ;
38580: LD_VAR 0 2
38584: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38585: LD_INT 0
38587: PPUSH
38588: PPUSH
38589: PPUSH
38590: PPUSH
38591: PPUSH
38592: PPUSH
38593: PPUSH
38594: PPUSH
// if not unit or not building then
38595: LD_VAR 0 1
38599: NOT
38600: PUSH
38601: LD_VAR 0 2
38605: NOT
38606: OR
38607: IFFALSE 38611
// exit ;
38609: GO 38837
// x := GetX ( building ) ;
38611: LD_ADDR_VAR 0 4
38615: PUSH
38616: LD_VAR 0 2
38620: PPUSH
38621: CALL_OW 250
38625: ST_TO_ADDR
// y := GetY ( building ) ;
38626: LD_ADDR_VAR 0 6
38630: PUSH
38631: LD_VAR 0 2
38635: PPUSH
38636: CALL_OW 251
38640: ST_TO_ADDR
// d := GetDir ( building ) ;
38641: LD_ADDR_VAR 0 8
38645: PUSH
38646: LD_VAR 0 2
38650: PPUSH
38651: CALL_OW 254
38655: ST_TO_ADDR
// r := 4 ;
38656: LD_ADDR_VAR 0 9
38660: PUSH
38661: LD_INT 4
38663: ST_TO_ADDR
// for i := 1 to 5 do
38664: LD_ADDR_VAR 0 10
38668: PUSH
38669: DOUBLE
38670: LD_INT 1
38672: DEC
38673: ST_TO_ADDR
38674: LD_INT 5
38676: PUSH
38677: FOR_TO
38678: IFFALSE 38835
// begin _x := ShiftX ( x , d , r + i ) ;
38680: LD_ADDR_VAR 0 5
38684: PUSH
38685: LD_VAR 0 4
38689: PPUSH
38690: LD_VAR 0 8
38694: PPUSH
38695: LD_VAR 0 9
38699: PUSH
38700: LD_VAR 0 10
38704: PLUS
38705: PPUSH
38706: CALL_OW 272
38710: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38711: LD_ADDR_VAR 0 7
38715: PUSH
38716: LD_VAR 0 6
38720: PPUSH
38721: LD_VAR 0 8
38725: PPUSH
38726: LD_VAR 0 9
38730: PUSH
38731: LD_VAR 0 10
38735: PLUS
38736: PPUSH
38737: CALL_OW 273
38741: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38742: LD_VAR 0 5
38746: PPUSH
38747: LD_VAR 0 7
38751: PPUSH
38752: CALL_OW 488
38756: PUSH
38757: LD_VAR 0 5
38761: PPUSH
38762: LD_VAR 0 7
38766: PPUSH
38767: CALL_OW 428
38771: PPUSH
38772: CALL_OW 247
38776: PUSH
38777: LD_INT 3
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: IN
38787: NOT
38788: AND
38789: IFFALSE 38833
// begin ComMoveXY ( unit , _x , _y ) ;
38791: LD_VAR 0 1
38795: PPUSH
38796: LD_VAR 0 5
38800: PPUSH
38801: LD_VAR 0 7
38805: PPUSH
38806: CALL_OW 111
// result := [ _x , _y ] ;
38810: LD_ADDR_VAR 0 3
38814: PUSH
38815: LD_VAR 0 5
38819: PUSH
38820: LD_VAR 0 7
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: ST_TO_ADDR
// exit ;
38829: POP
38830: POP
38831: GO 38837
// end ; end ;
38833: GO 38677
38835: POP
38836: POP
// end ;
38837: LD_VAR 0 3
38841: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38842: LD_INT 0
38844: PPUSH
38845: PPUSH
38846: PPUSH
// result := 0 ;
38847: LD_ADDR_VAR 0 3
38851: PUSH
38852: LD_INT 0
38854: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38855: LD_VAR 0 1
38859: PUSH
38860: LD_INT 0
38862: LESS
38863: PUSH
38864: LD_VAR 0 1
38868: PUSH
38869: LD_INT 8
38871: GREATER
38872: OR
38873: PUSH
38874: LD_VAR 0 2
38878: PUSH
38879: LD_INT 0
38881: LESS
38882: OR
38883: PUSH
38884: LD_VAR 0 2
38888: PUSH
38889: LD_INT 8
38891: GREATER
38892: OR
38893: IFFALSE 38897
// exit ;
38895: GO 38972
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38897: LD_ADDR_VAR 0 4
38901: PUSH
38902: LD_INT 22
38904: PUSH
38905: LD_VAR 0 2
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PPUSH
38914: CALL_OW 69
38918: PUSH
38919: FOR_IN
38920: IFFALSE 38970
// begin un := UnitShoot ( i ) ;
38922: LD_ADDR_VAR 0 5
38926: PUSH
38927: LD_VAR 0 4
38931: PPUSH
38932: CALL_OW 504
38936: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38937: LD_VAR 0 5
38941: PPUSH
38942: CALL_OW 255
38946: PUSH
38947: LD_VAR 0 1
38951: EQUAL
38952: IFFALSE 38968
// begin result := un ;
38954: LD_ADDR_VAR 0 3
38958: PUSH
38959: LD_VAR 0 5
38963: ST_TO_ADDR
// exit ;
38964: POP
38965: POP
38966: GO 38972
// end ; end ;
38968: GO 38919
38970: POP
38971: POP
// end ;
38972: LD_VAR 0 3
38976: RET
// export function GetCargoBay ( units ) ; begin
38977: LD_INT 0
38979: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
38980: LD_ADDR_VAR 0 2
38984: PUSH
38985: LD_VAR 0 1
38989: PPUSH
38990: LD_INT 2
38992: PUSH
38993: LD_INT 34
38995: PUSH
38996: LD_INT 12
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 34
39005: PUSH
39006: LD_INT 51
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 34
39015: PUSH
39016: LD_INT 32
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 34
39025: PUSH
39026: LD_INT 89
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: PPUSH
39040: CALL_OW 72
39044: ST_TO_ADDR
// end ;
39045: LD_VAR 0 2
39049: RET
// export function Negate ( value ) ; begin
39050: LD_INT 0
39052: PPUSH
// result := not value ;
39053: LD_ADDR_VAR 0 2
39057: PUSH
39058: LD_VAR 0 1
39062: NOT
39063: ST_TO_ADDR
// end ;
39064: LD_VAR 0 2
39068: RET
// export function Inc ( value ) ; begin
39069: LD_INT 0
39071: PPUSH
// result := value + 1 ;
39072: LD_ADDR_VAR 0 2
39076: PUSH
39077: LD_VAR 0 1
39081: PUSH
39082: LD_INT 1
39084: PLUS
39085: ST_TO_ADDR
// end ;
39086: LD_VAR 0 2
39090: RET
// export function Dec ( value ) ; begin
39091: LD_INT 0
39093: PPUSH
// result := value - 1 ;
39094: LD_ADDR_VAR 0 2
39098: PUSH
39099: LD_VAR 0 1
39103: PUSH
39104: LD_INT 1
39106: MINUS
39107: ST_TO_ADDR
// end ;
39108: LD_VAR 0 2
39112: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39113: LD_INT 0
39115: PPUSH
39116: PPUSH
39117: PPUSH
39118: PPUSH
39119: PPUSH
39120: PPUSH
39121: PPUSH
39122: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39123: LD_VAR 0 1
39127: PPUSH
39128: LD_VAR 0 2
39132: PPUSH
39133: CALL_OW 488
39137: NOT
39138: PUSH
39139: LD_VAR 0 3
39143: PPUSH
39144: LD_VAR 0 4
39148: PPUSH
39149: CALL_OW 488
39153: NOT
39154: OR
39155: IFFALSE 39168
// begin result := - 1 ;
39157: LD_ADDR_VAR 0 5
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: ST_TO_ADDR
// exit ;
39166: GO 39403
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39168: LD_ADDR_VAR 0 12
39172: PUSH
39173: LD_VAR 0 1
39177: PPUSH
39178: LD_VAR 0 2
39182: PPUSH
39183: LD_VAR 0 3
39187: PPUSH
39188: LD_VAR 0 4
39192: PPUSH
39193: CALL 38253 0 4
39197: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39198: LD_ADDR_VAR 0 11
39202: PUSH
39203: LD_VAR 0 1
39207: PPUSH
39208: LD_VAR 0 2
39212: PPUSH
39213: LD_VAR 0 12
39217: PUSH
39218: LD_INT 1
39220: ARRAY
39221: PPUSH
39222: LD_VAR 0 12
39226: PUSH
39227: LD_INT 2
39229: ARRAY
39230: PPUSH
39231: CALL_OW 298
39235: ST_TO_ADDR
// distance := 9999 ;
39236: LD_ADDR_VAR 0 10
39240: PUSH
39241: LD_INT 9999
39243: ST_TO_ADDR
// for i := 0 to 5 do
39244: LD_ADDR_VAR 0 6
39248: PUSH
39249: DOUBLE
39250: LD_INT 0
39252: DEC
39253: ST_TO_ADDR
39254: LD_INT 5
39256: PUSH
39257: FOR_TO
39258: IFFALSE 39401
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39260: LD_ADDR_VAR 0 7
39264: PUSH
39265: LD_VAR 0 1
39269: PPUSH
39270: LD_VAR 0 6
39274: PPUSH
39275: LD_VAR 0 11
39279: PPUSH
39280: CALL_OW 272
39284: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39285: LD_ADDR_VAR 0 8
39289: PUSH
39290: LD_VAR 0 2
39294: PPUSH
39295: LD_VAR 0 6
39299: PPUSH
39300: LD_VAR 0 11
39304: PPUSH
39305: CALL_OW 273
39309: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39310: LD_VAR 0 7
39314: PPUSH
39315: LD_VAR 0 8
39319: PPUSH
39320: CALL_OW 488
39324: NOT
39325: IFFALSE 39329
// continue ;
39327: GO 39257
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39329: LD_ADDR_VAR 0 9
39333: PUSH
39334: LD_VAR 0 12
39338: PUSH
39339: LD_INT 1
39341: ARRAY
39342: PPUSH
39343: LD_VAR 0 12
39347: PUSH
39348: LD_INT 2
39350: ARRAY
39351: PPUSH
39352: LD_VAR 0 7
39356: PPUSH
39357: LD_VAR 0 8
39361: PPUSH
39362: CALL_OW 298
39366: ST_TO_ADDR
// if tmp < distance then
39367: LD_VAR 0 9
39371: PUSH
39372: LD_VAR 0 10
39376: LESS
39377: IFFALSE 39399
// begin result := i ;
39379: LD_ADDR_VAR 0 5
39383: PUSH
39384: LD_VAR 0 6
39388: ST_TO_ADDR
// distance := tmp ;
39389: LD_ADDR_VAR 0 10
39393: PUSH
39394: LD_VAR 0 9
39398: ST_TO_ADDR
// end ; end ;
39399: GO 39257
39401: POP
39402: POP
// end ;
39403: LD_VAR 0 5
39407: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39408: LD_INT 0
39410: PPUSH
39411: PPUSH
// if not driver or not IsInUnit ( driver ) then
39412: LD_VAR 0 1
39416: NOT
39417: PUSH
39418: LD_VAR 0 1
39422: PPUSH
39423: CALL_OW 310
39427: NOT
39428: OR
39429: IFFALSE 39433
// exit ;
39431: GO 39523
// vehicle := IsInUnit ( driver ) ;
39433: LD_ADDR_VAR 0 3
39437: PUSH
39438: LD_VAR 0 1
39442: PPUSH
39443: CALL_OW 310
39447: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39448: LD_VAR 0 1
39452: PPUSH
39453: LD_STRING \
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: PUSH
39483: LD_STRING E
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: LD_VAR 0 3
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PPUSH
39519: CALL_OW 446
// end ;
39523: LD_VAR 0 2
39527: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39528: LD_INT 0
39530: PPUSH
39531: PPUSH
// if not driver or not IsInUnit ( driver ) then
39532: LD_VAR 0 1
39536: NOT
39537: PUSH
39538: LD_VAR 0 1
39542: PPUSH
39543: CALL_OW 310
39547: NOT
39548: OR
39549: IFFALSE 39553
// exit ;
39551: GO 39643
// vehicle := IsInUnit ( driver ) ;
39553: LD_ADDR_VAR 0 3
39557: PUSH
39558: LD_VAR 0 1
39562: PPUSH
39563: CALL_OW 310
39567: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39568: LD_VAR 0 1
39572: PPUSH
39573: LD_STRING \
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: PUSH
39603: LD_STRING E
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_VAR 0 3
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PPUSH
39639: CALL_OW 447
// end ;
39643: LD_VAR 0 2
39647: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39648: LD_INT 0
39650: PPUSH
39651: PPUSH
39652: PPUSH
// tmp := [ ] ;
39653: LD_ADDR_VAR 0 5
39657: PUSH
39658: EMPTY
39659: ST_TO_ADDR
// for i in units do
39660: LD_ADDR_VAR 0 4
39664: PUSH
39665: LD_VAR 0 1
39669: PUSH
39670: FOR_IN
39671: IFFALSE 39709
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39673: LD_ADDR_VAR 0 5
39677: PUSH
39678: LD_VAR 0 5
39682: PPUSH
39683: LD_VAR 0 5
39687: PUSH
39688: LD_INT 1
39690: PLUS
39691: PPUSH
39692: LD_VAR 0 4
39696: PPUSH
39697: CALL_OW 256
39701: PPUSH
39702: CALL_OW 2
39706: ST_TO_ADDR
39707: GO 39670
39709: POP
39710: POP
// if not tmp then
39711: LD_VAR 0 5
39715: NOT
39716: IFFALSE 39720
// exit ;
39718: GO 39768
// if asc then
39720: LD_VAR 0 2
39724: IFFALSE 39748
// result := SortListByListAsc ( units , tmp ) else
39726: LD_ADDR_VAR 0 3
39730: PUSH
39731: LD_VAR 0 1
39735: PPUSH
39736: LD_VAR 0 5
39740: PPUSH
39741: CALL_OW 76
39745: ST_TO_ADDR
39746: GO 39768
// result := SortListByListDesc ( units , tmp ) ;
39748: LD_ADDR_VAR 0 3
39752: PUSH
39753: LD_VAR 0 1
39757: PPUSH
39758: LD_VAR 0 5
39762: PPUSH
39763: CALL_OW 77
39767: ST_TO_ADDR
// end ;
39768: LD_VAR 0 3
39772: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39773: LD_INT 0
39775: PPUSH
39776: PPUSH
// task := GetTaskList ( mech ) ;
39777: LD_ADDR_VAR 0 4
39781: PUSH
39782: LD_VAR 0 1
39786: PPUSH
39787: CALL_OW 437
39791: ST_TO_ADDR
// if not task then
39792: LD_VAR 0 4
39796: NOT
39797: IFFALSE 39801
// exit ;
39799: GO 39843
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39801: LD_ADDR_VAR 0 3
39805: PUSH
39806: LD_VAR 0 4
39810: PUSH
39811: LD_INT 1
39813: ARRAY
39814: PUSH
39815: LD_INT 1
39817: ARRAY
39818: PUSH
39819: LD_STRING r
39821: EQUAL
39822: PUSH
39823: LD_VAR 0 4
39827: PUSH
39828: LD_INT 1
39830: ARRAY
39831: PUSH
39832: LD_INT 4
39834: ARRAY
39835: PUSH
39836: LD_VAR 0 2
39840: EQUAL
39841: AND
39842: ST_TO_ADDR
// end ;
39843: LD_VAR 0 3
39847: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39848: LD_INT 0
39850: PPUSH
// SetDir ( unit , d ) ;
39851: LD_VAR 0 1
39855: PPUSH
39856: LD_VAR 0 4
39860: PPUSH
39861: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39865: LD_VAR 0 1
39869: PPUSH
39870: LD_VAR 0 2
39874: PPUSH
39875: LD_VAR 0 3
39879: PPUSH
39880: LD_VAR 0 5
39884: PPUSH
39885: CALL_OW 48
// end ;
39889: LD_VAR 0 6
39893: RET
// export function ToNaturalNumber ( number ) ; begin
39894: LD_INT 0
39896: PPUSH
// result := number div 1 ;
39897: LD_ADDR_VAR 0 2
39901: PUSH
39902: LD_VAR 0 1
39906: PUSH
39907: LD_INT 1
39909: DIV
39910: ST_TO_ADDR
// if number < 0 then
39911: LD_VAR 0 1
39915: PUSH
39916: LD_INT 0
39918: LESS
39919: IFFALSE 39929
// result := 0 ;
39921: LD_ADDR_VAR 0 2
39925: PUSH
39926: LD_INT 0
39928: ST_TO_ADDR
// end ;
39929: LD_VAR 0 2
39933: RET
// export function SortByClass ( units , class ) ; var un ; begin
39934: LD_INT 0
39936: PPUSH
39937: PPUSH
// if not units or not class then
39938: LD_VAR 0 1
39942: NOT
39943: PUSH
39944: LD_VAR 0 2
39948: NOT
39949: OR
39950: IFFALSE 39954
// exit ;
39952: GO 40049
// result := [ ] ;
39954: LD_ADDR_VAR 0 3
39958: PUSH
39959: EMPTY
39960: ST_TO_ADDR
// for un in units do
39961: LD_ADDR_VAR 0 4
39965: PUSH
39966: LD_VAR 0 1
39970: PUSH
39971: FOR_IN
39972: IFFALSE 40047
// if GetClass ( un ) = class then
39974: LD_VAR 0 4
39978: PPUSH
39979: CALL_OW 257
39983: PUSH
39984: LD_VAR 0 2
39988: EQUAL
39989: IFFALSE 40016
// result := Insert ( result , 1 , un ) else
39991: LD_ADDR_VAR 0 3
39995: PUSH
39996: LD_VAR 0 3
40000: PPUSH
40001: LD_INT 1
40003: PPUSH
40004: LD_VAR 0 4
40008: PPUSH
40009: CALL_OW 2
40013: ST_TO_ADDR
40014: GO 40045
// result := Replace ( result , result + 1 , un ) ;
40016: LD_ADDR_VAR 0 3
40020: PUSH
40021: LD_VAR 0 3
40025: PPUSH
40026: LD_VAR 0 3
40030: PUSH
40031: LD_INT 1
40033: PLUS
40034: PPUSH
40035: LD_VAR 0 4
40039: PPUSH
40040: CALL_OW 1
40044: ST_TO_ADDR
40045: GO 39971
40047: POP
40048: POP
// end ;
40049: LD_VAR 0 3
40053: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40054: LD_INT 0
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
40060: PPUSH
40061: PPUSH
40062: PPUSH
// result := [ ] ;
40063: LD_ADDR_VAR 0 4
40067: PUSH
40068: EMPTY
40069: ST_TO_ADDR
// if x - r < 0 then
40070: LD_VAR 0 1
40074: PUSH
40075: LD_VAR 0 3
40079: MINUS
40080: PUSH
40081: LD_INT 0
40083: LESS
40084: IFFALSE 40096
// min_x := 0 else
40086: LD_ADDR_VAR 0 8
40090: PUSH
40091: LD_INT 0
40093: ST_TO_ADDR
40094: GO 40112
// min_x := x - r ;
40096: LD_ADDR_VAR 0 8
40100: PUSH
40101: LD_VAR 0 1
40105: PUSH
40106: LD_VAR 0 3
40110: MINUS
40111: ST_TO_ADDR
// if y - r < 0 then
40112: LD_VAR 0 2
40116: PUSH
40117: LD_VAR 0 3
40121: MINUS
40122: PUSH
40123: LD_INT 0
40125: LESS
40126: IFFALSE 40138
// min_y := 0 else
40128: LD_ADDR_VAR 0 7
40132: PUSH
40133: LD_INT 0
40135: ST_TO_ADDR
40136: GO 40154
// min_y := y - r ;
40138: LD_ADDR_VAR 0 7
40142: PUSH
40143: LD_VAR 0 2
40147: PUSH
40148: LD_VAR 0 3
40152: MINUS
40153: ST_TO_ADDR
// max_x := x + r ;
40154: LD_ADDR_VAR 0 9
40158: PUSH
40159: LD_VAR 0 1
40163: PUSH
40164: LD_VAR 0 3
40168: PLUS
40169: ST_TO_ADDR
// max_y := y + r ;
40170: LD_ADDR_VAR 0 10
40174: PUSH
40175: LD_VAR 0 2
40179: PUSH
40180: LD_VAR 0 3
40184: PLUS
40185: ST_TO_ADDR
// for _x = min_x to max_x do
40186: LD_ADDR_VAR 0 5
40190: PUSH
40191: DOUBLE
40192: LD_VAR 0 8
40196: DEC
40197: ST_TO_ADDR
40198: LD_VAR 0 9
40202: PUSH
40203: FOR_TO
40204: IFFALSE 40305
// for _y = min_y to max_y do
40206: LD_ADDR_VAR 0 6
40210: PUSH
40211: DOUBLE
40212: LD_VAR 0 7
40216: DEC
40217: ST_TO_ADDR
40218: LD_VAR 0 10
40222: PUSH
40223: FOR_TO
40224: IFFALSE 40301
// begin if not ValidHex ( _x , _y ) then
40226: LD_VAR 0 5
40230: PPUSH
40231: LD_VAR 0 6
40235: PPUSH
40236: CALL_OW 488
40240: NOT
40241: IFFALSE 40245
// continue ;
40243: GO 40223
// if GetResourceTypeXY ( _x , _y ) then
40245: LD_VAR 0 5
40249: PPUSH
40250: LD_VAR 0 6
40254: PPUSH
40255: CALL_OW 283
40259: IFFALSE 40299
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40261: LD_ADDR_VAR 0 4
40265: PUSH
40266: LD_VAR 0 4
40270: PPUSH
40271: LD_VAR 0 4
40275: PUSH
40276: LD_INT 1
40278: PLUS
40279: PPUSH
40280: LD_VAR 0 5
40284: PUSH
40285: LD_VAR 0 6
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PPUSH
40294: CALL_OW 1
40298: ST_TO_ADDR
// end ;
40299: GO 40223
40301: POP
40302: POP
40303: GO 40203
40305: POP
40306: POP
// end ;
40307: LD_VAR 0 4
40311: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40312: LD_INT 0
40314: PPUSH
40315: PPUSH
40316: PPUSH
40317: PPUSH
40318: PPUSH
40319: PPUSH
40320: PPUSH
40321: PPUSH
// if not units then
40322: LD_VAR 0 1
40326: NOT
40327: IFFALSE 40331
// exit ;
40329: GO 40855
// result := UnitFilter ( units , [ f_ok ] ) ;
40331: LD_ADDR_VAR 0 3
40335: PUSH
40336: LD_VAR 0 1
40340: PPUSH
40341: LD_INT 50
40343: PUSH
40344: EMPTY
40345: LIST
40346: PPUSH
40347: CALL_OW 72
40351: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40352: LD_ADDR_VAR 0 8
40356: PUSH
40357: LD_VAR 0 1
40361: PUSH
40362: LD_INT 1
40364: ARRAY
40365: PPUSH
40366: CALL_OW 255
40370: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40371: LD_ADDR_VAR 0 10
40375: PUSH
40376: LD_INT 29
40378: PUSH
40379: LD_INT 91
40381: PUSH
40382: LD_INT 49
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: LIST
40389: ST_TO_ADDR
// if not result then
40390: LD_VAR 0 3
40394: NOT
40395: IFFALSE 40399
// exit ;
40397: GO 40855
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40399: LD_ADDR_VAR 0 5
40403: PUSH
40404: LD_INT 81
40406: PUSH
40407: LD_VAR 0 8
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PPUSH
40416: CALL_OW 69
40420: ST_TO_ADDR
// for i in result do
40421: LD_ADDR_VAR 0 4
40425: PUSH
40426: LD_VAR 0 3
40430: PUSH
40431: FOR_IN
40432: IFFALSE 40853
// begin tag := GetTag ( i ) + 1 ;
40434: LD_ADDR_VAR 0 9
40438: PUSH
40439: LD_VAR 0 4
40443: PPUSH
40444: CALL_OW 110
40448: PUSH
40449: LD_INT 1
40451: PLUS
40452: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40453: LD_ADDR_VAR 0 7
40457: PUSH
40458: LD_VAR 0 4
40462: PPUSH
40463: CALL_OW 250
40467: PPUSH
40468: LD_VAR 0 4
40472: PPUSH
40473: CALL_OW 251
40477: PPUSH
40478: LD_INT 6
40480: PPUSH
40481: CALL 40054 0 3
40485: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40486: LD_VAR 0 4
40490: PPUSH
40491: CALL_OW 247
40495: PUSH
40496: LD_INT 2
40498: EQUAL
40499: PUSH
40500: LD_VAR 0 7
40504: AND
40505: PUSH
40506: LD_VAR 0 4
40510: PPUSH
40511: CALL_OW 264
40515: PUSH
40516: LD_VAR 0 10
40520: IN
40521: NOT
40522: AND
40523: IFFALSE 40562
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40525: LD_VAR 0 4
40529: PPUSH
40530: LD_VAR 0 7
40534: PUSH
40535: LD_INT 1
40537: ARRAY
40538: PUSH
40539: LD_INT 1
40541: ARRAY
40542: PPUSH
40543: LD_VAR 0 7
40547: PUSH
40548: LD_INT 1
40550: ARRAY
40551: PUSH
40552: LD_INT 2
40554: ARRAY
40555: PPUSH
40556: CALL_OW 116
40560: GO 40851
// if path > tag then
40562: LD_VAR 0 2
40566: PUSH
40567: LD_VAR 0 9
40571: GREATER
40572: IFFALSE 40780
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40574: LD_ADDR_VAR 0 6
40578: PUSH
40579: LD_VAR 0 5
40583: PPUSH
40584: LD_INT 91
40586: PUSH
40587: LD_VAR 0 4
40591: PUSH
40592: LD_INT 8
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: LIST
40599: PPUSH
40600: CALL_OW 72
40604: ST_TO_ADDR
// if nearEnemy then
40605: LD_VAR 0 6
40609: IFFALSE 40678
// begin if GetWeapon ( i ) = ru_time_lapser then
40611: LD_VAR 0 4
40615: PPUSH
40616: CALL_OW 264
40620: PUSH
40621: LD_INT 49
40623: EQUAL
40624: IFFALSE 40652
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40626: LD_VAR 0 4
40630: PPUSH
40631: LD_VAR 0 6
40635: PPUSH
40636: LD_VAR 0 4
40640: PPUSH
40641: CALL_OW 74
40645: PPUSH
40646: CALL_OW 112
40650: GO 40676
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40652: LD_VAR 0 4
40656: PPUSH
40657: LD_VAR 0 6
40661: PPUSH
40662: LD_VAR 0 4
40666: PPUSH
40667: CALL_OW 74
40671: PPUSH
40672: CALL_OW 115
// end else
40676: GO 40778
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40678: LD_VAR 0 4
40682: PPUSH
40683: LD_VAR 0 2
40687: PUSH
40688: LD_VAR 0 9
40692: ARRAY
40693: PUSH
40694: LD_INT 1
40696: ARRAY
40697: PPUSH
40698: LD_VAR 0 2
40702: PUSH
40703: LD_VAR 0 9
40707: ARRAY
40708: PUSH
40709: LD_INT 2
40711: ARRAY
40712: PPUSH
40713: CALL_OW 297
40717: PUSH
40718: LD_INT 6
40720: GREATER
40721: IFFALSE 40764
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40723: LD_VAR 0 4
40727: PPUSH
40728: LD_VAR 0 2
40732: PUSH
40733: LD_VAR 0 9
40737: ARRAY
40738: PUSH
40739: LD_INT 1
40741: ARRAY
40742: PPUSH
40743: LD_VAR 0 2
40747: PUSH
40748: LD_VAR 0 9
40752: ARRAY
40753: PUSH
40754: LD_INT 2
40756: ARRAY
40757: PPUSH
40758: CALL_OW 114
40762: GO 40778
// SetTag ( i , tag ) ;
40764: LD_VAR 0 4
40768: PPUSH
40769: LD_VAR 0 9
40773: PPUSH
40774: CALL_OW 109
// end else
40778: GO 40851
// if enemy then
40780: LD_VAR 0 5
40784: IFFALSE 40851
// begin if GetWeapon ( i ) = ru_time_lapser then
40786: LD_VAR 0 4
40790: PPUSH
40791: CALL_OW 264
40795: PUSH
40796: LD_INT 49
40798: EQUAL
40799: IFFALSE 40827
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40801: LD_VAR 0 4
40805: PPUSH
40806: LD_VAR 0 5
40810: PPUSH
40811: LD_VAR 0 4
40815: PPUSH
40816: CALL_OW 74
40820: PPUSH
40821: CALL_OW 112
40825: GO 40851
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40827: LD_VAR 0 4
40831: PPUSH
40832: LD_VAR 0 5
40836: PPUSH
40837: LD_VAR 0 4
40841: PPUSH
40842: CALL_OW 74
40846: PPUSH
40847: CALL_OW 115
// end ; end ;
40851: GO 40431
40853: POP
40854: POP
// end ;
40855: LD_VAR 0 3
40859: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40860: LD_INT 0
40862: PPUSH
40863: PPUSH
40864: PPUSH
// if not unit or IsInUnit ( unit ) then
40865: LD_VAR 0 1
40869: NOT
40870: PUSH
40871: LD_VAR 0 1
40875: PPUSH
40876: CALL_OW 310
40880: OR
40881: IFFALSE 40885
// exit ;
40883: GO 40976
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
40885: LD_ADDR_VAR 0 4
40889: PUSH
40890: LD_VAR 0 1
40894: PPUSH
40895: CALL_OW 250
40899: PPUSH
40900: LD_VAR 0 2
40904: PPUSH
40905: LD_INT 1
40907: PPUSH
40908: CALL_OW 272
40912: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
40913: LD_ADDR_VAR 0 5
40917: PUSH
40918: LD_VAR 0 1
40922: PPUSH
40923: CALL_OW 251
40927: PPUSH
40928: LD_VAR 0 2
40932: PPUSH
40933: LD_INT 1
40935: PPUSH
40936: CALL_OW 273
40940: ST_TO_ADDR
// if ValidHex ( x , y ) then
40941: LD_VAR 0 4
40945: PPUSH
40946: LD_VAR 0 5
40950: PPUSH
40951: CALL_OW 488
40955: IFFALSE 40976
// ComTurnXY ( unit , x , y ) ;
40957: LD_VAR 0 1
40961: PPUSH
40962: LD_VAR 0 4
40966: PPUSH
40967: LD_VAR 0 5
40971: PPUSH
40972: CALL_OW 118
// end ;
40976: LD_VAR 0 3
40980: RET
// export function SeeUnits ( side , units ) ; var i ; begin
40981: LD_INT 0
40983: PPUSH
40984: PPUSH
// result := false ;
40985: LD_ADDR_VAR 0 3
40989: PUSH
40990: LD_INT 0
40992: ST_TO_ADDR
// if not units then
40993: LD_VAR 0 2
40997: NOT
40998: IFFALSE 41002
// exit ;
41000: GO 41047
// for i in units do
41002: LD_ADDR_VAR 0 4
41006: PUSH
41007: LD_VAR 0 2
41011: PUSH
41012: FOR_IN
41013: IFFALSE 41045
// if See ( side , i ) then
41015: LD_VAR 0 1
41019: PPUSH
41020: LD_VAR 0 4
41024: PPUSH
41025: CALL_OW 292
41029: IFFALSE 41043
// begin result := true ;
41031: LD_ADDR_VAR 0 3
41035: PUSH
41036: LD_INT 1
41038: ST_TO_ADDR
// exit ;
41039: POP
41040: POP
41041: GO 41047
// end ;
41043: GO 41012
41045: POP
41046: POP
// end ;
41047: LD_VAR 0 3
41051: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41052: LD_INT 0
41054: PPUSH
41055: PPUSH
41056: PPUSH
41057: PPUSH
// if not unit or not points then
41058: LD_VAR 0 1
41062: NOT
41063: PUSH
41064: LD_VAR 0 2
41068: NOT
41069: OR
41070: IFFALSE 41074
// exit ;
41072: GO 41164
// dist := 99999 ;
41074: LD_ADDR_VAR 0 5
41078: PUSH
41079: LD_INT 99999
41081: ST_TO_ADDR
// for i in points do
41082: LD_ADDR_VAR 0 4
41086: PUSH
41087: LD_VAR 0 2
41091: PUSH
41092: FOR_IN
41093: IFFALSE 41162
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41095: LD_ADDR_VAR 0 6
41099: PUSH
41100: LD_VAR 0 1
41104: PPUSH
41105: LD_VAR 0 4
41109: PUSH
41110: LD_INT 1
41112: ARRAY
41113: PPUSH
41114: LD_VAR 0 4
41118: PUSH
41119: LD_INT 2
41121: ARRAY
41122: PPUSH
41123: CALL_OW 297
41127: ST_TO_ADDR
// if tmpDist < dist then
41128: LD_VAR 0 6
41132: PUSH
41133: LD_VAR 0 5
41137: LESS
41138: IFFALSE 41160
// begin result := i ;
41140: LD_ADDR_VAR 0 3
41144: PUSH
41145: LD_VAR 0 4
41149: ST_TO_ADDR
// dist := tmpDist ;
41150: LD_ADDR_VAR 0 5
41154: PUSH
41155: LD_VAR 0 6
41159: ST_TO_ADDR
// end ; end ;
41160: GO 41092
41162: POP
41163: POP
// end ;
41164: LD_VAR 0 3
41168: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41169: LD_INT 0
41171: PPUSH
// uc_side := side ;
41172: LD_ADDR_OWVAR 20
41176: PUSH
41177: LD_VAR 0 1
41181: ST_TO_ADDR
// uc_nation := 3 ;
41182: LD_ADDR_OWVAR 21
41186: PUSH
41187: LD_INT 3
41189: ST_TO_ADDR
// vc_chassis := 25 ;
41190: LD_ADDR_OWVAR 37
41194: PUSH
41195: LD_INT 25
41197: ST_TO_ADDR
// vc_engine := engine_siberite ;
41198: LD_ADDR_OWVAR 39
41202: PUSH
41203: LD_INT 3
41205: ST_TO_ADDR
// vc_control := control_computer ;
41206: LD_ADDR_OWVAR 38
41210: PUSH
41211: LD_INT 3
41213: ST_TO_ADDR
// vc_weapon := 59 ;
41214: LD_ADDR_OWVAR 40
41218: PUSH
41219: LD_INT 59
41221: ST_TO_ADDR
// result := CreateVehicle ;
41222: LD_ADDR_VAR 0 5
41226: PUSH
41227: CALL_OW 45
41231: ST_TO_ADDR
// SetDir ( result , d ) ;
41232: LD_VAR 0 5
41236: PPUSH
41237: LD_VAR 0 4
41241: PPUSH
41242: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41246: LD_VAR 0 5
41250: PPUSH
41251: LD_VAR 0 2
41255: PPUSH
41256: LD_VAR 0 3
41260: PPUSH
41261: LD_INT 0
41263: PPUSH
41264: CALL_OW 48
// end ;
41268: LD_VAR 0 5
41272: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41273: LD_INT 0
41275: PPUSH
41276: PPUSH
41277: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41278: LD_ADDR_VAR 0 2
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41301: LD_VAR 0 1
41305: NOT
41306: PUSH
41307: LD_VAR 0 1
41311: PPUSH
41312: CALL_OW 264
41316: PUSH
41317: LD_INT 12
41319: PUSH
41320: LD_INT 51
41322: PUSH
41323: LD_INT 32
41325: PUSH
41326: LD_INT 89
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: IN
41335: NOT
41336: OR
41337: IFFALSE 41341
// exit ;
41339: GO 41439
// for i := 1 to 3 do
41341: LD_ADDR_VAR 0 3
41345: PUSH
41346: DOUBLE
41347: LD_INT 1
41349: DEC
41350: ST_TO_ADDR
41351: LD_INT 3
41353: PUSH
41354: FOR_TO
41355: IFFALSE 41437
// begin tmp := GetCargo ( cargo , i ) ;
41357: LD_ADDR_VAR 0 4
41361: PUSH
41362: LD_VAR 0 1
41366: PPUSH
41367: LD_VAR 0 3
41371: PPUSH
41372: CALL_OW 289
41376: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41377: LD_ADDR_VAR 0 2
41381: PUSH
41382: LD_VAR 0 2
41386: PPUSH
41387: LD_VAR 0 3
41391: PPUSH
41392: LD_VAR 0 4
41396: PPUSH
41397: CALL_OW 1
41401: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41402: LD_ADDR_VAR 0 2
41406: PUSH
41407: LD_VAR 0 2
41411: PPUSH
41412: LD_INT 4
41414: PPUSH
41415: LD_VAR 0 2
41419: PUSH
41420: LD_INT 4
41422: ARRAY
41423: PUSH
41424: LD_VAR 0 4
41428: PLUS
41429: PPUSH
41430: CALL_OW 1
41434: ST_TO_ADDR
// end ;
41435: GO 41354
41437: POP
41438: POP
// end ;
41439: LD_VAR 0 2
41443: RET
// export function Length ( array ) ; begin
41444: LD_INT 0
41446: PPUSH
// result := array + 0 ;
41447: LD_ADDR_VAR 0 2
41451: PUSH
41452: LD_VAR 0 1
41456: PUSH
41457: LD_INT 0
41459: PLUS
41460: ST_TO_ADDR
// end ;
41461: LD_VAR 0 2
41465: RET
// export function PrepareArray ( array ) ; begin
41466: LD_INT 0
41468: PPUSH
// result := array diff 0 ;
41469: LD_ADDR_VAR 0 2
41473: PUSH
41474: LD_VAR 0 1
41478: PUSH
41479: LD_INT 0
41481: DIFF
41482: ST_TO_ADDR
// if not result [ 1 ] then
41483: LD_VAR 0 2
41487: PUSH
41488: LD_INT 1
41490: ARRAY
41491: NOT
41492: IFFALSE 41512
// result := Delete ( result , 1 ) ;
41494: LD_ADDR_VAR 0 2
41498: PUSH
41499: LD_VAR 0 2
41503: PPUSH
41504: LD_INT 1
41506: PPUSH
41507: CALL_OW 3
41511: ST_TO_ADDR
// end ;
41512: LD_VAR 0 2
41516: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41517: LD_INT 0
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
// sibRocketRange := 25 ;
41523: LD_ADDR_VAR 0 6
41527: PUSH
41528: LD_INT 25
41530: ST_TO_ADDR
// result := false ;
41531: LD_ADDR_VAR 0 4
41535: PUSH
41536: LD_INT 0
41538: ST_TO_ADDR
// for i := 0 to 5 do
41539: LD_ADDR_VAR 0 5
41543: PUSH
41544: DOUBLE
41545: LD_INT 0
41547: DEC
41548: ST_TO_ADDR
41549: LD_INT 5
41551: PUSH
41552: FOR_TO
41553: IFFALSE 41620
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41555: LD_VAR 0 1
41559: PPUSH
41560: LD_VAR 0 5
41564: PPUSH
41565: LD_VAR 0 6
41569: PPUSH
41570: CALL_OW 272
41574: PPUSH
41575: LD_VAR 0 2
41579: PPUSH
41580: LD_VAR 0 5
41584: PPUSH
41585: LD_VAR 0 6
41589: PPUSH
41590: CALL_OW 273
41594: PPUSH
41595: LD_VAR 0 3
41599: PPUSH
41600: CALL_OW 309
41604: IFFALSE 41618
// begin result := true ;
41606: LD_ADDR_VAR 0 4
41610: PUSH
41611: LD_INT 1
41613: ST_TO_ADDR
// exit ;
41614: POP
41615: POP
41616: GO 41622
// end ;
41618: GO 41552
41620: POP
41621: POP
// end ;
41622: LD_VAR 0 4
41626: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41627: LD_INT 0
41629: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41630: LD_VAR 0 1
41634: PPUSH
41635: LD_VAR 0 2
41639: PPUSH
41640: LD_INT 0
41642: PPUSH
41643: LD_INT 0
41645: PPUSH
41646: LD_INT 1
41648: PPUSH
41649: LD_INT 0
41651: PPUSH
41652: CALL_OW 587
// end ;
41656: LD_VAR 0 3
41660: RET
// export function CenterOnNow ( unit ) ; begin
41661: LD_INT 0
41663: PPUSH
// result := IsInUnit ( unit ) ;
41664: LD_ADDR_VAR 0 2
41668: PUSH
41669: LD_VAR 0 1
41673: PPUSH
41674: CALL_OW 310
41678: ST_TO_ADDR
// if not result then
41679: LD_VAR 0 2
41683: NOT
41684: IFFALSE 41696
// result := unit ;
41686: LD_ADDR_VAR 0 2
41690: PUSH
41691: LD_VAR 0 1
41695: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
41696: LD_VAR 0 1
41700: PPUSH
41701: CALL_OW 87
// end ;
41705: LD_VAR 0 2
41709: RET
// export function ComMoveHex ( unit , hex ) ; begin
41710: LD_INT 0
41712: PPUSH
// if not hex then
41713: LD_VAR 0 2
41717: NOT
41718: IFFALSE 41722
// exit ;
41720: GO 41775
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
41722: LD_VAR 0 2
41726: PUSH
41727: LD_INT 1
41729: ARRAY
41730: PPUSH
41731: LD_VAR 0 2
41735: PUSH
41736: LD_INT 2
41738: ARRAY
41739: PPUSH
41740: CALL_OW 428
41744: IFFALSE 41748
// exit ;
41746: GO 41775
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
41748: LD_VAR 0 1
41752: PPUSH
41753: LD_VAR 0 2
41757: PUSH
41758: LD_INT 1
41760: ARRAY
41761: PPUSH
41762: LD_VAR 0 2
41766: PUSH
41767: LD_INT 2
41769: ARRAY
41770: PPUSH
41771: CALL_OW 111
// end ;
41775: LD_VAR 0 3
41779: RET
