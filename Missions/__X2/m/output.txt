// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 112 0 0
// SetAreaMapShowCustom ( area2 , 1 ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 1
  13: PPUSH
  14: CALL 19 0 2
// end ;
  18: END
// function SetAreaMapShowCustom ( area , mode ) ; var i , tmp ; begin
  19: LD_INT 0
  21: PPUSH
  22: PPUSH
  23: PPUSH
// tmp := AreaToList ( area , 0 ) ;
  24: LD_ADDR_VAR 0 5
  28: PUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: CALL_OW 517
  41: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
  42: LD_ADDR_VAR 0 4
  46: PUSH
  47: DOUBLE
  48: LD_INT 1
  50: DEC
  51: ST_TO_ADDR
  52: LD_VAR 0 5
  56: PUSH
  57: LD_INT 1
  59: ARRAY
  60: PUSH
  61: FOR_TO
  62: IFFALSE 105
// SetAreaMapShowHex ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , mode ) ;
  64: LD_VAR 0 5
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PUSH
  73: LD_VAR 0 4
  77: ARRAY
  78: PPUSH
  79: LD_VAR 0 5
  83: PUSH
  84: LD_INT 2
  86: ARRAY
  87: PUSH
  88: LD_VAR 0 4
  92: ARRAY
  93: PPUSH
  94: LD_VAR 0 2
  98: PPUSH
  99: CALL_OW 598
 103: GO 61
 105: POP
 106: POP
// end ;
 107: LD_VAR 0 3
 111: RET
// var t ; function Init ; begin
 112: LD_INT 0
 114: PPUSH
// t := 0 0$0 ;
 115: LD_ADDR_LOC 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// CreateResourcesXY ( mat_cans , 5 , 63 , 64 , false ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 5
 128: PPUSH
 129: LD_INT 63
 131: PPUSH
 132: LD_INT 64
 134: PPUSH
 135: LD_INT 0
 137: PPUSH
 138: CALL_OW 58
// wait ( 0 0$1 ) ;
 142: LD_INT 35
 144: PPUSH
 145: CALL_OW 67
// CreateResourcesXY ( mat_cans , 4 , 63 , 64 , false ) ;
 149: LD_INT 1
 151: PPUSH
 152: LD_INT 4
 154: PPUSH
 155: LD_INT 63
 157: PPUSH
 158: LD_INT 64
 160: PPUSH
 161: LD_INT 0
 163: PPUSH
 164: CALL_OW 58
// end ;
 168: LD_VAR 0 1
 172: RET
// function GetAllLabKind ( side , kinds ) ; var i , j , tmp ; begin
 173: LD_INT 0
 175: PPUSH
 176: PPUSH
 177: PPUSH
 178: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 179: LD_ADDR_VAR 0 6
 183: PUSH
 184: LD_INT 22
 186: PUSH
 187: LD_VAR 0 1
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 30
 201: PUSH
 202: LD_INT 7
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 30
 211: PUSH
 212: LD_INT 8
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: ST_TO_ADDR
// if not tmp or not kinds then
 233: LD_VAR 0 6
 237: NOT
 238: PUSH
 239: LD_VAR 0 2
 243: NOT
 244: OR
 245: IFFALSE 249
// exit ;
 247: GO 358
// result := 0 ;
 249: LD_ADDR_VAR 0 3
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// for i in tmp do
 257: LD_ADDR_VAR 0 4
 261: PUSH
 262: LD_VAR 0 6
 266: PUSH
 267: FOR_IN
 268: IFFALSE 356
// for j := 1 to 2 do
 270: LD_ADDR_VAR 0 5
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 2
 282: PUSH
 283: FOR_TO
 284: IFFALSE 352
// if GetLabKind ( i , j ) in kinds then
 286: LD_VAR 0 4
 290: PPUSH
 291: LD_VAR 0 5
 295: PPUSH
 296: CALL_OW 268
 300: PUSH
 301: LD_VAR 0 2
 305: IN
 306: IFFALSE 350
// begin kinds := kinds diff GetLabKind ( i , j ) ;
 308: LD_ADDR_VAR 0 2
 312: PUSH
 313: LD_VAR 0 2
 317: PUSH
 318: LD_VAR 0 4
 322: PPUSH
 323: LD_VAR 0 5
 327: PPUSH
 328: CALL_OW 268
 332: DIFF
 333: ST_TO_ADDR
// result := result + 1 ;
 334: LD_ADDR_VAR 0 3
 338: PUSH
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: PLUS
 347: ST_TO_ADDR
// continue ;
 348: GO 283
// end ;
 350: GO 283
 352: POP
 353: POP
 354: GO 267
 356: POP
 357: POP
// end ;
 358: LD_VAR 0 3
 362: RET
// every 0 0$1 do
 363: GO 365
 365: DISABLE
// begin enable ;
 366: ENABLE
// display_strings := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] , [ f_side , 1 ] ] ) ;
 367: LD_ADDR_OWVAR 47
 371: PUSH
 372: LD_INT 21
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: LD_INT 58
 387: PUSH
 388: EMPTY
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PUSH
 395: LD_INT 22
 397: PUSH
 398: LD_INT 1
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: PPUSH
 410: CALL_OW 69
 414: ST_TO_ADDR
// end ; end_of_file
 415: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 416: LD_INT 0
 418: PPUSH
 419: PPUSH
// if exist_mode then
 420: LD_VAR 0 2
 424: IFFALSE 449
// unit := CreateCharacter ( prefix & ident ) else
 426: LD_ADDR_VAR 0 5
 430: PUSH
 431: LD_VAR 0 3
 435: PUSH
 436: LD_VAR 0 1
 440: STR
 441: PPUSH
 442: CALL_OW 34
 446: ST_TO_ADDR
 447: GO 464
// unit := NewCharacter ( ident ) ;
 449: LD_ADDR_VAR 0 5
 453: PUSH
 454: LD_VAR 0 1
 458: PPUSH
 459: CALL_OW 25
 463: ST_TO_ADDR
// result := unit ;
 464: LD_ADDR_VAR 0 4
 468: PUSH
 469: LD_VAR 0 5
 473: ST_TO_ADDR
// end ;
 474: LD_VAR 0 4
 478: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
// if not side or not nation then
 483: LD_VAR 0 1
 487: NOT
 488: PUSH
 489: LD_VAR 0 2
 493: NOT
 494: OR
 495: IFFALSE 499
// exit ;
 497: GO 1267
// case nation of nation_american :
 499: LD_VAR 0 2
 503: PUSH
 504: LD_INT 1
 506: DOUBLE
 507: EQUAL
 508: IFTRUE 512
 510: GO 726
 512: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 513: LD_ADDR_VAR 0 4
 517: PUSH
 518: LD_INT 35
 520: PUSH
 521: LD_INT 45
 523: PUSH
 524: LD_INT 46
 526: PUSH
 527: LD_INT 47
 529: PUSH
 530: LD_INT 82
 532: PUSH
 533: LD_INT 83
 535: PUSH
 536: LD_INT 84
 538: PUSH
 539: LD_INT 85
 541: PUSH
 542: LD_INT 86
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 2
 550: PUSH
 551: LD_INT 6
 553: PUSH
 554: LD_INT 15
 556: PUSH
 557: LD_INT 16
 559: PUSH
 560: LD_INT 7
 562: PUSH
 563: LD_INT 12
 565: PUSH
 566: LD_INT 13
 568: PUSH
 569: LD_INT 10
 571: PUSH
 572: LD_INT 14
 574: PUSH
 575: LD_INT 20
 577: PUSH
 578: LD_INT 21
 580: PUSH
 581: LD_INT 22
 583: PUSH
 584: LD_INT 25
 586: PUSH
 587: LD_INT 32
 589: PUSH
 590: LD_INT 27
 592: PUSH
 593: LD_INT 36
 595: PUSH
 596: LD_INT 69
 598: PUSH
 599: LD_INT 39
 601: PUSH
 602: LD_INT 34
 604: PUSH
 605: LD_INT 40
 607: PUSH
 608: LD_INT 48
 610: PUSH
 611: LD_INT 49
 613: PUSH
 614: LD_INT 50
 616: PUSH
 617: LD_INT 51
 619: PUSH
 620: LD_INT 52
 622: PUSH
 623: LD_INT 53
 625: PUSH
 626: LD_INT 54
 628: PUSH
 629: LD_INT 55
 631: PUSH
 632: LD_INT 56
 634: PUSH
 635: LD_INT 57
 637: PUSH
 638: LD_INT 58
 640: PUSH
 641: LD_INT 59
 643: PUSH
 644: LD_INT 60
 646: PUSH
 647: LD_INT 61
 649: PUSH
 650: LD_INT 62
 652: PUSH
 653: LD_INT 80
 655: PUSH
 656: LD_INT 82
 658: PUSH
 659: LD_INT 83
 661: PUSH
 662: LD_INT 84
 664: PUSH
 665: LD_INT 85
 667: PUSH
 668: LD_INT 86
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: ST_TO_ADDR
 724: GO 1191
 726: LD_INT 2
 728: DOUBLE
 729: EQUAL
 730: IFTRUE 734
 732: GO 960
 734: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 735: LD_ADDR_VAR 0 4
 739: PUSH
 740: LD_INT 35
 742: PUSH
 743: LD_INT 45
 745: PUSH
 746: LD_INT 46
 748: PUSH
 749: LD_INT 47
 751: PUSH
 752: LD_INT 82
 754: PUSH
 755: LD_INT 83
 757: PUSH
 758: LD_INT 84
 760: PUSH
 761: LD_INT 85
 763: PUSH
 764: LD_INT 87
 766: PUSH
 767: LD_INT 70
 769: PUSH
 770: LD_INT 1
 772: PUSH
 773: LD_INT 11
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: LD_INT 4
 781: PUSH
 782: LD_INT 5
 784: PUSH
 785: LD_INT 6
 787: PUSH
 788: LD_INT 15
 790: PUSH
 791: LD_INT 18
 793: PUSH
 794: LD_INT 7
 796: PUSH
 797: LD_INT 17
 799: PUSH
 800: LD_INT 8
 802: PUSH
 803: LD_INT 20
 805: PUSH
 806: LD_INT 21
 808: PUSH
 809: LD_INT 22
 811: PUSH
 812: LD_INT 72
 814: PUSH
 815: LD_INT 26
 817: PUSH
 818: LD_INT 69
 820: PUSH
 821: LD_INT 39
 823: PUSH
 824: LD_INT 40
 826: PUSH
 827: LD_INT 41
 829: PUSH
 830: LD_INT 42
 832: PUSH
 833: LD_INT 43
 835: PUSH
 836: LD_INT 48
 838: PUSH
 839: LD_INT 49
 841: PUSH
 842: LD_INT 50
 844: PUSH
 845: LD_INT 51
 847: PUSH
 848: LD_INT 52
 850: PUSH
 851: LD_INT 53
 853: PUSH
 854: LD_INT 54
 856: PUSH
 857: LD_INT 55
 859: PUSH
 860: LD_INT 56
 862: PUSH
 863: LD_INT 60
 865: PUSH
 866: LD_INT 61
 868: PUSH
 869: LD_INT 62
 871: PUSH
 872: LD_INT 66
 874: PUSH
 875: LD_INT 67
 877: PUSH
 878: LD_INT 68
 880: PUSH
 881: LD_INT 81
 883: PUSH
 884: LD_INT 82
 886: PUSH
 887: LD_INT 83
 889: PUSH
 890: LD_INT 84
 892: PUSH
 893: LD_INT 85
 895: PUSH
 896: LD_INT 87
 898: PUSH
 899: LD_INT 88
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: ST_TO_ADDR
 958: GO 1191
 960: LD_INT 3
 962: DOUBLE
 963: EQUAL
 964: IFTRUE 968
 966: GO 1190
 968: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 969: LD_ADDR_VAR 0 4
 973: PUSH
 974: LD_INT 46
 976: PUSH
 977: LD_INT 47
 979: PUSH
 980: LD_INT 1
 982: PUSH
 983: LD_INT 2
 985: PUSH
 986: LD_INT 82
 988: PUSH
 989: LD_INT 83
 991: PUSH
 992: LD_INT 84
 994: PUSH
 995: LD_INT 85
 997: PUSH
 998: LD_INT 86
1000: PUSH
1001: LD_INT 11
1003: PUSH
1004: LD_INT 9
1006: PUSH
1007: LD_INT 20
1009: PUSH
1010: LD_INT 19
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 24
1018: PUSH
1019: LD_INT 22
1021: PUSH
1022: LD_INT 25
1024: PUSH
1025: LD_INT 28
1027: PUSH
1028: LD_INT 29
1030: PUSH
1031: LD_INT 30
1033: PUSH
1034: LD_INT 31
1036: PUSH
1037: LD_INT 37
1039: PUSH
1040: LD_INT 38
1042: PUSH
1043: LD_INT 32
1045: PUSH
1046: LD_INT 27
1048: PUSH
1049: LD_INT 33
1051: PUSH
1052: LD_INT 69
1054: PUSH
1055: LD_INT 39
1057: PUSH
1058: LD_INT 34
1060: PUSH
1061: LD_INT 40
1063: PUSH
1064: LD_INT 71
1066: PUSH
1067: LD_INT 23
1069: PUSH
1070: LD_INT 44
1072: PUSH
1073: LD_INT 48
1075: PUSH
1076: LD_INT 49
1078: PUSH
1079: LD_INT 50
1081: PUSH
1082: LD_INT 51
1084: PUSH
1085: LD_INT 52
1087: PUSH
1088: LD_INT 53
1090: PUSH
1091: LD_INT 54
1093: PUSH
1094: LD_INT 55
1096: PUSH
1097: LD_INT 56
1099: PUSH
1100: LD_INT 57
1102: PUSH
1103: LD_INT 58
1105: PUSH
1106: LD_INT 59
1108: PUSH
1109: LD_INT 63
1111: PUSH
1112: LD_INT 64
1114: PUSH
1115: LD_INT 65
1117: PUSH
1118: LD_INT 82
1120: PUSH
1121: LD_INT 83
1123: PUSH
1124: LD_INT 84
1126: PUSH
1127: LD_INT 85
1129: PUSH
1130: LD_INT 86
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: ST_TO_ADDR
1188: GO 1191
1190: POP
// if state > - 1 and state < 3 then
1191: LD_VAR 0 3
1195: PUSH
1196: LD_INT 1
1198: NEG
1199: GREATER
1200: PUSH
1201: LD_VAR 0 3
1205: PUSH
1206: LD_INT 3
1208: LESS
1209: AND
1210: IFFALSE 1267
// for i in result do
1212: LD_ADDR_VAR 0 5
1216: PUSH
1217: LD_VAR 0 4
1221: PUSH
1222: FOR_IN
1223: IFFALSE 1265
// if GetTech ( i , side ) <> state then
1225: LD_VAR 0 5
1229: PPUSH
1230: LD_VAR 0 1
1234: PPUSH
1235: CALL_OW 321
1239: PUSH
1240: LD_VAR 0 3
1244: NONEQUAL
1245: IFFALSE 1263
// result := result diff i ;
1247: LD_ADDR_VAR 0 4
1251: PUSH
1252: LD_VAR 0 4
1256: PUSH
1257: LD_VAR 0 5
1261: DIFF
1262: ST_TO_ADDR
1263: GO 1222
1265: POP
1266: POP
// end ;
1267: LD_VAR 0 4
1271: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1272: LD_INT 0
1274: PPUSH
1275: PPUSH
1276: PPUSH
// result := true ;
1277: LD_ADDR_VAR 0 3
1281: PUSH
1282: LD_INT 1
1284: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1285: LD_ADDR_VAR 0 5
1289: PUSH
1290: LD_VAR 0 2
1294: PPUSH
1295: CALL_OW 480
1299: ST_TO_ADDR
// if not tmp then
1300: LD_VAR 0 5
1304: NOT
1305: IFFALSE 1309
// exit ;
1307: GO 1358
// for i in tmp do
1309: LD_ADDR_VAR 0 4
1313: PUSH
1314: LD_VAR 0 5
1318: PUSH
1319: FOR_IN
1320: IFFALSE 1356
// if GetTech ( i , side ) <> state_researched then
1322: LD_VAR 0 4
1326: PPUSH
1327: LD_VAR 0 1
1331: PPUSH
1332: CALL_OW 321
1336: PUSH
1337: LD_INT 2
1339: NONEQUAL
1340: IFFALSE 1354
// begin result := false ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: LD_INT 0
1349: ST_TO_ADDR
// exit ;
1350: POP
1351: POP
1352: GO 1358
// end ;
1354: GO 1319
1356: POP
1357: POP
// end ;
1358: LD_VAR 0 3
1362: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
1371: PPUSH
1372: PPUSH
1373: PPUSH
1374: PPUSH
1375: PPUSH
1376: PPUSH
1377: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1378: LD_VAR 0 1
1382: NOT
1383: PUSH
1384: LD_VAR 0 1
1388: PPUSH
1389: CALL_OW 257
1393: PUSH
1394: LD_INT 9
1396: NONEQUAL
1397: OR
1398: IFFALSE 1402
// exit ;
1400: GO 1975
// side := GetSide ( unit ) ;
1402: LD_ADDR_VAR 0 9
1406: PUSH
1407: LD_VAR 0 1
1411: PPUSH
1412: CALL_OW 255
1416: ST_TO_ADDR
// tech_space := tech_spacanom ;
1417: LD_ADDR_VAR 0 12
1421: PUSH
1422: LD_INT 29
1424: ST_TO_ADDR
// tech_time := tech_taurad ;
1425: LD_ADDR_VAR 0 13
1429: PUSH
1430: LD_INT 28
1432: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1433: LD_ADDR_VAR 0 11
1437: PUSH
1438: LD_VAR 0 1
1442: PPUSH
1443: CALL_OW 310
1447: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1448: LD_VAR 0 11
1452: PPUSH
1453: CALL_OW 247
1457: PUSH
1458: LD_INT 2
1460: EQUAL
1461: IFFALSE 1465
// exit ;
1463: GO 1975
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1465: LD_ADDR_VAR 0 8
1469: PUSH
1470: LD_INT 81
1472: PUSH
1473: LD_VAR 0 9
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: LD_INT 21
1487: PUSH
1488: LD_INT 3
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PPUSH
1503: CALL_OW 69
1507: ST_TO_ADDR
// if not tmp then
1508: LD_VAR 0 8
1512: NOT
1513: IFFALSE 1517
// exit ;
1515: GO 1975
// if in_unit then
1517: LD_VAR 0 11
1521: IFFALSE 1545
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1523: LD_ADDR_VAR 0 10
1527: PUSH
1528: LD_VAR 0 8
1532: PPUSH
1533: LD_VAR 0 11
1537: PPUSH
1538: CALL_OW 74
1542: ST_TO_ADDR
1543: GO 1565
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1545: LD_ADDR_VAR 0 10
1549: PUSH
1550: LD_VAR 0 8
1554: PPUSH
1555: LD_VAR 0 1
1559: PPUSH
1560: CALL_OW 74
1564: ST_TO_ADDR
// if not enemy then
1565: LD_VAR 0 10
1569: NOT
1570: IFFALSE 1574
// exit ;
1572: GO 1975
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1574: LD_VAR 0 11
1578: PUSH
1579: LD_VAR 0 11
1583: PPUSH
1584: LD_VAR 0 10
1588: PPUSH
1589: CALL_OW 296
1593: PUSH
1594: LD_INT 13
1596: GREATER
1597: AND
1598: PUSH
1599: LD_VAR 0 1
1603: PPUSH
1604: LD_VAR 0 10
1608: PPUSH
1609: CALL_OW 296
1613: PUSH
1614: LD_INT 12
1616: GREATER
1617: OR
1618: IFFALSE 1622
// exit ;
1620: GO 1975
// missile := [ 1 ] ;
1622: LD_ADDR_VAR 0 14
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1633: LD_VAR 0 9
1637: PPUSH
1638: LD_VAR 0 12
1642: PPUSH
1643: CALL_OW 325
1647: IFFALSE 1676
// missile := Replace ( missile , missile + 1 , 2 ) ;
1649: LD_ADDR_VAR 0 14
1653: PUSH
1654: LD_VAR 0 14
1658: PPUSH
1659: LD_VAR 0 14
1663: PUSH
1664: LD_INT 1
1666: PLUS
1667: PPUSH
1668: LD_INT 2
1670: PPUSH
1671: CALL_OW 1
1675: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1676: LD_VAR 0 9
1680: PPUSH
1681: LD_VAR 0 13
1685: PPUSH
1686: CALL_OW 325
1690: PUSH
1691: LD_VAR 0 10
1695: PPUSH
1696: CALL_OW 255
1700: PPUSH
1701: LD_VAR 0 13
1705: PPUSH
1706: CALL_OW 325
1710: NOT
1711: AND
1712: IFFALSE 1741
// missile := Replace ( missile , missile + 1 , 3 ) ;
1714: LD_ADDR_VAR 0 14
1718: PUSH
1719: LD_VAR 0 14
1723: PPUSH
1724: LD_VAR 0 14
1728: PUSH
1729: LD_INT 1
1731: PLUS
1732: PPUSH
1733: LD_INT 3
1735: PPUSH
1736: CALL_OW 1
1740: ST_TO_ADDR
// if missile < 2 then
1741: LD_VAR 0 14
1745: PUSH
1746: LD_INT 2
1748: LESS
1749: IFFALSE 1753
// exit ;
1751: GO 1975
// x := GetX ( enemy ) ;
1753: LD_ADDR_VAR 0 4
1757: PUSH
1758: LD_VAR 0 10
1762: PPUSH
1763: CALL_OW 250
1767: ST_TO_ADDR
// y := GetY ( enemy ) ;
1768: LD_ADDR_VAR 0 5
1772: PUSH
1773: LD_VAR 0 10
1777: PPUSH
1778: CALL_OW 251
1782: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1783: LD_ADDR_VAR 0 6
1787: PUSH
1788: LD_VAR 0 4
1792: PUSH
1793: LD_INT 1
1795: NEG
1796: PPUSH
1797: LD_INT 1
1799: PPUSH
1800: CALL_OW 12
1804: PLUS
1805: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1806: LD_ADDR_VAR 0 7
1810: PUSH
1811: LD_VAR 0 5
1815: PUSH
1816: LD_INT 1
1818: NEG
1819: PPUSH
1820: LD_INT 1
1822: PPUSH
1823: CALL_OW 12
1827: PLUS
1828: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1829: LD_VAR 0 6
1833: PPUSH
1834: LD_VAR 0 7
1838: PPUSH
1839: CALL_OW 488
1843: NOT
1844: IFFALSE 1866
// begin _x := x ;
1846: LD_ADDR_VAR 0 6
1850: PUSH
1851: LD_VAR 0 4
1855: ST_TO_ADDR
// _y := y ;
1856: LD_ADDR_VAR 0 7
1860: PUSH
1861: LD_VAR 0 5
1865: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1866: LD_ADDR_VAR 0 3
1870: PUSH
1871: LD_INT 1
1873: PPUSH
1874: LD_VAR 0 14
1878: PPUSH
1879: CALL_OW 12
1883: ST_TO_ADDR
// case i of 1 :
1884: LD_VAR 0 3
1888: PUSH
1889: LD_INT 1
1891: DOUBLE
1892: EQUAL
1893: IFTRUE 1897
1895: GO 1914
1897: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1898: LD_VAR 0 1
1902: PPUSH
1903: LD_VAR 0 10
1907: PPUSH
1908: CALL_OW 115
1912: GO 1975
1914: LD_INT 2
1916: DOUBLE
1917: EQUAL
1918: IFTRUE 1922
1920: GO 1944
1922: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1923: LD_VAR 0 1
1927: PPUSH
1928: LD_VAR 0 6
1932: PPUSH
1933: LD_VAR 0 7
1937: PPUSH
1938: CALL_OW 153
1942: GO 1975
1944: LD_INT 3
1946: DOUBLE
1947: EQUAL
1948: IFTRUE 1952
1950: GO 1974
1952: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1953: LD_VAR 0 1
1957: PPUSH
1958: LD_VAR 0 6
1962: PPUSH
1963: LD_VAR 0 7
1967: PPUSH
1968: CALL_OW 154
1972: GO 1975
1974: POP
// end ;
1975: LD_VAR 0 2
1979: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1980: LD_INT 0
1982: PPUSH
1983: PPUSH
1984: PPUSH
1985: PPUSH
1986: PPUSH
1987: PPUSH
// if not unit or not building then
1988: LD_VAR 0 1
1992: NOT
1993: PUSH
1994: LD_VAR 0 2
1998: NOT
1999: OR
2000: IFFALSE 2004
// exit ;
2002: GO 2162
// x := GetX ( building ) ;
2004: LD_ADDR_VAR 0 5
2008: PUSH
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 250
2018: ST_TO_ADDR
// y := GetY ( building ) ;
2019: LD_ADDR_VAR 0 6
2023: PUSH
2024: LD_VAR 0 2
2028: PPUSH
2029: CALL_OW 251
2033: ST_TO_ADDR
// for i = 0 to 5 do
2034: LD_ADDR_VAR 0 4
2038: PUSH
2039: DOUBLE
2040: LD_INT 0
2042: DEC
2043: ST_TO_ADDR
2044: LD_INT 5
2046: PUSH
2047: FOR_TO
2048: IFFALSE 2160
// begin _x := ShiftX ( x , i , 3 ) ;
2050: LD_ADDR_VAR 0 7
2054: PUSH
2055: LD_VAR 0 5
2059: PPUSH
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_INT 3
2067: PPUSH
2068: CALL_OW 272
2072: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2073: LD_ADDR_VAR 0 8
2077: PUSH
2078: LD_VAR 0 6
2082: PPUSH
2083: LD_VAR 0 4
2087: PPUSH
2088: LD_INT 3
2090: PPUSH
2091: CALL_OW 273
2095: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2096: LD_VAR 0 7
2100: PPUSH
2101: LD_VAR 0 8
2105: PPUSH
2106: CALL_OW 488
2110: NOT
2111: IFFALSE 2115
// continue ;
2113: GO 2047
// if HexInfo ( _x , _y ) = 0 then
2115: LD_VAR 0 7
2119: PPUSH
2120: LD_VAR 0 8
2124: PPUSH
2125: CALL_OW 428
2129: PUSH
2130: LD_INT 0
2132: EQUAL
2133: IFFALSE 2158
// begin ComMoveXY ( unit , _x , _y ) ;
2135: LD_VAR 0 1
2139: PPUSH
2140: LD_VAR 0 7
2144: PPUSH
2145: LD_VAR 0 8
2149: PPUSH
2150: CALL_OW 111
// exit ;
2154: POP
2155: POP
2156: GO 2162
// end ; end ;
2158: GO 2047
2160: POP
2161: POP
// end ;
2162: LD_VAR 0 3
2166: RET
// export function ScanBase ( side , base_area ) ; begin
2167: LD_INT 0
2169: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2170: LD_ADDR_VAR 0 3
2174: PUSH
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_INT 81
2182: PUSH
2183: LD_VAR 0 1
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: PPUSH
2192: CALL_OW 70
2196: ST_TO_ADDR
// end ;
2197: LD_VAR 0 3
2201: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2202: LD_INT 0
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
// result := false ;
2208: LD_ADDR_VAR 0 2
2212: PUSH
2213: LD_INT 0
2215: ST_TO_ADDR
// side := GetSide ( unit ) ;
2216: LD_ADDR_VAR 0 3
2220: PUSH
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 255
2230: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2231: LD_ADDR_VAR 0 4
2235: PUSH
2236: LD_VAR 0 1
2240: PPUSH
2241: CALL_OW 248
2245: ST_TO_ADDR
// case nat of 1 :
2246: LD_VAR 0 4
2250: PUSH
2251: LD_INT 1
2253: DOUBLE
2254: EQUAL
2255: IFTRUE 2259
2257: GO 2270
2259: POP
// tech := tech_lassight ; 2 :
2260: LD_ADDR_VAR 0 5
2264: PUSH
2265: LD_INT 12
2267: ST_TO_ADDR
2268: GO 2309
2270: LD_INT 2
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2289
2278: POP
// tech := tech_mortar ; 3 :
2279: LD_ADDR_VAR 0 5
2283: PUSH
2284: LD_INT 41
2286: ST_TO_ADDR
2287: GO 2309
2289: LD_INT 3
2291: DOUBLE
2292: EQUAL
2293: IFTRUE 2297
2295: GO 2308
2297: POP
// tech := tech_bazooka ; end ;
2298: LD_ADDR_VAR 0 5
2302: PUSH
2303: LD_INT 44
2305: ST_TO_ADDR
2306: GO 2309
2308: POP
// if Researched ( side , tech ) then
2309: LD_VAR 0 3
2313: PPUSH
2314: LD_VAR 0 5
2318: PPUSH
2319: CALL_OW 325
2323: IFFALSE 2350
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2325: LD_ADDR_VAR 0 2
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: LD_INT 8
2335: PUSH
2336: LD_INT 9
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: LIST
2343: PUSH
2344: LD_VAR 0 4
2348: ARRAY
2349: ST_TO_ADDR
// end ;
2350: LD_VAR 0 2
2354: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2355: LD_INT 0
2357: PPUSH
2358: PPUSH
2359: PPUSH
// if not mines then
2360: LD_VAR 0 2
2364: NOT
2365: IFFALSE 2369
// exit ;
2367: GO 2513
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2369: LD_ADDR_VAR 0 5
2373: PUSH
2374: LD_INT 81
2376: PUSH
2377: LD_VAR 0 1
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: LD_INT 3
2388: PUSH
2389: LD_INT 21
2391: PUSH
2392: LD_INT 3
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PPUSH
2407: CALL_OW 69
2411: ST_TO_ADDR
// for i in mines do
2412: LD_ADDR_VAR 0 4
2416: PUSH
2417: LD_VAR 0 2
2421: PUSH
2422: FOR_IN
2423: IFFALSE 2511
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2425: LD_VAR 0 4
2429: PUSH
2430: LD_INT 1
2432: ARRAY
2433: PPUSH
2434: LD_VAR 0 4
2438: PUSH
2439: LD_INT 2
2441: ARRAY
2442: PPUSH
2443: CALL_OW 458
2447: NOT
2448: IFFALSE 2452
// continue ;
2450: GO 2422
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2452: LD_VAR 0 4
2456: PUSH
2457: LD_INT 1
2459: ARRAY
2460: PPUSH
2461: LD_VAR 0 4
2465: PUSH
2466: LD_INT 2
2468: ARRAY
2469: PPUSH
2470: CALL_OW 428
2474: PUSH
2475: LD_VAR 0 5
2479: IN
2480: IFFALSE 2509
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2482: LD_VAR 0 4
2486: PUSH
2487: LD_INT 1
2489: ARRAY
2490: PPUSH
2491: LD_VAR 0 4
2495: PUSH
2496: LD_INT 2
2498: ARRAY
2499: PPUSH
2500: LD_VAR 0 1
2504: PPUSH
2505: CALL_OW 456
// end ;
2509: GO 2422
2511: POP
2512: POP
// end ;
2513: LD_VAR 0 3
2517: RET
// export function Count ( array ) ; begin
2518: LD_INT 0
2520: PPUSH
// result := array + 0 ;
2521: LD_ADDR_VAR 0 2
2525: PUSH
2526: LD_VAR 0 1
2530: PUSH
2531: LD_INT 0
2533: PLUS
2534: ST_TO_ADDR
// end ;
2535: LD_VAR 0 2
2539: RET
// export function IsEmpty ( building ) ; begin
2540: LD_INT 0
2542: PPUSH
// if not building then
2543: LD_VAR 0 1
2547: NOT
2548: IFFALSE 2552
// exit ;
2550: GO 2595
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2552: LD_ADDR_VAR 0 2
2556: PUSH
2557: LD_VAR 0 1
2561: PUSH
2562: LD_INT 22
2564: PUSH
2565: LD_VAR 0 1
2569: PPUSH
2570: CALL_OW 255
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PUSH
2579: LD_INT 58
2581: PUSH
2582: EMPTY
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: IN
2594: ST_TO_ADDR
// end ;
2595: LD_VAR 0 2
2599: RET
// export function IsNotFull ( building ) ; var places ; begin
2600: LD_INT 0
2602: PPUSH
2603: PPUSH
// if not building then
2604: LD_VAR 0 1
2608: NOT
2609: IFFALSE 2613
// exit ;
2611: GO 2641
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2613: LD_ADDR_VAR 0 2
2617: PUSH
2618: LD_VAR 0 1
2622: PPUSH
2623: LD_INT 3
2625: PUSH
2626: LD_INT 62
2628: PUSH
2629: EMPTY
2630: LIST
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PPUSH
2636: CALL_OW 72
2640: ST_TO_ADDR
// end ;
2641: LD_VAR 0 2
2645: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2646: LD_INT 0
2648: PPUSH
2649: PPUSH
2650: PPUSH
2651: PPUSH
// tmp := [ ] ;
2652: LD_ADDR_VAR 0 3
2656: PUSH
2657: EMPTY
2658: ST_TO_ADDR
// list := [ ] ;
2659: LD_ADDR_VAR 0 5
2663: PUSH
2664: EMPTY
2665: ST_TO_ADDR
// for i = 16 to 25 do
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: DOUBLE
2672: LD_INT 16
2674: DEC
2675: ST_TO_ADDR
2676: LD_INT 25
2678: PUSH
2679: FOR_TO
2680: IFFALSE 2753
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2682: LD_ADDR_VAR 0 3
2686: PUSH
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 22
2694: PUSH
2695: LD_VAR 0 1
2699: PPUSH
2700: CALL_OW 255
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 91
2711: PUSH
2712: LD_VAR 0 1
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 30
2727: PUSH
2728: LD_VAR 0 4
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: LIST
2741: PUSH
2742: EMPTY
2743: LIST
2744: PPUSH
2745: CALL_OW 69
2749: ADD
2750: ST_TO_ADDR
2751: GO 2679
2753: POP
2754: POP
// for i = 1 to tmp do
2755: LD_ADDR_VAR 0 4
2759: PUSH
2760: DOUBLE
2761: LD_INT 1
2763: DEC
2764: ST_TO_ADDR
2765: LD_VAR 0 3
2769: PUSH
2770: FOR_TO
2771: IFFALSE 2859
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2773: LD_ADDR_VAR 0 5
2777: PUSH
2778: LD_VAR 0 5
2782: PUSH
2783: LD_VAR 0 3
2787: PUSH
2788: LD_VAR 0 4
2792: ARRAY
2793: PPUSH
2794: CALL_OW 266
2798: PUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_VAR 0 4
2808: ARRAY
2809: PPUSH
2810: CALL_OW 250
2814: PUSH
2815: LD_VAR 0 3
2819: PUSH
2820: LD_VAR 0 4
2824: ARRAY
2825: PPUSH
2826: CALL_OW 251
2830: PUSH
2831: LD_VAR 0 3
2835: PUSH
2836: LD_VAR 0 4
2840: ARRAY
2841: PPUSH
2842: CALL_OW 254
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: PUSH
2853: EMPTY
2854: LIST
2855: ADD
2856: ST_TO_ADDR
2857: GO 2770
2859: POP
2860: POP
// result := list ;
2861: LD_ADDR_VAR 0 2
2865: PUSH
2866: LD_VAR 0 5
2870: ST_TO_ADDR
// end ;
2871: LD_VAR 0 2
2875: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2876: LD_INT 0
2878: PPUSH
2879: PPUSH
2880: PPUSH
2881: PPUSH
2882: PPUSH
2883: PPUSH
2884: PPUSH
// if not factory then
2885: LD_VAR 0 1
2889: NOT
2890: IFFALSE 2894
// exit ;
2892: GO 3487
// if control = control_apeman then
2894: LD_VAR 0 4
2898: PUSH
2899: LD_INT 5
2901: EQUAL
2902: IFFALSE 3011
// begin tmp := UnitsInside ( factory ) ;
2904: LD_ADDR_VAR 0 8
2908: PUSH
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL_OW 313
2918: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2919: LD_VAR 0 8
2923: PPUSH
2924: LD_INT 25
2926: PUSH
2927: LD_INT 12
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PPUSH
2934: CALL_OW 72
2938: NOT
2939: IFFALSE 2949
// control := control_manual ;
2941: LD_ADDR_VAR 0 4
2945: PUSH
2946: LD_INT 1
2948: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2949: LD_ADDR_VAR 0 8
2953: PUSH
2954: LD_VAR 0 1
2958: PPUSH
2959: CALL 2646 0 1
2963: ST_TO_ADDR
// if tmp then
2964: LD_VAR 0 8
2968: IFFALSE 3011
// begin for i in tmp do
2970: LD_ADDR_VAR 0 7
2974: PUSH
2975: LD_VAR 0 8
2979: PUSH
2980: FOR_IN
2981: IFFALSE 3009
// if i [ 1 ] = b_ext_radio then
2983: LD_VAR 0 7
2987: PUSH
2988: LD_INT 1
2990: ARRAY
2991: PUSH
2992: LD_INT 22
2994: EQUAL
2995: IFFALSE 3007
// begin control := control_remote ;
2997: LD_ADDR_VAR 0 4
3001: PUSH
3002: LD_INT 2
3004: ST_TO_ADDR
// break ;
3005: GO 3009
// end ;
3007: GO 2980
3009: POP
3010: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3011: LD_VAR 0 1
3015: PPUSH
3016: LD_VAR 0 2
3020: PPUSH
3021: LD_VAR 0 3
3025: PPUSH
3026: LD_VAR 0 4
3030: PPUSH
3031: LD_VAR 0 5
3035: PPUSH
3036: CALL_OW 448
3040: IFFALSE 3075
// begin result := [ chassis , engine , control , weapon ] ;
3042: LD_ADDR_VAR 0 6
3046: PUSH
3047: LD_VAR 0 2
3051: PUSH
3052: LD_VAR 0 3
3056: PUSH
3057: LD_VAR 0 4
3061: PUSH
3062: LD_VAR 0 5
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: ST_TO_ADDR
// exit ;
3073: GO 3487
// end ; _chassis := AvailableChassisList ( factory ) ;
3075: LD_ADDR_VAR 0 9
3079: PUSH
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 475
3089: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3090: LD_ADDR_VAR 0 11
3094: PUSH
3095: LD_VAR 0 1
3099: PPUSH
3100: CALL_OW 476
3104: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3105: LD_ADDR_VAR 0 12
3109: PUSH
3110: LD_VAR 0 1
3114: PPUSH
3115: CALL_OW 477
3119: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3120: LD_ADDR_VAR 0 10
3124: PUSH
3125: LD_VAR 0 1
3129: PPUSH
3130: CALL_OW 478
3134: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3135: LD_VAR 0 9
3139: NOT
3140: PUSH
3141: LD_VAR 0 11
3145: NOT
3146: OR
3147: PUSH
3148: LD_VAR 0 12
3152: NOT
3153: OR
3154: PUSH
3155: LD_VAR 0 10
3159: NOT
3160: OR
3161: IFFALSE 3196
// begin result := [ chassis , engine , control , weapon ] ;
3163: LD_ADDR_VAR 0 6
3167: PUSH
3168: LD_VAR 0 2
3172: PUSH
3173: LD_VAR 0 3
3177: PUSH
3178: LD_VAR 0 4
3182: PUSH
3183: LD_VAR 0 5
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: ST_TO_ADDR
// exit ;
3194: GO 3487
// end ; if not chassis in _chassis then
3196: LD_VAR 0 2
3200: PUSH
3201: LD_VAR 0 9
3205: IN
3206: NOT
3207: IFFALSE 3233
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3209: LD_ADDR_VAR 0 2
3213: PUSH
3214: LD_VAR 0 9
3218: PUSH
3219: LD_INT 1
3221: PPUSH
3222: LD_VAR 0 9
3226: PPUSH
3227: CALL_OW 12
3231: ARRAY
3232: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3233: LD_VAR 0 2
3237: PPUSH
3238: LD_VAR 0 3
3242: PPUSH
3243: CALL 3492 0 2
3247: NOT
3248: IFFALSE 3307
// repeat engine := _engine [ 1 ] ;
3250: LD_ADDR_VAR 0 3
3254: PUSH
3255: LD_VAR 0 11
3259: PUSH
3260: LD_INT 1
3262: ARRAY
3263: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3264: LD_ADDR_VAR 0 11
3268: PUSH
3269: LD_VAR 0 11
3273: PPUSH
3274: LD_INT 1
3276: PPUSH
3277: CALL_OW 3
3281: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3282: LD_VAR 0 2
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: CALL 3492 0 2
3296: PUSH
3297: LD_VAR 0 11
3301: PUSH
3302: EMPTY
3303: EQUAL
3304: OR
3305: IFFALSE 3250
// if not control in _control then
3307: LD_VAR 0 4
3311: PUSH
3312: LD_VAR 0 12
3316: IN
3317: NOT
3318: IFFALSE 3344
// control := _control [ rand ( 1 , _control ) ] ;
3320: LD_ADDR_VAR 0 4
3324: PUSH
3325: LD_VAR 0 12
3329: PUSH
3330: LD_INT 1
3332: PPUSH
3333: LD_VAR 0 12
3337: PPUSH
3338: CALL_OW 12
3342: ARRAY
3343: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3344: LD_VAR 0 2
3348: PPUSH
3349: LD_VAR 0 5
3353: PPUSH
3354: CALL 3712 0 2
3358: NOT
3359: IFFALSE 3418
// repeat weapon := _weapon [ 1 ] ;
3361: LD_ADDR_VAR 0 5
3365: PUSH
3366: LD_VAR 0 10
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3375: LD_ADDR_VAR 0 10
3379: PUSH
3380: LD_VAR 0 10
3384: PPUSH
3385: LD_INT 1
3387: PPUSH
3388: CALL_OW 3
3392: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3393: LD_VAR 0 2
3397: PPUSH
3398: LD_VAR 0 5
3402: PPUSH
3403: CALL 3712 0 2
3407: PUSH
3408: LD_VAR 0 10
3412: PUSH
3413: EMPTY
3414: EQUAL
3415: OR
3416: IFFALSE 3361
// result := [ ] ;
3418: LD_ADDR_VAR 0 6
3422: PUSH
3423: EMPTY
3424: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3425: LD_VAR 0 1
3429: PPUSH
3430: LD_VAR 0 2
3434: PPUSH
3435: LD_VAR 0 3
3439: PPUSH
3440: LD_VAR 0 4
3444: PPUSH
3445: LD_VAR 0 5
3449: PPUSH
3450: CALL_OW 448
3454: IFFALSE 3487
// result := [ chassis , engine , control , weapon ] ;
3456: LD_ADDR_VAR 0 6
3460: PUSH
3461: LD_VAR 0 2
3465: PUSH
3466: LD_VAR 0 3
3470: PUSH
3471: LD_VAR 0 4
3475: PUSH
3476: LD_VAR 0 5
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: ST_TO_ADDR
// end ;
3487: LD_VAR 0 6
3491: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3492: LD_INT 0
3494: PPUSH
// if not chassis or not engine then
3495: LD_VAR 0 1
3499: NOT
3500: PUSH
3501: LD_VAR 0 2
3505: NOT
3506: OR
3507: IFFALSE 3511
// exit ;
3509: GO 3707
// case engine of engine_solar :
3511: LD_VAR 0 2
3515: PUSH
3516: LD_INT 2
3518: DOUBLE
3519: EQUAL
3520: IFTRUE 3524
3522: GO 3562
3524: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3525: LD_ADDR_VAR 0 3
3529: PUSH
3530: LD_INT 11
3532: PUSH
3533: LD_INT 12
3535: PUSH
3536: LD_INT 13
3538: PUSH
3539: LD_INT 14
3541: PUSH
3542: LD_INT 1
3544: PUSH
3545: LD_INT 2
3547: PUSH
3548: LD_INT 3
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: ST_TO_ADDR
3560: GO 3691
3562: LD_INT 1
3564: DOUBLE
3565: EQUAL
3566: IFTRUE 3570
3568: GO 3632
3570: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3571: LD_ADDR_VAR 0 3
3575: PUSH
3576: LD_INT 11
3578: PUSH
3579: LD_INT 12
3581: PUSH
3582: LD_INT 13
3584: PUSH
3585: LD_INT 14
3587: PUSH
3588: LD_INT 1
3590: PUSH
3591: LD_INT 2
3593: PUSH
3594: LD_INT 3
3596: PUSH
3597: LD_INT 4
3599: PUSH
3600: LD_INT 5
3602: PUSH
3603: LD_INT 21
3605: PUSH
3606: LD_INT 23
3608: PUSH
3609: LD_INT 22
3611: PUSH
3612: LD_INT 24
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: ST_TO_ADDR
3630: GO 3691
3632: LD_INT 3
3634: DOUBLE
3635: EQUAL
3636: IFTRUE 3640
3638: GO 3690
3640: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 13
3648: PUSH
3649: LD_INT 14
3651: PUSH
3652: LD_INT 2
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: LD_INT 4
3660: PUSH
3661: LD_INT 5
3663: PUSH
3664: LD_INT 21
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 23
3672: PUSH
3673: LD_INT 24
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: ST_TO_ADDR
3688: GO 3691
3690: POP
// result := ( chassis in result ) ;
3691: LD_ADDR_VAR 0 3
3695: PUSH
3696: LD_VAR 0 1
3700: PUSH
3701: LD_VAR 0 3
3705: IN
3706: ST_TO_ADDR
// end ;
3707: LD_VAR 0 3
3711: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3712: LD_INT 0
3714: PPUSH
// if not chassis or not weapon then
3715: LD_VAR 0 1
3719: NOT
3720: PUSH
3721: LD_VAR 0 2
3725: NOT
3726: OR
3727: IFFALSE 3731
// exit ;
3729: GO 4791
// case weapon of us_machine_gun :
3731: LD_VAR 0 2
3735: PUSH
3736: LD_INT 2
3738: DOUBLE
3739: EQUAL
3740: IFTRUE 3744
3742: GO 3774
3744: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3745: LD_ADDR_VAR 0 3
3749: PUSH
3750: LD_INT 1
3752: PUSH
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 4
3761: PUSH
3762: LD_INT 5
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: ST_TO_ADDR
3772: GO 4775
3774: LD_INT 3
3776: DOUBLE
3777: EQUAL
3778: IFTRUE 3782
3780: GO 3812
3782: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: LD_INT 1
3790: PUSH
3791: LD_INT 2
3793: PUSH
3794: LD_INT 3
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: LD_INT 5
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: ST_TO_ADDR
3810: GO 4775
3812: LD_INT 11
3814: DOUBLE
3815: EQUAL
3816: IFTRUE 3820
3818: GO 3850
3820: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3821: LD_ADDR_VAR 0 3
3825: PUSH
3826: LD_INT 1
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: LD_INT 3
3834: PUSH
3835: LD_INT 4
3837: PUSH
3838: LD_INT 5
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: ST_TO_ADDR
3848: GO 4775
3850: LD_INT 4
3852: DOUBLE
3853: EQUAL
3854: IFTRUE 3858
3856: GO 3884
3858: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: LD_INT 2
3866: PUSH
3867: LD_INT 3
3869: PUSH
3870: LD_INT 4
3872: PUSH
3873: LD_INT 5
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: ST_TO_ADDR
3882: GO 4775
3884: LD_INT 5
3886: DOUBLE
3887: EQUAL
3888: IFTRUE 3892
3890: GO 3918
3892: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3893: LD_ADDR_VAR 0 3
3897: PUSH
3898: LD_INT 2
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: LD_INT 5
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: ST_TO_ADDR
3916: GO 4775
3918: LD_INT 9
3920: DOUBLE
3921: EQUAL
3922: IFTRUE 3926
3924: GO 3952
3926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3927: LD_ADDR_VAR 0 3
3931: PUSH
3932: LD_INT 2
3934: PUSH
3935: LD_INT 3
3937: PUSH
3938: LD_INT 4
3940: PUSH
3941: LD_INT 5
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: ST_TO_ADDR
3950: GO 4775
3952: LD_INT 7
3954: DOUBLE
3955: EQUAL
3956: IFTRUE 3960
3958: GO 3986
3960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3961: LD_ADDR_VAR 0 3
3965: PUSH
3966: LD_INT 2
3968: PUSH
3969: LD_INT 3
3971: PUSH
3972: LD_INT 4
3974: PUSH
3975: LD_INT 5
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: ST_TO_ADDR
3984: GO 4775
3986: LD_INT 12
3988: DOUBLE
3989: EQUAL
3990: IFTRUE 3994
3992: GO 4020
3994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3995: LD_ADDR_VAR 0 3
3999: PUSH
4000: LD_INT 2
4002: PUSH
4003: LD_INT 3
4005: PUSH
4006: LD_INT 4
4008: PUSH
4009: LD_INT 5
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: ST_TO_ADDR
4018: GO 4775
4020: LD_INT 13
4022: DOUBLE
4023: EQUAL
4024: IFTRUE 4028
4026: GO 4054
4028: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4029: LD_ADDR_VAR 0 3
4033: PUSH
4034: LD_INT 2
4036: PUSH
4037: LD_INT 3
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: LD_INT 5
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: ST_TO_ADDR
4052: GO 4775
4054: LD_INT 14
4056: DOUBLE
4057: EQUAL
4058: IFTRUE 4062
4060: GO 4080
4062: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4063: LD_ADDR_VAR 0 3
4067: PUSH
4068: LD_INT 4
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: ST_TO_ADDR
4078: GO 4775
4080: LD_INT 6
4082: DOUBLE
4083: EQUAL
4084: IFTRUE 4088
4086: GO 4106
4088: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4089: LD_ADDR_VAR 0 3
4093: PUSH
4094: LD_INT 4
4096: PUSH
4097: LD_INT 5
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: ST_TO_ADDR
4104: GO 4775
4106: LD_INT 10
4108: DOUBLE
4109: EQUAL
4110: IFTRUE 4114
4112: GO 4132
4114: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4115: LD_ADDR_VAR 0 3
4119: PUSH
4120: LD_INT 4
4122: PUSH
4123: LD_INT 5
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: ST_TO_ADDR
4130: GO 4775
4132: LD_INT 22
4134: DOUBLE
4135: EQUAL
4136: IFTRUE 4140
4138: GO 4166
4140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4141: LD_ADDR_VAR 0 3
4145: PUSH
4146: LD_INT 11
4148: PUSH
4149: LD_INT 12
4151: PUSH
4152: LD_INT 13
4154: PUSH
4155: LD_INT 14
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: ST_TO_ADDR
4164: GO 4775
4166: LD_INT 23
4168: DOUBLE
4169: EQUAL
4170: IFTRUE 4174
4172: GO 4200
4174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4175: LD_ADDR_VAR 0 3
4179: PUSH
4180: LD_INT 11
4182: PUSH
4183: LD_INT 12
4185: PUSH
4186: LD_INT 13
4188: PUSH
4189: LD_INT 14
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: ST_TO_ADDR
4198: GO 4775
4200: LD_INT 24
4202: DOUBLE
4203: EQUAL
4204: IFTRUE 4208
4206: GO 4234
4208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: LD_INT 11
4216: PUSH
4217: LD_INT 12
4219: PUSH
4220: LD_INT 13
4222: PUSH
4223: LD_INT 14
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: ST_TO_ADDR
4232: GO 4775
4234: LD_INT 30
4236: DOUBLE
4237: EQUAL
4238: IFTRUE 4242
4240: GO 4268
4242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4243: LD_ADDR_VAR 0 3
4247: PUSH
4248: LD_INT 11
4250: PUSH
4251: LD_INT 12
4253: PUSH
4254: LD_INT 13
4256: PUSH
4257: LD_INT 14
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: ST_TO_ADDR
4266: GO 4775
4268: LD_INT 25
4270: DOUBLE
4271: EQUAL
4272: IFTRUE 4276
4274: GO 4294
4276: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4277: LD_ADDR_VAR 0 3
4281: PUSH
4282: LD_INT 13
4284: PUSH
4285: LD_INT 14
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: ST_TO_ADDR
4292: GO 4775
4294: LD_INT 27
4296: DOUBLE
4297: EQUAL
4298: IFTRUE 4302
4300: GO 4320
4302: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4303: LD_ADDR_VAR 0 3
4307: PUSH
4308: LD_INT 13
4310: PUSH
4311: LD_INT 14
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: ST_TO_ADDR
4318: GO 4775
4320: LD_INT 92
4322: DOUBLE
4323: EQUAL
4324: IFTRUE 4328
4326: GO 4354
4328: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4329: LD_ADDR_VAR 0 3
4333: PUSH
4334: LD_INT 11
4336: PUSH
4337: LD_INT 12
4339: PUSH
4340: LD_INT 13
4342: PUSH
4343: LD_INT 14
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: ST_TO_ADDR
4352: GO 4775
4354: LD_INT 28
4356: DOUBLE
4357: EQUAL
4358: IFTRUE 4362
4360: GO 4380
4362: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4363: LD_ADDR_VAR 0 3
4367: PUSH
4368: LD_INT 13
4370: PUSH
4371: LD_INT 14
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: ST_TO_ADDR
4378: GO 4775
4380: LD_INT 29
4382: DOUBLE
4383: EQUAL
4384: IFTRUE 4388
4386: GO 4406
4388: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: LD_INT 13
4396: PUSH
4397: LD_INT 14
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: ST_TO_ADDR
4404: GO 4775
4406: LD_INT 31
4408: DOUBLE
4409: EQUAL
4410: IFTRUE 4414
4412: GO 4432
4414: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_INT 13
4422: PUSH
4423: LD_INT 14
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: ST_TO_ADDR
4430: GO 4775
4432: LD_INT 26
4434: DOUBLE
4435: EQUAL
4436: IFTRUE 4440
4438: GO 4458
4440: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4441: LD_ADDR_VAR 0 3
4445: PUSH
4446: LD_INT 13
4448: PUSH
4449: LD_INT 14
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: ST_TO_ADDR
4456: GO 4775
4458: LD_INT 42
4460: DOUBLE
4461: EQUAL
4462: IFTRUE 4466
4464: GO 4492
4466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 23
4480: PUSH
4481: LD_INT 24
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: ST_TO_ADDR
4490: GO 4775
4492: LD_INT 43
4494: DOUBLE
4495: EQUAL
4496: IFTRUE 4500
4498: GO 4526
4500: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4501: LD_ADDR_VAR 0 3
4505: PUSH
4506: LD_INT 21
4508: PUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 23
4514: PUSH
4515: LD_INT 24
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: ST_TO_ADDR
4524: GO 4775
4526: LD_INT 44
4528: DOUBLE
4529: EQUAL
4530: IFTRUE 4534
4532: GO 4560
4534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4535: LD_ADDR_VAR 0 3
4539: PUSH
4540: LD_INT 21
4542: PUSH
4543: LD_INT 22
4545: PUSH
4546: LD_INT 23
4548: PUSH
4549: LD_INT 24
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: ST_TO_ADDR
4558: GO 4775
4560: LD_INT 45
4562: DOUBLE
4563: EQUAL
4564: IFTRUE 4568
4566: GO 4594
4568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_INT 21
4576: PUSH
4577: LD_INT 22
4579: PUSH
4580: LD_INT 23
4582: PUSH
4583: LD_INT 24
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: ST_TO_ADDR
4592: GO 4775
4594: LD_INT 49
4596: DOUBLE
4597: EQUAL
4598: IFTRUE 4602
4600: GO 4628
4602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4603: LD_ADDR_VAR 0 3
4607: PUSH
4608: LD_INT 21
4610: PUSH
4611: LD_INT 22
4613: PUSH
4614: LD_INT 23
4616: PUSH
4617: LD_INT 24
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: ST_TO_ADDR
4626: GO 4775
4628: LD_INT 51
4630: DOUBLE
4631: EQUAL
4632: IFTRUE 4636
4634: GO 4662
4636: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: LD_INT 21
4644: PUSH
4645: LD_INT 22
4647: PUSH
4648: LD_INT 23
4650: PUSH
4651: LD_INT 24
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: ST_TO_ADDR
4660: GO 4775
4662: LD_INT 52
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4696
4670: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: LD_INT 21
4678: PUSH
4679: LD_INT 22
4681: PUSH
4682: LD_INT 23
4684: PUSH
4685: LD_INT 24
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: ST_TO_ADDR
4694: GO 4775
4696: LD_INT 53
4698: DOUBLE
4699: EQUAL
4700: IFTRUE 4704
4702: GO 4722
4704: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4705: LD_ADDR_VAR 0 3
4709: PUSH
4710: LD_INT 23
4712: PUSH
4713: LD_INT 24
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: ST_TO_ADDR
4720: GO 4775
4722: LD_INT 46
4724: DOUBLE
4725: EQUAL
4726: IFTRUE 4730
4728: GO 4748
4730: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4731: LD_ADDR_VAR 0 3
4735: PUSH
4736: LD_INT 23
4738: PUSH
4739: LD_INT 24
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: ST_TO_ADDR
4746: GO 4775
4748: LD_INT 47
4750: DOUBLE
4751: EQUAL
4752: IFTRUE 4756
4754: GO 4774
4756: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: LD_INT 23
4764: PUSH
4765: LD_INT 24
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: ST_TO_ADDR
4772: GO 4775
4774: POP
// result := ( chassis in result ) ;
4775: LD_ADDR_VAR 0 3
4779: PUSH
4780: LD_VAR 0 1
4784: PUSH
4785: LD_VAR 0 3
4789: IN
4790: ST_TO_ADDR
// end ;
4791: LD_VAR 0 3
4795: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4796: LD_INT 0
4798: PPUSH
4799: PPUSH
4800: PPUSH
4801: PPUSH
4802: PPUSH
4803: PPUSH
4804: PPUSH
// result := array ;
4805: LD_ADDR_VAR 0 5
4809: PUSH
4810: LD_VAR 0 1
4814: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4815: LD_VAR 0 1
4819: NOT
4820: PUSH
4821: LD_VAR 0 2
4825: NOT
4826: OR
4827: PUSH
4828: LD_VAR 0 3
4832: NOT
4833: OR
4834: PUSH
4835: LD_VAR 0 2
4839: PUSH
4840: LD_VAR 0 1
4844: GREATER
4845: OR
4846: PUSH
4847: LD_VAR 0 3
4851: PUSH
4852: LD_VAR 0 1
4856: GREATER
4857: OR
4858: IFFALSE 4862
// exit ;
4860: GO 5158
// if direction then
4862: LD_VAR 0 4
4866: IFFALSE 4930
// begin d := 1 ;
4868: LD_ADDR_VAR 0 9
4872: PUSH
4873: LD_INT 1
4875: ST_TO_ADDR
// if i_from > i_to then
4876: LD_VAR 0 2
4880: PUSH
4881: LD_VAR 0 3
4885: GREATER
4886: IFFALSE 4912
// length := ( array - i_from ) + i_to else
4888: LD_ADDR_VAR 0 11
4892: PUSH
4893: LD_VAR 0 1
4897: PUSH
4898: LD_VAR 0 2
4902: MINUS
4903: PUSH
4904: LD_VAR 0 3
4908: PLUS
4909: ST_TO_ADDR
4910: GO 4928
// length := i_to - i_from ;
4912: LD_ADDR_VAR 0 11
4916: PUSH
4917: LD_VAR 0 3
4921: PUSH
4922: LD_VAR 0 2
4926: MINUS
4927: ST_TO_ADDR
// end else
4928: GO 4991
// begin d := - 1 ;
4930: LD_ADDR_VAR 0 9
4934: PUSH
4935: LD_INT 1
4937: NEG
4938: ST_TO_ADDR
// if i_from > i_to then
4939: LD_VAR 0 2
4943: PUSH
4944: LD_VAR 0 3
4948: GREATER
4949: IFFALSE 4969
// length := i_from - i_to else
4951: LD_ADDR_VAR 0 11
4955: PUSH
4956: LD_VAR 0 2
4960: PUSH
4961: LD_VAR 0 3
4965: MINUS
4966: ST_TO_ADDR
4967: GO 4991
// length := ( array - i_to ) + i_from ;
4969: LD_ADDR_VAR 0 11
4973: PUSH
4974: LD_VAR 0 1
4978: PUSH
4979: LD_VAR 0 3
4983: MINUS
4984: PUSH
4985: LD_VAR 0 2
4989: PLUS
4990: ST_TO_ADDR
// end ; if not length then
4991: LD_VAR 0 11
4995: NOT
4996: IFFALSE 5000
// exit ;
4998: GO 5158
// tmp := array ;
5000: LD_ADDR_VAR 0 10
5004: PUSH
5005: LD_VAR 0 1
5009: ST_TO_ADDR
// for i = 1 to length do
5010: LD_ADDR_VAR 0 6
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_VAR 0 11
5024: PUSH
5025: FOR_TO
5026: IFFALSE 5146
// begin for j = 1 to array do
5028: LD_ADDR_VAR 0 7
5032: PUSH
5033: DOUBLE
5034: LD_INT 1
5036: DEC
5037: ST_TO_ADDR
5038: LD_VAR 0 1
5042: PUSH
5043: FOR_TO
5044: IFFALSE 5132
// begin k := j + d ;
5046: LD_ADDR_VAR 0 8
5050: PUSH
5051: LD_VAR 0 7
5055: PUSH
5056: LD_VAR 0 9
5060: PLUS
5061: ST_TO_ADDR
// if k > array then
5062: LD_VAR 0 8
5066: PUSH
5067: LD_VAR 0 1
5071: GREATER
5072: IFFALSE 5082
// k := 1 ;
5074: LD_ADDR_VAR 0 8
5078: PUSH
5079: LD_INT 1
5081: ST_TO_ADDR
// if not k then
5082: LD_VAR 0 8
5086: NOT
5087: IFFALSE 5099
// k := array ;
5089: LD_ADDR_VAR 0 8
5093: PUSH
5094: LD_VAR 0 1
5098: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5099: LD_ADDR_VAR 0 10
5103: PUSH
5104: LD_VAR 0 10
5108: PPUSH
5109: LD_VAR 0 8
5113: PPUSH
5114: LD_VAR 0 1
5118: PUSH
5119: LD_VAR 0 7
5123: ARRAY
5124: PPUSH
5125: CALL_OW 1
5129: ST_TO_ADDR
// end ;
5130: GO 5043
5132: POP
5133: POP
// array := tmp ;
5134: LD_ADDR_VAR 0 1
5138: PUSH
5139: LD_VAR 0 10
5143: ST_TO_ADDR
// end ;
5144: GO 5025
5146: POP
5147: POP
// result := array ;
5148: LD_ADDR_VAR 0 5
5152: PUSH
5153: LD_VAR 0 1
5157: ST_TO_ADDR
// end ;
5158: LD_VAR 0 5
5162: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5163: LD_INT 0
5165: PPUSH
5166: PPUSH
// result := 0 ;
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: LD_INT 0
5174: ST_TO_ADDR
// if not array or not value in array then
5175: LD_VAR 0 1
5179: NOT
5180: PUSH
5181: LD_VAR 0 2
5185: PUSH
5186: LD_VAR 0 1
5190: IN
5191: NOT
5192: OR
5193: IFFALSE 5197
// exit ;
5195: GO 5251
// for i = 1 to array do
5197: LD_ADDR_VAR 0 4
5201: PUSH
5202: DOUBLE
5203: LD_INT 1
5205: DEC
5206: ST_TO_ADDR
5207: LD_VAR 0 1
5211: PUSH
5212: FOR_TO
5213: IFFALSE 5249
// if value = array [ i ] then
5215: LD_VAR 0 2
5219: PUSH
5220: LD_VAR 0 1
5224: PUSH
5225: LD_VAR 0 4
5229: ARRAY
5230: EQUAL
5231: IFFALSE 5247
// begin result := i ;
5233: LD_ADDR_VAR 0 3
5237: PUSH
5238: LD_VAR 0 4
5242: ST_TO_ADDR
// exit ;
5243: POP
5244: POP
5245: GO 5251
// end ;
5247: GO 5212
5249: POP
5250: POP
// end ;
5251: LD_VAR 0 3
5255: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5256: LD_INT 0
5258: PPUSH
// vc_chassis := chassis ;
5259: LD_ADDR_OWVAR 37
5263: PUSH
5264: LD_VAR 0 1
5268: ST_TO_ADDR
// vc_engine := engine ;
5269: LD_ADDR_OWVAR 39
5273: PUSH
5274: LD_VAR 0 2
5278: ST_TO_ADDR
// vc_control := control ;
5279: LD_ADDR_OWVAR 38
5283: PUSH
5284: LD_VAR 0 3
5288: ST_TO_ADDR
// vc_weapon := weapon ;
5289: LD_ADDR_OWVAR 40
5293: PUSH
5294: LD_VAR 0 4
5298: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5299: LD_ADDR_OWVAR 41
5303: PUSH
5304: LD_VAR 0 5
5308: ST_TO_ADDR
// end ;
5309: LD_VAR 0 6
5313: RET
// export function WantPlant ( unit ) ; var task ; begin
5314: LD_INT 0
5316: PPUSH
5317: PPUSH
// result := false ;
5318: LD_ADDR_VAR 0 2
5322: PUSH
5323: LD_INT 0
5325: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5326: LD_ADDR_VAR 0 3
5330: PUSH
5331: LD_VAR 0 1
5335: PPUSH
5336: CALL_OW 437
5340: ST_TO_ADDR
// if task then
5341: LD_VAR 0 3
5345: IFFALSE 5373
// if task [ 1 ] [ 1 ] = p then
5347: LD_VAR 0 3
5351: PUSH
5352: LD_INT 1
5354: ARRAY
5355: PUSH
5356: LD_INT 1
5358: ARRAY
5359: PUSH
5360: LD_STRING p
5362: EQUAL
5363: IFFALSE 5373
// result := true ;
5365: LD_ADDR_VAR 0 2
5369: PUSH
5370: LD_INT 1
5372: ST_TO_ADDR
// end ;
5373: LD_VAR 0 2
5377: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5378: LD_INT 0
5380: PPUSH
5381: PPUSH
5382: PPUSH
5383: PPUSH
// if pos < 1 then
5384: LD_VAR 0 2
5388: PUSH
5389: LD_INT 1
5391: LESS
5392: IFFALSE 5396
// exit ;
5394: GO 5699
// if pos = 1 then
5396: LD_VAR 0 2
5400: PUSH
5401: LD_INT 1
5403: EQUAL
5404: IFFALSE 5437
// result := Replace ( arr , pos [ 1 ] , value ) else
5406: LD_ADDR_VAR 0 4
5410: PUSH
5411: LD_VAR 0 1
5415: PPUSH
5416: LD_VAR 0 2
5420: PUSH
5421: LD_INT 1
5423: ARRAY
5424: PPUSH
5425: LD_VAR 0 3
5429: PPUSH
5430: CALL_OW 1
5434: ST_TO_ADDR
5435: GO 5699
// begin tmp := arr ;
5437: LD_ADDR_VAR 0 6
5441: PUSH
5442: LD_VAR 0 1
5446: ST_TO_ADDR
// s_arr := [ tmp ] ;
5447: LD_ADDR_VAR 0 7
5451: PUSH
5452: LD_VAR 0 6
5456: PUSH
5457: EMPTY
5458: LIST
5459: ST_TO_ADDR
// for i = 1 to pos - 1 do
5460: LD_ADDR_VAR 0 5
5464: PUSH
5465: DOUBLE
5466: LD_INT 1
5468: DEC
5469: ST_TO_ADDR
5470: LD_VAR 0 2
5474: PUSH
5475: LD_INT 1
5477: MINUS
5478: PUSH
5479: FOR_TO
5480: IFFALSE 5525
// begin tmp := tmp [ pos [ i ] ] ;
5482: LD_ADDR_VAR 0 6
5486: PUSH
5487: LD_VAR 0 6
5491: PUSH
5492: LD_VAR 0 2
5496: PUSH
5497: LD_VAR 0 5
5501: ARRAY
5502: ARRAY
5503: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5504: LD_ADDR_VAR 0 7
5508: PUSH
5509: LD_VAR 0 7
5513: PUSH
5514: LD_VAR 0 6
5518: PUSH
5519: EMPTY
5520: LIST
5521: ADD
5522: ST_TO_ADDR
// end ;
5523: GO 5479
5525: POP
5526: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5527: LD_ADDR_VAR 0 6
5531: PUSH
5532: LD_VAR 0 6
5536: PPUSH
5537: LD_VAR 0 2
5541: PUSH
5542: LD_VAR 0 2
5546: ARRAY
5547: PPUSH
5548: LD_VAR 0 3
5552: PPUSH
5553: CALL_OW 1
5557: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5558: LD_ADDR_VAR 0 7
5562: PUSH
5563: LD_VAR 0 7
5567: PPUSH
5568: LD_VAR 0 7
5572: PPUSH
5573: LD_VAR 0 6
5577: PPUSH
5578: CALL_OW 1
5582: ST_TO_ADDR
// for i = s_arr downto 2 do
5583: LD_ADDR_VAR 0 5
5587: PUSH
5588: DOUBLE
5589: LD_VAR 0 7
5593: INC
5594: ST_TO_ADDR
5595: LD_INT 2
5597: PUSH
5598: FOR_DOWNTO
5599: IFFALSE 5683
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5601: LD_ADDR_VAR 0 6
5605: PUSH
5606: LD_VAR 0 7
5610: PUSH
5611: LD_VAR 0 5
5615: PUSH
5616: LD_INT 1
5618: MINUS
5619: ARRAY
5620: PPUSH
5621: LD_VAR 0 2
5625: PUSH
5626: LD_VAR 0 5
5630: PUSH
5631: LD_INT 1
5633: MINUS
5634: ARRAY
5635: PPUSH
5636: LD_VAR 0 7
5640: PUSH
5641: LD_VAR 0 5
5645: ARRAY
5646: PPUSH
5647: CALL_OW 1
5651: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5652: LD_ADDR_VAR 0 7
5656: PUSH
5657: LD_VAR 0 7
5661: PPUSH
5662: LD_VAR 0 5
5666: PUSH
5667: LD_INT 1
5669: MINUS
5670: PPUSH
5671: LD_VAR 0 6
5675: PPUSH
5676: CALL_OW 1
5680: ST_TO_ADDR
// end ;
5681: GO 5598
5683: POP
5684: POP
// result := s_arr [ 1 ] ;
5685: LD_ADDR_VAR 0 4
5689: PUSH
5690: LD_VAR 0 7
5694: PUSH
5695: LD_INT 1
5697: ARRAY
5698: ST_TO_ADDR
// end ; end ;
5699: LD_VAR 0 4
5703: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5704: LD_INT 0
5706: PPUSH
5707: PPUSH
// if not list then
5708: LD_VAR 0 1
5712: NOT
5713: IFFALSE 5717
// exit ;
5715: GO 5808
// i := list [ pos1 ] ;
5717: LD_ADDR_VAR 0 5
5721: PUSH
5722: LD_VAR 0 1
5726: PUSH
5727: LD_VAR 0 2
5731: ARRAY
5732: ST_TO_ADDR
// if not i then
5733: LD_VAR 0 5
5737: NOT
5738: IFFALSE 5742
// exit ;
5740: GO 5808
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5742: LD_ADDR_VAR 0 1
5746: PUSH
5747: LD_VAR 0 1
5751: PPUSH
5752: LD_VAR 0 2
5756: PPUSH
5757: LD_VAR 0 1
5761: PUSH
5762: LD_VAR 0 3
5766: ARRAY
5767: PPUSH
5768: CALL_OW 1
5772: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5773: LD_ADDR_VAR 0 1
5777: PUSH
5778: LD_VAR 0 1
5782: PPUSH
5783: LD_VAR 0 3
5787: PPUSH
5788: LD_VAR 0 5
5792: PPUSH
5793: CALL_OW 1
5797: ST_TO_ADDR
// result := list ;
5798: LD_ADDR_VAR 0 4
5802: PUSH
5803: LD_VAR 0 1
5807: ST_TO_ADDR
// end ;
5808: LD_VAR 0 4
5812: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5813: LD_INT 0
5815: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5816: LD_ADDR_VAR 0 5
5820: PUSH
5821: LD_VAR 0 1
5825: PPUSH
5826: CALL_OW 250
5830: PPUSH
5831: LD_VAR 0 1
5835: PPUSH
5836: CALL_OW 251
5840: PPUSH
5841: LD_VAR 0 2
5845: PPUSH
5846: LD_VAR 0 3
5850: PPUSH
5851: LD_VAR 0 4
5855: PPUSH
5856: CALL 5866 0 5
5860: ST_TO_ADDR
// end ;
5861: LD_VAR 0 5
5865: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5866: LD_INT 0
5868: PPUSH
5869: PPUSH
5870: PPUSH
5871: PPUSH
// if not list then
5872: LD_VAR 0 3
5876: NOT
5877: IFFALSE 5881
// exit ;
5879: GO 6269
// result := [ ] ;
5881: LD_ADDR_VAR 0 6
5885: PUSH
5886: EMPTY
5887: ST_TO_ADDR
// for i in list do
5888: LD_ADDR_VAR 0 7
5892: PUSH
5893: LD_VAR 0 3
5897: PUSH
5898: FOR_IN
5899: IFFALSE 6101
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5901: LD_ADDR_VAR 0 9
5905: PUSH
5906: LD_VAR 0 7
5910: PPUSH
5911: LD_VAR 0 1
5915: PPUSH
5916: LD_VAR 0 2
5920: PPUSH
5921: CALL_OW 297
5925: ST_TO_ADDR
// if not result then
5926: LD_VAR 0 6
5930: NOT
5931: IFFALSE 5957
// result := [ [ i , tmp ] ] else
5933: LD_ADDR_VAR 0 6
5937: PUSH
5938: LD_VAR 0 7
5942: PUSH
5943: LD_VAR 0 9
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: EMPTY
5953: LIST
5954: ST_TO_ADDR
5955: GO 6099
// begin if result [ result ] [ 2 ] < tmp then
5957: LD_VAR 0 6
5961: PUSH
5962: LD_VAR 0 6
5966: ARRAY
5967: PUSH
5968: LD_INT 2
5970: ARRAY
5971: PUSH
5972: LD_VAR 0 9
5976: LESS
5977: IFFALSE 6019
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5979: LD_ADDR_VAR 0 6
5983: PUSH
5984: LD_VAR 0 6
5988: PPUSH
5989: LD_VAR 0 6
5993: PUSH
5994: LD_INT 1
5996: PLUS
5997: PPUSH
5998: LD_VAR 0 7
6002: PUSH
6003: LD_VAR 0 9
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 2
6016: ST_TO_ADDR
6017: GO 6099
// for j = 1 to result do
6019: LD_ADDR_VAR 0 8
6023: PUSH
6024: DOUBLE
6025: LD_INT 1
6027: DEC
6028: ST_TO_ADDR
6029: LD_VAR 0 6
6033: PUSH
6034: FOR_TO
6035: IFFALSE 6097
// begin if tmp < result [ j ] [ 2 ] then
6037: LD_VAR 0 9
6041: PUSH
6042: LD_VAR 0 6
6046: PUSH
6047: LD_VAR 0 8
6051: ARRAY
6052: PUSH
6053: LD_INT 2
6055: ARRAY
6056: LESS
6057: IFFALSE 6095
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6059: LD_ADDR_VAR 0 6
6063: PUSH
6064: LD_VAR 0 6
6068: PPUSH
6069: LD_VAR 0 8
6073: PPUSH
6074: LD_VAR 0 7
6078: PUSH
6079: LD_VAR 0 9
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PPUSH
6088: CALL_OW 2
6092: ST_TO_ADDR
// break ;
6093: GO 6097
// end ; end ;
6095: GO 6034
6097: POP
6098: POP
// end ; end ;
6099: GO 5898
6101: POP
6102: POP
// if result and not asc then
6103: LD_VAR 0 6
6107: PUSH
6108: LD_VAR 0 4
6112: NOT
6113: AND
6114: IFFALSE 6189
// begin tmp := result ;
6116: LD_ADDR_VAR 0 9
6120: PUSH
6121: LD_VAR 0 6
6125: ST_TO_ADDR
// for i = tmp downto 1 do
6126: LD_ADDR_VAR 0 7
6130: PUSH
6131: DOUBLE
6132: LD_VAR 0 9
6136: INC
6137: ST_TO_ADDR
6138: LD_INT 1
6140: PUSH
6141: FOR_DOWNTO
6142: IFFALSE 6187
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6144: LD_ADDR_VAR 0 6
6148: PUSH
6149: LD_VAR 0 6
6153: PPUSH
6154: LD_VAR 0 9
6158: PUSH
6159: LD_VAR 0 7
6163: MINUS
6164: PUSH
6165: LD_INT 1
6167: PLUS
6168: PPUSH
6169: LD_VAR 0 9
6173: PUSH
6174: LD_VAR 0 7
6178: ARRAY
6179: PPUSH
6180: CALL_OW 1
6184: ST_TO_ADDR
6185: GO 6141
6187: POP
6188: POP
// end ; tmp := [ ] ;
6189: LD_ADDR_VAR 0 9
6193: PUSH
6194: EMPTY
6195: ST_TO_ADDR
// if mode then
6196: LD_VAR 0 5
6200: IFFALSE 6269
// begin for i = 1 to result do
6202: LD_ADDR_VAR 0 7
6206: PUSH
6207: DOUBLE
6208: LD_INT 1
6210: DEC
6211: ST_TO_ADDR
6212: LD_VAR 0 6
6216: PUSH
6217: FOR_TO
6218: IFFALSE 6257
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6220: LD_ADDR_VAR 0 9
6224: PUSH
6225: LD_VAR 0 9
6229: PPUSH
6230: LD_VAR 0 7
6234: PPUSH
6235: LD_VAR 0 6
6239: PUSH
6240: LD_VAR 0 7
6244: ARRAY
6245: PUSH
6246: LD_INT 1
6248: ARRAY
6249: PPUSH
6250: CALL_OW 1
6254: ST_TO_ADDR
6255: GO 6217
6257: POP
6258: POP
// result := tmp ;
6259: LD_ADDR_VAR 0 6
6263: PUSH
6264: LD_VAR 0 9
6268: ST_TO_ADDR
// end ; end ;
6269: LD_VAR 0 6
6273: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6274: LD_INT 0
6276: PPUSH
6277: PPUSH
6278: PPUSH
6279: PPUSH
6280: PPUSH
6281: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6282: LD_ADDR_VAR 0 5
6286: PUSH
6287: LD_INT 0
6289: PUSH
6290: LD_INT 0
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: EMPTY
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: ST_TO_ADDR
// if not x or not y then
6304: LD_VAR 0 2
6308: NOT
6309: PUSH
6310: LD_VAR 0 3
6314: NOT
6315: OR
6316: IFFALSE 6320
// exit ;
6318: GO 7970
// if not range then
6320: LD_VAR 0 4
6324: NOT
6325: IFFALSE 6335
// range := 10 ;
6327: LD_ADDR_VAR 0 4
6331: PUSH
6332: LD_INT 10
6334: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6335: LD_ADDR_VAR 0 8
6339: PUSH
6340: LD_INT 81
6342: PUSH
6343: LD_VAR 0 1
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 92
6354: PUSH
6355: LD_VAR 0 2
6359: PUSH
6360: LD_VAR 0 3
6364: PUSH
6365: LD_VAR 0 4
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 3
6378: PUSH
6379: LD_INT 21
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: LIST
6397: PPUSH
6398: CALL_OW 69
6402: ST_TO_ADDR
// if not tmp then
6403: LD_VAR 0 8
6407: NOT
6408: IFFALSE 6412
// exit ;
6410: GO 7970
// for i in tmp do
6412: LD_ADDR_VAR 0 6
6416: PUSH
6417: LD_VAR 0 8
6421: PUSH
6422: FOR_IN
6423: IFFALSE 7945
// begin points := [ 0 , 0 , 0 ] ;
6425: LD_ADDR_VAR 0 9
6429: PUSH
6430: LD_INT 0
6432: PUSH
6433: LD_INT 0
6435: PUSH
6436: LD_INT 0
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: LIST
6443: ST_TO_ADDR
// bpoints := 1 ;
6444: LD_ADDR_VAR 0 10
6448: PUSH
6449: LD_INT 1
6451: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6452: LD_VAR 0 6
6456: PPUSH
6457: CALL_OW 247
6461: PUSH
6462: LD_INT 1
6464: DOUBLE
6465: EQUAL
6466: IFTRUE 6470
6468: GO 7048
6470: POP
// begin if GetClass ( i ) = 1 then
6471: LD_VAR 0 6
6475: PPUSH
6476: CALL_OW 257
6480: PUSH
6481: LD_INT 1
6483: EQUAL
6484: IFFALSE 6505
// points := [ 10 , 5 , 3 ] ;
6486: LD_ADDR_VAR 0 9
6490: PUSH
6491: LD_INT 10
6493: PUSH
6494: LD_INT 5
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: LIST
6504: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6505: LD_VAR 0 6
6509: PPUSH
6510: CALL_OW 257
6514: PUSH
6515: LD_INT 2
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: LD_INT 4
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: IN
6529: IFFALSE 6550
// points := [ 3 , 2 , 1 ] ;
6531: LD_ADDR_VAR 0 9
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: LD_INT 2
6541: PUSH
6542: LD_INT 1
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6550: LD_VAR 0 6
6554: PPUSH
6555: CALL_OW 257
6559: PUSH
6560: LD_INT 5
6562: EQUAL
6563: IFFALSE 6584
// points := [ 130 , 5 , 2 ] ;
6565: LD_ADDR_VAR 0 9
6569: PUSH
6570: LD_INT 130
6572: PUSH
6573: LD_INT 5
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: LIST
6583: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6584: LD_VAR 0 6
6588: PPUSH
6589: CALL_OW 257
6593: PUSH
6594: LD_INT 8
6596: EQUAL
6597: IFFALSE 6618
// points := [ 35 , 35 , 30 ] ;
6599: LD_ADDR_VAR 0 9
6603: PUSH
6604: LD_INT 35
6606: PUSH
6607: LD_INT 35
6609: PUSH
6610: LD_INT 30
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6618: LD_VAR 0 6
6622: PPUSH
6623: CALL_OW 257
6627: PUSH
6628: LD_INT 9
6630: EQUAL
6631: IFFALSE 6652
// points := [ 20 , 55 , 40 ] ;
6633: LD_ADDR_VAR 0 9
6637: PUSH
6638: LD_INT 20
6640: PUSH
6641: LD_INT 55
6643: PUSH
6644: LD_INT 40
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: LIST
6651: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6652: LD_VAR 0 6
6656: PPUSH
6657: CALL_OW 257
6661: PUSH
6662: LD_INT 12
6664: PUSH
6665: LD_INT 16
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: IN
6672: IFFALSE 6693
// points := [ 5 , 3 , 2 ] ;
6674: LD_ADDR_VAR 0 9
6678: PUSH
6679: LD_INT 5
6681: PUSH
6682: LD_INT 3
6684: PUSH
6685: LD_INT 2
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6693: LD_VAR 0 6
6697: PPUSH
6698: CALL_OW 257
6702: PUSH
6703: LD_INT 17
6705: EQUAL
6706: IFFALSE 6727
// points := [ 100 , 50 , 75 ] ;
6708: LD_ADDR_VAR 0 9
6712: PUSH
6713: LD_INT 100
6715: PUSH
6716: LD_INT 50
6718: PUSH
6719: LD_INT 75
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6727: LD_VAR 0 6
6731: PPUSH
6732: CALL_OW 257
6736: PUSH
6737: LD_INT 15
6739: EQUAL
6740: IFFALSE 6761
// points := [ 10 , 5 , 3 ] ;
6742: LD_ADDR_VAR 0 9
6746: PUSH
6747: LD_INT 10
6749: PUSH
6750: LD_INT 5
6752: PUSH
6753: LD_INT 3
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6761: LD_VAR 0 6
6765: PPUSH
6766: CALL_OW 257
6770: PUSH
6771: LD_INT 14
6773: EQUAL
6774: IFFALSE 6795
// points := [ 10 , 0 , 0 ] ;
6776: LD_ADDR_VAR 0 9
6780: PUSH
6781: LD_INT 10
6783: PUSH
6784: LD_INT 0
6786: PUSH
6787: LD_INT 0
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6795: LD_VAR 0 6
6799: PPUSH
6800: CALL_OW 257
6804: PUSH
6805: LD_INT 11
6807: EQUAL
6808: IFFALSE 6829
// points := [ 30 , 10 , 5 ] ;
6810: LD_ADDR_VAR 0 9
6814: PUSH
6815: LD_INT 30
6817: PUSH
6818: LD_INT 10
6820: PUSH
6821: LD_INT 5
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6829: LD_VAR 0 1
6833: PPUSH
6834: LD_INT 5
6836: PPUSH
6837: CALL_OW 321
6841: PUSH
6842: LD_INT 2
6844: EQUAL
6845: IFFALSE 6862
// bpoints := bpoints * 1.8 ;
6847: LD_ADDR_VAR 0 10
6851: PUSH
6852: LD_VAR 0 10
6856: PUSH
6857: LD_REAL  1.80000000000000E+0000
6860: MUL
6861: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6862: LD_VAR 0 6
6866: PPUSH
6867: CALL_OW 257
6871: PUSH
6872: LD_INT 1
6874: PUSH
6875: LD_INT 2
6877: PUSH
6878: LD_INT 3
6880: PUSH
6881: LD_INT 4
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: IN
6890: PUSH
6891: LD_VAR 0 1
6895: PPUSH
6896: LD_INT 51
6898: PPUSH
6899: CALL_OW 321
6903: PUSH
6904: LD_INT 2
6906: EQUAL
6907: AND
6908: IFFALSE 6925
// bpoints := bpoints * 1.2 ;
6910: LD_ADDR_VAR 0 10
6914: PUSH
6915: LD_VAR 0 10
6919: PUSH
6920: LD_REAL  1.20000000000000E+0000
6923: MUL
6924: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6925: LD_VAR 0 6
6929: PPUSH
6930: CALL_OW 257
6934: PUSH
6935: LD_INT 5
6937: PUSH
6938: LD_INT 7
6940: PUSH
6941: LD_INT 9
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: LIST
6948: IN
6949: PUSH
6950: LD_VAR 0 1
6954: PPUSH
6955: LD_INT 52
6957: PPUSH
6958: CALL_OW 321
6962: PUSH
6963: LD_INT 2
6965: EQUAL
6966: AND
6967: IFFALSE 6984
// bpoints := bpoints * 1.5 ;
6969: LD_ADDR_VAR 0 10
6973: PUSH
6974: LD_VAR 0 10
6978: PUSH
6979: LD_REAL  1.50000000000000E+0000
6982: MUL
6983: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6984: LD_VAR 0 1
6988: PPUSH
6989: LD_INT 66
6991: PPUSH
6992: CALL_OW 321
6996: PUSH
6997: LD_INT 2
6999: EQUAL
7000: IFFALSE 7017
// bpoints := bpoints * 1.1 ;
7002: LD_ADDR_VAR 0 10
7006: PUSH
7007: LD_VAR 0 10
7011: PUSH
7012: LD_REAL  1.10000000000000E+0000
7015: MUL
7016: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7017: LD_ADDR_VAR 0 10
7021: PUSH
7022: LD_VAR 0 10
7026: PUSH
7027: LD_VAR 0 6
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: CALL_OW 259
7039: PUSH
7040: LD_REAL  1.15000000000000E+0000
7043: MUL
7044: MUL
7045: ST_TO_ADDR
// end ; unit_vehicle :
7046: GO 7874
7048: LD_INT 2
7050: DOUBLE
7051: EQUAL
7052: IFTRUE 7056
7054: GO 7862
7056: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7057: LD_VAR 0 6
7061: PPUSH
7062: CALL_OW 264
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: LD_INT 42
7072: PUSH
7073: LD_INT 24
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: IN
7081: IFFALSE 7102
// points := [ 25 , 5 , 3 ] ;
7083: LD_ADDR_VAR 0 9
7087: PUSH
7088: LD_INT 25
7090: PUSH
7091: LD_INT 5
7093: PUSH
7094: LD_INT 3
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: LIST
7101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7102: LD_VAR 0 6
7106: PPUSH
7107: CALL_OW 264
7111: PUSH
7112: LD_INT 4
7114: PUSH
7115: LD_INT 43
7117: PUSH
7118: LD_INT 25
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: LIST
7125: IN
7126: IFFALSE 7147
// points := [ 40 , 15 , 5 ] ;
7128: LD_ADDR_VAR 0 9
7132: PUSH
7133: LD_INT 40
7135: PUSH
7136: LD_INT 15
7138: PUSH
7139: LD_INT 5
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7147: LD_VAR 0 6
7151: PPUSH
7152: CALL_OW 264
7156: PUSH
7157: LD_INT 3
7159: PUSH
7160: LD_INT 23
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: IN
7167: IFFALSE 7188
// points := [ 7 , 25 , 8 ] ;
7169: LD_ADDR_VAR 0 9
7173: PUSH
7174: LD_INT 7
7176: PUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 8
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7188: LD_VAR 0 6
7192: PPUSH
7193: CALL_OW 264
7197: PUSH
7198: LD_INT 5
7200: PUSH
7201: LD_INT 27
7203: PUSH
7204: LD_INT 44
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: IN
7212: IFFALSE 7233
// points := [ 14 , 50 , 16 ] ;
7214: LD_ADDR_VAR 0 9
7218: PUSH
7219: LD_INT 14
7221: PUSH
7222: LD_INT 50
7224: PUSH
7225: LD_INT 16
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: LIST
7232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7233: LD_VAR 0 6
7237: PPUSH
7238: CALL_OW 264
7242: PUSH
7243: LD_INT 6
7245: PUSH
7246: LD_INT 46
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: IN
7253: IFFALSE 7274
// points := [ 32 , 120 , 70 ] ;
7255: LD_ADDR_VAR 0 9
7259: PUSH
7260: LD_INT 32
7262: PUSH
7263: LD_INT 120
7265: PUSH
7266: LD_INT 70
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7274: LD_VAR 0 6
7278: PPUSH
7279: CALL_OW 264
7283: PUSH
7284: LD_INT 7
7286: PUSH
7287: LD_INT 28
7289: PUSH
7290: LD_INT 45
7292: PUSH
7293: LD_INT 92
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: IN
7302: IFFALSE 7323
// points := [ 35 , 20 , 45 ] ;
7304: LD_ADDR_VAR 0 9
7308: PUSH
7309: LD_INT 35
7311: PUSH
7312: LD_INT 20
7314: PUSH
7315: LD_INT 45
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7323: LD_VAR 0 6
7327: PPUSH
7328: CALL_OW 264
7332: PUSH
7333: LD_INT 47
7335: PUSH
7336: EMPTY
7337: LIST
7338: IN
7339: IFFALSE 7360
// points := [ 67 , 45 , 75 ] ;
7341: LD_ADDR_VAR 0 9
7345: PUSH
7346: LD_INT 67
7348: PUSH
7349: LD_INT 45
7351: PUSH
7352: LD_INT 75
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7360: LD_VAR 0 6
7364: PPUSH
7365: CALL_OW 264
7369: PUSH
7370: LD_INT 26
7372: PUSH
7373: EMPTY
7374: LIST
7375: IN
7376: IFFALSE 7397
// points := [ 120 , 30 , 80 ] ;
7378: LD_ADDR_VAR 0 9
7382: PUSH
7383: LD_INT 120
7385: PUSH
7386: LD_INT 30
7388: PUSH
7389: LD_INT 80
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7397: LD_VAR 0 6
7401: PPUSH
7402: CALL_OW 264
7406: PUSH
7407: LD_INT 22
7409: PUSH
7410: EMPTY
7411: LIST
7412: IN
7413: IFFALSE 7434
// points := [ 40 , 1 , 1 ] ;
7415: LD_ADDR_VAR 0 9
7419: PUSH
7420: LD_INT 40
7422: PUSH
7423: LD_INT 1
7425: PUSH
7426: LD_INT 1
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: LIST
7433: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7434: LD_VAR 0 6
7438: PPUSH
7439: CALL_OW 264
7443: PUSH
7444: LD_INT 29
7446: PUSH
7447: EMPTY
7448: LIST
7449: IN
7450: IFFALSE 7471
// points := [ 70 , 200 , 400 ] ;
7452: LD_ADDR_VAR 0 9
7456: PUSH
7457: LD_INT 70
7459: PUSH
7460: LD_INT 200
7462: PUSH
7463: LD_INT 400
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7471: LD_VAR 0 6
7475: PPUSH
7476: CALL_OW 264
7480: PUSH
7481: LD_INT 14
7483: PUSH
7484: LD_INT 53
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: IN
7491: IFFALSE 7512
// points := [ 40 , 10 , 20 ] ;
7493: LD_ADDR_VAR 0 9
7497: PUSH
7498: LD_INT 40
7500: PUSH
7501: LD_INT 10
7503: PUSH
7504: LD_INT 20
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: LIST
7511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7512: LD_VAR 0 6
7516: PPUSH
7517: CALL_OW 264
7521: PUSH
7522: LD_INT 9
7524: PUSH
7525: EMPTY
7526: LIST
7527: IN
7528: IFFALSE 7549
// points := [ 5 , 70 , 20 ] ;
7530: LD_ADDR_VAR 0 9
7534: PUSH
7535: LD_INT 5
7537: PUSH
7538: LD_INT 70
7540: PUSH
7541: LD_INT 20
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7549: LD_VAR 0 6
7553: PPUSH
7554: CALL_OW 264
7558: PUSH
7559: LD_INT 10
7561: PUSH
7562: EMPTY
7563: LIST
7564: IN
7565: IFFALSE 7586
// points := [ 35 , 110 , 70 ] ;
7567: LD_ADDR_VAR 0 9
7571: PUSH
7572: LD_INT 35
7574: PUSH
7575: LD_INT 110
7577: PUSH
7578: LD_INT 70
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: LIST
7585: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7586: LD_VAR 0 6
7590: PPUSH
7591: CALL_OW 265
7595: PUSH
7596: LD_INT 25
7598: EQUAL
7599: IFFALSE 7620
// points := [ 80 , 65 , 100 ] ;
7601: LD_ADDR_VAR 0 9
7605: PUSH
7606: LD_INT 80
7608: PUSH
7609: LD_INT 65
7611: PUSH
7612: LD_INT 100
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: LIST
7619: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7620: LD_VAR 0 6
7624: PPUSH
7625: CALL_OW 263
7629: PUSH
7630: LD_INT 1
7632: EQUAL
7633: IFFALSE 7668
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7635: LD_ADDR_VAR 0 10
7639: PUSH
7640: LD_VAR 0 10
7644: PUSH
7645: LD_VAR 0 6
7649: PPUSH
7650: CALL_OW 311
7654: PPUSH
7655: LD_INT 3
7657: PPUSH
7658: CALL_OW 259
7662: PUSH
7663: LD_INT 4
7665: MUL
7666: MUL
7667: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7668: LD_VAR 0 6
7672: PPUSH
7673: CALL_OW 263
7677: PUSH
7678: LD_INT 2
7680: EQUAL
7681: IFFALSE 7732
// begin j := IsControledBy ( i ) ;
7683: LD_ADDR_VAR 0 7
7687: PUSH
7688: LD_VAR 0 6
7692: PPUSH
7693: CALL_OW 312
7697: ST_TO_ADDR
// if j then
7698: LD_VAR 0 7
7702: IFFALSE 7732
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7704: LD_ADDR_VAR 0 10
7708: PUSH
7709: LD_VAR 0 10
7713: PUSH
7714: LD_VAR 0 7
7718: PPUSH
7719: LD_INT 3
7721: PPUSH
7722: CALL_OW 259
7726: PUSH
7727: LD_INT 3
7729: MUL
7730: MUL
7731: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7732: LD_VAR 0 6
7736: PPUSH
7737: CALL_OW 264
7741: PUSH
7742: LD_INT 5
7744: PUSH
7745: LD_INT 6
7747: PUSH
7748: LD_INT 46
7750: PUSH
7751: LD_INT 44
7753: PUSH
7754: LD_INT 47
7756: PUSH
7757: LD_INT 45
7759: PUSH
7760: LD_INT 28
7762: PUSH
7763: LD_INT 7
7765: PUSH
7766: LD_INT 27
7768: PUSH
7769: LD_INT 29
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: IN
7784: PUSH
7785: LD_VAR 0 1
7789: PPUSH
7790: LD_INT 52
7792: PPUSH
7793: CALL_OW 321
7797: PUSH
7798: LD_INT 2
7800: EQUAL
7801: AND
7802: IFFALSE 7819
// bpoints := bpoints * 1.2 ;
7804: LD_ADDR_VAR 0 10
7808: PUSH
7809: LD_VAR 0 10
7813: PUSH
7814: LD_REAL  1.20000000000000E+0000
7817: MUL
7818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7819: LD_VAR 0 6
7823: PPUSH
7824: CALL_OW 264
7828: PUSH
7829: LD_INT 6
7831: PUSH
7832: LD_INT 46
7834: PUSH
7835: LD_INT 47
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: LIST
7842: IN
7843: IFFALSE 7860
// bpoints := bpoints * 1.2 ;
7845: LD_ADDR_VAR 0 10
7849: PUSH
7850: LD_VAR 0 10
7854: PUSH
7855: LD_REAL  1.20000000000000E+0000
7858: MUL
7859: ST_TO_ADDR
// end ; unit_building :
7860: GO 7874
7862: LD_INT 3
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 7873
7870: POP
// ; end ;
7871: GO 7874
7873: POP
// for j = 1 to 3 do
7874: LD_ADDR_VAR 0 7
7878: PUSH
7879: DOUBLE
7880: LD_INT 1
7882: DEC
7883: ST_TO_ADDR
7884: LD_INT 3
7886: PUSH
7887: FOR_TO
7888: IFFALSE 7941
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7890: LD_ADDR_VAR 0 5
7894: PUSH
7895: LD_VAR 0 5
7899: PPUSH
7900: LD_VAR 0 7
7904: PPUSH
7905: LD_VAR 0 5
7909: PUSH
7910: LD_VAR 0 7
7914: ARRAY
7915: PUSH
7916: LD_VAR 0 9
7920: PUSH
7921: LD_VAR 0 7
7925: ARRAY
7926: PUSH
7927: LD_VAR 0 10
7931: MUL
7932: PLUS
7933: PPUSH
7934: CALL_OW 1
7938: ST_TO_ADDR
7939: GO 7887
7941: POP
7942: POP
// end ;
7943: GO 6422
7945: POP
7946: POP
// result := Replace ( result , 4 , tmp ) ;
7947: LD_ADDR_VAR 0 5
7951: PUSH
7952: LD_VAR 0 5
7956: PPUSH
7957: LD_INT 4
7959: PPUSH
7960: LD_VAR 0 8
7964: PPUSH
7965: CALL_OW 1
7969: ST_TO_ADDR
// end ;
7970: LD_VAR 0 5
7974: RET
// export function DangerAtRange ( unit , range ) ; begin
7975: LD_INT 0
7977: PPUSH
// if not unit then
7978: LD_VAR 0 1
7982: NOT
7983: IFFALSE 7987
// exit ;
7985: GO 8032
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7987: LD_ADDR_VAR 0 3
7991: PUSH
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 255
8001: PPUSH
8002: LD_VAR 0 1
8006: PPUSH
8007: CALL_OW 250
8011: PPUSH
8012: LD_VAR 0 1
8016: PPUSH
8017: CALL_OW 251
8021: PPUSH
8022: LD_VAR 0 2
8026: PPUSH
8027: CALL 6274 0 4
8031: ST_TO_ADDR
// end ;
8032: LD_VAR 0 3
8036: RET
// export function DangerInArea ( side , area ) ; begin
8037: LD_INT 0
8039: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8040: LD_ADDR_VAR 0 3
8044: PUSH
8045: LD_VAR 0 2
8049: PPUSH
8050: LD_INT 81
8052: PUSH
8053: LD_VAR 0 1
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PPUSH
8062: CALL_OW 70
8066: ST_TO_ADDR
// end ;
8067: LD_VAR 0 3
8071: RET
// export function IsExtension ( b ) ; begin
8072: LD_INT 0
8074: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8075: LD_ADDR_VAR 0 2
8079: PUSH
8080: LD_VAR 0 1
8084: PUSH
8085: LD_INT 23
8087: PUSH
8088: LD_INT 20
8090: PUSH
8091: LD_INT 22
8093: PUSH
8094: LD_INT 17
8096: PUSH
8097: LD_INT 24
8099: PUSH
8100: LD_INT 21
8102: PUSH
8103: LD_INT 19
8105: PUSH
8106: LD_INT 16
8108: PUSH
8109: LD_INT 25
8111: PUSH
8112: LD_INT 18
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: IN
8127: ST_TO_ADDR
// end ;
8128: LD_VAR 0 2
8132: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8133: LD_INT 0
8135: PPUSH
8136: PPUSH
8137: PPUSH
// result := [ ] ;
8138: LD_ADDR_VAR 0 4
8142: PUSH
8143: EMPTY
8144: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8145: LD_ADDR_VAR 0 5
8149: PUSH
8150: LD_VAR 0 2
8154: PPUSH
8155: LD_INT 21
8157: PUSH
8158: LD_INT 3
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: PPUSH
8165: CALL_OW 70
8169: ST_TO_ADDR
// if not tmp then
8170: LD_VAR 0 5
8174: NOT
8175: IFFALSE 8179
// exit ;
8177: GO 8243
// if checkLink then
8179: LD_VAR 0 3
8183: IFFALSE 8233
// begin for i in tmp do
8185: LD_ADDR_VAR 0 6
8189: PUSH
8190: LD_VAR 0 5
8194: PUSH
8195: FOR_IN
8196: IFFALSE 8231
// if GetBase ( i ) <> base then
8198: LD_VAR 0 6
8202: PPUSH
8203: CALL_OW 274
8207: PUSH
8208: LD_VAR 0 1
8212: NONEQUAL
8213: IFFALSE 8229
// ComLinkToBase ( base , i ) ;
8215: LD_VAR 0 1
8219: PPUSH
8220: LD_VAR 0 6
8224: PPUSH
8225: CALL_OW 169
8229: GO 8195
8231: POP
8232: POP
// end ; result := tmp ;
8233: LD_ADDR_VAR 0 4
8237: PUSH
8238: LD_VAR 0 5
8242: ST_TO_ADDR
// end ;
8243: LD_VAR 0 4
8247: RET
// export function ComComplete ( units , b ) ; var i ; begin
8248: LD_INT 0
8250: PPUSH
8251: PPUSH
// if not units then
8252: LD_VAR 0 1
8256: NOT
8257: IFFALSE 8261
// exit ;
8259: GO 8351
// for i in units do
8261: LD_ADDR_VAR 0 4
8265: PUSH
8266: LD_VAR 0 1
8270: PUSH
8271: FOR_IN
8272: IFFALSE 8349
// if BuildingStatus ( b ) = bs_build then
8274: LD_VAR 0 2
8278: PPUSH
8279: CALL_OW 461
8283: PUSH
8284: LD_INT 1
8286: EQUAL
8287: IFFALSE 8347
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8289: LD_VAR 0 4
8293: PPUSH
8294: LD_STRING h
8296: PUSH
8297: LD_VAR 0 2
8301: PPUSH
8302: CALL_OW 250
8306: PUSH
8307: LD_VAR 0 2
8311: PPUSH
8312: CALL_OW 251
8316: PUSH
8317: LD_VAR 0 2
8321: PUSH
8322: LD_INT 0
8324: PUSH
8325: LD_INT 0
8327: PUSH
8328: LD_INT 0
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: PUSH
8340: EMPTY
8341: LIST
8342: PPUSH
8343: CALL_OW 446
8347: GO 8271
8349: POP
8350: POP
// end ;
8351: LD_VAR 0 3
8355: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8356: LD_INT 0
8358: PPUSH
8359: PPUSH
8360: PPUSH
8361: PPUSH
8362: PPUSH
8363: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8364: LD_VAR 0 1
8368: NOT
8369: PUSH
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 263
8379: PUSH
8380: LD_INT 2
8382: NONEQUAL
8383: OR
8384: IFFALSE 8388
// exit ;
8386: GO 8704
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8388: LD_ADDR_VAR 0 6
8392: PUSH
8393: LD_INT 22
8395: PUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL_OW 255
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 2
8412: PUSH
8413: LD_INT 30
8415: PUSH
8416: LD_INT 36
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PUSH
8423: LD_INT 34
8425: PUSH
8426: LD_INT 31
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PPUSH
8442: CALL_OW 69
8446: ST_TO_ADDR
// if not tmp then
8447: LD_VAR 0 6
8451: NOT
8452: IFFALSE 8456
// exit ;
8454: GO 8704
// result := [ ] ;
8456: LD_ADDR_VAR 0 2
8460: PUSH
8461: EMPTY
8462: ST_TO_ADDR
// for i in tmp do
8463: LD_ADDR_VAR 0 3
8467: PUSH
8468: LD_VAR 0 6
8472: PUSH
8473: FOR_IN
8474: IFFALSE 8545
// begin t := UnitsInside ( i ) ;
8476: LD_ADDR_VAR 0 4
8480: PUSH
8481: LD_VAR 0 3
8485: PPUSH
8486: CALL_OW 313
8490: ST_TO_ADDR
// if t then
8491: LD_VAR 0 4
8495: IFFALSE 8543
// for j in t do
8497: LD_ADDR_VAR 0 7
8501: PUSH
8502: LD_VAR 0 4
8506: PUSH
8507: FOR_IN
8508: IFFALSE 8541
// result := Replace ( result , result + 1 , j ) ;
8510: LD_ADDR_VAR 0 2
8514: PUSH
8515: LD_VAR 0 2
8519: PPUSH
8520: LD_VAR 0 2
8524: PUSH
8525: LD_INT 1
8527: PLUS
8528: PPUSH
8529: LD_VAR 0 7
8533: PPUSH
8534: CALL_OW 1
8538: ST_TO_ADDR
8539: GO 8507
8541: POP
8542: POP
// end ;
8543: GO 8473
8545: POP
8546: POP
// if not result then
8547: LD_VAR 0 2
8551: NOT
8552: IFFALSE 8556
// exit ;
8554: GO 8704
// mech := result [ 1 ] ;
8556: LD_ADDR_VAR 0 5
8560: PUSH
8561: LD_VAR 0 2
8565: PUSH
8566: LD_INT 1
8568: ARRAY
8569: ST_TO_ADDR
// if result > 1 then
8570: LD_VAR 0 2
8574: PUSH
8575: LD_INT 1
8577: GREATER
8578: IFFALSE 8690
// begin for i = 2 to result do
8580: LD_ADDR_VAR 0 3
8584: PUSH
8585: DOUBLE
8586: LD_INT 2
8588: DEC
8589: ST_TO_ADDR
8590: LD_VAR 0 2
8594: PUSH
8595: FOR_TO
8596: IFFALSE 8688
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8598: LD_ADDR_VAR 0 4
8602: PUSH
8603: LD_VAR 0 2
8607: PUSH
8608: LD_VAR 0 3
8612: ARRAY
8613: PPUSH
8614: LD_INT 3
8616: PPUSH
8617: CALL_OW 259
8621: PUSH
8622: LD_VAR 0 2
8626: PUSH
8627: LD_VAR 0 3
8631: ARRAY
8632: PPUSH
8633: CALL_OW 432
8637: MINUS
8638: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8639: LD_VAR 0 4
8643: PUSH
8644: LD_VAR 0 5
8648: PPUSH
8649: LD_INT 3
8651: PPUSH
8652: CALL_OW 259
8656: PUSH
8657: LD_VAR 0 5
8661: PPUSH
8662: CALL_OW 432
8666: MINUS
8667: GREATEREQUAL
8668: IFFALSE 8686
// mech := result [ i ] ;
8670: LD_ADDR_VAR 0 5
8674: PUSH
8675: LD_VAR 0 2
8679: PUSH
8680: LD_VAR 0 3
8684: ARRAY
8685: ST_TO_ADDR
// end ;
8686: GO 8595
8688: POP
8689: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8690: LD_VAR 0 1
8694: PPUSH
8695: LD_VAR 0 5
8699: PPUSH
8700: CALL_OW 135
// end ;
8704: LD_VAR 0 2
8708: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8709: LD_INT 0
8711: PPUSH
8712: PPUSH
8713: PPUSH
8714: PPUSH
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
8719: PPUSH
8720: PPUSH
8721: PPUSH
8722: PPUSH
8723: PPUSH
// result := [ ] ;
8724: LD_ADDR_VAR 0 7
8728: PUSH
8729: EMPTY
8730: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8731: LD_VAR 0 1
8735: PPUSH
8736: CALL_OW 266
8740: PUSH
8741: LD_INT 0
8743: PUSH
8744: LD_INT 1
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: IN
8751: NOT
8752: IFFALSE 8756
// exit ;
8754: GO 10390
// if name then
8756: LD_VAR 0 3
8760: IFFALSE 8776
// SetBName ( base_dep , name ) ;
8762: LD_VAR 0 1
8766: PPUSH
8767: LD_VAR 0 3
8771: PPUSH
8772: CALL_OW 500
// base := GetBase ( base_dep ) ;
8776: LD_ADDR_VAR 0 15
8780: PUSH
8781: LD_VAR 0 1
8785: PPUSH
8786: CALL_OW 274
8790: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8791: LD_ADDR_VAR 0 16
8795: PUSH
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 255
8805: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8806: LD_ADDR_VAR 0 17
8810: PUSH
8811: LD_VAR 0 1
8815: PPUSH
8816: CALL_OW 248
8820: ST_TO_ADDR
// if sources then
8821: LD_VAR 0 5
8825: IFFALSE 8872
// for i = 1 to 3 do
8827: LD_ADDR_VAR 0 8
8831: PUSH
8832: DOUBLE
8833: LD_INT 1
8835: DEC
8836: ST_TO_ADDR
8837: LD_INT 3
8839: PUSH
8840: FOR_TO
8841: IFFALSE 8870
// AddResourceType ( base , i , sources [ i ] ) ;
8843: LD_VAR 0 15
8847: PPUSH
8848: LD_VAR 0 8
8852: PPUSH
8853: LD_VAR 0 5
8857: PUSH
8858: LD_VAR 0 8
8862: ARRAY
8863: PPUSH
8864: CALL_OW 276
8868: GO 8840
8870: POP
8871: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8872: LD_ADDR_VAR 0 18
8876: PUSH
8877: LD_VAR 0 15
8881: PPUSH
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: CALL 8133 0 3
8894: ST_TO_ADDR
// InitHc ;
8895: CALL_OW 19
// InitUc ;
8899: CALL_OW 18
// uc_side := side ;
8903: LD_ADDR_OWVAR 20
8907: PUSH
8908: LD_VAR 0 16
8912: ST_TO_ADDR
// uc_nation := nation ;
8913: LD_ADDR_OWVAR 21
8917: PUSH
8918: LD_VAR 0 17
8922: ST_TO_ADDR
// if buildings then
8923: LD_VAR 0 18
8927: IFFALSE 10249
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8929: LD_ADDR_VAR 0 19
8933: PUSH
8934: LD_VAR 0 18
8938: PPUSH
8939: LD_INT 2
8941: PUSH
8942: LD_INT 30
8944: PUSH
8945: LD_INT 29
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PUSH
8952: LD_INT 30
8954: PUSH
8955: LD_INT 30
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 72
8971: ST_TO_ADDR
// if tmp then
8972: LD_VAR 0 19
8976: IFFALSE 9024
// for i in tmp do
8978: LD_ADDR_VAR 0 8
8982: PUSH
8983: LD_VAR 0 19
8987: PUSH
8988: FOR_IN
8989: IFFALSE 9022
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8991: LD_VAR 0 8
8995: PPUSH
8996: CALL_OW 250
9000: PPUSH
9001: LD_VAR 0 8
9005: PPUSH
9006: CALL_OW 251
9010: PPUSH
9011: LD_VAR 0 16
9015: PPUSH
9016: CALL_OW 441
9020: GO 8988
9022: POP
9023: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9024: LD_VAR 0 18
9028: PPUSH
9029: LD_INT 2
9031: PUSH
9032: LD_INT 30
9034: PUSH
9035: LD_INT 32
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 30
9044: PUSH
9045: LD_INT 33
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: PPUSH
9057: CALL_OW 72
9061: IFFALSE 9149
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9063: LD_ADDR_VAR 0 8
9067: PUSH
9068: LD_VAR 0 18
9072: PPUSH
9073: LD_INT 2
9075: PUSH
9076: LD_INT 30
9078: PUSH
9079: LD_INT 32
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 30
9088: PUSH
9089: LD_INT 33
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: LIST
9100: PPUSH
9101: CALL_OW 72
9105: PUSH
9106: FOR_IN
9107: IFFALSE 9147
// begin if not GetBWeapon ( i ) then
9109: LD_VAR 0 8
9113: PPUSH
9114: CALL_OW 269
9118: NOT
9119: IFFALSE 9145
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9121: LD_VAR 0 8
9125: PPUSH
9126: LD_VAR 0 8
9130: PPUSH
9131: LD_VAR 0 2
9135: PPUSH
9136: CALL 10395 0 2
9140: PPUSH
9141: CALL_OW 431
// end ;
9145: GO 9106
9147: POP
9148: POP
// end ; for i = 1 to personel do
9149: LD_ADDR_VAR 0 8
9153: PUSH
9154: DOUBLE
9155: LD_INT 1
9157: DEC
9158: ST_TO_ADDR
9159: LD_VAR 0 6
9163: PUSH
9164: FOR_TO
9165: IFFALSE 10229
// begin if i > 4 then
9167: LD_VAR 0 8
9171: PUSH
9172: LD_INT 4
9174: GREATER
9175: IFFALSE 9179
// break ;
9177: GO 10229
// case i of 1 :
9179: LD_VAR 0 8
9183: PUSH
9184: LD_INT 1
9186: DOUBLE
9187: EQUAL
9188: IFTRUE 9192
9190: GO 9272
9192: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9193: LD_ADDR_VAR 0 12
9197: PUSH
9198: LD_VAR 0 18
9202: PPUSH
9203: LD_INT 22
9205: PUSH
9206: LD_VAR 0 16
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PUSH
9215: LD_INT 58
9217: PUSH
9218: EMPTY
9219: LIST
9220: PUSH
9221: LD_INT 2
9223: PUSH
9224: LD_INT 30
9226: PUSH
9227: LD_INT 32
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: LD_INT 30
9236: PUSH
9237: LD_INT 4
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 30
9246: PUSH
9247: LD_INT 5
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: PPUSH
9265: CALL_OW 72
9269: ST_TO_ADDR
9270: GO 9494
9272: LD_INT 2
9274: DOUBLE
9275: EQUAL
9276: IFTRUE 9280
9278: GO 9342
9280: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9281: LD_ADDR_VAR 0 12
9285: PUSH
9286: LD_VAR 0 18
9290: PPUSH
9291: LD_INT 22
9293: PUSH
9294: LD_VAR 0 16
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 2
9305: PUSH
9306: LD_INT 30
9308: PUSH
9309: LD_INT 0
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PUSH
9316: LD_INT 30
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PPUSH
9335: CALL_OW 72
9339: ST_TO_ADDR
9340: GO 9494
9342: LD_INT 3
9344: DOUBLE
9345: EQUAL
9346: IFTRUE 9350
9348: GO 9412
9350: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9351: LD_ADDR_VAR 0 12
9355: PUSH
9356: LD_VAR 0 18
9360: PPUSH
9361: LD_INT 22
9363: PUSH
9364: LD_VAR 0 16
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PUSH
9373: LD_INT 2
9375: PUSH
9376: LD_INT 30
9378: PUSH
9379: LD_INT 2
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: LD_INT 30
9388: PUSH
9389: LD_INT 3
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PPUSH
9405: CALL_OW 72
9409: ST_TO_ADDR
9410: GO 9494
9412: LD_INT 4
9414: DOUBLE
9415: EQUAL
9416: IFTRUE 9420
9418: GO 9493
9420: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9421: LD_ADDR_VAR 0 12
9425: PUSH
9426: LD_VAR 0 18
9430: PPUSH
9431: LD_INT 22
9433: PUSH
9434: LD_VAR 0 16
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 2
9445: PUSH
9446: LD_INT 30
9448: PUSH
9449: LD_INT 6
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 30
9458: PUSH
9459: LD_INT 7
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: LD_INT 30
9468: PUSH
9469: LD_INT 8
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PPUSH
9486: CALL_OW 72
9490: ST_TO_ADDR
9491: GO 9494
9493: POP
// if i = 1 then
9494: LD_VAR 0 8
9498: PUSH
9499: LD_INT 1
9501: EQUAL
9502: IFFALSE 9613
// begin tmp := [ ] ;
9504: LD_ADDR_VAR 0 19
9508: PUSH
9509: EMPTY
9510: ST_TO_ADDR
// for j in f do
9511: LD_ADDR_VAR 0 9
9515: PUSH
9516: LD_VAR 0 12
9520: PUSH
9521: FOR_IN
9522: IFFALSE 9595
// if GetBType ( j ) = b_bunker then
9524: LD_VAR 0 9
9528: PPUSH
9529: CALL_OW 266
9533: PUSH
9534: LD_INT 32
9536: EQUAL
9537: IFFALSE 9564
// tmp := Insert ( tmp , 1 , j ) else
9539: LD_ADDR_VAR 0 19
9543: PUSH
9544: LD_VAR 0 19
9548: PPUSH
9549: LD_INT 1
9551: PPUSH
9552: LD_VAR 0 9
9556: PPUSH
9557: CALL_OW 2
9561: ST_TO_ADDR
9562: GO 9593
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9564: LD_ADDR_VAR 0 19
9568: PUSH
9569: LD_VAR 0 19
9573: PPUSH
9574: LD_VAR 0 19
9578: PUSH
9579: LD_INT 1
9581: PLUS
9582: PPUSH
9583: LD_VAR 0 9
9587: PPUSH
9588: CALL_OW 2
9592: ST_TO_ADDR
9593: GO 9521
9595: POP
9596: POP
// if tmp then
9597: LD_VAR 0 19
9601: IFFALSE 9613
// f := tmp ;
9603: LD_ADDR_VAR 0 12
9607: PUSH
9608: LD_VAR 0 19
9612: ST_TO_ADDR
// end ; x := personel [ i ] ;
9613: LD_ADDR_VAR 0 13
9617: PUSH
9618: LD_VAR 0 6
9622: PUSH
9623: LD_VAR 0 8
9627: ARRAY
9628: ST_TO_ADDR
// if x = - 1 then
9629: LD_VAR 0 13
9633: PUSH
9634: LD_INT 1
9636: NEG
9637: EQUAL
9638: IFFALSE 9847
// begin for j in f do
9640: LD_ADDR_VAR 0 9
9644: PUSH
9645: LD_VAR 0 12
9649: PUSH
9650: FOR_IN
9651: IFFALSE 9843
// repeat InitHc ;
9653: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9657: LD_VAR 0 9
9661: PPUSH
9662: CALL_OW 266
9666: PUSH
9667: LD_INT 5
9669: EQUAL
9670: IFFALSE 9740
// begin if UnitsInside ( j ) < 3 then
9672: LD_VAR 0 9
9676: PPUSH
9677: CALL_OW 313
9681: PUSH
9682: LD_INT 3
9684: LESS
9685: IFFALSE 9721
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9687: LD_INT 0
9689: PPUSH
9690: LD_INT 5
9692: PUSH
9693: LD_INT 8
9695: PUSH
9696: LD_INT 9
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: LIST
9703: PUSH
9704: LD_VAR 0 17
9708: ARRAY
9709: PPUSH
9710: LD_VAR 0 4
9714: PPUSH
9715: CALL_OW 380
9719: GO 9738
// PrepareHuman ( false , i , skill ) ;
9721: LD_INT 0
9723: PPUSH
9724: LD_VAR 0 8
9728: PPUSH
9729: LD_VAR 0 4
9733: PPUSH
9734: CALL_OW 380
// end else
9738: GO 9757
// PrepareHuman ( false , i , skill ) ;
9740: LD_INT 0
9742: PPUSH
9743: LD_VAR 0 8
9747: PPUSH
9748: LD_VAR 0 4
9752: PPUSH
9753: CALL_OW 380
// un := CreateHuman ;
9757: LD_ADDR_VAR 0 14
9761: PUSH
9762: CALL_OW 44
9766: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9767: LD_ADDR_VAR 0 7
9771: PUSH
9772: LD_VAR 0 7
9776: PPUSH
9777: LD_INT 1
9779: PPUSH
9780: LD_VAR 0 14
9784: PPUSH
9785: CALL_OW 2
9789: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9790: LD_VAR 0 14
9794: PPUSH
9795: LD_VAR 0 9
9799: PPUSH
9800: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9804: LD_VAR 0 9
9808: PPUSH
9809: CALL_OW 313
9813: PUSH
9814: LD_INT 6
9816: EQUAL
9817: PUSH
9818: LD_VAR 0 9
9822: PPUSH
9823: CALL_OW 266
9827: PUSH
9828: LD_INT 32
9830: PUSH
9831: LD_INT 31
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: IN
9838: OR
9839: IFFALSE 9653
9841: GO 9650
9843: POP
9844: POP
// end else
9845: GO 10227
// for j = 1 to x do
9847: LD_ADDR_VAR 0 9
9851: PUSH
9852: DOUBLE
9853: LD_INT 1
9855: DEC
9856: ST_TO_ADDR
9857: LD_VAR 0 13
9861: PUSH
9862: FOR_TO
9863: IFFALSE 10225
// begin InitHc ;
9865: CALL_OW 19
// if not f then
9869: LD_VAR 0 12
9873: NOT
9874: IFFALSE 9963
// begin PrepareHuman ( false , i , skill ) ;
9876: LD_INT 0
9878: PPUSH
9879: LD_VAR 0 8
9883: PPUSH
9884: LD_VAR 0 4
9888: PPUSH
9889: CALL_OW 380
// un := CreateHuman ;
9893: LD_ADDR_VAR 0 14
9897: PUSH
9898: CALL_OW 44
9902: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9903: LD_ADDR_VAR 0 7
9907: PUSH
9908: LD_VAR 0 7
9912: PPUSH
9913: LD_INT 1
9915: PPUSH
9916: LD_VAR 0 14
9920: PPUSH
9921: CALL_OW 2
9925: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9926: LD_VAR 0 14
9930: PPUSH
9931: LD_VAR 0 1
9935: PPUSH
9936: CALL_OW 250
9940: PPUSH
9941: LD_VAR 0 1
9945: PPUSH
9946: CALL_OW 251
9950: PPUSH
9951: LD_INT 10
9953: PPUSH
9954: LD_INT 0
9956: PPUSH
9957: CALL_OW 50
// continue ;
9961: GO 9862
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9963: LD_VAR 0 12
9967: PUSH
9968: LD_INT 1
9970: ARRAY
9971: PPUSH
9972: CALL_OW 313
9976: PUSH
9977: LD_VAR 0 12
9981: PUSH
9982: LD_INT 1
9984: ARRAY
9985: PPUSH
9986: CALL_OW 266
9990: PUSH
9991: LD_INT 32
9993: PUSH
9994: LD_INT 31
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: IN
10001: AND
10002: PUSH
10003: LD_VAR 0 12
10007: PUSH
10008: LD_INT 1
10010: ARRAY
10011: PPUSH
10012: CALL_OW 313
10016: PUSH
10017: LD_INT 6
10019: EQUAL
10020: OR
10021: IFFALSE 10041
// f := Delete ( f , 1 ) ;
10023: LD_ADDR_VAR 0 12
10027: PUSH
10028: LD_VAR 0 12
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: CALL_OW 3
10040: ST_TO_ADDR
// if not f then
10041: LD_VAR 0 12
10045: NOT
10046: IFFALSE 10064
// begin x := x + 2 ;
10048: LD_ADDR_VAR 0 13
10052: PUSH
10053: LD_VAR 0 13
10057: PUSH
10058: LD_INT 2
10060: PLUS
10061: ST_TO_ADDR
// continue ;
10062: GO 9862
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10064: LD_VAR 0 12
10068: PUSH
10069: LD_INT 1
10071: ARRAY
10072: PPUSH
10073: CALL_OW 266
10077: PUSH
10078: LD_INT 5
10080: EQUAL
10081: IFFALSE 10155
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10083: LD_VAR 0 12
10087: PUSH
10088: LD_INT 1
10090: ARRAY
10091: PPUSH
10092: CALL_OW 313
10096: PUSH
10097: LD_INT 3
10099: LESS
10100: IFFALSE 10136
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10102: LD_INT 0
10104: PPUSH
10105: LD_INT 5
10107: PUSH
10108: LD_INT 8
10110: PUSH
10111: LD_INT 9
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: PUSH
10119: LD_VAR 0 17
10123: ARRAY
10124: PPUSH
10125: LD_VAR 0 4
10129: PPUSH
10130: CALL_OW 380
10134: GO 10153
// PrepareHuman ( false , i , skill ) ;
10136: LD_INT 0
10138: PPUSH
10139: LD_VAR 0 8
10143: PPUSH
10144: LD_VAR 0 4
10148: PPUSH
10149: CALL_OW 380
// end else
10153: GO 10172
// PrepareHuman ( false , i , skill ) ;
10155: LD_INT 0
10157: PPUSH
10158: LD_VAR 0 8
10162: PPUSH
10163: LD_VAR 0 4
10167: PPUSH
10168: CALL_OW 380
// un := CreateHuman ;
10172: LD_ADDR_VAR 0 14
10176: PUSH
10177: CALL_OW 44
10181: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10182: LD_ADDR_VAR 0 7
10186: PUSH
10187: LD_VAR 0 7
10191: PPUSH
10192: LD_INT 1
10194: PPUSH
10195: LD_VAR 0 14
10199: PPUSH
10200: CALL_OW 2
10204: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10205: LD_VAR 0 14
10209: PPUSH
10210: LD_VAR 0 12
10214: PUSH
10215: LD_INT 1
10217: ARRAY
10218: PPUSH
10219: CALL_OW 52
// end ;
10223: GO 9862
10225: POP
10226: POP
// end ;
10227: GO 9164
10229: POP
10230: POP
// result := result ^ buildings ;
10231: LD_ADDR_VAR 0 7
10235: PUSH
10236: LD_VAR 0 7
10240: PUSH
10241: LD_VAR 0 18
10245: ADD
10246: ST_TO_ADDR
// end else
10247: GO 10390
// begin for i = 1 to personel do
10249: LD_ADDR_VAR 0 8
10253: PUSH
10254: DOUBLE
10255: LD_INT 1
10257: DEC
10258: ST_TO_ADDR
10259: LD_VAR 0 6
10263: PUSH
10264: FOR_TO
10265: IFFALSE 10388
// begin if i > 4 then
10267: LD_VAR 0 8
10271: PUSH
10272: LD_INT 4
10274: GREATER
10275: IFFALSE 10279
// break ;
10277: GO 10388
// x := personel [ i ] ;
10279: LD_ADDR_VAR 0 13
10283: PUSH
10284: LD_VAR 0 6
10288: PUSH
10289: LD_VAR 0 8
10293: ARRAY
10294: ST_TO_ADDR
// if x = - 1 then
10295: LD_VAR 0 13
10299: PUSH
10300: LD_INT 1
10302: NEG
10303: EQUAL
10304: IFFALSE 10308
// continue ;
10306: GO 10264
// PrepareHuman ( false , i , skill ) ;
10308: LD_INT 0
10310: PPUSH
10311: LD_VAR 0 8
10315: PPUSH
10316: LD_VAR 0 4
10320: PPUSH
10321: CALL_OW 380
// un := CreateHuman ;
10325: LD_ADDR_VAR 0 14
10329: PUSH
10330: CALL_OW 44
10334: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10335: LD_VAR 0 14
10339: PPUSH
10340: LD_VAR 0 1
10344: PPUSH
10345: CALL_OW 250
10349: PPUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 251
10359: PPUSH
10360: LD_INT 10
10362: PPUSH
10363: LD_INT 0
10365: PPUSH
10366: CALL_OW 50
// result := result ^ un ;
10370: LD_ADDR_VAR 0 7
10374: PUSH
10375: LD_VAR 0 7
10379: PUSH
10380: LD_VAR 0 14
10384: ADD
10385: ST_TO_ADDR
// end ;
10386: GO 10264
10388: POP
10389: POP
// end ; end ;
10390: LD_VAR 0 7
10394: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10395: LD_INT 0
10397: PPUSH
10398: PPUSH
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
10406: PPUSH
10407: PPUSH
10408: PPUSH
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
// result := false ;
10413: LD_ADDR_VAR 0 3
10417: PUSH
10418: LD_INT 0
10420: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10421: LD_VAR 0 1
10425: NOT
10426: PUSH
10427: LD_VAR 0 1
10431: PPUSH
10432: CALL_OW 266
10436: PUSH
10437: LD_INT 32
10439: PUSH
10440: LD_INT 33
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: IN
10447: NOT
10448: OR
10449: IFFALSE 10453
// exit ;
10451: GO 11562
// nat := GetNation ( tower ) ;
10453: LD_ADDR_VAR 0 12
10457: PUSH
10458: LD_VAR 0 1
10462: PPUSH
10463: CALL_OW 248
10467: ST_TO_ADDR
// side := GetSide ( tower ) ;
10468: LD_ADDR_VAR 0 16
10472: PUSH
10473: LD_VAR 0 1
10477: PPUSH
10478: CALL_OW 255
10482: ST_TO_ADDR
// x := GetX ( tower ) ;
10483: LD_ADDR_VAR 0 10
10487: PUSH
10488: LD_VAR 0 1
10492: PPUSH
10493: CALL_OW 250
10497: ST_TO_ADDR
// y := GetY ( tower ) ;
10498: LD_ADDR_VAR 0 11
10502: PUSH
10503: LD_VAR 0 1
10507: PPUSH
10508: CALL_OW 251
10512: ST_TO_ADDR
// if not x or not y then
10513: LD_VAR 0 10
10517: NOT
10518: PUSH
10519: LD_VAR 0 11
10523: NOT
10524: OR
10525: IFFALSE 10529
// exit ;
10527: GO 11562
// weapon := 0 ;
10529: LD_ADDR_VAR 0 18
10533: PUSH
10534: LD_INT 0
10536: ST_TO_ADDR
// fac_list := [ ] ;
10537: LD_ADDR_VAR 0 17
10541: PUSH
10542: EMPTY
10543: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10544: LD_ADDR_VAR 0 6
10548: PUSH
10549: LD_VAR 0 1
10553: PPUSH
10554: CALL_OW 274
10558: PPUSH
10559: LD_VAR 0 2
10563: PPUSH
10564: LD_INT 0
10566: PPUSH
10567: CALL 8133 0 3
10571: PPUSH
10572: LD_INT 30
10574: PUSH
10575: LD_INT 3
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 72
10586: ST_TO_ADDR
// if not factories then
10587: LD_VAR 0 6
10591: NOT
10592: IFFALSE 10596
// exit ;
10594: GO 11562
// for i in factories do
10596: LD_ADDR_VAR 0 8
10600: PUSH
10601: LD_VAR 0 6
10605: PUSH
10606: FOR_IN
10607: IFFALSE 10632
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10609: LD_ADDR_VAR 0 17
10613: PUSH
10614: LD_VAR 0 17
10618: PUSH
10619: LD_VAR 0 8
10623: PPUSH
10624: CALL_OW 478
10628: UNION
10629: ST_TO_ADDR
10630: GO 10606
10632: POP
10633: POP
// if not fac_list then
10634: LD_VAR 0 17
10638: NOT
10639: IFFALSE 10643
// exit ;
10641: GO 11562
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10643: LD_ADDR_VAR 0 5
10647: PUSH
10648: LD_INT 4
10650: PUSH
10651: LD_INT 5
10653: PUSH
10654: LD_INT 9
10656: PUSH
10657: LD_INT 10
10659: PUSH
10660: LD_INT 6
10662: PUSH
10663: LD_INT 7
10665: PUSH
10666: LD_INT 11
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 27
10680: PUSH
10681: LD_INT 28
10683: PUSH
10684: LD_INT 26
10686: PUSH
10687: LD_INT 30
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 43
10698: PUSH
10699: LD_INT 44
10701: PUSH
10702: LD_INT 46
10704: PUSH
10705: LD_INT 45
10707: PUSH
10708: LD_INT 47
10710: PUSH
10711: LD_INT 49
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: LIST
10726: PUSH
10727: LD_VAR 0 12
10731: ARRAY
10732: ST_TO_ADDR
// list := list isect fac_list ;
10733: LD_ADDR_VAR 0 5
10737: PUSH
10738: LD_VAR 0 5
10742: PUSH
10743: LD_VAR 0 17
10747: ISECT
10748: ST_TO_ADDR
// if not list then
10749: LD_VAR 0 5
10753: NOT
10754: IFFALSE 10758
// exit ;
10756: GO 11562
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10758: LD_VAR 0 12
10762: PUSH
10763: LD_INT 3
10765: EQUAL
10766: PUSH
10767: LD_INT 49
10769: PUSH
10770: LD_VAR 0 5
10774: IN
10775: AND
10776: PUSH
10777: LD_INT 31
10779: PPUSH
10780: LD_VAR 0 16
10784: PPUSH
10785: CALL_OW 321
10789: PUSH
10790: LD_INT 2
10792: EQUAL
10793: AND
10794: IFFALSE 10854
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10796: LD_INT 22
10798: PUSH
10799: LD_VAR 0 16
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 35
10810: PUSH
10811: LD_INT 49
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: LD_INT 91
10820: PUSH
10821: LD_VAR 0 1
10825: PUSH
10826: LD_INT 10
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: LIST
10838: PPUSH
10839: CALL_OW 69
10843: NOT
10844: IFFALSE 10854
// weapon := ru_time_lapser ;
10846: LD_ADDR_VAR 0 18
10850: PUSH
10851: LD_INT 49
10853: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10854: LD_VAR 0 12
10858: PUSH
10859: LD_INT 1
10861: PUSH
10862: LD_INT 2
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: IN
10869: PUSH
10870: LD_INT 11
10872: PUSH
10873: LD_VAR 0 5
10877: IN
10878: PUSH
10879: LD_INT 30
10881: PUSH
10882: LD_VAR 0 5
10886: IN
10887: OR
10888: AND
10889: PUSH
10890: LD_INT 6
10892: PPUSH
10893: LD_VAR 0 16
10897: PPUSH
10898: CALL_OW 321
10902: PUSH
10903: LD_INT 2
10905: EQUAL
10906: AND
10907: IFFALSE 11072
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10909: LD_INT 22
10911: PUSH
10912: LD_VAR 0 16
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 2
10923: PUSH
10924: LD_INT 35
10926: PUSH
10927: LD_INT 11
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PUSH
10934: LD_INT 35
10936: PUSH
10937: LD_INT 30
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 91
10951: PUSH
10952: LD_VAR 0 1
10956: PUSH
10957: LD_INT 18
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: LIST
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: PPUSH
10970: CALL_OW 69
10974: NOT
10975: PUSH
10976: LD_INT 22
10978: PUSH
10979: LD_VAR 0 16
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 2
10990: PUSH
10991: LD_INT 30
10993: PUSH
10994: LD_INT 32
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: LD_INT 30
11003: PUSH
11004: LD_INT 33
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 91
11018: PUSH
11019: LD_VAR 0 1
11023: PUSH
11024: LD_INT 12
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: LIST
11036: PUSH
11037: EMPTY
11038: LIST
11039: PPUSH
11040: CALL_OW 69
11044: PUSH
11045: LD_INT 2
11047: GREATER
11048: AND
11049: IFFALSE 11072
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11051: LD_ADDR_VAR 0 18
11055: PUSH
11056: LD_INT 11
11058: PUSH
11059: LD_INT 30
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_VAR 0 12
11070: ARRAY
11071: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11072: LD_VAR 0 18
11076: NOT
11077: PUSH
11078: LD_INT 40
11080: PPUSH
11081: LD_VAR 0 16
11085: PPUSH
11086: CALL_OW 321
11090: PUSH
11091: LD_INT 2
11093: EQUAL
11094: AND
11095: PUSH
11096: LD_INT 7
11098: PUSH
11099: LD_VAR 0 5
11103: IN
11104: PUSH
11105: LD_INT 28
11107: PUSH
11108: LD_VAR 0 5
11112: IN
11113: OR
11114: PUSH
11115: LD_INT 45
11117: PUSH
11118: LD_VAR 0 5
11122: IN
11123: OR
11124: AND
11125: IFFALSE 11379
// begin hex := GetHexInfo ( x , y ) ;
11127: LD_ADDR_VAR 0 4
11131: PUSH
11132: LD_VAR 0 10
11136: PPUSH
11137: LD_VAR 0 11
11141: PPUSH
11142: CALL_OW 546
11146: ST_TO_ADDR
// if hex [ 1 ] then
11147: LD_VAR 0 4
11151: PUSH
11152: LD_INT 1
11154: ARRAY
11155: IFFALSE 11159
// exit ;
11157: GO 11562
// height := hex [ 2 ] ;
11159: LD_ADDR_VAR 0 15
11163: PUSH
11164: LD_VAR 0 4
11168: PUSH
11169: LD_INT 2
11171: ARRAY
11172: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11173: LD_ADDR_VAR 0 14
11177: PUSH
11178: LD_INT 0
11180: PUSH
11181: LD_INT 2
11183: PUSH
11184: LD_INT 3
11186: PUSH
11187: LD_INT 5
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: ST_TO_ADDR
// for i in tmp do
11196: LD_ADDR_VAR 0 8
11200: PUSH
11201: LD_VAR 0 14
11205: PUSH
11206: FOR_IN
11207: IFFALSE 11377
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11209: LD_ADDR_VAR 0 9
11213: PUSH
11214: LD_VAR 0 10
11218: PPUSH
11219: LD_VAR 0 8
11223: PPUSH
11224: LD_INT 5
11226: PPUSH
11227: CALL_OW 272
11231: PUSH
11232: LD_VAR 0 11
11236: PPUSH
11237: LD_VAR 0 8
11241: PPUSH
11242: LD_INT 5
11244: PPUSH
11245: CALL_OW 273
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11254: LD_VAR 0 9
11258: PUSH
11259: LD_INT 1
11261: ARRAY
11262: PPUSH
11263: LD_VAR 0 9
11267: PUSH
11268: LD_INT 2
11270: ARRAY
11271: PPUSH
11272: CALL_OW 488
11276: IFFALSE 11375
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11278: LD_ADDR_VAR 0 4
11282: PUSH
11283: LD_VAR 0 9
11287: PUSH
11288: LD_INT 1
11290: ARRAY
11291: PPUSH
11292: LD_VAR 0 9
11296: PUSH
11297: LD_INT 2
11299: ARRAY
11300: PPUSH
11301: CALL_OW 546
11305: ST_TO_ADDR
// if hex [ 1 ] then
11306: LD_VAR 0 4
11310: PUSH
11311: LD_INT 1
11313: ARRAY
11314: IFFALSE 11318
// continue ;
11316: GO 11206
// h := hex [ 2 ] ;
11318: LD_ADDR_VAR 0 13
11322: PUSH
11323: LD_VAR 0 4
11327: PUSH
11328: LD_INT 2
11330: ARRAY
11331: ST_TO_ADDR
// if h + 7 < height then
11332: LD_VAR 0 13
11336: PUSH
11337: LD_INT 7
11339: PLUS
11340: PUSH
11341: LD_VAR 0 15
11345: LESS
11346: IFFALSE 11375
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11348: LD_ADDR_VAR 0 18
11352: PUSH
11353: LD_INT 7
11355: PUSH
11356: LD_INT 28
11358: PUSH
11359: LD_INT 45
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: LIST
11366: PUSH
11367: LD_VAR 0 12
11371: ARRAY
11372: ST_TO_ADDR
// break ;
11373: GO 11377
// end ; end ; end ;
11375: GO 11206
11377: POP
11378: POP
// end ; if not weapon then
11379: LD_VAR 0 18
11383: NOT
11384: IFFALSE 11444
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11386: LD_ADDR_VAR 0 5
11390: PUSH
11391: LD_VAR 0 5
11395: PUSH
11396: LD_INT 11
11398: PUSH
11399: LD_INT 30
11401: PUSH
11402: LD_INT 49
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: DIFF
11410: ST_TO_ADDR
// if not list then
11411: LD_VAR 0 5
11415: NOT
11416: IFFALSE 11420
// exit ;
11418: GO 11562
// weapon := list [ rand ( 1 , list ) ] ;
11420: LD_ADDR_VAR 0 18
11424: PUSH
11425: LD_VAR 0 5
11429: PUSH
11430: LD_INT 1
11432: PPUSH
11433: LD_VAR 0 5
11437: PPUSH
11438: CALL_OW 12
11442: ARRAY
11443: ST_TO_ADDR
// end ; if weapon then
11444: LD_VAR 0 18
11448: IFFALSE 11562
// begin tmp := CostOfWeapon ( weapon ) ;
11450: LD_ADDR_VAR 0 14
11454: PUSH
11455: LD_VAR 0 18
11459: PPUSH
11460: CALL_OW 451
11464: ST_TO_ADDR
// j := GetBase ( tower ) ;
11465: LD_ADDR_VAR 0 9
11469: PUSH
11470: LD_VAR 0 1
11474: PPUSH
11475: CALL_OW 274
11479: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11480: LD_VAR 0 9
11484: PPUSH
11485: LD_INT 1
11487: PPUSH
11488: CALL_OW 275
11492: PUSH
11493: LD_VAR 0 14
11497: PUSH
11498: LD_INT 1
11500: ARRAY
11501: GREATEREQUAL
11502: PUSH
11503: LD_VAR 0 9
11507: PPUSH
11508: LD_INT 2
11510: PPUSH
11511: CALL_OW 275
11515: PUSH
11516: LD_VAR 0 14
11520: PUSH
11521: LD_INT 2
11523: ARRAY
11524: GREATEREQUAL
11525: AND
11526: PUSH
11527: LD_VAR 0 9
11531: PPUSH
11532: LD_INT 3
11534: PPUSH
11535: CALL_OW 275
11539: PUSH
11540: LD_VAR 0 14
11544: PUSH
11545: LD_INT 3
11547: ARRAY
11548: GREATEREQUAL
11549: AND
11550: IFFALSE 11562
// result := weapon ;
11552: LD_ADDR_VAR 0 3
11556: PUSH
11557: LD_VAR 0 18
11561: ST_TO_ADDR
// end ; end ;
11562: LD_VAR 0 3
11566: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11567: LD_INT 0
11569: PPUSH
11570: PPUSH
// result := true ;
11571: LD_ADDR_VAR 0 3
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// if array1 = array2 then
11579: LD_VAR 0 1
11583: PUSH
11584: LD_VAR 0 2
11588: EQUAL
11589: IFFALSE 11649
// begin for i = 1 to array1 do
11591: LD_ADDR_VAR 0 4
11595: PUSH
11596: DOUBLE
11597: LD_INT 1
11599: DEC
11600: ST_TO_ADDR
11601: LD_VAR 0 1
11605: PUSH
11606: FOR_TO
11607: IFFALSE 11645
// if array1 [ i ] <> array2 [ i ] then
11609: LD_VAR 0 1
11613: PUSH
11614: LD_VAR 0 4
11618: ARRAY
11619: PUSH
11620: LD_VAR 0 2
11624: PUSH
11625: LD_VAR 0 4
11629: ARRAY
11630: NONEQUAL
11631: IFFALSE 11643
// begin result := false ;
11633: LD_ADDR_VAR 0 3
11637: PUSH
11638: LD_INT 0
11640: ST_TO_ADDR
// break ;
11641: GO 11645
// end ;
11643: GO 11606
11645: POP
11646: POP
// end else
11647: GO 11657
// result := false ;
11649: LD_ADDR_VAR 0 3
11653: PUSH
11654: LD_INT 0
11656: ST_TO_ADDR
// end ;
11657: LD_VAR 0 3
11661: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11662: LD_INT 0
11664: PPUSH
11665: PPUSH
// if not array1 or not array2 then
11666: LD_VAR 0 1
11670: NOT
11671: PUSH
11672: LD_VAR 0 2
11676: NOT
11677: OR
11678: IFFALSE 11682
// exit ;
11680: GO 11746
// result := true ;
11682: LD_ADDR_VAR 0 3
11686: PUSH
11687: LD_INT 1
11689: ST_TO_ADDR
// for i = 1 to array1 do
11690: LD_ADDR_VAR 0 4
11694: PUSH
11695: DOUBLE
11696: LD_INT 1
11698: DEC
11699: ST_TO_ADDR
11700: LD_VAR 0 1
11704: PUSH
11705: FOR_TO
11706: IFFALSE 11744
// if array1 [ i ] <> array2 [ i ] then
11708: LD_VAR 0 1
11712: PUSH
11713: LD_VAR 0 4
11717: ARRAY
11718: PUSH
11719: LD_VAR 0 2
11723: PUSH
11724: LD_VAR 0 4
11728: ARRAY
11729: NONEQUAL
11730: IFFALSE 11742
// begin result := false ;
11732: LD_ADDR_VAR 0 3
11736: PUSH
11737: LD_INT 0
11739: ST_TO_ADDR
// break ;
11740: GO 11744
// end ;
11742: GO 11705
11744: POP
11745: POP
// end ;
11746: LD_VAR 0 3
11750: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11751: LD_INT 0
11753: PPUSH
11754: PPUSH
11755: PPUSH
// pom := GetBase ( fac ) ;
11756: LD_ADDR_VAR 0 5
11760: PUSH
11761: LD_VAR 0 1
11765: PPUSH
11766: CALL_OW 274
11770: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11771: LD_ADDR_VAR 0 4
11775: PUSH
11776: LD_VAR 0 2
11780: PUSH
11781: LD_INT 1
11783: ARRAY
11784: PPUSH
11785: LD_VAR 0 2
11789: PUSH
11790: LD_INT 2
11792: ARRAY
11793: PPUSH
11794: LD_VAR 0 2
11798: PUSH
11799: LD_INT 3
11801: ARRAY
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 4
11810: ARRAY
11811: PPUSH
11812: CALL_OW 449
11816: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11817: LD_ADDR_VAR 0 3
11821: PUSH
11822: LD_VAR 0 5
11826: PPUSH
11827: LD_INT 1
11829: PPUSH
11830: CALL_OW 275
11834: PUSH
11835: LD_VAR 0 4
11839: PUSH
11840: LD_INT 1
11842: ARRAY
11843: GREATEREQUAL
11844: PUSH
11845: LD_VAR 0 5
11849: PPUSH
11850: LD_INT 2
11852: PPUSH
11853: CALL_OW 275
11857: PUSH
11858: LD_VAR 0 4
11862: PUSH
11863: LD_INT 2
11865: ARRAY
11866: GREATEREQUAL
11867: AND
11868: PUSH
11869: LD_VAR 0 5
11873: PPUSH
11874: LD_INT 3
11876: PPUSH
11877: CALL_OW 275
11881: PUSH
11882: LD_VAR 0 4
11886: PUSH
11887: LD_INT 3
11889: ARRAY
11890: GREATEREQUAL
11891: AND
11892: ST_TO_ADDR
// end ;
11893: LD_VAR 0 3
11897: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11898: LD_INT 0
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
// pom := GetBase ( building ) ;
11904: LD_ADDR_VAR 0 3
11908: PUSH
11909: LD_VAR 0 1
11913: PPUSH
11914: CALL_OW 274
11918: ST_TO_ADDR
// if not pom then
11919: LD_VAR 0 3
11923: NOT
11924: IFFALSE 11928
// exit ;
11926: GO 12098
// btype := GetBType ( building ) ;
11928: LD_ADDR_VAR 0 5
11932: PUSH
11933: LD_VAR 0 1
11937: PPUSH
11938: CALL_OW 266
11942: ST_TO_ADDR
// if btype = b_armoury then
11943: LD_VAR 0 5
11947: PUSH
11948: LD_INT 4
11950: EQUAL
11951: IFFALSE 11961
// btype := b_barracks ;
11953: LD_ADDR_VAR 0 5
11957: PUSH
11958: LD_INT 5
11960: ST_TO_ADDR
// if btype = b_depot then
11961: LD_VAR 0 5
11965: PUSH
11966: LD_INT 0
11968: EQUAL
11969: IFFALSE 11979
// btype := b_warehouse ;
11971: LD_ADDR_VAR 0 5
11975: PUSH
11976: LD_INT 1
11978: ST_TO_ADDR
// if btype = b_workshop then
11979: LD_VAR 0 5
11983: PUSH
11984: LD_INT 2
11986: EQUAL
11987: IFFALSE 11997
// btype := b_factory ;
11989: LD_ADDR_VAR 0 5
11993: PUSH
11994: LD_INT 3
11996: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11997: LD_ADDR_VAR 0 4
12001: PUSH
12002: LD_VAR 0 5
12006: PPUSH
12007: LD_VAR 0 1
12011: PPUSH
12012: CALL_OW 248
12016: PPUSH
12017: CALL_OW 450
12021: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12022: LD_ADDR_VAR 0 2
12026: PUSH
12027: LD_VAR 0 3
12031: PPUSH
12032: LD_INT 1
12034: PPUSH
12035: CALL_OW 275
12039: PUSH
12040: LD_VAR 0 4
12044: PUSH
12045: LD_INT 1
12047: ARRAY
12048: GREATEREQUAL
12049: PUSH
12050: LD_VAR 0 3
12054: PPUSH
12055: LD_INT 2
12057: PPUSH
12058: CALL_OW 275
12062: PUSH
12063: LD_VAR 0 4
12067: PUSH
12068: LD_INT 2
12070: ARRAY
12071: GREATEREQUAL
12072: AND
12073: PUSH
12074: LD_VAR 0 3
12078: PPUSH
12079: LD_INT 3
12081: PPUSH
12082: CALL_OW 275
12086: PUSH
12087: LD_VAR 0 4
12091: PUSH
12092: LD_INT 3
12094: ARRAY
12095: GREATEREQUAL
12096: AND
12097: ST_TO_ADDR
// end ;
12098: LD_VAR 0 2
12102: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12103: LD_INT 0
12105: PPUSH
12106: PPUSH
12107: PPUSH
// pom := GetBase ( building ) ;
12108: LD_ADDR_VAR 0 4
12112: PUSH
12113: LD_VAR 0 1
12117: PPUSH
12118: CALL_OW 274
12122: ST_TO_ADDR
// if not pom then
12123: LD_VAR 0 4
12127: NOT
12128: IFFALSE 12132
// exit ;
12130: GO 12233
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12132: LD_ADDR_VAR 0 5
12136: PUSH
12137: LD_VAR 0 2
12141: PPUSH
12142: LD_VAR 0 1
12146: PPUSH
12147: CALL_OW 248
12151: PPUSH
12152: CALL_OW 450
12156: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12157: LD_ADDR_VAR 0 3
12161: PUSH
12162: LD_VAR 0 4
12166: PPUSH
12167: LD_INT 1
12169: PPUSH
12170: CALL_OW 275
12174: PUSH
12175: LD_VAR 0 5
12179: PUSH
12180: LD_INT 1
12182: ARRAY
12183: GREATEREQUAL
12184: PUSH
12185: LD_VAR 0 4
12189: PPUSH
12190: LD_INT 2
12192: PPUSH
12193: CALL_OW 275
12197: PUSH
12198: LD_VAR 0 5
12202: PUSH
12203: LD_INT 2
12205: ARRAY
12206: GREATEREQUAL
12207: AND
12208: PUSH
12209: LD_VAR 0 4
12213: PPUSH
12214: LD_INT 3
12216: PPUSH
12217: CALL_OW 275
12221: PUSH
12222: LD_VAR 0 5
12226: PUSH
12227: LD_INT 3
12229: ARRAY
12230: GREATEREQUAL
12231: AND
12232: ST_TO_ADDR
// end ;
12233: LD_VAR 0 3
12237: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12238: LD_INT 0
12240: PPUSH
12241: PPUSH
12242: PPUSH
12243: PPUSH
12244: PPUSH
12245: PPUSH
12246: PPUSH
12247: PPUSH
12248: PPUSH
12249: PPUSH
12250: PPUSH
// result := false ;
12251: LD_ADDR_VAR 0 8
12255: PUSH
12256: LD_INT 0
12258: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12259: LD_VAR 0 5
12263: NOT
12264: PUSH
12265: LD_VAR 0 1
12269: NOT
12270: OR
12271: PUSH
12272: LD_VAR 0 2
12276: NOT
12277: OR
12278: PUSH
12279: LD_VAR 0 3
12283: NOT
12284: OR
12285: IFFALSE 12289
// exit ;
12287: GO 13103
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12289: LD_ADDR_VAR 0 14
12293: PUSH
12294: LD_VAR 0 1
12298: PPUSH
12299: LD_VAR 0 2
12303: PPUSH
12304: LD_VAR 0 3
12308: PPUSH
12309: LD_VAR 0 4
12313: PPUSH
12314: LD_VAR 0 5
12318: PUSH
12319: LD_INT 1
12321: ARRAY
12322: PPUSH
12323: CALL_OW 248
12327: PPUSH
12328: LD_INT 0
12330: PPUSH
12331: CALL 14356 0 6
12335: ST_TO_ADDR
// if not hexes then
12336: LD_VAR 0 14
12340: NOT
12341: IFFALSE 12345
// exit ;
12343: GO 13103
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12345: LD_ADDR_VAR 0 17
12349: PUSH
12350: LD_VAR 0 5
12354: PPUSH
12355: LD_INT 22
12357: PUSH
12358: LD_VAR 0 13
12362: PPUSH
12363: CALL_OW 255
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 2
12374: PUSH
12375: LD_INT 30
12377: PUSH
12378: LD_INT 0
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 30
12387: PUSH
12388: LD_INT 1
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PPUSH
12404: CALL_OW 72
12408: ST_TO_ADDR
// for i = 1 to hexes do
12409: LD_ADDR_VAR 0 9
12413: PUSH
12414: DOUBLE
12415: LD_INT 1
12417: DEC
12418: ST_TO_ADDR
12419: LD_VAR 0 14
12423: PUSH
12424: FOR_TO
12425: IFFALSE 13101
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12427: LD_ADDR_VAR 0 13
12431: PUSH
12432: LD_VAR 0 14
12436: PUSH
12437: LD_VAR 0 9
12441: ARRAY
12442: PUSH
12443: LD_INT 1
12445: ARRAY
12446: PPUSH
12447: LD_VAR 0 14
12451: PUSH
12452: LD_VAR 0 9
12456: ARRAY
12457: PUSH
12458: LD_INT 2
12460: ARRAY
12461: PPUSH
12462: CALL_OW 428
12466: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12467: LD_VAR 0 14
12471: PUSH
12472: LD_VAR 0 9
12476: ARRAY
12477: PUSH
12478: LD_INT 1
12480: ARRAY
12481: PPUSH
12482: LD_VAR 0 14
12486: PUSH
12487: LD_VAR 0 9
12491: ARRAY
12492: PUSH
12493: LD_INT 2
12495: ARRAY
12496: PPUSH
12497: CALL_OW 351
12501: PUSH
12502: LD_VAR 0 14
12506: PUSH
12507: LD_VAR 0 9
12511: ARRAY
12512: PUSH
12513: LD_INT 1
12515: ARRAY
12516: PPUSH
12517: LD_VAR 0 14
12521: PUSH
12522: LD_VAR 0 9
12526: ARRAY
12527: PUSH
12528: LD_INT 2
12530: ARRAY
12531: PPUSH
12532: CALL_OW 488
12536: NOT
12537: OR
12538: PUSH
12539: LD_VAR 0 13
12543: PPUSH
12544: CALL_OW 247
12548: PUSH
12549: LD_INT 3
12551: EQUAL
12552: OR
12553: IFFALSE 12559
// exit ;
12555: POP
12556: POP
12557: GO 13103
// if not tmp then
12559: LD_VAR 0 13
12563: NOT
12564: IFFALSE 12568
// continue ;
12566: GO 12424
// result := true ;
12568: LD_ADDR_VAR 0 8
12572: PUSH
12573: LD_INT 1
12575: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12576: LD_VAR 0 6
12580: PUSH
12581: LD_VAR 0 13
12585: PPUSH
12586: CALL_OW 247
12590: PUSH
12591: LD_INT 2
12593: EQUAL
12594: AND
12595: PUSH
12596: LD_VAR 0 13
12600: PPUSH
12601: CALL_OW 263
12605: PUSH
12606: LD_INT 1
12608: EQUAL
12609: AND
12610: IFFALSE 12774
// begin if IsDrivenBy ( tmp ) then
12612: LD_VAR 0 13
12616: PPUSH
12617: CALL_OW 311
12621: IFFALSE 12625
// continue ;
12623: GO 12424
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12625: LD_VAR 0 6
12629: PPUSH
12630: LD_INT 3
12632: PUSH
12633: LD_INT 60
12635: PUSH
12636: EMPTY
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: LD_INT 55
12648: PUSH
12649: EMPTY
12650: LIST
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PPUSH
12660: CALL_OW 72
12664: IFFALSE 12772
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12666: LD_ADDR_VAR 0 18
12670: PUSH
12671: LD_VAR 0 6
12675: PPUSH
12676: LD_INT 3
12678: PUSH
12679: LD_INT 60
12681: PUSH
12682: EMPTY
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: LD_INT 3
12691: PUSH
12692: LD_INT 55
12694: PUSH
12695: EMPTY
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PPUSH
12706: CALL_OW 72
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: ST_TO_ADDR
// if IsInUnit ( driver ) then
12715: LD_VAR 0 18
12719: PPUSH
12720: CALL_OW 310
12724: IFFALSE 12735
// ComExit ( driver ) ;
12726: LD_VAR 0 18
12730: PPUSH
12731: CALL 38135 0 1
// AddComEnterUnit ( driver , tmp ) ;
12735: LD_VAR 0 18
12739: PPUSH
12740: LD_VAR 0 13
12744: PPUSH
12745: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12749: LD_VAR 0 18
12753: PPUSH
12754: LD_VAR 0 7
12758: PPUSH
12759: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12763: LD_VAR 0 18
12767: PPUSH
12768: CALL_OW 181
// end ; continue ;
12772: GO 12424
// end ; if not cleaners or not tmp in cleaners then
12774: LD_VAR 0 6
12778: NOT
12779: PUSH
12780: LD_VAR 0 13
12784: PUSH
12785: LD_VAR 0 6
12789: IN
12790: NOT
12791: OR
12792: IFFALSE 13099
// begin if dep then
12794: LD_VAR 0 17
12798: IFFALSE 12934
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12800: LD_ADDR_VAR 0 16
12804: PUSH
12805: LD_VAR 0 17
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PPUSH
12814: CALL_OW 250
12818: PPUSH
12819: LD_VAR 0 17
12823: PUSH
12824: LD_INT 1
12826: ARRAY
12827: PPUSH
12828: CALL_OW 254
12832: PPUSH
12833: LD_INT 5
12835: PPUSH
12836: CALL_OW 272
12840: PUSH
12841: LD_VAR 0 17
12845: PUSH
12846: LD_INT 1
12848: ARRAY
12849: PPUSH
12850: CALL_OW 251
12854: PPUSH
12855: LD_VAR 0 17
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: PPUSH
12864: CALL_OW 254
12868: PPUSH
12869: LD_INT 5
12871: PPUSH
12872: CALL_OW 273
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12881: LD_VAR 0 16
12885: PUSH
12886: LD_INT 1
12888: ARRAY
12889: PPUSH
12890: LD_VAR 0 16
12894: PUSH
12895: LD_INT 2
12897: ARRAY
12898: PPUSH
12899: CALL_OW 488
12903: IFFALSE 12934
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12905: LD_VAR 0 13
12909: PPUSH
12910: LD_VAR 0 16
12914: PUSH
12915: LD_INT 1
12917: ARRAY
12918: PPUSH
12919: LD_VAR 0 16
12923: PUSH
12924: LD_INT 2
12926: ARRAY
12927: PPUSH
12928: CALL_OW 111
// continue ;
12932: GO 12424
// end ; end ; r := GetDir ( tmp ) ;
12934: LD_ADDR_VAR 0 15
12938: PUSH
12939: LD_VAR 0 13
12943: PPUSH
12944: CALL_OW 254
12948: ST_TO_ADDR
// if r = 5 then
12949: LD_VAR 0 15
12953: PUSH
12954: LD_INT 5
12956: EQUAL
12957: IFFALSE 12967
// r := 0 ;
12959: LD_ADDR_VAR 0 15
12963: PUSH
12964: LD_INT 0
12966: ST_TO_ADDR
// for j = r to 5 do
12967: LD_ADDR_VAR 0 10
12971: PUSH
12972: DOUBLE
12973: LD_VAR 0 15
12977: DEC
12978: ST_TO_ADDR
12979: LD_INT 5
12981: PUSH
12982: FOR_TO
12983: IFFALSE 13097
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12985: LD_ADDR_VAR 0 11
12989: PUSH
12990: LD_VAR 0 13
12994: PPUSH
12995: CALL_OW 250
12999: PPUSH
13000: LD_VAR 0 10
13004: PPUSH
13005: LD_INT 2
13007: PPUSH
13008: CALL_OW 272
13012: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13013: LD_ADDR_VAR 0 12
13017: PUSH
13018: LD_VAR 0 13
13022: PPUSH
13023: CALL_OW 251
13027: PPUSH
13028: LD_VAR 0 10
13032: PPUSH
13033: LD_INT 2
13035: PPUSH
13036: CALL_OW 273
13040: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13041: LD_VAR 0 11
13045: PPUSH
13046: LD_VAR 0 12
13050: PPUSH
13051: CALL_OW 488
13055: PUSH
13056: LD_VAR 0 11
13060: PPUSH
13061: LD_VAR 0 12
13065: PPUSH
13066: CALL_OW 428
13070: NOT
13071: AND
13072: IFFALSE 13095
// begin ComMoveXY ( tmp , _x , _y ) ;
13074: LD_VAR 0 13
13078: PPUSH
13079: LD_VAR 0 11
13083: PPUSH
13084: LD_VAR 0 12
13088: PPUSH
13089: CALL_OW 111
// break ;
13093: GO 13097
// end ; end ;
13095: GO 12982
13097: POP
13098: POP
// end ; end ;
13099: GO 12424
13101: POP
13102: POP
// end ;
13103: LD_VAR 0 8
13107: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13108: LD_INT 0
13110: PPUSH
// result := true ;
13111: LD_ADDR_VAR 0 3
13115: PUSH
13116: LD_INT 1
13118: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13119: LD_VAR 0 2
13123: PUSH
13124: LD_INT 24
13126: DOUBLE
13127: EQUAL
13128: IFTRUE 13138
13130: LD_INT 33
13132: DOUBLE
13133: EQUAL
13134: IFTRUE 13138
13136: GO 13163
13138: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13139: LD_ADDR_VAR 0 3
13143: PUSH
13144: LD_INT 32
13146: PPUSH
13147: LD_VAR 0 1
13151: PPUSH
13152: CALL_OW 321
13156: PUSH
13157: LD_INT 2
13159: EQUAL
13160: ST_TO_ADDR
13161: GO 13479
13163: LD_INT 20
13165: DOUBLE
13166: EQUAL
13167: IFTRUE 13171
13169: GO 13196
13171: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13172: LD_ADDR_VAR 0 3
13176: PUSH
13177: LD_INT 6
13179: PPUSH
13180: LD_VAR 0 1
13184: PPUSH
13185: CALL_OW 321
13189: PUSH
13190: LD_INT 2
13192: EQUAL
13193: ST_TO_ADDR
13194: GO 13479
13196: LD_INT 22
13198: DOUBLE
13199: EQUAL
13200: IFTRUE 13210
13202: LD_INT 36
13204: DOUBLE
13205: EQUAL
13206: IFTRUE 13210
13208: GO 13235
13210: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13211: LD_ADDR_VAR 0 3
13215: PUSH
13216: LD_INT 15
13218: PPUSH
13219: LD_VAR 0 1
13223: PPUSH
13224: CALL_OW 321
13228: PUSH
13229: LD_INT 2
13231: EQUAL
13232: ST_TO_ADDR
13233: GO 13479
13235: LD_INT 30
13237: DOUBLE
13238: EQUAL
13239: IFTRUE 13243
13241: GO 13268
13243: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13244: LD_ADDR_VAR 0 3
13248: PUSH
13249: LD_INT 20
13251: PPUSH
13252: LD_VAR 0 1
13256: PPUSH
13257: CALL_OW 321
13261: PUSH
13262: LD_INT 2
13264: EQUAL
13265: ST_TO_ADDR
13266: GO 13479
13268: LD_INT 28
13270: DOUBLE
13271: EQUAL
13272: IFTRUE 13282
13274: LD_INT 21
13276: DOUBLE
13277: EQUAL
13278: IFTRUE 13282
13280: GO 13307
13282: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13283: LD_ADDR_VAR 0 3
13287: PUSH
13288: LD_INT 21
13290: PPUSH
13291: LD_VAR 0 1
13295: PPUSH
13296: CALL_OW 321
13300: PUSH
13301: LD_INT 2
13303: EQUAL
13304: ST_TO_ADDR
13305: GO 13479
13307: LD_INT 16
13309: DOUBLE
13310: EQUAL
13311: IFTRUE 13315
13313: GO 13340
13315: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13316: LD_ADDR_VAR 0 3
13320: PUSH
13321: LD_INT 84
13323: PPUSH
13324: LD_VAR 0 1
13328: PPUSH
13329: CALL_OW 321
13333: PUSH
13334: LD_INT 2
13336: EQUAL
13337: ST_TO_ADDR
13338: GO 13479
13340: LD_INT 19
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13354
13346: LD_INT 23
13348: DOUBLE
13349: EQUAL
13350: IFTRUE 13354
13352: GO 13379
13354: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13355: LD_ADDR_VAR 0 3
13359: PUSH
13360: LD_INT 83
13362: PPUSH
13363: LD_VAR 0 1
13367: PPUSH
13368: CALL_OW 321
13372: PUSH
13373: LD_INT 2
13375: EQUAL
13376: ST_TO_ADDR
13377: GO 13479
13379: LD_INT 17
13381: DOUBLE
13382: EQUAL
13383: IFTRUE 13387
13385: GO 13412
13387: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13388: LD_ADDR_VAR 0 3
13392: PUSH
13393: LD_INT 39
13395: PPUSH
13396: LD_VAR 0 1
13400: PPUSH
13401: CALL_OW 321
13405: PUSH
13406: LD_INT 2
13408: EQUAL
13409: ST_TO_ADDR
13410: GO 13479
13412: LD_INT 18
13414: DOUBLE
13415: EQUAL
13416: IFTRUE 13420
13418: GO 13445
13420: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13421: LD_ADDR_VAR 0 3
13425: PUSH
13426: LD_INT 40
13428: PPUSH
13429: LD_VAR 0 1
13433: PPUSH
13434: CALL_OW 321
13438: PUSH
13439: LD_INT 2
13441: EQUAL
13442: ST_TO_ADDR
13443: GO 13479
13445: LD_INT 27
13447: DOUBLE
13448: EQUAL
13449: IFTRUE 13453
13451: GO 13478
13453: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13454: LD_ADDR_VAR 0 3
13458: PUSH
13459: LD_INT 35
13461: PPUSH
13462: LD_VAR 0 1
13466: PPUSH
13467: CALL_OW 321
13471: PUSH
13472: LD_INT 2
13474: EQUAL
13475: ST_TO_ADDR
13476: GO 13479
13478: POP
// end ;
13479: LD_VAR 0 3
13483: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13484: LD_INT 0
13486: PPUSH
13487: PPUSH
13488: PPUSH
13489: PPUSH
13490: PPUSH
13491: PPUSH
13492: PPUSH
13493: PPUSH
13494: PPUSH
13495: PPUSH
13496: PPUSH
// result := false ;
13497: LD_ADDR_VAR 0 6
13501: PUSH
13502: LD_INT 0
13504: ST_TO_ADDR
// if btype = b_depot then
13505: LD_VAR 0 2
13509: PUSH
13510: LD_INT 0
13512: EQUAL
13513: IFFALSE 13525
// begin result := true ;
13515: LD_ADDR_VAR 0 6
13519: PUSH
13520: LD_INT 1
13522: ST_TO_ADDR
// exit ;
13523: GO 14351
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13525: LD_VAR 0 1
13529: NOT
13530: PUSH
13531: LD_VAR 0 1
13535: PPUSH
13536: CALL_OW 266
13540: PUSH
13541: LD_INT 0
13543: PUSH
13544: LD_INT 1
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: IN
13551: NOT
13552: OR
13553: PUSH
13554: LD_VAR 0 2
13558: NOT
13559: OR
13560: PUSH
13561: LD_VAR 0 5
13565: PUSH
13566: LD_INT 0
13568: PUSH
13569: LD_INT 1
13571: PUSH
13572: LD_INT 2
13574: PUSH
13575: LD_INT 3
13577: PUSH
13578: LD_INT 4
13580: PUSH
13581: LD_INT 5
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: IN
13592: NOT
13593: OR
13594: PUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_VAR 0 4
13604: PPUSH
13605: CALL_OW 488
13609: NOT
13610: OR
13611: IFFALSE 13615
// exit ;
13613: GO 14351
// side := GetSide ( depot ) ;
13615: LD_ADDR_VAR 0 9
13619: PUSH
13620: LD_VAR 0 1
13624: PPUSH
13625: CALL_OW 255
13629: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13630: LD_VAR 0 9
13634: PPUSH
13635: LD_VAR 0 2
13639: PPUSH
13640: CALL 13108 0 2
13644: NOT
13645: IFFALSE 13649
// exit ;
13647: GO 14351
// pom := GetBase ( depot ) ;
13649: LD_ADDR_VAR 0 10
13653: PUSH
13654: LD_VAR 0 1
13658: PPUSH
13659: CALL_OW 274
13663: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13664: LD_ADDR_VAR 0 11
13668: PUSH
13669: LD_VAR 0 2
13673: PPUSH
13674: LD_VAR 0 1
13678: PPUSH
13679: CALL_OW 248
13683: PPUSH
13684: CALL_OW 450
13688: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13689: LD_VAR 0 10
13693: PPUSH
13694: LD_INT 1
13696: PPUSH
13697: CALL_OW 275
13701: PUSH
13702: LD_VAR 0 11
13706: PUSH
13707: LD_INT 1
13709: ARRAY
13710: GREATEREQUAL
13711: PUSH
13712: LD_VAR 0 10
13716: PPUSH
13717: LD_INT 2
13719: PPUSH
13720: CALL_OW 275
13724: PUSH
13725: LD_VAR 0 11
13729: PUSH
13730: LD_INT 2
13732: ARRAY
13733: GREATEREQUAL
13734: AND
13735: PUSH
13736: LD_VAR 0 10
13740: PPUSH
13741: LD_INT 3
13743: PPUSH
13744: CALL_OW 275
13748: PUSH
13749: LD_VAR 0 11
13753: PUSH
13754: LD_INT 3
13756: ARRAY
13757: GREATEREQUAL
13758: AND
13759: NOT
13760: IFFALSE 13764
// exit ;
13762: GO 14351
// if GetBType ( depot ) = b_depot then
13764: LD_VAR 0 1
13768: PPUSH
13769: CALL_OW 266
13773: PUSH
13774: LD_INT 0
13776: EQUAL
13777: IFFALSE 13789
// dist := 28 else
13779: LD_ADDR_VAR 0 14
13783: PUSH
13784: LD_INT 28
13786: ST_TO_ADDR
13787: GO 13797
// dist := 36 ;
13789: LD_ADDR_VAR 0 14
13793: PUSH
13794: LD_INT 36
13796: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13797: LD_VAR 0 1
13801: PPUSH
13802: LD_VAR 0 3
13806: PPUSH
13807: LD_VAR 0 4
13811: PPUSH
13812: CALL_OW 297
13816: PUSH
13817: LD_VAR 0 14
13821: GREATER
13822: IFFALSE 13826
// exit ;
13824: GO 14351
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13826: LD_ADDR_VAR 0 12
13830: PUSH
13831: LD_VAR 0 2
13835: PPUSH
13836: LD_VAR 0 3
13840: PPUSH
13841: LD_VAR 0 4
13845: PPUSH
13846: LD_VAR 0 5
13850: PPUSH
13851: LD_VAR 0 1
13855: PPUSH
13856: CALL_OW 248
13860: PPUSH
13861: LD_INT 0
13863: PPUSH
13864: CALL 14356 0 6
13868: ST_TO_ADDR
// if not hexes then
13869: LD_VAR 0 12
13873: NOT
13874: IFFALSE 13878
// exit ;
13876: GO 14351
// hex := GetHexInfo ( x , y ) ;
13878: LD_ADDR_VAR 0 15
13882: PUSH
13883: LD_VAR 0 3
13887: PPUSH
13888: LD_VAR 0 4
13892: PPUSH
13893: CALL_OW 546
13897: ST_TO_ADDR
// if hex [ 1 ] then
13898: LD_VAR 0 15
13902: PUSH
13903: LD_INT 1
13905: ARRAY
13906: IFFALSE 13910
// exit ;
13908: GO 14351
// height := hex [ 2 ] ;
13910: LD_ADDR_VAR 0 13
13914: PUSH
13915: LD_VAR 0 15
13919: PUSH
13920: LD_INT 2
13922: ARRAY
13923: ST_TO_ADDR
// for i = 1 to hexes do
13924: LD_ADDR_VAR 0 7
13928: PUSH
13929: DOUBLE
13930: LD_INT 1
13932: DEC
13933: ST_TO_ADDR
13934: LD_VAR 0 12
13938: PUSH
13939: FOR_TO
13940: IFFALSE 14270
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13942: LD_VAR 0 12
13946: PUSH
13947: LD_VAR 0 7
13951: ARRAY
13952: PUSH
13953: LD_INT 1
13955: ARRAY
13956: PPUSH
13957: LD_VAR 0 12
13961: PUSH
13962: LD_VAR 0 7
13966: ARRAY
13967: PUSH
13968: LD_INT 2
13970: ARRAY
13971: PPUSH
13972: CALL_OW 488
13976: NOT
13977: PUSH
13978: LD_VAR 0 12
13982: PUSH
13983: LD_VAR 0 7
13987: ARRAY
13988: PUSH
13989: LD_INT 1
13991: ARRAY
13992: PPUSH
13993: LD_VAR 0 12
13997: PUSH
13998: LD_VAR 0 7
14002: ARRAY
14003: PUSH
14004: LD_INT 2
14006: ARRAY
14007: PPUSH
14008: CALL_OW 428
14012: PUSH
14013: LD_INT 0
14015: GREATER
14016: OR
14017: PUSH
14018: LD_VAR 0 12
14022: PUSH
14023: LD_VAR 0 7
14027: ARRAY
14028: PUSH
14029: LD_INT 1
14031: ARRAY
14032: PPUSH
14033: LD_VAR 0 12
14037: PUSH
14038: LD_VAR 0 7
14042: ARRAY
14043: PUSH
14044: LD_INT 2
14046: ARRAY
14047: PPUSH
14048: CALL_OW 351
14052: OR
14053: IFFALSE 14059
// exit ;
14055: POP
14056: POP
14057: GO 14351
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14059: LD_ADDR_VAR 0 8
14063: PUSH
14064: LD_VAR 0 12
14068: PUSH
14069: LD_VAR 0 7
14073: ARRAY
14074: PUSH
14075: LD_INT 1
14077: ARRAY
14078: PPUSH
14079: LD_VAR 0 12
14083: PUSH
14084: LD_VAR 0 7
14088: ARRAY
14089: PUSH
14090: LD_INT 2
14092: ARRAY
14093: PPUSH
14094: CALL_OW 546
14098: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14099: LD_VAR 0 8
14103: PUSH
14104: LD_INT 1
14106: ARRAY
14107: PUSH
14108: LD_VAR 0 8
14112: PUSH
14113: LD_INT 2
14115: ARRAY
14116: PUSH
14117: LD_VAR 0 13
14121: PUSH
14122: LD_INT 2
14124: PLUS
14125: GREATER
14126: OR
14127: PUSH
14128: LD_VAR 0 8
14132: PUSH
14133: LD_INT 2
14135: ARRAY
14136: PUSH
14137: LD_VAR 0 13
14141: PUSH
14142: LD_INT 2
14144: MINUS
14145: LESS
14146: OR
14147: PUSH
14148: LD_VAR 0 8
14152: PUSH
14153: LD_INT 3
14155: ARRAY
14156: PUSH
14157: LD_INT 0
14159: PUSH
14160: LD_INT 8
14162: PUSH
14163: LD_INT 9
14165: PUSH
14166: LD_INT 10
14168: PUSH
14169: LD_INT 11
14171: PUSH
14172: LD_INT 12
14174: PUSH
14175: LD_INT 13
14177: PUSH
14178: LD_INT 16
14180: PUSH
14181: LD_INT 17
14183: PUSH
14184: LD_INT 18
14186: PUSH
14187: LD_INT 19
14189: PUSH
14190: LD_INT 20
14192: PUSH
14193: LD_INT 21
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: IN
14211: NOT
14212: OR
14213: PUSH
14214: LD_VAR 0 8
14218: PUSH
14219: LD_INT 5
14221: ARRAY
14222: NOT
14223: OR
14224: PUSH
14225: LD_VAR 0 8
14229: PUSH
14230: LD_INT 6
14232: ARRAY
14233: PUSH
14234: LD_INT 1
14236: PUSH
14237: LD_INT 2
14239: PUSH
14240: LD_INT 7
14242: PUSH
14243: LD_INT 9
14245: PUSH
14246: LD_INT 10
14248: PUSH
14249: LD_INT 11
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: IN
14260: NOT
14261: OR
14262: IFFALSE 14268
// exit ;
14264: POP
14265: POP
14266: GO 14351
// end ;
14268: GO 13939
14270: POP
14271: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14272: LD_VAR 0 9
14276: PPUSH
14277: LD_VAR 0 3
14281: PPUSH
14282: LD_VAR 0 4
14286: PPUSH
14287: LD_INT 20
14289: PPUSH
14290: CALL 6274 0 4
14294: PUSH
14295: LD_INT 4
14297: ARRAY
14298: IFFALSE 14302
// exit ;
14300: GO 14351
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14302: LD_VAR 0 2
14306: PUSH
14307: LD_INT 29
14309: PUSH
14310: LD_INT 30
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: IN
14317: PUSH
14318: LD_VAR 0 3
14322: PPUSH
14323: LD_VAR 0 4
14327: PPUSH
14328: LD_VAR 0 9
14332: PPUSH
14333: CALL_OW 440
14337: NOT
14338: AND
14339: IFFALSE 14343
// exit ;
14341: GO 14351
// result := true ;
14343: LD_ADDR_VAR 0 6
14347: PUSH
14348: LD_INT 1
14350: ST_TO_ADDR
// end ;
14351: LD_VAR 0 6
14355: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14356: LD_INT 0
14358: PPUSH
14359: PPUSH
14360: PPUSH
14361: PPUSH
14362: PPUSH
14363: PPUSH
14364: PPUSH
14365: PPUSH
14366: PPUSH
14367: PPUSH
14368: PPUSH
14369: PPUSH
14370: PPUSH
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
14383: PPUSH
14384: PPUSH
14385: PPUSH
14386: PPUSH
14387: PPUSH
14388: PPUSH
14389: PPUSH
14390: PPUSH
14391: PPUSH
14392: PPUSH
14393: PPUSH
14394: PPUSH
14395: PPUSH
14396: PPUSH
14397: PPUSH
14398: PPUSH
14399: PPUSH
14400: PPUSH
14401: PPUSH
14402: PPUSH
14403: PPUSH
14404: PPUSH
14405: PPUSH
14406: PPUSH
14407: PPUSH
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
14413: PPUSH
14414: PPUSH
14415: PPUSH
// result = [ ] ;
14416: LD_ADDR_VAR 0 7
14420: PUSH
14421: EMPTY
14422: ST_TO_ADDR
// temp_list = [ ] ;
14423: LD_ADDR_VAR 0 9
14427: PUSH
14428: EMPTY
14429: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14430: LD_VAR 0 4
14434: PUSH
14435: LD_INT 0
14437: PUSH
14438: LD_INT 1
14440: PUSH
14441: LD_INT 2
14443: PUSH
14444: LD_INT 3
14446: PUSH
14447: LD_INT 4
14449: PUSH
14450: LD_INT 5
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: IN
14461: NOT
14462: PUSH
14463: LD_VAR 0 1
14467: PUSH
14468: LD_INT 0
14470: PUSH
14471: LD_INT 1
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: IN
14478: PUSH
14479: LD_VAR 0 5
14483: PUSH
14484: LD_INT 1
14486: PUSH
14487: LD_INT 2
14489: PUSH
14490: LD_INT 3
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: LIST
14497: IN
14498: NOT
14499: AND
14500: OR
14501: IFFALSE 14505
// exit ;
14503: GO 32896
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14505: LD_VAR 0 1
14509: PUSH
14510: LD_INT 6
14512: PUSH
14513: LD_INT 7
14515: PUSH
14516: LD_INT 8
14518: PUSH
14519: LD_INT 13
14521: PUSH
14522: LD_INT 12
14524: PUSH
14525: LD_INT 15
14527: PUSH
14528: LD_INT 11
14530: PUSH
14531: LD_INT 14
14533: PUSH
14534: LD_INT 10
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: IN
14548: IFFALSE 14558
// btype = b_lab ;
14550: LD_ADDR_VAR 0 1
14554: PUSH
14555: LD_INT 6
14557: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14558: LD_VAR 0 6
14562: PUSH
14563: LD_INT 0
14565: PUSH
14566: LD_INT 1
14568: PUSH
14569: LD_INT 2
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: LIST
14576: IN
14577: NOT
14578: PUSH
14579: LD_VAR 0 1
14583: PUSH
14584: LD_INT 0
14586: PUSH
14587: LD_INT 1
14589: PUSH
14590: LD_INT 2
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: LD_INT 6
14598: PUSH
14599: LD_INT 36
14601: PUSH
14602: LD_INT 4
14604: PUSH
14605: LD_INT 5
14607: PUSH
14608: LD_INT 31
14610: PUSH
14611: LD_INT 32
14613: PUSH
14614: LD_INT 33
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: IN
14630: NOT
14631: PUSH
14632: LD_VAR 0 6
14636: PUSH
14637: LD_INT 1
14639: EQUAL
14640: AND
14641: OR
14642: PUSH
14643: LD_VAR 0 1
14647: PUSH
14648: LD_INT 2
14650: PUSH
14651: LD_INT 3
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: IN
14658: NOT
14659: PUSH
14660: LD_VAR 0 6
14664: PUSH
14665: LD_INT 2
14667: EQUAL
14668: AND
14669: OR
14670: IFFALSE 14680
// mode = 0 ;
14672: LD_ADDR_VAR 0 6
14676: PUSH
14677: LD_INT 0
14679: ST_TO_ADDR
// case mode of 0 :
14680: LD_VAR 0 6
14684: PUSH
14685: LD_INT 0
14687: DOUBLE
14688: EQUAL
14689: IFTRUE 14693
14691: GO 26146
14693: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14694: LD_ADDR_VAR 0 11
14698: PUSH
14699: LD_INT 0
14701: PUSH
14702: LD_INT 0
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 0
14711: PUSH
14712: LD_INT 1
14714: NEG
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_INT 1
14722: PUSH
14723: LD_INT 0
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 1
14732: PUSH
14733: LD_INT 1
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: LD_INT 0
14742: PUSH
14743: LD_INT 1
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 1
14752: NEG
14753: PUSH
14754: LD_INT 0
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 1
14763: NEG
14764: PUSH
14765: LD_INT 1
14767: NEG
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 1
14775: NEG
14776: PUSH
14777: LD_INT 2
14779: NEG
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 0
14787: PUSH
14788: LD_INT 2
14790: NEG
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 1
14798: PUSH
14799: LD_INT 1
14801: NEG
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 1
14809: PUSH
14810: LD_INT 2
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 0
14819: PUSH
14820: LD_INT 2
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 1
14829: NEG
14830: PUSH
14831: LD_INT 1
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 1
14840: PUSH
14841: LD_INT 3
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 0
14850: PUSH
14851: LD_INT 3
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_INT 1
14860: NEG
14861: PUSH
14862: LD_INT 2
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14887: LD_ADDR_VAR 0 12
14891: PUSH
14892: LD_INT 0
14894: PUSH
14895: LD_INT 0
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: LD_INT 0
14904: PUSH
14905: LD_INT 1
14907: NEG
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: LD_INT 1
14915: PUSH
14916: LD_INT 0
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 1
14925: PUSH
14926: LD_INT 1
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 0
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: LD_INT 1
14945: NEG
14946: PUSH
14947: LD_INT 0
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: LD_INT 1
14956: NEG
14957: PUSH
14958: LD_INT 1
14960: NEG
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 1
14968: PUSH
14969: LD_INT 1
14971: NEG
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: LD_INT 0
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 2
14989: PUSH
14990: LD_INT 1
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 1
14999: NEG
15000: PUSH
15001: LD_INT 1
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 2
15010: NEG
15011: PUSH
15012: LD_INT 0
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PUSH
15019: LD_INT 2
15021: NEG
15022: PUSH
15023: LD_INT 1
15025: NEG
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 2
15033: NEG
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 3
15044: NEG
15045: PUSH
15046: LD_INT 0
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 3
15055: NEG
15056: PUSH
15057: LD_INT 1
15059: NEG
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15083: LD_ADDR_VAR 0 13
15087: PUSH
15088: LD_INT 0
15090: PUSH
15091: LD_INT 0
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 0
15100: PUSH
15101: LD_INT 1
15103: NEG
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 1
15111: PUSH
15112: LD_INT 0
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 1
15121: PUSH
15122: LD_INT 1
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 0
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 1
15141: NEG
15142: PUSH
15143: LD_INT 0
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 1
15152: NEG
15153: PUSH
15154: LD_INT 1
15156: NEG
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 1
15164: NEG
15165: PUSH
15166: LD_INT 2
15168: NEG
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 2
15176: PUSH
15177: LD_INT 1
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 2
15186: PUSH
15187: LD_INT 2
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 1
15196: PUSH
15197: LD_INT 2
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 2
15206: NEG
15207: PUSH
15208: LD_INT 1
15210: NEG
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 2
15218: NEG
15219: PUSH
15220: LD_INT 2
15222: NEG
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 2
15230: NEG
15231: PUSH
15232: LD_INT 3
15234: NEG
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 3
15242: NEG
15243: PUSH
15244: LD_INT 2
15246: NEG
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: LD_INT 3
15254: NEG
15255: PUSH
15256: LD_INT 3
15258: NEG
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15282: LD_ADDR_VAR 0 14
15286: PUSH
15287: LD_INT 0
15289: PUSH
15290: LD_INT 0
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 0
15299: PUSH
15300: LD_INT 1
15302: NEG
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 1
15310: PUSH
15311: LD_INT 0
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: LD_INT 1
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 0
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 1
15340: NEG
15341: PUSH
15342: LD_INT 0
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 1
15351: NEG
15352: PUSH
15353: LD_INT 1
15355: NEG
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 1
15363: NEG
15364: PUSH
15365: LD_INT 2
15367: NEG
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 0
15375: PUSH
15376: LD_INT 2
15378: NEG
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: LD_INT 1
15389: NEG
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 1
15397: PUSH
15398: LD_INT 2
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 0
15407: PUSH
15408: LD_INT 2
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 1
15417: NEG
15418: PUSH
15419: LD_INT 1
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 1
15428: NEG
15429: PUSH
15430: LD_INT 3
15432: NEG
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 0
15440: PUSH
15441: LD_INT 3
15443: NEG
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 1
15451: PUSH
15452: LD_INT 2
15454: NEG
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15478: LD_ADDR_VAR 0 15
15482: PUSH
15483: LD_INT 0
15485: PUSH
15486: LD_INT 0
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PUSH
15493: LD_INT 0
15495: PUSH
15496: LD_INT 1
15498: NEG
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: LD_INT 0
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 1
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 0
15526: PUSH
15527: LD_INT 1
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 1
15536: NEG
15537: PUSH
15538: LD_INT 0
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 1
15547: NEG
15548: PUSH
15549: LD_INT 1
15551: NEG
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 1
15559: PUSH
15560: LD_INT 1
15562: NEG
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 2
15570: PUSH
15571: LD_INT 0
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 2
15580: PUSH
15581: LD_INT 1
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 1
15590: NEG
15591: PUSH
15592: LD_INT 1
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 2
15601: NEG
15602: PUSH
15603: LD_INT 0
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 2
15612: NEG
15613: PUSH
15614: LD_INT 1
15616: NEG
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 2
15624: PUSH
15625: LD_INT 1
15627: NEG
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 3
15635: PUSH
15636: LD_INT 0
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 3
15645: PUSH
15646: LD_INT 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15671: LD_ADDR_VAR 0 16
15675: PUSH
15676: LD_INT 0
15678: PUSH
15679: LD_INT 0
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 0
15688: PUSH
15689: LD_INT 1
15691: NEG
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: LD_INT 0
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: LD_INT 1
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 0
15719: PUSH
15720: LD_INT 1
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 1
15729: NEG
15730: PUSH
15731: LD_INT 0
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 1
15740: NEG
15741: PUSH
15742: LD_INT 1
15744: NEG
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 1
15752: NEG
15753: PUSH
15754: LD_INT 2
15756: NEG
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 2
15764: PUSH
15765: LD_INT 1
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: LD_INT 2
15774: PUSH
15775: LD_INT 2
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: LD_INT 2
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 2
15794: NEG
15795: PUSH
15796: LD_INT 1
15798: NEG
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 2
15806: NEG
15807: PUSH
15808: LD_INT 2
15810: NEG
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 3
15818: PUSH
15819: LD_INT 2
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 3
15828: PUSH
15829: LD_INT 3
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 2
15838: PUSH
15839: LD_INT 3
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15864: LD_ADDR_VAR 0 17
15868: PUSH
15869: LD_INT 0
15871: PUSH
15872: LD_INT 0
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 0
15881: PUSH
15882: LD_INT 1
15884: NEG
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: LD_INT 1
15892: PUSH
15893: LD_INT 0
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 1
15902: PUSH
15903: LD_INT 1
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 0
15912: PUSH
15913: LD_INT 1
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 1
15922: NEG
15923: PUSH
15924: LD_INT 0
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 1
15933: NEG
15934: PUSH
15935: LD_INT 1
15937: NEG
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 1
15945: NEG
15946: PUSH
15947: LD_INT 2
15949: NEG
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 0
15957: PUSH
15958: LD_INT 2
15960: NEG
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 1
15968: PUSH
15969: LD_INT 1
15971: NEG
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 2
15979: PUSH
15980: LD_INT 0
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 2
15989: PUSH
15990: LD_INT 1
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 2
15999: PUSH
16000: LD_INT 2
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 1
16009: PUSH
16010: LD_INT 2
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: LD_INT 0
16019: PUSH
16020: LD_INT 2
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PUSH
16027: LD_INT 1
16029: NEG
16030: PUSH
16031: LD_INT 1
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: LD_INT 2
16040: NEG
16041: PUSH
16042: LD_INT 0
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: LD_INT 2
16051: NEG
16052: PUSH
16053: LD_INT 1
16055: NEG
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 2
16063: NEG
16064: PUSH
16065: LD_INT 2
16067: NEG
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16094: LD_ADDR_VAR 0 18
16098: PUSH
16099: LD_INT 0
16101: PUSH
16102: LD_INT 0
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 0
16111: PUSH
16112: LD_INT 1
16114: NEG
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 1
16122: PUSH
16123: LD_INT 0
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 1
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 0
16142: PUSH
16143: LD_INT 1
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 1
16152: NEG
16153: PUSH
16154: LD_INT 0
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 1
16163: NEG
16164: PUSH
16165: LD_INT 1
16167: NEG
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 1
16175: NEG
16176: PUSH
16177: LD_INT 2
16179: NEG
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 0
16187: PUSH
16188: LD_INT 2
16190: NEG
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 1
16198: PUSH
16199: LD_INT 1
16201: NEG
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 2
16209: PUSH
16210: LD_INT 0
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 2
16219: PUSH
16220: LD_INT 1
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: LD_INT 2
16229: PUSH
16230: LD_INT 2
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 1
16239: PUSH
16240: LD_INT 2
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: LD_INT 0
16249: PUSH
16250: LD_INT 2
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 1
16259: NEG
16260: PUSH
16261: LD_INT 1
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: LD_INT 2
16270: NEG
16271: PUSH
16272: LD_INT 0
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 2
16281: NEG
16282: PUSH
16283: LD_INT 1
16285: NEG
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 2
16293: NEG
16294: PUSH
16295: LD_INT 2
16297: NEG
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16324: LD_ADDR_VAR 0 19
16328: PUSH
16329: LD_INT 0
16331: PUSH
16332: LD_INT 0
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 0
16341: PUSH
16342: LD_INT 1
16344: NEG
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 1
16352: PUSH
16353: LD_INT 0
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 1
16362: PUSH
16363: LD_INT 1
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 0
16372: PUSH
16373: LD_INT 1
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 1
16382: NEG
16383: PUSH
16384: LD_INT 0
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 1
16393: NEG
16394: PUSH
16395: LD_INT 1
16397: NEG
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 1
16405: NEG
16406: PUSH
16407: LD_INT 2
16409: NEG
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 0
16417: PUSH
16418: LD_INT 2
16420: NEG
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 1
16428: PUSH
16429: LD_INT 1
16431: NEG
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 2
16439: PUSH
16440: LD_INT 0
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 2
16449: PUSH
16450: LD_INT 1
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 2
16459: PUSH
16460: LD_INT 2
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 1
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 0
16479: PUSH
16480: LD_INT 2
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 1
16489: NEG
16490: PUSH
16491: LD_INT 1
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 2
16500: NEG
16501: PUSH
16502: LD_INT 0
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 2
16511: NEG
16512: PUSH
16513: LD_INT 1
16515: NEG
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 2
16523: NEG
16524: PUSH
16525: LD_INT 2
16527: NEG
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16554: LD_ADDR_VAR 0 20
16558: PUSH
16559: LD_INT 0
16561: PUSH
16562: LD_INT 0
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: LD_INT 0
16571: PUSH
16572: LD_INT 1
16574: NEG
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: LD_INT 0
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: LD_INT 1
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 0
16602: PUSH
16603: LD_INT 1
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 1
16612: NEG
16613: PUSH
16614: LD_INT 0
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 1
16623: NEG
16624: PUSH
16625: LD_INT 1
16627: NEG
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 1
16635: NEG
16636: PUSH
16637: LD_INT 2
16639: NEG
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: LD_INT 0
16647: PUSH
16648: LD_INT 2
16650: NEG
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 1
16658: PUSH
16659: LD_INT 1
16661: NEG
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 0
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 2
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 2
16689: PUSH
16690: LD_INT 2
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 1
16699: PUSH
16700: LD_INT 2
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 0
16709: PUSH
16710: LD_INT 2
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 1
16719: NEG
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 2
16730: NEG
16731: PUSH
16732: LD_INT 0
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 2
16741: NEG
16742: PUSH
16743: LD_INT 1
16745: NEG
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 2
16753: NEG
16754: PUSH
16755: LD_INT 2
16757: NEG
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16784: LD_ADDR_VAR 0 21
16788: PUSH
16789: LD_INT 0
16791: PUSH
16792: LD_INT 0
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: LD_INT 0
16801: PUSH
16802: LD_INT 1
16804: NEG
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 1
16812: PUSH
16813: LD_INT 0
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 1
16822: PUSH
16823: LD_INT 1
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 0
16832: PUSH
16833: LD_INT 1
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 1
16842: NEG
16843: PUSH
16844: LD_INT 0
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 1
16853: NEG
16854: PUSH
16855: LD_INT 1
16857: NEG
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: LD_INT 1
16865: NEG
16866: PUSH
16867: LD_INT 2
16869: NEG
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 0
16877: PUSH
16878: LD_INT 2
16880: NEG
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: LD_INT 1
16888: PUSH
16889: LD_INT 1
16891: NEG
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 2
16899: PUSH
16900: LD_INT 0
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 2
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 2
16919: PUSH
16920: LD_INT 2
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 1
16929: PUSH
16930: LD_INT 2
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 0
16939: PUSH
16940: LD_INT 2
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 1
16949: NEG
16950: PUSH
16951: LD_INT 1
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 2
16960: NEG
16961: PUSH
16962: LD_INT 0
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 2
16971: NEG
16972: PUSH
16973: LD_INT 1
16975: NEG
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 2
16983: NEG
16984: PUSH
16985: LD_INT 2
16987: NEG
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17014: LD_ADDR_VAR 0 22
17018: PUSH
17019: LD_INT 0
17021: PUSH
17022: LD_INT 0
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: LD_INT 0
17031: PUSH
17032: LD_INT 1
17034: NEG
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 1
17042: PUSH
17043: LD_INT 0
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 1
17052: PUSH
17053: LD_INT 1
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 0
17062: PUSH
17063: LD_INT 1
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 1
17072: NEG
17073: PUSH
17074: LD_INT 0
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 1
17083: NEG
17084: PUSH
17085: LD_INT 1
17087: NEG
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 1
17095: NEG
17096: PUSH
17097: LD_INT 2
17099: NEG
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 0
17107: PUSH
17108: LD_INT 2
17110: NEG
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 1
17118: PUSH
17119: LD_INT 1
17121: NEG
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 2
17129: PUSH
17130: LD_INT 0
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 2
17139: PUSH
17140: LD_INT 1
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 2
17149: PUSH
17150: LD_INT 2
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 1
17159: PUSH
17160: LD_INT 2
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 0
17169: PUSH
17170: LD_INT 2
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 1
17179: NEG
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 2
17190: NEG
17191: PUSH
17192: LD_INT 0
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 2
17201: NEG
17202: PUSH
17203: LD_INT 1
17205: NEG
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 2
17213: NEG
17214: PUSH
17215: LD_INT 2
17217: NEG
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17244: LD_ADDR_VAR 0 23
17248: PUSH
17249: LD_INT 0
17251: PUSH
17252: LD_INT 0
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 0
17261: PUSH
17262: LD_INT 1
17264: NEG
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: LD_INT 0
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 0
17292: PUSH
17293: LD_INT 1
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 1
17302: NEG
17303: PUSH
17304: LD_INT 0
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 1
17313: NEG
17314: PUSH
17315: LD_INT 1
17317: NEG
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 1
17325: NEG
17326: PUSH
17327: LD_INT 2
17329: NEG
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 0
17337: PUSH
17338: LD_INT 2
17340: NEG
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 1
17348: PUSH
17349: LD_INT 1
17351: NEG
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 2
17359: PUSH
17360: LD_INT 0
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 2
17369: PUSH
17370: LD_INT 1
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 2
17379: PUSH
17380: LD_INT 2
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 1
17389: PUSH
17390: LD_INT 2
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 0
17399: PUSH
17400: LD_INT 2
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 1
17409: NEG
17410: PUSH
17411: LD_INT 1
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 2
17420: NEG
17421: PUSH
17422: LD_INT 0
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 2
17431: NEG
17432: PUSH
17433: LD_INT 1
17435: NEG
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 2
17443: NEG
17444: PUSH
17445: LD_INT 2
17447: NEG
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 2
17455: NEG
17456: PUSH
17457: LD_INT 3
17459: NEG
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 1
17467: NEG
17468: PUSH
17469: LD_INT 3
17471: NEG
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 1
17479: PUSH
17480: LD_INT 2
17482: NEG
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 2
17490: PUSH
17491: LD_INT 1
17493: NEG
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17524: LD_ADDR_VAR 0 24
17528: PUSH
17529: LD_INT 0
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 0
17541: PUSH
17542: LD_INT 1
17544: NEG
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: LD_INT 0
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: LD_INT 1
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 1
17582: NEG
17583: PUSH
17584: LD_INT 0
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 1
17593: NEG
17594: PUSH
17595: LD_INT 1
17597: NEG
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 1
17605: NEG
17606: PUSH
17607: LD_INT 2
17609: NEG
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 0
17617: PUSH
17618: LD_INT 2
17620: NEG
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: LD_INT 1
17631: NEG
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 2
17639: PUSH
17640: LD_INT 0
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 2
17649: PUSH
17650: LD_INT 1
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 2
17659: PUSH
17660: LD_INT 2
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 1
17669: PUSH
17670: LD_INT 2
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 0
17679: PUSH
17680: LD_INT 2
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 1
17689: NEG
17690: PUSH
17691: LD_INT 1
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 2
17700: NEG
17701: PUSH
17702: LD_INT 0
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 2
17711: NEG
17712: PUSH
17713: LD_INT 1
17715: NEG
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 2
17723: NEG
17724: PUSH
17725: LD_INT 2
17727: NEG
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 1
17735: PUSH
17736: LD_INT 2
17738: NEG
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 2
17746: PUSH
17747: LD_INT 1
17749: NEG
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 3
17757: PUSH
17758: LD_INT 1
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 3
17767: PUSH
17768: LD_INT 2
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17800: LD_ADDR_VAR 0 25
17804: PUSH
17805: LD_INT 0
17807: PUSH
17808: LD_INT 0
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 0
17817: PUSH
17818: LD_INT 1
17820: NEG
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 1
17828: PUSH
17829: LD_INT 0
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 1
17838: PUSH
17839: LD_INT 1
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: LD_INT 1
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 1
17858: NEG
17859: PUSH
17860: LD_INT 0
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 1
17869: NEG
17870: PUSH
17871: LD_INT 1
17873: NEG
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 1
17881: NEG
17882: PUSH
17883: LD_INT 2
17885: NEG
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 0
17893: PUSH
17894: LD_INT 2
17896: NEG
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 1
17904: PUSH
17905: LD_INT 1
17907: NEG
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 2
17915: PUSH
17916: LD_INT 0
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 2
17925: PUSH
17926: LD_INT 1
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: LD_INT 2
17935: PUSH
17936: LD_INT 2
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: LD_INT 2
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 0
17955: PUSH
17956: LD_INT 2
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 1
17965: NEG
17966: PUSH
17967: LD_INT 1
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 2
17976: NEG
17977: PUSH
17978: LD_INT 0
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 2
17987: NEG
17988: PUSH
17989: LD_INT 1
17991: NEG
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 2
17999: NEG
18000: PUSH
18001: LD_INT 2
18003: NEG
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 3
18011: PUSH
18012: LD_INT 1
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 3
18021: PUSH
18022: LD_INT 2
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 2
18031: PUSH
18032: LD_INT 3
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: LD_INT 3
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18074: LD_ADDR_VAR 0 26
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: LD_INT 0
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 0
18091: PUSH
18092: LD_INT 1
18094: NEG
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 1
18102: PUSH
18103: LD_INT 0
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: LD_INT 1
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 0
18122: PUSH
18123: LD_INT 1
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 1
18132: NEG
18133: PUSH
18134: LD_INT 0
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 1
18143: NEG
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 1
18155: NEG
18156: PUSH
18157: LD_INT 2
18159: NEG
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 2
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: LD_INT 1
18181: NEG
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 2
18189: PUSH
18190: LD_INT 0
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 2
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 2
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: LD_INT 2
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 1
18239: NEG
18240: PUSH
18241: LD_INT 1
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 2
18250: NEG
18251: PUSH
18252: LD_INT 0
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 2
18261: NEG
18262: PUSH
18263: LD_INT 1
18265: NEG
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: LD_INT 2
18277: NEG
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: LD_INT 3
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: LD_INT 3
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 1
18305: NEG
18306: PUSH
18307: LD_INT 2
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 2
18316: NEG
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18350: LD_ADDR_VAR 0 27
18354: PUSH
18355: LD_INT 0
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: LD_INT 1
18370: NEG
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 1
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 1
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: LD_INT 1
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: NEG
18409: PUSH
18410: LD_INT 0
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 1
18419: NEG
18420: PUSH
18421: LD_INT 1
18423: NEG
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 1
18431: NEG
18432: PUSH
18433: LD_INT 2
18435: NEG
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 0
18443: PUSH
18444: LD_INT 2
18446: NEG
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: LD_INT 1
18457: NEG
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: LD_INT 2
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 2
18475: PUSH
18476: LD_INT 1
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 2
18485: PUSH
18486: LD_INT 2
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: LD_INT 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 0
18505: PUSH
18506: LD_INT 2
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 1
18515: NEG
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 2
18526: NEG
18527: PUSH
18528: LD_INT 0
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 2
18537: NEG
18538: PUSH
18539: LD_INT 1
18541: NEG
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 2
18549: NEG
18550: PUSH
18551: LD_INT 2
18553: NEG
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 1
18561: NEG
18562: PUSH
18563: LD_INT 2
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 2
18572: NEG
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 3
18583: NEG
18584: PUSH
18585: LD_INT 1
18587: NEG
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 3
18595: NEG
18596: PUSH
18597: LD_INT 2
18599: NEG
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18630: LD_ADDR_VAR 0 28
18634: PUSH
18635: LD_INT 0
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: LD_INT 1
18650: NEG
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 1
18658: PUSH
18659: LD_INT 0
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: LD_INT 1
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 0
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 1
18688: NEG
18689: PUSH
18690: LD_INT 0
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 1
18699: NEG
18700: PUSH
18701: LD_INT 1
18703: NEG
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: LD_INT 2
18715: NEG
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: LD_INT 2
18726: NEG
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 1
18734: PUSH
18735: LD_INT 1
18737: NEG
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: LD_INT 0
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 2
18755: PUSH
18756: LD_INT 1
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 2
18765: PUSH
18766: LD_INT 2
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 0
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 1
18795: NEG
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 2
18806: NEG
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 2
18817: NEG
18818: PUSH
18819: LD_INT 1
18821: NEG
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 2
18829: NEG
18830: PUSH
18831: LD_INT 2
18833: NEG
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 2
18841: NEG
18842: PUSH
18843: LD_INT 3
18845: NEG
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 1
18853: NEG
18854: PUSH
18855: LD_INT 3
18857: NEG
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 3
18865: NEG
18866: PUSH
18867: LD_INT 1
18869: NEG
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 3
18877: NEG
18878: PUSH
18879: LD_INT 2
18881: NEG
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18912: LD_ADDR_VAR 0 29
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 0
18929: PUSH
18930: LD_INT 1
18932: NEG
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: LD_INT 1
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 1
18970: NEG
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: NEG
18982: PUSH
18983: LD_INT 1
18985: NEG
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 1
18993: NEG
18994: PUSH
18995: LD_INT 2
18997: NEG
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 0
19005: PUSH
19006: LD_INT 2
19008: NEG
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: LD_INT 1
19019: NEG
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 0
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 2
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: LD_INT 1
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 2
19078: NEG
19079: PUSH
19080: LD_INT 1
19082: NEG
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 2
19090: NEG
19091: PUSH
19092: LD_INT 2
19094: NEG
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 2
19102: NEG
19103: PUSH
19104: LD_INT 3
19106: NEG
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 2
19114: PUSH
19115: LD_INT 1
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 3
19125: PUSH
19126: LD_INT 1
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: LD_INT 3
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: NEG
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 3
19156: NEG
19157: PUSH
19158: LD_INT 2
19160: NEG
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19191: LD_ADDR_VAR 0 30
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 0
19208: PUSH
19209: LD_INT 1
19211: NEG
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: PUSH
19220: LD_INT 0
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 1
19249: NEG
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: LD_INT 1
19264: NEG
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: NEG
19273: PUSH
19274: LD_INT 2
19276: NEG
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: LD_INT 2
19287: NEG
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 2
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 2
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: NEG
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: NEG
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: LD_INT 1
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: LD_INT 3
19384: NEG
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: LD_INT 2
19395: NEG
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 3
19403: PUSH
19404: LD_INT 2
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 2
19413: PUSH
19414: LD_INT 3
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 2
19423: NEG
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 3
19434: NEG
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19469: LD_ADDR_VAR 0 31
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: LD_INT 1
19489: NEG
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 1
19538: NEG
19539: PUSH
19540: LD_INT 1
19542: NEG
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: LD_INT 2
19554: NEG
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: LD_INT 1
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 2
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: LD_INT 2
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: LD_INT 2
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: LD_INT 1
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 2
19634: NEG
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 2
19646: NEG
19647: PUSH
19648: LD_INT 2
19650: NEG
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 2
19658: NEG
19659: PUSH
19660: LD_INT 3
19662: NEG
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 2
19670: PUSH
19671: LD_INT 1
19673: NEG
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 3
19681: PUSH
19682: LD_INT 1
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: LD_INT 3
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 1
19701: NEG
19702: PUSH
19703: LD_INT 2
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 3
19712: NEG
19713: PUSH
19714: LD_INT 2
19716: NEG
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19747: LD_ADDR_VAR 0 32
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: LD_INT 0
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 0
19764: PUSH
19765: LD_INT 1
19767: NEG
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: LD_INT 0
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: LD_INT 0
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 1
19816: NEG
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: NEG
19829: PUSH
19830: LD_INT 2
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: LD_INT 2
19843: NEG
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: LD_INT 1
19854: NEG
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: LD_INT 1
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 1
19882: PUSH
19883: LD_INT 2
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 0
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 1
19902: NEG
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 2
19913: NEG
19914: PUSH
19915: LD_INT 0
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 2
19924: NEG
19925: PUSH
19926: LD_INT 1
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: NEG
19937: PUSH
19938: LD_INT 3
19940: NEG
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: LD_INT 2
19951: NEG
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 3
19959: PUSH
19960: LD_INT 2
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 2
19969: PUSH
19970: LD_INT 3
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 2
19979: NEG
19980: PUSH
19981: LD_INT 1
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 3
19990: NEG
19991: PUSH
19992: LD_INT 1
19994: NEG
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20025: LD_ADDR_VAR 0 33
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 0
20042: PUSH
20043: LD_INT 1
20045: NEG
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 1
20053: PUSH
20054: LD_INT 0
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: LD_INT 1
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: LD_INT 1
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: LD_INT 0
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 1
20094: NEG
20095: PUSH
20096: LD_INT 1
20098: NEG
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 1
20106: NEG
20107: PUSH
20108: LD_INT 2
20110: NEG
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: LD_INT 1
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 1
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 2
20180: NEG
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 2
20191: NEG
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 2
20203: NEG
20204: PUSH
20205: LD_INT 2
20207: NEG
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: LD_INT 3
20219: NEG
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: LD_INT 1
20230: NEG
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 3
20238: PUSH
20239: LD_INT 1
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 1
20248: PUSH
20249: LD_INT 3
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 1
20258: NEG
20259: PUSH
20260: LD_INT 2
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 3
20269: NEG
20270: PUSH
20271: LD_INT 2
20273: NEG
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20304: LD_ADDR_VAR 0 34
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: LD_INT 0
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 0
20321: PUSH
20322: LD_INT 1
20324: NEG
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 1
20332: PUSH
20333: LD_INT 0
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 1
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 0
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 1
20362: NEG
20363: PUSH
20364: LD_INT 0
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 1
20373: NEG
20374: PUSH
20375: LD_INT 1
20377: NEG
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 1
20385: NEG
20386: PUSH
20387: LD_INT 2
20389: NEG
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: LD_INT 2
20400: NEG
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 1
20408: PUSH
20409: LD_INT 1
20411: NEG
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 2
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 2
20429: PUSH
20430: LD_INT 2
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 1
20439: PUSH
20440: LD_INT 2
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 1
20449: NEG
20450: PUSH
20451: LD_INT 1
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 2
20460: NEG
20461: PUSH
20462: LD_INT 0
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 2
20471: NEG
20472: PUSH
20473: LD_INT 1
20475: NEG
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 2
20483: NEG
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 1
20495: NEG
20496: PUSH
20497: LD_INT 3
20499: NEG
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: LD_INT 2
20510: NEG
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 3
20518: PUSH
20519: LD_INT 2
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: LD_INT 3
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 2
20538: NEG
20539: PUSH
20540: LD_INT 1
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 3
20549: NEG
20550: PUSH
20551: LD_INT 1
20553: NEG
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20584: LD_ADDR_VAR 0 35
20588: PUSH
20589: LD_INT 0
20591: PUSH
20592: LD_INT 0
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: LD_INT 1
20604: NEG
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 1
20612: PUSH
20613: LD_INT 0
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 1
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 0
20632: PUSH
20633: LD_INT 1
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 1
20642: NEG
20643: PUSH
20644: LD_INT 0
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 1
20653: NEG
20654: PUSH
20655: LD_INT 1
20657: NEG
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 1
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: NEG
20676: PUSH
20677: LD_INT 1
20679: NEG
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20696: LD_ADDR_VAR 0 36
20700: PUSH
20701: LD_INT 0
20703: PUSH
20704: LD_INT 0
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 0
20713: PUSH
20714: LD_INT 1
20716: NEG
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 1
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 1
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 0
20744: PUSH
20745: LD_INT 1
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 1
20754: NEG
20755: PUSH
20756: LD_INT 0
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 1
20765: NEG
20766: PUSH
20767: LD_INT 1
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 1
20777: NEG
20778: PUSH
20779: LD_INT 2
20781: NEG
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20808: LD_ADDR_VAR 0 37
20812: PUSH
20813: LD_INT 0
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 0
20825: PUSH
20826: LD_INT 1
20828: NEG
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: LD_INT 0
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 1
20866: NEG
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: LD_INT 1
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: NEG
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20920: LD_ADDR_VAR 0 38
20924: PUSH
20925: LD_INT 0
20927: PUSH
20928: LD_INT 0
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 0
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 1
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 1
20958: PUSH
20959: LD_INT 1
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 0
20968: PUSH
20969: LD_INT 1
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 1
20978: NEG
20979: PUSH
20980: LD_INT 0
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 1
20989: NEG
20990: PUSH
20991: LD_INT 1
20993: NEG
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 2
21001: PUSH
21002: LD_INT 1
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 2
21011: NEG
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21032: LD_ADDR_VAR 0 39
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: LD_INT 0
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: LD_INT 1
21052: NEG
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 1
21060: PUSH
21061: LD_INT 0
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: PUSH
21071: LD_INT 1
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 1
21090: NEG
21091: PUSH
21092: LD_INT 0
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: NEG
21102: PUSH
21103: LD_INT 1
21105: NEG
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 1
21113: NEG
21114: PUSH
21115: LD_INT 2
21117: NEG
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: LD_INT 2
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21144: LD_ADDR_VAR 0 40
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: LD_INT 0
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 0
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 1
21172: PUSH
21173: LD_INT 0
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 0
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 1
21202: NEG
21203: PUSH
21204: LD_INT 0
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 1
21213: NEG
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 1
21236: NEG
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21256: LD_ADDR_VAR 0 41
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 0
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: LD_INT 0
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: LD_INT 1
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 0
21304: PUSH
21305: LD_INT 1
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: NEG
21315: PUSH
21316: LD_INT 0
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 1
21325: NEG
21326: PUSH
21327: LD_INT 1
21329: NEG
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 1
21337: NEG
21338: PUSH
21339: LD_INT 2
21341: NEG
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 1
21349: PUSH
21350: LD_INT 1
21352: NEG
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 2
21370: PUSH
21371: LD_INT 1
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 2
21380: PUSH
21381: LD_INT 2
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: NEG
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: NEG
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 2
21422: NEG
21423: PUSH
21424: LD_INT 1
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 2
21434: NEG
21435: PUSH
21436: LD_INT 2
21438: NEG
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 2
21446: NEG
21447: PUSH
21448: LD_INT 3
21450: NEG
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 2
21458: PUSH
21459: LD_INT 1
21461: NEG
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 3
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 3
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 3
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 3
21499: PUSH
21500: LD_INT 3
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 2
21509: PUSH
21510: LD_INT 3
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 2
21519: NEG
21520: PUSH
21521: LD_INT 1
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 3
21530: NEG
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 3
21541: NEG
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 3
21553: NEG
21554: PUSH
21555: LD_INT 2
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 3
21565: NEG
21566: PUSH
21567: LD_INT 3
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21606: LD_ADDR_VAR 0 42
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: LD_INT 0
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 1
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 1
21664: NEG
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 1
21675: NEG
21676: PUSH
21677: LD_INT 1
21679: NEG
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: LD_INT 2
21691: NEG
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 0
21699: PUSH
21700: LD_INT 2
21702: NEG
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: LD_INT 1
21713: NEG
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 2
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 0
21751: PUSH
21752: LD_INT 2
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 1
21761: NEG
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 2
21772: NEG
21773: PUSH
21774: LD_INT 1
21776: NEG
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 2
21784: NEG
21785: PUSH
21786: LD_INT 2
21788: NEG
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 2
21796: NEG
21797: PUSH
21798: LD_INT 3
21800: NEG
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 1
21808: NEG
21809: PUSH
21810: LD_INT 3
21812: NEG
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 0
21820: PUSH
21821: LD_INT 3
21823: NEG
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: LD_INT 2
21834: NEG
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 3
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 3
21852: PUSH
21853: LD_INT 3
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 2
21862: PUSH
21863: LD_INT 3
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: LD_INT 3
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 0
21882: PUSH
21883: LD_INT 3
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: LD_INT 2
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 3
21903: NEG
21904: PUSH
21905: LD_INT 2
21907: NEG
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 3
21915: NEG
21916: PUSH
21917: LD_INT 3
21919: NEG
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21956: LD_ADDR_VAR 0 43
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: LD_INT 0
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 0
21973: PUSH
21974: LD_INT 1
21976: NEG
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 1
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 0
22004: PUSH
22005: LD_INT 1
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: NEG
22015: PUSH
22016: LD_INT 0
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 1
22025: NEG
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 1
22037: NEG
22038: PUSH
22039: LD_INT 2
22041: NEG
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: LD_INT 2
22052: NEG
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 1
22060: PUSH
22061: LD_INT 1
22063: NEG
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 2
22071: PUSH
22072: LD_INT 0
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 2
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: LD_INT 2
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 1
22111: NEG
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 2
22122: NEG
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 2
22133: NEG
22134: PUSH
22135: LD_INT 1
22137: NEG
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 1
22145: NEG
22146: PUSH
22147: LD_INT 3
22149: NEG
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: LD_INT 3
22160: NEG
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: LD_INT 2
22171: NEG
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 3
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 3
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 1
22210: PUSH
22211: LD_INT 3
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: LD_INT 3
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: NEG
22231: PUSH
22232: LD_INT 2
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 2
22241: NEG
22242: PUSH
22243: LD_INT 1
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 3
22252: NEG
22253: PUSH
22254: LD_INT 0
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 3
22263: NEG
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22304: LD_ADDR_VAR 0 44
22308: PUSH
22309: LD_INT 0
22311: PUSH
22312: LD_INT 0
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 0
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: PUSH
22343: LD_INT 1
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 0
22352: PUSH
22353: LD_INT 1
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 1
22362: NEG
22363: PUSH
22364: LD_INT 0
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 1
22373: NEG
22374: PUSH
22375: LD_INT 1
22377: NEG
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 1
22385: NEG
22386: PUSH
22387: LD_INT 2
22389: NEG
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 1
22397: PUSH
22398: LD_INT 1
22400: NEG
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: LD_INT 0
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: LD_INT 1
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 2
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 1
22448: NEG
22449: PUSH
22450: LD_INT 1
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 2
22459: NEG
22460: PUSH
22461: LD_INT 0
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 2
22470: NEG
22471: PUSH
22472: LD_INT 1
22474: NEG
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 2
22482: NEG
22483: PUSH
22484: LD_INT 2
22486: NEG
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 2
22494: NEG
22495: PUSH
22496: LD_INT 3
22498: NEG
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 2
22506: PUSH
22507: LD_INT 1
22509: NEG
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 3
22517: PUSH
22518: LD_INT 0
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 3
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 3
22537: PUSH
22538: LD_INT 2
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 3
22547: PUSH
22548: LD_INT 3
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 2
22557: PUSH
22558: LD_INT 3
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 2
22567: NEG
22568: PUSH
22569: LD_INT 1
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 3
22578: NEG
22579: PUSH
22580: LD_INT 0
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 3
22589: NEG
22590: PUSH
22591: LD_INT 1
22593: NEG
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 3
22601: NEG
22602: PUSH
22603: LD_INT 2
22605: NEG
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 3
22613: NEG
22614: PUSH
22615: LD_INT 3
22617: NEG
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22654: LD_ADDR_VAR 0 45
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 0
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 1
22682: PUSH
22683: LD_INT 0
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 0
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 1
22712: NEG
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 1
22723: NEG
22724: PUSH
22725: LD_INT 1
22727: NEG
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 1
22735: NEG
22736: PUSH
22737: LD_INT 2
22739: NEG
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: LD_INT 2
22750: NEG
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 1
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 1
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 2
22779: PUSH
22780: LD_INT 2
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 0
22799: PUSH
22800: LD_INT 2
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 1
22809: NEG
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 2
22820: NEG
22821: PUSH
22822: LD_INT 1
22824: NEG
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 2
22832: NEG
22833: PUSH
22834: LD_INT 2
22836: NEG
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 2
22844: NEG
22845: PUSH
22846: LD_INT 3
22848: NEG
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 1
22856: NEG
22857: PUSH
22858: LD_INT 3
22860: NEG
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 0
22868: PUSH
22869: LD_INT 3
22871: NEG
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: LD_INT 2
22882: NEG
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 3
22890: PUSH
22891: LD_INT 2
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 3
22900: PUSH
22901: LD_INT 3
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: LD_INT 3
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: LD_INT 3
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: LD_INT 3
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 1
22940: NEG
22941: PUSH
22942: LD_INT 2
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 3
22951: NEG
22952: PUSH
22953: LD_INT 2
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 3
22963: NEG
22964: PUSH
22965: LD_INT 3
22967: NEG
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23004: LD_ADDR_VAR 0 46
23008: PUSH
23009: LD_INT 0
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 0
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: PUSH
23033: LD_INT 0
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 1
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 0
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: LD_INT 0
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: LD_INT 1
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 1
23085: NEG
23086: PUSH
23087: LD_INT 2
23089: NEG
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 0
23097: PUSH
23098: LD_INT 2
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 1
23108: PUSH
23109: LD_INT 1
23111: NEG
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: LD_INT 0
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: LD_INT 1
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 1
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: LD_INT 2
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 1
23159: NEG
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 2
23170: NEG
23171: PUSH
23172: LD_INT 0
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 2
23181: NEG
23182: PUSH
23183: LD_INT 1
23185: NEG
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 1
23193: NEG
23194: PUSH
23195: LD_INT 3
23197: NEG
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: LD_INT 3
23208: NEG
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: LD_INT 2
23219: NEG
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 2
23227: PUSH
23228: LD_INT 1
23230: NEG
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 3
23238: PUSH
23239: LD_INT 0
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 3
23248: PUSH
23249: LD_INT 1
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 1
23258: PUSH
23259: LD_INT 3
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 0
23268: PUSH
23269: LD_INT 3
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: LD_INT 2
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: NEG
23290: PUSH
23291: LD_INT 1
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 3
23300: NEG
23301: PUSH
23302: LD_INT 0
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 3
23311: NEG
23312: PUSH
23313: LD_INT 1
23315: NEG
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23352: LD_ADDR_VAR 0 47
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 0
23369: PUSH
23370: LD_INT 1
23372: NEG
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: LD_INT 1
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 0
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: LD_INT 0
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: LD_INT 1
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 1
23433: NEG
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: LD_INT 2
23448: NEG
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 1
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 2
23467: NEG
23468: PUSH
23469: LD_INT 1
23471: NEG
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 2
23479: NEG
23480: PUSH
23481: LD_INT 2
23483: NEG
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23503: LD_ADDR_VAR 0 48
23507: PUSH
23508: LD_INT 0
23510: PUSH
23511: LD_INT 0
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 0
23520: PUSH
23521: LD_INT 1
23523: NEG
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 1
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 1
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 0
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 1
23561: NEG
23562: PUSH
23563: LD_INT 0
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 1
23572: NEG
23573: PUSH
23574: LD_INT 1
23576: NEG
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 1
23584: NEG
23585: PUSH
23586: LD_INT 2
23588: NEG
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: LD_INT 0
23596: PUSH
23597: LD_INT 2
23599: NEG
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 2
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23650: LD_ADDR_VAR 0 49
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: NEG
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 2
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: LD_INT 2
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23794: LD_ADDR_VAR 0 50
23798: PUSH
23799: LD_INT 0
23801: PUSH
23802: LD_INT 0
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 0
23811: PUSH
23812: LD_INT 1
23814: NEG
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 1
23832: PUSH
23833: LD_INT 1
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 0
23842: PUSH
23843: LD_INT 1
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 1
23852: NEG
23853: PUSH
23854: LD_INT 0
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 1
23863: NEG
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 2
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 2
23885: PUSH
23886: LD_INT 2
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: LD_INT 2
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 1
23915: NEG
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23938: LD_ADDR_VAR 0 51
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 0
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 1
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: LD_INT 1
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: NEG
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 1
24007: NEG
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: LD_INT 2
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 1
24039: NEG
24040: PUSH
24041: LD_INT 1
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 2
24050: NEG
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 2
24061: NEG
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24085: LD_ADDR_VAR 0 52
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: LD_INT 0
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: LD_INT 1
24158: NEG
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 1
24166: NEG
24167: PUSH
24168: LD_INT 2
24170: NEG
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: NEG
24179: PUSH
24180: LD_INT 1
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 2
24189: NEG
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 2
24200: NEG
24201: PUSH
24202: LD_INT 1
24204: NEG
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 2
24212: NEG
24213: PUSH
24214: LD_INT 2
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24236: LD_ADDR_VAR 0 53
24240: PUSH
24241: LD_INT 0
24243: PUSH
24244: LD_INT 0
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: LD_INT 1
24256: NEG
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: LD_INT 0
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 1
24274: PUSH
24275: LD_INT 1
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 0
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 1
24294: NEG
24295: PUSH
24296: LD_INT 0
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 1
24305: NEG
24306: PUSH
24307: LD_INT 1
24309: NEG
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 1
24317: NEG
24318: PUSH
24319: LD_INT 2
24321: NEG
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: LD_INT 2
24332: NEG
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 1
24340: PUSH
24341: LD_INT 1
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 2
24351: PUSH
24352: LD_INT 0
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 2
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: LD_INT 2
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 1
24401: NEG
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 2
24412: NEG
24413: PUSH
24414: LD_INT 0
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 2
24423: NEG
24424: PUSH
24425: LD_INT 1
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 2
24435: NEG
24436: PUSH
24437: LD_INT 2
24439: NEG
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24466: LD_ADDR_VAR 0 54
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: LD_INT 1
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: LD_INT 0
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: LD_INT 1
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 0
24514: PUSH
24515: LD_INT 1
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 1
24524: NEG
24525: PUSH
24526: LD_INT 0
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 1
24535: NEG
24536: PUSH
24537: LD_INT 1
24539: NEG
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 1
24547: NEG
24548: PUSH
24549: LD_INT 2
24551: NEG
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: LD_INT 2
24562: NEG
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 2
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 2
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 2
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 1
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 2
24642: NEG
24643: PUSH
24644: LD_INT 0
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 2
24653: NEG
24654: PUSH
24655: LD_INT 1
24657: NEG
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 2
24665: NEG
24666: PUSH
24667: LD_INT 2
24669: NEG
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24696: LD_ADDR_VAR 0 55
24700: PUSH
24701: LD_INT 0
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: LD_INT 0
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 1
24754: NEG
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PUSH
24767: LD_INT 1
24769: NEG
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: LD_INT 2
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: LD_INT 2
24792: NEG
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 2
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 2
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: LD_INT 2
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: LD_INT 2
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 0
24851: PUSH
24852: LD_INT 2
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 1
24861: NEG
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 2
24872: NEG
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 2
24883: NEG
24884: PUSH
24885: LD_INT 1
24887: NEG
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 2
24895: NEG
24896: PUSH
24897: LD_INT 2
24899: NEG
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24926: LD_ADDR_VAR 0 56
24930: PUSH
24931: LD_INT 0
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: LD_INT 0
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: LD_INT 1
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 1
24984: NEG
24985: PUSH
24986: LD_INT 0
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: LD_INT 1
24999: NEG
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: LD_INT 2
25011: NEG
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: LD_INT 2
25022: NEG
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 2
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 2
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 2
25061: PUSH
25062: LD_INT 2
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: LD_INT 2
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 0
25081: PUSH
25082: LD_INT 2
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 1
25091: NEG
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 2
25102: NEG
25103: PUSH
25104: LD_INT 0
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 2
25113: NEG
25114: PUSH
25115: LD_INT 1
25117: NEG
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 2
25125: NEG
25126: PUSH
25127: LD_INT 2
25129: NEG
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25156: LD_ADDR_VAR 0 57
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 0
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 1
25225: NEG
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 0
25249: PUSH
25250: LD_INT 2
25252: NEG
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 2
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 2
25291: PUSH
25292: LD_INT 2
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: LD_INT 2
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 0
25311: PUSH
25312: LD_INT 2
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 1
25321: NEG
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 2
25332: NEG
25333: PUSH
25334: LD_INT 0
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 2
25343: NEG
25344: PUSH
25345: LD_INT 1
25347: NEG
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 2
25355: NEG
25356: PUSH
25357: LD_INT 2
25359: NEG
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25386: LD_ADDR_VAR 0 58
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 0
25403: PUSH
25404: LD_INT 1
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 0
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: NEG
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 1
25455: NEG
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: LD_INT 2
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: LD_INT 2
25482: NEG
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 1
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 2
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 2
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: PUSH
25532: LD_INT 2
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: LD_INT 2
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 1
25551: NEG
25552: PUSH
25553: LD_INT 1
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 2
25562: NEG
25563: PUSH
25564: LD_INT 0
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 2
25573: NEG
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 2
25585: NEG
25586: PUSH
25587: LD_INT 2
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25616: LD_ADDR_VAR 0 59
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: LD_INT 0
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: LD_INT 1
25636: NEG
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: LD_INT 1
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 0
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: LD_INT 1
25689: NEG
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25704: LD_ADDR_VAR 0 60
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 1
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 0
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: NEG
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 1
25773: NEG
25774: PUSH
25775: LD_INT 1
25777: NEG
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25792: LD_ADDR_VAR 0 61
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: LD_INT 0
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 0
25809: PUSH
25810: LD_INT 1
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 1
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 1
25850: NEG
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25880: LD_ADDR_VAR 0 62
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: LD_INT 1
25900: NEG
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 0
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25968: LD_ADDR_VAR 0 63
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: LD_INT 1
25988: NEG
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 1
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 1
26026: NEG
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26056: LD_ADDR_VAR 0 64
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: LD_INT 1
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: LD_INT 1
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 0
26104: PUSH
26105: LD_INT 1
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 1
26114: NEG
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: LD_INT 1
26129: NEG
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: ST_TO_ADDR
// end ; 1 :
26144: GO 32041
26146: LD_INT 1
26148: DOUBLE
26149: EQUAL
26150: IFTRUE 26154
26152: GO 28777
26154: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26155: LD_ADDR_VAR 0 11
26159: PUSH
26160: LD_INT 1
26162: NEG
26163: PUSH
26164: LD_INT 3
26166: NEG
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: LD_INT 3
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: LD_INT 2
26188: NEG
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: LIST
26198: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26199: LD_ADDR_VAR 0 12
26203: PUSH
26204: LD_INT 2
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 3
26217: PUSH
26218: LD_INT 0
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 3
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26240: LD_ADDR_VAR 0 13
26244: PUSH
26245: LD_INT 3
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 3
26257: PUSH
26258: LD_INT 3
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: LD_INT 3
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26280: LD_ADDR_VAR 0 14
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: LD_INT 3
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 0
26297: PUSH
26298: LD_INT 3
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: LD_INT 2
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: LIST
26320: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26321: LD_ADDR_VAR 0 15
26325: PUSH
26326: LD_INT 2
26328: NEG
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 3
26339: NEG
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 3
26350: NEG
26351: PUSH
26352: LD_INT 1
26354: NEG
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: LIST
26364: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26365: LD_ADDR_VAR 0 16
26369: PUSH
26370: LD_INT 2
26372: NEG
26373: PUSH
26374: LD_INT 3
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 3
26384: NEG
26385: PUSH
26386: LD_INT 2
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 3
26396: NEG
26397: PUSH
26398: LD_INT 3
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: LIST
26410: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26411: LD_ADDR_VAR 0 17
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: LD_INT 3
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: LD_INT 3
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: PUSH
26442: LD_INT 2
26444: NEG
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: LIST
26454: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26455: LD_ADDR_VAR 0 18
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 3
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 3
26483: PUSH
26484: LD_INT 1
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26496: LD_ADDR_VAR 0 19
26500: PUSH
26501: LD_INT 3
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 3
26513: PUSH
26514: LD_INT 3
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: LD_INT 3
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: LIST
26535: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26536: LD_ADDR_VAR 0 20
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: LD_INT 3
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 0
26553: PUSH
26554: LD_INT 3
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: LIST
26576: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26577: LD_ADDR_VAR 0 21
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: LD_INT 1
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 3
26595: NEG
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 3
26606: NEG
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: LIST
26620: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26621: LD_ADDR_VAR 0 22
26625: PUSH
26626: LD_INT 2
26628: NEG
26629: PUSH
26630: LD_INT 3
26632: NEG
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 3
26640: NEG
26641: PUSH
26642: LD_INT 2
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 3
26652: NEG
26653: PUSH
26654: LD_INT 3
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: LIST
26666: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26667: LD_ADDR_VAR 0 23
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: LD_INT 3
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: LD_INT 4
26689: NEG
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: LD_INT 3
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26711: LD_ADDR_VAR 0 24
26715: PUSH
26716: LD_INT 3
26718: PUSH
26719: LD_INT 0
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 3
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 4
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: LIST
26751: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26752: LD_ADDR_VAR 0 25
26756: PUSH
26757: LD_INT 3
26759: PUSH
26760: LD_INT 3
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 4
26769: PUSH
26770: LD_INT 3
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 3
26779: PUSH
26780: LD_INT 4
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: LIST
26791: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26792: LD_ADDR_VAR 0 26
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: LD_INT 3
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: LD_INT 4
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: LD_INT 3
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: LIST
26832: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26833: LD_ADDR_VAR 0 27
26837: PUSH
26838: LD_INT 3
26840: NEG
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 3
26851: NEG
26852: PUSH
26853: LD_INT 1
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 4
26862: NEG
26863: PUSH
26864: LD_INT 1
26866: NEG
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: LIST
26876: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26877: LD_ADDR_VAR 0 28
26881: PUSH
26882: LD_INT 3
26884: NEG
26885: PUSH
26886: LD_INT 3
26888: NEG
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 3
26896: NEG
26897: PUSH
26898: LD_INT 4
26900: NEG
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 4
26908: NEG
26909: PUSH
26910: LD_INT 3
26912: NEG
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26923: LD_ADDR_VAR 0 29
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: LD_INT 3
26934: NEG
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: LD_INT 3
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: LD_INT 2
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: NEG
26965: PUSH
26966: LD_INT 4
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: LD_INT 4
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: LD_INT 3
26990: NEG
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 1
26998: NEG
26999: PUSH
27000: LD_INT 5
27002: NEG
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: LD_INT 5
27013: NEG
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: LD_INT 4
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: LD_INT 6
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 6
27047: NEG
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: LD_INT 5
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27078: LD_ADDR_VAR 0 30
27082: PUSH
27083: LD_INT 2
27085: PUSH
27086: LD_INT 1
27088: NEG
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 3
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 3
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 3
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 4
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 4
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 4
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 5
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 5
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 5
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 6
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 6
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27221: LD_ADDR_VAR 0 31
27225: PUSH
27226: LD_INT 3
27228: PUSH
27229: LD_INT 2
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 3
27238: PUSH
27239: LD_INT 3
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 2
27248: PUSH
27249: LD_INT 3
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 4
27258: PUSH
27259: LD_INT 3
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 4
27268: PUSH
27269: LD_INT 4
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 3
27278: PUSH
27279: LD_INT 4
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 5
27288: PUSH
27289: LD_INT 4
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 5
27298: PUSH
27299: LD_INT 5
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 4
27308: PUSH
27309: LD_INT 5
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 6
27318: PUSH
27319: LD_INT 5
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 6
27328: PUSH
27329: LD_INT 6
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 5
27338: PUSH
27339: LD_INT 6
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27360: LD_ADDR_VAR 0 32
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: LD_INT 3
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: LD_INT 3
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: LD_INT 4
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: LD_INT 4
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: LD_INT 3
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: PUSH
27430: LD_INT 5
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: LD_INT 5
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: PUSH
27451: LD_INT 4
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: LD_INT 6
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 6
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 1
27480: NEG
27481: PUSH
27482: LD_INT 5
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27503: LD_ADDR_VAR 0 33
27507: PUSH
27508: LD_INT 2
27510: NEG
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 3
27521: NEG
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 3
27532: NEG
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 3
27544: NEG
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 4
27555: NEG
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 4
27566: NEG
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 4
27578: NEG
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 5
27589: NEG
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 5
27600: NEG
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 5
27612: NEG
27613: PUSH
27614: LD_INT 1
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 6
27623: NEG
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 6
27634: NEG
27635: PUSH
27636: LD_INT 1
27638: NEG
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27658: LD_ADDR_VAR 0 34
27662: PUSH
27663: LD_INT 2
27665: NEG
27666: PUSH
27667: LD_INT 3
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 3
27677: NEG
27678: PUSH
27679: LD_INT 2
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 3
27689: NEG
27690: PUSH
27691: LD_INT 3
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 3
27701: NEG
27702: PUSH
27703: LD_INT 4
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 4
27713: NEG
27714: PUSH
27715: LD_INT 3
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 4
27725: NEG
27726: PUSH
27727: LD_INT 4
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 4
27737: NEG
27738: PUSH
27739: LD_INT 5
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 5
27749: NEG
27750: PUSH
27751: LD_INT 4
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 5
27761: NEG
27762: PUSH
27763: LD_INT 5
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 5
27773: NEG
27774: PUSH
27775: LD_INT 6
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 6
27785: NEG
27786: PUSH
27787: LD_INT 5
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 6
27797: NEG
27798: PUSH
27799: LD_INT 6
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27821: LD_ADDR_VAR 0 41
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: LD_INT 2
27831: NEG
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: LD_INT 3
27843: NEG
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: PUSH
27852: LD_INT 2
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: LIST
27864: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27865: LD_ADDR_VAR 0 42
27869: PUSH
27870: LD_INT 2
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 2
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 3
27893: PUSH
27894: LD_INT 1
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27906: LD_ADDR_VAR 0 43
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 3
27923: PUSH
27924: LD_INT 2
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 2
27933: PUSH
27934: LD_INT 3
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: LIST
27945: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27946: LD_ADDR_VAR 0 44
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: LD_INT 2
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: LD_INT 3
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: LIST
27986: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27987: LD_ADDR_VAR 0 45
27991: PUSH
27992: LD_INT 2
27994: NEG
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 2
28005: NEG
28006: PUSH
28007: LD_INT 1
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 3
28016: NEG
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28031: LD_ADDR_VAR 0 46
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: LD_INT 2
28042: NEG
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 2
28050: NEG
28051: PUSH
28052: LD_INT 3
28054: NEG
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 3
28062: NEG
28063: PUSH
28064: LD_INT 2
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: LIST
28076: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28077: LD_ADDR_VAR 0 47
28081: PUSH
28082: LD_INT 2
28084: NEG
28085: PUSH
28086: LD_INT 3
28088: NEG
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 1
28096: NEG
28097: PUSH
28098: LD_INT 3
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28110: LD_ADDR_VAR 0 48
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: LD_INT 2
28120: NEG
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 2
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28141: LD_ADDR_VAR 0 49
28145: PUSH
28146: LD_INT 3
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 3
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28170: LD_ADDR_VAR 0 50
28174: PUSH
28175: LD_INT 2
28177: PUSH
28178: LD_INT 3
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 1
28187: PUSH
28188: LD_INT 3
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28199: LD_ADDR_VAR 0 51
28203: PUSH
28204: LD_INT 1
28206: NEG
28207: PUSH
28208: LD_INT 2
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 2
28217: NEG
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28230: LD_ADDR_VAR 0 52
28234: PUSH
28235: LD_INT 3
28237: NEG
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 3
28249: NEG
28250: PUSH
28251: LD_INT 2
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28263: LD_ADDR_VAR 0 53
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: LD_INT 3
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 3
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28307: LD_ADDR_VAR 0 54
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 3
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 3
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: LIST
28347: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28348: LD_ADDR_VAR 0 55
28352: PUSH
28353: LD_INT 3
28355: PUSH
28356: LD_INT 2
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 3
28365: PUSH
28366: LD_INT 3
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 2
28375: PUSH
28376: LD_INT 3
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28388: LD_ADDR_VAR 0 56
28392: PUSH
28393: LD_INT 1
28395: PUSH
28396: LD_INT 3
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: LD_INT 3
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: LIST
28428: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28429: LD_ADDR_VAR 0 57
28433: PUSH
28434: LD_INT 2
28436: NEG
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 3
28447: NEG
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 3
28458: NEG
28459: PUSH
28460: LD_INT 1
28462: NEG
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: LIST
28472: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28473: LD_ADDR_VAR 0 58
28477: PUSH
28478: LD_INT 2
28480: NEG
28481: PUSH
28482: LD_INT 3
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 3
28492: NEG
28493: PUSH
28494: LD_INT 2
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 3
28504: NEG
28505: PUSH
28506: LD_INT 3
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28519: LD_ADDR_VAR 0 59
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: LD_INT 2
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: LD_INT 2
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28563: LD_ADDR_VAR 0 60
28567: PUSH
28568: LD_INT 1
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 2
28581: PUSH
28582: LD_INT 0
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 2
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28604: LD_ADDR_VAR 0 61
28608: PUSH
28609: LD_INT 2
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 2
28621: PUSH
28622: LD_INT 2
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: LD_INT 2
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28644: LD_ADDR_VAR 0 62
28648: PUSH
28649: LD_INT 1
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 0
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: LIST
28684: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28685: LD_ADDR_VAR 0 63
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: LD_INT 1
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: NEG
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 2
28714: NEG
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: LIST
28728: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28729: LD_ADDR_VAR 0 64
28733: PUSH
28734: LD_INT 1
28736: NEG
28737: PUSH
28738: LD_INT 2
28740: NEG
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 2
28748: NEG
28749: PUSH
28750: LD_INT 1
28752: NEG
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 2
28760: NEG
28761: PUSH
28762: LD_INT 2
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: ST_TO_ADDR
// end ; 2 :
28775: GO 32041
28777: LD_INT 2
28779: DOUBLE
28780: EQUAL
28781: IFTRUE 28785
28783: GO 32040
28785: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28786: LD_ADDR_VAR 0 29
28790: PUSH
28791: LD_INT 4
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 4
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 5
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 5
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 4
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 3
28844: PUSH
28845: LD_INT 0
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 3
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 3
28865: PUSH
28866: LD_INT 2
28868: NEG
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 5
28876: PUSH
28877: LD_INT 2
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 3
28886: PUSH
28887: LD_INT 3
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 3
28896: PUSH
28897: LD_INT 2
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 4
28906: PUSH
28907: LD_INT 3
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 4
28916: PUSH
28917: LD_INT 4
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 3
28926: PUSH
28927: LD_INT 4
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 2
28936: PUSH
28937: LD_INT 3
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 2
28946: PUSH
28947: LD_INT 2
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 4
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: LD_INT 4
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: LD_INT 4
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: LD_INT 3
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: LD_INT 4
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: LD_INT 5
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: LD_INT 5
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: NEG
29027: PUSH
29028: LD_INT 4
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 1
29037: NEG
29038: PUSH
29039: LD_INT 3
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 2
29048: PUSH
29049: LD_INT 5
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 2
29058: NEG
29059: PUSH
29060: LD_INT 3
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 3
29069: NEG
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 3
29080: NEG
29081: PUSH
29082: LD_INT 1
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 2
29092: NEG
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 2
29103: NEG
29104: PUSH
29105: LD_INT 1
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 3
29114: NEG
29115: PUSH
29116: LD_INT 1
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 4
29125: NEG
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 4
29136: NEG
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 4
29148: NEG
29149: PUSH
29150: LD_INT 2
29152: NEG
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 2
29160: NEG
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 4
29171: NEG
29172: PUSH
29173: LD_INT 4
29175: NEG
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 4
29183: NEG
29184: PUSH
29185: LD_INT 5
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 3
29195: NEG
29196: PUSH
29197: LD_INT 4
29199: NEG
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 3
29207: NEG
29208: PUSH
29209: LD_INT 3
29211: NEG
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 4
29219: NEG
29220: PUSH
29221: LD_INT 3
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 5
29231: NEG
29232: PUSH
29233: LD_INT 4
29235: NEG
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 5
29243: NEG
29244: PUSH
29245: LD_INT 5
29247: NEG
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 3
29255: NEG
29256: PUSH
29257: LD_INT 5
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 5
29267: NEG
29268: PUSH
29269: LD_INT 3
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29324: LD_ADDR_VAR 0 30
29328: PUSH
29329: LD_INT 4
29331: PUSH
29332: LD_INT 4
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 4
29341: PUSH
29342: LD_INT 3
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 5
29351: PUSH
29352: LD_INT 4
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 5
29361: PUSH
29362: LD_INT 5
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 4
29371: PUSH
29372: LD_INT 5
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 3
29381: PUSH
29382: LD_INT 4
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 3
29391: PUSH
29392: LD_INT 3
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 5
29401: PUSH
29402: LD_INT 3
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 3
29411: PUSH
29412: LD_INT 5
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 1
29441: PUSH
29442: LD_INT 3
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: LD_INT 4
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 0
29461: PUSH
29462: LD_INT 4
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: NEG
29472: PUSH
29473: LD_INT 3
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: LD_INT 2
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 2
29493: PUSH
29494: LD_INT 4
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 2
29503: NEG
29504: PUSH
29505: LD_INT 2
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 4
29514: NEG
29515: PUSH
29516: LD_INT 0
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 4
29525: NEG
29526: PUSH
29527: LD_INT 1
29529: NEG
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 3
29537: NEG
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 3
29548: NEG
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 4
29559: NEG
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 5
29570: NEG
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 5
29581: NEG
29582: PUSH
29583: LD_INT 1
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 5
29593: NEG
29594: PUSH
29595: LD_INT 2
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 3
29605: NEG
29606: PUSH
29607: LD_INT 2
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 3
29616: NEG
29617: PUSH
29618: LD_INT 3
29620: NEG
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 3
29628: NEG
29629: PUSH
29630: LD_INT 4
29632: NEG
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 2
29640: NEG
29641: PUSH
29642: LD_INT 3
29644: NEG
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 2
29652: NEG
29653: PUSH
29654: LD_INT 2
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 3
29664: NEG
29665: PUSH
29666: LD_INT 2
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 4
29676: NEG
29677: PUSH
29678: LD_INT 3
29680: NEG
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 4
29688: NEG
29689: PUSH
29690: LD_INT 4
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 2
29700: NEG
29701: PUSH
29702: LD_INT 4
29704: NEG
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 4
29712: NEG
29713: PUSH
29714: LD_INT 2
29716: NEG
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 0
29724: PUSH
29725: LD_INT 4
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: LD_INT 5
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: LD_INT 4
29749: NEG
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: LD_INT 3
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 0
29768: PUSH
29769: LD_INT 3
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: LD_INT 4
29783: NEG
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 1
29791: NEG
29792: PUSH
29793: LD_INT 5
29795: NEG
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 3
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 2
29814: NEG
29815: PUSH
29816: LD_INT 5
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29871: LD_ADDR_VAR 0 31
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: LD_INT 4
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: LD_INT 3
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: LD_INT 4
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: LD_INT 5
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: LD_INT 5
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 1
29928: NEG
29929: PUSH
29930: LD_INT 4
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: LD_INT 3
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: LD_INT 5
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 2
29960: NEG
29961: PUSH
29962: LD_INT 3
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 3
29971: NEG
29972: PUSH
29973: LD_INT 0
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 3
29982: NEG
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 2
29994: NEG
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 2
30005: NEG
30006: PUSH
30007: LD_INT 1
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 3
30016: NEG
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 4
30027: NEG
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 4
30038: NEG
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 4
30050: NEG
30051: PUSH
30052: LD_INT 2
30054: NEG
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 2
30062: NEG
30063: PUSH
30064: LD_INT 2
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 4
30073: NEG
30074: PUSH
30075: LD_INT 4
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 4
30085: NEG
30086: PUSH
30087: LD_INT 5
30089: NEG
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 3
30097: NEG
30098: PUSH
30099: LD_INT 4
30101: NEG
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 3
30109: NEG
30110: PUSH
30111: LD_INT 3
30113: NEG
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 4
30121: NEG
30122: PUSH
30123: LD_INT 3
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 5
30133: NEG
30134: PUSH
30135: LD_INT 4
30137: NEG
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 5
30145: NEG
30146: PUSH
30147: LD_INT 5
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 3
30157: NEG
30158: PUSH
30159: LD_INT 5
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 5
30169: NEG
30170: PUSH
30171: LD_INT 3
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: LD_INT 4
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: LD_INT 2
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: LD_INT 2
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: LD_INT 3
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 1
30248: NEG
30249: PUSH
30250: LD_INT 4
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: LD_INT 2
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 2
30271: NEG
30272: PUSH
30273: LD_INT 4
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 4
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 4
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 5
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 5
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 4
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 3
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 3
30344: PUSH
30345: LD_INT 1
30347: NEG
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 3
30355: PUSH
30356: LD_INT 2
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 5
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30421: LD_ADDR_VAR 0 32
30425: PUSH
30426: LD_INT 4
30428: NEG
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 4
30439: NEG
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 3
30451: NEG
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 3
30462: NEG
30463: PUSH
30464: LD_INT 1
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 4
30473: NEG
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 5
30484: NEG
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 5
30495: NEG
30496: PUSH
30497: LD_INT 1
30499: NEG
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 5
30507: NEG
30508: PUSH
30509: LD_INT 2
30511: NEG
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 3
30519: NEG
30520: PUSH
30521: LD_INT 2
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 3
30530: NEG
30531: PUSH
30532: LD_INT 3
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 3
30542: NEG
30543: PUSH
30544: LD_INT 4
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 2
30554: NEG
30555: PUSH
30556: LD_INT 3
30558: NEG
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 2
30566: NEG
30567: PUSH
30568: LD_INT 2
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 3
30578: NEG
30579: PUSH
30580: LD_INT 2
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 4
30590: NEG
30591: PUSH
30592: LD_INT 3
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 4
30602: NEG
30603: PUSH
30604: LD_INT 4
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 2
30614: NEG
30615: PUSH
30616: LD_INT 4
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 4
30626: NEG
30627: PUSH
30628: LD_INT 2
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 0
30638: PUSH
30639: LD_INT 4
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: LD_INT 5
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: LD_INT 4
30663: NEG
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: LD_INT 3
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: LD_INT 3
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: LD_INT 4
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: NEG
30706: PUSH
30707: LD_INT 5
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: LD_INT 3
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: NEG
30729: PUSH
30730: LD_INT 5
30732: NEG
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 3
30740: PUSH
30741: LD_INT 0
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 3
30750: PUSH
30751: LD_INT 1
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 4
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 4
30771: PUSH
30772: LD_INT 1
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 3
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 2
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: LD_INT 1
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 2
30812: PUSH
30813: LD_INT 2
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 4
30823: PUSH
30824: LD_INT 2
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 4
30833: PUSH
30834: LD_INT 4
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 4
30843: PUSH
30844: LD_INT 3
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 5
30853: PUSH
30854: LD_INT 4
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 5
30863: PUSH
30864: LD_INT 5
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 4
30873: PUSH
30874: LD_INT 5
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: LD_INT 4
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 3
30893: PUSH
30894: LD_INT 3
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 5
30903: PUSH
30904: LD_INT 3
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 3
30913: PUSH
30914: LD_INT 5
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30968: LD_ADDR_VAR 0 33
30972: PUSH
30973: LD_INT 4
30975: NEG
30976: PUSH
30977: LD_INT 4
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 4
30987: NEG
30988: PUSH
30989: LD_INT 5
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 3
30999: NEG
31000: PUSH
31001: LD_INT 4
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 3
31011: NEG
31012: PUSH
31013: LD_INT 3
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 4
31023: NEG
31024: PUSH
31025: LD_INT 3
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 5
31035: NEG
31036: PUSH
31037: LD_INT 4
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 5
31047: NEG
31048: PUSH
31049: LD_INT 5
31051: NEG
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 3
31059: NEG
31060: PUSH
31061: LD_INT 5
31063: NEG
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 5
31071: NEG
31072: PUSH
31073: LD_INT 3
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 3
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: LD_INT 4
31097: NEG
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: LD_INT 3
31108: NEG
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: LD_INT 2
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: LD_INT 2
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: LD_INT 3
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: LD_INT 4
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 2
31162: PUSH
31163: LD_INT 2
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 2
31173: NEG
31174: PUSH
31175: LD_INT 4
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 4
31185: PUSH
31186: LD_INT 0
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 4
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 5
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 5
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 4
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 3
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 3
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 3
31257: PUSH
31258: LD_INT 2
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 5
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 3
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 3
31288: PUSH
31289: LD_INT 2
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 4
31298: PUSH
31299: LD_INT 3
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 4
31308: PUSH
31309: LD_INT 4
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 3
31318: PUSH
31319: LD_INT 4
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: LD_INT 3
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 2
31338: PUSH
31339: LD_INT 2
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 4
31348: PUSH
31349: LD_INT 2
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: LD_INT 4
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: LD_INT 4
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: LD_INT 3
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: LD_INT 4
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: LD_INT 5
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: LD_INT 5
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 1
31418: NEG
31419: PUSH
31420: LD_INT 4
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PUSH
31431: LD_INT 3
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 5
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 2
31450: NEG
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31506: LD_ADDR_VAR 0 34
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: LD_INT 4
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: LD_INT 5
31527: NEG
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: LD_INT 4
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: LD_INT 3
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: LD_INT 3
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: LD_INT 4
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: LD_INT 5
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: PUSH
31593: LD_INT 3
31595: NEG
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: LD_INT 5
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 3
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 3
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 4
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 4
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 3
31656: PUSH
31657: LD_INT 1
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: LD_INT 0
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 2
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 2
31687: PUSH
31688: LD_INT 2
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 4
31698: PUSH
31699: LD_INT 2
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 4
31708: PUSH
31709: LD_INT 4
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 4
31718: PUSH
31719: LD_INT 3
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 5
31728: PUSH
31729: LD_INT 4
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 5
31738: PUSH
31739: LD_INT 5
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 4
31748: PUSH
31749: LD_INT 5
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 3
31758: PUSH
31759: LD_INT 4
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 3
31768: PUSH
31769: LD_INT 3
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 5
31778: PUSH
31779: LD_INT 3
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: LD_INT 5
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: LD_INT 3
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: LD_INT 2
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: LD_INT 3
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: LD_INT 4
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: LD_INT 4
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: NEG
31849: PUSH
31850: LD_INT 3
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: LD_INT 4
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 2
31880: NEG
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 4
31891: NEG
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 4
31902: NEG
31903: PUSH
31904: LD_INT 1
31906: NEG
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 3
31914: NEG
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 3
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 4
31936: NEG
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 5
31947: NEG
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 5
31958: NEG
31959: PUSH
31960: LD_INT 1
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 5
31970: NEG
31971: PUSH
31972: LD_INT 2
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 3
31982: NEG
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
// end ; end ;
32038: GO 32041
32040: POP
// case btype of b_depot , b_warehouse :
32041: LD_VAR 0 1
32045: PUSH
32046: LD_INT 0
32048: DOUBLE
32049: EQUAL
32050: IFTRUE 32060
32052: LD_INT 1
32054: DOUBLE
32055: EQUAL
32056: IFTRUE 32060
32058: GO 32261
32060: POP
// case nation of nation_american :
32061: LD_VAR 0 5
32065: PUSH
32066: LD_INT 1
32068: DOUBLE
32069: EQUAL
32070: IFTRUE 32074
32072: GO 32130
32074: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32075: LD_ADDR_VAR 0 9
32079: PUSH
32080: LD_VAR 0 11
32084: PUSH
32085: LD_VAR 0 12
32089: PUSH
32090: LD_VAR 0 13
32094: PUSH
32095: LD_VAR 0 14
32099: PUSH
32100: LD_VAR 0 15
32104: PUSH
32105: LD_VAR 0 16
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: PUSH
32118: LD_VAR 0 4
32122: PUSH
32123: LD_INT 1
32125: PLUS
32126: ARRAY
32127: ST_TO_ADDR
32128: GO 32259
32130: LD_INT 2
32132: DOUBLE
32133: EQUAL
32134: IFTRUE 32138
32136: GO 32194
32138: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32139: LD_ADDR_VAR 0 9
32143: PUSH
32144: LD_VAR 0 17
32148: PUSH
32149: LD_VAR 0 18
32153: PUSH
32154: LD_VAR 0 19
32158: PUSH
32159: LD_VAR 0 20
32163: PUSH
32164: LD_VAR 0 21
32168: PUSH
32169: LD_VAR 0 22
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: PUSH
32182: LD_VAR 0 4
32186: PUSH
32187: LD_INT 1
32189: PLUS
32190: ARRAY
32191: ST_TO_ADDR
32192: GO 32259
32194: LD_INT 3
32196: DOUBLE
32197: EQUAL
32198: IFTRUE 32202
32200: GO 32258
32202: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32203: LD_ADDR_VAR 0 9
32207: PUSH
32208: LD_VAR 0 23
32212: PUSH
32213: LD_VAR 0 24
32217: PUSH
32218: LD_VAR 0 25
32222: PUSH
32223: LD_VAR 0 26
32227: PUSH
32228: LD_VAR 0 27
32232: PUSH
32233: LD_VAR 0 28
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: PUSH
32246: LD_VAR 0 4
32250: PUSH
32251: LD_INT 1
32253: PLUS
32254: ARRAY
32255: ST_TO_ADDR
32256: GO 32259
32258: POP
32259: GO 32814
32261: LD_INT 2
32263: DOUBLE
32264: EQUAL
32265: IFTRUE 32275
32267: LD_INT 3
32269: DOUBLE
32270: EQUAL
32271: IFTRUE 32275
32273: GO 32331
32275: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32276: LD_ADDR_VAR 0 9
32280: PUSH
32281: LD_VAR 0 29
32285: PUSH
32286: LD_VAR 0 30
32290: PUSH
32291: LD_VAR 0 31
32295: PUSH
32296: LD_VAR 0 32
32300: PUSH
32301: LD_VAR 0 33
32305: PUSH
32306: LD_VAR 0 34
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: PUSH
32319: LD_VAR 0 4
32323: PUSH
32324: LD_INT 1
32326: PLUS
32327: ARRAY
32328: ST_TO_ADDR
32329: GO 32814
32331: LD_INT 16
32333: DOUBLE
32334: EQUAL
32335: IFTRUE 32393
32337: LD_INT 17
32339: DOUBLE
32340: EQUAL
32341: IFTRUE 32393
32343: LD_INT 18
32345: DOUBLE
32346: EQUAL
32347: IFTRUE 32393
32349: LD_INT 19
32351: DOUBLE
32352: EQUAL
32353: IFTRUE 32393
32355: LD_INT 22
32357: DOUBLE
32358: EQUAL
32359: IFTRUE 32393
32361: LD_INT 20
32363: DOUBLE
32364: EQUAL
32365: IFTRUE 32393
32367: LD_INT 21
32369: DOUBLE
32370: EQUAL
32371: IFTRUE 32393
32373: LD_INT 23
32375: DOUBLE
32376: EQUAL
32377: IFTRUE 32393
32379: LD_INT 24
32381: DOUBLE
32382: EQUAL
32383: IFTRUE 32393
32385: LD_INT 25
32387: DOUBLE
32388: EQUAL
32389: IFTRUE 32393
32391: GO 32449
32393: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32394: LD_ADDR_VAR 0 9
32398: PUSH
32399: LD_VAR 0 35
32403: PUSH
32404: LD_VAR 0 36
32408: PUSH
32409: LD_VAR 0 37
32413: PUSH
32414: LD_VAR 0 38
32418: PUSH
32419: LD_VAR 0 39
32423: PUSH
32424: LD_VAR 0 40
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: PUSH
32437: LD_VAR 0 4
32441: PUSH
32442: LD_INT 1
32444: PLUS
32445: ARRAY
32446: ST_TO_ADDR
32447: GO 32814
32449: LD_INT 6
32451: DOUBLE
32452: EQUAL
32453: IFTRUE 32505
32455: LD_INT 7
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32505
32461: LD_INT 8
32463: DOUBLE
32464: EQUAL
32465: IFTRUE 32505
32467: LD_INT 13
32469: DOUBLE
32470: EQUAL
32471: IFTRUE 32505
32473: LD_INT 12
32475: DOUBLE
32476: EQUAL
32477: IFTRUE 32505
32479: LD_INT 15
32481: DOUBLE
32482: EQUAL
32483: IFTRUE 32505
32485: LD_INT 11
32487: DOUBLE
32488: EQUAL
32489: IFTRUE 32505
32491: LD_INT 14
32493: DOUBLE
32494: EQUAL
32495: IFTRUE 32505
32497: LD_INT 10
32499: DOUBLE
32500: EQUAL
32501: IFTRUE 32505
32503: GO 32561
32505: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32506: LD_ADDR_VAR 0 9
32510: PUSH
32511: LD_VAR 0 41
32515: PUSH
32516: LD_VAR 0 42
32520: PUSH
32521: LD_VAR 0 43
32525: PUSH
32526: LD_VAR 0 44
32530: PUSH
32531: LD_VAR 0 45
32535: PUSH
32536: LD_VAR 0 46
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: PUSH
32549: LD_VAR 0 4
32553: PUSH
32554: LD_INT 1
32556: PLUS
32557: ARRAY
32558: ST_TO_ADDR
32559: GO 32814
32561: LD_INT 36
32563: DOUBLE
32564: EQUAL
32565: IFTRUE 32569
32567: GO 32625
32569: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32570: LD_ADDR_VAR 0 9
32574: PUSH
32575: LD_VAR 0 47
32579: PUSH
32580: LD_VAR 0 48
32584: PUSH
32585: LD_VAR 0 49
32589: PUSH
32590: LD_VAR 0 50
32594: PUSH
32595: LD_VAR 0 51
32599: PUSH
32600: LD_VAR 0 52
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: PUSH
32613: LD_VAR 0 4
32617: PUSH
32618: LD_INT 1
32620: PLUS
32621: ARRAY
32622: ST_TO_ADDR
32623: GO 32814
32625: LD_INT 4
32627: DOUBLE
32628: EQUAL
32629: IFTRUE 32651
32631: LD_INT 5
32633: DOUBLE
32634: EQUAL
32635: IFTRUE 32651
32637: LD_INT 34
32639: DOUBLE
32640: EQUAL
32641: IFTRUE 32651
32643: LD_INT 37
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32707
32651: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32652: LD_ADDR_VAR 0 9
32656: PUSH
32657: LD_VAR 0 53
32661: PUSH
32662: LD_VAR 0 54
32666: PUSH
32667: LD_VAR 0 55
32671: PUSH
32672: LD_VAR 0 56
32676: PUSH
32677: LD_VAR 0 57
32681: PUSH
32682: LD_VAR 0 58
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: PUSH
32695: LD_VAR 0 4
32699: PUSH
32700: LD_INT 1
32702: PLUS
32703: ARRAY
32704: ST_TO_ADDR
32705: GO 32814
32707: LD_INT 31
32709: DOUBLE
32710: EQUAL
32711: IFTRUE 32757
32713: LD_INT 32
32715: DOUBLE
32716: EQUAL
32717: IFTRUE 32757
32719: LD_INT 33
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32757
32725: LD_INT 27
32727: DOUBLE
32728: EQUAL
32729: IFTRUE 32757
32731: LD_INT 26
32733: DOUBLE
32734: EQUAL
32735: IFTRUE 32757
32737: LD_INT 28
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32757
32743: LD_INT 29
32745: DOUBLE
32746: EQUAL
32747: IFTRUE 32757
32749: LD_INT 30
32751: DOUBLE
32752: EQUAL
32753: IFTRUE 32757
32755: GO 32813
32757: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32758: LD_ADDR_VAR 0 9
32762: PUSH
32763: LD_VAR 0 59
32767: PUSH
32768: LD_VAR 0 60
32772: PUSH
32773: LD_VAR 0 61
32777: PUSH
32778: LD_VAR 0 62
32782: PUSH
32783: LD_VAR 0 63
32787: PUSH
32788: LD_VAR 0 64
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: PUSH
32801: LD_VAR 0 4
32805: PUSH
32806: LD_INT 1
32808: PLUS
32809: ARRAY
32810: ST_TO_ADDR
32811: GO 32814
32813: POP
// temp_list2 = [ ] ;
32814: LD_ADDR_VAR 0 10
32818: PUSH
32819: EMPTY
32820: ST_TO_ADDR
// for i in temp_list do
32821: LD_ADDR_VAR 0 8
32825: PUSH
32826: LD_VAR 0 9
32830: PUSH
32831: FOR_IN
32832: IFFALSE 32884
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32834: LD_ADDR_VAR 0 10
32838: PUSH
32839: LD_VAR 0 10
32843: PUSH
32844: LD_VAR 0 8
32848: PUSH
32849: LD_INT 1
32851: ARRAY
32852: PUSH
32853: LD_VAR 0 2
32857: PLUS
32858: PUSH
32859: LD_VAR 0 8
32863: PUSH
32864: LD_INT 2
32866: ARRAY
32867: PUSH
32868: LD_VAR 0 3
32872: PLUS
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: EMPTY
32879: LIST
32880: ADD
32881: ST_TO_ADDR
32882: GO 32831
32884: POP
32885: POP
// result = temp_list2 ;
32886: LD_ADDR_VAR 0 7
32890: PUSH
32891: LD_VAR 0 10
32895: ST_TO_ADDR
// end ;
32896: LD_VAR 0 7
32900: RET
// export function EnemyInRange ( unit , dist ) ; begin
32901: LD_INT 0
32903: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32904: LD_ADDR_VAR 0 3
32908: PUSH
32909: LD_VAR 0 1
32913: PPUSH
32914: CALL_OW 255
32918: PPUSH
32919: LD_VAR 0 1
32923: PPUSH
32924: CALL_OW 250
32928: PPUSH
32929: LD_VAR 0 1
32933: PPUSH
32934: CALL_OW 251
32938: PPUSH
32939: LD_VAR 0 2
32943: PPUSH
32944: CALL 6274 0 4
32948: PUSH
32949: LD_INT 4
32951: ARRAY
32952: ST_TO_ADDR
// end ;
32953: LD_VAR 0 3
32957: RET
// export function PlayerSeeMe ( unit ) ; begin
32958: LD_INT 0
32960: PPUSH
// result := See ( your_side , unit ) ;
32961: LD_ADDR_VAR 0 2
32965: PUSH
32966: LD_OWVAR 2
32970: PPUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL_OW 292
32980: ST_TO_ADDR
// end ;
32981: LD_VAR 0 2
32985: RET
// export function ReverseDir ( unit ) ; begin
32986: LD_INT 0
32988: PPUSH
// if not unit then
32989: LD_VAR 0 1
32993: NOT
32994: IFFALSE 32998
// exit ;
32996: GO 33021
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32998: LD_ADDR_VAR 0 2
33002: PUSH
33003: LD_VAR 0 1
33007: PPUSH
33008: CALL_OW 254
33012: PUSH
33013: LD_INT 3
33015: PLUS
33016: PUSH
33017: LD_INT 6
33019: MOD
33020: ST_TO_ADDR
// end ;
33021: LD_VAR 0 2
33025: RET
// export function ReverseArray ( array ) ; var i ; begin
33026: LD_INT 0
33028: PPUSH
33029: PPUSH
// if not array then
33030: LD_VAR 0 1
33034: NOT
33035: IFFALSE 33039
// exit ;
33037: GO 33094
// result := [ ] ;
33039: LD_ADDR_VAR 0 2
33043: PUSH
33044: EMPTY
33045: ST_TO_ADDR
// for i := array downto 1 do
33046: LD_ADDR_VAR 0 3
33050: PUSH
33051: DOUBLE
33052: LD_VAR 0 1
33056: INC
33057: ST_TO_ADDR
33058: LD_INT 1
33060: PUSH
33061: FOR_DOWNTO
33062: IFFALSE 33092
// result := Join ( result , array [ i ] ) ;
33064: LD_ADDR_VAR 0 2
33068: PUSH
33069: LD_VAR 0 2
33073: PPUSH
33074: LD_VAR 0 1
33078: PUSH
33079: LD_VAR 0 3
33083: ARRAY
33084: PPUSH
33085: CALL 37737 0 2
33089: ST_TO_ADDR
33090: GO 33061
33092: POP
33093: POP
// end ;
33094: LD_VAR 0 2
33098: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33099: LD_INT 0
33101: PPUSH
33102: PPUSH
33103: PPUSH
33104: PPUSH
33105: PPUSH
33106: PPUSH
// if not unit or not hexes then
33107: LD_VAR 0 1
33111: NOT
33112: PUSH
33113: LD_VAR 0 2
33117: NOT
33118: OR
33119: IFFALSE 33123
// exit ;
33121: GO 33246
// dist := 9999 ;
33123: LD_ADDR_VAR 0 5
33127: PUSH
33128: LD_INT 9999
33130: ST_TO_ADDR
// for i = 1 to hexes do
33131: LD_ADDR_VAR 0 4
33135: PUSH
33136: DOUBLE
33137: LD_INT 1
33139: DEC
33140: ST_TO_ADDR
33141: LD_VAR 0 2
33145: PUSH
33146: FOR_TO
33147: IFFALSE 33234
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33149: LD_ADDR_VAR 0 6
33153: PUSH
33154: LD_VAR 0 1
33158: PPUSH
33159: LD_VAR 0 2
33163: PUSH
33164: LD_VAR 0 4
33168: ARRAY
33169: PUSH
33170: LD_INT 1
33172: ARRAY
33173: PPUSH
33174: LD_VAR 0 2
33178: PUSH
33179: LD_VAR 0 4
33183: ARRAY
33184: PUSH
33185: LD_INT 2
33187: ARRAY
33188: PPUSH
33189: CALL_OW 297
33193: ST_TO_ADDR
// if tdist < dist then
33194: LD_VAR 0 6
33198: PUSH
33199: LD_VAR 0 5
33203: LESS
33204: IFFALSE 33232
// begin hex := hexes [ i ] ;
33206: LD_ADDR_VAR 0 8
33210: PUSH
33211: LD_VAR 0 2
33215: PUSH
33216: LD_VAR 0 4
33220: ARRAY
33221: ST_TO_ADDR
// dist := tdist ;
33222: LD_ADDR_VAR 0 5
33226: PUSH
33227: LD_VAR 0 6
33231: ST_TO_ADDR
// end ; end ;
33232: GO 33146
33234: POP
33235: POP
// result := hex ;
33236: LD_ADDR_VAR 0 3
33240: PUSH
33241: LD_VAR 0 8
33245: ST_TO_ADDR
// end ;
33246: LD_VAR 0 3
33250: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33251: LD_INT 0
33253: PPUSH
33254: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33255: LD_VAR 0 1
33259: NOT
33260: PUSH
33261: LD_VAR 0 1
33265: PUSH
33266: LD_INT 21
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 23
33278: PUSH
33279: LD_INT 2
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PPUSH
33290: CALL_OW 69
33294: IN
33295: NOT
33296: OR
33297: IFFALSE 33301
// exit ;
33299: GO 33348
// for i = 1 to 3 do
33301: LD_ADDR_VAR 0 3
33305: PUSH
33306: DOUBLE
33307: LD_INT 1
33309: DEC
33310: ST_TO_ADDR
33311: LD_INT 3
33313: PUSH
33314: FOR_TO
33315: IFFALSE 33346
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33317: LD_VAR 0 1
33321: PPUSH
33322: CALL_OW 250
33326: PPUSH
33327: LD_VAR 0 1
33331: PPUSH
33332: CALL_OW 251
33336: PPUSH
33337: LD_INT 1
33339: PPUSH
33340: CALL_OW 453
33344: GO 33314
33346: POP
33347: POP
// end ;
33348: LD_VAR 0 2
33352: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33353: LD_INT 0
33355: PPUSH
33356: PPUSH
33357: PPUSH
33358: PPUSH
33359: PPUSH
33360: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33361: LD_VAR 0 1
33365: NOT
33366: PUSH
33367: LD_VAR 0 2
33371: NOT
33372: OR
33373: PUSH
33374: LD_VAR 0 1
33378: PPUSH
33379: CALL_OW 314
33383: OR
33384: IFFALSE 33388
// exit ;
33386: GO 33855
// if GetLives ( i ) < 250 then
33388: LD_VAR 0 4
33392: PPUSH
33393: CALL_OW 256
33397: PUSH
33398: LD_INT 250
33400: LESS
33401: IFFALSE 33414
// begin ComAutodestruct ( i ) ;
33403: LD_VAR 0 4
33407: PPUSH
33408: CALL 33251 0 1
// exit ;
33412: GO 33855
// end ; x := GetX ( enemy_unit ) ;
33414: LD_ADDR_VAR 0 7
33418: PUSH
33419: LD_VAR 0 2
33423: PPUSH
33424: CALL_OW 250
33428: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33429: LD_ADDR_VAR 0 8
33433: PUSH
33434: LD_VAR 0 2
33438: PPUSH
33439: CALL_OW 251
33443: ST_TO_ADDR
// if not x or not y then
33444: LD_VAR 0 7
33448: NOT
33449: PUSH
33450: LD_VAR 0 8
33454: NOT
33455: OR
33456: IFFALSE 33460
// exit ;
33458: GO 33855
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33460: LD_ADDR_VAR 0 6
33464: PUSH
33465: LD_VAR 0 7
33469: PPUSH
33470: LD_INT 0
33472: PPUSH
33473: LD_INT 4
33475: PPUSH
33476: CALL_OW 272
33480: PUSH
33481: LD_VAR 0 8
33485: PPUSH
33486: LD_INT 0
33488: PPUSH
33489: LD_INT 4
33491: PPUSH
33492: CALL_OW 273
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_VAR 0 7
33505: PPUSH
33506: LD_INT 1
33508: PPUSH
33509: LD_INT 4
33511: PPUSH
33512: CALL_OW 272
33516: PUSH
33517: LD_VAR 0 8
33521: PPUSH
33522: LD_INT 1
33524: PPUSH
33525: LD_INT 4
33527: PPUSH
33528: CALL_OW 273
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_VAR 0 7
33541: PPUSH
33542: LD_INT 2
33544: PPUSH
33545: LD_INT 4
33547: PPUSH
33548: CALL_OW 272
33552: PUSH
33553: LD_VAR 0 8
33557: PPUSH
33558: LD_INT 2
33560: PPUSH
33561: LD_INT 4
33563: PPUSH
33564: CALL_OW 273
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_VAR 0 7
33577: PPUSH
33578: LD_INT 3
33580: PPUSH
33581: LD_INT 4
33583: PPUSH
33584: CALL_OW 272
33588: PUSH
33589: LD_VAR 0 8
33593: PPUSH
33594: LD_INT 3
33596: PPUSH
33597: LD_INT 4
33599: PPUSH
33600: CALL_OW 273
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_VAR 0 7
33613: PPUSH
33614: LD_INT 4
33616: PPUSH
33617: LD_INT 4
33619: PPUSH
33620: CALL_OW 272
33624: PUSH
33625: LD_VAR 0 8
33629: PPUSH
33630: LD_INT 4
33632: PPUSH
33633: LD_INT 4
33635: PPUSH
33636: CALL_OW 273
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_VAR 0 7
33649: PPUSH
33650: LD_INT 5
33652: PPUSH
33653: LD_INT 4
33655: PPUSH
33656: CALL_OW 272
33660: PUSH
33661: LD_VAR 0 8
33665: PPUSH
33666: LD_INT 5
33668: PPUSH
33669: LD_INT 4
33671: PPUSH
33672: CALL_OW 273
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: ST_TO_ADDR
// for i = tmp downto 1 do
33689: LD_ADDR_VAR 0 4
33693: PUSH
33694: DOUBLE
33695: LD_VAR 0 6
33699: INC
33700: ST_TO_ADDR
33701: LD_INT 1
33703: PUSH
33704: FOR_DOWNTO
33705: IFFALSE 33806
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33707: LD_VAR 0 6
33711: PUSH
33712: LD_VAR 0 4
33716: ARRAY
33717: PUSH
33718: LD_INT 1
33720: ARRAY
33721: PPUSH
33722: LD_VAR 0 6
33726: PUSH
33727: LD_VAR 0 4
33731: ARRAY
33732: PUSH
33733: LD_INT 2
33735: ARRAY
33736: PPUSH
33737: CALL_OW 488
33741: NOT
33742: PUSH
33743: LD_VAR 0 6
33747: PUSH
33748: LD_VAR 0 4
33752: ARRAY
33753: PUSH
33754: LD_INT 1
33756: ARRAY
33757: PPUSH
33758: LD_VAR 0 6
33762: PUSH
33763: LD_VAR 0 4
33767: ARRAY
33768: PUSH
33769: LD_INT 2
33771: ARRAY
33772: PPUSH
33773: CALL_OW 428
33777: PUSH
33778: LD_INT 0
33780: NONEQUAL
33781: OR
33782: IFFALSE 33804
// tmp := Delete ( tmp , i ) ;
33784: LD_ADDR_VAR 0 6
33788: PUSH
33789: LD_VAR 0 6
33793: PPUSH
33794: LD_VAR 0 4
33798: PPUSH
33799: CALL_OW 3
33803: ST_TO_ADDR
33804: GO 33704
33806: POP
33807: POP
// j := GetClosestHex ( unit , tmp ) ;
33808: LD_ADDR_VAR 0 5
33812: PUSH
33813: LD_VAR 0 1
33817: PPUSH
33818: LD_VAR 0 6
33822: PPUSH
33823: CALL 33099 0 2
33827: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33828: LD_VAR 0 1
33832: PPUSH
33833: LD_VAR 0 5
33837: PUSH
33838: LD_INT 1
33840: ARRAY
33841: PPUSH
33842: LD_VAR 0 5
33846: PUSH
33847: LD_INT 2
33849: ARRAY
33850: PPUSH
33851: CALL_OW 111
// end ;
33855: LD_VAR 0 3
33859: RET
// export function PrepareApemanSoldier ( ) ; begin
33860: LD_INT 0
33862: PPUSH
// uc_nation := 0 ;
33863: LD_ADDR_OWVAR 21
33867: PUSH
33868: LD_INT 0
33870: ST_TO_ADDR
// hc_sex := sex_male ;
33871: LD_ADDR_OWVAR 27
33875: PUSH
33876: LD_INT 1
33878: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
33879: LD_ADDR_OWVAR 28
33883: PUSH
33884: LD_INT 15
33886: ST_TO_ADDR
// hc_gallery :=  ;
33887: LD_ADDR_OWVAR 33
33891: PUSH
33892: LD_STRING 
33894: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33895: LD_ADDR_OWVAR 31
33899: PUSH
33900: LD_INT 0
33902: PPUSH
33903: LD_INT 3
33905: PPUSH
33906: CALL_OW 12
33910: PUSH
33911: LD_INT 0
33913: PPUSH
33914: LD_INT 3
33916: PPUSH
33917: CALL_OW 12
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: ST_TO_ADDR
// end ;
33934: LD_VAR 0 1
33938: RET
// export function PrepareApemanEngineer ( ) ; begin
33939: LD_INT 0
33941: PPUSH
// uc_nation := 0 ;
33942: LD_ADDR_OWVAR 21
33946: PUSH
33947: LD_INT 0
33949: ST_TO_ADDR
// hc_sex := sex_male ;
33950: LD_ADDR_OWVAR 27
33954: PUSH
33955: LD_INT 1
33957: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
33958: LD_ADDR_OWVAR 28
33962: PUSH
33963: LD_INT 16
33965: ST_TO_ADDR
// hc_gallery :=  ;
33966: LD_ADDR_OWVAR 33
33970: PUSH
33971: LD_STRING 
33973: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33974: LD_ADDR_OWVAR 31
33978: PUSH
33979: LD_INT 0
33981: PPUSH
33982: LD_INT 3
33984: PPUSH
33985: CALL_OW 12
33989: PUSH
33990: LD_INT 0
33992: PPUSH
33993: LD_INT 3
33995: PPUSH
33996: CALL_OW 12
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: ST_TO_ADDR
// end ;
34013: LD_VAR 0 1
34017: RET
// export function PrepareApeman ( agressivity ) ; begin
34018: LD_INT 0
34020: PPUSH
// uc_side := 0 ;
34021: LD_ADDR_OWVAR 20
34025: PUSH
34026: LD_INT 0
34028: ST_TO_ADDR
// uc_nation := 0 ;
34029: LD_ADDR_OWVAR 21
34033: PUSH
34034: LD_INT 0
34036: ST_TO_ADDR
// hc_sex := sex_male ;
34037: LD_ADDR_OWVAR 27
34041: PUSH
34042: LD_INT 1
34044: ST_TO_ADDR
// hc_class := class_apeman ;
34045: LD_ADDR_OWVAR 28
34049: PUSH
34050: LD_INT 12
34052: ST_TO_ADDR
// hc_gallery :=  ;
34053: LD_ADDR_OWVAR 33
34057: PUSH
34058: LD_STRING 
34060: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34061: LD_ADDR_OWVAR 35
34065: PUSH
34066: LD_VAR 0 1
34070: NEG
34071: PPUSH
34072: LD_VAR 0 1
34076: PPUSH
34077: CALL_OW 12
34081: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34082: LD_ADDR_OWVAR 31
34086: PUSH
34087: LD_INT 0
34089: PPUSH
34090: LD_INT 3
34092: PPUSH
34093: CALL_OW 12
34097: PUSH
34098: LD_INT 0
34100: PPUSH
34101: LD_INT 3
34103: PPUSH
34104: CALL_OW 12
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: LD_INT 0
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: ST_TO_ADDR
// end ;
34121: LD_VAR 0 2
34125: RET
// export function PrepareTiger ( agressivity ) ; begin
34126: LD_INT 0
34128: PPUSH
// uc_side := 0 ;
34129: LD_ADDR_OWVAR 20
34133: PUSH
34134: LD_INT 0
34136: ST_TO_ADDR
// uc_nation := 0 ;
34137: LD_ADDR_OWVAR 21
34141: PUSH
34142: LD_INT 0
34144: ST_TO_ADDR
// hc_class := class_tiger ;
34145: LD_ADDR_OWVAR 28
34149: PUSH
34150: LD_INT 14
34152: ST_TO_ADDR
// hc_gallery :=  ;
34153: LD_ADDR_OWVAR 33
34157: PUSH
34158: LD_STRING 
34160: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34161: LD_ADDR_OWVAR 35
34165: PUSH
34166: LD_VAR 0 1
34170: NEG
34171: PPUSH
34172: LD_VAR 0 1
34176: PPUSH
34177: CALL_OW 12
34181: ST_TO_ADDR
// end ;
34182: LD_VAR 0 2
34186: RET
// export function PrepareEnchidna ( ) ; begin
34187: LD_INT 0
34189: PPUSH
// uc_side := 0 ;
34190: LD_ADDR_OWVAR 20
34194: PUSH
34195: LD_INT 0
34197: ST_TO_ADDR
// uc_nation := 0 ;
34198: LD_ADDR_OWVAR 21
34202: PUSH
34203: LD_INT 0
34205: ST_TO_ADDR
// hc_class := class_baggie ;
34206: LD_ADDR_OWVAR 28
34210: PUSH
34211: LD_INT 13
34213: ST_TO_ADDR
// hc_gallery :=  ;
34214: LD_ADDR_OWVAR 33
34218: PUSH
34219: LD_STRING 
34221: ST_TO_ADDR
// end ;
34222: LD_VAR 0 1
34226: RET
// export function PrepareFrog ( ) ; begin
34227: LD_INT 0
34229: PPUSH
// uc_side := 0 ;
34230: LD_ADDR_OWVAR 20
34234: PUSH
34235: LD_INT 0
34237: ST_TO_ADDR
// uc_nation := 0 ;
34238: LD_ADDR_OWVAR 21
34242: PUSH
34243: LD_INT 0
34245: ST_TO_ADDR
// hc_class := class_frog ;
34246: LD_ADDR_OWVAR 28
34250: PUSH
34251: LD_INT 19
34253: ST_TO_ADDR
// hc_gallery :=  ;
34254: LD_ADDR_OWVAR 33
34258: PUSH
34259: LD_STRING 
34261: ST_TO_ADDR
// end ;
34262: LD_VAR 0 1
34266: RET
// export function PrepareFish ( ) ; begin
34267: LD_INT 0
34269: PPUSH
// uc_side := 0 ;
34270: LD_ADDR_OWVAR 20
34274: PUSH
34275: LD_INT 0
34277: ST_TO_ADDR
// uc_nation := 0 ;
34278: LD_ADDR_OWVAR 21
34282: PUSH
34283: LD_INT 0
34285: ST_TO_ADDR
// hc_class := class_fish ;
34286: LD_ADDR_OWVAR 28
34290: PUSH
34291: LD_INT 20
34293: ST_TO_ADDR
// hc_gallery :=  ;
34294: LD_ADDR_OWVAR 33
34298: PUSH
34299: LD_STRING 
34301: ST_TO_ADDR
// end ;
34302: LD_VAR 0 1
34306: RET
// export function PrepareBird ( ) ; begin
34307: LD_INT 0
34309: PPUSH
// uc_side := 0 ;
34310: LD_ADDR_OWVAR 20
34314: PUSH
34315: LD_INT 0
34317: ST_TO_ADDR
// uc_nation := 0 ;
34318: LD_ADDR_OWVAR 21
34322: PUSH
34323: LD_INT 0
34325: ST_TO_ADDR
// hc_class := class_phororhacos ;
34326: LD_ADDR_OWVAR 28
34330: PUSH
34331: LD_INT 18
34333: ST_TO_ADDR
// hc_gallery :=  ;
34334: LD_ADDR_OWVAR 33
34338: PUSH
34339: LD_STRING 
34341: ST_TO_ADDR
// end ;
34342: LD_VAR 0 1
34346: RET
// export function PrepareHorse ( ) ; begin
34347: LD_INT 0
34349: PPUSH
// uc_side := 0 ;
34350: LD_ADDR_OWVAR 20
34354: PUSH
34355: LD_INT 0
34357: ST_TO_ADDR
// uc_nation := 0 ;
34358: LD_ADDR_OWVAR 21
34362: PUSH
34363: LD_INT 0
34365: ST_TO_ADDR
// hc_class := class_horse ;
34366: LD_ADDR_OWVAR 28
34370: PUSH
34371: LD_INT 21
34373: ST_TO_ADDR
// hc_gallery :=  ;
34374: LD_ADDR_OWVAR 33
34378: PUSH
34379: LD_STRING 
34381: ST_TO_ADDR
// end ;
34382: LD_VAR 0 1
34386: RET
// export function PrepareMastodont ( ) ; begin
34387: LD_INT 0
34389: PPUSH
// uc_side := 0 ;
34390: LD_ADDR_OWVAR 20
34394: PUSH
34395: LD_INT 0
34397: ST_TO_ADDR
// uc_nation := 0 ;
34398: LD_ADDR_OWVAR 21
34402: PUSH
34403: LD_INT 0
34405: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34406: LD_ADDR_OWVAR 37
34410: PUSH
34411: LD_INT 31
34413: ST_TO_ADDR
// vc_control := control_rider ;
34414: LD_ADDR_OWVAR 38
34418: PUSH
34419: LD_INT 4
34421: ST_TO_ADDR
// end ;
34422: LD_VAR 0 1
34426: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34427: LD_INT 0
34429: PPUSH
34430: PPUSH
34431: PPUSH
// uc_side = 0 ;
34432: LD_ADDR_OWVAR 20
34436: PUSH
34437: LD_INT 0
34439: ST_TO_ADDR
// uc_nation = 0 ;
34440: LD_ADDR_OWVAR 21
34444: PUSH
34445: LD_INT 0
34447: ST_TO_ADDR
// InitHc_All ( ) ;
34448: CALL_OW 584
// InitVc ;
34452: CALL_OW 20
// if mastodonts then
34456: LD_VAR 0 6
34460: IFFALSE 34527
// for i = 1 to mastodonts do
34462: LD_ADDR_VAR 0 11
34466: PUSH
34467: DOUBLE
34468: LD_INT 1
34470: DEC
34471: ST_TO_ADDR
34472: LD_VAR 0 6
34476: PUSH
34477: FOR_TO
34478: IFFALSE 34525
// begin vc_chassis := 31 ;
34480: LD_ADDR_OWVAR 37
34484: PUSH
34485: LD_INT 31
34487: ST_TO_ADDR
// vc_control := control_rider ;
34488: LD_ADDR_OWVAR 38
34492: PUSH
34493: LD_INT 4
34495: ST_TO_ADDR
// animal := CreateVehicle ;
34496: LD_ADDR_VAR 0 12
34500: PUSH
34501: CALL_OW 45
34505: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34506: LD_VAR 0 12
34510: PPUSH
34511: LD_VAR 0 8
34515: PPUSH
34516: LD_INT 0
34518: PPUSH
34519: CALL 36655 0 3
// end ;
34523: GO 34477
34525: POP
34526: POP
// if horses then
34527: LD_VAR 0 5
34531: IFFALSE 34598
// for i = 1 to horses do
34533: LD_ADDR_VAR 0 11
34537: PUSH
34538: DOUBLE
34539: LD_INT 1
34541: DEC
34542: ST_TO_ADDR
34543: LD_VAR 0 5
34547: PUSH
34548: FOR_TO
34549: IFFALSE 34596
// begin hc_class := 21 ;
34551: LD_ADDR_OWVAR 28
34555: PUSH
34556: LD_INT 21
34558: ST_TO_ADDR
// hc_gallery :=  ;
34559: LD_ADDR_OWVAR 33
34563: PUSH
34564: LD_STRING 
34566: ST_TO_ADDR
// animal := CreateHuman ;
34567: LD_ADDR_VAR 0 12
34571: PUSH
34572: CALL_OW 44
34576: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34577: LD_VAR 0 12
34581: PPUSH
34582: LD_VAR 0 8
34586: PPUSH
34587: LD_INT 0
34589: PPUSH
34590: CALL 36655 0 3
// end ;
34594: GO 34548
34596: POP
34597: POP
// if birds then
34598: LD_VAR 0 1
34602: IFFALSE 34669
// for i = 1 to birds do
34604: LD_ADDR_VAR 0 11
34608: PUSH
34609: DOUBLE
34610: LD_INT 1
34612: DEC
34613: ST_TO_ADDR
34614: LD_VAR 0 1
34618: PUSH
34619: FOR_TO
34620: IFFALSE 34667
// begin hc_class := 18 ;
34622: LD_ADDR_OWVAR 28
34626: PUSH
34627: LD_INT 18
34629: ST_TO_ADDR
// hc_gallery =  ;
34630: LD_ADDR_OWVAR 33
34634: PUSH
34635: LD_STRING 
34637: ST_TO_ADDR
// animal := CreateHuman ;
34638: LD_ADDR_VAR 0 12
34642: PUSH
34643: CALL_OW 44
34647: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34648: LD_VAR 0 12
34652: PPUSH
34653: LD_VAR 0 8
34657: PPUSH
34658: LD_INT 0
34660: PPUSH
34661: CALL 36655 0 3
// end ;
34665: GO 34619
34667: POP
34668: POP
// if tigers then
34669: LD_VAR 0 2
34673: IFFALSE 34757
// for i = 1 to tigers do
34675: LD_ADDR_VAR 0 11
34679: PUSH
34680: DOUBLE
34681: LD_INT 1
34683: DEC
34684: ST_TO_ADDR
34685: LD_VAR 0 2
34689: PUSH
34690: FOR_TO
34691: IFFALSE 34755
// begin hc_class = class_tiger ;
34693: LD_ADDR_OWVAR 28
34697: PUSH
34698: LD_INT 14
34700: ST_TO_ADDR
// hc_gallery =  ;
34701: LD_ADDR_OWVAR 33
34705: PUSH
34706: LD_STRING 
34708: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34709: LD_ADDR_OWVAR 35
34713: PUSH
34714: LD_INT 7
34716: NEG
34717: PPUSH
34718: LD_INT 7
34720: PPUSH
34721: CALL_OW 12
34725: ST_TO_ADDR
// animal := CreateHuman ;
34726: LD_ADDR_VAR 0 12
34730: PUSH
34731: CALL_OW 44
34735: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34736: LD_VAR 0 12
34740: PPUSH
34741: LD_VAR 0 8
34745: PPUSH
34746: LD_INT 0
34748: PPUSH
34749: CALL 36655 0 3
// end ;
34753: GO 34690
34755: POP
34756: POP
// if apemans then
34757: LD_VAR 0 3
34761: IFFALSE 34884
// for i = 1 to apemans do
34763: LD_ADDR_VAR 0 11
34767: PUSH
34768: DOUBLE
34769: LD_INT 1
34771: DEC
34772: ST_TO_ADDR
34773: LD_VAR 0 3
34777: PUSH
34778: FOR_TO
34779: IFFALSE 34882
// begin hc_class = class_apeman ;
34781: LD_ADDR_OWVAR 28
34785: PUSH
34786: LD_INT 12
34788: ST_TO_ADDR
// hc_gallery =  ;
34789: LD_ADDR_OWVAR 33
34793: PUSH
34794: LD_STRING 
34796: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34797: LD_ADDR_OWVAR 35
34801: PUSH
34802: LD_INT 2
34804: NEG
34805: PPUSH
34806: LD_INT 2
34808: PPUSH
34809: CALL_OW 12
34813: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34814: LD_ADDR_OWVAR 31
34818: PUSH
34819: LD_INT 1
34821: PPUSH
34822: LD_INT 3
34824: PPUSH
34825: CALL_OW 12
34829: PUSH
34830: LD_INT 1
34832: PPUSH
34833: LD_INT 3
34835: PPUSH
34836: CALL_OW 12
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: ST_TO_ADDR
// animal := CreateHuman ;
34853: LD_ADDR_VAR 0 12
34857: PUSH
34858: CALL_OW 44
34862: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34863: LD_VAR 0 12
34867: PPUSH
34868: LD_VAR 0 8
34872: PPUSH
34873: LD_INT 0
34875: PPUSH
34876: CALL 36655 0 3
// end ;
34880: GO 34778
34882: POP
34883: POP
// if enchidnas then
34884: LD_VAR 0 4
34888: IFFALSE 34955
// for i = 1 to enchidnas do
34890: LD_ADDR_VAR 0 11
34894: PUSH
34895: DOUBLE
34896: LD_INT 1
34898: DEC
34899: ST_TO_ADDR
34900: LD_VAR 0 4
34904: PUSH
34905: FOR_TO
34906: IFFALSE 34953
// begin hc_class = 13 ;
34908: LD_ADDR_OWVAR 28
34912: PUSH
34913: LD_INT 13
34915: ST_TO_ADDR
// hc_gallery =  ;
34916: LD_ADDR_OWVAR 33
34920: PUSH
34921: LD_STRING 
34923: ST_TO_ADDR
// animal := CreateHuman ;
34924: LD_ADDR_VAR 0 12
34928: PUSH
34929: CALL_OW 44
34933: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34934: LD_VAR 0 12
34938: PPUSH
34939: LD_VAR 0 8
34943: PPUSH
34944: LD_INT 0
34946: PPUSH
34947: CALL 36655 0 3
// end ;
34951: GO 34905
34953: POP
34954: POP
// if fishes then
34955: LD_VAR 0 7
34959: IFFALSE 35026
// for i = 1 to fishes do
34961: LD_ADDR_VAR 0 11
34965: PUSH
34966: DOUBLE
34967: LD_INT 1
34969: DEC
34970: ST_TO_ADDR
34971: LD_VAR 0 7
34975: PUSH
34976: FOR_TO
34977: IFFALSE 35024
// begin hc_class = 20 ;
34979: LD_ADDR_OWVAR 28
34983: PUSH
34984: LD_INT 20
34986: ST_TO_ADDR
// hc_gallery =  ;
34987: LD_ADDR_OWVAR 33
34991: PUSH
34992: LD_STRING 
34994: ST_TO_ADDR
// animal := CreateHuman ;
34995: LD_ADDR_VAR 0 12
34999: PUSH
35000: CALL_OW 44
35004: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35005: LD_VAR 0 12
35009: PPUSH
35010: LD_VAR 0 9
35014: PPUSH
35015: LD_INT 0
35017: PPUSH
35018: CALL 36655 0 3
// end ;
35022: GO 34976
35024: POP
35025: POP
// end ;
35026: LD_VAR 0 10
35030: RET
// export function WantHeal ( sci , unit ) ; begin
35031: LD_INT 0
35033: PPUSH
// if GetTaskList ( sci ) > 0 then
35034: LD_VAR 0 1
35038: PPUSH
35039: CALL_OW 437
35043: PUSH
35044: LD_INT 0
35046: GREATER
35047: IFFALSE 35117
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35049: LD_VAR 0 1
35053: PPUSH
35054: CALL_OW 437
35058: PUSH
35059: LD_INT 1
35061: ARRAY
35062: PUSH
35063: LD_INT 1
35065: ARRAY
35066: PUSH
35067: LD_STRING l
35069: EQUAL
35070: PUSH
35071: LD_VAR 0 1
35075: PPUSH
35076: CALL_OW 437
35080: PUSH
35081: LD_INT 1
35083: ARRAY
35084: PUSH
35085: LD_INT 4
35087: ARRAY
35088: PUSH
35089: LD_VAR 0 2
35093: EQUAL
35094: AND
35095: IFFALSE 35107
// result := true else
35097: LD_ADDR_VAR 0 3
35101: PUSH
35102: LD_INT 1
35104: ST_TO_ADDR
35105: GO 35115
// result := false ;
35107: LD_ADDR_VAR 0 3
35111: PUSH
35112: LD_INT 0
35114: ST_TO_ADDR
// end else
35115: GO 35125
// result := false ;
35117: LD_ADDR_VAR 0 3
35121: PUSH
35122: LD_INT 0
35124: ST_TO_ADDR
// end ;
35125: LD_VAR 0 3
35129: RET
// export function HealTarget ( sci ) ; begin
35130: LD_INT 0
35132: PPUSH
// if not sci then
35133: LD_VAR 0 1
35137: NOT
35138: IFFALSE 35142
// exit ;
35140: GO 35207
// result := 0 ;
35142: LD_ADDR_VAR 0 2
35146: PUSH
35147: LD_INT 0
35149: ST_TO_ADDR
// if GetTaskList ( sci ) then
35150: LD_VAR 0 1
35154: PPUSH
35155: CALL_OW 437
35159: IFFALSE 35207
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35161: LD_VAR 0 1
35165: PPUSH
35166: CALL_OW 437
35170: PUSH
35171: LD_INT 1
35173: ARRAY
35174: PUSH
35175: LD_INT 1
35177: ARRAY
35178: PUSH
35179: LD_STRING l
35181: EQUAL
35182: IFFALSE 35207
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35184: LD_ADDR_VAR 0 2
35188: PUSH
35189: LD_VAR 0 1
35193: PPUSH
35194: CALL_OW 437
35198: PUSH
35199: LD_INT 1
35201: ARRAY
35202: PUSH
35203: LD_INT 4
35205: ARRAY
35206: ST_TO_ADDR
// end ;
35207: LD_VAR 0 2
35211: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35212: LD_INT 0
35214: PPUSH
35215: PPUSH
35216: PPUSH
35217: PPUSH
// if not base_units then
35218: LD_VAR 0 1
35222: NOT
35223: IFFALSE 35227
// exit ;
35225: GO 35314
// result := false ;
35227: LD_ADDR_VAR 0 2
35231: PUSH
35232: LD_INT 0
35234: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35235: LD_ADDR_VAR 0 5
35239: PUSH
35240: LD_VAR 0 1
35244: PPUSH
35245: LD_INT 21
35247: PUSH
35248: LD_INT 3
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PPUSH
35255: CALL_OW 72
35259: ST_TO_ADDR
// if not tmp then
35260: LD_VAR 0 5
35264: NOT
35265: IFFALSE 35269
// exit ;
35267: GO 35314
// for i in tmp do
35269: LD_ADDR_VAR 0 3
35273: PUSH
35274: LD_VAR 0 5
35278: PUSH
35279: FOR_IN
35280: IFFALSE 35312
// begin result := EnemyInRange ( i , 22 ) ;
35282: LD_ADDR_VAR 0 2
35286: PUSH
35287: LD_VAR 0 3
35291: PPUSH
35292: LD_INT 22
35294: PPUSH
35295: CALL 32901 0 2
35299: ST_TO_ADDR
// if result then
35300: LD_VAR 0 2
35304: IFFALSE 35310
// exit ;
35306: POP
35307: POP
35308: GO 35314
// end ;
35310: GO 35279
35312: POP
35313: POP
// end ;
35314: LD_VAR 0 2
35318: RET
// export function FilterByTag ( units , tag ) ; begin
35319: LD_INT 0
35321: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35322: LD_ADDR_VAR 0 3
35326: PUSH
35327: LD_VAR 0 1
35331: PPUSH
35332: LD_INT 120
35334: PUSH
35335: LD_VAR 0 2
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PPUSH
35344: CALL_OW 72
35348: ST_TO_ADDR
// end ;
35349: LD_VAR 0 3
35353: RET
// export function IsDriver ( un ) ; begin
35354: LD_INT 0
35356: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35357: LD_ADDR_VAR 0 2
35361: PUSH
35362: LD_VAR 0 1
35366: PUSH
35367: LD_INT 55
35369: PUSH
35370: EMPTY
35371: LIST
35372: PPUSH
35373: CALL_OW 69
35377: IN
35378: ST_TO_ADDR
// end ;
35379: LD_VAR 0 2
35383: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35384: LD_INT 0
35386: PPUSH
35387: PPUSH
// list := [ ] ;
35388: LD_ADDR_VAR 0 5
35392: PUSH
35393: EMPTY
35394: ST_TO_ADDR
// case d of 0 :
35395: LD_VAR 0 3
35399: PUSH
35400: LD_INT 0
35402: DOUBLE
35403: EQUAL
35404: IFTRUE 35408
35406: GO 35541
35408: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35409: LD_ADDR_VAR 0 5
35413: PUSH
35414: LD_VAR 0 1
35418: PUSH
35419: LD_INT 4
35421: MINUS
35422: PUSH
35423: LD_VAR 0 2
35427: PUSH
35428: LD_INT 4
35430: MINUS
35431: PUSH
35432: LD_INT 2
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: PUSH
35440: LD_VAR 0 1
35444: PUSH
35445: LD_INT 3
35447: MINUS
35448: PUSH
35449: LD_VAR 0 2
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: PUSH
35462: LD_VAR 0 1
35466: PUSH
35467: LD_INT 4
35469: PLUS
35470: PUSH
35471: LD_VAR 0 2
35475: PUSH
35476: LD_INT 4
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: LIST
35483: PUSH
35484: LD_VAR 0 1
35488: PUSH
35489: LD_INT 3
35491: PLUS
35492: PUSH
35493: LD_VAR 0 2
35497: PUSH
35498: LD_INT 3
35500: PLUS
35501: PUSH
35502: LD_INT 5
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: LIST
35509: PUSH
35510: LD_VAR 0 1
35514: PUSH
35515: LD_VAR 0 2
35519: PUSH
35520: LD_INT 4
35522: PLUS
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: ST_TO_ADDR
// end ; 1 :
35539: GO 36239
35541: LD_INT 1
35543: DOUBLE
35544: EQUAL
35545: IFTRUE 35549
35547: GO 35682
35549: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35550: LD_ADDR_VAR 0 5
35554: PUSH
35555: LD_VAR 0 1
35559: PUSH
35560: LD_VAR 0 2
35564: PUSH
35565: LD_INT 4
35567: MINUS
35568: PUSH
35569: LD_INT 3
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: LIST
35576: PUSH
35577: LD_VAR 0 1
35581: PUSH
35582: LD_INT 3
35584: MINUS
35585: PUSH
35586: LD_VAR 0 2
35590: PUSH
35591: LD_INT 3
35593: MINUS
35594: PUSH
35595: LD_INT 2
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: LIST
35602: PUSH
35603: LD_VAR 0 1
35607: PUSH
35608: LD_INT 4
35610: MINUS
35611: PUSH
35612: LD_VAR 0 2
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: PUSH
35625: LD_VAR 0 1
35629: PUSH
35630: LD_VAR 0 2
35634: PUSH
35635: LD_INT 3
35637: PLUS
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: LIST
35646: PUSH
35647: LD_VAR 0 1
35651: PUSH
35652: LD_INT 4
35654: PLUS
35655: PUSH
35656: LD_VAR 0 2
35660: PUSH
35661: LD_INT 4
35663: PLUS
35664: PUSH
35665: LD_INT 5
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: ST_TO_ADDR
// end ; 2 :
35680: GO 36239
35682: LD_INT 2
35684: DOUBLE
35685: EQUAL
35686: IFTRUE 35690
35688: GO 35819
35690: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35691: LD_ADDR_VAR 0 5
35695: PUSH
35696: LD_VAR 0 1
35700: PUSH
35701: LD_VAR 0 2
35705: PUSH
35706: LD_INT 3
35708: MINUS
35709: PUSH
35710: LD_INT 3
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: PUSH
35718: LD_VAR 0 1
35722: PUSH
35723: LD_INT 4
35725: PLUS
35726: PUSH
35727: LD_VAR 0 2
35731: PUSH
35732: LD_INT 4
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: PUSH
35740: LD_VAR 0 1
35744: PUSH
35745: LD_VAR 0 2
35749: PUSH
35750: LD_INT 4
35752: PLUS
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: PUSH
35762: LD_VAR 0 1
35766: PUSH
35767: LD_INT 3
35769: MINUS
35770: PUSH
35771: LD_VAR 0 2
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: PUSH
35784: LD_VAR 0 1
35788: PUSH
35789: LD_INT 4
35791: MINUS
35792: PUSH
35793: LD_VAR 0 2
35797: PUSH
35798: LD_INT 4
35800: MINUS
35801: PUSH
35802: LD_INT 2
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: ST_TO_ADDR
// end ; 3 :
35817: GO 36239
35819: LD_INT 3
35821: DOUBLE
35822: EQUAL
35823: IFTRUE 35827
35825: GO 35960
35827: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35828: LD_ADDR_VAR 0 5
35832: PUSH
35833: LD_VAR 0 1
35837: PUSH
35838: LD_INT 3
35840: PLUS
35841: PUSH
35842: LD_VAR 0 2
35846: PUSH
35847: LD_INT 4
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: LIST
35854: PUSH
35855: LD_VAR 0 1
35859: PUSH
35860: LD_INT 4
35862: PLUS
35863: PUSH
35864: LD_VAR 0 2
35868: PUSH
35869: LD_INT 4
35871: PLUS
35872: PUSH
35873: LD_INT 5
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: PUSH
35881: LD_VAR 0 1
35885: PUSH
35886: LD_INT 4
35888: MINUS
35889: PUSH
35890: LD_VAR 0 2
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: LIST
35902: PUSH
35903: LD_VAR 0 1
35907: PUSH
35908: LD_VAR 0 2
35912: PUSH
35913: LD_INT 4
35915: MINUS
35916: PUSH
35917: LD_INT 3
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: PUSH
35925: LD_VAR 0 1
35929: PUSH
35930: LD_INT 3
35932: MINUS
35933: PUSH
35934: LD_VAR 0 2
35938: PUSH
35939: LD_INT 3
35941: MINUS
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: LIST
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: ST_TO_ADDR
// end ; 4 :
35958: GO 36239
35960: LD_INT 4
35962: DOUBLE
35963: EQUAL
35964: IFTRUE 35968
35966: GO 36101
35968: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35969: LD_ADDR_VAR 0 5
35973: PUSH
35974: LD_VAR 0 1
35978: PUSH
35979: LD_VAR 0 2
35983: PUSH
35984: LD_INT 4
35986: PLUS
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: PUSH
35996: LD_VAR 0 1
36000: PUSH
36001: LD_INT 3
36003: PLUS
36004: PUSH
36005: LD_VAR 0 2
36009: PUSH
36010: LD_INT 3
36012: PLUS
36013: PUSH
36014: LD_INT 5
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: LIST
36021: PUSH
36022: LD_VAR 0 1
36026: PUSH
36027: LD_INT 4
36029: PLUS
36030: PUSH
36031: LD_VAR 0 2
36035: PUSH
36036: LD_INT 4
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: PUSH
36044: LD_VAR 0 1
36048: PUSH
36049: LD_VAR 0 2
36053: PUSH
36054: LD_INT 3
36056: MINUS
36057: PUSH
36058: LD_INT 3
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: LIST
36065: PUSH
36066: LD_VAR 0 1
36070: PUSH
36071: LD_INT 4
36073: MINUS
36074: PUSH
36075: LD_VAR 0 2
36079: PUSH
36080: LD_INT 4
36082: MINUS
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: ST_TO_ADDR
// end ; 5 :
36099: GO 36239
36101: LD_INT 5
36103: DOUBLE
36104: EQUAL
36105: IFTRUE 36109
36107: GO 36238
36109: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36110: LD_ADDR_VAR 0 5
36114: PUSH
36115: LD_VAR 0 1
36119: PUSH
36120: LD_INT 4
36122: MINUS
36123: PUSH
36124: LD_VAR 0 2
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: LIST
36136: PUSH
36137: LD_VAR 0 1
36141: PUSH
36142: LD_VAR 0 2
36146: PUSH
36147: LD_INT 4
36149: MINUS
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: PUSH
36159: LD_VAR 0 1
36163: PUSH
36164: LD_INT 4
36166: PLUS
36167: PUSH
36168: LD_VAR 0 2
36172: PUSH
36173: LD_INT 4
36175: PLUS
36176: PUSH
36177: LD_INT 5
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: LIST
36184: PUSH
36185: LD_VAR 0 1
36189: PUSH
36190: LD_INT 3
36192: PLUS
36193: PUSH
36194: LD_VAR 0 2
36198: PUSH
36199: LD_INT 4
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: PUSH
36207: LD_VAR 0 1
36211: PUSH
36212: LD_VAR 0 2
36216: PUSH
36217: LD_INT 3
36219: PLUS
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: ST_TO_ADDR
// end ; end ;
36236: GO 36239
36238: POP
// result := list ;
36239: LD_ADDR_VAR 0 4
36243: PUSH
36244: LD_VAR 0 5
36248: ST_TO_ADDR
// end ;
36249: LD_VAR 0 4
36253: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36254: LD_INT 0
36256: PPUSH
36257: PPUSH
36258: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36259: LD_VAR 0 1
36263: NOT
36264: PUSH
36265: LD_VAR 0 2
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: LD_INT 3
36278: PUSH
36279: LD_INT 4
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: IN
36288: NOT
36289: OR
36290: IFFALSE 36294
// exit ;
36292: GO 36377
// tmp := [ ] ;
36294: LD_ADDR_VAR 0 5
36298: PUSH
36299: EMPTY
36300: ST_TO_ADDR
// for i in units do
36301: LD_ADDR_VAR 0 4
36305: PUSH
36306: LD_VAR 0 1
36310: PUSH
36311: FOR_IN
36312: IFFALSE 36346
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36314: LD_ADDR_VAR 0 5
36318: PUSH
36319: LD_VAR 0 5
36323: PPUSH
36324: LD_VAR 0 4
36328: PPUSH
36329: LD_VAR 0 2
36333: PPUSH
36334: CALL_OW 259
36338: PPUSH
36339: CALL 37737 0 2
36343: ST_TO_ADDR
36344: GO 36311
36346: POP
36347: POP
// if not tmp then
36348: LD_VAR 0 5
36352: NOT
36353: IFFALSE 36357
// exit ;
36355: GO 36377
// result := SortListByListDesc ( units , tmp ) ;
36357: LD_ADDR_VAR 0 3
36361: PUSH
36362: LD_VAR 0 1
36366: PPUSH
36367: LD_VAR 0 5
36371: PPUSH
36372: CALL_OW 77
36376: ST_TO_ADDR
// end ;
36377: LD_VAR 0 3
36381: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36382: LD_INT 0
36384: PPUSH
36385: PPUSH
36386: PPUSH
// result := false ;
36387: LD_ADDR_VAR 0 3
36391: PUSH
36392: LD_INT 0
36394: ST_TO_ADDR
// if not building then
36395: LD_VAR 0 2
36399: NOT
36400: IFFALSE 36404
// exit ;
36402: GO 36542
// x := GetX ( building ) ;
36404: LD_ADDR_VAR 0 4
36408: PUSH
36409: LD_VAR 0 2
36413: PPUSH
36414: CALL_OW 250
36418: ST_TO_ADDR
// y := GetY ( building ) ;
36419: LD_ADDR_VAR 0 5
36423: PUSH
36424: LD_VAR 0 2
36428: PPUSH
36429: CALL_OW 251
36433: ST_TO_ADDR
// if not x or not y then
36434: LD_VAR 0 4
36438: NOT
36439: PUSH
36440: LD_VAR 0 5
36444: NOT
36445: OR
36446: IFFALSE 36450
// exit ;
36448: GO 36542
// if GetTaskList ( unit ) then
36450: LD_VAR 0 1
36454: PPUSH
36455: CALL_OW 437
36459: IFFALSE 36542
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36461: LD_STRING e
36463: PUSH
36464: LD_VAR 0 1
36468: PPUSH
36469: CALL_OW 437
36473: PUSH
36474: LD_INT 1
36476: ARRAY
36477: PUSH
36478: LD_INT 1
36480: ARRAY
36481: EQUAL
36482: PUSH
36483: LD_VAR 0 4
36487: PUSH
36488: LD_VAR 0 1
36492: PPUSH
36493: CALL_OW 437
36497: PUSH
36498: LD_INT 1
36500: ARRAY
36501: PUSH
36502: LD_INT 2
36504: ARRAY
36505: EQUAL
36506: AND
36507: PUSH
36508: LD_VAR 0 5
36512: PUSH
36513: LD_VAR 0 1
36517: PPUSH
36518: CALL_OW 437
36522: PUSH
36523: LD_INT 1
36525: ARRAY
36526: PUSH
36527: LD_INT 3
36529: ARRAY
36530: EQUAL
36531: AND
36532: IFFALSE 36542
// result := true end ;
36534: LD_ADDR_VAR 0 3
36538: PUSH
36539: LD_INT 1
36541: ST_TO_ADDR
// end ;
36542: LD_VAR 0 3
36546: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36547: LD_INT 0
36549: PPUSH
// result := false ;
36550: LD_ADDR_VAR 0 4
36554: PUSH
36555: LD_INT 0
36557: ST_TO_ADDR
// if GetTaskList ( unit ) then
36558: LD_VAR 0 1
36562: PPUSH
36563: CALL_OW 437
36567: IFFALSE 36650
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36569: LD_STRING M
36571: PUSH
36572: LD_VAR 0 1
36576: PPUSH
36577: CALL_OW 437
36581: PUSH
36582: LD_INT 1
36584: ARRAY
36585: PUSH
36586: LD_INT 1
36588: ARRAY
36589: EQUAL
36590: PUSH
36591: LD_VAR 0 2
36595: PUSH
36596: LD_VAR 0 1
36600: PPUSH
36601: CALL_OW 437
36605: PUSH
36606: LD_INT 1
36608: ARRAY
36609: PUSH
36610: LD_INT 2
36612: ARRAY
36613: EQUAL
36614: AND
36615: PUSH
36616: LD_VAR 0 3
36620: PUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 437
36630: PUSH
36631: LD_INT 1
36633: ARRAY
36634: PUSH
36635: LD_INT 3
36637: ARRAY
36638: EQUAL
36639: AND
36640: IFFALSE 36650
// result := true ;
36642: LD_ADDR_VAR 0 4
36646: PUSH
36647: LD_INT 1
36649: ST_TO_ADDR
// end ; end ;
36650: LD_VAR 0 4
36654: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36655: LD_INT 0
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
// if not unit or not area then
36661: LD_VAR 0 1
36665: NOT
36666: PUSH
36667: LD_VAR 0 2
36671: NOT
36672: OR
36673: IFFALSE 36677
// exit ;
36675: GO 36840
// tmp := AreaToList ( area , i ) ;
36677: LD_ADDR_VAR 0 6
36681: PUSH
36682: LD_VAR 0 2
36686: PPUSH
36687: LD_VAR 0 5
36691: PPUSH
36692: CALL_OW 517
36696: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36697: LD_ADDR_VAR 0 5
36701: PUSH
36702: DOUBLE
36703: LD_INT 1
36705: DEC
36706: ST_TO_ADDR
36707: LD_VAR 0 6
36711: PUSH
36712: LD_INT 1
36714: ARRAY
36715: PUSH
36716: FOR_TO
36717: IFFALSE 36838
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36719: LD_ADDR_VAR 0 7
36723: PUSH
36724: LD_VAR 0 6
36728: PUSH
36729: LD_INT 1
36731: ARRAY
36732: PUSH
36733: LD_VAR 0 5
36737: ARRAY
36738: PUSH
36739: LD_VAR 0 6
36743: PUSH
36744: LD_INT 2
36746: ARRAY
36747: PUSH
36748: LD_VAR 0 5
36752: ARRAY
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
36758: LD_INT 92
36760: PUSH
36761: LD_VAR 0 7
36765: PUSH
36766: LD_INT 1
36768: ARRAY
36769: PUSH
36770: LD_VAR 0 7
36774: PUSH
36775: LD_INT 2
36777: ARRAY
36778: PUSH
36779: LD_INT 3
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: PPUSH
36788: CALL_OW 69
36792: PUSH
36793: LD_INT 0
36795: EQUAL
36796: IFFALSE 36836
// begin PlaceUnitArea ( unit , area , mode ) ;
36798: LD_VAR 0 1
36802: PPUSH
36803: LD_VAR 0 2
36807: PPUSH
36808: LD_VAR 0 3
36812: PPUSH
36813: CALL_OW 49
// result := IsPlaced ( unit ) ;
36817: LD_ADDR_VAR 0 4
36821: PUSH
36822: LD_VAR 0 1
36826: PPUSH
36827: CALL_OW 305
36831: ST_TO_ADDR
// exit ;
36832: POP
36833: POP
36834: GO 36840
// end ; end ;
36836: GO 36716
36838: POP
36839: POP
// end ;
36840: LD_VAR 0 4
36844: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36845: LD_INT 0
36847: PPUSH
36848: PPUSH
36849: PPUSH
// if not side or side > 8 then
36850: LD_VAR 0 1
36854: NOT
36855: PUSH
36856: LD_VAR 0 1
36860: PUSH
36861: LD_INT 8
36863: GREATER
36864: OR
36865: IFFALSE 36869
// exit ;
36867: GO 37056
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36869: LD_ADDR_VAR 0 4
36873: PUSH
36874: LD_INT 22
36876: PUSH
36877: LD_VAR 0 1
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 21
36888: PUSH
36889: LD_INT 3
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PPUSH
36900: CALL_OW 69
36904: ST_TO_ADDR
// if not tmp then
36905: LD_VAR 0 4
36909: NOT
36910: IFFALSE 36914
// exit ;
36912: GO 37056
// enable_addtolog := true ;
36914: LD_ADDR_OWVAR 81
36918: PUSH
36919: LD_INT 1
36921: ST_TO_ADDR
// AddToLog ( [ ) ;
36922: LD_STRING [
36924: PPUSH
36925: CALL_OW 561
// for i in tmp do
36929: LD_ADDR_VAR 0 3
36933: PUSH
36934: LD_VAR 0 4
36938: PUSH
36939: FOR_IN
36940: IFFALSE 37047
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36942: LD_STRING [
36944: PUSH
36945: LD_VAR 0 3
36949: PPUSH
36950: CALL_OW 266
36954: STR
36955: PUSH
36956: LD_STRING , 
36958: STR
36959: PUSH
36960: LD_VAR 0 3
36964: PPUSH
36965: CALL_OW 250
36969: STR
36970: PUSH
36971: LD_STRING , 
36973: STR
36974: PUSH
36975: LD_VAR 0 3
36979: PPUSH
36980: CALL_OW 251
36984: STR
36985: PUSH
36986: LD_STRING , 
36988: STR
36989: PUSH
36990: LD_VAR 0 3
36994: PPUSH
36995: CALL_OW 254
36999: STR
37000: PUSH
37001: LD_STRING , 
37003: STR
37004: PUSH
37005: LD_VAR 0 3
37009: PPUSH
37010: LD_INT 1
37012: PPUSH
37013: CALL_OW 268
37017: STR
37018: PUSH
37019: LD_STRING , 
37021: STR
37022: PUSH
37023: LD_VAR 0 3
37027: PPUSH
37028: LD_INT 2
37030: PPUSH
37031: CALL_OW 268
37035: STR
37036: PUSH
37037: LD_STRING ],
37039: STR
37040: PPUSH
37041: CALL_OW 561
// end ;
37045: GO 36939
37047: POP
37048: POP
// AddToLog ( ]; ) ;
37049: LD_STRING ];
37051: PPUSH
37052: CALL_OW 561
// end ;
37056: LD_VAR 0 2
37060: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37061: LD_INT 0
37063: PPUSH
37064: PPUSH
37065: PPUSH
37066: PPUSH
37067: PPUSH
// if not area or not rate or not max then
37068: LD_VAR 0 1
37072: NOT
37073: PUSH
37074: LD_VAR 0 2
37078: NOT
37079: OR
37080: PUSH
37081: LD_VAR 0 4
37085: NOT
37086: OR
37087: IFFALSE 37091
// exit ;
37089: GO 37280
// while 1 do
37091: LD_INT 1
37093: IFFALSE 37280
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37095: LD_ADDR_VAR 0 9
37099: PUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: LD_INT 1
37107: PPUSH
37108: CALL_OW 287
37112: PUSH
37113: LD_INT 10
37115: MUL
37116: ST_TO_ADDR
// r := rate / 10 ;
37117: LD_ADDR_VAR 0 7
37121: PUSH
37122: LD_VAR 0 2
37126: PUSH
37127: LD_INT 10
37129: DIVREAL
37130: ST_TO_ADDR
// time := 1 1$00 ;
37131: LD_ADDR_VAR 0 8
37135: PUSH
37136: LD_INT 2100
37138: ST_TO_ADDR
// if amount < min then
37139: LD_VAR 0 9
37143: PUSH
37144: LD_VAR 0 3
37148: LESS
37149: IFFALSE 37167
// r := r * 2 else
37151: LD_ADDR_VAR 0 7
37155: PUSH
37156: LD_VAR 0 7
37160: PUSH
37161: LD_INT 2
37163: MUL
37164: ST_TO_ADDR
37165: GO 37193
// if amount > max then
37167: LD_VAR 0 9
37171: PUSH
37172: LD_VAR 0 4
37176: GREATER
37177: IFFALSE 37193
// r := r / 2 ;
37179: LD_ADDR_VAR 0 7
37183: PUSH
37184: LD_VAR 0 7
37188: PUSH
37189: LD_INT 2
37191: DIVREAL
37192: ST_TO_ADDR
// time := time / r ;
37193: LD_ADDR_VAR 0 8
37197: PUSH
37198: LD_VAR 0 8
37202: PUSH
37203: LD_VAR 0 7
37207: DIVREAL
37208: ST_TO_ADDR
// if time < 0 then
37209: LD_VAR 0 8
37213: PUSH
37214: LD_INT 0
37216: LESS
37217: IFFALSE 37234
// time := time * - 1 ;
37219: LD_ADDR_VAR 0 8
37223: PUSH
37224: LD_VAR 0 8
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: MUL
37233: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37234: LD_VAR 0 8
37238: PUSH
37239: LD_INT 35
37241: PPUSH
37242: LD_INT 875
37244: PPUSH
37245: CALL_OW 12
37249: PLUS
37250: PPUSH
37251: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37255: LD_INT 1
37257: PPUSH
37258: LD_INT 5
37260: PPUSH
37261: CALL_OW 12
37265: PPUSH
37266: LD_VAR 0 1
37270: PPUSH
37271: LD_INT 1
37273: PPUSH
37274: CALL_OW 55
// end ;
37278: GO 37091
// end ;
37280: LD_VAR 0 5
37284: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37285: LD_INT 0
37287: PPUSH
37288: PPUSH
37289: PPUSH
37290: PPUSH
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
// if not turrets or not factories then
37295: LD_VAR 0 1
37299: NOT
37300: PUSH
37301: LD_VAR 0 2
37305: NOT
37306: OR
37307: IFFALSE 37311
// exit ;
37309: GO 37618
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37311: LD_ADDR_VAR 0 10
37315: PUSH
37316: LD_INT 5
37318: PUSH
37319: LD_INT 6
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 2
37328: PUSH
37329: LD_INT 4
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 3
37338: PUSH
37339: LD_INT 5
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 24
37353: PUSH
37354: LD_INT 25
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 23
37363: PUSH
37364: LD_INT 27
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 42
37377: PUSH
37378: LD_INT 43
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 44
37387: PUSH
37388: LD_INT 46
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 45
37397: PUSH
37398: LD_INT 47
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: LIST
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
// result := [ ] ;
37415: LD_ADDR_VAR 0 3
37419: PUSH
37420: EMPTY
37421: ST_TO_ADDR
// for i in turrets do
37422: LD_ADDR_VAR 0 4
37426: PUSH
37427: LD_VAR 0 1
37431: PUSH
37432: FOR_IN
37433: IFFALSE 37616
// begin nat := GetNation ( i ) ;
37435: LD_ADDR_VAR 0 7
37439: PUSH
37440: LD_VAR 0 4
37444: PPUSH
37445: CALL_OW 248
37449: ST_TO_ADDR
// weapon := 0 ;
37450: LD_ADDR_VAR 0 8
37454: PUSH
37455: LD_INT 0
37457: ST_TO_ADDR
// if not nat then
37458: LD_VAR 0 7
37462: NOT
37463: IFFALSE 37467
// continue ;
37465: GO 37432
// for j in list [ nat ] do
37467: LD_ADDR_VAR 0 5
37471: PUSH
37472: LD_VAR 0 10
37476: PUSH
37477: LD_VAR 0 7
37481: ARRAY
37482: PUSH
37483: FOR_IN
37484: IFFALSE 37525
// if GetBWeapon ( i ) = j [ 1 ] then
37486: LD_VAR 0 4
37490: PPUSH
37491: CALL_OW 269
37495: PUSH
37496: LD_VAR 0 5
37500: PUSH
37501: LD_INT 1
37503: ARRAY
37504: EQUAL
37505: IFFALSE 37523
// begin weapon := j [ 2 ] ;
37507: LD_ADDR_VAR 0 8
37511: PUSH
37512: LD_VAR 0 5
37516: PUSH
37517: LD_INT 2
37519: ARRAY
37520: ST_TO_ADDR
// break ;
37521: GO 37525
// end ;
37523: GO 37483
37525: POP
37526: POP
// if not weapon then
37527: LD_VAR 0 8
37531: NOT
37532: IFFALSE 37536
// continue ;
37534: GO 37432
// for k in factories do
37536: LD_ADDR_VAR 0 6
37540: PUSH
37541: LD_VAR 0 2
37545: PUSH
37546: FOR_IN
37547: IFFALSE 37612
// begin weapons := AvailableWeaponList ( k ) ;
37549: LD_ADDR_VAR 0 9
37553: PUSH
37554: LD_VAR 0 6
37558: PPUSH
37559: CALL_OW 478
37563: ST_TO_ADDR
// if not weapons then
37564: LD_VAR 0 9
37568: NOT
37569: IFFALSE 37573
// continue ;
37571: GO 37546
// if weapon in weapons then
37573: LD_VAR 0 8
37577: PUSH
37578: LD_VAR 0 9
37582: IN
37583: IFFALSE 37610
// begin result := [ i , weapon ] ;
37585: LD_ADDR_VAR 0 3
37589: PUSH
37590: LD_VAR 0 4
37594: PUSH
37595: LD_VAR 0 8
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: ST_TO_ADDR
// exit ;
37604: POP
37605: POP
37606: POP
37607: POP
37608: GO 37618
// end ; end ;
37610: GO 37546
37612: POP
37613: POP
// end ;
37614: GO 37432
37616: POP
37617: POP
// end ;
37618: LD_VAR 0 3
37622: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37623: LD_INT 0
37625: PPUSH
// if not side or side > 8 then
37626: LD_VAR 0 3
37630: NOT
37631: PUSH
37632: LD_VAR 0 3
37636: PUSH
37637: LD_INT 8
37639: GREATER
37640: OR
37641: IFFALSE 37645
// exit ;
37643: GO 37704
// if not range then
37645: LD_VAR 0 4
37649: NOT
37650: IFFALSE 37661
// range := - 12 ;
37652: LD_ADDR_VAR 0 4
37656: PUSH
37657: LD_INT 12
37659: NEG
37660: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37661: LD_VAR 0 1
37665: PPUSH
37666: LD_VAR 0 2
37670: PPUSH
37671: LD_VAR 0 3
37675: PPUSH
37676: LD_VAR 0 4
37680: PPUSH
37681: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37685: LD_VAR 0 1
37689: PPUSH
37690: LD_VAR 0 2
37694: PPUSH
37695: LD_VAR 0 3
37699: PPUSH
37700: CALL_OW 331
// end ;
37704: LD_VAR 0 5
37708: RET
// export function Video ( mode ) ; begin
37709: LD_INT 0
37711: PPUSH
// ingame_video = mode ;
37712: LD_ADDR_OWVAR 52
37716: PUSH
37717: LD_VAR 0 1
37721: ST_TO_ADDR
// interface_hidden = mode ;
37722: LD_ADDR_OWVAR 54
37726: PUSH
37727: LD_VAR 0 1
37731: ST_TO_ADDR
// end ;
37732: LD_VAR 0 2
37736: RET
// export function Join ( array , element ) ; begin
37737: LD_INT 0
37739: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37740: LD_ADDR_VAR 0 3
37744: PUSH
37745: LD_VAR 0 1
37749: PPUSH
37750: LD_VAR 0 1
37754: PUSH
37755: LD_INT 1
37757: PLUS
37758: PPUSH
37759: LD_VAR 0 2
37763: PPUSH
37764: CALL_OW 1
37768: ST_TO_ADDR
// end ;
37769: LD_VAR 0 3
37773: RET
// export function JoinUnion ( array , element ) ; begin
37774: LD_INT 0
37776: PPUSH
// result := array union element ;
37777: LD_ADDR_VAR 0 3
37781: PUSH
37782: LD_VAR 0 1
37786: PUSH
37787: LD_VAR 0 2
37791: UNION
37792: ST_TO_ADDR
// end ;
37793: LD_VAR 0 3
37797: RET
// export function GetBehemoths ( side ) ; begin
37798: LD_INT 0
37800: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
37801: LD_ADDR_VAR 0 2
37805: PUSH
37806: LD_INT 22
37808: PUSH
37809: LD_VAR 0 1
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 31
37820: PUSH
37821: LD_INT 25
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PPUSH
37832: CALL_OW 69
37836: ST_TO_ADDR
// end ;
37837: LD_VAR 0 2
37841: RET
// export function Shuffle ( array ) ; var i , index ; begin
37842: LD_INT 0
37844: PPUSH
37845: PPUSH
37846: PPUSH
// result := [ ] ;
37847: LD_ADDR_VAR 0 2
37851: PUSH
37852: EMPTY
37853: ST_TO_ADDR
// if not array then
37854: LD_VAR 0 1
37858: NOT
37859: IFFALSE 37863
// exit ;
37861: GO 37962
// Randomize ;
37863: CALL_OW 10
// for i = array downto 1 do
37867: LD_ADDR_VAR 0 3
37871: PUSH
37872: DOUBLE
37873: LD_VAR 0 1
37877: INC
37878: ST_TO_ADDR
37879: LD_INT 1
37881: PUSH
37882: FOR_DOWNTO
37883: IFFALSE 37960
// begin index := rand ( 1 , array ) ;
37885: LD_ADDR_VAR 0 4
37889: PUSH
37890: LD_INT 1
37892: PPUSH
37893: LD_VAR 0 1
37897: PPUSH
37898: CALL_OW 12
37902: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37903: LD_ADDR_VAR 0 2
37907: PUSH
37908: LD_VAR 0 2
37912: PPUSH
37913: LD_VAR 0 2
37917: PUSH
37918: LD_INT 1
37920: PLUS
37921: PPUSH
37922: LD_VAR 0 1
37926: PUSH
37927: LD_VAR 0 4
37931: ARRAY
37932: PPUSH
37933: CALL_OW 2
37937: ST_TO_ADDR
// array := Delete ( array , index ) ;
37938: LD_ADDR_VAR 0 1
37942: PUSH
37943: LD_VAR 0 1
37947: PPUSH
37948: LD_VAR 0 4
37952: PPUSH
37953: CALL_OW 3
37957: ST_TO_ADDR
// end ;
37958: GO 37882
37960: POP
37961: POP
// end ;
37962: LD_VAR 0 2
37966: RET
// export function GetBaseMaterials ( base ) ; begin
37967: LD_INT 0
37969: PPUSH
// result := [ 0 , 0 , 0 ] ;
37970: LD_ADDR_VAR 0 2
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: LIST
37988: ST_TO_ADDR
// if not base then
37989: LD_VAR 0 1
37993: NOT
37994: IFFALSE 37998
// exit ;
37996: GO 38047
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37998: LD_ADDR_VAR 0 2
38002: PUSH
38003: LD_VAR 0 1
38007: PPUSH
38008: LD_INT 1
38010: PPUSH
38011: CALL_OW 275
38015: PUSH
38016: LD_VAR 0 1
38020: PPUSH
38021: LD_INT 2
38023: PPUSH
38024: CALL_OW 275
38028: PUSH
38029: LD_VAR 0 1
38033: PPUSH
38034: LD_INT 3
38036: PPUSH
38037: CALL_OW 275
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
// end ;
38047: LD_VAR 0 2
38051: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38052: LD_INT 0
38054: PPUSH
38055: PPUSH
// result := array ;
38056: LD_ADDR_VAR 0 3
38060: PUSH
38061: LD_VAR 0 1
38065: ST_TO_ADDR
// if size >= result then
38066: LD_VAR 0 2
38070: PUSH
38071: LD_VAR 0 3
38075: GREATEREQUAL
38076: IFFALSE 38080
// exit ;
38078: GO 38130
// if size then
38080: LD_VAR 0 2
38084: IFFALSE 38130
// for i := array downto size do
38086: LD_ADDR_VAR 0 4
38090: PUSH
38091: DOUBLE
38092: LD_VAR 0 1
38096: INC
38097: ST_TO_ADDR
38098: LD_VAR 0 2
38102: PUSH
38103: FOR_DOWNTO
38104: IFFALSE 38128
// result := Delete ( result , result ) ;
38106: LD_ADDR_VAR 0 3
38110: PUSH
38111: LD_VAR 0 3
38115: PPUSH
38116: LD_VAR 0 3
38120: PPUSH
38121: CALL_OW 3
38125: ST_TO_ADDR
38126: GO 38103
38128: POP
38129: POP
// end ;
38130: LD_VAR 0 3
38134: RET
// export function ComExit ( unit ) ; var tmp ; begin
38135: LD_INT 0
38137: PPUSH
38138: PPUSH
// if not IsInUnit ( unit ) then
38139: LD_VAR 0 1
38143: PPUSH
38144: CALL_OW 310
38148: NOT
38149: IFFALSE 38153
// exit ;
38151: GO 38213
// tmp := IsInUnit ( unit ) ;
38153: LD_ADDR_VAR 0 3
38157: PUSH
38158: LD_VAR 0 1
38162: PPUSH
38163: CALL_OW 310
38167: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38168: LD_VAR 0 3
38172: PPUSH
38173: CALL_OW 247
38177: PUSH
38178: LD_INT 2
38180: EQUAL
38181: IFFALSE 38194
// ComExitVehicle ( unit ) else
38183: LD_VAR 0 1
38187: PPUSH
38188: CALL_OW 121
38192: GO 38203
// ComExitBuilding ( unit ) ;
38194: LD_VAR 0 1
38198: PPUSH
38199: CALL_OW 122
// result := tmp ;
38203: LD_ADDR_VAR 0 2
38207: PUSH
38208: LD_VAR 0 3
38212: ST_TO_ADDR
// end ;
38213: LD_VAR 0 2
38217: RET
// export function ComExitAll ( units ) ; var i ; begin
38218: LD_INT 0
38220: PPUSH
38221: PPUSH
// if not units then
38222: LD_VAR 0 1
38226: NOT
38227: IFFALSE 38231
// exit ;
38229: GO 38257
// for i in units do
38231: LD_ADDR_VAR 0 3
38235: PUSH
38236: LD_VAR 0 1
38240: PUSH
38241: FOR_IN
38242: IFFALSE 38255
// ComExit ( i ) ;
38244: LD_VAR 0 3
38248: PPUSH
38249: CALL 38135 0 1
38253: GO 38241
38255: POP
38256: POP
// end ;
38257: LD_VAR 0 2
38261: RET
// export function ResetHc ; begin
38262: LD_INT 0
38264: PPUSH
// InitHc ;
38265: CALL_OW 19
// hc_importance := 0 ;
38269: LD_ADDR_OWVAR 32
38273: PUSH
38274: LD_INT 0
38276: ST_TO_ADDR
// end ;
38277: LD_VAR 0 1
38281: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38282: LD_INT 0
38284: PPUSH
38285: PPUSH
38286: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38287: LD_ADDR_VAR 0 6
38291: PUSH
38292: LD_VAR 0 1
38296: PUSH
38297: LD_VAR 0 3
38301: PLUS
38302: PUSH
38303: LD_INT 2
38305: DIV
38306: ST_TO_ADDR
// if _x < 0 then
38307: LD_VAR 0 6
38311: PUSH
38312: LD_INT 0
38314: LESS
38315: IFFALSE 38332
// _x := _x * - 1 ;
38317: LD_ADDR_VAR 0 6
38321: PUSH
38322: LD_VAR 0 6
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: MUL
38331: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38332: LD_ADDR_VAR 0 7
38336: PUSH
38337: LD_VAR 0 2
38341: PUSH
38342: LD_VAR 0 4
38346: PLUS
38347: PUSH
38348: LD_INT 2
38350: DIV
38351: ST_TO_ADDR
// if _y < 0 then
38352: LD_VAR 0 7
38356: PUSH
38357: LD_INT 0
38359: LESS
38360: IFFALSE 38377
// _y := _y * - 1 ;
38362: LD_ADDR_VAR 0 7
38366: PUSH
38367: LD_VAR 0 7
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: MUL
38376: ST_TO_ADDR
// result := [ _x , _y ] ;
38377: LD_ADDR_VAR 0 5
38381: PUSH
38382: LD_VAR 0 6
38386: PUSH
38387: LD_VAR 0 7
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: ST_TO_ADDR
// end ;
38396: LD_VAR 0 5
38400: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38401: LD_INT 0
38403: PPUSH
38404: PPUSH
38405: PPUSH
38406: PPUSH
// task := GetTaskList ( unit ) ;
38407: LD_ADDR_VAR 0 7
38411: PUSH
38412: LD_VAR 0 1
38416: PPUSH
38417: CALL_OW 437
38421: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38422: LD_VAR 0 7
38426: NOT
38427: PUSH
38428: LD_VAR 0 1
38432: PPUSH
38433: LD_VAR 0 2
38437: PPUSH
38438: CALL_OW 308
38442: NOT
38443: AND
38444: IFFALSE 38448
// exit ;
38446: GO 38566
// if IsInArea ( unit , area ) then
38448: LD_VAR 0 1
38452: PPUSH
38453: LD_VAR 0 2
38457: PPUSH
38458: CALL_OW 308
38462: IFFALSE 38480
// begin ComMoveToArea ( unit , goAway ) ;
38464: LD_VAR 0 1
38468: PPUSH
38469: LD_VAR 0 3
38473: PPUSH
38474: CALL_OW 113
// exit ;
38478: GO 38566
// end ; if task [ 1 ] [ 1 ] <> M then
38480: LD_VAR 0 7
38484: PUSH
38485: LD_INT 1
38487: ARRAY
38488: PUSH
38489: LD_INT 1
38491: ARRAY
38492: PUSH
38493: LD_STRING M
38495: NONEQUAL
38496: IFFALSE 38500
// exit ;
38498: GO 38566
// x := task [ 1 ] [ 2 ] ;
38500: LD_ADDR_VAR 0 5
38504: PUSH
38505: LD_VAR 0 7
38509: PUSH
38510: LD_INT 1
38512: ARRAY
38513: PUSH
38514: LD_INT 2
38516: ARRAY
38517: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38518: LD_ADDR_VAR 0 6
38522: PUSH
38523: LD_VAR 0 7
38527: PUSH
38528: LD_INT 1
38530: ARRAY
38531: PUSH
38532: LD_INT 3
38534: ARRAY
38535: ST_TO_ADDR
// if InArea ( x , y , area ) then
38536: LD_VAR 0 5
38540: PPUSH
38541: LD_VAR 0 6
38545: PPUSH
38546: LD_VAR 0 2
38550: PPUSH
38551: CALL_OW 309
38555: IFFALSE 38566
// ComStop ( unit ) ;
38557: LD_VAR 0 1
38561: PPUSH
38562: CALL_OW 141
// end ;
38566: LD_VAR 0 4
38570: RET
// export function Abs ( value ) ; begin
38571: LD_INT 0
38573: PPUSH
// result := value ;
38574: LD_ADDR_VAR 0 2
38578: PUSH
38579: LD_VAR 0 1
38583: ST_TO_ADDR
// if value < 0 then
38584: LD_VAR 0 1
38588: PUSH
38589: LD_INT 0
38591: LESS
38592: IFFALSE 38609
// result := value * - 1 ;
38594: LD_ADDR_VAR 0 2
38598: PUSH
38599: LD_VAR 0 1
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: MUL
38608: ST_TO_ADDR
// end ;
38609: LD_VAR 0 2
38613: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38614: LD_INT 0
38616: PPUSH
38617: PPUSH
38618: PPUSH
38619: PPUSH
38620: PPUSH
38621: PPUSH
38622: PPUSH
38623: PPUSH
// if not unit or not building then
38624: LD_VAR 0 1
38628: NOT
38629: PUSH
38630: LD_VAR 0 2
38634: NOT
38635: OR
38636: IFFALSE 38640
// exit ;
38638: GO 38866
// x := GetX ( building ) ;
38640: LD_ADDR_VAR 0 4
38644: PUSH
38645: LD_VAR 0 2
38649: PPUSH
38650: CALL_OW 250
38654: ST_TO_ADDR
// y := GetY ( building ) ;
38655: LD_ADDR_VAR 0 6
38659: PUSH
38660: LD_VAR 0 2
38664: PPUSH
38665: CALL_OW 251
38669: ST_TO_ADDR
// d := GetDir ( building ) ;
38670: LD_ADDR_VAR 0 8
38674: PUSH
38675: LD_VAR 0 2
38679: PPUSH
38680: CALL_OW 254
38684: ST_TO_ADDR
// r := 4 ;
38685: LD_ADDR_VAR 0 9
38689: PUSH
38690: LD_INT 4
38692: ST_TO_ADDR
// for i := 1 to 5 do
38693: LD_ADDR_VAR 0 10
38697: PUSH
38698: DOUBLE
38699: LD_INT 1
38701: DEC
38702: ST_TO_ADDR
38703: LD_INT 5
38705: PUSH
38706: FOR_TO
38707: IFFALSE 38864
// begin _x := ShiftX ( x , d , r + i ) ;
38709: LD_ADDR_VAR 0 5
38713: PUSH
38714: LD_VAR 0 4
38718: PPUSH
38719: LD_VAR 0 8
38723: PPUSH
38724: LD_VAR 0 9
38728: PUSH
38729: LD_VAR 0 10
38733: PLUS
38734: PPUSH
38735: CALL_OW 272
38739: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38740: LD_ADDR_VAR 0 7
38744: PUSH
38745: LD_VAR 0 6
38749: PPUSH
38750: LD_VAR 0 8
38754: PPUSH
38755: LD_VAR 0 9
38759: PUSH
38760: LD_VAR 0 10
38764: PLUS
38765: PPUSH
38766: CALL_OW 273
38770: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38771: LD_VAR 0 5
38775: PPUSH
38776: LD_VAR 0 7
38780: PPUSH
38781: CALL_OW 488
38785: PUSH
38786: LD_VAR 0 5
38790: PPUSH
38791: LD_VAR 0 7
38795: PPUSH
38796: CALL_OW 428
38800: PPUSH
38801: CALL_OW 247
38805: PUSH
38806: LD_INT 3
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: IN
38816: NOT
38817: AND
38818: IFFALSE 38862
// begin ComMoveXY ( unit , _x , _y ) ;
38820: LD_VAR 0 1
38824: PPUSH
38825: LD_VAR 0 5
38829: PPUSH
38830: LD_VAR 0 7
38834: PPUSH
38835: CALL_OW 111
// result := [ _x , _y ] ;
38839: LD_ADDR_VAR 0 3
38843: PUSH
38844: LD_VAR 0 5
38848: PUSH
38849: LD_VAR 0 7
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: ST_TO_ADDR
// exit ;
38858: POP
38859: POP
38860: GO 38866
// end ; end ;
38862: GO 38706
38864: POP
38865: POP
// end ;
38866: LD_VAR 0 3
38870: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38871: LD_INT 0
38873: PPUSH
38874: PPUSH
38875: PPUSH
// result := 0 ;
38876: LD_ADDR_VAR 0 3
38880: PUSH
38881: LD_INT 0
38883: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38884: LD_VAR 0 1
38888: PUSH
38889: LD_INT 0
38891: LESS
38892: PUSH
38893: LD_VAR 0 1
38897: PUSH
38898: LD_INT 8
38900: GREATER
38901: OR
38902: PUSH
38903: LD_VAR 0 2
38907: PUSH
38908: LD_INT 0
38910: LESS
38911: OR
38912: PUSH
38913: LD_VAR 0 2
38917: PUSH
38918: LD_INT 8
38920: GREATER
38921: OR
38922: IFFALSE 38926
// exit ;
38924: GO 39001
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38926: LD_ADDR_VAR 0 4
38930: PUSH
38931: LD_INT 22
38933: PUSH
38934: LD_VAR 0 2
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PPUSH
38943: CALL_OW 69
38947: PUSH
38948: FOR_IN
38949: IFFALSE 38999
// begin un := UnitShoot ( i ) ;
38951: LD_ADDR_VAR 0 5
38955: PUSH
38956: LD_VAR 0 4
38960: PPUSH
38961: CALL_OW 504
38965: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38966: LD_VAR 0 5
38970: PPUSH
38971: CALL_OW 255
38975: PUSH
38976: LD_VAR 0 1
38980: EQUAL
38981: IFFALSE 38997
// begin result := un ;
38983: LD_ADDR_VAR 0 3
38987: PUSH
38988: LD_VAR 0 5
38992: ST_TO_ADDR
// exit ;
38993: POP
38994: POP
38995: GO 39001
// end ; end ;
38997: GO 38948
38999: POP
39000: POP
// end ;
39001: LD_VAR 0 3
39005: RET
// export function GetCargoBay ( units ) ; begin
39006: LD_INT 0
39008: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39009: LD_ADDR_VAR 0 2
39013: PUSH
39014: LD_VAR 0 1
39018: PPUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 34
39024: PUSH
39025: LD_INT 12
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 34
39034: PUSH
39035: LD_INT 51
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 34
39044: PUSH
39045: LD_INT 32
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 34
39054: PUSH
39055: LD_INT 89
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: PPUSH
39069: CALL_OW 72
39073: ST_TO_ADDR
// end ;
39074: LD_VAR 0 2
39078: RET
// export function Negate ( value ) ; begin
39079: LD_INT 0
39081: PPUSH
// result := not value ;
39082: LD_ADDR_VAR 0 2
39086: PUSH
39087: LD_VAR 0 1
39091: NOT
39092: ST_TO_ADDR
// end ;
39093: LD_VAR 0 2
39097: RET
// export function Inc ( value ) ; begin
39098: LD_INT 0
39100: PPUSH
// result := value + 1 ;
39101: LD_ADDR_VAR 0 2
39105: PUSH
39106: LD_VAR 0 1
39110: PUSH
39111: LD_INT 1
39113: PLUS
39114: ST_TO_ADDR
// end ;
39115: LD_VAR 0 2
39119: RET
// export function Dec ( value ) ; begin
39120: LD_INT 0
39122: PPUSH
// result := value - 1 ;
39123: LD_ADDR_VAR 0 2
39127: PUSH
39128: LD_VAR 0 1
39132: PUSH
39133: LD_INT 1
39135: MINUS
39136: ST_TO_ADDR
// end ;
39137: LD_VAR 0 2
39141: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39142: LD_INT 0
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39152: LD_VAR 0 1
39156: PPUSH
39157: LD_VAR 0 2
39161: PPUSH
39162: CALL_OW 488
39166: NOT
39167: PUSH
39168: LD_VAR 0 3
39172: PPUSH
39173: LD_VAR 0 4
39177: PPUSH
39178: CALL_OW 488
39182: NOT
39183: OR
39184: IFFALSE 39197
// begin result := - 1 ;
39186: LD_ADDR_VAR 0 5
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: ST_TO_ADDR
// exit ;
39195: GO 39432
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39197: LD_ADDR_VAR 0 12
39201: PUSH
39202: LD_VAR 0 1
39206: PPUSH
39207: LD_VAR 0 2
39211: PPUSH
39212: LD_VAR 0 3
39216: PPUSH
39217: LD_VAR 0 4
39221: PPUSH
39222: CALL 38282 0 4
39226: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39227: LD_ADDR_VAR 0 11
39231: PUSH
39232: LD_VAR 0 1
39236: PPUSH
39237: LD_VAR 0 2
39241: PPUSH
39242: LD_VAR 0 12
39246: PUSH
39247: LD_INT 1
39249: ARRAY
39250: PPUSH
39251: LD_VAR 0 12
39255: PUSH
39256: LD_INT 2
39258: ARRAY
39259: PPUSH
39260: CALL_OW 298
39264: ST_TO_ADDR
// distance := 9999 ;
39265: LD_ADDR_VAR 0 10
39269: PUSH
39270: LD_INT 9999
39272: ST_TO_ADDR
// for i := 0 to 5 do
39273: LD_ADDR_VAR 0 6
39277: PUSH
39278: DOUBLE
39279: LD_INT 0
39281: DEC
39282: ST_TO_ADDR
39283: LD_INT 5
39285: PUSH
39286: FOR_TO
39287: IFFALSE 39430
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39289: LD_ADDR_VAR 0 7
39293: PUSH
39294: LD_VAR 0 1
39298: PPUSH
39299: LD_VAR 0 6
39303: PPUSH
39304: LD_VAR 0 11
39308: PPUSH
39309: CALL_OW 272
39313: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39314: LD_ADDR_VAR 0 8
39318: PUSH
39319: LD_VAR 0 2
39323: PPUSH
39324: LD_VAR 0 6
39328: PPUSH
39329: LD_VAR 0 11
39333: PPUSH
39334: CALL_OW 273
39338: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39339: LD_VAR 0 7
39343: PPUSH
39344: LD_VAR 0 8
39348: PPUSH
39349: CALL_OW 488
39353: NOT
39354: IFFALSE 39358
// continue ;
39356: GO 39286
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39358: LD_ADDR_VAR 0 9
39362: PUSH
39363: LD_VAR 0 12
39367: PUSH
39368: LD_INT 1
39370: ARRAY
39371: PPUSH
39372: LD_VAR 0 12
39376: PUSH
39377: LD_INT 2
39379: ARRAY
39380: PPUSH
39381: LD_VAR 0 7
39385: PPUSH
39386: LD_VAR 0 8
39390: PPUSH
39391: CALL_OW 298
39395: ST_TO_ADDR
// if tmp < distance then
39396: LD_VAR 0 9
39400: PUSH
39401: LD_VAR 0 10
39405: LESS
39406: IFFALSE 39428
// begin result := i ;
39408: LD_ADDR_VAR 0 5
39412: PUSH
39413: LD_VAR 0 6
39417: ST_TO_ADDR
// distance := tmp ;
39418: LD_ADDR_VAR 0 10
39422: PUSH
39423: LD_VAR 0 9
39427: ST_TO_ADDR
// end ; end ;
39428: GO 39286
39430: POP
39431: POP
// end ;
39432: LD_VAR 0 5
39436: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39437: LD_INT 0
39439: PPUSH
39440: PPUSH
// if not driver or not IsInUnit ( driver ) then
39441: LD_VAR 0 1
39445: NOT
39446: PUSH
39447: LD_VAR 0 1
39451: PPUSH
39452: CALL_OW 310
39456: NOT
39457: OR
39458: IFFALSE 39462
// exit ;
39460: GO 39552
// vehicle := IsInUnit ( driver ) ;
39462: LD_ADDR_VAR 0 3
39466: PUSH
39467: LD_VAR 0 1
39471: PPUSH
39472: CALL_OW 310
39476: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39477: LD_VAR 0 1
39481: PPUSH
39482: LD_STRING \
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: PUSH
39512: LD_STRING E
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_VAR 0 3
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PPUSH
39548: CALL_OW 446
// end ;
39552: LD_VAR 0 2
39556: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39557: LD_INT 0
39559: PPUSH
39560: PPUSH
// if not driver or not IsInUnit ( driver ) then
39561: LD_VAR 0 1
39565: NOT
39566: PUSH
39567: LD_VAR 0 1
39571: PPUSH
39572: CALL_OW 310
39576: NOT
39577: OR
39578: IFFALSE 39582
// exit ;
39580: GO 39672
// vehicle := IsInUnit ( driver ) ;
39582: LD_ADDR_VAR 0 3
39586: PUSH
39587: LD_VAR 0 1
39591: PPUSH
39592: CALL_OW 310
39596: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39597: LD_VAR 0 1
39601: PPUSH
39602: LD_STRING \
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: PUSH
39632: LD_STRING E
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_VAR 0 3
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PPUSH
39668: CALL_OW 447
// end ;
39672: LD_VAR 0 2
39676: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39677: LD_INT 0
39679: PPUSH
39680: PPUSH
39681: PPUSH
// tmp := [ ] ;
39682: LD_ADDR_VAR 0 5
39686: PUSH
39687: EMPTY
39688: ST_TO_ADDR
// for i in units do
39689: LD_ADDR_VAR 0 4
39693: PUSH
39694: LD_VAR 0 1
39698: PUSH
39699: FOR_IN
39700: IFFALSE 39738
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39702: LD_ADDR_VAR 0 5
39706: PUSH
39707: LD_VAR 0 5
39711: PPUSH
39712: LD_VAR 0 5
39716: PUSH
39717: LD_INT 1
39719: PLUS
39720: PPUSH
39721: LD_VAR 0 4
39725: PPUSH
39726: CALL_OW 256
39730: PPUSH
39731: CALL_OW 2
39735: ST_TO_ADDR
39736: GO 39699
39738: POP
39739: POP
// if not tmp then
39740: LD_VAR 0 5
39744: NOT
39745: IFFALSE 39749
// exit ;
39747: GO 39797
// if asc then
39749: LD_VAR 0 2
39753: IFFALSE 39777
// result := SortListByListAsc ( units , tmp ) else
39755: LD_ADDR_VAR 0 3
39759: PUSH
39760: LD_VAR 0 1
39764: PPUSH
39765: LD_VAR 0 5
39769: PPUSH
39770: CALL_OW 76
39774: ST_TO_ADDR
39775: GO 39797
// result := SortListByListDesc ( units , tmp ) ;
39777: LD_ADDR_VAR 0 3
39781: PUSH
39782: LD_VAR 0 1
39786: PPUSH
39787: LD_VAR 0 5
39791: PPUSH
39792: CALL_OW 77
39796: ST_TO_ADDR
// end ;
39797: LD_VAR 0 3
39801: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39802: LD_INT 0
39804: PPUSH
39805: PPUSH
// task := GetTaskList ( mech ) ;
39806: LD_ADDR_VAR 0 4
39810: PUSH
39811: LD_VAR 0 1
39815: PPUSH
39816: CALL_OW 437
39820: ST_TO_ADDR
// if not task then
39821: LD_VAR 0 4
39825: NOT
39826: IFFALSE 39830
// exit ;
39828: GO 39872
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39830: LD_ADDR_VAR 0 3
39834: PUSH
39835: LD_VAR 0 4
39839: PUSH
39840: LD_INT 1
39842: ARRAY
39843: PUSH
39844: LD_INT 1
39846: ARRAY
39847: PUSH
39848: LD_STRING r
39850: EQUAL
39851: PUSH
39852: LD_VAR 0 4
39856: PUSH
39857: LD_INT 1
39859: ARRAY
39860: PUSH
39861: LD_INT 4
39863: ARRAY
39864: PUSH
39865: LD_VAR 0 2
39869: EQUAL
39870: AND
39871: ST_TO_ADDR
// end ;
39872: LD_VAR 0 3
39876: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39877: LD_INT 0
39879: PPUSH
// SetDir ( unit , d ) ;
39880: LD_VAR 0 1
39884: PPUSH
39885: LD_VAR 0 4
39889: PPUSH
39890: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39894: LD_VAR 0 1
39898: PPUSH
39899: LD_VAR 0 2
39903: PPUSH
39904: LD_VAR 0 3
39908: PPUSH
39909: LD_VAR 0 5
39913: PPUSH
39914: CALL_OW 48
// end ;
39918: LD_VAR 0 6
39922: RET
// export function ToNaturalNumber ( number ) ; begin
39923: LD_INT 0
39925: PPUSH
// result := number div 1 ;
39926: LD_ADDR_VAR 0 2
39930: PUSH
39931: LD_VAR 0 1
39935: PUSH
39936: LD_INT 1
39938: DIV
39939: ST_TO_ADDR
// if number < 0 then
39940: LD_VAR 0 1
39944: PUSH
39945: LD_INT 0
39947: LESS
39948: IFFALSE 39958
// result := 0 ;
39950: LD_ADDR_VAR 0 2
39954: PUSH
39955: LD_INT 0
39957: ST_TO_ADDR
// end ;
39958: LD_VAR 0 2
39962: RET
// export function SortByClass ( units , class ) ; var un ; begin
39963: LD_INT 0
39965: PPUSH
39966: PPUSH
// if not units or not class then
39967: LD_VAR 0 1
39971: NOT
39972: PUSH
39973: LD_VAR 0 2
39977: NOT
39978: OR
39979: IFFALSE 39983
// exit ;
39981: GO 40078
// result := [ ] ;
39983: LD_ADDR_VAR 0 3
39987: PUSH
39988: EMPTY
39989: ST_TO_ADDR
// for un in units do
39990: LD_ADDR_VAR 0 4
39994: PUSH
39995: LD_VAR 0 1
39999: PUSH
40000: FOR_IN
40001: IFFALSE 40076
// if GetClass ( un ) = class then
40003: LD_VAR 0 4
40007: PPUSH
40008: CALL_OW 257
40012: PUSH
40013: LD_VAR 0 2
40017: EQUAL
40018: IFFALSE 40045
// result := Insert ( result , 1 , un ) else
40020: LD_ADDR_VAR 0 3
40024: PUSH
40025: LD_VAR 0 3
40029: PPUSH
40030: LD_INT 1
40032: PPUSH
40033: LD_VAR 0 4
40037: PPUSH
40038: CALL_OW 2
40042: ST_TO_ADDR
40043: GO 40074
// result := Replace ( result , result + 1 , un ) ;
40045: LD_ADDR_VAR 0 3
40049: PUSH
40050: LD_VAR 0 3
40054: PPUSH
40055: LD_VAR 0 3
40059: PUSH
40060: LD_INT 1
40062: PLUS
40063: PPUSH
40064: LD_VAR 0 4
40068: PPUSH
40069: CALL_OW 1
40073: ST_TO_ADDR
40074: GO 40000
40076: POP
40077: POP
// end ;
40078: LD_VAR 0 3
40082: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40083: LD_INT 0
40085: PPUSH
40086: PPUSH
40087: PPUSH
40088: PPUSH
40089: PPUSH
40090: PPUSH
40091: PPUSH
// result := [ ] ;
40092: LD_ADDR_VAR 0 4
40096: PUSH
40097: EMPTY
40098: ST_TO_ADDR
// if x - r < 0 then
40099: LD_VAR 0 1
40103: PUSH
40104: LD_VAR 0 3
40108: MINUS
40109: PUSH
40110: LD_INT 0
40112: LESS
40113: IFFALSE 40125
// min_x := 0 else
40115: LD_ADDR_VAR 0 8
40119: PUSH
40120: LD_INT 0
40122: ST_TO_ADDR
40123: GO 40141
// min_x := x - r ;
40125: LD_ADDR_VAR 0 8
40129: PUSH
40130: LD_VAR 0 1
40134: PUSH
40135: LD_VAR 0 3
40139: MINUS
40140: ST_TO_ADDR
// if y - r < 0 then
40141: LD_VAR 0 2
40145: PUSH
40146: LD_VAR 0 3
40150: MINUS
40151: PUSH
40152: LD_INT 0
40154: LESS
40155: IFFALSE 40167
// min_y := 0 else
40157: LD_ADDR_VAR 0 7
40161: PUSH
40162: LD_INT 0
40164: ST_TO_ADDR
40165: GO 40183
// min_y := y - r ;
40167: LD_ADDR_VAR 0 7
40171: PUSH
40172: LD_VAR 0 2
40176: PUSH
40177: LD_VAR 0 3
40181: MINUS
40182: ST_TO_ADDR
// max_x := x + r ;
40183: LD_ADDR_VAR 0 9
40187: PUSH
40188: LD_VAR 0 1
40192: PUSH
40193: LD_VAR 0 3
40197: PLUS
40198: ST_TO_ADDR
// max_y := y + r ;
40199: LD_ADDR_VAR 0 10
40203: PUSH
40204: LD_VAR 0 2
40208: PUSH
40209: LD_VAR 0 3
40213: PLUS
40214: ST_TO_ADDR
// for _x = min_x to max_x do
40215: LD_ADDR_VAR 0 5
40219: PUSH
40220: DOUBLE
40221: LD_VAR 0 8
40225: DEC
40226: ST_TO_ADDR
40227: LD_VAR 0 9
40231: PUSH
40232: FOR_TO
40233: IFFALSE 40334
// for _y = min_y to max_y do
40235: LD_ADDR_VAR 0 6
40239: PUSH
40240: DOUBLE
40241: LD_VAR 0 7
40245: DEC
40246: ST_TO_ADDR
40247: LD_VAR 0 10
40251: PUSH
40252: FOR_TO
40253: IFFALSE 40330
// begin if not ValidHex ( _x , _y ) then
40255: LD_VAR 0 5
40259: PPUSH
40260: LD_VAR 0 6
40264: PPUSH
40265: CALL_OW 488
40269: NOT
40270: IFFALSE 40274
// continue ;
40272: GO 40252
// if GetResourceTypeXY ( _x , _y ) then
40274: LD_VAR 0 5
40278: PPUSH
40279: LD_VAR 0 6
40283: PPUSH
40284: CALL_OW 283
40288: IFFALSE 40328
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40290: LD_ADDR_VAR 0 4
40294: PUSH
40295: LD_VAR 0 4
40299: PPUSH
40300: LD_VAR 0 4
40304: PUSH
40305: LD_INT 1
40307: PLUS
40308: PPUSH
40309: LD_VAR 0 5
40313: PUSH
40314: LD_VAR 0 6
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PPUSH
40323: CALL_OW 1
40327: ST_TO_ADDR
// end ;
40328: GO 40252
40330: POP
40331: POP
40332: GO 40232
40334: POP
40335: POP
// end ;
40336: LD_VAR 0 4
40340: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40341: LD_INT 0
40343: PPUSH
40344: PPUSH
40345: PPUSH
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
// if not units then
40351: LD_VAR 0 1
40355: NOT
40356: IFFALSE 40360
// exit ;
40358: GO 40884
// result := UnitFilter ( units , [ f_ok ] ) ;
40360: LD_ADDR_VAR 0 3
40364: PUSH
40365: LD_VAR 0 1
40369: PPUSH
40370: LD_INT 50
40372: PUSH
40373: EMPTY
40374: LIST
40375: PPUSH
40376: CALL_OW 72
40380: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40381: LD_ADDR_VAR 0 8
40385: PUSH
40386: LD_VAR 0 1
40390: PUSH
40391: LD_INT 1
40393: ARRAY
40394: PPUSH
40395: CALL_OW 255
40399: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40400: LD_ADDR_VAR 0 10
40404: PUSH
40405: LD_INT 29
40407: PUSH
40408: LD_INT 91
40410: PUSH
40411: LD_INT 49
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: LIST
40418: ST_TO_ADDR
// if not result then
40419: LD_VAR 0 3
40423: NOT
40424: IFFALSE 40428
// exit ;
40426: GO 40884
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40428: LD_ADDR_VAR 0 5
40432: PUSH
40433: LD_INT 81
40435: PUSH
40436: LD_VAR 0 8
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PPUSH
40445: CALL_OW 69
40449: ST_TO_ADDR
// for i in result do
40450: LD_ADDR_VAR 0 4
40454: PUSH
40455: LD_VAR 0 3
40459: PUSH
40460: FOR_IN
40461: IFFALSE 40882
// begin tag := GetTag ( i ) + 1 ;
40463: LD_ADDR_VAR 0 9
40467: PUSH
40468: LD_VAR 0 4
40472: PPUSH
40473: CALL_OW 110
40477: PUSH
40478: LD_INT 1
40480: PLUS
40481: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40482: LD_ADDR_VAR 0 7
40486: PUSH
40487: LD_VAR 0 4
40491: PPUSH
40492: CALL_OW 250
40496: PPUSH
40497: LD_VAR 0 4
40501: PPUSH
40502: CALL_OW 251
40506: PPUSH
40507: LD_INT 6
40509: PPUSH
40510: CALL 40083 0 3
40514: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40515: LD_VAR 0 4
40519: PPUSH
40520: CALL_OW 247
40524: PUSH
40525: LD_INT 2
40527: EQUAL
40528: PUSH
40529: LD_VAR 0 7
40533: AND
40534: PUSH
40535: LD_VAR 0 4
40539: PPUSH
40540: CALL_OW 264
40544: PUSH
40545: LD_VAR 0 10
40549: IN
40550: NOT
40551: AND
40552: IFFALSE 40591
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40554: LD_VAR 0 4
40558: PPUSH
40559: LD_VAR 0 7
40563: PUSH
40564: LD_INT 1
40566: ARRAY
40567: PUSH
40568: LD_INT 1
40570: ARRAY
40571: PPUSH
40572: LD_VAR 0 7
40576: PUSH
40577: LD_INT 1
40579: ARRAY
40580: PUSH
40581: LD_INT 2
40583: ARRAY
40584: PPUSH
40585: CALL_OW 116
40589: GO 40880
// if path > tag then
40591: LD_VAR 0 2
40595: PUSH
40596: LD_VAR 0 9
40600: GREATER
40601: IFFALSE 40809
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40603: LD_ADDR_VAR 0 6
40607: PUSH
40608: LD_VAR 0 5
40612: PPUSH
40613: LD_INT 91
40615: PUSH
40616: LD_VAR 0 4
40620: PUSH
40621: LD_INT 8
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: LIST
40628: PPUSH
40629: CALL_OW 72
40633: ST_TO_ADDR
// if nearEnemy then
40634: LD_VAR 0 6
40638: IFFALSE 40707
// begin if GetWeapon ( i ) = ru_time_lapser then
40640: LD_VAR 0 4
40644: PPUSH
40645: CALL_OW 264
40649: PUSH
40650: LD_INT 49
40652: EQUAL
40653: IFFALSE 40681
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40655: LD_VAR 0 4
40659: PPUSH
40660: LD_VAR 0 6
40664: PPUSH
40665: LD_VAR 0 4
40669: PPUSH
40670: CALL_OW 74
40674: PPUSH
40675: CALL_OW 112
40679: GO 40705
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40681: LD_VAR 0 4
40685: PPUSH
40686: LD_VAR 0 6
40690: PPUSH
40691: LD_VAR 0 4
40695: PPUSH
40696: CALL_OW 74
40700: PPUSH
40701: CALL 41809 0 2
// end else
40705: GO 40807
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40707: LD_VAR 0 4
40711: PPUSH
40712: LD_VAR 0 2
40716: PUSH
40717: LD_VAR 0 9
40721: ARRAY
40722: PUSH
40723: LD_INT 1
40725: ARRAY
40726: PPUSH
40727: LD_VAR 0 2
40731: PUSH
40732: LD_VAR 0 9
40736: ARRAY
40737: PUSH
40738: LD_INT 2
40740: ARRAY
40741: PPUSH
40742: CALL_OW 297
40746: PUSH
40747: LD_INT 6
40749: GREATER
40750: IFFALSE 40793
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40752: LD_VAR 0 4
40756: PPUSH
40757: LD_VAR 0 2
40761: PUSH
40762: LD_VAR 0 9
40766: ARRAY
40767: PUSH
40768: LD_INT 1
40770: ARRAY
40771: PPUSH
40772: LD_VAR 0 2
40776: PUSH
40777: LD_VAR 0 9
40781: ARRAY
40782: PUSH
40783: LD_INT 2
40785: ARRAY
40786: PPUSH
40787: CALL_OW 114
40791: GO 40807
// SetTag ( i , tag ) ;
40793: LD_VAR 0 4
40797: PPUSH
40798: LD_VAR 0 9
40802: PPUSH
40803: CALL_OW 109
// end else
40807: GO 40880
// if enemy then
40809: LD_VAR 0 5
40813: IFFALSE 40880
// begin if GetWeapon ( i ) = ru_time_lapser then
40815: LD_VAR 0 4
40819: PPUSH
40820: CALL_OW 264
40824: PUSH
40825: LD_INT 49
40827: EQUAL
40828: IFFALSE 40856
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40830: LD_VAR 0 4
40834: PPUSH
40835: LD_VAR 0 5
40839: PPUSH
40840: LD_VAR 0 4
40844: PPUSH
40845: CALL_OW 74
40849: PPUSH
40850: CALL_OW 112
40854: GO 40880
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40856: LD_VAR 0 4
40860: PPUSH
40861: LD_VAR 0 5
40865: PPUSH
40866: LD_VAR 0 4
40870: PPUSH
40871: CALL_OW 74
40875: PPUSH
40876: CALL 41809 0 2
// end ; end ;
40880: GO 40460
40882: POP
40883: POP
// end ;
40884: LD_VAR 0 3
40888: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40889: LD_INT 0
40891: PPUSH
40892: PPUSH
40893: PPUSH
// if not unit or IsInUnit ( unit ) then
40894: LD_VAR 0 1
40898: NOT
40899: PUSH
40900: LD_VAR 0 1
40904: PPUSH
40905: CALL_OW 310
40909: OR
40910: IFFALSE 40914
// exit ;
40912: GO 41005
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
40914: LD_ADDR_VAR 0 4
40918: PUSH
40919: LD_VAR 0 1
40923: PPUSH
40924: CALL_OW 250
40928: PPUSH
40929: LD_VAR 0 2
40933: PPUSH
40934: LD_INT 1
40936: PPUSH
40937: CALL_OW 272
40941: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
40942: LD_ADDR_VAR 0 5
40946: PUSH
40947: LD_VAR 0 1
40951: PPUSH
40952: CALL_OW 251
40956: PPUSH
40957: LD_VAR 0 2
40961: PPUSH
40962: LD_INT 1
40964: PPUSH
40965: CALL_OW 273
40969: ST_TO_ADDR
// if ValidHex ( x , y ) then
40970: LD_VAR 0 4
40974: PPUSH
40975: LD_VAR 0 5
40979: PPUSH
40980: CALL_OW 488
40984: IFFALSE 41005
// ComTurnXY ( unit , x , y ) ;
40986: LD_VAR 0 1
40990: PPUSH
40991: LD_VAR 0 4
40995: PPUSH
40996: LD_VAR 0 5
41000: PPUSH
41001: CALL_OW 118
// end ;
41005: LD_VAR 0 3
41009: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41010: LD_INT 0
41012: PPUSH
41013: PPUSH
// result := false ;
41014: LD_ADDR_VAR 0 3
41018: PUSH
41019: LD_INT 0
41021: ST_TO_ADDR
// if not units then
41022: LD_VAR 0 2
41026: NOT
41027: IFFALSE 41031
// exit ;
41029: GO 41076
// for i in units do
41031: LD_ADDR_VAR 0 4
41035: PUSH
41036: LD_VAR 0 2
41040: PUSH
41041: FOR_IN
41042: IFFALSE 41074
// if See ( side , i ) then
41044: LD_VAR 0 1
41048: PPUSH
41049: LD_VAR 0 4
41053: PPUSH
41054: CALL_OW 292
41058: IFFALSE 41072
// begin result := true ;
41060: LD_ADDR_VAR 0 3
41064: PUSH
41065: LD_INT 1
41067: ST_TO_ADDR
// exit ;
41068: POP
41069: POP
41070: GO 41076
// end ;
41072: GO 41041
41074: POP
41075: POP
// end ;
41076: LD_VAR 0 3
41080: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41081: LD_INT 0
41083: PPUSH
41084: PPUSH
41085: PPUSH
41086: PPUSH
// if not unit or not points then
41087: LD_VAR 0 1
41091: NOT
41092: PUSH
41093: LD_VAR 0 2
41097: NOT
41098: OR
41099: IFFALSE 41103
// exit ;
41101: GO 41193
// dist := 99999 ;
41103: LD_ADDR_VAR 0 5
41107: PUSH
41108: LD_INT 99999
41110: ST_TO_ADDR
// for i in points do
41111: LD_ADDR_VAR 0 4
41115: PUSH
41116: LD_VAR 0 2
41120: PUSH
41121: FOR_IN
41122: IFFALSE 41191
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41124: LD_ADDR_VAR 0 6
41128: PUSH
41129: LD_VAR 0 1
41133: PPUSH
41134: LD_VAR 0 4
41138: PUSH
41139: LD_INT 1
41141: ARRAY
41142: PPUSH
41143: LD_VAR 0 4
41147: PUSH
41148: LD_INT 2
41150: ARRAY
41151: PPUSH
41152: CALL_OW 297
41156: ST_TO_ADDR
// if tmpDist < dist then
41157: LD_VAR 0 6
41161: PUSH
41162: LD_VAR 0 5
41166: LESS
41167: IFFALSE 41189
// begin result := i ;
41169: LD_ADDR_VAR 0 3
41173: PUSH
41174: LD_VAR 0 4
41178: ST_TO_ADDR
// dist := tmpDist ;
41179: LD_ADDR_VAR 0 5
41183: PUSH
41184: LD_VAR 0 6
41188: ST_TO_ADDR
// end ; end ;
41189: GO 41121
41191: POP
41192: POP
// end ;
41193: LD_VAR 0 3
41197: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41198: LD_INT 0
41200: PPUSH
// uc_side := side ;
41201: LD_ADDR_OWVAR 20
41205: PUSH
41206: LD_VAR 0 1
41210: ST_TO_ADDR
// uc_nation := 3 ;
41211: LD_ADDR_OWVAR 21
41215: PUSH
41216: LD_INT 3
41218: ST_TO_ADDR
// vc_chassis := 25 ;
41219: LD_ADDR_OWVAR 37
41223: PUSH
41224: LD_INT 25
41226: ST_TO_ADDR
// vc_engine := engine_siberite ;
41227: LD_ADDR_OWVAR 39
41231: PUSH
41232: LD_INT 3
41234: ST_TO_ADDR
// vc_control := control_computer ;
41235: LD_ADDR_OWVAR 38
41239: PUSH
41240: LD_INT 3
41242: ST_TO_ADDR
// vc_weapon := 59 ;
41243: LD_ADDR_OWVAR 40
41247: PUSH
41248: LD_INT 59
41250: ST_TO_ADDR
// result := CreateVehicle ;
41251: LD_ADDR_VAR 0 5
41255: PUSH
41256: CALL_OW 45
41260: ST_TO_ADDR
// SetDir ( result , d ) ;
41261: LD_VAR 0 5
41265: PPUSH
41266: LD_VAR 0 4
41270: PPUSH
41271: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41275: LD_VAR 0 5
41279: PPUSH
41280: LD_VAR 0 2
41284: PPUSH
41285: LD_VAR 0 3
41289: PPUSH
41290: LD_INT 0
41292: PPUSH
41293: CALL_OW 48
// end ;
41297: LD_VAR 0 5
41301: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41302: LD_INT 0
41304: PPUSH
41305: PPUSH
41306: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41307: LD_ADDR_VAR 0 2
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41330: LD_VAR 0 1
41334: NOT
41335: PUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: CALL_OW 264
41345: PUSH
41346: LD_INT 12
41348: PUSH
41349: LD_INT 51
41351: PUSH
41352: LD_INT 32
41354: PUSH
41355: LD_INT 89
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: IN
41364: NOT
41365: OR
41366: IFFALSE 41370
// exit ;
41368: GO 41468
// for i := 1 to 3 do
41370: LD_ADDR_VAR 0 3
41374: PUSH
41375: DOUBLE
41376: LD_INT 1
41378: DEC
41379: ST_TO_ADDR
41380: LD_INT 3
41382: PUSH
41383: FOR_TO
41384: IFFALSE 41466
// begin tmp := GetCargo ( cargo , i ) ;
41386: LD_ADDR_VAR 0 4
41390: PUSH
41391: LD_VAR 0 1
41395: PPUSH
41396: LD_VAR 0 3
41400: PPUSH
41401: CALL_OW 289
41405: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41406: LD_ADDR_VAR 0 2
41410: PUSH
41411: LD_VAR 0 2
41415: PPUSH
41416: LD_VAR 0 3
41420: PPUSH
41421: LD_VAR 0 4
41425: PPUSH
41426: CALL_OW 1
41430: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41431: LD_ADDR_VAR 0 2
41435: PUSH
41436: LD_VAR 0 2
41440: PPUSH
41441: LD_INT 4
41443: PPUSH
41444: LD_VAR 0 2
41448: PUSH
41449: LD_INT 4
41451: ARRAY
41452: PUSH
41453: LD_VAR 0 4
41457: PLUS
41458: PPUSH
41459: CALL_OW 1
41463: ST_TO_ADDR
// end ;
41464: GO 41383
41466: POP
41467: POP
// end ;
41468: LD_VAR 0 2
41472: RET
// export function Length ( array ) ; begin
41473: LD_INT 0
41475: PPUSH
// result := array + 0 ;
41476: LD_ADDR_VAR 0 2
41480: PUSH
41481: LD_VAR 0 1
41485: PUSH
41486: LD_INT 0
41488: PLUS
41489: ST_TO_ADDR
// end ;
41490: LD_VAR 0 2
41494: RET
// export function PrepareArray ( array ) ; begin
41495: LD_INT 0
41497: PPUSH
// result := array diff 0 ;
41498: LD_ADDR_VAR 0 2
41502: PUSH
41503: LD_VAR 0 1
41507: PUSH
41508: LD_INT 0
41510: DIFF
41511: ST_TO_ADDR
// if not result [ 1 ] then
41512: LD_VAR 0 2
41516: PUSH
41517: LD_INT 1
41519: ARRAY
41520: NOT
41521: IFFALSE 41541
// result := Delete ( result , 1 ) ;
41523: LD_ADDR_VAR 0 2
41527: PUSH
41528: LD_VAR 0 2
41532: PPUSH
41533: LD_INT 1
41535: PPUSH
41536: CALL_OW 3
41540: ST_TO_ADDR
// end ;
41541: LD_VAR 0 2
41545: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41546: LD_INT 0
41548: PPUSH
41549: PPUSH
41550: PPUSH
41551: PPUSH
// sibRocketRange := 25 ;
41552: LD_ADDR_VAR 0 6
41556: PUSH
41557: LD_INT 25
41559: ST_TO_ADDR
// result := false ;
41560: LD_ADDR_VAR 0 4
41564: PUSH
41565: LD_INT 0
41567: ST_TO_ADDR
// for i := 0 to 5 do
41568: LD_ADDR_VAR 0 5
41572: PUSH
41573: DOUBLE
41574: LD_INT 0
41576: DEC
41577: ST_TO_ADDR
41578: LD_INT 5
41580: PUSH
41581: FOR_TO
41582: IFFALSE 41649
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41584: LD_VAR 0 1
41588: PPUSH
41589: LD_VAR 0 5
41593: PPUSH
41594: LD_VAR 0 6
41598: PPUSH
41599: CALL_OW 272
41603: PPUSH
41604: LD_VAR 0 2
41608: PPUSH
41609: LD_VAR 0 5
41613: PPUSH
41614: LD_VAR 0 6
41618: PPUSH
41619: CALL_OW 273
41623: PPUSH
41624: LD_VAR 0 3
41628: PPUSH
41629: CALL_OW 309
41633: IFFALSE 41647
// begin result := true ;
41635: LD_ADDR_VAR 0 4
41639: PUSH
41640: LD_INT 1
41642: ST_TO_ADDR
// exit ;
41643: POP
41644: POP
41645: GO 41651
// end ;
41647: GO 41581
41649: POP
41650: POP
// end ;
41651: LD_VAR 0 4
41655: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41656: LD_INT 0
41658: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41659: LD_VAR 0 1
41663: PPUSH
41664: LD_VAR 0 2
41668: PPUSH
41669: LD_INT 0
41671: PPUSH
41672: LD_INT 0
41674: PPUSH
41675: LD_INT 1
41677: PPUSH
41678: LD_INT 0
41680: PPUSH
41681: CALL_OW 587
// end ;
41685: LD_VAR 0 3
41689: RET
// export function CenterOnNow ( unit ) ; begin
41690: LD_INT 0
41692: PPUSH
// result := IsInUnit ( unit ) ;
41693: LD_ADDR_VAR 0 2
41697: PUSH
41698: LD_VAR 0 1
41702: PPUSH
41703: CALL_OW 310
41707: ST_TO_ADDR
// if not result then
41708: LD_VAR 0 2
41712: NOT
41713: IFFALSE 41725
// result := unit ;
41715: LD_ADDR_VAR 0 2
41719: PUSH
41720: LD_VAR 0 1
41724: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
41725: LD_VAR 0 1
41729: PPUSH
41730: CALL_OW 87
// end ;
41734: LD_VAR 0 2
41738: RET
// export function ComMoveHex ( unit , hex ) ; begin
41739: LD_INT 0
41741: PPUSH
// if not hex then
41742: LD_VAR 0 2
41746: NOT
41747: IFFALSE 41751
// exit ;
41749: GO 41804
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
41751: LD_VAR 0 2
41755: PUSH
41756: LD_INT 1
41758: ARRAY
41759: PPUSH
41760: LD_VAR 0 2
41764: PUSH
41765: LD_INT 2
41767: ARRAY
41768: PPUSH
41769: CALL_OW 428
41773: IFFALSE 41777
// exit ;
41775: GO 41804
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
41777: LD_VAR 0 1
41781: PPUSH
41782: LD_VAR 0 2
41786: PUSH
41787: LD_INT 1
41789: ARRAY
41790: PPUSH
41791: LD_VAR 0 2
41795: PUSH
41796: LD_INT 2
41798: ARRAY
41799: PPUSH
41800: CALL_OW 111
// end ;
41804: LD_VAR 0 3
41808: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
41809: LD_INT 0
41811: PPUSH
41812: PPUSH
41813: PPUSH
// if not unit or not enemy then
41814: LD_VAR 0 1
41818: NOT
41819: PUSH
41820: LD_VAR 0 2
41824: NOT
41825: OR
41826: IFFALSE 41830
// exit ;
41828: GO 41954
// x := GetX ( enemy ) ;
41830: LD_ADDR_VAR 0 4
41834: PUSH
41835: LD_VAR 0 2
41839: PPUSH
41840: CALL_OW 250
41844: ST_TO_ADDR
// y := GetY ( enemy ) ;
41845: LD_ADDR_VAR 0 5
41849: PUSH
41850: LD_VAR 0 2
41854: PPUSH
41855: CALL_OW 251
41859: ST_TO_ADDR
// if ValidHex ( x , y ) then
41860: LD_VAR 0 4
41864: PPUSH
41865: LD_VAR 0 5
41869: PPUSH
41870: CALL_OW 488
41874: IFFALSE 41954
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
41876: LD_VAR 0 2
41880: PPUSH
41881: CALL_OW 247
41885: PUSH
41886: LD_INT 3
41888: PUSH
41889: LD_INT 2
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: IN
41896: PUSH
41897: LD_VAR 0 1
41901: PPUSH
41902: CALL_OW 255
41906: PPUSH
41907: LD_VAR 0 2
41911: PPUSH
41912: CALL_OW 292
41916: AND
41917: IFFALSE 41935
// ComAttackUnit ( unit , enemy ) else
41919: LD_VAR 0 1
41923: PPUSH
41924: LD_VAR 0 2
41928: PPUSH
41929: CALL_OW 115
41933: GO 41954
// ComAgressiveMove ( unit , x , y ) ;
41935: LD_VAR 0 1
41939: PPUSH
41940: LD_VAR 0 4
41944: PPUSH
41945: LD_VAR 0 5
41949: PPUSH
41950: CALL_OW 114
// end ;
41954: LD_VAR 0 3
41958: RET
