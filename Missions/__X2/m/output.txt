// starting begin ResetFog ;
   0: CALL_OW 335
// end ;
   4: END
// every 0 0$1 do
   5: GO 7
   7: DISABLE
// begin SendCustomCommand ( 1 , 2;3;4; , 3 , 4 , 5 ) ;
   8: LD_INT 1
  10: PPUSH
  11: LD_STRING 2;3;4;
  13: PPUSH
  14: LD_INT 3
  16: PPUSH
  17: LD_INT 4
  19: PPUSH
  20: LD_INT 5
  22: PPUSH
  23: CALL_OW 581
// end ;
  27: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin display_strings := [ p1 , p2 , p3 , p4 , p5 , p6 ] ;
  28: LD_ADDR_OWVAR 47
  32: PUSH
  33: LD_VAR 0 1
  37: PUSH
  38: LD_VAR 0 2
  42: PUSH
  43: LD_VAR 0 3
  47: PUSH
  48: LD_VAR 0 4
  52: PUSH
  53: LD_VAR 0 5
  57: PUSH
  58: LD_VAR 0 6
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: LIST
  70: ST_TO_ADDR
// end ; end_of_file
  71: PPOPN 6
  73: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  74: LD_INT 0
  76: PPUSH
  77: PPUSH
// if exist_mode then
  78: LD_VAR 0 2
  82: IFFALSE 107
// unit := CreateCharacter ( prefix & ident ) else
  84: LD_ADDR_VAR 0 5
  88: PUSH
  89: LD_VAR 0 3
  93: PUSH
  94: LD_VAR 0 1
  98: STR
  99: PPUSH
 100: CALL_OW 34
 104: ST_TO_ADDR
 105: GO 122
// unit := NewCharacter ( ident ) ;
 107: LD_ADDR_VAR 0 5
 111: PUSH
 112: LD_VAR 0 1
 116: PPUSH
 117: CALL_OW 25
 121: ST_TO_ADDR
// result := unit ;
 122: LD_ADDR_VAR 0 4
 126: PUSH
 127: LD_VAR 0 5
 131: ST_TO_ADDR
// end ;
 132: LD_VAR 0 4
 136: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 137: LD_INT 0
 139: PPUSH
 140: PPUSH
// if not side or not nation then
 141: LD_VAR 0 1
 145: NOT
 146: PUSH
 147: LD_VAR 0 2
 151: NOT
 152: OR
 153: IFFALSE 157
// exit ;
 155: GO 925
// case nation of nation_american :
 157: LD_VAR 0 2
 161: PUSH
 162: LD_INT 1
 164: DOUBLE
 165: EQUAL
 166: IFTRUE 170
 168: GO 384
 170: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 171: LD_ADDR_VAR 0 4
 175: PUSH
 176: LD_INT 35
 178: PUSH
 179: LD_INT 45
 181: PUSH
 182: LD_INT 46
 184: PUSH
 185: LD_INT 47
 187: PUSH
 188: LD_INT 82
 190: PUSH
 191: LD_INT 83
 193: PUSH
 194: LD_INT 84
 196: PUSH
 197: LD_INT 85
 199: PUSH
 200: LD_INT 86
 202: PUSH
 203: LD_INT 1
 205: PUSH
 206: LD_INT 2
 208: PUSH
 209: LD_INT 6
 211: PUSH
 212: LD_INT 15
 214: PUSH
 215: LD_INT 16
 217: PUSH
 218: LD_INT 7
 220: PUSH
 221: LD_INT 12
 223: PUSH
 224: LD_INT 13
 226: PUSH
 227: LD_INT 10
 229: PUSH
 230: LD_INT 14
 232: PUSH
 233: LD_INT 20
 235: PUSH
 236: LD_INT 21
 238: PUSH
 239: LD_INT 22
 241: PUSH
 242: LD_INT 25
 244: PUSH
 245: LD_INT 32
 247: PUSH
 248: LD_INT 27
 250: PUSH
 251: LD_INT 36
 253: PUSH
 254: LD_INT 69
 256: PUSH
 257: LD_INT 39
 259: PUSH
 260: LD_INT 34
 262: PUSH
 263: LD_INT 40
 265: PUSH
 266: LD_INT 48
 268: PUSH
 269: LD_INT 49
 271: PUSH
 272: LD_INT 50
 274: PUSH
 275: LD_INT 51
 277: PUSH
 278: LD_INT 52
 280: PUSH
 281: LD_INT 53
 283: PUSH
 284: LD_INT 54
 286: PUSH
 287: LD_INT 55
 289: PUSH
 290: LD_INT 56
 292: PUSH
 293: LD_INT 57
 295: PUSH
 296: LD_INT 58
 298: PUSH
 299: LD_INT 59
 301: PUSH
 302: LD_INT 60
 304: PUSH
 305: LD_INT 61
 307: PUSH
 308: LD_INT 62
 310: PUSH
 311: LD_INT 80
 313: PUSH
 314: LD_INT 82
 316: PUSH
 317: LD_INT 83
 319: PUSH
 320: LD_INT 84
 322: PUSH
 323: LD_INT 85
 325: PUSH
 326: LD_INT 86
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: LIST
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: LIST
 348: LIST
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: ST_TO_ADDR
 382: GO 849
 384: LD_INT 2
 386: DOUBLE
 387: EQUAL
 388: IFTRUE 392
 390: GO 618
 392: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 393: LD_ADDR_VAR 0 4
 397: PUSH
 398: LD_INT 35
 400: PUSH
 401: LD_INT 45
 403: PUSH
 404: LD_INT 46
 406: PUSH
 407: LD_INT 47
 409: PUSH
 410: LD_INT 82
 412: PUSH
 413: LD_INT 83
 415: PUSH
 416: LD_INT 84
 418: PUSH
 419: LD_INT 85
 421: PUSH
 422: LD_INT 87
 424: PUSH
 425: LD_INT 70
 427: PUSH
 428: LD_INT 1
 430: PUSH
 431: LD_INT 11
 433: PUSH
 434: LD_INT 3
 436: PUSH
 437: LD_INT 4
 439: PUSH
 440: LD_INT 5
 442: PUSH
 443: LD_INT 6
 445: PUSH
 446: LD_INT 15
 448: PUSH
 449: LD_INT 18
 451: PUSH
 452: LD_INT 7
 454: PUSH
 455: LD_INT 17
 457: PUSH
 458: LD_INT 8
 460: PUSH
 461: LD_INT 20
 463: PUSH
 464: LD_INT 21
 466: PUSH
 467: LD_INT 22
 469: PUSH
 470: LD_INT 72
 472: PUSH
 473: LD_INT 26
 475: PUSH
 476: LD_INT 69
 478: PUSH
 479: LD_INT 39
 481: PUSH
 482: LD_INT 40
 484: PUSH
 485: LD_INT 41
 487: PUSH
 488: LD_INT 42
 490: PUSH
 491: LD_INT 43
 493: PUSH
 494: LD_INT 48
 496: PUSH
 497: LD_INT 49
 499: PUSH
 500: LD_INT 50
 502: PUSH
 503: LD_INT 51
 505: PUSH
 506: LD_INT 52
 508: PUSH
 509: LD_INT 53
 511: PUSH
 512: LD_INT 54
 514: PUSH
 515: LD_INT 55
 517: PUSH
 518: LD_INT 56
 520: PUSH
 521: LD_INT 60
 523: PUSH
 524: LD_INT 61
 526: PUSH
 527: LD_INT 62
 529: PUSH
 530: LD_INT 66
 532: PUSH
 533: LD_INT 67
 535: PUSH
 536: LD_INT 68
 538: PUSH
 539: LD_INT 81
 541: PUSH
 542: LD_INT 82
 544: PUSH
 545: LD_INT 83
 547: PUSH
 548: LD_INT 84
 550: PUSH
 551: LD_INT 85
 553: PUSH
 554: LD_INT 87
 556: PUSH
 557: LD_INT 88
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: LIST
 594: LIST
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
 616: GO 849
 618: LD_INT 3
 620: DOUBLE
 621: EQUAL
 622: IFTRUE 626
 624: GO 848
 626: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 627: LD_ADDR_VAR 0 4
 631: PUSH
 632: LD_INT 46
 634: PUSH
 635: LD_INT 47
 637: PUSH
 638: LD_INT 1
 640: PUSH
 641: LD_INT 2
 643: PUSH
 644: LD_INT 82
 646: PUSH
 647: LD_INT 83
 649: PUSH
 650: LD_INT 84
 652: PUSH
 653: LD_INT 85
 655: PUSH
 656: LD_INT 86
 658: PUSH
 659: LD_INT 11
 661: PUSH
 662: LD_INT 9
 664: PUSH
 665: LD_INT 20
 667: PUSH
 668: LD_INT 19
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 24
 676: PUSH
 677: LD_INT 22
 679: PUSH
 680: LD_INT 25
 682: PUSH
 683: LD_INT 28
 685: PUSH
 686: LD_INT 29
 688: PUSH
 689: LD_INT 30
 691: PUSH
 692: LD_INT 31
 694: PUSH
 695: LD_INT 37
 697: PUSH
 698: LD_INT 38
 700: PUSH
 701: LD_INT 32
 703: PUSH
 704: LD_INT 27
 706: PUSH
 707: LD_INT 33
 709: PUSH
 710: LD_INT 69
 712: PUSH
 713: LD_INT 39
 715: PUSH
 716: LD_INT 34
 718: PUSH
 719: LD_INT 40
 721: PUSH
 722: LD_INT 71
 724: PUSH
 725: LD_INT 23
 727: PUSH
 728: LD_INT 44
 730: PUSH
 731: LD_INT 48
 733: PUSH
 734: LD_INT 49
 736: PUSH
 737: LD_INT 50
 739: PUSH
 740: LD_INT 51
 742: PUSH
 743: LD_INT 52
 745: PUSH
 746: LD_INT 53
 748: PUSH
 749: LD_INT 54
 751: PUSH
 752: LD_INT 55
 754: PUSH
 755: LD_INT 56
 757: PUSH
 758: LD_INT 57
 760: PUSH
 761: LD_INT 58
 763: PUSH
 764: LD_INT 59
 766: PUSH
 767: LD_INT 63
 769: PUSH
 770: LD_INT 64
 772: PUSH
 773: LD_INT 65
 775: PUSH
 776: LD_INT 82
 778: PUSH
 779: LD_INT 83
 781: PUSH
 782: LD_INT 84
 784: PUSH
 785: LD_INT 85
 787: PUSH
 788: LD_INT 86
 790: PUSH
 791: EMPTY
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: LIST
 844: LIST
 845: ST_TO_ADDR
 846: GO 849
 848: POP
// if state > - 1 and state < 3 then
 849: LD_VAR 0 3
 853: PUSH
 854: LD_INT 1
 856: NEG
 857: GREATER
 858: PUSH
 859: LD_VAR 0 3
 863: PUSH
 864: LD_INT 3
 866: LESS
 867: AND
 868: IFFALSE 925
// for i in result do
 870: LD_ADDR_VAR 0 5
 874: PUSH
 875: LD_VAR 0 4
 879: PUSH
 880: FOR_IN
 881: IFFALSE 923
// if GetTech ( i , side ) <> state then
 883: LD_VAR 0 5
 887: PPUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: CALL_OW 321
 897: PUSH
 898: LD_VAR 0 3
 902: NONEQUAL
 903: IFFALSE 921
// result := result diff i ;
 905: LD_ADDR_VAR 0 4
 909: PUSH
 910: LD_VAR 0 4
 914: PUSH
 915: LD_VAR 0 5
 919: DIFF
 920: ST_TO_ADDR
 921: GO 880
 923: POP
 924: POP
// end ;
 925: LD_VAR 0 4
 929: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
 930: LD_INT 0
 932: PPUSH
 933: PPUSH
 934: PPUSH
// result := true ;
 935: LD_ADDR_VAR 0 3
 939: PUSH
 940: LD_INT 1
 942: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
 943: LD_ADDR_VAR 0 5
 947: PUSH
 948: LD_VAR 0 2
 952: PPUSH
 953: CALL_OW 480
 957: ST_TO_ADDR
// if not tmp then
 958: LD_VAR 0 5
 962: NOT
 963: IFFALSE 967
// exit ;
 965: GO 1016
// for i in tmp do
 967: LD_ADDR_VAR 0 4
 971: PUSH
 972: LD_VAR 0 5
 976: PUSH
 977: FOR_IN
 978: IFFALSE 1014
// if GetTech ( i , side ) <> state_researched then
 980: LD_VAR 0 4
 984: PPUSH
 985: LD_VAR 0 1
 989: PPUSH
 990: CALL_OW 321
 994: PUSH
 995: LD_INT 2
 997: NONEQUAL
 998: IFFALSE 1012
// begin result := false ;
1000: LD_ADDR_VAR 0 3
1004: PUSH
1005: LD_INT 0
1007: ST_TO_ADDR
// exit ;
1008: POP
1009: POP
1010: GO 1016
// end ;
1012: GO 977
1014: POP
1015: POP
// end ;
1016: LD_VAR 0 3
1020: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1021: LD_INT 0
1023: PPUSH
1024: PPUSH
1025: PPUSH
1026: PPUSH
1027: PPUSH
1028: PPUSH
1029: PPUSH
1030: PPUSH
1031: PPUSH
1032: PPUSH
1033: PPUSH
1034: PPUSH
1035: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1036: LD_VAR 0 1
1040: NOT
1041: PUSH
1042: LD_VAR 0 1
1046: PPUSH
1047: CALL_OW 257
1051: PUSH
1052: LD_INT 9
1054: NONEQUAL
1055: OR
1056: IFFALSE 1060
// exit ;
1058: GO 1633
// side := GetSide ( unit ) ;
1060: LD_ADDR_VAR 0 9
1064: PUSH
1065: LD_VAR 0 1
1069: PPUSH
1070: CALL_OW 255
1074: ST_TO_ADDR
// tech_space := tech_spacanom ;
1075: LD_ADDR_VAR 0 12
1079: PUSH
1080: LD_INT 29
1082: ST_TO_ADDR
// tech_time := tech_taurad ;
1083: LD_ADDR_VAR 0 13
1087: PUSH
1088: LD_INT 28
1090: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1091: LD_ADDR_VAR 0 11
1095: PUSH
1096: LD_VAR 0 1
1100: PPUSH
1101: CALL_OW 310
1105: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1106: LD_VAR 0 11
1110: PPUSH
1111: CALL_OW 247
1115: PUSH
1116: LD_INT 2
1118: EQUAL
1119: IFFALSE 1123
// exit ;
1121: GO 1633
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1123: LD_ADDR_VAR 0 8
1127: PUSH
1128: LD_INT 81
1130: PUSH
1131: LD_VAR 0 9
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 21
1145: PUSH
1146: LD_INT 3
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PPUSH
1161: CALL_OW 69
1165: ST_TO_ADDR
// if not tmp then
1166: LD_VAR 0 8
1170: NOT
1171: IFFALSE 1175
// exit ;
1173: GO 1633
// if in_unit then
1175: LD_VAR 0 11
1179: IFFALSE 1203
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1181: LD_ADDR_VAR 0 10
1185: PUSH
1186: LD_VAR 0 8
1190: PPUSH
1191: LD_VAR 0 11
1195: PPUSH
1196: CALL_OW 74
1200: ST_TO_ADDR
1201: GO 1223
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1203: LD_ADDR_VAR 0 10
1207: PUSH
1208: LD_VAR 0 8
1212: PPUSH
1213: LD_VAR 0 1
1217: PPUSH
1218: CALL_OW 74
1222: ST_TO_ADDR
// if not enemy then
1223: LD_VAR 0 10
1227: NOT
1228: IFFALSE 1232
// exit ;
1230: GO 1633
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1232: LD_VAR 0 11
1236: PUSH
1237: LD_VAR 0 11
1241: PPUSH
1242: LD_VAR 0 10
1246: PPUSH
1247: CALL_OW 296
1251: PUSH
1252: LD_INT 13
1254: GREATER
1255: AND
1256: PUSH
1257: LD_VAR 0 1
1261: PPUSH
1262: LD_VAR 0 10
1266: PPUSH
1267: CALL_OW 296
1271: PUSH
1272: LD_INT 12
1274: GREATER
1275: OR
1276: IFFALSE 1280
// exit ;
1278: GO 1633
// missile := [ 1 ] ;
1280: LD_ADDR_VAR 0 14
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: EMPTY
1289: LIST
1290: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1291: LD_VAR 0 9
1295: PPUSH
1296: LD_VAR 0 12
1300: PPUSH
1301: CALL_OW 325
1305: IFFALSE 1334
// missile := Replace ( missile , missile + 1 , 2 ) ;
1307: LD_ADDR_VAR 0 14
1311: PUSH
1312: LD_VAR 0 14
1316: PPUSH
1317: LD_VAR 0 14
1321: PUSH
1322: LD_INT 1
1324: PLUS
1325: PPUSH
1326: LD_INT 2
1328: PPUSH
1329: CALL_OW 1
1333: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1334: LD_VAR 0 9
1338: PPUSH
1339: LD_VAR 0 13
1343: PPUSH
1344: CALL_OW 325
1348: PUSH
1349: LD_VAR 0 10
1353: PPUSH
1354: CALL_OW 255
1358: PPUSH
1359: LD_VAR 0 13
1363: PPUSH
1364: CALL_OW 325
1368: NOT
1369: AND
1370: IFFALSE 1399
// missile := Replace ( missile , missile + 1 , 3 ) ;
1372: LD_ADDR_VAR 0 14
1376: PUSH
1377: LD_VAR 0 14
1381: PPUSH
1382: LD_VAR 0 14
1386: PUSH
1387: LD_INT 1
1389: PLUS
1390: PPUSH
1391: LD_INT 3
1393: PPUSH
1394: CALL_OW 1
1398: ST_TO_ADDR
// if missile < 2 then
1399: LD_VAR 0 14
1403: PUSH
1404: LD_INT 2
1406: LESS
1407: IFFALSE 1411
// exit ;
1409: GO 1633
// x := GetX ( enemy ) ;
1411: LD_ADDR_VAR 0 4
1415: PUSH
1416: LD_VAR 0 10
1420: PPUSH
1421: CALL_OW 250
1425: ST_TO_ADDR
// y := GetY ( enemy ) ;
1426: LD_ADDR_VAR 0 5
1430: PUSH
1431: LD_VAR 0 10
1435: PPUSH
1436: CALL_OW 251
1440: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1441: LD_ADDR_VAR 0 6
1445: PUSH
1446: LD_VAR 0 4
1450: PUSH
1451: LD_INT 1
1453: NEG
1454: PPUSH
1455: LD_INT 1
1457: PPUSH
1458: CALL_OW 12
1462: PLUS
1463: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1464: LD_ADDR_VAR 0 7
1468: PUSH
1469: LD_VAR 0 5
1473: PUSH
1474: LD_INT 1
1476: NEG
1477: PPUSH
1478: LD_INT 1
1480: PPUSH
1481: CALL_OW 12
1485: PLUS
1486: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1487: LD_VAR 0 6
1491: PPUSH
1492: LD_VAR 0 7
1496: PPUSH
1497: CALL_OW 488
1501: NOT
1502: IFFALSE 1524
// begin _x := x ;
1504: LD_ADDR_VAR 0 6
1508: PUSH
1509: LD_VAR 0 4
1513: ST_TO_ADDR
// _y := y ;
1514: LD_ADDR_VAR 0 7
1518: PUSH
1519: LD_VAR 0 5
1523: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1524: LD_ADDR_VAR 0 3
1528: PUSH
1529: LD_INT 1
1531: PPUSH
1532: LD_VAR 0 14
1536: PPUSH
1537: CALL_OW 12
1541: ST_TO_ADDR
// case i of 1 :
1542: LD_VAR 0 3
1546: PUSH
1547: LD_INT 1
1549: DOUBLE
1550: EQUAL
1551: IFTRUE 1555
1553: GO 1572
1555: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1556: LD_VAR 0 1
1560: PPUSH
1561: LD_VAR 0 10
1565: PPUSH
1566: CALL_OW 115
1570: GO 1633
1572: LD_INT 2
1574: DOUBLE
1575: EQUAL
1576: IFTRUE 1580
1578: GO 1602
1580: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1581: LD_VAR 0 1
1585: PPUSH
1586: LD_VAR 0 6
1590: PPUSH
1591: LD_VAR 0 7
1595: PPUSH
1596: CALL_OW 153
1600: GO 1633
1602: LD_INT 3
1604: DOUBLE
1605: EQUAL
1606: IFTRUE 1610
1608: GO 1632
1610: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1611: LD_VAR 0 1
1615: PPUSH
1616: LD_VAR 0 6
1620: PPUSH
1621: LD_VAR 0 7
1625: PPUSH
1626: CALL_OW 154
1630: GO 1633
1632: POP
// end ;
1633: LD_VAR 0 2
1637: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1638: LD_INT 0
1640: PPUSH
1641: PPUSH
1642: PPUSH
1643: PPUSH
1644: PPUSH
1645: PPUSH
// if not unit or not building then
1646: LD_VAR 0 1
1650: NOT
1651: PUSH
1652: LD_VAR 0 2
1656: NOT
1657: OR
1658: IFFALSE 1662
// exit ;
1660: GO 1820
// x := GetX ( building ) ;
1662: LD_ADDR_VAR 0 5
1666: PUSH
1667: LD_VAR 0 2
1671: PPUSH
1672: CALL_OW 250
1676: ST_TO_ADDR
// y := GetY ( building ) ;
1677: LD_ADDR_VAR 0 6
1681: PUSH
1682: LD_VAR 0 2
1686: PPUSH
1687: CALL_OW 251
1691: ST_TO_ADDR
// for i = 0 to 5 do
1692: LD_ADDR_VAR 0 4
1696: PUSH
1697: DOUBLE
1698: LD_INT 0
1700: DEC
1701: ST_TO_ADDR
1702: LD_INT 5
1704: PUSH
1705: FOR_TO
1706: IFFALSE 1818
// begin _x := ShiftX ( x , i , 3 ) ;
1708: LD_ADDR_VAR 0 7
1712: PUSH
1713: LD_VAR 0 5
1717: PPUSH
1718: LD_VAR 0 4
1722: PPUSH
1723: LD_INT 3
1725: PPUSH
1726: CALL_OW 272
1730: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1731: LD_ADDR_VAR 0 8
1735: PUSH
1736: LD_VAR 0 6
1740: PPUSH
1741: LD_VAR 0 4
1745: PPUSH
1746: LD_INT 3
1748: PPUSH
1749: CALL_OW 273
1753: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1754: LD_VAR 0 7
1758: PPUSH
1759: LD_VAR 0 8
1763: PPUSH
1764: CALL_OW 488
1768: NOT
1769: IFFALSE 1773
// continue ;
1771: GO 1705
// if HexInfo ( _x , _y ) = 0 then
1773: LD_VAR 0 7
1777: PPUSH
1778: LD_VAR 0 8
1782: PPUSH
1783: CALL_OW 428
1787: PUSH
1788: LD_INT 0
1790: EQUAL
1791: IFFALSE 1816
// begin ComMoveXY ( unit , _x , _y ) ;
1793: LD_VAR 0 1
1797: PPUSH
1798: LD_VAR 0 7
1802: PPUSH
1803: LD_VAR 0 8
1807: PPUSH
1808: CALL_OW 111
// exit ;
1812: POP
1813: POP
1814: GO 1820
// end ; end ;
1816: GO 1705
1818: POP
1819: POP
// end ;
1820: LD_VAR 0 3
1824: RET
// export function ScanBase ( side , base_area ) ; begin
1825: LD_INT 0
1827: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1828: LD_ADDR_VAR 0 3
1832: PUSH
1833: LD_VAR 0 2
1837: PPUSH
1838: LD_INT 81
1840: PUSH
1841: LD_VAR 0 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PPUSH
1850: CALL_OW 70
1854: ST_TO_ADDR
// end ;
1855: LD_VAR 0 3
1859: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
1860: LD_INT 0
1862: PPUSH
1863: PPUSH
1864: PPUSH
1865: PPUSH
// result := false ;
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: LD_INT 0
1873: ST_TO_ADDR
// side := GetSide ( unit ) ;
1874: LD_ADDR_VAR 0 3
1878: PUSH
1879: LD_VAR 0 1
1883: PPUSH
1884: CALL_OW 255
1888: ST_TO_ADDR
// nat := GetNation ( unit ) ;
1889: LD_ADDR_VAR 0 4
1893: PUSH
1894: LD_VAR 0 1
1898: PPUSH
1899: CALL_OW 248
1903: ST_TO_ADDR
// case nat of 1 :
1904: LD_VAR 0 4
1908: PUSH
1909: LD_INT 1
1911: DOUBLE
1912: EQUAL
1913: IFTRUE 1917
1915: GO 1928
1917: POP
// tech := tech_lassight ; 2 :
1918: LD_ADDR_VAR 0 5
1922: PUSH
1923: LD_INT 12
1925: ST_TO_ADDR
1926: GO 1967
1928: LD_INT 2
1930: DOUBLE
1931: EQUAL
1932: IFTRUE 1936
1934: GO 1947
1936: POP
// tech := tech_mortar ; 3 :
1937: LD_ADDR_VAR 0 5
1941: PUSH
1942: LD_INT 41
1944: ST_TO_ADDR
1945: GO 1967
1947: LD_INT 3
1949: DOUBLE
1950: EQUAL
1951: IFTRUE 1955
1953: GO 1966
1955: POP
// tech := tech_bazooka ; end ;
1956: LD_ADDR_VAR 0 5
1960: PUSH
1961: LD_INT 44
1963: ST_TO_ADDR
1964: GO 1967
1966: POP
// if Researched ( side , tech ) then
1967: LD_VAR 0 3
1971: PPUSH
1972: LD_VAR 0 5
1976: PPUSH
1977: CALL_OW 325
1981: IFFALSE 2008
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
1983: LD_ADDR_VAR 0 2
1987: PUSH
1988: LD_INT 5
1990: PUSH
1991: LD_INT 8
1993: PUSH
1994: LD_INT 9
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: LD_VAR 0 4
2006: ARRAY
2007: ST_TO_ADDR
// end ;
2008: LD_VAR 0 2
2012: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2013: LD_INT 0
2015: PPUSH
2016: PPUSH
2017: PPUSH
// if not mines then
2018: LD_VAR 0 2
2022: NOT
2023: IFFALSE 2027
// exit ;
2025: GO 2171
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2027: LD_ADDR_VAR 0 5
2031: PUSH
2032: LD_INT 81
2034: PUSH
2035: LD_VAR 0 1
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 3
2046: PUSH
2047: LD_INT 21
2049: PUSH
2050: LD_INT 3
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: PPUSH
2065: CALL_OW 69
2069: ST_TO_ADDR
// for i in mines do
2070: LD_ADDR_VAR 0 4
2074: PUSH
2075: LD_VAR 0 2
2079: PUSH
2080: FOR_IN
2081: IFFALSE 2169
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2083: LD_VAR 0 4
2087: PUSH
2088: LD_INT 1
2090: ARRAY
2091: PPUSH
2092: LD_VAR 0 4
2096: PUSH
2097: LD_INT 2
2099: ARRAY
2100: PPUSH
2101: CALL_OW 458
2105: NOT
2106: IFFALSE 2110
// continue ;
2108: GO 2080
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2110: LD_VAR 0 4
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: LD_VAR 0 4
2123: PUSH
2124: LD_INT 2
2126: ARRAY
2127: PPUSH
2128: CALL_OW 428
2132: PUSH
2133: LD_VAR 0 5
2137: IN
2138: IFFALSE 2167
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2140: LD_VAR 0 4
2144: PUSH
2145: LD_INT 1
2147: ARRAY
2148: PPUSH
2149: LD_VAR 0 4
2153: PUSH
2154: LD_INT 2
2156: ARRAY
2157: PPUSH
2158: LD_VAR 0 1
2162: PPUSH
2163: CALL_OW 456
// end ;
2167: GO 2080
2169: POP
2170: POP
// end ;
2171: LD_VAR 0 3
2175: RET
// export function Count ( array ) ; begin
2176: LD_INT 0
2178: PPUSH
// result := array + 0 ;
2179: LD_ADDR_VAR 0 2
2183: PUSH
2184: LD_VAR 0 1
2188: PUSH
2189: LD_INT 0
2191: PLUS
2192: ST_TO_ADDR
// end ;
2193: LD_VAR 0 2
2197: RET
// export function IsEmpty ( building ) ; begin
2198: LD_INT 0
2200: PPUSH
// if not building then
2201: LD_VAR 0 1
2205: NOT
2206: IFFALSE 2210
// exit ;
2208: GO 2253
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: LD_VAR 0 1
2219: PUSH
2220: LD_INT 22
2222: PUSH
2223: LD_VAR 0 1
2227: PPUSH
2228: CALL_OW 255
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: PUSH
2237: LD_INT 58
2239: PUSH
2240: EMPTY
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: PPUSH
2247: CALL_OW 69
2251: IN
2252: ST_TO_ADDR
// end ;
2253: LD_VAR 0 2
2257: RET
// export function IsNotFull ( building ) ; var places ; begin
2258: LD_INT 0
2260: PPUSH
2261: PPUSH
// if not building then
2262: LD_VAR 0 1
2266: NOT
2267: IFFALSE 2271
// exit ;
2269: GO 2299
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2271: LD_ADDR_VAR 0 2
2275: PUSH
2276: LD_VAR 0 1
2280: PPUSH
2281: LD_INT 3
2283: PUSH
2284: LD_INT 62
2286: PUSH
2287: EMPTY
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PPUSH
2294: CALL_OW 72
2298: ST_TO_ADDR
// end ;
2299: LD_VAR 0 2
2303: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2304: LD_INT 0
2306: PPUSH
2307: PPUSH
2308: PPUSH
2309: PPUSH
// tmp := [ ] ;
2310: LD_ADDR_VAR 0 3
2314: PUSH
2315: EMPTY
2316: ST_TO_ADDR
// list := [ ] ;
2317: LD_ADDR_VAR 0 5
2321: PUSH
2322: EMPTY
2323: ST_TO_ADDR
// for i = 16 to 25 do
2324: LD_ADDR_VAR 0 4
2328: PUSH
2329: DOUBLE
2330: LD_INT 16
2332: DEC
2333: ST_TO_ADDR
2334: LD_INT 25
2336: PUSH
2337: FOR_TO
2338: IFFALSE 2411
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2340: LD_ADDR_VAR 0 3
2344: PUSH
2345: LD_VAR 0 3
2349: PUSH
2350: LD_INT 22
2352: PUSH
2353: LD_VAR 0 1
2357: PPUSH
2358: CALL_OW 255
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: PUSH
2367: LD_INT 91
2369: PUSH
2370: LD_VAR 0 1
2374: PUSH
2375: LD_INT 6
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 30
2385: PUSH
2386: LD_VAR 0 4
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: LIST
2399: PUSH
2400: EMPTY
2401: LIST
2402: PPUSH
2403: CALL_OW 69
2407: ADD
2408: ST_TO_ADDR
2409: GO 2337
2411: POP
2412: POP
// for i = 1 to tmp do
2413: LD_ADDR_VAR 0 4
2417: PUSH
2418: DOUBLE
2419: LD_INT 1
2421: DEC
2422: ST_TO_ADDR
2423: LD_VAR 0 3
2427: PUSH
2428: FOR_TO
2429: IFFALSE 2517
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2431: LD_ADDR_VAR 0 5
2435: PUSH
2436: LD_VAR 0 5
2440: PUSH
2441: LD_VAR 0 3
2445: PUSH
2446: LD_VAR 0 4
2450: ARRAY
2451: PPUSH
2452: CALL_OW 266
2456: PUSH
2457: LD_VAR 0 3
2461: PUSH
2462: LD_VAR 0 4
2466: ARRAY
2467: PPUSH
2468: CALL_OW 250
2472: PUSH
2473: LD_VAR 0 3
2477: PUSH
2478: LD_VAR 0 4
2482: ARRAY
2483: PPUSH
2484: CALL_OW 251
2488: PUSH
2489: LD_VAR 0 3
2493: PUSH
2494: LD_VAR 0 4
2498: ARRAY
2499: PPUSH
2500: CALL_OW 254
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: EMPTY
2512: LIST
2513: ADD
2514: ST_TO_ADDR
2515: GO 2428
2517: POP
2518: POP
// result := list ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: LD_VAR 0 5
2528: ST_TO_ADDR
// end ;
2529: LD_VAR 0 2
2533: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// if not factory then
2543: LD_VAR 0 1
2547: NOT
2548: IFFALSE 2552
// exit ;
2550: GO 3145
// if control = control_apeman then
2552: LD_VAR 0 4
2556: PUSH
2557: LD_INT 5
2559: EQUAL
2560: IFFALSE 2669
// begin tmp := UnitsInside ( factory ) ;
2562: LD_ADDR_VAR 0 8
2566: PUSH
2567: LD_VAR 0 1
2571: PPUSH
2572: CALL_OW 313
2576: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2577: LD_VAR 0 8
2581: PPUSH
2582: LD_INT 25
2584: PUSH
2585: LD_INT 12
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: PPUSH
2592: CALL_OW 72
2596: NOT
2597: IFFALSE 2607
// control := control_manual ;
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2607: LD_ADDR_VAR 0 8
2611: PUSH
2612: LD_VAR 0 1
2616: PPUSH
2617: CALL 2304 0 1
2621: ST_TO_ADDR
// if tmp then
2622: LD_VAR 0 8
2626: IFFALSE 2669
// begin for i in tmp do
2628: LD_ADDR_VAR 0 7
2632: PUSH
2633: LD_VAR 0 8
2637: PUSH
2638: FOR_IN
2639: IFFALSE 2667
// if i [ 1 ] = b_ext_radio then
2641: LD_VAR 0 7
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: PUSH
2650: LD_INT 22
2652: EQUAL
2653: IFFALSE 2665
// begin control := control_remote ;
2655: LD_ADDR_VAR 0 4
2659: PUSH
2660: LD_INT 2
2662: ST_TO_ADDR
// break ;
2663: GO 2667
// end ;
2665: GO 2638
2667: POP
2668: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2669: LD_VAR 0 1
2673: PPUSH
2674: LD_VAR 0 2
2678: PPUSH
2679: LD_VAR 0 3
2683: PPUSH
2684: LD_VAR 0 4
2688: PPUSH
2689: LD_VAR 0 5
2693: PPUSH
2694: CALL_OW 448
2698: IFFALSE 2733
// begin result := [ chassis , engine , control , weapon ] ;
2700: LD_ADDR_VAR 0 6
2704: PUSH
2705: LD_VAR 0 2
2709: PUSH
2710: LD_VAR 0 3
2714: PUSH
2715: LD_VAR 0 4
2719: PUSH
2720: LD_VAR 0 5
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: ST_TO_ADDR
// exit ;
2731: GO 3145
// end ; _chassis := AvailableChassisList ( factory ) ;
2733: LD_ADDR_VAR 0 9
2737: PUSH
2738: LD_VAR 0 1
2742: PPUSH
2743: CALL_OW 475
2747: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2748: LD_ADDR_VAR 0 11
2752: PUSH
2753: LD_VAR 0 1
2757: PPUSH
2758: CALL_OW 476
2762: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2763: LD_ADDR_VAR 0 12
2767: PUSH
2768: LD_VAR 0 1
2772: PPUSH
2773: CALL_OW 477
2777: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2778: LD_ADDR_VAR 0 10
2782: PUSH
2783: LD_VAR 0 1
2787: PPUSH
2788: CALL_OW 478
2792: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
2793: LD_VAR 0 9
2797: NOT
2798: PUSH
2799: LD_VAR 0 11
2803: NOT
2804: OR
2805: PUSH
2806: LD_VAR 0 12
2810: NOT
2811: OR
2812: PUSH
2813: LD_VAR 0 10
2817: NOT
2818: OR
2819: IFFALSE 2854
// begin result := [ chassis , engine , control , weapon ] ;
2821: LD_ADDR_VAR 0 6
2825: PUSH
2826: LD_VAR 0 2
2830: PUSH
2831: LD_VAR 0 3
2835: PUSH
2836: LD_VAR 0 4
2840: PUSH
2841: LD_VAR 0 5
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: ST_TO_ADDR
// exit ;
2852: GO 3145
// end ; if not chassis in _chassis then
2854: LD_VAR 0 2
2858: PUSH
2859: LD_VAR 0 9
2863: IN
2864: NOT
2865: IFFALSE 2891
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
2867: LD_ADDR_VAR 0 2
2871: PUSH
2872: LD_VAR 0 9
2876: PUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_VAR 0 9
2884: PPUSH
2885: CALL_OW 12
2889: ARRAY
2890: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
2891: LD_VAR 0 2
2895: PPUSH
2896: LD_VAR 0 3
2900: PPUSH
2901: CALL 3150 0 2
2905: NOT
2906: IFFALSE 2965
// repeat engine := _engine [ 1 ] ;
2908: LD_ADDR_VAR 0 3
2912: PUSH
2913: LD_VAR 0 11
2917: PUSH
2918: LD_INT 1
2920: ARRAY
2921: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
2922: LD_ADDR_VAR 0 11
2926: PUSH
2927: LD_VAR 0 11
2931: PPUSH
2932: LD_INT 1
2934: PPUSH
2935: CALL_OW 3
2939: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
2940: LD_VAR 0 2
2944: PPUSH
2945: LD_VAR 0 3
2949: PPUSH
2950: CALL 3150 0 2
2954: PUSH
2955: LD_VAR 0 11
2959: PUSH
2960: EMPTY
2961: EQUAL
2962: OR
2963: IFFALSE 2908
// if not control in _control then
2965: LD_VAR 0 4
2969: PUSH
2970: LD_VAR 0 12
2974: IN
2975: NOT
2976: IFFALSE 3002
// control := _control [ rand ( 1 , _control ) ] ;
2978: LD_ADDR_VAR 0 4
2982: PUSH
2983: LD_VAR 0 12
2987: PUSH
2988: LD_INT 1
2990: PPUSH
2991: LD_VAR 0 12
2995: PPUSH
2996: CALL_OW 12
3000: ARRAY
3001: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3002: LD_VAR 0 2
3006: PPUSH
3007: LD_VAR 0 5
3011: PPUSH
3012: CALL 3370 0 2
3016: NOT
3017: IFFALSE 3076
// repeat weapon := _weapon [ 1 ] ;
3019: LD_ADDR_VAR 0 5
3023: PUSH
3024: LD_VAR 0 10
3028: PUSH
3029: LD_INT 1
3031: ARRAY
3032: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3033: LD_ADDR_VAR 0 10
3037: PUSH
3038: LD_VAR 0 10
3042: PPUSH
3043: LD_INT 1
3045: PPUSH
3046: CALL_OW 3
3050: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3051: LD_VAR 0 2
3055: PPUSH
3056: LD_VAR 0 5
3060: PPUSH
3061: CALL 3370 0 2
3065: PUSH
3066: LD_VAR 0 10
3070: PUSH
3071: EMPTY
3072: EQUAL
3073: OR
3074: IFFALSE 3019
// result := [ ] ;
3076: LD_ADDR_VAR 0 6
3080: PUSH
3081: EMPTY
3082: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3083: LD_VAR 0 1
3087: PPUSH
3088: LD_VAR 0 2
3092: PPUSH
3093: LD_VAR 0 3
3097: PPUSH
3098: LD_VAR 0 4
3102: PPUSH
3103: LD_VAR 0 5
3107: PPUSH
3108: CALL_OW 448
3112: IFFALSE 3145
// result := [ chassis , engine , control , weapon ] ;
3114: LD_ADDR_VAR 0 6
3118: PUSH
3119: LD_VAR 0 2
3123: PUSH
3124: LD_VAR 0 3
3128: PUSH
3129: LD_VAR 0 4
3133: PUSH
3134: LD_VAR 0 5
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: ST_TO_ADDR
// end ;
3145: LD_VAR 0 6
3149: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3150: LD_INT 0
3152: PPUSH
// if not chassis or not engine then
3153: LD_VAR 0 1
3157: NOT
3158: PUSH
3159: LD_VAR 0 2
3163: NOT
3164: OR
3165: IFFALSE 3169
// exit ;
3167: GO 3365
// case engine of engine_solar :
3169: LD_VAR 0 2
3173: PUSH
3174: LD_INT 2
3176: DOUBLE
3177: EQUAL
3178: IFTRUE 3182
3180: GO 3220
3182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3183: LD_ADDR_VAR 0 3
3187: PUSH
3188: LD_INT 11
3190: PUSH
3191: LD_INT 12
3193: PUSH
3194: LD_INT 13
3196: PUSH
3197: LD_INT 14
3199: PUSH
3200: LD_INT 1
3202: PUSH
3203: LD_INT 2
3205: PUSH
3206: LD_INT 3
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: ST_TO_ADDR
3218: GO 3349
3220: LD_INT 1
3222: DOUBLE
3223: EQUAL
3224: IFTRUE 3228
3226: GO 3290
3228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3229: LD_ADDR_VAR 0 3
3233: PUSH
3234: LD_INT 11
3236: PUSH
3237: LD_INT 12
3239: PUSH
3240: LD_INT 13
3242: PUSH
3243: LD_INT 14
3245: PUSH
3246: LD_INT 1
3248: PUSH
3249: LD_INT 2
3251: PUSH
3252: LD_INT 3
3254: PUSH
3255: LD_INT 4
3257: PUSH
3258: LD_INT 5
3260: PUSH
3261: LD_INT 21
3263: PUSH
3264: LD_INT 23
3266: PUSH
3267: LD_INT 22
3269: PUSH
3270: LD_INT 24
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: ST_TO_ADDR
3288: GO 3349
3290: LD_INT 3
3292: DOUBLE
3293: EQUAL
3294: IFTRUE 3298
3296: GO 3348
3298: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3299: LD_ADDR_VAR 0 3
3303: PUSH
3304: LD_INT 13
3306: PUSH
3307: LD_INT 14
3309: PUSH
3310: LD_INT 2
3312: PUSH
3313: LD_INT 3
3315: PUSH
3316: LD_INT 4
3318: PUSH
3319: LD_INT 5
3321: PUSH
3322: LD_INT 21
3324: PUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 23
3330: PUSH
3331: LD_INT 24
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: ST_TO_ADDR
3346: GO 3349
3348: POP
// result := ( chassis in result ) ;
3349: LD_ADDR_VAR 0 3
3353: PUSH
3354: LD_VAR 0 1
3358: PUSH
3359: LD_VAR 0 3
3363: IN
3364: ST_TO_ADDR
// end ;
3365: LD_VAR 0 3
3369: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3370: LD_INT 0
3372: PPUSH
// if not chassis or not weapon then
3373: LD_VAR 0 1
3377: NOT
3378: PUSH
3379: LD_VAR 0 2
3383: NOT
3384: OR
3385: IFFALSE 3389
// exit ;
3387: GO 4449
// case weapon of us_machine_gun :
3389: LD_VAR 0 2
3393: PUSH
3394: LD_INT 2
3396: DOUBLE
3397: EQUAL
3398: IFTRUE 3402
3400: GO 3432
3402: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3403: LD_ADDR_VAR 0 3
3407: PUSH
3408: LD_INT 1
3410: PUSH
3411: LD_INT 2
3413: PUSH
3414: LD_INT 3
3416: PUSH
3417: LD_INT 4
3419: PUSH
3420: LD_INT 5
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: ST_TO_ADDR
3430: GO 4433
3432: LD_INT 3
3434: DOUBLE
3435: EQUAL
3436: IFTRUE 3440
3438: GO 3470
3440: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3441: LD_ADDR_VAR 0 3
3445: PUSH
3446: LD_INT 1
3448: PUSH
3449: LD_INT 2
3451: PUSH
3452: LD_INT 3
3454: PUSH
3455: LD_INT 4
3457: PUSH
3458: LD_INT 5
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: ST_TO_ADDR
3468: GO 4433
3470: LD_INT 11
3472: DOUBLE
3473: EQUAL
3474: IFTRUE 3478
3476: GO 3508
3478: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3479: LD_ADDR_VAR 0 3
3483: PUSH
3484: LD_INT 1
3486: PUSH
3487: LD_INT 2
3489: PUSH
3490: LD_INT 3
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: LD_INT 5
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: ST_TO_ADDR
3506: GO 4433
3508: LD_INT 4
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3542
3516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3517: LD_ADDR_VAR 0 3
3521: PUSH
3522: LD_INT 2
3524: PUSH
3525: LD_INT 3
3527: PUSH
3528: LD_INT 4
3530: PUSH
3531: LD_INT 5
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: ST_TO_ADDR
3540: GO 4433
3542: LD_INT 5
3544: DOUBLE
3545: EQUAL
3546: IFTRUE 3550
3548: GO 3576
3550: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3551: LD_ADDR_VAR 0 3
3555: PUSH
3556: LD_INT 2
3558: PUSH
3559: LD_INT 3
3561: PUSH
3562: LD_INT 4
3564: PUSH
3565: LD_INT 5
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: ST_TO_ADDR
3574: GO 4433
3576: LD_INT 9
3578: DOUBLE
3579: EQUAL
3580: IFTRUE 3584
3582: GO 3610
3584: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3585: LD_ADDR_VAR 0 3
3589: PUSH
3590: LD_INT 2
3592: PUSH
3593: LD_INT 3
3595: PUSH
3596: LD_INT 4
3598: PUSH
3599: LD_INT 5
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: ST_TO_ADDR
3608: GO 4433
3610: LD_INT 7
3612: DOUBLE
3613: EQUAL
3614: IFTRUE 3618
3616: GO 3644
3618: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3619: LD_ADDR_VAR 0 3
3623: PUSH
3624: LD_INT 2
3626: PUSH
3627: LD_INT 3
3629: PUSH
3630: LD_INT 4
3632: PUSH
3633: LD_INT 5
3635: PUSH
3636: EMPTY
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: ST_TO_ADDR
3642: GO 4433
3644: LD_INT 12
3646: DOUBLE
3647: EQUAL
3648: IFTRUE 3652
3650: GO 3678
3652: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3653: LD_ADDR_VAR 0 3
3657: PUSH
3658: LD_INT 2
3660: PUSH
3661: LD_INT 3
3663: PUSH
3664: LD_INT 4
3666: PUSH
3667: LD_INT 5
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: ST_TO_ADDR
3676: GO 4433
3678: LD_INT 13
3680: DOUBLE
3681: EQUAL
3682: IFTRUE 3686
3684: GO 3712
3686: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3687: LD_ADDR_VAR 0 3
3691: PUSH
3692: LD_INT 2
3694: PUSH
3695: LD_INT 3
3697: PUSH
3698: LD_INT 4
3700: PUSH
3701: LD_INT 5
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: ST_TO_ADDR
3710: GO 4433
3712: LD_INT 14
3714: DOUBLE
3715: EQUAL
3716: IFTRUE 3720
3718: GO 3738
3720: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3721: LD_ADDR_VAR 0 3
3725: PUSH
3726: LD_INT 4
3728: PUSH
3729: LD_INT 5
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: ST_TO_ADDR
3736: GO 4433
3738: LD_INT 6
3740: DOUBLE
3741: EQUAL
3742: IFTRUE 3746
3744: GO 3764
3746: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3747: LD_ADDR_VAR 0 3
3751: PUSH
3752: LD_INT 4
3754: PUSH
3755: LD_INT 5
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: ST_TO_ADDR
3762: GO 4433
3764: LD_INT 10
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3790
3772: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3773: LD_ADDR_VAR 0 3
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: LD_INT 5
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: ST_TO_ADDR
3788: GO 4433
3790: LD_INT 22
3792: DOUBLE
3793: EQUAL
3794: IFTRUE 3798
3796: GO 3824
3798: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
3799: LD_ADDR_VAR 0 3
3803: PUSH
3804: LD_INT 11
3806: PUSH
3807: LD_INT 12
3809: PUSH
3810: LD_INT 13
3812: PUSH
3813: LD_INT 14
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: ST_TO_ADDR
3822: GO 4433
3824: LD_INT 23
3826: DOUBLE
3827: EQUAL
3828: IFTRUE 3832
3830: GO 3858
3832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
3833: LD_ADDR_VAR 0 3
3837: PUSH
3838: LD_INT 11
3840: PUSH
3841: LD_INT 12
3843: PUSH
3844: LD_INT 13
3846: PUSH
3847: LD_INT 14
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: ST_TO_ADDR
3856: GO 4433
3858: LD_INT 24
3860: DOUBLE
3861: EQUAL
3862: IFTRUE 3866
3864: GO 3892
3866: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
3867: LD_ADDR_VAR 0 3
3871: PUSH
3872: LD_INT 11
3874: PUSH
3875: LD_INT 12
3877: PUSH
3878: LD_INT 13
3880: PUSH
3881: LD_INT 14
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: ST_TO_ADDR
3890: GO 4433
3892: LD_INT 30
3894: DOUBLE
3895: EQUAL
3896: IFTRUE 3900
3898: GO 3926
3900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
3901: LD_ADDR_VAR 0 3
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: LD_INT 12
3911: PUSH
3912: LD_INT 13
3914: PUSH
3915: LD_INT 14
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: ST_TO_ADDR
3924: GO 4433
3926: LD_INT 25
3928: DOUBLE
3929: EQUAL
3930: IFTRUE 3934
3932: GO 3952
3934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
3935: LD_ADDR_VAR 0 3
3939: PUSH
3940: LD_INT 13
3942: PUSH
3943: LD_INT 14
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: ST_TO_ADDR
3950: GO 4433
3952: LD_INT 27
3954: DOUBLE
3955: EQUAL
3956: IFTRUE 3960
3958: GO 3978
3960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
3961: LD_ADDR_VAR 0 3
3965: PUSH
3966: LD_INT 13
3968: PUSH
3969: LD_INT 14
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: ST_TO_ADDR
3976: GO 4433
3978: LD_INT 92
3980: DOUBLE
3981: EQUAL
3982: IFTRUE 3986
3984: GO 4012
3986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
3987: LD_ADDR_VAR 0 3
3991: PUSH
3992: LD_INT 11
3994: PUSH
3995: LD_INT 12
3997: PUSH
3998: LD_INT 13
4000: PUSH
4001: LD_INT 14
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: ST_TO_ADDR
4010: GO 4433
4012: LD_INT 28
4014: DOUBLE
4015: EQUAL
4016: IFTRUE 4020
4018: GO 4038
4020: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_INT 13
4028: PUSH
4029: LD_INT 14
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: ST_TO_ADDR
4036: GO 4433
4038: LD_INT 29
4040: DOUBLE
4041: EQUAL
4042: IFTRUE 4046
4044: GO 4064
4046: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4047: LD_ADDR_VAR 0 3
4051: PUSH
4052: LD_INT 13
4054: PUSH
4055: LD_INT 14
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: ST_TO_ADDR
4062: GO 4433
4064: LD_INT 31
4066: DOUBLE
4067: EQUAL
4068: IFTRUE 4072
4070: GO 4090
4072: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4073: LD_ADDR_VAR 0 3
4077: PUSH
4078: LD_INT 13
4080: PUSH
4081: LD_INT 14
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: ST_TO_ADDR
4088: GO 4433
4090: LD_INT 26
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4098
4096: GO 4116
4098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4099: LD_ADDR_VAR 0 3
4103: PUSH
4104: LD_INT 13
4106: PUSH
4107: LD_INT 14
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: ST_TO_ADDR
4114: GO 4433
4116: LD_INT 42
4118: DOUBLE
4119: EQUAL
4120: IFTRUE 4124
4122: GO 4150
4124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4125: LD_ADDR_VAR 0 3
4129: PUSH
4130: LD_INT 21
4132: PUSH
4133: LD_INT 22
4135: PUSH
4136: LD_INT 23
4138: PUSH
4139: LD_INT 24
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: ST_TO_ADDR
4148: GO 4433
4150: LD_INT 43
4152: DOUBLE
4153: EQUAL
4154: IFTRUE 4158
4156: GO 4184
4158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4159: LD_ADDR_VAR 0 3
4163: PUSH
4164: LD_INT 21
4166: PUSH
4167: LD_INT 22
4169: PUSH
4170: LD_INT 23
4172: PUSH
4173: LD_INT 24
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: ST_TO_ADDR
4182: GO 4433
4184: LD_INT 44
4186: DOUBLE
4187: EQUAL
4188: IFTRUE 4192
4190: GO 4218
4192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4193: LD_ADDR_VAR 0 3
4197: PUSH
4198: LD_INT 21
4200: PUSH
4201: LD_INT 22
4203: PUSH
4204: LD_INT 23
4206: PUSH
4207: LD_INT 24
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: ST_TO_ADDR
4216: GO 4433
4218: LD_INT 45
4220: DOUBLE
4221: EQUAL
4222: IFTRUE 4226
4224: GO 4252
4226: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4227: LD_ADDR_VAR 0 3
4231: PUSH
4232: LD_INT 21
4234: PUSH
4235: LD_INT 22
4237: PUSH
4238: LD_INT 23
4240: PUSH
4241: LD_INT 24
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: ST_TO_ADDR
4250: GO 4433
4252: LD_INT 49
4254: DOUBLE
4255: EQUAL
4256: IFTRUE 4260
4258: GO 4286
4260: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4261: LD_ADDR_VAR 0 3
4265: PUSH
4266: LD_INT 21
4268: PUSH
4269: LD_INT 22
4271: PUSH
4272: LD_INT 23
4274: PUSH
4275: LD_INT 24
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: ST_TO_ADDR
4284: GO 4433
4286: LD_INT 51
4288: DOUBLE
4289: EQUAL
4290: IFTRUE 4294
4292: GO 4320
4294: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4295: LD_ADDR_VAR 0 3
4299: PUSH
4300: LD_INT 21
4302: PUSH
4303: LD_INT 22
4305: PUSH
4306: LD_INT 23
4308: PUSH
4309: LD_INT 24
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: ST_TO_ADDR
4318: GO 4433
4320: LD_INT 52
4322: DOUBLE
4323: EQUAL
4324: IFTRUE 4328
4326: GO 4354
4328: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4329: LD_ADDR_VAR 0 3
4333: PUSH
4334: LD_INT 21
4336: PUSH
4337: LD_INT 22
4339: PUSH
4340: LD_INT 23
4342: PUSH
4343: LD_INT 24
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: ST_TO_ADDR
4352: GO 4433
4354: LD_INT 53
4356: DOUBLE
4357: EQUAL
4358: IFTRUE 4362
4360: GO 4380
4362: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4363: LD_ADDR_VAR 0 3
4367: PUSH
4368: LD_INT 23
4370: PUSH
4371: LD_INT 24
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: ST_TO_ADDR
4378: GO 4433
4380: LD_INT 46
4382: DOUBLE
4383: EQUAL
4384: IFTRUE 4388
4386: GO 4406
4388: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: LD_INT 23
4396: PUSH
4397: LD_INT 24
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: ST_TO_ADDR
4404: GO 4433
4406: LD_INT 47
4408: DOUBLE
4409: EQUAL
4410: IFTRUE 4414
4412: GO 4432
4414: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_INT 23
4422: PUSH
4423: LD_INT 24
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: ST_TO_ADDR
4430: GO 4433
4432: POP
// result := ( chassis in result ) ;
4433: LD_ADDR_VAR 0 3
4437: PUSH
4438: LD_VAR 0 1
4442: PUSH
4443: LD_VAR 0 3
4447: IN
4448: ST_TO_ADDR
// end ;
4449: LD_VAR 0 3
4453: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4454: LD_INT 0
4456: PPUSH
4457: PPUSH
4458: PPUSH
4459: PPUSH
4460: PPUSH
4461: PPUSH
4462: PPUSH
// result := array ;
4463: LD_ADDR_VAR 0 5
4467: PUSH
4468: LD_VAR 0 1
4472: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4473: LD_VAR 0 1
4477: NOT
4478: PUSH
4479: LD_VAR 0 2
4483: NOT
4484: OR
4485: PUSH
4486: LD_VAR 0 3
4490: NOT
4491: OR
4492: PUSH
4493: LD_VAR 0 2
4497: PUSH
4498: LD_VAR 0 1
4502: GREATER
4503: OR
4504: PUSH
4505: LD_VAR 0 3
4509: PUSH
4510: LD_VAR 0 1
4514: GREATER
4515: OR
4516: IFFALSE 4520
// exit ;
4518: GO 4816
// if direction then
4520: LD_VAR 0 4
4524: IFFALSE 4588
// begin d := 1 ;
4526: LD_ADDR_VAR 0 9
4530: PUSH
4531: LD_INT 1
4533: ST_TO_ADDR
// if i_from > i_to then
4534: LD_VAR 0 2
4538: PUSH
4539: LD_VAR 0 3
4543: GREATER
4544: IFFALSE 4570
// length := ( array - i_from ) + i_to else
4546: LD_ADDR_VAR 0 11
4550: PUSH
4551: LD_VAR 0 1
4555: PUSH
4556: LD_VAR 0 2
4560: MINUS
4561: PUSH
4562: LD_VAR 0 3
4566: PLUS
4567: ST_TO_ADDR
4568: GO 4586
// length := i_to - i_from ;
4570: LD_ADDR_VAR 0 11
4574: PUSH
4575: LD_VAR 0 3
4579: PUSH
4580: LD_VAR 0 2
4584: MINUS
4585: ST_TO_ADDR
// end else
4586: GO 4649
// begin d := - 1 ;
4588: LD_ADDR_VAR 0 9
4592: PUSH
4593: LD_INT 1
4595: NEG
4596: ST_TO_ADDR
// if i_from > i_to then
4597: LD_VAR 0 2
4601: PUSH
4602: LD_VAR 0 3
4606: GREATER
4607: IFFALSE 4627
// length := i_from - i_to else
4609: LD_ADDR_VAR 0 11
4613: PUSH
4614: LD_VAR 0 2
4618: PUSH
4619: LD_VAR 0 3
4623: MINUS
4624: ST_TO_ADDR
4625: GO 4649
// length := ( array - i_to ) + i_from ;
4627: LD_ADDR_VAR 0 11
4631: PUSH
4632: LD_VAR 0 1
4636: PUSH
4637: LD_VAR 0 3
4641: MINUS
4642: PUSH
4643: LD_VAR 0 2
4647: PLUS
4648: ST_TO_ADDR
// end ; if not length then
4649: LD_VAR 0 11
4653: NOT
4654: IFFALSE 4658
// exit ;
4656: GO 4816
// tmp := array ;
4658: LD_ADDR_VAR 0 10
4662: PUSH
4663: LD_VAR 0 1
4667: ST_TO_ADDR
// for i = 1 to length do
4668: LD_ADDR_VAR 0 6
4672: PUSH
4673: DOUBLE
4674: LD_INT 1
4676: DEC
4677: ST_TO_ADDR
4678: LD_VAR 0 11
4682: PUSH
4683: FOR_TO
4684: IFFALSE 4804
// begin for j = 1 to array do
4686: LD_ADDR_VAR 0 7
4690: PUSH
4691: DOUBLE
4692: LD_INT 1
4694: DEC
4695: ST_TO_ADDR
4696: LD_VAR 0 1
4700: PUSH
4701: FOR_TO
4702: IFFALSE 4790
// begin k := j + d ;
4704: LD_ADDR_VAR 0 8
4708: PUSH
4709: LD_VAR 0 7
4713: PUSH
4714: LD_VAR 0 9
4718: PLUS
4719: ST_TO_ADDR
// if k > array then
4720: LD_VAR 0 8
4724: PUSH
4725: LD_VAR 0 1
4729: GREATER
4730: IFFALSE 4740
// k := 1 ;
4732: LD_ADDR_VAR 0 8
4736: PUSH
4737: LD_INT 1
4739: ST_TO_ADDR
// if not k then
4740: LD_VAR 0 8
4744: NOT
4745: IFFALSE 4757
// k := array ;
4747: LD_ADDR_VAR 0 8
4751: PUSH
4752: LD_VAR 0 1
4756: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4757: LD_ADDR_VAR 0 10
4761: PUSH
4762: LD_VAR 0 10
4766: PPUSH
4767: LD_VAR 0 8
4771: PPUSH
4772: LD_VAR 0 1
4776: PUSH
4777: LD_VAR 0 7
4781: ARRAY
4782: PPUSH
4783: CALL_OW 1
4787: ST_TO_ADDR
// end ;
4788: GO 4701
4790: POP
4791: POP
// array := tmp ;
4792: LD_ADDR_VAR 0 1
4796: PUSH
4797: LD_VAR 0 10
4801: ST_TO_ADDR
// end ;
4802: GO 4683
4804: POP
4805: POP
// result := array ;
4806: LD_ADDR_VAR 0 5
4810: PUSH
4811: LD_VAR 0 1
4815: ST_TO_ADDR
// end ;
4816: LD_VAR 0 5
4820: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
4821: LD_INT 0
4823: PPUSH
4824: PPUSH
// result := 0 ;
4825: LD_ADDR_VAR 0 3
4829: PUSH
4830: LD_INT 0
4832: ST_TO_ADDR
// if not array or not value in array then
4833: LD_VAR 0 1
4837: NOT
4838: PUSH
4839: LD_VAR 0 2
4843: PUSH
4844: LD_VAR 0 1
4848: IN
4849: NOT
4850: OR
4851: IFFALSE 4855
// exit ;
4853: GO 4909
// for i = 1 to array do
4855: LD_ADDR_VAR 0 4
4859: PUSH
4860: DOUBLE
4861: LD_INT 1
4863: DEC
4864: ST_TO_ADDR
4865: LD_VAR 0 1
4869: PUSH
4870: FOR_TO
4871: IFFALSE 4907
// if value = array [ i ] then
4873: LD_VAR 0 2
4877: PUSH
4878: LD_VAR 0 1
4882: PUSH
4883: LD_VAR 0 4
4887: ARRAY
4888: EQUAL
4889: IFFALSE 4905
// begin result := i ;
4891: LD_ADDR_VAR 0 3
4895: PUSH
4896: LD_VAR 0 4
4900: ST_TO_ADDR
// exit ;
4901: POP
4902: POP
4903: GO 4909
// end ;
4905: GO 4870
4907: POP
4908: POP
// end ;
4909: LD_VAR 0 3
4913: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
4914: LD_INT 0
4916: PPUSH
// vc_chassis := chassis ;
4917: LD_ADDR_OWVAR 37
4921: PUSH
4922: LD_VAR 0 1
4926: ST_TO_ADDR
// vc_engine := engine ;
4927: LD_ADDR_OWVAR 39
4931: PUSH
4932: LD_VAR 0 2
4936: ST_TO_ADDR
// vc_control := control ;
4937: LD_ADDR_OWVAR 38
4941: PUSH
4942: LD_VAR 0 3
4946: ST_TO_ADDR
// vc_weapon := weapon ;
4947: LD_ADDR_OWVAR 40
4951: PUSH
4952: LD_VAR 0 4
4956: ST_TO_ADDR
// vc_fuel_battery := fuel ;
4957: LD_ADDR_OWVAR 41
4961: PUSH
4962: LD_VAR 0 5
4966: ST_TO_ADDR
// end ;
4967: LD_VAR 0 6
4971: RET
// export function WantPlant ( unit ) ; var task ; begin
4972: LD_INT 0
4974: PPUSH
4975: PPUSH
// result := false ;
4976: LD_ADDR_VAR 0 2
4980: PUSH
4981: LD_INT 0
4983: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
4984: LD_ADDR_VAR 0 3
4988: PUSH
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 437
4998: ST_TO_ADDR
// if task then
4999: LD_VAR 0 3
5003: IFFALSE 5031
// if task [ 1 ] [ 1 ] = p then
5005: LD_VAR 0 3
5009: PUSH
5010: LD_INT 1
5012: ARRAY
5013: PUSH
5014: LD_INT 1
5016: ARRAY
5017: PUSH
5018: LD_STRING p
5020: EQUAL
5021: IFFALSE 5031
// result := true ;
5023: LD_ADDR_VAR 0 2
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// end ;
5031: LD_VAR 0 2
5035: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5036: LD_INT 0
5038: PPUSH
5039: PPUSH
5040: PPUSH
5041: PPUSH
// if pos < 1 then
5042: LD_VAR 0 2
5046: PUSH
5047: LD_INT 1
5049: LESS
5050: IFFALSE 5054
// exit ;
5052: GO 5357
// if pos = 1 then
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 1
5061: EQUAL
5062: IFFALSE 5095
// result := Replace ( arr , pos [ 1 ] , value ) else
5064: LD_ADDR_VAR 0 4
5068: PUSH
5069: LD_VAR 0 1
5073: PPUSH
5074: LD_VAR 0 2
5078: PUSH
5079: LD_INT 1
5081: ARRAY
5082: PPUSH
5083: LD_VAR 0 3
5087: PPUSH
5088: CALL_OW 1
5092: ST_TO_ADDR
5093: GO 5357
// begin tmp := arr ;
5095: LD_ADDR_VAR 0 6
5099: PUSH
5100: LD_VAR 0 1
5104: ST_TO_ADDR
// s_arr := [ tmp ] ;
5105: LD_ADDR_VAR 0 7
5109: PUSH
5110: LD_VAR 0 6
5114: PUSH
5115: EMPTY
5116: LIST
5117: ST_TO_ADDR
// for i = 1 to pos - 1 do
5118: LD_ADDR_VAR 0 5
5122: PUSH
5123: DOUBLE
5124: LD_INT 1
5126: DEC
5127: ST_TO_ADDR
5128: LD_VAR 0 2
5132: PUSH
5133: LD_INT 1
5135: MINUS
5136: PUSH
5137: FOR_TO
5138: IFFALSE 5183
// begin tmp := tmp [ pos [ i ] ] ;
5140: LD_ADDR_VAR 0 6
5144: PUSH
5145: LD_VAR 0 6
5149: PUSH
5150: LD_VAR 0 2
5154: PUSH
5155: LD_VAR 0 5
5159: ARRAY
5160: ARRAY
5161: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5162: LD_ADDR_VAR 0 7
5166: PUSH
5167: LD_VAR 0 7
5171: PUSH
5172: LD_VAR 0 6
5176: PUSH
5177: EMPTY
5178: LIST
5179: ADD
5180: ST_TO_ADDR
// end ;
5181: GO 5137
5183: POP
5184: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5185: LD_ADDR_VAR 0 6
5189: PUSH
5190: LD_VAR 0 6
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 2
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 3
5210: PPUSH
5211: CALL_OW 1
5215: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5216: LD_ADDR_VAR 0 7
5220: PUSH
5221: LD_VAR 0 7
5225: PPUSH
5226: LD_VAR 0 7
5230: PPUSH
5231: LD_VAR 0 6
5235: PPUSH
5236: CALL_OW 1
5240: ST_TO_ADDR
// for i = s_arr downto 2 do
5241: LD_ADDR_VAR 0 5
5245: PUSH
5246: DOUBLE
5247: LD_VAR 0 7
5251: INC
5252: ST_TO_ADDR
5253: LD_INT 2
5255: PUSH
5256: FOR_DOWNTO
5257: IFFALSE 5341
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5259: LD_ADDR_VAR 0 6
5263: PUSH
5264: LD_VAR 0 7
5268: PUSH
5269: LD_VAR 0 5
5273: PUSH
5274: LD_INT 1
5276: MINUS
5277: ARRAY
5278: PPUSH
5279: LD_VAR 0 2
5283: PUSH
5284: LD_VAR 0 5
5288: PUSH
5289: LD_INT 1
5291: MINUS
5292: ARRAY
5293: PPUSH
5294: LD_VAR 0 7
5298: PUSH
5299: LD_VAR 0 5
5303: ARRAY
5304: PPUSH
5305: CALL_OW 1
5309: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5310: LD_ADDR_VAR 0 7
5314: PUSH
5315: LD_VAR 0 7
5319: PPUSH
5320: LD_VAR 0 5
5324: PUSH
5325: LD_INT 1
5327: MINUS
5328: PPUSH
5329: LD_VAR 0 6
5333: PPUSH
5334: CALL_OW 1
5338: ST_TO_ADDR
// end ;
5339: GO 5256
5341: POP
5342: POP
// result := s_arr [ 1 ] ;
5343: LD_ADDR_VAR 0 4
5347: PUSH
5348: LD_VAR 0 7
5352: PUSH
5353: LD_INT 1
5355: ARRAY
5356: ST_TO_ADDR
// end ; end ;
5357: LD_VAR 0 4
5361: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5362: LD_INT 0
5364: PPUSH
5365: PPUSH
// if not list then
5366: LD_VAR 0 1
5370: NOT
5371: IFFALSE 5375
// exit ;
5373: GO 5466
// i := list [ pos1 ] ;
5375: LD_ADDR_VAR 0 5
5379: PUSH
5380: LD_VAR 0 1
5384: PUSH
5385: LD_VAR 0 2
5389: ARRAY
5390: ST_TO_ADDR
// if not i then
5391: LD_VAR 0 5
5395: NOT
5396: IFFALSE 5400
// exit ;
5398: GO 5466
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5400: LD_ADDR_VAR 0 1
5404: PUSH
5405: LD_VAR 0 1
5409: PPUSH
5410: LD_VAR 0 2
5414: PPUSH
5415: LD_VAR 0 1
5419: PUSH
5420: LD_VAR 0 3
5424: ARRAY
5425: PPUSH
5426: CALL_OW 1
5430: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5431: LD_ADDR_VAR 0 1
5435: PUSH
5436: LD_VAR 0 1
5440: PPUSH
5441: LD_VAR 0 3
5445: PPUSH
5446: LD_VAR 0 5
5450: PPUSH
5451: CALL_OW 1
5455: ST_TO_ADDR
// result := list ;
5456: LD_ADDR_VAR 0 4
5460: PUSH
5461: LD_VAR 0 1
5465: ST_TO_ADDR
// end ;
5466: LD_VAR 0 4
5470: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5471: LD_INT 0
5473: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5474: LD_ADDR_VAR 0 5
5478: PUSH
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 250
5488: PPUSH
5489: LD_VAR 0 1
5493: PPUSH
5494: CALL_OW 251
5498: PPUSH
5499: LD_VAR 0 2
5503: PPUSH
5504: LD_VAR 0 3
5508: PPUSH
5509: LD_VAR 0 4
5513: PPUSH
5514: CALL 5524 0 5
5518: ST_TO_ADDR
// end ;
5519: LD_VAR 0 5
5523: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5524: LD_INT 0
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
// if not list then
5530: LD_VAR 0 3
5534: NOT
5535: IFFALSE 5539
// exit ;
5537: GO 5927
// result := [ ] ;
5539: LD_ADDR_VAR 0 6
5543: PUSH
5544: EMPTY
5545: ST_TO_ADDR
// for i in list do
5546: LD_ADDR_VAR 0 7
5550: PUSH
5551: LD_VAR 0 3
5555: PUSH
5556: FOR_IN
5557: IFFALSE 5759
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5559: LD_ADDR_VAR 0 9
5563: PUSH
5564: LD_VAR 0 7
5568: PPUSH
5569: LD_VAR 0 1
5573: PPUSH
5574: LD_VAR 0 2
5578: PPUSH
5579: CALL_OW 297
5583: ST_TO_ADDR
// if not result then
5584: LD_VAR 0 6
5588: NOT
5589: IFFALSE 5615
// result := [ [ i , tmp ] ] else
5591: LD_ADDR_VAR 0 6
5595: PUSH
5596: LD_VAR 0 7
5600: PUSH
5601: LD_VAR 0 9
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: ST_TO_ADDR
5613: GO 5757
// begin if result [ result ] [ 2 ] < tmp then
5615: LD_VAR 0 6
5619: PUSH
5620: LD_VAR 0 6
5624: ARRAY
5625: PUSH
5626: LD_INT 2
5628: ARRAY
5629: PUSH
5630: LD_VAR 0 9
5634: LESS
5635: IFFALSE 5677
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5637: LD_ADDR_VAR 0 6
5641: PUSH
5642: LD_VAR 0 6
5646: PPUSH
5647: LD_VAR 0 6
5651: PUSH
5652: LD_INT 1
5654: PLUS
5655: PPUSH
5656: LD_VAR 0 7
5660: PUSH
5661: LD_VAR 0 9
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PPUSH
5670: CALL_OW 2
5674: ST_TO_ADDR
5675: GO 5757
// for j = 1 to result do
5677: LD_ADDR_VAR 0 8
5681: PUSH
5682: DOUBLE
5683: LD_INT 1
5685: DEC
5686: ST_TO_ADDR
5687: LD_VAR 0 6
5691: PUSH
5692: FOR_TO
5693: IFFALSE 5755
// begin if tmp < result [ j ] [ 2 ] then
5695: LD_VAR 0 9
5699: PUSH
5700: LD_VAR 0 6
5704: PUSH
5705: LD_VAR 0 8
5709: ARRAY
5710: PUSH
5711: LD_INT 2
5713: ARRAY
5714: LESS
5715: IFFALSE 5753
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5717: LD_ADDR_VAR 0 6
5721: PUSH
5722: LD_VAR 0 6
5726: PPUSH
5727: LD_VAR 0 8
5731: PPUSH
5732: LD_VAR 0 7
5736: PUSH
5737: LD_VAR 0 9
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PPUSH
5746: CALL_OW 2
5750: ST_TO_ADDR
// break ;
5751: GO 5755
// end ; end ;
5753: GO 5692
5755: POP
5756: POP
// end ; end ;
5757: GO 5556
5759: POP
5760: POP
// if result and not asc then
5761: LD_VAR 0 6
5765: PUSH
5766: LD_VAR 0 4
5770: NOT
5771: AND
5772: IFFALSE 5847
// begin tmp := result ;
5774: LD_ADDR_VAR 0 9
5778: PUSH
5779: LD_VAR 0 6
5783: ST_TO_ADDR
// for i = tmp downto 1 do
5784: LD_ADDR_VAR 0 7
5788: PUSH
5789: DOUBLE
5790: LD_VAR 0 9
5794: INC
5795: ST_TO_ADDR
5796: LD_INT 1
5798: PUSH
5799: FOR_DOWNTO
5800: IFFALSE 5845
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
5802: LD_ADDR_VAR 0 6
5806: PUSH
5807: LD_VAR 0 6
5811: PPUSH
5812: LD_VAR 0 9
5816: PUSH
5817: LD_VAR 0 7
5821: MINUS
5822: PUSH
5823: LD_INT 1
5825: PLUS
5826: PPUSH
5827: LD_VAR 0 9
5831: PUSH
5832: LD_VAR 0 7
5836: ARRAY
5837: PPUSH
5838: CALL_OW 1
5842: ST_TO_ADDR
5843: GO 5799
5845: POP
5846: POP
// end ; tmp := [ ] ;
5847: LD_ADDR_VAR 0 9
5851: PUSH
5852: EMPTY
5853: ST_TO_ADDR
// if mode then
5854: LD_VAR 0 5
5858: IFFALSE 5927
// begin for i = 1 to result do
5860: LD_ADDR_VAR 0 7
5864: PUSH
5865: DOUBLE
5866: LD_INT 1
5868: DEC
5869: ST_TO_ADDR
5870: LD_VAR 0 6
5874: PUSH
5875: FOR_TO
5876: IFFALSE 5915
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
5878: LD_ADDR_VAR 0 9
5882: PUSH
5883: LD_VAR 0 9
5887: PPUSH
5888: LD_VAR 0 7
5892: PPUSH
5893: LD_VAR 0 6
5897: PUSH
5898: LD_VAR 0 7
5902: ARRAY
5903: PUSH
5904: LD_INT 1
5906: ARRAY
5907: PPUSH
5908: CALL_OW 1
5912: ST_TO_ADDR
5913: GO 5875
5915: POP
5916: POP
// result := tmp ;
5917: LD_ADDR_VAR 0 6
5921: PUSH
5922: LD_VAR 0 9
5926: ST_TO_ADDR
// end ; end ;
5927: LD_VAR 0 6
5931: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
5932: LD_INT 0
5934: PPUSH
5935: PPUSH
5936: PPUSH
5937: PPUSH
5938: PPUSH
5939: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
5940: LD_ADDR_VAR 0 5
5944: PUSH
5945: LD_INT 0
5947: PUSH
5948: LD_INT 0
5950: PUSH
5951: LD_INT 0
5953: PUSH
5954: EMPTY
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: ST_TO_ADDR
// if not x or not y then
5962: LD_VAR 0 2
5966: NOT
5967: PUSH
5968: LD_VAR 0 3
5972: NOT
5973: OR
5974: IFFALSE 5978
// exit ;
5976: GO 7628
// if not range then
5978: LD_VAR 0 4
5982: NOT
5983: IFFALSE 5993
// range := 10 ;
5985: LD_ADDR_VAR 0 4
5989: PUSH
5990: LD_INT 10
5992: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5993: LD_ADDR_VAR 0 8
5997: PUSH
5998: LD_INT 81
6000: PUSH
6001: LD_VAR 0 1
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: PUSH
6010: LD_INT 92
6012: PUSH
6013: LD_VAR 0 2
6017: PUSH
6018: LD_VAR 0 3
6022: PUSH
6023: LD_VAR 0 4
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 3
6036: PUSH
6037: LD_INT 21
6039: PUSH
6040: LD_INT 3
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: PPUSH
6056: CALL_OW 69
6060: ST_TO_ADDR
// if not tmp then
6061: LD_VAR 0 8
6065: NOT
6066: IFFALSE 6070
// exit ;
6068: GO 7628
// for i in tmp do
6070: LD_ADDR_VAR 0 6
6074: PUSH
6075: LD_VAR 0 8
6079: PUSH
6080: FOR_IN
6081: IFFALSE 7603
// begin points := [ 0 , 0 , 0 ] ;
6083: LD_ADDR_VAR 0 9
6087: PUSH
6088: LD_INT 0
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: ST_TO_ADDR
// bpoints := 1 ;
6102: LD_ADDR_VAR 0 10
6106: PUSH
6107: LD_INT 1
6109: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6110: LD_VAR 0 6
6114: PPUSH
6115: CALL_OW 247
6119: PUSH
6120: LD_INT 1
6122: DOUBLE
6123: EQUAL
6124: IFTRUE 6128
6126: GO 6706
6128: POP
// begin if GetClass ( i ) = 1 then
6129: LD_VAR 0 6
6133: PPUSH
6134: CALL_OW 257
6138: PUSH
6139: LD_INT 1
6141: EQUAL
6142: IFFALSE 6163
// points := [ 10 , 5 , 3 ] ;
6144: LD_ADDR_VAR 0 9
6148: PUSH
6149: LD_INT 10
6151: PUSH
6152: LD_INT 5
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6163: LD_VAR 0 6
6167: PPUSH
6168: CALL_OW 257
6172: PUSH
6173: LD_INT 2
6175: PUSH
6176: LD_INT 3
6178: PUSH
6179: LD_INT 4
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: IN
6187: IFFALSE 6208
// points := [ 3 , 2 , 1 ] ;
6189: LD_ADDR_VAR 0 9
6193: PUSH
6194: LD_INT 3
6196: PUSH
6197: LD_INT 2
6199: PUSH
6200: LD_INT 1
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: LIST
6207: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6208: LD_VAR 0 6
6212: PPUSH
6213: CALL_OW 257
6217: PUSH
6218: LD_INT 5
6220: EQUAL
6221: IFFALSE 6242
// points := [ 130 , 5 , 2 ] ;
6223: LD_ADDR_VAR 0 9
6227: PUSH
6228: LD_INT 130
6230: PUSH
6231: LD_INT 5
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6242: LD_VAR 0 6
6246: PPUSH
6247: CALL_OW 257
6251: PUSH
6252: LD_INT 8
6254: EQUAL
6255: IFFALSE 6276
// points := [ 35 , 35 , 30 ] ;
6257: LD_ADDR_VAR 0 9
6261: PUSH
6262: LD_INT 35
6264: PUSH
6265: LD_INT 35
6267: PUSH
6268: LD_INT 30
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6276: LD_VAR 0 6
6280: PPUSH
6281: CALL_OW 257
6285: PUSH
6286: LD_INT 9
6288: EQUAL
6289: IFFALSE 6310
// points := [ 20 , 55 , 40 ] ;
6291: LD_ADDR_VAR 0 9
6295: PUSH
6296: LD_INT 20
6298: PUSH
6299: LD_INT 55
6301: PUSH
6302: LD_INT 40
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6310: LD_VAR 0 6
6314: PPUSH
6315: CALL_OW 257
6319: PUSH
6320: LD_INT 12
6322: PUSH
6323: LD_INT 16
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: IN
6330: IFFALSE 6351
// points := [ 5 , 3 , 2 ] ;
6332: LD_ADDR_VAR 0 9
6336: PUSH
6337: LD_INT 5
6339: PUSH
6340: LD_INT 3
6342: PUSH
6343: LD_INT 2
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6351: LD_VAR 0 6
6355: PPUSH
6356: CALL_OW 257
6360: PUSH
6361: LD_INT 17
6363: EQUAL
6364: IFFALSE 6385
// points := [ 100 , 50 , 75 ] ;
6366: LD_ADDR_VAR 0 9
6370: PUSH
6371: LD_INT 100
6373: PUSH
6374: LD_INT 50
6376: PUSH
6377: LD_INT 75
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6385: LD_VAR 0 6
6389: PPUSH
6390: CALL_OW 257
6394: PUSH
6395: LD_INT 15
6397: EQUAL
6398: IFFALSE 6419
// points := [ 10 , 5 , 3 ] ;
6400: LD_ADDR_VAR 0 9
6404: PUSH
6405: LD_INT 10
6407: PUSH
6408: LD_INT 5
6410: PUSH
6411: LD_INT 3
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6419: LD_VAR 0 6
6423: PPUSH
6424: CALL_OW 257
6428: PUSH
6429: LD_INT 14
6431: EQUAL
6432: IFFALSE 6453
// points := [ 10 , 0 , 0 ] ;
6434: LD_ADDR_VAR 0 9
6438: PUSH
6439: LD_INT 10
6441: PUSH
6442: LD_INT 0
6444: PUSH
6445: LD_INT 0
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6453: LD_VAR 0 6
6457: PPUSH
6458: CALL_OW 257
6462: PUSH
6463: LD_INT 11
6465: EQUAL
6466: IFFALSE 6487
// points := [ 30 , 10 , 5 ] ;
6468: LD_ADDR_VAR 0 9
6472: PUSH
6473: LD_INT 30
6475: PUSH
6476: LD_INT 10
6478: PUSH
6479: LD_INT 5
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: LIST
6486: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6487: LD_VAR 0 1
6491: PPUSH
6492: LD_INT 5
6494: PPUSH
6495: CALL_OW 321
6499: PUSH
6500: LD_INT 2
6502: EQUAL
6503: IFFALSE 6520
// bpoints := bpoints * 1.8 ;
6505: LD_ADDR_VAR 0 10
6509: PUSH
6510: LD_VAR 0 10
6514: PUSH
6515: LD_REAL  1.80000000000000E+0000
6518: MUL
6519: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6520: LD_VAR 0 6
6524: PPUSH
6525: CALL_OW 257
6529: PUSH
6530: LD_INT 1
6532: PUSH
6533: LD_INT 2
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: LD_INT 4
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: IN
6548: PUSH
6549: LD_VAR 0 1
6553: PPUSH
6554: LD_INT 51
6556: PPUSH
6557: CALL_OW 321
6561: PUSH
6562: LD_INT 2
6564: EQUAL
6565: AND
6566: IFFALSE 6583
// bpoints := bpoints * 1.2 ;
6568: LD_ADDR_VAR 0 10
6572: PUSH
6573: LD_VAR 0 10
6577: PUSH
6578: LD_REAL  1.20000000000000E+0000
6581: MUL
6582: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6583: LD_VAR 0 6
6587: PPUSH
6588: CALL_OW 257
6592: PUSH
6593: LD_INT 5
6595: PUSH
6596: LD_INT 7
6598: PUSH
6599: LD_INT 9
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: IN
6607: PUSH
6608: LD_VAR 0 1
6612: PPUSH
6613: LD_INT 52
6615: PPUSH
6616: CALL_OW 321
6620: PUSH
6621: LD_INT 2
6623: EQUAL
6624: AND
6625: IFFALSE 6642
// bpoints := bpoints * 1.5 ;
6627: LD_ADDR_VAR 0 10
6631: PUSH
6632: LD_VAR 0 10
6636: PUSH
6637: LD_REAL  1.50000000000000E+0000
6640: MUL
6641: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6642: LD_VAR 0 1
6646: PPUSH
6647: LD_INT 66
6649: PPUSH
6650: CALL_OW 321
6654: PUSH
6655: LD_INT 2
6657: EQUAL
6658: IFFALSE 6675
// bpoints := bpoints * 1.1 ;
6660: LD_ADDR_VAR 0 10
6664: PUSH
6665: LD_VAR 0 10
6669: PUSH
6670: LD_REAL  1.10000000000000E+0000
6673: MUL
6674: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6675: LD_ADDR_VAR 0 10
6679: PUSH
6680: LD_VAR 0 10
6684: PUSH
6685: LD_VAR 0 6
6689: PPUSH
6690: LD_INT 1
6692: PPUSH
6693: CALL_OW 259
6697: PUSH
6698: LD_REAL  1.15000000000000E+0000
6701: MUL
6702: MUL
6703: ST_TO_ADDR
// end ; unit_vehicle :
6704: GO 7532
6706: LD_INT 2
6708: DOUBLE
6709: EQUAL
6710: IFTRUE 6714
6712: GO 7520
6714: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
6715: LD_VAR 0 6
6719: PPUSH
6720: CALL_OW 264
6724: PUSH
6725: LD_INT 2
6727: PUSH
6728: LD_INT 42
6730: PUSH
6731: LD_INT 24
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: IN
6739: IFFALSE 6760
// points := [ 25 , 5 , 3 ] ;
6741: LD_ADDR_VAR 0 9
6745: PUSH
6746: LD_INT 25
6748: PUSH
6749: LD_INT 5
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
6760: LD_VAR 0 6
6764: PPUSH
6765: CALL_OW 264
6769: PUSH
6770: LD_INT 4
6772: PUSH
6773: LD_INT 43
6775: PUSH
6776: LD_INT 25
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: LIST
6783: IN
6784: IFFALSE 6805
// points := [ 40 , 15 , 5 ] ;
6786: LD_ADDR_VAR 0 9
6790: PUSH
6791: LD_INT 40
6793: PUSH
6794: LD_INT 15
6796: PUSH
6797: LD_INT 5
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
6805: LD_VAR 0 6
6809: PPUSH
6810: CALL_OW 264
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: LD_INT 23
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: IN
6825: IFFALSE 6846
// points := [ 7 , 25 , 8 ] ;
6827: LD_ADDR_VAR 0 9
6831: PUSH
6832: LD_INT 7
6834: PUSH
6835: LD_INT 25
6837: PUSH
6838: LD_INT 8
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: LIST
6845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
6846: LD_VAR 0 6
6850: PPUSH
6851: CALL_OW 264
6855: PUSH
6856: LD_INT 5
6858: PUSH
6859: LD_INT 27
6861: PUSH
6862: LD_INT 44
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: LIST
6869: IN
6870: IFFALSE 6891
// points := [ 14 , 50 , 16 ] ;
6872: LD_ADDR_VAR 0 9
6876: PUSH
6877: LD_INT 14
6879: PUSH
6880: LD_INT 50
6882: PUSH
6883: LD_INT 16
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
6891: LD_VAR 0 6
6895: PPUSH
6896: CALL_OW 264
6900: PUSH
6901: LD_INT 6
6903: PUSH
6904: LD_INT 46
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: IN
6911: IFFALSE 6932
// points := [ 32 , 120 , 70 ] ;
6913: LD_ADDR_VAR 0 9
6917: PUSH
6918: LD_INT 32
6920: PUSH
6921: LD_INT 120
6923: PUSH
6924: LD_INT 70
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
6932: LD_VAR 0 6
6936: PPUSH
6937: CALL_OW 264
6941: PUSH
6942: LD_INT 7
6944: PUSH
6945: LD_INT 28
6947: PUSH
6948: LD_INT 45
6950: PUSH
6951: LD_INT 92
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: IN
6960: IFFALSE 6981
// points := [ 35 , 20 , 45 ] ;
6962: LD_ADDR_VAR 0 9
6966: PUSH
6967: LD_INT 35
6969: PUSH
6970: LD_INT 20
6972: PUSH
6973: LD_INT 45
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
6981: LD_VAR 0 6
6985: PPUSH
6986: CALL_OW 264
6990: PUSH
6991: LD_INT 47
6993: PUSH
6994: EMPTY
6995: LIST
6996: IN
6997: IFFALSE 7018
// points := [ 67 , 45 , 75 ] ;
6999: LD_ADDR_VAR 0 9
7003: PUSH
7004: LD_INT 67
7006: PUSH
7007: LD_INT 45
7009: PUSH
7010: LD_INT 75
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7018: LD_VAR 0 6
7022: PPUSH
7023: CALL_OW 264
7027: PUSH
7028: LD_INT 26
7030: PUSH
7031: EMPTY
7032: LIST
7033: IN
7034: IFFALSE 7055
// points := [ 120 , 30 , 80 ] ;
7036: LD_ADDR_VAR 0 9
7040: PUSH
7041: LD_INT 120
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 80
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7055: LD_VAR 0 6
7059: PPUSH
7060: CALL_OW 264
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: EMPTY
7069: LIST
7070: IN
7071: IFFALSE 7092
// points := [ 40 , 1 , 1 ] ;
7073: LD_ADDR_VAR 0 9
7077: PUSH
7078: LD_INT 40
7080: PUSH
7081: LD_INT 1
7083: PUSH
7084: LD_INT 1
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7092: LD_VAR 0 6
7096: PPUSH
7097: CALL_OW 264
7101: PUSH
7102: LD_INT 29
7104: PUSH
7105: EMPTY
7106: LIST
7107: IN
7108: IFFALSE 7129
// points := [ 70 , 200 , 400 ] ;
7110: LD_ADDR_VAR 0 9
7114: PUSH
7115: LD_INT 70
7117: PUSH
7118: LD_INT 200
7120: PUSH
7121: LD_INT 400
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: LIST
7128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7129: LD_VAR 0 6
7133: PPUSH
7134: CALL_OW 264
7138: PUSH
7139: LD_INT 14
7141: PUSH
7142: LD_INT 53
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: IN
7149: IFFALSE 7170
// points := [ 40 , 10 , 20 ] ;
7151: LD_ADDR_VAR 0 9
7155: PUSH
7156: LD_INT 40
7158: PUSH
7159: LD_INT 10
7161: PUSH
7162: LD_INT 20
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7170: LD_VAR 0 6
7174: PPUSH
7175: CALL_OW 264
7179: PUSH
7180: LD_INT 9
7182: PUSH
7183: EMPTY
7184: LIST
7185: IN
7186: IFFALSE 7207
// points := [ 5 , 70 , 20 ] ;
7188: LD_ADDR_VAR 0 9
7192: PUSH
7193: LD_INT 5
7195: PUSH
7196: LD_INT 70
7198: PUSH
7199: LD_INT 20
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7207: LD_VAR 0 6
7211: PPUSH
7212: CALL_OW 264
7216: PUSH
7217: LD_INT 10
7219: PUSH
7220: EMPTY
7221: LIST
7222: IN
7223: IFFALSE 7244
// points := [ 35 , 110 , 70 ] ;
7225: LD_ADDR_VAR 0 9
7229: PUSH
7230: LD_INT 35
7232: PUSH
7233: LD_INT 110
7235: PUSH
7236: LD_INT 70
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7244: LD_VAR 0 6
7248: PPUSH
7249: CALL_OW 265
7253: PUSH
7254: LD_INT 25
7256: EQUAL
7257: IFFALSE 7278
// points := [ 80 , 65 , 100 ] ;
7259: LD_ADDR_VAR 0 9
7263: PUSH
7264: LD_INT 80
7266: PUSH
7267: LD_INT 65
7269: PUSH
7270: LD_INT 100
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: LIST
7277: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7278: LD_VAR 0 6
7282: PPUSH
7283: CALL_OW 263
7287: PUSH
7288: LD_INT 1
7290: EQUAL
7291: IFFALSE 7326
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7293: LD_ADDR_VAR 0 10
7297: PUSH
7298: LD_VAR 0 10
7302: PUSH
7303: LD_VAR 0 6
7307: PPUSH
7308: CALL_OW 311
7312: PPUSH
7313: LD_INT 3
7315: PPUSH
7316: CALL_OW 259
7320: PUSH
7321: LD_INT 4
7323: MUL
7324: MUL
7325: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7326: LD_VAR 0 6
7330: PPUSH
7331: CALL_OW 263
7335: PUSH
7336: LD_INT 2
7338: EQUAL
7339: IFFALSE 7390
// begin j := IsControledBy ( i ) ;
7341: LD_ADDR_VAR 0 7
7345: PUSH
7346: LD_VAR 0 6
7350: PPUSH
7351: CALL_OW 312
7355: ST_TO_ADDR
// if j then
7356: LD_VAR 0 7
7360: IFFALSE 7390
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7362: LD_ADDR_VAR 0 10
7366: PUSH
7367: LD_VAR 0 10
7371: PUSH
7372: LD_VAR 0 7
7376: PPUSH
7377: LD_INT 3
7379: PPUSH
7380: CALL_OW 259
7384: PUSH
7385: LD_INT 3
7387: MUL
7388: MUL
7389: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7390: LD_VAR 0 6
7394: PPUSH
7395: CALL_OW 264
7399: PUSH
7400: LD_INT 5
7402: PUSH
7403: LD_INT 6
7405: PUSH
7406: LD_INT 46
7408: PUSH
7409: LD_INT 44
7411: PUSH
7412: LD_INT 47
7414: PUSH
7415: LD_INT 45
7417: PUSH
7418: LD_INT 28
7420: PUSH
7421: LD_INT 7
7423: PUSH
7424: LD_INT 27
7426: PUSH
7427: LD_INT 29
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: IN
7442: PUSH
7443: LD_VAR 0 1
7447: PPUSH
7448: LD_INT 52
7450: PPUSH
7451: CALL_OW 321
7455: PUSH
7456: LD_INT 2
7458: EQUAL
7459: AND
7460: IFFALSE 7477
// bpoints := bpoints * 1.2 ;
7462: LD_ADDR_VAR 0 10
7466: PUSH
7467: LD_VAR 0 10
7471: PUSH
7472: LD_REAL  1.20000000000000E+0000
7475: MUL
7476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7477: LD_VAR 0 6
7481: PPUSH
7482: CALL_OW 264
7486: PUSH
7487: LD_INT 6
7489: PUSH
7490: LD_INT 46
7492: PUSH
7493: LD_INT 47
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: IN
7501: IFFALSE 7518
// bpoints := bpoints * 1.2 ;
7503: LD_ADDR_VAR 0 10
7507: PUSH
7508: LD_VAR 0 10
7512: PUSH
7513: LD_REAL  1.20000000000000E+0000
7516: MUL
7517: ST_TO_ADDR
// end ; unit_building :
7518: GO 7532
7520: LD_INT 3
7522: DOUBLE
7523: EQUAL
7524: IFTRUE 7528
7526: GO 7531
7528: POP
// ; end ;
7529: GO 7532
7531: POP
// for j = 1 to 3 do
7532: LD_ADDR_VAR 0 7
7536: PUSH
7537: DOUBLE
7538: LD_INT 1
7540: DEC
7541: ST_TO_ADDR
7542: LD_INT 3
7544: PUSH
7545: FOR_TO
7546: IFFALSE 7599
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7548: LD_ADDR_VAR 0 5
7552: PUSH
7553: LD_VAR 0 5
7557: PPUSH
7558: LD_VAR 0 7
7562: PPUSH
7563: LD_VAR 0 5
7567: PUSH
7568: LD_VAR 0 7
7572: ARRAY
7573: PUSH
7574: LD_VAR 0 9
7578: PUSH
7579: LD_VAR 0 7
7583: ARRAY
7584: PUSH
7585: LD_VAR 0 10
7589: MUL
7590: PLUS
7591: PPUSH
7592: CALL_OW 1
7596: ST_TO_ADDR
7597: GO 7545
7599: POP
7600: POP
// end ;
7601: GO 6080
7603: POP
7604: POP
// result := Replace ( result , 4 , tmp ) ;
7605: LD_ADDR_VAR 0 5
7609: PUSH
7610: LD_VAR 0 5
7614: PPUSH
7615: LD_INT 4
7617: PPUSH
7618: LD_VAR 0 8
7622: PPUSH
7623: CALL_OW 1
7627: ST_TO_ADDR
// end ;
7628: LD_VAR 0 5
7632: RET
// export function DangerAtRange ( unit , range ) ; begin
7633: LD_INT 0
7635: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7636: LD_ADDR_VAR 0 3
7640: PUSH
7641: LD_VAR 0 1
7645: PPUSH
7646: CALL_OW 255
7650: PPUSH
7651: LD_VAR 0 1
7655: PPUSH
7656: CALL_OW 250
7660: PPUSH
7661: LD_VAR 0 1
7665: PPUSH
7666: CALL_OW 251
7670: PPUSH
7671: LD_VAR 0 2
7675: PPUSH
7676: CALL 5932 0 4
7680: ST_TO_ADDR
// end ;
7681: LD_VAR 0 3
7685: RET
// export function DangerInArea ( side , area ) ; begin
7686: LD_INT 0
7688: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7689: LD_ADDR_VAR 0 3
7693: PUSH
7694: LD_VAR 0 2
7698: PPUSH
7699: LD_INT 81
7701: PUSH
7702: LD_VAR 0 1
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PPUSH
7711: CALL_OW 70
7715: ST_TO_ADDR
// end ;
7716: LD_VAR 0 3
7720: RET
// export function IsExtension ( b ) ; begin
7721: LD_INT 0
7723: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
7724: LD_ADDR_VAR 0 2
7728: PUSH
7729: LD_VAR 0 1
7733: PUSH
7734: LD_INT 23
7736: PUSH
7737: LD_INT 20
7739: PUSH
7740: LD_INT 22
7742: PUSH
7743: LD_INT 17
7745: PUSH
7746: LD_INT 24
7748: PUSH
7749: LD_INT 21
7751: PUSH
7752: LD_INT 19
7754: PUSH
7755: LD_INT 16
7757: PUSH
7758: LD_INT 25
7760: PUSH
7761: LD_INT 18
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: IN
7776: ST_TO_ADDR
// end ;
7777: LD_VAR 0 2
7781: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
7782: LD_INT 0
7784: PPUSH
7785: PPUSH
7786: PPUSH
// result := [ ] ;
7787: LD_ADDR_VAR 0 4
7791: PUSH
7792: EMPTY
7793: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
7794: LD_ADDR_VAR 0 5
7798: PUSH
7799: LD_VAR 0 2
7803: PPUSH
7804: LD_INT 21
7806: PUSH
7807: LD_INT 3
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 70
7818: ST_TO_ADDR
// if not tmp then
7819: LD_VAR 0 5
7823: NOT
7824: IFFALSE 7828
// exit ;
7826: GO 7892
// if checkLink then
7828: LD_VAR 0 3
7832: IFFALSE 7882
// begin for i in tmp do
7834: LD_ADDR_VAR 0 6
7838: PUSH
7839: LD_VAR 0 5
7843: PUSH
7844: FOR_IN
7845: IFFALSE 7880
// if GetBase ( i ) <> base then
7847: LD_VAR 0 6
7851: PPUSH
7852: CALL_OW 274
7856: PUSH
7857: LD_VAR 0 1
7861: NONEQUAL
7862: IFFALSE 7878
// ComLinkToBase ( base , i ) ;
7864: LD_VAR 0 1
7868: PPUSH
7869: LD_VAR 0 6
7873: PPUSH
7874: CALL_OW 169
7878: GO 7844
7880: POP
7881: POP
// end ; result := tmp ;
7882: LD_ADDR_VAR 0 4
7886: PUSH
7887: LD_VAR 0 5
7891: ST_TO_ADDR
// end ;
7892: LD_VAR 0 4
7896: RET
// export function ComComplete ( units , b ) ; var i ; begin
7897: LD_INT 0
7899: PPUSH
7900: PPUSH
// if not units then
7901: LD_VAR 0 1
7905: NOT
7906: IFFALSE 7910
// exit ;
7908: GO 8000
// for i in units do
7910: LD_ADDR_VAR 0 4
7914: PUSH
7915: LD_VAR 0 1
7919: PUSH
7920: FOR_IN
7921: IFFALSE 7998
// if BuildingStatus ( b ) = bs_build then
7923: LD_VAR 0 2
7927: PPUSH
7928: CALL_OW 461
7932: PUSH
7933: LD_INT 1
7935: EQUAL
7936: IFFALSE 7996
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
7938: LD_VAR 0 4
7942: PPUSH
7943: LD_STRING h
7945: PUSH
7946: LD_VAR 0 2
7950: PPUSH
7951: CALL_OW 250
7955: PUSH
7956: LD_VAR 0 2
7960: PPUSH
7961: CALL_OW 251
7965: PUSH
7966: LD_VAR 0 2
7970: PUSH
7971: LD_INT 0
7973: PUSH
7974: LD_INT 0
7976: PUSH
7977: LD_INT 0
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: PUSH
7989: EMPTY
7990: LIST
7991: PPUSH
7992: CALL_OW 446
7996: GO 7920
7998: POP
7999: POP
// end ;
8000: LD_VAR 0 3
8004: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8005: LD_INT 0
8007: PPUSH
8008: PPUSH
8009: PPUSH
8010: PPUSH
8011: PPUSH
8012: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8013: LD_VAR 0 1
8017: NOT
8018: PUSH
8019: LD_VAR 0 1
8023: PPUSH
8024: CALL_OW 263
8028: PUSH
8029: LD_INT 2
8031: NONEQUAL
8032: OR
8033: IFFALSE 8037
// exit ;
8035: GO 8353
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8037: LD_ADDR_VAR 0 6
8041: PUSH
8042: LD_INT 22
8044: PUSH
8045: LD_VAR 0 1
8049: PPUSH
8050: CALL_OW 255
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: LD_INT 2
8061: PUSH
8062: LD_INT 30
8064: PUSH
8065: LD_INT 36
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 34
8074: PUSH
8075: LD_INT 31
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: PPUSH
8091: CALL_OW 69
8095: ST_TO_ADDR
// if not tmp then
8096: LD_VAR 0 6
8100: NOT
8101: IFFALSE 8105
// exit ;
8103: GO 8353
// result := [ ] ;
8105: LD_ADDR_VAR 0 2
8109: PUSH
8110: EMPTY
8111: ST_TO_ADDR
// for i in tmp do
8112: LD_ADDR_VAR 0 3
8116: PUSH
8117: LD_VAR 0 6
8121: PUSH
8122: FOR_IN
8123: IFFALSE 8194
// begin t := UnitsInside ( i ) ;
8125: LD_ADDR_VAR 0 4
8129: PUSH
8130: LD_VAR 0 3
8134: PPUSH
8135: CALL_OW 313
8139: ST_TO_ADDR
// if t then
8140: LD_VAR 0 4
8144: IFFALSE 8192
// for j in t do
8146: LD_ADDR_VAR 0 7
8150: PUSH
8151: LD_VAR 0 4
8155: PUSH
8156: FOR_IN
8157: IFFALSE 8190
// result := Replace ( result , result + 1 , j ) ;
8159: LD_ADDR_VAR 0 2
8163: PUSH
8164: LD_VAR 0 2
8168: PPUSH
8169: LD_VAR 0 2
8173: PUSH
8174: LD_INT 1
8176: PLUS
8177: PPUSH
8178: LD_VAR 0 7
8182: PPUSH
8183: CALL_OW 1
8187: ST_TO_ADDR
8188: GO 8156
8190: POP
8191: POP
// end ;
8192: GO 8122
8194: POP
8195: POP
// if not result then
8196: LD_VAR 0 2
8200: NOT
8201: IFFALSE 8205
// exit ;
8203: GO 8353
// mech := result [ 1 ] ;
8205: LD_ADDR_VAR 0 5
8209: PUSH
8210: LD_VAR 0 2
8214: PUSH
8215: LD_INT 1
8217: ARRAY
8218: ST_TO_ADDR
// if result > 1 then
8219: LD_VAR 0 2
8223: PUSH
8224: LD_INT 1
8226: GREATER
8227: IFFALSE 8339
// begin for i = 2 to result do
8229: LD_ADDR_VAR 0 3
8233: PUSH
8234: DOUBLE
8235: LD_INT 2
8237: DEC
8238: ST_TO_ADDR
8239: LD_VAR 0 2
8243: PUSH
8244: FOR_TO
8245: IFFALSE 8337
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8247: LD_ADDR_VAR 0 4
8251: PUSH
8252: LD_VAR 0 2
8256: PUSH
8257: LD_VAR 0 3
8261: ARRAY
8262: PPUSH
8263: LD_INT 3
8265: PPUSH
8266: CALL_OW 259
8270: PUSH
8271: LD_VAR 0 2
8275: PUSH
8276: LD_VAR 0 3
8280: ARRAY
8281: PPUSH
8282: CALL_OW 432
8286: MINUS
8287: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8288: LD_VAR 0 4
8292: PUSH
8293: LD_VAR 0 5
8297: PPUSH
8298: LD_INT 3
8300: PPUSH
8301: CALL_OW 259
8305: PUSH
8306: LD_VAR 0 5
8310: PPUSH
8311: CALL_OW 432
8315: MINUS
8316: GREATEREQUAL
8317: IFFALSE 8335
// mech := result [ i ] ;
8319: LD_ADDR_VAR 0 5
8323: PUSH
8324: LD_VAR 0 2
8328: PUSH
8329: LD_VAR 0 3
8333: ARRAY
8334: ST_TO_ADDR
// end ;
8335: GO 8244
8337: POP
8338: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8339: LD_VAR 0 1
8343: PPUSH
8344: LD_VAR 0 5
8348: PPUSH
8349: CALL_OW 135
// end ;
8353: LD_VAR 0 2
8357: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8358: LD_INT 0
8360: PPUSH
8361: PPUSH
8362: PPUSH
8363: PPUSH
8364: PPUSH
8365: PPUSH
8366: PPUSH
8367: PPUSH
8368: PPUSH
8369: PPUSH
8370: PPUSH
8371: PPUSH
8372: PPUSH
// result := [ ] ;
8373: LD_ADDR_VAR 0 7
8377: PUSH
8378: EMPTY
8379: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 266
8389: PUSH
8390: LD_INT 0
8392: PUSH
8393: LD_INT 1
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: IN
8400: NOT
8401: IFFALSE 8405
// exit ;
8403: GO 10039
// if name then
8405: LD_VAR 0 3
8409: IFFALSE 8425
// SetBName ( base_dep , name ) ;
8411: LD_VAR 0 1
8415: PPUSH
8416: LD_VAR 0 3
8420: PPUSH
8421: CALL_OW 500
// base := GetBase ( base_dep ) ;
8425: LD_ADDR_VAR 0 15
8429: PUSH
8430: LD_VAR 0 1
8434: PPUSH
8435: CALL_OW 274
8439: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8440: LD_ADDR_VAR 0 16
8444: PUSH
8445: LD_VAR 0 1
8449: PPUSH
8450: CALL_OW 255
8454: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8455: LD_ADDR_VAR 0 17
8459: PUSH
8460: LD_VAR 0 1
8464: PPUSH
8465: CALL_OW 248
8469: ST_TO_ADDR
// if sources then
8470: LD_VAR 0 5
8474: IFFALSE 8521
// for i = 1 to 3 do
8476: LD_ADDR_VAR 0 8
8480: PUSH
8481: DOUBLE
8482: LD_INT 1
8484: DEC
8485: ST_TO_ADDR
8486: LD_INT 3
8488: PUSH
8489: FOR_TO
8490: IFFALSE 8519
// AddResourceType ( base , i , sources [ i ] ) ;
8492: LD_VAR 0 15
8496: PPUSH
8497: LD_VAR 0 8
8501: PPUSH
8502: LD_VAR 0 5
8506: PUSH
8507: LD_VAR 0 8
8511: ARRAY
8512: PPUSH
8513: CALL_OW 276
8517: GO 8489
8519: POP
8520: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8521: LD_ADDR_VAR 0 18
8525: PUSH
8526: LD_VAR 0 15
8530: PPUSH
8531: LD_VAR 0 2
8535: PPUSH
8536: LD_INT 1
8538: PPUSH
8539: CALL 7782 0 3
8543: ST_TO_ADDR
// InitHc ;
8544: CALL_OW 19
// InitUc ;
8548: CALL_OW 18
// uc_side := side ;
8552: LD_ADDR_OWVAR 20
8556: PUSH
8557: LD_VAR 0 16
8561: ST_TO_ADDR
// uc_nation := nation ;
8562: LD_ADDR_OWVAR 21
8566: PUSH
8567: LD_VAR 0 17
8571: ST_TO_ADDR
// if buildings then
8572: LD_VAR 0 18
8576: IFFALSE 9898
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8578: LD_ADDR_VAR 0 19
8582: PUSH
8583: LD_VAR 0 18
8587: PPUSH
8588: LD_INT 2
8590: PUSH
8591: LD_INT 30
8593: PUSH
8594: LD_INT 29
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 30
8603: PUSH
8604: LD_INT 30
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: LIST
8615: PPUSH
8616: CALL_OW 72
8620: ST_TO_ADDR
// if tmp then
8621: LD_VAR 0 19
8625: IFFALSE 8673
// for i in tmp do
8627: LD_ADDR_VAR 0 8
8631: PUSH
8632: LD_VAR 0 19
8636: PUSH
8637: FOR_IN
8638: IFFALSE 8671
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8640: LD_VAR 0 8
8644: PPUSH
8645: CALL_OW 250
8649: PPUSH
8650: LD_VAR 0 8
8654: PPUSH
8655: CALL_OW 251
8659: PPUSH
8660: LD_VAR 0 16
8664: PPUSH
8665: CALL_OW 441
8669: GO 8637
8671: POP
8672: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8673: LD_VAR 0 18
8677: PPUSH
8678: LD_INT 2
8680: PUSH
8681: LD_INT 30
8683: PUSH
8684: LD_INT 32
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: LD_INT 30
8693: PUSH
8694: LD_INT 33
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 72
8710: IFFALSE 8798
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
8712: LD_ADDR_VAR 0 8
8716: PUSH
8717: LD_VAR 0 18
8721: PPUSH
8722: LD_INT 2
8724: PUSH
8725: LD_INT 30
8727: PUSH
8728: LD_INT 32
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PUSH
8735: LD_INT 30
8737: PUSH
8738: LD_INT 33
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: LIST
8749: PPUSH
8750: CALL_OW 72
8754: PUSH
8755: FOR_IN
8756: IFFALSE 8796
// begin if not GetBWeapon ( i ) then
8758: LD_VAR 0 8
8762: PPUSH
8763: CALL_OW 269
8767: NOT
8768: IFFALSE 8794
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
8770: LD_VAR 0 8
8774: PPUSH
8775: LD_VAR 0 8
8779: PPUSH
8780: LD_VAR 0 2
8784: PPUSH
8785: CALL 10044 0 2
8789: PPUSH
8790: CALL_OW 431
// end ;
8794: GO 8755
8796: POP
8797: POP
// end ; for i = 1 to personel do
8798: LD_ADDR_VAR 0 8
8802: PUSH
8803: DOUBLE
8804: LD_INT 1
8806: DEC
8807: ST_TO_ADDR
8808: LD_VAR 0 6
8812: PUSH
8813: FOR_TO
8814: IFFALSE 9878
// begin if i > 4 then
8816: LD_VAR 0 8
8820: PUSH
8821: LD_INT 4
8823: GREATER
8824: IFFALSE 8828
// break ;
8826: GO 9878
// case i of 1 :
8828: LD_VAR 0 8
8832: PUSH
8833: LD_INT 1
8835: DOUBLE
8836: EQUAL
8837: IFTRUE 8841
8839: GO 8921
8841: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
8842: LD_ADDR_VAR 0 12
8846: PUSH
8847: LD_VAR 0 18
8851: PPUSH
8852: LD_INT 22
8854: PUSH
8855: LD_VAR 0 16
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: LD_INT 58
8866: PUSH
8867: EMPTY
8868: LIST
8869: PUSH
8870: LD_INT 2
8872: PUSH
8873: LD_INT 30
8875: PUSH
8876: LD_INT 32
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 30
8885: PUSH
8886: LD_INT 4
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 30
8895: PUSH
8896: LD_INT 5
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 72
8918: ST_TO_ADDR
8919: GO 9143
8921: LD_INT 2
8923: DOUBLE
8924: EQUAL
8925: IFTRUE 8929
8927: GO 8991
8929: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
8930: LD_ADDR_VAR 0 12
8934: PUSH
8935: LD_VAR 0 18
8939: PPUSH
8940: LD_INT 22
8942: PUSH
8943: LD_VAR 0 16
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PUSH
8952: LD_INT 2
8954: PUSH
8955: LD_INT 30
8957: PUSH
8958: LD_INT 0
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 30
8967: PUSH
8968: LD_INT 1
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: LIST
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PPUSH
8984: CALL_OW 72
8988: ST_TO_ADDR
8989: GO 9143
8991: LD_INT 3
8993: DOUBLE
8994: EQUAL
8995: IFTRUE 8999
8997: GO 9061
8999: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9000: LD_ADDR_VAR 0 12
9004: PUSH
9005: LD_VAR 0 18
9009: PPUSH
9010: LD_INT 22
9012: PUSH
9013: LD_VAR 0 16
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 2
9024: PUSH
9025: LD_INT 30
9027: PUSH
9028: LD_INT 2
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: LD_INT 30
9037: PUSH
9038: LD_INT 3
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 72
9058: ST_TO_ADDR
9059: GO 9143
9061: LD_INT 4
9063: DOUBLE
9064: EQUAL
9065: IFTRUE 9069
9067: GO 9142
9069: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9070: LD_ADDR_VAR 0 12
9074: PUSH
9075: LD_VAR 0 18
9079: PPUSH
9080: LD_INT 22
9082: PUSH
9083: LD_VAR 0 16
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: LD_INT 2
9094: PUSH
9095: LD_INT 30
9097: PUSH
9098: LD_INT 6
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: PUSH
9105: LD_INT 30
9107: PUSH
9108: LD_INT 7
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PUSH
9115: LD_INT 30
9117: PUSH
9118: LD_INT 8
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: PPUSH
9135: CALL_OW 72
9139: ST_TO_ADDR
9140: GO 9143
9142: POP
// if i = 1 then
9143: LD_VAR 0 8
9147: PUSH
9148: LD_INT 1
9150: EQUAL
9151: IFFALSE 9262
// begin tmp := [ ] ;
9153: LD_ADDR_VAR 0 19
9157: PUSH
9158: EMPTY
9159: ST_TO_ADDR
// for j in f do
9160: LD_ADDR_VAR 0 9
9164: PUSH
9165: LD_VAR 0 12
9169: PUSH
9170: FOR_IN
9171: IFFALSE 9244
// if GetBType ( j ) = b_bunker then
9173: LD_VAR 0 9
9177: PPUSH
9178: CALL_OW 266
9182: PUSH
9183: LD_INT 32
9185: EQUAL
9186: IFFALSE 9213
// tmp := Insert ( tmp , 1 , j ) else
9188: LD_ADDR_VAR 0 19
9192: PUSH
9193: LD_VAR 0 19
9197: PPUSH
9198: LD_INT 1
9200: PPUSH
9201: LD_VAR 0 9
9205: PPUSH
9206: CALL_OW 2
9210: ST_TO_ADDR
9211: GO 9242
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9213: LD_ADDR_VAR 0 19
9217: PUSH
9218: LD_VAR 0 19
9222: PPUSH
9223: LD_VAR 0 19
9227: PUSH
9228: LD_INT 1
9230: PLUS
9231: PPUSH
9232: LD_VAR 0 9
9236: PPUSH
9237: CALL_OW 2
9241: ST_TO_ADDR
9242: GO 9170
9244: POP
9245: POP
// if tmp then
9246: LD_VAR 0 19
9250: IFFALSE 9262
// f := tmp ;
9252: LD_ADDR_VAR 0 12
9256: PUSH
9257: LD_VAR 0 19
9261: ST_TO_ADDR
// end ; x := personel [ i ] ;
9262: LD_ADDR_VAR 0 13
9266: PUSH
9267: LD_VAR 0 6
9271: PUSH
9272: LD_VAR 0 8
9276: ARRAY
9277: ST_TO_ADDR
// if x = - 1 then
9278: LD_VAR 0 13
9282: PUSH
9283: LD_INT 1
9285: NEG
9286: EQUAL
9287: IFFALSE 9496
// begin for j in f do
9289: LD_ADDR_VAR 0 9
9293: PUSH
9294: LD_VAR 0 12
9298: PUSH
9299: FOR_IN
9300: IFFALSE 9492
// repeat InitHc ;
9302: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9306: LD_VAR 0 9
9310: PPUSH
9311: CALL_OW 266
9315: PUSH
9316: LD_INT 5
9318: EQUAL
9319: IFFALSE 9389
// begin if UnitsInside ( j ) < 3 then
9321: LD_VAR 0 9
9325: PPUSH
9326: CALL_OW 313
9330: PUSH
9331: LD_INT 3
9333: LESS
9334: IFFALSE 9370
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9336: LD_INT 0
9338: PPUSH
9339: LD_INT 5
9341: PUSH
9342: LD_INT 8
9344: PUSH
9345: LD_INT 9
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: PUSH
9353: LD_VAR 0 17
9357: ARRAY
9358: PPUSH
9359: LD_VAR 0 4
9363: PPUSH
9364: CALL_OW 380
9368: GO 9387
// PrepareHuman ( false , i , skill ) ;
9370: LD_INT 0
9372: PPUSH
9373: LD_VAR 0 8
9377: PPUSH
9378: LD_VAR 0 4
9382: PPUSH
9383: CALL_OW 380
// end else
9387: GO 9406
// PrepareHuman ( false , i , skill ) ;
9389: LD_INT 0
9391: PPUSH
9392: LD_VAR 0 8
9396: PPUSH
9397: LD_VAR 0 4
9401: PPUSH
9402: CALL_OW 380
// un := CreateHuman ;
9406: LD_ADDR_VAR 0 14
9410: PUSH
9411: CALL_OW 44
9415: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9416: LD_ADDR_VAR 0 7
9420: PUSH
9421: LD_VAR 0 7
9425: PPUSH
9426: LD_INT 1
9428: PPUSH
9429: LD_VAR 0 14
9433: PPUSH
9434: CALL_OW 2
9438: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9439: LD_VAR 0 14
9443: PPUSH
9444: LD_VAR 0 9
9448: PPUSH
9449: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9453: LD_VAR 0 9
9457: PPUSH
9458: CALL_OW 313
9462: PUSH
9463: LD_INT 6
9465: EQUAL
9466: PUSH
9467: LD_VAR 0 9
9471: PPUSH
9472: CALL_OW 266
9476: PUSH
9477: LD_INT 32
9479: PUSH
9480: LD_INT 31
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: IN
9487: OR
9488: IFFALSE 9302
9490: GO 9299
9492: POP
9493: POP
// end else
9494: GO 9876
// for j = 1 to x do
9496: LD_ADDR_VAR 0 9
9500: PUSH
9501: DOUBLE
9502: LD_INT 1
9504: DEC
9505: ST_TO_ADDR
9506: LD_VAR 0 13
9510: PUSH
9511: FOR_TO
9512: IFFALSE 9874
// begin InitHc ;
9514: CALL_OW 19
// if not f then
9518: LD_VAR 0 12
9522: NOT
9523: IFFALSE 9612
// begin PrepareHuman ( false , i , skill ) ;
9525: LD_INT 0
9527: PPUSH
9528: LD_VAR 0 8
9532: PPUSH
9533: LD_VAR 0 4
9537: PPUSH
9538: CALL_OW 380
// un := CreateHuman ;
9542: LD_ADDR_VAR 0 14
9546: PUSH
9547: CALL_OW 44
9551: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9552: LD_ADDR_VAR 0 7
9556: PUSH
9557: LD_VAR 0 7
9561: PPUSH
9562: LD_INT 1
9564: PPUSH
9565: LD_VAR 0 14
9569: PPUSH
9570: CALL_OW 2
9574: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9575: LD_VAR 0 14
9579: PPUSH
9580: LD_VAR 0 1
9584: PPUSH
9585: CALL_OW 250
9589: PPUSH
9590: LD_VAR 0 1
9594: PPUSH
9595: CALL_OW 251
9599: PPUSH
9600: LD_INT 10
9602: PPUSH
9603: LD_INT 0
9605: PPUSH
9606: CALL_OW 50
// continue ;
9610: GO 9511
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9612: LD_VAR 0 12
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 313
9625: PUSH
9626: LD_VAR 0 12
9630: PUSH
9631: LD_INT 1
9633: ARRAY
9634: PPUSH
9635: CALL_OW 266
9639: PUSH
9640: LD_INT 32
9642: PUSH
9643: LD_INT 31
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: IN
9650: AND
9651: PUSH
9652: LD_VAR 0 12
9656: PUSH
9657: LD_INT 1
9659: ARRAY
9660: PPUSH
9661: CALL_OW 313
9665: PUSH
9666: LD_INT 6
9668: EQUAL
9669: OR
9670: IFFALSE 9690
// f := Delete ( f , 1 ) ;
9672: LD_ADDR_VAR 0 12
9676: PUSH
9677: LD_VAR 0 12
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: CALL_OW 3
9689: ST_TO_ADDR
// if not f then
9690: LD_VAR 0 12
9694: NOT
9695: IFFALSE 9713
// begin x := x + 2 ;
9697: LD_ADDR_VAR 0 13
9701: PUSH
9702: LD_VAR 0 13
9706: PUSH
9707: LD_INT 2
9709: PLUS
9710: ST_TO_ADDR
// continue ;
9711: GO 9511
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
9713: LD_VAR 0 12
9717: PUSH
9718: LD_INT 1
9720: ARRAY
9721: PPUSH
9722: CALL_OW 266
9726: PUSH
9727: LD_INT 5
9729: EQUAL
9730: IFFALSE 9804
// begin if UnitsInside ( f [ 1 ] ) < 3 then
9732: LD_VAR 0 12
9736: PUSH
9737: LD_INT 1
9739: ARRAY
9740: PPUSH
9741: CALL_OW 313
9745: PUSH
9746: LD_INT 3
9748: LESS
9749: IFFALSE 9785
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9751: LD_INT 0
9753: PPUSH
9754: LD_INT 5
9756: PUSH
9757: LD_INT 8
9759: PUSH
9760: LD_INT 9
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PUSH
9768: LD_VAR 0 17
9772: ARRAY
9773: PPUSH
9774: LD_VAR 0 4
9778: PPUSH
9779: CALL_OW 380
9783: GO 9802
// PrepareHuman ( false , i , skill ) ;
9785: LD_INT 0
9787: PPUSH
9788: LD_VAR 0 8
9792: PPUSH
9793: LD_VAR 0 4
9797: PPUSH
9798: CALL_OW 380
// end else
9802: GO 9821
// PrepareHuman ( false , i , skill ) ;
9804: LD_INT 0
9806: PPUSH
9807: LD_VAR 0 8
9811: PPUSH
9812: LD_VAR 0 4
9816: PPUSH
9817: CALL_OW 380
// un := CreateHuman ;
9821: LD_ADDR_VAR 0 14
9825: PUSH
9826: CALL_OW 44
9830: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9831: LD_ADDR_VAR 0 7
9835: PUSH
9836: LD_VAR 0 7
9840: PPUSH
9841: LD_INT 1
9843: PPUSH
9844: LD_VAR 0 14
9848: PPUSH
9849: CALL_OW 2
9853: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
9854: LD_VAR 0 14
9858: PPUSH
9859: LD_VAR 0 12
9863: PUSH
9864: LD_INT 1
9866: ARRAY
9867: PPUSH
9868: CALL_OW 52
// end ;
9872: GO 9511
9874: POP
9875: POP
// end ;
9876: GO 8813
9878: POP
9879: POP
// result := result ^ buildings ;
9880: LD_ADDR_VAR 0 7
9884: PUSH
9885: LD_VAR 0 7
9889: PUSH
9890: LD_VAR 0 18
9894: ADD
9895: ST_TO_ADDR
// end else
9896: GO 10039
// begin for i = 1 to personel do
9898: LD_ADDR_VAR 0 8
9902: PUSH
9903: DOUBLE
9904: LD_INT 1
9906: DEC
9907: ST_TO_ADDR
9908: LD_VAR 0 6
9912: PUSH
9913: FOR_TO
9914: IFFALSE 10037
// begin if i > 4 then
9916: LD_VAR 0 8
9920: PUSH
9921: LD_INT 4
9923: GREATER
9924: IFFALSE 9928
// break ;
9926: GO 10037
// x := personel [ i ] ;
9928: LD_ADDR_VAR 0 13
9932: PUSH
9933: LD_VAR 0 6
9937: PUSH
9938: LD_VAR 0 8
9942: ARRAY
9943: ST_TO_ADDR
// if x = - 1 then
9944: LD_VAR 0 13
9948: PUSH
9949: LD_INT 1
9951: NEG
9952: EQUAL
9953: IFFALSE 9957
// continue ;
9955: GO 9913
// PrepareHuman ( false , i , skill ) ;
9957: LD_INT 0
9959: PPUSH
9960: LD_VAR 0 8
9964: PPUSH
9965: LD_VAR 0 4
9969: PPUSH
9970: CALL_OW 380
// un := CreateHuman ;
9974: LD_ADDR_VAR 0 14
9978: PUSH
9979: CALL_OW 44
9983: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9984: LD_VAR 0 14
9988: PPUSH
9989: LD_VAR 0 1
9993: PPUSH
9994: CALL_OW 250
9998: PPUSH
9999: LD_VAR 0 1
10003: PPUSH
10004: CALL_OW 251
10008: PPUSH
10009: LD_INT 10
10011: PPUSH
10012: LD_INT 0
10014: PPUSH
10015: CALL_OW 50
// result := result ^ un ;
10019: LD_ADDR_VAR 0 7
10023: PUSH
10024: LD_VAR 0 7
10028: PUSH
10029: LD_VAR 0 14
10033: ADD
10034: ST_TO_ADDR
// end ;
10035: GO 9913
10037: POP
10038: POP
// end ; end ;
10039: LD_VAR 0 7
10043: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10044: LD_INT 0
10046: PPUSH
10047: PPUSH
10048: PPUSH
10049: PPUSH
10050: PPUSH
10051: PPUSH
10052: PPUSH
10053: PPUSH
10054: PPUSH
10055: PPUSH
10056: PPUSH
10057: PPUSH
10058: PPUSH
10059: PPUSH
10060: PPUSH
10061: PPUSH
// result := false ;
10062: LD_ADDR_VAR 0 3
10066: PUSH
10067: LD_INT 0
10069: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10070: LD_VAR 0 1
10074: NOT
10075: PUSH
10076: LD_VAR 0 1
10080: PPUSH
10081: CALL_OW 266
10085: PUSH
10086: LD_INT 32
10088: PUSH
10089: LD_INT 33
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: IN
10096: NOT
10097: OR
10098: IFFALSE 10102
// exit ;
10100: GO 11211
// nat := GetNation ( tower ) ;
10102: LD_ADDR_VAR 0 12
10106: PUSH
10107: LD_VAR 0 1
10111: PPUSH
10112: CALL_OW 248
10116: ST_TO_ADDR
// side := GetSide ( tower ) ;
10117: LD_ADDR_VAR 0 16
10121: PUSH
10122: LD_VAR 0 1
10126: PPUSH
10127: CALL_OW 255
10131: ST_TO_ADDR
// x := GetX ( tower ) ;
10132: LD_ADDR_VAR 0 10
10136: PUSH
10137: LD_VAR 0 1
10141: PPUSH
10142: CALL_OW 250
10146: ST_TO_ADDR
// y := GetY ( tower ) ;
10147: LD_ADDR_VAR 0 11
10151: PUSH
10152: LD_VAR 0 1
10156: PPUSH
10157: CALL_OW 251
10161: ST_TO_ADDR
// if not x or not y then
10162: LD_VAR 0 10
10166: NOT
10167: PUSH
10168: LD_VAR 0 11
10172: NOT
10173: OR
10174: IFFALSE 10178
// exit ;
10176: GO 11211
// weapon := 0 ;
10178: LD_ADDR_VAR 0 18
10182: PUSH
10183: LD_INT 0
10185: ST_TO_ADDR
// fac_list := [ ] ;
10186: LD_ADDR_VAR 0 17
10190: PUSH
10191: EMPTY
10192: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10193: LD_ADDR_VAR 0 6
10197: PUSH
10198: LD_VAR 0 1
10202: PPUSH
10203: CALL_OW 274
10207: PPUSH
10208: LD_VAR 0 2
10212: PPUSH
10213: LD_INT 0
10215: PPUSH
10216: CALL 7782 0 3
10220: PPUSH
10221: LD_INT 30
10223: PUSH
10224: LD_INT 3
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 72
10235: ST_TO_ADDR
// if not factories then
10236: LD_VAR 0 6
10240: NOT
10241: IFFALSE 10245
// exit ;
10243: GO 11211
// for i in factories do
10245: LD_ADDR_VAR 0 8
10249: PUSH
10250: LD_VAR 0 6
10254: PUSH
10255: FOR_IN
10256: IFFALSE 10281
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10258: LD_ADDR_VAR 0 17
10262: PUSH
10263: LD_VAR 0 17
10267: PUSH
10268: LD_VAR 0 8
10272: PPUSH
10273: CALL_OW 478
10277: UNION
10278: ST_TO_ADDR
10279: GO 10255
10281: POP
10282: POP
// if not fac_list then
10283: LD_VAR 0 17
10287: NOT
10288: IFFALSE 10292
// exit ;
10290: GO 11211
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10292: LD_ADDR_VAR 0 5
10296: PUSH
10297: LD_INT 4
10299: PUSH
10300: LD_INT 5
10302: PUSH
10303: LD_INT 9
10305: PUSH
10306: LD_INT 10
10308: PUSH
10309: LD_INT 6
10311: PUSH
10312: LD_INT 7
10314: PUSH
10315: LD_INT 11
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 27
10329: PUSH
10330: LD_INT 28
10332: PUSH
10333: LD_INT 26
10335: PUSH
10336: LD_INT 30
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 43
10347: PUSH
10348: LD_INT 44
10350: PUSH
10351: LD_INT 46
10353: PUSH
10354: LD_INT 45
10356: PUSH
10357: LD_INT 47
10359: PUSH
10360: LD_INT 49
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: LIST
10375: PUSH
10376: LD_VAR 0 12
10380: ARRAY
10381: ST_TO_ADDR
// list := list isect fac_list ;
10382: LD_ADDR_VAR 0 5
10386: PUSH
10387: LD_VAR 0 5
10391: PUSH
10392: LD_VAR 0 17
10396: ISECT
10397: ST_TO_ADDR
// if not list then
10398: LD_VAR 0 5
10402: NOT
10403: IFFALSE 10407
// exit ;
10405: GO 11211
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10407: LD_VAR 0 12
10411: PUSH
10412: LD_INT 3
10414: EQUAL
10415: PUSH
10416: LD_INT 49
10418: PUSH
10419: LD_VAR 0 5
10423: IN
10424: AND
10425: PUSH
10426: LD_INT 31
10428: PPUSH
10429: LD_VAR 0 16
10433: PPUSH
10434: CALL_OW 321
10438: PUSH
10439: LD_INT 2
10441: EQUAL
10442: AND
10443: IFFALSE 10503
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10445: LD_INT 22
10447: PUSH
10448: LD_VAR 0 16
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 35
10459: PUSH
10460: LD_INT 49
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 91
10469: PUSH
10470: LD_VAR 0 1
10474: PUSH
10475: LD_INT 10
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: LIST
10487: PPUSH
10488: CALL_OW 69
10492: NOT
10493: IFFALSE 10503
// weapon := ru_time_lapser ;
10495: LD_ADDR_VAR 0 18
10499: PUSH
10500: LD_INT 49
10502: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10503: LD_VAR 0 12
10507: PUSH
10508: LD_INT 1
10510: PUSH
10511: LD_INT 2
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: IN
10518: PUSH
10519: LD_INT 11
10521: PUSH
10522: LD_VAR 0 5
10526: IN
10527: PUSH
10528: LD_INT 30
10530: PUSH
10531: LD_VAR 0 5
10535: IN
10536: OR
10537: AND
10538: PUSH
10539: LD_INT 6
10541: PPUSH
10542: LD_VAR 0 16
10546: PPUSH
10547: CALL_OW 321
10551: PUSH
10552: LD_INT 2
10554: EQUAL
10555: AND
10556: IFFALSE 10721
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10558: LD_INT 22
10560: PUSH
10561: LD_VAR 0 16
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: LD_INT 35
10575: PUSH
10576: LD_INT 11
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 35
10585: PUSH
10586: LD_INT 30
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 91
10600: PUSH
10601: LD_VAR 0 1
10605: PUSH
10606: LD_INT 18
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: PPUSH
10619: CALL_OW 69
10623: NOT
10624: PUSH
10625: LD_INT 22
10627: PUSH
10628: LD_VAR 0 16
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 2
10639: PUSH
10640: LD_INT 30
10642: PUSH
10643: LD_INT 32
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 30
10652: PUSH
10653: LD_INT 33
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 91
10667: PUSH
10668: LD_VAR 0 1
10672: PUSH
10673: LD_INT 12
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: PPUSH
10689: CALL_OW 69
10693: PUSH
10694: LD_INT 2
10696: GREATER
10697: AND
10698: IFFALSE 10721
// weapon := [ us_radar , ar_radar ] [ nat ] ;
10700: LD_ADDR_VAR 0 18
10704: PUSH
10705: LD_INT 11
10707: PUSH
10708: LD_INT 30
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_VAR 0 12
10719: ARRAY
10720: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
10721: LD_VAR 0 18
10725: NOT
10726: PUSH
10727: LD_INT 40
10729: PPUSH
10730: LD_VAR 0 16
10734: PPUSH
10735: CALL_OW 321
10739: PUSH
10740: LD_INT 2
10742: EQUAL
10743: AND
10744: PUSH
10745: LD_INT 7
10747: PUSH
10748: LD_VAR 0 5
10752: IN
10753: PUSH
10754: LD_INT 28
10756: PUSH
10757: LD_VAR 0 5
10761: IN
10762: OR
10763: PUSH
10764: LD_INT 45
10766: PUSH
10767: LD_VAR 0 5
10771: IN
10772: OR
10773: AND
10774: IFFALSE 11028
// begin hex := GetHexInfo ( x , y ) ;
10776: LD_ADDR_VAR 0 4
10780: PUSH
10781: LD_VAR 0 10
10785: PPUSH
10786: LD_VAR 0 11
10790: PPUSH
10791: CALL_OW 546
10795: ST_TO_ADDR
// if hex [ 1 ] then
10796: LD_VAR 0 4
10800: PUSH
10801: LD_INT 1
10803: ARRAY
10804: IFFALSE 10808
// exit ;
10806: GO 11211
// height := hex [ 2 ] ;
10808: LD_ADDR_VAR 0 15
10812: PUSH
10813: LD_VAR 0 4
10817: PUSH
10818: LD_INT 2
10820: ARRAY
10821: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
10822: LD_ADDR_VAR 0 14
10826: PUSH
10827: LD_INT 0
10829: PUSH
10830: LD_INT 2
10832: PUSH
10833: LD_INT 3
10835: PUSH
10836: LD_INT 5
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: ST_TO_ADDR
// for i in tmp do
10845: LD_ADDR_VAR 0 8
10849: PUSH
10850: LD_VAR 0 14
10854: PUSH
10855: FOR_IN
10856: IFFALSE 11026
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
10858: LD_ADDR_VAR 0 9
10862: PUSH
10863: LD_VAR 0 10
10867: PPUSH
10868: LD_VAR 0 8
10872: PPUSH
10873: LD_INT 5
10875: PPUSH
10876: CALL_OW 272
10880: PUSH
10881: LD_VAR 0 11
10885: PPUSH
10886: LD_VAR 0 8
10890: PPUSH
10891: LD_INT 5
10893: PPUSH
10894: CALL_OW 273
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
10903: LD_VAR 0 9
10907: PUSH
10908: LD_INT 1
10910: ARRAY
10911: PPUSH
10912: LD_VAR 0 9
10916: PUSH
10917: LD_INT 2
10919: ARRAY
10920: PPUSH
10921: CALL_OW 488
10925: IFFALSE 11024
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
10927: LD_ADDR_VAR 0 4
10931: PUSH
10932: LD_VAR 0 9
10936: PUSH
10937: LD_INT 1
10939: ARRAY
10940: PPUSH
10941: LD_VAR 0 9
10945: PUSH
10946: LD_INT 2
10948: ARRAY
10949: PPUSH
10950: CALL_OW 546
10954: ST_TO_ADDR
// if hex [ 1 ] then
10955: LD_VAR 0 4
10959: PUSH
10960: LD_INT 1
10962: ARRAY
10963: IFFALSE 10967
// continue ;
10965: GO 10855
// h := hex [ 2 ] ;
10967: LD_ADDR_VAR 0 13
10971: PUSH
10972: LD_VAR 0 4
10976: PUSH
10977: LD_INT 2
10979: ARRAY
10980: ST_TO_ADDR
// if h + 7 < height then
10981: LD_VAR 0 13
10985: PUSH
10986: LD_INT 7
10988: PLUS
10989: PUSH
10990: LD_VAR 0 15
10994: LESS
10995: IFFALSE 11024
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
10997: LD_ADDR_VAR 0 18
11001: PUSH
11002: LD_INT 7
11004: PUSH
11005: LD_INT 28
11007: PUSH
11008: LD_INT 45
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: PUSH
11016: LD_VAR 0 12
11020: ARRAY
11021: ST_TO_ADDR
// break ;
11022: GO 11026
// end ; end ; end ;
11024: GO 10855
11026: POP
11027: POP
// end ; if not weapon then
11028: LD_VAR 0 18
11032: NOT
11033: IFFALSE 11093
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11035: LD_ADDR_VAR 0 5
11039: PUSH
11040: LD_VAR 0 5
11044: PUSH
11045: LD_INT 11
11047: PUSH
11048: LD_INT 30
11050: PUSH
11051: LD_INT 49
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: DIFF
11059: ST_TO_ADDR
// if not list then
11060: LD_VAR 0 5
11064: NOT
11065: IFFALSE 11069
// exit ;
11067: GO 11211
// weapon := list [ rand ( 1 , list ) ] ;
11069: LD_ADDR_VAR 0 18
11073: PUSH
11074: LD_VAR 0 5
11078: PUSH
11079: LD_INT 1
11081: PPUSH
11082: LD_VAR 0 5
11086: PPUSH
11087: CALL_OW 12
11091: ARRAY
11092: ST_TO_ADDR
// end ; if weapon then
11093: LD_VAR 0 18
11097: IFFALSE 11211
// begin tmp := CostOfWeapon ( weapon ) ;
11099: LD_ADDR_VAR 0 14
11103: PUSH
11104: LD_VAR 0 18
11108: PPUSH
11109: CALL_OW 451
11113: ST_TO_ADDR
// j := GetBase ( tower ) ;
11114: LD_ADDR_VAR 0 9
11118: PUSH
11119: LD_VAR 0 1
11123: PPUSH
11124: CALL_OW 274
11128: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11129: LD_VAR 0 9
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: CALL_OW 275
11141: PUSH
11142: LD_VAR 0 14
11146: PUSH
11147: LD_INT 1
11149: ARRAY
11150: GREATEREQUAL
11151: PUSH
11152: LD_VAR 0 9
11156: PPUSH
11157: LD_INT 2
11159: PPUSH
11160: CALL_OW 275
11164: PUSH
11165: LD_VAR 0 14
11169: PUSH
11170: LD_INT 2
11172: ARRAY
11173: GREATEREQUAL
11174: AND
11175: PUSH
11176: LD_VAR 0 9
11180: PPUSH
11181: LD_INT 3
11183: PPUSH
11184: CALL_OW 275
11188: PUSH
11189: LD_VAR 0 14
11193: PUSH
11194: LD_INT 3
11196: ARRAY
11197: GREATEREQUAL
11198: AND
11199: IFFALSE 11211
// result := weapon ;
11201: LD_ADDR_VAR 0 3
11205: PUSH
11206: LD_VAR 0 18
11210: ST_TO_ADDR
// end ; end ;
11211: LD_VAR 0 3
11215: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11216: LD_INT 0
11218: PPUSH
11219: PPUSH
// result := true ;
11220: LD_ADDR_VAR 0 3
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// if array1 = array2 then
11228: LD_VAR 0 1
11232: PUSH
11233: LD_VAR 0 2
11237: EQUAL
11238: IFFALSE 11298
// begin for i = 1 to array1 do
11240: LD_ADDR_VAR 0 4
11244: PUSH
11245: DOUBLE
11246: LD_INT 1
11248: DEC
11249: ST_TO_ADDR
11250: LD_VAR 0 1
11254: PUSH
11255: FOR_TO
11256: IFFALSE 11294
// if array1 [ i ] <> array2 [ i ] then
11258: LD_VAR 0 1
11262: PUSH
11263: LD_VAR 0 4
11267: ARRAY
11268: PUSH
11269: LD_VAR 0 2
11273: PUSH
11274: LD_VAR 0 4
11278: ARRAY
11279: NONEQUAL
11280: IFFALSE 11292
// begin result := false ;
11282: LD_ADDR_VAR 0 3
11286: PUSH
11287: LD_INT 0
11289: ST_TO_ADDR
// break ;
11290: GO 11294
// end ;
11292: GO 11255
11294: POP
11295: POP
// end else
11296: GO 11306
// result := false ;
11298: LD_ADDR_VAR 0 3
11302: PUSH
11303: LD_INT 0
11305: ST_TO_ADDR
// end ;
11306: LD_VAR 0 3
11310: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11311: LD_INT 0
11313: PPUSH
11314: PPUSH
// if not array1 or not array2 then
11315: LD_VAR 0 1
11319: NOT
11320: PUSH
11321: LD_VAR 0 2
11325: NOT
11326: OR
11327: IFFALSE 11331
// exit ;
11329: GO 11395
// result := true ;
11331: LD_ADDR_VAR 0 3
11335: PUSH
11336: LD_INT 1
11338: ST_TO_ADDR
// for i = 1 to array1 do
11339: LD_ADDR_VAR 0 4
11343: PUSH
11344: DOUBLE
11345: LD_INT 1
11347: DEC
11348: ST_TO_ADDR
11349: LD_VAR 0 1
11353: PUSH
11354: FOR_TO
11355: IFFALSE 11393
// if array1 [ i ] <> array2 [ i ] then
11357: LD_VAR 0 1
11361: PUSH
11362: LD_VAR 0 4
11366: ARRAY
11367: PUSH
11368: LD_VAR 0 2
11372: PUSH
11373: LD_VAR 0 4
11377: ARRAY
11378: NONEQUAL
11379: IFFALSE 11391
// begin result := false ;
11381: LD_ADDR_VAR 0 3
11385: PUSH
11386: LD_INT 0
11388: ST_TO_ADDR
// break ;
11389: GO 11393
// end ;
11391: GO 11354
11393: POP
11394: POP
// end ;
11395: LD_VAR 0 3
11399: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11400: LD_INT 0
11402: PPUSH
11403: PPUSH
11404: PPUSH
// pom := GetBase ( fac ) ;
11405: LD_ADDR_VAR 0 5
11409: PUSH
11410: LD_VAR 0 1
11414: PPUSH
11415: CALL_OW 274
11419: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11420: LD_ADDR_VAR 0 4
11424: PUSH
11425: LD_VAR 0 2
11429: PUSH
11430: LD_INT 1
11432: ARRAY
11433: PPUSH
11434: LD_VAR 0 2
11438: PUSH
11439: LD_INT 2
11441: ARRAY
11442: PPUSH
11443: LD_VAR 0 2
11447: PUSH
11448: LD_INT 3
11450: ARRAY
11451: PPUSH
11452: LD_VAR 0 2
11456: PUSH
11457: LD_INT 4
11459: ARRAY
11460: PPUSH
11461: CALL_OW 449
11465: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11466: LD_ADDR_VAR 0 3
11470: PUSH
11471: LD_VAR 0 5
11475: PPUSH
11476: LD_INT 1
11478: PPUSH
11479: CALL_OW 275
11483: PUSH
11484: LD_VAR 0 4
11488: PUSH
11489: LD_INT 1
11491: ARRAY
11492: GREATEREQUAL
11493: PUSH
11494: LD_VAR 0 5
11498: PPUSH
11499: LD_INT 2
11501: PPUSH
11502: CALL_OW 275
11506: PUSH
11507: LD_VAR 0 4
11511: PUSH
11512: LD_INT 2
11514: ARRAY
11515: GREATEREQUAL
11516: AND
11517: PUSH
11518: LD_VAR 0 5
11522: PPUSH
11523: LD_INT 3
11525: PPUSH
11526: CALL_OW 275
11530: PUSH
11531: LD_VAR 0 4
11535: PUSH
11536: LD_INT 3
11538: ARRAY
11539: GREATEREQUAL
11540: AND
11541: ST_TO_ADDR
// end ;
11542: LD_VAR 0 3
11546: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11547: LD_INT 0
11549: PPUSH
11550: PPUSH
11551: PPUSH
11552: PPUSH
// pom := GetBase ( building ) ;
11553: LD_ADDR_VAR 0 3
11557: PUSH
11558: LD_VAR 0 1
11562: PPUSH
11563: CALL_OW 274
11567: ST_TO_ADDR
// if not pom then
11568: LD_VAR 0 3
11572: NOT
11573: IFFALSE 11577
// exit ;
11575: GO 11747
// btype := GetBType ( building ) ;
11577: LD_ADDR_VAR 0 5
11581: PUSH
11582: LD_VAR 0 1
11586: PPUSH
11587: CALL_OW 266
11591: ST_TO_ADDR
// if btype = b_armoury then
11592: LD_VAR 0 5
11596: PUSH
11597: LD_INT 4
11599: EQUAL
11600: IFFALSE 11610
// btype := b_barracks ;
11602: LD_ADDR_VAR 0 5
11606: PUSH
11607: LD_INT 5
11609: ST_TO_ADDR
// if btype = b_depot then
11610: LD_VAR 0 5
11614: PUSH
11615: LD_INT 0
11617: EQUAL
11618: IFFALSE 11628
// btype := b_warehouse ;
11620: LD_ADDR_VAR 0 5
11624: PUSH
11625: LD_INT 1
11627: ST_TO_ADDR
// if btype = b_workshop then
11628: LD_VAR 0 5
11632: PUSH
11633: LD_INT 2
11635: EQUAL
11636: IFFALSE 11646
// btype := b_factory ;
11638: LD_ADDR_VAR 0 5
11642: PUSH
11643: LD_INT 3
11645: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11646: LD_ADDR_VAR 0 4
11650: PUSH
11651: LD_VAR 0 5
11655: PPUSH
11656: LD_VAR 0 1
11660: PPUSH
11661: CALL_OW 248
11665: PPUSH
11666: CALL_OW 450
11670: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11671: LD_ADDR_VAR 0 2
11675: PUSH
11676: LD_VAR 0 3
11680: PPUSH
11681: LD_INT 1
11683: PPUSH
11684: CALL_OW 275
11688: PUSH
11689: LD_VAR 0 4
11693: PUSH
11694: LD_INT 1
11696: ARRAY
11697: GREATEREQUAL
11698: PUSH
11699: LD_VAR 0 3
11703: PPUSH
11704: LD_INT 2
11706: PPUSH
11707: CALL_OW 275
11711: PUSH
11712: LD_VAR 0 4
11716: PUSH
11717: LD_INT 2
11719: ARRAY
11720: GREATEREQUAL
11721: AND
11722: PUSH
11723: LD_VAR 0 3
11727: PPUSH
11728: LD_INT 3
11730: PPUSH
11731: CALL_OW 275
11735: PUSH
11736: LD_VAR 0 4
11740: PUSH
11741: LD_INT 3
11743: ARRAY
11744: GREATEREQUAL
11745: AND
11746: ST_TO_ADDR
// end ;
11747: LD_VAR 0 2
11751: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
11752: LD_INT 0
11754: PPUSH
11755: PPUSH
11756: PPUSH
// pom := GetBase ( building ) ;
11757: LD_ADDR_VAR 0 4
11761: PUSH
11762: LD_VAR 0 1
11766: PPUSH
11767: CALL_OW 274
11771: ST_TO_ADDR
// if not pom then
11772: LD_VAR 0 4
11776: NOT
11777: IFFALSE 11781
// exit ;
11779: GO 11882
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11781: LD_ADDR_VAR 0 5
11785: PUSH
11786: LD_VAR 0 2
11790: PPUSH
11791: LD_VAR 0 1
11795: PPUSH
11796: CALL_OW 248
11800: PPUSH
11801: CALL_OW 450
11805: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11806: LD_ADDR_VAR 0 3
11810: PUSH
11811: LD_VAR 0 4
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: CALL_OW 275
11823: PUSH
11824: LD_VAR 0 5
11828: PUSH
11829: LD_INT 1
11831: ARRAY
11832: GREATEREQUAL
11833: PUSH
11834: LD_VAR 0 4
11838: PPUSH
11839: LD_INT 2
11841: PPUSH
11842: CALL_OW 275
11846: PUSH
11847: LD_VAR 0 5
11851: PUSH
11852: LD_INT 2
11854: ARRAY
11855: GREATEREQUAL
11856: AND
11857: PUSH
11858: LD_VAR 0 4
11862: PPUSH
11863: LD_INT 3
11865: PPUSH
11866: CALL_OW 275
11870: PUSH
11871: LD_VAR 0 5
11875: PUSH
11876: LD_INT 3
11878: ARRAY
11879: GREATEREQUAL
11880: AND
11881: ST_TO_ADDR
// end ;
11882: LD_VAR 0 3
11886: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
11887: LD_INT 0
11889: PPUSH
11890: PPUSH
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
11895: PPUSH
11896: PPUSH
11897: PPUSH
11898: PPUSH
11899: PPUSH
// result := false ;
11900: LD_ADDR_VAR 0 8
11904: PUSH
11905: LD_INT 0
11907: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
11908: LD_VAR 0 5
11912: NOT
11913: PUSH
11914: LD_VAR 0 1
11918: NOT
11919: OR
11920: PUSH
11921: LD_VAR 0 2
11925: NOT
11926: OR
11927: PUSH
11928: LD_VAR 0 3
11932: NOT
11933: OR
11934: IFFALSE 11938
// exit ;
11936: GO 12752
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
11938: LD_ADDR_VAR 0 14
11942: PUSH
11943: LD_VAR 0 1
11947: PPUSH
11948: LD_VAR 0 2
11952: PPUSH
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_VAR 0 4
11962: PPUSH
11963: LD_VAR 0 5
11967: PUSH
11968: LD_INT 1
11970: ARRAY
11971: PPUSH
11972: CALL_OW 248
11976: PPUSH
11977: LD_INT 0
11979: PPUSH
11980: CALL 13985 0 6
11984: ST_TO_ADDR
// if not hexes then
11985: LD_VAR 0 14
11989: NOT
11990: IFFALSE 11994
// exit ;
11992: GO 12752
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11994: LD_ADDR_VAR 0 17
11998: PUSH
11999: LD_VAR 0 5
12003: PPUSH
12004: LD_INT 22
12006: PUSH
12007: LD_VAR 0 13
12011: PPUSH
12012: CALL_OW 255
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 2
12023: PUSH
12024: LD_INT 30
12026: PUSH
12027: LD_INT 0
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 30
12036: PUSH
12037: LD_INT 1
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 72
12057: ST_TO_ADDR
// for i = 1 to hexes do
12058: LD_ADDR_VAR 0 9
12062: PUSH
12063: DOUBLE
12064: LD_INT 1
12066: DEC
12067: ST_TO_ADDR
12068: LD_VAR 0 14
12072: PUSH
12073: FOR_TO
12074: IFFALSE 12750
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12076: LD_ADDR_VAR 0 13
12080: PUSH
12081: LD_VAR 0 14
12085: PUSH
12086: LD_VAR 0 9
12090: ARRAY
12091: PUSH
12092: LD_INT 1
12094: ARRAY
12095: PPUSH
12096: LD_VAR 0 14
12100: PUSH
12101: LD_VAR 0 9
12105: ARRAY
12106: PUSH
12107: LD_INT 2
12109: ARRAY
12110: PPUSH
12111: CALL_OW 428
12115: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12116: LD_VAR 0 14
12120: PUSH
12121: LD_VAR 0 9
12125: ARRAY
12126: PUSH
12127: LD_INT 1
12129: ARRAY
12130: PPUSH
12131: LD_VAR 0 14
12135: PUSH
12136: LD_VAR 0 9
12140: ARRAY
12141: PUSH
12142: LD_INT 2
12144: ARRAY
12145: PPUSH
12146: CALL_OW 351
12150: PUSH
12151: LD_VAR 0 14
12155: PUSH
12156: LD_VAR 0 9
12160: ARRAY
12161: PUSH
12162: LD_INT 1
12164: ARRAY
12165: PPUSH
12166: LD_VAR 0 14
12170: PUSH
12171: LD_VAR 0 9
12175: ARRAY
12176: PUSH
12177: LD_INT 2
12179: ARRAY
12180: PPUSH
12181: CALL_OW 488
12185: NOT
12186: OR
12187: PUSH
12188: LD_VAR 0 13
12192: PPUSH
12193: CALL_OW 247
12197: PUSH
12198: LD_INT 3
12200: EQUAL
12201: OR
12202: IFFALSE 12208
// exit ;
12204: POP
12205: POP
12206: GO 12752
// if not tmp then
12208: LD_VAR 0 13
12212: NOT
12213: IFFALSE 12217
// continue ;
12215: GO 12073
// result := true ;
12217: LD_ADDR_VAR 0 8
12221: PUSH
12222: LD_INT 1
12224: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12225: LD_VAR 0 6
12229: PUSH
12230: LD_VAR 0 13
12234: PPUSH
12235: CALL_OW 247
12239: PUSH
12240: LD_INT 2
12242: EQUAL
12243: AND
12244: PUSH
12245: LD_VAR 0 13
12249: PPUSH
12250: CALL_OW 263
12254: PUSH
12255: LD_INT 1
12257: EQUAL
12258: AND
12259: IFFALSE 12423
// begin if IsDrivenBy ( tmp ) then
12261: LD_VAR 0 13
12265: PPUSH
12266: CALL_OW 311
12270: IFFALSE 12274
// continue ;
12272: GO 12073
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12274: LD_VAR 0 6
12278: PPUSH
12279: LD_INT 3
12281: PUSH
12282: LD_INT 60
12284: PUSH
12285: EMPTY
12286: LIST
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 3
12294: PUSH
12295: LD_INT 55
12297: PUSH
12298: EMPTY
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PPUSH
12309: CALL_OW 72
12313: IFFALSE 12421
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12315: LD_ADDR_VAR 0 18
12319: PUSH
12320: LD_VAR 0 6
12324: PPUSH
12325: LD_INT 3
12327: PUSH
12328: LD_INT 60
12330: PUSH
12331: EMPTY
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 3
12340: PUSH
12341: LD_INT 55
12343: PUSH
12344: EMPTY
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PPUSH
12355: CALL_OW 72
12359: PUSH
12360: LD_INT 1
12362: ARRAY
12363: ST_TO_ADDR
// if IsInUnit ( driver ) then
12364: LD_VAR 0 18
12368: PPUSH
12369: CALL_OW 310
12373: IFFALSE 12384
// ComExit ( driver ) ;
12375: LD_VAR 0 18
12379: PPUSH
12380: CALL 37764 0 1
// AddComEnterUnit ( driver , tmp ) ;
12384: LD_VAR 0 18
12388: PPUSH
12389: LD_VAR 0 13
12393: PPUSH
12394: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12398: LD_VAR 0 18
12402: PPUSH
12403: LD_VAR 0 7
12407: PPUSH
12408: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12412: LD_VAR 0 18
12416: PPUSH
12417: CALL_OW 181
// end ; continue ;
12421: GO 12073
// end ; if not cleaners or not tmp in cleaners then
12423: LD_VAR 0 6
12427: NOT
12428: PUSH
12429: LD_VAR 0 13
12433: PUSH
12434: LD_VAR 0 6
12438: IN
12439: NOT
12440: OR
12441: IFFALSE 12748
// begin if dep then
12443: LD_VAR 0 17
12447: IFFALSE 12583
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12449: LD_ADDR_VAR 0 16
12453: PUSH
12454: LD_VAR 0 17
12458: PUSH
12459: LD_INT 1
12461: ARRAY
12462: PPUSH
12463: CALL_OW 250
12467: PPUSH
12468: LD_VAR 0 17
12472: PUSH
12473: LD_INT 1
12475: ARRAY
12476: PPUSH
12477: CALL_OW 254
12481: PPUSH
12482: LD_INT 5
12484: PPUSH
12485: CALL_OW 272
12489: PUSH
12490: LD_VAR 0 17
12494: PUSH
12495: LD_INT 1
12497: ARRAY
12498: PPUSH
12499: CALL_OW 251
12503: PPUSH
12504: LD_VAR 0 17
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: PPUSH
12513: CALL_OW 254
12517: PPUSH
12518: LD_INT 5
12520: PPUSH
12521: CALL_OW 273
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12530: LD_VAR 0 16
12534: PUSH
12535: LD_INT 1
12537: ARRAY
12538: PPUSH
12539: LD_VAR 0 16
12543: PUSH
12544: LD_INT 2
12546: ARRAY
12547: PPUSH
12548: CALL_OW 488
12552: IFFALSE 12583
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12554: LD_VAR 0 13
12558: PPUSH
12559: LD_VAR 0 16
12563: PUSH
12564: LD_INT 1
12566: ARRAY
12567: PPUSH
12568: LD_VAR 0 16
12572: PUSH
12573: LD_INT 2
12575: ARRAY
12576: PPUSH
12577: CALL_OW 111
// continue ;
12581: GO 12073
// end ; end ; r := GetDir ( tmp ) ;
12583: LD_ADDR_VAR 0 15
12587: PUSH
12588: LD_VAR 0 13
12592: PPUSH
12593: CALL_OW 254
12597: ST_TO_ADDR
// if r = 5 then
12598: LD_VAR 0 15
12602: PUSH
12603: LD_INT 5
12605: EQUAL
12606: IFFALSE 12616
// r := 0 ;
12608: LD_ADDR_VAR 0 15
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// for j = r to 5 do
12616: LD_ADDR_VAR 0 10
12620: PUSH
12621: DOUBLE
12622: LD_VAR 0 15
12626: DEC
12627: ST_TO_ADDR
12628: LD_INT 5
12630: PUSH
12631: FOR_TO
12632: IFFALSE 12746
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12634: LD_ADDR_VAR 0 11
12638: PUSH
12639: LD_VAR 0 13
12643: PPUSH
12644: CALL_OW 250
12648: PPUSH
12649: LD_VAR 0 10
12653: PPUSH
12654: LD_INT 2
12656: PPUSH
12657: CALL_OW 272
12661: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12662: LD_ADDR_VAR 0 12
12666: PUSH
12667: LD_VAR 0 13
12671: PPUSH
12672: CALL_OW 251
12676: PPUSH
12677: LD_VAR 0 10
12681: PPUSH
12682: LD_INT 2
12684: PPUSH
12685: CALL_OW 273
12689: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
12690: LD_VAR 0 11
12694: PPUSH
12695: LD_VAR 0 12
12699: PPUSH
12700: CALL_OW 488
12704: PUSH
12705: LD_VAR 0 11
12709: PPUSH
12710: LD_VAR 0 12
12714: PPUSH
12715: CALL_OW 428
12719: NOT
12720: AND
12721: IFFALSE 12744
// begin ComMoveXY ( tmp , _x , _y ) ;
12723: LD_VAR 0 13
12727: PPUSH
12728: LD_VAR 0 11
12732: PPUSH
12733: LD_VAR 0 12
12737: PPUSH
12738: CALL_OW 111
// break ;
12742: GO 12746
// end ; end ;
12744: GO 12631
12746: POP
12747: POP
// end ; end ;
12748: GO 12073
12750: POP
12751: POP
// end ;
12752: LD_VAR 0 8
12756: RET
// export function BuildingTechInvented ( side , btype ) ; begin
12757: LD_INT 0
12759: PPUSH
// result := true ;
12760: LD_ADDR_VAR 0 3
12764: PUSH
12765: LD_INT 1
12767: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
12768: LD_VAR 0 2
12772: PUSH
12773: LD_INT 24
12775: DOUBLE
12776: EQUAL
12777: IFTRUE 12787
12779: LD_INT 33
12781: DOUBLE
12782: EQUAL
12783: IFTRUE 12787
12785: GO 12812
12787: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
12788: LD_ADDR_VAR 0 3
12792: PUSH
12793: LD_INT 32
12795: PPUSH
12796: LD_VAR 0 1
12800: PPUSH
12801: CALL_OW 321
12805: PUSH
12806: LD_INT 2
12808: EQUAL
12809: ST_TO_ADDR
12810: GO 13128
12812: LD_INT 20
12814: DOUBLE
12815: EQUAL
12816: IFTRUE 12820
12818: GO 12845
12820: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
12821: LD_ADDR_VAR 0 3
12825: PUSH
12826: LD_INT 6
12828: PPUSH
12829: LD_VAR 0 1
12833: PPUSH
12834: CALL_OW 321
12838: PUSH
12839: LD_INT 2
12841: EQUAL
12842: ST_TO_ADDR
12843: GO 13128
12845: LD_INT 22
12847: DOUBLE
12848: EQUAL
12849: IFTRUE 12859
12851: LD_INT 36
12853: DOUBLE
12854: EQUAL
12855: IFTRUE 12859
12857: GO 12884
12859: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
12860: LD_ADDR_VAR 0 3
12864: PUSH
12865: LD_INT 15
12867: PPUSH
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 321
12877: PUSH
12878: LD_INT 2
12880: EQUAL
12881: ST_TO_ADDR
12882: GO 13128
12884: LD_INT 30
12886: DOUBLE
12887: EQUAL
12888: IFTRUE 12892
12890: GO 12917
12892: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
12893: LD_ADDR_VAR 0 3
12897: PUSH
12898: LD_INT 20
12900: PPUSH
12901: LD_VAR 0 1
12905: PPUSH
12906: CALL_OW 321
12910: PUSH
12911: LD_INT 2
12913: EQUAL
12914: ST_TO_ADDR
12915: GO 13128
12917: LD_INT 28
12919: DOUBLE
12920: EQUAL
12921: IFTRUE 12931
12923: LD_INT 21
12925: DOUBLE
12926: EQUAL
12927: IFTRUE 12931
12929: GO 12956
12931: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
12932: LD_ADDR_VAR 0 3
12936: PUSH
12937: LD_INT 21
12939: PPUSH
12940: LD_VAR 0 1
12944: PPUSH
12945: CALL_OW 321
12949: PUSH
12950: LD_INT 2
12952: EQUAL
12953: ST_TO_ADDR
12954: GO 13128
12956: LD_INT 16
12958: DOUBLE
12959: EQUAL
12960: IFTRUE 12964
12962: GO 12989
12964: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
12965: LD_ADDR_VAR 0 3
12969: PUSH
12970: LD_INT 84
12972: PPUSH
12973: LD_VAR 0 1
12977: PPUSH
12978: CALL_OW 321
12982: PUSH
12983: LD_INT 2
12985: EQUAL
12986: ST_TO_ADDR
12987: GO 13128
12989: LD_INT 19
12991: DOUBLE
12992: EQUAL
12993: IFTRUE 13003
12995: LD_INT 23
12997: DOUBLE
12998: EQUAL
12999: IFTRUE 13003
13001: GO 13028
13003: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13004: LD_ADDR_VAR 0 3
13008: PUSH
13009: LD_INT 83
13011: PPUSH
13012: LD_VAR 0 1
13016: PPUSH
13017: CALL_OW 321
13021: PUSH
13022: LD_INT 2
13024: EQUAL
13025: ST_TO_ADDR
13026: GO 13128
13028: LD_INT 17
13030: DOUBLE
13031: EQUAL
13032: IFTRUE 13036
13034: GO 13061
13036: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13037: LD_ADDR_VAR 0 3
13041: PUSH
13042: LD_INT 39
13044: PPUSH
13045: LD_VAR 0 1
13049: PPUSH
13050: CALL_OW 321
13054: PUSH
13055: LD_INT 2
13057: EQUAL
13058: ST_TO_ADDR
13059: GO 13128
13061: LD_INT 18
13063: DOUBLE
13064: EQUAL
13065: IFTRUE 13069
13067: GO 13094
13069: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13070: LD_ADDR_VAR 0 3
13074: PUSH
13075: LD_INT 40
13077: PPUSH
13078: LD_VAR 0 1
13082: PPUSH
13083: CALL_OW 321
13087: PUSH
13088: LD_INT 2
13090: EQUAL
13091: ST_TO_ADDR
13092: GO 13128
13094: LD_INT 27
13096: DOUBLE
13097: EQUAL
13098: IFTRUE 13102
13100: GO 13127
13102: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13103: LD_ADDR_VAR 0 3
13107: PUSH
13108: LD_INT 35
13110: PPUSH
13111: LD_VAR 0 1
13115: PPUSH
13116: CALL_OW 321
13120: PUSH
13121: LD_INT 2
13123: EQUAL
13124: ST_TO_ADDR
13125: GO 13128
13127: POP
// end ;
13128: LD_VAR 0 3
13132: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13133: LD_INT 0
13135: PPUSH
13136: PPUSH
13137: PPUSH
13138: PPUSH
13139: PPUSH
13140: PPUSH
13141: PPUSH
13142: PPUSH
13143: PPUSH
13144: PPUSH
13145: PPUSH
// result := false ;
13146: LD_ADDR_VAR 0 6
13150: PUSH
13151: LD_INT 0
13153: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13154: LD_VAR 0 1
13158: NOT
13159: PUSH
13160: LD_VAR 0 1
13164: PPUSH
13165: CALL_OW 266
13169: PUSH
13170: LD_INT 0
13172: PUSH
13173: LD_INT 1
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: IN
13180: NOT
13181: OR
13182: PUSH
13183: LD_VAR 0 2
13187: NOT
13188: OR
13189: PUSH
13190: LD_VAR 0 5
13194: PUSH
13195: LD_INT 0
13197: PUSH
13198: LD_INT 1
13200: PUSH
13201: LD_INT 2
13203: PUSH
13204: LD_INT 3
13206: PUSH
13207: LD_INT 4
13209: PUSH
13210: LD_INT 5
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: IN
13221: NOT
13222: OR
13223: PUSH
13224: LD_VAR 0 3
13228: PPUSH
13229: LD_VAR 0 4
13233: PPUSH
13234: CALL_OW 488
13238: NOT
13239: OR
13240: IFFALSE 13244
// exit ;
13242: GO 13980
// side := GetSide ( depot ) ;
13244: LD_ADDR_VAR 0 9
13248: PUSH
13249: LD_VAR 0 1
13253: PPUSH
13254: CALL_OW 255
13258: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13259: LD_VAR 0 9
13263: PPUSH
13264: LD_VAR 0 2
13268: PPUSH
13269: CALL 12757 0 2
13273: NOT
13274: IFFALSE 13278
// exit ;
13276: GO 13980
// pom := GetBase ( depot ) ;
13278: LD_ADDR_VAR 0 10
13282: PUSH
13283: LD_VAR 0 1
13287: PPUSH
13288: CALL_OW 274
13292: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13293: LD_ADDR_VAR 0 11
13297: PUSH
13298: LD_VAR 0 2
13302: PPUSH
13303: LD_VAR 0 1
13307: PPUSH
13308: CALL_OW 248
13312: PPUSH
13313: CALL_OW 450
13317: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13318: LD_VAR 0 10
13322: PPUSH
13323: LD_INT 1
13325: PPUSH
13326: CALL_OW 275
13330: PUSH
13331: LD_VAR 0 11
13335: PUSH
13336: LD_INT 1
13338: ARRAY
13339: GREATEREQUAL
13340: PUSH
13341: LD_VAR 0 10
13345: PPUSH
13346: LD_INT 2
13348: PPUSH
13349: CALL_OW 275
13353: PUSH
13354: LD_VAR 0 11
13358: PUSH
13359: LD_INT 2
13361: ARRAY
13362: GREATEREQUAL
13363: AND
13364: PUSH
13365: LD_VAR 0 10
13369: PPUSH
13370: LD_INT 3
13372: PPUSH
13373: CALL_OW 275
13377: PUSH
13378: LD_VAR 0 11
13382: PUSH
13383: LD_INT 3
13385: ARRAY
13386: GREATEREQUAL
13387: AND
13388: NOT
13389: IFFALSE 13393
// exit ;
13391: GO 13980
// if GetBType ( depot ) = b_depot then
13393: LD_VAR 0 1
13397: PPUSH
13398: CALL_OW 266
13402: PUSH
13403: LD_INT 0
13405: EQUAL
13406: IFFALSE 13418
// dist := 28 else
13408: LD_ADDR_VAR 0 14
13412: PUSH
13413: LD_INT 28
13415: ST_TO_ADDR
13416: GO 13426
// dist := 36 ;
13418: LD_ADDR_VAR 0 14
13422: PUSH
13423: LD_INT 36
13425: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13426: LD_VAR 0 1
13430: PPUSH
13431: LD_VAR 0 3
13435: PPUSH
13436: LD_VAR 0 4
13440: PPUSH
13441: CALL_OW 297
13445: PUSH
13446: LD_VAR 0 14
13450: GREATER
13451: IFFALSE 13455
// exit ;
13453: GO 13980
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13455: LD_ADDR_VAR 0 12
13459: PUSH
13460: LD_VAR 0 2
13464: PPUSH
13465: LD_VAR 0 3
13469: PPUSH
13470: LD_VAR 0 4
13474: PPUSH
13475: LD_VAR 0 5
13479: PPUSH
13480: LD_VAR 0 1
13484: PPUSH
13485: CALL_OW 248
13489: PPUSH
13490: LD_INT 0
13492: PPUSH
13493: CALL 13985 0 6
13497: ST_TO_ADDR
// if not hexes then
13498: LD_VAR 0 12
13502: NOT
13503: IFFALSE 13507
// exit ;
13505: GO 13980
// hex := GetHexInfo ( x , y ) ;
13507: LD_ADDR_VAR 0 15
13511: PUSH
13512: LD_VAR 0 3
13516: PPUSH
13517: LD_VAR 0 4
13521: PPUSH
13522: CALL_OW 546
13526: ST_TO_ADDR
// if hex [ 1 ] then
13527: LD_VAR 0 15
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: IFFALSE 13539
// exit ;
13537: GO 13980
// height := hex [ 2 ] ;
13539: LD_ADDR_VAR 0 13
13543: PUSH
13544: LD_VAR 0 15
13548: PUSH
13549: LD_INT 2
13551: ARRAY
13552: ST_TO_ADDR
// for i = 1 to hexes do
13553: LD_ADDR_VAR 0 7
13557: PUSH
13558: DOUBLE
13559: LD_INT 1
13561: DEC
13562: ST_TO_ADDR
13563: LD_VAR 0 12
13567: PUSH
13568: FOR_TO
13569: IFFALSE 13899
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13571: LD_VAR 0 12
13575: PUSH
13576: LD_VAR 0 7
13580: ARRAY
13581: PUSH
13582: LD_INT 1
13584: ARRAY
13585: PPUSH
13586: LD_VAR 0 12
13590: PUSH
13591: LD_VAR 0 7
13595: ARRAY
13596: PUSH
13597: LD_INT 2
13599: ARRAY
13600: PPUSH
13601: CALL_OW 488
13605: NOT
13606: PUSH
13607: LD_VAR 0 12
13611: PUSH
13612: LD_VAR 0 7
13616: ARRAY
13617: PUSH
13618: LD_INT 1
13620: ARRAY
13621: PPUSH
13622: LD_VAR 0 12
13626: PUSH
13627: LD_VAR 0 7
13631: ARRAY
13632: PUSH
13633: LD_INT 2
13635: ARRAY
13636: PPUSH
13637: CALL_OW 428
13641: PUSH
13642: LD_INT 0
13644: GREATER
13645: OR
13646: PUSH
13647: LD_VAR 0 12
13651: PUSH
13652: LD_VAR 0 7
13656: ARRAY
13657: PUSH
13658: LD_INT 1
13660: ARRAY
13661: PPUSH
13662: LD_VAR 0 12
13666: PUSH
13667: LD_VAR 0 7
13671: ARRAY
13672: PUSH
13673: LD_INT 2
13675: ARRAY
13676: PPUSH
13677: CALL_OW 351
13681: OR
13682: IFFALSE 13688
// exit ;
13684: POP
13685: POP
13686: GO 13980
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13688: LD_ADDR_VAR 0 8
13692: PUSH
13693: LD_VAR 0 12
13697: PUSH
13698: LD_VAR 0 7
13702: ARRAY
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: LD_VAR 0 12
13712: PUSH
13713: LD_VAR 0 7
13717: ARRAY
13718: PUSH
13719: LD_INT 2
13721: ARRAY
13722: PPUSH
13723: CALL_OW 546
13727: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
13728: LD_VAR 0 8
13732: PUSH
13733: LD_INT 1
13735: ARRAY
13736: PUSH
13737: LD_VAR 0 8
13741: PUSH
13742: LD_INT 2
13744: ARRAY
13745: PUSH
13746: LD_VAR 0 13
13750: PUSH
13751: LD_INT 2
13753: PLUS
13754: GREATER
13755: OR
13756: PUSH
13757: LD_VAR 0 8
13761: PUSH
13762: LD_INT 2
13764: ARRAY
13765: PUSH
13766: LD_VAR 0 13
13770: PUSH
13771: LD_INT 2
13773: MINUS
13774: LESS
13775: OR
13776: PUSH
13777: LD_VAR 0 8
13781: PUSH
13782: LD_INT 3
13784: ARRAY
13785: PUSH
13786: LD_INT 0
13788: PUSH
13789: LD_INT 8
13791: PUSH
13792: LD_INT 9
13794: PUSH
13795: LD_INT 10
13797: PUSH
13798: LD_INT 11
13800: PUSH
13801: LD_INT 12
13803: PUSH
13804: LD_INT 13
13806: PUSH
13807: LD_INT 16
13809: PUSH
13810: LD_INT 17
13812: PUSH
13813: LD_INT 18
13815: PUSH
13816: LD_INT 19
13818: PUSH
13819: LD_INT 20
13821: PUSH
13822: LD_INT 21
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: IN
13840: NOT
13841: OR
13842: PUSH
13843: LD_VAR 0 8
13847: PUSH
13848: LD_INT 5
13850: ARRAY
13851: NOT
13852: OR
13853: PUSH
13854: LD_VAR 0 8
13858: PUSH
13859: LD_INT 6
13861: ARRAY
13862: PUSH
13863: LD_INT 1
13865: PUSH
13866: LD_INT 2
13868: PUSH
13869: LD_INT 7
13871: PUSH
13872: LD_INT 9
13874: PUSH
13875: LD_INT 10
13877: PUSH
13878: LD_INT 11
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: IN
13889: NOT
13890: OR
13891: IFFALSE 13897
// exit ;
13893: POP
13894: POP
13895: GO 13980
// end ;
13897: GO 13568
13899: POP
13900: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
13901: LD_VAR 0 9
13905: PPUSH
13906: LD_VAR 0 3
13910: PPUSH
13911: LD_VAR 0 4
13915: PPUSH
13916: LD_INT 20
13918: PPUSH
13919: CALL 5932 0 4
13923: PUSH
13924: LD_INT 4
13926: ARRAY
13927: IFFALSE 13931
// exit ;
13929: GO 13980
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
13931: LD_VAR 0 2
13935: PUSH
13936: LD_INT 29
13938: PUSH
13939: LD_INT 30
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: IN
13946: PUSH
13947: LD_VAR 0 3
13951: PPUSH
13952: LD_VAR 0 4
13956: PPUSH
13957: LD_VAR 0 9
13961: PPUSH
13962: CALL_OW 440
13966: NOT
13967: AND
13968: IFFALSE 13972
// exit ;
13970: GO 13980
// result := true ;
13972: LD_ADDR_VAR 0 6
13976: PUSH
13977: LD_INT 1
13979: ST_TO_ADDR
// end ;
13980: LD_VAR 0 6
13984: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
13985: LD_INT 0
13987: PPUSH
13988: PPUSH
13989: PPUSH
13990: PPUSH
13991: PPUSH
13992: PPUSH
13993: PPUSH
13994: PPUSH
13995: PPUSH
13996: PPUSH
13997: PPUSH
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
14002: PPUSH
14003: PPUSH
14004: PPUSH
14005: PPUSH
14006: PPUSH
14007: PPUSH
14008: PPUSH
14009: PPUSH
14010: PPUSH
14011: PPUSH
14012: PPUSH
14013: PPUSH
14014: PPUSH
14015: PPUSH
14016: PPUSH
14017: PPUSH
14018: PPUSH
14019: PPUSH
14020: PPUSH
14021: PPUSH
14022: PPUSH
14023: PPUSH
14024: PPUSH
14025: PPUSH
14026: PPUSH
14027: PPUSH
14028: PPUSH
14029: PPUSH
14030: PPUSH
14031: PPUSH
14032: PPUSH
14033: PPUSH
14034: PPUSH
14035: PPUSH
14036: PPUSH
14037: PPUSH
14038: PPUSH
14039: PPUSH
14040: PPUSH
14041: PPUSH
14042: PPUSH
14043: PPUSH
14044: PPUSH
// result = [ ] ;
14045: LD_ADDR_VAR 0 7
14049: PUSH
14050: EMPTY
14051: ST_TO_ADDR
// temp_list = [ ] ;
14052: LD_ADDR_VAR 0 9
14056: PUSH
14057: EMPTY
14058: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14059: LD_VAR 0 4
14063: PUSH
14064: LD_INT 0
14066: PUSH
14067: LD_INT 1
14069: PUSH
14070: LD_INT 2
14072: PUSH
14073: LD_INT 3
14075: PUSH
14076: LD_INT 4
14078: PUSH
14079: LD_INT 5
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: IN
14090: NOT
14091: PUSH
14092: LD_VAR 0 1
14096: PUSH
14097: LD_INT 0
14099: PUSH
14100: LD_INT 1
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: IN
14107: PUSH
14108: LD_VAR 0 5
14112: PUSH
14113: LD_INT 1
14115: PUSH
14116: LD_INT 2
14118: PUSH
14119: LD_INT 3
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: IN
14127: NOT
14128: AND
14129: OR
14130: IFFALSE 14134
// exit ;
14132: GO 32525
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14134: LD_VAR 0 1
14138: PUSH
14139: LD_INT 6
14141: PUSH
14142: LD_INT 7
14144: PUSH
14145: LD_INT 8
14147: PUSH
14148: LD_INT 13
14150: PUSH
14151: LD_INT 12
14153: PUSH
14154: LD_INT 15
14156: PUSH
14157: LD_INT 11
14159: PUSH
14160: LD_INT 14
14162: PUSH
14163: LD_INT 10
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: IN
14177: IFFALSE 14187
// btype = b_lab ;
14179: LD_ADDR_VAR 0 1
14183: PUSH
14184: LD_INT 6
14186: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14187: LD_VAR 0 6
14191: PUSH
14192: LD_INT 0
14194: PUSH
14195: LD_INT 1
14197: PUSH
14198: LD_INT 2
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: LIST
14205: IN
14206: NOT
14207: PUSH
14208: LD_VAR 0 1
14212: PUSH
14213: LD_INT 0
14215: PUSH
14216: LD_INT 1
14218: PUSH
14219: LD_INT 2
14221: PUSH
14222: LD_INT 3
14224: PUSH
14225: LD_INT 6
14227: PUSH
14228: LD_INT 36
14230: PUSH
14231: LD_INT 4
14233: PUSH
14234: LD_INT 5
14236: PUSH
14237: LD_INT 31
14239: PUSH
14240: LD_INT 32
14242: PUSH
14243: LD_INT 33
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: IN
14259: NOT
14260: PUSH
14261: LD_VAR 0 6
14265: PUSH
14266: LD_INT 1
14268: EQUAL
14269: AND
14270: OR
14271: PUSH
14272: LD_VAR 0 1
14276: PUSH
14277: LD_INT 2
14279: PUSH
14280: LD_INT 3
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: IN
14287: NOT
14288: PUSH
14289: LD_VAR 0 6
14293: PUSH
14294: LD_INT 2
14296: EQUAL
14297: AND
14298: OR
14299: IFFALSE 14309
// mode = 0 ;
14301: LD_ADDR_VAR 0 6
14305: PUSH
14306: LD_INT 0
14308: ST_TO_ADDR
// case mode of 0 :
14309: LD_VAR 0 6
14313: PUSH
14314: LD_INT 0
14316: DOUBLE
14317: EQUAL
14318: IFTRUE 14322
14320: GO 25775
14322: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14323: LD_ADDR_VAR 0 11
14327: PUSH
14328: LD_INT 0
14330: PUSH
14331: LD_INT 0
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 0
14340: PUSH
14341: LD_INT 1
14343: NEG
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 1
14351: PUSH
14352: LD_INT 0
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 1
14361: PUSH
14362: LD_INT 1
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: LD_INT 0
14371: PUSH
14372: LD_INT 1
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 1
14381: NEG
14382: PUSH
14383: LD_INT 0
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 1
14392: NEG
14393: PUSH
14394: LD_INT 1
14396: NEG
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 1
14404: NEG
14405: PUSH
14406: LD_INT 2
14408: NEG
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PUSH
14414: LD_INT 0
14416: PUSH
14417: LD_INT 2
14419: NEG
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 1
14427: PUSH
14428: LD_INT 1
14430: NEG
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: LD_INT 1
14438: PUSH
14439: LD_INT 2
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 0
14448: PUSH
14449: LD_INT 2
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 1
14458: NEG
14459: PUSH
14460: LD_INT 1
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 1
14469: PUSH
14470: LD_INT 3
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 0
14479: PUSH
14480: LD_INT 3
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 1
14489: NEG
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14516: LD_ADDR_VAR 0 12
14520: PUSH
14521: LD_INT 0
14523: PUSH
14524: LD_INT 0
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 0
14533: PUSH
14534: LD_INT 1
14536: NEG
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 1
14544: PUSH
14545: LD_INT 0
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 1
14554: PUSH
14555: LD_INT 1
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: LD_INT 0
14564: PUSH
14565: LD_INT 1
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PUSH
14572: LD_INT 1
14574: NEG
14575: PUSH
14576: LD_INT 0
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 1
14585: NEG
14586: PUSH
14587: LD_INT 1
14589: NEG
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 1
14597: PUSH
14598: LD_INT 1
14600: NEG
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 2
14608: PUSH
14609: LD_INT 0
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 2
14618: PUSH
14619: LD_INT 1
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 1
14628: NEG
14629: PUSH
14630: LD_INT 1
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 2
14639: NEG
14640: PUSH
14641: LD_INT 0
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 2
14650: NEG
14651: PUSH
14652: LD_INT 1
14654: NEG
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 2
14662: NEG
14663: PUSH
14664: LD_INT 1
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 3
14673: NEG
14674: PUSH
14675: LD_INT 0
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 3
14684: NEG
14685: PUSH
14686: LD_INT 1
14688: NEG
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14712: LD_ADDR_VAR 0 13
14716: PUSH
14717: LD_INT 0
14719: PUSH
14720: LD_INT 0
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 0
14729: PUSH
14730: LD_INT 1
14732: NEG
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: LD_INT 0
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 1
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 0
14760: PUSH
14761: LD_INT 1
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: LD_INT 1
14770: NEG
14771: PUSH
14772: LD_INT 0
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 1
14781: NEG
14782: PUSH
14783: LD_INT 1
14785: NEG
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 1
14793: NEG
14794: PUSH
14795: LD_INT 2
14797: NEG
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: LD_INT 1
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 2
14815: PUSH
14816: LD_INT 2
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 1
14825: PUSH
14826: LD_INT 2
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 2
14835: NEG
14836: PUSH
14837: LD_INT 1
14839: NEG
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 2
14847: NEG
14848: PUSH
14849: LD_INT 2
14851: NEG
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 2
14859: NEG
14860: PUSH
14861: LD_INT 3
14863: NEG
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 3
14871: NEG
14872: PUSH
14873: LD_INT 2
14875: NEG
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 3
14883: NEG
14884: PUSH
14885: LD_INT 3
14887: NEG
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
14911: LD_ADDR_VAR 0 14
14915: PUSH
14916: LD_INT 0
14918: PUSH
14919: LD_INT 0
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 0
14928: PUSH
14929: LD_INT 1
14931: NEG
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 1
14939: PUSH
14940: LD_INT 0
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 1
14949: PUSH
14950: LD_INT 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 0
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 1
14969: NEG
14970: PUSH
14971: LD_INT 0
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 1
14980: NEG
14981: PUSH
14982: LD_INT 1
14984: NEG
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 1
14992: NEG
14993: PUSH
14994: LD_INT 2
14996: NEG
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 0
15004: PUSH
15005: LD_INT 2
15007: NEG
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 1
15015: PUSH
15016: LD_INT 1
15018: NEG
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 1
15026: PUSH
15027: LD_INT 2
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 0
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 1
15046: NEG
15047: PUSH
15048: LD_INT 1
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 1
15057: NEG
15058: PUSH
15059: LD_INT 3
15061: NEG
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 0
15069: PUSH
15070: LD_INT 3
15072: NEG
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 1
15080: PUSH
15081: LD_INT 2
15083: NEG
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15107: LD_ADDR_VAR 0 15
15111: PUSH
15112: LD_INT 0
15114: PUSH
15115: LD_INT 0
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 0
15124: PUSH
15125: LD_INT 1
15127: NEG
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 1
15135: PUSH
15136: LD_INT 0
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 1
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 0
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 1
15165: NEG
15166: PUSH
15167: LD_INT 0
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 1
15176: NEG
15177: PUSH
15178: LD_INT 1
15180: NEG
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PUSH
15186: LD_INT 1
15188: PUSH
15189: LD_INT 1
15191: NEG
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 2
15199: PUSH
15200: LD_INT 0
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 2
15209: PUSH
15210: LD_INT 1
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 1
15219: NEG
15220: PUSH
15221: LD_INT 1
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 2
15230: NEG
15231: PUSH
15232: LD_INT 0
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: LD_INT 2
15241: NEG
15242: PUSH
15243: LD_INT 1
15245: NEG
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 2
15253: PUSH
15254: LD_INT 1
15256: NEG
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 3
15264: PUSH
15265: LD_INT 0
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 3
15274: PUSH
15275: LD_INT 1
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15300: LD_ADDR_VAR 0 16
15304: PUSH
15305: LD_INT 0
15307: PUSH
15308: LD_INT 0
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 0
15317: PUSH
15318: LD_INT 1
15320: NEG
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 1
15328: PUSH
15329: LD_INT 0
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 1
15338: PUSH
15339: LD_INT 1
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 0
15348: PUSH
15349: LD_INT 1
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 1
15358: NEG
15359: PUSH
15360: LD_INT 0
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 1
15369: NEG
15370: PUSH
15371: LD_INT 1
15373: NEG
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 1
15381: NEG
15382: PUSH
15383: LD_INT 2
15385: NEG
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 2
15393: PUSH
15394: LD_INT 1
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 2
15403: PUSH
15404: LD_INT 2
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: LD_INT 2
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 2
15423: NEG
15424: PUSH
15425: LD_INT 1
15427: NEG
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 2
15435: NEG
15436: PUSH
15437: LD_INT 2
15439: NEG
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 3
15447: PUSH
15448: LD_INT 2
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 3
15457: PUSH
15458: LD_INT 3
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 2
15467: PUSH
15468: LD_INT 3
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15493: LD_ADDR_VAR 0 17
15497: PUSH
15498: LD_INT 0
15500: PUSH
15501: LD_INT 0
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 0
15510: PUSH
15511: LD_INT 1
15513: NEG
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 1
15521: PUSH
15522: LD_INT 0
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: LD_INT 1
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 0
15541: PUSH
15542: LD_INT 1
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 1
15551: NEG
15552: PUSH
15553: LD_INT 0
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: LD_INT 1
15562: NEG
15563: PUSH
15564: LD_INT 1
15566: NEG
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 1
15574: NEG
15575: PUSH
15576: LD_INT 2
15578: NEG
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: LD_INT 0
15586: PUSH
15587: LD_INT 2
15589: NEG
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 1
15597: PUSH
15598: LD_INT 1
15600: NEG
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 2
15608: PUSH
15609: LD_INT 0
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 2
15618: PUSH
15619: LD_INT 1
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 2
15628: PUSH
15629: LD_INT 2
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 1
15638: PUSH
15639: LD_INT 2
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 0
15648: PUSH
15649: LD_INT 2
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 1
15658: NEG
15659: PUSH
15660: LD_INT 1
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 2
15669: NEG
15670: PUSH
15671: LD_INT 0
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 2
15680: NEG
15681: PUSH
15682: LD_INT 1
15684: NEG
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: LD_INT 2
15692: NEG
15693: PUSH
15694: LD_INT 2
15696: NEG
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15723: LD_ADDR_VAR 0 18
15727: PUSH
15728: LD_INT 0
15730: PUSH
15731: LD_INT 0
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 0
15740: PUSH
15741: LD_INT 1
15743: NEG
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 1
15751: PUSH
15752: LD_INT 0
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 1
15761: PUSH
15762: LD_INT 1
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 0
15771: PUSH
15772: LD_INT 1
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 1
15781: NEG
15782: PUSH
15783: LD_INT 0
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 1
15792: NEG
15793: PUSH
15794: LD_INT 1
15796: NEG
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 1
15804: NEG
15805: PUSH
15806: LD_INT 2
15808: NEG
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 0
15816: PUSH
15817: LD_INT 2
15819: NEG
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: LD_INT 1
15830: NEG
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 2
15838: PUSH
15839: LD_INT 0
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 2
15848: PUSH
15849: LD_INT 1
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 2
15858: PUSH
15859: LD_INT 2
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 1
15868: PUSH
15869: LD_INT 2
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: LD_INT 0
15878: PUSH
15879: LD_INT 2
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: LD_INT 1
15888: NEG
15889: PUSH
15890: LD_INT 1
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 2
15899: NEG
15900: PUSH
15901: LD_INT 0
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 2
15910: NEG
15911: PUSH
15912: LD_INT 1
15914: NEG
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 2
15922: NEG
15923: PUSH
15924: LD_INT 2
15926: NEG
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15953: LD_ADDR_VAR 0 19
15957: PUSH
15958: LD_INT 0
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 0
15970: PUSH
15971: LD_INT 1
15973: NEG
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 1
15981: PUSH
15982: LD_INT 0
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 1
15991: PUSH
15992: LD_INT 1
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 0
16001: PUSH
16002: LD_INT 1
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 1
16011: NEG
16012: PUSH
16013: LD_INT 0
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 1
16022: NEG
16023: PUSH
16024: LD_INT 1
16026: NEG
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 1
16034: NEG
16035: PUSH
16036: LD_INT 2
16038: NEG
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 0
16046: PUSH
16047: LD_INT 2
16049: NEG
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 1
16057: PUSH
16058: LD_INT 1
16060: NEG
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 2
16068: PUSH
16069: LD_INT 0
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 2
16078: PUSH
16079: LD_INT 1
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 2
16088: PUSH
16089: LD_INT 2
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 1
16098: PUSH
16099: LD_INT 2
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 0
16108: PUSH
16109: LD_INT 2
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: LD_INT 1
16118: NEG
16119: PUSH
16120: LD_INT 1
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: LD_INT 2
16129: NEG
16130: PUSH
16131: LD_INT 0
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 2
16140: NEG
16141: PUSH
16142: LD_INT 1
16144: NEG
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 2
16152: NEG
16153: PUSH
16154: LD_INT 2
16156: NEG
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16183: LD_ADDR_VAR 0 20
16187: PUSH
16188: LD_INT 0
16190: PUSH
16191: LD_INT 0
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 0
16200: PUSH
16201: LD_INT 1
16203: NEG
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 1
16211: PUSH
16212: LD_INT 0
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 1
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 0
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 1
16241: NEG
16242: PUSH
16243: LD_INT 0
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 1
16252: NEG
16253: PUSH
16254: LD_INT 1
16256: NEG
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 1
16264: NEG
16265: PUSH
16266: LD_INT 2
16268: NEG
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 0
16276: PUSH
16277: LD_INT 2
16279: NEG
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 1
16287: PUSH
16288: LD_INT 1
16290: NEG
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 2
16298: PUSH
16299: LD_INT 0
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 2
16308: PUSH
16309: LD_INT 1
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 2
16318: PUSH
16319: LD_INT 2
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 1
16328: PUSH
16329: LD_INT 2
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 0
16338: PUSH
16339: LD_INT 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 1
16348: NEG
16349: PUSH
16350: LD_INT 1
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 2
16359: NEG
16360: PUSH
16361: LD_INT 0
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 2
16370: NEG
16371: PUSH
16372: LD_INT 1
16374: NEG
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 2
16382: NEG
16383: PUSH
16384: LD_INT 2
16386: NEG
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16413: LD_ADDR_VAR 0 21
16417: PUSH
16418: LD_INT 0
16420: PUSH
16421: LD_INT 0
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 0
16430: PUSH
16431: LD_INT 1
16433: NEG
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: LD_INT 0
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 1
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 0
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 1
16471: NEG
16472: PUSH
16473: LD_INT 0
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 1
16482: NEG
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 1
16494: NEG
16495: PUSH
16496: LD_INT 2
16498: NEG
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 0
16506: PUSH
16507: LD_INT 2
16509: NEG
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: LD_INT 1
16520: NEG
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 2
16528: PUSH
16529: LD_INT 0
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 2
16538: PUSH
16539: LD_INT 1
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: LD_INT 2
16548: PUSH
16549: LD_INT 2
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: LD_INT 2
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 0
16568: PUSH
16569: LD_INT 2
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 1
16578: NEG
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 2
16589: NEG
16590: PUSH
16591: LD_INT 0
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 2
16600: NEG
16601: PUSH
16602: LD_INT 1
16604: NEG
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 2
16612: NEG
16613: PUSH
16614: LD_INT 2
16616: NEG
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16643: LD_ADDR_VAR 0 22
16647: PUSH
16648: LD_INT 0
16650: PUSH
16651: LD_INT 0
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 0
16660: PUSH
16661: LD_INT 1
16663: NEG
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 1
16671: PUSH
16672: LD_INT 0
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 1
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 0
16691: PUSH
16692: LD_INT 1
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 1
16701: NEG
16702: PUSH
16703: LD_INT 0
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 1
16712: NEG
16713: PUSH
16714: LD_INT 1
16716: NEG
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 1
16724: NEG
16725: PUSH
16726: LD_INT 2
16728: NEG
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 0
16736: PUSH
16737: LD_INT 2
16739: NEG
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: LD_INT 1
16747: PUSH
16748: LD_INT 1
16750: NEG
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 2
16758: PUSH
16759: LD_INT 0
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 2
16768: PUSH
16769: LD_INT 1
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 2
16778: PUSH
16779: LD_INT 2
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 1
16788: PUSH
16789: LD_INT 2
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 0
16798: PUSH
16799: LD_INT 2
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 1
16808: NEG
16809: PUSH
16810: LD_INT 1
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 2
16819: NEG
16820: PUSH
16821: LD_INT 0
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 2
16830: NEG
16831: PUSH
16832: LD_INT 1
16834: NEG
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 2
16842: NEG
16843: PUSH
16844: LD_INT 2
16846: NEG
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
16873: LD_ADDR_VAR 0 23
16877: PUSH
16878: LD_INT 0
16880: PUSH
16881: LD_INT 0
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 0
16890: PUSH
16891: LD_INT 1
16893: NEG
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 1
16901: PUSH
16902: LD_INT 0
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 1
16911: PUSH
16912: LD_INT 1
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 0
16921: PUSH
16922: LD_INT 1
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 1
16931: NEG
16932: PUSH
16933: LD_INT 0
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 1
16942: NEG
16943: PUSH
16944: LD_INT 1
16946: NEG
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 1
16954: NEG
16955: PUSH
16956: LD_INT 2
16958: NEG
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 0
16966: PUSH
16967: LD_INT 2
16969: NEG
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 1
16977: PUSH
16978: LD_INT 1
16980: NEG
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 2
16988: PUSH
16989: LD_INT 0
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 2
16998: PUSH
16999: LD_INT 1
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: LD_INT 2
17008: PUSH
17009: LD_INT 2
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 1
17018: PUSH
17019: LD_INT 2
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 0
17028: PUSH
17029: LD_INT 2
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 1
17038: NEG
17039: PUSH
17040: LD_INT 1
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 2
17049: NEG
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 2
17060: NEG
17061: PUSH
17062: LD_INT 1
17064: NEG
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 2
17072: NEG
17073: PUSH
17074: LD_INT 2
17076: NEG
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 2
17084: NEG
17085: PUSH
17086: LD_INT 3
17088: NEG
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 1
17096: NEG
17097: PUSH
17098: LD_INT 3
17100: NEG
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 1
17108: PUSH
17109: LD_INT 2
17111: NEG
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 2
17119: PUSH
17120: LD_INT 1
17122: NEG
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17153: LD_ADDR_VAR 0 24
17157: PUSH
17158: LD_INT 0
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 0
17170: PUSH
17171: LD_INT 1
17173: NEG
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 1
17181: PUSH
17182: LD_INT 0
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 1
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 0
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 1
17211: NEG
17212: PUSH
17213: LD_INT 0
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 1
17222: NEG
17223: PUSH
17224: LD_INT 1
17226: NEG
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 1
17234: NEG
17235: PUSH
17236: LD_INT 2
17238: NEG
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 0
17246: PUSH
17247: LD_INT 2
17249: NEG
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 1
17257: PUSH
17258: LD_INT 1
17260: NEG
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 2
17268: PUSH
17269: LD_INT 0
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 2
17278: PUSH
17279: LD_INT 1
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 2
17288: PUSH
17289: LD_INT 2
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 1
17298: PUSH
17299: LD_INT 2
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 0
17308: PUSH
17309: LD_INT 2
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 1
17318: NEG
17319: PUSH
17320: LD_INT 1
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 2
17329: NEG
17330: PUSH
17331: LD_INT 0
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 2
17340: NEG
17341: PUSH
17342: LD_INT 1
17344: NEG
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 2
17352: NEG
17353: PUSH
17354: LD_INT 2
17356: NEG
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 1
17364: PUSH
17365: LD_INT 2
17367: NEG
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 2
17375: PUSH
17376: LD_INT 1
17378: NEG
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: LD_INT 1
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 3
17396: PUSH
17397: LD_INT 2
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17429: LD_ADDR_VAR 0 25
17433: PUSH
17434: LD_INT 0
17436: PUSH
17437: LD_INT 0
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 0
17446: PUSH
17447: LD_INT 1
17449: NEG
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: LD_INT 0
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: LD_INT 1
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 0
17477: PUSH
17478: LD_INT 1
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 1
17487: NEG
17488: PUSH
17489: LD_INT 0
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 1
17498: NEG
17499: PUSH
17500: LD_INT 1
17502: NEG
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: LD_INT 2
17514: NEG
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 0
17522: PUSH
17523: LD_INT 2
17525: NEG
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: LD_INT 1
17536: NEG
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 2
17544: PUSH
17545: LD_INT 0
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 2
17554: PUSH
17555: LD_INT 1
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 2
17564: PUSH
17565: LD_INT 2
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 1
17574: PUSH
17575: LD_INT 2
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 0
17584: PUSH
17585: LD_INT 2
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 1
17594: NEG
17595: PUSH
17596: LD_INT 1
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 2
17605: NEG
17606: PUSH
17607: LD_INT 0
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 2
17616: NEG
17617: PUSH
17618: LD_INT 1
17620: NEG
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 2
17628: NEG
17629: PUSH
17630: LD_INT 2
17632: NEG
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 3
17640: PUSH
17641: LD_INT 1
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 3
17650: PUSH
17651: LD_INT 2
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 2
17660: PUSH
17661: LD_INT 3
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 1
17670: PUSH
17671: LD_INT 3
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
17703: LD_ADDR_VAR 0 26
17707: PUSH
17708: LD_INT 0
17710: PUSH
17711: LD_INT 0
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 0
17720: PUSH
17721: LD_INT 1
17723: NEG
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 1
17731: PUSH
17732: LD_INT 0
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 1
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 0
17751: PUSH
17752: LD_INT 1
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 1
17761: NEG
17762: PUSH
17763: LD_INT 0
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 1
17772: NEG
17773: PUSH
17774: LD_INT 1
17776: NEG
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 1
17784: NEG
17785: PUSH
17786: LD_INT 2
17788: NEG
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: LD_INT 2
17799: NEG
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 1
17807: PUSH
17808: LD_INT 1
17810: NEG
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: LD_INT 2
17818: PUSH
17819: LD_INT 0
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 2
17828: PUSH
17829: LD_INT 1
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 2
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: LD_INT 2
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 0
17858: PUSH
17859: LD_INT 2
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 1
17868: NEG
17869: PUSH
17870: LD_INT 1
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 2
17879: NEG
17880: PUSH
17881: LD_INT 0
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: LD_INT 1
17894: NEG
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 2
17902: NEG
17903: PUSH
17904: LD_INT 2
17906: NEG
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: LD_INT 3
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: LD_INT 3
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: NEG
17935: PUSH
17936: LD_INT 2
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 2
17945: NEG
17946: PUSH
17947: LD_INT 1
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
17979: LD_ADDR_VAR 0 27
17983: PUSH
17984: LD_INT 0
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 0
17996: PUSH
17997: LD_INT 1
17999: NEG
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 1
18007: PUSH
18008: LD_INT 0
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 1
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 0
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 1
18037: NEG
18038: PUSH
18039: LD_INT 0
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: LD_INT 1
18048: NEG
18049: PUSH
18050: LD_INT 1
18052: NEG
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 1
18060: NEG
18061: PUSH
18062: LD_INT 2
18064: NEG
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 0
18072: PUSH
18073: LD_INT 2
18075: NEG
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: LD_INT 1
18086: NEG
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 2
18094: PUSH
18095: LD_INT 0
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 2
18104: PUSH
18105: LD_INT 1
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 2
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 1
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 0
18134: PUSH
18135: LD_INT 2
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 1
18144: NEG
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 2
18155: NEG
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 2
18166: NEG
18167: PUSH
18168: LD_INT 1
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 2
18178: NEG
18179: PUSH
18180: LD_INT 2
18182: NEG
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 1
18190: NEG
18191: PUSH
18192: LD_INT 2
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 2
18201: NEG
18202: PUSH
18203: LD_INT 1
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 3
18212: NEG
18213: PUSH
18214: LD_INT 1
18216: NEG
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 3
18224: NEG
18225: PUSH
18226: LD_INT 2
18228: NEG
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18259: LD_ADDR_VAR 0 28
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 0
18276: PUSH
18277: LD_INT 1
18279: NEG
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: LD_INT 0
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 0
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 1
18317: NEG
18318: PUSH
18319: LD_INT 0
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 1
18328: NEG
18329: PUSH
18330: LD_INT 1
18332: NEG
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: NEG
18341: PUSH
18342: LD_INT 2
18344: NEG
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 0
18352: PUSH
18353: LD_INT 2
18355: NEG
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: LD_INT 1
18366: NEG
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 2
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: LD_INT 1
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 2
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 1
18404: PUSH
18405: LD_INT 2
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 0
18414: PUSH
18415: LD_INT 2
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 1
18424: NEG
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 2
18435: NEG
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 2
18446: NEG
18447: PUSH
18448: LD_INT 1
18450: NEG
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 2
18458: NEG
18459: PUSH
18460: LD_INT 2
18462: NEG
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 2
18470: NEG
18471: PUSH
18472: LD_INT 3
18474: NEG
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 1
18482: NEG
18483: PUSH
18484: LD_INT 3
18486: NEG
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 3
18494: NEG
18495: PUSH
18496: LD_INT 1
18498: NEG
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 3
18506: NEG
18507: PUSH
18508: LD_INT 2
18510: NEG
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18541: LD_ADDR_VAR 0 29
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: LD_INT 1
18561: NEG
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 1
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 0
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 1
18599: NEG
18600: PUSH
18601: LD_INT 0
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 1
18610: NEG
18611: PUSH
18612: LD_INT 1
18614: NEG
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: LD_INT 2
18626: NEG
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: LD_INT 2
18637: NEG
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: LD_INT 1
18648: NEG
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 2
18656: PUSH
18657: LD_INT 0
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 2
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 1
18676: PUSH
18677: LD_INT 2
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: LD_INT 2
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 1
18696: NEG
18697: PUSH
18698: LD_INT 1
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 2
18707: NEG
18708: PUSH
18709: LD_INT 1
18711: NEG
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 2
18719: NEG
18720: PUSH
18721: LD_INT 2
18723: NEG
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 2
18731: NEG
18732: PUSH
18733: LD_INT 3
18735: NEG
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 2
18743: PUSH
18744: LD_INT 1
18746: NEG
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 3
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: LD_INT 3
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: NEG
18775: PUSH
18776: LD_INT 2
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 3
18785: NEG
18786: PUSH
18787: LD_INT 2
18789: NEG
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
18820: LD_ADDR_VAR 0 30
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: LD_INT 0
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 0
18837: PUSH
18838: LD_INT 1
18840: NEG
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: LD_INT 1
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 0
18868: PUSH
18869: LD_INT 1
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 1
18878: NEG
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: NEG
18890: PUSH
18891: LD_INT 1
18893: NEG
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 1
18901: NEG
18902: PUSH
18903: LD_INT 2
18905: NEG
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: LD_INT 2
18916: NEG
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 2
18935: PUSH
18936: LD_INT 0
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: LD_INT 2
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 1
18965: PUSH
18966: LD_INT 2
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 1
18975: NEG
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 2
18986: NEG
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 2
18997: NEG
18998: PUSH
18999: LD_INT 1
19001: NEG
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: LD_INT 3
19013: NEG
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 1
19021: PUSH
19022: LD_INT 2
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 3
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: LD_INT 3
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 2
19052: NEG
19053: PUSH
19054: LD_INT 1
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 3
19063: NEG
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19098: LD_ADDR_VAR 0 31
19102: PUSH
19103: LD_INT 0
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: LD_INT 1
19118: NEG
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: LD_INT 0
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 1
19156: NEG
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 1
19167: NEG
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: NEG
19180: PUSH
19181: LD_INT 2
19183: NEG
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: LD_INT 1
19194: NEG
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 2
19202: PUSH
19203: LD_INT 0
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: LD_INT 1
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: LD_INT 2
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: LD_INT 2
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 1
19252: NEG
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 2
19263: NEG
19264: PUSH
19265: LD_INT 1
19267: NEG
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 2
19275: NEG
19276: PUSH
19277: LD_INT 2
19279: NEG
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 2
19287: NEG
19288: PUSH
19289: LD_INT 3
19291: NEG
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: LD_INT 1
19302: NEG
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 3
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: LD_INT 3
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: NEG
19331: PUSH
19332: LD_INT 2
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 3
19341: NEG
19342: PUSH
19343: LD_INT 2
19345: NEG
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19376: LD_ADDR_VAR 0 32
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: LD_INT 0
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 0
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: LD_INT 0
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 1
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 1
19434: NEG
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 1
19445: NEG
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: LD_INT 2
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 2
19472: NEG
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: LD_INT 1
19483: NEG
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: LD_INT 1
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 2
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 2
19542: NEG
19543: PUSH
19544: LD_INT 0
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 2
19553: NEG
19554: PUSH
19555: LD_INT 1
19557: NEG
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 1
19565: NEG
19566: PUSH
19567: LD_INT 3
19569: NEG
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: LD_INT 2
19580: NEG
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 3
19588: PUSH
19589: LD_INT 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 2
19598: PUSH
19599: LD_INT 3
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 3
19619: NEG
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19654: LD_ADDR_VAR 0 33
19658: PUSH
19659: LD_INT 0
19661: PUSH
19662: LD_INT 0
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 0
19671: PUSH
19672: LD_INT 1
19674: NEG
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 1
19682: PUSH
19683: LD_INT 0
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 1
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 0
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 1
19712: NEG
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: LD_INT 1
19727: NEG
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 1
19735: NEG
19736: PUSH
19737: LD_INT 2
19739: NEG
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: LD_INT 1
19750: NEG
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 2
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 2
19768: PUSH
19769: LD_INT 1
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: LD_INT 2
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 0
19788: PUSH
19789: LD_INT 2
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 1
19798: NEG
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 2
19809: NEG
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 2
19820: NEG
19821: PUSH
19822: LD_INT 1
19824: NEG
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 2
19832: NEG
19833: PUSH
19834: LD_INT 2
19836: NEG
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 2
19844: NEG
19845: PUSH
19846: LD_INT 3
19848: NEG
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 2
19856: PUSH
19857: LD_INT 1
19859: NEG
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 3
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: LD_INT 3
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 1
19887: NEG
19888: PUSH
19889: LD_INT 2
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 3
19898: NEG
19899: PUSH
19900: LD_INT 2
19902: NEG
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19933: LD_ADDR_VAR 0 34
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: LD_INT 0
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 0
19950: PUSH
19951: LD_INT 1
19953: NEG
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: LD_INT 1
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 0
19981: PUSH
19982: LD_INT 1
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 1
20002: NEG
20003: PUSH
20004: LD_INT 1
20006: NEG
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 1
20014: NEG
20015: PUSH
20016: LD_INT 2
20018: NEG
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 0
20026: PUSH
20027: LD_INT 2
20029: NEG
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 1
20037: PUSH
20038: LD_INT 1
20040: NEG
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 2
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: LD_INT 2
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 1
20078: NEG
20079: PUSH
20080: LD_INT 1
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 2
20100: NEG
20101: PUSH
20102: LD_INT 1
20104: NEG
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 2
20112: NEG
20113: PUSH
20114: LD_INT 2
20116: NEG
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: PUSH
20126: LD_INT 3
20128: NEG
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 1
20136: PUSH
20137: LD_INT 2
20139: NEG
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 3
20147: PUSH
20148: LD_INT 2
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 2
20157: PUSH
20158: LD_INT 3
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 2
20167: NEG
20168: PUSH
20169: LD_INT 1
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 3
20178: NEG
20179: PUSH
20180: LD_INT 1
20182: NEG
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20213: LD_ADDR_VAR 0 35
20217: PUSH
20218: LD_INT 0
20220: PUSH
20221: LD_INT 0
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 0
20230: PUSH
20231: LD_INT 1
20233: NEG
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 1
20241: PUSH
20242: LD_INT 0
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 1
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 0
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 1
20271: NEG
20272: PUSH
20273: LD_INT 0
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 1
20282: NEG
20283: PUSH
20284: LD_INT 1
20286: NEG
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 2
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 2
20304: NEG
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20325: LD_ADDR_VAR 0 36
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: LD_INT 0
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 0
20342: PUSH
20343: LD_INT 1
20345: NEG
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: LD_INT 0
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: LD_INT 1
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 0
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 1
20383: NEG
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 1
20394: NEG
20395: PUSH
20396: LD_INT 1
20398: NEG
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 1
20406: NEG
20407: PUSH
20408: LD_INT 2
20410: NEG
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20437: LD_ADDR_VAR 0 37
20441: PUSH
20442: LD_INT 0
20444: PUSH
20445: LD_INT 0
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 0
20454: PUSH
20455: LD_INT 1
20457: NEG
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: LD_INT 1
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 0
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 1
20495: NEG
20496: PUSH
20497: LD_INT 0
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 1
20506: NEG
20507: PUSH
20508: LD_INT 1
20510: NEG
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 1
20518: PUSH
20519: LD_INT 1
20521: NEG
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 1
20529: NEG
20530: PUSH
20531: LD_INT 1
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20549: LD_ADDR_VAR 0 38
20553: PUSH
20554: LD_INT 0
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: LD_INT 1
20569: NEG
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 1
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: LD_INT 1
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 1
20618: NEG
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 2
20630: PUSH
20631: LD_INT 1
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 2
20640: NEG
20641: PUSH
20642: LD_INT 1
20644: NEG
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20661: LD_ADDR_VAR 0 39
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 1
20689: PUSH
20690: LD_INT 0
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 1
20699: PUSH
20700: LD_INT 1
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 0
20709: PUSH
20710: LD_INT 1
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: LD_INT 0
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PUSH
20732: LD_INT 1
20734: NEG
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 1
20742: NEG
20743: PUSH
20744: LD_INT 2
20746: NEG
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 1
20754: PUSH
20755: LD_INT 2
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20773: LD_ADDR_VAR 0 40
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: LD_INT 0
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: LD_INT 1
20793: NEG
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: LD_INT 0
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 1
20811: PUSH
20812: LD_INT 1
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 1
20831: NEG
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: NEG
20843: PUSH
20844: LD_INT 1
20846: NEG
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: PUSH
20855: LD_INT 1
20857: NEG
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20885: LD_ADDR_VAR 0 41
20889: PUSH
20890: LD_INT 0
20892: PUSH
20893: LD_INT 0
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 0
20902: PUSH
20903: LD_INT 1
20905: NEG
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: LD_INT 1
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 0
20933: PUSH
20934: LD_INT 1
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 1
20943: NEG
20944: PUSH
20945: LD_INT 0
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 1
20954: NEG
20955: PUSH
20956: LD_INT 1
20958: NEG
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: LD_INT 2
20970: NEG
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 1
20978: PUSH
20979: LD_INT 1
20981: NEG
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 2
20989: PUSH
20990: LD_INT 0
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 2
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 2
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: LD_INT 2
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 1
21029: NEG
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: NEG
21041: PUSH
21042: LD_INT 0
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 2
21051: NEG
21052: PUSH
21053: LD_INT 1
21055: NEG
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 2
21063: NEG
21064: PUSH
21065: LD_INT 2
21067: NEG
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 2
21075: NEG
21076: PUSH
21077: LD_INT 3
21079: NEG
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 2
21087: PUSH
21088: LD_INT 1
21090: NEG
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 3
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 3
21108: PUSH
21109: LD_INT 1
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 3
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 3
21128: PUSH
21129: LD_INT 3
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 2
21138: PUSH
21139: LD_INT 3
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 3
21159: NEG
21160: PUSH
21161: LD_INT 0
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 3
21170: NEG
21171: PUSH
21172: LD_INT 1
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 3
21182: NEG
21183: PUSH
21184: LD_INT 2
21186: NEG
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 3
21194: NEG
21195: PUSH
21196: LD_INT 3
21198: NEG
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21235: LD_ADDR_VAR 0 42
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PUSH
21261: LD_INT 1
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: NEG
21305: PUSH
21306: LD_INT 1
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: LD_INT 2
21320: NEG
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: LD_INT 2
21331: NEG
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: LD_INT 2
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: LD_INT 2
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: NEG
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: NEG
21402: PUSH
21403: LD_INT 1
21405: NEG
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 2
21413: NEG
21414: PUSH
21415: LD_INT 2
21417: NEG
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 2
21425: NEG
21426: PUSH
21427: LD_INT 3
21429: NEG
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 1
21437: NEG
21438: PUSH
21439: LD_INT 3
21441: NEG
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: LD_INT 3
21452: NEG
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: LD_INT 2
21463: NEG
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 3
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 3
21481: PUSH
21482: LD_INT 3
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 2
21491: PUSH
21492: LD_INT 3
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: LD_INT 3
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 0
21511: PUSH
21512: LD_INT 3
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 1
21521: NEG
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 3
21532: NEG
21533: PUSH
21534: LD_INT 2
21536: NEG
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 3
21544: NEG
21545: PUSH
21546: LD_INT 3
21548: NEG
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21585: LD_ADDR_VAR 0 43
21589: PUSH
21590: LD_INT 0
21592: PUSH
21593: LD_INT 0
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 0
21602: PUSH
21603: LD_INT 1
21605: NEG
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 1
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 1
21623: PUSH
21624: LD_INT 1
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 0
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 1
21643: NEG
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: LD_INT 1
21658: NEG
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: LD_INT 2
21670: NEG
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 0
21678: PUSH
21679: LD_INT 2
21681: NEG
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 2
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 2
21710: PUSH
21711: LD_INT 1
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 1
21720: PUSH
21721: LD_INT 2
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: LD_INT 2
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 1
21740: NEG
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 2
21751: NEG
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 2
21762: NEG
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PUSH
21776: LD_INT 3
21778: NEG
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 0
21786: PUSH
21787: LD_INT 3
21789: NEG
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: LD_INT 2
21800: NEG
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: LD_INT 1
21811: NEG
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 3
21819: PUSH
21820: LD_INT 0
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 3
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: LD_INT 3
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: LD_INT 3
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: LD_INT 2
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 2
21870: NEG
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 3
21881: NEG
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 3
21892: NEG
21893: PUSH
21894: LD_INT 1
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21933: LD_ADDR_VAR 0 44
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: LD_INT 1
21953: NEG
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 1
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 0
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 1
22002: NEG
22003: PUSH
22004: LD_INT 1
22006: NEG
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: NEG
22015: PUSH
22016: LD_INT 2
22018: NEG
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 2
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 2
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: LD_INT 2
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: NEG
22078: PUSH
22079: LD_INT 1
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 2
22088: NEG
22089: PUSH
22090: LD_INT 0
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 2
22099: NEG
22100: PUSH
22101: LD_INT 1
22103: NEG
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 2
22111: NEG
22112: PUSH
22113: LD_INT 2
22115: NEG
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 2
22123: NEG
22124: PUSH
22125: LD_INT 3
22127: NEG
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 2
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 3
22146: PUSH
22147: LD_INT 0
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 3
22156: PUSH
22157: LD_INT 1
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 3
22166: PUSH
22167: LD_INT 2
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 3
22176: PUSH
22177: LD_INT 3
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 2
22186: PUSH
22187: LD_INT 3
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 2
22196: NEG
22197: PUSH
22198: LD_INT 1
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 3
22207: NEG
22208: PUSH
22209: LD_INT 0
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 3
22218: NEG
22219: PUSH
22220: LD_INT 1
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 3
22230: NEG
22231: PUSH
22232: LD_INT 2
22234: NEG
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 3
22242: NEG
22243: PUSH
22244: LD_INT 3
22246: NEG
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22283: LD_ADDR_VAR 0 45
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: LD_INT 0
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 0
22300: PUSH
22301: LD_INT 1
22303: NEG
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: LD_INT 0
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 1
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: LD_INT 1
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: NEG
22342: PUSH
22343: LD_INT 0
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 1
22352: NEG
22353: PUSH
22354: LD_INT 1
22356: NEG
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: NEG
22365: PUSH
22366: LD_INT 2
22368: NEG
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 0
22376: PUSH
22377: LD_INT 2
22379: NEG
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: LD_INT 1
22390: NEG
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 2
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: LD_INT 2
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 1
22418: PUSH
22419: LD_INT 2
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 0
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 1
22438: NEG
22439: PUSH
22440: LD_INT 1
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 2
22449: NEG
22450: PUSH
22451: LD_INT 1
22453: NEG
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 2
22461: NEG
22462: PUSH
22463: LD_INT 2
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 2
22473: NEG
22474: PUSH
22475: LD_INT 3
22477: NEG
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 1
22485: NEG
22486: PUSH
22487: LD_INT 3
22489: NEG
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 0
22497: PUSH
22498: LD_INT 3
22500: NEG
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 1
22508: PUSH
22509: LD_INT 2
22511: NEG
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 3
22519: PUSH
22520: LD_INT 2
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 3
22529: PUSH
22530: LD_INT 3
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 2
22539: PUSH
22540: LD_INT 3
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 1
22549: PUSH
22550: LD_INT 3
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 3
22580: NEG
22581: PUSH
22582: LD_INT 2
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 3
22592: NEG
22593: PUSH
22594: LD_INT 3
22596: NEG
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22633: LD_ADDR_VAR 0 46
22637: PUSH
22638: LD_INT 0
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 0
22650: PUSH
22651: LD_INT 1
22653: NEG
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 0
22681: PUSH
22682: LD_INT 1
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 1
22691: NEG
22692: PUSH
22693: LD_INT 0
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: NEG
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 1
22714: NEG
22715: PUSH
22716: LD_INT 2
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: LD_INT 2
22729: NEG
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: LD_INT 1
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 1
22768: PUSH
22769: LD_INT 2
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 1
22788: NEG
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 2
22799: NEG
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 2
22810: NEG
22811: PUSH
22812: LD_INT 1
22814: NEG
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: LD_INT 3
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: LD_INT 3
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: LD_INT 2
22848: NEG
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 2
22856: PUSH
22857: LD_INT 1
22859: NEG
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 3
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 3
22877: PUSH
22878: LD_INT 1
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: LD_INT 3
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: LD_INT 3
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: NEG
22908: PUSH
22909: LD_INT 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: NEG
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 3
22929: NEG
22930: PUSH
22931: LD_INT 0
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 3
22940: NEG
22941: PUSH
22942: LD_INT 1
22944: NEG
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22981: LD_ADDR_VAR 0 47
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 0
22998: PUSH
22999: LD_INT 1
23001: NEG
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 1
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 0
23029: PUSH
23030: LD_INT 1
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 1
23050: NEG
23051: PUSH
23052: LD_INT 1
23054: NEG
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: LD_INT 2
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: LD_INT 2
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: LD_INT 1
23088: NEG
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 2
23096: NEG
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 2
23108: NEG
23109: PUSH
23110: LD_INT 2
23112: NEG
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23132: LD_ADDR_VAR 0 48
23136: PUSH
23137: LD_INT 0
23139: PUSH
23140: LD_INT 0
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: LD_INT 1
23152: NEG
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 1
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 1
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 1
23190: NEG
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 1
23201: NEG
23202: PUSH
23203: LD_INT 1
23205: NEG
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 1
23213: NEG
23214: PUSH
23215: LD_INT 2
23217: NEG
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 0
23225: PUSH
23226: LD_INT 2
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: LD_INT 0
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 2
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23279: LD_ADDR_VAR 0 49
23283: PUSH
23284: LD_INT 0
23286: PUSH
23287: LD_INT 0
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 0
23296: PUSH
23297: LD_INT 1
23299: NEG
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 1
23307: PUSH
23308: LD_INT 0
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: LD_INT 1
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 1
23337: NEG
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 1
23348: NEG
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: LD_INT 1
23363: NEG
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 2
23371: PUSH
23372: LD_INT 0
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 2
23381: PUSH
23382: LD_INT 1
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: LD_INT 2
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23423: LD_ADDR_VAR 0 50
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: LD_INT 1
23443: NEG
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: PUSH
23452: LD_INT 0
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 0
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: LD_INT 1
23496: NEG
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 2
23504: PUSH
23505: LD_INT 1
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 2
23514: PUSH
23515: LD_INT 2
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 1
23524: PUSH
23525: LD_INT 2
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: LD_INT 2
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 1
23544: NEG
23545: PUSH
23546: LD_INT 1
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23567: LD_ADDR_VAR 0 51
23571: PUSH
23572: LD_INT 0
23574: PUSH
23575: LD_INT 0
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 0
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 1
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: PUSH
23606: LD_INT 1
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 1
23636: NEG
23637: PUSH
23638: LD_INT 1
23640: NEG
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: LD_INT 2
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: LD_INT 2
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 1
23668: NEG
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 2
23679: NEG
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 2
23690: NEG
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23714: LD_ADDR_VAR 0 52
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: LD_INT 0
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 0
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 0
23762: PUSH
23763: LD_INT 1
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 1
23772: NEG
23773: PUSH
23774: LD_INT 0
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 1
23783: NEG
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 1
23795: NEG
23796: PUSH
23797: LD_INT 2
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: NEG
23808: PUSH
23809: LD_INT 1
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 2
23818: NEG
23819: PUSH
23820: LD_INT 0
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 2
23829: NEG
23830: PUSH
23831: LD_INT 1
23833: NEG
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 2
23841: NEG
23842: PUSH
23843: LD_INT 2
23845: NEG
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23865: LD_ADDR_VAR 0 53
23869: PUSH
23870: LD_INT 0
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: LD_INT 1
23885: NEG
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 1
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: LD_INT 1
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 1
23923: NEG
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 1
23934: NEG
23935: PUSH
23936: LD_INT 1
23938: NEG
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: LD_INT 2
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 0
23958: PUSH
23959: LD_INT 2
23961: NEG
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: LD_INT 1
23972: NEG
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: LD_INT 1
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 2
24000: PUSH
24001: LD_INT 2
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: LD_INT 2
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 1
24030: NEG
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 2
24041: NEG
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 2
24052: NEG
24053: PUSH
24054: LD_INT 1
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 2
24064: NEG
24065: PUSH
24066: LD_INT 2
24068: NEG
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24095: LD_ADDR_VAR 0 54
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: LD_INT 0
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 0
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 1
24153: NEG
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 1
24164: NEG
24165: PUSH
24166: LD_INT 1
24168: NEG
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 1
24176: NEG
24177: PUSH
24178: LD_INT 2
24180: NEG
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: LD_INT 2
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: PUSH
24200: LD_INT 1
24202: NEG
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 2
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 2
24220: PUSH
24221: LD_INT 1
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: LD_INT 2
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: LD_INT 2
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 0
24250: PUSH
24251: LD_INT 2
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 1
24260: NEG
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 2
24271: NEG
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 2
24282: NEG
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 2
24294: NEG
24295: PUSH
24296: LD_INT 2
24298: NEG
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24325: LD_ADDR_VAR 0 55
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: LD_INT 1
24345: NEG
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: NEG
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 1
24394: NEG
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 1
24406: NEG
24407: PUSH
24408: LD_INT 2
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: LD_INT 2
24421: NEG
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: LD_INT 1
24432: NEG
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 2
24440: PUSH
24441: LD_INT 0
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 2
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 2
24460: PUSH
24461: LD_INT 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: LD_INT 2
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: LD_INT 2
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 1
24490: NEG
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 2
24501: NEG
24502: PUSH
24503: LD_INT 0
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 2
24512: NEG
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 2
24524: NEG
24525: PUSH
24526: LD_INT 2
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24555: LD_ADDR_VAR 0 56
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: LD_INT 0
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 0
24572: PUSH
24573: LD_INT 1
24575: NEG
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: PUSH
24584: LD_INT 0
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: NEG
24614: PUSH
24615: LD_INT 0
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: LD_INT 1
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: LD_INT 2
24640: NEG
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 0
24648: PUSH
24649: LD_INT 2
24651: NEG
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: LD_INT 1
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 2
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 2
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: LD_INT 2
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 0
24710: PUSH
24711: LD_INT 2
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 1
24720: NEG
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 2
24731: NEG
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 2
24742: NEG
24743: PUSH
24744: LD_INT 1
24746: NEG
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 2
24754: NEG
24755: PUSH
24756: LD_INT 2
24758: NEG
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24785: LD_ADDR_VAR 0 57
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: LD_INT 0
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 0
24802: PUSH
24803: LD_INT 1
24805: NEG
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 1
24843: NEG
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 1
24854: NEG
24855: PUSH
24856: LD_INT 1
24858: NEG
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: LD_INT 2
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: LD_INT 2
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 2
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: LD_INT 2
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 1
24930: PUSH
24931: LD_INT 2
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 0
24940: PUSH
24941: LD_INT 2
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: NEG
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 2
24961: NEG
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 2
24972: NEG
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 2
24984: NEG
24985: PUSH
24986: LD_INT 2
24988: NEG
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25015: LD_ADDR_VAR 0 58
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: LD_INT 0
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: LD_INT 1
25035: NEG
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: PUSH
25044: LD_INT 0
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 1
25073: NEG
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: LD_INT 2
25100: NEG
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: LD_INT 2
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: LD_INT 2
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 2
25191: NEG
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 2
25202: NEG
25203: PUSH
25204: LD_INT 1
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 2
25214: NEG
25215: PUSH
25216: LD_INT 2
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25245: LD_ADDR_VAR 0 59
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: LD_INT 0
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: LD_INT 1
25265: NEG
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 1
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 0
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 1
25314: NEG
25315: PUSH
25316: LD_INT 1
25318: NEG
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25333: LD_ADDR_VAR 0 60
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 0
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 1
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 0
25381: PUSH
25382: LD_INT 1
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: LD_INT 0
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 1
25402: NEG
25403: PUSH
25404: LD_INT 1
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25421: LD_ADDR_VAR 0 61
25425: PUSH
25426: LD_INT 0
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: LD_INT 1
25441: NEG
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: LD_INT 1
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 0
25469: PUSH
25470: LD_INT 1
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25509: LD_ADDR_VAR 0 62
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: LD_INT 1
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: NEG
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: LD_INT 1
25582: NEG
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25597: LD_ADDR_VAR 0 63
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 1
25666: NEG
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25685: LD_ADDR_VAR 0 64
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: LD_INT 1
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: ST_TO_ADDR
// end ; 1 :
25773: GO 31670
25775: LD_INT 1
25777: DOUBLE
25778: EQUAL
25779: IFTRUE 25783
25781: GO 28406
25783: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25784: LD_ADDR_VAR 0 11
25788: PUSH
25789: LD_INT 1
25791: NEG
25792: PUSH
25793: LD_INT 3
25795: NEG
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: LD_INT 3
25806: NEG
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25828: LD_ADDR_VAR 0 12
25832: PUSH
25833: LD_INT 2
25835: PUSH
25836: LD_INT 1
25838: NEG
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 3
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 3
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: LIST
25868: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25869: LD_ADDR_VAR 0 13
25873: PUSH
25874: LD_INT 3
25876: PUSH
25877: LD_INT 2
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 3
25886: PUSH
25887: LD_INT 3
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: LD_INT 3
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: LIST
25908: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25909: LD_ADDR_VAR 0 14
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: LD_INT 3
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 3
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: NEG
25937: PUSH
25938: LD_INT 2
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: LIST
25949: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25950: LD_ADDR_VAR 0 15
25954: PUSH
25955: LD_INT 2
25957: NEG
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 3
25968: NEG
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 3
25979: NEG
25980: PUSH
25981: LD_INT 1
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: LIST
25993: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25994: LD_ADDR_VAR 0 16
25998: PUSH
25999: LD_INT 2
26001: NEG
26002: PUSH
26003: LD_INT 3
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 3
26013: NEG
26014: PUSH
26015: LD_INT 2
26017: NEG
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 3
26025: NEG
26026: PUSH
26027: LD_INT 3
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: LIST
26039: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26040: LD_ADDR_VAR 0 17
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: PUSH
26049: LD_INT 3
26051: NEG
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: LD_INT 3
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: PUSH
26071: LD_INT 2
26073: NEG
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26084: LD_ADDR_VAR 0 18
26088: PUSH
26089: LD_INT 2
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 3
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 3
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: LIST
26124: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26125: LD_ADDR_VAR 0 19
26129: PUSH
26130: LD_INT 3
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 3
26142: PUSH
26143: LD_INT 3
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 2
26152: PUSH
26153: LD_INT 3
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26165: LD_ADDR_VAR 0 20
26169: PUSH
26170: LD_INT 1
26172: PUSH
26173: LD_INT 3
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: LD_INT 3
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: LD_INT 2
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: LIST
26205: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26206: LD_ADDR_VAR 0 21
26210: PUSH
26211: LD_INT 2
26213: NEG
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 3
26224: NEG
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 3
26235: NEG
26236: PUSH
26237: LD_INT 1
26239: NEG
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26250: LD_ADDR_VAR 0 22
26254: PUSH
26255: LD_INT 2
26257: NEG
26258: PUSH
26259: LD_INT 3
26261: NEG
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 3
26269: NEG
26270: PUSH
26271: LD_INT 2
26273: NEG
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 3
26281: NEG
26282: PUSH
26283: LD_INT 3
26285: NEG
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: LIST
26295: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26296: LD_ADDR_VAR 0 23
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: LD_INT 3
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: LD_INT 4
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 1
26326: PUSH
26327: LD_INT 3
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: LIST
26339: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26340: LD_ADDR_VAR 0 24
26344: PUSH
26345: LD_INT 3
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 3
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 4
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26381: LD_ADDR_VAR 0 25
26385: PUSH
26386: LD_INT 3
26388: PUSH
26389: LD_INT 3
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 4
26398: PUSH
26399: LD_INT 3
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 3
26408: PUSH
26409: LD_INT 4
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: LIST
26420: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26421: LD_ADDR_VAR 0 26
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: LD_INT 3
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: LD_INT 4
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: LD_INT 3
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: LIST
26461: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26462: LD_ADDR_VAR 0 27
26466: PUSH
26467: LD_INT 3
26469: NEG
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 3
26480: NEG
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 4
26491: NEG
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: LIST
26505: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26506: LD_ADDR_VAR 0 28
26510: PUSH
26511: LD_INT 3
26513: NEG
26514: PUSH
26515: LD_INT 3
26517: NEG
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 3
26525: NEG
26526: PUSH
26527: LD_INT 4
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 4
26537: NEG
26538: PUSH
26539: LD_INT 3
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: LIST
26551: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26552: LD_ADDR_VAR 0 29
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: LD_INT 3
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: LD_INT 3
26574: NEG
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: LD_INT 2
26585: NEG
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: LD_INT 4
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 4
26608: NEG
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: LD_INT 3
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 1
26627: NEG
26628: PUSH
26629: LD_INT 5
26631: NEG
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: LD_INT 5
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 4
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 1
26661: NEG
26662: PUSH
26663: LD_INT 6
26665: NEG
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 0
26673: PUSH
26674: LD_INT 6
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: LD_INT 5
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
26707: LD_ADDR_VAR 0 30
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 3
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 3
26735: PUSH
26736: LD_INT 1
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 3
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 4
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 4
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 4
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 5
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 5
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 5
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 6
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 6
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
26850: LD_ADDR_VAR 0 31
26854: PUSH
26855: LD_INT 3
26857: PUSH
26858: LD_INT 2
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 3
26867: PUSH
26868: LD_INT 3
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: LD_INT 3
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 4
26887: PUSH
26888: LD_INT 3
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 4
26897: PUSH
26898: LD_INT 4
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 3
26907: PUSH
26908: LD_INT 4
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 5
26917: PUSH
26918: LD_INT 4
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 5
26927: PUSH
26928: LD_INT 5
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 4
26937: PUSH
26938: LD_INT 5
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 6
26947: PUSH
26948: LD_INT 5
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 6
26957: PUSH
26958: LD_INT 6
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 5
26967: PUSH
26968: LD_INT 6
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
26989: LD_ADDR_VAR 0 32
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: LD_INT 3
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: LD_INT 3
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: LD_INT 2
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: LD_INT 4
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 4
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: NEG
27048: PUSH
27049: LD_INT 3
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: LD_INT 5
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: LD_INT 5
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: LD_INT 4
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: LD_INT 6
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: LD_INT 6
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: NEG
27110: PUSH
27111: LD_INT 5
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27132: LD_ADDR_VAR 0 33
27136: PUSH
27137: LD_INT 2
27139: NEG
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 3
27150: NEG
27151: PUSH
27152: LD_INT 0
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 3
27161: NEG
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 3
27173: NEG
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 4
27184: NEG
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 4
27195: NEG
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 4
27207: NEG
27208: PUSH
27209: LD_INT 1
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 5
27218: NEG
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 5
27229: NEG
27230: PUSH
27231: LD_INT 1
27233: NEG
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 5
27241: NEG
27242: PUSH
27243: LD_INT 1
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 6
27252: NEG
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 6
27263: NEG
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27287: LD_ADDR_VAR 0 34
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: LD_INT 3
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 3
27306: NEG
27307: PUSH
27308: LD_INT 2
27310: NEG
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 3
27318: NEG
27319: PUSH
27320: LD_INT 3
27322: NEG
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 3
27330: NEG
27331: PUSH
27332: LD_INT 4
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 4
27342: NEG
27343: PUSH
27344: LD_INT 3
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 4
27354: NEG
27355: PUSH
27356: LD_INT 4
27358: NEG
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 4
27366: NEG
27367: PUSH
27368: LD_INT 5
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 5
27378: NEG
27379: PUSH
27380: LD_INT 4
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 5
27390: NEG
27391: PUSH
27392: LD_INT 5
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 5
27402: NEG
27403: PUSH
27404: LD_INT 6
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 6
27414: NEG
27415: PUSH
27416: LD_INT 5
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 6
27426: NEG
27427: PUSH
27428: LD_INT 6
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27450: LD_ADDR_VAR 0 41
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: LD_INT 2
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: LD_INT 3
27472: NEG
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: LIST
27493: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27494: LD_ADDR_VAR 0 42
27498: PUSH
27499: LD_INT 2
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 2
27511: PUSH
27512: LD_INT 1
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 3
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27535: LD_ADDR_VAR 0 43
27539: PUSH
27540: LD_INT 2
27542: PUSH
27543: LD_INT 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 3
27552: PUSH
27553: LD_INT 2
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 2
27562: PUSH
27563: LD_INT 3
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27575: LD_ADDR_VAR 0 44
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: LD_INT 2
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: LD_INT 3
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 1
27602: NEG
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27616: LD_ADDR_VAR 0 45
27620: PUSH
27621: LD_INT 2
27623: NEG
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: NEG
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 3
27645: NEG
27646: PUSH
27647: LD_INT 1
27649: NEG
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: LIST
27659: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27660: LD_ADDR_VAR 0 46
27664: PUSH
27665: LD_INT 2
27667: NEG
27668: PUSH
27669: LD_INT 2
27671: NEG
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: LD_INT 3
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 3
27691: NEG
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
27706: LD_ADDR_VAR 0 47
27710: PUSH
27711: LD_INT 2
27713: NEG
27714: PUSH
27715: LD_INT 3
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: LD_INT 3
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27739: LD_ADDR_VAR 0 48
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: LD_INT 2
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 2
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
27770: LD_ADDR_VAR 0 49
27774: PUSH
27775: LD_INT 3
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 3
27787: PUSH
27788: LD_INT 2
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
27799: LD_ADDR_VAR 0 50
27803: PUSH
27804: LD_INT 2
27806: PUSH
27807: LD_INT 3
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: LD_INT 3
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27828: LD_ADDR_VAR 0 51
27832: PUSH
27833: LD_INT 1
27835: NEG
27836: PUSH
27837: LD_INT 2
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 2
27846: NEG
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27859: LD_ADDR_VAR 0 52
27863: PUSH
27864: LD_INT 3
27866: NEG
27867: PUSH
27868: LD_INT 1
27870: NEG
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 3
27878: NEG
27879: PUSH
27880: LD_INT 2
27882: NEG
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27892: LD_ADDR_VAR 0 53
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: LD_INT 3
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: LD_INT 3
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: LD_INT 2
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27936: LD_ADDR_VAR 0 54
27940: PUSH
27941: LD_INT 2
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 3
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 3
27964: PUSH
27965: LD_INT 1
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27977: LD_ADDR_VAR 0 55
27981: PUSH
27982: LD_INT 3
27984: PUSH
27985: LD_INT 2
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 3
27994: PUSH
27995: LD_INT 3
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 3
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: LIST
28016: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28017: LD_ADDR_VAR 0 56
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: LD_INT 3
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: LD_INT 3
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 1
28044: NEG
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: LIST
28057: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28058: LD_ADDR_VAR 0 57
28062: PUSH
28063: LD_INT 2
28065: NEG
28066: PUSH
28067: LD_INT 1
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 3
28076: NEG
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 3
28087: NEG
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: LIST
28101: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28102: LD_ADDR_VAR 0 58
28106: PUSH
28107: LD_INT 2
28109: NEG
28110: PUSH
28111: LD_INT 3
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 3
28121: NEG
28122: PUSH
28123: LD_INT 2
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 3
28133: NEG
28134: PUSH
28135: LD_INT 3
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28148: LD_ADDR_VAR 0 59
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: LD_INT 2
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 0
28167: PUSH
28168: LD_INT 2
28170: NEG
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: LIST
28191: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28192: LD_ADDR_VAR 0 60
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 2
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28233: LD_ADDR_VAR 0 61
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: LD_INT 1
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: LD_INT 2
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: LD_INT 2
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28273: LD_ADDR_VAR 0 62
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 0
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: LIST
28313: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28314: LD_ADDR_VAR 0 63
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 2
28332: NEG
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 2
28343: NEG
28344: PUSH
28345: LD_INT 1
28347: NEG
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: LIST
28357: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28358: LD_ADDR_VAR 0 64
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: LD_INT 2
28369: NEG
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 2
28377: NEG
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: NEG
28390: PUSH
28391: LD_INT 2
28393: NEG
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: LIST
28403: ST_TO_ADDR
// end ; 2 :
28404: GO 31670
28406: LD_INT 2
28408: DOUBLE
28409: EQUAL
28410: IFTRUE 28414
28412: GO 31669
28414: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28415: LD_ADDR_VAR 0 29
28419: PUSH
28420: LD_INT 4
28422: PUSH
28423: LD_INT 0
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 4
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 5
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 5
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 4
28463: PUSH
28464: LD_INT 1
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 3
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 3
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 3
28494: PUSH
28495: LD_INT 2
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 5
28505: PUSH
28506: LD_INT 2
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 3
28515: PUSH
28516: LD_INT 3
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 3
28525: PUSH
28526: LD_INT 2
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 4
28535: PUSH
28536: LD_INT 3
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 4
28545: PUSH
28546: LD_INT 4
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 3
28555: PUSH
28556: LD_INT 4
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 2
28565: PUSH
28566: LD_INT 3
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 2
28575: PUSH
28576: LD_INT 2
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 4
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 2
28595: PUSH
28596: LD_INT 4
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 4
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 3
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: PUSH
28626: LD_INT 4
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 1
28635: PUSH
28636: LD_INT 5
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: LD_INT 5
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: LD_INT 4
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 1
28666: NEG
28667: PUSH
28668: LD_INT 3
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 2
28677: PUSH
28678: LD_INT 5
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 2
28687: NEG
28688: PUSH
28689: LD_INT 3
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 3
28698: NEG
28699: PUSH
28700: LD_INT 0
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 3
28709: NEG
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 2
28721: NEG
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 2
28732: NEG
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 3
28743: NEG
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 4
28754: NEG
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 4
28765: NEG
28766: PUSH
28767: LD_INT 1
28769: NEG
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 4
28777: NEG
28778: PUSH
28779: LD_INT 2
28781: NEG
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 2
28789: NEG
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 4
28800: NEG
28801: PUSH
28802: LD_INT 4
28804: NEG
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 4
28812: NEG
28813: PUSH
28814: LD_INT 5
28816: NEG
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 3
28824: NEG
28825: PUSH
28826: LD_INT 4
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 3
28836: NEG
28837: PUSH
28838: LD_INT 3
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 4
28848: NEG
28849: PUSH
28850: LD_INT 3
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 5
28860: NEG
28861: PUSH
28862: LD_INT 4
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 5
28872: NEG
28873: PUSH
28874: LD_INT 5
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 3
28884: NEG
28885: PUSH
28886: LD_INT 5
28888: NEG
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 5
28896: NEG
28897: PUSH
28898: LD_INT 3
28900: NEG
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
28953: LD_ADDR_VAR 0 30
28957: PUSH
28958: LD_INT 4
28960: PUSH
28961: LD_INT 4
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 4
28970: PUSH
28971: LD_INT 3
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 5
28980: PUSH
28981: LD_INT 4
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 5
28990: PUSH
28991: LD_INT 5
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 4
29000: PUSH
29001: LD_INT 5
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 3
29010: PUSH
29011: LD_INT 4
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 3
29020: PUSH
29021: LD_INT 3
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 5
29030: PUSH
29031: LD_INT 3
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 3
29040: PUSH
29041: LD_INT 5
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: LD_INT 3
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 0
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: PUSH
29071: LD_INT 3
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 4
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: LD_INT 4
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: NEG
29101: PUSH
29102: LD_INT 3
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 1
29111: NEG
29112: PUSH
29113: LD_INT 2
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 2
29122: PUSH
29123: LD_INT 4
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 2
29132: NEG
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 4
29143: NEG
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 4
29154: NEG
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 3
29166: NEG
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 3
29177: NEG
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 4
29188: NEG
29189: PUSH
29190: LD_INT 1
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 5
29199: NEG
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 5
29210: NEG
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 5
29222: NEG
29223: PUSH
29224: LD_INT 2
29226: NEG
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 3
29234: NEG
29235: PUSH
29236: LD_INT 2
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 3
29245: NEG
29246: PUSH
29247: LD_INT 3
29249: NEG
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 3
29257: NEG
29258: PUSH
29259: LD_INT 4
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: NEG
29270: PUSH
29271: LD_INT 3
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: NEG
29282: PUSH
29283: LD_INT 2
29285: NEG
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 3
29293: NEG
29294: PUSH
29295: LD_INT 2
29297: NEG
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: LD_INT 4
29305: NEG
29306: PUSH
29307: LD_INT 3
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 4
29317: NEG
29318: PUSH
29319: LD_INT 4
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 2
29329: NEG
29330: PUSH
29331: LD_INT 4
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 4
29341: NEG
29342: PUSH
29343: LD_INT 2
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: LD_INT 4
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: LD_INT 5
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: LD_INT 4
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: LD_INT 3
29389: NEG
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 0
29397: PUSH
29398: LD_INT 3
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 1
29408: NEG
29409: PUSH
29410: LD_INT 4
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: LD_INT 5
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: LD_INT 3
29435: NEG
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 2
29443: NEG
29444: PUSH
29445: LD_INT 5
29447: NEG
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29500: LD_ADDR_VAR 0 31
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: LD_INT 4
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: LD_INT 3
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: LD_INT 4
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: LD_INT 5
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: LD_INT 5
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 1
29557: NEG
29558: PUSH
29559: LD_INT 4
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 1
29568: NEG
29569: PUSH
29570: LD_INT 3
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: LD_INT 5
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 2
29589: NEG
29590: PUSH
29591: LD_INT 3
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 3
29600: NEG
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 3
29611: NEG
29612: PUSH
29613: LD_INT 1
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 2
29623: NEG
29624: PUSH
29625: LD_INT 0
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 2
29634: NEG
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 3
29645: NEG
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 4
29656: NEG
29657: PUSH
29658: LD_INT 0
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 4
29667: NEG
29668: PUSH
29669: LD_INT 1
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 4
29679: NEG
29680: PUSH
29681: LD_INT 2
29683: NEG
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 2
29691: NEG
29692: PUSH
29693: LD_INT 2
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 4
29702: NEG
29703: PUSH
29704: LD_INT 4
29706: NEG
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 4
29714: NEG
29715: PUSH
29716: LD_INT 5
29718: NEG
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 3
29726: NEG
29727: PUSH
29728: LD_INT 4
29730: NEG
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 3
29738: NEG
29739: PUSH
29740: LD_INT 3
29742: NEG
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 4
29750: NEG
29751: PUSH
29752: LD_INT 3
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 5
29762: NEG
29763: PUSH
29764: LD_INT 4
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 5
29774: NEG
29775: PUSH
29776: LD_INT 5
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 3
29786: NEG
29787: PUSH
29788: LD_INT 5
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 5
29798: NEG
29799: PUSH
29800: LD_INT 3
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: LD_INT 3
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: LD_INT 4
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: LD_INT 3
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: LD_INT 2
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 2
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: LD_INT 3
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 1
29877: NEG
29878: PUSH
29879: LD_INT 4
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 2
29889: PUSH
29890: LD_INT 2
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 2
29900: NEG
29901: PUSH
29902: LD_INT 4
29904: NEG
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 4
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 4
29922: PUSH
29923: LD_INT 1
29925: NEG
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 5
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 5
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 4
29953: PUSH
29954: LD_INT 1
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 3
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 3
29973: PUSH
29974: LD_INT 1
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: LD_INT 2
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 5
29995: PUSH
29996: LD_INT 2
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30050: LD_ADDR_VAR 0 32
30054: PUSH
30055: LD_INT 4
30057: NEG
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 4
30068: NEG
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 3
30080: NEG
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 3
30091: NEG
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 4
30102: NEG
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 5
30113: NEG
30114: PUSH
30115: LD_INT 0
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 5
30124: NEG
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 5
30136: NEG
30137: PUSH
30138: LD_INT 2
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 3
30148: NEG
30149: PUSH
30150: LD_INT 2
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 3
30159: NEG
30160: PUSH
30161: LD_INT 3
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 3
30171: NEG
30172: PUSH
30173: LD_INT 4
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 2
30183: NEG
30184: PUSH
30185: LD_INT 3
30187: NEG
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 2
30195: NEG
30196: PUSH
30197: LD_INT 2
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 3
30207: NEG
30208: PUSH
30209: LD_INT 2
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 4
30219: NEG
30220: PUSH
30221: LD_INT 3
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 4
30231: NEG
30232: PUSH
30233: LD_INT 4
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 2
30243: NEG
30244: PUSH
30245: LD_INT 4
30247: NEG
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 4
30255: NEG
30256: PUSH
30257: LD_INT 2
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: LD_INT 4
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: LD_INT 5
30281: NEG
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: LD_INT 4
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: LD_INT 3
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: LD_INT 3
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: PUSH
30324: LD_INT 4
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: LD_INT 5
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 2
30346: PUSH
30347: LD_INT 3
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: NEG
30358: PUSH
30359: LD_INT 5
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 3
30369: PUSH
30370: LD_INT 0
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 3
30379: PUSH
30380: LD_INT 1
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 4
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 4
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 3
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 2
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 2
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: LD_INT 2
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 4
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 4
30462: PUSH
30463: LD_INT 4
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 4
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 5
30482: PUSH
30483: LD_INT 4
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 5
30492: PUSH
30493: LD_INT 5
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 4
30502: PUSH
30503: LD_INT 5
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 3
30512: PUSH
30513: LD_INT 4
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 3
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 5
30532: PUSH
30533: LD_INT 3
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 3
30542: PUSH
30543: LD_INT 5
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30597: LD_ADDR_VAR 0 33
30601: PUSH
30602: LD_INT 4
30604: NEG
30605: PUSH
30606: LD_INT 4
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 4
30616: NEG
30617: PUSH
30618: LD_INT 5
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 3
30628: NEG
30629: PUSH
30630: LD_INT 4
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: LD_INT 3
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 4
30652: NEG
30653: PUSH
30654: LD_INT 3
30656: NEG
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 5
30664: NEG
30665: PUSH
30666: LD_INT 4
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 5
30676: NEG
30677: PUSH
30678: LD_INT 5
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 3
30688: NEG
30689: PUSH
30690: LD_INT 5
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 5
30700: NEG
30701: PUSH
30702: LD_INT 3
30704: NEG
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: LD_INT 3
30715: NEG
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: LD_INT 4
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: LD_INT 3
30737: NEG
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: LD_INT 2
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: LD_INT 2
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: LD_INT 3
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: LD_INT 4
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 2
30791: PUSH
30792: LD_INT 2
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: NEG
30803: PUSH
30804: LD_INT 4
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 4
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 4
30824: PUSH
30825: LD_INT 1
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 5
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 5
30845: PUSH
30846: LD_INT 1
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 4
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 3
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 3
30875: PUSH
30876: LD_INT 1
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 3
30886: PUSH
30887: LD_INT 2
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 5
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 3
30907: PUSH
30908: LD_INT 3
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 3
30917: PUSH
30918: LD_INT 2
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 4
30927: PUSH
30928: LD_INT 3
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 4
30937: PUSH
30938: LD_INT 4
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 3
30947: PUSH
30948: LD_INT 4
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 2
30957: PUSH
30958: LD_INT 3
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 2
30967: PUSH
30968: LD_INT 2
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 4
30977: PUSH
30978: LD_INT 2
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 2
30987: PUSH
30988: LD_INT 4
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 0
30997: PUSH
30998: LD_INT 4
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 0
31007: PUSH
31008: LD_INT 3
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: LD_INT 4
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: LD_INT 5
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 0
31037: PUSH
31038: LD_INT 5
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 1
31047: NEG
31048: PUSH
31049: LD_INT 4
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 1
31058: NEG
31059: PUSH
31060: LD_INT 3
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 2
31069: PUSH
31070: LD_INT 5
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 2
31079: NEG
31080: PUSH
31081: LD_INT 3
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31135: LD_ADDR_VAR 0 34
31139: PUSH
31140: LD_INT 0
31142: PUSH
31143: LD_INT 4
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: LD_INT 5
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 1
31164: PUSH
31165: LD_INT 4
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 3
31178: NEG
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: LD_INT 3
31189: NEG
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: NEG
31198: PUSH
31199: LD_INT 4
31201: NEG
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: LD_INT 5
31213: NEG
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 2
31221: PUSH
31222: LD_INT 3
31224: NEG
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 2
31232: NEG
31233: PUSH
31234: LD_INT 5
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 3
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 3
31254: PUSH
31255: LD_INT 1
31257: NEG
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 4
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 4
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 3
31285: PUSH
31286: LD_INT 1
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 2
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 2
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 2
31316: PUSH
31317: LD_INT 2
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 4
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 4
31337: PUSH
31338: LD_INT 4
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 4
31347: PUSH
31348: LD_INT 3
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 5
31357: PUSH
31358: LD_INT 4
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 5
31367: PUSH
31368: LD_INT 5
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 4
31377: PUSH
31378: LD_INT 5
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 3
31387: PUSH
31388: LD_INT 4
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 3
31397: PUSH
31398: LD_INT 3
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 5
31407: PUSH
31408: LD_INT 3
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 3
31417: PUSH
31418: LD_INT 5
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 3
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: LD_INT 3
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: LD_INT 4
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 0
31467: PUSH
31468: LD_INT 4
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: LD_INT 4
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 2
31509: NEG
31510: PUSH
31511: LD_INT 2
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 4
31520: NEG
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 4
31531: NEG
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 3
31543: NEG
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 3
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 4
31565: NEG
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 5
31576: NEG
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 5
31587: NEG
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 5
31599: NEG
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 3
31611: NEG
31612: PUSH
31613: LD_INT 2
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: ST_TO_ADDR
// end ; end ;
31667: GO 31670
31669: POP
// case btype of b_depot , b_warehouse :
31670: LD_VAR 0 1
31674: PUSH
31675: LD_INT 0
31677: DOUBLE
31678: EQUAL
31679: IFTRUE 31689
31681: LD_INT 1
31683: DOUBLE
31684: EQUAL
31685: IFTRUE 31689
31687: GO 31890
31689: POP
// case nation of nation_american :
31690: LD_VAR 0 5
31694: PUSH
31695: LD_INT 1
31697: DOUBLE
31698: EQUAL
31699: IFTRUE 31703
31701: GO 31759
31703: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
31704: LD_ADDR_VAR 0 9
31708: PUSH
31709: LD_VAR 0 11
31713: PUSH
31714: LD_VAR 0 12
31718: PUSH
31719: LD_VAR 0 13
31723: PUSH
31724: LD_VAR 0 14
31728: PUSH
31729: LD_VAR 0 15
31733: PUSH
31734: LD_VAR 0 16
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: PUSH
31747: LD_VAR 0 4
31751: PUSH
31752: LD_INT 1
31754: PLUS
31755: ARRAY
31756: ST_TO_ADDR
31757: GO 31888
31759: LD_INT 2
31761: DOUBLE
31762: EQUAL
31763: IFTRUE 31767
31765: GO 31823
31767: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
31768: LD_ADDR_VAR 0 9
31772: PUSH
31773: LD_VAR 0 17
31777: PUSH
31778: LD_VAR 0 18
31782: PUSH
31783: LD_VAR 0 19
31787: PUSH
31788: LD_VAR 0 20
31792: PUSH
31793: LD_VAR 0 21
31797: PUSH
31798: LD_VAR 0 22
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: PUSH
31811: LD_VAR 0 4
31815: PUSH
31816: LD_INT 1
31818: PLUS
31819: ARRAY
31820: ST_TO_ADDR
31821: GO 31888
31823: LD_INT 3
31825: DOUBLE
31826: EQUAL
31827: IFTRUE 31831
31829: GO 31887
31831: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
31832: LD_ADDR_VAR 0 9
31836: PUSH
31837: LD_VAR 0 23
31841: PUSH
31842: LD_VAR 0 24
31846: PUSH
31847: LD_VAR 0 25
31851: PUSH
31852: LD_VAR 0 26
31856: PUSH
31857: LD_VAR 0 27
31861: PUSH
31862: LD_VAR 0 28
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: PUSH
31875: LD_VAR 0 4
31879: PUSH
31880: LD_INT 1
31882: PLUS
31883: ARRAY
31884: ST_TO_ADDR
31885: GO 31888
31887: POP
31888: GO 32443
31890: LD_INT 2
31892: DOUBLE
31893: EQUAL
31894: IFTRUE 31904
31896: LD_INT 3
31898: DOUBLE
31899: EQUAL
31900: IFTRUE 31904
31902: GO 31960
31904: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
31905: LD_ADDR_VAR 0 9
31909: PUSH
31910: LD_VAR 0 29
31914: PUSH
31915: LD_VAR 0 30
31919: PUSH
31920: LD_VAR 0 31
31924: PUSH
31925: LD_VAR 0 32
31929: PUSH
31930: LD_VAR 0 33
31934: PUSH
31935: LD_VAR 0 34
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: PUSH
31948: LD_VAR 0 4
31952: PUSH
31953: LD_INT 1
31955: PLUS
31956: ARRAY
31957: ST_TO_ADDR
31958: GO 32443
31960: LD_INT 16
31962: DOUBLE
31963: EQUAL
31964: IFTRUE 32022
31966: LD_INT 17
31968: DOUBLE
31969: EQUAL
31970: IFTRUE 32022
31972: LD_INT 18
31974: DOUBLE
31975: EQUAL
31976: IFTRUE 32022
31978: LD_INT 19
31980: DOUBLE
31981: EQUAL
31982: IFTRUE 32022
31984: LD_INT 22
31986: DOUBLE
31987: EQUAL
31988: IFTRUE 32022
31990: LD_INT 20
31992: DOUBLE
31993: EQUAL
31994: IFTRUE 32022
31996: LD_INT 21
31998: DOUBLE
31999: EQUAL
32000: IFTRUE 32022
32002: LD_INT 23
32004: DOUBLE
32005: EQUAL
32006: IFTRUE 32022
32008: LD_INT 24
32010: DOUBLE
32011: EQUAL
32012: IFTRUE 32022
32014: LD_INT 25
32016: DOUBLE
32017: EQUAL
32018: IFTRUE 32022
32020: GO 32078
32022: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32023: LD_ADDR_VAR 0 9
32027: PUSH
32028: LD_VAR 0 35
32032: PUSH
32033: LD_VAR 0 36
32037: PUSH
32038: LD_VAR 0 37
32042: PUSH
32043: LD_VAR 0 38
32047: PUSH
32048: LD_VAR 0 39
32052: PUSH
32053: LD_VAR 0 40
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: PUSH
32066: LD_VAR 0 4
32070: PUSH
32071: LD_INT 1
32073: PLUS
32074: ARRAY
32075: ST_TO_ADDR
32076: GO 32443
32078: LD_INT 6
32080: DOUBLE
32081: EQUAL
32082: IFTRUE 32134
32084: LD_INT 7
32086: DOUBLE
32087: EQUAL
32088: IFTRUE 32134
32090: LD_INT 8
32092: DOUBLE
32093: EQUAL
32094: IFTRUE 32134
32096: LD_INT 13
32098: DOUBLE
32099: EQUAL
32100: IFTRUE 32134
32102: LD_INT 12
32104: DOUBLE
32105: EQUAL
32106: IFTRUE 32134
32108: LD_INT 15
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32134
32114: LD_INT 11
32116: DOUBLE
32117: EQUAL
32118: IFTRUE 32134
32120: LD_INT 14
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32134
32126: LD_INT 10
32128: DOUBLE
32129: EQUAL
32130: IFTRUE 32134
32132: GO 32190
32134: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32135: LD_ADDR_VAR 0 9
32139: PUSH
32140: LD_VAR 0 41
32144: PUSH
32145: LD_VAR 0 42
32149: PUSH
32150: LD_VAR 0 43
32154: PUSH
32155: LD_VAR 0 44
32159: PUSH
32160: LD_VAR 0 45
32164: PUSH
32165: LD_VAR 0 46
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: PUSH
32178: LD_VAR 0 4
32182: PUSH
32183: LD_INT 1
32185: PLUS
32186: ARRAY
32187: ST_TO_ADDR
32188: GO 32443
32190: LD_INT 36
32192: DOUBLE
32193: EQUAL
32194: IFTRUE 32198
32196: GO 32254
32198: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32199: LD_ADDR_VAR 0 9
32203: PUSH
32204: LD_VAR 0 47
32208: PUSH
32209: LD_VAR 0 48
32213: PUSH
32214: LD_VAR 0 49
32218: PUSH
32219: LD_VAR 0 50
32223: PUSH
32224: LD_VAR 0 51
32228: PUSH
32229: LD_VAR 0 52
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: PUSH
32242: LD_VAR 0 4
32246: PUSH
32247: LD_INT 1
32249: PLUS
32250: ARRAY
32251: ST_TO_ADDR
32252: GO 32443
32254: LD_INT 4
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32280
32260: LD_INT 5
32262: DOUBLE
32263: EQUAL
32264: IFTRUE 32280
32266: LD_INT 34
32268: DOUBLE
32269: EQUAL
32270: IFTRUE 32280
32272: LD_INT 37
32274: DOUBLE
32275: EQUAL
32276: IFTRUE 32280
32278: GO 32336
32280: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32281: LD_ADDR_VAR 0 9
32285: PUSH
32286: LD_VAR 0 53
32290: PUSH
32291: LD_VAR 0 54
32295: PUSH
32296: LD_VAR 0 55
32300: PUSH
32301: LD_VAR 0 56
32305: PUSH
32306: LD_VAR 0 57
32310: PUSH
32311: LD_VAR 0 58
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: PUSH
32324: LD_VAR 0 4
32328: PUSH
32329: LD_INT 1
32331: PLUS
32332: ARRAY
32333: ST_TO_ADDR
32334: GO 32443
32336: LD_INT 31
32338: DOUBLE
32339: EQUAL
32340: IFTRUE 32386
32342: LD_INT 32
32344: DOUBLE
32345: EQUAL
32346: IFTRUE 32386
32348: LD_INT 33
32350: DOUBLE
32351: EQUAL
32352: IFTRUE 32386
32354: LD_INT 27
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32386
32360: LD_INT 26
32362: DOUBLE
32363: EQUAL
32364: IFTRUE 32386
32366: LD_INT 28
32368: DOUBLE
32369: EQUAL
32370: IFTRUE 32386
32372: LD_INT 29
32374: DOUBLE
32375: EQUAL
32376: IFTRUE 32386
32378: LD_INT 30
32380: DOUBLE
32381: EQUAL
32382: IFTRUE 32386
32384: GO 32442
32386: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32387: LD_ADDR_VAR 0 9
32391: PUSH
32392: LD_VAR 0 59
32396: PUSH
32397: LD_VAR 0 60
32401: PUSH
32402: LD_VAR 0 61
32406: PUSH
32407: LD_VAR 0 62
32411: PUSH
32412: LD_VAR 0 63
32416: PUSH
32417: LD_VAR 0 64
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: PUSH
32430: LD_VAR 0 4
32434: PUSH
32435: LD_INT 1
32437: PLUS
32438: ARRAY
32439: ST_TO_ADDR
32440: GO 32443
32442: POP
// temp_list2 = [ ] ;
32443: LD_ADDR_VAR 0 10
32447: PUSH
32448: EMPTY
32449: ST_TO_ADDR
// for i in temp_list do
32450: LD_ADDR_VAR 0 8
32454: PUSH
32455: LD_VAR 0 9
32459: PUSH
32460: FOR_IN
32461: IFFALSE 32513
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32463: LD_ADDR_VAR 0 10
32467: PUSH
32468: LD_VAR 0 10
32472: PUSH
32473: LD_VAR 0 8
32477: PUSH
32478: LD_INT 1
32480: ARRAY
32481: PUSH
32482: LD_VAR 0 2
32486: PLUS
32487: PUSH
32488: LD_VAR 0 8
32492: PUSH
32493: LD_INT 2
32495: ARRAY
32496: PUSH
32497: LD_VAR 0 3
32501: PLUS
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: EMPTY
32508: LIST
32509: ADD
32510: ST_TO_ADDR
32511: GO 32460
32513: POP
32514: POP
// result = temp_list2 ;
32515: LD_ADDR_VAR 0 7
32519: PUSH
32520: LD_VAR 0 10
32524: ST_TO_ADDR
// end ;
32525: LD_VAR 0 7
32529: RET
// export function EnemyInRange ( unit , dist ) ; begin
32530: LD_INT 0
32532: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32533: LD_ADDR_VAR 0 3
32537: PUSH
32538: LD_VAR 0 1
32542: PPUSH
32543: CALL_OW 255
32547: PPUSH
32548: LD_VAR 0 1
32552: PPUSH
32553: CALL_OW 250
32557: PPUSH
32558: LD_VAR 0 1
32562: PPUSH
32563: CALL_OW 251
32567: PPUSH
32568: LD_VAR 0 2
32572: PPUSH
32573: CALL 5932 0 4
32577: PUSH
32578: LD_INT 4
32580: ARRAY
32581: ST_TO_ADDR
// end ;
32582: LD_VAR 0 3
32586: RET
// export function PlayerSeeMe ( unit ) ; begin
32587: LD_INT 0
32589: PPUSH
// result := See ( your_side , unit ) ;
32590: LD_ADDR_VAR 0 2
32594: PUSH
32595: LD_OWVAR 2
32599: PPUSH
32600: LD_VAR 0 1
32604: PPUSH
32605: CALL_OW 292
32609: ST_TO_ADDR
// end ;
32610: LD_VAR 0 2
32614: RET
// export function ReverseDir ( unit ) ; begin
32615: LD_INT 0
32617: PPUSH
// if not unit then
32618: LD_VAR 0 1
32622: NOT
32623: IFFALSE 32627
// exit ;
32625: GO 32650
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32627: LD_ADDR_VAR 0 2
32631: PUSH
32632: LD_VAR 0 1
32636: PPUSH
32637: CALL_OW 254
32641: PUSH
32642: LD_INT 3
32644: PLUS
32645: PUSH
32646: LD_INT 6
32648: MOD
32649: ST_TO_ADDR
// end ;
32650: LD_VAR 0 2
32654: RET
// export function ReverseArray ( array ) ; var i ; begin
32655: LD_INT 0
32657: PPUSH
32658: PPUSH
// if not array then
32659: LD_VAR 0 1
32663: NOT
32664: IFFALSE 32668
// exit ;
32666: GO 32723
// result := [ ] ;
32668: LD_ADDR_VAR 0 2
32672: PUSH
32673: EMPTY
32674: ST_TO_ADDR
// for i := array downto 1 do
32675: LD_ADDR_VAR 0 3
32679: PUSH
32680: DOUBLE
32681: LD_VAR 0 1
32685: INC
32686: ST_TO_ADDR
32687: LD_INT 1
32689: PUSH
32690: FOR_DOWNTO
32691: IFFALSE 32721
// result := Join ( result , array [ i ] ) ;
32693: LD_ADDR_VAR 0 2
32697: PUSH
32698: LD_VAR 0 2
32702: PPUSH
32703: LD_VAR 0 1
32707: PUSH
32708: LD_VAR 0 3
32712: ARRAY
32713: PPUSH
32714: CALL 37366 0 2
32718: ST_TO_ADDR
32719: GO 32690
32721: POP
32722: POP
// end ;
32723: LD_VAR 0 2
32727: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
32728: LD_INT 0
32730: PPUSH
32731: PPUSH
32732: PPUSH
32733: PPUSH
32734: PPUSH
32735: PPUSH
// if not unit or not hexes then
32736: LD_VAR 0 1
32740: NOT
32741: PUSH
32742: LD_VAR 0 2
32746: NOT
32747: OR
32748: IFFALSE 32752
// exit ;
32750: GO 32875
// dist := 9999 ;
32752: LD_ADDR_VAR 0 5
32756: PUSH
32757: LD_INT 9999
32759: ST_TO_ADDR
// for i = 1 to hexes do
32760: LD_ADDR_VAR 0 4
32764: PUSH
32765: DOUBLE
32766: LD_INT 1
32768: DEC
32769: ST_TO_ADDR
32770: LD_VAR 0 2
32774: PUSH
32775: FOR_TO
32776: IFFALSE 32863
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32778: LD_ADDR_VAR 0 6
32782: PUSH
32783: LD_VAR 0 1
32787: PPUSH
32788: LD_VAR 0 2
32792: PUSH
32793: LD_VAR 0 4
32797: ARRAY
32798: PUSH
32799: LD_INT 1
32801: ARRAY
32802: PPUSH
32803: LD_VAR 0 2
32807: PUSH
32808: LD_VAR 0 4
32812: ARRAY
32813: PUSH
32814: LD_INT 2
32816: ARRAY
32817: PPUSH
32818: CALL_OW 297
32822: ST_TO_ADDR
// if tdist < dist then
32823: LD_VAR 0 6
32827: PUSH
32828: LD_VAR 0 5
32832: LESS
32833: IFFALSE 32861
// begin hex := hexes [ i ] ;
32835: LD_ADDR_VAR 0 8
32839: PUSH
32840: LD_VAR 0 2
32844: PUSH
32845: LD_VAR 0 4
32849: ARRAY
32850: ST_TO_ADDR
// dist := tdist ;
32851: LD_ADDR_VAR 0 5
32855: PUSH
32856: LD_VAR 0 6
32860: ST_TO_ADDR
// end ; end ;
32861: GO 32775
32863: POP
32864: POP
// result := hex ;
32865: LD_ADDR_VAR 0 3
32869: PUSH
32870: LD_VAR 0 8
32874: ST_TO_ADDR
// end ;
32875: LD_VAR 0 3
32879: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
32880: LD_INT 0
32882: PPUSH
32883: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32884: LD_VAR 0 1
32888: NOT
32889: PUSH
32890: LD_VAR 0 1
32894: PUSH
32895: LD_INT 21
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 23
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PPUSH
32919: CALL_OW 69
32923: IN
32924: NOT
32925: OR
32926: IFFALSE 32930
// exit ;
32928: GO 32977
// for i = 1 to 3 do
32930: LD_ADDR_VAR 0 3
32934: PUSH
32935: DOUBLE
32936: LD_INT 1
32938: DEC
32939: ST_TO_ADDR
32940: LD_INT 3
32942: PUSH
32943: FOR_TO
32944: IFFALSE 32975
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
32946: LD_VAR 0 1
32950: PPUSH
32951: CALL_OW 250
32955: PPUSH
32956: LD_VAR 0 1
32960: PPUSH
32961: CALL_OW 251
32965: PPUSH
32966: LD_INT 1
32968: PPUSH
32969: CALL_OW 453
32973: GO 32943
32975: POP
32976: POP
// end ;
32977: LD_VAR 0 2
32981: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
32982: LD_INT 0
32984: PPUSH
32985: PPUSH
32986: PPUSH
32987: PPUSH
32988: PPUSH
32989: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
32990: LD_VAR 0 1
32994: NOT
32995: PUSH
32996: LD_VAR 0 2
33000: NOT
33001: OR
33002: PUSH
33003: LD_VAR 0 1
33007: PPUSH
33008: CALL_OW 314
33012: OR
33013: IFFALSE 33017
// exit ;
33015: GO 33484
// if GetLives ( i ) < 250 then
33017: LD_VAR 0 4
33021: PPUSH
33022: CALL_OW 256
33026: PUSH
33027: LD_INT 250
33029: LESS
33030: IFFALSE 33043
// begin ComAutodestruct ( i ) ;
33032: LD_VAR 0 4
33036: PPUSH
33037: CALL 32880 0 1
// exit ;
33041: GO 33484
// end ; x := GetX ( enemy_unit ) ;
33043: LD_ADDR_VAR 0 7
33047: PUSH
33048: LD_VAR 0 2
33052: PPUSH
33053: CALL_OW 250
33057: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33058: LD_ADDR_VAR 0 8
33062: PUSH
33063: LD_VAR 0 2
33067: PPUSH
33068: CALL_OW 251
33072: ST_TO_ADDR
// if not x or not y then
33073: LD_VAR 0 7
33077: NOT
33078: PUSH
33079: LD_VAR 0 8
33083: NOT
33084: OR
33085: IFFALSE 33089
// exit ;
33087: GO 33484
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33089: LD_ADDR_VAR 0 6
33093: PUSH
33094: LD_VAR 0 7
33098: PPUSH
33099: LD_INT 0
33101: PPUSH
33102: LD_INT 4
33104: PPUSH
33105: CALL_OW 272
33109: PUSH
33110: LD_VAR 0 8
33114: PPUSH
33115: LD_INT 0
33117: PPUSH
33118: LD_INT 4
33120: PPUSH
33121: CALL_OW 273
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_VAR 0 7
33134: PPUSH
33135: LD_INT 1
33137: PPUSH
33138: LD_INT 4
33140: PPUSH
33141: CALL_OW 272
33145: PUSH
33146: LD_VAR 0 8
33150: PPUSH
33151: LD_INT 1
33153: PPUSH
33154: LD_INT 4
33156: PPUSH
33157: CALL_OW 273
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_VAR 0 7
33170: PPUSH
33171: LD_INT 2
33173: PPUSH
33174: LD_INT 4
33176: PPUSH
33177: CALL_OW 272
33181: PUSH
33182: LD_VAR 0 8
33186: PPUSH
33187: LD_INT 2
33189: PPUSH
33190: LD_INT 4
33192: PPUSH
33193: CALL_OW 273
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_VAR 0 7
33206: PPUSH
33207: LD_INT 3
33209: PPUSH
33210: LD_INT 4
33212: PPUSH
33213: CALL_OW 272
33217: PUSH
33218: LD_VAR 0 8
33222: PPUSH
33223: LD_INT 3
33225: PPUSH
33226: LD_INT 4
33228: PPUSH
33229: CALL_OW 273
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_VAR 0 7
33242: PPUSH
33243: LD_INT 4
33245: PPUSH
33246: LD_INT 4
33248: PPUSH
33249: CALL_OW 272
33253: PUSH
33254: LD_VAR 0 8
33258: PPUSH
33259: LD_INT 4
33261: PPUSH
33262: LD_INT 4
33264: PPUSH
33265: CALL_OW 273
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_VAR 0 7
33278: PPUSH
33279: LD_INT 5
33281: PPUSH
33282: LD_INT 4
33284: PPUSH
33285: CALL_OW 272
33289: PUSH
33290: LD_VAR 0 8
33294: PPUSH
33295: LD_INT 5
33297: PPUSH
33298: LD_INT 4
33300: PPUSH
33301: CALL_OW 273
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: ST_TO_ADDR
// for i = tmp downto 1 do
33318: LD_ADDR_VAR 0 4
33322: PUSH
33323: DOUBLE
33324: LD_VAR 0 6
33328: INC
33329: ST_TO_ADDR
33330: LD_INT 1
33332: PUSH
33333: FOR_DOWNTO
33334: IFFALSE 33435
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33336: LD_VAR 0 6
33340: PUSH
33341: LD_VAR 0 4
33345: ARRAY
33346: PUSH
33347: LD_INT 1
33349: ARRAY
33350: PPUSH
33351: LD_VAR 0 6
33355: PUSH
33356: LD_VAR 0 4
33360: ARRAY
33361: PUSH
33362: LD_INT 2
33364: ARRAY
33365: PPUSH
33366: CALL_OW 488
33370: NOT
33371: PUSH
33372: LD_VAR 0 6
33376: PUSH
33377: LD_VAR 0 4
33381: ARRAY
33382: PUSH
33383: LD_INT 1
33385: ARRAY
33386: PPUSH
33387: LD_VAR 0 6
33391: PUSH
33392: LD_VAR 0 4
33396: ARRAY
33397: PUSH
33398: LD_INT 2
33400: ARRAY
33401: PPUSH
33402: CALL_OW 428
33406: PUSH
33407: LD_INT 0
33409: NONEQUAL
33410: OR
33411: IFFALSE 33433
// tmp := Delete ( tmp , i ) ;
33413: LD_ADDR_VAR 0 6
33417: PUSH
33418: LD_VAR 0 6
33422: PPUSH
33423: LD_VAR 0 4
33427: PPUSH
33428: CALL_OW 3
33432: ST_TO_ADDR
33433: GO 33333
33435: POP
33436: POP
// j := GetClosestHex ( unit , tmp ) ;
33437: LD_ADDR_VAR 0 5
33441: PUSH
33442: LD_VAR 0 1
33446: PPUSH
33447: LD_VAR 0 6
33451: PPUSH
33452: CALL 32728 0 2
33456: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33457: LD_VAR 0 1
33461: PPUSH
33462: LD_VAR 0 5
33466: PUSH
33467: LD_INT 1
33469: ARRAY
33470: PPUSH
33471: LD_VAR 0 5
33475: PUSH
33476: LD_INT 2
33478: ARRAY
33479: PPUSH
33480: CALL_OW 111
// end ;
33484: LD_VAR 0 3
33488: RET
// export function PrepareApemanSoldier ( ) ; begin
33489: LD_INT 0
33491: PPUSH
// uc_nation := 0 ;
33492: LD_ADDR_OWVAR 21
33496: PUSH
33497: LD_INT 0
33499: ST_TO_ADDR
// hc_sex := sex_male ;
33500: LD_ADDR_OWVAR 27
33504: PUSH
33505: LD_INT 1
33507: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
33508: LD_ADDR_OWVAR 28
33512: PUSH
33513: LD_INT 15
33515: ST_TO_ADDR
// hc_gallery :=  ;
33516: LD_ADDR_OWVAR 33
33520: PUSH
33521: LD_STRING 
33523: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33524: LD_ADDR_OWVAR 31
33528: PUSH
33529: LD_INT 0
33531: PPUSH
33532: LD_INT 3
33534: PPUSH
33535: CALL_OW 12
33539: PUSH
33540: LD_INT 0
33542: PPUSH
33543: LD_INT 3
33545: PPUSH
33546: CALL_OW 12
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: ST_TO_ADDR
// end ;
33563: LD_VAR 0 1
33567: RET
// export function PrepareApemanEngineer ( ) ; begin
33568: LD_INT 0
33570: PPUSH
// uc_nation := 0 ;
33571: LD_ADDR_OWVAR 21
33575: PUSH
33576: LD_INT 0
33578: ST_TO_ADDR
// hc_sex := sex_male ;
33579: LD_ADDR_OWVAR 27
33583: PUSH
33584: LD_INT 1
33586: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
33587: LD_ADDR_OWVAR 28
33591: PUSH
33592: LD_INT 16
33594: ST_TO_ADDR
// hc_gallery :=  ;
33595: LD_ADDR_OWVAR 33
33599: PUSH
33600: LD_STRING 
33602: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33603: LD_ADDR_OWVAR 31
33607: PUSH
33608: LD_INT 0
33610: PPUSH
33611: LD_INT 3
33613: PPUSH
33614: CALL_OW 12
33618: PUSH
33619: LD_INT 0
33621: PPUSH
33622: LD_INT 3
33624: PPUSH
33625: CALL_OW 12
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: LD_INT 0
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: ST_TO_ADDR
// end ;
33642: LD_VAR 0 1
33646: RET
// export function PrepareApeman ( agressivity ) ; begin
33647: LD_INT 0
33649: PPUSH
// uc_side := 0 ;
33650: LD_ADDR_OWVAR 20
33654: PUSH
33655: LD_INT 0
33657: ST_TO_ADDR
// uc_nation := 0 ;
33658: LD_ADDR_OWVAR 21
33662: PUSH
33663: LD_INT 0
33665: ST_TO_ADDR
// hc_sex := sex_male ;
33666: LD_ADDR_OWVAR 27
33670: PUSH
33671: LD_INT 1
33673: ST_TO_ADDR
// hc_class := class_apeman ;
33674: LD_ADDR_OWVAR 28
33678: PUSH
33679: LD_INT 12
33681: ST_TO_ADDR
// hc_gallery :=  ;
33682: LD_ADDR_OWVAR 33
33686: PUSH
33687: LD_STRING 
33689: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
33690: LD_ADDR_OWVAR 35
33694: PUSH
33695: LD_VAR 0 1
33699: NEG
33700: PPUSH
33701: LD_VAR 0 1
33705: PPUSH
33706: CALL_OW 12
33710: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
33711: LD_ADDR_OWVAR 31
33715: PUSH
33716: LD_INT 0
33718: PPUSH
33719: LD_INT 3
33721: PPUSH
33722: CALL_OW 12
33726: PUSH
33727: LD_INT 0
33729: PPUSH
33730: LD_INT 3
33732: PPUSH
33733: CALL_OW 12
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: ST_TO_ADDR
// end ;
33750: LD_VAR 0 2
33754: RET
// export function PrepareTiger ( agressivity ) ; begin
33755: LD_INT 0
33757: PPUSH
// uc_side := 0 ;
33758: LD_ADDR_OWVAR 20
33762: PUSH
33763: LD_INT 0
33765: ST_TO_ADDR
// uc_nation := 0 ;
33766: LD_ADDR_OWVAR 21
33770: PUSH
33771: LD_INT 0
33773: ST_TO_ADDR
// hc_class := class_tiger ;
33774: LD_ADDR_OWVAR 28
33778: PUSH
33779: LD_INT 14
33781: ST_TO_ADDR
// hc_gallery :=  ;
33782: LD_ADDR_OWVAR 33
33786: PUSH
33787: LD_STRING 
33789: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
33790: LD_ADDR_OWVAR 35
33794: PUSH
33795: LD_VAR 0 1
33799: NEG
33800: PPUSH
33801: LD_VAR 0 1
33805: PPUSH
33806: CALL_OW 12
33810: ST_TO_ADDR
// end ;
33811: LD_VAR 0 2
33815: RET
// export function PrepareEnchidna ( ) ; begin
33816: LD_INT 0
33818: PPUSH
// uc_side := 0 ;
33819: LD_ADDR_OWVAR 20
33823: PUSH
33824: LD_INT 0
33826: ST_TO_ADDR
// uc_nation := 0 ;
33827: LD_ADDR_OWVAR 21
33831: PUSH
33832: LD_INT 0
33834: ST_TO_ADDR
// hc_class := class_baggie ;
33835: LD_ADDR_OWVAR 28
33839: PUSH
33840: LD_INT 13
33842: ST_TO_ADDR
// hc_gallery :=  ;
33843: LD_ADDR_OWVAR 33
33847: PUSH
33848: LD_STRING 
33850: ST_TO_ADDR
// end ;
33851: LD_VAR 0 1
33855: RET
// export function PrepareFrog ( ) ; begin
33856: LD_INT 0
33858: PPUSH
// uc_side := 0 ;
33859: LD_ADDR_OWVAR 20
33863: PUSH
33864: LD_INT 0
33866: ST_TO_ADDR
// uc_nation := 0 ;
33867: LD_ADDR_OWVAR 21
33871: PUSH
33872: LD_INT 0
33874: ST_TO_ADDR
// hc_class := class_frog ;
33875: LD_ADDR_OWVAR 28
33879: PUSH
33880: LD_INT 19
33882: ST_TO_ADDR
// hc_gallery :=  ;
33883: LD_ADDR_OWVAR 33
33887: PUSH
33888: LD_STRING 
33890: ST_TO_ADDR
// end ;
33891: LD_VAR 0 1
33895: RET
// export function PrepareFish ( ) ; begin
33896: LD_INT 0
33898: PPUSH
// uc_side := 0 ;
33899: LD_ADDR_OWVAR 20
33903: PUSH
33904: LD_INT 0
33906: ST_TO_ADDR
// uc_nation := 0 ;
33907: LD_ADDR_OWVAR 21
33911: PUSH
33912: LD_INT 0
33914: ST_TO_ADDR
// hc_class := class_fish ;
33915: LD_ADDR_OWVAR 28
33919: PUSH
33920: LD_INT 20
33922: ST_TO_ADDR
// hc_gallery :=  ;
33923: LD_ADDR_OWVAR 33
33927: PUSH
33928: LD_STRING 
33930: ST_TO_ADDR
// end ;
33931: LD_VAR 0 1
33935: RET
// export function PrepareBird ( ) ; begin
33936: LD_INT 0
33938: PPUSH
// uc_side := 0 ;
33939: LD_ADDR_OWVAR 20
33943: PUSH
33944: LD_INT 0
33946: ST_TO_ADDR
// uc_nation := 0 ;
33947: LD_ADDR_OWVAR 21
33951: PUSH
33952: LD_INT 0
33954: ST_TO_ADDR
// hc_class := class_phororhacos ;
33955: LD_ADDR_OWVAR 28
33959: PUSH
33960: LD_INT 18
33962: ST_TO_ADDR
// hc_gallery :=  ;
33963: LD_ADDR_OWVAR 33
33967: PUSH
33968: LD_STRING 
33970: ST_TO_ADDR
// end ;
33971: LD_VAR 0 1
33975: RET
// export function PrepareHorse ( ) ; begin
33976: LD_INT 0
33978: PPUSH
// uc_side := 0 ;
33979: LD_ADDR_OWVAR 20
33983: PUSH
33984: LD_INT 0
33986: ST_TO_ADDR
// uc_nation := 0 ;
33987: LD_ADDR_OWVAR 21
33991: PUSH
33992: LD_INT 0
33994: ST_TO_ADDR
// hc_class := class_horse ;
33995: LD_ADDR_OWVAR 28
33999: PUSH
34000: LD_INT 21
34002: ST_TO_ADDR
// hc_gallery :=  ;
34003: LD_ADDR_OWVAR 33
34007: PUSH
34008: LD_STRING 
34010: ST_TO_ADDR
// end ;
34011: LD_VAR 0 1
34015: RET
// export function PrepareMastodont ( ) ; begin
34016: LD_INT 0
34018: PPUSH
// uc_side := 0 ;
34019: LD_ADDR_OWVAR 20
34023: PUSH
34024: LD_INT 0
34026: ST_TO_ADDR
// uc_nation := 0 ;
34027: LD_ADDR_OWVAR 21
34031: PUSH
34032: LD_INT 0
34034: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34035: LD_ADDR_OWVAR 37
34039: PUSH
34040: LD_INT 31
34042: ST_TO_ADDR
// vc_control := control_rider ;
34043: LD_ADDR_OWVAR 38
34047: PUSH
34048: LD_INT 4
34050: ST_TO_ADDR
// end ;
34051: LD_VAR 0 1
34055: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34056: LD_INT 0
34058: PPUSH
34059: PPUSH
34060: PPUSH
// uc_side = 0 ;
34061: LD_ADDR_OWVAR 20
34065: PUSH
34066: LD_INT 0
34068: ST_TO_ADDR
// uc_nation = 0 ;
34069: LD_ADDR_OWVAR 21
34073: PUSH
34074: LD_INT 0
34076: ST_TO_ADDR
// InitHc_All ( ) ;
34077: CALL_OW 584
// InitVc ;
34081: CALL_OW 20
// if mastodonts then
34085: LD_VAR 0 6
34089: IFFALSE 34156
// for i = 1 to mastodonts do
34091: LD_ADDR_VAR 0 11
34095: PUSH
34096: DOUBLE
34097: LD_INT 1
34099: DEC
34100: ST_TO_ADDR
34101: LD_VAR 0 6
34105: PUSH
34106: FOR_TO
34107: IFFALSE 34154
// begin vc_chassis := 31 ;
34109: LD_ADDR_OWVAR 37
34113: PUSH
34114: LD_INT 31
34116: ST_TO_ADDR
// vc_control := control_rider ;
34117: LD_ADDR_OWVAR 38
34121: PUSH
34122: LD_INT 4
34124: ST_TO_ADDR
// animal := CreateVehicle ;
34125: LD_ADDR_VAR 0 12
34129: PUSH
34130: CALL_OW 45
34134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34135: LD_VAR 0 12
34139: PPUSH
34140: LD_VAR 0 8
34144: PPUSH
34145: LD_INT 0
34147: PPUSH
34148: CALL 36284 0 3
// end ;
34152: GO 34106
34154: POP
34155: POP
// if horses then
34156: LD_VAR 0 5
34160: IFFALSE 34227
// for i = 1 to horses do
34162: LD_ADDR_VAR 0 11
34166: PUSH
34167: DOUBLE
34168: LD_INT 1
34170: DEC
34171: ST_TO_ADDR
34172: LD_VAR 0 5
34176: PUSH
34177: FOR_TO
34178: IFFALSE 34225
// begin hc_class := 21 ;
34180: LD_ADDR_OWVAR 28
34184: PUSH
34185: LD_INT 21
34187: ST_TO_ADDR
// hc_gallery :=  ;
34188: LD_ADDR_OWVAR 33
34192: PUSH
34193: LD_STRING 
34195: ST_TO_ADDR
// animal := CreateHuman ;
34196: LD_ADDR_VAR 0 12
34200: PUSH
34201: CALL_OW 44
34205: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34206: LD_VAR 0 12
34210: PPUSH
34211: LD_VAR 0 8
34215: PPUSH
34216: LD_INT 0
34218: PPUSH
34219: CALL 36284 0 3
// end ;
34223: GO 34177
34225: POP
34226: POP
// if birds then
34227: LD_VAR 0 1
34231: IFFALSE 34298
// for i = 1 to birds do
34233: LD_ADDR_VAR 0 11
34237: PUSH
34238: DOUBLE
34239: LD_INT 1
34241: DEC
34242: ST_TO_ADDR
34243: LD_VAR 0 1
34247: PUSH
34248: FOR_TO
34249: IFFALSE 34296
// begin hc_class = 18 ;
34251: LD_ADDR_OWVAR 28
34255: PUSH
34256: LD_INT 18
34258: ST_TO_ADDR
// hc_gallery =  ;
34259: LD_ADDR_OWVAR 33
34263: PUSH
34264: LD_STRING 
34266: ST_TO_ADDR
// animal := CreateHuman ;
34267: LD_ADDR_VAR 0 12
34271: PUSH
34272: CALL_OW 44
34276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34277: LD_VAR 0 12
34281: PPUSH
34282: LD_VAR 0 8
34286: PPUSH
34287: LD_INT 0
34289: PPUSH
34290: CALL 36284 0 3
// end ;
34294: GO 34248
34296: POP
34297: POP
// if tigers then
34298: LD_VAR 0 2
34302: IFFALSE 34386
// for i = 1 to tigers do
34304: LD_ADDR_VAR 0 11
34308: PUSH
34309: DOUBLE
34310: LD_INT 1
34312: DEC
34313: ST_TO_ADDR
34314: LD_VAR 0 2
34318: PUSH
34319: FOR_TO
34320: IFFALSE 34384
// begin hc_class = class_tiger ;
34322: LD_ADDR_OWVAR 28
34326: PUSH
34327: LD_INT 14
34329: ST_TO_ADDR
// hc_gallery =  ;
34330: LD_ADDR_OWVAR 33
34334: PUSH
34335: LD_STRING 
34337: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34338: LD_ADDR_OWVAR 35
34342: PUSH
34343: LD_INT 7
34345: NEG
34346: PPUSH
34347: LD_INT 7
34349: PPUSH
34350: CALL_OW 12
34354: ST_TO_ADDR
// animal := CreateHuman ;
34355: LD_ADDR_VAR 0 12
34359: PUSH
34360: CALL_OW 44
34364: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34365: LD_VAR 0 12
34369: PPUSH
34370: LD_VAR 0 8
34374: PPUSH
34375: LD_INT 0
34377: PPUSH
34378: CALL 36284 0 3
// end ;
34382: GO 34319
34384: POP
34385: POP
// if apemans then
34386: LD_VAR 0 3
34390: IFFALSE 34513
// for i = 1 to apemans do
34392: LD_ADDR_VAR 0 11
34396: PUSH
34397: DOUBLE
34398: LD_INT 1
34400: DEC
34401: ST_TO_ADDR
34402: LD_VAR 0 3
34406: PUSH
34407: FOR_TO
34408: IFFALSE 34511
// begin hc_class = class_apeman ;
34410: LD_ADDR_OWVAR 28
34414: PUSH
34415: LD_INT 12
34417: ST_TO_ADDR
// hc_gallery =  ;
34418: LD_ADDR_OWVAR 33
34422: PUSH
34423: LD_STRING 
34425: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34426: LD_ADDR_OWVAR 35
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PPUSH
34435: LD_INT 2
34437: PPUSH
34438: CALL_OW 12
34442: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34443: LD_ADDR_OWVAR 31
34447: PUSH
34448: LD_INT 1
34450: PPUSH
34451: LD_INT 3
34453: PPUSH
34454: CALL_OW 12
34458: PUSH
34459: LD_INT 1
34461: PPUSH
34462: LD_INT 3
34464: PPUSH
34465: CALL_OW 12
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: ST_TO_ADDR
// animal := CreateHuman ;
34482: LD_ADDR_VAR 0 12
34486: PUSH
34487: CALL_OW 44
34491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34492: LD_VAR 0 12
34496: PPUSH
34497: LD_VAR 0 8
34501: PPUSH
34502: LD_INT 0
34504: PPUSH
34505: CALL 36284 0 3
// end ;
34509: GO 34407
34511: POP
34512: POP
// if enchidnas then
34513: LD_VAR 0 4
34517: IFFALSE 34584
// for i = 1 to enchidnas do
34519: LD_ADDR_VAR 0 11
34523: PUSH
34524: DOUBLE
34525: LD_INT 1
34527: DEC
34528: ST_TO_ADDR
34529: LD_VAR 0 4
34533: PUSH
34534: FOR_TO
34535: IFFALSE 34582
// begin hc_class = 13 ;
34537: LD_ADDR_OWVAR 28
34541: PUSH
34542: LD_INT 13
34544: ST_TO_ADDR
// hc_gallery =  ;
34545: LD_ADDR_OWVAR 33
34549: PUSH
34550: LD_STRING 
34552: ST_TO_ADDR
// animal := CreateHuman ;
34553: LD_ADDR_VAR 0 12
34557: PUSH
34558: CALL_OW 44
34562: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34563: LD_VAR 0 12
34567: PPUSH
34568: LD_VAR 0 8
34572: PPUSH
34573: LD_INT 0
34575: PPUSH
34576: CALL 36284 0 3
// end ;
34580: GO 34534
34582: POP
34583: POP
// if fishes then
34584: LD_VAR 0 7
34588: IFFALSE 34655
// for i = 1 to fishes do
34590: LD_ADDR_VAR 0 11
34594: PUSH
34595: DOUBLE
34596: LD_INT 1
34598: DEC
34599: ST_TO_ADDR
34600: LD_VAR 0 7
34604: PUSH
34605: FOR_TO
34606: IFFALSE 34653
// begin hc_class = 20 ;
34608: LD_ADDR_OWVAR 28
34612: PUSH
34613: LD_INT 20
34615: ST_TO_ADDR
// hc_gallery =  ;
34616: LD_ADDR_OWVAR 33
34620: PUSH
34621: LD_STRING 
34623: ST_TO_ADDR
// animal := CreateHuman ;
34624: LD_ADDR_VAR 0 12
34628: PUSH
34629: CALL_OW 44
34633: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
34634: LD_VAR 0 12
34638: PPUSH
34639: LD_VAR 0 9
34643: PPUSH
34644: LD_INT 0
34646: PPUSH
34647: CALL 36284 0 3
// end ;
34651: GO 34605
34653: POP
34654: POP
// end ;
34655: LD_VAR 0 10
34659: RET
// export function WantHeal ( sci , unit ) ; begin
34660: LD_INT 0
34662: PPUSH
// if GetTaskList ( sci ) > 0 then
34663: LD_VAR 0 1
34667: PPUSH
34668: CALL_OW 437
34672: PUSH
34673: LD_INT 0
34675: GREATER
34676: IFFALSE 34746
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
34678: LD_VAR 0 1
34682: PPUSH
34683: CALL_OW 437
34687: PUSH
34688: LD_INT 1
34690: ARRAY
34691: PUSH
34692: LD_INT 1
34694: ARRAY
34695: PUSH
34696: LD_STRING l
34698: EQUAL
34699: PUSH
34700: LD_VAR 0 1
34704: PPUSH
34705: CALL_OW 437
34709: PUSH
34710: LD_INT 1
34712: ARRAY
34713: PUSH
34714: LD_INT 4
34716: ARRAY
34717: PUSH
34718: LD_VAR 0 2
34722: EQUAL
34723: AND
34724: IFFALSE 34736
// result := true else
34726: LD_ADDR_VAR 0 3
34730: PUSH
34731: LD_INT 1
34733: ST_TO_ADDR
34734: GO 34744
// result := false ;
34736: LD_ADDR_VAR 0 3
34740: PUSH
34741: LD_INT 0
34743: ST_TO_ADDR
// end else
34744: GO 34754
// result := false ;
34746: LD_ADDR_VAR 0 3
34750: PUSH
34751: LD_INT 0
34753: ST_TO_ADDR
// end ;
34754: LD_VAR 0 3
34758: RET
// export function HealTarget ( sci ) ; begin
34759: LD_INT 0
34761: PPUSH
// if not sci then
34762: LD_VAR 0 1
34766: NOT
34767: IFFALSE 34771
// exit ;
34769: GO 34836
// result := 0 ;
34771: LD_ADDR_VAR 0 2
34775: PUSH
34776: LD_INT 0
34778: ST_TO_ADDR
// if GetTaskList ( sci ) then
34779: LD_VAR 0 1
34783: PPUSH
34784: CALL_OW 437
34788: IFFALSE 34836
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
34790: LD_VAR 0 1
34794: PPUSH
34795: CALL_OW 437
34799: PUSH
34800: LD_INT 1
34802: ARRAY
34803: PUSH
34804: LD_INT 1
34806: ARRAY
34807: PUSH
34808: LD_STRING l
34810: EQUAL
34811: IFFALSE 34836
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
34813: LD_ADDR_VAR 0 2
34817: PUSH
34818: LD_VAR 0 1
34822: PPUSH
34823: CALL_OW 437
34827: PUSH
34828: LD_INT 1
34830: ARRAY
34831: PUSH
34832: LD_INT 4
34834: ARRAY
34835: ST_TO_ADDR
// end ;
34836: LD_VAR 0 2
34840: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
34841: LD_INT 0
34843: PPUSH
34844: PPUSH
34845: PPUSH
34846: PPUSH
// if not base_units then
34847: LD_VAR 0 1
34851: NOT
34852: IFFALSE 34856
// exit ;
34854: GO 34943
// result := false ;
34856: LD_ADDR_VAR 0 2
34860: PUSH
34861: LD_INT 0
34863: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
34864: LD_ADDR_VAR 0 5
34868: PUSH
34869: LD_VAR 0 1
34873: PPUSH
34874: LD_INT 21
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PPUSH
34884: CALL_OW 72
34888: ST_TO_ADDR
// if not tmp then
34889: LD_VAR 0 5
34893: NOT
34894: IFFALSE 34898
// exit ;
34896: GO 34943
// for i in tmp do
34898: LD_ADDR_VAR 0 3
34902: PUSH
34903: LD_VAR 0 5
34907: PUSH
34908: FOR_IN
34909: IFFALSE 34941
// begin result := EnemyInRange ( i , 22 ) ;
34911: LD_ADDR_VAR 0 2
34915: PUSH
34916: LD_VAR 0 3
34920: PPUSH
34921: LD_INT 22
34923: PPUSH
34924: CALL 32530 0 2
34928: ST_TO_ADDR
// if result then
34929: LD_VAR 0 2
34933: IFFALSE 34939
// exit ;
34935: POP
34936: POP
34937: GO 34943
// end ;
34939: GO 34908
34941: POP
34942: POP
// end ;
34943: LD_VAR 0 2
34947: RET
// export function FilterByTag ( units , tag ) ; begin
34948: LD_INT 0
34950: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
34951: LD_ADDR_VAR 0 3
34955: PUSH
34956: LD_VAR 0 1
34960: PPUSH
34961: LD_INT 120
34963: PUSH
34964: LD_VAR 0 2
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PPUSH
34973: CALL_OW 72
34977: ST_TO_ADDR
// end ;
34978: LD_VAR 0 3
34982: RET
// export function IsDriver ( un ) ; begin
34983: LD_INT 0
34985: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
34986: LD_ADDR_VAR 0 2
34990: PUSH
34991: LD_VAR 0 1
34995: PUSH
34996: LD_INT 55
34998: PUSH
34999: EMPTY
35000: LIST
35001: PPUSH
35002: CALL_OW 69
35006: IN
35007: ST_TO_ADDR
// end ;
35008: LD_VAR 0 2
35012: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35013: LD_INT 0
35015: PPUSH
35016: PPUSH
// list := [ ] ;
35017: LD_ADDR_VAR 0 5
35021: PUSH
35022: EMPTY
35023: ST_TO_ADDR
// case d of 0 :
35024: LD_VAR 0 3
35028: PUSH
35029: LD_INT 0
35031: DOUBLE
35032: EQUAL
35033: IFTRUE 35037
35035: GO 35170
35037: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35038: LD_ADDR_VAR 0 5
35042: PUSH
35043: LD_VAR 0 1
35047: PUSH
35048: LD_INT 4
35050: MINUS
35051: PUSH
35052: LD_VAR 0 2
35056: PUSH
35057: LD_INT 4
35059: MINUS
35060: PUSH
35061: LD_INT 2
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: LIST
35068: PUSH
35069: LD_VAR 0 1
35073: PUSH
35074: LD_INT 3
35076: MINUS
35077: PUSH
35078: LD_VAR 0 2
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: LIST
35090: PUSH
35091: LD_VAR 0 1
35095: PUSH
35096: LD_INT 4
35098: PLUS
35099: PUSH
35100: LD_VAR 0 2
35104: PUSH
35105: LD_INT 4
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: LIST
35112: PUSH
35113: LD_VAR 0 1
35117: PUSH
35118: LD_INT 3
35120: PLUS
35121: PUSH
35122: LD_VAR 0 2
35126: PUSH
35127: LD_INT 3
35129: PLUS
35130: PUSH
35131: LD_INT 5
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: LIST
35138: PUSH
35139: LD_VAR 0 1
35143: PUSH
35144: LD_VAR 0 2
35148: PUSH
35149: LD_INT 4
35151: PLUS
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: ST_TO_ADDR
// end ; 1 :
35168: GO 35868
35170: LD_INT 1
35172: DOUBLE
35173: EQUAL
35174: IFTRUE 35178
35176: GO 35311
35178: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35179: LD_ADDR_VAR 0 5
35183: PUSH
35184: LD_VAR 0 1
35188: PUSH
35189: LD_VAR 0 2
35193: PUSH
35194: LD_INT 4
35196: MINUS
35197: PUSH
35198: LD_INT 3
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: LIST
35205: PUSH
35206: LD_VAR 0 1
35210: PUSH
35211: LD_INT 3
35213: MINUS
35214: PUSH
35215: LD_VAR 0 2
35219: PUSH
35220: LD_INT 3
35222: MINUS
35223: PUSH
35224: LD_INT 2
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: LIST
35231: PUSH
35232: LD_VAR 0 1
35236: PUSH
35237: LD_INT 4
35239: MINUS
35240: PUSH
35241: LD_VAR 0 2
35245: PUSH
35246: LD_INT 1
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: LIST
35253: PUSH
35254: LD_VAR 0 1
35258: PUSH
35259: LD_VAR 0 2
35263: PUSH
35264: LD_INT 3
35266: PLUS
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: PUSH
35276: LD_VAR 0 1
35280: PUSH
35281: LD_INT 4
35283: PLUS
35284: PUSH
35285: LD_VAR 0 2
35289: PUSH
35290: LD_INT 4
35292: PLUS
35293: PUSH
35294: LD_INT 5
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: LIST
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: ST_TO_ADDR
// end ; 2 :
35309: GO 35868
35311: LD_INT 2
35313: DOUBLE
35314: EQUAL
35315: IFTRUE 35319
35317: GO 35448
35319: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35320: LD_ADDR_VAR 0 5
35324: PUSH
35325: LD_VAR 0 1
35329: PUSH
35330: LD_VAR 0 2
35334: PUSH
35335: LD_INT 3
35337: MINUS
35338: PUSH
35339: LD_INT 3
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: PUSH
35347: LD_VAR 0 1
35351: PUSH
35352: LD_INT 4
35354: PLUS
35355: PUSH
35356: LD_VAR 0 2
35360: PUSH
35361: LD_INT 4
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: PUSH
35369: LD_VAR 0 1
35373: PUSH
35374: LD_VAR 0 2
35378: PUSH
35379: LD_INT 4
35381: PLUS
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: LIST
35390: PUSH
35391: LD_VAR 0 1
35395: PUSH
35396: LD_INT 3
35398: MINUS
35399: PUSH
35400: LD_VAR 0 2
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: PUSH
35413: LD_VAR 0 1
35417: PUSH
35418: LD_INT 4
35420: MINUS
35421: PUSH
35422: LD_VAR 0 2
35426: PUSH
35427: LD_INT 4
35429: MINUS
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: LIST
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: ST_TO_ADDR
// end ; 3 :
35446: GO 35868
35448: LD_INT 3
35450: DOUBLE
35451: EQUAL
35452: IFTRUE 35456
35454: GO 35589
35456: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35457: LD_ADDR_VAR 0 5
35461: PUSH
35462: LD_VAR 0 1
35466: PUSH
35467: LD_INT 3
35469: PLUS
35470: PUSH
35471: LD_VAR 0 2
35475: PUSH
35476: LD_INT 4
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: LIST
35483: PUSH
35484: LD_VAR 0 1
35488: PUSH
35489: LD_INT 4
35491: PLUS
35492: PUSH
35493: LD_VAR 0 2
35497: PUSH
35498: LD_INT 4
35500: PLUS
35501: PUSH
35502: LD_INT 5
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: LIST
35509: PUSH
35510: LD_VAR 0 1
35514: PUSH
35515: LD_INT 4
35517: MINUS
35518: PUSH
35519: LD_VAR 0 2
35523: PUSH
35524: LD_INT 1
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: PUSH
35532: LD_VAR 0 1
35536: PUSH
35537: LD_VAR 0 2
35541: PUSH
35542: LD_INT 4
35544: MINUS
35545: PUSH
35546: LD_INT 3
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: PUSH
35554: LD_VAR 0 1
35558: PUSH
35559: LD_INT 3
35561: MINUS
35562: PUSH
35563: LD_VAR 0 2
35567: PUSH
35568: LD_INT 3
35570: MINUS
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: LIST
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: ST_TO_ADDR
// end ; 4 :
35587: GO 35868
35589: LD_INT 4
35591: DOUBLE
35592: EQUAL
35593: IFTRUE 35597
35595: GO 35730
35597: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35598: LD_ADDR_VAR 0 5
35602: PUSH
35603: LD_VAR 0 1
35607: PUSH
35608: LD_VAR 0 2
35612: PUSH
35613: LD_INT 4
35615: PLUS
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: PUSH
35625: LD_VAR 0 1
35629: PUSH
35630: LD_INT 3
35632: PLUS
35633: PUSH
35634: LD_VAR 0 2
35638: PUSH
35639: LD_INT 3
35641: PLUS
35642: PUSH
35643: LD_INT 5
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: PUSH
35651: LD_VAR 0 1
35655: PUSH
35656: LD_INT 4
35658: PLUS
35659: PUSH
35660: LD_VAR 0 2
35664: PUSH
35665: LD_INT 4
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: PUSH
35673: LD_VAR 0 1
35677: PUSH
35678: LD_VAR 0 2
35682: PUSH
35683: LD_INT 3
35685: MINUS
35686: PUSH
35687: LD_INT 3
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: PUSH
35695: LD_VAR 0 1
35699: PUSH
35700: LD_INT 4
35702: MINUS
35703: PUSH
35704: LD_VAR 0 2
35708: PUSH
35709: LD_INT 4
35711: MINUS
35712: PUSH
35713: LD_INT 2
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: ST_TO_ADDR
// end ; 5 :
35728: GO 35868
35730: LD_INT 5
35732: DOUBLE
35733: EQUAL
35734: IFTRUE 35738
35736: GO 35867
35738: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
35739: LD_ADDR_VAR 0 5
35743: PUSH
35744: LD_VAR 0 1
35748: PUSH
35749: LD_INT 4
35751: MINUS
35752: PUSH
35753: LD_VAR 0 2
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: PUSH
35766: LD_VAR 0 1
35770: PUSH
35771: LD_VAR 0 2
35775: PUSH
35776: LD_INT 4
35778: MINUS
35779: PUSH
35780: LD_INT 3
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: PUSH
35788: LD_VAR 0 1
35792: PUSH
35793: LD_INT 4
35795: PLUS
35796: PUSH
35797: LD_VAR 0 2
35801: PUSH
35802: LD_INT 4
35804: PLUS
35805: PUSH
35806: LD_INT 5
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: PUSH
35814: LD_VAR 0 1
35818: PUSH
35819: LD_INT 3
35821: PLUS
35822: PUSH
35823: LD_VAR 0 2
35827: PUSH
35828: LD_INT 4
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: PUSH
35836: LD_VAR 0 1
35840: PUSH
35841: LD_VAR 0 2
35845: PUSH
35846: LD_INT 3
35848: PLUS
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: LIST
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: ST_TO_ADDR
// end ; end ;
35865: GO 35868
35867: POP
// result := list ;
35868: LD_ADDR_VAR 0 4
35872: PUSH
35873: LD_VAR 0 5
35877: ST_TO_ADDR
// end ;
35878: LD_VAR 0 4
35882: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
35883: LD_INT 0
35885: PPUSH
35886: PPUSH
35887: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
35888: LD_VAR 0 1
35892: NOT
35893: PUSH
35894: LD_VAR 0 2
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: LD_INT 2
35904: PUSH
35905: LD_INT 3
35907: PUSH
35908: LD_INT 4
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: IN
35917: NOT
35918: OR
35919: IFFALSE 35923
// exit ;
35921: GO 36006
// tmp := [ ] ;
35923: LD_ADDR_VAR 0 5
35927: PUSH
35928: EMPTY
35929: ST_TO_ADDR
// for i in units do
35930: LD_ADDR_VAR 0 4
35934: PUSH
35935: LD_VAR 0 1
35939: PUSH
35940: FOR_IN
35941: IFFALSE 35975
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
35943: LD_ADDR_VAR 0 5
35947: PUSH
35948: LD_VAR 0 5
35952: PPUSH
35953: LD_VAR 0 4
35957: PPUSH
35958: LD_VAR 0 2
35962: PPUSH
35963: CALL_OW 259
35967: PPUSH
35968: CALL 37366 0 2
35972: ST_TO_ADDR
35973: GO 35940
35975: POP
35976: POP
// if not tmp then
35977: LD_VAR 0 5
35981: NOT
35982: IFFALSE 35986
// exit ;
35984: GO 36006
// result := SortListByListDesc ( units , tmp ) ;
35986: LD_ADDR_VAR 0 3
35990: PUSH
35991: LD_VAR 0 1
35995: PPUSH
35996: LD_VAR 0 5
36000: PPUSH
36001: CALL_OW 77
36005: ST_TO_ADDR
// end ;
36006: LD_VAR 0 3
36010: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36011: LD_INT 0
36013: PPUSH
36014: PPUSH
36015: PPUSH
// result := false ;
36016: LD_ADDR_VAR 0 3
36020: PUSH
36021: LD_INT 0
36023: ST_TO_ADDR
// if not building then
36024: LD_VAR 0 2
36028: NOT
36029: IFFALSE 36033
// exit ;
36031: GO 36171
// x := GetX ( building ) ;
36033: LD_ADDR_VAR 0 4
36037: PUSH
36038: LD_VAR 0 2
36042: PPUSH
36043: CALL_OW 250
36047: ST_TO_ADDR
// y := GetY ( building ) ;
36048: LD_ADDR_VAR 0 5
36052: PUSH
36053: LD_VAR 0 2
36057: PPUSH
36058: CALL_OW 251
36062: ST_TO_ADDR
// if not x or not y then
36063: LD_VAR 0 4
36067: NOT
36068: PUSH
36069: LD_VAR 0 5
36073: NOT
36074: OR
36075: IFFALSE 36079
// exit ;
36077: GO 36171
// if GetTaskList ( unit ) then
36079: LD_VAR 0 1
36083: PPUSH
36084: CALL_OW 437
36088: IFFALSE 36171
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36090: LD_STRING e
36092: PUSH
36093: LD_VAR 0 1
36097: PPUSH
36098: CALL_OW 437
36102: PUSH
36103: LD_INT 1
36105: ARRAY
36106: PUSH
36107: LD_INT 1
36109: ARRAY
36110: EQUAL
36111: PUSH
36112: LD_VAR 0 4
36116: PUSH
36117: LD_VAR 0 1
36121: PPUSH
36122: CALL_OW 437
36126: PUSH
36127: LD_INT 1
36129: ARRAY
36130: PUSH
36131: LD_INT 2
36133: ARRAY
36134: EQUAL
36135: AND
36136: PUSH
36137: LD_VAR 0 5
36141: PUSH
36142: LD_VAR 0 1
36146: PPUSH
36147: CALL_OW 437
36151: PUSH
36152: LD_INT 1
36154: ARRAY
36155: PUSH
36156: LD_INT 3
36158: ARRAY
36159: EQUAL
36160: AND
36161: IFFALSE 36171
// result := true end ;
36163: LD_ADDR_VAR 0 3
36167: PUSH
36168: LD_INT 1
36170: ST_TO_ADDR
// end ;
36171: LD_VAR 0 3
36175: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36176: LD_INT 0
36178: PPUSH
// result := false ;
36179: LD_ADDR_VAR 0 4
36183: PUSH
36184: LD_INT 0
36186: ST_TO_ADDR
// if GetTaskList ( unit ) then
36187: LD_VAR 0 1
36191: PPUSH
36192: CALL_OW 437
36196: IFFALSE 36279
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36198: LD_STRING M
36200: PUSH
36201: LD_VAR 0 1
36205: PPUSH
36206: CALL_OW 437
36210: PUSH
36211: LD_INT 1
36213: ARRAY
36214: PUSH
36215: LD_INT 1
36217: ARRAY
36218: EQUAL
36219: PUSH
36220: LD_VAR 0 2
36224: PUSH
36225: LD_VAR 0 1
36229: PPUSH
36230: CALL_OW 437
36234: PUSH
36235: LD_INT 1
36237: ARRAY
36238: PUSH
36239: LD_INT 2
36241: ARRAY
36242: EQUAL
36243: AND
36244: PUSH
36245: LD_VAR 0 3
36249: PUSH
36250: LD_VAR 0 1
36254: PPUSH
36255: CALL_OW 437
36259: PUSH
36260: LD_INT 1
36262: ARRAY
36263: PUSH
36264: LD_INT 3
36266: ARRAY
36267: EQUAL
36268: AND
36269: IFFALSE 36279
// result := true ;
36271: LD_ADDR_VAR 0 4
36275: PUSH
36276: LD_INT 1
36278: ST_TO_ADDR
// end ; end ;
36279: LD_VAR 0 4
36283: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36284: LD_INT 0
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
// if not unit or not area then
36290: LD_VAR 0 1
36294: NOT
36295: PUSH
36296: LD_VAR 0 2
36300: NOT
36301: OR
36302: IFFALSE 36306
// exit ;
36304: GO 36469
// tmp := AreaToList ( area , i ) ;
36306: LD_ADDR_VAR 0 6
36310: PUSH
36311: LD_VAR 0 2
36315: PPUSH
36316: LD_VAR 0 5
36320: PPUSH
36321: CALL_OW 517
36325: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36326: LD_ADDR_VAR 0 5
36330: PUSH
36331: DOUBLE
36332: LD_INT 1
36334: DEC
36335: ST_TO_ADDR
36336: LD_VAR 0 6
36340: PUSH
36341: LD_INT 1
36343: ARRAY
36344: PUSH
36345: FOR_TO
36346: IFFALSE 36467
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36348: LD_ADDR_VAR 0 7
36352: PUSH
36353: LD_VAR 0 6
36357: PUSH
36358: LD_INT 1
36360: ARRAY
36361: PUSH
36362: LD_VAR 0 5
36366: ARRAY
36367: PUSH
36368: LD_VAR 0 6
36372: PUSH
36373: LD_INT 2
36375: ARRAY
36376: PUSH
36377: LD_VAR 0 5
36381: ARRAY
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
36387: LD_INT 92
36389: PUSH
36390: LD_VAR 0 7
36394: PUSH
36395: LD_INT 1
36397: ARRAY
36398: PUSH
36399: LD_VAR 0 7
36403: PUSH
36404: LD_INT 2
36406: ARRAY
36407: PUSH
36408: LD_INT 3
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: PPUSH
36417: CALL_OW 69
36421: PUSH
36422: LD_INT 0
36424: EQUAL
36425: IFFALSE 36465
// begin PlaceUnitArea ( unit , area , mode ) ;
36427: LD_VAR 0 1
36431: PPUSH
36432: LD_VAR 0 2
36436: PPUSH
36437: LD_VAR 0 3
36441: PPUSH
36442: CALL_OW 49
// result := IsPlaced ( unit ) ;
36446: LD_ADDR_VAR 0 4
36450: PUSH
36451: LD_VAR 0 1
36455: PPUSH
36456: CALL_OW 305
36460: ST_TO_ADDR
// exit ;
36461: POP
36462: POP
36463: GO 36469
// end ; end ;
36465: GO 36345
36467: POP
36468: POP
// end ;
36469: LD_VAR 0 4
36473: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36474: LD_INT 0
36476: PPUSH
36477: PPUSH
36478: PPUSH
// if not side or side > 8 then
36479: LD_VAR 0 1
36483: NOT
36484: PUSH
36485: LD_VAR 0 1
36489: PUSH
36490: LD_INT 8
36492: GREATER
36493: OR
36494: IFFALSE 36498
// exit ;
36496: GO 36685
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36498: LD_ADDR_VAR 0 4
36502: PUSH
36503: LD_INT 22
36505: PUSH
36506: LD_VAR 0 1
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 21
36517: PUSH
36518: LD_INT 3
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PPUSH
36529: CALL_OW 69
36533: ST_TO_ADDR
// if not tmp then
36534: LD_VAR 0 4
36538: NOT
36539: IFFALSE 36543
// exit ;
36541: GO 36685
// enable_addtolog := true ;
36543: LD_ADDR_OWVAR 81
36547: PUSH
36548: LD_INT 1
36550: ST_TO_ADDR
// AddToLog ( [ ) ;
36551: LD_STRING [
36553: PPUSH
36554: CALL_OW 561
// for i in tmp do
36558: LD_ADDR_VAR 0 3
36562: PUSH
36563: LD_VAR 0 4
36567: PUSH
36568: FOR_IN
36569: IFFALSE 36676
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36571: LD_STRING [
36573: PUSH
36574: LD_VAR 0 3
36578: PPUSH
36579: CALL_OW 266
36583: STR
36584: PUSH
36585: LD_STRING , 
36587: STR
36588: PUSH
36589: LD_VAR 0 3
36593: PPUSH
36594: CALL_OW 250
36598: STR
36599: PUSH
36600: LD_STRING , 
36602: STR
36603: PUSH
36604: LD_VAR 0 3
36608: PPUSH
36609: CALL_OW 251
36613: STR
36614: PUSH
36615: LD_STRING , 
36617: STR
36618: PUSH
36619: LD_VAR 0 3
36623: PPUSH
36624: CALL_OW 254
36628: STR
36629: PUSH
36630: LD_STRING , 
36632: STR
36633: PUSH
36634: LD_VAR 0 3
36638: PPUSH
36639: LD_INT 1
36641: PPUSH
36642: CALL_OW 268
36646: STR
36647: PUSH
36648: LD_STRING , 
36650: STR
36651: PUSH
36652: LD_VAR 0 3
36656: PPUSH
36657: LD_INT 2
36659: PPUSH
36660: CALL_OW 268
36664: STR
36665: PUSH
36666: LD_STRING ],
36668: STR
36669: PPUSH
36670: CALL_OW 561
// end ;
36674: GO 36568
36676: POP
36677: POP
// AddToLog ( ]; ) ;
36678: LD_STRING ];
36680: PPUSH
36681: CALL_OW 561
// end ;
36685: LD_VAR 0 2
36689: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
36690: LD_INT 0
36692: PPUSH
36693: PPUSH
36694: PPUSH
36695: PPUSH
36696: PPUSH
// if not area or not rate or not max then
36697: LD_VAR 0 1
36701: NOT
36702: PUSH
36703: LD_VAR 0 2
36707: NOT
36708: OR
36709: PUSH
36710: LD_VAR 0 4
36714: NOT
36715: OR
36716: IFFALSE 36720
// exit ;
36718: GO 36909
// while 1 do
36720: LD_INT 1
36722: IFFALSE 36909
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
36724: LD_ADDR_VAR 0 9
36728: PUSH
36729: LD_VAR 0 1
36733: PPUSH
36734: LD_INT 1
36736: PPUSH
36737: CALL_OW 287
36741: PUSH
36742: LD_INT 10
36744: MUL
36745: ST_TO_ADDR
// r := rate / 10 ;
36746: LD_ADDR_VAR 0 7
36750: PUSH
36751: LD_VAR 0 2
36755: PUSH
36756: LD_INT 10
36758: DIVREAL
36759: ST_TO_ADDR
// time := 1 1$00 ;
36760: LD_ADDR_VAR 0 8
36764: PUSH
36765: LD_INT 2100
36767: ST_TO_ADDR
// if amount < min then
36768: LD_VAR 0 9
36772: PUSH
36773: LD_VAR 0 3
36777: LESS
36778: IFFALSE 36796
// r := r * 2 else
36780: LD_ADDR_VAR 0 7
36784: PUSH
36785: LD_VAR 0 7
36789: PUSH
36790: LD_INT 2
36792: MUL
36793: ST_TO_ADDR
36794: GO 36822
// if amount > max then
36796: LD_VAR 0 9
36800: PUSH
36801: LD_VAR 0 4
36805: GREATER
36806: IFFALSE 36822
// r := r / 2 ;
36808: LD_ADDR_VAR 0 7
36812: PUSH
36813: LD_VAR 0 7
36817: PUSH
36818: LD_INT 2
36820: DIVREAL
36821: ST_TO_ADDR
// time := time / r ;
36822: LD_ADDR_VAR 0 8
36826: PUSH
36827: LD_VAR 0 8
36831: PUSH
36832: LD_VAR 0 7
36836: DIVREAL
36837: ST_TO_ADDR
// if time < 0 then
36838: LD_VAR 0 8
36842: PUSH
36843: LD_INT 0
36845: LESS
36846: IFFALSE 36863
// time := time * - 1 ;
36848: LD_ADDR_VAR 0 8
36852: PUSH
36853: LD_VAR 0 8
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: MUL
36862: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
36863: LD_VAR 0 8
36867: PUSH
36868: LD_INT 35
36870: PPUSH
36871: LD_INT 875
36873: PPUSH
36874: CALL_OW 12
36878: PLUS
36879: PPUSH
36880: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
36884: LD_INT 1
36886: PPUSH
36887: LD_INT 5
36889: PPUSH
36890: CALL_OW 12
36894: PPUSH
36895: LD_VAR 0 1
36899: PPUSH
36900: LD_INT 1
36902: PPUSH
36903: CALL_OW 55
// end ;
36907: GO 36720
// end ;
36909: LD_VAR 0 5
36913: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
36914: LD_INT 0
36916: PPUSH
36917: PPUSH
36918: PPUSH
36919: PPUSH
36920: PPUSH
36921: PPUSH
36922: PPUSH
36923: PPUSH
// if not turrets or not factories then
36924: LD_VAR 0 1
36928: NOT
36929: PUSH
36930: LD_VAR 0 2
36934: NOT
36935: OR
36936: IFFALSE 36940
// exit ;
36938: GO 37247
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
36940: LD_ADDR_VAR 0 10
36944: PUSH
36945: LD_INT 5
36947: PUSH
36948: LD_INT 6
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: LD_INT 4
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: LD_INT 5
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 24
36982: PUSH
36983: LD_INT 25
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 23
36992: PUSH
36993: LD_INT 27
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 42
37006: PUSH
37007: LD_INT 43
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 44
37016: PUSH
37017: LD_INT 46
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 45
37026: PUSH
37027: LD_INT 47
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: LIST
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: ST_TO_ADDR
// result := [ ] ;
37044: LD_ADDR_VAR 0 3
37048: PUSH
37049: EMPTY
37050: ST_TO_ADDR
// for i in turrets do
37051: LD_ADDR_VAR 0 4
37055: PUSH
37056: LD_VAR 0 1
37060: PUSH
37061: FOR_IN
37062: IFFALSE 37245
// begin nat := GetNation ( i ) ;
37064: LD_ADDR_VAR 0 7
37068: PUSH
37069: LD_VAR 0 4
37073: PPUSH
37074: CALL_OW 248
37078: ST_TO_ADDR
// weapon := 0 ;
37079: LD_ADDR_VAR 0 8
37083: PUSH
37084: LD_INT 0
37086: ST_TO_ADDR
// if not nat then
37087: LD_VAR 0 7
37091: NOT
37092: IFFALSE 37096
// continue ;
37094: GO 37061
// for j in list [ nat ] do
37096: LD_ADDR_VAR 0 5
37100: PUSH
37101: LD_VAR 0 10
37105: PUSH
37106: LD_VAR 0 7
37110: ARRAY
37111: PUSH
37112: FOR_IN
37113: IFFALSE 37154
// if GetBWeapon ( i ) = j [ 1 ] then
37115: LD_VAR 0 4
37119: PPUSH
37120: CALL_OW 269
37124: PUSH
37125: LD_VAR 0 5
37129: PUSH
37130: LD_INT 1
37132: ARRAY
37133: EQUAL
37134: IFFALSE 37152
// begin weapon := j [ 2 ] ;
37136: LD_ADDR_VAR 0 8
37140: PUSH
37141: LD_VAR 0 5
37145: PUSH
37146: LD_INT 2
37148: ARRAY
37149: ST_TO_ADDR
// break ;
37150: GO 37154
// end ;
37152: GO 37112
37154: POP
37155: POP
// if not weapon then
37156: LD_VAR 0 8
37160: NOT
37161: IFFALSE 37165
// continue ;
37163: GO 37061
// for k in factories do
37165: LD_ADDR_VAR 0 6
37169: PUSH
37170: LD_VAR 0 2
37174: PUSH
37175: FOR_IN
37176: IFFALSE 37241
// begin weapons := AvailableWeaponList ( k ) ;
37178: LD_ADDR_VAR 0 9
37182: PUSH
37183: LD_VAR 0 6
37187: PPUSH
37188: CALL_OW 478
37192: ST_TO_ADDR
// if not weapons then
37193: LD_VAR 0 9
37197: NOT
37198: IFFALSE 37202
// continue ;
37200: GO 37175
// if weapon in weapons then
37202: LD_VAR 0 8
37206: PUSH
37207: LD_VAR 0 9
37211: IN
37212: IFFALSE 37239
// begin result := [ i , weapon ] ;
37214: LD_ADDR_VAR 0 3
37218: PUSH
37219: LD_VAR 0 4
37223: PUSH
37224: LD_VAR 0 8
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: ST_TO_ADDR
// exit ;
37233: POP
37234: POP
37235: POP
37236: POP
37237: GO 37247
// end ; end ;
37239: GO 37175
37241: POP
37242: POP
// end ;
37243: GO 37061
37245: POP
37246: POP
// end ;
37247: LD_VAR 0 3
37251: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37252: LD_INT 0
37254: PPUSH
// if not side or side > 8 then
37255: LD_VAR 0 3
37259: NOT
37260: PUSH
37261: LD_VAR 0 3
37265: PUSH
37266: LD_INT 8
37268: GREATER
37269: OR
37270: IFFALSE 37274
// exit ;
37272: GO 37333
// if not range then
37274: LD_VAR 0 4
37278: NOT
37279: IFFALSE 37290
// range := - 12 ;
37281: LD_ADDR_VAR 0 4
37285: PUSH
37286: LD_INT 12
37288: NEG
37289: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37290: LD_VAR 0 1
37294: PPUSH
37295: LD_VAR 0 2
37299: PPUSH
37300: LD_VAR 0 3
37304: PPUSH
37305: LD_VAR 0 4
37309: PPUSH
37310: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37314: LD_VAR 0 1
37318: PPUSH
37319: LD_VAR 0 2
37323: PPUSH
37324: LD_VAR 0 3
37328: PPUSH
37329: CALL_OW 331
// end ;
37333: LD_VAR 0 5
37337: RET
// export function Video ( mode ) ; begin
37338: LD_INT 0
37340: PPUSH
// ingame_video = mode ;
37341: LD_ADDR_OWVAR 52
37345: PUSH
37346: LD_VAR 0 1
37350: ST_TO_ADDR
// interface_hidden = mode ;
37351: LD_ADDR_OWVAR 54
37355: PUSH
37356: LD_VAR 0 1
37360: ST_TO_ADDR
// end ;
37361: LD_VAR 0 2
37365: RET
// export function Join ( array , element ) ; begin
37366: LD_INT 0
37368: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37369: LD_ADDR_VAR 0 3
37373: PUSH
37374: LD_VAR 0 1
37378: PPUSH
37379: LD_VAR 0 1
37383: PUSH
37384: LD_INT 1
37386: PLUS
37387: PPUSH
37388: LD_VAR 0 2
37392: PPUSH
37393: CALL_OW 1
37397: ST_TO_ADDR
// end ;
37398: LD_VAR 0 3
37402: RET
// export function JoinUnion ( array , element ) ; begin
37403: LD_INT 0
37405: PPUSH
// result := array union element ;
37406: LD_ADDR_VAR 0 3
37410: PUSH
37411: LD_VAR 0 1
37415: PUSH
37416: LD_VAR 0 2
37420: UNION
37421: ST_TO_ADDR
// end ;
37422: LD_VAR 0 3
37426: RET
// export function GetBehemoths ( side ) ; begin
37427: LD_INT 0
37429: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
37430: LD_ADDR_VAR 0 2
37434: PUSH
37435: LD_INT 22
37437: PUSH
37438: LD_VAR 0 1
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 31
37449: PUSH
37450: LD_INT 25
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PPUSH
37461: CALL_OW 69
37465: ST_TO_ADDR
// end ;
37466: LD_VAR 0 2
37470: RET
// export function Shuffle ( array ) ; var i , index ; begin
37471: LD_INT 0
37473: PPUSH
37474: PPUSH
37475: PPUSH
// result := [ ] ;
37476: LD_ADDR_VAR 0 2
37480: PUSH
37481: EMPTY
37482: ST_TO_ADDR
// if not array then
37483: LD_VAR 0 1
37487: NOT
37488: IFFALSE 37492
// exit ;
37490: GO 37591
// Randomize ;
37492: CALL_OW 10
// for i = array downto 1 do
37496: LD_ADDR_VAR 0 3
37500: PUSH
37501: DOUBLE
37502: LD_VAR 0 1
37506: INC
37507: ST_TO_ADDR
37508: LD_INT 1
37510: PUSH
37511: FOR_DOWNTO
37512: IFFALSE 37589
// begin index := rand ( 1 , array ) ;
37514: LD_ADDR_VAR 0 4
37518: PUSH
37519: LD_INT 1
37521: PPUSH
37522: LD_VAR 0 1
37526: PPUSH
37527: CALL_OW 12
37531: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37532: LD_ADDR_VAR 0 2
37536: PUSH
37537: LD_VAR 0 2
37541: PPUSH
37542: LD_VAR 0 2
37546: PUSH
37547: LD_INT 1
37549: PLUS
37550: PPUSH
37551: LD_VAR 0 1
37555: PUSH
37556: LD_VAR 0 4
37560: ARRAY
37561: PPUSH
37562: CALL_OW 2
37566: ST_TO_ADDR
// array := Delete ( array , index ) ;
37567: LD_ADDR_VAR 0 1
37571: PUSH
37572: LD_VAR 0 1
37576: PPUSH
37577: LD_VAR 0 4
37581: PPUSH
37582: CALL_OW 3
37586: ST_TO_ADDR
// end ;
37587: GO 37511
37589: POP
37590: POP
// end ;
37591: LD_VAR 0 2
37595: RET
// export function GetBaseMaterials ( base ) ; begin
37596: LD_INT 0
37598: PPUSH
// result := [ 0 , 0 , 0 ] ;
37599: LD_ADDR_VAR 0 2
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: LIST
37617: ST_TO_ADDR
// if not base then
37618: LD_VAR 0 1
37622: NOT
37623: IFFALSE 37627
// exit ;
37625: GO 37676
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37627: LD_ADDR_VAR 0 2
37631: PUSH
37632: LD_VAR 0 1
37636: PPUSH
37637: LD_INT 1
37639: PPUSH
37640: CALL_OW 275
37644: PUSH
37645: LD_VAR 0 1
37649: PPUSH
37650: LD_INT 2
37652: PPUSH
37653: CALL_OW 275
37657: PUSH
37658: LD_VAR 0 1
37662: PPUSH
37663: LD_INT 3
37665: PPUSH
37666: CALL_OW 275
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
// end ;
37676: LD_VAR 0 2
37680: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
37681: LD_INT 0
37683: PPUSH
37684: PPUSH
// result := array ;
37685: LD_ADDR_VAR 0 3
37689: PUSH
37690: LD_VAR 0 1
37694: ST_TO_ADDR
// if size >= result then
37695: LD_VAR 0 2
37699: PUSH
37700: LD_VAR 0 3
37704: GREATEREQUAL
37705: IFFALSE 37709
// exit ;
37707: GO 37759
// if size then
37709: LD_VAR 0 2
37713: IFFALSE 37759
// for i := array downto size do
37715: LD_ADDR_VAR 0 4
37719: PUSH
37720: DOUBLE
37721: LD_VAR 0 1
37725: INC
37726: ST_TO_ADDR
37727: LD_VAR 0 2
37731: PUSH
37732: FOR_DOWNTO
37733: IFFALSE 37757
// result := Delete ( result , result ) ;
37735: LD_ADDR_VAR 0 3
37739: PUSH
37740: LD_VAR 0 3
37744: PPUSH
37745: LD_VAR 0 3
37749: PPUSH
37750: CALL_OW 3
37754: ST_TO_ADDR
37755: GO 37732
37757: POP
37758: POP
// end ;
37759: LD_VAR 0 3
37763: RET
// export function ComExit ( unit ) ; var tmp ; begin
37764: LD_INT 0
37766: PPUSH
37767: PPUSH
// if not IsInUnit ( unit ) then
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 310
37777: NOT
37778: IFFALSE 37782
// exit ;
37780: GO 37842
// tmp := IsInUnit ( unit ) ;
37782: LD_ADDR_VAR 0 3
37786: PUSH
37787: LD_VAR 0 1
37791: PPUSH
37792: CALL_OW 310
37796: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
37797: LD_VAR 0 3
37801: PPUSH
37802: CALL_OW 247
37806: PUSH
37807: LD_INT 2
37809: EQUAL
37810: IFFALSE 37823
// ComExitVehicle ( unit ) else
37812: LD_VAR 0 1
37816: PPUSH
37817: CALL_OW 121
37821: GO 37832
// ComExitBuilding ( unit ) ;
37823: LD_VAR 0 1
37827: PPUSH
37828: CALL_OW 122
// result := tmp ;
37832: LD_ADDR_VAR 0 2
37836: PUSH
37837: LD_VAR 0 3
37841: ST_TO_ADDR
// end ;
37842: LD_VAR 0 2
37846: RET
// export function ComExitAll ( units ) ; var i ; begin
37847: LD_INT 0
37849: PPUSH
37850: PPUSH
// if not units then
37851: LD_VAR 0 1
37855: NOT
37856: IFFALSE 37860
// exit ;
37858: GO 37886
// for i in units do
37860: LD_ADDR_VAR 0 3
37864: PUSH
37865: LD_VAR 0 1
37869: PUSH
37870: FOR_IN
37871: IFFALSE 37884
// ComExit ( i ) ;
37873: LD_VAR 0 3
37877: PPUSH
37878: CALL 37764 0 1
37882: GO 37870
37884: POP
37885: POP
// end ;
37886: LD_VAR 0 2
37890: RET
// export function ResetHc ; begin
37891: LD_INT 0
37893: PPUSH
// InitHc ;
37894: CALL_OW 19
// hc_importance := 0 ;
37898: LD_ADDR_OWVAR 32
37902: PUSH
37903: LD_INT 0
37905: ST_TO_ADDR
// end ;
37906: LD_VAR 0 1
37910: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
37911: LD_INT 0
37913: PPUSH
37914: PPUSH
37915: PPUSH
// _x := ( x1 + x2 ) div 2 ;
37916: LD_ADDR_VAR 0 6
37920: PUSH
37921: LD_VAR 0 1
37925: PUSH
37926: LD_VAR 0 3
37930: PLUS
37931: PUSH
37932: LD_INT 2
37934: DIV
37935: ST_TO_ADDR
// if _x < 0 then
37936: LD_VAR 0 6
37940: PUSH
37941: LD_INT 0
37943: LESS
37944: IFFALSE 37961
// _x := _x * - 1 ;
37946: LD_ADDR_VAR 0 6
37950: PUSH
37951: LD_VAR 0 6
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: MUL
37960: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
37961: LD_ADDR_VAR 0 7
37965: PUSH
37966: LD_VAR 0 2
37970: PUSH
37971: LD_VAR 0 4
37975: PLUS
37976: PUSH
37977: LD_INT 2
37979: DIV
37980: ST_TO_ADDR
// if _y < 0 then
37981: LD_VAR 0 7
37985: PUSH
37986: LD_INT 0
37988: LESS
37989: IFFALSE 38006
// _y := _y * - 1 ;
37991: LD_ADDR_VAR 0 7
37995: PUSH
37996: LD_VAR 0 7
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: MUL
38005: ST_TO_ADDR
// result := [ _x , _y ] ;
38006: LD_ADDR_VAR 0 5
38010: PUSH
38011: LD_VAR 0 6
38015: PUSH
38016: LD_VAR 0 7
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: ST_TO_ADDR
// end ;
38025: LD_VAR 0 5
38029: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38030: LD_INT 0
38032: PPUSH
38033: PPUSH
38034: PPUSH
38035: PPUSH
// task := GetTaskList ( unit ) ;
38036: LD_ADDR_VAR 0 7
38040: PUSH
38041: LD_VAR 0 1
38045: PPUSH
38046: CALL_OW 437
38050: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38051: LD_VAR 0 7
38055: NOT
38056: PUSH
38057: LD_VAR 0 1
38061: PPUSH
38062: LD_VAR 0 2
38066: PPUSH
38067: CALL_OW 308
38071: NOT
38072: AND
38073: IFFALSE 38077
// exit ;
38075: GO 38195
// if IsInArea ( unit , area ) then
38077: LD_VAR 0 1
38081: PPUSH
38082: LD_VAR 0 2
38086: PPUSH
38087: CALL_OW 308
38091: IFFALSE 38109
// begin ComMoveToArea ( unit , goAway ) ;
38093: LD_VAR 0 1
38097: PPUSH
38098: LD_VAR 0 3
38102: PPUSH
38103: CALL_OW 113
// exit ;
38107: GO 38195
// end ; if task [ 1 ] [ 1 ] <> M then
38109: LD_VAR 0 7
38113: PUSH
38114: LD_INT 1
38116: ARRAY
38117: PUSH
38118: LD_INT 1
38120: ARRAY
38121: PUSH
38122: LD_STRING M
38124: NONEQUAL
38125: IFFALSE 38129
// exit ;
38127: GO 38195
// x := task [ 1 ] [ 2 ] ;
38129: LD_ADDR_VAR 0 5
38133: PUSH
38134: LD_VAR 0 7
38138: PUSH
38139: LD_INT 1
38141: ARRAY
38142: PUSH
38143: LD_INT 2
38145: ARRAY
38146: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38147: LD_ADDR_VAR 0 6
38151: PUSH
38152: LD_VAR 0 7
38156: PUSH
38157: LD_INT 1
38159: ARRAY
38160: PUSH
38161: LD_INT 3
38163: ARRAY
38164: ST_TO_ADDR
// if InArea ( x , y , area ) then
38165: LD_VAR 0 5
38169: PPUSH
38170: LD_VAR 0 6
38174: PPUSH
38175: LD_VAR 0 2
38179: PPUSH
38180: CALL_OW 309
38184: IFFALSE 38195
// ComStop ( unit ) ;
38186: LD_VAR 0 1
38190: PPUSH
38191: CALL_OW 141
// end ;
38195: LD_VAR 0 4
38199: RET
// export function Abs ( value ) ; begin
38200: LD_INT 0
38202: PPUSH
// result := value ;
38203: LD_ADDR_VAR 0 2
38207: PUSH
38208: LD_VAR 0 1
38212: ST_TO_ADDR
// if value < 0 then
38213: LD_VAR 0 1
38217: PUSH
38218: LD_INT 0
38220: LESS
38221: IFFALSE 38238
// result := value * - 1 ;
38223: LD_ADDR_VAR 0 2
38227: PUSH
38228: LD_VAR 0 1
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: MUL
38237: ST_TO_ADDR
// end ;
38238: LD_VAR 0 2
38242: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38243: LD_INT 0
38245: PPUSH
38246: PPUSH
38247: PPUSH
38248: PPUSH
38249: PPUSH
38250: PPUSH
38251: PPUSH
38252: PPUSH
// if not unit or not building then
38253: LD_VAR 0 1
38257: NOT
38258: PUSH
38259: LD_VAR 0 2
38263: NOT
38264: OR
38265: IFFALSE 38269
// exit ;
38267: GO 38495
// x := GetX ( building ) ;
38269: LD_ADDR_VAR 0 4
38273: PUSH
38274: LD_VAR 0 2
38278: PPUSH
38279: CALL_OW 250
38283: ST_TO_ADDR
// y := GetY ( building ) ;
38284: LD_ADDR_VAR 0 6
38288: PUSH
38289: LD_VAR 0 2
38293: PPUSH
38294: CALL_OW 251
38298: ST_TO_ADDR
// d := GetDir ( building ) ;
38299: LD_ADDR_VAR 0 8
38303: PUSH
38304: LD_VAR 0 2
38308: PPUSH
38309: CALL_OW 254
38313: ST_TO_ADDR
// r := 4 ;
38314: LD_ADDR_VAR 0 9
38318: PUSH
38319: LD_INT 4
38321: ST_TO_ADDR
// for i := 1 to 5 do
38322: LD_ADDR_VAR 0 10
38326: PUSH
38327: DOUBLE
38328: LD_INT 1
38330: DEC
38331: ST_TO_ADDR
38332: LD_INT 5
38334: PUSH
38335: FOR_TO
38336: IFFALSE 38493
// begin _x := ShiftX ( x , d , r + i ) ;
38338: LD_ADDR_VAR 0 5
38342: PUSH
38343: LD_VAR 0 4
38347: PPUSH
38348: LD_VAR 0 8
38352: PPUSH
38353: LD_VAR 0 9
38357: PUSH
38358: LD_VAR 0 10
38362: PLUS
38363: PPUSH
38364: CALL_OW 272
38368: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38369: LD_ADDR_VAR 0 7
38373: PUSH
38374: LD_VAR 0 6
38378: PPUSH
38379: LD_VAR 0 8
38383: PPUSH
38384: LD_VAR 0 9
38388: PUSH
38389: LD_VAR 0 10
38393: PLUS
38394: PPUSH
38395: CALL_OW 273
38399: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38400: LD_VAR 0 5
38404: PPUSH
38405: LD_VAR 0 7
38409: PPUSH
38410: CALL_OW 488
38414: PUSH
38415: LD_VAR 0 5
38419: PPUSH
38420: LD_VAR 0 7
38424: PPUSH
38425: CALL_OW 428
38429: PPUSH
38430: CALL_OW 247
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: IN
38445: NOT
38446: AND
38447: IFFALSE 38491
// begin ComMoveXY ( unit , _x , _y ) ;
38449: LD_VAR 0 1
38453: PPUSH
38454: LD_VAR 0 5
38458: PPUSH
38459: LD_VAR 0 7
38463: PPUSH
38464: CALL_OW 111
// result := [ _x , _y ] ;
38468: LD_ADDR_VAR 0 3
38472: PUSH
38473: LD_VAR 0 5
38477: PUSH
38478: LD_VAR 0 7
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: ST_TO_ADDR
// exit ;
38487: POP
38488: POP
38489: GO 38495
// end ; end ;
38491: GO 38335
38493: POP
38494: POP
// end ;
38495: LD_VAR 0 3
38499: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38500: LD_INT 0
38502: PPUSH
38503: PPUSH
38504: PPUSH
// result := 0 ;
38505: LD_ADDR_VAR 0 3
38509: PUSH
38510: LD_INT 0
38512: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38513: LD_VAR 0 1
38517: PUSH
38518: LD_INT 0
38520: LESS
38521: PUSH
38522: LD_VAR 0 1
38526: PUSH
38527: LD_INT 8
38529: GREATER
38530: OR
38531: PUSH
38532: LD_VAR 0 2
38536: PUSH
38537: LD_INT 0
38539: LESS
38540: OR
38541: PUSH
38542: LD_VAR 0 2
38546: PUSH
38547: LD_INT 8
38549: GREATER
38550: OR
38551: IFFALSE 38555
// exit ;
38553: GO 38630
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38555: LD_ADDR_VAR 0 4
38559: PUSH
38560: LD_INT 22
38562: PUSH
38563: LD_VAR 0 2
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PPUSH
38572: CALL_OW 69
38576: PUSH
38577: FOR_IN
38578: IFFALSE 38628
// begin un := UnitShoot ( i ) ;
38580: LD_ADDR_VAR 0 5
38584: PUSH
38585: LD_VAR 0 4
38589: PPUSH
38590: CALL_OW 504
38594: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38595: LD_VAR 0 5
38599: PPUSH
38600: CALL_OW 255
38604: PUSH
38605: LD_VAR 0 1
38609: EQUAL
38610: IFFALSE 38626
// begin result := un ;
38612: LD_ADDR_VAR 0 3
38616: PUSH
38617: LD_VAR 0 5
38621: ST_TO_ADDR
// exit ;
38622: POP
38623: POP
38624: GO 38630
// end ; end ;
38626: GO 38577
38628: POP
38629: POP
// end ;
38630: LD_VAR 0 3
38634: RET
// export function GetCargoBay ( units ) ; begin
38635: LD_INT 0
38637: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
38638: LD_ADDR_VAR 0 2
38642: PUSH
38643: LD_VAR 0 1
38647: PPUSH
38648: LD_INT 2
38650: PUSH
38651: LD_INT 34
38653: PUSH
38654: LD_INT 12
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 34
38663: PUSH
38664: LD_INT 51
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 34
38673: PUSH
38674: LD_INT 32
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 34
38683: PUSH
38684: LD_INT 89
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: PPUSH
38698: CALL_OW 72
38702: ST_TO_ADDR
// end ;
38703: LD_VAR 0 2
38707: RET
// export function Negate ( value ) ; begin
38708: LD_INT 0
38710: PPUSH
// result := not value ;
38711: LD_ADDR_VAR 0 2
38715: PUSH
38716: LD_VAR 0 1
38720: NOT
38721: ST_TO_ADDR
// end ;
38722: LD_VAR 0 2
38726: RET
// export function Inc ( value ) ; begin
38727: LD_INT 0
38729: PPUSH
// result := value + 1 ;
38730: LD_ADDR_VAR 0 2
38734: PUSH
38735: LD_VAR 0 1
38739: PUSH
38740: LD_INT 1
38742: PLUS
38743: ST_TO_ADDR
// end ;
38744: LD_VAR 0 2
38748: RET
// export function Dec ( value ) ; begin
38749: LD_INT 0
38751: PPUSH
// result := value - 1 ;
38752: LD_ADDR_VAR 0 2
38756: PUSH
38757: LD_VAR 0 1
38761: PUSH
38762: LD_INT 1
38764: MINUS
38765: ST_TO_ADDR
// end ;
38766: LD_VAR 0 2
38770: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
38771: LD_INT 0
38773: PPUSH
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
38781: LD_VAR 0 1
38785: PPUSH
38786: LD_VAR 0 2
38790: PPUSH
38791: CALL_OW 488
38795: NOT
38796: PUSH
38797: LD_VAR 0 3
38801: PPUSH
38802: LD_VAR 0 4
38806: PPUSH
38807: CALL_OW 488
38811: NOT
38812: OR
38813: IFFALSE 38826
// begin result := - 1 ;
38815: LD_ADDR_VAR 0 5
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: ST_TO_ADDR
// exit ;
38824: GO 39061
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
38826: LD_ADDR_VAR 0 12
38830: PUSH
38831: LD_VAR 0 1
38835: PPUSH
38836: LD_VAR 0 2
38840: PPUSH
38841: LD_VAR 0 3
38845: PPUSH
38846: LD_VAR 0 4
38850: PPUSH
38851: CALL 37911 0 4
38855: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
38856: LD_ADDR_VAR 0 11
38860: PUSH
38861: LD_VAR 0 1
38865: PPUSH
38866: LD_VAR 0 2
38870: PPUSH
38871: LD_VAR 0 12
38875: PUSH
38876: LD_INT 1
38878: ARRAY
38879: PPUSH
38880: LD_VAR 0 12
38884: PUSH
38885: LD_INT 2
38887: ARRAY
38888: PPUSH
38889: CALL_OW 298
38893: ST_TO_ADDR
// distance := 9999 ;
38894: LD_ADDR_VAR 0 10
38898: PUSH
38899: LD_INT 9999
38901: ST_TO_ADDR
// for i := 0 to 5 do
38902: LD_ADDR_VAR 0 6
38906: PUSH
38907: DOUBLE
38908: LD_INT 0
38910: DEC
38911: ST_TO_ADDR
38912: LD_INT 5
38914: PUSH
38915: FOR_TO
38916: IFFALSE 39059
// begin _x := ShiftX ( x1 , i , centerDist ) ;
38918: LD_ADDR_VAR 0 7
38922: PUSH
38923: LD_VAR 0 1
38927: PPUSH
38928: LD_VAR 0 6
38932: PPUSH
38933: LD_VAR 0 11
38937: PPUSH
38938: CALL_OW 272
38942: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
38943: LD_ADDR_VAR 0 8
38947: PUSH
38948: LD_VAR 0 2
38952: PPUSH
38953: LD_VAR 0 6
38957: PPUSH
38958: LD_VAR 0 11
38962: PPUSH
38963: CALL_OW 273
38967: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38968: LD_VAR 0 7
38972: PPUSH
38973: LD_VAR 0 8
38977: PPUSH
38978: CALL_OW 488
38982: NOT
38983: IFFALSE 38987
// continue ;
38985: GO 38915
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
38987: LD_ADDR_VAR 0 9
38991: PUSH
38992: LD_VAR 0 12
38996: PUSH
38997: LD_INT 1
38999: ARRAY
39000: PPUSH
39001: LD_VAR 0 12
39005: PUSH
39006: LD_INT 2
39008: ARRAY
39009: PPUSH
39010: LD_VAR 0 7
39014: PPUSH
39015: LD_VAR 0 8
39019: PPUSH
39020: CALL_OW 298
39024: ST_TO_ADDR
// if tmp < distance then
39025: LD_VAR 0 9
39029: PUSH
39030: LD_VAR 0 10
39034: LESS
39035: IFFALSE 39057
// begin result := i ;
39037: LD_ADDR_VAR 0 5
39041: PUSH
39042: LD_VAR 0 6
39046: ST_TO_ADDR
// distance := tmp ;
39047: LD_ADDR_VAR 0 10
39051: PUSH
39052: LD_VAR 0 9
39056: ST_TO_ADDR
// end ; end ;
39057: GO 38915
39059: POP
39060: POP
// end ;
39061: LD_VAR 0 5
39065: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39066: LD_INT 0
39068: PPUSH
39069: PPUSH
// if not driver or not IsInUnit ( driver ) then
39070: LD_VAR 0 1
39074: NOT
39075: PUSH
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL_OW 310
39085: NOT
39086: OR
39087: IFFALSE 39091
// exit ;
39089: GO 39181
// vehicle := IsInUnit ( driver ) ;
39091: LD_ADDR_VAR 0 3
39095: PUSH
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL_OW 310
39105: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39106: LD_VAR 0 1
39110: PPUSH
39111: LD_STRING \
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: PUSH
39141: LD_STRING E
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: LD_VAR 0 3
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PPUSH
39177: CALL_OW 446
// end ;
39181: LD_VAR 0 2
39185: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39186: LD_INT 0
39188: PPUSH
39189: PPUSH
// if not driver or not IsInUnit ( driver ) then
39190: LD_VAR 0 1
39194: NOT
39195: PUSH
39196: LD_VAR 0 1
39200: PPUSH
39201: CALL_OW 310
39205: NOT
39206: OR
39207: IFFALSE 39211
// exit ;
39209: GO 39301
// vehicle := IsInUnit ( driver ) ;
39211: LD_ADDR_VAR 0 3
39215: PUSH
39216: LD_VAR 0 1
39220: PPUSH
39221: CALL_OW 310
39225: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39226: LD_VAR 0 1
39230: PPUSH
39231: LD_STRING \
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: PUSH
39261: LD_STRING E
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_VAR 0 3
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PPUSH
39297: CALL_OW 447
// end ;
39301: LD_VAR 0 2
39305: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39306: LD_INT 0
39308: PPUSH
39309: PPUSH
39310: PPUSH
// tmp := [ ] ;
39311: LD_ADDR_VAR 0 5
39315: PUSH
39316: EMPTY
39317: ST_TO_ADDR
// for i in units do
39318: LD_ADDR_VAR 0 4
39322: PUSH
39323: LD_VAR 0 1
39327: PUSH
39328: FOR_IN
39329: IFFALSE 39367
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39331: LD_ADDR_VAR 0 5
39335: PUSH
39336: LD_VAR 0 5
39340: PPUSH
39341: LD_VAR 0 5
39345: PUSH
39346: LD_INT 1
39348: PLUS
39349: PPUSH
39350: LD_VAR 0 4
39354: PPUSH
39355: CALL_OW 256
39359: PPUSH
39360: CALL_OW 2
39364: ST_TO_ADDR
39365: GO 39328
39367: POP
39368: POP
// if not tmp then
39369: LD_VAR 0 5
39373: NOT
39374: IFFALSE 39378
// exit ;
39376: GO 39426
// if asc then
39378: LD_VAR 0 2
39382: IFFALSE 39406
// result := SortListByListAsc ( units , tmp ) else
39384: LD_ADDR_VAR 0 3
39388: PUSH
39389: LD_VAR 0 1
39393: PPUSH
39394: LD_VAR 0 5
39398: PPUSH
39399: CALL_OW 76
39403: ST_TO_ADDR
39404: GO 39426
// result := SortListByListDesc ( units , tmp ) ;
39406: LD_ADDR_VAR 0 3
39410: PUSH
39411: LD_VAR 0 1
39415: PPUSH
39416: LD_VAR 0 5
39420: PPUSH
39421: CALL_OW 77
39425: ST_TO_ADDR
// end ;
39426: LD_VAR 0 3
39430: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39431: LD_INT 0
39433: PPUSH
39434: PPUSH
// task := GetTaskList ( mech ) ;
39435: LD_ADDR_VAR 0 4
39439: PUSH
39440: LD_VAR 0 1
39444: PPUSH
39445: CALL_OW 437
39449: ST_TO_ADDR
// if not task then
39450: LD_VAR 0 4
39454: NOT
39455: IFFALSE 39459
// exit ;
39457: GO 39501
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39459: LD_ADDR_VAR 0 3
39463: PUSH
39464: LD_VAR 0 4
39468: PUSH
39469: LD_INT 1
39471: ARRAY
39472: PUSH
39473: LD_INT 1
39475: ARRAY
39476: PUSH
39477: LD_STRING r
39479: EQUAL
39480: PUSH
39481: LD_VAR 0 4
39485: PUSH
39486: LD_INT 1
39488: ARRAY
39489: PUSH
39490: LD_INT 4
39492: ARRAY
39493: PUSH
39494: LD_VAR 0 2
39498: EQUAL
39499: AND
39500: ST_TO_ADDR
// end ;
39501: LD_VAR 0 3
39505: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39506: LD_INT 0
39508: PPUSH
// SetDir ( unit , d ) ;
39509: LD_VAR 0 1
39513: PPUSH
39514: LD_VAR 0 4
39518: PPUSH
39519: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39523: LD_VAR 0 1
39527: PPUSH
39528: LD_VAR 0 2
39532: PPUSH
39533: LD_VAR 0 3
39537: PPUSH
39538: LD_VAR 0 5
39542: PPUSH
39543: CALL_OW 48
// end ;
39547: LD_VAR 0 6
39551: RET
// export function ToNaturalNumber ( number ) ; begin
39552: LD_INT 0
39554: PPUSH
// result := number div 1 ;
39555: LD_ADDR_VAR 0 2
39559: PUSH
39560: LD_VAR 0 1
39564: PUSH
39565: LD_INT 1
39567: DIV
39568: ST_TO_ADDR
// if number < 0 then
39569: LD_VAR 0 1
39573: PUSH
39574: LD_INT 0
39576: LESS
39577: IFFALSE 39587
// result := 0 ;
39579: LD_ADDR_VAR 0 2
39583: PUSH
39584: LD_INT 0
39586: ST_TO_ADDR
// end ;
39587: LD_VAR 0 2
39591: RET
// export function SortByClass ( units , class ) ; var un ; begin
39592: LD_INT 0
39594: PPUSH
39595: PPUSH
// if not units or not class then
39596: LD_VAR 0 1
39600: NOT
39601: PUSH
39602: LD_VAR 0 2
39606: NOT
39607: OR
39608: IFFALSE 39612
// exit ;
39610: GO 39707
// result := [ ] ;
39612: LD_ADDR_VAR 0 3
39616: PUSH
39617: EMPTY
39618: ST_TO_ADDR
// for un in units do
39619: LD_ADDR_VAR 0 4
39623: PUSH
39624: LD_VAR 0 1
39628: PUSH
39629: FOR_IN
39630: IFFALSE 39705
// if GetClass ( un ) = class then
39632: LD_VAR 0 4
39636: PPUSH
39637: CALL_OW 257
39641: PUSH
39642: LD_VAR 0 2
39646: EQUAL
39647: IFFALSE 39674
// result := Insert ( result , 1 , un ) else
39649: LD_ADDR_VAR 0 3
39653: PUSH
39654: LD_VAR 0 3
39658: PPUSH
39659: LD_INT 1
39661: PPUSH
39662: LD_VAR 0 4
39666: PPUSH
39667: CALL_OW 2
39671: ST_TO_ADDR
39672: GO 39703
// result := Replace ( result , result + 1 , un ) ;
39674: LD_ADDR_VAR 0 3
39678: PUSH
39679: LD_VAR 0 3
39683: PPUSH
39684: LD_VAR 0 3
39688: PUSH
39689: LD_INT 1
39691: PLUS
39692: PPUSH
39693: LD_VAR 0 4
39697: PPUSH
39698: CALL_OW 1
39702: ST_TO_ADDR
39703: GO 39629
39705: POP
39706: POP
// end ;
39707: LD_VAR 0 3
39711: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
39712: LD_INT 0
39714: PPUSH
39715: PPUSH
39716: PPUSH
39717: PPUSH
39718: PPUSH
39719: PPUSH
39720: PPUSH
// result := [ ] ;
39721: LD_ADDR_VAR 0 4
39725: PUSH
39726: EMPTY
39727: ST_TO_ADDR
// if x - r < 0 then
39728: LD_VAR 0 1
39732: PUSH
39733: LD_VAR 0 3
39737: MINUS
39738: PUSH
39739: LD_INT 0
39741: LESS
39742: IFFALSE 39754
// min_x := 0 else
39744: LD_ADDR_VAR 0 8
39748: PUSH
39749: LD_INT 0
39751: ST_TO_ADDR
39752: GO 39770
// min_x := x - r ;
39754: LD_ADDR_VAR 0 8
39758: PUSH
39759: LD_VAR 0 1
39763: PUSH
39764: LD_VAR 0 3
39768: MINUS
39769: ST_TO_ADDR
// if y - r < 0 then
39770: LD_VAR 0 2
39774: PUSH
39775: LD_VAR 0 3
39779: MINUS
39780: PUSH
39781: LD_INT 0
39783: LESS
39784: IFFALSE 39796
// min_y := 0 else
39786: LD_ADDR_VAR 0 7
39790: PUSH
39791: LD_INT 0
39793: ST_TO_ADDR
39794: GO 39812
// min_y := y - r ;
39796: LD_ADDR_VAR 0 7
39800: PUSH
39801: LD_VAR 0 2
39805: PUSH
39806: LD_VAR 0 3
39810: MINUS
39811: ST_TO_ADDR
// max_x := x + r ;
39812: LD_ADDR_VAR 0 9
39816: PUSH
39817: LD_VAR 0 1
39821: PUSH
39822: LD_VAR 0 3
39826: PLUS
39827: ST_TO_ADDR
// max_y := y + r ;
39828: LD_ADDR_VAR 0 10
39832: PUSH
39833: LD_VAR 0 2
39837: PUSH
39838: LD_VAR 0 3
39842: PLUS
39843: ST_TO_ADDR
// for _x = min_x to max_x do
39844: LD_ADDR_VAR 0 5
39848: PUSH
39849: DOUBLE
39850: LD_VAR 0 8
39854: DEC
39855: ST_TO_ADDR
39856: LD_VAR 0 9
39860: PUSH
39861: FOR_TO
39862: IFFALSE 39963
// for _y = min_y to max_y do
39864: LD_ADDR_VAR 0 6
39868: PUSH
39869: DOUBLE
39870: LD_VAR 0 7
39874: DEC
39875: ST_TO_ADDR
39876: LD_VAR 0 10
39880: PUSH
39881: FOR_TO
39882: IFFALSE 39959
// begin if not ValidHex ( _x , _y ) then
39884: LD_VAR 0 5
39888: PPUSH
39889: LD_VAR 0 6
39893: PPUSH
39894: CALL_OW 488
39898: NOT
39899: IFFALSE 39903
// continue ;
39901: GO 39881
// if GetResourceTypeXY ( _x , _y ) then
39903: LD_VAR 0 5
39907: PPUSH
39908: LD_VAR 0 6
39912: PPUSH
39913: CALL_OW 283
39917: IFFALSE 39957
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
39919: LD_ADDR_VAR 0 4
39923: PUSH
39924: LD_VAR 0 4
39928: PPUSH
39929: LD_VAR 0 4
39933: PUSH
39934: LD_INT 1
39936: PLUS
39937: PPUSH
39938: LD_VAR 0 5
39942: PUSH
39943: LD_VAR 0 6
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PPUSH
39952: CALL_OW 1
39956: ST_TO_ADDR
// end ;
39957: GO 39881
39959: POP
39960: POP
39961: GO 39861
39963: POP
39964: POP
// end ;
39965: LD_VAR 0 4
39969: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
39970: LD_INT 0
39972: PPUSH
39973: PPUSH
39974: PPUSH
39975: PPUSH
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
// if not units then
39980: LD_VAR 0 1
39984: NOT
39985: IFFALSE 39989
// exit ;
39987: GO 40513
// result := UnitFilter ( units , [ f_ok ] ) ;
39989: LD_ADDR_VAR 0 3
39993: PUSH
39994: LD_VAR 0 1
39998: PPUSH
39999: LD_INT 50
40001: PUSH
40002: EMPTY
40003: LIST
40004: PPUSH
40005: CALL_OW 72
40009: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40010: LD_ADDR_VAR 0 8
40014: PUSH
40015: LD_VAR 0 1
40019: PUSH
40020: LD_INT 1
40022: ARRAY
40023: PPUSH
40024: CALL_OW 255
40028: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40029: LD_ADDR_VAR 0 10
40033: PUSH
40034: LD_INT 29
40036: PUSH
40037: LD_INT 91
40039: PUSH
40040: LD_INT 49
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: LIST
40047: ST_TO_ADDR
// if not result then
40048: LD_VAR 0 3
40052: NOT
40053: IFFALSE 40057
// exit ;
40055: GO 40513
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40057: LD_ADDR_VAR 0 5
40061: PUSH
40062: LD_INT 81
40064: PUSH
40065: LD_VAR 0 8
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PPUSH
40074: CALL_OW 69
40078: ST_TO_ADDR
// for i in result do
40079: LD_ADDR_VAR 0 4
40083: PUSH
40084: LD_VAR 0 3
40088: PUSH
40089: FOR_IN
40090: IFFALSE 40511
// begin tag := GetTag ( i ) + 1 ;
40092: LD_ADDR_VAR 0 9
40096: PUSH
40097: LD_VAR 0 4
40101: PPUSH
40102: CALL_OW 110
40106: PUSH
40107: LD_INT 1
40109: PLUS
40110: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40111: LD_ADDR_VAR 0 7
40115: PUSH
40116: LD_VAR 0 4
40120: PPUSH
40121: CALL_OW 250
40125: PPUSH
40126: LD_VAR 0 4
40130: PPUSH
40131: CALL_OW 251
40135: PPUSH
40136: LD_INT 6
40138: PPUSH
40139: CALL 39712 0 3
40143: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40144: LD_VAR 0 4
40148: PPUSH
40149: CALL_OW 247
40153: PUSH
40154: LD_INT 2
40156: EQUAL
40157: PUSH
40158: LD_VAR 0 7
40162: AND
40163: PUSH
40164: LD_VAR 0 4
40168: PPUSH
40169: CALL_OW 264
40173: PUSH
40174: LD_VAR 0 10
40178: IN
40179: NOT
40180: AND
40181: IFFALSE 40220
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40183: LD_VAR 0 4
40187: PPUSH
40188: LD_VAR 0 7
40192: PUSH
40193: LD_INT 1
40195: ARRAY
40196: PUSH
40197: LD_INT 1
40199: ARRAY
40200: PPUSH
40201: LD_VAR 0 7
40205: PUSH
40206: LD_INT 1
40208: ARRAY
40209: PUSH
40210: LD_INT 2
40212: ARRAY
40213: PPUSH
40214: CALL_OW 116
40218: GO 40509
// if path > tag then
40220: LD_VAR 0 2
40224: PUSH
40225: LD_VAR 0 9
40229: GREATER
40230: IFFALSE 40438
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
40232: LD_ADDR_VAR 0 6
40236: PUSH
40237: LD_VAR 0 5
40241: PPUSH
40242: LD_INT 91
40244: PUSH
40245: LD_VAR 0 4
40249: PUSH
40250: LD_INT 8
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: LIST
40257: PPUSH
40258: CALL_OW 72
40262: ST_TO_ADDR
// if nearEnemy then
40263: LD_VAR 0 6
40267: IFFALSE 40336
// begin if GetWeapon ( i ) = ru_time_lapser then
40269: LD_VAR 0 4
40273: PPUSH
40274: CALL_OW 264
40278: PUSH
40279: LD_INT 49
40281: EQUAL
40282: IFFALSE 40310
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40284: LD_VAR 0 4
40288: PPUSH
40289: LD_VAR 0 6
40293: PPUSH
40294: LD_VAR 0 4
40298: PPUSH
40299: CALL_OW 74
40303: PPUSH
40304: CALL_OW 112
40308: GO 40334
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
40310: LD_VAR 0 4
40314: PPUSH
40315: LD_VAR 0 6
40319: PPUSH
40320: LD_VAR 0 4
40324: PPUSH
40325: CALL_OW 74
40329: PPUSH
40330: CALL_OW 115
// end else
40334: GO 40436
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40336: LD_VAR 0 4
40340: PPUSH
40341: LD_VAR 0 2
40345: PUSH
40346: LD_VAR 0 9
40350: ARRAY
40351: PUSH
40352: LD_INT 1
40354: ARRAY
40355: PPUSH
40356: LD_VAR 0 2
40360: PUSH
40361: LD_VAR 0 9
40365: ARRAY
40366: PUSH
40367: LD_INT 2
40369: ARRAY
40370: PPUSH
40371: CALL_OW 297
40375: PUSH
40376: LD_INT 6
40378: GREATER
40379: IFFALSE 40422
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40381: LD_VAR 0 4
40385: PPUSH
40386: LD_VAR 0 2
40390: PUSH
40391: LD_VAR 0 9
40395: ARRAY
40396: PUSH
40397: LD_INT 1
40399: ARRAY
40400: PPUSH
40401: LD_VAR 0 2
40405: PUSH
40406: LD_VAR 0 9
40410: ARRAY
40411: PUSH
40412: LD_INT 2
40414: ARRAY
40415: PPUSH
40416: CALL_OW 114
40420: GO 40436
// SetTag ( i , tag ) ;
40422: LD_VAR 0 4
40426: PPUSH
40427: LD_VAR 0 9
40431: PPUSH
40432: CALL_OW 109
// end else
40436: GO 40509
// if enemy then
40438: LD_VAR 0 5
40442: IFFALSE 40509
// begin if GetWeapon ( i ) = ru_time_lapser then
40444: LD_VAR 0 4
40448: PPUSH
40449: CALL_OW 264
40453: PUSH
40454: LD_INT 49
40456: EQUAL
40457: IFFALSE 40485
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
40459: LD_VAR 0 4
40463: PPUSH
40464: LD_VAR 0 5
40468: PPUSH
40469: LD_VAR 0 4
40473: PPUSH
40474: CALL_OW 74
40478: PPUSH
40479: CALL_OW 112
40483: GO 40509
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40485: LD_VAR 0 4
40489: PPUSH
40490: LD_VAR 0 5
40494: PPUSH
40495: LD_VAR 0 4
40499: PPUSH
40500: CALL_OW 74
40504: PPUSH
40505: CALL_OW 115
// end ; end ;
40509: GO 40089
40511: POP
40512: POP
// end ;
40513: LD_VAR 0 3
40517: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40518: LD_INT 0
40520: PPUSH
40521: PPUSH
40522: PPUSH
// if not unit or IsInUnit ( unit ) then
40523: LD_VAR 0 1
40527: NOT
40528: PUSH
40529: LD_VAR 0 1
40533: PPUSH
40534: CALL_OW 310
40538: OR
40539: IFFALSE 40543
// exit ;
40541: GO 40634
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
40543: LD_ADDR_VAR 0 4
40547: PUSH
40548: LD_VAR 0 1
40552: PPUSH
40553: CALL_OW 250
40557: PPUSH
40558: LD_VAR 0 2
40562: PPUSH
40563: LD_INT 1
40565: PPUSH
40566: CALL_OW 272
40570: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
40571: LD_ADDR_VAR 0 5
40575: PUSH
40576: LD_VAR 0 1
40580: PPUSH
40581: CALL_OW 251
40585: PPUSH
40586: LD_VAR 0 2
40590: PPUSH
40591: LD_INT 1
40593: PPUSH
40594: CALL_OW 273
40598: ST_TO_ADDR
// if ValidHex ( x , y ) then
40599: LD_VAR 0 4
40603: PPUSH
40604: LD_VAR 0 5
40608: PPUSH
40609: CALL_OW 488
40613: IFFALSE 40634
// ComTurnXY ( unit , x , y ) ;
40615: LD_VAR 0 1
40619: PPUSH
40620: LD_VAR 0 4
40624: PPUSH
40625: LD_VAR 0 5
40629: PPUSH
40630: CALL_OW 118
// end ;
40634: LD_VAR 0 3
40638: RET
// export function SeeUnits ( side , units ) ; var i ; begin
40639: LD_INT 0
40641: PPUSH
40642: PPUSH
// result := false ;
40643: LD_ADDR_VAR 0 3
40647: PUSH
40648: LD_INT 0
40650: ST_TO_ADDR
// if not units then
40651: LD_VAR 0 2
40655: NOT
40656: IFFALSE 40660
// exit ;
40658: GO 40705
// for i in units do
40660: LD_ADDR_VAR 0 4
40664: PUSH
40665: LD_VAR 0 2
40669: PUSH
40670: FOR_IN
40671: IFFALSE 40703
// if See ( side , i ) then
40673: LD_VAR 0 1
40677: PPUSH
40678: LD_VAR 0 4
40682: PPUSH
40683: CALL_OW 292
40687: IFFALSE 40701
// begin result := true ;
40689: LD_ADDR_VAR 0 3
40693: PUSH
40694: LD_INT 1
40696: ST_TO_ADDR
// exit ;
40697: POP
40698: POP
40699: GO 40705
// end ;
40701: GO 40670
40703: POP
40704: POP
// end ;
40705: LD_VAR 0 3
40709: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
40710: LD_INT 0
40712: PPUSH
40713: PPUSH
40714: PPUSH
40715: PPUSH
// if not unit or not points then
40716: LD_VAR 0 1
40720: NOT
40721: PUSH
40722: LD_VAR 0 2
40726: NOT
40727: OR
40728: IFFALSE 40732
// exit ;
40730: GO 40822
// dist := 99999 ;
40732: LD_ADDR_VAR 0 5
40736: PUSH
40737: LD_INT 99999
40739: ST_TO_ADDR
// for i in points do
40740: LD_ADDR_VAR 0 4
40744: PUSH
40745: LD_VAR 0 2
40749: PUSH
40750: FOR_IN
40751: IFFALSE 40820
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
40753: LD_ADDR_VAR 0 6
40757: PUSH
40758: LD_VAR 0 1
40762: PPUSH
40763: LD_VAR 0 4
40767: PUSH
40768: LD_INT 1
40770: ARRAY
40771: PPUSH
40772: LD_VAR 0 4
40776: PUSH
40777: LD_INT 2
40779: ARRAY
40780: PPUSH
40781: CALL_OW 297
40785: ST_TO_ADDR
// if tmpDist < dist then
40786: LD_VAR 0 6
40790: PUSH
40791: LD_VAR 0 5
40795: LESS
40796: IFFALSE 40818
// begin result := i ;
40798: LD_ADDR_VAR 0 3
40802: PUSH
40803: LD_VAR 0 4
40807: ST_TO_ADDR
// dist := tmpDist ;
40808: LD_ADDR_VAR 0 5
40812: PUSH
40813: LD_VAR 0 6
40817: ST_TO_ADDR
// end ; end ;
40818: GO 40750
40820: POP
40821: POP
// end ;
40822: LD_VAR 0 3
40826: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
40827: LD_INT 0
40829: PPUSH
// uc_side := side ;
40830: LD_ADDR_OWVAR 20
40834: PUSH
40835: LD_VAR 0 1
40839: ST_TO_ADDR
// uc_nation := 3 ;
40840: LD_ADDR_OWVAR 21
40844: PUSH
40845: LD_INT 3
40847: ST_TO_ADDR
// vc_chassis := 25 ;
40848: LD_ADDR_OWVAR 37
40852: PUSH
40853: LD_INT 25
40855: ST_TO_ADDR
// vc_engine := engine_siberite ;
40856: LD_ADDR_OWVAR 39
40860: PUSH
40861: LD_INT 3
40863: ST_TO_ADDR
// vc_control := control_computer ;
40864: LD_ADDR_OWVAR 38
40868: PUSH
40869: LD_INT 3
40871: ST_TO_ADDR
// vc_weapon := 59 ;
40872: LD_ADDR_OWVAR 40
40876: PUSH
40877: LD_INT 59
40879: ST_TO_ADDR
// result := CreateVehicle ;
40880: LD_ADDR_VAR 0 5
40884: PUSH
40885: CALL_OW 45
40889: ST_TO_ADDR
// SetDir ( result , d ) ;
40890: LD_VAR 0 5
40894: PPUSH
40895: LD_VAR 0 4
40899: PPUSH
40900: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
40904: LD_VAR 0 5
40908: PPUSH
40909: LD_VAR 0 2
40913: PPUSH
40914: LD_VAR 0 3
40918: PPUSH
40919: LD_INT 0
40921: PPUSH
40922: CALL_OW 48
// end ;
40926: LD_VAR 0 5
40930: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
40931: LD_INT 0
40933: PPUSH
40934: PPUSH
40935: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
40936: LD_ADDR_VAR 0 2
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
40959: LD_VAR 0 1
40963: NOT
40964: PUSH
40965: LD_VAR 0 1
40969: PPUSH
40970: CALL_OW 264
40974: PUSH
40975: LD_INT 12
40977: PUSH
40978: LD_INT 51
40980: PUSH
40981: LD_INT 32
40983: PUSH
40984: LD_INT 89
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: IN
40993: NOT
40994: OR
40995: IFFALSE 40999
// exit ;
40997: GO 41097
// for i := 1 to 3 do
40999: LD_ADDR_VAR 0 3
41003: PUSH
41004: DOUBLE
41005: LD_INT 1
41007: DEC
41008: ST_TO_ADDR
41009: LD_INT 3
41011: PUSH
41012: FOR_TO
41013: IFFALSE 41095
// begin tmp := GetCargo ( cargo , i ) ;
41015: LD_ADDR_VAR 0 4
41019: PUSH
41020: LD_VAR 0 1
41024: PPUSH
41025: LD_VAR 0 3
41029: PPUSH
41030: CALL_OW 289
41034: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41035: LD_ADDR_VAR 0 2
41039: PUSH
41040: LD_VAR 0 2
41044: PPUSH
41045: LD_VAR 0 3
41049: PPUSH
41050: LD_VAR 0 4
41054: PPUSH
41055: CALL_OW 1
41059: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41060: LD_ADDR_VAR 0 2
41064: PUSH
41065: LD_VAR 0 2
41069: PPUSH
41070: LD_INT 4
41072: PPUSH
41073: LD_VAR 0 2
41077: PUSH
41078: LD_INT 4
41080: ARRAY
41081: PUSH
41082: LD_VAR 0 4
41086: PLUS
41087: PPUSH
41088: CALL_OW 1
41092: ST_TO_ADDR
// end ;
41093: GO 41012
41095: POP
41096: POP
// end ;
41097: LD_VAR 0 2
41101: RET
// export function Length ( array ) ; begin
41102: LD_INT 0
41104: PPUSH
// result := array + 0 ;
41105: LD_ADDR_VAR 0 2
41109: PUSH
41110: LD_VAR 0 1
41114: PUSH
41115: LD_INT 0
41117: PLUS
41118: ST_TO_ADDR
// end ;
41119: LD_VAR 0 2
41123: RET
// export function PrepareArray ( array ) ; begin
41124: LD_INT 0
41126: PPUSH
// result := array diff 0 ;
41127: LD_ADDR_VAR 0 2
41131: PUSH
41132: LD_VAR 0 1
41136: PUSH
41137: LD_INT 0
41139: DIFF
41140: ST_TO_ADDR
// if not result [ 1 ] then
41141: LD_VAR 0 2
41145: PUSH
41146: LD_INT 1
41148: ARRAY
41149: NOT
41150: IFFALSE 41170
// result := Delete ( result , 1 ) ;
41152: LD_ADDR_VAR 0 2
41156: PUSH
41157: LD_VAR 0 2
41161: PPUSH
41162: LD_INT 1
41164: PPUSH
41165: CALL_OW 3
41169: ST_TO_ADDR
// end ;
41170: LD_VAR 0 2
41174: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
41175: LD_INT 0
41177: PPUSH
41178: PPUSH
41179: PPUSH
41180: PPUSH
// sibRocketRange := 25 ;
41181: LD_ADDR_VAR 0 6
41185: PUSH
41186: LD_INT 25
41188: ST_TO_ADDR
// result := false ;
41189: LD_ADDR_VAR 0 4
41193: PUSH
41194: LD_INT 0
41196: ST_TO_ADDR
// for i := 0 to 5 do
41197: LD_ADDR_VAR 0 5
41201: PUSH
41202: DOUBLE
41203: LD_INT 0
41205: DEC
41206: ST_TO_ADDR
41207: LD_INT 5
41209: PUSH
41210: FOR_TO
41211: IFFALSE 41278
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
41213: LD_VAR 0 1
41217: PPUSH
41218: LD_VAR 0 5
41222: PPUSH
41223: LD_VAR 0 6
41227: PPUSH
41228: CALL_OW 272
41232: PPUSH
41233: LD_VAR 0 2
41237: PPUSH
41238: LD_VAR 0 5
41242: PPUSH
41243: LD_VAR 0 6
41247: PPUSH
41248: CALL_OW 273
41252: PPUSH
41253: LD_VAR 0 3
41257: PPUSH
41258: CALL_OW 309
41262: IFFALSE 41276
// begin result := true ;
41264: LD_ADDR_VAR 0 4
41268: PUSH
41269: LD_INT 1
41271: ST_TO_ADDR
// exit ;
41272: POP
41273: POP
41274: GO 41280
// end ;
41276: GO 41210
41278: POP
41279: POP
// end ;
41280: LD_VAR 0 4
41284: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
41285: LD_INT 0
41287: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
41288: LD_VAR 0 1
41292: PPUSH
41293: LD_VAR 0 2
41297: PPUSH
41298: LD_INT 0
41300: PPUSH
41301: LD_INT 0
41303: PPUSH
41304: LD_INT 1
41306: PPUSH
41307: LD_INT 0
41309: PPUSH
41310: CALL_OW 587
// end ;
41314: LD_VAR 0 3
41318: RET
// export function CenterOnNow ( unit ) ; begin
41319: LD_INT 0
41321: PPUSH
// result := IsInUnit ( unit ) ;
41322: LD_ADDR_VAR 0 2
41326: PUSH
41327: LD_VAR 0 1
41331: PPUSH
41332: CALL_OW 310
41336: ST_TO_ADDR
// if not result then
41337: LD_VAR 0 2
41341: NOT
41342: IFFALSE 41354
// result := unit ;
41344: LD_ADDR_VAR 0 2
41348: PUSH
41349: LD_VAR 0 1
41353: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
41354: LD_VAR 0 1
41358: PPUSH
41359: CALL_OW 87
// end ;
41363: LD_VAR 0 2
41367: RET
// export function ComMoveHex ( unit , hex ) ; begin
41368: LD_INT 0
41370: PPUSH
// if not hex then
41371: LD_VAR 0 2
41375: NOT
41376: IFFALSE 41380
// exit ;
41378: GO 41433
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
41380: LD_VAR 0 2
41384: PUSH
41385: LD_INT 1
41387: ARRAY
41388: PPUSH
41389: LD_VAR 0 2
41393: PUSH
41394: LD_INT 2
41396: ARRAY
41397: PPUSH
41398: CALL_OW 428
41402: IFFALSE 41406
// exit ;
41404: GO 41433
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
41406: LD_VAR 0 1
41410: PPUSH
41411: LD_VAR 0 2
41415: PUSH
41416: LD_INT 1
41418: ARRAY
41419: PPUSH
41420: LD_VAR 0 2
41424: PUSH
41425: LD_INT 2
41427: ARRAY
41428: PPUSH
41429: CALL_OW 111
// end ;
41433: LD_VAR 0 3
41437: RET
