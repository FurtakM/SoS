// export mineCounter ; every 0 0$1 do var i , tmp , task ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
// begin mineCounter := 5 ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 5
  15: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  16: LD_INT 35
  18: PPUSH
  19: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  23: LD_ADDR_VAR 0 2
  27: PUSH
  28: LD_INT 22
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 23
  40: PUSH
  41: LD_INT 2
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: PPUSH
  63: CALL_OW 69
  67: ST_TO_ADDR
// if not tmp then
  68: LD_VAR 0 2
  72: NOT
  73: IFFALSE 77
// continue ;
  75: GO 16
// for i in tmp do
  77: LD_ADDR_VAR 0 1
  81: PUSH
  82: LD_VAR 0 2
  86: PUSH
  87: FOR_IN
  88: IFFALSE 277
// begin task := GetTaskList ( i ) ;
  90: LD_ADDR_VAR 0 3
  94: PUSH
  95: LD_VAR 0 1
  99: PPUSH
 100: CALL_OW 437
 104: ST_TO_ADDR
// if not task then
 105: LD_VAR 0 3
 109: NOT
 110: IFFALSE 126
// begin SetTag ( i , 0 ) ;
 112: LD_VAR 0 1
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: CALL_OW 109
// continue ;
 124: GO 87
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 126: LD_VAR 0 1
 130: PPUSH
 131: CALL_OW 110
 135: PUSH
 136: LD_INT 1
 138: EQUAL
 139: PUSH
 140: LD_VAR 0 3
 144: PUSH
 145: LD_INT 1
 147: ARRAY
 148: PUSH
 149: LD_INT 1
 151: ARRAY
 152: PUSH
 153: LD_STRING p
 155: NONEQUAL
 156: AND
 157: IFFALSE 173
// begin SetTag ( i , 0 ) ;
 159: LD_VAR 0 1
 163: PPUSH
 164: LD_INT 0
 166: PPUSH
 167: CALL_OW 109
// continue ;
 171: GO 87
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 173: LD_VAR 0 1
 177: PPUSH
 178: CALL_OW 110
 182: PUSH
 183: LD_INT 1
 185: NONEQUAL
 186: PUSH
 187: LD_VAR 0 3
 191: PUSH
 192: LD_INT 1
 194: ARRAY
 195: PUSH
 196: LD_INT 1
 198: ARRAY
 199: PUSH
 200: LD_STRING p
 202: EQUAL
 203: AND
 204: IFFALSE 275
// begin SetTag ( i , 1 ) ;
 206: LD_VAR 0 1
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 218: LD_INT 1
 220: PPUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: LD_VAR 0 3
 230: PUSH
 231: LD_INT 1
 233: ARRAY
 234: PUSH
 235: LD_INT 2
 237: ARRAY
 238: PPUSH
 239: LD_VAR 0 3
 243: PUSH
 244: LD_INT 1
 246: ARRAY
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PPUSH
 252: LD_VAR 0 3
 256: PUSH
 257: LD_INT 1
 259: ARRAY
 260: PUSH
 261: LD_INT 4
 263: ARRAY
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: LD_INT 0
 270: PPUSH
 271: CALL_OW 595
// end ; end ;
 275: GO 87
 277: POP
 278: POP
// until mineCounter = 0 ;
 279: LD_EXP 1
 283: PUSH
 284: LD_INT 0
 286: EQUAL
 287: IFFALSE 16
// end ;
 289: PPOPN 3
 291: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 292: LD_VAR 0 1
 296: PUSH
 297: LD_INT 1
 299: EQUAL
 300: IFFALSE 388
// begin repeat wait ( 0 0$1 ) ;
 302: LD_INT 35
 304: PPUSH
 305: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 309: LD_VAR 0 3
 313: PPUSH
 314: LD_VAR 0 4
 318: PPUSH
 319: CALL_OW 458
 323: PUSH
 324: LD_VAR 0 5
 328: PPUSH
 329: CALL_OW 250
 333: PPUSH
 334: LD_VAR 0 5
 338: PPUSH
 339: CALL_OW 251
 343: PPUSH
 344: CALL 391 0 2
 348: OR
 349: IFFALSE 353
// break ;
 351: GO 374
// if GetTag ( p1 ) <> 1 then
 353: LD_VAR 0 2
 357: PPUSH
 358: CALL_OW 110
 362: PUSH
 363: LD_INT 1
 365: NONEQUAL
 366: IFFALSE 370
// exit ;
 368: GO 388
// until false ;
 370: LD_INT 0
 372: IFFALSE 302
// mineCounter := mineCounter - 1 ;
 374: LD_ADDR_EXP 1
 378: PUSH
 379: LD_EXP 1
 383: PUSH
 384: LD_INT 1
 386: MINUS
 387: ST_TO_ADDR
// end ; end ;
 388: PPOPN 7
 390: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
// for _d := 0 to 5 do
 397: LD_ADDR_VAR 0 6
 401: PUSH
 402: DOUBLE
 403: LD_INT 0
 405: DEC
 406: ST_TO_ADDR
 407: LD_INT 5
 409: PUSH
 410: FOR_TO
 411: IFFALSE 519
// for _x := - 3 to 3 do
 413: LD_ADDR_VAR 0 4
 417: PUSH
 418: DOUBLE
 419: LD_INT 3
 421: NEG
 422: DEC
 423: ST_TO_ADDR
 424: LD_INT 3
 426: PUSH
 427: FOR_TO
 428: IFFALSE 515
// for _y := - 3 to 3 do
 430: LD_ADDR_VAR 0 5
 434: PUSH
 435: DOUBLE
 436: LD_INT 3
 438: NEG
 439: DEC
 440: ST_TO_ADDR
 441: LD_INT 3
 443: PUSH
 444: FOR_TO
 445: IFFALSE 511
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 447: LD_VAR 0 1
 451: PPUSH
 452: LD_VAR 0 6
 456: PPUSH
 457: LD_VAR 0 4
 461: PPUSH
 462: CALL_OW 272
 466: PPUSH
 467: LD_VAR 0 2
 471: PPUSH
 472: LD_VAR 0 6
 476: PPUSH
 477: LD_VAR 0 5
 481: PPUSH
 482: CALL_OW 273
 486: PPUSH
 487: CALL_OW 458
 491: IFFALSE 509
// begin result := true ;
 493: LD_ADDR_VAR 0 3
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// exit ;
 501: POP
 502: POP
 503: POP
 504: POP
 505: POP
 506: POP
 507: GO 521
// end ;
 509: GO 444
 511: POP
 512: POP
 513: GO 427
 515: POP
 516: POP
 517: GO 410
 519: POP
 520: POP
// end ;
 521: LD_VAR 0 3
 525: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 526: GO 528
 528: DISABLE
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
// begin x := 23 ;
 540: LD_ADDR_VAR 0 2
 544: PUSH
 545: LD_INT 23
 547: ST_TO_ADDR
// y := 19 ;
 548: LD_ADDR_VAR 0 3
 552: PUSH
 553: LD_INT 19
 555: ST_TO_ADDR
// uc_side := 8 ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_INT 8
 563: ST_TO_ADDR
// uc_nation := 1 ;
 564: LD_ADDR_OWVAR 21
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 572: LD_INT 0
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL_OW 381
// for _r := 1 to 6 do
 582: LD_ADDR_VAR 0 4
 586: PUSH
 587: DOUBLE
 588: LD_INT 1
 590: DEC
 591: ST_TO_ADDR
 592: LD_INT 6
 594: PUSH
 595: FOR_TO
 596: IFFALSE 748
// begin for _x := - _r to _r do
 598: LD_ADDR_VAR 0 5
 602: PUSH
 603: DOUBLE
 604: LD_VAR 0 4
 608: NEG
 609: DEC
 610: ST_TO_ADDR
 611: LD_VAR 0 4
 615: PUSH
 616: FOR_TO
 617: IFFALSE 744
// for _y := - _r to _r do
 619: LD_ADDR_VAR 0 6
 623: PUSH
 624: DOUBLE
 625: LD_VAR 0 4
 629: NEG
 630: DEC
 631: ST_TO_ADDR
 632: LD_VAR 0 4
 636: PUSH
 637: FOR_TO
 638: IFFALSE 740
// begin __x := x + _x ;
 640: LD_ADDR_VAR 0 8
 644: PUSH
 645: LD_VAR 0 2
 649: PUSH
 650: LD_VAR 0 5
 654: PLUS
 655: ST_TO_ADDR
// __y := y + _y ;
 656: LD_ADDR_VAR 0 9
 660: PUSH
 661: LD_VAR 0 3
 665: PUSH
 666: LD_VAR 0 6
 670: PLUS
 671: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 672: LD_VAR 0 8
 676: PPUSH
 677: LD_VAR 0 9
 681: PPUSH
 682: CALL_OW 428
 686: IFFALSE 690
// continue ;
 688: GO 637
// wait ( 1 ) ;
 690: LD_INT 1
 692: PPUSH
 693: CALL_OW 67
// un := CreateHuman ;
 697: LD_ADDR_VAR 0 1
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_VAR 0 8
 716: PPUSH
 717: LD_VAR 0 9
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 48
// ComHold ( un ) ;
 729: LD_VAR 0 1
 733: PPUSH
 734: CALL_OW 140
// end ;
 738: GO 637
 740: POP
 741: POP
 742: GO 616
 744: POP
 745: POP
// end ;
 746: GO 595
 748: POP
 749: POP
// end ;
 750: PPOPN 9
 752: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 753: LD_INT 0
 755: PPUSH
 756: PPUSH
 757: PPUSH
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
// enemySkilllevel := 2 ;
 766: LD_ADDR_VAR 0 16
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// uc_side := 1 ;
 774: LD_ADDR_OWVAR 20
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// uc_nation := 1 ;
 782: LD_ADDR_OWVAR 21
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// hc_name :=  ;
 790: LD_ADDR_OWVAR 26
 794: PUSH
 795: LD_STRING 
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_VAR 0 1
 820: PUSH
 821: FOR_TO
 822: IFFALSE 897
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 824: LD_INT 0
 826: PPUSH
 827: LD_VAR 0 16
 831: PPUSH
 832: CALL_OW 381
// un = CreateHuman ;
 836: LD_ADDR_VAR 0 9
 840: PUSH
 841: CALL_OW 44
 845: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 846: LD_ADDR_VAR 0 17
 850: PUSH
 851: LD_VAR 0 17
 855: PUSH
 856: LD_VAR 0 9
 860: ADD
 861: ST_TO_ADDR
// sols := sols ^ un ;
 862: LD_ADDR_VAR 0 12
 866: PUSH
 867: LD_VAR 0 12
 871: PUSH
 872: LD_VAR 0 9
 876: ADD
 877: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 878: LD_VAR 0 9
 882: PPUSH
 883: LD_VAR 0 6
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end ;
 895: GO 821
 897: POP
 898: POP
// for i := 1 to engsAmount do
 899: LD_ADDR_VAR 0 8
 903: PUSH
 904: DOUBLE
 905: LD_INT 1
 907: DEC
 908: ST_TO_ADDR
 909: LD_VAR 0 2
 913: PUSH
 914: FOR_TO
 915: IFFALSE 990
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 917: LD_INT 0
 919: PPUSH
 920: LD_VAR 0 16
 924: PPUSH
 925: CALL_OW 382
// un = CreateHuman ;
 929: LD_ADDR_VAR 0 9
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 939: LD_ADDR_VAR 0 17
 943: PUSH
 944: LD_VAR 0 17
 948: PUSH
 949: LD_VAR 0 9
 953: ADD
 954: ST_TO_ADDR
// engs := engs ^ un ;
 955: LD_ADDR_VAR 0 13
 959: PUSH
 960: LD_VAR 0 13
 964: PUSH
 965: LD_VAR 0 9
 969: ADD
 970: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 971: LD_VAR 0 9
 975: PPUSH
 976: LD_VAR 0 6
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// end ;
 988: GO 914
 990: POP
 991: POP
// for i := 1 to mechsAmount do
 992: LD_ADDR_VAR 0 8
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_VAR 0 3
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1083
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_VAR 0 16
1017: PPUSH
1018: CALL_OW 382
// un = CreateHuman ;
1022: LD_ADDR_VAR 0 9
1026: PUSH
1027: CALL_OW 44
1031: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1032: LD_ADDR_VAR 0 17
1036: PUSH
1037: LD_VAR 0 17
1041: PUSH
1042: LD_VAR 0 9
1046: ADD
1047: ST_TO_ADDR
// engs := engs ^ un ;
1048: LD_ADDR_VAR 0 13
1052: PUSH
1053: LD_VAR 0 13
1057: PUSH
1058: LD_VAR 0 9
1062: ADD
1063: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1064: LD_VAR 0 9
1068: PPUSH
1069: LD_VAR 0 6
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 1007
1083: POP
1084: POP
// for i := 1 to scientistsAmount do
1085: LD_ADDR_VAR 0 8
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 4
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1176
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1103: LD_INT 0
1105: PPUSH
1106: LD_VAR 0 16
1110: PPUSH
1111: CALL_OW 383
// un = CreateHuman ;
1115: LD_ADDR_VAR 0 9
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1125: LD_ADDR_VAR 0 17
1129: PUSH
1130: LD_VAR 0 17
1134: PUSH
1135: LD_VAR 0 9
1139: ADD
1140: ST_TO_ADDR
// mechs := mechs ^ un ;
1141: LD_ADDR_VAR 0 14
1145: PUSH
1146: LD_VAR 0 14
1150: PUSH
1151: LD_VAR 0 9
1155: ADD
1156: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1157: LD_VAR 0 9
1161: PPUSH
1162: LD_VAR 0 6
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: GO 1100
1176: POP
1177: POP
// for i := 1 to vehiclesAmount do
1178: LD_ADDR_VAR 0 8
1182: PUSH
1183: DOUBLE
1184: LD_INT 1
1186: DEC
1187: ST_TO_ADDR
1188: LD_VAR 0 5
1192: PUSH
1193: FOR_TO
1194: IFFALSE 1360
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1196: LD_ADDR_OWVAR 40
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: LD_INT 3
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 12
1225: ARRAY
1226: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1227: LD_ADDR_OWVAR 37
1231: PUSH
1232: LD_INT 3
1234: ST_TO_ADDR
// vc_control = control_manual ;
1235: LD_ADDR_OWVAR 38
1239: PUSH
1240: LD_INT 1
1242: ST_TO_ADDR
// vc_engine = engine_combustion ;
1243: LD_ADDR_OWVAR 39
1247: PUSH
1248: LD_INT 1
1250: ST_TO_ADDR
// veh = CreateVehicle ;
1251: LD_ADDR_VAR 0 10
1255: PUSH
1256: CALL_OW 45
1260: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1261: LD_ADDR_VAR 0 17
1265: PUSH
1266: LD_VAR 0 17
1270: PUSH
1271: LD_VAR 0 10
1275: ADD
1276: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1277: LD_VAR 0 10
1281: PPUSH
1282: LD_VAR 0 6
1286: PPUSH
1287: LD_INT 0
1289: PPUSH
1290: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1294: LD_INT 0
1296: PPUSH
1297: LD_VAR 0 16
1301: PPUSH
1302: CALL_OW 383
// un = CreateHuman ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1316: LD_ADDR_VAR 0 17
1320: PUSH
1321: LD_VAR 0 17
1325: PUSH
1326: LD_VAR 0 9
1330: ADD
1331: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1332: LD_VAR 0 9
1336: PPUSH
1337: LD_VAR 0 10
1341: PPUSH
1342: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1346: LD_VAR 0 10
1350: PPUSH
1351: LD_INT 100
1353: PPUSH
1354: CALL_OW 240
// end ;
1358: GO 1193
1360: POP
1361: POP
// end ; end_of_file
1362: LD_VAR 0 7
1366: RET
// export globalGameSaveCounter ; every 0 0$1 do
1367: GO 1369
1369: DISABLE
// begin enable ;
1370: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1371: LD_STRING updateTimer(
1373: PUSH
1374: LD_OWVAR 1
1378: STR
1379: PUSH
1380: LD_STRING );
1382: STR
1383: PPUSH
1384: CALL_OW 559
// end ;
1388: END
// every 0 0$1 do
1389: GO 1391
1391: DISABLE
// begin globalGameSaveCounter := 0 ;
1392: LD_ADDR_EXP 2
1396: PUSH
1397: LD_INT 0
1399: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1400: LD_STRING setGameSaveCounter(0)
1402: PPUSH
1403: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1407: LD_STRING initStreamRollete();
1409: PPUSH
1410: CALL_OW 559
// InitStreamMode ;
1414: CALL 2740 0 0
// DefineStreamItems ( false ) ;
1418: LD_INT 0
1420: PPUSH
1421: CALL 3204 0 1
// end ;
1425: END
// export function SOS_MapStart ( ) ; begin
1426: LD_INT 0
1428: PPUSH
// if streamModeActive then
1429: LD_EXP 3
1433: IFFALSE 1442
// DefineStreamItems ( true ) ;
1435: LD_INT 1
1437: PPUSH
1438: CALL 3204 0 1
// UpdateLuaVariables ( ) ;
1442: CALL 1459 0 0
// UpdateFactoryWaypoints ( ) ;
1446: CALL 16065 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1450: CALL 16322 0 0
// end ;
1454: LD_VAR 0 1
1458: RET
// function UpdateLuaVariables ( ) ; begin
1459: LD_INT 0
1461: PPUSH
// if globalGameSaveCounter then
1462: LD_EXP 2
1466: IFFALSE 1500
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1468: LD_ADDR_EXP 2
1472: PUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 60501 0 1
1482: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1483: LD_STRING setGameSaveCounter(
1485: PUSH
1486: LD_EXP 2
1490: STR
1491: PUSH
1492: LD_STRING )
1494: STR
1495: PPUSH
1496: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1500: LD_STRING setGameDifficulty(
1502: PUSH
1503: LD_OWVAR 67
1507: STR
1508: PUSH
1509: LD_STRING )
1511: STR
1512: PPUSH
1513: CALL_OW 559
// end ;
1517: LD_VAR 0 1
1521: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1522: LD_INT 0
1524: PPUSH
// if p2 = stream_mode then
1525: LD_VAR 0 2
1529: PUSH
1530: LD_INT 100
1532: EQUAL
1533: IFFALSE 2536
// begin if not StreamModeActive then
1535: LD_EXP 3
1539: NOT
1540: IFFALSE 1550
// StreamModeActive := true ;
1542: LD_ADDR_EXP 3
1546: PUSH
1547: LD_INT 1
1549: ST_TO_ADDR
// if p3 = 0 then
1550: LD_VAR 0 3
1554: PUSH
1555: LD_INT 0
1557: EQUAL
1558: IFFALSE 1564
// InitStreamMode ;
1560: CALL 2740 0 0
// if p3 = 1 then
1564: LD_VAR 0 3
1568: PUSH
1569: LD_INT 1
1571: EQUAL
1572: IFFALSE 1582
// sRocket := true ;
1574: LD_ADDR_EXP 8
1578: PUSH
1579: LD_INT 1
1581: ST_TO_ADDR
// if p3 = 2 then
1582: LD_VAR 0 3
1586: PUSH
1587: LD_INT 2
1589: EQUAL
1590: IFFALSE 1600
// sSpeed := true ;
1592: LD_ADDR_EXP 7
1596: PUSH
1597: LD_INT 1
1599: ST_TO_ADDR
// if p3 = 3 then
1600: LD_VAR 0 3
1604: PUSH
1605: LD_INT 3
1607: EQUAL
1608: IFFALSE 1618
// sEngine := true ;
1610: LD_ADDR_EXP 9
1614: PUSH
1615: LD_INT 1
1617: ST_TO_ADDR
// if p3 = 4 then
1618: LD_VAR 0 3
1622: PUSH
1623: LD_INT 4
1625: EQUAL
1626: IFFALSE 1636
// sSpec := true ;
1628: LD_ADDR_EXP 6
1632: PUSH
1633: LD_INT 1
1635: ST_TO_ADDR
// if p3 = 5 then
1636: LD_VAR 0 3
1640: PUSH
1641: LD_INT 5
1643: EQUAL
1644: IFFALSE 1654
// sLevel := true ;
1646: LD_ADDR_EXP 10
1650: PUSH
1651: LD_INT 1
1653: ST_TO_ADDR
// if p3 = 6 then
1654: LD_VAR 0 3
1658: PUSH
1659: LD_INT 6
1661: EQUAL
1662: IFFALSE 1672
// sArmoury := true ;
1664: LD_ADDR_EXP 11
1668: PUSH
1669: LD_INT 1
1671: ST_TO_ADDR
// if p3 = 7 then
1672: LD_VAR 0 3
1676: PUSH
1677: LD_INT 7
1679: EQUAL
1680: IFFALSE 1690
// sRadar := true ;
1682: LD_ADDR_EXP 12
1686: PUSH
1687: LD_INT 1
1689: ST_TO_ADDR
// if p3 = 8 then
1690: LD_VAR 0 3
1694: PUSH
1695: LD_INT 8
1697: EQUAL
1698: IFFALSE 1708
// sBunker := true ;
1700: LD_ADDR_EXP 13
1704: PUSH
1705: LD_INT 1
1707: ST_TO_ADDR
// if p3 = 9 then
1708: LD_VAR 0 3
1712: PUSH
1713: LD_INT 9
1715: EQUAL
1716: IFFALSE 1726
// sHack := true ;
1718: LD_ADDR_EXP 14
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// if p3 = 10 then
1726: LD_VAR 0 3
1730: PUSH
1731: LD_INT 10
1733: EQUAL
1734: IFFALSE 1744
// sFire := true ;
1736: LD_ADDR_EXP 15
1740: PUSH
1741: LD_INT 1
1743: ST_TO_ADDR
// if p3 = 11 then
1744: LD_VAR 0 3
1748: PUSH
1749: LD_INT 11
1751: EQUAL
1752: IFFALSE 1762
// sRefresh := true ;
1754: LD_ADDR_EXP 16
1758: PUSH
1759: LD_INT 1
1761: ST_TO_ADDR
// if p3 = 12 then
1762: LD_VAR 0 3
1766: PUSH
1767: LD_INT 12
1769: EQUAL
1770: IFFALSE 1780
// sExp := true ;
1772: LD_ADDR_EXP 17
1776: PUSH
1777: LD_INT 1
1779: ST_TO_ADDR
// if p3 = 13 then
1780: LD_VAR 0 3
1784: PUSH
1785: LD_INT 13
1787: EQUAL
1788: IFFALSE 1798
// sDepot := true ;
1790: LD_ADDR_EXP 18
1794: PUSH
1795: LD_INT 1
1797: ST_TO_ADDR
// if p3 = 14 then
1798: LD_VAR 0 3
1802: PUSH
1803: LD_INT 14
1805: EQUAL
1806: IFFALSE 1816
// sFlag := true ;
1808: LD_ADDR_EXP 19
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// if p3 = 15 then
1816: LD_VAR 0 3
1820: PUSH
1821: LD_INT 15
1823: EQUAL
1824: IFFALSE 1834
// sKamikadze := true ;
1826: LD_ADDR_EXP 27
1830: PUSH
1831: LD_INT 1
1833: ST_TO_ADDR
// if p3 = 16 then
1834: LD_VAR 0 3
1838: PUSH
1839: LD_INT 16
1841: EQUAL
1842: IFFALSE 1852
// sTroll := true ;
1844: LD_ADDR_EXP 28
1848: PUSH
1849: LD_INT 1
1851: ST_TO_ADDR
// if p3 = 17 then
1852: LD_VAR 0 3
1856: PUSH
1857: LD_INT 17
1859: EQUAL
1860: IFFALSE 1870
// sSlow := true ;
1862: LD_ADDR_EXP 29
1866: PUSH
1867: LD_INT 1
1869: ST_TO_ADDR
// if p3 = 18 then
1870: LD_VAR 0 3
1874: PUSH
1875: LD_INT 18
1877: EQUAL
1878: IFFALSE 1888
// sLack := true ;
1880: LD_ADDR_EXP 30
1884: PUSH
1885: LD_INT 1
1887: ST_TO_ADDR
// if p3 = 19 then
1888: LD_VAR 0 3
1892: PUSH
1893: LD_INT 19
1895: EQUAL
1896: IFFALSE 1906
// sTank := true ;
1898: LD_ADDR_EXP 32
1902: PUSH
1903: LD_INT 1
1905: ST_TO_ADDR
// if p3 = 20 then
1906: LD_VAR 0 3
1910: PUSH
1911: LD_INT 20
1913: EQUAL
1914: IFFALSE 1924
// sRemote := true ;
1916: LD_ADDR_EXP 33
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// if p3 = 21 then
1924: LD_VAR 0 3
1928: PUSH
1929: LD_INT 21
1931: EQUAL
1932: IFFALSE 1942
// sPowell := true ;
1934: LD_ADDR_EXP 34
1938: PUSH
1939: LD_INT 1
1941: ST_TO_ADDR
// if p3 = 22 then
1942: LD_VAR 0 3
1946: PUSH
1947: LD_INT 22
1949: EQUAL
1950: IFFALSE 1960
// sTeleport := true ;
1952: LD_ADDR_EXP 37
1956: PUSH
1957: LD_INT 1
1959: ST_TO_ADDR
// if p3 = 23 then
1960: LD_VAR 0 3
1964: PUSH
1965: LD_INT 23
1967: EQUAL
1968: IFFALSE 1978
// sOilTower := true ;
1970: LD_ADDR_EXP 39
1974: PUSH
1975: LD_INT 1
1977: ST_TO_ADDR
// if p3 = 24 then
1978: LD_VAR 0 3
1982: PUSH
1983: LD_INT 24
1985: EQUAL
1986: IFFALSE 1996
// sShovel := true ;
1988: LD_ADDR_EXP 40
1992: PUSH
1993: LD_INT 1
1995: ST_TO_ADDR
// if p3 = 25 then
1996: LD_VAR 0 3
2000: PUSH
2001: LD_INT 25
2003: EQUAL
2004: IFFALSE 2014
// sSheik := true ;
2006: LD_ADDR_EXP 41
2010: PUSH
2011: LD_INT 1
2013: ST_TO_ADDR
// if p3 = 26 then
2014: LD_VAR 0 3
2018: PUSH
2019: LD_INT 26
2021: EQUAL
2022: IFFALSE 2032
// sEarthquake := true ;
2024: LD_ADDR_EXP 43
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// if p3 = 27 then
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 27
2039: EQUAL
2040: IFFALSE 2050
// sAI := true ;
2042: LD_ADDR_EXP 44
2046: PUSH
2047: LD_INT 1
2049: ST_TO_ADDR
// if p3 = 28 then
2050: LD_VAR 0 3
2054: PUSH
2055: LD_INT 28
2057: EQUAL
2058: IFFALSE 2068
// sCargo := true ;
2060: LD_ADDR_EXP 47
2064: PUSH
2065: LD_INT 1
2067: ST_TO_ADDR
// if p3 = 29 then
2068: LD_VAR 0 3
2072: PUSH
2073: LD_INT 29
2075: EQUAL
2076: IFFALSE 2086
// sDLaser := true ;
2078: LD_ADDR_EXP 48
2082: PUSH
2083: LD_INT 1
2085: ST_TO_ADDR
// if p3 = 30 then
2086: LD_VAR 0 3
2090: PUSH
2091: LD_INT 30
2093: EQUAL
2094: IFFALSE 2104
// sExchange := true ;
2096: LD_ADDR_EXP 49
2100: PUSH
2101: LD_INT 1
2103: ST_TO_ADDR
// if p3 = 31 then
2104: LD_VAR 0 3
2108: PUSH
2109: LD_INT 31
2111: EQUAL
2112: IFFALSE 2122
// sFac := true ;
2114: LD_ADDR_EXP 50
2118: PUSH
2119: LD_INT 1
2121: ST_TO_ADDR
// if p3 = 32 then
2122: LD_VAR 0 3
2126: PUSH
2127: LD_INT 32
2129: EQUAL
2130: IFFALSE 2140
// sPower := true ;
2132: LD_ADDR_EXP 51
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// if p3 = 33 then
2140: LD_VAR 0 3
2144: PUSH
2145: LD_INT 33
2147: EQUAL
2148: IFFALSE 2158
// sRandom := true ;
2150: LD_ADDR_EXP 52
2154: PUSH
2155: LD_INT 1
2157: ST_TO_ADDR
// if p3 = 34 then
2158: LD_VAR 0 3
2162: PUSH
2163: LD_INT 34
2165: EQUAL
2166: IFFALSE 2176
// sShield := true ;
2168: LD_ADDR_EXP 53
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// if p3 = 35 then
2176: LD_VAR 0 3
2180: PUSH
2181: LD_INT 35
2183: EQUAL
2184: IFFALSE 2194
// sTime := true ;
2186: LD_ADDR_EXP 54
2190: PUSH
2191: LD_INT 1
2193: ST_TO_ADDR
// if p3 = 36 then
2194: LD_VAR 0 3
2198: PUSH
2199: LD_INT 36
2201: EQUAL
2202: IFFALSE 2212
// sTools := true ;
2204: LD_ADDR_EXP 55
2208: PUSH
2209: LD_INT 1
2211: ST_TO_ADDR
// if p3 = 101 then
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 101
2219: EQUAL
2220: IFFALSE 2230
// sSold := true ;
2222: LD_ADDR_EXP 20
2226: PUSH
2227: LD_INT 1
2229: ST_TO_ADDR
// if p3 = 102 then
2230: LD_VAR 0 3
2234: PUSH
2235: LD_INT 102
2237: EQUAL
2238: IFFALSE 2248
// sDiff := true ;
2240: LD_ADDR_EXP 21
2244: PUSH
2245: LD_INT 1
2247: ST_TO_ADDR
// if p3 = 103 then
2248: LD_VAR 0 3
2252: PUSH
2253: LD_INT 103
2255: EQUAL
2256: IFFALSE 2266
// sFog := true ;
2258: LD_ADDR_EXP 24
2262: PUSH
2263: LD_INT 1
2265: ST_TO_ADDR
// if p3 = 104 then
2266: LD_VAR 0 3
2270: PUSH
2271: LD_INT 104
2273: EQUAL
2274: IFFALSE 2284
// sReset := true ;
2276: LD_ADDR_EXP 25
2280: PUSH
2281: LD_INT 1
2283: ST_TO_ADDR
// if p3 = 105 then
2284: LD_VAR 0 3
2288: PUSH
2289: LD_INT 105
2291: EQUAL
2292: IFFALSE 2302
// sSun := true ;
2294: LD_ADDR_EXP 26
2298: PUSH
2299: LD_INT 1
2301: ST_TO_ADDR
// if p3 = 106 then
2302: LD_VAR 0 3
2306: PUSH
2307: LD_INT 106
2309: EQUAL
2310: IFFALSE 2320
// sTiger := true ;
2312: LD_ADDR_EXP 22
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// if p3 = 107 then
2320: LD_VAR 0 3
2324: PUSH
2325: LD_INT 107
2327: EQUAL
2328: IFFALSE 2338
// sBomb := true ;
2330: LD_ADDR_EXP 23
2334: PUSH
2335: LD_INT 1
2337: ST_TO_ADDR
// if p3 = 108 then
2338: LD_VAR 0 3
2342: PUSH
2343: LD_INT 108
2345: EQUAL
2346: IFFALSE 2356
// sWound := true ;
2348: LD_ADDR_EXP 31
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if p3 = 109 then
2356: LD_VAR 0 3
2360: PUSH
2361: LD_INT 109
2363: EQUAL
2364: IFFALSE 2374
// sBetray := true ;
2366: LD_ADDR_EXP 35
2370: PUSH
2371: LD_INT 1
2373: ST_TO_ADDR
// if p3 = 110 then
2374: LD_VAR 0 3
2378: PUSH
2379: LD_INT 110
2381: EQUAL
2382: IFFALSE 2392
// sContamin := true ;
2384: LD_ADDR_EXP 36
2388: PUSH
2389: LD_INT 1
2391: ST_TO_ADDR
// if p3 = 111 then
2392: LD_VAR 0 3
2396: PUSH
2397: LD_INT 111
2399: EQUAL
2400: IFFALSE 2410
// sOil := true ;
2402: LD_ADDR_EXP 38
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// if p3 = 112 then
2410: LD_VAR 0 3
2414: PUSH
2415: LD_INT 112
2417: EQUAL
2418: IFFALSE 2428
// sStu := true ;
2420: LD_ADDR_EXP 42
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// if p3 = 113 then
2428: LD_VAR 0 3
2432: PUSH
2433: LD_INT 113
2435: EQUAL
2436: IFFALSE 2446
// sBazooka := true ;
2438: LD_ADDR_EXP 45
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// if p3 = 114 then
2446: LD_VAR 0 3
2450: PUSH
2451: LD_INT 114
2453: EQUAL
2454: IFFALSE 2464
// sMortar := true ;
2456: LD_ADDR_EXP 46
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// if p3 = 115 then
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 115
2471: EQUAL
2472: IFFALSE 2482
// sRanger := true ;
2474: LD_ADDR_EXP 56
2478: PUSH
2479: LD_INT 1
2481: ST_TO_ADDR
// if p3 = 116 then
2482: LD_VAR 0 3
2486: PUSH
2487: LD_INT 116
2489: EQUAL
2490: IFFALSE 2500
// sComputer := true ;
2492: LD_ADDR_EXP 57
2496: PUSH
2497: LD_INT 1
2499: ST_TO_ADDR
// if p3 = 117 then
2500: LD_VAR 0 3
2504: PUSH
2505: LD_INT 117
2507: EQUAL
2508: IFFALSE 2518
// s30 := true ;
2510: LD_ADDR_EXP 58
2514: PUSH
2515: LD_INT 1
2517: ST_TO_ADDR
// if p3 = 118 then
2518: LD_VAR 0 3
2522: PUSH
2523: LD_INT 118
2525: EQUAL
2526: IFFALSE 2536
// s60 := true ;
2528: LD_ADDR_EXP 59
2532: PUSH
2533: LD_INT 1
2535: ST_TO_ADDR
// end ; if p2 = hack_mode then
2536: LD_VAR 0 2
2540: PUSH
2541: LD_INT 101
2543: EQUAL
2544: IFFALSE 2672
// begin case p3 of 1 :
2546: LD_VAR 0 3
2550: PUSH
2551: LD_INT 1
2553: DOUBLE
2554: EQUAL
2555: IFTRUE 2559
2557: GO 2566
2559: POP
// hHackUnlimitedResources ; 2 :
2560: CALL 14811 0 0
2564: GO 2672
2566: LD_INT 2
2568: DOUBLE
2569: EQUAL
2570: IFTRUE 2574
2572: GO 2581
2574: POP
// hHackSetLevel10 ; 3 :
2575: CALL 14944 0 0
2579: GO 2672
2581: LD_INT 3
2583: DOUBLE
2584: EQUAL
2585: IFTRUE 2589
2587: GO 2596
2589: POP
// hHackSetLevel10YourUnits ; 4 :
2590: CALL 15029 0 0
2594: GO 2672
2596: LD_INT 4
2598: DOUBLE
2599: EQUAL
2600: IFTRUE 2604
2602: GO 2611
2604: POP
// hHackInvincible ; 5 :
2605: CALL 15477 0 0
2609: GO 2672
2611: LD_INT 5
2613: DOUBLE
2614: EQUAL
2615: IFTRUE 2619
2617: GO 2626
2619: POP
// hHackInvisible ; 6 :
2620: CALL 15588 0 0
2624: GO 2672
2626: LD_INT 6
2628: DOUBLE
2629: EQUAL
2630: IFTRUE 2634
2632: GO 2641
2634: POP
// hHackChangeYourSide ; 7 :
2635: CALL 15645 0 0
2639: GO 2672
2641: LD_INT 7
2643: DOUBLE
2644: EQUAL
2645: IFTRUE 2649
2647: GO 2656
2649: POP
// hHackChangeUnitSide ; 8 :
2650: CALL 15687 0 0
2654: GO 2672
2656: LD_INT 8
2658: DOUBLE
2659: EQUAL
2660: IFTRUE 2664
2662: GO 2671
2664: POP
// hHackFog ; end ;
2665: CALL 15788 0 0
2669: GO 2672
2671: POP
// end ; if p2 = game_save_mode then
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 102
2679: EQUAL
2680: IFFALSE 2735
// begin if p3 = 1 then
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 1
2689: EQUAL
2690: IFFALSE 2702
// globalGameSaveCounter := p4 ;
2692: LD_ADDR_EXP 2
2696: PUSH
2697: LD_VAR 0 4
2701: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
2702: LD_VAR 0 3
2706: PUSH
2707: LD_INT 2
2709: EQUAL
2710: PUSH
2711: LD_EXP 2
2715: AND
2716: IFFALSE 2735
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2718: LD_STRING setGameSaveCounter(
2720: PUSH
2721: LD_EXP 2
2725: STR
2726: PUSH
2727: LD_STRING )
2729: STR
2730: PPUSH
2731: CALL_OW 559
// end ; end ;
2735: LD_VAR 0 7
2739: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
2740: LD_INT 0
2742: PPUSH
// streamModeActive := false ;
2743: LD_ADDR_EXP 3
2747: PUSH
2748: LD_INT 0
2750: ST_TO_ADDR
// normalCounter := 36 ;
2751: LD_ADDR_EXP 4
2755: PUSH
2756: LD_INT 36
2758: ST_TO_ADDR
// hardcoreCounter := 18 ;
2759: LD_ADDR_EXP 5
2763: PUSH
2764: LD_INT 18
2766: ST_TO_ADDR
// sRocket := false ;
2767: LD_ADDR_EXP 8
2771: PUSH
2772: LD_INT 0
2774: ST_TO_ADDR
// sSpeed := false ;
2775: LD_ADDR_EXP 7
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// sEngine := false ;
2783: LD_ADDR_EXP 9
2787: PUSH
2788: LD_INT 0
2790: ST_TO_ADDR
// sSpec := false ;
2791: LD_ADDR_EXP 6
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// sLevel := false ;
2799: LD_ADDR_EXP 10
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// sArmoury := false ;
2807: LD_ADDR_EXP 11
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// sRadar := false ;
2815: LD_ADDR_EXP 12
2819: PUSH
2820: LD_INT 0
2822: ST_TO_ADDR
// sBunker := false ;
2823: LD_ADDR_EXP 13
2827: PUSH
2828: LD_INT 0
2830: ST_TO_ADDR
// sHack := false ;
2831: LD_ADDR_EXP 14
2835: PUSH
2836: LD_INT 0
2838: ST_TO_ADDR
// sFire := false ;
2839: LD_ADDR_EXP 15
2843: PUSH
2844: LD_INT 0
2846: ST_TO_ADDR
// sRefresh := false ;
2847: LD_ADDR_EXP 16
2851: PUSH
2852: LD_INT 0
2854: ST_TO_ADDR
// sExp := false ;
2855: LD_ADDR_EXP 17
2859: PUSH
2860: LD_INT 0
2862: ST_TO_ADDR
// sDepot := false ;
2863: LD_ADDR_EXP 18
2867: PUSH
2868: LD_INT 0
2870: ST_TO_ADDR
// sFlag := false ;
2871: LD_ADDR_EXP 19
2875: PUSH
2876: LD_INT 0
2878: ST_TO_ADDR
// sKamikadze := false ;
2879: LD_ADDR_EXP 27
2883: PUSH
2884: LD_INT 0
2886: ST_TO_ADDR
// sTroll := false ;
2887: LD_ADDR_EXP 28
2891: PUSH
2892: LD_INT 0
2894: ST_TO_ADDR
// sSlow := false ;
2895: LD_ADDR_EXP 29
2899: PUSH
2900: LD_INT 0
2902: ST_TO_ADDR
// sLack := false ;
2903: LD_ADDR_EXP 30
2907: PUSH
2908: LD_INT 0
2910: ST_TO_ADDR
// sTank := false ;
2911: LD_ADDR_EXP 32
2915: PUSH
2916: LD_INT 0
2918: ST_TO_ADDR
// sRemote := false ;
2919: LD_ADDR_EXP 33
2923: PUSH
2924: LD_INT 0
2926: ST_TO_ADDR
// sPowell := false ;
2927: LD_ADDR_EXP 34
2931: PUSH
2932: LD_INT 0
2934: ST_TO_ADDR
// sTeleport := false ;
2935: LD_ADDR_EXP 37
2939: PUSH
2940: LD_INT 0
2942: ST_TO_ADDR
// sOilTower := false ;
2943: LD_ADDR_EXP 39
2947: PUSH
2948: LD_INT 0
2950: ST_TO_ADDR
// sShovel := false ;
2951: LD_ADDR_EXP 40
2955: PUSH
2956: LD_INT 0
2958: ST_TO_ADDR
// sSheik := false ;
2959: LD_ADDR_EXP 41
2963: PUSH
2964: LD_INT 0
2966: ST_TO_ADDR
// sEarthquake := false ;
2967: LD_ADDR_EXP 43
2971: PUSH
2972: LD_INT 0
2974: ST_TO_ADDR
// sAI := false ;
2975: LD_ADDR_EXP 44
2979: PUSH
2980: LD_INT 0
2982: ST_TO_ADDR
// sCargo := false ;
2983: LD_ADDR_EXP 47
2987: PUSH
2988: LD_INT 0
2990: ST_TO_ADDR
// sDLaser := false ;
2991: LD_ADDR_EXP 48
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// sExchange := false ;
2999: LD_ADDR_EXP 49
3003: PUSH
3004: LD_INT 0
3006: ST_TO_ADDR
// sFac := false ;
3007: LD_ADDR_EXP 50
3011: PUSH
3012: LD_INT 0
3014: ST_TO_ADDR
// sPower := false ;
3015: LD_ADDR_EXP 51
3019: PUSH
3020: LD_INT 0
3022: ST_TO_ADDR
// sRandom := false ;
3023: LD_ADDR_EXP 52
3027: PUSH
3028: LD_INT 0
3030: ST_TO_ADDR
// sShield := false ;
3031: LD_ADDR_EXP 53
3035: PUSH
3036: LD_INT 0
3038: ST_TO_ADDR
// sTime := false ;
3039: LD_ADDR_EXP 54
3043: PUSH
3044: LD_INT 0
3046: ST_TO_ADDR
// sTools := false ;
3047: LD_ADDR_EXP 55
3051: PUSH
3052: LD_INT 0
3054: ST_TO_ADDR
// sSold := false ;
3055: LD_ADDR_EXP 20
3059: PUSH
3060: LD_INT 0
3062: ST_TO_ADDR
// sDiff := false ;
3063: LD_ADDR_EXP 21
3067: PUSH
3068: LD_INT 0
3070: ST_TO_ADDR
// sFog := false ;
3071: LD_ADDR_EXP 24
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// sReset := false ;
3079: LD_ADDR_EXP 25
3083: PUSH
3084: LD_INT 0
3086: ST_TO_ADDR
// sSun := false ;
3087: LD_ADDR_EXP 26
3091: PUSH
3092: LD_INT 0
3094: ST_TO_ADDR
// sTiger := false ;
3095: LD_ADDR_EXP 22
3099: PUSH
3100: LD_INT 0
3102: ST_TO_ADDR
// sBomb := false ;
3103: LD_ADDR_EXP 23
3107: PUSH
3108: LD_INT 0
3110: ST_TO_ADDR
// sWound := false ;
3111: LD_ADDR_EXP 31
3115: PUSH
3116: LD_INT 0
3118: ST_TO_ADDR
// sBetray := false ;
3119: LD_ADDR_EXP 35
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// sContamin := false ;
3127: LD_ADDR_EXP 36
3131: PUSH
3132: LD_INT 0
3134: ST_TO_ADDR
// sOil := false ;
3135: LD_ADDR_EXP 38
3139: PUSH
3140: LD_INT 0
3142: ST_TO_ADDR
// sStu := false ;
3143: LD_ADDR_EXP 42
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// sBazooka := false ;
3151: LD_ADDR_EXP 45
3155: PUSH
3156: LD_INT 0
3158: ST_TO_ADDR
// sMortar := false ;
3159: LD_ADDR_EXP 46
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// sRanger := false ;
3167: LD_ADDR_EXP 56
3171: PUSH
3172: LD_INT 0
3174: ST_TO_ADDR
// sComputer := false ;
3175: LD_ADDR_EXP 57
3179: PUSH
3180: LD_INT 0
3182: ST_TO_ADDR
// s30 := false ;
3183: LD_ADDR_EXP 58
3187: PUSH
3188: LD_INT 0
3190: ST_TO_ADDR
// s60 := false ;
3191: LD_ADDR_EXP 59
3195: PUSH
3196: LD_INT 0
3198: ST_TO_ADDR
// end ;
3199: LD_VAR 0 1
3203: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3204: LD_INT 0
3206: PPUSH
3207: PPUSH
3208: PPUSH
3209: PPUSH
3210: PPUSH
3211: PPUSH
3212: PPUSH
// result := [ ] ;
3213: LD_ADDR_VAR 0 2
3217: PUSH
3218: EMPTY
3219: ST_TO_ADDR
// if campaign_id = 1 then
3220: LD_OWVAR 69
3224: PUSH
3225: LD_INT 1
3227: EQUAL
3228: IFFALSE 6394
// begin case mission_number of 1 :
3230: LD_OWVAR 70
3234: PUSH
3235: LD_INT 1
3237: DOUBLE
3238: EQUAL
3239: IFTRUE 3243
3241: GO 3319
3243: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3244: LD_ADDR_VAR 0 2
3248: PUSH
3249: LD_INT 2
3251: PUSH
3252: LD_INT 4
3254: PUSH
3255: LD_INT 11
3257: PUSH
3258: LD_INT 12
3260: PUSH
3261: LD_INT 15
3263: PUSH
3264: LD_INT 16
3266: PUSH
3267: LD_INT 22
3269: PUSH
3270: LD_INT 23
3272: PUSH
3273: LD_INT 26
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 101
3289: PUSH
3290: LD_INT 102
3292: PUSH
3293: LD_INT 106
3295: PUSH
3296: LD_INT 116
3298: PUSH
3299: LD_INT 117
3301: PUSH
3302: LD_INT 118
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: ST_TO_ADDR
3317: GO 6392
3319: LD_INT 2
3321: DOUBLE
3322: EQUAL
3323: IFTRUE 3327
3325: GO 3411
3327: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3328: LD_ADDR_VAR 0 2
3332: PUSH
3333: LD_INT 2
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: LD_INT 11
3341: PUSH
3342: LD_INT 12
3344: PUSH
3345: LD_INT 15
3347: PUSH
3348: LD_INT 16
3350: PUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 23
3356: PUSH
3357: LD_INT 26
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 101
3373: PUSH
3374: LD_INT 102
3376: PUSH
3377: LD_INT 105
3379: PUSH
3380: LD_INT 106
3382: PUSH
3383: LD_INT 108
3385: PUSH
3386: LD_INT 116
3388: PUSH
3389: LD_INT 117
3391: PUSH
3392: LD_INT 118
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: ST_TO_ADDR
3409: GO 6392
3411: LD_INT 3
3413: DOUBLE
3414: EQUAL
3415: IFTRUE 3419
3417: GO 3507
3419: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3420: LD_ADDR_VAR 0 2
3424: PUSH
3425: LD_INT 2
3427: PUSH
3428: LD_INT 4
3430: PUSH
3431: LD_INT 5
3433: PUSH
3434: LD_INT 11
3436: PUSH
3437: LD_INT 12
3439: PUSH
3440: LD_INT 15
3442: PUSH
3443: LD_INT 16
3445: PUSH
3446: LD_INT 22
3448: PUSH
3449: LD_INT 26
3451: PUSH
3452: LD_INT 36
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: PUSH
3467: LD_INT 101
3469: PUSH
3470: LD_INT 102
3472: PUSH
3473: LD_INT 105
3475: PUSH
3476: LD_INT 106
3478: PUSH
3479: LD_INT 108
3481: PUSH
3482: LD_INT 116
3484: PUSH
3485: LD_INT 117
3487: PUSH
3488: LD_INT 118
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: ST_TO_ADDR
3505: GO 6392
3507: LD_INT 4
3509: DOUBLE
3510: EQUAL
3511: IFTRUE 3515
3513: GO 3611
3515: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3516: LD_ADDR_VAR 0 2
3520: PUSH
3521: LD_INT 2
3523: PUSH
3524: LD_INT 4
3526: PUSH
3527: LD_INT 5
3529: PUSH
3530: LD_INT 8
3532: PUSH
3533: LD_INT 11
3535: PUSH
3536: LD_INT 12
3538: PUSH
3539: LD_INT 15
3541: PUSH
3542: LD_INT 16
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: LD_INT 23
3550: PUSH
3551: LD_INT 26
3553: PUSH
3554: LD_INT 36
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 101
3573: PUSH
3574: LD_INT 102
3576: PUSH
3577: LD_INT 105
3579: PUSH
3580: LD_INT 106
3582: PUSH
3583: LD_INT 108
3585: PUSH
3586: LD_INT 116
3588: PUSH
3589: LD_INT 117
3591: PUSH
3592: LD_INT 118
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: ST_TO_ADDR
3609: GO 6392
3611: LD_INT 5
3613: DOUBLE
3614: EQUAL
3615: IFTRUE 3619
3617: GO 3731
3619: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3620: LD_ADDR_VAR 0 2
3624: PUSH
3625: LD_INT 2
3627: PUSH
3628: LD_INT 4
3630: PUSH
3631: LD_INT 5
3633: PUSH
3634: LD_INT 6
3636: PUSH
3637: LD_INT 8
3639: PUSH
3640: LD_INT 11
3642: PUSH
3643: LD_INT 12
3645: PUSH
3646: LD_INT 15
3648: PUSH
3649: LD_INT 16
3651: PUSH
3652: LD_INT 22
3654: PUSH
3655: LD_INT 23
3657: PUSH
3658: LD_INT 25
3660: PUSH
3661: LD_INT 26
3663: PUSH
3664: LD_INT 36
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 101
3685: PUSH
3686: LD_INT 102
3688: PUSH
3689: LD_INT 105
3691: PUSH
3692: LD_INT 106
3694: PUSH
3695: LD_INT 108
3697: PUSH
3698: LD_INT 109
3700: PUSH
3701: LD_INT 112
3703: PUSH
3704: LD_INT 116
3706: PUSH
3707: LD_INT 117
3709: PUSH
3710: LD_INT 118
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: ST_TO_ADDR
3729: GO 6392
3731: LD_INT 6
3733: DOUBLE
3734: EQUAL
3735: IFTRUE 3739
3737: GO 3871
3739: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3740: LD_ADDR_VAR 0 2
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: LD_INT 4
3750: PUSH
3751: LD_INT 5
3753: PUSH
3754: LD_INT 6
3756: PUSH
3757: LD_INT 8
3759: PUSH
3760: LD_INT 11
3762: PUSH
3763: LD_INT 12
3765: PUSH
3766: LD_INT 15
3768: PUSH
3769: LD_INT 16
3771: PUSH
3772: LD_INT 20
3774: PUSH
3775: LD_INT 21
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 23
3783: PUSH
3784: LD_INT 25
3786: PUSH
3787: LD_INT 26
3789: PUSH
3790: LD_INT 30
3792: PUSH
3793: LD_INT 31
3795: PUSH
3796: LD_INT 32
3798: PUSH
3799: LD_INT 36
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 101
3825: PUSH
3826: LD_INT 102
3828: PUSH
3829: LD_INT 105
3831: PUSH
3832: LD_INT 106
3834: PUSH
3835: LD_INT 108
3837: PUSH
3838: LD_INT 109
3840: PUSH
3841: LD_INT 112
3843: PUSH
3844: LD_INT 116
3846: PUSH
3847: LD_INT 117
3849: PUSH
3850: LD_INT 118
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: ST_TO_ADDR
3869: GO 6392
3871: LD_INT 7
3873: DOUBLE
3874: EQUAL
3875: IFTRUE 3879
3877: GO 3991
3879: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3880: LD_ADDR_VAR 0 2
3884: PUSH
3885: LD_INT 2
3887: PUSH
3888: LD_INT 4
3890: PUSH
3891: LD_INT 5
3893: PUSH
3894: LD_INT 7
3896: PUSH
3897: LD_INT 11
3899: PUSH
3900: LD_INT 12
3902: PUSH
3903: LD_INT 15
3905: PUSH
3906: LD_INT 16
3908: PUSH
3909: LD_INT 20
3911: PUSH
3912: LD_INT 21
3914: PUSH
3915: LD_INT 22
3917: PUSH
3918: LD_INT 23
3920: PUSH
3921: LD_INT 25
3923: PUSH
3924: LD_INT 26
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: PUSH
3943: LD_INT 101
3945: PUSH
3946: LD_INT 102
3948: PUSH
3949: LD_INT 103
3951: PUSH
3952: LD_INT 105
3954: PUSH
3955: LD_INT 106
3957: PUSH
3958: LD_INT 108
3960: PUSH
3961: LD_INT 112
3963: PUSH
3964: LD_INT 116
3966: PUSH
3967: LD_INT 117
3969: PUSH
3970: LD_INT 118
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: ST_TO_ADDR
3989: GO 6392
3991: LD_INT 8
3993: DOUBLE
3994: EQUAL
3995: IFTRUE 3999
3997: GO 4139
3999: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4000: LD_ADDR_VAR 0 2
4004: PUSH
4005: LD_INT 2
4007: PUSH
4008: LD_INT 4
4010: PUSH
4011: LD_INT 5
4013: PUSH
4014: LD_INT 6
4016: PUSH
4017: LD_INT 7
4019: PUSH
4020: LD_INT 8
4022: PUSH
4023: LD_INT 11
4025: PUSH
4026: LD_INT 12
4028: PUSH
4029: LD_INT 15
4031: PUSH
4032: LD_INT 16
4034: PUSH
4035: LD_INT 20
4037: PUSH
4038: LD_INT 21
4040: PUSH
4041: LD_INT 22
4043: PUSH
4044: LD_INT 23
4046: PUSH
4047: LD_INT 25
4049: PUSH
4050: LD_INT 26
4052: PUSH
4053: LD_INT 30
4055: PUSH
4056: LD_INT 31
4058: PUSH
4059: LD_INT 32
4061: PUSH
4062: LD_INT 36
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: PUSH
4087: LD_INT 101
4089: PUSH
4090: LD_INT 102
4092: PUSH
4093: LD_INT 103
4095: PUSH
4096: LD_INT 105
4098: PUSH
4099: LD_INT 106
4101: PUSH
4102: LD_INT 108
4104: PUSH
4105: LD_INT 109
4107: PUSH
4108: LD_INT 112
4110: PUSH
4111: LD_INT 116
4113: PUSH
4114: LD_INT 117
4116: PUSH
4117: LD_INT 118
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: ST_TO_ADDR
4137: GO 6392
4139: LD_INT 9
4141: DOUBLE
4142: EQUAL
4143: IFTRUE 4147
4145: GO 4295
4147: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4148: LD_ADDR_VAR 0 2
4152: PUSH
4153: LD_INT 2
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: LD_INT 5
4161: PUSH
4162: LD_INT 6
4164: PUSH
4165: LD_INT 7
4167: PUSH
4168: LD_INT 8
4170: PUSH
4171: LD_INT 11
4173: PUSH
4174: LD_INT 12
4176: PUSH
4177: LD_INT 15
4179: PUSH
4180: LD_INT 16
4182: PUSH
4183: LD_INT 20
4185: PUSH
4186: LD_INT 21
4188: PUSH
4189: LD_INT 22
4191: PUSH
4192: LD_INT 23
4194: PUSH
4195: LD_INT 25
4197: PUSH
4198: LD_INT 26
4200: PUSH
4201: LD_INT 28
4203: PUSH
4204: LD_INT 30
4206: PUSH
4207: LD_INT 31
4209: PUSH
4210: LD_INT 32
4212: PUSH
4213: LD_INT 36
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 101
4241: PUSH
4242: LD_INT 102
4244: PUSH
4245: LD_INT 103
4247: PUSH
4248: LD_INT 105
4250: PUSH
4251: LD_INT 106
4253: PUSH
4254: LD_INT 108
4256: PUSH
4257: LD_INT 109
4259: PUSH
4260: LD_INT 112
4262: PUSH
4263: LD_INT 114
4265: PUSH
4266: LD_INT 116
4268: PUSH
4269: LD_INT 117
4271: PUSH
4272: LD_INT 118
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: ST_TO_ADDR
4293: GO 6392
4295: LD_INT 10
4297: DOUBLE
4298: EQUAL
4299: IFTRUE 4303
4301: GO 4499
4303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4304: LD_ADDR_VAR 0 2
4308: PUSH
4309: LD_INT 2
4311: PUSH
4312: LD_INT 4
4314: PUSH
4315: LD_INT 5
4317: PUSH
4318: LD_INT 6
4320: PUSH
4321: LD_INT 7
4323: PUSH
4324: LD_INT 8
4326: PUSH
4327: LD_INT 9
4329: PUSH
4330: LD_INT 10
4332: PUSH
4333: LD_INT 11
4335: PUSH
4336: LD_INT 12
4338: PUSH
4339: LD_INT 13
4341: PUSH
4342: LD_INT 14
4344: PUSH
4345: LD_INT 15
4347: PUSH
4348: LD_INT 16
4350: PUSH
4351: LD_INT 17
4353: PUSH
4354: LD_INT 18
4356: PUSH
4357: LD_INT 19
4359: PUSH
4360: LD_INT 20
4362: PUSH
4363: LD_INT 21
4365: PUSH
4366: LD_INT 22
4368: PUSH
4369: LD_INT 23
4371: PUSH
4372: LD_INT 24
4374: PUSH
4375: LD_INT 25
4377: PUSH
4378: LD_INT 26
4380: PUSH
4381: LD_INT 28
4383: PUSH
4384: LD_INT 30
4386: PUSH
4387: LD_INT 31
4389: PUSH
4390: LD_INT 32
4392: PUSH
4393: LD_INT 36
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 101
4429: PUSH
4430: LD_INT 102
4432: PUSH
4433: LD_INT 103
4435: PUSH
4436: LD_INT 104
4438: PUSH
4439: LD_INT 105
4441: PUSH
4442: LD_INT 106
4444: PUSH
4445: LD_INT 107
4447: PUSH
4448: LD_INT 108
4450: PUSH
4451: LD_INT 109
4453: PUSH
4454: LD_INT 110
4456: PUSH
4457: LD_INT 111
4459: PUSH
4460: LD_INT 112
4462: PUSH
4463: LD_INT 114
4465: PUSH
4466: LD_INT 116
4468: PUSH
4469: LD_INT 117
4471: PUSH
4472: LD_INT 118
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: ST_TO_ADDR
4497: GO 6392
4499: LD_INT 11
4501: DOUBLE
4502: EQUAL
4503: IFTRUE 4507
4505: GO 4711
4507: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4508: LD_ADDR_VAR 0 2
4512: PUSH
4513: LD_INT 2
4515: PUSH
4516: LD_INT 3
4518: PUSH
4519: LD_INT 4
4521: PUSH
4522: LD_INT 5
4524: PUSH
4525: LD_INT 6
4527: PUSH
4528: LD_INT 7
4530: PUSH
4531: LD_INT 8
4533: PUSH
4534: LD_INT 9
4536: PUSH
4537: LD_INT 10
4539: PUSH
4540: LD_INT 11
4542: PUSH
4543: LD_INT 12
4545: PUSH
4546: LD_INT 13
4548: PUSH
4549: LD_INT 14
4551: PUSH
4552: LD_INT 15
4554: PUSH
4555: LD_INT 16
4557: PUSH
4558: LD_INT 17
4560: PUSH
4561: LD_INT 18
4563: PUSH
4564: LD_INT 19
4566: PUSH
4567: LD_INT 20
4569: PUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 22
4575: PUSH
4576: LD_INT 23
4578: PUSH
4579: LD_INT 24
4581: PUSH
4582: LD_INT 25
4584: PUSH
4585: LD_INT 26
4587: PUSH
4588: LD_INT 28
4590: PUSH
4591: LD_INT 30
4593: PUSH
4594: LD_INT 31
4596: PUSH
4597: LD_INT 32
4599: PUSH
4600: LD_INT 34
4602: PUSH
4603: LD_INT 36
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: PUSH
4639: LD_INT 101
4641: PUSH
4642: LD_INT 102
4644: PUSH
4645: LD_INT 103
4647: PUSH
4648: LD_INT 104
4650: PUSH
4651: LD_INT 105
4653: PUSH
4654: LD_INT 106
4656: PUSH
4657: LD_INT 107
4659: PUSH
4660: LD_INT 108
4662: PUSH
4663: LD_INT 109
4665: PUSH
4666: LD_INT 110
4668: PUSH
4669: LD_INT 111
4671: PUSH
4672: LD_INT 112
4674: PUSH
4675: LD_INT 114
4677: PUSH
4678: LD_INT 116
4680: PUSH
4681: LD_INT 117
4683: PUSH
4684: LD_INT 118
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: ST_TO_ADDR
4709: GO 6392
4711: LD_INT 12
4713: DOUBLE
4714: EQUAL
4715: IFTRUE 4719
4717: GO 4939
4719: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4720: LD_ADDR_VAR 0 2
4724: PUSH
4725: LD_INT 1
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 3
4733: PUSH
4734: LD_INT 4
4736: PUSH
4737: LD_INT 5
4739: PUSH
4740: LD_INT 6
4742: PUSH
4743: LD_INT 7
4745: PUSH
4746: LD_INT 8
4748: PUSH
4749: LD_INT 9
4751: PUSH
4752: LD_INT 10
4754: PUSH
4755: LD_INT 11
4757: PUSH
4758: LD_INT 12
4760: PUSH
4761: LD_INT 13
4763: PUSH
4764: LD_INT 14
4766: PUSH
4767: LD_INT 15
4769: PUSH
4770: LD_INT 16
4772: PUSH
4773: LD_INT 17
4775: PUSH
4776: LD_INT 18
4778: PUSH
4779: LD_INT 19
4781: PUSH
4782: LD_INT 20
4784: PUSH
4785: LD_INT 21
4787: PUSH
4788: LD_INT 22
4790: PUSH
4791: LD_INT 23
4793: PUSH
4794: LD_INT 24
4796: PUSH
4797: LD_INT 25
4799: PUSH
4800: LD_INT 26
4802: PUSH
4803: LD_INT 27
4805: PUSH
4806: LD_INT 28
4808: PUSH
4809: LD_INT 30
4811: PUSH
4812: LD_INT 31
4814: PUSH
4815: LD_INT 32
4817: PUSH
4818: LD_INT 33
4820: PUSH
4821: LD_INT 34
4823: PUSH
4824: LD_INT 36
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 101
4865: PUSH
4866: LD_INT 102
4868: PUSH
4869: LD_INT 103
4871: PUSH
4872: LD_INT 104
4874: PUSH
4875: LD_INT 105
4877: PUSH
4878: LD_INT 106
4880: PUSH
4881: LD_INT 107
4883: PUSH
4884: LD_INT 108
4886: PUSH
4887: LD_INT 109
4889: PUSH
4890: LD_INT 110
4892: PUSH
4893: LD_INT 111
4895: PUSH
4896: LD_INT 112
4898: PUSH
4899: LD_INT 113
4901: PUSH
4902: LD_INT 114
4904: PUSH
4905: LD_INT 116
4907: PUSH
4908: LD_INT 117
4910: PUSH
4911: LD_INT 118
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: ST_TO_ADDR
4937: GO 6392
4939: LD_INT 13
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 5155
4947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4948: LD_ADDR_VAR 0 2
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: LD_INT 2
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: LD_INT 8
4970: PUSH
4971: LD_INT 9
4973: PUSH
4974: LD_INT 10
4976: PUSH
4977: LD_INT 11
4979: PUSH
4980: LD_INT 12
4982: PUSH
4983: LD_INT 14
4985: PUSH
4986: LD_INT 15
4988: PUSH
4989: LD_INT 16
4991: PUSH
4992: LD_INT 17
4994: PUSH
4995: LD_INT 18
4997: PUSH
4998: LD_INT 19
5000: PUSH
5001: LD_INT 20
5003: PUSH
5004: LD_INT 21
5006: PUSH
5007: LD_INT 22
5009: PUSH
5010: LD_INT 23
5012: PUSH
5013: LD_INT 24
5015: PUSH
5016: LD_INT 25
5018: PUSH
5019: LD_INT 26
5021: PUSH
5022: LD_INT 27
5024: PUSH
5025: LD_INT 28
5027: PUSH
5028: LD_INT 30
5030: PUSH
5031: LD_INT 31
5033: PUSH
5034: LD_INT 32
5036: PUSH
5037: LD_INT 33
5039: PUSH
5040: LD_INT 34
5042: PUSH
5043: LD_INT 36
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 101
5081: PUSH
5082: LD_INT 102
5084: PUSH
5085: LD_INT 103
5087: PUSH
5088: LD_INT 104
5090: PUSH
5091: LD_INT 105
5093: PUSH
5094: LD_INT 106
5096: PUSH
5097: LD_INT 107
5099: PUSH
5100: LD_INT 108
5102: PUSH
5103: LD_INT 109
5105: PUSH
5106: LD_INT 110
5108: PUSH
5109: LD_INT 111
5111: PUSH
5112: LD_INT 112
5114: PUSH
5115: LD_INT 113
5117: PUSH
5118: LD_INT 114
5120: PUSH
5121: LD_INT 116
5123: PUSH
5124: LD_INT 117
5126: PUSH
5127: LD_INT 118
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: ST_TO_ADDR
5153: GO 6392
5155: LD_INT 14
5157: DOUBLE
5158: EQUAL
5159: IFTRUE 5163
5161: GO 5387
5163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: LD_INT 2
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 4
5180: PUSH
5181: LD_INT 5
5183: PUSH
5184: LD_INT 6
5186: PUSH
5187: LD_INT 7
5189: PUSH
5190: LD_INT 8
5192: PUSH
5193: LD_INT 9
5195: PUSH
5196: LD_INT 10
5198: PUSH
5199: LD_INT 11
5201: PUSH
5202: LD_INT 12
5204: PUSH
5205: LD_INT 13
5207: PUSH
5208: LD_INT 14
5210: PUSH
5211: LD_INT 15
5213: PUSH
5214: LD_INT 16
5216: PUSH
5217: LD_INT 17
5219: PUSH
5220: LD_INT 18
5222: PUSH
5223: LD_INT 19
5225: PUSH
5226: LD_INT 20
5228: PUSH
5229: LD_INT 21
5231: PUSH
5232: LD_INT 22
5234: PUSH
5235: LD_INT 23
5237: PUSH
5238: LD_INT 24
5240: PUSH
5241: LD_INT 25
5243: PUSH
5244: LD_INT 26
5246: PUSH
5247: LD_INT 27
5249: PUSH
5250: LD_INT 28
5252: PUSH
5253: LD_INT 29
5255: PUSH
5256: LD_INT 30
5258: PUSH
5259: LD_INT 31
5261: PUSH
5262: LD_INT 32
5264: PUSH
5265: LD_INT 33
5267: PUSH
5268: LD_INT 34
5270: PUSH
5271: LD_INT 36
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 101
5313: PUSH
5314: LD_INT 102
5316: PUSH
5317: LD_INT 103
5319: PUSH
5320: LD_INT 104
5322: PUSH
5323: LD_INT 105
5325: PUSH
5326: LD_INT 106
5328: PUSH
5329: LD_INT 107
5331: PUSH
5332: LD_INT 108
5334: PUSH
5335: LD_INT 109
5337: PUSH
5338: LD_INT 110
5340: PUSH
5341: LD_INT 111
5343: PUSH
5344: LD_INT 112
5346: PUSH
5347: LD_INT 113
5349: PUSH
5350: LD_INT 114
5352: PUSH
5353: LD_INT 116
5355: PUSH
5356: LD_INT 117
5358: PUSH
5359: LD_INT 118
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: ST_TO_ADDR
5385: GO 6392
5387: LD_INT 15
5389: DOUBLE
5390: EQUAL
5391: IFTRUE 5395
5393: GO 5619
5395: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: LD_INT 1
5403: PUSH
5404: LD_INT 2
5406: PUSH
5407: LD_INT 3
5409: PUSH
5410: LD_INT 4
5412: PUSH
5413: LD_INT 5
5415: PUSH
5416: LD_INT 6
5418: PUSH
5419: LD_INT 7
5421: PUSH
5422: LD_INT 8
5424: PUSH
5425: LD_INT 9
5427: PUSH
5428: LD_INT 10
5430: PUSH
5431: LD_INT 11
5433: PUSH
5434: LD_INT 12
5436: PUSH
5437: LD_INT 13
5439: PUSH
5440: LD_INT 14
5442: PUSH
5443: LD_INT 15
5445: PUSH
5446: LD_INT 16
5448: PUSH
5449: LD_INT 17
5451: PUSH
5452: LD_INT 18
5454: PUSH
5455: LD_INT 19
5457: PUSH
5458: LD_INT 20
5460: PUSH
5461: LD_INT 21
5463: PUSH
5464: LD_INT 22
5466: PUSH
5467: LD_INT 23
5469: PUSH
5470: LD_INT 24
5472: PUSH
5473: LD_INT 25
5475: PUSH
5476: LD_INT 26
5478: PUSH
5479: LD_INT 27
5481: PUSH
5482: LD_INT 28
5484: PUSH
5485: LD_INT 29
5487: PUSH
5488: LD_INT 30
5490: PUSH
5491: LD_INT 31
5493: PUSH
5494: LD_INT 32
5496: PUSH
5497: LD_INT 33
5499: PUSH
5500: LD_INT 34
5502: PUSH
5503: LD_INT 36
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 101
5545: PUSH
5546: LD_INT 102
5548: PUSH
5549: LD_INT 103
5551: PUSH
5552: LD_INT 104
5554: PUSH
5555: LD_INT 105
5557: PUSH
5558: LD_INT 106
5560: PUSH
5561: LD_INT 107
5563: PUSH
5564: LD_INT 108
5566: PUSH
5567: LD_INT 109
5569: PUSH
5570: LD_INT 110
5572: PUSH
5573: LD_INT 111
5575: PUSH
5576: LD_INT 112
5578: PUSH
5579: LD_INT 113
5581: PUSH
5582: LD_INT 114
5584: PUSH
5585: LD_INT 116
5587: PUSH
5588: LD_INT 117
5590: PUSH
5591: LD_INT 118
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: ST_TO_ADDR
5617: GO 6392
5619: LD_INT 16
5621: DOUBLE
5622: EQUAL
5623: IFTRUE 5627
5625: GO 5763
5627: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_INT 2
5635: PUSH
5636: LD_INT 4
5638: PUSH
5639: LD_INT 5
5641: PUSH
5642: LD_INT 7
5644: PUSH
5645: LD_INT 11
5647: PUSH
5648: LD_INT 12
5650: PUSH
5651: LD_INT 15
5653: PUSH
5654: LD_INT 16
5656: PUSH
5657: LD_INT 20
5659: PUSH
5660: LD_INT 21
5662: PUSH
5663: LD_INT 22
5665: PUSH
5666: LD_INT 23
5668: PUSH
5669: LD_INT 25
5671: PUSH
5672: LD_INT 26
5674: PUSH
5675: LD_INT 30
5677: PUSH
5678: LD_INT 31
5680: PUSH
5681: LD_INT 32
5683: PUSH
5684: LD_INT 33
5686: PUSH
5687: LD_INT 34
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 101
5713: PUSH
5714: LD_INT 102
5716: PUSH
5717: LD_INT 103
5719: PUSH
5720: LD_INT 106
5722: PUSH
5723: LD_INT 108
5725: PUSH
5726: LD_INT 112
5728: PUSH
5729: LD_INT 113
5731: PUSH
5732: LD_INT 114
5734: PUSH
5735: LD_INT 116
5737: PUSH
5738: LD_INT 117
5740: PUSH
5741: LD_INT 118
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: ST_TO_ADDR
5761: GO 6392
5763: LD_INT 17
5765: DOUBLE
5766: EQUAL
5767: IFTRUE 5771
5769: GO 5995
5771: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5772: LD_ADDR_VAR 0 2
5776: PUSH
5777: LD_INT 1
5779: PUSH
5780: LD_INT 2
5782: PUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 4
5788: PUSH
5789: LD_INT 5
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: LD_INT 7
5797: PUSH
5798: LD_INT 8
5800: PUSH
5801: LD_INT 9
5803: PUSH
5804: LD_INT 10
5806: PUSH
5807: LD_INT 11
5809: PUSH
5810: LD_INT 12
5812: PUSH
5813: LD_INT 13
5815: PUSH
5816: LD_INT 14
5818: PUSH
5819: LD_INT 15
5821: PUSH
5822: LD_INT 16
5824: PUSH
5825: LD_INT 17
5827: PUSH
5828: LD_INT 18
5830: PUSH
5831: LD_INT 19
5833: PUSH
5834: LD_INT 20
5836: PUSH
5837: LD_INT 21
5839: PUSH
5840: LD_INT 22
5842: PUSH
5843: LD_INT 23
5845: PUSH
5846: LD_INT 24
5848: PUSH
5849: LD_INT 25
5851: PUSH
5852: LD_INT 26
5854: PUSH
5855: LD_INT 27
5857: PUSH
5858: LD_INT 28
5860: PUSH
5861: LD_INT 29
5863: PUSH
5864: LD_INT 30
5866: PUSH
5867: LD_INT 31
5869: PUSH
5870: LD_INT 32
5872: PUSH
5873: LD_INT 33
5875: PUSH
5876: LD_INT 34
5878: PUSH
5879: LD_INT 36
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: PUSH
5919: LD_INT 101
5921: PUSH
5922: LD_INT 102
5924: PUSH
5925: LD_INT 103
5927: PUSH
5928: LD_INT 104
5930: PUSH
5931: LD_INT 105
5933: PUSH
5934: LD_INT 106
5936: PUSH
5937: LD_INT 107
5939: PUSH
5940: LD_INT 108
5942: PUSH
5943: LD_INT 109
5945: PUSH
5946: LD_INT 110
5948: PUSH
5949: LD_INT 111
5951: PUSH
5952: LD_INT 112
5954: PUSH
5955: LD_INT 113
5957: PUSH
5958: LD_INT 114
5960: PUSH
5961: LD_INT 116
5963: PUSH
5964: LD_INT 117
5966: PUSH
5967: LD_INT 118
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: ST_TO_ADDR
5993: GO 6392
5995: LD_INT 18
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6151
6003: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6004: LD_ADDR_VAR 0 2
6008: PUSH
6009: LD_INT 2
6011: PUSH
6012: LD_INT 4
6014: PUSH
6015: LD_INT 5
6017: PUSH
6018: LD_INT 7
6020: PUSH
6021: LD_INT 11
6023: PUSH
6024: LD_INT 12
6026: PUSH
6027: LD_INT 15
6029: PUSH
6030: LD_INT 16
6032: PUSH
6033: LD_INT 20
6035: PUSH
6036: LD_INT 21
6038: PUSH
6039: LD_INT 22
6041: PUSH
6042: LD_INT 23
6044: PUSH
6045: LD_INT 25
6047: PUSH
6048: LD_INT 26
6050: PUSH
6051: LD_INT 30
6053: PUSH
6054: LD_INT 31
6056: PUSH
6057: LD_INT 32
6059: PUSH
6060: LD_INT 33
6062: PUSH
6063: LD_INT 34
6065: PUSH
6066: LD_INT 35
6068: PUSH
6069: LD_INT 36
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 101
6097: PUSH
6098: LD_INT 102
6100: PUSH
6101: LD_INT 103
6103: PUSH
6104: LD_INT 106
6106: PUSH
6107: LD_INT 108
6109: PUSH
6110: LD_INT 112
6112: PUSH
6113: LD_INT 113
6115: PUSH
6116: LD_INT 114
6118: PUSH
6119: LD_INT 115
6121: PUSH
6122: LD_INT 116
6124: PUSH
6125: LD_INT 117
6127: PUSH
6128: LD_INT 118
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: ST_TO_ADDR
6149: GO 6392
6151: LD_INT 19
6153: DOUBLE
6154: EQUAL
6155: IFTRUE 6159
6157: GO 6391
6159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6160: LD_ADDR_VAR 0 2
6164: PUSH
6165: LD_INT 1
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 4
6176: PUSH
6177: LD_INT 5
6179: PUSH
6180: LD_INT 6
6182: PUSH
6183: LD_INT 7
6185: PUSH
6186: LD_INT 8
6188: PUSH
6189: LD_INT 9
6191: PUSH
6192: LD_INT 10
6194: PUSH
6195: LD_INT 11
6197: PUSH
6198: LD_INT 12
6200: PUSH
6201: LD_INT 13
6203: PUSH
6204: LD_INT 14
6206: PUSH
6207: LD_INT 15
6209: PUSH
6210: LD_INT 16
6212: PUSH
6213: LD_INT 17
6215: PUSH
6216: LD_INT 18
6218: PUSH
6219: LD_INT 19
6221: PUSH
6222: LD_INT 20
6224: PUSH
6225: LD_INT 21
6227: PUSH
6228: LD_INT 22
6230: PUSH
6231: LD_INT 23
6233: PUSH
6234: LD_INT 24
6236: PUSH
6237: LD_INT 25
6239: PUSH
6240: LD_INT 26
6242: PUSH
6243: LD_INT 27
6245: PUSH
6246: LD_INT 28
6248: PUSH
6249: LD_INT 29
6251: PUSH
6252: LD_INT 30
6254: PUSH
6255: LD_INT 31
6257: PUSH
6258: LD_INT 32
6260: PUSH
6261: LD_INT 33
6263: PUSH
6264: LD_INT 34
6266: PUSH
6267: LD_INT 35
6269: PUSH
6270: LD_INT 36
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 101
6313: PUSH
6314: LD_INT 102
6316: PUSH
6317: LD_INT 103
6319: PUSH
6320: LD_INT 104
6322: PUSH
6323: LD_INT 105
6325: PUSH
6326: LD_INT 106
6328: PUSH
6329: LD_INT 107
6331: PUSH
6332: LD_INT 108
6334: PUSH
6335: LD_INT 109
6337: PUSH
6338: LD_INT 110
6340: PUSH
6341: LD_INT 111
6343: PUSH
6344: LD_INT 112
6346: PUSH
6347: LD_INT 113
6349: PUSH
6350: LD_INT 114
6352: PUSH
6353: LD_INT 115
6355: PUSH
6356: LD_INT 116
6358: PUSH
6359: LD_INT 117
6361: PUSH
6362: LD_INT 118
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: ST_TO_ADDR
6389: GO 6392
6391: POP
// end else
6392: GO 6623
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6394: LD_ADDR_VAR 0 2
6398: PUSH
6399: LD_INT 1
6401: PUSH
6402: LD_INT 2
6404: PUSH
6405: LD_INT 3
6407: PUSH
6408: LD_INT 4
6410: PUSH
6411: LD_INT 5
6413: PUSH
6414: LD_INT 6
6416: PUSH
6417: LD_INT 7
6419: PUSH
6420: LD_INT 8
6422: PUSH
6423: LD_INT 9
6425: PUSH
6426: LD_INT 10
6428: PUSH
6429: LD_INT 11
6431: PUSH
6432: LD_INT 12
6434: PUSH
6435: LD_INT 13
6437: PUSH
6438: LD_INT 14
6440: PUSH
6441: LD_INT 15
6443: PUSH
6444: LD_INT 16
6446: PUSH
6447: LD_INT 17
6449: PUSH
6450: LD_INT 18
6452: PUSH
6453: LD_INT 19
6455: PUSH
6456: LD_INT 20
6458: PUSH
6459: LD_INT 21
6461: PUSH
6462: LD_INT 22
6464: PUSH
6465: LD_INT 23
6467: PUSH
6468: LD_INT 24
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 26
6476: PUSH
6477: LD_INT 27
6479: PUSH
6480: LD_INT 28
6482: PUSH
6483: LD_INT 29
6485: PUSH
6486: LD_INT 30
6488: PUSH
6489: LD_INT 31
6491: PUSH
6492: LD_INT 32
6494: PUSH
6495: LD_INT 33
6497: PUSH
6498: LD_INT 34
6500: PUSH
6501: LD_INT 35
6503: PUSH
6504: LD_INT 36
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 101
6547: PUSH
6548: LD_INT 102
6550: PUSH
6551: LD_INT 103
6553: PUSH
6554: LD_INT 104
6556: PUSH
6557: LD_INT 105
6559: PUSH
6560: LD_INT 106
6562: PUSH
6563: LD_INT 107
6565: PUSH
6566: LD_INT 108
6568: PUSH
6569: LD_INT 109
6571: PUSH
6572: LD_INT 110
6574: PUSH
6575: LD_INT 111
6577: PUSH
6578: LD_INT 112
6580: PUSH
6581: LD_INT 113
6583: PUSH
6584: LD_INT 114
6586: PUSH
6587: LD_INT 115
6589: PUSH
6590: LD_INT 116
6592: PUSH
6593: LD_INT 117
6595: PUSH
6596: LD_INT 118
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: ST_TO_ADDR
// if result then
6623: LD_VAR 0 2
6627: IFFALSE 7413
// begin normal :=  ;
6629: LD_ADDR_VAR 0 5
6633: PUSH
6634: LD_STRING 
6636: ST_TO_ADDR
// hardcore :=  ;
6637: LD_ADDR_VAR 0 6
6641: PUSH
6642: LD_STRING 
6644: ST_TO_ADDR
// active :=  ;
6645: LD_ADDR_VAR 0 7
6649: PUSH
6650: LD_STRING 
6652: ST_TO_ADDR
// for i = 1 to normalCounter do
6653: LD_ADDR_VAR 0 8
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_EXP 4
6667: PUSH
6668: FOR_TO
6669: IFFALSE 6770
// begin tmp := 0 ;
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: LD_STRING 0
6678: ST_TO_ADDR
// if result [ 1 ] then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_INT 1
6686: ARRAY
6687: IFFALSE 6752
// if result [ 1 ] [ 1 ] = i then
6689: LD_VAR 0 2
6693: PUSH
6694: LD_INT 1
6696: ARRAY
6697: PUSH
6698: LD_INT 1
6700: ARRAY
6701: PUSH
6702: LD_VAR 0 8
6706: EQUAL
6707: IFFALSE 6752
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6709: LD_ADDR_VAR 0 2
6713: PUSH
6714: LD_VAR 0 2
6718: PPUSH
6719: LD_INT 1
6721: PPUSH
6722: LD_VAR 0 2
6726: PUSH
6727: LD_INT 1
6729: ARRAY
6730: PPUSH
6731: LD_INT 1
6733: PPUSH
6734: CALL_OW 3
6738: PPUSH
6739: CALL_OW 1
6743: ST_TO_ADDR
// tmp := 1 ;
6744: LD_ADDR_VAR 0 3
6748: PUSH
6749: LD_STRING 1
6751: ST_TO_ADDR
// end ; normal := normal & tmp ;
6752: LD_ADDR_VAR 0 5
6756: PUSH
6757: LD_VAR 0 5
6761: PUSH
6762: LD_VAR 0 3
6766: STR
6767: ST_TO_ADDR
// end ;
6768: GO 6668
6770: POP
6771: POP
// for i = 1 to hardcoreCounter do
6772: LD_ADDR_VAR 0 8
6776: PUSH
6777: DOUBLE
6778: LD_INT 1
6780: DEC
6781: ST_TO_ADDR
6782: LD_EXP 5
6786: PUSH
6787: FOR_TO
6788: IFFALSE 6893
// begin tmp := 0 ;
6790: LD_ADDR_VAR 0 3
6794: PUSH
6795: LD_STRING 0
6797: ST_TO_ADDR
// if result [ 2 ] then
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 2
6805: ARRAY
6806: IFFALSE 6875
// if result [ 2 ] [ 1 ] = 100 + i then
6808: LD_VAR 0 2
6812: PUSH
6813: LD_INT 2
6815: ARRAY
6816: PUSH
6817: LD_INT 1
6819: ARRAY
6820: PUSH
6821: LD_INT 100
6823: PUSH
6824: LD_VAR 0 8
6828: PLUS
6829: EQUAL
6830: IFFALSE 6875
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6832: LD_ADDR_VAR 0 2
6836: PUSH
6837: LD_VAR 0 2
6841: PPUSH
6842: LD_INT 2
6844: PPUSH
6845: LD_VAR 0 2
6849: PUSH
6850: LD_INT 2
6852: ARRAY
6853: PPUSH
6854: LD_INT 1
6856: PPUSH
6857: CALL_OW 3
6861: PPUSH
6862: CALL_OW 1
6866: ST_TO_ADDR
// tmp := 1 ;
6867: LD_ADDR_VAR 0 3
6871: PUSH
6872: LD_STRING 1
6874: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6875: LD_ADDR_VAR 0 6
6879: PUSH
6880: LD_VAR 0 6
6884: PUSH
6885: LD_VAR 0 3
6889: STR
6890: ST_TO_ADDR
// end ;
6891: GO 6787
6893: POP
6894: POP
// if isGameLoad then
6895: LD_VAR 0 1
6899: IFFALSE 7374
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6901: LD_ADDR_VAR 0 4
6905: PUSH
6906: LD_EXP 8
6910: PUSH
6911: LD_EXP 7
6915: PUSH
6916: LD_EXP 9
6920: PUSH
6921: LD_EXP 6
6925: PUSH
6926: LD_EXP 10
6930: PUSH
6931: LD_EXP 11
6935: PUSH
6936: LD_EXP 12
6940: PUSH
6941: LD_EXP 13
6945: PUSH
6946: LD_EXP 14
6950: PUSH
6951: LD_EXP 15
6955: PUSH
6956: LD_EXP 16
6960: PUSH
6961: LD_EXP 17
6965: PUSH
6966: LD_EXP 18
6970: PUSH
6971: LD_EXP 19
6975: PUSH
6976: LD_EXP 27
6980: PUSH
6981: LD_EXP 28
6985: PUSH
6986: LD_EXP 29
6990: PUSH
6991: LD_EXP 30
6995: PUSH
6996: LD_EXP 32
7000: PUSH
7001: LD_EXP 33
7005: PUSH
7006: LD_EXP 34
7010: PUSH
7011: LD_EXP 37
7015: PUSH
7016: LD_EXP 39
7020: PUSH
7021: LD_EXP 40
7025: PUSH
7026: LD_EXP 41
7030: PUSH
7031: LD_EXP 43
7035: PUSH
7036: LD_EXP 44
7040: PUSH
7041: LD_EXP 47
7045: PUSH
7046: LD_EXP 48
7050: PUSH
7051: LD_EXP 49
7055: PUSH
7056: LD_EXP 50
7060: PUSH
7061: LD_EXP 51
7065: PUSH
7066: LD_EXP 52
7070: PUSH
7071: LD_EXP 53
7075: PUSH
7076: LD_EXP 54
7080: PUSH
7081: LD_EXP 55
7085: PUSH
7086: LD_EXP 20
7090: PUSH
7091: LD_EXP 21
7095: PUSH
7096: LD_EXP 24
7100: PUSH
7101: LD_EXP 25
7105: PUSH
7106: LD_EXP 26
7110: PUSH
7111: LD_EXP 22
7115: PUSH
7116: LD_EXP 23
7120: PUSH
7121: LD_EXP 31
7125: PUSH
7126: LD_EXP 35
7130: PUSH
7131: LD_EXP 36
7135: PUSH
7136: LD_EXP 38
7140: PUSH
7141: LD_EXP 42
7145: PUSH
7146: LD_EXP 45
7150: PUSH
7151: LD_EXP 46
7155: PUSH
7156: LD_EXP 56
7160: PUSH
7161: LD_EXP 57
7165: PUSH
7166: LD_EXP 58
7170: PUSH
7171: LD_EXP 59
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: ST_TO_ADDR
// tmp :=  ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_STRING 
7239: ST_TO_ADDR
// for i = 1 to normalCounter do
7240: LD_ADDR_VAR 0 8
7244: PUSH
7245: DOUBLE
7246: LD_INT 1
7248: DEC
7249: ST_TO_ADDR
7250: LD_EXP 4
7254: PUSH
7255: FOR_TO
7256: IFFALSE 7292
// begin if flags [ i ] then
7258: LD_VAR 0 4
7262: PUSH
7263: LD_VAR 0 8
7267: ARRAY
7268: IFFALSE 7290
// tmp := tmp & i & ; ;
7270: LD_ADDR_VAR 0 3
7274: PUSH
7275: LD_VAR 0 3
7279: PUSH
7280: LD_VAR 0 8
7284: STR
7285: PUSH
7286: LD_STRING ;
7288: STR
7289: ST_TO_ADDR
// end ;
7290: GO 7255
7292: POP
7293: POP
// for i = 1 to hardcoreCounter do
7294: LD_ADDR_VAR 0 8
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_EXP 5
7308: PUSH
7309: FOR_TO
7310: IFFALSE 7356
// begin if flags [ normalCounter + i ] then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_EXP 4
7321: PUSH
7322: LD_VAR 0 8
7326: PLUS
7327: ARRAY
7328: IFFALSE 7354
// tmp := tmp & ( 100 + i ) & ; ;
7330: LD_ADDR_VAR 0 3
7334: PUSH
7335: LD_VAR 0 3
7339: PUSH
7340: LD_INT 100
7342: PUSH
7343: LD_VAR 0 8
7347: PLUS
7348: STR
7349: PUSH
7350: LD_STRING ;
7352: STR
7353: ST_TO_ADDR
// end ;
7354: GO 7309
7356: POP
7357: POP
// if tmp then
7358: LD_VAR 0 3
7362: IFFALSE 7374
// active := tmp ;
7364: LD_ADDR_VAR 0 7
7368: PUSH
7369: LD_VAR 0 3
7373: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7374: LD_STRING getStreamItemsFromMission("
7376: PUSH
7377: LD_VAR 0 5
7381: STR
7382: PUSH
7383: LD_STRING ","
7385: STR
7386: PUSH
7387: LD_VAR 0 6
7391: STR
7392: PUSH
7393: LD_STRING ","
7395: STR
7396: PUSH
7397: LD_VAR 0 7
7401: STR
7402: PUSH
7403: LD_STRING ")
7405: STR
7406: PPUSH
7407: CALL_OW 559
// end else
7411: GO 7420
// ToLua ( getStreamItemsFromMission("","","") ) ;
7413: LD_STRING getStreamItemsFromMission("","","")
7415: PPUSH
7416: CALL_OW 559
// end ;
7420: LD_VAR 0 2
7424: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7425: LD_EXP 3
7429: PUSH
7430: LD_EXP 8
7434: AND
7435: IFFALSE 7559
7437: GO 7439
7439: DISABLE
7440: LD_INT 0
7442: PPUSH
7443: PPUSH
// begin enable ;
7444: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7445: LD_ADDR_VAR 0 2
7449: PUSH
7450: LD_INT 22
7452: PUSH
7453: LD_OWVAR 2
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: LD_INT 34
7467: PUSH
7468: LD_INT 7
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 34
7477: PUSH
7478: LD_INT 45
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 34
7487: PUSH
7488: LD_INT 28
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 34
7497: PUSH
7498: LD_INT 47
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 69
7520: ST_TO_ADDR
// if not tmp then
7521: LD_VAR 0 2
7525: NOT
7526: IFFALSE 7530
// exit ;
7528: GO 7559
// for i in tmp do
7530: LD_ADDR_VAR 0 1
7534: PUSH
7535: LD_VAR 0 2
7539: PUSH
7540: FOR_IN
7541: IFFALSE 7557
// begin SetLives ( i , 0 ) ;
7543: LD_VAR 0 1
7547: PPUSH
7548: LD_INT 0
7550: PPUSH
7551: CALL_OW 234
// end ;
7555: GO 7540
7557: POP
7558: POP
// end ;
7559: PPOPN 2
7561: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7562: LD_EXP 3
7566: PUSH
7567: LD_EXP 9
7571: AND
7572: IFFALSE 7656
7574: GO 7576
7576: DISABLE
7577: LD_INT 0
7579: PPUSH
7580: PPUSH
// begin enable ;
7581: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7582: LD_ADDR_VAR 0 2
7586: PUSH
7587: LD_INT 22
7589: PUSH
7590: LD_OWVAR 2
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 32
7601: PUSH
7602: LD_INT 3
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 69
7617: ST_TO_ADDR
// if not tmp then
7618: LD_VAR 0 2
7622: NOT
7623: IFFALSE 7627
// exit ;
7625: GO 7656
// for i in tmp do
7627: LD_ADDR_VAR 0 1
7631: PUSH
7632: LD_VAR 0 2
7636: PUSH
7637: FOR_IN
7638: IFFALSE 7654
// begin SetLives ( i , 0 ) ;
7640: LD_VAR 0 1
7644: PPUSH
7645: LD_INT 0
7647: PPUSH
7648: CALL_OW 234
// end ;
7652: GO 7637
7654: POP
7655: POP
// end ;
7656: PPOPN 2
7658: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7659: LD_EXP 3
7663: PUSH
7664: LD_EXP 6
7668: AND
7669: IFFALSE 7762
7671: GO 7673
7673: DISABLE
7674: LD_INT 0
7676: PPUSH
// begin enable ;
7677: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7678: LD_ADDR_VAR 0 1
7682: PUSH
7683: LD_INT 22
7685: PUSH
7686: LD_OWVAR 2
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 25
7700: PUSH
7701: LD_INT 5
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 25
7710: PUSH
7711: LD_INT 9
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 25
7720: PUSH
7721: LD_INT 8
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: PUSH
7743: FOR_IN
7744: IFFALSE 7760
// begin SetClass ( i , 1 ) ;
7746: LD_VAR 0 1
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 336
// end ;
7758: GO 7743
7760: POP
7761: POP
// end ;
7762: PPOPN 1
7764: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7765: LD_EXP 3
7769: PUSH
7770: LD_EXP 7
7774: AND
7775: PUSH
7776: LD_OWVAR 65
7780: PUSH
7781: LD_INT 7
7783: LESS
7784: AND
7785: IFFALSE 7799
7787: GO 7789
7789: DISABLE
// begin enable ;
7790: ENABLE
// game_speed := 7 ;
7791: LD_ADDR_OWVAR 65
7795: PUSH
7796: LD_INT 7
7798: ST_TO_ADDR
// end ;
7799: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7800: LD_EXP 3
7804: PUSH
7805: LD_EXP 10
7809: AND
7810: IFFALSE 8012
7812: GO 7814
7814: DISABLE
7815: LD_INT 0
7817: PPUSH
7818: PPUSH
7819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_INT 81
7827: PUSH
7828: LD_OWVAR 2
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: LD_INT 21
7839: PUSH
7840: LD_INT 1
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: ST_TO_ADDR
// if not tmp then
7856: LD_VAR 0 3
7860: NOT
7861: IFFALSE 7865
// exit ;
7863: GO 8012
// if tmp > 5 then
7865: LD_VAR 0 3
7869: PUSH
7870: LD_INT 5
7872: GREATER
7873: IFFALSE 7885
// k := 5 else
7875: LD_ADDR_VAR 0 2
7879: PUSH
7880: LD_INT 5
7882: ST_TO_ADDR
7883: GO 7895
// k := tmp ;
7885: LD_ADDR_VAR 0 2
7889: PUSH
7890: LD_VAR 0 3
7894: ST_TO_ADDR
// for i := 1 to k do
7895: LD_ADDR_VAR 0 1
7899: PUSH
7900: DOUBLE
7901: LD_INT 1
7903: DEC
7904: ST_TO_ADDR
7905: LD_VAR 0 2
7909: PUSH
7910: FOR_TO
7911: IFFALSE 8010
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7913: LD_VAR 0 3
7917: PUSH
7918: LD_VAR 0 1
7922: ARRAY
7923: PPUSH
7924: LD_VAR 0 1
7928: PUSH
7929: LD_INT 4
7931: MOD
7932: PUSH
7933: LD_INT 1
7935: PLUS
7936: PPUSH
7937: CALL_OW 259
7941: PUSH
7942: LD_INT 10
7944: LESS
7945: IFFALSE 8008
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7947: LD_VAR 0 3
7951: PUSH
7952: LD_VAR 0 1
7956: ARRAY
7957: PPUSH
7958: LD_VAR 0 1
7962: PUSH
7963: LD_INT 4
7965: MOD
7966: PUSH
7967: LD_INT 1
7969: PLUS
7970: PPUSH
7971: LD_VAR 0 3
7975: PUSH
7976: LD_VAR 0 1
7980: ARRAY
7981: PPUSH
7982: LD_VAR 0 1
7986: PUSH
7987: LD_INT 4
7989: MOD
7990: PUSH
7991: LD_INT 1
7993: PLUS
7994: PPUSH
7995: CALL_OW 259
7999: PUSH
8000: LD_INT 1
8002: PLUS
8003: PPUSH
8004: CALL_OW 237
8008: GO 7910
8010: POP
8011: POP
// end ;
8012: PPOPN 3
8014: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8015: LD_EXP 3
8019: PUSH
8020: LD_EXP 11
8024: AND
8025: IFFALSE 8045
8027: GO 8029
8029: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8030: LD_INT 4
8032: PPUSH
8033: LD_OWVAR 2
8037: PPUSH
8038: LD_INT 0
8040: PPUSH
8041: CALL_OW 324
8045: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8046: LD_EXP 3
8050: PUSH
8051: LD_EXP 40
8055: AND
8056: IFFALSE 8076
8058: GO 8060
8060: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8061: LD_INT 19
8063: PPUSH
8064: LD_OWVAR 2
8068: PPUSH
8069: LD_INT 0
8071: PPUSH
8072: CALL_OW 324
8076: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8077: LD_EXP 3
8081: PUSH
8082: LD_EXP 12
8086: AND
8087: IFFALSE 8189
8089: GO 8091
8091: DISABLE
8092: LD_INT 0
8094: PPUSH
8095: PPUSH
// begin enable ;
8096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8097: LD_ADDR_VAR 0 2
8101: PUSH
8102: LD_INT 22
8104: PUSH
8105: LD_OWVAR 2
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 34
8119: PUSH
8120: LD_INT 11
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 34
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PPUSH
8146: CALL_OW 69
8150: ST_TO_ADDR
// if not tmp then
8151: LD_VAR 0 2
8155: NOT
8156: IFFALSE 8160
// exit ;
8158: GO 8189
// for i in tmp do
8160: LD_ADDR_VAR 0 1
8164: PUSH
8165: LD_VAR 0 2
8169: PUSH
8170: FOR_IN
8171: IFFALSE 8187
// begin SetLives ( i , 0 ) ;
8173: LD_VAR 0 1
8177: PPUSH
8178: LD_INT 0
8180: PPUSH
8181: CALL_OW 234
// end ;
8185: GO 8170
8187: POP
8188: POP
// end ;
8189: PPOPN 2
8191: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8192: LD_EXP 3
8196: PUSH
8197: LD_EXP 13
8201: AND
8202: IFFALSE 8222
8204: GO 8206
8206: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8207: LD_INT 32
8209: PPUSH
8210: LD_OWVAR 2
8214: PPUSH
8215: LD_INT 0
8217: PPUSH
8218: CALL_OW 324
8222: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8223: LD_EXP 3
8227: PUSH
8228: LD_EXP 14
8232: AND
8233: IFFALSE 8414
8235: GO 8237
8237: DISABLE
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
8242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_OWVAR 2
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 33
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: ST_TO_ADDR
// if not tmp then
8279: LD_VAR 0 2
8283: NOT
8284: IFFALSE 8288
// exit ;
8286: GO 8414
// side := 0 ;
8288: LD_ADDR_VAR 0 3
8292: PUSH
8293: LD_INT 0
8295: ST_TO_ADDR
// for i := 1 to 8 do
8296: LD_ADDR_VAR 0 1
8300: PUSH
8301: DOUBLE
8302: LD_INT 1
8304: DEC
8305: ST_TO_ADDR
8306: LD_INT 8
8308: PUSH
8309: FOR_TO
8310: IFFALSE 8358
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8312: LD_OWVAR 2
8316: PUSH
8317: LD_VAR 0 1
8321: NONEQUAL
8322: PUSH
8323: LD_OWVAR 2
8327: PPUSH
8328: LD_VAR 0 1
8332: PPUSH
8333: CALL_OW 81
8337: PUSH
8338: LD_INT 2
8340: EQUAL
8341: AND
8342: IFFALSE 8356
// begin side := i ;
8344: LD_ADDR_VAR 0 3
8348: PUSH
8349: LD_VAR 0 1
8353: ST_TO_ADDR
// break ;
8354: GO 8358
// end ;
8356: GO 8309
8358: POP
8359: POP
// if not side then
8360: LD_VAR 0 3
8364: NOT
8365: IFFALSE 8369
// exit ;
8367: GO 8414
// for i := 1 to tmp do
8369: LD_ADDR_VAR 0 1
8373: PUSH
8374: DOUBLE
8375: LD_INT 1
8377: DEC
8378: ST_TO_ADDR
8379: LD_VAR 0 2
8383: PUSH
8384: FOR_TO
8385: IFFALSE 8412
// if Prob ( 60 ) then
8387: LD_INT 60
8389: PPUSH
8390: CALL_OW 13
8394: IFFALSE 8410
// SetSide ( i , side ) ;
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_VAR 0 3
8405: PPUSH
8406: CALL_OW 235
8410: GO 8384
8412: POP
8413: POP
// end ;
8414: PPOPN 3
8416: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8417: LD_EXP 3
8421: PUSH
8422: LD_EXP 16
8426: AND
8427: IFFALSE 8546
8429: GO 8431
8431: DISABLE
8432: LD_INT 0
8434: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8435: LD_ADDR_VAR 0 1
8439: PUSH
8440: LD_INT 22
8442: PUSH
8443: LD_OWVAR 2
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 3
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 0
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: LIST
8483: PPUSH
8484: CALL_OW 69
8488: PUSH
8489: FOR_IN
8490: IFFALSE 8544
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8492: LD_VAR 0 1
8496: PPUSH
8497: CALL_OW 257
8501: PUSH
8502: LD_INT 1
8504: PUSH
8505: LD_INT 2
8507: PUSH
8508: LD_INT 3
8510: PUSH
8511: LD_INT 4
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: IN
8520: IFFALSE 8542
// SetClass ( un , rand ( 1 , 4 ) ) ;
8522: LD_VAR 0 1
8526: PPUSH
8527: LD_INT 1
8529: PPUSH
8530: LD_INT 4
8532: PPUSH
8533: CALL_OW 12
8537: PPUSH
8538: CALL_OW 336
8542: GO 8489
8544: POP
8545: POP
// end ;
8546: PPOPN 1
8548: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8549: LD_EXP 3
8553: PUSH
8554: LD_EXP 15
8558: AND
8559: IFFALSE 8638
8561: GO 8563
8563: DISABLE
8564: LD_INT 0
8566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8567: LD_ADDR_VAR 0 1
8571: PUSH
8572: LD_INT 22
8574: PUSH
8575: LD_OWVAR 2
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 21
8586: PUSH
8587: LD_INT 3
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: ST_TO_ADDR
// if not tmp then
8603: LD_VAR 0 1
8607: NOT
8608: IFFALSE 8612
// exit ;
8610: GO 8638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8612: LD_VAR 0 1
8616: PUSH
8617: LD_INT 1
8619: PPUSH
8620: LD_VAR 0 1
8624: PPUSH
8625: CALL_OW 12
8629: ARRAY
8630: PPUSH
8631: LD_INT 100
8633: PPUSH
8634: CALL_OW 234
// end ;
8638: PPOPN 1
8640: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8641: LD_EXP 3
8645: PUSH
8646: LD_EXP 17
8650: AND
8651: IFFALSE 8749
8653: GO 8655
8655: DISABLE
8656: LD_INT 0
8658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8659: LD_ADDR_VAR 0 1
8663: PUSH
8664: LD_INT 22
8666: PUSH
8667: LD_OWVAR 2
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 21
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PPUSH
8690: CALL_OW 69
8694: ST_TO_ADDR
// if not tmp then
8695: LD_VAR 0 1
8699: NOT
8700: IFFALSE 8704
// exit ;
8702: GO 8749
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8704: LD_VAR 0 1
8708: PUSH
8709: LD_INT 1
8711: PPUSH
8712: LD_VAR 0 1
8716: PPUSH
8717: CALL_OW 12
8721: ARRAY
8722: PPUSH
8723: LD_INT 1
8725: PPUSH
8726: LD_INT 4
8728: PPUSH
8729: CALL_OW 12
8733: PPUSH
8734: LD_INT 3000
8736: PPUSH
8737: LD_INT 9000
8739: PPUSH
8740: CALL_OW 12
8744: PPUSH
8745: CALL_OW 492
// end ;
8749: PPOPN 1
8751: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8752: LD_EXP 3
8756: PUSH
8757: LD_EXP 18
8761: AND
8762: IFFALSE 8782
8764: GO 8766
8766: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8767: LD_INT 1
8769: PPUSH
8770: LD_OWVAR 2
8774: PPUSH
8775: LD_INT 0
8777: PPUSH
8778: CALL_OW 324
8782: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8783: LD_EXP 3
8787: PUSH
8788: LD_EXP 19
8792: AND
8793: IFFALSE 8876
8795: GO 8797
8797: DISABLE
8798: LD_INT 0
8800: PPUSH
8801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8802: LD_ADDR_VAR 0 2
8806: PUSH
8807: LD_INT 22
8809: PUSH
8810: LD_OWVAR 2
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 21
8821: PUSH
8822: LD_INT 3
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PPUSH
8833: CALL_OW 69
8837: ST_TO_ADDR
// if not tmp then
8838: LD_VAR 0 2
8842: NOT
8843: IFFALSE 8847
// exit ;
8845: GO 8876
// for i in tmp do
8847: LD_ADDR_VAR 0 1
8851: PUSH
8852: LD_VAR 0 2
8856: PUSH
8857: FOR_IN
8858: IFFALSE 8874
// SetBLevel ( i , 10 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 10
8867: PPUSH
8868: CALL_OW 241
8872: GO 8857
8874: POP
8875: POP
// end ;
8876: PPOPN 2
8878: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8879: LD_EXP 3
8883: PUSH
8884: LD_EXP 20
8888: AND
8889: IFFALSE 9000
8891: GO 8893
8893: DISABLE
8894: LD_INT 0
8896: PPUSH
8897: PPUSH
8898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8899: LD_ADDR_VAR 0 3
8903: PUSH
8904: LD_INT 22
8906: PUSH
8907: LD_OWVAR 2
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 25
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PPUSH
8930: CALL_OW 69
8934: ST_TO_ADDR
// if not tmp then
8935: LD_VAR 0 3
8939: NOT
8940: IFFALSE 8944
// exit ;
8942: GO 9000
// un := tmp [ rand ( 1 , tmp ) ] ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_VAR 0 3
8953: PUSH
8954: LD_INT 1
8956: PPUSH
8957: LD_VAR 0 3
8961: PPUSH
8962: CALL_OW 12
8966: ARRAY
8967: ST_TO_ADDR
// if Crawls ( un ) then
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL_OW 318
8977: IFFALSE 8988
// ComWalk ( un ) ;
8979: LD_VAR 0 2
8983: PPUSH
8984: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8988: LD_VAR 0 2
8992: PPUSH
8993: LD_INT 5
8995: PPUSH
8996: CALL_OW 336
// end ;
9000: PPOPN 3
9002: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9003: LD_EXP 3
9007: PUSH
9008: LD_EXP 21
9012: AND
9013: PUSH
9014: LD_OWVAR 67
9018: PUSH
9019: LD_INT 4
9021: LESS
9022: AND
9023: IFFALSE 9042
9025: GO 9027
9027: DISABLE
// begin Difficulty := Difficulty + 1 ;
9028: LD_ADDR_OWVAR 67
9032: PUSH
9033: LD_OWVAR 67
9037: PUSH
9038: LD_INT 1
9040: PLUS
9041: ST_TO_ADDR
// end ;
9042: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9043: LD_EXP 3
9047: PUSH
9048: LD_EXP 22
9052: AND
9053: IFFALSE 9156
9055: GO 9057
9057: DISABLE
9058: LD_INT 0
9060: PPUSH
// begin for i := 1 to 5 do
9061: LD_ADDR_VAR 0 1
9065: PUSH
9066: DOUBLE
9067: LD_INT 1
9069: DEC
9070: ST_TO_ADDR
9071: LD_INT 5
9073: PUSH
9074: FOR_TO
9075: IFFALSE 9154
// begin uc_nation := nation_nature ;
9077: LD_ADDR_OWVAR 21
9081: PUSH
9082: LD_INT 0
9084: ST_TO_ADDR
// uc_side := 0 ;
9085: LD_ADDR_OWVAR 20
9089: PUSH
9090: LD_INT 0
9092: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9093: LD_ADDR_OWVAR 29
9097: PUSH
9098: LD_INT 12
9100: PUSH
9101: LD_INT 12
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: ST_TO_ADDR
// hc_agressivity := 20 ;
9108: LD_ADDR_OWVAR 35
9112: PUSH
9113: LD_INT 20
9115: ST_TO_ADDR
// hc_class := class_tiger ;
9116: LD_ADDR_OWVAR 28
9120: PUSH
9121: LD_INT 14
9123: ST_TO_ADDR
// hc_gallery :=  ;
9124: LD_ADDR_OWVAR 33
9128: PUSH
9129: LD_STRING 
9131: ST_TO_ADDR
// hc_name :=  ;
9132: LD_ADDR_OWVAR 26
9136: PUSH
9137: LD_STRING 
9139: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9140: CALL_OW 44
9144: PPUSH
9145: LD_INT 0
9147: PPUSH
9148: CALL_OW 51
// end ;
9152: GO 9074
9154: POP
9155: POP
// end ;
9156: PPOPN 1
9158: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9159: LD_EXP 3
9163: PUSH
9164: LD_EXP 23
9168: AND
9169: IFFALSE 9178
9171: GO 9173
9173: DISABLE
// StreamSibBomb ;
9174: CALL 9179 0 0
9178: END
// export function StreamSibBomb ; var i , x , y ; begin
9179: LD_INT 0
9181: PPUSH
9182: PPUSH
9183: PPUSH
9184: PPUSH
// result := false ;
9185: LD_ADDR_VAR 0 1
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// for i := 1 to 16 do
9193: LD_ADDR_VAR 0 2
9197: PUSH
9198: DOUBLE
9199: LD_INT 1
9201: DEC
9202: ST_TO_ADDR
9203: LD_INT 16
9205: PUSH
9206: FOR_TO
9207: IFFALSE 9406
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9209: LD_ADDR_VAR 0 3
9213: PUSH
9214: LD_INT 10
9216: PUSH
9217: LD_INT 20
9219: PUSH
9220: LD_INT 30
9222: PUSH
9223: LD_INT 40
9225: PUSH
9226: LD_INT 50
9228: PUSH
9229: LD_INT 60
9231: PUSH
9232: LD_INT 70
9234: PUSH
9235: LD_INT 80
9237: PUSH
9238: LD_INT 90
9240: PUSH
9241: LD_INT 100
9243: PUSH
9244: LD_INT 110
9246: PUSH
9247: LD_INT 120
9249: PUSH
9250: LD_INT 130
9252: PUSH
9253: LD_INT 140
9255: PUSH
9256: LD_INT 150
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 1
9278: PPUSH
9279: LD_INT 15
9281: PPUSH
9282: CALL_OW 12
9286: ARRAY
9287: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9288: LD_ADDR_VAR 0 4
9292: PUSH
9293: LD_INT 10
9295: PUSH
9296: LD_INT 20
9298: PUSH
9299: LD_INT 30
9301: PUSH
9302: LD_INT 40
9304: PUSH
9305: LD_INT 50
9307: PUSH
9308: LD_INT 60
9310: PUSH
9311: LD_INT 70
9313: PUSH
9314: LD_INT 80
9316: PUSH
9317: LD_INT 90
9319: PUSH
9320: LD_INT 100
9322: PUSH
9323: LD_INT 110
9325: PUSH
9326: LD_INT 120
9328: PUSH
9329: LD_INT 130
9331: PUSH
9332: LD_INT 140
9334: PUSH
9335: LD_INT 150
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: PUSH
9355: LD_INT 1
9357: PPUSH
9358: LD_INT 15
9360: PPUSH
9361: CALL_OW 12
9365: ARRAY
9366: ST_TO_ADDR
// if ValidHex ( x , y ) then
9367: LD_VAR 0 3
9371: PPUSH
9372: LD_VAR 0 4
9376: PPUSH
9377: CALL_OW 488
9381: IFFALSE 9404
// begin result := [ x , y ] ;
9383: LD_ADDR_VAR 0 1
9387: PUSH
9388: LD_VAR 0 3
9392: PUSH
9393: LD_VAR 0 4
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: ST_TO_ADDR
// break ;
9402: GO 9406
// end ; end ;
9404: GO 9206
9406: POP
9407: POP
// if result then
9408: LD_VAR 0 1
9412: IFFALSE 9472
// begin ToLua ( playSibBomb() ) ;
9414: LD_STRING playSibBomb()
9416: PPUSH
9417: CALL_OW 559
// wait ( 0 0$14 ) ;
9421: LD_INT 490
9423: PPUSH
9424: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9428: LD_VAR 0 1
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: PPUSH
9437: LD_VAR 0 1
9441: PUSH
9442: LD_INT 2
9444: ARRAY
9445: PPUSH
9446: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9450: LD_VAR 0 1
9454: PUSH
9455: LD_INT 1
9457: ARRAY
9458: PPUSH
9459: LD_VAR 0 1
9463: PUSH
9464: LD_INT 2
9466: ARRAY
9467: PPUSH
9468: CALL_OW 429
// end ; end ;
9472: LD_VAR 0 1
9476: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9477: LD_EXP 3
9481: PUSH
9482: LD_EXP 25
9486: AND
9487: IFFALSE 9499
9489: GO 9491
9491: DISABLE
// YouLost (  ) ;
9492: LD_STRING 
9494: PPUSH
9495: CALL_OW 104
9499: END
// every 0 0$1 trigger StreamModeActive and sFog do
9500: LD_EXP 3
9504: PUSH
9505: LD_EXP 24
9509: AND
9510: IFFALSE 9524
9512: GO 9514
9514: DISABLE
// FogOff ( your_side ) ;
9515: LD_OWVAR 2
9519: PPUSH
9520: CALL_OW 344
9524: END
// every 0 0$1 trigger StreamModeActive and sSun do
9525: LD_EXP 3
9529: PUSH
9530: LD_EXP 26
9534: AND
9535: IFFALSE 9563
9537: GO 9539
9539: DISABLE
// begin solar_recharge_percent := 0 ;
9540: LD_ADDR_OWVAR 79
9544: PUSH
9545: LD_INT 0
9547: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9548: LD_INT 10500
9550: PPUSH
9551: CALL_OW 67
// solar_recharge_percent := 100 ;
9555: LD_ADDR_OWVAR 79
9559: PUSH
9560: LD_INT 100
9562: ST_TO_ADDR
// end ;
9563: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9564: LD_EXP 3
9568: PUSH
9569: LD_EXP 27
9573: AND
9574: IFFALSE 9813
9576: GO 9578
9578: DISABLE
9579: LD_INT 0
9581: PPUSH
9582: PPUSH
9583: PPUSH
// begin tmp := [ ] ;
9584: LD_ADDR_VAR 0 3
9588: PUSH
9589: EMPTY
9590: ST_TO_ADDR
// for i := 1 to 6 do
9591: LD_ADDR_VAR 0 1
9595: PUSH
9596: DOUBLE
9597: LD_INT 1
9599: DEC
9600: ST_TO_ADDR
9601: LD_INT 6
9603: PUSH
9604: FOR_TO
9605: IFFALSE 9710
// begin uc_nation := nation_nature ;
9607: LD_ADDR_OWVAR 21
9611: PUSH
9612: LD_INT 0
9614: ST_TO_ADDR
// uc_side := 0 ;
9615: LD_ADDR_OWVAR 20
9619: PUSH
9620: LD_INT 0
9622: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9623: LD_ADDR_OWVAR 29
9627: PUSH
9628: LD_INT 12
9630: PUSH
9631: LD_INT 12
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: ST_TO_ADDR
// hc_agressivity := 20 ;
9638: LD_ADDR_OWVAR 35
9642: PUSH
9643: LD_INT 20
9645: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9646: LD_ADDR_OWVAR 28
9650: PUSH
9651: LD_INT 17
9653: ST_TO_ADDR
// hc_gallery :=  ;
9654: LD_ADDR_OWVAR 33
9658: PUSH
9659: LD_STRING 
9661: ST_TO_ADDR
// hc_name :=  ;
9662: LD_ADDR_OWVAR 26
9666: PUSH
9667: LD_STRING 
9669: ST_TO_ADDR
// un := CreateHuman ;
9670: LD_ADDR_VAR 0 2
9674: PUSH
9675: CALL_OW 44
9679: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9680: LD_VAR 0 2
9684: PPUSH
9685: LD_INT 1
9687: PPUSH
9688: CALL_OW 51
// tmp := tmp ^ un ;
9692: LD_ADDR_VAR 0 3
9696: PUSH
9697: LD_VAR 0 3
9701: PUSH
9702: LD_VAR 0 2
9706: ADD
9707: ST_TO_ADDR
// end ;
9708: GO 9604
9710: POP
9711: POP
// repeat wait ( 0 0$1 ) ;
9712: LD_INT 35
9714: PPUSH
9715: CALL_OW 67
// for un in tmp do
9719: LD_ADDR_VAR 0 2
9723: PUSH
9724: LD_VAR 0 3
9728: PUSH
9729: FOR_IN
9730: IFFALSE 9804
// begin if IsDead ( un ) then
9732: LD_VAR 0 2
9736: PPUSH
9737: CALL_OW 301
9741: IFFALSE 9761
// begin tmp := tmp diff un ;
9743: LD_ADDR_VAR 0 3
9747: PUSH
9748: LD_VAR 0 3
9752: PUSH
9753: LD_VAR 0 2
9757: DIFF
9758: ST_TO_ADDR
// continue ;
9759: GO 9729
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9761: LD_VAR 0 2
9765: PPUSH
9766: LD_INT 3
9768: PUSH
9769: LD_INT 22
9771: PUSH
9772: LD_INT 0
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PPUSH
9783: CALL_OW 69
9787: PPUSH
9788: LD_VAR 0 2
9792: PPUSH
9793: CALL_OW 74
9797: PPUSH
9798: CALL_OW 115
// end ;
9802: GO 9729
9804: POP
9805: POP
// until not tmp ;
9806: LD_VAR 0 3
9810: NOT
9811: IFFALSE 9712
// end ;
9813: PPOPN 3
9815: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9816: LD_EXP 3
9820: PUSH
9821: LD_EXP 28
9825: AND
9826: IFFALSE 9880
9828: GO 9830
9830: DISABLE
// begin ToLua ( displayTroll(); ) ;
9831: LD_STRING displayTroll();
9833: PPUSH
9834: CALL_OW 559
// wait ( 3 3$00 ) ;
9838: LD_INT 6300
9840: PPUSH
9841: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9845: LD_STRING hideTroll();
9847: PPUSH
9848: CALL_OW 559
// wait ( 1 1$00 ) ;
9852: LD_INT 2100
9854: PPUSH
9855: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9859: LD_STRING displayTroll();
9861: PPUSH
9862: CALL_OW 559
// wait ( 1 1$00 ) ;
9866: LD_INT 2100
9868: PPUSH
9869: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9873: LD_STRING hideTroll();
9875: PPUSH
9876: CALL_OW 559
// end ;
9880: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9881: LD_EXP 3
9885: PUSH
9886: LD_EXP 29
9890: AND
9891: IFFALSE 9954
9893: GO 9895
9895: DISABLE
9896: LD_INT 0
9898: PPUSH
// begin p := 0 ;
9899: LD_ADDR_VAR 0 1
9903: PUSH
9904: LD_INT 0
9906: ST_TO_ADDR
// repeat game_speed := 1 ;
9907: LD_ADDR_OWVAR 65
9911: PUSH
9912: LD_INT 1
9914: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9915: LD_INT 35
9917: PPUSH
9918: CALL_OW 67
// p := p + 1 ;
9922: LD_ADDR_VAR 0 1
9926: PUSH
9927: LD_VAR 0 1
9931: PUSH
9932: LD_INT 1
9934: PLUS
9935: ST_TO_ADDR
// until p >= 60 ;
9936: LD_VAR 0 1
9940: PUSH
9941: LD_INT 60
9943: GREATEREQUAL
9944: IFFALSE 9907
// game_speed := 4 ;
9946: LD_ADDR_OWVAR 65
9950: PUSH
9951: LD_INT 4
9953: ST_TO_ADDR
// end ;
9954: PPOPN 1
9956: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9957: LD_EXP 3
9961: PUSH
9962: LD_EXP 30
9966: AND
9967: IFFALSE 10113
9969: GO 9971
9971: DISABLE
9972: LD_INT 0
9974: PPUSH
9975: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9976: LD_ADDR_VAR 0 1
9980: PUSH
9981: LD_INT 22
9983: PUSH
9984: LD_OWVAR 2
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 2
9995: PUSH
9996: LD_INT 30
9998: PUSH
9999: LD_INT 0
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 30
10008: PUSH
10009: LD_INT 1
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PPUSH
10025: CALL_OW 69
10029: ST_TO_ADDR
// if not depot then
10030: LD_VAR 0 1
10034: NOT
10035: IFFALSE 10039
// exit ;
10037: GO 10113
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10039: LD_ADDR_VAR 0 2
10043: PUSH
10044: LD_VAR 0 1
10048: PUSH
10049: LD_INT 1
10051: PPUSH
10052: LD_VAR 0 1
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: PPUSH
10063: CALL_OW 274
10067: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10068: LD_VAR 0 2
10072: PPUSH
10073: LD_INT 1
10075: PPUSH
10076: LD_INT 0
10078: PPUSH
10079: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10083: LD_VAR 0 2
10087: PPUSH
10088: LD_INT 2
10090: PPUSH
10091: LD_INT 0
10093: PPUSH
10094: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10098: LD_VAR 0 2
10102: PPUSH
10103: LD_INT 3
10105: PPUSH
10106: LD_INT 0
10108: PPUSH
10109: CALL_OW 277
// end ;
10113: PPOPN 2
10115: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10116: LD_EXP 3
10120: PUSH
10121: LD_EXP 31
10125: AND
10126: IFFALSE 10223
10128: GO 10130
10130: DISABLE
10131: LD_INT 0
10133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_INT 22
10141: PUSH
10142: LD_OWVAR 2
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 21
10153: PUSH
10154: LD_INT 1
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 3
10163: PUSH
10164: LD_INT 23
10166: PUSH
10167: LD_INT 0
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: PPUSH
10183: CALL_OW 69
10187: ST_TO_ADDR
// if not tmp then
10188: LD_VAR 0 1
10192: NOT
10193: IFFALSE 10197
// exit ;
10195: GO 10223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10197: LD_VAR 0 1
10201: PUSH
10202: LD_INT 1
10204: PPUSH
10205: LD_VAR 0 1
10209: PPUSH
10210: CALL_OW 12
10214: ARRAY
10215: PPUSH
10216: LD_INT 200
10218: PPUSH
10219: CALL_OW 234
// end ;
10223: PPOPN 1
10225: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10226: LD_EXP 3
10230: PUSH
10231: LD_EXP 32
10235: AND
10236: IFFALSE 10315
10238: GO 10240
10240: DISABLE
10241: LD_INT 0
10243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: LD_INT 22
10251: PUSH
10252: LD_OWVAR 2
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: LD_INT 21
10263: PUSH
10264: LD_INT 2
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PPUSH
10275: CALL_OW 69
10279: ST_TO_ADDR
// if not tmp then
10280: LD_VAR 0 1
10284: NOT
10285: IFFALSE 10289
// exit ;
10287: GO 10315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10289: LD_VAR 0 1
10293: PUSH
10294: LD_INT 1
10296: PPUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 12
10306: ARRAY
10307: PPUSH
10308: LD_INT 60
10310: PPUSH
10311: CALL_OW 234
// end ;
10315: PPOPN 1
10317: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10318: LD_EXP 3
10322: PUSH
10323: LD_EXP 33
10327: AND
10328: IFFALSE 10427
10330: GO 10332
10332: DISABLE
10333: LD_INT 0
10335: PPUSH
10336: PPUSH
// begin enable ;
10337: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10338: LD_ADDR_VAR 0 1
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_OWVAR 2
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 61
10357: PUSH
10358: EMPTY
10359: LIST
10360: PUSH
10361: LD_INT 33
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: LIST
10375: PPUSH
10376: CALL_OW 69
10380: ST_TO_ADDR
// if not tmp then
10381: LD_VAR 0 1
10385: NOT
10386: IFFALSE 10390
// exit ;
10388: GO 10427
// for i in tmp do
10390: LD_ADDR_VAR 0 2
10394: PUSH
10395: LD_VAR 0 1
10399: PUSH
10400: FOR_IN
10401: IFFALSE 10425
// if IsControledBy ( i ) then
10403: LD_VAR 0 2
10407: PPUSH
10408: CALL_OW 312
10412: IFFALSE 10423
// ComUnlink ( i ) ;
10414: LD_VAR 0 2
10418: PPUSH
10419: CALL_OW 136
10423: GO 10400
10425: POP
10426: POP
// end ;
10427: PPOPN 2
10429: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10430: LD_EXP 3
10434: PUSH
10435: LD_EXP 34
10439: AND
10440: IFFALSE 10580
10442: GO 10444
10444: DISABLE
10445: LD_INT 0
10447: PPUSH
10448: PPUSH
// begin ToLua ( displayPowell(); ) ;
10449: LD_STRING displayPowell();
10451: PPUSH
10452: CALL_OW 559
// uc_side := 0 ;
10456: LD_ADDR_OWVAR 20
10460: PUSH
10461: LD_INT 0
10463: ST_TO_ADDR
// uc_nation := 2 ;
10464: LD_ADDR_OWVAR 21
10468: PUSH
10469: LD_INT 2
10471: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10472: LD_ADDR_OWVAR 37
10476: PUSH
10477: LD_INT 14
10479: ST_TO_ADDR
// vc_engine := engine_siberite ;
10480: LD_ADDR_OWVAR 39
10484: PUSH
10485: LD_INT 3
10487: ST_TO_ADDR
// vc_control := control_apeman ;
10488: LD_ADDR_OWVAR 38
10492: PUSH
10493: LD_INT 5
10495: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10496: LD_ADDR_OWVAR 40
10500: PUSH
10501: LD_INT 29
10503: ST_TO_ADDR
// un := CreateVehicle ;
10504: LD_ADDR_VAR 0 2
10508: PUSH
10509: CALL_OW 45
10513: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10514: LD_VAR 0 2
10518: PPUSH
10519: LD_INT 1
10521: PPUSH
10522: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10526: LD_INT 35
10528: PPUSH
10529: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10533: LD_VAR 0 2
10537: PPUSH
10538: LD_INT 22
10540: PUSH
10541: LD_OWVAR 2
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: PPUSH
10555: LD_VAR 0 2
10559: PPUSH
10560: CALL_OW 74
10564: PPUSH
10565: CALL_OW 115
// until IsDead ( un ) ;
10569: LD_VAR 0 2
10573: PPUSH
10574: CALL_OW 301
10578: IFFALSE 10526
// end ;
10580: PPOPN 2
10582: END
// every 0 0$1 trigger StreamModeActive and sStu do
10583: LD_EXP 3
10587: PUSH
10588: LD_EXP 42
10592: AND
10593: IFFALSE 10609
10595: GO 10597
10597: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10598: LD_STRING displayStucuk();
10600: PPUSH
10601: CALL_OW 559
// ResetFog ;
10605: CALL_OW 335
// end ;
10609: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10610: LD_EXP 3
10614: PUSH
10615: LD_EXP 35
10619: AND
10620: IFFALSE 10761
10622: GO 10624
10624: DISABLE
10625: LD_INT 0
10627: PPUSH
10628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: LD_INT 22
10636: PUSH
10637: LD_OWVAR 2
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 21
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 69
10664: ST_TO_ADDR
// if not tmp then
10665: LD_VAR 0 2
10669: NOT
10670: IFFALSE 10674
// exit ;
10672: GO 10761
// un := tmp [ rand ( 1 , tmp ) ] ;
10674: LD_ADDR_VAR 0 1
10678: PUSH
10679: LD_VAR 0 2
10683: PUSH
10684: LD_INT 1
10686: PPUSH
10687: LD_VAR 0 2
10691: PPUSH
10692: CALL_OW 12
10696: ARRAY
10697: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10698: LD_VAR 0 1
10702: PPUSH
10703: LD_INT 0
10705: PPUSH
10706: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10710: LD_VAR 0 1
10714: PPUSH
10715: LD_OWVAR 3
10719: PUSH
10720: LD_VAR 0 1
10724: DIFF
10725: PPUSH
10726: LD_VAR 0 1
10730: PPUSH
10731: CALL_OW 74
10735: PPUSH
10736: CALL_OW 115
// wait ( 0 0$20 ) ;
10740: LD_INT 700
10742: PPUSH
10743: CALL_OW 67
// SetSide ( un , your_side ) ;
10747: LD_VAR 0 1
10751: PPUSH
10752: LD_OWVAR 2
10756: PPUSH
10757: CALL_OW 235
// end ;
10761: PPOPN 2
10763: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10764: LD_EXP 3
10768: PUSH
10769: LD_EXP 36
10773: AND
10774: IFFALSE 10880
10776: GO 10778
10778: DISABLE
10779: LD_INT 0
10781: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: LD_INT 22
10789: PUSH
10790: LD_OWVAR 2
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 30
10804: PUSH
10805: LD_INT 0
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 30
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PPUSH
10831: CALL_OW 69
10835: ST_TO_ADDR
// if not depot then
10836: LD_VAR 0 1
10840: NOT
10841: IFFALSE 10845
// exit ;
10843: GO 10880
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10845: LD_VAR 0 1
10849: PUSH
10850: LD_INT 1
10852: ARRAY
10853: PPUSH
10854: CALL_OW 250
10858: PPUSH
10859: LD_VAR 0 1
10863: PUSH
10864: LD_INT 1
10866: ARRAY
10867: PPUSH
10868: CALL_OW 251
10872: PPUSH
10873: LD_INT 70
10875: PPUSH
10876: CALL_OW 495
// end ;
10880: PPOPN 1
10882: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10883: LD_EXP 3
10887: PUSH
10888: LD_EXP 37
10892: AND
10893: IFFALSE 11104
10895: GO 10897
10897: DISABLE
10898: LD_INT 0
10900: PPUSH
10901: PPUSH
10902: PPUSH
10903: PPUSH
10904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10905: LD_ADDR_VAR 0 5
10909: PUSH
10910: LD_INT 22
10912: PUSH
10913: LD_OWVAR 2
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 21
10924: PUSH
10925: LD_INT 1
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PPUSH
10936: CALL_OW 69
10940: ST_TO_ADDR
// if not tmp then
10941: LD_VAR 0 5
10945: NOT
10946: IFFALSE 10950
// exit ;
10948: GO 11104
// for i in tmp do
10950: LD_ADDR_VAR 0 1
10954: PUSH
10955: LD_VAR 0 5
10959: PUSH
10960: FOR_IN
10961: IFFALSE 11102
// begin d := rand ( 0 , 5 ) ;
10963: LD_ADDR_VAR 0 4
10967: PUSH
10968: LD_INT 0
10970: PPUSH
10971: LD_INT 5
10973: PPUSH
10974: CALL_OW 12
10978: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10979: LD_ADDR_VAR 0 2
10983: PUSH
10984: LD_VAR 0 1
10988: PPUSH
10989: CALL_OW 250
10993: PPUSH
10994: LD_VAR 0 4
10998: PPUSH
10999: LD_INT 3
11001: PPUSH
11002: LD_INT 12
11004: PPUSH
11005: CALL_OW 12
11009: PPUSH
11010: CALL_OW 272
11014: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11015: LD_ADDR_VAR 0 3
11019: PUSH
11020: LD_VAR 0 1
11024: PPUSH
11025: CALL_OW 251
11029: PPUSH
11030: LD_VAR 0 4
11034: PPUSH
11035: LD_INT 3
11037: PPUSH
11038: LD_INT 12
11040: PPUSH
11041: CALL_OW 12
11045: PPUSH
11046: CALL_OW 273
11050: ST_TO_ADDR
// if ValidHex ( x , y ) then
11051: LD_VAR 0 2
11055: PPUSH
11056: LD_VAR 0 3
11060: PPUSH
11061: CALL_OW 488
11065: IFFALSE 11100
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11067: LD_VAR 0 1
11071: PPUSH
11072: LD_VAR 0 2
11076: PPUSH
11077: LD_VAR 0 3
11081: PPUSH
11082: LD_INT 3
11084: PPUSH
11085: LD_INT 6
11087: PPUSH
11088: CALL_OW 12
11092: PPUSH
11093: LD_INT 1
11095: PPUSH
11096: CALL_OW 483
// end ;
11100: GO 10960
11102: POP
11103: POP
// end ;
11104: PPOPN 5
11106: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11107: LD_EXP 3
11111: PUSH
11112: LD_EXP 38
11116: AND
11117: IFFALSE 11211
11119: GO 11121
11121: DISABLE
11122: LD_INT 0
11124: PPUSH
11125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11126: LD_ADDR_VAR 0 2
11130: PUSH
11131: LD_INT 22
11133: PUSH
11134: LD_OWVAR 2
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 32
11145: PUSH
11146: LD_INT 1
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 21
11155: PUSH
11156: LD_INT 2
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: PPUSH
11168: CALL_OW 69
11172: ST_TO_ADDR
// if not tmp then
11173: LD_VAR 0 2
11177: NOT
11178: IFFALSE 11182
// exit ;
11180: GO 11211
// for i in tmp do
11182: LD_ADDR_VAR 0 1
11186: PUSH
11187: LD_VAR 0 2
11191: PUSH
11192: FOR_IN
11193: IFFALSE 11209
// SetFuel ( i , 0 ) ;
11195: LD_VAR 0 1
11199: PPUSH
11200: LD_INT 0
11202: PPUSH
11203: CALL_OW 240
11207: GO 11192
11209: POP
11210: POP
// end ;
11211: PPOPN 2
11213: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11214: LD_EXP 3
11218: PUSH
11219: LD_EXP 39
11223: AND
11224: IFFALSE 11290
11226: GO 11228
11228: DISABLE
11229: LD_INT 0
11231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11232: LD_ADDR_VAR 0 1
11236: PUSH
11237: LD_INT 22
11239: PUSH
11240: LD_OWVAR 2
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 30
11251: PUSH
11252: LD_INT 29
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PPUSH
11263: CALL_OW 69
11267: ST_TO_ADDR
// if not tmp then
11268: LD_VAR 0 1
11272: NOT
11273: IFFALSE 11277
// exit ;
11275: GO 11290
// DestroyUnit ( tmp [ 1 ] ) ;
11277: LD_VAR 0 1
11281: PUSH
11282: LD_INT 1
11284: ARRAY
11285: PPUSH
11286: CALL_OW 65
// end ;
11290: PPOPN 1
11292: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11293: LD_EXP 3
11297: PUSH
11298: LD_EXP 41
11302: AND
11303: IFFALSE 11432
11305: GO 11307
11307: DISABLE
11308: LD_INT 0
11310: PPUSH
// begin uc_side := 0 ;
11311: LD_ADDR_OWVAR 20
11315: PUSH
11316: LD_INT 0
11318: ST_TO_ADDR
// uc_nation := nation_arabian ;
11319: LD_ADDR_OWVAR 21
11323: PUSH
11324: LD_INT 2
11326: ST_TO_ADDR
// hc_gallery :=  ;
11327: LD_ADDR_OWVAR 33
11331: PUSH
11332: LD_STRING 
11334: ST_TO_ADDR
// hc_name :=  ;
11335: LD_ADDR_OWVAR 26
11339: PUSH
11340: LD_STRING 
11342: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11343: LD_INT 1
11345: PPUSH
11346: LD_INT 11
11348: PPUSH
11349: LD_INT 10
11351: PPUSH
11352: CALL_OW 380
// un := CreateHuman ;
11356: LD_ADDR_VAR 0 1
11360: PUSH
11361: CALL_OW 44
11365: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11366: LD_VAR 0 1
11370: PPUSH
11371: LD_INT 1
11373: PPUSH
11374: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11378: LD_INT 35
11380: PPUSH
11381: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11385: LD_VAR 0 1
11389: PPUSH
11390: LD_INT 22
11392: PUSH
11393: LD_OWVAR 2
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PPUSH
11402: CALL_OW 69
11406: PPUSH
11407: LD_VAR 0 1
11411: PPUSH
11412: CALL_OW 74
11416: PPUSH
11417: CALL_OW 115
// until IsDead ( un ) ;
11421: LD_VAR 0 1
11425: PPUSH
11426: CALL_OW 301
11430: IFFALSE 11378
// end ;
11432: PPOPN 1
11434: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11435: LD_EXP 3
11439: PUSH
11440: LD_EXP 43
11444: AND
11445: IFFALSE 11457
11447: GO 11449
11449: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11450: LD_STRING earthquake(getX(game), 0, 32)
11452: PPUSH
11453: CALL_OW 559
11457: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11458: LD_EXP 3
11462: PUSH
11463: LD_EXP 44
11467: AND
11468: IFFALSE 11559
11470: GO 11472
11472: DISABLE
11473: LD_INT 0
11475: PPUSH
// begin enable ;
11476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11477: LD_ADDR_VAR 0 1
11481: PUSH
11482: LD_INT 22
11484: PUSH
11485: LD_OWVAR 2
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 21
11496: PUSH
11497: LD_INT 2
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 33
11506: PUSH
11507: LD_INT 3
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: PPUSH
11519: CALL_OW 69
11523: ST_TO_ADDR
// if not tmp then
11524: LD_VAR 0 1
11528: NOT
11529: IFFALSE 11533
// exit ;
11531: GO 11559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11533: LD_VAR 0 1
11537: PUSH
11538: LD_INT 1
11540: PPUSH
11541: LD_VAR 0 1
11545: PPUSH
11546: CALL_OW 12
11550: ARRAY
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 234
// end ;
11559: PPOPN 1
11561: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11562: LD_EXP 3
11566: PUSH
11567: LD_EXP 45
11571: AND
11572: IFFALSE 11713
11574: GO 11576
11576: DISABLE
11577: LD_INT 0
11579: PPUSH
11580: PPUSH
11581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11582: LD_ADDR_VAR 0 3
11586: PUSH
11587: LD_INT 22
11589: PUSH
11590: LD_OWVAR 2
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 25
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PPUSH
11613: CALL_OW 69
11617: ST_TO_ADDR
// if not tmp then
11618: LD_VAR 0 3
11622: NOT
11623: IFFALSE 11627
// exit ;
11625: GO 11713
// un := tmp [ rand ( 1 , tmp ) ] ;
11627: LD_ADDR_VAR 0 2
11631: PUSH
11632: LD_VAR 0 3
11636: PUSH
11637: LD_INT 1
11639: PPUSH
11640: LD_VAR 0 3
11644: PPUSH
11645: CALL_OW 12
11649: ARRAY
11650: ST_TO_ADDR
// if Crawls ( un ) then
11651: LD_VAR 0 2
11655: PPUSH
11656: CALL_OW 318
11660: IFFALSE 11671
// ComWalk ( un ) ;
11662: LD_VAR 0 2
11666: PPUSH
11667: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11671: LD_VAR 0 2
11675: PPUSH
11676: LD_INT 9
11678: PPUSH
11679: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11683: LD_INT 28
11685: PPUSH
11686: LD_OWVAR 2
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11698: LD_INT 29
11700: PPUSH
11701: LD_OWVAR 2
11705: PPUSH
11706: LD_INT 2
11708: PPUSH
11709: CALL_OW 322
// end ;
11713: PPOPN 3
11715: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11716: LD_EXP 3
11720: PUSH
11721: LD_EXP 46
11725: AND
11726: IFFALSE 11837
11728: GO 11730
11730: DISABLE
11731: LD_INT 0
11733: PPUSH
11734: PPUSH
11735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11736: LD_ADDR_VAR 0 3
11740: PUSH
11741: LD_INT 22
11743: PUSH
11744: LD_OWVAR 2
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 25
11755: PUSH
11756: LD_INT 1
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL_OW 69
11771: ST_TO_ADDR
// if not tmp then
11772: LD_VAR 0 3
11776: NOT
11777: IFFALSE 11781
// exit ;
11779: GO 11837
// un := tmp [ rand ( 1 , tmp ) ] ;
11781: LD_ADDR_VAR 0 2
11785: PUSH
11786: LD_VAR 0 3
11790: PUSH
11791: LD_INT 1
11793: PPUSH
11794: LD_VAR 0 3
11798: PPUSH
11799: CALL_OW 12
11803: ARRAY
11804: ST_TO_ADDR
// if Crawls ( un ) then
11805: LD_VAR 0 2
11809: PPUSH
11810: CALL_OW 318
11814: IFFALSE 11825
// ComWalk ( un ) ;
11816: LD_VAR 0 2
11820: PPUSH
11821: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11825: LD_VAR 0 2
11829: PPUSH
11830: LD_INT 8
11832: PPUSH
11833: CALL_OW 336
// end ;
11837: PPOPN 3
11839: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11840: LD_EXP 3
11844: PUSH
11845: LD_EXP 47
11849: AND
11850: IFFALSE 11994
11852: GO 11854
11854: DISABLE
11855: LD_INT 0
11857: PPUSH
11858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11859: LD_ADDR_VAR 0 2
11863: PUSH
11864: LD_INT 22
11866: PUSH
11867: LD_OWVAR 2
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 2
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 2
11888: PUSH
11889: LD_INT 34
11891: PUSH
11892: LD_INT 12
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 34
11901: PUSH
11902: LD_INT 51
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 34
11911: PUSH
11912: LD_INT 32
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: ST_TO_ADDR
// if not tmp then
11935: LD_VAR 0 2
11939: NOT
11940: IFFALSE 11944
// exit ;
11942: GO 11994
// for i in tmp do
11944: LD_ADDR_VAR 0 1
11948: PUSH
11949: LD_VAR 0 2
11953: PUSH
11954: FOR_IN
11955: IFFALSE 11992
// if GetCargo ( i , mat_artifact ) = 0 then
11957: LD_VAR 0 1
11961: PPUSH
11962: LD_INT 4
11964: PPUSH
11965: CALL_OW 289
11969: PUSH
11970: LD_INT 0
11972: EQUAL
11973: IFFALSE 11990
// SetCargo ( i , mat_siberit , 100 ) ;
11975: LD_VAR 0 1
11979: PPUSH
11980: LD_INT 3
11982: PPUSH
11983: LD_INT 100
11985: PPUSH
11986: CALL_OW 290
11990: GO 11954
11992: POP
11993: POP
// end ;
11994: PPOPN 2
11996: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11997: LD_EXP 3
12001: PUSH
12002: LD_EXP 48
12006: AND
12007: IFFALSE 12190
12009: GO 12011
12011: DISABLE
12012: LD_INT 0
12014: PPUSH
12015: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12016: LD_ADDR_VAR 0 2
12020: PUSH
12021: LD_INT 22
12023: PUSH
12024: LD_OWVAR 2
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PPUSH
12033: CALL_OW 69
12037: ST_TO_ADDR
// if not tmp then
12038: LD_VAR 0 2
12042: NOT
12043: IFFALSE 12047
// exit ;
12045: GO 12190
// for i := 1 to 2 do
12047: LD_ADDR_VAR 0 1
12051: PUSH
12052: DOUBLE
12053: LD_INT 1
12055: DEC
12056: ST_TO_ADDR
12057: LD_INT 2
12059: PUSH
12060: FOR_TO
12061: IFFALSE 12188
// begin uc_side := your_side ;
12063: LD_ADDR_OWVAR 20
12067: PUSH
12068: LD_OWVAR 2
12072: ST_TO_ADDR
// uc_nation := nation_american ;
12073: LD_ADDR_OWVAR 21
12077: PUSH
12078: LD_INT 1
12080: ST_TO_ADDR
// vc_chassis := us_morphling ;
12081: LD_ADDR_OWVAR 37
12085: PUSH
12086: LD_INT 5
12088: ST_TO_ADDR
// vc_engine := engine_siberite ;
12089: LD_ADDR_OWVAR 39
12093: PUSH
12094: LD_INT 3
12096: ST_TO_ADDR
// vc_control := control_computer ;
12097: LD_ADDR_OWVAR 38
12101: PUSH
12102: LD_INT 3
12104: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12105: LD_ADDR_OWVAR 40
12109: PUSH
12110: LD_INT 10
12112: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12113: LD_VAR 0 2
12117: PUSH
12118: LD_INT 1
12120: ARRAY
12121: PPUSH
12122: CALL_OW 310
12126: NOT
12127: IFFALSE 12174
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12129: CALL_OW 45
12133: PPUSH
12134: LD_VAR 0 2
12138: PUSH
12139: LD_INT 1
12141: ARRAY
12142: PPUSH
12143: CALL_OW 250
12147: PPUSH
12148: LD_VAR 0 2
12152: PUSH
12153: LD_INT 1
12155: ARRAY
12156: PPUSH
12157: CALL_OW 251
12161: PPUSH
12162: LD_INT 12
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: CALL_OW 50
12172: GO 12186
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12174: CALL_OW 45
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 51
// end ;
12186: GO 12060
12188: POP
12189: POP
// end ;
12190: PPOPN 2
12192: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12193: LD_EXP 3
12197: PUSH
12198: LD_EXP 49
12202: AND
12203: IFFALSE 12425
12205: GO 12207
12207: DISABLE
12208: LD_INT 0
12210: PPUSH
12211: PPUSH
12212: PPUSH
12213: PPUSH
12214: PPUSH
12215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12216: LD_ADDR_VAR 0 6
12220: PUSH
12221: LD_INT 22
12223: PUSH
12224: LD_OWVAR 2
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 21
12235: PUSH
12236: LD_INT 1
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 3
12245: PUSH
12246: LD_INT 23
12248: PUSH
12249: LD_INT 0
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: ST_TO_ADDR
// if not tmp then
12270: LD_VAR 0 6
12274: NOT
12275: IFFALSE 12279
// exit ;
12277: GO 12425
// s1 := rand ( 1 , 4 ) ;
12279: LD_ADDR_VAR 0 2
12283: PUSH
12284: LD_INT 1
12286: PPUSH
12287: LD_INT 4
12289: PPUSH
12290: CALL_OW 12
12294: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12295: LD_ADDR_VAR 0 4
12299: PUSH
12300: LD_VAR 0 6
12304: PUSH
12305: LD_INT 1
12307: ARRAY
12308: PPUSH
12309: LD_VAR 0 2
12313: PPUSH
12314: CALL_OW 259
12318: ST_TO_ADDR
// if s1 = 1 then
12319: LD_VAR 0 2
12323: PUSH
12324: LD_INT 1
12326: EQUAL
12327: IFFALSE 12347
// s2 := rand ( 2 , 4 ) else
12329: LD_ADDR_VAR 0 3
12333: PUSH
12334: LD_INT 2
12336: PPUSH
12337: LD_INT 4
12339: PPUSH
12340: CALL_OW 12
12344: ST_TO_ADDR
12345: GO 12355
// s2 := 1 ;
12347: LD_ADDR_VAR 0 3
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12355: LD_ADDR_VAR 0 5
12359: PUSH
12360: LD_VAR 0 6
12364: PUSH
12365: LD_INT 1
12367: ARRAY
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: CALL_OW 259
12378: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12379: LD_VAR 0 6
12383: PUSH
12384: LD_INT 1
12386: ARRAY
12387: PPUSH
12388: LD_VAR 0 2
12392: PPUSH
12393: LD_VAR 0 5
12397: PPUSH
12398: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12402: LD_VAR 0 6
12406: PUSH
12407: LD_INT 1
12409: ARRAY
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: LD_VAR 0 4
12420: PPUSH
12421: CALL_OW 237
// end ;
12425: PPOPN 6
12427: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12428: LD_EXP 3
12432: PUSH
12433: LD_EXP 50
12437: AND
12438: IFFALSE 12517
12440: GO 12442
12442: DISABLE
12443: LD_INT 0
12445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_OWVAR 2
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 30
12465: PUSH
12466: LD_INT 3
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PPUSH
12477: CALL_OW 69
12481: ST_TO_ADDR
// if not tmp then
12482: LD_VAR 0 1
12486: NOT
12487: IFFALSE 12491
// exit ;
12489: GO 12517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12491: LD_VAR 0 1
12495: PUSH
12496: LD_INT 1
12498: PPUSH
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 12
12508: ARRAY
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 234
// end ;
12517: PPOPN 1
12519: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12520: LD_EXP 3
12524: PUSH
12525: LD_EXP 51
12529: AND
12530: IFFALSE 12642
12532: GO 12534
12534: DISABLE
12535: LD_INT 0
12537: PPUSH
12538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12539: LD_ADDR_VAR 0 2
12543: PUSH
12544: LD_INT 22
12546: PUSH
12547: LD_OWVAR 2
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 2
12558: PUSH
12559: LD_INT 30
12561: PUSH
12562: LD_INT 27
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 30
12571: PUSH
12572: LD_INT 26
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 30
12581: PUSH
12582: LD_INT 28
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 69
12603: ST_TO_ADDR
// if not tmp then
12604: LD_VAR 0 2
12608: NOT
12609: IFFALSE 12613
// exit ;
12611: GO 12642
// for i in tmp do
12613: LD_ADDR_VAR 0 1
12617: PUSH
12618: LD_VAR 0 2
12622: PUSH
12623: FOR_IN
12624: IFFALSE 12640
// SetLives ( i , 1 ) ;
12626: LD_VAR 0 1
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: CALL_OW 234
12638: GO 12623
12640: POP
12641: POP
// end ;
12642: PPOPN 2
12644: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12645: LD_EXP 3
12649: PUSH
12650: LD_EXP 52
12654: AND
12655: IFFALSE 12942
12657: GO 12659
12659: DISABLE
12660: LD_INT 0
12662: PPUSH
12663: PPUSH
12664: PPUSH
// begin i := rand ( 1 , 7 ) ;
12665: LD_ADDR_VAR 0 1
12669: PUSH
12670: LD_INT 1
12672: PPUSH
12673: LD_INT 7
12675: PPUSH
12676: CALL_OW 12
12680: ST_TO_ADDR
// case i of 1 :
12681: LD_VAR 0 1
12685: PUSH
12686: LD_INT 1
12688: DOUBLE
12689: EQUAL
12690: IFTRUE 12694
12692: GO 12704
12694: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12695: LD_STRING earthquake(getX(game), 0, 32)
12697: PPUSH
12698: CALL_OW 559
12702: GO 12942
12704: LD_INT 2
12706: DOUBLE
12707: EQUAL
12708: IFTRUE 12712
12710: GO 12726
12712: POP
// begin ToLua ( displayStucuk(); ) ;
12713: LD_STRING displayStucuk();
12715: PPUSH
12716: CALL_OW 559
// ResetFog ;
12720: CALL_OW 335
// end ; 3 :
12724: GO 12942
12726: LD_INT 3
12728: DOUBLE
12729: EQUAL
12730: IFTRUE 12734
12732: GO 12838
12734: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12735: LD_ADDR_VAR 0 2
12739: PUSH
12740: LD_INT 22
12742: PUSH
12743: LD_OWVAR 2
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: LD_INT 25
12754: PUSH
12755: LD_INT 1
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 69
12770: ST_TO_ADDR
// if not tmp then
12771: LD_VAR 0 2
12775: NOT
12776: IFFALSE 12780
// exit ;
12778: GO 12942
// un := tmp [ rand ( 1 , tmp ) ] ;
12780: LD_ADDR_VAR 0 3
12784: PUSH
12785: LD_VAR 0 2
12789: PUSH
12790: LD_INT 1
12792: PPUSH
12793: LD_VAR 0 2
12797: PPUSH
12798: CALL_OW 12
12802: ARRAY
12803: ST_TO_ADDR
// if Crawls ( un ) then
12804: LD_VAR 0 3
12808: PPUSH
12809: CALL_OW 318
12813: IFFALSE 12824
// ComWalk ( un ) ;
12815: LD_VAR 0 3
12819: PPUSH
12820: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12824: LD_VAR 0 3
12828: PPUSH
12829: LD_INT 8
12831: PPUSH
12832: CALL_OW 336
// end ; 4 :
12836: GO 12942
12838: LD_INT 4
12840: DOUBLE
12841: EQUAL
12842: IFTRUE 12846
12844: GO 12920
12846: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: LD_INT 22
12854: PUSH
12855: LD_OWVAR 2
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: LD_INT 30
12866: PUSH
12867: LD_INT 29
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PPUSH
12878: CALL_OW 69
12882: ST_TO_ADDR
// if not tmp then
12883: LD_VAR 0 2
12887: NOT
12888: IFFALSE 12892
// exit ;
12890: GO 12942
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12892: LD_VAR 0 2
12896: PUSH
12897: LD_INT 1
12899: ARRAY
12900: PPUSH
12901: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12905: LD_VAR 0 2
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: CALL_OW 65
// end ; 5 .. 7 :
12918: GO 12942
12920: LD_INT 5
12922: DOUBLE
12923: GREATEREQUAL
12924: IFFALSE 12932
12926: LD_INT 7
12928: DOUBLE
12929: LESSEQUAL
12930: IFTRUE 12934
12932: GO 12941
12934: POP
// StreamSibBomb ; end ;
12935: CALL 9179 0 0
12939: GO 12942
12941: POP
// end ;
12942: PPOPN 3
12944: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12945: LD_EXP 3
12949: PUSH
12950: LD_EXP 53
12954: AND
12955: IFFALSE 13111
12957: GO 12959
12959: DISABLE
12960: LD_INT 0
12962: PPUSH
12963: PPUSH
12964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: LD_INT 81
12972: PUSH
12973: LD_OWVAR 2
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 2
12984: PUSH
12985: LD_INT 21
12987: PUSH
12988: LD_INT 1
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 21
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 69
13018: ST_TO_ADDR
// if not tmp then
13019: LD_VAR 0 2
13023: NOT
13024: IFFALSE 13028
// exit ;
13026: GO 13111
// p := 0 ;
13028: LD_ADDR_VAR 0 3
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13036: LD_INT 35
13038: PPUSH
13039: CALL_OW 67
// p := p + 1 ;
13043: LD_ADDR_VAR 0 3
13047: PUSH
13048: LD_VAR 0 3
13052: PUSH
13053: LD_INT 1
13055: PLUS
13056: ST_TO_ADDR
// for i in tmp do
13057: LD_ADDR_VAR 0 1
13061: PUSH
13062: LD_VAR 0 2
13066: PUSH
13067: FOR_IN
13068: IFFALSE 13099
// if GetLives ( i ) < 1000 then
13070: LD_VAR 0 1
13074: PPUSH
13075: CALL_OW 256
13079: PUSH
13080: LD_INT 1000
13082: LESS
13083: IFFALSE 13097
// SetLives ( i , 1000 ) ;
13085: LD_VAR 0 1
13089: PPUSH
13090: LD_INT 1000
13092: PPUSH
13093: CALL_OW 234
13097: GO 13067
13099: POP
13100: POP
// until p > 20 ;
13101: LD_VAR 0 3
13105: PUSH
13106: LD_INT 20
13108: GREATER
13109: IFFALSE 13036
// end ;
13111: PPOPN 3
13113: END
// every 0 0$1 trigger StreamModeActive and sTime do
13114: LD_EXP 3
13118: PUSH
13119: LD_EXP 54
13123: AND
13124: IFFALSE 13159
13126: GO 13128
13128: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13129: LD_INT 28
13131: PPUSH
13132: LD_OWVAR 2
13136: PPUSH
13137: LD_INT 2
13139: PPUSH
13140: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13144: LD_INT 30
13146: PPUSH
13147: LD_OWVAR 2
13151: PPUSH
13152: LD_INT 2
13154: PPUSH
13155: CALL_OW 322
// end ;
13159: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13160: LD_EXP 3
13164: PUSH
13165: LD_EXP 55
13169: AND
13170: IFFALSE 13291
13172: GO 13174
13174: DISABLE
13175: LD_INT 0
13177: PPUSH
13178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13179: LD_ADDR_VAR 0 2
13183: PUSH
13184: LD_INT 22
13186: PUSH
13187: LD_OWVAR 2
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 21
13198: PUSH
13199: LD_INT 1
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: LD_INT 23
13211: PUSH
13212: LD_INT 0
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: PPUSH
13228: CALL_OW 69
13232: ST_TO_ADDR
// if not tmp then
13233: LD_VAR 0 2
13237: NOT
13238: IFFALSE 13242
// exit ;
13240: GO 13291
// for i in tmp do
13242: LD_ADDR_VAR 0 1
13246: PUSH
13247: LD_VAR 0 2
13251: PUSH
13252: FOR_IN
13253: IFFALSE 13289
// begin if Crawls ( i ) then
13255: LD_VAR 0 1
13259: PPUSH
13260: CALL_OW 318
13264: IFFALSE 13275
// ComWalk ( i ) ;
13266: LD_VAR 0 1
13270: PPUSH
13271: CALL_OW 138
// SetClass ( i , 2 ) ;
13275: LD_VAR 0 1
13279: PPUSH
13280: LD_INT 2
13282: PPUSH
13283: CALL_OW 336
// end ;
13287: GO 13252
13289: POP
13290: POP
// end ;
13291: PPOPN 2
13293: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13294: LD_EXP 3
13298: PUSH
13299: LD_EXP 56
13303: AND
13304: IFFALSE 13592
13306: GO 13308
13308: DISABLE
13309: LD_INT 0
13311: PPUSH
13312: PPUSH
13313: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13314: LD_OWVAR 2
13318: PPUSH
13319: LD_INT 9
13321: PPUSH
13322: LD_INT 1
13324: PPUSH
13325: LD_INT 1
13327: PPUSH
13328: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13332: LD_INT 9
13334: PPUSH
13335: LD_OWVAR 2
13339: PPUSH
13340: CALL_OW 343
// uc_side := 9 ;
13344: LD_ADDR_OWVAR 20
13348: PUSH
13349: LD_INT 9
13351: ST_TO_ADDR
// uc_nation := 2 ;
13352: LD_ADDR_OWVAR 21
13356: PUSH
13357: LD_INT 2
13359: ST_TO_ADDR
// hc_name := Dark Warrior ;
13360: LD_ADDR_OWVAR 26
13364: PUSH
13365: LD_STRING Dark Warrior
13367: ST_TO_ADDR
// hc_gallery :=  ;
13368: LD_ADDR_OWVAR 33
13372: PUSH
13373: LD_STRING 
13375: ST_TO_ADDR
// hc_noskilllimit := true ;
13376: LD_ADDR_OWVAR 76
13380: PUSH
13381: LD_INT 1
13383: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13384: LD_ADDR_OWVAR 31
13388: PUSH
13389: LD_INT 30
13391: PUSH
13392: LD_INT 30
13394: PUSH
13395: LD_INT 30
13397: PUSH
13398: LD_INT 30
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: ST_TO_ADDR
// un := CreateHuman ;
13407: LD_ADDR_VAR 0 3
13411: PUSH
13412: CALL_OW 44
13416: ST_TO_ADDR
// hc_noskilllimit := false ;
13417: LD_ADDR_OWVAR 76
13421: PUSH
13422: LD_INT 0
13424: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13425: LD_VAR 0 3
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: CALL_OW 51
// ToLua ( playRanger() ) ;
13437: LD_STRING playRanger()
13439: PPUSH
13440: CALL_OW 559
// p := 0 ;
13444: LD_ADDR_VAR 0 2
13448: PUSH
13449: LD_INT 0
13451: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13452: LD_INT 35
13454: PPUSH
13455: CALL_OW 67
// p := p + 1 ;
13459: LD_ADDR_VAR 0 2
13463: PUSH
13464: LD_VAR 0 2
13468: PUSH
13469: LD_INT 1
13471: PLUS
13472: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13473: LD_VAR 0 3
13477: PPUSH
13478: CALL_OW 256
13482: PUSH
13483: LD_INT 1000
13485: LESS
13486: IFFALSE 13500
// SetLives ( un , 1000 ) ;
13488: LD_VAR 0 3
13492: PPUSH
13493: LD_INT 1000
13495: PPUSH
13496: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13500: LD_VAR 0 3
13504: PPUSH
13505: LD_INT 81
13507: PUSH
13508: LD_OWVAR 2
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 91
13519: PUSH
13520: LD_VAR 0 3
13524: PUSH
13525: LD_INT 30
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PPUSH
13537: CALL_OW 69
13541: PPUSH
13542: LD_VAR 0 3
13546: PPUSH
13547: CALL_OW 74
13551: PPUSH
13552: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13556: LD_VAR 0 2
13560: PUSH
13561: LD_INT 80
13563: GREATER
13564: PUSH
13565: LD_VAR 0 3
13569: PPUSH
13570: CALL_OW 301
13574: OR
13575: IFFALSE 13452
// if un then
13577: LD_VAR 0 3
13581: IFFALSE 13592
// RemoveUnit ( un ) ;
13583: LD_VAR 0 3
13587: PPUSH
13588: CALL_OW 64
// end ;
13592: PPOPN 3
13594: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13595: LD_EXP 57
13599: IFFALSE 13715
13601: GO 13603
13603: DISABLE
13604: LD_INT 0
13606: PPUSH
13607: PPUSH
13608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13609: LD_ADDR_VAR 0 2
13613: PUSH
13614: LD_INT 81
13616: PUSH
13617: LD_OWVAR 2
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 21
13628: PUSH
13629: LD_INT 1
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PPUSH
13640: CALL_OW 69
13644: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13645: LD_STRING playComputer()
13647: PPUSH
13648: CALL_OW 559
// if not tmp then
13652: LD_VAR 0 2
13656: NOT
13657: IFFALSE 13661
// exit ;
13659: GO 13715
// for i in tmp do
13661: LD_ADDR_VAR 0 1
13665: PUSH
13666: LD_VAR 0 2
13670: PUSH
13671: FOR_IN
13672: IFFALSE 13713
// for j := 1 to 4 do
13674: LD_ADDR_VAR 0 3
13678: PUSH
13679: DOUBLE
13680: LD_INT 1
13682: DEC
13683: ST_TO_ADDR
13684: LD_INT 4
13686: PUSH
13687: FOR_TO
13688: IFFALSE 13709
// SetSkill ( i , j , 10 ) ;
13690: LD_VAR 0 1
13694: PPUSH
13695: LD_VAR 0 3
13699: PPUSH
13700: LD_INT 10
13702: PPUSH
13703: CALL_OW 237
13707: GO 13687
13709: POP
13710: POP
13711: GO 13671
13713: POP
13714: POP
// end ;
13715: PPOPN 3
13717: END
// every 0 0$1 trigger s30 do var i , tmp ;
13718: LD_EXP 58
13722: IFFALSE 13791
13724: GO 13726
13726: DISABLE
13727: LD_INT 0
13729: PPUSH
13730: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13731: LD_ADDR_VAR 0 2
13735: PUSH
13736: LD_INT 22
13738: PUSH
13739: LD_OWVAR 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 69
13752: ST_TO_ADDR
// if not tmp then
13753: LD_VAR 0 2
13757: NOT
13758: IFFALSE 13762
// exit ;
13760: GO 13791
// for i in tmp do
13762: LD_ADDR_VAR 0 1
13766: PUSH
13767: LD_VAR 0 2
13771: PUSH
13772: FOR_IN
13773: IFFALSE 13789
// SetLives ( i , 300 ) ;
13775: LD_VAR 0 1
13779: PPUSH
13780: LD_INT 300
13782: PPUSH
13783: CALL_OW 234
13787: GO 13772
13789: POP
13790: POP
// end ;
13791: PPOPN 2
13793: END
// every 0 0$1 trigger s60 do var i , tmp ;
13794: LD_EXP 59
13798: IFFALSE 13867
13800: GO 13802
13802: DISABLE
13803: LD_INT 0
13805: PPUSH
13806: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13807: LD_ADDR_VAR 0 2
13811: PUSH
13812: LD_INT 22
13814: PUSH
13815: LD_OWVAR 2
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PPUSH
13824: CALL_OW 69
13828: ST_TO_ADDR
// if not tmp then
13829: LD_VAR 0 2
13833: NOT
13834: IFFALSE 13838
// exit ;
13836: GO 13867
// for i in tmp do
13838: LD_ADDR_VAR 0 1
13842: PUSH
13843: LD_VAR 0 2
13847: PUSH
13848: FOR_IN
13849: IFFALSE 13865
// SetLives ( i , 600 ) ;
13851: LD_VAR 0 1
13855: PPUSH
13856: LD_INT 600
13858: PPUSH
13859: CALL_OW 234
13863: GO 13848
13865: POP
13866: POP
// end ;
13867: PPOPN 2
13869: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13870: LD_INT 0
13872: PPUSH
// case cmd of 301 :
13873: LD_VAR 0 1
13877: PUSH
13878: LD_INT 301
13880: DOUBLE
13881: EQUAL
13882: IFTRUE 13886
13884: GO 13918
13886: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13887: LD_VAR 0 6
13891: PPUSH
13892: LD_VAR 0 7
13896: PPUSH
13897: LD_VAR 0 8
13901: PPUSH
13902: LD_VAR 0 4
13906: PPUSH
13907: LD_VAR 0 5
13911: PPUSH
13912: CALL 15119 0 5
13916: GO 14039
13918: LD_INT 302
13920: DOUBLE
13921: EQUAL
13922: IFTRUE 13926
13924: GO 13963
13926: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13927: LD_VAR 0 6
13931: PPUSH
13932: LD_VAR 0 7
13936: PPUSH
13937: LD_VAR 0 8
13941: PPUSH
13942: LD_VAR 0 9
13946: PPUSH
13947: LD_VAR 0 4
13951: PPUSH
13952: LD_VAR 0 5
13956: PPUSH
13957: CALL 15210 0 6
13961: GO 14039
13963: LD_INT 303
13965: DOUBLE
13966: EQUAL
13967: IFTRUE 13971
13969: GO 14008
13971: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13972: LD_VAR 0 6
13976: PPUSH
13977: LD_VAR 0 7
13981: PPUSH
13982: LD_VAR 0 8
13986: PPUSH
13987: LD_VAR 0 9
13991: PPUSH
13992: LD_VAR 0 4
13996: PPUSH
13997: LD_VAR 0 5
14001: PPUSH
14002: CALL 14044 0 6
14006: GO 14039
14008: LD_INT 304
14010: DOUBLE
14011: EQUAL
14012: IFTRUE 14016
14014: GO 14038
14016: POP
// hHackTeleport ( unit , x , y ) ; end ;
14017: LD_VAR 0 2
14021: PPUSH
14022: LD_VAR 0 4
14026: PPUSH
14027: LD_VAR 0 5
14031: PPUSH
14032: CALL 15803 0 3
14036: GO 14039
14038: POP
// end ;
14039: LD_VAR 0 12
14043: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14044: LD_INT 0
14046: PPUSH
14047: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14048: LD_VAR 0 1
14052: PUSH
14053: LD_INT 1
14055: LESS
14056: PUSH
14057: LD_VAR 0 1
14061: PUSH
14062: LD_INT 3
14064: GREATER
14065: OR
14066: PUSH
14067: LD_VAR 0 5
14071: PPUSH
14072: LD_VAR 0 6
14076: PPUSH
14077: CALL_OW 428
14081: OR
14082: IFFALSE 14086
// exit ;
14084: GO 14806
// uc_side := your_side ;
14086: LD_ADDR_OWVAR 20
14090: PUSH
14091: LD_OWVAR 2
14095: ST_TO_ADDR
// uc_nation := nation ;
14096: LD_ADDR_OWVAR 21
14100: PUSH
14101: LD_VAR 0 1
14105: ST_TO_ADDR
// bc_level = 1 ;
14106: LD_ADDR_OWVAR 43
14110: PUSH
14111: LD_INT 1
14113: ST_TO_ADDR
// case btype of 1 :
14114: LD_VAR 0 2
14118: PUSH
14119: LD_INT 1
14121: DOUBLE
14122: EQUAL
14123: IFTRUE 14127
14125: GO 14138
14127: POP
// bc_type := b_depot ; 2 :
14128: LD_ADDR_OWVAR 42
14132: PUSH
14133: LD_INT 0
14135: ST_TO_ADDR
14136: GO 14750
14138: LD_INT 2
14140: DOUBLE
14141: EQUAL
14142: IFTRUE 14146
14144: GO 14157
14146: POP
// bc_type := b_warehouse ; 3 :
14147: LD_ADDR_OWVAR 42
14151: PUSH
14152: LD_INT 1
14154: ST_TO_ADDR
14155: GO 14750
14157: LD_INT 3
14159: DOUBLE
14160: EQUAL
14161: IFTRUE 14165
14163: GO 14176
14165: POP
// bc_type := b_lab ; 4 .. 9 :
14166: LD_ADDR_OWVAR 42
14170: PUSH
14171: LD_INT 6
14173: ST_TO_ADDR
14174: GO 14750
14176: LD_INT 4
14178: DOUBLE
14179: GREATEREQUAL
14180: IFFALSE 14188
14182: LD_INT 9
14184: DOUBLE
14185: LESSEQUAL
14186: IFTRUE 14190
14188: GO 14242
14190: POP
// begin bc_type := b_lab_half ;
14191: LD_ADDR_OWVAR 42
14195: PUSH
14196: LD_INT 7
14198: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14199: LD_ADDR_OWVAR 44
14203: PUSH
14204: LD_INT 10
14206: PUSH
14207: LD_INT 11
14209: PUSH
14210: LD_INT 12
14212: PUSH
14213: LD_INT 15
14215: PUSH
14216: LD_INT 14
14218: PUSH
14219: LD_INT 13
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: LD_VAR 0 2
14234: PUSH
14235: LD_INT 3
14237: MINUS
14238: ARRAY
14239: ST_TO_ADDR
// end ; 10 .. 13 :
14240: GO 14750
14242: LD_INT 10
14244: DOUBLE
14245: GREATEREQUAL
14246: IFFALSE 14254
14248: LD_INT 13
14250: DOUBLE
14251: LESSEQUAL
14252: IFTRUE 14256
14254: GO 14333
14256: POP
// begin bc_type := b_lab_full ;
14257: LD_ADDR_OWVAR 42
14261: PUSH
14262: LD_INT 8
14264: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14265: LD_ADDR_OWVAR 44
14269: PUSH
14270: LD_INT 10
14272: PUSH
14273: LD_INT 12
14275: PUSH
14276: LD_INT 14
14278: PUSH
14279: LD_INT 13
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: PUSH
14288: LD_VAR 0 2
14292: PUSH
14293: LD_INT 9
14295: MINUS
14296: ARRAY
14297: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14298: LD_ADDR_OWVAR 45
14302: PUSH
14303: LD_INT 11
14305: PUSH
14306: LD_INT 15
14308: PUSH
14309: LD_INT 12
14311: PUSH
14312: LD_INT 15
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: PUSH
14321: LD_VAR 0 2
14325: PUSH
14326: LD_INT 9
14328: MINUS
14329: ARRAY
14330: ST_TO_ADDR
// end ; 14 :
14331: GO 14750
14333: LD_INT 14
14335: DOUBLE
14336: EQUAL
14337: IFTRUE 14341
14339: GO 14352
14341: POP
// bc_type := b_workshop ; 15 :
14342: LD_ADDR_OWVAR 42
14346: PUSH
14347: LD_INT 2
14349: ST_TO_ADDR
14350: GO 14750
14352: LD_INT 15
14354: DOUBLE
14355: EQUAL
14356: IFTRUE 14360
14358: GO 14371
14360: POP
// bc_type := b_factory ; 16 :
14361: LD_ADDR_OWVAR 42
14365: PUSH
14366: LD_INT 3
14368: ST_TO_ADDR
14369: GO 14750
14371: LD_INT 16
14373: DOUBLE
14374: EQUAL
14375: IFTRUE 14379
14377: GO 14390
14379: POP
// bc_type := b_ext_gun ; 17 :
14380: LD_ADDR_OWVAR 42
14384: PUSH
14385: LD_INT 17
14387: ST_TO_ADDR
14388: GO 14750
14390: LD_INT 17
14392: DOUBLE
14393: EQUAL
14394: IFTRUE 14398
14396: GO 14426
14398: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14399: LD_ADDR_OWVAR 42
14403: PUSH
14404: LD_INT 19
14406: PUSH
14407: LD_INT 23
14409: PUSH
14410: LD_INT 19
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: PUSH
14418: LD_VAR 0 1
14422: ARRAY
14423: ST_TO_ADDR
14424: GO 14750
14426: LD_INT 18
14428: DOUBLE
14429: EQUAL
14430: IFTRUE 14434
14432: GO 14445
14434: POP
// bc_type := b_ext_radar ; 19 :
14435: LD_ADDR_OWVAR 42
14439: PUSH
14440: LD_INT 20
14442: ST_TO_ADDR
14443: GO 14750
14445: LD_INT 19
14447: DOUBLE
14448: EQUAL
14449: IFTRUE 14453
14451: GO 14464
14453: POP
// bc_type := b_ext_radio ; 20 :
14454: LD_ADDR_OWVAR 42
14458: PUSH
14459: LD_INT 22
14461: ST_TO_ADDR
14462: GO 14750
14464: LD_INT 20
14466: DOUBLE
14467: EQUAL
14468: IFTRUE 14472
14470: GO 14483
14472: POP
// bc_type := b_ext_siberium ; 21 :
14473: LD_ADDR_OWVAR 42
14477: PUSH
14478: LD_INT 21
14480: ST_TO_ADDR
14481: GO 14750
14483: LD_INT 21
14485: DOUBLE
14486: EQUAL
14487: IFTRUE 14491
14489: GO 14502
14491: POP
// bc_type := b_ext_computer ; 22 :
14492: LD_ADDR_OWVAR 42
14496: PUSH
14497: LD_INT 24
14499: ST_TO_ADDR
14500: GO 14750
14502: LD_INT 22
14504: DOUBLE
14505: EQUAL
14506: IFTRUE 14510
14508: GO 14521
14510: POP
// bc_type := b_ext_track ; 23 :
14511: LD_ADDR_OWVAR 42
14515: PUSH
14516: LD_INT 16
14518: ST_TO_ADDR
14519: GO 14750
14521: LD_INT 23
14523: DOUBLE
14524: EQUAL
14525: IFTRUE 14529
14527: GO 14540
14529: POP
// bc_type := b_ext_laser ; 24 :
14530: LD_ADDR_OWVAR 42
14534: PUSH
14535: LD_INT 25
14537: ST_TO_ADDR
14538: GO 14750
14540: LD_INT 24
14542: DOUBLE
14543: EQUAL
14544: IFTRUE 14548
14546: GO 14559
14548: POP
// bc_type := b_control_tower ; 25 :
14549: LD_ADDR_OWVAR 42
14553: PUSH
14554: LD_INT 36
14556: ST_TO_ADDR
14557: GO 14750
14559: LD_INT 25
14561: DOUBLE
14562: EQUAL
14563: IFTRUE 14567
14565: GO 14578
14567: POP
// bc_type := b_breastwork ; 26 :
14568: LD_ADDR_OWVAR 42
14572: PUSH
14573: LD_INT 31
14575: ST_TO_ADDR
14576: GO 14750
14578: LD_INT 26
14580: DOUBLE
14581: EQUAL
14582: IFTRUE 14586
14584: GO 14597
14586: POP
// bc_type := b_bunker ; 27 :
14587: LD_ADDR_OWVAR 42
14591: PUSH
14592: LD_INT 32
14594: ST_TO_ADDR
14595: GO 14750
14597: LD_INT 27
14599: DOUBLE
14600: EQUAL
14601: IFTRUE 14605
14603: GO 14616
14605: POP
// bc_type := b_turret ; 28 :
14606: LD_ADDR_OWVAR 42
14610: PUSH
14611: LD_INT 33
14613: ST_TO_ADDR
14614: GO 14750
14616: LD_INT 28
14618: DOUBLE
14619: EQUAL
14620: IFTRUE 14624
14622: GO 14635
14624: POP
// bc_type := b_armoury ; 29 :
14625: LD_ADDR_OWVAR 42
14629: PUSH
14630: LD_INT 4
14632: ST_TO_ADDR
14633: GO 14750
14635: LD_INT 29
14637: DOUBLE
14638: EQUAL
14639: IFTRUE 14643
14641: GO 14654
14643: POP
// bc_type := b_barracks ; 30 :
14644: LD_ADDR_OWVAR 42
14648: PUSH
14649: LD_INT 5
14651: ST_TO_ADDR
14652: GO 14750
14654: LD_INT 30
14656: DOUBLE
14657: EQUAL
14658: IFTRUE 14662
14660: GO 14673
14662: POP
// bc_type := b_solar_power ; 31 :
14663: LD_ADDR_OWVAR 42
14667: PUSH
14668: LD_INT 27
14670: ST_TO_ADDR
14671: GO 14750
14673: LD_INT 31
14675: DOUBLE
14676: EQUAL
14677: IFTRUE 14681
14679: GO 14692
14681: POP
// bc_type := b_oil_power ; 32 :
14682: LD_ADDR_OWVAR 42
14686: PUSH
14687: LD_INT 26
14689: ST_TO_ADDR
14690: GO 14750
14692: LD_INT 32
14694: DOUBLE
14695: EQUAL
14696: IFTRUE 14700
14698: GO 14711
14700: POP
// bc_type := b_siberite_power ; 33 :
14701: LD_ADDR_OWVAR 42
14705: PUSH
14706: LD_INT 28
14708: ST_TO_ADDR
14709: GO 14750
14711: LD_INT 33
14713: DOUBLE
14714: EQUAL
14715: IFTRUE 14719
14717: GO 14730
14719: POP
// bc_type := b_oil_mine ; 34 :
14720: LD_ADDR_OWVAR 42
14724: PUSH
14725: LD_INT 29
14727: ST_TO_ADDR
14728: GO 14750
14730: LD_INT 34
14732: DOUBLE
14733: EQUAL
14734: IFTRUE 14738
14736: GO 14749
14738: POP
// bc_type := b_siberite_mine ; end ;
14739: LD_ADDR_OWVAR 42
14743: PUSH
14744: LD_INT 30
14746: ST_TO_ADDR
14747: GO 14750
14749: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14750: LD_ADDR_VAR 0 8
14754: PUSH
14755: LD_VAR 0 5
14759: PPUSH
14760: LD_VAR 0 6
14764: PPUSH
14765: LD_VAR 0 3
14769: PPUSH
14770: CALL_OW 47
14774: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14775: LD_OWVAR 42
14779: PUSH
14780: LD_INT 32
14782: PUSH
14783: LD_INT 33
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: IN
14790: IFFALSE 14806
// PlaceWeaponTurret ( b , weapon ) ;
14792: LD_VAR 0 8
14796: PPUSH
14797: LD_VAR 0 4
14801: PPUSH
14802: CALL_OW 431
// end ;
14806: LD_VAR 0 7
14810: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14811: LD_INT 0
14813: PPUSH
14814: PPUSH
14815: PPUSH
14816: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14817: LD_ADDR_VAR 0 4
14821: PUSH
14822: LD_INT 22
14824: PUSH
14825: LD_OWVAR 2
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 2
14836: PUSH
14837: LD_INT 30
14839: PUSH
14840: LD_INT 0
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 30
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: LIST
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PPUSH
14866: CALL_OW 69
14870: ST_TO_ADDR
// if not tmp then
14871: LD_VAR 0 4
14875: NOT
14876: IFFALSE 14880
// exit ;
14878: GO 14939
// for i in tmp do
14880: LD_ADDR_VAR 0 2
14884: PUSH
14885: LD_VAR 0 4
14889: PUSH
14890: FOR_IN
14891: IFFALSE 14937
// for j = 1 to 3 do
14893: LD_ADDR_VAR 0 3
14897: PUSH
14898: DOUBLE
14899: LD_INT 1
14901: DEC
14902: ST_TO_ADDR
14903: LD_INT 3
14905: PUSH
14906: FOR_TO
14907: IFFALSE 14933
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14909: LD_VAR 0 2
14913: PPUSH
14914: CALL_OW 274
14918: PPUSH
14919: LD_VAR 0 3
14923: PPUSH
14924: LD_INT 99999
14926: PPUSH
14927: CALL_OW 277
14931: GO 14906
14933: POP
14934: POP
14935: GO 14890
14937: POP
14938: POP
// end ;
14939: LD_VAR 0 1
14943: RET
// export function hHackSetLevel10 ; var i , j ; begin
14944: LD_INT 0
14946: PPUSH
14947: PPUSH
14948: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14949: LD_ADDR_VAR 0 2
14953: PUSH
14954: LD_INT 21
14956: PUSH
14957: LD_INT 1
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PPUSH
14964: CALL_OW 69
14968: PUSH
14969: FOR_IN
14970: IFFALSE 15022
// if IsSelected ( i ) then
14972: LD_VAR 0 2
14976: PPUSH
14977: CALL_OW 306
14981: IFFALSE 15020
// begin for j := 1 to 4 do
14983: LD_ADDR_VAR 0 3
14987: PUSH
14988: DOUBLE
14989: LD_INT 1
14991: DEC
14992: ST_TO_ADDR
14993: LD_INT 4
14995: PUSH
14996: FOR_TO
14997: IFFALSE 15018
// SetSkill ( i , j , 10 ) ;
14999: LD_VAR 0 2
15003: PPUSH
15004: LD_VAR 0 3
15008: PPUSH
15009: LD_INT 10
15011: PPUSH
15012: CALL_OW 237
15016: GO 14996
15018: POP
15019: POP
// end ;
15020: GO 14969
15022: POP
15023: POP
// end ;
15024: LD_VAR 0 1
15028: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15029: LD_INT 0
15031: PPUSH
15032: PPUSH
15033: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15034: LD_ADDR_VAR 0 2
15038: PUSH
15039: LD_INT 22
15041: PUSH
15042: LD_OWVAR 2
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 21
15053: PUSH
15054: LD_INT 1
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PPUSH
15065: CALL_OW 69
15069: PUSH
15070: FOR_IN
15071: IFFALSE 15112
// begin for j := 1 to 4 do
15073: LD_ADDR_VAR 0 3
15077: PUSH
15078: DOUBLE
15079: LD_INT 1
15081: DEC
15082: ST_TO_ADDR
15083: LD_INT 4
15085: PUSH
15086: FOR_TO
15087: IFFALSE 15108
// SetSkill ( i , j , 10 ) ;
15089: LD_VAR 0 2
15093: PPUSH
15094: LD_VAR 0 3
15098: PPUSH
15099: LD_INT 10
15101: PPUSH
15102: CALL_OW 237
15106: GO 15086
15108: POP
15109: POP
// end ;
15110: GO 15070
15112: POP
15113: POP
// end ;
15114: LD_VAR 0 1
15118: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15119: LD_INT 0
15121: PPUSH
// uc_side := your_side ;
15122: LD_ADDR_OWVAR 20
15126: PUSH
15127: LD_OWVAR 2
15131: ST_TO_ADDR
// uc_nation := nation ;
15132: LD_ADDR_OWVAR 21
15136: PUSH
15137: LD_VAR 0 1
15141: ST_TO_ADDR
// InitHc ;
15142: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15146: LD_INT 0
15148: PPUSH
15149: LD_VAR 0 2
15153: PPUSH
15154: LD_VAR 0 3
15158: PPUSH
15159: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15163: LD_VAR 0 4
15167: PPUSH
15168: LD_VAR 0 5
15172: PPUSH
15173: CALL_OW 428
15177: PUSH
15178: LD_INT 0
15180: EQUAL
15181: IFFALSE 15205
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15183: CALL_OW 44
15187: PPUSH
15188: LD_VAR 0 4
15192: PPUSH
15193: LD_VAR 0 5
15197: PPUSH
15198: LD_INT 1
15200: PPUSH
15201: CALL_OW 48
// end ;
15205: LD_VAR 0 6
15209: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15210: LD_INT 0
15212: PPUSH
15213: PPUSH
// uc_side := your_side ;
15214: LD_ADDR_OWVAR 20
15218: PUSH
15219: LD_OWVAR 2
15223: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15224: LD_VAR 0 1
15228: PUSH
15229: LD_INT 1
15231: PUSH
15232: LD_INT 2
15234: PUSH
15235: LD_INT 3
15237: PUSH
15238: LD_INT 4
15240: PUSH
15241: LD_INT 5
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: IN
15251: IFFALSE 15263
// uc_nation := nation_american else
15253: LD_ADDR_OWVAR 21
15257: PUSH
15258: LD_INT 1
15260: ST_TO_ADDR
15261: GO 15306
// if chassis in [ 11 , 12 , 13 , 14 ] then
15263: LD_VAR 0 1
15267: PUSH
15268: LD_INT 11
15270: PUSH
15271: LD_INT 12
15273: PUSH
15274: LD_INT 13
15276: PUSH
15277: LD_INT 14
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: IN
15286: IFFALSE 15298
// uc_nation := nation_arabian else
15288: LD_ADDR_OWVAR 21
15292: PUSH
15293: LD_INT 2
15295: ST_TO_ADDR
15296: GO 15306
// uc_nation := nation_russian ;
15298: LD_ADDR_OWVAR 21
15302: PUSH
15303: LD_INT 3
15305: ST_TO_ADDR
// vc_chassis := chassis ;
15306: LD_ADDR_OWVAR 37
15310: PUSH
15311: LD_VAR 0 1
15315: ST_TO_ADDR
// vc_engine := engine ;
15316: LD_ADDR_OWVAR 39
15320: PUSH
15321: LD_VAR 0 2
15325: ST_TO_ADDR
// vc_control := control ;
15326: LD_ADDR_OWVAR 38
15330: PUSH
15331: LD_VAR 0 3
15335: ST_TO_ADDR
// vc_weapon := weapon ;
15336: LD_ADDR_OWVAR 40
15340: PUSH
15341: LD_VAR 0 4
15345: ST_TO_ADDR
// un := CreateVehicle ;
15346: LD_ADDR_VAR 0 8
15350: PUSH
15351: CALL_OW 45
15355: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15356: LD_VAR 0 8
15360: PPUSH
15361: LD_INT 0
15363: PPUSH
15364: LD_INT 5
15366: PPUSH
15367: CALL_OW 12
15371: PPUSH
15372: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15376: LD_VAR 0 8
15380: PPUSH
15381: LD_VAR 0 5
15385: PPUSH
15386: LD_VAR 0 6
15390: PPUSH
15391: LD_INT 1
15393: PPUSH
15394: CALL_OW 48
// end ;
15398: LD_VAR 0 7
15402: RET
// export hInvincible ; every 1 do
15403: GO 15405
15405: DISABLE
// hInvincible := [ ] ;
15406: LD_ADDR_EXP 60
15410: PUSH
15411: EMPTY
15412: ST_TO_ADDR
15413: END
// every 10 do var i ;
15414: GO 15416
15416: DISABLE
15417: LD_INT 0
15419: PPUSH
// begin enable ;
15420: ENABLE
// if not hInvincible then
15421: LD_EXP 60
15425: NOT
15426: IFFALSE 15430
// exit ;
15428: GO 15474
// for i in hInvincible do
15430: LD_ADDR_VAR 0 1
15434: PUSH
15435: LD_EXP 60
15439: PUSH
15440: FOR_IN
15441: IFFALSE 15472
// if GetLives ( i ) < 1000 then
15443: LD_VAR 0 1
15447: PPUSH
15448: CALL_OW 256
15452: PUSH
15453: LD_INT 1000
15455: LESS
15456: IFFALSE 15470
// SetLives ( i , 1000 ) ;
15458: LD_VAR 0 1
15462: PPUSH
15463: LD_INT 1000
15465: PPUSH
15466: CALL_OW 234
15470: GO 15440
15472: POP
15473: POP
// end ;
15474: PPOPN 1
15476: END
// export function hHackInvincible ; var i ; begin
15477: LD_INT 0
15479: PPUSH
15480: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15481: LD_ADDR_VAR 0 2
15485: PUSH
15486: LD_INT 2
15488: PUSH
15489: LD_INT 21
15491: PUSH
15492: LD_INT 1
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 21
15501: PUSH
15502: LD_INT 2
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: LIST
15513: PPUSH
15514: CALL_OW 69
15518: PUSH
15519: FOR_IN
15520: IFFALSE 15581
// if IsSelected ( i ) then
15522: LD_VAR 0 2
15526: PPUSH
15527: CALL_OW 306
15531: IFFALSE 15579
// begin if i in hInvincible then
15533: LD_VAR 0 2
15537: PUSH
15538: LD_EXP 60
15542: IN
15543: IFFALSE 15563
// hInvincible := hInvincible diff i else
15545: LD_ADDR_EXP 60
15549: PUSH
15550: LD_EXP 60
15554: PUSH
15555: LD_VAR 0 2
15559: DIFF
15560: ST_TO_ADDR
15561: GO 15579
// hInvincible := hInvincible union i ;
15563: LD_ADDR_EXP 60
15567: PUSH
15568: LD_EXP 60
15572: PUSH
15573: LD_VAR 0 2
15577: UNION
15578: ST_TO_ADDR
// end ;
15579: GO 15519
15581: POP
15582: POP
// end ;
15583: LD_VAR 0 1
15587: RET
// export function hHackInvisible ; var i , j ; begin
15588: LD_INT 0
15590: PPUSH
15591: PPUSH
15592: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15593: LD_ADDR_VAR 0 2
15597: PUSH
15598: LD_INT 21
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PPUSH
15608: CALL_OW 69
15612: PUSH
15613: FOR_IN
15614: IFFALSE 15638
// if IsSelected ( i ) then
15616: LD_VAR 0 2
15620: PPUSH
15621: CALL_OW 306
15625: IFFALSE 15636
// ComForceInvisible ( i ) ;
15627: LD_VAR 0 2
15631: PPUSH
15632: CALL_OW 496
15636: GO 15613
15638: POP
15639: POP
// end ;
15640: LD_VAR 0 1
15644: RET
// export function hHackChangeYourSide ; begin
15645: LD_INT 0
15647: PPUSH
// if your_side = 8 then
15648: LD_OWVAR 2
15652: PUSH
15653: LD_INT 8
15655: EQUAL
15656: IFFALSE 15668
// your_side := 0 else
15658: LD_ADDR_OWVAR 2
15662: PUSH
15663: LD_INT 0
15665: ST_TO_ADDR
15666: GO 15682
// your_side := your_side + 1 ;
15668: LD_ADDR_OWVAR 2
15672: PUSH
15673: LD_OWVAR 2
15677: PUSH
15678: LD_INT 1
15680: PLUS
15681: ST_TO_ADDR
// end ;
15682: LD_VAR 0 1
15686: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15687: LD_INT 0
15689: PPUSH
15690: PPUSH
15691: PPUSH
// for i in all_units do
15692: LD_ADDR_VAR 0 2
15696: PUSH
15697: LD_OWVAR 3
15701: PUSH
15702: FOR_IN
15703: IFFALSE 15781
// if IsSelected ( i ) then
15705: LD_VAR 0 2
15709: PPUSH
15710: CALL_OW 306
15714: IFFALSE 15779
// begin j := GetSide ( i ) ;
15716: LD_ADDR_VAR 0 3
15720: PUSH
15721: LD_VAR 0 2
15725: PPUSH
15726: CALL_OW 255
15730: ST_TO_ADDR
// if j = 8 then
15731: LD_VAR 0 3
15735: PUSH
15736: LD_INT 8
15738: EQUAL
15739: IFFALSE 15751
// j := 0 else
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: LD_INT 0
15748: ST_TO_ADDR
15749: GO 15765
// j := j + 1 ;
15751: LD_ADDR_VAR 0 3
15755: PUSH
15756: LD_VAR 0 3
15760: PUSH
15761: LD_INT 1
15763: PLUS
15764: ST_TO_ADDR
// SetSide ( i , j ) ;
15765: LD_VAR 0 2
15769: PPUSH
15770: LD_VAR 0 3
15774: PPUSH
15775: CALL_OW 235
// end ;
15779: GO 15702
15781: POP
15782: POP
// end ;
15783: LD_VAR 0 1
15787: RET
// export function hHackFog ; begin
15788: LD_INT 0
15790: PPUSH
// FogOff ( true ) ;
15791: LD_INT 1
15793: PPUSH
15794: CALL_OW 344
// end ;
15798: LD_VAR 0 1
15802: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15803: LD_INT 0
15805: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15806: LD_VAR 0 1
15810: PPUSH
15811: LD_VAR 0 2
15815: PPUSH
15816: LD_VAR 0 3
15820: PPUSH
15821: LD_INT 1
15823: PPUSH
15824: LD_INT 1
15826: PPUSH
15827: CALL_OW 483
// CenterOnXY ( x , y ) ;
15831: LD_VAR 0 2
15835: PPUSH
15836: LD_VAR 0 3
15840: PPUSH
15841: CALL_OW 84
// end ;
15845: LD_VAR 0 4
15849: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15850: LD_INT 0
15852: PPUSH
15853: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15854: LD_VAR 0 1
15858: NOT
15859: PUSH
15860: LD_VAR 0 2
15864: PPUSH
15865: LD_VAR 0 3
15869: PPUSH
15870: CALL_OW 488
15874: NOT
15875: OR
15876: PUSH
15877: LD_VAR 0 1
15881: PPUSH
15882: CALL_OW 266
15886: PUSH
15887: LD_INT 3
15889: NONEQUAL
15890: PUSH
15891: LD_VAR 0 1
15895: PPUSH
15896: CALL_OW 247
15900: PUSH
15901: LD_INT 1
15903: EQUAL
15904: NOT
15905: AND
15906: OR
15907: IFFALSE 15911
// exit ;
15909: GO 16060
// if GetType ( factory ) = unit_human then
15911: LD_VAR 0 1
15915: PPUSH
15916: CALL_OW 247
15920: PUSH
15921: LD_INT 1
15923: EQUAL
15924: IFFALSE 15941
// factory := IsInUnit ( factory ) ;
15926: LD_ADDR_VAR 0 1
15930: PUSH
15931: LD_VAR 0 1
15935: PPUSH
15936: CALL_OW 310
15940: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15941: LD_VAR 0 1
15945: PPUSH
15946: CALL_OW 266
15950: PUSH
15951: LD_INT 3
15953: NONEQUAL
15954: IFFALSE 15958
// exit ;
15956: GO 16060
// if HexInfo ( x , y ) = factory then
15958: LD_VAR 0 2
15962: PPUSH
15963: LD_VAR 0 3
15967: PPUSH
15968: CALL_OW 428
15972: PUSH
15973: LD_VAR 0 1
15977: EQUAL
15978: IFFALSE 16005
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15980: LD_ADDR_EXP 61
15984: PUSH
15985: LD_EXP 61
15989: PPUSH
15990: LD_VAR 0 1
15994: PPUSH
15995: LD_INT 0
15997: PPUSH
15998: CALL_OW 1
16002: ST_TO_ADDR
16003: GO 16056
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16005: LD_ADDR_EXP 61
16009: PUSH
16010: LD_EXP 61
16014: PPUSH
16015: LD_VAR 0 1
16019: PPUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 255
16029: PUSH
16030: LD_VAR 0 1
16034: PUSH
16035: LD_VAR 0 2
16039: PUSH
16040: LD_VAR 0 3
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: PPUSH
16051: CALL_OW 1
16055: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16056: CALL 16065 0 0
// end ;
16060: LD_VAR 0 4
16064: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16065: LD_INT 0
16067: PPUSH
16068: PPUSH
16069: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16070: LD_STRING resetFactoryWaypoint();
16072: PPUSH
16073: CALL_OW 559
// if factoryWaypoints then
16077: LD_EXP 61
16081: IFFALSE 16207
// begin list := PrepareArray ( factoryWaypoints ) ;
16083: LD_ADDR_VAR 0 3
16087: PUSH
16088: LD_EXP 61
16092: PPUSH
16093: CALL 62898 0 1
16097: ST_TO_ADDR
// for i := 1 to list do
16098: LD_ADDR_VAR 0 2
16102: PUSH
16103: DOUBLE
16104: LD_INT 1
16106: DEC
16107: ST_TO_ADDR
16108: LD_VAR 0 3
16112: PUSH
16113: FOR_TO
16114: IFFALSE 16205
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16116: LD_STRING setFactoryWaypointXY(
16118: PUSH
16119: LD_VAR 0 3
16123: PUSH
16124: LD_VAR 0 2
16128: ARRAY
16129: PUSH
16130: LD_INT 1
16132: ARRAY
16133: STR
16134: PUSH
16135: LD_STRING ,
16137: STR
16138: PUSH
16139: LD_VAR 0 3
16143: PUSH
16144: LD_VAR 0 2
16148: ARRAY
16149: PUSH
16150: LD_INT 2
16152: ARRAY
16153: STR
16154: PUSH
16155: LD_STRING ,
16157: STR
16158: PUSH
16159: LD_VAR 0 3
16163: PUSH
16164: LD_VAR 0 2
16168: ARRAY
16169: PUSH
16170: LD_INT 3
16172: ARRAY
16173: STR
16174: PUSH
16175: LD_STRING ,
16177: STR
16178: PUSH
16179: LD_VAR 0 3
16183: PUSH
16184: LD_VAR 0 2
16188: ARRAY
16189: PUSH
16190: LD_INT 4
16192: ARRAY
16193: STR
16194: PUSH
16195: LD_STRING )
16197: STR
16198: PPUSH
16199: CALL_OW 559
16203: GO 16113
16205: POP
16206: POP
// end ; end ;
16207: LD_VAR 0 1
16211: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16212: LD_INT 0
16214: PPUSH
// if HexInfo ( x , y ) = warehouse then
16215: LD_VAR 0 2
16219: PPUSH
16220: LD_VAR 0 3
16224: PPUSH
16225: CALL_OW 428
16229: PUSH
16230: LD_VAR 0 1
16234: EQUAL
16235: IFFALSE 16262
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16237: LD_ADDR_EXP 62
16241: PUSH
16242: LD_EXP 62
16246: PPUSH
16247: LD_VAR 0 1
16251: PPUSH
16252: LD_INT 0
16254: PPUSH
16255: CALL_OW 1
16259: ST_TO_ADDR
16260: GO 16313
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16262: LD_ADDR_EXP 62
16266: PUSH
16267: LD_EXP 62
16271: PPUSH
16272: LD_VAR 0 1
16276: PPUSH
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL_OW 255
16286: PUSH
16287: LD_VAR 0 1
16291: PUSH
16292: LD_VAR 0 2
16296: PUSH
16297: LD_VAR 0 3
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: PPUSH
16308: CALL_OW 1
16312: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16313: CALL 16322 0 0
// end ;
16317: LD_VAR 0 4
16321: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16322: LD_INT 0
16324: PPUSH
16325: PPUSH
16326: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16327: LD_STRING resetWarehouseGatheringPoints();
16329: PPUSH
16330: CALL_OW 559
// if warehouseGatheringPoints then
16334: LD_EXP 62
16338: IFFALSE 16464
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16340: LD_ADDR_VAR 0 3
16344: PUSH
16345: LD_EXP 62
16349: PPUSH
16350: CALL 62898 0 1
16354: ST_TO_ADDR
// for i := 1 to list do
16355: LD_ADDR_VAR 0 2
16359: PUSH
16360: DOUBLE
16361: LD_INT 1
16363: DEC
16364: ST_TO_ADDR
16365: LD_VAR 0 3
16369: PUSH
16370: FOR_TO
16371: IFFALSE 16462
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16373: LD_STRING setWarehouseGatheringPointXY(
16375: PUSH
16376: LD_VAR 0 3
16380: PUSH
16381: LD_VAR 0 2
16385: ARRAY
16386: PUSH
16387: LD_INT 1
16389: ARRAY
16390: STR
16391: PUSH
16392: LD_STRING ,
16394: STR
16395: PUSH
16396: LD_VAR 0 3
16400: PUSH
16401: LD_VAR 0 2
16405: ARRAY
16406: PUSH
16407: LD_INT 2
16409: ARRAY
16410: STR
16411: PUSH
16412: LD_STRING ,
16414: STR
16415: PUSH
16416: LD_VAR 0 3
16420: PUSH
16421: LD_VAR 0 2
16425: ARRAY
16426: PUSH
16427: LD_INT 3
16429: ARRAY
16430: STR
16431: PUSH
16432: LD_STRING ,
16434: STR
16435: PUSH
16436: LD_VAR 0 3
16440: PUSH
16441: LD_VAR 0 2
16445: ARRAY
16446: PUSH
16447: LD_INT 4
16449: ARRAY
16450: STR
16451: PUSH
16452: LD_STRING )
16454: STR
16455: PPUSH
16456: CALL_OW 559
16460: GO 16370
16462: POP
16463: POP
// end ; end ;
16464: LD_VAR 0 1
16468: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16469: LD_EXP 62
16473: IFFALSE 17158
16475: GO 16477
16477: DISABLE
16478: LD_INT 0
16480: PPUSH
16481: PPUSH
16482: PPUSH
16483: PPUSH
16484: PPUSH
16485: PPUSH
16486: PPUSH
16487: PPUSH
16488: PPUSH
// begin enable ;
16489: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16490: LD_ADDR_VAR 0 3
16494: PUSH
16495: LD_EXP 62
16499: PPUSH
16500: CALL 62898 0 1
16504: ST_TO_ADDR
// if not list then
16505: LD_VAR 0 3
16509: NOT
16510: IFFALSE 16514
// exit ;
16512: GO 17158
// for i := 1 to list do
16514: LD_ADDR_VAR 0 1
16518: PUSH
16519: DOUBLE
16520: LD_INT 1
16522: DEC
16523: ST_TO_ADDR
16524: LD_VAR 0 3
16528: PUSH
16529: FOR_TO
16530: IFFALSE 17156
// begin depot := list [ i ] [ 2 ] ;
16532: LD_ADDR_VAR 0 8
16536: PUSH
16537: LD_VAR 0 3
16541: PUSH
16542: LD_VAR 0 1
16546: ARRAY
16547: PUSH
16548: LD_INT 2
16550: ARRAY
16551: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16552: LD_ADDR_VAR 0 5
16556: PUSH
16557: LD_VAR 0 3
16561: PUSH
16562: LD_VAR 0 1
16566: ARRAY
16567: PUSH
16568: LD_INT 1
16570: ARRAY
16571: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16572: LD_VAR 0 8
16576: PPUSH
16577: CALL_OW 301
16581: PUSH
16582: LD_VAR 0 5
16586: PUSH
16587: LD_VAR 0 8
16591: PPUSH
16592: CALL_OW 255
16596: NONEQUAL
16597: OR
16598: IFFALSE 16627
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16600: LD_ADDR_EXP 62
16604: PUSH
16605: LD_EXP 62
16609: PPUSH
16610: LD_VAR 0 8
16614: PPUSH
16615: LD_INT 0
16617: PPUSH
16618: CALL_OW 1
16622: ST_TO_ADDR
// exit ;
16623: POP
16624: POP
16625: GO 17158
// end ; x := list [ i ] [ 3 ] ;
16627: LD_ADDR_VAR 0 6
16631: PUSH
16632: LD_VAR 0 3
16636: PUSH
16637: LD_VAR 0 1
16641: ARRAY
16642: PUSH
16643: LD_INT 3
16645: ARRAY
16646: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16647: LD_ADDR_VAR 0 7
16651: PUSH
16652: LD_VAR 0 3
16656: PUSH
16657: LD_VAR 0 1
16661: ARRAY
16662: PUSH
16663: LD_INT 4
16665: ARRAY
16666: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16667: LD_ADDR_VAR 0 9
16671: PUSH
16672: LD_VAR 0 6
16676: PPUSH
16677: LD_VAR 0 7
16681: PPUSH
16682: LD_INT 16
16684: PPUSH
16685: CALL 61486 0 3
16689: ST_TO_ADDR
// if not cratesNearbyPoint then
16690: LD_VAR 0 9
16694: NOT
16695: IFFALSE 16701
// exit ;
16697: POP
16698: POP
16699: GO 17158
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16701: LD_ADDR_VAR 0 4
16705: PUSH
16706: LD_INT 22
16708: PUSH
16709: LD_VAR 0 5
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 3
16720: PUSH
16721: LD_INT 60
16723: PUSH
16724: EMPTY
16725: LIST
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 91
16733: PUSH
16734: LD_VAR 0 8
16738: PUSH
16739: LD_INT 6
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 2
16749: PUSH
16750: LD_INT 25
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 25
16762: PUSH
16763: LD_INT 16
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: PPUSH
16781: CALL_OW 69
16785: PUSH
16786: LD_VAR 0 8
16790: PPUSH
16791: CALL_OW 313
16795: PPUSH
16796: LD_INT 3
16798: PUSH
16799: LD_INT 60
16801: PUSH
16802: EMPTY
16803: LIST
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 2
16811: PUSH
16812: LD_INT 25
16814: PUSH
16815: LD_INT 2
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 25
16824: PUSH
16825: LD_INT 16
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PPUSH
16841: CALL_OW 72
16845: UNION
16846: ST_TO_ADDR
// if tmp then
16847: LD_VAR 0 4
16851: IFFALSE 16931
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16853: LD_ADDR_VAR 0 4
16857: PUSH
16858: LD_VAR 0 4
16862: PPUSH
16863: LD_INT 3
16865: PPUSH
16866: CALL 59455 0 2
16870: ST_TO_ADDR
// for j in tmp do
16871: LD_ADDR_VAR 0 2
16875: PUSH
16876: LD_VAR 0 4
16880: PUSH
16881: FOR_IN
16882: IFFALSE 16925
// begin if IsInUnit ( j ) then
16884: LD_VAR 0 2
16888: PPUSH
16889: CALL_OW 310
16893: IFFALSE 16904
// ComExit ( j ) ;
16895: LD_VAR 0 2
16899: PPUSH
16900: CALL 59538 0 1
// AddComCollect ( j , x , y ) ;
16904: LD_VAR 0 2
16908: PPUSH
16909: LD_VAR 0 6
16913: PPUSH
16914: LD_VAR 0 7
16918: PPUSH
16919: CALL_OW 177
// end ;
16923: GO 16881
16925: POP
16926: POP
// exit ;
16927: POP
16928: POP
16929: GO 17158
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16931: LD_ADDR_VAR 0 4
16935: PUSH
16936: LD_INT 22
16938: PUSH
16939: LD_VAR 0 5
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 91
16950: PUSH
16951: LD_VAR 0 8
16955: PUSH
16956: LD_INT 8
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 2
16966: PUSH
16967: LD_INT 34
16969: PUSH
16970: LD_INT 12
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 34
16979: PUSH
16980: LD_INT 51
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 34
16989: PUSH
16990: LD_INT 32
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 34
16999: PUSH
17000: LD_INT 89
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: LIST
17018: PPUSH
17019: CALL_OW 69
17023: ST_TO_ADDR
// if tmp then
17024: LD_VAR 0 4
17028: IFFALSE 17154
// begin for j in tmp do
17030: LD_ADDR_VAR 0 2
17034: PUSH
17035: LD_VAR 0 4
17039: PUSH
17040: FOR_IN
17041: IFFALSE 17152
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17043: LD_VAR 0 2
17047: PPUSH
17048: CALL_OW 262
17052: PUSH
17053: LD_INT 3
17055: EQUAL
17056: PUSH
17057: LD_VAR 0 2
17061: PPUSH
17062: CALL_OW 261
17066: PUSH
17067: LD_INT 20
17069: GREATER
17070: OR
17071: PUSH
17072: LD_VAR 0 2
17076: PPUSH
17077: CALL_OW 314
17081: NOT
17082: AND
17083: PUSH
17084: LD_VAR 0 2
17088: PPUSH
17089: CALL_OW 263
17093: PUSH
17094: LD_INT 1
17096: NONEQUAL
17097: PUSH
17098: LD_VAR 0 2
17102: PPUSH
17103: CALL_OW 311
17107: OR
17108: AND
17109: IFFALSE 17150
// begin ComCollect ( j , x , y ) ;
17111: LD_VAR 0 2
17115: PPUSH
17116: LD_VAR 0 6
17120: PPUSH
17121: LD_VAR 0 7
17125: PPUSH
17126: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17130: LD_VAR 0 2
17134: PPUSH
17135: LD_VAR 0 8
17139: PPUSH
17140: CALL_OW 172
// exit ;
17144: POP
17145: POP
17146: POP
17147: POP
17148: GO 17158
// end ;
17150: GO 17040
17152: POP
17153: POP
// end ; end ;
17154: GO 16529
17156: POP
17157: POP
// end ; end_of_file
17158: PPOPN 9
17160: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17161: LD_INT 0
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 264
17176: PUSH
17177: LD_INT 91
17179: EQUAL
17180: IFFALSE 17252
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17182: LD_INT 68
17184: PPUSH
17185: LD_VAR 0 1
17189: PPUSH
17190: CALL_OW 255
17194: PPUSH
17195: CALL_OW 321
17199: PUSH
17200: LD_INT 2
17202: EQUAL
17203: IFFALSE 17215
// eff := 70 else
17205: LD_ADDR_VAR 0 4
17209: PUSH
17210: LD_INT 70
17212: ST_TO_ADDR
17213: GO 17223
// eff := 30 ;
17215: LD_ADDR_VAR 0 4
17219: PUSH
17220: LD_INT 30
17222: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17223: LD_VAR 0 1
17227: PPUSH
17228: CALL_OW 250
17232: PPUSH
17233: LD_VAR 0 1
17237: PPUSH
17238: CALL_OW 251
17242: PPUSH
17243: LD_VAR 0 4
17247: PPUSH
17248: CALL_OW 495
// end ; end ;
17252: LD_VAR 0 2
17256: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17257: LD_INT 0
17259: PPUSH
// end ;
17260: LD_VAR 0 4
17264: RET
// export function SOS_Command ( cmd ) ; begin
17265: LD_INT 0
17267: PPUSH
// end ;
17268: LD_VAR 0 2
17272: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17273: LD_INT 0
17275: PPUSH
// end ;
17276: LD_VAR 0 6
17280: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17281: LD_INT 0
17283: PPUSH
17284: PPUSH
// if not vehicle or not factory then
17285: LD_VAR 0 1
17289: NOT
17290: PUSH
17291: LD_VAR 0 2
17295: NOT
17296: OR
17297: IFFALSE 17301
// exit ;
17299: GO 17532
// if factoryWaypoints >= factory then
17301: LD_EXP 61
17305: PUSH
17306: LD_VAR 0 2
17310: GREATEREQUAL
17311: IFFALSE 17532
// if factoryWaypoints [ factory ] then
17313: LD_EXP 61
17317: PUSH
17318: LD_VAR 0 2
17322: ARRAY
17323: IFFALSE 17532
// begin if GetControl ( vehicle ) = control_manual then
17325: LD_VAR 0 1
17329: PPUSH
17330: CALL_OW 263
17334: PUSH
17335: LD_INT 1
17337: EQUAL
17338: IFFALSE 17419
// begin driver := IsDrivenBy ( vehicle ) ;
17340: LD_ADDR_VAR 0 4
17344: PUSH
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL_OW 311
17354: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17355: LD_VAR 0 4
17359: PPUSH
17360: LD_EXP 61
17364: PUSH
17365: LD_VAR 0 2
17369: ARRAY
17370: PUSH
17371: LD_INT 3
17373: ARRAY
17374: PPUSH
17375: LD_EXP 61
17379: PUSH
17380: LD_VAR 0 2
17384: ARRAY
17385: PUSH
17386: LD_INT 4
17388: ARRAY
17389: PPUSH
17390: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17394: LD_VAR 0 4
17398: PPUSH
17399: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17403: LD_VAR 0 4
17407: PPUSH
17408: LD_VAR 0 2
17412: PPUSH
17413: CALL_OW 180
// end else
17417: GO 17532
// if GetControl ( vehicle ) = control_remote then
17419: LD_VAR 0 1
17423: PPUSH
17424: CALL_OW 263
17428: PUSH
17429: LD_INT 2
17431: EQUAL
17432: IFFALSE 17493
// begin wait ( 0 0$2 ) ;
17434: LD_INT 70
17436: PPUSH
17437: CALL_OW 67
// if Connect ( vehicle ) then
17441: LD_VAR 0 1
17445: PPUSH
17446: CALL 29778 0 1
17450: IFFALSE 17491
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17452: LD_VAR 0 1
17456: PPUSH
17457: LD_EXP 61
17461: PUSH
17462: LD_VAR 0 2
17466: ARRAY
17467: PUSH
17468: LD_INT 3
17470: ARRAY
17471: PPUSH
17472: LD_EXP 61
17476: PUSH
17477: LD_VAR 0 2
17481: ARRAY
17482: PUSH
17483: LD_INT 4
17485: ARRAY
17486: PPUSH
17487: CALL_OW 171
// end else
17491: GO 17532
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17493: LD_VAR 0 1
17497: PPUSH
17498: LD_EXP 61
17502: PUSH
17503: LD_VAR 0 2
17507: ARRAY
17508: PUSH
17509: LD_INT 3
17511: ARRAY
17512: PPUSH
17513: LD_EXP 61
17517: PUSH
17518: LD_VAR 0 2
17522: ARRAY
17523: PUSH
17524: LD_INT 4
17526: ARRAY
17527: PPUSH
17528: CALL_OW 171
// end ; end ;
17532: LD_VAR 0 3
17536: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17537: LD_INT 0
17539: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17540: LD_VAR 0 1
17544: PUSH
17545: LD_INT 250
17547: EQUAL
17548: PUSH
17549: LD_VAR 0 2
17553: PPUSH
17554: CALL_OW 264
17558: PUSH
17559: LD_INT 81
17561: EQUAL
17562: AND
17563: IFFALSE 17584
// MinerPlaceMine ( unit , x , y ) ;
17565: LD_VAR 0 2
17569: PPUSH
17570: LD_VAR 0 4
17574: PPUSH
17575: LD_VAR 0 5
17579: PPUSH
17580: CALL 19969 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17584: LD_VAR 0 1
17588: PUSH
17589: LD_INT 251
17591: EQUAL
17592: PUSH
17593: LD_VAR 0 2
17597: PPUSH
17598: CALL_OW 264
17602: PUSH
17603: LD_INT 81
17605: EQUAL
17606: AND
17607: IFFALSE 17628
// MinerDetonateMine ( unit , x , y ) ;
17609: LD_VAR 0 2
17613: PPUSH
17614: LD_VAR 0 4
17618: PPUSH
17619: LD_VAR 0 5
17623: PPUSH
17624: CALL 20244 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17628: LD_VAR 0 1
17632: PUSH
17633: LD_INT 252
17635: EQUAL
17636: PUSH
17637: LD_VAR 0 2
17641: PPUSH
17642: CALL_OW 264
17646: PUSH
17647: LD_INT 81
17649: EQUAL
17650: AND
17651: IFFALSE 17672
// MinerCreateMinefield ( unit , x , y ) ;
17653: LD_VAR 0 2
17657: PPUSH
17658: LD_VAR 0 4
17662: PPUSH
17663: LD_VAR 0 5
17667: PPUSH
17668: CALL 20661 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17672: LD_VAR 0 1
17676: PUSH
17677: LD_INT 253
17679: EQUAL
17680: PUSH
17681: LD_VAR 0 2
17685: PPUSH
17686: CALL_OW 257
17690: PUSH
17691: LD_INT 5
17693: EQUAL
17694: AND
17695: IFFALSE 17716
// ComBinocular ( unit , x , y ) ;
17697: LD_VAR 0 2
17701: PPUSH
17702: LD_VAR 0 4
17706: PPUSH
17707: LD_VAR 0 5
17711: PPUSH
17712: CALL 21030 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17716: LD_VAR 0 1
17720: PUSH
17721: LD_INT 254
17723: EQUAL
17724: PUSH
17725: LD_VAR 0 2
17729: PPUSH
17730: CALL_OW 264
17734: PUSH
17735: LD_INT 99
17737: EQUAL
17738: AND
17739: PUSH
17740: LD_VAR 0 3
17744: PPUSH
17745: CALL_OW 263
17749: PUSH
17750: LD_INT 3
17752: EQUAL
17753: AND
17754: IFFALSE 17770
// HackDestroyVehicle ( unit , selectedUnit ) ;
17756: LD_VAR 0 2
17760: PPUSH
17761: LD_VAR 0 3
17765: PPUSH
17766: CALL 19333 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17770: LD_VAR 0 1
17774: PUSH
17775: LD_INT 255
17777: EQUAL
17778: PUSH
17779: LD_VAR 0 2
17783: PPUSH
17784: CALL_OW 264
17788: PUSH
17789: LD_INT 14
17791: PUSH
17792: LD_INT 53
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: IN
17799: AND
17800: PUSH
17801: LD_VAR 0 4
17805: PPUSH
17806: LD_VAR 0 5
17810: PPUSH
17811: CALL_OW 488
17815: AND
17816: IFFALSE 17840
// CutTreeXYR ( unit , x , y , 12 ) ;
17818: LD_VAR 0 2
17822: PPUSH
17823: LD_VAR 0 4
17827: PPUSH
17828: LD_VAR 0 5
17832: PPUSH
17833: LD_INT 12
17835: PPUSH
17836: CALL 17903 0 4
// if cmd = 256 then
17840: LD_VAR 0 1
17844: PUSH
17845: LD_INT 256
17847: EQUAL
17848: IFFALSE 17869
// SetFactoryWaypoint ( unit , x , y ) ;
17850: LD_VAR 0 2
17854: PPUSH
17855: LD_VAR 0 4
17859: PPUSH
17860: LD_VAR 0 5
17864: PPUSH
17865: CALL 15850 0 3
// if cmd = 257 then
17869: LD_VAR 0 1
17873: PUSH
17874: LD_INT 257
17876: EQUAL
17877: IFFALSE 17898
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17879: LD_VAR 0 2
17883: PPUSH
17884: LD_VAR 0 4
17888: PPUSH
17889: LD_VAR 0 5
17893: PPUSH
17894: CALL 16212 0 3
// end ;
17898: LD_VAR 0 6
17902: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17903: LD_INT 0
17905: PPUSH
17906: PPUSH
17907: PPUSH
17908: PPUSH
17909: PPUSH
17910: PPUSH
17911: PPUSH
17912: PPUSH
17913: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17914: LD_VAR 0 1
17918: NOT
17919: PUSH
17920: LD_VAR 0 2
17924: PPUSH
17925: LD_VAR 0 3
17929: PPUSH
17930: CALL_OW 488
17934: NOT
17935: OR
17936: PUSH
17937: LD_VAR 0 4
17941: NOT
17942: OR
17943: IFFALSE 17947
// exit ;
17945: GO 18287
// list := [ ] ;
17947: LD_ADDR_VAR 0 13
17951: PUSH
17952: EMPTY
17953: ST_TO_ADDR
// if x - r < 0 then
17954: LD_VAR 0 2
17958: PUSH
17959: LD_VAR 0 4
17963: MINUS
17964: PUSH
17965: LD_INT 0
17967: LESS
17968: IFFALSE 17980
// min_x := 0 else
17970: LD_ADDR_VAR 0 7
17974: PUSH
17975: LD_INT 0
17977: ST_TO_ADDR
17978: GO 17996
// min_x := x - r ;
17980: LD_ADDR_VAR 0 7
17984: PUSH
17985: LD_VAR 0 2
17989: PUSH
17990: LD_VAR 0 4
17994: MINUS
17995: ST_TO_ADDR
// if y - r < 0 then
17996: LD_VAR 0 3
18000: PUSH
18001: LD_VAR 0 4
18005: MINUS
18006: PUSH
18007: LD_INT 0
18009: LESS
18010: IFFALSE 18022
// min_y := 0 else
18012: LD_ADDR_VAR 0 8
18016: PUSH
18017: LD_INT 0
18019: ST_TO_ADDR
18020: GO 18038
// min_y := y - r ;
18022: LD_ADDR_VAR 0 8
18026: PUSH
18027: LD_VAR 0 3
18031: PUSH
18032: LD_VAR 0 4
18036: MINUS
18037: ST_TO_ADDR
// max_x := x + r ;
18038: LD_ADDR_VAR 0 9
18042: PUSH
18043: LD_VAR 0 2
18047: PUSH
18048: LD_VAR 0 4
18052: PLUS
18053: ST_TO_ADDR
// max_y := y + r ;
18054: LD_ADDR_VAR 0 10
18058: PUSH
18059: LD_VAR 0 3
18063: PUSH
18064: LD_VAR 0 4
18068: PLUS
18069: ST_TO_ADDR
// for _x = min_x to max_x do
18070: LD_ADDR_VAR 0 11
18074: PUSH
18075: DOUBLE
18076: LD_VAR 0 7
18080: DEC
18081: ST_TO_ADDR
18082: LD_VAR 0 9
18086: PUSH
18087: FOR_TO
18088: IFFALSE 18205
// for _y = min_y to max_y do
18090: LD_ADDR_VAR 0 12
18094: PUSH
18095: DOUBLE
18096: LD_VAR 0 8
18100: DEC
18101: ST_TO_ADDR
18102: LD_VAR 0 10
18106: PUSH
18107: FOR_TO
18108: IFFALSE 18201
// begin if not ValidHex ( _x , _y ) then
18110: LD_VAR 0 11
18114: PPUSH
18115: LD_VAR 0 12
18119: PPUSH
18120: CALL_OW 488
18124: NOT
18125: IFFALSE 18129
// continue ;
18127: GO 18107
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18129: LD_VAR 0 11
18133: PPUSH
18134: LD_VAR 0 12
18138: PPUSH
18139: CALL_OW 351
18143: PUSH
18144: LD_VAR 0 11
18148: PPUSH
18149: LD_VAR 0 12
18153: PPUSH
18154: CALL_OW 554
18158: AND
18159: IFFALSE 18199
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18161: LD_ADDR_VAR 0 13
18165: PUSH
18166: LD_VAR 0 13
18170: PPUSH
18171: LD_VAR 0 13
18175: PUSH
18176: LD_INT 1
18178: PLUS
18179: PPUSH
18180: LD_VAR 0 11
18184: PUSH
18185: LD_VAR 0 12
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PPUSH
18194: CALL_OW 2
18198: ST_TO_ADDR
// end ;
18199: GO 18107
18201: POP
18202: POP
18203: GO 18087
18205: POP
18206: POP
// if not list then
18207: LD_VAR 0 13
18211: NOT
18212: IFFALSE 18216
// exit ;
18214: GO 18287
// for i in list do
18216: LD_ADDR_VAR 0 6
18220: PUSH
18221: LD_VAR 0 13
18225: PUSH
18226: FOR_IN
18227: IFFALSE 18285
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18229: LD_VAR 0 1
18233: PPUSH
18234: LD_STRING M
18236: PUSH
18237: LD_VAR 0 6
18241: PUSH
18242: LD_INT 1
18244: ARRAY
18245: PUSH
18246: LD_VAR 0 6
18250: PUSH
18251: LD_INT 2
18253: ARRAY
18254: PUSH
18255: LD_INT 0
18257: PUSH
18258: LD_INT 0
18260: PUSH
18261: LD_INT 0
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: PUSH
18276: EMPTY
18277: LIST
18278: PPUSH
18279: CALL_OW 447
18283: GO 18226
18285: POP
18286: POP
// end ;
18287: LD_VAR 0 5
18291: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18292: LD_EXP 64
18296: NOT
18297: IFFALSE 18347
18299: GO 18301
18301: DISABLE
// begin initHack := true ;
18302: LD_ADDR_EXP 64
18306: PUSH
18307: LD_INT 1
18309: ST_TO_ADDR
// hackTanks := [ ] ;
18310: LD_ADDR_EXP 65
18314: PUSH
18315: EMPTY
18316: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18317: LD_ADDR_EXP 66
18321: PUSH
18322: EMPTY
18323: ST_TO_ADDR
// hackLimit := 3 ;
18324: LD_ADDR_EXP 67
18328: PUSH
18329: LD_INT 3
18331: ST_TO_ADDR
// hackDist := 12 ;
18332: LD_ADDR_EXP 68
18336: PUSH
18337: LD_INT 12
18339: ST_TO_ADDR
// hackCounter := [ ] ;
18340: LD_ADDR_EXP 69
18344: PUSH
18345: EMPTY
18346: ST_TO_ADDR
// end ;
18347: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18348: LD_EXP 64
18352: PUSH
18353: LD_INT 34
18355: PUSH
18356: LD_INT 99
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PPUSH
18363: CALL_OW 69
18367: AND
18368: IFFALSE 18621
18370: GO 18372
18372: DISABLE
18373: LD_INT 0
18375: PPUSH
18376: PPUSH
// begin enable ;
18377: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18378: LD_ADDR_VAR 0 1
18382: PUSH
18383: LD_INT 34
18385: PUSH
18386: LD_INT 99
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL_OW 69
18397: PUSH
18398: FOR_IN
18399: IFFALSE 18619
// begin if not i in hackTanks then
18401: LD_VAR 0 1
18405: PUSH
18406: LD_EXP 65
18410: IN
18411: NOT
18412: IFFALSE 18495
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18414: LD_ADDR_EXP 65
18418: PUSH
18419: LD_EXP 65
18423: PPUSH
18424: LD_EXP 65
18428: PUSH
18429: LD_INT 1
18431: PLUS
18432: PPUSH
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 1
18442: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18443: LD_ADDR_EXP 66
18447: PUSH
18448: LD_EXP 66
18452: PPUSH
18453: LD_EXP 66
18457: PUSH
18458: LD_INT 1
18460: PLUS
18461: PPUSH
18462: EMPTY
18463: PPUSH
18464: CALL_OW 1
18468: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18469: LD_ADDR_EXP 69
18473: PUSH
18474: LD_EXP 69
18478: PPUSH
18479: LD_EXP 69
18483: PUSH
18484: LD_INT 1
18486: PLUS
18487: PPUSH
18488: EMPTY
18489: PPUSH
18490: CALL_OW 1
18494: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18495: LD_VAR 0 1
18499: PPUSH
18500: CALL_OW 302
18504: NOT
18505: IFFALSE 18518
// begin HackUnlinkAll ( i ) ;
18507: LD_VAR 0 1
18511: PPUSH
18512: CALL 18624 0 1
// continue ;
18516: GO 18398
// end ; HackCheckCapturedStatus ( i ) ;
18518: LD_VAR 0 1
18522: PPUSH
18523: CALL 19067 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18527: LD_ADDR_VAR 0 2
18531: PUSH
18532: LD_INT 81
18534: PUSH
18535: LD_VAR 0 1
18539: PPUSH
18540: CALL_OW 255
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 33
18551: PUSH
18552: LD_INT 3
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 91
18561: PUSH
18562: LD_VAR 0 1
18566: PUSH
18567: LD_EXP 68
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 50
18579: PUSH
18580: EMPTY
18581: LIST
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: PPUSH
18589: CALL_OW 69
18593: ST_TO_ADDR
// if not tmp then
18594: LD_VAR 0 2
18598: NOT
18599: IFFALSE 18603
// continue ;
18601: GO 18398
// HackLink ( i , tmp ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: LD_VAR 0 2
18612: PPUSH
18613: CALL 18760 0 2
// end ;
18617: GO 18398
18619: POP
18620: POP
// end ;
18621: PPOPN 2
18623: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18624: LD_INT 0
18626: PPUSH
18627: PPUSH
18628: PPUSH
// if not hack in hackTanks then
18629: LD_VAR 0 1
18633: PUSH
18634: LD_EXP 65
18638: IN
18639: NOT
18640: IFFALSE 18644
// exit ;
18642: GO 18755
// index := GetElementIndex ( hackTanks , hack ) ;
18644: LD_ADDR_VAR 0 4
18648: PUSH
18649: LD_EXP 65
18653: PPUSH
18654: LD_VAR 0 1
18658: PPUSH
18659: CALL 26594 0 2
18663: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18664: LD_EXP 66
18668: PUSH
18669: LD_VAR 0 4
18673: ARRAY
18674: IFFALSE 18755
// begin for i in hackTanksCaptured [ index ] do
18676: LD_ADDR_VAR 0 3
18680: PUSH
18681: LD_EXP 66
18685: PUSH
18686: LD_VAR 0 4
18690: ARRAY
18691: PUSH
18692: FOR_IN
18693: IFFALSE 18719
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18695: LD_VAR 0 3
18699: PUSH
18700: LD_INT 1
18702: ARRAY
18703: PPUSH
18704: LD_VAR 0 3
18708: PUSH
18709: LD_INT 2
18711: ARRAY
18712: PPUSH
18713: CALL_OW 235
18717: GO 18692
18719: POP
18720: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18721: LD_ADDR_EXP 66
18725: PUSH
18726: LD_EXP 66
18730: PPUSH
18731: LD_VAR 0 4
18735: PPUSH
18736: EMPTY
18737: PPUSH
18738: CALL_OW 1
18742: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18743: LD_VAR 0 1
18747: PPUSH
18748: LD_INT 0
18750: PPUSH
18751: CALL_OW 505
// end ; end ;
18755: LD_VAR 0 2
18759: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18760: LD_INT 0
18762: PPUSH
18763: PPUSH
18764: PPUSH
// if not hack in hackTanks or not vehicles then
18765: LD_VAR 0 1
18769: PUSH
18770: LD_EXP 65
18774: IN
18775: NOT
18776: PUSH
18777: LD_VAR 0 2
18781: NOT
18782: OR
18783: IFFALSE 18787
// exit ;
18785: GO 19062
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18787: LD_ADDR_VAR 0 2
18791: PUSH
18792: LD_VAR 0 1
18796: PPUSH
18797: LD_VAR 0 2
18801: PPUSH
18802: LD_INT 1
18804: PPUSH
18805: LD_INT 1
18807: PPUSH
18808: CALL 27244 0 4
18812: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18813: LD_ADDR_VAR 0 5
18817: PUSH
18818: LD_EXP 65
18822: PPUSH
18823: LD_VAR 0 1
18827: PPUSH
18828: CALL 26594 0 2
18832: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18833: LD_EXP 66
18837: PUSH
18838: LD_VAR 0 5
18842: ARRAY
18843: PUSH
18844: LD_EXP 67
18848: LESS
18849: IFFALSE 19038
// begin for i := 1 to vehicles do
18851: LD_ADDR_VAR 0 4
18855: PUSH
18856: DOUBLE
18857: LD_INT 1
18859: DEC
18860: ST_TO_ADDR
18861: LD_VAR 0 2
18865: PUSH
18866: FOR_TO
18867: IFFALSE 19036
// begin if hackTanksCaptured [ index ] = hackLimit then
18869: LD_EXP 66
18873: PUSH
18874: LD_VAR 0 5
18878: ARRAY
18879: PUSH
18880: LD_EXP 67
18884: EQUAL
18885: IFFALSE 18889
// break ;
18887: GO 19036
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18889: LD_ADDR_EXP 69
18893: PUSH
18894: LD_EXP 69
18898: PPUSH
18899: LD_VAR 0 5
18903: PPUSH
18904: LD_EXP 69
18908: PUSH
18909: LD_VAR 0 5
18913: ARRAY
18914: PUSH
18915: LD_INT 1
18917: PLUS
18918: PPUSH
18919: CALL_OW 1
18923: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18924: LD_ADDR_EXP 66
18928: PUSH
18929: LD_EXP 66
18933: PPUSH
18934: LD_VAR 0 5
18938: PUSH
18939: LD_EXP 66
18943: PUSH
18944: LD_VAR 0 5
18948: ARRAY
18949: PUSH
18950: LD_INT 1
18952: PLUS
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PPUSH
18958: LD_VAR 0 2
18962: PUSH
18963: LD_VAR 0 4
18967: ARRAY
18968: PUSH
18969: LD_VAR 0 2
18973: PUSH
18974: LD_VAR 0 4
18978: ARRAY
18979: PPUSH
18980: CALL_OW 255
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PPUSH
18989: CALL 26809 0 3
18993: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18994: LD_VAR 0 2
18998: PUSH
18999: LD_VAR 0 4
19003: ARRAY
19004: PPUSH
19005: LD_VAR 0 1
19009: PPUSH
19010: CALL_OW 255
19014: PPUSH
19015: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19019: LD_VAR 0 2
19023: PUSH
19024: LD_VAR 0 4
19028: ARRAY
19029: PPUSH
19030: CALL_OW 141
// end ;
19034: GO 18866
19036: POP
19037: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19038: LD_VAR 0 1
19042: PPUSH
19043: LD_EXP 66
19047: PUSH
19048: LD_VAR 0 5
19052: ARRAY
19053: PUSH
19054: LD_INT 0
19056: PLUS
19057: PPUSH
19058: CALL_OW 505
// end ;
19062: LD_VAR 0 3
19066: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19067: LD_INT 0
19069: PPUSH
19070: PPUSH
19071: PPUSH
19072: PPUSH
// if not hack in hackTanks then
19073: LD_VAR 0 1
19077: PUSH
19078: LD_EXP 65
19082: IN
19083: NOT
19084: IFFALSE 19088
// exit ;
19086: GO 19328
// index := GetElementIndex ( hackTanks , hack ) ;
19088: LD_ADDR_VAR 0 4
19092: PUSH
19093: LD_EXP 65
19097: PPUSH
19098: LD_VAR 0 1
19102: PPUSH
19103: CALL 26594 0 2
19107: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19108: LD_ADDR_VAR 0 3
19112: PUSH
19113: DOUBLE
19114: LD_EXP 66
19118: PUSH
19119: LD_VAR 0 4
19123: ARRAY
19124: INC
19125: ST_TO_ADDR
19126: LD_INT 1
19128: PUSH
19129: FOR_DOWNTO
19130: IFFALSE 19302
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19132: LD_ADDR_VAR 0 5
19136: PUSH
19137: LD_EXP 66
19141: PUSH
19142: LD_VAR 0 4
19146: ARRAY
19147: PUSH
19148: LD_VAR 0 3
19152: ARRAY
19153: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19154: LD_VAR 0 5
19158: PUSH
19159: LD_INT 1
19161: ARRAY
19162: PPUSH
19163: CALL_OW 302
19167: NOT
19168: PUSH
19169: LD_VAR 0 5
19173: PUSH
19174: LD_INT 1
19176: ARRAY
19177: PPUSH
19178: CALL_OW 255
19182: PUSH
19183: LD_VAR 0 1
19187: PPUSH
19188: CALL_OW 255
19192: NONEQUAL
19193: OR
19194: IFFALSE 19300
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19196: LD_VAR 0 5
19200: PUSH
19201: LD_INT 1
19203: ARRAY
19204: PPUSH
19205: CALL_OW 305
19209: PUSH
19210: LD_VAR 0 5
19214: PUSH
19215: LD_INT 1
19217: ARRAY
19218: PPUSH
19219: CALL_OW 255
19223: PUSH
19224: LD_VAR 0 1
19228: PPUSH
19229: CALL_OW 255
19233: EQUAL
19234: AND
19235: IFFALSE 19259
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19237: LD_VAR 0 5
19241: PUSH
19242: LD_INT 1
19244: ARRAY
19245: PPUSH
19246: LD_VAR 0 5
19250: PUSH
19251: LD_INT 2
19253: ARRAY
19254: PPUSH
19255: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19259: LD_ADDR_EXP 66
19263: PUSH
19264: LD_EXP 66
19268: PPUSH
19269: LD_VAR 0 4
19273: PPUSH
19274: LD_EXP 66
19278: PUSH
19279: LD_VAR 0 4
19283: ARRAY
19284: PPUSH
19285: LD_VAR 0 3
19289: PPUSH
19290: CALL_OW 3
19294: PPUSH
19295: CALL_OW 1
19299: ST_TO_ADDR
// end ; end ;
19300: GO 19129
19302: POP
19303: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19304: LD_VAR 0 1
19308: PPUSH
19309: LD_EXP 66
19313: PUSH
19314: LD_VAR 0 4
19318: ARRAY
19319: PUSH
19320: LD_INT 0
19322: PLUS
19323: PPUSH
19324: CALL_OW 505
// end ;
19328: LD_VAR 0 2
19332: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19333: LD_INT 0
19335: PPUSH
19336: PPUSH
19337: PPUSH
19338: PPUSH
// if not hack in hackTanks then
19339: LD_VAR 0 1
19343: PUSH
19344: LD_EXP 65
19348: IN
19349: NOT
19350: IFFALSE 19354
// exit ;
19352: GO 19439
// index := GetElementIndex ( hackTanks , hack ) ;
19354: LD_ADDR_VAR 0 5
19358: PUSH
19359: LD_EXP 65
19363: PPUSH
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL 26594 0 2
19373: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19374: LD_ADDR_VAR 0 4
19378: PUSH
19379: DOUBLE
19380: LD_INT 1
19382: DEC
19383: ST_TO_ADDR
19384: LD_EXP 66
19388: PUSH
19389: LD_VAR 0 5
19393: ARRAY
19394: PUSH
19395: FOR_TO
19396: IFFALSE 19437
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19398: LD_EXP 66
19402: PUSH
19403: LD_VAR 0 5
19407: ARRAY
19408: PUSH
19409: LD_VAR 0 4
19413: ARRAY
19414: PUSH
19415: LD_INT 1
19417: ARRAY
19418: PUSH
19419: LD_VAR 0 2
19423: EQUAL
19424: IFFALSE 19435
// KillUnit ( vehicle ) ;
19426: LD_VAR 0 2
19430: PPUSH
19431: CALL_OW 66
19435: GO 19395
19437: POP
19438: POP
// end ;
19439: LD_VAR 0 3
19443: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19444: LD_EXP 70
19448: NOT
19449: IFFALSE 19484
19451: GO 19453
19453: DISABLE
// begin initMiner := true ;
19454: LD_ADDR_EXP 70
19458: PUSH
19459: LD_INT 1
19461: ST_TO_ADDR
// minersList := [ ] ;
19462: LD_ADDR_EXP 71
19466: PUSH
19467: EMPTY
19468: ST_TO_ADDR
// minerMinesList := [ ] ;
19469: LD_ADDR_EXP 72
19473: PUSH
19474: EMPTY
19475: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19476: LD_ADDR_EXP 73
19480: PUSH
19481: LD_INT 5
19483: ST_TO_ADDR
// end ;
19484: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19485: LD_EXP 70
19489: PUSH
19490: LD_INT 34
19492: PUSH
19493: LD_INT 81
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PPUSH
19500: CALL_OW 69
19504: AND
19505: IFFALSE 19966
19507: GO 19509
19509: DISABLE
19510: LD_INT 0
19512: PPUSH
19513: PPUSH
19514: PPUSH
19515: PPUSH
// begin enable ;
19516: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19517: LD_ADDR_VAR 0 1
19521: PUSH
19522: LD_INT 34
19524: PUSH
19525: LD_INT 81
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PPUSH
19532: CALL_OW 69
19536: PUSH
19537: FOR_IN
19538: IFFALSE 19610
// begin if not i in minersList then
19540: LD_VAR 0 1
19544: PUSH
19545: LD_EXP 71
19549: IN
19550: NOT
19551: IFFALSE 19608
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19553: LD_ADDR_EXP 71
19557: PUSH
19558: LD_EXP 71
19562: PPUSH
19563: LD_EXP 71
19567: PUSH
19568: LD_INT 1
19570: PLUS
19571: PPUSH
19572: LD_VAR 0 1
19576: PPUSH
19577: CALL_OW 1
19581: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19582: LD_ADDR_EXP 72
19586: PUSH
19587: LD_EXP 72
19591: PPUSH
19592: LD_EXP 72
19596: PUSH
19597: LD_INT 1
19599: PLUS
19600: PPUSH
19601: EMPTY
19602: PPUSH
19603: CALL_OW 1
19607: ST_TO_ADDR
// end end ;
19608: GO 19537
19610: POP
19611: POP
// for i := minerMinesList downto 1 do
19612: LD_ADDR_VAR 0 1
19616: PUSH
19617: DOUBLE
19618: LD_EXP 72
19622: INC
19623: ST_TO_ADDR
19624: LD_INT 1
19626: PUSH
19627: FOR_DOWNTO
19628: IFFALSE 19964
// begin if IsLive ( minersList [ i ] ) then
19630: LD_EXP 71
19634: PUSH
19635: LD_VAR 0 1
19639: ARRAY
19640: PPUSH
19641: CALL_OW 300
19645: IFFALSE 19673
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19647: LD_EXP 71
19651: PUSH
19652: LD_VAR 0 1
19656: ARRAY
19657: PPUSH
19658: LD_EXP 72
19662: PUSH
19663: LD_VAR 0 1
19667: ARRAY
19668: PPUSH
19669: CALL_OW 505
// if not minerMinesList [ i ] then
19673: LD_EXP 72
19677: PUSH
19678: LD_VAR 0 1
19682: ARRAY
19683: NOT
19684: IFFALSE 19688
// continue ;
19686: GO 19627
// for j := minerMinesList [ i ] downto 1 do
19688: LD_ADDR_VAR 0 2
19692: PUSH
19693: DOUBLE
19694: LD_EXP 72
19698: PUSH
19699: LD_VAR 0 1
19703: ARRAY
19704: INC
19705: ST_TO_ADDR
19706: LD_INT 1
19708: PUSH
19709: FOR_DOWNTO
19710: IFFALSE 19960
// begin side := GetSide ( minersList [ i ] ) ;
19712: LD_ADDR_VAR 0 3
19716: PUSH
19717: LD_EXP 71
19721: PUSH
19722: LD_VAR 0 1
19726: ARRAY
19727: PPUSH
19728: CALL_OW 255
19732: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19733: LD_ADDR_VAR 0 4
19737: PUSH
19738: LD_EXP 72
19742: PUSH
19743: LD_VAR 0 1
19747: ARRAY
19748: PUSH
19749: LD_VAR 0 2
19753: ARRAY
19754: PUSH
19755: LD_INT 1
19757: ARRAY
19758: PPUSH
19759: LD_EXP 72
19763: PUSH
19764: LD_VAR 0 1
19768: ARRAY
19769: PUSH
19770: LD_VAR 0 2
19774: ARRAY
19775: PUSH
19776: LD_INT 2
19778: ARRAY
19779: PPUSH
19780: CALL_OW 428
19784: ST_TO_ADDR
// if not tmp then
19785: LD_VAR 0 4
19789: NOT
19790: IFFALSE 19794
// continue ;
19792: GO 19709
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19794: LD_VAR 0 4
19798: PUSH
19799: LD_INT 81
19801: PUSH
19802: LD_VAR 0 3
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PPUSH
19811: CALL_OW 69
19815: IN
19816: PUSH
19817: LD_EXP 72
19821: PUSH
19822: LD_VAR 0 1
19826: ARRAY
19827: PUSH
19828: LD_VAR 0 2
19832: ARRAY
19833: PUSH
19834: LD_INT 1
19836: ARRAY
19837: PPUSH
19838: LD_EXP 72
19842: PUSH
19843: LD_VAR 0 1
19847: ARRAY
19848: PUSH
19849: LD_VAR 0 2
19853: ARRAY
19854: PUSH
19855: LD_INT 2
19857: ARRAY
19858: PPUSH
19859: CALL_OW 458
19863: AND
19864: IFFALSE 19958
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19866: LD_EXP 72
19870: PUSH
19871: LD_VAR 0 1
19875: ARRAY
19876: PUSH
19877: LD_VAR 0 2
19881: ARRAY
19882: PUSH
19883: LD_INT 1
19885: ARRAY
19886: PPUSH
19887: LD_EXP 72
19891: PUSH
19892: LD_VAR 0 1
19896: ARRAY
19897: PUSH
19898: LD_VAR 0 2
19902: ARRAY
19903: PUSH
19904: LD_INT 2
19906: ARRAY
19907: PPUSH
19908: LD_VAR 0 3
19912: PPUSH
19913: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19917: LD_ADDR_EXP 72
19921: PUSH
19922: LD_EXP 72
19926: PPUSH
19927: LD_VAR 0 1
19931: PPUSH
19932: LD_EXP 72
19936: PUSH
19937: LD_VAR 0 1
19941: ARRAY
19942: PPUSH
19943: LD_VAR 0 2
19947: PPUSH
19948: CALL_OW 3
19952: PPUSH
19953: CALL_OW 1
19957: ST_TO_ADDR
// end ; end ;
19958: GO 19709
19960: POP
19961: POP
// end ;
19962: GO 19627
19964: POP
19965: POP
// end ;
19966: PPOPN 4
19968: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19969: LD_INT 0
19971: PPUSH
19972: PPUSH
// result := false ;
19973: LD_ADDR_VAR 0 4
19977: PUSH
19978: LD_INT 0
19980: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19981: LD_VAR 0 1
19985: PPUSH
19986: CALL_OW 264
19990: PUSH
19991: LD_INT 81
19993: EQUAL
19994: NOT
19995: IFFALSE 19999
// exit ;
19997: GO 20239
// index := GetElementIndex ( minersList , unit ) ;
19999: LD_ADDR_VAR 0 5
20003: PUSH
20004: LD_EXP 71
20008: PPUSH
20009: LD_VAR 0 1
20013: PPUSH
20014: CALL 26594 0 2
20018: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20019: LD_EXP 72
20023: PUSH
20024: LD_VAR 0 5
20028: ARRAY
20029: PUSH
20030: LD_EXP 73
20034: GREATEREQUAL
20035: IFFALSE 20039
// exit ;
20037: GO 20239
// ComMoveXY ( unit , x , y ) ;
20039: LD_VAR 0 1
20043: PPUSH
20044: LD_VAR 0 2
20048: PPUSH
20049: LD_VAR 0 3
20053: PPUSH
20054: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20058: LD_INT 35
20060: PPUSH
20061: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20065: LD_VAR 0 1
20069: PPUSH
20070: LD_VAR 0 2
20074: PPUSH
20075: LD_VAR 0 3
20079: PPUSH
20080: CALL 57949 0 3
20084: NOT
20085: PUSH
20086: LD_VAR 0 1
20090: PPUSH
20091: CALL_OW 314
20095: AND
20096: IFFALSE 20100
// exit ;
20098: GO 20239
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20100: LD_VAR 0 2
20104: PPUSH
20105: LD_VAR 0 3
20109: PPUSH
20110: CALL_OW 428
20114: PUSH
20115: LD_VAR 0 1
20119: EQUAL
20120: PUSH
20121: LD_VAR 0 1
20125: PPUSH
20126: CALL_OW 314
20130: NOT
20131: AND
20132: IFFALSE 20058
// PlaySoundXY ( x , y , PlantMine ) ;
20134: LD_VAR 0 2
20138: PPUSH
20139: LD_VAR 0 3
20143: PPUSH
20144: LD_STRING PlantMine
20146: PPUSH
20147: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20151: LD_VAR 0 2
20155: PPUSH
20156: LD_VAR 0 3
20160: PPUSH
20161: LD_VAR 0 1
20165: PPUSH
20166: CALL_OW 255
20170: PPUSH
20171: LD_INT 0
20173: PPUSH
20174: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20178: LD_ADDR_EXP 72
20182: PUSH
20183: LD_EXP 72
20187: PPUSH
20188: LD_VAR 0 5
20192: PUSH
20193: LD_EXP 72
20197: PUSH
20198: LD_VAR 0 5
20202: ARRAY
20203: PUSH
20204: LD_INT 1
20206: PLUS
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PPUSH
20212: LD_VAR 0 2
20216: PUSH
20217: LD_VAR 0 3
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PPUSH
20226: CALL 26809 0 3
20230: ST_TO_ADDR
// result := true ;
20231: LD_ADDR_VAR 0 4
20235: PUSH
20236: LD_INT 1
20238: ST_TO_ADDR
// end ;
20239: LD_VAR 0 4
20243: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20244: LD_INT 0
20246: PPUSH
20247: PPUSH
20248: PPUSH
// if not unit in minersList then
20249: LD_VAR 0 1
20253: PUSH
20254: LD_EXP 71
20258: IN
20259: NOT
20260: IFFALSE 20264
// exit ;
20262: GO 20656
// index := GetElementIndex ( minersList , unit ) ;
20264: LD_ADDR_VAR 0 6
20268: PUSH
20269: LD_EXP 71
20273: PPUSH
20274: LD_VAR 0 1
20278: PPUSH
20279: CALL 26594 0 2
20283: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20284: LD_ADDR_VAR 0 5
20288: PUSH
20289: DOUBLE
20290: LD_EXP 72
20294: PUSH
20295: LD_VAR 0 6
20299: ARRAY
20300: INC
20301: ST_TO_ADDR
20302: LD_INT 1
20304: PUSH
20305: FOR_DOWNTO
20306: IFFALSE 20467
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20308: LD_EXP 72
20312: PUSH
20313: LD_VAR 0 6
20317: ARRAY
20318: PUSH
20319: LD_VAR 0 5
20323: ARRAY
20324: PUSH
20325: LD_INT 1
20327: ARRAY
20328: PUSH
20329: LD_VAR 0 2
20333: EQUAL
20334: PUSH
20335: LD_EXP 72
20339: PUSH
20340: LD_VAR 0 6
20344: ARRAY
20345: PUSH
20346: LD_VAR 0 5
20350: ARRAY
20351: PUSH
20352: LD_INT 2
20354: ARRAY
20355: PUSH
20356: LD_VAR 0 3
20360: EQUAL
20361: AND
20362: IFFALSE 20465
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20364: LD_EXP 72
20368: PUSH
20369: LD_VAR 0 6
20373: ARRAY
20374: PUSH
20375: LD_VAR 0 5
20379: ARRAY
20380: PUSH
20381: LD_INT 1
20383: ARRAY
20384: PPUSH
20385: LD_EXP 72
20389: PUSH
20390: LD_VAR 0 6
20394: ARRAY
20395: PUSH
20396: LD_VAR 0 5
20400: ARRAY
20401: PUSH
20402: LD_INT 2
20404: ARRAY
20405: PPUSH
20406: LD_VAR 0 1
20410: PPUSH
20411: CALL_OW 255
20415: PPUSH
20416: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20420: LD_ADDR_EXP 72
20424: PUSH
20425: LD_EXP 72
20429: PPUSH
20430: LD_VAR 0 6
20434: PPUSH
20435: LD_EXP 72
20439: PUSH
20440: LD_VAR 0 6
20444: ARRAY
20445: PPUSH
20446: LD_VAR 0 5
20450: PPUSH
20451: CALL_OW 3
20455: PPUSH
20456: CALL_OW 1
20460: ST_TO_ADDR
// exit ;
20461: POP
20462: POP
20463: GO 20656
// end ; end ;
20465: GO 20305
20467: POP
20468: POP
// for i := minerMinesList [ index ] downto 1 do
20469: LD_ADDR_VAR 0 5
20473: PUSH
20474: DOUBLE
20475: LD_EXP 72
20479: PUSH
20480: LD_VAR 0 6
20484: ARRAY
20485: INC
20486: ST_TO_ADDR
20487: LD_INT 1
20489: PUSH
20490: FOR_DOWNTO
20491: IFFALSE 20654
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20493: LD_EXP 72
20497: PUSH
20498: LD_VAR 0 6
20502: ARRAY
20503: PUSH
20504: LD_VAR 0 5
20508: ARRAY
20509: PUSH
20510: LD_INT 1
20512: ARRAY
20513: PPUSH
20514: LD_EXP 72
20518: PUSH
20519: LD_VAR 0 6
20523: ARRAY
20524: PUSH
20525: LD_VAR 0 5
20529: ARRAY
20530: PUSH
20531: LD_INT 2
20533: ARRAY
20534: PPUSH
20535: LD_VAR 0 2
20539: PPUSH
20540: LD_VAR 0 3
20544: PPUSH
20545: CALL_OW 298
20549: PUSH
20550: LD_INT 6
20552: LESS
20553: IFFALSE 20652
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20555: LD_EXP 72
20559: PUSH
20560: LD_VAR 0 6
20564: ARRAY
20565: PUSH
20566: LD_VAR 0 5
20570: ARRAY
20571: PUSH
20572: LD_INT 1
20574: ARRAY
20575: PPUSH
20576: LD_EXP 72
20580: PUSH
20581: LD_VAR 0 6
20585: ARRAY
20586: PUSH
20587: LD_VAR 0 5
20591: ARRAY
20592: PUSH
20593: LD_INT 2
20595: ARRAY
20596: PPUSH
20597: LD_VAR 0 1
20601: PPUSH
20602: CALL_OW 255
20606: PPUSH
20607: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20611: LD_ADDR_EXP 72
20615: PUSH
20616: LD_EXP 72
20620: PPUSH
20621: LD_VAR 0 6
20625: PPUSH
20626: LD_EXP 72
20630: PUSH
20631: LD_VAR 0 6
20635: ARRAY
20636: PPUSH
20637: LD_VAR 0 5
20641: PPUSH
20642: CALL_OW 3
20646: PPUSH
20647: CALL_OW 1
20651: ST_TO_ADDR
// end ; end ;
20652: GO 20490
20654: POP
20655: POP
// end ;
20656: LD_VAR 0 4
20660: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20661: LD_INT 0
20663: PPUSH
20664: PPUSH
20665: PPUSH
20666: PPUSH
20667: PPUSH
20668: PPUSH
20669: PPUSH
20670: PPUSH
20671: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20672: LD_VAR 0 1
20676: PPUSH
20677: CALL_OW 264
20681: PUSH
20682: LD_INT 81
20684: EQUAL
20685: NOT
20686: PUSH
20687: LD_VAR 0 1
20691: PUSH
20692: LD_EXP 71
20696: IN
20697: NOT
20698: OR
20699: IFFALSE 20703
// exit ;
20701: GO 21025
// index := GetElementIndex ( minersList , unit ) ;
20703: LD_ADDR_VAR 0 6
20707: PUSH
20708: LD_EXP 71
20712: PPUSH
20713: LD_VAR 0 1
20717: PPUSH
20718: CALL 26594 0 2
20722: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20723: LD_ADDR_VAR 0 8
20727: PUSH
20728: LD_EXP 73
20732: PUSH
20733: LD_EXP 72
20737: PUSH
20738: LD_VAR 0 6
20742: ARRAY
20743: MINUS
20744: ST_TO_ADDR
// if not minesFreeAmount then
20745: LD_VAR 0 8
20749: NOT
20750: IFFALSE 20754
// exit ;
20752: GO 21025
// tmp := [ ] ;
20754: LD_ADDR_VAR 0 7
20758: PUSH
20759: EMPTY
20760: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20761: LD_ADDR_VAR 0 5
20765: PUSH
20766: DOUBLE
20767: LD_INT 1
20769: DEC
20770: ST_TO_ADDR
20771: LD_VAR 0 8
20775: PUSH
20776: FOR_TO
20777: IFFALSE 20972
// begin _d := rand ( 0 , 5 ) ;
20779: LD_ADDR_VAR 0 11
20783: PUSH
20784: LD_INT 0
20786: PPUSH
20787: LD_INT 5
20789: PPUSH
20790: CALL_OW 12
20794: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20795: LD_ADDR_VAR 0 12
20799: PUSH
20800: LD_INT 2
20802: PPUSH
20803: LD_INT 6
20805: PPUSH
20806: CALL_OW 12
20810: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20811: LD_ADDR_VAR 0 9
20815: PUSH
20816: LD_VAR 0 2
20820: PPUSH
20821: LD_VAR 0 11
20825: PPUSH
20826: LD_VAR 0 12
20830: PPUSH
20831: CALL_OW 272
20835: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20836: LD_ADDR_VAR 0 10
20840: PUSH
20841: LD_VAR 0 3
20845: PPUSH
20846: LD_VAR 0 11
20850: PPUSH
20851: LD_VAR 0 12
20855: PPUSH
20856: CALL_OW 273
20860: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20861: LD_VAR 0 9
20865: PPUSH
20866: LD_VAR 0 10
20870: PPUSH
20871: CALL_OW 488
20875: PUSH
20876: LD_VAR 0 9
20880: PUSH
20881: LD_VAR 0 10
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_VAR 0 7
20894: IN
20895: NOT
20896: AND
20897: PUSH
20898: LD_VAR 0 9
20902: PPUSH
20903: LD_VAR 0 10
20907: PPUSH
20908: CALL_OW 458
20912: NOT
20913: AND
20914: IFFALSE 20956
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20916: LD_ADDR_VAR 0 7
20920: PUSH
20921: LD_VAR 0 7
20925: PPUSH
20926: LD_VAR 0 7
20930: PUSH
20931: LD_INT 1
20933: PLUS
20934: PPUSH
20935: LD_VAR 0 9
20939: PUSH
20940: LD_VAR 0 10
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PPUSH
20949: CALL_OW 1
20953: ST_TO_ADDR
20954: GO 20970
// i := i - 1 ;
20956: LD_ADDR_VAR 0 5
20960: PUSH
20961: LD_VAR 0 5
20965: PUSH
20966: LD_INT 1
20968: MINUS
20969: ST_TO_ADDR
// end ;
20970: GO 20776
20972: POP
20973: POP
// for i in tmp do
20974: LD_ADDR_VAR 0 5
20978: PUSH
20979: LD_VAR 0 7
20983: PUSH
20984: FOR_IN
20985: IFFALSE 21023
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20987: LD_VAR 0 1
20991: PPUSH
20992: LD_VAR 0 5
20996: PUSH
20997: LD_INT 1
20999: ARRAY
21000: PPUSH
21001: LD_VAR 0 5
21005: PUSH
21006: LD_INT 2
21008: ARRAY
21009: PPUSH
21010: CALL 19969 0 3
21014: NOT
21015: IFFALSE 21021
// exit ;
21017: POP
21018: POP
21019: GO 21025
21021: GO 20984
21023: POP
21024: POP
// end ;
21025: LD_VAR 0 4
21029: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21030: LD_INT 0
21032: PPUSH
21033: PPUSH
21034: PPUSH
21035: PPUSH
21036: PPUSH
21037: PPUSH
21038: PPUSH
// if not GetClass ( unit ) = class_sniper then
21039: LD_VAR 0 1
21043: PPUSH
21044: CALL_OW 257
21048: PUSH
21049: LD_INT 5
21051: EQUAL
21052: NOT
21053: IFFALSE 21057
// exit ;
21055: GO 21445
// dist := 8 ;
21057: LD_ADDR_VAR 0 5
21061: PUSH
21062: LD_INT 8
21064: ST_TO_ADDR
// viewRange := 12 ;
21065: LD_ADDR_VAR 0 7
21069: PUSH
21070: LD_INT 12
21072: ST_TO_ADDR
// side := GetSide ( unit ) ;
21073: LD_ADDR_VAR 0 6
21077: PUSH
21078: LD_VAR 0 1
21082: PPUSH
21083: CALL_OW 255
21087: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21088: LD_INT 61
21090: PPUSH
21091: LD_VAR 0 6
21095: PPUSH
21096: CALL_OW 321
21100: PUSH
21101: LD_INT 2
21103: EQUAL
21104: IFFALSE 21114
// viewRange := 16 ;
21106: LD_ADDR_VAR 0 7
21110: PUSH
21111: LD_INT 16
21113: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21114: LD_VAR 0 1
21118: PPUSH
21119: LD_VAR 0 2
21123: PPUSH
21124: LD_VAR 0 3
21128: PPUSH
21129: CALL_OW 297
21133: PUSH
21134: LD_VAR 0 5
21138: GREATER
21139: IFFALSE 21218
// begin ComMoveXY ( unit , x , y ) ;
21141: LD_VAR 0 1
21145: PPUSH
21146: LD_VAR 0 2
21150: PPUSH
21151: LD_VAR 0 3
21155: PPUSH
21156: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21160: LD_INT 35
21162: PPUSH
21163: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21167: LD_VAR 0 1
21171: PPUSH
21172: LD_VAR 0 2
21176: PPUSH
21177: LD_VAR 0 3
21181: PPUSH
21182: CALL 57949 0 3
21186: NOT
21187: IFFALSE 21191
// exit ;
21189: GO 21445
// until GetDistUnitXY ( unit , x , y ) < dist ;
21191: LD_VAR 0 1
21195: PPUSH
21196: LD_VAR 0 2
21200: PPUSH
21201: LD_VAR 0 3
21205: PPUSH
21206: CALL_OW 297
21210: PUSH
21211: LD_VAR 0 5
21215: LESS
21216: IFFALSE 21160
// end ; ComTurnXY ( unit , x , y ) ;
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_VAR 0 2
21227: PPUSH
21228: LD_VAR 0 3
21232: PPUSH
21233: CALL_OW 118
// wait ( 5 ) ;
21237: LD_INT 5
21239: PPUSH
21240: CALL_OW 67
// _d := GetDir ( unit ) ;
21244: LD_ADDR_VAR 0 10
21248: PUSH
21249: LD_VAR 0 1
21253: PPUSH
21254: CALL_OW 254
21258: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21259: LD_ADDR_VAR 0 8
21263: PUSH
21264: LD_VAR 0 1
21268: PPUSH
21269: CALL_OW 250
21273: PPUSH
21274: LD_VAR 0 10
21278: PPUSH
21279: LD_VAR 0 5
21283: PPUSH
21284: CALL_OW 272
21288: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21289: LD_ADDR_VAR 0 9
21293: PUSH
21294: LD_VAR 0 1
21298: PPUSH
21299: CALL_OW 251
21303: PPUSH
21304: LD_VAR 0 10
21308: PPUSH
21309: LD_VAR 0 5
21313: PPUSH
21314: CALL_OW 273
21318: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21319: LD_VAR 0 8
21323: PPUSH
21324: LD_VAR 0 9
21328: PPUSH
21329: CALL_OW 488
21333: NOT
21334: IFFALSE 21338
// exit ;
21336: GO 21445
// ComAnimCustom ( unit , 1 ) ;
21338: LD_VAR 0 1
21342: PPUSH
21343: LD_INT 1
21345: PPUSH
21346: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21350: LD_VAR 0 8
21354: PPUSH
21355: LD_VAR 0 9
21359: PPUSH
21360: LD_VAR 0 6
21364: PPUSH
21365: LD_VAR 0 7
21369: PPUSH
21370: CALL_OW 330
// repeat wait ( 1 ) ;
21374: LD_INT 1
21376: PPUSH
21377: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21381: LD_VAR 0 1
21385: PPUSH
21386: CALL_OW 316
21390: PUSH
21391: LD_VAR 0 1
21395: PPUSH
21396: CALL_OW 314
21400: OR
21401: PUSH
21402: LD_VAR 0 1
21406: PPUSH
21407: CALL_OW 302
21411: NOT
21412: OR
21413: PUSH
21414: LD_VAR 0 1
21418: PPUSH
21419: CALL_OW 301
21423: OR
21424: IFFALSE 21374
// RemoveSeeing ( _x , _y , side ) ;
21426: LD_VAR 0 8
21430: PPUSH
21431: LD_VAR 0 9
21435: PPUSH
21436: LD_VAR 0 6
21440: PPUSH
21441: CALL_OW 331
// end ; end_of_file
21445: LD_VAR 0 4
21449: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21450: LD_VAR 0 1
21454: PPUSH
21455: LD_VAR 0 2
21459: PPUSH
21460: LD_VAR 0 3
21464: PPUSH
21465: LD_VAR 0 4
21469: PPUSH
21470: LD_VAR 0 5
21474: PPUSH
21475: LD_VAR 0 6
21479: PPUSH
21480: CALL 1522 0 6
// end ;
21484: PPOPN 6
21486: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
21487: LD_INT 0
21489: PPUSH
// begin if not units then
21490: LD_VAR 0 1
21494: NOT
21495: IFFALSE 21499
// exit ;
21497: GO 21499
// end ;
21499: PPOPN 7
21501: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
21502: CALL 1426 0 0
// end ; end_of_file
21506: PPOPN 1
21508: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21509: LD_VAR 0 1
21513: PUSH
21514: LD_INT 200
21516: DOUBLE
21517: GREATEREQUAL
21518: IFFALSE 21526
21520: LD_INT 299
21522: DOUBLE
21523: LESSEQUAL
21524: IFTRUE 21528
21526: GO 21560
21528: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21529: LD_VAR 0 1
21533: PPUSH
21534: LD_VAR 0 2
21538: PPUSH
21539: LD_VAR 0 3
21543: PPUSH
21544: LD_VAR 0 4
21548: PPUSH
21549: LD_VAR 0 5
21553: PPUSH
21554: CALL 17537 0 5
21558: GO 21637
21560: LD_INT 300
21562: DOUBLE
21563: GREATEREQUAL
21564: IFFALSE 21572
21566: LD_INT 399
21568: DOUBLE
21569: LESSEQUAL
21570: IFTRUE 21574
21572: GO 21636
21574: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21575: LD_VAR 0 1
21579: PPUSH
21580: LD_VAR 0 2
21584: PPUSH
21585: LD_VAR 0 3
21589: PPUSH
21590: LD_VAR 0 4
21594: PPUSH
21595: LD_VAR 0 5
21599: PPUSH
21600: LD_VAR 0 6
21604: PPUSH
21605: LD_VAR 0 7
21609: PPUSH
21610: LD_VAR 0 8
21614: PPUSH
21615: LD_VAR 0 9
21619: PPUSH
21620: LD_VAR 0 10
21624: PPUSH
21625: LD_VAR 0 11
21629: PPUSH
21630: CALL 13870 0 11
21634: GO 21637
21636: POP
// end ;
21637: PPOPN 11
21639: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21640: LD_VAR 0 1
21644: PPUSH
21645: LD_VAR 0 2
21649: PPUSH
21650: LD_VAR 0 3
21654: PPUSH
21655: LD_VAR 0 4
21659: PPUSH
21660: LD_VAR 0 5
21664: PPUSH
21665: CALL 17273 0 5
// end ; end_of_file
21669: PPOPN 5
21671: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21672: LD_INT 0
21674: PPUSH
21675: PPUSH
// if exist_mode then
21676: LD_VAR 0 2
21680: IFFALSE 21705
// unit := CreateCharacter ( prefix & ident ) else
21682: LD_ADDR_VAR 0 5
21686: PUSH
21687: LD_VAR 0 3
21691: PUSH
21692: LD_VAR 0 1
21696: STR
21697: PPUSH
21698: CALL_OW 34
21702: ST_TO_ADDR
21703: GO 21720
// unit := NewCharacter ( ident ) ;
21705: LD_ADDR_VAR 0 5
21709: PUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 25
21719: ST_TO_ADDR
// result := unit ;
21720: LD_ADDR_VAR 0 4
21724: PUSH
21725: LD_VAR 0 5
21729: ST_TO_ADDR
// end ;
21730: LD_VAR 0 4
21734: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21735: LD_INT 0
21737: PPUSH
21738: PPUSH
// if not side or not nation then
21739: LD_VAR 0 1
21743: NOT
21744: PUSH
21745: LD_VAR 0 2
21749: NOT
21750: OR
21751: IFFALSE 21755
// exit ;
21753: GO 22523
// case nation of nation_american :
21755: LD_VAR 0 2
21759: PUSH
21760: LD_INT 1
21762: DOUBLE
21763: EQUAL
21764: IFTRUE 21768
21766: GO 21982
21768: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21769: LD_ADDR_VAR 0 4
21773: PUSH
21774: LD_INT 35
21776: PUSH
21777: LD_INT 45
21779: PUSH
21780: LD_INT 46
21782: PUSH
21783: LD_INT 47
21785: PUSH
21786: LD_INT 82
21788: PUSH
21789: LD_INT 83
21791: PUSH
21792: LD_INT 84
21794: PUSH
21795: LD_INT 85
21797: PUSH
21798: LD_INT 86
21800: PUSH
21801: LD_INT 1
21803: PUSH
21804: LD_INT 2
21806: PUSH
21807: LD_INT 6
21809: PUSH
21810: LD_INT 15
21812: PUSH
21813: LD_INT 16
21815: PUSH
21816: LD_INT 7
21818: PUSH
21819: LD_INT 12
21821: PUSH
21822: LD_INT 13
21824: PUSH
21825: LD_INT 10
21827: PUSH
21828: LD_INT 14
21830: PUSH
21831: LD_INT 20
21833: PUSH
21834: LD_INT 21
21836: PUSH
21837: LD_INT 22
21839: PUSH
21840: LD_INT 25
21842: PUSH
21843: LD_INT 32
21845: PUSH
21846: LD_INT 27
21848: PUSH
21849: LD_INT 36
21851: PUSH
21852: LD_INT 69
21854: PUSH
21855: LD_INT 39
21857: PUSH
21858: LD_INT 34
21860: PUSH
21861: LD_INT 40
21863: PUSH
21864: LD_INT 48
21866: PUSH
21867: LD_INT 49
21869: PUSH
21870: LD_INT 50
21872: PUSH
21873: LD_INT 51
21875: PUSH
21876: LD_INT 52
21878: PUSH
21879: LD_INT 53
21881: PUSH
21882: LD_INT 54
21884: PUSH
21885: LD_INT 55
21887: PUSH
21888: LD_INT 56
21890: PUSH
21891: LD_INT 57
21893: PUSH
21894: LD_INT 58
21896: PUSH
21897: LD_INT 59
21899: PUSH
21900: LD_INT 60
21902: PUSH
21903: LD_INT 61
21905: PUSH
21906: LD_INT 62
21908: PUSH
21909: LD_INT 80
21911: PUSH
21912: LD_INT 82
21914: PUSH
21915: LD_INT 83
21917: PUSH
21918: LD_INT 84
21920: PUSH
21921: LD_INT 85
21923: PUSH
21924: LD_INT 86
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: ST_TO_ADDR
21980: GO 22447
21982: LD_INT 2
21984: DOUBLE
21985: EQUAL
21986: IFTRUE 21990
21988: GO 22216
21990: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21991: LD_ADDR_VAR 0 4
21995: PUSH
21996: LD_INT 35
21998: PUSH
21999: LD_INT 45
22001: PUSH
22002: LD_INT 46
22004: PUSH
22005: LD_INT 47
22007: PUSH
22008: LD_INT 82
22010: PUSH
22011: LD_INT 83
22013: PUSH
22014: LD_INT 84
22016: PUSH
22017: LD_INT 85
22019: PUSH
22020: LD_INT 87
22022: PUSH
22023: LD_INT 70
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: LD_INT 11
22031: PUSH
22032: LD_INT 3
22034: PUSH
22035: LD_INT 4
22037: PUSH
22038: LD_INT 5
22040: PUSH
22041: LD_INT 6
22043: PUSH
22044: LD_INT 15
22046: PUSH
22047: LD_INT 18
22049: PUSH
22050: LD_INT 7
22052: PUSH
22053: LD_INT 17
22055: PUSH
22056: LD_INT 8
22058: PUSH
22059: LD_INT 20
22061: PUSH
22062: LD_INT 21
22064: PUSH
22065: LD_INT 22
22067: PUSH
22068: LD_INT 72
22070: PUSH
22071: LD_INT 26
22073: PUSH
22074: LD_INT 69
22076: PUSH
22077: LD_INT 39
22079: PUSH
22080: LD_INT 40
22082: PUSH
22083: LD_INT 41
22085: PUSH
22086: LD_INT 42
22088: PUSH
22089: LD_INT 43
22091: PUSH
22092: LD_INT 48
22094: PUSH
22095: LD_INT 49
22097: PUSH
22098: LD_INT 50
22100: PUSH
22101: LD_INT 51
22103: PUSH
22104: LD_INT 52
22106: PUSH
22107: LD_INT 53
22109: PUSH
22110: LD_INT 54
22112: PUSH
22113: LD_INT 55
22115: PUSH
22116: LD_INT 56
22118: PUSH
22119: LD_INT 60
22121: PUSH
22122: LD_INT 61
22124: PUSH
22125: LD_INT 62
22127: PUSH
22128: LD_INT 66
22130: PUSH
22131: LD_INT 67
22133: PUSH
22134: LD_INT 68
22136: PUSH
22137: LD_INT 81
22139: PUSH
22140: LD_INT 82
22142: PUSH
22143: LD_INT 83
22145: PUSH
22146: LD_INT 84
22148: PUSH
22149: LD_INT 85
22151: PUSH
22152: LD_INT 87
22154: PUSH
22155: LD_INT 88
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: ST_TO_ADDR
22214: GO 22447
22216: LD_INT 3
22218: DOUBLE
22219: EQUAL
22220: IFTRUE 22224
22222: GO 22446
22224: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22225: LD_ADDR_VAR 0 4
22229: PUSH
22230: LD_INT 46
22232: PUSH
22233: LD_INT 47
22235: PUSH
22236: LD_INT 1
22238: PUSH
22239: LD_INT 2
22241: PUSH
22242: LD_INT 82
22244: PUSH
22245: LD_INT 83
22247: PUSH
22248: LD_INT 84
22250: PUSH
22251: LD_INT 85
22253: PUSH
22254: LD_INT 86
22256: PUSH
22257: LD_INT 11
22259: PUSH
22260: LD_INT 9
22262: PUSH
22263: LD_INT 20
22265: PUSH
22266: LD_INT 19
22268: PUSH
22269: LD_INT 21
22271: PUSH
22272: LD_INT 24
22274: PUSH
22275: LD_INT 22
22277: PUSH
22278: LD_INT 25
22280: PUSH
22281: LD_INT 28
22283: PUSH
22284: LD_INT 29
22286: PUSH
22287: LD_INT 30
22289: PUSH
22290: LD_INT 31
22292: PUSH
22293: LD_INT 37
22295: PUSH
22296: LD_INT 38
22298: PUSH
22299: LD_INT 32
22301: PUSH
22302: LD_INT 27
22304: PUSH
22305: LD_INT 33
22307: PUSH
22308: LD_INT 69
22310: PUSH
22311: LD_INT 39
22313: PUSH
22314: LD_INT 34
22316: PUSH
22317: LD_INT 40
22319: PUSH
22320: LD_INT 71
22322: PUSH
22323: LD_INT 23
22325: PUSH
22326: LD_INT 44
22328: PUSH
22329: LD_INT 48
22331: PUSH
22332: LD_INT 49
22334: PUSH
22335: LD_INT 50
22337: PUSH
22338: LD_INT 51
22340: PUSH
22341: LD_INT 52
22343: PUSH
22344: LD_INT 53
22346: PUSH
22347: LD_INT 54
22349: PUSH
22350: LD_INT 55
22352: PUSH
22353: LD_INT 56
22355: PUSH
22356: LD_INT 57
22358: PUSH
22359: LD_INT 58
22361: PUSH
22362: LD_INT 59
22364: PUSH
22365: LD_INT 63
22367: PUSH
22368: LD_INT 64
22370: PUSH
22371: LD_INT 65
22373: PUSH
22374: LD_INT 82
22376: PUSH
22377: LD_INT 83
22379: PUSH
22380: LD_INT 84
22382: PUSH
22383: LD_INT 85
22385: PUSH
22386: LD_INT 86
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: ST_TO_ADDR
22444: GO 22447
22446: POP
// if state > - 1 and state < 3 then
22447: LD_VAR 0 3
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: GREATER
22456: PUSH
22457: LD_VAR 0 3
22461: PUSH
22462: LD_INT 3
22464: LESS
22465: AND
22466: IFFALSE 22523
// for i in result do
22468: LD_ADDR_VAR 0 5
22472: PUSH
22473: LD_VAR 0 4
22477: PUSH
22478: FOR_IN
22479: IFFALSE 22521
// if GetTech ( i , side ) <> state then
22481: LD_VAR 0 5
22485: PPUSH
22486: LD_VAR 0 1
22490: PPUSH
22491: CALL_OW 321
22495: PUSH
22496: LD_VAR 0 3
22500: NONEQUAL
22501: IFFALSE 22519
// result := result diff i ;
22503: LD_ADDR_VAR 0 4
22507: PUSH
22508: LD_VAR 0 4
22512: PUSH
22513: LD_VAR 0 5
22517: DIFF
22518: ST_TO_ADDR
22519: GO 22478
22521: POP
22522: POP
// end ;
22523: LD_VAR 0 4
22527: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22528: LD_INT 0
22530: PPUSH
22531: PPUSH
22532: PPUSH
// result := true ;
22533: LD_ADDR_VAR 0 3
22537: PUSH
22538: LD_INT 1
22540: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22541: LD_ADDR_VAR 0 5
22545: PUSH
22546: LD_VAR 0 2
22550: PPUSH
22551: CALL_OW 480
22555: ST_TO_ADDR
// if not tmp then
22556: LD_VAR 0 5
22560: NOT
22561: IFFALSE 22565
// exit ;
22563: GO 22614
// for i in tmp do
22565: LD_ADDR_VAR 0 4
22569: PUSH
22570: LD_VAR 0 5
22574: PUSH
22575: FOR_IN
22576: IFFALSE 22612
// if GetTech ( i , side ) <> state_researched then
22578: LD_VAR 0 4
22582: PPUSH
22583: LD_VAR 0 1
22587: PPUSH
22588: CALL_OW 321
22592: PUSH
22593: LD_INT 2
22595: NONEQUAL
22596: IFFALSE 22610
// begin result := false ;
22598: LD_ADDR_VAR 0 3
22602: PUSH
22603: LD_INT 0
22605: ST_TO_ADDR
// exit ;
22606: POP
22607: POP
22608: GO 22614
// end ;
22610: GO 22575
22612: POP
22613: POP
// end ;
22614: LD_VAR 0 3
22618: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22619: LD_INT 0
22621: PPUSH
22622: PPUSH
22623: PPUSH
22624: PPUSH
22625: PPUSH
22626: PPUSH
22627: PPUSH
22628: PPUSH
22629: PPUSH
22630: PPUSH
22631: PPUSH
22632: PPUSH
22633: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22634: LD_VAR 0 1
22638: NOT
22639: PUSH
22640: LD_VAR 0 1
22644: PPUSH
22645: CALL_OW 257
22649: PUSH
22650: LD_INT 9
22652: NONEQUAL
22653: OR
22654: IFFALSE 22658
// exit ;
22656: GO 23231
// side := GetSide ( unit ) ;
22658: LD_ADDR_VAR 0 9
22662: PUSH
22663: LD_VAR 0 1
22667: PPUSH
22668: CALL_OW 255
22672: ST_TO_ADDR
// tech_space := tech_spacanom ;
22673: LD_ADDR_VAR 0 12
22677: PUSH
22678: LD_INT 29
22680: ST_TO_ADDR
// tech_time := tech_taurad ;
22681: LD_ADDR_VAR 0 13
22685: PUSH
22686: LD_INT 28
22688: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22689: LD_ADDR_VAR 0 11
22693: PUSH
22694: LD_VAR 0 1
22698: PPUSH
22699: CALL_OW 310
22703: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22704: LD_VAR 0 11
22708: PPUSH
22709: CALL_OW 247
22713: PUSH
22714: LD_INT 2
22716: EQUAL
22717: IFFALSE 22721
// exit ;
22719: GO 23231
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22721: LD_ADDR_VAR 0 8
22725: PUSH
22726: LD_INT 81
22728: PUSH
22729: LD_VAR 0 9
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: LD_INT 21
22743: PUSH
22744: LD_INT 3
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PPUSH
22759: CALL_OW 69
22763: ST_TO_ADDR
// if not tmp then
22764: LD_VAR 0 8
22768: NOT
22769: IFFALSE 22773
// exit ;
22771: GO 23231
// if in_unit then
22773: LD_VAR 0 11
22777: IFFALSE 22801
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22779: LD_ADDR_VAR 0 10
22783: PUSH
22784: LD_VAR 0 8
22788: PPUSH
22789: LD_VAR 0 11
22793: PPUSH
22794: CALL_OW 74
22798: ST_TO_ADDR
22799: GO 22821
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22801: LD_ADDR_VAR 0 10
22805: PUSH
22806: LD_VAR 0 8
22810: PPUSH
22811: LD_VAR 0 1
22815: PPUSH
22816: CALL_OW 74
22820: ST_TO_ADDR
// if not enemy then
22821: LD_VAR 0 10
22825: NOT
22826: IFFALSE 22830
// exit ;
22828: GO 23231
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22830: LD_VAR 0 11
22834: PUSH
22835: LD_VAR 0 11
22839: PPUSH
22840: LD_VAR 0 10
22844: PPUSH
22845: CALL_OW 296
22849: PUSH
22850: LD_INT 13
22852: GREATER
22853: AND
22854: PUSH
22855: LD_VAR 0 1
22859: PPUSH
22860: LD_VAR 0 10
22864: PPUSH
22865: CALL_OW 296
22869: PUSH
22870: LD_INT 12
22872: GREATER
22873: OR
22874: IFFALSE 22878
// exit ;
22876: GO 23231
// missile := [ 1 ] ;
22878: LD_ADDR_VAR 0 14
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: EMPTY
22887: LIST
22888: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22889: LD_VAR 0 9
22893: PPUSH
22894: LD_VAR 0 12
22898: PPUSH
22899: CALL_OW 325
22903: IFFALSE 22932
// missile := Replace ( missile , missile + 1 , 2 ) ;
22905: LD_ADDR_VAR 0 14
22909: PUSH
22910: LD_VAR 0 14
22914: PPUSH
22915: LD_VAR 0 14
22919: PUSH
22920: LD_INT 1
22922: PLUS
22923: PPUSH
22924: LD_INT 2
22926: PPUSH
22927: CALL_OW 1
22931: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22932: LD_VAR 0 9
22936: PPUSH
22937: LD_VAR 0 13
22941: PPUSH
22942: CALL_OW 325
22946: PUSH
22947: LD_VAR 0 10
22951: PPUSH
22952: CALL_OW 255
22956: PPUSH
22957: LD_VAR 0 13
22961: PPUSH
22962: CALL_OW 325
22966: NOT
22967: AND
22968: IFFALSE 22997
// missile := Replace ( missile , missile + 1 , 3 ) ;
22970: LD_ADDR_VAR 0 14
22974: PUSH
22975: LD_VAR 0 14
22979: PPUSH
22980: LD_VAR 0 14
22984: PUSH
22985: LD_INT 1
22987: PLUS
22988: PPUSH
22989: LD_INT 3
22991: PPUSH
22992: CALL_OW 1
22996: ST_TO_ADDR
// if missile < 2 then
22997: LD_VAR 0 14
23001: PUSH
23002: LD_INT 2
23004: LESS
23005: IFFALSE 23009
// exit ;
23007: GO 23231
// x := GetX ( enemy ) ;
23009: LD_ADDR_VAR 0 4
23013: PUSH
23014: LD_VAR 0 10
23018: PPUSH
23019: CALL_OW 250
23023: ST_TO_ADDR
// y := GetY ( enemy ) ;
23024: LD_ADDR_VAR 0 5
23028: PUSH
23029: LD_VAR 0 10
23033: PPUSH
23034: CALL_OW 251
23038: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23039: LD_ADDR_VAR 0 6
23043: PUSH
23044: LD_VAR 0 4
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PPUSH
23053: LD_INT 1
23055: PPUSH
23056: CALL_OW 12
23060: PLUS
23061: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23062: LD_ADDR_VAR 0 7
23066: PUSH
23067: LD_VAR 0 5
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PPUSH
23076: LD_INT 1
23078: PPUSH
23079: CALL_OW 12
23083: PLUS
23084: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23085: LD_VAR 0 6
23089: PPUSH
23090: LD_VAR 0 7
23094: PPUSH
23095: CALL_OW 488
23099: NOT
23100: IFFALSE 23122
// begin _x := x ;
23102: LD_ADDR_VAR 0 6
23106: PUSH
23107: LD_VAR 0 4
23111: ST_TO_ADDR
// _y := y ;
23112: LD_ADDR_VAR 0 7
23116: PUSH
23117: LD_VAR 0 5
23121: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23122: LD_ADDR_VAR 0 3
23126: PUSH
23127: LD_INT 1
23129: PPUSH
23130: LD_VAR 0 14
23134: PPUSH
23135: CALL_OW 12
23139: ST_TO_ADDR
// case i of 1 :
23140: LD_VAR 0 3
23144: PUSH
23145: LD_INT 1
23147: DOUBLE
23148: EQUAL
23149: IFTRUE 23153
23151: GO 23170
23153: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23154: LD_VAR 0 1
23158: PPUSH
23159: LD_VAR 0 10
23163: PPUSH
23164: CALL_OW 115
23168: GO 23231
23170: LD_INT 2
23172: DOUBLE
23173: EQUAL
23174: IFTRUE 23178
23176: GO 23200
23178: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23179: LD_VAR 0 1
23183: PPUSH
23184: LD_VAR 0 6
23188: PPUSH
23189: LD_VAR 0 7
23193: PPUSH
23194: CALL_OW 153
23198: GO 23231
23200: LD_INT 3
23202: DOUBLE
23203: EQUAL
23204: IFTRUE 23208
23206: GO 23230
23208: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23209: LD_VAR 0 1
23213: PPUSH
23214: LD_VAR 0 6
23218: PPUSH
23219: LD_VAR 0 7
23223: PPUSH
23224: CALL_OW 154
23228: GO 23231
23230: POP
// end ;
23231: LD_VAR 0 2
23235: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23236: LD_INT 0
23238: PPUSH
23239: PPUSH
23240: PPUSH
23241: PPUSH
23242: PPUSH
23243: PPUSH
// if not unit or not building then
23244: LD_VAR 0 1
23248: NOT
23249: PUSH
23250: LD_VAR 0 2
23254: NOT
23255: OR
23256: IFFALSE 23260
// exit ;
23258: GO 23418
// x := GetX ( building ) ;
23260: LD_ADDR_VAR 0 5
23264: PUSH
23265: LD_VAR 0 2
23269: PPUSH
23270: CALL_OW 250
23274: ST_TO_ADDR
// y := GetY ( building ) ;
23275: LD_ADDR_VAR 0 6
23279: PUSH
23280: LD_VAR 0 2
23284: PPUSH
23285: CALL_OW 251
23289: ST_TO_ADDR
// for i = 0 to 5 do
23290: LD_ADDR_VAR 0 4
23294: PUSH
23295: DOUBLE
23296: LD_INT 0
23298: DEC
23299: ST_TO_ADDR
23300: LD_INT 5
23302: PUSH
23303: FOR_TO
23304: IFFALSE 23416
// begin _x := ShiftX ( x , i , 3 ) ;
23306: LD_ADDR_VAR 0 7
23310: PUSH
23311: LD_VAR 0 5
23315: PPUSH
23316: LD_VAR 0 4
23320: PPUSH
23321: LD_INT 3
23323: PPUSH
23324: CALL_OW 272
23328: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23329: LD_ADDR_VAR 0 8
23333: PUSH
23334: LD_VAR 0 6
23338: PPUSH
23339: LD_VAR 0 4
23343: PPUSH
23344: LD_INT 3
23346: PPUSH
23347: CALL_OW 273
23351: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23352: LD_VAR 0 7
23356: PPUSH
23357: LD_VAR 0 8
23361: PPUSH
23362: CALL_OW 488
23366: NOT
23367: IFFALSE 23371
// continue ;
23369: GO 23303
// if HexInfo ( _x , _y ) = 0 then
23371: LD_VAR 0 7
23375: PPUSH
23376: LD_VAR 0 8
23380: PPUSH
23381: CALL_OW 428
23385: PUSH
23386: LD_INT 0
23388: EQUAL
23389: IFFALSE 23414
// begin ComMoveXY ( unit , _x , _y ) ;
23391: LD_VAR 0 1
23395: PPUSH
23396: LD_VAR 0 7
23400: PPUSH
23401: LD_VAR 0 8
23405: PPUSH
23406: CALL_OW 111
// exit ;
23410: POP
23411: POP
23412: GO 23418
// end ; end ;
23414: GO 23303
23416: POP
23417: POP
// end ;
23418: LD_VAR 0 3
23422: RET
// export function ScanBase ( side , base_area ) ; begin
23423: LD_INT 0
23425: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23426: LD_ADDR_VAR 0 3
23430: PUSH
23431: LD_VAR 0 2
23435: PPUSH
23436: LD_INT 81
23438: PUSH
23439: LD_VAR 0 1
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PPUSH
23448: CALL_OW 70
23452: ST_TO_ADDR
// end ;
23453: LD_VAR 0 3
23457: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23458: LD_INT 0
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
// result := false ;
23464: LD_ADDR_VAR 0 2
23468: PUSH
23469: LD_INT 0
23471: ST_TO_ADDR
// side := GetSide ( unit ) ;
23472: LD_ADDR_VAR 0 3
23476: PUSH
23477: LD_VAR 0 1
23481: PPUSH
23482: CALL_OW 255
23486: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23487: LD_ADDR_VAR 0 4
23491: PUSH
23492: LD_VAR 0 1
23496: PPUSH
23497: CALL_OW 248
23501: ST_TO_ADDR
// case nat of 1 :
23502: LD_VAR 0 4
23506: PUSH
23507: LD_INT 1
23509: DOUBLE
23510: EQUAL
23511: IFTRUE 23515
23513: GO 23526
23515: POP
// tech := tech_lassight ; 2 :
23516: LD_ADDR_VAR 0 5
23520: PUSH
23521: LD_INT 12
23523: ST_TO_ADDR
23524: GO 23565
23526: LD_INT 2
23528: DOUBLE
23529: EQUAL
23530: IFTRUE 23534
23532: GO 23545
23534: POP
// tech := tech_mortar ; 3 :
23535: LD_ADDR_VAR 0 5
23539: PUSH
23540: LD_INT 41
23542: ST_TO_ADDR
23543: GO 23565
23545: LD_INT 3
23547: DOUBLE
23548: EQUAL
23549: IFTRUE 23553
23551: GO 23564
23553: POP
// tech := tech_bazooka ; end ;
23554: LD_ADDR_VAR 0 5
23558: PUSH
23559: LD_INT 44
23561: ST_TO_ADDR
23562: GO 23565
23564: POP
// if Researched ( side , tech ) then
23565: LD_VAR 0 3
23569: PPUSH
23570: LD_VAR 0 5
23574: PPUSH
23575: CALL_OW 325
23579: IFFALSE 23606
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23581: LD_ADDR_VAR 0 2
23585: PUSH
23586: LD_INT 5
23588: PUSH
23589: LD_INT 8
23591: PUSH
23592: LD_INT 9
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: LIST
23599: PUSH
23600: LD_VAR 0 4
23604: ARRAY
23605: ST_TO_ADDR
// end ;
23606: LD_VAR 0 2
23610: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23611: LD_INT 0
23613: PPUSH
23614: PPUSH
23615: PPUSH
// if not mines then
23616: LD_VAR 0 2
23620: NOT
23621: IFFALSE 23625
// exit ;
23623: GO 23769
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23625: LD_ADDR_VAR 0 5
23629: PUSH
23630: LD_INT 81
23632: PUSH
23633: LD_VAR 0 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 3
23644: PUSH
23645: LD_INT 21
23647: PUSH
23648: LD_INT 3
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PPUSH
23663: CALL_OW 69
23667: ST_TO_ADDR
// for i in mines do
23668: LD_ADDR_VAR 0 4
23672: PUSH
23673: LD_VAR 0 2
23677: PUSH
23678: FOR_IN
23679: IFFALSE 23767
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23681: LD_VAR 0 4
23685: PUSH
23686: LD_INT 1
23688: ARRAY
23689: PPUSH
23690: LD_VAR 0 4
23694: PUSH
23695: LD_INT 2
23697: ARRAY
23698: PPUSH
23699: CALL_OW 458
23703: NOT
23704: IFFALSE 23708
// continue ;
23706: GO 23678
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23708: LD_VAR 0 4
23712: PUSH
23713: LD_INT 1
23715: ARRAY
23716: PPUSH
23717: LD_VAR 0 4
23721: PUSH
23722: LD_INT 2
23724: ARRAY
23725: PPUSH
23726: CALL_OW 428
23730: PUSH
23731: LD_VAR 0 5
23735: IN
23736: IFFALSE 23765
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23738: LD_VAR 0 4
23742: PUSH
23743: LD_INT 1
23745: ARRAY
23746: PPUSH
23747: LD_VAR 0 4
23751: PUSH
23752: LD_INT 2
23754: ARRAY
23755: PPUSH
23756: LD_VAR 0 1
23760: PPUSH
23761: CALL_OW 456
// end ;
23765: GO 23678
23767: POP
23768: POP
// end ;
23769: LD_VAR 0 3
23773: RET
// export function Count ( array ) ; var i ; begin
23774: LD_INT 0
23776: PPUSH
23777: PPUSH
// result := 0 ;
23778: LD_ADDR_VAR 0 2
23782: PUSH
23783: LD_INT 0
23785: ST_TO_ADDR
// for i in array do
23786: LD_ADDR_VAR 0 3
23790: PUSH
23791: LD_VAR 0 1
23795: PUSH
23796: FOR_IN
23797: IFFALSE 23821
// if i then
23799: LD_VAR 0 3
23803: IFFALSE 23819
// result := result + 1 ;
23805: LD_ADDR_VAR 0 2
23809: PUSH
23810: LD_VAR 0 2
23814: PUSH
23815: LD_INT 1
23817: PLUS
23818: ST_TO_ADDR
23819: GO 23796
23821: POP
23822: POP
// end ;
23823: LD_VAR 0 2
23827: RET
// export function IsEmpty ( building ) ; begin
23828: LD_INT 0
23830: PPUSH
// if not building then
23831: LD_VAR 0 1
23835: NOT
23836: IFFALSE 23840
// exit ;
23838: GO 23883
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23840: LD_ADDR_VAR 0 2
23844: PUSH
23845: LD_VAR 0 1
23849: PUSH
23850: LD_INT 22
23852: PUSH
23853: LD_VAR 0 1
23857: PPUSH
23858: CALL_OW 255
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 58
23869: PUSH
23870: EMPTY
23871: LIST
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PPUSH
23877: CALL_OW 69
23881: IN
23882: ST_TO_ADDR
// end ;
23883: LD_VAR 0 2
23887: RET
// export function IsNotFull ( building ) ; var places ; begin
23888: LD_INT 0
23890: PPUSH
23891: PPUSH
// if not building then
23892: LD_VAR 0 1
23896: NOT
23897: IFFALSE 23901
// exit ;
23899: GO 24072
// result := false ;
23901: LD_ADDR_VAR 0 2
23905: PUSH
23906: LD_INT 0
23908: ST_TO_ADDR
// places := 0 ;
23909: LD_ADDR_VAR 0 3
23913: PUSH
23914: LD_INT 0
23916: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
23917: LD_VAR 0 1
23921: PPUSH
23922: CALL_OW 266
23926: PUSH
23927: LD_INT 0
23929: DOUBLE
23930: EQUAL
23931: IFTRUE 23989
23933: LD_INT 1
23935: DOUBLE
23936: EQUAL
23937: IFTRUE 23989
23939: LD_INT 6
23941: DOUBLE
23942: EQUAL
23943: IFTRUE 23989
23945: LD_INT 7
23947: DOUBLE
23948: EQUAL
23949: IFTRUE 23989
23951: LD_INT 8
23953: DOUBLE
23954: EQUAL
23955: IFTRUE 23989
23957: LD_INT 4
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23989
23963: LD_INT 5
23965: DOUBLE
23966: EQUAL
23967: IFTRUE 23989
23969: LD_INT 2
23971: DOUBLE
23972: EQUAL
23973: IFTRUE 23989
23975: LD_INT 3
23977: DOUBLE
23978: EQUAL
23979: IFTRUE 23989
23981: LD_INT 35
23983: DOUBLE
23984: EQUAL
23985: IFTRUE 23989
23987: GO 24000
23989: POP
// places := 6 ; b_bunker , b_breastwork :
23990: LD_ADDR_VAR 0 3
23994: PUSH
23995: LD_INT 6
23997: ST_TO_ADDR
23998: GO 24045
24000: LD_INT 32
24002: DOUBLE
24003: EQUAL
24004: IFTRUE 24014
24006: LD_INT 31
24008: DOUBLE
24009: EQUAL
24010: IFTRUE 24014
24012: GO 24025
24014: POP
// places := 1 ; b_control_tower :
24015: LD_ADDR_VAR 0 3
24019: PUSH
24020: LD_INT 1
24022: ST_TO_ADDR
24023: GO 24045
24025: LD_INT 36
24027: DOUBLE
24028: EQUAL
24029: IFTRUE 24033
24031: GO 24044
24033: POP
// places := 3 ; end ;
24034: LD_ADDR_VAR 0 3
24038: PUSH
24039: LD_INT 3
24041: ST_TO_ADDR
24042: GO 24045
24044: POP
// if places then
24045: LD_VAR 0 3
24049: IFFALSE 24072
// result := UnitsInside ( building ) < places ;
24051: LD_ADDR_VAR 0 2
24055: PUSH
24056: LD_VAR 0 1
24060: PPUSH
24061: CALL_OW 313
24065: PUSH
24066: LD_VAR 0 3
24070: LESS
24071: ST_TO_ADDR
// end ;
24072: LD_VAR 0 2
24076: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24077: LD_INT 0
24079: PPUSH
24080: PPUSH
24081: PPUSH
24082: PPUSH
// tmp := [ ] ;
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: EMPTY
24089: ST_TO_ADDR
// list := [ ] ;
24090: LD_ADDR_VAR 0 5
24094: PUSH
24095: EMPTY
24096: ST_TO_ADDR
// for i = 16 to 25 do
24097: LD_ADDR_VAR 0 4
24101: PUSH
24102: DOUBLE
24103: LD_INT 16
24105: DEC
24106: ST_TO_ADDR
24107: LD_INT 25
24109: PUSH
24110: FOR_TO
24111: IFFALSE 24184
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24113: LD_ADDR_VAR 0 3
24117: PUSH
24118: LD_VAR 0 3
24122: PUSH
24123: LD_INT 22
24125: PUSH
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL_OW 255
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 91
24142: PUSH
24143: LD_VAR 0 1
24147: PUSH
24148: LD_INT 6
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 30
24158: PUSH
24159: LD_VAR 0 4
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: PUSH
24173: EMPTY
24174: LIST
24175: PPUSH
24176: CALL_OW 69
24180: ADD
24181: ST_TO_ADDR
24182: GO 24110
24184: POP
24185: POP
// for i = 1 to tmp do
24186: LD_ADDR_VAR 0 4
24190: PUSH
24191: DOUBLE
24192: LD_INT 1
24194: DEC
24195: ST_TO_ADDR
24196: LD_VAR 0 3
24200: PUSH
24201: FOR_TO
24202: IFFALSE 24290
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24204: LD_ADDR_VAR 0 5
24208: PUSH
24209: LD_VAR 0 5
24213: PUSH
24214: LD_VAR 0 3
24218: PUSH
24219: LD_VAR 0 4
24223: ARRAY
24224: PPUSH
24225: CALL_OW 266
24229: PUSH
24230: LD_VAR 0 3
24234: PUSH
24235: LD_VAR 0 4
24239: ARRAY
24240: PPUSH
24241: CALL_OW 250
24245: PUSH
24246: LD_VAR 0 3
24250: PUSH
24251: LD_VAR 0 4
24255: ARRAY
24256: PPUSH
24257: CALL_OW 251
24261: PUSH
24262: LD_VAR 0 3
24266: PUSH
24267: LD_VAR 0 4
24271: ARRAY
24272: PPUSH
24273: CALL_OW 254
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: PUSH
24284: EMPTY
24285: LIST
24286: ADD
24287: ST_TO_ADDR
24288: GO 24201
24290: POP
24291: POP
// result := list ;
24292: LD_ADDR_VAR 0 2
24296: PUSH
24297: LD_VAR 0 5
24301: ST_TO_ADDR
// end ;
24302: LD_VAR 0 2
24306: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24307: LD_INT 0
24309: PPUSH
24310: PPUSH
24311: PPUSH
24312: PPUSH
24313: PPUSH
24314: PPUSH
24315: PPUSH
// if not factory then
24316: LD_VAR 0 1
24320: NOT
24321: IFFALSE 24325
// exit ;
24323: GO 24918
// if control = control_apeman then
24325: LD_VAR 0 4
24329: PUSH
24330: LD_INT 5
24332: EQUAL
24333: IFFALSE 24442
// begin tmp := UnitsInside ( factory ) ;
24335: LD_ADDR_VAR 0 8
24339: PUSH
24340: LD_VAR 0 1
24344: PPUSH
24345: CALL_OW 313
24349: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24350: LD_VAR 0 8
24354: PPUSH
24355: LD_INT 25
24357: PUSH
24358: LD_INT 12
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PPUSH
24365: CALL_OW 72
24369: NOT
24370: IFFALSE 24380
// control := control_manual ;
24372: LD_ADDR_VAR 0 4
24376: PUSH
24377: LD_INT 1
24379: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24380: LD_ADDR_VAR 0 8
24384: PUSH
24385: LD_VAR 0 1
24389: PPUSH
24390: CALL 24077 0 1
24394: ST_TO_ADDR
// if tmp then
24395: LD_VAR 0 8
24399: IFFALSE 24442
// begin for i in tmp do
24401: LD_ADDR_VAR 0 7
24405: PUSH
24406: LD_VAR 0 8
24410: PUSH
24411: FOR_IN
24412: IFFALSE 24440
// if i [ 1 ] = b_ext_radio then
24414: LD_VAR 0 7
24418: PUSH
24419: LD_INT 1
24421: ARRAY
24422: PUSH
24423: LD_INT 22
24425: EQUAL
24426: IFFALSE 24438
// begin control := control_remote ;
24428: LD_ADDR_VAR 0 4
24432: PUSH
24433: LD_INT 2
24435: ST_TO_ADDR
// break ;
24436: GO 24440
// end ;
24438: GO 24411
24440: POP
24441: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24442: LD_VAR 0 1
24446: PPUSH
24447: LD_VAR 0 2
24451: PPUSH
24452: LD_VAR 0 3
24456: PPUSH
24457: LD_VAR 0 4
24461: PPUSH
24462: LD_VAR 0 5
24466: PPUSH
24467: CALL_OW 448
24471: IFFALSE 24506
// begin result := [ chassis , engine , control , weapon ] ;
24473: LD_ADDR_VAR 0 6
24477: PUSH
24478: LD_VAR 0 2
24482: PUSH
24483: LD_VAR 0 3
24487: PUSH
24488: LD_VAR 0 4
24492: PUSH
24493: LD_VAR 0 5
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: ST_TO_ADDR
// exit ;
24504: GO 24918
// end ; _chassis := AvailableChassisList ( factory ) ;
24506: LD_ADDR_VAR 0 9
24510: PUSH
24511: LD_VAR 0 1
24515: PPUSH
24516: CALL_OW 475
24520: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24521: LD_ADDR_VAR 0 11
24525: PUSH
24526: LD_VAR 0 1
24530: PPUSH
24531: CALL_OW 476
24535: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24536: LD_ADDR_VAR 0 12
24540: PUSH
24541: LD_VAR 0 1
24545: PPUSH
24546: CALL_OW 477
24550: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24551: LD_ADDR_VAR 0 10
24555: PUSH
24556: LD_VAR 0 1
24560: PPUSH
24561: CALL_OW 478
24565: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24566: LD_VAR 0 9
24570: NOT
24571: PUSH
24572: LD_VAR 0 11
24576: NOT
24577: OR
24578: PUSH
24579: LD_VAR 0 12
24583: NOT
24584: OR
24585: PUSH
24586: LD_VAR 0 10
24590: NOT
24591: OR
24592: IFFALSE 24627
// begin result := [ chassis , engine , control , weapon ] ;
24594: LD_ADDR_VAR 0 6
24598: PUSH
24599: LD_VAR 0 2
24603: PUSH
24604: LD_VAR 0 3
24608: PUSH
24609: LD_VAR 0 4
24613: PUSH
24614: LD_VAR 0 5
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: ST_TO_ADDR
// exit ;
24625: GO 24918
// end ; if not chassis in _chassis then
24627: LD_VAR 0 2
24631: PUSH
24632: LD_VAR 0 9
24636: IN
24637: NOT
24638: IFFALSE 24664
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24640: LD_ADDR_VAR 0 2
24644: PUSH
24645: LD_VAR 0 9
24649: PUSH
24650: LD_INT 1
24652: PPUSH
24653: LD_VAR 0 9
24657: PPUSH
24658: CALL_OW 12
24662: ARRAY
24663: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24664: LD_VAR 0 2
24668: PPUSH
24669: LD_VAR 0 3
24673: PPUSH
24674: CALL 24923 0 2
24678: NOT
24679: IFFALSE 24738
// repeat engine := _engine [ 1 ] ;
24681: LD_ADDR_VAR 0 3
24685: PUSH
24686: LD_VAR 0 11
24690: PUSH
24691: LD_INT 1
24693: ARRAY
24694: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24695: LD_ADDR_VAR 0 11
24699: PUSH
24700: LD_VAR 0 11
24704: PPUSH
24705: LD_INT 1
24707: PPUSH
24708: CALL_OW 3
24712: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24713: LD_VAR 0 2
24717: PPUSH
24718: LD_VAR 0 3
24722: PPUSH
24723: CALL 24923 0 2
24727: PUSH
24728: LD_VAR 0 11
24732: PUSH
24733: EMPTY
24734: EQUAL
24735: OR
24736: IFFALSE 24681
// if not control in _control then
24738: LD_VAR 0 4
24742: PUSH
24743: LD_VAR 0 12
24747: IN
24748: NOT
24749: IFFALSE 24775
// control := _control [ rand ( 1 , _control ) ] ;
24751: LD_ADDR_VAR 0 4
24755: PUSH
24756: LD_VAR 0 12
24760: PUSH
24761: LD_INT 1
24763: PPUSH
24764: LD_VAR 0 12
24768: PPUSH
24769: CALL_OW 12
24773: ARRAY
24774: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24775: LD_VAR 0 2
24779: PPUSH
24780: LD_VAR 0 5
24784: PPUSH
24785: CALL 25143 0 2
24789: NOT
24790: IFFALSE 24849
// repeat weapon := _weapon [ 1 ] ;
24792: LD_ADDR_VAR 0 5
24796: PUSH
24797: LD_VAR 0 10
24801: PUSH
24802: LD_INT 1
24804: ARRAY
24805: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24806: LD_ADDR_VAR 0 10
24810: PUSH
24811: LD_VAR 0 10
24815: PPUSH
24816: LD_INT 1
24818: PPUSH
24819: CALL_OW 3
24823: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24824: LD_VAR 0 2
24828: PPUSH
24829: LD_VAR 0 5
24833: PPUSH
24834: CALL 25143 0 2
24838: PUSH
24839: LD_VAR 0 10
24843: PUSH
24844: EMPTY
24845: EQUAL
24846: OR
24847: IFFALSE 24792
// result := [ ] ;
24849: LD_ADDR_VAR 0 6
24853: PUSH
24854: EMPTY
24855: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24856: LD_VAR 0 1
24860: PPUSH
24861: LD_VAR 0 2
24865: PPUSH
24866: LD_VAR 0 3
24870: PPUSH
24871: LD_VAR 0 4
24875: PPUSH
24876: LD_VAR 0 5
24880: PPUSH
24881: CALL_OW 448
24885: IFFALSE 24918
// result := [ chassis , engine , control , weapon ] ;
24887: LD_ADDR_VAR 0 6
24891: PUSH
24892: LD_VAR 0 2
24896: PUSH
24897: LD_VAR 0 3
24901: PUSH
24902: LD_VAR 0 4
24906: PUSH
24907: LD_VAR 0 5
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: ST_TO_ADDR
// end ;
24918: LD_VAR 0 6
24922: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24923: LD_INT 0
24925: PPUSH
// if not chassis or not engine then
24926: LD_VAR 0 1
24930: NOT
24931: PUSH
24932: LD_VAR 0 2
24936: NOT
24937: OR
24938: IFFALSE 24942
// exit ;
24940: GO 25138
// case engine of engine_solar :
24942: LD_VAR 0 2
24946: PUSH
24947: LD_INT 2
24949: DOUBLE
24950: EQUAL
24951: IFTRUE 24955
24953: GO 24993
24955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24956: LD_ADDR_VAR 0 3
24960: PUSH
24961: LD_INT 11
24963: PUSH
24964: LD_INT 12
24966: PUSH
24967: LD_INT 13
24969: PUSH
24970: LD_INT 14
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: LD_INT 3
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: ST_TO_ADDR
24991: GO 25122
24993: LD_INT 1
24995: DOUBLE
24996: EQUAL
24997: IFTRUE 25001
24999: GO 25063
25001: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25002: LD_ADDR_VAR 0 3
25006: PUSH
25007: LD_INT 11
25009: PUSH
25010: LD_INT 12
25012: PUSH
25013: LD_INT 13
25015: PUSH
25016: LD_INT 14
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: LD_INT 3
25027: PUSH
25028: LD_INT 4
25030: PUSH
25031: LD_INT 5
25033: PUSH
25034: LD_INT 21
25036: PUSH
25037: LD_INT 23
25039: PUSH
25040: LD_INT 22
25042: PUSH
25043: LD_INT 24
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: ST_TO_ADDR
25061: GO 25122
25063: LD_INT 3
25065: DOUBLE
25066: EQUAL
25067: IFTRUE 25071
25069: GO 25121
25071: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25072: LD_ADDR_VAR 0 3
25076: PUSH
25077: LD_INT 13
25079: PUSH
25080: LD_INT 14
25082: PUSH
25083: LD_INT 2
25085: PUSH
25086: LD_INT 3
25088: PUSH
25089: LD_INT 4
25091: PUSH
25092: LD_INT 5
25094: PUSH
25095: LD_INT 21
25097: PUSH
25098: LD_INT 22
25100: PUSH
25101: LD_INT 23
25103: PUSH
25104: LD_INT 24
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: ST_TO_ADDR
25119: GO 25122
25121: POP
// result := ( chassis in result ) ;
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_VAR 0 1
25131: PUSH
25132: LD_VAR 0 3
25136: IN
25137: ST_TO_ADDR
// end ;
25138: LD_VAR 0 3
25142: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25143: LD_INT 0
25145: PPUSH
// if not chassis or not weapon then
25146: LD_VAR 0 1
25150: NOT
25151: PUSH
25152: LD_VAR 0 2
25156: NOT
25157: OR
25158: IFFALSE 25162
// exit ;
25160: GO 26222
// case weapon of us_machine_gun :
25162: LD_VAR 0 2
25166: PUSH
25167: LD_INT 2
25169: DOUBLE
25170: EQUAL
25171: IFTRUE 25175
25173: GO 25205
25175: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25176: LD_ADDR_VAR 0 3
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: LD_INT 2
25186: PUSH
25187: LD_INT 3
25189: PUSH
25190: LD_INT 4
25192: PUSH
25193: LD_INT 5
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: ST_TO_ADDR
25203: GO 26206
25205: LD_INT 3
25207: DOUBLE
25208: EQUAL
25209: IFTRUE 25213
25211: GO 25243
25213: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25214: LD_ADDR_VAR 0 3
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: LD_INT 2
25224: PUSH
25225: LD_INT 3
25227: PUSH
25228: LD_INT 4
25230: PUSH
25231: LD_INT 5
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: ST_TO_ADDR
25241: GO 26206
25243: LD_INT 11
25245: DOUBLE
25246: EQUAL
25247: IFTRUE 25251
25249: GO 25281
25251: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25252: LD_ADDR_VAR 0 3
25256: PUSH
25257: LD_INT 1
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: LD_INT 3
25265: PUSH
25266: LD_INT 4
25268: PUSH
25269: LD_INT 5
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: ST_TO_ADDR
25279: GO 26206
25281: LD_INT 4
25283: DOUBLE
25284: EQUAL
25285: IFTRUE 25289
25287: GO 25315
25289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25290: LD_ADDR_VAR 0 3
25294: PUSH
25295: LD_INT 2
25297: PUSH
25298: LD_INT 3
25300: PUSH
25301: LD_INT 4
25303: PUSH
25304: LD_INT 5
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: ST_TO_ADDR
25313: GO 26206
25315: LD_INT 5
25317: DOUBLE
25318: EQUAL
25319: IFTRUE 25323
25321: GO 25349
25323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25324: LD_ADDR_VAR 0 3
25328: PUSH
25329: LD_INT 2
25331: PUSH
25332: LD_INT 3
25334: PUSH
25335: LD_INT 4
25337: PUSH
25338: LD_INT 5
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: ST_TO_ADDR
25347: GO 26206
25349: LD_INT 9
25351: DOUBLE
25352: EQUAL
25353: IFTRUE 25357
25355: GO 25383
25357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_INT 2
25365: PUSH
25366: LD_INT 3
25368: PUSH
25369: LD_INT 4
25371: PUSH
25372: LD_INT 5
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: ST_TO_ADDR
25381: GO 26206
25383: LD_INT 7
25385: DOUBLE
25386: EQUAL
25387: IFTRUE 25391
25389: GO 25417
25391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25392: LD_ADDR_VAR 0 3
25396: PUSH
25397: LD_INT 2
25399: PUSH
25400: LD_INT 3
25402: PUSH
25403: LD_INT 4
25405: PUSH
25406: LD_INT 5
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: ST_TO_ADDR
25415: GO 26206
25417: LD_INT 12
25419: DOUBLE
25420: EQUAL
25421: IFTRUE 25425
25423: GO 25451
25425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25426: LD_ADDR_VAR 0 3
25430: PUSH
25431: LD_INT 2
25433: PUSH
25434: LD_INT 3
25436: PUSH
25437: LD_INT 4
25439: PUSH
25440: LD_INT 5
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: ST_TO_ADDR
25449: GO 26206
25451: LD_INT 13
25453: DOUBLE
25454: EQUAL
25455: IFTRUE 25459
25457: GO 25485
25459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25460: LD_ADDR_VAR 0 3
25464: PUSH
25465: LD_INT 2
25467: PUSH
25468: LD_INT 3
25470: PUSH
25471: LD_INT 4
25473: PUSH
25474: LD_INT 5
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: ST_TO_ADDR
25483: GO 26206
25485: LD_INT 14
25487: DOUBLE
25488: EQUAL
25489: IFTRUE 25493
25491: GO 25511
25493: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25494: LD_ADDR_VAR 0 3
25498: PUSH
25499: LD_INT 4
25501: PUSH
25502: LD_INT 5
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: ST_TO_ADDR
25509: GO 26206
25511: LD_INT 6
25513: DOUBLE
25514: EQUAL
25515: IFTRUE 25519
25517: GO 25537
25519: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25520: LD_ADDR_VAR 0 3
25524: PUSH
25525: LD_INT 4
25527: PUSH
25528: LD_INT 5
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: ST_TO_ADDR
25535: GO 26206
25537: LD_INT 10
25539: DOUBLE
25540: EQUAL
25541: IFTRUE 25545
25543: GO 25563
25545: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25546: LD_ADDR_VAR 0 3
25550: PUSH
25551: LD_INT 4
25553: PUSH
25554: LD_INT 5
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: ST_TO_ADDR
25561: GO 26206
25563: LD_INT 22
25565: DOUBLE
25566: EQUAL
25567: IFTRUE 25571
25569: GO 25597
25571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25572: LD_ADDR_VAR 0 3
25576: PUSH
25577: LD_INT 11
25579: PUSH
25580: LD_INT 12
25582: PUSH
25583: LD_INT 13
25585: PUSH
25586: LD_INT 14
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: ST_TO_ADDR
25595: GO 26206
25597: LD_INT 23
25599: DOUBLE
25600: EQUAL
25601: IFTRUE 25605
25603: GO 25631
25605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25606: LD_ADDR_VAR 0 3
25610: PUSH
25611: LD_INT 11
25613: PUSH
25614: LD_INT 12
25616: PUSH
25617: LD_INT 13
25619: PUSH
25620: LD_INT 14
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: ST_TO_ADDR
25629: GO 26206
25631: LD_INT 24
25633: DOUBLE
25634: EQUAL
25635: IFTRUE 25639
25637: GO 25665
25639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25640: LD_ADDR_VAR 0 3
25644: PUSH
25645: LD_INT 11
25647: PUSH
25648: LD_INT 12
25650: PUSH
25651: LD_INT 13
25653: PUSH
25654: LD_INT 14
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: ST_TO_ADDR
25663: GO 26206
25665: LD_INT 30
25667: DOUBLE
25668: EQUAL
25669: IFTRUE 25673
25671: GO 25699
25673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25674: LD_ADDR_VAR 0 3
25678: PUSH
25679: LD_INT 11
25681: PUSH
25682: LD_INT 12
25684: PUSH
25685: LD_INT 13
25687: PUSH
25688: LD_INT 14
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: ST_TO_ADDR
25697: GO 26206
25699: LD_INT 25
25701: DOUBLE
25702: EQUAL
25703: IFTRUE 25707
25705: GO 25725
25707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25708: LD_ADDR_VAR 0 3
25712: PUSH
25713: LD_INT 13
25715: PUSH
25716: LD_INT 14
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: ST_TO_ADDR
25723: GO 26206
25725: LD_INT 27
25727: DOUBLE
25728: EQUAL
25729: IFTRUE 25733
25731: GO 25751
25733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25734: LD_ADDR_VAR 0 3
25738: PUSH
25739: LD_INT 13
25741: PUSH
25742: LD_INT 14
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: ST_TO_ADDR
25749: GO 26206
25751: LD_INT 92
25753: DOUBLE
25754: EQUAL
25755: IFTRUE 25759
25757: GO 25785
25759: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25760: LD_ADDR_VAR 0 3
25764: PUSH
25765: LD_INT 11
25767: PUSH
25768: LD_INT 12
25770: PUSH
25771: LD_INT 13
25773: PUSH
25774: LD_INT 14
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: ST_TO_ADDR
25783: GO 26206
25785: LD_INT 28
25787: DOUBLE
25788: EQUAL
25789: IFTRUE 25793
25791: GO 25811
25793: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25794: LD_ADDR_VAR 0 3
25798: PUSH
25799: LD_INT 13
25801: PUSH
25802: LD_INT 14
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: ST_TO_ADDR
25809: GO 26206
25811: LD_INT 29
25813: DOUBLE
25814: EQUAL
25815: IFTRUE 25819
25817: GO 25837
25819: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25820: LD_ADDR_VAR 0 3
25824: PUSH
25825: LD_INT 13
25827: PUSH
25828: LD_INT 14
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: ST_TO_ADDR
25835: GO 26206
25837: LD_INT 31
25839: DOUBLE
25840: EQUAL
25841: IFTRUE 25845
25843: GO 25863
25845: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25846: LD_ADDR_VAR 0 3
25850: PUSH
25851: LD_INT 13
25853: PUSH
25854: LD_INT 14
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: ST_TO_ADDR
25861: GO 26206
25863: LD_INT 26
25865: DOUBLE
25866: EQUAL
25867: IFTRUE 25871
25869: GO 25889
25871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25872: LD_ADDR_VAR 0 3
25876: PUSH
25877: LD_INT 13
25879: PUSH
25880: LD_INT 14
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: ST_TO_ADDR
25887: GO 26206
25889: LD_INT 42
25891: DOUBLE
25892: EQUAL
25893: IFTRUE 25897
25895: GO 25923
25897: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25898: LD_ADDR_VAR 0 3
25902: PUSH
25903: LD_INT 21
25905: PUSH
25906: LD_INT 22
25908: PUSH
25909: LD_INT 23
25911: PUSH
25912: LD_INT 24
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: ST_TO_ADDR
25921: GO 26206
25923: LD_INT 43
25925: DOUBLE
25926: EQUAL
25927: IFTRUE 25931
25929: GO 25957
25931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25932: LD_ADDR_VAR 0 3
25936: PUSH
25937: LD_INT 21
25939: PUSH
25940: LD_INT 22
25942: PUSH
25943: LD_INT 23
25945: PUSH
25946: LD_INT 24
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: ST_TO_ADDR
25955: GO 26206
25957: LD_INT 44
25959: DOUBLE
25960: EQUAL
25961: IFTRUE 25965
25963: GO 25991
25965: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25966: LD_ADDR_VAR 0 3
25970: PUSH
25971: LD_INT 21
25973: PUSH
25974: LD_INT 22
25976: PUSH
25977: LD_INT 23
25979: PUSH
25980: LD_INT 24
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: ST_TO_ADDR
25989: GO 26206
25991: LD_INT 45
25993: DOUBLE
25994: EQUAL
25995: IFTRUE 25999
25997: GO 26025
25999: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26000: LD_ADDR_VAR 0 3
26004: PUSH
26005: LD_INT 21
26007: PUSH
26008: LD_INT 22
26010: PUSH
26011: LD_INT 23
26013: PUSH
26014: LD_INT 24
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: ST_TO_ADDR
26023: GO 26206
26025: LD_INT 49
26027: DOUBLE
26028: EQUAL
26029: IFTRUE 26033
26031: GO 26059
26033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26034: LD_ADDR_VAR 0 3
26038: PUSH
26039: LD_INT 21
26041: PUSH
26042: LD_INT 22
26044: PUSH
26045: LD_INT 23
26047: PUSH
26048: LD_INT 24
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: ST_TO_ADDR
26057: GO 26206
26059: LD_INT 51
26061: DOUBLE
26062: EQUAL
26063: IFTRUE 26067
26065: GO 26093
26067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26068: LD_ADDR_VAR 0 3
26072: PUSH
26073: LD_INT 21
26075: PUSH
26076: LD_INT 22
26078: PUSH
26079: LD_INT 23
26081: PUSH
26082: LD_INT 24
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: ST_TO_ADDR
26091: GO 26206
26093: LD_INT 52
26095: DOUBLE
26096: EQUAL
26097: IFTRUE 26101
26099: GO 26127
26101: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26102: LD_ADDR_VAR 0 3
26106: PUSH
26107: LD_INT 21
26109: PUSH
26110: LD_INT 22
26112: PUSH
26113: LD_INT 23
26115: PUSH
26116: LD_INT 24
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: ST_TO_ADDR
26125: GO 26206
26127: LD_INT 53
26129: DOUBLE
26130: EQUAL
26131: IFTRUE 26135
26133: GO 26153
26135: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26136: LD_ADDR_VAR 0 3
26140: PUSH
26141: LD_INT 23
26143: PUSH
26144: LD_INT 24
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: ST_TO_ADDR
26151: GO 26206
26153: LD_INT 46
26155: DOUBLE
26156: EQUAL
26157: IFTRUE 26161
26159: GO 26179
26161: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26162: LD_ADDR_VAR 0 3
26166: PUSH
26167: LD_INT 23
26169: PUSH
26170: LD_INT 24
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: ST_TO_ADDR
26177: GO 26206
26179: LD_INT 47
26181: DOUBLE
26182: EQUAL
26183: IFTRUE 26187
26185: GO 26205
26187: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26188: LD_ADDR_VAR 0 3
26192: PUSH
26193: LD_INT 23
26195: PUSH
26196: LD_INT 24
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: ST_TO_ADDR
26203: GO 26206
26205: POP
// result := ( chassis in result ) ;
26206: LD_ADDR_VAR 0 3
26210: PUSH
26211: LD_VAR 0 1
26215: PUSH
26216: LD_VAR 0 3
26220: IN
26221: ST_TO_ADDR
// end ;
26222: LD_VAR 0 3
26226: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26227: LD_INT 0
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
26234: PPUSH
26235: PPUSH
// result := array ;
26236: LD_ADDR_VAR 0 5
26240: PUSH
26241: LD_VAR 0 1
26245: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26246: LD_VAR 0 1
26250: NOT
26251: PUSH
26252: LD_VAR 0 2
26256: NOT
26257: OR
26258: PUSH
26259: LD_VAR 0 3
26263: NOT
26264: OR
26265: PUSH
26266: LD_VAR 0 2
26270: PUSH
26271: LD_VAR 0 1
26275: GREATER
26276: OR
26277: PUSH
26278: LD_VAR 0 3
26282: PUSH
26283: LD_VAR 0 1
26287: GREATER
26288: OR
26289: IFFALSE 26293
// exit ;
26291: GO 26589
// if direction then
26293: LD_VAR 0 4
26297: IFFALSE 26361
// begin d := 1 ;
26299: LD_ADDR_VAR 0 9
26303: PUSH
26304: LD_INT 1
26306: ST_TO_ADDR
// if i_from > i_to then
26307: LD_VAR 0 2
26311: PUSH
26312: LD_VAR 0 3
26316: GREATER
26317: IFFALSE 26343
// length := ( array - i_from ) + i_to else
26319: LD_ADDR_VAR 0 11
26323: PUSH
26324: LD_VAR 0 1
26328: PUSH
26329: LD_VAR 0 2
26333: MINUS
26334: PUSH
26335: LD_VAR 0 3
26339: PLUS
26340: ST_TO_ADDR
26341: GO 26359
// length := i_to - i_from ;
26343: LD_ADDR_VAR 0 11
26347: PUSH
26348: LD_VAR 0 3
26352: PUSH
26353: LD_VAR 0 2
26357: MINUS
26358: ST_TO_ADDR
// end else
26359: GO 26422
// begin d := - 1 ;
26361: LD_ADDR_VAR 0 9
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: ST_TO_ADDR
// if i_from > i_to then
26370: LD_VAR 0 2
26374: PUSH
26375: LD_VAR 0 3
26379: GREATER
26380: IFFALSE 26400
// length := i_from - i_to else
26382: LD_ADDR_VAR 0 11
26386: PUSH
26387: LD_VAR 0 2
26391: PUSH
26392: LD_VAR 0 3
26396: MINUS
26397: ST_TO_ADDR
26398: GO 26422
// length := ( array - i_to ) + i_from ;
26400: LD_ADDR_VAR 0 11
26404: PUSH
26405: LD_VAR 0 1
26409: PUSH
26410: LD_VAR 0 3
26414: MINUS
26415: PUSH
26416: LD_VAR 0 2
26420: PLUS
26421: ST_TO_ADDR
// end ; if not length then
26422: LD_VAR 0 11
26426: NOT
26427: IFFALSE 26431
// exit ;
26429: GO 26589
// tmp := array ;
26431: LD_ADDR_VAR 0 10
26435: PUSH
26436: LD_VAR 0 1
26440: ST_TO_ADDR
// for i = 1 to length do
26441: LD_ADDR_VAR 0 6
26445: PUSH
26446: DOUBLE
26447: LD_INT 1
26449: DEC
26450: ST_TO_ADDR
26451: LD_VAR 0 11
26455: PUSH
26456: FOR_TO
26457: IFFALSE 26577
// begin for j = 1 to array do
26459: LD_ADDR_VAR 0 7
26463: PUSH
26464: DOUBLE
26465: LD_INT 1
26467: DEC
26468: ST_TO_ADDR
26469: LD_VAR 0 1
26473: PUSH
26474: FOR_TO
26475: IFFALSE 26563
// begin k := j + d ;
26477: LD_ADDR_VAR 0 8
26481: PUSH
26482: LD_VAR 0 7
26486: PUSH
26487: LD_VAR 0 9
26491: PLUS
26492: ST_TO_ADDR
// if k > array then
26493: LD_VAR 0 8
26497: PUSH
26498: LD_VAR 0 1
26502: GREATER
26503: IFFALSE 26513
// k := 1 ;
26505: LD_ADDR_VAR 0 8
26509: PUSH
26510: LD_INT 1
26512: ST_TO_ADDR
// if not k then
26513: LD_VAR 0 8
26517: NOT
26518: IFFALSE 26530
// k := array ;
26520: LD_ADDR_VAR 0 8
26524: PUSH
26525: LD_VAR 0 1
26529: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26530: LD_ADDR_VAR 0 10
26534: PUSH
26535: LD_VAR 0 10
26539: PPUSH
26540: LD_VAR 0 8
26544: PPUSH
26545: LD_VAR 0 1
26549: PUSH
26550: LD_VAR 0 7
26554: ARRAY
26555: PPUSH
26556: CALL_OW 1
26560: ST_TO_ADDR
// end ;
26561: GO 26474
26563: POP
26564: POP
// array := tmp ;
26565: LD_ADDR_VAR 0 1
26569: PUSH
26570: LD_VAR 0 10
26574: ST_TO_ADDR
// end ;
26575: GO 26456
26577: POP
26578: POP
// result := array ;
26579: LD_ADDR_VAR 0 5
26583: PUSH
26584: LD_VAR 0 1
26588: ST_TO_ADDR
// end ;
26589: LD_VAR 0 5
26593: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26594: LD_INT 0
26596: PPUSH
26597: PPUSH
// result := 0 ;
26598: LD_ADDR_VAR 0 3
26602: PUSH
26603: LD_INT 0
26605: ST_TO_ADDR
// if not array or not value in array then
26606: LD_VAR 0 1
26610: NOT
26611: PUSH
26612: LD_VAR 0 2
26616: PUSH
26617: LD_VAR 0 1
26621: IN
26622: NOT
26623: OR
26624: IFFALSE 26628
// exit ;
26626: GO 26682
// for i = 1 to array do
26628: LD_ADDR_VAR 0 4
26632: PUSH
26633: DOUBLE
26634: LD_INT 1
26636: DEC
26637: ST_TO_ADDR
26638: LD_VAR 0 1
26642: PUSH
26643: FOR_TO
26644: IFFALSE 26680
// if value = array [ i ] then
26646: LD_VAR 0 2
26650: PUSH
26651: LD_VAR 0 1
26655: PUSH
26656: LD_VAR 0 4
26660: ARRAY
26661: EQUAL
26662: IFFALSE 26678
// begin result := i ;
26664: LD_ADDR_VAR 0 3
26668: PUSH
26669: LD_VAR 0 4
26673: ST_TO_ADDR
// exit ;
26674: POP
26675: POP
26676: GO 26682
// end ;
26678: GO 26643
26680: POP
26681: POP
// end ;
26682: LD_VAR 0 3
26686: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26687: LD_INT 0
26689: PPUSH
// vc_chassis := chassis ;
26690: LD_ADDR_OWVAR 37
26694: PUSH
26695: LD_VAR 0 1
26699: ST_TO_ADDR
// vc_engine := engine ;
26700: LD_ADDR_OWVAR 39
26704: PUSH
26705: LD_VAR 0 2
26709: ST_TO_ADDR
// vc_control := control ;
26710: LD_ADDR_OWVAR 38
26714: PUSH
26715: LD_VAR 0 3
26719: ST_TO_ADDR
// vc_weapon := weapon ;
26720: LD_ADDR_OWVAR 40
26724: PUSH
26725: LD_VAR 0 4
26729: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26730: LD_ADDR_OWVAR 41
26734: PUSH
26735: LD_VAR 0 5
26739: ST_TO_ADDR
// end ;
26740: LD_VAR 0 6
26744: RET
// export function WantPlant ( unit ) ; var task ; begin
26745: LD_INT 0
26747: PPUSH
26748: PPUSH
// result := false ;
26749: LD_ADDR_VAR 0 2
26753: PUSH
26754: LD_INT 0
26756: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26757: LD_ADDR_VAR 0 3
26761: PUSH
26762: LD_VAR 0 1
26766: PPUSH
26767: CALL_OW 437
26771: ST_TO_ADDR
// if task then
26772: LD_VAR 0 3
26776: IFFALSE 26804
// if task [ 1 ] [ 1 ] = p then
26778: LD_VAR 0 3
26782: PUSH
26783: LD_INT 1
26785: ARRAY
26786: PUSH
26787: LD_INT 1
26789: ARRAY
26790: PUSH
26791: LD_STRING p
26793: EQUAL
26794: IFFALSE 26804
// result := true ;
26796: LD_ADDR_VAR 0 2
26800: PUSH
26801: LD_INT 1
26803: ST_TO_ADDR
// end ;
26804: LD_VAR 0 2
26808: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26809: LD_INT 0
26811: PPUSH
26812: PPUSH
26813: PPUSH
26814: PPUSH
// if pos < 1 then
26815: LD_VAR 0 2
26819: PUSH
26820: LD_INT 1
26822: LESS
26823: IFFALSE 26827
// exit ;
26825: GO 27130
// if pos = 1 then
26827: LD_VAR 0 2
26831: PUSH
26832: LD_INT 1
26834: EQUAL
26835: IFFALSE 26868
// result := Replace ( arr , pos [ 1 ] , value ) else
26837: LD_ADDR_VAR 0 4
26841: PUSH
26842: LD_VAR 0 1
26846: PPUSH
26847: LD_VAR 0 2
26851: PUSH
26852: LD_INT 1
26854: ARRAY
26855: PPUSH
26856: LD_VAR 0 3
26860: PPUSH
26861: CALL_OW 1
26865: ST_TO_ADDR
26866: GO 27130
// begin tmp := arr ;
26868: LD_ADDR_VAR 0 6
26872: PUSH
26873: LD_VAR 0 1
26877: ST_TO_ADDR
// s_arr := [ tmp ] ;
26878: LD_ADDR_VAR 0 7
26882: PUSH
26883: LD_VAR 0 6
26887: PUSH
26888: EMPTY
26889: LIST
26890: ST_TO_ADDR
// for i = 1 to pos - 1 do
26891: LD_ADDR_VAR 0 5
26895: PUSH
26896: DOUBLE
26897: LD_INT 1
26899: DEC
26900: ST_TO_ADDR
26901: LD_VAR 0 2
26905: PUSH
26906: LD_INT 1
26908: MINUS
26909: PUSH
26910: FOR_TO
26911: IFFALSE 26956
// begin tmp := tmp [ pos [ i ] ] ;
26913: LD_ADDR_VAR 0 6
26917: PUSH
26918: LD_VAR 0 6
26922: PUSH
26923: LD_VAR 0 2
26927: PUSH
26928: LD_VAR 0 5
26932: ARRAY
26933: ARRAY
26934: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26935: LD_ADDR_VAR 0 7
26939: PUSH
26940: LD_VAR 0 7
26944: PUSH
26945: LD_VAR 0 6
26949: PUSH
26950: EMPTY
26951: LIST
26952: ADD
26953: ST_TO_ADDR
// end ;
26954: GO 26910
26956: POP
26957: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26958: LD_ADDR_VAR 0 6
26962: PUSH
26963: LD_VAR 0 6
26967: PPUSH
26968: LD_VAR 0 2
26972: PUSH
26973: LD_VAR 0 2
26977: ARRAY
26978: PPUSH
26979: LD_VAR 0 3
26983: PPUSH
26984: CALL_OW 1
26988: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26989: LD_ADDR_VAR 0 7
26993: PUSH
26994: LD_VAR 0 7
26998: PPUSH
26999: LD_VAR 0 7
27003: PPUSH
27004: LD_VAR 0 6
27008: PPUSH
27009: CALL_OW 1
27013: ST_TO_ADDR
// for i = s_arr downto 2 do
27014: LD_ADDR_VAR 0 5
27018: PUSH
27019: DOUBLE
27020: LD_VAR 0 7
27024: INC
27025: ST_TO_ADDR
27026: LD_INT 2
27028: PUSH
27029: FOR_DOWNTO
27030: IFFALSE 27114
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27032: LD_ADDR_VAR 0 6
27036: PUSH
27037: LD_VAR 0 7
27041: PUSH
27042: LD_VAR 0 5
27046: PUSH
27047: LD_INT 1
27049: MINUS
27050: ARRAY
27051: PPUSH
27052: LD_VAR 0 2
27056: PUSH
27057: LD_VAR 0 5
27061: PUSH
27062: LD_INT 1
27064: MINUS
27065: ARRAY
27066: PPUSH
27067: LD_VAR 0 7
27071: PUSH
27072: LD_VAR 0 5
27076: ARRAY
27077: PPUSH
27078: CALL_OW 1
27082: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27083: LD_ADDR_VAR 0 7
27087: PUSH
27088: LD_VAR 0 7
27092: PPUSH
27093: LD_VAR 0 5
27097: PUSH
27098: LD_INT 1
27100: MINUS
27101: PPUSH
27102: LD_VAR 0 6
27106: PPUSH
27107: CALL_OW 1
27111: ST_TO_ADDR
// end ;
27112: GO 27029
27114: POP
27115: POP
// result := s_arr [ 1 ] ;
27116: LD_ADDR_VAR 0 4
27120: PUSH
27121: LD_VAR 0 7
27125: PUSH
27126: LD_INT 1
27128: ARRAY
27129: ST_TO_ADDR
// end ; end ;
27130: LD_VAR 0 4
27134: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27135: LD_INT 0
27137: PPUSH
27138: PPUSH
// if not list then
27139: LD_VAR 0 1
27143: NOT
27144: IFFALSE 27148
// exit ;
27146: GO 27239
// i := list [ pos1 ] ;
27148: LD_ADDR_VAR 0 5
27152: PUSH
27153: LD_VAR 0 1
27157: PUSH
27158: LD_VAR 0 2
27162: ARRAY
27163: ST_TO_ADDR
// if not i then
27164: LD_VAR 0 5
27168: NOT
27169: IFFALSE 27173
// exit ;
27171: GO 27239
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27173: LD_ADDR_VAR 0 1
27177: PUSH
27178: LD_VAR 0 1
27182: PPUSH
27183: LD_VAR 0 2
27187: PPUSH
27188: LD_VAR 0 1
27192: PUSH
27193: LD_VAR 0 3
27197: ARRAY
27198: PPUSH
27199: CALL_OW 1
27203: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27204: LD_ADDR_VAR 0 1
27208: PUSH
27209: LD_VAR 0 1
27213: PPUSH
27214: LD_VAR 0 3
27218: PPUSH
27219: LD_VAR 0 5
27223: PPUSH
27224: CALL_OW 1
27228: ST_TO_ADDR
// result := list ;
27229: LD_ADDR_VAR 0 4
27233: PUSH
27234: LD_VAR 0 1
27238: ST_TO_ADDR
// end ;
27239: LD_VAR 0 4
27243: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27244: LD_INT 0
27246: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27247: LD_ADDR_VAR 0 5
27251: PUSH
27252: LD_VAR 0 1
27256: PPUSH
27257: CALL_OW 250
27261: PPUSH
27262: LD_VAR 0 1
27266: PPUSH
27267: CALL_OW 251
27271: PPUSH
27272: LD_VAR 0 2
27276: PPUSH
27277: LD_VAR 0 3
27281: PPUSH
27282: LD_VAR 0 4
27286: PPUSH
27287: CALL 27297 0 5
27291: ST_TO_ADDR
// end ;
27292: LD_VAR 0 5
27296: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27297: LD_INT 0
27299: PPUSH
27300: PPUSH
27301: PPUSH
27302: PPUSH
// if not list then
27303: LD_VAR 0 3
27307: NOT
27308: IFFALSE 27312
// exit ;
27310: GO 27700
// result := [ ] ;
27312: LD_ADDR_VAR 0 6
27316: PUSH
27317: EMPTY
27318: ST_TO_ADDR
// for i in list do
27319: LD_ADDR_VAR 0 7
27323: PUSH
27324: LD_VAR 0 3
27328: PUSH
27329: FOR_IN
27330: IFFALSE 27532
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27332: LD_ADDR_VAR 0 9
27336: PUSH
27337: LD_VAR 0 7
27341: PPUSH
27342: LD_VAR 0 1
27346: PPUSH
27347: LD_VAR 0 2
27351: PPUSH
27352: CALL_OW 297
27356: ST_TO_ADDR
// if not result then
27357: LD_VAR 0 6
27361: NOT
27362: IFFALSE 27388
// result := [ [ i , tmp ] ] else
27364: LD_ADDR_VAR 0 6
27368: PUSH
27369: LD_VAR 0 7
27373: PUSH
27374: LD_VAR 0 9
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: EMPTY
27384: LIST
27385: ST_TO_ADDR
27386: GO 27530
// begin if result [ result ] [ 2 ] < tmp then
27388: LD_VAR 0 6
27392: PUSH
27393: LD_VAR 0 6
27397: ARRAY
27398: PUSH
27399: LD_INT 2
27401: ARRAY
27402: PUSH
27403: LD_VAR 0 9
27407: LESS
27408: IFFALSE 27450
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27410: LD_ADDR_VAR 0 6
27414: PUSH
27415: LD_VAR 0 6
27419: PPUSH
27420: LD_VAR 0 6
27424: PUSH
27425: LD_INT 1
27427: PLUS
27428: PPUSH
27429: LD_VAR 0 7
27433: PUSH
27434: LD_VAR 0 9
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PPUSH
27443: CALL_OW 2
27447: ST_TO_ADDR
27448: GO 27530
// for j = 1 to result do
27450: LD_ADDR_VAR 0 8
27454: PUSH
27455: DOUBLE
27456: LD_INT 1
27458: DEC
27459: ST_TO_ADDR
27460: LD_VAR 0 6
27464: PUSH
27465: FOR_TO
27466: IFFALSE 27528
// begin if tmp < result [ j ] [ 2 ] then
27468: LD_VAR 0 9
27472: PUSH
27473: LD_VAR 0 6
27477: PUSH
27478: LD_VAR 0 8
27482: ARRAY
27483: PUSH
27484: LD_INT 2
27486: ARRAY
27487: LESS
27488: IFFALSE 27526
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27490: LD_ADDR_VAR 0 6
27494: PUSH
27495: LD_VAR 0 6
27499: PPUSH
27500: LD_VAR 0 8
27504: PPUSH
27505: LD_VAR 0 7
27509: PUSH
27510: LD_VAR 0 9
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PPUSH
27519: CALL_OW 2
27523: ST_TO_ADDR
// break ;
27524: GO 27528
// end ; end ;
27526: GO 27465
27528: POP
27529: POP
// end ; end ;
27530: GO 27329
27532: POP
27533: POP
// if result and not asc then
27534: LD_VAR 0 6
27538: PUSH
27539: LD_VAR 0 4
27543: NOT
27544: AND
27545: IFFALSE 27620
// begin tmp := result ;
27547: LD_ADDR_VAR 0 9
27551: PUSH
27552: LD_VAR 0 6
27556: ST_TO_ADDR
// for i = tmp downto 1 do
27557: LD_ADDR_VAR 0 7
27561: PUSH
27562: DOUBLE
27563: LD_VAR 0 9
27567: INC
27568: ST_TO_ADDR
27569: LD_INT 1
27571: PUSH
27572: FOR_DOWNTO
27573: IFFALSE 27618
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27575: LD_ADDR_VAR 0 6
27579: PUSH
27580: LD_VAR 0 6
27584: PPUSH
27585: LD_VAR 0 9
27589: PUSH
27590: LD_VAR 0 7
27594: MINUS
27595: PUSH
27596: LD_INT 1
27598: PLUS
27599: PPUSH
27600: LD_VAR 0 9
27604: PUSH
27605: LD_VAR 0 7
27609: ARRAY
27610: PPUSH
27611: CALL_OW 1
27615: ST_TO_ADDR
27616: GO 27572
27618: POP
27619: POP
// end ; tmp := [ ] ;
27620: LD_ADDR_VAR 0 9
27624: PUSH
27625: EMPTY
27626: ST_TO_ADDR
// if mode then
27627: LD_VAR 0 5
27631: IFFALSE 27700
// begin for i = 1 to result do
27633: LD_ADDR_VAR 0 7
27637: PUSH
27638: DOUBLE
27639: LD_INT 1
27641: DEC
27642: ST_TO_ADDR
27643: LD_VAR 0 6
27647: PUSH
27648: FOR_TO
27649: IFFALSE 27688
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27651: LD_ADDR_VAR 0 9
27655: PUSH
27656: LD_VAR 0 9
27660: PPUSH
27661: LD_VAR 0 7
27665: PPUSH
27666: LD_VAR 0 6
27670: PUSH
27671: LD_VAR 0 7
27675: ARRAY
27676: PUSH
27677: LD_INT 1
27679: ARRAY
27680: PPUSH
27681: CALL_OW 1
27685: ST_TO_ADDR
27686: GO 27648
27688: POP
27689: POP
// result := tmp ;
27690: LD_ADDR_VAR 0 6
27694: PUSH
27695: LD_VAR 0 9
27699: ST_TO_ADDR
// end ; end ;
27700: LD_VAR 0 6
27704: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27705: LD_INT 0
27707: PPUSH
27708: PPUSH
27709: PPUSH
27710: PPUSH
27711: PPUSH
27712: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27713: LD_ADDR_VAR 0 5
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: EMPTY
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: ST_TO_ADDR
// if not x or not y then
27735: LD_VAR 0 2
27739: NOT
27740: PUSH
27741: LD_VAR 0 3
27745: NOT
27746: OR
27747: IFFALSE 27751
// exit ;
27749: GO 29401
// if not range then
27751: LD_VAR 0 4
27755: NOT
27756: IFFALSE 27766
// range := 10 ;
27758: LD_ADDR_VAR 0 4
27762: PUSH
27763: LD_INT 10
27765: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27766: LD_ADDR_VAR 0 8
27770: PUSH
27771: LD_INT 81
27773: PUSH
27774: LD_VAR 0 1
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 92
27785: PUSH
27786: LD_VAR 0 2
27790: PUSH
27791: LD_VAR 0 3
27795: PUSH
27796: LD_VAR 0 4
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 3
27809: PUSH
27810: LD_INT 21
27812: PUSH
27813: LD_INT 3
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: LIST
27828: PPUSH
27829: CALL_OW 69
27833: ST_TO_ADDR
// if not tmp then
27834: LD_VAR 0 8
27838: NOT
27839: IFFALSE 27843
// exit ;
27841: GO 29401
// for i in tmp do
27843: LD_ADDR_VAR 0 6
27847: PUSH
27848: LD_VAR 0 8
27852: PUSH
27853: FOR_IN
27854: IFFALSE 29376
// begin points := [ 0 , 0 , 0 ] ;
27856: LD_ADDR_VAR 0 9
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: LIST
27874: ST_TO_ADDR
// bpoints := 1 ;
27875: LD_ADDR_VAR 0 10
27879: PUSH
27880: LD_INT 1
27882: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27883: LD_VAR 0 6
27887: PPUSH
27888: CALL_OW 247
27892: PUSH
27893: LD_INT 1
27895: DOUBLE
27896: EQUAL
27897: IFTRUE 27901
27899: GO 28479
27901: POP
// begin if GetClass ( i ) = 1 then
27902: LD_VAR 0 6
27906: PPUSH
27907: CALL_OW 257
27911: PUSH
27912: LD_INT 1
27914: EQUAL
27915: IFFALSE 27936
// points := [ 10 , 5 , 3 ] ;
27917: LD_ADDR_VAR 0 9
27921: PUSH
27922: LD_INT 10
27924: PUSH
27925: LD_INT 5
27927: PUSH
27928: LD_INT 3
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27936: LD_VAR 0 6
27940: PPUSH
27941: CALL_OW 257
27945: PUSH
27946: LD_INT 2
27948: PUSH
27949: LD_INT 3
27951: PUSH
27952: LD_INT 4
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: LIST
27959: IN
27960: IFFALSE 27981
// points := [ 3 , 2 , 1 ] ;
27962: LD_ADDR_VAR 0 9
27966: PUSH
27967: LD_INT 3
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27981: LD_VAR 0 6
27985: PPUSH
27986: CALL_OW 257
27990: PUSH
27991: LD_INT 5
27993: EQUAL
27994: IFFALSE 28015
// points := [ 130 , 5 , 2 ] ;
27996: LD_ADDR_VAR 0 9
28000: PUSH
28001: LD_INT 130
28003: PUSH
28004: LD_INT 5
28006: PUSH
28007: LD_INT 2
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: LIST
28014: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28015: LD_VAR 0 6
28019: PPUSH
28020: CALL_OW 257
28024: PUSH
28025: LD_INT 8
28027: EQUAL
28028: IFFALSE 28049
// points := [ 35 , 35 , 30 ] ;
28030: LD_ADDR_VAR 0 9
28034: PUSH
28035: LD_INT 35
28037: PUSH
28038: LD_INT 35
28040: PUSH
28041: LD_INT 30
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: LIST
28048: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28049: LD_VAR 0 6
28053: PPUSH
28054: CALL_OW 257
28058: PUSH
28059: LD_INT 9
28061: EQUAL
28062: IFFALSE 28083
// points := [ 20 , 55 , 40 ] ;
28064: LD_ADDR_VAR 0 9
28068: PUSH
28069: LD_INT 20
28071: PUSH
28072: LD_INT 55
28074: PUSH
28075: LD_INT 40
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28083: LD_VAR 0 6
28087: PPUSH
28088: CALL_OW 257
28092: PUSH
28093: LD_INT 12
28095: PUSH
28096: LD_INT 16
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: IN
28103: IFFALSE 28124
// points := [ 5 , 3 , 2 ] ;
28105: LD_ADDR_VAR 0 9
28109: PUSH
28110: LD_INT 5
28112: PUSH
28113: LD_INT 3
28115: PUSH
28116: LD_INT 2
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: LIST
28123: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28124: LD_VAR 0 6
28128: PPUSH
28129: CALL_OW 257
28133: PUSH
28134: LD_INT 17
28136: EQUAL
28137: IFFALSE 28158
// points := [ 100 , 50 , 75 ] ;
28139: LD_ADDR_VAR 0 9
28143: PUSH
28144: LD_INT 100
28146: PUSH
28147: LD_INT 50
28149: PUSH
28150: LD_INT 75
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28158: LD_VAR 0 6
28162: PPUSH
28163: CALL_OW 257
28167: PUSH
28168: LD_INT 15
28170: EQUAL
28171: IFFALSE 28192
// points := [ 10 , 5 , 3 ] ;
28173: LD_ADDR_VAR 0 9
28177: PUSH
28178: LD_INT 10
28180: PUSH
28181: LD_INT 5
28183: PUSH
28184: LD_INT 3
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: LIST
28191: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28192: LD_VAR 0 6
28196: PPUSH
28197: CALL_OW 257
28201: PUSH
28202: LD_INT 14
28204: EQUAL
28205: IFFALSE 28226
// points := [ 10 , 0 , 0 ] ;
28207: LD_ADDR_VAR 0 9
28211: PUSH
28212: LD_INT 10
28214: PUSH
28215: LD_INT 0
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28226: LD_VAR 0 6
28230: PPUSH
28231: CALL_OW 257
28235: PUSH
28236: LD_INT 11
28238: EQUAL
28239: IFFALSE 28260
// points := [ 30 , 10 , 5 ] ;
28241: LD_ADDR_VAR 0 9
28245: PUSH
28246: LD_INT 30
28248: PUSH
28249: LD_INT 10
28251: PUSH
28252: LD_INT 5
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28260: LD_VAR 0 1
28264: PPUSH
28265: LD_INT 5
28267: PPUSH
28268: CALL_OW 321
28272: PUSH
28273: LD_INT 2
28275: EQUAL
28276: IFFALSE 28293
// bpoints := bpoints * 1.8 ;
28278: LD_ADDR_VAR 0 10
28282: PUSH
28283: LD_VAR 0 10
28287: PUSH
28288: LD_REAL  1.80000000000000E+0000
28291: MUL
28292: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28293: LD_VAR 0 6
28297: PPUSH
28298: CALL_OW 257
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: LD_INT 2
28308: PUSH
28309: LD_INT 3
28311: PUSH
28312: LD_INT 4
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: IN
28321: PUSH
28322: LD_VAR 0 1
28326: PPUSH
28327: LD_INT 51
28329: PPUSH
28330: CALL_OW 321
28334: PUSH
28335: LD_INT 2
28337: EQUAL
28338: AND
28339: IFFALSE 28356
// bpoints := bpoints * 1.2 ;
28341: LD_ADDR_VAR 0 10
28345: PUSH
28346: LD_VAR 0 10
28350: PUSH
28351: LD_REAL  1.20000000000000E+0000
28354: MUL
28355: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28356: LD_VAR 0 6
28360: PPUSH
28361: CALL_OW 257
28365: PUSH
28366: LD_INT 5
28368: PUSH
28369: LD_INT 7
28371: PUSH
28372: LD_INT 9
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: LIST
28379: IN
28380: PUSH
28381: LD_VAR 0 1
28385: PPUSH
28386: LD_INT 52
28388: PPUSH
28389: CALL_OW 321
28393: PUSH
28394: LD_INT 2
28396: EQUAL
28397: AND
28398: IFFALSE 28415
// bpoints := bpoints * 1.5 ;
28400: LD_ADDR_VAR 0 10
28404: PUSH
28405: LD_VAR 0 10
28409: PUSH
28410: LD_REAL  1.50000000000000E+0000
28413: MUL
28414: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28415: LD_VAR 0 1
28419: PPUSH
28420: LD_INT 66
28422: PPUSH
28423: CALL_OW 321
28427: PUSH
28428: LD_INT 2
28430: EQUAL
28431: IFFALSE 28448
// bpoints := bpoints * 1.1 ;
28433: LD_ADDR_VAR 0 10
28437: PUSH
28438: LD_VAR 0 10
28442: PUSH
28443: LD_REAL  1.10000000000000E+0000
28446: MUL
28447: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28448: LD_ADDR_VAR 0 10
28452: PUSH
28453: LD_VAR 0 10
28457: PUSH
28458: LD_VAR 0 6
28462: PPUSH
28463: LD_INT 1
28465: PPUSH
28466: CALL_OW 259
28470: PUSH
28471: LD_REAL  1.15000000000000E+0000
28474: MUL
28475: MUL
28476: ST_TO_ADDR
// end ; unit_vehicle :
28477: GO 29305
28479: LD_INT 2
28481: DOUBLE
28482: EQUAL
28483: IFTRUE 28487
28485: GO 29293
28487: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28488: LD_VAR 0 6
28492: PPUSH
28493: CALL_OW 264
28497: PUSH
28498: LD_INT 2
28500: PUSH
28501: LD_INT 42
28503: PUSH
28504: LD_INT 24
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: LIST
28511: IN
28512: IFFALSE 28533
// points := [ 25 , 5 , 3 ] ;
28514: LD_ADDR_VAR 0 9
28518: PUSH
28519: LD_INT 25
28521: PUSH
28522: LD_INT 5
28524: PUSH
28525: LD_INT 3
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: LIST
28532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28533: LD_VAR 0 6
28537: PPUSH
28538: CALL_OW 264
28542: PUSH
28543: LD_INT 4
28545: PUSH
28546: LD_INT 43
28548: PUSH
28549: LD_INT 25
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: LIST
28556: IN
28557: IFFALSE 28578
// points := [ 40 , 15 , 5 ] ;
28559: LD_ADDR_VAR 0 9
28563: PUSH
28564: LD_INT 40
28566: PUSH
28567: LD_INT 15
28569: PUSH
28570: LD_INT 5
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28578: LD_VAR 0 6
28582: PPUSH
28583: CALL_OW 264
28587: PUSH
28588: LD_INT 3
28590: PUSH
28591: LD_INT 23
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: IN
28598: IFFALSE 28619
// points := [ 7 , 25 , 8 ] ;
28600: LD_ADDR_VAR 0 9
28604: PUSH
28605: LD_INT 7
28607: PUSH
28608: LD_INT 25
28610: PUSH
28611: LD_INT 8
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: LIST
28618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28619: LD_VAR 0 6
28623: PPUSH
28624: CALL_OW 264
28628: PUSH
28629: LD_INT 5
28631: PUSH
28632: LD_INT 27
28634: PUSH
28635: LD_INT 44
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: LIST
28642: IN
28643: IFFALSE 28664
// points := [ 14 , 50 , 16 ] ;
28645: LD_ADDR_VAR 0 9
28649: PUSH
28650: LD_INT 14
28652: PUSH
28653: LD_INT 50
28655: PUSH
28656: LD_INT 16
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28664: LD_VAR 0 6
28668: PPUSH
28669: CALL_OW 264
28673: PUSH
28674: LD_INT 6
28676: PUSH
28677: LD_INT 46
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: IN
28684: IFFALSE 28705
// points := [ 32 , 120 , 70 ] ;
28686: LD_ADDR_VAR 0 9
28690: PUSH
28691: LD_INT 32
28693: PUSH
28694: LD_INT 120
28696: PUSH
28697: LD_INT 70
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: LIST
28704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28705: LD_VAR 0 6
28709: PPUSH
28710: CALL_OW 264
28714: PUSH
28715: LD_INT 7
28717: PUSH
28718: LD_INT 28
28720: PUSH
28721: LD_INT 45
28723: PUSH
28724: LD_INT 92
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: IN
28733: IFFALSE 28754
// points := [ 35 , 20 , 45 ] ;
28735: LD_ADDR_VAR 0 9
28739: PUSH
28740: LD_INT 35
28742: PUSH
28743: LD_INT 20
28745: PUSH
28746: LD_INT 45
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: LIST
28753: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28754: LD_VAR 0 6
28758: PPUSH
28759: CALL_OW 264
28763: PUSH
28764: LD_INT 47
28766: PUSH
28767: EMPTY
28768: LIST
28769: IN
28770: IFFALSE 28791
// points := [ 67 , 45 , 75 ] ;
28772: LD_ADDR_VAR 0 9
28776: PUSH
28777: LD_INT 67
28779: PUSH
28780: LD_INT 45
28782: PUSH
28783: LD_INT 75
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28791: LD_VAR 0 6
28795: PPUSH
28796: CALL_OW 264
28800: PUSH
28801: LD_INT 26
28803: PUSH
28804: EMPTY
28805: LIST
28806: IN
28807: IFFALSE 28828
// points := [ 120 , 30 , 80 ] ;
28809: LD_ADDR_VAR 0 9
28813: PUSH
28814: LD_INT 120
28816: PUSH
28817: LD_INT 30
28819: PUSH
28820: LD_INT 80
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28828: LD_VAR 0 6
28832: PPUSH
28833: CALL_OW 264
28837: PUSH
28838: LD_INT 22
28840: PUSH
28841: EMPTY
28842: LIST
28843: IN
28844: IFFALSE 28865
// points := [ 40 , 1 , 1 ] ;
28846: LD_ADDR_VAR 0 9
28850: PUSH
28851: LD_INT 40
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: LD_INT 1
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: LIST
28864: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28865: LD_VAR 0 6
28869: PPUSH
28870: CALL_OW 264
28874: PUSH
28875: LD_INT 29
28877: PUSH
28878: EMPTY
28879: LIST
28880: IN
28881: IFFALSE 28902
// points := [ 70 , 200 , 400 ] ;
28883: LD_ADDR_VAR 0 9
28887: PUSH
28888: LD_INT 70
28890: PUSH
28891: LD_INT 200
28893: PUSH
28894: LD_INT 400
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: LIST
28901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28902: LD_VAR 0 6
28906: PPUSH
28907: CALL_OW 264
28911: PUSH
28912: LD_INT 14
28914: PUSH
28915: LD_INT 53
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: IN
28922: IFFALSE 28943
// points := [ 40 , 10 , 20 ] ;
28924: LD_ADDR_VAR 0 9
28928: PUSH
28929: LD_INT 40
28931: PUSH
28932: LD_INT 10
28934: PUSH
28935: LD_INT 20
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: LIST
28942: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28943: LD_VAR 0 6
28947: PPUSH
28948: CALL_OW 264
28952: PUSH
28953: LD_INT 9
28955: PUSH
28956: EMPTY
28957: LIST
28958: IN
28959: IFFALSE 28980
// points := [ 5 , 70 , 20 ] ;
28961: LD_ADDR_VAR 0 9
28965: PUSH
28966: LD_INT 5
28968: PUSH
28969: LD_INT 70
28971: PUSH
28972: LD_INT 20
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: LIST
28979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28980: LD_VAR 0 6
28984: PPUSH
28985: CALL_OW 264
28989: PUSH
28990: LD_INT 10
28992: PUSH
28993: EMPTY
28994: LIST
28995: IN
28996: IFFALSE 29017
// points := [ 35 , 110 , 70 ] ;
28998: LD_ADDR_VAR 0 9
29002: PUSH
29003: LD_INT 35
29005: PUSH
29006: LD_INT 110
29008: PUSH
29009: LD_INT 70
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: LIST
29016: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29017: LD_VAR 0 6
29021: PPUSH
29022: CALL_OW 265
29026: PUSH
29027: LD_INT 25
29029: EQUAL
29030: IFFALSE 29051
// points := [ 80 , 65 , 100 ] ;
29032: LD_ADDR_VAR 0 9
29036: PUSH
29037: LD_INT 80
29039: PUSH
29040: LD_INT 65
29042: PUSH
29043: LD_INT 100
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29051: LD_VAR 0 6
29055: PPUSH
29056: CALL_OW 263
29060: PUSH
29061: LD_INT 1
29063: EQUAL
29064: IFFALSE 29099
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29066: LD_ADDR_VAR 0 10
29070: PUSH
29071: LD_VAR 0 10
29075: PUSH
29076: LD_VAR 0 6
29080: PPUSH
29081: CALL_OW 311
29085: PPUSH
29086: LD_INT 3
29088: PPUSH
29089: CALL_OW 259
29093: PUSH
29094: LD_INT 4
29096: MUL
29097: MUL
29098: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29099: LD_VAR 0 6
29103: PPUSH
29104: CALL_OW 263
29108: PUSH
29109: LD_INT 2
29111: EQUAL
29112: IFFALSE 29163
// begin j := IsControledBy ( i ) ;
29114: LD_ADDR_VAR 0 7
29118: PUSH
29119: LD_VAR 0 6
29123: PPUSH
29124: CALL_OW 312
29128: ST_TO_ADDR
// if j then
29129: LD_VAR 0 7
29133: IFFALSE 29163
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29135: LD_ADDR_VAR 0 10
29139: PUSH
29140: LD_VAR 0 10
29144: PUSH
29145: LD_VAR 0 7
29149: PPUSH
29150: LD_INT 3
29152: PPUSH
29153: CALL_OW 259
29157: PUSH
29158: LD_INT 3
29160: MUL
29161: MUL
29162: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29163: LD_VAR 0 6
29167: PPUSH
29168: CALL_OW 264
29172: PUSH
29173: LD_INT 5
29175: PUSH
29176: LD_INT 6
29178: PUSH
29179: LD_INT 46
29181: PUSH
29182: LD_INT 44
29184: PUSH
29185: LD_INT 47
29187: PUSH
29188: LD_INT 45
29190: PUSH
29191: LD_INT 28
29193: PUSH
29194: LD_INT 7
29196: PUSH
29197: LD_INT 27
29199: PUSH
29200: LD_INT 29
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: IN
29215: PUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: LD_INT 52
29223: PPUSH
29224: CALL_OW 321
29228: PUSH
29229: LD_INT 2
29231: EQUAL
29232: AND
29233: IFFALSE 29250
// bpoints := bpoints * 1.2 ;
29235: LD_ADDR_VAR 0 10
29239: PUSH
29240: LD_VAR 0 10
29244: PUSH
29245: LD_REAL  1.20000000000000E+0000
29248: MUL
29249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29250: LD_VAR 0 6
29254: PPUSH
29255: CALL_OW 264
29259: PUSH
29260: LD_INT 6
29262: PUSH
29263: LD_INT 46
29265: PUSH
29266: LD_INT 47
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: LIST
29273: IN
29274: IFFALSE 29291
// bpoints := bpoints * 1.2 ;
29276: LD_ADDR_VAR 0 10
29280: PUSH
29281: LD_VAR 0 10
29285: PUSH
29286: LD_REAL  1.20000000000000E+0000
29289: MUL
29290: ST_TO_ADDR
// end ; unit_building :
29291: GO 29305
29293: LD_INT 3
29295: DOUBLE
29296: EQUAL
29297: IFTRUE 29301
29299: GO 29304
29301: POP
// ; end ;
29302: GO 29305
29304: POP
// for j = 1 to 3 do
29305: LD_ADDR_VAR 0 7
29309: PUSH
29310: DOUBLE
29311: LD_INT 1
29313: DEC
29314: ST_TO_ADDR
29315: LD_INT 3
29317: PUSH
29318: FOR_TO
29319: IFFALSE 29372
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29321: LD_ADDR_VAR 0 5
29325: PUSH
29326: LD_VAR 0 5
29330: PPUSH
29331: LD_VAR 0 7
29335: PPUSH
29336: LD_VAR 0 5
29340: PUSH
29341: LD_VAR 0 7
29345: ARRAY
29346: PUSH
29347: LD_VAR 0 9
29351: PUSH
29352: LD_VAR 0 7
29356: ARRAY
29357: PUSH
29358: LD_VAR 0 10
29362: MUL
29363: PLUS
29364: PPUSH
29365: CALL_OW 1
29369: ST_TO_ADDR
29370: GO 29318
29372: POP
29373: POP
// end ;
29374: GO 27853
29376: POP
29377: POP
// result := Replace ( result , 4 , tmp ) ;
29378: LD_ADDR_VAR 0 5
29382: PUSH
29383: LD_VAR 0 5
29387: PPUSH
29388: LD_INT 4
29390: PPUSH
29391: LD_VAR 0 8
29395: PPUSH
29396: CALL_OW 1
29400: ST_TO_ADDR
// end ;
29401: LD_VAR 0 5
29405: RET
// export function DangerAtRange ( unit , range ) ; begin
29406: LD_INT 0
29408: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29409: LD_ADDR_VAR 0 3
29413: PUSH
29414: LD_VAR 0 1
29418: PPUSH
29419: CALL_OW 255
29423: PPUSH
29424: LD_VAR 0 1
29428: PPUSH
29429: CALL_OW 250
29433: PPUSH
29434: LD_VAR 0 1
29438: PPUSH
29439: CALL_OW 251
29443: PPUSH
29444: LD_VAR 0 2
29448: PPUSH
29449: CALL 27705 0 4
29453: ST_TO_ADDR
// end ;
29454: LD_VAR 0 3
29458: RET
// export function DangerInArea ( side , area ) ; begin
29459: LD_INT 0
29461: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29462: LD_ADDR_VAR 0 3
29466: PUSH
29467: LD_VAR 0 2
29471: PPUSH
29472: LD_INT 81
29474: PUSH
29475: LD_VAR 0 1
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PPUSH
29484: CALL_OW 70
29488: ST_TO_ADDR
// end ;
29489: LD_VAR 0 3
29493: RET
// export function IsExtension ( b ) ; begin
29494: LD_INT 0
29496: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29497: LD_ADDR_VAR 0 2
29501: PUSH
29502: LD_VAR 0 1
29506: PUSH
29507: LD_INT 23
29509: PUSH
29510: LD_INT 20
29512: PUSH
29513: LD_INT 22
29515: PUSH
29516: LD_INT 17
29518: PUSH
29519: LD_INT 24
29521: PUSH
29522: LD_INT 21
29524: PUSH
29525: LD_INT 19
29527: PUSH
29528: LD_INT 16
29530: PUSH
29531: LD_INT 25
29533: PUSH
29534: LD_INT 18
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: IN
29549: ST_TO_ADDR
// end ;
29550: LD_VAR 0 2
29554: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29555: LD_INT 0
29557: PPUSH
29558: PPUSH
29559: PPUSH
// result := [ ] ;
29560: LD_ADDR_VAR 0 4
29564: PUSH
29565: EMPTY
29566: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29567: LD_ADDR_VAR 0 5
29571: PUSH
29572: LD_VAR 0 2
29576: PPUSH
29577: LD_INT 21
29579: PUSH
29580: LD_INT 3
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PPUSH
29587: CALL_OW 70
29591: ST_TO_ADDR
// if not tmp then
29592: LD_VAR 0 5
29596: NOT
29597: IFFALSE 29601
// exit ;
29599: GO 29665
// if checkLink then
29601: LD_VAR 0 3
29605: IFFALSE 29655
// begin for i in tmp do
29607: LD_ADDR_VAR 0 6
29611: PUSH
29612: LD_VAR 0 5
29616: PUSH
29617: FOR_IN
29618: IFFALSE 29653
// if GetBase ( i ) <> base then
29620: LD_VAR 0 6
29624: PPUSH
29625: CALL_OW 274
29629: PUSH
29630: LD_VAR 0 1
29634: NONEQUAL
29635: IFFALSE 29651
// ComLinkToBase ( base , i ) ;
29637: LD_VAR 0 1
29641: PPUSH
29642: LD_VAR 0 6
29646: PPUSH
29647: CALL_OW 169
29651: GO 29617
29653: POP
29654: POP
// end ; result := tmp ;
29655: LD_ADDR_VAR 0 4
29659: PUSH
29660: LD_VAR 0 5
29664: ST_TO_ADDR
// end ;
29665: LD_VAR 0 4
29669: RET
// export function ComComplete ( units , b ) ; var i ; begin
29670: LD_INT 0
29672: PPUSH
29673: PPUSH
// if not units then
29674: LD_VAR 0 1
29678: NOT
29679: IFFALSE 29683
// exit ;
29681: GO 29773
// for i in units do
29683: LD_ADDR_VAR 0 4
29687: PUSH
29688: LD_VAR 0 1
29692: PUSH
29693: FOR_IN
29694: IFFALSE 29771
// if BuildingStatus ( b ) = bs_build then
29696: LD_VAR 0 2
29700: PPUSH
29701: CALL_OW 461
29705: PUSH
29706: LD_INT 1
29708: EQUAL
29709: IFFALSE 29769
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29711: LD_VAR 0 4
29715: PPUSH
29716: LD_STRING h
29718: PUSH
29719: LD_VAR 0 2
29723: PPUSH
29724: CALL_OW 250
29728: PUSH
29729: LD_VAR 0 2
29733: PPUSH
29734: CALL_OW 251
29738: PUSH
29739: LD_VAR 0 2
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: LD_INT 0
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: PUSH
29762: EMPTY
29763: LIST
29764: PPUSH
29765: CALL_OW 446
29769: GO 29693
29771: POP
29772: POP
// end ;
29773: LD_VAR 0 3
29777: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29778: LD_INT 0
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29786: LD_VAR 0 1
29790: NOT
29791: PUSH
29792: LD_VAR 0 1
29796: PPUSH
29797: CALL_OW 263
29801: PUSH
29802: LD_INT 2
29804: NONEQUAL
29805: OR
29806: IFFALSE 29810
// exit ;
29808: GO 30126
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29810: LD_ADDR_VAR 0 6
29814: PUSH
29815: LD_INT 22
29817: PUSH
29818: LD_VAR 0 1
29822: PPUSH
29823: CALL_OW 255
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: LD_INT 30
29837: PUSH
29838: LD_INT 36
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 34
29847: PUSH
29848: LD_INT 31
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PPUSH
29864: CALL_OW 69
29868: ST_TO_ADDR
// if not tmp then
29869: LD_VAR 0 6
29873: NOT
29874: IFFALSE 29878
// exit ;
29876: GO 30126
// result := [ ] ;
29878: LD_ADDR_VAR 0 2
29882: PUSH
29883: EMPTY
29884: ST_TO_ADDR
// for i in tmp do
29885: LD_ADDR_VAR 0 3
29889: PUSH
29890: LD_VAR 0 6
29894: PUSH
29895: FOR_IN
29896: IFFALSE 29967
// begin t := UnitsInside ( i ) ;
29898: LD_ADDR_VAR 0 4
29902: PUSH
29903: LD_VAR 0 3
29907: PPUSH
29908: CALL_OW 313
29912: ST_TO_ADDR
// if t then
29913: LD_VAR 0 4
29917: IFFALSE 29965
// for j in t do
29919: LD_ADDR_VAR 0 7
29923: PUSH
29924: LD_VAR 0 4
29928: PUSH
29929: FOR_IN
29930: IFFALSE 29963
// result := Replace ( result , result + 1 , j ) ;
29932: LD_ADDR_VAR 0 2
29936: PUSH
29937: LD_VAR 0 2
29941: PPUSH
29942: LD_VAR 0 2
29946: PUSH
29947: LD_INT 1
29949: PLUS
29950: PPUSH
29951: LD_VAR 0 7
29955: PPUSH
29956: CALL_OW 1
29960: ST_TO_ADDR
29961: GO 29929
29963: POP
29964: POP
// end ;
29965: GO 29895
29967: POP
29968: POP
// if not result then
29969: LD_VAR 0 2
29973: NOT
29974: IFFALSE 29978
// exit ;
29976: GO 30126
// mech := result [ 1 ] ;
29978: LD_ADDR_VAR 0 5
29982: PUSH
29983: LD_VAR 0 2
29987: PUSH
29988: LD_INT 1
29990: ARRAY
29991: ST_TO_ADDR
// if result > 1 then
29992: LD_VAR 0 2
29996: PUSH
29997: LD_INT 1
29999: GREATER
30000: IFFALSE 30112
// begin for i = 2 to result do
30002: LD_ADDR_VAR 0 3
30006: PUSH
30007: DOUBLE
30008: LD_INT 2
30010: DEC
30011: ST_TO_ADDR
30012: LD_VAR 0 2
30016: PUSH
30017: FOR_TO
30018: IFFALSE 30110
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30020: LD_ADDR_VAR 0 4
30024: PUSH
30025: LD_VAR 0 2
30029: PUSH
30030: LD_VAR 0 3
30034: ARRAY
30035: PPUSH
30036: LD_INT 3
30038: PPUSH
30039: CALL_OW 259
30043: PUSH
30044: LD_VAR 0 2
30048: PUSH
30049: LD_VAR 0 3
30053: ARRAY
30054: PPUSH
30055: CALL_OW 432
30059: MINUS
30060: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30061: LD_VAR 0 4
30065: PUSH
30066: LD_VAR 0 5
30070: PPUSH
30071: LD_INT 3
30073: PPUSH
30074: CALL_OW 259
30078: PUSH
30079: LD_VAR 0 5
30083: PPUSH
30084: CALL_OW 432
30088: MINUS
30089: GREATEREQUAL
30090: IFFALSE 30108
// mech := result [ i ] ;
30092: LD_ADDR_VAR 0 5
30096: PUSH
30097: LD_VAR 0 2
30101: PUSH
30102: LD_VAR 0 3
30106: ARRAY
30107: ST_TO_ADDR
// end ;
30108: GO 30017
30110: POP
30111: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30112: LD_VAR 0 1
30116: PPUSH
30117: LD_VAR 0 5
30121: PPUSH
30122: CALL_OW 135
// end ;
30126: LD_VAR 0 2
30130: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30131: LD_INT 0
30133: PPUSH
30134: PPUSH
30135: PPUSH
30136: PPUSH
30137: PPUSH
30138: PPUSH
30139: PPUSH
30140: PPUSH
30141: PPUSH
30142: PPUSH
30143: PPUSH
30144: PPUSH
30145: PPUSH
// result := [ ] ;
30146: LD_ADDR_VAR 0 7
30150: PUSH
30151: EMPTY
30152: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30153: LD_VAR 0 1
30157: PPUSH
30158: CALL_OW 266
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: IN
30173: NOT
30174: IFFALSE 30178
// exit ;
30176: GO 31812
// if name then
30178: LD_VAR 0 3
30182: IFFALSE 30198
// SetBName ( base_dep , name ) ;
30184: LD_VAR 0 1
30188: PPUSH
30189: LD_VAR 0 3
30193: PPUSH
30194: CALL_OW 500
// base := GetBase ( base_dep ) ;
30198: LD_ADDR_VAR 0 15
30202: PUSH
30203: LD_VAR 0 1
30207: PPUSH
30208: CALL_OW 274
30212: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30213: LD_ADDR_VAR 0 16
30217: PUSH
30218: LD_VAR 0 1
30222: PPUSH
30223: CALL_OW 255
30227: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30228: LD_ADDR_VAR 0 17
30232: PUSH
30233: LD_VAR 0 1
30237: PPUSH
30238: CALL_OW 248
30242: ST_TO_ADDR
// if sources then
30243: LD_VAR 0 5
30247: IFFALSE 30294
// for i = 1 to 3 do
30249: LD_ADDR_VAR 0 8
30253: PUSH
30254: DOUBLE
30255: LD_INT 1
30257: DEC
30258: ST_TO_ADDR
30259: LD_INT 3
30261: PUSH
30262: FOR_TO
30263: IFFALSE 30292
// AddResourceType ( base , i , sources [ i ] ) ;
30265: LD_VAR 0 15
30269: PPUSH
30270: LD_VAR 0 8
30274: PPUSH
30275: LD_VAR 0 5
30279: PUSH
30280: LD_VAR 0 8
30284: ARRAY
30285: PPUSH
30286: CALL_OW 276
30290: GO 30262
30292: POP
30293: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30294: LD_ADDR_VAR 0 18
30298: PUSH
30299: LD_VAR 0 15
30303: PPUSH
30304: LD_VAR 0 2
30308: PPUSH
30309: LD_INT 1
30311: PPUSH
30312: CALL 29555 0 3
30316: ST_TO_ADDR
// InitHc ;
30317: CALL_OW 19
// InitUc ;
30321: CALL_OW 18
// uc_side := side ;
30325: LD_ADDR_OWVAR 20
30329: PUSH
30330: LD_VAR 0 16
30334: ST_TO_ADDR
// uc_nation := nation ;
30335: LD_ADDR_OWVAR 21
30339: PUSH
30340: LD_VAR 0 17
30344: ST_TO_ADDR
// if buildings then
30345: LD_VAR 0 18
30349: IFFALSE 31671
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30351: LD_ADDR_VAR 0 19
30355: PUSH
30356: LD_VAR 0 18
30360: PPUSH
30361: LD_INT 2
30363: PUSH
30364: LD_INT 30
30366: PUSH
30367: LD_INT 29
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 30
30376: PUSH
30377: LD_INT 30
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: LIST
30388: PPUSH
30389: CALL_OW 72
30393: ST_TO_ADDR
// if tmp then
30394: LD_VAR 0 19
30398: IFFALSE 30446
// for i in tmp do
30400: LD_ADDR_VAR 0 8
30404: PUSH
30405: LD_VAR 0 19
30409: PUSH
30410: FOR_IN
30411: IFFALSE 30444
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30413: LD_VAR 0 8
30417: PPUSH
30418: CALL_OW 250
30422: PPUSH
30423: LD_VAR 0 8
30427: PPUSH
30428: CALL_OW 251
30432: PPUSH
30433: LD_VAR 0 16
30437: PPUSH
30438: CALL_OW 441
30442: GO 30410
30444: POP
30445: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30446: LD_VAR 0 18
30450: PPUSH
30451: LD_INT 2
30453: PUSH
30454: LD_INT 30
30456: PUSH
30457: LD_INT 32
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 30
30466: PUSH
30467: LD_INT 33
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: LIST
30478: PPUSH
30479: CALL_OW 72
30483: IFFALSE 30571
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30485: LD_ADDR_VAR 0 8
30489: PUSH
30490: LD_VAR 0 18
30494: PPUSH
30495: LD_INT 2
30497: PUSH
30498: LD_INT 30
30500: PUSH
30501: LD_INT 32
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 30
30510: PUSH
30511: LD_INT 33
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: LIST
30522: PPUSH
30523: CALL_OW 72
30527: PUSH
30528: FOR_IN
30529: IFFALSE 30569
// begin if not GetBWeapon ( i ) then
30531: LD_VAR 0 8
30535: PPUSH
30536: CALL_OW 269
30540: NOT
30541: IFFALSE 30567
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30543: LD_VAR 0 8
30547: PPUSH
30548: LD_VAR 0 8
30552: PPUSH
30553: LD_VAR 0 2
30557: PPUSH
30558: CALL 31817 0 2
30562: PPUSH
30563: CALL_OW 431
// end ;
30567: GO 30528
30569: POP
30570: POP
// end ; for i = 1 to personel do
30571: LD_ADDR_VAR 0 8
30575: PUSH
30576: DOUBLE
30577: LD_INT 1
30579: DEC
30580: ST_TO_ADDR
30581: LD_VAR 0 6
30585: PUSH
30586: FOR_TO
30587: IFFALSE 31651
// begin if i > 4 then
30589: LD_VAR 0 8
30593: PUSH
30594: LD_INT 4
30596: GREATER
30597: IFFALSE 30601
// break ;
30599: GO 31651
// case i of 1 :
30601: LD_VAR 0 8
30605: PUSH
30606: LD_INT 1
30608: DOUBLE
30609: EQUAL
30610: IFTRUE 30614
30612: GO 30694
30614: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30615: LD_ADDR_VAR 0 12
30619: PUSH
30620: LD_VAR 0 18
30624: PPUSH
30625: LD_INT 22
30627: PUSH
30628: LD_VAR 0 16
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 58
30639: PUSH
30640: EMPTY
30641: LIST
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: LD_INT 30
30648: PUSH
30649: LD_INT 32
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 30
30658: PUSH
30659: LD_INT 4
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 30
30668: PUSH
30669: LD_INT 5
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: PPUSH
30687: CALL_OW 72
30691: ST_TO_ADDR
30692: GO 30916
30694: LD_INT 2
30696: DOUBLE
30697: EQUAL
30698: IFTRUE 30702
30700: GO 30764
30702: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30703: LD_ADDR_VAR 0 12
30707: PUSH
30708: LD_VAR 0 18
30712: PPUSH
30713: LD_INT 22
30715: PUSH
30716: LD_VAR 0 16
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 2
30727: PUSH
30728: LD_INT 30
30730: PUSH
30731: LD_INT 0
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 30
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PPUSH
30757: CALL_OW 72
30761: ST_TO_ADDR
30762: GO 30916
30764: LD_INT 3
30766: DOUBLE
30767: EQUAL
30768: IFTRUE 30772
30770: GO 30834
30772: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30773: LD_ADDR_VAR 0 12
30777: PUSH
30778: LD_VAR 0 18
30782: PPUSH
30783: LD_INT 22
30785: PUSH
30786: LD_VAR 0 16
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 2
30797: PUSH
30798: LD_INT 30
30800: PUSH
30801: LD_INT 2
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 30
30810: PUSH
30811: LD_INT 3
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: LIST
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PPUSH
30827: CALL_OW 72
30831: ST_TO_ADDR
30832: GO 30916
30834: LD_INT 4
30836: DOUBLE
30837: EQUAL
30838: IFTRUE 30842
30840: GO 30915
30842: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30843: LD_ADDR_VAR 0 12
30847: PUSH
30848: LD_VAR 0 18
30852: PPUSH
30853: LD_INT 22
30855: PUSH
30856: LD_VAR 0 16
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: LD_INT 30
30870: PUSH
30871: LD_INT 6
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 30
30880: PUSH
30881: LD_INT 7
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 30
30890: PUSH
30891: LD_INT 8
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PPUSH
30908: CALL_OW 72
30912: ST_TO_ADDR
30913: GO 30916
30915: POP
// if i = 1 then
30916: LD_VAR 0 8
30920: PUSH
30921: LD_INT 1
30923: EQUAL
30924: IFFALSE 31035
// begin tmp := [ ] ;
30926: LD_ADDR_VAR 0 19
30930: PUSH
30931: EMPTY
30932: ST_TO_ADDR
// for j in f do
30933: LD_ADDR_VAR 0 9
30937: PUSH
30938: LD_VAR 0 12
30942: PUSH
30943: FOR_IN
30944: IFFALSE 31017
// if GetBType ( j ) = b_bunker then
30946: LD_VAR 0 9
30950: PPUSH
30951: CALL_OW 266
30955: PUSH
30956: LD_INT 32
30958: EQUAL
30959: IFFALSE 30986
// tmp := Insert ( tmp , 1 , j ) else
30961: LD_ADDR_VAR 0 19
30965: PUSH
30966: LD_VAR 0 19
30970: PPUSH
30971: LD_INT 1
30973: PPUSH
30974: LD_VAR 0 9
30978: PPUSH
30979: CALL_OW 2
30983: ST_TO_ADDR
30984: GO 31015
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30986: LD_ADDR_VAR 0 19
30990: PUSH
30991: LD_VAR 0 19
30995: PPUSH
30996: LD_VAR 0 19
31000: PUSH
31001: LD_INT 1
31003: PLUS
31004: PPUSH
31005: LD_VAR 0 9
31009: PPUSH
31010: CALL_OW 2
31014: ST_TO_ADDR
31015: GO 30943
31017: POP
31018: POP
// if tmp then
31019: LD_VAR 0 19
31023: IFFALSE 31035
// f := tmp ;
31025: LD_ADDR_VAR 0 12
31029: PUSH
31030: LD_VAR 0 19
31034: ST_TO_ADDR
// end ; x := personel [ i ] ;
31035: LD_ADDR_VAR 0 13
31039: PUSH
31040: LD_VAR 0 6
31044: PUSH
31045: LD_VAR 0 8
31049: ARRAY
31050: ST_TO_ADDR
// if x = - 1 then
31051: LD_VAR 0 13
31055: PUSH
31056: LD_INT 1
31058: NEG
31059: EQUAL
31060: IFFALSE 31269
// begin for j in f do
31062: LD_ADDR_VAR 0 9
31066: PUSH
31067: LD_VAR 0 12
31071: PUSH
31072: FOR_IN
31073: IFFALSE 31265
// repeat InitHc ;
31075: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31079: LD_VAR 0 9
31083: PPUSH
31084: CALL_OW 266
31088: PUSH
31089: LD_INT 5
31091: EQUAL
31092: IFFALSE 31162
// begin if UnitsInside ( j ) < 3 then
31094: LD_VAR 0 9
31098: PPUSH
31099: CALL_OW 313
31103: PUSH
31104: LD_INT 3
31106: LESS
31107: IFFALSE 31143
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31109: LD_INT 0
31111: PPUSH
31112: LD_INT 5
31114: PUSH
31115: LD_INT 8
31117: PUSH
31118: LD_INT 9
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: LIST
31125: PUSH
31126: LD_VAR 0 17
31130: ARRAY
31131: PPUSH
31132: LD_VAR 0 4
31136: PPUSH
31137: CALL_OW 380
31141: GO 31160
// PrepareHuman ( false , i , skill ) ;
31143: LD_INT 0
31145: PPUSH
31146: LD_VAR 0 8
31150: PPUSH
31151: LD_VAR 0 4
31155: PPUSH
31156: CALL_OW 380
// end else
31160: GO 31179
// PrepareHuman ( false , i , skill ) ;
31162: LD_INT 0
31164: PPUSH
31165: LD_VAR 0 8
31169: PPUSH
31170: LD_VAR 0 4
31174: PPUSH
31175: CALL_OW 380
// un := CreateHuman ;
31179: LD_ADDR_VAR 0 14
31183: PUSH
31184: CALL_OW 44
31188: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31189: LD_ADDR_VAR 0 7
31193: PUSH
31194: LD_VAR 0 7
31198: PPUSH
31199: LD_INT 1
31201: PPUSH
31202: LD_VAR 0 14
31206: PPUSH
31207: CALL_OW 2
31211: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31212: LD_VAR 0 14
31216: PPUSH
31217: LD_VAR 0 9
31221: PPUSH
31222: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31226: LD_VAR 0 9
31230: PPUSH
31231: CALL_OW 313
31235: PUSH
31236: LD_INT 6
31238: EQUAL
31239: PUSH
31240: LD_VAR 0 9
31244: PPUSH
31245: CALL_OW 266
31249: PUSH
31250: LD_INT 32
31252: PUSH
31253: LD_INT 31
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: IN
31260: OR
31261: IFFALSE 31075
31263: GO 31072
31265: POP
31266: POP
// end else
31267: GO 31649
// for j = 1 to x do
31269: LD_ADDR_VAR 0 9
31273: PUSH
31274: DOUBLE
31275: LD_INT 1
31277: DEC
31278: ST_TO_ADDR
31279: LD_VAR 0 13
31283: PUSH
31284: FOR_TO
31285: IFFALSE 31647
// begin InitHc ;
31287: CALL_OW 19
// if not f then
31291: LD_VAR 0 12
31295: NOT
31296: IFFALSE 31385
// begin PrepareHuman ( false , i , skill ) ;
31298: LD_INT 0
31300: PPUSH
31301: LD_VAR 0 8
31305: PPUSH
31306: LD_VAR 0 4
31310: PPUSH
31311: CALL_OW 380
// un := CreateHuman ;
31315: LD_ADDR_VAR 0 14
31319: PUSH
31320: CALL_OW 44
31324: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31325: LD_ADDR_VAR 0 7
31329: PUSH
31330: LD_VAR 0 7
31334: PPUSH
31335: LD_INT 1
31337: PPUSH
31338: LD_VAR 0 14
31342: PPUSH
31343: CALL_OW 2
31347: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31348: LD_VAR 0 14
31352: PPUSH
31353: LD_VAR 0 1
31357: PPUSH
31358: CALL_OW 250
31362: PPUSH
31363: LD_VAR 0 1
31367: PPUSH
31368: CALL_OW 251
31372: PPUSH
31373: LD_INT 10
31375: PPUSH
31376: LD_INT 0
31378: PPUSH
31379: CALL_OW 50
// continue ;
31383: GO 31284
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31385: LD_VAR 0 12
31389: PUSH
31390: LD_INT 1
31392: ARRAY
31393: PPUSH
31394: CALL_OW 313
31398: PUSH
31399: LD_VAR 0 12
31403: PUSH
31404: LD_INT 1
31406: ARRAY
31407: PPUSH
31408: CALL_OW 266
31412: PUSH
31413: LD_INT 32
31415: PUSH
31416: LD_INT 31
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: IN
31423: AND
31424: PUSH
31425: LD_VAR 0 12
31429: PUSH
31430: LD_INT 1
31432: ARRAY
31433: PPUSH
31434: CALL_OW 313
31438: PUSH
31439: LD_INT 6
31441: EQUAL
31442: OR
31443: IFFALSE 31463
// f := Delete ( f , 1 ) ;
31445: LD_ADDR_VAR 0 12
31449: PUSH
31450: LD_VAR 0 12
31454: PPUSH
31455: LD_INT 1
31457: PPUSH
31458: CALL_OW 3
31462: ST_TO_ADDR
// if not f then
31463: LD_VAR 0 12
31467: NOT
31468: IFFALSE 31486
// begin x := x + 2 ;
31470: LD_ADDR_VAR 0 13
31474: PUSH
31475: LD_VAR 0 13
31479: PUSH
31480: LD_INT 2
31482: PLUS
31483: ST_TO_ADDR
// continue ;
31484: GO 31284
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31486: LD_VAR 0 12
31490: PUSH
31491: LD_INT 1
31493: ARRAY
31494: PPUSH
31495: CALL_OW 266
31499: PUSH
31500: LD_INT 5
31502: EQUAL
31503: IFFALSE 31577
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31505: LD_VAR 0 12
31509: PUSH
31510: LD_INT 1
31512: ARRAY
31513: PPUSH
31514: CALL_OW 313
31518: PUSH
31519: LD_INT 3
31521: LESS
31522: IFFALSE 31558
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31524: LD_INT 0
31526: PPUSH
31527: LD_INT 5
31529: PUSH
31530: LD_INT 8
31532: PUSH
31533: LD_INT 9
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: LIST
31540: PUSH
31541: LD_VAR 0 17
31545: ARRAY
31546: PPUSH
31547: LD_VAR 0 4
31551: PPUSH
31552: CALL_OW 380
31556: GO 31575
// PrepareHuman ( false , i , skill ) ;
31558: LD_INT 0
31560: PPUSH
31561: LD_VAR 0 8
31565: PPUSH
31566: LD_VAR 0 4
31570: PPUSH
31571: CALL_OW 380
// end else
31575: GO 31594
// PrepareHuman ( false , i , skill ) ;
31577: LD_INT 0
31579: PPUSH
31580: LD_VAR 0 8
31584: PPUSH
31585: LD_VAR 0 4
31589: PPUSH
31590: CALL_OW 380
// un := CreateHuman ;
31594: LD_ADDR_VAR 0 14
31598: PUSH
31599: CALL_OW 44
31603: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31604: LD_ADDR_VAR 0 7
31608: PUSH
31609: LD_VAR 0 7
31613: PPUSH
31614: LD_INT 1
31616: PPUSH
31617: LD_VAR 0 14
31621: PPUSH
31622: CALL_OW 2
31626: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31627: LD_VAR 0 14
31631: PPUSH
31632: LD_VAR 0 12
31636: PUSH
31637: LD_INT 1
31639: ARRAY
31640: PPUSH
31641: CALL_OW 52
// end ;
31645: GO 31284
31647: POP
31648: POP
// end ;
31649: GO 30586
31651: POP
31652: POP
// result := result ^ buildings ;
31653: LD_ADDR_VAR 0 7
31657: PUSH
31658: LD_VAR 0 7
31662: PUSH
31663: LD_VAR 0 18
31667: ADD
31668: ST_TO_ADDR
// end else
31669: GO 31812
// begin for i = 1 to personel do
31671: LD_ADDR_VAR 0 8
31675: PUSH
31676: DOUBLE
31677: LD_INT 1
31679: DEC
31680: ST_TO_ADDR
31681: LD_VAR 0 6
31685: PUSH
31686: FOR_TO
31687: IFFALSE 31810
// begin if i > 4 then
31689: LD_VAR 0 8
31693: PUSH
31694: LD_INT 4
31696: GREATER
31697: IFFALSE 31701
// break ;
31699: GO 31810
// x := personel [ i ] ;
31701: LD_ADDR_VAR 0 13
31705: PUSH
31706: LD_VAR 0 6
31710: PUSH
31711: LD_VAR 0 8
31715: ARRAY
31716: ST_TO_ADDR
// if x = - 1 then
31717: LD_VAR 0 13
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: EQUAL
31726: IFFALSE 31730
// continue ;
31728: GO 31686
// PrepareHuman ( false , i , skill ) ;
31730: LD_INT 0
31732: PPUSH
31733: LD_VAR 0 8
31737: PPUSH
31738: LD_VAR 0 4
31742: PPUSH
31743: CALL_OW 380
// un := CreateHuman ;
31747: LD_ADDR_VAR 0 14
31751: PUSH
31752: CALL_OW 44
31756: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31757: LD_VAR 0 14
31761: PPUSH
31762: LD_VAR 0 1
31766: PPUSH
31767: CALL_OW 250
31771: PPUSH
31772: LD_VAR 0 1
31776: PPUSH
31777: CALL_OW 251
31781: PPUSH
31782: LD_INT 10
31784: PPUSH
31785: LD_INT 0
31787: PPUSH
31788: CALL_OW 50
// result := result ^ un ;
31792: LD_ADDR_VAR 0 7
31796: PUSH
31797: LD_VAR 0 7
31801: PUSH
31802: LD_VAR 0 14
31806: ADD
31807: ST_TO_ADDR
// end ;
31808: GO 31686
31810: POP
31811: POP
// end ; end ;
31812: LD_VAR 0 7
31816: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31817: LD_INT 0
31819: PPUSH
31820: PPUSH
31821: PPUSH
31822: PPUSH
31823: PPUSH
31824: PPUSH
31825: PPUSH
31826: PPUSH
31827: PPUSH
31828: PPUSH
31829: PPUSH
31830: PPUSH
31831: PPUSH
31832: PPUSH
31833: PPUSH
31834: PPUSH
// result := false ;
31835: LD_ADDR_VAR 0 3
31839: PUSH
31840: LD_INT 0
31842: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31843: LD_VAR 0 1
31847: NOT
31848: PUSH
31849: LD_VAR 0 1
31853: PPUSH
31854: CALL_OW 266
31858: PUSH
31859: LD_INT 32
31861: PUSH
31862: LD_INT 33
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: IN
31869: NOT
31870: OR
31871: IFFALSE 31875
// exit ;
31873: GO 32984
// nat := GetNation ( tower ) ;
31875: LD_ADDR_VAR 0 12
31879: PUSH
31880: LD_VAR 0 1
31884: PPUSH
31885: CALL_OW 248
31889: ST_TO_ADDR
// side := GetSide ( tower ) ;
31890: LD_ADDR_VAR 0 16
31894: PUSH
31895: LD_VAR 0 1
31899: PPUSH
31900: CALL_OW 255
31904: ST_TO_ADDR
// x := GetX ( tower ) ;
31905: LD_ADDR_VAR 0 10
31909: PUSH
31910: LD_VAR 0 1
31914: PPUSH
31915: CALL_OW 250
31919: ST_TO_ADDR
// y := GetY ( tower ) ;
31920: LD_ADDR_VAR 0 11
31924: PUSH
31925: LD_VAR 0 1
31929: PPUSH
31930: CALL_OW 251
31934: ST_TO_ADDR
// if not x or not y then
31935: LD_VAR 0 10
31939: NOT
31940: PUSH
31941: LD_VAR 0 11
31945: NOT
31946: OR
31947: IFFALSE 31951
// exit ;
31949: GO 32984
// weapon := 0 ;
31951: LD_ADDR_VAR 0 18
31955: PUSH
31956: LD_INT 0
31958: ST_TO_ADDR
// fac_list := [ ] ;
31959: LD_ADDR_VAR 0 17
31963: PUSH
31964: EMPTY
31965: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31966: LD_ADDR_VAR 0 6
31970: PUSH
31971: LD_VAR 0 1
31975: PPUSH
31976: CALL_OW 274
31980: PPUSH
31981: LD_VAR 0 2
31985: PPUSH
31986: LD_INT 0
31988: PPUSH
31989: CALL 29555 0 3
31993: PPUSH
31994: LD_INT 30
31996: PUSH
31997: LD_INT 3
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PPUSH
32004: CALL_OW 72
32008: ST_TO_ADDR
// if not factories then
32009: LD_VAR 0 6
32013: NOT
32014: IFFALSE 32018
// exit ;
32016: GO 32984
// for i in factories do
32018: LD_ADDR_VAR 0 8
32022: PUSH
32023: LD_VAR 0 6
32027: PUSH
32028: FOR_IN
32029: IFFALSE 32054
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32031: LD_ADDR_VAR 0 17
32035: PUSH
32036: LD_VAR 0 17
32040: PUSH
32041: LD_VAR 0 8
32045: PPUSH
32046: CALL_OW 478
32050: UNION
32051: ST_TO_ADDR
32052: GO 32028
32054: POP
32055: POP
// if not fac_list then
32056: LD_VAR 0 17
32060: NOT
32061: IFFALSE 32065
// exit ;
32063: GO 32984
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32065: LD_ADDR_VAR 0 5
32069: PUSH
32070: LD_INT 4
32072: PUSH
32073: LD_INT 5
32075: PUSH
32076: LD_INT 9
32078: PUSH
32079: LD_INT 10
32081: PUSH
32082: LD_INT 6
32084: PUSH
32085: LD_INT 7
32087: PUSH
32088: LD_INT 11
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 27
32102: PUSH
32103: LD_INT 28
32105: PUSH
32106: LD_INT 26
32108: PUSH
32109: LD_INT 30
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 43
32120: PUSH
32121: LD_INT 44
32123: PUSH
32124: LD_INT 46
32126: PUSH
32127: LD_INT 45
32129: PUSH
32130: LD_INT 47
32132: PUSH
32133: LD_INT 49
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: PUSH
32149: LD_VAR 0 12
32153: ARRAY
32154: ST_TO_ADDR
// list := list isect fac_list ;
32155: LD_ADDR_VAR 0 5
32159: PUSH
32160: LD_VAR 0 5
32164: PUSH
32165: LD_VAR 0 17
32169: ISECT
32170: ST_TO_ADDR
// if not list then
32171: LD_VAR 0 5
32175: NOT
32176: IFFALSE 32180
// exit ;
32178: GO 32984
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32180: LD_VAR 0 12
32184: PUSH
32185: LD_INT 3
32187: EQUAL
32188: PUSH
32189: LD_INT 49
32191: PUSH
32192: LD_VAR 0 5
32196: IN
32197: AND
32198: PUSH
32199: LD_INT 31
32201: PPUSH
32202: LD_VAR 0 16
32206: PPUSH
32207: CALL_OW 321
32211: PUSH
32212: LD_INT 2
32214: EQUAL
32215: AND
32216: IFFALSE 32276
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32218: LD_INT 22
32220: PUSH
32221: LD_VAR 0 16
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 35
32232: PUSH
32233: LD_INT 49
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 91
32242: PUSH
32243: LD_VAR 0 1
32247: PUSH
32248: LD_INT 10
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: LIST
32260: PPUSH
32261: CALL_OW 69
32265: NOT
32266: IFFALSE 32276
// weapon := ru_time_lapser ;
32268: LD_ADDR_VAR 0 18
32272: PUSH
32273: LD_INT 49
32275: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32276: LD_VAR 0 12
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: IN
32291: PUSH
32292: LD_INT 11
32294: PUSH
32295: LD_VAR 0 5
32299: IN
32300: PUSH
32301: LD_INT 30
32303: PUSH
32304: LD_VAR 0 5
32308: IN
32309: OR
32310: AND
32311: PUSH
32312: LD_INT 6
32314: PPUSH
32315: LD_VAR 0 16
32319: PPUSH
32320: CALL_OW 321
32324: PUSH
32325: LD_INT 2
32327: EQUAL
32328: AND
32329: IFFALSE 32494
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32331: LD_INT 22
32333: PUSH
32334: LD_VAR 0 16
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: LD_INT 35
32348: PUSH
32349: LD_INT 11
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 35
32358: PUSH
32359: LD_INT 30
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 91
32373: PUSH
32374: LD_VAR 0 1
32378: PUSH
32379: LD_INT 18
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: PPUSH
32392: CALL_OW 69
32396: NOT
32397: PUSH
32398: LD_INT 22
32400: PUSH
32401: LD_VAR 0 16
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: LD_INT 30
32415: PUSH
32416: LD_INT 32
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 30
32425: PUSH
32426: LD_INT 33
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 91
32440: PUSH
32441: LD_VAR 0 1
32445: PUSH
32446: LD_INT 12
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: LIST
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: LIST
32458: PUSH
32459: EMPTY
32460: LIST
32461: PPUSH
32462: CALL_OW 69
32466: PUSH
32467: LD_INT 2
32469: GREATER
32470: AND
32471: IFFALSE 32494
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32473: LD_ADDR_VAR 0 18
32477: PUSH
32478: LD_INT 11
32480: PUSH
32481: LD_INT 30
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_VAR 0 12
32492: ARRAY
32493: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32494: LD_VAR 0 18
32498: NOT
32499: PUSH
32500: LD_INT 40
32502: PPUSH
32503: LD_VAR 0 16
32507: PPUSH
32508: CALL_OW 321
32512: PUSH
32513: LD_INT 2
32515: EQUAL
32516: AND
32517: PUSH
32518: LD_INT 7
32520: PUSH
32521: LD_VAR 0 5
32525: IN
32526: PUSH
32527: LD_INT 28
32529: PUSH
32530: LD_VAR 0 5
32534: IN
32535: OR
32536: PUSH
32537: LD_INT 45
32539: PUSH
32540: LD_VAR 0 5
32544: IN
32545: OR
32546: AND
32547: IFFALSE 32801
// begin hex := GetHexInfo ( x , y ) ;
32549: LD_ADDR_VAR 0 4
32553: PUSH
32554: LD_VAR 0 10
32558: PPUSH
32559: LD_VAR 0 11
32563: PPUSH
32564: CALL_OW 546
32568: ST_TO_ADDR
// if hex [ 1 ] then
32569: LD_VAR 0 4
32573: PUSH
32574: LD_INT 1
32576: ARRAY
32577: IFFALSE 32581
// exit ;
32579: GO 32984
// height := hex [ 2 ] ;
32581: LD_ADDR_VAR 0 15
32585: PUSH
32586: LD_VAR 0 4
32590: PUSH
32591: LD_INT 2
32593: ARRAY
32594: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32595: LD_ADDR_VAR 0 14
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: LD_INT 2
32605: PUSH
32606: LD_INT 3
32608: PUSH
32609: LD_INT 5
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: ST_TO_ADDR
// for i in tmp do
32618: LD_ADDR_VAR 0 8
32622: PUSH
32623: LD_VAR 0 14
32627: PUSH
32628: FOR_IN
32629: IFFALSE 32799
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32631: LD_ADDR_VAR 0 9
32635: PUSH
32636: LD_VAR 0 10
32640: PPUSH
32641: LD_VAR 0 8
32645: PPUSH
32646: LD_INT 5
32648: PPUSH
32649: CALL_OW 272
32653: PUSH
32654: LD_VAR 0 11
32658: PPUSH
32659: LD_VAR 0 8
32663: PPUSH
32664: LD_INT 5
32666: PPUSH
32667: CALL_OW 273
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32676: LD_VAR 0 9
32680: PUSH
32681: LD_INT 1
32683: ARRAY
32684: PPUSH
32685: LD_VAR 0 9
32689: PUSH
32690: LD_INT 2
32692: ARRAY
32693: PPUSH
32694: CALL_OW 488
32698: IFFALSE 32797
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32700: LD_ADDR_VAR 0 4
32704: PUSH
32705: LD_VAR 0 9
32709: PUSH
32710: LD_INT 1
32712: ARRAY
32713: PPUSH
32714: LD_VAR 0 9
32718: PUSH
32719: LD_INT 2
32721: ARRAY
32722: PPUSH
32723: CALL_OW 546
32727: ST_TO_ADDR
// if hex [ 1 ] then
32728: LD_VAR 0 4
32732: PUSH
32733: LD_INT 1
32735: ARRAY
32736: IFFALSE 32740
// continue ;
32738: GO 32628
// h := hex [ 2 ] ;
32740: LD_ADDR_VAR 0 13
32744: PUSH
32745: LD_VAR 0 4
32749: PUSH
32750: LD_INT 2
32752: ARRAY
32753: ST_TO_ADDR
// if h + 7 < height then
32754: LD_VAR 0 13
32758: PUSH
32759: LD_INT 7
32761: PLUS
32762: PUSH
32763: LD_VAR 0 15
32767: LESS
32768: IFFALSE 32797
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32770: LD_ADDR_VAR 0 18
32774: PUSH
32775: LD_INT 7
32777: PUSH
32778: LD_INT 28
32780: PUSH
32781: LD_INT 45
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: PUSH
32789: LD_VAR 0 12
32793: ARRAY
32794: ST_TO_ADDR
// break ;
32795: GO 32799
// end ; end ; end ;
32797: GO 32628
32799: POP
32800: POP
// end ; if not weapon then
32801: LD_VAR 0 18
32805: NOT
32806: IFFALSE 32866
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32808: LD_ADDR_VAR 0 5
32812: PUSH
32813: LD_VAR 0 5
32817: PUSH
32818: LD_INT 11
32820: PUSH
32821: LD_INT 30
32823: PUSH
32824: LD_INT 49
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: DIFF
32832: ST_TO_ADDR
// if not list then
32833: LD_VAR 0 5
32837: NOT
32838: IFFALSE 32842
// exit ;
32840: GO 32984
// weapon := list [ rand ( 1 , list ) ] ;
32842: LD_ADDR_VAR 0 18
32846: PUSH
32847: LD_VAR 0 5
32851: PUSH
32852: LD_INT 1
32854: PPUSH
32855: LD_VAR 0 5
32859: PPUSH
32860: CALL_OW 12
32864: ARRAY
32865: ST_TO_ADDR
// end ; if weapon then
32866: LD_VAR 0 18
32870: IFFALSE 32984
// begin tmp := CostOfWeapon ( weapon ) ;
32872: LD_ADDR_VAR 0 14
32876: PUSH
32877: LD_VAR 0 18
32881: PPUSH
32882: CALL_OW 451
32886: ST_TO_ADDR
// j := GetBase ( tower ) ;
32887: LD_ADDR_VAR 0 9
32891: PUSH
32892: LD_VAR 0 1
32896: PPUSH
32897: CALL_OW 274
32901: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32902: LD_VAR 0 9
32906: PPUSH
32907: LD_INT 1
32909: PPUSH
32910: CALL_OW 275
32914: PUSH
32915: LD_VAR 0 14
32919: PUSH
32920: LD_INT 1
32922: ARRAY
32923: GREATEREQUAL
32924: PUSH
32925: LD_VAR 0 9
32929: PPUSH
32930: LD_INT 2
32932: PPUSH
32933: CALL_OW 275
32937: PUSH
32938: LD_VAR 0 14
32942: PUSH
32943: LD_INT 2
32945: ARRAY
32946: GREATEREQUAL
32947: AND
32948: PUSH
32949: LD_VAR 0 9
32953: PPUSH
32954: LD_INT 3
32956: PPUSH
32957: CALL_OW 275
32961: PUSH
32962: LD_VAR 0 14
32966: PUSH
32967: LD_INT 3
32969: ARRAY
32970: GREATEREQUAL
32971: AND
32972: IFFALSE 32984
// result := weapon ;
32974: LD_ADDR_VAR 0 3
32978: PUSH
32979: LD_VAR 0 18
32983: ST_TO_ADDR
// end ; end ;
32984: LD_VAR 0 3
32988: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32989: LD_INT 0
32991: PPUSH
32992: PPUSH
// result := true ;
32993: LD_ADDR_VAR 0 3
32997: PUSH
32998: LD_INT 1
33000: ST_TO_ADDR
// if array1 = array2 then
33001: LD_VAR 0 1
33005: PUSH
33006: LD_VAR 0 2
33010: EQUAL
33011: IFFALSE 33071
// begin for i = 1 to array1 do
33013: LD_ADDR_VAR 0 4
33017: PUSH
33018: DOUBLE
33019: LD_INT 1
33021: DEC
33022: ST_TO_ADDR
33023: LD_VAR 0 1
33027: PUSH
33028: FOR_TO
33029: IFFALSE 33067
// if array1 [ i ] <> array2 [ i ] then
33031: LD_VAR 0 1
33035: PUSH
33036: LD_VAR 0 4
33040: ARRAY
33041: PUSH
33042: LD_VAR 0 2
33046: PUSH
33047: LD_VAR 0 4
33051: ARRAY
33052: NONEQUAL
33053: IFFALSE 33065
// begin result := false ;
33055: LD_ADDR_VAR 0 3
33059: PUSH
33060: LD_INT 0
33062: ST_TO_ADDR
// break ;
33063: GO 33067
// end ;
33065: GO 33028
33067: POP
33068: POP
// end else
33069: GO 33079
// result := false ;
33071: LD_ADDR_VAR 0 3
33075: PUSH
33076: LD_INT 0
33078: ST_TO_ADDR
// end ;
33079: LD_VAR 0 3
33083: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33084: LD_INT 0
33086: PPUSH
33087: PPUSH
// if not array1 or not array2 then
33088: LD_VAR 0 1
33092: NOT
33093: PUSH
33094: LD_VAR 0 2
33098: NOT
33099: OR
33100: IFFALSE 33104
// exit ;
33102: GO 33168
// result := true ;
33104: LD_ADDR_VAR 0 3
33108: PUSH
33109: LD_INT 1
33111: ST_TO_ADDR
// for i = 1 to array1 do
33112: LD_ADDR_VAR 0 4
33116: PUSH
33117: DOUBLE
33118: LD_INT 1
33120: DEC
33121: ST_TO_ADDR
33122: LD_VAR 0 1
33126: PUSH
33127: FOR_TO
33128: IFFALSE 33166
// if array1 [ i ] <> array2 [ i ] then
33130: LD_VAR 0 1
33134: PUSH
33135: LD_VAR 0 4
33139: ARRAY
33140: PUSH
33141: LD_VAR 0 2
33145: PUSH
33146: LD_VAR 0 4
33150: ARRAY
33151: NONEQUAL
33152: IFFALSE 33164
// begin result := false ;
33154: LD_ADDR_VAR 0 3
33158: PUSH
33159: LD_INT 0
33161: ST_TO_ADDR
// break ;
33162: GO 33166
// end ;
33164: GO 33127
33166: POP
33167: POP
// end ;
33168: LD_VAR 0 3
33172: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33173: LD_INT 0
33175: PPUSH
33176: PPUSH
33177: PPUSH
// pom := GetBase ( fac ) ;
33178: LD_ADDR_VAR 0 5
33182: PUSH
33183: LD_VAR 0 1
33187: PPUSH
33188: CALL_OW 274
33192: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33193: LD_ADDR_VAR 0 4
33197: PUSH
33198: LD_VAR 0 2
33202: PUSH
33203: LD_INT 1
33205: ARRAY
33206: PPUSH
33207: LD_VAR 0 2
33211: PUSH
33212: LD_INT 2
33214: ARRAY
33215: PPUSH
33216: LD_VAR 0 2
33220: PUSH
33221: LD_INT 3
33223: ARRAY
33224: PPUSH
33225: LD_VAR 0 2
33229: PUSH
33230: LD_INT 4
33232: ARRAY
33233: PPUSH
33234: CALL_OW 449
33238: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33239: LD_ADDR_VAR 0 3
33243: PUSH
33244: LD_VAR 0 5
33248: PPUSH
33249: LD_INT 1
33251: PPUSH
33252: CALL_OW 275
33256: PUSH
33257: LD_VAR 0 4
33261: PUSH
33262: LD_INT 1
33264: ARRAY
33265: GREATEREQUAL
33266: PUSH
33267: LD_VAR 0 5
33271: PPUSH
33272: LD_INT 2
33274: PPUSH
33275: CALL_OW 275
33279: PUSH
33280: LD_VAR 0 4
33284: PUSH
33285: LD_INT 2
33287: ARRAY
33288: GREATEREQUAL
33289: AND
33290: PUSH
33291: LD_VAR 0 5
33295: PPUSH
33296: LD_INT 3
33298: PPUSH
33299: CALL_OW 275
33303: PUSH
33304: LD_VAR 0 4
33308: PUSH
33309: LD_INT 3
33311: ARRAY
33312: GREATEREQUAL
33313: AND
33314: ST_TO_ADDR
// end ;
33315: LD_VAR 0 3
33319: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33320: LD_INT 0
33322: PPUSH
33323: PPUSH
33324: PPUSH
33325: PPUSH
// pom := GetBase ( building ) ;
33326: LD_ADDR_VAR 0 3
33330: PUSH
33331: LD_VAR 0 1
33335: PPUSH
33336: CALL_OW 274
33340: ST_TO_ADDR
// if not pom then
33341: LD_VAR 0 3
33345: NOT
33346: IFFALSE 33350
// exit ;
33348: GO 33520
// btype := GetBType ( building ) ;
33350: LD_ADDR_VAR 0 5
33354: PUSH
33355: LD_VAR 0 1
33359: PPUSH
33360: CALL_OW 266
33364: ST_TO_ADDR
// if btype = b_armoury then
33365: LD_VAR 0 5
33369: PUSH
33370: LD_INT 4
33372: EQUAL
33373: IFFALSE 33383
// btype := b_barracks ;
33375: LD_ADDR_VAR 0 5
33379: PUSH
33380: LD_INT 5
33382: ST_TO_ADDR
// if btype = b_depot then
33383: LD_VAR 0 5
33387: PUSH
33388: LD_INT 0
33390: EQUAL
33391: IFFALSE 33401
// btype := b_warehouse ;
33393: LD_ADDR_VAR 0 5
33397: PUSH
33398: LD_INT 1
33400: ST_TO_ADDR
// if btype = b_workshop then
33401: LD_VAR 0 5
33405: PUSH
33406: LD_INT 2
33408: EQUAL
33409: IFFALSE 33419
// btype := b_factory ;
33411: LD_ADDR_VAR 0 5
33415: PUSH
33416: LD_INT 3
33418: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33419: LD_ADDR_VAR 0 4
33423: PUSH
33424: LD_VAR 0 5
33428: PPUSH
33429: LD_VAR 0 1
33433: PPUSH
33434: CALL_OW 248
33438: PPUSH
33439: CALL_OW 450
33443: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33444: LD_ADDR_VAR 0 2
33448: PUSH
33449: LD_VAR 0 3
33453: PPUSH
33454: LD_INT 1
33456: PPUSH
33457: CALL_OW 275
33461: PUSH
33462: LD_VAR 0 4
33466: PUSH
33467: LD_INT 1
33469: ARRAY
33470: GREATEREQUAL
33471: PUSH
33472: LD_VAR 0 3
33476: PPUSH
33477: LD_INT 2
33479: PPUSH
33480: CALL_OW 275
33484: PUSH
33485: LD_VAR 0 4
33489: PUSH
33490: LD_INT 2
33492: ARRAY
33493: GREATEREQUAL
33494: AND
33495: PUSH
33496: LD_VAR 0 3
33500: PPUSH
33501: LD_INT 3
33503: PPUSH
33504: CALL_OW 275
33508: PUSH
33509: LD_VAR 0 4
33513: PUSH
33514: LD_INT 3
33516: ARRAY
33517: GREATEREQUAL
33518: AND
33519: ST_TO_ADDR
// end ;
33520: LD_VAR 0 2
33524: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33525: LD_INT 0
33527: PPUSH
33528: PPUSH
33529: PPUSH
// pom := GetBase ( building ) ;
33530: LD_ADDR_VAR 0 4
33534: PUSH
33535: LD_VAR 0 1
33539: PPUSH
33540: CALL_OW 274
33544: ST_TO_ADDR
// if not pom then
33545: LD_VAR 0 4
33549: NOT
33550: IFFALSE 33554
// exit ;
33552: GO 33655
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33554: LD_ADDR_VAR 0 5
33558: PUSH
33559: LD_VAR 0 2
33563: PPUSH
33564: LD_VAR 0 1
33568: PPUSH
33569: CALL_OW 248
33573: PPUSH
33574: CALL_OW 450
33578: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33579: LD_ADDR_VAR 0 3
33583: PUSH
33584: LD_VAR 0 4
33588: PPUSH
33589: LD_INT 1
33591: PPUSH
33592: CALL_OW 275
33596: PUSH
33597: LD_VAR 0 5
33601: PUSH
33602: LD_INT 1
33604: ARRAY
33605: GREATEREQUAL
33606: PUSH
33607: LD_VAR 0 4
33611: PPUSH
33612: LD_INT 2
33614: PPUSH
33615: CALL_OW 275
33619: PUSH
33620: LD_VAR 0 5
33624: PUSH
33625: LD_INT 2
33627: ARRAY
33628: GREATEREQUAL
33629: AND
33630: PUSH
33631: LD_VAR 0 4
33635: PPUSH
33636: LD_INT 3
33638: PPUSH
33639: CALL_OW 275
33643: PUSH
33644: LD_VAR 0 5
33648: PUSH
33649: LD_INT 3
33651: ARRAY
33652: GREATEREQUAL
33653: AND
33654: ST_TO_ADDR
// end ;
33655: LD_VAR 0 3
33659: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33660: LD_INT 0
33662: PPUSH
33663: PPUSH
33664: PPUSH
33665: PPUSH
33666: PPUSH
33667: PPUSH
33668: PPUSH
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
// result := false ;
33673: LD_ADDR_VAR 0 8
33677: PUSH
33678: LD_INT 0
33680: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33681: LD_VAR 0 5
33685: NOT
33686: PUSH
33687: LD_VAR 0 1
33691: NOT
33692: OR
33693: PUSH
33694: LD_VAR 0 2
33698: NOT
33699: OR
33700: PUSH
33701: LD_VAR 0 3
33705: NOT
33706: OR
33707: IFFALSE 33711
// exit ;
33709: GO 34525
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33711: LD_ADDR_VAR 0 14
33715: PUSH
33716: LD_VAR 0 1
33720: PPUSH
33721: LD_VAR 0 2
33725: PPUSH
33726: LD_VAR 0 3
33730: PPUSH
33731: LD_VAR 0 4
33735: PPUSH
33736: LD_VAR 0 5
33740: PUSH
33741: LD_INT 1
33743: ARRAY
33744: PPUSH
33745: CALL_OW 248
33749: PPUSH
33750: LD_INT 0
33752: PPUSH
33753: CALL 35758 0 6
33757: ST_TO_ADDR
// if not hexes then
33758: LD_VAR 0 14
33762: NOT
33763: IFFALSE 33767
// exit ;
33765: GO 34525
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33767: LD_ADDR_VAR 0 17
33771: PUSH
33772: LD_VAR 0 5
33776: PPUSH
33777: LD_INT 22
33779: PUSH
33780: LD_VAR 0 13
33784: PPUSH
33785: CALL_OW 255
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 2
33796: PUSH
33797: LD_INT 30
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 30
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: LIST
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PPUSH
33826: CALL_OW 72
33830: ST_TO_ADDR
// for i = 1 to hexes do
33831: LD_ADDR_VAR 0 9
33835: PUSH
33836: DOUBLE
33837: LD_INT 1
33839: DEC
33840: ST_TO_ADDR
33841: LD_VAR 0 14
33845: PUSH
33846: FOR_TO
33847: IFFALSE 34523
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33849: LD_ADDR_VAR 0 13
33853: PUSH
33854: LD_VAR 0 14
33858: PUSH
33859: LD_VAR 0 9
33863: ARRAY
33864: PUSH
33865: LD_INT 1
33867: ARRAY
33868: PPUSH
33869: LD_VAR 0 14
33873: PUSH
33874: LD_VAR 0 9
33878: ARRAY
33879: PUSH
33880: LD_INT 2
33882: ARRAY
33883: PPUSH
33884: CALL_OW 428
33888: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33889: LD_VAR 0 14
33893: PUSH
33894: LD_VAR 0 9
33898: ARRAY
33899: PUSH
33900: LD_INT 1
33902: ARRAY
33903: PPUSH
33904: LD_VAR 0 14
33908: PUSH
33909: LD_VAR 0 9
33913: ARRAY
33914: PUSH
33915: LD_INT 2
33917: ARRAY
33918: PPUSH
33919: CALL_OW 351
33923: PUSH
33924: LD_VAR 0 14
33928: PUSH
33929: LD_VAR 0 9
33933: ARRAY
33934: PUSH
33935: LD_INT 1
33937: ARRAY
33938: PPUSH
33939: LD_VAR 0 14
33943: PUSH
33944: LD_VAR 0 9
33948: ARRAY
33949: PUSH
33950: LD_INT 2
33952: ARRAY
33953: PPUSH
33954: CALL_OW 488
33958: NOT
33959: OR
33960: PUSH
33961: LD_VAR 0 13
33965: PPUSH
33966: CALL_OW 247
33970: PUSH
33971: LD_INT 3
33973: EQUAL
33974: OR
33975: IFFALSE 33981
// exit ;
33977: POP
33978: POP
33979: GO 34525
// if not tmp then
33981: LD_VAR 0 13
33985: NOT
33986: IFFALSE 33990
// continue ;
33988: GO 33846
// result := true ;
33990: LD_ADDR_VAR 0 8
33994: PUSH
33995: LD_INT 1
33997: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33998: LD_VAR 0 6
34002: PUSH
34003: LD_VAR 0 13
34007: PPUSH
34008: CALL_OW 247
34012: PUSH
34013: LD_INT 2
34015: EQUAL
34016: AND
34017: PUSH
34018: LD_VAR 0 13
34022: PPUSH
34023: CALL_OW 263
34027: PUSH
34028: LD_INT 1
34030: EQUAL
34031: AND
34032: IFFALSE 34196
// begin if IsDrivenBy ( tmp ) then
34034: LD_VAR 0 13
34038: PPUSH
34039: CALL_OW 311
34043: IFFALSE 34047
// continue ;
34045: GO 33846
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34047: LD_VAR 0 6
34051: PPUSH
34052: LD_INT 3
34054: PUSH
34055: LD_INT 60
34057: PUSH
34058: EMPTY
34059: LIST
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 3
34067: PUSH
34068: LD_INT 55
34070: PUSH
34071: EMPTY
34072: LIST
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PPUSH
34082: CALL_OW 72
34086: IFFALSE 34194
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34088: LD_ADDR_VAR 0 18
34092: PUSH
34093: LD_VAR 0 6
34097: PPUSH
34098: LD_INT 3
34100: PUSH
34101: LD_INT 60
34103: PUSH
34104: EMPTY
34105: LIST
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 3
34113: PUSH
34114: LD_INT 55
34116: PUSH
34117: EMPTY
34118: LIST
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PPUSH
34128: CALL_OW 72
34132: PUSH
34133: LD_INT 1
34135: ARRAY
34136: ST_TO_ADDR
// if IsInUnit ( driver ) then
34137: LD_VAR 0 18
34141: PPUSH
34142: CALL_OW 310
34146: IFFALSE 34157
// ComExit ( driver ) ;
34148: LD_VAR 0 18
34152: PPUSH
34153: CALL 59538 0 1
// AddComEnterUnit ( driver , tmp ) ;
34157: LD_VAR 0 18
34161: PPUSH
34162: LD_VAR 0 13
34166: PPUSH
34167: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34171: LD_VAR 0 18
34175: PPUSH
34176: LD_VAR 0 7
34180: PPUSH
34181: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34185: LD_VAR 0 18
34189: PPUSH
34190: CALL_OW 181
// end ; continue ;
34194: GO 33846
// end ; if not cleaners or not tmp in cleaners then
34196: LD_VAR 0 6
34200: NOT
34201: PUSH
34202: LD_VAR 0 13
34206: PUSH
34207: LD_VAR 0 6
34211: IN
34212: NOT
34213: OR
34214: IFFALSE 34521
// begin if dep then
34216: LD_VAR 0 17
34220: IFFALSE 34356
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34222: LD_ADDR_VAR 0 16
34226: PUSH
34227: LD_VAR 0 17
34231: PUSH
34232: LD_INT 1
34234: ARRAY
34235: PPUSH
34236: CALL_OW 250
34240: PPUSH
34241: LD_VAR 0 17
34245: PUSH
34246: LD_INT 1
34248: ARRAY
34249: PPUSH
34250: CALL_OW 254
34254: PPUSH
34255: LD_INT 5
34257: PPUSH
34258: CALL_OW 272
34262: PUSH
34263: LD_VAR 0 17
34267: PUSH
34268: LD_INT 1
34270: ARRAY
34271: PPUSH
34272: CALL_OW 251
34276: PPUSH
34277: LD_VAR 0 17
34281: PUSH
34282: LD_INT 1
34284: ARRAY
34285: PPUSH
34286: CALL_OW 254
34290: PPUSH
34291: LD_INT 5
34293: PPUSH
34294: CALL_OW 273
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34303: LD_VAR 0 16
34307: PUSH
34308: LD_INT 1
34310: ARRAY
34311: PPUSH
34312: LD_VAR 0 16
34316: PUSH
34317: LD_INT 2
34319: ARRAY
34320: PPUSH
34321: CALL_OW 488
34325: IFFALSE 34356
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34327: LD_VAR 0 13
34331: PPUSH
34332: LD_VAR 0 16
34336: PUSH
34337: LD_INT 1
34339: ARRAY
34340: PPUSH
34341: LD_VAR 0 16
34345: PUSH
34346: LD_INT 2
34348: ARRAY
34349: PPUSH
34350: CALL_OW 111
// continue ;
34354: GO 33846
// end ; end ; r := GetDir ( tmp ) ;
34356: LD_ADDR_VAR 0 15
34360: PUSH
34361: LD_VAR 0 13
34365: PPUSH
34366: CALL_OW 254
34370: ST_TO_ADDR
// if r = 5 then
34371: LD_VAR 0 15
34375: PUSH
34376: LD_INT 5
34378: EQUAL
34379: IFFALSE 34389
// r := 0 ;
34381: LD_ADDR_VAR 0 15
34385: PUSH
34386: LD_INT 0
34388: ST_TO_ADDR
// for j = r to 5 do
34389: LD_ADDR_VAR 0 10
34393: PUSH
34394: DOUBLE
34395: LD_VAR 0 15
34399: DEC
34400: ST_TO_ADDR
34401: LD_INT 5
34403: PUSH
34404: FOR_TO
34405: IFFALSE 34519
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34407: LD_ADDR_VAR 0 11
34411: PUSH
34412: LD_VAR 0 13
34416: PPUSH
34417: CALL_OW 250
34421: PPUSH
34422: LD_VAR 0 10
34426: PPUSH
34427: LD_INT 2
34429: PPUSH
34430: CALL_OW 272
34434: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34435: LD_ADDR_VAR 0 12
34439: PUSH
34440: LD_VAR 0 13
34444: PPUSH
34445: CALL_OW 251
34449: PPUSH
34450: LD_VAR 0 10
34454: PPUSH
34455: LD_INT 2
34457: PPUSH
34458: CALL_OW 273
34462: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34463: LD_VAR 0 11
34467: PPUSH
34468: LD_VAR 0 12
34472: PPUSH
34473: CALL_OW 488
34477: PUSH
34478: LD_VAR 0 11
34482: PPUSH
34483: LD_VAR 0 12
34487: PPUSH
34488: CALL_OW 428
34492: NOT
34493: AND
34494: IFFALSE 34517
// begin ComMoveXY ( tmp , _x , _y ) ;
34496: LD_VAR 0 13
34500: PPUSH
34501: LD_VAR 0 11
34505: PPUSH
34506: LD_VAR 0 12
34510: PPUSH
34511: CALL_OW 111
// break ;
34515: GO 34519
// end ; end ;
34517: GO 34404
34519: POP
34520: POP
// end ; end ;
34521: GO 33846
34523: POP
34524: POP
// end ;
34525: LD_VAR 0 8
34529: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34530: LD_INT 0
34532: PPUSH
// result := true ;
34533: LD_ADDR_VAR 0 3
34537: PUSH
34538: LD_INT 1
34540: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34541: LD_VAR 0 2
34545: PUSH
34546: LD_INT 24
34548: DOUBLE
34549: EQUAL
34550: IFTRUE 34560
34552: LD_INT 33
34554: DOUBLE
34555: EQUAL
34556: IFTRUE 34560
34558: GO 34585
34560: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34561: LD_ADDR_VAR 0 3
34565: PUSH
34566: LD_INT 32
34568: PPUSH
34569: LD_VAR 0 1
34573: PPUSH
34574: CALL_OW 321
34578: PUSH
34579: LD_INT 2
34581: EQUAL
34582: ST_TO_ADDR
34583: GO 34901
34585: LD_INT 20
34587: DOUBLE
34588: EQUAL
34589: IFTRUE 34593
34591: GO 34618
34593: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34594: LD_ADDR_VAR 0 3
34598: PUSH
34599: LD_INT 6
34601: PPUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: CALL_OW 321
34611: PUSH
34612: LD_INT 2
34614: EQUAL
34615: ST_TO_ADDR
34616: GO 34901
34618: LD_INT 22
34620: DOUBLE
34621: EQUAL
34622: IFTRUE 34632
34624: LD_INT 36
34626: DOUBLE
34627: EQUAL
34628: IFTRUE 34632
34630: GO 34657
34632: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34633: LD_ADDR_VAR 0 3
34637: PUSH
34638: LD_INT 15
34640: PPUSH
34641: LD_VAR 0 1
34645: PPUSH
34646: CALL_OW 321
34650: PUSH
34651: LD_INT 2
34653: EQUAL
34654: ST_TO_ADDR
34655: GO 34901
34657: LD_INT 30
34659: DOUBLE
34660: EQUAL
34661: IFTRUE 34665
34663: GO 34690
34665: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34666: LD_ADDR_VAR 0 3
34670: PUSH
34671: LD_INT 20
34673: PPUSH
34674: LD_VAR 0 1
34678: PPUSH
34679: CALL_OW 321
34683: PUSH
34684: LD_INT 2
34686: EQUAL
34687: ST_TO_ADDR
34688: GO 34901
34690: LD_INT 28
34692: DOUBLE
34693: EQUAL
34694: IFTRUE 34704
34696: LD_INT 21
34698: DOUBLE
34699: EQUAL
34700: IFTRUE 34704
34702: GO 34729
34704: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34705: LD_ADDR_VAR 0 3
34709: PUSH
34710: LD_INT 21
34712: PPUSH
34713: LD_VAR 0 1
34717: PPUSH
34718: CALL_OW 321
34722: PUSH
34723: LD_INT 2
34725: EQUAL
34726: ST_TO_ADDR
34727: GO 34901
34729: LD_INT 16
34731: DOUBLE
34732: EQUAL
34733: IFTRUE 34737
34735: GO 34762
34737: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34738: LD_ADDR_VAR 0 3
34742: PUSH
34743: LD_INT 84
34745: PPUSH
34746: LD_VAR 0 1
34750: PPUSH
34751: CALL_OW 321
34755: PUSH
34756: LD_INT 2
34758: EQUAL
34759: ST_TO_ADDR
34760: GO 34901
34762: LD_INT 19
34764: DOUBLE
34765: EQUAL
34766: IFTRUE 34776
34768: LD_INT 23
34770: DOUBLE
34771: EQUAL
34772: IFTRUE 34776
34774: GO 34801
34776: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34777: LD_ADDR_VAR 0 3
34781: PUSH
34782: LD_INT 83
34784: PPUSH
34785: LD_VAR 0 1
34789: PPUSH
34790: CALL_OW 321
34794: PUSH
34795: LD_INT 2
34797: EQUAL
34798: ST_TO_ADDR
34799: GO 34901
34801: LD_INT 17
34803: DOUBLE
34804: EQUAL
34805: IFTRUE 34809
34807: GO 34834
34809: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34810: LD_ADDR_VAR 0 3
34814: PUSH
34815: LD_INT 39
34817: PPUSH
34818: LD_VAR 0 1
34822: PPUSH
34823: CALL_OW 321
34827: PUSH
34828: LD_INT 2
34830: EQUAL
34831: ST_TO_ADDR
34832: GO 34901
34834: LD_INT 18
34836: DOUBLE
34837: EQUAL
34838: IFTRUE 34842
34840: GO 34867
34842: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34843: LD_ADDR_VAR 0 3
34847: PUSH
34848: LD_INT 40
34850: PPUSH
34851: LD_VAR 0 1
34855: PPUSH
34856: CALL_OW 321
34860: PUSH
34861: LD_INT 2
34863: EQUAL
34864: ST_TO_ADDR
34865: GO 34901
34867: LD_INT 27
34869: DOUBLE
34870: EQUAL
34871: IFTRUE 34875
34873: GO 34900
34875: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34876: LD_ADDR_VAR 0 3
34880: PUSH
34881: LD_INT 35
34883: PPUSH
34884: LD_VAR 0 1
34888: PPUSH
34889: CALL_OW 321
34893: PUSH
34894: LD_INT 2
34896: EQUAL
34897: ST_TO_ADDR
34898: GO 34901
34900: POP
// end ;
34901: LD_VAR 0 3
34905: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34906: LD_INT 0
34908: PPUSH
34909: PPUSH
34910: PPUSH
34911: PPUSH
34912: PPUSH
34913: PPUSH
34914: PPUSH
34915: PPUSH
34916: PPUSH
34917: PPUSH
34918: PPUSH
// result := false ;
34919: LD_ADDR_VAR 0 6
34923: PUSH
34924: LD_INT 0
34926: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34927: LD_VAR 0 1
34931: NOT
34932: PUSH
34933: LD_VAR 0 1
34937: PPUSH
34938: CALL_OW 266
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: LD_INT 1
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: IN
34953: NOT
34954: OR
34955: PUSH
34956: LD_VAR 0 2
34960: NOT
34961: OR
34962: PUSH
34963: LD_VAR 0 5
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 3
34979: PUSH
34980: LD_INT 4
34982: PUSH
34983: LD_INT 5
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: IN
34994: NOT
34995: OR
34996: PUSH
34997: LD_VAR 0 3
35001: PPUSH
35002: LD_VAR 0 4
35006: PPUSH
35007: CALL_OW 488
35011: NOT
35012: OR
35013: IFFALSE 35017
// exit ;
35015: GO 35753
// side := GetSide ( depot ) ;
35017: LD_ADDR_VAR 0 9
35021: PUSH
35022: LD_VAR 0 1
35026: PPUSH
35027: CALL_OW 255
35031: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35032: LD_VAR 0 9
35036: PPUSH
35037: LD_VAR 0 2
35041: PPUSH
35042: CALL 34530 0 2
35046: NOT
35047: IFFALSE 35051
// exit ;
35049: GO 35753
// pom := GetBase ( depot ) ;
35051: LD_ADDR_VAR 0 10
35055: PUSH
35056: LD_VAR 0 1
35060: PPUSH
35061: CALL_OW 274
35065: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35066: LD_ADDR_VAR 0 11
35070: PUSH
35071: LD_VAR 0 2
35075: PPUSH
35076: LD_VAR 0 1
35080: PPUSH
35081: CALL_OW 248
35085: PPUSH
35086: CALL_OW 450
35090: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35091: LD_VAR 0 10
35095: PPUSH
35096: LD_INT 1
35098: PPUSH
35099: CALL_OW 275
35103: PUSH
35104: LD_VAR 0 11
35108: PUSH
35109: LD_INT 1
35111: ARRAY
35112: GREATEREQUAL
35113: PUSH
35114: LD_VAR 0 10
35118: PPUSH
35119: LD_INT 2
35121: PPUSH
35122: CALL_OW 275
35126: PUSH
35127: LD_VAR 0 11
35131: PUSH
35132: LD_INT 2
35134: ARRAY
35135: GREATEREQUAL
35136: AND
35137: PUSH
35138: LD_VAR 0 10
35142: PPUSH
35143: LD_INT 3
35145: PPUSH
35146: CALL_OW 275
35150: PUSH
35151: LD_VAR 0 11
35155: PUSH
35156: LD_INT 3
35158: ARRAY
35159: GREATEREQUAL
35160: AND
35161: NOT
35162: IFFALSE 35166
// exit ;
35164: GO 35753
// if GetBType ( depot ) = b_depot then
35166: LD_VAR 0 1
35170: PPUSH
35171: CALL_OW 266
35175: PUSH
35176: LD_INT 0
35178: EQUAL
35179: IFFALSE 35191
// dist := 28 else
35181: LD_ADDR_VAR 0 14
35185: PUSH
35186: LD_INT 28
35188: ST_TO_ADDR
35189: GO 35199
// dist := 36 ;
35191: LD_ADDR_VAR 0 14
35195: PUSH
35196: LD_INT 36
35198: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35199: LD_VAR 0 1
35203: PPUSH
35204: LD_VAR 0 3
35208: PPUSH
35209: LD_VAR 0 4
35213: PPUSH
35214: CALL_OW 297
35218: PUSH
35219: LD_VAR 0 14
35223: GREATER
35224: IFFALSE 35228
// exit ;
35226: GO 35753
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35228: LD_ADDR_VAR 0 12
35232: PUSH
35233: LD_VAR 0 2
35237: PPUSH
35238: LD_VAR 0 3
35242: PPUSH
35243: LD_VAR 0 4
35247: PPUSH
35248: LD_VAR 0 5
35252: PPUSH
35253: LD_VAR 0 1
35257: PPUSH
35258: CALL_OW 248
35262: PPUSH
35263: LD_INT 0
35265: PPUSH
35266: CALL 35758 0 6
35270: ST_TO_ADDR
// if not hexes then
35271: LD_VAR 0 12
35275: NOT
35276: IFFALSE 35280
// exit ;
35278: GO 35753
// hex := GetHexInfo ( x , y ) ;
35280: LD_ADDR_VAR 0 15
35284: PUSH
35285: LD_VAR 0 3
35289: PPUSH
35290: LD_VAR 0 4
35294: PPUSH
35295: CALL_OW 546
35299: ST_TO_ADDR
// if hex [ 1 ] then
35300: LD_VAR 0 15
35304: PUSH
35305: LD_INT 1
35307: ARRAY
35308: IFFALSE 35312
// exit ;
35310: GO 35753
// height := hex [ 2 ] ;
35312: LD_ADDR_VAR 0 13
35316: PUSH
35317: LD_VAR 0 15
35321: PUSH
35322: LD_INT 2
35324: ARRAY
35325: ST_TO_ADDR
// for i = 1 to hexes do
35326: LD_ADDR_VAR 0 7
35330: PUSH
35331: DOUBLE
35332: LD_INT 1
35334: DEC
35335: ST_TO_ADDR
35336: LD_VAR 0 12
35340: PUSH
35341: FOR_TO
35342: IFFALSE 35672
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35344: LD_VAR 0 12
35348: PUSH
35349: LD_VAR 0 7
35353: ARRAY
35354: PUSH
35355: LD_INT 1
35357: ARRAY
35358: PPUSH
35359: LD_VAR 0 12
35363: PUSH
35364: LD_VAR 0 7
35368: ARRAY
35369: PUSH
35370: LD_INT 2
35372: ARRAY
35373: PPUSH
35374: CALL_OW 488
35378: NOT
35379: PUSH
35380: LD_VAR 0 12
35384: PUSH
35385: LD_VAR 0 7
35389: ARRAY
35390: PUSH
35391: LD_INT 1
35393: ARRAY
35394: PPUSH
35395: LD_VAR 0 12
35399: PUSH
35400: LD_VAR 0 7
35404: ARRAY
35405: PUSH
35406: LD_INT 2
35408: ARRAY
35409: PPUSH
35410: CALL_OW 428
35414: PUSH
35415: LD_INT 0
35417: GREATER
35418: OR
35419: PUSH
35420: LD_VAR 0 12
35424: PUSH
35425: LD_VAR 0 7
35429: ARRAY
35430: PUSH
35431: LD_INT 1
35433: ARRAY
35434: PPUSH
35435: LD_VAR 0 12
35439: PUSH
35440: LD_VAR 0 7
35444: ARRAY
35445: PUSH
35446: LD_INT 2
35448: ARRAY
35449: PPUSH
35450: CALL_OW 351
35454: OR
35455: IFFALSE 35461
// exit ;
35457: POP
35458: POP
35459: GO 35753
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35461: LD_ADDR_VAR 0 8
35465: PUSH
35466: LD_VAR 0 12
35470: PUSH
35471: LD_VAR 0 7
35475: ARRAY
35476: PUSH
35477: LD_INT 1
35479: ARRAY
35480: PPUSH
35481: LD_VAR 0 12
35485: PUSH
35486: LD_VAR 0 7
35490: ARRAY
35491: PUSH
35492: LD_INT 2
35494: ARRAY
35495: PPUSH
35496: CALL_OW 546
35500: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35501: LD_VAR 0 8
35505: PUSH
35506: LD_INT 1
35508: ARRAY
35509: PUSH
35510: LD_VAR 0 8
35514: PUSH
35515: LD_INT 2
35517: ARRAY
35518: PUSH
35519: LD_VAR 0 13
35523: PUSH
35524: LD_INT 2
35526: PLUS
35527: GREATER
35528: OR
35529: PUSH
35530: LD_VAR 0 8
35534: PUSH
35535: LD_INT 2
35537: ARRAY
35538: PUSH
35539: LD_VAR 0 13
35543: PUSH
35544: LD_INT 2
35546: MINUS
35547: LESS
35548: OR
35549: PUSH
35550: LD_VAR 0 8
35554: PUSH
35555: LD_INT 3
35557: ARRAY
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 8
35564: PUSH
35565: LD_INT 9
35567: PUSH
35568: LD_INT 10
35570: PUSH
35571: LD_INT 11
35573: PUSH
35574: LD_INT 12
35576: PUSH
35577: LD_INT 13
35579: PUSH
35580: LD_INT 16
35582: PUSH
35583: LD_INT 17
35585: PUSH
35586: LD_INT 18
35588: PUSH
35589: LD_INT 19
35591: PUSH
35592: LD_INT 20
35594: PUSH
35595: LD_INT 21
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: IN
35613: NOT
35614: OR
35615: PUSH
35616: LD_VAR 0 8
35620: PUSH
35621: LD_INT 5
35623: ARRAY
35624: NOT
35625: OR
35626: PUSH
35627: LD_VAR 0 8
35631: PUSH
35632: LD_INT 6
35634: ARRAY
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: LD_INT 7
35644: PUSH
35645: LD_INT 9
35647: PUSH
35648: LD_INT 10
35650: PUSH
35651: LD_INT 11
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: IN
35662: NOT
35663: OR
35664: IFFALSE 35670
// exit ;
35666: POP
35667: POP
35668: GO 35753
// end ;
35670: GO 35341
35672: POP
35673: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35674: LD_VAR 0 9
35678: PPUSH
35679: LD_VAR 0 3
35683: PPUSH
35684: LD_VAR 0 4
35688: PPUSH
35689: LD_INT 20
35691: PPUSH
35692: CALL 27705 0 4
35696: PUSH
35697: LD_INT 4
35699: ARRAY
35700: IFFALSE 35704
// exit ;
35702: GO 35753
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35704: LD_VAR 0 2
35708: PUSH
35709: LD_INT 29
35711: PUSH
35712: LD_INT 30
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: IN
35719: PUSH
35720: LD_VAR 0 3
35724: PPUSH
35725: LD_VAR 0 4
35729: PPUSH
35730: LD_VAR 0 9
35734: PPUSH
35735: CALL_OW 440
35739: NOT
35740: AND
35741: IFFALSE 35745
// exit ;
35743: GO 35753
// result := true ;
35745: LD_ADDR_VAR 0 6
35749: PUSH
35750: LD_INT 1
35752: ST_TO_ADDR
// end ;
35753: LD_VAR 0 6
35757: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35758: LD_INT 0
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
35764: PPUSH
35765: PPUSH
35766: PPUSH
35767: PPUSH
35768: PPUSH
35769: PPUSH
35770: PPUSH
35771: PPUSH
35772: PPUSH
35773: PPUSH
35774: PPUSH
35775: PPUSH
35776: PPUSH
35777: PPUSH
35778: PPUSH
35779: PPUSH
35780: PPUSH
35781: PPUSH
35782: PPUSH
35783: PPUSH
35784: PPUSH
35785: PPUSH
35786: PPUSH
35787: PPUSH
35788: PPUSH
35789: PPUSH
35790: PPUSH
35791: PPUSH
35792: PPUSH
35793: PPUSH
35794: PPUSH
35795: PPUSH
35796: PPUSH
35797: PPUSH
35798: PPUSH
35799: PPUSH
35800: PPUSH
35801: PPUSH
35802: PPUSH
35803: PPUSH
35804: PPUSH
35805: PPUSH
35806: PPUSH
35807: PPUSH
35808: PPUSH
35809: PPUSH
35810: PPUSH
35811: PPUSH
35812: PPUSH
35813: PPUSH
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
// result = [ ] ;
35818: LD_ADDR_VAR 0 7
35822: PUSH
35823: EMPTY
35824: ST_TO_ADDR
// temp_list = [ ] ;
35825: LD_ADDR_VAR 0 9
35829: PUSH
35830: EMPTY
35831: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35832: LD_VAR 0 4
35836: PUSH
35837: LD_INT 0
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: LD_INT 3
35848: PUSH
35849: LD_INT 4
35851: PUSH
35852: LD_INT 5
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: IN
35863: NOT
35864: PUSH
35865: LD_VAR 0 1
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: LD_INT 1
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: IN
35880: PUSH
35881: LD_VAR 0 5
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: LD_INT 3
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: LIST
35899: IN
35900: NOT
35901: AND
35902: OR
35903: IFFALSE 35907
// exit ;
35905: GO 54298
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35907: LD_VAR 0 1
35911: PUSH
35912: LD_INT 6
35914: PUSH
35915: LD_INT 7
35917: PUSH
35918: LD_INT 8
35920: PUSH
35921: LD_INT 13
35923: PUSH
35924: LD_INT 12
35926: PUSH
35927: LD_INT 15
35929: PUSH
35930: LD_INT 11
35932: PUSH
35933: LD_INT 14
35935: PUSH
35936: LD_INT 10
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: IN
35950: IFFALSE 35960
// btype = b_lab ;
35952: LD_ADDR_VAR 0 1
35956: PUSH
35957: LD_INT 6
35959: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35960: LD_VAR 0 6
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: LD_INT 1
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: IN
35979: NOT
35980: PUSH
35981: LD_VAR 0 1
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: LD_INT 3
35997: PUSH
35998: LD_INT 6
36000: PUSH
36001: LD_INT 36
36003: PUSH
36004: LD_INT 4
36006: PUSH
36007: LD_INT 5
36009: PUSH
36010: LD_INT 31
36012: PUSH
36013: LD_INT 32
36015: PUSH
36016: LD_INT 33
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: IN
36032: NOT
36033: PUSH
36034: LD_VAR 0 6
36038: PUSH
36039: LD_INT 1
36041: EQUAL
36042: AND
36043: OR
36044: PUSH
36045: LD_VAR 0 1
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: LD_INT 3
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: IN
36060: NOT
36061: PUSH
36062: LD_VAR 0 6
36066: PUSH
36067: LD_INT 2
36069: EQUAL
36070: AND
36071: OR
36072: IFFALSE 36082
// mode = 0 ;
36074: LD_ADDR_VAR 0 6
36078: PUSH
36079: LD_INT 0
36081: ST_TO_ADDR
// case mode of 0 :
36082: LD_VAR 0 6
36086: PUSH
36087: LD_INT 0
36089: DOUBLE
36090: EQUAL
36091: IFTRUE 36095
36093: GO 47548
36095: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36096: LD_ADDR_VAR 0 11
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: LD_INT 1
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: LD_INT 2
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: LD_INT 2
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: LD_INT 2
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: LD_INT 3
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 3
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: LD_INT 2
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36289: LD_ADDR_VAR 0 12
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: LD_INT 1
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 2
36412: NEG
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: NEG
36424: PUSH
36425: LD_INT 1
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 3
36446: NEG
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 3
36457: NEG
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36485: LD_ADDR_VAR 0 13
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: LD_INT 0
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: NEG
36555: PUSH
36556: LD_INT 1
36558: NEG
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: LD_INT 2
36570: NEG
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 2
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 2
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 2
36608: NEG
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 2
36620: NEG
36621: PUSH
36622: LD_INT 2
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 2
36632: NEG
36633: PUSH
36634: LD_INT 3
36636: NEG
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 3
36644: NEG
36645: PUSH
36646: LD_INT 2
36648: NEG
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 3
36656: NEG
36657: PUSH
36658: LD_INT 3
36660: NEG
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36684: LD_ADDR_VAR 0 14
36688: PUSH
36689: LD_INT 0
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 1
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: LD_INT 1
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: NEG
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: LD_INT 1
36757: NEG
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: LD_INT 2
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 2
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 2
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 2
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: NEG
36831: PUSH
36832: LD_INT 3
36834: NEG
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: LD_INT 3
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 1
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36880: LD_ADDR_VAR 0 15
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 1
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: LD_INT 1
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 2
37003: NEG
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 3
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 3
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37073: LD_ADDR_VAR 0 16
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: NEG
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: LD_INT 2
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 2
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: LD_INT 2
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 1
37186: PUSH
37187: LD_INT 2
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 2
37196: NEG
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 2
37208: NEG
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 3
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 3
37230: PUSH
37231: LD_INT 3
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: LD_INT 3
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37266: LD_ADDR_VAR 0 17
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 1
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: LD_INT 0
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 1
37335: NEG
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: LD_INT 2
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: LD_INT 2
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 2
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 2
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 2
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: NEG
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 2
37465: NEG
37466: PUSH
37467: LD_INT 2
37469: NEG
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37496: LD_ADDR_VAR 0 18
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: LD_INT 2
37581: NEG
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: LD_INT 2
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 2
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: LD_INT 2
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: NEG
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 2
37695: NEG
37696: PUSH
37697: LD_INT 2
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37726: LD_ADDR_VAR 0 19
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: LD_INT 2
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 2
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 2
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 2
37902: NEG
37903: PUSH
37904: LD_INT 0
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 2
37913: NEG
37914: PUSH
37915: LD_INT 1
37917: NEG
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37956: LD_ADDR_VAR 0 20
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 0
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: LD_INT 2
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 1
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 2
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: PUSH
38092: LD_INT 2
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: LD_INT 2
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: LD_INT 2
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 2
38132: NEG
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 2
38155: NEG
38156: PUSH
38157: LD_INT 2
38159: NEG
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38186: LD_ADDR_VAR 0 21
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 1
38244: NEG
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: LD_INT 2
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: LD_INT 2
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 1
38290: PUSH
38291: LD_INT 1
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 2
38362: NEG
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 2
38373: NEG
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: LD_INT 2
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38416: LD_ADDR_VAR 0 22
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: LD_INT 1
38489: NEG
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PUSH
38499: LD_INT 2
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: LD_INT 2
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: LD_INT 1
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 2
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 2
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: NEG
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: NEG
38616: PUSH
38617: LD_INT 2
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38646: LD_ADDR_VAR 0 23
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: LD_INT 2
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 1
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 2
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: PUSH
38782: LD_INT 2
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: LD_INT 2
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 2
38822: NEG
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 2
38833: NEG
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: NEG
38846: PUSH
38847: LD_INT 2
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: NEG
38858: PUSH
38859: LD_INT 3
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: LD_INT 3
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: LD_INT 2
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38926: LD_ADDR_VAR 0 24
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 2
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: LD_INT 2
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 2
39125: NEG
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: LD_INT 2
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 3
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 3
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39202: LD_ADDR_VAR 0 25
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: NEG
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: LD_INT 2
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 0
39295: PUSH
39296: LD_INT 2
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 2
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 2
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 2
39337: PUSH
39338: LD_INT 2
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: LD_INT 2
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: LD_INT 2
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 2
39389: NEG
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 2
39401: NEG
39402: PUSH
39403: LD_INT 2
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 3
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: LD_INT 3
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 3
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39476: LD_ADDR_VAR 0 26
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: LD_INT 1
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 2
39675: NEG
39676: PUSH
39677: LD_INT 2
39679: NEG
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 2
39687: PUSH
39688: LD_INT 3
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: LD_INT 3
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 2
39718: NEG
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39752: LD_ADDR_VAR 0 27
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: NEG
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: LD_INT 2
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: LD_INT 2
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 2
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 2
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: LD_INT 2
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: LD_INT 2
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: NEG
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 2
39939: NEG
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 2
39951: NEG
39952: PUSH
39953: LD_INT 2
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 2
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 2
39974: NEG
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 3
39985: NEG
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 3
39997: NEG
39998: PUSH
39999: LD_INT 2
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40032: LD_ADDR_VAR 0 28
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: LD_INT 2
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: LD_INT 2
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: LD_INT 1
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 2
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 2
40208: NEG
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: NEG
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: NEG
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: LD_INT 3
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: LD_INT 3
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 3
40267: NEG
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 3
40279: NEG
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40314: LD_ADDR_VAR 0 29
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: LD_INT 1
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: LD_INT 2
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 2
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 2
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: NEG
40505: PUSH
40506: LD_INT 3
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 3
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: LD_INT 3
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 2
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 3
40558: NEG
40559: PUSH
40560: LD_INT 2
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40593: LD_ADDR_VAR 0 30
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: NEG
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: NEG
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 3
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 3
40805: PUSH
40806: LD_INT 2
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 2
40815: PUSH
40816: LD_INT 3
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 2
40825: NEG
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 3
40836: NEG
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40871: LD_ADDR_VAR 0 31
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 2
41048: NEG
41049: PUSH
41050: LD_INT 2
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 2
41060: NEG
41061: PUSH
41062: LD_INT 3
41064: NEG
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 3
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 3
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 3
41114: NEG
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41149: LD_ADDR_VAR 0 32
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: LD_INT 1
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: LD_INT 1
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: LD_INT 2
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: LD_INT 2
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 2
41326: NEG
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: LD_INT 3
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 3
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: LD_INT 3
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 3
41392: NEG
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41427: LD_ADDR_VAR 0 33
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: LD_INT 2
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 2
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: LD_INT 2
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 2
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 2
41593: NEG
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 2
41605: NEG
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: LD_INT 3
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 3
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: LD_INT 3
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 3
41671: NEG
41672: PUSH
41673: LD_INT 2
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41706: LD_ADDR_VAR 0 34
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: NEG
41788: PUSH
41789: LD_INT 2
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: LD_INT 2
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 2
41873: NEG
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: LD_INT 3
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 3
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: LD_INT 3
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: NEG
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 3
41951: NEG
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41986: LD_ADDR_VAR 0 35
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 2
42077: NEG
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42098: LD_ADDR_VAR 0 36
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: NEG
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42210: LD_ADDR_VAR 0 37
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42322: LD_ADDR_VAR 0 38
42326: PUSH
42327: LD_INT 0
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: NEG
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42434: LD_ADDR_VAR 0 39
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 2
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42546: LD_ADDR_VAR 0 40
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42658: LD_ADDR_VAR 0 41
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 2
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 2
42836: NEG
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 2
42848: NEG
42849: PUSH
42850: LD_INT 3
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 3
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 3
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 3
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 3
42901: PUSH
42902: LD_INT 3
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 3
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: NEG
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 3
42932: NEG
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 3
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 3
42955: NEG
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 3
42967: NEG
42968: PUSH
42969: LD_INT 3
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43008: LD_ADDR_VAR 0 42
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 2
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: LD_INT 2
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 2
43186: NEG
43187: PUSH
43188: LD_INT 2
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: LD_INT 3
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: LD_INT 3
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 3
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 3
43244: PUSH
43245: LD_INT 2
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 3
43254: PUSH
43255: LD_INT 3
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: LD_INT 3
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 3
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 3
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 3
43305: NEG
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 3
43317: NEG
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43358: LD_ADDR_VAR 0 43
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 3
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 3
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 3
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 3
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 3
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 3
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 2
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 3
43654: NEG
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 3
43665: NEG
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43706: LD_ADDR_VAR 0 44
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: NEG
43897: PUSH
43898: LD_INT 3
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 3
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 3
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 3
43949: PUSH
43950: LD_INT 3
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: LD_INT 3
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 3
43980: NEG
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 3
43991: NEG
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 3
44003: NEG
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 3
44015: NEG
44016: PUSH
44017: LD_INT 3
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44056: LD_ADDR_VAR 0 45
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: LD_INT 2
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 2
44234: NEG
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 2
44246: NEG
44247: PUSH
44248: LD_INT 3
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: LD_INT 3
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 3
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 2
44284: NEG
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 3
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 3
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 2
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 3
44353: NEG
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 3
44365: NEG
44366: PUSH
44367: LD_INT 3
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44406: LD_ADDR_VAR 0 46
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 2
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 3
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 3
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 3
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 3
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 3
44713: NEG
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44754: LD_ADDR_VAR 0 47
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: LD_INT 2
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: LD_INT 2
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: NEG
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44905: LD_ADDR_VAR 0 48
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 2
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45052: LD_ADDR_VAR 0 49
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45196: LD_ADDR_VAR 0 50
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: LD_INT 2
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45340: LD_ADDR_VAR 0 51
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45487: LD_ADDR_VAR 0 52
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: NEG
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45638: LD_ADDR_VAR 0 53
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: LD_INT 2
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45868: LD_ADDR_VAR 0 54
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 2
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46098: LD_ADDR_VAR 0 55
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46328: LD_ADDR_VAR 0 56
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46558: LD_ADDR_VAR 0 57
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 2
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46788: LD_ADDR_VAR 0 58
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: NEG
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47018: LD_ADDR_VAR 0 59
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47106: LD_ADDR_VAR 0 60
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47194: LD_ADDR_VAR 0 61
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47282: LD_ADDR_VAR 0 62
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47370: LD_ADDR_VAR 0 63
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47458: LD_ADDR_VAR 0 64
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: ST_TO_ADDR
// end ; 1 :
47546: GO 53443
47548: LD_INT 1
47550: DOUBLE
47551: EQUAL
47552: IFTRUE 47556
47554: GO 50179
47556: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47557: LD_ADDR_VAR 0 11
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 3
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 3
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: LIST
47600: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47601: LD_ADDR_VAR 0 12
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 3
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: LIST
47641: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47642: LD_ADDR_VAR 0 13
47646: PUSH
47647: LD_INT 3
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 3
47659: PUSH
47660: LD_INT 3
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: LIST
47681: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47682: LD_ADDR_VAR 0 14
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: LD_INT 3
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: LD_INT 3
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: LIST
47722: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47723: LD_ADDR_VAR 0 15
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 3
47741: NEG
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 3
47752: NEG
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47767: LD_ADDR_VAR 0 16
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: LD_INT 3
47778: NEG
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 3
47786: NEG
47787: PUSH
47788: LD_INT 2
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 3
47798: NEG
47799: PUSH
47800: LD_INT 3
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: LIST
47812: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47813: LD_ADDR_VAR 0 17
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 3
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 3
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47857: LD_ADDR_VAR 0 18
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 3
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47898: LD_ADDR_VAR 0 19
47902: PUSH
47903: LD_INT 3
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 3
47915: PUSH
47916: LD_INT 3
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47938: LD_ADDR_VAR 0 20
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 3
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: LIST
47978: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47979: LD_ADDR_VAR 0 21
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 3
47997: NEG
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 3
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: LIST
48022: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48023: LD_ADDR_VAR 0 22
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: LD_INT 3
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 3
48042: NEG
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 3
48054: NEG
48055: PUSH
48056: LD_INT 3
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48069: LD_ADDR_VAR 0 23
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 3
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 4
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 3
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: LIST
48112: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48113: LD_ADDR_VAR 0 24
48117: PUSH
48118: LD_INT 3
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 3
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 4
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48154: LD_ADDR_VAR 0 25
48158: PUSH
48159: LD_INT 3
48161: PUSH
48162: LD_INT 3
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 4
48171: PUSH
48172: LD_INT 3
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 3
48181: PUSH
48182: LD_INT 4
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: LIST
48193: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48194: LD_ADDR_VAR 0 26
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 3
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 4
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: LD_INT 3
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: LIST
48234: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48235: LD_ADDR_VAR 0 27
48239: PUSH
48240: LD_INT 3
48242: NEG
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 3
48253: NEG
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 4
48264: NEG
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: LIST
48278: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48279: LD_ADDR_VAR 0 28
48283: PUSH
48284: LD_INT 3
48286: NEG
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 3
48298: NEG
48299: PUSH
48300: LD_INT 4
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 4
48310: NEG
48311: PUSH
48312: LD_INT 3
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: LIST
48324: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48325: LD_ADDR_VAR 0 29
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: LD_INT 3
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 3
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 4
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 4
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 3
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 5
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 5
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 4
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 6
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 6
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: LD_INT 5
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48480: LD_ADDR_VAR 0 30
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 3
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 4
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 4
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 4
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 5
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 5
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 5
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 6
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 6
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48623: LD_ADDR_VAR 0 31
48627: PUSH
48628: LD_INT 3
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 3
48640: PUSH
48641: LD_INT 3
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: PUSH
48651: LD_INT 3
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 4
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 4
48670: PUSH
48671: LD_INT 4
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 3
48680: PUSH
48681: LD_INT 4
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 5
48690: PUSH
48691: LD_INT 4
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 5
48700: PUSH
48701: LD_INT 5
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 4
48710: PUSH
48711: LD_INT 5
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 6
48720: PUSH
48721: LD_INT 5
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 6
48730: PUSH
48731: LD_INT 6
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 5
48740: PUSH
48741: LD_INT 6
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48762: LD_ADDR_VAR 0 32
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 3
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 3
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 4
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 4
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: LD_INT 3
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 5
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 5
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 4
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 6
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 6
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 5
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48905: LD_ADDR_VAR 0 33
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 3
48923: NEG
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: NEG
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 3
48946: NEG
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 4
48957: NEG
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 4
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 4
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 5
48991: NEG
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 5
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 5
49014: NEG
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 6
49025: NEG
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 6
49036: NEG
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49060: LD_ADDR_VAR 0 34
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: LD_INT 3
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 3
49079: NEG
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 3
49091: NEG
49092: PUSH
49093: LD_INT 3
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 3
49103: NEG
49104: PUSH
49105: LD_INT 4
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 4
49115: NEG
49116: PUSH
49117: LD_INT 3
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 4
49127: NEG
49128: PUSH
49129: LD_INT 4
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 4
49139: NEG
49140: PUSH
49141: LD_INT 5
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 5
49151: NEG
49152: PUSH
49153: LD_INT 4
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 5
49163: NEG
49164: PUSH
49165: LD_INT 5
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 5
49175: NEG
49176: PUSH
49177: LD_INT 6
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 6
49187: NEG
49188: PUSH
49189: LD_INT 5
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 6
49199: NEG
49200: PUSH
49201: LD_INT 6
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49223: LD_ADDR_VAR 0 41
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 3
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49267: LD_ADDR_VAR 0 42
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 3
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: LIST
49307: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49308: LD_ADDR_VAR 0 43
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: LD_INT 2
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 3
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: LD_INT 3
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49348: LD_ADDR_VAR 0 44
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 3
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: LIST
49388: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49389: LD_ADDR_VAR 0 45
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 3
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49433: LD_ADDR_VAR 0 46
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: LD_INT 3
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 3
49464: NEG
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: LIST
49478: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49479: LD_ADDR_VAR 0 47
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 3
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49512: LD_ADDR_VAR 0 48
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49543: LD_ADDR_VAR 0 49
49547: PUSH
49548: LD_INT 3
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 3
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49572: LD_ADDR_VAR 0 50
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: LD_INT 3
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49601: LD_ADDR_VAR 0 51
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49632: LD_ADDR_VAR 0 52
49636: PUSH
49637: LD_INT 3
49639: NEG
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49665: LD_ADDR_VAR 0 53
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 3
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 3
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: LIST
49708: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49709: LD_ADDR_VAR 0 54
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 3
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 3
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: LIST
49749: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49750: LD_ADDR_VAR 0 55
49754: PUSH
49755: LD_INT 3
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 3
49767: PUSH
49768: LD_INT 3
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 3
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: LIST
49789: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49790: LD_ADDR_VAR 0 56
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 3
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: LIST
49830: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49831: LD_ADDR_VAR 0 57
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: NEG
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 3
49860: NEG
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49875: LD_ADDR_VAR 0 58
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 3
49894: NEG
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 3
49906: NEG
49907: PUSH
49908: LD_INT 3
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: LIST
49920: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49921: LD_ADDR_VAR 0 59
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49965: LD_ADDR_VAR 0 60
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: LIST
50005: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50006: LD_ADDR_VAR 0 61
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: LIST
50045: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50046: LD_ADDR_VAR 0 62
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: LIST
50086: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50087: LD_ADDR_VAR 0 63
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: NEG
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: LIST
50130: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50131: LD_ADDR_VAR 0 64
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 2
50150: NEG
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: LIST
50176: ST_TO_ADDR
// end ; 2 :
50177: GO 53443
50179: LD_INT 2
50181: DOUBLE
50182: EQUAL
50183: IFTRUE 50187
50185: GO 53442
50187: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50188: LD_ADDR_VAR 0 29
50192: PUSH
50193: LD_INT 4
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 4
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 5
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 5
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 4
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 3
50267: PUSH
50268: LD_INT 2
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 5
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 3
50288: PUSH
50289: LD_INT 3
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 3
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 4
50308: PUSH
50309: LD_INT 3
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 4
50318: PUSH
50319: LD_INT 4
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 3
50328: PUSH
50329: LD_INT 4
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: LD_INT 3
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 4
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: LD_INT 4
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 4
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 3
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 4
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 5
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 5
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: LD_INT 4
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 3
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: LD_INT 5
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: LD_INT 3
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 3
50471: NEG
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: NEG
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 4
50527: NEG
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 4
50538: NEG
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 4
50550: NEG
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 4
50573: NEG
50574: PUSH
50575: LD_INT 4
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 4
50585: NEG
50586: PUSH
50587: LD_INT 5
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 3
50597: NEG
50598: PUSH
50599: LD_INT 4
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 3
50609: NEG
50610: PUSH
50611: LD_INT 3
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 4
50621: NEG
50622: PUSH
50623: LD_INT 3
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 5
50633: NEG
50634: PUSH
50635: LD_INT 4
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 5
50645: NEG
50646: PUSH
50647: LD_INT 5
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 3
50657: NEG
50658: PUSH
50659: LD_INT 5
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 5
50669: NEG
50670: PUSH
50671: LD_INT 3
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50726: LD_ADDR_VAR 0 30
50730: PUSH
50731: LD_INT 4
50733: PUSH
50734: LD_INT 4
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 4
50743: PUSH
50744: LD_INT 3
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 5
50753: PUSH
50754: LD_INT 4
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 5
50763: PUSH
50764: LD_INT 5
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 4
50773: PUSH
50774: LD_INT 5
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: LD_INT 4
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 3
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 5
50803: PUSH
50804: LD_INT 3
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 3
50813: PUSH
50814: LD_INT 5
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 3
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 3
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: LD_INT 4
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 4
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: LD_INT 3
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: LD_INT 4
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: NEG
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 4
50916: NEG
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 4
50927: NEG
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 3
50939: NEG
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 3
50950: NEG
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 4
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 5
50972: NEG
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 5
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 5
50995: NEG
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 3
51007: NEG
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 3
51018: NEG
51019: PUSH
51020: LD_INT 3
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: NEG
51031: PUSH
51032: LD_INT 4
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: LD_INT 3
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 2
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 4
51078: NEG
51079: PUSH
51080: LD_INT 3
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 4
51090: NEG
51091: PUSH
51092: LD_INT 4
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: LD_INT 4
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 4
51114: NEG
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 4
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 5
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: LD_INT 4
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 4
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: LD_INT 5
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: LD_INT 3
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: LD_INT 5
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51273: LD_ADDR_VAR 0 31
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 4
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 4
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: LD_INT 5
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 5
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: LD_INT 4
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 5
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: LD_INT 3
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: NEG
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 3
51418: NEG
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 4
51429: NEG
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 4
51440: NEG
51441: PUSH
51442: LD_INT 1
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 4
51452: NEG
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 4
51475: NEG
51476: PUSH
51477: LD_INT 4
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 4
51487: NEG
51488: PUSH
51489: LD_INT 5
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: LD_INT 4
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: LD_INT 3
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 4
51523: NEG
51524: PUSH
51525: LD_INT 3
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 5
51535: NEG
51536: PUSH
51537: LD_INT 4
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 5
51547: NEG
51548: PUSH
51549: LD_INT 5
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 3
51559: NEG
51560: PUSH
51561: LD_INT 5
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 5
51571: NEG
51572: PUSH
51573: LD_INT 3
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 3
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: LD_INT 4
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 3
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 4
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 2
51673: NEG
51674: PUSH
51675: LD_INT 4
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 4
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 4
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 5
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 5
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 4
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 3
51757: PUSH
51758: LD_INT 2
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 5
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51823: LD_ADDR_VAR 0 32
51827: PUSH
51828: LD_INT 4
51830: NEG
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 4
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 3
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 4
51875: NEG
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 5
51886: NEG
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 5
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 5
51909: NEG
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 3
51921: NEG
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 3
51932: NEG
51933: PUSH
51934: LD_INT 3
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: LD_INT 4
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: LD_INT 3
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 3
51980: NEG
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 4
51992: NEG
51993: PUSH
51994: LD_INT 3
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 4
52004: NEG
52005: PUSH
52006: LD_INT 4
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: LD_INT 4
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 4
52028: NEG
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 4
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 5
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 4
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 3
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 3
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 4
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: LD_INT 5
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: LD_INT 5
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 3
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 4
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 4
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 4
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 4
52235: PUSH
52236: LD_INT 4
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 4
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 5
52255: PUSH
52256: LD_INT 4
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 5
52265: PUSH
52266: LD_INT 5
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 4
52275: PUSH
52276: LD_INT 5
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 3
52285: PUSH
52286: LD_INT 4
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: LD_INT 3
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 5
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: LD_INT 5
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52370: LD_ADDR_VAR 0 33
52374: PUSH
52375: LD_INT 4
52377: NEG
52378: PUSH
52379: LD_INT 4
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 4
52389: NEG
52390: PUSH
52391: LD_INT 5
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 3
52401: NEG
52402: PUSH
52403: LD_INT 4
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: LD_INT 3
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 4
52425: NEG
52426: PUSH
52427: LD_INT 3
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 5
52437: NEG
52438: PUSH
52439: LD_INT 4
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 5
52449: NEG
52450: PUSH
52451: LD_INT 5
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: NEG
52462: PUSH
52463: LD_INT 5
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 5
52473: NEG
52474: PUSH
52475: LD_INT 3
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 4
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 3
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 4
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: LD_INT 4
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 4
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 4
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 5
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 5
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 4
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 3
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 3
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 3
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 5
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 3
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 4
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 4
52710: PUSH
52711: LD_INT 4
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: LD_INT 4
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 3
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 4
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: LD_INT 4
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 4
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 3
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 4
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: LD_INT 5
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 5
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 4
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 3
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: LD_INT 5
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: NEG
52853: PUSH
52854: LD_INT 3
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52908: LD_ADDR_VAR 0 34
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 4
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 5
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 4
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 3
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 3
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: LD_INT 4
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 5
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: LD_INT 3
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: LD_INT 5
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 3
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 3
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 4
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 4
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 4
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 4
53110: PUSH
53111: LD_INT 4
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 4
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 5
53130: PUSH
53131: LD_INT 4
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 5
53140: PUSH
53141: LD_INT 5
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 4
53150: PUSH
53151: LD_INT 5
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: LD_INT 4
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 3
53170: PUSH
53171: LD_INT 3
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 5
53180: PUSH
53181: LD_INT 3
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 3
53190: PUSH
53191: LD_INT 5
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: LD_INT 4
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: LD_INT 4
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: LD_INT 4
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 4
53293: NEG
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 4
53304: NEG
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 3
53316: NEG
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 3
53327: NEG
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 4
53338: NEG
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 5
53349: NEG
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 5
53360: NEG
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 5
53372: NEG
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: NEG
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: ST_TO_ADDR
// end ; end ;
53440: GO 53443
53442: POP
// case btype of b_depot , b_warehouse :
53443: LD_VAR 0 1
53447: PUSH
53448: LD_INT 0
53450: DOUBLE
53451: EQUAL
53452: IFTRUE 53462
53454: LD_INT 1
53456: DOUBLE
53457: EQUAL
53458: IFTRUE 53462
53460: GO 53663
53462: POP
// case nation of nation_american :
53463: LD_VAR 0 5
53467: PUSH
53468: LD_INT 1
53470: DOUBLE
53471: EQUAL
53472: IFTRUE 53476
53474: GO 53532
53476: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53477: LD_ADDR_VAR 0 9
53481: PUSH
53482: LD_VAR 0 11
53486: PUSH
53487: LD_VAR 0 12
53491: PUSH
53492: LD_VAR 0 13
53496: PUSH
53497: LD_VAR 0 14
53501: PUSH
53502: LD_VAR 0 15
53506: PUSH
53507: LD_VAR 0 16
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: PUSH
53520: LD_VAR 0 4
53524: PUSH
53525: LD_INT 1
53527: PLUS
53528: ARRAY
53529: ST_TO_ADDR
53530: GO 53661
53532: LD_INT 2
53534: DOUBLE
53535: EQUAL
53536: IFTRUE 53540
53538: GO 53596
53540: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53541: LD_ADDR_VAR 0 9
53545: PUSH
53546: LD_VAR 0 17
53550: PUSH
53551: LD_VAR 0 18
53555: PUSH
53556: LD_VAR 0 19
53560: PUSH
53561: LD_VAR 0 20
53565: PUSH
53566: LD_VAR 0 21
53570: PUSH
53571: LD_VAR 0 22
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: PUSH
53584: LD_VAR 0 4
53588: PUSH
53589: LD_INT 1
53591: PLUS
53592: ARRAY
53593: ST_TO_ADDR
53594: GO 53661
53596: LD_INT 3
53598: DOUBLE
53599: EQUAL
53600: IFTRUE 53604
53602: GO 53660
53604: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53605: LD_ADDR_VAR 0 9
53609: PUSH
53610: LD_VAR 0 23
53614: PUSH
53615: LD_VAR 0 24
53619: PUSH
53620: LD_VAR 0 25
53624: PUSH
53625: LD_VAR 0 26
53629: PUSH
53630: LD_VAR 0 27
53634: PUSH
53635: LD_VAR 0 28
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: PUSH
53648: LD_VAR 0 4
53652: PUSH
53653: LD_INT 1
53655: PLUS
53656: ARRAY
53657: ST_TO_ADDR
53658: GO 53661
53660: POP
53661: GO 54216
53663: LD_INT 2
53665: DOUBLE
53666: EQUAL
53667: IFTRUE 53677
53669: LD_INT 3
53671: DOUBLE
53672: EQUAL
53673: IFTRUE 53677
53675: GO 53733
53677: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53678: LD_ADDR_VAR 0 9
53682: PUSH
53683: LD_VAR 0 29
53687: PUSH
53688: LD_VAR 0 30
53692: PUSH
53693: LD_VAR 0 31
53697: PUSH
53698: LD_VAR 0 32
53702: PUSH
53703: LD_VAR 0 33
53707: PUSH
53708: LD_VAR 0 34
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: PUSH
53721: LD_VAR 0 4
53725: PUSH
53726: LD_INT 1
53728: PLUS
53729: ARRAY
53730: ST_TO_ADDR
53731: GO 54216
53733: LD_INT 16
53735: DOUBLE
53736: EQUAL
53737: IFTRUE 53795
53739: LD_INT 17
53741: DOUBLE
53742: EQUAL
53743: IFTRUE 53795
53745: LD_INT 18
53747: DOUBLE
53748: EQUAL
53749: IFTRUE 53795
53751: LD_INT 19
53753: DOUBLE
53754: EQUAL
53755: IFTRUE 53795
53757: LD_INT 22
53759: DOUBLE
53760: EQUAL
53761: IFTRUE 53795
53763: LD_INT 20
53765: DOUBLE
53766: EQUAL
53767: IFTRUE 53795
53769: LD_INT 21
53771: DOUBLE
53772: EQUAL
53773: IFTRUE 53795
53775: LD_INT 23
53777: DOUBLE
53778: EQUAL
53779: IFTRUE 53795
53781: LD_INT 24
53783: DOUBLE
53784: EQUAL
53785: IFTRUE 53795
53787: LD_INT 25
53789: DOUBLE
53790: EQUAL
53791: IFTRUE 53795
53793: GO 53851
53795: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53796: LD_ADDR_VAR 0 9
53800: PUSH
53801: LD_VAR 0 35
53805: PUSH
53806: LD_VAR 0 36
53810: PUSH
53811: LD_VAR 0 37
53815: PUSH
53816: LD_VAR 0 38
53820: PUSH
53821: LD_VAR 0 39
53825: PUSH
53826: LD_VAR 0 40
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: PUSH
53839: LD_VAR 0 4
53843: PUSH
53844: LD_INT 1
53846: PLUS
53847: ARRAY
53848: ST_TO_ADDR
53849: GO 54216
53851: LD_INT 6
53853: DOUBLE
53854: EQUAL
53855: IFTRUE 53907
53857: LD_INT 7
53859: DOUBLE
53860: EQUAL
53861: IFTRUE 53907
53863: LD_INT 8
53865: DOUBLE
53866: EQUAL
53867: IFTRUE 53907
53869: LD_INT 13
53871: DOUBLE
53872: EQUAL
53873: IFTRUE 53907
53875: LD_INT 12
53877: DOUBLE
53878: EQUAL
53879: IFTRUE 53907
53881: LD_INT 15
53883: DOUBLE
53884: EQUAL
53885: IFTRUE 53907
53887: LD_INT 11
53889: DOUBLE
53890: EQUAL
53891: IFTRUE 53907
53893: LD_INT 14
53895: DOUBLE
53896: EQUAL
53897: IFTRUE 53907
53899: LD_INT 10
53901: DOUBLE
53902: EQUAL
53903: IFTRUE 53907
53905: GO 53963
53907: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53908: LD_ADDR_VAR 0 9
53912: PUSH
53913: LD_VAR 0 41
53917: PUSH
53918: LD_VAR 0 42
53922: PUSH
53923: LD_VAR 0 43
53927: PUSH
53928: LD_VAR 0 44
53932: PUSH
53933: LD_VAR 0 45
53937: PUSH
53938: LD_VAR 0 46
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: PUSH
53951: LD_VAR 0 4
53955: PUSH
53956: LD_INT 1
53958: PLUS
53959: ARRAY
53960: ST_TO_ADDR
53961: GO 54216
53963: LD_INT 36
53965: DOUBLE
53966: EQUAL
53967: IFTRUE 53971
53969: GO 54027
53971: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53972: LD_ADDR_VAR 0 9
53976: PUSH
53977: LD_VAR 0 47
53981: PUSH
53982: LD_VAR 0 48
53986: PUSH
53987: LD_VAR 0 49
53991: PUSH
53992: LD_VAR 0 50
53996: PUSH
53997: LD_VAR 0 51
54001: PUSH
54002: LD_VAR 0 52
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: PUSH
54015: LD_VAR 0 4
54019: PUSH
54020: LD_INT 1
54022: PLUS
54023: ARRAY
54024: ST_TO_ADDR
54025: GO 54216
54027: LD_INT 4
54029: DOUBLE
54030: EQUAL
54031: IFTRUE 54053
54033: LD_INT 5
54035: DOUBLE
54036: EQUAL
54037: IFTRUE 54053
54039: LD_INT 34
54041: DOUBLE
54042: EQUAL
54043: IFTRUE 54053
54045: LD_INT 37
54047: DOUBLE
54048: EQUAL
54049: IFTRUE 54053
54051: GO 54109
54053: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54054: LD_ADDR_VAR 0 9
54058: PUSH
54059: LD_VAR 0 53
54063: PUSH
54064: LD_VAR 0 54
54068: PUSH
54069: LD_VAR 0 55
54073: PUSH
54074: LD_VAR 0 56
54078: PUSH
54079: LD_VAR 0 57
54083: PUSH
54084: LD_VAR 0 58
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: PUSH
54097: LD_VAR 0 4
54101: PUSH
54102: LD_INT 1
54104: PLUS
54105: ARRAY
54106: ST_TO_ADDR
54107: GO 54216
54109: LD_INT 31
54111: DOUBLE
54112: EQUAL
54113: IFTRUE 54159
54115: LD_INT 32
54117: DOUBLE
54118: EQUAL
54119: IFTRUE 54159
54121: LD_INT 33
54123: DOUBLE
54124: EQUAL
54125: IFTRUE 54159
54127: LD_INT 27
54129: DOUBLE
54130: EQUAL
54131: IFTRUE 54159
54133: LD_INT 26
54135: DOUBLE
54136: EQUAL
54137: IFTRUE 54159
54139: LD_INT 28
54141: DOUBLE
54142: EQUAL
54143: IFTRUE 54159
54145: LD_INT 29
54147: DOUBLE
54148: EQUAL
54149: IFTRUE 54159
54151: LD_INT 30
54153: DOUBLE
54154: EQUAL
54155: IFTRUE 54159
54157: GO 54215
54159: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54160: LD_ADDR_VAR 0 9
54164: PUSH
54165: LD_VAR 0 59
54169: PUSH
54170: LD_VAR 0 60
54174: PUSH
54175: LD_VAR 0 61
54179: PUSH
54180: LD_VAR 0 62
54184: PUSH
54185: LD_VAR 0 63
54189: PUSH
54190: LD_VAR 0 64
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: PUSH
54203: LD_VAR 0 4
54207: PUSH
54208: LD_INT 1
54210: PLUS
54211: ARRAY
54212: ST_TO_ADDR
54213: GO 54216
54215: POP
// temp_list2 = [ ] ;
54216: LD_ADDR_VAR 0 10
54220: PUSH
54221: EMPTY
54222: ST_TO_ADDR
// for i in temp_list do
54223: LD_ADDR_VAR 0 8
54227: PUSH
54228: LD_VAR 0 9
54232: PUSH
54233: FOR_IN
54234: IFFALSE 54286
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54236: LD_ADDR_VAR 0 10
54240: PUSH
54241: LD_VAR 0 10
54245: PUSH
54246: LD_VAR 0 8
54250: PUSH
54251: LD_INT 1
54253: ARRAY
54254: PUSH
54255: LD_VAR 0 2
54259: PLUS
54260: PUSH
54261: LD_VAR 0 8
54265: PUSH
54266: LD_INT 2
54268: ARRAY
54269: PUSH
54270: LD_VAR 0 3
54274: PLUS
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: EMPTY
54281: LIST
54282: ADD
54283: ST_TO_ADDR
54284: GO 54233
54286: POP
54287: POP
// result = temp_list2 ;
54288: LD_ADDR_VAR 0 7
54292: PUSH
54293: LD_VAR 0 10
54297: ST_TO_ADDR
// end ;
54298: LD_VAR 0 7
54302: RET
// export function EnemyInRange ( unit , dist ) ; begin
54303: LD_INT 0
54305: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54306: LD_ADDR_VAR 0 3
54310: PUSH
54311: LD_VAR 0 1
54315: PPUSH
54316: CALL_OW 255
54320: PPUSH
54321: LD_VAR 0 1
54325: PPUSH
54326: CALL_OW 250
54330: PPUSH
54331: LD_VAR 0 1
54335: PPUSH
54336: CALL_OW 251
54340: PPUSH
54341: LD_VAR 0 2
54345: PPUSH
54346: CALL 27705 0 4
54350: PUSH
54351: LD_INT 4
54353: ARRAY
54354: ST_TO_ADDR
// end ;
54355: LD_VAR 0 3
54359: RET
// export function PlayerSeeMe ( unit ) ; begin
54360: LD_INT 0
54362: PPUSH
// result := See ( your_side , unit ) ;
54363: LD_ADDR_VAR 0 2
54367: PUSH
54368: LD_OWVAR 2
54372: PPUSH
54373: LD_VAR 0 1
54377: PPUSH
54378: CALL_OW 292
54382: ST_TO_ADDR
// end ;
54383: LD_VAR 0 2
54387: RET
// export function ReverseDir ( unit ) ; begin
54388: LD_INT 0
54390: PPUSH
// if not unit then
54391: LD_VAR 0 1
54395: NOT
54396: IFFALSE 54400
// exit ;
54398: GO 54423
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54400: LD_ADDR_VAR 0 2
54404: PUSH
54405: LD_VAR 0 1
54409: PPUSH
54410: CALL_OW 254
54414: PUSH
54415: LD_INT 3
54417: PLUS
54418: PUSH
54419: LD_INT 6
54421: MOD
54422: ST_TO_ADDR
// end ;
54423: LD_VAR 0 2
54427: RET
// export function ReverseArray ( array ) ; var i ; begin
54428: LD_INT 0
54430: PPUSH
54431: PPUSH
// if not array then
54432: LD_VAR 0 1
54436: NOT
54437: IFFALSE 54441
// exit ;
54439: GO 54496
// result := [ ] ;
54441: LD_ADDR_VAR 0 2
54445: PUSH
54446: EMPTY
54447: ST_TO_ADDR
// for i := array downto 1 do
54448: LD_ADDR_VAR 0 3
54452: PUSH
54453: DOUBLE
54454: LD_VAR 0 1
54458: INC
54459: ST_TO_ADDR
54460: LD_INT 1
54462: PUSH
54463: FOR_DOWNTO
54464: IFFALSE 54494
// result := Join ( result , array [ i ] ) ;
54466: LD_ADDR_VAR 0 2
54470: PUSH
54471: LD_VAR 0 2
54475: PPUSH
54476: LD_VAR 0 1
54480: PUSH
54481: LD_VAR 0 3
54485: ARRAY
54486: PPUSH
54487: CALL 59140 0 2
54491: ST_TO_ADDR
54492: GO 54463
54494: POP
54495: POP
// end ;
54496: LD_VAR 0 2
54500: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54501: LD_INT 0
54503: PPUSH
54504: PPUSH
54505: PPUSH
54506: PPUSH
54507: PPUSH
54508: PPUSH
// if not unit or not hexes then
54509: LD_VAR 0 1
54513: NOT
54514: PUSH
54515: LD_VAR 0 2
54519: NOT
54520: OR
54521: IFFALSE 54525
// exit ;
54523: GO 54648
// dist := 9999 ;
54525: LD_ADDR_VAR 0 5
54529: PUSH
54530: LD_INT 9999
54532: ST_TO_ADDR
// for i = 1 to hexes do
54533: LD_ADDR_VAR 0 4
54537: PUSH
54538: DOUBLE
54539: LD_INT 1
54541: DEC
54542: ST_TO_ADDR
54543: LD_VAR 0 2
54547: PUSH
54548: FOR_TO
54549: IFFALSE 54636
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54551: LD_ADDR_VAR 0 6
54555: PUSH
54556: LD_VAR 0 1
54560: PPUSH
54561: LD_VAR 0 2
54565: PUSH
54566: LD_VAR 0 4
54570: ARRAY
54571: PUSH
54572: LD_INT 1
54574: ARRAY
54575: PPUSH
54576: LD_VAR 0 2
54580: PUSH
54581: LD_VAR 0 4
54585: ARRAY
54586: PUSH
54587: LD_INT 2
54589: ARRAY
54590: PPUSH
54591: CALL_OW 297
54595: ST_TO_ADDR
// if tdist < dist then
54596: LD_VAR 0 6
54600: PUSH
54601: LD_VAR 0 5
54605: LESS
54606: IFFALSE 54634
// begin hex := hexes [ i ] ;
54608: LD_ADDR_VAR 0 8
54612: PUSH
54613: LD_VAR 0 2
54617: PUSH
54618: LD_VAR 0 4
54622: ARRAY
54623: ST_TO_ADDR
// dist := tdist ;
54624: LD_ADDR_VAR 0 5
54628: PUSH
54629: LD_VAR 0 6
54633: ST_TO_ADDR
// end ; end ;
54634: GO 54548
54636: POP
54637: POP
// result := hex ;
54638: LD_ADDR_VAR 0 3
54642: PUSH
54643: LD_VAR 0 8
54647: ST_TO_ADDR
// end ;
54648: LD_VAR 0 3
54652: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54653: LD_INT 0
54655: PPUSH
54656: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54657: LD_VAR 0 1
54661: NOT
54662: PUSH
54663: LD_VAR 0 1
54667: PUSH
54668: LD_INT 21
54670: PUSH
54671: LD_INT 2
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 23
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PPUSH
54692: CALL_OW 69
54696: IN
54697: NOT
54698: OR
54699: IFFALSE 54703
// exit ;
54701: GO 54750
// for i = 1 to 3 do
54703: LD_ADDR_VAR 0 3
54707: PUSH
54708: DOUBLE
54709: LD_INT 1
54711: DEC
54712: ST_TO_ADDR
54713: LD_INT 3
54715: PUSH
54716: FOR_TO
54717: IFFALSE 54748
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54719: LD_VAR 0 1
54723: PPUSH
54724: CALL_OW 250
54728: PPUSH
54729: LD_VAR 0 1
54733: PPUSH
54734: CALL_OW 251
54738: PPUSH
54739: LD_INT 1
54741: PPUSH
54742: CALL_OW 453
54746: GO 54716
54748: POP
54749: POP
// end ;
54750: LD_VAR 0 2
54754: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54755: LD_INT 0
54757: PPUSH
54758: PPUSH
54759: PPUSH
54760: PPUSH
54761: PPUSH
54762: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54763: LD_VAR 0 1
54767: NOT
54768: PUSH
54769: LD_VAR 0 2
54773: NOT
54774: OR
54775: PUSH
54776: LD_VAR 0 1
54780: PPUSH
54781: CALL_OW 314
54785: OR
54786: IFFALSE 54790
// exit ;
54788: GO 55257
// if GetLives ( i ) < 250 then
54790: LD_VAR 0 4
54794: PPUSH
54795: CALL_OW 256
54799: PUSH
54800: LD_INT 250
54802: LESS
54803: IFFALSE 54816
// begin ComAutodestruct ( i ) ;
54805: LD_VAR 0 4
54809: PPUSH
54810: CALL 54653 0 1
// exit ;
54814: GO 55257
// end ; x := GetX ( enemy_unit ) ;
54816: LD_ADDR_VAR 0 7
54820: PUSH
54821: LD_VAR 0 2
54825: PPUSH
54826: CALL_OW 250
54830: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54831: LD_ADDR_VAR 0 8
54835: PUSH
54836: LD_VAR 0 2
54840: PPUSH
54841: CALL_OW 251
54845: ST_TO_ADDR
// if not x or not y then
54846: LD_VAR 0 7
54850: NOT
54851: PUSH
54852: LD_VAR 0 8
54856: NOT
54857: OR
54858: IFFALSE 54862
// exit ;
54860: GO 55257
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54862: LD_ADDR_VAR 0 6
54866: PUSH
54867: LD_VAR 0 7
54871: PPUSH
54872: LD_INT 0
54874: PPUSH
54875: LD_INT 4
54877: PPUSH
54878: CALL_OW 272
54882: PUSH
54883: LD_VAR 0 8
54887: PPUSH
54888: LD_INT 0
54890: PPUSH
54891: LD_INT 4
54893: PPUSH
54894: CALL_OW 273
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_VAR 0 7
54907: PPUSH
54908: LD_INT 1
54910: PPUSH
54911: LD_INT 4
54913: PPUSH
54914: CALL_OW 272
54918: PUSH
54919: LD_VAR 0 8
54923: PPUSH
54924: LD_INT 1
54926: PPUSH
54927: LD_INT 4
54929: PPUSH
54930: CALL_OW 273
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_VAR 0 7
54943: PPUSH
54944: LD_INT 2
54946: PPUSH
54947: LD_INT 4
54949: PPUSH
54950: CALL_OW 272
54954: PUSH
54955: LD_VAR 0 8
54959: PPUSH
54960: LD_INT 2
54962: PPUSH
54963: LD_INT 4
54965: PPUSH
54966: CALL_OW 273
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_VAR 0 7
54979: PPUSH
54980: LD_INT 3
54982: PPUSH
54983: LD_INT 4
54985: PPUSH
54986: CALL_OW 272
54990: PUSH
54991: LD_VAR 0 8
54995: PPUSH
54996: LD_INT 3
54998: PPUSH
54999: LD_INT 4
55001: PPUSH
55002: CALL_OW 273
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_VAR 0 7
55015: PPUSH
55016: LD_INT 4
55018: PPUSH
55019: LD_INT 4
55021: PPUSH
55022: CALL_OW 272
55026: PUSH
55027: LD_VAR 0 8
55031: PPUSH
55032: LD_INT 4
55034: PPUSH
55035: LD_INT 4
55037: PPUSH
55038: CALL_OW 273
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_VAR 0 7
55051: PPUSH
55052: LD_INT 5
55054: PPUSH
55055: LD_INT 4
55057: PPUSH
55058: CALL_OW 272
55062: PUSH
55063: LD_VAR 0 8
55067: PPUSH
55068: LD_INT 5
55070: PPUSH
55071: LD_INT 4
55073: PPUSH
55074: CALL_OW 273
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: ST_TO_ADDR
// for i = tmp downto 1 do
55091: LD_ADDR_VAR 0 4
55095: PUSH
55096: DOUBLE
55097: LD_VAR 0 6
55101: INC
55102: ST_TO_ADDR
55103: LD_INT 1
55105: PUSH
55106: FOR_DOWNTO
55107: IFFALSE 55208
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55109: LD_VAR 0 6
55113: PUSH
55114: LD_VAR 0 4
55118: ARRAY
55119: PUSH
55120: LD_INT 1
55122: ARRAY
55123: PPUSH
55124: LD_VAR 0 6
55128: PUSH
55129: LD_VAR 0 4
55133: ARRAY
55134: PUSH
55135: LD_INT 2
55137: ARRAY
55138: PPUSH
55139: CALL_OW 488
55143: NOT
55144: PUSH
55145: LD_VAR 0 6
55149: PUSH
55150: LD_VAR 0 4
55154: ARRAY
55155: PUSH
55156: LD_INT 1
55158: ARRAY
55159: PPUSH
55160: LD_VAR 0 6
55164: PUSH
55165: LD_VAR 0 4
55169: ARRAY
55170: PUSH
55171: LD_INT 2
55173: ARRAY
55174: PPUSH
55175: CALL_OW 428
55179: PUSH
55180: LD_INT 0
55182: NONEQUAL
55183: OR
55184: IFFALSE 55206
// tmp := Delete ( tmp , i ) ;
55186: LD_ADDR_VAR 0 6
55190: PUSH
55191: LD_VAR 0 6
55195: PPUSH
55196: LD_VAR 0 4
55200: PPUSH
55201: CALL_OW 3
55205: ST_TO_ADDR
55206: GO 55106
55208: POP
55209: POP
// j := GetClosestHex ( unit , tmp ) ;
55210: LD_ADDR_VAR 0 5
55214: PUSH
55215: LD_VAR 0 1
55219: PPUSH
55220: LD_VAR 0 6
55224: PPUSH
55225: CALL 54501 0 2
55229: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55230: LD_VAR 0 1
55234: PPUSH
55235: LD_VAR 0 5
55239: PUSH
55240: LD_INT 1
55242: ARRAY
55243: PPUSH
55244: LD_VAR 0 5
55248: PUSH
55249: LD_INT 2
55251: ARRAY
55252: PPUSH
55253: CALL_OW 111
// end ;
55257: LD_VAR 0 3
55261: RET
// export function PrepareApemanSoldier ( ) ; begin
55262: LD_INT 0
55264: PPUSH
// uc_nation := 0 ;
55265: LD_ADDR_OWVAR 21
55269: PUSH
55270: LD_INT 0
55272: ST_TO_ADDR
// hc_sex := sex_male ;
55273: LD_ADDR_OWVAR 27
55277: PUSH
55278: LD_INT 1
55280: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55281: LD_ADDR_OWVAR 28
55285: PUSH
55286: LD_INT 15
55288: ST_TO_ADDR
// hc_gallery :=  ;
55289: LD_ADDR_OWVAR 33
55293: PUSH
55294: LD_STRING 
55296: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55297: LD_ADDR_OWVAR 31
55301: PUSH
55302: LD_INT 0
55304: PPUSH
55305: LD_INT 3
55307: PPUSH
55308: CALL_OW 12
55312: PUSH
55313: LD_INT 0
55315: PPUSH
55316: LD_INT 3
55318: PPUSH
55319: CALL_OW 12
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: ST_TO_ADDR
// end ;
55336: LD_VAR 0 1
55340: RET
// export function PrepareApemanEngineer ( ) ; begin
55341: LD_INT 0
55343: PPUSH
// uc_nation := 0 ;
55344: LD_ADDR_OWVAR 21
55348: PUSH
55349: LD_INT 0
55351: ST_TO_ADDR
// hc_sex := sex_male ;
55352: LD_ADDR_OWVAR 27
55356: PUSH
55357: LD_INT 1
55359: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55360: LD_ADDR_OWVAR 28
55364: PUSH
55365: LD_INT 16
55367: ST_TO_ADDR
// hc_gallery :=  ;
55368: LD_ADDR_OWVAR 33
55372: PUSH
55373: LD_STRING 
55375: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55376: LD_ADDR_OWVAR 31
55380: PUSH
55381: LD_INT 0
55383: PPUSH
55384: LD_INT 3
55386: PPUSH
55387: CALL_OW 12
55391: PUSH
55392: LD_INT 0
55394: PPUSH
55395: LD_INT 3
55397: PPUSH
55398: CALL_OW 12
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: ST_TO_ADDR
// end ;
55415: LD_VAR 0 1
55419: RET
// export function PrepareApeman ( agressivity ) ; begin
55420: LD_INT 0
55422: PPUSH
// uc_side := 0 ;
55423: LD_ADDR_OWVAR 20
55427: PUSH
55428: LD_INT 0
55430: ST_TO_ADDR
// uc_nation := 0 ;
55431: LD_ADDR_OWVAR 21
55435: PUSH
55436: LD_INT 0
55438: ST_TO_ADDR
// hc_sex := sex_male ;
55439: LD_ADDR_OWVAR 27
55443: PUSH
55444: LD_INT 1
55446: ST_TO_ADDR
// hc_class := class_apeman ;
55447: LD_ADDR_OWVAR 28
55451: PUSH
55452: LD_INT 12
55454: ST_TO_ADDR
// hc_gallery :=  ;
55455: LD_ADDR_OWVAR 33
55459: PUSH
55460: LD_STRING 
55462: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55463: LD_ADDR_OWVAR 35
55467: PUSH
55468: LD_VAR 0 1
55472: NEG
55473: PPUSH
55474: LD_VAR 0 1
55478: PPUSH
55479: CALL_OW 12
55483: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55484: LD_ADDR_OWVAR 31
55488: PUSH
55489: LD_INT 0
55491: PPUSH
55492: LD_INT 3
55494: PPUSH
55495: CALL_OW 12
55499: PUSH
55500: LD_INT 0
55502: PPUSH
55503: LD_INT 3
55505: PPUSH
55506: CALL_OW 12
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: ST_TO_ADDR
// end ;
55523: LD_VAR 0 2
55527: RET
// export function PrepareTiger ( agressivity ) ; begin
55528: LD_INT 0
55530: PPUSH
// uc_side := 0 ;
55531: LD_ADDR_OWVAR 20
55535: PUSH
55536: LD_INT 0
55538: ST_TO_ADDR
// uc_nation := 0 ;
55539: LD_ADDR_OWVAR 21
55543: PUSH
55544: LD_INT 0
55546: ST_TO_ADDR
// hc_class := class_tiger ;
55547: LD_ADDR_OWVAR 28
55551: PUSH
55552: LD_INT 14
55554: ST_TO_ADDR
// hc_gallery :=  ;
55555: LD_ADDR_OWVAR 33
55559: PUSH
55560: LD_STRING 
55562: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55563: LD_ADDR_OWVAR 35
55567: PUSH
55568: LD_VAR 0 1
55572: NEG
55573: PPUSH
55574: LD_VAR 0 1
55578: PPUSH
55579: CALL_OW 12
55583: ST_TO_ADDR
// end ;
55584: LD_VAR 0 2
55588: RET
// export function PrepareEnchidna ( ) ; begin
55589: LD_INT 0
55591: PPUSH
// uc_side := 0 ;
55592: LD_ADDR_OWVAR 20
55596: PUSH
55597: LD_INT 0
55599: ST_TO_ADDR
// uc_nation := 0 ;
55600: LD_ADDR_OWVAR 21
55604: PUSH
55605: LD_INT 0
55607: ST_TO_ADDR
// hc_class := class_baggie ;
55608: LD_ADDR_OWVAR 28
55612: PUSH
55613: LD_INT 13
55615: ST_TO_ADDR
// hc_gallery :=  ;
55616: LD_ADDR_OWVAR 33
55620: PUSH
55621: LD_STRING 
55623: ST_TO_ADDR
// end ;
55624: LD_VAR 0 1
55628: RET
// export function PrepareFrog ( ) ; begin
55629: LD_INT 0
55631: PPUSH
// uc_side := 0 ;
55632: LD_ADDR_OWVAR 20
55636: PUSH
55637: LD_INT 0
55639: ST_TO_ADDR
// uc_nation := 0 ;
55640: LD_ADDR_OWVAR 21
55644: PUSH
55645: LD_INT 0
55647: ST_TO_ADDR
// hc_class := class_frog ;
55648: LD_ADDR_OWVAR 28
55652: PUSH
55653: LD_INT 19
55655: ST_TO_ADDR
// hc_gallery :=  ;
55656: LD_ADDR_OWVAR 33
55660: PUSH
55661: LD_STRING 
55663: ST_TO_ADDR
// end ;
55664: LD_VAR 0 1
55668: RET
// export function PrepareFish ( ) ; begin
55669: LD_INT 0
55671: PPUSH
// uc_side := 0 ;
55672: LD_ADDR_OWVAR 20
55676: PUSH
55677: LD_INT 0
55679: ST_TO_ADDR
// uc_nation := 0 ;
55680: LD_ADDR_OWVAR 21
55684: PUSH
55685: LD_INT 0
55687: ST_TO_ADDR
// hc_class := class_fish ;
55688: LD_ADDR_OWVAR 28
55692: PUSH
55693: LD_INT 20
55695: ST_TO_ADDR
// hc_gallery :=  ;
55696: LD_ADDR_OWVAR 33
55700: PUSH
55701: LD_STRING 
55703: ST_TO_ADDR
// end ;
55704: LD_VAR 0 1
55708: RET
// export function PrepareBird ( ) ; begin
55709: LD_INT 0
55711: PPUSH
// uc_side := 0 ;
55712: LD_ADDR_OWVAR 20
55716: PUSH
55717: LD_INT 0
55719: ST_TO_ADDR
// uc_nation := 0 ;
55720: LD_ADDR_OWVAR 21
55724: PUSH
55725: LD_INT 0
55727: ST_TO_ADDR
// hc_class := class_phororhacos ;
55728: LD_ADDR_OWVAR 28
55732: PUSH
55733: LD_INT 18
55735: ST_TO_ADDR
// hc_gallery :=  ;
55736: LD_ADDR_OWVAR 33
55740: PUSH
55741: LD_STRING 
55743: ST_TO_ADDR
// end ;
55744: LD_VAR 0 1
55748: RET
// export function PrepareHorse ( ) ; begin
55749: LD_INT 0
55751: PPUSH
// uc_side := 0 ;
55752: LD_ADDR_OWVAR 20
55756: PUSH
55757: LD_INT 0
55759: ST_TO_ADDR
// uc_nation := 0 ;
55760: LD_ADDR_OWVAR 21
55764: PUSH
55765: LD_INT 0
55767: ST_TO_ADDR
// hc_class := class_horse ;
55768: LD_ADDR_OWVAR 28
55772: PUSH
55773: LD_INT 21
55775: ST_TO_ADDR
// hc_gallery :=  ;
55776: LD_ADDR_OWVAR 33
55780: PUSH
55781: LD_STRING 
55783: ST_TO_ADDR
// end ;
55784: LD_VAR 0 1
55788: RET
// export function PrepareMastodont ( ) ; begin
55789: LD_INT 0
55791: PPUSH
// uc_side := 0 ;
55792: LD_ADDR_OWVAR 20
55796: PUSH
55797: LD_INT 0
55799: ST_TO_ADDR
// uc_nation := 0 ;
55800: LD_ADDR_OWVAR 21
55804: PUSH
55805: LD_INT 0
55807: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55808: LD_ADDR_OWVAR 37
55812: PUSH
55813: LD_INT 31
55815: ST_TO_ADDR
// vc_control := control_rider ;
55816: LD_ADDR_OWVAR 38
55820: PUSH
55821: LD_INT 4
55823: ST_TO_ADDR
// end ;
55824: LD_VAR 0 1
55828: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55829: LD_INT 0
55831: PPUSH
55832: PPUSH
55833: PPUSH
// uc_side = 0 ;
55834: LD_ADDR_OWVAR 20
55838: PUSH
55839: LD_INT 0
55841: ST_TO_ADDR
// uc_nation = 0 ;
55842: LD_ADDR_OWVAR 21
55846: PUSH
55847: LD_INT 0
55849: ST_TO_ADDR
// InitHc_All ( ) ;
55850: CALL_OW 584
// InitVc ;
55854: CALL_OW 20
// if mastodonts then
55858: LD_VAR 0 6
55862: IFFALSE 55929
// for i = 1 to mastodonts do
55864: LD_ADDR_VAR 0 11
55868: PUSH
55869: DOUBLE
55870: LD_INT 1
55872: DEC
55873: ST_TO_ADDR
55874: LD_VAR 0 6
55878: PUSH
55879: FOR_TO
55880: IFFALSE 55927
// begin vc_chassis := 31 ;
55882: LD_ADDR_OWVAR 37
55886: PUSH
55887: LD_INT 31
55889: ST_TO_ADDR
// vc_control := control_rider ;
55890: LD_ADDR_OWVAR 38
55894: PUSH
55895: LD_INT 4
55897: ST_TO_ADDR
// animal := CreateVehicle ;
55898: LD_ADDR_VAR 0 12
55902: PUSH
55903: CALL_OW 45
55907: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55908: LD_VAR 0 12
55912: PPUSH
55913: LD_VAR 0 8
55917: PPUSH
55918: LD_INT 0
55920: PPUSH
55921: CALL 58057 0 3
// end ;
55925: GO 55879
55927: POP
55928: POP
// if horses then
55929: LD_VAR 0 5
55933: IFFALSE 56000
// for i = 1 to horses do
55935: LD_ADDR_VAR 0 11
55939: PUSH
55940: DOUBLE
55941: LD_INT 1
55943: DEC
55944: ST_TO_ADDR
55945: LD_VAR 0 5
55949: PUSH
55950: FOR_TO
55951: IFFALSE 55998
// begin hc_class := 21 ;
55953: LD_ADDR_OWVAR 28
55957: PUSH
55958: LD_INT 21
55960: ST_TO_ADDR
// hc_gallery :=  ;
55961: LD_ADDR_OWVAR 33
55965: PUSH
55966: LD_STRING 
55968: ST_TO_ADDR
// animal := CreateHuman ;
55969: LD_ADDR_VAR 0 12
55973: PUSH
55974: CALL_OW 44
55978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55979: LD_VAR 0 12
55983: PPUSH
55984: LD_VAR 0 8
55988: PPUSH
55989: LD_INT 0
55991: PPUSH
55992: CALL 58057 0 3
// end ;
55996: GO 55950
55998: POP
55999: POP
// if birds then
56000: LD_VAR 0 1
56004: IFFALSE 56071
// for i = 1 to birds do
56006: LD_ADDR_VAR 0 11
56010: PUSH
56011: DOUBLE
56012: LD_INT 1
56014: DEC
56015: ST_TO_ADDR
56016: LD_VAR 0 1
56020: PUSH
56021: FOR_TO
56022: IFFALSE 56069
// begin hc_class = 18 ;
56024: LD_ADDR_OWVAR 28
56028: PUSH
56029: LD_INT 18
56031: ST_TO_ADDR
// hc_gallery =  ;
56032: LD_ADDR_OWVAR 33
56036: PUSH
56037: LD_STRING 
56039: ST_TO_ADDR
// animal := CreateHuman ;
56040: LD_ADDR_VAR 0 12
56044: PUSH
56045: CALL_OW 44
56049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56050: LD_VAR 0 12
56054: PPUSH
56055: LD_VAR 0 8
56059: PPUSH
56060: LD_INT 0
56062: PPUSH
56063: CALL 58057 0 3
// end ;
56067: GO 56021
56069: POP
56070: POP
// if tigers then
56071: LD_VAR 0 2
56075: IFFALSE 56159
// for i = 1 to tigers do
56077: LD_ADDR_VAR 0 11
56081: PUSH
56082: DOUBLE
56083: LD_INT 1
56085: DEC
56086: ST_TO_ADDR
56087: LD_VAR 0 2
56091: PUSH
56092: FOR_TO
56093: IFFALSE 56157
// begin hc_class = class_tiger ;
56095: LD_ADDR_OWVAR 28
56099: PUSH
56100: LD_INT 14
56102: ST_TO_ADDR
// hc_gallery =  ;
56103: LD_ADDR_OWVAR 33
56107: PUSH
56108: LD_STRING 
56110: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56111: LD_ADDR_OWVAR 35
56115: PUSH
56116: LD_INT 7
56118: NEG
56119: PPUSH
56120: LD_INT 7
56122: PPUSH
56123: CALL_OW 12
56127: ST_TO_ADDR
// animal := CreateHuman ;
56128: LD_ADDR_VAR 0 12
56132: PUSH
56133: CALL_OW 44
56137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56138: LD_VAR 0 12
56142: PPUSH
56143: LD_VAR 0 8
56147: PPUSH
56148: LD_INT 0
56150: PPUSH
56151: CALL 58057 0 3
// end ;
56155: GO 56092
56157: POP
56158: POP
// if apemans then
56159: LD_VAR 0 3
56163: IFFALSE 56286
// for i = 1 to apemans do
56165: LD_ADDR_VAR 0 11
56169: PUSH
56170: DOUBLE
56171: LD_INT 1
56173: DEC
56174: ST_TO_ADDR
56175: LD_VAR 0 3
56179: PUSH
56180: FOR_TO
56181: IFFALSE 56284
// begin hc_class = class_apeman ;
56183: LD_ADDR_OWVAR 28
56187: PUSH
56188: LD_INT 12
56190: ST_TO_ADDR
// hc_gallery =  ;
56191: LD_ADDR_OWVAR 33
56195: PUSH
56196: LD_STRING 
56198: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56199: LD_ADDR_OWVAR 35
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PPUSH
56208: LD_INT 2
56210: PPUSH
56211: CALL_OW 12
56215: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56216: LD_ADDR_OWVAR 31
56220: PUSH
56221: LD_INT 1
56223: PPUSH
56224: LD_INT 3
56226: PPUSH
56227: CALL_OW 12
56231: PUSH
56232: LD_INT 1
56234: PPUSH
56235: LD_INT 3
56237: PPUSH
56238: CALL_OW 12
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: ST_TO_ADDR
// animal := CreateHuman ;
56255: LD_ADDR_VAR 0 12
56259: PUSH
56260: CALL_OW 44
56264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56265: LD_VAR 0 12
56269: PPUSH
56270: LD_VAR 0 8
56274: PPUSH
56275: LD_INT 0
56277: PPUSH
56278: CALL 58057 0 3
// end ;
56282: GO 56180
56284: POP
56285: POP
// if enchidnas then
56286: LD_VAR 0 4
56290: IFFALSE 56357
// for i = 1 to enchidnas do
56292: LD_ADDR_VAR 0 11
56296: PUSH
56297: DOUBLE
56298: LD_INT 1
56300: DEC
56301: ST_TO_ADDR
56302: LD_VAR 0 4
56306: PUSH
56307: FOR_TO
56308: IFFALSE 56355
// begin hc_class = 13 ;
56310: LD_ADDR_OWVAR 28
56314: PUSH
56315: LD_INT 13
56317: ST_TO_ADDR
// hc_gallery =  ;
56318: LD_ADDR_OWVAR 33
56322: PUSH
56323: LD_STRING 
56325: ST_TO_ADDR
// animal := CreateHuman ;
56326: LD_ADDR_VAR 0 12
56330: PUSH
56331: CALL_OW 44
56335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56336: LD_VAR 0 12
56340: PPUSH
56341: LD_VAR 0 8
56345: PPUSH
56346: LD_INT 0
56348: PPUSH
56349: CALL 58057 0 3
// end ;
56353: GO 56307
56355: POP
56356: POP
// if fishes then
56357: LD_VAR 0 7
56361: IFFALSE 56428
// for i = 1 to fishes do
56363: LD_ADDR_VAR 0 11
56367: PUSH
56368: DOUBLE
56369: LD_INT 1
56371: DEC
56372: ST_TO_ADDR
56373: LD_VAR 0 7
56377: PUSH
56378: FOR_TO
56379: IFFALSE 56426
// begin hc_class = 20 ;
56381: LD_ADDR_OWVAR 28
56385: PUSH
56386: LD_INT 20
56388: ST_TO_ADDR
// hc_gallery =  ;
56389: LD_ADDR_OWVAR 33
56393: PUSH
56394: LD_STRING 
56396: ST_TO_ADDR
// animal := CreateHuman ;
56397: LD_ADDR_VAR 0 12
56401: PUSH
56402: CALL_OW 44
56406: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56407: LD_VAR 0 12
56411: PPUSH
56412: LD_VAR 0 9
56416: PPUSH
56417: LD_INT 0
56419: PPUSH
56420: CALL 58057 0 3
// end ;
56424: GO 56378
56426: POP
56427: POP
// end ;
56428: LD_VAR 0 10
56432: RET
// export function WantHeal ( sci , unit ) ; begin
56433: LD_INT 0
56435: PPUSH
// if GetTaskList ( sci ) > 0 then
56436: LD_VAR 0 1
56440: PPUSH
56441: CALL_OW 437
56445: PUSH
56446: LD_INT 0
56448: GREATER
56449: IFFALSE 56519
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56451: LD_VAR 0 1
56455: PPUSH
56456: CALL_OW 437
56460: PUSH
56461: LD_INT 1
56463: ARRAY
56464: PUSH
56465: LD_INT 1
56467: ARRAY
56468: PUSH
56469: LD_STRING l
56471: EQUAL
56472: PUSH
56473: LD_VAR 0 1
56477: PPUSH
56478: CALL_OW 437
56482: PUSH
56483: LD_INT 1
56485: ARRAY
56486: PUSH
56487: LD_INT 4
56489: ARRAY
56490: PUSH
56491: LD_VAR 0 2
56495: EQUAL
56496: AND
56497: IFFALSE 56509
// result := true else
56499: LD_ADDR_VAR 0 3
56503: PUSH
56504: LD_INT 1
56506: ST_TO_ADDR
56507: GO 56517
// result := false ;
56509: LD_ADDR_VAR 0 3
56513: PUSH
56514: LD_INT 0
56516: ST_TO_ADDR
// end else
56517: GO 56527
// result := false ;
56519: LD_ADDR_VAR 0 3
56523: PUSH
56524: LD_INT 0
56526: ST_TO_ADDR
// end ;
56527: LD_VAR 0 3
56531: RET
// export function HealTarget ( sci ) ; begin
56532: LD_INT 0
56534: PPUSH
// if not sci then
56535: LD_VAR 0 1
56539: NOT
56540: IFFALSE 56544
// exit ;
56542: GO 56609
// result := 0 ;
56544: LD_ADDR_VAR 0 2
56548: PUSH
56549: LD_INT 0
56551: ST_TO_ADDR
// if GetTaskList ( sci ) then
56552: LD_VAR 0 1
56556: PPUSH
56557: CALL_OW 437
56561: IFFALSE 56609
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56563: LD_VAR 0 1
56567: PPUSH
56568: CALL_OW 437
56572: PUSH
56573: LD_INT 1
56575: ARRAY
56576: PUSH
56577: LD_INT 1
56579: ARRAY
56580: PUSH
56581: LD_STRING l
56583: EQUAL
56584: IFFALSE 56609
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56586: LD_ADDR_VAR 0 2
56590: PUSH
56591: LD_VAR 0 1
56595: PPUSH
56596: CALL_OW 437
56600: PUSH
56601: LD_INT 1
56603: ARRAY
56604: PUSH
56605: LD_INT 4
56607: ARRAY
56608: ST_TO_ADDR
// end ;
56609: LD_VAR 0 2
56613: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56614: LD_INT 0
56616: PPUSH
56617: PPUSH
56618: PPUSH
56619: PPUSH
// if not base_units then
56620: LD_VAR 0 1
56624: NOT
56625: IFFALSE 56629
// exit ;
56627: GO 56716
// result := false ;
56629: LD_ADDR_VAR 0 2
56633: PUSH
56634: LD_INT 0
56636: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56637: LD_ADDR_VAR 0 5
56641: PUSH
56642: LD_VAR 0 1
56646: PPUSH
56647: LD_INT 21
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PPUSH
56657: CALL_OW 72
56661: ST_TO_ADDR
// if not tmp then
56662: LD_VAR 0 5
56666: NOT
56667: IFFALSE 56671
// exit ;
56669: GO 56716
// for i in tmp do
56671: LD_ADDR_VAR 0 3
56675: PUSH
56676: LD_VAR 0 5
56680: PUSH
56681: FOR_IN
56682: IFFALSE 56714
// begin result := EnemyInRange ( i , 22 ) ;
56684: LD_ADDR_VAR 0 2
56688: PUSH
56689: LD_VAR 0 3
56693: PPUSH
56694: LD_INT 22
56696: PPUSH
56697: CALL 54303 0 2
56701: ST_TO_ADDR
// if result then
56702: LD_VAR 0 2
56706: IFFALSE 56712
// exit ;
56708: POP
56709: POP
56710: GO 56716
// end ;
56712: GO 56681
56714: POP
56715: POP
// end ;
56716: LD_VAR 0 2
56720: RET
// export function FilterByTag ( units , tag ) ; begin
56721: LD_INT 0
56723: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56724: LD_ADDR_VAR 0 3
56728: PUSH
56729: LD_VAR 0 1
56733: PPUSH
56734: LD_INT 120
56736: PUSH
56737: LD_VAR 0 2
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PPUSH
56746: CALL_OW 72
56750: ST_TO_ADDR
// end ;
56751: LD_VAR 0 3
56755: RET
// export function IsDriver ( un ) ; begin
56756: LD_INT 0
56758: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56759: LD_ADDR_VAR 0 2
56763: PUSH
56764: LD_VAR 0 1
56768: PUSH
56769: LD_INT 55
56771: PUSH
56772: EMPTY
56773: LIST
56774: PPUSH
56775: CALL_OW 69
56779: IN
56780: ST_TO_ADDR
// end ;
56781: LD_VAR 0 2
56785: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56786: LD_INT 0
56788: PPUSH
56789: PPUSH
// list := [ ] ;
56790: LD_ADDR_VAR 0 5
56794: PUSH
56795: EMPTY
56796: ST_TO_ADDR
// case d of 0 :
56797: LD_VAR 0 3
56801: PUSH
56802: LD_INT 0
56804: DOUBLE
56805: EQUAL
56806: IFTRUE 56810
56808: GO 56943
56810: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56811: LD_ADDR_VAR 0 5
56815: PUSH
56816: LD_VAR 0 1
56820: PUSH
56821: LD_INT 4
56823: MINUS
56824: PUSH
56825: LD_VAR 0 2
56829: PUSH
56830: LD_INT 4
56832: MINUS
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: LIST
56841: PUSH
56842: LD_VAR 0 1
56846: PUSH
56847: LD_INT 3
56849: MINUS
56850: PUSH
56851: LD_VAR 0 2
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: LIST
56863: PUSH
56864: LD_VAR 0 1
56868: PUSH
56869: LD_INT 4
56871: PLUS
56872: PUSH
56873: LD_VAR 0 2
56877: PUSH
56878: LD_INT 4
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: PUSH
56886: LD_VAR 0 1
56890: PUSH
56891: LD_INT 3
56893: PLUS
56894: PUSH
56895: LD_VAR 0 2
56899: PUSH
56900: LD_INT 3
56902: PLUS
56903: PUSH
56904: LD_INT 5
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: LIST
56911: PUSH
56912: LD_VAR 0 1
56916: PUSH
56917: LD_VAR 0 2
56921: PUSH
56922: LD_INT 4
56924: PLUS
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: LIST
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: ST_TO_ADDR
// end ; 1 :
56941: GO 57641
56943: LD_INT 1
56945: DOUBLE
56946: EQUAL
56947: IFTRUE 56951
56949: GO 57084
56951: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56952: LD_ADDR_VAR 0 5
56956: PUSH
56957: LD_VAR 0 1
56961: PUSH
56962: LD_VAR 0 2
56966: PUSH
56967: LD_INT 4
56969: MINUS
56970: PUSH
56971: LD_INT 3
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: PUSH
56979: LD_VAR 0 1
56983: PUSH
56984: LD_INT 3
56986: MINUS
56987: PUSH
56988: LD_VAR 0 2
56992: PUSH
56993: LD_INT 3
56995: MINUS
56996: PUSH
56997: LD_INT 2
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: LIST
57004: PUSH
57005: LD_VAR 0 1
57009: PUSH
57010: LD_INT 4
57012: MINUS
57013: PUSH
57014: LD_VAR 0 2
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: LIST
57026: PUSH
57027: LD_VAR 0 1
57031: PUSH
57032: LD_VAR 0 2
57036: PUSH
57037: LD_INT 3
57039: PLUS
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: LIST
57048: PUSH
57049: LD_VAR 0 1
57053: PUSH
57054: LD_INT 4
57056: PLUS
57057: PUSH
57058: LD_VAR 0 2
57062: PUSH
57063: LD_INT 4
57065: PLUS
57066: PUSH
57067: LD_INT 5
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: ST_TO_ADDR
// end ; 2 :
57082: GO 57641
57084: LD_INT 2
57086: DOUBLE
57087: EQUAL
57088: IFTRUE 57092
57090: GO 57221
57092: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57093: LD_ADDR_VAR 0 5
57097: PUSH
57098: LD_VAR 0 1
57102: PUSH
57103: LD_VAR 0 2
57107: PUSH
57108: LD_INT 3
57110: MINUS
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: LIST
57119: PUSH
57120: LD_VAR 0 1
57124: PUSH
57125: LD_INT 4
57127: PLUS
57128: PUSH
57129: LD_VAR 0 2
57133: PUSH
57134: LD_INT 4
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: LIST
57141: PUSH
57142: LD_VAR 0 1
57146: PUSH
57147: LD_VAR 0 2
57151: PUSH
57152: LD_INT 4
57154: PLUS
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: LIST
57163: PUSH
57164: LD_VAR 0 1
57168: PUSH
57169: LD_INT 3
57171: MINUS
57172: PUSH
57173: LD_VAR 0 2
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: LIST
57185: PUSH
57186: LD_VAR 0 1
57190: PUSH
57191: LD_INT 4
57193: MINUS
57194: PUSH
57195: LD_VAR 0 2
57199: PUSH
57200: LD_INT 4
57202: MINUS
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: ST_TO_ADDR
// end ; 3 :
57219: GO 57641
57221: LD_INT 3
57223: DOUBLE
57224: EQUAL
57225: IFTRUE 57229
57227: GO 57362
57229: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57230: LD_ADDR_VAR 0 5
57234: PUSH
57235: LD_VAR 0 1
57239: PUSH
57240: LD_INT 3
57242: PLUS
57243: PUSH
57244: LD_VAR 0 2
57248: PUSH
57249: LD_INT 4
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: LIST
57256: PUSH
57257: LD_VAR 0 1
57261: PUSH
57262: LD_INT 4
57264: PLUS
57265: PUSH
57266: LD_VAR 0 2
57270: PUSH
57271: LD_INT 4
57273: PLUS
57274: PUSH
57275: LD_INT 5
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: LIST
57282: PUSH
57283: LD_VAR 0 1
57287: PUSH
57288: LD_INT 4
57290: MINUS
57291: PUSH
57292: LD_VAR 0 2
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: LIST
57304: PUSH
57305: LD_VAR 0 1
57309: PUSH
57310: LD_VAR 0 2
57314: PUSH
57315: LD_INT 4
57317: MINUS
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: LIST
57326: PUSH
57327: LD_VAR 0 1
57331: PUSH
57332: LD_INT 3
57334: MINUS
57335: PUSH
57336: LD_VAR 0 2
57340: PUSH
57341: LD_INT 3
57343: MINUS
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: LIST
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: ST_TO_ADDR
// end ; 4 :
57360: GO 57641
57362: LD_INT 4
57364: DOUBLE
57365: EQUAL
57366: IFTRUE 57370
57368: GO 57503
57370: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57371: LD_ADDR_VAR 0 5
57375: PUSH
57376: LD_VAR 0 1
57380: PUSH
57381: LD_VAR 0 2
57385: PUSH
57386: LD_INT 4
57388: PLUS
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: LIST
57397: PUSH
57398: LD_VAR 0 1
57402: PUSH
57403: LD_INT 3
57405: PLUS
57406: PUSH
57407: LD_VAR 0 2
57411: PUSH
57412: LD_INT 3
57414: PLUS
57415: PUSH
57416: LD_INT 5
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: LIST
57423: PUSH
57424: LD_VAR 0 1
57428: PUSH
57429: LD_INT 4
57431: PLUS
57432: PUSH
57433: LD_VAR 0 2
57437: PUSH
57438: LD_INT 4
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: PUSH
57446: LD_VAR 0 1
57450: PUSH
57451: LD_VAR 0 2
57455: PUSH
57456: LD_INT 3
57458: MINUS
57459: PUSH
57460: LD_INT 3
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: PUSH
57468: LD_VAR 0 1
57472: PUSH
57473: LD_INT 4
57475: MINUS
57476: PUSH
57477: LD_VAR 0 2
57481: PUSH
57482: LD_INT 4
57484: MINUS
57485: PUSH
57486: LD_INT 2
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: LIST
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: ST_TO_ADDR
// end ; 5 :
57501: GO 57641
57503: LD_INT 5
57505: DOUBLE
57506: EQUAL
57507: IFTRUE 57511
57509: GO 57640
57511: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57512: LD_ADDR_VAR 0 5
57516: PUSH
57517: LD_VAR 0 1
57521: PUSH
57522: LD_INT 4
57524: MINUS
57525: PUSH
57526: LD_VAR 0 2
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: LIST
57538: PUSH
57539: LD_VAR 0 1
57543: PUSH
57544: LD_VAR 0 2
57548: PUSH
57549: LD_INT 4
57551: MINUS
57552: PUSH
57553: LD_INT 3
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: LIST
57560: PUSH
57561: LD_VAR 0 1
57565: PUSH
57566: LD_INT 4
57568: PLUS
57569: PUSH
57570: LD_VAR 0 2
57574: PUSH
57575: LD_INT 4
57577: PLUS
57578: PUSH
57579: LD_INT 5
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: LIST
57586: PUSH
57587: LD_VAR 0 1
57591: PUSH
57592: LD_INT 3
57594: PLUS
57595: PUSH
57596: LD_VAR 0 2
57600: PUSH
57601: LD_INT 4
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: PUSH
57609: LD_VAR 0 1
57613: PUSH
57614: LD_VAR 0 2
57618: PUSH
57619: LD_INT 3
57621: PLUS
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: ST_TO_ADDR
// end ; end ;
57638: GO 57641
57640: POP
// result := list ;
57641: LD_ADDR_VAR 0 4
57645: PUSH
57646: LD_VAR 0 5
57650: ST_TO_ADDR
// end ;
57651: LD_VAR 0 4
57655: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57656: LD_INT 0
57658: PPUSH
57659: PPUSH
57660: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57661: LD_VAR 0 1
57665: NOT
57666: PUSH
57667: LD_VAR 0 2
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: LD_INT 3
57680: PUSH
57681: LD_INT 4
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: IN
57690: NOT
57691: OR
57692: IFFALSE 57696
// exit ;
57694: GO 57779
// tmp := [ ] ;
57696: LD_ADDR_VAR 0 5
57700: PUSH
57701: EMPTY
57702: ST_TO_ADDR
// for i in units do
57703: LD_ADDR_VAR 0 4
57707: PUSH
57708: LD_VAR 0 1
57712: PUSH
57713: FOR_IN
57714: IFFALSE 57748
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57716: LD_ADDR_VAR 0 5
57720: PUSH
57721: LD_VAR 0 5
57725: PPUSH
57726: LD_VAR 0 4
57730: PPUSH
57731: LD_VAR 0 2
57735: PPUSH
57736: CALL_OW 259
57740: PPUSH
57741: CALL 59140 0 2
57745: ST_TO_ADDR
57746: GO 57713
57748: POP
57749: POP
// if not tmp then
57750: LD_VAR 0 5
57754: NOT
57755: IFFALSE 57759
// exit ;
57757: GO 57779
// result := SortListByListDesc ( units , tmp ) ;
57759: LD_ADDR_VAR 0 3
57763: PUSH
57764: LD_VAR 0 1
57768: PPUSH
57769: LD_VAR 0 5
57773: PPUSH
57774: CALL_OW 77
57778: ST_TO_ADDR
// end ;
57779: LD_VAR 0 3
57783: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57784: LD_INT 0
57786: PPUSH
57787: PPUSH
57788: PPUSH
// result := false ;
57789: LD_ADDR_VAR 0 3
57793: PUSH
57794: LD_INT 0
57796: ST_TO_ADDR
// if not building then
57797: LD_VAR 0 2
57801: NOT
57802: IFFALSE 57806
// exit ;
57804: GO 57944
// x := GetX ( building ) ;
57806: LD_ADDR_VAR 0 4
57810: PUSH
57811: LD_VAR 0 2
57815: PPUSH
57816: CALL_OW 250
57820: ST_TO_ADDR
// y := GetY ( building ) ;
57821: LD_ADDR_VAR 0 5
57825: PUSH
57826: LD_VAR 0 2
57830: PPUSH
57831: CALL_OW 251
57835: ST_TO_ADDR
// if not x or not y then
57836: LD_VAR 0 4
57840: NOT
57841: PUSH
57842: LD_VAR 0 5
57846: NOT
57847: OR
57848: IFFALSE 57852
// exit ;
57850: GO 57944
// if GetTaskList ( unit ) then
57852: LD_VAR 0 1
57856: PPUSH
57857: CALL_OW 437
57861: IFFALSE 57944
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57863: LD_STRING e
57865: PUSH
57866: LD_VAR 0 1
57870: PPUSH
57871: CALL_OW 437
57875: PUSH
57876: LD_INT 1
57878: ARRAY
57879: PUSH
57880: LD_INT 1
57882: ARRAY
57883: EQUAL
57884: PUSH
57885: LD_VAR 0 4
57889: PUSH
57890: LD_VAR 0 1
57894: PPUSH
57895: CALL_OW 437
57899: PUSH
57900: LD_INT 1
57902: ARRAY
57903: PUSH
57904: LD_INT 2
57906: ARRAY
57907: EQUAL
57908: AND
57909: PUSH
57910: LD_VAR 0 5
57914: PUSH
57915: LD_VAR 0 1
57919: PPUSH
57920: CALL_OW 437
57924: PUSH
57925: LD_INT 1
57927: ARRAY
57928: PUSH
57929: LD_INT 3
57931: ARRAY
57932: EQUAL
57933: AND
57934: IFFALSE 57944
// result := true end ;
57936: LD_ADDR_VAR 0 3
57940: PUSH
57941: LD_INT 1
57943: ST_TO_ADDR
// end ;
57944: LD_VAR 0 3
57948: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57949: LD_INT 0
57951: PPUSH
// result := false ;
57952: LD_ADDR_VAR 0 4
57956: PUSH
57957: LD_INT 0
57959: ST_TO_ADDR
// if GetTaskList ( unit ) then
57960: LD_VAR 0 1
57964: PPUSH
57965: CALL_OW 437
57969: IFFALSE 58052
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57971: LD_STRING M
57973: PUSH
57974: LD_VAR 0 1
57978: PPUSH
57979: CALL_OW 437
57983: PUSH
57984: LD_INT 1
57986: ARRAY
57987: PUSH
57988: LD_INT 1
57990: ARRAY
57991: EQUAL
57992: PUSH
57993: LD_VAR 0 2
57997: PUSH
57998: LD_VAR 0 1
58002: PPUSH
58003: CALL_OW 437
58007: PUSH
58008: LD_INT 1
58010: ARRAY
58011: PUSH
58012: LD_INT 2
58014: ARRAY
58015: EQUAL
58016: AND
58017: PUSH
58018: LD_VAR 0 3
58022: PUSH
58023: LD_VAR 0 1
58027: PPUSH
58028: CALL_OW 437
58032: PUSH
58033: LD_INT 1
58035: ARRAY
58036: PUSH
58037: LD_INT 3
58039: ARRAY
58040: EQUAL
58041: AND
58042: IFFALSE 58052
// result := true ;
58044: LD_ADDR_VAR 0 4
58048: PUSH
58049: LD_INT 1
58051: ST_TO_ADDR
// end ; end ;
58052: LD_VAR 0 4
58056: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58057: LD_INT 0
58059: PPUSH
58060: PPUSH
58061: PPUSH
58062: PPUSH
// if not unit or not area then
58063: LD_VAR 0 1
58067: NOT
58068: PUSH
58069: LD_VAR 0 2
58073: NOT
58074: OR
58075: IFFALSE 58079
// exit ;
58077: GO 58243
// tmp := AreaToList ( area , i ) ;
58079: LD_ADDR_VAR 0 6
58083: PUSH
58084: LD_VAR 0 2
58088: PPUSH
58089: LD_VAR 0 5
58093: PPUSH
58094: CALL_OW 517
58098: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58099: LD_ADDR_VAR 0 5
58103: PUSH
58104: DOUBLE
58105: LD_INT 1
58107: DEC
58108: ST_TO_ADDR
58109: LD_VAR 0 6
58113: PUSH
58114: LD_INT 1
58116: ARRAY
58117: PUSH
58118: FOR_TO
58119: IFFALSE 58241
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58121: LD_ADDR_VAR 0 7
58125: PUSH
58126: LD_VAR 0 6
58130: PUSH
58131: LD_INT 1
58133: ARRAY
58134: PUSH
58135: LD_VAR 0 5
58139: ARRAY
58140: PUSH
58141: LD_VAR 0 6
58145: PUSH
58146: LD_INT 2
58148: ARRAY
58149: PUSH
58150: LD_VAR 0 5
58154: ARRAY
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58160: LD_VAR 0 7
58164: PUSH
58165: LD_INT 1
58167: ARRAY
58168: PPUSH
58169: LD_VAR 0 7
58173: PUSH
58174: LD_INT 2
58176: ARRAY
58177: PPUSH
58178: CALL_OW 428
58182: PUSH
58183: LD_INT 0
58185: EQUAL
58186: IFFALSE 58239
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58188: LD_VAR 0 1
58192: PPUSH
58193: LD_VAR 0 7
58197: PUSH
58198: LD_INT 1
58200: ARRAY
58201: PPUSH
58202: LD_VAR 0 7
58206: PUSH
58207: LD_INT 2
58209: ARRAY
58210: PPUSH
58211: LD_VAR 0 3
58215: PPUSH
58216: CALL_OW 48
// result := IsPlaced ( unit ) ;
58220: LD_ADDR_VAR 0 4
58224: PUSH
58225: LD_VAR 0 1
58229: PPUSH
58230: CALL_OW 305
58234: ST_TO_ADDR
// exit ;
58235: POP
58236: POP
58237: GO 58243
// end ; end ;
58239: GO 58118
58241: POP
58242: POP
// end ;
58243: LD_VAR 0 4
58247: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58248: LD_INT 0
58250: PPUSH
58251: PPUSH
58252: PPUSH
// if not side or side > 8 then
58253: LD_VAR 0 1
58257: NOT
58258: PUSH
58259: LD_VAR 0 1
58263: PUSH
58264: LD_INT 8
58266: GREATER
58267: OR
58268: IFFALSE 58272
// exit ;
58270: GO 58459
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58272: LD_ADDR_VAR 0 4
58276: PUSH
58277: LD_INT 22
58279: PUSH
58280: LD_VAR 0 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 21
58291: PUSH
58292: LD_INT 3
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PPUSH
58303: CALL_OW 69
58307: ST_TO_ADDR
// if not tmp then
58308: LD_VAR 0 4
58312: NOT
58313: IFFALSE 58317
// exit ;
58315: GO 58459
// enable_addtolog := true ;
58317: LD_ADDR_OWVAR 81
58321: PUSH
58322: LD_INT 1
58324: ST_TO_ADDR
// AddToLog ( [ ) ;
58325: LD_STRING [
58327: PPUSH
58328: CALL_OW 561
// for i in tmp do
58332: LD_ADDR_VAR 0 3
58336: PUSH
58337: LD_VAR 0 4
58341: PUSH
58342: FOR_IN
58343: IFFALSE 58450
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58345: LD_STRING [
58347: PUSH
58348: LD_VAR 0 3
58352: PPUSH
58353: CALL_OW 266
58357: STR
58358: PUSH
58359: LD_STRING , 
58361: STR
58362: PUSH
58363: LD_VAR 0 3
58367: PPUSH
58368: CALL_OW 250
58372: STR
58373: PUSH
58374: LD_STRING , 
58376: STR
58377: PUSH
58378: LD_VAR 0 3
58382: PPUSH
58383: CALL_OW 251
58387: STR
58388: PUSH
58389: LD_STRING , 
58391: STR
58392: PUSH
58393: LD_VAR 0 3
58397: PPUSH
58398: CALL_OW 254
58402: STR
58403: PUSH
58404: LD_STRING , 
58406: STR
58407: PUSH
58408: LD_VAR 0 3
58412: PPUSH
58413: LD_INT 1
58415: PPUSH
58416: CALL_OW 268
58420: STR
58421: PUSH
58422: LD_STRING , 
58424: STR
58425: PUSH
58426: LD_VAR 0 3
58430: PPUSH
58431: LD_INT 2
58433: PPUSH
58434: CALL_OW 268
58438: STR
58439: PUSH
58440: LD_STRING ],
58442: STR
58443: PPUSH
58444: CALL_OW 561
// end ;
58448: GO 58342
58450: POP
58451: POP
// AddToLog ( ]; ) ;
58452: LD_STRING ];
58454: PPUSH
58455: CALL_OW 561
// end ;
58459: LD_VAR 0 2
58463: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58464: LD_INT 0
58466: PPUSH
58467: PPUSH
58468: PPUSH
58469: PPUSH
58470: PPUSH
// if not area or not rate or not max then
58471: LD_VAR 0 1
58475: NOT
58476: PUSH
58477: LD_VAR 0 2
58481: NOT
58482: OR
58483: PUSH
58484: LD_VAR 0 4
58488: NOT
58489: OR
58490: IFFALSE 58494
// exit ;
58492: GO 58683
// while 1 do
58494: LD_INT 1
58496: IFFALSE 58683
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58498: LD_ADDR_VAR 0 9
58502: PUSH
58503: LD_VAR 0 1
58507: PPUSH
58508: LD_INT 1
58510: PPUSH
58511: CALL_OW 287
58515: PUSH
58516: LD_INT 10
58518: MUL
58519: ST_TO_ADDR
// r := rate / 10 ;
58520: LD_ADDR_VAR 0 7
58524: PUSH
58525: LD_VAR 0 2
58529: PUSH
58530: LD_INT 10
58532: DIVREAL
58533: ST_TO_ADDR
// time := 1 1$00 ;
58534: LD_ADDR_VAR 0 8
58538: PUSH
58539: LD_INT 2100
58541: ST_TO_ADDR
// if amount < min then
58542: LD_VAR 0 9
58546: PUSH
58547: LD_VAR 0 3
58551: LESS
58552: IFFALSE 58570
// r := r * 2 else
58554: LD_ADDR_VAR 0 7
58558: PUSH
58559: LD_VAR 0 7
58563: PUSH
58564: LD_INT 2
58566: MUL
58567: ST_TO_ADDR
58568: GO 58596
// if amount > max then
58570: LD_VAR 0 9
58574: PUSH
58575: LD_VAR 0 4
58579: GREATER
58580: IFFALSE 58596
// r := r / 2 ;
58582: LD_ADDR_VAR 0 7
58586: PUSH
58587: LD_VAR 0 7
58591: PUSH
58592: LD_INT 2
58594: DIVREAL
58595: ST_TO_ADDR
// time := time / r ;
58596: LD_ADDR_VAR 0 8
58600: PUSH
58601: LD_VAR 0 8
58605: PUSH
58606: LD_VAR 0 7
58610: DIVREAL
58611: ST_TO_ADDR
// if time < 0 then
58612: LD_VAR 0 8
58616: PUSH
58617: LD_INT 0
58619: LESS
58620: IFFALSE 58637
// time := time * - 1 ;
58622: LD_ADDR_VAR 0 8
58626: PUSH
58627: LD_VAR 0 8
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: MUL
58636: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58637: LD_VAR 0 8
58641: PUSH
58642: LD_INT 35
58644: PPUSH
58645: LD_INT 875
58647: PPUSH
58648: CALL_OW 12
58652: PLUS
58653: PPUSH
58654: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58658: LD_INT 1
58660: PPUSH
58661: LD_INT 5
58663: PPUSH
58664: CALL_OW 12
58668: PPUSH
58669: LD_VAR 0 1
58673: PPUSH
58674: LD_INT 1
58676: PPUSH
58677: CALL_OW 55
// end ;
58681: GO 58494
// end ;
58683: LD_VAR 0 5
58687: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58688: LD_INT 0
58690: PPUSH
58691: PPUSH
58692: PPUSH
58693: PPUSH
58694: PPUSH
58695: PPUSH
58696: PPUSH
58697: PPUSH
// if not turrets or not factories then
58698: LD_VAR 0 1
58702: NOT
58703: PUSH
58704: LD_VAR 0 2
58708: NOT
58709: OR
58710: IFFALSE 58714
// exit ;
58712: GO 59021
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58714: LD_ADDR_VAR 0 10
58718: PUSH
58719: LD_INT 5
58721: PUSH
58722: LD_INT 6
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: LD_INT 4
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: LD_INT 5
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 24
58756: PUSH
58757: LD_INT 25
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 23
58766: PUSH
58767: LD_INT 27
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 42
58780: PUSH
58781: LD_INT 43
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 44
58790: PUSH
58791: LD_INT 46
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 45
58800: PUSH
58801: LD_INT 47
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: LIST
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: LIST
58817: ST_TO_ADDR
// result := [ ] ;
58818: LD_ADDR_VAR 0 3
58822: PUSH
58823: EMPTY
58824: ST_TO_ADDR
// for i in turrets do
58825: LD_ADDR_VAR 0 4
58829: PUSH
58830: LD_VAR 0 1
58834: PUSH
58835: FOR_IN
58836: IFFALSE 59019
// begin nat := GetNation ( i ) ;
58838: LD_ADDR_VAR 0 7
58842: PUSH
58843: LD_VAR 0 4
58847: PPUSH
58848: CALL_OW 248
58852: ST_TO_ADDR
// weapon := 0 ;
58853: LD_ADDR_VAR 0 8
58857: PUSH
58858: LD_INT 0
58860: ST_TO_ADDR
// if not nat then
58861: LD_VAR 0 7
58865: NOT
58866: IFFALSE 58870
// continue ;
58868: GO 58835
// for j in list [ nat ] do
58870: LD_ADDR_VAR 0 5
58874: PUSH
58875: LD_VAR 0 10
58879: PUSH
58880: LD_VAR 0 7
58884: ARRAY
58885: PUSH
58886: FOR_IN
58887: IFFALSE 58928
// if GetBWeapon ( i ) = j [ 1 ] then
58889: LD_VAR 0 4
58893: PPUSH
58894: CALL_OW 269
58898: PUSH
58899: LD_VAR 0 5
58903: PUSH
58904: LD_INT 1
58906: ARRAY
58907: EQUAL
58908: IFFALSE 58926
// begin weapon := j [ 2 ] ;
58910: LD_ADDR_VAR 0 8
58914: PUSH
58915: LD_VAR 0 5
58919: PUSH
58920: LD_INT 2
58922: ARRAY
58923: ST_TO_ADDR
// break ;
58924: GO 58928
// end ;
58926: GO 58886
58928: POP
58929: POP
// if not weapon then
58930: LD_VAR 0 8
58934: NOT
58935: IFFALSE 58939
// continue ;
58937: GO 58835
// for k in factories do
58939: LD_ADDR_VAR 0 6
58943: PUSH
58944: LD_VAR 0 2
58948: PUSH
58949: FOR_IN
58950: IFFALSE 59015
// begin weapons := AvailableWeaponList ( k ) ;
58952: LD_ADDR_VAR 0 9
58956: PUSH
58957: LD_VAR 0 6
58961: PPUSH
58962: CALL_OW 478
58966: ST_TO_ADDR
// if not weapons then
58967: LD_VAR 0 9
58971: NOT
58972: IFFALSE 58976
// continue ;
58974: GO 58949
// if weapon in weapons then
58976: LD_VAR 0 8
58980: PUSH
58981: LD_VAR 0 9
58985: IN
58986: IFFALSE 59013
// begin result := [ i , weapon ] ;
58988: LD_ADDR_VAR 0 3
58992: PUSH
58993: LD_VAR 0 4
58997: PUSH
58998: LD_VAR 0 8
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: ST_TO_ADDR
// exit ;
59007: POP
59008: POP
59009: POP
59010: POP
59011: GO 59021
// end ; end ;
59013: GO 58949
59015: POP
59016: POP
// end ;
59017: GO 58835
59019: POP
59020: POP
// end ;
59021: LD_VAR 0 3
59025: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59026: LD_INT 0
59028: PPUSH
// if not side or side > 8 then
59029: LD_VAR 0 3
59033: NOT
59034: PUSH
59035: LD_VAR 0 3
59039: PUSH
59040: LD_INT 8
59042: GREATER
59043: OR
59044: IFFALSE 59048
// exit ;
59046: GO 59107
// if not range then
59048: LD_VAR 0 4
59052: NOT
59053: IFFALSE 59064
// range := - 12 ;
59055: LD_ADDR_VAR 0 4
59059: PUSH
59060: LD_INT 12
59062: NEG
59063: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59064: LD_VAR 0 1
59068: PPUSH
59069: LD_VAR 0 2
59073: PPUSH
59074: LD_VAR 0 3
59078: PPUSH
59079: LD_VAR 0 4
59083: PPUSH
59084: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59088: LD_VAR 0 1
59092: PPUSH
59093: LD_VAR 0 2
59097: PPUSH
59098: LD_VAR 0 3
59102: PPUSH
59103: CALL_OW 331
// end ;
59107: LD_VAR 0 5
59111: RET
// export function Video ( mode ) ; begin
59112: LD_INT 0
59114: PPUSH
// ingame_video = mode ;
59115: LD_ADDR_OWVAR 52
59119: PUSH
59120: LD_VAR 0 1
59124: ST_TO_ADDR
// interface_hidden = mode ;
59125: LD_ADDR_OWVAR 54
59129: PUSH
59130: LD_VAR 0 1
59134: ST_TO_ADDR
// end ;
59135: LD_VAR 0 2
59139: RET
// export function Join ( array , element ) ; begin
59140: LD_INT 0
59142: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59143: LD_ADDR_VAR 0 3
59147: PUSH
59148: LD_VAR 0 1
59152: PPUSH
59153: LD_VAR 0 1
59157: PUSH
59158: LD_INT 1
59160: PLUS
59161: PPUSH
59162: LD_VAR 0 2
59166: PPUSH
59167: CALL_OW 1
59171: ST_TO_ADDR
// end ;
59172: LD_VAR 0 3
59176: RET
// export function JoinUnion ( array , element ) ; begin
59177: LD_INT 0
59179: PPUSH
// result := array union element ;
59180: LD_ADDR_VAR 0 3
59184: PUSH
59185: LD_VAR 0 1
59189: PUSH
59190: LD_VAR 0 2
59194: UNION
59195: ST_TO_ADDR
// end ;
59196: LD_VAR 0 3
59200: RET
// export function GetBehemoths ( side ) ; begin
59201: LD_INT 0
59203: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59204: LD_ADDR_VAR 0 2
59208: PUSH
59209: LD_INT 22
59211: PUSH
59212: LD_VAR 0 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 31
59223: PUSH
59224: LD_INT 25
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PPUSH
59235: CALL_OW 69
59239: ST_TO_ADDR
// end ;
59240: LD_VAR 0 2
59244: RET
// export function Shuffle ( array ) ; var i , index ; begin
59245: LD_INT 0
59247: PPUSH
59248: PPUSH
59249: PPUSH
// result := [ ] ;
59250: LD_ADDR_VAR 0 2
59254: PUSH
59255: EMPTY
59256: ST_TO_ADDR
// if not array then
59257: LD_VAR 0 1
59261: NOT
59262: IFFALSE 59266
// exit ;
59264: GO 59365
// Randomize ;
59266: CALL_OW 10
// for i = array downto 1 do
59270: LD_ADDR_VAR 0 3
59274: PUSH
59275: DOUBLE
59276: LD_VAR 0 1
59280: INC
59281: ST_TO_ADDR
59282: LD_INT 1
59284: PUSH
59285: FOR_DOWNTO
59286: IFFALSE 59363
// begin index := rand ( 1 , array ) ;
59288: LD_ADDR_VAR 0 4
59292: PUSH
59293: LD_INT 1
59295: PPUSH
59296: LD_VAR 0 1
59300: PPUSH
59301: CALL_OW 12
59305: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59306: LD_ADDR_VAR 0 2
59310: PUSH
59311: LD_VAR 0 2
59315: PPUSH
59316: LD_VAR 0 2
59320: PUSH
59321: LD_INT 1
59323: PLUS
59324: PPUSH
59325: LD_VAR 0 1
59329: PUSH
59330: LD_VAR 0 4
59334: ARRAY
59335: PPUSH
59336: CALL_OW 2
59340: ST_TO_ADDR
// array := Delete ( array , index ) ;
59341: LD_ADDR_VAR 0 1
59345: PUSH
59346: LD_VAR 0 1
59350: PPUSH
59351: LD_VAR 0 4
59355: PPUSH
59356: CALL_OW 3
59360: ST_TO_ADDR
// end ;
59361: GO 59285
59363: POP
59364: POP
// end ;
59365: LD_VAR 0 2
59369: RET
// export function GetBaseMaterials ( base ) ; begin
59370: LD_INT 0
59372: PPUSH
// result := [ 0 , 0 , 0 ] ;
59373: LD_ADDR_VAR 0 2
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: LIST
59391: ST_TO_ADDR
// if not base then
59392: LD_VAR 0 1
59396: NOT
59397: IFFALSE 59401
// exit ;
59399: GO 59450
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59401: LD_ADDR_VAR 0 2
59405: PUSH
59406: LD_VAR 0 1
59410: PPUSH
59411: LD_INT 1
59413: PPUSH
59414: CALL_OW 275
59418: PUSH
59419: LD_VAR 0 1
59423: PPUSH
59424: LD_INT 2
59426: PPUSH
59427: CALL_OW 275
59431: PUSH
59432: LD_VAR 0 1
59436: PPUSH
59437: LD_INT 3
59439: PPUSH
59440: CALL_OW 275
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// end ;
59450: LD_VAR 0 2
59454: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59455: LD_INT 0
59457: PPUSH
59458: PPUSH
// result := array ;
59459: LD_ADDR_VAR 0 3
59463: PUSH
59464: LD_VAR 0 1
59468: ST_TO_ADDR
// if size >= result then
59469: LD_VAR 0 2
59473: PUSH
59474: LD_VAR 0 3
59478: GREATEREQUAL
59479: IFFALSE 59483
// exit ;
59481: GO 59533
// if size then
59483: LD_VAR 0 2
59487: IFFALSE 59533
// for i := array downto size do
59489: LD_ADDR_VAR 0 4
59493: PUSH
59494: DOUBLE
59495: LD_VAR 0 1
59499: INC
59500: ST_TO_ADDR
59501: LD_VAR 0 2
59505: PUSH
59506: FOR_DOWNTO
59507: IFFALSE 59531
// result := Delete ( result , result ) ;
59509: LD_ADDR_VAR 0 3
59513: PUSH
59514: LD_VAR 0 3
59518: PPUSH
59519: LD_VAR 0 3
59523: PPUSH
59524: CALL_OW 3
59528: ST_TO_ADDR
59529: GO 59506
59531: POP
59532: POP
// end ;
59533: LD_VAR 0 3
59537: RET
// export function ComExit ( unit ) ; var tmp ; begin
59538: LD_INT 0
59540: PPUSH
59541: PPUSH
// if not IsInUnit ( unit ) then
59542: LD_VAR 0 1
59546: PPUSH
59547: CALL_OW 310
59551: NOT
59552: IFFALSE 59556
// exit ;
59554: GO 59616
// tmp := IsInUnit ( unit ) ;
59556: LD_ADDR_VAR 0 3
59560: PUSH
59561: LD_VAR 0 1
59565: PPUSH
59566: CALL_OW 310
59570: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59571: LD_VAR 0 3
59575: PPUSH
59576: CALL_OW 247
59580: PUSH
59581: LD_INT 2
59583: EQUAL
59584: IFFALSE 59597
// ComExitVehicle ( unit ) else
59586: LD_VAR 0 1
59590: PPUSH
59591: CALL_OW 121
59595: GO 59606
// ComExitBuilding ( unit ) ;
59597: LD_VAR 0 1
59601: PPUSH
59602: CALL_OW 122
// result := tmp ;
59606: LD_ADDR_VAR 0 2
59610: PUSH
59611: LD_VAR 0 3
59615: ST_TO_ADDR
// end ;
59616: LD_VAR 0 2
59620: RET
// export function ComExitAll ( units ) ; var i ; begin
59621: LD_INT 0
59623: PPUSH
59624: PPUSH
// if not units then
59625: LD_VAR 0 1
59629: NOT
59630: IFFALSE 59634
// exit ;
59632: GO 59660
// for i in units do
59634: LD_ADDR_VAR 0 3
59638: PUSH
59639: LD_VAR 0 1
59643: PUSH
59644: FOR_IN
59645: IFFALSE 59658
// ComExit ( i ) ;
59647: LD_VAR 0 3
59651: PPUSH
59652: CALL 59538 0 1
59656: GO 59644
59658: POP
59659: POP
// end ;
59660: LD_VAR 0 2
59664: RET
// export function ResetHc ; begin
59665: LD_INT 0
59667: PPUSH
// InitHc ;
59668: CALL_OW 19
// hc_importance := 0 ;
59672: LD_ADDR_OWVAR 32
59676: PUSH
59677: LD_INT 0
59679: ST_TO_ADDR
// end ;
59680: LD_VAR 0 1
59684: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59685: LD_INT 0
59687: PPUSH
59688: PPUSH
59689: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59690: LD_ADDR_VAR 0 6
59694: PUSH
59695: LD_VAR 0 1
59699: PUSH
59700: LD_VAR 0 3
59704: PLUS
59705: PUSH
59706: LD_INT 2
59708: DIV
59709: ST_TO_ADDR
// if _x < 0 then
59710: LD_VAR 0 6
59714: PUSH
59715: LD_INT 0
59717: LESS
59718: IFFALSE 59735
// _x := _x * - 1 ;
59720: LD_ADDR_VAR 0 6
59724: PUSH
59725: LD_VAR 0 6
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: MUL
59734: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59735: LD_ADDR_VAR 0 7
59739: PUSH
59740: LD_VAR 0 2
59744: PUSH
59745: LD_VAR 0 4
59749: PLUS
59750: PUSH
59751: LD_INT 2
59753: DIV
59754: ST_TO_ADDR
// if _y < 0 then
59755: LD_VAR 0 7
59759: PUSH
59760: LD_INT 0
59762: LESS
59763: IFFALSE 59780
// _y := _y * - 1 ;
59765: LD_ADDR_VAR 0 7
59769: PUSH
59770: LD_VAR 0 7
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: MUL
59779: ST_TO_ADDR
// result := [ _x , _y ] ;
59780: LD_ADDR_VAR 0 5
59784: PUSH
59785: LD_VAR 0 6
59789: PUSH
59790: LD_VAR 0 7
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: ST_TO_ADDR
// end ;
59799: LD_VAR 0 5
59803: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59804: LD_INT 0
59806: PPUSH
59807: PPUSH
59808: PPUSH
59809: PPUSH
// task := GetTaskList ( unit ) ;
59810: LD_ADDR_VAR 0 7
59814: PUSH
59815: LD_VAR 0 1
59819: PPUSH
59820: CALL_OW 437
59824: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59825: LD_VAR 0 7
59829: NOT
59830: PUSH
59831: LD_VAR 0 1
59835: PPUSH
59836: LD_VAR 0 2
59840: PPUSH
59841: CALL_OW 308
59845: NOT
59846: AND
59847: IFFALSE 59851
// exit ;
59849: GO 59969
// if IsInArea ( unit , area ) then
59851: LD_VAR 0 1
59855: PPUSH
59856: LD_VAR 0 2
59860: PPUSH
59861: CALL_OW 308
59865: IFFALSE 59883
// begin ComMoveToArea ( unit , goAway ) ;
59867: LD_VAR 0 1
59871: PPUSH
59872: LD_VAR 0 3
59876: PPUSH
59877: CALL_OW 113
// exit ;
59881: GO 59969
// end ; if task [ 1 ] [ 1 ] <> M then
59883: LD_VAR 0 7
59887: PUSH
59888: LD_INT 1
59890: ARRAY
59891: PUSH
59892: LD_INT 1
59894: ARRAY
59895: PUSH
59896: LD_STRING M
59898: NONEQUAL
59899: IFFALSE 59903
// exit ;
59901: GO 59969
// x := task [ 1 ] [ 2 ] ;
59903: LD_ADDR_VAR 0 5
59907: PUSH
59908: LD_VAR 0 7
59912: PUSH
59913: LD_INT 1
59915: ARRAY
59916: PUSH
59917: LD_INT 2
59919: ARRAY
59920: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59921: LD_ADDR_VAR 0 6
59925: PUSH
59926: LD_VAR 0 7
59930: PUSH
59931: LD_INT 1
59933: ARRAY
59934: PUSH
59935: LD_INT 3
59937: ARRAY
59938: ST_TO_ADDR
// if InArea ( x , y , area ) then
59939: LD_VAR 0 5
59943: PPUSH
59944: LD_VAR 0 6
59948: PPUSH
59949: LD_VAR 0 2
59953: PPUSH
59954: CALL_OW 309
59958: IFFALSE 59969
// ComStop ( unit ) ;
59960: LD_VAR 0 1
59964: PPUSH
59965: CALL_OW 141
// end ;
59969: LD_VAR 0 4
59973: RET
// export function Abs ( value ) ; begin
59974: LD_INT 0
59976: PPUSH
// result := value ;
59977: LD_ADDR_VAR 0 2
59981: PUSH
59982: LD_VAR 0 1
59986: ST_TO_ADDR
// if value < 0 then
59987: LD_VAR 0 1
59991: PUSH
59992: LD_INT 0
59994: LESS
59995: IFFALSE 60012
// result := value * - 1 ;
59997: LD_ADDR_VAR 0 2
60001: PUSH
60002: LD_VAR 0 1
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: MUL
60011: ST_TO_ADDR
// end ;
60012: LD_VAR 0 2
60016: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60017: LD_INT 0
60019: PPUSH
60020: PPUSH
60021: PPUSH
60022: PPUSH
60023: PPUSH
60024: PPUSH
60025: PPUSH
60026: PPUSH
// if not unit or not building then
60027: LD_VAR 0 1
60031: NOT
60032: PUSH
60033: LD_VAR 0 2
60037: NOT
60038: OR
60039: IFFALSE 60043
// exit ;
60041: GO 60269
// x := GetX ( building ) ;
60043: LD_ADDR_VAR 0 4
60047: PUSH
60048: LD_VAR 0 2
60052: PPUSH
60053: CALL_OW 250
60057: ST_TO_ADDR
// y := GetY ( building ) ;
60058: LD_ADDR_VAR 0 6
60062: PUSH
60063: LD_VAR 0 2
60067: PPUSH
60068: CALL_OW 251
60072: ST_TO_ADDR
// d := GetDir ( building ) ;
60073: LD_ADDR_VAR 0 8
60077: PUSH
60078: LD_VAR 0 2
60082: PPUSH
60083: CALL_OW 254
60087: ST_TO_ADDR
// r := 4 ;
60088: LD_ADDR_VAR 0 9
60092: PUSH
60093: LD_INT 4
60095: ST_TO_ADDR
// for i := 1 to 5 do
60096: LD_ADDR_VAR 0 10
60100: PUSH
60101: DOUBLE
60102: LD_INT 1
60104: DEC
60105: ST_TO_ADDR
60106: LD_INT 5
60108: PUSH
60109: FOR_TO
60110: IFFALSE 60267
// begin _x := ShiftX ( x , d , r + i ) ;
60112: LD_ADDR_VAR 0 5
60116: PUSH
60117: LD_VAR 0 4
60121: PPUSH
60122: LD_VAR 0 8
60126: PPUSH
60127: LD_VAR 0 9
60131: PUSH
60132: LD_VAR 0 10
60136: PLUS
60137: PPUSH
60138: CALL_OW 272
60142: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60143: LD_ADDR_VAR 0 7
60147: PUSH
60148: LD_VAR 0 6
60152: PPUSH
60153: LD_VAR 0 8
60157: PPUSH
60158: LD_VAR 0 9
60162: PUSH
60163: LD_VAR 0 10
60167: PLUS
60168: PPUSH
60169: CALL_OW 273
60173: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60174: LD_VAR 0 5
60178: PPUSH
60179: LD_VAR 0 7
60183: PPUSH
60184: CALL_OW 488
60188: PUSH
60189: LD_VAR 0 5
60193: PPUSH
60194: LD_VAR 0 7
60198: PPUSH
60199: CALL_OW 428
60203: PPUSH
60204: CALL_OW 247
60208: PUSH
60209: LD_INT 3
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: IN
60219: NOT
60220: AND
60221: IFFALSE 60265
// begin ComMoveXY ( unit , _x , _y ) ;
60223: LD_VAR 0 1
60227: PPUSH
60228: LD_VAR 0 5
60232: PPUSH
60233: LD_VAR 0 7
60237: PPUSH
60238: CALL_OW 111
// result := [ _x , _y ] ;
60242: LD_ADDR_VAR 0 3
60246: PUSH
60247: LD_VAR 0 5
60251: PUSH
60252: LD_VAR 0 7
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: ST_TO_ADDR
// exit ;
60261: POP
60262: POP
60263: GO 60269
// end ; end ;
60265: GO 60109
60267: POP
60268: POP
// end ;
60269: LD_VAR 0 3
60273: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60274: LD_INT 0
60276: PPUSH
60277: PPUSH
60278: PPUSH
// result := 0 ;
60279: LD_ADDR_VAR 0 3
60283: PUSH
60284: LD_INT 0
60286: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60287: LD_VAR 0 1
60291: PUSH
60292: LD_INT 0
60294: LESS
60295: PUSH
60296: LD_VAR 0 1
60300: PUSH
60301: LD_INT 8
60303: GREATER
60304: OR
60305: PUSH
60306: LD_VAR 0 2
60310: PUSH
60311: LD_INT 0
60313: LESS
60314: OR
60315: PUSH
60316: LD_VAR 0 2
60320: PUSH
60321: LD_INT 8
60323: GREATER
60324: OR
60325: IFFALSE 60329
// exit ;
60327: GO 60404
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60329: LD_ADDR_VAR 0 4
60333: PUSH
60334: LD_INT 22
60336: PUSH
60337: LD_VAR 0 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PPUSH
60346: CALL_OW 69
60350: PUSH
60351: FOR_IN
60352: IFFALSE 60402
// begin un := UnitShoot ( i ) ;
60354: LD_ADDR_VAR 0 5
60358: PUSH
60359: LD_VAR 0 4
60363: PPUSH
60364: CALL_OW 504
60368: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60369: LD_VAR 0 5
60373: PPUSH
60374: CALL_OW 255
60378: PUSH
60379: LD_VAR 0 1
60383: EQUAL
60384: IFFALSE 60400
// begin result := un ;
60386: LD_ADDR_VAR 0 3
60390: PUSH
60391: LD_VAR 0 5
60395: ST_TO_ADDR
// exit ;
60396: POP
60397: POP
60398: GO 60404
// end ; end ;
60400: GO 60351
60402: POP
60403: POP
// end ;
60404: LD_VAR 0 3
60408: RET
// export function GetCargoBay ( units ) ; begin
60409: LD_INT 0
60411: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60412: LD_ADDR_VAR 0 2
60416: PUSH
60417: LD_VAR 0 1
60421: PPUSH
60422: LD_INT 2
60424: PUSH
60425: LD_INT 34
60427: PUSH
60428: LD_INT 12
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 34
60437: PUSH
60438: LD_INT 51
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 34
60447: PUSH
60448: LD_INT 32
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 34
60457: PUSH
60458: LD_INT 89
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: PPUSH
60472: CALL_OW 72
60476: ST_TO_ADDR
// end ;
60477: LD_VAR 0 2
60481: RET
// export function Negate ( value ) ; begin
60482: LD_INT 0
60484: PPUSH
// result := not value ;
60485: LD_ADDR_VAR 0 2
60489: PUSH
60490: LD_VAR 0 1
60494: NOT
60495: ST_TO_ADDR
// end ;
60496: LD_VAR 0 2
60500: RET
// export function Inc ( value ) ; begin
60501: LD_INT 0
60503: PPUSH
// result := value + 1 ;
60504: LD_ADDR_VAR 0 2
60508: PUSH
60509: LD_VAR 0 1
60513: PUSH
60514: LD_INT 1
60516: PLUS
60517: ST_TO_ADDR
// end ;
60518: LD_VAR 0 2
60522: RET
// export function Dec ( value ) ; begin
60523: LD_INT 0
60525: PPUSH
// result := value - 1 ;
60526: LD_ADDR_VAR 0 2
60530: PUSH
60531: LD_VAR 0 1
60535: PUSH
60536: LD_INT 1
60538: MINUS
60539: ST_TO_ADDR
// end ;
60540: LD_VAR 0 2
60544: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60545: LD_INT 0
60547: PPUSH
60548: PPUSH
60549: PPUSH
60550: PPUSH
60551: PPUSH
60552: PPUSH
60553: PPUSH
60554: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60555: LD_VAR 0 1
60559: PPUSH
60560: LD_VAR 0 2
60564: PPUSH
60565: CALL_OW 488
60569: NOT
60570: PUSH
60571: LD_VAR 0 3
60575: PPUSH
60576: LD_VAR 0 4
60580: PPUSH
60581: CALL_OW 488
60585: NOT
60586: OR
60587: IFFALSE 60600
// begin result := - 1 ;
60589: LD_ADDR_VAR 0 5
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: ST_TO_ADDR
// exit ;
60598: GO 60835
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60600: LD_ADDR_VAR 0 12
60604: PUSH
60605: LD_VAR 0 1
60609: PPUSH
60610: LD_VAR 0 2
60614: PPUSH
60615: LD_VAR 0 3
60619: PPUSH
60620: LD_VAR 0 4
60624: PPUSH
60625: CALL 59685 0 4
60629: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60630: LD_ADDR_VAR 0 11
60634: PUSH
60635: LD_VAR 0 1
60639: PPUSH
60640: LD_VAR 0 2
60644: PPUSH
60645: LD_VAR 0 12
60649: PUSH
60650: LD_INT 1
60652: ARRAY
60653: PPUSH
60654: LD_VAR 0 12
60658: PUSH
60659: LD_INT 2
60661: ARRAY
60662: PPUSH
60663: CALL_OW 298
60667: ST_TO_ADDR
// distance := 9999 ;
60668: LD_ADDR_VAR 0 10
60672: PUSH
60673: LD_INT 9999
60675: ST_TO_ADDR
// for i := 0 to 5 do
60676: LD_ADDR_VAR 0 6
60680: PUSH
60681: DOUBLE
60682: LD_INT 0
60684: DEC
60685: ST_TO_ADDR
60686: LD_INT 5
60688: PUSH
60689: FOR_TO
60690: IFFALSE 60833
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60692: LD_ADDR_VAR 0 7
60696: PUSH
60697: LD_VAR 0 1
60701: PPUSH
60702: LD_VAR 0 6
60706: PPUSH
60707: LD_VAR 0 11
60711: PPUSH
60712: CALL_OW 272
60716: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60717: LD_ADDR_VAR 0 8
60721: PUSH
60722: LD_VAR 0 2
60726: PPUSH
60727: LD_VAR 0 6
60731: PPUSH
60732: LD_VAR 0 11
60736: PPUSH
60737: CALL_OW 273
60741: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60742: LD_VAR 0 7
60746: PPUSH
60747: LD_VAR 0 8
60751: PPUSH
60752: CALL_OW 488
60756: NOT
60757: IFFALSE 60761
// continue ;
60759: GO 60689
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60761: LD_ADDR_VAR 0 9
60765: PUSH
60766: LD_VAR 0 12
60770: PUSH
60771: LD_INT 1
60773: ARRAY
60774: PPUSH
60775: LD_VAR 0 12
60779: PUSH
60780: LD_INT 2
60782: ARRAY
60783: PPUSH
60784: LD_VAR 0 7
60788: PPUSH
60789: LD_VAR 0 8
60793: PPUSH
60794: CALL_OW 298
60798: ST_TO_ADDR
// if tmp < distance then
60799: LD_VAR 0 9
60803: PUSH
60804: LD_VAR 0 10
60808: LESS
60809: IFFALSE 60831
// begin result := i ;
60811: LD_ADDR_VAR 0 5
60815: PUSH
60816: LD_VAR 0 6
60820: ST_TO_ADDR
// distance := tmp ;
60821: LD_ADDR_VAR 0 10
60825: PUSH
60826: LD_VAR 0 9
60830: ST_TO_ADDR
// end ; end ;
60831: GO 60689
60833: POP
60834: POP
// end ;
60835: LD_VAR 0 5
60839: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60840: LD_INT 0
60842: PPUSH
60843: PPUSH
// if not driver or not IsInUnit ( driver ) then
60844: LD_VAR 0 1
60848: NOT
60849: PUSH
60850: LD_VAR 0 1
60854: PPUSH
60855: CALL_OW 310
60859: NOT
60860: OR
60861: IFFALSE 60865
// exit ;
60863: GO 60955
// vehicle := IsInUnit ( driver ) ;
60865: LD_ADDR_VAR 0 3
60869: PUSH
60870: LD_VAR 0 1
60874: PPUSH
60875: CALL_OW 310
60879: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60880: LD_VAR 0 1
60884: PPUSH
60885: LD_STRING \
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: PUSH
60915: LD_STRING E
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_VAR 0 3
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PPUSH
60951: CALL_OW 446
// end ;
60955: LD_VAR 0 2
60959: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60960: LD_INT 0
60962: PPUSH
60963: PPUSH
// if not driver or not IsInUnit ( driver ) then
60964: LD_VAR 0 1
60968: NOT
60969: PUSH
60970: LD_VAR 0 1
60974: PPUSH
60975: CALL_OW 310
60979: NOT
60980: OR
60981: IFFALSE 60985
// exit ;
60983: GO 61075
// vehicle := IsInUnit ( driver ) ;
60985: LD_ADDR_VAR 0 3
60989: PUSH
60990: LD_VAR 0 1
60994: PPUSH
60995: CALL_OW 310
60999: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61000: LD_VAR 0 1
61004: PPUSH
61005: LD_STRING \
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: PUSH
61035: LD_STRING E
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_VAR 0 3
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PPUSH
61071: CALL_OW 447
// end ;
61075: LD_VAR 0 2
61079: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61080: LD_INT 0
61082: PPUSH
61083: PPUSH
61084: PPUSH
// tmp := [ ] ;
61085: LD_ADDR_VAR 0 5
61089: PUSH
61090: EMPTY
61091: ST_TO_ADDR
// for i in units do
61092: LD_ADDR_VAR 0 4
61096: PUSH
61097: LD_VAR 0 1
61101: PUSH
61102: FOR_IN
61103: IFFALSE 61141
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61105: LD_ADDR_VAR 0 5
61109: PUSH
61110: LD_VAR 0 5
61114: PPUSH
61115: LD_VAR 0 5
61119: PUSH
61120: LD_INT 1
61122: PLUS
61123: PPUSH
61124: LD_VAR 0 4
61128: PPUSH
61129: CALL_OW 256
61133: PPUSH
61134: CALL_OW 2
61138: ST_TO_ADDR
61139: GO 61102
61141: POP
61142: POP
// if not tmp then
61143: LD_VAR 0 5
61147: NOT
61148: IFFALSE 61152
// exit ;
61150: GO 61200
// if asc then
61152: LD_VAR 0 2
61156: IFFALSE 61180
// result := SortListByListAsc ( units , tmp ) else
61158: LD_ADDR_VAR 0 3
61162: PUSH
61163: LD_VAR 0 1
61167: PPUSH
61168: LD_VAR 0 5
61172: PPUSH
61173: CALL_OW 76
61177: ST_TO_ADDR
61178: GO 61200
// result := SortListByListDesc ( units , tmp ) ;
61180: LD_ADDR_VAR 0 3
61184: PUSH
61185: LD_VAR 0 1
61189: PPUSH
61190: LD_VAR 0 5
61194: PPUSH
61195: CALL_OW 77
61199: ST_TO_ADDR
// end ;
61200: LD_VAR 0 3
61204: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61205: LD_INT 0
61207: PPUSH
61208: PPUSH
// task := GetTaskList ( mech ) ;
61209: LD_ADDR_VAR 0 4
61213: PUSH
61214: LD_VAR 0 1
61218: PPUSH
61219: CALL_OW 437
61223: ST_TO_ADDR
// if not task then
61224: LD_VAR 0 4
61228: NOT
61229: IFFALSE 61233
// exit ;
61231: GO 61275
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61233: LD_ADDR_VAR 0 3
61237: PUSH
61238: LD_VAR 0 4
61242: PUSH
61243: LD_INT 1
61245: ARRAY
61246: PUSH
61247: LD_INT 1
61249: ARRAY
61250: PUSH
61251: LD_STRING r
61253: EQUAL
61254: PUSH
61255: LD_VAR 0 4
61259: PUSH
61260: LD_INT 1
61262: ARRAY
61263: PUSH
61264: LD_INT 4
61266: ARRAY
61267: PUSH
61268: LD_VAR 0 2
61272: EQUAL
61273: AND
61274: ST_TO_ADDR
// end ;
61275: LD_VAR 0 3
61279: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61280: LD_INT 0
61282: PPUSH
// SetDir ( unit , d ) ;
61283: LD_VAR 0 1
61287: PPUSH
61288: LD_VAR 0 4
61292: PPUSH
61293: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61297: LD_VAR 0 1
61301: PPUSH
61302: LD_VAR 0 2
61306: PPUSH
61307: LD_VAR 0 3
61311: PPUSH
61312: LD_VAR 0 5
61316: PPUSH
61317: CALL_OW 48
// end ;
61321: LD_VAR 0 6
61325: RET
// export function ToNaturalNumber ( number ) ; begin
61326: LD_INT 0
61328: PPUSH
// result := number div 1 ;
61329: LD_ADDR_VAR 0 2
61333: PUSH
61334: LD_VAR 0 1
61338: PUSH
61339: LD_INT 1
61341: DIV
61342: ST_TO_ADDR
// if number < 0 then
61343: LD_VAR 0 1
61347: PUSH
61348: LD_INT 0
61350: LESS
61351: IFFALSE 61361
// result := 0 ;
61353: LD_ADDR_VAR 0 2
61357: PUSH
61358: LD_INT 0
61360: ST_TO_ADDR
// end ;
61361: LD_VAR 0 2
61365: RET
// export function SortByClass ( units , class ) ; var un ; begin
61366: LD_INT 0
61368: PPUSH
61369: PPUSH
// if not units or not class then
61370: LD_VAR 0 1
61374: NOT
61375: PUSH
61376: LD_VAR 0 2
61380: NOT
61381: OR
61382: IFFALSE 61386
// exit ;
61384: GO 61481
// result := [ ] ;
61386: LD_ADDR_VAR 0 3
61390: PUSH
61391: EMPTY
61392: ST_TO_ADDR
// for un in units do
61393: LD_ADDR_VAR 0 4
61397: PUSH
61398: LD_VAR 0 1
61402: PUSH
61403: FOR_IN
61404: IFFALSE 61479
// if GetClass ( un ) = class then
61406: LD_VAR 0 4
61410: PPUSH
61411: CALL_OW 257
61415: PUSH
61416: LD_VAR 0 2
61420: EQUAL
61421: IFFALSE 61448
// result := Insert ( result , 1 , un ) else
61423: LD_ADDR_VAR 0 3
61427: PUSH
61428: LD_VAR 0 3
61432: PPUSH
61433: LD_INT 1
61435: PPUSH
61436: LD_VAR 0 4
61440: PPUSH
61441: CALL_OW 2
61445: ST_TO_ADDR
61446: GO 61477
// result := Replace ( result , result + 1 , un ) ;
61448: LD_ADDR_VAR 0 3
61452: PUSH
61453: LD_VAR 0 3
61457: PPUSH
61458: LD_VAR 0 3
61462: PUSH
61463: LD_INT 1
61465: PLUS
61466: PPUSH
61467: LD_VAR 0 4
61471: PPUSH
61472: CALL_OW 1
61476: ST_TO_ADDR
61477: GO 61403
61479: POP
61480: POP
// end ;
61481: LD_VAR 0 3
61485: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61486: LD_INT 0
61488: PPUSH
61489: PPUSH
61490: PPUSH
61491: PPUSH
61492: PPUSH
61493: PPUSH
61494: PPUSH
// result := [ ] ;
61495: LD_ADDR_VAR 0 4
61499: PUSH
61500: EMPTY
61501: ST_TO_ADDR
// if x - r < 0 then
61502: LD_VAR 0 1
61506: PUSH
61507: LD_VAR 0 3
61511: MINUS
61512: PUSH
61513: LD_INT 0
61515: LESS
61516: IFFALSE 61528
// min_x := 0 else
61518: LD_ADDR_VAR 0 8
61522: PUSH
61523: LD_INT 0
61525: ST_TO_ADDR
61526: GO 61544
// min_x := x - r ;
61528: LD_ADDR_VAR 0 8
61532: PUSH
61533: LD_VAR 0 1
61537: PUSH
61538: LD_VAR 0 3
61542: MINUS
61543: ST_TO_ADDR
// if y - r < 0 then
61544: LD_VAR 0 2
61548: PUSH
61549: LD_VAR 0 3
61553: MINUS
61554: PUSH
61555: LD_INT 0
61557: LESS
61558: IFFALSE 61570
// min_y := 0 else
61560: LD_ADDR_VAR 0 7
61564: PUSH
61565: LD_INT 0
61567: ST_TO_ADDR
61568: GO 61586
// min_y := y - r ;
61570: LD_ADDR_VAR 0 7
61574: PUSH
61575: LD_VAR 0 2
61579: PUSH
61580: LD_VAR 0 3
61584: MINUS
61585: ST_TO_ADDR
// max_x := x + r ;
61586: LD_ADDR_VAR 0 9
61590: PUSH
61591: LD_VAR 0 1
61595: PUSH
61596: LD_VAR 0 3
61600: PLUS
61601: ST_TO_ADDR
// max_y := y + r ;
61602: LD_ADDR_VAR 0 10
61606: PUSH
61607: LD_VAR 0 2
61611: PUSH
61612: LD_VAR 0 3
61616: PLUS
61617: ST_TO_ADDR
// for _x = min_x to max_x do
61618: LD_ADDR_VAR 0 5
61622: PUSH
61623: DOUBLE
61624: LD_VAR 0 8
61628: DEC
61629: ST_TO_ADDR
61630: LD_VAR 0 9
61634: PUSH
61635: FOR_TO
61636: IFFALSE 61737
// for _y = min_y to max_y do
61638: LD_ADDR_VAR 0 6
61642: PUSH
61643: DOUBLE
61644: LD_VAR 0 7
61648: DEC
61649: ST_TO_ADDR
61650: LD_VAR 0 10
61654: PUSH
61655: FOR_TO
61656: IFFALSE 61733
// begin if not ValidHex ( _x , _y ) then
61658: LD_VAR 0 5
61662: PPUSH
61663: LD_VAR 0 6
61667: PPUSH
61668: CALL_OW 488
61672: NOT
61673: IFFALSE 61677
// continue ;
61675: GO 61655
// if GetResourceTypeXY ( _x , _y ) then
61677: LD_VAR 0 5
61681: PPUSH
61682: LD_VAR 0 6
61686: PPUSH
61687: CALL_OW 283
61691: IFFALSE 61731
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61693: LD_ADDR_VAR 0 4
61697: PUSH
61698: LD_VAR 0 4
61702: PPUSH
61703: LD_VAR 0 4
61707: PUSH
61708: LD_INT 1
61710: PLUS
61711: PPUSH
61712: LD_VAR 0 5
61716: PUSH
61717: LD_VAR 0 6
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PPUSH
61726: CALL_OW 1
61730: ST_TO_ADDR
// end ;
61731: GO 61655
61733: POP
61734: POP
61735: GO 61635
61737: POP
61738: POP
// end ;
61739: LD_VAR 0 4
61743: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61744: LD_INT 0
61746: PPUSH
61747: PPUSH
61748: PPUSH
61749: PPUSH
61750: PPUSH
61751: PPUSH
61752: PPUSH
61753: PPUSH
// if not units then
61754: LD_VAR 0 1
61758: NOT
61759: IFFALSE 61763
// exit ;
61761: GO 62287
// result := UnitFilter ( units , [ f_ok ] ) ;
61763: LD_ADDR_VAR 0 3
61767: PUSH
61768: LD_VAR 0 1
61772: PPUSH
61773: LD_INT 50
61775: PUSH
61776: EMPTY
61777: LIST
61778: PPUSH
61779: CALL_OW 72
61783: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61784: LD_ADDR_VAR 0 8
61788: PUSH
61789: LD_VAR 0 1
61793: PUSH
61794: LD_INT 1
61796: ARRAY
61797: PPUSH
61798: CALL_OW 255
61802: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61803: LD_ADDR_VAR 0 10
61807: PUSH
61808: LD_INT 29
61810: PUSH
61811: LD_INT 91
61813: PUSH
61814: LD_INT 49
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: ST_TO_ADDR
// if not result then
61822: LD_VAR 0 3
61826: NOT
61827: IFFALSE 61831
// exit ;
61829: GO 62287
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61831: LD_ADDR_VAR 0 5
61835: PUSH
61836: LD_INT 81
61838: PUSH
61839: LD_VAR 0 8
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PPUSH
61848: CALL_OW 69
61852: ST_TO_ADDR
// for i in result do
61853: LD_ADDR_VAR 0 4
61857: PUSH
61858: LD_VAR 0 3
61862: PUSH
61863: FOR_IN
61864: IFFALSE 62285
// begin tag := GetTag ( i ) + 1 ;
61866: LD_ADDR_VAR 0 9
61870: PUSH
61871: LD_VAR 0 4
61875: PPUSH
61876: CALL_OW 110
61880: PUSH
61881: LD_INT 1
61883: PLUS
61884: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61885: LD_ADDR_VAR 0 7
61889: PUSH
61890: LD_VAR 0 4
61894: PPUSH
61895: CALL_OW 250
61899: PPUSH
61900: LD_VAR 0 4
61904: PPUSH
61905: CALL_OW 251
61909: PPUSH
61910: LD_INT 6
61912: PPUSH
61913: CALL 61486 0 3
61917: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61918: LD_VAR 0 4
61922: PPUSH
61923: CALL_OW 247
61927: PUSH
61928: LD_INT 2
61930: EQUAL
61931: PUSH
61932: LD_VAR 0 7
61936: AND
61937: PUSH
61938: LD_VAR 0 4
61942: PPUSH
61943: CALL_OW 264
61947: PUSH
61948: LD_VAR 0 10
61952: IN
61953: NOT
61954: AND
61955: IFFALSE 61994
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61957: LD_VAR 0 4
61961: PPUSH
61962: LD_VAR 0 7
61966: PUSH
61967: LD_INT 1
61969: ARRAY
61970: PUSH
61971: LD_INT 1
61973: ARRAY
61974: PPUSH
61975: LD_VAR 0 7
61979: PUSH
61980: LD_INT 1
61982: ARRAY
61983: PUSH
61984: LD_INT 2
61986: ARRAY
61987: PPUSH
61988: CALL_OW 116
61992: GO 62283
// if path > tag then
61994: LD_VAR 0 2
61998: PUSH
61999: LD_VAR 0 9
62003: GREATER
62004: IFFALSE 62212
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62006: LD_ADDR_VAR 0 6
62010: PUSH
62011: LD_VAR 0 5
62015: PPUSH
62016: LD_INT 91
62018: PUSH
62019: LD_VAR 0 4
62023: PUSH
62024: LD_INT 8
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: LIST
62031: PPUSH
62032: CALL_OW 72
62036: ST_TO_ADDR
// if nearEnemy then
62037: LD_VAR 0 6
62041: IFFALSE 62110
// begin if GetWeapon ( i ) = ru_time_lapser then
62043: LD_VAR 0 4
62047: PPUSH
62048: CALL_OW 264
62052: PUSH
62053: LD_INT 49
62055: EQUAL
62056: IFFALSE 62084
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62058: LD_VAR 0 4
62062: PPUSH
62063: LD_VAR 0 6
62067: PPUSH
62068: LD_VAR 0 4
62072: PPUSH
62073: CALL_OW 74
62077: PPUSH
62078: CALL_OW 112
62082: GO 62108
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62084: LD_VAR 0 4
62088: PPUSH
62089: LD_VAR 0 6
62093: PPUSH
62094: LD_VAR 0 4
62098: PPUSH
62099: CALL_OW 74
62103: PPUSH
62104: CALL_OW 115
// end else
62108: GO 62210
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62110: LD_VAR 0 4
62114: PPUSH
62115: LD_VAR 0 2
62119: PUSH
62120: LD_VAR 0 9
62124: ARRAY
62125: PUSH
62126: LD_INT 1
62128: ARRAY
62129: PPUSH
62130: LD_VAR 0 2
62134: PUSH
62135: LD_VAR 0 9
62139: ARRAY
62140: PUSH
62141: LD_INT 2
62143: ARRAY
62144: PPUSH
62145: CALL_OW 297
62149: PUSH
62150: LD_INT 6
62152: GREATER
62153: IFFALSE 62196
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62155: LD_VAR 0 4
62159: PPUSH
62160: LD_VAR 0 2
62164: PUSH
62165: LD_VAR 0 9
62169: ARRAY
62170: PUSH
62171: LD_INT 1
62173: ARRAY
62174: PPUSH
62175: LD_VAR 0 2
62179: PUSH
62180: LD_VAR 0 9
62184: ARRAY
62185: PUSH
62186: LD_INT 2
62188: ARRAY
62189: PPUSH
62190: CALL_OW 114
62194: GO 62210
// SetTag ( i , tag ) ;
62196: LD_VAR 0 4
62200: PPUSH
62201: LD_VAR 0 9
62205: PPUSH
62206: CALL_OW 109
// end else
62210: GO 62283
// if enemy then
62212: LD_VAR 0 5
62216: IFFALSE 62283
// begin if GetWeapon ( i ) = ru_time_lapser then
62218: LD_VAR 0 4
62222: PPUSH
62223: CALL_OW 264
62227: PUSH
62228: LD_INT 49
62230: EQUAL
62231: IFFALSE 62259
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62233: LD_VAR 0 4
62237: PPUSH
62238: LD_VAR 0 5
62242: PPUSH
62243: LD_VAR 0 4
62247: PPUSH
62248: CALL_OW 74
62252: PPUSH
62253: CALL_OW 112
62257: GO 62283
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62259: LD_VAR 0 4
62263: PPUSH
62264: LD_VAR 0 5
62268: PPUSH
62269: LD_VAR 0 4
62273: PPUSH
62274: CALL_OW 74
62278: PPUSH
62279: CALL_OW 115
// end ; end ;
62283: GO 61863
62285: POP
62286: POP
// end ;
62287: LD_VAR 0 3
62291: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62292: LD_INT 0
62294: PPUSH
62295: PPUSH
62296: PPUSH
// if not unit or IsInUnit ( unit ) then
62297: LD_VAR 0 1
62301: NOT
62302: PUSH
62303: LD_VAR 0 1
62307: PPUSH
62308: CALL_OW 310
62312: OR
62313: IFFALSE 62317
// exit ;
62315: GO 62408
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62317: LD_ADDR_VAR 0 4
62321: PUSH
62322: LD_VAR 0 1
62326: PPUSH
62327: CALL_OW 250
62331: PPUSH
62332: LD_VAR 0 2
62336: PPUSH
62337: LD_INT 1
62339: PPUSH
62340: CALL_OW 272
62344: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62345: LD_ADDR_VAR 0 5
62349: PUSH
62350: LD_VAR 0 1
62354: PPUSH
62355: CALL_OW 251
62359: PPUSH
62360: LD_VAR 0 2
62364: PPUSH
62365: LD_INT 1
62367: PPUSH
62368: CALL_OW 273
62372: ST_TO_ADDR
// if ValidHex ( x , y ) then
62373: LD_VAR 0 4
62377: PPUSH
62378: LD_VAR 0 5
62382: PPUSH
62383: CALL_OW 488
62387: IFFALSE 62408
// ComTurnXY ( unit , x , y ) ;
62389: LD_VAR 0 1
62393: PPUSH
62394: LD_VAR 0 4
62398: PPUSH
62399: LD_VAR 0 5
62403: PPUSH
62404: CALL_OW 118
// end ;
62408: LD_VAR 0 3
62412: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62413: LD_INT 0
62415: PPUSH
62416: PPUSH
// result := false ;
62417: LD_ADDR_VAR 0 3
62421: PUSH
62422: LD_INT 0
62424: ST_TO_ADDR
// if not units then
62425: LD_VAR 0 2
62429: NOT
62430: IFFALSE 62434
// exit ;
62432: GO 62479
// for i in units do
62434: LD_ADDR_VAR 0 4
62438: PUSH
62439: LD_VAR 0 2
62443: PUSH
62444: FOR_IN
62445: IFFALSE 62477
// if See ( side , i ) then
62447: LD_VAR 0 1
62451: PPUSH
62452: LD_VAR 0 4
62456: PPUSH
62457: CALL_OW 292
62461: IFFALSE 62475
// begin result := true ;
62463: LD_ADDR_VAR 0 3
62467: PUSH
62468: LD_INT 1
62470: ST_TO_ADDR
// exit ;
62471: POP
62472: POP
62473: GO 62479
// end ;
62475: GO 62444
62477: POP
62478: POP
// end ;
62479: LD_VAR 0 3
62483: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62484: LD_INT 0
62486: PPUSH
62487: PPUSH
62488: PPUSH
62489: PPUSH
// if not unit or not points then
62490: LD_VAR 0 1
62494: NOT
62495: PUSH
62496: LD_VAR 0 2
62500: NOT
62501: OR
62502: IFFALSE 62506
// exit ;
62504: GO 62596
// dist := 99999 ;
62506: LD_ADDR_VAR 0 5
62510: PUSH
62511: LD_INT 99999
62513: ST_TO_ADDR
// for i in points do
62514: LD_ADDR_VAR 0 4
62518: PUSH
62519: LD_VAR 0 2
62523: PUSH
62524: FOR_IN
62525: IFFALSE 62594
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62527: LD_ADDR_VAR 0 6
62531: PUSH
62532: LD_VAR 0 1
62536: PPUSH
62537: LD_VAR 0 4
62541: PUSH
62542: LD_INT 1
62544: ARRAY
62545: PPUSH
62546: LD_VAR 0 4
62550: PUSH
62551: LD_INT 2
62553: ARRAY
62554: PPUSH
62555: CALL_OW 297
62559: ST_TO_ADDR
// if tmpDist < dist then
62560: LD_VAR 0 6
62564: PUSH
62565: LD_VAR 0 5
62569: LESS
62570: IFFALSE 62592
// begin result := i ;
62572: LD_ADDR_VAR 0 3
62576: PUSH
62577: LD_VAR 0 4
62581: ST_TO_ADDR
// dist := tmpDist ;
62582: LD_ADDR_VAR 0 5
62586: PUSH
62587: LD_VAR 0 6
62591: ST_TO_ADDR
// end ; end ;
62592: GO 62524
62594: POP
62595: POP
// end ;
62596: LD_VAR 0 3
62600: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62601: LD_INT 0
62603: PPUSH
// uc_side := side ;
62604: LD_ADDR_OWVAR 20
62608: PUSH
62609: LD_VAR 0 1
62613: ST_TO_ADDR
// uc_nation := 3 ;
62614: LD_ADDR_OWVAR 21
62618: PUSH
62619: LD_INT 3
62621: ST_TO_ADDR
// vc_chassis := 25 ;
62622: LD_ADDR_OWVAR 37
62626: PUSH
62627: LD_INT 25
62629: ST_TO_ADDR
// vc_engine := engine_siberite ;
62630: LD_ADDR_OWVAR 39
62634: PUSH
62635: LD_INT 3
62637: ST_TO_ADDR
// vc_control := control_computer ;
62638: LD_ADDR_OWVAR 38
62642: PUSH
62643: LD_INT 3
62645: ST_TO_ADDR
// vc_weapon := 59 ;
62646: LD_ADDR_OWVAR 40
62650: PUSH
62651: LD_INT 59
62653: ST_TO_ADDR
// result := CreateVehicle ;
62654: LD_ADDR_VAR 0 5
62658: PUSH
62659: CALL_OW 45
62663: ST_TO_ADDR
// SetDir ( result , d ) ;
62664: LD_VAR 0 5
62668: PPUSH
62669: LD_VAR 0 4
62673: PPUSH
62674: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62678: LD_VAR 0 5
62682: PPUSH
62683: LD_VAR 0 2
62687: PPUSH
62688: LD_VAR 0 3
62692: PPUSH
62693: LD_INT 0
62695: PPUSH
62696: CALL_OW 48
// end ;
62700: LD_VAR 0 5
62704: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62705: LD_INT 0
62707: PPUSH
62708: PPUSH
62709: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62710: LD_ADDR_VAR 0 2
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62733: LD_VAR 0 1
62737: NOT
62738: PUSH
62739: LD_VAR 0 1
62743: PPUSH
62744: CALL_OW 264
62748: PUSH
62749: LD_INT 12
62751: PUSH
62752: LD_INT 51
62754: PUSH
62755: LD_INT 32
62757: PUSH
62758: LD_INT 89
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: IN
62767: NOT
62768: OR
62769: IFFALSE 62773
// exit ;
62771: GO 62871
// for i := 1 to 3 do
62773: LD_ADDR_VAR 0 3
62777: PUSH
62778: DOUBLE
62779: LD_INT 1
62781: DEC
62782: ST_TO_ADDR
62783: LD_INT 3
62785: PUSH
62786: FOR_TO
62787: IFFALSE 62869
// begin tmp := GetCargo ( cargo , i ) ;
62789: LD_ADDR_VAR 0 4
62793: PUSH
62794: LD_VAR 0 1
62798: PPUSH
62799: LD_VAR 0 3
62803: PPUSH
62804: CALL_OW 289
62808: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62809: LD_ADDR_VAR 0 2
62813: PUSH
62814: LD_VAR 0 2
62818: PPUSH
62819: LD_VAR 0 3
62823: PPUSH
62824: LD_VAR 0 4
62828: PPUSH
62829: CALL_OW 1
62833: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62834: LD_ADDR_VAR 0 2
62838: PUSH
62839: LD_VAR 0 2
62843: PPUSH
62844: LD_INT 4
62846: PPUSH
62847: LD_VAR 0 2
62851: PUSH
62852: LD_INT 4
62854: ARRAY
62855: PUSH
62856: LD_VAR 0 4
62860: PLUS
62861: PPUSH
62862: CALL_OW 1
62866: ST_TO_ADDR
// end ;
62867: GO 62786
62869: POP
62870: POP
// end ;
62871: LD_VAR 0 2
62875: RET
// export function Length ( array ) ; begin
62876: LD_INT 0
62878: PPUSH
// result := array + 0 ;
62879: LD_ADDR_VAR 0 2
62883: PUSH
62884: LD_VAR 0 1
62888: PUSH
62889: LD_INT 0
62891: PLUS
62892: ST_TO_ADDR
// end ;
62893: LD_VAR 0 2
62897: RET
// export function PrepareArray ( array ) ; begin
62898: LD_INT 0
62900: PPUSH
// result := array diff 0 ;
62901: LD_ADDR_VAR 0 2
62905: PUSH
62906: LD_VAR 0 1
62910: PUSH
62911: LD_INT 0
62913: DIFF
62914: ST_TO_ADDR
// if not result [ 1 ] then
62915: LD_VAR 0 2
62919: PUSH
62920: LD_INT 1
62922: ARRAY
62923: NOT
62924: IFFALSE 62944
// result := Delete ( result , 1 ) ;
62926: LD_ADDR_VAR 0 2
62930: PUSH
62931: LD_VAR 0 2
62935: PPUSH
62936: LD_INT 1
62938: PPUSH
62939: CALL_OW 3
62943: ST_TO_ADDR
// end ;
62944: LD_VAR 0 2
62948: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62949: LD_INT 0
62951: PPUSH
62952: PPUSH
62953: PPUSH
62954: PPUSH
// sibRocketRange := 25 ;
62955: LD_ADDR_VAR 0 6
62959: PUSH
62960: LD_INT 25
62962: ST_TO_ADDR
// result := false ;
62963: LD_ADDR_VAR 0 4
62967: PUSH
62968: LD_INT 0
62970: ST_TO_ADDR
// for i := 0 to 5 do
62971: LD_ADDR_VAR 0 5
62975: PUSH
62976: DOUBLE
62977: LD_INT 0
62979: DEC
62980: ST_TO_ADDR
62981: LD_INT 5
62983: PUSH
62984: FOR_TO
62985: IFFALSE 63052
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62987: LD_VAR 0 1
62991: PPUSH
62992: LD_VAR 0 5
62996: PPUSH
62997: LD_VAR 0 6
63001: PPUSH
63002: CALL_OW 272
63006: PPUSH
63007: LD_VAR 0 2
63011: PPUSH
63012: LD_VAR 0 5
63016: PPUSH
63017: LD_VAR 0 6
63021: PPUSH
63022: CALL_OW 273
63026: PPUSH
63027: LD_VAR 0 3
63031: PPUSH
63032: CALL_OW 309
63036: IFFALSE 63050
// begin result := true ;
63038: LD_ADDR_VAR 0 4
63042: PUSH
63043: LD_INT 1
63045: ST_TO_ADDR
// exit ;
63046: POP
63047: POP
63048: GO 63054
// end ;
63050: GO 62984
63052: POP
63053: POP
// end ;
63054: LD_VAR 0 4
63058: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63059: LD_INT 0
63061: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63062: LD_VAR 0 1
63066: PPUSH
63067: LD_VAR 0 2
63071: PPUSH
63072: LD_INT 0
63074: PPUSH
63075: LD_INT 0
63077: PPUSH
63078: LD_INT 1
63080: PPUSH
63081: LD_INT 0
63083: PPUSH
63084: CALL_OW 587
// end ;
63088: LD_VAR 0 3
63092: RET
