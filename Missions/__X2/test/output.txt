// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
   0: LD_VAR 0 1
   4: PPUSH
   5: LD_VAR 0 2
   9: PPUSH
  10: CALL 14468 0 2
// end ; end_of_file
  14: PPOPN 2
  16: END
// every 0 0$1 do
  17: GO 19
  19: DISABLE
// begin enable ;
  20: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
  21: LD_STRING updateTimer(
  23: PUSH
  24: LD_OWVAR 1
  28: STR
  29: PUSH
  30: LD_STRING );
  32: STR
  33: PPUSH
  34: CALL_OW 559
// end ;
  38: END
// on MapStart ( p ) do begin if streamModeActive then
  39: LD_EXP 1
  43: IFFALSE 52
// DefineStreamItems ( true ) ;
  45: LD_INT 1
  47: PPUSH
  48: CALL 1700 0 1
// UpdateFactoryWaypoints ( ) ;
  52: CALL 15284 0 0
// end ;
  56: PPOPN 1
  58: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
  59: LD_INT 0
  61: PPUSH
// if p2 = 100 then
  62: LD_VAR 0 2
  66: PUSH
  67: LD_INT 100
  69: EQUAL
  70: IFFALSE 1073
// begin if not StreamModeActive then
  72: LD_EXP 1
  76: NOT
  77: IFFALSE 87
// StreamModeActive := true ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 1
  86: ST_TO_ADDR
// if p3 = 0 then
  87: LD_VAR 0 3
  91: PUSH
  92: LD_INT 0
  94: EQUAL
  95: IFFALSE 101
// InitStreamMode ;
  97: CALL 1236 0 0
// if p3 = 1 then
 101: LD_VAR 0 3
 105: PUSH
 106: LD_INT 1
 108: EQUAL
 109: IFFALSE 119
// sRocket := true ;
 111: LD_ADDR_EXP 6
 115: PUSH
 116: LD_INT 1
 118: ST_TO_ADDR
// if p3 = 2 then
 119: LD_VAR 0 3
 123: PUSH
 124: LD_INT 2
 126: EQUAL
 127: IFFALSE 137
// sSpeed := true ;
 129: LD_ADDR_EXP 5
 133: PUSH
 134: LD_INT 1
 136: ST_TO_ADDR
// if p3 = 3 then
 137: LD_VAR 0 3
 141: PUSH
 142: LD_INT 3
 144: EQUAL
 145: IFFALSE 155
// sEngine := true ;
 147: LD_ADDR_EXP 7
 151: PUSH
 152: LD_INT 1
 154: ST_TO_ADDR
// if p3 = 4 then
 155: LD_VAR 0 3
 159: PUSH
 160: LD_INT 4
 162: EQUAL
 163: IFFALSE 173
// sSpec := true ;
 165: LD_ADDR_EXP 4
 169: PUSH
 170: LD_INT 1
 172: ST_TO_ADDR
// if p3 = 5 then
 173: LD_VAR 0 3
 177: PUSH
 178: LD_INT 5
 180: EQUAL
 181: IFFALSE 191
// sLevel := true ;
 183: LD_ADDR_EXP 8
 187: PUSH
 188: LD_INT 1
 190: ST_TO_ADDR
// if p3 = 6 then
 191: LD_VAR 0 3
 195: PUSH
 196: LD_INT 6
 198: EQUAL
 199: IFFALSE 209
// sArmoury := true ;
 201: LD_ADDR_EXP 9
 205: PUSH
 206: LD_INT 1
 208: ST_TO_ADDR
// if p3 = 7 then
 209: LD_VAR 0 3
 213: PUSH
 214: LD_INT 7
 216: EQUAL
 217: IFFALSE 227
// sRadar := true ;
 219: LD_ADDR_EXP 10
 223: PUSH
 224: LD_INT 1
 226: ST_TO_ADDR
// if p3 = 8 then
 227: LD_VAR 0 3
 231: PUSH
 232: LD_INT 8
 234: EQUAL
 235: IFFALSE 245
// sBunker := true ;
 237: LD_ADDR_EXP 11
 241: PUSH
 242: LD_INT 1
 244: ST_TO_ADDR
// if p3 = 9 then
 245: LD_VAR 0 3
 249: PUSH
 250: LD_INT 9
 252: EQUAL
 253: IFFALSE 263
// sHack := true ;
 255: LD_ADDR_EXP 12
 259: PUSH
 260: LD_INT 1
 262: ST_TO_ADDR
// if p3 = 10 then
 263: LD_VAR 0 3
 267: PUSH
 268: LD_INT 10
 270: EQUAL
 271: IFFALSE 281
// sFire := true ;
 273: LD_ADDR_EXP 13
 277: PUSH
 278: LD_INT 1
 280: ST_TO_ADDR
// if p3 = 11 then
 281: LD_VAR 0 3
 285: PUSH
 286: LD_INT 11
 288: EQUAL
 289: IFFALSE 299
// sRefresh := true ;
 291: LD_ADDR_EXP 14
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// if p3 = 12 then
 299: LD_VAR 0 3
 303: PUSH
 304: LD_INT 12
 306: EQUAL
 307: IFFALSE 317
// sExp := true ;
 309: LD_ADDR_EXP 15
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// if p3 = 13 then
 317: LD_VAR 0 3
 321: PUSH
 322: LD_INT 13
 324: EQUAL
 325: IFFALSE 335
// sDepot := true ;
 327: LD_ADDR_EXP 16
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// if p3 = 14 then
 335: LD_VAR 0 3
 339: PUSH
 340: LD_INT 14
 342: EQUAL
 343: IFFALSE 353
// sFlag := true ;
 345: LD_ADDR_EXP 17
 349: PUSH
 350: LD_INT 1
 352: ST_TO_ADDR
// if p3 = 15 then
 353: LD_VAR 0 3
 357: PUSH
 358: LD_INT 15
 360: EQUAL
 361: IFFALSE 371
// sKamikadze := true ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// if p3 = 16 then
 371: LD_VAR 0 3
 375: PUSH
 376: LD_INT 16
 378: EQUAL
 379: IFFALSE 389
// sTroll := true ;
 381: LD_ADDR_EXP 26
 385: PUSH
 386: LD_INT 1
 388: ST_TO_ADDR
// if p3 = 17 then
 389: LD_VAR 0 3
 393: PUSH
 394: LD_INT 17
 396: EQUAL
 397: IFFALSE 407
// sSlow := true ;
 399: LD_ADDR_EXP 27
 403: PUSH
 404: LD_INT 1
 406: ST_TO_ADDR
// if p3 = 18 then
 407: LD_VAR 0 3
 411: PUSH
 412: LD_INT 18
 414: EQUAL
 415: IFFALSE 425
// sLack := true ;
 417: LD_ADDR_EXP 28
 421: PUSH
 422: LD_INT 1
 424: ST_TO_ADDR
// if p3 = 19 then
 425: LD_VAR 0 3
 429: PUSH
 430: LD_INT 19
 432: EQUAL
 433: IFFALSE 443
// sTank := true ;
 435: LD_ADDR_EXP 30
 439: PUSH
 440: LD_INT 1
 442: ST_TO_ADDR
// if p3 = 20 then
 443: LD_VAR 0 3
 447: PUSH
 448: LD_INT 20
 450: EQUAL
 451: IFFALSE 461
// sRemote := true ;
 453: LD_ADDR_EXP 31
 457: PUSH
 458: LD_INT 1
 460: ST_TO_ADDR
// if p3 = 21 then
 461: LD_VAR 0 3
 465: PUSH
 466: LD_INT 21
 468: EQUAL
 469: IFFALSE 479
// sPowell := true ;
 471: LD_ADDR_EXP 32
 475: PUSH
 476: LD_INT 1
 478: ST_TO_ADDR
// if p3 = 22 then
 479: LD_VAR 0 3
 483: PUSH
 484: LD_INT 22
 486: EQUAL
 487: IFFALSE 497
// sTeleport := true ;
 489: LD_ADDR_EXP 35
 493: PUSH
 494: LD_INT 1
 496: ST_TO_ADDR
// if p3 = 23 then
 497: LD_VAR 0 3
 501: PUSH
 502: LD_INT 23
 504: EQUAL
 505: IFFALSE 515
// sOilTower := true ;
 507: LD_ADDR_EXP 37
 511: PUSH
 512: LD_INT 1
 514: ST_TO_ADDR
// if p3 = 24 then
 515: LD_VAR 0 3
 519: PUSH
 520: LD_INT 24
 522: EQUAL
 523: IFFALSE 533
// sShovel := true ;
 525: LD_ADDR_EXP 38
 529: PUSH
 530: LD_INT 1
 532: ST_TO_ADDR
// if p3 = 25 then
 533: LD_VAR 0 3
 537: PUSH
 538: LD_INT 25
 540: EQUAL
 541: IFFALSE 551
// sSheik := true ;
 543: LD_ADDR_EXP 39
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// if p3 = 26 then
 551: LD_VAR 0 3
 555: PUSH
 556: LD_INT 26
 558: EQUAL
 559: IFFALSE 569
// sEarthquake := true ;
 561: LD_ADDR_EXP 41
 565: PUSH
 566: LD_INT 1
 568: ST_TO_ADDR
// if p3 = 27 then
 569: LD_VAR 0 3
 573: PUSH
 574: LD_INT 27
 576: EQUAL
 577: IFFALSE 587
// sAI := true ;
 579: LD_ADDR_EXP 42
 583: PUSH
 584: LD_INT 1
 586: ST_TO_ADDR
// if p3 = 28 then
 587: LD_VAR 0 3
 591: PUSH
 592: LD_INT 28
 594: EQUAL
 595: IFFALSE 605
// sCargo := true ;
 597: LD_ADDR_EXP 45
 601: PUSH
 602: LD_INT 1
 604: ST_TO_ADDR
// if p3 = 29 then
 605: LD_VAR 0 3
 609: PUSH
 610: LD_INT 29
 612: EQUAL
 613: IFFALSE 623
// sDLaser := true ;
 615: LD_ADDR_EXP 46
 619: PUSH
 620: LD_INT 1
 622: ST_TO_ADDR
// if p3 = 30 then
 623: LD_VAR 0 3
 627: PUSH
 628: LD_INT 30
 630: EQUAL
 631: IFFALSE 641
// sExchange := true ;
 633: LD_ADDR_EXP 47
 637: PUSH
 638: LD_INT 1
 640: ST_TO_ADDR
// if p3 = 31 then
 641: LD_VAR 0 3
 645: PUSH
 646: LD_INT 31
 648: EQUAL
 649: IFFALSE 659
// sFac := true ;
 651: LD_ADDR_EXP 48
 655: PUSH
 656: LD_INT 1
 658: ST_TO_ADDR
// if p3 = 32 then
 659: LD_VAR 0 3
 663: PUSH
 664: LD_INT 32
 666: EQUAL
 667: IFFALSE 677
// sPower := true ;
 669: LD_ADDR_EXP 49
 673: PUSH
 674: LD_INT 1
 676: ST_TO_ADDR
// if p3 = 33 then
 677: LD_VAR 0 3
 681: PUSH
 682: LD_INT 33
 684: EQUAL
 685: IFFALSE 695
// sRandom := true ;
 687: LD_ADDR_EXP 50
 691: PUSH
 692: LD_INT 1
 694: ST_TO_ADDR
// if p3 = 34 then
 695: LD_VAR 0 3
 699: PUSH
 700: LD_INT 34
 702: EQUAL
 703: IFFALSE 713
// sShield := true ;
 705: LD_ADDR_EXP 51
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// if p3 = 35 then
 713: LD_VAR 0 3
 717: PUSH
 718: LD_INT 35
 720: EQUAL
 721: IFFALSE 731
// sTime := true ;
 723: LD_ADDR_EXP 52
 727: PUSH
 728: LD_INT 1
 730: ST_TO_ADDR
// if p3 = 36 then
 731: LD_VAR 0 3
 735: PUSH
 736: LD_INT 36
 738: EQUAL
 739: IFFALSE 749
// sTools := true ;
 741: LD_ADDR_EXP 53
 745: PUSH
 746: LD_INT 1
 748: ST_TO_ADDR
// if p3 = 101 then
 749: LD_VAR 0 3
 753: PUSH
 754: LD_INT 101
 756: EQUAL
 757: IFFALSE 767
// sSold := true ;
 759: LD_ADDR_EXP 18
 763: PUSH
 764: LD_INT 1
 766: ST_TO_ADDR
// if p3 = 102 then
 767: LD_VAR 0 3
 771: PUSH
 772: LD_INT 102
 774: EQUAL
 775: IFFALSE 785
// sDiff := true ;
 777: LD_ADDR_EXP 19
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// if p3 = 103 then
 785: LD_VAR 0 3
 789: PUSH
 790: LD_INT 103
 792: EQUAL
 793: IFFALSE 803
// sFog := true ;
 795: LD_ADDR_EXP 22
 799: PUSH
 800: LD_INT 1
 802: ST_TO_ADDR
// if p3 = 104 then
 803: LD_VAR 0 3
 807: PUSH
 808: LD_INT 104
 810: EQUAL
 811: IFFALSE 821
// sReset := true ;
 813: LD_ADDR_EXP 23
 817: PUSH
 818: LD_INT 1
 820: ST_TO_ADDR
// if p3 = 105 then
 821: LD_VAR 0 3
 825: PUSH
 826: LD_INT 105
 828: EQUAL
 829: IFFALSE 839
// sSun := true ;
 831: LD_ADDR_EXP 24
 835: PUSH
 836: LD_INT 1
 838: ST_TO_ADDR
// if p3 = 106 then
 839: LD_VAR 0 3
 843: PUSH
 844: LD_INT 106
 846: EQUAL
 847: IFFALSE 857
// sTiger := true ;
 849: LD_ADDR_EXP 20
 853: PUSH
 854: LD_INT 1
 856: ST_TO_ADDR
// if p3 = 107 then
 857: LD_VAR 0 3
 861: PUSH
 862: LD_INT 107
 864: EQUAL
 865: IFFALSE 875
// sBomb := true ;
 867: LD_ADDR_EXP 21
 871: PUSH
 872: LD_INT 1
 874: ST_TO_ADDR
// if p3 = 108 then
 875: LD_VAR 0 3
 879: PUSH
 880: LD_INT 108
 882: EQUAL
 883: IFFALSE 893
// sWound := true ;
 885: LD_ADDR_EXP 29
 889: PUSH
 890: LD_INT 1
 892: ST_TO_ADDR
// if p3 = 109 then
 893: LD_VAR 0 3
 897: PUSH
 898: LD_INT 109
 900: EQUAL
 901: IFFALSE 911
// sBetray := true ;
 903: LD_ADDR_EXP 33
 907: PUSH
 908: LD_INT 1
 910: ST_TO_ADDR
// if p3 = 110 then
 911: LD_VAR 0 3
 915: PUSH
 916: LD_INT 110
 918: EQUAL
 919: IFFALSE 929
// sContamin := true ;
 921: LD_ADDR_EXP 34
 925: PUSH
 926: LD_INT 1
 928: ST_TO_ADDR
// if p3 = 111 then
 929: LD_VAR 0 3
 933: PUSH
 934: LD_INT 111
 936: EQUAL
 937: IFFALSE 947
// sOil := true ;
 939: LD_ADDR_EXP 36
 943: PUSH
 944: LD_INT 1
 946: ST_TO_ADDR
// if p3 = 112 then
 947: LD_VAR 0 3
 951: PUSH
 952: LD_INT 112
 954: EQUAL
 955: IFFALSE 965
// sStu := true ;
 957: LD_ADDR_EXP 40
 961: PUSH
 962: LD_INT 1
 964: ST_TO_ADDR
// if p3 = 113 then
 965: LD_VAR 0 3
 969: PUSH
 970: LD_INT 113
 972: EQUAL
 973: IFFALSE 983
// sBazooka := true ;
 975: LD_ADDR_EXP 43
 979: PUSH
 980: LD_INT 1
 982: ST_TO_ADDR
// if p3 = 114 then
 983: LD_VAR 0 3
 987: PUSH
 988: LD_INT 114
 990: EQUAL
 991: IFFALSE 1001
// sMortar := true ;
 993: LD_ADDR_EXP 44
 997: PUSH
 998: LD_INT 1
1000: ST_TO_ADDR
// if p3 = 115 then
1001: LD_VAR 0 3
1005: PUSH
1006: LD_INT 115
1008: EQUAL
1009: IFFALSE 1019
// sRanger := true ;
1011: LD_ADDR_EXP 54
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// if p3 = 116 then
1019: LD_VAR 0 3
1023: PUSH
1024: LD_INT 116
1026: EQUAL
1027: IFFALSE 1037
// sComputer := true ;
1029: LD_ADDR_EXP 55
1033: PUSH
1034: LD_INT 1
1036: ST_TO_ADDR
// if p3 = 117 then
1037: LD_VAR 0 3
1041: PUSH
1042: LD_INT 117
1044: EQUAL
1045: IFFALSE 1055
// s30 := true ;
1047: LD_ADDR_EXP 56
1051: PUSH
1052: LD_INT 1
1054: ST_TO_ADDR
// if p3 = 118 then
1055: LD_VAR 0 3
1059: PUSH
1060: LD_INT 118
1062: EQUAL
1063: IFFALSE 1073
// s60 := true ;
1065: LD_ADDR_EXP 57
1069: PUSH
1070: LD_INT 1
1072: ST_TO_ADDR
// end ; if p2 = 101 then
1073: LD_VAR 0 2
1077: PUSH
1078: LD_INT 101
1080: EQUAL
1081: IFFALSE 1209
// begin case p3 of 1 :
1083: LD_VAR 0 3
1087: PUSH
1088: LD_INT 1
1090: DOUBLE
1091: EQUAL
1092: IFTRUE 1096
1094: GO 1103
1096: POP
// hHackUnlimitedResources ; 2 :
1097: CALL 13307 0 0
1101: GO 1209
1103: LD_INT 2
1105: DOUBLE
1106: EQUAL
1107: IFTRUE 1111
1109: GO 1118
1111: POP
// hHackSetLevel10 ; 3 :
1112: CALL 13440 0 0
1116: GO 1209
1118: LD_INT 3
1120: DOUBLE
1121: EQUAL
1122: IFTRUE 1126
1124: GO 1133
1126: POP
// hHackSetLevel10YourUnits ; 4 :
1127: CALL 13525 0 0
1131: GO 1209
1133: LD_INT 4
1135: DOUBLE
1136: EQUAL
1137: IFTRUE 1141
1139: GO 1148
1141: POP
// hHackInvincible ; 5 :
1142: CALL 13973 0 0
1146: GO 1209
1148: LD_INT 5
1150: DOUBLE
1151: EQUAL
1152: IFTRUE 1156
1154: GO 1163
1156: POP
// hHackInvisible ; 6 :
1157: CALL 14084 0 0
1161: GO 1209
1163: LD_INT 6
1165: DOUBLE
1166: EQUAL
1167: IFTRUE 1171
1169: GO 1178
1171: POP
// hHackChangeYourSide ; 7 :
1172: CALL 14141 0 0
1176: GO 1209
1178: LD_INT 7
1180: DOUBLE
1181: EQUAL
1182: IFTRUE 1186
1184: GO 1193
1186: POP
// hHackChangeUnitSide ; 8 :
1187: CALL 14183 0 0
1191: GO 1209
1193: LD_INT 8
1195: DOUBLE
1196: EQUAL
1197: IFTRUE 1201
1199: GO 1208
1201: POP
// hHackFog ; end ;
1202: CALL 14284 0 0
1206: GO 1209
1208: POP
// end ; end ;
1209: LD_VAR 0 7
1213: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
1214: GO 1216
1216: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
1217: LD_STRING initStreamRollete();
1219: PPUSH
1220: CALL_OW 559
// InitStreamMode ;
1224: CALL 1236 0 0
// DefineStreamItems ( false ) ;
1228: LD_INT 0
1230: PPUSH
1231: CALL 1700 0 1
// end ;
1235: END
// function InitStreamMode ; begin
1236: LD_INT 0
1238: PPUSH
// streamModeActive := false ;
1239: LD_ADDR_EXP 1
1243: PUSH
1244: LD_INT 0
1246: ST_TO_ADDR
// normalCounter := 36 ;
1247: LD_ADDR_EXP 2
1251: PUSH
1252: LD_INT 36
1254: ST_TO_ADDR
// hardcoreCounter := 18 ;
1255: LD_ADDR_EXP 3
1259: PUSH
1260: LD_INT 18
1262: ST_TO_ADDR
// sRocket := false ;
1263: LD_ADDR_EXP 6
1267: PUSH
1268: LD_INT 0
1270: ST_TO_ADDR
// sSpeed := false ;
1271: LD_ADDR_EXP 5
1275: PUSH
1276: LD_INT 0
1278: ST_TO_ADDR
// sEngine := false ;
1279: LD_ADDR_EXP 7
1283: PUSH
1284: LD_INT 0
1286: ST_TO_ADDR
// sSpec := false ;
1287: LD_ADDR_EXP 4
1291: PUSH
1292: LD_INT 0
1294: ST_TO_ADDR
// sLevel := false ;
1295: LD_ADDR_EXP 8
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
// sArmoury := false ;
1303: LD_ADDR_EXP 9
1307: PUSH
1308: LD_INT 0
1310: ST_TO_ADDR
// sRadar := false ;
1311: LD_ADDR_EXP 10
1315: PUSH
1316: LD_INT 0
1318: ST_TO_ADDR
// sBunker := false ;
1319: LD_ADDR_EXP 11
1323: PUSH
1324: LD_INT 0
1326: ST_TO_ADDR
// sHack := false ;
1327: LD_ADDR_EXP 12
1331: PUSH
1332: LD_INT 0
1334: ST_TO_ADDR
// sFire := false ;
1335: LD_ADDR_EXP 13
1339: PUSH
1340: LD_INT 0
1342: ST_TO_ADDR
// sRefresh := false ;
1343: LD_ADDR_EXP 14
1347: PUSH
1348: LD_INT 0
1350: ST_TO_ADDR
// sExp := false ;
1351: LD_ADDR_EXP 15
1355: PUSH
1356: LD_INT 0
1358: ST_TO_ADDR
// sDepot := false ;
1359: LD_ADDR_EXP 16
1363: PUSH
1364: LD_INT 0
1366: ST_TO_ADDR
// sFlag := false ;
1367: LD_ADDR_EXP 17
1371: PUSH
1372: LD_INT 0
1374: ST_TO_ADDR
// sKamikadze := false ;
1375: LD_ADDR_EXP 25
1379: PUSH
1380: LD_INT 0
1382: ST_TO_ADDR
// sTroll := false ;
1383: LD_ADDR_EXP 26
1387: PUSH
1388: LD_INT 0
1390: ST_TO_ADDR
// sSlow := false ;
1391: LD_ADDR_EXP 27
1395: PUSH
1396: LD_INT 0
1398: ST_TO_ADDR
// sLack := false ;
1399: LD_ADDR_EXP 28
1403: PUSH
1404: LD_INT 0
1406: ST_TO_ADDR
// sTank := false ;
1407: LD_ADDR_EXP 30
1411: PUSH
1412: LD_INT 0
1414: ST_TO_ADDR
// sRemote := false ;
1415: LD_ADDR_EXP 31
1419: PUSH
1420: LD_INT 0
1422: ST_TO_ADDR
// sPowell := false ;
1423: LD_ADDR_EXP 32
1427: PUSH
1428: LD_INT 0
1430: ST_TO_ADDR
// sTeleport := false ;
1431: LD_ADDR_EXP 35
1435: PUSH
1436: LD_INT 0
1438: ST_TO_ADDR
// sOilTower := false ;
1439: LD_ADDR_EXP 37
1443: PUSH
1444: LD_INT 0
1446: ST_TO_ADDR
// sShovel := false ;
1447: LD_ADDR_EXP 38
1451: PUSH
1452: LD_INT 0
1454: ST_TO_ADDR
// sSheik := false ;
1455: LD_ADDR_EXP 39
1459: PUSH
1460: LD_INT 0
1462: ST_TO_ADDR
// sEarthquake := false ;
1463: LD_ADDR_EXP 41
1467: PUSH
1468: LD_INT 0
1470: ST_TO_ADDR
// sAI := false ;
1471: LD_ADDR_EXP 42
1475: PUSH
1476: LD_INT 0
1478: ST_TO_ADDR
// sCargo := false ;
1479: LD_ADDR_EXP 45
1483: PUSH
1484: LD_INT 0
1486: ST_TO_ADDR
// sDLaser := false ;
1487: LD_ADDR_EXP 46
1491: PUSH
1492: LD_INT 0
1494: ST_TO_ADDR
// sExchange := false ;
1495: LD_ADDR_EXP 47
1499: PUSH
1500: LD_INT 0
1502: ST_TO_ADDR
// sFac := false ;
1503: LD_ADDR_EXP 48
1507: PUSH
1508: LD_INT 0
1510: ST_TO_ADDR
// sPower := false ;
1511: LD_ADDR_EXP 49
1515: PUSH
1516: LD_INT 0
1518: ST_TO_ADDR
// sRandom := false ;
1519: LD_ADDR_EXP 50
1523: PUSH
1524: LD_INT 0
1526: ST_TO_ADDR
// sShield := false ;
1527: LD_ADDR_EXP 51
1531: PUSH
1532: LD_INT 0
1534: ST_TO_ADDR
// sTime := false ;
1535: LD_ADDR_EXP 52
1539: PUSH
1540: LD_INT 0
1542: ST_TO_ADDR
// sTools := false ;
1543: LD_ADDR_EXP 53
1547: PUSH
1548: LD_INT 0
1550: ST_TO_ADDR
// sSold := false ;
1551: LD_ADDR_EXP 18
1555: PUSH
1556: LD_INT 0
1558: ST_TO_ADDR
// sDiff := false ;
1559: LD_ADDR_EXP 19
1563: PUSH
1564: LD_INT 0
1566: ST_TO_ADDR
// sFog := false ;
1567: LD_ADDR_EXP 22
1571: PUSH
1572: LD_INT 0
1574: ST_TO_ADDR
// sReset := false ;
1575: LD_ADDR_EXP 23
1579: PUSH
1580: LD_INT 0
1582: ST_TO_ADDR
// sSun := false ;
1583: LD_ADDR_EXP 24
1587: PUSH
1588: LD_INT 0
1590: ST_TO_ADDR
// sTiger := false ;
1591: LD_ADDR_EXP 20
1595: PUSH
1596: LD_INT 0
1598: ST_TO_ADDR
// sBomb := false ;
1599: LD_ADDR_EXP 21
1603: PUSH
1604: LD_INT 0
1606: ST_TO_ADDR
// sWound := false ;
1607: LD_ADDR_EXP 29
1611: PUSH
1612: LD_INT 0
1614: ST_TO_ADDR
// sBetray := false ;
1615: LD_ADDR_EXP 33
1619: PUSH
1620: LD_INT 0
1622: ST_TO_ADDR
// sContamin := false ;
1623: LD_ADDR_EXP 34
1627: PUSH
1628: LD_INT 0
1630: ST_TO_ADDR
// sOil := false ;
1631: LD_ADDR_EXP 36
1635: PUSH
1636: LD_INT 0
1638: ST_TO_ADDR
// sStu := false ;
1639: LD_ADDR_EXP 40
1643: PUSH
1644: LD_INT 0
1646: ST_TO_ADDR
// sBazooka := false ;
1647: LD_ADDR_EXP 43
1651: PUSH
1652: LD_INT 0
1654: ST_TO_ADDR
// sMortar := false ;
1655: LD_ADDR_EXP 44
1659: PUSH
1660: LD_INT 0
1662: ST_TO_ADDR
// sRanger := false ;
1663: LD_ADDR_EXP 54
1667: PUSH
1668: LD_INT 0
1670: ST_TO_ADDR
// sComputer := false ;
1671: LD_ADDR_EXP 55
1675: PUSH
1676: LD_INT 0
1678: ST_TO_ADDR
// s30 := false ;
1679: LD_ADDR_EXP 56
1683: PUSH
1684: LD_INT 0
1686: ST_TO_ADDR
// s60 := false ;
1687: LD_ADDR_EXP 57
1691: PUSH
1692: LD_INT 0
1694: ST_TO_ADDR
// end ;
1695: LD_VAR 0 1
1699: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1700: LD_INT 0
1702: PPUSH
1703: PPUSH
1704: PPUSH
1705: PPUSH
1706: PPUSH
1707: PPUSH
1708: PPUSH
// result := [ ] ;
1709: LD_ADDR_VAR 0 2
1713: PUSH
1714: EMPTY
1715: ST_TO_ADDR
// if campaign_id = 1 then
1716: LD_OWVAR 69
1720: PUSH
1721: LD_INT 1
1723: EQUAL
1724: IFFALSE 4890
// begin case mission_number of 1 :
1726: LD_OWVAR 70
1730: PUSH
1731: LD_INT 1
1733: DOUBLE
1734: EQUAL
1735: IFTRUE 1739
1737: GO 1815
1739: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
1740: LD_ADDR_VAR 0 2
1744: PUSH
1745: LD_INT 2
1747: PUSH
1748: LD_INT 4
1750: PUSH
1751: LD_INT 11
1753: PUSH
1754: LD_INT 12
1756: PUSH
1757: LD_INT 15
1759: PUSH
1760: LD_INT 16
1762: PUSH
1763: LD_INT 22
1765: PUSH
1766: LD_INT 23
1768: PUSH
1769: LD_INT 26
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: PUSH
1783: LD_INT 101
1785: PUSH
1786: LD_INT 102
1788: PUSH
1789: LD_INT 106
1791: PUSH
1792: LD_INT 116
1794: PUSH
1795: LD_INT 117
1797: PUSH
1798: LD_INT 118
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: ST_TO_ADDR
1813: GO 4888
1815: LD_INT 2
1817: DOUBLE
1818: EQUAL
1819: IFTRUE 1823
1821: GO 1907
1823: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
1824: LD_ADDR_VAR 0 2
1828: PUSH
1829: LD_INT 2
1831: PUSH
1832: LD_INT 4
1834: PUSH
1835: LD_INT 11
1837: PUSH
1838: LD_INT 12
1840: PUSH
1841: LD_INT 15
1843: PUSH
1844: LD_INT 16
1846: PUSH
1847: LD_INT 22
1849: PUSH
1850: LD_INT 23
1852: PUSH
1853: LD_INT 26
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: PUSH
1867: LD_INT 101
1869: PUSH
1870: LD_INT 102
1872: PUSH
1873: LD_INT 105
1875: PUSH
1876: LD_INT 106
1878: PUSH
1879: LD_INT 108
1881: PUSH
1882: LD_INT 116
1884: PUSH
1885: LD_INT 117
1887: PUSH
1888: LD_INT 118
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: ST_TO_ADDR
1905: GO 4888
1907: LD_INT 3
1909: DOUBLE
1910: EQUAL
1911: IFTRUE 1915
1913: GO 2003
1915: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
1916: LD_ADDR_VAR 0 2
1920: PUSH
1921: LD_INT 2
1923: PUSH
1924: LD_INT 4
1926: PUSH
1927: LD_INT 5
1929: PUSH
1930: LD_INT 11
1932: PUSH
1933: LD_INT 12
1935: PUSH
1936: LD_INT 15
1938: PUSH
1939: LD_INT 16
1941: PUSH
1942: LD_INT 22
1944: PUSH
1945: LD_INT 26
1947: PUSH
1948: LD_INT 36
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 101
1965: PUSH
1966: LD_INT 102
1968: PUSH
1969: LD_INT 105
1971: PUSH
1972: LD_INT 106
1974: PUSH
1975: LD_INT 108
1977: PUSH
1978: LD_INT 116
1980: PUSH
1981: LD_INT 117
1983: PUSH
1984: LD_INT 118
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: ST_TO_ADDR
2001: GO 4888
2003: LD_INT 4
2005: DOUBLE
2006: EQUAL
2007: IFTRUE 2011
2009: GO 2107
2011: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2012: LD_ADDR_VAR 0 2
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: LD_INT 4
2022: PUSH
2023: LD_INT 5
2025: PUSH
2026: LD_INT 8
2028: PUSH
2029: LD_INT 11
2031: PUSH
2032: LD_INT 12
2034: PUSH
2035: LD_INT 15
2037: PUSH
2038: LD_INT 16
2040: PUSH
2041: LD_INT 22
2043: PUSH
2044: LD_INT 23
2046: PUSH
2047: LD_INT 26
2049: PUSH
2050: LD_INT 36
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 101
2069: PUSH
2070: LD_INT 102
2072: PUSH
2073: LD_INT 105
2075: PUSH
2076: LD_INT 106
2078: PUSH
2079: LD_INT 108
2081: PUSH
2082: LD_INT 116
2084: PUSH
2085: LD_INT 117
2087: PUSH
2088: LD_INT 118
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: ST_TO_ADDR
2105: GO 4888
2107: LD_INT 5
2109: DOUBLE
2110: EQUAL
2111: IFTRUE 2115
2113: GO 2227
2115: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2116: LD_ADDR_VAR 0 2
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: LD_INT 4
2126: PUSH
2127: LD_INT 5
2129: PUSH
2130: LD_INT 6
2132: PUSH
2133: LD_INT 8
2135: PUSH
2136: LD_INT 11
2138: PUSH
2139: LD_INT 12
2141: PUSH
2142: LD_INT 15
2144: PUSH
2145: LD_INT 16
2147: PUSH
2148: LD_INT 22
2150: PUSH
2151: LD_INT 23
2153: PUSH
2154: LD_INT 25
2156: PUSH
2157: LD_INT 26
2159: PUSH
2160: LD_INT 36
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 101
2181: PUSH
2182: LD_INT 102
2184: PUSH
2185: LD_INT 105
2187: PUSH
2188: LD_INT 106
2190: PUSH
2191: LD_INT 108
2193: PUSH
2194: LD_INT 109
2196: PUSH
2197: LD_INT 112
2199: PUSH
2200: LD_INT 116
2202: PUSH
2203: LD_INT 117
2205: PUSH
2206: LD_INT 118
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: ST_TO_ADDR
2225: GO 4888
2227: LD_INT 6
2229: DOUBLE
2230: EQUAL
2231: IFTRUE 2235
2233: GO 2367
2235: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2236: LD_ADDR_VAR 0 2
2240: PUSH
2241: LD_INT 2
2243: PUSH
2244: LD_INT 4
2246: PUSH
2247: LD_INT 5
2249: PUSH
2250: LD_INT 6
2252: PUSH
2253: LD_INT 8
2255: PUSH
2256: LD_INT 11
2258: PUSH
2259: LD_INT 12
2261: PUSH
2262: LD_INT 15
2264: PUSH
2265: LD_INT 16
2267: PUSH
2268: LD_INT 20
2270: PUSH
2271: LD_INT 21
2273: PUSH
2274: LD_INT 22
2276: PUSH
2277: LD_INT 23
2279: PUSH
2280: LD_INT 25
2282: PUSH
2283: LD_INT 26
2285: PUSH
2286: LD_INT 30
2288: PUSH
2289: LD_INT 31
2291: PUSH
2292: LD_INT 32
2294: PUSH
2295: LD_INT 36
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 101
2321: PUSH
2322: LD_INT 102
2324: PUSH
2325: LD_INT 105
2327: PUSH
2328: LD_INT 106
2330: PUSH
2331: LD_INT 108
2333: PUSH
2334: LD_INT 109
2336: PUSH
2337: LD_INT 112
2339: PUSH
2340: LD_INT 116
2342: PUSH
2343: LD_INT 117
2345: PUSH
2346: LD_INT 118
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: ST_TO_ADDR
2365: GO 4888
2367: LD_INT 7
2369: DOUBLE
2370: EQUAL
2371: IFTRUE 2375
2373: GO 2487
2375: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2376: LD_ADDR_VAR 0 2
2380: PUSH
2381: LD_INT 2
2383: PUSH
2384: LD_INT 4
2386: PUSH
2387: LD_INT 5
2389: PUSH
2390: LD_INT 7
2392: PUSH
2393: LD_INT 11
2395: PUSH
2396: LD_INT 12
2398: PUSH
2399: LD_INT 15
2401: PUSH
2402: LD_INT 16
2404: PUSH
2405: LD_INT 20
2407: PUSH
2408: LD_INT 21
2410: PUSH
2411: LD_INT 22
2413: PUSH
2414: LD_INT 23
2416: PUSH
2417: LD_INT 25
2419: PUSH
2420: LD_INT 26
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: PUSH
2439: LD_INT 101
2441: PUSH
2442: LD_INT 102
2444: PUSH
2445: LD_INT 103
2447: PUSH
2448: LD_INT 105
2450: PUSH
2451: LD_INT 106
2453: PUSH
2454: LD_INT 108
2456: PUSH
2457: LD_INT 112
2459: PUSH
2460: LD_INT 116
2462: PUSH
2463: LD_INT 117
2465: PUSH
2466: LD_INT 118
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: ST_TO_ADDR
2485: GO 4888
2487: LD_INT 8
2489: DOUBLE
2490: EQUAL
2491: IFTRUE 2495
2493: GO 2635
2495: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2496: LD_ADDR_VAR 0 2
2500: PUSH
2501: LD_INT 2
2503: PUSH
2504: LD_INT 4
2506: PUSH
2507: LD_INT 5
2509: PUSH
2510: LD_INT 6
2512: PUSH
2513: LD_INT 7
2515: PUSH
2516: LD_INT 8
2518: PUSH
2519: LD_INT 11
2521: PUSH
2522: LD_INT 12
2524: PUSH
2525: LD_INT 15
2527: PUSH
2528: LD_INT 16
2530: PUSH
2531: LD_INT 20
2533: PUSH
2534: LD_INT 21
2536: PUSH
2537: LD_INT 22
2539: PUSH
2540: LD_INT 23
2542: PUSH
2543: LD_INT 25
2545: PUSH
2546: LD_INT 26
2548: PUSH
2549: LD_INT 30
2551: PUSH
2552: LD_INT 31
2554: PUSH
2555: LD_INT 32
2557: PUSH
2558: LD_INT 36
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: PUSH
2583: LD_INT 101
2585: PUSH
2586: LD_INT 102
2588: PUSH
2589: LD_INT 103
2591: PUSH
2592: LD_INT 105
2594: PUSH
2595: LD_INT 106
2597: PUSH
2598: LD_INT 108
2600: PUSH
2601: LD_INT 109
2603: PUSH
2604: LD_INT 112
2606: PUSH
2607: LD_INT 116
2609: PUSH
2610: LD_INT 117
2612: PUSH
2613: LD_INT 118
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: ST_TO_ADDR
2633: GO 4888
2635: LD_INT 9
2637: DOUBLE
2638: EQUAL
2639: IFTRUE 2643
2641: GO 2791
2643: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2644: LD_ADDR_VAR 0 2
2648: PUSH
2649: LD_INT 2
2651: PUSH
2652: LD_INT 4
2654: PUSH
2655: LD_INT 5
2657: PUSH
2658: LD_INT 6
2660: PUSH
2661: LD_INT 7
2663: PUSH
2664: LD_INT 8
2666: PUSH
2667: LD_INT 11
2669: PUSH
2670: LD_INT 12
2672: PUSH
2673: LD_INT 15
2675: PUSH
2676: LD_INT 16
2678: PUSH
2679: LD_INT 20
2681: PUSH
2682: LD_INT 21
2684: PUSH
2685: LD_INT 22
2687: PUSH
2688: LD_INT 23
2690: PUSH
2691: LD_INT 25
2693: PUSH
2694: LD_INT 26
2696: PUSH
2697: LD_INT 28
2699: PUSH
2700: LD_INT 30
2702: PUSH
2703: LD_INT 31
2705: PUSH
2706: LD_INT 32
2708: PUSH
2709: LD_INT 36
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 101
2737: PUSH
2738: LD_INT 102
2740: PUSH
2741: LD_INT 103
2743: PUSH
2744: LD_INT 105
2746: PUSH
2747: LD_INT 106
2749: PUSH
2750: LD_INT 108
2752: PUSH
2753: LD_INT 109
2755: PUSH
2756: LD_INT 112
2758: PUSH
2759: LD_INT 114
2761: PUSH
2762: LD_INT 116
2764: PUSH
2765: LD_INT 117
2767: PUSH
2768: LD_INT 118
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: ST_TO_ADDR
2789: GO 4888
2791: LD_INT 10
2793: DOUBLE
2794: EQUAL
2795: IFTRUE 2799
2797: GO 2995
2799: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
2800: LD_ADDR_VAR 0 2
2804: PUSH
2805: LD_INT 2
2807: PUSH
2808: LD_INT 4
2810: PUSH
2811: LD_INT 5
2813: PUSH
2814: LD_INT 6
2816: PUSH
2817: LD_INT 7
2819: PUSH
2820: LD_INT 8
2822: PUSH
2823: LD_INT 9
2825: PUSH
2826: LD_INT 10
2828: PUSH
2829: LD_INT 11
2831: PUSH
2832: LD_INT 12
2834: PUSH
2835: LD_INT 13
2837: PUSH
2838: LD_INT 14
2840: PUSH
2841: LD_INT 15
2843: PUSH
2844: LD_INT 16
2846: PUSH
2847: LD_INT 17
2849: PUSH
2850: LD_INT 18
2852: PUSH
2853: LD_INT 19
2855: PUSH
2856: LD_INT 20
2858: PUSH
2859: LD_INT 21
2861: PUSH
2862: LD_INT 22
2864: PUSH
2865: LD_INT 23
2867: PUSH
2868: LD_INT 24
2870: PUSH
2871: LD_INT 25
2873: PUSH
2874: LD_INT 26
2876: PUSH
2877: LD_INT 28
2879: PUSH
2880: LD_INT 30
2882: PUSH
2883: LD_INT 31
2885: PUSH
2886: LD_INT 32
2888: PUSH
2889: LD_INT 36
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 101
2925: PUSH
2926: LD_INT 102
2928: PUSH
2929: LD_INT 103
2931: PUSH
2932: LD_INT 104
2934: PUSH
2935: LD_INT 105
2937: PUSH
2938: LD_INT 106
2940: PUSH
2941: LD_INT 107
2943: PUSH
2944: LD_INT 108
2946: PUSH
2947: LD_INT 109
2949: PUSH
2950: LD_INT 110
2952: PUSH
2953: LD_INT 111
2955: PUSH
2956: LD_INT 112
2958: PUSH
2959: LD_INT 114
2961: PUSH
2962: LD_INT 116
2964: PUSH
2965: LD_INT 117
2967: PUSH
2968: LD_INT 118
2970: PUSH
2971: EMPTY
2972: LIST
2973: LIST
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: ST_TO_ADDR
2993: GO 4888
2995: LD_INT 11
2997: DOUBLE
2998: EQUAL
2999: IFTRUE 3003
3001: GO 3207
3003: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3004: LD_ADDR_VAR 0 2
3008: PUSH
3009: LD_INT 2
3011: PUSH
3012: LD_INT 3
3014: PUSH
3015: LD_INT 4
3017: PUSH
3018: LD_INT 5
3020: PUSH
3021: LD_INT 6
3023: PUSH
3024: LD_INT 7
3026: PUSH
3027: LD_INT 8
3029: PUSH
3030: LD_INT 9
3032: PUSH
3033: LD_INT 10
3035: PUSH
3036: LD_INT 11
3038: PUSH
3039: LD_INT 12
3041: PUSH
3042: LD_INT 13
3044: PUSH
3045: LD_INT 14
3047: PUSH
3048: LD_INT 15
3050: PUSH
3051: LD_INT 16
3053: PUSH
3054: LD_INT 17
3056: PUSH
3057: LD_INT 18
3059: PUSH
3060: LD_INT 19
3062: PUSH
3063: LD_INT 20
3065: PUSH
3066: LD_INT 21
3068: PUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 23
3074: PUSH
3075: LD_INT 24
3077: PUSH
3078: LD_INT 25
3080: PUSH
3081: LD_INT 26
3083: PUSH
3084: LD_INT 28
3086: PUSH
3087: LD_INT 30
3089: PUSH
3090: LD_INT 31
3092: PUSH
3093: LD_INT 32
3095: PUSH
3096: LD_INT 34
3098: PUSH
3099: LD_INT 36
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: PUSH
3135: LD_INT 101
3137: PUSH
3138: LD_INT 102
3140: PUSH
3141: LD_INT 103
3143: PUSH
3144: LD_INT 104
3146: PUSH
3147: LD_INT 105
3149: PUSH
3150: LD_INT 106
3152: PUSH
3153: LD_INT 107
3155: PUSH
3156: LD_INT 108
3158: PUSH
3159: LD_INT 109
3161: PUSH
3162: LD_INT 110
3164: PUSH
3165: LD_INT 111
3167: PUSH
3168: LD_INT 112
3170: PUSH
3171: LD_INT 114
3173: PUSH
3174: LD_INT 116
3176: PUSH
3177: LD_INT 117
3179: PUSH
3180: LD_INT 118
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: ST_TO_ADDR
3205: GO 4888
3207: LD_INT 12
3209: DOUBLE
3210: EQUAL
3211: IFTRUE 3215
3213: GO 3435
3215: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: LD_INT 1
3223: PUSH
3224: LD_INT 2
3226: PUSH
3227: LD_INT 3
3229: PUSH
3230: LD_INT 4
3232: PUSH
3233: LD_INT 5
3235: PUSH
3236: LD_INT 6
3238: PUSH
3239: LD_INT 7
3241: PUSH
3242: LD_INT 8
3244: PUSH
3245: LD_INT 9
3247: PUSH
3248: LD_INT 10
3250: PUSH
3251: LD_INT 11
3253: PUSH
3254: LD_INT 12
3256: PUSH
3257: LD_INT 13
3259: PUSH
3260: LD_INT 14
3262: PUSH
3263: LD_INT 15
3265: PUSH
3266: LD_INT 16
3268: PUSH
3269: LD_INT 17
3271: PUSH
3272: LD_INT 18
3274: PUSH
3275: LD_INT 19
3277: PUSH
3278: LD_INT 20
3280: PUSH
3281: LD_INT 21
3283: PUSH
3284: LD_INT 22
3286: PUSH
3287: LD_INT 23
3289: PUSH
3290: LD_INT 24
3292: PUSH
3293: LD_INT 25
3295: PUSH
3296: LD_INT 26
3298: PUSH
3299: LD_INT 27
3301: PUSH
3302: LD_INT 28
3304: PUSH
3305: LD_INT 30
3307: PUSH
3308: LD_INT 31
3310: PUSH
3311: LD_INT 32
3313: PUSH
3314: LD_INT 33
3316: PUSH
3317: LD_INT 34
3319: PUSH
3320: LD_INT 36
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 101
3361: PUSH
3362: LD_INT 102
3364: PUSH
3365: LD_INT 103
3367: PUSH
3368: LD_INT 104
3370: PUSH
3371: LD_INT 105
3373: PUSH
3374: LD_INT 106
3376: PUSH
3377: LD_INT 107
3379: PUSH
3380: LD_INT 108
3382: PUSH
3383: LD_INT 109
3385: PUSH
3386: LD_INT 110
3388: PUSH
3389: LD_INT 111
3391: PUSH
3392: LD_INT 112
3394: PUSH
3395: LD_INT 113
3397: PUSH
3398: LD_INT 114
3400: PUSH
3401: LD_INT 116
3403: PUSH
3404: LD_INT 117
3406: PUSH
3407: LD_INT 118
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: ST_TO_ADDR
3433: GO 4888
3435: LD_INT 13
3437: DOUBLE
3438: EQUAL
3439: IFTRUE 3443
3441: GO 3651
3443: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: LD_INT 1
3451: PUSH
3452: LD_INT 2
3454: PUSH
3455: LD_INT 3
3457: PUSH
3458: LD_INT 4
3460: PUSH
3461: LD_INT 5
3463: PUSH
3464: LD_INT 8
3466: PUSH
3467: LD_INT 9
3469: PUSH
3470: LD_INT 10
3472: PUSH
3473: LD_INT 11
3475: PUSH
3476: LD_INT 12
3478: PUSH
3479: LD_INT 14
3481: PUSH
3482: LD_INT 15
3484: PUSH
3485: LD_INT 16
3487: PUSH
3488: LD_INT 17
3490: PUSH
3491: LD_INT 18
3493: PUSH
3494: LD_INT 19
3496: PUSH
3497: LD_INT 20
3499: PUSH
3500: LD_INT 21
3502: PUSH
3503: LD_INT 22
3505: PUSH
3506: LD_INT 23
3508: PUSH
3509: LD_INT 24
3511: PUSH
3512: LD_INT 25
3514: PUSH
3515: LD_INT 26
3517: PUSH
3518: LD_INT 27
3520: PUSH
3521: LD_INT 28
3523: PUSH
3524: LD_INT 30
3526: PUSH
3527: LD_INT 31
3529: PUSH
3530: LD_INT 32
3532: PUSH
3533: LD_INT 33
3535: PUSH
3536: LD_INT 34
3538: PUSH
3539: LD_INT 36
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: PUSH
3575: LD_INT 101
3577: PUSH
3578: LD_INT 102
3580: PUSH
3581: LD_INT 103
3583: PUSH
3584: LD_INT 104
3586: PUSH
3587: LD_INT 105
3589: PUSH
3590: LD_INT 106
3592: PUSH
3593: LD_INT 107
3595: PUSH
3596: LD_INT 108
3598: PUSH
3599: LD_INT 109
3601: PUSH
3602: LD_INT 110
3604: PUSH
3605: LD_INT 111
3607: PUSH
3608: LD_INT 112
3610: PUSH
3611: LD_INT 113
3613: PUSH
3614: LD_INT 114
3616: PUSH
3617: LD_INT 116
3619: PUSH
3620: LD_INT 117
3622: PUSH
3623: LD_INT 118
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: ST_TO_ADDR
3649: GO 4888
3651: LD_INT 14
3653: DOUBLE
3654: EQUAL
3655: IFTRUE 3659
3657: GO 3883
3659: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3660: LD_ADDR_VAR 0 2
3664: PUSH
3665: LD_INT 1
3667: PUSH
3668: LD_INT 2
3670: PUSH
3671: LD_INT 3
3673: PUSH
3674: LD_INT 4
3676: PUSH
3677: LD_INT 5
3679: PUSH
3680: LD_INT 6
3682: PUSH
3683: LD_INT 7
3685: PUSH
3686: LD_INT 8
3688: PUSH
3689: LD_INT 9
3691: PUSH
3692: LD_INT 10
3694: PUSH
3695: LD_INT 11
3697: PUSH
3698: LD_INT 12
3700: PUSH
3701: LD_INT 13
3703: PUSH
3704: LD_INT 14
3706: PUSH
3707: LD_INT 15
3709: PUSH
3710: LD_INT 16
3712: PUSH
3713: LD_INT 17
3715: PUSH
3716: LD_INT 18
3718: PUSH
3719: LD_INT 19
3721: PUSH
3722: LD_INT 20
3724: PUSH
3725: LD_INT 21
3727: PUSH
3728: LD_INT 22
3730: PUSH
3731: LD_INT 23
3733: PUSH
3734: LD_INT 24
3736: PUSH
3737: LD_INT 25
3739: PUSH
3740: LD_INT 26
3742: PUSH
3743: LD_INT 27
3745: PUSH
3746: LD_INT 28
3748: PUSH
3749: LD_INT 29
3751: PUSH
3752: LD_INT 30
3754: PUSH
3755: LD_INT 31
3757: PUSH
3758: LD_INT 32
3760: PUSH
3761: LD_INT 33
3763: PUSH
3764: LD_INT 34
3766: PUSH
3767: LD_INT 36
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: PUSH
3807: LD_INT 101
3809: PUSH
3810: LD_INT 102
3812: PUSH
3813: LD_INT 103
3815: PUSH
3816: LD_INT 104
3818: PUSH
3819: LD_INT 105
3821: PUSH
3822: LD_INT 106
3824: PUSH
3825: LD_INT 107
3827: PUSH
3828: LD_INT 108
3830: PUSH
3831: LD_INT 109
3833: PUSH
3834: LD_INT 110
3836: PUSH
3837: LD_INT 111
3839: PUSH
3840: LD_INT 112
3842: PUSH
3843: LD_INT 113
3845: PUSH
3846: LD_INT 114
3848: PUSH
3849: LD_INT 116
3851: PUSH
3852: LD_INT 117
3854: PUSH
3855: LD_INT 118
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: ST_TO_ADDR
3881: GO 4888
3883: LD_INT 15
3885: DOUBLE
3886: EQUAL
3887: IFTRUE 3891
3889: GO 4115
3891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
3892: LD_ADDR_VAR 0 2
3896: PUSH
3897: LD_INT 1
3899: PUSH
3900: LD_INT 2
3902: PUSH
3903: LD_INT 3
3905: PUSH
3906: LD_INT 4
3908: PUSH
3909: LD_INT 5
3911: PUSH
3912: LD_INT 6
3914: PUSH
3915: LD_INT 7
3917: PUSH
3918: LD_INT 8
3920: PUSH
3921: LD_INT 9
3923: PUSH
3924: LD_INT 10
3926: PUSH
3927: LD_INT 11
3929: PUSH
3930: LD_INT 12
3932: PUSH
3933: LD_INT 13
3935: PUSH
3936: LD_INT 14
3938: PUSH
3939: LD_INT 15
3941: PUSH
3942: LD_INT 16
3944: PUSH
3945: LD_INT 17
3947: PUSH
3948: LD_INT 18
3950: PUSH
3951: LD_INT 19
3953: PUSH
3954: LD_INT 20
3956: PUSH
3957: LD_INT 21
3959: PUSH
3960: LD_INT 22
3962: PUSH
3963: LD_INT 23
3965: PUSH
3966: LD_INT 24
3968: PUSH
3969: LD_INT 25
3971: PUSH
3972: LD_INT 26
3974: PUSH
3975: LD_INT 27
3977: PUSH
3978: LD_INT 28
3980: PUSH
3981: LD_INT 29
3983: PUSH
3984: LD_INT 30
3986: PUSH
3987: LD_INT 31
3989: PUSH
3990: LD_INT 32
3992: PUSH
3993: LD_INT 33
3995: PUSH
3996: LD_INT 34
3998: PUSH
3999: LD_INT 36
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 101
4041: PUSH
4042: LD_INT 102
4044: PUSH
4045: LD_INT 103
4047: PUSH
4048: LD_INT 104
4050: PUSH
4051: LD_INT 105
4053: PUSH
4054: LD_INT 106
4056: PUSH
4057: LD_INT 107
4059: PUSH
4060: LD_INT 108
4062: PUSH
4063: LD_INT 109
4065: PUSH
4066: LD_INT 110
4068: PUSH
4069: LD_INT 111
4071: PUSH
4072: LD_INT 112
4074: PUSH
4075: LD_INT 113
4077: PUSH
4078: LD_INT 114
4080: PUSH
4081: LD_INT 116
4083: PUSH
4084: LD_INT 117
4086: PUSH
4087: LD_INT 118
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: ST_TO_ADDR
4113: GO 4888
4115: LD_INT 16
4117: DOUBLE
4118: EQUAL
4119: IFTRUE 4123
4121: GO 4259
4123: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4124: LD_ADDR_VAR 0 2
4128: PUSH
4129: LD_INT 2
4131: PUSH
4132: LD_INT 4
4134: PUSH
4135: LD_INT 5
4137: PUSH
4138: LD_INT 7
4140: PUSH
4141: LD_INT 11
4143: PUSH
4144: LD_INT 12
4146: PUSH
4147: LD_INT 15
4149: PUSH
4150: LD_INT 16
4152: PUSH
4153: LD_INT 20
4155: PUSH
4156: LD_INT 21
4158: PUSH
4159: LD_INT 22
4161: PUSH
4162: LD_INT 23
4164: PUSH
4165: LD_INT 25
4167: PUSH
4168: LD_INT 26
4170: PUSH
4171: LD_INT 30
4173: PUSH
4174: LD_INT 31
4176: PUSH
4177: LD_INT 32
4179: PUSH
4180: LD_INT 33
4182: PUSH
4183: LD_INT 34
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 101
4209: PUSH
4210: LD_INT 102
4212: PUSH
4213: LD_INT 103
4215: PUSH
4216: LD_INT 106
4218: PUSH
4219: LD_INT 108
4221: PUSH
4222: LD_INT 112
4224: PUSH
4225: LD_INT 113
4227: PUSH
4228: LD_INT 114
4230: PUSH
4231: LD_INT 116
4233: PUSH
4234: LD_INT 117
4236: PUSH
4237: LD_INT 118
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: ST_TO_ADDR
4257: GO 4888
4259: LD_INT 17
4261: DOUBLE
4262: EQUAL
4263: IFTRUE 4267
4265: GO 4491
4267: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4268: LD_ADDR_VAR 0 2
4272: PUSH
4273: LD_INT 1
4275: PUSH
4276: LD_INT 2
4278: PUSH
4279: LD_INT 3
4281: PUSH
4282: LD_INT 4
4284: PUSH
4285: LD_INT 5
4287: PUSH
4288: LD_INT 6
4290: PUSH
4291: LD_INT 7
4293: PUSH
4294: LD_INT 8
4296: PUSH
4297: LD_INT 9
4299: PUSH
4300: LD_INT 10
4302: PUSH
4303: LD_INT 11
4305: PUSH
4306: LD_INT 12
4308: PUSH
4309: LD_INT 13
4311: PUSH
4312: LD_INT 14
4314: PUSH
4315: LD_INT 15
4317: PUSH
4318: LD_INT 16
4320: PUSH
4321: LD_INT 17
4323: PUSH
4324: LD_INT 18
4326: PUSH
4327: LD_INT 19
4329: PUSH
4330: LD_INT 20
4332: PUSH
4333: LD_INT 21
4335: PUSH
4336: LD_INT 22
4338: PUSH
4339: LD_INT 23
4341: PUSH
4342: LD_INT 24
4344: PUSH
4345: LD_INT 25
4347: PUSH
4348: LD_INT 26
4350: PUSH
4351: LD_INT 27
4353: PUSH
4354: LD_INT 28
4356: PUSH
4357: LD_INT 29
4359: PUSH
4360: LD_INT 30
4362: PUSH
4363: LD_INT 31
4365: PUSH
4366: LD_INT 32
4368: PUSH
4369: LD_INT 33
4371: PUSH
4372: LD_INT 34
4374: PUSH
4375: LD_INT 36
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 101
4417: PUSH
4418: LD_INT 102
4420: PUSH
4421: LD_INT 103
4423: PUSH
4424: LD_INT 104
4426: PUSH
4427: LD_INT 105
4429: PUSH
4430: LD_INT 106
4432: PUSH
4433: LD_INT 107
4435: PUSH
4436: LD_INT 108
4438: PUSH
4439: LD_INT 109
4441: PUSH
4442: LD_INT 110
4444: PUSH
4445: LD_INT 111
4447: PUSH
4448: LD_INT 112
4450: PUSH
4451: LD_INT 113
4453: PUSH
4454: LD_INT 114
4456: PUSH
4457: LD_INT 116
4459: PUSH
4460: LD_INT 117
4462: PUSH
4463: LD_INT 118
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: ST_TO_ADDR
4489: GO 4888
4491: LD_INT 18
4493: DOUBLE
4494: EQUAL
4495: IFTRUE 4499
4497: GO 4647
4499: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4500: LD_ADDR_VAR 0 2
4504: PUSH
4505: LD_INT 2
4507: PUSH
4508: LD_INT 4
4510: PUSH
4511: LD_INT 5
4513: PUSH
4514: LD_INT 7
4516: PUSH
4517: LD_INT 11
4519: PUSH
4520: LD_INT 12
4522: PUSH
4523: LD_INT 15
4525: PUSH
4526: LD_INT 16
4528: PUSH
4529: LD_INT 20
4531: PUSH
4532: LD_INT 21
4534: PUSH
4535: LD_INT 22
4537: PUSH
4538: LD_INT 23
4540: PUSH
4541: LD_INT 25
4543: PUSH
4544: LD_INT 26
4546: PUSH
4547: LD_INT 30
4549: PUSH
4550: LD_INT 31
4552: PUSH
4553: LD_INT 32
4555: PUSH
4556: LD_INT 33
4558: PUSH
4559: LD_INT 34
4561: PUSH
4562: LD_INT 35
4564: PUSH
4565: LD_INT 36
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 101
4593: PUSH
4594: LD_INT 102
4596: PUSH
4597: LD_INT 103
4599: PUSH
4600: LD_INT 106
4602: PUSH
4603: LD_INT 108
4605: PUSH
4606: LD_INT 112
4608: PUSH
4609: LD_INT 113
4611: PUSH
4612: LD_INT 114
4614: PUSH
4615: LD_INT 115
4617: PUSH
4618: LD_INT 116
4620: PUSH
4621: LD_INT 117
4623: PUSH
4624: LD_INT 118
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: ST_TO_ADDR
4645: GO 4888
4647: LD_INT 19
4649: DOUBLE
4650: EQUAL
4651: IFTRUE 4655
4653: GO 4887
4655: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4656: LD_ADDR_VAR 0 2
4660: PUSH
4661: LD_INT 1
4663: PUSH
4664: LD_INT 2
4666: PUSH
4667: LD_INT 3
4669: PUSH
4670: LD_INT 4
4672: PUSH
4673: LD_INT 5
4675: PUSH
4676: LD_INT 6
4678: PUSH
4679: LD_INT 7
4681: PUSH
4682: LD_INT 8
4684: PUSH
4685: LD_INT 9
4687: PUSH
4688: LD_INT 10
4690: PUSH
4691: LD_INT 11
4693: PUSH
4694: LD_INT 12
4696: PUSH
4697: LD_INT 13
4699: PUSH
4700: LD_INT 14
4702: PUSH
4703: LD_INT 15
4705: PUSH
4706: LD_INT 16
4708: PUSH
4709: LD_INT 17
4711: PUSH
4712: LD_INT 18
4714: PUSH
4715: LD_INT 19
4717: PUSH
4718: LD_INT 20
4720: PUSH
4721: LD_INT 21
4723: PUSH
4724: LD_INT 22
4726: PUSH
4727: LD_INT 23
4729: PUSH
4730: LD_INT 24
4732: PUSH
4733: LD_INT 25
4735: PUSH
4736: LD_INT 26
4738: PUSH
4739: LD_INT 27
4741: PUSH
4742: LD_INT 28
4744: PUSH
4745: LD_INT 29
4747: PUSH
4748: LD_INT 30
4750: PUSH
4751: LD_INT 31
4753: PUSH
4754: LD_INT 32
4756: PUSH
4757: LD_INT 33
4759: PUSH
4760: LD_INT 34
4762: PUSH
4763: LD_INT 35
4765: PUSH
4766: LD_INT 36
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: PUSH
4807: LD_INT 101
4809: PUSH
4810: LD_INT 102
4812: PUSH
4813: LD_INT 103
4815: PUSH
4816: LD_INT 104
4818: PUSH
4819: LD_INT 105
4821: PUSH
4822: LD_INT 106
4824: PUSH
4825: LD_INT 107
4827: PUSH
4828: LD_INT 108
4830: PUSH
4831: LD_INT 109
4833: PUSH
4834: LD_INT 110
4836: PUSH
4837: LD_INT 111
4839: PUSH
4840: LD_INT 112
4842: PUSH
4843: LD_INT 113
4845: PUSH
4846: LD_INT 114
4848: PUSH
4849: LD_INT 115
4851: PUSH
4852: LD_INT 116
4854: PUSH
4855: LD_INT 117
4857: PUSH
4858: LD_INT 118
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: ST_TO_ADDR
4885: GO 4888
4887: POP
// end else
4888: GO 5119
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
4890: LD_ADDR_VAR 0 2
4894: PUSH
4895: LD_INT 1
4897: PUSH
4898: LD_INT 2
4900: PUSH
4901: LD_INT 3
4903: PUSH
4904: LD_INT 4
4906: PUSH
4907: LD_INT 5
4909: PUSH
4910: LD_INT 6
4912: PUSH
4913: LD_INT 7
4915: PUSH
4916: LD_INT 8
4918: PUSH
4919: LD_INT 9
4921: PUSH
4922: LD_INT 10
4924: PUSH
4925: LD_INT 11
4927: PUSH
4928: LD_INT 12
4930: PUSH
4931: LD_INT 13
4933: PUSH
4934: LD_INT 14
4936: PUSH
4937: LD_INT 15
4939: PUSH
4940: LD_INT 16
4942: PUSH
4943: LD_INT 17
4945: PUSH
4946: LD_INT 18
4948: PUSH
4949: LD_INT 19
4951: PUSH
4952: LD_INT 20
4954: PUSH
4955: LD_INT 21
4957: PUSH
4958: LD_INT 22
4960: PUSH
4961: LD_INT 23
4963: PUSH
4964: LD_INT 24
4966: PUSH
4967: LD_INT 25
4969: PUSH
4970: LD_INT 26
4972: PUSH
4973: LD_INT 27
4975: PUSH
4976: LD_INT 28
4978: PUSH
4979: LD_INT 29
4981: PUSH
4982: LD_INT 30
4984: PUSH
4985: LD_INT 31
4987: PUSH
4988: LD_INT 32
4990: PUSH
4991: LD_INT 33
4993: PUSH
4994: LD_INT 34
4996: PUSH
4997: LD_INT 35
4999: PUSH
5000: LD_INT 36
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: PUSH
5041: LD_INT 101
5043: PUSH
5044: LD_INT 102
5046: PUSH
5047: LD_INT 103
5049: PUSH
5050: LD_INT 104
5052: PUSH
5053: LD_INT 105
5055: PUSH
5056: LD_INT 106
5058: PUSH
5059: LD_INT 107
5061: PUSH
5062: LD_INT 108
5064: PUSH
5065: LD_INT 109
5067: PUSH
5068: LD_INT 110
5070: PUSH
5071: LD_INT 111
5073: PUSH
5074: LD_INT 112
5076: PUSH
5077: LD_INT 113
5079: PUSH
5080: LD_INT 114
5082: PUSH
5083: LD_INT 115
5085: PUSH
5086: LD_INT 116
5088: PUSH
5089: LD_INT 117
5091: PUSH
5092: LD_INT 118
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// if result then
5119: LD_VAR 0 2
5123: IFFALSE 5909
// begin normal :=  ;
5125: LD_ADDR_VAR 0 5
5129: PUSH
5130: LD_STRING 
5132: ST_TO_ADDR
// hardcore :=  ;
5133: LD_ADDR_VAR 0 6
5137: PUSH
5138: LD_STRING 
5140: ST_TO_ADDR
// active :=  ;
5141: LD_ADDR_VAR 0 7
5145: PUSH
5146: LD_STRING 
5148: ST_TO_ADDR
// for i = 1 to normalCounter do
5149: LD_ADDR_VAR 0 8
5153: PUSH
5154: DOUBLE
5155: LD_INT 1
5157: DEC
5158: ST_TO_ADDR
5159: LD_EXP 2
5163: PUSH
5164: FOR_TO
5165: IFFALSE 5266
// begin tmp := 0 ;
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: LD_STRING 0
5174: ST_TO_ADDR
// if result [ 1 ] then
5175: LD_VAR 0 2
5179: PUSH
5180: LD_INT 1
5182: ARRAY
5183: IFFALSE 5248
// if result [ 1 ] [ 1 ] = i then
5185: LD_VAR 0 2
5189: PUSH
5190: LD_INT 1
5192: ARRAY
5193: PUSH
5194: LD_INT 1
5196: ARRAY
5197: PUSH
5198: LD_VAR 0 8
5202: EQUAL
5203: IFFALSE 5248
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5205: LD_ADDR_VAR 0 2
5209: PUSH
5210: LD_VAR 0 2
5214: PPUSH
5215: LD_INT 1
5217: PPUSH
5218: LD_VAR 0 2
5222: PUSH
5223: LD_INT 1
5225: ARRAY
5226: PPUSH
5227: LD_INT 1
5229: PPUSH
5230: CALL_OW 3
5234: PPUSH
5235: CALL_OW 1
5239: ST_TO_ADDR
// tmp := 1 ;
5240: LD_ADDR_VAR 0 3
5244: PUSH
5245: LD_STRING 1
5247: ST_TO_ADDR
// end ; normal := normal & tmp ;
5248: LD_ADDR_VAR 0 5
5252: PUSH
5253: LD_VAR 0 5
5257: PUSH
5258: LD_VAR 0 3
5262: STR
5263: ST_TO_ADDR
// end ;
5264: GO 5164
5266: POP
5267: POP
// for i = 1 to hardcoreCounter do
5268: LD_ADDR_VAR 0 8
5272: PUSH
5273: DOUBLE
5274: LD_INT 1
5276: DEC
5277: ST_TO_ADDR
5278: LD_EXP 3
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5389
// begin tmp := 0 ;
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_STRING 0
5293: ST_TO_ADDR
// if result [ 2 ] then
5294: LD_VAR 0 2
5298: PUSH
5299: LD_INT 2
5301: ARRAY
5302: IFFALSE 5371
// if result [ 2 ] [ 1 ] = 100 + i then
5304: LD_VAR 0 2
5308: PUSH
5309: LD_INT 2
5311: ARRAY
5312: PUSH
5313: LD_INT 1
5315: ARRAY
5316: PUSH
5317: LD_INT 100
5319: PUSH
5320: LD_VAR 0 8
5324: PLUS
5325: EQUAL
5326: IFFALSE 5371
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5328: LD_ADDR_VAR 0 2
5332: PUSH
5333: LD_VAR 0 2
5337: PPUSH
5338: LD_INT 2
5340: PPUSH
5341: LD_VAR 0 2
5345: PUSH
5346: LD_INT 2
5348: ARRAY
5349: PPUSH
5350: LD_INT 1
5352: PPUSH
5353: CALL_OW 3
5357: PPUSH
5358: CALL_OW 1
5362: ST_TO_ADDR
// tmp := 1 ;
5363: LD_ADDR_VAR 0 3
5367: PUSH
5368: LD_STRING 1
5370: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5371: LD_ADDR_VAR 0 6
5375: PUSH
5376: LD_VAR 0 6
5380: PUSH
5381: LD_VAR 0 3
5385: STR
5386: ST_TO_ADDR
// end ;
5387: GO 5283
5389: POP
5390: POP
// if isGameLoad then
5391: LD_VAR 0 1
5395: IFFALSE 5870
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5397: LD_ADDR_VAR 0 4
5401: PUSH
5402: LD_EXP 6
5406: PUSH
5407: LD_EXP 5
5411: PUSH
5412: LD_EXP 7
5416: PUSH
5417: LD_EXP 4
5421: PUSH
5422: LD_EXP 8
5426: PUSH
5427: LD_EXP 9
5431: PUSH
5432: LD_EXP 10
5436: PUSH
5437: LD_EXP 11
5441: PUSH
5442: LD_EXP 12
5446: PUSH
5447: LD_EXP 13
5451: PUSH
5452: LD_EXP 14
5456: PUSH
5457: LD_EXP 15
5461: PUSH
5462: LD_EXP 16
5466: PUSH
5467: LD_EXP 17
5471: PUSH
5472: LD_EXP 25
5476: PUSH
5477: LD_EXP 26
5481: PUSH
5482: LD_EXP 27
5486: PUSH
5487: LD_EXP 28
5491: PUSH
5492: LD_EXP 30
5496: PUSH
5497: LD_EXP 31
5501: PUSH
5502: LD_EXP 32
5506: PUSH
5507: LD_EXP 35
5511: PUSH
5512: LD_EXP 37
5516: PUSH
5517: LD_EXP 38
5521: PUSH
5522: LD_EXP 39
5526: PUSH
5527: LD_EXP 41
5531: PUSH
5532: LD_EXP 42
5536: PUSH
5537: LD_EXP 45
5541: PUSH
5542: LD_EXP 46
5546: PUSH
5547: LD_EXP 47
5551: PUSH
5552: LD_EXP 48
5556: PUSH
5557: LD_EXP 49
5561: PUSH
5562: LD_EXP 50
5566: PUSH
5567: LD_EXP 51
5571: PUSH
5572: LD_EXP 52
5576: PUSH
5577: LD_EXP 53
5581: PUSH
5582: LD_EXP 18
5586: PUSH
5587: LD_EXP 19
5591: PUSH
5592: LD_EXP 22
5596: PUSH
5597: LD_EXP 23
5601: PUSH
5602: LD_EXP 24
5606: PUSH
5607: LD_EXP 20
5611: PUSH
5612: LD_EXP 21
5616: PUSH
5617: LD_EXP 29
5621: PUSH
5622: LD_EXP 33
5626: PUSH
5627: LD_EXP 34
5631: PUSH
5632: LD_EXP 36
5636: PUSH
5637: LD_EXP 40
5641: PUSH
5642: LD_EXP 43
5646: PUSH
5647: LD_EXP 44
5651: PUSH
5652: LD_EXP 54
5656: PUSH
5657: LD_EXP 55
5661: PUSH
5662: LD_EXP 56
5666: PUSH
5667: LD_EXP 57
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: ST_TO_ADDR
// tmp :=  ;
5728: LD_ADDR_VAR 0 3
5732: PUSH
5733: LD_STRING 
5735: ST_TO_ADDR
// for i = 1 to normalCounter do
5736: LD_ADDR_VAR 0 8
5740: PUSH
5741: DOUBLE
5742: LD_INT 1
5744: DEC
5745: ST_TO_ADDR
5746: LD_EXP 2
5750: PUSH
5751: FOR_TO
5752: IFFALSE 5788
// begin if flags [ i ] then
5754: LD_VAR 0 4
5758: PUSH
5759: LD_VAR 0 8
5763: ARRAY
5764: IFFALSE 5786
// tmp := tmp & i & ; ;
5766: LD_ADDR_VAR 0 3
5770: PUSH
5771: LD_VAR 0 3
5775: PUSH
5776: LD_VAR 0 8
5780: STR
5781: PUSH
5782: LD_STRING ;
5784: STR
5785: ST_TO_ADDR
// end ;
5786: GO 5751
5788: POP
5789: POP
// for i = 1 to hardcoreCounter do
5790: LD_ADDR_VAR 0 8
5794: PUSH
5795: DOUBLE
5796: LD_INT 1
5798: DEC
5799: ST_TO_ADDR
5800: LD_EXP 3
5804: PUSH
5805: FOR_TO
5806: IFFALSE 5852
// begin if flags [ normalCounter + i ] then
5808: LD_VAR 0 4
5812: PUSH
5813: LD_EXP 2
5817: PUSH
5818: LD_VAR 0 8
5822: PLUS
5823: ARRAY
5824: IFFALSE 5850
// tmp := tmp & ( 100 + i ) & ; ;
5826: LD_ADDR_VAR 0 3
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: LD_INT 100
5838: PUSH
5839: LD_VAR 0 8
5843: PLUS
5844: STR
5845: PUSH
5846: LD_STRING ;
5848: STR
5849: ST_TO_ADDR
// end ;
5850: GO 5805
5852: POP
5853: POP
// if tmp then
5854: LD_VAR 0 3
5858: IFFALSE 5870
// active := tmp ;
5860: LD_ADDR_VAR 0 7
5864: PUSH
5865: LD_VAR 0 3
5869: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
5870: LD_STRING getStreamItemsFromMission("
5872: PUSH
5873: LD_VAR 0 5
5877: STR
5878: PUSH
5879: LD_STRING ","
5881: STR
5882: PUSH
5883: LD_VAR 0 6
5887: STR
5888: PUSH
5889: LD_STRING ","
5891: STR
5892: PUSH
5893: LD_VAR 0 7
5897: STR
5898: PUSH
5899: LD_STRING ")
5901: STR
5902: PPUSH
5903: CALL_OW 559
// end else
5907: GO 5916
// ToLua ( getStreamItemsFromMission("","","") ) ;
5909: LD_STRING getStreamItemsFromMission("","","")
5911: PPUSH
5912: CALL_OW 559
// end ;
5916: LD_VAR 0 2
5920: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
5921: LD_EXP 1
5925: PUSH
5926: LD_EXP 6
5930: AND
5931: IFFALSE 6055
5933: GO 5935
5935: DISABLE
5936: LD_INT 0
5938: PPUSH
5939: PPUSH
// begin enable ;
5940: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
5941: LD_ADDR_VAR 0 2
5945: PUSH
5946: LD_INT 22
5948: PUSH
5949: LD_OWVAR 2
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 2
5960: PUSH
5961: LD_INT 34
5963: PUSH
5964: LD_INT 7
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 34
5973: PUSH
5974: LD_INT 45
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: LD_INT 34
5983: PUSH
5984: LD_INT 28
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PUSH
5991: LD_INT 34
5993: PUSH
5994: LD_INT 47
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ST_TO_ADDR
// if not tmp then
6017: LD_VAR 0 2
6021: NOT
6022: IFFALSE 6026
// exit ;
6024: GO 6055
// for i in tmp do
6026: LD_ADDR_VAR 0 1
6030: PUSH
6031: LD_VAR 0 2
6035: PUSH
6036: FOR_IN
6037: IFFALSE 6053
// begin SetLives ( i , 0 ) ;
6039: LD_VAR 0 1
6043: PPUSH
6044: LD_INT 0
6046: PPUSH
6047: CALL_OW 234
// end ;
6051: GO 6036
6053: POP
6054: POP
// end ;
6055: PPOPN 2
6057: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6058: LD_EXP 1
6062: PUSH
6063: LD_EXP 7
6067: AND
6068: IFFALSE 6152
6070: GO 6072
6072: DISABLE
6073: LD_INT 0
6075: PPUSH
6076: PPUSH
// begin enable ;
6077: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6078: LD_ADDR_VAR 0 2
6082: PUSH
6083: LD_INT 22
6085: PUSH
6086: LD_OWVAR 2
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 32
6097: PUSH
6098: LD_INT 3
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PPUSH
6109: CALL_OW 69
6113: ST_TO_ADDR
// if not tmp then
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6123
// exit ;
6121: GO 6152
// for i in tmp do
6123: LD_ADDR_VAR 0 1
6127: PUSH
6128: LD_VAR 0 2
6132: PUSH
6133: FOR_IN
6134: IFFALSE 6150
// begin SetLives ( i , 0 ) ;
6136: LD_VAR 0 1
6140: PPUSH
6141: LD_INT 0
6143: PPUSH
6144: CALL_OW 234
// end ;
6148: GO 6133
6150: POP
6151: POP
// end ;
6152: PPOPN 2
6154: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6155: LD_EXP 1
6159: PUSH
6160: LD_EXP 4
6164: AND
6165: IFFALSE 6258
6167: GO 6169
6169: DISABLE
6170: LD_INT 0
6172: PPUSH
// begin enable ;
6173: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6174: LD_ADDR_VAR 0 1
6178: PUSH
6179: LD_INT 22
6181: PUSH
6182: LD_OWVAR 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 2
6193: PUSH
6194: LD_INT 25
6196: PUSH
6197: LD_INT 5
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 25
6206: PUSH
6207: LD_INT 9
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 25
6216: PUSH
6217: LD_INT 8
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 69
6238: PUSH
6239: FOR_IN
6240: IFFALSE 6256
// begin SetClass ( i , 1 ) ;
6242: LD_VAR 0 1
6246: PPUSH
6247: LD_INT 1
6249: PPUSH
6250: CALL_OW 336
// end ;
6254: GO 6239
6256: POP
6257: POP
// end ;
6258: PPOPN 1
6260: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6261: LD_EXP 1
6265: PUSH
6266: LD_EXP 5
6270: AND
6271: PUSH
6272: LD_OWVAR 65
6276: PUSH
6277: LD_INT 7
6279: LESS
6280: AND
6281: IFFALSE 6295
6283: GO 6285
6285: DISABLE
// begin enable ;
6286: ENABLE
// game_speed := 7 ;
6287: LD_ADDR_OWVAR 65
6291: PUSH
6292: LD_INT 7
6294: ST_TO_ADDR
// end ;
6295: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6296: LD_EXP 1
6300: PUSH
6301: LD_EXP 8
6305: AND
6306: IFFALSE 6508
6308: GO 6310
6310: DISABLE
6311: LD_INT 0
6313: PPUSH
6314: PPUSH
6315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6316: LD_ADDR_VAR 0 3
6320: PUSH
6321: LD_INT 81
6323: PUSH
6324: LD_OWVAR 2
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 21
6335: PUSH
6336: LD_INT 1
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: PPUSH
6347: CALL_OW 69
6351: ST_TO_ADDR
// if not tmp then
6352: LD_VAR 0 3
6356: NOT
6357: IFFALSE 6361
// exit ;
6359: GO 6508
// if tmp > 5 then
6361: LD_VAR 0 3
6365: PUSH
6366: LD_INT 5
6368: GREATER
6369: IFFALSE 6381
// k := 5 else
6371: LD_ADDR_VAR 0 2
6375: PUSH
6376: LD_INT 5
6378: ST_TO_ADDR
6379: GO 6391
// k := tmp ;
6381: LD_ADDR_VAR 0 2
6385: PUSH
6386: LD_VAR 0 3
6390: ST_TO_ADDR
// for i := 1 to k do
6391: LD_ADDR_VAR 0 1
6395: PUSH
6396: DOUBLE
6397: LD_INT 1
6399: DEC
6400: ST_TO_ADDR
6401: LD_VAR 0 2
6405: PUSH
6406: FOR_TO
6407: IFFALSE 6506
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6409: LD_VAR 0 3
6413: PUSH
6414: LD_VAR 0 1
6418: ARRAY
6419: PPUSH
6420: LD_VAR 0 1
6424: PUSH
6425: LD_INT 4
6427: MOD
6428: PUSH
6429: LD_INT 1
6431: PLUS
6432: PPUSH
6433: CALL_OW 259
6437: PUSH
6438: LD_INT 10
6440: LESS
6441: IFFALSE 6504
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6443: LD_VAR 0 3
6447: PUSH
6448: LD_VAR 0 1
6452: ARRAY
6453: PPUSH
6454: LD_VAR 0 1
6458: PUSH
6459: LD_INT 4
6461: MOD
6462: PUSH
6463: LD_INT 1
6465: PLUS
6466: PPUSH
6467: LD_VAR 0 3
6471: PUSH
6472: LD_VAR 0 1
6476: ARRAY
6477: PPUSH
6478: LD_VAR 0 1
6482: PUSH
6483: LD_INT 4
6485: MOD
6486: PUSH
6487: LD_INT 1
6489: PLUS
6490: PPUSH
6491: CALL_OW 259
6495: PUSH
6496: LD_INT 1
6498: PLUS
6499: PPUSH
6500: CALL_OW 237
6504: GO 6406
6506: POP
6507: POP
// end ;
6508: PPOPN 3
6510: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6511: LD_EXP 1
6515: PUSH
6516: LD_EXP 9
6520: AND
6521: IFFALSE 6541
6523: GO 6525
6525: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6526: LD_INT 4
6528: PPUSH
6529: LD_OWVAR 2
6533: PPUSH
6534: LD_INT 0
6536: PPUSH
6537: CALL_OW 324
6541: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6542: LD_EXP 1
6546: PUSH
6547: LD_EXP 38
6551: AND
6552: IFFALSE 6572
6554: GO 6556
6556: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6557: LD_INT 19
6559: PPUSH
6560: LD_OWVAR 2
6564: PPUSH
6565: LD_INT 0
6567: PPUSH
6568: CALL_OW 324
6572: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6573: LD_EXP 1
6577: PUSH
6578: LD_EXP 10
6582: AND
6583: IFFALSE 6685
6585: GO 6587
6587: DISABLE
6588: LD_INT 0
6590: PPUSH
6591: PPUSH
// begin enable ;
6592: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6593: LD_ADDR_VAR 0 2
6597: PUSH
6598: LD_INT 22
6600: PUSH
6601: LD_OWVAR 2
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 34
6615: PUSH
6616: LD_INT 11
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 34
6625: PUSH
6626: LD_INT 30
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: ST_TO_ADDR
// if not tmp then
6647: LD_VAR 0 2
6651: NOT
6652: IFFALSE 6656
// exit ;
6654: GO 6685
// for i in tmp do
6656: LD_ADDR_VAR 0 1
6660: PUSH
6661: LD_VAR 0 2
6665: PUSH
6666: FOR_IN
6667: IFFALSE 6683
// begin SetLives ( i , 0 ) ;
6669: LD_VAR 0 1
6673: PPUSH
6674: LD_INT 0
6676: PPUSH
6677: CALL_OW 234
// end ;
6681: GO 6666
6683: POP
6684: POP
// end ;
6685: PPOPN 2
6687: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6688: LD_EXP 1
6692: PUSH
6693: LD_EXP 11
6697: AND
6698: IFFALSE 6718
6700: GO 6702
6702: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6703: LD_INT 32
6705: PPUSH
6706: LD_OWVAR 2
6710: PPUSH
6711: LD_INT 0
6713: PPUSH
6714: CALL_OW 324
6718: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6719: LD_EXP 1
6723: PUSH
6724: LD_EXP 12
6728: AND
6729: IFFALSE 6910
6731: GO 6733
6733: DISABLE
6734: LD_INT 0
6736: PPUSH
6737: PPUSH
6738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6739: LD_ADDR_VAR 0 2
6743: PUSH
6744: LD_INT 22
6746: PUSH
6747: LD_OWVAR 2
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PUSH
6756: LD_INT 33
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PPUSH
6770: CALL_OW 69
6774: ST_TO_ADDR
// if not tmp then
6775: LD_VAR 0 2
6779: NOT
6780: IFFALSE 6784
// exit ;
6782: GO 6910
// side := 0 ;
6784: LD_ADDR_VAR 0 3
6788: PUSH
6789: LD_INT 0
6791: ST_TO_ADDR
// for i := 1 to 8 do
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: DOUBLE
6798: LD_INT 1
6800: DEC
6801: ST_TO_ADDR
6802: LD_INT 8
6804: PUSH
6805: FOR_TO
6806: IFFALSE 6854
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
6808: LD_OWVAR 2
6812: PUSH
6813: LD_VAR 0 1
6817: NONEQUAL
6818: PUSH
6819: LD_OWVAR 2
6823: PPUSH
6824: LD_VAR 0 1
6828: PPUSH
6829: CALL_OW 81
6833: PUSH
6834: LD_INT 2
6836: EQUAL
6837: AND
6838: IFFALSE 6852
// begin side := i ;
6840: LD_ADDR_VAR 0 3
6844: PUSH
6845: LD_VAR 0 1
6849: ST_TO_ADDR
// break ;
6850: GO 6854
// end ;
6852: GO 6805
6854: POP
6855: POP
// if not side then
6856: LD_VAR 0 3
6860: NOT
6861: IFFALSE 6865
// exit ;
6863: GO 6910
// for i := 1 to tmp do
6865: LD_ADDR_VAR 0 1
6869: PUSH
6870: DOUBLE
6871: LD_INT 1
6873: DEC
6874: ST_TO_ADDR
6875: LD_VAR 0 2
6879: PUSH
6880: FOR_TO
6881: IFFALSE 6908
// if Prob ( 60 ) then
6883: LD_INT 60
6885: PPUSH
6886: CALL_OW 13
6890: IFFALSE 6906
// SetSide ( i , side ) ;
6892: LD_VAR 0 1
6896: PPUSH
6897: LD_VAR 0 3
6901: PPUSH
6902: CALL_OW 235
6906: GO 6880
6908: POP
6909: POP
// end ;
6910: PPOPN 3
6912: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
6913: LD_EXP 1
6917: PUSH
6918: LD_EXP 14
6922: AND
6923: IFFALSE 7042
6925: GO 6927
6927: DISABLE
6928: LD_INT 0
6930: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
6931: LD_ADDR_VAR 0 1
6935: PUSH
6936: LD_INT 22
6938: PUSH
6939: LD_OWVAR 2
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 21
6950: PUSH
6951: LD_INT 1
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 3
6960: PUSH
6961: LD_INT 23
6963: PUSH
6964: LD_INT 0
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: PPUSH
6980: CALL_OW 69
6984: PUSH
6985: FOR_IN
6986: IFFALSE 7040
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
6988: LD_VAR 0 1
6992: PPUSH
6993: CALL_OW 257
6997: PUSH
6998: LD_INT 1
7000: PUSH
7001: LD_INT 2
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: LD_INT 4
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: IN
7016: IFFALSE 7038
// SetClass ( un , rand ( 1 , 4 ) ) ;
7018: LD_VAR 0 1
7022: PPUSH
7023: LD_INT 1
7025: PPUSH
7026: LD_INT 4
7028: PPUSH
7029: CALL_OW 12
7033: PPUSH
7034: CALL_OW 336
7038: GO 6985
7040: POP
7041: POP
// end ;
7042: PPOPN 1
7044: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7045: LD_EXP 1
7049: PUSH
7050: LD_EXP 13
7054: AND
7055: IFFALSE 7134
7057: GO 7059
7059: DISABLE
7060: LD_INT 0
7062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7063: LD_ADDR_VAR 0 1
7067: PUSH
7068: LD_INT 22
7070: PUSH
7071: LD_OWVAR 2
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 21
7082: PUSH
7083: LD_INT 3
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PPUSH
7094: CALL_OW 69
7098: ST_TO_ADDR
// if not tmp then
7099: LD_VAR 0 1
7103: NOT
7104: IFFALSE 7108
// exit ;
7106: GO 7134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7108: LD_VAR 0 1
7112: PUSH
7113: LD_INT 1
7115: PPUSH
7116: LD_VAR 0 1
7120: PPUSH
7121: CALL_OW 12
7125: ARRAY
7126: PPUSH
7127: LD_INT 100
7129: PPUSH
7130: CALL_OW 234
// end ;
7134: PPOPN 1
7136: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7137: LD_EXP 1
7141: PUSH
7142: LD_EXP 15
7146: AND
7147: IFFALSE 7245
7149: GO 7151
7151: DISABLE
7152: LD_INT 0
7154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7155: LD_ADDR_VAR 0 1
7159: PUSH
7160: LD_INT 22
7162: PUSH
7163: LD_OWVAR 2
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 21
7174: PUSH
7175: LD_INT 1
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PPUSH
7186: CALL_OW 69
7190: ST_TO_ADDR
// if not tmp then
7191: LD_VAR 0 1
7195: NOT
7196: IFFALSE 7200
// exit ;
7198: GO 7245
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7200: LD_VAR 0 1
7204: PUSH
7205: LD_INT 1
7207: PPUSH
7208: LD_VAR 0 1
7212: PPUSH
7213: CALL_OW 12
7217: ARRAY
7218: PPUSH
7219: LD_INT 1
7221: PPUSH
7222: LD_INT 4
7224: PPUSH
7225: CALL_OW 12
7229: PPUSH
7230: LD_INT 3000
7232: PPUSH
7233: LD_INT 9000
7235: PPUSH
7236: CALL_OW 12
7240: PPUSH
7241: CALL_OW 492
// end ;
7245: PPOPN 1
7247: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7248: LD_EXP 1
7252: PUSH
7253: LD_EXP 16
7257: AND
7258: IFFALSE 7278
7260: GO 7262
7262: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7263: LD_INT 1
7265: PPUSH
7266: LD_OWVAR 2
7270: PPUSH
7271: LD_INT 0
7273: PPUSH
7274: CALL_OW 324
7278: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7279: LD_EXP 1
7283: PUSH
7284: LD_EXP 17
7288: AND
7289: IFFALSE 7372
7291: GO 7293
7293: DISABLE
7294: LD_INT 0
7296: PPUSH
7297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7298: LD_ADDR_VAR 0 2
7302: PUSH
7303: LD_INT 22
7305: PUSH
7306: LD_OWVAR 2
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 21
7317: PUSH
7318: LD_INT 3
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PPUSH
7329: CALL_OW 69
7333: ST_TO_ADDR
// if not tmp then
7334: LD_VAR 0 2
7338: NOT
7339: IFFALSE 7343
// exit ;
7341: GO 7372
// for i in tmp do
7343: LD_ADDR_VAR 0 1
7347: PUSH
7348: LD_VAR 0 2
7352: PUSH
7353: FOR_IN
7354: IFFALSE 7370
// SetBLevel ( i , 10 ) ;
7356: LD_VAR 0 1
7360: PPUSH
7361: LD_INT 10
7363: PPUSH
7364: CALL_OW 241
7368: GO 7353
7370: POP
7371: POP
// end ;
7372: PPOPN 2
7374: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7375: LD_EXP 1
7379: PUSH
7380: LD_EXP 18
7384: AND
7385: IFFALSE 7496
7387: GO 7389
7389: DISABLE
7390: LD_INT 0
7392: PPUSH
7393: PPUSH
7394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7395: LD_ADDR_VAR 0 3
7399: PUSH
7400: LD_INT 22
7402: PUSH
7403: LD_OWVAR 2
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 25
7414: PUSH
7415: LD_INT 1
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PPUSH
7426: CALL_OW 69
7430: ST_TO_ADDR
// if not tmp then
7431: LD_VAR 0 3
7435: NOT
7436: IFFALSE 7440
// exit ;
7438: GO 7496
// un := tmp [ rand ( 1 , tmp ) ] ;
7440: LD_ADDR_VAR 0 2
7444: PUSH
7445: LD_VAR 0 3
7449: PUSH
7450: LD_INT 1
7452: PPUSH
7453: LD_VAR 0 3
7457: PPUSH
7458: CALL_OW 12
7462: ARRAY
7463: ST_TO_ADDR
// if Crawls ( un ) then
7464: LD_VAR 0 2
7468: PPUSH
7469: CALL_OW 318
7473: IFFALSE 7484
// ComWalk ( un ) ;
7475: LD_VAR 0 2
7479: PPUSH
7480: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7484: LD_VAR 0 2
7488: PPUSH
7489: LD_INT 5
7491: PPUSH
7492: CALL_OW 336
// end ;
7496: PPOPN 3
7498: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7499: LD_EXP 1
7503: PUSH
7504: LD_EXP 19
7508: AND
7509: PUSH
7510: LD_OWVAR 67
7514: PUSH
7515: LD_INT 4
7517: LESS
7518: AND
7519: IFFALSE 7538
7521: GO 7523
7523: DISABLE
// begin Difficulty := Difficulty + 1 ;
7524: LD_ADDR_OWVAR 67
7528: PUSH
7529: LD_OWVAR 67
7533: PUSH
7534: LD_INT 1
7536: PLUS
7537: ST_TO_ADDR
// end ;
7538: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7539: LD_EXP 1
7543: PUSH
7544: LD_EXP 20
7548: AND
7549: IFFALSE 7652
7551: GO 7553
7553: DISABLE
7554: LD_INT 0
7556: PPUSH
// begin for i := 1 to 5 do
7557: LD_ADDR_VAR 0 1
7561: PUSH
7562: DOUBLE
7563: LD_INT 1
7565: DEC
7566: ST_TO_ADDR
7567: LD_INT 5
7569: PUSH
7570: FOR_TO
7571: IFFALSE 7650
// begin uc_nation := nation_nature ;
7573: LD_ADDR_OWVAR 21
7577: PUSH
7578: LD_INT 0
7580: ST_TO_ADDR
// uc_side := 0 ;
7581: LD_ADDR_OWVAR 20
7585: PUSH
7586: LD_INT 0
7588: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7589: LD_ADDR_OWVAR 29
7593: PUSH
7594: LD_INT 12
7596: PUSH
7597: LD_INT 12
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: ST_TO_ADDR
// hc_agressivity := 20 ;
7604: LD_ADDR_OWVAR 35
7608: PUSH
7609: LD_INT 20
7611: ST_TO_ADDR
// hc_class := class_tiger ;
7612: LD_ADDR_OWVAR 28
7616: PUSH
7617: LD_INT 14
7619: ST_TO_ADDR
// hc_gallery :=  ;
7620: LD_ADDR_OWVAR 33
7624: PUSH
7625: LD_STRING 
7627: ST_TO_ADDR
// hc_name :=  ;
7628: LD_ADDR_OWVAR 26
7632: PUSH
7633: LD_STRING 
7635: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7636: CALL_OW 44
7640: PPUSH
7641: LD_INT 0
7643: PPUSH
7644: CALL_OW 51
// end ;
7648: GO 7570
7650: POP
7651: POP
// end ;
7652: PPOPN 1
7654: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7655: LD_EXP 1
7659: PUSH
7660: LD_EXP 21
7664: AND
7665: IFFALSE 7674
7667: GO 7669
7669: DISABLE
// StreamSibBomb ;
7670: CALL 7675 0 0
7674: END
// export function StreamSibBomb ; var i , x , y ; begin
7675: LD_INT 0
7677: PPUSH
7678: PPUSH
7679: PPUSH
7680: PPUSH
// result := false ;
7681: LD_ADDR_VAR 0 1
7685: PUSH
7686: LD_INT 0
7688: ST_TO_ADDR
// for i := 1 to 16 do
7689: LD_ADDR_VAR 0 2
7693: PUSH
7694: DOUBLE
7695: LD_INT 1
7697: DEC
7698: ST_TO_ADDR
7699: LD_INT 16
7701: PUSH
7702: FOR_TO
7703: IFFALSE 7902
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7705: LD_ADDR_VAR 0 3
7709: PUSH
7710: LD_INT 10
7712: PUSH
7713: LD_INT 20
7715: PUSH
7716: LD_INT 30
7718: PUSH
7719: LD_INT 40
7721: PUSH
7722: LD_INT 50
7724: PUSH
7725: LD_INT 60
7727: PUSH
7728: LD_INT 70
7730: PUSH
7731: LD_INT 80
7733: PUSH
7734: LD_INT 90
7736: PUSH
7737: LD_INT 100
7739: PUSH
7740: LD_INT 110
7742: PUSH
7743: LD_INT 120
7745: PUSH
7746: LD_INT 130
7748: PUSH
7749: LD_INT 140
7751: PUSH
7752: LD_INT 150
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 1
7774: PPUSH
7775: LD_INT 15
7777: PPUSH
7778: CALL_OW 12
7782: ARRAY
7783: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7784: LD_ADDR_VAR 0 4
7788: PUSH
7789: LD_INT 10
7791: PUSH
7792: LD_INT 20
7794: PUSH
7795: LD_INT 30
7797: PUSH
7798: LD_INT 40
7800: PUSH
7801: LD_INT 50
7803: PUSH
7804: LD_INT 60
7806: PUSH
7807: LD_INT 70
7809: PUSH
7810: LD_INT 80
7812: PUSH
7813: LD_INT 90
7815: PUSH
7816: LD_INT 100
7818: PUSH
7819: LD_INT 110
7821: PUSH
7822: LD_INT 120
7824: PUSH
7825: LD_INT 130
7827: PUSH
7828: LD_INT 140
7830: PUSH
7831: LD_INT 150
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 1
7853: PPUSH
7854: LD_INT 15
7856: PPUSH
7857: CALL_OW 12
7861: ARRAY
7862: ST_TO_ADDR
// if ValidHex ( x , y ) then
7863: LD_VAR 0 3
7867: PPUSH
7868: LD_VAR 0 4
7872: PPUSH
7873: CALL_OW 488
7877: IFFALSE 7900
// begin result := [ x , y ] ;
7879: LD_ADDR_VAR 0 1
7883: PUSH
7884: LD_VAR 0 3
7888: PUSH
7889: LD_VAR 0 4
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: ST_TO_ADDR
// break ;
7898: GO 7902
// end ; end ;
7900: GO 7702
7902: POP
7903: POP
// if result then
7904: LD_VAR 0 1
7908: IFFALSE 7968
// begin ToLua ( playSibBomb() ) ;
7910: LD_STRING playSibBomb()
7912: PPUSH
7913: CALL_OW 559
// wait ( 0 0$14 ) ;
7917: LD_INT 490
7919: PPUSH
7920: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
7924: LD_VAR 0 1
7928: PUSH
7929: LD_INT 1
7931: ARRAY
7932: PPUSH
7933: LD_VAR 0 1
7937: PUSH
7938: LD_INT 2
7940: ARRAY
7941: PPUSH
7942: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
7946: LD_VAR 0 1
7950: PUSH
7951: LD_INT 1
7953: ARRAY
7954: PPUSH
7955: LD_VAR 0 1
7959: PUSH
7960: LD_INT 2
7962: ARRAY
7963: PPUSH
7964: CALL_OW 429
// end ; end ;
7968: LD_VAR 0 1
7972: RET
// every 0 0$1 trigger StreamModeActive and sReset do
7973: LD_EXP 1
7977: PUSH
7978: LD_EXP 23
7982: AND
7983: IFFALSE 7995
7985: GO 7987
7987: DISABLE
// YouLost (  ) ;
7988: LD_STRING 
7990: PPUSH
7991: CALL_OW 104
7995: END
// every 0 0$1 trigger StreamModeActive and sFog do
7996: LD_EXP 1
8000: PUSH
8001: LD_EXP 22
8005: AND
8006: IFFALSE 8020
8008: GO 8010
8010: DISABLE
// FogOff ( your_side ) ;
8011: LD_OWVAR 2
8015: PPUSH
8016: CALL_OW 344
8020: END
// every 0 0$1 trigger StreamModeActive and sSun do
8021: LD_EXP 1
8025: PUSH
8026: LD_EXP 24
8030: AND
8031: IFFALSE 8059
8033: GO 8035
8035: DISABLE
// begin solar_recharge_percent := 0 ;
8036: LD_ADDR_OWVAR 79
8040: PUSH
8041: LD_INT 0
8043: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8044: LD_INT 10500
8046: PPUSH
8047: CALL_OW 67
// solar_recharge_percent := 100 ;
8051: LD_ADDR_OWVAR 79
8055: PUSH
8056: LD_INT 100
8058: ST_TO_ADDR
// end ;
8059: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8060: LD_EXP 1
8064: PUSH
8065: LD_EXP 25
8069: AND
8070: IFFALSE 8309
8072: GO 8074
8074: DISABLE
8075: LD_INT 0
8077: PPUSH
8078: PPUSH
8079: PPUSH
// begin tmp := [ ] ;
8080: LD_ADDR_VAR 0 3
8084: PUSH
8085: EMPTY
8086: ST_TO_ADDR
// for i := 1 to 6 do
8087: LD_ADDR_VAR 0 1
8091: PUSH
8092: DOUBLE
8093: LD_INT 1
8095: DEC
8096: ST_TO_ADDR
8097: LD_INT 6
8099: PUSH
8100: FOR_TO
8101: IFFALSE 8206
// begin uc_nation := nation_nature ;
8103: LD_ADDR_OWVAR 21
8107: PUSH
8108: LD_INT 0
8110: ST_TO_ADDR
// uc_side := 0 ;
8111: LD_ADDR_OWVAR 20
8115: PUSH
8116: LD_INT 0
8118: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8119: LD_ADDR_OWVAR 29
8123: PUSH
8124: LD_INT 12
8126: PUSH
8127: LD_INT 12
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: ST_TO_ADDR
// hc_agressivity := 20 ;
8134: LD_ADDR_OWVAR 35
8138: PUSH
8139: LD_INT 20
8141: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8142: LD_ADDR_OWVAR 28
8146: PUSH
8147: LD_INT 17
8149: ST_TO_ADDR
// hc_gallery :=  ;
8150: LD_ADDR_OWVAR 33
8154: PUSH
8155: LD_STRING 
8157: ST_TO_ADDR
// hc_name :=  ;
8158: LD_ADDR_OWVAR 26
8162: PUSH
8163: LD_STRING 
8165: ST_TO_ADDR
// un := CreateHuman ;
8166: LD_ADDR_VAR 0 2
8170: PUSH
8171: CALL_OW 44
8175: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_INT 1
8183: PPUSH
8184: CALL_OW 51
// tmp := tmp ^ un ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_VAR 0 3
8197: PUSH
8198: LD_VAR 0 2
8202: ADD
8203: ST_TO_ADDR
// end ;
8204: GO 8100
8206: POP
8207: POP
// repeat wait ( 0 0$1 ) ;
8208: LD_INT 35
8210: PPUSH
8211: CALL_OW 67
// for un in tmp do
8215: LD_ADDR_VAR 0 2
8219: PUSH
8220: LD_VAR 0 3
8224: PUSH
8225: FOR_IN
8226: IFFALSE 8300
// begin if IsDead ( un ) then
8228: LD_VAR 0 2
8232: PPUSH
8233: CALL_OW 301
8237: IFFALSE 8257
// begin tmp := tmp diff un ;
8239: LD_ADDR_VAR 0 3
8243: PUSH
8244: LD_VAR 0 3
8248: PUSH
8249: LD_VAR 0 2
8253: DIFF
8254: ST_TO_ADDR
// continue ;
8255: GO 8225
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8257: LD_VAR 0 2
8261: PPUSH
8262: LD_INT 3
8264: PUSH
8265: LD_INT 22
8267: PUSH
8268: LD_INT 0
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PPUSH
8279: CALL_OW 69
8283: PPUSH
8284: LD_VAR 0 2
8288: PPUSH
8289: CALL_OW 74
8293: PPUSH
8294: CALL_OW 115
// end ;
8298: GO 8225
8300: POP
8301: POP
// until not tmp ;
8302: LD_VAR 0 3
8306: NOT
8307: IFFALSE 8208
// end ;
8309: PPOPN 3
8311: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8312: LD_EXP 1
8316: PUSH
8317: LD_EXP 26
8321: AND
8322: IFFALSE 8376
8324: GO 8326
8326: DISABLE
// begin ToLua ( displayTroll(); ) ;
8327: LD_STRING displayTroll();
8329: PPUSH
8330: CALL_OW 559
// wait ( 3 3$00 ) ;
8334: LD_INT 6300
8336: PPUSH
8337: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8341: LD_STRING hideTroll();
8343: PPUSH
8344: CALL_OW 559
// wait ( 1 1$00 ) ;
8348: LD_INT 2100
8350: PPUSH
8351: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8355: LD_STRING displayTroll();
8357: PPUSH
8358: CALL_OW 559
// wait ( 1 1$00 ) ;
8362: LD_INT 2100
8364: PPUSH
8365: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8369: LD_STRING hideTroll();
8371: PPUSH
8372: CALL_OW 559
// end ;
8376: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8377: LD_EXP 1
8381: PUSH
8382: LD_EXP 27
8386: AND
8387: IFFALSE 8450
8389: GO 8391
8391: DISABLE
8392: LD_INT 0
8394: PPUSH
// begin p := 0 ;
8395: LD_ADDR_VAR 0 1
8399: PUSH
8400: LD_INT 0
8402: ST_TO_ADDR
// repeat game_speed := 1 ;
8403: LD_ADDR_OWVAR 65
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8411: LD_INT 35
8413: PPUSH
8414: CALL_OW 67
// p := p + 1 ;
8418: LD_ADDR_VAR 0 1
8422: PUSH
8423: LD_VAR 0 1
8427: PUSH
8428: LD_INT 1
8430: PLUS
8431: ST_TO_ADDR
// until p >= 60 ;
8432: LD_VAR 0 1
8436: PUSH
8437: LD_INT 60
8439: GREATEREQUAL
8440: IFFALSE 8403
// game_speed := 4 ;
8442: LD_ADDR_OWVAR 65
8446: PUSH
8447: LD_INT 4
8449: ST_TO_ADDR
// end ;
8450: PPOPN 1
8452: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8453: LD_EXP 1
8457: PUSH
8458: LD_EXP 28
8462: AND
8463: IFFALSE 8609
8465: GO 8467
8467: DISABLE
8468: LD_INT 0
8470: PPUSH
8471: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8472: LD_ADDR_VAR 0 1
8476: PUSH
8477: LD_INT 22
8479: PUSH
8480: LD_OWVAR 2
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 2
8491: PUSH
8492: LD_INT 30
8494: PUSH
8495: LD_INT 0
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PUSH
8502: LD_INT 30
8504: PUSH
8505: LD_INT 1
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 69
8525: ST_TO_ADDR
// if not depot then
8526: LD_VAR 0 1
8530: NOT
8531: IFFALSE 8535
// exit ;
8533: GO 8609
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8535: LD_ADDR_VAR 0 2
8539: PUSH
8540: LD_VAR 0 1
8544: PUSH
8545: LD_INT 1
8547: PPUSH
8548: LD_VAR 0 1
8552: PPUSH
8553: CALL_OW 12
8557: ARRAY
8558: PPUSH
8559: CALL_OW 274
8563: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8564: LD_VAR 0 2
8568: PPUSH
8569: LD_INT 1
8571: PPUSH
8572: LD_INT 0
8574: PPUSH
8575: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8579: LD_VAR 0 2
8583: PPUSH
8584: LD_INT 2
8586: PPUSH
8587: LD_INT 0
8589: PPUSH
8590: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8594: LD_VAR 0 2
8598: PPUSH
8599: LD_INT 3
8601: PPUSH
8602: LD_INT 0
8604: PPUSH
8605: CALL_OW 277
// end ;
8609: PPOPN 2
8611: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8612: LD_EXP 1
8616: PUSH
8617: LD_EXP 29
8621: AND
8622: IFFALSE 8719
8624: GO 8626
8626: DISABLE
8627: LD_INT 0
8629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8630: LD_ADDR_VAR 0 1
8634: PUSH
8635: LD_INT 22
8637: PUSH
8638: LD_OWVAR 2
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: LD_INT 21
8649: PUSH
8650: LD_INT 1
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 3
8659: PUSH
8660: LD_INT 23
8662: PUSH
8663: LD_INT 0
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 69
8683: ST_TO_ADDR
// if not tmp then
8684: LD_VAR 0 1
8688: NOT
8689: IFFALSE 8693
// exit ;
8691: GO 8719
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8693: LD_VAR 0 1
8697: PUSH
8698: LD_INT 1
8700: PPUSH
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 12
8710: ARRAY
8711: PPUSH
8712: LD_INT 200
8714: PPUSH
8715: CALL_OW 234
// end ;
8719: PPOPN 1
8721: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8722: LD_EXP 1
8726: PUSH
8727: LD_EXP 30
8731: AND
8732: IFFALSE 8811
8734: GO 8736
8736: DISABLE
8737: LD_INT 0
8739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
8740: LD_ADDR_VAR 0 1
8744: PUSH
8745: LD_INT 22
8747: PUSH
8748: LD_OWVAR 2
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: LD_INT 21
8759: PUSH
8760: LD_INT 2
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PPUSH
8771: CALL_OW 69
8775: ST_TO_ADDR
// if not tmp then
8776: LD_VAR 0 1
8780: NOT
8781: IFFALSE 8785
// exit ;
8783: GO 8811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
8785: LD_VAR 0 1
8789: PUSH
8790: LD_INT 1
8792: PPUSH
8793: LD_VAR 0 1
8797: PPUSH
8798: CALL_OW 12
8802: ARRAY
8803: PPUSH
8804: LD_INT 60
8806: PPUSH
8807: CALL_OW 234
// end ;
8811: PPOPN 1
8813: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
8814: LD_EXP 1
8818: PUSH
8819: LD_EXP 31
8823: AND
8824: IFFALSE 8923
8826: GO 8828
8828: DISABLE
8829: LD_INT 0
8831: PPUSH
8832: PPUSH
// begin enable ;
8833: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
8834: LD_ADDR_VAR 0 1
8838: PUSH
8839: LD_INT 22
8841: PUSH
8842: LD_OWVAR 2
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: LD_INT 61
8853: PUSH
8854: EMPTY
8855: LIST
8856: PUSH
8857: LD_INT 33
8859: PUSH
8860: LD_INT 2
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: PPUSH
8872: CALL_OW 69
8876: ST_TO_ADDR
// if not tmp then
8877: LD_VAR 0 1
8881: NOT
8882: IFFALSE 8886
// exit ;
8884: GO 8923
// for i in tmp do
8886: LD_ADDR_VAR 0 2
8890: PUSH
8891: LD_VAR 0 1
8895: PUSH
8896: FOR_IN
8897: IFFALSE 8921
// if IsControledBy ( i ) then
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 312
8908: IFFALSE 8919
// ComUnlink ( i ) ;
8910: LD_VAR 0 2
8914: PPUSH
8915: CALL_OW 136
8919: GO 8896
8921: POP
8922: POP
// end ;
8923: PPOPN 2
8925: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
8926: LD_EXP 1
8930: PUSH
8931: LD_EXP 32
8935: AND
8936: IFFALSE 9076
8938: GO 8940
8940: DISABLE
8941: LD_INT 0
8943: PPUSH
8944: PPUSH
// begin ToLua ( displayPowell(); ) ;
8945: LD_STRING displayPowell();
8947: PPUSH
8948: CALL_OW 559
// uc_side := 0 ;
8952: LD_ADDR_OWVAR 20
8956: PUSH
8957: LD_INT 0
8959: ST_TO_ADDR
// uc_nation := 2 ;
8960: LD_ADDR_OWVAR 21
8964: PUSH
8965: LD_INT 2
8967: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8968: LD_ADDR_OWVAR 37
8972: PUSH
8973: LD_INT 14
8975: ST_TO_ADDR
// vc_engine := engine_siberite ;
8976: LD_ADDR_OWVAR 39
8980: PUSH
8981: LD_INT 3
8983: ST_TO_ADDR
// vc_control := control_apeman ;
8984: LD_ADDR_OWVAR 38
8988: PUSH
8989: LD_INT 5
8991: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
8992: LD_ADDR_OWVAR 40
8996: PUSH
8997: LD_INT 29
8999: ST_TO_ADDR
// un := CreateVehicle ;
9000: LD_ADDR_VAR 0 2
9004: PUSH
9005: CALL_OW 45
9009: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9010: LD_VAR 0 2
9014: PPUSH
9015: LD_INT 1
9017: PPUSH
9018: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9022: LD_INT 35
9024: PPUSH
9025: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9029: LD_VAR 0 2
9033: PPUSH
9034: LD_INT 22
9036: PUSH
9037: LD_OWVAR 2
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PPUSH
9046: CALL_OW 69
9050: PPUSH
9051: LD_VAR 0 2
9055: PPUSH
9056: CALL_OW 74
9060: PPUSH
9061: CALL_OW 115
// until IsDead ( un ) ;
9065: LD_VAR 0 2
9069: PPUSH
9070: CALL_OW 301
9074: IFFALSE 9022
// end ;
9076: PPOPN 2
9078: END
// every 0 0$1 trigger StreamModeActive and sStu do
9079: LD_EXP 1
9083: PUSH
9084: LD_EXP 40
9088: AND
9089: IFFALSE 9105
9091: GO 9093
9093: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9094: LD_STRING displayStucuk();
9096: PPUSH
9097: CALL_OW 559
// ResetFog ;
9101: CALL_OW 335
// end ;
9105: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9106: LD_EXP 1
9110: PUSH
9111: LD_EXP 33
9115: AND
9116: IFFALSE 9257
9118: GO 9120
9120: DISABLE
9121: LD_INT 0
9123: PPUSH
9124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9125: LD_ADDR_VAR 0 2
9129: PUSH
9130: LD_INT 22
9132: PUSH
9133: LD_OWVAR 2
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 21
9144: PUSH
9145: LD_INT 1
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PPUSH
9156: CALL_OW 69
9160: ST_TO_ADDR
// if not tmp then
9161: LD_VAR 0 2
9165: NOT
9166: IFFALSE 9170
// exit ;
9168: GO 9257
// un := tmp [ rand ( 1 , tmp ) ] ;
9170: LD_ADDR_VAR 0 1
9174: PUSH
9175: LD_VAR 0 2
9179: PUSH
9180: LD_INT 1
9182: PPUSH
9183: LD_VAR 0 2
9187: PPUSH
9188: CALL_OW 12
9192: ARRAY
9193: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9194: LD_VAR 0 1
9198: PPUSH
9199: LD_INT 0
9201: PPUSH
9202: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9206: LD_VAR 0 1
9210: PPUSH
9211: LD_OWVAR 3
9215: PUSH
9216: LD_VAR 0 1
9220: DIFF
9221: PPUSH
9222: LD_VAR 0 1
9226: PPUSH
9227: CALL_OW 74
9231: PPUSH
9232: CALL_OW 115
// wait ( 0 0$20 ) ;
9236: LD_INT 700
9238: PPUSH
9239: CALL_OW 67
// SetSide ( un , your_side ) ;
9243: LD_VAR 0 1
9247: PPUSH
9248: LD_OWVAR 2
9252: PPUSH
9253: CALL_OW 235
// end ;
9257: PPOPN 2
9259: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9260: LD_EXP 1
9264: PUSH
9265: LD_EXP 34
9269: AND
9270: IFFALSE 9376
9272: GO 9274
9274: DISABLE
9275: LD_INT 0
9277: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9278: LD_ADDR_VAR 0 1
9282: PUSH
9283: LD_INT 22
9285: PUSH
9286: LD_OWVAR 2
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: LD_INT 2
9297: PUSH
9298: LD_INT 30
9300: PUSH
9301: LD_INT 0
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: LD_INT 30
9310: PUSH
9311: LD_INT 1
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PPUSH
9327: CALL_OW 69
9331: ST_TO_ADDR
// if not depot then
9332: LD_VAR 0 1
9336: NOT
9337: IFFALSE 9341
// exit ;
9339: GO 9376
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9341: LD_VAR 0 1
9345: PUSH
9346: LD_INT 1
9348: ARRAY
9349: PPUSH
9350: CALL_OW 250
9354: PPUSH
9355: LD_VAR 0 1
9359: PUSH
9360: LD_INT 1
9362: ARRAY
9363: PPUSH
9364: CALL_OW 251
9368: PPUSH
9369: LD_INT 70
9371: PPUSH
9372: CALL_OW 495
// end ;
9376: PPOPN 1
9378: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9379: LD_EXP 1
9383: PUSH
9384: LD_EXP 35
9388: AND
9389: IFFALSE 9600
9391: GO 9393
9393: DISABLE
9394: LD_INT 0
9396: PPUSH
9397: PPUSH
9398: PPUSH
9399: PPUSH
9400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9401: LD_ADDR_VAR 0 5
9405: PUSH
9406: LD_INT 22
9408: PUSH
9409: LD_OWVAR 2
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PUSH
9418: LD_INT 21
9420: PUSH
9421: LD_INT 1
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PPUSH
9432: CALL_OW 69
9436: ST_TO_ADDR
// if not tmp then
9437: LD_VAR 0 5
9441: NOT
9442: IFFALSE 9446
// exit ;
9444: GO 9600
// for i in tmp do
9446: LD_ADDR_VAR 0 1
9450: PUSH
9451: LD_VAR 0 5
9455: PUSH
9456: FOR_IN
9457: IFFALSE 9598
// begin d := rand ( 0 , 5 ) ;
9459: LD_ADDR_VAR 0 4
9463: PUSH
9464: LD_INT 0
9466: PPUSH
9467: LD_INT 5
9469: PPUSH
9470: CALL_OW 12
9474: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9475: LD_ADDR_VAR 0 2
9479: PUSH
9480: LD_VAR 0 1
9484: PPUSH
9485: CALL_OW 250
9489: PPUSH
9490: LD_VAR 0 4
9494: PPUSH
9495: LD_INT 3
9497: PPUSH
9498: LD_INT 12
9500: PPUSH
9501: CALL_OW 12
9505: PPUSH
9506: CALL_OW 272
9510: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9511: LD_ADDR_VAR 0 3
9515: PUSH
9516: LD_VAR 0 1
9520: PPUSH
9521: CALL_OW 251
9525: PPUSH
9526: LD_VAR 0 4
9530: PPUSH
9531: LD_INT 3
9533: PPUSH
9534: LD_INT 12
9536: PPUSH
9537: CALL_OW 12
9541: PPUSH
9542: CALL_OW 273
9546: ST_TO_ADDR
// if ValidHex ( x , y ) then
9547: LD_VAR 0 2
9551: PPUSH
9552: LD_VAR 0 3
9556: PPUSH
9557: CALL_OW 488
9561: IFFALSE 9596
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9563: LD_VAR 0 1
9567: PPUSH
9568: LD_VAR 0 2
9572: PPUSH
9573: LD_VAR 0 3
9577: PPUSH
9578: LD_INT 3
9580: PPUSH
9581: LD_INT 6
9583: PPUSH
9584: CALL_OW 12
9588: PPUSH
9589: LD_INT 1
9591: PPUSH
9592: CALL_OW 483
// end ;
9596: GO 9456
9598: POP
9599: POP
// end ;
9600: PPOPN 5
9602: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9603: LD_EXP 1
9607: PUSH
9608: LD_EXP 36
9612: AND
9613: IFFALSE 9707
9615: GO 9617
9617: DISABLE
9618: LD_INT 0
9620: PPUSH
9621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9622: LD_ADDR_VAR 0 2
9626: PUSH
9627: LD_INT 22
9629: PUSH
9630: LD_OWVAR 2
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: LD_INT 32
9641: PUSH
9642: LD_INT 1
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: LD_INT 21
9651: PUSH
9652: LD_INT 2
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: LIST
9663: PPUSH
9664: CALL_OW 69
9668: ST_TO_ADDR
// if not tmp then
9669: LD_VAR 0 2
9673: NOT
9674: IFFALSE 9678
// exit ;
9676: GO 9707
// for i in tmp do
9678: LD_ADDR_VAR 0 1
9682: PUSH
9683: LD_VAR 0 2
9687: PUSH
9688: FOR_IN
9689: IFFALSE 9705
// SetFuel ( i , 0 ) ;
9691: LD_VAR 0 1
9695: PPUSH
9696: LD_INT 0
9698: PPUSH
9699: CALL_OW 240
9703: GO 9688
9705: POP
9706: POP
// end ;
9707: PPOPN 2
9709: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
9710: LD_EXP 1
9714: PUSH
9715: LD_EXP 37
9719: AND
9720: IFFALSE 9786
9722: GO 9724
9724: DISABLE
9725: LD_INT 0
9727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
9728: LD_ADDR_VAR 0 1
9732: PUSH
9733: LD_INT 22
9735: PUSH
9736: LD_OWVAR 2
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: LD_INT 30
9747: PUSH
9748: LD_INT 29
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PPUSH
9759: CALL_OW 69
9763: ST_TO_ADDR
// if not tmp then
9764: LD_VAR 0 1
9768: NOT
9769: IFFALSE 9773
// exit ;
9771: GO 9786
// DestroyUnit ( tmp [ 1 ] ) ;
9773: LD_VAR 0 1
9777: PUSH
9778: LD_INT 1
9780: ARRAY
9781: PPUSH
9782: CALL_OW 65
// end ;
9786: PPOPN 1
9788: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
9789: LD_EXP 1
9793: PUSH
9794: LD_EXP 39
9798: AND
9799: IFFALSE 9928
9801: GO 9803
9803: DISABLE
9804: LD_INT 0
9806: PPUSH
// begin uc_side := 0 ;
9807: LD_ADDR_OWVAR 20
9811: PUSH
9812: LD_INT 0
9814: ST_TO_ADDR
// uc_nation := nation_arabian ;
9815: LD_ADDR_OWVAR 21
9819: PUSH
9820: LD_INT 2
9822: ST_TO_ADDR
// hc_gallery :=  ;
9823: LD_ADDR_OWVAR 33
9827: PUSH
9828: LD_STRING 
9830: ST_TO_ADDR
// hc_name :=  ;
9831: LD_ADDR_OWVAR 26
9835: PUSH
9836: LD_STRING 
9838: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
9839: LD_INT 1
9841: PPUSH
9842: LD_INT 11
9844: PPUSH
9845: LD_INT 10
9847: PPUSH
9848: CALL_OW 380
// un := CreateHuman ;
9852: LD_ADDR_VAR 0 1
9856: PUSH
9857: CALL_OW 44
9861: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9862: LD_VAR 0 1
9866: PPUSH
9867: LD_INT 1
9869: PPUSH
9870: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9874: LD_INT 35
9876: PPUSH
9877: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9881: LD_VAR 0 1
9885: PPUSH
9886: LD_INT 22
9888: PUSH
9889: LD_OWVAR 2
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 69
9902: PPUSH
9903: LD_VAR 0 1
9907: PPUSH
9908: CALL_OW 74
9912: PPUSH
9913: CALL_OW 115
// until IsDead ( un ) ;
9917: LD_VAR 0 1
9921: PPUSH
9922: CALL_OW 301
9926: IFFALSE 9874
// end ;
9928: PPOPN 1
9930: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
9931: LD_EXP 1
9935: PUSH
9936: LD_EXP 41
9940: AND
9941: IFFALSE 9953
9943: GO 9945
9945: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
9946: LD_STRING earthquake(getX(game), 0, 32)
9948: PPUSH
9949: CALL_OW 559
9953: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
9954: LD_EXP 1
9958: PUSH
9959: LD_EXP 42
9963: AND
9964: IFFALSE 10055
9966: GO 9968
9968: DISABLE
9969: LD_INT 0
9971: PPUSH
// begin enable ;
9972: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
9973: LD_ADDR_VAR 0 1
9977: PUSH
9978: LD_INT 22
9980: PUSH
9981: LD_OWVAR 2
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 21
9992: PUSH
9993: LD_INT 2
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 33
10002: PUSH
10003: LD_INT 3
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: PPUSH
10015: CALL_OW 69
10019: ST_TO_ADDR
// if not tmp then
10020: LD_VAR 0 1
10024: NOT
10025: IFFALSE 10029
// exit ;
10027: GO 10055
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10029: LD_VAR 0 1
10033: PUSH
10034: LD_INT 1
10036: PPUSH
10037: LD_VAR 0 1
10041: PPUSH
10042: CALL_OW 12
10046: ARRAY
10047: PPUSH
10048: LD_INT 1
10050: PPUSH
10051: CALL_OW 234
// end ;
10055: PPOPN 1
10057: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10058: LD_EXP 1
10062: PUSH
10063: LD_EXP 43
10067: AND
10068: IFFALSE 10209
10070: GO 10072
10072: DISABLE
10073: LD_INT 0
10075: PPUSH
10076: PPUSH
10077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10078: LD_ADDR_VAR 0 3
10082: PUSH
10083: LD_INT 22
10085: PUSH
10086: LD_OWVAR 2
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 25
10097: PUSH
10098: LD_INT 1
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PPUSH
10109: CALL_OW 69
10113: ST_TO_ADDR
// if not tmp then
10114: LD_VAR 0 3
10118: NOT
10119: IFFALSE 10123
// exit ;
10121: GO 10209
// un := tmp [ rand ( 1 , tmp ) ] ;
10123: LD_ADDR_VAR 0 2
10127: PUSH
10128: LD_VAR 0 3
10132: PUSH
10133: LD_INT 1
10135: PPUSH
10136: LD_VAR 0 3
10140: PPUSH
10141: CALL_OW 12
10145: ARRAY
10146: ST_TO_ADDR
// if Crawls ( un ) then
10147: LD_VAR 0 2
10151: PPUSH
10152: CALL_OW 318
10156: IFFALSE 10167
// ComWalk ( un ) ;
10158: LD_VAR 0 2
10162: PPUSH
10163: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10167: LD_VAR 0 2
10171: PPUSH
10172: LD_INT 9
10174: PPUSH
10175: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10179: LD_INT 28
10181: PPUSH
10182: LD_OWVAR 2
10186: PPUSH
10187: LD_INT 2
10189: PPUSH
10190: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10194: LD_INT 29
10196: PPUSH
10197: LD_OWVAR 2
10201: PPUSH
10202: LD_INT 2
10204: PPUSH
10205: CALL_OW 322
// end ;
10209: PPOPN 3
10211: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10212: LD_EXP 1
10216: PUSH
10217: LD_EXP 44
10221: AND
10222: IFFALSE 10333
10224: GO 10226
10226: DISABLE
10227: LD_INT 0
10229: PPUSH
10230: PPUSH
10231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10232: LD_ADDR_VAR 0 3
10236: PUSH
10237: LD_INT 22
10239: PUSH
10240: LD_OWVAR 2
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 25
10251: PUSH
10252: LD_INT 1
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PPUSH
10263: CALL_OW 69
10267: ST_TO_ADDR
// if not tmp then
10268: LD_VAR 0 3
10272: NOT
10273: IFFALSE 10277
// exit ;
10275: GO 10333
// un := tmp [ rand ( 1 , tmp ) ] ;
10277: LD_ADDR_VAR 0 2
10281: PUSH
10282: LD_VAR 0 3
10286: PUSH
10287: LD_INT 1
10289: PPUSH
10290: LD_VAR 0 3
10294: PPUSH
10295: CALL_OW 12
10299: ARRAY
10300: ST_TO_ADDR
// if Crawls ( un ) then
10301: LD_VAR 0 2
10305: PPUSH
10306: CALL_OW 318
10310: IFFALSE 10321
// ComWalk ( un ) ;
10312: LD_VAR 0 2
10316: PPUSH
10317: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10321: LD_VAR 0 2
10325: PPUSH
10326: LD_INT 8
10328: PPUSH
10329: CALL_OW 336
// end ;
10333: PPOPN 3
10335: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10336: LD_EXP 1
10340: PUSH
10341: LD_EXP 45
10345: AND
10346: IFFALSE 10490
10348: GO 10350
10350: DISABLE
10351: LD_INT 0
10353: PPUSH
10354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10355: LD_ADDR_VAR 0 2
10359: PUSH
10360: LD_INT 22
10362: PUSH
10363: LD_OWVAR 2
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 21
10374: PUSH
10375: LD_INT 2
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 2
10384: PUSH
10385: LD_INT 34
10387: PUSH
10388: LD_INT 12
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 34
10397: PUSH
10398: LD_INT 51
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 34
10407: PUSH
10408: LD_INT 32
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: ST_TO_ADDR
// if not tmp then
10431: LD_VAR 0 2
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 10490
// for i in tmp do
10440: LD_ADDR_VAR 0 1
10444: PUSH
10445: LD_VAR 0 2
10449: PUSH
10450: FOR_IN
10451: IFFALSE 10488
// if GetCargo ( i , mat_artifact ) = 0 then
10453: LD_VAR 0 1
10457: PPUSH
10458: LD_INT 4
10460: PPUSH
10461: CALL_OW 289
10465: PUSH
10466: LD_INT 0
10468: EQUAL
10469: IFFALSE 10486
// SetCargo ( i , mat_siberit , 100 ) ;
10471: LD_VAR 0 1
10475: PPUSH
10476: LD_INT 3
10478: PPUSH
10479: LD_INT 100
10481: PPUSH
10482: CALL_OW 290
10486: GO 10450
10488: POP
10489: POP
// end ;
10490: PPOPN 2
10492: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10493: LD_EXP 1
10497: PUSH
10498: LD_EXP 46
10502: AND
10503: IFFALSE 10686
10505: GO 10507
10507: DISABLE
10508: LD_INT 0
10510: PPUSH
10511: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10512: LD_ADDR_VAR 0 2
10516: PUSH
10517: LD_INT 22
10519: PUSH
10520: LD_OWVAR 2
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PPUSH
10529: CALL_OW 69
10533: ST_TO_ADDR
// if not tmp then
10534: LD_VAR 0 2
10538: NOT
10539: IFFALSE 10543
// exit ;
10541: GO 10686
// for i := 1 to 2 do
10543: LD_ADDR_VAR 0 1
10547: PUSH
10548: DOUBLE
10549: LD_INT 1
10551: DEC
10552: ST_TO_ADDR
10553: LD_INT 2
10555: PUSH
10556: FOR_TO
10557: IFFALSE 10684
// begin uc_side := your_side ;
10559: LD_ADDR_OWVAR 20
10563: PUSH
10564: LD_OWVAR 2
10568: ST_TO_ADDR
// uc_nation := nation_american ;
10569: LD_ADDR_OWVAR 21
10573: PUSH
10574: LD_INT 1
10576: ST_TO_ADDR
// vc_chassis := us_morphling ;
10577: LD_ADDR_OWVAR 37
10581: PUSH
10582: LD_INT 5
10584: ST_TO_ADDR
// vc_engine := engine_siberite ;
10585: LD_ADDR_OWVAR 39
10589: PUSH
10590: LD_INT 3
10592: ST_TO_ADDR
// vc_control := control_computer ;
10593: LD_ADDR_OWVAR 38
10597: PUSH
10598: LD_INT 3
10600: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10601: LD_ADDR_OWVAR 40
10605: PUSH
10606: LD_INT 10
10608: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10609: LD_VAR 0 2
10613: PUSH
10614: LD_INT 1
10616: ARRAY
10617: PPUSH
10618: CALL_OW 310
10622: NOT
10623: IFFALSE 10670
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10625: CALL_OW 45
10629: PPUSH
10630: LD_VAR 0 2
10634: PUSH
10635: LD_INT 1
10637: ARRAY
10638: PPUSH
10639: CALL_OW 250
10643: PPUSH
10644: LD_VAR 0 2
10648: PUSH
10649: LD_INT 1
10651: ARRAY
10652: PPUSH
10653: CALL_OW 251
10657: PPUSH
10658: LD_INT 12
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 50
10668: GO 10682
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10670: CALL_OW 45
10674: PPUSH
10675: LD_INT 1
10677: PPUSH
10678: CALL_OW 51
// end ;
10682: GO 10556
10684: POP
10685: POP
// end ;
10686: PPOPN 2
10688: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10689: LD_EXP 1
10693: PUSH
10694: LD_EXP 47
10698: AND
10699: IFFALSE 10921
10701: GO 10703
10703: DISABLE
10704: LD_INT 0
10706: PPUSH
10707: PPUSH
10708: PPUSH
10709: PPUSH
10710: PPUSH
10711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10712: LD_ADDR_VAR 0 6
10716: PUSH
10717: LD_INT 22
10719: PUSH
10720: LD_OWVAR 2
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: LD_INT 21
10731: PUSH
10732: LD_INT 1
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 3
10741: PUSH
10742: LD_INT 23
10744: PUSH
10745: LD_INT 0
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: LIST
10760: PPUSH
10761: CALL_OW 69
10765: ST_TO_ADDR
// if not tmp then
10766: LD_VAR 0 6
10770: NOT
10771: IFFALSE 10775
// exit ;
10773: GO 10921
// s1 := rand ( 1 , 4 ) ;
10775: LD_ADDR_VAR 0 2
10779: PUSH
10780: LD_INT 1
10782: PPUSH
10783: LD_INT 4
10785: PPUSH
10786: CALL_OW 12
10790: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
10791: LD_ADDR_VAR 0 4
10795: PUSH
10796: LD_VAR 0 6
10800: PUSH
10801: LD_INT 1
10803: ARRAY
10804: PPUSH
10805: LD_VAR 0 2
10809: PPUSH
10810: CALL_OW 259
10814: ST_TO_ADDR
// if s1 = 1 then
10815: LD_VAR 0 2
10819: PUSH
10820: LD_INT 1
10822: EQUAL
10823: IFFALSE 10843
// s2 := rand ( 2 , 4 ) else
10825: LD_ADDR_VAR 0 3
10829: PUSH
10830: LD_INT 2
10832: PPUSH
10833: LD_INT 4
10835: PPUSH
10836: CALL_OW 12
10840: ST_TO_ADDR
10841: GO 10851
// s2 := 1 ;
10843: LD_ADDR_VAR 0 3
10847: PUSH
10848: LD_INT 1
10850: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
10851: LD_ADDR_VAR 0 5
10855: PUSH
10856: LD_VAR 0 6
10860: PUSH
10861: LD_INT 1
10863: ARRAY
10864: PPUSH
10865: LD_VAR 0 3
10869: PPUSH
10870: CALL_OW 259
10874: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
10875: LD_VAR 0 6
10879: PUSH
10880: LD_INT 1
10882: ARRAY
10883: PPUSH
10884: LD_VAR 0 2
10888: PPUSH
10889: LD_VAR 0 5
10893: PPUSH
10894: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
10898: LD_VAR 0 6
10902: PUSH
10903: LD_INT 1
10905: ARRAY
10906: PPUSH
10907: LD_VAR 0 3
10911: PPUSH
10912: LD_VAR 0 4
10916: PPUSH
10917: CALL_OW 237
// end ;
10921: PPOPN 6
10923: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
10924: LD_EXP 1
10928: PUSH
10929: LD_EXP 48
10933: AND
10934: IFFALSE 11013
10936: GO 10938
10938: DISABLE
10939: LD_INT 0
10941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
10942: LD_ADDR_VAR 0 1
10946: PUSH
10947: LD_INT 22
10949: PUSH
10950: LD_OWVAR 2
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 30
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PPUSH
10973: CALL_OW 69
10977: ST_TO_ADDR
// if not tmp then
10978: LD_VAR 0 1
10982: NOT
10983: IFFALSE 10987
// exit ;
10985: GO 11013
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10987: LD_VAR 0 1
10991: PUSH
10992: LD_INT 1
10994: PPUSH
10995: LD_VAR 0 1
10999: PPUSH
11000: CALL_OW 12
11004: ARRAY
11005: PPUSH
11006: LD_INT 1
11008: PPUSH
11009: CALL_OW 234
// end ;
11013: PPOPN 1
11015: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11016: LD_EXP 1
11020: PUSH
11021: LD_EXP 49
11025: AND
11026: IFFALSE 11138
11028: GO 11030
11030: DISABLE
11031: LD_INT 0
11033: PPUSH
11034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11035: LD_ADDR_VAR 0 2
11039: PUSH
11040: LD_INT 22
11042: PUSH
11043: LD_OWVAR 2
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 2
11054: PUSH
11055: LD_INT 30
11057: PUSH
11058: LD_INT 27
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 30
11067: PUSH
11068: LD_INT 26
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 30
11077: PUSH
11078: LD_INT 28
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PPUSH
11095: CALL_OW 69
11099: ST_TO_ADDR
// if not tmp then
11100: LD_VAR 0 2
11104: NOT
11105: IFFALSE 11109
// exit ;
11107: GO 11138
// for i in tmp do
11109: LD_ADDR_VAR 0 1
11113: PUSH
11114: LD_VAR 0 2
11118: PUSH
11119: FOR_IN
11120: IFFALSE 11136
// SetLives ( i , 1 ) ;
11122: LD_VAR 0 1
11126: PPUSH
11127: LD_INT 1
11129: PPUSH
11130: CALL_OW 234
11134: GO 11119
11136: POP
11137: POP
// end ;
11138: PPOPN 2
11140: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11141: LD_EXP 1
11145: PUSH
11146: LD_EXP 50
11150: AND
11151: IFFALSE 11438
11153: GO 11155
11155: DISABLE
11156: LD_INT 0
11158: PPUSH
11159: PPUSH
11160: PPUSH
// begin i := rand ( 1 , 7 ) ;
11161: LD_ADDR_VAR 0 1
11165: PUSH
11166: LD_INT 1
11168: PPUSH
11169: LD_INT 7
11171: PPUSH
11172: CALL_OW 12
11176: ST_TO_ADDR
// case i of 1 :
11177: LD_VAR 0 1
11181: PUSH
11182: LD_INT 1
11184: DOUBLE
11185: EQUAL
11186: IFTRUE 11190
11188: GO 11200
11190: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11191: LD_STRING earthquake(getX(game), 0, 32)
11193: PPUSH
11194: CALL_OW 559
11198: GO 11438
11200: LD_INT 2
11202: DOUBLE
11203: EQUAL
11204: IFTRUE 11208
11206: GO 11222
11208: POP
// begin ToLua ( displayStucuk(); ) ;
11209: LD_STRING displayStucuk();
11211: PPUSH
11212: CALL_OW 559
// ResetFog ;
11216: CALL_OW 335
// end ; 3 :
11220: GO 11438
11222: LD_INT 3
11224: DOUBLE
11225: EQUAL
11226: IFTRUE 11230
11228: GO 11334
11230: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11231: LD_ADDR_VAR 0 2
11235: PUSH
11236: LD_INT 22
11238: PUSH
11239: LD_OWVAR 2
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 25
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PPUSH
11262: CALL_OW 69
11266: ST_TO_ADDR
// if not tmp then
11267: LD_VAR 0 2
11271: NOT
11272: IFFALSE 11276
// exit ;
11274: GO 11438
// un := tmp [ rand ( 1 , tmp ) ] ;
11276: LD_ADDR_VAR 0 3
11280: PUSH
11281: LD_VAR 0 2
11285: PUSH
11286: LD_INT 1
11288: PPUSH
11289: LD_VAR 0 2
11293: PPUSH
11294: CALL_OW 12
11298: ARRAY
11299: ST_TO_ADDR
// if Crawls ( un ) then
11300: LD_VAR 0 3
11304: PPUSH
11305: CALL_OW 318
11309: IFFALSE 11320
// ComWalk ( un ) ;
11311: LD_VAR 0 3
11315: PPUSH
11316: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11320: LD_VAR 0 3
11324: PPUSH
11325: LD_INT 8
11327: PPUSH
11328: CALL_OW 336
// end ; 4 :
11332: GO 11438
11334: LD_INT 4
11336: DOUBLE
11337: EQUAL
11338: IFTRUE 11342
11340: GO 11416
11342: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11343: LD_ADDR_VAR 0 2
11347: PUSH
11348: LD_INT 22
11350: PUSH
11351: LD_OWVAR 2
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 30
11362: PUSH
11363: LD_INT 29
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PPUSH
11374: CALL_OW 69
11378: ST_TO_ADDR
// if not tmp then
11379: LD_VAR 0 2
11383: NOT
11384: IFFALSE 11388
// exit ;
11386: GO 11438
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11388: LD_VAR 0 2
11392: PUSH
11393: LD_INT 1
11395: ARRAY
11396: PPUSH
11397: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11401: LD_VAR 0 2
11405: PUSH
11406: LD_INT 1
11408: ARRAY
11409: PPUSH
11410: CALL_OW 65
// end ; 5 .. 7 :
11414: GO 11438
11416: LD_INT 5
11418: DOUBLE
11419: GREATEREQUAL
11420: IFFALSE 11428
11422: LD_INT 7
11424: DOUBLE
11425: LESSEQUAL
11426: IFTRUE 11430
11428: GO 11437
11430: POP
// StreamSibBomb ; end ;
11431: CALL 7675 0 0
11435: GO 11438
11437: POP
// end ;
11438: PPOPN 3
11440: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11441: LD_EXP 1
11445: PUSH
11446: LD_EXP 51
11450: AND
11451: IFFALSE 11607
11453: GO 11455
11455: DISABLE
11456: LD_INT 0
11458: PPUSH
11459: PPUSH
11460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11461: LD_ADDR_VAR 0 2
11465: PUSH
11466: LD_INT 81
11468: PUSH
11469: LD_OWVAR 2
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 2
11480: PUSH
11481: LD_INT 21
11483: PUSH
11484: LD_INT 1
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 21
11493: PUSH
11494: LD_INT 2
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PPUSH
11510: CALL_OW 69
11514: ST_TO_ADDR
// if not tmp then
11515: LD_VAR 0 2
11519: NOT
11520: IFFALSE 11524
// exit ;
11522: GO 11607
// p := 0 ;
11524: LD_ADDR_VAR 0 3
11528: PUSH
11529: LD_INT 0
11531: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11532: LD_INT 35
11534: PPUSH
11535: CALL_OW 67
// p := p + 1 ;
11539: LD_ADDR_VAR 0 3
11543: PUSH
11544: LD_VAR 0 3
11548: PUSH
11549: LD_INT 1
11551: PLUS
11552: ST_TO_ADDR
// for i in tmp do
11553: LD_ADDR_VAR 0 1
11557: PUSH
11558: LD_VAR 0 2
11562: PUSH
11563: FOR_IN
11564: IFFALSE 11595
// if GetLives ( i ) < 1000 then
11566: LD_VAR 0 1
11570: PPUSH
11571: CALL_OW 256
11575: PUSH
11576: LD_INT 1000
11578: LESS
11579: IFFALSE 11593
// SetLives ( i , 1000 ) ;
11581: LD_VAR 0 1
11585: PPUSH
11586: LD_INT 1000
11588: PPUSH
11589: CALL_OW 234
11593: GO 11563
11595: POP
11596: POP
// until p > 20 ;
11597: LD_VAR 0 3
11601: PUSH
11602: LD_INT 20
11604: GREATER
11605: IFFALSE 11532
// end ;
11607: PPOPN 3
11609: END
// every 0 0$1 trigger StreamModeActive and sTime do
11610: LD_EXP 1
11614: PUSH
11615: LD_EXP 52
11619: AND
11620: IFFALSE 11655
11622: GO 11624
11624: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11625: LD_INT 28
11627: PPUSH
11628: LD_OWVAR 2
11632: PPUSH
11633: LD_INT 2
11635: PPUSH
11636: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11640: LD_INT 30
11642: PPUSH
11643: LD_OWVAR 2
11647: PPUSH
11648: LD_INT 2
11650: PPUSH
11651: CALL_OW 322
// end ;
11655: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11656: LD_EXP 1
11660: PUSH
11661: LD_EXP 53
11665: AND
11666: IFFALSE 11787
11668: GO 11670
11670: DISABLE
11671: LD_INT 0
11673: PPUSH
11674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11675: LD_ADDR_VAR 0 2
11679: PUSH
11680: LD_INT 22
11682: PUSH
11683: LD_OWVAR 2
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: LD_INT 21
11694: PUSH
11695: LD_INT 1
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: LD_INT 3
11704: PUSH
11705: LD_INT 23
11707: PUSH
11708: LD_INT 0
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: PPUSH
11724: CALL_OW 69
11728: ST_TO_ADDR
// if not tmp then
11729: LD_VAR 0 2
11733: NOT
11734: IFFALSE 11738
// exit ;
11736: GO 11787
// for i in tmp do
11738: LD_ADDR_VAR 0 1
11742: PUSH
11743: LD_VAR 0 2
11747: PUSH
11748: FOR_IN
11749: IFFALSE 11785
// begin if Crawls ( i ) then
11751: LD_VAR 0 1
11755: PPUSH
11756: CALL_OW 318
11760: IFFALSE 11771
// ComWalk ( i ) ;
11762: LD_VAR 0 1
11766: PPUSH
11767: CALL_OW 138
// SetClass ( i , 2 ) ;
11771: LD_VAR 0 1
11775: PPUSH
11776: LD_INT 2
11778: PPUSH
11779: CALL_OW 336
// end ;
11783: GO 11748
11785: POP
11786: POP
// end ;
11787: PPOPN 2
11789: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
11790: LD_EXP 1
11794: PUSH
11795: LD_EXP 54
11799: AND
11800: IFFALSE 12088
11802: GO 11804
11804: DISABLE
11805: LD_INT 0
11807: PPUSH
11808: PPUSH
11809: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
11810: LD_OWVAR 2
11814: PPUSH
11815: LD_INT 9
11817: PPUSH
11818: LD_INT 1
11820: PPUSH
11821: LD_INT 1
11823: PPUSH
11824: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
11828: LD_INT 9
11830: PPUSH
11831: LD_OWVAR 2
11835: PPUSH
11836: CALL_OW 343
// uc_side := 9 ;
11840: LD_ADDR_OWVAR 20
11844: PUSH
11845: LD_INT 9
11847: ST_TO_ADDR
// uc_nation := 2 ;
11848: LD_ADDR_OWVAR 21
11852: PUSH
11853: LD_INT 2
11855: ST_TO_ADDR
// hc_name := Dark Warrior ;
11856: LD_ADDR_OWVAR 26
11860: PUSH
11861: LD_STRING Dark Warrior
11863: ST_TO_ADDR
// hc_gallery :=  ;
11864: LD_ADDR_OWVAR 33
11868: PUSH
11869: LD_STRING 
11871: ST_TO_ADDR
// hc_noskilllimit := true ;
11872: LD_ADDR_OWVAR 76
11876: PUSH
11877: LD_INT 1
11879: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
11880: LD_ADDR_OWVAR 31
11884: PUSH
11885: LD_INT 30
11887: PUSH
11888: LD_INT 30
11890: PUSH
11891: LD_INT 30
11893: PUSH
11894: LD_INT 30
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: ST_TO_ADDR
// un := CreateHuman ;
11903: LD_ADDR_VAR 0 3
11907: PUSH
11908: CALL_OW 44
11912: ST_TO_ADDR
// hc_noskilllimit := false ;
11913: LD_ADDR_OWVAR 76
11917: PUSH
11918: LD_INT 0
11920: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11921: LD_VAR 0 3
11925: PPUSH
11926: LD_INT 1
11928: PPUSH
11929: CALL_OW 51
// ToLua ( playRanger() ) ;
11933: LD_STRING playRanger()
11935: PPUSH
11936: CALL_OW 559
// p := 0 ;
11940: LD_ADDR_VAR 0 2
11944: PUSH
11945: LD_INT 0
11947: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11948: LD_INT 35
11950: PPUSH
11951: CALL_OW 67
// p := p + 1 ;
11955: LD_ADDR_VAR 0 2
11959: PUSH
11960: LD_VAR 0 2
11964: PUSH
11965: LD_INT 1
11967: PLUS
11968: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
11969: LD_VAR 0 3
11973: PPUSH
11974: CALL_OW 256
11978: PUSH
11979: LD_INT 1000
11981: LESS
11982: IFFALSE 11996
// SetLives ( un , 1000 ) ;
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_INT 1000
11991: PPUSH
11992: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
11996: LD_VAR 0 3
12000: PPUSH
12001: LD_INT 81
12003: PUSH
12004: LD_OWVAR 2
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 91
12015: PUSH
12016: LD_VAR 0 3
12020: PUSH
12021: LD_INT 30
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PPUSH
12033: CALL_OW 69
12037: PPUSH
12038: LD_VAR 0 3
12042: PPUSH
12043: CALL_OW 74
12047: PPUSH
12048: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12052: LD_VAR 0 2
12056: PUSH
12057: LD_INT 80
12059: GREATER
12060: PUSH
12061: LD_VAR 0 3
12065: PPUSH
12066: CALL_OW 301
12070: OR
12071: IFFALSE 11948
// if un then
12073: LD_VAR 0 3
12077: IFFALSE 12088
// RemoveUnit ( un ) ;
12079: LD_VAR 0 3
12083: PPUSH
12084: CALL_OW 64
// end ;
12088: PPOPN 3
12090: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12091: LD_EXP 55
12095: IFFALSE 12211
12097: GO 12099
12099: DISABLE
12100: LD_INT 0
12102: PPUSH
12103: PPUSH
12104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12105: LD_ADDR_VAR 0 2
12109: PUSH
12110: LD_INT 81
12112: PUSH
12113: LD_OWVAR 2
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 21
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PPUSH
12136: CALL_OW 69
12140: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12141: LD_STRING playComputer()
12143: PPUSH
12144: CALL_OW 559
// if not tmp then
12148: LD_VAR 0 2
12152: NOT
12153: IFFALSE 12157
// exit ;
12155: GO 12211
// for i in tmp do
12157: LD_ADDR_VAR 0 1
12161: PUSH
12162: LD_VAR 0 2
12166: PUSH
12167: FOR_IN
12168: IFFALSE 12209
// for j := 1 to 4 do
12170: LD_ADDR_VAR 0 3
12174: PUSH
12175: DOUBLE
12176: LD_INT 1
12178: DEC
12179: ST_TO_ADDR
12180: LD_INT 4
12182: PUSH
12183: FOR_TO
12184: IFFALSE 12205
// SetSkill ( i , j , 10 ) ;
12186: LD_VAR 0 1
12190: PPUSH
12191: LD_VAR 0 3
12195: PPUSH
12196: LD_INT 10
12198: PPUSH
12199: CALL_OW 237
12203: GO 12183
12205: POP
12206: POP
12207: GO 12167
12209: POP
12210: POP
// end ;
12211: PPOPN 3
12213: END
// every 0 0$1 trigger s30 do var i , tmp ;
12214: LD_EXP 56
12218: IFFALSE 12287
12220: GO 12222
12222: DISABLE
12223: LD_INT 0
12225: PPUSH
12226: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12227: LD_ADDR_VAR 0 2
12231: PUSH
12232: LD_INT 22
12234: PUSH
12235: LD_OWVAR 2
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PPUSH
12244: CALL_OW 69
12248: ST_TO_ADDR
// if not tmp then
12249: LD_VAR 0 2
12253: NOT
12254: IFFALSE 12258
// exit ;
12256: GO 12287
// for i in tmp do
12258: LD_ADDR_VAR 0 1
12262: PUSH
12263: LD_VAR 0 2
12267: PUSH
12268: FOR_IN
12269: IFFALSE 12285
// SetLives ( i , 300 ) ;
12271: LD_VAR 0 1
12275: PPUSH
12276: LD_INT 300
12278: PPUSH
12279: CALL_OW 234
12283: GO 12268
12285: POP
12286: POP
// end ;
12287: PPOPN 2
12289: END
// every 0 0$1 trigger s60 do var i , tmp ;
12290: LD_EXP 57
12294: IFFALSE 12363
12296: GO 12298
12298: DISABLE
12299: LD_INT 0
12301: PPUSH
12302: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12303: LD_ADDR_VAR 0 2
12307: PUSH
12308: LD_INT 22
12310: PUSH
12311: LD_OWVAR 2
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PPUSH
12320: CALL_OW 69
12324: ST_TO_ADDR
// if not tmp then
12325: LD_VAR 0 2
12329: NOT
12330: IFFALSE 12334
// exit ;
12332: GO 12363
// for i in tmp do
12334: LD_ADDR_VAR 0 1
12338: PUSH
12339: LD_VAR 0 2
12343: PUSH
12344: FOR_IN
12345: IFFALSE 12361
// SetLives ( i , 600 ) ;
12347: LD_VAR 0 1
12351: PPUSH
12352: LD_INT 600
12354: PPUSH
12355: CALL_OW 234
12359: GO 12344
12361: POP
12362: POP
// end ;
12363: PPOPN 2
12365: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12366: LD_INT 0
12368: PPUSH
// case cmd of 301 :
12369: LD_VAR 0 1
12373: PUSH
12374: LD_INT 301
12376: DOUBLE
12377: EQUAL
12378: IFTRUE 12382
12380: GO 12414
12382: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12383: LD_VAR 0 6
12387: PPUSH
12388: LD_VAR 0 7
12392: PPUSH
12393: LD_VAR 0 8
12397: PPUSH
12398: LD_VAR 0 4
12402: PPUSH
12403: LD_VAR 0 5
12407: PPUSH
12408: CALL 13615 0 5
12412: GO 12535
12414: LD_INT 302
12416: DOUBLE
12417: EQUAL
12418: IFTRUE 12422
12420: GO 12459
12422: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12423: LD_VAR 0 6
12427: PPUSH
12428: LD_VAR 0 7
12432: PPUSH
12433: LD_VAR 0 8
12437: PPUSH
12438: LD_VAR 0 9
12442: PPUSH
12443: LD_VAR 0 4
12447: PPUSH
12448: LD_VAR 0 5
12452: PPUSH
12453: CALL 13706 0 6
12457: GO 12535
12459: LD_INT 303
12461: DOUBLE
12462: EQUAL
12463: IFTRUE 12467
12465: GO 12504
12467: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12468: LD_VAR 0 6
12472: PPUSH
12473: LD_VAR 0 7
12477: PPUSH
12478: LD_VAR 0 8
12482: PPUSH
12483: LD_VAR 0 9
12487: PPUSH
12488: LD_VAR 0 4
12492: PPUSH
12493: LD_VAR 0 5
12497: PPUSH
12498: CALL 12540 0 6
12502: GO 12535
12504: LD_INT 304
12506: DOUBLE
12507: EQUAL
12508: IFTRUE 12512
12510: GO 12534
12512: POP
// hHackTeleport ( unit , x , y ) ; end ;
12513: LD_VAR 0 2
12517: PPUSH
12518: LD_VAR 0 4
12522: PPUSH
12523: LD_VAR 0 5
12527: PPUSH
12528: CALL 14299 0 3
12532: GO 12535
12534: POP
// end ;
12535: LD_VAR 0 12
12539: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12540: LD_INT 0
12542: PPUSH
12543: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12544: LD_VAR 0 1
12548: PUSH
12549: LD_INT 1
12551: LESS
12552: PUSH
12553: LD_VAR 0 1
12557: PUSH
12558: LD_INT 3
12560: GREATER
12561: OR
12562: PUSH
12563: LD_VAR 0 5
12567: PPUSH
12568: LD_VAR 0 6
12572: PPUSH
12573: CALL_OW 428
12577: OR
12578: IFFALSE 12582
// exit ;
12580: GO 13302
// uc_side := your_side ;
12582: LD_ADDR_OWVAR 20
12586: PUSH
12587: LD_OWVAR 2
12591: ST_TO_ADDR
// uc_nation := nation ;
12592: LD_ADDR_OWVAR 21
12596: PUSH
12597: LD_VAR 0 1
12601: ST_TO_ADDR
// bc_level = 1 ;
12602: LD_ADDR_OWVAR 43
12606: PUSH
12607: LD_INT 1
12609: ST_TO_ADDR
// case btype of 1 :
12610: LD_VAR 0 2
12614: PUSH
12615: LD_INT 1
12617: DOUBLE
12618: EQUAL
12619: IFTRUE 12623
12621: GO 12634
12623: POP
// bc_type := b_depot ; 2 :
12624: LD_ADDR_OWVAR 42
12628: PUSH
12629: LD_INT 0
12631: ST_TO_ADDR
12632: GO 13246
12634: LD_INT 2
12636: DOUBLE
12637: EQUAL
12638: IFTRUE 12642
12640: GO 12653
12642: POP
// bc_type := b_warehouse ; 3 :
12643: LD_ADDR_OWVAR 42
12647: PUSH
12648: LD_INT 1
12650: ST_TO_ADDR
12651: GO 13246
12653: LD_INT 3
12655: DOUBLE
12656: EQUAL
12657: IFTRUE 12661
12659: GO 12672
12661: POP
// bc_type := b_lab ; 4 .. 9 :
12662: LD_ADDR_OWVAR 42
12666: PUSH
12667: LD_INT 6
12669: ST_TO_ADDR
12670: GO 13246
12672: LD_INT 4
12674: DOUBLE
12675: GREATEREQUAL
12676: IFFALSE 12684
12678: LD_INT 9
12680: DOUBLE
12681: LESSEQUAL
12682: IFTRUE 12686
12684: GO 12738
12686: POP
// begin bc_type := b_lab_half ;
12687: LD_ADDR_OWVAR 42
12691: PUSH
12692: LD_INT 7
12694: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12695: LD_ADDR_OWVAR 44
12699: PUSH
12700: LD_INT 10
12702: PUSH
12703: LD_INT 11
12705: PUSH
12706: LD_INT 12
12708: PUSH
12709: LD_INT 15
12711: PUSH
12712: LD_INT 14
12714: PUSH
12715: LD_INT 13
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: PUSH
12726: LD_VAR 0 2
12730: PUSH
12731: LD_INT 3
12733: MINUS
12734: ARRAY
12735: ST_TO_ADDR
// end ; 10 .. 13 :
12736: GO 13246
12738: LD_INT 10
12740: DOUBLE
12741: GREATEREQUAL
12742: IFFALSE 12750
12744: LD_INT 13
12746: DOUBLE
12747: LESSEQUAL
12748: IFTRUE 12752
12750: GO 12829
12752: POP
// begin bc_type := b_lab_full ;
12753: LD_ADDR_OWVAR 42
12757: PUSH
12758: LD_INT 8
12760: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
12761: LD_ADDR_OWVAR 44
12765: PUSH
12766: LD_INT 10
12768: PUSH
12769: LD_INT 12
12771: PUSH
12772: LD_INT 14
12774: PUSH
12775: LD_INT 13
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: PUSH
12784: LD_VAR 0 2
12788: PUSH
12789: LD_INT 9
12791: MINUS
12792: ARRAY
12793: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
12794: LD_ADDR_OWVAR 45
12798: PUSH
12799: LD_INT 11
12801: PUSH
12802: LD_INT 15
12804: PUSH
12805: LD_INT 12
12807: PUSH
12808: LD_INT 15
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: PUSH
12817: LD_VAR 0 2
12821: PUSH
12822: LD_INT 9
12824: MINUS
12825: ARRAY
12826: ST_TO_ADDR
// end ; 14 :
12827: GO 13246
12829: LD_INT 14
12831: DOUBLE
12832: EQUAL
12833: IFTRUE 12837
12835: GO 12848
12837: POP
// bc_type := b_workshop ; 15 :
12838: LD_ADDR_OWVAR 42
12842: PUSH
12843: LD_INT 2
12845: ST_TO_ADDR
12846: GO 13246
12848: LD_INT 15
12850: DOUBLE
12851: EQUAL
12852: IFTRUE 12856
12854: GO 12867
12856: POP
// bc_type := b_factory ; 16 :
12857: LD_ADDR_OWVAR 42
12861: PUSH
12862: LD_INT 3
12864: ST_TO_ADDR
12865: GO 13246
12867: LD_INT 16
12869: DOUBLE
12870: EQUAL
12871: IFTRUE 12875
12873: GO 12886
12875: POP
// bc_type := b_ext_gun ; 17 :
12876: LD_ADDR_OWVAR 42
12880: PUSH
12881: LD_INT 17
12883: ST_TO_ADDR
12884: GO 13246
12886: LD_INT 17
12888: DOUBLE
12889: EQUAL
12890: IFTRUE 12894
12892: GO 12922
12894: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
12895: LD_ADDR_OWVAR 42
12899: PUSH
12900: LD_INT 19
12902: PUSH
12903: LD_INT 23
12905: PUSH
12906: LD_INT 19
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: PUSH
12914: LD_VAR 0 1
12918: ARRAY
12919: ST_TO_ADDR
12920: GO 13246
12922: LD_INT 18
12924: DOUBLE
12925: EQUAL
12926: IFTRUE 12930
12928: GO 12941
12930: POP
// bc_type := b_ext_radar ; 19 :
12931: LD_ADDR_OWVAR 42
12935: PUSH
12936: LD_INT 20
12938: ST_TO_ADDR
12939: GO 13246
12941: LD_INT 19
12943: DOUBLE
12944: EQUAL
12945: IFTRUE 12949
12947: GO 12960
12949: POP
// bc_type := b_ext_radio ; 20 :
12950: LD_ADDR_OWVAR 42
12954: PUSH
12955: LD_INT 22
12957: ST_TO_ADDR
12958: GO 13246
12960: LD_INT 20
12962: DOUBLE
12963: EQUAL
12964: IFTRUE 12968
12966: GO 12979
12968: POP
// bc_type := b_ext_siberium ; 21 :
12969: LD_ADDR_OWVAR 42
12973: PUSH
12974: LD_INT 21
12976: ST_TO_ADDR
12977: GO 13246
12979: LD_INT 21
12981: DOUBLE
12982: EQUAL
12983: IFTRUE 12987
12985: GO 12998
12987: POP
// bc_type := b_ext_computer ; 22 :
12988: LD_ADDR_OWVAR 42
12992: PUSH
12993: LD_INT 24
12995: ST_TO_ADDR
12996: GO 13246
12998: LD_INT 22
13000: DOUBLE
13001: EQUAL
13002: IFTRUE 13006
13004: GO 13017
13006: POP
// bc_type := b_ext_track ; 23 :
13007: LD_ADDR_OWVAR 42
13011: PUSH
13012: LD_INT 16
13014: ST_TO_ADDR
13015: GO 13246
13017: LD_INT 23
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13036
13025: POP
// bc_type := b_ext_laser ; 24 :
13026: LD_ADDR_OWVAR 42
13030: PUSH
13031: LD_INT 25
13033: ST_TO_ADDR
13034: GO 13246
13036: LD_INT 24
13038: DOUBLE
13039: EQUAL
13040: IFTRUE 13044
13042: GO 13055
13044: POP
// bc_type := b_control_tower ; 25 :
13045: LD_ADDR_OWVAR 42
13049: PUSH
13050: LD_INT 36
13052: ST_TO_ADDR
13053: GO 13246
13055: LD_INT 25
13057: DOUBLE
13058: EQUAL
13059: IFTRUE 13063
13061: GO 13074
13063: POP
// bc_type := b_breastwork ; 26 :
13064: LD_ADDR_OWVAR 42
13068: PUSH
13069: LD_INT 31
13071: ST_TO_ADDR
13072: GO 13246
13074: LD_INT 26
13076: DOUBLE
13077: EQUAL
13078: IFTRUE 13082
13080: GO 13093
13082: POP
// bc_type := b_bunker ; 27 :
13083: LD_ADDR_OWVAR 42
13087: PUSH
13088: LD_INT 32
13090: ST_TO_ADDR
13091: GO 13246
13093: LD_INT 27
13095: DOUBLE
13096: EQUAL
13097: IFTRUE 13101
13099: GO 13112
13101: POP
// bc_type := b_turret ; 28 :
13102: LD_ADDR_OWVAR 42
13106: PUSH
13107: LD_INT 33
13109: ST_TO_ADDR
13110: GO 13246
13112: LD_INT 28
13114: DOUBLE
13115: EQUAL
13116: IFTRUE 13120
13118: GO 13131
13120: POP
// bc_type := b_armoury ; 29 :
13121: LD_ADDR_OWVAR 42
13125: PUSH
13126: LD_INT 4
13128: ST_TO_ADDR
13129: GO 13246
13131: LD_INT 29
13133: DOUBLE
13134: EQUAL
13135: IFTRUE 13139
13137: GO 13150
13139: POP
// bc_type := b_barracks ; 30 :
13140: LD_ADDR_OWVAR 42
13144: PUSH
13145: LD_INT 5
13147: ST_TO_ADDR
13148: GO 13246
13150: LD_INT 30
13152: DOUBLE
13153: EQUAL
13154: IFTRUE 13158
13156: GO 13169
13158: POP
// bc_type := b_solar_power ; 31 :
13159: LD_ADDR_OWVAR 42
13163: PUSH
13164: LD_INT 27
13166: ST_TO_ADDR
13167: GO 13246
13169: LD_INT 31
13171: DOUBLE
13172: EQUAL
13173: IFTRUE 13177
13175: GO 13188
13177: POP
// bc_type := b_oil_power ; 32 :
13178: LD_ADDR_OWVAR 42
13182: PUSH
13183: LD_INT 26
13185: ST_TO_ADDR
13186: GO 13246
13188: LD_INT 32
13190: DOUBLE
13191: EQUAL
13192: IFTRUE 13196
13194: GO 13207
13196: POP
// bc_type := b_siberite_power ; 33 :
13197: LD_ADDR_OWVAR 42
13201: PUSH
13202: LD_INT 28
13204: ST_TO_ADDR
13205: GO 13246
13207: LD_INT 33
13209: DOUBLE
13210: EQUAL
13211: IFTRUE 13215
13213: GO 13226
13215: POP
// bc_type := b_oil_mine ; 34 :
13216: LD_ADDR_OWVAR 42
13220: PUSH
13221: LD_INT 29
13223: ST_TO_ADDR
13224: GO 13246
13226: LD_INT 34
13228: DOUBLE
13229: EQUAL
13230: IFTRUE 13234
13232: GO 13245
13234: POP
// bc_type := b_siberite_mine ; end ;
13235: LD_ADDR_OWVAR 42
13239: PUSH
13240: LD_INT 30
13242: ST_TO_ADDR
13243: GO 13246
13245: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13246: LD_ADDR_VAR 0 8
13250: PUSH
13251: LD_VAR 0 5
13255: PPUSH
13256: LD_VAR 0 6
13260: PPUSH
13261: LD_VAR 0 3
13265: PPUSH
13266: CALL_OW 47
13270: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13271: LD_OWVAR 42
13275: PUSH
13276: LD_INT 32
13278: PUSH
13279: LD_INT 33
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: IN
13286: IFFALSE 13302
// PlaceWeaponTurret ( b , weapon ) ;
13288: LD_VAR 0 8
13292: PPUSH
13293: LD_VAR 0 4
13297: PPUSH
13298: CALL_OW 431
// end ;
13302: LD_VAR 0 7
13306: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13307: LD_INT 0
13309: PPUSH
13310: PPUSH
13311: PPUSH
13312: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13313: LD_ADDR_VAR 0 4
13317: PUSH
13318: LD_INT 22
13320: PUSH
13321: LD_OWVAR 2
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 2
13332: PUSH
13333: LD_INT 30
13335: PUSH
13336: LD_INT 0
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: LD_INT 30
13345: PUSH
13346: LD_INT 1
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: LIST
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PPUSH
13362: CALL_OW 69
13366: ST_TO_ADDR
// if not tmp then
13367: LD_VAR 0 4
13371: NOT
13372: IFFALSE 13376
// exit ;
13374: GO 13435
// for i in tmp do
13376: LD_ADDR_VAR 0 2
13380: PUSH
13381: LD_VAR 0 4
13385: PUSH
13386: FOR_IN
13387: IFFALSE 13433
// for j = 1 to 3 do
13389: LD_ADDR_VAR 0 3
13393: PUSH
13394: DOUBLE
13395: LD_INT 1
13397: DEC
13398: ST_TO_ADDR
13399: LD_INT 3
13401: PUSH
13402: FOR_TO
13403: IFFALSE 13429
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13405: LD_VAR 0 2
13409: PPUSH
13410: CALL_OW 274
13414: PPUSH
13415: LD_VAR 0 3
13419: PPUSH
13420: LD_INT 99999
13422: PPUSH
13423: CALL_OW 277
13427: GO 13402
13429: POP
13430: POP
13431: GO 13386
13433: POP
13434: POP
// end ;
13435: LD_VAR 0 1
13439: RET
// export function hHackSetLevel10 ; var i , j ; begin
13440: LD_INT 0
13442: PPUSH
13443: PPUSH
13444: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13445: LD_ADDR_VAR 0 2
13449: PUSH
13450: LD_INT 21
13452: PUSH
13453: LD_INT 1
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PPUSH
13460: CALL_OW 69
13464: PUSH
13465: FOR_IN
13466: IFFALSE 13518
// if IsSelected ( i ) then
13468: LD_VAR 0 2
13472: PPUSH
13473: CALL_OW 306
13477: IFFALSE 13516
// begin for j := 1 to 4 do
13479: LD_ADDR_VAR 0 3
13483: PUSH
13484: DOUBLE
13485: LD_INT 1
13487: DEC
13488: ST_TO_ADDR
13489: LD_INT 4
13491: PUSH
13492: FOR_TO
13493: IFFALSE 13514
// SetSkill ( i , j , 10 ) ;
13495: LD_VAR 0 2
13499: PPUSH
13500: LD_VAR 0 3
13504: PPUSH
13505: LD_INT 10
13507: PPUSH
13508: CALL_OW 237
13512: GO 13492
13514: POP
13515: POP
// end ;
13516: GO 13465
13518: POP
13519: POP
// end ;
13520: LD_VAR 0 1
13524: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13525: LD_INT 0
13527: PPUSH
13528: PPUSH
13529: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13530: LD_ADDR_VAR 0 2
13534: PUSH
13535: LD_INT 22
13537: PUSH
13538: LD_OWVAR 2
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 1
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PPUSH
13561: CALL_OW 69
13565: PUSH
13566: FOR_IN
13567: IFFALSE 13608
// begin for j := 1 to 4 do
13569: LD_ADDR_VAR 0 3
13573: PUSH
13574: DOUBLE
13575: LD_INT 1
13577: DEC
13578: ST_TO_ADDR
13579: LD_INT 4
13581: PUSH
13582: FOR_TO
13583: IFFALSE 13604
// SetSkill ( i , j , 10 ) ;
13585: LD_VAR 0 2
13589: PPUSH
13590: LD_VAR 0 3
13594: PPUSH
13595: LD_INT 10
13597: PPUSH
13598: CALL_OW 237
13602: GO 13582
13604: POP
13605: POP
// end ;
13606: GO 13566
13608: POP
13609: POP
// end ;
13610: LD_VAR 0 1
13614: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13615: LD_INT 0
13617: PPUSH
// uc_side := your_side ;
13618: LD_ADDR_OWVAR 20
13622: PUSH
13623: LD_OWVAR 2
13627: ST_TO_ADDR
// uc_nation := nation ;
13628: LD_ADDR_OWVAR 21
13632: PUSH
13633: LD_VAR 0 1
13637: ST_TO_ADDR
// InitHc ;
13638: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13642: LD_INT 0
13644: PPUSH
13645: LD_VAR 0 2
13649: PPUSH
13650: LD_VAR 0 3
13654: PPUSH
13655: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13659: LD_VAR 0 4
13663: PPUSH
13664: LD_VAR 0 5
13668: PPUSH
13669: CALL_OW 428
13673: PUSH
13674: LD_INT 0
13676: EQUAL
13677: IFFALSE 13701
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13679: CALL_OW 44
13683: PPUSH
13684: LD_VAR 0 4
13688: PPUSH
13689: LD_VAR 0 5
13693: PPUSH
13694: LD_INT 1
13696: PPUSH
13697: CALL_OW 48
// end ;
13701: LD_VAR 0 6
13705: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
13706: LD_INT 0
13708: PPUSH
13709: PPUSH
// uc_side := your_side ;
13710: LD_ADDR_OWVAR 20
13714: PUSH
13715: LD_OWVAR 2
13719: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
13720: LD_VAR 0 1
13724: PUSH
13725: LD_INT 1
13727: PUSH
13728: LD_INT 2
13730: PUSH
13731: LD_INT 3
13733: PUSH
13734: LD_INT 4
13736: PUSH
13737: LD_INT 5
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: IN
13747: IFFALSE 13759
// uc_nation := nation_american else
13749: LD_ADDR_OWVAR 21
13753: PUSH
13754: LD_INT 1
13756: ST_TO_ADDR
13757: GO 13802
// if chassis in [ 11 , 12 , 13 , 14 ] then
13759: LD_VAR 0 1
13763: PUSH
13764: LD_INT 11
13766: PUSH
13767: LD_INT 12
13769: PUSH
13770: LD_INT 13
13772: PUSH
13773: LD_INT 14
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: IN
13782: IFFALSE 13794
// uc_nation := nation_arabian else
13784: LD_ADDR_OWVAR 21
13788: PUSH
13789: LD_INT 2
13791: ST_TO_ADDR
13792: GO 13802
// uc_nation := nation_russian ;
13794: LD_ADDR_OWVAR 21
13798: PUSH
13799: LD_INT 3
13801: ST_TO_ADDR
// vc_chassis := chassis ;
13802: LD_ADDR_OWVAR 37
13806: PUSH
13807: LD_VAR 0 1
13811: ST_TO_ADDR
// vc_engine := engine ;
13812: LD_ADDR_OWVAR 39
13816: PUSH
13817: LD_VAR 0 2
13821: ST_TO_ADDR
// vc_control := control ;
13822: LD_ADDR_OWVAR 38
13826: PUSH
13827: LD_VAR 0 3
13831: ST_TO_ADDR
// vc_weapon := weapon ;
13832: LD_ADDR_OWVAR 40
13836: PUSH
13837: LD_VAR 0 4
13841: ST_TO_ADDR
// un := CreateVehicle ;
13842: LD_ADDR_VAR 0 8
13846: PUSH
13847: CALL_OW 45
13851: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
13852: LD_VAR 0 8
13856: PPUSH
13857: LD_INT 0
13859: PPUSH
13860: LD_INT 5
13862: PPUSH
13863: CALL_OW 12
13867: PPUSH
13868: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
13872: LD_VAR 0 8
13876: PPUSH
13877: LD_VAR 0 5
13881: PPUSH
13882: LD_VAR 0 6
13886: PPUSH
13887: LD_INT 1
13889: PPUSH
13890: CALL_OW 48
// end ;
13894: LD_VAR 0 7
13898: RET
// export hInvincible ; every 1 do
13899: GO 13901
13901: DISABLE
// hInvincible := [ ] ;
13902: LD_ADDR_EXP 58
13906: PUSH
13907: EMPTY
13908: ST_TO_ADDR
13909: END
// every 10 do var i ;
13910: GO 13912
13912: DISABLE
13913: LD_INT 0
13915: PPUSH
// begin enable ;
13916: ENABLE
// if not hInvincible then
13917: LD_EXP 58
13921: NOT
13922: IFFALSE 13926
// exit ;
13924: GO 13970
// for i in hInvincible do
13926: LD_ADDR_VAR 0 1
13930: PUSH
13931: LD_EXP 58
13935: PUSH
13936: FOR_IN
13937: IFFALSE 13968
// if GetLives ( i ) < 1000 then
13939: LD_VAR 0 1
13943: PPUSH
13944: CALL_OW 256
13948: PUSH
13949: LD_INT 1000
13951: LESS
13952: IFFALSE 13966
// SetLives ( i , 1000 ) ;
13954: LD_VAR 0 1
13958: PPUSH
13959: LD_INT 1000
13961: PPUSH
13962: CALL_OW 234
13966: GO 13936
13968: POP
13969: POP
// end ;
13970: PPOPN 1
13972: END
// export function hHackInvincible ; var i ; begin
13973: LD_INT 0
13975: PPUSH
13976: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
13977: LD_ADDR_VAR 0 2
13981: PUSH
13982: LD_INT 2
13984: PUSH
13985: LD_INT 21
13987: PUSH
13988: LD_INT 1
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 21
13997: PUSH
13998: LD_INT 2
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 69
14014: PUSH
14015: FOR_IN
14016: IFFALSE 14077
// if IsSelected ( i ) then
14018: LD_VAR 0 2
14022: PPUSH
14023: CALL_OW 306
14027: IFFALSE 14075
// begin if i in hInvincible then
14029: LD_VAR 0 2
14033: PUSH
14034: LD_EXP 58
14038: IN
14039: IFFALSE 14059
// hInvincible := hInvincible diff i else
14041: LD_ADDR_EXP 58
14045: PUSH
14046: LD_EXP 58
14050: PUSH
14051: LD_VAR 0 2
14055: DIFF
14056: ST_TO_ADDR
14057: GO 14075
// hInvincible := hInvincible union i ;
14059: LD_ADDR_EXP 58
14063: PUSH
14064: LD_EXP 58
14068: PUSH
14069: LD_VAR 0 2
14073: UNION
14074: ST_TO_ADDR
// end ;
14075: GO 14015
14077: POP
14078: POP
// end ;
14079: LD_VAR 0 1
14083: RET
// export function hHackInvisible ; var i , j ; begin
14084: LD_INT 0
14086: PPUSH
14087: PPUSH
14088: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14089: LD_ADDR_VAR 0 2
14093: PUSH
14094: LD_INT 21
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 69
14108: PUSH
14109: FOR_IN
14110: IFFALSE 14134
// if IsSelected ( i ) then
14112: LD_VAR 0 2
14116: PPUSH
14117: CALL_OW 306
14121: IFFALSE 14132
// ComForceInvisible ( i ) ;
14123: LD_VAR 0 2
14127: PPUSH
14128: CALL_OW 496
14132: GO 14109
14134: POP
14135: POP
// end ;
14136: LD_VAR 0 1
14140: RET
// export function hHackChangeYourSide ; begin
14141: LD_INT 0
14143: PPUSH
// if your_side = 8 then
14144: LD_OWVAR 2
14148: PUSH
14149: LD_INT 8
14151: EQUAL
14152: IFFALSE 14164
// your_side := 0 else
14154: LD_ADDR_OWVAR 2
14158: PUSH
14159: LD_INT 0
14161: ST_TO_ADDR
14162: GO 14178
// your_side := your_side + 1 ;
14164: LD_ADDR_OWVAR 2
14168: PUSH
14169: LD_OWVAR 2
14173: PUSH
14174: LD_INT 1
14176: PLUS
14177: ST_TO_ADDR
// end ;
14178: LD_VAR 0 1
14182: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14183: LD_INT 0
14185: PPUSH
14186: PPUSH
14187: PPUSH
// for i in all_units do
14188: LD_ADDR_VAR 0 2
14192: PUSH
14193: LD_OWVAR 3
14197: PUSH
14198: FOR_IN
14199: IFFALSE 14277
// if IsSelected ( i ) then
14201: LD_VAR 0 2
14205: PPUSH
14206: CALL_OW 306
14210: IFFALSE 14275
// begin j := GetSide ( i ) ;
14212: LD_ADDR_VAR 0 3
14216: PUSH
14217: LD_VAR 0 2
14221: PPUSH
14222: CALL_OW 255
14226: ST_TO_ADDR
// if j = 8 then
14227: LD_VAR 0 3
14231: PUSH
14232: LD_INT 8
14234: EQUAL
14235: IFFALSE 14247
// j := 0 else
14237: LD_ADDR_VAR 0 3
14241: PUSH
14242: LD_INT 0
14244: ST_TO_ADDR
14245: GO 14261
// j := j + 1 ;
14247: LD_ADDR_VAR 0 3
14251: PUSH
14252: LD_VAR 0 3
14256: PUSH
14257: LD_INT 1
14259: PLUS
14260: ST_TO_ADDR
// SetSide ( i , j ) ;
14261: LD_VAR 0 2
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: CALL_OW 235
// end ;
14275: GO 14198
14277: POP
14278: POP
// end ;
14279: LD_VAR 0 1
14283: RET
// export function hHackFog ; begin
14284: LD_INT 0
14286: PPUSH
// FogOff ( true ) ;
14287: LD_INT 1
14289: PPUSH
14290: CALL_OW 344
// end ;
14294: LD_VAR 0 1
14298: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14299: LD_INT 0
14301: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14302: LD_VAR 0 1
14306: PPUSH
14307: LD_VAR 0 2
14311: PPUSH
14312: LD_VAR 0 3
14316: PPUSH
14317: LD_INT 1
14319: PPUSH
14320: LD_INT 1
14322: PPUSH
14323: CALL_OW 483
// CenterOnXY ( x , y ) ;
14327: LD_VAR 0 2
14331: PPUSH
14332: LD_VAR 0 3
14336: PPUSH
14337: CALL_OW 84
// end ; end_of_file
14341: LD_VAR 0 4
14345: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14346: LD_INT 0
14348: PPUSH
14349: PPUSH
14350: PPUSH
14351: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14352: LD_VAR 0 1
14356: PPUSH
14357: CALL_OW 264
14361: PUSH
14362: LD_EXP 74
14366: EQUAL
14367: IFFALSE 14439
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14369: LD_INT 68
14371: PPUSH
14372: LD_VAR 0 1
14376: PPUSH
14377: CALL_OW 255
14381: PPUSH
14382: CALL_OW 321
14386: PUSH
14387: LD_INT 2
14389: EQUAL
14390: IFFALSE 14402
// eff := 70 else
14392: LD_ADDR_VAR 0 4
14396: PUSH
14397: LD_INT 70
14399: ST_TO_ADDR
14400: GO 14410
// eff := 30 ;
14402: LD_ADDR_VAR 0 4
14406: PUSH
14407: LD_INT 30
14409: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14410: LD_VAR 0 1
14414: PPUSH
14415: CALL_OW 250
14419: PPUSH
14420: LD_VAR 0 1
14424: PPUSH
14425: CALL_OW 251
14429: PPUSH
14430: LD_VAR 0 4
14434: PPUSH
14435: CALL_OW 495
// end ; end ;
14439: LD_VAR 0 2
14443: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14444: LD_INT 0
14446: PPUSH
// end ;
14447: LD_VAR 0 4
14451: RET
// export function SOS_Command ( cmd ) ; begin
14452: LD_INT 0
14454: PPUSH
// end ;
14455: LD_VAR 0 2
14459: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14460: LD_INT 0
14462: PPUSH
// end ;
14463: LD_VAR 0 6
14467: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14468: LD_INT 0
14470: PPUSH
14471: PPUSH
// if not vehicle or not factory then
14472: LD_VAR 0 1
14476: NOT
14477: PUSH
14478: LD_VAR 0 2
14482: NOT
14483: OR
14484: IFFALSE 14488
// exit ;
14486: GO 14719
// if factoryWaypoints >= factory then
14488: LD_EXP 59
14492: PUSH
14493: LD_VAR 0 2
14497: GREATEREQUAL
14498: IFFALSE 14719
// if factoryWaypoints [ factory ] then
14500: LD_EXP 59
14504: PUSH
14505: LD_VAR 0 2
14509: ARRAY
14510: IFFALSE 14719
// begin if GetControl ( vehicle ) = control_manual then
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL_OW 263
14521: PUSH
14522: LD_INT 1
14524: EQUAL
14525: IFFALSE 14606
// begin driver := IsDrivenBy ( vehicle ) ;
14527: LD_ADDR_VAR 0 4
14531: PUSH
14532: LD_VAR 0 1
14536: PPUSH
14537: CALL_OW 311
14541: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
14542: LD_VAR 0 4
14546: PPUSH
14547: LD_EXP 59
14551: PUSH
14552: LD_VAR 0 2
14556: ARRAY
14557: PUSH
14558: LD_INT 1
14560: ARRAY
14561: PPUSH
14562: LD_EXP 59
14566: PUSH
14567: LD_VAR 0 2
14571: ARRAY
14572: PUSH
14573: LD_INT 2
14575: ARRAY
14576: PPUSH
14577: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14581: LD_VAR 0 4
14585: PPUSH
14586: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14590: LD_VAR 0 4
14594: PPUSH
14595: LD_VAR 0 2
14599: PPUSH
14600: CALL_OW 180
// end else
14604: GO 14719
// if GetControl ( vehicle ) = control_remote then
14606: LD_VAR 0 1
14610: PPUSH
14611: CALL_OW 263
14615: PUSH
14616: LD_INT 2
14618: EQUAL
14619: IFFALSE 14680
// begin wait ( 0 0$2 ) ;
14621: LD_INT 70
14623: PPUSH
14624: CALL_OW 67
// if Connect ( vehicle ) then
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL 27311 0 1
14637: IFFALSE 14678
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
14639: LD_VAR 0 1
14643: PPUSH
14644: LD_EXP 59
14648: PUSH
14649: LD_VAR 0 2
14653: ARRAY
14654: PUSH
14655: LD_INT 1
14657: ARRAY
14658: PPUSH
14659: LD_EXP 59
14663: PUSH
14664: LD_VAR 0 2
14668: ARRAY
14669: PUSH
14670: LD_INT 2
14672: ARRAY
14673: PPUSH
14674: CALL_OW 171
// end else
14678: GO 14719
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
14680: LD_VAR 0 1
14684: PPUSH
14685: LD_EXP 59
14689: PUSH
14690: LD_VAR 0 2
14694: ARRAY
14695: PUSH
14696: LD_INT 1
14698: ARRAY
14699: PPUSH
14700: LD_EXP 59
14704: PUSH
14705: LD_VAR 0 2
14709: ARRAY
14710: PUSH
14711: LD_INT 2
14713: ARRAY
14714: PPUSH
14715: CALL_OW 171
// end ; end ;
14719: LD_VAR 0 3
14723: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14724: LD_INT 0
14726: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14727: LD_VAR 0 1
14731: PUSH
14732: LD_INT 250
14734: EQUAL
14735: PUSH
14736: LD_VAR 0 2
14740: PPUSH
14741: CALL_OW 264
14745: PUSH
14746: LD_EXP 77
14750: EQUAL
14751: AND
14752: IFFALSE 14773
// MinerPlaceMine ( unit , x , y ) ;
14754: LD_VAR 0 2
14758: PPUSH
14759: LD_VAR 0 4
14763: PPUSH
14764: LD_VAR 0 5
14768: PPUSH
14769: CALL 17501 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14773: LD_VAR 0 1
14777: PUSH
14778: LD_INT 251
14780: EQUAL
14781: PUSH
14782: LD_VAR 0 2
14786: PPUSH
14787: CALL_OW 264
14791: PUSH
14792: LD_EXP 77
14796: EQUAL
14797: AND
14798: IFFALSE 14819
// MinerDetonateMine ( unit , x , y ) ;
14800: LD_VAR 0 2
14804: PPUSH
14805: LD_VAR 0 4
14809: PPUSH
14810: LD_VAR 0 5
14814: PPUSH
14815: CALL 17778 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14819: LD_VAR 0 1
14823: PUSH
14824: LD_INT 252
14826: EQUAL
14827: PUSH
14828: LD_VAR 0 2
14832: PPUSH
14833: CALL_OW 264
14837: PUSH
14838: LD_EXP 77
14842: EQUAL
14843: AND
14844: IFFALSE 14865
// MinerCreateMinefield ( unit , x , y ) ;
14846: LD_VAR 0 2
14850: PPUSH
14851: LD_VAR 0 4
14855: PPUSH
14856: LD_VAR 0 5
14860: PPUSH
14861: CALL 18195 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14865: LD_VAR 0 1
14869: PUSH
14870: LD_INT 253
14872: EQUAL
14873: PUSH
14874: LD_VAR 0 2
14878: PPUSH
14879: CALL_OW 257
14883: PUSH
14884: LD_INT 5
14886: EQUAL
14887: AND
14888: IFFALSE 14909
// ComBinocular ( unit , x , y ) ;
14890: LD_VAR 0 2
14894: PPUSH
14895: LD_VAR 0 4
14899: PPUSH
14900: LD_VAR 0 5
14904: PPUSH
14905: CALL 18566 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14909: LD_VAR 0 1
14913: PUSH
14914: LD_INT 254
14916: EQUAL
14917: PUSH
14918: LD_VAR 0 2
14922: PPUSH
14923: CALL_OW 264
14927: PUSH
14928: LD_EXP 72
14932: EQUAL
14933: AND
14934: PUSH
14935: LD_VAR 0 3
14939: PPUSH
14940: CALL_OW 263
14944: PUSH
14945: LD_INT 3
14947: EQUAL
14948: AND
14949: IFFALSE 14965
// HackDestroyVehicle ( unit , selectedUnit ) ;
14951: LD_VAR 0 2
14955: PPUSH
14956: LD_VAR 0 3
14960: PPUSH
14961: CALL 16861 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14965: LD_VAR 0 1
14969: PUSH
14970: LD_INT 255
14972: EQUAL
14973: PUSH
14974: LD_VAR 0 2
14978: PPUSH
14979: CALL_OW 264
14983: PUSH
14984: LD_INT 14
14986: PUSH
14987: LD_INT 53
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: IN
14994: AND
14995: PUSH
14996: LD_VAR 0 4
15000: PPUSH
15001: LD_VAR 0 5
15005: PPUSH
15006: CALL_OW 488
15010: AND
15011: IFFALSE 15035
// CutTreeXYR ( unit , x , y , 12 ) ;
15013: LD_VAR 0 2
15017: PPUSH
15018: LD_VAR 0 4
15022: PPUSH
15023: LD_VAR 0 5
15027: PPUSH
15028: LD_INT 12
15030: PPUSH
15031: CALL 15427 0 4
// if cmd = 256 then
15035: LD_VAR 0 1
15039: PUSH
15040: LD_INT 256
15042: EQUAL
15043: IFFALSE 15064
// SetFactoryWaypoint ( unit , x , y ) ;
15045: LD_VAR 0 2
15049: PPUSH
15050: LD_VAR 0 4
15054: PPUSH
15055: LD_VAR 0 5
15059: PPUSH
15060: CALL 15069 0 3
// end ;
15064: LD_VAR 0 6
15068: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15069: LD_INT 0
15071: PPUSH
15072: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15073: LD_VAR 0 1
15077: NOT
15078: PUSH
15079: LD_VAR 0 2
15083: PPUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: CALL_OW 488
15093: NOT
15094: OR
15095: PUSH
15096: LD_VAR 0 1
15100: PPUSH
15101: CALL_OW 266
15105: PUSH
15106: LD_INT 3
15108: NONEQUAL
15109: PUSH
15110: LD_VAR 0 1
15114: PPUSH
15115: CALL_OW 247
15119: PUSH
15120: LD_INT 1
15122: EQUAL
15123: NOT
15124: AND
15125: OR
15126: IFFALSE 15130
// exit ;
15128: GO 15279
// if GetType ( factory ) = unit_human then
15130: LD_VAR 0 1
15134: PPUSH
15135: CALL_OW 247
15139: PUSH
15140: LD_INT 1
15142: EQUAL
15143: IFFALSE 15160
// factory := IsInUnit ( factory ) ;
15145: LD_ADDR_VAR 0 1
15149: PUSH
15150: LD_VAR 0 1
15154: PPUSH
15155: CALL_OW 310
15159: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15160: LD_VAR 0 1
15164: PPUSH
15165: CALL_OW 266
15169: PUSH
15170: LD_INT 3
15172: NONEQUAL
15173: IFFALSE 15177
// exit ;
15175: GO 15279
// if HexInfo ( x , y ) = factory then
15177: LD_VAR 0 2
15181: PPUSH
15182: LD_VAR 0 3
15186: PPUSH
15187: CALL_OW 428
15191: PUSH
15192: LD_VAR 0 1
15196: EQUAL
15197: IFFALSE 15224
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15199: LD_ADDR_EXP 59
15203: PUSH
15204: LD_EXP 59
15208: PPUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: LD_INT 0
15216: PPUSH
15217: CALL_OW 1
15221: ST_TO_ADDR
15222: GO 15275
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15224: LD_ADDR_EXP 59
15228: PUSH
15229: LD_EXP 59
15233: PPUSH
15234: LD_VAR 0 1
15238: PPUSH
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 255
15248: PUSH
15249: LD_VAR 0 1
15253: PUSH
15254: LD_VAR 0 2
15258: PUSH
15259: LD_VAR 0 3
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: PPUSH
15270: CALL_OW 1
15274: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15275: CALL 15284 0 0
// end ;
15279: LD_VAR 0 4
15283: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
15284: LD_INT 0
15286: PPUSH
15287: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15288: LD_STRING resetFactoryWaypoint();
15290: PPUSH
15291: CALL_OW 559
// if factoryWaypoints then
15295: LD_EXP 59
15299: IFFALSE 15422
// begin for i := 1 to factoryWaypoints do
15301: LD_ADDR_VAR 0 2
15305: PUSH
15306: DOUBLE
15307: LD_INT 1
15309: DEC
15310: ST_TO_ADDR
15311: LD_EXP 59
15315: PUSH
15316: FOR_TO
15317: IFFALSE 15420
// if factoryWaypoints [ i ] then
15319: LD_EXP 59
15323: PUSH
15324: LD_VAR 0 2
15328: ARRAY
15329: IFFALSE 15418
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
15331: LD_STRING setFactoryWaypointXY(
15333: PUSH
15334: LD_EXP 59
15338: PUSH
15339: LD_VAR 0 2
15343: ARRAY
15344: PUSH
15345: LD_INT 1
15347: ARRAY
15348: STR
15349: PUSH
15350: LD_STRING ,
15352: STR
15353: PUSH
15354: LD_EXP 59
15358: PUSH
15359: LD_VAR 0 2
15363: ARRAY
15364: PUSH
15365: LD_INT 2
15367: ARRAY
15368: STR
15369: PUSH
15370: LD_STRING ,
15372: STR
15373: PUSH
15374: LD_EXP 59
15378: PUSH
15379: LD_VAR 0 2
15383: ARRAY
15384: PUSH
15385: LD_INT 3
15387: ARRAY
15388: STR
15389: PUSH
15390: LD_STRING ,
15392: STR
15393: PUSH
15394: LD_EXP 59
15398: PUSH
15399: LD_VAR 0 2
15403: ARRAY
15404: PUSH
15405: LD_INT 4
15407: ARRAY
15408: STR
15409: PUSH
15410: LD_STRING )
15412: STR
15413: PPUSH
15414: CALL_OW 559
15418: GO 15316
15420: POP
15421: POP
// end ; end ;
15422: LD_VAR 0 1
15426: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15427: LD_INT 0
15429: PPUSH
15430: PPUSH
15431: PPUSH
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
15436: PPUSH
15437: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15438: LD_VAR 0 1
15442: NOT
15443: PUSH
15444: LD_VAR 0 2
15448: PPUSH
15449: LD_VAR 0 3
15453: PPUSH
15454: CALL_OW 488
15458: NOT
15459: OR
15460: PUSH
15461: LD_VAR 0 4
15465: NOT
15466: OR
15467: IFFALSE 15471
// exit ;
15469: GO 15811
// list := [ ] ;
15471: LD_ADDR_VAR 0 13
15475: PUSH
15476: EMPTY
15477: ST_TO_ADDR
// if x - r < 0 then
15478: LD_VAR 0 2
15482: PUSH
15483: LD_VAR 0 4
15487: MINUS
15488: PUSH
15489: LD_INT 0
15491: LESS
15492: IFFALSE 15504
// min_x := 0 else
15494: LD_ADDR_VAR 0 7
15498: PUSH
15499: LD_INT 0
15501: ST_TO_ADDR
15502: GO 15520
// min_x := x - r ;
15504: LD_ADDR_VAR 0 7
15508: PUSH
15509: LD_VAR 0 2
15513: PUSH
15514: LD_VAR 0 4
15518: MINUS
15519: ST_TO_ADDR
// if y - r < 0 then
15520: LD_VAR 0 3
15524: PUSH
15525: LD_VAR 0 4
15529: MINUS
15530: PUSH
15531: LD_INT 0
15533: LESS
15534: IFFALSE 15546
// min_y := 0 else
15536: LD_ADDR_VAR 0 8
15540: PUSH
15541: LD_INT 0
15543: ST_TO_ADDR
15544: GO 15562
// min_y := y - r ;
15546: LD_ADDR_VAR 0 8
15550: PUSH
15551: LD_VAR 0 3
15555: PUSH
15556: LD_VAR 0 4
15560: MINUS
15561: ST_TO_ADDR
// max_x := x + r ;
15562: LD_ADDR_VAR 0 9
15566: PUSH
15567: LD_VAR 0 2
15571: PUSH
15572: LD_VAR 0 4
15576: PLUS
15577: ST_TO_ADDR
// max_y := y + r ;
15578: LD_ADDR_VAR 0 10
15582: PUSH
15583: LD_VAR 0 3
15587: PUSH
15588: LD_VAR 0 4
15592: PLUS
15593: ST_TO_ADDR
// for _x = min_x to max_x do
15594: LD_ADDR_VAR 0 11
15598: PUSH
15599: DOUBLE
15600: LD_VAR 0 7
15604: DEC
15605: ST_TO_ADDR
15606: LD_VAR 0 9
15610: PUSH
15611: FOR_TO
15612: IFFALSE 15729
// for _y = min_y to max_y do
15614: LD_ADDR_VAR 0 12
15618: PUSH
15619: DOUBLE
15620: LD_VAR 0 8
15624: DEC
15625: ST_TO_ADDR
15626: LD_VAR 0 10
15630: PUSH
15631: FOR_TO
15632: IFFALSE 15725
// begin if not ValidHex ( _x , _y ) then
15634: LD_VAR 0 11
15638: PPUSH
15639: LD_VAR 0 12
15643: PPUSH
15644: CALL_OW 488
15648: NOT
15649: IFFALSE 15653
// continue ;
15651: GO 15631
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15653: LD_VAR 0 11
15657: PPUSH
15658: LD_VAR 0 12
15662: PPUSH
15663: CALL_OW 351
15667: PUSH
15668: LD_VAR 0 11
15672: PPUSH
15673: LD_VAR 0 12
15677: PPUSH
15678: CALL_OW 554
15682: AND
15683: IFFALSE 15723
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15685: LD_ADDR_VAR 0 13
15689: PUSH
15690: LD_VAR 0 13
15694: PPUSH
15695: LD_VAR 0 13
15699: PUSH
15700: LD_INT 1
15702: PLUS
15703: PPUSH
15704: LD_VAR 0 11
15708: PUSH
15709: LD_VAR 0 12
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PPUSH
15718: CALL_OW 2
15722: ST_TO_ADDR
// end ;
15723: GO 15631
15725: POP
15726: POP
15727: GO 15611
15729: POP
15730: POP
// if not list then
15731: LD_VAR 0 13
15735: NOT
15736: IFFALSE 15740
// exit ;
15738: GO 15811
// for i in list do
15740: LD_ADDR_VAR 0 6
15744: PUSH
15745: LD_VAR 0 13
15749: PUSH
15750: FOR_IN
15751: IFFALSE 15809
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15753: LD_VAR 0 1
15757: PPUSH
15758: LD_STRING M
15760: PUSH
15761: LD_VAR 0 6
15765: PUSH
15766: LD_INT 1
15768: ARRAY
15769: PUSH
15770: LD_VAR 0 6
15774: PUSH
15775: LD_INT 2
15777: ARRAY
15778: PUSH
15779: LD_INT 0
15781: PUSH
15782: LD_INT 0
15784: PUSH
15785: LD_INT 0
15787: PUSH
15788: LD_INT 0
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: PPUSH
15803: CALL_OW 447
15807: GO 15750
15809: POP
15810: POP
// end ;
15811: LD_VAR 0 5
15815: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15816: LD_EXP 60
15820: NOT
15821: IFFALSE 15871
15823: GO 15825
15825: DISABLE
// begin initHack := true ;
15826: LD_ADDR_EXP 60
15830: PUSH
15831: LD_INT 1
15833: ST_TO_ADDR
// hackTanks := [ ] ;
15834: LD_ADDR_EXP 61
15838: PUSH
15839: EMPTY
15840: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15841: LD_ADDR_EXP 62
15845: PUSH
15846: EMPTY
15847: ST_TO_ADDR
// hackLimit := 3 ;
15848: LD_ADDR_EXP 63
15852: PUSH
15853: LD_INT 3
15855: ST_TO_ADDR
// hackDist := 12 ;
15856: LD_ADDR_EXP 64
15860: PUSH
15861: LD_INT 12
15863: ST_TO_ADDR
// hackCounter := [ ] ;
15864: LD_ADDR_EXP 65
15868: PUSH
15869: EMPTY
15870: ST_TO_ADDR
// end ;
15871: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15872: LD_EXP 60
15876: PUSH
15877: LD_INT 34
15879: PUSH
15880: LD_EXP 72
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PPUSH
15889: CALL_OW 69
15893: AND
15894: IFFALSE 16149
15896: GO 15898
15898: DISABLE
15899: LD_INT 0
15901: PPUSH
15902: PPUSH
// begin enable ;
15903: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15904: LD_ADDR_VAR 0 1
15908: PUSH
15909: LD_INT 34
15911: PUSH
15912: LD_EXP 72
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PPUSH
15921: CALL_OW 69
15925: PUSH
15926: FOR_IN
15927: IFFALSE 16147
// begin if not i in hackTanks then
15929: LD_VAR 0 1
15933: PUSH
15934: LD_EXP 61
15938: IN
15939: NOT
15940: IFFALSE 16023
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15942: LD_ADDR_EXP 61
15946: PUSH
15947: LD_EXP 61
15951: PPUSH
15952: LD_EXP 61
15956: PUSH
15957: LD_INT 1
15959: PLUS
15960: PPUSH
15961: LD_VAR 0 1
15965: PPUSH
15966: CALL_OW 1
15970: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15971: LD_ADDR_EXP 62
15975: PUSH
15976: LD_EXP 62
15980: PPUSH
15981: LD_EXP 62
15985: PUSH
15986: LD_INT 1
15988: PLUS
15989: PPUSH
15990: EMPTY
15991: PPUSH
15992: CALL_OW 1
15996: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15997: LD_ADDR_EXP 65
16001: PUSH
16002: LD_EXP 65
16006: PPUSH
16007: LD_EXP 65
16011: PUSH
16012: LD_INT 1
16014: PLUS
16015: PPUSH
16016: EMPTY
16017: PPUSH
16018: CALL_OW 1
16022: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 302
16032: NOT
16033: IFFALSE 16046
// begin HackUnlinkAll ( i ) ;
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL 16152 0 1
// continue ;
16044: GO 15926
// end ; HackCheckCapturedStatus ( i ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL 16595 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16055: LD_ADDR_VAR 0 2
16059: PUSH
16060: LD_INT 81
16062: PUSH
16063: LD_VAR 0 1
16067: PPUSH
16068: CALL_OW 255
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 33
16079: PUSH
16080: LD_INT 3
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 91
16089: PUSH
16090: LD_VAR 0 1
16094: PUSH
16095: LD_EXP 64
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 50
16107: PUSH
16108: EMPTY
16109: LIST
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: ST_TO_ADDR
// if not tmp then
16122: LD_VAR 0 2
16126: NOT
16127: IFFALSE 16131
// continue ;
16129: GO 15926
// HackLink ( i , tmp ) ;
16131: LD_VAR 0 1
16135: PPUSH
16136: LD_VAR 0 2
16140: PPUSH
16141: CALL 16288 0 2
// end ;
16145: GO 15926
16147: POP
16148: POP
// end ;
16149: PPOPN 2
16151: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16152: LD_INT 0
16154: PPUSH
16155: PPUSH
16156: PPUSH
// if not hack in hackTanks then
16157: LD_VAR 0 1
16161: PUSH
16162: LD_EXP 61
16166: IN
16167: NOT
16168: IFFALSE 16172
// exit ;
16170: GO 16283
// index := GetElementIndex ( hackTanks , hack ) ;
16172: LD_ADDR_VAR 0 4
16176: PUSH
16177: LD_EXP 61
16181: PPUSH
16182: LD_VAR 0 1
16186: PPUSH
16187: CALL 24125 0 2
16191: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16192: LD_EXP 62
16196: PUSH
16197: LD_VAR 0 4
16201: ARRAY
16202: IFFALSE 16283
// begin for i in hackTanksCaptured [ index ] do
16204: LD_ADDR_VAR 0 3
16208: PUSH
16209: LD_EXP 62
16213: PUSH
16214: LD_VAR 0 4
16218: ARRAY
16219: PUSH
16220: FOR_IN
16221: IFFALSE 16247
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16223: LD_VAR 0 3
16227: PUSH
16228: LD_INT 1
16230: ARRAY
16231: PPUSH
16232: LD_VAR 0 3
16236: PUSH
16237: LD_INT 2
16239: ARRAY
16240: PPUSH
16241: CALL_OW 235
16245: GO 16220
16247: POP
16248: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16249: LD_ADDR_EXP 62
16253: PUSH
16254: LD_EXP 62
16258: PPUSH
16259: LD_VAR 0 4
16263: PPUSH
16264: EMPTY
16265: PPUSH
16266: CALL_OW 1
16270: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16271: LD_VAR 0 1
16275: PPUSH
16276: LD_INT 0
16278: PPUSH
16279: CALL_OW 505
// end ; end ;
16283: LD_VAR 0 2
16287: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16288: LD_INT 0
16290: PPUSH
16291: PPUSH
16292: PPUSH
// if not hack in hackTanks or not vehicles then
16293: LD_VAR 0 1
16297: PUSH
16298: LD_EXP 61
16302: IN
16303: NOT
16304: PUSH
16305: LD_VAR 0 2
16309: NOT
16310: OR
16311: IFFALSE 16315
// exit ;
16313: GO 16590
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16315: LD_ADDR_VAR 0 2
16319: PUSH
16320: LD_VAR 0 1
16324: PPUSH
16325: LD_VAR 0 2
16329: PPUSH
16330: LD_INT 1
16332: PPUSH
16333: LD_INT 1
16335: PPUSH
16336: CALL 24775 0 4
16340: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16341: LD_ADDR_VAR 0 5
16345: PUSH
16346: LD_EXP 61
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL 24125 0 2
16360: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16361: LD_EXP 62
16365: PUSH
16366: LD_VAR 0 5
16370: ARRAY
16371: PUSH
16372: LD_EXP 63
16376: LESS
16377: IFFALSE 16566
// begin for i := 1 to vehicles do
16379: LD_ADDR_VAR 0 4
16383: PUSH
16384: DOUBLE
16385: LD_INT 1
16387: DEC
16388: ST_TO_ADDR
16389: LD_VAR 0 2
16393: PUSH
16394: FOR_TO
16395: IFFALSE 16564
// begin if hackTanksCaptured [ index ] = hackLimit then
16397: LD_EXP 62
16401: PUSH
16402: LD_VAR 0 5
16406: ARRAY
16407: PUSH
16408: LD_EXP 63
16412: EQUAL
16413: IFFALSE 16417
// break ;
16415: GO 16564
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16417: LD_ADDR_EXP 65
16421: PUSH
16422: LD_EXP 65
16426: PPUSH
16427: LD_VAR 0 5
16431: PPUSH
16432: LD_EXP 65
16436: PUSH
16437: LD_VAR 0 5
16441: ARRAY
16442: PUSH
16443: LD_INT 1
16445: PLUS
16446: PPUSH
16447: CALL_OW 1
16451: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16452: LD_ADDR_EXP 62
16456: PUSH
16457: LD_EXP 62
16461: PPUSH
16462: LD_VAR 0 5
16466: PUSH
16467: LD_EXP 62
16471: PUSH
16472: LD_VAR 0 5
16476: ARRAY
16477: PUSH
16478: LD_INT 1
16480: PLUS
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PPUSH
16486: LD_VAR 0 2
16490: PUSH
16491: LD_VAR 0 4
16495: ARRAY
16496: PUSH
16497: LD_VAR 0 2
16501: PUSH
16502: LD_VAR 0 4
16506: ARRAY
16507: PPUSH
16508: CALL_OW 255
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PPUSH
16517: CALL 24340 0 3
16521: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16522: LD_VAR 0 2
16526: PUSH
16527: LD_VAR 0 4
16531: ARRAY
16532: PPUSH
16533: LD_VAR 0 1
16537: PPUSH
16538: CALL_OW 255
16542: PPUSH
16543: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16547: LD_VAR 0 2
16551: PUSH
16552: LD_VAR 0 4
16556: ARRAY
16557: PPUSH
16558: CALL_OW 141
// end ;
16562: GO 16394
16564: POP
16565: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16566: LD_VAR 0 1
16570: PPUSH
16571: LD_EXP 62
16575: PUSH
16576: LD_VAR 0 5
16580: ARRAY
16581: PUSH
16582: LD_INT 0
16584: PLUS
16585: PPUSH
16586: CALL_OW 505
// end ;
16590: LD_VAR 0 3
16594: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16595: LD_INT 0
16597: PPUSH
16598: PPUSH
16599: PPUSH
16600: PPUSH
// if not hack in hackTanks then
16601: LD_VAR 0 1
16605: PUSH
16606: LD_EXP 61
16610: IN
16611: NOT
16612: IFFALSE 16616
// exit ;
16614: GO 16856
// index := GetElementIndex ( hackTanks , hack ) ;
16616: LD_ADDR_VAR 0 4
16620: PUSH
16621: LD_EXP 61
16625: PPUSH
16626: LD_VAR 0 1
16630: PPUSH
16631: CALL 24125 0 2
16635: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16636: LD_ADDR_VAR 0 3
16640: PUSH
16641: DOUBLE
16642: LD_EXP 62
16646: PUSH
16647: LD_VAR 0 4
16651: ARRAY
16652: INC
16653: ST_TO_ADDR
16654: LD_INT 1
16656: PUSH
16657: FOR_DOWNTO
16658: IFFALSE 16830
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16660: LD_ADDR_VAR 0 5
16664: PUSH
16665: LD_EXP 62
16669: PUSH
16670: LD_VAR 0 4
16674: ARRAY
16675: PUSH
16676: LD_VAR 0 3
16680: ARRAY
16681: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16682: LD_VAR 0 5
16686: PUSH
16687: LD_INT 1
16689: ARRAY
16690: PPUSH
16691: CALL_OW 302
16695: NOT
16696: PUSH
16697: LD_VAR 0 5
16701: PUSH
16702: LD_INT 1
16704: ARRAY
16705: PPUSH
16706: CALL_OW 255
16710: PUSH
16711: LD_VAR 0 1
16715: PPUSH
16716: CALL_OW 255
16720: NONEQUAL
16721: OR
16722: IFFALSE 16828
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16724: LD_VAR 0 5
16728: PUSH
16729: LD_INT 1
16731: ARRAY
16732: PPUSH
16733: CALL_OW 305
16737: PUSH
16738: LD_VAR 0 5
16742: PUSH
16743: LD_INT 1
16745: ARRAY
16746: PPUSH
16747: CALL_OW 255
16751: PUSH
16752: LD_VAR 0 1
16756: PPUSH
16757: CALL_OW 255
16761: EQUAL
16762: AND
16763: IFFALSE 16787
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16765: LD_VAR 0 5
16769: PUSH
16770: LD_INT 1
16772: ARRAY
16773: PPUSH
16774: LD_VAR 0 5
16778: PUSH
16779: LD_INT 2
16781: ARRAY
16782: PPUSH
16783: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16787: LD_ADDR_EXP 62
16791: PUSH
16792: LD_EXP 62
16796: PPUSH
16797: LD_VAR 0 4
16801: PPUSH
16802: LD_EXP 62
16806: PUSH
16807: LD_VAR 0 4
16811: ARRAY
16812: PPUSH
16813: LD_VAR 0 3
16817: PPUSH
16818: CALL_OW 3
16822: PPUSH
16823: CALL_OW 1
16827: ST_TO_ADDR
// end ; end ;
16828: GO 16657
16830: POP
16831: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16832: LD_VAR 0 1
16836: PPUSH
16837: LD_EXP 62
16841: PUSH
16842: LD_VAR 0 4
16846: ARRAY
16847: PUSH
16848: LD_INT 0
16850: PLUS
16851: PPUSH
16852: CALL_OW 505
// end ;
16856: LD_VAR 0 2
16860: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16861: LD_INT 0
16863: PPUSH
16864: PPUSH
16865: PPUSH
16866: PPUSH
// if not hack in hackTanks then
16867: LD_VAR 0 1
16871: PUSH
16872: LD_EXP 61
16876: IN
16877: NOT
16878: IFFALSE 16882
// exit ;
16880: GO 16967
// index := GetElementIndex ( hackTanks , hack ) ;
16882: LD_ADDR_VAR 0 5
16886: PUSH
16887: LD_EXP 61
16891: PPUSH
16892: LD_VAR 0 1
16896: PPUSH
16897: CALL 24125 0 2
16901: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16902: LD_ADDR_VAR 0 4
16906: PUSH
16907: DOUBLE
16908: LD_INT 1
16910: DEC
16911: ST_TO_ADDR
16912: LD_EXP 62
16916: PUSH
16917: LD_VAR 0 5
16921: ARRAY
16922: PUSH
16923: FOR_TO
16924: IFFALSE 16965
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16926: LD_EXP 62
16930: PUSH
16931: LD_VAR 0 5
16935: ARRAY
16936: PUSH
16937: LD_VAR 0 4
16941: ARRAY
16942: PUSH
16943: LD_INT 1
16945: ARRAY
16946: PUSH
16947: LD_VAR 0 2
16951: EQUAL
16952: IFFALSE 16963
// KillUnit ( vehicle ) ;
16954: LD_VAR 0 2
16958: PPUSH
16959: CALL_OW 66
16963: GO 16923
16965: POP
16966: POP
// end ;
16967: LD_VAR 0 3
16971: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16972: LD_EXP 66
16976: NOT
16977: IFFALSE 17012
16979: GO 16981
16981: DISABLE
// begin initMiner := true ;
16982: LD_ADDR_EXP 66
16986: PUSH
16987: LD_INT 1
16989: ST_TO_ADDR
// minersList := [ ] ;
16990: LD_ADDR_EXP 67
16994: PUSH
16995: EMPTY
16996: ST_TO_ADDR
// minerMinesList := [ ] ;
16997: LD_ADDR_EXP 68
17001: PUSH
17002: EMPTY
17003: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17004: LD_ADDR_EXP 69
17008: PUSH
17009: LD_INT 5
17011: ST_TO_ADDR
// end ;
17012: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17013: LD_EXP 66
17017: PUSH
17018: LD_INT 34
17020: PUSH
17021: LD_EXP 77
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PPUSH
17030: CALL_OW 69
17034: AND
17035: IFFALSE 17498
17037: GO 17039
17039: DISABLE
17040: LD_INT 0
17042: PPUSH
17043: PPUSH
17044: PPUSH
17045: PPUSH
// begin enable ;
17046: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17047: LD_ADDR_VAR 0 1
17051: PUSH
17052: LD_INT 34
17054: PUSH
17055: LD_EXP 77
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PPUSH
17064: CALL_OW 69
17068: PUSH
17069: FOR_IN
17070: IFFALSE 17142
// begin if not i in minersList then
17072: LD_VAR 0 1
17076: PUSH
17077: LD_EXP 67
17081: IN
17082: NOT
17083: IFFALSE 17140
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17085: LD_ADDR_EXP 67
17089: PUSH
17090: LD_EXP 67
17094: PPUSH
17095: LD_EXP 67
17099: PUSH
17100: LD_INT 1
17102: PLUS
17103: PPUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: CALL_OW 1
17113: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17114: LD_ADDR_EXP 68
17118: PUSH
17119: LD_EXP 68
17123: PPUSH
17124: LD_EXP 68
17128: PUSH
17129: LD_INT 1
17131: PLUS
17132: PPUSH
17133: EMPTY
17134: PPUSH
17135: CALL_OW 1
17139: ST_TO_ADDR
// end end ;
17140: GO 17069
17142: POP
17143: POP
// for i := minerMinesList downto 1 do
17144: LD_ADDR_VAR 0 1
17148: PUSH
17149: DOUBLE
17150: LD_EXP 68
17154: INC
17155: ST_TO_ADDR
17156: LD_INT 1
17158: PUSH
17159: FOR_DOWNTO
17160: IFFALSE 17496
// begin if IsLive ( minersList [ i ] ) then
17162: LD_EXP 67
17166: PUSH
17167: LD_VAR 0 1
17171: ARRAY
17172: PPUSH
17173: CALL_OW 300
17177: IFFALSE 17205
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17179: LD_EXP 67
17183: PUSH
17184: LD_VAR 0 1
17188: ARRAY
17189: PPUSH
17190: LD_EXP 68
17194: PUSH
17195: LD_VAR 0 1
17199: ARRAY
17200: PPUSH
17201: CALL_OW 505
// if not minerMinesList [ i ] then
17205: LD_EXP 68
17209: PUSH
17210: LD_VAR 0 1
17214: ARRAY
17215: NOT
17216: IFFALSE 17220
// continue ;
17218: GO 17159
// for j := minerMinesList [ i ] downto 1 do
17220: LD_ADDR_VAR 0 2
17224: PUSH
17225: DOUBLE
17226: LD_EXP 68
17230: PUSH
17231: LD_VAR 0 1
17235: ARRAY
17236: INC
17237: ST_TO_ADDR
17238: LD_INT 1
17240: PUSH
17241: FOR_DOWNTO
17242: IFFALSE 17492
// begin side := GetSide ( minersList [ i ] ) ;
17244: LD_ADDR_VAR 0 3
17248: PUSH
17249: LD_EXP 67
17253: PUSH
17254: LD_VAR 0 1
17258: ARRAY
17259: PPUSH
17260: CALL_OW 255
17264: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17265: LD_ADDR_VAR 0 4
17269: PUSH
17270: LD_EXP 68
17274: PUSH
17275: LD_VAR 0 1
17279: ARRAY
17280: PUSH
17281: LD_VAR 0 2
17285: ARRAY
17286: PUSH
17287: LD_INT 1
17289: ARRAY
17290: PPUSH
17291: LD_EXP 68
17295: PUSH
17296: LD_VAR 0 1
17300: ARRAY
17301: PUSH
17302: LD_VAR 0 2
17306: ARRAY
17307: PUSH
17308: LD_INT 2
17310: ARRAY
17311: PPUSH
17312: CALL_OW 428
17316: ST_TO_ADDR
// if not tmp then
17317: LD_VAR 0 4
17321: NOT
17322: IFFALSE 17326
// continue ;
17324: GO 17241
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17326: LD_VAR 0 4
17330: PUSH
17331: LD_INT 81
17333: PUSH
17334: LD_VAR 0 3
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PPUSH
17343: CALL_OW 69
17347: IN
17348: PUSH
17349: LD_EXP 68
17353: PUSH
17354: LD_VAR 0 1
17358: ARRAY
17359: PUSH
17360: LD_VAR 0 2
17364: ARRAY
17365: PUSH
17366: LD_INT 1
17368: ARRAY
17369: PPUSH
17370: LD_EXP 68
17374: PUSH
17375: LD_VAR 0 1
17379: ARRAY
17380: PUSH
17381: LD_VAR 0 2
17385: ARRAY
17386: PUSH
17387: LD_INT 2
17389: ARRAY
17390: PPUSH
17391: CALL_OW 458
17395: AND
17396: IFFALSE 17490
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17398: LD_EXP 68
17402: PUSH
17403: LD_VAR 0 1
17407: ARRAY
17408: PUSH
17409: LD_VAR 0 2
17413: ARRAY
17414: PUSH
17415: LD_INT 1
17417: ARRAY
17418: PPUSH
17419: LD_EXP 68
17423: PUSH
17424: LD_VAR 0 1
17428: ARRAY
17429: PUSH
17430: LD_VAR 0 2
17434: ARRAY
17435: PUSH
17436: LD_INT 2
17438: ARRAY
17439: PPUSH
17440: LD_VAR 0 3
17444: PPUSH
17445: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17449: LD_ADDR_EXP 68
17453: PUSH
17454: LD_EXP 68
17458: PPUSH
17459: LD_VAR 0 1
17463: PPUSH
17464: LD_EXP 68
17468: PUSH
17469: LD_VAR 0 1
17473: ARRAY
17474: PPUSH
17475: LD_VAR 0 2
17479: PPUSH
17480: CALL_OW 3
17484: PPUSH
17485: CALL_OW 1
17489: ST_TO_ADDR
// end ; end ;
17490: GO 17241
17492: POP
17493: POP
// end ;
17494: GO 17159
17496: POP
17497: POP
// end ;
17498: PPOPN 4
17500: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17501: LD_INT 0
17503: PPUSH
17504: PPUSH
// result := false ;
17505: LD_ADDR_VAR 0 4
17509: PUSH
17510: LD_INT 0
17512: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17513: LD_VAR 0 1
17517: PPUSH
17518: CALL_OW 264
17522: PUSH
17523: LD_EXP 77
17527: EQUAL
17528: NOT
17529: IFFALSE 17533
// exit ;
17531: GO 17773
// index := GetElementIndex ( minersList , unit ) ;
17533: LD_ADDR_VAR 0 5
17537: PUSH
17538: LD_EXP 67
17542: PPUSH
17543: LD_VAR 0 1
17547: PPUSH
17548: CALL 24125 0 2
17552: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17553: LD_EXP 68
17557: PUSH
17558: LD_VAR 0 5
17562: ARRAY
17563: PUSH
17564: LD_EXP 69
17568: GREATEREQUAL
17569: IFFALSE 17573
// exit ;
17571: GO 17773
// ComMoveXY ( unit , x , y ) ;
17573: LD_VAR 0 1
17577: PPUSH
17578: LD_VAR 0 2
17582: PPUSH
17583: LD_VAR 0 3
17587: PPUSH
17588: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17592: LD_INT 35
17594: PPUSH
17595: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17599: LD_VAR 0 1
17603: PPUSH
17604: LD_VAR 0 2
17608: PPUSH
17609: LD_VAR 0 3
17613: PPUSH
17614: CALL 54897 0 3
17618: NOT
17619: PUSH
17620: LD_VAR 0 1
17624: PPUSH
17625: CALL_OW 314
17629: AND
17630: IFFALSE 17634
// exit ;
17632: GO 17773
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17634: LD_VAR 0 2
17638: PPUSH
17639: LD_VAR 0 3
17643: PPUSH
17644: CALL_OW 428
17648: PUSH
17649: LD_VAR 0 1
17653: EQUAL
17654: PUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 314
17664: NOT
17665: AND
17666: IFFALSE 17592
// PlaySoundXY ( x , y , PlantMine ) ;
17668: LD_VAR 0 2
17672: PPUSH
17673: LD_VAR 0 3
17677: PPUSH
17678: LD_STRING PlantMine
17680: PPUSH
17681: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17685: LD_VAR 0 2
17689: PPUSH
17690: LD_VAR 0 3
17694: PPUSH
17695: LD_VAR 0 1
17699: PPUSH
17700: CALL_OW 255
17704: PPUSH
17705: LD_INT 0
17707: PPUSH
17708: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17712: LD_ADDR_EXP 68
17716: PUSH
17717: LD_EXP 68
17721: PPUSH
17722: LD_VAR 0 5
17726: PUSH
17727: LD_EXP 68
17731: PUSH
17732: LD_VAR 0 5
17736: ARRAY
17737: PUSH
17738: LD_INT 1
17740: PLUS
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PPUSH
17746: LD_VAR 0 2
17750: PUSH
17751: LD_VAR 0 3
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PPUSH
17760: CALL 24340 0 3
17764: ST_TO_ADDR
// result := true ;
17765: LD_ADDR_VAR 0 4
17769: PUSH
17770: LD_INT 1
17772: ST_TO_ADDR
// end ;
17773: LD_VAR 0 4
17777: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17778: LD_INT 0
17780: PPUSH
17781: PPUSH
17782: PPUSH
// if not unit in minersList then
17783: LD_VAR 0 1
17787: PUSH
17788: LD_EXP 67
17792: IN
17793: NOT
17794: IFFALSE 17798
// exit ;
17796: GO 18190
// index := GetElementIndex ( minersList , unit ) ;
17798: LD_ADDR_VAR 0 6
17802: PUSH
17803: LD_EXP 67
17807: PPUSH
17808: LD_VAR 0 1
17812: PPUSH
17813: CALL 24125 0 2
17817: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17818: LD_ADDR_VAR 0 5
17822: PUSH
17823: DOUBLE
17824: LD_EXP 68
17828: PUSH
17829: LD_VAR 0 6
17833: ARRAY
17834: INC
17835: ST_TO_ADDR
17836: LD_INT 1
17838: PUSH
17839: FOR_DOWNTO
17840: IFFALSE 18001
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17842: LD_EXP 68
17846: PUSH
17847: LD_VAR 0 6
17851: ARRAY
17852: PUSH
17853: LD_VAR 0 5
17857: ARRAY
17858: PUSH
17859: LD_INT 1
17861: ARRAY
17862: PUSH
17863: LD_VAR 0 2
17867: EQUAL
17868: PUSH
17869: LD_EXP 68
17873: PUSH
17874: LD_VAR 0 6
17878: ARRAY
17879: PUSH
17880: LD_VAR 0 5
17884: ARRAY
17885: PUSH
17886: LD_INT 2
17888: ARRAY
17889: PUSH
17890: LD_VAR 0 3
17894: EQUAL
17895: AND
17896: IFFALSE 17999
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17898: LD_EXP 68
17902: PUSH
17903: LD_VAR 0 6
17907: ARRAY
17908: PUSH
17909: LD_VAR 0 5
17913: ARRAY
17914: PUSH
17915: LD_INT 1
17917: ARRAY
17918: PPUSH
17919: LD_EXP 68
17923: PUSH
17924: LD_VAR 0 6
17928: ARRAY
17929: PUSH
17930: LD_VAR 0 5
17934: ARRAY
17935: PUSH
17936: LD_INT 2
17938: ARRAY
17939: PPUSH
17940: LD_VAR 0 1
17944: PPUSH
17945: CALL_OW 255
17949: PPUSH
17950: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17954: LD_ADDR_EXP 68
17958: PUSH
17959: LD_EXP 68
17963: PPUSH
17964: LD_VAR 0 6
17968: PPUSH
17969: LD_EXP 68
17973: PUSH
17974: LD_VAR 0 6
17978: ARRAY
17979: PPUSH
17980: LD_VAR 0 5
17984: PPUSH
17985: CALL_OW 3
17989: PPUSH
17990: CALL_OW 1
17994: ST_TO_ADDR
// exit ;
17995: POP
17996: POP
17997: GO 18190
// end ; end ;
17999: GO 17839
18001: POP
18002: POP
// for i := minerMinesList [ index ] downto 1 do
18003: LD_ADDR_VAR 0 5
18007: PUSH
18008: DOUBLE
18009: LD_EXP 68
18013: PUSH
18014: LD_VAR 0 6
18018: ARRAY
18019: INC
18020: ST_TO_ADDR
18021: LD_INT 1
18023: PUSH
18024: FOR_DOWNTO
18025: IFFALSE 18188
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18027: LD_EXP 68
18031: PUSH
18032: LD_VAR 0 6
18036: ARRAY
18037: PUSH
18038: LD_VAR 0 5
18042: ARRAY
18043: PUSH
18044: LD_INT 1
18046: ARRAY
18047: PPUSH
18048: LD_EXP 68
18052: PUSH
18053: LD_VAR 0 6
18057: ARRAY
18058: PUSH
18059: LD_VAR 0 5
18063: ARRAY
18064: PUSH
18065: LD_INT 2
18067: ARRAY
18068: PPUSH
18069: LD_VAR 0 2
18073: PPUSH
18074: LD_VAR 0 3
18078: PPUSH
18079: CALL_OW 298
18083: PUSH
18084: LD_INT 6
18086: LESS
18087: IFFALSE 18186
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18089: LD_EXP 68
18093: PUSH
18094: LD_VAR 0 6
18098: ARRAY
18099: PUSH
18100: LD_VAR 0 5
18104: ARRAY
18105: PUSH
18106: LD_INT 1
18108: ARRAY
18109: PPUSH
18110: LD_EXP 68
18114: PUSH
18115: LD_VAR 0 6
18119: ARRAY
18120: PUSH
18121: LD_VAR 0 5
18125: ARRAY
18126: PUSH
18127: LD_INT 2
18129: ARRAY
18130: PPUSH
18131: LD_VAR 0 1
18135: PPUSH
18136: CALL_OW 255
18140: PPUSH
18141: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18145: LD_ADDR_EXP 68
18149: PUSH
18150: LD_EXP 68
18154: PPUSH
18155: LD_VAR 0 6
18159: PPUSH
18160: LD_EXP 68
18164: PUSH
18165: LD_VAR 0 6
18169: ARRAY
18170: PPUSH
18171: LD_VAR 0 5
18175: PPUSH
18176: CALL_OW 3
18180: PPUSH
18181: CALL_OW 1
18185: ST_TO_ADDR
// end ; end ;
18186: GO 18024
18188: POP
18189: POP
// end ;
18190: LD_VAR 0 4
18194: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18195: LD_INT 0
18197: PPUSH
18198: PPUSH
18199: PPUSH
18200: PPUSH
18201: PPUSH
18202: PPUSH
18203: PPUSH
18204: PPUSH
18205: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 264
18215: PUSH
18216: LD_EXP 77
18220: EQUAL
18221: NOT
18222: PUSH
18223: LD_VAR 0 1
18227: PUSH
18228: LD_EXP 67
18232: IN
18233: NOT
18234: OR
18235: IFFALSE 18239
// exit ;
18237: GO 18561
// index := GetElementIndex ( minersList , unit ) ;
18239: LD_ADDR_VAR 0 6
18243: PUSH
18244: LD_EXP 67
18248: PPUSH
18249: LD_VAR 0 1
18253: PPUSH
18254: CALL 24125 0 2
18258: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18259: LD_ADDR_VAR 0 8
18263: PUSH
18264: LD_EXP 69
18268: PUSH
18269: LD_EXP 68
18273: PUSH
18274: LD_VAR 0 6
18278: ARRAY
18279: MINUS
18280: ST_TO_ADDR
// if not minesFreeAmount then
18281: LD_VAR 0 8
18285: NOT
18286: IFFALSE 18290
// exit ;
18288: GO 18561
// tmp := [ ] ;
18290: LD_ADDR_VAR 0 7
18294: PUSH
18295: EMPTY
18296: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18297: LD_ADDR_VAR 0 5
18301: PUSH
18302: DOUBLE
18303: LD_INT 1
18305: DEC
18306: ST_TO_ADDR
18307: LD_VAR 0 8
18311: PUSH
18312: FOR_TO
18313: IFFALSE 18508
// begin _d := rand ( 0 , 5 ) ;
18315: LD_ADDR_VAR 0 11
18319: PUSH
18320: LD_INT 0
18322: PPUSH
18323: LD_INT 5
18325: PPUSH
18326: CALL_OW 12
18330: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18331: LD_ADDR_VAR 0 12
18335: PUSH
18336: LD_INT 2
18338: PPUSH
18339: LD_INT 6
18341: PPUSH
18342: CALL_OW 12
18346: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18347: LD_ADDR_VAR 0 9
18351: PUSH
18352: LD_VAR 0 2
18356: PPUSH
18357: LD_VAR 0 11
18361: PPUSH
18362: LD_VAR 0 12
18366: PPUSH
18367: CALL_OW 272
18371: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18372: LD_ADDR_VAR 0 10
18376: PUSH
18377: LD_VAR 0 3
18381: PPUSH
18382: LD_VAR 0 11
18386: PPUSH
18387: LD_VAR 0 12
18391: PPUSH
18392: CALL_OW 273
18396: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18397: LD_VAR 0 9
18401: PPUSH
18402: LD_VAR 0 10
18406: PPUSH
18407: CALL_OW 488
18411: PUSH
18412: LD_VAR 0 9
18416: PUSH
18417: LD_VAR 0 10
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_VAR 0 7
18430: IN
18431: NOT
18432: AND
18433: PUSH
18434: LD_VAR 0 9
18438: PPUSH
18439: LD_VAR 0 10
18443: PPUSH
18444: CALL_OW 458
18448: NOT
18449: AND
18450: IFFALSE 18492
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18452: LD_ADDR_VAR 0 7
18456: PUSH
18457: LD_VAR 0 7
18461: PPUSH
18462: LD_VAR 0 7
18466: PUSH
18467: LD_INT 1
18469: PLUS
18470: PPUSH
18471: LD_VAR 0 9
18475: PUSH
18476: LD_VAR 0 10
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PPUSH
18485: CALL_OW 1
18489: ST_TO_ADDR
18490: GO 18506
// i := i - 1 ;
18492: LD_ADDR_VAR 0 5
18496: PUSH
18497: LD_VAR 0 5
18501: PUSH
18502: LD_INT 1
18504: MINUS
18505: ST_TO_ADDR
// end ;
18506: GO 18312
18508: POP
18509: POP
// for i in tmp do
18510: LD_ADDR_VAR 0 5
18514: PUSH
18515: LD_VAR 0 7
18519: PUSH
18520: FOR_IN
18521: IFFALSE 18559
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18523: LD_VAR 0 1
18527: PPUSH
18528: LD_VAR 0 5
18532: PUSH
18533: LD_INT 1
18535: ARRAY
18536: PPUSH
18537: LD_VAR 0 5
18541: PUSH
18542: LD_INT 2
18544: ARRAY
18545: PPUSH
18546: CALL 17501 0 3
18550: NOT
18551: IFFALSE 18557
// exit ;
18553: POP
18554: POP
18555: GO 18561
18557: GO 18520
18559: POP
18560: POP
// end ;
18561: LD_VAR 0 4
18565: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18566: LD_INT 0
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
18572: PPUSH
18573: PPUSH
18574: PPUSH
// if not GetClass ( unit ) = class_sniper then
18575: LD_VAR 0 1
18579: PPUSH
18580: CALL_OW 257
18584: PUSH
18585: LD_INT 5
18587: EQUAL
18588: NOT
18589: IFFALSE 18593
// exit ;
18591: GO 18981
// dist := 8 ;
18593: LD_ADDR_VAR 0 5
18597: PUSH
18598: LD_INT 8
18600: ST_TO_ADDR
// viewRange := 12 ;
18601: LD_ADDR_VAR 0 7
18605: PUSH
18606: LD_INT 12
18608: ST_TO_ADDR
// side := GetSide ( unit ) ;
18609: LD_ADDR_VAR 0 6
18613: PUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 255
18623: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18624: LD_INT 61
18626: PPUSH
18627: LD_VAR 0 6
18631: PPUSH
18632: CALL_OW 321
18636: PUSH
18637: LD_INT 2
18639: EQUAL
18640: IFFALSE 18650
// viewRange := 16 ;
18642: LD_ADDR_VAR 0 7
18646: PUSH
18647: LD_INT 16
18649: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18650: LD_VAR 0 1
18654: PPUSH
18655: LD_VAR 0 2
18659: PPUSH
18660: LD_VAR 0 3
18664: PPUSH
18665: CALL_OW 297
18669: PUSH
18670: LD_VAR 0 5
18674: GREATER
18675: IFFALSE 18754
// begin ComMoveXY ( unit , x , y ) ;
18677: LD_VAR 0 1
18681: PPUSH
18682: LD_VAR 0 2
18686: PPUSH
18687: LD_VAR 0 3
18691: PPUSH
18692: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18696: LD_INT 35
18698: PPUSH
18699: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18703: LD_VAR 0 1
18707: PPUSH
18708: LD_VAR 0 2
18712: PPUSH
18713: LD_VAR 0 3
18717: PPUSH
18718: CALL 54897 0 3
18722: NOT
18723: IFFALSE 18727
// exit ;
18725: GO 18981
// until GetDistUnitXY ( unit , x , y ) < dist ;
18727: LD_VAR 0 1
18731: PPUSH
18732: LD_VAR 0 2
18736: PPUSH
18737: LD_VAR 0 3
18741: PPUSH
18742: CALL_OW 297
18746: PUSH
18747: LD_VAR 0 5
18751: LESS
18752: IFFALSE 18696
// end ; ComTurnXY ( unit , x , y ) ;
18754: LD_VAR 0 1
18758: PPUSH
18759: LD_VAR 0 2
18763: PPUSH
18764: LD_VAR 0 3
18768: PPUSH
18769: CALL_OW 118
// wait ( 5 ) ;
18773: LD_INT 5
18775: PPUSH
18776: CALL_OW 67
// _d := GetDir ( unit ) ;
18780: LD_ADDR_VAR 0 10
18784: PUSH
18785: LD_VAR 0 1
18789: PPUSH
18790: CALL_OW 254
18794: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18795: LD_ADDR_VAR 0 8
18799: PUSH
18800: LD_VAR 0 1
18804: PPUSH
18805: CALL_OW 250
18809: PPUSH
18810: LD_VAR 0 10
18814: PPUSH
18815: LD_VAR 0 5
18819: PPUSH
18820: CALL_OW 272
18824: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18825: LD_ADDR_VAR 0 9
18829: PUSH
18830: LD_VAR 0 1
18834: PPUSH
18835: CALL_OW 251
18839: PPUSH
18840: LD_VAR 0 10
18844: PPUSH
18845: LD_VAR 0 5
18849: PPUSH
18850: CALL_OW 273
18854: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18855: LD_VAR 0 8
18859: PPUSH
18860: LD_VAR 0 9
18864: PPUSH
18865: CALL_OW 488
18869: NOT
18870: IFFALSE 18874
// exit ;
18872: GO 18981
// ComAnimCustom ( unit , 1 ) ;
18874: LD_VAR 0 1
18878: PPUSH
18879: LD_INT 1
18881: PPUSH
18882: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18886: LD_VAR 0 8
18890: PPUSH
18891: LD_VAR 0 9
18895: PPUSH
18896: LD_VAR 0 6
18900: PPUSH
18901: LD_VAR 0 7
18905: PPUSH
18906: CALL_OW 330
// repeat wait ( 1 ) ;
18910: LD_INT 1
18912: PPUSH
18913: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: CALL_OW 316
18926: PUSH
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL_OW 314
18936: OR
18937: PUSH
18938: LD_VAR 0 1
18942: PPUSH
18943: CALL_OW 302
18947: NOT
18948: OR
18949: PUSH
18950: LD_VAR 0 1
18954: PPUSH
18955: CALL_OW 301
18959: OR
18960: IFFALSE 18910
// RemoveSeeing ( _x , _y , side ) ;
18962: LD_VAR 0 8
18966: PPUSH
18967: LD_VAR 0 9
18971: PPUSH
18972: LD_VAR 0 6
18976: PPUSH
18977: CALL_OW 331
// end ; end_of_file
18981: LD_VAR 0 4
18985: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
18986: LD_VAR 0 1
18990: PPUSH
18991: LD_VAR 0 2
18995: PPUSH
18996: LD_VAR 0 3
19000: PPUSH
19001: LD_VAR 0 4
19005: PPUSH
19006: LD_VAR 0 5
19010: PPUSH
19011: LD_VAR 0 6
19015: PPUSH
19016: CALL 59 0 6
// end ; end_of_file
19020: PPOPN 6
19022: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
19023: LD_VAR 0 1
19027: PUSH
19028: LD_INT 200
19030: DOUBLE
19031: GREATEREQUAL
19032: IFFALSE 19040
19034: LD_INT 299
19036: DOUBLE
19037: LESSEQUAL
19038: IFTRUE 19042
19040: GO 19074
19042: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19043: LD_VAR 0 1
19047: PPUSH
19048: LD_VAR 0 2
19052: PPUSH
19053: LD_VAR 0 3
19057: PPUSH
19058: LD_VAR 0 4
19062: PPUSH
19063: LD_VAR 0 5
19067: PPUSH
19068: CALL 14724 0 5
19072: GO 19151
19074: LD_INT 300
19076: DOUBLE
19077: GREATEREQUAL
19078: IFFALSE 19086
19080: LD_INT 399
19082: DOUBLE
19083: LESSEQUAL
19084: IFTRUE 19088
19086: GO 19150
19088: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
19089: LD_VAR 0 1
19093: PPUSH
19094: LD_VAR 0 2
19098: PPUSH
19099: LD_VAR 0 3
19103: PPUSH
19104: LD_VAR 0 4
19108: PPUSH
19109: LD_VAR 0 5
19113: PPUSH
19114: LD_VAR 0 6
19118: PPUSH
19119: LD_VAR 0 7
19123: PPUSH
19124: LD_VAR 0 8
19128: PPUSH
19129: LD_VAR 0 9
19133: PPUSH
19134: LD_VAR 0 10
19138: PPUSH
19139: LD_VAR 0 11
19143: PPUSH
19144: CALL 12366 0 11
19148: GO 19151
19150: POP
// end ;
19151: PPOPN 11
19153: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
19154: LD_VAR 0 1
19158: PPUSH
19159: LD_VAR 0 2
19163: PPUSH
19164: LD_VAR 0 3
19168: PPUSH
19169: LD_VAR 0 4
19173: PPUSH
19174: LD_VAR 0 5
19178: PPUSH
19179: CALL 14460 0 5
// end ; end_of_file
19183: PPOPN 5
19185: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19186: LD_INT 0
19188: PPUSH
// ar_miner := 81 ;
19189: LD_ADDR_EXP 77
19193: PUSH
19194: LD_INT 81
19196: ST_TO_ADDR
// ar_crane := 88 ;
19197: LD_ADDR_EXP 76
19201: PUSH
19202: LD_INT 88
19204: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19205: LD_ADDR_EXP 71
19209: PUSH
19210: LD_INT 89
19212: ST_TO_ADDR
// us_hack := 99 ;
19213: LD_ADDR_EXP 72
19217: PUSH
19218: LD_INT 99
19220: ST_TO_ADDR
// us_artillery := 97 ;
19221: LD_ADDR_EXP 73
19225: PUSH
19226: LD_INT 97
19228: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19229: LD_ADDR_EXP 74
19233: PUSH
19234: LD_INT 91
19236: ST_TO_ADDR
// ar_mortar := 92 ;
19237: LD_ADDR_EXP 75
19241: PUSH
19242: LD_INT 92
19244: ST_TO_ADDR
// ru_radar := 98 ;
19245: LD_ADDR_EXP 70
19249: PUSH
19250: LD_INT 98
19252: ST_TO_ADDR
// tech_Artillery := 80 ;
19253: LD_ADDR_EXP 78
19257: PUSH
19258: LD_INT 80
19260: ST_TO_ADDR
// tech_RadMat := 81 ;
19261: LD_ADDR_EXP 79
19265: PUSH
19266: LD_INT 81
19268: ST_TO_ADDR
// tech_BasicTools := 82 ;
19269: LD_ADDR_EXP 80
19273: PUSH
19274: LD_INT 82
19276: ST_TO_ADDR
// tech_Cargo := 83 ;
19277: LD_ADDR_EXP 81
19281: PUSH
19282: LD_INT 83
19284: ST_TO_ADDR
// tech_Track := 84 ;
19285: LD_ADDR_EXP 82
19289: PUSH
19290: LD_INT 84
19292: ST_TO_ADDR
// tech_Crane := 85 ;
19293: LD_ADDR_EXP 83
19297: PUSH
19298: LD_INT 85
19300: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19301: LD_ADDR_EXP 84
19305: PUSH
19306: LD_INT 86
19308: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19309: LD_ADDR_EXP 85
19313: PUSH
19314: LD_INT 87
19316: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19317: LD_ADDR_EXP 86
19321: PUSH
19322: LD_INT 88
19324: ST_TO_ADDR
// class_mastodont := 31 ;
19325: LD_ADDR_EXP 87
19329: PUSH
19330: LD_INT 31
19332: ST_TO_ADDR
// class_horse := 21 ;
19333: LD_ADDR_EXP 88
19337: PUSH
19338: LD_INT 21
19340: ST_TO_ADDR
// end ;
19341: LD_VAR 0 1
19345: RET
// every 1 do
19346: GO 19348
19348: DISABLE
// InitGlobalVariables ; end_of_file
19349: CALL 19186 0 0
19353: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19354: LD_INT 0
19356: PPUSH
19357: PPUSH
// if exist_mode then
19358: LD_VAR 0 2
19362: IFFALSE 19387
// unit := CreateCharacter ( prefix & ident ) else
19364: LD_ADDR_VAR 0 5
19368: PUSH
19369: LD_VAR 0 3
19373: PUSH
19374: LD_VAR 0 1
19378: STR
19379: PPUSH
19380: CALL_OW 34
19384: ST_TO_ADDR
19385: GO 19402
// unit := NewCharacter ( ident ) ;
19387: LD_ADDR_VAR 0 5
19391: PUSH
19392: LD_VAR 0 1
19396: PPUSH
19397: CALL_OW 25
19401: ST_TO_ADDR
// result := unit ;
19402: LD_ADDR_VAR 0 4
19406: PUSH
19407: LD_VAR 0 5
19411: ST_TO_ADDR
// end ;
19412: LD_VAR 0 4
19416: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19417: LD_INT 0
19419: PPUSH
19420: PPUSH
// if not side or not nation then
19421: LD_VAR 0 1
19425: NOT
19426: PUSH
19427: LD_VAR 0 2
19431: NOT
19432: OR
19433: IFFALSE 19437
// exit ;
19435: GO 20205
// case nation of nation_american :
19437: LD_VAR 0 2
19441: PUSH
19442: LD_INT 1
19444: DOUBLE
19445: EQUAL
19446: IFTRUE 19450
19448: GO 19664
19450: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19451: LD_ADDR_VAR 0 4
19455: PUSH
19456: LD_INT 35
19458: PUSH
19459: LD_INT 45
19461: PUSH
19462: LD_INT 46
19464: PUSH
19465: LD_INT 47
19467: PUSH
19468: LD_INT 82
19470: PUSH
19471: LD_INT 83
19473: PUSH
19474: LD_INT 84
19476: PUSH
19477: LD_INT 85
19479: PUSH
19480: LD_INT 86
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: LD_INT 2
19488: PUSH
19489: LD_INT 6
19491: PUSH
19492: LD_INT 15
19494: PUSH
19495: LD_INT 16
19497: PUSH
19498: LD_INT 7
19500: PUSH
19501: LD_INT 12
19503: PUSH
19504: LD_INT 13
19506: PUSH
19507: LD_INT 10
19509: PUSH
19510: LD_INT 14
19512: PUSH
19513: LD_INT 20
19515: PUSH
19516: LD_INT 21
19518: PUSH
19519: LD_INT 22
19521: PUSH
19522: LD_INT 25
19524: PUSH
19525: LD_INT 32
19527: PUSH
19528: LD_INT 27
19530: PUSH
19531: LD_INT 36
19533: PUSH
19534: LD_INT 69
19536: PUSH
19537: LD_INT 39
19539: PUSH
19540: LD_INT 34
19542: PUSH
19543: LD_INT 40
19545: PUSH
19546: LD_INT 48
19548: PUSH
19549: LD_INT 49
19551: PUSH
19552: LD_INT 50
19554: PUSH
19555: LD_INT 51
19557: PUSH
19558: LD_INT 52
19560: PUSH
19561: LD_INT 53
19563: PUSH
19564: LD_INT 54
19566: PUSH
19567: LD_INT 55
19569: PUSH
19570: LD_INT 56
19572: PUSH
19573: LD_INT 57
19575: PUSH
19576: LD_INT 58
19578: PUSH
19579: LD_INT 59
19581: PUSH
19582: LD_INT 60
19584: PUSH
19585: LD_INT 61
19587: PUSH
19588: LD_INT 62
19590: PUSH
19591: LD_INT 80
19593: PUSH
19594: LD_INT 82
19596: PUSH
19597: LD_INT 83
19599: PUSH
19600: LD_INT 84
19602: PUSH
19603: LD_INT 85
19605: PUSH
19606: LD_INT 86
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: ST_TO_ADDR
19662: GO 20129
19664: LD_INT 2
19666: DOUBLE
19667: EQUAL
19668: IFTRUE 19672
19670: GO 19898
19672: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
19673: LD_ADDR_VAR 0 4
19677: PUSH
19678: LD_INT 35
19680: PUSH
19681: LD_INT 45
19683: PUSH
19684: LD_INT 46
19686: PUSH
19687: LD_INT 47
19689: PUSH
19690: LD_INT 82
19692: PUSH
19693: LD_INT 83
19695: PUSH
19696: LD_INT 84
19698: PUSH
19699: LD_INT 85
19701: PUSH
19702: LD_INT 87
19704: PUSH
19705: LD_INT 70
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: LD_INT 11
19713: PUSH
19714: LD_INT 3
19716: PUSH
19717: LD_INT 4
19719: PUSH
19720: LD_INT 5
19722: PUSH
19723: LD_INT 6
19725: PUSH
19726: LD_INT 15
19728: PUSH
19729: LD_INT 18
19731: PUSH
19732: LD_INT 7
19734: PUSH
19735: LD_INT 17
19737: PUSH
19738: LD_INT 8
19740: PUSH
19741: LD_INT 20
19743: PUSH
19744: LD_INT 21
19746: PUSH
19747: LD_INT 22
19749: PUSH
19750: LD_INT 72
19752: PUSH
19753: LD_INT 26
19755: PUSH
19756: LD_INT 69
19758: PUSH
19759: LD_INT 39
19761: PUSH
19762: LD_INT 40
19764: PUSH
19765: LD_INT 41
19767: PUSH
19768: LD_INT 42
19770: PUSH
19771: LD_INT 43
19773: PUSH
19774: LD_INT 48
19776: PUSH
19777: LD_INT 49
19779: PUSH
19780: LD_INT 50
19782: PUSH
19783: LD_INT 51
19785: PUSH
19786: LD_INT 52
19788: PUSH
19789: LD_INT 53
19791: PUSH
19792: LD_INT 54
19794: PUSH
19795: LD_INT 55
19797: PUSH
19798: LD_INT 56
19800: PUSH
19801: LD_INT 60
19803: PUSH
19804: LD_INT 61
19806: PUSH
19807: LD_INT 62
19809: PUSH
19810: LD_INT 66
19812: PUSH
19813: LD_INT 67
19815: PUSH
19816: LD_INT 68
19818: PUSH
19819: LD_INT 81
19821: PUSH
19822: LD_INT 82
19824: PUSH
19825: LD_INT 83
19827: PUSH
19828: LD_INT 84
19830: PUSH
19831: LD_INT 85
19833: PUSH
19834: LD_INT 87
19836: PUSH
19837: LD_INT 88
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: ST_TO_ADDR
19896: GO 20129
19898: LD_INT 3
19900: DOUBLE
19901: EQUAL
19902: IFTRUE 19906
19904: GO 20128
19906: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19907: LD_ADDR_VAR 0 4
19911: PUSH
19912: LD_INT 46
19914: PUSH
19915: LD_INT 47
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 82
19926: PUSH
19927: LD_INT 83
19929: PUSH
19930: LD_INT 84
19932: PUSH
19933: LD_INT 85
19935: PUSH
19936: LD_INT 86
19938: PUSH
19939: LD_INT 11
19941: PUSH
19942: LD_INT 9
19944: PUSH
19945: LD_INT 20
19947: PUSH
19948: LD_INT 19
19950: PUSH
19951: LD_INT 21
19953: PUSH
19954: LD_INT 24
19956: PUSH
19957: LD_INT 22
19959: PUSH
19960: LD_INT 25
19962: PUSH
19963: LD_INT 28
19965: PUSH
19966: LD_INT 29
19968: PUSH
19969: LD_INT 30
19971: PUSH
19972: LD_INT 31
19974: PUSH
19975: LD_INT 37
19977: PUSH
19978: LD_INT 38
19980: PUSH
19981: LD_INT 32
19983: PUSH
19984: LD_INT 27
19986: PUSH
19987: LD_INT 33
19989: PUSH
19990: LD_INT 69
19992: PUSH
19993: LD_INT 39
19995: PUSH
19996: LD_INT 34
19998: PUSH
19999: LD_INT 40
20001: PUSH
20002: LD_INT 71
20004: PUSH
20005: LD_INT 23
20007: PUSH
20008: LD_INT 44
20010: PUSH
20011: LD_INT 48
20013: PUSH
20014: LD_INT 49
20016: PUSH
20017: LD_INT 50
20019: PUSH
20020: LD_INT 51
20022: PUSH
20023: LD_INT 52
20025: PUSH
20026: LD_INT 53
20028: PUSH
20029: LD_INT 54
20031: PUSH
20032: LD_INT 55
20034: PUSH
20035: LD_INT 56
20037: PUSH
20038: LD_INT 57
20040: PUSH
20041: LD_INT 58
20043: PUSH
20044: LD_INT 59
20046: PUSH
20047: LD_INT 63
20049: PUSH
20050: LD_INT 64
20052: PUSH
20053: LD_INT 65
20055: PUSH
20056: LD_INT 82
20058: PUSH
20059: LD_INT 83
20061: PUSH
20062: LD_INT 84
20064: PUSH
20065: LD_INT 85
20067: PUSH
20068: LD_INT 86
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: ST_TO_ADDR
20126: GO 20129
20128: POP
// if state > - 1 and state < 3 then
20129: LD_VAR 0 3
20133: PUSH
20134: LD_INT 1
20136: NEG
20137: GREATER
20138: PUSH
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 3
20146: LESS
20147: AND
20148: IFFALSE 20205
// for i in result do
20150: LD_ADDR_VAR 0 5
20154: PUSH
20155: LD_VAR 0 4
20159: PUSH
20160: FOR_IN
20161: IFFALSE 20203
// if GetTech ( i , side ) <> state then
20163: LD_VAR 0 5
20167: PPUSH
20168: LD_VAR 0 1
20172: PPUSH
20173: CALL_OW 321
20177: PUSH
20178: LD_VAR 0 3
20182: NONEQUAL
20183: IFFALSE 20201
// result := result diff i ;
20185: LD_ADDR_VAR 0 4
20189: PUSH
20190: LD_VAR 0 4
20194: PUSH
20195: LD_VAR 0 5
20199: DIFF
20200: ST_TO_ADDR
20201: GO 20160
20203: POP
20204: POP
// end ;
20205: LD_VAR 0 4
20209: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20210: LD_INT 0
20212: PPUSH
20213: PPUSH
20214: PPUSH
// result := true ;
20215: LD_ADDR_VAR 0 3
20219: PUSH
20220: LD_INT 1
20222: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20223: LD_ADDR_VAR 0 5
20227: PUSH
20228: LD_VAR 0 2
20232: PPUSH
20233: CALL_OW 480
20237: ST_TO_ADDR
// if not tmp then
20238: LD_VAR 0 5
20242: NOT
20243: IFFALSE 20247
// exit ;
20245: GO 20296
// for i in tmp do
20247: LD_ADDR_VAR 0 4
20251: PUSH
20252: LD_VAR 0 5
20256: PUSH
20257: FOR_IN
20258: IFFALSE 20294
// if GetTech ( i , side ) <> state_researched then
20260: LD_VAR 0 4
20264: PPUSH
20265: LD_VAR 0 1
20269: PPUSH
20270: CALL_OW 321
20274: PUSH
20275: LD_INT 2
20277: NONEQUAL
20278: IFFALSE 20292
// begin result := false ;
20280: LD_ADDR_VAR 0 3
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// exit ;
20288: POP
20289: POP
20290: GO 20296
// end ;
20292: GO 20257
20294: POP
20295: POP
// end ;
20296: LD_VAR 0 3
20300: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20301: LD_INT 0
20303: PPUSH
20304: PPUSH
20305: PPUSH
20306: PPUSH
20307: PPUSH
20308: PPUSH
20309: PPUSH
20310: PPUSH
20311: PPUSH
20312: PPUSH
20313: PPUSH
20314: PPUSH
20315: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20316: LD_VAR 0 1
20320: NOT
20321: PUSH
20322: LD_VAR 0 1
20326: PPUSH
20327: CALL_OW 257
20331: PUSH
20332: LD_INT 9
20334: NONEQUAL
20335: OR
20336: IFFALSE 20340
// exit ;
20338: GO 20913
// side := GetSide ( unit ) ;
20340: LD_ADDR_VAR 0 9
20344: PUSH
20345: LD_VAR 0 1
20349: PPUSH
20350: CALL_OW 255
20354: ST_TO_ADDR
// tech_space := tech_spacanom ;
20355: LD_ADDR_VAR 0 12
20359: PUSH
20360: LD_INT 29
20362: ST_TO_ADDR
// tech_time := tech_taurad ;
20363: LD_ADDR_VAR 0 13
20367: PUSH
20368: LD_INT 28
20370: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20371: LD_ADDR_VAR 0 11
20375: PUSH
20376: LD_VAR 0 1
20380: PPUSH
20381: CALL_OW 310
20385: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20386: LD_VAR 0 11
20390: PPUSH
20391: CALL_OW 247
20395: PUSH
20396: LD_INT 2
20398: EQUAL
20399: IFFALSE 20403
// exit ;
20401: GO 20913
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20403: LD_ADDR_VAR 0 8
20407: PUSH
20408: LD_INT 81
20410: PUSH
20411: LD_VAR 0 9
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 3
20422: PUSH
20423: LD_INT 21
20425: PUSH
20426: LD_INT 3
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PPUSH
20441: CALL_OW 69
20445: ST_TO_ADDR
// if not tmp then
20446: LD_VAR 0 8
20450: NOT
20451: IFFALSE 20455
// exit ;
20453: GO 20913
// if in_unit then
20455: LD_VAR 0 11
20459: IFFALSE 20483
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20461: LD_ADDR_VAR 0 10
20465: PUSH
20466: LD_VAR 0 8
20470: PPUSH
20471: LD_VAR 0 11
20475: PPUSH
20476: CALL_OW 74
20480: ST_TO_ADDR
20481: GO 20503
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20483: LD_ADDR_VAR 0 10
20487: PUSH
20488: LD_VAR 0 8
20492: PPUSH
20493: LD_VAR 0 1
20497: PPUSH
20498: CALL_OW 74
20502: ST_TO_ADDR
// if not enemy then
20503: LD_VAR 0 10
20507: NOT
20508: IFFALSE 20512
// exit ;
20510: GO 20913
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20512: LD_VAR 0 11
20516: PUSH
20517: LD_VAR 0 11
20521: PPUSH
20522: LD_VAR 0 10
20526: PPUSH
20527: CALL_OW 296
20531: PUSH
20532: LD_INT 13
20534: GREATER
20535: AND
20536: PUSH
20537: LD_VAR 0 1
20541: PPUSH
20542: LD_VAR 0 10
20546: PPUSH
20547: CALL_OW 296
20551: PUSH
20552: LD_INT 12
20554: GREATER
20555: OR
20556: IFFALSE 20560
// exit ;
20558: GO 20913
// missile := [ 1 ] ;
20560: LD_ADDR_VAR 0 14
20564: PUSH
20565: LD_INT 1
20567: PUSH
20568: EMPTY
20569: LIST
20570: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20571: LD_VAR 0 9
20575: PPUSH
20576: LD_VAR 0 12
20580: PPUSH
20581: CALL_OW 325
20585: IFFALSE 20614
// missile := Insert ( missile , missile + 1 , 2 ) ;
20587: LD_ADDR_VAR 0 14
20591: PUSH
20592: LD_VAR 0 14
20596: PPUSH
20597: LD_VAR 0 14
20601: PUSH
20602: LD_INT 1
20604: PLUS
20605: PPUSH
20606: LD_INT 2
20608: PPUSH
20609: CALL_OW 2
20613: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20614: LD_VAR 0 9
20618: PPUSH
20619: LD_VAR 0 13
20623: PPUSH
20624: CALL_OW 325
20628: PUSH
20629: LD_VAR 0 10
20633: PPUSH
20634: CALL_OW 255
20638: PPUSH
20639: LD_VAR 0 13
20643: PPUSH
20644: CALL_OW 325
20648: NOT
20649: AND
20650: IFFALSE 20679
// missile := Insert ( missile , missile + 1 , 3 ) ;
20652: LD_ADDR_VAR 0 14
20656: PUSH
20657: LD_VAR 0 14
20661: PPUSH
20662: LD_VAR 0 14
20666: PUSH
20667: LD_INT 1
20669: PLUS
20670: PPUSH
20671: LD_INT 3
20673: PPUSH
20674: CALL_OW 2
20678: ST_TO_ADDR
// if missile < 2 then
20679: LD_VAR 0 14
20683: PUSH
20684: LD_INT 2
20686: LESS
20687: IFFALSE 20691
// exit ;
20689: GO 20913
// x := GetX ( enemy ) ;
20691: LD_ADDR_VAR 0 4
20695: PUSH
20696: LD_VAR 0 10
20700: PPUSH
20701: CALL_OW 250
20705: ST_TO_ADDR
// y := GetY ( enemy ) ;
20706: LD_ADDR_VAR 0 5
20710: PUSH
20711: LD_VAR 0 10
20715: PPUSH
20716: CALL_OW 251
20720: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20721: LD_ADDR_VAR 0 6
20725: PUSH
20726: LD_VAR 0 4
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PPUSH
20735: LD_INT 1
20737: PPUSH
20738: CALL_OW 12
20742: PLUS
20743: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20744: LD_ADDR_VAR 0 7
20748: PUSH
20749: LD_VAR 0 5
20753: PUSH
20754: LD_INT 1
20756: NEG
20757: PPUSH
20758: LD_INT 1
20760: PPUSH
20761: CALL_OW 12
20765: PLUS
20766: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20767: LD_VAR 0 6
20771: PPUSH
20772: LD_VAR 0 7
20776: PPUSH
20777: CALL_OW 488
20781: NOT
20782: IFFALSE 20804
// begin _x := x ;
20784: LD_ADDR_VAR 0 6
20788: PUSH
20789: LD_VAR 0 4
20793: ST_TO_ADDR
// _y := y ;
20794: LD_ADDR_VAR 0 7
20798: PUSH
20799: LD_VAR 0 5
20803: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20804: LD_ADDR_VAR 0 3
20808: PUSH
20809: LD_INT 1
20811: PPUSH
20812: LD_VAR 0 14
20816: PPUSH
20817: CALL_OW 12
20821: ST_TO_ADDR
// case i of 1 :
20822: LD_VAR 0 3
20826: PUSH
20827: LD_INT 1
20829: DOUBLE
20830: EQUAL
20831: IFTRUE 20835
20833: GO 20852
20835: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20836: LD_VAR 0 1
20840: PPUSH
20841: LD_VAR 0 10
20845: PPUSH
20846: CALL_OW 115
20850: GO 20913
20852: LD_INT 2
20854: DOUBLE
20855: EQUAL
20856: IFTRUE 20860
20858: GO 20882
20860: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20861: LD_VAR 0 1
20865: PPUSH
20866: LD_VAR 0 6
20870: PPUSH
20871: LD_VAR 0 7
20875: PPUSH
20876: CALL_OW 153
20880: GO 20913
20882: LD_INT 3
20884: DOUBLE
20885: EQUAL
20886: IFTRUE 20890
20888: GO 20912
20890: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20891: LD_VAR 0 1
20895: PPUSH
20896: LD_VAR 0 6
20900: PPUSH
20901: LD_VAR 0 7
20905: PPUSH
20906: CALL_OW 154
20910: GO 20913
20912: POP
// end ;
20913: LD_VAR 0 2
20917: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20918: LD_INT 0
20920: PPUSH
20921: PPUSH
20922: PPUSH
20923: PPUSH
20924: PPUSH
20925: PPUSH
// if not unit or not building then
20926: LD_VAR 0 1
20930: NOT
20931: PUSH
20932: LD_VAR 0 2
20936: NOT
20937: OR
20938: IFFALSE 20942
// exit ;
20940: GO 21100
// x := GetX ( building ) ;
20942: LD_ADDR_VAR 0 5
20946: PUSH
20947: LD_VAR 0 2
20951: PPUSH
20952: CALL_OW 250
20956: ST_TO_ADDR
// y := GetY ( building ) ;
20957: LD_ADDR_VAR 0 6
20961: PUSH
20962: LD_VAR 0 2
20966: PPUSH
20967: CALL_OW 251
20971: ST_TO_ADDR
// for i = 0 to 5 do
20972: LD_ADDR_VAR 0 4
20976: PUSH
20977: DOUBLE
20978: LD_INT 0
20980: DEC
20981: ST_TO_ADDR
20982: LD_INT 5
20984: PUSH
20985: FOR_TO
20986: IFFALSE 21098
// begin _x := ShiftX ( x , i , 3 ) ;
20988: LD_ADDR_VAR 0 7
20992: PUSH
20993: LD_VAR 0 5
20997: PPUSH
20998: LD_VAR 0 4
21002: PPUSH
21003: LD_INT 3
21005: PPUSH
21006: CALL_OW 272
21010: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21011: LD_ADDR_VAR 0 8
21015: PUSH
21016: LD_VAR 0 6
21020: PPUSH
21021: LD_VAR 0 4
21025: PPUSH
21026: LD_INT 3
21028: PPUSH
21029: CALL_OW 273
21033: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21034: LD_VAR 0 7
21038: PPUSH
21039: LD_VAR 0 8
21043: PPUSH
21044: CALL_OW 488
21048: NOT
21049: IFFALSE 21053
// continue ;
21051: GO 20985
// if HexInfo ( _x , _y ) = 0 then
21053: LD_VAR 0 7
21057: PPUSH
21058: LD_VAR 0 8
21062: PPUSH
21063: CALL_OW 428
21067: PUSH
21068: LD_INT 0
21070: EQUAL
21071: IFFALSE 21096
// begin ComMoveXY ( unit , _x , _y ) ;
21073: LD_VAR 0 1
21077: PPUSH
21078: LD_VAR 0 7
21082: PPUSH
21083: LD_VAR 0 8
21087: PPUSH
21088: CALL_OW 111
// exit ;
21092: POP
21093: POP
21094: GO 21100
// end ; end ;
21096: GO 20985
21098: POP
21099: POP
// end ;
21100: LD_VAR 0 3
21104: RET
// export function ScanBase ( side , base_area ) ; begin
21105: LD_INT 0
21107: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21108: LD_ADDR_VAR 0 3
21112: PUSH
21113: LD_VAR 0 2
21117: PPUSH
21118: LD_INT 81
21120: PUSH
21121: LD_VAR 0 1
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PPUSH
21130: CALL_OW 70
21134: ST_TO_ADDR
// end ;
21135: LD_VAR 0 3
21139: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21140: LD_INT 0
21142: PPUSH
21143: PPUSH
21144: PPUSH
21145: PPUSH
// result := false ;
21146: LD_ADDR_VAR 0 2
21150: PUSH
21151: LD_INT 0
21153: ST_TO_ADDR
// side := GetSide ( unit ) ;
21154: LD_ADDR_VAR 0 3
21158: PUSH
21159: LD_VAR 0 1
21163: PPUSH
21164: CALL_OW 255
21168: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21169: LD_ADDR_VAR 0 4
21173: PUSH
21174: LD_VAR 0 1
21178: PPUSH
21179: CALL_OW 248
21183: ST_TO_ADDR
// case nat of 1 :
21184: LD_VAR 0 4
21188: PUSH
21189: LD_INT 1
21191: DOUBLE
21192: EQUAL
21193: IFTRUE 21197
21195: GO 21208
21197: POP
// tech := tech_lassight ; 2 :
21198: LD_ADDR_VAR 0 5
21202: PUSH
21203: LD_INT 12
21205: ST_TO_ADDR
21206: GO 21247
21208: LD_INT 2
21210: DOUBLE
21211: EQUAL
21212: IFTRUE 21216
21214: GO 21227
21216: POP
// tech := tech_mortar ; 3 :
21217: LD_ADDR_VAR 0 5
21221: PUSH
21222: LD_INT 41
21224: ST_TO_ADDR
21225: GO 21247
21227: LD_INT 3
21229: DOUBLE
21230: EQUAL
21231: IFTRUE 21235
21233: GO 21246
21235: POP
// tech := tech_bazooka ; end ;
21236: LD_ADDR_VAR 0 5
21240: PUSH
21241: LD_INT 44
21243: ST_TO_ADDR
21244: GO 21247
21246: POP
// if Researched ( side , tech ) then
21247: LD_VAR 0 3
21251: PPUSH
21252: LD_VAR 0 5
21256: PPUSH
21257: CALL_OW 325
21261: IFFALSE 21288
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21263: LD_ADDR_VAR 0 2
21267: PUSH
21268: LD_INT 5
21270: PUSH
21271: LD_INT 8
21273: PUSH
21274: LD_INT 9
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: PUSH
21282: LD_VAR 0 4
21286: ARRAY
21287: ST_TO_ADDR
// end ;
21288: LD_VAR 0 2
21292: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21293: LD_INT 0
21295: PPUSH
21296: PPUSH
21297: PPUSH
// if not mines then
21298: LD_VAR 0 2
21302: NOT
21303: IFFALSE 21307
// exit ;
21305: GO 21451
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21307: LD_ADDR_VAR 0 5
21311: PUSH
21312: LD_INT 81
21314: PUSH
21315: LD_VAR 0 1
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 3
21326: PUSH
21327: LD_INT 21
21329: PUSH
21330: LD_INT 3
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PPUSH
21345: CALL_OW 69
21349: ST_TO_ADDR
// for i in mines do
21350: LD_ADDR_VAR 0 4
21354: PUSH
21355: LD_VAR 0 2
21359: PUSH
21360: FOR_IN
21361: IFFALSE 21449
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21363: LD_VAR 0 4
21367: PUSH
21368: LD_INT 1
21370: ARRAY
21371: PPUSH
21372: LD_VAR 0 4
21376: PUSH
21377: LD_INT 2
21379: ARRAY
21380: PPUSH
21381: CALL_OW 458
21385: NOT
21386: IFFALSE 21390
// continue ;
21388: GO 21360
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21390: LD_VAR 0 4
21394: PUSH
21395: LD_INT 1
21397: ARRAY
21398: PPUSH
21399: LD_VAR 0 4
21403: PUSH
21404: LD_INT 2
21406: ARRAY
21407: PPUSH
21408: CALL_OW 428
21412: PUSH
21413: LD_VAR 0 5
21417: IN
21418: IFFALSE 21447
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21420: LD_VAR 0 4
21424: PUSH
21425: LD_INT 1
21427: ARRAY
21428: PPUSH
21429: LD_VAR 0 4
21433: PUSH
21434: LD_INT 2
21436: ARRAY
21437: PPUSH
21438: LD_VAR 0 1
21442: PPUSH
21443: CALL_OW 456
// end ;
21447: GO 21360
21449: POP
21450: POP
// end ;
21451: LD_VAR 0 3
21455: RET
// export function Count ( array ) ; var i ; begin
21456: LD_INT 0
21458: PPUSH
21459: PPUSH
// result := 0 ;
21460: LD_ADDR_VAR 0 2
21464: PUSH
21465: LD_INT 0
21467: ST_TO_ADDR
// for i in array do
21468: LD_ADDR_VAR 0 3
21472: PUSH
21473: LD_VAR 0 1
21477: PUSH
21478: FOR_IN
21479: IFFALSE 21503
// if i then
21481: LD_VAR 0 3
21485: IFFALSE 21501
// result := result + 1 ;
21487: LD_ADDR_VAR 0 2
21491: PUSH
21492: LD_VAR 0 2
21496: PUSH
21497: LD_INT 1
21499: PLUS
21500: ST_TO_ADDR
21501: GO 21478
21503: POP
21504: POP
// end ;
21505: LD_VAR 0 2
21509: RET
// export function IsEmpty ( building ) ; begin
21510: LD_INT 0
21512: PPUSH
// if not building then
21513: LD_VAR 0 1
21517: NOT
21518: IFFALSE 21522
// exit ;
21520: GO 21565
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21522: LD_ADDR_VAR 0 2
21526: PUSH
21527: LD_VAR 0 1
21531: PUSH
21532: LD_INT 22
21534: PUSH
21535: LD_VAR 0 1
21539: PPUSH
21540: CALL_OW 255
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 58
21551: PUSH
21552: EMPTY
21553: LIST
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PPUSH
21559: CALL_OW 69
21563: IN
21564: ST_TO_ADDR
// end ;
21565: LD_VAR 0 2
21569: RET
// export function IsNotFull ( building ) ; begin
21570: LD_INT 0
21572: PPUSH
// if not building then
21573: LD_VAR 0 1
21577: NOT
21578: IFFALSE 21582
// exit ;
21580: GO 21601
// result := UnitsInside ( building ) < 6 ;
21582: LD_ADDR_VAR 0 2
21586: PUSH
21587: LD_VAR 0 1
21591: PPUSH
21592: CALL_OW 313
21596: PUSH
21597: LD_INT 6
21599: LESS
21600: ST_TO_ADDR
// end ;
21601: LD_VAR 0 2
21605: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21606: LD_INT 0
21608: PPUSH
21609: PPUSH
21610: PPUSH
21611: PPUSH
// tmp := [ ] ;
21612: LD_ADDR_VAR 0 3
21616: PUSH
21617: EMPTY
21618: ST_TO_ADDR
// list := [ ] ;
21619: LD_ADDR_VAR 0 5
21623: PUSH
21624: EMPTY
21625: ST_TO_ADDR
// for i = 16 to 25 do
21626: LD_ADDR_VAR 0 4
21630: PUSH
21631: DOUBLE
21632: LD_INT 16
21634: DEC
21635: ST_TO_ADDR
21636: LD_INT 25
21638: PUSH
21639: FOR_TO
21640: IFFALSE 21713
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21642: LD_ADDR_VAR 0 3
21646: PUSH
21647: LD_VAR 0 3
21651: PUSH
21652: LD_INT 22
21654: PUSH
21655: LD_VAR 0 1
21659: PPUSH
21660: CALL_OW 255
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 91
21671: PUSH
21672: LD_VAR 0 1
21676: PUSH
21677: LD_INT 6
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 30
21687: PUSH
21688: LD_VAR 0 4
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: LIST
21701: PUSH
21702: EMPTY
21703: LIST
21704: PPUSH
21705: CALL_OW 69
21709: ADD
21710: ST_TO_ADDR
21711: GO 21639
21713: POP
21714: POP
// for i = 1 to tmp do
21715: LD_ADDR_VAR 0 4
21719: PUSH
21720: DOUBLE
21721: LD_INT 1
21723: DEC
21724: ST_TO_ADDR
21725: LD_VAR 0 3
21729: PUSH
21730: FOR_TO
21731: IFFALSE 21819
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21733: LD_ADDR_VAR 0 5
21737: PUSH
21738: LD_VAR 0 5
21742: PUSH
21743: LD_VAR 0 3
21747: PUSH
21748: LD_VAR 0 4
21752: ARRAY
21753: PPUSH
21754: CALL_OW 266
21758: PUSH
21759: LD_VAR 0 3
21763: PUSH
21764: LD_VAR 0 4
21768: ARRAY
21769: PPUSH
21770: CALL_OW 250
21774: PUSH
21775: LD_VAR 0 3
21779: PUSH
21780: LD_VAR 0 4
21784: ARRAY
21785: PPUSH
21786: CALL_OW 251
21790: PUSH
21791: LD_VAR 0 3
21795: PUSH
21796: LD_VAR 0 4
21800: ARRAY
21801: PPUSH
21802: CALL_OW 254
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: PUSH
21813: EMPTY
21814: LIST
21815: ADD
21816: ST_TO_ADDR
21817: GO 21730
21819: POP
21820: POP
// result := list ;
21821: LD_ADDR_VAR 0 2
21825: PUSH
21826: LD_VAR 0 5
21830: ST_TO_ADDR
// end ;
21831: LD_VAR 0 2
21835: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21836: LD_INT 0
21838: PPUSH
21839: PPUSH
21840: PPUSH
21841: PPUSH
21842: PPUSH
21843: PPUSH
21844: PPUSH
// if not factory then
21845: LD_VAR 0 1
21849: NOT
21850: IFFALSE 21854
// exit ;
21852: GO 22447
// if control = control_apeman then
21854: LD_VAR 0 4
21858: PUSH
21859: LD_INT 5
21861: EQUAL
21862: IFFALSE 21971
// begin tmp := UnitsInside ( factory ) ;
21864: LD_ADDR_VAR 0 8
21868: PUSH
21869: LD_VAR 0 1
21873: PPUSH
21874: CALL_OW 313
21878: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21879: LD_VAR 0 8
21883: PPUSH
21884: LD_INT 25
21886: PUSH
21887: LD_INT 12
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PPUSH
21894: CALL_OW 72
21898: NOT
21899: IFFALSE 21909
// control := control_manual ;
21901: LD_ADDR_VAR 0 4
21905: PUSH
21906: LD_INT 1
21908: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21909: LD_ADDR_VAR 0 8
21913: PUSH
21914: LD_VAR 0 1
21918: PPUSH
21919: CALL 21606 0 1
21923: ST_TO_ADDR
// if tmp then
21924: LD_VAR 0 8
21928: IFFALSE 21971
// begin for i in tmp do
21930: LD_ADDR_VAR 0 7
21934: PUSH
21935: LD_VAR 0 8
21939: PUSH
21940: FOR_IN
21941: IFFALSE 21969
// if i [ 1 ] = b_ext_radio then
21943: LD_VAR 0 7
21947: PUSH
21948: LD_INT 1
21950: ARRAY
21951: PUSH
21952: LD_INT 22
21954: EQUAL
21955: IFFALSE 21967
// begin control := control_remote ;
21957: LD_ADDR_VAR 0 4
21961: PUSH
21962: LD_INT 2
21964: ST_TO_ADDR
// break ;
21965: GO 21969
// end ;
21967: GO 21940
21969: POP
21970: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21971: LD_VAR 0 1
21975: PPUSH
21976: LD_VAR 0 2
21980: PPUSH
21981: LD_VAR 0 3
21985: PPUSH
21986: LD_VAR 0 4
21990: PPUSH
21991: LD_VAR 0 5
21995: PPUSH
21996: CALL_OW 448
22000: IFFALSE 22035
// begin result := [ chassis , engine , control , weapon ] ;
22002: LD_ADDR_VAR 0 6
22006: PUSH
22007: LD_VAR 0 2
22011: PUSH
22012: LD_VAR 0 3
22016: PUSH
22017: LD_VAR 0 4
22021: PUSH
22022: LD_VAR 0 5
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: ST_TO_ADDR
// exit ;
22033: GO 22447
// end ; _chassis := AvailableChassisList ( factory ) ;
22035: LD_ADDR_VAR 0 9
22039: PUSH
22040: LD_VAR 0 1
22044: PPUSH
22045: CALL_OW 475
22049: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22050: LD_ADDR_VAR 0 11
22054: PUSH
22055: LD_VAR 0 1
22059: PPUSH
22060: CALL_OW 476
22064: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22065: LD_ADDR_VAR 0 12
22069: PUSH
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL_OW 477
22079: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22080: LD_ADDR_VAR 0 10
22084: PUSH
22085: LD_VAR 0 1
22089: PPUSH
22090: CALL_OW 478
22094: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22095: LD_VAR 0 9
22099: NOT
22100: PUSH
22101: LD_VAR 0 11
22105: NOT
22106: OR
22107: PUSH
22108: LD_VAR 0 12
22112: NOT
22113: OR
22114: PUSH
22115: LD_VAR 0 10
22119: NOT
22120: OR
22121: IFFALSE 22156
// begin result := [ chassis , engine , control , weapon ] ;
22123: LD_ADDR_VAR 0 6
22127: PUSH
22128: LD_VAR 0 2
22132: PUSH
22133: LD_VAR 0 3
22137: PUSH
22138: LD_VAR 0 4
22142: PUSH
22143: LD_VAR 0 5
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: ST_TO_ADDR
// exit ;
22154: GO 22447
// end ; if not chassis in _chassis then
22156: LD_VAR 0 2
22160: PUSH
22161: LD_VAR 0 9
22165: IN
22166: NOT
22167: IFFALSE 22193
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22169: LD_ADDR_VAR 0 2
22173: PUSH
22174: LD_VAR 0 9
22178: PUSH
22179: LD_INT 1
22181: PPUSH
22182: LD_VAR 0 9
22186: PPUSH
22187: CALL_OW 12
22191: ARRAY
22192: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22193: LD_VAR 0 2
22197: PPUSH
22198: LD_VAR 0 3
22202: PPUSH
22203: CALL 22452 0 2
22207: NOT
22208: IFFALSE 22267
// repeat engine := _engine [ 1 ] ;
22210: LD_ADDR_VAR 0 3
22214: PUSH
22215: LD_VAR 0 11
22219: PUSH
22220: LD_INT 1
22222: ARRAY
22223: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22224: LD_ADDR_VAR 0 11
22228: PUSH
22229: LD_VAR 0 11
22233: PPUSH
22234: LD_INT 1
22236: PPUSH
22237: CALL_OW 3
22241: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22242: LD_VAR 0 2
22246: PPUSH
22247: LD_VAR 0 3
22251: PPUSH
22252: CALL 22452 0 2
22256: PUSH
22257: LD_VAR 0 11
22261: PUSH
22262: EMPTY
22263: EQUAL
22264: OR
22265: IFFALSE 22210
// if not control in _control then
22267: LD_VAR 0 4
22271: PUSH
22272: LD_VAR 0 12
22276: IN
22277: NOT
22278: IFFALSE 22304
// control := _control [ rand ( 1 , _control ) ] ;
22280: LD_ADDR_VAR 0 4
22284: PUSH
22285: LD_VAR 0 12
22289: PUSH
22290: LD_INT 1
22292: PPUSH
22293: LD_VAR 0 12
22297: PPUSH
22298: CALL_OW 12
22302: ARRAY
22303: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22304: LD_VAR 0 2
22308: PPUSH
22309: LD_VAR 0 5
22313: PPUSH
22314: CALL 22672 0 2
22318: NOT
22319: IFFALSE 22378
// repeat weapon := _weapon [ 1 ] ;
22321: LD_ADDR_VAR 0 5
22325: PUSH
22326: LD_VAR 0 10
22330: PUSH
22331: LD_INT 1
22333: ARRAY
22334: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22335: LD_ADDR_VAR 0 10
22339: PUSH
22340: LD_VAR 0 10
22344: PPUSH
22345: LD_INT 1
22347: PPUSH
22348: CALL_OW 3
22352: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22353: LD_VAR 0 2
22357: PPUSH
22358: LD_VAR 0 5
22362: PPUSH
22363: CALL 22672 0 2
22367: PUSH
22368: LD_VAR 0 10
22372: PUSH
22373: EMPTY
22374: EQUAL
22375: OR
22376: IFFALSE 22321
// result := [ ] ;
22378: LD_ADDR_VAR 0 6
22382: PUSH
22383: EMPTY
22384: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22385: LD_VAR 0 1
22389: PPUSH
22390: LD_VAR 0 2
22394: PPUSH
22395: LD_VAR 0 3
22399: PPUSH
22400: LD_VAR 0 4
22404: PPUSH
22405: LD_VAR 0 5
22409: PPUSH
22410: CALL_OW 448
22414: IFFALSE 22447
// result := [ chassis , engine , control , weapon ] ;
22416: LD_ADDR_VAR 0 6
22420: PUSH
22421: LD_VAR 0 2
22425: PUSH
22426: LD_VAR 0 3
22430: PUSH
22431: LD_VAR 0 4
22435: PUSH
22436: LD_VAR 0 5
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: ST_TO_ADDR
// end ;
22447: LD_VAR 0 6
22451: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22452: LD_INT 0
22454: PPUSH
// if not chassis or not engine then
22455: LD_VAR 0 1
22459: NOT
22460: PUSH
22461: LD_VAR 0 2
22465: NOT
22466: OR
22467: IFFALSE 22471
// exit ;
22469: GO 22667
// case engine of engine_solar :
22471: LD_VAR 0 2
22475: PUSH
22476: LD_INT 2
22478: DOUBLE
22479: EQUAL
22480: IFTRUE 22484
22482: GO 22522
22484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22485: LD_ADDR_VAR 0 3
22489: PUSH
22490: LD_INT 11
22492: PUSH
22493: LD_INT 12
22495: PUSH
22496: LD_INT 13
22498: PUSH
22499: LD_INT 14
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: LD_INT 3
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: ST_TO_ADDR
22520: GO 22651
22522: LD_INT 1
22524: DOUBLE
22525: EQUAL
22526: IFTRUE 22530
22528: GO 22592
22530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22531: LD_ADDR_VAR 0 3
22535: PUSH
22536: LD_INT 11
22538: PUSH
22539: LD_INT 12
22541: PUSH
22542: LD_INT 13
22544: PUSH
22545: LD_INT 14
22547: PUSH
22548: LD_INT 1
22550: PUSH
22551: LD_INT 2
22553: PUSH
22554: LD_INT 3
22556: PUSH
22557: LD_INT 4
22559: PUSH
22560: LD_INT 5
22562: PUSH
22563: LD_INT 21
22565: PUSH
22566: LD_INT 23
22568: PUSH
22569: LD_INT 22
22571: PUSH
22572: LD_INT 24
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: ST_TO_ADDR
22590: GO 22651
22592: LD_INT 3
22594: DOUBLE
22595: EQUAL
22596: IFTRUE 22600
22598: GO 22650
22600: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22601: LD_ADDR_VAR 0 3
22605: PUSH
22606: LD_INT 13
22608: PUSH
22609: LD_INT 14
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: LD_INT 3
22617: PUSH
22618: LD_INT 4
22620: PUSH
22621: LD_INT 5
22623: PUSH
22624: LD_INT 21
22626: PUSH
22627: LD_INT 22
22629: PUSH
22630: LD_INT 23
22632: PUSH
22633: LD_INT 24
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: ST_TO_ADDR
22648: GO 22651
22650: POP
// result := ( chassis in result ) ;
22651: LD_ADDR_VAR 0 3
22655: PUSH
22656: LD_VAR 0 1
22660: PUSH
22661: LD_VAR 0 3
22665: IN
22666: ST_TO_ADDR
// end ;
22667: LD_VAR 0 3
22671: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22672: LD_INT 0
22674: PPUSH
// if not chassis or not weapon then
22675: LD_VAR 0 1
22679: NOT
22680: PUSH
22681: LD_VAR 0 2
22685: NOT
22686: OR
22687: IFFALSE 22691
// exit ;
22689: GO 23753
// case weapon of us_machine_gun :
22691: LD_VAR 0 2
22695: PUSH
22696: LD_INT 2
22698: DOUBLE
22699: EQUAL
22700: IFTRUE 22704
22702: GO 22734
22704: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22705: LD_ADDR_VAR 0 3
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: LD_INT 3
22718: PUSH
22719: LD_INT 4
22721: PUSH
22722: LD_INT 5
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: ST_TO_ADDR
22732: GO 23737
22734: LD_INT 3
22736: DOUBLE
22737: EQUAL
22738: IFTRUE 22742
22740: GO 22772
22742: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22743: LD_ADDR_VAR 0 3
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: LD_INT 3
22756: PUSH
22757: LD_INT 4
22759: PUSH
22760: LD_INT 5
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: ST_TO_ADDR
22770: GO 23737
22772: LD_INT 11
22774: DOUBLE
22775: EQUAL
22776: IFTRUE 22780
22778: GO 22810
22780: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22781: LD_ADDR_VAR 0 3
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: LD_INT 2
22791: PUSH
22792: LD_INT 3
22794: PUSH
22795: LD_INT 4
22797: PUSH
22798: LD_INT 5
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: ST_TO_ADDR
22808: GO 23737
22810: LD_INT 4
22812: DOUBLE
22813: EQUAL
22814: IFTRUE 22818
22816: GO 22844
22818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22819: LD_ADDR_VAR 0 3
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 3
22829: PUSH
22830: LD_INT 4
22832: PUSH
22833: LD_INT 5
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: ST_TO_ADDR
22842: GO 23737
22844: LD_INT 5
22846: DOUBLE
22847: EQUAL
22848: IFTRUE 22852
22850: GO 22878
22852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22853: LD_ADDR_VAR 0 3
22857: PUSH
22858: LD_INT 2
22860: PUSH
22861: LD_INT 3
22863: PUSH
22864: LD_INT 4
22866: PUSH
22867: LD_INT 5
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: ST_TO_ADDR
22876: GO 23737
22878: LD_INT 9
22880: DOUBLE
22881: EQUAL
22882: IFTRUE 22886
22884: GO 22912
22886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22887: LD_ADDR_VAR 0 3
22891: PUSH
22892: LD_INT 2
22894: PUSH
22895: LD_INT 3
22897: PUSH
22898: LD_INT 4
22900: PUSH
22901: LD_INT 5
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: ST_TO_ADDR
22910: GO 23737
22912: LD_INT 7
22914: DOUBLE
22915: EQUAL
22916: IFTRUE 22920
22918: GO 22946
22920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22921: LD_ADDR_VAR 0 3
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: LD_INT 3
22931: PUSH
22932: LD_INT 4
22934: PUSH
22935: LD_INT 5
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: ST_TO_ADDR
22944: GO 23737
22946: LD_INT 12
22948: DOUBLE
22949: EQUAL
22950: IFTRUE 22954
22952: GO 22980
22954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22955: LD_ADDR_VAR 0 3
22959: PUSH
22960: LD_INT 2
22962: PUSH
22963: LD_INT 3
22965: PUSH
22966: LD_INT 4
22968: PUSH
22969: LD_INT 5
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: ST_TO_ADDR
22978: GO 23737
22980: LD_INT 13
22982: DOUBLE
22983: EQUAL
22984: IFTRUE 22988
22986: GO 23014
22988: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22989: LD_ADDR_VAR 0 3
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: LD_INT 3
22999: PUSH
23000: LD_INT 4
23002: PUSH
23003: LD_INT 5
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: ST_TO_ADDR
23012: GO 23737
23014: LD_INT 14
23016: DOUBLE
23017: EQUAL
23018: IFTRUE 23022
23020: GO 23040
23022: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23023: LD_ADDR_VAR 0 3
23027: PUSH
23028: LD_INT 4
23030: PUSH
23031: LD_INT 5
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: ST_TO_ADDR
23038: GO 23737
23040: LD_INT 6
23042: DOUBLE
23043: EQUAL
23044: IFTRUE 23048
23046: GO 23066
23048: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23049: LD_ADDR_VAR 0 3
23053: PUSH
23054: LD_INT 4
23056: PUSH
23057: LD_INT 5
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: ST_TO_ADDR
23064: GO 23737
23066: LD_INT 10
23068: DOUBLE
23069: EQUAL
23070: IFTRUE 23074
23072: GO 23092
23074: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23075: LD_ADDR_VAR 0 3
23079: PUSH
23080: LD_INT 4
23082: PUSH
23083: LD_INT 5
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: ST_TO_ADDR
23090: GO 23737
23092: LD_INT 22
23094: DOUBLE
23095: EQUAL
23096: IFTRUE 23100
23098: GO 23126
23100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23101: LD_ADDR_VAR 0 3
23105: PUSH
23106: LD_INT 11
23108: PUSH
23109: LD_INT 12
23111: PUSH
23112: LD_INT 13
23114: PUSH
23115: LD_INT 14
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: ST_TO_ADDR
23124: GO 23737
23126: LD_INT 23
23128: DOUBLE
23129: EQUAL
23130: IFTRUE 23134
23132: GO 23160
23134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23135: LD_ADDR_VAR 0 3
23139: PUSH
23140: LD_INT 11
23142: PUSH
23143: LD_INT 12
23145: PUSH
23146: LD_INT 13
23148: PUSH
23149: LD_INT 14
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: ST_TO_ADDR
23158: GO 23737
23160: LD_INT 24
23162: DOUBLE
23163: EQUAL
23164: IFTRUE 23168
23166: GO 23194
23168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23169: LD_ADDR_VAR 0 3
23173: PUSH
23174: LD_INT 11
23176: PUSH
23177: LD_INT 12
23179: PUSH
23180: LD_INT 13
23182: PUSH
23183: LD_INT 14
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: ST_TO_ADDR
23192: GO 23737
23194: LD_INT 30
23196: DOUBLE
23197: EQUAL
23198: IFTRUE 23202
23200: GO 23228
23202: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23203: LD_ADDR_VAR 0 3
23207: PUSH
23208: LD_INT 11
23210: PUSH
23211: LD_INT 12
23213: PUSH
23214: LD_INT 13
23216: PUSH
23217: LD_INT 14
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: ST_TO_ADDR
23226: GO 23737
23228: LD_INT 25
23230: DOUBLE
23231: EQUAL
23232: IFTRUE 23236
23234: GO 23254
23236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23237: LD_ADDR_VAR 0 3
23241: PUSH
23242: LD_INT 13
23244: PUSH
23245: LD_INT 14
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: ST_TO_ADDR
23252: GO 23737
23254: LD_INT 27
23256: DOUBLE
23257: EQUAL
23258: IFTRUE 23262
23260: GO 23280
23262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23263: LD_ADDR_VAR 0 3
23267: PUSH
23268: LD_INT 13
23270: PUSH
23271: LD_INT 14
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: ST_TO_ADDR
23278: GO 23737
23280: LD_EXP 75
23284: DOUBLE
23285: EQUAL
23286: IFTRUE 23290
23288: GO 23316
23290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23291: LD_ADDR_VAR 0 3
23295: PUSH
23296: LD_INT 11
23298: PUSH
23299: LD_INT 12
23301: PUSH
23302: LD_INT 13
23304: PUSH
23305: LD_INT 14
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: ST_TO_ADDR
23314: GO 23737
23316: LD_INT 28
23318: DOUBLE
23319: EQUAL
23320: IFTRUE 23324
23322: GO 23342
23324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23325: LD_ADDR_VAR 0 3
23329: PUSH
23330: LD_INT 13
23332: PUSH
23333: LD_INT 14
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: ST_TO_ADDR
23340: GO 23737
23342: LD_INT 29
23344: DOUBLE
23345: EQUAL
23346: IFTRUE 23350
23348: GO 23368
23350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23351: LD_ADDR_VAR 0 3
23355: PUSH
23356: LD_INT 13
23358: PUSH
23359: LD_INT 14
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: ST_TO_ADDR
23366: GO 23737
23368: LD_INT 31
23370: DOUBLE
23371: EQUAL
23372: IFTRUE 23376
23374: GO 23394
23376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23377: LD_ADDR_VAR 0 3
23381: PUSH
23382: LD_INT 13
23384: PUSH
23385: LD_INT 14
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: ST_TO_ADDR
23392: GO 23737
23394: LD_INT 26
23396: DOUBLE
23397: EQUAL
23398: IFTRUE 23402
23400: GO 23420
23402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23403: LD_ADDR_VAR 0 3
23407: PUSH
23408: LD_INT 13
23410: PUSH
23411: LD_INT 14
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: ST_TO_ADDR
23418: GO 23737
23420: LD_INT 42
23422: DOUBLE
23423: EQUAL
23424: IFTRUE 23428
23426: GO 23454
23428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23429: LD_ADDR_VAR 0 3
23433: PUSH
23434: LD_INT 21
23436: PUSH
23437: LD_INT 22
23439: PUSH
23440: LD_INT 23
23442: PUSH
23443: LD_INT 24
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: ST_TO_ADDR
23452: GO 23737
23454: LD_INT 43
23456: DOUBLE
23457: EQUAL
23458: IFTRUE 23462
23460: GO 23488
23462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23463: LD_ADDR_VAR 0 3
23467: PUSH
23468: LD_INT 21
23470: PUSH
23471: LD_INT 22
23473: PUSH
23474: LD_INT 23
23476: PUSH
23477: LD_INT 24
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: ST_TO_ADDR
23486: GO 23737
23488: LD_INT 44
23490: DOUBLE
23491: EQUAL
23492: IFTRUE 23496
23494: GO 23522
23496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23497: LD_ADDR_VAR 0 3
23501: PUSH
23502: LD_INT 21
23504: PUSH
23505: LD_INT 22
23507: PUSH
23508: LD_INT 23
23510: PUSH
23511: LD_INT 24
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: ST_TO_ADDR
23520: GO 23737
23522: LD_INT 45
23524: DOUBLE
23525: EQUAL
23526: IFTRUE 23530
23528: GO 23556
23530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23531: LD_ADDR_VAR 0 3
23535: PUSH
23536: LD_INT 21
23538: PUSH
23539: LD_INT 22
23541: PUSH
23542: LD_INT 23
23544: PUSH
23545: LD_INT 24
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: ST_TO_ADDR
23554: GO 23737
23556: LD_INT 49
23558: DOUBLE
23559: EQUAL
23560: IFTRUE 23564
23562: GO 23590
23564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23565: LD_ADDR_VAR 0 3
23569: PUSH
23570: LD_INT 21
23572: PUSH
23573: LD_INT 22
23575: PUSH
23576: LD_INT 23
23578: PUSH
23579: LD_INT 24
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: ST_TO_ADDR
23588: GO 23737
23590: LD_INT 51
23592: DOUBLE
23593: EQUAL
23594: IFTRUE 23598
23596: GO 23624
23598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23599: LD_ADDR_VAR 0 3
23603: PUSH
23604: LD_INT 21
23606: PUSH
23607: LD_INT 22
23609: PUSH
23610: LD_INT 23
23612: PUSH
23613: LD_INT 24
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: ST_TO_ADDR
23622: GO 23737
23624: LD_INT 52
23626: DOUBLE
23627: EQUAL
23628: IFTRUE 23632
23630: GO 23658
23632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23633: LD_ADDR_VAR 0 3
23637: PUSH
23638: LD_INT 21
23640: PUSH
23641: LD_INT 22
23643: PUSH
23644: LD_INT 23
23646: PUSH
23647: LD_INT 24
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: ST_TO_ADDR
23656: GO 23737
23658: LD_INT 53
23660: DOUBLE
23661: EQUAL
23662: IFTRUE 23666
23664: GO 23684
23666: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23667: LD_ADDR_VAR 0 3
23671: PUSH
23672: LD_INT 23
23674: PUSH
23675: LD_INT 24
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: ST_TO_ADDR
23682: GO 23737
23684: LD_INT 46
23686: DOUBLE
23687: EQUAL
23688: IFTRUE 23692
23690: GO 23710
23692: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23693: LD_ADDR_VAR 0 3
23697: PUSH
23698: LD_INT 23
23700: PUSH
23701: LD_INT 24
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: ST_TO_ADDR
23708: GO 23737
23710: LD_INT 47
23712: DOUBLE
23713: EQUAL
23714: IFTRUE 23718
23716: GO 23736
23718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23719: LD_ADDR_VAR 0 3
23723: PUSH
23724: LD_INT 23
23726: PUSH
23727: LD_INT 24
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: ST_TO_ADDR
23734: GO 23737
23736: POP
// result := ( chassis in result ) ;
23737: LD_ADDR_VAR 0 3
23741: PUSH
23742: LD_VAR 0 1
23746: PUSH
23747: LD_VAR 0 3
23751: IN
23752: ST_TO_ADDR
// end ;
23753: LD_VAR 0 3
23757: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23758: LD_INT 0
23760: PPUSH
23761: PPUSH
23762: PPUSH
23763: PPUSH
23764: PPUSH
23765: PPUSH
23766: PPUSH
// result := array ;
23767: LD_ADDR_VAR 0 5
23771: PUSH
23772: LD_VAR 0 1
23776: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23777: LD_VAR 0 1
23781: NOT
23782: PUSH
23783: LD_VAR 0 2
23787: NOT
23788: OR
23789: PUSH
23790: LD_VAR 0 3
23794: NOT
23795: OR
23796: PUSH
23797: LD_VAR 0 2
23801: PUSH
23802: LD_VAR 0 1
23806: GREATER
23807: OR
23808: PUSH
23809: LD_VAR 0 3
23813: PUSH
23814: LD_VAR 0 1
23818: GREATER
23819: OR
23820: IFFALSE 23824
// exit ;
23822: GO 24120
// if direction then
23824: LD_VAR 0 4
23828: IFFALSE 23892
// begin d := 1 ;
23830: LD_ADDR_VAR 0 9
23834: PUSH
23835: LD_INT 1
23837: ST_TO_ADDR
// if i_from > i_to then
23838: LD_VAR 0 2
23842: PUSH
23843: LD_VAR 0 3
23847: GREATER
23848: IFFALSE 23874
// length := ( array - i_from ) + i_to else
23850: LD_ADDR_VAR 0 11
23854: PUSH
23855: LD_VAR 0 1
23859: PUSH
23860: LD_VAR 0 2
23864: MINUS
23865: PUSH
23866: LD_VAR 0 3
23870: PLUS
23871: ST_TO_ADDR
23872: GO 23890
// length := i_to - i_from ;
23874: LD_ADDR_VAR 0 11
23878: PUSH
23879: LD_VAR 0 3
23883: PUSH
23884: LD_VAR 0 2
23888: MINUS
23889: ST_TO_ADDR
// end else
23890: GO 23953
// begin d := - 1 ;
23892: LD_ADDR_VAR 0 9
23896: PUSH
23897: LD_INT 1
23899: NEG
23900: ST_TO_ADDR
// if i_from > i_to then
23901: LD_VAR 0 2
23905: PUSH
23906: LD_VAR 0 3
23910: GREATER
23911: IFFALSE 23931
// length := i_from - i_to else
23913: LD_ADDR_VAR 0 11
23917: PUSH
23918: LD_VAR 0 2
23922: PUSH
23923: LD_VAR 0 3
23927: MINUS
23928: ST_TO_ADDR
23929: GO 23953
// length := ( array - i_to ) + i_from ;
23931: LD_ADDR_VAR 0 11
23935: PUSH
23936: LD_VAR 0 1
23940: PUSH
23941: LD_VAR 0 3
23945: MINUS
23946: PUSH
23947: LD_VAR 0 2
23951: PLUS
23952: ST_TO_ADDR
// end ; if not length then
23953: LD_VAR 0 11
23957: NOT
23958: IFFALSE 23962
// exit ;
23960: GO 24120
// tmp := array ;
23962: LD_ADDR_VAR 0 10
23966: PUSH
23967: LD_VAR 0 1
23971: ST_TO_ADDR
// for i = 1 to length do
23972: LD_ADDR_VAR 0 6
23976: PUSH
23977: DOUBLE
23978: LD_INT 1
23980: DEC
23981: ST_TO_ADDR
23982: LD_VAR 0 11
23986: PUSH
23987: FOR_TO
23988: IFFALSE 24108
// begin for j = 1 to array do
23990: LD_ADDR_VAR 0 7
23994: PUSH
23995: DOUBLE
23996: LD_INT 1
23998: DEC
23999: ST_TO_ADDR
24000: LD_VAR 0 1
24004: PUSH
24005: FOR_TO
24006: IFFALSE 24094
// begin k := j + d ;
24008: LD_ADDR_VAR 0 8
24012: PUSH
24013: LD_VAR 0 7
24017: PUSH
24018: LD_VAR 0 9
24022: PLUS
24023: ST_TO_ADDR
// if k > array then
24024: LD_VAR 0 8
24028: PUSH
24029: LD_VAR 0 1
24033: GREATER
24034: IFFALSE 24044
// k := 1 ;
24036: LD_ADDR_VAR 0 8
24040: PUSH
24041: LD_INT 1
24043: ST_TO_ADDR
// if not k then
24044: LD_VAR 0 8
24048: NOT
24049: IFFALSE 24061
// k := array ;
24051: LD_ADDR_VAR 0 8
24055: PUSH
24056: LD_VAR 0 1
24060: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24061: LD_ADDR_VAR 0 10
24065: PUSH
24066: LD_VAR 0 10
24070: PPUSH
24071: LD_VAR 0 8
24075: PPUSH
24076: LD_VAR 0 1
24080: PUSH
24081: LD_VAR 0 7
24085: ARRAY
24086: PPUSH
24087: CALL_OW 1
24091: ST_TO_ADDR
// end ;
24092: GO 24005
24094: POP
24095: POP
// array := tmp ;
24096: LD_ADDR_VAR 0 1
24100: PUSH
24101: LD_VAR 0 10
24105: ST_TO_ADDR
// end ;
24106: GO 23987
24108: POP
24109: POP
// result := array ;
24110: LD_ADDR_VAR 0 5
24114: PUSH
24115: LD_VAR 0 1
24119: ST_TO_ADDR
// end ;
24120: LD_VAR 0 5
24124: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24125: LD_INT 0
24127: PPUSH
24128: PPUSH
// result := 0 ;
24129: LD_ADDR_VAR 0 3
24133: PUSH
24134: LD_INT 0
24136: ST_TO_ADDR
// if not array or not value in array then
24137: LD_VAR 0 1
24141: NOT
24142: PUSH
24143: LD_VAR 0 2
24147: PUSH
24148: LD_VAR 0 1
24152: IN
24153: NOT
24154: OR
24155: IFFALSE 24159
// exit ;
24157: GO 24213
// for i = 1 to array do
24159: LD_ADDR_VAR 0 4
24163: PUSH
24164: DOUBLE
24165: LD_INT 1
24167: DEC
24168: ST_TO_ADDR
24169: LD_VAR 0 1
24173: PUSH
24174: FOR_TO
24175: IFFALSE 24211
// if value = array [ i ] then
24177: LD_VAR 0 2
24181: PUSH
24182: LD_VAR 0 1
24186: PUSH
24187: LD_VAR 0 4
24191: ARRAY
24192: EQUAL
24193: IFFALSE 24209
// begin result := i ;
24195: LD_ADDR_VAR 0 3
24199: PUSH
24200: LD_VAR 0 4
24204: ST_TO_ADDR
// exit ;
24205: POP
24206: POP
24207: GO 24213
// end ;
24209: GO 24174
24211: POP
24212: POP
// end ;
24213: LD_VAR 0 3
24217: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24218: LD_INT 0
24220: PPUSH
// vc_chassis := chassis ;
24221: LD_ADDR_OWVAR 37
24225: PUSH
24226: LD_VAR 0 1
24230: ST_TO_ADDR
// vc_engine := engine ;
24231: LD_ADDR_OWVAR 39
24235: PUSH
24236: LD_VAR 0 2
24240: ST_TO_ADDR
// vc_control := control ;
24241: LD_ADDR_OWVAR 38
24245: PUSH
24246: LD_VAR 0 3
24250: ST_TO_ADDR
// vc_weapon := weapon ;
24251: LD_ADDR_OWVAR 40
24255: PUSH
24256: LD_VAR 0 4
24260: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24261: LD_ADDR_OWVAR 41
24265: PUSH
24266: LD_VAR 0 5
24270: ST_TO_ADDR
// end ;
24271: LD_VAR 0 6
24275: RET
// export function WantPlant ( unit ) ; var task ; begin
24276: LD_INT 0
24278: PPUSH
24279: PPUSH
// result := false ;
24280: LD_ADDR_VAR 0 2
24284: PUSH
24285: LD_INT 0
24287: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24288: LD_ADDR_VAR 0 3
24292: PUSH
24293: LD_VAR 0 1
24297: PPUSH
24298: CALL_OW 437
24302: ST_TO_ADDR
// if task then
24303: LD_VAR 0 3
24307: IFFALSE 24335
// if task [ 1 ] [ 1 ] = p then
24309: LD_VAR 0 3
24313: PUSH
24314: LD_INT 1
24316: ARRAY
24317: PUSH
24318: LD_INT 1
24320: ARRAY
24321: PUSH
24322: LD_STRING p
24324: EQUAL
24325: IFFALSE 24335
// result := true ;
24327: LD_ADDR_VAR 0 2
24331: PUSH
24332: LD_INT 1
24334: ST_TO_ADDR
// end ;
24335: LD_VAR 0 2
24339: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24340: LD_INT 0
24342: PPUSH
24343: PPUSH
24344: PPUSH
24345: PPUSH
// if pos < 1 then
24346: LD_VAR 0 2
24350: PUSH
24351: LD_INT 1
24353: LESS
24354: IFFALSE 24358
// exit ;
24356: GO 24661
// if pos = 1 then
24358: LD_VAR 0 2
24362: PUSH
24363: LD_INT 1
24365: EQUAL
24366: IFFALSE 24399
// result := Replace ( arr , pos [ 1 ] , value ) else
24368: LD_ADDR_VAR 0 4
24372: PUSH
24373: LD_VAR 0 1
24377: PPUSH
24378: LD_VAR 0 2
24382: PUSH
24383: LD_INT 1
24385: ARRAY
24386: PPUSH
24387: LD_VAR 0 3
24391: PPUSH
24392: CALL_OW 1
24396: ST_TO_ADDR
24397: GO 24661
// begin tmp := arr ;
24399: LD_ADDR_VAR 0 6
24403: PUSH
24404: LD_VAR 0 1
24408: ST_TO_ADDR
// s_arr := [ tmp ] ;
24409: LD_ADDR_VAR 0 7
24413: PUSH
24414: LD_VAR 0 6
24418: PUSH
24419: EMPTY
24420: LIST
24421: ST_TO_ADDR
// for i = 1 to pos - 1 do
24422: LD_ADDR_VAR 0 5
24426: PUSH
24427: DOUBLE
24428: LD_INT 1
24430: DEC
24431: ST_TO_ADDR
24432: LD_VAR 0 2
24436: PUSH
24437: LD_INT 1
24439: MINUS
24440: PUSH
24441: FOR_TO
24442: IFFALSE 24487
// begin tmp := tmp [ pos [ i ] ] ;
24444: LD_ADDR_VAR 0 6
24448: PUSH
24449: LD_VAR 0 6
24453: PUSH
24454: LD_VAR 0 2
24458: PUSH
24459: LD_VAR 0 5
24463: ARRAY
24464: ARRAY
24465: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24466: LD_ADDR_VAR 0 7
24470: PUSH
24471: LD_VAR 0 7
24475: PUSH
24476: LD_VAR 0 6
24480: PUSH
24481: EMPTY
24482: LIST
24483: ADD
24484: ST_TO_ADDR
// end ;
24485: GO 24441
24487: POP
24488: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24489: LD_ADDR_VAR 0 6
24493: PUSH
24494: LD_VAR 0 6
24498: PPUSH
24499: LD_VAR 0 2
24503: PUSH
24504: LD_VAR 0 2
24508: ARRAY
24509: PPUSH
24510: LD_VAR 0 3
24514: PPUSH
24515: CALL_OW 1
24519: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24520: LD_ADDR_VAR 0 7
24524: PUSH
24525: LD_VAR 0 7
24529: PPUSH
24530: LD_VAR 0 7
24534: PPUSH
24535: LD_VAR 0 6
24539: PPUSH
24540: CALL_OW 1
24544: ST_TO_ADDR
// for i = s_arr downto 2 do
24545: LD_ADDR_VAR 0 5
24549: PUSH
24550: DOUBLE
24551: LD_VAR 0 7
24555: INC
24556: ST_TO_ADDR
24557: LD_INT 2
24559: PUSH
24560: FOR_DOWNTO
24561: IFFALSE 24645
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24563: LD_ADDR_VAR 0 6
24567: PUSH
24568: LD_VAR 0 7
24572: PUSH
24573: LD_VAR 0 5
24577: PUSH
24578: LD_INT 1
24580: MINUS
24581: ARRAY
24582: PPUSH
24583: LD_VAR 0 2
24587: PUSH
24588: LD_VAR 0 5
24592: PUSH
24593: LD_INT 1
24595: MINUS
24596: ARRAY
24597: PPUSH
24598: LD_VAR 0 7
24602: PUSH
24603: LD_VAR 0 5
24607: ARRAY
24608: PPUSH
24609: CALL_OW 1
24613: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24614: LD_ADDR_VAR 0 7
24618: PUSH
24619: LD_VAR 0 7
24623: PPUSH
24624: LD_VAR 0 5
24628: PUSH
24629: LD_INT 1
24631: MINUS
24632: PPUSH
24633: LD_VAR 0 6
24637: PPUSH
24638: CALL_OW 1
24642: ST_TO_ADDR
// end ;
24643: GO 24560
24645: POP
24646: POP
// result := s_arr [ 1 ] ;
24647: LD_ADDR_VAR 0 4
24651: PUSH
24652: LD_VAR 0 7
24656: PUSH
24657: LD_INT 1
24659: ARRAY
24660: ST_TO_ADDR
// end ; end ;
24661: LD_VAR 0 4
24665: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24666: LD_INT 0
24668: PPUSH
24669: PPUSH
// if not list then
24670: LD_VAR 0 1
24674: NOT
24675: IFFALSE 24679
// exit ;
24677: GO 24770
// i := list [ pos1 ] ;
24679: LD_ADDR_VAR 0 5
24683: PUSH
24684: LD_VAR 0 1
24688: PUSH
24689: LD_VAR 0 2
24693: ARRAY
24694: ST_TO_ADDR
// if not i then
24695: LD_VAR 0 5
24699: NOT
24700: IFFALSE 24704
// exit ;
24702: GO 24770
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24704: LD_ADDR_VAR 0 1
24708: PUSH
24709: LD_VAR 0 1
24713: PPUSH
24714: LD_VAR 0 2
24718: PPUSH
24719: LD_VAR 0 1
24723: PUSH
24724: LD_VAR 0 3
24728: ARRAY
24729: PPUSH
24730: CALL_OW 1
24734: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24735: LD_ADDR_VAR 0 1
24739: PUSH
24740: LD_VAR 0 1
24744: PPUSH
24745: LD_VAR 0 3
24749: PPUSH
24750: LD_VAR 0 5
24754: PPUSH
24755: CALL_OW 1
24759: ST_TO_ADDR
// result := list ;
24760: LD_ADDR_VAR 0 4
24764: PUSH
24765: LD_VAR 0 1
24769: ST_TO_ADDR
// end ;
24770: LD_VAR 0 4
24774: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24775: LD_INT 0
24777: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24778: LD_ADDR_VAR 0 5
24782: PUSH
24783: LD_VAR 0 1
24787: PPUSH
24788: CALL_OW 250
24792: PPUSH
24793: LD_VAR 0 1
24797: PPUSH
24798: CALL_OW 251
24802: PPUSH
24803: LD_VAR 0 2
24807: PPUSH
24808: LD_VAR 0 3
24812: PPUSH
24813: LD_VAR 0 4
24817: PPUSH
24818: CALL 24828 0 5
24822: ST_TO_ADDR
// end ;
24823: LD_VAR 0 5
24827: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24828: LD_INT 0
24830: PPUSH
24831: PPUSH
24832: PPUSH
24833: PPUSH
// if not list then
24834: LD_VAR 0 3
24838: NOT
24839: IFFALSE 24843
// exit ;
24841: GO 25231
// result := [ ] ;
24843: LD_ADDR_VAR 0 6
24847: PUSH
24848: EMPTY
24849: ST_TO_ADDR
// for i in list do
24850: LD_ADDR_VAR 0 7
24854: PUSH
24855: LD_VAR 0 3
24859: PUSH
24860: FOR_IN
24861: IFFALSE 25063
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24863: LD_ADDR_VAR 0 9
24867: PUSH
24868: LD_VAR 0 7
24872: PPUSH
24873: LD_VAR 0 1
24877: PPUSH
24878: LD_VAR 0 2
24882: PPUSH
24883: CALL_OW 297
24887: ST_TO_ADDR
// if not result then
24888: LD_VAR 0 6
24892: NOT
24893: IFFALSE 24919
// result := [ [ i , tmp ] ] else
24895: LD_ADDR_VAR 0 6
24899: PUSH
24900: LD_VAR 0 7
24904: PUSH
24905: LD_VAR 0 9
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: EMPTY
24915: LIST
24916: ST_TO_ADDR
24917: GO 25061
// begin if result [ result ] [ 2 ] < tmp then
24919: LD_VAR 0 6
24923: PUSH
24924: LD_VAR 0 6
24928: ARRAY
24929: PUSH
24930: LD_INT 2
24932: ARRAY
24933: PUSH
24934: LD_VAR 0 9
24938: LESS
24939: IFFALSE 24981
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24941: LD_ADDR_VAR 0 6
24945: PUSH
24946: LD_VAR 0 6
24950: PPUSH
24951: LD_VAR 0 6
24955: PUSH
24956: LD_INT 1
24958: PLUS
24959: PPUSH
24960: LD_VAR 0 7
24964: PUSH
24965: LD_VAR 0 9
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PPUSH
24974: CALL_OW 2
24978: ST_TO_ADDR
24979: GO 25061
// for j = 1 to result do
24981: LD_ADDR_VAR 0 8
24985: PUSH
24986: DOUBLE
24987: LD_INT 1
24989: DEC
24990: ST_TO_ADDR
24991: LD_VAR 0 6
24995: PUSH
24996: FOR_TO
24997: IFFALSE 25059
// begin if tmp < result [ j ] [ 2 ] then
24999: LD_VAR 0 9
25003: PUSH
25004: LD_VAR 0 6
25008: PUSH
25009: LD_VAR 0 8
25013: ARRAY
25014: PUSH
25015: LD_INT 2
25017: ARRAY
25018: LESS
25019: IFFALSE 25057
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25021: LD_ADDR_VAR 0 6
25025: PUSH
25026: LD_VAR 0 6
25030: PPUSH
25031: LD_VAR 0 8
25035: PPUSH
25036: LD_VAR 0 7
25040: PUSH
25041: LD_VAR 0 9
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PPUSH
25050: CALL_OW 2
25054: ST_TO_ADDR
// break ;
25055: GO 25059
// end ; end ;
25057: GO 24996
25059: POP
25060: POP
// end ; end ;
25061: GO 24860
25063: POP
25064: POP
// if result and not asc then
25065: LD_VAR 0 6
25069: PUSH
25070: LD_VAR 0 4
25074: NOT
25075: AND
25076: IFFALSE 25151
// begin tmp := result ;
25078: LD_ADDR_VAR 0 9
25082: PUSH
25083: LD_VAR 0 6
25087: ST_TO_ADDR
// for i = tmp downto 1 do
25088: LD_ADDR_VAR 0 7
25092: PUSH
25093: DOUBLE
25094: LD_VAR 0 9
25098: INC
25099: ST_TO_ADDR
25100: LD_INT 1
25102: PUSH
25103: FOR_DOWNTO
25104: IFFALSE 25149
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25106: LD_ADDR_VAR 0 6
25110: PUSH
25111: LD_VAR 0 6
25115: PPUSH
25116: LD_VAR 0 9
25120: PUSH
25121: LD_VAR 0 7
25125: MINUS
25126: PUSH
25127: LD_INT 1
25129: PLUS
25130: PPUSH
25131: LD_VAR 0 9
25135: PUSH
25136: LD_VAR 0 7
25140: ARRAY
25141: PPUSH
25142: CALL_OW 1
25146: ST_TO_ADDR
25147: GO 25103
25149: POP
25150: POP
// end ; tmp := [ ] ;
25151: LD_ADDR_VAR 0 9
25155: PUSH
25156: EMPTY
25157: ST_TO_ADDR
// if mode then
25158: LD_VAR 0 5
25162: IFFALSE 25231
// begin for i = 1 to result do
25164: LD_ADDR_VAR 0 7
25168: PUSH
25169: DOUBLE
25170: LD_INT 1
25172: DEC
25173: ST_TO_ADDR
25174: LD_VAR 0 6
25178: PUSH
25179: FOR_TO
25180: IFFALSE 25219
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25182: LD_ADDR_VAR 0 9
25186: PUSH
25187: LD_VAR 0 9
25191: PPUSH
25192: LD_VAR 0 7
25196: PPUSH
25197: LD_VAR 0 6
25201: PUSH
25202: LD_VAR 0 7
25206: ARRAY
25207: PUSH
25208: LD_INT 1
25210: ARRAY
25211: PPUSH
25212: CALL_OW 1
25216: ST_TO_ADDR
25217: GO 25179
25219: POP
25220: POP
// result := tmp ;
25221: LD_ADDR_VAR 0 6
25225: PUSH
25226: LD_VAR 0 9
25230: ST_TO_ADDR
// end ; end ;
25231: LD_VAR 0 6
25235: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25236: LD_INT 0
25238: PPUSH
25239: PPUSH
25240: PPUSH
25241: PPUSH
25242: PPUSH
25243: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25244: LD_ADDR_VAR 0 5
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: EMPTY
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: ST_TO_ADDR
// if not x or not y then
25266: LD_VAR 0 2
25270: NOT
25271: PUSH
25272: LD_VAR 0 3
25276: NOT
25277: OR
25278: IFFALSE 25282
// exit ;
25280: GO 26934
// if not range then
25282: LD_VAR 0 4
25286: NOT
25287: IFFALSE 25297
// range := 10 ;
25289: LD_ADDR_VAR 0 4
25293: PUSH
25294: LD_INT 10
25296: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25297: LD_ADDR_VAR 0 8
25301: PUSH
25302: LD_INT 81
25304: PUSH
25305: LD_VAR 0 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 92
25316: PUSH
25317: LD_VAR 0 2
25321: PUSH
25322: LD_VAR 0 3
25326: PUSH
25327: LD_VAR 0 4
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 3
25340: PUSH
25341: LD_INT 21
25343: PUSH
25344: LD_INT 3
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: LIST
25359: PPUSH
25360: CALL_OW 69
25364: ST_TO_ADDR
// if not tmp then
25365: LD_VAR 0 8
25369: NOT
25370: IFFALSE 25374
// exit ;
25372: GO 26934
// for i in tmp do
25374: LD_ADDR_VAR 0 6
25378: PUSH
25379: LD_VAR 0 8
25383: PUSH
25384: FOR_IN
25385: IFFALSE 26909
// begin points := [ 0 , 0 , 0 ] ;
25387: LD_ADDR_VAR 0 9
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: LIST
25405: ST_TO_ADDR
// bpoints := 1 ;
25406: LD_ADDR_VAR 0 10
25410: PUSH
25411: LD_INT 1
25413: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25414: LD_VAR 0 6
25418: PPUSH
25419: CALL_OW 247
25423: PUSH
25424: LD_INT 1
25426: DOUBLE
25427: EQUAL
25428: IFTRUE 25432
25430: GO 26010
25432: POP
// begin if GetClass ( i ) = 1 then
25433: LD_VAR 0 6
25437: PPUSH
25438: CALL_OW 257
25442: PUSH
25443: LD_INT 1
25445: EQUAL
25446: IFFALSE 25467
// points := [ 10 , 5 , 3 ] ;
25448: LD_ADDR_VAR 0 9
25452: PUSH
25453: LD_INT 10
25455: PUSH
25456: LD_INT 5
25458: PUSH
25459: LD_INT 3
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: LIST
25466: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25467: LD_VAR 0 6
25471: PPUSH
25472: CALL_OW 257
25476: PUSH
25477: LD_INT 2
25479: PUSH
25480: LD_INT 3
25482: PUSH
25483: LD_INT 4
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: LIST
25490: IN
25491: IFFALSE 25512
// points := [ 3 , 2 , 1 ] ;
25493: LD_ADDR_VAR 0 9
25497: PUSH
25498: LD_INT 3
25500: PUSH
25501: LD_INT 2
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: LIST
25511: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25512: LD_VAR 0 6
25516: PPUSH
25517: CALL_OW 257
25521: PUSH
25522: LD_INT 5
25524: EQUAL
25525: IFFALSE 25546
// points := [ 130 , 5 , 2 ] ;
25527: LD_ADDR_VAR 0 9
25531: PUSH
25532: LD_INT 130
25534: PUSH
25535: LD_INT 5
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: LIST
25545: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25546: LD_VAR 0 6
25550: PPUSH
25551: CALL_OW 257
25555: PUSH
25556: LD_INT 8
25558: EQUAL
25559: IFFALSE 25580
// points := [ 35 , 35 , 30 ] ;
25561: LD_ADDR_VAR 0 9
25565: PUSH
25566: LD_INT 35
25568: PUSH
25569: LD_INT 35
25571: PUSH
25572: LD_INT 30
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: LIST
25579: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25580: LD_VAR 0 6
25584: PPUSH
25585: CALL_OW 257
25589: PUSH
25590: LD_INT 9
25592: EQUAL
25593: IFFALSE 25614
// points := [ 20 , 55 , 40 ] ;
25595: LD_ADDR_VAR 0 9
25599: PUSH
25600: LD_INT 20
25602: PUSH
25603: LD_INT 55
25605: PUSH
25606: LD_INT 40
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: LIST
25613: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25614: LD_VAR 0 6
25618: PPUSH
25619: CALL_OW 257
25623: PUSH
25624: LD_INT 12
25626: PUSH
25627: LD_INT 16
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: IN
25634: IFFALSE 25655
// points := [ 5 , 3 , 2 ] ;
25636: LD_ADDR_VAR 0 9
25640: PUSH
25641: LD_INT 5
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: LD_INT 2
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: LIST
25654: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25655: LD_VAR 0 6
25659: PPUSH
25660: CALL_OW 257
25664: PUSH
25665: LD_INT 17
25667: EQUAL
25668: IFFALSE 25689
// points := [ 100 , 50 , 75 ] ;
25670: LD_ADDR_VAR 0 9
25674: PUSH
25675: LD_INT 100
25677: PUSH
25678: LD_INT 50
25680: PUSH
25681: LD_INT 75
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: LIST
25688: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25689: LD_VAR 0 6
25693: PPUSH
25694: CALL_OW 257
25698: PUSH
25699: LD_INT 15
25701: EQUAL
25702: IFFALSE 25723
// points := [ 10 , 5 , 3 ] ;
25704: LD_ADDR_VAR 0 9
25708: PUSH
25709: LD_INT 10
25711: PUSH
25712: LD_INT 5
25714: PUSH
25715: LD_INT 3
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: LIST
25722: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25723: LD_VAR 0 6
25727: PPUSH
25728: CALL_OW 257
25732: PUSH
25733: LD_INT 14
25735: EQUAL
25736: IFFALSE 25757
// points := [ 10 , 0 , 0 ] ;
25738: LD_ADDR_VAR 0 9
25742: PUSH
25743: LD_INT 10
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: LIST
25756: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25757: LD_VAR 0 6
25761: PPUSH
25762: CALL_OW 257
25766: PUSH
25767: LD_INT 11
25769: EQUAL
25770: IFFALSE 25791
// points := [ 30 , 10 , 5 ] ;
25772: LD_ADDR_VAR 0 9
25776: PUSH
25777: LD_INT 30
25779: PUSH
25780: LD_INT 10
25782: PUSH
25783: LD_INT 5
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: LIST
25790: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25791: LD_VAR 0 1
25795: PPUSH
25796: LD_INT 5
25798: PPUSH
25799: CALL_OW 321
25803: PUSH
25804: LD_INT 2
25806: EQUAL
25807: IFFALSE 25824
// bpoints := bpoints * 1.8 ;
25809: LD_ADDR_VAR 0 10
25813: PUSH
25814: LD_VAR 0 10
25818: PUSH
25819: LD_REAL  1.80000000000000E+0000
25822: MUL
25823: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25824: LD_VAR 0 6
25828: PPUSH
25829: CALL_OW 257
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: LD_INT 2
25839: PUSH
25840: LD_INT 3
25842: PUSH
25843: LD_INT 4
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: IN
25852: PUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: LD_INT 51
25860: PPUSH
25861: CALL_OW 321
25865: PUSH
25866: LD_INT 2
25868: EQUAL
25869: AND
25870: IFFALSE 25887
// bpoints := bpoints * 1.2 ;
25872: LD_ADDR_VAR 0 10
25876: PUSH
25877: LD_VAR 0 10
25881: PUSH
25882: LD_REAL  1.20000000000000E+0000
25885: MUL
25886: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25887: LD_VAR 0 6
25891: PPUSH
25892: CALL_OW 257
25896: PUSH
25897: LD_INT 5
25899: PUSH
25900: LD_INT 7
25902: PUSH
25903: LD_INT 9
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: LIST
25910: IN
25911: PUSH
25912: LD_VAR 0 1
25916: PPUSH
25917: LD_INT 52
25919: PPUSH
25920: CALL_OW 321
25924: PUSH
25925: LD_INT 2
25927: EQUAL
25928: AND
25929: IFFALSE 25946
// bpoints := bpoints * 1.5 ;
25931: LD_ADDR_VAR 0 10
25935: PUSH
25936: LD_VAR 0 10
25940: PUSH
25941: LD_REAL  1.50000000000000E+0000
25944: MUL
25945: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25946: LD_VAR 0 1
25950: PPUSH
25951: LD_INT 66
25953: PPUSH
25954: CALL_OW 321
25958: PUSH
25959: LD_INT 2
25961: EQUAL
25962: IFFALSE 25979
// bpoints := bpoints * 1.1 ;
25964: LD_ADDR_VAR 0 10
25968: PUSH
25969: LD_VAR 0 10
25973: PUSH
25974: LD_REAL  1.10000000000000E+0000
25977: MUL
25978: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25979: LD_ADDR_VAR 0 10
25983: PUSH
25984: LD_VAR 0 10
25988: PUSH
25989: LD_VAR 0 6
25993: PPUSH
25994: LD_INT 1
25996: PPUSH
25997: CALL_OW 259
26001: PUSH
26002: LD_REAL  1.15000000000000E+0000
26005: MUL
26006: MUL
26007: ST_TO_ADDR
// end ; unit_vehicle :
26008: GO 26838
26010: LD_INT 2
26012: DOUBLE
26013: EQUAL
26014: IFTRUE 26018
26016: GO 26826
26018: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26019: LD_VAR 0 6
26023: PPUSH
26024: CALL_OW 264
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 42
26034: PUSH
26035: LD_INT 24
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: LIST
26042: IN
26043: IFFALSE 26064
// points := [ 25 , 5 , 3 ] ;
26045: LD_ADDR_VAR 0 9
26049: PUSH
26050: LD_INT 25
26052: PUSH
26053: LD_INT 5
26055: PUSH
26056: LD_INT 3
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: LIST
26063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26064: LD_VAR 0 6
26068: PPUSH
26069: CALL_OW 264
26073: PUSH
26074: LD_INT 4
26076: PUSH
26077: LD_INT 43
26079: PUSH
26080: LD_INT 25
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: IN
26088: IFFALSE 26109
// points := [ 40 , 15 , 5 ] ;
26090: LD_ADDR_VAR 0 9
26094: PUSH
26095: LD_INT 40
26097: PUSH
26098: LD_INT 15
26100: PUSH
26101: LD_INT 5
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: LIST
26108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26109: LD_VAR 0 6
26113: PPUSH
26114: CALL_OW 264
26118: PUSH
26119: LD_INT 3
26121: PUSH
26122: LD_INT 23
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: IN
26129: IFFALSE 26150
// points := [ 7 , 25 , 8 ] ;
26131: LD_ADDR_VAR 0 9
26135: PUSH
26136: LD_INT 7
26138: PUSH
26139: LD_INT 25
26141: PUSH
26142: LD_INT 8
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: LIST
26149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26150: LD_VAR 0 6
26154: PPUSH
26155: CALL_OW 264
26159: PUSH
26160: LD_INT 5
26162: PUSH
26163: LD_INT 27
26165: PUSH
26166: LD_INT 44
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: LIST
26173: IN
26174: IFFALSE 26195
// points := [ 14 , 50 , 16 ] ;
26176: LD_ADDR_VAR 0 9
26180: PUSH
26181: LD_INT 14
26183: PUSH
26184: LD_INT 50
26186: PUSH
26187: LD_INT 16
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: LIST
26194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26195: LD_VAR 0 6
26199: PPUSH
26200: CALL_OW 264
26204: PUSH
26205: LD_INT 6
26207: PUSH
26208: LD_INT 46
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: IN
26215: IFFALSE 26236
// points := [ 32 , 120 , 70 ] ;
26217: LD_ADDR_VAR 0 9
26221: PUSH
26222: LD_INT 32
26224: PUSH
26225: LD_INT 120
26227: PUSH
26228: LD_INT 70
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: LIST
26235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26236: LD_VAR 0 6
26240: PPUSH
26241: CALL_OW 264
26245: PUSH
26246: LD_INT 7
26248: PUSH
26249: LD_INT 28
26251: PUSH
26252: LD_INT 45
26254: PUSH
26255: LD_EXP 75
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: IN
26266: IFFALSE 26287
// points := [ 35 , 20 , 45 ] ;
26268: LD_ADDR_VAR 0 9
26272: PUSH
26273: LD_INT 35
26275: PUSH
26276: LD_INT 20
26278: PUSH
26279: LD_INT 45
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: LIST
26286: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26287: LD_VAR 0 6
26291: PPUSH
26292: CALL_OW 264
26296: PUSH
26297: LD_INT 47
26299: PUSH
26300: EMPTY
26301: LIST
26302: IN
26303: IFFALSE 26324
// points := [ 67 , 45 , 75 ] ;
26305: LD_ADDR_VAR 0 9
26309: PUSH
26310: LD_INT 67
26312: PUSH
26313: LD_INT 45
26315: PUSH
26316: LD_INT 75
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: LIST
26323: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26324: LD_VAR 0 6
26328: PPUSH
26329: CALL_OW 264
26333: PUSH
26334: LD_INT 26
26336: PUSH
26337: EMPTY
26338: LIST
26339: IN
26340: IFFALSE 26361
// points := [ 120 , 30 , 80 ] ;
26342: LD_ADDR_VAR 0 9
26346: PUSH
26347: LD_INT 120
26349: PUSH
26350: LD_INT 30
26352: PUSH
26353: LD_INT 80
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: LIST
26360: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26361: LD_VAR 0 6
26365: PPUSH
26366: CALL_OW 264
26370: PUSH
26371: LD_INT 22
26373: PUSH
26374: EMPTY
26375: LIST
26376: IN
26377: IFFALSE 26398
// points := [ 40 , 1 , 1 ] ;
26379: LD_ADDR_VAR 0 9
26383: PUSH
26384: LD_INT 40
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: LIST
26397: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26398: LD_VAR 0 6
26402: PPUSH
26403: CALL_OW 264
26407: PUSH
26408: LD_INT 29
26410: PUSH
26411: EMPTY
26412: LIST
26413: IN
26414: IFFALSE 26435
// points := [ 70 , 200 , 400 ] ;
26416: LD_ADDR_VAR 0 9
26420: PUSH
26421: LD_INT 70
26423: PUSH
26424: LD_INT 200
26426: PUSH
26427: LD_INT 400
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: LIST
26434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26435: LD_VAR 0 6
26439: PPUSH
26440: CALL_OW 264
26444: PUSH
26445: LD_INT 14
26447: PUSH
26448: LD_INT 53
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: IN
26455: IFFALSE 26476
// points := [ 40 , 10 , 20 ] ;
26457: LD_ADDR_VAR 0 9
26461: PUSH
26462: LD_INT 40
26464: PUSH
26465: LD_INT 10
26467: PUSH
26468: LD_INT 20
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: LIST
26475: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26476: LD_VAR 0 6
26480: PPUSH
26481: CALL_OW 264
26485: PUSH
26486: LD_INT 9
26488: PUSH
26489: EMPTY
26490: LIST
26491: IN
26492: IFFALSE 26513
// points := [ 5 , 70 , 20 ] ;
26494: LD_ADDR_VAR 0 9
26498: PUSH
26499: LD_INT 5
26501: PUSH
26502: LD_INT 70
26504: PUSH
26505: LD_INT 20
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: LIST
26512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26513: LD_VAR 0 6
26517: PPUSH
26518: CALL_OW 264
26522: PUSH
26523: LD_INT 10
26525: PUSH
26526: EMPTY
26527: LIST
26528: IN
26529: IFFALSE 26550
// points := [ 35 , 110 , 70 ] ;
26531: LD_ADDR_VAR 0 9
26535: PUSH
26536: LD_INT 35
26538: PUSH
26539: LD_INT 110
26541: PUSH
26542: LD_INT 70
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: LIST
26549: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26550: LD_VAR 0 6
26554: PPUSH
26555: CALL_OW 265
26559: PUSH
26560: LD_INT 25
26562: EQUAL
26563: IFFALSE 26584
// points := [ 80 , 65 , 100 ] ;
26565: LD_ADDR_VAR 0 9
26569: PUSH
26570: LD_INT 80
26572: PUSH
26573: LD_INT 65
26575: PUSH
26576: LD_INT 100
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: LIST
26583: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26584: LD_VAR 0 6
26588: PPUSH
26589: CALL_OW 263
26593: PUSH
26594: LD_INT 1
26596: EQUAL
26597: IFFALSE 26632
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26599: LD_ADDR_VAR 0 10
26603: PUSH
26604: LD_VAR 0 10
26608: PUSH
26609: LD_VAR 0 6
26613: PPUSH
26614: CALL_OW 311
26618: PPUSH
26619: LD_INT 3
26621: PPUSH
26622: CALL_OW 259
26626: PUSH
26627: LD_INT 4
26629: MUL
26630: MUL
26631: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26632: LD_VAR 0 6
26636: PPUSH
26637: CALL_OW 263
26641: PUSH
26642: LD_INT 2
26644: EQUAL
26645: IFFALSE 26696
// begin j := IsControledBy ( i ) ;
26647: LD_ADDR_VAR 0 7
26651: PUSH
26652: LD_VAR 0 6
26656: PPUSH
26657: CALL_OW 312
26661: ST_TO_ADDR
// if j then
26662: LD_VAR 0 7
26666: IFFALSE 26696
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26668: LD_ADDR_VAR 0 10
26672: PUSH
26673: LD_VAR 0 10
26677: PUSH
26678: LD_VAR 0 7
26682: PPUSH
26683: LD_INT 3
26685: PPUSH
26686: CALL_OW 259
26690: PUSH
26691: LD_INT 3
26693: MUL
26694: MUL
26695: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26696: LD_VAR 0 6
26700: PPUSH
26701: CALL_OW 264
26705: PUSH
26706: LD_INT 5
26708: PUSH
26709: LD_INT 6
26711: PUSH
26712: LD_INT 46
26714: PUSH
26715: LD_INT 44
26717: PUSH
26718: LD_INT 47
26720: PUSH
26721: LD_INT 45
26723: PUSH
26724: LD_INT 28
26726: PUSH
26727: LD_INT 7
26729: PUSH
26730: LD_INT 27
26732: PUSH
26733: LD_INT 29
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: IN
26748: PUSH
26749: LD_VAR 0 1
26753: PPUSH
26754: LD_INT 52
26756: PPUSH
26757: CALL_OW 321
26761: PUSH
26762: LD_INT 2
26764: EQUAL
26765: AND
26766: IFFALSE 26783
// bpoints := bpoints * 1.2 ;
26768: LD_ADDR_VAR 0 10
26772: PUSH
26773: LD_VAR 0 10
26777: PUSH
26778: LD_REAL  1.20000000000000E+0000
26781: MUL
26782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26783: LD_VAR 0 6
26787: PPUSH
26788: CALL_OW 264
26792: PUSH
26793: LD_INT 6
26795: PUSH
26796: LD_INT 46
26798: PUSH
26799: LD_INT 47
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: IN
26807: IFFALSE 26824
// bpoints := bpoints * 1.2 ;
26809: LD_ADDR_VAR 0 10
26813: PUSH
26814: LD_VAR 0 10
26818: PUSH
26819: LD_REAL  1.20000000000000E+0000
26822: MUL
26823: ST_TO_ADDR
// end ; unit_building :
26824: GO 26838
26826: LD_INT 3
26828: DOUBLE
26829: EQUAL
26830: IFTRUE 26834
26832: GO 26837
26834: POP
// ; end ;
26835: GO 26838
26837: POP
// for j = 1 to 3 do
26838: LD_ADDR_VAR 0 7
26842: PUSH
26843: DOUBLE
26844: LD_INT 1
26846: DEC
26847: ST_TO_ADDR
26848: LD_INT 3
26850: PUSH
26851: FOR_TO
26852: IFFALSE 26905
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26854: LD_ADDR_VAR 0 5
26858: PUSH
26859: LD_VAR 0 5
26863: PPUSH
26864: LD_VAR 0 7
26868: PPUSH
26869: LD_VAR 0 5
26873: PUSH
26874: LD_VAR 0 7
26878: ARRAY
26879: PUSH
26880: LD_VAR 0 9
26884: PUSH
26885: LD_VAR 0 7
26889: ARRAY
26890: PUSH
26891: LD_VAR 0 10
26895: MUL
26896: PLUS
26897: PPUSH
26898: CALL_OW 1
26902: ST_TO_ADDR
26903: GO 26851
26905: POP
26906: POP
// end ;
26907: GO 25384
26909: POP
26910: POP
// result := Replace ( result , 4 , tmp ) ;
26911: LD_ADDR_VAR 0 5
26915: PUSH
26916: LD_VAR 0 5
26920: PPUSH
26921: LD_INT 4
26923: PPUSH
26924: LD_VAR 0 8
26928: PPUSH
26929: CALL_OW 1
26933: ST_TO_ADDR
// end ;
26934: LD_VAR 0 5
26938: RET
// export function DangerAtRange ( unit , range ) ; begin
26939: LD_INT 0
26941: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26942: LD_ADDR_VAR 0 3
26946: PUSH
26947: LD_VAR 0 1
26951: PPUSH
26952: CALL_OW 255
26956: PPUSH
26957: LD_VAR 0 1
26961: PPUSH
26962: CALL_OW 250
26966: PPUSH
26967: LD_VAR 0 1
26971: PPUSH
26972: CALL_OW 251
26976: PPUSH
26977: LD_VAR 0 2
26981: PPUSH
26982: CALL 25236 0 4
26986: ST_TO_ADDR
// end ;
26987: LD_VAR 0 3
26991: RET
// export function DangerInArea ( side , area ) ; begin
26992: LD_INT 0
26994: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26995: LD_ADDR_VAR 0 3
26999: PUSH
27000: LD_VAR 0 2
27004: PPUSH
27005: LD_INT 81
27007: PUSH
27008: LD_VAR 0 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PPUSH
27017: CALL_OW 70
27021: ST_TO_ADDR
// end ;
27022: LD_VAR 0 3
27026: RET
// export function IsExtension ( b ) ; begin
27027: LD_INT 0
27029: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27030: LD_ADDR_VAR 0 2
27034: PUSH
27035: LD_VAR 0 1
27039: PUSH
27040: LD_INT 23
27042: PUSH
27043: LD_INT 20
27045: PUSH
27046: LD_INT 22
27048: PUSH
27049: LD_INT 17
27051: PUSH
27052: LD_INT 24
27054: PUSH
27055: LD_INT 21
27057: PUSH
27058: LD_INT 19
27060: PUSH
27061: LD_INT 16
27063: PUSH
27064: LD_INT 25
27066: PUSH
27067: LD_INT 18
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: IN
27082: ST_TO_ADDR
// end ;
27083: LD_VAR 0 2
27087: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27088: LD_INT 0
27090: PPUSH
27091: PPUSH
27092: PPUSH
// result := [ ] ;
27093: LD_ADDR_VAR 0 4
27097: PUSH
27098: EMPTY
27099: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27100: LD_ADDR_VAR 0 5
27104: PUSH
27105: LD_VAR 0 2
27109: PPUSH
27110: LD_INT 21
27112: PUSH
27113: LD_INT 3
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PPUSH
27120: CALL_OW 70
27124: ST_TO_ADDR
// if not tmp then
27125: LD_VAR 0 5
27129: NOT
27130: IFFALSE 27134
// exit ;
27132: GO 27198
// if checkLink then
27134: LD_VAR 0 3
27138: IFFALSE 27188
// begin for i in tmp do
27140: LD_ADDR_VAR 0 6
27144: PUSH
27145: LD_VAR 0 5
27149: PUSH
27150: FOR_IN
27151: IFFALSE 27186
// if GetBase ( i ) <> base then
27153: LD_VAR 0 6
27157: PPUSH
27158: CALL_OW 274
27162: PUSH
27163: LD_VAR 0 1
27167: NONEQUAL
27168: IFFALSE 27184
// ComLinkToBase ( base , i ) ;
27170: LD_VAR 0 1
27174: PPUSH
27175: LD_VAR 0 6
27179: PPUSH
27180: CALL_OW 169
27184: GO 27150
27186: POP
27187: POP
// end ; result := tmp ;
27188: LD_ADDR_VAR 0 4
27192: PUSH
27193: LD_VAR 0 5
27197: ST_TO_ADDR
// end ;
27198: LD_VAR 0 4
27202: RET
// export function ComComplete ( units , b ) ; var i ; begin
27203: LD_INT 0
27205: PPUSH
27206: PPUSH
// if not units then
27207: LD_VAR 0 1
27211: NOT
27212: IFFALSE 27216
// exit ;
27214: GO 27306
// for i in units do
27216: LD_ADDR_VAR 0 4
27220: PUSH
27221: LD_VAR 0 1
27225: PUSH
27226: FOR_IN
27227: IFFALSE 27304
// if BuildingStatus ( b ) = bs_build then
27229: LD_VAR 0 2
27233: PPUSH
27234: CALL_OW 461
27238: PUSH
27239: LD_INT 1
27241: EQUAL
27242: IFFALSE 27302
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27244: LD_VAR 0 4
27248: PPUSH
27249: LD_STRING h
27251: PUSH
27252: LD_VAR 0 2
27256: PPUSH
27257: CALL_OW 250
27261: PUSH
27262: LD_VAR 0 2
27266: PPUSH
27267: CALL_OW 251
27271: PUSH
27272: LD_VAR 0 2
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: LD_INT 0
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: PUSH
27295: EMPTY
27296: LIST
27297: PPUSH
27298: CALL_OW 446
27302: GO 27226
27304: POP
27305: POP
// end ;
27306: LD_VAR 0 3
27310: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27311: LD_INT 0
27313: PPUSH
27314: PPUSH
27315: PPUSH
27316: PPUSH
27317: PPUSH
27318: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27319: LD_VAR 0 1
27323: NOT
27324: PUSH
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL_OW 263
27334: PUSH
27335: LD_INT 2
27337: NONEQUAL
27338: OR
27339: IFFALSE 27343
// exit ;
27341: GO 27659
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27343: LD_ADDR_VAR 0 6
27347: PUSH
27348: LD_INT 22
27350: PUSH
27351: LD_VAR 0 1
27355: PPUSH
27356: CALL_OW 255
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: LD_INT 30
27370: PUSH
27371: LD_INT 36
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 34
27380: PUSH
27381: LD_INT 31
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: LIST
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PPUSH
27397: CALL_OW 69
27401: ST_TO_ADDR
// if not tmp then
27402: LD_VAR 0 6
27406: NOT
27407: IFFALSE 27411
// exit ;
27409: GO 27659
// result := [ ] ;
27411: LD_ADDR_VAR 0 2
27415: PUSH
27416: EMPTY
27417: ST_TO_ADDR
// for i in tmp do
27418: LD_ADDR_VAR 0 3
27422: PUSH
27423: LD_VAR 0 6
27427: PUSH
27428: FOR_IN
27429: IFFALSE 27500
// begin t := UnitsInside ( i ) ;
27431: LD_ADDR_VAR 0 4
27435: PUSH
27436: LD_VAR 0 3
27440: PPUSH
27441: CALL_OW 313
27445: ST_TO_ADDR
// if t then
27446: LD_VAR 0 4
27450: IFFALSE 27498
// for j in t do
27452: LD_ADDR_VAR 0 7
27456: PUSH
27457: LD_VAR 0 4
27461: PUSH
27462: FOR_IN
27463: IFFALSE 27496
// result := Replace ( result , result + 1 , j ) ;
27465: LD_ADDR_VAR 0 2
27469: PUSH
27470: LD_VAR 0 2
27474: PPUSH
27475: LD_VAR 0 2
27479: PUSH
27480: LD_INT 1
27482: PLUS
27483: PPUSH
27484: LD_VAR 0 7
27488: PPUSH
27489: CALL_OW 1
27493: ST_TO_ADDR
27494: GO 27462
27496: POP
27497: POP
// end ;
27498: GO 27428
27500: POP
27501: POP
// if not result then
27502: LD_VAR 0 2
27506: NOT
27507: IFFALSE 27511
// exit ;
27509: GO 27659
// mech := result [ 1 ] ;
27511: LD_ADDR_VAR 0 5
27515: PUSH
27516: LD_VAR 0 2
27520: PUSH
27521: LD_INT 1
27523: ARRAY
27524: ST_TO_ADDR
// if result > 1 then
27525: LD_VAR 0 2
27529: PUSH
27530: LD_INT 1
27532: GREATER
27533: IFFALSE 27645
// begin for i = 2 to result do
27535: LD_ADDR_VAR 0 3
27539: PUSH
27540: DOUBLE
27541: LD_INT 2
27543: DEC
27544: ST_TO_ADDR
27545: LD_VAR 0 2
27549: PUSH
27550: FOR_TO
27551: IFFALSE 27643
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27553: LD_ADDR_VAR 0 4
27557: PUSH
27558: LD_VAR 0 2
27562: PUSH
27563: LD_VAR 0 3
27567: ARRAY
27568: PPUSH
27569: LD_INT 3
27571: PPUSH
27572: CALL_OW 259
27576: PUSH
27577: LD_VAR 0 2
27581: PUSH
27582: LD_VAR 0 3
27586: ARRAY
27587: PPUSH
27588: CALL_OW 432
27592: MINUS
27593: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27594: LD_VAR 0 4
27598: PUSH
27599: LD_VAR 0 5
27603: PPUSH
27604: LD_INT 3
27606: PPUSH
27607: CALL_OW 259
27611: PUSH
27612: LD_VAR 0 5
27616: PPUSH
27617: CALL_OW 432
27621: MINUS
27622: GREATEREQUAL
27623: IFFALSE 27641
// mech := result [ i ] ;
27625: LD_ADDR_VAR 0 5
27629: PUSH
27630: LD_VAR 0 2
27634: PUSH
27635: LD_VAR 0 3
27639: ARRAY
27640: ST_TO_ADDR
// end ;
27641: GO 27550
27643: POP
27644: POP
// end ; ComLinkTo ( vehicle , mech ) ;
27645: LD_VAR 0 1
27649: PPUSH
27650: LD_VAR 0 5
27654: PPUSH
27655: CALL_OW 135
// end ;
27659: LD_VAR 0 2
27663: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27664: LD_INT 0
27666: PPUSH
27667: PPUSH
27668: PPUSH
27669: PPUSH
27670: PPUSH
27671: PPUSH
27672: PPUSH
27673: PPUSH
27674: PPUSH
27675: PPUSH
27676: PPUSH
27677: PPUSH
27678: PPUSH
// result := [ ] ;
27679: LD_ADDR_VAR 0 7
27683: PUSH
27684: EMPTY
27685: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27686: LD_VAR 0 1
27690: PPUSH
27691: CALL_OW 266
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: LD_INT 1
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: IN
27706: NOT
27707: IFFALSE 27711
// exit ;
27709: GO 29345
// if name then
27711: LD_VAR 0 3
27715: IFFALSE 27731
// SetBName ( base_dep , name ) ;
27717: LD_VAR 0 1
27721: PPUSH
27722: LD_VAR 0 3
27726: PPUSH
27727: CALL_OW 500
// base := GetBase ( base_dep ) ;
27731: LD_ADDR_VAR 0 15
27735: PUSH
27736: LD_VAR 0 1
27740: PPUSH
27741: CALL_OW 274
27745: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27746: LD_ADDR_VAR 0 16
27750: PUSH
27751: LD_VAR 0 1
27755: PPUSH
27756: CALL_OW 255
27760: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27761: LD_ADDR_VAR 0 17
27765: PUSH
27766: LD_VAR 0 1
27770: PPUSH
27771: CALL_OW 248
27775: ST_TO_ADDR
// if sources then
27776: LD_VAR 0 5
27780: IFFALSE 27827
// for i = 1 to 3 do
27782: LD_ADDR_VAR 0 8
27786: PUSH
27787: DOUBLE
27788: LD_INT 1
27790: DEC
27791: ST_TO_ADDR
27792: LD_INT 3
27794: PUSH
27795: FOR_TO
27796: IFFALSE 27825
// AddResourceType ( base , i , sources [ i ] ) ;
27798: LD_VAR 0 15
27802: PPUSH
27803: LD_VAR 0 8
27807: PPUSH
27808: LD_VAR 0 5
27812: PUSH
27813: LD_VAR 0 8
27817: ARRAY
27818: PPUSH
27819: CALL_OW 276
27823: GO 27795
27825: POP
27826: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
27827: LD_ADDR_VAR 0 18
27831: PUSH
27832: LD_VAR 0 15
27836: PPUSH
27837: LD_VAR 0 2
27841: PPUSH
27842: LD_INT 1
27844: PPUSH
27845: CALL 27088 0 3
27849: ST_TO_ADDR
// InitHc ;
27850: CALL_OW 19
// InitUc ;
27854: CALL_OW 18
// uc_side := side ;
27858: LD_ADDR_OWVAR 20
27862: PUSH
27863: LD_VAR 0 16
27867: ST_TO_ADDR
// uc_nation := nation ;
27868: LD_ADDR_OWVAR 21
27872: PUSH
27873: LD_VAR 0 17
27877: ST_TO_ADDR
// if buildings then
27878: LD_VAR 0 18
27882: IFFALSE 29204
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27884: LD_ADDR_VAR 0 19
27888: PUSH
27889: LD_VAR 0 18
27893: PPUSH
27894: LD_INT 2
27896: PUSH
27897: LD_INT 30
27899: PUSH
27900: LD_INT 29
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 30
27909: PUSH
27910: LD_INT 30
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: LIST
27921: PPUSH
27922: CALL_OW 72
27926: ST_TO_ADDR
// if tmp then
27927: LD_VAR 0 19
27931: IFFALSE 27979
// for i in tmp do
27933: LD_ADDR_VAR 0 8
27937: PUSH
27938: LD_VAR 0 19
27942: PUSH
27943: FOR_IN
27944: IFFALSE 27977
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27946: LD_VAR 0 8
27950: PPUSH
27951: CALL_OW 250
27955: PPUSH
27956: LD_VAR 0 8
27960: PPUSH
27961: CALL_OW 251
27965: PPUSH
27966: LD_VAR 0 16
27970: PPUSH
27971: CALL_OW 441
27975: GO 27943
27977: POP
27978: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27979: LD_VAR 0 18
27983: PPUSH
27984: LD_INT 2
27986: PUSH
27987: LD_INT 30
27989: PUSH
27990: LD_INT 32
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 30
27999: PUSH
28000: LD_INT 33
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: LIST
28011: PPUSH
28012: CALL_OW 72
28016: IFFALSE 28104
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28018: LD_ADDR_VAR 0 8
28022: PUSH
28023: LD_VAR 0 18
28027: PPUSH
28028: LD_INT 2
28030: PUSH
28031: LD_INT 30
28033: PUSH
28034: LD_INT 32
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 30
28043: PUSH
28044: LD_INT 33
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: LIST
28055: PPUSH
28056: CALL_OW 72
28060: PUSH
28061: FOR_IN
28062: IFFALSE 28102
// begin if not GetBWeapon ( i ) then
28064: LD_VAR 0 8
28068: PPUSH
28069: CALL_OW 269
28073: NOT
28074: IFFALSE 28100
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28076: LD_VAR 0 8
28080: PPUSH
28081: LD_VAR 0 8
28085: PPUSH
28086: LD_VAR 0 2
28090: PPUSH
28091: CALL 29350 0 2
28095: PPUSH
28096: CALL_OW 431
// end ;
28100: GO 28061
28102: POP
28103: POP
// end ; for i = 1 to personel do
28104: LD_ADDR_VAR 0 8
28108: PUSH
28109: DOUBLE
28110: LD_INT 1
28112: DEC
28113: ST_TO_ADDR
28114: LD_VAR 0 6
28118: PUSH
28119: FOR_TO
28120: IFFALSE 29184
// begin if i > 4 then
28122: LD_VAR 0 8
28126: PUSH
28127: LD_INT 4
28129: GREATER
28130: IFFALSE 28134
// break ;
28132: GO 29184
// case i of 1 :
28134: LD_VAR 0 8
28138: PUSH
28139: LD_INT 1
28141: DOUBLE
28142: EQUAL
28143: IFTRUE 28147
28145: GO 28227
28147: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28148: LD_ADDR_VAR 0 12
28152: PUSH
28153: LD_VAR 0 18
28157: PPUSH
28158: LD_INT 22
28160: PUSH
28161: LD_VAR 0 16
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 58
28172: PUSH
28173: EMPTY
28174: LIST
28175: PUSH
28176: LD_INT 2
28178: PUSH
28179: LD_INT 30
28181: PUSH
28182: LD_INT 32
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 30
28191: PUSH
28192: LD_INT 4
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 30
28201: PUSH
28202: LD_INT 5
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: PPUSH
28220: CALL_OW 72
28224: ST_TO_ADDR
28225: GO 28449
28227: LD_INT 2
28229: DOUBLE
28230: EQUAL
28231: IFTRUE 28235
28233: GO 28297
28235: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28236: LD_ADDR_VAR 0 12
28240: PUSH
28241: LD_VAR 0 18
28245: PPUSH
28246: LD_INT 22
28248: PUSH
28249: LD_VAR 0 16
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 2
28260: PUSH
28261: LD_INT 30
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 30
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PPUSH
28290: CALL_OW 72
28294: ST_TO_ADDR
28295: GO 28449
28297: LD_INT 3
28299: DOUBLE
28300: EQUAL
28301: IFTRUE 28305
28303: GO 28367
28305: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28306: LD_ADDR_VAR 0 12
28310: PUSH
28311: LD_VAR 0 18
28315: PPUSH
28316: LD_INT 22
28318: PUSH
28319: LD_VAR 0 16
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 2
28330: PUSH
28331: LD_INT 30
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 30
28343: PUSH
28344: LD_INT 3
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: LIST
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PPUSH
28360: CALL_OW 72
28364: ST_TO_ADDR
28365: GO 28449
28367: LD_INT 4
28369: DOUBLE
28370: EQUAL
28371: IFTRUE 28375
28373: GO 28448
28375: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28376: LD_ADDR_VAR 0 12
28380: PUSH
28381: LD_VAR 0 18
28385: PPUSH
28386: LD_INT 22
28388: PUSH
28389: LD_VAR 0 16
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 2
28400: PUSH
28401: LD_INT 30
28403: PUSH
28404: LD_INT 6
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 30
28413: PUSH
28414: LD_INT 7
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 30
28423: PUSH
28424: LD_INT 8
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PPUSH
28441: CALL_OW 72
28445: ST_TO_ADDR
28446: GO 28449
28448: POP
// if i = 1 then
28449: LD_VAR 0 8
28453: PUSH
28454: LD_INT 1
28456: EQUAL
28457: IFFALSE 28568
// begin tmp := [ ] ;
28459: LD_ADDR_VAR 0 19
28463: PUSH
28464: EMPTY
28465: ST_TO_ADDR
// for j in f do
28466: LD_ADDR_VAR 0 9
28470: PUSH
28471: LD_VAR 0 12
28475: PUSH
28476: FOR_IN
28477: IFFALSE 28550
// if GetBType ( j ) = b_bunker then
28479: LD_VAR 0 9
28483: PPUSH
28484: CALL_OW 266
28488: PUSH
28489: LD_INT 32
28491: EQUAL
28492: IFFALSE 28519
// tmp := Insert ( tmp , 1 , j ) else
28494: LD_ADDR_VAR 0 19
28498: PUSH
28499: LD_VAR 0 19
28503: PPUSH
28504: LD_INT 1
28506: PPUSH
28507: LD_VAR 0 9
28511: PPUSH
28512: CALL_OW 2
28516: ST_TO_ADDR
28517: GO 28548
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28519: LD_ADDR_VAR 0 19
28523: PUSH
28524: LD_VAR 0 19
28528: PPUSH
28529: LD_VAR 0 19
28533: PUSH
28534: LD_INT 1
28536: PLUS
28537: PPUSH
28538: LD_VAR 0 9
28542: PPUSH
28543: CALL_OW 2
28547: ST_TO_ADDR
28548: GO 28476
28550: POP
28551: POP
// if tmp then
28552: LD_VAR 0 19
28556: IFFALSE 28568
// f := tmp ;
28558: LD_ADDR_VAR 0 12
28562: PUSH
28563: LD_VAR 0 19
28567: ST_TO_ADDR
// end ; x := personel [ i ] ;
28568: LD_ADDR_VAR 0 13
28572: PUSH
28573: LD_VAR 0 6
28577: PUSH
28578: LD_VAR 0 8
28582: ARRAY
28583: ST_TO_ADDR
// if x = - 1 then
28584: LD_VAR 0 13
28588: PUSH
28589: LD_INT 1
28591: NEG
28592: EQUAL
28593: IFFALSE 28802
// begin for j in f do
28595: LD_ADDR_VAR 0 9
28599: PUSH
28600: LD_VAR 0 12
28604: PUSH
28605: FOR_IN
28606: IFFALSE 28798
// repeat InitHc ;
28608: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28612: LD_VAR 0 9
28616: PPUSH
28617: CALL_OW 266
28621: PUSH
28622: LD_INT 5
28624: EQUAL
28625: IFFALSE 28695
// begin if UnitsInside ( j ) < 3 then
28627: LD_VAR 0 9
28631: PPUSH
28632: CALL_OW 313
28636: PUSH
28637: LD_INT 3
28639: LESS
28640: IFFALSE 28676
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28642: LD_INT 0
28644: PPUSH
28645: LD_INT 5
28647: PUSH
28648: LD_INT 8
28650: PUSH
28651: LD_INT 9
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: LIST
28658: PUSH
28659: LD_VAR 0 17
28663: ARRAY
28664: PPUSH
28665: LD_VAR 0 4
28669: PPUSH
28670: CALL_OW 380
28674: GO 28693
// PrepareHuman ( false , i , skill ) ;
28676: LD_INT 0
28678: PPUSH
28679: LD_VAR 0 8
28683: PPUSH
28684: LD_VAR 0 4
28688: PPUSH
28689: CALL_OW 380
// end else
28693: GO 28712
// PrepareHuman ( false , i , skill ) ;
28695: LD_INT 0
28697: PPUSH
28698: LD_VAR 0 8
28702: PPUSH
28703: LD_VAR 0 4
28707: PPUSH
28708: CALL_OW 380
// un := CreateHuman ;
28712: LD_ADDR_VAR 0 14
28716: PUSH
28717: CALL_OW 44
28721: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28722: LD_ADDR_VAR 0 7
28726: PUSH
28727: LD_VAR 0 7
28731: PPUSH
28732: LD_INT 1
28734: PPUSH
28735: LD_VAR 0 14
28739: PPUSH
28740: CALL_OW 2
28744: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28745: LD_VAR 0 14
28749: PPUSH
28750: LD_VAR 0 9
28754: PPUSH
28755: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28759: LD_VAR 0 9
28763: PPUSH
28764: CALL_OW 313
28768: PUSH
28769: LD_INT 6
28771: EQUAL
28772: PUSH
28773: LD_VAR 0 9
28777: PPUSH
28778: CALL_OW 266
28782: PUSH
28783: LD_INT 32
28785: PUSH
28786: LD_INT 31
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: IN
28793: OR
28794: IFFALSE 28608
28796: GO 28605
28798: POP
28799: POP
// end else
28800: GO 29182
// for j = 1 to x do
28802: LD_ADDR_VAR 0 9
28806: PUSH
28807: DOUBLE
28808: LD_INT 1
28810: DEC
28811: ST_TO_ADDR
28812: LD_VAR 0 13
28816: PUSH
28817: FOR_TO
28818: IFFALSE 29180
// begin InitHc ;
28820: CALL_OW 19
// if not f then
28824: LD_VAR 0 12
28828: NOT
28829: IFFALSE 28918
// begin PrepareHuman ( false , i , skill ) ;
28831: LD_INT 0
28833: PPUSH
28834: LD_VAR 0 8
28838: PPUSH
28839: LD_VAR 0 4
28843: PPUSH
28844: CALL_OW 380
// un := CreateHuman ;
28848: LD_ADDR_VAR 0 14
28852: PUSH
28853: CALL_OW 44
28857: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28858: LD_ADDR_VAR 0 7
28862: PUSH
28863: LD_VAR 0 7
28867: PPUSH
28868: LD_INT 1
28870: PPUSH
28871: LD_VAR 0 14
28875: PPUSH
28876: CALL_OW 2
28880: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28881: LD_VAR 0 14
28885: PPUSH
28886: LD_VAR 0 1
28890: PPUSH
28891: CALL_OW 250
28895: PPUSH
28896: LD_VAR 0 1
28900: PPUSH
28901: CALL_OW 251
28905: PPUSH
28906: LD_INT 10
28908: PPUSH
28909: LD_INT 0
28911: PPUSH
28912: CALL_OW 50
// continue ;
28916: GO 28817
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28918: LD_VAR 0 12
28922: PUSH
28923: LD_INT 1
28925: ARRAY
28926: PPUSH
28927: CALL_OW 313
28931: PUSH
28932: LD_VAR 0 12
28936: PUSH
28937: LD_INT 1
28939: ARRAY
28940: PPUSH
28941: CALL_OW 266
28945: PUSH
28946: LD_INT 32
28948: PUSH
28949: LD_INT 31
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: IN
28956: AND
28957: PUSH
28958: LD_VAR 0 12
28962: PUSH
28963: LD_INT 1
28965: ARRAY
28966: PPUSH
28967: CALL_OW 313
28971: PUSH
28972: LD_INT 6
28974: EQUAL
28975: OR
28976: IFFALSE 28996
// f := Delete ( f , 1 ) ;
28978: LD_ADDR_VAR 0 12
28982: PUSH
28983: LD_VAR 0 12
28987: PPUSH
28988: LD_INT 1
28990: PPUSH
28991: CALL_OW 3
28995: ST_TO_ADDR
// if not f then
28996: LD_VAR 0 12
29000: NOT
29001: IFFALSE 29019
// begin x := x + 2 ;
29003: LD_ADDR_VAR 0 13
29007: PUSH
29008: LD_VAR 0 13
29012: PUSH
29013: LD_INT 2
29015: PLUS
29016: ST_TO_ADDR
// continue ;
29017: GO 28817
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29019: LD_VAR 0 12
29023: PUSH
29024: LD_INT 1
29026: ARRAY
29027: PPUSH
29028: CALL_OW 266
29032: PUSH
29033: LD_INT 5
29035: EQUAL
29036: IFFALSE 29110
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29038: LD_VAR 0 12
29042: PUSH
29043: LD_INT 1
29045: ARRAY
29046: PPUSH
29047: CALL_OW 313
29051: PUSH
29052: LD_INT 3
29054: LESS
29055: IFFALSE 29091
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29057: LD_INT 0
29059: PPUSH
29060: LD_INT 5
29062: PUSH
29063: LD_INT 8
29065: PUSH
29066: LD_INT 9
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: LIST
29073: PUSH
29074: LD_VAR 0 17
29078: ARRAY
29079: PPUSH
29080: LD_VAR 0 4
29084: PPUSH
29085: CALL_OW 380
29089: GO 29108
// PrepareHuman ( false , i , skill ) ;
29091: LD_INT 0
29093: PPUSH
29094: LD_VAR 0 8
29098: PPUSH
29099: LD_VAR 0 4
29103: PPUSH
29104: CALL_OW 380
// end else
29108: GO 29127
// PrepareHuman ( false , i , skill ) ;
29110: LD_INT 0
29112: PPUSH
29113: LD_VAR 0 8
29117: PPUSH
29118: LD_VAR 0 4
29122: PPUSH
29123: CALL_OW 380
// un := CreateHuman ;
29127: LD_ADDR_VAR 0 14
29131: PUSH
29132: CALL_OW 44
29136: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29137: LD_ADDR_VAR 0 7
29141: PUSH
29142: LD_VAR 0 7
29146: PPUSH
29147: LD_INT 1
29149: PPUSH
29150: LD_VAR 0 14
29154: PPUSH
29155: CALL_OW 2
29159: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29160: LD_VAR 0 14
29164: PPUSH
29165: LD_VAR 0 12
29169: PUSH
29170: LD_INT 1
29172: ARRAY
29173: PPUSH
29174: CALL_OW 52
// end ;
29178: GO 28817
29180: POP
29181: POP
// end ;
29182: GO 28119
29184: POP
29185: POP
// result := result ^ buildings ;
29186: LD_ADDR_VAR 0 7
29190: PUSH
29191: LD_VAR 0 7
29195: PUSH
29196: LD_VAR 0 18
29200: ADD
29201: ST_TO_ADDR
// end else
29202: GO 29345
// begin for i = 1 to personel do
29204: LD_ADDR_VAR 0 8
29208: PUSH
29209: DOUBLE
29210: LD_INT 1
29212: DEC
29213: ST_TO_ADDR
29214: LD_VAR 0 6
29218: PUSH
29219: FOR_TO
29220: IFFALSE 29343
// begin if i > 4 then
29222: LD_VAR 0 8
29226: PUSH
29227: LD_INT 4
29229: GREATER
29230: IFFALSE 29234
// break ;
29232: GO 29343
// x := personel [ i ] ;
29234: LD_ADDR_VAR 0 13
29238: PUSH
29239: LD_VAR 0 6
29243: PUSH
29244: LD_VAR 0 8
29248: ARRAY
29249: ST_TO_ADDR
// if x = - 1 then
29250: LD_VAR 0 13
29254: PUSH
29255: LD_INT 1
29257: NEG
29258: EQUAL
29259: IFFALSE 29263
// continue ;
29261: GO 29219
// PrepareHuman ( false , i , skill ) ;
29263: LD_INT 0
29265: PPUSH
29266: LD_VAR 0 8
29270: PPUSH
29271: LD_VAR 0 4
29275: PPUSH
29276: CALL_OW 380
// un := CreateHuman ;
29280: LD_ADDR_VAR 0 14
29284: PUSH
29285: CALL_OW 44
29289: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29290: LD_VAR 0 14
29294: PPUSH
29295: LD_VAR 0 1
29299: PPUSH
29300: CALL_OW 250
29304: PPUSH
29305: LD_VAR 0 1
29309: PPUSH
29310: CALL_OW 251
29314: PPUSH
29315: LD_INT 10
29317: PPUSH
29318: LD_INT 0
29320: PPUSH
29321: CALL_OW 50
// result := result ^ un ;
29325: LD_ADDR_VAR 0 7
29329: PUSH
29330: LD_VAR 0 7
29334: PUSH
29335: LD_VAR 0 14
29339: ADD
29340: ST_TO_ADDR
// end ;
29341: GO 29219
29343: POP
29344: POP
// end ; end ;
29345: LD_VAR 0 7
29349: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29350: LD_INT 0
29352: PPUSH
29353: PPUSH
29354: PPUSH
29355: PPUSH
29356: PPUSH
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
// result := false ;
29368: LD_ADDR_VAR 0 3
29372: PUSH
29373: LD_INT 0
29375: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29376: LD_VAR 0 1
29380: NOT
29381: PUSH
29382: LD_VAR 0 1
29386: PPUSH
29387: CALL_OW 266
29391: PUSH
29392: LD_INT 32
29394: PUSH
29395: LD_INT 33
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: IN
29402: NOT
29403: OR
29404: IFFALSE 29408
// exit ;
29406: GO 30517
// nat := GetNation ( tower ) ;
29408: LD_ADDR_VAR 0 12
29412: PUSH
29413: LD_VAR 0 1
29417: PPUSH
29418: CALL_OW 248
29422: ST_TO_ADDR
// side := GetSide ( tower ) ;
29423: LD_ADDR_VAR 0 16
29427: PUSH
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 255
29437: ST_TO_ADDR
// x := GetX ( tower ) ;
29438: LD_ADDR_VAR 0 10
29442: PUSH
29443: LD_VAR 0 1
29447: PPUSH
29448: CALL_OW 250
29452: ST_TO_ADDR
// y := GetY ( tower ) ;
29453: LD_ADDR_VAR 0 11
29457: PUSH
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL_OW 251
29467: ST_TO_ADDR
// if not x or not y then
29468: LD_VAR 0 10
29472: NOT
29473: PUSH
29474: LD_VAR 0 11
29478: NOT
29479: OR
29480: IFFALSE 29484
// exit ;
29482: GO 30517
// weapon := 0 ;
29484: LD_ADDR_VAR 0 18
29488: PUSH
29489: LD_INT 0
29491: ST_TO_ADDR
// fac_list := [ ] ;
29492: LD_ADDR_VAR 0 17
29496: PUSH
29497: EMPTY
29498: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29499: LD_ADDR_VAR 0 6
29503: PUSH
29504: LD_VAR 0 1
29508: PPUSH
29509: CALL_OW 274
29513: PPUSH
29514: LD_VAR 0 2
29518: PPUSH
29519: LD_INT 0
29521: PPUSH
29522: CALL 27088 0 3
29526: PPUSH
29527: LD_INT 30
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PPUSH
29537: CALL_OW 72
29541: ST_TO_ADDR
// if not factories then
29542: LD_VAR 0 6
29546: NOT
29547: IFFALSE 29551
// exit ;
29549: GO 30517
// for i in factories do
29551: LD_ADDR_VAR 0 8
29555: PUSH
29556: LD_VAR 0 6
29560: PUSH
29561: FOR_IN
29562: IFFALSE 29587
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29564: LD_ADDR_VAR 0 17
29568: PUSH
29569: LD_VAR 0 17
29573: PUSH
29574: LD_VAR 0 8
29578: PPUSH
29579: CALL_OW 478
29583: UNION
29584: ST_TO_ADDR
29585: GO 29561
29587: POP
29588: POP
// if not fac_list then
29589: LD_VAR 0 17
29593: NOT
29594: IFFALSE 29598
// exit ;
29596: GO 30517
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29598: LD_ADDR_VAR 0 5
29602: PUSH
29603: LD_INT 4
29605: PUSH
29606: LD_INT 5
29608: PUSH
29609: LD_INT 9
29611: PUSH
29612: LD_INT 10
29614: PUSH
29615: LD_INT 6
29617: PUSH
29618: LD_INT 7
29620: PUSH
29621: LD_INT 11
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 27
29635: PUSH
29636: LD_INT 28
29638: PUSH
29639: LD_INT 26
29641: PUSH
29642: LD_INT 30
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 43
29653: PUSH
29654: LD_INT 44
29656: PUSH
29657: LD_INT 46
29659: PUSH
29660: LD_INT 45
29662: PUSH
29663: LD_INT 47
29665: PUSH
29666: LD_INT 49
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: LIST
29681: PUSH
29682: LD_VAR 0 12
29686: ARRAY
29687: ST_TO_ADDR
// list := list isect fac_list ;
29688: LD_ADDR_VAR 0 5
29692: PUSH
29693: LD_VAR 0 5
29697: PUSH
29698: LD_VAR 0 17
29702: ISECT
29703: ST_TO_ADDR
// if not list then
29704: LD_VAR 0 5
29708: NOT
29709: IFFALSE 29713
// exit ;
29711: GO 30517
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29713: LD_VAR 0 12
29717: PUSH
29718: LD_INT 3
29720: EQUAL
29721: PUSH
29722: LD_INT 49
29724: PUSH
29725: LD_VAR 0 5
29729: IN
29730: AND
29731: PUSH
29732: LD_INT 31
29734: PPUSH
29735: LD_VAR 0 16
29739: PPUSH
29740: CALL_OW 321
29744: PUSH
29745: LD_INT 2
29747: EQUAL
29748: AND
29749: IFFALSE 29809
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29751: LD_INT 22
29753: PUSH
29754: LD_VAR 0 16
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 35
29765: PUSH
29766: LD_INT 49
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 91
29775: PUSH
29776: LD_VAR 0 1
29780: PUSH
29781: LD_INT 10
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: PPUSH
29794: CALL_OW 69
29798: NOT
29799: IFFALSE 29809
// weapon := ru_time_lapser ;
29801: LD_ADDR_VAR 0 18
29805: PUSH
29806: LD_INT 49
29808: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29809: LD_VAR 0 12
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: IN
29824: PUSH
29825: LD_INT 11
29827: PUSH
29828: LD_VAR 0 5
29832: IN
29833: PUSH
29834: LD_INT 30
29836: PUSH
29837: LD_VAR 0 5
29841: IN
29842: OR
29843: AND
29844: PUSH
29845: LD_INT 6
29847: PPUSH
29848: LD_VAR 0 16
29852: PPUSH
29853: CALL_OW 321
29857: PUSH
29858: LD_INT 2
29860: EQUAL
29861: AND
29862: IFFALSE 30027
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29864: LD_INT 22
29866: PUSH
29867: LD_VAR 0 16
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 2
29878: PUSH
29879: LD_INT 35
29881: PUSH
29882: LD_INT 11
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 35
29891: PUSH
29892: LD_INT 30
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 91
29906: PUSH
29907: LD_VAR 0 1
29911: PUSH
29912: LD_INT 18
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: PPUSH
29925: CALL_OW 69
29929: NOT
29930: PUSH
29931: LD_INT 22
29933: PUSH
29934: LD_VAR 0 16
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 2
29945: PUSH
29946: LD_INT 30
29948: PUSH
29949: LD_INT 32
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 30
29958: PUSH
29959: LD_INT 33
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 91
29973: PUSH
29974: LD_VAR 0 1
29978: PUSH
29979: LD_INT 12
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: LIST
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: LIST
29991: PUSH
29992: EMPTY
29993: LIST
29994: PPUSH
29995: CALL_OW 69
29999: PUSH
30000: LD_INT 2
30002: GREATER
30003: AND
30004: IFFALSE 30027
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30006: LD_ADDR_VAR 0 18
30010: PUSH
30011: LD_INT 11
30013: PUSH
30014: LD_INT 30
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_VAR 0 12
30025: ARRAY
30026: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30027: LD_VAR 0 18
30031: NOT
30032: PUSH
30033: LD_INT 40
30035: PPUSH
30036: LD_VAR 0 16
30040: PPUSH
30041: CALL_OW 321
30045: PUSH
30046: LD_INT 2
30048: EQUAL
30049: AND
30050: PUSH
30051: LD_INT 7
30053: PUSH
30054: LD_VAR 0 5
30058: IN
30059: PUSH
30060: LD_INT 28
30062: PUSH
30063: LD_VAR 0 5
30067: IN
30068: OR
30069: PUSH
30070: LD_INT 45
30072: PUSH
30073: LD_VAR 0 5
30077: IN
30078: OR
30079: AND
30080: IFFALSE 30334
// begin hex := GetHexInfo ( x , y ) ;
30082: LD_ADDR_VAR 0 4
30086: PUSH
30087: LD_VAR 0 10
30091: PPUSH
30092: LD_VAR 0 11
30096: PPUSH
30097: CALL_OW 546
30101: ST_TO_ADDR
// if hex [ 1 ] then
30102: LD_VAR 0 4
30106: PUSH
30107: LD_INT 1
30109: ARRAY
30110: IFFALSE 30114
// exit ;
30112: GO 30517
// height := hex [ 2 ] ;
30114: LD_ADDR_VAR 0 15
30118: PUSH
30119: LD_VAR 0 4
30123: PUSH
30124: LD_INT 2
30126: ARRAY
30127: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30128: LD_ADDR_VAR 0 14
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: LD_INT 2
30138: PUSH
30139: LD_INT 3
30141: PUSH
30142: LD_INT 5
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: ST_TO_ADDR
// for i in tmp do
30151: LD_ADDR_VAR 0 8
30155: PUSH
30156: LD_VAR 0 14
30160: PUSH
30161: FOR_IN
30162: IFFALSE 30332
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30164: LD_ADDR_VAR 0 9
30168: PUSH
30169: LD_VAR 0 10
30173: PPUSH
30174: LD_VAR 0 8
30178: PPUSH
30179: LD_INT 5
30181: PPUSH
30182: CALL_OW 272
30186: PUSH
30187: LD_VAR 0 11
30191: PPUSH
30192: LD_VAR 0 8
30196: PPUSH
30197: LD_INT 5
30199: PPUSH
30200: CALL_OW 273
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30209: LD_VAR 0 9
30213: PUSH
30214: LD_INT 1
30216: ARRAY
30217: PPUSH
30218: LD_VAR 0 9
30222: PUSH
30223: LD_INT 2
30225: ARRAY
30226: PPUSH
30227: CALL_OW 488
30231: IFFALSE 30330
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30233: LD_ADDR_VAR 0 4
30237: PUSH
30238: LD_VAR 0 9
30242: PUSH
30243: LD_INT 1
30245: ARRAY
30246: PPUSH
30247: LD_VAR 0 9
30251: PUSH
30252: LD_INT 2
30254: ARRAY
30255: PPUSH
30256: CALL_OW 546
30260: ST_TO_ADDR
// if hex [ 1 ] then
30261: LD_VAR 0 4
30265: PUSH
30266: LD_INT 1
30268: ARRAY
30269: IFFALSE 30273
// continue ;
30271: GO 30161
// h := hex [ 2 ] ;
30273: LD_ADDR_VAR 0 13
30277: PUSH
30278: LD_VAR 0 4
30282: PUSH
30283: LD_INT 2
30285: ARRAY
30286: ST_TO_ADDR
// if h + 7 < height then
30287: LD_VAR 0 13
30291: PUSH
30292: LD_INT 7
30294: PLUS
30295: PUSH
30296: LD_VAR 0 15
30300: LESS
30301: IFFALSE 30330
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30303: LD_ADDR_VAR 0 18
30307: PUSH
30308: LD_INT 7
30310: PUSH
30311: LD_INT 28
30313: PUSH
30314: LD_INT 45
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: LIST
30321: PUSH
30322: LD_VAR 0 12
30326: ARRAY
30327: ST_TO_ADDR
// break ;
30328: GO 30332
// end ; end ; end ;
30330: GO 30161
30332: POP
30333: POP
// end ; if not weapon then
30334: LD_VAR 0 18
30338: NOT
30339: IFFALSE 30399
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30341: LD_ADDR_VAR 0 5
30345: PUSH
30346: LD_VAR 0 5
30350: PUSH
30351: LD_INT 11
30353: PUSH
30354: LD_INT 30
30356: PUSH
30357: LD_INT 49
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: DIFF
30365: ST_TO_ADDR
// if not list then
30366: LD_VAR 0 5
30370: NOT
30371: IFFALSE 30375
// exit ;
30373: GO 30517
// weapon := list [ rand ( 1 , list ) ] ;
30375: LD_ADDR_VAR 0 18
30379: PUSH
30380: LD_VAR 0 5
30384: PUSH
30385: LD_INT 1
30387: PPUSH
30388: LD_VAR 0 5
30392: PPUSH
30393: CALL_OW 12
30397: ARRAY
30398: ST_TO_ADDR
// end ; if weapon then
30399: LD_VAR 0 18
30403: IFFALSE 30517
// begin tmp := CostOfWeapon ( weapon ) ;
30405: LD_ADDR_VAR 0 14
30409: PUSH
30410: LD_VAR 0 18
30414: PPUSH
30415: CALL_OW 451
30419: ST_TO_ADDR
// j := GetBase ( tower ) ;
30420: LD_ADDR_VAR 0 9
30424: PUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 274
30434: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30435: LD_VAR 0 9
30439: PPUSH
30440: LD_INT 1
30442: PPUSH
30443: CALL_OW 275
30447: PUSH
30448: LD_VAR 0 14
30452: PUSH
30453: LD_INT 1
30455: ARRAY
30456: GREATEREQUAL
30457: PUSH
30458: LD_VAR 0 9
30462: PPUSH
30463: LD_INT 2
30465: PPUSH
30466: CALL_OW 275
30470: PUSH
30471: LD_VAR 0 14
30475: PUSH
30476: LD_INT 2
30478: ARRAY
30479: GREATEREQUAL
30480: AND
30481: PUSH
30482: LD_VAR 0 9
30486: PPUSH
30487: LD_INT 3
30489: PPUSH
30490: CALL_OW 275
30494: PUSH
30495: LD_VAR 0 14
30499: PUSH
30500: LD_INT 3
30502: ARRAY
30503: GREATEREQUAL
30504: AND
30505: IFFALSE 30517
// result := weapon ;
30507: LD_ADDR_VAR 0 3
30511: PUSH
30512: LD_VAR 0 18
30516: ST_TO_ADDR
// end ; end ;
30517: LD_VAR 0 3
30521: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30522: LD_INT 0
30524: PPUSH
30525: PPUSH
// result := true ;
30526: LD_ADDR_VAR 0 3
30530: PUSH
30531: LD_INT 1
30533: ST_TO_ADDR
// if array1 = array2 then
30534: LD_VAR 0 1
30538: PUSH
30539: LD_VAR 0 2
30543: EQUAL
30544: IFFALSE 30604
// begin for i = 1 to array1 do
30546: LD_ADDR_VAR 0 4
30550: PUSH
30551: DOUBLE
30552: LD_INT 1
30554: DEC
30555: ST_TO_ADDR
30556: LD_VAR 0 1
30560: PUSH
30561: FOR_TO
30562: IFFALSE 30600
// if array1 [ i ] <> array2 [ i ] then
30564: LD_VAR 0 1
30568: PUSH
30569: LD_VAR 0 4
30573: ARRAY
30574: PUSH
30575: LD_VAR 0 2
30579: PUSH
30580: LD_VAR 0 4
30584: ARRAY
30585: NONEQUAL
30586: IFFALSE 30598
// begin result := false ;
30588: LD_ADDR_VAR 0 3
30592: PUSH
30593: LD_INT 0
30595: ST_TO_ADDR
// break ;
30596: GO 30600
// end ;
30598: GO 30561
30600: POP
30601: POP
// end else
30602: GO 30612
// result := false ;
30604: LD_ADDR_VAR 0 3
30608: PUSH
30609: LD_INT 0
30611: ST_TO_ADDR
// end ;
30612: LD_VAR 0 3
30616: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30617: LD_INT 0
30619: PPUSH
30620: PPUSH
// if not array1 or not array2 then
30621: LD_VAR 0 1
30625: NOT
30626: PUSH
30627: LD_VAR 0 2
30631: NOT
30632: OR
30633: IFFALSE 30637
// exit ;
30635: GO 30701
// result := true ;
30637: LD_ADDR_VAR 0 3
30641: PUSH
30642: LD_INT 1
30644: ST_TO_ADDR
// for i = 1 to array1 do
30645: LD_ADDR_VAR 0 4
30649: PUSH
30650: DOUBLE
30651: LD_INT 1
30653: DEC
30654: ST_TO_ADDR
30655: LD_VAR 0 1
30659: PUSH
30660: FOR_TO
30661: IFFALSE 30699
// if array1 [ i ] <> array2 [ i ] then
30663: LD_VAR 0 1
30667: PUSH
30668: LD_VAR 0 4
30672: ARRAY
30673: PUSH
30674: LD_VAR 0 2
30678: PUSH
30679: LD_VAR 0 4
30683: ARRAY
30684: NONEQUAL
30685: IFFALSE 30697
// begin result := false ;
30687: LD_ADDR_VAR 0 3
30691: PUSH
30692: LD_INT 0
30694: ST_TO_ADDR
// break ;
30695: GO 30699
// end ;
30697: GO 30660
30699: POP
30700: POP
// end ;
30701: LD_VAR 0 3
30705: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30706: LD_INT 0
30708: PPUSH
30709: PPUSH
30710: PPUSH
// pom := GetBase ( fac ) ;
30711: LD_ADDR_VAR 0 5
30715: PUSH
30716: LD_VAR 0 1
30720: PPUSH
30721: CALL_OW 274
30725: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30726: LD_ADDR_VAR 0 4
30730: PUSH
30731: LD_VAR 0 2
30735: PUSH
30736: LD_INT 1
30738: ARRAY
30739: PPUSH
30740: LD_VAR 0 2
30744: PUSH
30745: LD_INT 2
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 2
30753: PUSH
30754: LD_INT 3
30756: ARRAY
30757: PPUSH
30758: LD_VAR 0 2
30762: PUSH
30763: LD_INT 4
30765: ARRAY
30766: PPUSH
30767: CALL_OW 449
30771: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30772: LD_ADDR_VAR 0 3
30776: PUSH
30777: LD_VAR 0 5
30781: PPUSH
30782: LD_INT 1
30784: PPUSH
30785: CALL_OW 275
30789: PUSH
30790: LD_VAR 0 4
30794: PUSH
30795: LD_INT 1
30797: ARRAY
30798: GREATEREQUAL
30799: PUSH
30800: LD_VAR 0 5
30804: PPUSH
30805: LD_INT 2
30807: PPUSH
30808: CALL_OW 275
30812: PUSH
30813: LD_VAR 0 4
30817: PUSH
30818: LD_INT 2
30820: ARRAY
30821: GREATEREQUAL
30822: AND
30823: PUSH
30824: LD_VAR 0 5
30828: PPUSH
30829: LD_INT 3
30831: PPUSH
30832: CALL_OW 275
30836: PUSH
30837: LD_VAR 0 4
30841: PUSH
30842: LD_INT 3
30844: ARRAY
30845: GREATEREQUAL
30846: AND
30847: ST_TO_ADDR
// end ;
30848: LD_VAR 0 3
30852: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30853: LD_INT 0
30855: PPUSH
30856: PPUSH
30857: PPUSH
30858: PPUSH
// pom := GetBase ( building ) ;
30859: LD_ADDR_VAR 0 3
30863: PUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 274
30873: ST_TO_ADDR
// if not pom then
30874: LD_VAR 0 3
30878: NOT
30879: IFFALSE 30883
// exit ;
30881: GO 31053
// btype := GetBType ( building ) ;
30883: LD_ADDR_VAR 0 5
30887: PUSH
30888: LD_VAR 0 1
30892: PPUSH
30893: CALL_OW 266
30897: ST_TO_ADDR
// if btype = b_armoury then
30898: LD_VAR 0 5
30902: PUSH
30903: LD_INT 4
30905: EQUAL
30906: IFFALSE 30916
// btype := b_barracks ;
30908: LD_ADDR_VAR 0 5
30912: PUSH
30913: LD_INT 5
30915: ST_TO_ADDR
// if btype = b_depot then
30916: LD_VAR 0 5
30920: PUSH
30921: LD_INT 0
30923: EQUAL
30924: IFFALSE 30934
// btype := b_warehouse ;
30926: LD_ADDR_VAR 0 5
30930: PUSH
30931: LD_INT 1
30933: ST_TO_ADDR
// if btype = b_workshop then
30934: LD_VAR 0 5
30938: PUSH
30939: LD_INT 2
30941: EQUAL
30942: IFFALSE 30952
// btype := b_factory ;
30944: LD_ADDR_VAR 0 5
30948: PUSH
30949: LD_INT 3
30951: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30952: LD_ADDR_VAR 0 4
30956: PUSH
30957: LD_VAR 0 5
30961: PPUSH
30962: LD_VAR 0 1
30966: PPUSH
30967: CALL_OW 248
30971: PPUSH
30972: CALL_OW 450
30976: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30977: LD_ADDR_VAR 0 2
30981: PUSH
30982: LD_VAR 0 3
30986: PPUSH
30987: LD_INT 1
30989: PPUSH
30990: CALL_OW 275
30994: PUSH
30995: LD_VAR 0 4
30999: PUSH
31000: LD_INT 1
31002: ARRAY
31003: GREATEREQUAL
31004: PUSH
31005: LD_VAR 0 3
31009: PPUSH
31010: LD_INT 2
31012: PPUSH
31013: CALL_OW 275
31017: PUSH
31018: LD_VAR 0 4
31022: PUSH
31023: LD_INT 2
31025: ARRAY
31026: GREATEREQUAL
31027: AND
31028: PUSH
31029: LD_VAR 0 3
31033: PPUSH
31034: LD_INT 3
31036: PPUSH
31037: CALL_OW 275
31041: PUSH
31042: LD_VAR 0 4
31046: PUSH
31047: LD_INT 3
31049: ARRAY
31050: GREATEREQUAL
31051: AND
31052: ST_TO_ADDR
// end ;
31053: LD_VAR 0 2
31057: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31058: LD_INT 0
31060: PPUSH
31061: PPUSH
31062: PPUSH
// pom := GetBase ( building ) ;
31063: LD_ADDR_VAR 0 4
31067: PUSH
31068: LD_VAR 0 1
31072: PPUSH
31073: CALL_OW 274
31077: ST_TO_ADDR
// if not pom then
31078: LD_VAR 0 4
31082: NOT
31083: IFFALSE 31087
// exit ;
31085: GO 31188
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31087: LD_ADDR_VAR 0 5
31091: PUSH
31092: LD_VAR 0 2
31096: PPUSH
31097: LD_VAR 0 1
31101: PPUSH
31102: CALL_OW 248
31106: PPUSH
31107: CALL_OW 450
31111: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_VAR 0 4
31121: PPUSH
31122: LD_INT 1
31124: PPUSH
31125: CALL_OW 275
31129: PUSH
31130: LD_VAR 0 5
31134: PUSH
31135: LD_INT 1
31137: ARRAY
31138: GREATEREQUAL
31139: PUSH
31140: LD_VAR 0 4
31144: PPUSH
31145: LD_INT 2
31147: PPUSH
31148: CALL_OW 275
31152: PUSH
31153: LD_VAR 0 5
31157: PUSH
31158: LD_INT 2
31160: ARRAY
31161: GREATEREQUAL
31162: AND
31163: PUSH
31164: LD_VAR 0 4
31168: PPUSH
31169: LD_INT 3
31171: PPUSH
31172: CALL_OW 275
31176: PUSH
31177: LD_VAR 0 5
31181: PUSH
31182: LD_INT 3
31184: ARRAY
31185: GREATEREQUAL
31186: AND
31187: ST_TO_ADDR
// end ;
31188: LD_VAR 0 3
31192: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31193: LD_INT 0
31195: PPUSH
31196: PPUSH
31197: PPUSH
31198: PPUSH
31199: PPUSH
31200: PPUSH
31201: PPUSH
31202: PPUSH
31203: PPUSH
31204: PPUSH
31205: PPUSH
// result := false ;
31206: LD_ADDR_VAR 0 8
31210: PUSH
31211: LD_INT 0
31213: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31214: LD_VAR 0 5
31218: NOT
31219: PUSH
31220: LD_VAR 0 1
31224: NOT
31225: OR
31226: PUSH
31227: LD_VAR 0 2
31231: NOT
31232: OR
31233: PUSH
31234: LD_VAR 0 3
31238: NOT
31239: OR
31240: IFFALSE 31244
// exit ;
31242: GO 32058
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31244: LD_ADDR_VAR 0 14
31248: PUSH
31249: LD_VAR 0 1
31253: PPUSH
31254: LD_VAR 0 2
31258: PPUSH
31259: LD_VAR 0 3
31263: PPUSH
31264: LD_VAR 0 4
31268: PPUSH
31269: LD_VAR 0 5
31273: PUSH
31274: LD_INT 1
31276: ARRAY
31277: PPUSH
31278: CALL_OW 248
31282: PPUSH
31283: LD_INT 0
31285: PPUSH
31286: CALL 33295 0 6
31290: ST_TO_ADDR
// if not hexes then
31291: LD_VAR 0 14
31295: NOT
31296: IFFALSE 31300
// exit ;
31298: GO 32058
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31300: LD_ADDR_VAR 0 17
31304: PUSH
31305: LD_VAR 0 5
31309: PPUSH
31310: LD_INT 22
31312: PUSH
31313: LD_VAR 0 13
31317: PPUSH
31318: CALL_OW 255
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 2
31329: PUSH
31330: LD_INT 30
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 30
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PPUSH
31359: CALL_OW 72
31363: ST_TO_ADDR
// for i = 1 to hexes do
31364: LD_ADDR_VAR 0 9
31368: PUSH
31369: DOUBLE
31370: LD_INT 1
31372: DEC
31373: ST_TO_ADDR
31374: LD_VAR 0 14
31378: PUSH
31379: FOR_TO
31380: IFFALSE 32056
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31382: LD_ADDR_VAR 0 13
31386: PUSH
31387: LD_VAR 0 14
31391: PUSH
31392: LD_VAR 0 9
31396: ARRAY
31397: PUSH
31398: LD_INT 1
31400: ARRAY
31401: PPUSH
31402: LD_VAR 0 14
31406: PUSH
31407: LD_VAR 0 9
31411: ARRAY
31412: PUSH
31413: LD_INT 2
31415: ARRAY
31416: PPUSH
31417: CALL_OW 428
31421: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31422: LD_VAR 0 14
31426: PUSH
31427: LD_VAR 0 9
31431: ARRAY
31432: PUSH
31433: LD_INT 1
31435: ARRAY
31436: PPUSH
31437: LD_VAR 0 14
31441: PUSH
31442: LD_VAR 0 9
31446: ARRAY
31447: PUSH
31448: LD_INT 2
31450: ARRAY
31451: PPUSH
31452: CALL_OW 351
31456: PUSH
31457: LD_VAR 0 14
31461: PUSH
31462: LD_VAR 0 9
31466: ARRAY
31467: PUSH
31468: LD_INT 1
31470: ARRAY
31471: PPUSH
31472: LD_VAR 0 14
31476: PUSH
31477: LD_VAR 0 9
31481: ARRAY
31482: PUSH
31483: LD_INT 2
31485: ARRAY
31486: PPUSH
31487: CALL_OW 488
31491: NOT
31492: OR
31493: PUSH
31494: LD_VAR 0 13
31498: PPUSH
31499: CALL_OW 247
31503: PUSH
31504: LD_INT 3
31506: EQUAL
31507: OR
31508: IFFALSE 31514
// exit ;
31510: POP
31511: POP
31512: GO 32058
// if not tmp then
31514: LD_VAR 0 13
31518: NOT
31519: IFFALSE 31523
// continue ;
31521: GO 31379
// result := true ;
31523: LD_ADDR_VAR 0 8
31527: PUSH
31528: LD_INT 1
31530: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31531: LD_VAR 0 6
31535: PUSH
31536: LD_VAR 0 13
31540: PPUSH
31541: CALL_OW 247
31545: PUSH
31546: LD_INT 2
31548: EQUAL
31549: AND
31550: PUSH
31551: LD_VAR 0 13
31555: PPUSH
31556: CALL_OW 263
31560: PUSH
31561: LD_INT 1
31563: EQUAL
31564: AND
31565: IFFALSE 31729
// begin if IsDrivenBy ( tmp ) then
31567: LD_VAR 0 13
31571: PPUSH
31572: CALL_OW 311
31576: IFFALSE 31580
// continue ;
31578: GO 31379
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31580: LD_VAR 0 6
31584: PPUSH
31585: LD_INT 3
31587: PUSH
31588: LD_INT 60
31590: PUSH
31591: EMPTY
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 3
31600: PUSH
31601: LD_INT 55
31603: PUSH
31604: EMPTY
31605: LIST
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PPUSH
31615: CALL_OW 72
31619: IFFALSE 31727
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31621: LD_ADDR_VAR 0 18
31625: PUSH
31626: LD_VAR 0 6
31630: PPUSH
31631: LD_INT 3
31633: PUSH
31634: LD_INT 60
31636: PUSH
31637: EMPTY
31638: LIST
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 3
31646: PUSH
31647: LD_INT 55
31649: PUSH
31650: EMPTY
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PPUSH
31661: CALL_OW 72
31665: PUSH
31666: LD_INT 1
31668: ARRAY
31669: ST_TO_ADDR
// if IsInUnit ( driver ) then
31670: LD_VAR 0 18
31674: PPUSH
31675: CALL_OW 310
31679: IFFALSE 31690
// ComExit ( driver ) ;
31681: LD_VAR 0 18
31685: PPUSH
31686: CALL 56479 0 1
// AddComEnterUnit ( driver , tmp ) ;
31690: LD_VAR 0 18
31694: PPUSH
31695: LD_VAR 0 13
31699: PPUSH
31700: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31704: LD_VAR 0 18
31708: PPUSH
31709: LD_VAR 0 7
31713: PPUSH
31714: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31718: LD_VAR 0 18
31722: PPUSH
31723: CALL_OW 181
// end ; continue ;
31727: GO 31379
// end ; if not cleaners or not tmp in cleaners then
31729: LD_VAR 0 6
31733: NOT
31734: PUSH
31735: LD_VAR 0 13
31739: PUSH
31740: LD_VAR 0 6
31744: IN
31745: NOT
31746: OR
31747: IFFALSE 32054
// begin if dep then
31749: LD_VAR 0 17
31753: IFFALSE 31889
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31755: LD_ADDR_VAR 0 16
31759: PUSH
31760: LD_VAR 0 17
31764: PUSH
31765: LD_INT 1
31767: ARRAY
31768: PPUSH
31769: CALL_OW 250
31773: PPUSH
31774: LD_VAR 0 17
31778: PUSH
31779: LD_INT 1
31781: ARRAY
31782: PPUSH
31783: CALL_OW 254
31787: PPUSH
31788: LD_INT 5
31790: PPUSH
31791: CALL_OW 272
31795: PUSH
31796: LD_VAR 0 17
31800: PUSH
31801: LD_INT 1
31803: ARRAY
31804: PPUSH
31805: CALL_OW 251
31809: PPUSH
31810: LD_VAR 0 17
31814: PUSH
31815: LD_INT 1
31817: ARRAY
31818: PPUSH
31819: CALL_OW 254
31823: PPUSH
31824: LD_INT 5
31826: PPUSH
31827: CALL_OW 273
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31836: LD_VAR 0 16
31840: PUSH
31841: LD_INT 1
31843: ARRAY
31844: PPUSH
31845: LD_VAR 0 16
31849: PUSH
31850: LD_INT 2
31852: ARRAY
31853: PPUSH
31854: CALL_OW 488
31858: IFFALSE 31889
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31860: LD_VAR 0 13
31864: PPUSH
31865: LD_VAR 0 16
31869: PUSH
31870: LD_INT 1
31872: ARRAY
31873: PPUSH
31874: LD_VAR 0 16
31878: PUSH
31879: LD_INT 2
31881: ARRAY
31882: PPUSH
31883: CALL_OW 111
// continue ;
31887: GO 31379
// end ; end ; r := GetDir ( tmp ) ;
31889: LD_ADDR_VAR 0 15
31893: PUSH
31894: LD_VAR 0 13
31898: PPUSH
31899: CALL_OW 254
31903: ST_TO_ADDR
// if r = 5 then
31904: LD_VAR 0 15
31908: PUSH
31909: LD_INT 5
31911: EQUAL
31912: IFFALSE 31922
// r := 0 ;
31914: LD_ADDR_VAR 0 15
31918: PUSH
31919: LD_INT 0
31921: ST_TO_ADDR
// for j = r to 5 do
31922: LD_ADDR_VAR 0 10
31926: PUSH
31927: DOUBLE
31928: LD_VAR 0 15
31932: DEC
31933: ST_TO_ADDR
31934: LD_INT 5
31936: PUSH
31937: FOR_TO
31938: IFFALSE 32052
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31940: LD_ADDR_VAR 0 11
31944: PUSH
31945: LD_VAR 0 13
31949: PPUSH
31950: CALL_OW 250
31954: PPUSH
31955: LD_VAR 0 10
31959: PPUSH
31960: LD_INT 2
31962: PPUSH
31963: CALL_OW 272
31967: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31968: LD_ADDR_VAR 0 12
31972: PUSH
31973: LD_VAR 0 13
31977: PPUSH
31978: CALL_OW 251
31982: PPUSH
31983: LD_VAR 0 10
31987: PPUSH
31988: LD_INT 2
31990: PPUSH
31991: CALL_OW 273
31995: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31996: LD_VAR 0 11
32000: PPUSH
32001: LD_VAR 0 12
32005: PPUSH
32006: CALL_OW 488
32010: PUSH
32011: LD_VAR 0 11
32015: PPUSH
32016: LD_VAR 0 12
32020: PPUSH
32021: CALL_OW 428
32025: NOT
32026: AND
32027: IFFALSE 32050
// begin ComMoveXY ( tmp , _x , _y ) ;
32029: LD_VAR 0 13
32033: PPUSH
32034: LD_VAR 0 11
32038: PPUSH
32039: LD_VAR 0 12
32043: PPUSH
32044: CALL_OW 111
// break ;
32048: GO 32052
// end ; end ;
32050: GO 31937
32052: POP
32053: POP
// end ; end ;
32054: GO 31379
32056: POP
32057: POP
// end ;
32058: LD_VAR 0 8
32062: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32063: LD_INT 0
32065: PPUSH
// result := true ;
32066: LD_ADDR_VAR 0 3
32070: PUSH
32071: LD_INT 1
32073: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32074: LD_VAR 0 2
32078: PUSH
32079: LD_INT 24
32081: DOUBLE
32082: EQUAL
32083: IFTRUE 32093
32085: LD_INT 33
32087: DOUBLE
32088: EQUAL
32089: IFTRUE 32093
32091: GO 32118
32093: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32094: LD_ADDR_VAR 0 3
32098: PUSH
32099: LD_INT 32
32101: PPUSH
32102: LD_VAR 0 1
32106: PPUSH
32107: CALL_OW 321
32111: PUSH
32112: LD_INT 2
32114: EQUAL
32115: ST_TO_ADDR
32116: GO 32438
32118: LD_INT 20
32120: DOUBLE
32121: EQUAL
32122: IFTRUE 32126
32124: GO 32151
32126: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32127: LD_ADDR_VAR 0 3
32131: PUSH
32132: LD_INT 6
32134: PPUSH
32135: LD_VAR 0 1
32139: PPUSH
32140: CALL_OW 321
32144: PUSH
32145: LD_INT 2
32147: EQUAL
32148: ST_TO_ADDR
32149: GO 32438
32151: LD_INT 22
32153: DOUBLE
32154: EQUAL
32155: IFTRUE 32165
32157: LD_INT 36
32159: DOUBLE
32160: EQUAL
32161: IFTRUE 32165
32163: GO 32190
32165: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32166: LD_ADDR_VAR 0 3
32170: PUSH
32171: LD_INT 15
32173: PPUSH
32174: LD_VAR 0 1
32178: PPUSH
32179: CALL_OW 321
32183: PUSH
32184: LD_INT 2
32186: EQUAL
32187: ST_TO_ADDR
32188: GO 32438
32190: LD_INT 30
32192: DOUBLE
32193: EQUAL
32194: IFTRUE 32198
32196: GO 32223
32198: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32199: LD_ADDR_VAR 0 3
32203: PUSH
32204: LD_INT 20
32206: PPUSH
32207: LD_VAR 0 1
32211: PPUSH
32212: CALL_OW 321
32216: PUSH
32217: LD_INT 2
32219: EQUAL
32220: ST_TO_ADDR
32221: GO 32438
32223: LD_INT 28
32225: DOUBLE
32226: EQUAL
32227: IFTRUE 32237
32229: LD_INT 21
32231: DOUBLE
32232: EQUAL
32233: IFTRUE 32237
32235: GO 32262
32237: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32238: LD_ADDR_VAR 0 3
32242: PUSH
32243: LD_INT 21
32245: PPUSH
32246: LD_VAR 0 1
32250: PPUSH
32251: CALL_OW 321
32255: PUSH
32256: LD_INT 2
32258: EQUAL
32259: ST_TO_ADDR
32260: GO 32438
32262: LD_INT 16
32264: DOUBLE
32265: EQUAL
32266: IFTRUE 32270
32268: GO 32297
32270: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32271: LD_ADDR_VAR 0 3
32275: PUSH
32276: LD_EXP 82
32280: PPUSH
32281: LD_VAR 0 1
32285: PPUSH
32286: CALL_OW 321
32290: PUSH
32291: LD_INT 2
32293: EQUAL
32294: ST_TO_ADDR
32295: GO 32438
32297: LD_INT 19
32299: DOUBLE
32300: EQUAL
32301: IFTRUE 32311
32303: LD_INT 23
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32338
32311: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32312: LD_ADDR_VAR 0 3
32316: PUSH
32317: LD_EXP 81
32321: PPUSH
32322: LD_VAR 0 1
32326: PPUSH
32327: CALL_OW 321
32331: PUSH
32332: LD_INT 2
32334: EQUAL
32335: ST_TO_ADDR
32336: GO 32438
32338: LD_INT 17
32340: DOUBLE
32341: EQUAL
32342: IFTRUE 32346
32344: GO 32371
32346: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32347: LD_ADDR_VAR 0 3
32351: PUSH
32352: LD_INT 39
32354: PPUSH
32355: LD_VAR 0 1
32359: PPUSH
32360: CALL_OW 321
32364: PUSH
32365: LD_INT 2
32367: EQUAL
32368: ST_TO_ADDR
32369: GO 32438
32371: LD_INT 18
32373: DOUBLE
32374: EQUAL
32375: IFTRUE 32379
32377: GO 32404
32379: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32380: LD_ADDR_VAR 0 3
32384: PUSH
32385: LD_INT 40
32387: PPUSH
32388: LD_VAR 0 1
32392: PPUSH
32393: CALL_OW 321
32397: PUSH
32398: LD_INT 2
32400: EQUAL
32401: ST_TO_ADDR
32402: GO 32438
32404: LD_INT 27
32406: DOUBLE
32407: EQUAL
32408: IFTRUE 32412
32410: GO 32437
32412: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32413: LD_ADDR_VAR 0 3
32417: PUSH
32418: LD_INT 35
32420: PPUSH
32421: LD_VAR 0 1
32425: PPUSH
32426: CALL_OW 321
32430: PUSH
32431: LD_INT 2
32433: EQUAL
32434: ST_TO_ADDR
32435: GO 32438
32437: POP
// end ;
32438: LD_VAR 0 3
32442: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32443: LD_INT 0
32445: PPUSH
32446: PPUSH
32447: PPUSH
32448: PPUSH
32449: PPUSH
32450: PPUSH
32451: PPUSH
32452: PPUSH
32453: PPUSH
32454: PPUSH
32455: PPUSH
// result := false ;
32456: LD_ADDR_VAR 0 6
32460: PUSH
32461: LD_INT 0
32463: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32464: LD_VAR 0 1
32468: NOT
32469: PUSH
32470: LD_VAR 0 1
32474: PPUSH
32475: CALL_OW 266
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: LD_INT 1
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: IN
32490: NOT
32491: OR
32492: PUSH
32493: LD_VAR 0 2
32497: NOT
32498: OR
32499: PUSH
32500: LD_VAR 0 5
32504: PUSH
32505: LD_INT 0
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: LD_INT 2
32513: PUSH
32514: LD_INT 3
32516: PUSH
32517: LD_INT 4
32519: PUSH
32520: LD_INT 5
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: IN
32531: NOT
32532: OR
32533: PUSH
32534: LD_VAR 0 3
32538: PPUSH
32539: LD_VAR 0 4
32543: PPUSH
32544: CALL_OW 488
32548: NOT
32549: OR
32550: IFFALSE 32554
// exit ;
32552: GO 33290
// side := GetSide ( depot ) ;
32554: LD_ADDR_VAR 0 9
32558: PUSH
32559: LD_VAR 0 1
32563: PPUSH
32564: CALL_OW 255
32568: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
32569: LD_VAR 0 9
32573: PPUSH
32574: LD_VAR 0 2
32578: PPUSH
32579: CALL 32063 0 2
32583: NOT
32584: IFFALSE 32588
// exit ;
32586: GO 33290
// pom := GetBase ( depot ) ;
32588: LD_ADDR_VAR 0 10
32592: PUSH
32593: LD_VAR 0 1
32597: PPUSH
32598: CALL_OW 274
32602: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32603: LD_ADDR_VAR 0 11
32607: PUSH
32608: LD_VAR 0 2
32612: PPUSH
32613: LD_VAR 0 1
32617: PPUSH
32618: CALL_OW 248
32622: PPUSH
32623: CALL_OW 450
32627: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32628: LD_VAR 0 10
32632: PPUSH
32633: LD_INT 1
32635: PPUSH
32636: CALL_OW 275
32640: PUSH
32641: LD_VAR 0 11
32645: PUSH
32646: LD_INT 1
32648: ARRAY
32649: GREATEREQUAL
32650: PUSH
32651: LD_VAR 0 10
32655: PPUSH
32656: LD_INT 2
32658: PPUSH
32659: CALL_OW 275
32663: PUSH
32664: LD_VAR 0 11
32668: PUSH
32669: LD_INT 2
32671: ARRAY
32672: GREATEREQUAL
32673: AND
32674: PUSH
32675: LD_VAR 0 10
32679: PPUSH
32680: LD_INT 3
32682: PPUSH
32683: CALL_OW 275
32687: PUSH
32688: LD_VAR 0 11
32692: PUSH
32693: LD_INT 3
32695: ARRAY
32696: GREATEREQUAL
32697: AND
32698: NOT
32699: IFFALSE 32703
// exit ;
32701: GO 33290
// if GetBType ( depot ) = b_depot then
32703: LD_VAR 0 1
32707: PPUSH
32708: CALL_OW 266
32712: PUSH
32713: LD_INT 0
32715: EQUAL
32716: IFFALSE 32728
// dist := 28 else
32718: LD_ADDR_VAR 0 14
32722: PUSH
32723: LD_INT 28
32725: ST_TO_ADDR
32726: GO 32736
// dist := 36 ;
32728: LD_ADDR_VAR 0 14
32732: PUSH
32733: LD_INT 36
32735: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32736: LD_VAR 0 1
32740: PPUSH
32741: LD_VAR 0 3
32745: PPUSH
32746: LD_VAR 0 4
32750: PPUSH
32751: CALL_OW 297
32755: PUSH
32756: LD_VAR 0 14
32760: GREATER
32761: IFFALSE 32765
// exit ;
32763: GO 33290
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32765: LD_ADDR_VAR 0 12
32769: PUSH
32770: LD_VAR 0 2
32774: PPUSH
32775: LD_VAR 0 3
32779: PPUSH
32780: LD_VAR 0 4
32784: PPUSH
32785: LD_VAR 0 5
32789: PPUSH
32790: LD_VAR 0 1
32794: PPUSH
32795: CALL_OW 248
32799: PPUSH
32800: LD_INT 0
32802: PPUSH
32803: CALL 33295 0 6
32807: ST_TO_ADDR
// if not hexes then
32808: LD_VAR 0 12
32812: NOT
32813: IFFALSE 32817
// exit ;
32815: GO 33290
// hex := GetHexInfo ( x , y ) ;
32817: LD_ADDR_VAR 0 15
32821: PUSH
32822: LD_VAR 0 3
32826: PPUSH
32827: LD_VAR 0 4
32831: PPUSH
32832: CALL_OW 546
32836: ST_TO_ADDR
// if hex [ 1 ] then
32837: LD_VAR 0 15
32841: PUSH
32842: LD_INT 1
32844: ARRAY
32845: IFFALSE 32849
// exit ;
32847: GO 33290
// height := hex [ 2 ] ;
32849: LD_ADDR_VAR 0 13
32853: PUSH
32854: LD_VAR 0 15
32858: PUSH
32859: LD_INT 2
32861: ARRAY
32862: ST_TO_ADDR
// for i = 1 to hexes do
32863: LD_ADDR_VAR 0 7
32867: PUSH
32868: DOUBLE
32869: LD_INT 1
32871: DEC
32872: ST_TO_ADDR
32873: LD_VAR 0 12
32877: PUSH
32878: FOR_TO
32879: IFFALSE 33209
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32881: LD_VAR 0 12
32885: PUSH
32886: LD_VAR 0 7
32890: ARRAY
32891: PUSH
32892: LD_INT 1
32894: ARRAY
32895: PPUSH
32896: LD_VAR 0 12
32900: PUSH
32901: LD_VAR 0 7
32905: ARRAY
32906: PUSH
32907: LD_INT 2
32909: ARRAY
32910: PPUSH
32911: CALL_OW 488
32915: NOT
32916: PUSH
32917: LD_VAR 0 12
32921: PUSH
32922: LD_VAR 0 7
32926: ARRAY
32927: PUSH
32928: LD_INT 1
32930: ARRAY
32931: PPUSH
32932: LD_VAR 0 12
32936: PUSH
32937: LD_VAR 0 7
32941: ARRAY
32942: PUSH
32943: LD_INT 2
32945: ARRAY
32946: PPUSH
32947: CALL_OW 428
32951: PUSH
32952: LD_INT 0
32954: GREATER
32955: OR
32956: PUSH
32957: LD_VAR 0 12
32961: PUSH
32962: LD_VAR 0 7
32966: ARRAY
32967: PUSH
32968: LD_INT 1
32970: ARRAY
32971: PPUSH
32972: LD_VAR 0 12
32976: PUSH
32977: LD_VAR 0 7
32981: ARRAY
32982: PUSH
32983: LD_INT 2
32985: ARRAY
32986: PPUSH
32987: CALL_OW 351
32991: OR
32992: IFFALSE 32998
// exit ;
32994: POP
32995: POP
32996: GO 33290
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32998: LD_ADDR_VAR 0 8
33002: PUSH
33003: LD_VAR 0 12
33007: PUSH
33008: LD_VAR 0 7
33012: ARRAY
33013: PUSH
33014: LD_INT 1
33016: ARRAY
33017: PPUSH
33018: LD_VAR 0 12
33022: PUSH
33023: LD_VAR 0 7
33027: ARRAY
33028: PUSH
33029: LD_INT 2
33031: ARRAY
33032: PPUSH
33033: CALL_OW 546
33037: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33038: LD_VAR 0 8
33042: PUSH
33043: LD_INT 1
33045: ARRAY
33046: PUSH
33047: LD_VAR 0 8
33051: PUSH
33052: LD_INT 2
33054: ARRAY
33055: PUSH
33056: LD_VAR 0 13
33060: PUSH
33061: LD_INT 2
33063: PLUS
33064: GREATER
33065: OR
33066: PUSH
33067: LD_VAR 0 8
33071: PUSH
33072: LD_INT 2
33074: ARRAY
33075: PUSH
33076: LD_VAR 0 13
33080: PUSH
33081: LD_INT 2
33083: MINUS
33084: LESS
33085: OR
33086: PUSH
33087: LD_VAR 0 8
33091: PUSH
33092: LD_INT 3
33094: ARRAY
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: LD_INT 8
33101: PUSH
33102: LD_INT 9
33104: PUSH
33105: LD_INT 10
33107: PUSH
33108: LD_INT 11
33110: PUSH
33111: LD_INT 12
33113: PUSH
33114: LD_INT 13
33116: PUSH
33117: LD_INT 16
33119: PUSH
33120: LD_INT 17
33122: PUSH
33123: LD_INT 18
33125: PUSH
33126: LD_INT 19
33128: PUSH
33129: LD_INT 20
33131: PUSH
33132: LD_INT 21
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: IN
33150: NOT
33151: OR
33152: PUSH
33153: LD_VAR 0 8
33157: PUSH
33158: LD_INT 5
33160: ARRAY
33161: NOT
33162: OR
33163: PUSH
33164: LD_VAR 0 8
33168: PUSH
33169: LD_INT 6
33171: ARRAY
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: LD_INT 2
33178: PUSH
33179: LD_INT 7
33181: PUSH
33182: LD_INT 9
33184: PUSH
33185: LD_INT 10
33187: PUSH
33188: LD_INT 11
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: IN
33199: NOT
33200: OR
33201: IFFALSE 33207
// exit ;
33203: POP
33204: POP
33205: GO 33290
// end ;
33207: GO 32878
33209: POP
33210: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33211: LD_VAR 0 9
33215: PPUSH
33216: LD_VAR 0 3
33220: PPUSH
33221: LD_VAR 0 4
33225: PPUSH
33226: LD_INT 20
33228: PPUSH
33229: CALL 25236 0 4
33233: PUSH
33234: LD_INT 4
33236: ARRAY
33237: IFFALSE 33241
// exit ;
33239: GO 33290
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33241: LD_VAR 0 2
33245: PUSH
33246: LD_INT 29
33248: PUSH
33249: LD_INT 30
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: IN
33256: PUSH
33257: LD_VAR 0 3
33261: PPUSH
33262: LD_VAR 0 4
33266: PPUSH
33267: LD_VAR 0 9
33271: PPUSH
33272: CALL_OW 440
33276: NOT
33277: AND
33278: IFFALSE 33282
// exit ;
33280: GO 33290
// result := true ;
33282: LD_ADDR_VAR 0 6
33286: PUSH
33287: LD_INT 1
33289: ST_TO_ADDR
// end ;
33290: LD_VAR 0 6
33294: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33295: LD_INT 0
33297: PPUSH
33298: PPUSH
33299: PPUSH
33300: PPUSH
33301: PPUSH
33302: PPUSH
33303: PPUSH
33304: PPUSH
33305: PPUSH
33306: PPUSH
33307: PPUSH
33308: PPUSH
33309: PPUSH
33310: PPUSH
33311: PPUSH
33312: PPUSH
33313: PPUSH
33314: PPUSH
33315: PPUSH
33316: PPUSH
33317: PPUSH
33318: PPUSH
33319: PPUSH
33320: PPUSH
33321: PPUSH
33322: PPUSH
33323: PPUSH
33324: PPUSH
33325: PPUSH
33326: PPUSH
33327: PPUSH
33328: PPUSH
33329: PPUSH
33330: PPUSH
33331: PPUSH
33332: PPUSH
33333: PPUSH
33334: PPUSH
33335: PPUSH
33336: PPUSH
33337: PPUSH
33338: PPUSH
33339: PPUSH
33340: PPUSH
33341: PPUSH
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
33346: PPUSH
33347: PPUSH
33348: PPUSH
33349: PPUSH
33350: PPUSH
33351: PPUSH
33352: PPUSH
33353: PPUSH
33354: PPUSH
// result = [ ] ;
33355: LD_ADDR_VAR 0 7
33359: PUSH
33360: EMPTY
33361: ST_TO_ADDR
// temp_list = [ ] ;
33362: LD_ADDR_VAR 0 9
33366: PUSH
33367: EMPTY
33368: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33369: LD_VAR 0 4
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 2
33382: PUSH
33383: LD_INT 3
33385: PUSH
33386: LD_INT 4
33388: PUSH
33389: LD_INT 5
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: IN
33400: NOT
33401: PUSH
33402: LD_VAR 0 1
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: IN
33417: PUSH
33418: LD_VAR 0 5
33422: PUSH
33423: LD_INT 1
33425: PUSH
33426: LD_INT 2
33428: PUSH
33429: LD_INT 3
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: LIST
33436: IN
33437: NOT
33438: AND
33439: OR
33440: IFFALSE 33444
// exit ;
33442: GO 51835
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33444: LD_VAR 0 1
33448: PUSH
33449: LD_INT 6
33451: PUSH
33452: LD_INT 7
33454: PUSH
33455: LD_INT 8
33457: PUSH
33458: LD_INT 13
33460: PUSH
33461: LD_INT 12
33463: PUSH
33464: LD_INT 15
33466: PUSH
33467: LD_INT 11
33469: PUSH
33470: LD_INT 14
33472: PUSH
33473: LD_INT 10
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: IN
33487: IFFALSE 33497
// btype = b_lab ;
33489: LD_ADDR_VAR 0 1
33493: PUSH
33494: LD_INT 6
33496: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33497: LD_VAR 0 6
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: LD_INT 2
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: LIST
33515: IN
33516: NOT
33517: PUSH
33518: LD_VAR 0 1
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: LD_INT 2
33531: PUSH
33532: LD_INT 3
33534: PUSH
33535: LD_INT 6
33537: PUSH
33538: LD_INT 36
33540: PUSH
33541: LD_INT 4
33543: PUSH
33544: LD_INT 5
33546: PUSH
33547: LD_INT 31
33549: PUSH
33550: LD_INT 32
33552: PUSH
33553: LD_INT 33
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: IN
33569: NOT
33570: PUSH
33571: LD_VAR 0 6
33575: PUSH
33576: LD_INT 1
33578: EQUAL
33579: AND
33580: OR
33581: PUSH
33582: LD_VAR 0 1
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: LD_INT 3
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: IN
33597: NOT
33598: PUSH
33599: LD_VAR 0 6
33603: PUSH
33604: LD_INT 2
33606: EQUAL
33607: AND
33608: OR
33609: IFFALSE 33619
// mode = 0 ;
33611: LD_ADDR_VAR 0 6
33615: PUSH
33616: LD_INT 0
33618: ST_TO_ADDR
// case mode of 0 :
33619: LD_VAR 0 6
33623: PUSH
33624: LD_INT 0
33626: DOUBLE
33627: EQUAL
33628: IFTRUE 33632
33630: GO 45085
33632: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33633: LD_ADDR_VAR 0 11
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: LD_INT 1
33653: NEG
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: LD_INT 0
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 1
33702: NEG
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: LD_INT 2
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: LD_INT 1
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: LD_INT 3
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: LD_INT 3
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 1
33799: NEG
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33826: LD_ADDR_VAR 0 12
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: NEG
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 1
33895: NEG
33896: PUSH
33897: LD_INT 1
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 2
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 1
33938: NEG
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: NEG
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 2
33960: NEG
33961: PUSH
33962: LD_INT 1
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 3
33983: NEG
33984: PUSH
33985: LD_INT 0
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 3
33994: NEG
33995: PUSH
33996: LD_INT 1
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34022: LD_ADDR_VAR 0 13
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: LD_INT 0
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 0
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: LD_INT 1
34095: NEG
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: PUSH
34105: LD_INT 2
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 2
34125: PUSH
34126: LD_INT 2
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 1
34135: PUSH
34136: LD_INT 2
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: LD_INT 1
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: NEG
34158: PUSH
34159: LD_INT 2
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: NEG
34170: PUSH
34171: LD_INT 3
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 3
34181: NEG
34182: PUSH
34183: LD_INT 2
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 3
34193: NEG
34194: PUSH
34195: LD_INT 3
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34221: LD_ADDR_VAR 0 14
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 0
34238: PUSH
34239: LD_INT 1
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: NEG
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: NEG
34291: PUSH
34292: LD_INT 1
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: LD_INT 2
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 2
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: LD_INT 2
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 1
34356: NEG
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: LD_INT 3
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 3
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34417: LD_ADDR_VAR 0 15
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: LD_INT 0
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 1
34475: NEG
34476: PUSH
34477: LD_INT 0
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: LD_INT 1
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: LD_INT 1
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 2
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 2
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 2
34540: NEG
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 2
34551: NEG
34552: PUSH
34553: LD_INT 1
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: LD_INT 1
34566: NEG
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 3
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 3
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34610: LD_ADDR_VAR 0 16
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: LD_INT 0
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 1
34668: NEG
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: NEG
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: LD_INT 2
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 2
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: PUSH
34714: LD_INT 2
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: LD_INT 2
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 2
34733: NEG
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 2
34745: NEG
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 3
34757: PUSH
34758: LD_INT 2
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 3
34767: PUSH
34768: LD_INT 3
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: LD_INT 3
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34803: LD_ADDR_VAR 0 17
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 1
34861: NEG
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 1
34872: NEG
34873: PUSH
34874: LD_INT 1
34876: NEG
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: LD_INT 2
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: LD_INT 2
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 2
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 1
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: LD_INT 1
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 2
34979: NEG
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 2
34990: NEG
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: NEG
35003: PUSH
35004: LD_INT 2
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35033: LD_ADDR_VAR 0 18
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: LD_INT 0
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: LD_INT 1
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: LD_INT 1
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: LD_INT 1
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: LD_INT 2
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 2
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: LD_INT 1
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: LD_INT 1
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 2
35209: NEG
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 2
35220: NEG
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: NEG
35233: PUSH
35234: LD_INT 2
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35263: LD_ADDR_VAR 0 19
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: LD_INT 1
35283: NEG
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: LD_INT 0
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: LD_INT 1
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: LD_INT 1
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: NEG
35345: PUSH
35346: LD_INT 2
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: LD_INT 2
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 2
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 2
35388: PUSH
35389: LD_INT 1
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: LD_INT 2
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: LD_INT 2
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 2
35439: NEG
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 2
35450: NEG
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 2
35462: NEG
35463: PUSH
35464: LD_INT 2
35466: NEG
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35493: LD_ADDR_VAR 0 20
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: LD_INT 1
35513: NEG
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: NEG
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: LD_INT 1
35566: NEG
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: NEG
35575: PUSH
35576: LD_INT 2
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: PUSH
35598: LD_INT 1
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: LD_INT 1
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: LD_INT 2
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: NEG
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 2
35680: NEG
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: LD_INT 2
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35723: LD_ADDR_VAR 0 21
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 1
35827: PUSH
35828: LD_INT 1
35830: NEG
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: LD_INT 0
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 2
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 2
35858: PUSH
35859: LD_INT 2
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: LD_INT 2
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 2
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 2
35899: NEG
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 2
35910: NEG
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 2
35922: NEG
35923: PUSH
35924: LD_INT 2
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35953: LD_ADDR_VAR 0 22
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: NEG
36035: PUSH
36036: LD_INT 2
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: LD_INT 1
36060: NEG
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 2
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 2
36129: NEG
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 2
36140: NEG
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 2
36152: NEG
36153: PUSH
36154: LD_INT 2
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36183: LD_ADDR_VAR 0 23
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 1
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 1
36241: NEG
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 2
36298: PUSH
36299: LD_INT 0
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 2
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 2
36318: PUSH
36319: LD_INT 2
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 2
36370: NEG
36371: PUSH
36372: LD_INT 1
36374: NEG
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: LD_INT 2
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: LD_INT 3
36398: NEG
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: LD_INT 3
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: LD_INT 2
36421: NEG
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 2
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36463: LD_ADDR_VAR 0 24
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: LD_INT 1
36483: NEG
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: LD_INT 1
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: LD_INT 2
36548: NEG
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: LD_INT 2
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: LD_INT 1
36570: NEG
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 2
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 2
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 2
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: LD_INT 2
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: LD_INT 1
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: NEG
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: NEG
36651: PUSH
36652: LD_INT 1
36654: NEG
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 2
36662: NEG
36663: PUSH
36664: LD_INT 2
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: LD_INT 2
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 2
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 3
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 3
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36739: LD_ADDR_VAR 0 25
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: LD_INT 1
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: LD_INT 2
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: LD_INT 2
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: LD_INT 1
36846: NEG
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: LD_INT 0
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 2
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: LD_INT 2
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: LD_INT 2
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 2
36915: NEG
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 2
36926: NEG
36927: PUSH
36928: LD_INT 1
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: LD_INT 2
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 3
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 3
36960: PUSH
36961: LD_INT 2
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: LD_INT 3
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: PUSH
36981: LD_INT 3
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37013: LD_ADDR_VAR 0 26
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: LD_INT 1
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: LD_INT 0
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: PUSH
37096: LD_INT 2
37098: NEG
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: LD_INT 2
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 2
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: LD_INT 2
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 2
37224: PUSH
37225: LD_INT 3
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: PUSH
37235: LD_INT 3
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: LD_INT 2
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 2
37255: NEG
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37289: LD_ADDR_VAR 0 27
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: LD_INT 2
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 2
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 2
37465: NEG
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 2
37476: NEG
37477: PUSH
37478: LD_INT 1
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 2
37488: NEG
37489: PUSH
37490: LD_INT 2
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: NEG
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: NEG
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 3
37522: NEG
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 3
37534: NEG
37535: PUSH
37536: LD_INT 2
37538: NEG
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37569: LD_ADDR_VAR 0 28
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: LD_INT 2
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 2
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 2
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 2
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 2
37745: NEG
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: NEG
37769: PUSH
37770: LD_INT 2
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: LD_INT 3
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: LD_INT 3
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 3
37804: NEG
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 3
37816: NEG
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37851: LD_ADDR_VAR 0 29
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: LD_INT 2
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: NEG
38042: PUSH
38043: LD_INT 3
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 3
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: LD_INT 3
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 3
38095: NEG
38096: PUSH
38097: LD_INT 2
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38130: LD_ADDR_VAR 0 30
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: LD_INT 1
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: LD_INT 2
38215: NEG
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: LD_INT 2
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 2
38307: NEG
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: LD_INT 3
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 2
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 3
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 2
38352: PUSH
38353: LD_INT 3
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 2
38362: NEG
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 3
38373: NEG
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38408: LD_ADDR_VAR 0 31
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 1
38466: NEG
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: NEG
38490: PUSH
38491: LD_INT 2
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: LD_INT 2
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: LD_INT 1
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 2
38573: NEG
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 2
38597: NEG
38598: PUSH
38599: LD_INT 3
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 3
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: LD_INT 3
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 3
38651: NEG
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38686: LD_ADDR_VAR 0 32
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: LD_INT 2
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: LD_INT 2
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: LD_INT 2
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 2
38852: NEG
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: NEG
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: NEG
38876: PUSH
38877: LD_INT 3
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 2
38890: NEG
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 3
38898: PUSH
38899: LD_INT 2
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: LD_INT 3
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: NEG
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 3
38929: NEG
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38964: LD_ADDR_VAR 0 33
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: LD_INT 0
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 2
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: PUSH
39110: LD_INT 1
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 2
39119: NEG
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 2
39130: NEG
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: LD_INT 2
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: NEG
39155: PUSH
39156: LD_INT 3
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 3
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: LD_INT 3
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 3
39208: NEG
39209: PUSH
39210: LD_INT 2
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39243: LD_ADDR_VAR 0 34
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: LD_INT 2
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: NEG
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: LD_INT 3
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: LD_INT 2
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 3
39457: PUSH
39458: LD_INT 2
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 2
39477: NEG
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 3
39488: NEG
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39523: LD_ADDR_VAR 0 35
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: NEG
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 2
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: NEG
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39635: LD_ADDR_VAR 0 36
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 1
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: NEG
39717: PUSH
39718: LD_INT 2
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39747: LD_ADDR_VAR 0 37
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: NEG
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39859: LD_ADDR_VAR 0 38
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 2
39950: NEG
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39971: LD_ADDR_VAR 0 39
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40083: LD_ADDR_VAR 0 40
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40195: LD_ADDR_VAR 0 41
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 2
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: LD_INT 2
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 2
40350: NEG
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: NEG
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: LD_INT 3
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 2
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 3
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 3
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: LD_INT 3
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: NEG
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 3
40469: NEG
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 3
40480: NEG
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 3
40492: NEG
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 3
40504: NEG
40505: PUSH
40506: LD_INT 3
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40545: LD_ADDR_VAR 0 42
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 2
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 2
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: LD_INT 2
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: LD_INT 1
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 2
40711: NEG
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 2
40735: NEG
40736: PUSH
40737: LD_INT 3
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 3
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 3
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 3
40781: PUSH
40782: LD_INT 2
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 3
40791: PUSH
40792: LD_INT 3
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: LD_INT 3
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 3
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 3
40842: NEG
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 3
40854: NEG
40855: PUSH
40856: LD_INT 3
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40895: LD_ADDR_VAR 0 43
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: LD_INT 2
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: LD_INT 2
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 2
41061: NEG
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 2
41072: NEG
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: LD_INT 3
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: LD_INT 3
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 3
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: LD_INT 3
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: LD_INT 3
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 2
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 2
41180: NEG
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 3
41191: NEG
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 3
41202: NEG
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41243: LD_ADDR_VAR 0 44
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: LD_INT 2
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 2
41398: NEG
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: NEG
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: LD_INT 3
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 3
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 3
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 3
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 3
41486: PUSH
41487: LD_INT 3
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: LD_INT 3
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 3
41517: NEG
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 3
41528: NEG
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 3
41540: NEG
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 3
41552: NEG
41553: PUSH
41554: LD_INT 3
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41593: LD_ADDR_VAR 0 45
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 2
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 2
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: LD_INT 2
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 2
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: LD_INT 3
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: LD_INT 3
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: LD_INT 3
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: LD_INT 2
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 3
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 3
41839: PUSH
41840: LD_INT 3
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: LD_INT 3
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 3
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 3
41890: NEG
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 3
41902: NEG
41903: PUSH
41904: LD_INT 3
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41943: LD_ADDR_VAR 0 46
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: LD_INT 2
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: LD_INT 2
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 2
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: LD_INT 2
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: LD_INT 3
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 3
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 2
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 3
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 3
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 3
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: LD_INT 3
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: LD_INT 2
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 2
42228: NEG
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 3
42239: NEG
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 3
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42291: LD_ADDR_VAR 0 47
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: LD_INT 2
42376: NEG
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 2
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42442: LD_ADDR_VAR 0 48
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 2
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42589: LD_ADDR_VAR 0 49
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42733: LD_ADDR_VAR 0 50
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: LD_INT 1
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42877: LD_ADDR_VAR 0 51
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43024: LD_ADDR_VAR 0 52
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 2
43128: NEG
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43175: LD_ADDR_VAR 0 53
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43405: LD_ADDR_VAR 0 54
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: NEG
43605: PUSH
43606: LD_INT 2
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43635: LD_ADDR_VAR 0 55
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: LD_INT 2
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: NEG
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43865: LD_ADDR_VAR 0 56
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 0
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44095: LD_ADDR_VAR 0 57
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: LD_INT 1
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: LD_INT 2
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44325: LD_ADDR_VAR 0 58
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 2
44501: NEG
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44555: LD_ADDR_VAR 0 59
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44643: LD_ADDR_VAR 0 60
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44731: LD_ADDR_VAR 0 61
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44819: LD_ADDR_VAR 0 62
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44907: LD_ADDR_VAR 0 63
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44995: LD_ADDR_VAR 0 64
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: ST_TO_ADDR
// end ; 1 :
45083: GO 50980
45085: LD_INT 1
45087: DOUBLE
45088: EQUAL
45089: IFTRUE 45093
45091: GO 47716
45093: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45094: LD_ADDR_VAR 0 11
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: LD_INT 3
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 3
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45138: LD_ADDR_VAR 0 12
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 3
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 3
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: LIST
45178: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45179: LD_ADDR_VAR 0 13
45183: PUSH
45184: LD_INT 3
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 3
45196: PUSH
45197: LD_INT 3
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: LD_INT 3
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: LIST
45218: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45219: LD_ADDR_VAR 0 14
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 3
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45260: LD_ADDR_VAR 0 15
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 3
45278: NEG
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 3
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45304: LD_ADDR_VAR 0 16
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: LD_INT 3
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 3
45323: NEG
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 3
45335: NEG
45336: PUSH
45337: LD_INT 3
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: LIST
45349: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45350: LD_ADDR_VAR 0 17
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 3
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 3
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45394: LD_ADDR_VAR 0 18
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 3
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 3
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45435: LD_ADDR_VAR 0 19
45439: PUSH
45440: LD_INT 3
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 3
45452: PUSH
45453: LD_INT 3
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: LD_INT 3
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: LIST
45474: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45475: LD_ADDR_VAR 0 20
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 3
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 3
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: LIST
45515: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45516: LD_ADDR_VAR 0 21
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 3
45534: NEG
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 3
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45560: LD_ADDR_VAR 0 22
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: LD_INT 3
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 3
45579: NEG
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 3
45591: NEG
45592: PUSH
45593: LD_INT 3
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: LIST
45605: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45606: LD_ADDR_VAR 0 23
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 3
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 4
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: LD_INT 3
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: LIST
45649: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45650: LD_ADDR_VAR 0 24
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 3
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 4
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45691: LD_ADDR_VAR 0 25
45695: PUSH
45696: LD_INT 3
45698: PUSH
45699: LD_INT 3
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 4
45708: PUSH
45709: LD_INT 3
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 3
45718: PUSH
45719: LD_INT 4
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: LIST
45730: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45731: LD_ADDR_VAR 0 26
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: LD_INT 4
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 3
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: LIST
45771: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45772: LD_ADDR_VAR 0 27
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 3
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 4
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: LIST
45815: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45816: LD_ADDR_VAR 0 28
45820: PUSH
45821: LD_INT 3
45823: NEG
45824: PUSH
45825: LD_INT 3
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 3
45835: NEG
45836: PUSH
45837: LD_INT 4
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 4
45847: NEG
45848: PUSH
45849: LD_INT 3
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45862: LD_ADDR_VAR 0 29
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: LD_INT 3
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 3
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 2
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: LD_INT 4
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 4
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 3
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: LD_INT 5
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 5
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 4
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 6
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: LD_INT 6
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: LD_INT 5
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46017: LD_ADDR_VAR 0 30
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 3
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 3
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 3
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 4
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 4
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 4
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 5
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 5
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 5
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 6
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 6
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46160: LD_ADDR_VAR 0 31
46164: PUSH
46165: LD_INT 3
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 3
46177: PUSH
46178: LD_INT 3
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 4
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 4
46207: PUSH
46208: LD_INT 4
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 3
46217: PUSH
46218: LD_INT 4
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 5
46227: PUSH
46228: LD_INT 4
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 5
46237: PUSH
46238: LD_INT 5
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 4
46247: PUSH
46248: LD_INT 5
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 6
46257: PUSH
46258: LD_INT 5
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 6
46267: PUSH
46268: LD_INT 6
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 5
46277: PUSH
46278: LD_INT 6
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46299: LD_ADDR_VAR 0 32
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: LD_INT 3
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 3
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: LD_INT 4
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: LD_INT 4
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 3
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: LD_INT 5
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: LD_INT 5
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: LD_INT 4
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: LD_INT 6
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: LD_INT 6
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: LD_INT 5
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46442: LD_ADDR_VAR 0 33
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 3
46460: NEG
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 3
46471: NEG
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 4
46494: NEG
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 4
46505: NEG
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 4
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 5
46528: NEG
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 5
46539: NEG
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 5
46551: NEG
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 6
46562: NEG
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 6
46573: NEG
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46597: LD_ADDR_VAR 0 34
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: LD_INT 3
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 3
46616: NEG
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: NEG
46629: PUSH
46630: LD_INT 3
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 3
46640: NEG
46641: PUSH
46642: LD_INT 4
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 4
46652: NEG
46653: PUSH
46654: LD_INT 3
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 4
46664: NEG
46665: PUSH
46666: LD_INT 4
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 4
46676: NEG
46677: PUSH
46678: LD_INT 5
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 5
46688: NEG
46689: PUSH
46690: LD_INT 4
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 5
46700: NEG
46701: PUSH
46702: LD_INT 5
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 5
46712: NEG
46713: PUSH
46714: LD_INT 6
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 6
46724: NEG
46725: PUSH
46726: LD_INT 5
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 6
46736: NEG
46737: PUSH
46738: LD_INT 6
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46760: LD_ADDR_VAR 0 41
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: LD_INT 2
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 3
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46804: LD_ADDR_VAR 0 42
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 3
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: LIST
46844: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46845: LD_ADDR_VAR 0 43
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 3
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46885: LD_ADDR_VAR 0 44
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 3
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: LIST
46925: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46926: LD_ADDR_VAR 0 45
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 3
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46970: LD_ADDR_VAR 0 46
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: LD_INT 3
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: LIST
47015: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47016: LD_ADDR_VAR 0 47
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: LD_INT 3
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 3
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47049: LD_ADDR_VAR 0 48
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47080: LD_ADDR_VAR 0 49
47084: PUSH
47085: LD_INT 3
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 3
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47109: LD_ADDR_VAR 0 50
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47138: LD_ADDR_VAR 0 51
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47169: LD_ADDR_VAR 0 52
47173: PUSH
47174: LD_INT 3
47176: NEG
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 3
47188: NEG
47189: PUSH
47190: LD_INT 2
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47202: LD_ADDR_VAR 0 53
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 3
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: LIST
47245: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47246: LD_ADDR_VAR 0 54
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 3
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 3
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47287: LD_ADDR_VAR 0 55
47291: PUSH
47292: LD_INT 3
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 3
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: LIST
47326: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47327: LD_ADDR_VAR 0 56
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: LD_INT 3
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 3
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: LIST
47367: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47368: LD_ADDR_VAR 0 57
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: LIST
47411: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47412: LD_ADDR_VAR 0 58
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 3
47431: NEG
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 3
47443: NEG
47444: PUSH
47445: LD_INT 3
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: LIST
47457: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47458: LD_ADDR_VAR 0 59
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: LIST
47501: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47502: LD_ADDR_VAR 0 60
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47543: LD_ADDR_VAR 0 61
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: LIST
47582: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47583: LD_ADDR_VAR 0 62
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 2
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47624: LD_ADDR_VAR 0 63
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: LIST
47667: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47668: LD_ADDR_VAR 0 64
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: LIST
47713: ST_TO_ADDR
// end ; 2 :
47714: GO 50980
47716: LD_INT 2
47718: DOUBLE
47719: EQUAL
47720: IFTRUE 47724
47722: GO 50979
47724: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47725: LD_ADDR_VAR 0 29
47729: PUSH
47730: LD_INT 4
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 4
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 5
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 5
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 4
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 3
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 3
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 3
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 5
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 3
47825: PUSH
47826: LD_INT 3
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 3
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 4
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 4
47855: PUSH
47856: LD_INT 4
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: PUSH
47866: LD_INT 4
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 4
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 4
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 4
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: LD_INT 4
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 5
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 5
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 4
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 3
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: LD_INT 5
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 3
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 3
48008: NEG
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 3
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 3
48053: NEG
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 4
48064: NEG
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 4
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 4
48087: NEG
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 4
48110: NEG
48111: PUSH
48112: LD_INT 4
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 4
48122: NEG
48123: PUSH
48124: LD_INT 5
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 3
48134: NEG
48135: PUSH
48136: LD_INT 4
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: NEG
48147: PUSH
48148: LD_INT 3
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 4
48158: NEG
48159: PUSH
48160: LD_INT 3
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 5
48170: NEG
48171: PUSH
48172: LD_INT 4
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 5
48182: NEG
48183: PUSH
48184: LD_INT 5
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 3
48194: NEG
48195: PUSH
48196: LD_INT 5
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 5
48206: NEG
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48263: LD_ADDR_VAR 0 30
48267: PUSH
48268: LD_INT 4
48270: PUSH
48271: LD_INT 4
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 4
48280: PUSH
48281: LD_INT 3
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 5
48290: PUSH
48291: LD_INT 4
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 5
48300: PUSH
48301: LD_INT 5
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 4
48310: PUSH
48311: LD_INT 5
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 3
48320: PUSH
48321: LD_INT 4
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 3
48330: PUSH
48331: LD_INT 3
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 5
48340: PUSH
48341: LD_INT 3
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 3
48350: PUSH
48351: LD_INT 5
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 3
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 4
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: LD_INT 4
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 3
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 4
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 4
48453: NEG
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 4
48464: NEG
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 3
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 3
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 4
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 5
48509: NEG
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 5
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 5
48532: NEG
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 3
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 3
48555: NEG
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 3
48567: NEG
48568: PUSH
48569: LD_INT 4
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: LD_INT 3
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 3
48603: NEG
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 4
48615: NEG
48616: PUSH
48617: LD_INT 3
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 4
48627: NEG
48628: PUSH
48629: LD_INT 4
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 4
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 4
48651: NEG
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 4
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 5
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 4
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: LD_INT 3
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: LD_INT 3
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: LD_INT 4
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 5
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: LD_INT 3
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 5
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48810: LD_ADDR_VAR 0 31
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: LD_INT 4
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 4
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 5
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 5
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 4
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 3
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 5
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: LD_INT 3
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 3
48910: NEG
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 3
48955: NEG
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 4
48966: NEG
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 4
48977: NEG
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 4
48989: NEG
48990: PUSH
48991: LD_INT 2
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 4
49012: NEG
49013: PUSH
49014: LD_INT 4
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 4
49024: NEG
49025: PUSH
49026: LD_INT 5
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 3
49036: NEG
49037: PUSH
49038: LD_INT 4
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 3
49048: NEG
49049: PUSH
49050: LD_INT 3
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 4
49060: NEG
49061: PUSH
49062: LD_INT 3
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 5
49072: NEG
49073: PUSH
49074: LD_INT 4
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 5
49084: NEG
49085: PUSH
49086: LD_INT 5
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 3
49096: NEG
49097: PUSH
49098: LD_INT 5
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 5
49108: NEG
49109: PUSH
49110: LD_INT 3
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 3
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 4
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 3
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 3
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 4
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: LD_INT 4
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 4
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 4
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 5
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 5
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 4
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 3
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 3
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 3
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 5
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49360: LD_ADDR_VAR 0 32
49364: PUSH
49365: LD_INT 4
49367: NEG
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 4
49378: NEG
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 3
49390: NEG
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 3
49401: NEG
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 4
49412: NEG
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 5
49423: NEG
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 5
49434: NEG
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 5
49446: NEG
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 3
49458: NEG
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 3
49469: NEG
49470: PUSH
49471: LD_INT 3
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 3
49481: NEG
49482: PUSH
49483: LD_INT 4
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: LD_INT 3
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 3
49517: NEG
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 4
49529: NEG
49530: PUSH
49531: LD_INT 3
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 4
49541: NEG
49542: PUSH
49543: LD_INT 4
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: LD_INT 4
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 4
49565: NEG
49566: PUSH
49567: LD_INT 2
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 4
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 5
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: LD_INT 4
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: LD_INT 3
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 3
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 4
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 5
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: LD_INT 3
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: NEG
49668: PUSH
49669: LD_INT 5
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 3
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 4
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 4
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 3
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 4
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 4
49772: PUSH
49773: LD_INT 4
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 4
49782: PUSH
49783: LD_INT 3
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 5
49792: PUSH
49793: LD_INT 4
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 5
49802: PUSH
49803: LD_INT 5
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 4
49812: PUSH
49813: LD_INT 5
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 3
49822: PUSH
49823: LD_INT 4
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 3
49832: PUSH
49833: LD_INT 3
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 5
49842: PUSH
49843: LD_INT 3
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 3
49852: PUSH
49853: LD_INT 5
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49907: LD_ADDR_VAR 0 33
49911: PUSH
49912: LD_INT 4
49914: NEG
49915: PUSH
49916: LD_INT 4
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 4
49926: NEG
49927: PUSH
49928: LD_INT 5
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 3
49938: NEG
49939: PUSH
49940: LD_INT 4
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: NEG
49951: PUSH
49952: LD_INT 3
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 4
49962: NEG
49963: PUSH
49964: LD_INT 3
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 5
49974: NEG
49975: PUSH
49976: LD_INT 4
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 5
49986: NEG
49987: PUSH
49988: LD_INT 5
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: NEG
49999: PUSH
50000: LD_INT 5
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 5
50010: NEG
50011: PUSH
50012: LD_INT 3
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 3
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 4
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 3
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: LD_INT 3
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 4
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: LD_INT 4
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 4
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 4
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 5
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 5
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 4
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 3
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 3
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 5
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: LD_INT 3
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 4
50237: PUSH
50238: LD_INT 3
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 4
50247: PUSH
50248: LD_INT 4
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: LD_INT 4
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 4
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: LD_INT 4
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 4
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: LD_INT 3
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 4
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 5
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 5
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 4
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: LD_INT 3
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 5
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: LD_INT 3
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50445: LD_ADDR_VAR 0 34
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 4
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 5
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 4
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 3
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 3
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 4
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 5
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: LD_INT 3
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: LD_INT 5
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 3
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 3
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 4
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 4
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 3
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: LD_INT 2
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 4
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 4
50647: PUSH
50648: LD_INT 4
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 4
50657: PUSH
50658: LD_INT 3
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 5
50667: PUSH
50668: LD_INT 4
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 5
50677: PUSH
50678: LD_INT 5
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 4
50687: PUSH
50688: LD_INT 5
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 3
50697: PUSH
50698: LD_INT 4
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 3
50707: PUSH
50708: LD_INT 3
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 5
50717: PUSH
50718: LD_INT 3
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: LD_INT 5
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 3
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 4
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 4
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: LD_INT 4
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 4
50830: NEG
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 4
50841: NEG
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 3
50853: NEG
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 3
50864: NEG
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 4
50875: NEG
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 5
50886: NEG
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 5
50897: NEG
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 5
50909: NEG
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: ST_TO_ADDR
// end ; end ;
50977: GO 50980
50979: POP
// case btype of b_depot , b_warehouse :
50980: LD_VAR 0 1
50984: PUSH
50985: LD_INT 0
50987: DOUBLE
50988: EQUAL
50989: IFTRUE 50999
50991: LD_INT 1
50993: DOUBLE
50994: EQUAL
50995: IFTRUE 50999
50997: GO 51200
50999: POP
// case nation of nation_american :
51000: LD_VAR 0 5
51004: PUSH
51005: LD_INT 1
51007: DOUBLE
51008: EQUAL
51009: IFTRUE 51013
51011: GO 51069
51013: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51014: LD_ADDR_VAR 0 9
51018: PUSH
51019: LD_VAR 0 11
51023: PUSH
51024: LD_VAR 0 12
51028: PUSH
51029: LD_VAR 0 13
51033: PUSH
51034: LD_VAR 0 14
51038: PUSH
51039: LD_VAR 0 15
51043: PUSH
51044: LD_VAR 0 16
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: PUSH
51057: LD_VAR 0 4
51061: PUSH
51062: LD_INT 1
51064: PLUS
51065: ARRAY
51066: ST_TO_ADDR
51067: GO 51198
51069: LD_INT 2
51071: DOUBLE
51072: EQUAL
51073: IFTRUE 51077
51075: GO 51133
51077: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51078: LD_ADDR_VAR 0 9
51082: PUSH
51083: LD_VAR 0 17
51087: PUSH
51088: LD_VAR 0 18
51092: PUSH
51093: LD_VAR 0 19
51097: PUSH
51098: LD_VAR 0 20
51102: PUSH
51103: LD_VAR 0 21
51107: PUSH
51108: LD_VAR 0 22
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: PUSH
51121: LD_VAR 0 4
51125: PUSH
51126: LD_INT 1
51128: PLUS
51129: ARRAY
51130: ST_TO_ADDR
51131: GO 51198
51133: LD_INT 3
51135: DOUBLE
51136: EQUAL
51137: IFTRUE 51141
51139: GO 51197
51141: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51142: LD_ADDR_VAR 0 9
51146: PUSH
51147: LD_VAR 0 23
51151: PUSH
51152: LD_VAR 0 24
51156: PUSH
51157: LD_VAR 0 25
51161: PUSH
51162: LD_VAR 0 26
51166: PUSH
51167: LD_VAR 0 27
51171: PUSH
51172: LD_VAR 0 28
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: PUSH
51185: LD_VAR 0 4
51189: PUSH
51190: LD_INT 1
51192: PLUS
51193: ARRAY
51194: ST_TO_ADDR
51195: GO 51198
51197: POP
51198: GO 51753
51200: LD_INT 2
51202: DOUBLE
51203: EQUAL
51204: IFTRUE 51214
51206: LD_INT 3
51208: DOUBLE
51209: EQUAL
51210: IFTRUE 51214
51212: GO 51270
51214: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51215: LD_ADDR_VAR 0 9
51219: PUSH
51220: LD_VAR 0 29
51224: PUSH
51225: LD_VAR 0 30
51229: PUSH
51230: LD_VAR 0 31
51234: PUSH
51235: LD_VAR 0 32
51239: PUSH
51240: LD_VAR 0 33
51244: PUSH
51245: LD_VAR 0 34
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: PUSH
51258: LD_VAR 0 4
51262: PUSH
51263: LD_INT 1
51265: PLUS
51266: ARRAY
51267: ST_TO_ADDR
51268: GO 51753
51270: LD_INT 16
51272: DOUBLE
51273: EQUAL
51274: IFTRUE 51332
51276: LD_INT 17
51278: DOUBLE
51279: EQUAL
51280: IFTRUE 51332
51282: LD_INT 18
51284: DOUBLE
51285: EQUAL
51286: IFTRUE 51332
51288: LD_INT 19
51290: DOUBLE
51291: EQUAL
51292: IFTRUE 51332
51294: LD_INT 22
51296: DOUBLE
51297: EQUAL
51298: IFTRUE 51332
51300: LD_INT 20
51302: DOUBLE
51303: EQUAL
51304: IFTRUE 51332
51306: LD_INT 21
51308: DOUBLE
51309: EQUAL
51310: IFTRUE 51332
51312: LD_INT 23
51314: DOUBLE
51315: EQUAL
51316: IFTRUE 51332
51318: LD_INT 24
51320: DOUBLE
51321: EQUAL
51322: IFTRUE 51332
51324: LD_INT 25
51326: DOUBLE
51327: EQUAL
51328: IFTRUE 51332
51330: GO 51388
51332: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51333: LD_ADDR_VAR 0 9
51337: PUSH
51338: LD_VAR 0 35
51342: PUSH
51343: LD_VAR 0 36
51347: PUSH
51348: LD_VAR 0 37
51352: PUSH
51353: LD_VAR 0 38
51357: PUSH
51358: LD_VAR 0 39
51362: PUSH
51363: LD_VAR 0 40
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: PUSH
51376: LD_VAR 0 4
51380: PUSH
51381: LD_INT 1
51383: PLUS
51384: ARRAY
51385: ST_TO_ADDR
51386: GO 51753
51388: LD_INT 6
51390: DOUBLE
51391: EQUAL
51392: IFTRUE 51444
51394: LD_INT 7
51396: DOUBLE
51397: EQUAL
51398: IFTRUE 51444
51400: LD_INT 8
51402: DOUBLE
51403: EQUAL
51404: IFTRUE 51444
51406: LD_INT 13
51408: DOUBLE
51409: EQUAL
51410: IFTRUE 51444
51412: LD_INT 12
51414: DOUBLE
51415: EQUAL
51416: IFTRUE 51444
51418: LD_INT 15
51420: DOUBLE
51421: EQUAL
51422: IFTRUE 51444
51424: LD_INT 11
51426: DOUBLE
51427: EQUAL
51428: IFTRUE 51444
51430: LD_INT 14
51432: DOUBLE
51433: EQUAL
51434: IFTRUE 51444
51436: LD_INT 10
51438: DOUBLE
51439: EQUAL
51440: IFTRUE 51444
51442: GO 51500
51444: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51445: LD_ADDR_VAR 0 9
51449: PUSH
51450: LD_VAR 0 41
51454: PUSH
51455: LD_VAR 0 42
51459: PUSH
51460: LD_VAR 0 43
51464: PUSH
51465: LD_VAR 0 44
51469: PUSH
51470: LD_VAR 0 45
51474: PUSH
51475: LD_VAR 0 46
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: PUSH
51488: LD_VAR 0 4
51492: PUSH
51493: LD_INT 1
51495: PLUS
51496: ARRAY
51497: ST_TO_ADDR
51498: GO 51753
51500: LD_INT 36
51502: DOUBLE
51503: EQUAL
51504: IFTRUE 51508
51506: GO 51564
51508: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51509: LD_ADDR_VAR 0 9
51513: PUSH
51514: LD_VAR 0 47
51518: PUSH
51519: LD_VAR 0 48
51523: PUSH
51524: LD_VAR 0 49
51528: PUSH
51529: LD_VAR 0 50
51533: PUSH
51534: LD_VAR 0 51
51538: PUSH
51539: LD_VAR 0 52
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: PUSH
51552: LD_VAR 0 4
51556: PUSH
51557: LD_INT 1
51559: PLUS
51560: ARRAY
51561: ST_TO_ADDR
51562: GO 51753
51564: LD_INT 4
51566: DOUBLE
51567: EQUAL
51568: IFTRUE 51590
51570: LD_INT 5
51572: DOUBLE
51573: EQUAL
51574: IFTRUE 51590
51576: LD_INT 34
51578: DOUBLE
51579: EQUAL
51580: IFTRUE 51590
51582: LD_INT 37
51584: DOUBLE
51585: EQUAL
51586: IFTRUE 51590
51588: GO 51646
51590: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51591: LD_ADDR_VAR 0 9
51595: PUSH
51596: LD_VAR 0 53
51600: PUSH
51601: LD_VAR 0 54
51605: PUSH
51606: LD_VAR 0 55
51610: PUSH
51611: LD_VAR 0 56
51615: PUSH
51616: LD_VAR 0 57
51620: PUSH
51621: LD_VAR 0 58
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: PUSH
51634: LD_VAR 0 4
51638: PUSH
51639: LD_INT 1
51641: PLUS
51642: ARRAY
51643: ST_TO_ADDR
51644: GO 51753
51646: LD_INT 31
51648: DOUBLE
51649: EQUAL
51650: IFTRUE 51696
51652: LD_INT 32
51654: DOUBLE
51655: EQUAL
51656: IFTRUE 51696
51658: LD_INT 33
51660: DOUBLE
51661: EQUAL
51662: IFTRUE 51696
51664: LD_INT 27
51666: DOUBLE
51667: EQUAL
51668: IFTRUE 51696
51670: LD_INT 26
51672: DOUBLE
51673: EQUAL
51674: IFTRUE 51696
51676: LD_INT 28
51678: DOUBLE
51679: EQUAL
51680: IFTRUE 51696
51682: LD_INT 29
51684: DOUBLE
51685: EQUAL
51686: IFTRUE 51696
51688: LD_INT 30
51690: DOUBLE
51691: EQUAL
51692: IFTRUE 51696
51694: GO 51752
51696: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51697: LD_ADDR_VAR 0 9
51701: PUSH
51702: LD_VAR 0 59
51706: PUSH
51707: LD_VAR 0 60
51711: PUSH
51712: LD_VAR 0 61
51716: PUSH
51717: LD_VAR 0 62
51721: PUSH
51722: LD_VAR 0 63
51726: PUSH
51727: LD_VAR 0 64
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: PUSH
51740: LD_VAR 0 4
51744: PUSH
51745: LD_INT 1
51747: PLUS
51748: ARRAY
51749: ST_TO_ADDR
51750: GO 51753
51752: POP
// temp_list2 = [ ] ;
51753: LD_ADDR_VAR 0 10
51757: PUSH
51758: EMPTY
51759: ST_TO_ADDR
// for i in temp_list do
51760: LD_ADDR_VAR 0 8
51764: PUSH
51765: LD_VAR 0 9
51769: PUSH
51770: FOR_IN
51771: IFFALSE 51823
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51773: LD_ADDR_VAR 0 10
51777: PUSH
51778: LD_VAR 0 10
51782: PUSH
51783: LD_VAR 0 8
51787: PUSH
51788: LD_INT 1
51790: ARRAY
51791: PUSH
51792: LD_VAR 0 2
51796: PLUS
51797: PUSH
51798: LD_VAR 0 8
51802: PUSH
51803: LD_INT 2
51805: ARRAY
51806: PUSH
51807: LD_VAR 0 3
51811: PLUS
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: EMPTY
51818: LIST
51819: ADD
51820: ST_TO_ADDR
51821: GO 51770
51823: POP
51824: POP
// result = temp_list2 ;
51825: LD_ADDR_VAR 0 7
51829: PUSH
51830: LD_VAR 0 10
51834: ST_TO_ADDR
// end ;
51835: LD_VAR 0 7
51839: RET
// export function EnemyInRange ( unit , dist ) ; begin
51840: LD_INT 0
51842: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51843: LD_ADDR_VAR 0 3
51847: PUSH
51848: LD_VAR 0 1
51852: PPUSH
51853: CALL_OW 255
51857: PPUSH
51858: LD_VAR 0 1
51862: PPUSH
51863: CALL_OW 250
51867: PPUSH
51868: LD_VAR 0 1
51872: PPUSH
51873: CALL_OW 251
51877: PPUSH
51878: LD_VAR 0 2
51882: PPUSH
51883: CALL 25236 0 4
51887: PUSH
51888: LD_INT 4
51890: ARRAY
51891: ST_TO_ADDR
// end ;
51892: LD_VAR 0 3
51896: RET
// export function PlayerSeeMe ( unit ) ; begin
51897: LD_INT 0
51899: PPUSH
// result := See ( your_side , unit ) ;
51900: LD_ADDR_VAR 0 2
51904: PUSH
51905: LD_OWVAR 2
51909: PPUSH
51910: LD_VAR 0 1
51914: PPUSH
51915: CALL_OW 292
51919: ST_TO_ADDR
// end ;
51920: LD_VAR 0 2
51924: RET
// export function ReverseDir ( unit ) ; begin
51925: LD_INT 0
51927: PPUSH
// if not unit then
51928: LD_VAR 0 1
51932: NOT
51933: IFFALSE 51937
// exit ;
51935: GO 51960
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51937: LD_ADDR_VAR 0 2
51941: PUSH
51942: LD_VAR 0 1
51946: PPUSH
51947: CALL_OW 254
51951: PUSH
51952: LD_INT 3
51954: PLUS
51955: PUSH
51956: LD_INT 6
51958: MOD
51959: ST_TO_ADDR
// end ;
51960: LD_VAR 0 2
51964: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51965: LD_INT 0
51967: PPUSH
51968: PPUSH
51969: PPUSH
51970: PPUSH
51971: PPUSH
// if not hexes then
51972: LD_VAR 0 2
51976: NOT
51977: IFFALSE 51981
// exit ;
51979: GO 52129
// dist := 9999 ;
51981: LD_ADDR_VAR 0 5
51985: PUSH
51986: LD_INT 9999
51988: ST_TO_ADDR
// for i = 1 to hexes do
51989: LD_ADDR_VAR 0 4
51993: PUSH
51994: DOUBLE
51995: LD_INT 1
51997: DEC
51998: ST_TO_ADDR
51999: LD_VAR 0 2
52003: PUSH
52004: FOR_TO
52005: IFFALSE 52117
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52007: LD_VAR 0 1
52011: PPUSH
52012: LD_VAR 0 2
52016: PUSH
52017: LD_VAR 0 4
52021: ARRAY
52022: PUSH
52023: LD_INT 1
52025: ARRAY
52026: PPUSH
52027: LD_VAR 0 2
52031: PUSH
52032: LD_VAR 0 4
52036: ARRAY
52037: PUSH
52038: LD_INT 2
52040: ARRAY
52041: PPUSH
52042: CALL_OW 297
52046: PUSH
52047: LD_VAR 0 5
52051: LESS
52052: IFFALSE 52115
// begin hex := hexes [ i ] ;
52054: LD_ADDR_VAR 0 7
52058: PUSH
52059: LD_VAR 0 2
52063: PUSH
52064: LD_VAR 0 4
52068: ARRAY
52069: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52070: LD_ADDR_VAR 0 5
52074: PUSH
52075: LD_VAR 0 1
52079: PPUSH
52080: LD_VAR 0 2
52084: PUSH
52085: LD_VAR 0 4
52089: ARRAY
52090: PUSH
52091: LD_INT 1
52093: ARRAY
52094: PPUSH
52095: LD_VAR 0 2
52099: PUSH
52100: LD_VAR 0 4
52104: ARRAY
52105: PUSH
52106: LD_INT 2
52108: ARRAY
52109: PPUSH
52110: CALL_OW 297
52114: ST_TO_ADDR
// end ; end ;
52115: GO 52004
52117: POP
52118: POP
// result := hex ;
52119: LD_ADDR_VAR 0 3
52123: PUSH
52124: LD_VAR 0 7
52128: ST_TO_ADDR
// end ;
52129: LD_VAR 0 3
52133: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52134: LD_INT 0
52136: PPUSH
52137: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52138: LD_VAR 0 1
52142: NOT
52143: PUSH
52144: LD_VAR 0 1
52148: PUSH
52149: LD_INT 21
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 23
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PPUSH
52173: CALL_OW 69
52177: IN
52178: NOT
52179: OR
52180: IFFALSE 52184
// exit ;
52182: GO 52231
// for i = 1 to 3 do
52184: LD_ADDR_VAR 0 3
52188: PUSH
52189: DOUBLE
52190: LD_INT 1
52192: DEC
52193: ST_TO_ADDR
52194: LD_INT 3
52196: PUSH
52197: FOR_TO
52198: IFFALSE 52229
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52200: LD_VAR 0 1
52204: PPUSH
52205: CALL_OW 250
52209: PPUSH
52210: LD_VAR 0 1
52214: PPUSH
52215: CALL_OW 251
52219: PPUSH
52220: LD_INT 1
52222: PPUSH
52223: CALL_OW 453
52227: GO 52197
52229: POP
52230: POP
// end ;
52231: LD_VAR 0 2
52235: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52236: LD_INT 0
52238: PPUSH
52239: PPUSH
52240: PPUSH
52241: PPUSH
52242: PPUSH
52243: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52244: LD_VAR 0 1
52248: NOT
52249: PUSH
52250: LD_VAR 0 2
52254: NOT
52255: OR
52256: PUSH
52257: LD_VAR 0 1
52261: PPUSH
52262: CALL_OW 314
52266: OR
52267: IFFALSE 52271
// exit ;
52269: GO 52712
// x := GetX ( enemy_unit ) ;
52271: LD_ADDR_VAR 0 7
52275: PUSH
52276: LD_VAR 0 2
52280: PPUSH
52281: CALL_OW 250
52285: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52286: LD_ADDR_VAR 0 8
52290: PUSH
52291: LD_VAR 0 2
52295: PPUSH
52296: CALL_OW 251
52300: ST_TO_ADDR
// if not x or not y then
52301: LD_VAR 0 7
52305: NOT
52306: PUSH
52307: LD_VAR 0 8
52311: NOT
52312: OR
52313: IFFALSE 52317
// exit ;
52315: GO 52712
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52317: LD_ADDR_VAR 0 6
52321: PUSH
52322: LD_VAR 0 7
52326: PPUSH
52327: LD_INT 0
52329: PPUSH
52330: LD_INT 4
52332: PPUSH
52333: CALL_OW 272
52337: PUSH
52338: LD_VAR 0 8
52342: PPUSH
52343: LD_INT 0
52345: PPUSH
52346: LD_INT 4
52348: PPUSH
52349: CALL_OW 273
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_VAR 0 7
52362: PPUSH
52363: LD_INT 1
52365: PPUSH
52366: LD_INT 4
52368: PPUSH
52369: CALL_OW 272
52373: PUSH
52374: LD_VAR 0 8
52378: PPUSH
52379: LD_INT 1
52381: PPUSH
52382: LD_INT 4
52384: PPUSH
52385: CALL_OW 273
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_VAR 0 7
52398: PPUSH
52399: LD_INT 2
52401: PPUSH
52402: LD_INT 4
52404: PPUSH
52405: CALL_OW 272
52409: PUSH
52410: LD_VAR 0 8
52414: PPUSH
52415: LD_INT 2
52417: PPUSH
52418: LD_INT 4
52420: PPUSH
52421: CALL_OW 273
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_VAR 0 7
52434: PPUSH
52435: LD_INT 3
52437: PPUSH
52438: LD_INT 4
52440: PPUSH
52441: CALL_OW 272
52445: PUSH
52446: LD_VAR 0 8
52450: PPUSH
52451: LD_INT 3
52453: PPUSH
52454: LD_INT 4
52456: PPUSH
52457: CALL_OW 273
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_VAR 0 7
52470: PPUSH
52471: LD_INT 4
52473: PPUSH
52474: LD_INT 4
52476: PPUSH
52477: CALL_OW 272
52481: PUSH
52482: LD_VAR 0 8
52486: PPUSH
52487: LD_INT 4
52489: PPUSH
52490: LD_INT 4
52492: PPUSH
52493: CALL_OW 273
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_VAR 0 7
52506: PPUSH
52507: LD_INT 5
52509: PPUSH
52510: LD_INT 4
52512: PPUSH
52513: CALL_OW 272
52517: PUSH
52518: LD_VAR 0 8
52522: PPUSH
52523: LD_INT 5
52525: PPUSH
52526: LD_INT 4
52528: PPUSH
52529: CALL_OW 273
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: ST_TO_ADDR
// for i = tmp downto 1 do
52546: LD_ADDR_VAR 0 4
52550: PUSH
52551: DOUBLE
52552: LD_VAR 0 6
52556: INC
52557: ST_TO_ADDR
52558: LD_INT 1
52560: PUSH
52561: FOR_DOWNTO
52562: IFFALSE 52663
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52564: LD_VAR 0 6
52568: PUSH
52569: LD_VAR 0 4
52573: ARRAY
52574: PUSH
52575: LD_INT 1
52577: ARRAY
52578: PPUSH
52579: LD_VAR 0 6
52583: PUSH
52584: LD_VAR 0 4
52588: ARRAY
52589: PUSH
52590: LD_INT 2
52592: ARRAY
52593: PPUSH
52594: CALL_OW 488
52598: NOT
52599: PUSH
52600: LD_VAR 0 6
52604: PUSH
52605: LD_VAR 0 4
52609: ARRAY
52610: PUSH
52611: LD_INT 1
52613: ARRAY
52614: PPUSH
52615: LD_VAR 0 6
52619: PUSH
52620: LD_VAR 0 4
52624: ARRAY
52625: PUSH
52626: LD_INT 2
52628: ARRAY
52629: PPUSH
52630: CALL_OW 428
52634: PUSH
52635: LD_INT 0
52637: NONEQUAL
52638: OR
52639: IFFALSE 52661
// tmp := Delete ( tmp , i ) ;
52641: LD_ADDR_VAR 0 6
52645: PUSH
52646: LD_VAR 0 6
52650: PPUSH
52651: LD_VAR 0 4
52655: PPUSH
52656: CALL_OW 3
52660: ST_TO_ADDR
52661: GO 52561
52663: POP
52664: POP
// j := GetClosestHex ( unit , tmp ) ;
52665: LD_ADDR_VAR 0 5
52669: PUSH
52670: LD_VAR 0 1
52674: PPUSH
52675: LD_VAR 0 6
52679: PPUSH
52680: CALL 51965 0 2
52684: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52685: LD_VAR 0 1
52689: PPUSH
52690: LD_VAR 0 5
52694: PUSH
52695: LD_INT 1
52697: ARRAY
52698: PPUSH
52699: LD_VAR 0 5
52703: PUSH
52704: LD_INT 2
52706: ARRAY
52707: PPUSH
52708: CALL_OW 111
// end ;
52712: LD_VAR 0 3
52716: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52717: LD_INT 0
52719: PPUSH
52720: PPUSH
52721: PPUSH
// uc_side = 0 ;
52722: LD_ADDR_OWVAR 20
52726: PUSH
52727: LD_INT 0
52729: ST_TO_ADDR
// uc_nation = 0 ;
52730: LD_ADDR_OWVAR 21
52734: PUSH
52735: LD_INT 0
52737: ST_TO_ADDR
// InitHc_All ( ) ;
52738: CALL_OW 584
// InitVc ;
52742: CALL_OW 20
// if mastodonts then
52746: LD_VAR 0 6
52750: IFFALSE 52817
// for i = 1 to mastodonts do
52752: LD_ADDR_VAR 0 11
52756: PUSH
52757: DOUBLE
52758: LD_INT 1
52760: DEC
52761: ST_TO_ADDR
52762: LD_VAR 0 6
52766: PUSH
52767: FOR_TO
52768: IFFALSE 52815
// begin vc_chassis := 31 ;
52770: LD_ADDR_OWVAR 37
52774: PUSH
52775: LD_INT 31
52777: ST_TO_ADDR
// vc_control := control_rider ;
52778: LD_ADDR_OWVAR 38
52782: PUSH
52783: LD_INT 4
52785: ST_TO_ADDR
// animal := CreateVehicle ;
52786: LD_ADDR_VAR 0 12
52790: PUSH
52791: CALL_OW 45
52795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52796: LD_VAR 0 12
52800: PPUSH
52801: LD_VAR 0 8
52805: PPUSH
52806: LD_INT 0
52808: PPUSH
52809: CALL 55005 0 3
// end ;
52813: GO 52767
52815: POP
52816: POP
// if horses then
52817: LD_VAR 0 5
52821: IFFALSE 52888
// for i = 1 to horses do
52823: LD_ADDR_VAR 0 11
52827: PUSH
52828: DOUBLE
52829: LD_INT 1
52831: DEC
52832: ST_TO_ADDR
52833: LD_VAR 0 5
52837: PUSH
52838: FOR_TO
52839: IFFALSE 52886
// begin hc_class := 21 ;
52841: LD_ADDR_OWVAR 28
52845: PUSH
52846: LD_INT 21
52848: ST_TO_ADDR
// hc_gallery :=  ;
52849: LD_ADDR_OWVAR 33
52853: PUSH
52854: LD_STRING 
52856: ST_TO_ADDR
// animal := CreateHuman ;
52857: LD_ADDR_VAR 0 12
52861: PUSH
52862: CALL_OW 44
52866: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52867: LD_VAR 0 12
52871: PPUSH
52872: LD_VAR 0 8
52876: PPUSH
52877: LD_INT 0
52879: PPUSH
52880: CALL 55005 0 3
// end ;
52884: GO 52838
52886: POP
52887: POP
// if birds then
52888: LD_VAR 0 1
52892: IFFALSE 52959
// for i = 1 to birds do
52894: LD_ADDR_VAR 0 11
52898: PUSH
52899: DOUBLE
52900: LD_INT 1
52902: DEC
52903: ST_TO_ADDR
52904: LD_VAR 0 1
52908: PUSH
52909: FOR_TO
52910: IFFALSE 52957
// begin hc_class = 18 ;
52912: LD_ADDR_OWVAR 28
52916: PUSH
52917: LD_INT 18
52919: ST_TO_ADDR
// hc_gallery =  ;
52920: LD_ADDR_OWVAR 33
52924: PUSH
52925: LD_STRING 
52927: ST_TO_ADDR
// animal := CreateHuman ;
52928: LD_ADDR_VAR 0 12
52932: PUSH
52933: CALL_OW 44
52937: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52938: LD_VAR 0 12
52942: PPUSH
52943: LD_VAR 0 8
52947: PPUSH
52948: LD_INT 0
52950: PPUSH
52951: CALL 55005 0 3
// end ;
52955: GO 52909
52957: POP
52958: POP
// if tigers then
52959: LD_VAR 0 2
52963: IFFALSE 53047
// for i = 1 to tigers do
52965: LD_ADDR_VAR 0 11
52969: PUSH
52970: DOUBLE
52971: LD_INT 1
52973: DEC
52974: ST_TO_ADDR
52975: LD_VAR 0 2
52979: PUSH
52980: FOR_TO
52981: IFFALSE 53045
// begin hc_class = class_tiger ;
52983: LD_ADDR_OWVAR 28
52987: PUSH
52988: LD_INT 14
52990: ST_TO_ADDR
// hc_gallery =  ;
52991: LD_ADDR_OWVAR 33
52995: PUSH
52996: LD_STRING 
52998: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52999: LD_ADDR_OWVAR 35
53003: PUSH
53004: LD_INT 7
53006: NEG
53007: PPUSH
53008: LD_INT 7
53010: PPUSH
53011: CALL_OW 12
53015: ST_TO_ADDR
// animal := CreateHuman ;
53016: LD_ADDR_VAR 0 12
53020: PUSH
53021: CALL_OW 44
53025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53026: LD_VAR 0 12
53030: PPUSH
53031: LD_VAR 0 8
53035: PPUSH
53036: LD_INT 0
53038: PPUSH
53039: CALL 55005 0 3
// end ;
53043: GO 52980
53045: POP
53046: POP
// if apemans then
53047: LD_VAR 0 3
53051: IFFALSE 53174
// for i = 1 to apemans do
53053: LD_ADDR_VAR 0 11
53057: PUSH
53058: DOUBLE
53059: LD_INT 1
53061: DEC
53062: ST_TO_ADDR
53063: LD_VAR 0 3
53067: PUSH
53068: FOR_TO
53069: IFFALSE 53172
// begin hc_class = class_apeman ;
53071: LD_ADDR_OWVAR 28
53075: PUSH
53076: LD_INT 12
53078: ST_TO_ADDR
// hc_gallery =  ;
53079: LD_ADDR_OWVAR 33
53083: PUSH
53084: LD_STRING 
53086: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53087: LD_ADDR_OWVAR 35
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PPUSH
53096: LD_INT 2
53098: PPUSH
53099: CALL_OW 12
53103: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53104: LD_ADDR_OWVAR 31
53108: PUSH
53109: LD_INT 1
53111: PPUSH
53112: LD_INT 3
53114: PPUSH
53115: CALL_OW 12
53119: PUSH
53120: LD_INT 1
53122: PPUSH
53123: LD_INT 3
53125: PPUSH
53126: CALL_OW 12
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// animal := CreateHuman ;
53143: LD_ADDR_VAR 0 12
53147: PUSH
53148: CALL_OW 44
53152: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53153: LD_VAR 0 12
53157: PPUSH
53158: LD_VAR 0 8
53162: PPUSH
53163: LD_INT 0
53165: PPUSH
53166: CALL 55005 0 3
// end ;
53170: GO 53068
53172: POP
53173: POP
// if enchidnas then
53174: LD_VAR 0 4
53178: IFFALSE 53245
// for i = 1 to enchidnas do
53180: LD_ADDR_VAR 0 11
53184: PUSH
53185: DOUBLE
53186: LD_INT 1
53188: DEC
53189: ST_TO_ADDR
53190: LD_VAR 0 4
53194: PUSH
53195: FOR_TO
53196: IFFALSE 53243
// begin hc_class = 13 ;
53198: LD_ADDR_OWVAR 28
53202: PUSH
53203: LD_INT 13
53205: ST_TO_ADDR
// hc_gallery =  ;
53206: LD_ADDR_OWVAR 33
53210: PUSH
53211: LD_STRING 
53213: ST_TO_ADDR
// animal := CreateHuman ;
53214: LD_ADDR_VAR 0 12
53218: PUSH
53219: CALL_OW 44
53223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53224: LD_VAR 0 12
53228: PPUSH
53229: LD_VAR 0 8
53233: PPUSH
53234: LD_INT 0
53236: PPUSH
53237: CALL 55005 0 3
// end ;
53241: GO 53195
53243: POP
53244: POP
// if fishes then
53245: LD_VAR 0 7
53249: IFFALSE 53316
// for i = 1 to fishes do
53251: LD_ADDR_VAR 0 11
53255: PUSH
53256: DOUBLE
53257: LD_INT 1
53259: DEC
53260: ST_TO_ADDR
53261: LD_VAR 0 7
53265: PUSH
53266: FOR_TO
53267: IFFALSE 53314
// begin hc_class = 20 ;
53269: LD_ADDR_OWVAR 28
53273: PUSH
53274: LD_INT 20
53276: ST_TO_ADDR
// hc_gallery =  ;
53277: LD_ADDR_OWVAR 33
53281: PUSH
53282: LD_STRING 
53284: ST_TO_ADDR
// animal := CreateHuman ;
53285: LD_ADDR_VAR 0 12
53289: PUSH
53290: CALL_OW 44
53294: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53295: LD_VAR 0 12
53299: PPUSH
53300: LD_VAR 0 9
53304: PPUSH
53305: LD_INT 0
53307: PPUSH
53308: CALL 55005 0 3
// end ;
53312: GO 53266
53314: POP
53315: POP
// end ;
53316: LD_VAR 0 10
53320: RET
// export function WantHeal ( sci , unit ) ; begin
53321: LD_INT 0
53323: PPUSH
// if GetTaskList ( sci ) > 0 then
53324: LD_VAR 0 1
53328: PPUSH
53329: CALL_OW 437
53333: PUSH
53334: LD_INT 0
53336: GREATER
53337: IFFALSE 53407
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53339: LD_VAR 0 1
53343: PPUSH
53344: CALL_OW 437
53348: PUSH
53349: LD_INT 1
53351: ARRAY
53352: PUSH
53353: LD_INT 1
53355: ARRAY
53356: PUSH
53357: LD_STRING l
53359: EQUAL
53360: PUSH
53361: LD_VAR 0 1
53365: PPUSH
53366: CALL_OW 437
53370: PUSH
53371: LD_INT 1
53373: ARRAY
53374: PUSH
53375: LD_INT 4
53377: ARRAY
53378: PUSH
53379: LD_VAR 0 2
53383: EQUAL
53384: AND
53385: IFFALSE 53397
// result := true else
53387: LD_ADDR_VAR 0 3
53391: PUSH
53392: LD_INT 1
53394: ST_TO_ADDR
53395: GO 53405
// result := false ;
53397: LD_ADDR_VAR 0 3
53401: PUSH
53402: LD_INT 0
53404: ST_TO_ADDR
// end else
53405: GO 53415
// result := false ;
53407: LD_ADDR_VAR 0 3
53411: PUSH
53412: LD_INT 0
53414: ST_TO_ADDR
// end ;
53415: LD_VAR 0 3
53419: RET
// export function HealTarget ( sci ) ; begin
53420: LD_INT 0
53422: PPUSH
// if not sci then
53423: LD_VAR 0 1
53427: NOT
53428: IFFALSE 53432
// exit ;
53430: GO 53497
// result := 0 ;
53432: LD_ADDR_VAR 0 2
53436: PUSH
53437: LD_INT 0
53439: ST_TO_ADDR
// if GetTaskList ( sci ) then
53440: LD_VAR 0 1
53444: PPUSH
53445: CALL_OW 437
53449: IFFALSE 53497
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53451: LD_VAR 0 1
53455: PPUSH
53456: CALL_OW 437
53460: PUSH
53461: LD_INT 1
53463: ARRAY
53464: PUSH
53465: LD_INT 1
53467: ARRAY
53468: PUSH
53469: LD_STRING l
53471: EQUAL
53472: IFFALSE 53497
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53474: LD_ADDR_VAR 0 2
53478: PUSH
53479: LD_VAR 0 1
53483: PPUSH
53484: CALL_OW 437
53488: PUSH
53489: LD_INT 1
53491: ARRAY
53492: PUSH
53493: LD_INT 4
53495: ARRAY
53496: ST_TO_ADDR
// end ;
53497: LD_VAR 0 2
53501: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53502: LD_INT 0
53504: PPUSH
53505: PPUSH
53506: PPUSH
53507: PPUSH
// if not base_units then
53508: LD_VAR 0 1
53512: NOT
53513: IFFALSE 53517
// exit ;
53515: GO 53604
// result := false ;
53517: LD_ADDR_VAR 0 2
53521: PUSH
53522: LD_INT 0
53524: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53525: LD_ADDR_VAR 0 5
53529: PUSH
53530: LD_VAR 0 1
53534: PPUSH
53535: LD_INT 21
53537: PUSH
53538: LD_INT 3
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PPUSH
53545: CALL_OW 72
53549: ST_TO_ADDR
// if not tmp then
53550: LD_VAR 0 5
53554: NOT
53555: IFFALSE 53559
// exit ;
53557: GO 53604
// for i in tmp do
53559: LD_ADDR_VAR 0 3
53563: PUSH
53564: LD_VAR 0 5
53568: PUSH
53569: FOR_IN
53570: IFFALSE 53602
// begin result := EnemyInRange ( i , 22 ) ;
53572: LD_ADDR_VAR 0 2
53576: PUSH
53577: LD_VAR 0 3
53581: PPUSH
53582: LD_INT 22
53584: PPUSH
53585: CALL 51840 0 2
53589: ST_TO_ADDR
// if result then
53590: LD_VAR 0 2
53594: IFFALSE 53600
// exit ;
53596: POP
53597: POP
53598: GO 53604
// end ;
53600: GO 53569
53602: POP
53603: POP
// end ;
53604: LD_VAR 0 2
53608: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53609: LD_INT 0
53611: PPUSH
53612: PPUSH
// if not units then
53613: LD_VAR 0 1
53617: NOT
53618: IFFALSE 53622
// exit ;
53620: GO 53692
// result := [ ] ;
53622: LD_ADDR_VAR 0 3
53626: PUSH
53627: EMPTY
53628: ST_TO_ADDR
// for i in units do
53629: LD_ADDR_VAR 0 4
53633: PUSH
53634: LD_VAR 0 1
53638: PUSH
53639: FOR_IN
53640: IFFALSE 53690
// if GetTag ( i ) = tag then
53642: LD_VAR 0 4
53646: PPUSH
53647: CALL_OW 110
53651: PUSH
53652: LD_VAR 0 2
53656: EQUAL
53657: IFFALSE 53688
// result := Replace ( result , result + 1 , i ) ;
53659: LD_ADDR_VAR 0 3
53663: PUSH
53664: LD_VAR 0 3
53668: PPUSH
53669: LD_VAR 0 3
53673: PUSH
53674: LD_INT 1
53676: PLUS
53677: PPUSH
53678: LD_VAR 0 4
53682: PPUSH
53683: CALL_OW 1
53687: ST_TO_ADDR
53688: GO 53639
53690: POP
53691: POP
// end ;
53692: LD_VAR 0 3
53696: RET
// export function IsDriver ( un ) ; begin
53697: LD_INT 0
53699: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53700: LD_ADDR_VAR 0 2
53704: PUSH
53705: LD_VAR 0 1
53709: PUSH
53710: LD_INT 55
53712: PUSH
53713: EMPTY
53714: LIST
53715: PPUSH
53716: CALL_OW 69
53720: IN
53721: ST_TO_ADDR
// end ;
53722: LD_VAR 0 2
53726: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53727: LD_INT 0
53729: PPUSH
53730: PPUSH
// list := [ ] ;
53731: LD_ADDR_VAR 0 5
53735: PUSH
53736: EMPTY
53737: ST_TO_ADDR
// case d of 0 :
53738: LD_VAR 0 3
53742: PUSH
53743: LD_INT 0
53745: DOUBLE
53746: EQUAL
53747: IFTRUE 53751
53749: GO 53884
53751: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53752: LD_ADDR_VAR 0 5
53756: PUSH
53757: LD_VAR 0 1
53761: PUSH
53762: LD_INT 4
53764: MINUS
53765: PUSH
53766: LD_VAR 0 2
53770: PUSH
53771: LD_INT 4
53773: MINUS
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: PUSH
53783: LD_VAR 0 1
53787: PUSH
53788: LD_INT 3
53790: MINUS
53791: PUSH
53792: LD_VAR 0 2
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: LIST
53804: PUSH
53805: LD_VAR 0 1
53809: PUSH
53810: LD_INT 4
53812: PLUS
53813: PUSH
53814: LD_VAR 0 2
53818: PUSH
53819: LD_INT 4
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: PUSH
53827: LD_VAR 0 1
53831: PUSH
53832: LD_INT 3
53834: PLUS
53835: PUSH
53836: LD_VAR 0 2
53840: PUSH
53841: LD_INT 3
53843: PLUS
53844: PUSH
53845: LD_INT 5
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: PUSH
53853: LD_VAR 0 1
53857: PUSH
53858: LD_VAR 0 2
53862: PUSH
53863: LD_INT 4
53865: PLUS
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: LIST
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: ST_TO_ADDR
// end ; 1 :
53882: GO 54582
53884: LD_INT 1
53886: DOUBLE
53887: EQUAL
53888: IFTRUE 53892
53890: GO 54025
53892: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53893: LD_ADDR_VAR 0 5
53897: PUSH
53898: LD_VAR 0 1
53902: PUSH
53903: LD_VAR 0 2
53907: PUSH
53908: LD_INT 4
53910: MINUS
53911: PUSH
53912: LD_INT 3
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: LIST
53919: PUSH
53920: LD_VAR 0 1
53924: PUSH
53925: LD_INT 3
53927: MINUS
53928: PUSH
53929: LD_VAR 0 2
53933: PUSH
53934: LD_INT 3
53936: MINUS
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: PUSH
53946: LD_VAR 0 1
53950: PUSH
53951: LD_INT 4
53953: MINUS
53954: PUSH
53955: LD_VAR 0 2
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: LIST
53967: PUSH
53968: LD_VAR 0 1
53972: PUSH
53973: LD_VAR 0 2
53977: PUSH
53978: LD_INT 3
53980: PLUS
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: PUSH
53990: LD_VAR 0 1
53994: PUSH
53995: LD_INT 4
53997: PLUS
53998: PUSH
53999: LD_VAR 0 2
54003: PUSH
54004: LD_INT 4
54006: PLUS
54007: PUSH
54008: LD_INT 5
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: LIST
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: ST_TO_ADDR
// end ; 2 :
54023: GO 54582
54025: LD_INT 2
54027: DOUBLE
54028: EQUAL
54029: IFTRUE 54033
54031: GO 54162
54033: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54034: LD_ADDR_VAR 0 5
54038: PUSH
54039: LD_VAR 0 1
54043: PUSH
54044: LD_VAR 0 2
54048: PUSH
54049: LD_INT 3
54051: MINUS
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: LIST
54060: PUSH
54061: LD_VAR 0 1
54065: PUSH
54066: LD_INT 4
54068: PLUS
54069: PUSH
54070: LD_VAR 0 2
54074: PUSH
54075: LD_INT 4
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: LIST
54082: PUSH
54083: LD_VAR 0 1
54087: PUSH
54088: LD_VAR 0 2
54092: PUSH
54093: LD_INT 4
54095: PLUS
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: LIST
54104: PUSH
54105: LD_VAR 0 1
54109: PUSH
54110: LD_INT 3
54112: MINUS
54113: PUSH
54114: LD_VAR 0 2
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: LIST
54126: PUSH
54127: LD_VAR 0 1
54131: PUSH
54132: LD_INT 4
54134: MINUS
54135: PUSH
54136: LD_VAR 0 2
54140: PUSH
54141: LD_INT 4
54143: MINUS
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: LIST
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: ST_TO_ADDR
// end ; 3 :
54160: GO 54582
54162: LD_INT 3
54164: DOUBLE
54165: EQUAL
54166: IFTRUE 54170
54168: GO 54303
54170: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54171: LD_ADDR_VAR 0 5
54175: PUSH
54176: LD_VAR 0 1
54180: PUSH
54181: LD_INT 3
54183: PLUS
54184: PUSH
54185: LD_VAR 0 2
54189: PUSH
54190: LD_INT 4
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: LIST
54197: PUSH
54198: LD_VAR 0 1
54202: PUSH
54203: LD_INT 4
54205: PLUS
54206: PUSH
54207: LD_VAR 0 2
54211: PUSH
54212: LD_INT 4
54214: PLUS
54215: PUSH
54216: LD_INT 5
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: LIST
54223: PUSH
54224: LD_VAR 0 1
54228: PUSH
54229: LD_INT 4
54231: MINUS
54232: PUSH
54233: LD_VAR 0 2
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: LIST
54245: PUSH
54246: LD_VAR 0 1
54250: PUSH
54251: LD_VAR 0 2
54255: PUSH
54256: LD_INT 4
54258: MINUS
54259: PUSH
54260: LD_INT 3
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: LIST
54267: PUSH
54268: LD_VAR 0 1
54272: PUSH
54273: LD_INT 3
54275: MINUS
54276: PUSH
54277: LD_VAR 0 2
54281: PUSH
54282: LD_INT 3
54284: MINUS
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: ST_TO_ADDR
// end ; 4 :
54301: GO 54582
54303: LD_INT 4
54305: DOUBLE
54306: EQUAL
54307: IFTRUE 54311
54309: GO 54444
54311: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54312: LD_ADDR_VAR 0 5
54316: PUSH
54317: LD_VAR 0 1
54321: PUSH
54322: LD_VAR 0 2
54326: PUSH
54327: LD_INT 4
54329: PLUS
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: LIST
54338: PUSH
54339: LD_VAR 0 1
54343: PUSH
54344: LD_INT 3
54346: PLUS
54347: PUSH
54348: LD_VAR 0 2
54352: PUSH
54353: LD_INT 3
54355: PLUS
54356: PUSH
54357: LD_INT 5
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: LIST
54364: PUSH
54365: LD_VAR 0 1
54369: PUSH
54370: LD_INT 4
54372: PLUS
54373: PUSH
54374: LD_VAR 0 2
54378: PUSH
54379: LD_INT 4
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: PUSH
54387: LD_VAR 0 1
54391: PUSH
54392: LD_VAR 0 2
54396: PUSH
54397: LD_INT 3
54399: MINUS
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: LIST
54408: PUSH
54409: LD_VAR 0 1
54413: PUSH
54414: LD_INT 4
54416: MINUS
54417: PUSH
54418: LD_VAR 0 2
54422: PUSH
54423: LD_INT 4
54425: MINUS
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: ST_TO_ADDR
// end ; 5 :
54442: GO 54582
54444: LD_INT 5
54446: DOUBLE
54447: EQUAL
54448: IFTRUE 54452
54450: GO 54581
54452: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54453: LD_ADDR_VAR 0 5
54457: PUSH
54458: LD_VAR 0 1
54462: PUSH
54463: LD_INT 4
54465: MINUS
54466: PUSH
54467: LD_VAR 0 2
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: LIST
54479: PUSH
54480: LD_VAR 0 1
54484: PUSH
54485: LD_VAR 0 2
54489: PUSH
54490: LD_INT 4
54492: MINUS
54493: PUSH
54494: LD_INT 3
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: LIST
54501: PUSH
54502: LD_VAR 0 1
54506: PUSH
54507: LD_INT 4
54509: PLUS
54510: PUSH
54511: LD_VAR 0 2
54515: PUSH
54516: LD_INT 4
54518: PLUS
54519: PUSH
54520: LD_INT 5
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: LIST
54527: PUSH
54528: LD_VAR 0 1
54532: PUSH
54533: LD_INT 3
54535: PLUS
54536: PUSH
54537: LD_VAR 0 2
54541: PUSH
54542: LD_INT 4
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: LIST
54549: PUSH
54550: LD_VAR 0 1
54554: PUSH
54555: LD_VAR 0 2
54559: PUSH
54560: LD_INT 3
54562: PLUS
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: LIST
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: ST_TO_ADDR
// end ; end ;
54579: GO 54582
54581: POP
// result := list ;
54582: LD_ADDR_VAR 0 4
54586: PUSH
54587: LD_VAR 0 5
54591: ST_TO_ADDR
// end ;
54592: LD_VAR 0 4
54596: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54597: LD_INT 0
54599: PPUSH
54600: PPUSH
54601: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54602: LD_VAR 0 1
54606: NOT
54607: PUSH
54608: LD_VAR 0 2
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 2
54618: PUSH
54619: LD_INT 3
54621: PUSH
54622: LD_INT 4
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: IN
54631: NOT
54632: OR
54633: IFFALSE 54637
// exit ;
54635: GO 54729
// tmp := [ ] ;
54637: LD_ADDR_VAR 0 5
54641: PUSH
54642: EMPTY
54643: ST_TO_ADDR
// for i in units do
54644: LD_ADDR_VAR 0 4
54648: PUSH
54649: LD_VAR 0 1
54653: PUSH
54654: FOR_IN
54655: IFFALSE 54698
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54657: LD_ADDR_VAR 0 5
54661: PUSH
54662: LD_VAR 0 5
54666: PPUSH
54667: LD_VAR 0 5
54671: PUSH
54672: LD_INT 1
54674: PLUS
54675: PPUSH
54676: LD_VAR 0 4
54680: PPUSH
54681: LD_VAR 0 2
54685: PPUSH
54686: CALL_OW 259
54690: PPUSH
54691: CALL_OW 2
54695: ST_TO_ADDR
54696: GO 54654
54698: POP
54699: POP
// if not tmp then
54700: LD_VAR 0 5
54704: NOT
54705: IFFALSE 54709
// exit ;
54707: GO 54729
// result := SortListByListDesc ( units , tmp ) ;
54709: LD_ADDR_VAR 0 3
54713: PUSH
54714: LD_VAR 0 1
54718: PPUSH
54719: LD_VAR 0 5
54723: PPUSH
54724: CALL_OW 77
54728: ST_TO_ADDR
// end ;
54729: LD_VAR 0 3
54733: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54734: LD_INT 0
54736: PPUSH
54737: PPUSH
54738: PPUSH
// result := false ;
54739: LD_ADDR_VAR 0 3
54743: PUSH
54744: LD_INT 0
54746: ST_TO_ADDR
// x := GetX ( building ) ;
54747: LD_ADDR_VAR 0 4
54751: PUSH
54752: LD_VAR 0 2
54756: PPUSH
54757: CALL_OW 250
54761: ST_TO_ADDR
// y := GetY ( building ) ;
54762: LD_ADDR_VAR 0 5
54766: PUSH
54767: LD_VAR 0 2
54771: PPUSH
54772: CALL_OW 251
54776: ST_TO_ADDR
// if not building or not x or not y then
54777: LD_VAR 0 2
54781: NOT
54782: PUSH
54783: LD_VAR 0 4
54787: NOT
54788: OR
54789: PUSH
54790: LD_VAR 0 5
54794: NOT
54795: OR
54796: IFFALSE 54800
// exit ;
54798: GO 54892
// if GetTaskList ( unit ) then
54800: LD_VAR 0 1
54804: PPUSH
54805: CALL_OW 437
54809: IFFALSE 54892
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54811: LD_STRING e
54813: PUSH
54814: LD_VAR 0 1
54818: PPUSH
54819: CALL_OW 437
54823: PUSH
54824: LD_INT 1
54826: ARRAY
54827: PUSH
54828: LD_INT 1
54830: ARRAY
54831: EQUAL
54832: PUSH
54833: LD_VAR 0 4
54837: PUSH
54838: LD_VAR 0 1
54842: PPUSH
54843: CALL_OW 437
54847: PUSH
54848: LD_INT 1
54850: ARRAY
54851: PUSH
54852: LD_INT 2
54854: ARRAY
54855: EQUAL
54856: AND
54857: PUSH
54858: LD_VAR 0 5
54862: PUSH
54863: LD_VAR 0 1
54867: PPUSH
54868: CALL_OW 437
54872: PUSH
54873: LD_INT 1
54875: ARRAY
54876: PUSH
54877: LD_INT 3
54879: ARRAY
54880: EQUAL
54881: AND
54882: IFFALSE 54892
// result := true end ;
54884: LD_ADDR_VAR 0 3
54888: PUSH
54889: LD_INT 1
54891: ST_TO_ADDR
// end ;
54892: LD_VAR 0 3
54896: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54897: LD_INT 0
54899: PPUSH
// result := false ;
54900: LD_ADDR_VAR 0 4
54904: PUSH
54905: LD_INT 0
54907: ST_TO_ADDR
// if GetTaskList ( unit ) then
54908: LD_VAR 0 1
54912: PPUSH
54913: CALL_OW 437
54917: IFFALSE 55000
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54919: LD_STRING M
54921: PUSH
54922: LD_VAR 0 1
54926: PPUSH
54927: CALL_OW 437
54931: PUSH
54932: LD_INT 1
54934: ARRAY
54935: PUSH
54936: LD_INT 1
54938: ARRAY
54939: EQUAL
54940: PUSH
54941: LD_VAR 0 2
54945: PUSH
54946: LD_VAR 0 1
54950: PPUSH
54951: CALL_OW 437
54955: PUSH
54956: LD_INT 1
54958: ARRAY
54959: PUSH
54960: LD_INT 2
54962: ARRAY
54963: EQUAL
54964: AND
54965: PUSH
54966: LD_VAR 0 3
54970: PUSH
54971: LD_VAR 0 1
54975: PPUSH
54976: CALL_OW 437
54980: PUSH
54981: LD_INT 1
54983: ARRAY
54984: PUSH
54985: LD_INT 3
54987: ARRAY
54988: EQUAL
54989: AND
54990: IFFALSE 55000
// result := true ;
54992: LD_ADDR_VAR 0 4
54996: PUSH
54997: LD_INT 1
54999: ST_TO_ADDR
// end ; end ;
55000: LD_VAR 0 4
55004: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55005: LD_INT 0
55007: PPUSH
55008: PPUSH
55009: PPUSH
55010: PPUSH
// if not unit or not area then
55011: LD_VAR 0 1
55015: NOT
55016: PUSH
55017: LD_VAR 0 2
55021: NOT
55022: OR
55023: IFFALSE 55027
// exit ;
55025: GO 55191
// tmp := AreaToList ( area , i ) ;
55027: LD_ADDR_VAR 0 6
55031: PUSH
55032: LD_VAR 0 2
55036: PPUSH
55037: LD_VAR 0 5
55041: PPUSH
55042: CALL_OW 517
55046: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55047: LD_ADDR_VAR 0 5
55051: PUSH
55052: DOUBLE
55053: LD_INT 1
55055: DEC
55056: ST_TO_ADDR
55057: LD_VAR 0 6
55061: PUSH
55062: LD_INT 1
55064: ARRAY
55065: PUSH
55066: FOR_TO
55067: IFFALSE 55189
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55069: LD_ADDR_VAR 0 7
55073: PUSH
55074: LD_VAR 0 6
55078: PUSH
55079: LD_INT 1
55081: ARRAY
55082: PUSH
55083: LD_VAR 0 5
55087: ARRAY
55088: PUSH
55089: LD_VAR 0 6
55093: PUSH
55094: LD_INT 2
55096: ARRAY
55097: PUSH
55098: LD_VAR 0 5
55102: ARRAY
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55108: LD_VAR 0 7
55112: PUSH
55113: LD_INT 1
55115: ARRAY
55116: PPUSH
55117: LD_VAR 0 7
55121: PUSH
55122: LD_INT 2
55124: ARRAY
55125: PPUSH
55126: CALL_OW 428
55130: PUSH
55131: LD_INT 0
55133: EQUAL
55134: IFFALSE 55187
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55136: LD_VAR 0 1
55140: PPUSH
55141: LD_VAR 0 7
55145: PUSH
55146: LD_INT 1
55148: ARRAY
55149: PPUSH
55150: LD_VAR 0 7
55154: PUSH
55155: LD_INT 2
55157: ARRAY
55158: PPUSH
55159: LD_VAR 0 3
55163: PPUSH
55164: CALL_OW 48
// result := IsPlaced ( unit ) ;
55168: LD_ADDR_VAR 0 4
55172: PUSH
55173: LD_VAR 0 1
55177: PPUSH
55178: CALL_OW 305
55182: ST_TO_ADDR
// exit ;
55183: POP
55184: POP
55185: GO 55191
// end ; end ;
55187: GO 55066
55189: POP
55190: POP
// end ;
55191: LD_VAR 0 4
55195: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55196: LD_INT 0
55198: PPUSH
55199: PPUSH
55200: PPUSH
// if not side or side > 8 then
55201: LD_VAR 0 1
55205: NOT
55206: PUSH
55207: LD_VAR 0 1
55211: PUSH
55212: LD_INT 8
55214: GREATER
55215: OR
55216: IFFALSE 55220
// exit ;
55218: GO 55407
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55220: LD_ADDR_VAR 0 4
55224: PUSH
55225: LD_INT 22
55227: PUSH
55228: LD_VAR 0 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 21
55239: PUSH
55240: LD_INT 3
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PPUSH
55251: CALL_OW 69
55255: ST_TO_ADDR
// if not tmp then
55256: LD_VAR 0 4
55260: NOT
55261: IFFALSE 55265
// exit ;
55263: GO 55407
// enable_addtolog := true ;
55265: LD_ADDR_OWVAR 81
55269: PUSH
55270: LD_INT 1
55272: ST_TO_ADDR
// AddToLog ( [ ) ;
55273: LD_STRING [
55275: PPUSH
55276: CALL_OW 561
// for i in tmp do
55280: LD_ADDR_VAR 0 3
55284: PUSH
55285: LD_VAR 0 4
55289: PUSH
55290: FOR_IN
55291: IFFALSE 55398
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55293: LD_STRING [
55295: PUSH
55296: LD_VAR 0 3
55300: PPUSH
55301: CALL_OW 266
55305: STR
55306: PUSH
55307: LD_STRING , 
55309: STR
55310: PUSH
55311: LD_VAR 0 3
55315: PPUSH
55316: CALL_OW 250
55320: STR
55321: PUSH
55322: LD_STRING , 
55324: STR
55325: PUSH
55326: LD_VAR 0 3
55330: PPUSH
55331: CALL_OW 251
55335: STR
55336: PUSH
55337: LD_STRING , 
55339: STR
55340: PUSH
55341: LD_VAR 0 3
55345: PPUSH
55346: CALL_OW 254
55350: STR
55351: PUSH
55352: LD_STRING , 
55354: STR
55355: PUSH
55356: LD_VAR 0 3
55360: PPUSH
55361: LD_INT 1
55363: PPUSH
55364: CALL_OW 268
55368: STR
55369: PUSH
55370: LD_STRING , 
55372: STR
55373: PUSH
55374: LD_VAR 0 3
55378: PPUSH
55379: LD_INT 2
55381: PPUSH
55382: CALL_OW 268
55386: STR
55387: PUSH
55388: LD_STRING ],
55390: STR
55391: PPUSH
55392: CALL_OW 561
// end ;
55396: GO 55290
55398: POP
55399: POP
// AddToLog ( ]; ) ;
55400: LD_STRING ];
55402: PPUSH
55403: CALL_OW 561
// end ;
55407: LD_VAR 0 2
55411: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55412: LD_INT 0
55414: PPUSH
55415: PPUSH
55416: PPUSH
55417: PPUSH
55418: PPUSH
// if not area or not rate or not max then
55419: LD_VAR 0 1
55423: NOT
55424: PUSH
55425: LD_VAR 0 2
55429: NOT
55430: OR
55431: PUSH
55432: LD_VAR 0 4
55436: NOT
55437: OR
55438: IFFALSE 55442
// exit ;
55440: GO 55634
// while 1 do
55442: LD_INT 1
55444: IFFALSE 55634
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55446: LD_ADDR_VAR 0 9
55450: PUSH
55451: LD_VAR 0 1
55455: PPUSH
55456: LD_INT 1
55458: PPUSH
55459: CALL_OW 287
55463: PUSH
55464: LD_INT 10
55466: MUL
55467: ST_TO_ADDR
// r := rate / 10 ;
55468: LD_ADDR_VAR 0 7
55472: PUSH
55473: LD_VAR 0 2
55477: PUSH
55478: LD_INT 10
55480: DIVREAL
55481: ST_TO_ADDR
// time := 1 1$00 ;
55482: LD_ADDR_VAR 0 8
55486: PUSH
55487: LD_INT 2100
55489: ST_TO_ADDR
// if amount < min then
55490: LD_VAR 0 9
55494: PUSH
55495: LD_VAR 0 3
55499: LESS
55500: IFFALSE 55518
// r := r * 2 else
55502: LD_ADDR_VAR 0 7
55506: PUSH
55507: LD_VAR 0 7
55511: PUSH
55512: LD_INT 2
55514: MUL
55515: ST_TO_ADDR
55516: GO 55544
// if amount > max then
55518: LD_VAR 0 9
55522: PUSH
55523: LD_VAR 0 4
55527: GREATER
55528: IFFALSE 55544
// r := r / 2 ;
55530: LD_ADDR_VAR 0 7
55534: PUSH
55535: LD_VAR 0 7
55539: PUSH
55540: LD_INT 2
55542: DIVREAL
55543: ST_TO_ADDR
// time := time / r ;
55544: LD_ADDR_VAR 0 8
55548: PUSH
55549: LD_VAR 0 8
55553: PUSH
55554: LD_VAR 0 7
55558: DIVREAL
55559: ST_TO_ADDR
// if time < 0 then
55560: LD_VAR 0 8
55564: PUSH
55565: LD_INT 0
55567: LESS
55568: IFFALSE 55585
// time := time * - 1 ;
55570: LD_ADDR_VAR 0 8
55574: PUSH
55575: LD_VAR 0 8
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: MUL
55584: ST_TO_ADDR
// wait ( time ) ;
55585: LD_VAR 0 8
55589: PPUSH
55590: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55594: LD_INT 35
55596: PPUSH
55597: LD_INT 875
55599: PPUSH
55600: CALL_OW 12
55604: PPUSH
55605: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55609: LD_INT 1
55611: PPUSH
55612: LD_INT 5
55614: PPUSH
55615: CALL_OW 12
55619: PPUSH
55620: LD_VAR 0 1
55624: PPUSH
55625: LD_INT 1
55627: PPUSH
55628: CALL_OW 55
// end ;
55632: GO 55442
// end ;
55634: LD_VAR 0 5
55638: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55639: LD_INT 0
55641: PPUSH
55642: PPUSH
55643: PPUSH
55644: PPUSH
55645: PPUSH
55646: PPUSH
55647: PPUSH
55648: PPUSH
// if not turrets or not factories then
55649: LD_VAR 0 1
55653: NOT
55654: PUSH
55655: LD_VAR 0 2
55659: NOT
55660: OR
55661: IFFALSE 55665
// exit ;
55663: GO 55972
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55665: LD_ADDR_VAR 0 10
55669: PUSH
55670: LD_INT 5
55672: PUSH
55673: LD_INT 6
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 4
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 3
55692: PUSH
55693: LD_INT 5
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 24
55707: PUSH
55708: LD_INT 25
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 23
55717: PUSH
55718: LD_INT 27
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 42
55731: PUSH
55732: LD_INT 43
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 44
55741: PUSH
55742: LD_INT 46
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 45
55751: PUSH
55752: LD_INT 47
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: LIST
55768: ST_TO_ADDR
// result := [ ] ;
55769: LD_ADDR_VAR 0 3
55773: PUSH
55774: EMPTY
55775: ST_TO_ADDR
// for i in turrets do
55776: LD_ADDR_VAR 0 4
55780: PUSH
55781: LD_VAR 0 1
55785: PUSH
55786: FOR_IN
55787: IFFALSE 55970
// begin nat := GetNation ( i ) ;
55789: LD_ADDR_VAR 0 7
55793: PUSH
55794: LD_VAR 0 4
55798: PPUSH
55799: CALL_OW 248
55803: ST_TO_ADDR
// weapon := 0 ;
55804: LD_ADDR_VAR 0 8
55808: PUSH
55809: LD_INT 0
55811: ST_TO_ADDR
// if not nat then
55812: LD_VAR 0 7
55816: NOT
55817: IFFALSE 55821
// continue ;
55819: GO 55786
// for j in list [ nat ] do
55821: LD_ADDR_VAR 0 5
55825: PUSH
55826: LD_VAR 0 10
55830: PUSH
55831: LD_VAR 0 7
55835: ARRAY
55836: PUSH
55837: FOR_IN
55838: IFFALSE 55879
// if GetBWeapon ( i ) = j [ 1 ] then
55840: LD_VAR 0 4
55844: PPUSH
55845: CALL_OW 269
55849: PUSH
55850: LD_VAR 0 5
55854: PUSH
55855: LD_INT 1
55857: ARRAY
55858: EQUAL
55859: IFFALSE 55877
// begin weapon := j [ 2 ] ;
55861: LD_ADDR_VAR 0 8
55865: PUSH
55866: LD_VAR 0 5
55870: PUSH
55871: LD_INT 2
55873: ARRAY
55874: ST_TO_ADDR
// break ;
55875: GO 55879
// end ;
55877: GO 55837
55879: POP
55880: POP
// if not weapon then
55881: LD_VAR 0 8
55885: NOT
55886: IFFALSE 55890
// continue ;
55888: GO 55786
// for k in factories do
55890: LD_ADDR_VAR 0 6
55894: PUSH
55895: LD_VAR 0 2
55899: PUSH
55900: FOR_IN
55901: IFFALSE 55966
// begin weapons := AvailableWeaponList ( k ) ;
55903: LD_ADDR_VAR 0 9
55907: PUSH
55908: LD_VAR 0 6
55912: PPUSH
55913: CALL_OW 478
55917: ST_TO_ADDR
// if not weapons then
55918: LD_VAR 0 9
55922: NOT
55923: IFFALSE 55927
// continue ;
55925: GO 55900
// if weapon in weapons then
55927: LD_VAR 0 8
55931: PUSH
55932: LD_VAR 0 9
55936: IN
55937: IFFALSE 55964
// begin result := [ i , weapon ] ;
55939: LD_ADDR_VAR 0 3
55943: PUSH
55944: LD_VAR 0 4
55948: PUSH
55949: LD_VAR 0 8
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: ST_TO_ADDR
// exit ;
55958: POP
55959: POP
55960: POP
55961: POP
55962: GO 55972
// end ; end ;
55964: GO 55900
55966: POP
55967: POP
// end ;
55968: GO 55786
55970: POP
55971: POP
// end ;
55972: LD_VAR 0 3
55976: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55977: LD_INT 0
55979: PPUSH
// if not side or side > 8 then
55980: LD_VAR 0 3
55984: NOT
55985: PUSH
55986: LD_VAR 0 3
55990: PUSH
55991: LD_INT 8
55993: GREATER
55994: OR
55995: IFFALSE 55999
// exit ;
55997: GO 56058
// if not range then
55999: LD_VAR 0 4
56003: NOT
56004: IFFALSE 56015
// range := - 12 ;
56006: LD_ADDR_VAR 0 4
56010: PUSH
56011: LD_INT 12
56013: NEG
56014: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56015: LD_VAR 0 1
56019: PPUSH
56020: LD_VAR 0 2
56024: PPUSH
56025: LD_VAR 0 3
56029: PPUSH
56030: LD_VAR 0 4
56034: PPUSH
56035: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56039: LD_VAR 0 1
56043: PPUSH
56044: LD_VAR 0 2
56048: PPUSH
56049: LD_VAR 0 3
56053: PPUSH
56054: CALL_OW 331
// end ;
56058: LD_VAR 0 5
56062: RET
// export function Video ( mode ) ; begin
56063: LD_INT 0
56065: PPUSH
// ingame_video = mode ;
56066: LD_ADDR_OWVAR 52
56070: PUSH
56071: LD_VAR 0 1
56075: ST_TO_ADDR
// interface_hidden = mode ;
56076: LD_ADDR_OWVAR 54
56080: PUSH
56081: LD_VAR 0 1
56085: ST_TO_ADDR
// end ;
56086: LD_VAR 0 2
56090: RET
// export function Join ( array , element ) ; begin
56091: LD_INT 0
56093: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56094: LD_ADDR_VAR 0 3
56098: PUSH
56099: LD_VAR 0 1
56103: PPUSH
56104: LD_VAR 0 1
56108: PUSH
56109: LD_INT 1
56111: PLUS
56112: PPUSH
56113: LD_VAR 0 2
56117: PPUSH
56118: CALL_OW 1
56122: ST_TO_ADDR
// end ;
56123: LD_VAR 0 3
56127: RET
// export function JoinUnion ( array , element ) ; begin
56128: LD_INT 0
56130: PPUSH
// result := array union element ;
56131: LD_ADDR_VAR 0 3
56135: PUSH
56136: LD_VAR 0 1
56140: PUSH
56141: LD_VAR 0 2
56145: UNION
56146: ST_TO_ADDR
// end ;
56147: LD_VAR 0 3
56151: RET
// export function GetBehemoths ( side ) ; begin
56152: LD_INT 0
56154: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56155: LD_ADDR_VAR 0 2
56159: PUSH
56160: LD_INT 22
56162: PUSH
56163: LD_VAR 0 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 31
56174: PUSH
56175: LD_INT 25
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PPUSH
56186: CALL_OW 69
56190: ST_TO_ADDR
// end ;
56191: LD_VAR 0 2
56195: RET
// export function Shuffle ( array ) ; var i , index ; begin
56196: LD_INT 0
56198: PPUSH
56199: PPUSH
56200: PPUSH
// result := [ ] ;
56201: LD_ADDR_VAR 0 2
56205: PUSH
56206: EMPTY
56207: ST_TO_ADDR
// if not array then
56208: LD_VAR 0 1
56212: NOT
56213: IFFALSE 56217
// exit ;
56215: GO 56316
// Randomize ;
56217: CALL_OW 10
// for i = array downto 1 do
56221: LD_ADDR_VAR 0 3
56225: PUSH
56226: DOUBLE
56227: LD_VAR 0 1
56231: INC
56232: ST_TO_ADDR
56233: LD_INT 1
56235: PUSH
56236: FOR_DOWNTO
56237: IFFALSE 56314
// begin index := rand ( 1 , array ) ;
56239: LD_ADDR_VAR 0 4
56243: PUSH
56244: LD_INT 1
56246: PPUSH
56247: LD_VAR 0 1
56251: PPUSH
56252: CALL_OW 12
56256: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56257: LD_ADDR_VAR 0 2
56261: PUSH
56262: LD_VAR 0 2
56266: PPUSH
56267: LD_VAR 0 2
56271: PUSH
56272: LD_INT 1
56274: PLUS
56275: PPUSH
56276: LD_VAR 0 1
56280: PUSH
56281: LD_VAR 0 4
56285: ARRAY
56286: PPUSH
56287: CALL_OW 2
56291: ST_TO_ADDR
// array := Delete ( array , index ) ;
56292: LD_ADDR_VAR 0 1
56296: PUSH
56297: LD_VAR 0 1
56301: PPUSH
56302: LD_VAR 0 4
56306: PPUSH
56307: CALL_OW 3
56311: ST_TO_ADDR
// end ;
56312: GO 56236
56314: POP
56315: POP
// end ;
56316: LD_VAR 0 2
56320: RET
// export function GetBaseMaterials ( base ) ; begin
56321: LD_INT 0
56323: PPUSH
// result := [ 0 , 0 , 0 ] ;
56324: LD_ADDR_VAR 0 2
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: LIST
56342: ST_TO_ADDR
// if not base then
56343: LD_VAR 0 1
56347: NOT
56348: IFFALSE 56352
// exit ;
56350: GO 56401
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56352: LD_ADDR_VAR 0 2
56356: PUSH
56357: LD_VAR 0 1
56361: PPUSH
56362: LD_INT 1
56364: PPUSH
56365: CALL_OW 275
56369: PUSH
56370: LD_VAR 0 1
56374: PPUSH
56375: LD_INT 2
56377: PPUSH
56378: CALL_OW 275
56382: PUSH
56383: LD_VAR 0 1
56387: PPUSH
56388: LD_INT 3
56390: PPUSH
56391: CALL_OW 275
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: ST_TO_ADDR
// end ;
56401: LD_VAR 0 2
56405: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56406: LD_INT 0
56408: PPUSH
56409: PPUSH
// result := array ;
56410: LD_ADDR_VAR 0 3
56414: PUSH
56415: LD_VAR 0 1
56419: ST_TO_ADDR
// if size > 0 then
56420: LD_VAR 0 2
56424: PUSH
56425: LD_INT 0
56427: GREATER
56428: IFFALSE 56474
// for i := array downto size do
56430: LD_ADDR_VAR 0 4
56434: PUSH
56435: DOUBLE
56436: LD_VAR 0 1
56440: INC
56441: ST_TO_ADDR
56442: LD_VAR 0 2
56446: PUSH
56447: FOR_DOWNTO
56448: IFFALSE 56472
// result := Delete ( result , result ) ;
56450: LD_ADDR_VAR 0 3
56454: PUSH
56455: LD_VAR 0 3
56459: PPUSH
56460: LD_VAR 0 3
56464: PPUSH
56465: CALL_OW 3
56469: ST_TO_ADDR
56470: GO 56447
56472: POP
56473: POP
// end ;
56474: LD_VAR 0 3
56478: RET
// export function ComExit ( unit ) ; var tmp ; begin
56479: LD_INT 0
56481: PPUSH
56482: PPUSH
// if not IsInUnit ( unit ) then
56483: LD_VAR 0 1
56487: PPUSH
56488: CALL_OW 310
56492: NOT
56493: IFFALSE 56497
// exit ;
56495: GO 56557
// tmp := IsInUnit ( unit ) ;
56497: LD_ADDR_VAR 0 3
56501: PUSH
56502: LD_VAR 0 1
56506: PPUSH
56507: CALL_OW 310
56511: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56512: LD_VAR 0 3
56516: PPUSH
56517: CALL_OW 247
56521: PUSH
56522: LD_INT 2
56524: EQUAL
56525: IFFALSE 56538
// ComExitVehicle ( unit ) else
56527: LD_VAR 0 1
56531: PPUSH
56532: CALL_OW 121
56536: GO 56547
// ComExitBuilding ( unit ) ;
56538: LD_VAR 0 1
56542: PPUSH
56543: CALL_OW 122
// result := tmp ;
56547: LD_ADDR_VAR 0 2
56551: PUSH
56552: LD_VAR 0 3
56556: ST_TO_ADDR
// end ;
56557: LD_VAR 0 2
56561: RET
// export function ComExitAll ( units ) ; var i ; begin
56562: LD_INT 0
56564: PPUSH
56565: PPUSH
// if not units then
56566: LD_VAR 0 1
56570: NOT
56571: IFFALSE 56575
// exit ;
56573: GO 56601
// for i in units do
56575: LD_ADDR_VAR 0 3
56579: PUSH
56580: LD_VAR 0 1
56584: PUSH
56585: FOR_IN
56586: IFFALSE 56599
// ComExit ( i ) ;
56588: LD_VAR 0 3
56592: PPUSH
56593: CALL 56479 0 1
56597: GO 56585
56599: POP
56600: POP
// end ;
56601: LD_VAR 0 2
56605: RET
// export function ResetHc ; begin
56606: LD_INT 0
56608: PPUSH
// InitHc ;
56609: CALL_OW 19
// hc_importance := 0 ;
56613: LD_ADDR_OWVAR 32
56617: PUSH
56618: LD_INT 0
56620: ST_TO_ADDR
// end ;
56621: LD_VAR 0 1
56625: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56626: LD_INT 0
56628: PPUSH
56629: PPUSH
56630: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56631: LD_ADDR_VAR 0 6
56635: PUSH
56636: LD_VAR 0 1
56640: PUSH
56641: LD_VAR 0 3
56645: PLUS
56646: PUSH
56647: LD_INT 2
56649: DIV
56650: ST_TO_ADDR
// if _x < 0 then
56651: LD_VAR 0 6
56655: PUSH
56656: LD_INT 0
56658: LESS
56659: IFFALSE 56676
// _x := _x * - 1 ;
56661: LD_ADDR_VAR 0 6
56665: PUSH
56666: LD_VAR 0 6
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: MUL
56675: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56676: LD_ADDR_VAR 0 7
56680: PUSH
56681: LD_VAR 0 2
56685: PUSH
56686: LD_VAR 0 4
56690: PLUS
56691: PUSH
56692: LD_INT 2
56694: DIV
56695: ST_TO_ADDR
// if _y < 0 then
56696: LD_VAR 0 7
56700: PUSH
56701: LD_INT 0
56703: LESS
56704: IFFALSE 56721
// _y := _y * - 1 ;
56706: LD_ADDR_VAR 0 7
56710: PUSH
56711: LD_VAR 0 7
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: MUL
56720: ST_TO_ADDR
// result := [ _x , _y ] ;
56721: LD_ADDR_VAR 0 5
56725: PUSH
56726: LD_VAR 0 6
56730: PUSH
56731: LD_VAR 0 7
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: ST_TO_ADDR
// end ;
56740: LD_VAR 0 5
56744: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56745: LD_INT 0
56747: PPUSH
56748: PPUSH
56749: PPUSH
56750: PPUSH
// task := GetTaskList ( unit ) ;
56751: LD_ADDR_VAR 0 7
56755: PUSH
56756: LD_VAR 0 1
56760: PPUSH
56761: CALL_OW 437
56765: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56766: LD_VAR 0 7
56770: NOT
56771: PUSH
56772: LD_VAR 0 1
56776: PPUSH
56777: LD_VAR 0 2
56781: PPUSH
56782: CALL_OW 308
56786: NOT
56787: AND
56788: IFFALSE 56792
// exit ;
56790: GO 56910
// if IsInArea ( unit , area ) then
56792: LD_VAR 0 1
56796: PPUSH
56797: LD_VAR 0 2
56801: PPUSH
56802: CALL_OW 308
56806: IFFALSE 56824
// begin ComMoveToArea ( unit , goAway ) ;
56808: LD_VAR 0 1
56812: PPUSH
56813: LD_VAR 0 3
56817: PPUSH
56818: CALL_OW 113
// exit ;
56822: GO 56910
// end ; if task [ 1 ] [ 1 ] <> M then
56824: LD_VAR 0 7
56828: PUSH
56829: LD_INT 1
56831: ARRAY
56832: PUSH
56833: LD_INT 1
56835: ARRAY
56836: PUSH
56837: LD_STRING M
56839: NONEQUAL
56840: IFFALSE 56844
// exit ;
56842: GO 56910
// x := task [ 1 ] [ 2 ] ;
56844: LD_ADDR_VAR 0 5
56848: PUSH
56849: LD_VAR 0 7
56853: PUSH
56854: LD_INT 1
56856: ARRAY
56857: PUSH
56858: LD_INT 2
56860: ARRAY
56861: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56862: LD_ADDR_VAR 0 6
56866: PUSH
56867: LD_VAR 0 7
56871: PUSH
56872: LD_INT 1
56874: ARRAY
56875: PUSH
56876: LD_INT 3
56878: ARRAY
56879: ST_TO_ADDR
// if InArea ( x , y , area ) then
56880: LD_VAR 0 5
56884: PPUSH
56885: LD_VAR 0 6
56889: PPUSH
56890: LD_VAR 0 2
56894: PPUSH
56895: CALL_OW 309
56899: IFFALSE 56910
// ComStop ( unit ) ;
56901: LD_VAR 0 1
56905: PPUSH
56906: CALL_OW 141
// end ;
56910: LD_VAR 0 4
56914: RET
// export function Abs ( value ) ; begin
56915: LD_INT 0
56917: PPUSH
// result := value ;
56918: LD_ADDR_VAR 0 2
56922: PUSH
56923: LD_VAR 0 1
56927: ST_TO_ADDR
// if value < 0 then
56928: LD_VAR 0 1
56932: PUSH
56933: LD_INT 0
56935: LESS
56936: IFFALSE 56953
// result := value * - 1 ;
56938: LD_ADDR_VAR 0 2
56942: PUSH
56943: LD_VAR 0 1
56947: PUSH
56948: LD_INT 1
56950: NEG
56951: MUL
56952: ST_TO_ADDR
// end ;
56953: LD_VAR 0 2
56957: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56958: LD_INT 0
56960: PPUSH
56961: PPUSH
56962: PPUSH
56963: PPUSH
56964: PPUSH
56965: PPUSH
56966: PPUSH
56967: PPUSH
// if not unit or not building then
56968: LD_VAR 0 1
56972: NOT
56973: PUSH
56974: LD_VAR 0 2
56978: NOT
56979: OR
56980: IFFALSE 56984
// exit ;
56982: GO 57210
// x := GetX ( building ) ;
56984: LD_ADDR_VAR 0 4
56988: PUSH
56989: LD_VAR 0 2
56993: PPUSH
56994: CALL_OW 250
56998: ST_TO_ADDR
// y := GetY ( building ) ;
56999: LD_ADDR_VAR 0 6
57003: PUSH
57004: LD_VAR 0 2
57008: PPUSH
57009: CALL_OW 251
57013: ST_TO_ADDR
// d := GetDir ( building ) ;
57014: LD_ADDR_VAR 0 8
57018: PUSH
57019: LD_VAR 0 2
57023: PPUSH
57024: CALL_OW 254
57028: ST_TO_ADDR
// r := 4 ;
57029: LD_ADDR_VAR 0 9
57033: PUSH
57034: LD_INT 4
57036: ST_TO_ADDR
// for i := 1 to 5 do
57037: LD_ADDR_VAR 0 10
57041: PUSH
57042: DOUBLE
57043: LD_INT 1
57045: DEC
57046: ST_TO_ADDR
57047: LD_INT 5
57049: PUSH
57050: FOR_TO
57051: IFFALSE 57208
// begin _x := ShiftX ( x , d , r + i ) ;
57053: LD_ADDR_VAR 0 5
57057: PUSH
57058: LD_VAR 0 4
57062: PPUSH
57063: LD_VAR 0 8
57067: PPUSH
57068: LD_VAR 0 9
57072: PUSH
57073: LD_VAR 0 10
57077: PLUS
57078: PPUSH
57079: CALL_OW 272
57083: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57084: LD_ADDR_VAR 0 7
57088: PUSH
57089: LD_VAR 0 6
57093: PPUSH
57094: LD_VAR 0 8
57098: PPUSH
57099: LD_VAR 0 9
57103: PUSH
57104: LD_VAR 0 10
57108: PLUS
57109: PPUSH
57110: CALL_OW 273
57114: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57115: LD_VAR 0 5
57119: PPUSH
57120: LD_VAR 0 7
57124: PPUSH
57125: CALL_OW 488
57129: PUSH
57130: LD_VAR 0 5
57134: PPUSH
57135: LD_VAR 0 7
57139: PPUSH
57140: CALL_OW 428
57144: PPUSH
57145: CALL_OW 247
57149: PUSH
57150: LD_INT 3
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: IN
57160: NOT
57161: AND
57162: IFFALSE 57206
// begin ComMoveXY ( unit , _x , _y ) ;
57164: LD_VAR 0 1
57168: PPUSH
57169: LD_VAR 0 5
57173: PPUSH
57174: LD_VAR 0 7
57178: PPUSH
57179: CALL_OW 111
// result := [ _x , _y ] ;
57183: LD_ADDR_VAR 0 3
57187: PUSH
57188: LD_VAR 0 5
57192: PUSH
57193: LD_VAR 0 7
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: ST_TO_ADDR
// exit ;
57202: POP
57203: POP
57204: GO 57210
// end ; end ;
57206: GO 57050
57208: POP
57209: POP
// end ;
57210: LD_VAR 0 3
57214: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57215: LD_INT 0
57217: PPUSH
57218: PPUSH
57219: PPUSH
// result := 0 ;
57220: LD_ADDR_VAR 0 3
57224: PUSH
57225: LD_INT 0
57227: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57228: LD_VAR 0 1
57232: PUSH
57233: LD_INT 0
57235: LESS
57236: PUSH
57237: LD_VAR 0 1
57241: PUSH
57242: LD_INT 8
57244: GREATER
57245: OR
57246: PUSH
57247: LD_VAR 0 2
57251: PUSH
57252: LD_INT 0
57254: LESS
57255: OR
57256: PUSH
57257: LD_VAR 0 2
57261: PUSH
57262: LD_INT 8
57264: GREATER
57265: OR
57266: IFFALSE 57270
// exit ;
57268: GO 57345
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57270: LD_ADDR_VAR 0 4
57274: PUSH
57275: LD_INT 22
57277: PUSH
57278: LD_VAR 0 2
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PPUSH
57287: CALL_OW 69
57291: PUSH
57292: FOR_IN
57293: IFFALSE 57343
// begin un := UnitShoot ( i ) ;
57295: LD_ADDR_VAR 0 5
57299: PUSH
57300: LD_VAR 0 4
57304: PPUSH
57305: CALL_OW 504
57309: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57310: LD_VAR 0 5
57314: PPUSH
57315: CALL_OW 255
57319: PUSH
57320: LD_VAR 0 1
57324: EQUAL
57325: IFFALSE 57341
// begin result := un ;
57327: LD_ADDR_VAR 0 3
57331: PUSH
57332: LD_VAR 0 5
57336: ST_TO_ADDR
// exit ;
57337: POP
57338: POP
57339: GO 57345
// end ; end ;
57341: GO 57292
57343: POP
57344: POP
// end ;
57345: LD_VAR 0 3
57349: RET
// export function GetCargoBay ( units ) ; begin
57350: LD_INT 0
57352: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57353: LD_ADDR_VAR 0 2
57357: PUSH
57358: LD_VAR 0 1
57362: PPUSH
57363: LD_INT 2
57365: PUSH
57366: LD_INT 34
57368: PUSH
57369: LD_INT 12
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 34
57378: PUSH
57379: LD_INT 51
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 34
57388: PUSH
57389: LD_INT 32
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 34
57398: PUSH
57399: LD_EXP 71
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: PPUSH
57415: CALL_OW 72
57419: ST_TO_ADDR
// end ;
57420: LD_VAR 0 2
57424: RET
// export function Negate ( value ) ; begin
57425: LD_INT 0
57427: PPUSH
// result := not value ;
57428: LD_ADDR_VAR 0 2
57432: PUSH
57433: LD_VAR 0 1
57437: NOT
57438: ST_TO_ADDR
// end ;
57439: LD_VAR 0 2
57443: RET
// export function Inc ( value ) ; begin
57444: LD_INT 0
57446: PPUSH
// result := value + 1 ;
57447: LD_ADDR_VAR 0 2
57451: PUSH
57452: LD_VAR 0 1
57456: PUSH
57457: LD_INT 1
57459: PLUS
57460: ST_TO_ADDR
// end ;
57461: LD_VAR 0 2
57465: RET
// export function Dec ( value ) ; begin
57466: LD_INT 0
57468: PPUSH
// result := value - 1 ;
57469: LD_ADDR_VAR 0 2
57473: PUSH
57474: LD_VAR 0 1
57478: PUSH
57479: LD_INT 1
57481: MINUS
57482: ST_TO_ADDR
// end ;
57483: LD_VAR 0 2
57487: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
57488: LD_INT 0
57490: PPUSH
57491: PPUSH
57492: PPUSH
57493: PPUSH
57494: PPUSH
57495: PPUSH
57496: PPUSH
57497: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57498: LD_VAR 0 1
57502: PPUSH
57503: LD_VAR 0 2
57507: PPUSH
57508: CALL_OW 488
57512: NOT
57513: PUSH
57514: LD_VAR 0 3
57518: PPUSH
57519: LD_VAR 0 4
57523: PPUSH
57524: CALL_OW 488
57528: NOT
57529: OR
57530: IFFALSE 57543
// begin result := - 1 ;
57532: LD_ADDR_VAR 0 5
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: ST_TO_ADDR
// exit ;
57541: GO 57778
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57543: LD_ADDR_VAR 0 12
57547: PUSH
57548: LD_VAR 0 1
57552: PPUSH
57553: LD_VAR 0 2
57557: PPUSH
57558: LD_VAR 0 3
57562: PPUSH
57563: LD_VAR 0 4
57567: PPUSH
57568: CALL 56626 0 4
57572: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57573: LD_ADDR_VAR 0 11
57577: PUSH
57578: LD_VAR 0 1
57582: PPUSH
57583: LD_VAR 0 2
57587: PPUSH
57588: LD_VAR 0 12
57592: PUSH
57593: LD_INT 1
57595: ARRAY
57596: PPUSH
57597: LD_VAR 0 12
57601: PUSH
57602: LD_INT 2
57604: ARRAY
57605: PPUSH
57606: CALL_OW 298
57610: ST_TO_ADDR
// distance := 9999 ;
57611: LD_ADDR_VAR 0 10
57615: PUSH
57616: LD_INT 9999
57618: ST_TO_ADDR
// for i := 0 to 5 do
57619: LD_ADDR_VAR 0 6
57623: PUSH
57624: DOUBLE
57625: LD_INT 0
57627: DEC
57628: ST_TO_ADDR
57629: LD_INT 5
57631: PUSH
57632: FOR_TO
57633: IFFALSE 57776
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57635: LD_ADDR_VAR 0 7
57639: PUSH
57640: LD_VAR 0 1
57644: PPUSH
57645: LD_VAR 0 6
57649: PPUSH
57650: LD_VAR 0 11
57654: PPUSH
57655: CALL_OW 272
57659: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57660: LD_ADDR_VAR 0 8
57664: PUSH
57665: LD_VAR 0 2
57669: PPUSH
57670: LD_VAR 0 6
57674: PPUSH
57675: LD_VAR 0 11
57679: PPUSH
57680: CALL_OW 273
57684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57685: LD_VAR 0 7
57689: PPUSH
57690: LD_VAR 0 8
57694: PPUSH
57695: CALL_OW 488
57699: NOT
57700: IFFALSE 57704
// continue ;
57702: GO 57632
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57704: LD_ADDR_VAR 0 9
57708: PUSH
57709: LD_VAR 0 12
57713: PUSH
57714: LD_INT 1
57716: ARRAY
57717: PPUSH
57718: LD_VAR 0 12
57722: PUSH
57723: LD_INT 2
57725: ARRAY
57726: PPUSH
57727: LD_VAR 0 7
57731: PPUSH
57732: LD_VAR 0 8
57736: PPUSH
57737: CALL_OW 298
57741: ST_TO_ADDR
// if tmp < distance then
57742: LD_VAR 0 9
57746: PUSH
57747: LD_VAR 0 10
57751: LESS
57752: IFFALSE 57774
// begin result := i ;
57754: LD_ADDR_VAR 0 5
57758: PUSH
57759: LD_VAR 0 6
57763: ST_TO_ADDR
// distance := tmp ;
57764: LD_ADDR_VAR 0 10
57768: PUSH
57769: LD_VAR 0 9
57773: ST_TO_ADDR
// end ; end ;
57774: GO 57632
57776: POP
57777: POP
// end ;
57778: LD_VAR 0 5
57782: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57783: LD_INT 0
57785: PPUSH
57786: PPUSH
// if not driver or not IsInUnit ( driver ) then
57787: LD_VAR 0 1
57791: NOT
57792: PUSH
57793: LD_VAR 0 1
57797: PPUSH
57798: CALL_OW 310
57802: NOT
57803: OR
57804: IFFALSE 57808
// exit ;
57806: GO 57898
// vehicle := IsInUnit ( driver ) ;
57808: LD_ADDR_VAR 0 3
57812: PUSH
57813: LD_VAR 0 1
57817: PPUSH
57818: CALL_OW 310
57822: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57823: LD_VAR 0 1
57827: PPUSH
57828: LD_STRING \
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: PUSH
57858: LD_STRING E
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_VAR 0 3
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PPUSH
57894: CALL_OW 446
// end ;
57898: LD_VAR 0 2
57902: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57903: LD_INT 0
57905: PPUSH
57906: PPUSH
// if not driver or not IsInUnit ( driver ) then
57907: LD_VAR 0 1
57911: NOT
57912: PUSH
57913: LD_VAR 0 1
57917: PPUSH
57918: CALL_OW 310
57922: NOT
57923: OR
57924: IFFALSE 57928
// exit ;
57926: GO 58018
// vehicle := IsInUnit ( driver ) ;
57928: LD_ADDR_VAR 0 3
57932: PUSH
57933: LD_VAR 0 1
57937: PPUSH
57938: CALL_OW 310
57942: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57943: LD_VAR 0 1
57947: PPUSH
57948: LD_STRING \
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: PUSH
57978: LD_STRING E
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_VAR 0 3
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PPUSH
58014: CALL_OW 447
// end ;
58018: LD_VAR 0 2
58022: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58023: LD_INT 0
58025: PPUSH
58026: PPUSH
58027: PPUSH
// tmp := [ ] ;
58028: LD_ADDR_VAR 0 5
58032: PUSH
58033: EMPTY
58034: ST_TO_ADDR
// for i in units do
58035: LD_ADDR_VAR 0 4
58039: PUSH
58040: LD_VAR 0 1
58044: PUSH
58045: FOR_IN
58046: IFFALSE 58084
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58048: LD_ADDR_VAR 0 5
58052: PUSH
58053: LD_VAR 0 5
58057: PPUSH
58058: LD_VAR 0 5
58062: PUSH
58063: LD_INT 1
58065: PLUS
58066: PPUSH
58067: LD_VAR 0 4
58071: PPUSH
58072: CALL_OW 256
58076: PPUSH
58077: CALL_OW 2
58081: ST_TO_ADDR
58082: GO 58045
58084: POP
58085: POP
// if not tmp then
58086: LD_VAR 0 5
58090: NOT
58091: IFFALSE 58095
// exit ;
58093: GO 58143
// if asc then
58095: LD_VAR 0 2
58099: IFFALSE 58123
// result := SortListByListAsc ( units , tmp ) else
58101: LD_ADDR_VAR 0 3
58105: PUSH
58106: LD_VAR 0 1
58110: PPUSH
58111: LD_VAR 0 5
58115: PPUSH
58116: CALL_OW 76
58120: ST_TO_ADDR
58121: GO 58143
// result := SortListByListDesc ( units , tmp ) ;
58123: LD_ADDR_VAR 0 3
58127: PUSH
58128: LD_VAR 0 1
58132: PPUSH
58133: LD_VAR 0 5
58137: PPUSH
58138: CALL_OW 77
58142: ST_TO_ADDR
// end ;
58143: LD_VAR 0 3
58147: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58148: LD_INT 0
58150: PPUSH
58151: PPUSH
// task := GetTaskList ( mech ) ;
58152: LD_ADDR_VAR 0 4
58156: PUSH
58157: LD_VAR 0 1
58161: PPUSH
58162: CALL_OW 437
58166: ST_TO_ADDR
// if not task then
58167: LD_VAR 0 4
58171: NOT
58172: IFFALSE 58176
// exit ;
58174: GO 58218
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58176: LD_ADDR_VAR 0 3
58180: PUSH
58181: LD_VAR 0 4
58185: PUSH
58186: LD_INT 1
58188: ARRAY
58189: PUSH
58190: LD_INT 1
58192: ARRAY
58193: PUSH
58194: LD_STRING r
58196: EQUAL
58197: PUSH
58198: LD_VAR 0 4
58202: PUSH
58203: LD_INT 1
58205: ARRAY
58206: PUSH
58207: LD_INT 4
58209: ARRAY
58210: PUSH
58211: LD_VAR 0 2
58215: EQUAL
58216: AND
58217: ST_TO_ADDR
// end ;
58218: LD_VAR 0 3
58222: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58223: LD_INT 0
58225: PPUSH
// SetDir ( unit , d ) ;
58226: LD_VAR 0 1
58230: PPUSH
58231: LD_VAR 0 4
58235: PPUSH
58236: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58240: LD_VAR 0 1
58244: PPUSH
58245: LD_VAR 0 2
58249: PPUSH
58250: LD_VAR 0 3
58254: PPUSH
58255: LD_VAR 0 5
58259: PPUSH
58260: CALL_OW 48
// end ;
58264: LD_VAR 0 6
58268: RET
// export function ToNaturalNumber ( number ) ; begin
58269: LD_INT 0
58271: PPUSH
// result := number div 1 ;
58272: LD_ADDR_VAR 0 2
58276: PUSH
58277: LD_VAR 0 1
58281: PUSH
58282: LD_INT 1
58284: DIV
58285: ST_TO_ADDR
// if number < 0 then
58286: LD_VAR 0 1
58290: PUSH
58291: LD_INT 0
58293: LESS
58294: IFFALSE 58304
// result := 0 ;
58296: LD_ADDR_VAR 0 2
58300: PUSH
58301: LD_INT 0
58303: ST_TO_ADDR
// end ;
58304: LD_VAR 0 2
58308: RET
// export function SortByClass ( units , class ) ; var un ; begin
58309: LD_INT 0
58311: PPUSH
58312: PPUSH
// if not units or not class then
58313: LD_VAR 0 1
58317: NOT
58318: PUSH
58319: LD_VAR 0 2
58323: NOT
58324: OR
58325: IFFALSE 58329
// exit ;
58327: GO 58424
// result := [ ] ;
58329: LD_ADDR_VAR 0 3
58333: PUSH
58334: EMPTY
58335: ST_TO_ADDR
// for un in units do
58336: LD_ADDR_VAR 0 4
58340: PUSH
58341: LD_VAR 0 1
58345: PUSH
58346: FOR_IN
58347: IFFALSE 58422
// if GetClass ( un ) = class then
58349: LD_VAR 0 4
58353: PPUSH
58354: CALL_OW 257
58358: PUSH
58359: LD_VAR 0 2
58363: EQUAL
58364: IFFALSE 58391
// result := Insert ( result , 1 , un ) else
58366: LD_ADDR_VAR 0 3
58370: PUSH
58371: LD_VAR 0 3
58375: PPUSH
58376: LD_INT 1
58378: PPUSH
58379: LD_VAR 0 4
58383: PPUSH
58384: CALL_OW 2
58388: ST_TO_ADDR
58389: GO 58420
// result := Replace ( result , result + 1 , un ) ;
58391: LD_ADDR_VAR 0 3
58395: PUSH
58396: LD_VAR 0 3
58400: PPUSH
58401: LD_VAR 0 3
58405: PUSH
58406: LD_INT 1
58408: PLUS
58409: PPUSH
58410: LD_VAR 0 4
58414: PPUSH
58415: CALL_OW 1
58419: ST_TO_ADDR
58420: GO 58346
58422: POP
58423: POP
// end ;
58424: LD_VAR 0 3
58428: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58429: LD_INT 0
58431: PPUSH
58432: PPUSH
58433: PPUSH
58434: PPUSH
58435: PPUSH
58436: PPUSH
58437: PPUSH
// result := [ ] ;
58438: LD_ADDR_VAR 0 4
58442: PUSH
58443: EMPTY
58444: ST_TO_ADDR
// if x - r < 0 then
58445: LD_VAR 0 1
58449: PUSH
58450: LD_VAR 0 3
58454: MINUS
58455: PUSH
58456: LD_INT 0
58458: LESS
58459: IFFALSE 58471
// min_x := 0 else
58461: LD_ADDR_VAR 0 8
58465: PUSH
58466: LD_INT 0
58468: ST_TO_ADDR
58469: GO 58487
// min_x := x - r ;
58471: LD_ADDR_VAR 0 8
58475: PUSH
58476: LD_VAR 0 1
58480: PUSH
58481: LD_VAR 0 3
58485: MINUS
58486: ST_TO_ADDR
// if y - r < 0 then
58487: LD_VAR 0 2
58491: PUSH
58492: LD_VAR 0 3
58496: MINUS
58497: PUSH
58498: LD_INT 0
58500: LESS
58501: IFFALSE 58513
// min_y := 0 else
58503: LD_ADDR_VAR 0 7
58507: PUSH
58508: LD_INT 0
58510: ST_TO_ADDR
58511: GO 58529
// min_y := y - r ;
58513: LD_ADDR_VAR 0 7
58517: PUSH
58518: LD_VAR 0 2
58522: PUSH
58523: LD_VAR 0 3
58527: MINUS
58528: ST_TO_ADDR
// max_x := x + r ;
58529: LD_ADDR_VAR 0 9
58533: PUSH
58534: LD_VAR 0 1
58538: PUSH
58539: LD_VAR 0 3
58543: PLUS
58544: ST_TO_ADDR
// max_y := y + r ;
58545: LD_ADDR_VAR 0 10
58549: PUSH
58550: LD_VAR 0 2
58554: PUSH
58555: LD_VAR 0 3
58559: PLUS
58560: ST_TO_ADDR
// for _x = min_x to max_x do
58561: LD_ADDR_VAR 0 5
58565: PUSH
58566: DOUBLE
58567: LD_VAR 0 8
58571: DEC
58572: ST_TO_ADDR
58573: LD_VAR 0 9
58577: PUSH
58578: FOR_TO
58579: IFFALSE 58680
// for _y = min_y to max_y do
58581: LD_ADDR_VAR 0 6
58585: PUSH
58586: DOUBLE
58587: LD_VAR 0 7
58591: DEC
58592: ST_TO_ADDR
58593: LD_VAR 0 10
58597: PUSH
58598: FOR_TO
58599: IFFALSE 58676
// begin if not ValidHex ( _x , _y ) then
58601: LD_VAR 0 5
58605: PPUSH
58606: LD_VAR 0 6
58610: PPUSH
58611: CALL_OW 488
58615: NOT
58616: IFFALSE 58620
// continue ;
58618: GO 58598
// if GetResourceTypeXY ( _x , _y ) then
58620: LD_VAR 0 5
58624: PPUSH
58625: LD_VAR 0 6
58629: PPUSH
58630: CALL_OW 283
58634: IFFALSE 58674
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58636: LD_ADDR_VAR 0 4
58640: PUSH
58641: LD_VAR 0 4
58645: PPUSH
58646: LD_VAR 0 4
58650: PUSH
58651: LD_INT 1
58653: PLUS
58654: PPUSH
58655: LD_VAR 0 5
58659: PUSH
58660: LD_VAR 0 6
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PPUSH
58669: CALL_OW 1
58673: ST_TO_ADDR
// end ;
58674: GO 58598
58676: POP
58677: POP
58678: GO 58578
58680: POP
58681: POP
// end ;
58682: LD_VAR 0 4
58686: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58687: LD_INT 0
58689: PPUSH
58690: PPUSH
58691: PPUSH
58692: PPUSH
58693: PPUSH
58694: PPUSH
58695: PPUSH
58696: PPUSH
// if not units then
58697: LD_VAR 0 1
58701: NOT
58702: IFFALSE 58706
// exit ;
58704: GO 59131
// result := UnitFilter ( units , [ f_ok ] ) ;
58706: LD_ADDR_VAR 0 3
58710: PUSH
58711: LD_VAR 0 1
58715: PPUSH
58716: LD_INT 50
58718: PUSH
58719: EMPTY
58720: LIST
58721: PPUSH
58722: CALL_OW 72
58726: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58727: LD_ADDR_VAR 0 8
58731: PUSH
58732: LD_VAR 0 1
58736: PUSH
58737: LD_INT 1
58739: ARRAY
58740: PPUSH
58741: CALL_OW 255
58745: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
58746: LD_ADDR_VAR 0 10
58750: PUSH
58751: LD_INT 29
58753: PUSH
58754: LD_EXP 74
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: ST_TO_ADDR
// if not result then
58763: LD_VAR 0 3
58767: NOT
58768: IFFALSE 58772
// exit ;
58770: GO 59131
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58772: LD_ADDR_VAR 0 5
58776: PUSH
58777: LD_INT 81
58779: PUSH
58780: LD_VAR 0 8
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PPUSH
58789: CALL_OW 69
58793: ST_TO_ADDR
// for i in result do
58794: LD_ADDR_VAR 0 4
58798: PUSH
58799: LD_VAR 0 3
58803: PUSH
58804: FOR_IN
58805: IFFALSE 59129
// begin tag := GetTag ( i ) + 1 ;
58807: LD_ADDR_VAR 0 9
58811: PUSH
58812: LD_VAR 0 4
58816: PPUSH
58817: CALL_OW 110
58821: PUSH
58822: LD_INT 1
58824: PLUS
58825: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
58826: LD_ADDR_VAR 0 7
58830: PUSH
58831: LD_VAR 0 4
58835: PPUSH
58836: CALL_OW 250
58840: PPUSH
58841: LD_VAR 0 4
58845: PPUSH
58846: CALL_OW 251
58850: PPUSH
58851: LD_INT 6
58853: PPUSH
58854: CALL 58429 0 3
58858: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
58859: LD_VAR 0 7
58863: PUSH
58864: LD_VAR 0 4
58868: PPUSH
58869: CALL_OW 264
58873: PUSH
58874: LD_VAR 0 10
58878: IN
58879: NOT
58880: AND
58881: IFFALSE 58920
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58883: LD_VAR 0 4
58887: PPUSH
58888: LD_VAR 0 7
58892: PUSH
58893: LD_INT 1
58895: ARRAY
58896: PUSH
58897: LD_INT 1
58899: ARRAY
58900: PPUSH
58901: LD_VAR 0 7
58905: PUSH
58906: LD_INT 1
58908: ARRAY
58909: PUSH
58910: LD_INT 2
58912: ARRAY
58913: PPUSH
58914: CALL_OW 116
58918: GO 59127
// if path > tag then
58920: LD_VAR 0 2
58924: PUSH
58925: LD_VAR 0 9
58929: GREATER
58930: IFFALSE 59097
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
58932: LD_ADDR_VAR 0 6
58936: PUSH
58937: LD_VAR 0 5
58941: PPUSH
58942: LD_INT 91
58944: PUSH
58945: LD_VAR 0 4
58949: PUSH
58950: LD_INT 12
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: LIST
58957: PPUSH
58958: CALL_OW 72
58962: ST_TO_ADDR
// if nearEnemy then
58963: LD_VAR 0 6
58967: IFFALSE 58995
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58969: LD_VAR 0 4
58973: PPUSH
58974: LD_VAR 0 6
58978: PPUSH
58979: LD_VAR 0 4
58983: PPUSH
58984: CALL_OW 74
58988: PPUSH
58989: CALL_OW 115
58993: GO 59095
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58995: LD_VAR 0 4
58999: PPUSH
59000: LD_VAR 0 2
59004: PUSH
59005: LD_VAR 0 9
59009: ARRAY
59010: PUSH
59011: LD_INT 1
59013: ARRAY
59014: PPUSH
59015: LD_VAR 0 2
59019: PUSH
59020: LD_VAR 0 9
59024: ARRAY
59025: PUSH
59026: LD_INT 2
59028: ARRAY
59029: PPUSH
59030: CALL_OW 297
59034: PUSH
59035: LD_INT 6
59037: GREATER
59038: IFFALSE 59081
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59040: LD_VAR 0 4
59044: PPUSH
59045: LD_VAR 0 2
59049: PUSH
59050: LD_VAR 0 9
59054: ARRAY
59055: PUSH
59056: LD_INT 1
59058: ARRAY
59059: PPUSH
59060: LD_VAR 0 2
59064: PUSH
59065: LD_VAR 0 9
59069: ARRAY
59070: PUSH
59071: LD_INT 2
59073: ARRAY
59074: PPUSH
59075: CALL_OW 114
59079: GO 59095
// SetTag ( i , tag ) ;
59081: LD_VAR 0 4
59085: PPUSH
59086: LD_VAR 0 9
59090: PPUSH
59091: CALL_OW 109
// end else
59095: GO 59127
// if enemy then
59097: LD_VAR 0 5
59101: IFFALSE 59127
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59103: LD_VAR 0 4
59107: PPUSH
59108: LD_VAR 0 5
59112: PPUSH
59113: LD_VAR 0 4
59117: PPUSH
59118: CALL_OW 74
59122: PPUSH
59123: CALL_OW 115
// end ;
59127: GO 58804
59129: POP
59130: POP
// end ;
59131: LD_VAR 0 3
59135: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59136: LD_INT 0
59138: PPUSH
59139: PPUSH
59140: PPUSH
// if not unit or IsInUnit ( unit ) then
59141: LD_VAR 0 1
59145: NOT
59146: PUSH
59147: LD_VAR 0 1
59151: PPUSH
59152: CALL_OW 310
59156: OR
59157: IFFALSE 59161
// exit ;
59159: GO 59252
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59161: LD_ADDR_VAR 0 4
59165: PUSH
59166: LD_VAR 0 1
59170: PPUSH
59171: CALL_OW 250
59175: PPUSH
59176: LD_VAR 0 2
59180: PPUSH
59181: LD_INT 1
59183: PPUSH
59184: CALL_OW 272
59188: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59189: LD_ADDR_VAR 0 5
59193: PUSH
59194: LD_VAR 0 1
59198: PPUSH
59199: CALL_OW 251
59203: PPUSH
59204: LD_VAR 0 2
59208: PPUSH
59209: LD_INT 1
59211: PPUSH
59212: CALL_OW 273
59216: ST_TO_ADDR
// if ValidHex ( x , y ) then
59217: LD_VAR 0 4
59221: PPUSH
59222: LD_VAR 0 5
59226: PPUSH
59227: CALL_OW 488
59231: IFFALSE 59252
// ComTurnXY ( unit , x , y ) ;
59233: LD_VAR 0 1
59237: PPUSH
59238: LD_VAR 0 4
59242: PPUSH
59243: LD_VAR 0 5
59247: PPUSH
59248: CALL_OW 118
// end ;
59252: LD_VAR 0 3
59256: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59257: LD_INT 0
59259: PPUSH
59260: PPUSH
// result := false ;
59261: LD_ADDR_VAR 0 3
59265: PUSH
59266: LD_INT 0
59268: ST_TO_ADDR
// if not units then
59269: LD_VAR 0 2
59273: NOT
59274: IFFALSE 59278
// exit ;
59276: GO 59323
// for i in units do
59278: LD_ADDR_VAR 0 4
59282: PUSH
59283: LD_VAR 0 2
59287: PUSH
59288: FOR_IN
59289: IFFALSE 59321
// if See ( side , i ) then
59291: LD_VAR 0 1
59295: PPUSH
59296: LD_VAR 0 4
59300: PPUSH
59301: CALL_OW 292
59305: IFFALSE 59319
// begin result := true ;
59307: LD_ADDR_VAR 0 3
59311: PUSH
59312: LD_INT 1
59314: ST_TO_ADDR
// exit ;
59315: POP
59316: POP
59317: GO 59323
// end ;
59319: GO 59288
59321: POP
59322: POP
// end ;
59323: LD_VAR 0 3
59327: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59328: LD_INT 0
59330: PPUSH
59331: PPUSH
59332: PPUSH
59333: PPUSH
// if not unit or not points then
59334: LD_VAR 0 1
59338: NOT
59339: PUSH
59340: LD_VAR 0 2
59344: NOT
59345: OR
59346: IFFALSE 59350
// exit ;
59348: GO 59440
// dist := 99999 ;
59350: LD_ADDR_VAR 0 5
59354: PUSH
59355: LD_INT 99999
59357: ST_TO_ADDR
// for i in points do
59358: LD_ADDR_VAR 0 4
59362: PUSH
59363: LD_VAR 0 2
59367: PUSH
59368: FOR_IN
59369: IFFALSE 59438
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59371: LD_ADDR_VAR 0 6
59375: PUSH
59376: LD_VAR 0 1
59380: PPUSH
59381: LD_VAR 0 4
59385: PUSH
59386: LD_INT 1
59388: ARRAY
59389: PPUSH
59390: LD_VAR 0 4
59394: PUSH
59395: LD_INT 2
59397: ARRAY
59398: PPUSH
59399: CALL_OW 297
59403: ST_TO_ADDR
// if tmpDist < dist then
59404: LD_VAR 0 6
59408: PUSH
59409: LD_VAR 0 5
59413: LESS
59414: IFFALSE 59436
// begin result := i ;
59416: LD_ADDR_VAR 0 3
59420: PUSH
59421: LD_VAR 0 4
59425: ST_TO_ADDR
// dist := tmpDist ;
59426: LD_ADDR_VAR 0 5
59430: PUSH
59431: LD_VAR 0 6
59435: ST_TO_ADDR
// end ; end ;
59436: GO 59368
59438: POP
59439: POP
// end ;
59440: LD_VAR 0 3
59444: RET
