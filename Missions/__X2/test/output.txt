// every 0 0$1 trigger Carry ( aaa3 ) do
   0: LD_INT 82
   2: PPUSH
   3: CALL_OW 281
   7: IFFALSE 25
   9: GO 11
  11: DISABLE
// SetCargo ( aaa3 , mat_cans , 0 ) ;
  12: LD_INT 82
  14: PPUSH
  15: LD_INT 1
  17: PPUSH
  18: LD_INT 0
  20: PPUSH
  21: CALL_OW 290
  25: END
// export mineCounter ; every 0 0$1 do var i , tmp , task ;
  26: GO 28
  28: DISABLE
  29: LD_INT 0
  31: PPUSH
  32: PPUSH
  33: PPUSH
// begin mineCounter := 5 ;
  34: LD_ADDR_EXP 1
  38: PUSH
  39: LD_INT 5
  41: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  42: LD_INT 35
  44: PPUSH
  45: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  49: LD_ADDR_VAR 0 2
  53: PUSH
  54: LD_INT 22
  56: PUSH
  57: LD_INT 1
  59: PUSH
  60: EMPTY
  61: LIST
  62: LIST
  63: PUSH
  64: LD_INT 23
  66: PUSH
  67: LD_INT 2
  69: PUSH
  70: EMPTY
  71: LIST
  72: LIST
  73: PUSH
  74: LD_INT 25
  76: PUSH
  77: LD_INT 1
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: PUSH
  84: EMPTY
  85: LIST
  86: LIST
  87: LIST
  88: PPUSH
  89: CALL_OW 69
  93: ST_TO_ADDR
// if not tmp then
  94: LD_VAR 0 2
  98: NOT
  99: IFFALSE 103
// continue ;
 101: GO 42
// for i in tmp do
 103: LD_ADDR_VAR 0 1
 107: PUSH
 108: LD_VAR 0 2
 112: PUSH
 113: FOR_IN
 114: IFFALSE 303
// begin task := GetTaskList ( i ) ;
 116: LD_ADDR_VAR 0 3
 120: PUSH
 121: LD_VAR 0 1
 125: PPUSH
 126: CALL_OW 437
 130: ST_TO_ADDR
// if not task then
 131: LD_VAR 0 3
 135: NOT
 136: IFFALSE 152
// begin SetTag ( i , 0 ) ;
 138: LD_VAR 0 1
 142: PPUSH
 143: LD_INT 0
 145: PPUSH
 146: CALL_OW 109
// continue ;
 150: GO 113
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 152: LD_VAR 0 1
 156: PPUSH
 157: CALL_OW 110
 161: PUSH
 162: LD_INT 1
 164: EQUAL
 165: PUSH
 166: LD_VAR 0 3
 170: PUSH
 171: LD_INT 1
 173: ARRAY
 174: PUSH
 175: LD_INT 1
 177: ARRAY
 178: PUSH
 179: LD_STRING p
 181: NONEQUAL
 182: AND
 183: IFFALSE 199
// begin SetTag ( i , 0 ) ;
 185: LD_VAR 0 1
 189: PPUSH
 190: LD_INT 0
 192: PPUSH
 193: CALL_OW 109
// continue ;
 197: GO 113
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 199: LD_VAR 0 1
 203: PPUSH
 204: CALL_OW 110
 208: PUSH
 209: LD_INT 1
 211: NONEQUAL
 212: PUSH
 213: LD_VAR 0 3
 217: PUSH
 218: LD_INT 1
 220: ARRAY
 221: PUSH
 222: LD_INT 1
 224: ARRAY
 225: PUSH
 226: LD_STRING p
 228: EQUAL
 229: AND
 230: IFFALSE 301
// begin SetTag ( i , 1 ) ;
 232: LD_VAR 0 1
 236: PPUSH
 237: LD_INT 1
 239: PPUSH
 240: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 244: LD_INT 1
 246: PPUSH
 247: LD_VAR 0 1
 251: PPUSH
 252: LD_VAR 0 3
 256: PUSH
 257: LD_INT 1
 259: ARRAY
 260: PUSH
 261: LD_INT 2
 263: ARRAY
 264: PPUSH
 265: LD_VAR 0 3
 269: PUSH
 270: LD_INT 1
 272: ARRAY
 273: PUSH
 274: LD_INT 3
 276: ARRAY
 277: PPUSH
 278: LD_VAR 0 3
 282: PUSH
 283: LD_INT 1
 285: ARRAY
 286: PUSH
 287: LD_INT 4
 289: ARRAY
 290: PPUSH
 291: LD_INT 0
 293: PPUSH
 294: LD_INT 0
 296: PPUSH
 297: CALL_OW 595
// end ; end ;
 301: GO 113
 303: POP
 304: POP
// until mineCounter = 0 ;
 305: LD_EXP 1
 309: PUSH
 310: LD_INT 0
 312: EQUAL
 313: IFFALSE 42
// end ;
 315: PPOPN 3
 317: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 318: LD_VAR 0 1
 322: PUSH
 323: LD_INT 1
 325: EQUAL
 326: IFFALSE 414
// begin repeat wait ( 0 0$1 ) ;
 328: LD_INT 35
 330: PPUSH
 331: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 335: LD_VAR 0 3
 339: PPUSH
 340: LD_VAR 0 4
 344: PPUSH
 345: CALL_OW 458
 349: PUSH
 350: LD_VAR 0 5
 354: PPUSH
 355: CALL_OW 250
 359: PPUSH
 360: LD_VAR 0 5
 364: PPUSH
 365: CALL_OW 251
 369: PPUSH
 370: CALL 417 0 2
 374: OR
 375: IFFALSE 379
// break ;
 377: GO 400
// if GetTag ( p1 ) <> 1 then
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 110
 388: PUSH
 389: LD_INT 1
 391: NONEQUAL
 392: IFFALSE 396
// exit ;
 394: GO 414
// until false ;
 396: LD_INT 0
 398: IFFALSE 328
// mineCounter := mineCounter - 1 ;
 400: LD_ADDR_EXP 1
 404: PUSH
 405: LD_EXP 1
 409: PUSH
 410: LD_INT 1
 412: MINUS
 413: ST_TO_ADDR
// end ; end ;
 414: PPOPN 7
 416: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 417: LD_INT 0
 419: PPUSH
 420: PPUSH
 421: PPUSH
 422: PPUSH
// for _d := 0 to 5 do
 423: LD_ADDR_VAR 0 6
 427: PUSH
 428: DOUBLE
 429: LD_INT 0
 431: DEC
 432: ST_TO_ADDR
 433: LD_INT 5
 435: PUSH
 436: FOR_TO
 437: IFFALSE 545
// for _x := - 3 to 3 do
 439: LD_ADDR_VAR 0 4
 443: PUSH
 444: DOUBLE
 445: LD_INT 3
 447: NEG
 448: DEC
 449: ST_TO_ADDR
 450: LD_INT 3
 452: PUSH
 453: FOR_TO
 454: IFFALSE 541
// for _y := - 3 to 3 do
 456: LD_ADDR_VAR 0 5
 460: PUSH
 461: DOUBLE
 462: LD_INT 3
 464: NEG
 465: DEC
 466: ST_TO_ADDR
 467: LD_INT 3
 469: PUSH
 470: FOR_TO
 471: IFFALSE 537
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 473: LD_VAR 0 1
 477: PPUSH
 478: LD_VAR 0 6
 482: PPUSH
 483: LD_VAR 0 4
 487: PPUSH
 488: CALL_OW 272
 492: PPUSH
 493: LD_VAR 0 2
 497: PPUSH
 498: LD_VAR 0 6
 502: PPUSH
 503: LD_VAR 0 5
 507: PPUSH
 508: CALL_OW 273
 512: PPUSH
 513: CALL_OW 458
 517: IFFALSE 535
// begin result := true ;
 519: LD_ADDR_VAR 0 3
 523: PUSH
 524: LD_INT 1
 526: ST_TO_ADDR
// exit ;
 527: POP
 528: POP
 529: POP
 530: POP
 531: POP
 532: POP
 533: GO 547
// end ;
 535: GO 470
 537: POP
 538: POP
 539: GO 453
 541: POP
 542: POP
 543: GO 436
 545: POP
 546: POP
// end ;
 547: LD_VAR 0 3
 551: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 552: GO 554
 554: DISABLE
 555: LD_INT 0
 557: PPUSH
 558: PPUSH
 559: PPUSH
 560: PPUSH
 561: PPUSH
 562: PPUSH
 563: PPUSH
 564: PPUSH
 565: PPUSH
// begin x := 23 ;
 566: LD_ADDR_VAR 0 2
 570: PUSH
 571: LD_INT 23
 573: ST_TO_ADDR
// y := 19 ;
 574: LD_ADDR_VAR 0 3
 578: PUSH
 579: LD_INT 19
 581: ST_TO_ADDR
// uc_side := 8 ;
 582: LD_ADDR_OWVAR 20
 586: PUSH
 587: LD_INT 8
 589: ST_TO_ADDR
// uc_nation := 1 ;
 590: LD_ADDR_OWVAR 21
 594: PUSH
 595: LD_INT 1
 597: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 1
 603: PPUSH
 604: CALL_OW 381
// for _r := 1 to 6 do
 608: LD_ADDR_VAR 0 4
 612: PUSH
 613: DOUBLE
 614: LD_INT 1
 616: DEC
 617: ST_TO_ADDR
 618: LD_INT 6
 620: PUSH
 621: FOR_TO
 622: IFFALSE 774
// begin for _x := - _r to _r do
 624: LD_ADDR_VAR 0 5
 628: PUSH
 629: DOUBLE
 630: LD_VAR 0 4
 634: NEG
 635: DEC
 636: ST_TO_ADDR
 637: LD_VAR 0 4
 641: PUSH
 642: FOR_TO
 643: IFFALSE 770
// for _y := - _r to _r do
 645: LD_ADDR_VAR 0 6
 649: PUSH
 650: DOUBLE
 651: LD_VAR 0 4
 655: NEG
 656: DEC
 657: ST_TO_ADDR
 658: LD_VAR 0 4
 662: PUSH
 663: FOR_TO
 664: IFFALSE 766
// begin __x := x + _x ;
 666: LD_ADDR_VAR 0 8
 670: PUSH
 671: LD_VAR 0 2
 675: PUSH
 676: LD_VAR 0 5
 680: PLUS
 681: ST_TO_ADDR
// __y := y + _y ;
 682: LD_ADDR_VAR 0 9
 686: PUSH
 687: LD_VAR 0 3
 691: PUSH
 692: LD_VAR 0 6
 696: PLUS
 697: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 698: LD_VAR 0 8
 702: PPUSH
 703: LD_VAR 0 9
 707: PPUSH
 708: CALL_OW 428
 712: IFFALSE 716
// continue ;
 714: GO 663
// wait ( 1 ) ;
 716: LD_INT 1
 718: PPUSH
 719: CALL_OW 67
// un := CreateHuman ;
 723: LD_ADDR_VAR 0 1
 727: PUSH
 728: CALL_OW 44
 732: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 733: LD_VAR 0 1
 737: PPUSH
 738: LD_VAR 0 8
 742: PPUSH
 743: LD_VAR 0 9
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 48
// ComHold ( un ) ;
 755: LD_VAR 0 1
 759: PPUSH
 760: CALL_OW 140
// end ;
 764: GO 663
 766: POP
 767: POP
 768: GO 642
 770: POP
 771: POP
// end ;
 772: GO 621
 774: POP
 775: POP
// end ;
 776: PPOPN 9
 778: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 779: LD_INT 0
 781: PPUSH
 782: PPUSH
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
 789: PPUSH
 790: PPUSH
 791: PPUSH
// enemySkilllevel := 2 ;
 792: LD_ADDR_VAR 0 16
 796: PUSH
 797: LD_INT 2
 799: ST_TO_ADDR
// uc_side := 1 ;
 800: LD_ADDR_OWVAR 20
 804: PUSH
 805: LD_INT 1
 807: ST_TO_ADDR
// uc_nation := 1 ;
 808: LD_ADDR_OWVAR 21
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// hc_name :=  ;
 816: LD_ADDR_OWVAR 26
 820: PUSH
 821: LD_STRING 
 823: ST_TO_ADDR
// hc_gallery :=  ;
 824: LD_ADDR_OWVAR 33
 828: PUSH
 829: LD_STRING 
 831: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 832: LD_ADDR_VAR 0 8
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_VAR 0 1
 846: PUSH
 847: FOR_TO
 848: IFFALSE 923
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 850: LD_INT 0
 852: PPUSH
 853: LD_VAR 0 16
 857: PPUSH
 858: CALL_OW 381
// un = CreateHuman ;
 862: LD_ADDR_VAR 0 9
 866: PUSH
 867: CALL_OW 44
 871: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 872: LD_ADDR_VAR 0 17
 876: PUSH
 877: LD_VAR 0 17
 881: PUSH
 882: LD_VAR 0 9
 886: ADD
 887: ST_TO_ADDR
// sols := sols ^ un ;
 888: LD_ADDR_VAR 0 12
 892: PUSH
 893: LD_VAR 0 12
 897: PUSH
 898: LD_VAR 0 9
 902: ADD
 903: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 904: LD_VAR 0 9
 908: PPUSH
 909: LD_VAR 0 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ;
 921: GO 847
 923: POP
 924: POP
// for i := 1 to engsAmount do
 925: LD_ADDR_VAR 0 8
 929: PUSH
 930: DOUBLE
 931: LD_INT 1
 933: DEC
 934: ST_TO_ADDR
 935: LD_VAR 0 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 1016
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 943: LD_INT 0
 945: PPUSH
 946: LD_VAR 0 16
 950: PPUSH
 951: CALL_OW 382
// un = CreateHuman ;
 955: LD_ADDR_VAR 0 9
 959: PUSH
 960: CALL_OW 44
 964: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 965: LD_ADDR_VAR 0 17
 969: PUSH
 970: LD_VAR 0 17
 974: PUSH
 975: LD_VAR 0 9
 979: ADD
 980: ST_TO_ADDR
// engs := engs ^ un ;
 981: LD_ADDR_VAR 0 13
 985: PUSH
 986: LD_VAR 0 13
 990: PUSH
 991: LD_VAR 0 9
 995: ADD
 996: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 997: LD_VAR 0 9
1001: PPUSH
1002: LD_VAR 0 6
1006: PPUSH
1007: LD_INT 0
1009: PPUSH
1010: CALL_OW 49
// end ;
1014: GO 940
1016: POP
1017: POP
// for i := 1 to mechsAmount do
1018: LD_ADDR_VAR 0 8
1022: PUSH
1023: DOUBLE
1024: LD_INT 1
1026: DEC
1027: ST_TO_ADDR
1028: LD_VAR 0 3
1032: PUSH
1033: FOR_TO
1034: IFFALSE 1109
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1036: LD_INT 0
1038: PPUSH
1039: LD_VAR 0 16
1043: PPUSH
1044: CALL_OW 382
// un = CreateHuman ;
1048: LD_ADDR_VAR 0 9
1052: PUSH
1053: CALL_OW 44
1057: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1058: LD_ADDR_VAR 0 17
1062: PUSH
1063: LD_VAR 0 17
1067: PUSH
1068: LD_VAR 0 9
1072: ADD
1073: ST_TO_ADDR
// engs := engs ^ un ;
1074: LD_ADDR_VAR 0 13
1078: PUSH
1079: LD_VAR 0 13
1083: PUSH
1084: LD_VAR 0 9
1088: ADD
1089: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1090: LD_VAR 0 9
1094: PPUSH
1095: LD_VAR 0 6
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: CALL_OW 49
// end ;
1107: GO 1033
1109: POP
1110: POP
// for i := 1 to scientistsAmount do
1111: LD_ADDR_VAR 0 8
1115: PUSH
1116: DOUBLE
1117: LD_INT 1
1119: DEC
1120: ST_TO_ADDR
1121: LD_VAR 0 4
1125: PUSH
1126: FOR_TO
1127: IFFALSE 1202
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1129: LD_INT 0
1131: PPUSH
1132: LD_VAR 0 16
1136: PPUSH
1137: CALL_OW 383
// un = CreateHuman ;
1141: LD_ADDR_VAR 0 9
1145: PUSH
1146: CALL_OW 44
1150: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1151: LD_ADDR_VAR 0 17
1155: PUSH
1156: LD_VAR 0 17
1160: PUSH
1161: LD_VAR 0 9
1165: ADD
1166: ST_TO_ADDR
// mechs := mechs ^ un ;
1167: LD_ADDR_VAR 0 14
1171: PUSH
1172: LD_VAR 0 14
1176: PUSH
1177: LD_VAR 0 9
1181: ADD
1182: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1183: LD_VAR 0 9
1187: PPUSH
1188: LD_VAR 0 6
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 49
// end ;
1200: GO 1126
1202: POP
1203: POP
// for i := 1 to vehiclesAmount do
1204: LD_ADDR_VAR 0 8
1208: PUSH
1209: DOUBLE
1210: LD_INT 1
1212: DEC
1213: ST_TO_ADDR
1214: LD_VAR 0 5
1218: PUSH
1219: FOR_TO
1220: IFFALSE 1386
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1222: LD_ADDR_OWVAR 40
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: LD_INT 4
1232: PUSH
1233: LD_INT 3
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_INT 3
1246: PPUSH
1247: CALL_OW 12
1251: ARRAY
1252: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1253: LD_ADDR_OWVAR 37
1257: PUSH
1258: LD_INT 3
1260: ST_TO_ADDR
// vc_control = control_manual ;
1261: LD_ADDR_OWVAR 38
1265: PUSH
1266: LD_INT 1
1268: ST_TO_ADDR
// vc_engine = engine_combustion ;
1269: LD_ADDR_OWVAR 39
1273: PUSH
1274: LD_INT 1
1276: ST_TO_ADDR
// veh = CreateVehicle ;
1277: LD_ADDR_VAR 0 10
1281: PUSH
1282: CALL_OW 45
1286: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1287: LD_ADDR_VAR 0 17
1291: PUSH
1292: LD_VAR 0 17
1296: PUSH
1297: LD_VAR 0 10
1301: ADD
1302: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1303: LD_VAR 0 10
1307: PPUSH
1308: LD_VAR 0 6
1312: PPUSH
1313: LD_INT 0
1315: PPUSH
1316: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1320: LD_INT 0
1322: PPUSH
1323: LD_VAR 0 16
1327: PPUSH
1328: CALL_OW 383
// un = CreateHuman ;
1332: LD_ADDR_VAR 0 9
1336: PUSH
1337: CALL_OW 44
1341: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1342: LD_ADDR_VAR 0 17
1346: PUSH
1347: LD_VAR 0 17
1351: PUSH
1352: LD_VAR 0 9
1356: ADD
1357: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1358: LD_VAR 0 9
1362: PPUSH
1363: LD_VAR 0 10
1367: PPUSH
1368: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1372: LD_VAR 0 10
1376: PPUSH
1377: LD_INT 100
1379: PPUSH
1380: CALL_OW 240
// end ;
1384: GO 1219
1386: POP
1387: POP
// end ; end_of_file
1388: LD_VAR 0 7
1392: RET
// every 0 0$1 do
1393: GO 1395
1395: DISABLE
// begin enable ;
1396: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1397: LD_STRING updateTimer(
1399: PUSH
1400: LD_OWVAR 1
1404: STR
1405: PUSH
1406: LD_STRING );
1408: STR
1409: PPUSH
1410: CALL_OW 559
// end ;
1414: END
// export function SOS_MapStart ( ) ; begin
1415: LD_INT 0
1417: PPUSH
// if streamModeActive then
1418: LD_EXP 2
1422: IFFALSE 1431
// DefineStreamItems ( true ) ;
1424: LD_INT 1
1426: PPUSH
1427: CALL 3085 0 1
// UpdateFactoryWaypoints ( ) ;
1431: CALL 15946 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1435: CALL 16203 0 0
// end ;
1439: LD_VAR 0 1
1443: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1444: LD_INT 0
1446: PPUSH
// if p2 = 100 then
1447: LD_VAR 0 2
1451: PUSH
1452: LD_INT 100
1454: EQUAL
1455: IFFALSE 2458
// begin if not StreamModeActive then
1457: LD_EXP 2
1461: NOT
1462: IFFALSE 1472
// StreamModeActive := true ;
1464: LD_ADDR_EXP 2
1468: PUSH
1469: LD_INT 1
1471: ST_TO_ADDR
// if p3 = 0 then
1472: LD_VAR 0 3
1476: PUSH
1477: LD_INT 0
1479: EQUAL
1480: IFFALSE 1486
// InitStreamMode ;
1482: CALL 2621 0 0
// if p3 = 1 then
1486: LD_VAR 0 3
1490: PUSH
1491: LD_INT 1
1493: EQUAL
1494: IFFALSE 1504
// sRocket := true ;
1496: LD_ADDR_EXP 7
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// if p3 = 2 then
1504: LD_VAR 0 3
1508: PUSH
1509: LD_INT 2
1511: EQUAL
1512: IFFALSE 1522
// sSpeed := true ;
1514: LD_ADDR_EXP 6
1518: PUSH
1519: LD_INT 1
1521: ST_TO_ADDR
// if p3 = 3 then
1522: LD_VAR 0 3
1526: PUSH
1527: LD_INT 3
1529: EQUAL
1530: IFFALSE 1540
// sEngine := true ;
1532: LD_ADDR_EXP 8
1536: PUSH
1537: LD_INT 1
1539: ST_TO_ADDR
// if p3 = 4 then
1540: LD_VAR 0 3
1544: PUSH
1545: LD_INT 4
1547: EQUAL
1548: IFFALSE 1558
// sSpec := true ;
1550: LD_ADDR_EXP 5
1554: PUSH
1555: LD_INT 1
1557: ST_TO_ADDR
// if p3 = 5 then
1558: LD_VAR 0 3
1562: PUSH
1563: LD_INT 5
1565: EQUAL
1566: IFFALSE 1576
// sLevel := true ;
1568: LD_ADDR_EXP 9
1572: PUSH
1573: LD_INT 1
1575: ST_TO_ADDR
// if p3 = 6 then
1576: LD_VAR 0 3
1580: PUSH
1581: LD_INT 6
1583: EQUAL
1584: IFFALSE 1594
// sArmoury := true ;
1586: LD_ADDR_EXP 10
1590: PUSH
1591: LD_INT 1
1593: ST_TO_ADDR
// if p3 = 7 then
1594: LD_VAR 0 3
1598: PUSH
1599: LD_INT 7
1601: EQUAL
1602: IFFALSE 1612
// sRadar := true ;
1604: LD_ADDR_EXP 11
1608: PUSH
1609: LD_INT 1
1611: ST_TO_ADDR
// if p3 = 8 then
1612: LD_VAR 0 3
1616: PUSH
1617: LD_INT 8
1619: EQUAL
1620: IFFALSE 1630
// sBunker := true ;
1622: LD_ADDR_EXP 12
1626: PUSH
1627: LD_INT 1
1629: ST_TO_ADDR
// if p3 = 9 then
1630: LD_VAR 0 3
1634: PUSH
1635: LD_INT 9
1637: EQUAL
1638: IFFALSE 1648
// sHack := true ;
1640: LD_ADDR_EXP 13
1644: PUSH
1645: LD_INT 1
1647: ST_TO_ADDR
// if p3 = 10 then
1648: LD_VAR 0 3
1652: PUSH
1653: LD_INT 10
1655: EQUAL
1656: IFFALSE 1666
// sFire := true ;
1658: LD_ADDR_EXP 14
1662: PUSH
1663: LD_INT 1
1665: ST_TO_ADDR
// if p3 = 11 then
1666: LD_VAR 0 3
1670: PUSH
1671: LD_INT 11
1673: EQUAL
1674: IFFALSE 1684
// sRefresh := true ;
1676: LD_ADDR_EXP 15
1680: PUSH
1681: LD_INT 1
1683: ST_TO_ADDR
// if p3 = 12 then
1684: LD_VAR 0 3
1688: PUSH
1689: LD_INT 12
1691: EQUAL
1692: IFFALSE 1702
// sExp := true ;
1694: LD_ADDR_EXP 16
1698: PUSH
1699: LD_INT 1
1701: ST_TO_ADDR
// if p3 = 13 then
1702: LD_VAR 0 3
1706: PUSH
1707: LD_INT 13
1709: EQUAL
1710: IFFALSE 1720
// sDepot := true ;
1712: LD_ADDR_EXP 17
1716: PUSH
1717: LD_INT 1
1719: ST_TO_ADDR
// if p3 = 14 then
1720: LD_VAR 0 3
1724: PUSH
1725: LD_INT 14
1727: EQUAL
1728: IFFALSE 1738
// sFlag := true ;
1730: LD_ADDR_EXP 18
1734: PUSH
1735: LD_INT 1
1737: ST_TO_ADDR
// if p3 = 15 then
1738: LD_VAR 0 3
1742: PUSH
1743: LD_INT 15
1745: EQUAL
1746: IFFALSE 1756
// sKamikadze := true ;
1748: LD_ADDR_EXP 26
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// if p3 = 16 then
1756: LD_VAR 0 3
1760: PUSH
1761: LD_INT 16
1763: EQUAL
1764: IFFALSE 1774
// sTroll := true ;
1766: LD_ADDR_EXP 27
1770: PUSH
1771: LD_INT 1
1773: ST_TO_ADDR
// if p3 = 17 then
1774: LD_VAR 0 3
1778: PUSH
1779: LD_INT 17
1781: EQUAL
1782: IFFALSE 1792
// sSlow := true ;
1784: LD_ADDR_EXP 28
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// if p3 = 18 then
1792: LD_VAR 0 3
1796: PUSH
1797: LD_INT 18
1799: EQUAL
1800: IFFALSE 1810
// sLack := true ;
1802: LD_ADDR_EXP 29
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// if p3 = 19 then
1810: LD_VAR 0 3
1814: PUSH
1815: LD_INT 19
1817: EQUAL
1818: IFFALSE 1828
// sTank := true ;
1820: LD_ADDR_EXP 31
1824: PUSH
1825: LD_INT 1
1827: ST_TO_ADDR
// if p3 = 20 then
1828: LD_VAR 0 3
1832: PUSH
1833: LD_INT 20
1835: EQUAL
1836: IFFALSE 1846
// sRemote := true ;
1838: LD_ADDR_EXP 32
1842: PUSH
1843: LD_INT 1
1845: ST_TO_ADDR
// if p3 = 21 then
1846: LD_VAR 0 3
1850: PUSH
1851: LD_INT 21
1853: EQUAL
1854: IFFALSE 1864
// sPowell := true ;
1856: LD_ADDR_EXP 33
1860: PUSH
1861: LD_INT 1
1863: ST_TO_ADDR
// if p3 = 22 then
1864: LD_VAR 0 3
1868: PUSH
1869: LD_INT 22
1871: EQUAL
1872: IFFALSE 1882
// sTeleport := true ;
1874: LD_ADDR_EXP 36
1878: PUSH
1879: LD_INT 1
1881: ST_TO_ADDR
// if p3 = 23 then
1882: LD_VAR 0 3
1886: PUSH
1887: LD_INT 23
1889: EQUAL
1890: IFFALSE 1900
// sOilTower := true ;
1892: LD_ADDR_EXP 38
1896: PUSH
1897: LD_INT 1
1899: ST_TO_ADDR
// if p3 = 24 then
1900: LD_VAR 0 3
1904: PUSH
1905: LD_INT 24
1907: EQUAL
1908: IFFALSE 1918
// sShovel := true ;
1910: LD_ADDR_EXP 39
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// if p3 = 25 then
1918: LD_VAR 0 3
1922: PUSH
1923: LD_INT 25
1925: EQUAL
1926: IFFALSE 1936
// sSheik := true ;
1928: LD_ADDR_EXP 40
1932: PUSH
1933: LD_INT 1
1935: ST_TO_ADDR
// if p3 = 26 then
1936: LD_VAR 0 3
1940: PUSH
1941: LD_INT 26
1943: EQUAL
1944: IFFALSE 1954
// sEarthquake := true ;
1946: LD_ADDR_EXP 42
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// if p3 = 27 then
1954: LD_VAR 0 3
1958: PUSH
1959: LD_INT 27
1961: EQUAL
1962: IFFALSE 1972
// sAI := true ;
1964: LD_ADDR_EXP 43
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// if p3 = 28 then
1972: LD_VAR 0 3
1976: PUSH
1977: LD_INT 28
1979: EQUAL
1980: IFFALSE 1990
// sCargo := true ;
1982: LD_ADDR_EXP 46
1986: PUSH
1987: LD_INT 1
1989: ST_TO_ADDR
// if p3 = 29 then
1990: LD_VAR 0 3
1994: PUSH
1995: LD_INT 29
1997: EQUAL
1998: IFFALSE 2008
// sDLaser := true ;
2000: LD_ADDR_EXP 47
2004: PUSH
2005: LD_INT 1
2007: ST_TO_ADDR
// if p3 = 30 then
2008: LD_VAR 0 3
2012: PUSH
2013: LD_INT 30
2015: EQUAL
2016: IFFALSE 2026
// sExchange := true ;
2018: LD_ADDR_EXP 48
2022: PUSH
2023: LD_INT 1
2025: ST_TO_ADDR
// if p3 = 31 then
2026: LD_VAR 0 3
2030: PUSH
2031: LD_INT 31
2033: EQUAL
2034: IFFALSE 2044
// sFac := true ;
2036: LD_ADDR_EXP 49
2040: PUSH
2041: LD_INT 1
2043: ST_TO_ADDR
// if p3 = 32 then
2044: LD_VAR 0 3
2048: PUSH
2049: LD_INT 32
2051: EQUAL
2052: IFFALSE 2062
// sPower := true ;
2054: LD_ADDR_EXP 50
2058: PUSH
2059: LD_INT 1
2061: ST_TO_ADDR
// if p3 = 33 then
2062: LD_VAR 0 3
2066: PUSH
2067: LD_INT 33
2069: EQUAL
2070: IFFALSE 2080
// sRandom := true ;
2072: LD_ADDR_EXP 51
2076: PUSH
2077: LD_INT 1
2079: ST_TO_ADDR
// if p3 = 34 then
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 34
2087: EQUAL
2088: IFFALSE 2098
// sShield := true ;
2090: LD_ADDR_EXP 52
2094: PUSH
2095: LD_INT 1
2097: ST_TO_ADDR
// if p3 = 35 then
2098: LD_VAR 0 3
2102: PUSH
2103: LD_INT 35
2105: EQUAL
2106: IFFALSE 2116
// sTime := true ;
2108: LD_ADDR_EXP 53
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// if p3 = 36 then
2116: LD_VAR 0 3
2120: PUSH
2121: LD_INT 36
2123: EQUAL
2124: IFFALSE 2134
// sTools := true ;
2126: LD_ADDR_EXP 54
2130: PUSH
2131: LD_INT 1
2133: ST_TO_ADDR
// if p3 = 101 then
2134: LD_VAR 0 3
2138: PUSH
2139: LD_INT 101
2141: EQUAL
2142: IFFALSE 2152
// sSold := true ;
2144: LD_ADDR_EXP 19
2148: PUSH
2149: LD_INT 1
2151: ST_TO_ADDR
// if p3 = 102 then
2152: LD_VAR 0 3
2156: PUSH
2157: LD_INT 102
2159: EQUAL
2160: IFFALSE 2170
// sDiff := true ;
2162: LD_ADDR_EXP 20
2166: PUSH
2167: LD_INT 1
2169: ST_TO_ADDR
// if p3 = 103 then
2170: LD_VAR 0 3
2174: PUSH
2175: LD_INT 103
2177: EQUAL
2178: IFFALSE 2188
// sFog := true ;
2180: LD_ADDR_EXP 23
2184: PUSH
2185: LD_INT 1
2187: ST_TO_ADDR
// if p3 = 104 then
2188: LD_VAR 0 3
2192: PUSH
2193: LD_INT 104
2195: EQUAL
2196: IFFALSE 2206
// sReset := true ;
2198: LD_ADDR_EXP 24
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// if p3 = 105 then
2206: LD_VAR 0 3
2210: PUSH
2211: LD_INT 105
2213: EQUAL
2214: IFFALSE 2224
// sSun := true ;
2216: LD_ADDR_EXP 25
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// if p3 = 106 then
2224: LD_VAR 0 3
2228: PUSH
2229: LD_INT 106
2231: EQUAL
2232: IFFALSE 2242
// sTiger := true ;
2234: LD_ADDR_EXP 21
2238: PUSH
2239: LD_INT 1
2241: ST_TO_ADDR
// if p3 = 107 then
2242: LD_VAR 0 3
2246: PUSH
2247: LD_INT 107
2249: EQUAL
2250: IFFALSE 2260
// sBomb := true ;
2252: LD_ADDR_EXP 22
2256: PUSH
2257: LD_INT 1
2259: ST_TO_ADDR
// if p3 = 108 then
2260: LD_VAR 0 3
2264: PUSH
2265: LD_INT 108
2267: EQUAL
2268: IFFALSE 2278
// sWound := true ;
2270: LD_ADDR_EXP 30
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// if p3 = 109 then
2278: LD_VAR 0 3
2282: PUSH
2283: LD_INT 109
2285: EQUAL
2286: IFFALSE 2296
// sBetray := true ;
2288: LD_ADDR_EXP 34
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// if p3 = 110 then
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 110
2303: EQUAL
2304: IFFALSE 2314
// sContamin := true ;
2306: LD_ADDR_EXP 35
2310: PUSH
2311: LD_INT 1
2313: ST_TO_ADDR
// if p3 = 111 then
2314: LD_VAR 0 3
2318: PUSH
2319: LD_INT 111
2321: EQUAL
2322: IFFALSE 2332
// sOil := true ;
2324: LD_ADDR_EXP 37
2328: PUSH
2329: LD_INT 1
2331: ST_TO_ADDR
// if p3 = 112 then
2332: LD_VAR 0 3
2336: PUSH
2337: LD_INT 112
2339: EQUAL
2340: IFFALSE 2350
// sStu := true ;
2342: LD_ADDR_EXP 41
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// if p3 = 113 then
2350: LD_VAR 0 3
2354: PUSH
2355: LD_INT 113
2357: EQUAL
2358: IFFALSE 2368
// sBazooka := true ;
2360: LD_ADDR_EXP 44
2364: PUSH
2365: LD_INT 1
2367: ST_TO_ADDR
// if p3 = 114 then
2368: LD_VAR 0 3
2372: PUSH
2373: LD_INT 114
2375: EQUAL
2376: IFFALSE 2386
// sMortar := true ;
2378: LD_ADDR_EXP 45
2382: PUSH
2383: LD_INT 1
2385: ST_TO_ADDR
// if p3 = 115 then
2386: LD_VAR 0 3
2390: PUSH
2391: LD_INT 115
2393: EQUAL
2394: IFFALSE 2404
// sRanger := true ;
2396: LD_ADDR_EXP 55
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// if p3 = 116 then
2404: LD_VAR 0 3
2408: PUSH
2409: LD_INT 116
2411: EQUAL
2412: IFFALSE 2422
// sComputer := true ;
2414: LD_ADDR_EXP 56
2418: PUSH
2419: LD_INT 1
2421: ST_TO_ADDR
// if p3 = 117 then
2422: LD_VAR 0 3
2426: PUSH
2427: LD_INT 117
2429: EQUAL
2430: IFFALSE 2440
// s30 := true ;
2432: LD_ADDR_EXP 57
2436: PUSH
2437: LD_INT 1
2439: ST_TO_ADDR
// if p3 = 118 then
2440: LD_VAR 0 3
2444: PUSH
2445: LD_INT 118
2447: EQUAL
2448: IFFALSE 2458
// s60 := true ;
2450: LD_ADDR_EXP 58
2454: PUSH
2455: LD_INT 1
2457: ST_TO_ADDR
// end ; if p2 = 101 then
2458: LD_VAR 0 2
2462: PUSH
2463: LD_INT 101
2465: EQUAL
2466: IFFALSE 2594
// begin case p3 of 1 :
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 1
2475: DOUBLE
2476: EQUAL
2477: IFTRUE 2481
2479: GO 2488
2481: POP
// hHackUnlimitedResources ; 2 :
2482: CALL 14692 0 0
2486: GO 2594
2488: LD_INT 2
2490: DOUBLE
2491: EQUAL
2492: IFTRUE 2496
2494: GO 2503
2496: POP
// hHackSetLevel10 ; 3 :
2497: CALL 14825 0 0
2501: GO 2594
2503: LD_INT 3
2505: DOUBLE
2506: EQUAL
2507: IFTRUE 2511
2509: GO 2518
2511: POP
// hHackSetLevel10YourUnits ; 4 :
2512: CALL 14910 0 0
2516: GO 2594
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2533
2526: POP
// hHackInvincible ; 5 :
2527: CALL 15358 0 0
2531: GO 2594
2533: LD_INT 5
2535: DOUBLE
2536: EQUAL
2537: IFTRUE 2541
2539: GO 2548
2541: POP
// hHackInvisible ; 6 :
2542: CALL 15469 0 0
2546: GO 2594
2548: LD_INT 6
2550: DOUBLE
2551: EQUAL
2552: IFTRUE 2556
2554: GO 2563
2556: POP
// hHackChangeYourSide ; 7 :
2557: CALL 15526 0 0
2561: GO 2594
2563: LD_INT 7
2565: DOUBLE
2566: EQUAL
2567: IFTRUE 2571
2569: GO 2578
2571: POP
// hHackChangeUnitSide ; 8 :
2572: CALL 15568 0 0
2576: GO 2594
2578: LD_INT 8
2580: DOUBLE
2581: EQUAL
2582: IFTRUE 2586
2584: GO 2593
2586: POP
// hHackFog ; end ;
2587: CALL 15669 0 0
2591: GO 2594
2593: POP
// end ; end ;
2594: LD_VAR 0 7
2598: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
2599: GO 2601
2601: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2602: LD_STRING initStreamRollete();
2604: PPUSH
2605: CALL_OW 559
// InitStreamMode ;
2609: CALL 2621 0 0
// DefineStreamItems ( false ) ;
2613: LD_INT 0
2615: PPUSH
2616: CALL 3085 0 1
// end ;
2620: END
// function InitStreamMode ; begin
2621: LD_INT 0
2623: PPUSH
// streamModeActive := false ;
2624: LD_ADDR_EXP 2
2628: PUSH
2629: LD_INT 0
2631: ST_TO_ADDR
// normalCounter := 36 ;
2632: LD_ADDR_EXP 3
2636: PUSH
2637: LD_INT 36
2639: ST_TO_ADDR
// hardcoreCounter := 18 ;
2640: LD_ADDR_EXP 4
2644: PUSH
2645: LD_INT 18
2647: ST_TO_ADDR
// sRocket := false ;
2648: LD_ADDR_EXP 7
2652: PUSH
2653: LD_INT 0
2655: ST_TO_ADDR
// sSpeed := false ;
2656: LD_ADDR_EXP 6
2660: PUSH
2661: LD_INT 0
2663: ST_TO_ADDR
// sEngine := false ;
2664: LD_ADDR_EXP 8
2668: PUSH
2669: LD_INT 0
2671: ST_TO_ADDR
// sSpec := false ;
2672: LD_ADDR_EXP 5
2676: PUSH
2677: LD_INT 0
2679: ST_TO_ADDR
// sLevel := false ;
2680: LD_ADDR_EXP 9
2684: PUSH
2685: LD_INT 0
2687: ST_TO_ADDR
// sArmoury := false ;
2688: LD_ADDR_EXP 10
2692: PUSH
2693: LD_INT 0
2695: ST_TO_ADDR
// sRadar := false ;
2696: LD_ADDR_EXP 11
2700: PUSH
2701: LD_INT 0
2703: ST_TO_ADDR
// sBunker := false ;
2704: LD_ADDR_EXP 12
2708: PUSH
2709: LD_INT 0
2711: ST_TO_ADDR
// sHack := false ;
2712: LD_ADDR_EXP 13
2716: PUSH
2717: LD_INT 0
2719: ST_TO_ADDR
// sFire := false ;
2720: LD_ADDR_EXP 14
2724: PUSH
2725: LD_INT 0
2727: ST_TO_ADDR
// sRefresh := false ;
2728: LD_ADDR_EXP 15
2732: PUSH
2733: LD_INT 0
2735: ST_TO_ADDR
// sExp := false ;
2736: LD_ADDR_EXP 16
2740: PUSH
2741: LD_INT 0
2743: ST_TO_ADDR
// sDepot := false ;
2744: LD_ADDR_EXP 17
2748: PUSH
2749: LD_INT 0
2751: ST_TO_ADDR
// sFlag := false ;
2752: LD_ADDR_EXP 18
2756: PUSH
2757: LD_INT 0
2759: ST_TO_ADDR
// sKamikadze := false ;
2760: LD_ADDR_EXP 26
2764: PUSH
2765: LD_INT 0
2767: ST_TO_ADDR
// sTroll := false ;
2768: LD_ADDR_EXP 27
2772: PUSH
2773: LD_INT 0
2775: ST_TO_ADDR
// sSlow := false ;
2776: LD_ADDR_EXP 28
2780: PUSH
2781: LD_INT 0
2783: ST_TO_ADDR
// sLack := false ;
2784: LD_ADDR_EXP 29
2788: PUSH
2789: LD_INT 0
2791: ST_TO_ADDR
// sTank := false ;
2792: LD_ADDR_EXP 31
2796: PUSH
2797: LD_INT 0
2799: ST_TO_ADDR
// sRemote := false ;
2800: LD_ADDR_EXP 32
2804: PUSH
2805: LD_INT 0
2807: ST_TO_ADDR
// sPowell := false ;
2808: LD_ADDR_EXP 33
2812: PUSH
2813: LD_INT 0
2815: ST_TO_ADDR
// sTeleport := false ;
2816: LD_ADDR_EXP 36
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// sOilTower := false ;
2824: LD_ADDR_EXP 38
2828: PUSH
2829: LD_INT 0
2831: ST_TO_ADDR
// sShovel := false ;
2832: LD_ADDR_EXP 39
2836: PUSH
2837: LD_INT 0
2839: ST_TO_ADDR
// sSheik := false ;
2840: LD_ADDR_EXP 40
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// sEarthquake := false ;
2848: LD_ADDR_EXP 42
2852: PUSH
2853: LD_INT 0
2855: ST_TO_ADDR
// sAI := false ;
2856: LD_ADDR_EXP 43
2860: PUSH
2861: LD_INT 0
2863: ST_TO_ADDR
// sCargo := false ;
2864: LD_ADDR_EXP 46
2868: PUSH
2869: LD_INT 0
2871: ST_TO_ADDR
// sDLaser := false ;
2872: LD_ADDR_EXP 47
2876: PUSH
2877: LD_INT 0
2879: ST_TO_ADDR
// sExchange := false ;
2880: LD_ADDR_EXP 48
2884: PUSH
2885: LD_INT 0
2887: ST_TO_ADDR
// sFac := false ;
2888: LD_ADDR_EXP 49
2892: PUSH
2893: LD_INT 0
2895: ST_TO_ADDR
// sPower := false ;
2896: LD_ADDR_EXP 50
2900: PUSH
2901: LD_INT 0
2903: ST_TO_ADDR
// sRandom := false ;
2904: LD_ADDR_EXP 51
2908: PUSH
2909: LD_INT 0
2911: ST_TO_ADDR
// sShield := false ;
2912: LD_ADDR_EXP 52
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// sTime := false ;
2920: LD_ADDR_EXP 53
2924: PUSH
2925: LD_INT 0
2927: ST_TO_ADDR
// sTools := false ;
2928: LD_ADDR_EXP 54
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// sSold := false ;
2936: LD_ADDR_EXP 19
2940: PUSH
2941: LD_INT 0
2943: ST_TO_ADDR
// sDiff := false ;
2944: LD_ADDR_EXP 20
2948: PUSH
2949: LD_INT 0
2951: ST_TO_ADDR
// sFog := false ;
2952: LD_ADDR_EXP 23
2956: PUSH
2957: LD_INT 0
2959: ST_TO_ADDR
// sReset := false ;
2960: LD_ADDR_EXP 24
2964: PUSH
2965: LD_INT 0
2967: ST_TO_ADDR
// sSun := false ;
2968: LD_ADDR_EXP 25
2972: PUSH
2973: LD_INT 0
2975: ST_TO_ADDR
// sTiger := false ;
2976: LD_ADDR_EXP 21
2980: PUSH
2981: LD_INT 0
2983: ST_TO_ADDR
// sBomb := false ;
2984: LD_ADDR_EXP 22
2988: PUSH
2989: LD_INT 0
2991: ST_TO_ADDR
// sWound := false ;
2992: LD_ADDR_EXP 30
2996: PUSH
2997: LD_INT 0
2999: ST_TO_ADDR
// sBetray := false ;
3000: LD_ADDR_EXP 34
3004: PUSH
3005: LD_INT 0
3007: ST_TO_ADDR
// sContamin := false ;
3008: LD_ADDR_EXP 35
3012: PUSH
3013: LD_INT 0
3015: ST_TO_ADDR
// sOil := false ;
3016: LD_ADDR_EXP 37
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// sStu := false ;
3024: LD_ADDR_EXP 41
3028: PUSH
3029: LD_INT 0
3031: ST_TO_ADDR
// sBazooka := false ;
3032: LD_ADDR_EXP 44
3036: PUSH
3037: LD_INT 0
3039: ST_TO_ADDR
// sMortar := false ;
3040: LD_ADDR_EXP 45
3044: PUSH
3045: LD_INT 0
3047: ST_TO_ADDR
// sRanger := false ;
3048: LD_ADDR_EXP 55
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// sComputer := false ;
3056: LD_ADDR_EXP 56
3060: PUSH
3061: LD_INT 0
3063: ST_TO_ADDR
// s30 := false ;
3064: LD_ADDR_EXP 57
3068: PUSH
3069: LD_INT 0
3071: ST_TO_ADDR
// s60 := false ;
3072: LD_ADDR_EXP 58
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// end ;
3080: LD_VAR 0 1
3084: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
// result := [ ] ;
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: EMPTY
3100: ST_TO_ADDR
// if campaign_id = 1 then
3101: LD_OWVAR 69
3105: PUSH
3106: LD_INT 1
3108: EQUAL
3109: IFFALSE 6275
// begin case mission_number of 1 :
3111: LD_OWVAR 70
3115: PUSH
3116: LD_INT 1
3118: DOUBLE
3119: EQUAL
3120: IFTRUE 3124
3122: GO 3200
3124: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3125: LD_ADDR_VAR 0 2
3129: PUSH
3130: LD_INT 2
3132: PUSH
3133: LD_INT 4
3135: PUSH
3136: LD_INT 11
3138: PUSH
3139: LD_INT 12
3141: PUSH
3142: LD_INT 15
3144: PUSH
3145: LD_INT 16
3147: PUSH
3148: LD_INT 22
3150: PUSH
3151: LD_INT 23
3153: PUSH
3154: LD_INT 26
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: PUSH
3168: LD_INT 101
3170: PUSH
3171: LD_INT 102
3173: PUSH
3174: LD_INT 106
3176: PUSH
3177: LD_INT 116
3179: PUSH
3180: LD_INT 117
3182: PUSH
3183: LD_INT 118
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: ST_TO_ADDR
3198: GO 6273
3200: LD_INT 2
3202: DOUBLE
3203: EQUAL
3204: IFTRUE 3208
3206: GO 3292
3208: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3209: LD_ADDR_VAR 0 2
3213: PUSH
3214: LD_INT 2
3216: PUSH
3217: LD_INT 4
3219: PUSH
3220: LD_INT 11
3222: PUSH
3223: LD_INT 12
3225: PUSH
3226: LD_INT 15
3228: PUSH
3229: LD_INT 16
3231: PUSH
3232: LD_INT 22
3234: PUSH
3235: LD_INT 23
3237: PUSH
3238: LD_INT 26
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: PUSH
3252: LD_INT 101
3254: PUSH
3255: LD_INT 102
3257: PUSH
3258: LD_INT 105
3260: PUSH
3261: LD_INT 106
3263: PUSH
3264: LD_INT 108
3266: PUSH
3267: LD_INT 116
3269: PUSH
3270: LD_INT 117
3272: PUSH
3273: LD_INT 118
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: ST_TO_ADDR
3290: GO 6273
3292: LD_INT 3
3294: DOUBLE
3295: EQUAL
3296: IFTRUE 3300
3298: GO 3388
3300: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3301: LD_ADDR_VAR 0 2
3305: PUSH
3306: LD_INT 2
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: LD_INT 5
3314: PUSH
3315: LD_INT 11
3317: PUSH
3318: LD_INT 12
3320: PUSH
3321: LD_INT 15
3323: PUSH
3324: LD_INT 16
3326: PUSH
3327: LD_INT 22
3329: PUSH
3330: LD_INT 26
3332: PUSH
3333: LD_INT 36
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 101
3350: PUSH
3351: LD_INT 102
3353: PUSH
3354: LD_INT 105
3356: PUSH
3357: LD_INT 106
3359: PUSH
3360: LD_INT 108
3362: PUSH
3363: LD_INT 116
3365: PUSH
3366: LD_INT 117
3368: PUSH
3369: LD_INT 118
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: ST_TO_ADDR
3386: GO 6273
3388: LD_INT 4
3390: DOUBLE
3391: EQUAL
3392: IFTRUE 3396
3394: GO 3492
3396: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3397: LD_ADDR_VAR 0 2
3401: PUSH
3402: LD_INT 2
3404: PUSH
3405: LD_INT 4
3407: PUSH
3408: LD_INT 5
3410: PUSH
3411: LD_INT 8
3413: PUSH
3414: LD_INT 11
3416: PUSH
3417: LD_INT 12
3419: PUSH
3420: LD_INT 15
3422: PUSH
3423: LD_INT 16
3425: PUSH
3426: LD_INT 22
3428: PUSH
3429: LD_INT 23
3431: PUSH
3432: LD_INT 26
3434: PUSH
3435: LD_INT 36
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: PUSH
3452: LD_INT 101
3454: PUSH
3455: LD_INT 102
3457: PUSH
3458: LD_INT 105
3460: PUSH
3461: LD_INT 106
3463: PUSH
3464: LD_INT 108
3466: PUSH
3467: LD_INT 116
3469: PUSH
3470: LD_INT 117
3472: PUSH
3473: LD_INT 118
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: ST_TO_ADDR
3490: GO 6273
3492: LD_INT 5
3494: DOUBLE
3495: EQUAL
3496: IFTRUE 3500
3498: GO 3612
3500: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3501: LD_ADDR_VAR 0 2
3505: PUSH
3506: LD_INT 2
3508: PUSH
3509: LD_INT 4
3511: PUSH
3512: LD_INT 5
3514: PUSH
3515: LD_INT 6
3517: PUSH
3518: LD_INT 8
3520: PUSH
3521: LD_INT 11
3523: PUSH
3524: LD_INT 12
3526: PUSH
3527: LD_INT 15
3529: PUSH
3530: LD_INT 16
3532: PUSH
3533: LD_INT 22
3535: PUSH
3536: LD_INT 23
3538: PUSH
3539: LD_INT 25
3541: PUSH
3542: LD_INT 26
3544: PUSH
3545: LD_INT 36
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_INT 101
3566: PUSH
3567: LD_INT 102
3569: PUSH
3570: LD_INT 105
3572: PUSH
3573: LD_INT 106
3575: PUSH
3576: LD_INT 108
3578: PUSH
3579: LD_INT 109
3581: PUSH
3582: LD_INT 112
3584: PUSH
3585: LD_INT 116
3587: PUSH
3588: LD_INT 117
3590: PUSH
3591: LD_INT 118
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: ST_TO_ADDR
3610: GO 6273
3612: LD_INT 6
3614: DOUBLE
3615: EQUAL
3616: IFTRUE 3620
3618: GO 3752
3620: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 4
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: LD_INT 6
3637: PUSH
3638: LD_INT 8
3640: PUSH
3641: LD_INT 11
3643: PUSH
3644: LD_INT 12
3646: PUSH
3647: LD_INT 15
3649: PUSH
3650: LD_INT 16
3652: PUSH
3653: LD_INT 20
3655: PUSH
3656: LD_INT 21
3658: PUSH
3659: LD_INT 22
3661: PUSH
3662: LD_INT 23
3664: PUSH
3665: LD_INT 25
3667: PUSH
3668: LD_INT 26
3670: PUSH
3671: LD_INT 30
3673: PUSH
3674: LD_INT 31
3676: PUSH
3677: LD_INT 32
3679: PUSH
3680: LD_INT 36
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: PUSH
3704: LD_INT 101
3706: PUSH
3707: LD_INT 102
3709: PUSH
3710: LD_INT 105
3712: PUSH
3713: LD_INT 106
3715: PUSH
3716: LD_INT 108
3718: PUSH
3719: LD_INT 109
3721: PUSH
3722: LD_INT 112
3724: PUSH
3725: LD_INT 116
3727: PUSH
3728: LD_INT 117
3730: PUSH
3731: LD_INT 118
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: ST_TO_ADDR
3750: GO 6273
3752: LD_INT 7
3754: DOUBLE
3755: EQUAL
3756: IFTRUE 3760
3758: GO 3872
3760: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: LD_INT 2
3768: PUSH
3769: LD_INT 4
3771: PUSH
3772: LD_INT 5
3774: PUSH
3775: LD_INT 7
3777: PUSH
3778: LD_INT 11
3780: PUSH
3781: LD_INT 12
3783: PUSH
3784: LD_INT 15
3786: PUSH
3787: LD_INT 16
3789: PUSH
3790: LD_INT 20
3792: PUSH
3793: LD_INT 21
3795: PUSH
3796: LD_INT 22
3798: PUSH
3799: LD_INT 23
3801: PUSH
3802: LD_INT 25
3804: PUSH
3805: LD_INT 26
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 101
3826: PUSH
3827: LD_INT 102
3829: PUSH
3830: LD_INT 103
3832: PUSH
3833: LD_INT 105
3835: PUSH
3836: LD_INT 106
3838: PUSH
3839: LD_INT 108
3841: PUSH
3842: LD_INT 112
3844: PUSH
3845: LD_INT 116
3847: PUSH
3848: LD_INT 117
3850: PUSH
3851: LD_INT 118
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: ST_TO_ADDR
3870: GO 6273
3872: LD_INT 8
3874: DOUBLE
3875: EQUAL
3876: IFTRUE 3880
3878: GO 4020
3880: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
3881: LD_ADDR_VAR 0 2
3885: PUSH
3886: LD_INT 2
3888: PUSH
3889: LD_INT 4
3891: PUSH
3892: LD_INT 5
3894: PUSH
3895: LD_INT 6
3897: PUSH
3898: LD_INT 7
3900: PUSH
3901: LD_INT 8
3903: PUSH
3904: LD_INT 11
3906: PUSH
3907: LD_INT 12
3909: PUSH
3910: LD_INT 15
3912: PUSH
3913: LD_INT 16
3915: PUSH
3916: LD_INT 20
3918: PUSH
3919: LD_INT 21
3921: PUSH
3922: LD_INT 22
3924: PUSH
3925: LD_INT 23
3927: PUSH
3928: LD_INT 25
3930: PUSH
3931: LD_INT 26
3933: PUSH
3934: LD_INT 30
3936: PUSH
3937: LD_INT 31
3939: PUSH
3940: LD_INT 32
3942: PUSH
3943: LD_INT 36
3945: PUSH
3946: EMPTY
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 101
3970: PUSH
3971: LD_INT 102
3973: PUSH
3974: LD_INT 103
3976: PUSH
3977: LD_INT 105
3979: PUSH
3980: LD_INT 106
3982: PUSH
3983: LD_INT 108
3985: PUSH
3986: LD_INT 109
3988: PUSH
3989: LD_INT 112
3991: PUSH
3992: LD_INT 116
3994: PUSH
3995: LD_INT 117
3997: PUSH
3998: LD_INT 118
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: PUSH
4014: EMPTY
4015: LIST
4016: LIST
4017: ST_TO_ADDR
4018: GO 6273
4020: LD_INT 9
4022: DOUBLE
4023: EQUAL
4024: IFTRUE 4028
4026: GO 4176
4028: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4029: LD_ADDR_VAR 0 2
4033: PUSH
4034: LD_INT 2
4036: PUSH
4037: LD_INT 4
4039: PUSH
4040: LD_INT 5
4042: PUSH
4043: LD_INT 6
4045: PUSH
4046: LD_INT 7
4048: PUSH
4049: LD_INT 8
4051: PUSH
4052: LD_INT 11
4054: PUSH
4055: LD_INT 12
4057: PUSH
4058: LD_INT 15
4060: PUSH
4061: LD_INT 16
4063: PUSH
4064: LD_INT 20
4066: PUSH
4067: LD_INT 21
4069: PUSH
4070: LD_INT 22
4072: PUSH
4073: LD_INT 23
4075: PUSH
4076: LD_INT 25
4078: PUSH
4079: LD_INT 26
4081: PUSH
4082: LD_INT 28
4084: PUSH
4085: LD_INT 30
4087: PUSH
4088: LD_INT 31
4090: PUSH
4091: LD_INT 32
4093: PUSH
4094: LD_INT 36
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: PUSH
4120: LD_INT 101
4122: PUSH
4123: LD_INT 102
4125: PUSH
4126: LD_INT 103
4128: PUSH
4129: LD_INT 105
4131: PUSH
4132: LD_INT 106
4134: PUSH
4135: LD_INT 108
4137: PUSH
4138: LD_INT 109
4140: PUSH
4141: LD_INT 112
4143: PUSH
4144: LD_INT 114
4146: PUSH
4147: LD_INT 116
4149: PUSH
4150: LD_INT 117
4152: PUSH
4153: LD_INT 118
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: ST_TO_ADDR
4174: GO 6273
4176: LD_INT 10
4178: DOUBLE
4179: EQUAL
4180: IFTRUE 4184
4182: GO 4380
4184: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4185: LD_ADDR_VAR 0 2
4189: PUSH
4190: LD_INT 2
4192: PUSH
4193: LD_INT 4
4195: PUSH
4196: LD_INT 5
4198: PUSH
4199: LD_INT 6
4201: PUSH
4202: LD_INT 7
4204: PUSH
4205: LD_INT 8
4207: PUSH
4208: LD_INT 9
4210: PUSH
4211: LD_INT 10
4213: PUSH
4214: LD_INT 11
4216: PUSH
4217: LD_INT 12
4219: PUSH
4220: LD_INT 13
4222: PUSH
4223: LD_INT 14
4225: PUSH
4226: LD_INT 15
4228: PUSH
4229: LD_INT 16
4231: PUSH
4232: LD_INT 17
4234: PUSH
4235: LD_INT 18
4237: PUSH
4238: LD_INT 19
4240: PUSH
4241: LD_INT 20
4243: PUSH
4244: LD_INT 21
4246: PUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 23
4252: PUSH
4253: LD_INT 24
4255: PUSH
4256: LD_INT 25
4258: PUSH
4259: LD_INT 26
4261: PUSH
4262: LD_INT 28
4264: PUSH
4265: LD_INT 30
4267: PUSH
4268: LD_INT 31
4270: PUSH
4271: LD_INT 32
4273: PUSH
4274: LD_INT 36
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 101
4310: PUSH
4311: LD_INT 102
4313: PUSH
4314: LD_INT 103
4316: PUSH
4317: LD_INT 104
4319: PUSH
4320: LD_INT 105
4322: PUSH
4323: LD_INT 106
4325: PUSH
4326: LD_INT 107
4328: PUSH
4329: LD_INT 108
4331: PUSH
4332: LD_INT 109
4334: PUSH
4335: LD_INT 110
4337: PUSH
4338: LD_INT 111
4340: PUSH
4341: LD_INT 112
4343: PUSH
4344: LD_INT 114
4346: PUSH
4347: LD_INT 116
4349: PUSH
4350: LD_INT 117
4352: PUSH
4353: LD_INT 118
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: ST_TO_ADDR
4378: GO 6273
4380: LD_INT 11
4382: DOUBLE
4383: EQUAL
4384: IFTRUE 4388
4386: GO 4592
4388: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4389: LD_ADDR_VAR 0 2
4393: PUSH
4394: LD_INT 2
4396: PUSH
4397: LD_INT 3
4399: PUSH
4400: LD_INT 4
4402: PUSH
4403: LD_INT 5
4405: PUSH
4406: LD_INT 6
4408: PUSH
4409: LD_INT 7
4411: PUSH
4412: LD_INT 8
4414: PUSH
4415: LD_INT 9
4417: PUSH
4418: LD_INT 10
4420: PUSH
4421: LD_INT 11
4423: PUSH
4424: LD_INT 12
4426: PUSH
4427: LD_INT 13
4429: PUSH
4430: LD_INT 14
4432: PUSH
4433: LD_INT 15
4435: PUSH
4436: LD_INT 16
4438: PUSH
4439: LD_INT 17
4441: PUSH
4442: LD_INT 18
4444: PUSH
4445: LD_INT 19
4447: PUSH
4448: LD_INT 20
4450: PUSH
4451: LD_INT 21
4453: PUSH
4454: LD_INT 22
4456: PUSH
4457: LD_INT 23
4459: PUSH
4460: LD_INT 24
4462: PUSH
4463: LD_INT 25
4465: PUSH
4466: LD_INT 26
4468: PUSH
4469: LD_INT 28
4471: PUSH
4472: LD_INT 30
4474: PUSH
4475: LD_INT 31
4477: PUSH
4478: LD_INT 32
4480: PUSH
4481: LD_INT 34
4483: PUSH
4484: LD_INT 36
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: LD_INT 101
4522: PUSH
4523: LD_INT 102
4525: PUSH
4526: LD_INT 103
4528: PUSH
4529: LD_INT 104
4531: PUSH
4532: LD_INT 105
4534: PUSH
4535: LD_INT 106
4537: PUSH
4538: LD_INT 107
4540: PUSH
4541: LD_INT 108
4543: PUSH
4544: LD_INT 109
4546: PUSH
4547: LD_INT 110
4549: PUSH
4550: LD_INT 111
4552: PUSH
4553: LD_INT 112
4555: PUSH
4556: LD_INT 114
4558: PUSH
4559: LD_INT 116
4561: PUSH
4562: LD_INT 117
4564: PUSH
4565: LD_INT 118
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: ST_TO_ADDR
4590: GO 6273
4592: LD_INT 12
4594: DOUBLE
4595: EQUAL
4596: IFTRUE 4600
4598: GO 4820
4600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4601: LD_ADDR_VAR 0 2
4605: PUSH
4606: LD_INT 1
4608: PUSH
4609: LD_INT 2
4611: PUSH
4612: LD_INT 3
4614: PUSH
4615: LD_INT 4
4617: PUSH
4618: LD_INT 5
4620: PUSH
4621: LD_INT 6
4623: PUSH
4624: LD_INT 7
4626: PUSH
4627: LD_INT 8
4629: PUSH
4630: LD_INT 9
4632: PUSH
4633: LD_INT 10
4635: PUSH
4636: LD_INT 11
4638: PUSH
4639: LD_INT 12
4641: PUSH
4642: LD_INT 13
4644: PUSH
4645: LD_INT 14
4647: PUSH
4648: LD_INT 15
4650: PUSH
4651: LD_INT 16
4653: PUSH
4654: LD_INT 17
4656: PUSH
4657: LD_INT 18
4659: PUSH
4660: LD_INT 19
4662: PUSH
4663: LD_INT 20
4665: PUSH
4666: LD_INT 21
4668: PUSH
4669: LD_INT 22
4671: PUSH
4672: LD_INT 23
4674: PUSH
4675: LD_INT 24
4677: PUSH
4678: LD_INT 25
4680: PUSH
4681: LD_INT 26
4683: PUSH
4684: LD_INT 27
4686: PUSH
4687: LD_INT 28
4689: PUSH
4690: LD_INT 30
4692: PUSH
4693: LD_INT 31
4695: PUSH
4696: LD_INT 32
4698: PUSH
4699: LD_INT 33
4701: PUSH
4702: LD_INT 34
4704: PUSH
4705: LD_INT 36
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: PUSH
4744: LD_INT 101
4746: PUSH
4747: LD_INT 102
4749: PUSH
4750: LD_INT 103
4752: PUSH
4753: LD_INT 104
4755: PUSH
4756: LD_INT 105
4758: PUSH
4759: LD_INT 106
4761: PUSH
4762: LD_INT 107
4764: PUSH
4765: LD_INT 108
4767: PUSH
4768: LD_INT 109
4770: PUSH
4771: LD_INT 110
4773: PUSH
4774: LD_INT 111
4776: PUSH
4777: LD_INT 112
4779: PUSH
4780: LD_INT 113
4782: PUSH
4783: LD_INT 114
4785: PUSH
4786: LD_INT 116
4788: PUSH
4789: LD_INT 117
4791: PUSH
4792: LD_INT 118
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: ST_TO_ADDR
4818: GO 6273
4820: LD_INT 13
4822: DOUBLE
4823: EQUAL
4824: IFTRUE 4828
4826: GO 5036
4828: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4829: LD_ADDR_VAR 0 2
4833: PUSH
4834: LD_INT 1
4836: PUSH
4837: LD_INT 2
4839: PUSH
4840: LD_INT 3
4842: PUSH
4843: LD_INT 4
4845: PUSH
4846: LD_INT 5
4848: PUSH
4849: LD_INT 8
4851: PUSH
4852: LD_INT 9
4854: PUSH
4855: LD_INT 10
4857: PUSH
4858: LD_INT 11
4860: PUSH
4861: LD_INT 12
4863: PUSH
4864: LD_INT 14
4866: PUSH
4867: LD_INT 15
4869: PUSH
4870: LD_INT 16
4872: PUSH
4873: LD_INT 17
4875: PUSH
4876: LD_INT 18
4878: PUSH
4879: LD_INT 19
4881: PUSH
4882: LD_INT 20
4884: PUSH
4885: LD_INT 21
4887: PUSH
4888: LD_INT 22
4890: PUSH
4891: LD_INT 23
4893: PUSH
4894: LD_INT 24
4896: PUSH
4897: LD_INT 25
4899: PUSH
4900: LD_INT 26
4902: PUSH
4903: LD_INT 27
4905: PUSH
4906: LD_INT 28
4908: PUSH
4909: LD_INT 30
4911: PUSH
4912: LD_INT 31
4914: PUSH
4915: LD_INT 32
4917: PUSH
4918: LD_INT 33
4920: PUSH
4921: LD_INT 34
4923: PUSH
4924: LD_INT 36
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: PUSH
4960: LD_INT 101
4962: PUSH
4963: LD_INT 102
4965: PUSH
4966: LD_INT 103
4968: PUSH
4969: LD_INT 104
4971: PUSH
4972: LD_INT 105
4974: PUSH
4975: LD_INT 106
4977: PUSH
4978: LD_INT 107
4980: PUSH
4981: LD_INT 108
4983: PUSH
4984: LD_INT 109
4986: PUSH
4987: LD_INT 110
4989: PUSH
4990: LD_INT 111
4992: PUSH
4993: LD_INT 112
4995: PUSH
4996: LD_INT 113
4998: PUSH
4999: LD_INT 114
5001: PUSH
5002: LD_INT 116
5004: PUSH
5005: LD_INT 117
5007: PUSH
5008: LD_INT 118
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: ST_TO_ADDR
5034: GO 6273
5036: LD_INT 14
5038: DOUBLE
5039: EQUAL
5040: IFTRUE 5044
5042: GO 5268
5044: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5045: LD_ADDR_VAR 0 2
5049: PUSH
5050: LD_INT 1
5052: PUSH
5053: LD_INT 2
5055: PUSH
5056: LD_INT 3
5058: PUSH
5059: LD_INT 4
5061: PUSH
5062: LD_INT 5
5064: PUSH
5065: LD_INT 6
5067: PUSH
5068: LD_INT 7
5070: PUSH
5071: LD_INT 8
5073: PUSH
5074: LD_INT 9
5076: PUSH
5077: LD_INT 10
5079: PUSH
5080: LD_INT 11
5082: PUSH
5083: LD_INT 12
5085: PUSH
5086: LD_INT 13
5088: PUSH
5089: LD_INT 14
5091: PUSH
5092: LD_INT 15
5094: PUSH
5095: LD_INT 16
5097: PUSH
5098: LD_INT 17
5100: PUSH
5101: LD_INT 18
5103: PUSH
5104: LD_INT 19
5106: PUSH
5107: LD_INT 20
5109: PUSH
5110: LD_INT 21
5112: PUSH
5113: LD_INT 22
5115: PUSH
5116: LD_INT 23
5118: PUSH
5119: LD_INT 24
5121: PUSH
5122: LD_INT 25
5124: PUSH
5125: LD_INT 26
5127: PUSH
5128: LD_INT 27
5130: PUSH
5131: LD_INT 28
5133: PUSH
5134: LD_INT 29
5136: PUSH
5137: LD_INT 30
5139: PUSH
5140: LD_INT 31
5142: PUSH
5143: LD_INT 32
5145: PUSH
5146: LD_INT 33
5148: PUSH
5149: LD_INT 34
5151: PUSH
5152: LD_INT 36
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 101
5194: PUSH
5195: LD_INT 102
5197: PUSH
5198: LD_INT 103
5200: PUSH
5201: LD_INT 104
5203: PUSH
5204: LD_INT 105
5206: PUSH
5207: LD_INT 106
5209: PUSH
5210: LD_INT 107
5212: PUSH
5213: LD_INT 108
5215: PUSH
5216: LD_INT 109
5218: PUSH
5219: LD_INT 110
5221: PUSH
5222: LD_INT 111
5224: PUSH
5225: LD_INT 112
5227: PUSH
5228: LD_INT 113
5230: PUSH
5231: LD_INT 114
5233: PUSH
5234: LD_INT 116
5236: PUSH
5237: LD_INT 117
5239: PUSH
5240: LD_INT 118
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: ST_TO_ADDR
5266: GO 6273
5268: LD_INT 15
5270: DOUBLE
5271: EQUAL
5272: IFTRUE 5276
5274: GO 5500
5276: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 2
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: LD_INT 4
5293: PUSH
5294: LD_INT 5
5296: PUSH
5297: LD_INT 6
5299: PUSH
5300: LD_INT 7
5302: PUSH
5303: LD_INT 8
5305: PUSH
5306: LD_INT 9
5308: PUSH
5309: LD_INT 10
5311: PUSH
5312: LD_INT 11
5314: PUSH
5315: LD_INT 12
5317: PUSH
5318: LD_INT 13
5320: PUSH
5321: LD_INT 14
5323: PUSH
5324: LD_INT 15
5326: PUSH
5327: LD_INT 16
5329: PUSH
5330: LD_INT 17
5332: PUSH
5333: LD_INT 18
5335: PUSH
5336: LD_INT 19
5338: PUSH
5339: LD_INT 20
5341: PUSH
5342: LD_INT 21
5344: PUSH
5345: LD_INT 22
5347: PUSH
5348: LD_INT 23
5350: PUSH
5351: LD_INT 24
5353: PUSH
5354: LD_INT 25
5356: PUSH
5357: LD_INT 26
5359: PUSH
5360: LD_INT 27
5362: PUSH
5363: LD_INT 28
5365: PUSH
5366: LD_INT 29
5368: PUSH
5369: LD_INT 30
5371: PUSH
5372: LD_INT 31
5374: PUSH
5375: LD_INT 32
5377: PUSH
5378: LD_INT 33
5380: PUSH
5381: LD_INT 34
5383: PUSH
5384: LD_INT 36
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: LD_INT 101
5426: PUSH
5427: LD_INT 102
5429: PUSH
5430: LD_INT 103
5432: PUSH
5433: LD_INT 104
5435: PUSH
5436: LD_INT 105
5438: PUSH
5439: LD_INT 106
5441: PUSH
5442: LD_INT 107
5444: PUSH
5445: LD_INT 108
5447: PUSH
5448: LD_INT 109
5450: PUSH
5451: LD_INT 110
5453: PUSH
5454: LD_INT 111
5456: PUSH
5457: LD_INT 112
5459: PUSH
5460: LD_INT 113
5462: PUSH
5463: LD_INT 114
5465: PUSH
5466: LD_INT 116
5468: PUSH
5469: LD_INT 117
5471: PUSH
5472: LD_INT 118
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: ST_TO_ADDR
5498: GO 6273
5500: LD_INT 16
5502: DOUBLE
5503: EQUAL
5504: IFTRUE 5508
5506: GO 5644
5508: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5509: LD_ADDR_VAR 0 2
5513: PUSH
5514: LD_INT 2
5516: PUSH
5517: LD_INT 4
5519: PUSH
5520: LD_INT 5
5522: PUSH
5523: LD_INT 7
5525: PUSH
5526: LD_INT 11
5528: PUSH
5529: LD_INT 12
5531: PUSH
5532: LD_INT 15
5534: PUSH
5535: LD_INT 16
5537: PUSH
5538: LD_INT 20
5540: PUSH
5541: LD_INT 21
5543: PUSH
5544: LD_INT 22
5546: PUSH
5547: LD_INT 23
5549: PUSH
5550: LD_INT 25
5552: PUSH
5553: LD_INT 26
5555: PUSH
5556: LD_INT 30
5558: PUSH
5559: LD_INT 31
5561: PUSH
5562: LD_INT 32
5564: PUSH
5565: LD_INT 33
5567: PUSH
5568: LD_INT 34
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: PUSH
5592: LD_INT 101
5594: PUSH
5595: LD_INT 102
5597: PUSH
5598: LD_INT 103
5600: PUSH
5601: LD_INT 106
5603: PUSH
5604: LD_INT 108
5606: PUSH
5607: LD_INT 112
5609: PUSH
5610: LD_INT 113
5612: PUSH
5613: LD_INT 114
5615: PUSH
5616: LD_INT 116
5618: PUSH
5619: LD_INT 117
5621: PUSH
5622: LD_INT 118
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: ST_TO_ADDR
5642: GO 6273
5644: LD_INT 17
5646: DOUBLE
5647: EQUAL
5648: IFTRUE 5652
5650: GO 5876
5652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5653: LD_ADDR_VAR 0 2
5657: PUSH
5658: LD_INT 1
5660: PUSH
5661: LD_INT 2
5663: PUSH
5664: LD_INT 3
5666: PUSH
5667: LD_INT 4
5669: PUSH
5670: LD_INT 5
5672: PUSH
5673: LD_INT 6
5675: PUSH
5676: LD_INT 7
5678: PUSH
5679: LD_INT 8
5681: PUSH
5682: LD_INT 9
5684: PUSH
5685: LD_INT 10
5687: PUSH
5688: LD_INT 11
5690: PUSH
5691: LD_INT 12
5693: PUSH
5694: LD_INT 13
5696: PUSH
5697: LD_INT 14
5699: PUSH
5700: LD_INT 15
5702: PUSH
5703: LD_INT 16
5705: PUSH
5706: LD_INT 17
5708: PUSH
5709: LD_INT 18
5711: PUSH
5712: LD_INT 19
5714: PUSH
5715: LD_INT 20
5717: PUSH
5718: LD_INT 21
5720: PUSH
5721: LD_INT 22
5723: PUSH
5724: LD_INT 23
5726: PUSH
5727: LD_INT 24
5729: PUSH
5730: LD_INT 25
5732: PUSH
5733: LD_INT 26
5735: PUSH
5736: LD_INT 27
5738: PUSH
5739: LD_INT 28
5741: PUSH
5742: LD_INT 29
5744: PUSH
5745: LD_INT 30
5747: PUSH
5748: LD_INT 31
5750: PUSH
5751: LD_INT 32
5753: PUSH
5754: LD_INT 33
5756: PUSH
5757: LD_INT 34
5759: PUSH
5760: LD_INT 36
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: LD_INT 101
5802: PUSH
5803: LD_INT 102
5805: PUSH
5806: LD_INT 103
5808: PUSH
5809: LD_INT 104
5811: PUSH
5812: LD_INT 105
5814: PUSH
5815: LD_INT 106
5817: PUSH
5818: LD_INT 107
5820: PUSH
5821: LD_INT 108
5823: PUSH
5824: LD_INT 109
5826: PUSH
5827: LD_INT 110
5829: PUSH
5830: LD_INT 111
5832: PUSH
5833: LD_INT 112
5835: PUSH
5836: LD_INT 113
5838: PUSH
5839: LD_INT 114
5841: PUSH
5842: LD_INT 116
5844: PUSH
5845: LD_INT 117
5847: PUSH
5848: LD_INT 118
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: ST_TO_ADDR
5874: GO 6273
5876: LD_INT 18
5878: DOUBLE
5879: EQUAL
5880: IFTRUE 5884
5882: GO 6032
5884: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: LD_INT 2
5892: PUSH
5893: LD_INT 4
5895: PUSH
5896: LD_INT 5
5898: PUSH
5899: LD_INT 7
5901: PUSH
5902: LD_INT 11
5904: PUSH
5905: LD_INT 12
5907: PUSH
5908: LD_INT 15
5910: PUSH
5911: LD_INT 16
5913: PUSH
5914: LD_INT 20
5916: PUSH
5917: LD_INT 21
5919: PUSH
5920: LD_INT 22
5922: PUSH
5923: LD_INT 23
5925: PUSH
5926: LD_INT 25
5928: PUSH
5929: LD_INT 26
5931: PUSH
5932: LD_INT 30
5934: PUSH
5935: LD_INT 31
5937: PUSH
5938: LD_INT 32
5940: PUSH
5941: LD_INT 33
5943: PUSH
5944: LD_INT 34
5946: PUSH
5947: LD_INT 35
5949: PUSH
5950: LD_INT 36
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: PUSH
5976: LD_INT 101
5978: PUSH
5979: LD_INT 102
5981: PUSH
5982: LD_INT 103
5984: PUSH
5985: LD_INT 106
5987: PUSH
5988: LD_INT 108
5990: PUSH
5991: LD_INT 112
5993: PUSH
5994: LD_INT 113
5996: PUSH
5997: LD_INT 114
5999: PUSH
6000: LD_INT 115
6002: PUSH
6003: LD_INT 116
6005: PUSH
6006: LD_INT 117
6008: PUSH
6009: LD_INT 118
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: ST_TO_ADDR
6030: GO 6273
6032: LD_INT 19
6034: DOUBLE
6035: EQUAL
6036: IFTRUE 6040
6038: GO 6272
6040: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6041: LD_ADDR_VAR 0 2
6045: PUSH
6046: LD_INT 1
6048: PUSH
6049: LD_INT 2
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 4
6057: PUSH
6058: LD_INT 5
6060: PUSH
6061: LD_INT 6
6063: PUSH
6064: LD_INT 7
6066: PUSH
6067: LD_INT 8
6069: PUSH
6070: LD_INT 9
6072: PUSH
6073: LD_INT 10
6075: PUSH
6076: LD_INT 11
6078: PUSH
6079: LD_INT 12
6081: PUSH
6082: LD_INT 13
6084: PUSH
6085: LD_INT 14
6087: PUSH
6088: LD_INT 15
6090: PUSH
6091: LD_INT 16
6093: PUSH
6094: LD_INT 17
6096: PUSH
6097: LD_INT 18
6099: PUSH
6100: LD_INT 19
6102: PUSH
6103: LD_INT 20
6105: PUSH
6106: LD_INT 21
6108: PUSH
6109: LD_INT 22
6111: PUSH
6112: LD_INT 23
6114: PUSH
6115: LD_INT 24
6117: PUSH
6118: LD_INT 25
6120: PUSH
6121: LD_INT 26
6123: PUSH
6124: LD_INT 27
6126: PUSH
6127: LD_INT 28
6129: PUSH
6130: LD_INT 29
6132: PUSH
6133: LD_INT 30
6135: PUSH
6136: LD_INT 31
6138: PUSH
6139: LD_INT 32
6141: PUSH
6142: LD_INT 33
6144: PUSH
6145: LD_INT 34
6147: PUSH
6148: LD_INT 35
6150: PUSH
6151: LD_INT 36
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 101
6194: PUSH
6195: LD_INT 102
6197: PUSH
6198: LD_INT 103
6200: PUSH
6201: LD_INT 104
6203: PUSH
6204: LD_INT 105
6206: PUSH
6207: LD_INT 106
6209: PUSH
6210: LD_INT 107
6212: PUSH
6213: LD_INT 108
6215: PUSH
6216: LD_INT 109
6218: PUSH
6219: LD_INT 110
6221: PUSH
6222: LD_INT 111
6224: PUSH
6225: LD_INT 112
6227: PUSH
6228: LD_INT 113
6230: PUSH
6231: LD_INT 114
6233: PUSH
6234: LD_INT 115
6236: PUSH
6237: LD_INT 116
6239: PUSH
6240: LD_INT 117
6242: PUSH
6243: LD_INT 118
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: ST_TO_ADDR
6270: GO 6273
6272: POP
// end else
6273: GO 6504
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6275: LD_ADDR_VAR 0 2
6279: PUSH
6280: LD_INT 1
6282: PUSH
6283: LD_INT 2
6285: PUSH
6286: LD_INT 3
6288: PUSH
6289: LD_INT 4
6291: PUSH
6292: LD_INT 5
6294: PUSH
6295: LD_INT 6
6297: PUSH
6298: LD_INT 7
6300: PUSH
6301: LD_INT 8
6303: PUSH
6304: LD_INT 9
6306: PUSH
6307: LD_INT 10
6309: PUSH
6310: LD_INT 11
6312: PUSH
6313: LD_INT 12
6315: PUSH
6316: LD_INT 13
6318: PUSH
6319: LD_INT 14
6321: PUSH
6322: LD_INT 15
6324: PUSH
6325: LD_INT 16
6327: PUSH
6328: LD_INT 17
6330: PUSH
6331: LD_INT 18
6333: PUSH
6334: LD_INT 19
6336: PUSH
6337: LD_INT 20
6339: PUSH
6340: LD_INT 21
6342: PUSH
6343: LD_INT 22
6345: PUSH
6346: LD_INT 23
6348: PUSH
6349: LD_INT 24
6351: PUSH
6352: LD_INT 25
6354: PUSH
6355: LD_INT 26
6357: PUSH
6358: LD_INT 27
6360: PUSH
6361: LD_INT 28
6363: PUSH
6364: LD_INT 29
6366: PUSH
6367: LD_INT 30
6369: PUSH
6370: LD_INT 31
6372: PUSH
6373: LD_INT 32
6375: PUSH
6376: LD_INT 33
6378: PUSH
6379: LD_INT 34
6381: PUSH
6382: LD_INT 35
6384: PUSH
6385: LD_INT 36
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 101
6428: PUSH
6429: LD_INT 102
6431: PUSH
6432: LD_INT 103
6434: PUSH
6435: LD_INT 104
6437: PUSH
6438: LD_INT 105
6440: PUSH
6441: LD_INT 106
6443: PUSH
6444: LD_INT 107
6446: PUSH
6447: LD_INT 108
6449: PUSH
6450: LD_INT 109
6452: PUSH
6453: LD_INT 110
6455: PUSH
6456: LD_INT 111
6458: PUSH
6459: LD_INT 112
6461: PUSH
6462: LD_INT 113
6464: PUSH
6465: LD_INT 114
6467: PUSH
6468: LD_INT 115
6470: PUSH
6471: LD_INT 116
6473: PUSH
6474: LD_INT 117
6476: PUSH
6477: LD_INT 118
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: ST_TO_ADDR
// if result then
6504: LD_VAR 0 2
6508: IFFALSE 7294
// begin normal :=  ;
6510: LD_ADDR_VAR 0 5
6514: PUSH
6515: LD_STRING 
6517: ST_TO_ADDR
// hardcore :=  ;
6518: LD_ADDR_VAR 0 6
6522: PUSH
6523: LD_STRING 
6525: ST_TO_ADDR
// active :=  ;
6526: LD_ADDR_VAR 0 7
6530: PUSH
6531: LD_STRING 
6533: ST_TO_ADDR
// for i = 1 to normalCounter do
6534: LD_ADDR_VAR 0 8
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_EXP 3
6548: PUSH
6549: FOR_TO
6550: IFFALSE 6651
// begin tmp := 0 ;
6552: LD_ADDR_VAR 0 3
6556: PUSH
6557: LD_STRING 0
6559: ST_TO_ADDR
// if result [ 1 ] then
6560: LD_VAR 0 2
6564: PUSH
6565: LD_INT 1
6567: ARRAY
6568: IFFALSE 6633
// if result [ 1 ] [ 1 ] = i then
6570: LD_VAR 0 2
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PUSH
6579: LD_INT 1
6581: ARRAY
6582: PUSH
6583: LD_VAR 0 8
6587: EQUAL
6588: IFFALSE 6633
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6590: LD_ADDR_VAR 0 2
6594: PUSH
6595: LD_VAR 0 2
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: LD_VAR 0 2
6607: PUSH
6608: LD_INT 1
6610: ARRAY
6611: PPUSH
6612: LD_INT 1
6614: PPUSH
6615: CALL_OW 3
6619: PPUSH
6620: CALL_OW 1
6624: ST_TO_ADDR
// tmp := 1 ;
6625: LD_ADDR_VAR 0 3
6629: PUSH
6630: LD_STRING 1
6632: ST_TO_ADDR
// end ; normal := normal & tmp ;
6633: LD_ADDR_VAR 0 5
6637: PUSH
6638: LD_VAR 0 5
6642: PUSH
6643: LD_VAR 0 3
6647: STR
6648: ST_TO_ADDR
// end ;
6649: GO 6549
6651: POP
6652: POP
// for i = 1 to hardcoreCounter do
6653: LD_ADDR_VAR 0 8
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_EXP 4
6667: PUSH
6668: FOR_TO
6669: IFFALSE 6774
// begin tmp := 0 ;
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: LD_STRING 0
6678: ST_TO_ADDR
// if result [ 2 ] then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_INT 2
6686: ARRAY
6687: IFFALSE 6756
// if result [ 2 ] [ 1 ] = 100 + i then
6689: LD_VAR 0 2
6693: PUSH
6694: LD_INT 2
6696: ARRAY
6697: PUSH
6698: LD_INT 1
6700: ARRAY
6701: PUSH
6702: LD_INT 100
6704: PUSH
6705: LD_VAR 0 8
6709: PLUS
6710: EQUAL
6711: IFFALSE 6756
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6713: LD_ADDR_VAR 0 2
6717: PUSH
6718: LD_VAR 0 2
6722: PPUSH
6723: LD_INT 2
6725: PPUSH
6726: LD_VAR 0 2
6730: PUSH
6731: LD_INT 2
6733: ARRAY
6734: PPUSH
6735: LD_INT 1
6737: PPUSH
6738: CALL_OW 3
6742: PPUSH
6743: CALL_OW 1
6747: ST_TO_ADDR
// tmp := 1 ;
6748: LD_ADDR_VAR 0 3
6752: PUSH
6753: LD_STRING 1
6755: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6756: LD_ADDR_VAR 0 6
6760: PUSH
6761: LD_VAR 0 6
6765: PUSH
6766: LD_VAR 0 3
6770: STR
6771: ST_TO_ADDR
// end ;
6772: GO 6668
6774: POP
6775: POP
// if isGameLoad then
6776: LD_VAR 0 1
6780: IFFALSE 7255
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6782: LD_ADDR_VAR 0 4
6786: PUSH
6787: LD_EXP 7
6791: PUSH
6792: LD_EXP 6
6796: PUSH
6797: LD_EXP 8
6801: PUSH
6802: LD_EXP 5
6806: PUSH
6807: LD_EXP 9
6811: PUSH
6812: LD_EXP 10
6816: PUSH
6817: LD_EXP 11
6821: PUSH
6822: LD_EXP 12
6826: PUSH
6827: LD_EXP 13
6831: PUSH
6832: LD_EXP 14
6836: PUSH
6837: LD_EXP 15
6841: PUSH
6842: LD_EXP 16
6846: PUSH
6847: LD_EXP 17
6851: PUSH
6852: LD_EXP 18
6856: PUSH
6857: LD_EXP 26
6861: PUSH
6862: LD_EXP 27
6866: PUSH
6867: LD_EXP 28
6871: PUSH
6872: LD_EXP 29
6876: PUSH
6877: LD_EXP 31
6881: PUSH
6882: LD_EXP 32
6886: PUSH
6887: LD_EXP 33
6891: PUSH
6892: LD_EXP 36
6896: PUSH
6897: LD_EXP 38
6901: PUSH
6902: LD_EXP 39
6906: PUSH
6907: LD_EXP 40
6911: PUSH
6912: LD_EXP 42
6916: PUSH
6917: LD_EXP 43
6921: PUSH
6922: LD_EXP 46
6926: PUSH
6927: LD_EXP 47
6931: PUSH
6932: LD_EXP 48
6936: PUSH
6937: LD_EXP 49
6941: PUSH
6942: LD_EXP 50
6946: PUSH
6947: LD_EXP 51
6951: PUSH
6952: LD_EXP 52
6956: PUSH
6957: LD_EXP 53
6961: PUSH
6962: LD_EXP 54
6966: PUSH
6967: LD_EXP 19
6971: PUSH
6972: LD_EXP 20
6976: PUSH
6977: LD_EXP 23
6981: PUSH
6982: LD_EXP 24
6986: PUSH
6987: LD_EXP 25
6991: PUSH
6992: LD_EXP 21
6996: PUSH
6997: LD_EXP 22
7001: PUSH
7002: LD_EXP 30
7006: PUSH
7007: LD_EXP 34
7011: PUSH
7012: LD_EXP 35
7016: PUSH
7017: LD_EXP 37
7021: PUSH
7022: LD_EXP 41
7026: PUSH
7027: LD_EXP 44
7031: PUSH
7032: LD_EXP 45
7036: PUSH
7037: LD_EXP 55
7041: PUSH
7042: LD_EXP 56
7046: PUSH
7047: LD_EXP 57
7051: PUSH
7052: LD_EXP 58
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: ST_TO_ADDR
// tmp :=  ;
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: LD_STRING 
7120: ST_TO_ADDR
// for i = 1 to normalCounter do
7121: LD_ADDR_VAR 0 8
7125: PUSH
7126: DOUBLE
7127: LD_INT 1
7129: DEC
7130: ST_TO_ADDR
7131: LD_EXP 3
7135: PUSH
7136: FOR_TO
7137: IFFALSE 7173
// begin if flags [ i ] then
7139: LD_VAR 0 4
7143: PUSH
7144: LD_VAR 0 8
7148: ARRAY
7149: IFFALSE 7171
// tmp := tmp & i & ; ;
7151: LD_ADDR_VAR 0 3
7155: PUSH
7156: LD_VAR 0 3
7160: PUSH
7161: LD_VAR 0 8
7165: STR
7166: PUSH
7167: LD_STRING ;
7169: STR
7170: ST_TO_ADDR
// end ;
7171: GO 7136
7173: POP
7174: POP
// for i = 1 to hardcoreCounter do
7175: LD_ADDR_VAR 0 8
7179: PUSH
7180: DOUBLE
7181: LD_INT 1
7183: DEC
7184: ST_TO_ADDR
7185: LD_EXP 4
7189: PUSH
7190: FOR_TO
7191: IFFALSE 7237
// begin if flags [ normalCounter + i ] then
7193: LD_VAR 0 4
7197: PUSH
7198: LD_EXP 3
7202: PUSH
7203: LD_VAR 0 8
7207: PLUS
7208: ARRAY
7209: IFFALSE 7235
// tmp := tmp & ( 100 + i ) & ; ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_VAR 0 3
7220: PUSH
7221: LD_INT 100
7223: PUSH
7224: LD_VAR 0 8
7228: PLUS
7229: STR
7230: PUSH
7231: LD_STRING ;
7233: STR
7234: ST_TO_ADDR
// end ;
7235: GO 7190
7237: POP
7238: POP
// if tmp then
7239: LD_VAR 0 3
7243: IFFALSE 7255
// active := tmp ;
7245: LD_ADDR_VAR 0 7
7249: PUSH
7250: LD_VAR 0 3
7254: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7255: LD_STRING getStreamItemsFromMission("
7257: PUSH
7258: LD_VAR 0 5
7262: STR
7263: PUSH
7264: LD_STRING ","
7266: STR
7267: PUSH
7268: LD_VAR 0 6
7272: STR
7273: PUSH
7274: LD_STRING ","
7276: STR
7277: PUSH
7278: LD_VAR 0 7
7282: STR
7283: PUSH
7284: LD_STRING ")
7286: STR
7287: PPUSH
7288: CALL_OW 559
// end else
7292: GO 7301
// ToLua ( getStreamItemsFromMission("","","") ) ;
7294: LD_STRING getStreamItemsFromMission("","","")
7296: PPUSH
7297: CALL_OW 559
// end ;
7301: LD_VAR 0 2
7305: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7306: LD_EXP 2
7310: PUSH
7311: LD_EXP 7
7315: AND
7316: IFFALSE 7440
7318: GO 7320
7320: DISABLE
7321: LD_INT 0
7323: PPUSH
7324: PPUSH
// begin enable ;
7325: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7326: LD_ADDR_VAR 0 2
7330: PUSH
7331: LD_INT 22
7333: PUSH
7334: LD_OWVAR 2
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 2
7345: PUSH
7346: LD_INT 34
7348: PUSH
7349: LD_INT 7
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 34
7358: PUSH
7359: LD_INT 45
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PUSH
7366: LD_INT 34
7368: PUSH
7369: LD_INT 28
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 34
7378: PUSH
7379: LD_INT 47
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PPUSH
7397: CALL_OW 69
7401: ST_TO_ADDR
// if not tmp then
7402: LD_VAR 0 2
7406: NOT
7407: IFFALSE 7411
// exit ;
7409: GO 7440
// for i in tmp do
7411: LD_ADDR_VAR 0 1
7415: PUSH
7416: LD_VAR 0 2
7420: PUSH
7421: FOR_IN
7422: IFFALSE 7438
// begin SetLives ( i , 0 ) ;
7424: LD_VAR 0 1
7428: PPUSH
7429: LD_INT 0
7431: PPUSH
7432: CALL_OW 234
// end ;
7436: GO 7421
7438: POP
7439: POP
// end ;
7440: PPOPN 2
7442: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7443: LD_EXP 2
7447: PUSH
7448: LD_EXP 8
7452: AND
7453: IFFALSE 7537
7455: GO 7457
7457: DISABLE
7458: LD_INT 0
7460: PPUSH
7461: PPUSH
// begin enable ;
7462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7463: LD_ADDR_VAR 0 2
7467: PUSH
7468: LD_INT 22
7470: PUSH
7471: LD_OWVAR 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 32
7482: PUSH
7483: LD_INT 3
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PPUSH
7494: CALL_OW 69
7498: ST_TO_ADDR
// if not tmp then
7499: LD_VAR 0 2
7503: NOT
7504: IFFALSE 7508
// exit ;
7506: GO 7537
// for i in tmp do
7508: LD_ADDR_VAR 0 1
7512: PUSH
7513: LD_VAR 0 2
7517: PUSH
7518: FOR_IN
7519: IFFALSE 7535
// begin SetLives ( i , 0 ) ;
7521: LD_VAR 0 1
7525: PPUSH
7526: LD_INT 0
7528: PPUSH
7529: CALL_OW 234
// end ;
7533: GO 7518
7535: POP
7536: POP
// end ;
7537: PPOPN 2
7539: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7540: LD_EXP 2
7544: PUSH
7545: LD_EXP 5
7549: AND
7550: IFFALSE 7643
7552: GO 7554
7554: DISABLE
7555: LD_INT 0
7557: PPUSH
// begin enable ;
7558: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7559: LD_ADDR_VAR 0 1
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_OWVAR 2
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 2
7578: PUSH
7579: LD_INT 25
7581: PUSH
7582: LD_INT 5
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 25
7591: PUSH
7592: LD_INT 9
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 25
7601: PUSH
7602: LD_INT 8
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PPUSH
7619: CALL_OW 69
7623: PUSH
7624: FOR_IN
7625: IFFALSE 7641
// begin SetClass ( i , 1 ) ;
7627: LD_VAR 0 1
7631: PPUSH
7632: LD_INT 1
7634: PPUSH
7635: CALL_OW 336
// end ;
7639: GO 7624
7641: POP
7642: POP
// end ;
7643: PPOPN 1
7645: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7646: LD_EXP 2
7650: PUSH
7651: LD_EXP 6
7655: AND
7656: PUSH
7657: LD_OWVAR 65
7661: PUSH
7662: LD_INT 7
7664: LESS
7665: AND
7666: IFFALSE 7680
7668: GO 7670
7670: DISABLE
// begin enable ;
7671: ENABLE
// game_speed := 7 ;
7672: LD_ADDR_OWVAR 65
7676: PUSH
7677: LD_INT 7
7679: ST_TO_ADDR
// end ;
7680: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7681: LD_EXP 2
7685: PUSH
7686: LD_EXP 9
7690: AND
7691: IFFALSE 7893
7693: GO 7695
7695: DISABLE
7696: LD_INT 0
7698: PPUSH
7699: PPUSH
7700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7701: LD_ADDR_VAR 0 3
7705: PUSH
7706: LD_INT 81
7708: PUSH
7709: LD_OWVAR 2
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 21
7720: PUSH
7721: LD_INT 1
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PPUSH
7732: CALL_OW 69
7736: ST_TO_ADDR
// if not tmp then
7737: LD_VAR 0 3
7741: NOT
7742: IFFALSE 7746
// exit ;
7744: GO 7893
// if tmp > 5 then
7746: LD_VAR 0 3
7750: PUSH
7751: LD_INT 5
7753: GREATER
7754: IFFALSE 7766
// k := 5 else
7756: LD_ADDR_VAR 0 2
7760: PUSH
7761: LD_INT 5
7763: ST_TO_ADDR
7764: GO 7776
// k := tmp ;
7766: LD_ADDR_VAR 0 2
7770: PUSH
7771: LD_VAR 0 3
7775: ST_TO_ADDR
// for i := 1 to k do
7776: LD_ADDR_VAR 0 1
7780: PUSH
7781: DOUBLE
7782: LD_INT 1
7784: DEC
7785: ST_TO_ADDR
7786: LD_VAR 0 2
7790: PUSH
7791: FOR_TO
7792: IFFALSE 7891
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7794: LD_VAR 0 3
7798: PUSH
7799: LD_VAR 0 1
7803: ARRAY
7804: PPUSH
7805: LD_VAR 0 1
7809: PUSH
7810: LD_INT 4
7812: MOD
7813: PUSH
7814: LD_INT 1
7816: PLUS
7817: PPUSH
7818: CALL_OW 259
7822: PUSH
7823: LD_INT 10
7825: LESS
7826: IFFALSE 7889
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7828: LD_VAR 0 3
7832: PUSH
7833: LD_VAR 0 1
7837: ARRAY
7838: PPUSH
7839: LD_VAR 0 1
7843: PUSH
7844: LD_INT 4
7846: MOD
7847: PUSH
7848: LD_INT 1
7850: PLUS
7851: PPUSH
7852: LD_VAR 0 3
7856: PUSH
7857: LD_VAR 0 1
7861: ARRAY
7862: PPUSH
7863: LD_VAR 0 1
7867: PUSH
7868: LD_INT 4
7870: MOD
7871: PUSH
7872: LD_INT 1
7874: PLUS
7875: PPUSH
7876: CALL_OW 259
7880: PUSH
7881: LD_INT 1
7883: PLUS
7884: PPUSH
7885: CALL_OW 237
7889: GO 7791
7891: POP
7892: POP
// end ;
7893: PPOPN 3
7895: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7896: LD_EXP 2
7900: PUSH
7901: LD_EXP 10
7905: AND
7906: IFFALSE 7926
7908: GO 7910
7910: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7911: LD_INT 4
7913: PPUSH
7914: LD_OWVAR 2
7918: PPUSH
7919: LD_INT 0
7921: PPUSH
7922: CALL_OW 324
7926: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7927: LD_EXP 2
7931: PUSH
7932: LD_EXP 39
7936: AND
7937: IFFALSE 7957
7939: GO 7941
7941: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7942: LD_INT 19
7944: PPUSH
7945: LD_OWVAR 2
7949: PPUSH
7950: LD_INT 0
7952: PPUSH
7953: CALL_OW 324
7957: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7958: LD_EXP 2
7962: PUSH
7963: LD_EXP 11
7967: AND
7968: IFFALSE 8070
7970: GO 7972
7972: DISABLE
7973: LD_INT 0
7975: PPUSH
7976: PPUSH
// begin enable ;
7977: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7978: LD_ADDR_VAR 0 2
7982: PUSH
7983: LD_INT 22
7985: PUSH
7986: LD_OWVAR 2
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: LD_INT 2
7997: PUSH
7998: LD_INT 34
8000: PUSH
8001: LD_INT 11
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 34
8010: PUSH
8011: LD_INT 30
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: LIST
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PPUSH
8027: CALL_OW 69
8031: ST_TO_ADDR
// if not tmp then
8032: LD_VAR 0 2
8036: NOT
8037: IFFALSE 8041
// exit ;
8039: GO 8070
// for i in tmp do
8041: LD_ADDR_VAR 0 1
8045: PUSH
8046: LD_VAR 0 2
8050: PUSH
8051: FOR_IN
8052: IFFALSE 8068
// begin SetLives ( i , 0 ) ;
8054: LD_VAR 0 1
8058: PPUSH
8059: LD_INT 0
8061: PPUSH
8062: CALL_OW 234
// end ;
8066: GO 8051
8068: POP
8069: POP
// end ;
8070: PPOPN 2
8072: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8073: LD_EXP 2
8077: PUSH
8078: LD_EXP 12
8082: AND
8083: IFFALSE 8103
8085: GO 8087
8087: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8088: LD_INT 32
8090: PPUSH
8091: LD_OWVAR 2
8095: PPUSH
8096: LD_INT 0
8098: PPUSH
8099: CALL_OW 324
8103: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8104: LD_EXP 2
8108: PUSH
8109: LD_EXP 13
8113: AND
8114: IFFALSE 8295
8116: GO 8118
8118: DISABLE
8119: LD_INT 0
8121: PPUSH
8122: PPUSH
8123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8124: LD_ADDR_VAR 0 2
8128: PUSH
8129: LD_INT 22
8131: PUSH
8132: LD_OWVAR 2
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 33
8143: PUSH
8144: LD_INT 3
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: PPUSH
8155: CALL_OW 69
8159: ST_TO_ADDR
// if not tmp then
8160: LD_VAR 0 2
8164: NOT
8165: IFFALSE 8169
// exit ;
8167: GO 8295
// side := 0 ;
8169: LD_ADDR_VAR 0 3
8173: PUSH
8174: LD_INT 0
8176: ST_TO_ADDR
// for i := 1 to 8 do
8177: LD_ADDR_VAR 0 1
8181: PUSH
8182: DOUBLE
8183: LD_INT 1
8185: DEC
8186: ST_TO_ADDR
8187: LD_INT 8
8189: PUSH
8190: FOR_TO
8191: IFFALSE 8239
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8193: LD_OWVAR 2
8197: PUSH
8198: LD_VAR 0 1
8202: NONEQUAL
8203: PUSH
8204: LD_OWVAR 2
8208: PPUSH
8209: LD_VAR 0 1
8213: PPUSH
8214: CALL_OW 81
8218: PUSH
8219: LD_INT 2
8221: EQUAL
8222: AND
8223: IFFALSE 8237
// begin side := i ;
8225: LD_ADDR_VAR 0 3
8229: PUSH
8230: LD_VAR 0 1
8234: ST_TO_ADDR
// break ;
8235: GO 8239
// end ;
8237: GO 8190
8239: POP
8240: POP
// if not side then
8241: LD_VAR 0 3
8245: NOT
8246: IFFALSE 8250
// exit ;
8248: GO 8295
// for i := 1 to tmp do
8250: LD_ADDR_VAR 0 1
8254: PUSH
8255: DOUBLE
8256: LD_INT 1
8258: DEC
8259: ST_TO_ADDR
8260: LD_VAR 0 2
8264: PUSH
8265: FOR_TO
8266: IFFALSE 8293
// if Prob ( 60 ) then
8268: LD_INT 60
8270: PPUSH
8271: CALL_OW 13
8275: IFFALSE 8291
// SetSide ( i , side ) ;
8277: LD_VAR 0 1
8281: PPUSH
8282: LD_VAR 0 3
8286: PPUSH
8287: CALL_OW 235
8291: GO 8265
8293: POP
8294: POP
// end ;
8295: PPOPN 3
8297: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8298: LD_EXP 2
8302: PUSH
8303: LD_EXP 15
8307: AND
8308: IFFALSE 8427
8310: GO 8312
8312: DISABLE
8313: LD_INT 0
8315: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8316: LD_ADDR_VAR 0 1
8320: PUSH
8321: LD_INT 22
8323: PUSH
8324: LD_OWVAR 2
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 21
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 3
8345: PUSH
8346: LD_INT 23
8348: PUSH
8349: LD_INT 0
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: PPUSH
8365: CALL_OW 69
8369: PUSH
8370: FOR_IN
8371: IFFALSE 8425
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8373: LD_VAR 0 1
8377: PPUSH
8378: CALL_OW 257
8382: PUSH
8383: LD_INT 1
8385: PUSH
8386: LD_INT 2
8388: PUSH
8389: LD_INT 3
8391: PUSH
8392: LD_INT 4
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: IN
8401: IFFALSE 8423
// SetClass ( un , rand ( 1 , 4 ) ) ;
8403: LD_VAR 0 1
8407: PPUSH
8408: LD_INT 1
8410: PPUSH
8411: LD_INT 4
8413: PPUSH
8414: CALL_OW 12
8418: PPUSH
8419: CALL_OW 336
8423: GO 8370
8425: POP
8426: POP
// end ;
8427: PPOPN 1
8429: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8430: LD_EXP 2
8434: PUSH
8435: LD_EXP 14
8439: AND
8440: IFFALSE 8519
8442: GO 8444
8444: DISABLE
8445: LD_INT 0
8447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8448: LD_ADDR_VAR 0 1
8452: PUSH
8453: LD_INT 22
8455: PUSH
8456: LD_OWVAR 2
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 21
8467: PUSH
8468: LD_INT 3
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PPUSH
8479: CALL_OW 69
8483: ST_TO_ADDR
// if not tmp then
8484: LD_VAR 0 1
8488: NOT
8489: IFFALSE 8493
// exit ;
8491: GO 8519
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8493: LD_VAR 0 1
8497: PUSH
8498: LD_INT 1
8500: PPUSH
8501: LD_VAR 0 1
8505: PPUSH
8506: CALL_OW 12
8510: ARRAY
8511: PPUSH
8512: LD_INT 100
8514: PPUSH
8515: CALL_OW 234
// end ;
8519: PPOPN 1
8521: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8522: LD_EXP 2
8526: PUSH
8527: LD_EXP 16
8531: AND
8532: IFFALSE 8630
8534: GO 8536
8536: DISABLE
8537: LD_INT 0
8539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8540: LD_ADDR_VAR 0 1
8544: PUSH
8545: LD_INT 22
8547: PUSH
8548: LD_OWVAR 2
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 21
8559: PUSH
8560: LD_INT 1
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: ST_TO_ADDR
// if not tmp then
8576: LD_VAR 0 1
8580: NOT
8581: IFFALSE 8585
// exit ;
8583: GO 8630
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8585: LD_VAR 0 1
8589: PUSH
8590: LD_INT 1
8592: PPUSH
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 12
8602: ARRAY
8603: PPUSH
8604: LD_INT 1
8606: PPUSH
8607: LD_INT 4
8609: PPUSH
8610: CALL_OW 12
8614: PPUSH
8615: LD_INT 3000
8617: PPUSH
8618: LD_INT 9000
8620: PPUSH
8621: CALL_OW 12
8625: PPUSH
8626: CALL_OW 492
// end ;
8630: PPOPN 1
8632: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8633: LD_EXP 2
8637: PUSH
8638: LD_EXP 17
8642: AND
8643: IFFALSE 8663
8645: GO 8647
8647: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8648: LD_INT 1
8650: PPUSH
8651: LD_OWVAR 2
8655: PPUSH
8656: LD_INT 0
8658: PPUSH
8659: CALL_OW 324
8663: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8664: LD_EXP 2
8668: PUSH
8669: LD_EXP 18
8673: AND
8674: IFFALSE 8757
8676: GO 8678
8678: DISABLE
8679: LD_INT 0
8681: PPUSH
8682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8683: LD_ADDR_VAR 0 2
8687: PUSH
8688: LD_INT 22
8690: PUSH
8691: LD_OWVAR 2
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 21
8702: PUSH
8703: LD_INT 3
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 69
8718: ST_TO_ADDR
// if not tmp then
8719: LD_VAR 0 2
8723: NOT
8724: IFFALSE 8728
// exit ;
8726: GO 8757
// for i in tmp do
8728: LD_ADDR_VAR 0 1
8732: PUSH
8733: LD_VAR 0 2
8737: PUSH
8738: FOR_IN
8739: IFFALSE 8755
// SetBLevel ( i , 10 ) ;
8741: LD_VAR 0 1
8745: PPUSH
8746: LD_INT 10
8748: PPUSH
8749: CALL_OW 241
8753: GO 8738
8755: POP
8756: POP
// end ;
8757: PPOPN 2
8759: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8760: LD_EXP 2
8764: PUSH
8765: LD_EXP 19
8769: AND
8770: IFFALSE 8881
8772: GO 8774
8774: DISABLE
8775: LD_INT 0
8777: PPUSH
8778: PPUSH
8779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8780: LD_ADDR_VAR 0 3
8784: PUSH
8785: LD_INT 22
8787: PUSH
8788: LD_OWVAR 2
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: LD_INT 25
8799: PUSH
8800: LD_INT 1
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PPUSH
8811: CALL_OW 69
8815: ST_TO_ADDR
// if not tmp then
8816: LD_VAR 0 3
8820: NOT
8821: IFFALSE 8825
// exit ;
8823: GO 8881
// un := tmp [ rand ( 1 , tmp ) ] ;
8825: LD_ADDR_VAR 0 2
8829: PUSH
8830: LD_VAR 0 3
8834: PUSH
8835: LD_INT 1
8837: PPUSH
8838: LD_VAR 0 3
8842: PPUSH
8843: CALL_OW 12
8847: ARRAY
8848: ST_TO_ADDR
// if Crawls ( un ) then
8849: LD_VAR 0 2
8853: PPUSH
8854: CALL_OW 318
8858: IFFALSE 8869
// ComWalk ( un ) ;
8860: LD_VAR 0 2
8864: PPUSH
8865: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8869: LD_VAR 0 2
8873: PPUSH
8874: LD_INT 5
8876: PPUSH
8877: CALL_OW 336
// end ;
8881: PPOPN 3
8883: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
8884: LD_EXP 2
8888: PUSH
8889: LD_EXP 20
8893: AND
8894: PUSH
8895: LD_OWVAR 67
8899: PUSH
8900: LD_INT 4
8902: LESS
8903: AND
8904: IFFALSE 8923
8906: GO 8908
8908: DISABLE
// begin Difficulty := Difficulty + 1 ;
8909: LD_ADDR_OWVAR 67
8913: PUSH
8914: LD_OWVAR 67
8918: PUSH
8919: LD_INT 1
8921: PLUS
8922: ST_TO_ADDR
// end ;
8923: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8924: LD_EXP 2
8928: PUSH
8929: LD_EXP 21
8933: AND
8934: IFFALSE 9037
8936: GO 8938
8938: DISABLE
8939: LD_INT 0
8941: PPUSH
// begin for i := 1 to 5 do
8942: LD_ADDR_VAR 0 1
8946: PUSH
8947: DOUBLE
8948: LD_INT 1
8950: DEC
8951: ST_TO_ADDR
8952: LD_INT 5
8954: PUSH
8955: FOR_TO
8956: IFFALSE 9035
// begin uc_nation := nation_nature ;
8958: LD_ADDR_OWVAR 21
8962: PUSH
8963: LD_INT 0
8965: ST_TO_ADDR
// uc_side := 0 ;
8966: LD_ADDR_OWVAR 20
8970: PUSH
8971: LD_INT 0
8973: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8974: LD_ADDR_OWVAR 29
8978: PUSH
8979: LD_INT 12
8981: PUSH
8982: LD_INT 12
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: ST_TO_ADDR
// hc_agressivity := 20 ;
8989: LD_ADDR_OWVAR 35
8993: PUSH
8994: LD_INT 20
8996: ST_TO_ADDR
// hc_class := class_tiger ;
8997: LD_ADDR_OWVAR 28
9001: PUSH
9002: LD_INT 14
9004: ST_TO_ADDR
// hc_gallery :=  ;
9005: LD_ADDR_OWVAR 33
9009: PUSH
9010: LD_STRING 
9012: ST_TO_ADDR
// hc_name :=  ;
9013: LD_ADDR_OWVAR 26
9017: PUSH
9018: LD_STRING 
9020: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9021: CALL_OW 44
9025: PPUSH
9026: LD_INT 0
9028: PPUSH
9029: CALL_OW 51
// end ;
9033: GO 8955
9035: POP
9036: POP
// end ;
9037: PPOPN 1
9039: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9040: LD_EXP 2
9044: PUSH
9045: LD_EXP 22
9049: AND
9050: IFFALSE 9059
9052: GO 9054
9054: DISABLE
// StreamSibBomb ;
9055: CALL 9060 0 0
9059: END
// export function StreamSibBomb ; var i , x , y ; begin
9060: LD_INT 0
9062: PPUSH
9063: PPUSH
9064: PPUSH
9065: PPUSH
// result := false ;
9066: LD_ADDR_VAR 0 1
9070: PUSH
9071: LD_INT 0
9073: ST_TO_ADDR
// for i := 1 to 16 do
9074: LD_ADDR_VAR 0 2
9078: PUSH
9079: DOUBLE
9080: LD_INT 1
9082: DEC
9083: ST_TO_ADDR
9084: LD_INT 16
9086: PUSH
9087: FOR_TO
9088: IFFALSE 9287
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9090: LD_ADDR_VAR 0 3
9094: PUSH
9095: LD_INT 10
9097: PUSH
9098: LD_INT 20
9100: PUSH
9101: LD_INT 30
9103: PUSH
9104: LD_INT 40
9106: PUSH
9107: LD_INT 50
9109: PUSH
9110: LD_INT 60
9112: PUSH
9113: LD_INT 70
9115: PUSH
9116: LD_INT 80
9118: PUSH
9119: LD_INT 90
9121: PUSH
9122: LD_INT 100
9124: PUSH
9125: LD_INT 110
9127: PUSH
9128: LD_INT 120
9130: PUSH
9131: LD_INT 130
9133: PUSH
9134: LD_INT 140
9136: PUSH
9137: LD_INT 150
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: PUSH
9157: LD_INT 1
9159: PPUSH
9160: LD_INT 15
9162: PPUSH
9163: CALL_OW 12
9167: ARRAY
9168: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9169: LD_ADDR_VAR 0 4
9173: PUSH
9174: LD_INT 10
9176: PUSH
9177: LD_INT 20
9179: PUSH
9180: LD_INT 30
9182: PUSH
9183: LD_INT 40
9185: PUSH
9186: LD_INT 50
9188: PUSH
9189: LD_INT 60
9191: PUSH
9192: LD_INT 70
9194: PUSH
9195: LD_INT 80
9197: PUSH
9198: LD_INT 90
9200: PUSH
9201: LD_INT 100
9203: PUSH
9204: LD_INT 110
9206: PUSH
9207: LD_INT 120
9209: PUSH
9210: LD_INT 130
9212: PUSH
9213: LD_INT 140
9215: PUSH
9216: LD_INT 150
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: PUSH
9236: LD_INT 1
9238: PPUSH
9239: LD_INT 15
9241: PPUSH
9242: CALL_OW 12
9246: ARRAY
9247: ST_TO_ADDR
// if ValidHex ( x , y ) then
9248: LD_VAR 0 3
9252: PPUSH
9253: LD_VAR 0 4
9257: PPUSH
9258: CALL_OW 488
9262: IFFALSE 9285
// begin result := [ x , y ] ;
9264: LD_ADDR_VAR 0 1
9268: PUSH
9269: LD_VAR 0 3
9273: PUSH
9274: LD_VAR 0 4
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: ST_TO_ADDR
// break ;
9283: GO 9287
// end ; end ;
9285: GO 9087
9287: POP
9288: POP
// if result then
9289: LD_VAR 0 1
9293: IFFALSE 9353
// begin ToLua ( playSibBomb() ) ;
9295: LD_STRING playSibBomb()
9297: PPUSH
9298: CALL_OW 559
// wait ( 0 0$14 ) ;
9302: LD_INT 490
9304: PPUSH
9305: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9309: LD_VAR 0 1
9313: PUSH
9314: LD_INT 1
9316: ARRAY
9317: PPUSH
9318: LD_VAR 0 1
9322: PUSH
9323: LD_INT 2
9325: ARRAY
9326: PPUSH
9327: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9331: LD_VAR 0 1
9335: PUSH
9336: LD_INT 1
9338: ARRAY
9339: PPUSH
9340: LD_VAR 0 1
9344: PUSH
9345: LD_INT 2
9347: ARRAY
9348: PPUSH
9349: CALL_OW 429
// end ; end ;
9353: LD_VAR 0 1
9357: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9358: LD_EXP 2
9362: PUSH
9363: LD_EXP 24
9367: AND
9368: IFFALSE 9380
9370: GO 9372
9372: DISABLE
// YouLost (  ) ;
9373: LD_STRING 
9375: PPUSH
9376: CALL_OW 104
9380: END
// every 0 0$1 trigger StreamModeActive and sFog do
9381: LD_EXP 2
9385: PUSH
9386: LD_EXP 23
9390: AND
9391: IFFALSE 9405
9393: GO 9395
9395: DISABLE
// FogOff ( your_side ) ;
9396: LD_OWVAR 2
9400: PPUSH
9401: CALL_OW 344
9405: END
// every 0 0$1 trigger StreamModeActive and sSun do
9406: LD_EXP 2
9410: PUSH
9411: LD_EXP 25
9415: AND
9416: IFFALSE 9444
9418: GO 9420
9420: DISABLE
// begin solar_recharge_percent := 0 ;
9421: LD_ADDR_OWVAR 79
9425: PUSH
9426: LD_INT 0
9428: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9429: LD_INT 10500
9431: PPUSH
9432: CALL_OW 67
// solar_recharge_percent := 100 ;
9436: LD_ADDR_OWVAR 79
9440: PUSH
9441: LD_INT 100
9443: ST_TO_ADDR
// end ;
9444: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9445: LD_EXP 2
9449: PUSH
9450: LD_EXP 26
9454: AND
9455: IFFALSE 9694
9457: GO 9459
9459: DISABLE
9460: LD_INT 0
9462: PPUSH
9463: PPUSH
9464: PPUSH
// begin tmp := [ ] ;
9465: LD_ADDR_VAR 0 3
9469: PUSH
9470: EMPTY
9471: ST_TO_ADDR
// for i := 1 to 6 do
9472: LD_ADDR_VAR 0 1
9476: PUSH
9477: DOUBLE
9478: LD_INT 1
9480: DEC
9481: ST_TO_ADDR
9482: LD_INT 6
9484: PUSH
9485: FOR_TO
9486: IFFALSE 9591
// begin uc_nation := nation_nature ;
9488: LD_ADDR_OWVAR 21
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// uc_side := 0 ;
9496: LD_ADDR_OWVAR 20
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9504: LD_ADDR_OWVAR 29
9508: PUSH
9509: LD_INT 12
9511: PUSH
9512: LD_INT 12
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: ST_TO_ADDR
// hc_agressivity := 20 ;
9519: LD_ADDR_OWVAR 35
9523: PUSH
9524: LD_INT 20
9526: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9527: LD_ADDR_OWVAR 28
9531: PUSH
9532: LD_INT 17
9534: ST_TO_ADDR
// hc_gallery :=  ;
9535: LD_ADDR_OWVAR 33
9539: PUSH
9540: LD_STRING 
9542: ST_TO_ADDR
// hc_name :=  ;
9543: LD_ADDR_OWVAR 26
9547: PUSH
9548: LD_STRING 
9550: ST_TO_ADDR
// un := CreateHuman ;
9551: LD_ADDR_VAR 0 2
9555: PUSH
9556: CALL_OW 44
9560: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9561: LD_VAR 0 2
9565: PPUSH
9566: LD_INT 1
9568: PPUSH
9569: CALL_OW 51
// tmp := tmp ^ un ;
9573: LD_ADDR_VAR 0 3
9577: PUSH
9578: LD_VAR 0 3
9582: PUSH
9583: LD_VAR 0 2
9587: ADD
9588: ST_TO_ADDR
// end ;
9589: GO 9485
9591: POP
9592: POP
// repeat wait ( 0 0$1 ) ;
9593: LD_INT 35
9595: PPUSH
9596: CALL_OW 67
// for un in tmp do
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: LD_VAR 0 3
9609: PUSH
9610: FOR_IN
9611: IFFALSE 9685
// begin if IsDead ( un ) then
9613: LD_VAR 0 2
9617: PPUSH
9618: CALL_OW 301
9622: IFFALSE 9642
// begin tmp := tmp diff un ;
9624: LD_ADDR_VAR 0 3
9628: PUSH
9629: LD_VAR 0 3
9633: PUSH
9634: LD_VAR 0 2
9638: DIFF
9639: ST_TO_ADDR
// continue ;
9640: GO 9610
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9642: LD_VAR 0 2
9646: PPUSH
9647: LD_INT 3
9649: PUSH
9650: LD_INT 22
9652: PUSH
9653: LD_INT 0
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PPUSH
9664: CALL_OW 69
9668: PPUSH
9669: LD_VAR 0 2
9673: PPUSH
9674: CALL_OW 74
9678: PPUSH
9679: CALL_OW 115
// end ;
9683: GO 9610
9685: POP
9686: POP
// until not tmp ;
9687: LD_VAR 0 3
9691: NOT
9692: IFFALSE 9593
// end ;
9694: PPOPN 3
9696: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9697: LD_EXP 2
9701: PUSH
9702: LD_EXP 27
9706: AND
9707: IFFALSE 9761
9709: GO 9711
9711: DISABLE
// begin ToLua ( displayTroll(); ) ;
9712: LD_STRING displayTroll();
9714: PPUSH
9715: CALL_OW 559
// wait ( 3 3$00 ) ;
9719: LD_INT 6300
9721: PPUSH
9722: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9726: LD_STRING hideTroll();
9728: PPUSH
9729: CALL_OW 559
// wait ( 1 1$00 ) ;
9733: LD_INT 2100
9735: PPUSH
9736: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9740: LD_STRING displayTroll();
9742: PPUSH
9743: CALL_OW 559
// wait ( 1 1$00 ) ;
9747: LD_INT 2100
9749: PPUSH
9750: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9754: LD_STRING hideTroll();
9756: PPUSH
9757: CALL_OW 559
// end ;
9761: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9762: LD_EXP 2
9766: PUSH
9767: LD_EXP 28
9771: AND
9772: IFFALSE 9835
9774: GO 9776
9776: DISABLE
9777: LD_INT 0
9779: PPUSH
// begin p := 0 ;
9780: LD_ADDR_VAR 0 1
9784: PUSH
9785: LD_INT 0
9787: ST_TO_ADDR
// repeat game_speed := 1 ;
9788: LD_ADDR_OWVAR 65
9792: PUSH
9793: LD_INT 1
9795: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9796: LD_INT 35
9798: PPUSH
9799: CALL_OW 67
// p := p + 1 ;
9803: LD_ADDR_VAR 0 1
9807: PUSH
9808: LD_VAR 0 1
9812: PUSH
9813: LD_INT 1
9815: PLUS
9816: ST_TO_ADDR
// until p >= 60 ;
9817: LD_VAR 0 1
9821: PUSH
9822: LD_INT 60
9824: GREATEREQUAL
9825: IFFALSE 9788
// game_speed := 4 ;
9827: LD_ADDR_OWVAR 65
9831: PUSH
9832: LD_INT 4
9834: ST_TO_ADDR
// end ;
9835: PPOPN 1
9837: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9838: LD_EXP 2
9842: PUSH
9843: LD_EXP 29
9847: AND
9848: IFFALSE 9994
9850: GO 9852
9852: DISABLE
9853: LD_INT 0
9855: PPUSH
9856: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: LD_INT 22
9864: PUSH
9865: LD_OWVAR 2
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 2
9876: PUSH
9877: LD_INT 30
9879: PUSH
9880: LD_INT 0
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 30
9889: PUSH
9890: LD_INT 1
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 69
9910: ST_TO_ADDR
// if not depot then
9911: LD_VAR 0 1
9915: NOT
9916: IFFALSE 9920
// exit ;
9918: GO 9994
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9920: LD_ADDR_VAR 0 2
9924: PUSH
9925: LD_VAR 0 1
9929: PUSH
9930: LD_INT 1
9932: PPUSH
9933: LD_VAR 0 1
9937: PPUSH
9938: CALL_OW 12
9942: ARRAY
9943: PPUSH
9944: CALL_OW 274
9948: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9949: LD_VAR 0 2
9953: PPUSH
9954: LD_INT 1
9956: PPUSH
9957: LD_INT 0
9959: PPUSH
9960: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9964: LD_VAR 0 2
9968: PPUSH
9969: LD_INT 2
9971: PPUSH
9972: LD_INT 0
9974: PPUSH
9975: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9979: LD_VAR 0 2
9983: PPUSH
9984: LD_INT 3
9986: PPUSH
9987: LD_INT 0
9989: PPUSH
9990: CALL_OW 277
// end ;
9994: PPOPN 2
9996: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9997: LD_EXP 2
10001: PUSH
10002: LD_EXP 30
10006: AND
10007: IFFALSE 10104
10009: GO 10011
10011: DISABLE
10012: LD_INT 0
10014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10015: LD_ADDR_VAR 0 1
10019: PUSH
10020: LD_INT 22
10022: PUSH
10023: LD_OWVAR 2
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PUSH
10032: LD_INT 21
10034: PUSH
10035: LD_INT 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 23
10047: PUSH
10048: LD_INT 0
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: PPUSH
10064: CALL_OW 69
10068: ST_TO_ADDR
// if not tmp then
10069: LD_VAR 0 1
10073: NOT
10074: IFFALSE 10078
// exit ;
10076: GO 10104
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10078: LD_VAR 0 1
10082: PUSH
10083: LD_INT 1
10085: PPUSH
10086: LD_VAR 0 1
10090: PPUSH
10091: CALL_OW 12
10095: ARRAY
10096: PPUSH
10097: LD_INT 200
10099: PPUSH
10100: CALL_OW 234
// end ;
10104: PPOPN 1
10106: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10107: LD_EXP 2
10111: PUSH
10112: LD_EXP 31
10116: AND
10117: IFFALSE 10196
10119: GO 10121
10121: DISABLE
10122: LD_INT 0
10124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10125: LD_ADDR_VAR 0 1
10129: PUSH
10130: LD_INT 22
10132: PUSH
10133: LD_OWVAR 2
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 21
10144: PUSH
10145: LD_INT 2
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PPUSH
10156: CALL_OW 69
10160: ST_TO_ADDR
// if not tmp then
10161: LD_VAR 0 1
10165: NOT
10166: IFFALSE 10170
// exit ;
10168: GO 10196
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10170: LD_VAR 0 1
10174: PUSH
10175: LD_INT 1
10177: PPUSH
10178: LD_VAR 0 1
10182: PPUSH
10183: CALL_OW 12
10187: ARRAY
10188: PPUSH
10189: LD_INT 60
10191: PPUSH
10192: CALL_OW 234
// end ;
10196: PPOPN 1
10198: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10199: LD_EXP 2
10203: PUSH
10204: LD_EXP 32
10208: AND
10209: IFFALSE 10308
10211: GO 10213
10213: DISABLE
10214: LD_INT 0
10216: PPUSH
10217: PPUSH
// begin enable ;
10218: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10219: LD_ADDR_VAR 0 1
10223: PUSH
10224: LD_INT 22
10226: PUSH
10227: LD_OWVAR 2
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 61
10238: PUSH
10239: EMPTY
10240: LIST
10241: PUSH
10242: LD_INT 33
10244: PUSH
10245: LD_INT 2
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: LIST
10256: PPUSH
10257: CALL_OW 69
10261: ST_TO_ADDR
// if not tmp then
10262: LD_VAR 0 1
10266: NOT
10267: IFFALSE 10271
// exit ;
10269: GO 10308
// for i in tmp do
10271: LD_ADDR_VAR 0 2
10275: PUSH
10276: LD_VAR 0 1
10280: PUSH
10281: FOR_IN
10282: IFFALSE 10306
// if IsControledBy ( i ) then
10284: LD_VAR 0 2
10288: PPUSH
10289: CALL_OW 312
10293: IFFALSE 10304
// ComUnlink ( i ) ;
10295: LD_VAR 0 2
10299: PPUSH
10300: CALL_OW 136
10304: GO 10281
10306: POP
10307: POP
// end ;
10308: PPOPN 2
10310: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10311: LD_EXP 2
10315: PUSH
10316: LD_EXP 33
10320: AND
10321: IFFALSE 10461
10323: GO 10325
10325: DISABLE
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// begin ToLua ( displayPowell(); ) ;
10330: LD_STRING displayPowell();
10332: PPUSH
10333: CALL_OW 559
// uc_side := 0 ;
10337: LD_ADDR_OWVAR 20
10341: PUSH
10342: LD_INT 0
10344: ST_TO_ADDR
// uc_nation := 2 ;
10345: LD_ADDR_OWVAR 21
10349: PUSH
10350: LD_INT 2
10352: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10353: LD_ADDR_OWVAR 37
10357: PUSH
10358: LD_INT 14
10360: ST_TO_ADDR
// vc_engine := engine_siberite ;
10361: LD_ADDR_OWVAR 39
10365: PUSH
10366: LD_INT 3
10368: ST_TO_ADDR
// vc_control := control_apeman ;
10369: LD_ADDR_OWVAR 38
10373: PUSH
10374: LD_INT 5
10376: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10377: LD_ADDR_OWVAR 40
10381: PUSH
10382: LD_INT 29
10384: ST_TO_ADDR
// un := CreateVehicle ;
10385: LD_ADDR_VAR 0 2
10389: PUSH
10390: CALL_OW 45
10394: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10395: LD_VAR 0 2
10399: PPUSH
10400: LD_INT 1
10402: PPUSH
10403: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10407: LD_INT 35
10409: PPUSH
10410: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10414: LD_VAR 0 2
10418: PPUSH
10419: LD_INT 22
10421: PUSH
10422: LD_OWVAR 2
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PPUSH
10431: CALL_OW 69
10435: PPUSH
10436: LD_VAR 0 2
10440: PPUSH
10441: CALL_OW 74
10445: PPUSH
10446: CALL_OW 115
// until IsDead ( un ) ;
10450: LD_VAR 0 2
10454: PPUSH
10455: CALL_OW 301
10459: IFFALSE 10407
// end ;
10461: PPOPN 2
10463: END
// every 0 0$1 trigger StreamModeActive and sStu do
10464: LD_EXP 2
10468: PUSH
10469: LD_EXP 41
10473: AND
10474: IFFALSE 10490
10476: GO 10478
10478: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10479: LD_STRING displayStucuk();
10481: PPUSH
10482: CALL_OW 559
// ResetFog ;
10486: CALL_OW 335
// end ;
10490: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10491: LD_EXP 2
10495: PUSH
10496: LD_EXP 34
10500: AND
10501: IFFALSE 10642
10503: GO 10505
10505: DISABLE
10506: LD_INT 0
10508: PPUSH
10509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10510: LD_ADDR_VAR 0 2
10514: PUSH
10515: LD_INT 22
10517: PUSH
10518: LD_OWVAR 2
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 21
10529: PUSH
10530: LD_INT 1
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PPUSH
10541: CALL_OW 69
10545: ST_TO_ADDR
// if not tmp then
10546: LD_VAR 0 2
10550: NOT
10551: IFFALSE 10555
// exit ;
10553: GO 10642
// un := tmp [ rand ( 1 , tmp ) ] ;
10555: LD_ADDR_VAR 0 1
10559: PUSH
10560: LD_VAR 0 2
10564: PUSH
10565: LD_INT 1
10567: PPUSH
10568: LD_VAR 0 2
10572: PPUSH
10573: CALL_OW 12
10577: ARRAY
10578: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10579: LD_VAR 0 1
10583: PPUSH
10584: LD_INT 0
10586: PPUSH
10587: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10591: LD_VAR 0 1
10595: PPUSH
10596: LD_OWVAR 3
10600: PUSH
10601: LD_VAR 0 1
10605: DIFF
10606: PPUSH
10607: LD_VAR 0 1
10611: PPUSH
10612: CALL_OW 74
10616: PPUSH
10617: CALL_OW 115
// wait ( 0 0$20 ) ;
10621: LD_INT 700
10623: PPUSH
10624: CALL_OW 67
// SetSide ( un , your_side ) ;
10628: LD_VAR 0 1
10632: PPUSH
10633: LD_OWVAR 2
10637: PPUSH
10638: CALL_OW 235
// end ;
10642: PPOPN 2
10644: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10645: LD_EXP 2
10649: PUSH
10650: LD_EXP 35
10654: AND
10655: IFFALSE 10761
10657: GO 10659
10659: DISABLE
10660: LD_INT 0
10662: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10663: LD_ADDR_VAR 0 1
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_OWVAR 2
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 2
10682: PUSH
10683: LD_INT 30
10685: PUSH
10686: LD_INT 0
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: LD_INT 30
10695: PUSH
10696: LD_INT 1
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PPUSH
10712: CALL_OW 69
10716: ST_TO_ADDR
// if not depot then
10717: LD_VAR 0 1
10721: NOT
10722: IFFALSE 10726
// exit ;
10724: GO 10761
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10726: LD_VAR 0 1
10730: PUSH
10731: LD_INT 1
10733: ARRAY
10734: PPUSH
10735: CALL_OW 250
10739: PPUSH
10740: LD_VAR 0 1
10744: PUSH
10745: LD_INT 1
10747: ARRAY
10748: PPUSH
10749: CALL_OW 251
10753: PPUSH
10754: LD_INT 70
10756: PPUSH
10757: CALL_OW 495
// end ;
10761: PPOPN 1
10763: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10764: LD_EXP 2
10768: PUSH
10769: LD_EXP 36
10773: AND
10774: IFFALSE 10985
10776: GO 10778
10778: DISABLE
10779: LD_INT 0
10781: PPUSH
10782: PPUSH
10783: PPUSH
10784: PPUSH
10785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10786: LD_ADDR_VAR 0 5
10790: PUSH
10791: LD_INT 22
10793: PUSH
10794: LD_OWVAR 2
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 21
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PPUSH
10817: CALL_OW 69
10821: ST_TO_ADDR
// if not tmp then
10822: LD_VAR 0 5
10826: NOT
10827: IFFALSE 10831
// exit ;
10829: GO 10985
// for i in tmp do
10831: LD_ADDR_VAR 0 1
10835: PUSH
10836: LD_VAR 0 5
10840: PUSH
10841: FOR_IN
10842: IFFALSE 10983
// begin d := rand ( 0 , 5 ) ;
10844: LD_ADDR_VAR 0 4
10848: PUSH
10849: LD_INT 0
10851: PPUSH
10852: LD_INT 5
10854: PPUSH
10855: CALL_OW 12
10859: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10860: LD_ADDR_VAR 0 2
10864: PUSH
10865: LD_VAR 0 1
10869: PPUSH
10870: CALL_OW 250
10874: PPUSH
10875: LD_VAR 0 4
10879: PPUSH
10880: LD_INT 3
10882: PPUSH
10883: LD_INT 12
10885: PPUSH
10886: CALL_OW 12
10890: PPUSH
10891: CALL_OW 272
10895: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10896: LD_ADDR_VAR 0 3
10900: PUSH
10901: LD_VAR 0 1
10905: PPUSH
10906: CALL_OW 251
10910: PPUSH
10911: LD_VAR 0 4
10915: PPUSH
10916: LD_INT 3
10918: PPUSH
10919: LD_INT 12
10921: PPUSH
10922: CALL_OW 12
10926: PPUSH
10927: CALL_OW 273
10931: ST_TO_ADDR
// if ValidHex ( x , y ) then
10932: LD_VAR 0 2
10936: PPUSH
10937: LD_VAR 0 3
10941: PPUSH
10942: CALL_OW 488
10946: IFFALSE 10981
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10948: LD_VAR 0 1
10952: PPUSH
10953: LD_VAR 0 2
10957: PPUSH
10958: LD_VAR 0 3
10962: PPUSH
10963: LD_INT 3
10965: PPUSH
10966: LD_INT 6
10968: PPUSH
10969: CALL_OW 12
10973: PPUSH
10974: LD_INT 1
10976: PPUSH
10977: CALL_OW 483
// end ;
10981: GO 10841
10983: POP
10984: POP
// end ;
10985: PPOPN 5
10987: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10988: LD_EXP 2
10992: PUSH
10993: LD_EXP 37
10997: AND
10998: IFFALSE 11092
11000: GO 11002
11002: DISABLE
11003: LD_INT 0
11005: PPUSH
11006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11007: LD_ADDR_VAR 0 2
11011: PUSH
11012: LD_INT 22
11014: PUSH
11015: LD_OWVAR 2
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: LD_INT 32
11026: PUSH
11027: LD_INT 1
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 21
11036: PUSH
11037: LD_INT 2
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: LIST
11048: PPUSH
11049: CALL_OW 69
11053: ST_TO_ADDR
// if not tmp then
11054: LD_VAR 0 2
11058: NOT
11059: IFFALSE 11063
// exit ;
11061: GO 11092
// for i in tmp do
11063: LD_ADDR_VAR 0 1
11067: PUSH
11068: LD_VAR 0 2
11072: PUSH
11073: FOR_IN
11074: IFFALSE 11090
// SetFuel ( i , 0 ) ;
11076: LD_VAR 0 1
11080: PPUSH
11081: LD_INT 0
11083: PPUSH
11084: CALL_OW 240
11088: GO 11073
11090: POP
11091: POP
// end ;
11092: PPOPN 2
11094: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11095: LD_EXP 2
11099: PUSH
11100: LD_EXP 38
11104: AND
11105: IFFALSE 11171
11107: GO 11109
11109: DISABLE
11110: LD_INT 0
11112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11113: LD_ADDR_VAR 0 1
11117: PUSH
11118: LD_INT 22
11120: PUSH
11121: LD_OWVAR 2
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 30
11132: PUSH
11133: LD_INT 29
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PPUSH
11144: CALL_OW 69
11148: ST_TO_ADDR
// if not tmp then
11149: LD_VAR 0 1
11153: NOT
11154: IFFALSE 11158
// exit ;
11156: GO 11171
// DestroyUnit ( tmp [ 1 ] ) ;
11158: LD_VAR 0 1
11162: PUSH
11163: LD_INT 1
11165: ARRAY
11166: PPUSH
11167: CALL_OW 65
// end ;
11171: PPOPN 1
11173: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11174: LD_EXP 2
11178: PUSH
11179: LD_EXP 40
11183: AND
11184: IFFALSE 11313
11186: GO 11188
11188: DISABLE
11189: LD_INT 0
11191: PPUSH
// begin uc_side := 0 ;
11192: LD_ADDR_OWVAR 20
11196: PUSH
11197: LD_INT 0
11199: ST_TO_ADDR
// uc_nation := nation_arabian ;
11200: LD_ADDR_OWVAR 21
11204: PUSH
11205: LD_INT 2
11207: ST_TO_ADDR
// hc_gallery :=  ;
11208: LD_ADDR_OWVAR 33
11212: PUSH
11213: LD_STRING 
11215: ST_TO_ADDR
// hc_name :=  ;
11216: LD_ADDR_OWVAR 26
11220: PUSH
11221: LD_STRING 
11223: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11224: LD_INT 1
11226: PPUSH
11227: LD_INT 11
11229: PPUSH
11230: LD_INT 10
11232: PPUSH
11233: CALL_OW 380
// un := CreateHuman ;
11237: LD_ADDR_VAR 0 1
11241: PUSH
11242: CALL_OW 44
11246: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11247: LD_VAR 0 1
11251: PPUSH
11252: LD_INT 1
11254: PPUSH
11255: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11259: LD_INT 35
11261: PPUSH
11262: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11266: LD_VAR 0 1
11270: PPUSH
11271: LD_INT 22
11273: PUSH
11274: LD_OWVAR 2
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PPUSH
11283: CALL_OW 69
11287: PPUSH
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 74
11297: PPUSH
11298: CALL_OW 115
// until IsDead ( un ) ;
11302: LD_VAR 0 1
11306: PPUSH
11307: CALL_OW 301
11311: IFFALSE 11259
// end ;
11313: PPOPN 1
11315: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11316: LD_EXP 2
11320: PUSH
11321: LD_EXP 42
11325: AND
11326: IFFALSE 11338
11328: GO 11330
11330: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11331: LD_STRING earthquake(getX(game), 0, 32)
11333: PPUSH
11334: CALL_OW 559
11338: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11339: LD_EXP 2
11343: PUSH
11344: LD_EXP 43
11348: AND
11349: IFFALSE 11440
11351: GO 11353
11353: DISABLE
11354: LD_INT 0
11356: PPUSH
// begin enable ;
11357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11358: LD_ADDR_VAR 0 1
11362: PUSH
11363: LD_INT 22
11365: PUSH
11366: LD_OWVAR 2
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 21
11377: PUSH
11378: LD_INT 2
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 33
11387: PUSH
11388: LD_INT 3
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: PPUSH
11400: CALL_OW 69
11404: ST_TO_ADDR
// if not tmp then
11405: LD_VAR 0 1
11409: NOT
11410: IFFALSE 11414
// exit ;
11412: GO 11440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11414: LD_VAR 0 1
11418: PUSH
11419: LD_INT 1
11421: PPUSH
11422: LD_VAR 0 1
11426: PPUSH
11427: CALL_OW 12
11431: ARRAY
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 234
// end ;
11440: PPOPN 1
11442: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11443: LD_EXP 2
11447: PUSH
11448: LD_EXP 44
11452: AND
11453: IFFALSE 11594
11455: GO 11457
11457: DISABLE
11458: LD_INT 0
11460: PPUSH
11461: PPUSH
11462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11463: LD_ADDR_VAR 0 3
11467: PUSH
11468: LD_INT 22
11470: PUSH
11471: LD_OWVAR 2
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 25
11482: PUSH
11483: LD_INT 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PPUSH
11494: CALL_OW 69
11498: ST_TO_ADDR
// if not tmp then
11499: LD_VAR 0 3
11503: NOT
11504: IFFALSE 11508
// exit ;
11506: GO 11594
// un := tmp [ rand ( 1 , tmp ) ] ;
11508: LD_ADDR_VAR 0 2
11512: PUSH
11513: LD_VAR 0 3
11517: PUSH
11518: LD_INT 1
11520: PPUSH
11521: LD_VAR 0 3
11525: PPUSH
11526: CALL_OW 12
11530: ARRAY
11531: ST_TO_ADDR
// if Crawls ( un ) then
11532: LD_VAR 0 2
11536: PPUSH
11537: CALL_OW 318
11541: IFFALSE 11552
// ComWalk ( un ) ;
11543: LD_VAR 0 2
11547: PPUSH
11548: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11552: LD_VAR 0 2
11556: PPUSH
11557: LD_INT 9
11559: PPUSH
11560: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11564: LD_INT 28
11566: PPUSH
11567: LD_OWVAR 2
11571: PPUSH
11572: LD_INT 2
11574: PPUSH
11575: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11579: LD_INT 29
11581: PPUSH
11582: LD_OWVAR 2
11586: PPUSH
11587: LD_INT 2
11589: PPUSH
11590: CALL_OW 322
// end ;
11594: PPOPN 3
11596: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11597: LD_EXP 2
11601: PUSH
11602: LD_EXP 45
11606: AND
11607: IFFALSE 11718
11609: GO 11611
11611: DISABLE
11612: LD_INT 0
11614: PPUSH
11615: PPUSH
11616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11617: LD_ADDR_VAR 0 3
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: LD_OWVAR 2
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: LD_INT 25
11636: PUSH
11637: LD_INT 1
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: ST_TO_ADDR
// if not tmp then
11653: LD_VAR 0 3
11657: NOT
11658: IFFALSE 11662
// exit ;
11660: GO 11718
// un := tmp [ rand ( 1 , tmp ) ] ;
11662: LD_ADDR_VAR 0 2
11666: PUSH
11667: LD_VAR 0 3
11671: PUSH
11672: LD_INT 1
11674: PPUSH
11675: LD_VAR 0 3
11679: PPUSH
11680: CALL_OW 12
11684: ARRAY
11685: ST_TO_ADDR
// if Crawls ( un ) then
11686: LD_VAR 0 2
11690: PPUSH
11691: CALL_OW 318
11695: IFFALSE 11706
// ComWalk ( un ) ;
11697: LD_VAR 0 2
11701: PPUSH
11702: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11706: LD_VAR 0 2
11710: PPUSH
11711: LD_INT 8
11713: PPUSH
11714: CALL_OW 336
// end ;
11718: PPOPN 3
11720: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11721: LD_EXP 2
11725: PUSH
11726: LD_EXP 46
11730: AND
11731: IFFALSE 11875
11733: GO 11735
11735: DISABLE
11736: LD_INT 0
11738: PPUSH
11739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_INT 22
11747: PUSH
11748: LD_OWVAR 2
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 21
11759: PUSH
11760: LD_INT 2
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: LD_INT 34
11772: PUSH
11773: LD_INT 12
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 34
11782: PUSH
11783: LD_INT 51
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 34
11792: PUSH
11793: LD_INT 32
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: PPUSH
11811: CALL_OW 69
11815: ST_TO_ADDR
// if not tmp then
11816: LD_VAR 0 2
11820: NOT
11821: IFFALSE 11825
// exit ;
11823: GO 11875
// for i in tmp do
11825: LD_ADDR_VAR 0 1
11829: PUSH
11830: LD_VAR 0 2
11834: PUSH
11835: FOR_IN
11836: IFFALSE 11873
// if GetCargo ( i , mat_artifact ) = 0 then
11838: LD_VAR 0 1
11842: PPUSH
11843: LD_INT 4
11845: PPUSH
11846: CALL_OW 289
11850: PUSH
11851: LD_INT 0
11853: EQUAL
11854: IFFALSE 11871
// SetCargo ( i , mat_siberit , 100 ) ;
11856: LD_VAR 0 1
11860: PPUSH
11861: LD_INT 3
11863: PPUSH
11864: LD_INT 100
11866: PPUSH
11867: CALL_OW 290
11871: GO 11835
11873: POP
11874: POP
// end ;
11875: PPOPN 2
11877: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11878: LD_EXP 2
11882: PUSH
11883: LD_EXP 47
11887: AND
11888: IFFALSE 12071
11890: GO 11892
11892: DISABLE
11893: LD_INT 0
11895: PPUSH
11896: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11897: LD_ADDR_VAR 0 2
11901: PUSH
11902: LD_INT 22
11904: PUSH
11905: LD_OWVAR 2
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PPUSH
11914: CALL_OW 69
11918: ST_TO_ADDR
// if not tmp then
11919: LD_VAR 0 2
11923: NOT
11924: IFFALSE 11928
// exit ;
11926: GO 12071
// for i := 1 to 2 do
11928: LD_ADDR_VAR 0 1
11932: PUSH
11933: DOUBLE
11934: LD_INT 1
11936: DEC
11937: ST_TO_ADDR
11938: LD_INT 2
11940: PUSH
11941: FOR_TO
11942: IFFALSE 12069
// begin uc_side := your_side ;
11944: LD_ADDR_OWVAR 20
11948: PUSH
11949: LD_OWVAR 2
11953: ST_TO_ADDR
// uc_nation := nation_american ;
11954: LD_ADDR_OWVAR 21
11958: PUSH
11959: LD_INT 1
11961: ST_TO_ADDR
// vc_chassis := us_morphling ;
11962: LD_ADDR_OWVAR 37
11966: PUSH
11967: LD_INT 5
11969: ST_TO_ADDR
// vc_engine := engine_siberite ;
11970: LD_ADDR_OWVAR 39
11974: PUSH
11975: LD_INT 3
11977: ST_TO_ADDR
// vc_control := control_computer ;
11978: LD_ADDR_OWVAR 38
11982: PUSH
11983: LD_INT 3
11985: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11986: LD_ADDR_OWVAR 40
11990: PUSH
11991: LD_INT 10
11993: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11994: LD_VAR 0 2
11998: PUSH
11999: LD_INT 1
12001: ARRAY
12002: PPUSH
12003: CALL_OW 310
12007: NOT
12008: IFFALSE 12055
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12010: CALL_OW 45
12014: PPUSH
12015: LD_VAR 0 2
12019: PUSH
12020: LD_INT 1
12022: ARRAY
12023: PPUSH
12024: CALL_OW 250
12028: PPUSH
12029: LD_VAR 0 2
12033: PUSH
12034: LD_INT 1
12036: ARRAY
12037: PPUSH
12038: CALL_OW 251
12042: PPUSH
12043: LD_INT 12
12045: PPUSH
12046: LD_INT 1
12048: PPUSH
12049: CALL_OW 50
12053: GO 12067
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12055: CALL_OW 45
12059: PPUSH
12060: LD_INT 1
12062: PPUSH
12063: CALL_OW 51
// end ;
12067: GO 11941
12069: POP
12070: POP
// end ;
12071: PPOPN 2
12073: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12074: LD_EXP 2
12078: PUSH
12079: LD_EXP 48
12083: AND
12084: IFFALSE 12306
12086: GO 12088
12088: DISABLE
12089: LD_INT 0
12091: PPUSH
12092: PPUSH
12093: PPUSH
12094: PPUSH
12095: PPUSH
12096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12097: LD_ADDR_VAR 0 6
12101: PUSH
12102: LD_INT 22
12104: PUSH
12105: LD_OWVAR 2
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: LD_INT 21
12116: PUSH
12117: LD_INT 1
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 3
12126: PUSH
12127: LD_INT 23
12129: PUSH
12130: LD_INT 0
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: PPUSH
12146: CALL_OW 69
12150: ST_TO_ADDR
// if not tmp then
12151: LD_VAR 0 6
12155: NOT
12156: IFFALSE 12160
// exit ;
12158: GO 12306
// s1 := rand ( 1 , 4 ) ;
12160: LD_ADDR_VAR 0 2
12164: PUSH
12165: LD_INT 1
12167: PPUSH
12168: LD_INT 4
12170: PPUSH
12171: CALL_OW 12
12175: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12176: LD_ADDR_VAR 0 4
12180: PUSH
12181: LD_VAR 0 6
12185: PUSH
12186: LD_INT 1
12188: ARRAY
12189: PPUSH
12190: LD_VAR 0 2
12194: PPUSH
12195: CALL_OW 259
12199: ST_TO_ADDR
// if s1 = 1 then
12200: LD_VAR 0 2
12204: PUSH
12205: LD_INT 1
12207: EQUAL
12208: IFFALSE 12228
// s2 := rand ( 2 , 4 ) else
12210: LD_ADDR_VAR 0 3
12214: PUSH
12215: LD_INT 2
12217: PPUSH
12218: LD_INT 4
12220: PPUSH
12221: CALL_OW 12
12225: ST_TO_ADDR
12226: GO 12236
// s2 := 1 ;
12228: LD_ADDR_VAR 0 3
12232: PUSH
12233: LD_INT 1
12235: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12236: LD_ADDR_VAR 0 5
12240: PUSH
12241: LD_VAR 0 6
12245: PUSH
12246: LD_INT 1
12248: ARRAY
12249: PPUSH
12250: LD_VAR 0 3
12254: PPUSH
12255: CALL_OW 259
12259: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12260: LD_VAR 0 6
12264: PUSH
12265: LD_INT 1
12267: ARRAY
12268: PPUSH
12269: LD_VAR 0 2
12273: PPUSH
12274: LD_VAR 0 5
12278: PPUSH
12279: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12283: LD_VAR 0 6
12287: PUSH
12288: LD_INT 1
12290: ARRAY
12291: PPUSH
12292: LD_VAR 0 3
12296: PPUSH
12297: LD_VAR 0 4
12301: PPUSH
12302: CALL_OW 237
// end ;
12306: PPOPN 6
12308: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12309: LD_EXP 2
12313: PUSH
12314: LD_EXP 49
12318: AND
12319: IFFALSE 12398
12321: GO 12323
12323: DISABLE
12324: LD_INT 0
12326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12327: LD_ADDR_VAR 0 1
12331: PUSH
12332: LD_INT 22
12334: PUSH
12335: LD_OWVAR 2
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 30
12346: PUSH
12347: LD_INT 3
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: ST_TO_ADDR
// if not tmp then
12363: LD_VAR 0 1
12367: NOT
12368: IFFALSE 12372
// exit ;
12370: GO 12398
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12372: LD_VAR 0 1
12376: PUSH
12377: LD_INT 1
12379: PPUSH
12380: LD_VAR 0 1
12384: PPUSH
12385: CALL_OW 12
12389: ARRAY
12390: PPUSH
12391: LD_INT 1
12393: PPUSH
12394: CALL_OW 234
// end ;
12398: PPOPN 1
12400: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12401: LD_EXP 2
12405: PUSH
12406: LD_EXP 50
12410: AND
12411: IFFALSE 12523
12413: GO 12415
12415: DISABLE
12416: LD_INT 0
12418: PPUSH
12419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12420: LD_ADDR_VAR 0 2
12424: PUSH
12425: LD_INT 22
12427: PUSH
12428: LD_OWVAR 2
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 2
12439: PUSH
12440: LD_INT 30
12442: PUSH
12443: LD_INT 27
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 30
12452: PUSH
12453: LD_INT 26
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 30
12462: PUSH
12463: LD_INT 28
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: ST_TO_ADDR
// if not tmp then
12485: LD_VAR 0 2
12489: NOT
12490: IFFALSE 12494
// exit ;
12492: GO 12523
// for i in tmp do
12494: LD_ADDR_VAR 0 1
12498: PUSH
12499: LD_VAR 0 2
12503: PUSH
12504: FOR_IN
12505: IFFALSE 12521
// SetLives ( i , 1 ) ;
12507: LD_VAR 0 1
12511: PPUSH
12512: LD_INT 1
12514: PPUSH
12515: CALL_OW 234
12519: GO 12504
12521: POP
12522: POP
// end ;
12523: PPOPN 2
12525: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12526: LD_EXP 2
12530: PUSH
12531: LD_EXP 51
12535: AND
12536: IFFALSE 12823
12538: GO 12540
12540: DISABLE
12541: LD_INT 0
12543: PPUSH
12544: PPUSH
12545: PPUSH
// begin i := rand ( 1 , 7 ) ;
12546: LD_ADDR_VAR 0 1
12550: PUSH
12551: LD_INT 1
12553: PPUSH
12554: LD_INT 7
12556: PPUSH
12557: CALL_OW 12
12561: ST_TO_ADDR
// case i of 1 :
12562: LD_VAR 0 1
12566: PUSH
12567: LD_INT 1
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 12585
12575: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12576: LD_STRING earthquake(getX(game), 0, 32)
12578: PPUSH
12579: CALL_OW 559
12583: GO 12823
12585: LD_INT 2
12587: DOUBLE
12588: EQUAL
12589: IFTRUE 12593
12591: GO 12607
12593: POP
// begin ToLua ( displayStucuk(); ) ;
12594: LD_STRING displayStucuk();
12596: PPUSH
12597: CALL_OW 559
// ResetFog ;
12601: CALL_OW 335
// end ; 3 :
12605: GO 12823
12607: LD_INT 3
12609: DOUBLE
12610: EQUAL
12611: IFTRUE 12615
12613: GO 12719
12615: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12616: LD_ADDR_VAR 0 2
12620: PUSH
12621: LD_INT 22
12623: PUSH
12624: LD_OWVAR 2
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 25
12635: PUSH
12636: LD_INT 1
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PPUSH
12647: CALL_OW 69
12651: ST_TO_ADDR
// if not tmp then
12652: LD_VAR 0 2
12656: NOT
12657: IFFALSE 12661
// exit ;
12659: GO 12823
// un := tmp [ rand ( 1 , tmp ) ] ;
12661: LD_ADDR_VAR 0 3
12665: PUSH
12666: LD_VAR 0 2
12670: PUSH
12671: LD_INT 1
12673: PPUSH
12674: LD_VAR 0 2
12678: PPUSH
12679: CALL_OW 12
12683: ARRAY
12684: ST_TO_ADDR
// if Crawls ( un ) then
12685: LD_VAR 0 3
12689: PPUSH
12690: CALL_OW 318
12694: IFFALSE 12705
// ComWalk ( un ) ;
12696: LD_VAR 0 3
12700: PPUSH
12701: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12705: LD_VAR 0 3
12709: PPUSH
12710: LD_INT 8
12712: PPUSH
12713: CALL_OW 336
// end ; 4 :
12717: GO 12823
12719: LD_INT 4
12721: DOUBLE
12722: EQUAL
12723: IFTRUE 12727
12725: GO 12801
12727: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12728: LD_ADDR_VAR 0 2
12732: PUSH
12733: LD_INT 22
12735: PUSH
12736: LD_OWVAR 2
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: PUSH
12745: LD_INT 30
12747: PUSH
12748: LD_INT 29
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PPUSH
12759: CALL_OW 69
12763: ST_TO_ADDR
// if not tmp then
12764: LD_VAR 0 2
12768: NOT
12769: IFFALSE 12773
// exit ;
12771: GO 12823
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12773: LD_VAR 0 2
12777: PUSH
12778: LD_INT 1
12780: ARRAY
12781: PPUSH
12782: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12786: LD_VAR 0 2
12790: PUSH
12791: LD_INT 1
12793: ARRAY
12794: PPUSH
12795: CALL_OW 65
// end ; 5 .. 7 :
12799: GO 12823
12801: LD_INT 5
12803: DOUBLE
12804: GREATEREQUAL
12805: IFFALSE 12813
12807: LD_INT 7
12809: DOUBLE
12810: LESSEQUAL
12811: IFTRUE 12815
12813: GO 12822
12815: POP
// StreamSibBomb ; end ;
12816: CALL 9060 0 0
12820: GO 12823
12822: POP
// end ;
12823: PPOPN 3
12825: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12826: LD_EXP 2
12830: PUSH
12831: LD_EXP 52
12835: AND
12836: IFFALSE 12992
12838: GO 12840
12840: DISABLE
12841: LD_INT 0
12843: PPUSH
12844: PPUSH
12845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12846: LD_ADDR_VAR 0 2
12850: PUSH
12851: LD_INT 81
12853: PUSH
12854: LD_OWVAR 2
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: PUSH
12863: LD_INT 2
12865: PUSH
12866: LD_INT 21
12868: PUSH
12869: LD_INT 1
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: LD_INT 21
12878: PUSH
12879: LD_INT 2
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 69
12899: ST_TO_ADDR
// if not tmp then
12900: LD_VAR 0 2
12904: NOT
12905: IFFALSE 12909
// exit ;
12907: GO 12992
// p := 0 ;
12909: LD_ADDR_VAR 0 3
12913: PUSH
12914: LD_INT 0
12916: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12917: LD_INT 35
12919: PPUSH
12920: CALL_OW 67
// p := p + 1 ;
12924: LD_ADDR_VAR 0 3
12928: PUSH
12929: LD_VAR 0 3
12933: PUSH
12934: LD_INT 1
12936: PLUS
12937: ST_TO_ADDR
// for i in tmp do
12938: LD_ADDR_VAR 0 1
12942: PUSH
12943: LD_VAR 0 2
12947: PUSH
12948: FOR_IN
12949: IFFALSE 12980
// if GetLives ( i ) < 1000 then
12951: LD_VAR 0 1
12955: PPUSH
12956: CALL_OW 256
12960: PUSH
12961: LD_INT 1000
12963: LESS
12964: IFFALSE 12978
// SetLives ( i , 1000 ) ;
12966: LD_VAR 0 1
12970: PPUSH
12971: LD_INT 1000
12973: PPUSH
12974: CALL_OW 234
12978: GO 12948
12980: POP
12981: POP
// until p > 20 ;
12982: LD_VAR 0 3
12986: PUSH
12987: LD_INT 20
12989: GREATER
12990: IFFALSE 12917
// end ;
12992: PPOPN 3
12994: END
// every 0 0$1 trigger StreamModeActive and sTime do
12995: LD_EXP 2
12999: PUSH
13000: LD_EXP 53
13004: AND
13005: IFFALSE 13040
13007: GO 13009
13009: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13010: LD_INT 28
13012: PPUSH
13013: LD_OWVAR 2
13017: PPUSH
13018: LD_INT 2
13020: PPUSH
13021: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13025: LD_INT 30
13027: PPUSH
13028: LD_OWVAR 2
13032: PPUSH
13033: LD_INT 2
13035: PPUSH
13036: CALL_OW 322
// end ;
13040: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13041: LD_EXP 2
13045: PUSH
13046: LD_EXP 54
13050: AND
13051: IFFALSE 13172
13053: GO 13055
13055: DISABLE
13056: LD_INT 0
13058: PPUSH
13059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13060: LD_ADDR_VAR 0 2
13064: PUSH
13065: LD_INT 22
13067: PUSH
13068: LD_OWVAR 2
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: LD_INT 21
13079: PUSH
13080: LD_INT 1
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 3
13089: PUSH
13090: LD_INT 23
13092: PUSH
13093: LD_INT 0
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 69
13113: ST_TO_ADDR
// if not tmp then
13114: LD_VAR 0 2
13118: NOT
13119: IFFALSE 13123
// exit ;
13121: GO 13172
// for i in tmp do
13123: LD_ADDR_VAR 0 1
13127: PUSH
13128: LD_VAR 0 2
13132: PUSH
13133: FOR_IN
13134: IFFALSE 13170
// begin if Crawls ( i ) then
13136: LD_VAR 0 1
13140: PPUSH
13141: CALL_OW 318
13145: IFFALSE 13156
// ComWalk ( i ) ;
13147: LD_VAR 0 1
13151: PPUSH
13152: CALL_OW 138
// SetClass ( i , 2 ) ;
13156: LD_VAR 0 1
13160: PPUSH
13161: LD_INT 2
13163: PPUSH
13164: CALL_OW 336
// end ;
13168: GO 13133
13170: POP
13171: POP
// end ;
13172: PPOPN 2
13174: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13175: LD_EXP 2
13179: PUSH
13180: LD_EXP 55
13184: AND
13185: IFFALSE 13473
13187: GO 13189
13189: DISABLE
13190: LD_INT 0
13192: PPUSH
13193: PPUSH
13194: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13195: LD_OWVAR 2
13199: PPUSH
13200: LD_INT 9
13202: PPUSH
13203: LD_INT 1
13205: PPUSH
13206: LD_INT 1
13208: PPUSH
13209: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13213: LD_INT 9
13215: PPUSH
13216: LD_OWVAR 2
13220: PPUSH
13221: CALL_OW 343
// uc_side := 9 ;
13225: LD_ADDR_OWVAR 20
13229: PUSH
13230: LD_INT 9
13232: ST_TO_ADDR
// uc_nation := 2 ;
13233: LD_ADDR_OWVAR 21
13237: PUSH
13238: LD_INT 2
13240: ST_TO_ADDR
// hc_name := Dark Warrior ;
13241: LD_ADDR_OWVAR 26
13245: PUSH
13246: LD_STRING Dark Warrior
13248: ST_TO_ADDR
// hc_gallery :=  ;
13249: LD_ADDR_OWVAR 33
13253: PUSH
13254: LD_STRING 
13256: ST_TO_ADDR
// hc_noskilllimit := true ;
13257: LD_ADDR_OWVAR 76
13261: PUSH
13262: LD_INT 1
13264: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13265: LD_ADDR_OWVAR 31
13269: PUSH
13270: LD_INT 30
13272: PUSH
13273: LD_INT 30
13275: PUSH
13276: LD_INT 30
13278: PUSH
13279: LD_INT 30
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: ST_TO_ADDR
// un := CreateHuman ;
13288: LD_ADDR_VAR 0 3
13292: PUSH
13293: CALL_OW 44
13297: ST_TO_ADDR
// hc_noskilllimit := false ;
13298: LD_ADDR_OWVAR 76
13302: PUSH
13303: LD_INT 0
13305: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13306: LD_VAR 0 3
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL_OW 51
// ToLua ( playRanger() ) ;
13318: LD_STRING playRanger()
13320: PPUSH
13321: CALL_OW 559
// p := 0 ;
13325: LD_ADDR_VAR 0 2
13329: PUSH
13330: LD_INT 0
13332: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13333: LD_INT 35
13335: PPUSH
13336: CALL_OW 67
// p := p + 1 ;
13340: LD_ADDR_VAR 0 2
13344: PUSH
13345: LD_VAR 0 2
13349: PUSH
13350: LD_INT 1
13352: PLUS
13353: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13354: LD_VAR 0 3
13358: PPUSH
13359: CALL_OW 256
13363: PUSH
13364: LD_INT 1000
13366: LESS
13367: IFFALSE 13381
// SetLives ( un , 1000 ) ;
13369: LD_VAR 0 3
13373: PPUSH
13374: LD_INT 1000
13376: PPUSH
13377: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13381: LD_VAR 0 3
13385: PPUSH
13386: LD_INT 81
13388: PUSH
13389: LD_OWVAR 2
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 91
13400: PUSH
13401: LD_VAR 0 3
13405: PUSH
13406: LD_INT 30
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: LIST
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PPUSH
13418: CALL_OW 69
13422: PPUSH
13423: LD_VAR 0 3
13427: PPUSH
13428: CALL_OW 74
13432: PPUSH
13433: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13437: LD_VAR 0 2
13441: PUSH
13442: LD_INT 80
13444: GREATER
13445: PUSH
13446: LD_VAR 0 3
13450: PPUSH
13451: CALL_OW 301
13455: OR
13456: IFFALSE 13333
// if un then
13458: LD_VAR 0 3
13462: IFFALSE 13473
// RemoveUnit ( un ) ;
13464: LD_VAR 0 3
13468: PPUSH
13469: CALL_OW 64
// end ;
13473: PPOPN 3
13475: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13476: LD_EXP 56
13480: IFFALSE 13596
13482: GO 13484
13484: DISABLE
13485: LD_INT 0
13487: PPUSH
13488: PPUSH
13489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13490: LD_ADDR_VAR 0 2
13494: PUSH
13495: LD_INT 81
13497: PUSH
13498: LD_OWVAR 2
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 21
13509: PUSH
13510: LD_INT 1
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PPUSH
13521: CALL_OW 69
13525: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13526: LD_STRING playComputer()
13528: PPUSH
13529: CALL_OW 559
// if not tmp then
13533: LD_VAR 0 2
13537: NOT
13538: IFFALSE 13542
// exit ;
13540: GO 13596
// for i in tmp do
13542: LD_ADDR_VAR 0 1
13546: PUSH
13547: LD_VAR 0 2
13551: PUSH
13552: FOR_IN
13553: IFFALSE 13594
// for j := 1 to 4 do
13555: LD_ADDR_VAR 0 3
13559: PUSH
13560: DOUBLE
13561: LD_INT 1
13563: DEC
13564: ST_TO_ADDR
13565: LD_INT 4
13567: PUSH
13568: FOR_TO
13569: IFFALSE 13590
// SetSkill ( i , j , 10 ) ;
13571: LD_VAR 0 1
13575: PPUSH
13576: LD_VAR 0 3
13580: PPUSH
13581: LD_INT 10
13583: PPUSH
13584: CALL_OW 237
13588: GO 13568
13590: POP
13591: POP
13592: GO 13552
13594: POP
13595: POP
// end ;
13596: PPOPN 3
13598: END
// every 0 0$1 trigger s30 do var i , tmp ;
13599: LD_EXP 57
13603: IFFALSE 13672
13605: GO 13607
13607: DISABLE
13608: LD_INT 0
13610: PPUSH
13611: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13612: LD_ADDR_VAR 0 2
13616: PUSH
13617: LD_INT 22
13619: PUSH
13620: LD_OWVAR 2
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PPUSH
13629: CALL_OW 69
13633: ST_TO_ADDR
// if not tmp then
13634: LD_VAR 0 2
13638: NOT
13639: IFFALSE 13643
// exit ;
13641: GO 13672
// for i in tmp do
13643: LD_ADDR_VAR 0 1
13647: PUSH
13648: LD_VAR 0 2
13652: PUSH
13653: FOR_IN
13654: IFFALSE 13670
// SetLives ( i , 300 ) ;
13656: LD_VAR 0 1
13660: PPUSH
13661: LD_INT 300
13663: PPUSH
13664: CALL_OW 234
13668: GO 13653
13670: POP
13671: POP
// end ;
13672: PPOPN 2
13674: END
// every 0 0$1 trigger s60 do var i , tmp ;
13675: LD_EXP 58
13679: IFFALSE 13748
13681: GO 13683
13683: DISABLE
13684: LD_INT 0
13686: PPUSH
13687: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13688: LD_ADDR_VAR 0 2
13692: PUSH
13693: LD_INT 22
13695: PUSH
13696: LD_OWVAR 2
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PPUSH
13705: CALL_OW 69
13709: ST_TO_ADDR
// if not tmp then
13710: LD_VAR 0 2
13714: NOT
13715: IFFALSE 13719
// exit ;
13717: GO 13748
// for i in tmp do
13719: LD_ADDR_VAR 0 1
13723: PUSH
13724: LD_VAR 0 2
13728: PUSH
13729: FOR_IN
13730: IFFALSE 13746
// SetLives ( i , 600 ) ;
13732: LD_VAR 0 1
13736: PPUSH
13737: LD_INT 600
13739: PPUSH
13740: CALL_OW 234
13744: GO 13729
13746: POP
13747: POP
// end ;
13748: PPOPN 2
13750: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13751: LD_INT 0
13753: PPUSH
// case cmd of 301 :
13754: LD_VAR 0 1
13758: PUSH
13759: LD_INT 301
13761: DOUBLE
13762: EQUAL
13763: IFTRUE 13767
13765: GO 13799
13767: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13768: LD_VAR 0 6
13772: PPUSH
13773: LD_VAR 0 7
13777: PPUSH
13778: LD_VAR 0 8
13782: PPUSH
13783: LD_VAR 0 4
13787: PPUSH
13788: LD_VAR 0 5
13792: PPUSH
13793: CALL 15000 0 5
13797: GO 13920
13799: LD_INT 302
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13844
13807: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13808: LD_VAR 0 6
13812: PPUSH
13813: LD_VAR 0 7
13817: PPUSH
13818: LD_VAR 0 8
13822: PPUSH
13823: LD_VAR 0 9
13827: PPUSH
13828: LD_VAR 0 4
13832: PPUSH
13833: LD_VAR 0 5
13837: PPUSH
13838: CALL 15091 0 6
13842: GO 13920
13844: LD_INT 303
13846: DOUBLE
13847: EQUAL
13848: IFTRUE 13852
13850: GO 13889
13852: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13853: LD_VAR 0 6
13857: PPUSH
13858: LD_VAR 0 7
13862: PPUSH
13863: LD_VAR 0 8
13867: PPUSH
13868: LD_VAR 0 9
13872: PPUSH
13873: LD_VAR 0 4
13877: PPUSH
13878: LD_VAR 0 5
13882: PPUSH
13883: CALL 13925 0 6
13887: GO 13920
13889: LD_INT 304
13891: DOUBLE
13892: EQUAL
13893: IFTRUE 13897
13895: GO 13919
13897: POP
// hHackTeleport ( unit , x , y ) ; end ;
13898: LD_VAR 0 2
13902: PPUSH
13903: LD_VAR 0 4
13907: PPUSH
13908: LD_VAR 0 5
13912: PPUSH
13913: CALL 15684 0 3
13917: GO 13920
13919: POP
// end ;
13920: LD_VAR 0 12
13924: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13925: LD_INT 0
13927: PPUSH
13928: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13929: LD_VAR 0 1
13933: PUSH
13934: LD_INT 1
13936: LESS
13937: PUSH
13938: LD_VAR 0 1
13942: PUSH
13943: LD_INT 3
13945: GREATER
13946: OR
13947: PUSH
13948: LD_VAR 0 5
13952: PPUSH
13953: LD_VAR 0 6
13957: PPUSH
13958: CALL_OW 428
13962: OR
13963: IFFALSE 13967
// exit ;
13965: GO 14687
// uc_side := your_side ;
13967: LD_ADDR_OWVAR 20
13971: PUSH
13972: LD_OWVAR 2
13976: ST_TO_ADDR
// uc_nation := nation ;
13977: LD_ADDR_OWVAR 21
13981: PUSH
13982: LD_VAR 0 1
13986: ST_TO_ADDR
// bc_level = 1 ;
13987: LD_ADDR_OWVAR 43
13991: PUSH
13992: LD_INT 1
13994: ST_TO_ADDR
// case btype of 1 :
13995: LD_VAR 0 2
13999: PUSH
14000: LD_INT 1
14002: DOUBLE
14003: EQUAL
14004: IFTRUE 14008
14006: GO 14019
14008: POP
// bc_type := b_depot ; 2 :
14009: LD_ADDR_OWVAR 42
14013: PUSH
14014: LD_INT 0
14016: ST_TO_ADDR
14017: GO 14631
14019: LD_INT 2
14021: DOUBLE
14022: EQUAL
14023: IFTRUE 14027
14025: GO 14038
14027: POP
// bc_type := b_warehouse ; 3 :
14028: LD_ADDR_OWVAR 42
14032: PUSH
14033: LD_INT 1
14035: ST_TO_ADDR
14036: GO 14631
14038: LD_INT 3
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14046
14044: GO 14057
14046: POP
// bc_type := b_lab ; 4 .. 9 :
14047: LD_ADDR_OWVAR 42
14051: PUSH
14052: LD_INT 6
14054: ST_TO_ADDR
14055: GO 14631
14057: LD_INT 4
14059: DOUBLE
14060: GREATEREQUAL
14061: IFFALSE 14069
14063: LD_INT 9
14065: DOUBLE
14066: LESSEQUAL
14067: IFTRUE 14071
14069: GO 14123
14071: POP
// begin bc_type := b_lab_half ;
14072: LD_ADDR_OWVAR 42
14076: PUSH
14077: LD_INT 7
14079: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14080: LD_ADDR_OWVAR 44
14084: PUSH
14085: LD_INT 10
14087: PUSH
14088: LD_INT 11
14090: PUSH
14091: LD_INT 12
14093: PUSH
14094: LD_INT 15
14096: PUSH
14097: LD_INT 14
14099: PUSH
14100: LD_INT 13
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: PUSH
14111: LD_VAR 0 2
14115: PUSH
14116: LD_INT 3
14118: MINUS
14119: ARRAY
14120: ST_TO_ADDR
// end ; 10 .. 13 :
14121: GO 14631
14123: LD_INT 10
14125: DOUBLE
14126: GREATEREQUAL
14127: IFFALSE 14135
14129: LD_INT 13
14131: DOUBLE
14132: LESSEQUAL
14133: IFTRUE 14137
14135: GO 14214
14137: POP
// begin bc_type := b_lab_full ;
14138: LD_ADDR_OWVAR 42
14142: PUSH
14143: LD_INT 8
14145: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14146: LD_ADDR_OWVAR 44
14150: PUSH
14151: LD_INT 10
14153: PUSH
14154: LD_INT 12
14156: PUSH
14157: LD_INT 14
14159: PUSH
14160: LD_INT 13
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: PUSH
14169: LD_VAR 0 2
14173: PUSH
14174: LD_INT 9
14176: MINUS
14177: ARRAY
14178: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14179: LD_ADDR_OWVAR 45
14183: PUSH
14184: LD_INT 11
14186: PUSH
14187: LD_INT 15
14189: PUSH
14190: LD_INT 12
14192: PUSH
14193: LD_INT 15
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: PUSH
14202: LD_VAR 0 2
14206: PUSH
14207: LD_INT 9
14209: MINUS
14210: ARRAY
14211: ST_TO_ADDR
// end ; 14 :
14212: GO 14631
14214: LD_INT 14
14216: DOUBLE
14217: EQUAL
14218: IFTRUE 14222
14220: GO 14233
14222: POP
// bc_type := b_workshop ; 15 :
14223: LD_ADDR_OWVAR 42
14227: PUSH
14228: LD_INT 2
14230: ST_TO_ADDR
14231: GO 14631
14233: LD_INT 15
14235: DOUBLE
14236: EQUAL
14237: IFTRUE 14241
14239: GO 14252
14241: POP
// bc_type := b_factory ; 16 :
14242: LD_ADDR_OWVAR 42
14246: PUSH
14247: LD_INT 3
14249: ST_TO_ADDR
14250: GO 14631
14252: LD_INT 16
14254: DOUBLE
14255: EQUAL
14256: IFTRUE 14260
14258: GO 14271
14260: POP
// bc_type := b_ext_gun ; 17 :
14261: LD_ADDR_OWVAR 42
14265: PUSH
14266: LD_INT 17
14268: ST_TO_ADDR
14269: GO 14631
14271: LD_INT 17
14273: DOUBLE
14274: EQUAL
14275: IFTRUE 14279
14277: GO 14307
14279: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14280: LD_ADDR_OWVAR 42
14284: PUSH
14285: LD_INT 19
14287: PUSH
14288: LD_INT 23
14290: PUSH
14291: LD_INT 19
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: PUSH
14299: LD_VAR 0 1
14303: ARRAY
14304: ST_TO_ADDR
14305: GO 14631
14307: LD_INT 18
14309: DOUBLE
14310: EQUAL
14311: IFTRUE 14315
14313: GO 14326
14315: POP
// bc_type := b_ext_radar ; 19 :
14316: LD_ADDR_OWVAR 42
14320: PUSH
14321: LD_INT 20
14323: ST_TO_ADDR
14324: GO 14631
14326: LD_INT 19
14328: DOUBLE
14329: EQUAL
14330: IFTRUE 14334
14332: GO 14345
14334: POP
// bc_type := b_ext_radio ; 20 :
14335: LD_ADDR_OWVAR 42
14339: PUSH
14340: LD_INT 22
14342: ST_TO_ADDR
14343: GO 14631
14345: LD_INT 20
14347: DOUBLE
14348: EQUAL
14349: IFTRUE 14353
14351: GO 14364
14353: POP
// bc_type := b_ext_siberium ; 21 :
14354: LD_ADDR_OWVAR 42
14358: PUSH
14359: LD_INT 21
14361: ST_TO_ADDR
14362: GO 14631
14364: LD_INT 21
14366: DOUBLE
14367: EQUAL
14368: IFTRUE 14372
14370: GO 14383
14372: POP
// bc_type := b_ext_computer ; 22 :
14373: LD_ADDR_OWVAR 42
14377: PUSH
14378: LD_INT 24
14380: ST_TO_ADDR
14381: GO 14631
14383: LD_INT 22
14385: DOUBLE
14386: EQUAL
14387: IFTRUE 14391
14389: GO 14402
14391: POP
// bc_type := b_ext_track ; 23 :
14392: LD_ADDR_OWVAR 42
14396: PUSH
14397: LD_INT 16
14399: ST_TO_ADDR
14400: GO 14631
14402: LD_INT 23
14404: DOUBLE
14405: EQUAL
14406: IFTRUE 14410
14408: GO 14421
14410: POP
// bc_type := b_ext_laser ; 24 :
14411: LD_ADDR_OWVAR 42
14415: PUSH
14416: LD_INT 25
14418: ST_TO_ADDR
14419: GO 14631
14421: LD_INT 24
14423: DOUBLE
14424: EQUAL
14425: IFTRUE 14429
14427: GO 14440
14429: POP
// bc_type := b_control_tower ; 25 :
14430: LD_ADDR_OWVAR 42
14434: PUSH
14435: LD_INT 36
14437: ST_TO_ADDR
14438: GO 14631
14440: LD_INT 25
14442: DOUBLE
14443: EQUAL
14444: IFTRUE 14448
14446: GO 14459
14448: POP
// bc_type := b_breastwork ; 26 :
14449: LD_ADDR_OWVAR 42
14453: PUSH
14454: LD_INT 31
14456: ST_TO_ADDR
14457: GO 14631
14459: LD_INT 26
14461: DOUBLE
14462: EQUAL
14463: IFTRUE 14467
14465: GO 14478
14467: POP
// bc_type := b_bunker ; 27 :
14468: LD_ADDR_OWVAR 42
14472: PUSH
14473: LD_INT 32
14475: ST_TO_ADDR
14476: GO 14631
14478: LD_INT 27
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14497
14486: POP
// bc_type := b_turret ; 28 :
14487: LD_ADDR_OWVAR 42
14491: PUSH
14492: LD_INT 33
14494: ST_TO_ADDR
14495: GO 14631
14497: LD_INT 28
14499: DOUBLE
14500: EQUAL
14501: IFTRUE 14505
14503: GO 14516
14505: POP
// bc_type := b_armoury ; 29 :
14506: LD_ADDR_OWVAR 42
14510: PUSH
14511: LD_INT 4
14513: ST_TO_ADDR
14514: GO 14631
14516: LD_INT 29
14518: DOUBLE
14519: EQUAL
14520: IFTRUE 14524
14522: GO 14535
14524: POP
// bc_type := b_barracks ; 30 :
14525: LD_ADDR_OWVAR 42
14529: PUSH
14530: LD_INT 5
14532: ST_TO_ADDR
14533: GO 14631
14535: LD_INT 30
14537: DOUBLE
14538: EQUAL
14539: IFTRUE 14543
14541: GO 14554
14543: POP
// bc_type := b_solar_power ; 31 :
14544: LD_ADDR_OWVAR 42
14548: PUSH
14549: LD_INT 27
14551: ST_TO_ADDR
14552: GO 14631
14554: LD_INT 31
14556: DOUBLE
14557: EQUAL
14558: IFTRUE 14562
14560: GO 14573
14562: POP
// bc_type := b_oil_power ; 32 :
14563: LD_ADDR_OWVAR 42
14567: PUSH
14568: LD_INT 26
14570: ST_TO_ADDR
14571: GO 14631
14573: LD_INT 32
14575: DOUBLE
14576: EQUAL
14577: IFTRUE 14581
14579: GO 14592
14581: POP
// bc_type := b_siberite_power ; 33 :
14582: LD_ADDR_OWVAR 42
14586: PUSH
14587: LD_INT 28
14589: ST_TO_ADDR
14590: GO 14631
14592: LD_INT 33
14594: DOUBLE
14595: EQUAL
14596: IFTRUE 14600
14598: GO 14611
14600: POP
// bc_type := b_oil_mine ; 34 :
14601: LD_ADDR_OWVAR 42
14605: PUSH
14606: LD_INT 29
14608: ST_TO_ADDR
14609: GO 14631
14611: LD_INT 34
14613: DOUBLE
14614: EQUAL
14615: IFTRUE 14619
14617: GO 14630
14619: POP
// bc_type := b_siberite_mine ; end ;
14620: LD_ADDR_OWVAR 42
14624: PUSH
14625: LD_INT 30
14627: ST_TO_ADDR
14628: GO 14631
14630: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14631: LD_ADDR_VAR 0 8
14635: PUSH
14636: LD_VAR 0 5
14640: PPUSH
14641: LD_VAR 0 6
14645: PPUSH
14646: LD_VAR 0 3
14650: PPUSH
14651: CALL_OW 47
14655: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14656: LD_OWVAR 42
14660: PUSH
14661: LD_INT 32
14663: PUSH
14664: LD_INT 33
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: IN
14671: IFFALSE 14687
// PlaceWeaponTurret ( b , weapon ) ;
14673: LD_VAR 0 8
14677: PPUSH
14678: LD_VAR 0 4
14682: PPUSH
14683: CALL_OW 431
// end ;
14687: LD_VAR 0 7
14691: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14692: LD_INT 0
14694: PPUSH
14695: PPUSH
14696: PPUSH
14697: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14698: LD_ADDR_VAR 0 4
14702: PUSH
14703: LD_INT 22
14705: PUSH
14706: LD_OWVAR 2
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 2
14717: PUSH
14718: LD_INT 30
14720: PUSH
14721: LD_INT 0
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 30
14730: PUSH
14731: LD_INT 1
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: LIST
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PPUSH
14747: CALL_OW 69
14751: ST_TO_ADDR
// if not tmp then
14752: LD_VAR 0 4
14756: NOT
14757: IFFALSE 14761
// exit ;
14759: GO 14820
// for i in tmp do
14761: LD_ADDR_VAR 0 2
14765: PUSH
14766: LD_VAR 0 4
14770: PUSH
14771: FOR_IN
14772: IFFALSE 14818
// for j = 1 to 3 do
14774: LD_ADDR_VAR 0 3
14778: PUSH
14779: DOUBLE
14780: LD_INT 1
14782: DEC
14783: ST_TO_ADDR
14784: LD_INT 3
14786: PUSH
14787: FOR_TO
14788: IFFALSE 14814
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14790: LD_VAR 0 2
14794: PPUSH
14795: CALL_OW 274
14799: PPUSH
14800: LD_VAR 0 3
14804: PPUSH
14805: LD_INT 99999
14807: PPUSH
14808: CALL_OW 277
14812: GO 14787
14814: POP
14815: POP
14816: GO 14771
14818: POP
14819: POP
// end ;
14820: LD_VAR 0 1
14824: RET
// export function hHackSetLevel10 ; var i , j ; begin
14825: LD_INT 0
14827: PPUSH
14828: PPUSH
14829: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14830: LD_ADDR_VAR 0 2
14834: PUSH
14835: LD_INT 21
14837: PUSH
14838: LD_INT 1
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PPUSH
14845: CALL_OW 69
14849: PUSH
14850: FOR_IN
14851: IFFALSE 14903
// if IsSelected ( i ) then
14853: LD_VAR 0 2
14857: PPUSH
14858: CALL_OW 306
14862: IFFALSE 14901
// begin for j := 1 to 4 do
14864: LD_ADDR_VAR 0 3
14868: PUSH
14869: DOUBLE
14870: LD_INT 1
14872: DEC
14873: ST_TO_ADDR
14874: LD_INT 4
14876: PUSH
14877: FOR_TO
14878: IFFALSE 14899
// SetSkill ( i , j , 10 ) ;
14880: LD_VAR 0 2
14884: PPUSH
14885: LD_VAR 0 3
14889: PPUSH
14890: LD_INT 10
14892: PPUSH
14893: CALL_OW 237
14897: GO 14877
14899: POP
14900: POP
// end ;
14901: GO 14850
14903: POP
14904: POP
// end ;
14905: LD_VAR 0 1
14909: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14910: LD_INT 0
14912: PPUSH
14913: PPUSH
14914: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14915: LD_ADDR_VAR 0 2
14919: PUSH
14920: LD_INT 22
14922: PUSH
14923: LD_OWVAR 2
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 21
14934: PUSH
14935: LD_INT 1
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PPUSH
14946: CALL_OW 69
14950: PUSH
14951: FOR_IN
14952: IFFALSE 14993
// begin for j := 1 to 4 do
14954: LD_ADDR_VAR 0 3
14958: PUSH
14959: DOUBLE
14960: LD_INT 1
14962: DEC
14963: ST_TO_ADDR
14964: LD_INT 4
14966: PUSH
14967: FOR_TO
14968: IFFALSE 14989
// SetSkill ( i , j , 10 ) ;
14970: LD_VAR 0 2
14974: PPUSH
14975: LD_VAR 0 3
14979: PPUSH
14980: LD_INT 10
14982: PPUSH
14983: CALL_OW 237
14987: GO 14967
14989: POP
14990: POP
// end ;
14991: GO 14951
14993: POP
14994: POP
// end ;
14995: LD_VAR 0 1
14999: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15000: LD_INT 0
15002: PPUSH
// uc_side := your_side ;
15003: LD_ADDR_OWVAR 20
15007: PUSH
15008: LD_OWVAR 2
15012: ST_TO_ADDR
// uc_nation := nation ;
15013: LD_ADDR_OWVAR 21
15017: PUSH
15018: LD_VAR 0 1
15022: ST_TO_ADDR
// InitHc ;
15023: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15027: LD_INT 0
15029: PPUSH
15030: LD_VAR 0 2
15034: PPUSH
15035: LD_VAR 0 3
15039: PPUSH
15040: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15044: LD_VAR 0 4
15048: PPUSH
15049: LD_VAR 0 5
15053: PPUSH
15054: CALL_OW 428
15058: PUSH
15059: LD_INT 0
15061: EQUAL
15062: IFFALSE 15086
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15064: CALL_OW 44
15068: PPUSH
15069: LD_VAR 0 4
15073: PPUSH
15074: LD_VAR 0 5
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: CALL_OW 48
// end ;
15086: LD_VAR 0 6
15090: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15091: LD_INT 0
15093: PPUSH
15094: PPUSH
// uc_side := your_side ;
15095: LD_ADDR_OWVAR 20
15099: PUSH
15100: LD_OWVAR 2
15104: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15105: LD_VAR 0 1
15109: PUSH
15110: LD_INT 1
15112: PUSH
15113: LD_INT 2
15115: PUSH
15116: LD_INT 3
15118: PUSH
15119: LD_INT 4
15121: PUSH
15122: LD_INT 5
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: IN
15132: IFFALSE 15144
// uc_nation := nation_american else
15134: LD_ADDR_OWVAR 21
15138: PUSH
15139: LD_INT 1
15141: ST_TO_ADDR
15142: GO 15187
// if chassis in [ 11 , 12 , 13 , 14 ] then
15144: LD_VAR 0 1
15148: PUSH
15149: LD_INT 11
15151: PUSH
15152: LD_INT 12
15154: PUSH
15155: LD_INT 13
15157: PUSH
15158: LD_INT 14
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: IN
15167: IFFALSE 15179
// uc_nation := nation_arabian else
15169: LD_ADDR_OWVAR 21
15173: PUSH
15174: LD_INT 2
15176: ST_TO_ADDR
15177: GO 15187
// uc_nation := nation_russian ;
15179: LD_ADDR_OWVAR 21
15183: PUSH
15184: LD_INT 3
15186: ST_TO_ADDR
// vc_chassis := chassis ;
15187: LD_ADDR_OWVAR 37
15191: PUSH
15192: LD_VAR 0 1
15196: ST_TO_ADDR
// vc_engine := engine ;
15197: LD_ADDR_OWVAR 39
15201: PUSH
15202: LD_VAR 0 2
15206: ST_TO_ADDR
// vc_control := control ;
15207: LD_ADDR_OWVAR 38
15211: PUSH
15212: LD_VAR 0 3
15216: ST_TO_ADDR
// vc_weapon := weapon ;
15217: LD_ADDR_OWVAR 40
15221: PUSH
15222: LD_VAR 0 4
15226: ST_TO_ADDR
// un := CreateVehicle ;
15227: LD_ADDR_VAR 0 8
15231: PUSH
15232: CALL_OW 45
15236: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15237: LD_VAR 0 8
15241: PPUSH
15242: LD_INT 0
15244: PPUSH
15245: LD_INT 5
15247: PPUSH
15248: CALL_OW 12
15252: PPUSH
15253: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15257: LD_VAR 0 8
15261: PPUSH
15262: LD_VAR 0 5
15266: PPUSH
15267: LD_VAR 0 6
15271: PPUSH
15272: LD_INT 1
15274: PPUSH
15275: CALL_OW 48
// end ;
15279: LD_VAR 0 7
15283: RET
// export hInvincible ; every 1 do
15284: GO 15286
15286: DISABLE
// hInvincible := [ ] ;
15287: LD_ADDR_EXP 59
15291: PUSH
15292: EMPTY
15293: ST_TO_ADDR
15294: END
// every 10 do var i ;
15295: GO 15297
15297: DISABLE
15298: LD_INT 0
15300: PPUSH
// begin enable ;
15301: ENABLE
// if not hInvincible then
15302: LD_EXP 59
15306: NOT
15307: IFFALSE 15311
// exit ;
15309: GO 15355
// for i in hInvincible do
15311: LD_ADDR_VAR 0 1
15315: PUSH
15316: LD_EXP 59
15320: PUSH
15321: FOR_IN
15322: IFFALSE 15353
// if GetLives ( i ) < 1000 then
15324: LD_VAR 0 1
15328: PPUSH
15329: CALL_OW 256
15333: PUSH
15334: LD_INT 1000
15336: LESS
15337: IFFALSE 15351
// SetLives ( i , 1000 ) ;
15339: LD_VAR 0 1
15343: PPUSH
15344: LD_INT 1000
15346: PPUSH
15347: CALL_OW 234
15351: GO 15321
15353: POP
15354: POP
// end ;
15355: PPOPN 1
15357: END
// export function hHackInvincible ; var i ; begin
15358: LD_INT 0
15360: PPUSH
15361: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15362: LD_ADDR_VAR 0 2
15366: PUSH
15367: LD_INT 2
15369: PUSH
15370: LD_INT 21
15372: PUSH
15373: LD_INT 1
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 21
15382: PUSH
15383: LD_INT 2
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: LIST
15394: PPUSH
15395: CALL_OW 69
15399: PUSH
15400: FOR_IN
15401: IFFALSE 15462
// if IsSelected ( i ) then
15403: LD_VAR 0 2
15407: PPUSH
15408: CALL_OW 306
15412: IFFALSE 15460
// begin if i in hInvincible then
15414: LD_VAR 0 2
15418: PUSH
15419: LD_EXP 59
15423: IN
15424: IFFALSE 15444
// hInvincible := hInvincible diff i else
15426: LD_ADDR_EXP 59
15430: PUSH
15431: LD_EXP 59
15435: PUSH
15436: LD_VAR 0 2
15440: DIFF
15441: ST_TO_ADDR
15442: GO 15460
// hInvincible := hInvincible union i ;
15444: LD_ADDR_EXP 59
15448: PUSH
15449: LD_EXP 59
15453: PUSH
15454: LD_VAR 0 2
15458: UNION
15459: ST_TO_ADDR
// end ;
15460: GO 15400
15462: POP
15463: POP
// end ;
15464: LD_VAR 0 1
15468: RET
// export function hHackInvisible ; var i , j ; begin
15469: LD_INT 0
15471: PPUSH
15472: PPUSH
15473: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15474: LD_ADDR_VAR 0 2
15478: PUSH
15479: LD_INT 21
15481: PUSH
15482: LD_INT 1
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 69
15493: PUSH
15494: FOR_IN
15495: IFFALSE 15519
// if IsSelected ( i ) then
15497: LD_VAR 0 2
15501: PPUSH
15502: CALL_OW 306
15506: IFFALSE 15517
// ComForceInvisible ( i ) ;
15508: LD_VAR 0 2
15512: PPUSH
15513: CALL_OW 496
15517: GO 15494
15519: POP
15520: POP
// end ;
15521: LD_VAR 0 1
15525: RET
// export function hHackChangeYourSide ; begin
15526: LD_INT 0
15528: PPUSH
// if your_side = 8 then
15529: LD_OWVAR 2
15533: PUSH
15534: LD_INT 8
15536: EQUAL
15537: IFFALSE 15549
// your_side := 0 else
15539: LD_ADDR_OWVAR 2
15543: PUSH
15544: LD_INT 0
15546: ST_TO_ADDR
15547: GO 15563
// your_side := your_side + 1 ;
15549: LD_ADDR_OWVAR 2
15553: PUSH
15554: LD_OWVAR 2
15558: PUSH
15559: LD_INT 1
15561: PLUS
15562: ST_TO_ADDR
// end ;
15563: LD_VAR 0 1
15567: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
// for i in all_units do
15573: LD_ADDR_VAR 0 2
15577: PUSH
15578: LD_OWVAR 3
15582: PUSH
15583: FOR_IN
15584: IFFALSE 15662
// if IsSelected ( i ) then
15586: LD_VAR 0 2
15590: PPUSH
15591: CALL_OW 306
15595: IFFALSE 15660
// begin j := GetSide ( i ) ;
15597: LD_ADDR_VAR 0 3
15601: PUSH
15602: LD_VAR 0 2
15606: PPUSH
15607: CALL_OW 255
15611: ST_TO_ADDR
// if j = 8 then
15612: LD_VAR 0 3
15616: PUSH
15617: LD_INT 8
15619: EQUAL
15620: IFFALSE 15632
// j := 0 else
15622: LD_ADDR_VAR 0 3
15626: PUSH
15627: LD_INT 0
15629: ST_TO_ADDR
15630: GO 15646
// j := j + 1 ;
15632: LD_ADDR_VAR 0 3
15636: PUSH
15637: LD_VAR 0 3
15641: PUSH
15642: LD_INT 1
15644: PLUS
15645: ST_TO_ADDR
// SetSide ( i , j ) ;
15646: LD_VAR 0 2
15650: PPUSH
15651: LD_VAR 0 3
15655: PPUSH
15656: CALL_OW 235
// end ;
15660: GO 15583
15662: POP
15663: POP
// end ;
15664: LD_VAR 0 1
15668: RET
// export function hHackFog ; begin
15669: LD_INT 0
15671: PPUSH
// FogOff ( true ) ;
15672: LD_INT 1
15674: PPUSH
15675: CALL_OW 344
// end ;
15679: LD_VAR 0 1
15683: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15684: LD_INT 0
15686: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15687: LD_VAR 0 1
15691: PPUSH
15692: LD_VAR 0 2
15696: PPUSH
15697: LD_VAR 0 3
15701: PPUSH
15702: LD_INT 1
15704: PPUSH
15705: LD_INT 1
15707: PPUSH
15708: CALL_OW 483
// CenterOnXY ( x , y ) ;
15712: LD_VAR 0 2
15716: PPUSH
15717: LD_VAR 0 3
15721: PPUSH
15722: CALL_OW 84
// end ;
15726: LD_VAR 0 4
15730: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15731: LD_INT 0
15733: PPUSH
15734: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15735: LD_VAR 0 1
15739: NOT
15740: PUSH
15741: LD_VAR 0 2
15745: PPUSH
15746: LD_VAR 0 3
15750: PPUSH
15751: CALL_OW 488
15755: NOT
15756: OR
15757: PUSH
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 266
15767: PUSH
15768: LD_INT 3
15770: NONEQUAL
15771: PUSH
15772: LD_VAR 0 1
15776: PPUSH
15777: CALL_OW 247
15781: PUSH
15782: LD_INT 1
15784: EQUAL
15785: NOT
15786: AND
15787: OR
15788: IFFALSE 15792
// exit ;
15790: GO 15941
// if GetType ( factory ) = unit_human then
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 247
15801: PUSH
15802: LD_INT 1
15804: EQUAL
15805: IFFALSE 15822
// factory := IsInUnit ( factory ) ;
15807: LD_ADDR_VAR 0 1
15811: PUSH
15812: LD_VAR 0 1
15816: PPUSH
15817: CALL_OW 310
15821: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15822: LD_VAR 0 1
15826: PPUSH
15827: CALL_OW 266
15831: PUSH
15832: LD_INT 3
15834: NONEQUAL
15835: IFFALSE 15839
// exit ;
15837: GO 15941
// if HexInfo ( x , y ) = factory then
15839: LD_VAR 0 2
15843: PPUSH
15844: LD_VAR 0 3
15848: PPUSH
15849: CALL_OW 428
15853: PUSH
15854: LD_VAR 0 1
15858: EQUAL
15859: IFFALSE 15886
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15861: LD_ADDR_EXP 60
15865: PUSH
15866: LD_EXP 60
15870: PPUSH
15871: LD_VAR 0 1
15875: PPUSH
15876: LD_INT 0
15878: PPUSH
15879: CALL_OW 1
15883: ST_TO_ADDR
15884: GO 15937
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15886: LD_ADDR_EXP 60
15890: PUSH
15891: LD_EXP 60
15895: PPUSH
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_VAR 0 1
15905: PPUSH
15906: CALL_OW 255
15910: PUSH
15911: LD_VAR 0 1
15915: PUSH
15916: LD_VAR 0 2
15920: PUSH
15921: LD_VAR 0 3
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: PPUSH
15932: CALL_OW 1
15936: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15937: CALL 15946 0 0
// end ;
15941: LD_VAR 0 4
15945: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15946: LD_INT 0
15948: PPUSH
15949: PPUSH
15950: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15951: LD_STRING resetFactoryWaypoint();
15953: PPUSH
15954: CALL_OW 559
// if factoryWaypoints then
15958: LD_EXP 60
15962: IFFALSE 16088
// begin list := PrepareArray ( factoryWaypoints ) ;
15964: LD_ADDR_VAR 0 3
15968: PUSH
15969: LD_EXP 60
15973: PPUSH
15974: CALL 62760 0 1
15978: ST_TO_ADDR
// for i := 1 to list do
15979: LD_ADDR_VAR 0 2
15983: PUSH
15984: DOUBLE
15985: LD_INT 1
15987: DEC
15988: ST_TO_ADDR
15989: LD_VAR 0 3
15993: PUSH
15994: FOR_TO
15995: IFFALSE 16086
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15997: LD_STRING setFactoryWaypointXY(
15999: PUSH
16000: LD_VAR 0 3
16004: PUSH
16005: LD_VAR 0 2
16009: ARRAY
16010: PUSH
16011: LD_INT 1
16013: ARRAY
16014: STR
16015: PUSH
16016: LD_STRING ,
16018: STR
16019: PUSH
16020: LD_VAR 0 3
16024: PUSH
16025: LD_VAR 0 2
16029: ARRAY
16030: PUSH
16031: LD_INT 2
16033: ARRAY
16034: STR
16035: PUSH
16036: LD_STRING ,
16038: STR
16039: PUSH
16040: LD_VAR 0 3
16044: PUSH
16045: LD_VAR 0 2
16049: ARRAY
16050: PUSH
16051: LD_INT 3
16053: ARRAY
16054: STR
16055: PUSH
16056: LD_STRING ,
16058: STR
16059: PUSH
16060: LD_VAR 0 3
16064: PUSH
16065: LD_VAR 0 2
16069: ARRAY
16070: PUSH
16071: LD_INT 4
16073: ARRAY
16074: STR
16075: PUSH
16076: LD_STRING )
16078: STR
16079: PPUSH
16080: CALL_OW 559
16084: GO 15994
16086: POP
16087: POP
// end ; end ;
16088: LD_VAR 0 1
16092: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16093: LD_INT 0
16095: PPUSH
// if HexInfo ( x , y ) = warehouse then
16096: LD_VAR 0 2
16100: PPUSH
16101: LD_VAR 0 3
16105: PPUSH
16106: CALL_OW 428
16110: PUSH
16111: LD_VAR 0 1
16115: EQUAL
16116: IFFALSE 16143
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16118: LD_ADDR_EXP 61
16122: PUSH
16123: LD_EXP 61
16127: PPUSH
16128: LD_VAR 0 1
16132: PPUSH
16133: LD_INT 0
16135: PPUSH
16136: CALL_OW 1
16140: ST_TO_ADDR
16141: GO 16194
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16143: LD_ADDR_EXP 61
16147: PUSH
16148: LD_EXP 61
16152: PPUSH
16153: LD_VAR 0 1
16157: PPUSH
16158: LD_VAR 0 1
16162: PPUSH
16163: CALL_OW 255
16167: PUSH
16168: LD_VAR 0 1
16172: PUSH
16173: LD_VAR 0 2
16177: PUSH
16178: LD_VAR 0 3
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: PPUSH
16189: CALL_OW 1
16193: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16194: CALL 16203 0 0
// end ;
16198: LD_VAR 0 4
16202: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16203: LD_INT 0
16205: PPUSH
16206: PPUSH
16207: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16208: LD_STRING resetWarehouseGatheringPoints();
16210: PPUSH
16211: CALL_OW 559
// if warehouseGatheringPoints then
16215: LD_EXP 61
16219: IFFALSE 16345
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16221: LD_ADDR_VAR 0 3
16225: PUSH
16226: LD_EXP 61
16230: PPUSH
16231: CALL 62760 0 1
16235: ST_TO_ADDR
// for i := 1 to list do
16236: LD_ADDR_VAR 0 2
16240: PUSH
16241: DOUBLE
16242: LD_INT 1
16244: DEC
16245: ST_TO_ADDR
16246: LD_VAR 0 3
16250: PUSH
16251: FOR_TO
16252: IFFALSE 16343
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16254: LD_STRING setWarehouseGatheringPointXY(
16256: PUSH
16257: LD_VAR 0 3
16261: PUSH
16262: LD_VAR 0 2
16266: ARRAY
16267: PUSH
16268: LD_INT 1
16270: ARRAY
16271: STR
16272: PUSH
16273: LD_STRING ,
16275: STR
16276: PUSH
16277: LD_VAR 0 3
16281: PUSH
16282: LD_VAR 0 2
16286: ARRAY
16287: PUSH
16288: LD_INT 2
16290: ARRAY
16291: STR
16292: PUSH
16293: LD_STRING ,
16295: STR
16296: PUSH
16297: LD_VAR 0 3
16301: PUSH
16302: LD_VAR 0 2
16306: ARRAY
16307: PUSH
16308: LD_INT 3
16310: ARRAY
16311: STR
16312: PUSH
16313: LD_STRING ,
16315: STR
16316: PUSH
16317: LD_VAR 0 3
16321: PUSH
16322: LD_VAR 0 2
16326: ARRAY
16327: PUSH
16328: LD_INT 4
16330: ARRAY
16331: STR
16332: PUSH
16333: LD_STRING )
16335: STR
16336: PPUSH
16337: CALL_OW 559
16341: GO 16251
16343: POP
16344: POP
// end ; end ;
16345: LD_VAR 0 1
16349: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16350: LD_EXP 61
16354: IFFALSE 17039
16356: GO 16358
16358: DISABLE
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
16363: PPUSH
16364: PPUSH
16365: PPUSH
16366: PPUSH
16367: PPUSH
16368: PPUSH
16369: PPUSH
// begin enable ;
16370: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16371: LD_ADDR_VAR 0 3
16375: PUSH
16376: LD_EXP 61
16380: PPUSH
16381: CALL 62760 0 1
16385: ST_TO_ADDR
// if not list then
16386: LD_VAR 0 3
16390: NOT
16391: IFFALSE 16395
// exit ;
16393: GO 17039
// for i := 1 to list do
16395: LD_ADDR_VAR 0 1
16399: PUSH
16400: DOUBLE
16401: LD_INT 1
16403: DEC
16404: ST_TO_ADDR
16405: LD_VAR 0 3
16409: PUSH
16410: FOR_TO
16411: IFFALSE 17037
// begin depot := list [ i ] [ 2 ] ;
16413: LD_ADDR_VAR 0 8
16417: PUSH
16418: LD_VAR 0 3
16422: PUSH
16423: LD_VAR 0 1
16427: ARRAY
16428: PUSH
16429: LD_INT 2
16431: ARRAY
16432: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16433: LD_ADDR_VAR 0 5
16437: PUSH
16438: LD_VAR 0 3
16442: PUSH
16443: LD_VAR 0 1
16447: ARRAY
16448: PUSH
16449: LD_INT 1
16451: ARRAY
16452: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16453: LD_VAR 0 8
16457: PPUSH
16458: CALL_OW 301
16462: PUSH
16463: LD_VAR 0 5
16467: PUSH
16468: LD_VAR 0 8
16472: PPUSH
16473: CALL_OW 255
16477: NONEQUAL
16478: OR
16479: IFFALSE 16508
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16481: LD_ADDR_EXP 61
16485: PUSH
16486: LD_EXP 61
16490: PPUSH
16491: LD_VAR 0 8
16495: PPUSH
16496: LD_INT 0
16498: PPUSH
16499: CALL_OW 1
16503: ST_TO_ADDR
// exit ;
16504: POP
16505: POP
16506: GO 17039
// end ; x := list [ i ] [ 3 ] ;
16508: LD_ADDR_VAR 0 6
16512: PUSH
16513: LD_VAR 0 3
16517: PUSH
16518: LD_VAR 0 1
16522: ARRAY
16523: PUSH
16524: LD_INT 3
16526: ARRAY
16527: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16528: LD_ADDR_VAR 0 7
16532: PUSH
16533: LD_VAR 0 3
16537: PUSH
16538: LD_VAR 0 1
16542: ARRAY
16543: PUSH
16544: LD_INT 4
16546: ARRAY
16547: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16548: LD_ADDR_VAR 0 9
16552: PUSH
16553: LD_VAR 0 6
16557: PPUSH
16558: LD_VAR 0 7
16562: PPUSH
16563: LD_INT 16
16565: PPUSH
16566: CALL 61348 0 3
16570: ST_TO_ADDR
// if not cratesNearbyPoint then
16571: LD_VAR 0 9
16575: NOT
16576: IFFALSE 16582
// exit ;
16578: POP
16579: POP
16580: GO 17039
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16582: LD_ADDR_VAR 0 4
16586: PUSH
16587: LD_INT 22
16589: PUSH
16590: LD_VAR 0 5
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 3
16601: PUSH
16602: LD_INT 60
16604: PUSH
16605: EMPTY
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: LD_INT 91
16614: PUSH
16615: LD_VAR 0 8
16619: PUSH
16620: LD_INT 6
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 2
16630: PUSH
16631: LD_INT 25
16633: PUSH
16634: LD_INT 2
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 25
16643: PUSH
16644: LD_INT 16
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: PPUSH
16662: CALL_OW 69
16666: PUSH
16667: LD_VAR 0 8
16671: PPUSH
16672: CALL_OW 313
16676: PPUSH
16677: LD_INT 3
16679: PUSH
16680: LD_INT 60
16682: PUSH
16683: EMPTY
16684: LIST
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 2
16692: PUSH
16693: LD_INT 25
16695: PUSH
16696: LD_INT 2
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: LD_INT 25
16705: PUSH
16706: LD_INT 16
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PPUSH
16722: CALL_OW 72
16726: UNION
16727: ST_TO_ADDR
// if tmp then
16728: LD_VAR 0 4
16732: IFFALSE 16812
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16734: LD_ADDR_VAR 0 4
16738: PUSH
16739: LD_VAR 0 4
16743: PPUSH
16744: LD_INT 3
16746: PPUSH
16747: CALL 59317 0 2
16751: ST_TO_ADDR
// for j in tmp do
16752: LD_ADDR_VAR 0 2
16756: PUSH
16757: LD_VAR 0 4
16761: PUSH
16762: FOR_IN
16763: IFFALSE 16806
// begin if IsInUnit ( j ) then
16765: LD_VAR 0 2
16769: PPUSH
16770: CALL_OW 310
16774: IFFALSE 16785
// ComExit ( j ) ;
16776: LD_VAR 0 2
16780: PPUSH
16781: CALL 59400 0 1
// AddComCollect ( j , x , y ) ;
16785: LD_VAR 0 2
16789: PPUSH
16790: LD_VAR 0 6
16794: PPUSH
16795: LD_VAR 0 7
16799: PPUSH
16800: CALL_OW 177
// end ;
16804: GO 16762
16806: POP
16807: POP
// exit ;
16808: POP
16809: POP
16810: GO 17039
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16812: LD_ADDR_VAR 0 4
16816: PUSH
16817: LD_INT 22
16819: PUSH
16820: LD_VAR 0 5
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 91
16831: PUSH
16832: LD_VAR 0 8
16836: PUSH
16837: LD_INT 8
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 2
16847: PUSH
16848: LD_INT 34
16850: PUSH
16851: LD_INT 12
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 34
16860: PUSH
16861: LD_INT 51
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 34
16870: PUSH
16871: LD_INT 32
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 34
16880: PUSH
16881: LD_INT 89
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: LIST
16899: PPUSH
16900: CALL_OW 69
16904: ST_TO_ADDR
// if tmp then
16905: LD_VAR 0 4
16909: IFFALSE 17035
// begin for j in tmp do
16911: LD_ADDR_VAR 0 2
16915: PUSH
16916: LD_VAR 0 4
16920: PUSH
16921: FOR_IN
16922: IFFALSE 17033
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
16924: LD_VAR 0 2
16928: PPUSH
16929: CALL_OW 262
16933: PUSH
16934: LD_INT 3
16936: EQUAL
16937: PUSH
16938: LD_VAR 0 2
16942: PPUSH
16943: CALL_OW 261
16947: PUSH
16948: LD_INT 20
16950: GREATER
16951: OR
16952: PUSH
16953: LD_VAR 0 2
16957: PPUSH
16958: CALL_OW 314
16962: NOT
16963: AND
16964: PUSH
16965: LD_VAR 0 2
16969: PPUSH
16970: CALL_OW 263
16974: PUSH
16975: LD_INT 1
16977: NONEQUAL
16978: PUSH
16979: LD_VAR 0 2
16983: PPUSH
16984: CALL_OW 311
16988: OR
16989: AND
16990: IFFALSE 17031
// begin ComCollect ( j , x , y ) ;
16992: LD_VAR 0 2
16996: PPUSH
16997: LD_VAR 0 6
17001: PPUSH
17002: LD_VAR 0 7
17006: PPUSH
17007: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17011: LD_VAR 0 2
17015: PPUSH
17016: LD_VAR 0 8
17020: PPUSH
17021: CALL_OW 172
// exit ;
17025: POP
17026: POP
17027: POP
17028: POP
17029: GO 17039
// end ;
17031: GO 16921
17033: POP
17034: POP
// end ; end ;
17035: GO 16410
17037: POP
17038: POP
// end ; end_of_file
17039: PPOPN 9
17041: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17042: LD_INT 0
17044: PPUSH
17045: PPUSH
17046: PPUSH
17047: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17048: LD_VAR 0 1
17052: PPUSH
17053: CALL_OW 264
17057: PUSH
17058: LD_INT 91
17060: EQUAL
17061: IFFALSE 17133
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17063: LD_INT 68
17065: PPUSH
17066: LD_VAR 0 1
17070: PPUSH
17071: CALL_OW 255
17075: PPUSH
17076: CALL_OW 321
17080: PUSH
17081: LD_INT 2
17083: EQUAL
17084: IFFALSE 17096
// eff := 70 else
17086: LD_ADDR_VAR 0 4
17090: PUSH
17091: LD_INT 70
17093: ST_TO_ADDR
17094: GO 17104
// eff := 30 ;
17096: LD_ADDR_VAR 0 4
17100: PUSH
17101: LD_INT 30
17103: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17104: LD_VAR 0 1
17108: PPUSH
17109: CALL_OW 250
17113: PPUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: CALL_OW 251
17123: PPUSH
17124: LD_VAR 0 4
17128: PPUSH
17129: CALL_OW 495
// end ; end ;
17133: LD_VAR 0 2
17137: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17138: LD_INT 0
17140: PPUSH
// end ;
17141: LD_VAR 0 4
17145: RET
// export function SOS_Command ( cmd ) ; begin
17146: LD_INT 0
17148: PPUSH
// end ;
17149: LD_VAR 0 2
17153: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17154: LD_INT 0
17156: PPUSH
// end ;
17157: LD_VAR 0 6
17161: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17162: LD_INT 0
17164: PPUSH
17165: PPUSH
// if not vehicle or not factory then
17166: LD_VAR 0 1
17170: NOT
17171: PUSH
17172: LD_VAR 0 2
17176: NOT
17177: OR
17178: IFFALSE 17182
// exit ;
17180: GO 17413
// if factoryWaypoints >= factory then
17182: LD_EXP 60
17186: PUSH
17187: LD_VAR 0 2
17191: GREATEREQUAL
17192: IFFALSE 17413
// if factoryWaypoints [ factory ] then
17194: LD_EXP 60
17198: PUSH
17199: LD_VAR 0 2
17203: ARRAY
17204: IFFALSE 17413
// begin if GetControl ( vehicle ) = control_manual then
17206: LD_VAR 0 1
17210: PPUSH
17211: CALL_OW 263
17215: PUSH
17216: LD_INT 1
17218: EQUAL
17219: IFFALSE 17300
// begin driver := IsDrivenBy ( vehicle ) ;
17221: LD_ADDR_VAR 0 4
17225: PUSH
17226: LD_VAR 0 1
17230: PPUSH
17231: CALL_OW 311
17235: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17236: LD_VAR 0 4
17240: PPUSH
17241: LD_EXP 60
17245: PUSH
17246: LD_VAR 0 2
17250: ARRAY
17251: PUSH
17252: LD_INT 3
17254: ARRAY
17255: PPUSH
17256: LD_EXP 60
17260: PUSH
17261: LD_VAR 0 2
17265: ARRAY
17266: PUSH
17267: LD_INT 4
17269: ARRAY
17270: PPUSH
17271: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17275: LD_VAR 0 4
17279: PPUSH
17280: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17284: LD_VAR 0 4
17288: PPUSH
17289: LD_VAR 0 2
17293: PPUSH
17294: CALL_OW 180
// end else
17298: GO 17413
// if GetControl ( vehicle ) = control_remote then
17300: LD_VAR 0 1
17304: PPUSH
17305: CALL_OW 263
17309: PUSH
17310: LD_INT 2
17312: EQUAL
17313: IFFALSE 17374
// begin wait ( 0 0$2 ) ;
17315: LD_INT 70
17317: PPUSH
17318: CALL_OW 67
// if Connect ( vehicle ) then
17322: LD_VAR 0 1
17326: PPUSH
17327: CALL 29659 0 1
17331: IFFALSE 17372
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17333: LD_VAR 0 1
17337: PPUSH
17338: LD_EXP 60
17342: PUSH
17343: LD_VAR 0 2
17347: ARRAY
17348: PUSH
17349: LD_INT 3
17351: ARRAY
17352: PPUSH
17353: LD_EXP 60
17357: PUSH
17358: LD_VAR 0 2
17362: ARRAY
17363: PUSH
17364: LD_INT 4
17366: ARRAY
17367: PPUSH
17368: CALL_OW 171
// end else
17372: GO 17413
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17374: LD_VAR 0 1
17378: PPUSH
17379: LD_EXP 60
17383: PUSH
17384: LD_VAR 0 2
17388: ARRAY
17389: PUSH
17390: LD_INT 3
17392: ARRAY
17393: PPUSH
17394: LD_EXP 60
17398: PUSH
17399: LD_VAR 0 2
17403: ARRAY
17404: PUSH
17405: LD_INT 4
17407: ARRAY
17408: PPUSH
17409: CALL_OW 171
// end ; end ;
17413: LD_VAR 0 3
17417: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17418: LD_INT 0
17420: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17421: LD_VAR 0 1
17425: PUSH
17426: LD_INT 250
17428: EQUAL
17429: PUSH
17430: LD_VAR 0 2
17434: PPUSH
17435: CALL_OW 264
17439: PUSH
17440: LD_INT 81
17442: EQUAL
17443: AND
17444: IFFALSE 17465
// MinerPlaceMine ( unit , x , y ) ;
17446: LD_VAR 0 2
17450: PPUSH
17451: LD_VAR 0 4
17455: PPUSH
17456: LD_VAR 0 5
17460: PPUSH
17461: CALL 19850 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17465: LD_VAR 0 1
17469: PUSH
17470: LD_INT 251
17472: EQUAL
17473: PUSH
17474: LD_VAR 0 2
17478: PPUSH
17479: CALL_OW 264
17483: PUSH
17484: LD_INT 81
17486: EQUAL
17487: AND
17488: IFFALSE 17509
// MinerDetonateMine ( unit , x , y ) ;
17490: LD_VAR 0 2
17494: PPUSH
17495: LD_VAR 0 4
17499: PPUSH
17500: LD_VAR 0 5
17504: PPUSH
17505: CALL 20125 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17509: LD_VAR 0 1
17513: PUSH
17514: LD_INT 252
17516: EQUAL
17517: PUSH
17518: LD_VAR 0 2
17522: PPUSH
17523: CALL_OW 264
17527: PUSH
17528: LD_INT 81
17530: EQUAL
17531: AND
17532: IFFALSE 17553
// MinerCreateMinefield ( unit , x , y ) ;
17534: LD_VAR 0 2
17538: PPUSH
17539: LD_VAR 0 4
17543: PPUSH
17544: LD_VAR 0 5
17548: PPUSH
17549: CALL 20542 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17553: LD_VAR 0 1
17557: PUSH
17558: LD_INT 253
17560: EQUAL
17561: PUSH
17562: LD_VAR 0 2
17566: PPUSH
17567: CALL_OW 257
17571: PUSH
17572: LD_INT 5
17574: EQUAL
17575: AND
17576: IFFALSE 17597
// ComBinocular ( unit , x , y ) ;
17578: LD_VAR 0 2
17582: PPUSH
17583: LD_VAR 0 4
17587: PPUSH
17588: LD_VAR 0 5
17592: PPUSH
17593: CALL 20911 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17597: LD_VAR 0 1
17601: PUSH
17602: LD_INT 254
17604: EQUAL
17605: PUSH
17606: LD_VAR 0 2
17610: PPUSH
17611: CALL_OW 264
17615: PUSH
17616: LD_INT 99
17618: EQUAL
17619: AND
17620: PUSH
17621: LD_VAR 0 3
17625: PPUSH
17626: CALL_OW 263
17630: PUSH
17631: LD_INT 3
17633: EQUAL
17634: AND
17635: IFFALSE 17651
// HackDestroyVehicle ( unit , selectedUnit ) ;
17637: LD_VAR 0 2
17641: PPUSH
17642: LD_VAR 0 3
17646: PPUSH
17647: CALL 19214 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17651: LD_VAR 0 1
17655: PUSH
17656: LD_INT 255
17658: EQUAL
17659: PUSH
17660: LD_VAR 0 2
17664: PPUSH
17665: CALL_OW 264
17669: PUSH
17670: LD_INT 14
17672: PUSH
17673: LD_INT 53
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: IN
17680: AND
17681: PUSH
17682: LD_VAR 0 4
17686: PPUSH
17687: LD_VAR 0 5
17691: PPUSH
17692: CALL_OW 488
17696: AND
17697: IFFALSE 17721
// CutTreeXYR ( unit , x , y , 12 ) ;
17699: LD_VAR 0 2
17703: PPUSH
17704: LD_VAR 0 4
17708: PPUSH
17709: LD_VAR 0 5
17713: PPUSH
17714: LD_INT 12
17716: PPUSH
17717: CALL 17784 0 4
// if cmd = 256 then
17721: LD_VAR 0 1
17725: PUSH
17726: LD_INT 256
17728: EQUAL
17729: IFFALSE 17750
// SetFactoryWaypoint ( unit , x , y ) ;
17731: LD_VAR 0 2
17735: PPUSH
17736: LD_VAR 0 4
17740: PPUSH
17741: LD_VAR 0 5
17745: PPUSH
17746: CALL 15731 0 3
// if cmd = 257 then
17750: LD_VAR 0 1
17754: PUSH
17755: LD_INT 257
17757: EQUAL
17758: IFFALSE 17779
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17760: LD_VAR 0 2
17764: PPUSH
17765: LD_VAR 0 4
17769: PPUSH
17770: LD_VAR 0 5
17774: PPUSH
17775: CALL 16093 0 3
// end ;
17779: LD_VAR 0 6
17783: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17784: LD_INT 0
17786: PPUSH
17787: PPUSH
17788: PPUSH
17789: PPUSH
17790: PPUSH
17791: PPUSH
17792: PPUSH
17793: PPUSH
17794: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17795: LD_VAR 0 1
17799: NOT
17800: PUSH
17801: LD_VAR 0 2
17805: PPUSH
17806: LD_VAR 0 3
17810: PPUSH
17811: CALL_OW 488
17815: NOT
17816: OR
17817: PUSH
17818: LD_VAR 0 4
17822: NOT
17823: OR
17824: IFFALSE 17828
// exit ;
17826: GO 18168
// list := [ ] ;
17828: LD_ADDR_VAR 0 13
17832: PUSH
17833: EMPTY
17834: ST_TO_ADDR
// if x - r < 0 then
17835: LD_VAR 0 2
17839: PUSH
17840: LD_VAR 0 4
17844: MINUS
17845: PUSH
17846: LD_INT 0
17848: LESS
17849: IFFALSE 17861
// min_x := 0 else
17851: LD_ADDR_VAR 0 7
17855: PUSH
17856: LD_INT 0
17858: ST_TO_ADDR
17859: GO 17877
// min_x := x - r ;
17861: LD_ADDR_VAR 0 7
17865: PUSH
17866: LD_VAR 0 2
17870: PUSH
17871: LD_VAR 0 4
17875: MINUS
17876: ST_TO_ADDR
// if y - r < 0 then
17877: LD_VAR 0 3
17881: PUSH
17882: LD_VAR 0 4
17886: MINUS
17887: PUSH
17888: LD_INT 0
17890: LESS
17891: IFFALSE 17903
// min_y := 0 else
17893: LD_ADDR_VAR 0 8
17897: PUSH
17898: LD_INT 0
17900: ST_TO_ADDR
17901: GO 17919
// min_y := y - r ;
17903: LD_ADDR_VAR 0 8
17907: PUSH
17908: LD_VAR 0 3
17912: PUSH
17913: LD_VAR 0 4
17917: MINUS
17918: ST_TO_ADDR
// max_x := x + r ;
17919: LD_ADDR_VAR 0 9
17923: PUSH
17924: LD_VAR 0 2
17928: PUSH
17929: LD_VAR 0 4
17933: PLUS
17934: ST_TO_ADDR
// max_y := y + r ;
17935: LD_ADDR_VAR 0 10
17939: PUSH
17940: LD_VAR 0 3
17944: PUSH
17945: LD_VAR 0 4
17949: PLUS
17950: ST_TO_ADDR
// for _x = min_x to max_x do
17951: LD_ADDR_VAR 0 11
17955: PUSH
17956: DOUBLE
17957: LD_VAR 0 7
17961: DEC
17962: ST_TO_ADDR
17963: LD_VAR 0 9
17967: PUSH
17968: FOR_TO
17969: IFFALSE 18086
// for _y = min_y to max_y do
17971: LD_ADDR_VAR 0 12
17975: PUSH
17976: DOUBLE
17977: LD_VAR 0 8
17981: DEC
17982: ST_TO_ADDR
17983: LD_VAR 0 10
17987: PUSH
17988: FOR_TO
17989: IFFALSE 18082
// begin if not ValidHex ( _x , _y ) then
17991: LD_VAR 0 11
17995: PPUSH
17996: LD_VAR 0 12
18000: PPUSH
18001: CALL_OW 488
18005: NOT
18006: IFFALSE 18010
// continue ;
18008: GO 17988
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18010: LD_VAR 0 11
18014: PPUSH
18015: LD_VAR 0 12
18019: PPUSH
18020: CALL_OW 351
18024: PUSH
18025: LD_VAR 0 11
18029: PPUSH
18030: LD_VAR 0 12
18034: PPUSH
18035: CALL_OW 554
18039: AND
18040: IFFALSE 18080
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18042: LD_ADDR_VAR 0 13
18046: PUSH
18047: LD_VAR 0 13
18051: PPUSH
18052: LD_VAR 0 13
18056: PUSH
18057: LD_INT 1
18059: PLUS
18060: PPUSH
18061: LD_VAR 0 11
18065: PUSH
18066: LD_VAR 0 12
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PPUSH
18075: CALL_OW 2
18079: ST_TO_ADDR
// end ;
18080: GO 17988
18082: POP
18083: POP
18084: GO 17968
18086: POP
18087: POP
// if not list then
18088: LD_VAR 0 13
18092: NOT
18093: IFFALSE 18097
// exit ;
18095: GO 18168
// for i in list do
18097: LD_ADDR_VAR 0 6
18101: PUSH
18102: LD_VAR 0 13
18106: PUSH
18107: FOR_IN
18108: IFFALSE 18166
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18110: LD_VAR 0 1
18114: PPUSH
18115: LD_STRING M
18117: PUSH
18118: LD_VAR 0 6
18122: PUSH
18123: LD_INT 1
18125: ARRAY
18126: PUSH
18127: LD_VAR 0 6
18131: PUSH
18132: LD_INT 2
18134: ARRAY
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: LD_INT 0
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: PUSH
18157: EMPTY
18158: LIST
18159: PPUSH
18160: CALL_OW 447
18164: GO 18107
18166: POP
18167: POP
// end ;
18168: LD_VAR 0 5
18172: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18173: LD_EXP 63
18177: NOT
18178: IFFALSE 18228
18180: GO 18182
18182: DISABLE
// begin initHack := true ;
18183: LD_ADDR_EXP 63
18187: PUSH
18188: LD_INT 1
18190: ST_TO_ADDR
// hackTanks := [ ] ;
18191: LD_ADDR_EXP 64
18195: PUSH
18196: EMPTY
18197: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18198: LD_ADDR_EXP 65
18202: PUSH
18203: EMPTY
18204: ST_TO_ADDR
// hackLimit := 3 ;
18205: LD_ADDR_EXP 66
18209: PUSH
18210: LD_INT 3
18212: ST_TO_ADDR
// hackDist := 12 ;
18213: LD_ADDR_EXP 67
18217: PUSH
18218: LD_INT 12
18220: ST_TO_ADDR
// hackCounter := [ ] ;
18221: LD_ADDR_EXP 68
18225: PUSH
18226: EMPTY
18227: ST_TO_ADDR
// end ;
18228: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18229: LD_EXP 63
18233: PUSH
18234: LD_INT 34
18236: PUSH
18237: LD_INT 99
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PPUSH
18244: CALL_OW 69
18248: AND
18249: IFFALSE 18502
18251: GO 18253
18253: DISABLE
18254: LD_INT 0
18256: PPUSH
18257: PPUSH
// begin enable ;
18258: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18259: LD_ADDR_VAR 0 1
18263: PUSH
18264: LD_INT 34
18266: PUSH
18267: LD_INT 99
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PPUSH
18274: CALL_OW 69
18278: PUSH
18279: FOR_IN
18280: IFFALSE 18500
// begin if not i in hackTanks then
18282: LD_VAR 0 1
18286: PUSH
18287: LD_EXP 64
18291: IN
18292: NOT
18293: IFFALSE 18376
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18295: LD_ADDR_EXP 64
18299: PUSH
18300: LD_EXP 64
18304: PPUSH
18305: LD_EXP 64
18309: PUSH
18310: LD_INT 1
18312: PLUS
18313: PPUSH
18314: LD_VAR 0 1
18318: PPUSH
18319: CALL_OW 1
18323: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18324: LD_ADDR_EXP 65
18328: PUSH
18329: LD_EXP 65
18333: PPUSH
18334: LD_EXP 65
18338: PUSH
18339: LD_INT 1
18341: PLUS
18342: PPUSH
18343: EMPTY
18344: PPUSH
18345: CALL_OW 1
18349: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18350: LD_ADDR_EXP 68
18354: PUSH
18355: LD_EXP 68
18359: PPUSH
18360: LD_EXP 68
18364: PUSH
18365: LD_INT 1
18367: PLUS
18368: PPUSH
18369: EMPTY
18370: PPUSH
18371: CALL_OW 1
18375: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18376: LD_VAR 0 1
18380: PPUSH
18381: CALL_OW 302
18385: NOT
18386: IFFALSE 18399
// begin HackUnlinkAll ( i ) ;
18388: LD_VAR 0 1
18392: PPUSH
18393: CALL 18505 0 1
// continue ;
18397: GO 18279
// end ; HackCheckCapturedStatus ( i ) ;
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL 18948 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18408: LD_ADDR_VAR 0 2
18412: PUSH
18413: LD_INT 81
18415: PUSH
18416: LD_VAR 0 1
18420: PPUSH
18421: CALL_OW 255
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 33
18432: PUSH
18433: LD_INT 3
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 91
18442: PUSH
18443: LD_VAR 0 1
18447: PUSH
18448: LD_EXP 67
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 50
18460: PUSH
18461: EMPTY
18462: LIST
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: PPUSH
18470: CALL_OW 69
18474: ST_TO_ADDR
// if not tmp then
18475: LD_VAR 0 2
18479: NOT
18480: IFFALSE 18484
// continue ;
18482: GO 18279
// HackLink ( i , tmp ) ;
18484: LD_VAR 0 1
18488: PPUSH
18489: LD_VAR 0 2
18493: PPUSH
18494: CALL 18641 0 2
// end ;
18498: GO 18279
18500: POP
18501: POP
// end ;
18502: PPOPN 2
18504: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18505: LD_INT 0
18507: PPUSH
18508: PPUSH
18509: PPUSH
// if not hack in hackTanks then
18510: LD_VAR 0 1
18514: PUSH
18515: LD_EXP 64
18519: IN
18520: NOT
18521: IFFALSE 18525
// exit ;
18523: GO 18636
// index := GetElementIndex ( hackTanks , hack ) ;
18525: LD_ADDR_VAR 0 4
18529: PUSH
18530: LD_EXP 64
18534: PPUSH
18535: LD_VAR 0 1
18539: PPUSH
18540: CALL 26475 0 2
18544: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18545: LD_EXP 65
18549: PUSH
18550: LD_VAR 0 4
18554: ARRAY
18555: IFFALSE 18636
// begin for i in hackTanksCaptured [ index ] do
18557: LD_ADDR_VAR 0 3
18561: PUSH
18562: LD_EXP 65
18566: PUSH
18567: LD_VAR 0 4
18571: ARRAY
18572: PUSH
18573: FOR_IN
18574: IFFALSE 18600
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18576: LD_VAR 0 3
18580: PUSH
18581: LD_INT 1
18583: ARRAY
18584: PPUSH
18585: LD_VAR 0 3
18589: PUSH
18590: LD_INT 2
18592: ARRAY
18593: PPUSH
18594: CALL_OW 235
18598: GO 18573
18600: POP
18601: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18602: LD_ADDR_EXP 65
18606: PUSH
18607: LD_EXP 65
18611: PPUSH
18612: LD_VAR 0 4
18616: PPUSH
18617: EMPTY
18618: PPUSH
18619: CALL_OW 1
18623: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18624: LD_VAR 0 1
18628: PPUSH
18629: LD_INT 0
18631: PPUSH
18632: CALL_OW 505
// end ; end ;
18636: LD_VAR 0 2
18640: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18641: LD_INT 0
18643: PPUSH
18644: PPUSH
18645: PPUSH
// if not hack in hackTanks or not vehicles then
18646: LD_VAR 0 1
18650: PUSH
18651: LD_EXP 64
18655: IN
18656: NOT
18657: PUSH
18658: LD_VAR 0 2
18662: NOT
18663: OR
18664: IFFALSE 18668
// exit ;
18666: GO 18943
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18668: LD_ADDR_VAR 0 2
18672: PUSH
18673: LD_VAR 0 1
18677: PPUSH
18678: LD_VAR 0 2
18682: PPUSH
18683: LD_INT 1
18685: PPUSH
18686: LD_INT 1
18688: PPUSH
18689: CALL 27125 0 4
18693: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18694: LD_ADDR_VAR 0 5
18698: PUSH
18699: LD_EXP 64
18703: PPUSH
18704: LD_VAR 0 1
18708: PPUSH
18709: CALL 26475 0 2
18713: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18714: LD_EXP 65
18718: PUSH
18719: LD_VAR 0 5
18723: ARRAY
18724: PUSH
18725: LD_EXP 66
18729: LESS
18730: IFFALSE 18919
// begin for i := 1 to vehicles do
18732: LD_ADDR_VAR 0 4
18736: PUSH
18737: DOUBLE
18738: LD_INT 1
18740: DEC
18741: ST_TO_ADDR
18742: LD_VAR 0 2
18746: PUSH
18747: FOR_TO
18748: IFFALSE 18917
// begin if hackTanksCaptured [ index ] = hackLimit then
18750: LD_EXP 65
18754: PUSH
18755: LD_VAR 0 5
18759: ARRAY
18760: PUSH
18761: LD_EXP 66
18765: EQUAL
18766: IFFALSE 18770
// break ;
18768: GO 18917
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18770: LD_ADDR_EXP 68
18774: PUSH
18775: LD_EXP 68
18779: PPUSH
18780: LD_VAR 0 5
18784: PPUSH
18785: LD_EXP 68
18789: PUSH
18790: LD_VAR 0 5
18794: ARRAY
18795: PUSH
18796: LD_INT 1
18798: PLUS
18799: PPUSH
18800: CALL_OW 1
18804: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18805: LD_ADDR_EXP 65
18809: PUSH
18810: LD_EXP 65
18814: PPUSH
18815: LD_VAR 0 5
18819: PUSH
18820: LD_EXP 65
18824: PUSH
18825: LD_VAR 0 5
18829: ARRAY
18830: PUSH
18831: LD_INT 1
18833: PLUS
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PPUSH
18839: LD_VAR 0 2
18843: PUSH
18844: LD_VAR 0 4
18848: ARRAY
18849: PUSH
18850: LD_VAR 0 2
18854: PUSH
18855: LD_VAR 0 4
18859: ARRAY
18860: PPUSH
18861: CALL_OW 255
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PPUSH
18870: CALL 26690 0 3
18874: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18875: LD_VAR 0 2
18879: PUSH
18880: LD_VAR 0 4
18884: ARRAY
18885: PPUSH
18886: LD_VAR 0 1
18890: PPUSH
18891: CALL_OW 255
18895: PPUSH
18896: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18900: LD_VAR 0 2
18904: PUSH
18905: LD_VAR 0 4
18909: ARRAY
18910: PPUSH
18911: CALL_OW 141
// end ;
18915: GO 18747
18917: POP
18918: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18919: LD_VAR 0 1
18923: PPUSH
18924: LD_EXP 65
18928: PUSH
18929: LD_VAR 0 5
18933: ARRAY
18934: PUSH
18935: LD_INT 0
18937: PLUS
18938: PPUSH
18939: CALL_OW 505
// end ;
18943: LD_VAR 0 3
18947: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18948: LD_INT 0
18950: PPUSH
18951: PPUSH
18952: PPUSH
18953: PPUSH
// if not hack in hackTanks then
18954: LD_VAR 0 1
18958: PUSH
18959: LD_EXP 64
18963: IN
18964: NOT
18965: IFFALSE 18969
// exit ;
18967: GO 19209
// index := GetElementIndex ( hackTanks , hack ) ;
18969: LD_ADDR_VAR 0 4
18973: PUSH
18974: LD_EXP 64
18978: PPUSH
18979: LD_VAR 0 1
18983: PPUSH
18984: CALL 26475 0 2
18988: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18989: LD_ADDR_VAR 0 3
18993: PUSH
18994: DOUBLE
18995: LD_EXP 65
18999: PUSH
19000: LD_VAR 0 4
19004: ARRAY
19005: INC
19006: ST_TO_ADDR
19007: LD_INT 1
19009: PUSH
19010: FOR_DOWNTO
19011: IFFALSE 19183
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19013: LD_ADDR_VAR 0 5
19017: PUSH
19018: LD_EXP 65
19022: PUSH
19023: LD_VAR 0 4
19027: ARRAY
19028: PUSH
19029: LD_VAR 0 3
19033: ARRAY
19034: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19035: LD_VAR 0 5
19039: PUSH
19040: LD_INT 1
19042: ARRAY
19043: PPUSH
19044: CALL_OW 302
19048: NOT
19049: PUSH
19050: LD_VAR 0 5
19054: PUSH
19055: LD_INT 1
19057: ARRAY
19058: PPUSH
19059: CALL_OW 255
19063: PUSH
19064: LD_VAR 0 1
19068: PPUSH
19069: CALL_OW 255
19073: NONEQUAL
19074: OR
19075: IFFALSE 19181
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19077: LD_VAR 0 5
19081: PUSH
19082: LD_INT 1
19084: ARRAY
19085: PPUSH
19086: CALL_OW 305
19090: PUSH
19091: LD_VAR 0 5
19095: PUSH
19096: LD_INT 1
19098: ARRAY
19099: PPUSH
19100: CALL_OW 255
19104: PUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: CALL_OW 255
19114: EQUAL
19115: AND
19116: IFFALSE 19140
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19118: LD_VAR 0 5
19122: PUSH
19123: LD_INT 1
19125: ARRAY
19126: PPUSH
19127: LD_VAR 0 5
19131: PUSH
19132: LD_INT 2
19134: ARRAY
19135: PPUSH
19136: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19140: LD_ADDR_EXP 65
19144: PUSH
19145: LD_EXP 65
19149: PPUSH
19150: LD_VAR 0 4
19154: PPUSH
19155: LD_EXP 65
19159: PUSH
19160: LD_VAR 0 4
19164: ARRAY
19165: PPUSH
19166: LD_VAR 0 3
19170: PPUSH
19171: CALL_OW 3
19175: PPUSH
19176: CALL_OW 1
19180: ST_TO_ADDR
// end ; end ;
19181: GO 19010
19183: POP
19184: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19185: LD_VAR 0 1
19189: PPUSH
19190: LD_EXP 65
19194: PUSH
19195: LD_VAR 0 4
19199: ARRAY
19200: PUSH
19201: LD_INT 0
19203: PLUS
19204: PPUSH
19205: CALL_OW 505
// end ;
19209: LD_VAR 0 2
19213: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19214: LD_INT 0
19216: PPUSH
19217: PPUSH
19218: PPUSH
19219: PPUSH
// if not hack in hackTanks then
19220: LD_VAR 0 1
19224: PUSH
19225: LD_EXP 64
19229: IN
19230: NOT
19231: IFFALSE 19235
// exit ;
19233: GO 19320
// index := GetElementIndex ( hackTanks , hack ) ;
19235: LD_ADDR_VAR 0 5
19239: PUSH
19240: LD_EXP 64
19244: PPUSH
19245: LD_VAR 0 1
19249: PPUSH
19250: CALL 26475 0 2
19254: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19255: LD_ADDR_VAR 0 4
19259: PUSH
19260: DOUBLE
19261: LD_INT 1
19263: DEC
19264: ST_TO_ADDR
19265: LD_EXP 65
19269: PUSH
19270: LD_VAR 0 5
19274: ARRAY
19275: PUSH
19276: FOR_TO
19277: IFFALSE 19318
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19279: LD_EXP 65
19283: PUSH
19284: LD_VAR 0 5
19288: ARRAY
19289: PUSH
19290: LD_VAR 0 4
19294: ARRAY
19295: PUSH
19296: LD_INT 1
19298: ARRAY
19299: PUSH
19300: LD_VAR 0 2
19304: EQUAL
19305: IFFALSE 19316
// KillUnit ( vehicle ) ;
19307: LD_VAR 0 2
19311: PPUSH
19312: CALL_OW 66
19316: GO 19276
19318: POP
19319: POP
// end ;
19320: LD_VAR 0 3
19324: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19325: LD_EXP 69
19329: NOT
19330: IFFALSE 19365
19332: GO 19334
19334: DISABLE
// begin initMiner := true ;
19335: LD_ADDR_EXP 69
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// minersList := [ ] ;
19343: LD_ADDR_EXP 70
19347: PUSH
19348: EMPTY
19349: ST_TO_ADDR
// minerMinesList := [ ] ;
19350: LD_ADDR_EXP 71
19354: PUSH
19355: EMPTY
19356: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19357: LD_ADDR_EXP 72
19361: PUSH
19362: LD_INT 5
19364: ST_TO_ADDR
// end ;
19365: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19366: LD_EXP 69
19370: PUSH
19371: LD_INT 34
19373: PUSH
19374: LD_INT 81
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PPUSH
19381: CALL_OW 69
19385: AND
19386: IFFALSE 19847
19388: GO 19390
19390: DISABLE
19391: LD_INT 0
19393: PPUSH
19394: PPUSH
19395: PPUSH
19396: PPUSH
// begin enable ;
19397: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19398: LD_ADDR_VAR 0 1
19402: PUSH
19403: LD_INT 34
19405: PUSH
19406: LD_INT 81
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PPUSH
19413: CALL_OW 69
19417: PUSH
19418: FOR_IN
19419: IFFALSE 19491
// begin if not i in minersList then
19421: LD_VAR 0 1
19425: PUSH
19426: LD_EXP 70
19430: IN
19431: NOT
19432: IFFALSE 19489
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19434: LD_ADDR_EXP 70
19438: PUSH
19439: LD_EXP 70
19443: PPUSH
19444: LD_EXP 70
19448: PUSH
19449: LD_INT 1
19451: PLUS
19452: PPUSH
19453: LD_VAR 0 1
19457: PPUSH
19458: CALL_OW 1
19462: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19463: LD_ADDR_EXP 71
19467: PUSH
19468: LD_EXP 71
19472: PPUSH
19473: LD_EXP 71
19477: PUSH
19478: LD_INT 1
19480: PLUS
19481: PPUSH
19482: EMPTY
19483: PPUSH
19484: CALL_OW 1
19488: ST_TO_ADDR
// end end ;
19489: GO 19418
19491: POP
19492: POP
// for i := minerMinesList downto 1 do
19493: LD_ADDR_VAR 0 1
19497: PUSH
19498: DOUBLE
19499: LD_EXP 71
19503: INC
19504: ST_TO_ADDR
19505: LD_INT 1
19507: PUSH
19508: FOR_DOWNTO
19509: IFFALSE 19845
// begin if IsLive ( minersList [ i ] ) then
19511: LD_EXP 70
19515: PUSH
19516: LD_VAR 0 1
19520: ARRAY
19521: PPUSH
19522: CALL_OW 300
19526: IFFALSE 19554
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19528: LD_EXP 70
19532: PUSH
19533: LD_VAR 0 1
19537: ARRAY
19538: PPUSH
19539: LD_EXP 71
19543: PUSH
19544: LD_VAR 0 1
19548: ARRAY
19549: PPUSH
19550: CALL_OW 505
// if not minerMinesList [ i ] then
19554: LD_EXP 71
19558: PUSH
19559: LD_VAR 0 1
19563: ARRAY
19564: NOT
19565: IFFALSE 19569
// continue ;
19567: GO 19508
// for j := minerMinesList [ i ] downto 1 do
19569: LD_ADDR_VAR 0 2
19573: PUSH
19574: DOUBLE
19575: LD_EXP 71
19579: PUSH
19580: LD_VAR 0 1
19584: ARRAY
19585: INC
19586: ST_TO_ADDR
19587: LD_INT 1
19589: PUSH
19590: FOR_DOWNTO
19591: IFFALSE 19841
// begin side := GetSide ( minersList [ i ] ) ;
19593: LD_ADDR_VAR 0 3
19597: PUSH
19598: LD_EXP 70
19602: PUSH
19603: LD_VAR 0 1
19607: ARRAY
19608: PPUSH
19609: CALL_OW 255
19613: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19614: LD_ADDR_VAR 0 4
19618: PUSH
19619: LD_EXP 71
19623: PUSH
19624: LD_VAR 0 1
19628: ARRAY
19629: PUSH
19630: LD_VAR 0 2
19634: ARRAY
19635: PUSH
19636: LD_INT 1
19638: ARRAY
19639: PPUSH
19640: LD_EXP 71
19644: PUSH
19645: LD_VAR 0 1
19649: ARRAY
19650: PUSH
19651: LD_VAR 0 2
19655: ARRAY
19656: PUSH
19657: LD_INT 2
19659: ARRAY
19660: PPUSH
19661: CALL_OW 428
19665: ST_TO_ADDR
// if not tmp then
19666: LD_VAR 0 4
19670: NOT
19671: IFFALSE 19675
// continue ;
19673: GO 19590
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19675: LD_VAR 0 4
19679: PUSH
19680: LD_INT 81
19682: PUSH
19683: LD_VAR 0 3
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PPUSH
19692: CALL_OW 69
19696: IN
19697: PUSH
19698: LD_EXP 71
19702: PUSH
19703: LD_VAR 0 1
19707: ARRAY
19708: PUSH
19709: LD_VAR 0 2
19713: ARRAY
19714: PUSH
19715: LD_INT 1
19717: ARRAY
19718: PPUSH
19719: LD_EXP 71
19723: PUSH
19724: LD_VAR 0 1
19728: ARRAY
19729: PUSH
19730: LD_VAR 0 2
19734: ARRAY
19735: PUSH
19736: LD_INT 2
19738: ARRAY
19739: PPUSH
19740: CALL_OW 458
19744: AND
19745: IFFALSE 19839
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19747: LD_EXP 71
19751: PUSH
19752: LD_VAR 0 1
19756: ARRAY
19757: PUSH
19758: LD_VAR 0 2
19762: ARRAY
19763: PUSH
19764: LD_INT 1
19766: ARRAY
19767: PPUSH
19768: LD_EXP 71
19772: PUSH
19773: LD_VAR 0 1
19777: ARRAY
19778: PUSH
19779: LD_VAR 0 2
19783: ARRAY
19784: PUSH
19785: LD_INT 2
19787: ARRAY
19788: PPUSH
19789: LD_VAR 0 3
19793: PPUSH
19794: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19798: LD_ADDR_EXP 71
19802: PUSH
19803: LD_EXP 71
19807: PPUSH
19808: LD_VAR 0 1
19812: PPUSH
19813: LD_EXP 71
19817: PUSH
19818: LD_VAR 0 1
19822: ARRAY
19823: PPUSH
19824: LD_VAR 0 2
19828: PPUSH
19829: CALL_OW 3
19833: PPUSH
19834: CALL_OW 1
19838: ST_TO_ADDR
// end ; end ;
19839: GO 19590
19841: POP
19842: POP
// end ;
19843: GO 19508
19845: POP
19846: POP
// end ;
19847: PPOPN 4
19849: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19850: LD_INT 0
19852: PPUSH
19853: PPUSH
// result := false ;
19854: LD_ADDR_VAR 0 4
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19862: LD_VAR 0 1
19866: PPUSH
19867: CALL_OW 264
19871: PUSH
19872: LD_INT 81
19874: EQUAL
19875: NOT
19876: IFFALSE 19880
// exit ;
19878: GO 20120
// index := GetElementIndex ( minersList , unit ) ;
19880: LD_ADDR_VAR 0 5
19884: PUSH
19885: LD_EXP 70
19889: PPUSH
19890: LD_VAR 0 1
19894: PPUSH
19895: CALL 26475 0 2
19899: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19900: LD_EXP 71
19904: PUSH
19905: LD_VAR 0 5
19909: ARRAY
19910: PUSH
19911: LD_EXP 72
19915: GREATEREQUAL
19916: IFFALSE 19920
// exit ;
19918: GO 20120
// ComMoveXY ( unit , x , y ) ;
19920: LD_VAR 0 1
19924: PPUSH
19925: LD_VAR 0 2
19929: PPUSH
19930: LD_VAR 0 3
19934: PPUSH
19935: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19939: LD_INT 35
19941: PPUSH
19942: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19946: LD_VAR 0 1
19950: PPUSH
19951: LD_VAR 0 2
19955: PPUSH
19956: LD_VAR 0 3
19960: PPUSH
19961: CALL 57811 0 3
19965: NOT
19966: PUSH
19967: LD_VAR 0 1
19971: PPUSH
19972: CALL_OW 314
19976: AND
19977: IFFALSE 19981
// exit ;
19979: GO 20120
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19981: LD_VAR 0 2
19985: PPUSH
19986: LD_VAR 0 3
19990: PPUSH
19991: CALL_OW 428
19995: PUSH
19996: LD_VAR 0 1
20000: EQUAL
20001: PUSH
20002: LD_VAR 0 1
20006: PPUSH
20007: CALL_OW 314
20011: NOT
20012: AND
20013: IFFALSE 19939
// PlaySoundXY ( x , y , PlantMine ) ;
20015: LD_VAR 0 2
20019: PPUSH
20020: LD_VAR 0 3
20024: PPUSH
20025: LD_STRING PlantMine
20027: PPUSH
20028: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20032: LD_VAR 0 2
20036: PPUSH
20037: LD_VAR 0 3
20041: PPUSH
20042: LD_VAR 0 1
20046: PPUSH
20047: CALL_OW 255
20051: PPUSH
20052: LD_INT 0
20054: PPUSH
20055: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20059: LD_ADDR_EXP 71
20063: PUSH
20064: LD_EXP 71
20068: PPUSH
20069: LD_VAR 0 5
20073: PUSH
20074: LD_EXP 71
20078: PUSH
20079: LD_VAR 0 5
20083: ARRAY
20084: PUSH
20085: LD_INT 1
20087: PLUS
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PPUSH
20093: LD_VAR 0 2
20097: PUSH
20098: LD_VAR 0 3
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PPUSH
20107: CALL 26690 0 3
20111: ST_TO_ADDR
// result := true ;
20112: LD_ADDR_VAR 0 4
20116: PUSH
20117: LD_INT 1
20119: ST_TO_ADDR
// end ;
20120: LD_VAR 0 4
20124: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20125: LD_INT 0
20127: PPUSH
20128: PPUSH
20129: PPUSH
// if not unit in minersList then
20130: LD_VAR 0 1
20134: PUSH
20135: LD_EXP 70
20139: IN
20140: NOT
20141: IFFALSE 20145
// exit ;
20143: GO 20537
// index := GetElementIndex ( minersList , unit ) ;
20145: LD_ADDR_VAR 0 6
20149: PUSH
20150: LD_EXP 70
20154: PPUSH
20155: LD_VAR 0 1
20159: PPUSH
20160: CALL 26475 0 2
20164: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20165: LD_ADDR_VAR 0 5
20169: PUSH
20170: DOUBLE
20171: LD_EXP 71
20175: PUSH
20176: LD_VAR 0 6
20180: ARRAY
20181: INC
20182: ST_TO_ADDR
20183: LD_INT 1
20185: PUSH
20186: FOR_DOWNTO
20187: IFFALSE 20348
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20189: LD_EXP 71
20193: PUSH
20194: LD_VAR 0 6
20198: ARRAY
20199: PUSH
20200: LD_VAR 0 5
20204: ARRAY
20205: PUSH
20206: LD_INT 1
20208: ARRAY
20209: PUSH
20210: LD_VAR 0 2
20214: EQUAL
20215: PUSH
20216: LD_EXP 71
20220: PUSH
20221: LD_VAR 0 6
20225: ARRAY
20226: PUSH
20227: LD_VAR 0 5
20231: ARRAY
20232: PUSH
20233: LD_INT 2
20235: ARRAY
20236: PUSH
20237: LD_VAR 0 3
20241: EQUAL
20242: AND
20243: IFFALSE 20346
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20245: LD_EXP 71
20249: PUSH
20250: LD_VAR 0 6
20254: ARRAY
20255: PUSH
20256: LD_VAR 0 5
20260: ARRAY
20261: PUSH
20262: LD_INT 1
20264: ARRAY
20265: PPUSH
20266: LD_EXP 71
20270: PUSH
20271: LD_VAR 0 6
20275: ARRAY
20276: PUSH
20277: LD_VAR 0 5
20281: ARRAY
20282: PUSH
20283: LD_INT 2
20285: ARRAY
20286: PPUSH
20287: LD_VAR 0 1
20291: PPUSH
20292: CALL_OW 255
20296: PPUSH
20297: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20301: LD_ADDR_EXP 71
20305: PUSH
20306: LD_EXP 71
20310: PPUSH
20311: LD_VAR 0 6
20315: PPUSH
20316: LD_EXP 71
20320: PUSH
20321: LD_VAR 0 6
20325: ARRAY
20326: PPUSH
20327: LD_VAR 0 5
20331: PPUSH
20332: CALL_OW 3
20336: PPUSH
20337: CALL_OW 1
20341: ST_TO_ADDR
// exit ;
20342: POP
20343: POP
20344: GO 20537
// end ; end ;
20346: GO 20186
20348: POP
20349: POP
// for i := minerMinesList [ index ] downto 1 do
20350: LD_ADDR_VAR 0 5
20354: PUSH
20355: DOUBLE
20356: LD_EXP 71
20360: PUSH
20361: LD_VAR 0 6
20365: ARRAY
20366: INC
20367: ST_TO_ADDR
20368: LD_INT 1
20370: PUSH
20371: FOR_DOWNTO
20372: IFFALSE 20535
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20374: LD_EXP 71
20378: PUSH
20379: LD_VAR 0 6
20383: ARRAY
20384: PUSH
20385: LD_VAR 0 5
20389: ARRAY
20390: PUSH
20391: LD_INT 1
20393: ARRAY
20394: PPUSH
20395: LD_EXP 71
20399: PUSH
20400: LD_VAR 0 6
20404: ARRAY
20405: PUSH
20406: LD_VAR 0 5
20410: ARRAY
20411: PUSH
20412: LD_INT 2
20414: ARRAY
20415: PPUSH
20416: LD_VAR 0 2
20420: PPUSH
20421: LD_VAR 0 3
20425: PPUSH
20426: CALL_OW 298
20430: PUSH
20431: LD_INT 6
20433: LESS
20434: IFFALSE 20533
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20436: LD_EXP 71
20440: PUSH
20441: LD_VAR 0 6
20445: ARRAY
20446: PUSH
20447: LD_VAR 0 5
20451: ARRAY
20452: PUSH
20453: LD_INT 1
20455: ARRAY
20456: PPUSH
20457: LD_EXP 71
20461: PUSH
20462: LD_VAR 0 6
20466: ARRAY
20467: PUSH
20468: LD_VAR 0 5
20472: ARRAY
20473: PUSH
20474: LD_INT 2
20476: ARRAY
20477: PPUSH
20478: LD_VAR 0 1
20482: PPUSH
20483: CALL_OW 255
20487: PPUSH
20488: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20492: LD_ADDR_EXP 71
20496: PUSH
20497: LD_EXP 71
20501: PPUSH
20502: LD_VAR 0 6
20506: PPUSH
20507: LD_EXP 71
20511: PUSH
20512: LD_VAR 0 6
20516: ARRAY
20517: PPUSH
20518: LD_VAR 0 5
20522: PPUSH
20523: CALL_OW 3
20527: PPUSH
20528: CALL_OW 1
20532: ST_TO_ADDR
// end ; end ;
20533: GO 20371
20535: POP
20536: POP
// end ;
20537: LD_VAR 0 4
20541: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20542: LD_INT 0
20544: PPUSH
20545: PPUSH
20546: PPUSH
20547: PPUSH
20548: PPUSH
20549: PPUSH
20550: PPUSH
20551: PPUSH
20552: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20553: LD_VAR 0 1
20557: PPUSH
20558: CALL_OW 264
20562: PUSH
20563: LD_INT 81
20565: EQUAL
20566: NOT
20567: PUSH
20568: LD_VAR 0 1
20572: PUSH
20573: LD_EXP 70
20577: IN
20578: NOT
20579: OR
20580: IFFALSE 20584
// exit ;
20582: GO 20906
// index := GetElementIndex ( minersList , unit ) ;
20584: LD_ADDR_VAR 0 6
20588: PUSH
20589: LD_EXP 70
20593: PPUSH
20594: LD_VAR 0 1
20598: PPUSH
20599: CALL 26475 0 2
20603: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20604: LD_ADDR_VAR 0 8
20608: PUSH
20609: LD_EXP 72
20613: PUSH
20614: LD_EXP 71
20618: PUSH
20619: LD_VAR 0 6
20623: ARRAY
20624: MINUS
20625: ST_TO_ADDR
// if not minesFreeAmount then
20626: LD_VAR 0 8
20630: NOT
20631: IFFALSE 20635
// exit ;
20633: GO 20906
// tmp := [ ] ;
20635: LD_ADDR_VAR 0 7
20639: PUSH
20640: EMPTY
20641: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20642: LD_ADDR_VAR 0 5
20646: PUSH
20647: DOUBLE
20648: LD_INT 1
20650: DEC
20651: ST_TO_ADDR
20652: LD_VAR 0 8
20656: PUSH
20657: FOR_TO
20658: IFFALSE 20853
// begin _d := rand ( 0 , 5 ) ;
20660: LD_ADDR_VAR 0 11
20664: PUSH
20665: LD_INT 0
20667: PPUSH
20668: LD_INT 5
20670: PPUSH
20671: CALL_OW 12
20675: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20676: LD_ADDR_VAR 0 12
20680: PUSH
20681: LD_INT 2
20683: PPUSH
20684: LD_INT 6
20686: PPUSH
20687: CALL_OW 12
20691: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20692: LD_ADDR_VAR 0 9
20696: PUSH
20697: LD_VAR 0 2
20701: PPUSH
20702: LD_VAR 0 11
20706: PPUSH
20707: LD_VAR 0 12
20711: PPUSH
20712: CALL_OW 272
20716: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20717: LD_ADDR_VAR 0 10
20721: PUSH
20722: LD_VAR 0 3
20726: PPUSH
20727: LD_VAR 0 11
20731: PPUSH
20732: LD_VAR 0 12
20736: PPUSH
20737: CALL_OW 273
20741: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20742: LD_VAR 0 9
20746: PPUSH
20747: LD_VAR 0 10
20751: PPUSH
20752: CALL_OW 488
20756: PUSH
20757: LD_VAR 0 9
20761: PUSH
20762: LD_VAR 0 10
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_VAR 0 7
20775: IN
20776: NOT
20777: AND
20778: PUSH
20779: LD_VAR 0 9
20783: PPUSH
20784: LD_VAR 0 10
20788: PPUSH
20789: CALL_OW 458
20793: NOT
20794: AND
20795: IFFALSE 20837
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20797: LD_ADDR_VAR 0 7
20801: PUSH
20802: LD_VAR 0 7
20806: PPUSH
20807: LD_VAR 0 7
20811: PUSH
20812: LD_INT 1
20814: PLUS
20815: PPUSH
20816: LD_VAR 0 9
20820: PUSH
20821: LD_VAR 0 10
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PPUSH
20830: CALL_OW 1
20834: ST_TO_ADDR
20835: GO 20851
// i := i - 1 ;
20837: LD_ADDR_VAR 0 5
20841: PUSH
20842: LD_VAR 0 5
20846: PUSH
20847: LD_INT 1
20849: MINUS
20850: ST_TO_ADDR
// end ;
20851: GO 20657
20853: POP
20854: POP
// for i in tmp do
20855: LD_ADDR_VAR 0 5
20859: PUSH
20860: LD_VAR 0 7
20864: PUSH
20865: FOR_IN
20866: IFFALSE 20904
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20868: LD_VAR 0 1
20872: PPUSH
20873: LD_VAR 0 5
20877: PUSH
20878: LD_INT 1
20880: ARRAY
20881: PPUSH
20882: LD_VAR 0 5
20886: PUSH
20887: LD_INT 2
20889: ARRAY
20890: PPUSH
20891: CALL 19850 0 3
20895: NOT
20896: IFFALSE 20902
// exit ;
20898: POP
20899: POP
20900: GO 20906
20902: GO 20865
20904: POP
20905: POP
// end ;
20906: LD_VAR 0 4
20910: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20911: LD_INT 0
20913: PPUSH
20914: PPUSH
20915: PPUSH
20916: PPUSH
20917: PPUSH
20918: PPUSH
20919: PPUSH
// if not GetClass ( unit ) = class_sniper then
20920: LD_VAR 0 1
20924: PPUSH
20925: CALL_OW 257
20929: PUSH
20930: LD_INT 5
20932: EQUAL
20933: NOT
20934: IFFALSE 20938
// exit ;
20936: GO 21326
// dist := 8 ;
20938: LD_ADDR_VAR 0 5
20942: PUSH
20943: LD_INT 8
20945: ST_TO_ADDR
// viewRange := 12 ;
20946: LD_ADDR_VAR 0 7
20950: PUSH
20951: LD_INT 12
20953: ST_TO_ADDR
// side := GetSide ( unit ) ;
20954: LD_ADDR_VAR 0 6
20958: PUSH
20959: LD_VAR 0 1
20963: PPUSH
20964: CALL_OW 255
20968: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20969: LD_INT 61
20971: PPUSH
20972: LD_VAR 0 6
20976: PPUSH
20977: CALL_OW 321
20981: PUSH
20982: LD_INT 2
20984: EQUAL
20985: IFFALSE 20995
// viewRange := 16 ;
20987: LD_ADDR_VAR 0 7
20991: PUSH
20992: LD_INT 16
20994: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20995: LD_VAR 0 1
20999: PPUSH
21000: LD_VAR 0 2
21004: PPUSH
21005: LD_VAR 0 3
21009: PPUSH
21010: CALL_OW 297
21014: PUSH
21015: LD_VAR 0 5
21019: GREATER
21020: IFFALSE 21099
// begin ComMoveXY ( unit , x , y ) ;
21022: LD_VAR 0 1
21026: PPUSH
21027: LD_VAR 0 2
21031: PPUSH
21032: LD_VAR 0 3
21036: PPUSH
21037: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21041: LD_INT 35
21043: PPUSH
21044: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21048: LD_VAR 0 1
21052: PPUSH
21053: LD_VAR 0 2
21057: PPUSH
21058: LD_VAR 0 3
21062: PPUSH
21063: CALL 57811 0 3
21067: NOT
21068: IFFALSE 21072
// exit ;
21070: GO 21326
// until GetDistUnitXY ( unit , x , y ) < dist ;
21072: LD_VAR 0 1
21076: PPUSH
21077: LD_VAR 0 2
21081: PPUSH
21082: LD_VAR 0 3
21086: PPUSH
21087: CALL_OW 297
21091: PUSH
21092: LD_VAR 0 5
21096: LESS
21097: IFFALSE 21041
// end ; ComTurnXY ( unit , x , y ) ;
21099: LD_VAR 0 1
21103: PPUSH
21104: LD_VAR 0 2
21108: PPUSH
21109: LD_VAR 0 3
21113: PPUSH
21114: CALL_OW 118
// wait ( 5 ) ;
21118: LD_INT 5
21120: PPUSH
21121: CALL_OW 67
// _d := GetDir ( unit ) ;
21125: LD_ADDR_VAR 0 10
21129: PUSH
21130: LD_VAR 0 1
21134: PPUSH
21135: CALL_OW 254
21139: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21140: LD_ADDR_VAR 0 8
21144: PUSH
21145: LD_VAR 0 1
21149: PPUSH
21150: CALL_OW 250
21154: PPUSH
21155: LD_VAR 0 10
21159: PPUSH
21160: LD_VAR 0 5
21164: PPUSH
21165: CALL_OW 272
21169: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21170: LD_ADDR_VAR 0 9
21174: PUSH
21175: LD_VAR 0 1
21179: PPUSH
21180: CALL_OW 251
21184: PPUSH
21185: LD_VAR 0 10
21189: PPUSH
21190: LD_VAR 0 5
21194: PPUSH
21195: CALL_OW 273
21199: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21200: LD_VAR 0 8
21204: PPUSH
21205: LD_VAR 0 9
21209: PPUSH
21210: CALL_OW 488
21214: NOT
21215: IFFALSE 21219
// exit ;
21217: GO 21326
// ComAnimCustom ( unit , 1 ) ;
21219: LD_VAR 0 1
21223: PPUSH
21224: LD_INT 1
21226: PPUSH
21227: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21231: LD_VAR 0 8
21235: PPUSH
21236: LD_VAR 0 9
21240: PPUSH
21241: LD_VAR 0 6
21245: PPUSH
21246: LD_VAR 0 7
21250: PPUSH
21251: CALL_OW 330
// repeat wait ( 1 ) ;
21255: LD_INT 1
21257: PPUSH
21258: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21262: LD_VAR 0 1
21266: PPUSH
21267: CALL_OW 316
21271: PUSH
21272: LD_VAR 0 1
21276: PPUSH
21277: CALL_OW 314
21281: OR
21282: PUSH
21283: LD_VAR 0 1
21287: PPUSH
21288: CALL_OW 302
21292: NOT
21293: OR
21294: PUSH
21295: LD_VAR 0 1
21299: PPUSH
21300: CALL_OW 301
21304: OR
21305: IFFALSE 21255
// RemoveSeeing ( _x , _y , side ) ;
21307: LD_VAR 0 8
21311: PPUSH
21312: LD_VAR 0 9
21316: PPUSH
21317: LD_VAR 0 6
21321: PPUSH
21322: CALL_OW 331
// end ; end_of_file
21326: LD_VAR 0 4
21330: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21331: LD_VAR 0 1
21335: PPUSH
21336: LD_VAR 0 2
21340: PPUSH
21341: LD_VAR 0 3
21345: PPUSH
21346: LD_VAR 0 4
21350: PPUSH
21351: LD_VAR 0 5
21355: PPUSH
21356: LD_VAR 0 6
21360: PPUSH
21361: CALL 1444 0 6
// end ;
21365: PPOPN 6
21367: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
21368: LD_INT 0
21370: PPUSH
// begin if not units then
21371: LD_VAR 0 1
21375: NOT
21376: IFFALSE 21380
// exit ;
21378: GO 21380
// end ;
21380: PPOPN 7
21382: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
21383: CALL 1415 0 0
// end ; end_of_file
21387: PPOPN 1
21389: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21390: LD_VAR 0 1
21394: PUSH
21395: LD_INT 200
21397: DOUBLE
21398: GREATEREQUAL
21399: IFFALSE 21407
21401: LD_INT 299
21403: DOUBLE
21404: LESSEQUAL
21405: IFTRUE 21409
21407: GO 21441
21409: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21410: LD_VAR 0 1
21414: PPUSH
21415: LD_VAR 0 2
21419: PPUSH
21420: LD_VAR 0 3
21424: PPUSH
21425: LD_VAR 0 4
21429: PPUSH
21430: LD_VAR 0 5
21434: PPUSH
21435: CALL 17418 0 5
21439: GO 21518
21441: LD_INT 300
21443: DOUBLE
21444: GREATEREQUAL
21445: IFFALSE 21453
21447: LD_INT 399
21449: DOUBLE
21450: LESSEQUAL
21451: IFTRUE 21455
21453: GO 21517
21455: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21456: LD_VAR 0 1
21460: PPUSH
21461: LD_VAR 0 2
21465: PPUSH
21466: LD_VAR 0 3
21470: PPUSH
21471: LD_VAR 0 4
21475: PPUSH
21476: LD_VAR 0 5
21480: PPUSH
21481: LD_VAR 0 6
21485: PPUSH
21486: LD_VAR 0 7
21490: PPUSH
21491: LD_VAR 0 8
21495: PPUSH
21496: LD_VAR 0 9
21500: PPUSH
21501: LD_VAR 0 10
21505: PPUSH
21506: LD_VAR 0 11
21510: PPUSH
21511: CALL 13751 0 11
21515: GO 21518
21517: POP
// end ;
21518: PPOPN 11
21520: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_VAR 0 2
21530: PPUSH
21531: LD_VAR 0 3
21535: PPUSH
21536: LD_VAR 0 4
21540: PPUSH
21541: LD_VAR 0 5
21545: PPUSH
21546: CALL 17154 0 5
// end ; end_of_file
21550: PPOPN 5
21552: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21553: LD_INT 0
21555: PPUSH
21556: PPUSH
// if exist_mode then
21557: LD_VAR 0 2
21561: IFFALSE 21586
// unit := CreateCharacter ( prefix & ident ) else
21563: LD_ADDR_VAR 0 5
21567: PUSH
21568: LD_VAR 0 3
21572: PUSH
21573: LD_VAR 0 1
21577: STR
21578: PPUSH
21579: CALL_OW 34
21583: ST_TO_ADDR
21584: GO 21601
// unit := NewCharacter ( ident ) ;
21586: LD_ADDR_VAR 0 5
21590: PUSH
21591: LD_VAR 0 1
21595: PPUSH
21596: CALL_OW 25
21600: ST_TO_ADDR
// result := unit ;
21601: LD_ADDR_VAR 0 4
21605: PUSH
21606: LD_VAR 0 5
21610: ST_TO_ADDR
// end ;
21611: LD_VAR 0 4
21615: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21616: LD_INT 0
21618: PPUSH
21619: PPUSH
// if not side or not nation then
21620: LD_VAR 0 1
21624: NOT
21625: PUSH
21626: LD_VAR 0 2
21630: NOT
21631: OR
21632: IFFALSE 21636
// exit ;
21634: GO 22404
// case nation of nation_american :
21636: LD_VAR 0 2
21640: PUSH
21641: LD_INT 1
21643: DOUBLE
21644: EQUAL
21645: IFTRUE 21649
21647: GO 21863
21649: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21650: LD_ADDR_VAR 0 4
21654: PUSH
21655: LD_INT 35
21657: PUSH
21658: LD_INT 45
21660: PUSH
21661: LD_INT 46
21663: PUSH
21664: LD_INT 47
21666: PUSH
21667: LD_INT 82
21669: PUSH
21670: LD_INT 83
21672: PUSH
21673: LD_INT 84
21675: PUSH
21676: LD_INT 85
21678: PUSH
21679: LD_INT 86
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: LD_INT 6
21690: PUSH
21691: LD_INT 15
21693: PUSH
21694: LD_INT 16
21696: PUSH
21697: LD_INT 7
21699: PUSH
21700: LD_INT 12
21702: PUSH
21703: LD_INT 13
21705: PUSH
21706: LD_INT 10
21708: PUSH
21709: LD_INT 14
21711: PUSH
21712: LD_INT 20
21714: PUSH
21715: LD_INT 21
21717: PUSH
21718: LD_INT 22
21720: PUSH
21721: LD_INT 25
21723: PUSH
21724: LD_INT 32
21726: PUSH
21727: LD_INT 27
21729: PUSH
21730: LD_INT 36
21732: PUSH
21733: LD_INT 69
21735: PUSH
21736: LD_INT 39
21738: PUSH
21739: LD_INT 34
21741: PUSH
21742: LD_INT 40
21744: PUSH
21745: LD_INT 48
21747: PUSH
21748: LD_INT 49
21750: PUSH
21751: LD_INT 50
21753: PUSH
21754: LD_INT 51
21756: PUSH
21757: LD_INT 52
21759: PUSH
21760: LD_INT 53
21762: PUSH
21763: LD_INT 54
21765: PUSH
21766: LD_INT 55
21768: PUSH
21769: LD_INT 56
21771: PUSH
21772: LD_INT 57
21774: PUSH
21775: LD_INT 58
21777: PUSH
21778: LD_INT 59
21780: PUSH
21781: LD_INT 60
21783: PUSH
21784: LD_INT 61
21786: PUSH
21787: LD_INT 62
21789: PUSH
21790: LD_INT 80
21792: PUSH
21793: LD_INT 82
21795: PUSH
21796: LD_INT 83
21798: PUSH
21799: LD_INT 84
21801: PUSH
21802: LD_INT 85
21804: PUSH
21805: LD_INT 86
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: ST_TO_ADDR
21861: GO 22328
21863: LD_INT 2
21865: DOUBLE
21866: EQUAL
21867: IFTRUE 21871
21869: GO 22097
21871: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21872: LD_ADDR_VAR 0 4
21876: PUSH
21877: LD_INT 35
21879: PUSH
21880: LD_INT 45
21882: PUSH
21883: LD_INT 46
21885: PUSH
21886: LD_INT 47
21888: PUSH
21889: LD_INT 82
21891: PUSH
21892: LD_INT 83
21894: PUSH
21895: LD_INT 84
21897: PUSH
21898: LD_INT 85
21900: PUSH
21901: LD_INT 87
21903: PUSH
21904: LD_INT 70
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: LD_INT 11
21912: PUSH
21913: LD_INT 3
21915: PUSH
21916: LD_INT 4
21918: PUSH
21919: LD_INT 5
21921: PUSH
21922: LD_INT 6
21924: PUSH
21925: LD_INT 15
21927: PUSH
21928: LD_INT 18
21930: PUSH
21931: LD_INT 7
21933: PUSH
21934: LD_INT 17
21936: PUSH
21937: LD_INT 8
21939: PUSH
21940: LD_INT 20
21942: PUSH
21943: LD_INT 21
21945: PUSH
21946: LD_INT 22
21948: PUSH
21949: LD_INT 72
21951: PUSH
21952: LD_INT 26
21954: PUSH
21955: LD_INT 69
21957: PUSH
21958: LD_INT 39
21960: PUSH
21961: LD_INT 40
21963: PUSH
21964: LD_INT 41
21966: PUSH
21967: LD_INT 42
21969: PUSH
21970: LD_INT 43
21972: PUSH
21973: LD_INT 48
21975: PUSH
21976: LD_INT 49
21978: PUSH
21979: LD_INT 50
21981: PUSH
21982: LD_INT 51
21984: PUSH
21985: LD_INT 52
21987: PUSH
21988: LD_INT 53
21990: PUSH
21991: LD_INT 54
21993: PUSH
21994: LD_INT 55
21996: PUSH
21997: LD_INT 56
21999: PUSH
22000: LD_INT 60
22002: PUSH
22003: LD_INT 61
22005: PUSH
22006: LD_INT 62
22008: PUSH
22009: LD_INT 66
22011: PUSH
22012: LD_INT 67
22014: PUSH
22015: LD_INT 68
22017: PUSH
22018: LD_INT 81
22020: PUSH
22021: LD_INT 82
22023: PUSH
22024: LD_INT 83
22026: PUSH
22027: LD_INT 84
22029: PUSH
22030: LD_INT 85
22032: PUSH
22033: LD_INT 87
22035: PUSH
22036: LD_INT 88
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: ST_TO_ADDR
22095: GO 22328
22097: LD_INT 3
22099: DOUBLE
22100: EQUAL
22101: IFTRUE 22105
22103: GO 22327
22105: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22106: LD_ADDR_VAR 0 4
22110: PUSH
22111: LD_INT 46
22113: PUSH
22114: LD_INT 47
22116: PUSH
22117: LD_INT 1
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: LD_INT 82
22125: PUSH
22126: LD_INT 83
22128: PUSH
22129: LD_INT 84
22131: PUSH
22132: LD_INT 85
22134: PUSH
22135: LD_INT 86
22137: PUSH
22138: LD_INT 11
22140: PUSH
22141: LD_INT 9
22143: PUSH
22144: LD_INT 20
22146: PUSH
22147: LD_INT 19
22149: PUSH
22150: LD_INT 21
22152: PUSH
22153: LD_INT 24
22155: PUSH
22156: LD_INT 22
22158: PUSH
22159: LD_INT 25
22161: PUSH
22162: LD_INT 28
22164: PUSH
22165: LD_INT 29
22167: PUSH
22168: LD_INT 30
22170: PUSH
22171: LD_INT 31
22173: PUSH
22174: LD_INT 37
22176: PUSH
22177: LD_INT 38
22179: PUSH
22180: LD_INT 32
22182: PUSH
22183: LD_INT 27
22185: PUSH
22186: LD_INT 33
22188: PUSH
22189: LD_INT 69
22191: PUSH
22192: LD_INT 39
22194: PUSH
22195: LD_INT 34
22197: PUSH
22198: LD_INT 40
22200: PUSH
22201: LD_INT 71
22203: PUSH
22204: LD_INT 23
22206: PUSH
22207: LD_INT 44
22209: PUSH
22210: LD_INT 48
22212: PUSH
22213: LD_INT 49
22215: PUSH
22216: LD_INT 50
22218: PUSH
22219: LD_INT 51
22221: PUSH
22222: LD_INT 52
22224: PUSH
22225: LD_INT 53
22227: PUSH
22228: LD_INT 54
22230: PUSH
22231: LD_INT 55
22233: PUSH
22234: LD_INT 56
22236: PUSH
22237: LD_INT 57
22239: PUSH
22240: LD_INT 58
22242: PUSH
22243: LD_INT 59
22245: PUSH
22246: LD_INT 63
22248: PUSH
22249: LD_INT 64
22251: PUSH
22252: LD_INT 65
22254: PUSH
22255: LD_INT 82
22257: PUSH
22258: LD_INT 83
22260: PUSH
22261: LD_INT 84
22263: PUSH
22264: LD_INT 85
22266: PUSH
22267: LD_INT 86
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: ST_TO_ADDR
22325: GO 22328
22327: POP
// if state > - 1 and state < 3 then
22328: LD_VAR 0 3
22332: PUSH
22333: LD_INT 1
22335: NEG
22336: GREATER
22337: PUSH
22338: LD_VAR 0 3
22342: PUSH
22343: LD_INT 3
22345: LESS
22346: AND
22347: IFFALSE 22404
// for i in result do
22349: LD_ADDR_VAR 0 5
22353: PUSH
22354: LD_VAR 0 4
22358: PUSH
22359: FOR_IN
22360: IFFALSE 22402
// if GetTech ( i , side ) <> state then
22362: LD_VAR 0 5
22366: PPUSH
22367: LD_VAR 0 1
22371: PPUSH
22372: CALL_OW 321
22376: PUSH
22377: LD_VAR 0 3
22381: NONEQUAL
22382: IFFALSE 22400
// result := result diff i ;
22384: LD_ADDR_VAR 0 4
22388: PUSH
22389: LD_VAR 0 4
22393: PUSH
22394: LD_VAR 0 5
22398: DIFF
22399: ST_TO_ADDR
22400: GO 22359
22402: POP
22403: POP
// end ;
22404: LD_VAR 0 4
22408: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22409: LD_INT 0
22411: PPUSH
22412: PPUSH
22413: PPUSH
// result := true ;
22414: LD_ADDR_VAR 0 3
22418: PUSH
22419: LD_INT 1
22421: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22422: LD_ADDR_VAR 0 5
22426: PUSH
22427: LD_VAR 0 2
22431: PPUSH
22432: CALL_OW 480
22436: ST_TO_ADDR
// if not tmp then
22437: LD_VAR 0 5
22441: NOT
22442: IFFALSE 22446
// exit ;
22444: GO 22495
// for i in tmp do
22446: LD_ADDR_VAR 0 4
22450: PUSH
22451: LD_VAR 0 5
22455: PUSH
22456: FOR_IN
22457: IFFALSE 22493
// if GetTech ( i , side ) <> state_researched then
22459: LD_VAR 0 4
22463: PPUSH
22464: LD_VAR 0 1
22468: PPUSH
22469: CALL_OW 321
22473: PUSH
22474: LD_INT 2
22476: NONEQUAL
22477: IFFALSE 22491
// begin result := false ;
22479: LD_ADDR_VAR 0 3
22483: PUSH
22484: LD_INT 0
22486: ST_TO_ADDR
// exit ;
22487: POP
22488: POP
22489: GO 22495
// end ;
22491: GO 22456
22493: POP
22494: POP
// end ;
22495: LD_VAR 0 3
22499: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22500: LD_INT 0
22502: PPUSH
22503: PPUSH
22504: PPUSH
22505: PPUSH
22506: PPUSH
22507: PPUSH
22508: PPUSH
22509: PPUSH
22510: PPUSH
22511: PPUSH
22512: PPUSH
22513: PPUSH
22514: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22515: LD_VAR 0 1
22519: NOT
22520: PUSH
22521: LD_VAR 0 1
22525: PPUSH
22526: CALL_OW 257
22530: PUSH
22531: LD_INT 9
22533: NONEQUAL
22534: OR
22535: IFFALSE 22539
// exit ;
22537: GO 23112
// side := GetSide ( unit ) ;
22539: LD_ADDR_VAR 0 9
22543: PUSH
22544: LD_VAR 0 1
22548: PPUSH
22549: CALL_OW 255
22553: ST_TO_ADDR
// tech_space := tech_spacanom ;
22554: LD_ADDR_VAR 0 12
22558: PUSH
22559: LD_INT 29
22561: ST_TO_ADDR
// tech_time := tech_taurad ;
22562: LD_ADDR_VAR 0 13
22566: PUSH
22567: LD_INT 28
22569: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22570: LD_ADDR_VAR 0 11
22574: PUSH
22575: LD_VAR 0 1
22579: PPUSH
22580: CALL_OW 310
22584: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22585: LD_VAR 0 11
22589: PPUSH
22590: CALL_OW 247
22594: PUSH
22595: LD_INT 2
22597: EQUAL
22598: IFFALSE 22602
// exit ;
22600: GO 23112
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22602: LD_ADDR_VAR 0 8
22606: PUSH
22607: LD_INT 81
22609: PUSH
22610: LD_VAR 0 9
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 3
22621: PUSH
22622: LD_INT 21
22624: PUSH
22625: LD_INT 3
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PPUSH
22640: CALL_OW 69
22644: ST_TO_ADDR
// if not tmp then
22645: LD_VAR 0 8
22649: NOT
22650: IFFALSE 22654
// exit ;
22652: GO 23112
// if in_unit then
22654: LD_VAR 0 11
22658: IFFALSE 22682
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22660: LD_ADDR_VAR 0 10
22664: PUSH
22665: LD_VAR 0 8
22669: PPUSH
22670: LD_VAR 0 11
22674: PPUSH
22675: CALL_OW 74
22679: ST_TO_ADDR
22680: GO 22702
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22682: LD_ADDR_VAR 0 10
22686: PUSH
22687: LD_VAR 0 8
22691: PPUSH
22692: LD_VAR 0 1
22696: PPUSH
22697: CALL_OW 74
22701: ST_TO_ADDR
// if not enemy then
22702: LD_VAR 0 10
22706: NOT
22707: IFFALSE 22711
// exit ;
22709: GO 23112
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22711: LD_VAR 0 11
22715: PUSH
22716: LD_VAR 0 11
22720: PPUSH
22721: LD_VAR 0 10
22725: PPUSH
22726: CALL_OW 296
22730: PUSH
22731: LD_INT 13
22733: GREATER
22734: AND
22735: PUSH
22736: LD_VAR 0 1
22740: PPUSH
22741: LD_VAR 0 10
22745: PPUSH
22746: CALL_OW 296
22750: PUSH
22751: LD_INT 12
22753: GREATER
22754: OR
22755: IFFALSE 22759
// exit ;
22757: GO 23112
// missile := [ 1 ] ;
22759: LD_ADDR_VAR 0 14
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: EMPTY
22768: LIST
22769: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22770: LD_VAR 0 9
22774: PPUSH
22775: LD_VAR 0 12
22779: PPUSH
22780: CALL_OW 325
22784: IFFALSE 22813
// missile := Replace ( missile , missile + 1 , 2 ) ;
22786: LD_ADDR_VAR 0 14
22790: PUSH
22791: LD_VAR 0 14
22795: PPUSH
22796: LD_VAR 0 14
22800: PUSH
22801: LD_INT 1
22803: PLUS
22804: PPUSH
22805: LD_INT 2
22807: PPUSH
22808: CALL_OW 1
22812: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22813: LD_VAR 0 9
22817: PPUSH
22818: LD_VAR 0 13
22822: PPUSH
22823: CALL_OW 325
22827: PUSH
22828: LD_VAR 0 10
22832: PPUSH
22833: CALL_OW 255
22837: PPUSH
22838: LD_VAR 0 13
22842: PPUSH
22843: CALL_OW 325
22847: NOT
22848: AND
22849: IFFALSE 22878
// missile := Replace ( missile , missile + 1 , 3 ) ;
22851: LD_ADDR_VAR 0 14
22855: PUSH
22856: LD_VAR 0 14
22860: PPUSH
22861: LD_VAR 0 14
22865: PUSH
22866: LD_INT 1
22868: PLUS
22869: PPUSH
22870: LD_INT 3
22872: PPUSH
22873: CALL_OW 1
22877: ST_TO_ADDR
// if missile < 2 then
22878: LD_VAR 0 14
22882: PUSH
22883: LD_INT 2
22885: LESS
22886: IFFALSE 22890
// exit ;
22888: GO 23112
// x := GetX ( enemy ) ;
22890: LD_ADDR_VAR 0 4
22894: PUSH
22895: LD_VAR 0 10
22899: PPUSH
22900: CALL_OW 250
22904: ST_TO_ADDR
// y := GetY ( enemy ) ;
22905: LD_ADDR_VAR 0 5
22909: PUSH
22910: LD_VAR 0 10
22914: PPUSH
22915: CALL_OW 251
22919: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22920: LD_ADDR_VAR 0 6
22924: PUSH
22925: LD_VAR 0 4
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PPUSH
22934: LD_INT 1
22936: PPUSH
22937: CALL_OW 12
22941: PLUS
22942: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22943: LD_ADDR_VAR 0 7
22947: PUSH
22948: LD_VAR 0 5
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PPUSH
22957: LD_INT 1
22959: PPUSH
22960: CALL_OW 12
22964: PLUS
22965: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22966: LD_VAR 0 6
22970: PPUSH
22971: LD_VAR 0 7
22975: PPUSH
22976: CALL_OW 488
22980: NOT
22981: IFFALSE 23003
// begin _x := x ;
22983: LD_ADDR_VAR 0 6
22987: PUSH
22988: LD_VAR 0 4
22992: ST_TO_ADDR
// _y := y ;
22993: LD_ADDR_VAR 0 7
22997: PUSH
22998: LD_VAR 0 5
23002: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23003: LD_ADDR_VAR 0 3
23007: PUSH
23008: LD_INT 1
23010: PPUSH
23011: LD_VAR 0 14
23015: PPUSH
23016: CALL_OW 12
23020: ST_TO_ADDR
// case i of 1 :
23021: LD_VAR 0 3
23025: PUSH
23026: LD_INT 1
23028: DOUBLE
23029: EQUAL
23030: IFTRUE 23034
23032: GO 23051
23034: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23035: LD_VAR 0 1
23039: PPUSH
23040: LD_VAR 0 10
23044: PPUSH
23045: CALL_OW 115
23049: GO 23112
23051: LD_INT 2
23053: DOUBLE
23054: EQUAL
23055: IFTRUE 23059
23057: GO 23081
23059: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23060: LD_VAR 0 1
23064: PPUSH
23065: LD_VAR 0 6
23069: PPUSH
23070: LD_VAR 0 7
23074: PPUSH
23075: CALL_OW 153
23079: GO 23112
23081: LD_INT 3
23083: DOUBLE
23084: EQUAL
23085: IFTRUE 23089
23087: GO 23111
23089: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23090: LD_VAR 0 1
23094: PPUSH
23095: LD_VAR 0 6
23099: PPUSH
23100: LD_VAR 0 7
23104: PPUSH
23105: CALL_OW 154
23109: GO 23112
23111: POP
// end ;
23112: LD_VAR 0 2
23116: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23117: LD_INT 0
23119: PPUSH
23120: PPUSH
23121: PPUSH
23122: PPUSH
23123: PPUSH
23124: PPUSH
// if not unit or not building then
23125: LD_VAR 0 1
23129: NOT
23130: PUSH
23131: LD_VAR 0 2
23135: NOT
23136: OR
23137: IFFALSE 23141
// exit ;
23139: GO 23299
// x := GetX ( building ) ;
23141: LD_ADDR_VAR 0 5
23145: PUSH
23146: LD_VAR 0 2
23150: PPUSH
23151: CALL_OW 250
23155: ST_TO_ADDR
// y := GetY ( building ) ;
23156: LD_ADDR_VAR 0 6
23160: PUSH
23161: LD_VAR 0 2
23165: PPUSH
23166: CALL_OW 251
23170: ST_TO_ADDR
// for i = 0 to 5 do
23171: LD_ADDR_VAR 0 4
23175: PUSH
23176: DOUBLE
23177: LD_INT 0
23179: DEC
23180: ST_TO_ADDR
23181: LD_INT 5
23183: PUSH
23184: FOR_TO
23185: IFFALSE 23297
// begin _x := ShiftX ( x , i , 3 ) ;
23187: LD_ADDR_VAR 0 7
23191: PUSH
23192: LD_VAR 0 5
23196: PPUSH
23197: LD_VAR 0 4
23201: PPUSH
23202: LD_INT 3
23204: PPUSH
23205: CALL_OW 272
23209: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23210: LD_ADDR_VAR 0 8
23214: PUSH
23215: LD_VAR 0 6
23219: PPUSH
23220: LD_VAR 0 4
23224: PPUSH
23225: LD_INT 3
23227: PPUSH
23228: CALL_OW 273
23232: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23233: LD_VAR 0 7
23237: PPUSH
23238: LD_VAR 0 8
23242: PPUSH
23243: CALL_OW 488
23247: NOT
23248: IFFALSE 23252
// continue ;
23250: GO 23184
// if HexInfo ( _x , _y ) = 0 then
23252: LD_VAR 0 7
23256: PPUSH
23257: LD_VAR 0 8
23261: PPUSH
23262: CALL_OW 428
23266: PUSH
23267: LD_INT 0
23269: EQUAL
23270: IFFALSE 23295
// begin ComMoveXY ( unit , _x , _y ) ;
23272: LD_VAR 0 1
23276: PPUSH
23277: LD_VAR 0 7
23281: PPUSH
23282: LD_VAR 0 8
23286: PPUSH
23287: CALL_OW 111
// exit ;
23291: POP
23292: POP
23293: GO 23299
// end ; end ;
23295: GO 23184
23297: POP
23298: POP
// end ;
23299: LD_VAR 0 3
23303: RET
// export function ScanBase ( side , base_area ) ; begin
23304: LD_INT 0
23306: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23307: LD_ADDR_VAR 0 3
23311: PUSH
23312: LD_VAR 0 2
23316: PPUSH
23317: LD_INT 81
23319: PUSH
23320: LD_VAR 0 1
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PPUSH
23329: CALL_OW 70
23333: ST_TO_ADDR
// end ;
23334: LD_VAR 0 3
23338: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23339: LD_INT 0
23341: PPUSH
23342: PPUSH
23343: PPUSH
23344: PPUSH
// result := false ;
23345: LD_ADDR_VAR 0 2
23349: PUSH
23350: LD_INT 0
23352: ST_TO_ADDR
// side := GetSide ( unit ) ;
23353: LD_ADDR_VAR 0 3
23357: PUSH
23358: LD_VAR 0 1
23362: PPUSH
23363: CALL_OW 255
23367: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23368: LD_ADDR_VAR 0 4
23372: PUSH
23373: LD_VAR 0 1
23377: PPUSH
23378: CALL_OW 248
23382: ST_TO_ADDR
// case nat of 1 :
23383: LD_VAR 0 4
23387: PUSH
23388: LD_INT 1
23390: DOUBLE
23391: EQUAL
23392: IFTRUE 23396
23394: GO 23407
23396: POP
// tech := tech_lassight ; 2 :
23397: LD_ADDR_VAR 0 5
23401: PUSH
23402: LD_INT 12
23404: ST_TO_ADDR
23405: GO 23446
23407: LD_INT 2
23409: DOUBLE
23410: EQUAL
23411: IFTRUE 23415
23413: GO 23426
23415: POP
// tech := tech_mortar ; 3 :
23416: LD_ADDR_VAR 0 5
23420: PUSH
23421: LD_INT 41
23423: ST_TO_ADDR
23424: GO 23446
23426: LD_INT 3
23428: DOUBLE
23429: EQUAL
23430: IFTRUE 23434
23432: GO 23445
23434: POP
// tech := tech_bazooka ; end ;
23435: LD_ADDR_VAR 0 5
23439: PUSH
23440: LD_INT 44
23442: ST_TO_ADDR
23443: GO 23446
23445: POP
// if Researched ( side , tech ) then
23446: LD_VAR 0 3
23450: PPUSH
23451: LD_VAR 0 5
23455: PPUSH
23456: CALL_OW 325
23460: IFFALSE 23487
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23462: LD_ADDR_VAR 0 2
23466: PUSH
23467: LD_INT 5
23469: PUSH
23470: LD_INT 8
23472: PUSH
23473: LD_INT 9
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: PUSH
23481: LD_VAR 0 4
23485: ARRAY
23486: ST_TO_ADDR
// end ;
23487: LD_VAR 0 2
23491: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23492: LD_INT 0
23494: PPUSH
23495: PPUSH
23496: PPUSH
// if not mines then
23497: LD_VAR 0 2
23501: NOT
23502: IFFALSE 23506
// exit ;
23504: GO 23650
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23506: LD_ADDR_VAR 0 5
23510: PUSH
23511: LD_INT 81
23513: PUSH
23514: LD_VAR 0 1
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: LD_INT 21
23528: PUSH
23529: LD_INT 3
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PPUSH
23544: CALL_OW 69
23548: ST_TO_ADDR
// for i in mines do
23549: LD_ADDR_VAR 0 4
23553: PUSH
23554: LD_VAR 0 2
23558: PUSH
23559: FOR_IN
23560: IFFALSE 23648
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23562: LD_VAR 0 4
23566: PUSH
23567: LD_INT 1
23569: ARRAY
23570: PPUSH
23571: LD_VAR 0 4
23575: PUSH
23576: LD_INT 2
23578: ARRAY
23579: PPUSH
23580: CALL_OW 458
23584: NOT
23585: IFFALSE 23589
// continue ;
23587: GO 23559
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23589: LD_VAR 0 4
23593: PUSH
23594: LD_INT 1
23596: ARRAY
23597: PPUSH
23598: LD_VAR 0 4
23602: PUSH
23603: LD_INT 2
23605: ARRAY
23606: PPUSH
23607: CALL_OW 428
23611: PUSH
23612: LD_VAR 0 5
23616: IN
23617: IFFALSE 23646
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23619: LD_VAR 0 4
23623: PUSH
23624: LD_INT 1
23626: ARRAY
23627: PPUSH
23628: LD_VAR 0 4
23632: PUSH
23633: LD_INT 2
23635: ARRAY
23636: PPUSH
23637: LD_VAR 0 1
23641: PPUSH
23642: CALL_OW 456
// end ;
23646: GO 23559
23648: POP
23649: POP
// end ;
23650: LD_VAR 0 3
23654: RET
// export function Count ( array ) ; var i ; begin
23655: LD_INT 0
23657: PPUSH
23658: PPUSH
// result := 0 ;
23659: LD_ADDR_VAR 0 2
23663: PUSH
23664: LD_INT 0
23666: ST_TO_ADDR
// for i in array do
23667: LD_ADDR_VAR 0 3
23671: PUSH
23672: LD_VAR 0 1
23676: PUSH
23677: FOR_IN
23678: IFFALSE 23702
// if i then
23680: LD_VAR 0 3
23684: IFFALSE 23700
// result := result + 1 ;
23686: LD_ADDR_VAR 0 2
23690: PUSH
23691: LD_VAR 0 2
23695: PUSH
23696: LD_INT 1
23698: PLUS
23699: ST_TO_ADDR
23700: GO 23677
23702: POP
23703: POP
// end ;
23704: LD_VAR 0 2
23708: RET
// export function IsEmpty ( building ) ; begin
23709: LD_INT 0
23711: PPUSH
// if not building then
23712: LD_VAR 0 1
23716: NOT
23717: IFFALSE 23721
// exit ;
23719: GO 23764
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23721: LD_ADDR_VAR 0 2
23725: PUSH
23726: LD_VAR 0 1
23730: PUSH
23731: LD_INT 22
23733: PUSH
23734: LD_VAR 0 1
23738: PPUSH
23739: CALL_OW 255
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 58
23750: PUSH
23751: EMPTY
23752: LIST
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PPUSH
23758: CALL_OW 69
23762: IN
23763: ST_TO_ADDR
// end ;
23764: LD_VAR 0 2
23768: RET
// export function IsNotFull ( building ) ; var places ; begin
23769: LD_INT 0
23771: PPUSH
23772: PPUSH
// if not building then
23773: LD_VAR 0 1
23777: NOT
23778: IFFALSE 23782
// exit ;
23780: GO 23953
// result := false ;
23782: LD_ADDR_VAR 0 2
23786: PUSH
23787: LD_INT 0
23789: ST_TO_ADDR
// places := 0 ;
23790: LD_ADDR_VAR 0 3
23794: PUSH
23795: LD_INT 0
23797: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
23798: LD_VAR 0 1
23802: PPUSH
23803: CALL_OW 266
23807: PUSH
23808: LD_INT 0
23810: DOUBLE
23811: EQUAL
23812: IFTRUE 23870
23814: LD_INT 1
23816: DOUBLE
23817: EQUAL
23818: IFTRUE 23870
23820: LD_INT 6
23822: DOUBLE
23823: EQUAL
23824: IFTRUE 23870
23826: LD_INT 7
23828: DOUBLE
23829: EQUAL
23830: IFTRUE 23870
23832: LD_INT 8
23834: DOUBLE
23835: EQUAL
23836: IFTRUE 23870
23838: LD_INT 4
23840: DOUBLE
23841: EQUAL
23842: IFTRUE 23870
23844: LD_INT 5
23846: DOUBLE
23847: EQUAL
23848: IFTRUE 23870
23850: LD_INT 2
23852: DOUBLE
23853: EQUAL
23854: IFTRUE 23870
23856: LD_INT 3
23858: DOUBLE
23859: EQUAL
23860: IFTRUE 23870
23862: LD_INT 35
23864: DOUBLE
23865: EQUAL
23866: IFTRUE 23870
23868: GO 23881
23870: POP
// places := 6 ; b_bunker , b_breastwork :
23871: LD_ADDR_VAR 0 3
23875: PUSH
23876: LD_INT 6
23878: ST_TO_ADDR
23879: GO 23926
23881: LD_INT 32
23883: DOUBLE
23884: EQUAL
23885: IFTRUE 23895
23887: LD_INT 31
23889: DOUBLE
23890: EQUAL
23891: IFTRUE 23895
23893: GO 23906
23895: POP
// places := 1 ; b_control_tower :
23896: LD_ADDR_VAR 0 3
23900: PUSH
23901: LD_INT 1
23903: ST_TO_ADDR
23904: GO 23926
23906: LD_INT 36
23908: DOUBLE
23909: EQUAL
23910: IFTRUE 23914
23912: GO 23925
23914: POP
// places := 3 ; end ;
23915: LD_ADDR_VAR 0 3
23919: PUSH
23920: LD_INT 3
23922: ST_TO_ADDR
23923: GO 23926
23925: POP
// if places then
23926: LD_VAR 0 3
23930: IFFALSE 23953
// result := UnitsInside ( building ) < places ;
23932: LD_ADDR_VAR 0 2
23936: PUSH
23937: LD_VAR 0 1
23941: PPUSH
23942: CALL_OW 313
23946: PUSH
23947: LD_VAR 0 3
23951: LESS
23952: ST_TO_ADDR
// end ;
23953: LD_VAR 0 2
23957: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23958: LD_INT 0
23960: PPUSH
23961: PPUSH
23962: PPUSH
23963: PPUSH
// tmp := [ ] ;
23964: LD_ADDR_VAR 0 3
23968: PUSH
23969: EMPTY
23970: ST_TO_ADDR
// list := [ ] ;
23971: LD_ADDR_VAR 0 5
23975: PUSH
23976: EMPTY
23977: ST_TO_ADDR
// for i = 16 to 25 do
23978: LD_ADDR_VAR 0 4
23982: PUSH
23983: DOUBLE
23984: LD_INT 16
23986: DEC
23987: ST_TO_ADDR
23988: LD_INT 25
23990: PUSH
23991: FOR_TO
23992: IFFALSE 24065
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23994: LD_ADDR_VAR 0 3
23998: PUSH
23999: LD_VAR 0 3
24003: PUSH
24004: LD_INT 22
24006: PUSH
24007: LD_VAR 0 1
24011: PPUSH
24012: CALL_OW 255
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 91
24023: PUSH
24024: LD_VAR 0 1
24028: PUSH
24029: LD_INT 6
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 30
24039: PUSH
24040: LD_VAR 0 4
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: PUSH
24054: EMPTY
24055: LIST
24056: PPUSH
24057: CALL_OW 69
24061: ADD
24062: ST_TO_ADDR
24063: GO 23991
24065: POP
24066: POP
// for i = 1 to tmp do
24067: LD_ADDR_VAR 0 4
24071: PUSH
24072: DOUBLE
24073: LD_INT 1
24075: DEC
24076: ST_TO_ADDR
24077: LD_VAR 0 3
24081: PUSH
24082: FOR_TO
24083: IFFALSE 24171
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24085: LD_ADDR_VAR 0 5
24089: PUSH
24090: LD_VAR 0 5
24094: PUSH
24095: LD_VAR 0 3
24099: PUSH
24100: LD_VAR 0 4
24104: ARRAY
24105: PPUSH
24106: CALL_OW 266
24110: PUSH
24111: LD_VAR 0 3
24115: PUSH
24116: LD_VAR 0 4
24120: ARRAY
24121: PPUSH
24122: CALL_OW 250
24126: PUSH
24127: LD_VAR 0 3
24131: PUSH
24132: LD_VAR 0 4
24136: ARRAY
24137: PPUSH
24138: CALL_OW 251
24142: PUSH
24143: LD_VAR 0 3
24147: PUSH
24148: LD_VAR 0 4
24152: ARRAY
24153: PPUSH
24154: CALL_OW 254
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: PUSH
24165: EMPTY
24166: LIST
24167: ADD
24168: ST_TO_ADDR
24169: GO 24082
24171: POP
24172: POP
// result := list ;
24173: LD_ADDR_VAR 0 2
24177: PUSH
24178: LD_VAR 0 5
24182: ST_TO_ADDR
// end ;
24183: LD_VAR 0 2
24187: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24188: LD_INT 0
24190: PPUSH
24191: PPUSH
24192: PPUSH
24193: PPUSH
24194: PPUSH
24195: PPUSH
24196: PPUSH
// if not factory then
24197: LD_VAR 0 1
24201: NOT
24202: IFFALSE 24206
// exit ;
24204: GO 24799
// if control = control_apeman then
24206: LD_VAR 0 4
24210: PUSH
24211: LD_INT 5
24213: EQUAL
24214: IFFALSE 24323
// begin tmp := UnitsInside ( factory ) ;
24216: LD_ADDR_VAR 0 8
24220: PUSH
24221: LD_VAR 0 1
24225: PPUSH
24226: CALL_OW 313
24230: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24231: LD_VAR 0 8
24235: PPUSH
24236: LD_INT 25
24238: PUSH
24239: LD_INT 12
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PPUSH
24246: CALL_OW 72
24250: NOT
24251: IFFALSE 24261
// control := control_manual ;
24253: LD_ADDR_VAR 0 4
24257: PUSH
24258: LD_INT 1
24260: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24261: LD_ADDR_VAR 0 8
24265: PUSH
24266: LD_VAR 0 1
24270: PPUSH
24271: CALL 23958 0 1
24275: ST_TO_ADDR
// if tmp then
24276: LD_VAR 0 8
24280: IFFALSE 24323
// begin for i in tmp do
24282: LD_ADDR_VAR 0 7
24286: PUSH
24287: LD_VAR 0 8
24291: PUSH
24292: FOR_IN
24293: IFFALSE 24321
// if i [ 1 ] = b_ext_radio then
24295: LD_VAR 0 7
24299: PUSH
24300: LD_INT 1
24302: ARRAY
24303: PUSH
24304: LD_INT 22
24306: EQUAL
24307: IFFALSE 24319
// begin control := control_remote ;
24309: LD_ADDR_VAR 0 4
24313: PUSH
24314: LD_INT 2
24316: ST_TO_ADDR
// break ;
24317: GO 24321
// end ;
24319: GO 24292
24321: POP
24322: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24323: LD_VAR 0 1
24327: PPUSH
24328: LD_VAR 0 2
24332: PPUSH
24333: LD_VAR 0 3
24337: PPUSH
24338: LD_VAR 0 4
24342: PPUSH
24343: LD_VAR 0 5
24347: PPUSH
24348: CALL_OW 448
24352: IFFALSE 24387
// begin result := [ chassis , engine , control , weapon ] ;
24354: LD_ADDR_VAR 0 6
24358: PUSH
24359: LD_VAR 0 2
24363: PUSH
24364: LD_VAR 0 3
24368: PUSH
24369: LD_VAR 0 4
24373: PUSH
24374: LD_VAR 0 5
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: ST_TO_ADDR
// exit ;
24385: GO 24799
// end ; _chassis := AvailableChassisList ( factory ) ;
24387: LD_ADDR_VAR 0 9
24391: PUSH
24392: LD_VAR 0 1
24396: PPUSH
24397: CALL_OW 475
24401: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24402: LD_ADDR_VAR 0 11
24406: PUSH
24407: LD_VAR 0 1
24411: PPUSH
24412: CALL_OW 476
24416: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24417: LD_ADDR_VAR 0 12
24421: PUSH
24422: LD_VAR 0 1
24426: PPUSH
24427: CALL_OW 477
24431: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24432: LD_ADDR_VAR 0 10
24436: PUSH
24437: LD_VAR 0 1
24441: PPUSH
24442: CALL_OW 478
24446: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24447: LD_VAR 0 9
24451: NOT
24452: PUSH
24453: LD_VAR 0 11
24457: NOT
24458: OR
24459: PUSH
24460: LD_VAR 0 12
24464: NOT
24465: OR
24466: PUSH
24467: LD_VAR 0 10
24471: NOT
24472: OR
24473: IFFALSE 24508
// begin result := [ chassis , engine , control , weapon ] ;
24475: LD_ADDR_VAR 0 6
24479: PUSH
24480: LD_VAR 0 2
24484: PUSH
24485: LD_VAR 0 3
24489: PUSH
24490: LD_VAR 0 4
24494: PUSH
24495: LD_VAR 0 5
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: ST_TO_ADDR
// exit ;
24506: GO 24799
// end ; if not chassis in _chassis then
24508: LD_VAR 0 2
24512: PUSH
24513: LD_VAR 0 9
24517: IN
24518: NOT
24519: IFFALSE 24545
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24521: LD_ADDR_VAR 0 2
24525: PUSH
24526: LD_VAR 0 9
24530: PUSH
24531: LD_INT 1
24533: PPUSH
24534: LD_VAR 0 9
24538: PPUSH
24539: CALL_OW 12
24543: ARRAY
24544: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24545: LD_VAR 0 2
24549: PPUSH
24550: LD_VAR 0 3
24554: PPUSH
24555: CALL 24804 0 2
24559: NOT
24560: IFFALSE 24619
// repeat engine := _engine [ 1 ] ;
24562: LD_ADDR_VAR 0 3
24566: PUSH
24567: LD_VAR 0 11
24571: PUSH
24572: LD_INT 1
24574: ARRAY
24575: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24576: LD_ADDR_VAR 0 11
24580: PUSH
24581: LD_VAR 0 11
24585: PPUSH
24586: LD_INT 1
24588: PPUSH
24589: CALL_OW 3
24593: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24594: LD_VAR 0 2
24598: PPUSH
24599: LD_VAR 0 3
24603: PPUSH
24604: CALL 24804 0 2
24608: PUSH
24609: LD_VAR 0 11
24613: PUSH
24614: EMPTY
24615: EQUAL
24616: OR
24617: IFFALSE 24562
// if not control in _control then
24619: LD_VAR 0 4
24623: PUSH
24624: LD_VAR 0 12
24628: IN
24629: NOT
24630: IFFALSE 24656
// control := _control [ rand ( 1 , _control ) ] ;
24632: LD_ADDR_VAR 0 4
24636: PUSH
24637: LD_VAR 0 12
24641: PUSH
24642: LD_INT 1
24644: PPUSH
24645: LD_VAR 0 12
24649: PPUSH
24650: CALL_OW 12
24654: ARRAY
24655: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24656: LD_VAR 0 2
24660: PPUSH
24661: LD_VAR 0 5
24665: PPUSH
24666: CALL 25024 0 2
24670: NOT
24671: IFFALSE 24730
// repeat weapon := _weapon [ 1 ] ;
24673: LD_ADDR_VAR 0 5
24677: PUSH
24678: LD_VAR 0 10
24682: PUSH
24683: LD_INT 1
24685: ARRAY
24686: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24687: LD_ADDR_VAR 0 10
24691: PUSH
24692: LD_VAR 0 10
24696: PPUSH
24697: LD_INT 1
24699: PPUSH
24700: CALL_OW 3
24704: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24705: LD_VAR 0 2
24709: PPUSH
24710: LD_VAR 0 5
24714: PPUSH
24715: CALL 25024 0 2
24719: PUSH
24720: LD_VAR 0 10
24724: PUSH
24725: EMPTY
24726: EQUAL
24727: OR
24728: IFFALSE 24673
// result := [ ] ;
24730: LD_ADDR_VAR 0 6
24734: PUSH
24735: EMPTY
24736: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24737: LD_VAR 0 1
24741: PPUSH
24742: LD_VAR 0 2
24746: PPUSH
24747: LD_VAR 0 3
24751: PPUSH
24752: LD_VAR 0 4
24756: PPUSH
24757: LD_VAR 0 5
24761: PPUSH
24762: CALL_OW 448
24766: IFFALSE 24799
// result := [ chassis , engine , control , weapon ] ;
24768: LD_ADDR_VAR 0 6
24772: PUSH
24773: LD_VAR 0 2
24777: PUSH
24778: LD_VAR 0 3
24782: PUSH
24783: LD_VAR 0 4
24787: PUSH
24788: LD_VAR 0 5
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: ST_TO_ADDR
// end ;
24799: LD_VAR 0 6
24803: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24804: LD_INT 0
24806: PPUSH
// if not chassis or not engine then
24807: LD_VAR 0 1
24811: NOT
24812: PUSH
24813: LD_VAR 0 2
24817: NOT
24818: OR
24819: IFFALSE 24823
// exit ;
24821: GO 25019
// case engine of engine_solar :
24823: LD_VAR 0 2
24827: PUSH
24828: LD_INT 2
24830: DOUBLE
24831: EQUAL
24832: IFTRUE 24836
24834: GO 24874
24836: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24837: LD_ADDR_VAR 0 3
24841: PUSH
24842: LD_INT 11
24844: PUSH
24845: LD_INT 12
24847: PUSH
24848: LD_INT 13
24850: PUSH
24851: LD_INT 14
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 3
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: ST_TO_ADDR
24872: GO 25003
24874: LD_INT 1
24876: DOUBLE
24877: EQUAL
24878: IFTRUE 24882
24880: GO 24944
24882: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24883: LD_ADDR_VAR 0 3
24887: PUSH
24888: LD_INT 11
24890: PUSH
24891: LD_INT 12
24893: PUSH
24894: LD_INT 13
24896: PUSH
24897: LD_INT 14
24899: PUSH
24900: LD_INT 1
24902: PUSH
24903: LD_INT 2
24905: PUSH
24906: LD_INT 3
24908: PUSH
24909: LD_INT 4
24911: PUSH
24912: LD_INT 5
24914: PUSH
24915: LD_INT 21
24917: PUSH
24918: LD_INT 23
24920: PUSH
24921: LD_INT 22
24923: PUSH
24924: LD_INT 24
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: ST_TO_ADDR
24942: GO 25003
24944: LD_INT 3
24946: DOUBLE
24947: EQUAL
24948: IFTRUE 24952
24950: GO 25002
24952: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24953: LD_ADDR_VAR 0 3
24957: PUSH
24958: LD_INT 13
24960: PUSH
24961: LD_INT 14
24963: PUSH
24964: LD_INT 2
24966: PUSH
24967: LD_INT 3
24969: PUSH
24970: LD_INT 4
24972: PUSH
24973: LD_INT 5
24975: PUSH
24976: LD_INT 21
24978: PUSH
24979: LD_INT 22
24981: PUSH
24982: LD_INT 23
24984: PUSH
24985: LD_INT 24
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: ST_TO_ADDR
25000: GO 25003
25002: POP
// result := ( chassis in result ) ;
25003: LD_ADDR_VAR 0 3
25007: PUSH
25008: LD_VAR 0 1
25012: PUSH
25013: LD_VAR 0 3
25017: IN
25018: ST_TO_ADDR
// end ;
25019: LD_VAR 0 3
25023: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25024: LD_INT 0
25026: PPUSH
// if not chassis or not weapon then
25027: LD_VAR 0 1
25031: NOT
25032: PUSH
25033: LD_VAR 0 2
25037: NOT
25038: OR
25039: IFFALSE 25043
// exit ;
25041: GO 26103
// case weapon of us_machine_gun :
25043: LD_VAR 0 2
25047: PUSH
25048: LD_INT 2
25050: DOUBLE
25051: EQUAL
25052: IFTRUE 25056
25054: GO 25086
25056: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25057: LD_ADDR_VAR 0 3
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: LD_INT 3
25070: PUSH
25071: LD_INT 4
25073: PUSH
25074: LD_INT 5
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: ST_TO_ADDR
25084: GO 26087
25086: LD_INT 3
25088: DOUBLE
25089: EQUAL
25090: IFTRUE 25094
25092: GO 25124
25094: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25095: LD_ADDR_VAR 0 3
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: LD_INT 3
25108: PUSH
25109: LD_INT 4
25111: PUSH
25112: LD_INT 5
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: ST_TO_ADDR
25122: GO 26087
25124: LD_INT 11
25126: DOUBLE
25127: EQUAL
25128: IFTRUE 25132
25130: GO 25162
25132: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25133: LD_ADDR_VAR 0 3
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 2
25143: PUSH
25144: LD_INT 3
25146: PUSH
25147: LD_INT 4
25149: PUSH
25150: LD_INT 5
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: ST_TO_ADDR
25160: GO 26087
25162: LD_INT 4
25164: DOUBLE
25165: EQUAL
25166: IFTRUE 25170
25168: GO 25196
25170: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25171: LD_ADDR_VAR 0 3
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: LD_INT 3
25181: PUSH
25182: LD_INT 4
25184: PUSH
25185: LD_INT 5
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: ST_TO_ADDR
25194: GO 26087
25196: LD_INT 5
25198: DOUBLE
25199: EQUAL
25200: IFTRUE 25204
25202: GO 25230
25204: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25205: LD_ADDR_VAR 0 3
25209: PUSH
25210: LD_INT 2
25212: PUSH
25213: LD_INT 3
25215: PUSH
25216: LD_INT 4
25218: PUSH
25219: LD_INT 5
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: ST_TO_ADDR
25228: GO 26087
25230: LD_INT 9
25232: DOUBLE
25233: EQUAL
25234: IFTRUE 25238
25236: GO 25264
25238: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25239: LD_ADDR_VAR 0 3
25243: PUSH
25244: LD_INT 2
25246: PUSH
25247: LD_INT 3
25249: PUSH
25250: LD_INT 4
25252: PUSH
25253: LD_INT 5
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: ST_TO_ADDR
25262: GO 26087
25264: LD_INT 7
25266: DOUBLE
25267: EQUAL
25268: IFTRUE 25272
25270: GO 25298
25272: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25273: LD_ADDR_VAR 0 3
25277: PUSH
25278: LD_INT 2
25280: PUSH
25281: LD_INT 3
25283: PUSH
25284: LD_INT 4
25286: PUSH
25287: LD_INT 5
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: ST_TO_ADDR
25296: GO 26087
25298: LD_INT 12
25300: DOUBLE
25301: EQUAL
25302: IFTRUE 25306
25304: GO 25332
25306: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25307: LD_ADDR_VAR 0 3
25311: PUSH
25312: LD_INT 2
25314: PUSH
25315: LD_INT 3
25317: PUSH
25318: LD_INT 4
25320: PUSH
25321: LD_INT 5
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: ST_TO_ADDR
25330: GO 26087
25332: LD_INT 13
25334: DOUBLE
25335: EQUAL
25336: IFTRUE 25340
25338: GO 25366
25340: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25341: LD_ADDR_VAR 0 3
25345: PUSH
25346: LD_INT 2
25348: PUSH
25349: LD_INT 3
25351: PUSH
25352: LD_INT 4
25354: PUSH
25355: LD_INT 5
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: ST_TO_ADDR
25364: GO 26087
25366: LD_INT 14
25368: DOUBLE
25369: EQUAL
25370: IFTRUE 25374
25372: GO 25392
25374: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25375: LD_ADDR_VAR 0 3
25379: PUSH
25380: LD_INT 4
25382: PUSH
25383: LD_INT 5
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: ST_TO_ADDR
25390: GO 26087
25392: LD_INT 6
25394: DOUBLE
25395: EQUAL
25396: IFTRUE 25400
25398: GO 25418
25400: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25401: LD_ADDR_VAR 0 3
25405: PUSH
25406: LD_INT 4
25408: PUSH
25409: LD_INT 5
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: ST_TO_ADDR
25416: GO 26087
25418: LD_INT 10
25420: DOUBLE
25421: EQUAL
25422: IFTRUE 25426
25424: GO 25444
25426: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25427: LD_ADDR_VAR 0 3
25431: PUSH
25432: LD_INT 4
25434: PUSH
25435: LD_INT 5
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: ST_TO_ADDR
25442: GO 26087
25444: LD_INT 22
25446: DOUBLE
25447: EQUAL
25448: IFTRUE 25452
25450: GO 25478
25452: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25453: LD_ADDR_VAR 0 3
25457: PUSH
25458: LD_INT 11
25460: PUSH
25461: LD_INT 12
25463: PUSH
25464: LD_INT 13
25466: PUSH
25467: LD_INT 14
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: ST_TO_ADDR
25476: GO 26087
25478: LD_INT 23
25480: DOUBLE
25481: EQUAL
25482: IFTRUE 25486
25484: GO 25512
25486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25487: LD_ADDR_VAR 0 3
25491: PUSH
25492: LD_INT 11
25494: PUSH
25495: LD_INT 12
25497: PUSH
25498: LD_INT 13
25500: PUSH
25501: LD_INT 14
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: ST_TO_ADDR
25510: GO 26087
25512: LD_INT 24
25514: DOUBLE
25515: EQUAL
25516: IFTRUE 25520
25518: GO 25546
25520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25521: LD_ADDR_VAR 0 3
25525: PUSH
25526: LD_INT 11
25528: PUSH
25529: LD_INT 12
25531: PUSH
25532: LD_INT 13
25534: PUSH
25535: LD_INT 14
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: ST_TO_ADDR
25544: GO 26087
25546: LD_INT 30
25548: DOUBLE
25549: EQUAL
25550: IFTRUE 25554
25552: GO 25580
25554: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25555: LD_ADDR_VAR 0 3
25559: PUSH
25560: LD_INT 11
25562: PUSH
25563: LD_INT 12
25565: PUSH
25566: LD_INT 13
25568: PUSH
25569: LD_INT 14
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: ST_TO_ADDR
25578: GO 26087
25580: LD_INT 25
25582: DOUBLE
25583: EQUAL
25584: IFTRUE 25588
25586: GO 25606
25588: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25589: LD_ADDR_VAR 0 3
25593: PUSH
25594: LD_INT 13
25596: PUSH
25597: LD_INT 14
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: ST_TO_ADDR
25604: GO 26087
25606: LD_INT 27
25608: DOUBLE
25609: EQUAL
25610: IFTRUE 25614
25612: GO 25632
25614: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25615: LD_ADDR_VAR 0 3
25619: PUSH
25620: LD_INT 13
25622: PUSH
25623: LD_INT 14
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: ST_TO_ADDR
25630: GO 26087
25632: LD_INT 92
25634: DOUBLE
25635: EQUAL
25636: IFTRUE 25640
25638: GO 25666
25640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25641: LD_ADDR_VAR 0 3
25645: PUSH
25646: LD_INT 11
25648: PUSH
25649: LD_INT 12
25651: PUSH
25652: LD_INT 13
25654: PUSH
25655: LD_INT 14
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: ST_TO_ADDR
25664: GO 26087
25666: LD_INT 28
25668: DOUBLE
25669: EQUAL
25670: IFTRUE 25674
25672: GO 25692
25674: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25675: LD_ADDR_VAR 0 3
25679: PUSH
25680: LD_INT 13
25682: PUSH
25683: LD_INT 14
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: ST_TO_ADDR
25690: GO 26087
25692: LD_INT 29
25694: DOUBLE
25695: EQUAL
25696: IFTRUE 25700
25698: GO 25718
25700: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25701: LD_ADDR_VAR 0 3
25705: PUSH
25706: LD_INT 13
25708: PUSH
25709: LD_INT 14
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: ST_TO_ADDR
25716: GO 26087
25718: LD_INT 31
25720: DOUBLE
25721: EQUAL
25722: IFTRUE 25726
25724: GO 25744
25726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25727: LD_ADDR_VAR 0 3
25731: PUSH
25732: LD_INT 13
25734: PUSH
25735: LD_INT 14
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: ST_TO_ADDR
25742: GO 26087
25744: LD_INT 26
25746: DOUBLE
25747: EQUAL
25748: IFTRUE 25752
25750: GO 25770
25752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25753: LD_ADDR_VAR 0 3
25757: PUSH
25758: LD_INT 13
25760: PUSH
25761: LD_INT 14
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: ST_TO_ADDR
25768: GO 26087
25770: LD_INT 42
25772: DOUBLE
25773: EQUAL
25774: IFTRUE 25778
25776: GO 25804
25778: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: LD_INT 21
25786: PUSH
25787: LD_INT 22
25789: PUSH
25790: LD_INT 23
25792: PUSH
25793: LD_INT 24
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: ST_TO_ADDR
25802: GO 26087
25804: LD_INT 43
25806: DOUBLE
25807: EQUAL
25808: IFTRUE 25812
25810: GO 25838
25812: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25813: LD_ADDR_VAR 0 3
25817: PUSH
25818: LD_INT 21
25820: PUSH
25821: LD_INT 22
25823: PUSH
25824: LD_INT 23
25826: PUSH
25827: LD_INT 24
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: ST_TO_ADDR
25836: GO 26087
25838: LD_INT 44
25840: DOUBLE
25841: EQUAL
25842: IFTRUE 25846
25844: GO 25872
25846: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25847: LD_ADDR_VAR 0 3
25851: PUSH
25852: LD_INT 21
25854: PUSH
25855: LD_INT 22
25857: PUSH
25858: LD_INT 23
25860: PUSH
25861: LD_INT 24
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: ST_TO_ADDR
25870: GO 26087
25872: LD_INT 45
25874: DOUBLE
25875: EQUAL
25876: IFTRUE 25880
25878: GO 25906
25880: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25881: LD_ADDR_VAR 0 3
25885: PUSH
25886: LD_INT 21
25888: PUSH
25889: LD_INT 22
25891: PUSH
25892: LD_INT 23
25894: PUSH
25895: LD_INT 24
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: ST_TO_ADDR
25904: GO 26087
25906: LD_INT 49
25908: DOUBLE
25909: EQUAL
25910: IFTRUE 25914
25912: GO 25940
25914: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25915: LD_ADDR_VAR 0 3
25919: PUSH
25920: LD_INT 21
25922: PUSH
25923: LD_INT 22
25925: PUSH
25926: LD_INT 23
25928: PUSH
25929: LD_INT 24
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: ST_TO_ADDR
25938: GO 26087
25940: LD_INT 51
25942: DOUBLE
25943: EQUAL
25944: IFTRUE 25948
25946: GO 25974
25948: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25949: LD_ADDR_VAR 0 3
25953: PUSH
25954: LD_INT 21
25956: PUSH
25957: LD_INT 22
25959: PUSH
25960: LD_INT 23
25962: PUSH
25963: LD_INT 24
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: ST_TO_ADDR
25972: GO 26087
25974: LD_INT 52
25976: DOUBLE
25977: EQUAL
25978: IFTRUE 25982
25980: GO 26008
25982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25983: LD_ADDR_VAR 0 3
25987: PUSH
25988: LD_INT 21
25990: PUSH
25991: LD_INT 22
25993: PUSH
25994: LD_INT 23
25996: PUSH
25997: LD_INT 24
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: ST_TO_ADDR
26006: GO 26087
26008: LD_INT 53
26010: DOUBLE
26011: EQUAL
26012: IFTRUE 26016
26014: GO 26034
26016: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26017: LD_ADDR_VAR 0 3
26021: PUSH
26022: LD_INT 23
26024: PUSH
26025: LD_INT 24
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: ST_TO_ADDR
26032: GO 26087
26034: LD_INT 46
26036: DOUBLE
26037: EQUAL
26038: IFTRUE 26042
26040: GO 26060
26042: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26043: LD_ADDR_VAR 0 3
26047: PUSH
26048: LD_INT 23
26050: PUSH
26051: LD_INT 24
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: ST_TO_ADDR
26058: GO 26087
26060: LD_INT 47
26062: DOUBLE
26063: EQUAL
26064: IFTRUE 26068
26066: GO 26086
26068: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26069: LD_ADDR_VAR 0 3
26073: PUSH
26074: LD_INT 23
26076: PUSH
26077: LD_INT 24
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: ST_TO_ADDR
26084: GO 26087
26086: POP
// result := ( chassis in result ) ;
26087: LD_ADDR_VAR 0 3
26091: PUSH
26092: LD_VAR 0 1
26096: PUSH
26097: LD_VAR 0 3
26101: IN
26102: ST_TO_ADDR
// end ;
26103: LD_VAR 0 3
26107: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26108: LD_INT 0
26110: PPUSH
26111: PPUSH
26112: PPUSH
26113: PPUSH
26114: PPUSH
26115: PPUSH
26116: PPUSH
// result := array ;
26117: LD_ADDR_VAR 0 5
26121: PUSH
26122: LD_VAR 0 1
26126: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26127: LD_VAR 0 1
26131: NOT
26132: PUSH
26133: LD_VAR 0 2
26137: NOT
26138: OR
26139: PUSH
26140: LD_VAR 0 3
26144: NOT
26145: OR
26146: PUSH
26147: LD_VAR 0 2
26151: PUSH
26152: LD_VAR 0 1
26156: GREATER
26157: OR
26158: PUSH
26159: LD_VAR 0 3
26163: PUSH
26164: LD_VAR 0 1
26168: GREATER
26169: OR
26170: IFFALSE 26174
// exit ;
26172: GO 26470
// if direction then
26174: LD_VAR 0 4
26178: IFFALSE 26242
// begin d := 1 ;
26180: LD_ADDR_VAR 0 9
26184: PUSH
26185: LD_INT 1
26187: ST_TO_ADDR
// if i_from > i_to then
26188: LD_VAR 0 2
26192: PUSH
26193: LD_VAR 0 3
26197: GREATER
26198: IFFALSE 26224
// length := ( array - i_from ) + i_to else
26200: LD_ADDR_VAR 0 11
26204: PUSH
26205: LD_VAR 0 1
26209: PUSH
26210: LD_VAR 0 2
26214: MINUS
26215: PUSH
26216: LD_VAR 0 3
26220: PLUS
26221: ST_TO_ADDR
26222: GO 26240
// length := i_to - i_from ;
26224: LD_ADDR_VAR 0 11
26228: PUSH
26229: LD_VAR 0 3
26233: PUSH
26234: LD_VAR 0 2
26238: MINUS
26239: ST_TO_ADDR
// end else
26240: GO 26303
// begin d := - 1 ;
26242: LD_ADDR_VAR 0 9
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: ST_TO_ADDR
// if i_from > i_to then
26251: LD_VAR 0 2
26255: PUSH
26256: LD_VAR 0 3
26260: GREATER
26261: IFFALSE 26281
// length := i_from - i_to else
26263: LD_ADDR_VAR 0 11
26267: PUSH
26268: LD_VAR 0 2
26272: PUSH
26273: LD_VAR 0 3
26277: MINUS
26278: ST_TO_ADDR
26279: GO 26303
// length := ( array - i_to ) + i_from ;
26281: LD_ADDR_VAR 0 11
26285: PUSH
26286: LD_VAR 0 1
26290: PUSH
26291: LD_VAR 0 3
26295: MINUS
26296: PUSH
26297: LD_VAR 0 2
26301: PLUS
26302: ST_TO_ADDR
// end ; if not length then
26303: LD_VAR 0 11
26307: NOT
26308: IFFALSE 26312
// exit ;
26310: GO 26470
// tmp := array ;
26312: LD_ADDR_VAR 0 10
26316: PUSH
26317: LD_VAR 0 1
26321: ST_TO_ADDR
// for i = 1 to length do
26322: LD_ADDR_VAR 0 6
26326: PUSH
26327: DOUBLE
26328: LD_INT 1
26330: DEC
26331: ST_TO_ADDR
26332: LD_VAR 0 11
26336: PUSH
26337: FOR_TO
26338: IFFALSE 26458
// begin for j = 1 to array do
26340: LD_ADDR_VAR 0 7
26344: PUSH
26345: DOUBLE
26346: LD_INT 1
26348: DEC
26349: ST_TO_ADDR
26350: LD_VAR 0 1
26354: PUSH
26355: FOR_TO
26356: IFFALSE 26444
// begin k := j + d ;
26358: LD_ADDR_VAR 0 8
26362: PUSH
26363: LD_VAR 0 7
26367: PUSH
26368: LD_VAR 0 9
26372: PLUS
26373: ST_TO_ADDR
// if k > array then
26374: LD_VAR 0 8
26378: PUSH
26379: LD_VAR 0 1
26383: GREATER
26384: IFFALSE 26394
// k := 1 ;
26386: LD_ADDR_VAR 0 8
26390: PUSH
26391: LD_INT 1
26393: ST_TO_ADDR
// if not k then
26394: LD_VAR 0 8
26398: NOT
26399: IFFALSE 26411
// k := array ;
26401: LD_ADDR_VAR 0 8
26405: PUSH
26406: LD_VAR 0 1
26410: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26411: LD_ADDR_VAR 0 10
26415: PUSH
26416: LD_VAR 0 10
26420: PPUSH
26421: LD_VAR 0 8
26425: PPUSH
26426: LD_VAR 0 1
26430: PUSH
26431: LD_VAR 0 7
26435: ARRAY
26436: PPUSH
26437: CALL_OW 1
26441: ST_TO_ADDR
// end ;
26442: GO 26355
26444: POP
26445: POP
// array := tmp ;
26446: LD_ADDR_VAR 0 1
26450: PUSH
26451: LD_VAR 0 10
26455: ST_TO_ADDR
// end ;
26456: GO 26337
26458: POP
26459: POP
// result := array ;
26460: LD_ADDR_VAR 0 5
26464: PUSH
26465: LD_VAR 0 1
26469: ST_TO_ADDR
// end ;
26470: LD_VAR 0 5
26474: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26475: LD_INT 0
26477: PPUSH
26478: PPUSH
// result := 0 ;
26479: LD_ADDR_VAR 0 3
26483: PUSH
26484: LD_INT 0
26486: ST_TO_ADDR
// if not array or not value in array then
26487: LD_VAR 0 1
26491: NOT
26492: PUSH
26493: LD_VAR 0 2
26497: PUSH
26498: LD_VAR 0 1
26502: IN
26503: NOT
26504: OR
26505: IFFALSE 26509
// exit ;
26507: GO 26563
// for i = 1 to array do
26509: LD_ADDR_VAR 0 4
26513: PUSH
26514: DOUBLE
26515: LD_INT 1
26517: DEC
26518: ST_TO_ADDR
26519: LD_VAR 0 1
26523: PUSH
26524: FOR_TO
26525: IFFALSE 26561
// if value = array [ i ] then
26527: LD_VAR 0 2
26531: PUSH
26532: LD_VAR 0 1
26536: PUSH
26537: LD_VAR 0 4
26541: ARRAY
26542: EQUAL
26543: IFFALSE 26559
// begin result := i ;
26545: LD_ADDR_VAR 0 3
26549: PUSH
26550: LD_VAR 0 4
26554: ST_TO_ADDR
// exit ;
26555: POP
26556: POP
26557: GO 26563
// end ;
26559: GO 26524
26561: POP
26562: POP
// end ;
26563: LD_VAR 0 3
26567: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26568: LD_INT 0
26570: PPUSH
// vc_chassis := chassis ;
26571: LD_ADDR_OWVAR 37
26575: PUSH
26576: LD_VAR 0 1
26580: ST_TO_ADDR
// vc_engine := engine ;
26581: LD_ADDR_OWVAR 39
26585: PUSH
26586: LD_VAR 0 2
26590: ST_TO_ADDR
// vc_control := control ;
26591: LD_ADDR_OWVAR 38
26595: PUSH
26596: LD_VAR 0 3
26600: ST_TO_ADDR
// vc_weapon := weapon ;
26601: LD_ADDR_OWVAR 40
26605: PUSH
26606: LD_VAR 0 4
26610: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26611: LD_ADDR_OWVAR 41
26615: PUSH
26616: LD_VAR 0 5
26620: ST_TO_ADDR
// end ;
26621: LD_VAR 0 6
26625: RET
// export function WantPlant ( unit ) ; var task ; begin
26626: LD_INT 0
26628: PPUSH
26629: PPUSH
// result := false ;
26630: LD_ADDR_VAR 0 2
26634: PUSH
26635: LD_INT 0
26637: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26638: LD_ADDR_VAR 0 3
26642: PUSH
26643: LD_VAR 0 1
26647: PPUSH
26648: CALL_OW 437
26652: ST_TO_ADDR
// if task then
26653: LD_VAR 0 3
26657: IFFALSE 26685
// if task [ 1 ] [ 1 ] = p then
26659: LD_VAR 0 3
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: PUSH
26668: LD_INT 1
26670: ARRAY
26671: PUSH
26672: LD_STRING p
26674: EQUAL
26675: IFFALSE 26685
// result := true ;
26677: LD_ADDR_VAR 0 2
26681: PUSH
26682: LD_INT 1
26684: ST_TO_ADDR
// end ;
26685: LD_VAR 0 2
26689: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26690: LD_INT 0
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
// if pos < 1 then
26696: LD_VAR 0 2
26700: PUSH
26701: LD_INT 1
26703: LESS
26704: IFFALSE 26708
// exit ;
26706: GO 27011
// if pos = 1 then
26708: LD_VAR 0 2
26712: PUSH
26713: LD_INT 1
26715: EQUAL
26716: IFFALSE 26749
// result := Replace ( arr , pos [ 1 ] , value ) else
26718: LD_ADDR_VAR 0 4
26722: PUSH
26723: LD_VAR 0 1
26727: PPUSH
26728: LD_VAR 0 2
26732: PUSH
26733: LD_INT 1
26735: ARRAY
26736: PPUSH
26737: LD_VAR 0 3
26741: PPUSH
26742: CALL_OW 1
26746: ST_TO_ADDR
26747: GO 27011
// begin tmp := arr ;
26749: LD_ADDR_VAR 0 6
26753: PUSH
26754: LD_VAR 0 1
26758: ST_TO_ADDR
// s_arr := [ tmp ] ;
26759: LD_ADDR_VAR 0 7
26763: PUSH
26764: LD_VAR 0 6
26768: PUSH
26769: EMPTY
26770: LIST
26771: ST_TO_ADDR
// for i = 1 to pos - 1 do
26772: LD_ADDR_VAR 0 5
26776: PUSH
26777: DOUBLE
26778: LD_INT 1
26780: DEC
26781: ST_TO_ADDR
26782: LD_VAR 0 2
26786: PUSH
26787: LD_INT 1
26789: MINUS
26790: PUSH
26791: FOR_TO
26792: IFFALSE 26837
// begin tmp := tmp [ pos [ i ] ] ;
26794: LD_ADDR_VAR 0 6
26798: PUSH
26799: LD_VAR 0 6
26803: PUSH
26804: LD_VAR 0 2
26808: PUSH
26809: LD_VAR 0 5
26813: ARRAY
26814: ARRAY
26815: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26816: LD_ADDR_VAR 0 7
26820: PUSH
26821: LD_VAR 0 7
26825: PUSH
26826: LD_VAR 0 6
26830: PUSH
26831: EMPTY
26832: LIST
26833: ADD
26834: ST_TO_ADDR
// end ;
26835: GO 26791
26837: POP
26838: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26839: LD_ADDR_VAR 0 6
26843: PUSH
26844: LD_VAR 0 6
26848: PPUSH
26849: LD_VAR 0 2
26853: PUSH
26854: LD_VAR 0 2
26858: ARRAY
26859: PPUSH
26860: LD_VAR 0 3
26864: PPUSH
26865: CALL_OW 1
26869: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26870: LD_ADDR_VAR 0 7
26874: PUSH
26875: LD_VAR 0 7
26879: PPUSH
26880: LD_VAR 0 7
26884: PPUSH
26885: LD_VAR 0 6
26889: PPUSH
26890: CALL_OW 1
26894: ST_TO_ADDR
// for i = s_arr downto 2 do
26895: LD_ADDR_VAR 0 5
26899: PUSH
26900: DOUBLE
26901: LD_VAR 0 7
26905: INC
26906: ST_TO_ADDR
26907: LD_INT 2
26909: PUSH
26910: FOR_DOWNTO
26911: IFFALSE 26995
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26913: LD_ADDR_VAR 0 6
26917: PUSH
26918: LD_VAR 0 7
26922: PUSH
26923: LD_VAR 0 5
26927: PUSH
26928: LD_INT 1
26930: MINUS
26931: ARRAY
26932: PPUSH
26933: LD_VAR 0 2
26937: PUSH
26938: LD_VAR 0 5
26942: PUSH
26943: LD_INT 1
26945: MINUS
26946: ARRAY
26947: PPUSH
26948: LD_VAR 0 7
26952: PUSH
26953: LD_VAR 0 5
26957: ARRAY
26958: PPUSH
26959: CALL_OW 1
26963: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26964: LD_ADDR_VAR 0 7
26968: PUSH
26969: LD_VAR 0 7
26973: PPUSH
26974: LD_VAR 0 5
26978: PUSH
26979: LD_INT 1
26981: MINUS
26982: PPUSH
26983: LD_VAR 0 6
26987: PPUSH
26988: CALL_OW 1
26992: ST_TO_ADDR
// end ;
26993: GO 26910
26995: POP
26996: POP
// result := s_arr [ 1 ] ;
26997: LD_ADDR_VAR 0 4
27001: PUSH
27002: LD_VAR 0 7
27006: PUSH
27007: LD_INT 1
27009: ARRAY
27010: ST_TO_ADDR
// end ; end ;
27011: LD_VAR 0 4
27015: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27016: LD_INT 0
27018: PPUSH
27019: PPUSH
// if not list then
27020: LD_VAR 0 1
27024: NOT
27025: IFFALSE 27029
// exit ;
27027: GO 27120
// i := list [ pos1 ] ;
27029: LD_ADDR_VAR 0 5
27033: PUSH
27034: LD_VAR 0 1
27038: PUSH
27039: LD_VAR 0 2
27043: ARRAY
27044: ST_TO_ADDR
// if not i then
27045: LD_VAR 0 5
27049: NOT
27050: IFFALSE 27054
// exit ;
27052: GO 27120
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27054: LD_ADDR_VAR 0 1
27058: PUSH
27059: LD_VAR 0 1
27063: PPUSH
27064: LD_VAR 0 2
27068: PPUSH
27069: LD_VAR 0 1
27073: PUSH
27074: LD_VAR 0 3
27078: ARRAY
27079: PPUSH
27080: CALL_OW 1
27084: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27085: LD_ADDR_VAR 0 1
27089: PUSH
27090: LD_VAR 0 1
27094: PPUSH
27095: LD_VAR 0 3
27099: PPUSH
27100: LD_VAR 0 5
27104: PPUSH
27105: CALL_OW 1
27109: ST_TO_ADDR
// result := list ;
27110: LD_ADDR_VAR 0 4
27114: PUSH
27115: LD_VAR 0 1
27119: ST_TO_ADDR
// end ;
27120: LD_VAR 0 4
27124: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27125: LD_INT 0
27127: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27128: LD_ADDR_VAR 0 5
27132: PUSH
27133: LD_VAR 0 1
27137: PPUSH
27138: CALL_OW 250
27142: PPUSH
27143: LD_VAR 0 1
27147: PPUSH
27148: CALL_OW 251
27152: PPUSH
27153: LD_VAR 0 2
27157: PPUSH
27158: LD_VAR 0 3
27162: PPUSH
27163: LD_VAR 0 4
27167: PPUSH
27168: CALL 27178 0 5
27172: ST_TO_ADDR
// end ;
27173: LD_VAR 0 5
27177: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27178: LD_INT 0
27180: PPUSH
27181: PPUSH
27182: PPUSH
27183: PPUSH
// if not list then
27184: LD_VAR 0 3
27188: NOT
27189: IFFALSE 27193
// exit ;
27191: GO 27581
// result := [ ] ;
27193: LD_ADDR_VAR 0 6
27197: PUSH
27198: EMPTY
27199: ST_TO_ADDR
// for i in list do
27200: LD_ADDR_VAR 0 7
27204: PUSH
27205: LD_VAR 0 3
27209: PUSH
27210: FOR_IN
27211: IFFALSE 27413
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27213: LD_ADDR_VAR 0 9
27217: PUSH
27218: LD_VAR 0 7
27222: PPUSH
27223: LD_VAR 0 1
27227: PPUSH
27228: LD_VAR 0 2
27232: PPUSH
27233: CALL_OW 297
27237: ST_TO_ADDR
// if not result then
27238: LD_VAR 0 6
27242: NOT
27243: IFFALSE 27269
// result := [ [ i , tmp ] ] else
27245: LD_ADDR_VAR 0 6
27249: PUSH
27250: LD_VAR 0 7
27254: PUSH
27255: LD_VAR 0 9
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: EMPTY
27265: LIST
27266: ST_TO_ADDR
27267: GO 27411
// begin if result [ result ] [ 2 ] < tmp then
27269: LD_VAR 0 6
27273: PUSH
27274: LD_VAR 0 6
27278: ARRAY
27279: PUSH
27280: LD_INT 2
27282: ARRAY
27283: PUSH
27284: LD_VAR 0 9
27288: LESS
27289: IFFALSE 27331
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27291: LD_ADDR_VAR 0 6
27295: PUSH
27296: LD_VAR 0 6
27300: PPUSH
27301: LD_VAR 0 6
27305: PUSH
27306: LD_INT 1
27308: PLUS
27309: PPUSH
27310: LD_VAR 0 7
27314: PUSH
27315: LD_VAR 0 9
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PPUSH
27324: CALL_OW 2
27328: ST_TO_ADDR
27329: GO 27411
// for j = 1 to result do
27331: LD_ADDR_VAR 0 8
27335: PUSH
27336: DOUBLE
27337: LD_INT 1
27339: DEC
27340: ST_TO_ADDR
27341: LD_VAR 0 6
27345: PUSH
27346: FOR_TO
27347: IFFALSE 27409
// begin if tmp < result [ j ] [ 2 ] then
27349: LD_VAR 0 9
27353: PUSH
27354: LD_VAR 0 6
27358: PUSH
27359: LD_VAR 0 8
27363: ARRAY
27364: PUSH
27365: LD_INT 2
27367: ARRAY
27368: LESS
27369: IFFALSE 27407
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27371: LD_ADDR_VAR 0 6
27375: PUSH
27376: LD_VAR 0 6
27380: PPUSH
27381: LD_VAR 0 8
27385: PPUSH
27386: LD_VAR 0 7
27390: PUSH
27391: LD_VAR 0 9
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PPUSH
27400: CALL_OW 2
27404: ST_TO_ADDR
// break ;
27405: GO 27409
// end ; end ;
27407: GO 27346
27409: POP
27410: POP
// end ; end ;
27411: GO 27210
27413: POP
27414: POP
// if result and not asc then
27415: LD_VAR 0 6
27419: PUSH
27420: LD_VAR 0 4
27424: NOT
27425: AND
27426: IFFALSE 27501
// begin tmp := result ;
27428: LD_ADDR_VAR 0 9
27432: PUSH
27433: LD_VAR 0 6
27437: ST_TO_ADDR
// for i = tmp downto 1 do
27438: LD_ADDR_VAR 0 7
27442: PUSH
27443: DOUBLE
27444: LD_VAR 0 9
27448: INC
27449: ST_TO_ADDR
27450: LD_INT 1
27452: PUSH
27453: FOR_DOWNTO
27454: IFFALSE 27499
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27456: LD_ADDR_VAR 0 6
27460: PUSH
27461: LD_VAR 0 6
27465: PPUSH
27466: LD_VAR 0 9
27470: PUSH
27471: LD_VAR 0 7
27475: MINUS
27476: PUSH
27477: LD_INT 1
27479: PLUS
27480: PPUSH
27481: LD_VAR 0 9
27485: PUSH
27486: LD_VAR 0 7
27490: ARRAY
27491: PPUSH
27492: CALL_OW 1
27496: ST_TO_ADDR
27497: GO 27453
27499: POP
27500: POP
// end ; tmp := [ ] ;
27501: LD_ADDR_VAR 0 9
27505: PUSH
27506: EMPTY
27507: ST_TO_ADDR
// if mode then
27508: LD_VAR 0 5
27512: IFFALSE 27581
// begin for i = 1 to result do
27514: LD_ADDR_VAR 0 7
27518: PUSH
27519: DOUBLE
27520: LD_INT 1
27522: DEC
27523: ST_TO_ADDR
27524: LD_VAR 0 6
27528: PUSH
27529: FOR_TO
27530: IFFALSE 27569
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27532: LD_ADDR_VAR 0 9
27536: PUSH
27537: LD_VAR 0 9
27541: PPUSH
27542: LD_VAR 0 7
27546: PPUSH
27547: LD_VAR 0 6
27551: PUSH
27552: LD_VAR 0 7
27556: ARRAY
27557: PUSH
27558: LD_INT 1
27560: ARRAY
27561: PPUSH
27562: CALL_OW 1
27566: ST_TO_ADDR
27567: GO 27529
27569: POP
27570: POP
// result := tmp ;
27571: LD_ADDR_VAR 0 6
27575: PUSH
27576: LD_VAR 0 9
27580: ST_TO_ADDR
// end ; end ;
27581: LD_VAR 0 6
27585: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27586: LD_INT 0
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27594: LD_ADDR_VAR 0 5
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: EMPTY
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: ST_TO_ADDR
// if not x or not y then
27616: LD_VAR 0 2
27620: NOT
27621: PUSH
27622: LD_VAR 0 3
27626: NOT
27627: OR
27628: IFFALSE 27632
// exit ;
27630: GO 29282
// if not range then
27632: LD_VAR 0 4
27636: NOT
27637: IFFALSE 27647
// range := 10 ;
27639: LD_ADDR_VAR 0 4
27643: PUSH
27644: LD_INT 10
27646: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27647: LD_ADDR_VAR 0 8
27651: PUSH
27652: LD_INT 81
27654: PUSH
27655: LD_VAR 0 1
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 92
27666: PUSH
27667: LD_VAR 0 2
27671: PUSH
27672: LD_VAR 0 3
27676: PUSH
27677: LD_VAR 0 4
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 3
27690: PUSH
27691: LD_INT 21
27693: PUSH
27694: LD_INT 3
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: PPUSH
27710: CALL_OW 69
27714: ST_TO_ADDR
// if not tmp then
27715: LD_VAR 0 8
27719: NOT
27720: IFFALSE 27724
// exit ;
27722: GO 29282
// for i in tmp do
27724: LD_ADDR_VAR 0 6
27728: PUSH
27729: LD_VAR 0 8
27733: PUSH
27734: FOR_IN
27735: IFFALSE 29257
// begin points := [ 0 , 0 , 0 ] ;
27737: LD_ADDR_VAR 0 9
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: LIST
27755: ST_TO_ADDR
// bpoints := 1 ;
27756: LD_ADDR_VAR 0 10
27760: PUSH
27761: LD_INT 1
27763: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27764: LD_VAR 0 6
27768: PPUSH
27769: CALL_OW 247
27773: PUSH
27774: LD_INT 1
27776: DOUBLE
27777: EQUAL
27778: IFTRUE 27782
27780: GO 28360
27782: POP
// begin if GetClass ( i ) = 1 then
27783: LD_VAR 0 6
27787: PPUSH
27788: CALL_OW 257
27792: PUSH
27793: LD_INT 1
27795: EQUAL
27796: IFFALSE 27817
// points := [ 10 , 5 , 3 ] ;
27798: LD_ADDR_VAR 0 9
27802: PUSH
27803: LD_INT 10
27805: PUSH
27806: LD_INT 5
27808: PUSH
27809: LD_INT 3
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: LIST
27816: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27817: LD_VAR 0 6
27821: PPUSH
27822: CALL_OW 257
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: LD_INT 3
27832: PUSH
27833: LD_INT 4
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: LIST
27840: IN
27841: IFFALSE 27862
// points := [ 3 , 2 , 1 ] ;
27843: LD_ADDR_VAR 0 9
27847: PUSH
27848: LD_INT 3
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27862: LD_VAR 0 6
27866: PPUSH
27867: CALL_OW 257
27871: PUSH
27872: LD_INT 5
27874: EQUAL
27875: IFFALSE 27896
// points := [ 130 , 5 , 2 ] ;
27877: LD_ADDR_VAR 0 9
27881: PUSH
27882: LD_INT 130
27884: PUSH
27885: LD_INT 5
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27896: LD_VAR 0 6
27900: PPUSH
27901: CALL_OW 257
27905: PUSH
27906: LD_INT 8
27908: EQUAL
27909: IFFALSE 27930
// points := [ 35 , 35 , 30 ] ;
27911: LD_ADDR_VAR 0 9
27915: PUSH
27916: LD_INT 35
27918: PUSH
27919: LD_INT 35
27921: PUSH
27922: LD_INT 30
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: LIST
27929: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27930: LD_VAR 0 6
27934: PPUSH
27935: CALL_OW 257
27939: PUSH
27940: LD_INT 9
27942: EQUAL
27943: IFFALSE 27964
// points := [ 20 , 55 , 40 ] ;
27945: LD_ADDR_VAR 0 9
27949: PUSH
27950: LD_INT 20
27952: PUSH
27953: LD_INT 55
27955: PUSH
27956: LD_INT 40
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: LIST
27963: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27964: LD_VAR 0 6
27968: PPUSH
27969: CALL_OW 257
27973: PUSH
27974: LD_INT 12
27976: PUSH
27977: LD_INT 16
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: IN
27984: IFFALSE 28005
// points := [ 5 , 3 , 2 ] ;
27986: LD_ADDR_VAR 0 9
27990: PUSH
27991: LD_INT 5
27993: PUSH
27994: LD_INT 3
27996: PUSH
27997: LD_INT 2
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: LIST
28004: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28005: LD_VAR 0 6
28009: PPUSH
28010: CALL_OW 257
28014: PUSH
28015: LD_INT 17
28017: EQUAL
28018: IFFALSE 28039
// points := [ 100 , 50 , 75 ] ;
28020: LD_ADDR_VAR 0 9
28024: PUSH
28025: LD_INT 100
28027: PUSH
28028: LD_INT 50
28030: PUSH
28031: LD_INT 75
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: LIST
28038: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28039: LD_VAR 0 6
28043: PPUSH
28044: CALL_OW 257
28048: PUSH
28049: LD_INT 15
28051: EQUAL
28052: IFFALSE 28073
// points := [ 10 , 5 , 3 ] ;
28054: LD_ADDR_VAR 0 9
28058: PUSH
28059: LD_INT 10
28061: PUSH
28062: LD_INT 5
28064: PUSH
28065: LD_INT 3
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: LIST
28072: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28073: LD_VAR 0 6
28077: PPUSH
28078: CALL_OW 257
28082: PUSH
28083: LD_INT 14
28085: EQUAL
28086: IFFALSE 28107
// points := [ 10 , 0 , 0 ] ;
28088: LD_ADDR_VAR 0 9
28092: PUSH
28093: LD_INT 10
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: LIST
28106: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28107: LD_VAR 0 6
28111: PPUSH
28112: CALL_OW 257
28116: PUSH
28117: LD_INT 11
28119: EQUAL
28120: IFFALSE 28141
// points := [ 30 , 10 , 5 ] ;
28122: LD_ADDR_VAR 0 9
28126: PUSH
28127: LD_INT 30
28129: PUSH
28130: LD_INT 10
28132: PUSH
28133: LD_INT 5
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28141: LD_VAR 0 1
28145: PPUSH
28146: LD_INT 5
28148: PPUSH
28149: CALL_OW 321
28153: PUSH
28154: LD_INT 2
28156: EQUAL
28157: IFFALSE 28174
// bpoints := bpoints * 1.8 ;
28159: LD_ADDR_VAR 0 10
28163: PUSH
28164: LD_VAR 0 10
28168: PUSH
28169: LD_REAL  1.80000000000000E+0000
28172: MUL
28173: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28174: LD_VAR 0 6
28178: PPUSH
28179: CALL_OW 257
28183: PUSH
28184: LD_INT 1
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 3
28192: PUSH
28193: LD_INT 4
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: IN
28202: PUSH
28203: LD_VAR 0 1
28207: PPUSH
28208: LD_INT 51
28210: PPUSH
28211: CALL_OW 321
28215: PUSH
28216: LD_INT 2
28218: EQUAL
28219: AND
28220: IFFALSE 28237
// bpoints := bpoints * 1.2 ;
28222: LD_ADDR_VAR 0 10
28226: PUSH
28227: LD_VAR 0 10
28231: PUSH
28232: LD_REAL  1.20000000000000E+0000
28235: MUL
28236: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28237: LD_VAR 0 6
28241: PPUSH
28242: CALL_OW 257
28246: PUSH
28247: LD_INT 5
28249: PUSH
28250: LD_INT 7
28252: PUSH
28253: LD_INT 9
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: LIST
28260: IN
28261: PUSH
28262: LD_VAR 0 1
28266: PPUSH
28267: LD_INT 52
28269: PPUSH
28270: CALL_OW 321
28274: PUSH
28275: LD_INT 2
28277: EQUAL
28278: AND
28279: IFFALSE 28296
// bpoints := bpoints * 1.5 ;
28281: LD_ADDR_VAR 0 10
28285: PUSH
28286: LD_VAR 0 10
28290: PUSH
28291: LD_REAL  1.50000000000000E+0000
28294: MUL
28295: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28296: LD_VAR 0 1
28300: PPUSH
28301: LD_INT 66
28303: PPUSH
28304: CALL_OW 321
28308: PUSH
28309: LD_INT 2
28311: EQUAL
28312: IFFALSE 28329
// bpoints := bpoints * 1.1 ;
28314: LD_ADDR_VAR 0 10
28318: PUSH
28319: LD_VAR 0 10
28323: PUSH
28324: LD_REAL  1.10000000000000E+0000
28327: MUL
28328: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28329: LD_ADDR_VAR 0 10
28333: PUSH
28334: LD_VAR 0 10
28338: PUSH
28339: LD_VAR 0 6
28343: PPUSH
28344: LD_INT 1
28346: PPUSH
28347: CALL_OW 259
28351: PUSH
28352: LD_REAL  1.15000000000000E+0000
28355: MUL
28356: MUL
28357: ST_TO_ADDR
// end ; unit_vehicle :
28358: GO 29186
28360: LD_INT 2
28362: DOUBLE
28363: EQUAL
28364: IFTRUE 28368
28366: GO 29174
28368: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28369: LD_VAR 0 6
28373: PPUSH
28374: CALL_OW 264
28378: PUSH
28379: LD_INT 2
28381: PUSH
28382: LD_INT 42
28384: PUSH
28385: LD_INT 24
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: IN
28393: IFFALSE 28414
// points := [ 25 , 5 , 3 ] ;
28395: LD_ADDR_VAR 0 9
28399: PUSH
28400: LD_INT 25
28402: PUSH
28403: LD_INT 5
28405: PUSH
28406: LD_INT 3
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28414: LD_VAR 0 6
28418: PPUSH
28419: CALL_OW 264
28423: PUSH
28424: LD_INT 4
28426: PUSH
28427: LD_INT 43
28429: PUSH
28430: LD_INT 25
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: LIST
28437: IN
28438: IFFALSE 28459
// points := [ 40 , 15 , 5 ] ;
28440: LD_ADDR_VAR 0 9
28444: PUSH
28445: LD_INT 40
28447: PUSH
28448: LD_INT 15
28450: PUSH
28451: LD_INT 5
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28459: LD_VAR 0 6
28463: PPUSH
28464: CALL_OW 264
28468: PUSH
28469: LD_INT 3
28471: PUSH
28472: LD_INT 23
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: IN
28479: IFFALSE 28500
// points := [ 7 , 25 , 8 ] ;
28481: LD_ADDR_VAR 0 9
28485: PUSH
28486: LD_INT 7
28488: PUSH
28489: LD_INT 25
28491: PUSH
28492: LD_INT 8
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: LIST
28499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28500: LD_VAR 0 6
28504: PPUSH
28505: CALL_OW 264
28509: PUSH
28510: LD_INT 5
28512: PUSH
28513: LD_INT 27
28515: PUSH
28516: LD_INT 44
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: LIST
28523: IN
28524: IFFALSE 28545
// points := [ 14 , 50 , 16 ] ;
28526: LD_ADDR_VAR 0 9
28530: PUSH
28531: LD_INT 14
28533: PUSH
28534: LD_INT 50
28536: PUSH
28537: LD_INT 16
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28545: LD_VAR 0 6
28549: PPUSH
28550: CALL_OW 264
28554: PUSH
28555: LD_INT 6
28557: PUSH
28558: LD_INT 46
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: IN
28565: IFFALSE 28586
// points := [ 32 , 120 , 70 ] ;
28567: LD_ADDR_VAR 0 9
28571: PUSH
28572: LD_INT 32
28574: PUSH
28575: LD_INT 120
28577: PUSH
28578: LD_INT 70
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28586: LD_VAR 0 6
28590: PPUSH
28591: CALL_OW 264
28595: PUSH
28596: LD_INT 7
28598: PUSH
28599: LD_INT 28
28601: PUSH
28602: LD_INT 45
28604: PUSH
28605: LD_INT 92
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: IN
28614: IFFALSE 28635
// points := [ 35 , 20 , 45 ] ;
28616: LD_ADDR_VAR 0 9
28620: PUSH
28621: LD_INT 35
28623: PUSH
28624: LD_INT 20
28626: PUSH
28627: LD_INT 45
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28635: LD_VAR 0 6
28639: PPUSH
28640: CALL_OW 264
28644: PUSH
28645: LD_INT 47
28647: PUSH
28648: EMPTY
28649: LIST
28650: IN
28651: IFFALSE 28672
// points := [ 67 , 45 , 75 ] ;
28653: LD_ADDR_VAR 0 9
28657: PUSH
28658: LD_INT 67
28660: PUSH
28661: LD_INT 45
28663: PUSH
28664: LD_INT 75
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28672: LD_VAR 0 6
28676: PPUSH
28677: CALL_OW 264
28681: PUSH
28682: LD_INT 26
28684: PUSH
28685: EMPTY
28686: LIST
28687: IN
28688: IFFALSE 28709
// points := [ 120 , 30 , 80 ] ;
28690: LD_ADDR_VAR 0 9
28694: PUSH
28695: LD_INT 120
28697: PUSH
28698: LD_INT 30
28700: PUSH
28701: LD_INT 80
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: LIST
28708: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28709: LD_VAR 0 6
28713: PPUSH
28714: CALL_OW 264
28718: PUSH
28719: LD_INT 22
28721: PUSH
28722: EMPTY
28723: LIST
28724: IN
28725: IFFALSE 28746
// points := [ 40 , 1 , 1 ] ;
28727: LD_ADDR_VAR 0 9
28731: PUSH
28732: LD_INT 40
28734: PUSH
28735: LD_INT 1
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: LIST
28745: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28746: LD_VAR 0 6
28750: PPUSH
28751: CALL_OW 264
28755: PUSH
28756: LD_INT 29
28758: PUSH
28759: EMPTY
28760: LIST
28761: IN
28762: IFFALSE 28783
// points := [ 70 , 200 , 400 ] ;
28764: LD_ADDR_VAR 0 9
28768: PUSH
28769: LD_INT 70
28771: PUSH
28772: LD_INT 200
28774: PUSH
28775: LD_INT 400
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: LIST
28782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28783: LD_VAR 0 6
28787: PPUSH
28788: CALL_OW 264
28792: PUSH
28793: LD_INT 14
28795: PUSH
28796: LD_INT 53
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: IN
28803: IFFALSE 28824
// points := [ 40 , 10 , 20 ] ;
28805: LD_ADDR_VAR 0 9
28809: PUSH
28810: LD_INT 40
28812: PUSH
28813: LD_INT 10
28815: PUSH
28816: LD_INT 20
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: LIST
28823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28824: LD_VAR 0 6
28828: PPUSH
28829: CALL_OW 264
28833: PUSH
28834: LD_INT 9
28836: PUSH
28837: EMPTY
28838: LIST
28839: IN
28840: IFFALSE 28861
// points := [ 5 , 70 , 20 ] ;
28842: LD_ADDR_VAR 0 9
28846: PUSH
28847: LD_INT 5
28849: PUSH
28850: LD_INT 70
28852: PUSH
28853: LD_INT 20
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: LIST
28860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28861: LD_VAR 0 6
28865: PPUSH
28866: CALL_OW 264
28870: PUSH
28871: LD_INT 10
28873: PUSH
28874: EMPTY
28875: LIST
28876: IN
28877: IFFALSE 28898
// points := [ 35 , 110 , 70 ] ;
28879: LD_ADDR_VAR 0 9
28883: PUSH
28884: LD_INT 35
28886: PUSH
28887: LD_INT 110
28889: PUSH
28890: LD_INT 70
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28898: LD_VAR 0 6
28902: PPUSH
28903: CALL_OW 265
28907: PUSH
28908: LD_INT 25
28910: EQUAL
28911: IFFALSE 28932
// points := [ 80 , 65 , 100 ] ;
28913: LD_ADDR_VAR 0 9
28917: PUSH
28918: LD_INT 80
28920: PUSH
28921: LD_INT 65
28923: PUSH
28924: LD_INT 100
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: LIST
28931: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28932: LD_VAR 0 6
28936: PPUSH
28937: CALL_OW 263
28941: PUSH
28942: LD_INT 1
28944: EQUAL
28945: IFFALSE 28980
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28947: LD_ADDR_VAR 0 10
28951: PUSH
28952: LD_VAR 0 10
28956: PUSH
28957: LD_VAR 0 6
28961: PPUSH
28962: CALL_OW 311
28966: PPUSH
28967: LD_INT 3
28969: PPUSH
28970: CALL_OW 259
28974: PUSH
28975: LD_INT 4
28977: MUL
28978: MUL
28979: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28980: LD_VAR 0 6
28984: PPUSH
28985: CALL_OW 263
28989: PUSH
28990: LD_INT 2
28992: EQUAL
28993: IFFALSE 29044
// begin j := IsControledBy ( i ) ;
28995: LD_ADDR_VAR 0 7
28999: PUSH
29000: LD_VAR 0 6
29004: PPUSH
29005: CALL_OW 312
29009: ST_TO_ADDR
// if j then
29010: LD_VAR 0 7
29014: IFFALSE 29044
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29016: LD_ADDR_VAR 0 10
29020: PUSH
29021: LD_VAR 0 10
29025: PUSH
29026: LD_VAR 0 7
29030: PPUSH
29031: LD_INT 3
29033: PPUSH
29034: CALL_OW 259
29038: PUSH
29039: LD_INT 3
29041: MUL
29042: MUL
29043: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29044: LD_VAR 0 6
29048: PPUSH
29049: CALL_OW 264
29053: PUSH
29054: LD_INT 5
29056: PUSH
29057: LD_INT 6
29059: PUSH
29060: LD_INT 46
29062: PUSH
29063: LD_INT 44
29065: PUSH
29066: LD_INT 47
29068: PUSH
29069: LD_INT 45
29071: PUSH
29072: LD_INT 28
29074: PUSH
29075: LD_INT 7
29077: PUSH
29078: LD_INT 27
29080: PUSH
29081: LD_INT 29
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: IN
29096: PUSH
29097: LD_VAR 0 1
29101: PPUSH
29102: LD_INT 52
29104: PPUSH
29105: CALL_OW 321
29109: PUSH
29110: LD_INT 2
29112: EQUAL
29113: AND
29114: IFFALSE 29131
// bpoints := bpoints * 1.2 ;
29116: LD_ADDR_VAR 0 10
29120: PUSH
29121: LD_VAR 0 10
29125: PUSH
29126: LD_REAL  1.20000000000000E+0000
29129: MUL
29130: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29131: LD_VAR 0 6
29135: PPUSH
29136: CALL_OW 264
29140: PUSH
29141: LD_INT 6
29143: PUSH
29144: LD_INT 46
29146: PUSH
29147: LD_INT 47
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: IN
29155: IFFALSE 29172
// bpoints := bpoints * 1.2 ;
29157: LD_ADDR_VAR 0 10
29161: PUSH
29162: LD_VAR 0 10
29166: PUSH
29167: LD_REAL  1.20000000000000E+0000
29170: MUL
29171: ST_TO_ADDR
// end ; unit_building :
29172: GO 29186
29174: LD_INT 3
29176: DOUBLE
29177: EQUAL
29178: IFTRUE 29182
29180: GO 29185
29182: POP
// ; end ;
29183: GO 29186
29185: POP
// for j = 1 to 3 do
29186: LD_ADDR_VAR 0 7
29190: PUSH
29191: DOUBLE
29192: LD_INT 1
29194: DEC
29195: ST_TO_ADDR
29196: LD_INT 3
29198: PUSH
29199: FOR_TO
29200: IFFALSE 29253
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29202: LD_ADDR_VAR 0 5
29206: PUSH
29207: LD_VAR 0 5
29211: PPUSH
29212: LD_VAR 0 7
29216: PPUSH
29217: LD_VAR 0 5
29221: PUSH
29222: LD_VAR 0 7
29226: ARRAY
29227: PUSH
29228: LD_VAR 0 9
29232: PUSH
29233: LD_VAR 0 7
29237: ARRAY
29238: PUSH
29239: LD_VAR 0 10
29243: MUL
29244: PLUS
29245: PPUSH
29246: CALL_OW 1
29250: ST_TO_ADDR
29251: GO 29199
29253: POP
29254: POP
// end ;
29255: GO 27734
29257: POP
29258: POP
// result := Replace ( result , 4 , tmp ) ;
29259: LD_ADDR_VAR 0 5
29263: PUSH
29264: LD_VAR 0 5
29268: PPUSH
29269: LD_INT 4
29271: PPUSH
29272: LD_VAR 0 8
29276: PPUSH
29277: CALL_OW 1
29281: ST_TO_ADDR
// end ;
29282: LD_VAR 0 5
29286: RET
// export function DangerAtRange ( unit , range ) ; begin
29287: LD_INT 0
29289: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29290: LD_ADDR_VAR 0 3
29294: PUSH
29295: LD_VAR 0 1
29299: PPUSH
29300: CALL_OW 255
29304: PPUSH
29305: LD_VAR 0 1
29309: PPUSH
29310: CALL_OW 250
29314: PPUSH
29315: LD_VAR 0 1
29319: PPUSH
29320: CALL_OW 251
29324: PPUSH
29325: LD_VAR 0 2
29329: PPUSH
29330: CALL 27586 0 4
29334: ST_TO_ADDR
// end ;
29335: LD_VAR 0 3
29339: RET
// export function DangerInArea ( side , area ) ; begin
29340: LD_INT 0
29342: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29343: LD_ADDR_VAR 0 3
29347: PUSH
29348: LD_VAR 0 2
29352: PPUSH
29353: LD_INT 81
29355: PUSH
29356: LD_VAR 0 1
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PPUSH
29365: CALL_OW 70
29369: ST_TO_ADDR
// end ;
29370: LD_VAR 0 3
29374: RET
// export function IsExtension ( b ) ; begin
29375: LD_INT 0
29377: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29378: LD_ADDR_VAR 0 2
29382: PUSH
29383: LD_VAR 0 1
29387: PUSH
29388: LD_INT 23
29390: PUSH
29391: LD_INT 20
29393: PUSH
29394: LD_INT 22
29396: PUSH
29397: LD_INT 17
29399: PUSH
29400: LD_INT 24
29402: PUSH
29403: LD_INT 21
29405: PUSH
29406: LD_INT 19
29408: PUSH
29409: LD_INT 16
29411: PUSH
29412: LD_INT 25
29414: PUSH
29415: LD_INT 18
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: IN
29430: ST_TO_ADDR
// end ;
29431: LD_VAR 0 2
29435: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29436: LD_INT 0
29438: PPUSH
29439: PPUSH
29440: PPUSH
// result := [ ] ;
29441: LD_ADDR_VAR 0 4
29445: PUSH
29446: EMPTY
29447: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29448: LD_ADDR_VAR 0 5
29452: PUSH
29453: LD_VAR 0 2
29457: PPUSH
29458: LD_INT 21
29460: PUSH
29461: LD_INT 3
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PPUSH
29468: CALL_OW 70
29472: ST_TO_ADDR
// if not tmp then
29473: LD_VAR 0 5
29477: NOT
29478: IFFALSE 29482
// exit ;
29480: GO 29546
// if checkLink then
29482: LD_VAR 0 3
29486: IFFALSE 29536
// begin for i in tmp do
29488: LD_ADDR_VAR 0 6
29492: PUSH
29493: LD_VAR 0 5
29497: PUSH
29498: FOR_IN
29499: IFFALSE 29534
// if GetBase ( i ) <> base then
29501: LD_VAR 0 6
29505: PPUSH
29506: CALL_OW 274
29510: PUSH
29511: LD_VAR 0 1
29515: NONEQUAL
29516: IFFALSE 29532
// ComLinkToBase ( base , i ) ;
29518: LD_VAR 0 1
29522: PPUSH
29523: LD_VAR 0 6
29527: PPUSH
29528: CALL_OW 169
29532: GO 29498
29534: POP
29535: POP
// end ; result := tmp ;
29536: LD_ADDR_VAR 0 4
29540: PUSH
29541: LD_VAR 0 5
29545: ST_TO_ADDR
// end ;
29546: LD_VAR 0 4
29550: RET
// export function ComComplete ( units , b ) ; var i ; begin
29551: LD_INT 0
29553: PPUSH
29554: PPUSH
// if not units then
29555: LD_VAR 0 1
29559: NOT
29560: IFFALSE 29564
// exit ;
29562: GO 29654
// for i in units do
29564: LD_ADDR_VAR 0 4
29568: PUSH
29569: LD_VAR 0 1
29573: PUSH
29574: FOR_IN
29575: IFFALSE 29652
// if BuildingStatus ( b ) = bs_build then
29577: LD_VAR 0 2
29581: PPUSH
29582: CALL_OW 461
29586: PUSH
29587: LD_INT 1
29589: EQUAL
29590: IFFALSE 29650
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29592: LD_VAR 0 4
29596: PPUSH
29597: LD_STRING h
29599: PUSH
29600: LD_VAR 0 2
29604: PPUSH
29605: CALL_OW 250
29609: PUSH
29610: LD_VAR 0 2
29614: PPUSH
29615: CALL_OW 251
29619: PUSH
29620: LD_VAR 0 2
29624: PUSH
29625: LD_INT 0
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: PPUSH
29646: CALL_OW 446
29650: GO 29574
29652: POP
29653: POP
// end ;
29654: LD_VAR 0 3
29658: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29659: LD_INT 0
29661: PPUSH
29662: PPUSH
29663: PPUSH
29664: PPUSH
29665: PPUSH
29666: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29667: LD_VAR 0 1
29671: NOT
29672: PUSH
29673: LD_VAR 0 1
29677: PPUSH
29678: CALL_OW 263
29682: PUSH
29683: LD_INT 2
29685: NONEQUAL
29686: OR
29687: IFFALSE 29691
// exit ;
29689: GO 30007
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29691: LD_ADDR_VAR 0 6
29695: PUSH
29696: LD_INT 22
29698: PUSH
29699: LD_VAR 0 1
29703: PPUSH
29704: CALL_OW 255
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 2
29715: PUSH
29716: LD_INT 30
29718: PUSH
29719: LD_INT 36
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 34
29728: PUSH
29729: LD_INT 31
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: LIST
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PPUSH
29745: CALL_OW 69
29749: ST_TO_ADDR
// if not tmp then
29750: LD_VAR 0 6
29754: NOT
29755: IFFALSE 29759
// exit ;
29757: GO 30007
// result := [ ] ;
29759: LD_ADDR_VAR 0 2
29763: PUSH
29764: EMPTY
29765: ST_TO_ADDR
// for i in tmp do
29766: LD_ADDR_VAR 0 3
29770: PUSH
29771: LD_VAR 0 6
29775: PUSH
29776: FOR_IN
29777: IFFALSE 29848
// begin t := UnitsInside ( i ) ;
29779: LD_ADDR_VAR 0 4
29783: PUSH
29784: LD_VAR 0 3
29788: PPUSH
29789: CALL_OW 313
29793: ST_TO_ADDR
// if t then
29794: LD_VAR 0 4
29798: IFFALSE 29846
// for j in t do
29800: LD_ADDR_VAR 0 7
29804: PUSH
29805: LD_VAR 0 4
29809: PUSH
29810: FOR_IN
29811: IFFALSE 29844
// result := Replace ( result , result + 1 , j ) ;
29813: LD_ADDR_VAR 0 2
29817: PUSH
29818: LD_VAR 0 2
29822: PPUSH
29823: LD_VAR 0 2
29827: PUSH
29828: LD_INT 1
29830: PLUS
29831: PPUSH
29832: LD_VAR 0 7
29836: PPUSH
29837: CALL_OW 1
29841: ST_TO_ADDR
29842: GO 29810
29844: POP
29845: POP
// end ;
29846: GO 29776
29848: POP
29849: POP
// if not result then
29850: LD_VAR 0 2
29854: NOT
29855: IFFALSE 29859
// exit ;
29857: GO 30007
// mech := result [ 1 ] ;
29859: LD_ADDR_VAR 0 5
29863: PUSH
29864: LD_VAR 0 2
29868: PUSH
29869: LD_INT 1
29871: ARRAY
29872: ST_TO_ADDR
// if result > 1 then
29873: LD_VAR 0 2
29877: PUSH
29878: LD_INT 1
29880: GREATER
29881: IFFALSE 29993
// begin for i = 2 to result do
29883: LD_ADDR_VAR 0 3
29887: PUSH
29888: DOUBLE
29889: LD_INT 2
29891: DEC
29892: ST_TO_ADDR
29893: LD_VAR 0 2
29897: PUSH
29898: FOR_TO
29899: IFFALSE 29991
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29901: LD_ADDR_VAR 0 4
29905: PUSH
29906: LD_VAR 0 2
29910: PUSH
29911: LD_VAR 0 3
29915: ARRAY
29916: PPUSH
29917: LD_INT 3
29919: PPUSH
29920: CALL_OW 259
29924: PUSH
29925: LD_VAR 0 2
29929: PUSH
29930: LD_VAR 0 3
29934: ARRAY
29935: PPUSH
29936: CALL_OW 432
29940: MINUS
29941: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29942: LD_VAR 0 4
29946: PUSH
29947: LD_VAR 0 5
29951: PPUSH
29952: LD_INT 3
29954: PPUSH
29955: CALL_OW 259
29959: PUSH
29960: LD_VAR 0 5
29964: PPUSH
29965: CALL_OW 432
29969: MINUS
29970: GREATEREQUAL
29971: IFFALSE 29989
// mech := result [ i ] ;
29973: LD_ADDR_VAR 0 5
29977: PUSH
29978: LD_VAR 0 2
29982: PUSH
29983: LD_VAR 0 3
29987: ARRAY
29988: ST_TO_ADDR
// end ;
29989: GO 29898
29991: POP
29992: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29993: LD_VAR 0 1
29997: PPUSH
29998: LD_VAR 0 5
30002: PPUSH
30003: CALL_OW 135
// end ;
30007: LD_VAR 0 2
30011: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30012: LD_INT 0
30014: PPUSH
30015: PPUSH
30016: PPUSH
30017: PPUSH
30018: PPUSH
30019: PPUSH
30020: PPUSH
30021: PPUSH
30022: PPUSH
30023: PPUSH
30024: PPUSH
30025: PPUSH
30026: PPUSH
// result := [ ] ;
30027: LD_ADDR_VAR 0 7
30031: PUSH
30032: EMPTY
30033: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30034: LD_VAR 0 1
30038: PPUSH
30039: CALL_OW 266
30043: PUSH
30044: LD_INT 0
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: IN
30054: NOT
30055: IFFALSE 30059
// exit ;
30057: GO 31693
// if name then
30059: LD_VAR 0 3
30063: IFFALSE 30079
// SetBName ( base_dep , name ) ;
30065: LD_VAR 0 1
30069: PPUSH
30070: LD_VAR 0 3
30074: PPUSH
30075: CALL_OW 500
// base := GetBase ( base_dep ) ;
30079: LD_ADDR_VAR 0 15
30083: PUSH
30084: LD_VAR 0 1
30088: PPUSH
30089: CALL_OW 274
30093: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30094: LD_ADDR_VAR 0 16
30098: PUSH
30099: LD_VAR 0 1
30103: PPUSH
30104: CALL_OW 255
30108: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30109: LD_ADDR_VAR 0 17
30113: PUSH
30114: LD_VAR 0 1
30118: PPUSH
30119: CALL_OW 248
30123: ST_TO_ADDR
// if sources then
30124: LD_VAR 0 5
30128: IFFALSE 30175
// for i = 1 to 3 do
30130: LD_ADDR_VAR 0 8
30134: PUSH
30135: DOUBLE
30136: LD_INT 1
30138: DEC
30139: ST_TO_ADDR
30140: LD_INT 3
30142: PUSH
30143: FOR_TO
30144: IFFALSE 30173
// AddResourceType ( base , i , sources [ i ] ) ;
30146: LD_VAR 0 15
30150: PPUSH
30151: LD_VAR 0 8
30155: PPUSH
30156: LD_VAR 0 5
30160: PUSH
30161: LD_VAR 0 8
30165: ARRAY
30166: PPUSH
30167: CALL_OW 276
30171: GO 30143
30173: POP
30174: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30175: LD_ADDR_VAR 0 18
30179: PUSH
30180: LD_VAR 0 15
30184: PPUSH
30185: LD_VAR 0 2
30189: PPUSH
30190: LD_INT 1
30192: PPUSH
30193: CALL 29436 0 3
30197: ST_TO_ADDR
// InitHc ;
30198: CALL_OW 19
// InitUc ;
30202: CALL_OW 18
// uc_side := side ;
30206: LD_ADDR_OWVAR 20
30210: PUSH
30211: LD_VAR 0 16
30215: ST_TO_ADDR
// uc_nation := nation ;
30216: LD_ADDR_OWVAR 21
30220: PUSH
30221: LD_VAR 0 17
30225: ST_TO_ADDR
// if buildings then
30226: LD_VAR 0 18
30230: IFFALSE 31552
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30232: LD_ADDR_VAR 0 19
30236: PUSH
30237: LD_VAR 0 18
30241: PPUSH
30242: LD_INT 2
30244: PUSH
30245: LD_INT 30
30247: PUSH
30248: LD_INT 29
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 30
30257: PUSH
30258: LD_INT 30
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: LIST
30269: PPUSH
30270: CALL_OW 72
30274: ST_TO_ADDR
// if tmp then
30275: LD_VAR 0 19
30279: IFFALSE 30327
// for i in tmp do
30281: LD_ADDR_VAR 0 8
30285: PUSH
30286: LD_VAR 0 19
30290: PUSH
30291: FOR_IN
30292: IFFALSE 30325
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30294: LD_VAR 0 8
30298: PPUSH
30299: CALL_OW 250
30303: PPUSH
30304: LD_VAR 0 8
30308: PPUSH
30309: CALL_OW 251
30313: PPUSH
30314: LD_VAR 0 16
30318: PPUSH
30319: CALL_OW 441
30323: GO 30291
30325: POP
30326: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30327: LD_VAR 0 18
30331: PPUSH
30332: LD_INT 2
30334: PUSH
30335: LD_INT 30
30337: PUSH
30338: LD_INT 32
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 30
30347: PUSH
30348: LD_INT 33
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: LIST
30359: PPUSH
30360: CALL_OW 72
30364: IFFALSE 30452
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30366: LD_ADDR_VAR 0 8
30370: PUSH
30371: LD_VAR 0 18
30375: PPUSH
30376: LD_INT 2
30378: PUSH
30379: LD_INT 30
30381: PUSH
30382: LD_INT 32
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 30
30391: PUSH
30392: LD_INT 33
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: PPUSH
30404: CALL_OW 72
30408: PUSH
30409: FOR_IN
30410: IFFALSE 30450
// begin if not GetBWeapon ( i ) then
30412: LD_VAR 0 8
30416: PPUSH
30417: CALL_OW 269
30421: NOT
30422: IFFALSE 30448
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30424: LD_VAR 0 8
30428: PPUSH
30429: LD_VAR 0 8
30433: PPUSH
30434: LD_VAR 0 2
30438: PPUSH
30439: CALL 31698 0 2
30443: PPUSH
30444: CALL_OW 431
// end ;
30448: GO 30409
30450: POP
30451: POP
// end ; for i = 1 to personel do
30452: LD_ADDR_VAR 0 8
30456: PUSH
30457: DOUBLE
30458: LD_INT 1
30460: DEC
30461: ST_TO_ADDR
30462: LD_VAR 0 6
30466: PUSH
30467: FOR_TO
30468: IFFALSE 31532
// begin if i > 4 then
30470: LD_VAR 0 8
30474: PUSH
30475: LD_INT 4
30477: GREATER
30478: IFFALSE 30482
// break ;
30480: GO 31532
// case i of 1 :
30482: LD_VAR 0 8
30486: PUSH
30487: LD_INT 1
30489: DOUBLE
30490: EQUAL
30491: IFTRUE 30495
30493: GO 30575
30495: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30496: LD_ADDR_VAR 0 12
30500: PUSH
30501: LD_VAR 0 18
30505: PPUSH
30506: LD_INT 22
30508: PUSH
30509: LD_VAR 0 16
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 58
30520: PUSH
30521: EMPTY
30522: LIST
30523: PUSH
30524: LD_INT 2
30526: PUSH
30527: LD_INT 30
30529: PUSH
30530: LD_INT 32
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 30
30539: PUSH
30540: LD_INT 4
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 30
30549: PUSH
30550: LD_INT 5
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: LIST
30567: PPUSH
30568: CALL_OW 72
30572: ST_TO_ADDR
30573: GO 30797
30575: LD_INT 2
30577: DOUBLE
30578: EQUAL
30579: IFTRUE 30583
30581: GO 30645
30583: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30584: LD_ADDR_VAR 0 12
30588: PUSH
30589: LD_VAR 0 18
30593: PPUSH
30594: LD_INT 22
30596: PUSH
30597: LD_VAR 0 16
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 2
30608: PUSH
30609: LD_INT 30
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 30
30621: PUSH
30622: LD_INT 1
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: LIST
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PPUSH
30638: CALL_OW 72
30642: ST_TO_ADDR
30643: GO 30797
30645: LD_INT 3
30647: DOUBLE
30648: EQUAL
30649: IFTRUE 30653
30651: GO 30715
30653: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30654: LD_ADDR_VAR 0 12
30658: PUSH
30659: LD_VAR 0 18
30663: PPUSH
30664: LD_INT 22
30666: PUSH
30667: LD_VAR 0 16
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: LD_INT 30
30681: PUSH
30682: LD_INT 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 30
30691: PUSH
30692: LD_INT 3
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: LIST
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PPUSH
30708: CALL_OW 72
30712: ST_TO_ADDR
30713: GO 30797
30715: LD_INT 4
30717: DOUBLE
30718: EQUAL
30719: IFTRUE 30723
30721: GO 30796
30723: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30724: LD_ADDR_VAR 0 12
30728: PUSH
30729: LD_VAR 0 18
30733: PPUSH
30734: LD_INT 22
30736: PUSH
30737: LD_VAR 0 16
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: LD_INT 30
30751: PUSH
30752: LD_INT 6
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 30
30761: PUSH
30762: LD_INT 7
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 30
30771: PUSH
30772: LD_INT 8
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PPUSH
30789: CALL_OW 72
30793: ST_TO_ADDR
30794: GO 30797
30796: POP
// if i = 1 then
30797: LD_VAR 0 8
30801: PUSH
30802: LD_INT 1
30804: EQUAL
30805: IFFALSE 30916
// begin tmp := [ ] ;
30807: LD_ADDR_VAR 0 19
30811: PUSH
30812: EMPTY
30813: ST_TO_ADDR
// for j in f do
30814: LD_ADDR_VAR 0 9
30818: PUSH
30819: LD_VAR 0 12
30823: PUSH
30824: FOR_IN
30825: IFFALSE 30898
// if GetBType ( j ) = b_bunker then
30827: LD_VAR 0 9
30831: PPUSH
30832: CALL_OW 266
30836: PUSH
30837: LD_INT 32
30839: EQUAL
30840: IFFALSE 30867
// tmp := Insert ( tmp , 1 , j ) else
30842: LD_ADDR_VAR 0 19
30846: PUSH
30847: LD_VAR 0 19
30851: PPUSH
30852: LD_INT 1
30854: PPUSH
30855: LD_VAR 0 9
30859: PPUSH
30860: CALL_OW 2
30864: ST_TO_ADDR
30865: GO 30896
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30867: LD_ADDR_VAR 0 19
30871: PUSH
30872: LD_VAR 0 19
30876: PPUSH
30877: LD_VAR 0 19
30881: PUSH
30882: LD_INT 1
30884: PLUS
30885: PPUSH
30886: LD_VAR 0 9
30890: PPUSH
30891: CALL_OW 2
30895: ST_TO_ADDR
30896: GO 30824
30898: POP
30899: POP
// if tmp then
30900: LD_VAR 0 19
30904: IFFALSE 30916
// f := tmp ;
30906: LD_ADDR_VAR 0 12
30910: PUSH
30911: LD_VAR 0 19
30915: ST_TO_ADDR
// end ; x := personel [ i ] ;
30916: LD_ADDR_VAR 0 13
30920: PUSH
30921: LD_VAR 0 6
30925: PUSH
30926: LD_VAR 0 8
30930: ARRAY
30931: ST_TO_ADDR
// if x = - 1 then
30932: LD_VAR 0 13
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: EQUAL
30941: IFFALSE 31150
// begin for j in f do
30943: LD_ADDR_VAR 0 9
30947: PUSH
30948: LD_VAR 0 12
30952: PUSH
30953: FOR_IN
30954: IFFALSE 31146
// repeat InitHc ;
30956: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30960: LD_VAR 0 9
30964: PPUSH
30965: CALL_OW 266
30969: PUSH
30970: LD_INT 5
30972: EQUAL
30973: IFFALSE 31043
// begin if UnitsInside ( j ) < 3 then
30975: LD_VAR 0 9
30979: PPUSH
30980: CALL_OW 313
30984: PUSH
30985: LD_INT 3
30987: LESS
30988: IFFALSE 31024
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30990: LD_INT 0
30992: PPUSH
30993: LD_INT 5
30995: PUSH
30996: LD_INT 8
30998: PUSH
30999: LD_INT 9
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: PUSH
31007: LD_VAR 0 17
31011: ARRAY
31012: PPUSH
31013: LD_VAR 0 4
31017: PPUSH
31018: CALL_OW 380
31022: GO 31041
// PrepareHuman ( false , i , skill ) ;
31024: LD_INT 0
31026: PPUSH
31027: LD_VAR 0 8
31031: PPUSH
31032: LD_VAR 0 4
31036: PPUSH
31037: CALL_OW 380
// end else
31041: GO 31060
// PrepareHuman ( false , i , skill ) ;
31043: LD_INT 0
31045: PPUSH
31046: LD_VAR 0 8
31050: PPUSH
31051: LD_VAR 0 4
31055: PPUSH
31056: CALL_OW 380
// un := CreateHuman ;
31060: LD_ADDR_VAR 0 14
31064: PUSH
31065: CALL_OW 44
31069: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31070: LD_ADDR_VAR 0 7
31074: PUSH
31075: LD_VAR 0 7
31079: PPUSH
31080: LD_INT 1
31082: PPUSH
31083: LD_VAR 0 14
31087: PPUSH
31088: CALL_OW 2
31092: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31093: LD_VAR 0 14
31097: PPUSH
31098: LD_VAR 0 9
31102: PPUSH
31103: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31107: LD_VAR 0 9
31111: PPUSH
31112: CALL_OW 313
31116: PUSH
31117: LD_INT 6
31119: EQUAL
31120: PUSH
31121: LD_VAR 0 9
31125: PPUSH
31126: CALL_OW 266
31130: PUSH
31131: LD_INT 32
31133: PUSH
31134: LD_INT 31
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: IN
31141: OR
31142: IFFALSE 30956
31144: GO 30953
31146: POP
31147: POP
// end else
31148: GO 31530
// for j = 1 to x do
31150: LD_ADDR_VAR 0 9
31154: PUSH
31155: DOUBLE
31156: LD_INT 1
31158: DEC
31159: ST_TO_ADDR
31160: LD_VAR 0 13
31164: PUSH
31165: FOR_TO
31166: IFFALSE 31528
// begin InitHc ;
31168: CALL_OW 19
// if not f then
31172: LD_VAR 0 12
31176: NOT
31177: IFFALSE 31266
// begin PrepareHuman ( false , i , skill ) ;
31179: LD_INT 0
31181: PPUSH
31182: LD_VAR 0 8
31186: PPUSH
31187: LD_VAR 0 4
31191: PPUSH
31192: CALL_OW 380
// un := CreateHuman ;
31196: LD_ADDR_VAR 0 14
31200: PUSH
31201: CALL_OW 44
31205: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31206: LD_ADDR_VAR 0 7
31210: PUSH
31211: LD_VAR 0 7
31215: PPUSH
31216: LD_INT 1
31218: PPUSH
31219: LD_VAR 0 14
31223: PPUSH
31224: CALL_OW 2
31228: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31229: LD_VAR 0 14
31233: PPUSH
31234: LD_VAR 0 1
31238: PPUSH
31239: CALL_OW 250
31243: PPUSH
31244: LD_VAR 0 1
31248: PPUSH
31249: CALL_OW 251
31253: PPUSH
31254: LD_INT 10
31256: PPUSH
31257: LD_INT 0
31259: PPUSH
31260: CALL_OW 50
// continue ;
31264: GO 31165
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31266: LD_VAR 0 12
31270: PUSH
31271: LD_INT 1
31273: ARRAY
31274: PPUSH
31275: CALL_OW 313
31279: PUSH
31280: LD_VAR 0 12
31284: PUSH
31285: LD_INT 1
31287: ARRAY
31288: PPUSH
31289: CALL_OW 266
31293: PUSH
31294: LD_INT 32
31296: PUSH
31297: LD_INT 31
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: IN
31304: AND
31305: PUSH
31306: LD_VAR 0 12
31310: PUSH
31311: LD_INT 1
31313: ARRAY
31314: PPUSH
31315: CALL_OW 313
31319: PUSH
31320: LD_INT 6
31322: EQUAL
31323: OR
31324: IFFALSE 31344
// f := Delete ( f , 1 ) ;
31326: LD_ADDR_VAR 0 12
31330: PUSH
31331: LD_VAR 0 12
31335: PPUSH
31336: LD_INT 1
31338: PPUSH
31339: CALL_OW 3
31343: ST_TO_ADDR
// if not f then
31344: LD_VAR 0 12
31348: NOT
31349: IFFALSE 31367
// begin x := x + 2 ;
31351: LD_ADDR_VAR 0 13
31355: PUSH
31356: LD_VAR 0 13
31360: PUSH
31361: LD_INT 2
31363: PLUS
31364: ST_TO_ADDR
// continue ;
31365: GO 31165
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31367: LD_VAR 0 12
31371: PUSH
31372: LD_INT 1
31374: ARRAY
31375: PPUSH
31376: CALL_OW 266
31380: PUSH
31381: LD_INT 5
31383: EQUAL
31384: IFFALSE 31458
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31386: LD_VAR 0 12
31390: PUSH
31391: LD_INT 1
31393: ARRAY
31394: PPUSH
31395: CALL_OW 313
31399: PUSH
31400: LD_INT 3
31402: LESS
31403: IFFALSE 31439
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31405: LD_INT 0
31407: PPUSH
31408: LD_INT 5
31410: PUSH
31411: LD_INT 8
31413: PUSH
31414: LD_INT 9
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: LIST
31421: PUSH
31422: LD_VAR 0 17
31426: ARRAY
31427: PPUSH
31428: LD_VAR 0 4
31432: PPUSH
31433: CALL_OW 380
31437: GO 31456
// PrepareHuman ( false , i , skill ) ;
31439: LD_INT 0
31441: PPUSH
31442: LD_VAR 0 8
31446: PPUSH
31447: LD_VAR 0 4
31451: PPUSH
31452: CALL_OW 380
// end else
31456: GO 31475
// PrepareHuman ( false , i , skill ) ;
31458: LD_INT 0
31460: PPUSH
31461: LD_VAR 0 8
31465: PPUSH
31466: LD_VAR 0 4
31470: PPUSH
31471: CALL_OW 380
// un := CreateHuman ;
31475: LD_ADDR_VAR 0 14
31479: PUSH
31480: CALL_OW 44
31484: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31485: LD_ADDR_VAR 0 7
31489: PUSH
31490: LD_VAR 0 7
31494: PPUSH
31495: LD_INT 1
31497: PPUSH
31498: LD_VAR 0 14
31502: PPUSH
31503: CALL_OW 2
31507: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31508: LD_VAR 0 14
31512: PPUSH
31513: LD_VAR 0 12
31517: PUSH
31518: LD_INT 1
31520: ARRAY
31521: PPUSH
31522: CALL_OW 52
// end ;
31526: GO 31165
31528: POP
31529: POP
// end ;
31530: GO 30467
31532: POP
31533: POP
// result := result ^ buildings ;
31534: LD_ADDR_VAR 0 7
31538: PUSH
31539: LD_VAR 0 7
31543: PUSH
31544: LD_VAR 0 18
31548: ADD
31549: ST_TO_ADDR
// end else
31550: GO 31693
// begin for i = 1 to personel do
31552: LD_ADDR_VAR 0 8
31556: PUSH
31557: DOUBLE
31558: LD_INT 1
31560: DEC
31561: ST_TO_ADDR
31562: LD_VAR 0 6
31566: PUSH
31567: FOR_TO
31568: IFFALSE 31691
// begin if i > 4 then
31570: LD_VAR 0 8
31574: PUSH
31575: LD_INT 4
31577: GREATER
31578: IFFALSE 31582
// break ;
31580: GO 31691
// x := personel [ i ] ;
31582: LD_ADDR_VAR 0 13
31586: PUSH
31587: LD_VAR 0 6
31591: PUSH
31592: LD_VAR 0 8
31596: ARRAY
31597: ST_TO_ADDR
// if x = - 1 then
31598: LD_VAR 0 13
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: EQUAL
31607: IFFALSE 31611
// continue ;
31609: GO 31567
// PrepareHuman ( false , i , skill ) ;
31611: LD_INT 0
31613: PPUSH
31614: LD_VAR 0 8
31618: PPUSH
31619: LD_VAR 0 4
31623: PPUSH
31624: CALL_OW 380
// un := CreateHuman ;
31628: LD_ADDR_VAR 0 14
31632: PUSH
31633: CALL_OW 44
31637: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31638: LD_VAR 0 14
31642: PPUSH
31643: LD_VAR 0 1
31647: PPUSH
31648: CALL_OW 250
31652: PPUSH
31653: LD_VAR 0 1
31657: PPUSH
31658: CALL_OW 251
31662: PPUSH
31663: LD_INT 10
31665: PPUSH
31666: LD_INT 0
31668: PPUSH
31669: CALL_OW 50
// result := result ^ un ;
31673: LD_ADDR_VAR 0 7
31677: PUSH
31678: LD_VAR 0 7
31682: PUSH
31683: LD_VAR 0 14
31687: ADD
31688: ST_TO_ADDR
// end ;
31689: GO 31567
31691: POP
31692: POP
// end ; end ;
31693: LD_VAR 0 7
31697: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31698: LD_INT 0
31700: PPUSH
31701: PPUSH
31702: PPUSH
31703: PPUSH
31704: PPUSH
31705: PPUSH
31706: PPUSH
31707: PPUSH
31708: PPUSH
31709: PPUSH
31710: PPUSH
31711: PPUSH
31712: PPUSH
31713: PPUSH
31714: PPUSH
31715: PPUSH
// result := false ;
31716: LD_ADDR_VAR 0 3
31720: PUSH
31721: LD_INT 0
31723: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31724: LD_VAR 0 1
31728: NOT
31729: PUSH
31730: LD_VAR 0 1
31734: PPUSH
31735: CALL_OW 266
31739: PUSH
31740: LD_INT 32
31742: PUSH
31743: LD_INT 33
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: IN
31750: NOT
31751: OR
31752: IFFALSE 31756
// exit ;
31754: GO 32865
// nat := GetNation ( tower ) ;
31756: LD_ADDR_VAR 0 12
31760: PUSH
31761: LD_VAR 0 1
31765: PPUSH
31766: CALL_OW 248
31770: ST_TO_ADDR
// side := GetSide ( tower ) ;
31771: LD_ADDR_VAR 0 16
31775: PUSH
31776: LD_VAR 0 1
31780: PPUSH
31781: CALL_OW 255
31785: ST_TO_ADDR
// x := GetX ( tower ) ;
31786: LD_ADDR_VAR 0 10
31790: PUSH
31791: LD_VAR 0 1
31795: PPUSH
31796: CALL_OW 250
31800: ST_TO_ADDR
// y := GetY ( tower ) ;
31801: LD_ADDR_VAR 0 11
31805: PUSH
31806: LD_VAR 0 1
31810: PPUSH
31811: CALL_OW 251
31815: ST_TO_ADDR
// if not x or not y then
31816: LD_VAR 0 10
31820: NOT
31821: PUSH
31822: LD_VAR 0 11
31826: NOT
31827: OR
31828: IFFALSE 31832
// exit ;
31830: GO 32865
// weapon := 0 ;
31832: LD_ADDR_VAR 0 18
31836: PUSH
31837: LD_INT 0
31839: ST_TO_ADDR
// fac_list := [ ] ;
31840: LD_ADDR_VAR 0 17
31844: PUSH
31845: EMPTY
31846: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31847: LD_ADDR_VAR 0 6
31851: PUSH
31852: LD_VAR 0 1
31856: PPUSH
31857: CALL_OW 274
31861: PPUSH
31862: LD_VAR 0 2
31866: PPUSH
31867: LD_INT 0
31869: PPUSH
31870: CALL 29436 0 3
31874: PPUSH
31875: LD_INT 30
31877: PUSH
31878: LD_INT 3
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PPUSH
31885: CALL_OW 72
31889: ST_TO_ADDR
// if not factories then
31890: LD_VAR 0 6
31894: NOT
31895: IFFALSE 31899
// exit ;
31897: GO 32865
// for i in factories do
31899: LD_ADDR_VAR 0 8
31903: PUSH
31904: LD_VAR 0 6
31908: PUSH
31909: FOR_IN
31910: IFFALSE 31935
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31912: LD_ADDR_VAR 0 17
31916: PUSH
31917: LD_VAR 0 17
31921: PUSH
31922: LD_VAR 0 8
31926: PPUSH
31927: CALL_OW 478
31931: UNION
31932: ST_TO_ADDR
31933: GO 31909
31935: POP
31936: POP
// if not fac_list then
31937: LD_VAR 0 17
31941: NOT
31942: IFFALSE 31946
// exit ;
31944: GO 32865
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31946: LD_ADDR_VAR 0 5
31950: PUSH
31951: LD_INT 4
31953: PUSH
31954: LD_INT 5
31956: PUSH
31957: LD_INT 9
31959: PUSH
31960: LD_INT 10
31962: PUSH
31963: LD_INT 6
31965: PUSH
31966: LD_INT 7
31968: PUSH
31969: LD_INT 11
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 27
31983: PUSH
31984: LD_INT 28
31986: PUSH
31987: LD_INT 26
31989: PUSH
31990: LD_INT 30
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 43
32001: PUSH
32002: LD_INT 44
32004: PUSH
32005: LD_INT 46
32007: PUSH
32008: LD_INT 45
32010: PUSH
32011: LD_INT 47
32013: PUSH
32014: LD_INT 49
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: PUSH
32030: LD_VAR 0 12
32034: ARRAY
32035: ST_TO_ADDR
// list := list isect fac_list ;
32036: LD_ADDR_VAR 0 5
32040: PUSH
32041: LD_VAR 0 5
32045: PUSH
32046: LD_VAR 0 17
32050: ISECT
32051: ST_TO_ADDR
// if not list then
32052: LD_VAR 0 5
32056: NOT
32057: IFFALSE 32061
// exit ;
32059: GO 32865
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32061: LD_VAR 0 12
32065: PUSH
32066: LD_INT 3
32068: EQUAL
32069: PUSH
32070: LD_INT 49
32072: PUSH
32073: LD_VAR 0 5
32077: IN
32078: AND
32079: PUSH
32080: LD_INT 31
32082: PPUSH
32083: LD_VAR 0 16
32087: PPUSH
32088: CALL_OW 321
32092: PUSH
32093: LD_INT 2
32095: EQUAL
32096: AND
32097: IFFALSE 32157
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32099: LD_INT 22
32101: PUSH
32102: LD_VAR 0 16
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 35
32113: PUSH
32114: LD_INT 49
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 91
32123: PUSH
32124: LD_VAR 0 1
32128: PUSH
32129: LD_INT 10
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: LIST
32141: PPUSH
32142: CALL_OW 69
32146: NOT
32147: IFFALSE 32157
// weapon := ru_time_lapser ;
32149: LD_ADDR_VAR 0 18
32153: PUSH
32154: LD_INT 49
32156: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32157: LD_VAR 0 12
32161: PUSH
32162: LD_INT 1
32164: PUSH
32165: LD_INT 2
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: IN
32172: PUSH
32173: LD_INT 11
32175: PUSH
32176: LD_VAR 0 5
32180: IN
32181: PUSH
32182: LD_INT 30
32184: PUSH
32185: LD_VAR 0 5
32189: IN
32190: OR
32191: AND
32192: PUSH
32193: LD_INT 6
32195: PPUSH
32196: LD_VAR 0 16
32200: PPUSH
32201: CALL_OW 321
32205: PUSH
32206: LD_INT 2
32208: EQUAL
32209: AND
32210: IFFALSE 32375
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32212: LD_INT 22
32214: PUSH
32215: LD_VAR 0 16
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 2
32226: PUSH
32227: LD_INT 35
32229: PUSH
32230: LD_INT 11
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 35
32239: PUSH
32240: LD_INT 30
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 91
32254: PUSH
32255: LD_VAR 0 1
32259: PUSH
32260: LD_INT 18
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: LIST
32272: PPUSH
32273: CALL_OW 69
32277: NOT
32278: PUSH
32279: LD_INT 22
32281: PUSH
32282: LD_VAR 0 16
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: LD_INT 30
32296: PUSH
32297: LD_INT 32
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 30
32306: PUSH
32307: LD_INT 33
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 91
32321: PUSH
32322: LD_VAR 0 1
32326: PUSH
32327: LD_INT 12
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: LIST
32339: PUSH
32340: EMPTY
32341: LIST
32342: PPUSH
32343: CALL_OW 69
32347: PUSH
32348: LD_INT 2
32350: GREATER
32351: AND
32352: IFFALSE 32375
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32354: LD_ADDR_VAR 0 18
32358: PUSH
32359: LD_INT 11
32361: PUSH
32362: LD_INT 30
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_VAR 0 12
32373: ARRAY
32374: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32375: LD_VAR 0 18
32379: NOT
32380: PUSH
32381: LD_INT 40
32383: PPUSH
32384: LD_VAR 0 16
32388: PPUSH
32389: CALL_OW 321
32393: PUSH
32394: LD_INT 2
32396: EQUAL
32397: AND
32398: PUSH
32399: LD_INT 7
32401: PUSH
32402: LD_VAR 0 5
32406: IN
32407: PUSH
32408: LD_INT 28
32410: PUSH
32411: LD_VAR 0 5
32415: IN
32416: OR
32417: PUSH
32418: LD_INT 45
32420: PUSH
32421: LD_VAR 0 5
32425: IN
32426: OR
32427: AND
32428: IFFALSE 32682
// begin hex := GetHexInfo ( x , y ) ;
32430: LD_ADDR_VAR 0 4
32434: PUSH
32435: LD_VAR 0 10
32439: PPUSH
32440: LD_VAR 0 11
32444: PPUSH
32445: CALL_OW 546
32449: ST_TO_ADDR
// if hex [ 1 ] then
32450: LD_VAR 0 4
32454: PUSH
32455: LD_INT 1
32457: ARRAY
32458: IFFALSE 32462
// exit ;
32460: GO 32865
// height := hex [ 2 ] ;
32462: LD_ADDR_VAR 0 15
32466: PUSH
32467: LD_VAR 0 4
32471: PUSH
32472: LD_INT 2
32474: ARRAY
32475: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32476: LD_ADDR_VAR 0 14
32480: PUSH
32481: LD_INT 0
32483: PUSH
32484: LD_INT 2
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: LD_INT 5
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: ST_TO_ADDR
// for i in tmp do
32499: LD_ADDR_VAR 0 8
32503: PUSH
32504: LD_VAR 0 14
32508: PUSH
32509: FOR_IN
32510: IFFALSE 32680
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32512: LD_ADDR_VAR 0 9
32516: PUSH
32517: LD_VAR 0 10
32521: PPUSH
32522: LD_VAR 0 8
32526: PPUSH
32527: LD_INT 5
32529: PPUSH
32530: CALL_OW 272
32534: PUSH
32535: LD_VAR 0 11
32539: PPUSH
32540: LD_VAR 0 8
32544: PPUSH
32545: LD_INT 5
32547: PPUSH
32548: CALL_OW 273
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32557: LD_VAR 0 9
32561: PUSH
32562: LD_INT 1
32564: ARRAY
32565: PPUSH
32566: LD_VAR 0 9
32570: PUSH
32571: LD_INT 2
32573: ARRAY
32574: PPUSH
32575: CALL_OW 488
32579: IFFALSE 32678
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32581: LD_ADDR_VAR 0 4
32585: PUSH
32586: LD_VAR 0 9
32590: PUSH
32591: LD_INT 1
32593: ARRAY
32594: PPUSH
32595: LD_VAR 0 9
32599: PUSH
32600: LD_INT 2
32602: ARRAY
32603: PPUSH
32604: CALL_OW 546
32608: ST_TO_ADDR
// if hex [ 1 ] then
32609: LD_VAR 0 4
32613: PUSH
32614: LD_INT 1
32616: ARRAY
32617: IFFALSE 32621
// continue ;
32619: GO 32509
// h := hex [ 2 ] ;
32621: LD_ADDR_VAR 0 13
32625: PUSH
32626: LD_VAR 0 4
32630: PUSH
32631: LD_INT 2
32633: ARRAY
32634: ST_TO_ADDR
// if h + 7 < height then
32635: LD_VAR 0 13
32639: PUSH
32640: LD_INT 7
32642: PLUS
32643: PUSH
32644: LD_VAR 0 15
32648: LESS
32649: IFFALSE 32678
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32651: LD_ADDR_VAR 0 18
32655: PUSH
32656: LD_INT 7
32658: PUSH
32659: LD_INT 28
32661: PUSH
32662: LD_INT 45
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: LIST
32669: PUSH
32670: LD_VAR 0 12
32674: ARRAY
32675: ST_TO_ADDR
// break ;
32676: GO 32680
// end ; end ; end ;
32678: GO 32509
32680: POP
32681: POP
// end ; if not weapon then
32682: LD_VAR 0 18
32686: NOT
32687: IFFALSE 32747
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32689: LD_ADDR_VAR 0 5
32693: PUSH
32694: LD_VAR 0 5
32698: PUSH
32699: LD_INT 11
32701: PUSH
32702: LD_INT 30
32704: PUSH
32705: LD_INT 49
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: DIFF
32713: ST_TO_ADDR
// if not list then
32714: LD_VAR 0 5
32718: NOT
32719: IFFALSE 32723
// exit ;
32721: GO 32865
// weapon := list [ rand ( 1 , list ) ] ;
32723: LD_ADDR_VAR 0 18
32727: PUSH
32728: LD_VAR 0 5
32732: PUSH
32733: LD_INT 1
32735: PPUSH
32736: LD_VAR 0 5
32740: PPUSH
32741: CALL_OW 12
32745: ARRAY
32746: ST_TO_ADDR
// end ; if weapon then
32747: LD_VAR 0 18
32751: IFFALSE 32865
// begin tmp := CostOfWeapon ( weapon ) ;
32753: LD_ADDR_VAR 0 14
32757: PUSH
32758: LD_VAR 0 18
32762: PPUSH
32763: CALL_OW 451
32767: ST_TO_ADDR
// j := GetBase ( tower ) ;
32768: LD_ADDR_VAR 0 9
32772: PUSH
32773: LD_VAR 0 1
32777: PPUSH
32778: CALL_OW 274
32782: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32783: LD_VAR 0 9
32787: PPUSH
32788: LD_INT 1
32790: PPUSH
32791: CALL_OW 275
32795: PUSH
32796: LD_VAR 0 14
32800: PUSH
32801: LD_INT 1
32803: ARRAY
32804: GREATEREQUAL
32805: PUSH
32806: LD_VAR 0 9
32810: PPUSH
32811: LD_INT 2
32813: PPUSH
32814: CALL_OW 275
32818: PUSH
32819: LD_VAR 0 14
32823: PUSH
32824: LD_INT 2
32826: ARRAY
32827: GREATEREQUAL
32828: AND
32829: PUSH
32830: LD_VAR 0 9
32834: PPUSH
32835: LD_INT 3
32837: PPUSH
32838: CALL_OW 275
32842: PUSH
32843: LD_VAR 0 14
32847: PUSH
32848: LD_INT 3
32850: ARRAY
32851: GREATEREQUAL
32852: AND
32853: IFFALSE 32865
// result := weapon ;
32855: LD_ADDR_VAR 0 3
32859: PUSH
32860: LD_VAR 0 18
32864: ST_TO_ADDR
// end ; end ;
32865: LD_VAR 0 3
32869: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32870: LD_INT 0
32872: PPUSH
32873: PPUSH
// result := true ;
32874: LD_ADDR_VAR 0 3
32878: PUSH
32879: LD_INT 1
32881: ST_TO_ADDR
// if array1 = array2 then
32882: LD_VAR 0 1
32886: PUSH
32887: LD_VAR 0 2
32891: EQUAL
32892: IFFALSE 32952
// begin for i = 1 to array1 do
32894: LD_ADDR_VAR 0 4
32898: PUSH
32899: DOUBLE
32900: LD_INT 1
32902: DEC
32903: ST_TO_ADDR
32904: LD_VAR 0 1
32908: PUSH
32909: FOR_TO
32910: IFFALSE 32948
// if array1 [ i ] <> array2 [ i ] then
32912: LD_VAR 0 1
32916: PUSH
32917: LD_VAR 0 4
32921: ARRAY
32922: PUSH
32923: LD_VAR 0 2
32927: PUSH
32928: LD_VAR 0 4
32932: ARRAY
32933: NONEQUAL
32934: IFFALSE 32946
// begin result := false ;
32936: LD_ADDR_VAR 0 3
32940: PUSH
32941: LD_INT 0
32943: ST_TO_ADDR
// break ;
32944: GO 32948
// end ;
32946: GO 32909
32948: POP
32949: POP
// end else
32950: GO 32960
// result := false ;
32952: LD_ADDR_VAR 0 3
32956: PUSH
32957: LD_INT 0
32959: ST_TO_ADDR
// end ;
32960: LD_VAR 0 3
32964: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32965: LD_INT 0
32967: PPUSH
32968: PPUSH
// if not array1 or not array2 then
32969: LD_VAR 0 1
32973: NOT
32974: PUSH
32975: LD_VAR 0 2
32979: NOT
32980: OR
32981: IFFALSE 32985
// exit ;
32983: GO 33049
// result := true ;
32985: LD_ADDR_VAR 0 3
32989: PUSH
32990: LD_INT 1
32992: ST_TO_ADDR
// for i = 1 to array1 do
32993: LD_ADDR_VAR 0 4
32997: PUSH
32998: DOUBLE
32999: LD_INT 1
33001: DEC
33002: ST_TO_ADDR
33003: LD_VAR 0 1
33007: PUSH
33008: FOR_TO
33009: IFFALSE 33047
// if array1 [ i ] <> array2 [ i ] then
33011: LD_VAR 0 1
33015: PUSH
33016: LD_VAR 0 4
33020: ARRAY
33021: PUSH
33022: LD_VAR 0 2
33026: PUSH
33027: LD_VAR 0 4
33031: ARRAY
33032: NONEQUAL
33033: IFFALSE 33045
// begin result := false ;
33035: LD_ADDR_VAR 0 3
33039: PUSH
33040: LD_INT 0
33042: ST_TO_ADDR
// break ;
33043: GO 33047
// end ;
33045: GO 33008
33047: POP
33048: POP
// end ;
33049: LD_VAR 0 3
33053: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33054: LD_INT 0
33056: PPUSH
33057: PPUSH
33058: PPUSH
// pom := GetBase ( fac ) ;
33059: LD_ADDR_VAR 0 5
33063: PUSH
33064: LD_VAR 0 1
33068: PPUSH
33069: CALL_OW 274
33073: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33074: LD_ADDR_VAR 0 4
33078: PUSH
33079: LD_VAR 0 2
33083: PUSH
33084: LD_INT 1
33086: ARRAY
33087: PPUSH
33088: LD_VAR 0 2
33092: PUSH
33093: LD_INT 2
33095: ARRAY
33096: PPUSH
33097: LD_VAR 0 2
33101: PUSH
33102: LD_INT 3
33104: ARRAY
33105: PPUSH
33106: LD_VAR 0 2
33110: PUSH
33111: LD_INT 4
33113: ARRAY
33114: PPUSH
33115: CALL_OW 449
33119: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33120: LD_ADDR_VAR 0 3
33124: PUSH
33125: LD_VAR 0 5
33129: PPUSH
33130: LD_INT 1
33132: PPUSH
33133: CALL_OW 275
33137: PUSH
33138: LD_VAR 0 4
33142: PUSH
33143: LD_INT 1
33145: ARRAY
33146: GREATEREQUAL
33147: PUSH
33148: LD_VAR 0 5
33152: PPUSH
33153: LD_INT 2
33155: PPUSH
33156: CALL_OW 275
33160: PUSH
33161: LD_VAR 0 4
33165: PUSH
33166: LD_INT 2
33168: ARRAY
33169: GREATEREQUAL
33170: AND
33171: PUSH
33172: LD_VAR 0 5
33176: PPUSH
33177: LD_INT 3
33179: PPUSH
33180: CALL_OW 275
33184: PUSH
33185: LD_VAR 0 4
33189: PUSH
33190: LD_INT 3
33192: ARRAY
33193: GREATEREQUAL
33194: AND
33195: ST_TO_ADDR
// end ;
33196: LD_VAR 0 3
33200: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33201: LD_INT 0
33203: PPUSH
33204: PPUSH
33205: PPUSH
33206: PPUSH
// pom := GetBase ( building ) ;
33207: LD_ADDR_VAR 0 3
33211: PUSH
33212: LD_VAR 0 1
33216: PPUSH
33217: CALL_OW 274
33221: ST_TO_ADDR
// if not pom then
33222: LD_VAR 0 3
33226: NOT
33227: IFFALSE 33231
// exit ;
33229: GO 33401
// btype := GetBType ( building ) ;
33231: LD_ADDR_VAR 0 5
33235: PUSH
33236: LD_VAR 0 1
33240: PPUSH
33241: CALL_OW 266
33245: ST_TO_ADDR
// if btype = b_armoury then
33246: LD_VAR 0 5
33250: PUSH
33251: LD_INT 4
33253: EQUAL
33254: IFFALSE 33264
// btype := b_barracks ;
33256: LD_ADDR_VAR 0 5
33260: PUSH
33261: LD_INT 5
33263: ST_TO_ADDR
// if btype = b_depot then
33264: LD_VAR 0 5
33268: PUSH
33269: LD_INT 0
33271: EQUAL
33272: IFFALSE 33282
// btype := b_warehouse ;
33274: LD_ADDR_VAR 0 5
33278: PUSH
33279: LD_INT 1
33281: ST_TO_ADDR
// if btype = b_workshop then
33282: LD_VAR 0 5
33286: PUSH
33287: LD_INT 2
33289: EQUAL
33290: IFFALSE 33300
// btype := b_factory ;
33292: LD_ADDR_VAR 0 5
33296: PUSH
33297: LD_INT 3
33299: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33300: LD_ADDR_VAR 0 4
33304: PUSH
33305: LD_VAR 0 5
33309: PPUSH
33310: LD_VAR 0 1
33314: PPUSH
33315: CALL_OW 248
33319: PPUSH
33320: CALL_OW 450
33324: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33325: LD_ADDR_VAR 0 2
33329: PUSH
33330: LD_VAR 0 3
33334: PPUSH
33335: LD_INT 1
33337: PPUSH
33338: CALL_OW 275
33342: PUSH
33343: LD_VAR 0 4
33347: PUSH
33348: LD_INT 1
33350: ARRAY
33351: GREATEREQUAL
33352: PUSH
33353: LD_VAR 0 3
33357: PPUSH
33358: LD_INT 2
33360: PPUSH
33361: CALL_OW 275
33365: PUSH
33366: LD_VAR 0 4
33370: PUSH
33371: LD_INT 2
33373: ARRAY
33374: GREATEREQUAL
33375: AND
33376: PUSH
33377: LD_VAR 0 3
33381: PPUSH
33382: LD_INT 3
33384: PPUSH
33385: CALL_OW 275
33389: PUSH
33390: LD_VAR 0 4
33394: PUSH
33395: LD_INT 3
33397: ARRAY
33398: GREATEREQUAL
33399: AND
33400: ST_TO_ADDR
// end ;
33401: LD_VAR 0 2
33405: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33406: LD_INT 0
33408: PPUSH
33409: PPUSH
33410: PPUSH
// pom := GetBase ( building ) ;
33411: LD_ADDR_VAR 0 4
33415: PUSH
33416: LD_VAR 0 1
33420: PPUSH
33421: CALL_OW 274
33425: ST_TO_ADDR
// if not pom then
33426: LD_VAR 0 4
33430: NOT
33431: IFFALSE 33435
// exit ;
33433: GO 33536
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33435: LD_ADDR_VAR 0 5
33439: PUSH
33440: LD_VAR 0 2
33444: PPUSH
33445: LD_VAR 0 1
33449: PPUSH
33450: CALL_OW 248
33454: PPUSH
33455: CALL_OW 450
33459: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33460: LD_ADDR_VAR 0 3
33464: PUSH
33465: LD_VAR 0 4
33469: PPUSH
33470: LD_INT 1
33472: PPUSH
33473: CALL_OW 275
33477: PUSH
33478: LD_VAR 0 5
33482: PUSH
33483: LD_INT 1
33485: ARRAY
33486: GREATEREQUAL
33487: PUSH
33488: LD_VAR 0 4
33492: PPUSH
33493: LD_INT 2
33495: PPUSH
33496: CALL_OW 275
33500: PUSH
33501: LD_VAR 0 5
33505: PUSH
33506: LD_INT 2
33508: ARRAY
33509: GREATEREQUAL
33510: AND
33511: PUSH
33512: LD_VAR 0 4
33516: PPUSH
33517: LD_INT 3
33519: PPUSH
33520: CALL_OW 275
33524: PUSH
33525: LD_VAR 0 5
33529: PUSH
33530: LD_INT 3
33532: ARRAY
33533: GREATEREQUAL
33534: AND
33535: ST_TO_ADDR
// end ;
33536: LD_VAR 0 3
33540: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33541: LD_INT 0
33543: PPUSH
33544: PPUSH
33545: PPUSH
33546: PPUSH
33547: PPUSH
33548: PPUSH
33549: PPUSH
33550: PPUSH
33551: PPUSH
33552: PPUSH
33553: PPUSH
// result := false ;
33554: LD_ADDR_VAR 0 8
33558: PUSH
33559: LD_INT 0
33561: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33562: LD_VAR 0 5
33566: NOT
33567: PUSH
33568: LD_VAR 0 1
33572: NOT
33573: OR
33574: PUSH
33575: LD_VAR 0 2
33579: NOT
33580: OR
33581: PUSH
33582: LD_VAR 0 3
33586: NOT
33587: OR
33588: IFFALSE 33592
// exit ;
33590: GO 34406
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33592: LD_ADDR_VAR 0 14
33596: PUSH
33597: LD_VAR 0 1
33601: PPUSH
33602: LD_VAR 0 2
33606: PPUSH
33607: LD_VAR 0 3
33611: PPUSH
33612: LD_VAR 0 4
33616: PPUSH
33617: LD_VAR 0 5
33621: PUSH
33622: LD_INT 1
33624: ARRAY
33625: PPUSH
33626: CALL_OW 248
33630: PPUSH
33631: LD_INT 0
33633: PPUSH
33634: CALL 35639 0 6
33638: ST_TO_ADDR
// if not hexes then
33639: LD_VAR 0 14
33643: NOT
33644: IFFALSE 33648
// exit ;
33646: GO 34406
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33648: LD_ADDR_VAR 0 17
33652: PUSH
33653: LD_VAR 0 5
33657: PPUSH
33658: LD_INT 22
33660: PUSH
33661: LD_VAR 0 13
33665: PPUSH
33666: CALL_OW 255
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 2
33677: PUSH
33678: LD_INT 30
33680: PUSH
33681: LD_INT 0
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 30
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PPUSH
33707: CALL_OW 72
33711: ST_TO_ADDR
// for i = 1 to hexes do
33712: LD_ADDR_VAR 0 9
33716: PUSH
33717: DOUBLE
33718: LD_INT 1
33720: DEC
33721: ST_TO_ADDR
33722: LD_VAR 0 14
33726: PUSH
33727: FOR_TO
33728: IFFALSE 34404
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33730: LD_ADDR_VAR 0 13
33734: PUSH
33735: LD_VAR 0 14
33739: PUSH
33740: LD_VAR 0 9
33744: ARRAY
33745: PUSH
33746: LD_INT 1
33748: ARRAY
33749: PPUSH
33750: LD_VAR 0 14
33754: PUSH
33755: LD_VAR 0 9
33759: ARRAY
33760: PUSH
33761: LD_INT 2
33763: ARRAY
33764: PPUSH
33765: CALL_OW 428
33769: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33770: LD_VAR 0 14
33774: PUSH
33775: LD_VAR 0 9
33779: ARRAY
33780: PUSH
33781: LD_INT 1
33783: ARRAY
33784: PPUSH
33785: LD_VAR 0 14
33789: PUSH
33790: LD_VAR 0 9
33794: ARRAY
33795: PUSH
33796: LD_INT 2
33798: ARRAY
33799: PPUSH
33800: CALL_OW 351
33804: PUSH
33805: LD_VAR 0 14
33809: PUSH
33810: LD_VAR 0 9
33814: ARRAY
33815: PUSH
33816: LD_INT 1
33818: ARRAY
33819: PPUSH
33820: LD_VAR 0 14
33824: PUSH
33825: LD_VAR 0 9
33829: ARRAY
33830: PUSH
33831: LD_INT 2
33833: ARRAY
33834: PPUSH
33835: CALL_OW 488
33839: NOT
33840: OR
33841: PUSH
33842: LD_VAR 0 13
33846: PPUSH
33847: CALL_OW 247
33851: PUSH
33852: LD_INT 3
33854: EQUAL
33855: OR
33856: IFFALSE 33862
// exit ;
33858: POP
33859: POP
33860: GO 34406
// if not tmp then
33862: LD_VAR 0 13
33866: NOT
33867: IFFALSE 33871
// continue ;
33869: GO 33727
// result := true ;
33871: LD_ADDR_VAR 0 8
33875: PUSH
33876: LD_INT 1
33878: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33879: LD_VAR 0 6
33883: PUSH
33884: LD_VAR 0 13
33888: PPUSH
33889: CALL_OW 247
33893: PUSH
33894: LD_INT 2
33896: EQUAL
33897: AND
33898: PUSH
33899: LD_VAR 0 13
33903: PPUSH
33904: CALL_OW 263
33908: PUSH
33909: LD_INT 1
33911: EQUAL
33912: AND
33913: IFFALSE 34077
// begin if IsDrivenBy ( tmp ) then
33915: LD_VAR 0 13
33919: PPUSH
33920: CALL_OW 311
33924: IFFALSE 33928
// continue ;
33926: GO 33727
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33928: LD_VAR 0 6
33932: PPUSH
33933: LD_INT 3
33935: PUSH
33936: LD_INT 60
33938: PUSH
33939: EMPTY
33940: LIST
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 3
33948: PUSH
33949: LD_INT 55
33951: PUSH
33952: EMPTY
33953: LIST
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PPUSH
33963: CALL_OW 72
33967: IFFALSE 34075
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33969: LD_ADDR_VAR 0 18
33973: PUSH
33974: LD_VAR 0 6
33978: PPUSH
33979: LD_INT 3
33981: PUSH
33982: LD_INT 60
33984: PUSH
33985: EMPTY
33986: LIST
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 3
33994: PUSH
33995: LD_INT 55
33997: PUSH
33998: EMPTY
33999: LIST
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PPUSH
34009: CALL_OW 72
34013: PUSH
34014: LD_INT 1
34016: ARRAY
34017: ST_TO_ADDR
// if IsInUnit ( driver ) then
34018: LD_VAR 0 18
34022: PPUSH
34023: CALL_OW 310
34027: IFFALSE 34038
// ComExit ( driver ) ;
34029: LD_VAR 0 18
34033: PPUSH
34034: CALL 59400 0 1
// AddComEnterUnit ( driver , tmp ) ;
34038: LD_VAR 0 18
34042: PPUSH
34043: LD_VAR 0 13
34047: PPUSH
34048: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34052: LD_VAR 0 18
34056: PPUSH
34057: LD_VAR 0 7
34061: PPUSH
34062: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34066: LD_VAR 0 18
34070: PPUSH
34071: CALL_OW 181
// end ; continue ;
34075: GO 33727
// end ; if not cleaners or not tmp in cleaners then
34077: LD_VAR 0 6
34081: NOT
34082: PUSH
34083: LD_VAR 0 13
34087: PUSH
34088: LD_VAR 0 6
34092: IN
34093: NOT
34094: OR
34095: IFFALSE 34402
// begin if dep then
34097: LD_VAR 0 17
34101: IFFALSE 34237
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34103: LD_ADDR_VAR 0 16
34107: PUSH
34108: LD_VAR 0 17
34112: PUSH
34113: LD_INT 1
34115: ARRAY
34116: PPUSH
34117: CALL_OW 250
34121: PPUSH
34122: LD_VAR 0 17
34126: PUSH
34127: LD_INT 1
34129: ARRAY
34130: PPUSH
34131: CALL_OW 254
34135: PPUSH
34136: LD_INT 5
34138: PPUSH
34139: CALL_OW 272
34143: PUSH
34144: LD_VAR 0 17
34148: PUSH
34149: LD_INT 1
34151: ARRAY
34152: PPUSH
34153: CALL_OW 251
34157: PPUSH
34158: LD_VAR 0 17
34162: PUSH
34163: LD_INT 1
34165: ARRAY
34166: PPUSH
34167: CALL_OW 254
34171: PPUSH
34172: LD_INT 5
34174: PPUSH
34175: CALL_OW 273
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34184: LD_VAR 0 16
34188: PUSH
34189: LD_INT 1
34191: ARRAY
34192: PPUSH
34193: LD_VAR 0 16
34197: PUSH
34198: LD_INT 2
34200: ARRAY
34201: PPUSH
34202: CALL_OW 488
34206: IFFALSE 34237
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34208: LD_VAR 0 13
34212: PPUSH
34213: LD_VAR 0 16
34217: PUSH
34218: LD_INT 1
34220: ARRAY
34221: PPUSH
34222: LD_VAR 0 16
34226: PUSH
34227: LD_INT 2
34229: ARRAY
34230: PPUSH
34231: CALL_OW 111
// continue ;
34235: GO 33727
// end ; end ; r := GetDir ( tmp ) ;
34237: LD_ADDR_VAR 0 15
34241: PUSH
34242: LD_VAR 0 13
34246: PPUSH
34247: CALL_OW 254
34251: ST_TO_ADDR
// if r = 5 then
34252: LD_VAR 0 15
34256: PUSH
34257: LD_INT 5
34259: EQUAL
34260: IFFALSE 34270
// r := 0 ;
34262: LD_ADDR_VAR 0 15
34266: PUSH
34267: LD_INT 0
34269: ST_TO_ADDR
// for j = r to 5 do
34270: LD_ADDR_VAR 0 10
34274: PUSH
34275: DOUBLE
34276: LD_VAR 0 15
34280: DEC
34281: ST_TO_ADDR
34282: LD_INT 5
34284: PUSH
34285: FOR_TO
34286: IFFALSE 34400
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34288: LD_ADDR_VAR 0 11
34292: PUSH
34293: LD_VAR 0 13
34297: PPUSH
34298: CALL_OW 250
34302: PPUSH
34303: LD_VAR 0 10
34307: PPUSH
34308: LD_INT 2
34310: PPUSH
34311: CALL_OW 272
34315: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34316: LD_ADDR_VAR 0 12
34320: PUSH
34321: LD_VAR 0 13
34325: PPUSH
34326: CALL_OW 251
34330: PPUSH
34331: LD_VAR 0 10
34335: PPUSH
34336: LD_INT 2
34338: PPUSH
34339: CALL_OW 273
34343: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34344: LD_VAR 0 11
34348: PPUSH
34349: LD_VAR 0 12
34353: PPUSH
34354: CALL_OW 488
34358: PUSH
34359: LD_VAR 0 11
34363: PPUSH
34364: LD_VAR 0 12
34368: PPUSH
34369: CALL_OW 428
34373: NOT
34374: AND
34375: IFFALSE 34398
// begin ComMoveXY ( tmp , _x , _y ) ;
34377: LD_VAR 0 13
34381: PPUSH
34382: LD_VAR 0 11
34386: PPUSH
34387: LD_VAR 0 12
34391: PPUSH
34392: CALL_OW 111
// break ;
34396: GO 34400
// end ; end ;
34398: GO 34285
34400: POP
34401: POP
// end ; end ;
34402: GO 33727
34404: POP
34405: POP
// end ;
34406: LD_VAR 0 8
34410: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34411: LD_INT 0
34413: PPUSH
// result := true ;
34414: LD_ADDR_VAR 0 3
34418: PUSH
34419: LD_INT 1
34421: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34422: LD_VAR 0 2
34426: PUSH
34427: LD_INT 24
34429: DOUBLE
34430: EQUAL
34431: IFTRUE 34441
34433: LD_INT 33
34435: DOUBLE
34436: EQUAL
34437: IFTRUE 34441
34439: GO 34466
34441: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_INT 32
34449: PPUSH
34450: LD_VAR 0 1
34454: PPUSH
34455: CALL_OW 321
34459: PUSH
34460: LD_INT 2
34462: EQUAL
34463: ST_TO_ADDR
34464: GO 34782
34466: LD_INT 20
34468: DOUBLE
34469: EQUAL
34470: IFTRUE 34474
34472: GO 34499
34474: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34475: LD_ADDR_VAR 0 3
34479: PUSH
34480: LD_INT 6
34482: PPUSH
34483: LD_VAR 0 1
34487: PPUSH
34488: CALL_OW 321
34492: PUSH
34493: LD_INT 2
34495: EQUAL
34496: ST_TO_ADDR
34497: GO 34782
34499: LD_INT 22
34501: DOUBLE
34502: EQUAL
34503: IFTRUE 34513
34505: LD_INT 36
34507: DOUBLE
34508: EQUAL
34509: IFTRUE 34513
34511: GO 34538
34513: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34514: LD_ADDR_VAR 0 3
34518: PUSH
34519: LD_INT 15
34521: PPUSH
34522: LD_VAR 0 1
34526: PPUSH
34527: CALL_OW 321
34531: PUSH
34532: LD_INT 2
34534: EQUAL
34535: ST_TO_ADDR
34536: GO 34782
34538: LD_INT 30
34540: DOUBLE
34541: EQUAL
34542: IFTRUE 34546
34544: GO 34571
34546: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34547: LD_ADDR_VAR 0 3
34551: PUSH
34552: LD_INT 20
34554: PPUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL_OW 321
34564: PUSH
34565: LD_INT 2
34567: EQUAL
34568: ST_TO_ADDR
34569: GO 34782
34571: LD_INT 28
34573: DOUBLE
34574: EQUAL
34575: IFTRUE 34585
34577: LD_INT 21
34579: DOUBLE
34580: EQUAL
34581: IFTRUE 34585
34583: GO 34610
34585: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34586: LD_ADDR_VAR 0 3
34590: PUSH
34591: LD_INT 21
34593: PPUSH
34594: LD_VAR 0 1
34598: PPUSH
34599: CALL_OW 321
34603: PUSH
34604: LD_INT 2
34606: EQUAL
34607: ST_TO_ADDR
34608: GO 34782
34610: LD_INT 16
34612: DOUBLE
34613: EQUAL
34614: IFTRUE 34618
34616: GO 34643
34618: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34619: LD_ADDR_VAR 0 3
34623: PUSH
34624: LD_INT 84
34626: PPUSH
34627: LD_VAR 0 1
34631: PPUSH
34632: CALL_OW 321
34636: PUSH
34637: LD_INT 2
34639: EQUAL
34640: ST_TO_ADDR
34641: GO 34782
34643: LD_INT 19
34645: DOUBLE
34646: EQUAL
34647: IFTRUE 34657
34649: LD_INT 23
34651: DOUBLE
34652: EQUAL
34653: IFTRUE 34657
34655: GO 34682
34657: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34658: LD_ADDR_VAR 0 3
34662: PUSH
34663: LD_INT 83
34665: PPUSH
34666: LD_VAR 0 1
34670: PPUSH
34671: CALL_OW 321
34675: PUSH
34676: LD_INT 2
34678: EQUAL
34679: ST_TO_ADDR
34680: GO 34782
34682: LD_INT 17
34684: DOUBLE
34685: EQUAL
34686: IFTRUE 34690
34688: GO 34715
34690: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34691: LD_ADDR_VAR 0 3
34695: PUSH
34696: LD_INT 39
34698: PPUSH
34699: LD_VAR 0 1
34703: PPUSH
34704: CALL_OW 321
34708: PUSH
34709: LD_INT 2
34711: EQUAL
34712: ST_TO_ADDR
34713: GO 34782
34715: LD_INT 18
34717: DOUBLE
34718: EQUAL
34719: IFTRUE 34723
34721: GO 34748
34723: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34724: LD_ADDR_VAR 0 3
34728: PUSH
34729: LD_INT 40
34731: PPUSH
34732: LD_VAR 0 1
34736: PPUSH
34737: CALL_OW 321
34741: PUSH
34742: LD_INT 2
34744: EQUAL
34745: ST_TO_ADDR
34746: GO 34782
34748: LD_INT 27
34750: DOUBLE
34751: EQUAL
34752: IFTRUE 34756
34754: GO 34781
34756: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34757: LD_ADDR_VAR 0 3
34761: PUSH
34762: LD_INT 35
34764: PPUSH
34765: LD_VAR 0 1
34769: PPUSH
34770: CALL_OW 321
34774: PUSH
34775: LD_INT 2
34777: EQUAL
34778: ST_TO_ADDR
34779: GO 34782
34781: POP
// end ;
34782: LD_VAR 0 3
34786: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34787: LD_INT 0
34789: PPUSH
34790: PPUSH
34791: PPUSH
34792: PPUSH
34793: PPUSH
34794: PPUSH
34795: PPUSH
34796: PPUSH
34797: PPUSH
34798: PPUSH
34799: PPUSH
// result := false ;
34800: LD_ADDR_VAR 0 6
34804: PUSH
34805: LD_INT 0
34807: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34808: LD_VAR 0 1
34812: NOT
34813: PUSH
34814: LD_VAR 0 1
34818: PPUSH
34819: CALL_OW 266
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: IN
34834: NOT
34835: OR
34836: PUSH
34837: LD_VAR 0 2
34841: NOT
34842: OR
34843: PUSH
34844: LD_VAR 0 5
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 3
34860: PUSH
34861: LD_INT 4
34863: PUSH
34864: LD_INT 5
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: IN
34875: NOT
34876: OR
34877: PUSH
34878: LD_VAR 0 3
34882: PPUSH
34883: LD_VAR 0 4
34887: PPUSH
34888: CALL_OW 488
34892: NOT
34893: OR
34894: IFFALSE 34898
// exit ;
34896: GO 35634
// side := GetSide ( depot ) ;
34898: LD_ADDR_VAR 0 9
34902: PUSH
34903: LD_VAR 0 1
34907: PPUSH
34908: CALL_OW 255
34912: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34913: LD_VAR 0 9
34917: PPUSH
34918: LD_VAR 0 2
34922: PPUSH
34923: CALL 34411 0 2
34927: NOT
34928: IFFALSE 34932
// exit ;
34930: GO 35634
// pom := GetBase ( depot ) ;
34932: LD_ADDR_VAR 0 10
34936: PUSH
34937: LD_VAR 0 1
34941: PPUSH
34942: CALL_OW 274
34946: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34947: LD_ADDR_VAR 0 11
34951: PUSH
34952: LD_VAR 0 2
34956: PPUSH
34957: LD_VAR 0 1
34961: PPUSH
34962: CALL_OW 248
34966: PPUSH
34967: CALL_OW 450
34971: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34972: LD_VAR 0 10
34976: PPUSH
34977: LD_INT 1
34979: PPUSH
34980: CALL_OW 275
34984: PUSH
34985: LD_VAR 0 11
34989: PUSH
34990: LD_INT 1
34992: ARRAY
34993: GREATEREQUAL
34994: PUSH
34995: LD_VAR 0 10
34999: PPUSH
35000: LD_INT 2
35002: PPUSH
35003: CALL_OW 275
35007: PUSH
35008: LD_VAR 0 11
35012: PUSH
35013: LD_INT 2
35015: ARRAY
35016: GREATEREQUAL
35017: AND
35018: PUSH
35019: LD_VAR 0 10
35023: PPUSH
35024: LD_INT 3
35026: PPUSH
35027: CALL_OW 275
35031: PUSH
35032: LD_VAR 0 11
35036: PUSH
35037: LD_INT 3
35039: ARRAY
35040: GREATEREQUAL
35041: AND
35042: NOT
35043: IFFALSE 35047
// exit ;
35045: GO 35634
// if GetBType ( depot ) = b_depot then
35047: LD_VAR 0 1
35051: PPUSH
35052: CALL_OW 266
35056: PUSH
35057: LD_INT 0
35059: EQUAL
35060: IFFALSE 35072
// dist := 28 else
35062: LD_ADDR_VAR 0 14
35066: PUSH
35067: LD_INT 28
35069: ST_TO_ADDR
35070: GO 35080
// dist := 36 ;
35072: LD_ADDR_VAR 0 14
35076: PUSH
35077: LD_INT 36
35079: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35080: LD_VAR 0 1
35084: PPUSH
35085: LD_VAR 0 3
35089: PPUSH
35090: LD_VAR 0 4
35094: PPUSH
35095: CALL_OW 297
35099: PUSH
35100: LD_VAR 0 14
35104: GREATER
35105: IFFALSE 35109
// exit ;
35107: GO 35634
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35109: LD_ADDR_VAR 0 12
35113: PUSH
35114: LD_VAR 0 2
35118: PPUSH
35119: LD_VAR 0 3
35123: PPUSH
35124: LD_VAR 0 4
35128: PPUSH
35129: LD_VAR 0 5
35133: PPUSH
35134: LD_VAR 0 1
35138: PPUSH
35139: CALL_OW 248
35143: PPUSH
35144: LD_INT 0
35146: PPUSH
35147: CALL 35639 0 6
35151: ST_TO_ADDR
// if not hexes then
35152: LD_VAR 0 12
35156: NOT
35157: IFFALSE 35161
// exit ;
35159: GO 35634
// hex := GetHexInfo ( x , y ) ;
35161: LD_ADDR_VAR 0 15
35165: PUSH
35166: LD_VAR 0 3
35170: PPUSH
35171: LD_VAR 0 4
35175: PPUSH
35176: CALL_OW 546
35180: ST_TO_ADDR
// if hex [ 1 ] then
35181: LD_VAR 0 15
35185: PUSH
35186: LD_INT 1
35188: ARRAY
35189: IFFALSE 35193
// exit ;
35191: GO 35634
// height := hex [ 2 ] ;
35193: LD_ADDR_VAR 0 13
35197: PUSH
35198: LD_VAR 0 15
35202: PUSH
35203: LD_INT 2
35205: ARRAY
35206: ST_TO_ADDR
// for i = 1 to hexes do
35207: LD_ADDR_VAR 0 7
35211: PUSH
35212: DOUBLE
35213: LD_INT 1
35215: DEC
35216: ST_TO_ADDR
35217: LD_VAR 0 12
35221: PUSH
35222: FOR_TO
35223: IFFALSE 35553
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35225: LD_VAR 0 12
35229: PUSH
35230: LD_VAR 0 7
35234: ARRAY
35235: PUSH
35236: LD_INT 1
35238: ARRAY
35239: PPUSH
35240: LD_VAR 0 12
35244: PUSH
35245: LD_VAR 0 7
35249: ARRAY
35250: PUSH
35251: LD_INT 2
35253: ARRAY
35254: PPUSH
35255: CALL_OW 488
35259: NOT
35260: PUSH
35261: LD_VAR 0 12
35265: PUSH
35266: LD_VAR 0 7
35270: ARRAY
35271: PUSH
35272: LD_INT 1
35274: ARRAY
35275: PPUSH
35276: LD_VAR 0 12
35280: PUSH
35281: LD_VAR 0 7
35285: ARRAY
35286: PUSH
35287: LD_INT 2
35289: ARRAY
35290: PPUSH
35291: CALL_OW 428
35295: PUSH
35296: LD_INT 0
35298: GREATER
35299: OR
35300: PUSH
35301: LD_VAR 0 12
35305: PUSH
35306: LD_VAR 0 7
35310: ARRAY
35311: PUSH
35312: LD_INT 1
35314: ARRAY
35315: PPUSH
35316: LD_VAR 0 12
35320: PUSH
35321: LD_VAR 0 7
35325: ARRAY
35326: PUSH
35327: LD_INT 2
35329: ARRAY
35330: PPUSH
35331: CALL_OW 351
35335: OR
35336: IFFALSE 35342
// exit ;
35338: POP
35339: POP
35340: GO 35634
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35342: LD_ADDR_VAR 0 8
35346: PUSH
35347: LD_VAR 0 12
35351: PUSH
35352: LD_VAR 0 7
35356: ARRAY
35357: PUSH
35358: LD_INT 1
35360: ARRAY
35361: PPUSH
35362: LD_VAR 0 12
35366: PUSH
35367: LD_VAR 0 7
35371: ARRAY
35372: PUSH
35373: LD_INT 2
35375: ARRAY
35376: PPUSH
35377: CALL_OW 546
35381: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35382: LD_VAR 0 8
35386: PUSH
35387: LD_INT 1
35389: ARRAY
35390: PUSH
35391: LD_VAR 0 8
35395: PUSH
35396: LD_INT 2
35398: ARRAY
35399: PUSH
35400: LD_VAR 0 13
35404: PUSH
35405: LD_INT 2
35407: PLUS
35408: GREATER
35409: OR
35410: PUSH
35411: LD_VAR 0 8
35415: PUSH
35416: LD_INT 2
35418: ARRAY
35419: PUSH
35420: LD_VAR 0 13
35424: PUSH
35425: LD_INT 2
35427: MINUS
35428: LESS
35429: OR
35430: PUSH
35431: LD_VAR 0 8
35435: PUSH
35436: LD_INT 3
35438: ARRAY
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: LD_INT 8
35445: PUSH
35446: LD_INT 9
35448: PUSH
35449: LD_INT 10
35451: PUSH
35452: LD_INT 11
35454: PUSH
35455: LD_INT 12
35457: PUSH
35458: LD_INT 13
35460: PUSH
35461: LD_INT 16
35463: PUSH
35464: LD_INT 17
35466: PUSH
35467: LD_INT 18
35469: PUSH
35470: LD_INT 19
35472: PUSH
35473: LD_INT 20
35475: PUSH
35476: LD_INT 21
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: IN
35494: NOT
35495: OR
35496: PUSH
35497: LD_VAR 0 8
35501: PUSH
35502: LD_INT 5
35504: ARRAY
35505: NOT
35506: OR
35507: PUSH
35508: LD_VAR 0 8
35512: PUSH
35513: LD_INT 6
35515: ARRAY
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: LD_INT 7
35525: PUSH
35526: LD_INT 9
35528: PUSH
35529: LD_INT 10
35531: PUSH
35532: LD_INT 11
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: IN
35543: NOT
35544: OR
35545: IFFALSE 35551
// exit ;
35547: POP
35548: POP
35549: GO 35634
// end ;
35551: GO 35222
35553: POP
35554: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35555: LD_VAR 0 9
35559: PPUSH
35560: LD_VAR 0 3
35564: PPUSH
35565: LD_VAR 0 4
35569: PPUSH
35570: LD_INT 20
35572: PPUSH
35573: CALL 27586 0 4
35577: PUSH
35578: LD_INT 4
35580: ARRAY
35581: IFFALSE 35585
// exit ;
35583: GO 35634
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35585: LD_VAR 0 2
35589: PUSH
35590: LD_INT 29
35592: PUSH
35593: LD_INT 30
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: IN
35600: PUSH
35601: LD_VAR 0 3
35605: PPUSH
35606: LD_VAR 0 4
35610: PPUSH
35611: LD_VAR 0 9
35615: PPUSH
35616: CALL_OW 440
35620: NOT
35621: AND
35622: IFFALSE 35626
// exit ;
35624: GO 35634
// result := true ;
35626: LD_ADDR_VAR 0 6
35630: PUSH
35631: LD_INT 1
35633: ST_TO_ADDR
// end ;
35634: LD_VAR 0 6
35638: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35639: LD_INT 0
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
35645: PPUSH
35646: PPUSH
35647: PPUSH
35648: PPUSH
35649: PPUSH
35650: PPUSH
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
35655: PPUSH
35656: PPUSH
35657: PPUSH
35658: PPUSH
35659: PPUSH
35660: PPUSH
35661: PPUSH
35662: PPUSH
35663: PPUSH
35664: PPUSH
35665: PPUSH
35666: PPUSH
35667: PPUSH
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
35674: PPUSH
35675: PPUSH
35676: PPUSH
35677: PPUSH
35678: PPUSH
35679: PPUSH
35680: PPUSH
35681: PPUSH
35682: PPUSH
35683: PPUSH
35684: PPUSH
35685: PPUSH
35686: PPUSH
35687: PPUSH
35688: PPUSH
35689: PPUSH
35690: PPUSH
35691: PPUSH
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
// result = [ ] ;
35699: LD_ADDR_VAR 0 7
35703: PUSH
35704: EMPTY
35705: ST_TO_ADDR
// temp_list = [ ] ;
35706: LD_ADDR_VAR 0 9
35710: PUSH
35711: EMPTY
35712: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35713: LD_VAR 0 4
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: LD_INT 3
35729: PUSH
35730: LD_INT 4
35732: PUSH
35733: LD_INT 5
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: IN
35744: NOT
35745: PUSH
35746: LD_VAR 0 1
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: LD_INT 1
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: IN
35761: PUSH
35762: LD_VAR 0 5
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: LD_INT 2
35772: PUSH
35773: LD_INT 3
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: IN
35781: NOT
35782: AND
35783: OR
35784: IFFALSE 35788
// exit ;
35786: GO 54179
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35788: LD_VAR 0 1
35792: PUSH
35793: LD_INT 6
35795: PUSH
35796: LD_INT 7
35798: PUSH
35799: LD_INT 8
35801: PUSH
35802: LD_INT 13
35804: PUSH
35805: LD_INT 12
35807: PUSH
35808: LD_INT 15
35810: PUSH
35811: LD_INT 11
35813: PUSH
35814: LD_INT 14
35816: PUSH
35817: LD_INT 10
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: IN
35831: IFFALSE 35841
// btype = b_lab ;
35833: LD_ADDR_VAR 0 1
35837: PUSH
35838: LD_INT 6
35840: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35841: LD_VAR 0 6
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: IN
35860: NOT
35861: PUSH
35862: LD_VAR 0 1
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: LD_INT 2
35875: PUSH
35876: LD_INT 3
35878: PUSH
35879: LD_INT 6
35881: PUSH
35882: LD_INT 36
35884: PUSH
35885: LD_INT 4
35887: PUSH
35888: LD_INT 5
35890: PUSH
35891: LD_INT 31
35893: PUSH
35894: LD_INT 32
35896: PUSH
35897: LD_INT 33
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: IN
35913: NOT
35914: PUSH
35915: LD_VAR 0 6
35919: PUSH
35920: LD_INT 1
35922: EQUAL
35923: AND
35924: OR
35925: PUSH
35926: LD_VAR 0 1
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: LD_INT 3
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: IN
35941: NOT
35942: PUSH
35943: LD_VAR 0 6
35947: PUSH
35948: LD_INT 2
35950: EQUAL
35951: AND
35952: OR
35953: IFFALSE 35963
// mode = 0 ;
35955: LD_ADDR_VAR 0 6
35959: PUSH
35960: LD_INT 0
35962: ST_TO_ADDR
// case mode of 0 :
35963: LD_VAR 0 6
35967: PUSH
35968: LD_INT 0
35970: DOUBLE
35971: EQUAL
35972: IFTRUE 35976
35974: GO 47429
35976: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35977: LD_ADDR_VAR 0 11
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: LD_INT 3
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 3
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: LD_INT 2
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36170: LD_ADDR_VAR 0 12
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 0
36187: PUSH
36188: LD_INT 1
36190: NEG
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: LD_INT 1
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 2
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 2
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 2
36293: NEG
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 2
36304: NEG
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 2
36316: NEG
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 3
36327: NEG
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 3
36338: NEG
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36366: LD_ADDR_VAR 0 13
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: LD_INT 1
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 1
36435: NEG
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: LD_INT 2
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 2
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 2
36469: PUSH
36470: LD_INT 2
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: LD_INT 2
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 2
36489: NEG
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 2
36501: NEG
36502: PUSH
36503: LD_INT 2
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 2
36513: NEG
36514: PUSH
36515: LD_INT 3
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 3
36525: NEG
36526: PUSH
36527: LD_INT 2
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 3
36537: NEG
36538: PUSH
36539: LD_INT 3
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36565: LD_ADDR_VAR 0 14
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: LD_INT 1
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: LD_INT 2
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 2
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: LD_INT 3
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 3
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: LD_INT 2
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36761: LD_ADDR_VAR 0 15
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: LD_INT 1
36781: NEG
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 1
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: NEG
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: NEG
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 2
36895: NEG
36896: PUSH
36897: LD_INT 1
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 3
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 3
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36954: LD_ADDR_VAR 0 16
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: LD_INT 1
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: PUSH
37037: LD_INT 2
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 2
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 2
37057: PUSH
37058: LD_INT 2
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: LD_INT 2
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 2
37089: NEG
37090: PUSH
37091: LD_INT 2
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 3
37101: PUSH
37102: LD_INT 2
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 3
37111: PUSH
37112: LD_INT 3
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: LD_INT 3
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37147: LD_ADDR_VAR 0 17
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: LD_INT 1
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: LD_INT 2
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: LD_INT 2
37243: NEG
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: LD_INT 2
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: LD_INT 2
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 1
37312: NEG
37313: PUSH
37314: LD_INT 1
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 2
37323: NEG
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 2
37334: NEG
37335: PUSH
37336: LD_INT 1
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 2
37346: NEG
37347: PUSH
37348: LD_INT 2
37350: NEG
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37377: LD_ADDR_VAR 0 18
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: NEG
37459: PUSH
37460: LD_INT 2
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: LD_INT 2
37473: NEG
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 0
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 2
37564: NEG
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 2
37576: NEG
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37607: LD_ADDR_VAR 0 19
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: LD_INT 1
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: LD_INT 2
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: LD_INT 2
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 2
37783: NEG
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 2
37794: NEG
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 2
37806: NEG
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37837: LD_ADDR_VAR 0 20
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: LD_INT 1
37857: NEG
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: NEG
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 1
37906: NEG
37907: PUSH
37908: LD_INT 1
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: LD_INT 2
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: LD_INT 2
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 2
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: LD_INT 2
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: LD_INT 2
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: LD_INT 2
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 2
38013: NEG
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 2
38036: NEG
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38067: LD_ADDR_VAR 0 21
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: LD_INT 2
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 2
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: LD_INT 2
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 1
38232: NEG
38233: PUSH
38234: LD_INT 1
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 2
38243: NEG
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 2
38254: NEG
38255: PUSH
38256: LD_INT 1
38258: NEG
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 2
38266: NEG
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38297: LD_ADDR_VAR 0 22
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 1
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 0
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: NEG
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: LD_INT 2
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 2
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 2
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: LD_INT 2
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: LD_INT 1
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 2
38484: NEG
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 2
38496: NEG
38497: PUSH
38498: LD_INT 2
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38527: LD_ADDR_VAR 0 23
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: NEG
38609: PUSH
38610: LD_INT 2
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: LD_INT 2
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 1
38634: NEG
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 2
38662: PUSH
38663: LD_INT 2
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: LD_INT 2
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 2
38714: NEG
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 2
38726: NEG
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: LD_INT 3
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: LD_INT 3
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: LD_INT 2
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38807: LD_ADDR_VAR 0 24
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: LD_INT 1
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 0
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: LD_INT 2
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: LD_INT 1
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 2
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: PUSH
38943: LD_INT 2
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: LD_INT 2
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 2
38983: NEG
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: LD_INT 2
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 3
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: LD_INT 2
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39083: LD_ADDR_VAR 0 25
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: LD_INT 1
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: NEG
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 2
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 2
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 2
39218: PUSH
39219: LD_INT 2
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 2
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 2
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 2
39259: NEG
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 2
39270: NEG
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 2
39282: NEG
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 3
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 3
39304: PUSH
39305: LD_INT 2
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: LD_INT 3
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 3
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39357: LD_ADDR_VAR 0 26
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: LD_INT 0
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: LD_INT 2
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: LD_INT 2
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: LD_INT 1
39464: NEG
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 2
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 2
39492: PUSH
39493: LD_INT 2
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 2
39533: NEG
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 2
39544: NEG
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 2
39556: NEG
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: LD_INT 3
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: LD_INT 3
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39633: LD_ADDR_VAR 0 27
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: LD_INT 2
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 2
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 2
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: PUSH
39779: LD_INT 2
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: LD_INT 2
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 2
39809: NEG
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 2
39820: NEG
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 2
39832: NEG
39833: PUSH
39834: LD_INT 2
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: NEG
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 3
39866: NEG
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 3
39878: NEG
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39913: LD_ADDR_VAR 0 28
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: LD_INT 2
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 2
40124: NEG
40125: PUSH
40126: LD_INT 3
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: LD_INT 3
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 3
40148: NEG
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 3
40160: NEG
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40195: LD_ADDR_VAR 0 29
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 2
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 2
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 2
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: LD_INT 2
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: NEG
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: LD_INT 3
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 2
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 3
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 3
40439: NEG
40440: PUSH
40441: LD_INT 2
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40474: LD_ADDR_VAR 0 30
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: LD_INT 2
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 2
40609: PUSH
40610: LD_INT 2
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: NEG
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: LD_INT 3
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 3
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 2
40696: PUSH
40697: LD_INT 3
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 2
40706: NEG
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 3
40717: NEG
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40752: LD_ADDR_VAR 0 31
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: LD_INT 2
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 2
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: LD_INT 1
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 2
40929: NEG
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 2
40941: NEG
40942: PUSH
40943: LD_INT 3
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 3
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 3
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: LD_INT 2
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 3
40995: NEG
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41030: LD_ADDR_VAR 0 32
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 2
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 2
41196: NEG
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: LD_INT 3
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 3
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: LD_INT 3
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 3
41273: NEG
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41308: LD_ADDR_VAR 0 33
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 2
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: LD_INT 3
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 3
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: LD_INT 3
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 3
41552: NEG
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41587: LD_ADDR_VAR 0 34
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: LD_INT 2
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: LD_INT 2
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: NEG
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: LD_INT 3
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 2
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 3
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 2
41821: NEG
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 3
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41867: LD_ADDR_VAR 0 35
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41979: LD_ADDR_VAR 0 36
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42091: LD_ADDR_VAR 0 37
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: NEG
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42203: LD_ADDR_VAR 0 38
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42315: LD_ADDR_VAR 0 39
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: LD_INT 2
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42427: LD_ADDR_VAR 0 40
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42539: LD_ADDR_VAR 0 41
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 2
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: NEG
42730: PUSH
42731: LD_INT 3
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 3
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 3
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: LD_INT 3
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: LD_INT 3
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 3
42813: NEG
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 3
42824: NEG
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 3
42836: NEG
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 3
42848: NEG
42849: PUSH
42850: LD_INT 3
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42889: LD_ADDR_VAR 0 42
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: LD_INT 2
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: NEG
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: LD_INT 2
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: LD_INT 3
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 3
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 3
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 3
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: LD_INT 3
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 3
43186: NEG
43187: PUSH
43188: LD_INT 2
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 3
43198: NEG
43199: PUSH
43200: LD_INT 3
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43239: LD_ADDR_VAR 0 43
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: LD_INT 3
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 3
43443: NEG
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 3
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 3
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 3
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 3
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 3
43535: NEG
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 3
43546: NEG
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43587: LD_ADDR_VAR 0 44
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: LD_INT 3
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 3
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 3
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: LD_INT 3
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: LD_INT 3
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 3
43861: NEG
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 3
43872: NEG
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 3
43884: NEG
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 3
43896: NEG
43897: PUSH
43898: LD_INT 3
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43937: LD_ADDR_VAR 0 45
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: NEG
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 2
44127: NEG
44128: PUSH
44129: LD_INT 3
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 3
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 3
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 3
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 3
44183: PUSH
44184: LD_INT 3
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: LD_INT 3
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: LD_INT 3
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 3
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 3
44234: NEG
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 3
44246: NEG
44247: PUSH
44248: LD_INT 3
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44287: LD_ADDR_VAR 0 46
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: NEG
44477: PUSH
44478: LD_INT 3
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 3
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 3
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 3
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 3
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 3
44583: NEG
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 3
44594: NEG
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44635: LD_ADDR_VAR 0 47
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44786: LD_ADDR_VAR 0 48
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44933: LD_ADDR_VAR 0 49
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: LD_INT 2
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45077: LD_ADDR_VAR 0 50
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45221: LD_ADDR_VAR 0 51
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: NEG
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45368: LD_ADDR_VAR 0 52
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45519: LD_ADDR_VAR 0 53
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45749: LD_ADDR_VAR 0 54
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45979: LD_ADDR_VAR 0 55
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46209: LD_ADDR_VAR 0 56
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46439: LD_ADDR_VAR 0 57
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 2
46638: NEG
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46669: LD_ADDR_VAR 0 58
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46899: LD_ADDR_VAR 0 59
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46987: LD_ADDR_VAR 0 60
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47075: LD_ADDR_VAR 0 61
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47163: LD_ADDR_VAR 0 62
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47251: LD_ADDR_VAR 0 63
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47339: LD_ADDR_VAR 0 64
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: ST_TO_ADDR
// end ; 1 :
47427: GO 53324
47429: LD_INT 1
47431: DOUBLE
47432: EQUAL
47433: IFTRUE 47437
47435: GO 50060
47437: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47438: LD_ADDR_VAR 0 11
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: LD_INT 3
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: LD_INT 3
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47482: LD_ADDR_VAR 0 12
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 3
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: LIST
47522: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47523: LD_ADDR_VAR 0 13
47527: PUSH
47528: LD_INT 3
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 3
47540: PUSH
47541: LD_INT 3
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 3
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: LIST
47562: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47563: LD_ADDR_VAR 0 14
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47604: LD_ADDR_VAR 0 15
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: NEG
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 3
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: LIST
47647: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47648: LD_ADDR_VAR 0 16
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: LD_INT 3
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 3
47667: NEG
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 3
47679: NEG
47680: PUSH
47681: LD_INT 3
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: LIST
47693: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47694: LD_ADDR_VAR 0 17
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 3
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 3
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: LIST
47737: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47738: LD_ADDR_VAR 0 18
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 3
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: LIST
47778: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47779: LD_ADDR_VAR 0 19
47783: PUSH
47784: LD_INT 3
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: LD_INT 3
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: LD_INT 3
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: LIST
47818: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47819: LD_ADDR_VAR 0 20
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: LD_INT 3
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: LIST
47859: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47860: LD_ADDR_VAR 0 21
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 3
47878: NEG
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 3
47889: NEG
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47904: LD_ADDR_VAR 0 22
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: LD_INT 3
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 3
47923: NEG
47924: PUSH
47925: LD_INT 2
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 3
47935: NEG
47936: PUSH
47937: LD_INT 3
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: LIST
47949: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47950: LD_ADDR_VAR 0 23
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 3
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: LD_INT 4
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 3
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47994: LD_ADDR_VAR 0 24
47998: PUSH
47999: LD_INT 3
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 3
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 4
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48035: LD_ADDR_VAR 0 25
48039: PUSH
48040: LD_INT 3
48042: PUSH
48043: LD_INT 3
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 4
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 3
48062: PUSH
48063: LD_INT 4
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: LIST
48074: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48075: LD_ADDR_VAR 0 26
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 3
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 4
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: LD_INT 3
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: LIST
48115: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48116: LD_ADDR_VAR 0 27
48120: PUSH
48121: LD_INT 3
48123: NEG
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 3
48134: NEG
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 4
48145: NEG
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: LIST
48159: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48160: LD_ADDR_VAR 0 28
48164: PUSH
48165: LD_INT 3
48167: NEG
48168: PUSH
48169: LD_INT 3
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 3
48179: NEG
48180: PUSH
48181: LD_INT 4
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 4
48191: NEG
48192: PUSH
48193: LD_INT 3
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: LIST
48205: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48206: LD_ADDR_VAR 0 29
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: LD_INT 3
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 3
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 4
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 4
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 3
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 5
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: LD_INT 5
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 4
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 6
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 6
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 5
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48361: LD_ADDR_VAR 0 30
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 3
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 3
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 3
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 4
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 4
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 4
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 5
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 5
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 5
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 6
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 6
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48504: LD_ADDR_VAR 0 31
48508: PUSH
48509: LD_INT 3
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 3
48521: PUSH
48522: LD_INT 3
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: PUSH
48532: LD_INT 3
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 4
48541: PUSH
48542: LD_INT 3
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 4
48551: PUSH
48552: LD_INT 4
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 3
48561: PUSH
48562: LD_INT 4
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 5
48571: PUSH
48572: LD_INT 4
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 5
48581: PUSH
48582: LD_INT 5
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 4
48591: PUSH
48592: LD_INT 5
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 6
48601: PUSH
48602: LD_INT 5
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 6
48611: PUSH
48612: LD_INT 6
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 5
48621: PUSH
48622: LD_INT 6
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48643: LD_ADDR_VAR 0 32
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 3
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: LD_INT 4
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 4
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 3
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 5
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 5
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 4
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: LD_INT 6
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: LD_INT 6
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 5
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48786: LD_ADDR_VAR 0 33
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 3
48804: NEG
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 3
48815: NEG
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 3
48827: NEG
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 4
48838: NEG
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 4
48849: NEG
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 4
48861: NEG
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 5
48872: NEG
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 5
48883: NEG
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 5
48895: NEG
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 6
48906: NEG
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 6
48917: NEG
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48941: LD_ADDR_VAR 0 34
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: LD_INT 3
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 3
48960: NEG
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 3
48972: NEG
48973: PUSH
48974: LD_INT 3
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 3
48984: NEG
48985: PUSH
48986: LD_INT 4
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 4
48996: NEG
48997: PUSH
48998: LD_INT 3
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 4
49008: NEG
49009: PUSH
49010: LD_INT 4
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 4
49020: NEG
49021: PUSH
49022: LD_INT 5
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 5
49032: NEG
49033: PUSH
49034: LD_INT 4
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 5
49044: NEG
49045: PUSH
49046: LD_INT 5
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 5
49056: NEG
49057: PUSH
49058: LD_INT 6
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 6
49068: NEG
49069: PUSH
49070: LD_INT 5
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 6
49080: NEG
49081: PUSH
49082: LD_INT 6
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49104: LD_ADDR_VAR 0 41
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 3
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: LIST
49147: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49148: LD_ADDR_VAR 0 42
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 3
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: LIST
49188: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49189: LD_ADDR_VAR 0 43
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 3
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: LD_INT 3
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49229: LD_ADDR_VAR 0 44
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 3
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: LIST
49269: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49270: LD_ADDR_VAR 0 45
49274: PUSH
49275: LD_INT 2
49277: NEG
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 3
49299: NEG
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: LIST
49313: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49314: LD_ADDR_VAR 0 46
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: LD_INT 3
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49360: LD_ADDR_VAR 0 47
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 3
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: LD_INT 3
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49393: LD_ADDR_VAR 0 48
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49424: LD_ADDR_VAR 0 49
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49453: LD_ADDR_VAR 0 50
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49482: LD_ADDR_VAR 0 51
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49513: LD_ADDR_VAR 0 52
49517: PUSH
49518: LD_INT 3
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 3
49532: NEG
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49546: LD_ADDR_VAR 0 53
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: LD_INT 3
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 3
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: LD_INT 2
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49590: LD_ADDR_VAR 0 54
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 3
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: LIST
49630: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49631: LD_ADDR_VAR 0 55
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 3
49648: PUSH
49649: LD_INT 3
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: LD_INT 3
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: LIST
49670: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49671: LD_ADDR_VAR 0 56
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 3
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: LD_INT 3
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: LIST
49711: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49712: LD_ADDR_VAR 0 57
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 3
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: LIST
49755: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49756: LD_ADDR_VAR 0 58
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: LD_INT 3
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 3
49775: NEG
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: LD_INT 3
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: LIST
49801: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49802: LD_ADDR_VAR 0 59
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: LIST
49845: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49846: LD_ADDR_VAR 0 60
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: LIST
49886: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49887: LD_ADDR_VAR 0 61
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49927: LD_ADDR_VAR 0 62
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: LIST
49967: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49968: LD_ADDR_VAR 0 63
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50012: LD_ADDR_VAR 0 64
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: NEG
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: LIST
50057: ST_TO_ADDR
// end ; 2 :
50058: GO 53324
50060: LD_INT 2
50062: DOUBLE
50063: EQUAL
50064: IFTRUE 50068
50066: GO 53323
50068: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50069: LD_ADDR_VAR 0 29
50073: PUSH
50074: LD_INT 4
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 4
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 5
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 5
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 4
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 3
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 3
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 3
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 5
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: PUSH
50170: LD_INT 3
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 3
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 4
50189: PUSH
50190: LD_INT 3
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 4
50199: PUSH
50200: LD_INT 4
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: LD_INT 4
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 4
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 4
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 4
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 3
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 4
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 5
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 5
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 4
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 3
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: PUSH
50332: LD_INT 5
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: LD_INT 3
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 3
50352: NEG
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 4
50408: NEG
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 4
50419: NEG
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 4
50431: NEG
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 4
50454: NEG
50455: PUSH
50456: LD_INT 4
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 4
50466: NEG
50467: PUSH
50468: LD_INT 5
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 3
50478: NEG
50479: PUSH
50480: LD_INT 4
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: LD_INT 3
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 4
50502: NEG
50503: PUSH
50504: LD_INT 3
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 5
50514: NEG
50515: PUSH
50516: LD_INT 4
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 5
50526: NEG
50527: PUSH
50528: LD_INT 5
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 3
50538: NEG
50539: PUSH
50540: LD_INT 5
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 5
50550: NEG
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50607: LD_ADDR_VAR 0 30
50611: PUSH
50612: LD_INT 4
50614: PUSH
50615: LD_INT 4
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 4
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 5
50634: PUSH
50635: LD_INT 4
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 5
50644: PUSH
50645: LD_INT 5
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 4
50654: PUSH
50655: LD_INT 5
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 3
50664: PUSH
50665: LD_INT 4
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 3
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 5
50684: PUSH
50685: LD_INT 3
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 3
50694: PUSH
50695: LD_INT 5
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 3
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 4
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 4
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: LD_INT 4
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 4
50797: NEG
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 4
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 3
50820: NEG
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 3
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 4
50842: NEG
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 5
50853: NEG
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 5
50864: NEG
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 5
50876: NEG
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 3
50888: NEG
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 3
50899: NEG
50900: PUSH
50901: LD_INT 3
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 3
50911: NEG
50912: PUSH
50913: LD_INT 4
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: LD_INT 3
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 3
50947: NEG
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 4
50959: NEG
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 4
50971: NEG
50972: PUSH
50973: LD_INT 4
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: LD_INT 4
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 4
50995: NEG
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 4
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 5
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 4
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 3
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 3
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 4
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 5
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 2
51097: NEG
51098: PUSH
51099: LD_INT 5
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51154: LD_ADDR_VAR 0 31
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: LD_INT 4
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 3
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 4
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: LD_INT 5
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: LD_INT 5
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 4
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 3
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: LD_INT 5
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: LD_INT 3
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 3
51254: NEG
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 3
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 3
51299: NEG
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 4
51310: NEG
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 4
51321: NEG
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 4
51333: NEG
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 4
51356: NEG
51357: PUSH
51358: LD_INT 4
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 4
51368: NEG
51369: PUSH
51370: LD_INT 5
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 3
51380: NEG
51381: PUSH
51382: LD_INT 4
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 3
51392: NEG
51393: PUSH
51394: LD_INT 3
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 4
51404: NEG
51405: PUSH
51406: LD_INT 3
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 5
51416: NEG
51417: PUSH
51418: LD_INT 4
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 5
51428: NEG
51429: PUSH
51430: LD_INT 5
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: NEG
51441: PUSH
51442: LD_INT 5
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 5
51452: NEG
51453: PUSH
51454: LD_INT 3
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 3
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 4
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 3
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 4
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: LD_INT 4
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 4
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 4
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 5
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 5
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 4
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 3
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 5
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51704: LD_ADDR_VAR 0 32
51708: PUSH
51709: LD_INT 4
51711: NEG
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 4
51722: NEG
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 3
51734: NEG
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 4
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 5
51767: NEG
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 5
51778: NEG
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 5
51790: NEG
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: LD_INT 3
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 3
51825: NEG
51826: PUSH
51827: LD_INT 4
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: LD_INT 3
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: NEG
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 4
51873: NEG
51874: PUSH
51875: LD_INT 3
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 4
51885: NEG
51886: PUSH
51887: LD_INT 4
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: LD_INT 4
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 4
51909: NEG
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 4
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 5
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: LD_INT 4
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: LD_INT 3
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 3
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 4
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 5
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: LD_INT 3
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: LD_INT 5
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 3
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 4
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 4
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 3
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 2
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 4
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 4
52116: PUSH
52117: LD_INT 4
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 4
52126: PUSH
52127: LD_INT 3
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 5
52136: PUSH
52137: LD_INT 4
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 5
52146: PUSH
52147: LD_INT 5
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 4
52156: PUSH
52157: LD_INT 5
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 3
52166: PUSH
52167: LD_INT 4
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 3
52176: PUSH
52177: LD_INT 3
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 5
52186: PUSH
52187: LD_INT 3
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 3
52196: PUSH
52197: LD_INT 5
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52251: LD_ADDR_VAR 0 33
52255: PUSH
52256: LD_INT 4
52258: NEG
52259: PUSH
52260: LD_INT 4
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 4
52270: NEG
52271: PUSH
52272: LD_INT 5
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 3
52282: NEG
52283: PUSH
52284: LD_INT 4
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 4
52306: NEG
52307: PUSH
52308: LD_INT 3
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 5
52318: NEG
52319: PUSH
52320: LD_INT 4
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 5
52330: NEG
52331: PUSH
52332: LD_INT 5
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 3
52342: NEG
52343: PUSH
52344: LD_INT 5
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 5
52354: NEG
52355: PUSH
52356: LD_INT 3
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: LD_INT 3
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 4
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 3
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 4
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: LD_INT 4
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 4
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 4
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 5
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 5
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 4
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 3
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 3
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 3
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 5
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 4
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 4
52591: PUSH
52592: LD_INT 4
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: LD_INT 4
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 4
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: LD_INT 4
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 4
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 4
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 5
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 5
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 4
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: LD_INT 3
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: LD_INT 5
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52789: LD_ADDR_VAR 0 34
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 4
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 5
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 4
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 3
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: LD_INT 3
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 4
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 5
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 3
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 5
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 3
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 3
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 4
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 4
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 2
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 4
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 4
52991: PUSH
52992: LD_INT 4
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 4
53001: PUSH
53002: LD_INT 3
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 5
53011: PUSH
53012: LD_INT 4
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 5
53021: PUSH
53022: LD_INT 5
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 4
53031: PUSH
53032: LD_INT 5
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: LD_INT 4
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: PUSH
53052: LD_INT 3
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 5
53061: PUSH
53062: LD_INT 3
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: LD_INT 5
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 3
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 4
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 4
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: LD_INT 4
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 4
53174: NEG
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 4
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 3
53197: NEG
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 3
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 4
53219: NEG
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 5
53230: NEG
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 5
53241: NEG
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 5
53253: NEG
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 3
53265: NEG
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: ST_TO_ADDR
// end ; end ;
53321: GO 53324
53323: POP
// case btype of b_depot , b_warehouse :
53324: LD_VAR 0 1
53328: PUSH
53329: LD_INT 0
53331: DOUBLE
53332: EQUAL
53333: IFTRUE 53343
53335: LD_INT 1
53337: DOUBLE
53338: EQUAL
53339: IFTRUE 53343
53341: GO 53544
53343: POP
// case nation of nation_american :
53344: LD_VAR 0 5
53348: PUSH
53349: LD_INT 1
53351: DOUBLE
53352: EQUAL
53353: IFTRUE 53357
53355: GO 53413
53357: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53358: LD_ADDR_VAR 0 9
53362: PUSH
53363: LD_VAR 0 11
53367: PUSH
53368: LD_VAR 0 12
53372: PUSH
53373: LD_VAR 0 13
53377: PUSH
53378: LD_VAR 0 14
53382: PUSH
53383: LD_VAR 0 15
53387: PUSH
53388: LD_VAR 0 16
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: PUSH
53401: LD_VAR 0 4
53405: PUSH
53406: LD_INT 1
53408: PLUS
53409: ARRAY
53410: ST_TO_ADDR
53411: GO 53542
53413: LD_INT 2
53415: DOUBLE
53416: EQUAL
53417: IFTRUE 53421
53419: GO 53477
53421: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53422: LD_ADDR_VAR 0 9
53426: PUSH
53427: LD_VAR 0 17
53431: PUSH
53432: LD_VAR 0 18
53436: PUSH
53437: LD_VAR 0 19
53441: PUSH
53442: LD_VAR 0 20
53446: PUSH
53447: LD_VAR 0 21
53451: PUSH
53452: LD_VAR 0 22
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: PUSH
53465: LD_VAR 0 4
53469: PUSH
53470: LD_INT 1
53472: PLUS
53473: ARRAY
53474: ST_TO_ADDR
53475: GO 53542
53477: LD_INT 3
53479: DOUBLE
53480: EQUAL
53481: IFTRUE 53485
53483: GO 53541
53485: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53486: LD_ADDR_VAR 0 9
53490: PUSH
53491: LD_VAR 0 23
53495: PUSH
53496: LD_VAR 0 24
53500: PUSH
53501: LD_VAR 0 25
53505: PUSH
53506: LD_VAR 0 26
53510: PUSH
53511: LD_VAR 0 27
53515: PUSH
53516: LD_VAR 0 28
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: PUSH
53529: LD_VAR 0 4
53533: PUSH
53534: LD_INT 1
53536: PLUS
53537: ARRAY
53538: ST_TO_ADDR
53539: GO 53542
53541: POP
53542: GO 54097
53544: LD_INT 2
53546: DOUBLE
53547: EQUAL
53548: IFTRUE 53558
53550: LD_INT 3
53552: DOUBLE
53553: EQUAL
53554: IFTRUE 53558
53556: GO 53614
53558: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53559: LD_ADDR_VAR 0 9
53563: PUSH
53564: LD_VAR 0 29
53568: PUSH
53569: LD_VAR 0 30
53573: PUSH
53574: LD_VAR 0 31
53578: PUSH
53579: LD_VAR 0 32
53583: PUSH
53584: LD_VAR 0 33
53588: PUSH
53589: LD_VAR 0 34
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: PUSH
53602: LD_VAR 0 4
53606: PUSH
53607: LD_INT 1
53609: PLUS
53610: ARRAY
53611: ST_TO_ADDR
53612: GO 54097
53614: LD_INT 16
53616: DOUBLE
53617: EQUAL
53618: IFTRUE 53676
53620: LD_INT 17
53622: DOUBLE
53623: EQUAL
53624: IFTRUE 53676
53626: LD_INT 18
53628: DOUBLE
53629: EQUAL
53630: IFTRUE 53676
53632: LD_INT 19
53634: DOUBLE
53635: EQUAL
53636: IFTRUE 53676
53638: LD_INT 22
53640: DOUBLE
53641: EQUAL
53642: IFTRUE 53676
53644: LD_INT 20
53646: DOUBLE
53647: EQUAL
53648: IFTRUE 53676
53650: LD_INT 21
53652: DOUBLE
53653: EQUAL
53654: IFTRUE 53676
53656: LD_INT 23
53658: DOUBLE
53659: EQUAL
53660: IFTRUE 53676
53662: LD_INT 24
53664: DOUBLE
53665: EQUAL
53666: IFTRUE 53676
53668: LD_INT 25
53670: DOUBLE
53671: EQUAL
53672: IFTRUE 53676
53674: GO 53732
53676: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53677: LD_ADDR_VAR 0 9
53681: PUSH
53682: LD_VAR 0 35
53686: PUSH
53687: LD_VAR 0 36
53691: PUSH
53692: LD_VAR 0 37
53696: PUSH
53697: LD_VAR 0 38
53701: PUSH
53702: LD_VAR 0 39
53706: PUSH
53707: LD_VAR 0 40
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: PUSH
53720: LD_VAR 0 4
53724: PUSH
53725: LD_INT 1
53727: PLUS
53728: ARRAY
53729: ST_TO_ADDR
53730: GO 54097
53732: LD_INT 6
53734: DOUBLE
53735: EQUAL
53736: IFTRUE 53788
53738: LD_INT 7
53740: DOUBLE
53741: EQUAL
53742: IFTRUE 53788
53744: LD_INT 8
53746: DOUBLE
53747: EQUAL
53748: IFTRUE 53788
53750: LD_INT 13
53752: DOUBLE
53753: EQUAL
53754: IFTRUE 53788
53756: LD_INT 12
53758: DOUBLE
53759: EQUAL
53760: IFTRUE 53788
53762: LD_INT 15
53764: DOUBLE
53765: EQUAL
53766: IFTRUE 53788
53768: LD_INT 11
53770: DOUBLE
53771: EQUAL
53772: IFTRUE 53788
53774: LD_INT 14
53776: DOUBLE
53777: EQUAL
53778: IFTRUE 53788
53780: LD_INT 10
53782: DOUBLE
53783: EQUAL
53784: IFTRUE 53788
53786: GO 53844
53788: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53789: LD_ADDR_VAR 0 9
53793: PUSH
53794: LD_VAR 0 41
53798: PUSH
53799: LD_VAR 0 42
53803: PUSH
53804: LD_VAR 0 43
53808: PUSH
53809: LD_VAR 0 44
53813: PUSH
53814: LD_VAR 0 45
53818: PUSH
53819: LD_VAR 0 46
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: PUSH
53832: LD_VAR 0 4
53836: PUSH
53837: LD_INT 1
53839: PLUS
53840: ARRAY
53841: ST_TO_ADDR
53842: GO 54097
53844: LD_INT 36
53846: DOUBLE
53847: EQUAL
53848: IFTRUE 53852
53850: GO 53908
53852: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53853: LD_ADDR_VAR 0 9
53857: PUSH
53858: LD_VAR 0 47
53862: PUSH
53863: LD_VAR 0 48
53867: PUSH
53868: LD_VAR 0 49
53872: PUSH
53873: LD_VAR 0 50
53877: PUSH
53878: LD_VAR 0 51
53882: PUSH
53883: LD_VAR 0 52
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: PUSH
53896: LD_VAR 0 4
53900: PUSH
53901: LD_INT 1
53903: PLUS
53904: ARRAY
53905: ST_TO_ADDR
53906: GO 54097
53908: LD_INT 4
53910: DOUBLE
53911: EQUAL
53912: IFTRUE 53934
53914: LD_INT 5
53916: DOUBLE
53917: EQUAL
53918: IFTRUE 53934
53920: LD_INT 34
53922: DOUBLE
53923: EQUAL
53924: IFTRUE 53934
53926: LD_INT 37
53928: DOUBLE
53929: EQUAL
53930: IFTRUE 53934
53932: GO 53990
53934: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53935: LD_ADDR_VAR 0 9
53939: PUSH
53940: LD_VAR 0 53
53944: PUSH
53945: LD_VAR 0 54
53949: PUSH
53950: LD_VAR 0 55
53954: PUSH
53955: LD_VAR 0 56
53959: PUSH
53960: LD_VAR 0 57
53964: PUSH
53965: LD_VAR 0 58
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: PUSH
53978: LD_VAR 0 4
53982: PUSH
53983: LD_INT 1
53985: PLUS
53986: ARRAY
53987: ST_TO_ADDR
53988: GO 54097
53990: LD_INT 31
53992: DOUBLE
53993: EQUAL
53994: IFTRUE 54040
53996: LD_INT 32
53998: DOUBLE
53999: EQUAL
54000: IFTRUE 54040
54002: LD_INT 33
54004: DOUBLE
54005: EQUAL
54006: IFTRUE 54040
54008: LD_INT 27
54010: DOUBLE
54011: EQUAL
54012: IFTRUE 54040
54014: LD_INT 26
54016: DOUBLE
54017: EQUAL
54018: IFTRUE 54040
54020: LD_INT 28
54022: DOUBLE
54023: EQUAL
54024: IFTRUE 54040
54026: LD_INT 29
54028: DOUBLE
54029: EQUAL
54030: IFTRUE 54040
54032: LD_INT 30
54034: DOUBLE
54035: EQUAL
54036: IFTRUE 54040
54038: GO 54096
54040: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54041: LD_ADDR_VAR 0 9
54045: PUSH
54046: LD_VAR 0 59
54050: PUSH
54051: LD_VAR 0 60
54055: PUSH
54056: LD_VAR 0 61
54060: PUSH
54061: LD_VAR 0 62
54065: PUSH
54066: LD_VAR 0 63
54070: PUSH
54071: LD_VAR 0 64
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: PUSH
54084: LD_VAR 0 4
54088: PUSH
54089: LD_INT 1
54091: PLUS
54092: ARRAY
54093: ST_TO_ADDR
54094: GO 54097
54096: POP
// temp_list2 = [ ] ;
54097: LD_ADDR_VAR 0 10
54101: PUSH
54102: EMPTY
54103: ST_TO_ADDR
// for i in temp_list do
54104: LD_ADDR_VAR 0 8
54108: PUSH
54109: LD_VAR 0 9
54113: PUSH
54114: FOR_IN
54115: IFFALSE 54167
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54117: LD_ADDR_VAR 0 10
54121: PUSH
54122: LD_VAR 0 10
54126: PUSH
54127: LD_VAR 0 8
54131: PUSH
54132: LD_INT 1
54134: ARRAY
54135: PUSH
54136: LD_VAR 0 2
54140: PLUS
54141: PUSH
54142: LD_VAR 0 8
54146: PUSH
54147: LD_INT 2
54149: ARRAY
54150: PUSH
54151: LD_VAR 0 3
54155: PLUS
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: EMPTY
54162: LIST
54163: ADD
54164: ST_TO_ADDR
54165: GO 54114
54167: POP
54168: POP
// result = temp_list2 ;
54169: LD_ADDR_VAR 0 7
54173: PUSH
54174: LD_VAR 0 10
54178: ST_TO_ADDR
// end ;
54179: LD_VAR 0 7
54183: RET
// export function EnemyInRange ( unit , dist ) ; begin
54184: LD_INT 0
54186: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54187: LD_ADDR_VAR 0 3
54191: PUSH
54192: LD_VAR 0 1
54196: PPUSH
54197: CALL_OW 255
54201: PPUSH
54202: LD_VAR 0 1
54206: PPUSH
54207: CALL_OW 250
54211: PPUSH
54212: LD_VAR 0 1
54216: PPUSH
54217: CALL_OW 251
54221: PPUSH
54222: LD_VAR 0 2
54226: PPUSH
54227: CALL 27586 0 4
54231: PUSH
54232: LD_INT 4
54234: ARRAY
54235: ST_TO_ADDR
// end ;
54236: LD_VAR 0 3
54240: RET
// export function PlayerSeeMe ( unit ) ; begin
54241: LD_INT 0
54243: PPUSH
// result := See ( your_side , unit ) ;
54244: LD_ADDR_VAR 0 2
54248: PUSH
54249: LD_OWVAR 2
54253: PPUSH
54254: LD_VAR 0 1
54258: PPUSH
54259: CALL_OW 292
54263: ST_TO_ADDR
// end ;
54264: LD_VAR 0 2
54268: RET
// export function ReverseDir ( unit ) ; begin
54269: LD_INT 0
54271: PPUSH
// if not unit then
54272: LD_VAR 0 1
54276: NOT
54277: IFFALSE 54281
// exit ;
54279: GO 54304
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54281: LD_ADDR_VAR 0 2
54285: PUSH
54286: LD_VAR 0 1
54290: PPUSH
54291: CALL_OW 254
54295: PUSH
54296: LD_INT 3
54298: PLUS
54299: PUSH
54300: LD_INT 6
54302: MOD
54303: ST_TO_ADDR
// end ;
54304: LD_VAR 0 2
54308: RET
// export function ReverseArray ( array ) ; var i ; begin
54309: LD_INT 0
54311: PPUSH
54312: PPUSH
// if not array then
54313: LD_VAR 0 1
54317: NOT
54318: IFFALSE 54322
// exit ;
54320: GO 54377
// result := [ ] ;
54322: LD_ADDR_VAR 0 2
54326: PUSH
54327: EMPTY
54328: ST_TO_ADDR
// for i := array downto 1 do
54329: LD_ADDR_VAR 0 3
54333: PUSH
54334: DOUBLE
54335: LD_VAR 0 1
54339: INC
54340: ST_TO_ADDR
54341: LD_INT 1
54343: PUSH
54344: FOR_DOWNTO
54345: IFFALSE 54375
// result := Join ( result , array [ i ] ) ;
54347: LD_ADDR_VAR 0 2
54351: PUSH
54352: LD_VAR 0 2
54356: PPUSH
54357: LD_VAR 0 1
54361: PUSH
54362: LD_VAR 0 3
54366: ARRAY
54367: PPUSH
54368: CALL 59002 0 2
54372: ST_TO_ADDR
54373: GO 54344
54375: POP
54376: POP
// end ;
54377: LD_VAR 0 2
54381: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54382: LD_INT 0
54384: PPUSH
54385: PPUSH
54386: PPUSH
54387: PPUSH
54388: PPUSH
54389: PPUSH
// if not unit or not hexes then
54390: LD_VAR 0 1
54394: NOT
54395: PUSH
54396: LD_VAR 0 2
54400: NOT
54401: OR
54402: IFFALSE 54406
// exit ;
54404: GO 54529
// dist := 9999 ;
54406: LD_ADDR_VAR 0 5
54410: PUSH
54411: LD_INT 9999
54413: ST_TO_ADDR
// for i = 1 to hexes do
54414: LD_ADDR_VAR 0 4
54418: PUSH
54419: DOUBLE
54420: LD_INT 1
54422: DEC
54423: ST_TO_ADDR
54424: LD_VAR 0 2
54428: PUSH
54429: FOR_TO
54430: IFFALSE 54517
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54432: LD_ADDR_VAR 0 6
54436: PUSH
54437: LD_VAR 0 1
54441: PPUSH
54442: LD_VAR 0 2
54446: PUSH
54447: LD_VAR 0 4
54451: ARRAY
54452: PUSH
54453: LD_INT 1
54455: ARRAY
54456: PPUSH
54457: LD_VAR 0 2
54461: PUSH
54462: LD_VAR 0 4
54466: ARRAY
54467: PUSH
54468: LD_INT 2
54470: ARRAY
54471: PPUSH
54472: CALL_OW 297
54476: ST_TO_ADDR
// if tdist < dist then
54477: LD_VAR 0 6
54481: PUSH
54482: LD_VAR 0 5
54486: LESS
54487: IFFALSE 54515
// begin hex := hexes [ i ] ;
54489: LD_ADDR_VAR 0 8
54493: PUSH
54494: LD_VAR 0 2
54498: PUSH
54499: LD_VAR 0 4
54503: ARRAY
54504: ST_TO_ADDR
// dist := tdist ;
54505: LD_ADDR_VAR 0 5
54509: PUSH
54510: LD_VAR 0 6
54514: ST_TO_ADDR
// end ; end ;
54515: GO 54429
54517: POP
54518: POP
// result := hex ;
54519: LD_ADDR_VAR 0 3
54523: PUSH
54524: LD_VAR 0 8
54528: ST_TO_ADDR
// end ;
54529: LD_VAR 0 3
54533: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54534: LD_INT 0
54536: PPUSH
54537: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54538: LD_VAR 0 1
54542: NOT
54543: PUSH
54544: LD_VAR 0 1
54548: PUSH
54549: LD_INT 21
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 23
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PPUSH
54573: CALL_OW 69
54577: IN
54578: NOT
54579: OR
54580: IFFALSE 54584
// exit ;
54582: GO 54631
// for i = 1 to 3 do
54584: LD_ADDR_VAR 0 3
54588: PUSH
54589: DOUBLE
54590: LD_INT 1
54592: DEC
54593: ST_TO_ADDR
54594: LD_INT 3
54596: PUSH
54597: FOR_TO
54598: IFFALSE 54629
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54600: LD_VAR 0 1
54604: PPUSH
54605: CALL_OW 250
54609: PPUSH
54610: LD_VAR 0 1
54614: PPUSH
54615: CALL_OW 251
54619: PPUSH
54620: LD_INT 1
54622: PPUSH
54623: CALL_OW 453
54627: GO 54597
54629: POP
54630: POP
// end ;
54631: LD_VAR 0 2
54635: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54636: LD_INT 0
54638: PPUSH
54639: PPUSH
54640: PPUSH
54641: PPUSH
54642: PPUSH
54643: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54644: LD_VAR 0 1
54648: NOT
54649: PUSH
54650: LD_VAR 0 2
54654: NOT
54655: OR
54656: PUSH
54657: LD_VAR 0 1
54661: PPUSH
54662: CALL_OW 314
54666: OR
54667: IFFALSE 54671
// exit ;
54669: GO 55112
// x := GetX ( enemy_unit ) ;
54671: LD_ADDR_VAR 0 7
54675: PUSH
54676: LD_VAR 0 2
54680: PPUSH
54681: CALL_OW 250
54685: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54686: LD_ADDR_VAR 0 8
54690: PUSH
54691: LD_VAR 0 2
54695: PPUSH
54696: CALL_OW 251
54700: ST_TO_ADDR
// if not x or not y then
54701: LD_VAR 0 7
54705: NOT
54706: PUSH
54707: LD_VAR 0 8
54711: NOT
54712: OR
54713: IFFALSE 54717
// exit ;
54715: GO 55112
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54717: LD_ADDR_VAR 0 6
54721: PUSH
54722: LD_VAR 0 7
54726: PPUSH
54727: LD_INT 0
54729: PPUSH
54730: LD_INT 4
54732: PPUSH
54733: CALL_OW 272
54737: PUSH
54738: LD_VAR 0 8
54742: PPUSH
54743: LD_INT 0
54745: PPUSH
54746: LD_INT 4
54748: PPUSH
54749: CALL_OW 273
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_VAR 0 7
54762: PPUSH
54763: LD_INT 1
54765: PPUSH
54766: LD_INT 4
54768: PPUSH
54769: CALL_OW 272
54773: PUSH
54774: LD_VAR 0 8
54778: PPUSH
54779: LD_INT 1
54781: PPUSH
54782: LD_INT 4
54784: PPUSH
54785: CALL_OW 273
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_VAR 0 7
54798: PPUSH
54799: LD_INT 2
54801: PPUSH
54802: LD_INT 4
54804: PPUSH
54805: CALL_OW 272
54809: PUSH
54810: LD_VAR 0 8
54814: PPUSH
54815: LD_INT 2
54817: PPUSH
54818: LD_INT 4
54820: PPUSH
54821: CALL_OW 273
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_VAR 0 7
54834: PPUSH
54835: LD_INT 3
54837: PPUSH
54838: LD_INT 4
54840: PPUSH
54841: CALL_OW 272
54845: PUSH
54846: LD_VAR 0 8
54850: PPUSH
54851: LD_INT 3
54853: PPUSH
54854: LD_INT 4
54856: PPUSH
54857: CALL_OW 273
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_VAR 0 7
54870: PPUSH
54871: LD_INT 4
54873: PPUSH
54874: LD_INT 4
54876: PPUSH
54877: CALL_OW 272
54881: PUSH
54882: LD_VAR 0 8
54886: PPUSH
54887: LD_INT 4
54889: PPUSH
54890: LD_INT 4
54892: PPUSH
54893: CALL_OW 273
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_VAR 0 7
54906: PPUSH
54907: LD_INT 5
54909: PPUSH
54910: LD_INT 4
54912: PPUSH
54913: CALL_OW 272
54917: PUSH
54918: LD_VAR 0 8
54922: PPUSH
54923: LD_INT 5
54925: PPUSH
54926: LD_INT 4
54928: PPUSH
54929: CALL_OW 273
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: ST_TO_ADDR
// for i = tmp downto 1 do
54946: LD_ADDR_VAR 0 4
54950: PUSH
54951: DOUBLE
54952: LD_VAR 0 6
54956: INC
54957: ST_TO_ADDR
54958: LD_INT 1
54960: PUSH
54961: FOR_DOWNTO
54962: IFFALSE 55063
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54964: LD_VAR 0 6
54968: PUSH
54969: LD_VAR 0 4
54973: ARRAY
54974: PUSH
54975: LD_INT 1
54977: ARRAY
54978: PPUSH
54979: LD_VAR 0 6
54983: PUSH
54984: LD_VAR 0 4
54988: ARRAY
54989: PUSH
54990: LD_INT 2
54992: ARRAY
54993: PPUSH
54994: CALL_OW 488
54998: NOT
54999: PUSH
55000: LD_VAR 0 6
55004: PUSH
55005: LD_VAR 0 4
55009: ARRAY
55010: PUSH
55011: LD_INT 1
55013: ARRAY
55014: PPUSH
55015: LD_VAR 0 6
55019: PUSH
55020: LD_VAR 0 4
55024: ARRAY
55025: PUSH
55026: LD_INT 2
55028: ARRAY
55029: PPUSH
55030: CALL_OW 428
55034: PUSH
55035: LD_INT 0
55037: NONEQUAL
55038: OR
55039: IFFALSE 55061
// tmp := Delete ( tmp , i ) ;
55041: LD_ADDR_VAR 0 6
55045: PUSH
55046: LD_VAR 0 6
55050: PPUSH
55051: LD_VAR 0 4
55055: PPUSH
55056: CALL_OW 3
55060: ST_TO_ADDR
55061: GO 54961
55063: POP
55064: POP
// j := GetClosestHex ( unit , tmp ) ;
55065: LD_ADDR_VAR 0 5
55069: PUSH
55070: LD_VAR 0 1
55074: PPUSH
55075: LD_VAR 0 6
55079: PPUSH
55080: CALL 54382 0 2
55084: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55085: LD_VAR 0 1
55089: PPUSH
55090: LD_VAR 0 5
55094: PUSH
55095: LD_INT 1
55097: ARRAY
55098: PPUSH
55099: LD_VAR 0 5
55103: PUSH
55104: LD_INT 2
55106: ARRAY
55107: PPUSH
55108: CALL_OW 111
// end ;
55112: LD_VAR 0 3
55116: RET
// export function PrepareApemanSoldier ( ) ; begin
55117: LD_INT 0
55119: PPUSH
// uc_nation := 0 ;
55120: LD_ADDR_OWVAR 21
55124: PUSH
55125: LD_INT 0
55127: ST_TO_ADDR
// hc_sex := sex_male ;
55128: LD_ADDR_OWVAR 27
55132: PUSH
55133: LD_INT 1
55135: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55136: LD_ADDR_OWVAR 28
55140: PUSH
55141: LD_INT 15
55143: ST_TO_ADDR
// hc_gallery :=  ;
55144: LD_ADDR_OWVAR 33
55148: PUSH
55149: LD_STRING 
55151: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55152: LD_ADDR_OWVAR 31
55156: PUSH
55157: LD_INT 0
55159: PPUSH
55160: LD_INT 3
55162: PPUSH
55163: CALL_OW 12
55167: PUSH
55168: LD_INT 0
55170: PPUSH
55171: LD_INT 3
55173: PPUSH
55174: CALL_OW 12
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// end ;
55191: LD_VAR 0 1
55195: RET
// export function PrepareApemanEngineer ( ) ; begin
55196: LD_INT 0
55198: PPUSH
// uc_nation := 0 ;
55199: LD_ADDR_OWVAR 21
55203: PUSH
55204: LD_INT 0
55206: ST_TO_ADDR
// hc_sex := sex_male ;
55207: LD_ADDR_OWVAR 27
55211: PUSH
55212: LD_INT 1
55214: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55215: LD_ADDR_OWVAR 28
55219: PUSH
55220: LD_INT 16
55222: ST_TO_ADDR
// hc_gallery :=  ;
55223: LD_ADDR_OWVAR 33
55227: PUSH
55228: LD_STRING 
55230: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55231: LD_ADDR_OWVAR 31
55235: PUSH
55236: LD_INT 0
55238: PPUSH
55239: LD_INT 3
55241: PPUSH
55242: CALL_OW 12
55246: PUSH
55247: LD_INT 0
55249: PPUSH
55250: LD_INT 3
55252: PPUSH
55253: CALL_OW 12
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: ST_TO_ADDR
// end ;
55270: LD_VAR 0 1
55274: RET
// export function PrepareApeman ( agressivity ) ; begin
55275: LD_INT 0
55277: PPUSH
// uc_side := 0 ;
55278: LD_ADDR_OWVAR 20
55282: PUSH
55283: LD_INT 0
55285: ST_TO_ADDR
// uc_nation := 0 ;
55286: LD_ADDR_OWVAR 21
55290: PUSH
55291: LD_INT 0
55293: ST_TO_ADDR
// hc_sex := sex_male ;
55294: LD_ADDR_OWVAR 27
55298: PUSH
55299: LD_INT 1
55301: ST_TO_ADDR
// hc_class := class_apeman ;
55302: LD_ADDR_OWVAR 28
55306: PUSH
55307: LD_INT 12
55309: ST_TO_ADDR
// hc_gallery :=  ;
55310: LD_ADDR_OWVAR 33
55314: PUSH
55315: LD_STRING 
55317: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55318: LD_ADDR_OWVAR 35
55322: PUSH
55323: LD_VAR 0 1
55327: NEG
55328: PPUSH
55329: LD_VAR 0 1
55333: PPUSH
55334: CALL_OW 12
55338: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55339: LD_ADDR_OWVAR 31
55343: PUSH
55344: LD_INT 0
55346: PPUSH
55347: LD_INT 3
55349: PPUSH
55350: CALL_OW 12
55354: PUSH
55355: LD_INT 0
55357: PPUSH
55358: LD_INT 3
55360: PPUSH
55361: CALL_OW 12
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: ST_TO_ADDR
// end ;
55378: LD_VAR 0 2
55382: RET
// export function PrepareTiger ( agressivity ) ; begin
55383: LD_INT 0
55385: PPUSH
// uc_side := 0 ;
55386: LD_ADDR_OWVAR 20
55390: PUSH
55391: LD_INT 0
55393: ST_TO_ADDR
// uc_nation := 0 ;
55394: LD_ADDR_OWVAR 21
55398: PUSH
55399: LD_INT 0
55401: ST_TO_ADDR
// hc_class := class_tiger ;
55402: LD_ADDR_OWVAR 28
55406: PUSH
55407: LD_INT 14
55409: ST_TO_ADDR
// hc_gallery :=  ;
55410: LD_ADDR_OWVAR 33
55414: PUSH
55415: LD_STRING 
55417: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55418: LD_ADDR_OWVAR 35
55422: PUSH
55423: LD_VAR 0 1
55427: NEG
55428: PPUSH
55429: LD_VAR 0 1
55433: PPUSH
55434: CALL_OW 12
55438: ST_TO_ADDR
// end ;
55439: LD_VAR 0 2
55443: RET
// export function PrepareEnchidna ( ) ; begin
55444: LD_INT 0
55446: PPUSH
// uc_side := 0 ;
55447: LD_ADDR_OWVAR 20
55451: PUSH
55452: LD_INT 0
55454: ST_TO_ADDR
// uc_nation := 0 ;
55455: LD_ADDR_OWVAR 21
55459: PUSH
55460: LD_INT 0
55462: ST_TO_ADDR
// hc_class := class_baggie ;
55463: LD_ADDR_OWVAR 28
55467: PUSH
55468: LD_INT 13
55470: ST_TO_ADDR
// hc_gallery :=  ;
55471: LD_ADDR_OWVAR 33
55475: PUSH
55476: LD_STRING 
55478: ST_TO_ADDR
// end ;
55479: LD_VAR 0 1
55483: RET
// export function PrepareFrog ( ) ; begin
55484: LD_INT 0
55486: PPUSH
// uc_side := 0 ;
55487: LD_ADDR_OWVAR 20
55491: PUSH
55492: LD_INT 0
55494: ST_TO_ADDR
// uc_nation := 0 ;
55495: LD_ADDR_OWVAR 21
55499: PUSH
55500: LD_INT 0
55502: ST_TO_ADDR
// hc_class := class_frog ;
55503: LD_ADDR_OWVAR 28
55507: PUSH
55508: LD_INT 19
55510: ST_TO_ADDR
// hc_gallery :=  ;
55511: LD_ADDR_OWVAR 33
55515: PUSH
55516: LD_STRING 
55518: ST_TO_ADDR
// end ;
55519: LD_VAR 0 1
55523: RET
// export function PrepareFish ( ) ; begin
55524: LD_INT 0
55526: PPUSH
// uc_side := 0 ;
55527: LD_ADDR_OWVAR 20
55531: PUSH
55532: LD_INT 0
55534: ST_TO_ADDR
// uc_nation := 0 ;
55535: LD_ADDR_OWVAR 21
55539: PUSH
55540: LD_INT 0
55542: ST_TO_ADDR
// hc_class := class_fish ;
55543: LD_ADDR_OWVAR 28
55547: PUSH
55548: LD_INT 20
55550: ST_TO_ADDR
// hc_gallery :=  ;
55551: LD_ADDR_OWVAR 33
55555: PUSH
55556: LD_STRING 
55558: ST_TO_ADDR
// end ;
55559: LD_VAR 0 1
55563: RET
// export function PrepareBird ( ) ; begin
55564: LD_INT 0
55566: PPUSH
// uc_side := 0 ;
55567: LD_ADDR_OWVAR 20
55571: PUSH
55572: LD_INT 0
55574: ST_TO_ADDR
// uc_nation := 0 ;
55575: LD_ADDR_OWVAR 21
55579: PUSH
55580: LD_INT 0
55582: ST_TO_ADDR
// hc_class := class_phororhacos ;
55583: LD_ADDR_OWVAR 28
55587: PUSH
55588: LD_INT 18
55590: ST_TO_ADDR
// hc_gallery :=  ;
55591: LD_ADDR_OWVAR 33
55595: PUSH
55596: LD_STRING 
55598: ST_TO_ADDR
// end ;
55599: LD_VAR 0 1
55603: RET
// export function PrepareHorse ( ) ; begin
55604: LD_INT 0
55606: PPUSH
// uc_side := 0 ;
55607: LD_ADDR_OWVAR 20
55611: PUSH
55612: LD_INT 0
55614: ST_TO_ADDR
// uc_nation := 0 ;
55615: LD_ADDR_OWVAR 21
55619: PUSH
55620: LD_INT 0
55622: ST_TO_ADDR
// hc_class := class_horse ;
55623: LD_ADDR_OWVAR 28
55627: PUSH
55628: LD_INT 21
55630: ST_TO_ADDR
// hc_gallery :=  ;
55631: LD_ADDR_OWVAR 33
55635: PUSH
55636: LD_STRING 
55638: ST_TO_ADDR
// end ;
55639: LD_VAR 0 1
55643: RET
// export function PrepareMastodont ( ) ; begin
55644: LD_INT 0
55646: PPUSH
// uc_side := 0 ;
55647: LD_ADDR_OWVAR 20
55651: PUSH
55652: LD_INT 0
55654: ST_TO_ADDR
// uc_nation := 0 ;
55655: LD_ADDR_OWVAR 21
55659: PUSH
55660: LD_INT 0
55662: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55663: LD_ADDR_OWVAR 37
55667: PUSH
55668: LD_INT 31
55670: ST_TO_ADDR
// vc_control := control_rider ;
55671: LD_ADDR_OWVAR 38
55675: PUSH
55676: LD_INT 4
55678: ST_TO_ADDR
// end ;
55679: LD_VAR 0 1
55683: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55684: LD_INT 0
55686: PPUSH
55687: PPUSH
55688: PPUSH
// uc_side = 0 ;
55689: LD_ADDR_OWVAR 20
55693: PUSH
55694: LD_INT 0
55696: ST_TO_ADDR
// uc_nation = 0 ;
55697: LD_ADDR_OWVAR 21
55701: PUSH
55702: LD_INT 0
55704: ST_TO_ADDR
// InitHc_All ( ) ;
55705: CALL_OW 584
// InitVc ;
55709: CALL_OW 20
// if mastodonts then
55713: LD_VAR 0 6
55717: IFFALSE 55784
// for i = 1 to mastodonts do
55719: LD_ADDR_VAR 0 11
55723: PUSH
55724: DOUBLE
55725: LD_INT 1
55727: DEC
55728: ST_TO_ADDR
55729: LD_VAR 0 6
55733: PUSH
55734: FOR_TO
55735: IFFALSE 55782
// begin vc_chassis := 31 ;
55737: LD_ADDR_OWVAR 37
55741: PUSH
55742: LD_INT 31
55744: ST_TO_ADDR
// vc_control := control_rider ;
55745: LD_ADDR_OWVAR 38
55749: PUSH
55750: LD_INT 4
55752: ST_TO_ADDR
// animal := CreateVehicle ;
55753: LD_ADDR_VAR 0 12
55757: PUSH
55758: CALL_OW 45
55762: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55763: LD_VAR 0 12
55767: PPUSH
55768: LD_VAR 0 8
55772: PPUSH
55773: LD_INT 0
55775: PPUSH
55776: CALL 57919 0 3
// end ;
55780: GO 55734
55782: POP
55783: POP
// if horses then
55784: LD_VAR 0 5
55788: IFFALSE 55855
// for i = 1 to horses do
55790: LD_ADDR_VAR 0 11
55794: PUSH
55795: DOUBLE
55796: LD_INT 1
55798: DEC
55799: ST_TO_ADDR
55800: LD_VAR 0 5
55804: PUSH
55805: FOR_TO
55806: IFFALSE 55853
// begin hc_class := 21 ;
55808: LD_ADDR_OWVAR 28
55812: PUSH
55813: LD_INT 21
55815: ST_TO_ADDR
// hc_gallery :=  ;
55816: LD_ADDR_OWVAR 33
55820: PUSH
55821: LD_STRING 
55823: ST_TO_ADDR
// animal := CreateHuman ;
55824: LD_ADDR_VAR 0 12
55828: PUSH
55829: CALL_OW 44
55833: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55834: LD_VAR 0 12
55838: PPUSH
55839: LD_VAR 0 8
55843: PPUSH
55844: LD_INT 0
55846: PPUSH
55847: CALL 57919 0 3
// end ;
55851: GO 55805
55853: POP
55854: POP
// if birds then
55855: LD_VAR 0 1
55859: IFFALSE 55926
// for i = 1 to birds do
55861: LD_ADDR_VAR 0 11
55865: PUSH
55866: DOUBLE
55867: LD_INT 1
55869: DEC
55870: ST_TO_ADDR
55871: LD_VAR 0 1
55875: PUSH
55876: FOR_TO
55877: IFFALSE 55924
// begin hc_class = 18 ;
55879: LD_ADDR_OWVAR 28
55883: PUSH
55884: LD_INT 18
55886: ST_TO_ADDR
// hc_gallery =  ;
55887: LD_ADDR_OWVAR 33
55891: PUSH
55892: LD_STRING 
55894: ST_TO_ADDR
// animal := CreateHuman ;
55895: LD_ADDR_VAR 0 12
55899: PUSH
55900: CALL_OW 44
55904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55905: LD_VAR 0 12
55909: PPUSH
55910: LD_VAR 0 8
55914: PPUSH
55915: LD_INT 0
55917: PPUSH
55918: CALL 57919 0 3
// end ;
55922: GO 55876
55924: POP
55925: POP
// if tigers then
55926: LD_VAR 0 2
55930: IFFALSE 56014
// for i = 1 to tigers do
55932: LD_ADDR_VAR 0 11
55936: PUSH
55937: DOUBLE
55938: LD_INT 1
55940: DEC
55941: ST_TO_ADDR
55942: LD_VAR 0 2
55946: PUSH
55947: FOR_TO
55948: IFFALSE 56012
// begin hc_class = class_tiger ;
55950: LD_ADDR_OWVAR 28
55954: PUSH
55955: LD_INT 14
55957: ST_TO_ADDR
// hc_gallery =  ;
55958: LD_ADDR_OWVAR 33
55962: PUSH
55963: LD_STRING 
55965: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55966: LD_ADDR_OWVAR 35
55970: PUSH
55971: LD_INT 7
55973: NEG
55974: PPUSH
55975: LD_INT 7
55977: PPUSH
55978: CALL_OW 12
55982: ST_TO_ADDR
// animal := CreateHuman ;
55983: LD_ADDR_VAR 0 12
55987: PUSH
55988: CALL_OW 44
55992: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55993: LD_VAR 0 12
55997: PPUSH
55998: LD_VAR 0 8
56002: PPUSH
56003: LD_INT 0
56005: PPUSH
56006: CALL 57919 0 3
// end ;
56010: GO 55947
56012: POP
56013: POP
// if apemans then
56014: LD_VAR 0 3
56018: IFFALSE 56141
// for i = 1 to apemans do
56020: LD_ADDR_VAR 0 11
56024: PUSH
56025: DOUBLE
56026: LD_INT 1
56028: DEC
56029: ST_TO_ADDR
56030: LD_VAR 0 3
56034: PUSH
56035: FOR_TO
56036: IFFALSE 56139
// begin hc_class = class_apeman ;
56038: LD_ADDR_OWVAR 28
56042: PUSH
56043: LD_INT 12
56045: ST_TO_ADDR
// hc_gallery =  ;
56046: LD_ADDR_OWVAR 33
56050: PUSH
56051: LD_STRING 
56053: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56054: LD_ADDR_OWVAR 35
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PPUSH
56063: LD_INT 2
56065: PPUSH
56066: CALL_OW 12
56070: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56071: LD_ADDR_OWVAR 31
56075: PUSH
56076: LD_INT 1
56078: PPUSH
56079: LD_INT 3
56081: PPUSH
56082: CALL_OW 12
56086: PUSH
56087: LD_INT 1
56089: PPUSH
56090: LD_INT 3
56092: PPUSH
56093: CALL_OW 12
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: ST_TO_ADDR
// animal := CreateHuman ;
56110: LD_ADDR_VAR 0 12
56114: PUSH
56115: CALL_OW 44
56119: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56120: LD_VAR 0 12
56124: PPUSH
56125: LD_VAR 0 8
56129: PPUSH
56130: LD_INT 0
56132: PPUSH
56133: CALL 57919 0 3
// end ;
56137: GO 56035
56139: POP
56140: POP
// if enchidnas then
56141: LD_VAR 0 4
56145: IFFALSE 56212
// for i = 1 to enchidnas do
56147: LD_ADDR_VAR 0 11
56151: PUSH
56152: DOUBLE
56153: LD_INT 1
56155: DEC
56156: ST_TO_ADDR
56157: LD_VAR 0 4
56161: PUSH
56162: FOR_TO
56163: IFFALSE 56210
// begin hc_class = 13 ;
56165: LD_ADDR_OWVAR 28
56169: PUSH
56170: LD_INT 13
56172: ST_TO_ADDR
// hc_gallery =  ;
56173: LD_ADDR_OWVAR 33
56177: PUSH
56178: LD_STRING 
56180: ST_TO_ADDR
// animal := CreateHuman ;
56181: LD_ADDR_VAR 0 12
56185: PUSH
56186: CALL_OW 44
56190: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56191: LD_VAR 0 12
56195: PPUSH
56196: LD_VAR 0 8
56200: PPUSH
56201: LD_INT 0
56203: PPUSH
56204: CALL 57919 0 3
// end ;
56208: GO 56162
56210: POP
56211: POP
// if fishes then
56212: LD_VAR 0 7
56216: IFFALSE 56283
// for i = 1 to fishes do
56218: LD_ADDR_VAR 0 11
56222: PUSH
56223: DOUBLE
56224: LD_INT 1
56226: DEC
56227: ST_TO_ADDR
56228: LD_VAR 0 7
56232: PUSH
56233: FOR_TO
56234: IFFALSE 56281
// begin hc_class = 20 ;
56236: LD_ADDR_OWVAR 28
56240: PUSH
56241: LD_INT 20
56243: ST_TO_ADDR
// hc_gallery =  ;
56244: LD_ADDR_OWVAR 33
56248: PUSH
56249: LD_STRING 
56251: ST_TO_ADDR
// animal := CreateHuman ;
56252: LD_ADDR_VAR 0 12
56256: PUSH
56257: CALL_OW 44
56261: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56262: LD_VAR 0 12
56266: PPUSH
56267: LD_VAR 0 9
56271: PPUSH
56272: LD_INT 0
56274: PPUSH
56275: CALL 57919 0 3
// end ;
56279: GO 56233
56281: POP
56282: POP
// end ;
56283: LD_VAR 0 10
56287: RET
// export function WantHeal ( sci , unit ) ; begin
56288: LD_INT 0
56290: PPUSH
// if GetTaskList ( sci ) > 0 then
56291: LD_VAR 0 1
56295: PPUSH
56296: CALL_OW 437
56300: PUSH
56301: LD_INT 0
56303: GREATER
56304: IFFALSE 56374
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56306: LD_VAR 0 1
56310: PPUSH
56311: CALL_OW 437
56315: PUSH
56316: LD_INT 1
56318: ARRAY
56319: PUSH
56320: LD_INT 1
56322: ARRAY
56323: PUSH
56324: LD_STRING l
56326: EQUAL
56327: PUSH
56328: LD_VAR 0 1
56332: PPUSH
56333: CALL_OW 437
56337: PUSH
56338: LD_INT 1
56340: ARRAY
56341: PUSH
56342: LD_INT 4
56344: ARRAY
56345: PUSH
56346: LD_VAR 0 2
56350: EQUAL
56351: AND
56352: IFFALSE 56364
// result := true else
56354: LD_ADDR_VAR 0 3
56358: PUSH
56359: LD_INT 1
56361: ST_TO_ADDR
56362: GO 56372
// result := false ;
56364: LD_ADDR_VAR 0 3
56368: PUSH
56369: LD_INT 0
56371: ST_TO_ADDR
// end else
56372: GO 56382
// result := false ;
56374: LD_ADDR_VAR 0 3
56378: PUSH
56379: LD_INT 0
56381: ST_TO_ADDR
// end ;
56382: LD_VAR 0 3
56386: RET
// export function HealTarget ( sci ) ; begin
56387: LD_INT 0
56389: PPUSH
// if not sci then
56390: LD_VAR 0 1
56394: NOT
56395: IFFALSE 56399
// exit ;
56397: GO 56464
// result := 0 ;
56399: LD_ADDR_VAR 0 2
56403: PUSH
56404: LD_INT 0
56406: ST_TO_ADDR
// if GetTaskList ( sci ) then
56407: LD_VAR 0 1
56411: PPUSH
56412: CALL_OW 437
56416: IFFALSE 56464
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56418: LD_VAR 0 1
56422: PPUSH
56423: CALL_OW 437
56427: PUSH
56428: LD_INT 1
56430: ARRAY
56431: PUSH
56432: LD_INT 1
56434: ARRAY
56435: PUSH
56436: LD_STRING l
56438: EQUAL
56439: IFFALSE 56464
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56441: LD_ADDR_VAR 0 2
56445: PUSH
56446: LD_VAR 0 1
56450: PPUSH
56451: CALL_OW 437
56455: PUSH
56456: LD_INT 1
56458: ARRAY
56459: PUSH
56460: LD_INT 4
56462: ARRAY
56463: ST_TO_ADDR
// end ;
56464: LD_VAR 0 2
56468: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56469: LD_INT 0
56471: PPUSH
56472: PPUSH
56473: PPUSH
56474: PPUSH
// if not base_units then
56475: LD_VAR 0 1
56479: NOT
56480: IFFALSE 56484
// exit ;
56482: GO 56571
// result := false ;
56484: LD_ADDR_VAR 0 2
56488: PUSH
56489: LD_INT 0
56491: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56492: LD_ADDR_VAR 0 5
56496: PUSH
56497: LD_VAR 0 1
56501: PPUSH
56502: LD_INT 21
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PPUSH
56512: CALL_OW 72
56516: ST_TO_ADDR
// if not tmp then
56517: LD_VAR 0 5
56521: NOT
56522: IFFALSE 56526
// exit ;
56524: GO 56571
// for i in tmp do
56526: LD_ADDR_VAR 0 3
56530: PUSH
56531: LD_VAR 0 5
56535: PUSH
56536: FOR_IN
56537: IFFALSE 56569
// begin result := EnemyInRange ( i , 22 ) ;
56539: LD_ADDR_VAR 0 2
56543: PUSH
56544: LD_VAR 0 3
56548: PPUSH
56549: LD_INT 22
56551: PPUSH
56552: CALL 54184 0 2
56556: ST_TO_ADDR
// if result then
56557: LD_VAR 0 2
56561: IFFALSE 56567
// exit ;
56563: POP
56564: POP
56565: GO 56571
// end ;
56567: GO 56536
56569: POP
56570: POP
// end ;
56571: LD_VAR 0 2
56575: RET
// export function FilterByTag ( units , tag ) ; begin
56576: LD_INT 0
56578: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56579: LD_ADDR_VAR 0 3
56583: PUSH
56584: LD_VAR 0 1
56588: PPUSH
56589: LD_INT 120
56591: PUSH
56592: LD_VAR 0 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PPUSH
56601: CALL_OW 72
56605: ST_TO_ADDR
// end ;
56606: LD_VAR 0 3
56610: RET
// export function IsDriver ( un ) ; begin
56611: LD_INT 0
56613: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56614: LD_ADDR_VAR 0 2
56618: PUSH
56619: LD_VAR 0 1
56623: PUSH
56624: LD_INT 55
56626: PUSH
56627: EMPTY
56628: LIST
56629: PPUSH
56630: CALL_OW 69
56634: IN
56635: ST_TO_ADDR
// end ;
56636: LD_VAR 0 2
56640: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56641: LD_INT 0
56643: PPUSH
56644: PPUSH
// list := [ ] ;
56645: LD_ADDR_VAR 0 5
56649: PUSH
56650: EMPTY
56651: ST_TO_ADDR
// case d of 0 :
56652: LD_VAR 0 3
56656: PUSH
56657: LD_INT 0
56659: DOUBLE
56660: EQUAL
56661: IFTRUE 56665
56663: GO 56798
56665: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56666: LD_ADDR_VAR 0 5
56670: PUSH
56671: LD_VAR 0 1
56675: PUSH
56676: LD_INT 4
56678: MINUS
56679: PUSH
56680: LD_VAR 0 2
56684: PUSH
56685: LD_INT 4
56687: MINUS
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: LIST
56696: PUSH
56697: LD_VAR 0 1
56701: PUSH
56702: LD_INT 3
56704: MINUS
56705: PUSH
56706: LD_VAR 0 2
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: LIST
56718: PUSH
56719: LD_VAR 0 1
56723: PUSH
56724: LD_INT 4
56726: PLUS
56727: PUSH
56728: LD_VAR 0 2
56732: PUSH
56733: LD_INT 4
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: LIST
56740: PUSH
56741: LD_VAR 0 1
56745: PUSH
56746: LD_INT 3
56748: PLUS
56749: PUSH
56750: LD_VAR 0 2
56754: PUSH
56755: LD_INT 3
56757: PLUS
56758: PUSH
56759: LD_INT 5
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: LIST
56766: PUSH
56767: LD_VAR 0 1
56771: PUSH
56772: LD_VAR 0 2
56776: PUSH
56777: LD_INT 4
56779: PLUS
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: ST_TO_ADDR
// end ; 1 :
56796: GO 57496
56798: LD_INT 1
56800: DOUBLE
56801: EQUAL
56802: IFTRUE 56806
56804: GO 56939
56806: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56807: LD_ADDR_VAR 0 5
56811: PUSH
56812: LD_VAR 0 1
56816: PUSH
56817: LD_VAR 0 2
56821: PUSH
56822: LD_INT 4
56824: MINUS
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: LIST
56833: PUSH
56834: LD_VAR 0 1
56838: PUSH
56839: LD_INT 3
56841: MINUS
56842: PUSH
56843: LD_VAR 0 2
56847: PUSH
56848: LD_INT 3
56850: MINUS
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: LIST
56859: PUSH
56860: LD_VAR 0 1
56864: PUSH
56865: LD_INT 4
56867: MINUS
56868: PUSH
56869: LD_VAR 0 2
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: LIST
56881: PUSH
56882: LD_VAR 0 1
56886: PUSH
56887: LD_VAR 0 2
56891: PUSH
56892: LD_INT 3
56894: PLUS
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: PUSH
56904: LD_VAR 0 1
56908: PUSH
56909: LD_INT 4
56911: PLUS
56912: PUSH
56913: LD_VAR 0 2
56917: PUSH
56918: LD_INT 4
56920: PLUS
56921: PUSH
56922: LD_INT 5
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: ST_TO_ADDR
// end ; 2 :
56937: GO 57496
56939: LD_INT 2
56941: DOUBLE
56942: EQUAL
56943: IFTRUE 56947
56945: GO 57076
56947: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56948: LD_ADDR_VAR 0 5
56952: PUSH
56953: LD_VAR 0 1
56957: PUSH
56958: LD_VAR 0 2
56962: PUSH
56963: LD_INT 3
56965: MINUS
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: LIST
56974: PUSH
56975: LD_VAR 0 1
56979: PUSH
56980: LD_INT 4
56982: PLUS
56983: PUSH
56984: LD_VAR 0 2
56988: PUSH
56989: LD_INT 4
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: PUSH
56997: LD_VAR 0 1
57001: PUSH
57002: LD_VAR 0 2
57006: PUSH
57007: LD_INT 4
57009: PLUS
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: PUSH
57019: LD_VAR 0 1
57023: PUSH
57024: LD_INT 3
57026: MINUS
57027: PUSH
57028: LD_VAR 0 2
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: LIST
57040: PUSH
57041: LD_VAR 0 1
57045: PUSH
57046: LD_INT 4
57048: MINUS
57049: PUSH
57050: LD_VAR 0 2
57054: PUSH
57055: LD_INT 4
57057: MINUS
57058: PUSH
57059: LD_INT 2
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: ST_TO_ADDR
// end ; 3 :
57074: GO 57496
57076: LD_INT 3
57078: DOUBLE
57079: EQUAL
57080: IFTRUE 57084
57082: GO 57217
57084: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57085: LD_ADDR_VAR 0 5
57089: PUSH
57090: LD_VAR 0 1
57094: PUSH
57095: LD_INT 3
57097: PLUS
57098: PUSH
57099: LD_VAR 0 2
57103: PUSH
57104: LD_INT 4
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: PUSH
57112: LD_VAR 0 1
57116: PUSH
57117: LD_INT 4
57119: PLUS
57120: PUSH
57121: LD_VAR 0 2
57125: PUSH
57126: LD_INT 4
57128: PLUS
57129: PUSH
57130: LD_INT 5
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: LIST
57137: PUSH
57138: LD_VAR 0 1
57142: PUSH
57143: LD_INT 4
57145: MINUS
57146: PUSH
57147: LD_VAR 0 2
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: LIST
57159: PUSH
57160: LD_VAR 0 1
57164: PUSH
57165: LD_VAR 0 2
57169: PUSH
57170: LD_INT 4
57172: MINUS
57173: PUSH
57174: LD_INT 3
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: LIST
57181: PUSH
57182: LD_VAR 0 1
57186: PUSH
57187: LD_INT 3
57189: MINUS
57190: PUSH
57191: LD_VAR 0 2
57195: PUSH
57196: LD_INT 3
57198: MINUS
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: ST_TO_ADDR
// end ; 4 :
57215: GO 57496
57217: LD_INT 4
57219: DOUBLE
57220: EQUAL
57221: IFTRUE 57225
57223: GO 57358
57225: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57226: LD_ADDR_VAR 0 5
57230: PUSH
57231: LD_VAR 0 1
57235: PUSH
57236: LD_VAR 0 2
57240: PUSH
57241: LD_INT 4
57243: PLUS
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: PUSH
57253: LD_VAR 0 1
57257: PUSH
57258: LD_INT 3
57260: PLUS
57261: PUSH
57262: LD_VAR 0 2
57266: PUSH
57267: LD_INT 3
57269: PLUS
57270: PUSH
57271: LD_INT 5
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: PUSH
57279: LD_VAR 0 1
57283: PUSH
57284: LD_INT 4
57286: PLUS
57287: PUSH
57288: LD_VAR 0 2
57292: PUSH
57293: LD_INT 4
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: LIST
57300: PUSH
57301: LD_VAR 0 1
57305: PUSH
57306: LD_VAR 0 2
57310: PUSH
57311: LD_INT 3
57313: MINUS
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: PUSH
57323: LD_VAR 0 1
57327: PUSH
57328: LD_INT 4
57330: MINUS
57331: PUSH
57332: LD_VAR 0 2
57336: PUSH
57337: LD_INT 4
57339: MINUS
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: LIST
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: ST_TO_ADDR
// end ; 5 :
57356: GO 57496
57358: LD_INT 5
57360: DOUBLE
57361: EQUAL
57362: IFTRUE 57366
57364: GO 57495
57366: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57367: LD_ADDR_VAR 0 5
57371: PUSH
57372: LD_VAR 0 1
57376: PUSH
57377: LD_INT 4
57379: MINUS
57380: PUSH
57381: LD_VAR 0 2
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: LIST
57393: PUSH
57394: LD_VAR 0 1
57398: PUSH
57399: LD_VAR 0 2
57403: PUSH
57404: LD_INT 4
57406: MINUS
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: LIST
57415: PUSH
57416: LD_VAR 0 1
57420: PUSH
57421: LD_INT 4
57423: PLUS
57424: PUSH
57425: LD_VAR 0 2
57429: PUSH
57430: LD_INT 4
57432: PLUS
57433: PUSH
57434: LD_INT 5
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: PUSH
57442: LD_VAR 0 1
57446: PUSH
57447: LD_INT 3
57449: PLUS
57450: PUSH
57451: LD_VAR 0 2
57455: PUSH
57456: LD_INT 4
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: PUSH
57464: LD_VAR 0 1
57468: PUSH
57469: LD_VAR 0 2
57473: PUSH
57474: LD_INT 3
57476: PLUS
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: ST_TO_ADDR
// end ; end ;
57493: GO 57496
57495: POP
// result := list ;
57496: LD_ADDR_VAR 0 4
57500: PUSH
57501: LD_VAR 0 5
57505: ST_TO_ADDR
// end ;
57506: LD_VAR 0 4
57510: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57511: LD_INT 0
57513: PPUSH
57514: PPUSH
57515: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57516: LD_VAR 0 1
57520: NOT
57521: PUSH
57522: LD_VAR 0 2
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: LD_INT 3
57535: PUSH
57536: LD_INT 4
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: IN
57545: NOT
57546: OR
57547: IFFALSE 57551
// exit ;
57549: GO 57643
// tmp := [ ] ;
57551: LD_ADDR_VAR 0 5
57555: PUSH
57556: EMPTY
57557: ST_TO_ADDR
// for i in units do
57558: LD_ADDR_VAR 0 4
57562: PUSH
57563: LD_VAR 0 1
57567: PUSH
57568: FOR_IN
57569: IFFALSE 57612
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57571: LD_ADDR_VAR 0 5
57575: PUSH
57576: LD_VAR 0 5
57580: PPUSH
57581: LD_VAR 0 5
57585: PUSH
57586: LD_INT 1
57588: PLUS
57589: PPUSH
57590: LD_VAR 0 4
57594: PPUSH
57595: LD_VAR 0 2
57599: PPUSH
57600: CALL_OW 259
57604: PPUSH
57605: CALL_OW 2
57609: ST_TO_ADDR
57610: GO 57568
57612: POP
57613: POP
// if not tmp then
57614: LD_VAR 0 5
57618: NOT
57619: IFFALSE 57623
// exit ;
57621: GO 57643
// result := SortListByListDesc ( units , tmp ) ;
57623: LD_ADDR_VAR 0 3
57627: PUSH
57628: LD_VAR 0 1
57632: PPUSH
57633: LD_VAR 0 5
57637: PPUSH
57638: CALL_OW 77
57642: ST_TO_ADDR
// end ;
57643: LD_VAR 0 3
57647: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57648: LD_INT 0
57650: PPUSH
57651: PPUSH
57652: PPUSH
// result := false ;
57653: LD_ADDR_VAR 0 3
57657: PUSH
57658: LD_INT 0
57660: ST_TO_ADDR
// x := GetX ( building ) ;
57661: LD_ADDR_VAR 0 4
57665: PUSH
57666: LD_VAR 0 2
57670: PPUSH
57671: CALL_OW 250
57675: ST_TO_ADDR
// y := GetY ( building ) ;
57676: LD_ADDR_VAR 0 5
57680: PUSH
57681: LD_VAR 0 2
57685: PPUSH
57686: CALL_OW 251
57690: ST_TO_ADDR
// if not building or not x or not y then
57691: LD_VAR 0 2
57695: NOT
57696: PUSH
57697: LD_VAR 0 4
57701: NOT
57702: OR
57703: PUSH
57704: LD_VAR 0 5
57708: NOT
57709: OR
57710: IFFALSE 57714
// exit ;
57712: GO 57806
// if GetTaskList ( unit ) then
57714: LD_VAR 0 1
57718: PPUSH
57719: CALL_OW 437
57723: IFFALSE 57806
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57725: LD_STRING e
57727: PUSH
57728: LD_VAR 0 1
57732: PPUSH
57733: CALL_OW 437
57737: PUSH
57738: LD_INT 1
57740: ARRAY
57741: PUSH
57742: LD_INT 1
57744: ARRAY
57745: EQUAL
57746: PUSH
57747: LD_VAR 0 4
57751: PUSH
57752: LD_VAR 0 1
57756: PPUSH
57757: CALL_OW 437
57761: PUSH
57762: LD_INT 1
57764: ARRAY
57765: PUSH
57766: LD_INT 2
57768: ARRAY
57769: EQUAL
57770: AND
57771: PUSH
57772: LD_VAR 0 5
57776: PUSH
57777: LD_VAR 0 1
57781: PPUSH
57782: CALL_OW 437
57786: PUSH
57787: LD_INT 1
57789: ARRAY
57790: PUSH
57791: LD_INT 3
57793: ARRAY
57794: EQUAL
57795: AND
57796: IFFALSE 57806
// result := true end ;
57798: LD_ADDR_VAR 0 3
57802: PUSH
57803: LD_INT 1
57805: ST_TO_ADDR
// end ;
57806: LD_VAR 0 3
57810: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57811: LD_INT 0
57813: PPUSH
// result := false ;
57814: LD_ADDR_VAR 0 4
57818: PUSH
57819: LD_INT 0
57821: ST_TO_ADDR
// if GetTaskList ( unit ) then
57822: LD_VAR 0 1
57826: PPUSH
57827: CALL_OW 437
57831: IFFALSE 57914
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57833: LD_STRING M
57835: PUSH
57836: LD_VAR 0 1
57840: PPUSH
57841: CALL_OW 437
57845: PUSH
57846: LD_INT 1
57848: ARRAY
57849: PUSH
57850: LD_INT 1
57852: ARRAY
57853: EQUAL
57854: PUSH
57855: LD_VAR 0 2
57859: PUSH
57860: LD_VAR 0 1
57864: PPUSH
57865: CALL_OW 437
57869: PUSH
57870: LD_INT 1
57872: ARRAY
57873: PUSH
57874: LD_INT 2
57876: ARRAY
57877: EQUAL
57878: AND
57879: PUSH
57880: LD_VAR 0 3
57884: PUSH
57885: LD_VAR 0 1
57889: PPUSH
57890: CALL_OW 437
57894: PUSH
57895: LD_INT 1
57897: ARRAY
57898: PUSH
57899: LD_INT 3
57901: ARRAY
57902: EQUAL
57903: AND
57904: IFFALSE 57914
// result := true ;
57906: LD_ADDR_VAR 0 4
57910: PUSH
57911: LD_INT 1
57913: ST_TO_ADDR
// end ; end ;
57914: LD_VAR 0 4
57918: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57919: LD_INT 0
57921: PPUSH
57922: PPUSH
57923: PPUSH
57924: PPUSH
// if not unit or not area then
57925: LD_VAR 0 1
57929: NOT
57930: PUSH
57931: LD_VAR 0 2
57935: NOT
57936: OR
57937: IFFALSE 57941
// exit ;
57939: GO 58105
// tmp := AreaToList ( area , i ) ;
57941: LD_ADDR_VAR 0 6
57945: PUSH
57946: LD_VAR 0 2
57950: PPUSH
57951: LD_VAR 0 5
57955: PPUSH
57956: CALL_OW 517
57960: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57961: LD_ADDR_VAR 0 5
57965: PUSH
57966: DOUBLE
57967: LD_INT 1
57969: DEC
57970: ST_TO_ADDR
57971: LD_VAR 0 6
57975: PUSH
57976: LD_INT 1
57978: ARRAY
57979: PUSH
57980: FOR_TO
57981: IFFALSE 58103
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57983: LD_ADDR_VAR 0 7
57987: PUSH
57988: LD_VAR 0 6
57992: PUSH
57993: LD_INT 1
57995: ARRAY
57996: PUSH
57997: LD_VAR 0 5
58001: ARRAY
58002: PUSH
58003: LD_VAR 0 6
58007: PUSH
58008: LD_INT 2
58010: ARRAY
58011: PUSH
58012: LD_VAR 0 5
58016: ARRAY
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58022: LD_VAR 0 7
58026: PUSH
58027: LD_INT 1
58029: ARRAY
58030: PPUSH
58031: LD_VAR 0 7
58035: PUSH
58036: LD_INT 2
58038: ARRAY
58039: PPUSH
58040: CALL_OW 428
58044: PUSH
58045: LD_INT 0
58047: EQUAL
58048: IFFALSE 58101
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58050: LD_VAR 0 1
58054: PPUSH
58055: LD_VAR 0 7
58059: PUSH
58060: LD_INT 1
58062: ARRAY
58063: PPUSH
58064: LD_VAR 0 7
58068: PUSH
58069: LD_INT 2
58071: ARRAY
58072: PPUSH
58073: LD_VAR 0 3
58077: PPUSH
58078: CALL_OW 48
// result := IsPlaced ( unit ) ;
58082: LD_ADDR_VAR 0 4
58086: PUSH
58087: LD_VAR 0 1
58091: PPUSH
58092: CALL_OW 305
58096: ST_TO_ADDR
// exit ;
58097: POP
58098: POP
58099: GO 58105
// end ; end ;
58101: GO 57980
58103: POP
58104: POP
// end ;
58105: LD_VAR 0 4
58109: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58110: LD_INT 0
58112: PPUSH
58113: PPUSH
58114: PPUSH
// if not side or side > 8 then
58115: LD_VAR 0 1
58119: NOT
58120: PUSH
58121: LD_VAR 0 1
58125: PUSH
58126: LD_INT 8
58128: GREATER
58129: OR
58130: IFFALSE 58134
// exit ;
58132: GO 58321
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58134: LD_ADDR_VAR 0 4
58138: PUSH
58139: LD_INT 22
58141: PUSH
58142: LD_VAR 0 1
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 21
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PPUSH
58165: CALL_OW 69
58169: ST_TO_ADDR
// if not tmp then
58170: LD_VAR 0 4
58174: NOT
58175: IFFALSE 58179
// exit ;
58177: GO 58321
// enable_addtolog := true ;
58179: LD_ADDR_OWVAR 81
58183: PUSH
58184: LD_INT 1
58186: ST_TO_ADDR
// AddToLog ( [ ) ;
58187: LD_STRING [
58189: PPUSH
58190: CALL_OW 561
// for i in tmp do
58194: LD_ADDR_VAR 0 3
58198: PUSH
58199: LD_VAR 0 4
58203: PUSH
58204: FOR_IN
58205: IFFALSE 58312
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58207: LD_STRING [
58209: PUSH
58210: LD_VAR 0 3
58214: PPUSH
58215: CALL_OW 266
58219: STR
58220: PUSH
58221: LD_STRING , 
58223: STR
58224: PUSH
58225: LD_VAR 0 3
58229: PPUSH
58230: CALL_OW 250
58234: STR
58235: PUSH
58236: LD_STRING , 
58238: STR
58239: PUSH
58240: LD_VAR 0 3
58244: PPUSH
58245: CALL_OW 251
58249: STR
58250: PUSH
58251: LD_STRING , 
58253: STR
58254: PUSH
58255: LD_VAR 0 3
58259: PPUSH
58260: CALL_OW 254
58264: STR
58265: PUSH
58266: LD_STRING , 
58268: STR
58269: PUSH
58270: LD_VAR 0 3
58274: PPUSH
58275: LD_INT 1
58277: PPUSH
58278: CALL_OW 268
58282: STR
58283: PUSH
58284: LD_STRING , 
58286: STR
58287: PUSH
58288: LD_VAR 0 3
58292: PPUSH
58293: LD_INT 2
58295: PPUSH
58296: CALL_OW 268
58300: STR
58301: PUSH
58302: LD_STRING ],
58304: STR
58305: PPUSH
58306: CALL_OW 561
// end ;
58310: GO 58204
58312: POP
58313: POP
// AddToLog ( ]; ) ;
58314: LD_STRING ];
58316: PPUSH
58317: CALL_OW 561
// end ;
58321: LD_VAR 0 2
58325: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58326: LD_INT 0
58328: PPUSH
58329: PPUSH
58330: PPUSH
58331: PPUSH
58332: PPUSH
// if not area or not rate or not max then
58333: LD_VAR 0 1
58337: NOT
58338: PUSH
58339: LD_VAR 0 2
58343: NOT
58344: OR
58345: PUSH
58346: LD_VAR 0 4
58350: NOT
58351: OR
58352: IFFALSE 58356
// exit ;
58354: GO 58545
// while 1 do
58356: LD_INT 1
58358: IFFALSE 58545
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58360: LD_ADDR_VAR 0 9
58364: PUSH
58365: LD_VAR 0 1
58369: PPUSH
58370: LD_INT 1
58372: PPUSH
58373: CALL_OW 287
58377: PUSH
58378: LD_INT 10
58380: MUL
58381: ST_TO_ADDR
// r := rate / 10 ;
58382: LD_ADDR_VAR 0 7
58386: PUSH
58387: LD_VAR 0 2
58391: PUSH
58392: LD_INT 10
58394: DIVREAL
58395: ST_TO_ADDR
// time := 1 1$00 ;
58396: LD_ADDR_VAR 0 8
58400: PUSH
58401: LD_INT 2100
58403: ST_TO_ADDR
// if amount < min then
58404: LD_VAR 0 9
58408: PUSH
58409: LD_VAR 0 3
58413: LESS
58414: IFFALSE 58432
// r := r * 2 else
58416: LD_ADDR_VAR 0 7
58420: PUSH
58421: LD_VAR 0 7
58425: PUSH
58426: LD_INT 2
58428: MUL
58429: ST_TO_ADDR
58430: GO 58458
// if amount > max then
58432: LD_VAR 0 9
58436: PUSH
58437: LD_VAR 0 4
58441: GREATER
58442: IFFALSE 58458
// r := r / 2 ;
58444: LD_ADDR_VAR 0 7
58448: PUSH
58449: LD_VAR 0 7
58453: PUSH
58454: LD_INT 2
58456: DIVREAL
58457: ST_TO_ADDR
// time := time / r ;
58458: LD_ADDR_VAR 0 8
58462: PUSH
58463: LD_VAR 0 8
58467: PUSH
58468: LD_VAR 0 7
58472: DIVREAL
58473: ST_TO_ADDR
// if time < 0 then
58474: LD_VAR 0 8
58478: PUSH
58479: LD_INT 0
58481: LESS
58482: IFFALSE 58499
// time := time * - 1 ;
58484: LD_ADDR_VAR 0 8
58488: PUSH
58489: LD_VAR 0 8
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: MUL
58498: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58499: LD_VAR 0 8
58503: PUSH
58504: LD_INT 35
58506: PPUSH
58507: LD_INT 875
58509: PPUSH
58510: CALL_OW 12
58514: PLUS
58515: PPUSH
58516: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58520: LD_INT 1
58522: PPUSH
58523: LD_INT 5
58525: PPUSH
58526: CALL_OW 12
58530: PPUSH
58531: LD_VAR 0 1
58535: PPUSH
58536: LD_INT 1
58538: PPUSH
58539: CALL_OW 55
// end ;
58543: GO 58356
// end ;
58545: LD_VAR 0 5
58549: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58550: LD_INT 0
58552: PPUSH
58553: PPUSH
58554: PPUSH
58555: PPUSH
58556: PPUSH
58557: PPUSH
58558: PPUSH
58559: PPUSH
// if not turrets or not factories then
58560: LD_VAR 0 1
58564: NOT
58565: PUSH
58566: LD_VAR 0 2
58570: NOT
58571: OR
58572: IFFALSE 58576
// exit ;
58574: GO 58883
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58576: LD_ADDR_VAR 0 10
58580: PUSH
58581: LD_INT 5
58583: PUSH
58584: LD_INT 6
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: LD_INT 4
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: LD_INT 5
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 24
58618: PUSH
58619: LD_INT 25
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 23
58628: PUSH
58629: LD_INT 27
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 42
58642: PUSH
58643: LD_INT 43
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 44
58652: PUSH
58653: LD_INT 46
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 45
58662: PUSH
58663: LD_INT 47
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: LIST
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: LIST
58679: ST_TO_ADDR
// result := [ ] ;
58680: LD_ADDR_VAR 0 3
58684: PUSH
58685: EMPTY
58686: ST_TO_ADDR
// for i in turrets do
58687: LD_ADDR_VAR 0 4
58691: PUSH
58692: LD_VAR 0 1
58696: PUSH
58697: FOR_IN
58698: IFFALSE 58881
// begin nat := GetNation ( i ) ;
58700: LD_ADDR_VAR 0 7
58704: PUSH
58705: LD_VAR 0 4
58709: PPUSH
58710: CALL_OW 248
58714: ST_TO_ADDR
// weapon := 0 ;
58715: LD_ADDR_VAR 0 8
58719: PUSH
58720: LD_INT 0
58722: ST_TO_ADDR
// if not nat then
58723: LD_VAR 0 7
58727: NOT
58728: IFFALSE 58732
// continue ;
58730: GO 58697
// for j in list [ nat ] do
58732: LD_ADDR_VAR 0 5
58736: PUSH
58737: LD_VAR 0 10
58741: PUSH
58742: LD_VAR 0 7
58746: ARRAY
58747: PUSH
58748: FOR_IN
58749: IFFALSE 58790
// if GetBWeapon ( i ) = j [ 1 ] then
58751: LD_VAR 0 4
58755: PPUSH
58756: CALL_OW 269
58760: PUSH
58761: LD_VAR 0 5
58765: PUSH
58766: LD_INT 1
58768: ARRAY
58769: EQUAL
58770: IFFALSE 58788
// begin weapon := j [ 2 ] ;
58772: LD_ADDR_VAR 0 8
58776: PUSH
58777: LD_VAR 0 5
58781: PUSH
58782: LD_INT 2
58784: ARRAY
58785: ST_TO_ADDR
// break ;
58786: GO 58790
// end ;
58788: GO 58748
58790: POP
58791: POP
// if not weapon then
58792: LD_VAR 0 8
58796: NOT
58797: IFFALSE 58801
// continue ;
58799: GO 58697
// for k in factories do
58801: LD_ADDR_VAR 0 6
58805: PUSH
58806: LD_VAR 0 2
58810: PUSH
58811: FOR_IN
58812: IFFALSE 58877
// begin weapons := AvailableWeaponList ( k ) ;
58814: LD_ADDR_VAR 0 9
58818: PUSH
58819: LD_VAR 0 6
58823: PPUSH
58824: CALL_OW 478
58828: ST_TO_ADDR
// if not weapons then
58829: LD_VAR 0 9
58833: NOT
58834: IFFALSE 58838
// continue ;
58836: GO 58811
// if weapon in weapons then
58838: LD_VAR 0 8
58842: PUSH
58843: LD_VAR 0 9
58847: IN
58848: IFFALSE 58875
// begin result := [ i , weapon ] ;
58850: LD_ADDR_VAR 0 3
58854: PUSH
58855: LD_VAR 0 4
58859: PUSH
58860: LD_VAR 0 8
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: ST_TO_ADDR
// exit ;
58869: POP
58870: POP
58871: POP
58872: POP
58873: GO 58883
// end ; end ;
58875: GO 58811
58877: POP
58878: POP
// end ;
58879: GO 58697
58881: POP
58882: POP
// end ;
58883: LD_VAR 0 3
58887: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58888: LD_INT 0
58890: PPUSH
// if not side or side > 8 then
58891: LD_VAR 0 3
58895: NOT
58896: PUSH
58897: LD_VAR 0 3
58901: PUSH
58902: LD_INT 8
58904: GREATER
58905: OR
58906: IFFALSE 58910
// exit ;
58908: GO 58969
// if not range then
58910: LD_VAR 0 4
58914: NOT
58915: IFFALSE 58926
// range := - 12 ;
58917: LD_ADDR_VAR 0 4
58921: PUSH
58922: LD_INT 12
58924: NEG
58925: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58926: LD_VAR 0 1
58930: PPUSH
58931: LD_VAR 0 2
58935: PPUSH
58936: LD_VAR 0 3
58940: PPUSH
58941: LD_VAR 0 4
58945: PPUSH
58946: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58950: LD_VAR 0 1
58954: PPUSH
58955: LD_VAR 0 2
58959: PPUSH
58960: LD_VAR 0 3
58964: PPUSH
58965: CALL_OW 331
// end ;
58969: LD_VAR 0 5
58973: RET
// export function Video ( mode ) ; begin
58974: LD_INT 0
58976: PPUSH
// ingame_video = mode ;
58977: LD_ADDR_OWVAR 52
58981: PUSH
58982: LD_VAR 0 1
58986: ST_TO_ADDR
// interface_hidden = mode ;
58987: LD_ADDR_OWVAR 54
58991: PUSH
58992: LD_VAR 0 1
58996: ST_TO_ADDR
// end ;
58997: LD_VAR 0 2
59001: RET
// export function Join ( array , element ) ; begin
59002: LD_INT 0
59004: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59005: LD_ADDR_VAR 0 3
59009: PUSH
59010: LD_VAR 0 1
59014: PPUSH
59015: LD_VAR 0 1
59019: PUSH
59020: LD_INT 1
59022: PLUS
59023: PPUSH
59024: LD_VAR 0 2
59028: PPUSH
59029: CALL_OW 1
59033: ST_TO_ADDR
// end ;
59034: LD_VAR 0 3
59038: RET
// export function JoinUnion ( array , element ) ; begin
59039: LD_INT 0
59041: PPUSH
// result := array union element ;
59042: LD_ADDR_VAR 0 3
59046: PUSH
59047: LD_VAR 0 1
59051: PUSH
59052: LD_VAR 0 2
59056: UNION
59057: ST_TO_ADDR
// end ;
59058: LD_VAR 0 3
59062: RET
// export function GetBehemoths ( side ) ; begin
59063: LD_INT 0
59065: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59066: LD_ADDR_VAR 0 2
59070: PUSH
59071: LD_INT 22
59073: PUSH
59074: LD_VAR 0 1
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 31
59085: PUSH
59086: LD_INT 25
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PPUSH
59097: CALL_OW 69
59101: ST_TO_ADDR
// end ;
59102: LD_VAR 0 2
59106: RET
// export function Shuffle ( array ) ; var i , index ; begin
59107: LD_INT 0
59109: PPUSH
59110: PPUSH
59111: PPUSH
// result := [ ] ;
59112: LD_ADDR_VAR 0 2
59116: PUSH
59117: EMPTY
59118: ST_TO_ADDR
// if not array then
59119: LD_VAR 0 1
59123: NOT
59124: IFFALSE 59128
// exit ;
59126: GO 59227
// Randomize ;
59128: CALL_OW 10
// for i = array downto 1 do
59132: LD_ADDR_VAR 0 3
59136: PUSH
59137: DOUBLE
59138: LD_VAR 0 1
59142: INC
59143: ST_TO_ADDR
59144: LD_INT 1
59146: PUSH
59147: FOR_DOWNTO
59148: IFFALSE 59225
// begin index := rand ( 1 , array ) ;
59150: LD_ADDR_VAR 0 4
59154: PUSH
59155: LD_INT 1
59157: PPUSH
59158: LD_VAR 0 1
59162: PPUSH
59163: CALL_OW 12
59167: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59168: LD_ADDR_VAR 0 2
59172: PUSH
59173: LD_VAR 0 2
59177: PPUSH
59178: LD_VAR 0 2
59182: PUSH
59183: LD_INT 1
59185: PLUS
59186: PPUSH
59187: LD_VAR 0 1
59191: PUSH
59192: LD_VAR 0 4
59196: ARRAY
59197: PPUSH
59198: CALL_OW 2
59202: ST_TO_ADDR
// array := Delete ( array , index ) ;
59203: LD_ADDR_VAR 0 1
59207: PUSH
59208: LD_VAR 0 1
59212: PPUSH
59213: LD_VAR 0 4
59217: PPUSH
59218: CALL_OW 3
59222: ST_TO_ADDR
// end ;
59223: GO 59147
59225: POP
59226: POP
// end ;
59227: LD_VAR 0 2
59231: RET
// export function GetBaseMaterials ( base ) ; begin
59232: LD_INT 0
59234: PPUSH
// result := [ 0 , 0 , 0 ] ;
59235: LD_ADDR_VAR 0 2
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: LIST
59253: ST_TO_ADDR
// if not base then
59254: LD_VAR 0 1
59258: NOT
59259: IFFALSE 59263
// exit ;
59261: GO 59312
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59263: LD_ADDR_VAR 0 2
59267: PUSH
59268: LD_VAR 0 1
59272: PPUSH
59273: LD_INT 1
59275: PPUSH
59276: CALL_OW 275
59280: PUSH
59281: LD_VAR 0 1
59285: PPUSH
59286: LD_INT 2
59288: PPUSH
59289: CALL_OW 275
59293: PUSH
59294: LD_VAR 0 1
59298: PPUSH
59299: LD_INT 3
59301: PPUSH
59302: CALL_OW 275
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: LIST
59311: ST_TO_ADDR
// end ;
59312: LD_VAR 0 2
59316: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59317: LD_INT 0
59319: PPUSH
59320: PPUSH
// result := array ;
59321: LD_ADDR_VAR 0 3
59325: PUSH
59326: LD_VAR 0 1
59330: ST_TO_ADDR
// if size >= result then
59331: LD_VAR 0 2
59335: PUSH
59336: LD_VAR 0 3
59340: GREATEREQUAL
59341: IFFALSE 59345
// exit ;
59343: GO 59395
// if size then
59345: LD_VAR 0 2
59349: IFFALSE 59395
// for i := array downto size do
59351: LD_ADDR_VAR 0 4
59355: PUSH
59356: DOUBLE
59357: LD_VAR 0 1
59361: INC
59362: ST_TO_ADDR
59363: LD_VAR 0 2
59367: PUSH
59368: FOR_DOWNTO
59369: IFFALSE 59393
// result := Delete ( result , result ) ;
59371: LD_ADDR_VAR 0 3
59375: PUSH
59376: LD_VAR 0 3
59380: PPUSH
59381: LD_VAR 0 3
59385: PPUSH
59386: CALL_OW 3
59390: ST_TO_ADDR
59391: GO 59368
59393: POP
59394: POP
// end ;
59395: LD_VAR 0 3
59399: RET
// export function ComExit ( unit ) ; var tmp ; begin
59400: LD_INT 0
59402: PPUSH
59403: PPUSH
// if not IsInUnit ( unit ) then
59404: LD_VAR 0 1
59408: PPUSH
59409: CALL_OW 310
59413: NOT
59414: IFFALSE 59418
// exit ;
59416: GO 59478
// tmp := IsInUnit ( unit ) ;
59418: LD_ADDR_VAR 0 3
59422: PUSH
59423: LD_VAR 0 1
59427: PPUSH
59428: CALL_OW 310
59432: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59433: LD_VAR 0 3
59437: PPUSH
59438: CALL_OW 247
59442: PUSH
59443: LD_INT 2
59445: EQUAL
59446: IFFALSE 59459
// ComExitVehicle ( unit ) else
59448: LD_VAR 0 1
59452: PPUSH
59453: CALL_OW 121
59457: GO 59468
// ComExitBuilding ( unit ) ;
59459: LD_VAR 0 1
59463: PPUSH
59464: CALL_OW 122
// result := tmp ;
59468: LD_ADDR_VAR 0 2
59472: PUSH
59473: LD_VAR 0 3
59477: ST_TO_ADDR
// end ;
59478: LD_VAR 0 2
59482: RET
// export function ComExitAll ( units ) ; var i ; begin
59483: LD_INT 0
59485: PPUSH
59486: PPUSH
// if not units then
59487: LD_VAR 0 1
59491: NOT
59492: IFFALSE 59496
// exit ;
59494: GO 59522
// for i in units do
59496: LD_ADDR_VAR 0 3
59500: PUSH
59501: LD_VAR 0 1
59505: PUSH
59506: FOR_IN
59507: IFFALSE 59520
// ComExit ( i ) ;
59509: LD_VAR 0 3
59513: PPUSH
59514: CALL 59400 0 1
59518: GO 59506
59520: POP
59521: POP
// end ;
59522: LD_VAR 0 2
59526: RET
// export function ResetHc ; begin
59527: LD_INT 0
59529: PPUSH
// InitHc ;
59530: CALL_OW 19
// hc_importance := 0 ;
59534: LD_ADDR_OWVAR 32
59538: PUSH
59539: LD_INT 0
59541: ST_TO_ADDR
// end ;
59542: LD_VAR 0 1
59546: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59547: LD_INT 0
59549: PPUSH
59550: PPUSH
59551: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59552: LD_ADDR_VAR 0 6
59556: PUSH
59557: LD_VAR 0 1
59561: PUSH
59562: LD_VAR 0 3
59566: PLUS
59567: PUSH
59568: LD_INT 2
59570: DIV
59571: ST_TO_ADDR
// if _x < 0 then
59572: LD_VAR 0 6
59576: PUSH
59577: LD_INT 0
59579: LESS
59580: IFFALSE 59597
// _x := _x * - 1 ;
59582: LD_ADDR_VAR 0 6
59586: PUSH
59587: LD_VAR 0 6
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: MUL
59596: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59597: LD_ADDR_VAR 0 7
59601: PUSH
59602: LD_VAR 0 2
59606: PUSH
59607: LD_VAR 0 4
59611: PLUS
59612: PUSH
59613: LD_INT 2
59615: DIV
59616: ST_TO_ADDR
// if _y < 0 then
59617: LD_VAR 0 7
59621: PUSH
59622: LD_INT 0
59624: LESS
59625: IFFALSE 59642
// _y := _y * - 1 ;
59627: LD_ADDR_VAR 0 7
59631: PUSH
59632: LD_VAR 0 7
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: MUL
59641: ST_TO_ADDR
// result := [ _x , _y ] ;
59642: LD_ADDR_VAR 0 5
59646: PUSH
59647: LD_VAR 0 6
59651: PUSH
59652: LD_VAR 0 7
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// end ;
59661: LD_VAR 0 5
59665: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59666: LD_INT 0
59668: PPUSH
59669: PPUSH
59670: PPUSH
59671: PPUSH
// task := GetTaskList ( unit ) ;
59672: LD_ADDR_VAR 0 7
59676: PUSH
59677: LD_VAR 0 1
59681: PPUSH
59682: CALL_OW 437
59686: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59687: LD_VAR 0 7
59691: NOT
59692: PUSH
59693: LD_VAR 0 1
59697: PPUSH
59698: LD_VAR 0 2
59702: PPUSH
59703: CALL_OW 308
59707: NOT
59708: AND
59709: IFFALSE 59713
// exit ;
59711: GO 59831
// if IsInArea ( unit , area ) then
59713: LD_VAR 0 1
59717: PPUSH
59718: LD_VAR 0 2
59722: PPUSH
59723: CALL_OW 308
59727: IFFALSE 59745
// begin ComMoveToArea ( unit , goAway ) ;
59729: LD_VAR 0 1
59733: PPUSH
59734: LD_VAR 0 3
59738: PPUSH
59739: CALL_OW 113
// exit ;
59743: GO 59831
// end ; if task [ 1 ] [ 1 ] <> M then
59745: LD_VAR 0 7
59749: PUSH
59750: LD_INT 1
59752: ARRAY
59753: PUSH
59754: LD_INT 1
59756: ARRAY
59757: PUSH
59758: LD_STRING M
59760: NONEQUAL
59761: IFFALSE 59765
// exit ;
59763: GO 59831
// x := task [ 1 ] [ 2 ] ;
59765: LD_ADDR_VAR 0 5
59769: PUSH
59770: LD_VAR 0 7
59774: PUSH
59775: LD_INT 1
59777: ARRAY
59778: PUSH
59779: LD_INT 2
59781: ARRAY
59782: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59783: LD_ADDR_VAR 0 6
59787: PUSH
59788: LD_VAR 0 7
59792: PUSH
59793: LD_INT 1
59795: ARRAY
59796: PUSH
59797: LD_INT 3
59799: ARRAY
59800: ST_TO_ADDR
// if InArea ( x , y , area ) then
59801: LD_VAR 0 5
59805: PPUSH
59806: LD_VAR 0 6
59810: PPUSH
59811: LD_VAR 0 2
59815: PPUSH
59816: CALL_OW 309
59820: IFFALSE 59831
// ComStop ( unit ) ;
59822: LD_VAR 0 1
59826: PPUSH
59827: CALL_OW 141
// end ;
59831: LD_VAR 0 4
59835: RET
// export function Abs ( value ) ; begin
59836: LD_INT 0
59838: PPUSH
// result := value ;
59839: LD_ADDR_VAR 0 2
59843: PUSH
59844: LD_VAR 0 1
59848: ST_TO_ADDR
// if value < 0 then
59849: LD_VAR 0 1
59853: PUSH
59854: LD_INT 0
59856: LESS
59857: IFFALSE 59874
// result := value * - 1 ;
59859: LD_ADDR_VAR 0 2
59863: PUSH
59864: LD_VAR 0 1
59868: PUSH
59869: LD_INT 1
59871: NEG
59872: MUL
59873: ST_TO_ADDR
// end ;
59874: LD_VAR 0 2
59878: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59879: LD_INT 0
59881: PPUSH
59882: PPUSH
59883: PPUSH
59884: PPUSH
59885: PPUSH
59886: PPUSH
59887: PPUSH
59888: PPUSH
// if not unit or not building then
59889: LD_VAR 0 1
59893: NOT
59894: PUSH
59895: LD_VAR 0 2
59899: NOT
59900: OR
59901: IFFALSE 59905
// exit ;
59903: GO 60131
// x := GetX ( building ) ;
59905: LD_ADDR_VAR 0 4
59909: PUSH
59910: LD_VAR 0 2
59914: PPUSH
59915: CALL_OW 250
59919: ST_TO_ADDR
// y := GetY ( building ) ;
59920: LD_ADDR_VAR 0 6
59924: PUSH
59925: LD_VAR 0 2
59929: PPUSH
59930: CALL_OW 251
59934: ST_TO_ADDR
// d := GetDir ( building ) ;
59935: LD_ADDR_VAR 0 8
59939: PUSH
59940: LD_VAR 0 2
59944: PPUSH
59945: CALL_OW 254
59949: ST_TO_ADDR
// r := 4 ;
59950: LD_ADDR_VAR 0 9
59954: PUSH
59955: LD_INT 4
59957: ST_TO_ADDR
// for i := 1 to 5 do
59958: LD_ADDR_VAR 0 10
59962: PUSH
59963: DOUBLE
59964: LD_INT 1
59966: DEC
59967: ST_TO_ADDR
59968: LD_INT 5
59970: PUSH
59971: FOR_TO
59972: IFFALSE 60129
// begin _x := ShiftX ( x , d , r + i ) ;
59974: LD_ADDR_VAR 0 5
59978: PUSH
59979: LD_VAR 0 4
59983: PPUSH
59984: LD_VAR 0 8
59988: PPUSH
59989: LD_VAR 0 9
59993: PUSH
59994: LD_VAR 0 10
59998: PLUS
59999: PPUSH
60000: CALL_OW 272
60004: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60005: LD_ADDR_VAR 0 7
60009: PUSH
60010: LD_VAR 0 6
60014: PPUSH
60015: LD_VAR 0 8
60019: PPUSH
60020: LD_VAR 0 9
60024: PUSH
60025: LD_VAR 0 10
60029: PLUS
60030: PPUSH
60031: CALL_OW 273
60035: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60036: LD_VAR 0 5
60040: PPUSH
60041: LD_VAR 0 7
60045: PPUSH
60046: CALL_OW 488
60050: PUSH
60051: LD_VAR 0 5
60055: PPUSH
60056: LD_VAR 0 7
60060: PPUSH
60061: CALL_OW 428
60065: PPUSH
60066: CALL_OW 247
60070: PUSH
60071: LD_INT 3
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: IN
60081: NOT
60082: AND
60083: IFFALSE 60127
// begin ComMoveXY ( unit , _x , _y ) ;
60085: LD_VAR 0 1
60089: PPUSH
60090: LD_VAR 0 5
60094: PPUSH
60095: LD_VAR 0 7
60099: PPUSH
60100: CALL_OW 111
// result := [ _x , _y ] ;
60104: LD_ADDR_VAR 0 3
60108: PUSH
60109: LD_VAR 0 5
60113: PUSH
60114: LD_VAR 0 7
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: ST_TO_ADDR
// exit ;
60123: POP
60124: POP
60125: GO 60131
// end ; end ;
60127: GO 59971
60129: POP
60130: POP
// end ;
60131: LD_VAR 0 3
60135: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60136: LD_INT 0
60138: PPUSH
60139: PPUSH
60140: PPUSH
// result := 0 ;
60141: LD_ADDR_VAR 0 3
60145: PUSH
60146: LD_INT 0
60148: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60149: LD_VAR 0 1
60153: PUSH
60154: LD_INT 0
60156: LESS
60157: PUSH
60158: LD_VAR 0 1
60162: PUSH
60163: LD_INT 8
60165: GREATER
60166: OR
60167: PUSH
60168: LD_VAR 0 2
60172: PUSH
60173: LD_INT 0
60175: LESS
60176: OR
60177: PUSH
60178: LD_VAR 0 2
60182: PUSH
60183: LD_INT 8
60185: GREATER
60186: OR
60187: IFFALSE 60191
// exit ;
60189: GO 60266
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60191: LD_ADDR_VAR 0 4
60195: PUSH
60196: LD_INT 22
60198: PUSH
60199: LD_VAR 0 2
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PPUSH
60208: CALL_OW 69
60212: PUSH
60213: FOR_IN
60214: IFFALSE 60264
// begin un := UnitShoot ( i ) ;
60216: LD_ADDR_VAR 0 5
60220: PUSH
60221: LD_VAR 0 4
60225: PPUSH
60226: CALL_OW 504
60230: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60231: LD_VAR 0 5
60235: PPUSH
60236: CALL_OW 255
60240: PUSH
60241: LD_VAR 0 1
60245: EQUAL
60246: IFFALSE 60262
// begin result := un ;
60248: LD_ADDR_VAR 0 3
60252: PUSH
60253: LD_VAR 0 5
60257: ST_TO_ADDR
// exit ;
60258: POP
60259: POP
60260: GO 60266
// end ; end ;
60262: GO 60213
60264: POP
60265: POP
// end ;
60266: LD_VAR 0 3
60270: RET
// export function GetCargoBay ( units ) ; begin
60271: LD_INT 0
60273: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60274: LD_ADDR_VAR 0 2
60278: PUSH
60279: LD_VAR 0 1
60283: PPUSH
60284: LD_INT 2
60286: PUSH
60287: LD_INT 34
60289: PUSH
60290: LD_INT 12
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 34
60299: PUSH
60300: LD_INT 51
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 34
60309: PUSH
60310: LD_INT 32
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 34
60319: PUSH
60320: LD_INT 89
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: PPUSH
60334: CALL_OW 72
60338: ST_TO_ADDR
// end ;
60339: LD_VAR 0 2
60343: RET
// export function Negate ( value ) ; begin
60344: LD_INT 0
60346: PPUSH
// result := not value ;
60347: LD_ADDR_VAR 0 2
60351: PUSH
60352: LD_VAR 0 1
60356: NOT
60357: ST_TO_ADDR
// end ;
60358: LD_VAR 0 2
60362: RET
// export function Inc ( value ) ; begin
60363: LD_INT 0
60365: PPUSH
// result := value + 1 ;
60366: LD_ADDR_VAR 0 2
60370: PUSH
60371: LD_VAR 0 1
60375: PUSH
60376: LD_INT 1
60378: PLUS
60379: ST_TO_ADDR
// end ;
60380: LD_VAR 0 2
60384: RET
// export function Dec ( value ) ; begin
60385: LD_INT 0
60387: PPUSH
// result := value - 1 ;
60388: LD_ADDR_VAR 0 2
60392: PUSH
60393: LD_VAR 0 1
60397: PUSH
60398: LD_INT 1
60400: MINUS
60401: ST_TO_ADDR
// end ;
60402: LD_VAR 0 2
60406: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60407: LD_INT 0
60409: PPUSH
60410: PPUSH
60411: PPUSH
60412: PPUSH
60413: PPUSH
60414: PPUSH
60415: PPUSH
60416: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60417: LD_VAR 0 1
60421: PPUSH
60422: LD_VAR 0 2
60426: PPUSH
60427: CALL_OW 488
60431: NOT
60432: PUSH
60433: LD_VAR 0 3
60437: PPUSH
60438: LD_VAR 0 4
60442: PPUSH
60443: CALL_OW 488
60447: NOT
60448: OR
60449: IFFALSE 60462
// begin result := - 1 ;
60451: LD_ADDR_VAR 0 5
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: ST_TO_ADDR
// exit ;
60460: GO 60697
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60462: LD_ADDR_VAR 0 12
60466: PUSH
60467: LD_VAR 0 1
60471: PPUSH
60472: LD_VAR 0 2
60476: PPUSH
60477: LD_VAR 0 3
60481: PPUSH
60482: LD_VAR 0 4
60486: PPUSH
60487: CALL 59547 0 4
60491: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60492: LD_ADDR_VAR 0 11
60496: PUSH
60497: LD_VAR 0 1
60501: PPUSH
60502: LD_VAR 0 2
60506: PPUSH
60507: LD_VAR 0 12
60511: PUSH
60512: LD_INT 1
60514: ARRAY
60515: PPUSH
60516: LD_VAR 0 12
60520: PUSH
60521: LD_INT 2
60523: ARRAY
60524: PPUSH
60525: CALL_OW 298
60529: ST_TO_ADDR
// distance := 9999 ;
60530: LD_ADDR_VAR 0 10
60534: PUSH
60535: LD_INT 9999
60537: ST_TO_ADDR
// for i := 0 to 5 do
60538: LD_ADDR_VAR 0 6
60542: PUSH
60543: DOUBLE
60544: LD_INT 0
60546: DEC
60547: ST_TO_ADDR
60548: LD_INT 5
60550: PUSH
60551: FOR_TO
60552: IFFALSE 60695
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60554: LD_ADDR_VAR 0 7
60558: PUSH
60559: LD_VAR 0 1
60563: PPUSH
60564: LD_VAR 0 6
60568: PPUSH
60569: LD_VAR 0 11
60573: PPUSH
60574: CALL_OW 272
60578: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60579: LD_ADDR_VAR 0 8
60583: PUSH
60584: LD_VAR 0 2
60588: PPUSH
60589: LD_VAR 0 6
60593: PPUSH
60594: LD_VAR 0 11
60598: PPUSH
60599: CALL_OW 273
60603: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60604: LD_VAR 0 7
60608: PPUSH
60609: LD_VAR 0 8
60613: PPUSH
60614: CALL_OW 488
60618: NOT
60619: IFFALSE 60623
// continue ;
60621: GO 60551
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60623: LD_ADDR_VAR 0 9
60627: PUSH
60628: LD_VAR 0 12
60632: PUSH
60633: LD_INT 1
60635: ARRAY
60636: PPUSH
60637: LD_VAR 0 12
60641: PUSH
60642: LD_INT 2
60644: ARRAY
60645: PPUSH
60646: LD_VAR 0 7
60650: PPUSH
60651: LD_VAR 0 8
60655: PPUSH
60656: CALL_OW 298
60660: ST_TO_ADDR
// if tmp < distance then
60661: LD_VAR 0 9
60665: PUSH
60666: LD_VAR 0 10
60670: LESS
60671: IFFALSE 60693
// begin result := i ;
60673: LD_ADDR_VAR 0 5
60677: PUSH
60678: LD_VAR 0 6
60682: ST_TO_ADDR
// distance := tmp ;
60683: LD_ADDR_VAR 0 10
60687: PUSH
60688: LD_VAR 0 9
60692: ST_TO_ADDR
// end ; end ;
60693: GO 60551
60695: POP
60696: POP
// end ;
60697: LD_VAR 0 5
60701: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60702: LD_INT 0
60704: PPUSH
60705: PPUSH
// if not driver or not IsInUnit ( driver ) then
60706: LD_VAR 0 1
60710: NOT
60711: PUSH
60712: LD_VAR 0 1
60716: PPUSH
60717: CALL_OW 310
60721: NOT
60722: OR
60723: IFFALSE 60727
// exit ;
60725: GO 60817
// vehicle := IsInUnit ( driver ) ;
60727: LD_ADDR_VAR 0 3
60731: PUSH
60732: LD_VAR 0 1
60736: PPUSH
60737: CALL_OW 310
60741: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60742: LD_VAR 0 1
60746: PPUSH
60747: LD_STRING \
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: PUSH
60777: LD_STRING E
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: LD_VAR 0 3
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: LD_INT 0
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PPUSH
60813: CALL_OW 446
// end ;
60817: LD_VAR 0 2
60821: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60822: LD_INT 0
60824: PPUSH
60825: PPUSH
// if not driver or not IsInUnit ( driver ) then
60826: LD_VAR 0 1
60830: NOT
60831: PUSH
60832: LD_VAR 0 1
60836: PPUSH
60837: CALL_OW 310
60841: NOT
60842: OR
60843: IFFALSE 60847
// exit ;
60845: GO 60937
// vehicle := IsInUnit ( driver ) ;
60847: LD_ADDR_VAR 0 3
60851: PUSH
60852: LD_VAR 0 1
60856: PPUSH
60857: CALL_OW 310
60861: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60862: LD_VAR 0 1
60866: PPUSH
60867: LD_STRING \
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: PUSH
60897: LD_STRING E
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_VAR 0 3
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PPUSH
60933: CALL_OW 447
// end ;
60937: LD_VAR 0 2
60941: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60942: LD_INT 0
60944: PPUSH
60945: PPUSH
60946: PPUSH
// tmp := [ ] ;
60947: LD_ADDR_VAR 0 5
60951: PUSH
60952: EMPTY
60953: ST_TO_ADDR
// for i in units do
60954: LD_ADDR_VAR 0 4
60958: PUSH
60959: LD_VAR 0 1
60963: PUSH
60964: FOR_IN
60965: IFFALSE 61003
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60967: LD_ADDR_VAR 0 5
60971: PUSH
60972: LD_VAR 0 5
60976: PPUSH
60977: LD_VAR 0 5
60981: PUSH
60982: LD_INT 1
60984: PLUS
60985: PPUSH
60986: LD_VAR 0 4
60990: PPUSH
60991: CALL_OW 256
60995: PPUSH
60996: CALL_OW 2
61000: ST_TO_ADDR
61001: GO 60964
61003: POP
61004: POP
// if not tmp then
61005: LD_VAR 0 5
61009: NOT
61010: IFFALSE 61014
// exit ;
61012: GO 61062
// if asc then
61014: LD_VAR 0 2
61018: IFFALSE 61042
// result := SortListByListAsc ( units , tmp ) else
61020: LD_ADDR_VAR 0 3
61024: PUSH
61025: LD_VAR 0 1
61029: PPUSH
61030: LD_VAR 0 5
61034: PPUSH
61035: CALL_OW 76
61039: ST_TO_ADDR
61040: GO 61062
// result := SortListByListDesc ( units , tmp ) ;
61042: LD_ADDR_VAR 0 3
61046: PUSH
61047: LD_VAR 0 1
61051: PPUSH
61052: LD_VAR 0 5
61056: PPUSH
61057: CALL_OW 77
61061: ST_TO_ADDR
// end ;
61062: LD_VAR 0 3
61066: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61067: LD_INT 0
61069: PPUSH
61070: PPUSH
// task := GetTaskList ( mech ) ;
61071: LD_ADDR_VAR 0 4
61075: PUSH
61076: LD_VAR 0 1
61080: PPUSH
61081: CALL_OW 437
61085: ST_TO_ADDR
// if not task then
61086: LD_VAR 0 4
61090: NOT
61091: IFFALSE 61095
// exit ;
61093: GO 61137
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61095: LD_ADDR_VAR 0 3
61099: PUSH
61100: LD_VAR 0 4
61104: PUSH
61105: LD_INT 1
61107: ARRAY
61108: PUSH
61109: LD_INT 1
61111: ARRAY
61112: PUSH
61113: LD_STRING r
61115: EQUAL
61116: PUSH
61117: LD_VAR 0 4
61121: PUSH
61122: LD_INT 1
61124: ARRAY
61125: PUSH
61126: LD_INT 4
61128: ARRAY
61129: PUSH
61130: LD_VAR 0 2
61134: EQUAL
61135: AND
61136: ST_TO_ADDR
// end ;
61137: LD_VAR 0 3
61141: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61142: LD_INT 0
61144: PPUSH
// SetDir ( unit , d ) ;
61145: LD_VAR 0 1
61149: PPUSH
61150: LD_VAR 0 4
61154: PPUSH
61155: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61159: LD_VAR 0 1
61163: PPUSH
61164: LD_VAR 0 2
61168: PPUSH
61169: LD_VAR 0 3
61173: PPUSH
61174: LD_VAR 0 5
61178: PPUSH
61179: CALL_OW 48
// end ;
61183: LD_VAR 0 6
61187: RET
// export function ToNaturalNumber ( number ) ; begin
61188: LD_INT 0
61190: PPUSH
// result := number div 1 ;
61191: LD_ADDR_VAR 0 2
61195: PUSH
61196: LD_VAR 0 1
61200: PUSH
61201: LD_INT 1
61203: DIV
61204: ST_TO_ADDR
// if number < 0 then
61205: LD_VAR 0 1
61209: PUSH
61210: LD_INT 0
61212: LESS
61213: IFFALSE 61223
// result := 0 ;
61215: LD_ADDR_VAR 0 2
61219: PUSH
61220: LD_INT 0
61222: ST_TO_ADDR
// end ;
61223: LD_VAR 0 2
61227: RET
// export function SortByClass ( units , class ) ; var un ; begin
61228: LD_INT 0
61230: PPUSH
61231: PPUSH
// if not units or not class then
61232: LD_VAR 0 1
61236: NOT
61237: PUSH
61238: LD_VAR 0 2
61242: NOT
61243: OR
61244: IFFALSE 61248
// exit ;
61246: GO 61343
// result := [ ] ;
61248: LD_ADDR_VAR 0 3
61252: PUSH
61253: EMPTY
61254: ST_TO_ADDR
// for un in units do
61255: LD_ADDR_VAR 0 4
61259: PUSH
61260: LD_VAR 0 1
61264: PUSH
61265: FOR_IN
61266: IFFALSE 61341
// if GetClass ( un ) = class then
61268: LD_VAR 0 4
61272: PPUSH
61273: CALL_OW 257
61277: PUSH
61278: LD_VAR 0 2
61282: EQUAL
61283: IFFALSE 61310
// result := Insert ( result , 1 , un ) else
61285: LD_ADDR_VAR 0 3
61289: PUSH
61290: LD_VAR 0 3
61294: PPUSH
61295: LD_INT 1
61297: PPUSH
61298: LD_VAR 0 4
61302: PPUSH
61303: CALL_OW 2
61307: ST_TO_ADDR
61308: GO 61339
// result := Replace ( result , result + 1 , un ) ;
61310: LD_ADDR_VAR 0 3
61314: PUSH
61315: LD_VAR 0 3
61319: PPUSH
61320: LD_VAR 0 3
61324: PUSH
61325: LD_INT 1
61327: PLUS
61328: PPUSH
61329: LD_VAR 0 4
61333: PPUSH
61334: CALL_OW 1
61338: ST_TO_ADDR
61339: GO 61265
61341: POP
61342: POP
// end ;
61343: LD_VAR 0 3
61347: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61348: LD_INT 0
61350: PPUSH
61351: PPUSH
61352: PPUSH
61353: PPUSH
61354: PPUSH
61355: PPUSH
61356: PPUSH
// result := [ ] ;
61357: LD_ADDR_VAR 0 4
61361: PUSH
61362: EMPTY
61363: ST_TO_ADDR
// if x - r < 0 then
61364: LD_VAR 0 1
61368: PUSH
61369: LD_VAR 0 3
61373: MINUS
61374: PUSH
61375: LD_INT 0
61377: LESS
61378: IFFALSE 61390
// min_x := 0 else
61380: LD_ADDR_VAR 0 8
61384: PUSH
61385: LD_INT 0
61387: ST_TO_ADDR
61388: GO 61406
// min_x := x - r ;
61390: LD_ADDR_VAR 0 8
61394: PUSH
61395: LD_VAR 0 1
61399: PUSH
61400: LD_VAR 0 3
61404: MINUS
61405: ST_TO_ADDR
// if y - r < 0 then
61406: LD_VAR 0 2
61410: PUSH
61411: LD_VAR 0 3
61415: MINUS
61416: PUSH
61417: LD_INT 0
61419: LESS
61420: IFFALSE 61432
// min_y := 0 else
61422: LD_ADDR_VAR 0 7
61426: PUSH
61427: LD_INT 0
61429: ST_TO_ADDR
61430: GO 61448
// min_y := y - r ;
61432: LD_ADDR_VAR 0 7
61436: PUSH
61437: LD_VAR 0 2
61441: PUSH
61442: LD_VAR 0 3
61446: MINUS
61447: ST_TO_ADDR
// max_x := x + r ;
61448: LD_ADDR_VAR 0 9
61452: PUSH
61453: LD_VAR 0 1
61457: PUSH
61458: LD_VAR 0 3
61462: PLUS
61463: ST_TO_ADDR
// max_y := y + r ;
61464: LD_ADDR_VAR 0 10
61468: PUSH
61469: LD_VAR 0 2
61473: PUSH
61474: LD_VAR 0 3
61478: PLUS
61479: ST_TO_ADDR
// for _x = min_x to max_x do
61480: LD_ADDR_VAR 0 5
61484: PUSH
61485: DOUBLE
61486: LD_VAR 0 8
61490: DEC
61491: ST_TO_ADDR
61492: LD_VAR 0 9
61496: PUSH
61497: FOR_TO
61498: IFFALSE 61599
// for _y = min_y to max_y do
61500: LD_ADDR_VAR 0 6
61504: PUSH
61505: DOUBLE
61506: LD_VAR 0 7
61510: DEC
61511: ST_TO_ADDR
61512: LD_VAR 0 10
61516: PUSH
61517: FOR_TO
61518: IFFALSE 61595
// begin if not ValidHex ( _x , _y ) then
61520: LD_VAR 0 5
61524: PPUSH
61525: LD_VAR 0 6
61529: PPUSH
61530: CALL_OW 488
61534: NOT
61535: IFFALSE 61539
// continue ;
61537: GO 61517
// if GetResourceTypeXY ( _x , _y ) then
61539: LD_VAR 0 5
61543: PPUSH
61544: LD_VAR 0 6
61548: PPUSH
61549: CALL_OW 283
61553: IFFALSE 61593
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61555: LD_ADDR_VAR 0 4
61559: PUSH
61560: LD_VAR 0 4
61564: PPUSH
61565: LD_VAR 0 4
61569: PUSH
61570: LD_INT 1
61572: PLUS
61573: PPUSH
61574: LD_VAR 0 5
61578: PUSH
61579: LD_VAR 0 6
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PPUSH
61588: CALL_OW 1
61592: ST_TO_ADDR
// end ;
61593: GO 61517
61595: POP
61596: POP
61597: GO 61497
61599: POP
61600: POP
// end ;
61601: LD_VAR 0 4
61605: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61606: LD_INT 0
61608: PPUSH
61609: PPUSH
61610: PPUSH
61611: PPUSH
61612: PPUSH
61613: PPUSH
61614: PPUSH
61615: PPUSH
// if not units then
61616: LD_VAR 0 1
61620: NOT
61621: IFFALSE 61625
// exit ;
61623: GO 62149
// result := UnitFilter ( units , [ f_ok ] ) ;
61625: LD_ADDR_VAR 0 3
61629: PUSH
61630: LD_VAR 0 1
61634: PPUSH
61635: LD_INT 50
61637: PUSH
61638: EMPTY
61639: LIST
61640: PPUSH
61641: CALL_OW 72
61645: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61646: LD_ADDR_VAR 0 8
61650: PUSH
61651: LD_VAR 0 1
61655: PUSH
61656: LD_INT 1
61658: ARRAY
61659: PPUSH
61660: CALL_OW 255
61664: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61665: LD_ADDR_VAR 0 10
61669: PUSH
61670: LD_INT 29
61672: PUSH
61673: LD_INT 91
61675: PUSH
61676: LD_INT 49
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: LIST
61683: ST_TO_ADDR
// if not result then
61684: LD_VAR 0 3
61688: NOT
61689: IFFALSE 61693
// exit ;
61691: GO 62149
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61693: LD_ADDR_VAR 0 5
61697: PUSH
61698: LD_INT 81
61700: PUSH
61701: LD_VAR 0 8
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PPUSH
61710: CALL_OW 69
61714: ST_TO_ADDR
// for i in result do
61715: LD_ADDR_VAR 0 4
61719: PUSH
61720: LD_VAR 0 3
61724: PUSH
61725: FOR_IN
61726: IFFALSE 62147
// begin tag := GetTag ( i ) + 1 ;
61728: LD_ADDR_VAR 0 9
61732: PUSH
61733: LD_VAR 0 4
61737: PPUSH
61738: CALL_OW 110
61742: PUSH
61743: LD_INT 1
61745: PLUS
61746: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61747: LD_ADDR_VAR 0 7
61751: PUSH
61752: LD_VAR 0 4
61756: PPUSH
61757: CALL_OW 250
61761: PPUSH
61762: LD_VAR 0 4
61766: PPUSH
61767: CALL_OW 251
61771: PPUSH
61772: LD_INT 6
61774: PPUSH
61775: CALL 61348 0 3
61779: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61780: LD_VAR 0 4
61784: PPUSH
61785: CALL_OW 247
61789: PUSH
61790: LD_INT 2
61792: EQUAL
61793: PUSH
61794: LD_VAR 0 7
61798: AND
61799: PUSH
61800: LD_VAR 0 4
61804: PPUSH
61805: CALL_OW 264
61809: PUSH
61810: LD_VAR 0 10
61814: IN
61815: NOT
61816: AND
61817: IFFALSE 61856
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61819: LD_VAR 0 4
61823: PPUSH
61824: LD_VAR 0 7
61828: PUSH
61829: LD_INT 1
61831: ARRAY
61832: PUSH
61833: LD_INT 1
61835: ARRAY
61836: PPUSH
61837: LD_VAR 0 7
61841: PUSH
61842: LD_INT 1
61844: ARRAY
61845: PUSH
61846: LD_INT 2
61848: ARRAY
61849: PPUSH
61850: CALL_OW 116
61854: GO 62145
// if path > tag then
61856: LD_VAR 0 2
61860: PUSH
61861: LD_VAR 0 9
61865: GREATER
61866: IFFALSE 62074
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61868: LD_ADDR_VAR 0 6
61872: PUSH
61873: LD_VAR 0 5
61877: PPUSH
61878: LD_INT 91
61880: PUSH
61881: LD_VAR 0 4
61885: PUSH
61886: LD_INT 8
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: LIST
61893: PPUSH
61894: CALL_OW 72
61898: ST_TO_ADDR
// if nearEnemy then
61899: LD_VAR 0 6
61903: IFFALSE 61972
// begin if GetWeapon ( i ) = ru_time_lapser then
61905: LD_VAR 0 4
61909: PPUSH
61910: CALL_OW 264
61914: PUSH
61915: LD_INT 49
61917: EQUAL
61918: IFFALSE 61946
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61920: LD_VAR 0 4
61924: PPUSH
61925: LD_VAR 0 6
61929: PPUSH
61930: LD_VAR 0 4
61934: PPUSH
61935: CALL_OW 74
61939: PPUSH
61940: CALL_OW 112
61944: GO 61970
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61946: LD_VAR 0 4
61950: PPUSH
61951: LD_VAR 0 6
61955: PPUSH
61956: LD_VAR 0 4
61960: PPUSH
61961: CALL_OW 74
61965: PPUSH
61966: CALL_OW 115
// end else
61970: GO 62072
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61972: LD_VAR 0 4
61976: PPUSH
61977: LD_VAR 0 2
61981: PUSH
61982: LD_VAR 0 9
61986: ARRAY
61987: PUSH
61988: LD_INT 1
61990: ARRAY
61991: PPUSH
61992: LD_VAR 0 2
61996: PUSH
61997: LD_VAR 0 9
62001: ARRAY
62002: PUSH
62003: LD_INT 2
62005: ARRAY
62006: PPUSH
62007: CALL_OW 297
62011: PUSH
62012: LD_INT 6
62014: GREATER
62015: IFFALSE 62058
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62017: LD_VAR 0 4
62021: PPUSH
62022: LD_VAR 0 2
62026: PUSH
62027: LD_VAR 0 9
62031: ARRAY
62032: PUSH
62033: LD_INT 1
62035: ARRAY
62036: PPUSH
62037: LD_VAR 0 2
62041: PUSH
62042: LD_VAR 0 9
62046: ARRAY
62047: PUSH
62048: LD_INT 2
62050: ARRAY
62051: PPUSH
62052: CALL_OW 114
62056: GO 62072
// SetTag ( i , tag ) ;
62058: LD_VAR 0 4
62062: PPUSH
62063: LD_VAR 0 9
62067: PPUSH
62068: CALL_OW 109
// end else
62072: GO 62145
// if enemy then
62074: LD_VAR 0 5
62078: IFFALSE 62145
// begin if GetWeapon ( i ) = ru_time_lapser then
62080: LD_VAR 0 4
62084: PPUSH
62085: CALL_OW 264
62089: PUSH
62090: LD_INT 49
62092: EQUAL
62093: IFFALSE 62121
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62095: LD_VAR 0 4
62099: PPUSH
62100: LD_VAR 0 5
62104: PPUSH
62105: LD_VAR 0 4
62109: PPUSH
62110: CALL_OW 74
62114: PPUSH
62115: CALL_OW 112
62119: GO 62145
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62121: LD_VAR 0 4
62125: PPUSH
62126: LD_VAR 0 5
62130: PPUSH
62131: LD_VAR 0 4
62135: PPUSH
62136: CALL_OW 74
62140: PPUSH
62141: CALL_OW 115
// end ; end ;
62145: GO 61725
62147: POP
62148: POP
// end ;
62149: LD_VAR 0 3
62153: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62154: LD_INT 0
62156: PPUSH
62157: PPUSH
62158: PPUSH
// if not unit or IsInUnit ( unit ) then
62159: LD_VAR 0 1
62163: NOT
62164: PUSH
62165: LD_VAR 0 1
62169: PPUSH
62170: CALL_OW 310
62174: OR
62175: IFFALSE 62179
// exit ;
62177: GO 62270
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62179: LD_ADDR_VAR 0 4
62183: PUSH
62184: LD_VAR 0 1
62188: PPUSH
62189: CALL_OW 250
62193: PPUSH
62194: LD_VAR 0 2
62198: PPUSH
62199: LD_INT 1
62201: PPUSH
62202: CALL_OW 272
62206: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62207: LD_ADDR_VAR 0 5
62211: PUSH
62212: LD_VAR 0 1
62216: PPUSH
62217: CALL_OW 251
62221: PPUSH
62222: LD_VAR 0 2
62226: PPUSH
62227: LD_INT 1
62229: PPUSH
62230: CALL_OW 273
62234: ST_TO_ADDR
// if ValidHex ( x , y ) then
62235: LD_VAR 0 4
62239: PPUSH
62240: LD_VAR 0 5
62244: PPUSH
62245: CALL_OW 488
62249: IFFALSE 62270
// ComTurnXY ( unit , x , y ) ;
62251: LD_VAR 0 1
62255: PPUSH
62256: LD_VAR 0 4
62260: PPUSH
62261: LD_VAR 0 5
62265: PPUSH
62266: CALL_OW 118
// end ;
62270: LD_VAR 0 3
62274: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62275: LD_INT 0
62277: PPUSH
62278: PPUSH
// result := false ;
62279: LD_ADDR_VAR 0 3
62283: PUSH
62284: LD_INT 0
62286: ST_TO_ADDR
// if not units then
62287: LD_VAR 0 2
62291: NOT
62292: IFFALSE 62296
// exit ;
62294: GO 62341
// for i in units do
62296: LD_ADDR_VAR 0 4
62300: PUSH
62301: LD_VAR 0 2
62305: PUSH
62306: FOR_IN
62307: IFFALSE 62339
// if See ( side , i ) then
62309: LD_VAR 0 1
62313: PPUSH
62314: LD_VAR 0 4
62318: PPUSH
62319: CALL_OW 292
62323: IFFALSE 62337
// begin result := true ;
62325: LD_ADDR_VAR 0 3
62329: PUSH
62330: LD_INT 1
62332: ST_TO_ADDR
// exit ;
62333: POP
62334: POP
62335: GO 62341
// end ;
62337: GO 62306
62339: POP
62340: POP
// end ;
62341: LD_VAR 0 3
62345: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62346: LD_INT 0
62348: PPUSH
62349: PPUSH
62350: PPUSH
62351: PPUSH
// if not unit or not points then
62352: LD_VAR 0 1
62356: NOT
62357: PUSH
62358: LD_VAR 0 2
62362: NOT
62363: OR
62364: IFFALSE 62368
// exit ;
62366: GO 62458
// dist := 99999 ;
62368: LD_ADDR_VAR 0 5
62372: PUSH
62373: LD_INT 99999
62375: ST_TO_ADDR
// for i in points do
62376: LD_ADDR_VAR 0 4
62380: PUSH
62381: LD_VAR 0 2
62385: PUSH
62386: FOR_IN
62387: IFFALSE 62456
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62389: LD_ADDR_VAR 0 6
62393: PUSH
62394: LD_VAR 0 1
62398: PPUSH
62399: LD_VAR 0 4
62403: PUSH
62404: LD_INT 1
62406: ARRAY
62407: PPUSH
62408: LD_VAR 0 4
62412: PUSH
62413: LD_INT 2
62415: ARRAY
62416: PPUSH
62417: CALL_OW 297
62421: ST_TO_ADDR
// if tmpDist < dist then
62422: LD_VAR 0 6
62426: PUSH
62427: LD_VAR 0 5
62431: LESS
62432: IFFALSE 62454
// begin result := i ;
62434: LD_ADDR_VAR 0 3
62438: PUSH
62439: LD_VAR 0 4
62443: ST_TO_ADDR
// dist := tmpDist ;
62444: LD_ADDR_VAR 0 5
62448: PUSH
62449: LD_VAR 0 6
62453: ST_TO_ADDR
// end ; end ;
62454: GO 62386
62456: POP
62457: POP
// end ;
62458: LD_VAR 0 3
62462: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62463: LD_INT 0
62465: PPUSH
// uc_side := side ;
62466: LD_ADDR_OWVAR 20
62470: PUSH
62471: LD_VAR 0 1
62475: ST_TO_ADDR
// uc_nation := 3 ;
62476: LD_ADDR_OWVAR 21
62480: PUSH
62481: LD_INT 3
62483: ST_TO_ADDR
// vc_chassis := 25 ;
62484: LD_ADDR_OWVAR 37
62488: PUSH
62489: LD_INT 25
62491: ST_TO_ADDR
// vc_engine := engine_siberite ;
62492: LD_ADDR_OWVAR 39
62496: PUSH
62497: LD_INT 3
62499: ST_TO_ADDR
// vc_control := control_computer ;
62500: LD_ADDR_OWVAR 38
62504: PUSH
62505: LD_INT 3
62507: ST_TO_ADDR
// vc_weapon := 59 ;
62508: LD_ADDR_OWVAR 40
62512: PUSH
62513: LD_INT 59
62515: ST_TO_ADDR
// result := CreateVehicle ;
62516: LD_ADDR_VAR 0 5
62520: PUSH
62521: CALL_OW 45
62525: ST_TO_ADDR
// SetDir ( result , d ) ;
62526: LD_VAR 0 5
62530: PPUSH
62531: LD_VAR 0 4
62535: PPUSH
62536: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62540: LD_VAR 0 5
62544: PPUSH
62545: LD_VAR 0 2
62549: PPUSH
62550: LD_VAR 0 3
62554: PPUSH
62555: LD_INT 0
62557: PPUSH
62558: CALL_OW 48
// end ;
62562: LD_VAR 0 5
62566: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62567: LD_INT 0
62569: PPUSH
62570: PPUSH
62571: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62572: LD_ADDR_VAR 0 2
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62595: LD_VAR 0 1
62599: NOT
62600: PUSH
62601: LD_VAR 0 1
62605: PPUSH
62606: CALL_OW 264
62610: PUSH
62611: LD_INT 12
62613: PUSH
62614: LD_INT 51
62616: PUSH
62617: LD_INT 32
62619: PUSH
62620: LD_INT 89
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: IN
62629: NOT
62630: OR
62631: IFFALSE 62635
// exit ;
62633: GO 62733
// for i := 1 to 3 do
62635: LD_ADDR_VAR 0 3
62639: PUSH
62640: DOUBLE
62641: LD_INT 1
62643: DEC
62644: ST_TO_ADDR
62645: LD_INT 3
62647: PUSH
62648: FOR_TO
62649: IFFALSE 62731
// begin tmp := GetCargo ( cargo , i ) ;
62651: LD_ADDR_VAR 0 4
62655: PUSH
62656: LD_VAR 0 1
62660: PPUSH
62661: LD_VAR 0 3
62665: PPUSH
62666: CALL_OW 289
62670: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62671: LD_ADDR_VAR 0 2
62675: PUSH
62676: LD_VAR 0 2
62680: PPUSH
62681: LD_VAR 0 3
62685: PPUSH
62686: LD_VAR 0 4
62690: PPUSH
62691: CALL_OW 1
62695: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62696: LD_ADDR_VAR 0 2
62700: PUSH
62701: LD_VAR 0 2
62705: PPUSH
62706: LD_INT 4
62708: PPUSH
62709: LD_VAR 0 2
62713: PUSH
62714: LD_INT 4
62716: ARRAY
62717: PUSH
62718: LD_VAR 0 4
62722: PLUS
62723: PPUSH
62724: CALL_OW 1
62728: ST_TO_ADDR
// end ;
62729: GO 62648
62731: POP
62732: POP
// end ;
62733: LD_VAR 0 2
62737: RET
// export function Length ( array ) ; begin
62738: LD_INT 0
62740: PPUSH
// result := array + 0 ;
62741: LD_ADDR_VAR 0 2
62745: PUSH
62746: LD_VAR 0 1
62750: PUSH
62751: LD_INT 0
62753: PLUS
62754: ST_TO_ADDR
// end ;
62755: LD_VAR 0 2
62759: RET
// export function PrepareArray ( array ) ; begin
62760: LD_INT 0
62762: PPUSH
// result := array diff 0 ;
62763: LD_ADDR_VAR 0 2
62767: PUSH
62768: LD_VAR 0 1
62772: PUSH
62773: LD_INT 0
62775: DIFF
62776: ST_TO_ADDR
// if not result [ 1 ] then
62777: LD_VAR 0 2
62781: PUSH
62782: LD_INT 1
62784: ARRAY
62785: NOT
62786: IFFALSE 62806
// result := Delete ( result , 1 ) ;
62788: LD_ADDR_VAR 0 2
62792: PUSH
62793: LD_VAR 0 2
62797: PPUSH
62798: LD_INT 1
62800: PPUSH
62801: CALL_OW 3
62805: ST_TO_ADDR
// end ;
62806: LD_VAR 0 2
62810: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62811: LD_INT 0
62813: PPUSH
62814: PPUSH
62815: PPUSH
62816: PPUSH
// sibRocketRange := 25 ;
62817: LD_ADDR_VAR 0 6
62821: PUSH
62822: LD_INT 25
62824: ST_TO_ADDR
// result := false ;
62825: LD_ADDR_VAR 0 4
62829: PUSH
62830: LD_INT 0
62832: ST_TO_ADDR
// for i := 0 to 5 do
62833: LD_ADDR_VAR 0 5
62837: PUSH
62838: DOUBLE
62839: LD_INT 0
62841: DEC
62842: ST_TO_ADDR
62843: LD_INT 5
62845: PUSH
62846: FOR_TO
62847: IFFALSE 62914
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62849: LD_VAR 0 1
62853: PPUSH
62854: LD_VAR 0 5
62858: PPUSH
62859: LD_VAR 0 6
62863: PPUSH
62864: CALL_OW 272
62868: PPUSH
62869: LD_VAR 0 2
62873: PPUSH
62874: LD_VAR 0 5
62878: PPUSH
62879: LD_VAR 0 6
62883: PPUSH
62884: CALL_OW 273
62888: PPUSH
62889: LD_VAR 0 3
62893: PPUSH
62894: CALL_OW 309
62898: IFFALSE 62912
// begin result := true ;
62900: LD_ADDR_VAR 0 4
62904: PUSH
62905: LD_INT 1
62907: ST_TO_ADDR
// exit ;
62908: POP
62909: POP
62910: GO 62916
// end ;
62912: GO 62846
62914: POP
62915: POP
// end ;
62916: LD_VAR 0 4
62920: RET
